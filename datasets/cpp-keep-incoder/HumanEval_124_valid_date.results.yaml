name: HumanEval_124_valid_date
language: cpp
results:
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n    \n    // Write your code here\n    \n  \
    \  // Write your code here\n    \n    // Write your code here\n    \n    // Write\
    \ your code here\n    \n    // Write your code here\n    \n    // Write your code\
    \ here\n    \n    // Write your code here\n    \n    // Write your code here\n\
    \    \n    // Write your code here\n    \n    // Write your code here\n    \n\
    \    // Write your code here\n    \n    // Write your code here\n    \n    //\
    \ Write your code here\n    \n    // Write your code here\n    \n    // Write\
    \ your code here\n    \n    // Write your code here\n    \n    // Write your code\
    \ here\n    \n    // Write your code here\n    \n    // Write your code here\n\
    \    \n    // Write your code here\n    \n    // Write your code here\n    \n\
    \    // Write your code here\n    \n    // Write your code here\n    \n    //\
    \ Write your code here\n    \n    // Write your code here\n    \n    // Write\
    \ your code here\n    \n    // Write your code here\n    \n    // Write your code\
    \ here\n    \n    // Write your code here\n    \n    // Write your code here\n\
    \    \n    // Write your code here\n    \n    // Write your code here\n    \n\
    \    // Write your code here\n    \n    // Write your code here\n    \n    //\
    \ Write your code here\n    \n    // Write your code here\n    \n    // Write\
    \ your code here\n    \n    // Write your code here\n    \n    // Write your code\
    \ here\n    \n    // Write your code here\n    \n    // Write your code here\n\
    \    \n    // Write your code here\n    \n    // Write your code here\n    \n\
    \    // Write your code here\n    \n    // Write your code here\n    \n    //\
    \ Write your code here\n    \n    // Write your code here\n    \n    // Write\
    \ your code here\n    \n    // Write your code here\n    \n    // Write your code\
    \ here\n    \n    // Write your code here\n    \n    // Write your code here\n\
    \    \n    // Write your code here\n    \n    // Write your code here\n    \n\
    \    // Write your code here\n    \n    // Write your code here\n    \n    //\
    \ Write your code here\n    \n    // Write your code here\n    \n    // Write\
    \ your code here\n    \n    // Write your code here\n    \n    // Write your code\
    \ here\n    \n    // Write your code here\n    \n    // Write your code here\n\
    \    \n    // Write your code here\n    \n    // Write your code here\n    \n\
    \    // Write your code here\n    \n    // Write your code here\n    \n    //\
    \ Write your code here\n    \n    // Write your code here\n    \n    // Write\
    \ your code here\n    \n    // Write your code here\n    \n    // Write your code\
    \ here\n    \n    // Write your code here\n    \n}\nint main() {\n    auto candidate\
    \ = valid_date;\n    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"\
    15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n\
    \    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"\
    01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n\
    \    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\"\
    )) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"\
    21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n\
    \    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\"\
    )) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"\
    2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmpkme3uoij: /tmp/tmpkme3uoij.cpp:167: int main(): Assertion `candidate((\"\
    03-11-2000\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n    // Write your code here\n    bool valid\
    \ = false;\n    int day;\n    int month;\n    int year;\n    std::stringstream\
    \ ss;\n    ss << date;\n    ss >> day >> month >> year;\n    if (day < 1 || day\
    \ > 31) {\n        valid = false;\n    }\n    if (month < 1 || month > 12) {\n\
    \        valid = false;\n    }\n    if (month == 2 && day > 29) {\n        valid\
    \ = false;\n    }\n    if (month == 4 && day > 30) {\n        valid = false;\n\
    \    }\n    if (month == 6 && day > 31) {\n        valid = false;\n    }\n   \
    \ if (month == 9 && day > 30) {\n        valid = false;\n    }\n    if (month\
    \ == 11 && day > 31) {\n        valid = false;\n    }\n    if (month == 1 && day\
    \ > 31) {\n        valid = false;\n    }\n    if (month == 3 && day > 31) {\n\
    \        valid = false;\n    }\n    if (month == 5 && day > 31) {\n        valid\
    \ = false;\n    }\n    if (month == 7 && day > 31) {\n        valid = false;\n\
    \    }\n    if (month == 8 && day > 31) {\n        valid = false;\n    }\n   \
    \ if (month == 10 && day > 31) {\n        valid = false;\n    }\n    if (month\
    \ == 12 && day > 31) {\n        valid = false;\n    }\n    if (month == 1 && day\
    \ > 31) {\n        valid = false;\n    }\n    if (month == 3 && day > 31) {\n\
    \        valid = false;\n    }\n    if (month == 5 && day > 31) {\n        valid\
    \ = false;\n    }\n    if (month == 7 && day > 31) {\n        valid = false;\n\
    \    }\n    if (month == 8 && day > 31) {\n        valid = false;\n    }\n   \
    \ if (month == 10 && day > 31) {\n        valid = false;\n    }\n    if (month\
    \ == 12 && day > 31) {\n        valid = false;\n    }\n    if (month == 1 && day\
    \ > 31) {\n        valid = false;\n    }\n    if (month == 3 && day > 31) {\n\
    \        valid = false;\n    }\n    if (month == 5 && day > 31) {\n        valid\
    \ = false;\n    }\n    if (month == 7 && day > 31) {\n        valid = false;\n\
    \    }\n    if (month == 8 && day > 31) {\n        valid = false;\n    }\n   \
    \ if (month == 10 && day > 31) {\n        valid = false;\n    }\n    if (month\
    \ == 12 && day > 31) {\n        valid = false;\n    }\n    if (month == 1 && day\
    \ > 31) {\n        valid = false;\n    }\n    if (month == 3 && day > 31) {\n\
    \        valid = false;\n    }\n    if (month == 5 && day > 31) {\n        valid\
    \ = false;\n    }\n    if (month == 7 && day \n}\nint main() {\n    auto candidate\
    \ = valid_date;\n    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"\
    15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n\
    \    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"\
    01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n\
    \    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\"\
    )) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"\
    21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n\
    \    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\"\
    )) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"\
    2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n\
    }\n"
  stdout: ''
  stderr: "/tmp/tmp8c9gjdf7.cpp: In function \u2018bool valid_date(std::string)\u2019\
    :\n/tmp/tmp8c9gjdf7.cpp:118:26: error: expected \u2018)\u2019 before \u2018}\u2019\
    \ token\n  118 |     if (month == 7 && day\n      |        ~                 ^\n\
    \      |                          )\n  119 | }\n      | ~                    \
    \     \n/tmp/tmp8c9gjdf7.cpp:119:1: error: expected primary-expression before\
    \ \u2018}\u2019 token\n  119 | }\n      | ^\n/tmp/tmp8c9gjdf7.cpp:119:1: warning:\
    \ no return statement in function returning non-void [-Wreturn-type]\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n    // Write your code here\n    bool valid\
    \ = false;\n    if (date.empty()) {\n        valid = false;\n    } else {\n  \
    \      std::stringstream ss(date);\n        std::string month;\n        std::string\
    \ day;\n        std::string year;\n        int months;\n        int days;\n  \
    \      int years;\n        ss >> month >> day >> year;\n        months = stoi(month);\n\
    \        days = stoi(day);\n        years = stoi(year);\n        if (months <\
    \ 1 || months > 12) {\n            valid = false;\n        } else if (days < 1\
    \ || days > 31) {\n            valid = false;\n        } else if (years < 1 ||\
    \ years > 2020) {\n            valid = false;\n        } else {\n            valid\
    \ = true;\n        }\n    }\n    return valid;\n}\nint main() {\n    auto candidate\
    \ = valid_date;\n    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"\
    15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n\
    \    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"\
    01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n\
    \    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\"\
    )) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"\
    21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n\
    \    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\"\
    )) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"\
    2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n\
    }\n"
  stdout: ''
  stderr: "terminate called after throwing an instance of 'std::invalid_argument'\n\
    \  what():  stoi\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n    // Write your code here\n    int day;\n\
    \    int month;\n    int year;\n    std::stringstream ss;\n    ss << date;\n \
    \   ss >> day >> month >> year;\n    if (day < 1 || day > 31) {\n        return\
    \ false;\n    }\n    if (month < 1 || month > 12) {\n        return false;\n \
    \   }\n    if (year < 2000 || year > 2040) {\n        return false;\n    }\n \
    \   return true;\n}\nint main() {\n    auto candidate = valid_date;\n    assert(candidate((\"\
    03-11-2000\")) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n\
    \    assert(candidate((\"04-0-2040\")) == (false));\n    assert(candidate((\"\
    06-04-2020\")) == (true));\n    assert(candidate((\"01-01-2007\")) == (true));\n\
    \    assert(candidate((\"03-32-2011\")) == (false));\n    assert(candidate((\"\
    \")) == (false));\n    assert(candidate((\"04-31-3000\")) == (false));\n    assert(candidate((\"\
    06-06-2005\")) == (true));\n    assert(candidate((\"21-31-2000\")) == (false));\n\
    \    assert(candidate((\"04-12-2003\")) == (true));\n    assert(candidate((\"\
    04122003\")) == (false));\n    assert(candidate((\"20030412\")) == (false));\n\
    \    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"2003-04-12\"\
    )) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n}\n"
  stdout: ''
  stderr: "tmpk7cfhxde: /tmp/tmpk7cfhxde.cpp:37: int main(): Assertion `candidate((\"\
    03-11-2000\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n    // Write your code here\n    bool valid\
    \ = false;\n    int day;\n    int month;\n    int year;\n    std::stringstream\
    \ ss(date);\n    ss >> month;\n    ss >> day;\n    ss >> year;\n    if (month\
    \ < 1 || month > 12) return false;\n    if (day < 1 || day > 31) return false;\n\
    \    if (month == 2) {\n        if (day > 29) return false;\n    }\n    if (month\
    \ == 4 || month == 6 || month == 9 || month == 11) {\n        if (day > 30) return\
    \ false;\n    }\n    if (month == 1) {\n        if (day > 31) return false;\n\
    \    }\n    if (day > 31) return false;\n    if (month == 2) {\n        if (day\
    \ > 28) return false;\n    }\n    if (month == 4 || month == 6 || month == 9 ||\
    \ month == 11) {\n        if (day > 30) return false;\n    }\n    if (month ==\
    \ 1) {\n        if (day > 31) return false;\n    }\n    if (day > 30) return false;\n\
    \    if (month == 2) {\n        if (day > 29) return false;\n    }\n    if (month\
    \ == 4 || month == 6 || month == 9 || month == 11) {\n        if (day > 31) return\
    \ false;\n    }\n    if (month == 1) {\n        if (day > 31) return false;\n\
    \    }\n    if (day > 31) return false;\n    if (month == 2) {\n        if (day\
    \ > 28) return false;\n    }\n    if (month == 4 || month == 6 || month == 9 ||\
    \ month == 11) {\n        if (day > 30) return false;\n    }\n    if (month ==\
    \ 1) {\n        if (day > 31) return false;\n    }\n    if (day > 31) return false;\n\
    \    if (month == 2) {\n        if (day > 29) return false;\n    }\n    if (month\
    \ == 4 || month == 6 || month == 9 || month == 11) {\n        if (day > 31) return\
    \ false;\n    }\n    if (month == 1) {\n        if (day > 31) return false;\n\
    \    }\n    if (day > 31) return false;\n    if (month == 2) {\n        if (day\
    \ > 28) return false;\n    }\n    if (month == 4 || month == 6 || month == 9 ||\
    \ month == 11) {\n        if (day > 30) return false;\n    }\n    if (month ==\
    \ 1) {\n        if (day > 31) return false;\n    }\n    if (day > 31) return false;\n\
    \    if (month == 2) {\n        if (day > 29) return false;\n    }\n    if (month\
    \ == 4 || month == 6 || month == 9 || month == 11) {\n        if (day > 31) return\
    \ false;\n    }\n    if (month == 1) {\n        if (day > 31) return false;\n\
    \    }\n    if (day > 31) return false;\n    if (month == 2) {\n        if (day\
    \ > 28) return false;\n    }\n    if (month == 4 || month == 6 || month == 9 ||\
    \ month == 11) {\n        if (day > 30) return false;\n    }\n    if (month ==\
    \ 1) {\n        if (day > 31) return false;\n    }\n    if (day > 31) return false;\n\
    \    if (month == 2) {\n        if (day > 29) return false;\n    }\n    if (month\n\
    }\nint main() {\n    auto candidate = valid_date;\n    assert(candidate((\"03-11-2000\"\
    )) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"\
    04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n\
    \    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"\
    03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"\
    04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n\
    \    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"\
    04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n\
    \    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\"\
    )) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"\
    04-2003\")) == (false));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpti_hsp71.cpp: In function \u2018bool valid_date(std::string)\u2019\
    :\n/tmp/tmpti_hsp71.cpp:111:14: error: expected \u2018)\u2019 before \u2018}\u2019\
    \ token\n  111 |     if (month\n      |        ~     ^\n      |              )\n\
    \  112 | }\n      | ~             \n/tmp/tmpti_hsp71.cpp:112:1: error: expected\
    \ primary-expression before \u2018}\u2019 token\n  112 | }\n      | ^\n/tmp/tmpti_hsp71.cpp:112:1:\
    \ warning: control reaches end of non-void function [-Wreturn-type]\n  112 | }\n\
    \      | ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n    // Write your code here\n    int day;\n\
    \    int month;\n    int year;\n    std::stringstream ss;\n    ss << date;\n \
    \   ss >> day >> month >> year;\n    \n    \n    \n    \n    \n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n\n}\nint main() {\n   \
    \ auto candidate = valid_date;\n    assert(candidate((\"03-11-2000\")) == (true));\n\
    \    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"\
    04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n\
    \    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"\
    03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"\
    04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n\
    \    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"\
    04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n\
    \    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\"\
    )) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"\
    04-2003\")) == (false));\n}\n"
  stdout: ''
  stderr: "tmpwe17cg2e: /tmp/tmpwe17cg2e.cpp:265: int main(): Assertion `candidate((\"\
    03-11-2000\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n    // Write your code here\n    bool valid\
    \ = true;\n    std::string months[12] = {\n        \"January\", \"February\",\
    \ \"March\", \"April\", \"May\", \"June\",\n        \"July\", \"August\", \"September\"\
    , \"October\", \"November\", \"December\"\n    };\n    std::string days[31] =\
    \ {\n        \"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\"\
    , \"Friday\", \"Saturday\"\n    };\n    std::string years[12] = {\n        \"\
    0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"\
    11\", \"12\",\n        \"13\", \"14\", \"15\", \"16\", \"17\", \"18\", \"19\"\
    , \"20\", \"21\", \"22\", \"23\", \"24\", \"25\", \"26\", \"27\", \"28\", \"29\"\
    , \"30\", \"31\"\n    };\n    int day;\n    int month;\n    int year;\n    std::string::size_type\
    \ pos;\n    pos = date.find('-');\n    month = stoi(date.substr(0, pos));\n  \
    \  day = stoi(date.substr(pos + 1, 2));\n    pos = date.find('-');\n    year =\
    \ stoi(date.substr(pos + 1, 2));\n    if (month < 1 || month > 12) {\n       \
    \ valid = false;\n    }\n    if (day < 1 || day > 31) {\n        valid = false;\n\
    \    }\n    if (year < 1 || year > 12) {\n        valid = false;\n    }\n    if\
    \ (month == 2) {\n        if (day > 29) {\n            valid = false;\n      \
    \  }\n    }\n    return valid;\n}\nint main() {\n    auto candidate = valid_date;\n\
    \    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"\
    15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n\
    \    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"\
    01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n\
    \    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\"\
    )) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"\
    21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n\
    \    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\"\
    )) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"\
    2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n\
    }\n"
  stdout: ''
  stderr: "/tmp/tmpxl5a3ofo.cpp: In function \u2018bool valid_date(std::string)\u2019\
    :\n/tmp/tmpxl5a3ofo.cpp:29:5: error: too many initializers for \u2018std::string\
    \ [12]\u2019 {aka \u2018std::__cxx11::basic_string<char> [12]\u2019}\n   29 |\
    \     };\n      |     ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n    // Write your code here\n    int day;\n\
    \    int month;\n    int year;\n    std::stringstream ss;\n    ss << date;\n \
    \   ss >> day >> month >> year;\n    if (day < 1 || day > 31 || month < 1 || month\
    \ > 12 || year < 1 || year > 9999) {\n        return false;\n    }\n    if (month\
    \ == 2) {\n        if (day > 29) {\n            return false;\n        }\n   \
    \ }\n    if (month == 4 || month == 6 || month == 9 || month == 11) {\n      \
    \  if (day > 30) {\n            return false;\n        }\n    }\n    if (month\
    \ == 1) {\n        if (day > 31) {\n            return false;\n        }\n   \
    \ }\n    return true;\n}\nint main() {\n    auto candidate = valid_date;\n   \
    \ assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"15-01-2012\"\
    )) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n    assert(candidate((\"\
    06-04-2020\")) == (true));\n    assert(candidate((\"01-01-2007\")) == (true));\n\
    \    assert(candidate((\"03-32-2011\")) == (false));\n    assert(candidate((\"\
    \")) == (false));\n    assert(candidate((\"04-31-3000\")) == (false));\n    assert(candidate((\"\
    06-06-2005\")) == (true));\n    assert(candidate((\"21-31-2000\")) == (false));\n\
    \    assert(candidate((\"04-12-2003\")) == (true));\n    assert(candidate((\"\
    04122003\")) == (false));\n    assert(candidate((\"20030412\")) == (false));\n\
    \    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"2003-04-12\"\
    )) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n}\n"
  stdout: ''
  stderr: "tmpcdm49kv8: /tmp/tmpcdm49kv8.cpp:46: int main(): Assertion `candidate((\"\
    03-11-2000\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n    // Write your code here\n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n}\nint main() {\n    auto candidate = valid_date;\n\
    \    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"\
    15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n\
    \    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"\
    01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n\
    \    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\"\
    )) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"\
    21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n\
    \    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\"\
    )) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"\
    2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmpxq23r6jf: /tmp/tmpxq23r6jf.cpp:275: int main(): Assertion `candidate((\"\
    03-11-2000\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n    std::string date_s[] = {\"01\",\"03\",\"\
    05\",\"07\",\"08\",\"10\",\"12\",\"04\",\"06\",\"09\",\"11\",\"02\"};\n    std::string\
    \ date_s_s[] = {\"01\",\"03\",\"05\",\"07\",\"08\",\"10\",\"12\",\"04\",\"06\"\
    ,\"09\",\"11\",\"02\"};\n    std::string date_s_s_s[] = {\"01\",\"03\",\"05\"\
    ,\"07\",\"08\",\"10\",\"12\",\"04\",\"06\",\"09\",\"11\",\"02\"};\n    std::string\
    \ date_s_s_s_s[] = {\"01\",\"03\",\"05\",\"07\",\"08\",\"10\",\"12\",\"04\",\"\
    06\",\"09\",\"11\",\"02\"};\n    std::string date_s_s_s_s_s[] = {\"01\",\"03\"\
    ,\"05\",\"07\",\"08\",\"10\",\"12\",\"04\",\"06\",\"09\",\"11\",\"02\"};\n   \
    \ std::string date_s_s_s_s_s_s[] = {\"01\",\"03\",\"05\",\"07\",\"08\",\"10\"\
    ,\"12\",\"04\",\"06\",\"09\",\"11\",\"02\"};\n    std::string date_s_s_s_s_s_s_s[]\
    \ = {\"01\",\"03\",\"05\",\"07\",\"08\",\"10\",\"12\",\"04\",\"06\",\"09\",\"\
    11\",\"02\"};\n    std::string date_s_s_s_s_s_s_s_s[] = {\"01\",\"03\",\"05\"\
    ,\"07\",\"08\",\"10\",\"12\",\"04\",\"06\",\"09\",\"11\",\"02\"};\n    std::string\
    \ date_s_s_s_s_s_s_s_s_s[] = {\"01\",\"03\",\"05\",\"07\",\"08\",\"10\",\"12\"\
    ,\"04\",\"06\",\"09\",\"11\",\"02\"};\n    std::string date_s_s_s_s_s_s_s_s_s_s[]\
    \ = {\"01\",\"03\",\"05\",\"07\",\"08\",\"10\",\"12\",\"04\",\"06\",\"09\",\"\
    11\",\"02\"};\n    std::string date_s_s_s_s_s_s_s_s_s_s[] = {\"01\",\"03\",\"\
    05\",\"07\",\"08\",\"10\",\"12\",\"04\",\"06\",\"09\",\"11\",\"02\"};\n    std::string\
    \ date_s_s_s_s_s_s_s_s_s_s_s[] = {\"01\",\"03\",\"05\",\"07\",\"08\",\"10\",\"\
    12\",\"04\",\"06\",\"09\",\"11\",\"02\"};\n    std::string date_s_s_s_s_s_s_s_s_s_s_s_s[]\
    \ = {\"01\",\"03\",\"05\",\"07\",\"08\",\"10\",\"12\",\"04\",\"06\",\"09\",\"\
    11\",\"02\"};\n    std::string date_s_s_s_s_s_s_s_s_s_s_s_s_s[] = {\"01\",\"03\n\
    }\nint main() {\n    auto candidate = valid_date;\n    assert(candidate((\"03-11-2000\"\
    )) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"\
    04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n\
    \    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"\
    03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"\
    04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n\
    \    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"\
    04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n\
    \    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\"\
    )) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"\
    04-2003\")) == (false));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpc9q1b3u4.cpp:30:58: warning: missing terminating \" character\n\
    \   30 |     std::string date_s_s_s_s_s_s_s_s_s_s_s_s_s[] = {\"01\",\"03\n   \
    \   |                                                          ^\n/tmp/tmpc9q1b3u4.cpp:30:58:\
    \ error: missing terminating \" character\n   30 |     std::string date_s_s_s_s_s_s_s_s_s_s_s_s_s[]\
    \ = {\"01\",\"03\n      |                                                    \
    \      ^~~\n/tmp/tmpc9q1b3u4.cpp: In function \u2018bool valid_date(std::string)\u2019\
    :\n/tmp/tmpc9q1b3u4.cpp:27:17: error: redeclaration of \u2018std::string date_s_s_s_s_s_s_s_s_s_s\
    \ []\u2019\n   27 |     std::string date_s_s_s_s_s_s_s_s_s_s[] = {\"01\",\"03\"\
    ,\"05\",\"07\",\"08\",\"10\",\"12\",\"04\",\"06\",\"09\",\"11\",\"02\"};\n   \
    \   |                 ^~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpc9q1b3u4.cpp:26:17: note:\
    \ \u2018std::string date_s_s_s_s_s_s_s_s_s_s [12]\u2019 previously declared here\n\
    \   26 |     std::string date_s_s_s_s_s_s_s_s_s_s[] = {\"01\",\"03\",\"05\",\"\
    07\",\"08\",\"10\",\"12\",\"04\",\"06\",\"09\",\"11\",\"02\"};\n      |      \
    \           ^~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpc9q1b3u4.cpp:32:1: error: expected\
    \ \u2018,\u2019 or \u2018;\u2019 before \u2018int\u2019\n   32 | int main() {\n\
    \      | ^~~\n/tmp/tmpc9q1b3u4.cpp:50:1: error: expected \u2018}\u2019 at end\
    \ of input\n   50 | }\n      | ^\n/tmp/tmpc9q1b3u4.cpp:16:35: note: to match this\
    \ \u2018{\u2019\n   16 | bool valid_date(std::string date) {\n      |        \
    \                           ^\n/tmp/tmpc9q1b3u4.cpp:50:1: warning: no return statement\
    \ in function returning non-void [-Wreturn-type]\n   50 | }\n      | ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n    // Write your code here\n    \n    int day;\n\
    \    int month;\n    int year;\n    \n    bool flag = false;\n    \n    std::stringstream\
    \ ss(date);\n    \n    ss >> month >> day >> year;\n    \n    if(month < 1 ||\
    \ month > 12){\n        flag = false;\n    }\n    else if(day < 1 || day > 31){\n\
    \        flag = false;\n    }\n    else if(month == 2 && day > 29){\n        flag\
    \ = false;\n    }\n    else if(month == 4 && day > 30){\n        flag = false;\n\
    \    }\n    else if(month == 6 && day > 30){\n        flag = false;\n    }\n \
    \   else if(month == 9 && day > 30){\n        flag = false;\n    }\n    else if(month\
    \ == 11 && day > 30){\n        flag = false;\n    }\n    else if(month == 1 &&\
    \ day > 29){\n        flag = false;\n    }\n    else if(month == 3 && day > 31){\n\
    \        flag = false;\n    }\n    else if(month == 5 && day > 31){\n        flag\
    \ = false;\n    }\n    else if(month == 7 && day > 31){\n        flag = false;\n\
    \    }\n    else if(month == 8 && day > 31){\n        flag = false;\n    }\n \
    \   else if(month == 10 && day > 31){\n        flag = false;\n    }\n    else\
    \ if(month == 12 && day > 31){\n        flag = false;\n    }\n    else if(month\
    \ == 1 && day > 30){\n        flag = false;\n    }\n    else if(month == 3 &&\
    \ day > 30){\n        flag = false;\n    }\n    else if(month == 5 && day > 30){\n\
    \        flag = false;\n    }\n    else if(month == 7 && day > 30){\n        flag\
    \ = false;\n    }\n    else if(month == 8 && day > 30){\n        flag = false;\n\
    \    }\n    else if(month == 10 && day > 30){\n        flag = false;\n    }\n\
    \    else if(month == 12 && day > 30){\n        flag = false;\n    }\n    else\
    \ if(month == 1 && day > 29){\n        flag = false;\n    }\n    else if(month\
    \ == 3 && day > 31){\n        flag = false;\n    }\n    else if(month == 5 &&\
    \ day > 31){\n        flag = false;\n    }\n    else if(month == 7 && day > 31){\n\
    \        flag = false;\n    }\n    else if(month == 8 && day > 31){\n        flag\
    \ = false;\n    }\n    else if(month == 10 && day > 31){\n        flag = false;\n\
    \    }\n    else if(month == 12 && day > 31){\n        flag = false;\n    }\n\
    \    else if(month\n}\nint main() {\n    auto candidate = valid_date;\n    assert(candidate((\"\
    03-11-2000\")) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n\
    \    assert(candidate((\"04-0-2040\")) == (false));\n    assert(candidate((\"\
    06-04-2020\")) == (true));\n    assert(candidate((\"01-01-2007\")) == (true));\n\
    \    assert(candidate((\"03-32-2011\")) == (false));\n    assert(candidate((\"\
    \")) == (false));\n    assert(candidate((\"04-31-3000\")) == (false));\n    assert(candidate((\"\
    06-06-2005\")) == (true));\n    assert(candidate((\"21-31-2000\")) == (false));\n\
    \    assert(candidate((\"04-12-2003\")) == (true));\n    assert(candidate((\"\
    04122003\")) == (false));\n    assert(candidate((\"20030412\")) == (false));\n\
    \    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"2003-04-12\"\
    )) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpw5hfstof.cpp: In function \u2018bool valid_date(std::string)\u2019\
    :\n/tmp/tmpw5hfstof.cpp:113:18: error: expected \u2018)\u2019 before \u2018}\u2019\
    \ token\n  113 |     else if(month\n      |            ~     ^\n      |      \
    \            )\n  114 | }\n      | ~                 \n/tmp/tmpw5hfstof.cpp:114:1:\
    \ error: expected primary-expression before \u2018}\u2019 token\n  114 | }\n \
    \     | ^\n/tmp/tmpw5hfstof.cpp:114:1: warning: no return statement in function\
    \ returning non-void [-Wreturn-type]\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n    // Write your code here\n    bool valid\
    \ = true;\n    std::string months[12] = {\"January\", \"February\", \"March\"\
    , \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\"\
    , \"November\", \"December\"};\n    std::string days[31] = {\"31\", \"30\", \"\
    29\", \"28\", \"27\", \"26\", \"25\", \"24\", \"23\", \"22\", \"21\", \"20\",\
    \ \"19\", \"18\", \"17\", \"16\", \"15\", \"14\", \"13\", \"12\", \"11\", \"10\"\
    , \"9\", \"8\", \"7\", \"6\", \"5\", \"4\", \"3\", \"2\", \"1\"};\n    std::string\
    \ years[12] = {\"2000\", \"2001\", \"2002\", \"2003\", \"2004\", \"2005\", \"\
    2006\", \"2007\", \"2008\", \"2009\", \"2010\", \"2011\", \"2012\", \"2013\",\
    \ \"2014\", \"2015\", \"2016\", \"2017\", \"2018\", \"2019\", \"2020\", \"2021\"\
    , \"2022\", \"2023\", \"2024\", \"2025\", \"2026\", \"2027\", \"2028\", \"2029\"\
    , \"2030\", \"2031\", \"2032\", \"2033\", \"2034\", \"2035\", \"2036\", \"2037\"\
    , \"2038\", \"2039\", \"2040\"};\n    std::string dates[4] = {\"03-11-2000\",\
    \ \"15-01-2012\", \"04-0-2040\", \"06-04-2020\", \"06/04/2020\"};\n    std::string\
    \ date_str = date;\n    int day;\n    int month;\n    int year;\n    std::string::size_type\
    \ pos;\n    std::string::size_type pos2;\n    std::string::size_type pos3;\n \
    \   std::string::size_type pos4;\n    std::string::size_type pos5;\n    std::string::size_type\
    \ pos6;\n    std::string::size_type pos7;\n    std::string::size_type pos8;\n\
    \    std::string::size_type pos9;\n    std::string::size_type pos10;\n    std::string::size_type\
    \ pos11;\n    std::string::size_type pos12;\n    std::string::size_type pos13;\n\
    \    std::string::size_type pos14;\n    std::string::size_type pos15;\n    std::string::size_type\
    \ pos16;\n    std::string::size_type pos17;\n    std::string::size_type pos18;\n\
    \    std::string::size_type pos19;\n    std::string::size_type pos20;\n    std::string::size_type\
    \ pos21;\n    std::string::size_type pos22;\n    std::string::size_type pos23;\n\
    \    std::string::size_type pos24;\n    std::string::size_type pos25;\n    std::string::size_type\
    \ pos26;\n    std::string::size_type pos27;\n    std::string::size_type pos28;\n\
    \    std::string::size_type \n}\nint main() {\n    auto candidate = valid_date;\n\
    \    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"\
    15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n\
    \    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"\
    01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n\
    \    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\"\
    )) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"\
    21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n\
    \    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\"\
    )) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"\
    2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n\
    }\n"
  stdout: ''
  stderr: "/tmp/tmpdod9x8nf.cpp: In function \u2018bool valid_date(std::string)\u2019\
    :\n/tmp/tmpdod9x8nf.cpp:21:356: error: too many initializers for \u2018std::string\
    \ [12]\u2019 {aka \u2018std::__cxx11::basic_string<char> [12]\u2019}\n   21 |\
    \     std::string years[12] = {\"2000\", \"2001\", \"2002\", \"2003\", \"2004\"\
    , \"2005\", \"2006\", \"2007\", \"2008\", \"2009\", \"2010\", \"2011\", \"2012\"\
    , \"2013\", \"2014\", \"2015\", \"2016\", \"2017\", \"2018\", \"2019\", \"2020\"\
    , \"2021\", \"2022\", \"2023\", \"2024\", \"2025\", \"2026\", \"2027\", \"2028\"\
    , \"2029\", \"2030\", \"2031\", \"2032\", \"2033\", \"2034\", \"2035\", \"2036\"\
    , \"2037\", \"2038\", \"2039\", \"2040\"};\n      |                          \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                          ^\n/tmp/tmpdod9x8nf.cpp:22:96: error: too many initializers\
    \ for \u2018std::string [4]\u2019 {aka \u2018std::__cxx11::basic_string<char>\
    \ [4]\u2019}\n   22 |     std::string dates[4] = {\"03-11-2000\", \"15-01-2012\"\
    , \"04-0-2040\", \"06-04-2020\", \"06/04/2020\"};\n      |                   \
    \                                                                            \
    \ ^\n/tmp/tmpdod9x8nf.cpp:56:1: error: expected unqualified-id before \u2018}\u2019\
    \ token\n   56 | }\n      | ^\n/tmp/tmpdod9x8nf.cpp:56:1: warning: no return statement\
    \ in function returning non-void [-Wreturn-type]\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n    // Write your code here\n    int day;\n\
    \    int month;\n    int year;\n    std::stringstream ss;\n    ss << date;\n \
    \   ss >> day >> month >> year;\n    if (day < 1 || day > 31) {\n        return\
    \ false;\n    }\n    if (month < 1 || month > 12) {\n        return false;\n \
    \   }\n    if (year < 1000 || year > 3000) {\n        return false;\n    }\n \
    \   if (month == 2) {\n        if (day > 29) {\n            return false;\n  \
    \      }\n    }\n    return true;\n}\nint main() {\n    auto candidate = valid_date;\n\
    \    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"\
    15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n\
    \    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"\
    01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n\
    \    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\"\
    )) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"\
    21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n\
    \    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\"\
    )) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"\
    2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmp8vucm9fx: /tmp/tmp8vucm9fx.cpp:42: int main(): Assertion `candidate((\"\
    03-11-2000\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n    // Write your code here\n    int day;\n\
    \    int month;\n    int year;\n    bool valid = true;\n    std::stringstream\
    \ ss(date);\n    ss >> month >> day >> year;\n    if (month < 1 || month > 12\
    \ || day < 1 || day > 31 || year < 1900 || year > 2099) {\n        valid = false;\n\
    \    }\n    if (month == 2 && day > 29) {\n        valid = false;\n    }\n   \
    \ if (month == 4 && day > 30) {\n        valid = false;\n    }\n    if (month\
    \ == 6 && day > 31) {\n        valid = false;\n    }\n    if (month == 9 && day\
    \ > 31) {\n        valid = false;\n    }\n    if (month == 11 && day > 30) {\n\
    \        valid = false;\n    }\n    return valid;\n}\nint main() {\n    auto candidate\
    \ = valid_date;\n    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"\
    15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n\
    \    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"\
    01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n\
    \    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\"\
    )) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"\
    21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n\
    \    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\"\
    )) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"\
    2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmpmnaayklx: /tmp/tmpmnaayklx.cpp:46: int main(): Assertion `candidate((\"\
    03-11-2000\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n    // Write your code here\n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n}\nint main() {\n    auto candidate = valid_date;\n\
    \    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"\
    15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n\
    \    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"\
    01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n\
    \    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\"\
    )) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"\
    21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n\
    \    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\"\
    )) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"\
    2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmpcm29tksl: /tmp/tmpcm29tksl.cpp:275: int main(): Assertion `candidate((\"\
    03-11-2000\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n    // Write your code here\n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n}\nint main() {\n    auto candidate = valid_date;\n\
    \    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"\
    15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n\
    \    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"\
    01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n\
    \    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\"\
    )) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"\
    21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n\
    \    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\"\
    )) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"\
    2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmpqeuhhlm0: /tmp/tmpqeuhhlm0.cpp:275: int main(): Assertion `candidate((\"\
    03-11-2000\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n    // Write your code here\n    int day;\n\
    \    int month;\n    int year;\n    std::stringstream ss;\n    ss << date;\n \
    \   ss >> day >> month >> year;\n    if (day < 1 || day > 31) {\n        return\
    \ false;\n    }\n    if (month < 1 || month > 12) {\n        return false;\n \
    \   }\n    if (year < 1000 || year > 3000) {\n        return false;\n    }\n \
    \   return true;\n}\nint main() {\n    auto candidate = valid_date;\n    assert(candidate((\"\
    03-11-2000\")) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n\
    \    assert(candidate((\"04-0-2040\")) == (false));\n    assert(candidate((\"\
    06-04-2020\")) == (true));\n    assert(candidate((\"01-01-2007\")) == (true));\n\
    \    assert(candidate((\"03-32-2011\")) == (false));\n    assert(candidate((\"\
    \")) == (false));\n    assert(candidate((\"04-31-3000\")) == (false));\n    assert(candidate((\"\
    06-06-2005\")) == (true));\n    assert(candidate((\"21-31-2000\")) == (false));\n\
    \    assert(candidate((\"04-12-2003\")) == (true));\n    assert(candidate((\"\
    04122003\")) == (false));\n    assert(candidate((\"20030412\")) == (false));\n\
    \    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"2003-04-12\"\
    )) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n}\n"
  stdout: ''
  stderr: "tmp3_mjq8sp: /tmp/tmp3_mjq8sp.cpp:37: int main(): Assertion `candidate((\"\
    03-11-2000\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n    // Write your code here\n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n}\nint main() {\n    auto candidate = valid_date;\n\
    \    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"\
    15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n\
    \    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"\
    01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n\
    \    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\"\
    )) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"\
    21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n\
    \    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\"\
    )) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"\
    2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmpkpda98i_: /tmp/tmpkpda98i_.cpp:275: int main(): Assertion `candidate((\"\
    03-11-2000\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n    // Write your code here\n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n}\nint main() {\n    auto candidate = valid_date;\n\
    \    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"\
    15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n\
    \    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"\
    01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n\
    \    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\"\
    )) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"\
    21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n\
    \    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\"\
    )) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"\
    2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmpnn08me9s: /tmp/tmpnn08me9s.cpp:275: int main(): Assertion `candidate((\"\
    03-11-2000\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n    // Write your code here\n    \n    // Write\
    \ your code here\n    \n    // Write your code here\n    \n    // Write your code\
    \ here\n    \n    // Write your code here\n    \n    // Write your code here\n\
    \    \n    // Write your code here\n    \n    // Write your code here\n    \n\
    \    // Write your code here\n    \n    // Write your code here\n    \n    //\
    \ Write your code here\n    \n    // Write your code here\n    \n    // Write\
    \ your code here\n    \n    // Write your code here\n    \n    // Write your code\
    \ here\n    \n    // Write your code here\n    \n    // Write your code here\n\
    \    \n    // Write your code here\n    \n    // Write your code here\n    \n\
    \    // Write your code here\n    \n    // Write your code here\n    \n    //\
    \ Write your code here\n    \n    // Write your code here\n    \n    // Write\
    \ your code here\n    \n    // Write your code here\n    \n    // Write your code\
    \ here\n    \n    // Write your code here\n    \n    // Write your code here\n\
    \    \n    // Write your code here\n    \n    // Write your code here\n    \n\
    \    // Write your code here\n    \n    // Write your code here\n    \n    //\
    \ Write your code here\n    \n    // Write your code here\n    \n    // Write\
    \ your code here\n    \n    // Write your code here\n    \n    // Write your code\
    \ here\n    \n    // Write your code here\n    \n    // Write your code here\n\
    \    \n    // Write your code here\n    \n    // Write your code here\n    \n\
    \    // Write your code here\n    \n    // Write your code here\n    \n    //\
    \ Write your code here\n    \n    // Write your code here\n    \n    // Write\
    \ your code here\n    \n    // Write your code here\n    \n    // Write your code\
    \ here\n    \n    // Write your code here\n    \n    // Write your code here\n\
    \    \n    // Write your code here\n    \n    // Write your code here\n    \n\
    \    // Write your code here\n    \n    // Write your code here\n    \n    //\
    \ Write your code here\n    \n    // Write your code here\n    \n    // Write\
    \ your code here\n    \n    // Write your code here\n    \n    // Write your code\
    \ here\n    \n    // Write your code here\n    \n    // Write your code here\n\
    \    \n    // Write your code here\n    \n    // Write your code here\n    \n\
    \    // Write your code here\n    \n    // Write your code here\n    \n    //\
    \ Write your code here\n    \n    // Write your code here\n    \n    // Write\
    \ your code here\n    \n    // Write your code here\n    \n    // Write your code\
    \ here\n    \n    // Write your code here\n    \n    // Write your code here\n\
    \    \n    // Write your code here\n    \n    // \n}\nint main() {\n    auto candidate\
    \ = valid_date;\n    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"\
    15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n\
    \    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"\
    01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n\
    \    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\"\
    )) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"\
    21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n\
    \    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\"\
    )) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"\
    2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmpw1_oklck: /tmp/tmpw1_oklck.cpp:167: int main(): Assertion `candidate((\"\
    03-11-2000\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n    // Write your code here\n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n}\nint main() {\n    auto candidate = valid_date;\n\
    \    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"\
    15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n\
    \    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"\
    01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n\
    \    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\"\
    )) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"\
    21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n\
    \    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\"\
    )) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"\
    2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmp_1xdqsyb: /tmp/tmp_1xdqsyb.cpp:275: int main(): Assertion `candidate((\"\
    03-11-2000\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n    // Write your code here\n    int day;\n\
    \    int month;\n    int year;\n    std::stringstream ss;\n    ss << date;\n \
    \   ss >> day >> month >> year;\n    \n    bool valid = true;\n    \n    if (day\
    \ < 1 || day > 31) {\n        valid = false;\n    }\n    \n    if (month < 1 ||\
    \ month > 12) {\n        valid = false;\n    }\n    \n    if (year < 1 || year\
    \ > 9999) {\n        valid = false;\n    }\n    \n    return valid;\n}\nint main()\
    \ {\n    auto candidate = valid_date;\n    assert(candidate((\"03-11-2000\"))\
    \ == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"\
    04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n\
    \    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"\
    03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"\
    04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n\
    \    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"\
    04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n\
    \    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\"\
    )) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"\
    04-2003\")) == (false));\n}\n"
  stdout: ''
  stderr: "tmp6k5evbxg: /tmp/tmp6k5evbxg.cpp:43: int main(): Assertion `candidate((\"\
    03-11-2000\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n    // Write your code here\n    \n    bool\
    \ valid = false;\n    \n    std::string months[12] = {\n        \"January\", \"\
    March\", \"May\", \"July\", \"August\", \"October\", \"December\"\n    };\n  \
    \  \n    std::string days[31] = {\n        \"01\", \"02\", \"03\", \"04\", \"\
    05\", \"06\", \"07\", \"08\", \"09\", \"10\", \"11\", \"12\", \"13\", \"14\",\
    \ \"15\", \"16\", \"17\", \"18\", \"19\", \"20\", \"21\", \"22\", \"23\", \"24\"\
    , \"25\", \"26\", \"27\", \"28\", \"29\", \"30\", \"31\"\n    };\n    \n    std::string\
    \ years[12] = {\n        \"2000\", \"2001\", \"2002\", \"2003\", \"2004\", \"\
    2005\", \"2006\", \"2007\", \"2008\", \"2009\", \"2010\", \"2011\", \"2012\",\
    \ \"2013\", \"2014\", \"2015\", \"2016\", \"2017\", \"2018\", \"2019\", \"2020\"\
    , \"2021\", \"2022\", \"2023\"\n    };\n    \n    int days_month[12] = {\n   \
    \     0, 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31\n    };\n    \n    int\
    \ days_year[12] = {\n        0, 31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31\n\
    \    };\n    \n    int month_index = 0;\n    int year_index = 0;\n    \n    int\
    \ days_month_index = 0;\n    int days_year_index = 0;\n    \n    int month = 0;\n\
    \    int year = 0;\n    \n    int day = 0;\n    \n    std::string date_str = date;\n\
    \    \n    date_str = date_str.substr(0, 2);\n    \n    month = stoi(date_str);\n\
    \    \n    date_str = date_str.substr(2, 2);\n    \n    year = stoi(date_str);\n\
    \    \n    date_str = date_str.substr(4, 2);\n    \n    day = stoi(date_str);\n\
    \    \n    days_month_index = month_index;\n    days_year_index = year_index;\n\
    \    \n    days_month_index += month;\n    \n    days_year_index += year;\n  \
    \  \n    days_month_index += day;\n    \n    valid = (days_month_index <= days_month[month_index]\
    \ && days_year_index <= days_year[year_index]);\n    \n    return valid;\n}\n\
    int main() {\n    auto candidate = valid_date;\n    assert(candidate((\"03-11-2000\"\
    )) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"\
    04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n\
    \    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"\
    03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"\
    04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n\
    \    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"\
    04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n\
    \    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\"\
    )) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"\
    04-2003\")) == (false));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpn931n49r.cpp: In function \u2018bool valid_date(std::string)\u2019\
    :\n/tmp/tmpn931n49r.cpp:31:5: error: too many initializers for \u2018std::string\
    \ [12]\u2019 {aka \u2018std::__cxx11::basic_string<char> [12]\u2019}\n   31 |\
    \     };\n      |     ^\n/tmp/tmpn931n49r.cpp:35:5: error: too many initializers\
    \ for \u2018int [12]\u2019\n   35 |     };\n      |     ^\n/tmp/tmpn931n49r.cpp:39:5:\
    \ error: too many initializers for \u2018int [12]\u2019\n   39 |     };\n    \
    \  |     ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n    // Write your code here\n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n}\nint main() {\n    auto candidate = valid_date;\n\
    \    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"\
    15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n\
    \    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"\
    01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n\
    \    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\"\
    )) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"\
    21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n\
    \    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\"\
    )) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"\
    2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmpqlsgnc3m: /tmp/tmpqlsgnc3m.cpp:275: int main(): Assertion `candidate((\"\
    03-11-2000\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n    // Write your code here\n    bool valid\
    \ = false;\n    int day;\n    int month;\n    int year;\n    std::stringstream\
    \ ss;\n    ss << date;\n    ss >> day >> month >> year;\n    if (day < 1 || day\
    \ > 31) {\n        valid = false;\n    }\n    if (month < 1 || month > 12) {\n\
    \        valid = false;\n    }\n    if (month == 2 && day > 29) {\n        valid\
    \ = false;\n    }\n    if (month == 2 && day < 1) {\n        valid = false;\n\
    \    }\n    if (month == 4 && day > 30) {\n        valid = false;\n    }\n   \
    \ if (month == 4 && day < 1) {\n        valid = false;\n    }\n    if (month ==\
    \ 6 && day > 31) {\n        valid = false;\n    }\n    if (month == 6 && day <\
    \ 1) {\n        valid = false;\n    }\n    if (month == 9 && day > 30) {\n   \
    \     valid = false;\n    }\n    if (month == 9 && day < 1) {\n        valid =\
    \ false;\n    }\n    if (month == 11 && day > 31) {\n        valid = false;\n\
    \    }\n    if (month == 11 && day < 1) {\n        valid = false;\n    }\n   \
    \ if (month == 12 && day > 31) {\n        valid = false;\n    }\n    if (month\
    \ == 12 && day < 1) {\n        valid = false;\n    }\n    if (day > 31) {\n  \
    \      valid = false;\n    }\n    if (day < 1) {\n        valid = false;\n   \
    \ }\n    if (year < 1000 || year > 3000) {\n        valid = false;\n    }\n  \
    \  return valid;\n}\nint main() {\n    auto candidate = valid_date;\n    assert(candidate((\"\
    03-11-2000\")) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n\
    \    assert(candidate((\"04-0-2040\")) == (false));\n    assert(candidate((\"\
    06-04-2020\")) == (true));\n    assert(candidate((\"01-01-2007\")) == (true));\n\
    \    assert(candidate((\"03-32-2011\")) == (false));\n    assert(candidate((\"\
    \")) == (false));\n    assert(candidate((\"04-31-3000\")) == (false));\n    assert(candidate((\"\
    06-06-2005\")) == (true));\n    assert(candidate((\"21-31-2000\")) == (false));\n\
    \    assert(candidate((\"04-12-2003\")) == (true));\n    assert(candidate((\"\
    04122003\")) == (false));\n    assert(candidate((\"20030412\")) == (false));\n\
    \    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"2003-04-12\"\
    )) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n}\n"
  stdout: ''
  stderr: "tmpgznlkqfm: /tmp/tmpgznlkqfm.cpp:80: int main(): Assertion `candidate((\"\
    03-11-2000\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n    // Write your code here\n    \n    bool\
    \ valid = true;\n    \n    if(date.empty()){\n        valid = false;\n    }\n\
    \    \n    int day;\n    int month;\n    int year;\n    \n    std::stringstream\
    \ ss(date);\n    \n    ss >> month >> day >> year;\n    \n    if(month < 1 ||\
    \ month > 12){\n        valid = false;\n    }\n    \n    if(day < 1 || day > 31){\n\
    \        valid = false;\n    }\n    \n    if(month == 2 && day > 29){\n      \
    \  valid = false;\n    }\n    \n    if(month == 4 || month == 6 || month == 9\
    \ || month == 11 && day > 30){\n        valid = false;\n    }\n    \n    if(month\
    \ == 1 && day > 31){\n        valid = false;\n    }\n    \n    if(month == 1 &&\
    \ day > 29){\n        valid = false;\n    }\n    \n    if(month == 1 && day >\
    \ 28){\n        valid = false;\n    }\n    \n    if(month == 1 && day > 27){\n\
    \        valid = false;\n    }\n    \n    if(month == 1 && day > 26){\n      \
    \  valid = false;\n    }\n    \n    if(month == 1 && day > 25){\n        valid\
    \ = false;\n    }\n    \n    if(month == 1 && day > 24){\n        valid = false;\n\
    \    }\n    \n    if(month == 1 && day > 23){\n        valid = false;\n    }\n\
    \    \n    if(month == 1 && day > 22){\n        valid = false;\n    }\n    \n\
    \    if(month == 1 && day > 21){\n        valid = false;\n    }\n    \n    if(month\
    \ == 1 && day > 20){\n        valid = false;\n    }\n    \n    if(month == 1 &&\
    \ day > 19){\n        valid = false;\n    }\n    \n    if(month == 1 && day >\
    \ 18){\n        valid = false;\n    }\n    \n    if(month == 1 && day > 17){\n\
    \        valid = false;\n    }\n    \n    if(month == 1 && day > 16){\n      \
    \  valid = false;\n    }\n    \n    if(month == 1 && day > 15){\n        valid\
    \ = false;\n    }\n    \n    if(month == 1 && day > 14){\n        valid = false;\n\
    \    }\n    \n    if(month == 1 && day > 13){\n        valid = false;\n    }\n\
    \    \n    if(month == 1 && day > 12){\n        valid = false;\n    }\n    \n\
    \    if(month == 1 && day > 11){\n        valid = false;\n    }\n    \n    if(month\
    \ == 1 && day > 10){\n        valid = false;\n    }\n    \n    if(month == 1 &&\
    \ day > 9){\n        valid = false;\n\n}\nint main() {\n    auto candidate = valid_date;\n\
    \    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"\
    15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n\
    \    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"\
    01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n\
    \    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\"\
    )) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"\
    21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n\
    \    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\"\
    )) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"\
    2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n\
    }\n"
  stdout: ''
  stderr: "/tmp/tmpd4ldhmu4.cpp: In function \u2018bool valid_date(std::string)\u2019\
    :\n/tmp/tmpd4ldhmu4.cpp:137:12: error: a function-definition is not allowed here\
    \ before \u2018{\u2019 token\n  137 | int main() {\n      |            ^\n/tmp/tmpd4ldhmu4.cpp:155:1:\
    \ error: expected \u2018}\u2019 at end of input\n  155 | }\n      | ^\n/tmp/tmpd4ldhmu4.cpp:16:35:\
    \ note: to match this \u2018{\u2019\n   16 | bool valid_date(std::string date)\
    \ {\n      |                                   ^\n/tmp/tmpd4ldhmu4.cpp:155:1:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n\
    \  155 | }\n      | ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n    // Write your code here\n    int day;\n\
    \    int month;\n    int year;\n    std::stringstream ss;\n    ss << date;\n \
    \   ss >> day >> month >> year;\n    if (day < 1 || day > 31) {\n        return\
    \ false;\n    }\n    if (month < 1 || month > 12) {\n        return false;\n \
    \   }\n    if (year < 1000 || year > 9999) {\n        return false;\n    }\n \
    \   return true;\n}\nint main() {\n    auto candidate = valid_date;\n    assert(candidate((\"\
    03-11-2000\")) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n\
    \    assert(candidate((\"04-0-2040\")) == (false));\n    assert(candidate((\"\
    06-04-2020\")) == (true));\n    assert(candidate((\"01-01-2007\")) == (true));\n\
    \    assert(candidate((\"03-32-2011\")) == (false));\n    assert(candidate((\"\
    \")) == (false));\n    assert(candidate((\"04-31-3000\")) == (false));\n    assert(candidate((\"\
    06-06-2005\")) == (true));\n    assert(candidate((\"21-31-2000\")) == (false));\n\
    \    assert(candidate((\"04-12-2003\")) == (true));\n    assert(candidate((\"\
    04122003\")) == (false));\n    assert(candidate((\"20030412\")) == (false));\n\
    \    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"2003-04-12\"\
    )) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n}\n"
  stdout: ''
  stderr: "tmp6rbjr71p: /tmp/tmp6rbjr71p.cpp:37: int main(): Assertion `candidate((\"\
    03-11-2000\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n    // Write your code here\n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n}\nint main() {\n    auto candidate = valid_date;\n\
    \    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"\
    15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n\
    \    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"\
    01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n\
    \    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\"\
    )) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"\
    21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n\
    \    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\"\
    )) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"\
    2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmp6e_sgnwn: /tmp/tmp6e_sgnwn.cpp:275: int main(): Assertion `candidate((\"\
    03-11-2000\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n    // Write your code here\n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n}\nint main() {\n    auto candidate = valid_date;\n\
    \    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"\
    15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n\
    \    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"\
    01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n\
    \    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\"\
    )) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"\
    21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n\
    \    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\"\
    )) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"\
    2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmpzpg06y3a: /tmp/tmpzpg06y3a.cpp:275: int main(): Assertion `candidate((\"\
    03-11-2000\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n    bool valid = true;\n    int day;\n    int\
    \ month;\n    int year;\n    std::stringstream ss;\n    ss << date;\n    ss >>\
    \ day >> month >> year;\n    if (day < 1 || day > 31) {\n        valid = false;\n\
    \    }\n    if (month < 1 || month > 12) {\n        valid = false;\n    }\n  \
    \  if (year < 1900 || year > 2099) {\n        valid = false;\n    }\n    return\
    \ valid;\n}\nint main() {\n    auto candidate = valid_date;\n    assert(candidate((\"\
    03-11-2000\")) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n\
    \    assert(candidate((\"04-0-2040\")) == (false));\n    assert(candidate((\"\
    06-04-2020\")) == (true));\n    assert(candidate((\"01-01-2007\")) == (true));\n\
    \    assert(candidate((\"03-32-2011\")) == (false));\n    assert(candidate((\"\
    \")) == (false));\n    assert(candidate((\"04-31-3000\")) == (false));\n    assert(candidate((\"\
    06-06-2005\")) == (true));\n    assert(candidate((\"21-31-2000\")) == (false));\n\
    \    assert(candidate((\"04-12-2003\")) == (true));\n    assert(candidate((\"\
    04122003\")) == (false));\n    assert(candidate((\"20030412\")) == (false));\n\
    \    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"2003-04-12\"\
    )) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n}\n"
  stdout: ''
  stderr: "tmpu6e7kkew: /tmp/tmpu6e7kkew.cpp:37: int main(): Assertion `candidate((\"\
    03-11-2000\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n    // Write your code here\n    int day;\n\
    \    int month;\n    int year;\n    std::stringstream ss;\n    ss.str(date);\n\
    \    ss >> month >> day >> year;\n    if (month < 1 || month > 12) return false;\n\
    \    if (day < 1 || day > 31) return false;\n    if (month == 2) {\n        if\
    \ (day > 29) return false;\n    }\n    if (month == 4 || month == 6 || month ==\
    \ 9 || month == 11) {\n        if (day > 30) return false;\n    }\n    if (month\
    \ == 1) {\n        if (day > 31) return false;\n    }\n    return true;\n}\nint\
    \ main() {\n    auto candidate = valid_date;\n    assert(candidate((\"03-11-2000\"\
    )) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"\
    04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n\
    \    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"\
    03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"\
    04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n\
    \    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"\
    04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n\
    \    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\"\
    )) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"\
    04-2003\")) == (false));\n}\n"
  stdout: ''
  stderr: "tmpdao38z_u: /tmp/tmpdao38z_u.cpp:39: int main(): Assertion `candidate((\"\
    03-11-2000\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n    // Write your code here\n    \n    // Write\
    \ your code here\n    \n    // Write your code here\n    \n    // Write your code\
    \ here\n    \n    // Write your code here\n    \n    // Write your code here\n\
    \    \n    // Write your code here\n    \n    // Write your code here\n    \n\
    \    // Write your code here\n    \n    // Write your code here\n    \n    //\
    \ Write your code here\n    \n    // Write your code here\n    \n    // Write\
    \ your code here\n    \n    // Write your code here\n    \n    // Write your code\
    \ here\n    \n    // Write your code here\n    \n    // Write your code here\n\
    \    \n    // Write your code here\n    \n    // Write your code here\n    \n\
    \    // Write your code here\n    \n    // Write your code here\n    \n    //\
    \ Write your code here\n    \n    // Write your code here\n    \n    // Write\
    \ your code here\n    \n    // Write your code here\n    \n    // Write your code\
    \ here\n    \n    // Write your code here\n    \n    // Write your code here\n\
    \    \n    // Write your code here\n    \n    // Write your code here\n    \n\
    \    // Write your code here\n    \n    // Write your code here\n    \n    //\
    \ Write your code here\n    \n    // Write your code here\n    \n    // Write\
    \ your code here\n    \n    // Write your code here\n    \n    // Write your code\
    \ here\n    \n    // Write your code here\n    \n    // Write your code here\n\
    \    \n    // Write your code here\n    \n    // Write your code here\n    \n\
    \    // Write your code here\n    \n    // Write your code here\n    \n    //\
    \ Write your code here\n    \n    // Write your code here\n    \n    // Write\
    \ your code here\n    \n    // Write your code here\n    \n    // Write your code\
    \ here\n    \n    // Write your code here\n    \n    // Write your code here\n\
    \    \n    // Write your code here\n    \n    // Write your code here\n    \n\
    \    // Write your code here\n    \n    // Write your code here\n    \n    //\
    \ Write your code here\n    \n    // Write your code here\n    \n    // Write\
    \ your code here\n    \n    // Write your code here\n    \n    // Write your code\
    \ here\n    \n    // Write your code here\n    \n    // Write your code here\n\
    \    \n    // Write your code here\n    \n    // Write your code here\n    \n\
    \    // Write your code here\n    \n    // Write your code here\n    \n    //\
    \ Write your code here\n    \n    // Write your code here\n    \n    // Write\
    \ your code here\n    \n    // Write your code here\n    \n    // Write your code\
    \ here\n    \n    // Write your code here\n    \n    // Write your code here\n\
    \    \n    // Write your code here\n    \n    // \n}\nint main() {\n    auto candidate\
    \ = valid_date;\n    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"\
    15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n\
    \    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"\
    01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n\
    \    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\"\
    )) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"\
    21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n\
    \    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\"\
    )) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"\
    2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmpiob0g3n_: /tmp/tmpiob0g3n_.cpp:167: int main(): Assertion `candidate((\"\
    03-11-2000\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n    // Write your code here\n    int day;\n\
    \    int month;\n    int year;\n    std::stringstream ss;\n    ss << date;\n \
    \   ss >> day >> month >> year;\n    \n    if(day < 1 || day > 31) {\n       \
    \ return false;\n    }\n    if(month < 1 || month > 12) {\n        return false;\n\
    \    }\n    if(year < 1 || year > 9999) {\n        return false;\n    }\n    \n\
    \    return true;\n}\nint main() {\n    auto candidate = valid_date;\n    assert(candidate((\"\
    03-11-2000\")) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n\
    \    assert(candidate((\"04-0-2040\")) == (false));\n    assert(candidate((\"\
    06-04-2020\")) == (true));\n    assert(candidate((\"01-01-2007\")) == (true));\n\
    \    assert(candidate((\"03-32-2011\")) == (false));\n    assert(candidate((\"\
    \")) == (false));\n    assert(candidate((\"04-31-3000\")) == (false));\n    assert(candidate((\"\
    06-06-2005\")) == (true));\n    assert(candidate((\"21-31-2000\")) == (false));\n\
    \    assert(candidate((\"04-12-2003\")) == (true));\n    assert(candidate((\"\
    04122003\")) == (false));\n    assert(candidate((\"20030412\")) == (false));\n\
    \    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"2003-04-12\"\
    )) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n}\n"
  stdout: ''
  stderr: "tmpnmra9t_7: /tmp/tmpnmra9t_7.cpp:39: int main(): Assertion `candidate((\"\
    03-11-2000\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n    // Write your code here\n    \n    // Write\
    \ your code here\n    \n    // Write your code here\n    \n    // Write your code\
    \ here\n    \n    // Write your code here\n    \n    // Write your code here\n\
    \    \n    // Write your code here\n    \n    // Write your code here\n    \n\
    \    // Write your code here\n    \n    // Write your code here\n    \n    //\
    \ Write your code here\n    \n    // Write your code here\n    \n    // Write\
    \ your code here\n    \n    // Write your code here\n    \n    // Write your code\
    \ here\n    \n    // Write your code here\n    \n    // Write your code here\n\
    \    \n    // Write your code here\n    \n    // Write your code here\n    \n\
    \    // Write your code here\n    \n    // Write your code here\n    \n    //\
    \ Write your code here\n    \n    // Write your code here\n    \n    // Write\
    \ your code here\n    \n    // Write your code here\n    \n    // Write your code\
    \ here\n    \n    // Write your code here\n    \n    // Write your code here\n\
    \    \n    // Write your code here\n    \n    // Write your code here\n    \n\
    \    // Write your code here\n    \n    // Write your code here\n    \n    //\
    \ Write your code here\n    \n    // Write your code here\n    \n    // Write\
    \ your code here\n    \n    // Write your code here\n    \n    // Write your code\
    \ here\n    \n    // Write your code here\n    \n    // Write your code here\n\
    \    \n    // Write your code here\n    \n    // Write your code here\n    \n\
    \    // Write your code here\n    \n    // Write your code here\n    \n    //\
    \ Write your code here\n    \n    // Write your code here\n    \n    // Write\
    \ your code here\n    \n    // Write your code here\n    \n    // Write your code\
    \ here\n    \n    // Write your code here\n    \n    // Write your code here\n\
    \    \n    // Write your code here\n    \n    // Write your code here\n    \n\
    \    // Write your code here\n    \n    // Write your code here\n    \n    //\
    \ Write your code here\n    \n    // Write your code here\n    \n    // Write\
    \ your code here\n    \n    // Write your code here\n    \n    // Write your code\
    \ here\n    \n    // Write your code here\n    \n    // Write your code here\n\
    \    \n    // Write your code here\n    \n    // Write your code here\n    \n\
    \    // Write your code here\n    \n    // Write your code here\n    \n    //\
    \ Write your code here\n    \n    // Write your code here\n    \n    // Write\
    \ your code here\n    \n    // Write your code here\n    \n    // Write your code\
    \ here\n    \n    // Write your code here\n    \n    // Write your code here\n\
    \    \n    // Write your code here\n    \n    // \n}\nint main() {\n    auto candidate\
    \ = valid_date;\n    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"\
    15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n\
    \    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"\
    01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n\
    \    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\"\
    )) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"\
    21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n\
    \    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\"\
    )) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"\
    2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmpth70hgcn: /tmp/tmpth70hgcn.cpp:167: int main(): Assertion `candidate((\"\
    03-11-2000\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n    // Your code goes here\n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n\n}\nint main() {\n    auto candidate = valid_date;\n\
    \    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"\
    15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n\
    \    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"\
    01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n\
    \    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\"\
    )) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"\
    21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n\
    \    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\"\
    )) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"\
    2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmpuz93wl6w: /tmp/tmpuz93wl6w.cpp:275: int main(): Assertion `candidate((\"\
    03-11-2000\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n    // Write your code here\n    \n    // Write\
    \ your code here\n    \n    // Write your code here\n    \n    // Write your code\
    \ here\n    \n    // Write your code here\n    \n    // Write your code here\n\
    \    \n    // Write your code here\n    \n    // Write your code here\n    \n\
    \    // Write your code here\n    \n    // Write your code here\n    \n    //\
    \ Write your code here\n    \n    // Write your code here\n    \n    // Write\
    \ your code here\n    \n    // Write your code here\n    \n    // Write your code\
    \ here\n    \n    // Write your code here\n    \n    // Write your code here\n\
    \    \n    // Write your code here\n    \n    // Write your code here\n    \n\
    \    // Write your code here\n    \n    // Write your code here\n    \n    //\
    \ Write your code here\n    \n    // Write your code here\n    \n    // Write\
    \ your code here\n    \n    // Write your code here\n    \n    // Write your code\
    \ here\n    \n    // Write your code here\n    \n    // Write your code here\n\
    \    \n    // Write your code here\n    \n    // Write your code here\n    \n\
    \    // Write your code here\n    \n    // Write your code here\n    \n    //\
    \ Write your code here\n    \n    // Write your code here\n    \n    // Write\
    \ your code here\n    \n    // Write your code here\n    \n    // Write your code\
    \ here\n    \n    // Write your code here\n    \n    // Write your code here\n\
    \    \n    // Write your code here\n    \n    // Write your code here\n    \n\
    \    // Write your code here\n    \n    // Write your code here\n    \n    //\
    \ Write your code here\n    \n    // Write your code here\n    \n    // Write\
    \ your code here\n    \n    // Write your code here\n    \n    // Write your code\
    \ here\n    \n    // Write your code here\n    \n    // Write your code here\n\
    \    \n    // Write your code here\n    \n    // Write your code here\n    \n\
    \    // Write your code here\n    \n    // Write your code here\n    \n    //\
    \ Write your code here\n    \n    // Write your code here\n    \n    // Write\
    \ your code here\n    \n    // Write your code here\n    \n    // Write your code\
    \ here\n    \n    // Write your code here\n    \n    // Write your code here\n\
    \    \n    // Write your code here\n    \n    // Write your code here\n    \n\
    \    // Write your code here\n    \n    // Write your code here\n    \n    //\
    \ Write your code here\n    \n    // Write your code here\n    \n    // Write\
    \ your code here\n    \n    // Write your code here\n    \n    // Write your code\
    \ here\n    \n    // Write your code here\n    \n    // Write your code here\n\
    \    \n    // Write your code here\n    \n    // \n}\nint main() {\n    auto candidate\
    \ = valid_date;\n    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"\
    15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n\
    \    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"\
    01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n\
    \    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\"\
    )) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"\
    21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n\
    \    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\"\
    )) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"\
    2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmpjoyll1_w: /tmp/tmpjoyll1_w.cpp:167: int main(): Assertion `candidate((\"\
    03-11-2000\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n    // Write your code here\n    int day;\n\
    \    int month;\n    int year;\n    bool valid = false;\n    std::stringstream\
    \ ss(date);\n    ss >> month >> day >> year;\n    if (month < 1 || month > 12\
    \ || day < 1 || day > 31 || (month == 2 && day > 29)) {\n        valid = false;\n\
    \    } else {\n        valid = true;\n    }\n    return valid;\n}\nint main()\
    \ {\n    auto candidate = valid_date;\n    assert(candidate((\"03-11-2000\"))\
    \ == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"\
    04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n\
    \    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"\
    03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"\
    04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n\
    \    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"\
    04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n\
    \    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\"\
    )) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"\
    04-2003\")) == (false));\n}\n"
  stdout: ''
  stderr: "tmpfwghkwlh: /tmp/tmpfwghkwlh.cpp:33: int main(): Assertion `candidate((\"\
    03-11-2000\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n    // Write your code here\n    \n    bool\
    \ valid = true;\n    \n    std::string months[12] = {\n        \"January\", \"\
    February\", \"March\", \"April\", \"May\", \"June\",\n        \"July\", \"August\"\
    , \"September\", \"October\", \"November\", \"December\"\n    };\n    \n    std::string\
    \ days[31] = {\n        \"01\", \"02\", \"03\", \"04\", \"05\", \"06\", \"07\"\
    , \"08\", \"09\", \"10\", \"11\", \"12\", \"13\", \"14\", \"15\", \"16\", \"17\"\
    , \"18\", \"19\", \"20\", \"21\", \"22\", \"23\", \"24\", \"25\", \"26\", \"27\"\
    , \"28\", \"29\", \"30\", \"31\",\n        \"01\", \"02\", \"03\", \"04\", \"\
    05\", \"06\", \"07\", \"08\", \"09\", \"10\", \"11\", \"12\", \"13\", \"14\",\
    \ \"15\", \"16\", \"17\", \"18\", \"19\", \"20\", \"21\", \"22\", \"23\", \"24\"\
    , \"25\", \"26\", \"27\", \"28\", \"29\", \"30\", \"31\",\n        \"01\", \"\
    02\", \"03\", \"04\", \"05\", \"06\", \"07\", \"08\", \"09\", \"10\", \"11\",\
    \ \"12\", \"13\", \"14\", \"15\", \"16\", \"17\", \"18\", \"19\", \"20\", \"21\"\
    , \"22\", \"23\", \"24\", \"25\", \"26\", \"27\", \"28\", \"29\", \"30\", \"31\"\
    \n    };\n    \n    std::string years[12] = {\n        \"2000\", \"2001\", \"\
    2002\", \"2003\", \"2004\", \"2005\", \"2006\", \"2007\", \"2008\", \"2009\",\
    \ \"2010\", \"2011\", \"2012\", \"2013\", \"2014\", \"2015\", \"2016\", \"2017\"\
    , \"2018\", \"2019\", \"2020\", \"2021\", \"2022\", \"2023\", \"2024\", \"2025\"\
    , \"2026\", \"2027\", \"2028\", \"2029\", \"2030\", \"2031\",\n        \"2000\"\
    , \"2001\", \"2002\", \"2003\", \"2004\", \"2005\", \"2006\", \"2007\", \"2008\"\
    , \"2009\", \"2010\", \"2011\", \"2012\", \"2013\", \"2014\", \"2015\", \"2016\"\
    , \"2017\", \"2018\", \"2019\", \"2020\", \"2021\", \"2022\", \"2023\", \"2024\"\
    , \"2025\", \"2026\", \"2027\", \"2028\", \"2029\", \"2030\", \"2031\",\n    \
    \    \"2000\", \"2001\", \"2002\", \"2003\", \"2004\", \"2005\", \"2006\", \"\
    2007\", \"2008\", \"2009\", \"2010\", \"2011\", \"2012\", \"2013\", \"2014\",\
    \ \"2015\", \"2016\", \"2017\", \"2018\", \"2019\", \"2020\", \"2021\", \"2022\"\
    , \"2023\", \"2024\", \"2025\", \"2026\", \"2027\", \"2028\", \"2029\", \"2030\"\
    , \"2031\"\n    };\n    \n    std::string date_str = date;\n    \n    int days_str\
    \ = date_str.substr(6, 2);\n    int months_str = date_str.\n}\nint main() {\n\
    \    auto candidate = valid_date;\n    assert(candidate((\"03-11-2000\")) == (true));\n\
    \    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"\
    04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n\
    \    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"\
    03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"\
    04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n\
    \    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"\
    04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n\
    \    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\"\
    )) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"\
    04-2003\")) == (false));\n}\n"
  stdout: ''
  stderr: "/tmp/tmphbewxlc2.cpp: In function \u2018bool valid_date(std::string)\u2019\
    :\n/tmp/tmphbewxlc2.cpp:30:5: error: too many initializers for \u2018std::string\
    \ [31]\u2019 {aka \u2018std::__cxx11::basic_string<char> [31]\u2019}\n   30 |\
    \     };\n      |     ^\n/tmp/tmphbewxlc2.cpp:36:5: error: too many initializers\
    \ for \u2018std::string [12]\u2019 {aka \u2018std::__cxx11::basic_string<char>\
    \ [12]\u2019}\n   36 |     };\n      |     ^\n/tmp/tmphbewxlc2.cpp:40:35: error:\
    \ cannot convert \u2018std::__cxx11::basic_string<char>\u2019 to \u2018int\u2019\
    \ in initialization\n   40 |     int days_str = date_str.substr(6, 2);\n     \
    \ |                    ~~~~~~~~~~~~~~~^~~~~~\n      |                        \
    \           |\n      |                                   std::__cxx11::basic_string<char>\n\
    /tmp/tmphbewxlc2.cpp:42:1: error: expected unqualified-id before \u2018}\u2019\
    \ token\n   42 | }\n      | ^\n/tmp/tmphbewxlc2.cpp:42:1: warning: no return statement\
    \ in function returning non-void [-Wreturn-type]\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n    // Write your code here\n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n}\nint main() {\n    auto candidate = valid_date;\n\
    \    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"\
    15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n\
    \    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"\
    01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n\
    \    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\"\
    )) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"\
    21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n\
    \    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\"\
    )) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"\
    2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmp3ve604oh: /tmp/tmp3ve604oh.cpp:275: int main(): Assertion `candidate((\"\
    03-11-2000\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n    // Write your code here\n    \n    int day;\n\
    \    int month;\n    int year;\n    \n    std::stringstream ss(date);\n    \n\
    \    ss >> month >> day >> year;\n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n\n}\nint main() {\n    auto candidate\
    \ = valid_date;\n    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"\
    15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n\
    \    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"\
    01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n\
    \    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\"\
    )) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"\
    21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n\
    \    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\"\
    )) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"\
    2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmpugf_w9td: /tmp/tmpugf_w9td.cpp:266: int main(): Assertion `candidate((\"\
    03-11-2000\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n    // Write your code here\n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n}\nint main() {\n    auto candidate = valid_date;\n\
    \    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"\
    15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n\
    \    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"\
    01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n\
    \    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\"\
    )) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"\
    21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n\
    \    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\"\
    )) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"\
    2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmpce56c_9o: /tmp/tmpce56c_9o.cpp:275: int main(): Assertion `candidate((\"\
    03-11-2000\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n    // Write your code here\n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n}\nint main() {\n    auto candidate = valid_date;\n\
    \    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"\
    15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n\
    \    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"\
    01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n\
    \    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\"\
    )) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"\
    21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n\
    \    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\"\
    )) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"\
    2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmpt2dknbjh: /tmp/tmpt2dknbjh.cpp:275: int main(): Assertion `candidate((\"\
    03-11-2000\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n    // Write your code here\n    \n    // Write\
    \ your code here\n    \n    // Write your code here\n    \n    // Write your code\
    \ here\n    \n    // Write your code here\n    \n    // Write your code here\n\
    \    \n    // Write your code here\n    \n    // Write your code here\n    \n\
    \    // Write your code here\n    \n    // Write your code here\n    \n    //\
    \ Write your code here\n    \n    // Write your code here\n    \n    // Write\
    \ your code here\n    \n    // Write your code here\n    \n    // Write your code\
    \ here\n    \n    // Write your code here\n    \n    // Write your code here\n\
    \    \n    // Write your code here\n    \n    // Write your code here\n    \n\
    \    // Write your code here\n    \n    // Write your code here\n    \n    //\
    \ Write your code here\n    \n    // Write your code here\n    \n    // Write\
    \ your code here\n    \n    // Write your code here\n    \n    // Write your code\
    \ here\n    \n    // Write your code here\n    \n    // Write your code here\n\
    \    \n    // Write your code here\n    \n    // Write your code here\n    \n\
    \    // Write your code here\n    \n    // Write your code here\n    \n    //\
    \ Write your code here\n    \n    // Write your code here\n    \n    // Write\
    \ your code here\n    \n    // Write your code here\n    \n    // Write your code\
    \ here\n    \n    // Write your code here\n    \n    // Write your code here\n\
    \    \n    // Write your code here\n    \n    // Write your code here\n    \n\
    \    // Write your code here\n    \n    // Write your code here\n    \n    //\
    \ Write your code here\n    \n    // Write your code here\n    \n    // Write\
    \ your code here\n    \n    // Write your code here\n    \n    // Write your code\
    \ here\n    \n    // Write your code here\n    \n    // Write your code here\n\
    \    \n    // Write your code here\n    \n    // Write your code here\n    \n\
    \    // Write your code here\n    \n    // Write your code here\n    \n    //\
    \ Write your code here\n    \n    // Write your code here\n    \n    // Write\
    \ your code here\n    \n    // Write your code here\n    \n    // Write your code\
    \ here\n    \n    // Write your code here\n    \n    // Write your code here\n\
    \    \n    // Write your code here\n    \n    // Write your code here\n    \n\
    \    // Write your code here\n    \n    // Write your code here\n    \n    //\
    \ Write your code here\n    \n    // Write your code here\n    \n    // Write\
    \ your code here\n    \n    // Write your code here\n    \n    // Write your code\
    \ here\n    \n    // Write your code here\n    \n    // Write your code here\n\
    \    \n    // Write your code here\n    \n    // \n}\nint main() {\n    auto candidate\
    \ = valid_date;\n    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"\
    15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n\
    \    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"\
    01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n\
    \    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\"\
    )) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"\
    21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n\
    \    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\"\
    )) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"\
    2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmp6w_51egf: /tmp/tmp6w_51egf.cpp:167: int main(): Assertion `candidate((\"\
    03-11-2000\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n    // Write your code here\n    \n    int day;\n\
    \    int month;\n    int year;\n    \n    std::stringstream ss(date);\n    ss\
    \ >> month >> day >> year;\n    \n    if(month < 1 || month > 12){\n        return\
    \ false;\n    }\n    \n    if(day < 1 || day > 31){\n        return false;\n \
    \   }\n    \n    if(year < 2000 || year > 2040) {\n        return false;\n   \
    \ }\n    \n    return true;\n}\nint main() {\n    auto candidate = valid_date;\n\
    \    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"\
    15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n\
    \    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"\
    01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n\
    \    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\"\
    )) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"\
    21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n\
    \    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\"\
    )) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"\
    2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmpomrh3qfq: /tmp/tmpomrh3qfq.cpp:42: int main(): Assertion `candidate((\"\
    03-11-2000\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n    // Write your code here\n    \n    // Write\
    \ your code here\n    \n    // Write your code here\n    \n    // Write your code\
    \ here\n    \n    // Write your code here\n    \n    // Write your code here\n\
    \    \n    // Write your code here\n    \n    // Write your code here\n    \n\
    \    // Write your code here\n    \n    // Write your code here\n    \n    //\
    \ Write your code here\n    \n    // Write your code here\n    \n    // Write\
    \ your code here\n    \n    // Write your code here\n    \n    // Write your code\
    \ here\n    \n    // Write your code here\n    \n    // Write your code here\n\
    \    \n    // Write your code here\n    \n    // Write your code here\n    \n\
    \    // Write your code here\n    \n    // Write your code here\n    \n    //\
    \ Write your code here\n    \n    // Write your code here\n    \n    // Write\
    \ your code here\n    \n    // Write your code here\n    \n    // Write your code\
    \ here\n    \n    // Write your code here\n    \n    // Write your code here\n\
    \    \n    // Write your code here\n    \n    // Write your code here\n    \n\
    \    // Write your code here\n    \n    // Write your code here\n    \n    //\
    \ Write your code here\n    \n    // Write your code here\n    \n    // Write\
    \ your code here\n    \n    // Write your code here\n    \n    // Write your code\
    \ here\n    \n    // Write your code here\n    \n    // Write your code here\n\
    \    \n    // Write your code here\n    \n    // Write your code here\n    \n\
    \    // Write your code here\n    \n    // Write your code here\n    \n    //\
    \ Write your code here\n    \n    // Write your code here\n    \n    // Write\
    \ your code here\n    \n    // Write your code here\n    \n    // Write your code\
    \ here\n    \n    // Write your code here\n    \n    // Write your code here\n\
    \    \n    // Write your code here\n    \n    // Write your code here\n    \n\
    \    // Write your code here\n    \n    // Write your code here\n    \n    //\
    \ Write your code here\n    \n    // Write your code here\n    \n    // Write\
    \ your code here\n    \n    // Write your code here\n    \n    // Write your code\
    \ here\n    \n    // Write your code here\n    \n    // Write your code here\n\
    \    \n    // Write your code here\n    \n    // Write your code here\n    \n\
    \    // Write your code here\n    \n    // Write your code here\n    \n    //\
    \ Write your code here\n    \n    // Write your code here\n    \n    // Write\
    \ your code here\n    \n    // Write your code here\n    \n    // Write your code\
    \ here\n    \n    // Write your code here\n    \n    // Write your code here\n\
    \    \n    // Write your code here\n    \n    // \n}\nint main() {\n    auto candidate\
    \ = valid_date;\n    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"\
    15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n\
    \    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"\
    01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n\
    \    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\"\
    )) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"\
    21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n\
    \    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\"\
    )) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"\
    2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmpq3o7ad0_: /tmp/tmpq3o7ad0_.cpp:167: int main(): Assertion `candidate((\"\
    03-11-2000\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n    // Write your code here\n    \n    bool\
    \ valid = true;\n    \n    if(date.empty()){\n        valid = false;\n    }\n\
    \    \n    if(date.size() < 3 || date.size() > 10){\n        valid = false;\n\
    \    }\n    \n    for(int i = 0; i < date.size(); i++){\n        if(date[i] <\
    \ '0' || date[i] > '9'){\n            valid = false;\n        }\n    }\n    \n\
    \    for(int i = 0; i < date.size(); i++){\n        if(date[i] < '0' || date[i]\
    \ > '9'){\n            valid = false;\n        }\n    }\n    \n    for(int i =\
    \ 0; i < date.size(); i++){\n        if(date[i] < '0' || date[i] > '9'){\n   \
    \         valid = false;\n        }\n    }\n    \n    if(date[1] < '0' || date[1]\
    \ > '9'){\n        valid = false;\n    }\n    \n    if(date[2] < '0' || date[2]\
    \ > '9'){\n        valid = false;\n    }\n    \n    if(date[3] < '0' || date[3]\
    \ > '9'){\n        valid = false;\n    }\n    \n    if(date[4] < '0' || date[4]\
    \ > '9'){\n        valid = false;\n    }\n    \n    if(date[5] < '0' || date[5]\
    \ > '9'){\n        valid = false;\n    }\n    \n    if(date[6] < '0' || date[6]\
    \ > '9'){\n        valid = false;\n    }\n    \n    if(date[7] < '0' || date[7]\
    \ > '9'){\n        valid = false;\n    }\n    \n    if(date[8] < '0' || date[8]\
    \ > '9'){\n        valid = false;\n    }\n    \n    if(date[9] < '0' || date[9]\
    \ > '9'){\n        valid = false;\n    }\n    \n    if(date[10] < '0' || date[10]\
    \ > '9'){\n        valid = false;\n    }\n    \n    if(date[11] < '0' || date[11]\
    \ > '9'){\n        valid = false;\n    }\n    \n    if(date[12] < '0' || date[12]\
    \ > '9'){\n        valid = false;\n    }\n    \n    return valid;\n}\nint main()\
    \ {\n    auto candidate = valid_date;\n    assert(candidate((\"03-11-2000\"))\
    \ == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"\
    04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n\
    \    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"\
    03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"\
    04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n\
    \    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"\
    04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n\
    \    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\"\
    )) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"\
    04-2003\")) == (false));\n}\n"
  stdout: ''
  stderr: "tmp3etq80cp: /tmp/tmp3etq80cp.cpp:99: int main(): Assertion `candidate((\"\
    03-11-2000\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n    // Write your code here\n    \n    // Write\
    \ your code here\n    \n    // Write your code here\n    \n    // Write your code\
    \ here\n    \n    // Write your code here\n    \n    // Write your code here\n\
    \    \n    // Write your code here\n    \n    // Write your code here\n    \n\
    \    // Write your code here\n    \n    // Write your code here\n    \n    //\
    \ Write your code here\n    \n    // Write your code here\n    \n    // Write\
    \ your code here\n    \n    // Write your code here\n    \n    // Write your code\
    \ here\n    \n    // Write your code here\n    \n    // Write your code here\n\
    \    \n    // Write your code here\n    \n    // Write your code here\n    \n\
    \    // Write your code here\n    \n    // Write your code here\n    \n    //\
    \ Write your code here\n    \n    // Write your code here\n    \n    // Write\
    \ your code here\n    \n    // Write your code here\n    \n    // Write your code\
    \ here\n    \n    // Write your code here\n    \n    // Write your code here\n\
    \    \n    // Write your code here\n    \n    // Write your code here\n    \n\
    \    // Write your code here\n    \n    // Write your code here\n    \n    //\
    \ Write your code here\n    \n    // Write your code here\n    \n    // Write\
    \ your code here\n    \n    // Write your code here\n    \n    // Write your code\
    \ here\n    \n    // Write your code here\n    \n    // Write your code here\n\
    \    \n    // Write your code here\n    \n    // Write your code here\n    \n\
    \    // Write your code here\n    \n    // Write your code here\n    \n    //\
    \ Write your code here\n    \n    // Write your code here\n    \n    // Write\
    \ your code here\n    \n    // Write your code here\n    \n    // Write your code\
    \ here\n    \n    // Write your code here\n    \n    // Write your code here\n\
    \    \n    // Write your code here\n    \n    // Write your code here\n    \n\
    \    // Write your code here\n    \n    // Write your code here\n    \n    //\
    \ Write your code here\n    \n    // Write your code here\n    \n    // Write\
    \ your code here\n    \n    // Write your code here\n    \n    // Write your code\
    \ here\n    \n    // Write your code here\n    \n    // Write your code here\n\
    \    \n    // Write your code here\n    \n    // Write your code here\n    \n\
    \    // Write your code here\n    \n    // Write your code here\n    \n    //\
    \ Write your code here\n    \n    // Write your code here\n    \n    // Write\
    \ your code here\n    \n    // Write your code here\n    \n    // Write your code\
    \ here\n    \n    // Write your code here\n    \n    // Write your code here\n\
    \    \n    // Write your code here\n    \n    // \n}\nint main() {\n    auto candidate\
    \ = valid_date;\n    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"\
    15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n\
    \    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"\
    01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n\
    \    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\"\
    )) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"\
    21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n\
    \    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\"\
    )) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"\
    2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmpz0188i_i: /tmp/tmpz0188i_i.cpp:167: int main(): Assertion `candidate((\"\
    03-11-2000\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n    // Write your code here\n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n}\nint main() {\n    auto candidate = valid_date;\n\
    \    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"\
    15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n\
    \    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"\
    01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n\
    \    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\"\
    )) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"\
    21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n\
    \    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\"\
    )) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"\
    2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmpsaguku4k: /tmp/tmpsaguku4k.cpp:275: int main(): Assertion `candidate((\"\
    03-11-2000\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n    bool valid = true;\n    std::string months[12]\
    \ = {\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\"\
    , \"August\", \"September\", \"October\", \"November\", \"December\"};\n    std::string\
    \ days[31] = {\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"\
    10\", \"11\", \"12\", \"13\", \"14\", \"15\", \"16\", \"17\", \"18\", \"19\",\
    \ \"20\", \"21\", \"22\", \"23\", \"24\", \"25\", \"26\", \"27\", \"28\", \"29\"\
    , \"30\", \"31\", \"32\", \"33\", \"34\", \"35\", \"36\", \"37\", \"38\", \"39\"\
    , \"40\", \"41\", \"42\", \"43\", \"44\", \"45\", \"46\", \"47\", \"48\", \"49\"\
    , \"50\", \"51\", \"52\", \"53\", \"54\", \"55\", \"56\", \"57\", \"58\", \"59\"\
    , \"60\", \"61\", \"62\", \"63\", \"64\", \"65\", \"66\", \"67\", \"68\", \"69\"\
    , \"70\", \"71\", \"72\", \"73\", \"74\", \"75\", \"76\", \"77\", \"78\", \"79\"\
    , \"80\", \"81\", \"82\", \"83\", \"84\", \"85\", \"86\", \"87\", \"88\", \"89\"\
    , \"90\", \"91\", \"92\", \"93\", \"94\", \"95\", \"96\", \"97\", \"98\", \"99\"\
    , \"100\", \"101\", \"102\", \"103\", \"104\", \"105\", \"106\", \"107\", \"108\"\
    , \"109\", \"110\", \"111\", \"112\", \"113\", \"114\", \"115\", \"116\", \"117\"\
    , \"118\", \"119\", \"120\", \"121\", \"122\", \"123\", \"124\", \"125\", \"126\"\
    , \"127\", \"128\", \"129\", \"130\", \"131\", \"132\", \"133\", \"134\", \"135\"\
    , \"136\", \"137\", \"138\", \"139\", \"140\", \"141\", \"142\", \"143\", \"144\"\
    , \"145\", \"146\", \"147\", \"148\", \"149\", \"150\", \"151\", \"152\", \"153\"\
    , \"154\", \"155\", \"156\", \"157\", \"158\", \"159\", \"160\", \"161\", \"162\"\
    , \"163\", \"164\", \"165\", \"166\", \"167\", \"168\", \"169\", \"170\", \"171\"\
    , \"172\", \"173\", \"174\", \"175\", \"176\", \"177\", \"178\", \"179\", \"180\"\
    , \"181\", \"182\", \"183\", \"184\", \"185\", \"186\", \"187\", \"188\", \"189\"\
    , \"190\", \"191\", \"192\", \"193\", \"194\", \"195\", \"196\", \"197\", \"198\"\
    , \"199\", \"200\", \"201\", \"202\", \"203\", \"204\", \"205\", \"206\", \"207\"\
    , \"208\", \"209\", \"210\", \"211\", \"212\", \"213\", \"214\", \"215\", \"216\"\
    , \"217\", \"218\", \"219\", \"220\", \"221\", \"222\", \"223\", \"224\", \"225\"\
    , \"226\", \"227\", \"228\", \"229\", \"230\", \"231\", \"232\", \"233\", \"234\"\
    , \"235\", \"\n}\nint main() {\n    auto candidate = valid_date;\n    assert(candidate((\"\
    03-11-2000\")) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n\
    \    assert(candidate((\"04-0-2040\")) == (false));\n    assert(candidate((\"\
    06-04-2020\")) == (true));\n    assert(candidate((\"01-01-2007\")) == (true));\n\
    \    assert(candidate((\"03-32-2011\")) == (false));\n    assert(candidate((\"\
    \")) == (false));\n    assert(candidate((\"04-31-3000\")) == (false));\n    assert(candidate((\"\
    06-06-2005\")) == (true));\n    assert(candidate((\"21-31-2000\")) == (false));\n\
    \    assert(candidate((\"04-12-2003\")) == (true));\n    assert(candidate((\"\
    04122003\")) == (false));\n    assert(candidate((\"20030412\")) == (false));\n\
    \    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"2003-04-12\"\
    )) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpjo2r3mtn.cpp:19:1566: warning: missing terminating \" character\n\
    \   19 |     std::string days[31] = {\"1\", \"2\", \"3\", \"4\", \"5\", \"6\"\
    , \"7\", \"8\", \"9\", \"10\", \"11\", \"12\", \"13\", \"14\", \"15\", \"16\"\
    , \"17\", \"18\", \"19\", \"20\", \"21\", \"22\", \"23\", \"24\", \"25\", \"26\"\
    , \"27\", \"28\", \"29\", \"30\", \"31\", \"32\", \"33\", \"34\", \"35\", \"36\"\
    , \"37\", \"38\", \"39\", \"40\", \"41\", \"42\", \"43\", \"44\", \"45\", \"46\"\
    , \"47\", \"48\", \"49\", \"50\", \"51\", \"52\", \"53\", \"54\", \"55\", \"56\"\
    , \"57\", \"58\", \"59\", \"60\", \"61\", \"62\", \"63\", \"64\", \"65\", \"66\"\
    , \"67\", \"68\", \"69\", \"70\", \"71\", \"72\", \"73\", \"74\", \"75\", \"76\"\
    , \"77\", \"78\", \"79\", \"80\", \"81\", \"82\", \"83\", \"84\", \"85\", \"86\"\
    , \"87\", \"88\", \"89\", \"90\", \"91\", \"92\", \"93\", \"94\", \"95\", \"96\"\
    , \"97\", \"98\", \"99\", \"100\", \"101\", \"102\", \"103\", \"104\", \"105\"\
    , \"106\", \"107\", \"108\", \"109\", \"110\", \"111\", \"112\", \"113\", \"114\"\
    , \"115\", \"116\", \"117\", \"118\", \"119\", \"120\", \"121\", \"122\", \"123\"\
    , \"124\", \"125\", \"126\", \"127\", \"128\", \"129\", \"130\", \"131\", \"132\"\
    , \"133\", \"134\", \"135\", \"136\", \"137\", \"138\", \"139\", \"140\", \"141\"\
    , \"142\", \"143\", \"144\", \"145\", \"146\", \"147\", \"148\", \"149\", \"150\"\
    , \"151\", \"152\", \"153\", \"154\", \"155\", \"156\", \"157\", \"158\", \"159\"\
    , \"160\", \"161\", \"162\", \"163\", \"164\", \"165\", \"166\", \"167\", \"168\"\
    , \"169\", \"170\", \"171\", \"172\", \"173\", \"174\", \"175\", \"176\", \"177\"\
    , \"178\", \"179\", \"180\", \"181\", \"182\", \"183\", \"184\", \"185\", \"186\"\
    , \"187\", \"188\", \"189\", \"190\", \"191\", \"192\", \"193\", \"194\", \"195\"\
    , \"196\", \"197\", \"198\", \"199\", \"200\", \"201\", \"202\", \"203\", \"204\"\
    , \"205\", \"206\", \"207\", \"208\", \"209\", \"210\", \"211\", \"212\", \"213\"\
    , \"214\", \"215\", \"216\", \"217\", \"218\", \"219\", \"220\", \"221\", \"222\"\
    , \"223\", \"224\", \"225\", \"226\", \"227\", \"228\", \"229\", \"230\", \"231\"\
    , \"232\", \"233\", \"234\", \"235\", \"\n      |                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                  ^\n/tmp/tmpjo2r3mtn.cpp:19:1566: error: missing terminating\
    \ \" character\n/tmp/tmpjo2r3mtn.cpp: In function \u2018bool valid_date(std::string)\u2019\
    :\n/tmp/tmpjo2r3mtn.cpp:20:1: error: too many initializers for \u2018std::string\
    \ [31]\u2019 {aka \u2018std::__cxx11::basic_string<char> [31]\u2019}\n   20 |\
    \ }\n      | ^\n/tmp/tmpjo2r3mtn.cpp:21:1: error: expected \u2018,\u2019 or \u2018\
    ;\u2019 before \u2018int\u2019\n   21 | int main() {\n      | ^~~\n/tmp/tmpjo2r3mtn.cpp:39:1:\
    \ error: expected \u2018}\u2019 at end of input\n   39 | }\n      | ^\n/tmp/tmpjo2r3mtn.cpp:16:35:\
    \ note: to match this \u2018{\u2019\n   16 | bool valid_date(std::string date)\
    \ {\n      |                                   ^\n/tmp/tmpjo2r3mtn.cpp:39:1: warning:\
    \ no return statement in function returning non-void [-Wreturn-type]\n   39 |\
    \ }\n      | ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n    bool valid = true;\n    int day;\n    int\
    \ month;\n    int year;\n    std::stringstream ss(date);\n    ss >> month;\n \
    \   ss >> day;\n    ss >> year;\n    if (month < 1 || month > 12) {\n        valid\
    \ = false;\n    }\n    if (day < 1 || day > 31) {\n        valid = false;\n  \
    \  }\n    if (month == 2) {\n        if (day > 29) {\n            valid = false;\n\
    \        }\n    }\n    if (month == 4 || month == 6 || month == 9 || month ==\
    \ 11) {\n        if (day > 30) {\n            valid = false;\n        }\n    }\n\
    \    if (month == 1) {\n        if (day > 31) {\n            valid = false;\n\
    \        }\n    }\n    if (valid) {\n        std::cout << \"Valid date\" << std::endl;\n\
    \    } else {\n        std::cout << \"Invalid date\" << std::endl;\n    }\n  \
    \  return valid;\n}\nint main() {\n    auto candidate = valid_date;\n    assert(candidate((\"\
    03-11-2000\")) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n\
    \    assert(candidate((\"04-0-2040\")) == (false));\n    assert(candidate((\"\
    06-04-2020\")) == (true));\n    assert(candidate((\"01-01-2007\")) == (true));\n\
    \    assert(candidate((\"03-32-2011\")) == (false));\n    assert(candidate((\"\
    \")) == (false));\n    assert(candidate((\"04-31-3000\")) == (false));\n    assert(candidate((\"\
    06-06-2005\")) == (true));\n    assert(candidate((\"21-31-2000\")) == (false));\n\
    \    assert(candidate((\"04-12-2003\")) == (true));\n    assert(candidate((\"\
    04122003\")) == (false));\n    assert(candidate((\"20030412\")) == (false));\n\
    \    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"2003-04-12\"\
    )) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n}\n"
  stdout: "Invalid date\n"
  stderr: "tmpnxja_osl: /tmp/tmpnxja_osl.cpp:55: int main(): Assertion `candidate((\"\
    03-11-2000\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n    // Write your code here\n    int day;\n\
    \    int month;\n    int year;\n    std::string months[12] = {\"January\", \"\
    February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"\
    September\", \"October\", \"November\", \"December\"};\n    std::string days[31]\
    \ = {\"31\", \"30\", \"29\"};\n    std::string months[12] = {\"January\", \"February\"\
    , \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\"\
    , \"October\", \"November\", \"December\"};\n    std::string days[31] = {\"31\"\
    , \"30\", \"29\"};\n    std::string months[12] = {\"January\", \"February\", \"\
    March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"\
    October\", \"November\", \"December\"};\n    std::string days[31] = {\"31\", \"\
    30\", \"29\"};\n    std::string months[12] = {\"January\", \"February\", \"March\"\
    , \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\"\
    , \"November\", \"December\"};\n    std::string days[31] = {\"31\", \"30\", \"\
    29\"};\n    std::string months[12] = {\"January\", \"February\", \"March\", \"\
    April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\",\
    \ \"November\", \"December\"};\n    std::string days[31] = {\"31\", \"30\", \"\
    29\"};\n    std::string months[12] = {\"January\", \"February\", \"March\", \"\
    April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\",\
    \ \"November\", \"December\"};\n    std::string days[31] = {\"31\", \"30\", \"\
    29\"};\n    std::string months[12] = {\"January\", \"February\", \"March\", \"\
    April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\",\
    \ \"November\", \"December\"};\n    std::string days[31] = {\"31\", \"30\", \"\
    29\"};\n    std::string months[12] = {\"January\", \"February\", \"March\", \"\
    April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\",\
    \ \"November\", \"December\"};\n    std::string days[31] = {\"31\", \"30\", \"\
    29\"};\n    std::string months[12] = {\"January\", \"February\", \"March\", \"\
    April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\",\
    \ \"November\", \"December\"};\n    std::string days[31] = {\"31\", \"30\", \"\
    29\"};\n    std::string months[12] = {\"January\", \"February\", \"March\", \"\
    April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\",\
    \ \"November\", \"December\"};\n    std::string days[31] = {\"31\", \"30\", \"\
    29\"};\n    std::string months[12] = {\"January\", \"February\", \"March\", \"\
    April\", \"\n}\nint main() {\n    auto candidate = valid_date;\n    assert(candidate((\"\
    03-11-2000\")) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n\
    \    assert(candidate((\"04-0-2040\")) == (false));\n    assert(candidate((\"\
    06-04-2020\")) == (true));\n    assert(candidate((\"01-01-2007\")) == (true));\n\
    \    assert(candidate((\"03-32-2011\")) == (false));\n    assert(candidate((\"\
    \")) == (false));\n    assert(candidate((\"04-31-3000\")) == (false));\n    assert(candidate((\"\
    06-06-2005\")) == (true));\n    assert(candidate((\"21-31-2000\")) == (false));\n\
    \    assert(candidate((\"04-12-2003\")) == (true));\n    assert(candidate((\"\
    04122003\")) == (false));\n    assert(candidate((\"20030412\")) == (false));\n\
    \    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"2003-04-12\"\
    )) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n}\n"
  stdout: ''
  stderr: "/tmp/tmppp7er_i1.cpp:41:72: warning: missing terminating \" character\n\
    \   41 |     std::string months[12] = {\"January\", \"February\", \"March\", \"\
    April\", \"\n      |                                                         \
    \               ^\n/tmp/tmppp7er_i1.cpp:41:72: error: missing terminating \" character\n\
    /tmp/tmppp7er_i1.cpp: In function \u2018bool valid_date(std::string)\u2019:\n\
    /tmp/tmppp7er_i1.cpp:23:17: error: redeclaration of \u2018std::string months [12]\u2019\
    \n   23 |     std::string months[12] = {\"January\", \"February\", \"March\",\
    \ \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\"\
    , \"November\", \"December\"};\n      |                 ^~~~~~\n/tmp/tmppp7er_i1.cpp:21:17:\
    \ note: \u2018std::string months [12]\u2019 previously declared here\n   21 |\
    \     std::string months[12] = {\"January\", \"February\", \"March\", \"April\"\
    , \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\"\
    , \"December\"};\n      |                 ^~~~~~\n/tmp/tmppp7er_i1.cpp:24:17:\
    \ error: redeclaration of \u2018std::string days [31]\u2019\n   24 |     std::string\
    \ days[31] = {\"31\", \"30\", \"29\"};\n      |                 ^~~~\n/tmp/tmppp7er_i1.cpp:22:17:\
    \ note: \u2018std::string days [31]\u2019 previously declared here\n   22 |  \
    \   std::string days[31] = {\"31\", \"30\", \"29\"};\n      |                \
    \ ^~~~\n/tmp/tmppp7er_i1.cpp:25:17: error: redeclaration of \u2018std::string\
    \ months [12]\u2019\n   25 |     std::string months[12] = {\"January\", \"February\"\
    , \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\"\
    , \"October\", \"November\", \"December\"};\n      |                 ^~~~~~\n\
    /tmp/tmppp7er_i1.cpp:21:17: note: \u2018std::string months [12]\u2019 previously\
    \ declared here\n   21 |     std::string months[12] = {\"January\", \"February\"\
    , \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\"\
    , \"October\", \"November\", \"December\"};\n      |                 ^~~~~~\n\
    /tmp/tmppp7er_i1.cpp:26:17: error: redeclaration of \u2018std::string days [31]\u2019\
    \n   26 |     std::string days[31] = {\"31\", \"30\", \"29\"};\n      |      \
    \           ^~~~\n/tmp/tmppp7er_i1.cpp:22:17: note: \u2018std::string days [31]\u2019\
    \ previously declared here\n   22 |     std::string days[31] = {\"31\", \"30\"\
    , \"29\"};\n      |                 ^~~~\n/tmp/tmppp7er_i1.cpp:27:17: error: redeclaration\
    \ of \u2018std::string months [12]\u2019\n   27 |     std::string months[12] =\
    \ {\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\"\
    , \"August\", \"September\", \"October\", \"November\", \"December\"};\n     \
    \ |                 ^~~~~~\n/tmp/tmppp7er_i1.cpp:21:17: note: \u2018std::string\
    \ months [12]\u2019 previously declared here\n   21 |     std::string months[12]\
    \ = {\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\"\
    , \"August\", \"September\", \"October\", \"November\", \"December\"};\n     \
    \ |                 ^~~~~~\n/tmp/tmppp7er_i1.cpp:28:17: error: redeclaration of\
    \ \u2018std::string days [31]\u2019\n   28 |     std::string days[31] = {\"31\"\
    , \"30\", \"29\"};\n      |                 ^~~~\n/tmp/tmppp7er_i1.cpp:22:17:\
    \ note: \u2018std::string days [31]\u2019 previously declared here\n   22 |  \
    \   std::string days[31] = {\"31\", \"30\", \"29\"};\n      |                \
    \ ^~~~\n/tmp/tmppp7er_i1.cpp:29:17: error: redeclaration of \u2018std::string\
    \ months [12]\u2019\n   29 |     std::string months[12] = {\"January\", \"February\"\
    , \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\"\
    , \"October\", \"November\", \"December\"};\n      |                 ^~~~~~\n\
    /tmp/tmppp7er_i1.cpp:21:17: note: \u2018std::string months [12]\u2019 previously\
    \ declared here\n   21 |     std::string months[12] = {\"January\", \"February\"\
    , \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\"\
    , \"October\", \"November\", \"December\"};\n      |                 ^~~~~~\n\
    /tmp/tmppp7er_i1.cpp:30:17: error: redeclaration of \u2018std::string days [31]\u2019\
    \n   30 |     std::string days[31] = {\"31\", \"30\", \"29\"};\n      |      \
    \           ^~~~\n/tmp/tmppp7er_i1.cpp:22:17: note: \u2018std::string days [31]\u2019\
    \ previously declared here\n   22 |     std::string days[31] = {\"31\", \"30\"\
    , \"29\"};\n      |                 ^~~~\n/tmp/tmppp7er_i1.cpp:31:17: error: redeclaration\
    \ of \u2018std::string months [12]\u2019\n   31 |     std::string months[12] =\
    \ {\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\"\
    , \"August\", \"September\", \"October\", \"November\", \"December\"};\n     \
    \ |                 ^~~~~~\n/tmp/tmppp7er_i1.cpp:21:17: note: \u2018std::string\
    \ months [12]\u2019 previously declared here\n   21 |     std::string months[12]\
    \ = {\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\"\
    , \"August\", \"September\", \"October\", \"November\", \"December\"};\n     \
    \ |                 ^~~~~~\n/tmp/tmppp7er_i1.cpp:32:17: error: redeclaration of\
    \ \u2018std::string days [31]\u2019\n   32 |     std::string days[31] = {\"31\"\
    , \"30\", \"29\"};\n      |                 ^~~~\n/tmp/tmppp7er_i1.cpp:22:17:\
    \ note: \u2018std::string days [31]\u2019 previously declared here\n   22 |  \
    \   std::string days[31] = {\"31\", \"30\", \"29\"};\n      |                \
    \ ^~~~\n/tmp/tmppp7er_i1.cpp:33:17: error: redeclaration of \u2018std::string\
    \ months [12]\u2019\n   33 |     std::string months[12] = {\"January\", \"February\"\
    , \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\"\
    , \"October\", \"November\", \"December\"};\n      |                 ^~~~~~\n\
    /tmp/tmppp7er_i1.cpp:21:17: note: \u2018std::string months [12]\u2019 previously\
    \ declared here\n   21 |     std::string months[12] = {\"January\", \"February\"\
    , \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\"\
    , \"October\", \"November\", \"December\"};\n      |                 ^~~~~~\n\
    /tmp/tmppp7er_i1.cpp:34:17: error: redeclaration of \u2018std::string days [31]\u2019\
    \n   34 |     std::string days[31] = {\"31\", \"30\", \"29\"};\n      |      \
    \           ^~~~\n/tmp/tmppp7er_i1.cpp:22:17: note: \u2018std::string days [31]\u2019\
    \ previously declared here\n   22 |     std::string days[31] = {\"31\", \"30\"\
    , \"29\"};\n      |                 ^~~~\n/tmp/tmppp7er_i1.cpp:35:17: error: redeclaration\
    \ of \u2018std::string months [12]\u2019\n   35 |     std::string months[12] =\
    \ {\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\"\
    , \"August\", \"September\", \"October\", \"November\", \"December\"};\n     \
    \ |                 ^~~~~~\n/tmp/tmppp7er_i1.cpp:21:17: note: \u2018std::string\
    \ months [12]\u2019 previously declared here\n   21 |     std::string months[12]\
    \ = {\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\"\
    , \"August\", \"September\", \"October\", \"November\", \"December\"};\n     \
    \ |                 ^~~~~~\n/tmp/tmppp7er_i1.cpp:36:17: error: redeclaration of\
    \ \u2018std::string days [31]\u2019\n   36 |     std::string days[31] = {\"31\"\
    , \"30\", \"29\"};\n      |                 ^~~~\n/tmp/tmppp7er_i1.cpp:22:17:\
    \ note: \u2018std::string days [31]\u2019 previously declared here\n   22 |  \
    \   std::string days[31] = {\"31\", \"30\", \"29\"};\n      |                \
    \ ^~~~\n/tmp/tmppp7er_i1.cpp:37:17: error: redeclaration of \u2018std::string\
    \ months [12]\u2019\n   37 |     std::string months[12] = {\"January\", \"February\"\
    , \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\"\
    , \"October\", \"November\", \"December\"};\n      |                 ^~~~~~\n\
    /tmp/tmppp7er_i1.cpp:21:17: note: \u2018std::string months [12]\u2019 previously\
    \ declared here\n   21 |     std::string months[12] = {\"January\", \"February\"\
    , \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\"\
    , \"October\", \"November\", \"December\"};\n      |                 ^~~~~~\n\
    /tmp/tmppp7er_i1.cpp:38:17: error: redeclaration of \u2018std::string days [31]\u2019\
    \n   38 |     std::string days[31] = {\"31\", \"30\", \"29\"};\n      |      \
    \           ^~~~\n/tmp/tmppp7er_i1.cpp:22:17: note: \u2018std::string days [31]\u2019\
    \ previously declared here\n   22 |     std::string days[31] = {\"31\", \"30\"\
    , \"29\"};\n      |                 ^~~~\n/tmp/tmppp7er_i1.cpp:39:17: error: redeclaration\
    \ of \u2018std::string months [12]\u2019\n   39 |     std::string months[12] =\
    \ {\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\"\
    , \"August\", \"September\", \"October\", \"November\", \"December\"};\n     \
    \ |                 ^~~~~~\n/tmp/tmppp7er_i1.cpp:21:17: note: \u2018std::string\
    \ months [12]\u2019 previously declared here\n   21 |     std::string months[12]\
    \ = {\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\"\
    , \"August\", \"September\", \"October\", \"November\", \"December\"};\n     \
    \ |                 ^~~~~~\n/tmp/tmppp7er_i1.cpp:40:17: error: redeclaration of\
    \ \u2018std::string days [31]\u2019\n   40 |     std::string days[31] = {\"31\"\
    , \"30\", \"29\"};\n      |                 ^~~~\n/tmp/tmppp7er_i1.cpp:22:17:\
    \ note: \u2018std::string days [31]\u2019 previously declared here\n   22 |  \
    \   std::string days[31] = {\"31\", \"30\", \"29\"};\n      |                \
    \ ^~~~\n/tmp/tmppp7er_i1.cpp:41:17: error: redeclaration of \u2018std::string\
    \ months [12]\u2019\n   41 |     std::string months[12] = {\"January\", \"February\"\
    , \"March\", \"April\", \"\n      |                 ^~~~~~\n/tmp/tmppp7er_i1.cpp:21:17:\
    \ note: \u2018std::string months [12]\u2019 previously declared here\n   21 |\
    \     std::string months[12] = {\"January\", \"February\", \"March\", \"April\"\
    , \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\"\
    , \"December\"};\n      |                 ^~~~~~\n/tmp/tmppp7er_i1.cpp:61:1: error:\
    \ expected \u2018}\u2019 at end of input\n   61 | }\n      | ^\n/tmp/tmppp7er_i1.cpp:16:35:\
    \ note: to match this \u2018{\u2019\n   16 | bool valid_date(std::string date)\
    \ {\n      |                                   ^\n/tmp/tmppp7er_i1.cpp:61:1: warning:\
    \ no return statement in function returning non-void [-Wreturn-type]\n   61 |\
    \ }\n      | ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n    // Write your code here\n    int day;\n\
    \    int month;\n    int year;\n    std::stringstream ss(date);\n    ss >> month\
    \ >> day >> year;\n    \n    if(month < 1 || month > 12){\n        return false;\n\
    \    }\n    if(day < 1 || day > 31){\n        return false;\n    }\n    if(month\
    \ == 1 && day > 29){\n        return false;\n    }\n    if(month == 2 && day >\
    \ 28){\n        return false;\n    }\n    if(month == 4 && day > 30){\n      \
    \  return false;\n    }\n    if(month == 6 && day > 31){\n        return false;\n\
    \    }\n    if(month == 9 && day > 31){\n        return false;\n    }\n    if(month\
    \ == 11 && day > 30){\n        return false;\n    }\n    if(month == 12 && day\
    \ > 31){\n        return false;\n    }\n    if(month == 1 && day > 31){\n    \
    \    return false;\n    }\n    if(month == 3 && day > 30){\n        return false;\n\
    \    }\n    if(month == 5 && day > 31){\n        return false;\n    }\n    if(month\
    \ == 7 && day > 31){\n        return false;\n    }\n    if(month == 8 && day >\
    \ 31){\n        return false;\n    }\n    if(month == 10 && day > 31){\n     \
    \   return false;\n    }\n    if(month == 12 && day > 31){\n        return false;\n\
    \    }\n    if(month == 1 && day > 31){\n        return false;\n    }\n    if(month\
    \ == 3 && day > 30){\n        return false;\n    }\n    if(month == 5 && day >\
    \ 31){\n        return false;\n    }\n    if(month == 7 && day > 31){\n      \
    \  return false;\n    }\n    if(month == 8 && day > 31){\n        return false;\n\
    \    }\n    if(month == 10 && day > 31){\n        return false;\n    }\n    if(month\
    \ == 12 && day > 31){\n        return false;\n    }\n    if(month == 1 && day\
    \ > 31){\n        return false;\n    }\n    if(month == 3 && day > 30){\n    \
    \    return false;\n    }\n    if(month == 5 && day > 31){\n        return false;\n\
    \    }\n    if(month == 7 && day > 31){\n        return false;\n    }\n    if(month\
    \ == 8 && day > 31){\n        return false;\n    }\n    if(month == 10 && day\
    \ > 31){\n        return false;\n    }\n    if(month == 12 && day > 31){\n   \
    \     return false;\n    }\n    if(month == 1 && day > 31){\n        return false;\n\
    \    }\n    if(month == 3 && day > 30){\n        return false;\n    }\n    if(month\
    \ == 5 && day > 31){\n        return false;\n    }\n    if(month == 7 && day >\
    \ 31){\n        return false;\n    }\n    if(month == 8 && day > 31){\n}\nint\
    \ main() {\n    auto candidate = valid_date;\n    assert(candidate((\"03-11-2000\"\
    )) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"\
    04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n\
    \    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"\
    03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"\
    04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n\
    \    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"\
    04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n\
    \    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\"\
    )) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"\
    04-2003\")) == (false));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpl738z_dv.cpp: In function \u2018bool valid_date(std::string)\u2019\
    :\n/tmp/tmpl738z_dv.cpp:128:12: error: a function-definition is not allowed here\
    \ before \u2018{\u2019 token\n  128 | int main() {\n      |            ^\n/tmp/tmpl738z_dv.cpp:146:1:\
    \ error: expected \u2018}\u2019 at end of input\n  146 | }\n      | ^\n/tmp/tmpl738z_dv.cpp:16:35:\
    \ note: to match this \u2018{\u2019\n   16 | bool valid_date(std::string date)\
    \ {\n      |                                   ^\n/tmp/tmpl738z_dv.cpp:146:1:\
    \ warning: control reaches end of non-void function [-Wreturn-type]\n  146 | }\n\
    \      | ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n    // Write your code here\n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n}\nint main() {\n    auto candidate = valid_date;\n\
    \    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"\
    15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n\
    \    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"\
    01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n\
    \    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\"\
    )) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"\
    21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n\
    \    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\"\
    )) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"\
    2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmp9kmmrfvc: /tmp/tmp9kmmrfvc.cpp:275: int main(): Assertion `candidate((\"\
    03-11-2000\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n    // Write your code here\n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n}\nint main() {\n    auto candidate = valid_date;\n\
    \    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"\
    15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n\
    \    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"\
    01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n\
    \    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\"\
    )) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"\
    21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n\
    \    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\"\
    )) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"\
    2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmps843f68s: /tmp/tmps843f68s.cpp:275: int main(): Assertion `candidate((\"\
    03-11-2000\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n    // Write your code here\n    \n    // Write\
    \ your code here\n    \n    // Write your code here\n    \n    // Write your code\
    \ here\n    \n    // Write your code here\n    \n    // Write your code here\n\
    \    \n    // Write your code here\n    \n    // Write your code here\n    \n\
    \    // Write your code here\n    \n    // Write your code here\n    \n    //\
    \ Write your code here\n    \n    // Write your code here\n    \n    // Write\
    \ your code here\n    \n    // Write your code here\n    \n    // Write your code\
    \ here\n    \n    // Write your code here\n    \n    // Write your code here\n\
    \    \n    // Write your code here\n    \n    // Write your code here\n    \n\
    \    // Write your code here\n    \n    // Write your code here\n    \n    //\
    \ Write your code here\n    \n    // Write your code here\n    \n    // Write\
    \ your code here\n    \n    // Write your code here\n    \n    // Write your code\
    \ here\n    \n    // Write your code here\n    \n    // Write your code here\n\
    \    \n    // Write your code here\n    \n    // Write your code here\n    \n\
    \    // Write your code here\n    \n    // Write your code here\n    \n    //\
    \ Write your code here\n    \n    // Write your code here\n    \n    // Write\
    \ your code here\n    \n    // Write your code here\n    \n    // Write your code\
    \ here\n    \n    // Write your code here\n    \n    // Write your code here\n\
    \    \n    // Write your code here\n    \n    // Write your code here\n    \n\
    \    // Write your code here\n    \n    // Write your code here\n    \n    //\
    \ Write your code here\n    \n    // Write your code here\n    \n    // Write\
    \ your code here\n    \n    // Write your code here\n    \n    // Write your code\
    \ here\n    \n    // Write your code here\n    \n    // Write your code here\n\
    \    \n    // Write your code here\n    \n    // Write your code here\n    \n\
    \    // Write your code here\n    \n    // Write your code here\n    \n    //\
    \ Write your code here\n    \n    // Write your code here\n    \n    // Write\
    \ your code here\n    \n    // Write your code here\n    \n    // Write your code\
    \ here\n    \n    // Write your code here\n    \n    // Write your code here\n\
    \    \n    // Write your code here\n    \n    // Write your code here\n    \n\
    \    // Write your code here\n    \n    // Write your code here\n    \n    //\
    \ Write your code here\n    \n    // Write your code here\n    \n    // Write\
    \ your code here\n    \n    // Write your code here\n    \n    // Write your code\
    \ here\n    \n    // Write your code here\n    \n    // Write your code here\n\
    \    \n    // Write your code here\n    \n    // \n}\nint main() {\n    auto candidate\
    \ = valid_date;\n    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"\
    15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n\
    \    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"\
    01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n\
    \    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\"\
    )) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"\
    21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n\
    \    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\"\
    )) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"\
    2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmpt7tkn71a: /tmp/tmpt7tkn71a.cpp:167: int main(): Assertion `candidate((\"\
    03-11-2000\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n    // Write your code here\n    int day;\n\
    \    int month;\n    int year;\n    std::stringstream ss(date);\n    ss >> month\
    \ >> day >> year;\n    \n    if (month < 1 || month > 12) return false;\n    if\
    \ (day < 1 || day > 31) return false;\n    if (month == 2 && day > 29) return\
    \ false;\n    if (month == 4 || month == 6 || month == 9 || month == 11 && day\
    \ > 30) return false;\n    if (month == 1 || month == 3 || month == 5 || month\
    \ == 7 || month == 8 || month == 10 && day > 31) return false;\n    if (month\
    \ == 2) return true;\n    return false;\n}\nint main() {\n    auto candidate =\
    \ valid_date;\n    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"\
    15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n\
    \    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"\
    01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n\
    \    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\"\
    )) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"\
    21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n\
    \    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\"\
    )) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"\
    2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmpc7kf_w6l: /tmp/tmpc7kf_w6l.cpp:34: int main(): Assertion `candidate((\"\
    03-11-2000\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n    // Write your code here\n    bool valid\
    \ = true;\n    int day;\n    int month;\n    int year;\n    std::stringstream\
    \ ss;\n    ss << date;\n    ss >> day >> month >> year;\n    if (day < 1 || day\
    \ > 31) {\n        valid = false;\n    }\n    if (month < 1 || month > 12) {\n\
    \        valid = false;\n    }\n    if (year < 2000 || year > 2040) {\n      \
    \  valid = false;\n    }\n    return valid;\n}\nint main() {\n    auto candidate\
    \ = valid_date;\n    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"\
    15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n\
    \    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"\
    01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n\
    \    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\"\
    )) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"\
    21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n\
    \    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\"\
    )) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"\
    2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmp59kckccj: /tmp/tmp59kckccj.cpp:38: int main(): Assertion `candidate((\"\
    03-11-2000\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n    // Write your code here\n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n}\nint main() {\n    auto candidate = valid_date;\n\
    \    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"\
    15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n\
    \    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"\
    01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n\
    \    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\"\
    )) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"\
    21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n\
    \    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\"\
    )) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"\
    2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmp6me7fg_p: /tmp/tmp6me7fg_p.cpp:275: int main(): Assertion `candidate((\"\
    03-11-2000\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n    // Write your code here\n    int day;\n\
    \    int month;\n    int year;\n    std::stringstream ss;\n    ss << date;\n \
    \   ss >> day >> month >> year;\n    \n    if(day < 1 || day > 31) {\n       \
    \ return false;\n    }\n    if(month < 1 || month > 12) {\n        return false;\n\
    \    }\n    if(year < 1000 || year > 3000) {\n        return false;\n    }\n \
    \   \n    \n    return true;\n}\nint main() {\n    auto candidate = valid_date;\n\
    \    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"\
    15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n\
    \    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"\
    01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n\
    \    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\"\
    )) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"\
    21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n\
    \    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\"\
    )) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"\
    2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmp3ijrksrg: /tmp/tmp3ijrksrg.cpp:40: int main(): Assertion `candidate((\"\
    03-11-2000\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n    // Write your code here\n    \n    bool\
    \ valid = true;\n    \n    if(!date.empty()){\n        valid = false;\n    }\n\
    \    \n    int days[12] = {0,31,28,31,30,31,30,31,31,30,31,30,31};\n    int months[12]\
    \ = {0,1,2,3,4,5,6,7,8,9,10,11};\n    \n    int days_month = date.size() - 4;\n\
    \    \n    int days_month_1 = days_month / 4;\n    int days_month_2 = days_month\
    \ / 2;\n    int days_month_3 = days_month / 3;\n    \n    int days_month_4 = days_month\
    \ / 4;\n    \n    int days_month_5 = days_month / 5;\n    \n    int days_month_6\
    \ = days_month / 6;\n    \n    int days_month_7 = days_month / 7;\n    \n    int\
    \ days_month_8 = days_month / 8;\n    \n    int days_month_9 = days_month / 9;\n\
    \    \n    int days_month_10 = days_month / 10;\n    \n    int days_month_11 =\
    \ days_month / 11;\n    \n    int days_month_12 = days_month / 12;\n    \n   \
    \ int days_month_13 = days_month / 13;\n    \n    int days_month_14 = days_month\
    \ / 14;\n    \n    int days_month_15 = days_month / 15;\n    \n    int days_month_16\
    \ = days_month / 16;\n    \n    int days_month_17 = days_month / 17;\n    \n \
    \   int days_month_18 = days_month / 18;\n    \n    int days_month_19 = days_month\
    \ / 19;\n    \n    int days_month_20 = days_month / 20;\n    \n    int days_month_21\
    \ = days_month / 21;\n    \n    int days_month_22 = days_month / 22;\n    \n \
    \   int days_month_23 = days_month / 23;\n    \n    int days_month_24 = days_month\
    \ / 24;\n    \n    int days_month_25 = days_month / 25;\n    \n    int days_month_26\
    \ = days_month / 26;\n    \n    int days_month_27 = days_month / 27;\n    \n \
    \   int days_month_28 = days_month / 28;\n    \n    int days_month_29 = days_month\
    \ / 29;\n    \n    int days_month_30 = days_month / 30;\n    \n    int days_month_31\
    \ = days_month / 31;\n    \n    int \n}\nint main() {\n    auto candidate = valid_date;\n\
    \    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"\
    15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n\
    \    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"\
    01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n\
    \    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\"\
    )) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"\
    21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n\
    \    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\"\
    )) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"\
    2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n\
    }\n"
  stdout: ''
  stderr: "/tmp/tmp4xk0sbx3.cpp: In function \u2018bool valid_date(std::string)\u2019\
    :\n/tmp/tmp4xk0sbx3.cpp:25:58: error: too many initializers for \u2018int [12]\u2019\
    \n   25 |     int days[12] = {0,31,28,31,30,31,30,31,31,30,31,30,31};\n      |\
    \                                                          ^\n/tmp/tmp4xk0sbx3.cpp:91:1:\
    \ error: expected unqualified-id before \u2018}\u2019 token\n   91 | }\n     \
    \ | ^\n/tmp/tmp4xk0sbx3.cpp:91:1: warning: no return statement in function returning\
    \ non-void [-Wreturn-type]\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n    std::string date_str = date;\n    size_t\
    \ pos = 0;\n    int day = 0;\n    int month = 0;\n    int year = 0;\n    bool\
    \ valid = false;\n    pos = date_str.find_first_of(\"-\");\n    if (pos != std::string::npos)\
    \ {\n        date_str = date_str.substr(0, pos);\n    }\n    pos = date_str.find_first_of(\"\
    /\");\n    if (pos != std::string::npos) {\n        date_str = date_str.substr(pos\
    \ + 1, date_str.length());\n    }\n    pos = date_str.find_first_of(\",\");\n\
    \    if (pos != std::string::npos) {\n        date_str = date_str.substr(pos +\
    \ 1, date_str.length());\n    }\n    pos = date_str.find_first_of(\"\\\\\");\n\
    \    if (pos != std::string::npos) {\n        date_str = date_str.substr(pos +\
    \ 1, date_str.length());\n    }\n    pos = date_str.find_first_of(\"0\");\n  \
    \  if (pos != std::string::npos) {\n        date_str = date_str.substr(pos + 1,\
    \ date_str.length());\n    }\n    pos = date_str.find_first_of(\"1\");\n    if\
    \ (pos != std::string::npos) {\n        date_str = date_str.substr(pos + 1, date_str.length());\n\
    \    }\n    pos = date_str.find_first_of(\"2\");\n    if (pos != std::string::npos)\
    \ {\n        date_str = date_str.substr(pos + 1, date_str.length());\n    }\n\
    \    pos = date_str.find_first_of(\"3\");\n    if (pos != std::string::npos) {\n\
    \        date_str = date_str.substr(pos + 1, date_str.length());\n    }\n    pos\
    \ = date_str.find_first_of(\"4\");\n    if (pos != std::string::npos) {\n    \
    \    date_str = date_str.substr(pos + 1, date_str.length());\n    }\n    pos =\
    \ date_str.find_first_of(\"5\");\n    if (pos != std::string::npos) {\n      \
    \  date_str = date_str.substr(pos + 1, date_str.length());\n    }\n    pos = date_str.find_first_of(\"\
    6\");\n    if (pos != std::string::npos) {\n        date_str = date_str.substr(pos\
    \ + 1, date_str.length());\n    }\n    pos = date_str.find_first_of(\"7\");\n\
    \    if (pos != std::string::npos) {\n        date_str = date_str.substr(pos +\
    \ 1, date_str.length());\n    }\n    pos = date_str.find_first_of(\"8\");\n  \
    \  if (pos != std::string::npos) {\n        date_str = date_str.substr(pos + 1,\
    \ date_str.length());\n    }\n    pos = date_str.find_first_of(\"9\");\n    if\
    \ (pos != std::string::npos) {\n        date_str = date_str.substr(pos + 1, date_str.length());\n\
    \    }\n}\nint main() {\n    auto candidate = valid_date;\n    assert(candidate((\"\
    03-11-2000\")) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n\
    \    assert(candidate((\"04-0-2040\")) == (false));\n    assert(candidate((\"\
    06-04-2020\")) == (true));\n    assert(candidate((\"01-01-2007\")) == (true));\n\
    \    assert(candidate((\"03-32-2011\")) == (false));\n    assert(candidate((\"\
    \")) == (false));\n    assert(candidate((\"04-31-3000\")) == (false));\n    assert(candidate((\"\
    06-06-2005\")) == (true));\n    assert(candidate((\"21-31-2000\")) == (false));\n\
    \    assert(candidate((\"04-12-2003\")) == (true));\n    assert(candidate((\"\
    04122003\")) == (false));\n    assert(candidate((\"20030412\")) == (false));\n\
    \    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"2003-04-12\"\
    )) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n}\n"
  stdout: ''
  stderr: "tmpifdptaur: /tmp/tmpifdptaur.cpp:82: int main(): Assertion `candidate((\"\
    03-11-2000\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n    // Write your code here\n    int day;\n\
    \    int month;\n    int year;\n    bool valid = false;\n    std::stringstream\
    \ ss;\n    ss << date;\n    ss >> day >> month >> year;\n    if (day < 1 || day\
    \ > 31) {\n        valid = false;\n    }\n    if (month < 1 || month > 12) {\n\
    \        valid = false;\n    }\n    if (month == 2 && day > 29) {\n        valid\
    \ = false;\n    }\n    if (month == 4 && day > 30) {\n        valid = false;\n\
    \    }\n    if (month == 6 && day > 31) {\n        valid = false;\n    }\n   \
    \ if (month == 9 && day > 30) {\n        valid = false;\n    }\n    if (month\
    \ == 11 && day > 31) {\n        valid = false;\n    }\n    if (month == 1 && day\
    \ > 31) {\n        valid = false;\n    }\n    if (month == 3 && day > 31) {\n\
    \        valid = false;\n    }\n    if (month == 5 && day > 31) {\n        valid\
    \ = false;\n    }\n    if (month == 7 && day > 31) {\n        valid = false;\n\
    \    }\n    if (month == 8 && day > 31) {\n        valid = false;\n    }\n   \
    \ if (month == 10 && day > 31) {\n        valid = false;\n    }\n    if (month\
    \ == 12 && day > 31) {\n        valid = false;\n    }\n    if (month == 1 && day\
    \ > 31) {\n        valid = false;\n    }\n    if (month == 3 && day > 31) {\n\
    \        valid = false;\n    }\n    if (month == 5 && day > 31) {\n        valid\
    \ = false;\n    }\n    if (month == 7 && day > 31) {\n        valid = false;\n\
    \    }\n    if (month == 8 && day > 31) {\n        valid = false;\n    }\n   \
    \ if (month == 10 && day > 31) {\n        valid = false;\n    }\n    if (month\
    \ == 12 && day > 31) {\n        valid = false;\n    }\n    if (month == 1 && day\
    \ > 31) {\n        valid = false;\n    }\n    if (month == 3 && day > 31) {\n\
    \        valid = false;\n    }\n    if (month == 5 && day > 31) {\n        valid\
    \ = false;\n    }\n    if (month == 7 && day > 31) {\n        valid = false;\n\
    \    }\n    if (month == 8 && day > 31) {\n        valid = false;\n    }\n   \
    \ if (month == 10 && day > 31) {\n        valid = false;\n    }\n    if (month\
    \ == 12 && day > 31) {\n        valid = false;\n    }\n    if (month == 1 && day\
    \ > 31) {\n        valid = false;\n    }\n    if (month == 3 && day > 31) {\n\
    \        valid = false;\n    }\n    if (month == 5 && day > 31) {\n        valid\
    \ = false;\n    }\n    if (month == 7 && day \n}\nint main() {\n    auto candidate\
    \ = valid_date;\n    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"\
    15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n\
    \    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"\
    01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n\
    \    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\"\
    )) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"\
    21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n\
    \    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\"\
    )) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"\
    2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n\
    }\n"
  stdout: ''
  stderr: "/tmp/tmpac_df5h_.cpp: In function \u2018bool valid_date(std::string)\u2019\
    :\n/tmp/tmpac_df5h_.cpp:118:26: error: expected \u2018)\u2019 before \u2018}\u2019\
    \ token\n  118 |     if (month == 7 && day\n      |        ~                 ^\n\
    \      |                          )\n  119 | }\n      | ~                    \
    \     \n/tmp/tmpac_df5h_.cpp:119:1: error: expected primary-expression before\
    \ \u2018}\u2019 token\n  119 | }\n      | ^\n/tmp/tmpac_df5h_.cpp:119:1: warning:\
    \ no return statement in function returning non-void [-Wreturn-type]\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n    // Write your code here\n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n}\nint main() {\n    auto candidate = valid_date;\n\
    \    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"\
    15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n\
    \    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"\
    01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n\
    \    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\"\
    )) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"\
    21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n\
    \    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\"\
    )) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"\
    2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmpfkqdokah: /tmp/tmpfkqdokah.cpp:275: int main(): Assertion `candidate((\"\
    03-11-2000\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n    // Write your code here\n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n}\nint main() {\n    auto candidate = valid_date;\n\
    \    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"\
    15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n\
    \    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"\
    01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n\
    \    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\"\
    )) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"\
    21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n\
    \    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\"\
    )) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"\
    2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmpw9vysum9: /tmp/tmpw9vysum9.cpp:275: int main(): Assertion `candidate((\"\
    03-11-2000\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n    // Write your code here\n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n}\nint main() {\n    auto candidate = valid_date;\n\
    \    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"\
    15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n\
    \    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"\
    01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n\
    \    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\"\
    )) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"\
    21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n\
    \    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\"\
    )) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"\
    2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmpfdgeywdf: /tmp/tmpfdgeywdf.cpp:275: int main(): Assertion `candidate((\"\
    03-11-2000\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n    // Write your code here\n    bool valid\
    \ = false;\n    int day;\n    int month;\n    int year;\n    std::stringstream\
    \ ss;\n    ss << date;\n    ss >> day >> month >> year;\n    if (day < 1 || day\
    \ > 31) {\n        valid = false;\n    }\n    if (month < 1 || month > 12) {\n\
    \        valid = false;\n    }\n    if (year < 2000 || year > 2040) {\n      \
    \  valid = false;\n    }\n    if (month == 2 && day > 29) {\n        valid = false;\n\
    \    }\n    return valid;\n}\nint main() {\n    auto candidate = valid_date;\n\
    \    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"\
    15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n\
    \    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"\
    01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n\
    \    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\"\
    )) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"\
    21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n\
    \    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\"\
    )) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"\
    2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmp6dfjc9vc: /tmp/tmp6dfjc9vc.cpp:41: int main(): Assertion `candidate((\"\
    03-11-2000\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n    // Write your code here\n    \n    // Write\
    \ your code here\n    \n    // Write your code here\n    \n    // Write your code\
    \ here\n    \n    // Write your code here\n    \n    // Write your code here\n\
    \    \n    // Write your code here\n    \n    // Write your code here\n    \n\
    \    // Write your code here\n    \n    // Write your code here\n    \n    //\
    \ Write your code here\n    \n    // Write your code here\n    \n    // Write\
    \ your code here\n    \n    // Write your code here\n    \n    // Write your code\
    \ here\n    \n    // Write your code here\n    \n    // Write your code here\n\
    \    \n    // Write your code here\n    \n    // Write your code here\n    \n\
    \    // Write your code here\n    \n    // Write your code here\n    \n    //\
    \ Write your code here\n    \n    // Write your code here\n    \n    // Write\
    \ your code here\n    \n    // Write your code here\n    \n    // Write your code\
    \ here\n    \n    // Write your code here\n    \n    // Write your code here\n\
    \    \n    // Write your code here\n    \n    // Write your code here\n    \n\
    \    // Write your code here\n    \n    // Write your code here\n    \n    //\
    \ Write your code here\n    \n    // Write your code here\n    \n    // Write\
    \ your code here\n    \n    // Write your code here\n    \n    // Write your code\
    \ here\n    \n    // Write your code here\n    \n    // Write your code here\n\
    \    \n    // Write your code here\n    \n    // Write your code here\n    \n\
    \    // Write your code here\n    \n    // Write your code here\n    \n    //\
    \ Write your code here\n    \n    // Write your code here\n    \n    // Write\
    \ your code here\n    \n    // Write your code here\n    \n    // Write your code\
    \ here\n    \n    // Write your code here\n    \n    // Write your code here\n\
    \    \n    // Write your code here\n    \n    // Write your code here\n    \n\
    \    // Write your code here\n    \n    // Write your code here\n    \n    //\
    \ Write your code here\n    \n    // Write your code here\n    \n    // Write\
    \ your code here\n    \n    // Write your code here\n    \n    // Write your code\
    \ here\n    \n    // Write your code here\n    \n    // Write your code here\n\
    \    \n    // Write your code here\n    \n    // Write your code here\n    \n\
    \    // Write your code here\n    \n    // Write your code here\n    \n    //\
    \ Write your code here\n    \n    // Write your code here\n    \n    // Write\
    \ your code here\n    \n    // Write your code here\n    \n    // Write your code\
    \ here\n    \n    // Write your code here\n    \n    // Write your code here\n\
    \    \n    // Write your code here\n    \n    // \n}\nint main() {\n    auto candidate\
    \ = valid_date;\n    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"\
    15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n\
    \    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"\
    01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n\
    \    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\"\
    )) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"\
    21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n\
    \    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\"\
    )) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"\
    2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmpe9597aja: /tmp/tmpe9597aja.cpp:167: int main(): Assertion `candidate((\"\
    03-11-2000\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n    std::string months[12] = {\"January\", \"\
    February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"\
    September\", \"October\", \"November\", \"December\"};\n    int days[12] = {31,\
    \ 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31};\n    int months[12] = {0, 31, 28,\
    \ 31, 30, 31, 30, 31, 31, 30, 31, 30, 31};\n    int year;\n    bool valid = false;\n\
    \    std::stringstream ss(date);\n    ss >> year;\n    if (ss.fail()) {\n    \
    \    std::cout << \"Invalid date format\" << std::endl;\n        return false;\n\
    \    }\n    if (year < 1 || year > 9999) {\n        std::cout << \"Invalid year\"\
    \ << std::endl;\n        return false;\n    }\n    if (date.size() < 2) {\n  \
    \      std::cout << \"Invalid date format\" << std::endl;\n        return false;\n\
    \    }\n    if (date.size() > 10) {\n        std::cout << \"Invalid date format\"\
    \ << std::endl;\n        return false;\n    }\n    if (date[0] == '0' && date[1]\
    \ == '/') {\n        std::cout << \"Invalid date format\" << std::endl;\n    \
    \    return false;\n    }\n    if (date[0] == '/') {\n        std::cout << \"\
    Invalid date format\" << std::endl;\n        return false;\n    }\n    if (date[1]\
    \ == '/') {\n        std::cout << \"Invalid date format\" << std::endl;\n    \
    \    return false;\n    }\n    if (date[2] != '-') {\n        std::cout << \"\
    Invalid date format\" << std::endl;\n        return false;\n    }\n    if (date[3]\
    \ != '-') {\n        std::cout << \"Invalid date format\" << std::endl;\n    \
    \    return false;\n    }\n    if (date[4] != '-') {\n        std::cout << \"\
    Invalid date format\" << std::endl;\n        return false;\n    }\n    if (date[5]\
    \ != '-') {\n        std::cout << \"Invalid date format\" << std::endl;\n    \
    \    return false;\n    }\n    if (date[6] != '-') {\n        std::cout << \"\
    Invalid date format\" << std::endl;\n        return false;\n    }\n    if (date[7]\
    \ != '-') {\n        std::cout << \"Invalid date format\" << std::endl;\n    \
    \    return false;\n    }\n    if (date[8] != '-') {\n        std::cout << \"\
    Invalid date format\" << std::endl;\n        return false;\n    }\n    if (date[9]\
    \ != '-') {\n        std::cout << \"Invalid date format\" << std::endl;\n    \
    \    return false;\n    }\n    if (date[10] != '-') {\n        std::cout << \"\
    Invalid date format\" << std::endl;\n        return false;\n    }\n    if (date[11]\
    \ != '-') {\n        std::cout << \"Invalid date format\" << std::endl;\n    \
    \    return false;\n    }\n    if (date[12] != '-') {\n        std::cout << \"\
    Invalid date format\" << std::endl;\n        return false;\n    }\n    int day;\n\
    \    int month;\n    int year1;\n    int year2;\n    int day1;\n    int day2;\n\
    \    int day3;\n    int day4;\n    int day5;\n    int day6;\n    int day7;\n \
    \   int day8;\n    int day9;\n    int \n}\nint main() {\n    auto candidate =\
    \ valid_date;\n    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"\
    15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n\
    \    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"\
    01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n\
    \    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\"\
    )) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"\
    21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n\
    \    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\"\
    )) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"\
    2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n\
    }\n"
  stdout: ''
  stderr: "/tmp/tmp53dci4l9.cpp: In function \u2018bool valid_date(std::string)\u2019\
    :\n/tmp/tmp53dci4l9.cpp:19:9: error: conflicting declaration \u2018int months\
    \ [12]\u2019\n   19 |     int months[12] = {0, 31, 28, 31, 30, 31, 30, 31, 31,\
    \ 30, 31, 30, 31};\n      |         ^~~~~~\n/tmp/tmp53dci4l9.cpp:17:17: note:\
    \ previous declaration as \u2018std::string months [12]\u2019\n   17 |     std::string\
    \ months[12] = {\"January\", \"February\", \"March\", \"April\", \"May\", \"June\"\
    , \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"\
    };\n      |                 ^~~~~~\n/tmp/tmp53dci4l9.cpp:110:1: error: expected\
    \ unqualified-id before \u2018}\u2019 token\n  110 | }\n      | ^\n/tmp/tmp53dci4l9.cpp:110:1:\
    \ warning: control reaches end of non-void function [-Wreturn-type]\n  110 | }\n\
    \      | ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n    // Write your code here\n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n}\nint main() {\n    auto candidate = valid_date;\n\
    \    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"\
    15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n\
    \    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"\
    01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n\
    \    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\"\
    )) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"\
    21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n\
    \    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\"\
    )) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"\
    2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmp67lv8n31: /tmp/tmp67lv8n31.cpp:275: int main(): Assertion `candidate((\"\
    03-11-2000\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n    bool valid = false;\n    int day;\n    int\
    \ month;\n    int year;\n    std::stringstream ss;\n    ss << date;\n    ss >>\
    \ day >> month >> year;\n    if (day > 0 && day <= 31 && month > 0 && month <=\
    \ 12 && year > 0 && year <= 9999) {\n        valid = true;\n    }\n    return\
    \ valid;\n}\nint main() {\n    auto candidate = valid_date;\n    assert(candidate((\"\
    03-11-2000\")) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n\
    \    assert(candidate((\"04-0-2040\")) == (false));\n    assert(candidate((\"\
    06-04-2020\")) == (true));\n    assert(candidate((\"01-01-2007\")) == (true));\n\
    \    assert(candidate((\"03-32-2011\")) == (false));\n    assert(candidate((\"\
    \")) == (false));\n    assert(candidate((\"04-31-3000\")) == (false));\n    assert(candidate((\"\
    06-06-2005\")) == (true));\n    assert(candidate((\"21-31-2000\")) == (false));\n\
    \    assert(candidate((\"04-12-2003\")) == (true));\n    assert(candidate((\"\
    04122003\")) == (false));\n    assert(candidate((\"20030412\")) == (false));\n\
    \    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"2003-04-12\"\
    )) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n}\n"
  stdout: ''
  stderr: "tmpjlmwfg4f: /tmp/tmpjlmwfg4f.cpp:31: int main(): Assertion `candidate((\"\
    03-11-2000\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n    // Your code goes here\n    \n    // Write\
    \ your code here\n    \n    return true;\n}\nint main() {\n    auto candidate\
    \ = valid_date;\n    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"\
    15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n\
    \    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"\
    01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n\
    \    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\"\
    )) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"\
    21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n\
    \    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\"\
    )) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"\
    2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmp31k6f6ur: /tmp/tmp31k6f6ur.cpp:26: int main(): Assertion `candidate((\"\
    15-01-2012\")) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n    // Write your code here\n    \n    int day;\n\
    \    int month;\n    int year;\n    \n    bool valid = false;\n    \n    std::stringstream\
    \ ss(date);\n    \n    ss >> month >> day >> year;\n    \n    if (month < 1 ||\
    \ month > 12 || day < 1 || day > 31 || year < 1000 || year > 9999) {\n       \
    \ valid = false;\n    } else {\n        valid = true;\n    }\n    \n    return\
    \ valid;\n}\nint main() {\n    auto candidate = valid_date;\n    assert(candidate((\"\
    03-11-2000\")) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n\
    \    assert(candidate((\"04-0-2040\")) == (false));\n    assert(candidate((\"\
    06-04-2020\")) == (true));\n    assert(candidate((\"01-01-2007\")) == (true));\n\
    \    assert(candidate((\"03-32-2011\")) == (false));\n    assert(candidate((\"\
    \")) == (false));\n    assert(candidate((\"04-31-3000\")) == (false));\n    assert(candidate((\"\
    06-06-2005\")) == (true));\n    assert(candidate((\"21-31-2000\")) == (false));\n\
    \    assert(candidate((\"04-12-2003\")) == (true));\n    assert(candidate((\"\
    04122003\")) == (false));\n    assert(candidate((\"20030412\")) == (false));\n\
    \    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"2003-04-12\"\
    )) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n}\n"
  stdout: ''
  stderr: "tmpuhwam_jx: /tmp/tmpuhwam_jx.cpp:39: int main(): Assertion `candidate((\"\
    03-11-2000\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n    // Write your code here\n    int day;\n\
    \    int month;\n    int year;\n    std::stringstream ss(date);\n    ss >> month\
    \ >> day >> year;\n    \n    if(month < 1 || month > 12){\n        return false;\n\
    \    }\n    if(day < 1 || day > 31){\n        return false;\n    }\n    if(month\
    \ == 2){\n        if(day > 29){\n            return false;\n        }\n    }\n\
    \    if(month == 4 || month == 6 || month == 9 || month == 11){\n        if(day\
    \ > 30){\n            return false;\n        }\n    }\n    if(month == 1){\n \
    \       if(day > 31){\n            return false;\n        }\n    }\n    \n   \
    \ if(year < 2000 || year > 2040) {\n        return false;\n    }\n    \n    return\
    \ true;\n}\nint main() {\n    auto candidate = valid_date;\n    assert(candidate((\"\
    03-11-2000\")) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n\
    \    assert(candidate((\"04-0-2040\")) == (false));\n    assert(candidate((\"\
    06-04-2020\")) == (true));\n    assert(candidate((\"01-01-2007\")) == (true));\n\
    \    assert(candidate((\"03-32-2011\")) == (false));\n    assert(candidate((\"\
    \")) == (false));\n    assert(candidate((\"04-31-3000\")) == (false));\n    assert(candidate((\"\
    06-06-2005\")) == (true));\n    assert(candidate((\"21-31-2000\")) == (false));\n\
    \    assert(candidate((\"04-12-2003\")) == (true));\n    assert(candidate((\"\
    04122003\")) == (false));\n    assert(candidate((\"20030412\")) == (false));\n\
    \    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"2003-04-12\"\
    )) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n}\n"
  stdout: ''
  stderr: "tmp3ax2hdw9: /tmp/tmp3ax2hdw9.cpp:54: int main(): Assertion `candidate((\"\
    03-11-2000\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n    // Write your code here\n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n}\nint main() {\n    auto candidate = valid_date;\n\
    \    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"\
    15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n\
    \    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"\
    01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n\
    \    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\"\
    )) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"\
    21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n\
    \    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\"\
    )) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"\
    2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmpmx8cdls8: /tmp/tmpmx8cdls8.cpp:275: int main(): Assertion `candidate((\"\
    03-11-2000\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n    // Write your code here\n    \n    // Write\
    \ your code here\n    \n    // Write your code here\n    \n    // Write your code\
    \ here\n    \n    // Write your code here\n    \n    // Write your code here\n\
    \    \n    // Write your code here\n    \n    // Write your code here\n    \n\
    \    // Write your code here\n    \n    // Write your code here\n    \n    //\
    \ Write your code here\n    \n    // Write your code here\n    \n    // Write\
    \ your code here\n    \n    // Write your code here\n    \n    // Write your code\
    \ here\n    \n    // Write your code here\n    \n    // Write your code here\n\
    \    \n    // Write your code here\n    \n    // Write your code here\n    \n\
    \    // Write your code here\n    \n    // Write your code here\n    \n    //\
    \ Write your code here\n    \n    // Write your code here\n    \n    // Write\
    \ your code here\n    \n    // Write your code here\n    \n    // Write your code\
    \ here\n    \n    // Write your code here\n    \n    // Write your code here\n\
    \    \n    // Write your code here\n    \n    // Write your code here\n    \n\
    \    // Write your code here\n    \n    // Write your code here\n    \n    //\
    \ Write your code here\n    \n    // Write your code here\n    \n    // Write\
    \ your code here\n    \n    // Write your code here\n    \n    // Write your code\
    \ here\n    \n    // Write your code here\n    \n    // Write your code here\n\
    \    \n    // Write your code here\n    \n    // Write your code here\n    \n\
    \    // Write your code here\n    \n    // Write your code here\n    \n    //\
    \ Write your code here\n    \n    // Write your code here\n    \n    // Write\
    \ your code here\n    \n    // Write your code here\n    \n    // Write your code\
    \ here\n    \n    // Write your code here\n    \n    // Write your code here\n\
    \    \n    // Write your code here\n    \n    // Write your code here\n    \n\
    \    // Write your code here\n    \n    // Write your code here\n    \n    //\
    \ Write your code here\n    \n    // Write your code here\n    \n    // Write\
    \ your code here\n    \n    // Write your code here\n    \n    // Write your code\
    \ here\n    \n    // Write your code here\n    \n    // Write your code here\n\
    \    \n    // Write your code here\n    \n    // Write your code here\n    \n\
    \    // Write your code here\n    \n    // Write your code here\n    \n    //\
    \ Write your code here\n    \n    // Write your code here\n    \n    // Write\
    \ your code here\n    \n    // Write your code here\n    \n    // Write your code\
    \ here\n    \n    // Write your code here\n    \n    // Write your code here\n\
    \    \n    // Write your code here\n    \n    // \n}\nint main() {\n    auto candidate\
    \ = valid_date;\n    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"\
    15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n\
    \    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"\
    01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n\
    \    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\"\
    )) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"\
    21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n\
    \    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\"\
    )) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"\
    2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmp2ac08qlc: /tmp/tmp2ac08qlc.cpp:167: int main(): Assertion `candidate((\"\
    03-11-2000\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n    // Write your code here\n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n}\nint main() {\n    auto candidate = valid_date;\n\
    \    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"\
    15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n\
    \    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"\
    01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n\
    \    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\"\
    )) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"\
    21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n\
    \    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\"\
    )) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"\
    2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmp1nggqppw: /tmp/tmp1nggqppw.cpp:275: int main(): Assertion `candidate((\"\
    03-11-2000\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n    // Write your code here\n    bool valid\
    \ = true;\n    std::string months[12] = {\"01\", \"03\", \"05\", \"07\", \"08\"\
    , \"10\", \"12\", \"04\", \"06\", \"09\", \"11\", \"02\"};\n    std::string days[31]\
    \ = {\"01\", \"03\", \"05\", \"07\", \"08\", \"10\", \"12\", \"04\", \"06\", \"\
    09\", \"11\", \"02\", \"13\", \"15\", \"17\", \"18\", \"19\", \"20\", \"21\",\
    \ \"22\", \"23\", \"24\", \"25\", \"26\", \"27\", \"28\", \"29\", \"30\", \"31\"\
    };\n    std::string years[12] = {\"2000\", \"2001\", \"2002\", \"2003\", \"2004\"\
    , \"2005\", \"2006\", \"2007\", \"2008\", \"2009\", \"2010\", \"2011\", \"2012\"\
    , \"2013\", \"2014\", \"2015\", \"2016\", \"2017\", \"2018\", \"2019\", \"2020\"\
    , \"2021\", \"2022\", \"2023\", \"2024\", \"2025\", \"2026\", \"2027\", \"2028\"\
    , \"2029\", \"2030\", \"2031\"};\n    int month = 0;\n    int day = 0;\n    int\
    \ year = 0;\n    int i = 0;\n    int j = 0;\n    int k = 0;\n    int l = 0;\n\
    \    int m = 0;\n    int n = 0;\n    int o = 0;\n    int p = 0;\n    int q = 0;\n\
    \    int r = 0;\n    int s = 0;\n    int t = 0;\n    int u = 0;\n    int v = 0;\n\
    \    int w = 0;\n    int x = 0;\n    int y = 0;\n    int z = 0;\n    int A = 0;\n\
    \    int B = 0;\n    int C = 0;\n    int D = 0;\n    int E = 0;\n    int F = 0;\n\
    \    int G = 0;\n    int H = 0;\n    int I = 0;\n    int J = 0;\n    int K = 0;\n\
    \    int L = 0;\n    int M = 0;\n    int N = 0;\n    int O = 0;\n    int P = 0;\n\
    \    int Q = 0;\n    int R = 0;\n    int S = 0;\n    int T = 0;\n    int U = 0;\n\
    \    int V = 0;\n    int W = 0;\n    int X = 0;\n    int Y = 0;\n    int Z = 0;\n\
    \    int a = 0;\n    int b = 0;\n    int c = 0;\n    int d = 0;\n    int e = 0;\n\
    \    int f = 0;\n    int g = 0;\n    int h = 0;\n    int i = 0;\n    int j = 0;\n\
    \    int k = 0;\n    int l = 0;\n    int m = 0;\n    int n = 0;\n    int o = 0;\n\
    \    int p = 0;\n    int q = 0;\n    int r = 0;\n    int s = 0;\n    int t = 0;\n\
    \    int u = 0;\n    int v = 0;\n    int w = 0;\n    int x = 0;\n    int y = 0;\n\
    \    int z = 0;\n    int A = 0;\n    int B = 0;\n    int C = 0;\n    int D = 0;\n\
    \    int E = 0;\n    int F = 0;\n    int G = 0;\n    int H = 0;\n    int I = 0;\n\
    \    int \n}\nint main() {\n    auto candidate = valid_date;\n    assert(candidate((\"\
    03-11-2000\")) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n\
    \    assert(candidate((\"04-0-2040\")) == (false));\n    assert(candidate((\"\
    06-04-2020\")) == (true));\n    assert(candidate((\"01-01-2007\")) == (true));\n\
    \    assert(candidate((\"03-32-2011\")) == (false));\n    assert(candidate((\"\
    \")) == (false));\n    assert(candidate((\"04-31-3000\")) == (false));\n    assert(candidate((\"\
    06-06-2005\")) == (true));\n    assert(candidate((\"21-31-2000\")) == (false));\n\
    \    assert(candidate((\"04-12-2003\")) == (true));\n    assert(candidate((\"\
    04122003\")) == (false));\n    assert(candidate((\"20030412\")) == (false));\n\
    \    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"2003-04-12\"\
    )) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpv81tpfl2.cpp: In function \u2018bool valid_date(std::string)\u2019\
    :\n/tmp/tmpv81tpfl2.cpp:21:284: error: too many initializers for \u2018std::string\
    \ [12]\u2019 {aka \u2018std::__cxx11::basic_string<char> [12]\u2019}\n   21 |\
    \     std::string years[12] = {\"2000\", \"2001\", \"2002\", \"2003\", \"2004\"\
    , \"2005\", \"2006\", \"2007\", \"2008\", \"2009\", \"2010\", \"2011\", \"2012\"\
    , \"2013\", \"2014\", \"2015\", \"2016\", \"2017\", \"2018\", \"2019\", \"2020\"\
    , \"2021\", \"2022\", \"2023\", \"2024\", \"2025\", \"2026\", \"2027\", \"2028\"\
    , \"2029\", \"2030\", \"2031\"};\n      |                                    \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                    ^\n/tmp/tmpv81tpfl2.cpp:77:9: error: redeclaration of \u2018\
    int i\u2019\n   77 |     int i = 0;\n      |         ^\n/tmp/tmpv81tpfl2.cpp:25:9:\
    \ note: \u2018int i\u2019 previously declared here\n   25 |     int i = 0;\n \
    \     |         ^\n/tmp/tmpv81tpfl2.cpp:78:9: error: redeclaration of \u2018int\
    \ j\u2019\n   78 |     int j = 0;\n      |         ^\n/tmp/tmpv81tpfl2.cpp:26:9:\
    \ note: \u2018int j\u2019 previously declared here\n   26 |     int j = 0;\n \
    \     |         ^\n/tmp/tmpv81tpfl2.cpp:79:9: error: redeclaration of \u2018int\
    \ k\u2019\n   79 |     int k = 0;\n      |         ^\n/tmp/tmpv81tpfl2.cpp:27:9:\
    \ note: \u2018int k\u2019 previously declared here\n   27 |     int k = 0;\n \
    \     |         ^\n/tmp/tmpv81tpfl2.cpp:80:9: error: redeclaration of \u2018int\
    \ l\u2019\n   80 |     int l = 0;\n      |         ^\n/tmp/tmpv81tpfl2.cpp:28:9:\
    \ note: \u2018int l\u2019 previously declared here\n   28 |     int l = 0;\n \
    \     |         ^\n/tmp/tmpv81tpfl2.cpp:81:9: error: redeclaration of \u2018int\
    \ m\u2019\n   81 |     int m = 0;\n      |         ^\n/tmp/tmpv81tpfl2.cpp:29:9:\
    \ note: \u2018int m\u2019 previously declared here\n   29 |     int m = 0;\n \
    \     |         ^\n/tmp/tmpv81tpfl2.cpp:82:9: error: redeclaration of \u2018int\
    \ n\u2019\n   82 |     int n = 0;\n      |         ^\n/tmp/tmpv81tpfl2.cpp:30:9:\
    \ note: \u2018int n\u2019 previously declared here\n   30 |     int n = 0;\n \
    \     |         ^\n/tmp/tmpv81tpfl2.cpp:83:9: error: redeclaration of \u2018int\
    \ o\u2019\n   83 |     int o = 0;\n      |         ^\n/tmp/tmpv81tpfl2.cpp:31:9:\
    \ note: \u2018int o\u2019 previously declared here\n   31 |     int o = 0;\n \
    \     |         ^\n/tmp/tmpv81tpfl2.cpp:84:9: error: redeclaration of \u2018int\
    \ p\u2019\n   84 |     int p = 0;\n      |         ^\n/tmp/tmpv81tpfl2.cpp:32:9:\
    \ note: \u2018int p\u2019 previously declared here\n   32 |     int p = 0;\n \
    \     |         ^\n/tmp/tmpv81tpfl2.cpp:85:9: error: redeclaration of \u2018int\
    \ q\u2019\n   85 |     int q = 0;\n      |         ^\n/tmp/tmpv81tpfl2.cpp:33:9:\
    \ note: \u2018int q\u2019 previously declared here\n   33 |     int q = 0;\n \
    \     |         ^\n/tmp/tmpv81tpfl2.cpp:86:9: error: redeclaration of \u2018int\
    \ r\u2019\n   86 |     int r = 0;\n      |         ^\n/tmp/tmpv81tpfl2.cpp:34:9:\
    \ note: \u2018int r\u2019 previously declared here\n   34 |     int r = 0;\n \
    \     |         ^\n/tmp/tmpv81tpfl2.cpp:87:9: error: redeclaration of \u2018int\
    \ s\u2019\n   87 |     int s = 0;\n      |         ^\n/tmp/tmpv81tpfl2.cpp:35:9:\
    \ note: \u2018int s\u2019 previously declared here\n   35 |     int s = 0;\n \
    \     |         ^\n/tmp/tmpv81tpfl2.cpp:88:9: error: redeclaration of \u2018int\
    \ t\u2019\n   88 |     int t = 0;\n      |         ^\n/tmp/tmpv81tpfl2.cpp:36:9:\
    \ note: \u2018int t\u2019 previously declared here\n   36 |     int t = 0;\n \
    \     |         ^\n/tmp/tmpv81tpfl2.cpp:89:9: error: redeclaration of \u2018int\
    \ u\u2019\n   89 |     int u = 0;\n      |         ^\n/tmp/tmpv81tpfl2.cpp:37:9:\
    \ note: \u2018int u\u2019 previously declared here\n   37 |     int u = 0;\n \
    \     |         ^\n/tmp/tmpv81tpfl2.cpp:90:9: error: redeclaration of \u2018int\
    \ v\u2019\n   90 |     int v = 0;\n      |         ^\n/tmp/tmpv81tpfl2.cpp:38:9:\
    \ note: \u2018int v\u2019 previously declared here\n   38 |     int v = 0;\n \
    \     |         ^\n/tmp/tmpv81tpfl2.cpp:91:9: error: redeclaration of \u2018int\
    \ w\u2019\n   91 |     int w = 0;\n      |         ^\n/tmp/tmpv81tpfl2.cpp:39:9:\
    \ note: \u2018int w\u2019 previously declared here\n   39 |     int w = 0;\n \
    \     |         ^\n/tmp/tmpv81tpfl2.cpp:92:9: error: redeclaration of \u2018int\
    \ x\u2019\n   92 |     int x = 0;\n      |         ^\n/tmp/tmpv81tpfl2.cpp:40:9:\
    \ note: \u2018int x\u2019 previously declared here\n   40 |     int x = 0;\n \
    \     |         ^\n/tmp/tmpv81tpfl2.cpp:93:9: error: redeclaration of \u2018int\
    \ y\u2019\n   93 |     int y = 0;\n      |         ^\n/tmp/tmpv81tpfl2.cpp:41:9:\
    \ note: \u2018int y\u2019 previously declared here\n   41 |     int y = 0;\n \
    \     |         ^\n/tmp/tmpv81tpfl2.cpp:94:9: error: redeclaration of \u2018int\
    \ z\u2019\n   94 |     int z = 0;\n      |         ^\n/tmp/tmpv81tpfl2.cpp:42:9:\
    \ note: \u2018int z\u2019 previously declared here\n   42 |     int z = 0;\n \
    \     |         ^\n/tmp/tmpv81tpfl2.cpp:95:9: error: redeclaration of \u2018int\
    \ A\u2019\n   95 |     int A = 0;\n      |         ^\n/tmp/tmpv81tpfl2.cpp:43:9:\
    \ note: \u2018int A\u2019 previously declared here\n   43 |     int A = 0;\n \
    \     |         ^\n/tmp/tmpv81tpfl2.cpp:96:9: error: redeclaration of \u2018int\
    \ B\u2019\n   96 |     int B = 0;\n      |         ^\n/tmp/tmpv81tpfl2.cpp:44:9:\
    \ note: \u2018int B\u2019 previously declared here\n   44 |     int B = 0;\n \
    \     |         ^\n/tmp/tmpv81tpfl2.cpp:97:9: error: redeclaration of \u2018int\
    \ C\u2019\n   97 |     int C = 0;\n      |         ^\n/tmp/tmpv81tpfl2.cpp:45:9:\
    \ note: \u2018int C\u2019 previously declared here\n   45 |     int C = 0;\n \
    \     |         ^\n/tmp/tmpv81tpfl2.cpp:98:9: error: redeclaration of \u2018int\
    \ D\u2019\n   98 |     int D = 0;\n      |         ^\n/tmp/tmpv81tpfl2.cpp:46:9:\
    \ note: \u2018int D\u2019 previously declared here\n   46 |     int D = 0;\n \
    \     |         ^\n/tmp/tmpv81tpfl2.cpp:99:9: error: redeclaration of \u2018int\
    \ E\u2019\n   99 |     int E = 0;\n      |         ^\n/tmp/tmpv81tpfl2.cpp:47:9:\
    \ note: \u2018int E\u2019 previously declared here\n   47 |     int E = 0;\n \
    \     |         ^\n/tmp/tmpv81tpfl2.cpp:100:9: error: redeclaration of \u2018\
    int F\u2019\n  100 |     int F = 0;\n      |         ^\n/tmp/tmpv81tpfl2.cpp:48:9:\
    \ note: \u2018int F\u2019 previously declared here\n   48 |     int F = 0;\n \
    \     |         ^\n/tmp/tmpv81tpfl2.cpp:101:9: error: redeclaration of \u2018\
    int G\u2019\n  101 |     int G = 0;\n      |         ^\n/tmp/tmpv81tpfl2.cpp:49:9:\
    \ note: \u2018int G\u2019 previously declared here\n   49 |     int G = 0;\n \
    \     |         ^\n/tmp/tmpv81tpfl2.cpp:102:9: error: redeclaration of \u2018\
    int H\u2019\n  102 |     int H = 0;\n      |         ^\n/tmp/tmpv81tpfl2.cpp:50:9:\
    \ note: \u2018int H\u2019 previously declared here\n   50 |     int H = 0;\n \
    \     |         ^\n/tmp/tmpv81tpfl2.cpp:103:9: error: redeclaration of \u2018\
    int I\u2019\n  103 |     int I = 0;\n      |         ^\n/tmp/tmpv81tpfl2.cpp:51:9:\
    \ note: \u2018int I\u2019 previously declared here\n   51 |     int I = 0;\n \
    \     |         ^\n/tmp/tmpv81tpfl2.cpp:105:1: error: expected unqualified-id\
    \ before \u2018}\u2019 token\n  105 | }\n      | ^\n/tmp/tmpv81tpfl2.cpp:105:1:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n    // Write your code here\n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n}\nint main() {\n    auto candidate = valid_date;\n\
    \    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"\
    15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n\
    \    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"\
    01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n\
    \    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\"\
    )) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"\
    21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n\
    \    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\"\
    )) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"\
    2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmpkvlck8xf: /tmp/tmpkvlck8xf.cpp:275: int main(): Assertion `candidate((\"\
    03-11-2000\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n    // Write your code here\n    int day;\n\
    \    int month;\n    int year;\n    std::stringstream ss;\n    ss << date;\n \
    \   ss >> day >> month >> year;\n    if (day < 1 || day > 31) {\n        return\
    \ false;\n    }\n    if (month < 1 || month > 12) {\n        return false;\n \
    \   }\n    if (year < 1 || year > 9999) {\n        return false;\n    }\n    return\
    \ true;\n}\nint main() {\n    auto candidate = valid_date;\n    assert(candidate((\"\
    03-11-2000\")) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n\
    \    assert(candidate((\"04-0-2040\")) == (false));\n    assert(candidate((\"\
    06-04-2020\")) == (true));\n    assert(candidate((\"01-01-2007\")) == (true));\n\
    \    assert(candidate((\"03-32-2011\")) == (false));\n    assert(candidate((\"\
    \")) == (false));\n    assert(candidate((\"04-31-3000\")) == (false));\n    assert(candidate((\"\
    06-06-2005\")) == (true));\n    assert(candidate((\"21-31-2000\")) == (false));\n\
    \    assert(candidate((\"04-12-2003\")) == (true));\n    assert(candidate((\"\
    04122003\")) == (false));\n    assert(candidate((\"20030412\")) == (false));\n\
    \    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"2003-04-12\"\
    )) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n}\n"
  stdout: ''
  stderr: "tmpbmy77upg: /tmp/tmpbmy77upg.cpp:37: int main(): Assertion `candidate((\"\
    03-11-2000\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n    // Your code goes here\n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n\n}\nint main() {\n    auto candidate = valid_date;\n\
    \    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"\
    15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n\
    \    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"\
    01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n\
    \    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\"\
    )) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"\
    21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n\
    \    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\"\
    )) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"\
    2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmplpwrbvog: /tmp/tmplpwrbvog.cpp:275: int main(): Assertion `candidate((\"\
    03-11-2000\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n    // Write your code here\n    int day;\n\
    \    int month;\n    int year;\n    std::stringstream ss;\n    ss << date;\n \
    \   ss >> day >> month >> year;\n    \n    if (day < 1 || day > 31) {\n      \
    \  return false;\n    }\n    if (month < 1 || month > 12) {\n        return false;\n\
    \    }\n    if (year < 1000 || year > 9999) {\n        return false;\n    }\n\
    \    \n    return true;\n}\nint main() {\n    auto candidate = valid_date;\n \
    \   assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"15-01-2012\"\
    )) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n    assert(candidate((\"\
    06-04-2020\")) == (true));\n    assert(candidate((\"01-01-2007\")) == (true));\n\
    \    assert(candidate((\"03-32-2011\")) == (false));\n    assert(candidate((\"\
    \")) == (false));\n    assert(candidate((\"04-31-3000\")) == (false));\n    assert(candidate((\"\
    06-06-2005\")) == (true));\n    assert(candidate((\"21-31-2000\")) == (false));\n\
    \    assert(candidate((\"04-12-2003\")) == (true));\n    assert(candidate((\"\
    04122003\")) == (false));\n    assert(candidate((\"20030412\")) == (false));\n\
    \    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"2003-04-12\"\
    )) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n}\n"
  stdout: ''
  stderr: "tmp4tqhi260: /tmp/tmp4tqhi260.cpp:39: int main(): Assertion `candidate((\"\
    03-11-2000\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n    // Write your code here\n    bool valid\
    \ = true;\n    std::string months[12] = {\n        \"January\", \"February\",\
    \ \"March\", \"April\", \"May\", \"June\",\n        \"July\", \"August\", \"September\"\
    , \"October\", \"November\", \"December\"\n    };\n    int days[12] = {\n    \
    \    31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31\n    };\n    int months[12]\
    \ = {\n        0, 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31\n    };\n   \
    \ int days_months[12] = {\n        0, 31, 28, 31, 30, 31, 30, 31, 31, 30, 31,\
    \ 30, 31\n    };\n    int days_months_leap[13] = {\n        0, 31, 29, 31, 30,\
    \ 31, 30, 31, 31, 30, 31, 30, 31, 30\n    };\n    int days_months_leap[13] = {\n\
    \        0, 31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31, 30\n    };\n    int\
    \ days_months_leap[13] = {\n        0, 31, 29, 31, 30, 31, 30, 31, 31, 30, 31,\
    \ 30, 31, 30\n    };\n    int days_months_leap[13] = {\n        0, 31, 29, 31,\
    \ 30, 31, 30, 31, 31, 30, 31, 30, 31, 30\n    };\n    int days_months_leap[13]\
    \ = {\n        0, 31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31, 30\n    };\n\
    \    int days_months_leap[13] = {\n        0, 31, 29, 31, 30, 31, 30, 31, 31,\
    \ 30, 31, 30, 31, 30\n    };\n    int days_months_leap[13] = {\n        0, 31,\
    \ 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31, 30\n    };\n    int days_months_leap[13]\
    \ = {\n        0, 31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31, 30\n    };\n\
    \    int days_months_leap[13] = {\n        0, 31, 29, 31, 30, 31, 30, 31, 31,\
    \ 30, 31, 30, 31, 30\n    };\n    int days_months_leap[13] = {\n        0, 31,\
    \ 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31, 30\n    };\n    int days_months_leap[13]\
    \ = {\n        0, 31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31, 30\n    };\n\
    \    int days_months_leap[13] = {\n        0, 31, 29, 31, 30, 31, 30, 31, 31,\
    \ 30, 31, 30, 31, 30\n    };\n    int days_months_leap[13] = {\n        0, 31,\
    \ 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31, 30\n    };\n    int days_months_leap[13]\
    \ = {\n        0, 31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31, 30\n    };\n\
    \    int days_months_leap[13] = {\n        0, 31, 29, 31, 30, 31, 30, 31, 31,\
    \ 30, 31, 30, 31, 30\n    };\n    int days_months_leap[13] = {\n        0, 31,\
    \ 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31, 30\n    };\n    int days_months_leap[13]\
    \ = {\n        0, 31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31, \n}\nint main()\
    \ {\n    auto candidate = valid_date;\n    assert(candidate((\"03-11-2000\"))\
    \ == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"\
    04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n\
    \    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"\
    03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"\
    04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n\
    \    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"\
    04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n\
    \    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\"\
    )) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"\
    04-2003\")) == (false));\n}\n"
  stdout: ''
  stderr: "/tmp/tmptj_yr4j2.cpp: In function \u2018bool valid_date(std::string)\u2019\
    :\n/tmp/tmptj_yr4j2.cpp:26:9: error: conflicting declaration \u2018int months\
    \ [12]\u2019\n   26 |     int months[12] = {\n      |         ^~~~~~\n/tmp/tmptj_yr4j2.cpp:19:17:\
    \ note: previous declaration as \u2018std::string months [12]\u2019\n   19 | \
    \    std::string months[12] = {\n      |                 ^~~~~~\n/tmp/tmptj_yr4j2.cpp:31:5:\
    \ error: too many initializers for \u2018int [12]\u2019\n   31 |     };\n    \
    \  |     ^\n/tmp/tmptj_yr4j2.cpp:34:5: error: too many initializers for \u2018\
    int [13]\u2019\n   34 |     };\n      |     ^\n/tmp/tmptj_yr4j2.cpp:35:9: error:\
    \ redeclaration of \u2018int days_months_leap [13]\u2019\n   35 |     int days_months_leap[13]\
    \ = {\n      |         ^~~~~~~~~~~~~~~~\n/tmp/tmptj_yr4j2.cpp:32:9: note: \u2018\
    int days_months_leap [13]\u2019 previously declared here\n   32 |     int days_months_leap[13]\
    \ = {\n      |         ^~~~~~~~~~~~~~~~\n/tmp/tmptj_yr4j2.cpp:38:9: error: redeclaration\
    \ of \u2018int days_months_leap [13]\u2019\n   38 |     int days_months_leap[13]\
    \ = {\n      |         ^~~~~~~~~~~~~~~~\n/tmp/tmptj_yr4j2.cpp:32:9: note: \u2018\
    int days_months_leap [13]\u2019 previously declared here\n   32 |     int days_months_leap[13]\
    \ = {\n      |         ^~~~~~~~~~~~~~~~\n/tmp/tmptj_yr4j2.cpp:41:9: error: redeclaration\
    \ of \u2018int days_months_leap [13]\u2019\n   41 |     int days_months_leap[13]\
    \ = {\n      |         ^~~~~~~~~~~~~~~~\n/tmp/tmptj_yr4j2.cpp:32:9: note: \u2018\
    int days_months_leap [13]\u2019 previously declared here\n   32 |     int days_months_leap[13]\
    \ = {\n      |         ^~~~~~~~~~~~~~~~\n/tmp/tmptj_yr4j2.cpp:44:9: error: redeclaration\
    \ of \u2018int days_months_leap [13]\u2019\n   44 |     int days_months_leap[13]\
    \ = {\n      |         ^~~~~~~~~~~~~~~~\n/tmp/tmptj_yr4j2.cpp:32:9: note: \u2018\
    int days_months_leap [13]\u2019 previously declared here\n   32 |     int days_months_leap[13]\
    \ = {\n      |         ^~~~~~~~~~~~~~~~\n/tmp/tmptj_yr4j2.cpp:47:9: error: redeclaration\
    \ of \u2018int days_months_leap [13]\u2019\n   47 |     int days_months_leap[13]\
    \ = {\n      |         ^~~~~~~~~~~~~~~~\n/tmp/tmptj_yr4j2.cpp:32:9: note: \u2018\
    int days_months_leap [13]\u2019 previously declared here\n   32 |     int days_months_leap[13]\
    \ = {\n      |         ^~~~~~~~~~~~~~~~\n/tmp/tmptj_yr4j2.cpp:50:9: error: redeclaration\
    \ of \u2018int days_months_leap [13]\u2019\n   50 |     int days_months_leap[13]\
    \ = {\n      |         ^~~~~~~~~~~~~~~~\n/tmp/tmptj_yr4j2.cpp:32:9: note: \u2018\
    int days_months_leap [13]\u2019 previously declared here\n   32 |     int days_months_leap[13]\
    \ = {\n      |         ^~~~~~~~~~~~~~~~\n/tmp/tmptj_yr4j2.cpp:53:9: error: redeclaration\
    \ of \u2018int days_months_leap [13]\u2019\n   53 |     int days_months_leap[13]\
    \ = {\n      |         ^~~~~~~~~~~~~~~~\n/tmp/tmptj_yr4j2.cpp:32:9: note: \u2018\
    int days_months_leap [13]\u2019 previously declared here\n   32 |     int days_months_leap[13]\
    \ = {\n      |         ^~~~~~~~~~~~~~~~\n/tmp/tmptj_yr4j2.cpp:56:9: error: redeclaration\
    \ of \u2018int days_months_leap [13]\u2019\n   56 |     int days_months_leap[13]\
    \ = {\n      |         ^~~~~~~~~~~~~~~~\n/tmp/tmptj_yr4j2.cpp:32:9: note: \u2018\
    int days_months_leap [13]\u2019 previously declared here\n   32 |     int days_months_leap[13]\
    \ = {\n      |         ^~~~~~~~~~~~~~~~\n/tmp/tmptj_yr4j2.cpp:59:9: error: redeclaration\
    \ of \u2018int days_months_leap [13]\u2019\n   59 |     int days_months_leap[13]\
    \ = {\n      |         ^~~~~~~~~~~~~~~~\n/tmp/tmptj_yr4j2.cpp:32:9: note: \u2018\
    int days_months_leap [13]\u2019 previously declared here\n   32 |     int days_months_leap[13]\
    \ = {\n      |         ^~~~~~~~~~~~~~~~\n/tmp/tmptj_yr4j2.cpp:62:9: error: redeclaration\
    \ of \u2018int days_months_leap [13]\u2019\n   62 |     int days_months_leap[13]\
    \ = {\n      |         ^~~~~~~~~~~~~~~~\n/tmp/tmptj_yr4j2.cpp:32:9: note: \u2018\
    int days_months_leap [13]\u2019 previously declared here\n   32 |     int days_months_leap[13]\
    \ = {\n      |         ^~~~~~~~~~~~~~~~\n/tmp/tmptj_yr4j2.cpp:65:9: error: redeclaration\
    \ of \u2018int days_months_leap [13]\u2019\n   65 |     int days_months_leap[13]\
    \ = {\n      |         ^~~~~~~~~~~~~~~~\n/tmp/tmptj_yr4j2.cpp:32:9: note: \u2018\
    int days_months_leap [13]\u2019 previously declared here\n   32 |     int days_months_leap[13]\
    \ = {\n      |         ^~~~~~~~~~~~~~~~\n/tmp/tmptj_yr4j2.cpp:68:9: error: redeclaration\
    \ of \u2018int days_months_leap [13]\u2019\n   68 |     int days_months_leap[13]\
    \ = {\n      |         ^~~~~~~~~~~~~~~~\n/tmp/tmptj_yr4j2.cpp:32:9: note: \u2018\
    int days_months_leap [13]\u2019 previously declared here\n   32 |     int days_months_leap[13]\
    \ = {\n      |         ^~~~~~~~~~~~~~~~\n/tmp/tmptj_yr4j2.cpp:71:9: error: redeclaration\
    \ of \u2018int days_months_leap [13]\u2019\n   71 |     int days_months_leap[13]\
    \ = {\n      |         ^~~~~~~~~~~~~~~~\n/tmp/tmptj_yr4j2.cpp:32:9: note: \u2018\
    int days_months_leap [13]\u2019 previously declared here\n   32 |     int days_months_leap[13]\
    \ = {\n      |         ^~~~~~~~~~~~~~~~\n/tmp/tmptj_yr4j2.cpp:74:9: error: redeclaration\
    \ of \u2018int days_months_leap [13]\u2019\n   74 |     int days_months_leap[13]\
    \ = {\n      |         ^~~~~~~~~~~~~~~~\n/tmp/tmptj_yr4j2.cpp:32:9: note: \u2018\
    int days_months_leap [13]\u2019 previously declared here\n   32 |     int days_months_leap[13]\
    \ = {\n      |         ^~~~~~~~~~~~~~~~\n/tmp/tmptj_yr4j2.cpp:77:9: error: redeclaration\
    \ of \u2018int days_months_leap [13]\u2019\n   77 |     int days_months_leap[13]\
    \ = {\n      |         ^~~~~~~~~~~~~~~~\n/tmp/tmptj_yr4j2.cpp:32:9: note: \u2018\
    int days_months_leap [13]\u2019 previously declared here\n   32 |     int days_months_leap[13]\
    \ = {\n      |         ^~~~~~~~~~~~~~~~\n/tmp/tmptj_yr4j2.cpp:80:9: error: redeclaration\
    \ of \u2018int days_months_leap [13]\u2019\n   80 |     int days_months_leap[13]\
    \ = {\n      |         ^~~~~~~~~~~~~~~~\n/tmp/tmptj_yr4j2.cpp:32:9: note: \u2018\
    int days_months_leap [13]\u2019 previously declared here\n   32 |     int days_months_leap[13]\
    \ = {\n      |         ^~~~~~~~~~~~~~~~\n/tmp/tmptj_yr4j2.cpp:101:1: error: expected\
    \ \u2018}\u2019 at end of input\n  101 | }\n      | ^\n/tmp/tmptj_yr4j2.cpp:16:35:\
    \ note: to match this \u2018{\u2019\n   16 | bool valid_date(std::string date)\
    \ {\n      |                                   ^\n/tmp/tmptj_yr4j2.cpp:101:1:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n\
    \  101 | }\n      | ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n    // Write your code here\n    int day;\n\
    \    int month;\n    int year;\n    std::string months[12] = {\"January\", \"\
    February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"\
    September\", \"October\", \"November\", \"December\"};\n    std::string days[31]\
    \ = {\"31\", \"30\", \"29\"};\n    std::string months[12] = {\"January\", \"February\"\
    , \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\"\
    , \"October\", \"November\", \"December\"};\n    std::string days[31] = {\"31\"\
    , \"30\", \"29\"};\n    std::string months[12] = {\"January\", \"February\", \"\
    March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"\
    October\", \"November\", \"December\"};\n    std::string days[31] = {\"31\", \"\
    30\", \"29\"};\n    std::string months[12] = {\"January\", \"February\", \"March\"\
    , \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\"\
    , \"November\", \"December\"};\n    std::string days[31] = {\"31\", \"30\", \"\
    29\"};\n    std::string months[12] = {\"January\", \"February\", \"March\", \"\
    April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\",\
    \ \"November\", \"December\"};\n    std::string days[31] = {\"31\", \"30\", \"\
    29\"};\n    std::string months[12] = {\"January\", \"February\", \"March\", \"\
    April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\",\
    \ \"November\", \"December\"};\n    std::string days[31] = {\"31\", \"30\", \"\
    29\"};\n    std::string months[12] = {\"January\", \"February\", \"March\", \"\
    April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\",\
    \ \"November\", \"December\"};\n    std::string days[31] = {\"31\", \"30\", \"\
    29\"};\n    std::string months[12] = {\"January\", \"February\", \"March\", \"\
    April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\",\
    \ \"November\", \"December\"};\n    std::string days[31] = {\"31\", \"30\", \"\
    29\"};\n    std::string months[12] = {\"January\", \"February\", \"March\", \"\
    April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\",\
    \ \"November\", \"December\"};\n    std::string days[31] = {\"31\", \"30\", \"\
    29\"};\n    std::string months[12] = {\"January\", \"February\", \"March\", \"\
    April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\",\
    \ \"November\", \"December\"};\n    std::string days[31] = {\"31\", \"30\", \"\
    29\"};\n    std::string months[12] = {\"January\", \"February\", \"March\", \"\
    April\", \"\n}\nint main() {\n    auto candidate = valid_date;\n    assert(candidate((\"\
    03-11-2000\")) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n\
    \    assert(candidate((\"04-0-2040\")) == (false));\n    assert(candidate((\"\
    06-04-2020\")) == (true));\n    assert(candidate((\"01-01-2007\")) == (true));\n\
    \    assert(candidate((\"03-32-2011\")) == (false));\n    assert(candidate((\"\
    \")) == (false));\n    assert(candidate((\"04-31-3000\")) == (false));\n    assert(candidate((\"\
    06-06-2005\")) == (true));\n    assert(candidate((\"21-31-2000\")) == (false));\n\
    \    assert(candidate((\"04-12-2003\")) == (true));\n    assert(candidate((\"\
    04122003\")) == (false));\n    assert(candidate((\"20030412\")) == (false));\n\
    \    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"2003-04-12\"\
    )) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpo57sj7h5.cpp:41:72: warning: missing terminating \" character\n\
    \   41 |     std::string months[12] = {\"January\", \"February\", \"March\", \"\
    April\", \"\n      |                                                         \
    \               ^\n/tmp/tmpo57sj7h5.cpp:41:72: error: missing terminating \" character\n\
    /tmp/tmpo57sj7h5.cpp: In function \u2018bool valid_date(std::string)\u2019:\n\
    /tmp/tmpo57sj7h5.cpp:23:17: error: redeclaration of \u2018std::string months [12]\u2019\
    \n   23 |     std::string months[12] = {\"January\", \"February\", \"March\",\
    \ \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\"\
    , \"November\", \"December\"};\n      |                 ^~~~~~\n/tmp/tmpo57sj7h5.cpp:21:17:\
    \ note: \u2018std::string months [12]\u2019 previously declared here\n   21 |\
    \     std::string months[12] = {\"January\", \"February\", \"March\", \"April\"\
    , \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\"\
    , \"December\"};\n      |                 ^~~~~~\n/tmp/tmpo57sj7h5.cpp:24:17:\
    \ error: redeclaration of \u2018std::string days [31]\u2019\n   24 |     std::string\
    \ days[31] = {\"31\", \"30\", \"29\"};\n      |                 ^~~~\n/tmp/tmpo57sj7h5.cpp:22:17:\
    \ note: \u2018std::string days [31]\u2019 previously declared here\n   22 |  \
    \   std::string days[31] = {\"31\", \"30\", \"29\"};\n      |                \
    \ ^~~~\n/tmp/tmpo57sj7h5.cpp:25:17: error: redeclaration of \u2018std::string\
    \ months [12]\u2019\n   25 |     std::string months[12] = {\"January\", \"February\"\
    , \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\"\
    , \"October\", \"November\", \"December\"};\n      |                 ^~~~~~\n\
    /tmp/tmpo57sj7h5.cpp:21:17: note: \u2018std::string months [12]\u2019 previously\
    \ declared here\n   21 |     std::string months[12] = {\"January\", \"February\"\
    , \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\"\
    , \"October\", \"November\", \"December\"};\n      |                 ^~~~~~\n\
    /tmp/tmpo57sj7h5.cpp:26:17: error: redeclaration of \u2018std::string days [31]\u2019\
    \n   26 |     std::string days[31] = {\"31\", \"30\", \"29\"};\n      |      \
    \           ^~~~\n/tmp/tmpo57sj7h5.cpp:22:17: note: \u2018std::string days [31]\u2019\
    \ previously declared here\n   22 |     std::string days[31] = {\"31\", \"30\"\
    , \"29\"};\n      |                 ^~~~\n/tmp/tmpo57sj7h5.cpp:27:17: error: redeclaration\
    \ of \u2018std::string months [12]\u2019\n   27 |     std::string months[12] =\
    \ {\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\"\
    , \"August\", \"September\", \"October\", \"November\", \"December\"};\n     \
    \ |                 ^~~~~~\n/tmp/tmpo57sj7h5.cpp:21:17: note: \u2018std::string\
    \ months [12]\u2019 previously declared here\n   21 |     std::string months[12]\
    \ = {\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\"\
    , \"August\", \"September\", \"October\", \"November\", \"December\"};\n     \
    \ |                 ^~~~~~\n/tmp/tmpo57sj7h5.cpp:28:17: error: redeclaration of\
    \ \u2018std::string days [31]\u2019\n   28 |     std::string days[31] = {\"31\"\
    , \"30\", \"29\"};\n      |                 ^~~~\n/tmp/tmpo57sj7h5.cpp:22:17:\
    \ note: \u2018std::string days [31]\u2019 previously declared here\n   22 |  \
    \   std::string days[31] = {\"31\", \"30\", \"29\"};\n      |                \
    \ ^~~~\n/tmp/tmpo57sj7h5.cpp:29:17: error: redeclaration of \u2018std::string\
    \ months [12]\u2019\n   29 |     std::string months[12] = {\"January\", \"February\"\
    , \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\"\
    , \"October\", \"November\", \"December\"};\n      |                 ^~~~~~\n\
    /tmp/tmpo57sj7h5.cpp:21:17: note: \u2018std::string months [12]\u2019 previously\
    \ declared here\n   21 |     std::string months[12] = {\"January\", \"February\"\
    , \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\"\
    , \"October\", \"November\", \"December\"};\n      |                 ^~~~~~\n\
    /tmp/tmpo57sj7h5.cpp:30:17: error: redeclaration of \u2018std::string days [31]\u2019\
    \n   30 |     std::string days[31] = {\"31\", \"30\", \"29\"};\n      |      \
    \           ^~~~\n/tmp/tmpo57sj7h5.cpp:22:17: note: \u2018std::string days [31]\u2019\
    \ previously declared here\n   22 |     std::string days[31] = {\"31\", \"30\"\
    , \"29\"};\n      |                 ^~~~\n/tmp/tmpo57sj7h5.cpp:31:17: error: redeclaration\
    \ of \u2018std::string months [12]\u2019\n   31 |     std::string months[12] =\
    \ {\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\"\
    , \"August\", \"September\", \"October\", \"November\", \"December\"};\n     \
    \ |                 ^~~~~~\n/tmp/tmpo57sj7h5.cpp:21:17: note: \u2018std::string\
    \ months [12]\u2019 previously declared here\n   21 |     std::string months[12]\
    \ = {\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\"\
    , \"August\", \"September\", \"October\", \"November\", \"December\"};\n     \
    \ |                 ^~~~~~\n/tmp/tmpo57sj7h5.cpp:32:17: error: redeclaration of\
    \ \u2018std::string days [31]\u2019\n   32 |     std::string days[31] = {\"31\"\
    , \"30\", \"29\"};\n      |                 ^~~~\n/tmp/tmpo57sj7h5.cpp:22:17:\
    \ note: \u2018std::string days [31]\u2019 previously declared here\n   22 |  \
    \   std::string days[31] = {\"31\", \"30\", \"29\"};\n      |                \
    \ ^~~~\n/tmp/tmpo57sj7h5.cpp:33:17: error: redeclaration of \u2018std::string\
    \ months [12]\u2019\n   33 |     std::string months[12] = {\"January\", \"February\"\
    , \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\"\
    , \"October\", \"November\", \"December\"};\n      |                 ^~~~~~\n\
    /tmp/tmpo57sj7h5.cpp:21:17: note: \u2018std::string months [12]\u2019 previously\
    \ declared here\n   21 |     std::string months[12] = {\"January\", \"February\"\
    , \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\"\
    , \"October\", \"November\", \"December\"};\n      |                 ^~~~~~\n\
    /tmp/tmpo57sj7h5.cpp:34:17: error: redeclaration of \u2018std::string days [31]\u2019\
    \n   34 |     std::string days[31] = {\"31\", \"30\", \"29\"};\n      |      \
    \           ^~~~\n/tmp/tmpo57sj7h5.cpp:22:17: note: \u2018std::string days [31]\u2019\
    \ previously declared here\n   22 |     std::string days[31] = {\"31\", \"30\"\
    , \"29\"};\n      |                 ^~~~\n/tmp/tmpo57sj7h5.cpp:35:17: error: redeclaration\
    \ of \u2018std::string months [12]\u2019\n   35 |     std::string months[12] =\
    \ {\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\"\
    , \"August\", \"September\", \"October\", \"November\", \"December\"};\n     \
    \ |                 ^~~~~~\n/tmp/tmpo57sj7h5.cpp:21:17: note: \u2018std::string\
    \ months [12]\u2019 previously declared here\n   21 |     std::string months[12]\
    \ = {\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\"\
    , \"August\", \"September\", \"October\", \"November\", \"December\"};\n     \
    \ |                 ^~~~~~\n/tmp/tmpo57sj7h5.cpp:36:17: error: redeclaration of\
    \ \u2018std::string days [31]\u2019\n   36 |     std::string days[31] = {\"31\"\
    , \"30\", \"29\"};\n      |                 ^~~~\n/tmp/tmpo57sj7h5.cpp:22:17:\
    \ note: \u2018std::string days [31]\u2019 previously declared here\n   22 |  \
    \   std::string days[31] = {\"31\", \"30\", \"29\"};\n      |                \
    \ ^~~~\n/tmp/tmpo57sj7h5.cpp:37:17: error: redeclaration of \u2018std::string\
    \ months [12]\u2019\n   37 |     std::string months[12] = {\"January\", \"February\"\
    , \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\"\
    , \"October\", \"November\", \"December\"};\n      |                 ^~~~~~\n\
    /tmp/tmpo57sj7h5.cpp:21:17: note: \u2018std::string months [12]\u2019 previously\
    \ declared here\n   21 |     std::string months[12] = {\"January\", \"February\"\
    , \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\"\
    , \"October\", \"November\", \"December\"};\n      |                 ^~~~~~\n\
    /tmp/tmpo57sj7h5.cpp:38:17: error: redeclaration of \u2018std::string days [31]\u2019\
    \n   38 |     std::string days[31] = {\"31\", \"30\", \"29\"};\n      |      \
    \           ^~~~\n/tmp/tmpo57sj7h5.cpp:22:17: note: \u2018std::string days [31]\u2019\
    \ previously declared here\n   22 |     std::string days[31] = {\"31\", \"30\"\
    , \"29\"};\n      |                 ^~~~\n/tmp/tmpo57sj7h5.cpp:39:17: error: redeclaration\
    \ of \u2018std::string months [12]\u2019\n   39 |     std::string months[12] =\
    \ {\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\"\
    , \"August\", \"September\", \"October\", \"November\", \"December\"};\n     \
    \ |                 ^~~~~~\n/tmp/tmpo57sj7h5.cpp:21:17: note: \u2018std::string\
    \ months [12]\u2019 previously declared here\n   21 |     std::string months[12]\
    \ = {\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\"\
    , \"August\", \"September\", \"October\", \"November\", \"December\"};\n     \
    \ |                 ^~~~~~\n/tmp/tmpo57sj7h5.cpp:40:17: error: redeclaration of\
    \ \u2018std::string days [31]\u2019\n   40 |     std::string days[31] = {\"31\"\
    , \"30\", \"29\"};\n      |                 ^~~~\n/tmp/tmpo57sj7h5.cpp:22:17:\
    \ note: \u2018std::string days [31]\u2019 previously declared here\n   22 |  \
    \   std::string days[31] = {\"31\", \"30\", \"29\"};\n      |                \
    \ ^~~~\n/tmp/tmpo57sj7h5.cpp:41:17: error: redeclaration of \u2018std::string\
    \ months [12]\u2019\n   41 |     std::string months[12] = {\"January\", \"February\"\
    , \"March\", \"April\", \"\n      |                 ^~~~~~\n/tmp/tmpo57sj7h5.cpp:21:17:\
    \ note: \u2018std::string months [12]\u2019 previously declared here\n   21 |\
    \     std::string months[12] = {\"January\", \"February\", \"March\", \"April\"\
    , \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\"\
    , \"December\"};\n      |                 ^~~~~~\n/tmp/tmpo57sj7h5.cpp:61:1: error:\
    \ expected \u2018}\u2019 at end of input\n   61 | }\n      | ^\n/tmp/tmpo57sj7h5.cpp:16:35:\
    \ note: to match this \u2018{\u2019\n   16 | bool valid_date(std::string date)\
    \ {\n      |                                   ^\n/tmp/tmpo57sj7h5.cpp:61:1: warning:\
    \ no return statement in function returning non-void [-Wreturn-type]\n   61 |\
    \ }\n      | ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n    // Write your code here\n    \n    // Write\
    \ your code here\n    \n    // Write your code here\n    \n    // Write your code\
    \ here\n    \n    // Write your code here\n    \n    // Write your code here\n\
    \    \n    // Write your code here\n    \n    // Write your code here\n    \n\
    \    // Write your code here\n    \n    // Write your code here\n    \n    //\
    \ Write your code here\n    \n    // Write your code here\n    \n    // Write\
    \ your code here\n    \n    // Write your code here\n    \n    // Write your code\
    \ here\n    \n    // Write your code here\n    \n    // Write your code here\n\
    \    \n    // Write your code here\n    \n    // Write your code here\n    \n\
    \    // Write your code here\n    \n    // Write your code here\n    \n    //\
    \ Write your code here\n    \n    // Write your code here\n    \n    // Write\
    \ your code here\n    \n    // Write your code here\n    \n    // Write your code\
    \ here\n    \n    // Write your code here\n    \n    // Write your code here\n\
    \    \n    // Write your code here\n    \n    // Write your code here\n    \n\
    \    // Write your code here\n    \n    // Write your code here\n    \n    //\
    \ Write your code here\n    \n    // Write your code here\n    \n    // Write\
    \ your code here\n    \n    // Write your code here\n    \n    // Write your code\
    \ here\n    \n    // Write your code here\n    \n    // Write your code here\n\
    \    \n    // Write your code here\n    \n    // Write your code here\n    \n\
    \    // Write your code here\n    \n    // Write your code here\n    \n    //\
    \ Write your code here\n    \n    // Write your code here\n    \n    // Write\
    \ your code here\n    \n    // Write your code here\n    \n    // Write your code\
    \ here\n    \n    // Write your code here\n    \n    // Write your code here\n\
    \    \n    // Write your code here\n    \n    // Write your code here\n    \n\
    \    // Write your code here\n    \n    // Write your code here\n    \n    //\
    \ Write your code here\n    \n    // Write your code here\n    \n    // Write\
    \ your code here\n    \n    // Write your code here\n    \n    // Write your code\
    \ here\n    \n    // Write your code here\n    \n    // Write your code here\n\
    \    \n    // Write your code here\n    \n    // Write your code here\n    \n\
    \    // Write your code here\n    \n    // Write your code here\n    \n    //\
    \ Write your code here\n    \n    // Write your code here\n    \n    // Write\
    \ your code here\n    \n    // Write your code here\n    \n    // Write your code\
    \ here\n    \n    // Write your code here\n    \n    // Write your code here\n\
    \    \n    // Write your code here\n    \n    // \n}\nint main() {\n    auto candidate\
    \ = valid_date;\n    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"\
    15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n\
    \    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"\
    01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n\
    \    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\"\
    )) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"\
    21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n\
    \    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\"\
    )) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"\
    2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmpq3f9msd_: /tmp/tmpq3f9msd_.cpp:167: int main(): Assertion `candidate((\"\
    03-11-2000\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n    // Write your code here\n    \n    // Write\
    \ your code here\n    \n    // Write your code here\n    \n    // Write your code\
    \ here\n    \n    // Write your code here\n    \n    // Write your code here\n\
    \    \n    // Write your code here\n    \n    // Write your code here\n    \n\
    \    // Write your code here\n    \n    // Write your code here\n    \n    //\
    \ Write your code here\n    \n    // Write your code here\n    \n    // Write\
    \ your code here\n    \n    // Write your code here\n    \n    // Write your code\
    \ here\n    \n    // Write your code here\n    \n    // Write your code here\n\
    \    \n    // Write your code here\n    \n    // Write your code here\n    \n\
    \    // Write your code here\n    \n    // Write your code here\n    \n    //\
    \ Write your code here\n    \n    // Write your code here\n    \n    // Write\
    \ your code here\n    \n    // Write your code here\n    \n    // Write your code\
    \ here\n    \n    // Write your code here\n    \n    // Write your code here\n\
    \    \n    // Write your code here\n    \n    // Write your code here\n    \n\
    \    // Write your code here\n    \n    // Write your code here\n    \n    //\
    \ Write your code here\n    \n    // Write your code here\n    \n    // Write\
    \ your code here\n    \n    // Write your code here\n    \n    // Write your code\
    \ here\n    \n    // Write your code here\n    \n    // Write your code here\n\
    \    \n    // Write your code here\n    \n    // Write your code here\n    \n\
    \    // Write your code here\n    \n    // Write your code here\n    \n    //\
    \ Write your code here\n    \n    // Write your code here\n    \n    // Write\
    \ your code here\n    \n    // Write your code here\n    \n    // Write your code\
    \ here\n    \n    // Write your code here\n    \n    // Write your code here\n\
    \    \n    // Write your code here\n    \n    // Write your code here\n    \n\
    \    // Write your code here\n    \n    // Write your code here\n    \n    //\
    \ Write your code here\n    \n    // Write your code here\n    \n    // Write\
    \ your code here\n    \n    // Write your code here\n    \n    // Write your code\
    \ here\n    \n    // Write your code here\n    \n    // Write your code here\n\
    \    \n    // Write your code here\n    \n    // Write your code here\n    \n\
    \    // Write your code here\n    \n    // Write your code here\n    \n    //\
    \ Write your code here\n    \n    // Write your code here\n    \n    // Write\
    \ your code here\n    \n    // Write your code here\n    \n    // Write your code\
    \ here\n    \n    // Write your code here\n    \n    // Write your code here\n\
    \    \n    // Write your code here\n    \n    // \n}\nint main() {\n    auto candidate\
    \ = valid_date;\n    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"\
    15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n\
    \    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"\
    01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n\
    \    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\"\
    )) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"\
    21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n\
    \    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\"\
    )) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"\
    2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmp104mak5q: /tmp/tmp104mak5q.cpp:167: int main(): Assertion `candidate((\"\
    03-11-2000\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n    // Write your code here\n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n}\nint main() {\n    auto candidate = valid_date;\n\
    \    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"\
    15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n\
    \    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"\
    01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n\
    \    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\"\
    )) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"\
    21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n\
    \    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\"\
    )) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"\
    2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmpo4zy0dgj: /tmp/tmpo4zy0dgj.cpp:275: int main(): Assertion `candidate((\"\
    03-11-2000\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n    // Write your code here\n    \n    bool\
    \ flag = false;\n    \n    std::string months[12] = {\"January\", \"February\"\
    , \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\"\
    , \"October\", \"November\", \"December\"};\n    \n    std::string days[31] =\
    \ {\"\", \"01\", \"02\", \"03\", \"04\", \"05\", \"06\", \"07\", \"08\", \"09\"\
    , \"10\", \"11\", \"12\", \"13\", \"14\", \"15\", \"16\", \"17\", \"18\", \"19\"\
    , \"20\", \"21\", \"22\", \"23\", \"24\", \"25\", \"26\", \"27\", \"28\", \"29\"\
    , \"30\", \"31\"};\n    \n    std::string years[12] = {\"\", \"2000\", \"2001\"\
    , \"2002\", \"2003\", \"2004\", \"2005\", \"2006\", \"2007\", \"2008\", \"2009\"\
    , \"2010\", \"2011\", \"2012\", \"2013\", \"2014\", \"2015\", \"2016\", \"2017\"\
    , \"2018\", \"2019\", \"2020\", \"2021\", \"2022\", \"2023\", \"2024\", \"2025\"\
    , \"2026\", \"2027\", \"2028\", \"2029\", \"2030\", \"2031\"};\n    \n    int\
    \ days_count = 0, month_count = 0, year_count = 0;\n    \n    for(int i = 0; i\
    \ < date.size(); i++) {\n        if(date[i] >= '0' && date[i] <= '9') {\n    \
    \        days_count++;\n        }\n        if(date[i] == '-') {\n            month_count++;\n\
    \        }\n        if(date[i] == '/') {\n            year_count++;\n        }\n\
    \    }\n    \n    if(days_count < 1 || days_count > 31) {\n        flag = false;\n\
    \    }\n    \n    if(month_count < 1 || month_count > 12) {\n        flag = false;\n\
    \    }\n    \n    if(year_count < 1 || year_count > 12) {\n        flag = false;\n\
    \    }\n    \n    if(days_count == 31 && month_count == 2 && year_count==4) {\n\
    \        flag = true;\n    }\n    \n    return flag;\n}\nint main() {\n    auto\
    \ candidate = valid_date;\n    assert(candidate((\"03-11-2000\")) == (true));\n\
    \    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"\
    04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n\
    \    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"\
    03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"\
    04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n\
    \    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"\
    04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n\
    \    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\"\
    )) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"\
    04-2003\")) == (false));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpj6zl8svu.cpp: In function \u2018bool valid_date(std::string)\u2019\
    :\n/tmp/tmpj6zl8svu.cpp:23:217: error: too many initializers for \u2018std::string\
    \ [31]\u2019 {aka \u2018std::__cxx11::basic_string<char> [31]\u2019}\n   23 |\
    \     std::string days[31] = {\"\", \"01\", \"02\", \"03\", \"04\", \"05\", \"\
    06\", \"07\", \"08\", \"09\", \"10\", \"11\", \"12\", \"13\", \"14\", \"15\",\
    \ \"16\", \"17\", \"18\", \"19\", \"20\", \"21\", \"22\", \"23\", \"24\", \"25\"\
    , \"26\", \"27\", \"28\", \"29\", \"30\", \"31\"};\n      |                  \
    \                                                                            \
    \                                                                            \
    \                                               ^\n/tmp/tmpj6zl8svu.cpp:25:288:\
    \ error: too many initializers for \u2018std::string [12]\u2019 {aka \u2018std::__cxx11::basic_string<char>\
    \ [12]\u2019}\n   25 |     std::string years[12] = {\"\", \"2000\", \"2001\",\
    \ \"2002\", \"2003\", \"2004\", \"2005\", \"2006\", \"2007\", \"2008\", \"2009\"\
    , \"2010\", \"2011\", \"2012\", \"2013\", \"2014\", \"2015\", \"2016\", \"2017\"\
    , \"2018\", \"2019\", \"2020\", \"2021\", \"2022\", \"2023\", \"2024\", \"2025\"\
    , \"2026\", \"2027\", \"2028\", \"2029\", \"2030\", \"2031\"};\n      |      \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                      ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n    bool valid = true;\n    int day;\n    int\
    \ month;\n    int year;\n    std::stringstream ss;\n    ss.str(date);\n    ss\
    \ >> month >> day >> year;\n    if (month < 1 || month > 12 || day < 1 || day\
    \ > 31 || year < 1000 || year > 9999) {\n        valid = false;\n    }\n    if\
    \ (month == 2 && day > 29) {\n        valid = false;\n    }\n    if (month ==\
    \ 4 && day > 30) {\n        valid = false;\n    }\n    if (month == 6 && day >\
    \ 31) {\n        valid = false;\n    }\n    if (month == 9 && day > 30) {\n  \
    \      valid = false;\n    }\n    if (month == 11 && day > 31) {\n        valid\
    \ = false;\n    }\n    return valid;\n}\nint main() {\n    auto candidate = valid_date;\n\
    \    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"\
    15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n\
    \    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"\
    01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n\
    \    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\"\
    )) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"\
    21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n\
    \    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\"\
    )) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"\
    2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmp76w7zafj: /tmp/tmp76w7zafj.cpp:46: int main(): Assertion `candidate((\"\
    03-11-2000\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n    // Your code goes here\n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n\n}\nint main() {\n    auto candidate = valid_date;\n\
    \    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"\
    15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n\
    \    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"\
    01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n\
    \    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\"\
    )) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"\
    21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n\
    \    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\"\
    )) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"\
    2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmpuex0z338: /tmp/tmpuex0z338.cpp:275: int main(): Assertion `candidate((\"\
    03-11-2000\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n    // Write your code here\n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n}\nint main() {\n    auto candidate = valid_date;\n\
    \    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"\
    15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n\
    \    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"\
    01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n\
    \    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\"\
    )) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"\
    21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n\
    \    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\"\
    )) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"\
    2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmp71rka68r: /tmp/tmp71rka68r.cpp:275: int main(): Assertion `candidate((\"\
    03-11-2000\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n    // Write your code here\n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n}\nint main() {\n    auto candidate = valid_date;\n\
    \    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"\
    15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n\
    \    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"\
    01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n\
    \    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\"\
    )) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"\
    21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n\
    \    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\"\
    )) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"\
    2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmpmw20_5nc: /tmp/tmpmw20_5nc.cpp:275: int main(): Assertion `candidate((\"\
    03-11-2000\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n    // Write your code here\n    \n    bool\
    \ valid = true;\n    \n    int day;\n    int month;\n    int year;\n    \n   \
    \ std::stringstream ss;\n    ss << date;\n    ss >> day >> month >> year;\n  \
    \  \n    if(day < 1 || day > 31) {\n        valid = false;\n    }\n    \n    if(month\
    \ < 1 || month > 12) {\n        valid = false;\n    }\n    \n    if(year < 1000\
    \ || year > 9999) {\n        valid = false;\n    }\n    \n    if(month == 2 &&\
    \ day > 29) {\n        valid = false;\n    }\n    \n    return valid;\n}\nint\
    \ main() {\n    auto candidate = valid_date;\n    assert(candidate((\"03-11-2000\"\
    )) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"\
    04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n\
    \    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"\
    03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"\
    04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n\
    \    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"\
    04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n\
    \    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\"\
    )) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"\
    04-2003\")) == (false));\n}\n"
  stdout: ''
  stderr: "tmpdqj28bfj: /tmp/tmpdqj28bfj.cpp:49: int main(): Assertion `candidate((\"\
    03-11-2000\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n    // Write your code here\n    int days[12]\
    \ = {0,31,28,31,30,31,30,31,31,30,31,30,31};\n    int months[12] = {0,31,29,31,30,31,30,31,31,30,31,30,31};\n\
    \    int years[12] = {0,2010,2011,2012,2013,2014,2015,2016,2017,2018,2019,2020,2021};\n\
    \    int days_months[12][12] = {\n        {31,28,31,30,31,30,31,31,30,31,30,31},\n\
    \        {31,29,31,30,31,30,31,31,30,31,30,31},\n        {31,30,31,30,31,30,31,31,30,31,30,31},\n\
    \        {31,31,30,31,30,31,30,31,31,30,31,30,31},\n        {30,31,30,31,30,31,30,31,31,30,31,30,31},\n\
    \        {31,30,31,30,31,30,31,30,31,30,31,30,31},\n        {31,30,31,30,31,30,31,30,31,30,31,30,31},\n\
    \        {31,30,31,30,31,30,31,30,31,30,31,30,31},\n        {31,30,31,30,31,30,31,30,31,30,31,30,31},\n\
    \        {31,30,31,30,31,30,31,30,31,30,31,30,31},\n        {31,30,31,30,31,30,31,30,31,30,31,30,31},\n\
    \        {31,30,31,30,31,30,31,30,31,30,31,30,31},\n        {31,30,31,30,31,30,31,30,31,30,31,30,31},\n\
    \        {31,30,31,30,31,30,31,30,31,30,31,30,31},\n        {31,30,31,30,31,30,31,30,31,30,31,30,31},\n\
    \        {31,30,31,30,31,30,31,30,31,30,31,30,31},\n        {31,30,31,30,31,30,31,30,31,30,31,30,31},\n\
    \        {31,30,31,30,31,30,31,30,31,30,31,30,31},\n        {31,30,31,30,31,30,31,30,31,30,31,30,31},\n\
    \        {31,30,31,30,31,30,31,30,31,30,31,30,31},\n        {31,30,31,30,31,30,31,30,31,30,31,30,31},\n\
    \        {31,30,31,30,31,30,31,30,31,30,31,30,31},\n        {31,30,31,30,31,30,31,30,31,30,31,30,31},\n\
    \        {31,30,31,30,31,30,31,30,31,30,31,30,31},\n        {31,30,31,30,31,30,31,30,31,30,31,30,31},\n\
    \        {31,30,31,30,31,30,31,30,31,30,31,30,31},\n        {31,30,31,30,31,30,31,30,31,30,31,30,\n\
    }\nint main() {\n    auto candidate = valid_date;\n    assert(candidate((\"03-11-2000\"\
    )) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"\
    04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n\
    \    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"\
    03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"\
    04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n\
    \    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"\
    04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n\
    \    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\"\
    )) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"\
    04-2003\")) == (false));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpunwro_qm.cpp: In function \u2018bool valid_date(std::string)\u2019\
    :\n/tmp/tmpunwro_qm.cpp:18:58: error: too many initializers for \u2018int [12]\u2019\
    \n   18 |     int days[12] = {0,31,28,31,30,31,30,31,31,30,31,30,31};\n      |\
    \                                                          ^\n/tmp/tmpunwro_qm.cpp:19:60:\
    \ error: too many initializers for \u2018int [12]\u2019\n   19 |     int months[12]\
    \ = {0,31,29,31,30,31,30,31,31,30,31,30,31};\n      |                        \
    \                                    ^\n/tmp/tmpunwro_qm.cpp:20:83: error: too\
    \ many initializers for \u2018int [12]\u2019\n   20 |     int years[12] = {0,2010,2011,2012,2013,2014,2015,2016,2017,2018,2019,2020,2021};\n\
    \      |                                                                     \
    \              ^\n/tmp/tmpunwro_qm.cpp:50:1: error: expected \u2018}\u2019 before\
    \ \u2018int\u2019\n   50 | int main() {\n      | ^~~\n/tmp/tmpunwro_qm.cpp:21:31:\
    \ note: to match this \u2018{\u2019\n   21 |     int days_months[12][12] = {\n\
    \      |                               ^\n/tmp/tmpunwro_qm.cpp:50:1: error: too\
    \ many initializers for \u2018int [12]\u2019\n   50 | int main() {\n      | ^~~\n\
    /tmp/tmpunwro_qm.cpp:68:1: error: expected \u2018}\u2019 at end of input\n   68\
    \ | }\n      | ^\n/tmp/tmpunwro_qm.cpp:16:35: note: to match this \u2018{\u2019\
    \n   16 | bool valid_date(std::string date) {\n      |                       \
    \            ^\n/tmp/tmpunwro_qm.cpp:68:1: warning: no return statement in function\
    \ returning non-void [-Wreturn-type]\n   68 | }\n      | ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n    // Write your code here\n    \n    // Write\
    \ your code here\n    \n    // Write your code here\n    \n    // Write your code\
    \ here\n    \n    // Write your code here\n    \n    // Write your code here\n\
    \    \n    // Write your code here\n    \n    // Write your code here\n    \n\
    \    // Write your code here\n    \n    // Write your code here\n    \n    //\
    \ Write your code here\n    \n    // Write your code here\n    \n    // Write\
    \ your code here\n    \n    // Write your code here\n    \n    // Write your code\
    \ here\n    \n    // Write your code here\n    \n    // Write your code here\n\
    \    \n    // Write your code here\n    \n    // Write your code here\n    \n\
    \    // Write your code here\n    \n    // Write your code here\n    \n    //\
    \ Write your code here\n    \n    // Write your code here\n    \n    // Write\
    \ your code here\n    \n    // Write your code here\n    \n    // Write your code\
    \ here\n    \n    // Write your code here\n    \n    // Write your code here\n\
    \    \n    // Write your code here\n    \n    // Write your code here\n    \n\
    \    // Write your code here\n    \n    // Write your code here\n    \n    //\
    \ Write your code here\n    \n    // Write your code here\n    \n    // Write\
    \ your code here\n    \n    // Write your code here\n    \n    // Write your code\
    \ here\n    \n    // Write your code here\n    \n    // Write your code here\n\
    \    \n    // Write your code here\n    \n    // Write your code here\n    \n\
    \    // Write your code here\n    \n    // Write your code here\n    \n    //\
    \ Write your code here\n    \n    // Write your code here\n    \n    // Write\
    \ your code here\n    \n    // Write your code here\n    \n    // Write your code\
    \ here\n    \n    // Write your code here\n    \n    // Write your code here\n\
    \    \n    // Write your code here\n    \n    // Write your code here\n    \n\
    \    // Write your code here\n    \n    // Write your code here\n    \n    //\
    \ Write your code here\n    \n    // Write your code here\n    \n    // Write\
    \ your code here\n    \n    // Write your code here\n    \n    // Write your code\
    \ here\n    \n    // Write your code here\n    \n    // Write your code here\n\
    \    \n    // Write your code here\n    \n    // Write your code here\n    \n\
    \    // Write your code here\n    \n    // Write your code here\n    \n    //\
    \ Write your code here\n    \n    // Write your code here\n    \n    // Write\
    \ your code here\n    \n    // Write your code here\n    \n    // Write your code\
    \ here\n    \n    // Write your code here\n    \n    // Write your code here\n\
    \    \n    // Write your code here\n    \n    // \n}\nint main() {\n    auto candidate\
    \ = valid_date;\n    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"\
    15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n\
    \    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"\
    01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n\
    \    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\"\
    )) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"\
    21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n\
    \    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\"\
    )) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"\
    2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmp5ji3rdnd: /tmp/tmp5ji3rdnd.cpp:167: int main(): Assertion `candidate((\"\
    03-11-2000\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n    // Write your code here\n    bool valid\
    \ = false;\n    int day;\n    int month;\n    int year;\n    std::stringstream\
    \ ss;\n    ss << date;\n    ss >> day >> month >> year;\n    if (day < 1 || day\
    \ > 31) {\n        valid = false;\n    }\n    if (month < 1 || month > 12) {\n\
    \        valid = false;\n    }\n    if (year < 2000 || year > 2040) {\n      \
    \  valid = false;\n    }\n    if (month == 2) {\n        if (day > 29) {\n   \
    \         valid = false;\n        }\n    }\n    return valid;\n}\nint main() {\n\
    \    auto candidate = valid_date;\n    assert(candidate((\"03-11-2000\")) == (true));\n\
    \    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"\
    04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n\
    \    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"\
    03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"\
    04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n\
    \    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"\
    04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n\
    \    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\"\
    )) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"\
    04-2003\")) == (false));\n}\n"
  stdout: ''
  stderr: "tmp3jtt398b: /tmp/tmp3jtt398b.cpp:43: int main(): Assertion `candidate((\"\
    03-11-2000\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n    // Write your code here\n    \n    // Write\
    \ your code here\n    \n    // Write your code here\n    \n    // Write your code\
    \ here\n    \n    // Write your code here\n    \n    // Write your code here\n\
    \    \n    // Write your code here\n    \n    // Write your code here\n    \n\
    \    // Write your code here\n    \n    // Write your code here\n    \n    //\
    \ Write your code here\n    \n    // Write your code here\n    \n    // Write\
    \ your code here\n    \n    // Write your code here\n    \n    // Write your code\
    \ here\n    \n    // Write your code here\n    \n    // Write your code here\n\
    \    \n    // Write your code here\n    \n    // Write your code here\n    \n\
    \    // Write your code here\n    \n    // Write your code here\n    \n    //\
    \ Write your code here\n    \n    // Write your code here\n    \n    // Write\
    \ your code here\n    \n    // Write your code here\n    \n    // Write your code\
    \ here\n    \n    // Write your code here\n    \n    // Write your code here\n\
    \    \n    // Write your code here\n    \n    // Write your code here\n    \n\
    \    // Write your code here\n    \n    // Write your code here\n    \n    //\
    \ Write your code here\n    \n    // Write your code here\n    \n    // Write\
    \ your code here\n    \n    // Write your code here\n    \n    // Write your code\
    \ here\n    \n    // Write your code here\n    \n    // Write your code here\n\
    \    \n    // Write your code here\n    \n    // Write your code here\n    \n\
    \    // Write your code here\n    \n    // Write your code here\n    \n    //\
    \ Write your code here\n    \n    // Write your code here\n    \n    // Write\
    \ your code here\n    \n    // Write your code here\n    \n    // Write your code\
    \ here\n    \n    // Write your code here\n    \n    // Write your code here\n\
    \    \n    // Write your code here\n    \n    // Write your code here\n    \n\
    \    // Write your code here\n    \n    // Write your code here\n    \n    //\
    \ Write your code here\n    \n    // Write your code here\n    \n    // Write\
    \ your code here\n    \n    // Write your code here\n    \n    // Write your code\
    \ here\n    \n    // Write your code here\n    \n    // Write your code here\n\
    \    \n    // Write your code here\n    \n    // Write your code here\n    \n\
    \    // Write your code here\n    \n    // Write your code here\n    \n    //\
    \ Write your code here\n    \n    // Write your code here\n    \n    // Write\
    \ your code here\n    \n    // Write your code here\n    \n    // Write your code\
    \ here\n    \n    // Write your code here\n    \n    // Write your code here\n\
    \    \n    // Write your code here\n    \n    // \n}\nint main() {\n    auto candidate\
    \ = valid_date;\n    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"\
    15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n\
    \    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"\
    01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n\
    \    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\"\
    )) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"\
    21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n\
    \    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\"\
    )) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"\
    2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmpthrhqs8y: /tmp/tmpthrhqs8y.cpp:167: int main(): Assertion `candidate((\"\
    03-11-2000\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n    // Write your code here\n    int day;\n\
    \    int month;\n    int year;\n    std::stringstream ss(date);\n    ss >> month\
    \ >> day >> year;\n    if (month < 1 || month > 12 || day < 1 || day > 31 || (month\
    \ == 2 && day > 29)) {\n        return false;\n    }\n    if (month == 2) {\n\
    \        if (day > 29) {\n            return false;\n        }\n    }\n    if\
    \ (month == 4 || month == 6 || month == 9 || month == 11) {\n        if (day >\
    \ 30) {\n            return false;\n        }\n    }\n    if (month == 1) {\n\
    \        if (day > 31) {\n            return false;\n        }\n    }\n    if\
    \ (month == 3 && day > 31) {\n        return false;\n    }\n    if (month == 5\
    \ && day > 30) {\n        return false;\n    }\n    if (month == 7 && day > 31)\
    \ {\n        return false;\n    }\n    if (month == 8 && day > 31) {\n       \
    \ return false;\n    }\n    if (month == 10 && day > 30) {\n        return false;\n\
    \    }\n    if (month == 12 && day > 31) {\n        return false;\n    }\n   \
    \ if (month == 1) {\n        if (day > 31) {\n            return false;\n    \
    \    }\n    }\n    if (month == 3 && day > 31) {\n        return false;\n    }\n\
    \    if (month == 5 && day > 30) {\n        return false;\n    }\n    if (month\
    \ == 7 && day > 31) {\n        return false;\n    }\n    if (month == 8 && day\
    \ > 31) {\n        return false;\n    }\n    if (month == 10 && day > 30) {\n\
    \        return false;\n    }\n    if (month == 12 && day > 31) {\n        return\
    \ false;\n    }\n    if (month == 1) {\n        if (day > 31) {\n            return\
    \ false;\n        }\n    }\n    if (month == 3 && day > 31) {\n        return\
    \ false;\n    }\n    if (month == 5 && day > 30) {\n        return false;\n  \
    \  }\n    if (month == 7 && day > 31) {\n        return false;\n    }\n    if\
    \ (month == 8 && day > 31) {\n        return false;\n    }\n    if (month == 10\
    \ && day > 30) {\n        return false;\n    }\n    if (month == 12 && day > 31)\
    \ {\n        return false;\n    }\n    return true;\n}\nint main() {\n    auto\
    \ candidate = valid_date;\n    assert(candidate((\"03-11-2000\")) == (true));\n\
    \    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"\
    04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n\
    \    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"\
    03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"\
    04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n\
    \    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"\
    04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n\
    \    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\"\
    )) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"\
    04-2003\")) == (false));\n}\n"
  stdout: ''
  stderr: "tmp2xt4huwp: /tmp/tmp2xt4huwp.cpp:109: int main(): Assertion `candidate((\"\
    03-11-2000\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n    // Write your code here\n    int day;\n\
    \    int month;\n    int year;\n    std::stringstream ss;\n    ss << date;\n \
    \   ss >> day >> month >> year;\n    if(day < 1 || day > 31 || month < 1 || month\
    \ > 12 || year < 1000 || year > 9999) {\n        return false;\n    }\n    if(month\
    \ == 2) {\n        if(day > 29) {\n            return false;\n        }\n    }\n\
    \    if(month == 4 || month == 6 || month == 9 || month == 11) {\n        if(day\
    \ > 30) {\n            return false;\n        }\n    }\n    if(month == 1) {\n\
    \        if(day > 31) {\n            return false;\n        }\n    }\n    return\
    \ true;\n}\nint main() {\n    auto candidate = valid_date;\n    assert(candidate((\"\
    03-11-2000\")) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n\
    \    assert(candidate((\"04-0-2040\")) == (false));\n    assert(candidate((\"\
    06-04-2020\")) == (true));\n    assert(candidate((\"01-01-2007\")) == (true));\n\
    \    assert(candidate((\"03-32-2011\")) == (false));\n    assert(candidate((\"\
    \")) == (false));\n    assert(candidate((\"04-31-3000\")) == (false));\n    assert(candidate((\"\
    06-06-2005\")) == (true));\n    assert(candidate((\"21-31-2000\")) == (false));\n\
    \    assert(candidate((\"04-12-2003\")) == (true));\n    assert(candidate((\"\
    04122003\")) == (false));\n    assert(candidate((\"20030412\")) == (false));\n\
    \    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"2003-04-12\"\
    )) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n}\n"
  stdout: ''
  stderr: "tmpy_s4mp2z: /tmp/tmpy_s4mp2z.cpp:46: int main(): Assertion `candidate((\"\
    03-11-2000\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n    bool valid = true;\n    int day;\n    int\
    \ month;\n    int year;\n    std::stringstream ss(date);\n    ss >> month >> day\
    \ >> year;\n    if (month < 1 || month > 12 || day < 1 || day > 31 || year < 1\
    \ || year > 2020) {\n        valid = false;\n    }\n    if (month == 2 && day\
    \ > 29) {\n        valid = false;\n    }\n    return valid;\n}\nint main() {\n\
    \    auto candidate = valid_date;\n    assert(candidate((\"03-11-2000\")) == (true));\n\
    \    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"\
    04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n\
    \    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"\
    03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"\
    04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n\
    \    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"\
    04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n\
    \    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\"\
    )) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"\
    04-2003\")) == (false));\n}\n"
  stdout: ''
  stderr: "tmpfmtal3_h: /tmp/tmpfmtal3_h.cpp:33: int main(): Assertion `candidate((\"\
    03-11-2000\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n    bool valid = true;\n    int day;\n    int\
    \ month;\n    int year;\n    std::stringstream ss;\n    ss.str(date);\n    ss\
    \ >> month >> day >> year;\n    if (month < 1 || month > 12 || day < 1 || day\
    \ > 31 || year < 1 || year > 2020) {\n        valid = false;\n    }\n    return\
    \ valid;\n}\nint main() {\n    auto candidate = valid_date;\n    assert(candidate((\"\
    03-11-2000\")) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n\
    \    assert(candidate((\"04-0-2040\")) == (false));\n    assert(candidate((\"\
    06-04-2020\")) == (true));\n    assert(candidate((\"01-01-2007\")) == (true));\n\
    \    assert(candidate((\"03-32-2011\")) == (false));\n    assert(candidate((\"\
    \")) == (false));\n    assert(candidate((\"04-31-3000\")) == (false));\n    assert(candidate((\"\
    06-06-2005\")) == (true));\n    assert(candidate((\"21-31-2000\")) == (false));\n\
    \    assert(candidate((\"04-12-2003\")) == (true));\n    assert(candidate((\"\
    04122003\")) == (false));\n    assert(candidate((\"20030412\")) == (false));\n\
    \    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"2003-04-12\"\
    )) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n}\n"
  stdout: ''
  stderr: "tmp4qps4d7t: /tmp/tmp4qps4d7t.cpp:31: int main(): Assertion `candidate((\"\
    03-11-2000\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n    // Write your code here\n    bool valid\
    \ = false;\n    int day;\n    int month;\n    int year;\n    std::stringstream\
    \ ss(date);\n    ss >> month;\n    ss >> day;\n    ss >> year;\n    if (month\
    \ < 1 || month > 12) return false;\n    if (day < 1 || day > 31) return false;\n\
    \    if (month == 2 && day > 29) return false;\n    if (month == 4 || month ==\
    \ 6 || month == 9 || month == 11 && day > 30) return false;\n    if (month ==\
    \ 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 ||\
    \ month == 12 && day > 31) return false;\n    if (month == 2) {\n        if (day\
    \ > 28) return false;\n    }\n    valid = true;\n    return valid;\n}\nint main()\
    \ {\n    auto candidate = valid_date;\n    assert(candidate((\"03-11-2000\"))\
    \ == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"\
    04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n\
    \    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"\
    03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"\
    04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n\
    \    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"\
    04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n\
    \    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\"\
    )) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"\
    04-2003\")) == (false));\n}\n"
  stdout: ''
  stderr: "tmp11c5x15u: /tmp/tmp11c5x15u.cpp:39: int main(): Assertion `candidate((\"\
    03-11-2000\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n    // Write your code here\n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n}\nint main() {\n    auto candidate = valid_date;\n\
    \    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"\
    15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n\
    \    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"\
    01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n\
    \    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\"\
    )) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"\
    21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n\
    \    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\"\
    )) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"\
    2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmptcw2jyzl: /tmp/tmptcw2jyzl.cpp:275: int main(): Assertion `candidate((\"\
    03-11-2000\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n    // Write your code here\n    \n    int day;\n\
    \    int month;\n    int year;\n    \n    std::stringstream ss(date);\n    ss\
    \ >> month >> day >> year;\n    \n    \n    if (month < 1 || month > 12) return\
    \ false;\n    if (day < 1 || day > 31) return false;\n    if (month == 2 && day\
    \ > 29) return false;\n    if (month == 4 || month == 6 || month == 9 || month\
    \ == 11 && day > 30) return false;\n    if (month == 1 && day > 31) return false;\n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \n}\nint main() {\n    auto candidate = valid_date;\n    assert(candidate((\"\
    03-11-2000\")) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n\
    \    assert(candidate((\"04-0-2040\")) == (false));\n    assert(candidate((\"\
    06-04-2020\")) == (true));\n    assert(candidate((\"01-01-2007\")) == (true));\n\
    \    assert(candidate((\"03-32-2011\")) == (false));\n    assert(candidate((\"\
    \")) == (false));\n    assert(candidate((\"04-31-3000\")) == (false));\n    assert(candidate((\"\
    06-06-2005\")) == (true));\n    assert(candidate((\"21-31-2000\")) == (false));\n\
    \    assert(candidate((\"04-12-2003\")) == (true));\n    assert(candidate((\"\
    04122003\")) == (false));\n    assert(candidate((\"20030412\")) == (false));\n\
    \    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"2003-04-12\"\
    )) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n}\n"
  stdout: ''
  stderr: "tmpwj0v4vva: /tmp/tmpwj0v4vva.cpp:244: int main(): Assertion `candidate((\"\
    03-11-2000\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n    // Write your code here\n    int day;\n\
    \    int month;\n    int year;\n    bool valid = false;\n    std::stringstream\
    \ ss(date);\n    ss >> month >> day >> year;\n    if (month < 1 || month > 12\
    \ || day < 1 || day > 31 || year < 1000 || year > 9999) {\n        valid = false;\n\
    \    }\n    else if (month == 2 && day > 29) {\n        valid = false;\n    }\n\
    \    else if (month == 4 || month == 6 || month == 9 || month == 11 && day > 30)\
    \ {\n        valid = false;\n    }\n    else if (month == 1 && day > 31) {\n \
    \       valid = false;\n    }\n    else {\n        valid = true;\n    }\n    return\
    \ valid;\n}\nint main() {\n    auto candidate = valid_date;\n    assert(candidate((\"\
    03-11-2000\")) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n\
    \    assert(candidate((\"04-0-2040\")) == (false));\n    assert(candidate((\"\
    06-04-2020\")) == (true));\n    assert(candidate((\"01-01-2007\")) == (true));\n\
    \    assert(candidate((\"03-32-2011\")) == (false));\n    assert(candidate((\"\
    \")) == (false));\n    assert(candidate((\"04-31-3000\")) == (false));\n    assert(candidate((\"\
    06-06-2005\")) == (true));\n    assert(candidate((\"21-31-2000\")) == (false));\n\
    \    assert(candidate((\"04-12-2003\")) == (true));\n    assert(candidate((\"\
    04122003\")) == (false));\n    assert(candidate((\"20030412\")) == (false));\n\
    \    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"2003-04-12\"\
    )) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n}\n"
  stdout: ''
  stderr: "tmpjoamtq0s: /tmp/tmpjoamtq0s.cpp:43: int main(): Assertion `candidate((\"\
    03-11-2000\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n    // Write your code here\n    bool valid\
    \ = false;\n    int day;\n    int month;\n    int year;\n    std::stringstream\
    \ ss(date);\n    ss >> month >> day >> year;\n    if (month < 1 || month > 12\
    \ || day < 1 || day > 31 || year < 1 || year > 2020) {\n        valid = false;\n\
    \    }\n    else if (month == 2 && day > 29) {\n        valid = false;\n    }\n\
    \    else if (month == 4 || month == 6 || month == 9 || month == 11 && day > 30)\
    \ {\n        valid = false;\n    }\n    else if (month == 1 || month == 3 || month\
    \ == 5 || month == 7 || month == 8 || month == 10 && day > 31) {\n        valid\
    \ = false;\n    }\n    else {\n        valid = true;\n    }\n    return valid;\n\
    }\nint main() {\n    auto candidate = valid_date;\n    assert(candidate((\"03-11-2000\"\
    )) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"\
    04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n\
    \    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"\
    03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"\
    04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n\
    \    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"\
    04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n\
    \    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\"\
    )) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"\
    04-2003\")) == (false));\n}\n"
  stdout: ''
  stderr: "tmp1jwvolob: /tmp/tmp1jwvolob.cpp:43: int main(): Assertion `candidate((\"\
    03-11-2000\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n    // Write your code here\n    \n    // Write\
    \ your code here\n    \n    // Write your code here\n    \n    // Write your code\
    \ here\n    \n    // Write your code here\n    \n    // Write your code here\n\
    \    \n    // Write your code here\n    \n    // Write your code here\n    \n\
    \    // Write your code here\n    \n    // Write your code here\n    \n    //\
    \ Write your code here\n    \n    // Write your code here\n    \n    // Write\
    \ your code here\n    \n    // Write your code here\n    \n    // Write your code\
    \ here\n    \n    // Write your code here\n    \n    // Write your code here\n\
    \    \n    // Write your code here\n    \n    // Write your code here\n    \n\
    \    // Write your code here\n    \n    // Write your code here\n    \n    //\
    \ Write your code here\n    \n    // Write your code here\n    \n    // Write\
    \ your code here\n    \n    // Write your code here\n    \n    // Write your code\
    \ here\n    \n    // Write your code here\n    \n    // Write your code here\n\
    \    \n    // Write your code here\n    \n    // Write your code here\n    \n\
    \    // Write your code here\n    \n    // Write your code here\n    \n    //\
    \ Write your code here\n    \n    // Write your code here\n    \n    // Write\
    \ your code here\n    \n    // Write your code here\n    \n    // Write your code\
    \ here\n    \n    // Write your code here\n    \n    // Write your code here\n\
    \    \n    // Write your code here\n    \n    // Write your code here\n    \n\
    \    // Write your code here\n    \n    // Write your code here\n    \n    //\
    \ Write your code here\n    \n    // Write your code here\n    \n    // Write\
    \ your code here\n    \n    // Write your code here\n    \n    // Write your code\
    \ here\n    \n    // Write your code here\n    \n    // Write your code here\n\
    \    \n    // Write your code here\n    \n    // Write your code here\n    \n\
    \    // Write your code here\n    \n    // Write your code here\n    \n    //\
    \ Write your code here\n    \n    // Write your code here\n    \n    // Write\
    \ your code here\n    \n    // Write your code here\n    \n    // Write your code\
    \ here\n    \n    // Write your code here\n    \n    // Write your code here\n\
    \    \n    // Write your code here\n    \n    // Write your code here\n    \n\
    \    // Write your code here\n    \n    // Write your code here\n    \n    //\
    \ Write your code here\n    \n    // Write your code here\n    \n    // Write\
    \ your code here\n    \n    // Write your code here\n    \n    // Write your code\
    \ here\n    \n    // Write your code here\n    \n    // Write your code here\n\
    \    \n    // Write your code here\n    \n    // \n}\nint main() {\n    auto candidate\
    \ = valid_date;\n    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"\
    15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n\
    \    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"\
    01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n\
    \    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\"\
    )) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"\
    21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n\
    \    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\"\
    )) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"\
    2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmp898utxv5: /tmp/tmp898utxv5.cpp:167: int main(): Assertion `candidate((\"\
    03-11-2000\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n    // Write your code here\n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n}\nint main() {\n    auto candidate = valid_date;\n\
    \    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"\
    15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n\
    \    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"\
    01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n\
    \    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\"\
    )) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"\
    21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n\
    \    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\"\
    )) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"\
    2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmp5qiww6uq: /tmp/tmp5qiww6uq.cpp:275: int main(): Assertion `candidate((\"\
    03-11-2000\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n    // Write your code here\n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n}\nint main() {\n    auto candidate = valid_date;\n\
    \    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"\
    15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n\
    \    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"\
    01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n\
    \    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\"\
    )) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"\
    21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n\
    \    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\"\
    )) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"\
    2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmp2tujo0v7: /tmp/tmp2tujo0v7.cpp:275: int main(): Assertion `candidate((\"\
    03-11-2000\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n    // Write your code here\n    \n    // Write\
    \ your code here\n    \n    // Write your code here\n    \n    // Write your code\
    \ here\n    \n    // Write your code here\n    \n    // Write your code here\n\
    \    \n    // Write your code here\n    \n    // Write your code here\n    \n\
    \    // Write your code here\n    \n    // Write your code here\n    \n    //\
    \ Write your code here\n    \n    // Write your code here\n    \n    // Write\
    \ your code here\n    \n    // Write your code here\n    \n    // Write your code\
    \ here\n    \n    // Write your code here\n    \n    // Write your code here\n\
    \    \n    // Write your code here\n    \n    // Write your code here\n    \n\
    \    // Write your code here\n    \n    // Write your code here\n    \n    //\
    \ Write your code here\n    \n    // Write your code here\n    \n    // Write\
    \ your code here\n    \n    // Write your code here\n    \n    // Write your code\
    \ here\n    \n    // Write your code here\n    \n    // Write your code here\n\
    \    \n    // Write your code here\n    \n    // Write your code here\n    \n\
    \    // Write your code here\n    \n    // Write your code here\n    \n    //\
    \ Write your code here\n    \n    // Write your code here\n    \n    // Write\
    \ your code here\n    \n    // Write your code here\n    \n    // Write your code\
    \ here\n    \n    // Write your code here\n    \n    // Write your code here\n\
    \    \n    // Write your code here\n    \n    // Write your code here\n    \n\
    \    // Write your code here\n    \n    // Write your code here\n    \n    //\
    \ Write your code here\n    \n    // Write your code here\n    \n    // Write\
    \ your code here\n    \n    // Write your code here\n    \n    // Write your code\
    \ here\n    \n    // Write your code here\n    \n    // Write your code here\n\
    \    \n    // Write your code here\n    \n    // Write your code here\n    \n\
    \    // Write your code here\n    \n    // Write your code here\n    \n    //\
    \ Write your code here\n    \n    // Write your code here\n    \n    // Write\
    \ your code here\n    \n    // Write your code here\n    \n    // Write your code\
    \ here\n    \n    // Write your code here\n    \n    // Write your code here\n\
    \    \n    // Write your code here\n    \n    // Write your code here\n    \n\
    \    // Write your code here\n    \n    // Write your code here\n    \n    //\
    \ Write your code here\n    \n    // Write your code here\n    \n    // Write\
    \ your code here\n    \n    // Write your code here\n    \n    // Write your code\
    \ here\n    \n    // Write your code here\n    \n    // Write your code here\n\
    \    \n    // Write your code here\n    \n    // \n}\nint main() {\n    auto candidate\
    \ = valid_date;\n    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"\
    15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n\
    \    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"\
    01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n\
    \    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\"\
    )) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"\
    21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n\
    \    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\"\
    )) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"\
    2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmp5lu340wp: /tmp/tmp5lu340wp.cpp:167: int main(): Assertion `candidate((\"\
    03-11-2000\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n    // Write your code here\n    \n    // Your\
    \ code goes here\n    \n    return true; // Replace this with your code\n}\nint\
    \ main() {\n    auto candidate = valid_date;\n    assert(candidate((\"03-11-2000\"\
    )) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"\
    04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n\
    \    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"\
    03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"\
    04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n\
    \    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"\
    04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n\
    \    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\"\
    )) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"\
    04-2003\")) == (false));\n}\n"
  stdout: ''
  stderr: "tmpjw4tpr36: /tmp/tmpjw4tpr36.cpp:26: int main(): Assertion `candidate((\"\
    15-01-2012\")) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n    // Write your code here\n    bool valid\
    \ = true;\n    std::string months[12] = {\n        \"January\", \"February\",\
    \ \"March\", \"April\", \"May\", \"June\",\n        \"July\", \"August\", \"September\"\
    , \"October\", \"November\", \"December\"\n    };\n    int days[12] = {\n    \
    \    31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31\n    };\n    int months[12]\
    \ = {\n        0, 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31\n    };\n   \
    \ int days_months[12] = {\n        0, 31, 28, 31, 30, 31, 30, 31, 31, 30, 31,\
    \ 30, 31\n    };\n    int days_months_leap[13] = {\n        0, 31, 29, 31, 30,\
    \ 31, 30, 31, 31, 30, 31, 30, 31, 31, 28\n    };\n    int days_months_leap_leap[13]\
    \ = {\n        0, 31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31, 31, 29\n   \
    \ };\n    int days_months_leap[13] = {\n        0, 31, 29, 31, 30, 31, 30, 31,\
    \ 31, 30, 31, 30, 31, 31, 29\n    };\n    int days_months_leap_leap[13] = {\n\
    \        0, 31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31, 31, 29\n    };\n \
    \   int days_months_leap[13] = {\n        0, 31, 29, 31, 30, 31, 30, 31, 31, 30,\
    \ 31, 30, 31, 31, 29\n    };\n    int days_months_leap_leap[13] = {\n        0,\
    \ 31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31, 31, 29\n    };\n    int days_months_leap[13]\
    \ = {\n        0, 31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31, 31, 29\n   \
    \ };\n    int days_months_leap_leap[13] = {\n        0, 31, 29, 31, 30, 31, 30,\
    \ 31, 31, 30, 31, 30, 31, 31, 29\n    };\n    int days_months_leap[13] = {\n \
    \       0, 31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31, 31, 29\n    };\n  \
    \  int days_months_leap_leap[13] = {\n        0, 31, 29, 31, 30, 31, 30, 31, 31,\
    \ 30, 31, 30, 31, 31, 29\n    };\n    int days_months_leap[13] = {\n        0,\
    \ 31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31, 31, 29\n    };\n    int days_months_leap_leap[13]\
    \ = {\n        0, 31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31, 31, 29\n   \
    \ };\n    int days_months_leap[13] = {\n        0, 31, 29, 31, 30, 31, 30, 31,\
    \ 31, 30, 31, 30, 31, 31, 29\n    };\n    int days_months_leap_leap[13] = {\n\
    \        0, 31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31, 31, 29\n    };\n \
    \   int days_months_leap[13] = {\n        0, 31, 29, 31, 30, 31, 30, 31, 31, 30,\
    \ 31, 30, 31, 31, 29\n    };\n    int days_months_leap_leap[13] = {\n        0,\
    \ 31, \n}\nint main() {\n    auto candidate = valid_date;\n    assert(candidate((\"\
    03-11-2000\")) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n\
    \    assert(candidate((\"04-0-2040\")) == (false));\n    assert(candidate((\"\
    06-04-2020\")) == (true));\n    assert(candidate((\"01-01-2007\")) == (true));\n\
    \    assert(candidate((\"03-32-2011\")) == (false));\n    assert(candidate((\"\
    \")) == (false));\n    assert(candidate((\"04-31-3000\")) == (false));\n    assert(candidate((\"\
    06-06-2005\")) == (true));\n    assert(candidate((\"21-31-2000\")) == (false));\n\
    \    assert(candidate((\"04-12-2003\")) == (true));\n    assert(candidate((\"\
    04122003\")) == (false));\n    assert(candidate((\"20030412\")) == (false));\n\
    \    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"2003-04-12\"\
    )) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpufl_cu8j.cpp: In function \u2018bool valid_date(std::string)\u2019\
    :\n/tmp/tmpufl_cu8j.cpp:26:9: error: conflicting declaration \u2018int months\
    \ [12]\u2019\n   26 |     int months[12] = {\n      |         ^~~~~~\n/tmp/tmpufl_cu8j.cpp:19:17:\
    \ note: previous declaration as \u2018std::string months [12]\u2019\n   19 | \
    \    std::string months[12] = {\n      |                 ^~~~~~\n/tmp/tmpufl_cu8j.cpp:31:5:\
    \ error: too many initializers for \u2018int [12]\u2019\n   31 |     };\n    \
    \  |     ^\n/tmp/tmpufl_cu8j.cpp:34:5: error: too many initializers for \u2018\
    int [13]\u2019\n   34 |     };\n      |     ^\n/tmp/tmpufl_cu8j.cpp:37:5: error:\
    \ too many initializers for \u2018int [13]\u2019\n   37 |     };\n      |    \
    \ ^\n/tmp/tmpufl_cu8j.cpp:38:9: error: redeclaration of \u2018int days_months_leap\
    \ [13]\u2019\n   38 |     int days_months_leap[13] = {\n      |         ^~~~~~~~~~~~~~~~\n\
    /tmp/tmpufl_cu8j.cpp:32:9: note: \u2018int days_months_leap [13]\u2019 previously\
    \ declared here\n   32 |     int days_months_leap[13] = {\n      |         ^~~~~~~~~~~~~~~~\n\
    /tmp/tmpufl_cu8j.cpp:41:9: error: redeclaration of \u2018int days_months_leap_leap\
    \ [13]\u2019\n   41 |     int days_months_leap_leap[13] = {\n      |         ^~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpufl_cu8j.cpp:35:9: note: \u2018int days_months_leap_leap [13]\u2019 previously\
    \ declared here\n   35 |     int days_months_leap_leap[13] = {\n      |      \
    \   ^~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpufl_cu8j.cpp:44:9: error: redeclaration of\
    \ \u2018int days_months_leap [13]\u2019\n   44 |     int days_months_leap[13]\
    \ = {\n      |         ^~~~~~~~~~~~~~~~\n/tmp/tmpufl_cu8j.cpp:32:9: note: \u2018\
    int days_months_leap [13]\u2019 previously declared here\n   32 |     int days_months_leap[13]\
    \ = {\n      |         ^~~~~~~~~~~~~~~~\n/tmp/tmpufl_cu8j.cpp:47:9: error: redeclaration\
    \ of \u2018int days_months_leap_leap [13]\u2019\n   47 |     int days_months_leap_leap[13]\
    \ = {\n      |         ^~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpufl_cu8j.cpp:35:9: note:\
    \ \u2018int days_months_leap_leap [13]\u2019 previously declared here\n   35 |\
    \     int days_months_leap_leap[13] = {\n      |         ^~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpufl_cu8j.cpp:50:9: error: redeclaration of \u2018int days_months_leap\
    \ [13]\u2019\n   50 |     int days_months_leap[13] = {\n      |         ^~~~~~~~~~~~~~~~\n\
    /tmp/tmpufl_cu8j.cpp:32:9: note: \u2018int days_months_leap [13]\u2019 previously\
    \ declared here\n   32 |     int days_months_leap[13] = {\n      |         ^~~~~~~~~~~~~~~~\n\
    /tmp/tmpufl_cu8j.cpp:53:9: error: redeclaration of \u2018int days_months_leap_leap\
    \ [13]\u2019\n   53 |     int days_months_leap_leap[13] = {\n      |         ^~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpufl_cu8j.cpp:35:9: note: \u2018int days_months_leap_leap [13]\u2019 previously\
    \ declared here\n   35 |     int days_months_leap_leap[13] = {\n      |      \
    \   ^~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpufl_cu8j.cpp:56:9: error: redeclaration of\
    \ \u2018int days_months_leap [13]\u2019\n   56 |     int days_months_leap[13]\
    \ = {\n      |         ^~~~~~~~~~~~~~~~\n/tmp/tmpufl_cu8j.cpp:32:9: note: \u2018\
    int days_months_leap [13]\u2019 previously declared here\n   32 |     int days_months_leap[13]\
    \ = {\n      |         ^~~~~~~~~~~~~~~~\n/tmp/tmpufl_cu8j.cpp:59:9: error: redeclaration\
    \ of \u2018int days_months_leap_leap [13]\u2019\n   59 |     int days_months_leap_leap[13]\
    \ = {\n      |         ^~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpufl_cu8j.cpp:35:9: note:\
    \ \u2018int days_months_leap_leap [13]\u2019 previously declared here\n   35 |\
    \     int days_months_leap_leap[13] = {\n      |         ^~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpufl_cu8j.cpp:62:9: error: redeclaration of \u2018int days_months_leap\
    \ [13]\u2019\n   62 |     int days_months_leap[13] = {\n      |         ^~~~~~~~~~~~~~~~\n\
    /tmp/tmpufl_cu8j.cpp:32:9: note: \u2018int days_months_leap [13]\u2019 previously\
    \ declared here\n   32 |     int days_months_leap[13] = {\n      |         ^~~~~~~~~~~~~~~~\n\
    /tmp/tmpufl_cu8j.cpp:65:9: error: redeclaration of \u2018int days_months_leap_leap\
    \ [13]\u2019\n   65 |     int days_months_leap_leap[13] = {\n      |         ^~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpufl_cu8j.cpp:35:9: note: \u2018int days_months_leap_leap [13]\u2019 previously\
    \ declared here\n   35 |     int days_months_leap_leap[13] = {\n      |      \
    \   ^~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpufl_cu8j.cpp:68:9: error: redeclaration of\
    \ \u2018int days_months_leap [13]\u2019\n   68 |     int days_months_leap[13]\
    \ = {\n      |         ^~~~~~~~~~~~~~~~\n/tmp/tmpufl_cu8j.cpp:32:9: note: \u2018\
    int days_months_leap [13]\u2019 previously declared here\n   32 |     int days_months_leap[13]\
    \ = {\n      |         ^~~~~~~~~~~~~~~~\n/tmp/tmpufl_cu8j.cpp:71:9: error: redeclaration\
    \ of \u2018int days_months_leap_leap [13]\u2019\n   71 |     int days_months_leap_leap[13]\
    \ = {\n      |         ^~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpufl_cu8j.cpp:35:9: note:\
    \ \u2018int days_months_leap_leap [13]\u2019 previously declared here\n   35 |\
    \     int days_months_leap_leap[13] = {\n      |         ^~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpufl_cu8j.cpp:74:9: error: redeclaration of \u2018int days_months_leap\
    \ [13]\u2019\n   74 |     int days_months_leap[13] = {\n      |         ^~~~~~~~~~~~~~~~\n\
    /tmp/tmpufl_cu8j.cpp:32:9: note: \u2018int days_months_leap [13]\u2019 previously\
    \ declared here\n   32 |     int days_months_leap[13] = {\n      |         ^~~~~~~~~~~~~~~~\n\
    /tmp/tmpufl_cu8j.cpp:77:9: error: redeclaration of \u2018int days_months_leap_leap\
    \ [13]\u2019\n   77 |     int days_months_leap_leap[13] = {\n      |         ^~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpufl_cu8j.cpp:35:9: note: \u2018int days_months_leap_leap [13]\u2019 previously\
    \ declared here\n   35 |     int days_months_leap_leap[13] = {\n      |      \
    \   ^~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpufl_cu8j.cpp:98:1: error: expected \u2018}\u2019\
    \ at end of input\n   98 | }\n      | ^\n/tmp/tmpufl_cu8j.cpp:16:35: note: to\
    \ match this \u2018{\u2019\n   16 | bool valid_date(std::string date) {\n    \
    \  |                                   ^\n/tmp/tmpufl_cu8j.cpp:98:1: warning:\
    \ no return statement in function returning non-void [-Wreturn-type]\n   98 |\
    \ }\n      | ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n    // Write your code here\n    \n    // Write\
    \ your code here\n    \n    // Write your code here\n    \n    // Write your code\
    \ here\n    \n    // Write your code here\n    \n    // Write your code here\n\
    \    \n    // Write your code here\n    \n    // Write your code here\n    \n\
    \    // Write your code here\n    \n    // Write your code here\n    \n    //\
    \ Write your code here\n    \n    // Write your code here\n    \n    // Write\
    \ your code here\n    \n    // Write your code here\n    \n    // Write your code\
    \ here\n    \n    // Write your code here\n    \n    // Write your code here\n\
    \    \n    // Write your code here\n    \n    // Write your code here\n    \n\
    \    // Write your code here\n    \n    // Write your code here\n    \n    //\
    \ Write your code here\n    \n    // Write your code here\n    \n    // Write\
    \ your code here\n    \n    // Write your code here\n    \n    // Write your code\
    \ here\n    \n    // Write your code here\n    \n    // Write your code here\n\
    \    \n    // Write your code here\n    \n    // Write your code here\n    \n\
    \    // Write your code here\n    \n    // Write your code here\n    \n    //\
    \ Write your code here\n    \n    // Write your code here\n    \n    // Write\
    \ your code here\n    \n    // Write your code here\n    \n    // Write your code\
    \ here\n    \n    // Write your code here\n    \n    // Write your code here\n\
    \    \n    // Write your code here\n    \n    // Write your code here\n    \n\
    \    // Write your code here\n    \n    // Write your code here\n    \n    //\
    \ Write your code here\n    \n    // Write your code here\n    \n    // Write\
    \ your code here\n    \n    // Write your code here\n    \n    // Write your code\
    \ here\n    \n    // Write your code here\n    \n    // Write your code here\n\
    \    \n    // Write your code here\n    \n    // Write your code here\n    \n\
    \    // Write your code here\n    \n    // Write your code here\n    \n    //\
    \ Write your code here\n    \n    // Write your code here\n    \n    // Write\
    \ your code here\n    \n    // Write your code here\n    \n    // Write your code\
    \ here\n    \n    // Write your code here\n    \n    // Write your code here\n\
    \    \n    // Write your code here\n    \n    // Write your code here\n    \n\
    \    // Write your code here\n    \n    // Write your code here\n    \n    //\
    \ Write your code here\n    \n    // Write your code here\n    \n    // Write\
    \ your code here\n    \n    // Write your code here\n    \n    // Write your code\
    \ here\n    \n    // Write your code here\n    \n    // Write your code here\n\
    \    \n    // Write your code here\n    \n    // \n}\nint main() {\n    auto candidate\
    \ = valid_date;\n    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"\
    15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n\
    \    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"\
    01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n\
    \    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\"\
    )) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"\
    21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n\
    \    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\"\
    )) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"\
    2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmp19y0hc05: /tmp/tmp19y0hc05.cpp:167: int main(): Assertion `candidate((\"\
    03-11-2000\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n    // Write your code here\n    \n    // Write\
    \ your code here\n    \n    // Write your code here\n    \n    // Write your code\
    \ here\n    \n    // Write your code here\n    \n    // Write your code here\n\
    \    \n    // Write your code here\n    \n    // Write your code here\n    \n\
    \    // Write your code here\n    \n    // Write your code here\n    \n    //\
    \ Write your code here\n    \n    // Write your code here\n    \n    // Write\
    \ your code here\n    \n    // Write your code here\n    \n    // Write your code\
    \ here\n    \n    // Write your code here\n    \n    // Write your code here\n\
    \    \n    // Write your code here\n    \n    // Write your code here\n    \n\
    \    // Write your code here\n    \n    // Write your code here\n    \n    //\
    \ Write your code here\n    \n    // Write your code here\n    \n    // Write\
    \ your code here\n    \n    // Write your code here\n    \n    // Write your code\
    \ here\n    \n    // Write your code here\n    \n    // Write your code here\n\
    \    \n    // Write your code here\n    \n    // Write your code here\n    \n\
    \    // Write your code here\n    \n    // Write your code here\n    \n    //\
    \ Write your code here\n    \n    // Write your code here\n    \n    // Write\
    \ your code here\n    \n    // Write your code here\n    \n    // Write your code\
    \ here\n    \n    // Write your code here\n    \n    // Write your code here\n\
    \    \n    // Write your code here\n    \n    // Write your code here\n    \n\
    \    // Write your code here\n    \n    // Write your code here\n    \n    //\
    \ Write your code here\n    \n    // Write your code here\n    \n    // Write\
    \ your code here\n    \n    // Write your code here\n    \n    // Write your code\
    \ here\n    \n    // Write your code here\n    \n    // Write your code here\n\
    \    \n    // Write your code here\n    \n    // Write your code here\n    \n\
    \    // Write your code here\n    \n    // Write your code here\n    \n    //\
    \ Write your code here\n    \n    // Write your code here\n    \n    // Write\
    \ your code here\n    \n    // Write your code here\n    \n    // Write your code\
    \ here\n    \n    // Write your code here\n    \n    // Write your code here\n\
    \    \n    // Write your code here\n    \n    // Write your code here\n    \n\
    \    // Write your code here\n    \n    // Write your code here\n    \n    //\
    \ Write your code here\n    \n    // Write your code here\n    \n    // Write\
    \ your code here\n    \n    // Write your code here\n    \n    // Write your code\
    \ here\n    \n    // Write your code here\n    \n    // Write your code here\n\
    \    \n    // Write your code here\n    \n    // \n}\nint main() {\n    auto candidate\
    \ = valid_date;\n    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"\
    15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n\
    \    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"\
    01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n\
    \    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\"\
    )) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"\
    21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n\
    \    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\"\
    )) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"\
    2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmploc8c6ro: /tmp/tmploc8c6ro.cpp:167: int main(): Assertion `candidate((\"\
    03-11-2000\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n    bool valid = true;\n    std::stringstream\
    \ ss(date);\n    int day, month, year;\n    ss >> month >> day >> year;\n    if\
    \ (month < 1 || month > 12 || day < 1 || day > 31 || year < 1 || year > 9999)\
    \ {\n        valid = false;\n    }\n    return valid;\n}\nint main() {\n    auto\
    \ candidate = valid_date;\n    assert(candidate((\"03-11-2000\")) == (true));\n\
    \    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"\
    04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n\
    \    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"\
    03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"\
    04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n\
    \    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"\
    04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n\
    \    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\"\
    )) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"\
    04-2003\")) == (false));\n}\n"
  stdout: ''
  stderr: "tmpm9017izf: /tmp/tmpm9017izf.cpp:28: int main(): Assertion `candidate((\"\
    03-11-2000\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n    // Write your code here\n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n}\nint main() {\n    auto candidate = valid_date;\n\
    \    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"\
    15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n\
    \    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"\
    01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n\
    \    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\"\
    )) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"\
    21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n\
    \    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\"\
    )) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"\
    2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmpa58p9ypp: /tmp/tmpa58p9ypp.cpp:275: int main(): Assertion `candidate((\"\
    03-11-2000\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n    // Write your code here\n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n}\nint main() {\n    auto candidate = valid_date;\n\
    \    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"\
    15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n\
    \    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"\
    01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n\
    \    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\"\
    )) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"\
    21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n\
    \    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\"\
    )) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"\
    2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmp24tuvwmf: /tmp/tmp24tuvwmf.cpp:275: int main(): Assertion `candidate((\"\
    03-11-2000\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n    // Write your code here\n    bool valid\
    \ = false;\n    int day;\n    int month;\n    int year;\n    std::stringstream\
    \ ss;\n    ss << date;\n    ss >> day >> month >> year;\n    if (day < 1 || day\
    \ > 31 || month < 1 || month > 12 || year < 1000 || year > 9999) {\n        valid\
    \ = false;\n    } else {\n        valid = true;\n    }\n    return valid;\n}\n\
    int main() {\n    auto candidate = valid_date;\n    assert(candidate((\"03-11-2000\"\
    )) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"\
    04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n\
    \    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"\
    03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"\
    04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n\
    \    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"\
    04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n\
    \    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\"\
    )) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"\
    04-2003\")) == (false));\n}\n"
  stdout: ''
  stderr: "tmpg0_7biy_: /tmp/tmpg0_7biy_.cpp:34: int main(): Assertion `candidate((\"\
    03-11-2000\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n    \n    // Write your code here\n    \n  \
    \  // Write your code here\n    \n    // Write your code here\n    \n    // Write\
    \ your code here\n    \n    // Write your code here\n    \n    // Write your code\
    \ here\n    \n    // Write your code here\n    \n    // Write your code here\n\
    \    \n    // Write your code here\n    \n    // Write your code here\n    \n\
    \    // Write your code here\n    \n    // Write your code here\n    \n    //\
    \ Write your code here\n    \n    // Write your code here\n    \n    // Write\
    \ your code here\n    \n    // Write your code here\n    \n    // Write your code\
    \ here\n    \n    // Write your code here\n    \n    // Write your code here\n\
    \    \n    // Write your code here\n    \n    // Write your code here\n    \n\
    \    // Write your code here\n    \n    // Write your code here\n    \n    //\
    \ Write your code here\n    \n    // Write your code here\n    \n    // Write\
    \ your code here\n    \n    // Write your code here\n    \n    // Write your code\
    \ here\n    \n    // Write your code here\n    \n    // Write your code here\n\
    \    \n    // Write your code here\n    \n    // Write your code here\n    \n\
    \    // Write your code here\n    \n    // Write your code here\n    \n    //\
    \ Write your code here\n    \n    // Write your code here\n    \n    // Write\
    \ your code here\n    \n    // Write your code here\n    \n    // Write your code\
    \ here\n    \n    // Write your code here\n    \n    // Write your code here\n\
    \    \n    // Write your code here\n    \n    // Write your code here\n    \n\
    \    // Write your code here\n    \n    // Write your code here\n    \n    //\
    \ Write your code here\n    \n    // Write your code here\n    \n    // Write\
    \ your code here\n    \n    // Write your code here\n    \n    // Write your code\
    \ here\n    \n    // Write your code here\n    \n    // Write your code here\n\
    \    \n    // Write your code here\n    \n    // Write your code here\n    \n\
    \    // Write your code here\n    \n    // Write your code here\n    \n    //\
    \ Write your code here\n    \n    // Write your code here\n    \n    // Write\
    \ your code here\n    \n    // Write your code here\n    \n    // Write your code\
    \ here\n    \n    // Write your code here\n    \n    // Write your code here\n\
    \    \n    // Write your code here\n    \n    // Write your code here\n    \n\
    \    // Write your code here\n    \n    // Write your code here\n    \n    //\
    \ Write your code here\n    \n    // Write your code here\n    \n    // Write\
    \ your code here\n    \n    // Write your code here\n    \n    // Write your code\
    \ here\n    \n    // Write your code here\n    \n}\nint main() {\n    auto candidate\
    \ = valid_date;\n    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"\
    15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n\
    \    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"\
    01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n\
    \    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\"\
    )) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"\
    21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n\
    \    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\"\
    )) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"\
    2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmplkeeaoy5: /tmp/tmplkeeaoy5.cpp:167: int main(): Assertion `candidate((\"\
    03-11-2000\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n    // Write your code here\n    \n    // Write\
    \ your code here\n    \n    // Write your code here\n    \n    // Write your code\
    \ here\n    \n    // Write your code here\n    \n    // Write your code here\n\
    \    \n    // Write your code here\n    \n    // Write your code here\n    \n\
    \    // Write your code here\n    \n    // Write your code here\n    \n    //\
    \ Write your code here\n    \n    // Write your code here\n    \n    // Write\
    \ your code here\n    \n    // Write your code here\n    \n    // Write your code\
    \ here\n    \n    // Write your code here\n    \n    // Write your code here\n\
    \    \n    // Write your code here\n    \n    // Write your code here\n    \n\
    \    // Write your code here\n    \n    // Write your code here\n    \n    //\
    \ Write your code here\n    \n    // Write your code here\n    \n    // Write\
    \ your code here\n    \n    // Write your code here\n    \n    // Write your code\
    \ here\n    \n    // Write your code here\n    \n    // Write your code here\n\
    \    \n    // Write your code here\n    \n    // Write your code here\n    \n\
    \    // Write your code here\n    \n    // Write your code here\n    \n    //\
    \ Write your code here\n    \n    // Write your code here\n    \n    // Write\
    \ your code here\n    \n    // Write your code here\n    \n    // Write your code\
    \ here\n    \n    // Write your code here\n    \n    // Write your code here\n\
    \    \n    // Write your code here\n    \n    // Write your code here\n    \n\
    \    // Write your code here\n    \n    // Write your code here\n    \n    //\
    \ Write your code here\n    \n    // Write your code here\n    \n    // Write\
    \ your code here\n    \n    // Write your code here\n    \n    // Write your code\
    \ here\n    \n    // Write your code here\n    \n    // Write your code here\n\
    \    \n    // Write your code here\n    \n    // Write your code here\n    \n\
    \    // Write your code here\n    \n    // Write your code here\n    \n    //\
    \ Write your code here\n    \n    // Write your code here\n    \n    // Write\
    \ your code here\n    \n    // Write your code here\n    \n    // Write your code\
    \ here\n    \n    // Write your code here\n    \n    // Write your code here\n\
    \    \n    // Write your code here\n    \n    // Write your code here\n    \n\
    \    // Write your code here\n    \n    // Write your code here\n    \n    //\
    \ Write your code here\n    \n    // Write your code here\n    \n    // Write\
    \ your code here\n    \n    // Write your code here\n    \n    // Write your code\
    \ here\n    \n    // Write your code here\n    \n    // Write your code here\n\
    \    \n    // Write your code here\n    \n    // \n}\nint main() {\n    auto candidate\
    \ = valid_date;\n    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"\
    15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n\
    \    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"\
    01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n\
    \    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\"\
    )) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"\
    21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n\
    \    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\"\
    )) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"\
    2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmpf2hrfvhb: /tmp/tmpf2hrfvhb.cpp:167: int main(): Assertion `candidate((\"\
    03-11-2000\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n    // Write your code here\n    \n    // Write\
    \ your code here\n    \n    // Write your code here\n    \n    // Write your code\
    \ here\n    \n    // Write your code here\n    \n    // Write your code here\n\
    \    \n    // Write your code here\n    \n    // Write your code here\n    \n\
    \    // Write your code here\n    \n    // Write your code here\n    \n    //\
    \ Write your code here\n    \n    // Write your code here\n    \n    // Write\
    \ your code here\n    \n    // Write your code here\n    \n    // Write your code\
    \ here\n    \n    // Write your code here\n    \n    // Write your code here\n\
    \    \n    // Write your code here\n    \n    // Write your code here\n    \n\
    \    // Write your code here\n    \n    // Write your code here\n    \n    //\
    \ Write your code here\n    \n    // Write your code here\n    \n    // Write\
    \ your code here\n    \n    // Write your code here\n    \n    // Write your code\
    \ here\n    \n    // Write your code here\n    \n    // Write your code here\n\
    \    \n    // Write your code here\n    \n    // Write your code here\n    \n\
    \    // Write your code here\n    \n    // Write your code here\n    \n    //\
    \ Write your code here\n    \n    // Write your code here\n    \n    // Write\
    \ your code here\n    \n    // Write your code here\n    \n    // Write your code\
    \ here\n    \n    // Write your code here\n    \n    // Write your code here\n\
    \    \n    // Write your code here\n    \n    // Write your code here\n    \n\
    \    // Write your code here\n    \n    // Write your code here\n    \n    //\
    \ Write your code here\n    \n    // Write your code here\n    \n    // Write\
    \ your code here\n    \n    // Write your code here\n    \n    // Write your code\
    \ here\n    \n    // Write your code here\n    \n    // Write your code here\n\
    \    \n    // Write your code here\n    \n    // Write your code here\n    \n\
    \    // Write your code here\n    \n    // Write your code here\n    \n    //\
    \ Write your code here\n    \n    // Write your code here\n    \n    // Write\
    \ your code here\n    \n    // Write your code here\n    \n    // Write your code\
    \ here\n    \n    // Write your code here\n    \n    // Write your code here\n\
    \    \n    // Write your code here\n    \n    // Write your code here\n    \n\
    \    // Write your code here\n    \n    // Write your code here\n    \n    //\
    \ Write your code here\n    \n    // Write your code here\n    \n    // Write\
    \ your code here\n    \n    // Write your code here\n    \n    // Write your code\
    \ here\n    \n    // Write your code here\n    \n    // Write your code here\n\
    \    \n    // Write your code here\n    \n    // \n}\nint main() {\n    auto candidate\
    \ = valid_date;\n    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"\
    15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n\
    \    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"\
    01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n\
    \    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\"\
    )) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"\
    21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n\
    \    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\"\
    )) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"\
    2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmpffjlar22: /tmp/tmpffjlar22.cpp:167: int main(): Assertion `candidate((\"\
    03-11-2000\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n    // Write your code here\n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n}\nint main() {\n    auto candidate = valid_date;\n\
    \    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"\
    15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n\
    \    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"\
    01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n\
    \    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\"\
    )) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"\
    21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n\
    \    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\"\
    )) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"\
    2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmp2i20yo56: /tmp/tmp2i20yo56.cpp:275: int main(): Assertion `candidate((\"\
    03-11-2000\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n    // Write your code here\n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n}\nint main() {\n    auto candidate = valid_date;\n\
    \    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"\
    15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n\
    \    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"\
    01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n\
    \    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\"\
    )) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"\
    21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n\
    \    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\"\
    )) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"\
    2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmpb9vgkfv6: /tmp/tmpb9vgkfv6.cpp:275: int main(): Assertion `candidate((\"\
    03-11-2000\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n    // Write your code here\n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n}\nint main() {\n    auto candidate = valid_date;\n\
    \    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"\
    15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n\
    \    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"\
    01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n\
    \    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\"\
    )) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"\
    21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n\
    \    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\"\
    )) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"\
    2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmpvxj0ggfa: /tmp/tmpvxj0ggfa.cpp:275: int main(): Assertion `candidate((\"\
    03-11-2000\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n    // Write your code here\n    \n    // Write\
    \ your code here\n    \n    // Write your code here\n    \n    // Write your code\
    \ here\n    \n    // Write your code here\n    \n    // Write your code here\n\
    \    \n    // Write your code here\n    \n    // Write your code here\n    \n\
    \    // Write your code here\n    \n    // Write your code here\n    \n    //\
    \ Write your code here\n    \n    // Write your code here\n    \n    // Write\
    \ your code here\n    \n    // Write your code here\n    \n    // Write your code\
    \ here\n    \n    // Write your code here\n    \n    // Write your code here\n\
    \    \n    // Write your code here\n    \n    // Write your code here\n    \n\
    \    // Write your code here\n    \n    // Write your code here\n    \n    //\
    \ Write your code here\n    \n    // Write your code here\n    \n    // Write\
    \ your code here\n    \n    // Write your code here\n    \n    // Write your code\
    \ here\n    \n    // Write your code here\n    \n    // Write your code here\n\
    \    \n    // Write your code here\n    \n    // Write your code here\n    \n\
    \    // Write your code here\n    \n    // Write your code here\n    \n    //\
    \ Write your code here\n    \n    // Write your code here\n    \n    // Write\
    \ your code here\n    \n    // Write your code here\n    \n    // Write your code\
    \ here\n    \n    // Write your code here\n    \n    // Write your code here\n\
    \    \n    // Write your code here\n    \n    // Write your code here\n    \n\
    \    // Write your code here\n    \n    // Write your code here\n    \n    //\
    \ Write your code here\n    \n    // Write your code here\n    \n    // Write\
    \ your code here\n    \n    // Write your code here\n    \n    // Write your code\
    \ here\n    \n    // Write your code here\n    \n    // Write your code here\n\
    \    \n    // Write your code here\n    \n    // Write your code here\n    \n\
    \    // Write your code here\n    \n    // Write your code here\n    \n    //\
    \ Write your code here\n    \n    // Write your code here\n    \n    // Write\
    \ your code here\n    \n    // Write your code here\n    \n    // Write your code\
    \ here\n    \n    // Write your code here\n    \n    // Write your code here\n\
    \    \n    // Write your code here\n    \n    // Write your code here\n    \n\
    \    // Write your code here\n    \n    // Write your code here\n    \n    //\
    \ Write your code here\n    \n    // Write your code here\n    \n    // Write\
    \ your code here\n    \n    // Write your code here\n    \n    // Write your code\
    \ here\n    \n    // Write your code here\n    \n    // Write your code here\n\
    \    \n    // Write your code here\n    \n    // \n}\nint main() {\n    auto candidate\
    \ = valid_date;\n    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"\
    15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n\
    \    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"\
    01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n\
    \    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\"\
    )) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"\
    21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n\
    \    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\"\
    )) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"\
    2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmpb26z6acc: /tmp/tmpb26z6acc.cpp:167: int main(): Assertion `candidate((\"\
    03-11-2000\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n    // Write your code here\n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n}\nint main() {\n    auto candidate = valid_date;\n\
    \    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"\
    15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n\
    \    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"\
    01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n\
    \    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\"\
    )) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"\
    21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n\
    \    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\"\
    )) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"\
    2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmpl4e05bv5: /tmp/tmpl4e05bv5.cpp:275: int main(): Assertion `candidate((\"\
    03-11-2000\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n    // Write your code here\n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n}\nint main() {\n    auto candidate = valid_date;\n\
    \    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"\
    15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n\
    \    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"\
    01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n\
    \    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\"\
    )) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"\
    21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n\
    \    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\"\
    )) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"\
    2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmppe73irh0: /tmp/tmppe73irh0.cpp:275: int main(): Assertion `candidate((\"\
    03-11-2000\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n    // Write your code here\n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n}\nint main() {\n    auto candidate = valid_date;\n\
    \    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"\
    15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n\
    \    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"\
    01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n\
    \    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\"\
    )) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"\
    21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n\
    \    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\"\
    )) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"\
    2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmpxf4o9707: /tmp/tmpxf4o9707.cpp:275: int main(): Assertion `candidate((\"\
    03-11-2000\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n    bool valid = false;\n    std::string date_str\
    \ = date;\n    if (date_str.size() > 0) {\n        int day;\n        int month;\n\
    \        int year;\n        std::istringstream ss(date_str);\n        ss >> day\
    \ >> month >> year;\n        if (day > 0 && month > 0 && month < 13 && day > 0\
    \ && day <= 31) {\n            if (month == 1) {\n                if (day > 1\
    \ && day <= 29) {\n                    valid = true;\n                }\n    \
    \        } else if (month == 3) {\n                if (day > 1 && day <= 30) {\n\
    \                    valid = true;\n                }\n            } else if (month\
    \ == 5) {\n                if (day > 1 && day <= 31) {\n                    valid\
    \ = true;\n                }\n            } else if (month == 7) {\n         \
    \       if (day > 1 && day <= 31) {\n                    valid = true;\n     \
    \           }\n            } else if (month == 8) {\n                if (day >\
    \ 1 && day <= 30) {\n                    valid = true;\n                }\n  \
    \          } else if (month == 10) {\n                if (day > 1 && day <= 31)\
    \ {\n                    valid = true;\n                }\n            } else\
    \ if (month == 12) {\n                if (day > 1 && day <= 31) {\n          \
    \          valid = true;\n                }\n            }\n        } else if\
    \ (month > 0 && month < 13 && day > 0 && day <= 30) {\n            if (month ==\
    \ 4) {\n                if (day > 1 && day <= 29) {\n                    valid\
    \ = true;\n                }\n            } else if (month == 6) {\n         \
    \       if (day > 1 && day <= 30) {\n                    valid = true;\n     \
    \           }\n            } else if (month == 9) {\n                if (day >\
    \ 1 && day <= 31) {\n                    valid = true;\n                }\n  \
    \          } else if (month == 11) {\n                if (day > 1 && day <= 31)\
    \ {\n                    valid = true;\n                }\n            }\n   \
    \     } else if (month > 0 && month < 13 && day > 0 && day <= 31) {\n        \
    \    if (month == 2) {\n                if (day > 1 && day <= 29) {\n        \
    \            valid = true;\n                }\n            }\n        }\n    }\n\
    \    return valid;\n}\nint main() {\n    auto candidate = valid_date;\n    assert(candidate((\"\
    03-11-2000\")) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n\
    \    assert(candidate((\"04-0-2040\")) == (false));\n    assert(candidate((\"\
    06-04-2020\")) == (true));\n    assert(candidate((\"01-01-2007\")) == (true));\n\
    \    assert(candidate((\"03-32-2011\")) == (false));\n    assert(candidate((\"\
    \")) == (false));\n    assert(candidate((\"04-31-3000\")) == (false));\n    assert(candidate((\"\
    06-06-2005\")) == (true));\n    assert(candidate((\"21-31-2000\")) == (false));\n\
    \    assert(candidate((\"04-12-2003\")) == (true));\n    assert(candidate((\"\
    04122003\")) == (false));\n    assert(candidate((\"20030412\")) == (false));\n\
    \    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"2003-04-12\"\
    )) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n}\n"
  stdout: ''
  stderr: "tmpgwcvdn6j: /tmp/tmpgwcvdn6j.cpp:85: int main(): Assertion `candidate((\"\
    03-11-2000\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n    bool valid = false;\n    // Write your code\
    \ here\n    std::string months[12] = {\n        \"January\", \"February\", \"\
    March\", \"April\", \"May\", \"June\",\n        \"July\", \"August\", \"September\"\
    , \"October\", \"November\", \"December\"\n    };\n    std::string days[31] =\
    \ {\n        \"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\"\
    , \"Friday\", \"Saturday\"\n    };\n    std::string years[12] = {\n        \"\
    2000\", \"2001\", \"2002\", \"2003\", \"2004\", \"2005\", \"2006\", \"2007\",\
    \ \"2008\", \"2009\", \"2010\", \"2011\", \"2012\", \"2013\", \"2014\", \"2015\"\
    , \"2016\", \"2017\", \"2018\", \"2019\", \"2020\", \"2021\", \"2022\", \"2023\"\
    , \"2024\", \"2025\", \"2026\", \"2027\", \"2028\", \"2029\", \"2030\", \"2031\"\
    , \"2032\", \"2033\", \"2034\", \"2035\", \"2036\", \"2037\", \"2038\", \"2039\"\
    , \"2040\", \"2041\", \"2042\", \"2043\", \"2044\", \"2045\", \"2046\", \"2047\"\
    , \"2048\", \"2049\", \"2050\", \"2051\", \"2052\", \"2053\", \"2054\", \"2055\"\
    , \"2056\", \"2057\", \"2058\", \"2059\", \"2060\", \"2061\", \"2062\", \"2063\"\
    , \"2064\", \"2065\", \"2066\", \"2067\", \"2068\", \"2069\", \"2070\", \"2071\"\
    , \"2072\", \"2073\", \"2074\", \"2075\", \"2076\", \"2077\", \"2078\", \"2079\"\
    , \"2080\", \"2081\", \"2082\", \"2083\", \"2084\", \"2085\", \"2086\", \"2087\"\
    , \"2088\", \"2089\", \"2090\", \"2091\", \"2092\", \"2093\", \"2094\", \"2095\"\
    , \"2096\", \"2097\", \"2098\", \"2099\", \"2100\", \"2101\", \"2102\", \"2103\"\
    , \"2104\", \"2105\", \"2106\", \"2107\", \"2108\", \"2109\", \"2110\", \"2111\"\
    , \"2112\", \"2113\", \"2114\", \"2115\", \"2116\", \"2117\", \"2118\", \"2119\"\
    , \"2120\", \"2121\", \"2122\", \"2123\", \"2124\", \"2125\", \"2126\", \"2127\"\
    , \"2128\", \"2129\", \"2130\", \"2131\", \"2132\", \"2133\", \"2134\", \"2135\"\
    , \"2136\", \"2137\", \"2138\", \"2139\", \"2140\", \"2141\", \"2142\", \"2143\"\
    , \"2144\", \"2145\", \"2146\", \"2147\", \"2148\", \"2149\", \"2150\", \"2151\"\
    , \"2152\", \"2153\", \"2154\", \"2155\", \"2156\", \"2157\", \"2158\", \"2159\"\
    , \"2160\", \"216\n}\nint main() {\n    auto candidate = valid_date;\n    assert(candidate((\"\
    03-11-2000\")) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n\
    \    assert(candidate((\"04-0-2040\")) == (false));\n    assert(candidate((\"\
    06-04-2020\")) == (true));\n    assert(candidate((\"01-01-2007\")) == (true));\n\
    \    assert(candidate((\"03-32-2011\")) == (false));\n    assert(candidate((\"\
    \")) == (false));\n    assert(candidate((\"04-31-3000\")) == (false));\n    assert(candidate((\"\
    06-06-2005\")) == (true));\n    assert(candidate((\"21-31-2000\")) == (false));\n\
    \    assert(candidate((\"04-12-2003\")) == (true));\n    assert(candidate((\"\
    04122003\")) == (false));\n    assert(candidate((\"20030412\")) == (false));\n\
    \    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"2003-04-12\"\
    )) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpl8x5b_k7.cpp:27:1297: warning: missing terminating \" character\n\
    \   27 |         \"2000\", \"2001\", \"2002\", \"2003\", \"2004\", \"2005\", \"\
    2006\", \"2007\", \"2008\", \"2009\", \"2010\", \"2011\", \"2012\", \"2013\",\
    \ \"2014\", \"2015\", \"2016\", \"2017\", \"2018\", \"2019\", \"2020\", \"2021\"\
    , \"2022\", \"2023\", \"2024\", \"2025\", \"2026\", \"2027\", \"2028\", \"2029\"\
    , \"2030\", \"2031\", \"2032\", \"2033\", \"2034\", \"2035\", \"2036\", \"2037\"\
    , \"2038\", \"2039\", \"2040\", \"2041\", \"2042\", \"2043\", \"2044\", \"2045\"\
    , \"2046\", \"2047\", \"2048\", \"2049\", \"2050\", \"2051\", \"2052\", \"2053\"\
    , \"2054\", \"2055\", \"2056\", \"2057\", \"2058\", \"2059\", \"2060\", \"2061\"\
    , \"2062\", \"2063\", \"2064\", \"2065\", \"2066\", \"2067\", \"2068\", \"2069\"\
    , \"2070\", \"2071\", \"2072\", \"2073\", \"2074\", \"2075\", \"2076\", \"2077\"\
    , \"2078\", \"2079\", \"2080\", \"2081\", \"2082\", \"2083\", \"2084\", \"2085\"\
    , \"2086\", \"2087\", \"2088\", \"2089\", \"2090\", \"2091\", \"2092\", \"2093\"\
    , \"2094\", \"2095\", \"2096\", \"2097\", \"2098\", \"2099\", \"2100\", \"2101\"\
    , \"2102\", \"2103\", \"2104\", \"2105\", \"2106\", \"2107\", \"2108\", \"2109\"\
    , \"2110\", \"2111\", \"2112\", \"2113\", \"2114\", \"2115\", \"2116\", \"2117\"\
    , \"2118\", \"2119\", \"2120\", \"2121\", \"2122\", \"2123\", \"2124\", \"2125\"\
    , \"2126\", \"2127\", \"2128\", \"2129\", \"2130\", \"2131\", \"2132\", \"2133\"\
    , \"2134\", \"2135\", \"2136\", \"2137\", \"2138\", \"2139\", \"2140\", \"2141\"\
    , \"2142\", \"2143\", \"2144\", \"2145\", \"2146\", \"2147\", \"2148\", \"2149\"\
    , \"2150\", \"2151\", \"2152\", \"2153\", \"2154\", \"2155\", \"2156\", \"2157\"\
    , \"2158\", \"2159\", \"2160\", \"216\n      |                               \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                  ^\n/tmp/tmpl8x5b_k7.cpp:27:1297:\
    \ error: missing terminating \" character\n   27 |         \"2000\", \"2001\"\
    , \"2002\", \"2003\", \"2004\", \"2005\", \"2006\", \"2007\", \"2008\", \"2009\"\
    , \"2010\", \"2011\", \"2012\", \"2013\", \"2014\", \"2015\", \"2016\", \"2017\"\
    , \"2018\", \"2019\", \"2020\", \"2021\", \"2022\", \"2023\", \"2024\", \"2025\"\
    , \"2026\", \"2027\", \"2028\", \"2029\", \"2030\", \"2031\", \"2032\", \"2033\"\
    , \"2034\", \"2035\", \"2036\", \"2037\", \"2038\", \"2039\", \"2040\", \"2041\"\
    , \"2042\", \"2043\", \"2044\", \"2045\", \"2046\", \"2047\", \"2048\", \"2049\"\
    , \"2050\", \"2051\", \"2052\", \"2053\", \"2054\", \"2055\", \"2056\", \"2057\"\
    , \"2058\", \"2059\", \"2060\", \"2061\", \"2062\", \"2063\", \"2064\", \"2065\"\
    , \"2066\", \"2067\", \"2068\", \"2069\", \"2070\", \"2071\", \"2072\", \"2073\"\
    , \"2074\", \"2075\", \"2076\", \"2077\", \"2078\", \"2079\", \"2080\", \"2081\"\
    , \"2082\", \"2083\", \"2084\", \"2085\", \"2086\", \"2087\", \"2088\", \"2089\"\
    , \"2090\", \"2091\", \"2092\", \"2093\", \"2094\", \"2095\", \"2096\", \"2097\"\
    , \"2098\", \"2099\", \"2100\", \"2101\", \"2102\", \"2103\", \"2104\", \"2105\"\
    , \"2106\", \"2107\", \"2108\", \"2109\", \"2110\", \"2111\", \"2112\", \"2113\"\
    , \"2114\", \"2115\", \"2116\", \"2117\", \"2118\", \"2119\", \"2120\", \"2121\"\
    , \"2122\", \"2123\", \"2124\", \"2125\", \"2126\", \"2127\", \"2128\", \"2129\"\
    , \"2130\", \"2131\", \"2132\", \"2133\", \"2134\", \"2135\", \"2136\", \"2137\"\
    , \"2138\", \"2139\", \"2140\", \"2141\", \"2142\", \"2143\", \"2144\", \"2145\"\
    , \"2146\", \"2147\", \"2148\", \"2149\", \"2150\", \"2151\", \"2152\", \"2153\"\
    , \"2154\", \"2155\", \"2156\", \"2157\", \"2158\", \"2159\", \"2160\", \"216\n\
    \      |                                                                     \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \            ^~~~\n/tmp/tmpl8x5b_k7.cpp: In function \u2018bool valid_date(std::string)\u2019\
    :\n/tmp/tmpl8x5b_k7.cpp:28:1: error: too many initializers for \u2018std::string\
    \ [12]\u2019 {aka \u2018std::__cxx11::basic_string<char> [12]\u2019}\n   28 |\
    \ }\n      | ^\n/tmp/tmpl8x5b_k7.cpp:29:1: error: expected \u2018,\u2019 or \u2018\
    ;\u2019 before \u2018int\u2019\n   29 | int main() {\n      | ^~~\n/tmp/tmpl8x5b_k7.cpp:47:1:\
    \ error: expected \u2018}\u2019 at end of input\n   47 | }\n      | ^\n/tmp/tmpl8x5b_k7.cpp:16:35:\
    \ note: to match this \u2018{\u2019\n   16 | bool valid_date(std::string date)\
    \ {\n      |                                   ^\n/tmp/tmpl8x5b_k7.cpp:47:1: warning:\
    \ no return statement in function returning non-void [-Wreturn-type]\n   47 |\
    \ }\n      | ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n    // Write your code here\n    \n    // Write\
    \ your code here\n    \n    // Write your code here\n    \n    // Write your code\
    \ here\n    \n    // Write your code here\n    \n    // Write your code here\n\
    \    \n    // Write your code here\n    \n    // Write your code here\n    \n\
    \    // Write your code here\n    \n    // Write your code here\n    \n    //\
    \ Write your code here\n    \n    // Write your code here\n    \n    // Write\
    \ your code here\n    \n    // Write your code here\n    \n    // Write your code\
    \ here\n    \n    // Write your code here\n    \n    // Write your code here\n\
    \    \n    // Write your code here\n    \n    // Write your code here\n    \n\
    \    // Write your code here\n    \n    // Write your code here\n    \n    //\
    \ Write your code here\n    \n    // Write your code here\n    \n    // Write\
    \ your code here\n    \n    // Write your code here\n    \n    // Write your code\
    \ here\n    \n    // Write your code here\n    \n    // Write your code here\n\
    \    \n    // Write your code here\n    \n    // Write your code here\n    \n\
    \    // Write your code here\n    \n    // Write your code here\n    \n    //\
    \ Write your code here\n    \n    // Write your code here\n    \n    // Write\
    \ your code here\n    \n    // Write your code here\n    \n    // Write your code\
    \ here\n    \n    // Write your code here\n    \n    // Write your code here\n\
    \    \n    // Write your code here\n    \n    // Write your code here\n    \n\
    \    // Write your code here\n    \n    // Write your code here\n    \n    //\
    \ Write your code here\n    \n    // Write your code here\n    \n    // Write\
    \ your code here\n    \n    // Write your code here\n    \n    // Write your code\
    \ here\n    \n    // Write your code here\n    \n    // Write your code here\n\
    \    \n    // Write your code here\n    \n    // Write your code here\n    \n\
    \    // Write your code here\n    \n    // Write your code here\n    \n    //\
    \ Write your code here\n    \n    // Write your code here\n    \n    // Write\
    \ your code here\n    \n    // Write your code here\n    \n    // Write your code\
    \ here\n    \n    // Write your code here\n    \n    // Write your code here\n\
    \    \n    // Write your code here\n    \n    // Write your code here\n    \n\
    \    // Write your code here\n    \n    // Write your code here\n    \n    //\
    \ Write your code here\n    \n    // Write your code here\n    \n    // Write\
    \ your code here\n    \n    // Write your code here\n    \n    // Write your code\
    \ here\n    \n    // Write your code here\n    \n    // Write your code here\n\
    \    \n    // Write your code here\n    \n    // \n}\nint main() {\n    auto candidate\
    \ = valid_date;\n    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"\
    15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n\
    \    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"\
    01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n\
    \    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\"\
    )) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"\
    21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n\
    \    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\"\
    )) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"\
    2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmphyedt1ci: /tmp/tmphyedt1ci.cpp:167: int main(): Assertion `candidate((\"\
    03-11-2000\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n    // Write your code here\n    bool valid\
    \ = true;\n    int day;\n    int month;\n    int year;\n    std::stringstream\
    \ ss;\n    ss << date;\n    ss >> day >> month >> year;\n    if (day < 1 || day\
    \ > 31) {\n        valid = false;\n    }\n    if (month < 1 || month > 12) {\n\
    \        valid = false;\n    }\n    if (month == 2 && day > 29) {\n        valid\
    \ = false;\n    }\n    if (month == 4 && day > 30) {\n        valid = false;\n\
    \    }\n    if (month == 6 && day > 31) {\n        valid = false;\n    }\n   \
    \ if (month == 9 && day > 30) {\n        valid = false;\n    }\n    if (month\
    \ == 11 && day > 31) {\n        valid = false;\n    }\n    if (month == 1 && day\
    \ > 31) {\n        valid = false;\n    }\n    if (month == 3 && day > 31) {\n\
    \        valid = false;\n    }\n    if (month == 5 && day > 31) {\n        valid\
    \ = false;\n    }\n    if (month == 7 && day > 31) {\n        valid = false;\n\
    \    }\n    if (month == 8 && day > 31) {\n        valid = false;\n    }\n   \
    \ if (month == 10 && day > 31) {\n        valid = false;\n    }\n    if (month\
    \ == 12 && day > 31) {\n        valid = false;\n    }\n    return valid;\n}\n\
    int main() {\n    auto candidate = valid_date;\n    assert(candidate((\"03-11-2000\"\
    )) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"\
    04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n\
    \    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"\
    03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"\
    04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n\
    \    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"\
    04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n\
    \    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\"\
    )) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"\
    04-2003\")) == (false));\n}\n"
  stdout: ''
  stderr: "tmp46p2y721: /tmp/tmp46p2y721.cpp:71: int main(): Assertion `candidate((\"\
    03-11-2000\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n    // Write your code here\n    \n    // Write\
    \ your code here\n    \n    // Write your code here\n    \n    // Write your code\
    \ here\n    \n    // Write your code here\n    \n    // Write your code here\n\
    \    \n    // Write your code here\n    \n    // Write your code here\n    \n\
    \    // Write your code here\n    \n    // Write your code here\n    \n    //\
    \ Write your code here\n    \n    // Write your code here\n    \n    // Write\
    \ your code here\n    \n    // Write your code here\n    \n    // Write your code\
    \ here\n    \n    // Write your code here\n    \n    // Write your code here\n\
    \    \n    // Write your code here\n    \n    // Write your code here\n    \n\
    \    // Write your code here\n    \n    // Write your code here\n    \n    //\
    \ Write your code here\n    \n    // Write your code here\n    \n    // Write\
    \ your code here\n    \n    // Write your code here\n    \n    // Write your code\
    \ here\n    \n    // Write your code here\n    \n    // Write your code here\n\
    \    \n    // Write your code here\n    \n    // Write your code here\n    \n\
    \    // Write your code here\n    \n    // Write your code here\n    \n    //\
    \ Write your code here\n    \n    // Write your code here\n    \n    // Write\
    \ your code here\n    \n    // Write your code here\n    \n    // Write your code\
    \ here\n    \n    // Write your code here\n    \n    // Write your code here\n\
    \    \n    // Write your code here\n    \n    // Write your code here\n    \n\
    \    // Write your code here\n    \n    // Write your code here\n    \n    //\
    \ Write your code here\n    \n    // Write your code here\n    \n    // Write\
    \ your code here\n    \n    // Write your code here\n    \n    // Write your code\
    \ here\n    \n    // Write your code here\n    \n    // Write your code here\n\
    \    \n    // Write your code here\n    \n    // Write your code here\n    \n\
    \    // Write your code here\n    \n    // Write your code here\n    \n    //\
    \ Write your code here\n    \n    // Write your code here\n    \n    // Write\
    \ your code here\n    \n    // Write your code here\n    \n    // Write your code\
    \ here\n    \n    // Write your code here\n    \n    // Write your code here\n\
    \    \n    // Write your code here\n    \n    // Write your code here\n    \n\
    \    // Write your code here\n    \n    // Write your code here\n    \n    //\
    \ Write your code here\n    \n    // Write your code here\n    \n    // Write\
    \ your code here\n    \n    // Write your code here\n    \n    // Write your code\
    \ here\n    \n    // Write your code here\n    \n    // Write your code here\n\
    \    \n    // Write your code here\n    \n    // \n}\nint main() {\n    auto candidate\
    \ = valid_date;\n    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"\
    15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n\
    \    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"\
    01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n\
    \    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\"\
    )) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"\
    21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n\
    \    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\"\
    )) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"\
    2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmpb6miqvel: /tmp/tmpb6miqvel.cpp:167: int main(): Assertion `candidate((\"\
    03-11-2000\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n    // Write your code here\n    bool valid\
    \ = false;\n    int day;\n    int month;\n    int year;\n    std::stringstream\
    \ ss(date);\n    ss >> month >> day >> year;\n    if (month < 1 || month > 12)\
    \ return false;\n    if (day < 1 || day > 31) return false;\n    if (month ==\
    \ 2 && day > 29) return false;\n    if (month == 4 || month == 6 || month == 9\
    \ || month == 11 && day > 30) return false;\n    if (month == 1 && day > 31) return\
    \ false;\n    if (month == 3 && day > 31) return false;\n    if (month == 5 &&\
    \ day > 30) return false;\n    if (month == 7 && day > 31) return false;\n   \
    \ if (month == 8 && day > 31) return false;\n    if (month == 10 && day > 31)\
    \ return false;\n    if (month == 12 && day > 31) return false;\n    if (month\
    \ == 1 && day > 31) return false;\n    if (month == 3 && day > 31) return false;\n\
    \    if (month == 5 && day > 30) return false;\n    if (month == 7 && day > 31)\
    \ return false;\n    if (month == 8 && day > 31) return false;\n    if (month\
    \ == 10 && day > 31) return false;\n    if (month == 12 && day > 31) return false;\n\
    \    if (month == 1 && day > 31) return false;\n    if (month == 3 && day > 31)\
    \ return false;\n    if (month == 5 && day > 30) return false;\n    if (month\
    \ == 7 && day > 31) return false;\n    if (month == 8 && day > 31) return false;\n\
    \    if (month == 10 && day > 31) return false;\n    if (month == 12 && day >\
    \ 31) return false;\n    if (month == 1 && day > 31) return false;\n    if (month\
    \ == 3 && day > 31) return false;\n    if (month == 5 && day > 30) return false;\n\
    \    if (month == 7 && day > 31) return false;\n    if (month == 8 && day > 31)\
    \ return false;\n    if (month == 10 && day > 31) return false;\n    if (month\
    \ == 12 && day > 31) return false;\n    if (month == 1 && day > 31) return false;\n\
    \    if (month == 3 && day > 31) return false;\n    if (month == 5 && day > 30)\
    \ return false;\n    if (month == 7 && day > 31) return false;\n    if (month\
    \ == 8 && day > 31) return false;\n    if (month == 10 && day > 31) return false;\n\
    \    if (month == 12 && day > 31) return false;\n    if (month == 1 && day > 31)\
    \ return false;\n    if (month == 3 && day > 31) return false;\n    if (month\
    \ == 5 && day > 30) return false;\n    if (month == 7 && day > 31) return false;\n\
    \    if (month == 8 && day > 31) return false;\n    if (month == 10 && day > 31)\
    \ return false;\n    if (month == 12 && day > 31) return false;\n    if (month\
    \ == 1 && day > 31) return false;\n    if (month == 3 && day > 31) return false;\n\
    \    if (month == 5 && day > 30) return false;\n    if (month == 7 && day > 31)\
    \ return false;\n    if (month == 8 && day > 31) return false;\n    if (month\
    \ == 10 && day \n}\nint main() {\n    auto candidate = valid_date;\n    assert(candidate((\"\
    03-11-2000\")) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n\
    \    assert(candidate((\"04-0-2040\")) == (false));\n    assert(candidate((\"\
    06-04-2020\")) == (true));\n    assert(candidate((\"01-01-2007\")) == (true));\n\
    \    assert(candidate((\"03-32-2011\")) == (false));\n    assert(candidate((\"\
    \")) == (false));\n    assert(candidate((\"04-31-3000\")) == (false));\n    assert(candidate((\"\
    06-06-2005\")) == (true));\n    assert(candidate((\"21-31-2000\")) == (false));\n\
    \    assert(candidate((\"04-12-2003\")) == (true));\n    assert(candidate((\"\
    04122003\")) == (false));\n    assert(candidate((\"20030412\")) == (false));\n\
    \    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"2003-04-12\"\
    )) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp3z7s7_qx.cpp: In function \u2018bool valid_date(std::string)\u2019\
    :\n/tmp/tmp3z7s7_qx.cpp:75:27: error: expected \u2018)\u2019 before \u2018}\u2019\
    \ token\n   75 |     if (month == 10 && day\n      |        ~                \
    \  ^\n      |                           )\n   76 | }\n      | ~              \
    \            \n/tmp/tmp3z7s7_qx.cpp:76:1: error: expected primary-expression before\
    \ \u2018}\u2019 token\n   76 | }\n      | ^\n/tmp/tmp3z7s7_qx.cpp:76:1: warning:\
    \ control reaches end of non-void function [-Wreturn-type]\n   76 | }\n      |\
    \ ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n    // Write your code here\n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n}\nint main() {\n    auto candidate = valid_date;\n\
    \    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"\
    15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n\
    \    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"\
    01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n\
    \    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\"\
    )) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"\
    21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n\
    \    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\"\
    )) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"\
    2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmpjc7jxjob: /tmp/tmpjc7jxjob.cpp:275: int main(): Assertion `candidate((\"\
    03-11-2000\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n    // Write your code here\n    \n    bool\
    \ valid = true;\n    int day;\n    int month;\n    int year;\n    \n    std::stringstream\
    \ ss(date);\n    ss >> month >> day >> year;\n    \n    if(month < 1 || month\
    \ > 12){\n        valid = false;\n    }\n    \n    if(day < 1 || day > 31){\n\
    \        valid = false;\n    }\n    \n    if(month == 2 && day > 29){\n      \
    \  valid = false;\n    }\n    \n    if(day > 31 && month == 2 && day > 29){\n\
    \        valid = false;\n    }\n    \n    if(day > 31 && month == 2 && day > 31){\n\
    \        valid = false;\n    }\n    \n    if(day > 31 && month == 2 && day > 30){\n\
    \        valid = false;\n    }\n    \n    if(day > 31 && month == 3 && day > 31){\n\
    \        valid = false;\n    }\n    \n    if(day > 31 && month == 3 && day > 30){\n\
    \        valid = false;\n    }\n    \n    if(day > 31 && month == 3 && day > 29){\n\
    \        valid = false;\n    }\n    \n    if(day > 31 && month == 4 && day > 31){\n\
    \        valid = false;\n    }\n    \n    if(day > 31 && month == 4 && day > 30){\n\
    \        valid = false;\n    }\n    \n    if(day > 31 && month == 4 && day > 29){\n\
    \        valid = false;\n    }\n    \n    if(day > 31 && month == 4 && day > 28){\n\
    \        valid = false;\n    }\n    \n    if(day > 31 && month == 5 && day > 31){\n\
    \        valid = false;\n    }\n    \n    if(day > 31 && month == 5 && day > 30){\n\
    \        valid = false;\n    }\n    \n    if(day > 31 && month == 5 && day > 29){\n\
    \        valid = false;\n    }\n    \n    if(day > 31 && month == 5 && day > 28){\n\
    \        valid = false;\n    }\n    \n    if(day > 31 && month == 6 && day > 31){\n\
    \        valid = false;\n    }\n    \n    if(day > 31 && month == 6 && day > 30){\n\
    \        valid = false;\n    }\n    \n    if(day > 31 && month == 6 && day > 29){\n\
    \        valid = false;\n    }\n    \n    if(day > 31 && month == 6 && day > 28){\n\
    \        valid = false;\n    }\n    \n    if(day > 31 && month == 7 && day > 31){\n\
    \        valid = false;\n    }\n    \n    if(day > 31 && month == 7 && day > \n\
    }\nint main() {\n    auto candidate = valid_date;\n    assert(candidate((\"03-11-2000\"\
    )) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"\
    04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n\
    \    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"\
    03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"\
    04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n\
    \    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"\
    04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n\
    \    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\"\
    )) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"\
    04-2003\")) == (false));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp1wzgsmso.cpp: In function \u2018bool valid_date(std::string)\u2019\
    :\n/tmp/tmp1wzgsmso.cpp:116:1: error: expected primary-expression before \u2018\
    }\u2019 token\n  116 | }\n      | ^\n/tmp/tmp1wzgsmso.cpp:115:39: error: expected\
    \ \u2018)\u2019 before \u2018}\u2019 token\n  115 |     if(day > 31 && month ==\
    \ 7 && day >\n      |       ~                               ^\n      |       \
    \                                )\n  116 | }\n      | ~                     \
    \                 \n/tmp/tmp1wzgsmso.cpp:116:1: error: expected primary-expression\
    \ before \u2018}\u2019 token\n  116 | }\n      | ^\n/tmp/tmp1wzgsmso.cpp:116:1:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n    // Write your code here\n    \n    bool\
    \ valid = false;\n    \n    std::string date_str = date;\n    \n    if(date_str.empty()){\n\
    \        valid = false;\n    }\n    \n    int day;\n    int month;\n    int year;\n\
    \    \n    std::stringstream ss(date_str);\n    \n    ss >> month >> day >> year;\n\
    \    \n    if(month < 1 || month > 12){\n        valid = false;\n    }\n    \n\
    \    if(day < 1 || day > 31){\n        valid = false;\n    }\n    \n    if(month\
    \ == 2){\n        if(day > 29){\n            valid = false;\n        }\n    }\n\
    \    \n    if(month == 4){\n        if(day > 30){\n            valid = false;\n\
    \        }\n    }\n    \n    if(month == 6){\n        if(day > 30){\n        \
    \    valid = false;\n        }\n    }\n    \n    if(month == 9){\n        if(day\
    \ > 30){\n            valid = false;\n        }\n    }\n    \n    if(month ==\
    \ 11){\n        if(day > 30){\n            valid = false;\n        }\n    }\n\
    \    \n    if(month == 1){\n        if(day > 31){\n            valid = false;\n\
    \        }\n    }\n    \n    if(month == 3 || month == 5 || month == 7 || month\
    \ == 8 || month == 10 || month == 12){\n        if(day > 31){\n            valid\
    \ = false;\n        }\n    }\n    \n    return valid;\n}\nint main() {\n    auto\
    \ candidate = valid_date;\n    assert(candidate((\"03-11-2000\")) == (true));\n\
    \    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"\
    04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n\
    \    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"\
    03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"\
    04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n\
    \    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"\
    04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n\
    \    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\"\
    )) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"\
    04-2003\")) == (false));\n}\n"
  stdout: ''
  stderr: "tmpekgaj8t7: /tmp/tmpekgaj8t7.cpp:89: int main(): Assertion `candidate((\"\
    03-11-2000\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n    // Write your code here\n    bool valid\
    \ = true;\n    int day;\n    int month;\n    int year;\n    std::stringstream\
    \ ss;\n    ss << date;\n    ss >> day >> month >> year;\n    if (day < 1 || day\
    \ > 31) {\n        valid = false;\n    }\n    if (month < 1 || month > 12) {\n\
    \        valid = false;\n    }\n    if (year < 1 || year > 9999) {\n        valid\
    \ = false;\n    }\n    return valid;\n}\nint main() {\n    auto candidate = valid_date;\n\
    \    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"\
    15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n\
    \    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"\
    01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n\
    \    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\"\
    )) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"\
    21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n\
    \    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\"\
    )) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"\
    2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmpywnaqx2a: /tmp/tmpywnaqx2a.cpp:38: int main(): Assertion `candidate((\"\
    03-11-2000\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n    // Write your code here\n    \n    // Your\
    \ code here\n    \n    return true;\n}\nint main() {\n    auto candidate = valid_date;\n\
    \    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"\
    15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n\
    \    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"\
    01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n\
    \    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\"\
    )) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"\
    21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n\
    \    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\"\
    )) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"\
    2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmp6j_81m1z: /tmp/tmp6j_81m1z.cpp:26: int main(): Assertion `candidate((\"\
    15-01-2012\")) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n    // Your code goes here\n}\nint main() {\n\
    \    auto candidate = valid_date;\n    assert(candidate((\"03-11-2000\")) == (true));\n\
    \    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"\
    04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n\
    \    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"\
    03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"\
    04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n\
    \    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"\
    04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n\
    \    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\"\
    )) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"\
    04-2003\")) == (false));\n}\n"
  stdout: ''
  stderr: "tmpqkcbbuhw: /tmp/tmpqkcbbuhw.cpp:21: int main(): Assertion `candidate((\"\
    03-11-2000\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n    // Write your code here\n    int day;\n\
    \    int month;\n    int year;\n    std::stringstream ss;\n    ss << date;\n \
    \   ss >> day >> month >> year;\n    if (day < 1 || day > 31) {\n        return\
    \ false;\n    }\n    if (month < 1 || month > 12) {\n        return false;\n \
    \   }\n    if (year < 1 || year > 9999) {\n        return false;\n    }\n    return\
    \ true;\n}\nint main() {\n    auto candidate = valid_date;\n    assert(candidate((\"\
    03-11-2000\")) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n\
    \    assert(candidate((\"04-0-2040\")) == (false));\n    assert(candidate((\"\
    06-04-2020\")) == (true));\n    assert(candidate((\"01-01-2007\")) == (true));\n\
    \    assert(candidate((\"03-32-2011\")) == (false));\n    assert(candidate((\"\
    \")) == (false));\n    assert(candidate((\"04-31-3000\")) == (false));\n    assert(candidate((\"\
    06-06-2005\")) == (true));\n    assert(candidate((\"21-31-2000\")) == (false));\n\
    \    assert(candidate((\"04-12-2003\")) == (true));\n    assert(candidate((\"\
    04122003\")) == (false));\n    assert(candidate((\"20030412\")) == (false));\n\
    \    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"2003-04-12\"\
    )) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n}\n"
  stdout: ''
  stderr: "tmpku3abjoi: /tmp/tmpku3abjoi.cpp:37: int main(): Assertion `candidate((\"\
    03-11-2000\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n    // Write your code here\n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n}\nint main() {\n    auto candidate = valid_date;\n\
    \    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"\
    15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n\
    \    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"\
    01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n\
    \    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\"\
    )) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"\
    21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n\
    \    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\"\
    )) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"\
    2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmpqpru1ye4: /tmp/tmpqpru1ye4.cpp:275: int main(): Assertion `candidate((\"\
    03-11-2000\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n    bool valid = true;\n    int day;\n    int\
    \ month;\n    int year;\n    std::stringstream ss(date);\n    ss >> month >> day\
    \ >> year;\n    if (month < 1 || month > 12) valid = false;\n    if (day < 1 ||\
    \ day > 31) valid = false;\n    if (month == 2 && day > 29) valid = false;\n \
    \   if (month == 4 || month == 6 || month == 9 || month == 11 && day > 30) valid\
    \ = false;\n    if (month == 1 && day > 31) valid = false;\n    if (month == 3\
    \ && day > 30) valid = false;\n    if (month == 5 && day > 31) valid = false;\n\
    \    if (month == 7 && day > 31) valid = false;\n    if (month == 8 && day > 31)\
    \ valid = false;\n    if (month == 10 && day > 31) valid = false;\n    if (month\
    \ == 12 && day > 31) valid = false;\n    if (month == 1 && day > 31) valid = false;\n\
    \    if (month == 3 && day > 30) valid = false;\n    if (month == 5 && day > 31)\
    \ valid = false;\n    if (month == 7 && day > 31) valid = false;\n    if (month\
    \ == 8 && day > 31) valid = false;\n    if (month == 10 && day > 31) valid = false;\n\
    \    if (month == 12 && day > 31) valid = false;\n    if (month == 1 && day >\
    \ 31) valid = false;\n    if (month == 3 && day > 30) valid = false;\n    if (month\
    \ == 5 && day > 31) valid = false;\n    if (month == 7 && day > 31) valid = false;\n\
    \    if (month == 8 && day > 31) valid = false;\n    if (month == 10 && day >\
    \ 31) valid = false;\n    if (month == 12 && day > 31) valid = false;\n    if\
    \ (month == 1 && day > 31) valid = false;\n    if (month == 3 && day > 30) valid\
    \ = false;\n    if (month == 5 && day > 31) valid = false;\n    if (month == 7\
    \ && day > 31) valid = false;\n    if (month == 8 && day > 31) valid = false;\n\
    \    if (month == 10 && day > 31) valid = false;\n    if (month == 12 && day >\
    \ 31) valid = false;\n    if (month == 1 && day > 31) valid = false;\n    if (month\
    \ == 3 && day > 30) valid = false;\n    if (month == 5 && day > 31) valid = false;\n\
    \    if (month == 7 && day > 31) valid = false;\n    if (month == 8 && day > 31)\
    \ valid = false;\n    if (month == 10 && day > 31) valid = false;\n    if (month\
    \ == 12 && day > 31) valid = false;\n    if (month == 1 && day > 31) valid = false;\n\
    \    if (month == 3 && day > 30) valid = false;\n    if (month == 5 && day > 31)\
    \ valid = false;\n    if (month == 7 && day > 31\n}\nint main() {\n    auto candidate\
    \ = valid_date;\n    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"\
    15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n\
    \    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"\
    01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n\
    \    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\"\
    )) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"\
    21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n\
    \    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\"\
    )) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"\
    2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n\
    }\n"
  stdout: ''
  stderr: "/tmp/tmpq0id5pdb.cpp: In function \u2018bool valid_date(std::string)\u2019\
    :\n/tmp/tmpq0id5pdb.cpp:65:31: error: expected \u2018)\u2019 before \u2018}\u2019\
    \ token\n   65 |     if (month == 7 && day > 31\n      |        ~            \
    \          ^\n      |                               )\n   66 | }\n      | ~  \
    \                            \n/tmp/tmpq0id5pdb.cpp:66:1: error: expected primary-expression\
    \ before \u2018}\u2019 token\n   66 | }\n      | ^\n/tmp/tmpq0id5pdb.cpp:66:1:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n    // Write your code here\n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n}\nint main() {\n    auto candidate = valid_date;\n\
    \    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"\
    15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n\
    \    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"\
    01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n\
    \    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\"\
    )) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"\
    21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n\
    \    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\"\
    )) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"\
    2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmp_4067m9j: /tmp/tmp_4067m9j.cpp:275: int main(): Assertion `candidate((\"\
    03-11-2000\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n    // Write your code here\n    int day;\n\
    \    int month;\n    int year;\n    std::stringstream ss;\n    ss << date;\n \
    \   ss >> day >> month >> year;\n    if(day < 1 || day > 31 || month < 1 || month\
    \ > 12 || year < 1000 || year > 2020) {\n        return false;\n    }\n    else\
    \ if(month == 2) {\n        if(day > 29) {\n            return false;\n      \
    \  }\n    }\n    else if(month == 4 || month == 6 || month == 9 || month == 11)\
    \ {\n        if(day > 30) {\n            return false;\n        }\n    }\n   \
    \ else if(month == 1) {\n        if(day > 31) {\n            return false;\n \
    \       }\n    }\n    return true;\n}\nint main() {\n    auto candidate = valid_date;\n\
    \    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"\
    15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n\
    \    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"\
    01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n\
    \    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\"\
    )) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"\
    21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n\
    \    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\"\
    )) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"\
    2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmp_ga38vms: /tmp/tmp_ga38vms.cpp:46: int main(): Assertion `candidate((\"\
    03-11-2000\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n    // Write your code here\n    \n    // Write\
    \ your code here\n    \n    // Write your code here\n    \n    // Write your code\
    \ here\n    \n    // Write your code here\n    \n    // Write your code here\n\
    \    \n    // Write your code here\n    \n    // Write your code here\n    \n\
    \    // Write your code here\n    \n    // Write your code here\n    \n    //\
    \ Write your code here\n    \n    // Write your code here\n    \n    // Write\
    \ your code here\n    \n    // Write your code here\n    \n    // Write your code\
    \ here\n    \n    // Write your code here\n    \n    // Write your code here\n\
    \    \n    // Write your code here\n    \n    // Write your code here\n    \n\
    \    // Write your code here\n    \n    // Write your code here\n    \n    //\
    \ Write your code here\n    \n    // Write your code here\n    \n    // Write\
    \ your code here\n    \n    // Write your code here\n    \n    // Write your code\
    \ here\n    \n    // Write your code here\n    \n    // Write your code here\n\
    \    \n    // Write your code here\n    \n    // Write your code here\n    \n\
    \    // Write your code here\n    \n    // Write your code here\n    \n    //\
    \ Write your code here\n    \n    // Write your code here\n    \n    // Write\
    \ your code here\n    \n    // Write your code here\n    \n    // Write your code\
    \ here\n    \n    // Write your code here\n    \n    // Write your code here\n\
    \    \n    // Write your code here\n    \n    // Write your code here\n    \n\
    \    // Write your code here\n    \n    // Write your code here\n    \n    //\
    \ Write your code here\n    \n    // Write your code here\n    \n    // Write\
    \ your code here\n    \n    // Write your code here\n    \n    // Write your code\
    \ here\n    \n    // Write your code here\n    \n    // Write your code here\n\
    \    \n    // Write your code here\n    \n    // Write your code here\n    \n\
    \    // Write your code here\n    \n    // Write your code here\n    \n    //\
    \ Write your code here\n    \n    // Write your code here\n    \n    // Write\
    \ your code here\n    \n    // Write your code here\n    \n    // Write your code\
    \ here\n    \n    // Write your code here\n    \n    // Write your code here\n\
    \    \n    // Write your code here\n    \n    // Write your code here\n    \n\
    \    // Write your code here\n    \n    // Write your code here\n    \n    //\
    \ Write your code here\n    \n    // Write your code here\n    \n    // Write\
    \ your code here\n    \n    // Write your code here\n    \n    // Write your code\
    \ here\n    \n    // Write your code here\n    \n    // Write your code here\n\
    \    \n    // Write your code here\n    \n    // \n}\nint main() {\n    auto candidate\
    \ = valid_date;\n    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"\
    15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n\
    \    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"\
    01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n\
    \    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\"\
    )) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"\
    21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n\
    \    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\"\
    )) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"\
    2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmp2l0z5g6n: /tmp/tmp2l0z5g6n.cpp:167: int main(): Assertion `candidate((\"\
    03-11-2000\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n    // Write your code here\n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n}\nint main() {\n    auto candidate = valid_date;\n\
    \    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"\
    15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n\
    \    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"\
    01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n\
    \    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\"\
    )) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"\
    21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n\
    \    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\"\
    )) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"\
    2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmpolaqd5st: /tmp/tmpolaqd5st.cpp:275: int main(): Assertion `candidate((\"\
    03-11-2000\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n    // Write your code here\n    int day;\n\
    \    int month;\n    int year;\n    std::stringstream ss;\n    ss << date;\n \
    \   ss >> day >> month >> year;\n    if (day < 1 || day > 31) {\n        return\
    \ false;\n    }\n    if (month < 1 || month > 12) {\n        return false;\n \
    \   }\n    if (year < 1000 || year > 9999) {\n        return false;\n    }\n \
    \   if (month == 2) {\n        if (day > 29) {\n            return false;\n  \
    \      }\n    }\n    return true;\n}\nint main() {\n    auto candidate = valid_date;\n\
    \    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"\
    15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n\
    \    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"\
    01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n\
    \    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\"\
    )) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"\
    21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n\
    \    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\"\
    )) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"\
    2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmpre64u105: /tmp/tmpre64u105.cpp:42: int main(): Assertion `candidate((\"\
    03-11-2000\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n    // Write your code here\n    \n    int day;\n\
    \    int month;\n    int year;\n    \n    std::stringstream ss(date);\n    ss\
    \ >> month >> day >> year;\n    \n    if(month < 1 || month > 12){\n        return\
    \ false;\n    }\n    \n    if(day < 1 || day > 31){\n        return false;\n \
    \   }\n    \n    if(year < 2000 || year > 2040) {\n        return false;\n   \
    \ }\n    \n    return true;\n}\nint main() {\n    auto candidate = valid_date;\n\
    \    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"\
    15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n\
    \    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"\
    01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n\
    \    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\"\
    )) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"\
    21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n\
    \    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\"\
    )) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"\
    2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmpcf6bbt_g: /tmp/tmpcf6bbt_g.cpp:42: int main(): Assertion `candidate((\"\
    03-11-2000\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n    // Write your code here\n    \n    bool\
    \ valid = true;\n    \n    if(!date.empty()) {\n        valid = false;\n    }\n\
    \    \n    int daysInMonth[12] = {31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30,\
    \ 31};\n    \n    if(daysInMonth[date.substr(0,2)] < 1 || daysInMonth[date.substr(0,2)]\
    \ > 31) {\n        valid = false;\n    }\n    \n    if(daysInMonth[date.substr(2,2)]\
    \ < 1 || daysInMonth[date.substr(2,2)] > 30) {\n        valid = false;\n    }\n\
    \    \n    if(daysInMonth[date.substr(4,2)] < 1 || daysInMonth[date.substr(4,2)]\
    \ > 29) {\n        valid = false;\n    }\n    \n    if(date.substr(0,2) < 1 ||\
    \ date.substr(0,2) > 12) {\n        valid = false;\n    }\n    \n    if(date.substr(2,2)\
    \ < 1 || date.substr(2,2) > 12) {\n        valid = false;\n    }\n    \n    if(date.substr(4,2)\
    \ < 1 || date.substr(4,2) > 12) {\n        valid = false;\n    }\n    \n    return\
    \ valid;\n}\nint main() {\n    auto candidate = valid_date;\n    assert(candidate((\"\
    03-11-2000\")) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n\
    \    assert(candidate((\"04-0-2040\")) == (false));\n    assert(candidate((\"\
    06-04-2020\")) == (true));\n    assert(candidate((\"01-01-2007\")) == (true));\n\
    \    assert(candidate((\"03-32-2011\")) == (false));\n    assert(candidate((\"\
    \")) == (false));\n    assert(candidate((\"04-31-3000\")) == (false));\n    assert(candidate((\"\
    06-06-2005\")) == (true));\n    assert(candidate((\"21-31-2000\")) == (false));\n\
    \    assert(candidate((\"04-12-2003\")) == (true));\n    assert(candidate((\"\
    04122003\")) == (false));\n    assert(candidate((\"20030412\")) == (false));\n\
    \    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"2003-04-12\"\
    )) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpkl58glb2.cpp: In function \u2018bool valid_date(std::string)\u2019\
    :\n/tmp/tmpkl58glb2.cpp:27:19: error: no match for \u2018operator[]\u2019 (operand\
    \ types are \u2018int [12]\u2019 and \u2018std::__cxx11::basic_string<char>\u2019\
    )\n   27 |     if(daysInMonth[date.substr(0,2)] < 1 || daysInMonth[date.substr(0,2)]\
    \ > 31) {\n      |                   ^\n/tmp/tmpkl58glb2.cpp:27:56: error: no\
    \ match for \u2018operator[]\u2019 (operand types are \u2018int [12]\u2019 and\
    \ \u2018std::__cxx11::basic_string<char>\u2019)\n   27 |     if(daysInMonth[date.substr(0,2)]\
    \ < 1 || daysInMonth[date.substr(0,2)] > 31) {\n      |                      \
    \                                  ^\n/tmp/tmpkl58glb2.cpp:31:19: error: no match\
    \ for \u2018operator[]\u2019 (operand types are \u2018int [12]\u2019 and \u2018\
    std::__cxx11::basic_string<char>\u2019)\n   31 |     if(daysInMonth[date.substr(2,2)]\
    \ < 1 || daysInMonth[date.substr(2,2)] > 30) {\n      |                   ^\n\
    /tmp/tmpkl58glb2.cpp:31:56: error: no match for \u2018operator[]\u2019 (operand\
    \ types are \u2018int [12]\u2019 and \u2018std::__cxx11::basic_string<char>\u2019\
    )\n   31 |     if(daysInMonth[date.substr(2,2)] < 1 || daysInMonth[date.substr(2,2)]\
    \ > 30) {\n      |                                                        ^\n\
    /tmp/tmpkl58glb2.cpp:35:19: error: no match for \u2018operator[]\u2019 (operand\
    \ types are \u2018int [12]\u2019 and \u2018std::__cxx11::basic_string<char>\u2019\
    )\n   35 |     if(daysInMonth[date.substr(4,2)] < 1 || daysInMonth[date.substr(4,2)]\
    \ > 29) {\n      |                   ^\n/tmp/tmpkl58glb2.cpp:35:56: error: no\
    \ match for \u2018operator[]\u2019 (operand types are \u2018int [12]\u2019 and\
    \ \u2018std::__cxx11::basic_string<char>\u2019)\n   35 |     if(daysInMonth[date.substr(4,2)]\
    \ < 1 || daysInMonth[date.substr(4,2)] > 29) {\n      |                      \
    \                                  ^\n/tmp/tmpkl58glb2.cpp:39:25: error: no match\
    \ for \u2018operator<\u2019 (operand types are \u2018std::__cxx11::basic_string<char>\u2019\
    \ and \u2018int\u2019)\n   39 |     if(date.substr(0,2) < 1 || date.substr(0,2)\
    \ > 12) {\n      |        ~~~~~~~~~~~~~~~~ ^ ~\n      |                   |  \
    \     |\n      |                   |       int\n      |                   std::__cxx11::basic_string<char>\n\
    In file included from /usr/include/c++/9/regex:62,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:110,\n\
    \                 from /tmp/tmpkl58glb2.cpp:2:\n/usr/include/c++/9/bits/regex.h:1048:5:\
    \ note: candidate: \u2018template<class _BiIter> bool std::__cxx11::operator<(const\
    \ std::__cxx11::sub_match<_BiIter>&, const std::__cxx11::sub_match<_BiIter>&)\u2019\
    \n 1048 |     operator<(const sub_match<_BiIter>& __lhs, const sub_match<_BiIter>&\
    \ __rhs)\n      |     ^~~~~~~~\n/usr/include/c++/9/bits/regex.h:1048:5: note:\
    \   template argument deduction/substitution failed:\n/tmp/tmpkl58glb2.cpp:39:27:\
    \ note:   \u2018std::__cxx11::basic_string<char>\u2019 is not derived from \u2018\
    const std::__cxx11::sub_match<_BiIter>\u2019\n   39 |     if(date.substr(0,2)\
    \ < 1 || date.substr(0,2) > 12) {\n      |                           ^\nIn file\
    \ included from /usr/include/c++/9/regex:62,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:110,\n\
    \                 from /tmp/tmpkl58glb2.cpp:2:\n/usr/include/c++/9/bits/regex.h:1124:5:\
    \ note: candidate: \u2018template<class _Bi_iter, class _Ch_traits, class _Ch_alloc>\
    \ bool std::__cxx11::operator<(std::__cxx11::__sub_match_string<_Bi_iter, _Ch_traits,\
    \ _Ch_alloc>&, const std::__cxx11::sub_match<_BiIter>&)\u2019\n 1124 |     operator<(const\
    \ __sub_match_string<_Bi_iter, _Ch_traits, _Ch_alloc>& __lhs,\n      |     ^~~~~~~~\n\
    /usr/include/c++/9/bits/regex.h:1124:5: note:   template argument deduction/substitution\
    \ failed:\n/tmp/tmpkl58glb2.cpp:39:27: note:   mismatched types \u2018const std::__cxx11::sub_match<_BiIter>\u2019\
    \ and \u2018int\u2019\n   39 |     if(date.substr(0,2) < 1 || date.substr(0,2)\
    \ > 12) {\n      |                           ^\nIn file included from /usr/include/c++/9/regex:62,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:110,\n\
    \                 from /tmp/tmpkl58glb2.cpp:2:\n/usr/include/c++/9/bits/regex.h:1198:5:\
    \ note: candidate: \u2018template<class _Bi_iter, class _Ch_traits, class _Ch_alloc>\
    \ bool std::__cxx11::operator<(const std::__cxx11::sub_match<_BiIter>&, std::__cxx11::__sub_match_string<_Bi_iter,\
    \ _Ch_traits, _Ch_alloc>&)\u2019\n 1198 |     operator<(const sub_match<_Bi_iter>&\
    \ __lhs,\n      |     ^~~~~~~~\n/usr/include/c++/9/bits/regex.h:1198:5: note:\
    \   template argument deduction/substitution failed:\n/tmp/tmpkl58glb2.cpp:39:27:\
    \ note:   \u2018std::__cxx11::basic_string<char>\u2019 is not derived from \u2018\
    const std::__cxx11::sub_match<_BiIter>\u2019\n   39 |     if(date.substr(0,2)\
    \ < 1 || date.substr(0,2) > 12) {\n      |                           ^\nIn file\
    \ included from /usr/include/c++/9/regex:62,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:110,\n\
    \                 from /tmp/tmpkl58glb2.cpp:2:\n/usr/include/c++/9/bits/regex.h:1272:5:\
    \ note: candidate: \u2018template<class _Bi_iter> bool std::__cxx11::operator<(const\
    \ typename std::iterator_traits<_Iter>::value_type*, const std::__cxx11::sub_match<_BiIter>&)\u2019\
    \n 1272 |     operator<(typename iterator_traits<_Bi_iter>::value_type const*\
    \ __lhs,\n      |     ^~~~~~~~\n/usr/include/c++/9/bits/regex.h:1272:5: note:\
    \   template argument deduction/substitution failed:\n/tmp/tmpkl58glb2.cpp:39:27:\
    \ note:   mismatched types \u2018const std::__cxx11::sub_match<_BiIter>\u2019\
    \ and \u2018int\u2019\n   39 |     if(date.substr(0,2) < 1 || date.substr(0,2)\
    \ > 12) {\n      |                           ^\nIn file included from /usr/include/c++/9/regex:62,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:110,\n\
    \                 from /tmp/tmpkl58glb2.cpp:2:\n/usr/include/c++/9/bits/regex.h:1346:5:\
    \ note: candidate: \u2018template<class _Bi_iter> bool std::__cxx11::operator<(const\
    \ std::__cxx11::sub_match<_BiIter>&, const typename std::iterator_traits<_Iter>::value_type*)\u2019\
    \n 1346 |     operator<(const sub_match<_Bi_iter>& __lhs,\n      |     ^~~~~~~~\n\
    /usr/include/c++/9/bits/regex.h:1346:5: note:   template argument deduction/substitution\
    \ failed:\n/tmp/tmpkl58glb2.cpp:39:27: note:   \u2018std::__cxx11::basic_string<char>\u2019\
    \ is not derived from \u2018const std::__cxx11::sub_match<_BiIter>\u2019\n   39\
    \ |     if(date.substr(0,2) < 1 || date.substr(0,2) > 12) {\n      |         \
    \                  ^\nIn file included from /usr/include/c++/9/regex:62,\n   \
    \              from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:110,\n \
    \                from /tmp/tmpkl58glb2.cpp:2:\n/usr/include/c++/9/bits/regex.h:1421:5:\
    \ note: candidate: \u2018template<class _Bi_iter> bool std::__cxx11::operator<(const\
    \ typename std::iterator_traits<_Iter>::value_type&, const std::__cxx11::sub_match<_BiIter>&)\u2019\
    \n 1421 |     operator<(typename iterator_traits<_Bi_iter>::value_type const&\
    \ __lhs,\n      |     ^~~~~~~~\n/usr/include/c++/9/bits/regex.h:1421:5: note:\
    \   template argument deduction/substitution failed:\n/tmp/tmpkl58glb2.cpp:39:27:\
    \ note:   mismatched types \u2018const std::__cxx11::sub_match<_BiIter>\u2019\
    \ and \u2018int\u2019\n   39 |     if(date.substr(0,2) < 1 || date.substr(0,2)\
    \ > 12) {\n      |                           ^\nIn file included from /usr/include/c++/9/regex:62,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:110,\n\
    \                 from /tmp/tmpkl58glb2.cpp:2:\n/usr/include/c++/9/bits/regex.h:1499:5:\
    \ note: candidate: \u2018template<class _Bi_iter> bool std::__cxx11::operator<(const\
    \ std::__cxx11::sub_match<_BiIter>&, const typename std::iterator_traits<_Iter>::value_type&)\u2019\
    \n 1499 |     operator<(const sub_match<_Bi_iter>& __lhs,\n      |     ^~~~~~~~\n\
    /usr/include/c++/9/bits/regex.h:1499:5: note:   template argument deduction/substitution\
    \ failed:\n/tmp/tmpkl58glb2.cpp:39:27: note:   \u2018std::__cxx11::basic_string<char>\u2019\
    \ is not derived from \u2018const std::__cxx11::sub_match<_BiIter>\u2019\n   39\
    \ |     if(date.substr(0,2) < 1 || date.substr(0,2) > 12) {\n      |         \
    \                  ^\nIn file included from /usr/include/c++/9/bits/stl_algobase.h:64,\n\
    \                 from /usr/include/c++/9/bits/char_traits.h:39,\n           \
    \      from /usr/include/c++/9/ios:40,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmpkl58glb2.cpp:2:\n/usr/include/c++/9/bits/stl_pair.h:454:5: note: candidate:\
    \ \u2018template<class _T1, class _T2> constexpr bool std::operator<(const std::pair<_T1,\
    \ _T2>&, const std::pair<_T1, _T2>&)\u2019\n  454 |     operator<(const pair<_T1,\
    \ _T2>& __x, const pair<_T1, _T2>& __y)\n      |     ^~~~~~~~\n/usr/include/c++/9/bits/stl_pair.h:454:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmpkl58glb2.cpp:39:27:\
    \ note:   \u2018std::__cxx11::basic_string<char>\u2019 is not derived from \u2018\
    const std::pair<_T1, _T2>\u2019\n   39 |     if(date.substr(0,2) < 1 || date.substr(0,2)\
    \ > 12) {\n      |                           ^\nIn file included from /usr/include/c++/9/bits/stl_algobase.h:67,\n\
    \                 from /usr/include/c++/9/bits/char_traits.h:39,\n           \
    \      from /usr/include/c++/9/ios:40,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmpkl58glb2.cpp:2:\n/usr/include/c++/9/bits/stl_iterator.h:331:5: note:\
    \ candidate: \u2018template<class _Iterator> bool std::operator<(const std::reverse_iterator<_Iterator>&,\
    \ const std::reverse_iterator<_Iterator>&)\u2019\n  331 |     operator<(const\
    \ reverse_iterator<_Iterator>& __x,\n      |     ^~~~~~~~\n/usr/include/c++/9/bits/stl_iterator.h:331:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmpkl58glb2.cpp:39:27:\
    \ note:   \u2018std::__cxx11::basic_string<char>\u2019 is not derived from \u2018\
    const std::reverse_iterator<_Iterator>\u2019\n   39 |     if(date.substr(0,2)\
    \ < 1 || date.substr(0,2) > 12) {\n      |                           ^\nIn file\
    \ included from /usr/include/c++/9/bits/stl_algobase.h:67,\n                 from\
    \ /usr/include/c++/9/bits/char_traits.h:39,\n                 from /usr/include/c++/9/ios:40,\n\
    \                 from /usr/include/c++/9/istream:38,\n                 from /usr/include/c++/9/sstream:38,\n\
    \                 from /usr/include/c++/9/complex:45,\n                 from /usr/include/c++/9/ccomplex:39,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n\
    \                 from /tmp/tmpkl58glb2.cpp:2:\n/usr/include/c++/9/bits/stl_iterator.h:369:5:\
    \ note: candidate: \u2018template<class _IteratorL, class _IteratorR> bool std::operator<(const\
    \ std::reverse_iterator<_Iterator>&, const std::reverse_iterator<_IteratorR>&)\u2019\
    \n  369 |     operator<(const reverse_iterator<_IteratorL>& __x,\n      |    \
    \ ^~~~~~~~\n/usr/include/c++/9/bits/stl_iterator.h:369:5: note:   template argument\
    \ deduction/substitution failed:\n/tmp/tmpkl58glb2.cpp:39:27: note:   \u2018std::__cxx11::basic_string<char>\u2019\
    \ is not derived from \u2018const std::reverse_iterator<_Iterator>\u2019\n   39\
    \ |     if(date.substr(0,2) < 1 || date.substr(0,2) > 12) {\n      |         \
    \                  ^\nIn file included from /usr/include/c++/9/bits/stl_algobase.h:67,\n\
    \                 from /usr/include/c++/9/bits/char_traits.h:39,\n           \
    \      from /usr/include/c++/9/ios:40,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmpkl58glb2.cpp:2:\n/usr/include/c++/9/bits/stl_iterator.h:1160:5: note:\
    \ candidate: \u2018template<class _IteratorL, class _IteratorR> bool std::operator<(const\
    \ std::move_iterator<_IteratorL>&, const std::move_iterator<_IteratorR>&)\u2019\
    \n 1160 |     operator<(const move_iterator<_IteratorL>& __x,\n      |     ^~~~~~~~\n\
    /usr/include/c++/9/bits/stl_iterator.h:1160:5: note:   template argument deduction/substitution\
    \ failed:\n/tmp/tmpkl58glb2.cpp:39:27: note:   \u2018std::__cxx11::basic_string<char>\u2019\
    \ is not derived from \u2018const std::move_iterator<_IteratorL>\u2019\n   39\
    \ |     if(date.substr(0,2) < 1 || date.substr(0,2) > 12) {\n      |         \
    \                  ^\nIn file included from /usr/include/c++/9/bits/stl_algobase.h:67,\n\
    \                 from /usr/include/c++/9/bits/char_traits.h:39,\n           \
    \      from /usr/include/c++/9/ios:40,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmpkl58glb2.cpp:2:\n/usr/include/c++/9/bits/stl_iterator.h:1166:5: note:\
    \ candidate: \u2018template<class _Iterator> bool std::operator<(const std::move_iterator<_IteratorL>&,\
    \ const std::move_iterator<_IteratorL>&)\u2019\n 1166 |     operator<(const move_iterator<_Iterator>&\
    \ __x,\n      |     ^~~~~~~~\n/usr/include/c++/9/bits/stl_iterator.h:1166:5: note:\
    \   template argument deduction/substitution failed:\n/tmp/tmpkl58glb2.cpp:39:27:\
    \ note:   \u2018std::__cxx11::basic_string<char>\u2019 is not derived from \u2018\
    const std::move_iterator<_IteratorL>\u2019\n   39 |     if(date.substr(0,2) <\
    \ 1 || date.substr(0,2) > 12) {\n      |                           ^\nIn file\
    \ included from /usr/include/c++/9/string:55,\n                 from /usr/include/c++/9/bits/locale_classes.h:40,\n\
    \                 from /usr/include/c++/9/bits/ios_base.h:41,\n              \
    \   from /usr/include/c++/9/ios:42,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmpkl58glb2.cpp:2:\n/usr/include/c++/9/bits/basic_string.h:6229:5: note:\
    \ candidate: \u2018template<class _CharT, class _Traits, class _Alloc> bool std::operator<(const\
    \ std::__cxx11::basic_string<_CharT, _Traits, _Alloc>&, const std::__cxx11::basic_string<_CharT,\
    \ _Traits, _Alloc>&)\u2019\n 6229 |     operator<(const basic_string<_CharT, _Traits,\
    \ _Alloc>& __lhs,\n      |     ^~~~~~~~\n/usr/include/c++/9/bits/basic_string.h:6229:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmpkl58glb2.cpp:39:27:\
    \ note:   mismatched types \u2018const std::__cxx11::basic_string<_CharT, _Traits,\
    \ _Alloc>\u2019 and \u2018int\u2019\n   39 |     if(date.substr(0,2) < 1 || date.substr(0,2)\
    \ > 12) {\n      |                           ^\nIn file included from /usr/include/c++/9/string:55,\n\
    \                 from /usr/include/c++/9/bits/locale_classes.h:40,\n        \
    \         from /usr/include/c++/9/bits/ios_base.h:41,\n                 from /usr/include/c++/9/ios:42,\n\
    \                 from /usr/include/c++/9/istream:38,\n                 from /usr/include/c++/9/sstream:38,\n\
    \                 from /usr/include/c++/9/complex:45,\n                 from /usr/include/c++/9/ccomplex:39,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n\
    \                 from /tmp/tmpkl58glb2.cpp:2:\n/usr/include/c++/9/bits/basic_string.h:6242:5:\
    \ note: candidate: \u2018template<class _CharT, class _Traits, class _Alloc> bool\
    \ std::operator<(const std::__cxx11::basic_string<_CharT, _Traits, _Alloc>&, const\
    \ _CharT*)\u2019\n 6242 |     operator<(const basic_string<_CharT, _Traits, _Alloc>&\
    \ __lhs,\n      |     ^~~~~~~~\n/usr/include/c++/9/bits/basic_string.h:6242:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmpkl58glb2.cpp:39:27:\
    \ note:   mismatched types \u2018const _CharT*\u2019 and \u2018int\u2019\n   39\
    \ |     if(date.substr(0,2) < 1 || date.substr(0,2) > 12) {\n      |         \
    \                  ^\nIn file included from /usr/include/c++/9/string:55,\n  \
    \               from /usr/include/c++/9/bits/locale_classes.h:40,\n          \
    \       from /usr/include/c++/9/bits/ios_base.h:41,\n                 from /usr/include/c++/9/ios:42,\n\
    \                 from /usr/include/c++/9/istream:38,\n                 from /usr/include/c++/9/sstream:38,\n\
    \                 from /usr/include/c++/9/complex:45,\n                 from /usr/include/c++/9/ccomplex:39,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n\
    \                 from /tmp/tmpkl58glb2.cpp:2:\n/usr/include/c++/9/bits/basic_string.h:6254:5:\
    \ note: candidate: \u2018template<class _CharT, class _Traits, class _Alloc> bool\
    \ std::operator<(const _CharT*, const std::__cxx11::basic_string<_CharT, _Traits,\
    \ _Alloc>&)\u2019\n 6254 |     operator<(const _CharT* __lhs,\n      |     ^~~~~~~~\n\
    /usr/include/c++/9/bits/basic_string.h:6254:5: note:   template argument deduction/substitution\
    \ failed:\n/tmp/tmpkl58glb2.cpp:39:27: note:   mismatched types \u2018const _CharT*\u2019\
    \ and \u2018std::__cxx11::basic_string<char>\u2019\n   39 |     if(date.substr(0,2)\
    \ < 1 || date.substr(0,2) > 12) {\n      |                           ^\nIn file\
    \ included from /usr/include/c++/9/bits/ios_base.h:46,\n                 from\
    \ /usr/include/c++/9/ios:42,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmpkl58glb2.cpp:2:\n/usr/include/c++/9/system_error:208:3: note: candidate:\
    \ \u2018bool std::operator<(const std::error_code&, const std::error_code&)\u2019\
    \n  208 |   operator<(const error_code& __lhs, const error_code& __rhs) noexcept\n\
    \      |   ^~~~~~~~\n/usr/include/c++/9/system_error:208:31: note:   no known\
    \ conversion for argument 1 from \u2018std::__cxx11::basic_string<char>\u2019\
    \ to \u2018const std::error_code&\u2019\n  208 |   operator<(const error_code&\
    \ __lhs, const error_code& __rhs) noexcept\n      |             ~~~~~~~~~~~~~~~~~~^~~~~\n\
    /usr/include/c++/9/system_error:282:3: note: candidate: \u2018bool std::operator<(const\
    \ std::error_condition&, const std::error_condition&)\u2019\n  282 |   operator<(const\
    \ error_condition& __lhs,\n      |   ^~~~~~~~\n/usr/include/c++/9/system_error:282:36:\
    \ note:   no known conversion for argument 1 from \u2018std::__cxx11::basic_string<char>\u2019\
    \ to \u2018const std::error_condition&\u2019\n  282 |   operator<(const error_condition&\
    \ __lhs,\n      |             ~~~~~~~~~~~~~~~~~~~~~~~^~~~~\nIn file included from\
    \ /usr/include/c++/9/deque:67,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:68,\n\
    \                 from /tmp/tmpkl58glb2.cpp:2:\n/usr/include/c++/9/bits/stl_deque.h:312:5:\
    \ note: candidate: \u2018template<class _Tp, class _Ref, class _Ptr> bool std::operator<(const\
    \ std::_Deque_iterator<_Tp, _Ref, _Ptr>&, const std::_Deque_iterator<_Tp, _Ref,\
    \ _Ptr>&)\u2019\n  312 |     operator<(const _Deque_iterator<_Tp, _Ref, _Ptr>&\
    \ __x,\n      |     ^~~~~~~~\n/usr/include/c++/9/bits/stl_deque.h:312:5: note:\
    \   template argument deduction/substitution failed:\n/tmp/tmpkl58glb2.cpp:39:27:\
    \ note:   \u2018std::__cxx11::basic_string<char>\u2019 is not derived from \u2018\
    const std::_Deque_iterator<_Tp, _Ref, _Ptr>\u2019\n   39 |     if(date.substr(0,2)\
    \ < 1 || date.substr(0,2) > 12) {\n      |                           ^\nIn file\
    \ included from /usr/include/c++/9/deque:67,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:68,\n\
    \                 from /tmp/tmpkl58glb2.cpp:2:\n/usr/include/c++/9/bits/stl_deque.h:320:5:\
    \ note: candidate: \u2018template<class _Tp, class _RefL, class _PtrL, class _RefR,\
    \ class _PtrR> bool std::operator<(const std::_Deque_iterator<_Tp, _Ref, _Ptr>&,\
    \ const std::_Deque_iterator<_Tp, _RefR, _PtrR>&)\u2019\n  320 |     operator<(const\
    \ _Deque_iterator<_Tp, _RefL, _PtrL>& __x,\n      |     ^~~~~~~~\n/usr/include/c++/9/bits/stl_deque.h:320:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmpkl58glb2.cpp:39:27:\
    \ note:   \u2018std::__cxx11::basic_string<char>\u2019 is not derived from \u2018\
    const std::_Deque_iterator<_Tp, _Ref, _Ptr>\u2019\n   39 |     if(date.substr(0,2)\
    \ < 1 || date.substr(0,2) > 12) {\n      |                           ^\nIn file\
    \ included from /usr/include/c++/9/deque:67,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:68,\n\
    \                 from /tmp/tmpkl58glb2.cpp:2:\n/usr/include/c++/9/bits/stl_deque.h:2330:5:\
    \ note: candidate: \u2018template<class _Tp, class _Alloc> bool std::operator<(const\
    \ std::deque<_Tp, _Alloc>&, const std::deque<_Tp, _Alloc>&)\u2019\n 2330 |   \
    \  operator<(const deque<_Tp, _Alloc>& __x,\n      |     ^~~~~~~~\n/usr/include/c++/9/bits/stl_deque.h:2330:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmpkl58glb2.cpp:39:27:\
    \ note:   \u2018std::__cxx11::basic_string<char>\u2019 is not derived from \u2018\
    const std::deque<_Tp, _Alloc>\u2019\n   39 |     if(date.substr(0,2) < 1 || date.substr(0,2)\
    \ > 12) {\n      |                           ^\nIn file included from /usr/include/c++/9/tuple:39,\n\
    \                 from /usr/include/c++/9/functional:54,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:71,\n                 from\
    \ /tmp/tmpkl58glb2.cpp:2:\n/usr/include/c++/9/array:262:5: note: candidate: \u2018\
    template<class _Tp, long unsigned int _Nm> bool std::operator<(const std::array<_Tp,\
    \ _Nm>&, const std::array<_Tp, _Nm>&)\u2019\n  262 |     operator<(const array<_Tp,\
    \ _Nm>& __a, const array<_Tp, _Nm>& __b)\n      |     ^~~~~~~~\n/usr/include/c++/9/array:262:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmpkl58glb2.cpp:39:27:\
    \ note:   \u2018std::__cxx11::basic_string<char>\u2019 is not derived from \u2018\
    const std::array<_Tp, _Nm>\u2019\n   39 |     if(date.substr(0,2) < 1 || date.substr(0,2)\
    \ > 12) {\n      |                           ^\nIn file included from /usr/include/c++/9/functional:54,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:71,\n\
    \                 from /tmp/tmpkl58glb2.cpp:2:\n/usr/include/c++/9/tuple:1432:5:\
    \ note: candidate: \u2018template<class ... _TElements, class ... _UElements>\
    \ constexpr bool std::operator<(const std::tuple<_Tps ...>&, const std::tuple<_Elements\
    \ ...>&)\u2019\n 1432 |     operator<(const tuple<_TElements...>& __t,\n     \
    \ |     ^~~~~~~~\n/usr/include/c++/9/tuple:1432:5: note:   template argument deduction/substitution\
    \ failed:\n/tmp/tmpkl58glb2.cpp:39:27: note:   \u2018std::__cxx11::basic_string<char>\u2019\
    \ is not derived from \u2018const std::tuple<_Tps ...>\u2019\n   39 |     if(date.substr(0,2)\
    \ < 1 || date.substr(0,2) > 12) {\n      |                           ^\nIn file\
    \ included from /usr/include/c++/9/bits/locale_conv.h:41,\n                 from\
    \ /usr/include/c++/9/locale:43,\n                 from /usr/include/c++/9/iomanip:43,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:72,\n\
    \                 from /tmp/tmpkl58glb2.cpp:2:\n/usr/include/c++/9/bits/unique_ptr.h:749:5:\
    \ note: candidate: \u2018template<class _Tp, class _Dp, class _Up, class _Ep>\
    \ bool std::operator<(const std::unique_ptr<_Tp, _Dp>&, const std::unique_ptr<_Up,\
    \ _Ep>&)\u2019\n  749 |     operator<(const unique_ptr<_Tp, _Dp>& __x,\n     \
    \ |     ^~~~~~~~\n/usr/include/c++/9/bits/unique_ptr.h:749:5: note:   template\
    \ argument deduction/substitution failed:\n/tmp/tmpkl58glb2.cpp:39:27: note: \
    \  \u2018std::__cxx11::basic_string<char>\u2019 is not derived from \u2018const\
    \ std::unique_ptr<_Tp, _Dp>\u2019\n   39 |     if(date.substr(0,2) < 1 || date.substr(0,2)\
    \ > 12) {\n      |                           ^\nIn file included from /usr/include/c++/9/bits/locale_conv.h:41,\n\
    \                 from /usr/include/c++/9/locale:43,\n                 from /usr/include/c++/9/iomanip:43,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:72,\n\
    \                 from /tmp/tmpkl58glb2.cpp:2:\n/usr/include/c++/9/bits/unique_ptr.h:760:5:\
    \ note: candidate: \u2018template<class _Tp, class _Dp> bool std::operator<(const\
    \ std::unique_ptr<_Tp, _Dp>&, std::nullptr_t)\u2019\n  760 |     operator<(const\
    \ unique_ptr<_Tp, _Dp>& __x, nullptr_t)\n      |     ^~~~~~~~\n/usr/include/c++/9/bits/unique_ptr.h:760:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmpkl58glb2.cpp:39:27:\
    \ note:   \u2018std::__cxx11::basic_string<char>\u2019 is not derived from \u2018\
    const std::unique_ptr<_Tp, _Dp>\u2019\n   39 |     if(date.substr(0,2) < 1 ||\
    \ date.substr(0,2) > 12) {\n      |                           ^\nIn file included\
    \ from /usr/include/c++/9/bits/locale_conv.h:41,\n                 from /usr/include/c++/9/locale:43,\n\
    \                 from /usr/include/c++/9/iomanip:43,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:72,\n\
    \                 from /tmp/tmpkl58glb2.cpp:2:\n/usr/include/c++/9/bits/unique_ptr.h:766:5:\
    \ note: candidate: \u2018template<class _Tp, class _Dp> bool std::operator<(std::nullptr_t,\
    \ const std::unique_ptr<_Tp, _Dp>&)\u2019\n  766 |     operator<(nullptr_t, const\
    \ unique_ptr<_Tp, _Dp>& __x)\n      |     ^~~~~~~~\n/usr/include/c++/9/bits/unique_ptr.h:766:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmpkl58glb2.cpp:39:27:\
    \ note:   mismatched types \u2018const std::unique_ptr<_Tp, _Dp>\u2019 and \u2018\
    int\u2019\n   39 |     if(date.substr(0,2) < 1 || date.substr(0,2) > 12) {\n \
    \     |                           ^\nIn file included from /usr/include/c++/9/list:63,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:79,\n\
    \                 from /tmp/tmpkl58glb2.cpp:2:\n/usr/include/c++/9/bits/stl_list.h:2025:5:\
    \ note: candidate: \u2018template<class _Tp, class _Alloc> bool std::operator<(const\
    \ std::__cxx11::list<_Tp, _Alloc>&, const std::__cxx11::list<_Tp, _Alloc>&)\u2019\
    \n 2025 |     operator<(const list<_Tp, _Alloc>& __x, const list<_Tp, _Alloc>&\
    \ __y)\n      |     ^~~~~~~~\n/usr/include/c++/9/bits/stl_list.h:2025:5: note:\
    \   template argument deduction/substitution failed:\n/tmp/tmpkl58glb2.cpp:39:27:\
    \ note:   \u2018std::__cxx11::basic_string<char>\u2019 is not derived from \u2018\
    const std::__cxx11::list<_Tp, _Alloc>\u2019\n   39 |     if(date.substr(0,2) <\
    \ 1 || date.substr(0,2) > 12) {\n      |                           ^\nIn file\
    \ included from /usr/include/c++/9/map:61,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:81,\n\
    \                 from /tmp/tmpkl58glb2.cpp:2:\n/usr/include/c++/9/bits/stl_map.h:1472:5:\
    \ note: candidate: \u2018template<class _Key, class _Tp, class _Compare, class\
    \ _Alloc> bool std::operator<(const std::map<_Key, _Tp, _Compare, _Alloc>&, const\
    \ std::map<_Key, _Tp, _Compare, _Alloc>&)\u2019\n 1472 |     operator<(const map<_Key,\
    \ _Tp, _Compare, _Alloc>& __x,\n      |     ^~~~~~~~\n/usr/include/c++/9/bits/stl_map.h:1472:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmpkl58glb2.cpp:39:27:\
    \ note:   \u2018std::__cxx11::basic_string<char>\u2019 is not derived from \u2018\
    const std::map<_Key, _Tp, _Compare, _Alloc>\u2019\n   39 |     if(date.substr(0,2)\
    \ < 1 || date.substr(0,2) > 12) {\n      |                           ^\nIn file\
    \ included from /usr/include/c++/9/map:62,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:81,\n\
    \                 from /tmp/tmpkl58glb2.cpp:2:\n/usr/include/c++/9/bits/stl_multimap.h:1136:5:\
    \ note: candidate: \u2018template<class _Key, class _Tp, class _Compare, class\
    \ _Alloc> bool std::operator<(const std::multimap<_Key, _Tp, _Compare, _Alloc>&,\
    \ const std::multimap<_Key, _Tp, _Compare, _Alloc>&)\u2019\n 1136 |     operator<(const\
    \ multimap<_Key, _Tp, _Compare, _Alloc>& __x,\n      |     ^~~~~~~~\n/usr/include/c++/9/bits/stl_multimap.h:1136:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmpkl58glb2.cpp:39:27:\
    \ note:   \u2018std::__cxx11::basic_string<char>\u2019 is not derived from \u2018\
    const std::multimap<_Key, _Tp, _Compare, _Alloc>\u2019\n   39 |     if(date.substr(0,2)\
    \ < 1 || date.substr(0,2) > 12) {\n      |                           ^\nIn file\
    \ included from /usr/include/c++/9/bits/shared_ptr.h:52,\n                 from\
    \ /usr/include/c++/9/memory:81,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:82,\n\
    \                 from /tmp/tmpkl58glb2.cpp:2:\n/usr/include/c++/9/bits/shared_ptr_base.h:1444:5:\
    \ note: candidate: \u2018template<class _Tp, class _Up, __gnu_cxx::_Lock_policy\
    \ _Lp> bool std::operator<(const std::__shared_ptr<_Tp1, _Lp>&, const std::__shared_ptr<_Tp2,\
    \ _Lp>&)\u2019\n 1444 |     operator<(const __shared_ptr<_Tp, _Lp>& __a,\n   \
    \   |     ^~~~~~~~\n/usr/include/c++/9/bits/shared_ptr_base.h:1444:5: note:  \
    \ template argument deduction/substitution failed:\n/tmp/tmpkl58glb2.cpp:39:27:\
    \ note:   \u2018std::__cxx11::basic_string<char>\u2019 is not derived from \u2018\
    const std::__shared_ptr<_Tp1, _Lp>\u2019\n   39 |     if(date.substr(0,2) < 1\
    \ || date.substr(0,2) > 12) {\n      |                           ^\nIn file included\
    \ from /usr/include/c++/9/bits/shared_ptr.h:52,\n                 from /usr/include/c++/9/memory:81,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:82,\n\
    \                 from /tmp/tmpkl58glb2.cpp:2:\n/usr/include/c++/9/bits/shared_ptr_base.h:1455:5:\
    \ note: candidate: \u2018template<class _Tp, __gnu_cxx::_Lock_policy _Lp> bool\
    \ std::operator<(const std::__shared_ptr<_Tp, _Lp>&, std::nullptr_t)\u2019\n 1455\
    \ |     operator<(const __shared_ptr<_Tp, _Lp>& __a, nullptr_t) noexcept\n   \
    \   |     ^~~~~~~~\n/usr/include/c++/9/bits/shared_ptr_base.h:1455:5: note:  \
    \ template argument deduction/substitution failed:\n/tmp/tmpkl58glb2.cpp:39:27:\
    \ note:   \u2018std::__cxx11::basic_string<char>\u2019 is not derived from \u2018\
    const std::__shared_ptr<_Tp, _Lp>\u2019\n   39 |     if(date.substr(0,2) < 1 ||\
    \ date.substr(0,2) > 12) {\n      |                           ^\nIn file included\
    \ from /usr/include/c++/9/bits/shared_ptr.h:52,\n                 from /usr/include/c++/9/memory:81,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:82,\n\
    \                 from /tmp/tmpkl58glb2.cpp:2:\n/usr/include/c++/9/bits/shared_ptr_base.h:1463:5:\
    \ note: candidate: \u2018template<class _Tp, __gnu_cxx::_Lock_policy _Lp> bool\
    \ std::operator<(std::nullptr_t, const std::__shared_ptr<_Tp, _Lp>&)\u2019\n 1463\
    \ |     operator<(nullptr_t, const __shared_ptr<_Tp, _Lp>& __a) noexcept\n   \
    \   |     ^~~~~~~~\n/usr/include/c++/9/bits/shared_ptr_base.h:1463:5: note:  \
    \ template argument deduction/substitution failed:\n/tmp/tmpkl58glb2.cpp:39:27:\
    \ note:   mismatched types \u2018const std::__shared_ptr<_Tp, _Lp>\u2019 and \u2018\
    int\u2019\n   39 |     if(date.substr(0,2) < 1 || date.substr(0,2) > 12) {\n \
    \     |                           ^\nIn file included from /usr/include/c++/9/memory:81,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:82,\n\
    \                 from /tmp/tmpkl58glb2.cpp:2:\n/usr/include/c++/9/bits/shared_ptr.h:413:5:\
    \ note: candidate: \u2018template<class _Tp, class _Up> bool std::operator<(const\
    \ std::shared_ptr<_Tp>&, const std::shared_ptr<_Tp>&)\u2019\n  413 |     operator<(const\
    \ shared_ptr<_Tp>& __a, const shared_ptr<_Up>& __b) noexcept\n      |     ^~~~~~~~\n\
    /usr/include/c++/9/bits/shared_ptr.h:413:5: note:   template argument deduction/substitution\
    \ failed:\n/tmp/tmpkl58glb2.cpp:39:27: note:   \u2018std::__cxx11::basic_string<char>\u2019\
    \ is not derived from \u2018const std::shared_ptr<_Tp>\u2019\n   39 |     if(date.substr(0,2)\
    \ < 1 || date.substr(0,2) > 12) {\n      |                           ^\nIn file\
    \ included from /usr/include/c++/9/memory:81,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:82,\n\
    \                 from /tmp/tmpkl58glb2.cpp:2:\n/usr/include/c++/9/bits/shared_ptr.h:423:5:\
    \ note: candidate: \u2018template<class _Tp> bool std::operator<(const std::shared_ptr<_Tp>&,\
    \ std::nullptr_t)\u2019\n  423 |     operator<(const shared_ptr<_Tp>& __a, nullptr_t)\
    \ noexcept\n      |     ^~~~~~~~\n/usr/include/c++/9/bits/shared_ptr.h:423:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmpkl58glb2.cpp:39:27:\
    \ note:   \u2018std::__cxx11::basic_string<char>\u2019 is not derived from \u2018\
    const std::shared_ptr<_Tp>\u2019\n   39 |     if(date.substr(0,2) < 1 || date.substr(0,2)\
    \ > 12) {\n      |                           ^\nIn file included from /usr/include/c++/9/memory:81,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:82,\n\
    \                 from /tmp/tmpkl58glb2.cpp:2:\n/usr/include/c++/9/bits/shared_ptr.h:431:5:\
    \ note: candidate: \u2018template<class _Tp> bool std::operator<(std::nullptr_t,\
    \ const std::shared_ptr<_Tp>&)\u2019\n  431 |     operator<(nullptr_t, const shared_ptr<_Tp>&\
    \ __a) noexcept\n      |     ^~~~~~~~\n/usr/include/c++/9/bits/shared_ptr.h:431:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmpkl58glb2.cpp:39:27:\
    \ note:   mismatched types \u2018const std::shared_ptr<_Tp>\u2019 and \u2018int\u2019\
    \n   39 |     if(date.substr(0,2) < 1 || date.substr(0,2) > 12) {\n      |   \
    \                        ^\nIn file included from /usr/include/c++/9/vector:67,\n\
    \                 from /usr/include/c++/9/queue:61,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:86,\n\
    \                 from /tmp/tmpkl58glb2.cpp:2:\n/usr/include/c++/9/bits/stl_vector.h:1905:5:\
    \ note: candidate: \u2018template<class _Tp, class _Alloc> bool std::operator<(const\
    \ std::vector<_Tp, _Alloc>&, const std::vector<_Tp, _Alloc>&)\u2019\n 1905 | \
    \    operator<(const vector<_Tp, _Alloc>& __x, const vector<_Tp, _Alloc>& __y)\n\
    \      |     ^~~~~~~~\n/usr/include/c++/9/bits/stl_vector.h:1905:5: note:   template\
    \ argument deduction/substitution failed:\n/tmp/tmpkl58glb2.cpp:39:27: note: \
    \  \u2018std::__cxx11::basic_string<char>\u2019 is not derived from \u2018const\
    \ std::vector<_Tp, _Alloc>\u2019\n   39 |     if(date.substr(0,2) < 1 || date.substr(0,2)\
    \ > 12) {\n      |                           ^\nIn file included from /usr/include/c++/9/queue:64,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:86,\n\
    \                 from /tmp/tmpkl58glb2.cpp:2:\n/usr/include/c++/9/bits/stl_queue.h:356:5:\
    \ note: candidate: \u2018template<class _Tp, class _Seq> bool std::operator<(const\
    \ std::queue<_Tp, _Seq>&, const std::queue<_Tp, _Seq>&)\u2019\n  356 |     operator<(const\
    \ queue<_Tp, _Seq>& __x, const queue<_Tp, _Seq>& __y)\n      |     ^~~~~~~~\n\
    /usr/include/c++/9/bits/stl_queue.h:356:5: note:   template argument deduction/substitution\
    \ failed:\n/tmp/tmpkl58glb2.cpp:39:27: note:   \u2018std::__cxx11::basic_string<char>\u2019\
    \ is not derived from \u2018const std::queue<_Tp, _Seq>\u2019\n   39 |     if(date.substr(0,2)\
    \ < 1 || date.substr(0,2) > 12) {\n      |                           ^\nIn file\
    \ included from /usr/include/c++/9/set:61,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:87,\n\
    \                 from /tmp/tmpkl58glb2.cpp:2:\n/usr/include/c++/9/bits/stl_set.h:996:5:\
    \ note: candidate: \u2018template<class _Key, class _Compare, class _Alloc> bool\
    \ std::operator<(const std::set<_Key, _Compare, _Alloc>&, const std::set<_Key,\
    \ _Compare, _Alloc>&)\u2019\n  996 |     operator<(const set<_Key, _Compare, _Alloc>&\
    \ __x,\n      |     ^~~~~~~~\n/usr/include/c++/9/bits/stl_set.h:996:5: note: \
    \  template argument deduction/substitution failed:\n/tmp/tmpkl58glb2.cpp:39:27:\
    \ note:   \u2018std::__cxx11::basic_string<char>\u2019 is not derived from \u2018\
    const std::set<_Key, _Compare, _Alloc>\u2019\n   39 |     if(date.substr(0,2)\
    \ < 1 || date.substr(0,2) > 12) {\n      |                           ^\nIn file\
    \ included from /usr/include/c++/9/set:62,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:87,\n\
    \                 from /tmp/tmpkl58glb2.cpp:2:\n/usr/include/c++/9/bits/stl_multiset.h:981:5:\
    \ note: candidate: \u2018template<class _Key, class _Compare, class _Alloc> bool\
    \ std::operator<(const std::multiset<_Key, _Compare, _Alloc>&, const std::multiset<_Key,\
    \ _Compare, _Alloc>&)\u2019\n  981 |     operator<(const multiset<_Key, _Compare,\
    \ _Alloc>& __x,\n      |     ^~~~~~~~\n/usr/include/c++/9/bits/stl_multiset.h:981:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmpkl58glb2.cpp:39:27:\
    \ note:   \u2018std::__cxx11::basic_string<char>\u2019 is not derived from \u2018\
    const std::multiset<_Key, _Compare, _Alloc>\u2019\n   39 |     if(date.substr(0,2)\
    \ < 1 || date.substr(0,2) > 12) {\n      |                           ^\nIn file\
    \ included from /usr/include/c++/9/stack:61,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:89,\n\
    \                 from /tmp/tmpkl58glb2.cpp:2:\n/usr/include/c++/9/bits/stl_stack.h:331:5:\
    \ note: candidate: \u2018template<class _Tp, class _Seq> bool std::operator<(const\
    \ std::stack<_Tp, _Seq>&, const std::stack<_Tp, _Seq>&)\u2019\n  331 |     operator<(const\
    \ stack<_Tp, _Seq>& __x, const stack<_Tp, _Seq>& __y)\n      |     ^~~~~~~~\n\
    /usr/include/c++/9/bits/stl_stack.h:331:5: note:   template argument deduction/substitution\
    \ failed:\n/tmp/tmpkl58glb2.cpp:39:27: note:   \u2018std::__cxx11::basic_string<char>\u2019\
    \ is not derived from \u2018const std::stack<_Tp, _Seq>\u2019\n   39 |     if(date.substr(0,2)\
    \ < 1 || date.substr(0,2) > 12) {\n      |                           ^\nIn file\
    \ included from /usr/include/c++/9/valarray:603,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:95,\n\
    \                 from /tmp/tmpkl58glb2.cpp:2:\n/usr/include/c++/9/bits/valarray_after.h:419:5:\
    \ note: candidate: \u2018template<class _Dom1, class _Dom2> std::_Expr<std::__detail::_BinClos<std::__less,\
    \ std::_Expr, std::_Expr, _Dom1, _Dom2>, typename std::__fun<std::__less, typename\
    \ _Dom1::value_type>::result_type> std::operator<(const std::_Expr<_Dom1, typename\
    \ _Dom1::value_type>&, const std::_Expr<_Dom2, typename _Dom2::value_type>&)\u2019\
    \n  419 |     _DEFINE_EXPR_BINARY_OPERATOR(<, __less)\n      |     ^~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /usr/include/c++/9/bits/valarray_after.h:419:5: note:   template argument deduction/substitution\
    \ failed:\n/tmp/tmpkl58glb2.cpp:39:27: note:   \u2018std::__cxx11::basic_string<char>\u2019\
    \ is not derived from \u2018const std::_Expr<_Dom1, typename _Dom1::value_type>\u2019\
    \n   39 |     if(date.substr(0,2) < 1 || date.substr(0,2) > 12) {\n      |   \
    \                        ^\nIn file included from /usr/include/c++/9/valarray:603,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:95,\n\
    \                 from /tmp/tmpkl58glb2.cpp:2:\n/usr/include/c++/9/bits/valarray_after.h:419:5:\
    \ note: candidate: \u2018template<class _Dom> std::_Expr<std::__detail::_BinClos<std::__less,\
    \ std::_Expr, std::_Constant, _Dom, typename _Dom::value_type>, typename std::__fun<std::__less,\
    \ typename _Dom1::value_type>::result_type> std::operator<(const std::_Expr<_Dom1,\
    \ typename _Dom1::value_type>&, const typename _Dom::value_type&)\u2019\n  419\
    \ |     _DEFINE_EXPR_BINARY_OPERATOR(<, __less)\n      |     ^~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /usr/include/c++/9/bits/valarray_after.h:419:5: note:   template argument deduction/substitution\
    \ failed:\n/tmp/tmpkl58glb2.cpp:39:27: note:   \u2018std::__cxx11::basic_string<char>\u2019\
    \ is not derived from \u2018const std::_Expr<_Dom1, typename _Dom1::value_type>\u2019\
    \n   39 |     if(date.substr(0,2) < 1 || date.substr(0,2) > 12) {\n      |   \
    \                        ^\nIn file included from /usr/include/c++/9/valarray:603,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:95,\n\
    \                 from /tmp/tmpkl58glb2.cpp:2:\n/usr/include/c++/9/bits/valarray_after.h:419:5:\
    \ note: candidate: \u2018template<class _Dom> std::_Expr<std::__detail::_BinClos<std::__less,\
    \ std::_Constant, std::_Expr, typename _Dom::value_type, _Dom>, typename std::__fun<std::__less,\
    \ typename _Dom1::value_type>::result_type> std::operator<(const typename _Dom::value_type&,\
    \ const std::_Expr<_Dom1, typename _Dom1::value_type>&)\u2019\n  419 |     _DEFINE_EXPR_BINARY_OPERATOR(<,\
    \ __less)\n      |     ^~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/usr/include/c++/9/bits/valarray_after.h:419:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmpkl58glb2.cpp:39:27:\
    \ note:   mismatched types \u2018const std::_Expr<_Dom1, typename _Dom1::value_type>\u2019\
    \ and \u2018int\u2019\n   39 |     if(date.substr(0,2) < 1 || date.substr(0,2)\
    \ > 12) {\n      |                           ^\nIn file included from /usr/include/c++/9/valarray:603,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:95,\n\
    \                 from /tmp/tmpkl58glb2.cpp:2:\n/usr/include/c++/9/bits/valarray_after.h:419:5:\
    \ note: candidate: \u2018template<class _Dom> std::_Expr<std::__detail::_BinClos<std::__less,\
    \ std::_Expr, std::_ValArray, _Dom, typename _Dom::value_type>, typename std::__fun<std::__less,\
    \ typename _Dom1::value_type>::result_type> std::operator<(const std::_Expr<_Dom1,\
    \ typename _Dom1::value_type>&, const std::valarray<typename _Dom::value_type>&)\u2019\
    \n  419 |     _DEFINE_EXPR_BINARY_OPERATOR(<, __less)\n      |     ^~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /usr/include/c++/9/bits/valarray_after.h:419:5: note:   template argument deduction/substitution\
    \ failed:\n/tmp/tmpkl58glb2.cpp:39:27: note:   \u2018std::__cxx11::basic_string<char>\u2019\
    \ is not derived from \u2018const std::_Expr<_Dom1, typename _Dom1::value_type>\u2019\
    \n   39 |     if(date.substr(0,2) < 1 || date.substr(0,2) > 12) {\n      |   \
    \                        ^\nIn file included from /usr/include/c++/9/valarray:603,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:95,\n\
    \                 from /tmp/tmpkl58glb2.cpp:2:\n/usr/include/c++/9/bits/valarray_after.h:419:5:\
    \ note: candidate: \u2018template<class _Dom> std::_Expr<std::__detail::_BinClos<std::__less,\
    \ std::_ValArray, std::_Expr, typename _Dom::value_type, _Dom>, typename std::__fun<std::__less,\
    \ typename _Dom1::value_type>::result_type> std::operator<(const std::valarray<typename\
    \ _Dom::value_type>&, const std::_Expr<_Dom1, typename _Dom1::value_type>&)\u2019\
    \n  419 |     _DEFINE_EXPR_BINARY_OPERATOR(<, __less)\n      |     ^~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /usr/include/c++/9/bits/valarray_after.h:419:5: note:   template argument deduction/substitution\
    \ failed:\n/tmp/tmpkl58glb2.cpp:39:27: note:   mismatched types \u2018const std::_Expr<_Dom1,\
    \ typename _Dom1::value_type>\u2019 and \u2018int\u2019\n   39 |     if(date.substr(0,2)\
    \ < 1 || date.substr(0,2) > 12) {\n      |                           ^\nIn file\
    \ included from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:95,\n      \
    \           from /tmp/tmpkl58glb2.cpp:2:\n/usr/include/c++/9/valarray:1199:1:\
    \ note: candidate: \u2018template<class _Tp> std::_Expr<std::__detail::_BinClos<std::__less,\
    \ std::_ValArray, std::_ValArray, _Tp, _Tp>, typename std::__fun<std::__less,\
    \ _Tp>::result_type> std::operator<(const std::valarray<_Tp>&, const std::valarray<_Tp>&)\u2019\
    \n 1199 | _DEFINE_BINARY_OPERATOR(<, __less)\n      | ^~~~~~~~~~~~~~~~~~~~~~~\n\
    /usr/include/c++/9/valarray:1199:1: note:   template argument deduction/substitution\
    \ failed:\n/tmp/tmpkl58glb2.cpp:39:27: note:   \u2018std::__cxx11::basic_string<char>\u2019\
    \ is not derived from \u2018const std::valarray<_Tp>\u2019\n   39 |     if(date.substr(0,2)\
    \ < 1 || date.substr(0,2) > 12) {\n      |                           ^\nIn file\
    \ included from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:95,\n      \
    \           from /tmp/tmpkl58glb2.cpp:2:\n/usr/include/c++/9/valarray:1199:1:\
    \ note: candidate: \u2018template<class _Tp> std::_Expr<std::__detail::_BinClos<std::__less,\
    \ std::_ValArray, std::_Constant, _Tp, _Tp>, typename std::__fun<std::__less,\
    \ _Tp>::result_type> std::operator<(const std::valarray<_Tp>&, const typename\
    \ std::valarray<_Tp>::value_type&)\u2019\n 1199 | _DEFINE_BINARY_OPERATOR(<, __less)\n\
    \      | ^~~~~~~~~~~~~~~~~~~~~~~\n/usr/include/c++/9/valarray:1199:1: note:  \
    \ template argument deduction/substitution failed:\n/tmp/tmpkl58glb2.cpp:39:27:\
    \ note:   \u2018std::__cxx11::basic_string<char>\u2019 is not derived from \u2018\
    const std::valarray<_Tp>\u2019\n   39 |     if(date.substr(0,2) < 1 || date.substr(0,2)\
    \ > 12) {\n      |                           ^\nIn file included from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:95,\n\
    \                 from /tmp/tmpkl58glb2.cpp:2:\n/usr/include/c++/9/valarray:1199:1:\
    \ note: candidate: \u2018template<class _Tp> std::_Expr<std::__detail::_BinClos<std::__less,\
    \ std::_Constant, std::_ValArray, _Tp, _Tp>, typename std::__fun<std::__less,\
    \ _Tp>::result_type> std::operator<(const typename std::valarray<_Tp>::value_type&,\
    \ const std::valarray<_Tp>&)\u2019\n 1199 | _DEFINE_BINARY_OPERATOR(<, __less)\n\
    \      | ^~~~~~~~~~~~~~~~~~~~~~~\n/usr/include/c++/9/valarray:1199:1: note:  \
    \ template argument deduction/substitution failed:\n/tmp/tmpkl58glb2.cpp:39:27:\
    \ note:   mismatched types \u2018const std::valarray<_Tp>\u2019 and \u2018int\u2019\
    \n   39 |     if(date.substr(0,2) < 1 || date.substr(0,2) > 12) {\n      |   \
    \                        ^\nIn file included from /usr/include/c++/9/forward_list:38,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:104,\n\
    \                 from /tmp/tmpkl58glb2.cpp:2:\n/usr/include/c++/9/bits/forward_list.h:1443:5:\
    \ note: candidate: \u2018template<class _Tp, class _Alloc> bool std::operator<(const\
    \ std::forward_list<_Tp, _Alloc>&, const std::forward_list<_Tp, _Alloc>&)\u2019\
    \n 1443 |     operator<(const forward_list<_Tp, _Alloc>& __lx,\n      |     ^~~~~~~~\n\
    /usr/include/c++/9/bits/forward_list.h:1443:5: note:   template argument deduction/substitution\
    \ failed:\n/tmp/tmpkl58glb2.cpp:39:27: note:   \u2018std::__cxx11::basic_string<char>\u2019\
    \ is not derived from \u2018const std::forward_list<_Tp, _Alloc>\u2019\n   39\
    \ |     if(date.substr(0,2) < 1 || date.substr(0,2) > 12) {\n      |         \
    \                  ^\nIn file included from /usr/include/c++/9/future:39,\n  \
    \               from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:105,\n\
    \                 from /tmp/tmpkl58glb2.cpp:2:\n/usr/include/c++/9/thread:290:3:\
    \ note: candidate: \u2018bool std::operator<(std::thread::id, std::thread::id)\u2019\
    \n  290 |   operator<(thread::id __x, thread::id __y) noexcept\n      |   ^~~~~~~~\n\
    /usr/include/c++/9/thread:290:24: note:   no known conversion for argument 1 from\
    \ \u2018std::__cxx11::basic_string<char>\u2019 to \u2018std::thread::id\u2019\n\
    \  290 |   operator<(thread::id __x, thread::id __y) noexcept\n      |       \
    \      ~~~~~~~~~~~^~~\nIn file included from /usr/include/c++/9/bits/stl_algobase.h:67,\n\
    \                 from /usr/include/c++/9/bits/char_traits.h:39,\n           \
    \      from /usr/include/c++/9/ios:40,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmpkl58glb2.cpp:2:\n/usr/include/c++/9/bits/stl_iterator.h:912:5: note:\
    \ candidate: \u2018template<class _IteratorL, class _IteratorR, class _Container>\
    \ bool __gnu_cxx::operator<(const __gnu_cxx::__normal_iterator<_IteratorL, _Container>&,\
    \ const __gnu_cxx::__normal_iterator<_IteratorR, _Container>&)\u2019\n  912 |\
    \     operator<(const __normal_iterator<_IteratorL, _Container>& __lhs,\n    \
    \  |     ^~~~~~~~\n/usr/include/c++/9/bits/stl_iterator.h:912:5: note:   template\
    \ argument deduction/substitution failed:\n/tmp/tmpkl58glb2.cpp:39:27: note: \
    \  \u2018std::__cxx11::basic_string<char>\u2019 is not derived from \u2018const\
    \ __gnu_cxx::__normal_iterator<_IteratorL, _Container>\u2019\n   39 |     if(date.substr(0,2)\
    \ < 1 || date.substr(0,2) > 12) {\n      |                           ^\nIn file\
    \ included from /usr/include/c++/9/bits/stl_algobase.h:67,\n                 from\
    \ /usr/include/c++/9/bits/char_traits.h:39,\n                 from /usr/include/c++/9/ios:40,\n\
    \                 from /usr/include/c++/9/istream:38,\n                 from /usr/include/c++/9/sstream:38,\n\
    \                 from /usr/include/c++/9/complex:45,\n                 from /usr/include/c++/9/ccomplex:39,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n\
    \                 from /tmp/tmpkl58glb2.cpp:2:\n/usr/include/c++/9/bits/stl_iterator.h:919:5:\
    \ note: candidate: \u2018template<class _Iterator, class _Container> bool __gnu_cxx::operator<(const\
    \ __gnu_cxx::__normal_iterator<_Iterator, _Container>&, const __gnu_cxx::__normal_iterator<_Iterator,\
    \ _Container>&)\u2019\n  919 |     operator<(const __normal_iterator<_Iterator,\
    \ _Container>& __lhs,\n      |     ^~~~~~~~\n/usr/include/c++/9/bits/stl_iterator.h:919:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmpkl58glb2.cpp:39:27:\
    \ note:   \u2018std::__cxx11::basic_string<char>\u2019 is not derived from \u2018\
    const __gnu_cxx::__normal_iterator<_Iterator, _Container>\u2019\n   39 |     if(date.substr(0,2)\
    \ < 1 || date.substr(0,2) > 12) {\n      |                           ^\n/tmp/tmpkl58glb2.cpp:39:49:\
    \ error: no match for \u2018operator>\u2019 (operand types are \u2018std::__cxx11::basic_string<char>\u2019\
    \ and \u2018int\u2019)\n   39 |     if(date.substr(0,2) < 1 || date.substr(0,2)\
    \ > 12) {\n      |                                ~~~~~~~~~~~~~~~~ ^ ~~\n    \
    \  |                                           |       |\n      |            \
    \                               |       int\n      |                         \
    \                  std::__cxx11::basic_string<char>\nIn file included from /usr/include/c++/9/regex:62,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:110,\n\
    \                 from /tmp/tmpkl58glb2.cpp:2:\n/usr/include/c++/9/bits/regex.h:1081:5:\
    \ note: candidate: \u2018template<class _BiIter> bool std::__cxx11::operator>(const\
    \ std::__cxx11::sub_match<_BiIter>&, const std::__cxx11::sub_match<_BiIter>&)\u2019\
    \n 1081 |     operator>(const sub_match<_BiIter>& __lhs, const sub_match<_BiIter>&\
    \ __rhs)\n      |     ^~~~~~~~\n/usr/include/c++/9/bits/regex.h:1081:5: note:\
    \   template argument deduction/substitution failed:\n/tmp/tmpkl58glb2.cpp:39:51:\
    \ note:   \u2018std::__cxx11::basic_string<char>\u2019 is not derived from \u2018\
    const std::__cxx11::sub_match<_BiIter>\u2019\n   39 |     if(date.substr(0,2)\
    \ < 1 || date.substr(0,2) > 12) {\n      |                                   \
    \                ^~\nIn file included from /usr/include/c++/9/regex:62,\n    \
    \             from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:110,\n  \
    \               from /tmp/tmpkl58glb2.cpp:2:\n/usr/include/c++/9/bits/regex.h:1136:5:\
    \ note: candidate: \u2018template<class _Bi_iter, class _Ch_traits, class _Ch_alloc>\
    \ bool std::__cxx11::operator>(std::__cxx11::__sub_match_string<_Bi_iter, _Ch_traits,\
    \ _Ch_alloc>&, const std::__cxx11::sub_match<_BiIter>&)\u2019\n 1136 |     operator>(const\
    \ __sub_match_string<_Bi_iter, _Ch_traits, _Ch_alloc>& __lhs,\n      |     ^~~~~~~~\n\
    /usr/include/c++/9/bits/regex.h:1136:5: note:   template argument deduction/substitution\
    \ failed:\n/tmp/tmpkl58glb2.cpp:39:51: note:   mismatched types \u2018const std::__cxx11::sub_match<_BiIter>\u2019\
    \ and \u2018int\u2019\n   39 |     if(date.substr(0,2) < 1 || date.substr(0,2)\
    \ > 12) {\n      |                                                   ^~\nIn file\
    \ included from /usr/include/c++/9/regex:62,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:110,\n\
    \                 from /tmp/tmpkl58glb2.cpp:2:\n/usr/include/c++/9/bits/regex.h:1210:5:\
    \ note: candidate: \u2018template<class _Bi_iter, class _Ch_traits, class _Ch_alloc>\
    \ bool std::__cxx11::operator>(const std::__cxx11::sub_match<_BiIter>&, std::__cxx11::__sub_match_string<_Bi_iter,\
    \ _Ch_traits, _Ch_alloc>&)\u2019\n 1210 |     operator>(const sub_match<_Bi_iter>&\
    \ __lhs,\n      |     ^~~~~~~~\n/usr/include/c++/9/bits/regex.h:1210:5: note:\
    \   template argument deduction/substitution failed:\n/tmp/tmpkl58glb2.cpp:39:51:\
    \ note:   \u2018std::__cxx11::basic_string<char>\u2019 is not derived from \u2018\
    const std::__cxx11::sub_match<_BiIter>\u2019\n   39 |     if(date.substr(0,2)\
    \ < 1 || date.substr(0,2) > 12) {\n      |                                   \
    \                ^~\nIn file included from /usr/include/c++/9/regex:62,\n    \
    \             from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:110,\n  \
    \               from /tmp/tmpkl58glb2.cpp:2:\n/usr/include/c++/9/bits/regex.h:1284:5:\
    \ note: candidate: \u2018template<class _Bi_iter> bool std::__cxx11::operator>(const\
    \ typename std::iterator_traits<_Iter>::value_type*, const std::__cxx11::sub_match<_BiIter>&)\u2019\
    \n 1284 |     operator>(typename iterator_traits<_Bi_iter>::value_type const*\
    \ __lhs,\n      |     ^~~~~~~~\n/usr/include/c++/9/bits/regex.h:1284:5: note:\
    \   template argument deduction/substitution failed:\n/tmp/tmpkl58glb2.cpp:39:51:\
    \ note:   mismatched types \u2018const std::__cxx11::sub_match<_BiIter>\u2019\
    \ and \u2018int\u2019\n   39 |     if(date.substr(0,2) < 1 || date.substr(0,2)\
    \ > 12) {\n      |                                                   ^~\nIn file\
    \ included from /usr/include/c++/9/regex:62,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:110,\n\
    \                 from /tmp/tmpkl58glb2.cpp:2:\n/usr/include/c++/9/bits/regex.h:1358:5:\
    \ note: candidate: \u2018template<class _Bi_iter> bool std::__cxx11::operator>(const\
    \ std::__cxx11::sub_match<_BiIter>&, const typename std::iterator_traits<_Iter>::value_type*)\u2019\
    \n 1358 |     operator>(const sub_match<_Bi_iter>& __lhs,\n      |     ^~~~~~~~\n\
    /usr/include/c++/9/bits/regex.h:1358:5: note:   template argument deduction/substitution\
    \ failed:\n/tmp/tmpkl58glb2.cpp:39:51: note:   \u2018std::__cxx11::basic_string<char>\u2019\
    \ is not derived from \u2018const std::__cxx11::sub_match<_BiIter>\u2019\n   39\
    \ |     if(date.substr(0,2) < 1 || date.substr(0,2) > 12) {\n      |         \
    \                                          ^~\nIn file included from /usr/include/c++/9/regex:62,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:110,\n\
    \                 from /tmp/tmpkl58glb2.cpp:2:\n/usr/include/c++/9/bits/regex.h:1434:5:\
    \ note: candidate: \u2018template<class _Bi_iter> bool std::__cxx11::operator>(const\
    \ typename std::iterator_traits<_Iter>::value_type&, const std::__cxx11::sub_match<_BiIter>&)\u2019\
    \n 1434 |     operator>(typename iterator_traits<_Bi_iter>::value_type const&\
    \ __lhs,\n      |     ^~~~~~~~\n/usr/include/c++/9/bits/regex.h:1434:5: note:\
    \   template argument deduction/substitution failed:\n/tmp/tmpkl58glb2.cpp:39:51:\
    \ note:   mismatched types \u2018const std::__cxx11::sub_match<_BiIter>\u2019\
    \ and \u2018int\u2019\n   39 |     if(date.substr(0,2) < 1 || date.substr(0,2)\
    \ > 12) {\n      |                                                   ^~\nIn file\
    \ included from /usr/include/c++/9/regex:62,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:110,\n\
    \                 from /tmp/tmpkl58glb2.cpp:2:\n/usr/include/c++/9/bits/regex.h:1512:5:\
    \ note: candidate: \u2018template<class _Bi_iter> bool std::__cxx11::operator>(const\
    \ std::__cxx11::sub_match<_BiIter>&, const typename std::iterator_traits<_Iter>::value_type&)\u2019\
    \n 1512 |     operator>(const sub_match<_Bi_iter>& __lhs,\n      |     ^~~~~~~~\n\
    /usr/include/c++/9/bits/regex.h:1512:5: note:   template argument deduction/substitution\
    \ failed:\n/tmp/tmpkl58glb2.cpp:39:51: note:   \u2018std::__cxx11::basic_string<char>\u2019\
    \ is not derived from \u2018const std::__cxx11::sub_match<_BiIter>\u2019\n   39\
    \ |     if(date.substr(0,2) < 1 || date.substr(0,2) > 12) {\n      |         \
    \                                          ^~\nIn file included from /usr/include/c++/9/bits/stl_algobase.h:64,\n\
    \                 from /usr/include/c++/9/bits/char_traits.h:39,\n           \
    \      from /usr/include/c++/9/ios:40,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmpkl58glb2.cpp:2:\n/usr/include/c++/9/bits/stl_pair.h:467:5: note: candidate:\
    \ \u2018template<class _T1, class _T2> constexpr bool std::operator>(const std::pair<_T1,\
    \ _T2>&, const std::pair<_T1, _T2>&)\u2019\n  467 |     operator>(const pair<_T1,\
    \ _T2>& __x, const pair<_T1, _T2>& __y)\n      |     ^~~~~~~~\n/usr/include/c++/9/bits/stl_pair.h:467:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmpkl58glb2.cpp:39:51:\
    \ note:   \u2018std::__cxx11::basic_string<char>\u2019 is not derived from \u2018\
    const std::pair<_T1, _T2>\u2019\n   39 |     if(date.substr(0,2) < 1 || date.substr(0,2)\
    \ > 12) {\n      |                                                   ^~\nIn file\
    \ included from /usr/include/c++/9/bits/stl_algobase.h:67,\n                 from\
    \ /usr/include/c++/9/bits/char_traits.h:39,\n                 from /usr/include/c++/9/ios:40,\n\
    \                 from /usr/include/c++/9/istream:38,\n                 from /usr/include/c++/9/sstream:38,\n\
    \                 from /usr/include/c++/9/complex:45,\n                 from /usr/include/c++/9/ccomplex:39,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n\
    \                 from /tmp/tmpkl58glb2.cpp:2:\n/usr/include/c++/9/bits/stl_iterator.h:343:5:\
    \ note: candidate: \u2018template<class _Iterator> bool std::operator>(const std::reverse_iterator<_Iterator>&,\
    \ const std::reverse_iterator<_Iterator>&)\u2019\n  343 |     operator>(const\
    \ reverse_iterator<_Iterator>& __x,\n      |     ^~~~~~~~\n/usr/include/c++/9/bits/stl_iterator.h:343:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmpkl58glb2.cpp:39:51:\
    \ note:   \u2018std::__cxx11::basic_string<char>\u2019 is not derived from \u2018\
    const std::reverse_iterator<_Iterator>\u2019\n   39 |     if(date.substr(0,2)\
    \ < 1 || date.substr(0,2) > 12) {\n      |                                   \
    \                ^~\nIn file included from /usr/include/c++/9/bits/stl_algobase.h:67,\n\
    \                 from /usr/include/c++/9/bits/char_traits.h:39,\n           \
    \      from /usr/include/c++/9/ios:40,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmpkl58glb2.cpp:2:\n/usr/include/c++/9/bits/stl_iterator.h:381:5: note:\
    \ candidate: \u2018template<class _IteratorL, class _IteratorR> bool std::operator>(const\
    \ std::reverse_iterator<_Iterator>&, const std::reverse_iterator<_IteratorR>&)\u2019\
    \n  381 |     operator>(const reverse_iterator<_IteratorL>& __x,\n      |    \
    \ ^~~~~~~~\n/usr/include/c++/9/bits/stl_iterator.h:381:5: note:   template argument\
    \ deduction/substitution failed:\n/tmp/tmpkl58glb2.cpp:39:51: note:   \u2018std::__cxx11::basic_string<char>\u2019\
    \ is not derived from \u2018const std::reverse_iterator<_Iterator>\u2019\n   39\
    \ |     if(date.substr(0,2) < 1 || date.substr(0,2) > 12) {\n      |         \
    \                                          ^~\nIn file included from /usr/include/c++/9/bits/stl_algobase.h:67,\n\
    \                 from /usr/include/c++/9/bits/char_traits.h:39,\n           \
    \      from /usr/include/c++/9/ios:40,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmpkl58glb2.cpp:2:\n/usr/include/c++/9/bits/stl_iterator.h:1184:5: note:\
    \ candidate: \u2018template<class _IteratorL, class _IteratorR> bool std::operator>(const\
    \ std::move_iterator<_IteratorL>&, const std::move_iterator<_IteratorR>&)\u2019\
    \n 1184 |     operator>(const move_iterator<_IteratorL>& __x,\n      |     ^~~~~~~~\n\
    /usr/include/c++/9/bits/stl_iterator.h:1184:5: note:   template argument deduction/substitution\
    \ failed:\n/tmp/tmpkl58glb2.cpp:39:51: note:   \u2018std::__cxx11::basic_string<char>\u2019\
    \ is not derived from \u2018const std::move_iterator<_IteratorL>\u2019\n   39\
    \ |     if(date.substr(0,2) < 1 || date.substr(0,2) > 12) {\n      |         \
    \                                          ^~\nIn file included from /usr/include/c++/9/bits/stl_algobase.h:67,\n\
    \                 from /usr/include/c++/9/bits/char_traits.h:39,\n           \
    \      from /usr/include/c++/9/ios:40,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmpkl58glb2.cpp:2:\n/usr/include/c++/9/bits/stl_iterator.h:1190:5: note:\
    \ candidate: \u2018template<class _Iterator> bool std::operator>(const std::move_iterator<_IteratorL>&,\
    \ const std::move_iterator<_IteratorL>&)\u2019\n 1190 |     operator>(const move_iterator<_Iterator>&\
    \ __x,\n      |     ^~~~~~~~\n/usr/include/c++/9/bits/stl_iterator.h:1190:5: note:\
    \   template argument deduction/substitution failed:\n/tmp/tmpkl58glb2.cpp:39:51:\
    \ note:   \u2018std::__cxx11::basic_string<char>\u2019 is not derived from \u2018\
    const std::move_iterator<_IteratorL>\u2019\n   39 |     if(date.substr(0,2) <\
    \ 1 || date.substr(0,2) > 12) {\n      |                                     \
    \              ^~\nIn file included from /usr/include/c++/9/string:55,\n     \
    \            from /usr/include/c++/9/bits/locale_classes.h:40,\n             \
    \    from /usr/include/c++/9/bits/ios_base.h:41,\n                 from /usr/include/c++/9/ios:42,\n\
    \                 from /usr/include/c++/9/istream:38,\n                 from /usr/include/c++/9/sstream:38,\n\
    \                 from /usr/include/c++/9/complex:45,\n                 from /usr/include/c++/9/ccomplex:39,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n\
    \                 from /tmp/tmpkl58glb2.cpp:2:\n/usr/include/c++/9/bits/basic_string.h:6267:5:\
    \ note: candidate: \u2018template<class _CharT, class _Traits, class _Alloc> bool\
    \ std::operator>(const std::__cxx11::basic_string<_CharT, _Traits, _Alloc>&, const\
    \ std::__cxx11::basic_string<_CharT, _Traits, _Alloc>&)\u2019\n 6267 |     operator>(const\
    \ basic_string<_CharT, _Traits, _Alloc>& __lhs,\n      |     ^~~~~~~~\n/usr/include/c++/9/bits/basic_string.h:6267:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmpkl58glb2.cpp:39:51:\
    \ note:   mismatched types \u2018const std::__cxx11::basic_string<_CharT, _Traits,\
    \ _Alloc>\u2019 and \u2018int\u2019\n   39 |     if(date.substr(0,2) < 1 || date.substr(0,2)\
    \ > 12) {\n      |                                                   ^~\nIn file\
    \ included from /usr/include/c++/9/string:55,\n                 from /usr/include/c++/9/bits/locale_classes.h:40,\n\
    \                 from /usr/include/c++/9/bits/ios_base.h:41,\n              \
    \   from /usr/include/c++/9/ios:42,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmpkl58glb2.cpp:2:\n/usr/include/c++/9/bits/basic_string.h:6280:5: note:\
    \ candidate: \u2018template<class _CharT, class _Traits, class _Alloc> bool std::operator>(const\
    \ std::__cxx11::basic_string<_CharT, _Traits, _Alloc>&, const _CharT*)\u2019\n\
    \ 6280 |     operator>(const basic_string<_CharT, _Traits, _Alloc>& __lhs,\n \
    \     |     ^~~~~~~~\n/usr/include/c++/9/bits/basic_string.h:6280:5: note:   template\
    \ argument deduction/substitution failed:\n/tmp/tmpkl58glb2.cpp:39:51: note: \
    \  mismatched types \u2018const _CharT*\u2019 and \u2018int\u2019\n   39 |   \
    \  if(date.substr(0,2) < 1 || date.substr(0,2) > 12) {\n      |              \
    \                                     ^~\nIn file included from /usr/include/c++/9/string:55,\n\
    \                 from /usr/include/c++/9/bits/locale_classes.h:40,\n        \
    \         from /usr/include/c++/9/bits/ios_base.h:41,\n                 from /usr/include/c++/9/ios:42,\n\
    \                 from /usr/include/c++/9/istream:38,\n                 from /usr/include/c++/9/sstream:38,\n\
    \                 from /usr/include/c++/9/complex:45,\n                 from /usr/include/c++/9/ccomplex:39,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n\
    \                 from /tmp/tmpkl58glb2.cpp:2:\n/usr/include/c++/9/bits/basic_string.h:6292:5:\
    \ note: candidate: \u2018template<class _CharT, class _Traits, class _Alloc> bool\
    \ std::operator>(const _CharT*, const std::__cxx11::basic_string<_CharT, _Traits,\
    \ _Alloc>&)\u2019\n 6292 |     operator>(const _CharT* __lhs,\n      |     ^~~~~~~~\n\
    /usr/include/c++/9/bits/basic_string.h:6292:5: note:   template argument deduction/substitution\
    \ failed:\n/tmp/tmpkl58glb2.cpp:39:51: note:   mismatched types \u2018const _CharT*\u2019\
    \ and \u2018std::__cxx11::basic_string<char>\u2019\n   39 |     if(date.substr(0,2)\
    \ < 1 || date.substr(0,2) > 12) {\n      |                                   \
    \                ^~\nIn file included from /usr/include/c++/9/deque:67,\n    \
    \             from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:68,\n   \
    \              from /tmp/tmpkl58glb2.cpp:2:\n/usr/include/c++/9/bits/stl_deque.h:327:5:\
    \ note: candidate: \u2018template<class _Tp, class _Ref, class _Ptr> bool std::operator>(const\
    \ std::_Deque_iterator<_Tp, _Ref, _Ptr>&, const std::_Deque_iterator<_Tp, _Ref,\
    \ _Ptr>&)\u2019\n  327 |     operator>(const _Deque_iterator<_Tp, _Ref, _Ptr>&\
    \ __x,\n      |     ^~~~~~~~\n/usr/include/c++/9/bits/stl_deque.h:327:5: note:\
    \   template argument deduction/substitution failed:\n/tmp/tmpkl58glb2.cpp:39:51:\
    \ note:   \u2018std::__cxx11::basic_string<char>\u2019 is not derived from \u2018\
    const std::_Deque_iterator<_Tp, _Ref, _Ptr>\u2019\n   39 |     if(date.substr(0,2)\
    \ < 1 || date.substr(0,2) > 12) {\n      |                                   \
    \                ^~\nIn file included from /usr/include/c++/9/deque:67,\n    \
    \             from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:68,\n   \
    \              from /tmp/tmpkl58glb2.cpp:2:\n/usr/include/c++/9/bits/stl_deque.h:334:5:\
    \ note: candidate: \u2018template<class _Tp, class _RefL, class _PtrL, class _RefR,\
    \ class _PtrR> bool std::operator>(const std::_Deque_iterator<_Tp, _Ref, _Ptr>&,\
    \ const std::_Deque_iterator<_Tp, _RefR, _PtrR>&)\u2019\n  334 |     operator>(const\
    \ _Deque_iterator<_Tp, _RefL, _PtrL>& __x,\n      |     ^~~~~~~~\n/usr/include/c++/9/bits/stl_deque.h:334:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmpkl58glb2.cpp:39:51:\
    \ note:   \u2018std::__cxx11::basic_string<char>\u2019 is not derived from \u2018\
    const std::_Deque_iterator<_Tp, _Ref, _Ptr>\u2019\n   39 |     if(date.substr(0,2)\
    \ < 1 || date.substr(0,2) > 12) {\n      |                                   \
    \                ^~\nIn file included from /usr/include/c++/9/deque:67,\n    \
    \             from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:68,\n   \
    \              from /tmp/tmpkl58glb2.cpp:2:\n/usr/include/c++/9/bits/stl_deque.h:2345:5:\
    \ note: candidate: \u2018template<class _Tp, class _Alloc> bool std::operator>(const\
    \ std::deque<_Tp, _Alloc>&, const std::deque<_Tp, _Alloc>&)\u2019\n 2345 |   \
    \  operator>(const deque<_Tp, _Alloc>& __x,\n      |     ^~~~~~~~\n/usr/include/c++/9/bits/stl_deque.h:2345:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmpkl58glb2.cpp:39:51:\
    \ note:   \u2018std::__cxx11::basic_string<char>\u2019 is not derived from \u2018\
    const std::deque<_Tp, _Alloc>\u2019\n   39 |     if(date.substr(0,2) < 1 || date.substr(0,2)\
    \ > 12) {\n      |                                                   ^~\nIn file\
    \ included from /usr/include/c++/9/tuple:39,\n                 from /usr/include/c++/9/functional:54,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:71,\n\
    \                 from /tmp/tmpkl58glb2.cpp:2:\n/usr/include/c++/9/array:270:5:\
    \ note: candidate: \u2018template<class _Tp, long unsigned int _Nm> bool std::operator>(const\
    \ std::array<_Tp, _Nm>&, const std::array<_Tp, _Nm>&)\u2019\n  270 |     operator>(const\
    \ array<_Tp, _Nm>& __one, const array<_Tp, _Nm>& __two)\n      |     ^~~~~~~~\n\
    /usr/include/c++/9/array:270:5: note:   template argument deduction/substitution\
    \ failed:\n/tmp/tmpkl58glb2.cpp:39:51: note:   \u2018std::__cxx11::basic_string<char>\u2019\
    \ is not derived from \u2018const std::array<_Tp, _Nm>\u2019\n   39 |     if(date.substr(0,2)\
    \ < 1 || date.substr(0,2) > 12) {\n      |                                   \
    \                ^~\nIn file included from /usr/include/c++/9/functional:54,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:71,\n\
    \                 from /tmp/tmpkl58glb2.cpp:2:\n/usr/include/c++/9/tuple:1451:5:\
    \ note: candidate: \u2018template<class ... _TElements, class ... _UElements>\
    \ constexpr bool std::operator>(const std::tuple<_Tps ...>&, const std::tuple<_Elements\
    \ ...>&)\u2019\n 1451 |     operator>(const tuple<_TElements...>& __t,\n     \
    \ |     ^~~~~~~~\n/usr/include/c++/9/tuple:1451:5: note:   template argument deduction/substitution\
    \ failed:\n/tmp/tmpkl58glb2.cpp:39:51: note:   \u2018std::__cxx11::basic_string<char>\u2019\
    \ is not derived from \u2018const std::tuple<_Tps ...>\u2019\n   39 |     if(date.substr(0,2)\
    \ < 1 || date.substr(0,2) > 12) {\n      |                                   \
    \                ^~\nIn file included from /usr/include/c++/9/bits/locale_conv.h:41,\n\
    \                 from /usr/include/c++/9/locale:43,\n                 from /usr/include/c++/9/iomanip:43,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:72,\n\
    \                 from /tmp/tmpkl58glb2.cpp:2:\n/usr/include/c++/9/bits/unique_ptr.h:790:5:\
    \ note: candidate: \u2018template<class _Tp, class _Dp, class _Up, class _Ep>\
    \ bool std::operator>(const std::unique_ptr<_Tp, _Dp>&, const std::unique_ptr<_Up,\
    \ _Ep>&)\u2019\n  790 |     operator>(const unique_ptr<_Tp, _Dp>& __x,\n     \
    \ |     ^~~~~~~~\n/usr/include/c++/9/bits/unique_ptr.h:790:5: note:   template\
    \ argument deduction/substitution failed:\n/tmp/tmpkl58glb2.cpp:39:51: note: \
    \  \u2018std::__cxx11::basic_string<char>\u2019 is not derived from \u2018const\
    \ std::unique_ptr<_Tp, _Dp>\u2019\n   39 |     if(date.substr(0,2) < 1 || date.substr(0,2)\
    \ > 12) {\n      |                                                   ^~\nIn file\
    \ included from /usr/include/c++/9/bits/locale_conv.h:41,\n                 from\
    \ /usr/include/c++/9/locale:43,\n                 from /usr/include/c++/9/iomanip:43,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:72,\n\
    \                 from /tmp/tmpkl58glb2.cpp:2:\n/usr/include/c++/9/bits/unique_ptr.h:796:5:\
    \ note: candidate: \u2018template<class _Tp, class _Dp> bool std::operator>(const\
    \ std::unique_ptr<_Tp, _Dp>&, std::nullptr_t)\u2019\n  796 |     operator>(const\
    \ unique_ptr<_Tp, _Dp>& __x, nullptr_t)\n      |     ^~~~~~~~\n/usr/include/c++/9/bits/unique_ptr.h:796:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmpkl58glb2.cpp:39:51:\
    \ note:   \u2018std::__cxx11::basic_string<char>\u2019 is not derived from \u2018\
    const std::unique_ptr<_Tp, _Dp>\u2019\n   39 |     if(date.substr(0,2) < 1 ||\
    \ date.substr(0,2) > 12) {\n      |                                          \
    \         ^~\nIn file included from /usr/include/c++/9/bits/locale_conv.h:41,\n\
    \                 from /usr/include/c++/9/locale:43,\n                 from /usr/include/c++/9/iomanip:43,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:72,\n\
    \                 from /tmp/tmpkl58glb2.cpp:2:\n/usr/include/c++/9/bits/unique_ptr.h:802:5:\
    \ note: candidate: \u2018template<class _Tp, class _Dp> bool std::operator>(std::nullptr_t,\
    \ const std::unique_ptr<_Tp, _Dp>&)\u2019\n  802 |     operator>(nullptr_t, const\
    \ unique_ptr<_Tp, _Dp>& __x)\n      |     ^~~~~~~~\n/usr/include/c++/9/bits/unique_ptr.h:802:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmpkl58glb2.cpp:39:51:\
    \ note:   mismatched types \u2018const std::unique_ptr<_Tp, _Dp>\u2019 and \u2018\
    int\u2019\n   39 |     if(date.substr(0,2) < 1 || date.substr(0,2) > 12) {\n \
    \     |                                                   ^~\nIn file included\
    \ from /usr/include/c++/9/list:63,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:79,\n\
    \                 from /tmp/tmpkl58glb2.cpp:2:\n/usr/include/c++/9/bits/stl_list.h:2038:5:\
    \ note: candidate: \u2018template<class _Tp, class _Alloc> bool std::operator>(const\
    \ std::__cxx11::list<_Tp, _Alloc>&, const std::__cxx11::list<_Tp, _Alloc>&)\u2019\
    \n 2038 |     operator>(const list<_Tp, _Alloc>& __x, const list<_Tp, _Alloc>&\
    \ __y)\n      |     ^~~~~~~~\n/usr/include/c++/9/bits/stl_list.h:2038:5: note:\
    \   template argument deduction/substitution failed:\n/tmp/tmpkl58glb2.cpp:39:51:\
    \ note:   \u2018std::__cxx11::basic_string<char>\u2019 is not derived from \u2018\
    const std::__cxx11::list<_Tp, _Alloc>\u2019\n   39 |     if(date.substr(0,2) <\
    \ 1 || date.substr(0,2) > 12) {\n      |                                     \
    \              ^~\nIn file included from /usr/include/c++/9/map:61,\n        \
    \         from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:81,\n       \
    \          from /tmp/tmpkl58glb2.cpp:2:\n/usr/include/c++/9/bits/stl_map.h:1486:5:\
    \ note: candidate: \u2018template<class _Key, class _Tp, class _Compare, class\
    \ _Alloc> bool std::operator>(const std::map<_Key, _Tp, _Compare, _Alloc>&, const\
    \ std::map<_Key, _Tp, _Compare, _Alloc>&)\u2019\n 1486 |     operator>(const map<_Key,\
    \ _Tp, _Compare, _Alloc>& __x,\n      |     ^~~~~~~~\n/usr/include/c++/9/bits/stl_map.h:1486:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmpkl58glb2.cpp:39:51:\
    \ note:   \u2018std::__cxx11::basic_string<char>\u2019 is not derived from \u2018\
    const std::map<_Key, _Tp, _Compare, _Alloc>\u2019\n   39 |     if(date.substr(0,2)\
    \ < 1 || date.substr(0,2) > 12) {\n      |                                   \
    \                ^~\nIn file included from /usr/include/c++/9/map:62,\n      \
    \           from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:81,\n     \
    \            from /tmp/tmpkl58glb2.cpp:2:\n/usr/include/c++/9/bits/stl_multimap.h:1150:5:\
    \ note: candidate: \u2018template<class _Key, class _Tp, class _Compare, class\
    \ _Alloc> bool std::operator>(const std::multimap<_Key, _Tp, _Compare, _Alloc>&,\
    \ const std::multimap<_Key, _Tp, _Compare, _Alloc>&)\u2019\n 1150 |     operator>(const\
    \ multimap<_Key, _Tp, _Compare, _Alloc>& __x,\n      |     ^~~~~~~~\n/usr/include/c++/9/bits/stl_multimap.h:1150:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmpkl58glb2.cpp:39:51:\
    \ note:   \u2018std::__cxx11::basic_string<char>\u2019 is not derived from \u2018\
    const std::multimap<_Key, _Tp, _Compare, _Alloc>\u2019\n   39 |     if(date.substr(0,2)\
    \ < 1 || date.substr(0,2) > 12) {\n      |                                   \
    \                ^~\nIn file included from /usr/include/c++/9/bits/shared_ptr.h:52,\n\
    \                 from /usr/include/c++/9/memory:81,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:82,\n\
    \                 from /tmp/tmpkl58glb2.cpp:2:\n/usr/include/c++/9/bits/shared_ptr_base.h:1487:5:\
    \ note: candidate: \u2018template<class _Tp1, class _Tp2, __gnu_cxx::_Lock_policy\
    \ _Lp> bool std::operator>(const std::__shared_ptr<_Tp1, _Lp>&, const std::__shared_ptr<_Tp2,\
    \ _Lp>&)\u2019\n 1487 |     operator>(const __shared_ptr<_Tp1, _Lp>& __a,\n  \
    \    |     ^~~~~~~~\n/usr/include/c++/9/bits/shared_ptr_base.h:1487:5: note: \
    \  template argument deduction/substitution failed:\n/tmp/tmpkl58glb2.cpp:39:51:\
    \ note:   \u2018std::__cxx11::basic_string<char>\u2019 is not derived from \u2018\
    const std::__shared_ptr<_Tp1, _Lp>\u2019\n   39 |     if(date.substr(0,2) < 1\
    \ || date.substr(0,2) > 12) {\n      |                                       \
    \            ^~\nIn file included from /usr/include/c++/9/bits/shared_ptr.h:52,\n\
    \                 from /usr/include/c++/9/memory:81,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:82,\n\
    \                 from /tmp/tmpkl58glb2.cpp:2:\n/usr/include/c++/9/bits/shared_ptr_base.h:1493:5:\
    \ note: candidate: \u2018template<class _Tp, __gnu_cxx::_Lock_policy _Lp> bool\
    \ std::operator>(const std::__shared_ptr<_Tp, _Lp>&, std::nullptr_t)\u2019\n 1493\
    \ |     operator>(const __shared_ptr<_Tp, _Lp>& __a, nullptr_t) noexcept\n   \
    \   |     ^~~~~~~~\n/usr/include/c++/9/bits/shared_ptr_base.h:1493:5: note:  \
    \ template argument deduction/substitution failed:\n/tmp/tmpkl58glb2.cpp:39:51:\
    \ note:   \u2018std::__cxx11::basic_string<char>\u2019 is not derived from \u2018\
    const std::__shared_ptr<_Tp, _Lp>\u2019\n   39 |     if(date.substr(0,2) < 1 ||\
    \ date.substr(0,2) > 12) {\n      |                                          \
    \         ^~\nIn file included from /usr/include/c++/9/bits/shared_ptr.h:52,\n\
    \                 from /usr/include/c++/9/memory:81,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:82,\n\
    \                 from /tmp/tmpkl58glb2.cpp:2:\n/usr/include/c++/9/bits/shared_ptr_base.h:1498:5:\
    \ note: candidate: \u2018template<class _Tp, __gnu_cxx::_Lock_policy _Lp> bool\
    \ std::operator>(std::nullptr_t, const std::__shared_ptr<_Tp, _Lp>&)\u2019\n 1498\
    \ |     operator>(nullptr_t, const __shared_ptr<_Tp, _Lp>& __a) noexcept\n   \
    \   |     ^~~~~~~~\n/usr/include/c++/9/bits/shared_ptr_base.h:1498:5: note:  \
    \ template argument deduction/substitution failed:\n/tmp/tmpkl58glb2.cpp:39:51:\
    \ note:   mismatched types \u2018const std::__shared_ptr<_Tp, _Lp>\u2019 and \u2018\
    int\u2019\n   39 |     if(date.substr(0,2) < 1 || date.substr(0,2) > 12) {\n \
    \     |                                                   ^~\nIn file included\
    \ from /usr/include/c++/9/memory:81,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:82,\n\
    \                 from /tmp/tmpkl58glb2.cpp:2:\n/usr/include/c++/9/bits/shared_ptr.h:454:5:\
    \ note: candidate: \u2018template<class _Tp, class _Up> bool std::operator>(const\
    \ std::shared_ptr<_Tp>&, const std::shared_ptr<_Tp>&)\u2019\n  454 |     operator>(const\
    \ shared_ptr<_Tp>& __a, const shared_ptr<_Up>& __b) noexcept\n      |     ^~~~~~~~\n\
    /usr/include/c++/9/bits/shared_ptr.h:454:5: note:   template argument deduction/substitution\
    \ failed:\n/tmp/tmpkl58glb2.cpp:39:51: note:   \u2018std::__cxx11::basic_string<char>\u2019\
    \ is not derived from \u2018const std::shared_ptr<_Tp>\u2019\n   39 |     if(date.substr(0,2)\
    \ < 1 || date.substr(0,2) > 12) {\n      |                                   \
    \                ^~\nIn file included from /usr/include/c++/9/memory:81,\n   \
    \              from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:82,\n  \
    \               from /tmp/tmpkl58glb2.cpp:2:\n/usr/include/c++/9/bits/shared_ptr.h:459:5:\
    \ note: candidate: \u2018template<class _Tp> bool std::operator>(const std::shared_ptr<_Tp>&,\
    \ std::nullptr_t)\u2019\n  459 |     operator>(const shared_ptr<_Tp>& __a, nullptr_t)\
    \ noexcept\n      |     ^~~~~~~~\n/usr/include/c++/9/bits/shared_ptr.h:459:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmpkl58glb2.cpp:39:51:\
    \ note:   \u2018std::__cxx11::basic_string<char>\u2019 is not derived from \u2018\
    const std::shared_ptr<_Tp>\u2019\n   39 |     if(date.substr(0,2) < 1 || date.substr(0,2)\
    \ > 12) {\n      |                                                   ^~\nIn file\
    \ included from /usr/include/c++/9/memory:81,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:82,\n\
    \                 from /tmp/tmpkl58glb2.cpp:2:\n/usr/include/c++/9/bits/shared_ptr.h:464:5:\
    \ note: candidate: \u2018template<class _Tp> bool std::operator>(std::nullptr_t,\
    \ const std::shared_ptr<_Tp>&)\u2019\n  464 |     operator>(nullptr_t, const shared_ptr<_Tp>&\
    \ __a) noexcept\n      |     ^~~~~~~~\n/usr/include/c++/9/bits/shared_ptr.h:464:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmpkl58glb2.cpp:39:51:\
    \ note:   mismatched types \u2018const std::shared_ptr<_Tp>\u2019 and \u2018int\u2019\
    \n   39 |     if(date.substr(0,2) < 1 || date.substr(0,2) > 12) {\n      |   \
    \                                                ^~\nIn file included from /usr/include/c++/9/vector:67,\n\
    \                 from /usr/include/c++/9/queue:61,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:86,\n\
    \                 from /tmp/tmpkl58glb2.cpp:2:\n/usr/include/c++/9/bits/stl_vector.h:1918:5:\
    \ note: candidate: \u2018template<class _Tp, class _Alloc> bool std::operator>(const\
    \ std::vector<_Tp, _Alloc>&, const std::vector<_Tp, _Alloc>&)\u2019\n 1918 | \
    \    operator>(const vector<_Tp, _Alloc>& __x, const vector<_Tp, _Alloc>& __y)\n\
    \      |     ^~~~~~~~\n/usr/include/c++/9/bits/stl_vector.h:1918:5: note:   template\
    \ argument deduction/substitution failed:\n/tmp/tmpkl58glb2.cpp:39:51: note: \
    \  \u2018std::__cxx11::basic_string<char>\u2019 is not derived from \u2018const\
    \ std::vector<_Tp, _Alloc>\u2019\n   39 |     if(date.substr(0,2) < 1 || date.substr(0,2)\
    \ > 12) {\n      |                                                   ^~\nIn file\
    \ included from /usr/include/c++/9/queue:64,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:86,\n\
    \                 from /tmp/tmpkl58glb2.cpp:2:\n/usr/include/c++/9/bits/stl_queue.h:368:5:\
    \ note: candidate: \u2018template<class _Tp, class _Seq> bool std::operator>(const\
    \ std::queue<_Tp, _Seq>&, const std::queue<_Tp, _Seq>&)\u2019\n  368 |     operator>(const\
    \ queue<_Tp, _Seq>& __x, const queue<_Tp, _Seq>& __y)\n      |     ^~~~~~~~\n\
    /usr/include/c++/9/bits/stl_queue.h:368:5: note:   template argument deduction/substitution\
    \ failed:\n/tmp/tmpkl58glb2.cpp:39:51: note:   \u2018std::__cxx11::basic_string<char>\u2019\
    \ is not derived from \u2018const std::queue<_Tp, _Seq>\u2019\n   39 |     if(date.substr(0,2)\
    \ < 1 || date.substr(0,2) > 12) {\n      |                                   \
    \                ^~\nIn file included from /usr/include/c++/9/set:61,\n      \
    \           from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:87,\n     \
    \            from /tmp/tmpkl58glb2.cpp:2:\n/usr/include/c++/9/bits/stl_set.h:1010:5:\
    \ note: candidate: \u2018template<class _Key, class _Compare, class _Alloc> bool\
    \ std::operator>(const std::set<_Key, _Compare, _Alloc>&, const std::set<_Key,\
    \ _Compare, _Alloc>&)\u2019\n 1010 |     operator>(const set<_Key, _Compare, _Alloc>&\
    \ __x,\n      |     ^~~~~~~~\n/usr/include/c++/9/bits/stl_set.h:1010:5: note:\
    \   template argument deduction/substitution failed:\n/tmp/tmpkl58glb2.cpp:39:51:\
    \ note:   \u2018std::__cxx11::basic_string<char>\u2019 is not derived from \u2018\
    const std::set<_Key, _Compare, _Alloc>\u2019\n   39 |     if(date.substr(0,2)\
    \ < 1 || date.substr(0,2) > 12) {\n      |                                   \
    \                ^~\nIn file included from /usr/include/c++/9/set:62,\n      \
    \           from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:87,\n     \
    \            from /tmp/tmpkl58glb2.cpp:2:\n/usr/include/c++/9/bits/stl_multiset.h:995:5:\
    \ note: candidate: \u2018template<class _Key, class _Compare, class _Alloc> bool\
    \ std::operator>(const std::multiset<_Key, _Compare, _Alloc>&, const std::multiset<_Key,\
    \ _Compare, _Alloc>&)\u2019\n  995 |     operator>(const multiset<_Key,_Compare,_Alloc>&\
    \ __x,\n      |     ^~~~~~~~\n/usr/include/c++/9/bits/stl_multiset.h:995:5: note:\
    \   template argument deduction/substitution failed:\n/tmp/tmpkl58glb2.cpp:39:51:\
    \ note:   \u2018std::__cxx11::basic_string<char>\u2019 is not derived from \u2018\
    const std::multiset<_Key, _Compare, _Alloc>\u2019\n   39 |     if(date.substr(0,2)\
    \ < 1 || date.substr(0,2) > 12) {\n      |                                   \
    \                ^~\nIn file included from /usr/include/c++/9/stack:61,\n    \
    \             from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:89,\n   \
    \              from /tmp/tmpkl58glb2.cpp:2:\n/usr/include/c++/9/bits/stl_stack.h:343:5:\
    \ note: candidate: \u2018template<class _Tp, class _Seq> bool std::operator>(const\
    \ std::stack<_Tp, _Seq>&, const std::stack<_Tp, _Seq>&)\u2019\n  343 |     operator>(const\
    \ stack<_Tp, _Seq>& __x, const stack<_Tp, _Seq>& __y)\n      |     ^~~~~~~~\n\
    /usr/include/c++/9/bits/stl_stack.h:343:5: note:   template argument deduction/substitution\
    \ failed:\n/tmp/tmpkl58glb2.cpp:39:51: note:   \u2018std::__cxx11::basic_string<char>\u2019\
    \ is not derived from \u2018const std::stack<_Tp, _Seq>\u2019\n   39 |     if(date.substr(0,2)\
    \ < 1 || date.substr(0,2) > 12) {\n      |                                   \
    \                ^~\nIn file included from /usr/include/c++/9/valarray:603,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:95,\n\
    \                 from /tmp/tmpkl58glb2.cpp:2:\n/usr/include/c++/9/bits/valarray_after.h:420:5:\
    \ note: candidate: \u2018template<class _Dom1, class _Dom2> std::_Expr<std::__detail::_BinClos<std::__greater,\
    \ std::_Expr, std::_Expr, _Dom1, _Dom2>, typename std::__fun<std::__greater, typename\
    \ _Dom1::value_type>::result_type> std::operator>(const std::_Expr<_Dom1, typename\
    \ _Dom1::value_type>&, const std::_Expr<_Dom2, typename _Dom2::value_type>&)\u2019\
    \n  420 |     _DEFINE_EXPR_BINARY_OPERATOR(>, __greater)\n      |     ^~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /usr/include/c++/9/bits/valarray_after.h:420:5: note:   template argument deduction/substitution\
    \ failed:\n/tmp/tmpkl58glb2.cpp:39:51: note:   \u2018std::__cxx11::basic_string<char>\u2019\
    \ is not derived from \u2018const std::_Expr<_Dom1, typename _Dom1::value_type>\u2019\
    \n   39 |     if(date.substr(0,2) < 1 || date.substr(0,2) > 12) {\n      |   \
    \                                                ^~\nIn file included from /usr/include/c++/9/valarray:603,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:95,\n\
    \                 from /tmp/tmpkl58glb2.cpp:2:\n/usr/include/c++/9/bits/valarray_after.h:420:5:\
    \ note: candidate: \u2018template<class _Dom> std::_Expr<std::__detail::_BinClos<std::__greater,\
    \ std::_Expr, std::_Constant, _Dom, typename _Dom::value_type>, typename std::__fun<std::__greater,\
    \ typename _Dom1::value_type>::result_type> std::operator>(const std::_Expr<_Dom1,\
    \ typename _Dom1::value_type>&, const typename _Dom::value_type&)\u2019\n  420\
    \ |     _DEFINE_EXPR_BINARY_OPERATOR(>, __greater)\n      |     ^~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /usr/include/c++/9/bits/valarray_after.h:420:5: note:   template argument deduction/substitution\
    \ failed:\n/tmp/tmpkl58glb2.cpp:39:51: note:   \u2018std::__cxx11::basic_string<char>\u2019\
    \ is not derived from \u2018const std::_Expr<_Dom1, typename _Dom1::value_type>\u2019\
    \n   39 |     if(date.substr(0,2) < 1 || date.substr(0,2) > 12) {\n      |   \
    \                                                ^~\nIn file included from /usr/include/c++/9/valarray:603,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:95,\n\
    \                 from /tmp/tmpkl58glb2.cpp:2:\n/usr/include/c++/9/bits/valarray_after.h:420:5:\
    \ note: candidate: \u2018template<class _Dom> std::_Expr<std::__detail::_BinClos<std::__greater,\
    \ std::_Constant, std::_Expr, typename _Dom::value_type, _Dom>, typename std::__fun<std::__greater,\
    \ typename _Dom1::value_type>::result_type> std::operator>(const typename _Dom::value_type&,\
    \ const std::_Expr<_Dom1, typename _Dom1::value_type>&)\u2019\n  420 |     _DEFINE_EXPR_BINARY_OPERATOR(>,\
    \ __greater)\n      |     ^~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/usr/include/c++/9/bits/valarray_after.h:420:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmpkl58glb2.cpp:39:51:\
    \ note:   mismatched types \u2018const std::_Expr<_Dom1, typename _Dom1::value_type>\u2019\
    \ and \u2018int\u2019\n   39 |     if(date.substr(0,2) < 1 || date.substr(0,2)\
    \ > 12) {\n      |                                                   ^~\nIn file\
    \ included from /usr/include/c++/9/valarray:603,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:95,\n\
    \                 from /tmp/tmpkl58glb2.cpp:2:\n/usr/include/c++/9/bits/valarray_after.h:420:5:\
    \ note: candidate: \u2018template<class _Dom> std::_Expr<std::__detail::_BinClos<std::__greater,\
    \ std::_Expr, std::_ValArray, _Dom, typename _Dom::value_type>, typename std::__fun<std::__greater,\
    \ typename _Dom1::value_type>::result_type> std::operator>(const std::_Expr<_Dom1,\
    \ typename _Dom1::value_type>&, const std::valarray<typename _Dom::value_type>&)\u2019\
    \n  420 |     _DEFINE_EXPR_BINARY_OPERATOR(>, __greater)\n      |     ^~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /usr/include/c++/9/bits/valarray_after.h:420:5: note:   template argument deduction/substitution\
    \ failed:\n/tmp/tmpkl58glb2.cpp:39:51: note:   \u2018std::__cxx11::basic_string<char>\u2019\
    \ is not derived from \u2018const std::_Expr<_Dom1, typename _Dom1::value_type>\u2019\
    \n   39 |     if(date.substr(0,2) < 1 || date.substr(0,2) > 12) {\n      |   \
    \                                                ^~\nIn file included from /usr/include/c++/9/valarray:603,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:95,\n\
    \                 from /tmp/tmpkl58glb2.cpp:2:\n/usr/include/c++/9/bits/valarray_after.h:420:5:\
    \ note: candidate: \u2018template<class _Dom> std::_Expr<std::__detail::_BinClos<std::__greater,\
    \ std::_ValArray, std::_Expr, typename _Dom::value_type, _Dom>, typename std::__fun<std::__greater,\
    \ typename _Dom1::value_type>::result_type> std::operator>(const std::valarray<typename\
    \ _Dom::value_type>&, const std::_Expr<_Dom1, typename _Dom1::value_type>&)\u2019\
    \n  420 |     _DEFINE_EXPR_BINARY_OPERATOR(>, __greater)\n      |     ^~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /usr/include/c++/9/bits/valarray_after.h:420:5: note:   template argument deduction/substitution\
    \ failed:\n/tmp/tmpkl58glb2.cpp:39:51: note:   mismatched types \u2018const std::_Expr<_Dom1,\
    \ typename _Dom1::value_type>\u2019 and \u2018int\u2019\n   39 |     if(date.substr(0,2)\
    \ < 1 || date.substr(0,2) > 12) {\n      |                                   \
    \                ^~\nIn file included from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:95,\n\
    \                 from /tmp/tmpkl58glb2.cpp:2:\n/usr/include/c++/9/valarray:1200:1:\
    \ note: candidate: \u2018template<class _Tp> std::_Expr<std::__detail::_BinClos<std::__greater,\
    \ std::_ValArray, std::_ValArray, _Tp, _Tp>, typename std::__fun<std::__greater,\
    \ _Tp>::result_type> std::operator>(const std::valarray<_Tp>&, const std::valarray<_Tp>&)\u2019\
    \n 1200 | _DEFINE_BINARY_OPERATOR(>, __greater)\n      | ^~~~~~~~~~~~~~~~~~~~~~~\n\
    /usr/include/c++/9/valarray:1200:1: note:   template argument deduction/substitution\
    \ failed:\n/tmp/tmpkl58glb2.cpp:39:51: note:   \u2018std::__cxx11::basic_string<char>\u2019\
    \ is not derived from \u2018const std::valarray<_Tp>\u2019\n   39 |     if(date.substr(0,2)\
    \ < 1 || date.substr(0,2) > 12) {\n      |                                   \
    \                ^~\nIn file included from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:95,\n\
    \                 from /tmp/tmpkl58glb2.cpp:2:\n/usr/include/c++/9/valarray:1200:1:\
    \ note: candidate: \u2018template<class _Tp> std::_Expr<std::__detail::_BinClos<std::__greater,\
    \ std::_ValArray, std::_Constant, _Tp, _Tp>, typename std::__fun<std::__greater,\
    \ _Tp>::result_type> std::operator>(const std::valarray<_Tp>&, const typename\
    \ std::valarray<_Tp>::value_type&)\u2019\n 1200 | _DEFINE_BINARY_OPERATOR(>, __greater)\n\
    \      | ^~~~~~~~~~~~~~~~~~~~~~~\n/usr/include/c++/9/valarray:1200:1: note:  \
    \ template argument deduction/substitution failed:\n/tmp/tmpkl58glb2.cpp:39:51:\
    \ note:   \u2018std::__cxx11::basic_string<char>\u2019 is not derived from \u2018\
    const std::valarray<_Tp>\u2019\n   39 |     if(date.substr(0,2) < 1 || date.substr(0,2)\
    \ > 12) {\n      |                                                   ^~\nIn file\
    \ included from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:95,\n      \
    \           from /tmp/tmpkl58glb2.cpp:2:\n/usr/include/c++/9/valarray:1200:1:\
    \ note: candidate: \u2018template<class _Tp> std::_Expr<std::__detail::_BinClos<std::__greater,\
    \ std::_Constant, std::_ValArray, _Tp, _Tp>, typename std::__fun<std::__greater,\
    \ _Tp>::result_type> std::operator>(const typename std::valarray<_Tp>::value_type&,\
    \ const std::valarray<_Tp>&)\u2019\n 1200 | _DEFINE_BINARY_OPERATOR(>, __greater)\n\
    \      | ^~~~~~~~~~~~~~~~~~~~~~~\n/usr/include/c++/9/valarray:1200:1: note:  \
    \ template argument deduction/substitution failed:\n/tmp/tmpkl58glb2.cpp:39:51:\
    \ note:   mismatched types \u2018const std::valarray<_Tp>\u2019 and \u2018int\u2019\
    \n   39 |     if(date.substr(0,2) < 1 || date.substr(0,2) > 12) {\n      |   \
    \                                                ^~\nIn file included from /usr/include/c++/9/forward_list:38,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:104,\n\
    \                 from /tmp/tmpkl58glb2.cpp:2:\n/usr/include/c++/9/bits/forward_list.h:1458:5:\
    \ note: candidate: \u2018template<class _Tp, class _Alloc> bool std::operator>(const\
    \ std::forward_list<_Tp, _Alloc>&, const std::forward_list<_Tp, _Alloc>&)\u2019\
    \n 1458 |     operator>(const forward_list<_Tp, _Alloc>& __lx,\n      |     ^~~~~~~~\n\
    /usr/include/c++/9/bits/forward_list.h:1458:5: note:   template argument deduction/substitution\
    \ failed:\n/tmp/tmpkl58glb2.cpp:39:51: note:   \u2018std::__cxx11::basic_string<char>\u2019\
    \ is not derived from \u2018const std::forward_list<_Tp, _Alloc>\u2019\n   39\
    \ |     if(date.substr(0,2) < 1 || date.substr(0,2) > 12) {\n      |         \
    \                                          ^~\nIn file included from /usr/include/c++/9/future:39,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:105,\n\
    \                 from /tmp/tmpkl58glb2.cpp:2:\n/usr/include/c++/9/thread:302:3:\
    \ note: candidate: \u2018bool std::operator>(std::thread::id, std::thread::id)\u2019\
    \n  302 |   operator>(thread::id __x, thread::id __y) noexcept\n      |   ^~~~~~~~\n\
    /usr/include/c++/9/thread:302:24: note:   no known conversion for argument 1 from\
    \ \u2018std::__cxx11::basic_string<char>\u2019 to \u2018std::thread::id\u2019\n\
    \  302 |   operator>(thread::id __x, thread::id __y) noexcept\n      |       \
    \      ~~~~~~~~~~~^~~\nIn file included from /usr/include/c++/9/bits/stl_algobase.h:67,\n\
    \                 from /usr/include/c++/9/bits/char_traits.h:39,\n           \
    \      from /usr/include/c++/9/ios:40,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmpkl58glb2.cpp:2:\n/usr/include/c++/9/bits/stl_iterator.h:926:5: note:\
    \ candidate: \u2018template<class _IteratorL, class _IteratorR, class _Container>\
    \ bool __gnu_cxx::operator>(const __gnu_cxx::__normal_iterator<_IteratorL, _Container>&,\
    \ const __gnu_cxx::__normal_iterator<_IteratorR, _Container>&)\u2019\n  926 |\
    \     operator>(const __normal_iterator<_IteratorL, _Container>& __lhs,\n    \
    \  |     ^~~~~~~~\n/usr/include/c++/9/bits/stl_iterator.h:926:5: note:   template\
    \ argument deduction/substitution failed:\n/tmp/tmpkl58glb2.cpp:39:51: note: \
    \  \u2018std::__cxx11::basic_string<char>\u2019 is not derived from \u2018const\
    \ __gnu_cxx::__normal_iterator<_IteratorL, _Container>\u2019\n   39 |     if(date.substr(0,2)\
    \ < 1 || date.substr(0,2) > 12) {\n      |                                   \
    \                ^~\nIn file included from /usr/include/c++/9/bits/stl_algobase.h:67,\n\
    \                 from /usr/include/c++/9/bits/char_traits.h:39,\n           \
    \      from /usr/include/c++/9/ios:40,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmpkl58glb2.cpp:2:\n/usr/include/c++/9/bits/stl_iterator.h:933:5: note:\
    \ candidate: \u2018template<class _Iterator, class _Container> bool __gnu_cxx::operator>(const\
    \ __gnu_cxx::__normal_iterator<_Iterator, _Container>&, const __gnu_cxx::__normal_iterator<_Iterator,\
    \ _Container>&)\u2019\n  933 |     operator>(const __normal_iterator<_Iterator,\
    \ _Container>& __lhs,\n      |     ^~~~~~~~\n/usr/include/c++/9/bits/stl_iterator.h:933:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmpkl58glb2.cpp:39:51:\
    \ note:   \u2018std::__cxx11::basic_string<char>\u2019 is not derived from \u2018\
    const __gnu_cxx::__normal_iterator<_Iterator, _Container>\u2019\n   39 |     if(date.substr(0,2)\
    \ < 1 || date.substr(0,2) > 12) {\n      |                                   \
    \                ^~\n/tmp/tmpkl58glb2.cpp:43:25: error: no match for \u2018operator<\u2019\
    \ (operand types are \u2018std::__cxx11::basic_string<char>\u2019 and \u2018int\u2019\
    )\n   43 |     if(date.substr(2,2) < 1 || date.substr(2,2) > 12) {\n      |  \
    \      ~~~~~~~~~~~~~~~~ ^ ~\n      |                   |       |\n      |    \
    \               |       int\n      |                   std::__cxx11::basic_string<char>\n\
    In file included from /usr/include/c++/9/regex:62,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:110,\n\
    \                 from /tmp/tmpkl58glb2.cpp:2:\n/usr/include/c++/9/bits/regex.h:1048:5:\
    \ note: candidate: \u2018template<class _BiIter> bool std::__cxx11::operator<(const\
    \ std::__cxx11::sub_match<_BiIter>&, const std::__cxx11::sub_match<_BiIter>&)\u2019\
    \n 1048 |     operator<(const sub_match<_BiIter>& __lhs, const sub_match<_BiIter>&\
    \ __rhs)\n      |     ^~~~~~~~\n/usr/include/c++/9/bits/regex.h:1048:5: note:\
    \   template argument deduction/substitution failed:\n/tmp/tmpkl58glb2.cpp:43:27:\
    \ note:   \u2018std::__cxx11::basic_string<char>\u2019 is not derived from \u2018\
    const std::__cxx11::sub_match<_BiIter>\u2019\n   43 |     if(date.substr(2,2)\
    \ < 1 || date.substr(2,2) > 12) {\n      |                           ^\nIn file\
    \ included from /usr/include/c++/9/regex:62,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:110,\n\
    \                 from /tmp/tmpkl58glb2.cpp:2:\n/usr/include/c++/9/bits/regex.h:1124:5:\
    \ note: candidate: \u2018template<class _Bi_iter, class _Ch_traits, class _Ch_alloc>\
    \ bool std::__cxx11::operator<(std::__cxx11::__sub_match_string<_Bi_iter, _Ch_traits,\
    \ _Ch_alloc>&, const std::__cxx11::sub_match<_BiIter>&)\u2019\n 1124 |     operator<(const\
    \ __sub_match_string<_Bi_iter, _Ch_traits, _Ch_alloc>& __lhs,\n      |     ^~~~~~~~\n\
    /usr/include/c++/9/bits/regex.h:1124:5: note:   template argument deduction/substitution\
    \ failed:\n/tmp/tmpkl58glb2.cpp:43:27: note:   mismatched types \u2018const std::__cxx11::sub_match<_BiIter>\u2019\
    \ and \u2018int\u2019\n   43 |     if(date.substr(2,2) < 1 || date.substr(2,2)\
    \ > 12) {\n      |                           ^\nIn file included from /usr/include/c++/9/regex:62,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:110,\n\
    \                 from /tmp/tmpkl58glb2.cpp:2:\n/usr/include/c++/9/bits/regex.h:1198:5:\
    \ note: candidate: \u2018template<class _Bi_iter, class _Ch_traits, class _Ch_alloc>\
    \ bool std::__cxx11::operator<(const std::__cxx11::sub_match<_BiIter>&, std::__cxx11::__sub_match_string<_Bi_iter,\
    \ _Ch_traits, _Ch_alloc>&)\u2019\n 1198 |     operator<(const sub_match<_Bi_iter>&\
    \ __lhs,\n      |     ^~~~~~~~\n/usr/include/c++/9/bits/regex.h:1198:5: note:\
    \   template argument deduction/substitution failed:\n/tmp/tmpkl58glb2.cpp:43:27:\
    \ note:   \u2018std::__cxx11::basic_string<char>\u2019 is not derived from \u2018\
    const std::__cxx11::sub_match<_BiIter>\u2019\n   43 |     if(date.substr(2,2)\
    \ < 1 || date.substr(2,2) > 12) {\n      |                           ^\nIn file\
    \ included from /usr/include/c++/9/regex:62,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:110,\n\
    \                 from /tmp/tmpkl58glb2.cpp:2:\n/usr/include/c++/9/bits/regex.h:1272:5:\
    \ note: candidate: \u2018template<class _Bi_iter> bool std::__cxx11::operator<(const\
    \ typename std::iterator_traits<_Iter>::value_type*, const std::__cxx11::sub_match<_BiIter>&)\u2019\
    \n 1272 |     operator<(typename iterator_traits<_Bi_iter>::value_type const*\
    \ __lhs,\n      |     ^~~~~~~~\n/usr/include/c++/9/bits/regex.h:1272:5: note:\
    \   template argument deduction/substitution failed:\n/tmp/tmpkl58glb2.cpp:43:27:\
    \ note:   mismatched types \u2018const std::__cxx11::sub_match<_BiIter>\u2019\
    \ and \u2018int\u2019\n   43 |     if(date.substr(2,2) < 1 || date.substr(2,2)\
    \ > 12) {\n      |                           ^\nIn file included from /usr/include/c++/9/regex:62,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:110,\n\
    \                 from /tmp/tmpkl58glb2.cpp:2:\n/usr/include/c++/9/bits/regex.h:1346:5:\
    \ note: candidate: \u2018template<class _Bi_iter> bool std::__cxx11::operator<(const\
    \ std::__cxx11::sub_match<_BiIter>&, const typename std::iterator_traits<_Iter>::value_type*)\u2019\
    \n 1346 |     operator<(const sub_match<_Bi_iter>& __lhs,\n      |     ^~~~~~~~\n\
    /usr/include/c++/9/bits/regex.h:1346:5: note:   template argument deduction/substitution\
    \ failed:\n/tmp/tmpkl58glb2.cpp:43:27: note:   \u2018std::__cxx11::basic_string<char>\u2019\
    \ is not derived from \u2018const std::__cxx11::sub_match<_BiIter>\u2019\n   43\
    \ |     if(date.substr(2,2) < 1 || date.substr(2,2) > 12) {\n      |         \
    \                  ^\nIn file included from /usr/include/c++/9/regex:62,\n   \
    \              from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:110,\n \
    \                from /tmp/tmpkl58glb2.cpp:2:\n/usr/include/c++/9/bits/regex.h:1421:5:\
    \ note: candidate: \u2018template<class _Bi_iter> bool std::__cxx11::operator<(const\
    \ typename std::iterator_traits<_Iter>::value_type&, const std::__cxx11::sub_match<_BiIter>&)\u2019\
    \n 1421 |     operator<(typename iterator_traits<_Bi_iter>::value_type const&\
    \ __lhs,\n      |     ^~~~~~~~\n/usr/include/c++/9/bits/regex.h:1421:5: note:\
    \   template argument deduction/substitution failed:\n/tmp/tmpkl58glb2.cpp:43:27:\
    \ note:   mismatched types \u2018const std::__cxx11::sub_match<_BiIter>\u2019\
    \ and \u2018int\u2019\n   43 |     if(date.substr(2,2) < 1 || date.substr(2,2)\
    \ > 12) {\n      |                           ^\nIn file included from /usr/include/c++/9/regex:62,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:110,\n\
    \                 from /tmp/tmpkl58glb2.cpp:2:\n/usr/include/c++/9/bits/regex.h:1499:5:\
    \ note: candidate: \u2018template<class _Bi_iter> bool std::__cxx11::operator<(const\
    \ std::__cxx11::sub_match<_BiIter>&, const typename std::iterator_traits<_Iter>::value_type&)\u2019\
    \n 1499 |     operator<(const sub_match<_Bi_iter>& __lhs,\n      |     ^~~~~~~~\n\
    /usr/include/c++/9/bits/regex.h:1499:5: note:   template argument deduction/substitution\
    \ failed:\n/tmp/tmpkl58glb2.cpp:43:27: note:   \u2018std::__cxx11::basic_string<char>\u2019\
    \ is not derived from \u2018const std::__cxx11::sub_match<_BiIter>\u2019\n   43\
    \ |     if(date.substr(2,2) < 1 || date.substr(2,2) > 12) {\n      |         \
    \                  ^\nIn file included from /usr/include/c++/9/bits/stl_algobase.h:64,\n\
    \                 from /usr/include/c++/9/bits/char_traits.h:39,\n           \
    \      from /usr/include/c++/9/ios:40,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmpkl58glb2.cpp:2:\n/usr/include/c++/9/bits/stl_pair.h:454:5: note: candidate:\
    \ \u2018template<class _T1, class _T2> constexpr bool std::operator<(const std::pair<_T1,\
    \ _T2>&, const std::pair<_T1, _T2>&)\u2019\n  454 |     operator<(const pair<_T1,\
    \ _T2>& __x, const pair<_T1, _T2>& __y)\n      |     ^~~~~~~~\n/usr/include/c++/9/bits/stl_pair.h:454:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmpkl58glb2.cpp:43:27:\
    \ note:   \u2018std::__cxx11::basic_string<char>\u2019 is not derived from \u2018\
    const std::pair<_T1, _T2>\u2019\n   43 |     if(date.substr(2,2) < 1 || date.substr(2,2)\
    \ > 12) {\n      |                           ^\nIn file included from /usr/include/c++/9/bits/stl_algobase.h:67,\n\
    \                 from /usr/include/c++/9/bits/char_traits.h:39,\n           \
    \      from /usr/include/c++/9/ios:40,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmpkl58glb2.cpp:2:\n/usr/include/c++/9/bits/stl_iterator.h:331:5: note:\
    \ candidate: \u2018template<class _Iterator> bool std::operator<(const std::reverse_iterator<_Iterator>&,\
    \ const std::reverse_iterator<_Iterator>&)\u2019\n  331 |     operator<(const\
    \ reverse_iterator<_Iterator>& __x,\n      |     ^~~~~~~~\n/usr/include/c++/9/bits/stl_iterator.h:331:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmpkl58glb2.cpp:43:27:\
    \ note:   \u2018std::__cxx11::basic_string<char>\u2019 is not derived from \u2018\
    const std::reverse_iterator<_Iterator>\u2019\n   43 |     if(date.substr(2,2)\
    \ < 1 || date.substr(2,2) > 12) {\n      |                           ^\nIn file\
    \ included from /usr/include/c++/9/bits/stl_algobase.h:67,\n                 from\
    \ /usr/include/c++/9/bits/char_traits.h:39,\n                 from /usr/include/c++/9/ios:40,\n\
    \                 from /usr/include/c++/9/istream:38,\n                 from /usr/include/c++/9/sstream:38,\n\
    \                 from /usr/include/c++/9/complex:45,\n                 from /usr/include/c++/9/ccomplex:39,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n\
    \                 from /tmp/tmpkl58glb2.cpp:2:\n/usr/include/c++/9/bits/stl_iterator.h:369:5:\
    \ note: candidate: \u2018template<class _IteratorL, class _IteratorR> bool std::operator<(const\
    \ std::reverse_iterator<_Iterator>&, const std::reverse_iterator<_IteratorR>&)\u2019\
    \n  369 |     operator<(const reverse_iterator<_IteratorL>& __x,\n      |    \
    \ ^~~~~~~~\n/usr/include/c++/9/bits/stl_iterator.h:369:5: note:   template argument\
    \ deduction/substitution failed:\n/tmp/tmpkl58glb2.cpp:43:27: note:   \u2018std::__cxx11::basic_string<char>\u2019\
    \ is not derived from \u2018const std::reverse_iterator<_Iterator>\u2019\n   43\
    \ |     if(date.substr(2,2) < 1 || date.substr(2,2) > 12) {\n      |         \
    \                  ^\nIn file included from /usr/include/c++/9/bits/stl_algobase.h:67,\n\
    \                 from /usr/include/c++/9/bits/char_traits.h:39,\n           \
    \      from /usr/include/c++/9/ios:40,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmpkl58glb2.cpp:2:\n/usr/include/c++/9/bits/stl_iterator.h:1160:5: note:\
    \ candidate: \u2018template<class _IteratorL, class _IteratorR> bool std::operator<(const\
    \ std::move_iterator<_IteratorL>&, const std::move_iterator<_IteratorR>&)\u2019\
    \n 1160 |     operator<(const move_iterator<_IteratorL>& __x,\n      |     ^~~~~~~~\n\
    /usr/include/c++/9/bits/stl_iterator.h:1160:5: note:   template argument deduction/substitution\
    \ failed:\n/tmp/tmpkl58glb2.cpp:43:27: note:   \u2018std::__cxx11::basic_string<char>\u2019\
    \ is not derived from \u2018const std::move_iterator<_IteratorL>\u2019\n   43\
    \ |     if(date.substr(2,2) < 1 || date.substr(2,2) > 12) {\n      |         \
    \                  ^\nIn file included from /usr/include/c++/9/bits/stl_algobase.h:67,\n\
    \                 from /usr/include/c++/9/bits/char_traits.h:39,\n           \
    \      from /usr/include/c++/9/ios:40,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmpkl58glb2.cpp:2:\n/usr/include/c++/9/bits/stl_iterator.h:1166:5: note:\
    \ candidate: \u2018template<class _Iterator> bool std::operator<(const std::move_iterator<_IteratorL>&,\
    \ const std::move_iterator<_IteratorL>&)\u2019\n 1166 |     operator<(const move_iterator<_Iterator>&\
    \ __x,\n      |     ^~~~~~~~\n/usr/include/c++/9/bits/stl_iterator.h:1166:5: note:\
    \   template argument deduction/substitution failed:\n/tmp/tmpkl58glb2.cpp:43:27:\
    \ note:   \u2018std::__cxx11::basic_string<char>\u2019 is not derived from \u2018\
    const std::move_iterator<_IteratorL>\u2019\n   43 |     if(date.substr(2,2) <\
    \ 1 || date.substr(2,2) > 12) {\n      |                           ^\nIn file\
    \ included from /usr/include/c++/9/string:55,\n                 from /usr/include/c++/9/bits/locale_classes.h:40,\n\
    \                 from /usr/include/c++/9/bits/ios_base.h:41,\n              \
    \   from /usr/include/c++/9/ios:42,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmpkl58glb2.cpp:2:\n/usr/include/c++/9/bits/basic_string.h:6229:5: note:\
    \ candidate: \u2018template<class _CharT, class _Traits, class _Alloc> bool std::operator<(const\
    \ std::__cxx11::basic_string<_CharT, _Traits, _Alloc>&, const std::__cxx11::basic_string<_CharT,\
    \ _Traits, _Alloc>&)\u2019\n 6229 |     operator<(const basic_string<_CharT, _Traits,\
    \ _Alloc>& __lhs,\n      |     ^~~~~~~~\n/usr/include/c++/9/bits/basic_string.h:6229:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmpkl58glb2.cpp:43:27:\
    \ note:   mismatched types \u2018const std::__cxx11::basic_string<_CharT, _Traits,\
    \ _Alloc>\u2019 and \u2018int\u2019\n   43 |     if(date.substr(2,2) < 1 || date.substr(2,2)\
    \ > 12) {\n      |                           ^\nIn file included from /usr/include/c++/9/string:55,\n\
    \                 from /usr/include/c++/9/bits/locale_classes.h:40,\n        \
    \         from /usr/include/c++/9/bits/ios_base.h:41,\n                 from /usr/include/c++/9/ios:42,\n\
    \                 from /usr/include/c++/9/istream:38,\n                 from /usr/include/c++/9/sstream:38,\n\
    \                 from /usr/include/c++/9/complex:45,\n                 from /usr/include/c++/9/ccomplex:39,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n\
    \                 from /tmp/tmpkl58glb2.cpp:2:\n/usr/include/c++/9/bits/basic_string.h:6242:5:\
    \ note: candidate: \u2018template<class _CharT, class _Traits, class _Alloc> bool\
    \ std::operator<(const std::__cxx11::basic_string<_CharT, _Traits, _Alloc>&, const\
    \ _CharT*)\u2019\n 6242 |     operator<(const basic_string<_CharT, _Traits, _Alloc>&\
    \ __lhs,\n      |     ^~~~~~~~\n/usr/include/c++/9/bits/basic_string.h:6242:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmpkl58glb2.cpp:43:27:\
    \ note:   mismatched types \u2018const _CharT*\u2019 and \u2018int\u2019\n   43\
    \ |     if(date.substr(2,2) < 1 || date.substr(2,2) > 12) {\n      |         \
    \                  ^\nIn file included from /usr/include/c++/9/string:55,\n  \
    \               from /usr/include/c++/9/bits/locale_classes.h:40,\n          \
    \       from /usr/include/c++/9/bits/ios_base.h:41,\n                 from /usr/include/c++/9/ios:42,\n\
    \                 from /usr/include/c++/9/istream:38,\n                 from /usr/include/c++/9/sstream:38,\n\
    \                 from /usr/include/c++/9/complex:45,\n                 from /usr/include/c++/9/ccomplex:39,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n\
    \                 from /tmp/tmpkl58glb2.cpp:2:\n/usr/include/c++/9/bits/basic_string.h:6254:5:\
    \ note: candidate: \u2018template<class _CharT, class _Traits, class _Alloc> bool\
    \ std::operator<(const _CharT*, const std::__cxx11::basic_string<_CharT, _Traits,\
    \ _Alloc>&)\u2019\n 6254 |     operator<(const _CharT* __lhs,\n      |     ^~~~~~~~\n\
    /usr/include/c++/9/bits/basic_string.h:6254:5: note:   template argument deduction/substitution\
    \ failed:\n/tmp/tmpkl58glb2.cpp:43:27: note:   mismatched types \u2018const _CharT*\u2019\
    \ and \u2018std::__cxx11::basic_string<char>\u2019\n   43 |     if(date.substr(2,2)\
    \ < 1 || date.substr(2,2) > 12) {\n      |                           ^\nIn file\
    \ included from /usr/include/c++/9/bits/ios_base.h:46,\n                 from\
    \ /usr/include/c++/9/ios:42,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmpkl58glb2.cpp:2:\n/usr/include/c++/9/system_error:208:3: note: candidate:\
    \ \u2018bool std::operator<(const std::error_code&, const std::error_code&)\u2019\
    \n  208 |   operator<(const error_code& __lhs, const error_code& __rhs) noexcept\n\
    \      |   ^~~~~~~~\n/usr/include/c++/9/system_error:208:31: note:   no known\
    \ conversion for argument 1 from \u2018std::__cxx11::basic_string<char>\u2019\
    \ to \u2018const std::error_code&\u2019\n  208 |   operator<(const error_code&\
    \ __lhs, const error_code& __rhs) noexcept\n      |             ~~~~~~~~~~~~~~~~~~^~~~~\n\
    /usr/include/c++/9/system_error:282:3: note: candidate: \u2018bool std::operator<(const\
    \ std::error_condition&, const std::error_condition&)\u2019\n  282 |   operator<(const\
    \ error_condition& __lhs,\n      |   ^~~~~~~~\n/usr/include/c++/9/system_error:282:36:\
    \ note:   no known conversion for argument 1 from \u2018std::__cxx11::basic_string<char>\u2019\
    \ to \u2018const std::error_condition&\u2019\n  282 |   operator<(const error_condition&\
    \ __lhs,\n      |             ~~~~~~~~~~~~~~~~~~~~~~~^~~~~\nIn file included from\
    \ /usr/include/c++/9/deque:67,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:68,\n\
    \                 from /tmp/tmpkl58glb2.cpp:2:\n/usr/include/c++/9/bits/stl_deque.h:312:5:\
    \ note: candidate: \u2018template<class _Tp, class _Ref, class _Ptr> bool std::operator<(const\
    \ std::_Deque_iterator<_Tp, _Ref, _Ptr>&, const std::_Deque_iterator<_Tp, _Ref,\
    \ _Ptr>&)\u2019\n  312 |     operator<(const _Deque_iterator<_Tp, _Ref, _Ptr>&\
    \ __x,\n      |     ^~~~~~~~\n/usr/include/c++/9/bits/stl_deque.h:312:5: note:\
    \   template argument deduction/substitution failed:\n/tmp/tmpkl58glb2.cpp:43:27:\
    \ note:   \u2018std::__cxx11::basic_string<char>\u2019 is not derived from \u2018\
    const std::_Deque_iterator<_Tp, _Ref, _Ptr>\u2019\n   43 |     if(date.substr(2,2)\
    \ < 1 || date.substr(2,2) > 12) {\n      |                           ^\nIn file\
    \ included from /usr/include/c++/9/deque:67,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:68,\n\
    \                 from /tmp/tmpkl58glb2.cpp:2:\n/usr/include/c++/9/bits/stl_deque.h:320:5:\
    \ note: candidate: \u2018template<class _Tp, class _RefL, class _PtrL, class _RefR,\
    \ class _PtrR> bool std::operator<(const std::_Deque_iterator<_Tp, _Ref, _Ptr>&,\
    \ const std::_Deque_iterator<_Tp, _RefR, _PtrR>&)\u2019\n  320 |     operator<(const\
    \ _Deque_iterator<_Tp, _RefL, _PtrL>& __x,\n      |     ^~~~~~~~\n/usr/include/c++/9/bits/stl_deque.h:320:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmpkl58glb2.cpp:43:27:\
    \ note:   \u2018std::__cxx11::basic_string<char>\u2019 is not derived from \u2018\
    const std::_Deque_iterator<_Tp, _Ref, _Ptr>\u2019\n   43 |     if(date.substr(2,2)\
    \ < 1 || date.substr(2,2) > 12) {\n      |                           ^\nIn file\
    \ included from /usr/include/c++/9/deque:67,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:68,\n\
    \                 from /tmp/tmpkl58glb2.cpp:2:\n/usr/include/c++/9/bits/stl_deque.h:2330:5:\
    \ note: candidate: \u2018template<class _Tp, class _Alloc> bool std::operator<(const\
    \ std::deque<_Tp, _Alloc>&, const std::deque<_Tp, _Alloc>&)\u2019\n 2330 |   \
    \  operator<(const deque<_Tp, _Alloc>& __x,\n      |     ^~~~~~~~\n/usr/include/c++/9/bits/stl_deque.h:2330:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmpkl58glb2.cpp:43:27:\
    \ note:   \u2018std::__cxx11::basic_string<char>\u2019 is not derived from \u2018\
    const std::deque<_Tp, _Alloc>\u2019\n   43 |     if(date.substr(2,2) < 1 || date.substr(2,2)\
    \ > 12) {\n      |                           ^\nIn file included from /usr/include/c++/9/tuple:39,\n\
    \                 from /usr/include/c++/9/functional:54,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:71,\n                 from\
    \ /tmp/tmpkl58glb2.cpp:2:\n/usr/include/c++/9/array:262:5: note: candidate: \u2018\
    template<class _Tp, long unsigned int _Nm> bool std::operator<(const std::array<_Tp,\
    \ _Nm>&, const std::array<_Tp, _Nm>&)\u2019\n  262 |     operator<(const array<_Tp,\
    \ _Nm>& __a, const array<_Tp, _Nm>& __b)\n      |     ^~~~~~~~\n/usr/include/c++/9/array:262:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmpkl58glb2.cpp:43:27:\
    \ note:   \u2018std::__cxx11::basic_string<char>\u2019 is not derived from \u2018\
    const std::array<_Tp, _Nm>\u2019\n   43 |     if(date.substr(2,2) < 1 || date.substr(2,2)\
    \ > 12) {\n      |                           ^\nIn file included from /usr/include/c++/9/functional:54,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:71,\n\
    \                 from /tmp/tmpkl58glb2.cpp:2:\n/usr/include/c++/9/tuple:1432:5:\
    \ note: candidate: \u2018template<class ... _TElements, class ... _UElements>\
    \ constexpr bool std::operator<(const std::tuple<_Tps ...>&, const std::tuple<_Elements\
    \ ...>&)\u2019\n 1432 |     operator<(const tuple<_TElements...>& __t,\n     \
    \ |     ^~~~~~~~\n/usr/include/c++/9/tuple:1432:5: note:   template argument deduction/substitution\
    \ failed:\n/tmp/tmpkl58glb2.cpp:43:27: note:   \u2018std::__cxx11::basic_string<char>\u2019\
    \ is not derived from \u2018const std::tuple<_Tps ...>\u2019\n   43 |     if(date.substr(2,2)\
    \ < 1 || date.substr(2,2) > 12) {\n      |                           ^\nIn file\
    \ included from /usr/include/c++/9/bits/locale_conv.h:41,\n                 from\
    \ /usr/include/c++/9/locale:43,\n                 from /usr/include/c++/9/iomanip:43,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:72,\n\
    \                 from /tmp/tmpkl58glb2.cpp:2:\n/usr/include/c++/9/bits/unique_ptr.h:749:5:\
    \ note: candidate: \u2018template<class _Tp, class _Dp, class _Up, class _Ep>\
    \ bool std::operator<(const std::unique_ptr<_Tp, _Dp>&, const std::unique_ptr<_Up,\
    \ _Ep>&)\u2019\n  749 |     operator<(const unique_ptr<_Tp, _Dp>& __x,\n     \
    \ |     ^~~~~~~~\n/usr/include/c++/9/bits/unique_ptr.h:749:5: note:   template\
    \ argument deduction/substitution failed:\n/tmp/tmpkl58glb2.cpp:43:27: note: \
    \  \u2018std::__cxx11::basic_string<char>\u2019 is not derived from \u2018const\
    \ std::unique_ptr<_Tp, _Dp>\u2019\n   43 |     if(date.substr(2,2) < 1 || date.substr(2,2)\
    \ > 12) {\n      |                           ^\nIn file included from /usr/include/c++/9/bits/locale_conv.h:41,\n\
    \                 from /usr/include/c++/9/locale:43,\n                 from /usr/include/c++/9/iomanip:43,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:72,\n\
    \                 from /tmp/tmpkl58glb2.cpp:2:\n/usr/include/c++/9/bits/unique_ptr.h:760:5:\
    \ note: candidate: \u2018template<class _Tp, class _Dp> bool std::operator<(const\
    \ std::unique_ptr<_Tp, _Dp>&, std::nullptr_t)\u2019\n  760 |     operator<(const\
    \ unique_ptr<_Tp, _Dp>& __x, nullptr_t)\n      |     ^~~~~~~~\n/usr/include/c++/9/bits/unique_ptr.h:760:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmpkl58glb2.cpp:43:27:\
    \ note:   \u2018std::__cxx11::basic_string<char>\u2019 is not derived from \u2018\
    const std::unique_ptr<_Tp, _Dp>\u2019\n   43 |     if(date.substr(2,2) < 1 ||\
    \ date.substr(2,2) > 12) {\n      |                           ^\nIn file included\
    \ from /usr/include/c++/9/bits/locale_conv.h:41,\n                 from /usr/include/c++/9/locale:43,\n\
    \                 from /usr/include/c++/9/iomanip:43,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:72,\n\
    \                 from /tmp/tmpkl58glb2.cpp:2:\n/usr/include/c++/9/bits/unique_ptr.h:766:5:\
    \ note: candidate: \u2018template<class _Tp, class _Dp> bool std::operator<(std::nullptr_t,\
    \ const std::unique_ptr<_Tp, _Dp>&)\u2019\n  766 |     operator<(nullptr_t, const\
    \ unique_ptr<_Tp, _Dp>& __x)\n      |     ^~~~~~~~\n/usr/include/c++/9/bits/unique_ptr.h:766:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmpkl58glb2.cpp:43:27:\
    \ note:   mismatched types \u2018const std::unique_ptr<_Tp, _Dp>\u2019 and \u2018\
    int\u2019\n   43 |     if(date.substr(2,2) < 1 || date.substr(2,2) > 12) {\n \
    \     |                           ^\nIn file included from /usr/include/c++/9/list:63,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:79,\n\
    \                 from /tmp/tmpkl58glb2.cpp:2:\n/usr/include/c++/9/bits/stl_list.h:2025:5:\
    \ note: candidate: \u2018template<class _Tp, class _Alloc> bool std::operator<(const\
    \ std::__cxx11::list<_Tp, _Alloc>&, const std::__cxx11::list<_Tp, _Alloc>&)\u2019\
    \n 2025 |     operator<(const list<_Tp, _Alloc>& __x, const list<_Tp, _Alloc>&\
    \ __y)\n      |     ^~~~~~~~\n/usr/include/c++/9/bits/stl_list.h:2025:5: note:\
    \   template argument deduction/substitution failed:\n/tmp/tmpkl58glb2.cpp:43:27:\
    \ note:   \u2018std::__cxx11::basic_string<char>\u2019 is not derived from \u2018\
    const std::__cxx11::list<_Tp, _Alloc>\u2019\n   43 |     if(date.substr(2,2) <\
    \ 1 || date.substr(2,2) > 12) {\n      |                           ^\nIn file\
    \ included from /usr/include/c++/9/map:61,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:81,\n\
    \                 from /tmp/tmpkl58glb2.cpp:2:\n/usr/include/c++/9/bits/stl_map.h:1472:5:\
    \ note: candidate: \u2018template<class _Key, class _Tp, class _Compare, class\
    \ _Alloc> bool std::operator<(const std::map<_Key, _Tp, _Compare, _Alloc>&, const\
    \ std::map<_Key, _Tp, _Compare, _Alloc>&)\u2019\n 1472 |     operator<(const map<_Key,\
    \ _Tp, _Compare, _Alloc>& __x,\n      |     ^~~~~~~~\n/usr/include/c++/9/bits/stl_map.h:1472:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmpkl58glb2.cpp:43:27:\
    \ note:   \u2018std::__cxx11::basic_string<char>\u2019 is not derived from \u2018\
    const std::map<_Key, _Tp, _Compare, _Alloc>\u2019\n   43 |     if(date.substr(2,2)\
    \ < 1 || date.substr(2,2) > 12) {\n      |                           ^\nIn file\
    \ included from /usr/include/c++/9/map:62,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:81,\n\
    \                 from /tmp/tmpkl58glb2.cpp:2:\n/usr/include/c++/9/bits/stl_multimap.h:1136:5:\
    \ note: candidate: \u2018template<class _Key, class _Tp, class _Compare, class\
    \ _Alloc> bool std::operator<(const std::multimap<_Key, _Tp, _Compare, _Alloc>&,\
    \ const std::multimap<_Key, _Tp, _Compare, _Alloc>&)\u2019\n 1136 |     operator<(const\
    \ multimap<_Key, _Tp, _Compare, _Alloc>& __x,\n      |     ^~~~~~~~\n/usr/include/c++/9/bits/stl_multimap.h:1136:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmpkl58glb2.cpp:43:27:\
    \ note:   \u2018std::__cxx11::basic_string<char>\u2019 is not derived from \u2018\
    const std::multimap<_Key, _Tp, _Compare, _Alloc>\u2019\n   43 |     if(date.substr(2,2)\
    \ < 1 || date.substr(2,2) > 12) {\n      |                           ^\nIn file\
    \ included from /usr/include/c++/9/bits/shared_ptr.h:52,\n                 from\
    \ /usr/include/c++/9/memory:81,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:82,\n\
    \                 from /tmp/tmpkl58glb2.cpp:2:\n/usr/include/c++/9/bits/shared_ptr_base.h:1444:5:\
    \ note: candidate: \u2018template<class _Tp, class _Up, __gnu_cxx::_Lock_policy\
    \ _Lp> bool std::operator<(const std::__shared_ptr<_Tp1, _Lp>&, const std::__shared_ptr<_Tp2,\
    \ _Lp>&)\u2019\n 1444 |     operator<(const __shared_ptr<_Tp, _Lp>& __a,\n   \
    \   |     ^~~~~~~~\n/usr/include/c++/9/bits/shared_ptr_base.h:1444:5: note:  \
    \ template argument deduction/substitution failed:\n/tmp/tmpkl58glb2.cpp:43:27:\
    \ note:   \u2018std::__cxx11::basic_string<char>\u2019 is not derived from \u2018\
    const std::__shared_ptr<_Tp1, _Lp>\u2019\n   43 |     if(date.substr(2,2) < 1\
    \ || date.substr(2,2) > 12) {\n      |                           ^\nIn file included\
    \ from /usr/include/c++/9/bits/shared_ptr.h:52,\n                 from /usr/include/c++/9/memory:81,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:82,\n\
    \                 from /tmp/tmpkl58glb2.cpp:2:\n/usr/include/c++/9/bits/shared_ptr_base.h:1455:5:\
    \ note: candidate: \u2018template<class _Tp, __gnu_cxx::_Lock_policy _Lp> bool\
    \ std::operator<(const std::__shared_ptr<_Tp, _Lp>&, std::nullptr_t)\u2019\n 1455\
    \ |     operator<(const __shared_ptr<_Tp, _Lp>& __a, nullptr_t) noexcept\n   \
    \   |     ^~~~~~~~\n/usr/include/c++/9/bits/shared_ptr_base.h:1455:5: note:  \
    \ template argument deduction/substitution failed:\n/tmp/tmpkl58glb2.cpp:43:27:\
    \ note:   \u2018std::__cxx11::basic_string<char>\u2019 is not derived from \u2018\
    const std::__shared_ptr<_Tp, _Lp>\u2019\n   43 |     if(date.substr(2,2) < 1 ||\
    \ date.substr(2,2) > 12) {\n      |                           ^\nIn file included\
    \ from /usr/include/c++/9/bits/shared_ptr.h:52,\n                 from /usr/include/c++/9/memory:81,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:82,\n\
    \                 from /tmp/tmpkl58glb2.cpp:2:\n/usr/include/c++/9/bits/shared_ptr_base.h:1463:5:\
    \ note: candidate: \u2018template<class _Tp, __gnu_cxx::_Lock_policy _Lp> bool\
    \ std::operator<(std::nullptr_t, const std::__shared_ptr<_Tp, _Lp>&)\u2019\n 1463\
    \ |     operator<(nullptr_t, const __shared_ptr<_Tp, _Lp>& __a) noexcept\n   \
    \   |     ^~~~~~~~\n/usr/include/c++/9/bits/shared_ptr_base.h:1463:5: note:  \
    \ template argument deduction/substitution failed:\n/tmp/tmpkl58glb2.cpp:43:27:\
    \ note:   mismatched types \u2018const std::__shared_ptr<_Tp, _Lp>\u2019 and \u2018\
    int\u2019\n   43 |     if(date.substr(2,2) < 1 || date.substr(2,2) > 12) {\n \
    \     |                           ^\nIn file included from /usr/include/c++/9/memory:81,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:82,\n\
    \                 from /tmp/tmpkl58glb2.cpp:2:\n/usr/include/c++/9/bits/shared_ptr.h:413:5:\
    \ note: candidate: \u2018template<class _Tp, class _Up> bool std::operator<(const\
    \ std::shared_ptr<_Tp>&, const std::shared_ptr<_Tp>&)\u2019\n  413 |     operator<(const\
    \ shared_ptr<_Tp>& __a, const shared_ptr<_Up>& __b) noexcept\n      |     ^~~~~~~~\n\
    /usr/include/c++/9/bits/shared_ptr.h:413:5: note:   template argument deduction/substitution\
    \ failed:\n/tmp/tmpkl58glb2.cpp:43:27: note:   \u2018std::__cxx11::basic_string<char>\u2019\
    \ is not derived from \u2018const std::shared_ptr<_Tp>\u2019\n   43 |     if(date.substr(2,2)\
    \ < 1 || date.substr(2,2) > 12) {\n      |                           ^\nIn file\
    \ included from /usr/include/c++/9/memory:81,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:82,\n\
    \                 from /tmp/tmpkl58glb2.cpp:2:\n/usr/include/c++/9/bits/shared_ptr.h:423:5:\
    \ note: candidate: \u2018template<class _Tp> bool std::operator<(const std::shared_ptr<_Tp>&,\
    \ std::nullptr_t)\u2019\n  423 |     operator<(const shared_ptr<_Tp>& __a, nullptr_t)\
    \ noexcept\n      |     ^~~~~~~~\n/usr/include/c++/9/bits/shared_ptr.h:423:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmpkl58glb2.cpp:43:27:\
    \ note:   \u2018std::__cxx11::basic_string<char>\u2019 is not derived from \u2018\
    const std::shared_ptr<_Tp>\u2019\n   43 |     if(date.substr(2,2) < 1 || date.substr(2,2)\
    \ > 12) {\n      |                           ^\nIn file included from /usr/include/c++/9/memory:81,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:82,\n\
    \                 from /tmp/tmpkl58glb2.cpp:2:\n/usr/include/c++/9/bits/shared_ptr.h:431:5:\
    \ note: candidate: \u2018template<class _Tp> bool std::operator<(std::nullptr_t,\
    \ const std::shared_ptr<_Tp>&)\u2019\n  431 |     operator<(nullptr_t, const shared_ptr<_Tp>&\
    \ __a) noexcept\n      |     ^~~~~~~~\n/usr/include/c++/9/bits/shared_ptr.h:431:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmpkl58glb2.cpp:43:27:\
    \ note:   mismatched types \u2018const std::shared_ptr<_Tp>\u2019 and \u2018int\u2019\
    \n   43 |     if(date.substr(2,2) < 1 || date.substr(2,2) > 12) {\n      |   \
    \                        ^\nIn file included from /usr/include/c++/9/vector:67,\n\
    \                 from /usr/include/c++/9/queue:61,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:86,\n\
    \                 from /tmp/tmpkl58glb2.cpp:2:\n/usr/include/c++/9/bits/stl_vector.h:1905:5:\
    \ note: candidate: \u2018template<class _Tp, class _Alloc> bool std::operator<(const\
    \ std::vector<_Tp, _Alloc>&, const std::vector<_Tp, _Alloc>&)\u2019\n 1905 | \
    \    operator<(const vector<_Tp, _Alloc>& __x, const vector<_Tp, _Alloc>& __y)\n\
    \      |     ^~~~~~~~\n/usr/include/c++/9/bits/stl_vector.h:1905:5: note:   template\
    \ argument deduction/substitution failed:\n/tmp/tmpkl58glb2.cpp:43:27: note: \
    \  \u2018std::__cxx11::basic_string<char>\u2019 is not derived from \u2018const\
    \ std::vector<_Tp, _Alloc>\u2019\n   43 |     if(date.substr(2,2) < 1 || date.substr(2,2)\
    \ > 12) {\n      |                           ^\nIn file included from /usr/include/c++/9/queue:64,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:86,\n\
    \                 from /tmp/tmpkl58glb2.cpp:2:\n/usr/include/c++/9/bits/stl_queue.h:356:5:\
    \ note: candidate: \u2018template<class _Tp, class _Seq> bool std::operator<(const\
    \ std::queue<_Tp, _Seq>&, const std::queue<_Tp, _Seq>&)\u2019\n  356 |     operator<(const\
    \ queue<_Tp, _Seq>& __x, const queue<_Tp, _Seq>& __y)\n      |     ^~~~~~~~\n\
    /usr/include/c++/9/bits/stl_queue.h:356:5: note:   template argument deduction/substitution\
    \ failed:\n/tmp/tmpkl58glb2.cpp:43:27: note:   \u2018std::__cxx11::basic_string<char>\u2019\
    \ is not derived from \u2018const std::queue<_Tp, _Seq>\u2019\n   43 |     if(date.substr(2,2)\
    \ < 1 || date.substr(2,2) > 12) {\n      |                           ^\nIn file\
    \ included from /usr/include/c++/9/set:61,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:87,\n\
    \                 from /tmp/tmpkl58glb2.cpp:2:\n/usr/include/c++/9/bits/stl_set.h:996:5:\
    \ note: candidate: \u2018template<class _Key, class _Compare, class _Alloc> bool\
    \ std::operator<(const std::set<_Key, _Compare, _Alloc>&, const std::set<_Key,\
    \ _Compare, _Alloc>&)\u2019\n  996 |     operator<(const set<_Key, _Compare, _Alloc>&\
    \ __x,\n      |     ^~~~~~~~\n/usr/include/c++/9/bits/stl_set.h:996:5: note: \
    \  template argument deduction/substitution failed:\n/tmp/tmpkl58glb2.cpp:43:27:\
    \ note:   \u2018std::__cxx11::basic_string<char>\u2019 is not derived from \u2018\
    const std::set<_Key, _Compare, _Alloc>\u2019\n   43 |     if(date.substr(2,2)\
    \ < 1 || date.substr(2,2) > 12) {\n      |                           ^\nIn file\
    \ included from /usr/include/c++/9/set:62,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:87,\n\
    \                 from /tmp/tmpkl58glb2.cpp:2:\n/usr/include/c++/9/bits/stl_multiset.h:981:5:\
    \ note: candidate: \u2018template<class _Key, class _Compare, class _Alloc> bool\
    \ std::operator<(const std::multiset<_Key, _Compare, _Alloc>&, const std::multiset<_Key,\
    \ _Compare, _Alloc>&)\u2019\n  981 |     operator<(const multiset<_Key, _Compare,\
    \ _Alloc>& __x,\n      |     ^~~~~~~~\n/usr/include/c++/9/bits/stl_multiset.h:981:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmpkl58glb2.cpp:43:27:\
    \ note:   \u2018std::__cxx11::basic_string<char>\u2019 is not derived from \u2018\
    const std::multiset<_Key, _Compare, _Alloc>\u2019\n   43 |     if(date.substr(2,2)\
    \ < 1 || date.substr(2,2) > 12) {\n      |                           ^\nIn file\
    \ included from /usr/include/c++/9/stack:61,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:89,\n\
    \                 from /tmp/tmpkl58glb2.cpp:2:\n/usr/include/c++/9/bits/stl_stack.h:331:5:\
    \ note: candidate: \u2018template<class _Tp, class _Seq> bool std::operator<(const\
    \ std::stack<_Tp, _Seq>&, const std::stack<_Tp, _Seq>&)\u2019\n  331 |     operator<(const\
    \ stack<_Tp, _Seq>& __x, const stack<_Tp, _Seq>& __y)\n      |     ^~~~~~~~\n\
    /usr/include/c++/9/bits/stl_stack.h:331:5: note:   template argument deduction/substitution\
    \ failed:\n/tmp/tmpkl58glb2.cpp:43:27: note:   \u2018std::__cxx11::basic_string<char>\u2019\
    \ is not derived from \u2018const std::stack<_Tp, _Seq>\u2019\n   43 |     if(date.substr(2,2)\
    \ < 1 || date.substr(2,2) > 12) {\n      |                           ^\nIn file\
    \ included from /usr/include/c++/9/valarray:603,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:95,\n\
    \                 from /tmp/tmpkl58glb2.cpp:2:\n/usr/include/c++/9/bits/valarray_after.h:419:5:\
    \ note: candidate: \u2018template<class _Dom1, class _Dom2> std::_Expr<std::__detail::_BinClos<std::__less,\
    \ std::_Expr, std::_Expr, _Dom1, _Dom2>, typename std::__fun<std::__less, typename\
    \ _Dom1::value_type>::result_type> std::operator<(const std::_Expr<_Dom1, typename\
    \ _Dom1::value_type>&, const std::_Expr<_Dom2, typename _Dom2::value_type>&)\u2019\
    \n  419 |     _DEFINE_EXPR_BINARY_OPERATOR(<, __less)\n      |     ^~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /usr/include/c++/9/bits/valarray_after.h:419:5: note:   template argument deduction/substitution\
    \ failed:\n/tmp/tmpkl58glb2.cpp:43:27: note:   \u2018std::__cxx11::basic_string<char>\u2019\
    \ is not derived from \u2018const std::_Expr<_Dom1, typename _Dom1::value_type>\u2019\
    \n   43 |     if(date.substr(2,2) < 1 || date.substr(2,2) > 12) {\n      |   \
    \                        ^\nIn file included from /usr/include/c++/9/valarray:603,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:95,\n\
    \                 from /tmp/tmpkl58glb2.cpp:2:\n/usr/include/c++/9/bits/valarray_after.h:419:5:\
    \ note: candidate: \u2018template<class _Dom> std::_Expr<std::__detail::_BinClos<std::__less,\
    \ std::_Expr, std::_Constant, _Dom, typename _Dom::value_type>, typename std::__fun<std::__less,\
    \ typename _Dom1::value_type>::result_type> std::operator<(const std::_Expr<_Dom1,\
    \ typename _Dom1::value_type>&, const typename _Dom::value_type&)\u2019\n  419\
    \ |     _DEFINE_EXPR_BINARY_OPERATOR(<, __less)\n      |     ^~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /usr/include/c++/9/bits/valarray_after.h:419:5: note:   template argument deduction/substitution\
    \ failed:\n/tmp/tmpkl58glb2.cpp:43:27: note:   \u2018std::__cxx11::basic_string<char>\u2019\
    \ is not derived from \u2018const std::_Expr<_Dom1, typename _Dom1::value_type>\u2019\
    \n   43 |     if(date.substr(2,2) < 1 || date.substr(2,2) > 12) {\n      |   \
    \                        ^\nIn file included from /usr/include/c++/9/valarray:603,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:95,\n\
    \                 from /tmp/tmpkl58glb2.cpp:2:\n/usr/include/c++/9/bits/valarray_after.h:419:5:\
    \ note: candidate: \u2018template<class _Dom> std::_Expr<std::__detail::_BinClos<std::__less,\
    \ std::_Constant, std::_Expr, typename _Dom::value_type, _Dom>, typename std::__fun<std::__less,\
    \ typename _Dom1::value_type>::result_type> std::operator<(const typename _Dom::value_type&,\
    \ const std::_Expr<_Dom1, typename _Dom1::value_type>&)\u2019\n  419 |     _DEFINE_EXPR_BINARY_OPERATOR(<,\
    \ __less)\n      |     ^~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/usr/include/c++/9/bits/valarray_after.h:419:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmpkl58glb2.cpp:43:27:\
    \ note:   mismatched types \u2018const std::_Expr<_Dom1, typename _Dom1::value_type>\u2019\
    \ and \u2018int\u2019\n   43 |     if(date.substr(2,2) < 1 || date.substr(2,2)\
    \ > 12) {\n      |                           ^\nIn file included from /usr/include/c++/9/valarray:603,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:95,\n\
    \                 from /tmp/tmpkl58glb2.cpp:2:\n/usr/include/c++/9/bits/valarray_after.h:419:5:\
    \ note: candidate: \u2018template<class _Dom> std::_Expr<std::__detail::_BinClos<std::__less,\
    \ std::_Expr, std::_ValArray, _Dom, typename _Dom::value_type>, typename std::__fun<std::__less,\
    \ typename _Dom1::value_type>::result_type> std::operator<(const std::_Expr<_Dom1,\
    \ typename _Dom1::value_type>&, const std::valarray<typename _Dom::value_type>&)\u2019\
    \n  419 |     _DEFINE_EXPR_BINARY_OPERATOR(<, __less)\n      |     ^~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /usr/include/c++/9/bits/valarray_after.h:419:5: note:   template argument deduction/substitution\
    \ failed:\n/tmp/tmpkl58glb2.cpp:43:27: note:   \u2018std::__cxx11::basic_string<char>\u2019\
    \ is not derived from \u2018const std::_Expr<_Dom1, typename _Dom1::value_type>\u2019\
    \n   43 |     if(date.substr(2,2) < 1 || date.substr(2,2) > 12) {\n      |   \
    \                        ^\nIn file included from /usr/include/c++/9/valarray:603,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:95,\n\
    \                 from /tmp/tmpkl58glb2.cpp:2:\n/usr/include/c++/9/bits/valarray_after.h:419:5:\
    \ note: candidate: \u2018template<class _Dom> std::_Expr<std::__detail::_BinClos<std::__less,\
    \ std::_ValArray, std::_Expr, typename _Dom::value_type, _Dom>, typename std::__fun<std::__less,\
    \ typename _Dom1::value_type>::result_type> std::operator<(const std::valarray<typename\
    \ _Dom::value_type>&, const std::_Expr<_Dom1, typename _Dom1::value_type>&)\u2019\
    \n  419 |     _DEFINE_EXPR_BINARY_OPERATOR(<, __less)\n      |     ^~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /usr/include/c++/9/bits/valarray_after.h:419:5: note:   template argument deduction/substitution\
    \ failed:\n/tmp/tmpkl58glb2.cpp:43:27: note:   mismatched types \u2018const std::_Expr<_Dom1,\
    \ typename _Dom1::value_type>\u2019 and \u2018int\u2019\n   43 |     if(date.substr(2,2)\
    \ < 1 || date.substr(2,2) > 12) {\n      |                           ^\nIn file\
    \ included from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:95,\n      \
    \           from /tmp/tmpkl58glb2.cpp:2:\n/usr/include/c++/9/valarray:1199:1:\
    \ note: candidate: \u2018template<class _Tp> std::_Expr<std::__detail::_BinClos<std::__less,\
    \ std::_ValArray, std::_ValArray, _Tp, _Tp>, typename std::__fun<std::__less,\
    \ _Tp>::result_type> std::operator<(const std::valarray<_Tp>&, const std::valarray<_Tp>&)\u2019\
    \n 1199 | _DEFINE_BINARY_OPERATOR(<, __less)\n      | ^~~~~~~~~~~~~~~~~~~~~~~\n\
    /usr/include/c++/9/valarray:1199:1: note:   template argument deduction/substitution\
    \ failed:\n/tmp/tmpkl58glb2.cpp:43:27: note:   \u2018std::__cxx11::basic_string<char>\u2019\
    \ is not derived from \u2018const std::valarray<_Tp>\u2019\n   43 |     if(date.substr(2,2)\
    \ < 1 || date.substr(2,2) > 12) {\n      |                           ^\nIn file\
    \ included from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:95,\n      \
    \           from /tmp/tmpkl58glb2.cpp:2:\n/usr/include/c++/9/valarray:1199:1:\
    \ note: candidate: \u2018template<class _Tp> std::_Expr<std::__detail::_BinClos<std::__less,\
    \ std::_ValArray, std::_Constant, _Tp, _Tp>, typename std::__fun<std::__less,\
    \ _Tp>::result_type> std::operator<(const std::valarray<_Tp>&, const typename\
    \ std::valarray<_Tp>::value_type&)\u2019\n 1199 | _DEFINE_BINARY_OPERATOR(<, __less)\n\
    \      | ^~~~~~~~~~~~~~~~~~~~~~~\n/usr/include/c++/9/valarray:1199:1: note:  \
    \ template argument deduction/substitution failed:\n/tmp/tmpkl58glb2.cpp:43:27:\
    \ note:   \u2018std::__cxx11::basic_string<char>\u2019 is not derived from \u2018\
    const std::valarray<_Tp>\u2019\n   43 |     if(date.substr(2,2) < 1 || date.substr(2,2)\
    \ > 12) {\n      |                           ^\nIn file included from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:95,\n\
    \                 from /tmp/tmpkl58glb2.cpp:2:\n/usr/include/c++/9/valarray:1199:1:\
    \ note: candidate: \u2018template<class _Tp> std::_Expr<std::__detail::_BinClos<std::__less,\
    \ std::_Constant, std::_ValArray, _Tp, _Tp>, typename std::__fun<std::__less,\
    \ _Tp>::result_type> std::operator<(const typename std::valarray<_Tp>::value_type&,\
    \ const std::valarray<_Tp>&)\u2019\n 1199 | _DEFINE_BINARY_OPERATOR(<, __less)\n\
    \      | ^~~~~~~~~~~~~~~~~~~~~~~\n/usr/include/c++/9/valarray:1199:1: note:  \
    \ template argument deduction/substitution failed:\n/tmp/tmpkl58glb2.cpp:43:27:\
    \ note:   mismatched types \u2018const std::valarray<_Tp>\u2019 and \u2018int\u2019\
    \n   43 |     if(date.substr(2,2) < 1 || date.substr(2,2) > 12) {\n      |   \
    \                        ^\nIn file included from /usr/include/c++/9/forward_list:38,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:104,\n\
    \                 from /tmp/tmpkl58glb2.cpp:2:\n/usr/include/c++/9/bits/forward_list.h:1443:5:\
    \ note: candidate: \u2018template<class _Tp, class _Alloc> bool std::operator<(const\
    \ std::forward_list<_Tp, _Alloc>&, const std::forward_list<_Tp, _Alloc>&)\u2019\
    \n 1443 |     operator<(const forward_list<_Tp, _Alloc>& __lx,\n      |     ^~~~~~~~\n\
    /usr/include/c++/9/bits/forward_list.h:1443:5: note:   template argument deduction/substitution\
    \ failed:\n/tmp/tmpkl58glb2.cpp:43:27: note:   \u2018std::__cxx11::basic_string<char>\u2019\
    \ is not derived from \u2018const std::forward_list<_Tp, _Alloc>\u2019\n   43\
    \ |     if(date.substr(2,2) < 1 || date.substr(2,2) > 12) {\n      |         \
    \                  ^\nIn file included from /usr/include/c++/9/future:39,\n  \
    \               from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:105,\n\
    \                 from /tmp/tmpkl58glb2.cpp:2:\n/usr/include/c++/9/thread:290:3:\
    \ note: candidate: \u2018bool std::operator<(std::thread::id, std::thread::id)\u2019\
    \n  290 |   operator<(thread::id __x, thread::id __y) noexcept\n      |   ^~~~~~~~\n\
    /usr/include/c++/9/thread:290:24: note:   no known conversion for argument 1 from\
    \ \u2018std::__cxx11::basic_string<char>\u2019 to \u2018std::thread::id\u2019\n\
    \  290 |   operator<(thread::id __x, thread::id __y) noexcept\n      |       \
    \      ~~~~~~~~~~~^~~\nIn file included from /usr/include/c++/9/bits/stl_algobase.h:67,\n\
    \                 from /usr/include/c++/9/bits/char_traits.h:39,\n           \
    \      from /usr/include/c++/9/ios:40,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmpkl58glb2.cpp:2:\n/usr/include/c++/9/bits/stl_iterator.h:912:5: note:\
    \ candidate: \u2018template<class _IteratorL, class _IteratorR, class _Container>\
    \ bool __gnu_cxx::operator<(const __gnu_cxx::__normal_iterator<_IteratorL, _Container>&,\
    \ const __gnu_cxx::__normal_iterator<_IteratorR, _Container>&)\u2019\n  912 |\
    \     operator<(const __normal_iterator<_IteratorL, _Container>& __lhs,\n    \
    \  |     ^~~~~~~~\n/usr/include/c++/9/bits/stl_iterator.h:912:5: note:   template\
    \ argument deduction/substitution failed:\n/tmp/tmpkl58glb2.cpp:43:27: note: \
    \  \u2018std::__cxx11::basic_string<char>\u2019 is not derived from \u2018const\
    \ __gnu_cxx::__normal_iterator<_IteratorL, _Container>\u2019\n   43 |     if(date.substr(2,2)\
    \ < 1 || date.substr(2,2) > 12) {\n      |                           ^\nIn file\
    \ included from /usr/include/c++/9/bits/stl_algobase.h:67,\n                 from\
    \ /usr/include/c++/9/bits/char_traits.h:39,\n                 from /usr/include/c++/9/ios:40,\n\
    \                 from /usr/include/c++/9/istream:38,\n                 from /usr/include/c++/9/sstream:38,\n\
    \                 from /usr/include/c++/9/complex:45,\n                 from /usr/include/c++/9/ccomplex:39,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n\
    \                 from /tmp/tmpkl58glb2.cpp:2:\n/usr/include/c++/9/bits/stl_iterator.h:919:5:\
    \ note: candidate: \u2018template<class _Iterator, class _Container> bool __gnu_cxx::operator<(const\
    \ __gnu_cxx::__normal_iterator<_Iterator, _Container>&, const __gnu_cxx::__normal_iterator<_Iterator,\
    \ _Container>&)\u2019\n  919 |     operator<(const __normal_iterator<_Iterator,\
    \ _Container>& __lhs,\n      |     ^~~~~~~~\n/usr/include/c++/9/bits/stl_iterator.h:919:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmpkl58glb2.cpp:43:27:\
    \ note:   \u2018std::__cxx11::basic_string<char>\u2019 is not derived from \u2018\
    const __gnu_cxx::__normal_iterator<_Iterator, _Container>\u2019\n   43 |     if(date.substr(2,2)\
    \ < 1 || date.substr(2,2) > 12) {\n      |                           ^\n/tmp/tmpkl58glb2.cpp:43:49:\
    \ error: no match for \u2018operator>\u2019 (operand types are \u2018std::__cxx11::basic_string<char>\u2019\
    \ and \u2018int\u2019)\n   43 |     if(date.substr(2,2) < 1 || date.substr(2,2)\
    \ > 12) {\n      |                                ~~~~~~~~~~~~~~~~ ^ ~~\n    \
    \  |                                           |       |\n      |            \
    \                               |       int\n      |                         \
    \                  std::__cxx11::basic_string<char>\nIn file included from /usr/include/c++/9/regex:62,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:110,\n\
    \                 from /tmp/tmpkl58glb2.cpp:2:\n/usr/include/c++/9/bits/regex.h:1081:5:\
    \ note: candidate: \u2018template<class _BiIter> bool std::__cxx11::operator>(const\
    \ std::__cxx11::sub_match<_BiIter>&, const std::__cxx11::sub_match<_BiIter>&)\u2019\
    \n 1081 |     operator>(const sub_match<_BiIter>& __lhs, const sub_match<_BiIter>&\
    \ __rhs)\n      |     ^~~~~~~~\n/usr/include/c++/9/bits/regex.h:1081:5: note:\
    \   template argument deduction/substitution failed:\n/tmp/tmpkl58glb2.cpp:43:51:\
    \ note:   \u2018std::__cxx11::basic_string<char>\u2019 is not derived from \u2018\
    const std::__cxx11::sub_match<_BiIter>\u2019\n   43 |     if(date.substr(2,2)\
    \ < 1 || date.substr(2,2) > 12) {\n      |                                   \
    \                ^~\nIn file included from /usr/include/c++/9/regex:62,\n    \
    \             from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:110,\n  \
    \               from /tmp/tmpkl58glb2.cpp:2:\n/usr/include/c++/9/bits/regex.h:1136:5:\
    \ note: candidate: \u2018template<class _Bi_iter, class _Ch_traits, class _Ch_alloc>\
    \ bool std::__cxx11::operator>(std::__cxx11::__sub_match_string<_Bi_iter, _Ch_traits,\
    \ _Ch_alloc>&, const std::__cxx11::sub_match<_BiIter>&)\u2019\n 1136 |     operator>(const\
    \ __sub_match_string<_Bi_iter, _Ch_traits, _Ch_alloc>& __lhs,\n      |     ^~~~~~~~\n\
    /usr/include/c++/9/bits/regex.h:1136:5: note:   template argument deduction/substitution\
    \ failed:\n/tmp/tmpkl58glb2.cpp:43:51: note:   mismatched types \u2018const std::__cxx11::sub_match<_BiIter>\u2019\
    \ and \u2018int\u2019\n   43 |     if(date.substr(2,2) < 1 || date.substr(2,2)\
    \ > 12) {\n      |                                                   ^~\nIn file\
    \ included from /usr/include/c++/9/regex:62,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:110,\n\
    \                 from /tmp/tmpkl58glb2.cpp:2:\n/usr/include/c++/9/bits/regex.h:1210:5:\
    \ note: candidate: \u2018template<class _Bi_iter, class _Ch_traits, class _Ch_alloc>\
    \ bool std::__cxx11::operator>(const std::__cxx11::sub_match<_BiIter>&, std::__cxx11::__sub_match_string<_Bi_iter,\
    \ _Ch_traits, _Ch_alloc>&)\u2019\n 1210 |     operator>(const sub_match<_Bi_iter>&\
    \ __lhs,\n      |     ^~~~~~~~\n/usr/include/c++/9/bits/regex.h:1210:5: note:\
    \   template argument deduction/substitution failed:\n/tmp/tmpkl58glb2.cpp:43:51:\
    \ note:   \u2018std::__cxx11::basic_string<char>\u2019 is not derived from \u2018\
    const std::__cxx11::sub_match<_BiIter>\u2019\n   43 |     if(date.substr(2,2)\
    \ < 1 || date.substr(2,2) > 12) {\n      |                                   \
    \                ^~\nIn file included from /usr/include/c++/9/regex:62,\n    \
    \             from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:110,\n  \
    \               from /tmp/tmpkl58glb2.cpp:2:\n/usr/include/c++/9/bits/regex.h:1284:5:\
    \ note: candidate: \u2018template<class _Bi_iter> bool std::__cxx11::operator>(const\
    \ typename std::iterator_traits<_Iter>::value_type*, const std::__cxx11::sub_match<_BiIter>&)\u2019\
    \n 1284 |     operator>(typename iterator_traits<_Bi_iter>::value_type const*\
    \ __lhs,\n      |     ^~~~~~~~\n/usr/include/c++/9/bits/regex.h:1284:5: note:\
    \   template argument deduction/substitution failed:\n/tmp/tmpkl58glb2.cpp:43:51:\
    \ note:   mismatched types \u2018const std::__cxx11::sub_match<_BiIter>\u2019\
    \ and \u2018int\u2019\n   43 |     if(date.substr(2,2) < 1 || date.substr(2,2)\
    \ > 12) {\n      |                                                   ^~\nIn file\
    \ included from /usr/include/c++/9/regex:62,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:110,\n\
    \                 from /tmp/tmpkl58glb2.cpp:2:\n/usr/include/c++/9/bits/regex.h:1358:5:\
    \ note: candidate: \u2018template<class _Bi_iter> bool std::__cxx11::operator>(const\
    \ std::__cxx11::sub_match<_BiIter>&, const typename std::iterator_traits<_Iter>::value_type*)\u2019\
    \n 1358 |     operator>(const sub_match<_Bi_iter>& __lhs,\n      |     ^~~~~~~~\n\
    /usr/include/c++/9/bits/regex.h:1358:5: note:   template argument deduction/substitution\
    \ failed:\n/tmp/tmpkl58glb2.cpp:43:51: note:   \u2018std::__cxx11::basic_string<char>\u2019\
    \ is not derived from \u2018const std::__cxx11::sub_match<_BiIter>\u2019\n   43\
    \ |     if(date.substr(2,2) < 1 || date.substr(2,2) > 12) {\n      |         \
    \                                          ^~\nIn file included from /usr/include/c++/9/regex:62,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:110,\n\
    \                 from /tmp/tmpkl58glb2.cpp:2:\n/usr/include/c++/9/bits/regex.h:1434:5:\
    \ note: candidate: \u2018template<class _Bi_iter> bool std::__cxx11::operator>(const\
    \ typename std::iterator_traits<_Iter>::value_type&, const std::__cxx11::sub_match<_BiIter>&)\u2019\
    \n 1434 |     operator>(typename iterator_traits<_Bi_iter>::value_type const&\
    \ __lhs,\n      |     ^~~~~~~~\n/usr/include/c++/9/bits/regex.h:1434:5: note:\
    \   template argument deduction/substitution failed:\n/tmp/tmpkl58glb2.cpp:43:51:\
    \ note:   mismatched types \u2018const std::__cxx11::sub_match<_BiIter>\u2019\
    \ and \u2018int\u2019\n   43 |     if(date.substr(2,2) < 1 || date.substr(2,2)\
    \ > 12) {\n      |                                                   ^~\nIn file\
    \ included from /usr/include/c++/9/regex:62,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:110,\n\
    \                 from /tmp/tmpkl58glb2.cpp:2:\n/usr/include/c++/9/bits/regex.h:1512:5:\
    \ note: candidate: \u2018template<class _Bi_iter> bool std::__cxx11::operator>(const\
    \ std::__cxx11::sub_match<_BiIter>&, const typename std::iterator_traits<_Iter>::value_type&)\u2019\
    \n 1512 |     operator>(const sub_match<_Bi_iter>& __lhs,\n      |     ^~~~~~~~\n\
    /usr/include/c++/9/bits/regex.h:1512:5: note:   template argument deduction/substitution\
    \ failed:\n/tmp/tmpkl58glb2.cpp:43:51: note:   \u2018std::__cxx11::basic_string<char>\u2019\
    \ is not derived from \u2018const std::__cxx11::sub_match<_BiIter>\u2019\n   43\
    \ |     if(date.substr(2,2) < 1 || date.substr(2,2) > 12) {\n      |         \
    \                                          ^~\nIn file included from /usr/include/c++/9/bits/stl_algobase.h:64,\n\
    \                 from /usr/include/c++/9/bits/char_traits.h:39,\n           \
    \      from /usr/include/c++/9/ios:40,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmpkl58glb2.cpp:2:\n/usr/include/c++/9/bits/stl_pair.h:467:5: note: candidate:\
    \ \u2018template<class _T1, class _T2> constexpr bool std::operator>(const std::pair<_T1,\
    \ _T2>&, const std::pair<_T1, _T2>&)\u2019\n  467 |     operator>(const pair<_T1,\
    \ _T2>& __x, const pair<_T1, _T2>& __y)\n      |     ^~~~~~~~\n/usr/include/c++/9/bits/stl_pair.h:467:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmpkl58glb2.cpp:43:51:\
    \ note:   \u2018std::__cxx11::basic_string<char>\u2019 is not derived from \u2018\
    const std::pair<_T1, _T2>\u2019\n   43 |     if(date.substr(2,2) < 1 || date.substr(2,2)\
    \ > 12) {\n      |                                                   ^~\nIn file\
    \ included from /usr/include/c++/9/bits/stl_algobase.h:67,\n                 from\
    \ /usr/include/c++/9/bits/char_traits.h:39,\n                 from /usr/include/c++/9/ios:40,\n\
    \                 from /usr/include/c++/9/istream:38,\n                 from /usr/include/c++/9/sstream:38,\n\
    \                 from /usr/include/c++/9/complex:45,\n                 from /usr/include/c++/9/ccomplex:39,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n\
    \                 from /tmp/tmpkl58glb2.cpp:2:\n/usr/include/c++/9/bits/stl_iterator.h:343:5:\
    \ note: candidate: \u2018template<class _Iterator> bool std::operator>(const std::reverse_iterator<_Iterator>&,\
    \ const std::reverse_iterator<_Iterator>&)\u2019\n  343 |     operator>(const\
    \ reverse_iterator<_Iterator>& __x,\n      |     ^~~~~~~~\n/usr/include/c++/9/bits/stl_iterator.h:343:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmpkl58glb2.cpp:43:51:\
    \ note:   \u2018std::__cxx11::basic_string<char>\u2019 is not derived from \u2018\
    const std::reverse_iterator<_Iterator>\u2019\n   43 |     if(date.substr(2,2)\
    \ < 1 || date.substr(2,2) > 12) {\n      |                                   \
    \                ^~\nIn file included from /usr/include/c++/9/bits/stl_algobase.h:67,\n\
    \                 from /usr/include/c++/9/bits/char_traits.h:39,\n           \
    \      from /usr/include/c++/9/ios:40,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmpkl58glb2.cpp:2:\n/usr/include/c++/9/bits/stl_iterator.h:381:5: note:\
    \ candidate: \u2018template<class _IteratorL, class _IteratorR> bool std::operator>(const\
    \ std::reverse_iterator<_Iterator>&, const std::reverse_iterator<_IteratorR>&)\u2019\
    \n  381 |     operator>(const reverse_iterator<_IteratorL>& __x,\n      |    \
    \ ^~~~~~~~\n/usr/include/c++/9/bits/stl_iterator.h:381:5: note:   template argument\
    \ deduction/substitution failed:\n/tmp/tmpkl58glb2.cpp:43:51: note:   \u2018std::__cxx11::basic_string<char>\u2019\
    \ is not derived from \u2018const std::reverse_iterator<_Iterator>\u2019\n   43\
    \ |     if(date.substr(2,2) < 1 || date.substr(2,2) > 12) {\n      |         \
    \                                          ^~\nIn file included from /usr/include/c++/9/bits/stl_algobase.h:67,\n\
    \                 from /usr/include/c++/9/bits/char_traits.h:39,\n           \
    \      from /usr/include/c++/9/ios:40,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmpkl58glb2.cpp:2:\n/usr/include/c++/9/bits/stl_iterator.h:1184:5: note:\
    \ candidate: \u2018template<class _IteratorL, class _IteratorR> bool std::operator>(const\
    \ std::move_iterator<_IteratorL>&, const std::move_iterator<_IteratorR>&)\u2019\
    \n 1184 |     operator>(const move_iterator<_IteratorL>& __x,\n      |     ^~~~~~~~\n\
    /usr/include/c++/9/bits/stl_iterator.h:1184:5: note:   template argument deduction/substitution\
    \ failed:\n/tmp/tmpkl58glb2.cpp:43:51: note:   \u2018std::__cxx11::basic_string<char>\u2019\
    \ is not derived from \u2018const std::move_iterator<_IteratorL>\u2019\n   43\
    \ |     if(date.substr(2,2) < 1 || date.substr(2,2) > 12) {\n      |         \
    \                                          ^~\nIn file included from /usr/include/c++/9/bits/stl_algobase.h:67,\n\
    \                 from /usr/include/c++/9/bits/char_traits.h:39,\n           \
    \      from /usr/include/c++/9/ios:40,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmpkl58glb2.cpp:2:\n/usr/include/c++/9/bits/stl_iterator.h:1190:5: note:\
    \ candidate: \u2018template<class _Iterator> bool std::operator>(const std::move_iterator<_IteratorL>&,\
    \ const std::move_iterator<_IteratorL>&)\u2019\n 1190 |     operator>(const move_iterator<_Iterator>&\
    \ __x,\n      |     ^~~~~~~~\n/usr/include/c++/9/bits/stl_iterator.h:1190:5: note:\
    \   template argument deduction/substitution failed:\n/tmp/tmpkl58glb2.cpp:43:51:\
    \ note:   \u2018std::__cxx11::basic_string<char>\u2019 is not derived from \u2018\
    const std::move_iterator<_IteratorL>\u2019\n   43 |     if(date.substr(2,2) <\
    \ 1 || date.substr(2,2) > 12) {\n      |                                     \
    \              ^~\nIn file included from /usr/include/c++/9/string:55,\n     \
    \            from /usr/include/c++/9/bits/locale_classes.h:40,\n             \
    \    from /usr/include/c++/9/bits/ios_base.h:41,\n                 from /usr/include/c++/9/ios:42,\n\
    \                 from /usr/include/c++/9/istream:38,\n                 from /usr/include/c++/9/sstream:38,\n\
    \                 from /usr/include/c++/9/complex:45,\n                 from /usr/include/c++/9/ccomplex:39,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n\
    \                 from /tmp/tmpkl58glb2.cpp:2:\n/usr/include/c++/9/bits/basic_string.h:6267:5:\
    \ note: candidate: \u2018template<class _CharT, class _Traits, class _Alloc> bool\
    \ std::operator>(const std::__cxx11::basic_string<_CharT, _Traits, _Alloc>&, const\
    \ std::__cxx11::basic_string<_CharT, _Traits, _Alloc>&)\u2019\n 6267 |     operator>(const\
    \ basic_string<_CharT, _Traits, _Alloc>& __lhs,\n      |     ^~~~~~~~\n/usr/include/c++/9/bits/basic_string.h:6267:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmpkl58glb2.cpp:43:51:\
    \ note:   mismatched types \u2018const std::__cxx11::basic_string<_CharT, _Traits,\
    \ _Alloc>\u2019 and \u2018int\u2019\n   43 |     if(date.substr(2,2) < 1 || date.substr(2,2)\
    \ > 12) {\n      |                                                   ^~\nIn file\
    \ included from /usr/include/c++/9/string:55,\n                 from /usr/include/c++/9/bits/locale_classes.h:40,\n\
    \                 from /usr/include/c++/9/bits/ios_base.h:41,\n              \
    \   from /usr/include/c++/9/ios:42,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmpkl58glb2.cpp:2:\n/usr/include/c++/9/bits/basic_string.h:6280:5: note:\
    \ candidate: \u2018template<class _CharT, class _Traits, class _Alloc> bool std::operator>(const\
    \ std::__cxx11::basic_string<_CharT, _Traits, _Alloc>&, const _CharT*)\u2019\n\
    \ 6280 |     operator>(const basic_string<_CharT, _Traits, _Alloc>& __lhs,\n \
    \     |     ^~~~~~~~\n/usr/include/c++/9/bits/basic_string.h:6280:5: note:   template\
    \ argument deduction/substitution failed:\n/tmp/tmpkl58glb2.cpp:43:51: note: \
    \  mismatched types \u2018const _CharT*\u2019 and \u2018int\u2019\n   43 |   \
    \  if(date.substr(2,2) < 1 || date.substr(2,2) > 12) {\n      |              \
    \                                     ^~\nIn file included from /usr/include/c++/9/string:55,\n\
    \                 from /usr/include/c++/9/bits/locale_classes.h:40,\n        \
    \         from /usr/include/c++/9/bits/ios_base.h:41,\n                 from /usr/include/c++/9/ios:42,\n\
    \                 from /usr/include/c++/9/istream:38,\n                 from /usr/include/c++/9/sstream:38,\n\
    \                 from /usr/include/c++/9/complex:45,\n                 from /usr/include/c++/9/ccomplex:39,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n\
    \                 from /tmp/tmpkl58glb2.cpp:2:\n/usr/include/c++/9/bits/basic_string.h:6292:5:\
    \ note: candidate: \u2018template<class _CharT, class _Traits, class _Alloc> bool\
    \ std::operator>(const _CharT*, const std::__cxx11::basic_string<_CharT, _Traits,\
    \ _Alloc>&)\u2019\n 6292 |     operator>(const _CharT* __lhs,\n      |     ^~~~~~~~\n\
    /usr/include/c++/9/bits/basic_string.h:6292:5: note:   template argument deduction/substitution\
    \ failed:\n/tmp/tmpkl58glb2.cpp:43:51: note:   mismatched types \u2018const _CharT*\u2019\
    \ and \u2018std::__cxx11::basic_string<char>\u2019\n   43 |     if(date.substr(2,2)\
    \ < 1 || date.substr(2,2) > 12) {\n      |                                   \
    \                ^~\nIn file included from /usr/include/c++/9/deque:67,\n    \
    \             from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:68,\n   \
    \              from /tmp/tmpkl58glb2.cpp:2:\n/usr/include/c++/9/bits/stl_deque.h:327:5:\
    \ note: candidate: \u2018template<class _Tp, class _Ref, class _Ptr> bool std::operator>(const\
    \ std::_Deque_iterator<_Tp, _Ref, _Ptr>&, const std::_Deque_iterator<_Tp, _Ref,\
    \ _Ptr>&)\u2019\n  327 |     operator>(const _Deque_iterator<_Tp, _Ref, _Ptr>&\
    \ __x,\n      |     ^~~~~~~~\n/usr/include/c++/9/bits/stl_deque.h:327:5: note:\
    \   template argument deduction/substitution failed:\n/tmp/tmpkl58glb2.cpp:43:51:\
    \ note:   \u2018std::__cxx11::basic_string<char>\u2019 is not derived from \u2018\
    const std::_Deque_iterator<_Tp, _Ref, _Ptr>\u2019\n   43 |     if(date.substr(2,2)\
    \ < 1 || date.substr(2,2) > 12) {\n      |                                   \
    \                ^~\nIn file included from /usr/include/c++/9/deque:67,\n    \
    \             from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:68,\n   \
    \              from /tmp/tmpkl58glb2.cpp:2:\n/usr/include/c++/9/bits/stl_deque.h:334:5:\
    \ note: candidate: \u2018template<class _Tp, class _RefL, class _PtrL, class _RefR,\
    \ class _PtrR> bool std::operator>(const std::_Deque_iterator<_Tp, _Ref, _Ptr>&,\
    \ const std::_Deque_iterator<_Tp, _RefR, _PtrR>&)\u2019\n  334 |     operator>(const\
    \ _Deque_iterator<_Tp, _RefL, _PtrL>& __x,\n      |     ^~~~~~~~\n/usr/include/c++/9/bits/stl_deque.h:334:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmpkl58glb2.cpp:43:51:\
    \ note:   \u2018std::__cxx11::basic_string<char>\u2019 is not derived from \u2018\
    const std::_Deque_iterator<_Tp, _Ref, _Ptr>\u2019\n   43 |     if(date.substr(2,2)\
    \ < 1 || date.substr(2,2) > 12) {\n      |                                   \
    \                ^~\nIn file included from /usr/include/c++/9/deque:67,\n    \
    \             from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:68,\n   \
    \              from /tmp/tmpkl58glb2.cpp:2:\n/usr/include/c++/9/bits/stl_deque.h:2345:5:\
    \ note: candidate: \u2018template<class _Tp, class _Alloc> bool std::operator>(const\
    \ std::deque<_Tp, _Alloc>&, const std::deque<_Tp, _Alloc>&)\u2019\n 2345 |   \
    \  operator>(const deque<_Tp, _Alloc>& __x,\n      |     ^~~~~~~~\n/usr/include/c++/9/bits/stl_deque.h:2345:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmpkl58glb2.cpp:43:51:\
    \ note:   \u2018std::__cxx11::basic_string<char>\u2019 is not derived from \u2018\
    const std::deque<_Tp, _Alloc>\u2019\n   43 |     if(date.substr(2,2) < 1 || date.substr(2,2)\
    \ > 12) {\n      |                                                   ^~\nIn file\
    \ included from /usr/include/c++/9/tuple:39,\n                 from /usr/include/c++/9/functional:54,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:71,\n\
    \                 from /tmp/tmpkl58glb2.cpp:2:\n/usr/include/c++/9/array:270:5:\
    \ note: candidate: \u2018template<class _Tp, long unsigned int _Nm> bool std::operator>(const\
    \ std::array<_Tp, _Nm>&, const std::array<_Tp, _Nm>&)\u2019\n  270 |     operator>(const\
    \ array<_Tp, _Nm>& __one, const array<_Tp, _Nm>& __two)\n      |     ^~~~~~~~\n\
    /usr/include/c++/9/array:270:5: note:   template argument deduction/substitution\
    \ failed:\n/tmp/tmpkl58glb2.cpp:43:51: note:   \u2018std::__cxx11::basic_string<char>\u2019\
    \ is not derived from \u2018const std::array<_Tp, _Nm>\u2019\n   43 |     if(date.substr(2,2)\
    \ < 1 || date.substr(2,2) > 12) {\n      |                                   \
    \                ^~\nIn file included from /usr/include/c++/9/functional:54,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:71,\n\
    \                 from /tmp/tmpkl58glb2.cpp:2:\n/usr/include/c++/9/tuple:1451:5:\
    \ note: candidate: \u2018template<class ... _TElements, class ... _UElements>\
    \ constexpr bool std::operator>(const std::tuple<_Tps ...>&, const std::tuple<_Elements\
    \ ...>&)\u2019\n 1451 |     operator>(const tuple<_TElements...>& __t,\n     \
    \ |     ^~~~~~~~\n/usr/include/c++/9/tuple:1451:5: note:   template argument deduction/substitution\
    \ failed:\n/tmp/tmpkl58glb2.cpp:43:51: note:   \u2018std::__cxx11::basic_string<char>\u2019\
    \ is not derived from \u2018const std::tuple<_Tps ...>\u2019\n   43 |     if(date.substr(2,2)\
    \ < 1 || date.substr(2,2) > 12) {\n      |                                   \
    \                ^~\nIn file included from /usr/include/c++/9/bits/locale_conv.h:41,\n\
    \                 from /usr/include/c++/9/locale:43,\n                 from /usr/include/c++/9/iomanip:43,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:72,\n\
    \                 from /tmp/tmpkl58glb2.cpp:2:\n/usr/include/c++/9/bits/unique_ptr.h:790:5:\
    \ note: candidate: \u2018template<class _Tp, class _Dp, class _Up, class _Ep>\
    \ bool std::operator>(const std::unique_ptr<_Tp, _Dp>&, const std::unique_ptr<_Up,\
    \ _Ep>&)\u2019\n  790 |     operator>(const unique_ptr<_Tp, _Dp>& __x,\n     \
    \ |     ^~~~~~~~\n/usr/include/c++/9/bits/unique_ptr.h:790:5: note:   template\
    \ argument deduction/substitution failed:\n/tmp/tmpkl58glb2.cpp:43:51: note: \
    \  \u2018std::__cxx11::basic_string<char>\u2019 is not derived from \u2018const\
    \ std::unique_ptr<_Tp, _Dp>\u2019\n   43 |     if(date.substr(2,2) < 1 || date.substr(2,2)\
    \ > 12) {\n      |                                                   ^~\nIn file\
    \ included from /usr/include/c++/9/bits/locale_conv.h:41,\n                 from\
    \ /usr/include/c++/9/locale:43,\n                 from /usr/include/c++/9/iomanip:43,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:72,\n\
    \                 from /tmp/tmpkl58glb2.cpp:2:\n/usr/include/c++/9/bits/unique_ptr.h:796:5:\
    \ note: candidate: \u2018template<class _Tp, class _Dp> bool std::operator>(const\
    \ std::unique_ptr<_Tp, _Dp>&, std::nullptr_t)\u2019\n  796 |     operator>(const\
    \ unique_ptr<_Tp, _Dp>& __x, nullptr_t)\n      |     ^~~~~~~~\n/usr/include/c++/9/bits/unique_ptr.h:796:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmpkl58glb2.cpp:43:51:\
    \ note:   \u2018std::__cxx11::basic_string<char>\u2019 is not derived from \u2018\
    const std::unique_ptr<_Tp, _Dp>\u2019\n   43 |     if(date.substr(2,2) < 1 ||\
    \ date.substr(2,2) > 12) {\n      |                                          \
    \         ^~\nIn file included from /usr/include/c++/9/bits/locale_conv.h:41,\n\
    \                 from /usr/include/c++/9/locale:43,\n                 from /usr/include/c++/9/iomanip:43,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:72,\n\
    \                 from /tmp/tmpkl58glb2.cpp:2:\n/usr/include/c++/9/bits/unique_ptr.h:802:5:\
    \ note: candidate: \u2018template<class _Tp, class _Dp> bool std::operator>(std::nullptr_t,\
    \ const std::unique_ptr<_Tp, _Dp>&)\u2019\n  802 |     operator>(nullptr_t, const\
    \ unique_ptr<_Tp, _Dp>& __x)\n      |     ^~~~~~~~\n/usr/include/c++/9/bits/unique_ptr.h:802:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmpkl58glb2.cpp:43:51:\
    \ note:   mismatched types \u2018const std::unique_ptr<_Tp, _Dp>\u2019 and \u2018\
    int\u2019\n   43 |     if(date.substr(2,2) < 1 || date.substr(2,2) > 12) {\n \
    \     |                                                   ^~\nIn file included\
    \ from /usr/include/c++/9/list:63,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:79,\n\
    \                 from /tmp/tmpkl58glb2.cpp:2:\n/usr/include/c++/9/bits/stl_list.h:2038:5:\
    \ note: candidate: \u2018template<class _Tp, class _Alloc> bool std::operator>(const\
    \ std::__cxx11::list<_Tp, _Alloc>&, const std::__cxx11::list<_Tp, _Alloc>&)\u2019\
    \n 2038 |     operator>(const list<_Tp, _Alloc>& __x, const list<_Tp, _Alloc>&\
    \ __y)\n      |     ^~~~~~~~\n/usr/include/c++/9/bits/stl_list.h:2038:5: note:\
    \   template argument deduction/substitution failed:\n/tmp/tmpkl58glb2.cpp:43:51:\
    \ note:   \u2018std::__cxx11::basic_string<char>\u2019 is not derived from \u2018\
    const std::__cxx11::list<_Tp, _Alloc>\u2019\n   43 |     if(date.substr(2,2) <\
    \ 1 || date.substr(2,2) > 12) {\n      |                                     \
    \              ^~\nIn file included from /usr/include/c++/9/map:61,\n        \
    \         from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:81,\n       \
    \          from /tmp/tmpkl58glb2.cpp:2:\n/usr/include/c++/9/bits/stl_map.h:1486:5:\
    \ note: candidate: \u2018template<class _Key, class _Tp, class _Compare, class\
    \ _Alloc> bool std::operator>(const std::map<_Key, _Tp, _Compare, _Alloc>&, const\
    \ std::map<_Key, _Tp, _Compare, _Alloc>&)\u2019\n 1486 |     operator>(const map<_Key,\
    \ _Tp, _Compare, _Alloc>& __x,\n      |     ^~~~~~~~\n/usr/include/c++/9/bits/stl_map.h:1486:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmpkl58glb2.cpp:43:51:\
    \ note:   \u2018std::__cxx11::basic_string<char>\u2019 is not derived from \u2018\
    const std::map<_Key, _Tp, _Compare, _Alloc>\u2019\n   43 |     if(date.substr(2,2)\
    \ < 1 || date.substr(2,2) > 12) {\n      |                                   \
    \                ^~\nIn file included from /usr/include/c++/9/map:62,\n      \
    \           from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:81,\n     \
    \            from /tmp/tmpkl58glb2.cpp:2:\n/usr/include/c++/9/bits/stl_multimap.h:1150:5:\
    \ note: candidate: \u2018template<class _Key, class _Tp, class _Compare, class\
    \ _Alloc> bool std::operator>(const std::multimap<_Key, _Tp, _Compare, _Alloc>&,\
    \ const std::multimap<_Key, _Tp, _Compare, _Alloc>&)\u2019\n 1150 |     operator>(const\
    \ multimap<_Key, _Tp, _Compare, _Alloc>& __x,\n      |     ^~~~~~~~\n/usr/include/c++/9/bits/stl_multimap.h:1150:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmpkl58glb2.cpp:43:51:\
    \ note:   \u2018std::__cxx11::basic_string<char>\u2019 is not derived from \u2018\
    const std::multimap<_Key, _Tp, _Compare, _Alloc>\u2019\n   43 |     if(date.substr(2,2)\
    \ < 1 || date.substr(2,2) > 12) {\n      |                                   \
    \                ^~\nIn file included from /usr/include/c++/9/bits/shared_ptr.h:52,\n\
    \                 from /usr/include/c++/9/memory:81,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:82,\n\
    \                 from /tmp/tmpkl58glb2.cpp:2:\n/usr/include/c++/9/bits/shared_ptr_base.h:1487:5:\
    \ note: candidate: \u2018template<class _Tp1, class _Tp2, __gnu_cxx::_Lock_policy\
    \ _Lp> bool std::operator>(const std::__shared_ptr<_Tp1, _Lp>&, const std::__shared_ptr<_Tp2,\
    \ _Lp>&)\u2019\n 1487 |     operator>(const __shared_ptr<_Tp1, _Lp>& __a,\n  \
    \    |     ^~~~~~~~\n/usr/include/c++/9/bits/shared_ptr_base.h:1487:5: note: \
    \  template argument deduction/substitution failed:\n/tmp/tmpkl58glb2.cpp:43:51:\
    \ note:   \u2018std::__cxx11::basic_string<char>\u2019 is not derived from \u2018\
    const std::__shared_ptr<_Tp1, _Lp>\u2019\n   43 |     if(date.substr(2,2) < 1\
    \ || date.substr(2,2) > 12) {\n      |                                       \
    \            ^~\nIn file included from /usr/include/c++/9/bits/shared_ptr.h:52,\n\
    \                 from /usr/include/c++/9/memory:81,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:82,\n\
    \                 from /tmp/tmpkl58glb2.cpp:2:\n/usr/include/c++/9/bits/shared_ptr_base.h:1493:5:\
    \ note: candidate: \u2018template<class _Tp, __gnu_cxx::_Lock_policy _Lp> bool\
    \ std::operator>(const std::__shared_ptr<_Tp, _Lp>&, std::nullptr_t)\u2019\n 1493\
    \ |     operator>(const __shared_ptr<_Tp, _Lp>& __a, nullptr_t) noexcept\n   \
    \   |     ^~~~~~~~\n/usr/include/c++/9/bits/shared_ptr_base.h:1493:5: note:  \
    \ template argument deduction/substitution failed:\n/tmp/tmpkl58glb2.cpp:43:51:\
    \ note:   \u2018std::__cxx11::basic_string<char>\u2019 is not derived from \u2018\
    const std::__shared_ptr<_Tp, _Lp>\u2019\n   43 |     if(date.substr(2,2) < 1 ||\
    \ date.substr(2,2) > 12) {\n      |                                          \
    \         ^~\nIn file included from /usr/include/c++/9/bits/shared_ptr.h:52,\n\
    \                 from /usr/include/c++/9/memory:81,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:82,\n\
    \                 from /tmp/tmpkl58glb2.cpp:2:\n/usr/include/c++/9/bits/shared_ptr_base.h:1498:5:\
    \ note: candidate: \u2018template<class _Tp, __gnu_cxx::_Lock_policy _Lp> bool\
    \ std::operator>(std::nullptr_t, const std::__shared_ptr<_Tp, _Lp>&)\u2019\n 1498\
    \ |     operator>(nullptr_t, const __shared_ptr<_Tp, _Lp>& __a) noexcept\n   \
    \   |     ^~~~~~~~\n/usr/include/c++/9/bits/shared_ptr_base.h:1498:5: note:  \
    \ template argument deduction/substitution failed:\n/tmp/tmpkl58glb2.cpp:43:51:\
    \ note:   mismatched types \u2018const std::__shared_ptr<_Tp, _Lp>\u2019 and \u2018\
    int\u2019\n   43 |     if(date.substr(2,2) < 1 || date.substr(2,2) > 12) {\n \
    \     |                                                   ^~\nIn file included\
    \ from /usr/include/c++/9/memory:81,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:82,\n\
    \                 from /tmp/tmpkl58glb2.cpp:2:\n/usr/include/c++/9/bits/shared_ptr.h:454:5:\
    \ note: candidate: \u2018template<class _Tp, class _Up> bool std::operator>(const\
    \ std::shared_ptr<_Tp>&, const std::shared_ptr<_Tp>&)\u2019\n  454 |     operator>(const\
    \ shared_ptr<_Tp>& __a, const shared_ptr<_Up>& __b) noexcept\n      |     ^~~~~~~~\n\
    /usr/include/c++/9/bits/shared_ptr.h:454:5: note:   template argument deduction/substitution\
    \ failed:\n/tmp/tmpkl58glb2.cpp:43:51: note:   \u2018std::__cxx11::basic_string<char>\u2019\
    \ is not derived from \u2018const std::shared_ptr<_Tp>\u2019\n   43 |     if(date.substr(2,2)\
    \ < 1 || date.substr(2,2) > 12) {\n      |                                   \
    \                ^~\nIn file included from /usr/include/c++/9/memory:81,\n   \
    \              from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:82,\n  \
    \               from /tmp/tmpkl58glb2.cpp:2:\n/usr/include/c++/9/bits/shared_ptr.h:459:5:\
    \ note: candidate: \u2018template<class _Tp> bool std::operator>(const std::shared_ptr<_Tp>&,\
    \ std::nullptr_t)\u2019\n  459 |     operator>(const shared_ptr<_Tp>& __a, nullptr_t)\
    \ noexcept\n      |     ^~~~~~~~\n/usr/include/c++/9/bits/shared_ptr.h:459:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmpkl58glb2.cpp:43:51:\
    \ note:   \u2018std::__cxx11::basic_string<char>\u2019 is not derived from \u2018\
    const std::shared_ptr<_Tp>\u2019\n   43 |     if(date.substr(2,2) < 1 || date.substr(2,2)\
    \ > 12) {\n      |                                                   ^~\nIn file\
    \ included from /usr/include/c++/9/memory:81,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:82,\n\
    \                 from /tmp/tmpkl58glb2.cpp:2:\n/usr/include/c++/9/bits/shared_ptr.h:464:5:\
    \ note: candidate: \u2018template<class _Tp> bool std::operator>(std::nullptr_t,\
    \ const std::shared_ptr<_Tp>&)\u2019\n  464 |     operator>(nullptr_t, const shared_ptr<_Tp>&\
    \ __a) noexcept\n      |     ^~~~~~~~\n/usr/include/c++/9/bits/shared_ptr.h:464:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmpkl58glb2.cpp:43:51:\
    \ note:   mismatched types \u2018const std::shared_ptr<_Tp>\u2019 and \u2018int\u2019\
    \n   43 |     if(date.substr(2,2) < 1 || date.substr(2,2) > 12) {\n      |   \
    \                                                ^~\nIn file included from /usr/include/c++/9/vector:67,\n\
    \                 from /usr/include/c++/9/queue:61,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:86,\n\
    \                 from /tmp/tmpkl58glb2.cpp:2:\n/usr/include/c++/9/bits/stl_vector.h:1918:5:\
    \ note: candidate: \u2018template<class _Tp, class _Alloc> bool std::operator>(const\
    \ std::vector<_Tp, _Alloc>&, const std::vector<_Tp, _Alloc>&)\u2019\n 1918 | \
    \    operator>(const vector<_Tp, _Alloc>& __x, const vector<_Tp, _Alloc>& __y)\n\
    \      |     ^~~~~~~~\n/usr/include/c++/9/bits/stl_vector.h:1918:5: note:   template\
    \ argument deduction/substitution failed:\n/tmp/tmpkl58glb2.cpp:43:51: note: \
    \  \u2018std::__cxx11::basic_string<char>\u2019 is not derived from \u2018const\
    \ std::vector<_Tp, _Alloc>\u2019\n   43 |     if(date.substr(2,2) < 1 || date.substr(2,2)\
    \ > 12) {\n      |                                                   ^~\nIn file\
    \ included from /usr/include/c++/9/queue:64,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:86,\n\
    \                 from /tmp/tmpkl58glb2.cpp:2:\n/usr/include/c++/9/bits/stl_queue.h:368:5:\
    \ note: candidate: \u2018template<class _Tp, class _Seq> bool std::operator>(const\
    \ std::queue<_Tp, _Seq>&, const std::queue<_Tp, _Seq>&)\u2019\n  368 |     operator>(const\
    \ queue<_Tp, _Seq>& __x, const queue<_Tp, _Seq>& __y)\n      |     ^~~~~~~~\n\
    /usr/include/c++/9/bits/stl_queue.h:368:5: note:   template argument deduction/substitution\
    \ failed:\n/tmp/tmpkl58glb2.cpp:43:51: note:   \u2018std::__cxx11::basic_string<char>\u2019\
    \ is not derived from \u2018const std::queue<_Tp, _Seq>\u2019\n   43 |     if(date.substr(2,2)\
    \ < 1 || date.substr(2,2) > 12) {\n      |                                   \
    \                ^~\nIn file included from /usr/include/c++/9/set:61,\n      \
    \           from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:87,\n     \
    \            from /tmp/tmpkl58glb2.cpp:2:\n/usr/include/c++/9/bits/stl_set.h:1010:5:\
    \ note: candidate: \u2018template<class _Key, class _Compare, class _Alloc> bool\
    \ std::operator>(const std::set<_Key, _Compare, _Alloc>&, const std::set<_Key,\
    \ _Compare, _Alloc>&)\u2019\n 1010 |     operator>(const set<_Key, _Compare, _Alloc>&\
    \ __x,\n      |     ^~~~~~~~\n/usr/include/c++/9/bits/stl_set.h:1010:5: note:\
    \   template argument deduction/substitution failed:\n/tmp/tmpkl58glb2.cpp:43:51:\
    \ note:   \u2018std::__cxx11::basic_string<char>\u2019 is not derived from \u2018\
    const std::set<_Key, _Compare, _Alloc>\u2019\n   43 |     if(date.substr(2,2)\
    \ < 1 || date.substr(2,2) > 12) {\n      |                                   \
    \                ^~\nIn file included from /usr/include/c++/9/set:62,\n      \
    \           from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:87,\n     \
    \            from /tmp/tmpkl58glb2.cpp:2:\n/usr/include/c++/9/bits/stl_multiset.h:995:5:\
    \ note: candidate: \u2018template<class _Key, class _Compare, class _Alloc> bool\
    \ std::operator>(const std::multiset<_Key, _Compare, _Alloc>&, const std::multiset<_Key,\
    \ _Compare, _Alloc>&)\u2019\n  995 |     operator>(const multiset<_Key,_Compare,_Alloc>&\
    \ __x,\n      |     ^~~~~~~~\n/usr/include/c++/9/bits/stl_multiset.h:995:5: note:\
    \   template argument deduction/substitution failed:\n/tmp/tmpkl58glb2.cpp:43:51:\
    \ note:   \u2018std::__cxx11::basic_string<char>\u2019 is not derived from \u2018\
    const std::multiset<_Key, _Compare, _Alloc>\u2019\n   43 |     if(date.substr(2,2)\
    \ < 1 || date.substr(2,2) > 12) {\n      |                                   \
    \                ^~\nIn file included from /usr/include/c++/9/stack:61,\n    \
    \             from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:89,\n   \
    \              from /tmp/tmpkl58glb2.cpp:2:\n/usr/include/c++/9/bits/stl_stack.h:343:5:\
    \ note: candidate: \u2018template<class _Tp, class _Seq> bool std::operator>(const\
    \ std::stack<_Tp, _Seq>&, const std::stack<_Tp, _Seq>&)\u2019\n  343 |     operator>(const\
    \ stack<_Tp, _Seq>& __x, const stack<_Tp, _Seq>& __y)\n      |     ^~~~~~~~\n\
    /usr/include/c++/9/bits/stl_stack.h:343:5: note:   template argument deduction/substitution\
    \ failed:\n/tmp/tmpkl58glb2.cpp:43:51: note:   \u2018std::__cxx11::basic_string<char>\u2019\
    \ is not derived from \u2018const std::stack<_Tp, _Seq>\u2019\n   43 |     if(date.substr(2,2)\
    \ < 1 || date.substr(2,2) > 12) {\n      |                                   \
    \                ^~\nIn file included from /usr/include/c++/9/valarray:603,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:95,\n\
    \                 from /tmp/tmpkl58glb2.cpp:2:\n/usr/include/c++/9/bits/valarray_after.h:420:5:\
    \ note: candidate: \u2018template<class _Dom1, class _Dom2> std::_Expr<std::__detail::_BinClos<std::__greater,\
    \ std::_Expr, std::_Expr, _Dom1, _Dom2>, typename std::__fun<std::__greater, typename\
    \ _Dom1::value_type>::result_type> std::operator>(const std::_Expr<_Dom1, typename\
    \ _Dom1::value_type>&, const std::_Expr<_Dom2, typename _Dom2::value_type>&)\u2019\
    \n  420 |     _DEFINE_EXPR_BINARY_OPERATOR(>, __greater)\n      |     ^~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /usr/include/c++/9/bits/valarray_after.h:420:5: note:   template argument deduction/substitution\
    \ failed:\n/tmp/tmpkl58glb2.cpp:43:51: note:   \u2018std::__cxx11::basic_string<char>\u2019\
    \ is not derived from \u2018const std::_Expr<_Dom1, typename _Dom1::value_type>\u2019\
    \n   43 |     if(date.substr(2,2) < 1 || date.substr(2,2) > 12) {\n      |   \
    \                                                ^~\nIn file included from /usr/include/c++/9/valarray:603,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:95,\n\
    \                 from /tmp/tmpkl58glb2.cpp:2:\n/usr/include/c++/9/bits/valarray_after.h:420:5:\
    \ note: candidate: \u2018template<class _Dom> std::_Expr<std::__detail::_BinClos<std::__greater,\
    \ std::_Expr, std::_Constant, _Dom, typename _Dom::value_type>, typename std::__fun<std::__greater,\
    \ typename _Dom1::value_type>::result_type> std::operator>(const std::_Expr<_Dom1,\
    \ typename _Dom1::value_type>&, const typename _Dom::value_type&)\u2019\n  420\
    \ |     _DEFINE_EXPR_BINARY_OPERATOR(>, __greater)\n      |     ^~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /usr/include/c++/9/bits/valarray_after.h:420:5: note:   template argument deduction/substitution\
    \ failed:\n/tmp/tmpkl58glb2.cpp:43:51: note:   \u2018std::__cxx11::basic_string<char>\u2019\
    \ is not derived from \u2018const std::_Expr<_Dom1, typename _Dom1::value_type>\u2019\
    \n   43 |     if(date.substr(2,2) < 1 || date.substr(2,2) > 12) {\n      |   \
    \                                                ^~\nIn file included from /usr/include/c++/9/valarray:603,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:95,\n\
    \                 from /tmp/tmpkl58glb2.cpp:2:\n/usr/include/c++/9/bits/valarray_after.h:420:5:\
    \ note: candidate: \u2018template<class _Dom> std::_Expr<std::__detail::_BinClos<std::__greater,\
    \ std::_Constant, std::_Expr, typename _Dom::value_type, _Dom>, typename std::__fun<std::__greater,\
    \ typename _Dom1::value_type>::result_type> std::operator>(const typename _Dom::value_type&,\
    \ const std::_Expr<_Dom1, typename _Dom1::value_type>&)\u2019\n  420 |     _DEFINE_EXPR_BINARY_OPERATOR(>,\
    \ __greater)\n      |     ^~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/usr/include/c++/9/bits/valarray_after.h:420:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmpkl58glb2.cpp:43:51:\
    \ note:   mismatched types \u2018const std::_Expr<_Dom1, typename _Dom1::value_type>\u2019\
    \ and \u2018int\u2019\n   43 |     if(date.substr(2,2) < 1 || date.substr(2,2)\
    \ > 12) {\n      |                                                   ^~\nIn file\
    \ included from /usr/include/c++/9/valarray:603,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:95,\n\
    \                 from /tmp/tmpkl58glb2.cpp:2:\n/usr/include/c++/9/bits/valarray_after.h:420:5:\
    \ note: candidate: \u2018template<class _Dom> std::_Expr<std::__detail::_BinClos<std::__greater,\
    \ std::_Expr, std::_ValArray, _Dom, typename _Dom::value_type>, typename std::__fun<std::__greater,\
    \ typename _Dom1::value_type>::result_type> std::operator>(const std::_Expr<_Dom1,\
    \ typename _Dom1::value_type>&, const std::valarray<typename _Dom::value_type>&)\u2019\
    \n  420 |     _DEFINE_EXPR_BINARY_OPERATOR(>, __greater)\n      |     ^~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /usr/include/c++/9/bits/valarray_after.h:420:5: note:   template argument deduction/substitution\
    \ failed:\n/tmp/tmpkl58glb2.cpp:43:51: note:   \u2018std::__cxx11::basic_string<char>\u2019\
    \ is not derived from \u2018const std::_Expr<_Dom1, typename _Dom1::value_type>\u2019\
    \n   43 |     if(date.substr(2,2) < 1 || date.substr(2,2) > 12) {\n      |   \
    \                                                ^~\nIn file included from /usr/include/c++/9/valarray:603,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:95,\n\
    \                 from /tmp/tmpkl58glb2.cpp:2:\n/usr/include/c++/9/bits/valarray_after.h:420:5:\
    \ note: candidate: \u2018template<class _Dom> std::_Expr<std::__detail::_BinClos<std::__greater,\
    \ std::_ValArray, std::_Expr, typename _Dom::value_type, _Dom>, typename std::__fun<std::__greater,\
    \ typename _Dom1::value_type>::result_type> std::operator>(const std::valarray<typename\
    \ _Dom::value_type>&, const std::_Expr<_Dom1, typename _Dom1::value_type>&)\u2019\
    \n  420 |     _DEFINE_EXPR_BINARY_OPERATOR(>, __greater)\n      |     ^~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /usr/include/c++/9/bits/valarray_after.h:420:5: note:   template argument deduction/substitution\
    \ failed:\n/tmp/tmpkl58glb2.cpp:43:51: note:   mismatched types \u2018const std::_Expr<_Dom1,\
    \ typename _Dom1::value_type>\u2019 and \u2018int\u2019\n   43 |     if(date.substr(2,2)\
    \ < 1 || date.substr(2,2) > 12) {\n      |                                   \
    \                ^~\nIn file included from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:95,\n\
    \                 from /tmp/tmpkl58glb2.cpp:2:\n/usr/include/c++/9/valarray:1200:1:\
    \ note: candidate: \u2018template<class _Tp> std::_Expr<std::__detail::_BinClos<std::__greater,\
    \ std::_ValArray, std::_ValArray, _Tp, _Tp>, typename std::__fun<std::__greater,\
    \ _Tp>::result_type> std::operator>(const std::valarray<_Tp>&, const std::valarray<_Tp>&)\u2019\
    \n 1200 | _DEFINE_BINARY_OPERATOR(>, __greater)\n      | ^~~~~~~~~~~~~~~~~~~~~~~\n\
    /usr/include/c++/9/valarray:1200:1: note:   template argument deduction/substitution\
    \ failed:\n/tmp/tmpkl58glb2.cpp:43:51: note:   \u2018std::__cxx11::basic_string<char>\u2019\
    \ is not derived from \u2018const std::valarray<_Tp>\u2019\n   43 |     if(date.substr(2,2)\
    \ < 1 || date.substr(2,2) > 12) {\n      |                                   \
    \                ^~\nIn file included from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:95,\n\
    \                 from /tmp/tmpkl58glb2.cpp:2:\n/usr/include/c++/9/valarray:1200:1:\
    \ note: candidate: \u2018template<class _Tp> std::_Expr<std::__detail::_BinClos<std::__greater,\
    \ std::_ValArray, std::_Constant, _Tp, _Tp>, typename std::__fun<std::__greater,\
    \ _Tp>::result_type> std::operator>(const std::valarray<_Tp>&, const typename\
    \ std::valarray<_Tp>::value_type&)\u2019\n 1200 | _DEFINE_BINARY_OPERATOR(>, __greater)\n\
    \      | ^~~~~~~~~~~~~~~~~~~~~~~\n/usr/include/c++/9/valarray:1200:1: note:  \
    \ template argument deduction/substitution failed:\n/tmp/tmpkl58glb2.cpp:43:51:\
    \ note:   \u2018std::__cxx11::basic_string<char>\u2019 is not derived from \u2018\
    const std::valarray<_Tp>\u2019\n   43 |     if(date.substr(2,2) < 1 || date.substr(2,2)\
    \ > 12) {\n      |                                                   ^~\nIn file\
    \ included from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:95,\n      \
    \           from /tmp/tmpkl58glb2.cpp:2:\n/usr/include/c++/9/valarray:1200:1:\
    \ note: candidate: \u2018template<class _Tp> std::_Expr<std::__detail::_BinClos<std::__greater,\
    \ std::_Constant, std::_ValArray, _Tp, _Tp>, typename std::__fun<std::__greater,\
    \ _Tp>::result_type> std::operator>(const typename std::valarray<_Tp>::value_type&,\
    \ const std::valarray<_Tp>&)\u2019\n 1200 | _DEFINE_BINARY_OPERATOR(>, __greater)\n\
    \      | ^~~~~~~~~~~~~~~~~~~~~~~\n/usr/include/c++/9/valarray:1200:1: note:  \
    \ template argument deduction/substitution failed:\n/tmp/tmpkl58glb2.cpp:43:51:\
    \ note:   mismatched types \u2018const std::valarray<_Tp>\u2019 and \u2018int\u2019\
    \n   43 |     if(date.substr(2,2) < 1 || date.substr(2,2) > 12) {\n      |   \
    \                                                ^~\nIn file included from /usr/include/c++/9/forward_list:38,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:104,\n\
    \                 from /tmp/tmpkl58glb2.cpp:2:\n/usr/include/c++/9/bits/forward_list.h:1458:5:\
    \ note: candidate: \u2018template<class _Tp, class _Alloc> bool std::operator>(const\
    \ std::forward_list<_Tp, _Alloc>&, const std::forward_list<_Tp, _Alloc>&)\u2019\
    \n 1458 |     operator>(const forward_list<_Tp, _Alloc>& __lx,\n      |     ^~~~~~~~\n\
    /usr/include/c++/9/bits/forward_list.h:1458:5: note:   template argument deduction/substitution\
    \ failed:\n/tmp/tmpkl58glb2.cpp:43:51: note:   \u2018std::__cxx11::basic_string<char>\u2019\
    \ is not derived from \u2018const std::forward_list<_Tp, _Alloc>\u2019\n   43\
    \ |     if(date.substr(2,2) < 1 || date.substr(2,2) > 12) {\n      |         \
    \                                          ^~\nIn file included from /usr/include/c++/9/future:39,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:105,\n\
    \                 from /tmp/tmpkl58glb2.cpp:2:\n/usr/include/c++/9/thread:302:3:\
    \ note: candidate: \u2018bool std::operator>(std::thread::id, std::thread::id)\u2019\
    \n  302 |   operator>(thread::id __x, thread::id __y) noexcept\n      |   ^~~~~~~~\n\
    /usr/include/c++/9/thread:302:24: note:   no known conversion for argument 1 from\
    \ \u2018std::__cxx11::basic_string<char>\u2019 to \u2018std::thread::id\u2019\n\
    \  302 |   operator>(thread::id __x, thread::id __y) noexcept\n      |       \
    \      ~~~~~~~~~~~^~~\nIn file included from /usr/include/c++/9/bits/stl_algobase.h:67,\n\
    \                 from /usr/include/c++/9/bits/char_traits.h:39,\n           \
    \      from /usr/include/c++/9/ios:40,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmpkl58glb2.cpp:2:\n/usr/include/c++/9/bits/stl_iterator.h:926:5: note:\
    \ candidate: \u2018template<class _IteratorL, class _IteratorR, class _Container>\
    \ bool __gnu_cxx::operator>(const __gnu_cxx::__normal_iterator<_IteratorL, _Container>&,\
    \ const __gnu_cxx::__normal_iterator<_IteratorR, _Container>&)\u2019\n  926 |\
    \     operator>(const __normal_iterator<_IteratorL, _Container>& __lhs,\n    \
    \  |     ^~~~~~~~\n/usr/include/c++/9/bits/stl_iterator.h:926:5: note:   template\
    \ argument deduction/substitution failed:\n/tmp/tmpkl58glb2.cpp:43:51: note: \
    \  \u2018std::__cxx11::basic_string<char>\u2019 is not derived from \u2018const\
    \ __gnu_cxx::__normal_iterator<_IteratorL, _Container>\u2019\n   43 |     if(date.substr(2,2)\
    \ < 1 || date.substr(2,2) > 12) {\n      |                                   \
    \                ^~\nIn file included from /usr/include/c++/9/bits/stl_algobase.h:67,\n\
    \                 from /usr/include/c++/9/bits/char_traits.h:39,\n           \
    \      from /usr/include/c++/9/ios:40,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmpkl58glb2.cpp:2:\n/usr/include/c++/9/bits/stl_iterator.h:933:5: note:\
    \ candidate: \u2018template<class _Iterator, class _Container> bool __gnu_cxx::operator>(const\
    \ __gnu_cxx::__normal_iterator<_Iterator, _Container>&, const __gnu_cxx::__normal_iterator<_Iterator,\
    \ _Container>&)\u2019\n  933 |     operator>(const __normal_iterator<_Iterator,\
    \ _Container>& __lhs,\n      |     ^~~~~~~~\n/usr/include/c++/9/bits/stl_iterator.h:933:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmpkl58glb2.cpp:43:51:\
    \ note:   \u2018std::__cxx11::basic_string<char>\u2019 is not derived from \u2018\
    const __gnu_cxx::__normal_iterator<_Iterator, _Container>\u2019\n   43 |     if(date.substr(2,2)\
    \ < 1 || date.substr(2,2) > 12) {\n      |                                   \
    \                ^~\n/tmp/tmpkl58glb2.cpp:47:25: error: no match for \u2018operator<\u2019\
    \ (operand types are \u2018std::__cxx11::basic_string<char>\u2019 and \u2018int\u2019\
    )\n   47 |     if(date.substr(4,2) < 1 || date.substr(4,2) > 12) {\n      |  \
    \      ~~~~~~~~~~~~~~~~ ^ ~\n      |                   |       |\n      |    \
    \               |       int\n      |                   std::__cxx11::basic_string<char>\n\
    In file included from /usr/include/c++/9/regex:62,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:110,\n\
    \                 from /tmp/tmpkl58glb2.cpp:2:\n/usr/include/c++/9/bits/regex.h:1048:5:\
    \ note: candidate: \u2018template<class _BiIter> bool std::__cxx11::operator<(const\
    \ std::__cxx11::sub_match<_BiIter>&, const std::__cxx11::sub_match<_BiIter>&)\u2019\
    \n 1048 |     operator<(const sub_match<_BiIter>& __lhs, const sub_match<_BiIter>&\
    \ __rhs)\n      |     ^~~~~~~~\n/usr/include/c++/9/bits/regex.h:1048:5: note:\
    \   template argument deduction/substitution failed:\n/tmp/tmpkl58glb2.cpp:47:27:\
    \ note:   \u2018std::__cxx11::basic_string<char>\u2019 is not derived from \u2018\
    const std::__cxx11::sub_match<_BiIter>\u2019\n   47 |     if(date.substr(4,2)\
    \ < 1 || date.substr(4,2) > 12) {\n      |                           ^\nIn file\
    \ included from /usr/include/c++/9/regex:62,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:110,\n\
    \                 from /tmp/tmpkl58glb2.cpp:2:\n/usr/include/c++/9/bits/regex.h:1124:5:\
    \ note: candidate: \u2018template<class _Bi_iter, class _Ch_traits, class _Ch_alloc>\
    \ bool std::__cxx11::operator<(std::__cxx11::__sub_match_string<_Bi_iter, _Ch_traits,\
    \ _Ch_alloc>&, const std::__cxx11::sub_match<_BiIter>&)\u2019\n 1124 |     operator<(const\
    \ __sub_match_string<_Bi_iter, _Ch_traits, _Ch_alloc>& __lhs,\n      |     ^~~~~~~~\n\
    /usr/include/c++/9/bits/regex.h:1124:5: note:   template argument deduction/substitution\
    \ failed:\n/tmp/tmpkl58glb2.cpp:47:27: note:   mismatched types \u2018const std::__cxx11::sub_match<_BiIter>\u2019\
    \ and \u2018int\u2019\n   47 |     if(date.substr(4,2) < 1 || date.substr(4,2)\
    \ > 12) {\n      |                           ^\nIn file included from /usr/include/c++/9/regex:62,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:110,\n\
    \                 from /tmp/tmpkl58glb2.cpp:2:\n/usr/include/c++/9/bits/regex.h:1198:5:\
    \ note: candidate: \u2018template<class _Bi_iter, class _Ch_traits, class _Ch_alloc>\
    \ bool std::__cxx11::operator<(const std::__cxx11::sub_match<_BiIter>&, std::__cxx11::__sub_match_string<_Bi_iter,\
    \ _Ch_traits, _Ch_alloc>&)\u2019\n 1198 |     operator<(const sub_match<_Bi_iter>&\
    \ __lhs,\n      |     ^~~~~~~~\n/usr/include/c++/9/bits/regex.h:1198:5: note:\
    \   template argument deduction/substitution failed:\n/tmp/tmpkl58glb2.cpp:47:27:\
    \ note:   \u2018std::__cxx11::basic_string<char>\u2019 is not derived from \u2018\
    const std::__cxx11::sub_match<_BiIter>\u2019\n   47 |     if(date.substr(4,2)\
    \ < 1 || date.substr(4,2) > 12) {\n      |                           ^\nIn file\
    \ included from /usr/include/c++/9/regex:62,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:110,\n\
    \                 from /tmp/tmpkl58glb2.cpp:2:\n/usr/include/c++/9/bits/regex.h:1272:5:\
    \ note: candidate: \u2018template<class _Bi_iter> bool std::__cxx11::operator<(const\
    \ typename std::iterator_traits<_Iter>::value_type*, const std::__cxx11::sub_match<_BiIter>&)\u2019\
    \n 1272 |     operator<(typename iterator_traits<_Bi_iter>::value_type const*\
    \ __lhs,\n      |     ^~~~~~~~\n/usr/include/c++/9/bits/regex.h:1272:5: note:\
    \   template argument deduction/substitution failed:\n/tmp/tmpkl58glb2.cpp:47:27:\
    \ note:   mismatched types \u2018const std::__cxx11::sub_match<_BiIter>\u2019\
    \ and \u2018int\u2019\n   47 |     if(date.substr(4,2) < 1 || date.substr(4,2)\
    \ > 12) {\n      |                           ^\nIn file included from /usr/include/c++/9/regex:62,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:110,\n\
    \                 from /tmp/tmpkl58glb2.cpp:2:\n/usr/include/c++/9/bits/regex.h:1346:5:\
    \ note: candidate: \u2018template<class _Bi_iter> bool std::__cxx11::operator<(const\
    \ std::__cxx11::sub_match<_BiIter>&, const typename std::iterator_traits<_Iter>::value_type*)\u2019\
    \n 1346 |     operator<(const sub_match<_Bi_iter>& __lhs,\n      |     ^~~~~~~~\n\
    /usr/include/c++/9/bits/regex.h:1346:5: note:   template argument deduction/substitution\
    \ failed:\n/tmp/tmpkl58glb2.cpp:47:27: note:   \u2018std::__cxx11::basic_string<char>\u2019\
    \ is not derived from \u2018const std::__cxx11::sub_match<_BiIter>\u2019\n   47\
    \ |     if(date.substr(4,2) < 1 || date.substr(4,2) > 12) {\n      |         \
    \                  ^\nIn file included from /usr/include/c++/9/regex:62,\n   \
    \              from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:110,\n \
    \                from /tmp/tmpkl58glb2.cpp:2:\n/usr/include/c++/9/bits/regex.h:1421:5:\
    \ note: candidate: \u2018template<class _Bi_iter> bool std::__cxx11::operator<(const\
    \ typename std::iterator_traits<_Iter>::value_type&, const std::__cxx11::sub_match<_BiIter>&)\u2019\
    \n 1421 |     operator<(typename iterator_traits<_Bi_iter>::value_type const&\
    \ __lhs,\n      |     ^~~~~~~~\n/usr/include/c++/9/bits/regex.h:1421:5: note:\
    \   template argument deduction/substitution failed:\n/tmp/tmpkl58glb2.cpp:47:27:\
    \ note:   mismatched types \u2018const std::__cxx11::sub_match<_BiIter>\u2019\
    \ and \u2018int\u2019\n   47 |     if(date.substr(4,2) < 1 || date.substr(4,2)\
    \ > 12) {\n      |                           ^\nIn file included from /usr/include/c++/9/regex:62,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:110,\n\
    \                 from /tmp/tmpkl58glb2.cpp:2:\n/usr/include/c++/9/bits/regex.h:1499:5:\
    \ note: candidate: \u2018template<class _Bi_iter> bool std::__cxx11::operator<(const\
    \ std::__cxx11::sub_match<_BiIter>&, const typename std::iterator_traits<_Iter>::value_type&)\u2019\
    \n 1499 |     operator<(const sub_match<_Bi_iter>& __lhs,\n      |     ^~~~~~~~\n\
    /usr/include/c++/9/bits/regex.h:1499:5: note:   template argument deduction/substitution\
    \ failed:\n/tmp/tmpkl58glb2.cpp:47:27: note:   \u2018std::__cxx11::basic_string<char>\u2019\
    \ is not derived from \u2018const std::__cxx11::sub_match<_BiIter>\u2019\n   47\
    \ |     if(date.substr(4,2) < 1 || date.substr(4,2) > 12) {\n      |         \
    \                  ^\nIn file included from /usr/include/c++/9/bits/stl_algobase.h:64,\n\
    \                 from /usr/include/c++/9/bits/char_traits.h:39,\n           \
    \      from /usr/include/c++/9/ios:40,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmpkl58glb2.cpp:2:\n/usr/include/c++/9/bits/stl_pair.h:454:5: note: candidate:\
    \ \u2018template<class _T1, class _T2> constexpr bool std::operator<(const std::pair<_T1,\
    \ _T2>&, const std::pair<_T1, _T2>&)\u2019\n  454 |     operator<(const pair<_T1,\
    \ _T2>& __x, const pair<_T1, _T2>& __y)\n      |     ^~~~~~~~\n/usr/include/c++/9/bits/stl_pair.h:454:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmpkl58glb2.cpp:47:27:\
    \ note:   \u2018std::__cxx11::basic_string<char>\u2019 is not derived from \u2018\
    const std::pair<_T1, _T2>\u2019\n   47 |     if(date.substr(4,2) < 1 || date.substr(4,2)\
    \ > 12) {\n      |                           ^\nIn file included from /usr/include/c++/9/bits/stl_algobase.h:67,\n\
    \                 from /usr/include/c++/9/bits/char_traits.h:39,\n           \
    \      from /usr/include/c++/9/ios:40,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmpkl58glb2.cpp:2:\n/usr/include/c++/9/bits/stl_iterator.h:331:5: note:\
    \ candidate: \u2018template<class _Iterator> bool std::operator<(const std::reverse_iterator<_Iterator>&,\
    \ const std::reverse_iterator<_Iterator>&)\u2019\n  331 |     operator<(const\
    \ reverse_iterator<_Iterator>& __x,\n      |     ^~~~~~~~\n/usr/include/c++/9/bits/stl_iterator.h:331:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmpkl58glb2.cpp:47:27:\
    \ note:   \u2018std::__cxx11::basic_string<char>\u2019 is not derived from \u2018\
    const std::reverse_iterator<_Iterator>\u2019\n   47 |     if(date.substr(4,2)\
    \ < 1 || date.substr(4,2) > 12) {\n      |                           ^\nIn file\
    \ included from /usr/include/c++/9/bits/stl_algobase.h:67,\n                 from\
    \ /usr/include/c++/9/bits/char_traits.h:39,\n                 from /usr/include/c++/9/ios:40,\n\
    \                 from /usr/include/c++/9/istream:38,\n                 from /usr/include/c++/9/sstream:38,\n\
    \                 from /usr/include/c++/9/complex:45,\n                 from /usr/include/c++/9/ccomplex:39,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n\
    \                 from /tmp/tmpkl58glb2.cpp:2:\n/usr/include/c++/9/bits/stl_iterator.h:369:5:\
    \ note: candidate: \u2018template<class _IteratorL, class _IteratorR> bool std::operator<(const\
    \ std::reverse_iterator<_Iterator>&, const std::reverse_iterator<_IteratorR>&)\u2019\
    \n  369 |     operator<(const reverse_iterator<_IteratorL>& __x,\n      |    \
    \ ^~~~~~~~\n/usr/include/c++/9/bits/stl_iterator.h:369:5: note:   template argument\
    \ deduction/substitution failed:\n/tmp/tmpkl58glb2.cpp:47:27: note:   \u2018std::__cxx11::basic_string<char>\u2019\
    \ is not derived from \u2018const std::reverse_iterator<_Iterator>\u2019\n   47\
    \ |     if(date.substr(4,2) < 1 || date.substr(4,2) > 12) {\n      |         \
    \                  ^\nIn file included from /usr/include/c++/9/bits/stl_algobase.h:67,\n\
    \                 from /usr/include/c++/9/bits/char_traits.h:39,\n           \
    \      from /usr/include/c++/9/ios:40,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmpkl58glb2.cpp:2:\n/usr/include/c++/9/bits/stl_iterator.h:1160:5: note:\
    \ candidate: \u2018template<class _IteratorL, class _IteratorR> bool std::operator<(const\
    \ std::move_iterator<_IteratorL>&, const std::move_iterator<_IteratorR>&)\u2019\
    \n 1160 |     operator<(const move_iterator<_IteratorL>& __x,\n      |     ^~~~~~~~\n\
    /usr/include/c++/9/bits/stl_iterator.h:1160:5: note:   template argument deduction/substitution\
    \ failed:\n/tmp/tmpkl58glb2.cpp:47:27: note:   \u2018std::__cxx11::basic_string<char>\u2019\
    \ is not derived from \u2018const std::move_iterator<_IteratorL>\u2019\n   47\
    \ |     if(date.substr(4,2) < 1 || date.substr(4,2) > 12) {\n      |         \
    \                  ^\nIn file included from /usr/include/c++/9/bits/stl_algobase.h:67,\n\
    \                 from /usr/include/c++/9/bits/char_traits.h:39,\n           \
    \      from /usr/include/c++/9/ios:40,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmpkl58glb2.cpp:2:\n/usr/include/c++/9/bits/stl_iterator.h:1166:5: note:\
    \ candidate: \u2018template<class _Iterator> bool std::operator<(const std::move_iterator<_IteratorL>&,\
    \ const std::move_iterator<_IteratorL>&)\u2019\n 1166 |     operator<(const move_iterator<_Iterator>&\
    \ __x,\n      |     ^~~~~~~~\n/usr/include/c++/9/bits/stl_iterator.h:1166:5: note:\
    \   template argument deduction/substitution failed:\n/tmp/tmpkl58glb2.cpp:47:27:\
    \ note:   \u2018std::__cxx11::basic_string<char>\u2019 is not derived from \u2018\
    const std::move_iterator<_IteratorL>\u2019\n   47 |     if(date.substr(4,2) <\
    \ 1 || date.substr(4,2) > 12) {\n      |                           ^\nIn file\
    \ included from /usr/include/c++/9/string:55,\n                 from /usr/include/c++/9/bits/locale_classes.h:40,\n\
    \                 from /usr/include/c++/9/bits/ios_base.h:41,\n              \
    \   from /usr/include/c++/9/ios:42,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmpkl58glb2.cpp:2:\n/usr/include/c++/9/bits/basic_string.h:6229:5: note:\
    \ candidate: \u2018template<class _CharT, class _Traits, class _Alloc> bool std::operator<(const\
    \ std::__cxx11::basic_string<_CharT, _Traits, _Alloc>&, const std::__cxx11::basic_string<_CharT,\
    \ _Traits, _Alloc>&)\u2019\n 6229 |     operator<(const basic_string<_CharT, _Traits,\
    \ _Alloc>& __lhs,\n      |     ^~~~~~~~\n/usr/include/c++/9/bits/basic_string.h:6229:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmpkl58glb2.cpp:47:27:\
    \ note:   mismatched types \u2018const std::__cxx11::basic_string<_CharT, _Traits,\
    \ _Alloc>\u2019 and \u2018int\u2019\n   47 |     if(date.substr(4,2) < 1 || date.substr(4,2)\
    \ > 12) {\n      |                           ^\nIn file included from /usr/include/c++/9/string:55,\n\
    \                 from /usr/include/c++/9/bits/locale_classes.h:40,\n        \
    \         from /usr/include/c++/9/bits/ios_base.h:41,\n                 from /usr/include/c++/9/ios:42,\n\
    \                 from /usr/include/c++/9/istream:38,\n                 from /usr/include/c++/9/sstream:38,\n\
    \                 from /usr/include/c++/9/complex:45,\n                 from /usr/include/c++/9/ccomplex:39,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n\
    \                 from /tmp/tmpkl58glb2.cpp:2:\n/usr/include/c++/9/bits/basic_string.h:6242:5:\
    \ note: candidate: \u2018template<class _CharT, class _Traits, class _Alloc> bool\
    \ std::operator<(const std::__cxx11::basic_string<_CharT, _Traits, _Alloc>&, const\
    \ _CharT*)\u2019\n 6242 |     operator<(const basic_string<_CharT, _Traits, _Alloc>&\
    \ __lhs,\n      |     ^~~~~~~~\n/usr/include/c++/9/bits/basic_string.h:6242:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmpkl58glb2.cpp:47:27:\
    \ note:   mismatched types \u2018const _CharT*\u2019 and \u2018int\u2019\n   47\
    \ |     if(date.substr(4,2) < 1 || date.substr(4,2) > 12) {\n      |         \
    \                  ^\nIn file included from /usr/include/c++/9/string:55,\n  \
    \               from /usr/include/c++/9/bits/locale_classes.h:40,\n          \
    \       from /usr/include/c++/9/bits/ios_base.h:41,\n                 from /usr/include/c++/9/ios:42,\n\
    \                 from /usr/include/c++/9/istream:38,\n                 from /usr/include/c++/9/sstream:38,\n\
    \                 from /usr/include/c++/9/complex:45,\n                 from /usr/include/c++/9/ccomplex:39,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n\
    \                 from /tmp/tmpkl58glb2.cpp:2:\n/usr/include/c++/9/bits/basic_string.h:6254:5:\
    \ note: candidate: \u2018template<class _CharT, class _Traits, class _Alloc> bool\
    \ std::operator<(const _CharT*, const std::__cxx11::basic_string<_CharT, _Traits,\
    \ _Alloc>&)\u2019\n 6254 |     operator<(const _CharT* __lhs,\n      |     ^~~~~~~~\n\
    /usr/include/c++/9/bits/basic_string.h:6254:5: note:   template argument deduction/substitution\
    \ failed:\n/tmp/tmpkl58glb2.cpp:47:27: note:   mismatched types \u2018const _CharT*\u2019\
    \ and \u2018std::__cxx11::basic_string<char>\u2019\n   47 |     if(date.substr(4,2)\
    \ < 1 || date.substr(4,2) > 12) {\n      |                           ^\nIn file\
    \ included from /usr/include/c++/9/bits/ios_base.h:46,\n                 from\
    \ /usr/include/c++/9/ios:42,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmpkl58glb2.cpp:2:\n/usr/include/c++/9/system_error:208:3: note: candidate:\
    \ \u2018bool std::operator<(const std::error_code&, const std::error_code&)\u2019\
    \n  208 |   operator<(const error_code& __lhs, const error_code& __rhs) noexcept\n\
    \      |   ^~~~~~~~\n/usr/include/c++/9/system_error:208:31: note:   no known\
    \ conversion for argument 1 from \u2018std::__cxx11::basic_string<char>\u2019\
    \ to \u2018const std::error_code&\u2019\n  208 |   operator<(const error_code&\
    \ __lhs, const error_code& __rhs) noexcept\n      |             ~~~~~~~~~~~~~~~~~~^~~~~\n\
    /usr/include/c++/9/system_error:282:3: note: candidate: \u2018bool std::operator<(const\
    \ std::error_condition&, const std::error_condition&)\u2019\n  282 |   operator<(const\
    \ error_condition& __lhs,\n      |   ^~~~~~~~\n/usr/include/c++/9/system_error:282:36:\
    \ note:   no known conversion for argument 1 from \u2018std::__cxx11::basic_string<char>\u2019\
    \ to \u2018const std::error_condition&\u2019\n  282 |   operator<(const error_condition&\
    \ __lhs,\n      |             ~~~~~~~~~~~~~~~~~~~~~~~^~~~~\nIn file included from\
    \ /usr/include/c++/9/deque:67,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:68,\n\
    \                 from /tmp/tmpkl58glb2.cpp:2:\n/usr/include/c++/9/bits/stl_deque.h:312:5:\
    \ note: candidate: \u2018template<class _Tp, class _Ref, class _Ptr> bool std::operator<(const\
    \ std::_Deque_iterator<_Tp, _Ref, _Ptr>&, const std::_Deque_iterator<_Tp, _Ref,\
    \ _Ptr>&)\u2019\n  312 |     operator<(const _Deque_iterator<_Tp, _Ref, _Ptr>&\
    \ __x,\n      |     ^~~~~~~~\n/usr/include/c++/9/bits/stl_deque.h:312:5: note:\
    \   template argument deduction/substitution failed:\n/tmp/tmpkl58glb2.cpp:47:27:\
    \ note:   \u2018std::__cxx11::basic_string<char>\u2019 is not derived from \u2018\
    const std::_Deque_iterator<_Tp, _Ref, _Ptr>\u2019\n   47 |     if(date.substr(4,2)\
    \ < 1 || date.substr(4,2) > 12) {\n      |                           ^\nIn file\
    \ included from /usr/include/c++/9/deque:67,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:68,\n\
    \                 from /tmp/tmpkl58glb2.cpp:2:\n/usr/include/c++/9/bits/stl_deque.h:320:5:\
    \ note: candidate: \u2018template<class _Tp, class _RefL, class _PtrL, class _RefR,\
    \ class _PtrR> bool std::operator<(const std::_Deque_iterator<_Tp, _Ref, _Ptr>&,\
    \ const std::_Deque_iterator<_Tp, _RefR, _PtrR>&)\u2019\n  320 |     operator<(const\
    \ _Deque_iterator<_Tp, _RefL, _PtrL>& __x,\n      |     ^~~~~~~~\n/usr/include/c++/9/bits/stl_deque.h:320:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmpkl58glb2.cpp:47:27:\
    \ note:   \u2018std::__cxx11::basic_string<char>\u2019 is not derived from \u2018\
    const std::_Deque_iterator<_Tp, _Ref, _Ptr>\u2019\n   47 |     if(date.substr(4,2)\
    \ < 1 || date.substr(4,2) > 12) {\n      |                           ^\nIn file\
    \ included from /usr/include/c++/9/deque:67,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:68,\n\
    \                 from /tmp/tmpkl58glb2.cpp:2:\n/usr/include/c++/9/bits/stl_deque.h:2330:5:\
    \ note: candidate: \u2018template<class _Tp, class _Alloc> bool std::operator<(const\
    \ std::deque<_Tp, _Alloc>&, const std::deque<_Tp, _Alloc>&)\u2019\n 2330 |   \
    \  operator<(const deque<_Tp, _Alloc>& __x,\n      |     ^~~~~~~~\n/usr/include/c++/9/bits/stl_deque.h:2330:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmpkl58glb2.cpp:47:27:\
    \ note:   \u2018std::__cxx11::basic_string<char>\u2019 is not derived from \u2018\
    const std::deque<_Tp, _Alloc>\u2019\n   47 |     if(date.substr(4,2) < 1 || date.substr(4,2)\
    \ > 12) {\n      |                           ^\nIn file included from /usr/include/c++/9/tuple:39,\n\
    \                 from /usr/include/c++/9/functional:54,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:71,\n                 from\
    \ /tmp/tmpkl58glb2.cpp:2:\n/usr/include/c++/9/array:262:5: note: candidate: \u2018\
    template<class _Tp, long unsigned int _Nm> bool std::operator<(const std::array<_Tp,\
    \ _Nm>&, const std::array<_Tp, _Nm>&)\u2019\n  262 |     operator<(const array<_Tp,\
    \ _Nm>& __a, const array<_Tp, _Nm>& __b)\n      |     ^~~~~~~~\n/usr/include/c++/9/array:262:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmpkl58glb2.cpp:47:27:\
    \ note:   \u2018std::__cxx11::basic_string<char>\u2019 is not derived from \u2018\
    const std::array<_Tp, _Nm>\u2019\n   47 |     if(date.substr(4,2) < 1 || date.substr(4,2)\
    \ > 12) {\n      |                           ^\nIn file included from /usr/include/c++/9/functional:54,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:71,\n\
    \                 from /tmp/tmpkl58glb2.cpp:2:\n/usr/include/c++/9/tuple:1432:5:\
    \ note: candidate: \u2018template<class ... _TElements, class ... _UElements>\
    \ constexpr bool std::operator<(const std::tuple<_Tps ...>&, const std::tuple<_Elements\
    \ ...>&)\u2019\n 1432 |     operator<(const tuple<_TElements...>& __t,\n     \
    \ |     ^~~~~~~~\n/usr/include/c++/9/tuple:1432:5: note:   template argument deduction/substitution\
    \ failed:\n/tmp/tmpkl58glb2.cpp:47:27: note:   \u2018std::__cxx11::basic_string<char>\u2019\
    \ is not derived from \u2018const std::tuple<_Tps ...>\u2019\n   47 |     if(date.substr(4,2)\
    \ < 1 || date.substr(4,2) > 12) {\n      |                           ^\nIn file\
    \ included from /usr/include/c++/9/bits/locale_conv.h:41,\n                 from\
    \ /usr/include/c++/9/locale:43,\n                 from /usr/include/c++/9/iomanip:43,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:72,\n\
    \                 from /tmp/tmpkl58glb2.cpp:2:\n/usr/include/c++/9/bits/unique_ptr.h:749:5:\
    \ note: candidate: \u2018template<class _Tp, class _Dp, class _Up, class _Ep>\
    \ bool std::operator<(const std::unique_ptr<_Tp, _Dp>&, const std::unique_ptr<_Up,\
    \ _Ep>&)\u2019\n  749 |     operator<(const unique_ptr<_Tp, _Dp>& __x,\n     \
    \ |     ^~~~~~~~\n/usr/include/c++/9/bits/unique_ptr.h:749:5: note:   template\
    \ argument deduction/substitution failed:\n/tmp/tmpkl58glb2.cpp:47:27: note: \
    \  \u2018std::__cxx11::basic_string<char>\u2019 is not derived from \u2018const\
    \ std::unique_ptr<_Tp, _Dp>\u2019\n   47 |     if(date.substr(4,2) < 1 || date.substr(4,2)\
    \ > 12) {\n      |                           ^\nIn file included from /usr/include/c++/9/bits/locale_conv.h:41,\n\
    \                 from /usr/include/c++/9/locale:43,\n                 from /usr/include/c++/9/iomanip:43,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:72,\n\
    \                 from /tmp/tmpkl58glb2.cpp:2:\n/usr/include/c++/9/bits/unique_ptr.h:760:5:\
    \ note: candidate: \u2018template<class _Tp, class _Dp> bool std::operator<(const\
    \ std::unique_ptr<_Tp, _Dp>&, std::nullptr_t)\u2019\n  760 |     operator<(const\
    \ unique_ptr<_Tp, _Dp>& __x, nullptr_t)\n      |     ^~~~~~~~\n/usr/include/c++/9/bits/unique_ptr.h:760:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmpkl58glb2.cpp:47:27:\
    \ note:   \u2018std::__cxx11::basic_string<char>\u2019 is not derived from \u2018\
    const std::unique_ptr<_Tp, _Dp>\u2019\n   47 |     if(date.substr(4,2) < 1 ||\
    \ date.substr(4,2) > 12) {\n      |                           ^\nIn file included\
    \ from /usr/include/c++/9/bits/locale_conv.h:41,\n                 from /usr/include/c++/9/locale:43,\n\
    \                 from /usr/include/c++/9/iomanip:43,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:72,\n\
    \                 from /tmp/tmpkl58glb2.cpp:2:\n/usr/include/c++/9/bits/unique_ptr.h:766:5:\
    \ note: candidate: \u2018template<class _Tp, class _Dp> bool std::operator<(std::nullptr_t,\
    \ const std::unique_ptr<_Tp, _Dp>&)\u2019\n  766 |     operator<(nullptr_t, const\
    \ unique_ptr<_Tp, _Dp>& __x)\n      |     ^~~~~~~~\n/usr/include/c++/9/bits/unique_ptr.h:766:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmpkl58glb2.cpp:47:27:\
    \ note:   mismatched types \u2018const std::unique_ptr<_Tp, _Dp>\u2019 and \u2018\
    int\u2019\n   47 |     if(date.substr(4,2) < 1 || date.substr(4,2) > 12) {\n \
    \     |                           ^\nIn file included from /usr/include/c++/9/list:63,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:79,\n\
    \                 from /tmp/tmpkl58glb2.cpp:2:\n/usr/include/c++/9/bits/stl_list.h:2025:5:\
    \ note: candidate: \u2018template<class _Tp, class _Alloc> bool std::operator<(const\
    \ std::__cxx11::list<_Tp, _Alloc>&, const std::__cxx11::list<_Tp, _Alloc>&)\u2019\
    \n 2025 |     operator<(const list<_Tp, _Alloc>& __x, const list<_Tp, _Alloc>&\
    \ __y)\n      |     ^~~~~~~~\n/usr/include/c++/9/bits/stl_list.h:2025:5: note:\
    \   template argument deduction/substitution failed:\n/tmp/tmpkl58glb2.cpp:47:27:\
    \ note:   \u2018std::__cxx11::basic_string<char>\u2019 is not derived from \u2018\
    const std::__cxx11::list<_Tp, _Alloc>\u2019\n   47 |     if(date.substr(4,2) <\
    \ 1 || date.substr(4,2) > 12) {\n      |                           ^\nIn file\
    \ included from /usr/include/c++/9/map:61,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:81,\n\
    \                 from /tmp/tmpkl58glb2.cpp:2:\n/usr/include/c++/9/bits/stl_map.h:1472:5:\
    \ note: candidate: \u2018template<class _Key, class _Tp, class _Compare, class\
    \ _Alloc> bool std::operator<(const std::map<_Key, _Tp, _Compare, _Alloc>&, const\
    \ std::map<_Key, _Tp, _Compare, _Alloc>&)\u2019\n 1472 |     operator<(const map<_Key,\
    \ _Tp, _Compare, _Alloc>& __x,\n      |     ^~~~~~~~\n/usr/include/c++/9/bits/stl_map.h:1472:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmpkl58glb2.cpp:47:27:\
    \ note:   \u2018std::__cxx11::basic_string<char>\u2019 is not derived from \u2018\
    const std::map<_Key, _Tp, _Compare, _Alloc>\u2019\n   47 |     if(date.substr(4,2)\
    \ < 1 || date.substr(4,2) > 12) {\n      |                           ^\nIn file\
    \ included from /usr/include/c++/9/map:62,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:81,\n\
    \                 from /tmp/tmpkl58glb2.cpp:2:\n/usr/include/c++/9/bits/stl_multimap.h:1136:5:\
    \ note: candidate: \u2018template<class _Key, class _Tp, class _Compare, class\
    \ _Alloc> bool std::operator<(const std::multimap<_Key, _Tp, _Compare, _Alloc>&,\
    \ const std::multimap<_Key, _Tp, _Compare, _Alloc>&)\u2019\n 1136 |     operator<(const\
    \ multimap<_Key, _Tp, _Compare, _Alloc>& __x,\n      |     ^~~~~~~~\n/usr/include/c++/9/bits/stl_multimap.h:1136:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmpkl58glb2.cpp:47:27:\
    \ note:   \u2018std::__cxx11::basic_string<char>\u2019 is not derived from \u2018\
    const std::multimap<_Key, _Tp, _Compare, _Alloc>\u2019\n   47 |     if(date.substr(4,2)\
    \ < 1 || date.substr(4,2) > 12) {\n      |                           ^\nIn file\
    \ included from /usr/include/c++/9/bits/shared_ptr.h:52,\n                 from\
    \ /usr/include/c++/9/memory:81,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:82,\n\
    \                 from /tmp/tmpkl58glb2.cpp:2:\n/usr/include/c++/9/bits/shared_ptr_base.h:1444:5:\
    \ note: candidate: \u2018template<class _Tp, class _Up, __gnu_cxx::_Lock_policy\
    \ _Lp> bool std::operator<(const std::__shared_ptr<_Tp1, _Lp>&, const std::__shared_ptr<_Tp2,\
    \ _Lp>&)\u2019\n 1444 |     operator<(const __shared_ptr<_Tp, _Lp>& __a,\n   \
    \   |     ^~~~~~~~\n/usr/include/c++/9/bits/shared_ptr_base.h:1444:5: note:  \
    \ template argument deduction/substitution failed:\n/tmp/tmpkl58glb2.cpp:47:27:\
    \ note:   \u2018std::__cxx11::basic_string<char>\u2019 is not derived from \u2018\
    const std::__shared_ptr<_Tp1, _Lp>\u2019\n   47 |     if(date.substr(4,2) < 1\
    \ || date.substr(4,2) > 12) {\n      |                           ^\nIn file included\
    \ from /usr/include/c++/9/bits/shared_ptr.h:52,\n                 from /usr/include/c++/9/memory:81,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:82,\n\
    \                 from /tmp/tmpkl58glb2.cpp:2:\n/usr/include/c++/9/bits/shared_ptr_base.h:1455:5:\
    \ note: candidate: \u2018template<class _Tp, __gnu_cxx::_Lock_policy _Lp> bool\
    \ std::operator<(const std::__shared_ptr<_Tp, _Lp>&, std::nullptr_t)\u2019\n 1455\
    \ |     operator<(const __shared_ptr<_Tp, _Lp>& __a, nullptr_t) noexcept\n   \
    \   |     ^~~~~~~~\n/usr/include/c++/9/bits/shared_ptr_base.h:1455:5: note:  \
    \ template argument deduction/substitution failed:\n/tmp/tmpkl58glb2.cpp:47:27:\
    \ note:   \u2018std::__cxx11::basic_string<char>\u2019 is not derived from \u2018\
    const std::__shared_ptr<_Tp, _Lp>\u2019\n   47 |     if(date.substr(4,2) < 1 ||\
    \ date.substr(4,2) > 12) {\n      |                           ^\nIn file included\
    \ from /usr/include/c++/9/bits/shared_ptr.h:52,\n                 from /usr/include/c++/9/memory:81,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:82,\n\
    \                 from /tmp/tmpkl58glb2.cpp:2:\n/usr/include/c++/9/bits/shared_ptr_base.h:1463:5:\
    \ note: candidate: \u2018template<class _Tp, __gnu_cxx::_Lock_policy _Lp> bool\
    \ std::operator<(std::nullptr_t, const std::__shared_ptr<_Tp, _Lp>&)\u2019\n 1463\
    \ |     operator<(nullptr_t, const __shared_ptr<_Tp, _Lp>& __a) noexcept\n   \
    \   |     ^~~~~~~~\n/usr/include/c++/9/bits/shared_ptr_base.h:1463:5: note:  \
    \ template argument deduction/substitution failed:\n/tmp/tmpkl58glb2.cpp:47:27:\
    \ note:   mismatched types \u2018const std::__shared_ptr<_Tp, _Lp>\u2019 and \u2018\
    int\u2019\n   47 |     if(date.substr(4,2) < 1 || date.substr(4,2) > 12) {\n \
    \     |                           ^\nIn file included from /usr/include/c++/9/memory:81,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:82,\n\
    \                 from /tmp/tmpkl58glb2.cpp:2:\n/usr/include/c++/9/bits/shared_ptr.h:413:5:\
    \ note: candidate: \u2018template<class _Tp, class _Up> bool std::operator<(const\
    \ std::shared_ptr<_Tp>&, const std::shared_ptr<_Tp>&)\u2019\n  413 |     operator<(const\
    \ shared_ptr<_Tp>& __a, const shared_ptr<_Up>& __b) noexcept\n      |     ^~~~~~~~\n\
    /usr/include/c++/9/bits/shared_ptr.h:413:5: note:   template argument deduction/substitution\
    \ failed:\n/tmp/tmpkl58glb2.cpp:47:27: note:   \u2018std::__cxx11::basic_string<char>\u2019\
    \ is not derived from \u2018const std::shared_ptr<_Tp>\u2019\n   47 |     if(date.substr(4,2)\
    \ < 1 || date.substr(4,2) > 12) {\n      |                           ^\nIn file\
    \ included from /usr/include/c++/9/memory:81,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:82,\n\
    \                 from /tmp/tmpkl58glb2.cpp:2:\n/usr/include/c++/9/bits/shared_ptr.h:423:5:\
    \ note: candidate: \u2018template<class _Tp> bool std::operator<(const std::shared_ptr<_Tp>&,\
    \ std::nullptr_t)\u2019\n  423 |     operator<(const shared_ptr<_Tp>& __a, nullptr_t)\
    \ noexcept\n      |     ^~~~~~~~\n/usr/include/c++/9/bits/shared_ptr.h:423:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmpkl58glb2.cpp:47:27:\
    \ note:   \u2018std::__cxx11::basic_string<char>\u2019 is not derived from \u2018\
    const std::shared_ptr<_Tp>\u2019\n   47 |     if(date.substr(4,2) < 1 || date.substr(4,2)\
    \ > 12) {\n      |                           ^\nIn file included from /usr/include/c++/9/memory:81,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:82,\n\
    \                 from /tmp/tmpkl58glb2.cpp:2:\n/usr/include/c++/9/bits/shared_ptr.h:431:5:\
    \ note: candidate: \u2018template<class _Tp> bool std::operator<(std::nullptr_t,\
    \ const std::shared_ptr<_Tp>&)\u2019\n  431 |     operator<(nullptr_t, const shared_ptr<_Tp>&\
    \ __a) noexcept\n      |     ^~~~~~~~\n/usr/include/c++/9/bits/shared_ptr.h:431:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmpkl58glb2.cpp:47:27:\
    \ note:   mismatched types \u2018const std::shared_ptr<_Tp>\u2019 and \u2018int\u2019\
    \n   47 |     if(date.substr(4,2) < 1 || date.substr(4,2) > 12) {\n      |   \
    \                        ^\nIn file included from /usr/include/c++/9/vector:67,\n\
    \                 from /usr/include/c++/9/queue:61,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:86,\n\
    \                 from /tmp/tmpkl58glb2.cpp:2:\n/usr/include/c++/9/bits/stl_vector.h:1905:5:\
    \ note: candidate: \u2018template<class _Tp, class _Alloc> bool std::operator<(const\
    \ std::vector<_Tp, _Alloc>&, const std::vector<_Tp, _Alloc>&)\u2019\n 1905 | \
    \    operator<(const vector<_Tp, _Alloc>& __x, const vector<_Tp, _Alloc>& __y)\n\
    \      |     ^~~~~~~~\n/usr/include/c++/9/bits/stl_vector.h:1905:5: note:   template\
    \ argument deduction/substitution failed:\n/tmp/tmpkl58glb2.cpp:47:27: note: \
    \  \u2018std::__cxx11::basic_string<char>\u2019 is not derived from \u2018const\
    \ std::vector<_Tp, _Alloc>\u2019\n   47 |     if(date.substr(4,2) < 1 || date.substr(4,2)\
    \ > 12) {\n      |                           ^\nIn file included from /usr/include/c++/9/queue:64,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:86,\n\
    \                 from /tmp/tmpkl58glb2.cpp:2:\n/usr/include/c++/9/bits/stl_queue.h:356:5:\
    \ note: candidate: \u2018template<class _Tp, class _Seq> bool std::operator<(const\
    \ std::queue<_Tp, _Seq>&, const std::queue<_Tp, _Seq>&)\u2019\n  356 |     operator<(const\
    \ queue<_Tp, _Seq>& __x, const queue<_Tp, _Seq>& __y)\n      |     ^~~~~~~~\n\
    /usr/include/c++/9/bits/stl_queue.h:356:5: note:   template argument deduction/substitution\
    \ failed:\n/tmp/tmpkl58glb2.cpp:47:27: note:   \u2018std::__cxx11::basic_string<char>\u2019\
    \ is not derived from \u2018const std::queue<_Tp, _Seq>\u2019\n   47 |     if(date.substr(4,2)\
    \ < 1 || date.substr(4,2) > 12) {\n      |                           ^\nIn file\
    \ included from /usr/include/c++/9/set:61,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:87,\n\
    \                 from /tmp/tmpkl58glb2.cpp:2:\n/usr/include/c++/9/bits/stl_set.h:996:5:\
    \ note: candidate: \u2018template<class _Key, class _Compare, class _Alloc> bool\
    \ std::operator<(const std::set<_Key, _Compare, _Alloc>&, const std::set<_Key,\
    \ _Compare, _Alloc>&)\u2019\n  996 |     operator<(const set<_Key, _Compare, _Alloc>&\
    \ __x,\n      |     ^~~~~~~~\n/usr/include/c++/9/bits/stl_set.h:996:5: note: \
    \  template argument deduction/substitution failed:\n/tmp/tmpkl58glb2.cpp:47:27:\
    \ note:   \u2018std::__cxx11::basic_string<char>\u2019 is not derived from \u2018\
    const std::set<_Key, _Compare, _Alloc>\u2019\n   47 |     if(date.substr(4,2)\
    \ < 1 || date.substr(4,2) > 12) {\n      |                           ^\nIn file\
    \ included from /usr/include/c++/9/set:62,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:87,\n\
    \                 from /tmp/tmpkl58glb2.cpp:2:\n/usr/include/c++/9/bits/stl_multiset.h:981:5:\
    \ note: candidate: \u2018template<class _Key, class _Compare, class _Alloc> bool\
    \ std::operator<(const std::multiset<_Key, _Compare, _Alloc>&, const std::multiset<_Key,\
    \ _Compare, _Alloc>&)\u2019\n  981 |     operator<(const multiset<_Key, _Compare,\
    \ _Alloc>& __x,\n      |     ^~~~~~~~\n/usr/include/c++/9/bits/stl_multiset.h:981:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmpkl58glb2.cpp:47:27:\
    \ note:   \u2018std::__cxx11::basic_string<char>\u2019 is not derived from \u2018\
    const std::multiset<_Key, _Compare, _Alloc>\u2019\n   47 |     if(date.substr(4,2)\
    \ < 1 || date.substr(4,2) > 12) {\n      |                           ^\nIn file\
    \ included from /usr/include/c++/9/stack:61,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:89,\n\
    \                 from /tmp/tmpkl58glb2.cpp:2:\n/usr/include/c++/9/bits/stl_stack.h:331:5:\
    \ note: candidate: \u2018template<class _Tp, class _Seq> bool std::operator<(const\
    \ std::stack<_Tp, _Seq>&, const std::stack<_Tp, _Seq>&)\u2019\n  331 |     operator<(const\
    \ stack<_Tp, _Seq>& __x, const stack<_Tp, _Seq>& __y)\n      |     ^~~~~~~~\n\
    /usr/include/c++/9/bits/stl_stack.h:331:5: note:   template argument deduction/substitution\
    \ failed:\n/tmp/tmpkl58glb2.cpp:47:27: note:   \u2018std::__cxx11::basic_string<char>\u2019\
    \ is not derived from \u2018const std::stack<_Tp, _Seq>\u2019\n   47 |     if(date.substr(4,2)\
    \ < 1 || date.substr(4,2) > 12) {\n      |                           ^\nIn file\
    \ included from /usr/include/c++/9/valarray:603,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:95,\n\
    \                 from /tmp/tmpkl58glb2.cpp:2:\n/usr/include/c++/9/bits/valarray_after.h:419:5:\
    \ note: candidate: \u2018template<class _Dom1, class _Dom2> std::_Expr<std::__detail::_BinClos<std::__less,\
    \ std::_Expr, std::_Expr, _Dom1, _Dom2>, typename std::__fun<std::__less, typename\
    \ _Dom1::value_type>::result_type> std::operator<(const std::_Expr<_Dom1, typename\
    \ _Dom1::value_type>&, const std::_Expr<_Dom2, typename _Dom2::value_type>&)\u2019\
    \n  419 |     _DEFINE_EXPR_BINARY_OPERATOR(<, __less)\n      |     ^~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /usr/include/c++/9/bits/valarray_after.h:419:5: note:   template argument deduction/substitution\
    \ failed:\n/tmp/tmpkl58glb2.cpp:47:27: note:   \u2018std::__cxx11::basic_string<char>\u2019\
    \ is not derived from \u2018const std::_Expr<_Dom1, typename _Dom1::value_type>\u2019\
    \n   47 |     if(date.substr(4,2) < 1 || date.substr(4,2) > 12) {\n      |   \
    \                        ^\nIn file included from /usr/include/c++/9/valarray:603,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:95,\n\
    \                 from /tmp/tmpkl58glb2.cpp:2:\n/usr/include/c++/9/bits/valarray_after.h:419:5:\
    \ note: candidate: \u2018template<class _Dom> std::_Expr<std::__detail::_BinClos<std::__less,\
    \ std::_Expr, std::_Constant, _Dom, typename _Dom::value_type>, typename std::__fun<std::__less,\
    \ typename _Dom1::value_type>::result_type> std::operator<(const std::_Expr<_Dom1,\
    \ typename _Dom1::value_type>&, const typename _Dom::value_type&)\u2019\n  419\
    \ |     _DEFINE_EXPR_BINARY_OPERATOR(<, __less)\n      |     ^~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /usr/include/c++/9/bits/valarray_after.h:419:5: note:   template argument deduction/substitution\
    \ failed:\n/tmp/tmpkl58glb2.cpp:47:27: note:   \u2018std::__cxx11::basic_string<char>\u2019\
    \ is not derived from \u2018const std::_Expr<_Dom1, typename _Dom1::value_type>\u2019\
    \n   47 |     if(date.substr(4,2) < 1 || date.substr(4,2) > 12) {\n      |   \
    \                        ^\nIn file included from /usr/include/c++/9/valarray:603,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:95,\n\
    \                 from /tmp/tmpkl58glb2.cpp:2:\n/usr/include/c++/9/bits/valarray_after.h:419:5:\
    \ note: candidate: \u2018template<class _Dom> std::_Expr<std::__detail::_BinClos<std::__less,\
    \ std::_Constant, std::_Expr, typename _Dom::value_type, _Dom>, typename std::__fun<std::__less,\
    \ typename _Dom1::value_type>::result_type> std::operator<(const typename _Dom::value_type&,\
    \ const std::_Expr<_Dom1, typename _Dom1::value_type>&)\u2019\n  419 |     _DEFINE_EXPR_BINARY_OPERATOR(<,\
    \ __less)\n      |     ^~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/usr/include/c++/9/bits/valarray_after.h:419:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmpkl58glb2.cpp:47:27:\
    \ note:   mismatched types \u2018const std::_Expr<_Dom1, typename _Dom1::value_type>\u2019\
    \ and \u2018int\u2019\n   47 |     if(date.substr(4,2) < 1 || date.substr(4,2)\
    \ > 12) {\n      |                           ^\nIn file included from /usr/include/c++/9/valarray:603,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:95,\n\
    \                 from /tmp/tmpkl58glb2.cpp:2:\n/usr/include/c++/9/bits/valarray_after.h:419:5:\
    \ note: candidate: \u2018template<class _Dom> std::_Expr<std::__detail::_BinClos<std::__less,\
    \ std::_Expr, std::_ValArray, _Dom, typename _Dom::value_type>, typename std::__fun<std::__less,\
    \ typename _Dom1::value_type>::result_type> std::operator<(const std::_Expr<_Dom1,\
    \ typename _Dom1::value_type>&, const std::valarray<typename _Dom::value_type>&)\u2019\
    \n  419 |     _DEFINE_EXPR_BINARY_OPERATOR(<, __less)\n      |     ^~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /usr/include/c++/9/bits/valarray_after.h:419:5: note:   template argument deduction/substitution\
    \ failed:\n/tmp/tmpkl58glb2.cpp:47:27: note:   \u2018std::__cxx11::basic_string<char>\u2019\
    \ is not derived from \u2018const std::_Expr<_Dom1, typename _Dom1::value_type>\u2019\
    \n   47 |     if(date.substr(4,2) < 1 || date.substr(4,2) > 12) {\n      |   \
    \                        ^\nIn file included from /usr/include/c++/9/valarray:603,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:95,\n\
    \                 from /tmp/tmpkl58glb2.cpp:2:\n/usr/include/c++/9/bits/valarray_after.h:419:5:\
    \ note: candidate: \u2018template<class _Dom> std::_Expr<std::__detail::_BinClos<std::__less,\
    \ std::_ValArray, std::_Expr, typename _Dom::value_type, _Dom>, typename std::__fun<std::__less,\
    \ typename _Dom1::value_type>::result_type> std::operator<(const std::valarray<typename\
    \ _Dom::value_type>&, const std::_Expr<_Dom1, typename _Dom1::value_type>&)\u2019\
    \n  419 |     _DEFINE_EXPR_BINARY_OPERATOR(<, __less)\n      |     ^~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /usr/include/c++/9/bits/valarray_after.h:419:5: note:   template argument deduction/substitution\
    \ failed:\n/tmp/tmpkl58glb2.cpp:47:27: note:   mismatched types \u2018const std::_Expr<_Dom1,\
    \ typename _Dom1::value_type>\u2019 and \u2018int\u2019\n   47 |     if(date.substr(4,2)\
    \ < 1 || date.substr(4,2) > 12) {\n      |                           ^\nIn file\
    \ included from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:95,\n      \
    \           from /tmp/tmpkl58glb2.cpp:2:\n/usr/include/c++/9/valarray:1199:1:\
    \ note: candidate: \u2018template<class _Tp> std::_Expr<std::__detail::_BinClos<std::__less,\
    \ std::_ValArray, std::_ValArray, _Tp, _Tp>, typename std::__fun<std::__less,\
    \ _Tp>::result_type> std::operator<(const std::valarray<_Tp>&, const std::valarray<_Tp>&)\u2019\
    \n 1199 | _DEFINE_BINARY_OPERATOR(<, __less)\n      | ^~~~~~~~~~~~~~~~~~~~~~~\n\
    /usr/include/c++/9/valarray:1199:1: note:   template argument deduction/substitution\
    \ failed:\n/tmp/tmpkl58glb2.cpp:47:27: note:   \u2018std::__cxx11::basic_string<char>\u2019\
    \ is not derived from \u2018const std::valarray<_Tp>\u2019\n   47 |     if(date.substr(4,2)\
    \ < 1 || date.substr(4,2) > 12) {\n      |                           ^\nIn file\
    \ included from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:95,\n      \
    \           from /tmp/tmpkl58glb2.cpp:2:\n/usr/include/c++/9/valarray:1199:1:\
    \ note: candidate: \u2018template<class _Tp> std::_Expr<std::__detail::_BinClos<std::__less,\
    \ std::_ValArray, std::_Constant, _Tp, _Tp>, typename std::__fun<std::__less,\
    \ _Tp>::result_type> std::operator<(const std::valarray<_Tp>&, const typename\
    \ std::valarray<_Tp>::value_type&)\u2019\n 1199 | _DEFINE_BINARY_OPERATOR(<, __less)\n\
    \      | ^~~~~~~~~~~~~~~~~~~~~~~\n/usr/include/c++/9/valarray:1199:1: note:  \
    \ template argument deduction/substitution failed:\n/tmp/tmpkl58glb2.cpp:47:27:\
    \ note:   \u2018std::__cxx11::basic_string<char>\u2019 is not derived from \u2018\
    const std::valarray<_Tp>\u2019\n   47 |     if(date.substr(4,2) < 1 || date.substr(4,2)\
    \ > 12) {\n      |                           ^\nIn file included from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:95,\n\
    \                 from /tmp/tmpkl58glb2.cpp:2:\n/usr/include/c++/9/valarray:1199:1:\
    \ note: candidate: \u2018template<class _Tp> std::_Expr<std::__detail::_BinClos<std::__less,\
    \ std::_Constant, std::_ValArray, _Tp, _Tp>, typename std::__fun<std::__less,\
    \ _Tp>::result_type> std::operator<(const typename std::valarray<_Tp>::value_type&,\
    \ const std::valarray<_Tp>&)\u2019\n 1199 | _DEFINE_BINARY_OPERATOR(<, __less)\n\
    \      | ^~~~~~~~~~~~~~~~~~~~~~~\n/usr/include/c++/9/valarray:1199:1: note:  \
    \ template argument deduction/substitution failed:\n/tmp/tmpkl58glb2.cpp:47:27:\
    \ note:   mismatched types \u2018const std::valarray<_Tp>\u2019 and \u2018int\u2019\
    \n   47 |     if(date.substr(4,2) < 1 || date.substr(4,2) > 12) {\n      |   \
    \                        ^\nIn file included from /usr/include/c++/9/forward_list:38,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:104,\n\
    \                 from /tmp/tmpkl58glb2.cpp:2:\n/usr/include/c++/9/bits/forward_list.h:1443:5:\
    \ note: candidate: \u2018template<class _Tp, class _Alloc> bool std::operator<(const\
    \ std::forward_list<_Tp, _Alloc>&, const std::forward_list<_Tp, _Alloc>&)\u2019\
    \n 1443 |     operator<(const forward_list<_Tp, _Alloc>& __lx,\n      |     ^~~~~~~~\n\
    /usr/include/c++/9/bits/forward_list.h:1443:5: note:   template argument deduction/substitution\
    \ failed:\n/tmp/tmpkl58glb2.cpp:47:27: note:   \u2018std::__cxx11::basic_string<char>\u2019\
    \ is not derived from \u2018const std::forward_list<_Tp, _Alloc>\u2019\n   47\
    \ |     if(date.substr(4,2) < 1 || date.substr(4,2) > 12) {\n      |         \
    \                  ^\nIn file included from /usr/include/c++/9/future:39,\n  \
    \               from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:105,\n\
    \                 from /tmp/tmpkl58glb2.cpp:2:\n/usr/include/c++/9/thread:290:3:\
    \ note: candidate: \u2018bool std::operator<(std::thread::id, std::thread::id)\u2019\
    \n  290 |   operator<(thread::id __x, thread::id __y) noexcept\n      |   ^~~~~~~~\n\
    /usr/include/c++/9/thread:290:24: note:   no known conversion for argument 1 from\
    \ \u2018std::__cxx11::basic_string<char>\u2019 to \u2018std::thread::id\u2019\n\
    \  290 |   operator<(thread::id __x, thread::id __y) noexcept\n      |       \
    \      ~~~~~~~~~~~^~~\nIn file included from /usr/include/c++/9/bits/stl_algobase.h:67,\n\
    \                 from /usr/include/c++/9/bits/char_traits.h:39,\n           \
    \      from /usr/include/c++/9/ios:40,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmpkl58glb2.cpp:2:\n/usr/include/c++/9/bits/stl_iterator.h:912:5: note:\
    \ candidate: \u2018template<class _IteratorL, class _IteratorR, class _Container>\
    \ bool __gnu_cxx::operator<(const __gnu_cxx::__normal_iterator<_IteratorL, _Container>&,\
    \ const __gnu_cxx::__normal_iterator<_IteratorR, _Container>&)\u2019\n  912 |\
    \     operator<(const __normal_iterator<_IteratorL, _Container>& __lhs,\n    \
    \  |     ^~~~~~~~\n/usr/include/c++/9/bits/stl_iterator.h:912:5: note:   template\
    \ argument deduction/substitution failed:\n/tmp/tmpkl58glb2.cpp:47:27: note: \
    \  \u2018std::__cxx11::basic_string<char>\u2019 is not derived from \u2018const\
    \ __gnu_cxx::__normal_iterator<_IteratorL, _Container>\u2019\n   47 |     if(date.substr(4,2)\
    \ < 1 || date.substr(4,2) > 12) {\n      |                           ^\nIn file\
    \ included from /usr/include/c++/9/bits/stl_algobase.h:67,\n                 from\
    \ /usr/include/c++/9/bits/char_traits.h:39,\n                 from /usr/include/c++/9/ios:40,\n\
    \                 from /usr/include/c++/9/istream:38,\n                 from /usr/include/c++/9/sstream:38,\n\
    \                 from /usr/include/c++/9/complex:45,\n                 from /usr/include/c++/9/ccomplex:39,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n\
    \                 from /tmp/tmpkl58glb2.cpp:2:\n/usr/include/c++/9/bits/stl_iterator.h:919:5:\
    \ note: candidate: \u2018template<class _Iterator, class _Container> bool __gnu_cxx::operator<(const\
    \ __gnu_cxx::__normal_iterator<_Iterator, _Container>&, const __gnu_cxx::__normal_iterator<_Iterator,\
    \ _Container>&)\u2019\n  919 |     operator<(const __normal_iterator<_Iterator,\
    \ _Container>& __lhs,\n      |     ^~~~~~~~\n/usr/include/c++/9/bits/stl_iterator.h:919:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmpkl58glb2.cpp:47:27:\
    \ note:   \u2018std::__cxx11::basic_string<char>\u2019 is not derived from \u2018\
    const __gnu_cxx::__normal_iterator<_Iterator, _Container>\u2019\n   47 |     if(date.substr(4,2)\
    \ < 1 || date.substr(4,2) > 12) {\n      |                           ^\n/tmp/tmpkl58glb2.cpp:47:49:\
    \ error: no match for \u2018operator>\u2019 (operand types are \u2018std::__cxx11::basic_string<char>\u2019\
    \ and \u2018int\u2019)\n   47 |     if(date.substr(4,2) < 1 || date.substr(4,2)\
    \ > 12) {\n      |                                ~~~~~~~~~~~~~~~~ ^ ~~\n    \
    \  |                                           |       |\n      |            \
    \                               |       int\n      |                         \
    \                  std::__cxx11::basic_string<char>\nIn file included from /usr/include/c++/9/regex:62,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:110,\n\
    \                 from /tmp/tmpkl58glb2.cpp:2:\n/usr/include/c++/9/bits/regex.h:1081:5:\
    \ note: candidate: \u2018template<class _BiIter> bool std::__cxx11::operator>(const\
    \ std::__cxx11::sub_match<_BiIter>&, const std::__cxx11::sub_match<_BiIter>&)\u2019\
    \n 1081 |     operator>(const sub_match<_BiIter>& __lhs, const sub_match<_BiIter>&\
    \ __rhs)\n      |     ^~~~~~~~\n/usr/include/c++/9/bits/regex.h:1081:5: note:\
    \   template argument deduction/substitution failed:\n/tmp/tmpkl58glb2.cpp:47:51:\
    \ note:   \u2018std::__cxx11::basic_string<char>\u2019 is not derived from \u2018\
    const std::__cxx11::sub_match<_BiIter>\u2019\n   47 |     if(date.substr(4,2)\
    \ < 1 || date.substr(4,2) > 12) {\n      |                                   \
    \                ^~\nIn file included from /usr/include/c++/9/regex:62,\n    \
    \             from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:110,\n  \
    \               from /tmp/tmpkl58glb2.cpp:2:\n/usr/include/c++/9/bits/regex.h:1136:5:\
    \ note: candidate: \u2018template<class _Bi_iter, class _Ch_traits, class _Ch_alloc>\
    \ bool std::__cxx11::operator>(std::__cxx11::__sub_match_string<_Bi_iter, _Ch_traits,\
    \ _Ch_alloc>&, const std::__cxx11::sub_match<_BiIter>&)\u2019\n 1136 |     operator>(const\
    \ __sub_match_string<_Bi_iter, _Ch_traits, _Ch_alloc>& __lhs,\n      |     ^~~~~~~~\n\
    /usr/include/c++/9/bits/regex.h:1136:5: note:   template argument deduction/substitution\
    \ failed:\n/tmp/tmpkl58glb2.cpp:47:51: note:   mismatched types \u2018const std::__cxx11::sub_match<_BiIter>\u2019\
    \ and \u2018int\u2019\n   47 |     if(date.substr(4,2) < 1 || date.substr(4,2)\
    \ > 12) {\n      |                                                   ^~\nIn file\
    \ included from /usr/include/c++/9/regex:62,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:110,\n\
    \                 from /tmp/tmpkl58glb2.cpp:2:\n/usr/include/c++/9/bits/regex.h:1210:5:\
    \ note: candidate: \u2018template<class _Bi_iter, class _Ch_traits, class _Ch_alloc>\
    \ bool std::__cxx11::operator>(const std::__cxx11::sub_match<_BiIter>&, std::__cxx11::__sub_match_string<_Bi_iter,\
    \ _Ch_traits, _Ch_alloc>&)\u2019\n 1210 |     operator>(const sub_match<_Bi_iter>&\
    \ __lhs,\n      |     ^~~~~~~~\n/usr/include/c++/9/bits/regex.h:1210:5: note:\
    \   template argument deduction/substitution failed:\n/tmp/tmpkl58glb2.cpp:47:51:\
    \ note:   \u2018std::__cxx11::basic_string<char>\u2019 is not derived from \u2018\
    const std::__cxx11::sub_match<_BiIter>\u2019\n   47 |     if(date.substr(4,2)\
    \ < 1 || date.substr(4,2) > 12) {\n      |                                   \
    \                ^~\nIn file included from /usr/include/c++/9/regex:62,\n    \
    \             from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:110,\n  \
    \               from /tmp/tmpkl58glb2.cpp:2:\n/usr/include/c++/9/bits/regex.h:1284:5:\
    \ note: candidate: \u2018template<class _Bi_iter> bool std::__cxx11::operator>(const\
    \ typename std::iterator_traits<_Iter>::value_type*, const std::__cxx11::sub_match<_BiIter>&)\u2019\
    \n 1284 |     operator>(typename iterator_traits<_Bi_iter>::value_type const*\
    \ __lhs,\n      |     ^~~~~~~~\n/usr/include/c++/9/bits/regex.h:1284:5: note:\
    \   template argument deduction/substitution failed:\n/tmp/tmpkl58glb2.cpp:47:51:\
    \ note:   mismatched types \u2018const std::__cxx11::sub_match<_BiIter>\u2019\
    \ and \u2018int\u2019\n   47 |     if(date.substr(4,2) < 1 || date.substr(4,2)\
    \ > 12) {\n      |                                                   ^~\nIn file\
    \ included from /usr/include/c++/9/regex:62,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:110,\n\
    \                 from /tmp/tmpkl58glb2.cpp:2:\n/usr/include/c++/9/bits/regex.h:1358:5:\
    \ note: candidate: \u2018template<class _Bi_iter> bool std::__cxx11::operator>(const\
    \ std::__cxx11::sub_match<_BiIter>&, const typename std::iterator_traits<_Iter>::value_type*)\u2019\
    \n 1358 |     operator>(const sub_match<_Bi_iter>& __lhs,\n      |     ^~~~~~~~\n\
    /usr/include/c++/9/bits/regex.h:1358:5: note:   template argument deduction/substitution\
    \ failed:\n/tmp/tmpkl58glb2.cpp:47:51: note:   \u2018std::__cxx11::basic_string<char>\u2019\
    \ is not derived from \u2018const std::__cxx11::sub_match<_BiIter>\u2019\n   47\
    \ |     if(date.substr(4,2) < 1 || date.substr(4,2) > 12) {\n      |         \
    \                                          ^~\nIn file included from /usr/include/c++/9/regex:62,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:110,\n\
    \                 from /tmp/tmpkl58glb2.cpp:2:\n/usr/include/c++/9/bits/regex.h:1434:5:\
    \ note: candidate: \u2018template<class _Bi_iter> bool std::__cxx11::operator>(const\
    \ typename std::iterator_traits<_Iter>::value_type&, const std::__cxx11::sub_match<_BiIter>&)\u2019\
    \n 1434 |     operator>(typename iterator_traits<_Bi_iter>::value_type const&\
    \ __lhs,\n      |     ^~~~~~~~\n/usr/include/c++/9/bits/regex.h:1434:5: note:\
    \   template argument deduction/substitution failed:\n/tmp/tmpkl58glb2.cpp:47:51:\
    \ note:   mismatched types \u2018const std::__cxx11::sub_match<_BiIter>\u2019\
    \ and \u2018int\u2019\n   47 |     if(date.substr(4,2) < 1 || date.substr(4,2)\
    \ > 12) {\n      |                                                   ^~\nIn file\
    \ included from /usr/include/c++/9/regex:62,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:110,\n\
    \                 from /tmp/tmpkl58glb2.cpp:2:\n/usr/include/c++/9/bits/regex.h:1512:5:\
    \ note: candidate: \u2018template<class _Bi_iter> bool std::__cxx11::operator>(const\
    \ std::__cxx11::sub_match<_BiIter>&, const typename std::iterator_traits<_Iter>::value_type&)\u2019\
    \n 1512 |     operator>(const sub_match<_Bi_iter>& __lhs,\n      |     ^~~~~~~~\n\
    /usr/include/c++/9/bits/regex.h:1512:5: note:   template argument deduction/substitution\
    \ failed:\n/tmp/tmpkl58glb2.cpp:47:51: note:   \u2018std::__cxx11::basic_string<char>\u2019\
    \ is not derived from \u2018const std::__cxx11::sub_match<_BiIter>\u2019\n   47\
    \ |     if(date.substr(4,2) < 1 || date.substr(4,2) > 12) {\n      |         \
    \                                          ^~\nIn file included from /usr/include/c++/9/bits/stl_algobase.h:64,\n\
    \                 from /usr/include/c++/9/bits/char_traits.h:39,\n           \
    \      from /usr/include/c++/9/ios:40,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmpkl58glb2.cpp:2:\n/usr/include/c++/9/bits/stl_pair.h:467:5: note: candidate:\
    \ \u2018template<class _T1, class _T2> constexpr bool std::operator>(const std::pair<_T1,\
    \ _T2>&, const std::pair<_T1, _T2>&)\u2019\n  467 |     operator>(const pair<_T1,\
    \ _T2>& __x, const pair<_T1, _T2>& __y)\n      |     ^~~~~~~~\n/usr/include/c++/9/bits/stl_pair.h:467:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmpkl58glb2.cpp:47:51:\
    \ note:   \u2018std::__cxx11::basic_string<char>\u2019 is not derived from \u2018\
    const std::pair<_T1, _T2>\u2019\n   47 |     if(date.substr(4,2) < 1 || date.substr(4,2)\
    \ > 12) {\n      |                                                   ^~\nIn file\
    \ included from /usr/include/c++/9/bits/stl_algobase.h:67,\n                 from\
    \ /usr/include/c++/9/bits/char_traits.h:39,\n                 from /usr/include/c++/9/ios:40,\n\
    \                 from /usr/include/c++/9/istream:38,\n                 from /usr/include/c++/9/sstream:38,\n\
    \                 from /usr/include/c++/9/complex:45,\n                 from /usr/include/c++/9/ccomplex:39,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n\
    \                 from /tmp/tmpkl58glb2.cpp:2:\n/usr/include/c++/9/bits/stl_iterator.h:343:5:\
    \ note: candidate: \u2018template<class _Iterator> bool std::operator>(const std::reverse_iterator<_Iterator>&,\
    \ const std::reverse_iterator<_Iterator>&)\u2019\n  343 |     operator>(const\
    \ reverse_iterator<_Iterator>& __x,\n      |     ^~~~~~~~\n/usr/include/c++/9/bits/stl_iterator.h:343:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmpkl58glb2.cpp:47:51:\
    \ note:   \u2018std::__cxx11::basic_string<char>\u2019 is not derived from \u2018\
    const std::reverse_iterator<_Iterator>\u2019\n   47 |     if(date.substr(4,2)\
    \ < 1 || date.substr(4,2) > 12) {\n      |                                   \
    \                ^~\nIn file included from /usr/include/c++/9/bits/stl_algobase.h:67,\n\
    \                 from /usr/include/c++/9/bits/char_traits.h:39,\n           \
    \      from /usr/include/c++/9/ios:40,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmpkl58glb2.cpp:2:\n/usr/include/c++/9/bits/stl_iterator.h:381:5: note:\
    \ candidate: \u2018template<class _IteratorL, class _IteratorR> bool std::operator>(const\
    \ std::reverse_iterator<_Iterator>&, const std::reverse_iterator<_IteratorR>&)\u2019\
    \n  381 |     operator>(const reverse_iterator<_IteratorL>& __x,\n      |    \
    \ ^~~~~~~~\n/usr/include/c++/9/bits/stl_iterator.h:381:5: note:   template argument\
    \ deduction/substitution failed:\n/tmp/tmpkl58glb2.cpp:47:51: note:   \u2018std::__cxx11::basic_string<char>\u2019\
    \ is not derived from \u2018const std::reverse_iterator<_Iterator>\u2019\n   47\
    \ |     if(date.substr(4,2) < 1 || date.substr(4,2) > 12) {\n      |         \
    \                                          ^~\nIn file included from /usr/include/c++/9/bits/stl_algobase.h:67,\n\
    \                 from /usr/include/c++/9/bits/char_traits.h:39,\n           \
    \      from /usr/include/c++/9/ios:40,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmpkl58glb2.cpp:2:\n/usr/include/c++/9/bits/stl_iterator.h:1184:5: note:\
    \ candidate: \u2018template<class _IteratorL, class _IteratorR> bool std::operator>(const\
    \ std::move_iterator<_IteratorL>&, const std::move_iterator<_IteratorR>&)\u2019\
    \n 1184 |     operator>(const move_iterator<_IteratorL>& __x,\n      |     ^~~~~~~~\n\
    /usr/include/c++/9/bits/stl_iterator.h:1184:5: note:   template argument deduction/substitution\
    \ failed:\n/tmp/tmpkl58glb2.cpp:47:51: note:   \u2018std::__cxx11::basic_string<char>\u2019\
    \ is not derived from \u2018const std::move_iterator<_IteratorL>\u2019\n   47\
    \ |     if(date.substr(4,2) < 1 || date.substr(4,2) > 12) {\n      |         \
    \                                          ^~\nIn file included from /usr/include/c++/9/bits/stl_algobase.h:67,\n\
    \                 from /usr/include/c++/9/bits/char_traits.h:39,\n           \
    \      from /usr/include/c++/9/ios:40,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmpkl58glb2.cpp:2:\n/usr/include/c++/9/bits/stl_iterator.h:1190:5: note:\
    \ candidate: \u2018template<class _Iterator> bool std::operator>(const std::move_iterator<_IteratorL>&,\
    \ const std::move_iterator<_IteratorL>&)\u2019\n 1190 |     operator>(const move_iterator<_Iterator>&\
    \ __x,\n      |     ^~~~~~~~\n/usr/include/c++/9/bits/stl_iterator.h:1190:5: note:\
    \   template argument deduction/substitution failed:\n/tmp/tmpkl58glb2.cpp:47:51:\
    \ note:   \u2018std::__cxx11::basic_string<char>\u2019 is not derived from \u2018\
    const std::move_iterator<_IteratorL>\u2019\n   47 |     if(date.substr(4,2) <\
    \ 1 || date.substr(4,2) > 12) {\n      |                                     \
    \              ^~\nIn file included from /usr/include/c++/9/string:55,\n     \
    \            from /usr/include/c++/9/bits/locale_classes.h:40,\n             \
    \    from /usr/include/c++/9/bits/ios_base.h:41,\n                 from /usr/include/c++/9/ios:42,\n\
    \                 from /usr/include/c++/9/istream:38,\n                 from /usr/include/c++/9/sstream:38,\n\
    \                 from /usr/include/c++/9/complex:45,\n                 from /usr/include/c++/9/ccomplex:39,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n\
    \                 from /tmp/tmpkl58glb2.cpp:2:\n/usr/include/c++/9/bits/basic_string.h:6267:5:\
    \ note: candidate: \u2018template<class _CharT, class _Traits, class _Alloc> bool\
    \ std::operator>(const std::__cxx11::basic_string<_CharT, _Traits, _Alloc>&, const\
    \ std::__cxx11::basic_string<_CharT, _Traits, _Alloc>&)\u2019\n 6267 |     operator>(const\
    \ basic_string<_CharT, _Traits, _Alloc>& __lhs,\n      |     ^~~~~~~~\n/usr/include/c++/9/bits/basic_string.h:6267:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmpkl58glb2.cpp:47:51:\
    \ note:   mismatched types \u2018const std::__cxx11::basic_string<_CharT, _Traits,\
    \ _Alloc>\u2019 and \u2018int\u2019\n   47 |     if(date.substr(4,2) < 1 || date.substr(4,2)\
    \ > 12) {\n      |                                                   ^~\nIn file\
    \ included from /usr/include/c++/9/string:55,\n                 from /usr/include/c++/9/bits/locale_classes.h:40,\n\
    \                 from /usr/include/c++/9/bits/ios_base.h:41,\n              \
    \   from /usr/include/c++/9/ios:42,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmpkl58glb2.cpp:2:\n/usr/include/c++/9/bits/basic_string.h:6280:5: note:\
    \ candidate: \u2018template<class _CharT, class _Traits, class _Alloc> bool std::operator>(const\
    \ std::__cxx11::basic_string<_CharT, _Traits, _Alloc>&, const _CharT*)\u2019\n\
    \ 6280 |     operator>(const basic_string<_CharT, _Traits, _Alloc>& __lhs,\n \
    \     |     ^~~~~~~~\n/usr/include/c++/9/bits/basic_string.h:6280:5: note:   template\
    \ argument deduction/substitution failed:\n/tmp/tmpkl58glb2.cpp:47:51: note: \
    \  mismatched types \u2018const _CharT*\u2019 and \u2018int\u2019\n   47 |   \
    \  if(date.substr(4,2) < 1 || date.substr(4,2) > 12) {\n      |              \
    \                                     ^~\nIn file included from /usr/include/c++/9/string:55,\n\
    \                 from /usr/include/c++/9/bits/locale_classes.h:40,\n        \
    \         from /usr/include/c++/9/bits/ios_base.h:41,\n                 from /usr/include/c++/9/ios:42,\n\
    \                 from /usr/include/c++/9/istream:38,\n                 from /usr/include/c++/9/sstream:38,\n\
    \                 from /usr/include/c++/9/complex:45,\n                 from /usr/include/c++/9/ccomplex:39,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n\
    \                 from /tmp/tmpkl58glb2.cpp:2:\n/usr/include/c++/9/bits/basic_string.h:6292:5:\
    \ note: candidate: \u2018template<class _CharT, class _Traits, class _Alloc> bool\
    \ std::operator>(const _CharT*, const std::__cxx11::basic_string<_CharT, _Traits,\
    \ _Alloc>&)\u2019\n 6292 |     operator>(const _CharT* __lhs,\n      |     ^~~~~~~~\n\
    /usr/include/c++/9/bits/basic_string.h:6292:5: note:   template argument deduction/substitution\
    \ failed:\n/tmp/tmpkl58glb2.cpp:47:51: note:   mismatched types \u2018const _CharT*\u2019\
    \ and \u2018std::__cxx11::basic_string<char>\u2019\n   47 |     if(date.substr(4,2)\
    \ < 1 || date.substr(4,2) > 12) {\n      |                                   \
    \                ^~\nIn file included from /usr/include/c++/9/deque:67,\n    \
    \             from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:68,\n   \
    \              from /tmp/tmpkl58glb2.cpp:2:\n/usr/include/c++/9/bits/stl_deque.h:327:5:\
    \ note: candidate: \u2018template<class _Tp, class _Ref, class _Ptr> bool std::operator>(const\
    \ std::_Deque_iterator<_Tp, _Ref, _Ptr>&, const std::_Deque_iterator<_Tp, _Ref,\
    \ _Ptr>&)\u2019\n  327 |     operator>(const _Deque_iterator<_Tp, _Ref, _Ptr>&\
    \ __x,\n      |     ^~~~~~~~\n/usr/include/c++/9/bits/stl_deque.h:327:5: note:\
    \   template argument deduction/substitution failed:\n/tmp/tmpkl58glb2.cpp:47:51:\
    \ note:   \u2018std::__cxx11::basic_string<char>\u2019 is not derived from \u2018\
    const std::_Deque_iterator<_Tp, _Ref, _Ptr>\u2019\n   47 |     if(date.substr(4,2)\
    \ < 1 || date.substr(4,2) > 12) {\n      |                                   \
    \                ^~\nIn file included from /usr/include/c++/9/deque:67,\n    \
    \             from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:68,\n   \
    \              from /tmp/tmpkl58glb2.cpp:2:\n/usr/include/c++/9/bits/stl_deque.h:334:5:\
    \ note: candidate: \u2018template<class _Tp, class _RefL, class _PtrL, class _RefR,\
    \ class _PtrR> bool std::operator>(const std::_Deque_iterator<_Tp, _Ref, _Ptr>&,\
    \ const std::_Deque_iterator<_Tp, _RefR, _PtrR>&)\u2019\n  334 |     operator>(const\
    \ _Deque_iterator<_Tp, _RefL, _PtrL>& __x,\n      |     ^~~~~~~~\n/usr/include/c++/9/bits/stl_deque.h:334:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmpkl58glb2.cpp:47:51:\
    \ note:   \u2018std::__cxx11::basic_string<char>\u2019 is not derived from \u2018\
    const std::_Deque_iterator<_Tp, _Ref, _Ptr>\u2019\n   47 |     if(date.substr(4,2)\
    \ < 1 || date.substr(4,2) > 12) {\n      |                                   \
    \                ^~\nIn file included from /usr/include/c++/9/deque:67,\n    \
    \             from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:68,\n   \
    \              from /tmp/tmpkl58glb2.cpp:2:\n/usr/include/c++/9/bits/stl_deque.h:2345:5:\
    \ note: candidate: \u2018template<class _Tp, class _Alloc> bool std::operator>(const\
    \ std::deque<_Tp, _Alloc>&, const std::deque<_Tp, _Alloc>&)\u2019\n 2345 |   \
    \  operator>(const deque<_Tp, _Alloc>& __x,\n      |     ^~~~~~~~\n/usr/include/c++/9/bits/stl_deque.h:2345:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmpkl58glb2.cpp:47:51:\
    \ note:   \u2018std::__cxx11::basic_string<char>\u2019 is not derived from \u2018\
    const std::deque<_Tp, _Alloc>\u2019\n   47 |     if(date.substr(4,2) < 1 || date.substr(4,2)\
    \ > 12) {\n      |                                                   ^~\nIn file\
    \ included from /usr/include/c++/9/tuple:39,\n                 from /usr/include/c++/9/functional:54,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:71,\n\
    \                 from /tmp/tmpkl58glb2.cpp:2:\n/usr/include/c++/9/array:270:5:\
    \ note: candidate: \u2018template<class _Tp, long unsigned int _Nm> bool std::operator>(const\
    \ std::array<_Tp, _Nm>&, const std::array<_Tp, _Nm>&)\u2019\n  270 |     operator>(const\
    \ array<_Tp, _Nm>& __one, const array<_Tp, _Nm>& __two)\n      |     ^~~~~~~~\n\
    /usr/include/c++/9/array:270:5: note:   template argument deduction/substitution\
    \ failed:\n/tmp/tmpkl58glb2.cpp:47:51: note:   \u2018std::__cxx11::basic_string<char>\u2019\
    \ is not derived from \u2018const std::array<_Tp, _Nm>\u2019\n   47 |     if(date.substr(4,2)\
    \ < 1 || date.substr(4,2) > 12) {\n      |                                   \
    \                ^~\nIn file included from /usr/include/c++/9/functional:54,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:71,\n\
    \                 from /tmp/tmpkl58glb2.cpp:2:\n/usr/include/c++/9/tuple:1451:5:\
    \ note: candidate: \u2018template<class ... _TElements, class ... _UElements>\
    \ constexpr bool std::operator>(const std::tuple<_Tps ...>&, const std::tuple<_Elements\
    \ ...>&)\u2019\n 1451 |     operator>(const tuple<_TElements...>& __t,\n     \
    \ |     ^~~~~~~~\n/usr/include/c++/9/tuple:1451:5: note:   template argument deduction/substitution\
    \ failed:\n/tmp/tmpkl58glb2.cpp:47:51: note:   \u2018std::__cxx11::basic_string<char>\u2019\
    \ is not derived from \u2018const std::tuple<_Tps ...>\u2019\n   47 |     if(date.substr(4,2)\
    \ < 1 || date.substr(4,2) > 12) {\n      |                                   \
    \                ^~\nIn file included from /usr/include/c++/9/bits/locale_conv.h:41,\n\
    \                 from /usr/include/c++/9/locale:43,\n                 from /usr/include/c++/9/iomanip:43,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:72,\n\
    \                 from /tmp/tmpkl58glb2.cpp:2:\n/usr/include/c++/9/bits/unique_ptr.h:790:5:\
    \ note: candidate: \u2018template<class _Tp, class _Dp, class _Up, class _Ep>\
    \ bool std::operator>(const std::unique_ptr<_Tp, _Dp>&, const std::unique_ptr<_Up,\
    \ _Ep>&)\u2019\n  790 |     operator>(const unique_ptr<_Tp, _Dp>& __x,\n     \
    \ |     ^~~~~~~~\n/usr/include/c++/9/bits/unique_ptr.h:790:5: note:   template\
    \ argument deduction/substitution failed:\n/tmp/tmpkl58glb2.cpp:47:51: note: \
    \  \u2018std::__cxx11::basic_string<char>\u2019 is not derived from \u2018const\
    \ std::unique_ptr<_Tp, _Dp>\u2019\n   47 |     if(date.substr(4,2) < 1 || date.substr(4,2)\
    \ > 12) {\n      |                                                   ^~\nIn file\
    \ included from /usr/include/c++/9/bits/locale_conv.h:41,\n                 from\
    \ /usr/include/c++/9/locale:43,\n                 from /usr/include/c++/9/iomanip:43,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:72,\n\
    \                 from /tmp/tmpkl58glb2.cpp:2:\n/usr/include/c++/9/bits/unique_ptr.h:796:5:\
    \ note: candidate: \u2018template<class _Tp, class _Dp> bool std::operator>(const\
    \ std::unique_ptr<_Tp, _Dp>&, std::nullptr_t)\u2019\n  796 |     operator>(const\
    \ unique_ptr<_Tp, _Dp>& __x, nullptr_t)\n      |     ^~~~~~~~\n/usr/include/c++/9/bits/unique_ptr.h:796:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmpkl58glb2.cpp:47:51:\
    \ note:   \u2018std::__cxx11::basic_string<char>\u2019 is not derived from \u2018\
    const std::unique_ptr<_Tp, _Dp>\u2019\n   47 |     if(date.substr(4,2) < 1 ||\
    \ date.substr(4,2) > 12) {\n      |                                          \
    \         ^~\nIn file included from /usr/include/c++/9/bits/locale_conv.h:41,\n\
    \                 from /usr/include/c++/9/locale:43,\n                 from /usr/include/c++/9/iomanip:43,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:72,\n\
    \                 from /tmp/tmpkl58glb2.cpp:2:\n/usr/include/c++/9/bits/unique_ptr.h:802:5:\
    \ note: candidate: \u2018template<class _Tp, class _Dp> bool std::operator>(std::nullptr_t,\
    \ const std::unique_ptr<_Tp, _Dp>&)\u2019\n  802 |     operator>(nullptr_t, const\
    \ unique_ptr<_Tp, _Dp>& __x)\n      |     ^~~~~~~~\n/usr/include/c++/9/bits/unique_ptr.h:802:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmpkl58glb2.cpp:47:51:\
    \ note:   mismatched types \u2018const std::unique_ptr<_Tp, _Dp>\u2019 and \u2018\
    int\u2019\n   47 |     if(date.substr(4,2) < 1 || date.substr(4,2) > 12) {\n \
    \     |                                                   ^~\nIn file included\
    \ from /usr/include/c++/9/list:63,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:79,\n\
    \                 from /tmp/tmpkl58glb2.cpp:2:\n/usr/include/c++/9/bits/stl_list.h:2038:5:\
    \ note: candidate: \u2018template<class _Tp, class _Alloc> bool std::operator>(const\
    \ std::__cxx11::list<_Tp, _Alloc>&, const std::__cxx11::list<_Tp, _Alloc>&)\u2019\
    \n 2038 |     operator>(const list<_Tp, _Alloc>& __x, const list<_Tp, _Alloc>&\
    \ __y)\n      |     ^~~~~~~~\n/usr/include/c++/9/bits/stl_list.h:2038:5: note:\
    \   template argument deduction/substitution failed:\n/tmp/tmpkl58glb2.cpp:47:51:\
    \ note:   \u2018std::__cxx11::basic_string<char>\u2019 is not derived from \u2018\
    const std::__cxx11::list<_Tp, _Alloc>\u2019\n   47 |     if(date.substr(4,2) <\
    \ 1 || date.substr(4,2) > 12) {\n      |                                     \
    \              ^~\nIn file included from /usr/include/c++/9/map:61,\n        \
    \         from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:81,\n       \
    \          from /tmp/tmpkl58glb2.cpp:2:\n/usr/include/c++/9/bits/stl_map.h:1486:5:\
    \ note: candidate: \u2018template<class _Key, class _Tp, class _Compare, class\
    \ _Alloc> bool std::operator>(const std::map<_Key, _Tp, _Compare, _Alloc>&, const\
    \ std::map<_Key, _Tp, _Compare, _Alloc>&)\u2019\n 1486 |     operator>(const map<_Key,\
    \ _Tp, _Compare, _Alloc>& __x,\n      |     ^~~~~~~~\n/usr/include/c++/9/bits/stl_map.h:1486:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmpkl58glb2.cpp:47:51:\
    \ note:   \u2018std::__cxx11::basic_string<char>\u2019 is not derived from \u2018\
    const std::map<_Key, _Tp, _Compare, _Alloc>\u2019\n   47 |     if(date.substr(4,2)\
    \ < 1 || date.substr(4,2) > 12) {\n      |                                   \
    \                ^~\nIn file included from /usr/include/c++/9/map:62,\n      \
    \           from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:81,\n     \
    \            from /tmp/tmpkl58glb2.cpp:2:\n/usr/include/c++/9/bits/stl_multimap.h:1150:5:\
    \ note: candidate: \u2018template<class _Key, class _Tp, class _Compare, class\
    \ _Alloc> bool std::operator>(const std::multimap<_Key, _Tp, _Compare, _Alloc>&,\
    \ const std::multimap<_Key, _Tp, _Compare, _Alloc>&)\u2019\n 1150 |     operator>(const\
    \ multimap<_Key, _Tp, _Compare, _Alloc>& __x,\n      |     ^~~~~~~~\n/usr/include/c++/9/bits/stl_multimap.h:1150:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmpkl58glb2.cpp:47:51:\
    \ note:   \u2018std::__cxx11::basic_string<char>\u2019 is not derived from \u2018\
    const std::multimap<_Key, _Tp, _Compare, _Alloc>\u2019\n   47 |     if(date.substr(4,2)\
    \ < 1 || date.substr(4,2) > 12) {\n      |                                   \
    \                ^~\nIn file included from /usr/include/c++/9/bits/shared_ptr.h:52,\n\
    \                 from /usr/include/c++/9/memory:81,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:82,\n\
    \                 from /tmp/tmpkl58glb2.cpp:2:\n/usr/include/c++/9/bits/shared_ptr_base.h:1487:5:\
    \ note: candidate: \u2018template<class _Tp1, class _Tp2, __gnu_cxx::_Lock_policy\
    \ _Lp> bool std::operator>(const std::__shared_ptr<_Tp1, _Lp>&, const std::__shared_ptr<_Tp2,\
    \ _Lp>&)\u2019\n 1487 |     operator>(const __shared_ptr<_Tp1, _Lp>& __a,\n  \
    \    |     ^~~~~~~~\n/usr/include/c++/9/bits/shared_ptr_base.h:1487:5: note: \
    \  template argument deduction/substitution failed:\n/tmp/tmpkl58glb2.cpp:47:51:\
    \ note:   \u2018std::__cxx11::basic_string<char>\u2019 is not derived from \u2018\
    const std::__shared_ptr<_Tp1, _Lp>\u2019\n   47 |     if(date.substr(4,2) < 1\
    \ || date.substr(4,2) > 12) {\n      |                                       \
    \            ^~\nIn file included from /usr/include/c++/9/bits/shared_ptr.h:52,\n\
    \                 from /usr/include/c++/9/memory:81,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:82,\n\
    \                 from /tmp/tmpkl58glb2.cpp:2:\n/usr/include/c++/9/bits/shared_ptr_base.h:1493:5:\
    \ note: candidate: \u2018template<class _Tp, __gnu_cxx::_Lock_policy _Lp> bool\
    \ std::operator>(const std::__shared_ptr<_Tp, _Lp>&, std::nullptr_t)\u2019\n 1493\
    \ |     operator>(const __shared_ptr<_Tp, _Lp>& __a, nullptr_t) noexcept\n   \
    \   |     ^~~~~~~~\n/usr/include/c++/9/bits/shared_ptr_base.h:1493:5: note:  \
    \ template argument deduction/substitution failed:\n/tmp/tmpkl58glb2.cpp:47:51:\
    \ note:   \u2018std::__cxx11::basic_string<char>\u2019 is not derived from \u2018\
    const std::__shared_ptr<_Tp, _Lp>\u2019\n   47 |     if(date.substr(4,2) < 1 ||\
    \ date.substr(4,2) > 12) {\n      |                                          \
    \         ^~\nIn file included from /usr/include/c++/9/bits/shared_ptr.h:52,\n\
    \                 from /usr/include/c++/9/memory:81,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:82,\n\
    \                 from /tmp/tmpkl58glb2.cpp:2:\n/usr/include/c++/9/bits/shared_ptr_base.h:1498:5:\
    \ note: candidate: \u2018template<class _Tp, __gnu_cxx::_Lock_policy _Lp> bool\
    \ std::operator>(std::nullptr_t, const std::__shared_ptr<_Tp, _Lp>&)\u2019\n 1498\
    \ |     operator>(nullptr_t, const __shared_ptr<_Tp, _Lp>& __a) noexcept\n   \
    \   |     ^~~~~~~~\n/usr/include/c++/9/bits/shared_ptr_base.h:1498:5: note:  \
    \ template argument deduction/substitution failed:\n/tmp/tmpkl58glb2.cpp:47:51:\
    \ note:   mismatched types \u2018const std::__shared_ptr<_Tp, _Lp>\u2019 and \u2018\
    int\u2019\n   47 |     if(date.substr(4,2) < 1 || date.substr(4,2) > 12) {\n \
    \     |                                                   ^~\nIn file included\
    \ from /usr/include/c++/9/memory:81,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:82,\n\
    \                 from /tmp/tmpkl58glb2.cpp:2:\n/usr/include/c++/9/bits/shared_ptr.h:454:5:\
    \ note: candidate: \u2018template<class _Tp, class _Up> bool std::operator>(const\
    \ std::shared_ptr<_Tp>&, const std::shared_ptr<_Tp>&)\u2019\n  454 |     operator>(const\
    \ shared_ptr<_Tp>& __a, const shared_ptr<_Up>& __b) noexcept\n      |     ^~~~~~~~\n\
    /usr/include/c++/9/bits/shared_ptr.h:454:5: note:   template argument deduction/substitution\
    \ failed:\n/tmp/tmpkl58glb2.cpp:47:51: note:   \u2018std::__cxx11::basic_string<char>\u2019\
    \ is not derived from \u2018const std::shared_ptr<_Tp>\u2019\n   47 |     if(date.substr(4,2)\
    \ < 1 || date.substr(4,2) > 12) {\n      |                                   \
    \                ^~\nIn file included from /usr/include/c++/9/memory:81,\n   \
    \              from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:82,\n  \
    \               from /tmp/tmpkl58glb2.cpp:2:\n/usr/include/c++/9/bits/shared_ptr.h:459:5:\
    \ note: candidate: \u2018template<class _Tp> bool std::operator>(const std::shared_ptr<_Tp>&,\
    \ std::nullptr_t)\u2019\n  459 |     operator>(const shared_ptr<_Tp>& __a, nullptr_t)\
    \ noexcept\n      |     ^~~~~~~~\n/usr/include/c++/9/bits/shared_ptr.h:459:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmpkl58glb2.cpp:47:51:\
    \ note:   \u2018std::__cxx11::basic_string<char>\u2019 is not derived from \u2018\
    const std::shared_ptr<_Tp>\u2019\n   47 |     if(date.substr(4,2) < 1 || date.substr(4,2)\
    \ > 12) {\n      |                                                   ^~\nIn file\
    \ included from /usr/include/c++/9/memory:81,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:82,\n\
    \                 from /tmp/tmpkl58glb2.cpp:2:\n/usr/include/c++/9/bits/shared_ptr.h:464:5:\
    \ note: candidate: \u2018template<class _Tp> bool std::operator>(std::nullptr_t,\
    \ const std::shared_ptr<_Tp>&)\u2019\n  464 |     operator>(nullptr_t, const shared_ptr<_Tp>&\
    \ __a) noexcept\n      |     ^~~~~~~~\n/usr/include/c++/9/bits/shared_ptr.h:464:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmpkl58glb2.cpp:47:51:\
    \ note:   mismatched types \u2018const std::shared_ptr<_Tp>\u2019 and \u2018int\u2019\
    \n   47 |     if(date.substr(4,2) < 1 || date.substr(4,2) > 12) {\n      |   \
    \                                                ^~\nIn file included from /usr/include/c++/9/vector:67,\n\
    \                 from /usr/include/c++/9/queue:61,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:86,\n\
    \                 from /tmp/tmpkl58glb2.cpp:2:\n/usr/include/c++/9/bits/stl_vector.h:1918:5:\
    \ note: candidate: \u2018template<class _Tp, class _Alloc> bool std::operator>(const\
    \ std::vector<_Tp, _Alloc>&, const std::vector<_Tp, _Alloc>&)\u2019\n 1918 | \
    \    operator>(const vector<_Tp, _Alloc>& __x, const vector<_Tp, _Alloc>& __y)\n\
    \      |     ^~~~~~~~\n/usr/include/c++/9/bits/stl_vector.h:1918:5: note:   template\
    \ argument deduction/substitution failed:\n/tmp/tmpkl58glb2.cpp:47:51: note: \
    \  \u2018std::__cxx11::basic_string<char>\u2019 is not derived from \u2018const\
    \ std::vector<_Tp, _Alloc>\u2019\n   47 |     if(date.substr(4,2) < 1 || date.substr(4,2)\
    \ > 12) {\n      |                                                   ^~\nIn file\
    \ included from /usr/include/c++/9/queue:64,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:86,\n\
    \                 from /tmp/tmpkl58glb2.cpp:2:\n/usr/include/c++/9/bits/stl_queue.h:368:5:\
    \ note: candidate: \u2018template<class _Tp, class _Seq> bool std::operator>(const\
    \ std::queue<_Tp, _Seq>&, const std::queue<_Tp, _Seq>&)\u2019\n  368 |     operator>(const\
    \ queue<_Tp, _Seq>& __x, const queue<_Tp, _Seq>& __y)\n      |     ^~~~~~~~\n\
    /usr/include/c++/9/bits/stl_queue.h:368:5: note:   template argument deduction/substitution\
    \ failed:\n/tmp/tmpkl58glb2.cpp:47:51: note:   \u2018std::__cxx11::basic_string<char>\u2019\
    \ is not derived from \u2018const std::queue<_Tp, _Seq>\u2019\n   47 |     if(date.substr(4,2)\
    \ < 1 || date.substr(4,2) > 12) {\n      |                                   \
    \                ^~\nIn file included from /usr/include/c++/9/set:61,\n      \
    \           from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:87,\n     \
    \            from /tmp/tmpkl58glb2.cpp:2:\n/usr/include/c++/9/bits/stl_set.h:1010:5:\
    \ note: candidate: \u2018template<class _Key, class _Compare, class _Alloc> bool\
    \ std::operator>(const std::set<_Key, _Compare, _Alloc>&, const std::set<_Key,\
    \ _Compare, _Alloc>&)\u2019\n 1010 |     operator>(const set<_Key, _Compare, _Alloc>&\
    \ __x,\n      |     ^~~~~~~~\n/usr/include/c++/9/bits/stl_set.h:1010:5: note:\
    \   template argument deduction/substitution failed:\n/tmp/tmpkl58glb2.cpp:47:51:\
    \ note:   \u2018std::__cxx11::basic_string<char>\u2019 is not derived from \u2018\
    const std::set<_Key, _Compare, _Alloc>\u2019\n   47 |     if(date.substr(4,2)\
    \ < 1 || date.substr(4,2) > 12) {\n      |                                   \
    \                ^~\nIn file included from /usr/include/c++/9/set:62,\n      \
    \           from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:87,\n     \
    \            from /tmp/tmpkl58glb2.cpp:2:\n/usr/include/c++/9/bits/stl_multiset.h:995:5:\
    \ note: candidate: \u2018template<class _Key, class _Compare, class _Alloc> bool\
    \ std::operator>(const std::multiset<_Key, _Compare, _Alloc>&, const std::multiset<_Key,\
    \ _Compare, _Alloc>&)\u2019\n  995 |     operator>(const multiset<_Key,_Compare,_Alloc>&\
    \ __x,\n      |     ^~~~~~~~\n/usr/include/c++/9/bits/stl_multiset.h:995:5: note:\
    \   template argument deduction/substitution failed:\n/tmp/tmpkl58glb2.cpp:47:51:\
    \ note:   \u2018std::__cxx11::basic_string<char>\u2019 is not derived from \u2018\
    const std::multiset<_Key, _Compare, _Alloc>\u2019\n   47 |     if(date.substr(4,2)\
    \ < 1 || date.substr(4,2) > 12) {\n      |                                   \
    \                ^~\nIn file included from /usr/include/c++/9/stack:61,\n    \
    \             from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:89,\n   \
    \              from /tmp/tmpkl58glb2.cpp:2:\n/usr/include/c++/9/bits/stl_stack.h:343:5:\
    \ note: candidate: \u2018template<class _Tp, class _Seq> bool std::operator>(const\
    \ std::stack<_Tp, _Seq>&, const std::stack<_Tp, _Seq>&)\u2019\n  343 |     operator>(const\
    \ stack<_Tp, _Seq>& __x, const stack<_Tp, _Seq>& __y)\n      |     ^~~~~~~~\n\
    /usr/include/c++/9/bits/stl_stack.h:343:5: note:   template argument deduction/substitution\
    \ failed:\n/tmp/tmpkl58glb2.cpp:47:51: note:   \u2018std::__cxx11::basic_string<char>\u2019\
    \ is not derived from \u2018const std::stack<_Tp, _Seq>\u2019\n   47 |     if(date.substr(4,2)\
    \ < 1 || date.substr(4,2) > 12) {\n      |                                   \
    \                ^~\nIn file included from /usr/include/c++/9/valarray:603,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:95,\n\
    \                 from /tmp/tmpkl58glb2.cpp:2:\n/usr/include/c++/9/bits/valarray_after.h:420:5:\
    \ note: candidate: \u2018template<class _Dom1, class _Dom2> std::_Expr<std::__detail::_BinClos<std::__greater,\
    \ std::_Expr, std::_Expr, _Dom1, _Dom2>, typename std::__fun<std::__greater, typename\
    \ _Dom1::value_type>::result_type> std::operator>(const std::_Expr<_Dom1, typename\
    \ _Dom1::value_type>&, const std::_Expr<_Dom2, typename _Dom2::value_type>&)\u2019\
    \n  420 |     _DEFINE_EXPR_BINARY_OPERATOR(>, __greater)\n      |     ^~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /usr/include/c++/9/bits/valarray_after.h:420:5: note:   template argument deduction/substitution\
    \ failed:\n/tmp/tmpkl58glb2.cpp:47:51: note:   \u2018std::__cxx11::basic_string<char>\u2019\
    \ is not derived from \u2018const std::_Expr<_Dom1, typename _Dom1::value_type>\u2019\
    \n   47 |     if(date.substr(4,2) < 1 || date.substr(4,2) > 12) {\n      |   \
    \                                                ^~\nIn file included from /usr/include/c++/9/valarray:603,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:95,\n\
    \                 from /tmp/tmpkl58glb2.cpp:2:\n/usr/include/c++/9/bits/valarray_after.h:420:5:\
    \ note: candidate: \u2018template<class _Dom> std::_Expr<std::__detail::_BinClos<std::__greater,\
    \ std::_Expr, std::_Constant, _Dom, typename _Dom::value_type>, typename std::__fun<std::__greater,\
    \ typename _Dom1::value_type>::result_type> std::operator>(const std::_Expr<_Dom1,\
    \ typename _Dom1::value_type>&, const typename _Dom::value_type&)\u2019\n  420\
    \ |     _DEFINE_EXPR_BINARY_OPERATOR(>, __greater)\n      |     ^~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /usr/include/c++/9/bits/valarray_after.h:420:5: note:   template argument deduction/substitution\
    \ failed:\n/tmp/tmpkl58glb2.cpp:47:51: note:   \u2018std::__cxx11::basic_string<char>\u2019\
    \ is not derived from \u2018const std::_Expr<_Dom1, typename _Dom1::value_type>\u2019\
    \n   47 |     if(date.substr(4,2) < 1 || date.substr(4,2) > 12) {\n      |   \
    \                                                ^~\nIn file included from /usr/include/c++/9/valarray:603,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:95,\n\
    \                 from /tmp/tmpkl58glb2.cpp:2:\n/usr/include/c++/9/bits/valarray_after.h:420:5:\
    \ note: candidate: \u2018template<class _Dom> std::_Expr<std::__detail::_BinClos<std::__greater,\
    \ std::_Constant, std::_Expr, typename _Dom::value_type, _Dom>, typename std::__fun<std::__greater,\
    \ typename _Dom1::value_type>::result_type> std::operator>(const typename _Dom::value_type&,\
    \ const std::_Expr<_Dom1, typename _Dom1::value_type>&)\u2019\n  420 |     _DEFINE_EXPR_BINARY_OPERATOR(>,\
    \ __greater)\n      |     ^~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/usr/include/c++/9/bits/valarray_after.h:420:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmpkl58glb2.cpp:47:51:\
    \ note:   mismatched types \u2018const std::_Expr<_Dom1, typename _Dom1::value_type>\u2019\
    \ and \u2018int\u2019\n   47 |     if(date.substr(4,2) < 1 || date.substr(4,2)\
    \ > 12) {\n      |                                                   ^~\nIn file\
    \ included from /usr/include/c++/9/valarray:603,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:95,\n\
    \                 from /tmp/tmpkl58glb2.cpp:2:\n/usr/include/c++/9/bits/valarray_after.h:420:5:\
    \ note: candidate: \u2018template<class _Dom> std::_Expr<std::__detail::_BinClos<std::__greater,\
    \ std::_Expr, std::_ValArray, _Dom, typename _Dom::value_type>, typename std::__fun<std::__greater,\
    \ typename _Dom1::value_type>::result_type> std::operator>(const std::_Expr<_Dom1,\
    \ typename _Dom1::value_type>&, const std::valarray<typename _Dom::value_type>&)\u2019\
    \n  420 |     _DEFINE_EXPR_BINARY_OPERATOR(>, __greater)\n      |     ^~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /usr/include/c++/9/bits/valarray_after.h:420:5: note:   template argument deduction/substitution\
    \ failed:\n/tmp/tmpkl58glb2.cpp:47:51: note:   \u2018std::__cxx11::basic_string<char>\u2019\
    \ is not derived from \u2018const std::_Expr<_Dom1, typename _Dom1::value_type>\u2019\
    \n   47 |     if(date.substr(4,2) < 1 || date.substr(4,2) > 12) {\n      |   \
    \                                                ^~\nIn file included from /usr/include/c++/9/valarray:603,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:95,\n\
    \                 from /tmp/tmpkl58glb2.cpp:2:\n/usr/include/c++/9/bits/valarray_after.h:420:5:\
    \ note: candidate: \u2018template<class _Dom> std::_Expr<std::__detail::_BinClos<std::__greater,\
    \ std::_ValArray, std::_Expr, typename _Dom::value_type, _Dom>, typename std::__fun<std::__greater,\
    \ typename _Dom1::value_type>::result_type> std::operator>(const std::valarray<typename\
    \ _Dom::value_type>&, const std::_Expr<_Dom1, typename _Dom1::value_type>&)\u2019\
    \n  420 |     _DEFINE_EXPR_BINARY_OPERATOR(>, __greater)\n      |     ^~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /usr/include/c++/9/bits/valarray_after.h:420:5: note:   template argument deduction/substitution\
    \ failed:\n/tmp/tmpkl58glb2.cpp:47:51: note:   mismatched types \u2018const std::_Expr<_Dom1,\
    \ typename _Dom1::value_type>\u2019 and \u2018int\u2019\n   47 |     if(date.substr(4,2)\
    \ < 1 || date.substr(4,2) > 12) {\n      |                                   \
    \                ^~\nIn file included from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:95,\n\
    \                 from /tmp/tmpkl58glb2.cpp:2:\n/usr/include/c++/9/valarray:1200:1:\
    \ note: candidate: \u2018template<class _Tp> std::_Expr<std::__detail::_BinClos<std::__greater,\
    \ std::_ValArray, std::_ValArray, _Tp, _Tp>, typename std::__fun<std::__greater,\
    \ _Tp>::result_type> std::operator>(const std::valarray<_Tp>&, const std::valarray<_Tp>&)\u2019\
    \n 1200 | _DEFINE_BINARY_OPERATOR(>, __greater)\n      | ^~~~~~~~~~~~~~~~~~~~~~~\n\
    /usr/include/c++/9/valarray:1200:1: note:   template argument deduction/substitution\
    \ failed:\n/tmp/tmpkl58glb2.cpp:47:51: note:   \u2018std::__cxx11::basic_string<char>\u2019\
    \ is not derived from \u2018const std::valarray<_Tp>\u2019\n   47 |     if(date.substr(4,2)\
    \ < 1 || date.substr(4,2) > 12) {\n      |                                   \
    \                ^~\nIn file included from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:95,\n\
    \                 from /tmp/tmpkl58glb2.cpp:2:\n/usr/include/c++/9/valarray:1200:1:\
    \ note: candidate: \u2018template<class _Tp> std::_Expr<std::__detail::_BinClos<std::__greater,\
    \ std::_ValArray, std::_Constant, _Tp, _Tp>, typename std::__fun<std::__greater,\
    \ _Tp>::result_type> std::operator>(const std::valarray<_Tp>&, const typename\
    \ std::valarray<_Tp>::value_type&)\u2019\n 1200 | _DEFINE_BINARY_OPERATOR(>, __greater)\n\
    \      | ^~~~~~~~~~~~~~~~~~~~~~~\n/usr/include/c++/9/valarray:1200:1: note:  \
    \ template argument deduction/substitution failed:\n/tmp/tmpkl58glb2.cpp:47:51:\
    \ note:   \u2018std::__cxx11::basic_string<char>\u2019 is not derived from \u2018\
    const std::valarray<_Tp>\u2019\n   47 |     if(date.substr(4,2) < 1 || date.substr(4,2)\
    \ > 12) {\n      |                                                   ^~\nIn file\
    \ included from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:95,\n      \
    \           from /tmp/tmpkl58glb2.cpp:2:\n/usr/include/c++/9/valarray:1200:1:\
    \ note: candidate: \u2018template<class _Tp> std::_Expr<std::__detail::_BinClos<std::__greater,\
    \ std::_Constant, std::_ValArray, _Tp, _Tp>, typename std::__fun<std::__greater,\
    \ _Tp>::result_type> std::operator>(const typename std::valarray<_Tp>::value_type&,\
    \ const std::valarray<_Tp>&)\u2019\n 1200 | _DEFINE_BINARY_OPERATOR(>, __greater)\n\
    \      | ^~~~~~~~~~~~~~~~~~~~~~~\n/usr/include/c++/9/valarray:1200:1: note:  \
    \ template argument deduction/substitution failed:\n/tmp/tmpkl58glb2.cpp:47:51:\
    \ note:   mismatched types \u2018const std::valarray<_Tp>\u2019 and \u2018int\u2019\
    \n   47 |     if(date.substr(4,2) < 1 || date.substr(4,2) > 12) {\n      |   \
    \                                                ^~\nIn file included from /usr/include/c++/9/forward_list:38,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:104,\n\
    \                 from /tmp/tmpkl58glb2.cpp:2:\n/usr/include/c++/9/bits/forward_list.h:1458:5:\
    \ note: candidate: \u2018template<class _Tp, class _Alloc> bool std::operator>(const\
    \ std::forward_list<_Tp, _Alloc>&, const std::forward_list<_Tp, _Alloc>&)\u2019\
    \n 1458 |     operator>(const forward_list<_Tp, _Alloc>& __lx,\n      |     ^~~~~~~~\n\
    /usr/include/c++/9/bits/forward_list.h:1458:5: note:   template argument deduction/substitution\
    \ failed:\n/tmp/tmpkl58glb2.cpp:47:51: note:   \u2018std::__cxx11::basic_string<char>\u2019\
    \ is not derived from \u2018const std::forward_list<_Tp, _Alloc>\u2019\n   47\
    \ |     if(date.substr(4,2) < 1 || date.substr(4,2) > 12) {\n      |         \
    \                                          ^~\nIn file included from /usr/include/c++/9/future:39,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:105,\n\
    \                 from /tmp/tmpkl58glb2.cpp:2:\n/usr/include/c++/9/thread:302:3:\
    \ note: candidate: \u2018bool std::operator>(std::thread::id, std::thread::id)\u2019\
    \n  302 |   operator>(thread::id __x, thread::id __y) noexcept\n      |   ^~~~~~~~\n\
    /usr/include/c++/9/thread:302:24: note:   no known conversion for argument 1 from\
    \ \u2018std::__cxx11::basic_string<char>\u2019 to \u2018std::thread::id\u2019\n\
    \  302 |   operator>(thread::id __x, thread::id __y) noexcept\n      |       \
    \      ~~~~~~~~~~~^~~\nIn file included from /usr/include/c++/9/bits/stl_algobase.h:67,\n\
    \                 from /usr/include/c++/9/bits/char_traits.h:39,\n           \
    \      from /usr/include/c++/9/ios:40,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmpkl58glb2.cpp:2:\n/usr/include/c++/9/bits/stl_iterator.h:926:5: note:\
    \ candidate: \u2018template<class _IteratorL, class _IteratorR, class _Container>\
    \ bool __gnu_cxx::operator>(const __gnu_cxx::__normal_iterator<_IteratorL, _Container>&,\
    \ const __gnu_cxx::__normal_iterator<_IteratorR, _Container>&)\u2019\n  926 |\
    \     operator>(const __normal_iterator<_IteratorL, _Container>& __lhs,\n    \
    \  |     ^~~~~~~~\n/usr/include/c++/9/bits/stl_iterator.h:926:5: note:   template\
    \ argument deduction/substitution failed:\n/tmp/tmpkl58glb2.cpp:47:51: note: \
    \  \u2018std::__cxx11::basic_string<char>\u2019 is not derived from \u2018const\
    \ __gnu_cxx::__normal_iterator<_IteratorL, _Container>\u2019\n   47 |     if(date.substr(4,2)\
    \ < 1 || date.substr(4,2) > 12) {\n      |                                   \
    \                ^~\nIn file included from /usr/include/c++/9/bits/stl_algobase.h:67,\n\
    \                 from /usr/include/c++/9/bits/char_traits.h:39,\n           \
    \      from /usr/include/c++/9/ios:40,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmpkl58glb2.cpp:2:\n/usr/include/c++/9/bits/stl_iterator.h:933:5: note:\
    \ candidate: \u2018template<class _Iterator, class _Container> bool __gnu_cxx::operator>(const\
    \ __gnu_cxx::__normal_iterator<_Iterator, _Container>&, const __gnu_cxx::__normal_iterator<_Iterator,\
    \ _Container>&)\u2019\n  933 |     operator>(const __normal_iterator<_Iterator,\
    \ _Container>& __lhs,\n      |     ^~~~~~~~\n/usr/include/c++/9/bits/stl_iterator.h:933:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmpkl58glb2.cpp:47:51:\
    \ note:   \u2018std::__cxx11::basic_string<char>\u2019 is not derived from \u2018\
    const __gnu_cxx::__normal_iterator<_Iterator, _Container>\u2019\n   47 |     if(date.substr(4,2)\
    \ < 1 || date.substr(4,2) > 12) {\n      |                                   \
    \                ^~\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n    // Write your code here\n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n}\nint main() {\n    auto candidate = valid_date;\n\
    \    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"\
    15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n\
    \    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"\
    01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n\
    \    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\"\
    )) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"\
    21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n\
    \    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\"\
    )) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"\
    2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmp4dfno5fx: /tmp/tmp4dfno5fx.cpp:275: int main(): Assertion `candidate((\"\
    03-11-2000\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n    // Write your code here\n    \n    int day;\n\
    \    int month;\n    int year;\n    \n    std::stringstream ss(date);\n    ss\
    \ >> month >> day >> year;\n    \n    if(month < 1 || month > 12){\n        return\
    \ false;\n    }\n    \n    if(day < 1 || day > 31){\n        return false;\n \
    \   }\n    \n    if(month == 2){\n        if(day > 29){\n            return false;\n\
    \        }\n    }\n    \n    if(month == 4 || month == 6 || month == 9 || month\
    \ == 11){\n        if(day > 30){\n            return false;\n        }\n    }\n\
    \    \n    if(month == 1){\n        if(day > 31){\n            return false;\n\
    \        }\n    }\n    \n    if(day > 31){\n        return false;\n    }\n   \
    \ \n    if(year < 1000 || year > 2020){\n        return false;\n    }\n    \n\
    \    return true;\n}\nint main() {\n    auto candidate = valid_date;\n    assert(candidate((\"\
    03-11-2000\")) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n\
    \    assert(candidate((\"04-0-2040\")) == (false));\n    assert(candidate((\"\
    06-04-2020\")) == (true));\n    assert(candidate((\"01-01-2007\")) == (true));\n\
    \    assert(candidate((\"03-32-2011\")) == (false));\n    assert(candidate((\"\
    \")) == (false));\n    assert(candidate((\"04-31-3000\")) == (false));\n    assert(candidate((\"\
    06-06-2005\")) == (true));\n    assert(candidate((\"21-31-2000\")) == (false));\n\
    \    assert(candidate((\"04-12-2003\")) == (true));\n    assert(candidate((\"\
    04122003\")) == (false));\n    assert(candidate((\"20030412\")) == (false));\n\
    \    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"2003-04-12\"\
    )) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n}\n"
  stdout: ''
  stderr: "tmpoa3ibzss: /tmp/tmpoa3ibzss.cpp:64: int main(): Assertion `candidate((\"\
    03-11-2000\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n    // Write your code here\n    \n    // Write\
    \ your code here\n    \n    // Write your code here\n    \n    // Write your code\
    \ here\n    \n    // Write your code here\n    \n    // Write your code here\n\
    \    \n    // Write your code here\n    \n    // Write your code here\n    \n\
    \    // Write your code here\n    \n    // Write your code here\n    \n    //\
    \ Write your code here\n    \n    // Write your code here\n    \n    // Write\
    \ your code here\n    \n    // Write your code here\n    \n    // Write your code\
    \ here\n    \n    // Write your code here\n    \n    // Write your code here\n\
    \    \n    // Write your code here\n    \n    // Write your code here\n    \n\
    \    // Write your code here\n    \n    // Write your code here\n    \n    //\
    \ Write your code here\n    \n    // Write your code here\n    \n    // Write\
    \ your code here\n    \n    // Write your code here\n    \n    // Write your code\
    \ here\n    \n    // Write your code here\n    \n    // Write your code here\n\
    \    \n    // Write your code here\n    \n    // Write your code here\n    \n\
    \    // Write your code here\n    \n    // Write your code here\n    \n    //\
    \ Write your code here\n    \n    // Write your code here\n    \n    // Write\
    \ your code here\n    \n    // Write your code here\n    \n    // Write your code\
    \ here\n    \n    // Write your code here\n    \n    // Write your code here\n\
    \    \n    // Write your code here\n    \n    // Write your code here\n    \n\
    \    // Write your code here\n    \n    // Write your code here\n    \n    //\
    \ Write your code here\n    \n    // Write your code here\n    \n    // Write\
    \ your code here\n    \n    // Write your code here\n    \n    // Write your code\
    \ here\n    \n    // Write your code here\n    \n    // Write your code here\n\
    \    \n    // Write your code here\n    \n    // Write your code here\n    \n\
    \    // Write your code here\n    \n    // Write your code here\n    \n    //\
    \ Write your code here\n    \n    // Write your code here\n    \n    // Write\
    \ your code here\n    \n    // Write your code here\n    \n    // Write your code\
    \ here\n    \n    // Write your code here\n    \n    // Write your code here\n\
    \    \n    // Write your code here\n    \n    // Write your code here\n    \n\
    \    // Write your code here\n    \n    // Write your code here\n    \n    //\
    \ Write your code here\n    \n    // Write your code here\n    \n    // Write\
    \ your code here\n    \n    // Write your code here\n    \n    // Write your code\
    \ here\n    \n    // Write your code here\n    \n    // Write your code here\n\
    \    \n    // Write your code here\n    \n    // \n}\nint main() {\n    auto candidate\
    \ = valid_date;\n    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"\
    15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n\
    \    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"\
    01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n\
    \    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\"\
    )) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"\
    21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n\
    \    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\"\
    )) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"\
    2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmpsf7a6d5t: /tmp/tmpsf7a6d5t.cpp:167: int main(): Assertion `candidate((\"\
    03-11-2000\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n    // Write your code here\n    \n    // Write\
    \ your code here\n    \n    // Write your code here\n    \n    // Write your code\
    \ here\n    \n    // Write your code here\n    \n    // Write your code here\n\
    \    \n    // Write your code here\n    \n    // Write your code here\n    \n\
    \    // Write your code here\n    \n    // Write your code here\n    \n    //\
    \ Write your code here\n    \n    // Write your code here\n    \n    // Write\
    \ your code here\n    \n    // Write your code here\n    \n    // Write your code\
    \ here\n    \n    // Write your code here\n    \n    // Write your code here\n\
    \    \n    // Write your code here\n    \n    // Write your code here\n    \n\
    \    // Write your code here\n    \n    // Write your code here\n    \n    //\
    \ Write your code here\n    \n    // Write your code here\n    \n    // Write\
    \ your code here\n    \n    // Write your code here\n    \n    // Write your code\
    \ here\n    \n    // Write your code here\n    \n    // Write your code here\n\
    \    \n    // Write your code here\n    \n    // Write your code here\n    \n\
    \    // Write your code here\n    \n    // Write your code here\n    \n    //\
    \ Write your code here\n    \n    // Write your code here\n    \n    // Write\
    \ your code here\n    \n    // Write your code here\n    \n    // Write your code\
    \ here\n    \n    // Write your code here\n    \n    // Write your code here\n\
    \    \n    // Write your code here\n    \n    // Write your code here\n    \n\
    \    // Write your code here\n    \n    // Write your code here\n    \n    //\
    \ Write your code here\n    \n    // Write your code here\n    \n    // Write\
    \ your code here\n    \n    // Write your code here\n    \n    // Write your code\
    \ here\n    \n    // Write your code here\n    \n    // Write your code here\n\
    \    \n    // Write your code here\n    \n    // Write your code here\n    \n\
    \    // Write your code here\n    \n    // Write your code here\n    \n    //\
    \ Write your code here\n    \n    // Write your code here\n    \n    // Write\
    \ your code here\n    \n    // Write your code here\n    \n    // Write your code\
    \ here\n    \n    // Write your code here\n    \n    // Write your code here\n\
    \    \n    // Write your code here\n    \n    // Write your code here\n    \n\
    \    // Write your code here\n    \n    // Write your code here\n    \n    //\
    \ Write your code here\n    \n    // Write your code here\n    \n    // Write\
    \ your code here\n    \n    // Write your code here\n    \n    // Write your code\
    \ here\n    \n    // Write your code here\n    \n    // Write your code here\n\
    \    \n    // Write your code here\n    \n    // \n}\nint main() {\n    auto candidate\
    \ = valid_date;\n    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"\
    15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n\
    \    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"\
    01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n\
    \    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\"\
    )) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"\
    21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n\
    \    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\"\
    )) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"\
    2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmp9bfruqax: /tmp/tmp9bfruqax.cpp:167: int main(): Assertion `candidate((\"\
    03-11-2000\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n    bool valid = true;\n    int day;\n    int\
    \ month;\n    int year;\n    std::stringstream ss(date);\n    ss >> month >> day\
    \ >> year;\n    if (month < 1 || month > 12 || day < 1 || day > 31 || year < 2000\
    \ || year > 2040) {\n        valid = false;\n    }\n    return valid;\n}\nint\
    \ main() {\n    auto candidate = valid_date;\n    assert(candidate((\"03-11-2000\"\
    )) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"\
    04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n\
    \    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"\
    03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"\
    04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n\
    \    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"\
    04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n\
    \    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\"\
    )) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"\
    04-2003\")) == (false));\n}\n"
  stdout: ''
  stderr: "tmpul7h1xiy: /tmp/tmpul7h1xiy.cpp:30: int main(): Assertion `candidate((\"\
    03-11-2000\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n    // Write your code here\n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n}\nint main() {\n    auto candidate = valid_date;\n\
    \    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"\
    15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n\
    \    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"\
    01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n\
    \    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\"\
    )) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"\
    21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n\
    \    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\"\
    )) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"\
    2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmpjiq78myw: /tmp/tmpjiq78myw.cpp:275: int main(): Assertion `candidate((\"\
    03-11-2000\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n    // Write your code here\n    bool valid\
    \ = false;\n    std::string months[12] = {\n        \"January\", \"February\"\
    , \"March\", \"April\", \"May\", \"June\",\n        \"July\", \"August\", \"September\"\
    , \"October\", \"November\", \"December\"\n    };\n    int days[12] = {\n    \
    \    31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31\n    };\n    int months[12]\
    \ = {\n        0, 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31\n    };\n   \
    \ int daysInMonth[12] = {\n        0, 31, 29, 31, 30, 31, 30, 31, 31, 30, 31,\
    \ 30, 31\n    };\n    int day;\n    int month;\n    int year;\n    std::string\
    \ temp;\n    temp = date;\n    temp = temp.substr(0, temp.find_first_of('-'));\n\
    \    temp = temp.substr(temp.find_first_of('-') + 1, temp.find_last_of('-') -\
    \ temp.find_first_of('-') - 1);\n    temp = temp.substr(0, temp.find_first_of('/'));\n\
    \    temp = temp.substr(temp.find_first_of('/') + 1, temp.find_last_of('/') -\
    \ temp.find_first_of('/') - 1);\n    temp = temp.substr(0, temp.find_first_of('.'));\n\
    \    temp = temp.substr(temp.find_first_of('.') + 1, temp.find_last_of('.') -\
    \ temp.find_first_of('.') - 1);\n    temp = temp.substr(0, temp.find_first_of('y'));\n\
    \    temp = temp.substr(temp.find_first_of('y') + 1, temp.find_last_of('y') -\
    \ temp.find_first_of('y') - 1);\n    temp = temp.substr(0, temp.find_first_of('M'));\n\
    \    temp = temp.substr(temp.find_first_of('M') + 1, temp.find_last_of('M') -\
    \ temp.find_first_of('M') - 1);\n    temp = temp.substr(0, temp.find_first_of('d'));\n\
    \    temp = temp.substr(temp.find_first_of('d') + 1, temp.find_last_of('d') -\
    \ temp.find_first_of('d') - 1);\n    temp = temp.substr(0, temp.find_first_of('h'));\n\
    \    temp = temp.substr(temp.find_first_of('h') + 1, temp.find_last_of('h') -\
    \ temp.find_first_of('h') - 1);\n    temp = temp.substr(0, temp.find_first_of('m'));\n\
    \    temp = temp.substr(temp.find_first_of('m') + 1, temp.find_last_of('m') -\
    \ temp.find_first_of('m') - 1);\n    temp = temp.substr(0, temp.find_first_of('s'));\n\
    \    temp = temp.substr(temp.find_first_of('s') + 1, temp.find_last_of('s') -\
    \ temp.find_first_of('s') - 1);\n    temp = temp.substr(0, temp.find_first_of('S'));\n\
    \    temp = temp.substr(temp.find_first_\n}\nint main() {\n    auto candidate\
    \ = valid_date;\n    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"\
    15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n\
    \    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"\
    01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n\
    \    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\"\
    )) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"\
    21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n\
    \    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\"\
    )) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"\
    2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n\
    }\n"
  stdout: ''
  stderr: "/tmp/tmpvt1cyrjn.cpp: In function \u2018bool valid_date(std::string)\u2019\
    :\n/tmp/tmpvt1cyrjn.cpp:26:9: error: conflicting declaration \u2018int months\
    \ [12]\u2019\n   26 |     int months[12] = {\n      |         ^~~~~~\n/tmp/tmpvt1cyrjn.cpp:19:17:\
    \ note: previous declaration as \u2018std::string months [12]\u2019\n   19 | \
    \    std::string months[12] = {\n      |                 ^~~~~~\n/tmp/tmpvt1cyrjn.cpp:31:5:\
    \ error: too many initializers for \u2018int [12]\u2019\n   31 |     };\n    \
    \  |     ^\n/tmp/tmpvt1cyrjn.cpp:56:29: error: \u2018std::string\u2019 {aka \u2018\
    class std::__cxx11::basic_string<char>\u2019} has no member named \u2018find_first_\u2019\
    ; did you mean \u2018find_first_of\u2019?\n   56 |     temp = temp.substr(temp.find_first_\n\
    \      |                             ^~~~~~~~~~~\n      |                    \
    \         find_first_of\n/tmp/tmpvt1cyrjn.cpp:57:1: warning: no return statement\
    \ in function returning non-void [-Wreturn-type]\n   57 | }\n      | ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n    // Write your code here\n    \n    bool\
    \ valid = false;\n    \n    std::string months[12] = {\n        \"January\", \"\
    February\", \"March\", \"April\", \"May\", \"June\",\n        \"July\", \"August\"\
    , \"September\", \"October\", \"November\", \"December\"\n    };\n    \n    int\
    \ days[12] = {\n        31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31\n    };\n\
    \    \n    int year;\n    \n    std::stringstream ss(date);\n    \n    ss >> month;\n\
    \    \n    ss >> day;\n    \n    ss >> year;\n    \n    if (month < 1 || month\
    \ > 12 || day < 1 || day > days[month - 1] || year < 1900 || year > 2020) {\n\
    \        valid = false;\n    }\n    else {\n        valid = true;\n    }\n   \
    \ \n    return valid;\n}\nint main() {\n    auto candidate = valid_date;\n   \
    \ assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"15-01-2012\"\
    )) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n    assert(candidate((\"\
    06-04-2020\")) == (true));\n    assert(candidate((\"01-01-2007\")) == (true));\n\
    \    assert(candidate((\"03-32-2011\")) == (false));\n    assert(candidate((\"\
    \")) == (false));\n    assert(candidate((\"04-31-3000\")) == (false));\n    assert(candidate((\"\
    06-06-2005\")) == (true));\n    assert(candidate((\"21-31-2000\")) == (false));\n\
    \    assert(candidate((\"04-12-2003\")) == (true));\n    assert(candidate((\"\
    04122003\")) == (false));\n    assert(candidate((\"20030412\")) == (false));\n\
    \    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"2003-04-12\"\
    )) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n}\n"
  stdout: ''
  stderr: "/tmp/tmptan69kxs.cpp: In function \u2018bool valid_date(std::string)\u2019\
    :\n/tmp/tmptan69kxs.cpp:34:11: error: \u2018month\u2019 was not declared in this\
    \ scope; did you mean \u2018months\u2019?\n   34 |     ss >> month;\n      | \
    \          ^~~~~\n      |           months\n/tmp/tmptan69kxs.cpp:36:11: error:\
    \ \u2018day\u2019 was not declared in this scope; did you mean \u2018days\u2019\
    ?\n   36 |     ss >> day;\n      |           ^~~\n      |           days\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n    // Write your code here\n    \n    bool\
    \ valid = true;\n    \n    \n    return valid;\n}\nint main() {\n    auto candidate\
    \ = valid_date;\n    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"\
    15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n\
    \    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"\
    01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n\
    \    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\"\
    )) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"\
    21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n\
    \    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\"\
    )) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"\
    2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmpizxrgx_f: /tmp/tmpizxrgx_f.cpp:27: int main(): Assertion `candidate((\"\
    15-01-2012\")) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n    bool valid = true;\n    // Write your code\
    \ here\n    int day;\n    int month;\n    int year;\n    std::stringstream ss(date);\n\
    \    ss >> month >> day >> year;\n    \n    valid = month >= 1 && month <= 12\
    \ && day >= 1 && day <= 31 && year >= 1 && year <= 9999;\n    \n    return valid;\n\
    }\nint main() {\n    auto candidate = valid_date;\n    assert(candidate((\"03-11-2000\"\
    )) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"\
    04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n\
    \    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"\
    03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"\
    04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n\
    \    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"\
    04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n\
    \    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\"\
    )) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"\
    04-2003\")) == (false));\n}\n"
  stdout: ''
  stderr: "tmpb3bm5_ap: /tmp/tmpb3bm5_ap.cpp:31: int main(): Assertion `candidate((\"\
    03-11-2000\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n    // Write your code here\n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n}\nint main() {\n    auto candidate = valid_date;\n\
    \    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"\
    15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n\
    \    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"\
    01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n\
    \    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\"\
    )) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"\
    21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n\
    \    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\"\
    )) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"\
    2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmp69yezzps: /tmp/tmp69yezzps.cpp:275: int main(): Assertion `candidate((\"\
    03-11-2000\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n    // Write your code here\n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n}\nint main() {\n    auto candidate = valid_date;\n\
    \    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"\
    15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n\
    \    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"\
    01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n\
    \    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\"\
    )) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"\
    21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n\
    \    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\"\
    )) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"\
    2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmpsgofobb_: /tmp/tmpsgofobb_.cpp:275: int main(): Assertion `candidate((\"\
    03-11-2000\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n    // Write your code here\n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n}\nint main() {\n    auto candidate = valid_date;\n\
    \    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"\
    15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n\
    \    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"\
    01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n\
    \    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\"\
    )) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"\
    21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n\
    \    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\"\
    )) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"\
    2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmp6liir__r: /tmp/tmp6liir__r.cpp:275: int main(): Assertion `candidate((\"\
    03-11-2000\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n    // Write your code here\n    int days[12]\
    \ = {0,31,28,31,30,31,30,31,31,30,31,30,31};\n    int months[12] = {0,1,2,3,4,5,6,7,8,9,10,11};\n\
    \    int years[12] = {0,2010,2011,2012,2013,2014,2015,2016,2017,2018,2019,2020,2021};\n\
    \    int day;\n    int month;\n    int year;\n    int days;\n    int months;\n\
    \    int years;\n    std::string::size_type pos;\n    pos = date.find('-');\n\
    \    day = stoi(date.substr(0,pos));\n    month = stoi(date.substr(pos+1,2));\n\
    \    year = stoi(date.substr(pos+3,4));\n    days = days[month-1];\n    months\
    \ = months[month-1];\n    years = years[year-1];\n    if (date.empty()) {\n  \
    \      return false;\n    }\n    if (day<1 || day>31) {\n        return false;\n\
    \    }\n    if (month<1 || month>12) {\n        return false;\n    }\n    if (year<1\
    \ || year>2020) {\n        return false;\n    }\n    if (days<1 || days>31) {\n\
    \        return false;\n    }\n    if (months<1 || months>12) {\n        return\
    \ false;\n    }\n    if (years<1 || years>2020) {\n        return false;\n   \
    \ }\n    return true;\n}\nint main() {\n    auto candidate = valid_date;\n   \
    \ assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"15-01-2012\"\
    )) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n    assert(candidate((\"\
    06-04-2020\")) == (true));\n    assert(candidate((\"01-01-2007\")) == (true));\n\
    \    assert(candidate((\"03-32-2011\")) == (false));\n    assert(candidate((\"\
    \")) == (false));\n    assert(candidate((\"04-31-3000\")) == (false));\n    assert(candidate((\"\
    06-06-2005\")) == (true));\n    assert(candidate((\"21-31-2000\")) == (false));\n\
    \    assert(candidate((\"04-12-2003\")) == (true));\n    assert(candidate((\"\
    04122003\")) == (false));\n    assert(candidate((\"20030412\")) == (false));\n\
    \    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"2003-04-12\"\
    )) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp5ilsg1gy.cpp: In function \u2018bool valid_date(std::string)\u2019\
    :\n/tmp/tmp5ilsg1gy.cpp:18:58: error: too many initializers for \u2018int [12]\u2019\
    \n   18 |     int days[12] = {0,31,28,31,30,31,30,31,31,30,31,30,31};\n      |\
    \                                                          ^\n/tmp/tmp5ilsg1gy.cpp:20:83:\
    \ error: too many initializers for \u2018int [12]\u2019\n   20 |     int years[12]\
    \ = {0,2010,2011,2012,2013,2014,2015,2016,2017,2018,2019,2020,2021};\n      |\
    \                                                                            \
    \       ^\n/tmp/tmp5ilsg1gy.cpp:24:9: error: conflicting declaration \u2018int\
    \ days\u2019\n   24 |     int days;\n      |         ^~~~\n/tmp/tmp5ilsg1gy.cpp:18:9:\
    \ note: previous declaration as \u2018int days [12]\u2019\n   18 |     int days[12]\
    \ = {0,31,28,31,30,31,30,31,31,30,31,30,31};\n      |         ^~~~\n/tmp/tmp5ilsg1gy.cpp:25:9:\
    \ error: conflicting declaration \u2018int months\u2019\n   25 |     int months;\n\
    \      |         ^~~~~~\n/tmp/tmp5ilsg1gy.cpp:19:9: note: previous declaration\
    \ as \u2018int months [12]\u2019\n   19 |     int months[12] = {0,1,2,3,4,5,6,7,8,9,10,11};\n\
    \      |         ^~~~~~\n/tmp/tmp5ilsg1gy.cpp:26:9: error: conflicting declaration\
    \ \u2018int years\u2019\n   26 |     int years;\n      |         ^~~~~\n/tmp/tmp5ilsg1gy.cpp:20:9:\
    \ note: previous declaration as \u2018int years [12]\u2019\n   20 |     int years[12]\
    \ = {0,2010,2011,2012,2013,2014,2015,2016,2017,2018,2019,2020,2021};\n      |\
    \         ^~~~~\n/tmp/tmp5ilsg1gy.cpp:32:24: error: incompatible types in assignment\
    \ of \u2018int\u2019 to \u2018int [12]\u2019\n   32 |     days = days[month-1];\n\
    \      |                        ^\n/tmp/tmp5ilsg1gy.cpp:33:28: error: incompatible\
    \ types in assignment of \u2018int\u2019 to \u2018int [12]\u2019\n   33 |    \
    \ months = months[month-1];\n      |                            ^\n/tmp/tmp5ilsg1gy.cpp:34:25:\
    \ error: incompatible types in assignment of \u2018int\u2019 to \u2018int [12]\u2019\
    \n   34 |     years = years[year-1];\n      |                         ^\n/tmp/tmp5ilsg1gy.cpp:47:14:\
    \ error: ISO C++ forbids comparison between pointer and integer [-fpermissive]\n\
    \   47 |     if (days<1 || days>31) {\n      |              ^\n/tmp/tmp5ilsg1gy.cpp:47:24:\
    \ error: ISO C++ forbids comparison between pointer and integer [-fpermissive]\n\
    \   47 |     if (days<1 || days>31) {\n      |                        ^~\n/tmp/tmp5ilsg1gy.cpp:50:16:\
    \ error: ISO C++ forbids comparison between pointer and integer [-fpermissive]\n\
    \   50 |     if (months<1 || months>12) {\n      |                ^\n/tmp/tmp5ilsg1gy.cpp:50:28:\
    \ error: ISO C++ forbids comparison between pointer and integer [-fpermissive]\n\
    \   50 |     if (months<1 || months>12) {\n      |                           \
    \ ^~\n/tmp/tmp5ilsg1gy.cpp:53:15: error: ISO C++ forbids comparison between pointer\
    \ and integer [-fpermissive]\n   53 |     if (years<1 || years>2020) {\n     \
    \ |               ^\n/tmp/tmp5ilsg1gy.cpp:53:26: error: ISO C++ forbids comparison\
    \ between pointer and integer [-fpermissive]\n   53 |     if (years<1 || years>2020)\
    \ {\n      |                          ^~~~\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n    bool valid = true;\n    // Write your code\
    \ here\n    int day;\n    int month;\n    int year;\n    std::stringstream ss(date);\n\
    \    ss >> month >> day >> year;\n    \n    valid = month > 0 && month < 12 &&\
    \ day > 0 && day < 31 && year > 0 && year < 2040;\n    return valid;\n}\nint main()\
    \ {\n    auto candidate = valid_date;\n    assert(candidate((\"03-11-2000\"))\
    \ == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"\
    04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n\
    \    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"\
    03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"\
    04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n\
    \    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"\
    04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n\
    \    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\"\
    )) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"\
    04-2003\")) == (false));\n}\n"
  stdout: ''
  stderr: "tmpi4wh6mqj: /tmp/tmpi4wh6mqj.cpp:30: int main(): Assertion `candidate((\"\
    03-11-2000\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n    // Write your code here\n    int day;\n\
    \    int month;\n    int year;\n    std::stringstream ss;\n    ss << date;\n \
    \   ss >> day >> month >> year;\n    if (day < 1 || day > 31) {\n        return\
    \ false;\n    }\n    if (month < 1 || month > 12) {\n        return false;\n \
    \   }\n    if (month == 2) {\n        if (day > 29) {\n            return false;\n\
    \        }\n    }\n    if (month == 4 || month == 6 || month == 9 || month ==\
    \ 11) {\n        if (day > 30) {\n            return false;\n        }\n    }\n\
    \    if (month == 1) {\n        if (day > 31) {\n            return false;\n \
    \       }\n    }\n    if (day < 1 || day > 31) {\n        return false;\n    }\n\
    \    if (month == 2) {\n        if (day > 29) {\n            return false;\n \
    \       }\n    }\n    if (month == 4 || month == 6 || month == 9 || month == 11)\
    \ {\n        if (day > 30) {\n            return false;\n        }\n    }\n  \
    \  if (month == 1) {\n        if (day > 31) {\n            return false;\n   \
    \     }\n    }\n    if (day < 1 || day > 30) {\n        return false;\n    }\n\
    \    if (month == 2) {\n        if (day > 29) {\n            return false;\n \
    \       }\n    }\n    if (month == 4 || month == 6 || month == 9 || month == 11)\
    \ {\n        if (day > 30) {\n            return false;\n        }\n    }\n  \
    \  if (month == 1) {\n        if (day > 31) {\n            return false;\n   \
    \     }\n    }\n    if (day < 1 || day > 29) {\n        return false;\n    }\n\
    \    return true;\n}\nint main() {\n    auto candidate = valid_date;\n    assert(candidate((\"\
    03-11-2000\")) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n\
    \    assert(candidate((\"04-0-2040\")) == (false));\n    assert(candidate((\"\
    06-04-2020\")) == (true));\n    assert(candidate((\"01-01-2007\")) == (true));\n\
    \    assert(candidate((\"03-32-2011\")) == (false));\n    assert(candidate((\"\
    \")) == (false));\n    assert(candidate((\"04-31-3000\")) == (false));\n    assert(candidate((\"\
    06-06-2005\")) == (true));\n    assert(candidate((\"21-31-2000\")) == (false));\n\
    \    assert(candidate((\"04-12-2003\")) == (true));\n    assert(candidate((\"\
    04122003\")) == (false));\n    assert(candidate((\"20030412\")) == (false));\n\
    \    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"2003-04-12\"\
    )) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n}\n"
  stdout: ''
  stderr: "tmpyr6bxy_f: /tmp/tmpyr6bxy_f.cpp:88: int main(): Assertion `candidate((\"\
    03-11-2000\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n    // Write your code here\n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n}\nint main() {\n    auto candidate = valid_date;\n\
    \    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"\
    15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n\
    \    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"\
    01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n\
    \    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\"\
    )) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"\
    21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n\
    \    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\"\
    )) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"\
    2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmpthw3835t: /tmp/tmpthw3835t.cpp:275: int main(): Assertion `candidate((\"\
    03-11-2000\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n    // Write your code here\n    bool valid\
    \ = true;\n    int day;\n    int month;\n    int year;\n    std::stringstream\
    \ ss(date);\n    ss >> day >> month >> year;\n    if (day < 1 || day > 31) {\n\
    \        valid = false;\n    }\n    if (month < 1 || month > 12) {\n        valid\
    \ = false;\n    }\n    if (month == 2 && day > 29) {\n        valid = false;\n\
    \    }\n    if (month == 4 && day > 30) {\n        valid = false;\n    }\n   \
    \ if (month == 6 && day > 31) {\n        valid = false;\n    }\n    if (month\
    \ == 9 && day > 30) {\n        valid = false;\n    }\n    if (month == 11 && day\
    \ > 31) {\n        valid = false;\n    }\n    if (month == 1 && day > 31) {\n\
    \        valid = false;\n    }\n    return valid;\n}\nint main() {\n    auto candidate\
    \ = valid_date;\n    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"\
    15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n\
    \    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"\
    01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n\
    \    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\"\
    )) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"\
    21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n\
    \    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\"\
    )) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"\
    2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmp9uc1zntu: /tmp/tmp9uc1zntu.cpp:52: int main(): Assertion `candidate((\"\
    03-11-2000\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n    // Write your code here\n    \n    // Write\
    \ your code here\n    \n    // Write your code here\n    \n    // Write your code\
    \ here\n    \n    // Write your code here\n    \n    // Write your code here\n\
    \    \n    // Write your code here\n    \n    // Write your code here\n    \n\
    \    // Write your code here\n    \n    // Write your code here\n    \n    //\
    \ Write your code here\n    \n    // Write your code here\n    \n    // Write\
    \ your code here\n    \n    // Write your code here\n    \n    // Write your code\
    \ here\n    \n    // Write your code here\n    \n    // Write your code here\n\
    \    \n    // Write your code here\n    \n    // Write your code here\n    \n\
    \    // Write your code here\n    \n    // Write your code here\n    \n    //\
    \ Write your code here\n    \n    // Write your code here\n    \n    // Write\
    \ your code here\n    \n    // Write your code here\n    \n    // Write your code\
    \ here\n    \n    // Write your code here\n    \n    // Write your code here\n\
    \    \n    // Write your code here\n    \n    // Write your code here\n    \n\
    \    // Write your code here\n    \n    // Write your code here\n    \n    //\
    \ Write your code here\n    \n    // Write your code here\n    \n    // Write\
    \ your code here\n    \n    // Write your code here\n    \n    // Write your code\
    \ here\n    \n    // Write your code here\n    \n    // Write your code here\n\
    \    \n    // Write your code here\n    \n    // Write your code here\n    \n\
    \    // Write your code here\n    \n    // Write your code here\n    \n    //\
    \ Write your code here\n    \n    // Write your code here\n    \n    // Write\
    \ your code here\n    \n    // Write your code here\n    \n    // Write your code\
    \ here\n    \n    // Write your code here\n    \n    // Write your code here\n\
    \    \n    // Write your code here\n    \n    // Write your code here\n    \n\
    \    // Write your code here\n    \n    // Write your code here\n    \n    //\
    \ Write your code here\n    \n    // Write your code here\n    \n    // Write\
    \ your code here\n    \n    // Write your code here\n    \n    // Write your code\
    \ here\n    \n    // Write your code here\n    \n    // Write your code here\n\
    \    \n    // Write your code here\n    \n    // Write your code here\n    \n\
    \    // Write your code here\n    \n    // Write your code here\n    \n    //\
    \ Write your code here\n    \n    // Write your code here\n    \n    // Write\
    \ your code here\n    \n    // Write your code here\n    \n    // Write your code\
    \ here\n    \n    // Write your code here\n    \n    // Write your code here\n\
    \    \n    // Write your code here\n    \n    // \n}\nint main() {\n    auto candidate\
    \ = valid_date;\n    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"\
    15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n\
    \    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"\
    01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n\
    \    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\"\
    )) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"\
    21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n\
    \    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\"\
    )) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"\
    2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmpm9iiyrqx: /tmp/tmpm9iiyrqx.cpp:167: int main(): Assertion `candidate((\"\
    03-11-2000\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n    // Write your code here\n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n}\nint main() {\n    auto candidate = valid_date;\n\
    \    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"\
    15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n\
    \    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"\
    01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n\
    \    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\"\
    )) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"\
    21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n\
    \    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\"\
    )) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"\
    2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmpayhw3vxj: /tmp/tmpayhw3vxj.cpp:275: int main(): Assertion `candidate((\"\
    03-11-2000\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n    // Your code goes here\n    \n    // Your\
    \ code goes here\n    \n    // Your code goes here\n    \n    // Your code goes\
    \ here\n    \n    // Your code goes here\n    \n    // Your code goes here\n \
    \   \n    // Your code goes here\n    \n    // Your code goes here\n    \n   \
    \ // Your code goes here\n    \n    // Your code goes here\n    \n    // Your\
    \ code goes here\n    \n    // Your code goes here\n    \n    // Your code goes\
    \ here\n    \n    // Your code goes here\n    \n    // Your code goes here\n \
    \   \n    // Your code goes here\n    \n    // Your code goes here\n    \n   \
    \ // Your code goes here\n    \n    // Your code goes here\n    \n    // Your\
    \ code goes here\n    \n    // Your code goes here\n    \n    // Your code goes\
    \ here\n    \n    // Your code goes here\n    \n    // Your code goes here\n \
    \   \n    // Your code goes here\n    \n    // Your code goes here\n    \n   \
    \ // Your code goes here\n    \n    // Your code goes here\n    \n    // Your\
    \ code goes here\n    \n    // Your code goes here\n    \n    // Your code goes\
    \ here\n    \n    // Your code goes here\n    \n    // Your code goes here\n \
    \   \n    // Your code goes here\n    \n    // Your code goes here\n    \n   \
    \ // Your code goes here\n    \n    // Your code goes here\n    \n    // Your\
    \ code goes here\n    \n    // Your code goes here\n    \n    // Your code goes\
    \ here\n    \n    // Your code goes here\n    \n    // Your code goes here\n \
    \   \n    // Your code goes here\n    \n    // Your code goes here\n    \n   \
    \ // Your code goes here\n    \n    // Your code goes here\n    \n    // Your\
    \ code goes here\n    \n    // Your code goes here\n    \n    // Your code goes\
    \ here\n    \n    // Your code goes here\n    \n    // Your code goes here\n \
    \   \n    // Your code goes here\n    \n    // Your code goes here\n    \n   \
    \ // Your code goes here\n    \n    // Your code goes here\n    \n    // Your\
    \ code goes here\n    \n    // Your code goes here\n    \n    // Your code goes\
    \ here\n    \n    // Your code goes here\n    \n    // Your code goes here\n \
    \   \n    // Your code goes here\n    \n    // Your code goes here\n    \n   \
    \ // Your code goes here\n    \n    // Your code goes here\n    \n\n}\nint main()\
    \ {\n    auto candidate = valid_date;\n    assert(candidate((\"03-11-2000\"))\
    \ == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"\
    04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n\
    \    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"\
    03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"\
    04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n\
    \    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"\
    04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n\
    \    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\"\
    )) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"\
    04-2003\")) == (false));\n}\n"
  stdout: ''
  stderr: "tmp7etl90ck: /tmp/tmp7etl90ck.cpp:149: int main(): Assertion `candidate((\"\
    03-11-2000\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n    bool valid = true;\n    // Write your code\
    \ here\n    std::istringstream iss(date);\n    std::string month;\n    int day;\n\
    \    int year;\n    iss >> month >> day >> year;\n    if (month.length() < 1 ||\
    \ month.length() > 12 || day.length() < 1 || day.length() > 31 || year.length()\
    \ < 1 || year.length() > 12) {\n        valid = false;\n    }\n    if (month.length()\
    \ < 1 || month.length() > 12) {\n        valid = false;\n    }\n    if (day.length()\
    \ < 1 || day.length() > 31) {\n        valid = false;\n    }\n    if (month.length()\
    \ < 1 || month.length() > 12) {\n        valid = false;\n    }\n    if (year.length()\
    \ < 1 || year.length() > 12) {\n        valid = false;\n    }\n    return valid;\n\
    }\nint main() {\n    auto candidate = valid_date;\n    assert(candidate((\"03-11-2000\"\
    )) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"\
    04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n\
    \    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"\
    03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"\
    04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n\
    \    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"\
    04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n\
    \    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\"\
    )) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"\
    04-2003\")) == (false));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpx2vap_fc.cpp: In function \u2018bool valid_date(std::string)\u2019\
    :\n/tmp/tmpx2vap_fc.cpp:24:58: error: request for member \u2018length\u2019 in\
    \ \u2018day\u2019, which is of non-class type \u2018int\u2019\n   24 |     if\
    \ (month.length() < 1 || month.length() > 12 || day.length() < 1 || day.length()\
    \ > 31 || year.length() < 1 || year.length() > 12) {\n      |                \
    \                                          ^~~~~~\n/tmp/tmpx2vap_fc.cpp:24:78:\
    \ error: request for member \u2018length\u2019 in \u2018day\u2019, which is of\
    \ non-class type \u2018int\u2019\n   24 |     if (month.length() < 1 || month.length()\
    \ > 12 || day.length() < 1 || day.length() > 31 || year.length() < 1 || year.length()\
    \ > 12) {\n      |                                                           \
    \                   ^~~~~~\n/tmp/tmpx2vap_fc.cpp:24:100: error: request for member\
    \ \u2018length\u2019 in \u2018year\u2019, which is of non-class type \u2018int\u2019\
    \n   24 |     if (month.length() < 1 || month.length() > 12 || day.length() <\
    \ 1 || day.length() > 31 || year.length() < 1 || year.length() > 12) {\n     \
    \ |                                                                          \
    \                          ^~~~~~\n/tmp/tmpx2vap_fc.cpp:24:121: error: request\
    \ for member \u2018length\u2019 in \u2018year\u2019, which is of non-class type\
    \ \u2018int\u2019\n   24 |     if (month.length() < 1 || month.length() > 12 ||\
    \ day.length() < 1 || day.length() > 31 || year.length() < 1 || year.length()\
    \ > 12) {\n      |                                                           \
    \                                                              ^~~~~~\n/tmp/tmpx2vap_fc.cpp:30:13:\
    \ error: request for member \u2018length\u2019 in \u2018day\u2019, which is of\
    \ non-class type \u2018int\u2019\n   30 |     if (day.length() < 1 || day.length()\
    \ > 31) {\n      |             ^~~~~~\n/tmp/tmpx2vap_fc.cpp:30:33: error: request\
    \ for member \u2018length\u2019 in \u2018day\u2019, which is of non-class type\
    \ \u2018int\u2019\n   30 |     if (day.length() < 1 || day.length() > 31) {\n\
    \      |                                 ^~~~~~\n/tmp/tmpx2vap_fc.cpp:36:14: error:\
    \ request for member \u2018length\u2019 in \u2018year\u2019, which is of non-class\
    \ type \u2018int\u2019\n   36 |     if (year.length() < 1 || year.length() > 12)\
    \ {\n      |              ^~~~~~\n/tmp/tmpx2vap_fc.cpp:36:35: error: request for\
    \ member \u2018length\u2019 in \u2018year\u2019, which is of non-class type \u2018\
    int\u2019\n   36 |     if (year.length() < 1 || year.length() > 12) {\n      |\
    \                                   ^~~~~~\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n    // Write your code here\n    \n    // Write\
    \ your code here\n    \n    // Write your code here\n    \n    // Write your code\
    \ here\n    \n    // Write your code here\n    \n    // Write your code here\n\
    \    \n    // Write your code here\n    \n    // Write your code here\n    \n\
    \    // Write your code here\n    \n    // Write your code here\n    \n    //\
    \ Write your code here\n    \n    // Write your code here\n    \n    // Write\
    \ your code here\n    \n    // Write your code here\n    \n    // Write your code\
    \ here\n    \n    // Write your code here\n    \n    // Write your code here\n\
    \    \n    // Write your code here\n    \n    // Write your code here\n    \n\
    \    // Write your code here\n    \n    // Write your code here\n    \n    //\
    \ Write your code here\n    \n    // Write your code here\n    \n    // Write\
    \ your code here\n    \n    // Write your code here\n    \n    // Write your code\
    \ here\n    \n    // Write your code here\n    \n    // Write your code here\n\
    \    \n    // Write your code here\n    \n    // Write your code here\n    \n\
    \    // Write your code here\n    \n    // Write your code here\n    \n    //\
    \ Write your code here\n    \n    // Write your code here\n    \n    // Write\
    \ your code here\n    \n    // Write your code here\n    \n    // Write your code\
    \ here\n    \n    // Write your code here\n    \n    // Write your code here\n\
    \    \n    // Write your code here\n    \n    // Write your code here\n    \n\
    \    // Write your code here\n    \n    // Write your code here\n    \n    //\
    \ Write your code here\n    \n    // Write your code here\n    \n    // Write\
    \ your code here\n    \n    // Write your code here\n    \n    // Write your code\
    \ here\n    \n    // Write your code here\n    \n    // Write your code here\n\
    \    \n    // Write your code here\n    \n    // Write your code here\n    \n\
    \    // Write your code here\n    \n    // Write your code here\n    \n    //\
    \ Write your code here\n    \n    // Write your code here\n    \n    // Write\
    \ your code here\n    \n    // Write your code here\n    \n    // Write your code\
    \ here\n    \n    // Write your code here\n    \n    // Write your code here\n\
    \    \n    // Write your code here\n    \n    // Write your code here\n    \n\
    \    // Write your code here\n    \n    // Write your code here\n    \n    //\
    \ Write your code here\n    \n    // Write your code here\n    \n    // Write\
    \ your code here\n    \n    // Write your code here\n    \n    // Write your code\
    \ here\n    \n    // Write your code here\n    \n    // Write your code here\n\
    \    \n    // Write your code here\n    \n    // \n}\nint main() {\n    auto candidate\
    \ = valid_date;\n    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"\
    15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n\
    \    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"\
    01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n\
    \    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\"\
    )) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"\
    21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n\
    \    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\"\
    )) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"\
    2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmpas87utym: /tmp/tmpas87utym.cpp:167: int main(): Assertion `candidate((\"\
    03-11-2000\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n    // Write your code here\n    int day;\n\
    \    int month;\n    int year;\n    std::stringstream ss;\n    ss << date;\n \
    \   ss >> day >> month >> year;\n    if (day < 1 || day > 31) {\n        return\
    \ false;\n    }\n    if (month < 1 || month > 12) {\n        return false;\n \
    \   }\n    if (month == 2) {\n        if (day < 1 || day > 29) {\n           \
    \ return false;\n        }\n    }\n    if (month == 4 || month == 6 || month ==\
    \ 9 || month == 11) {\n        if (day < 1 || day > 30) {\n            return\
    \ false;\n        }\n    }\n    if (month == 1) {\n        if (day < 1 || day\
    \ > 31) {\n            return false;\n        }\n    }\n    if (year < 1000 ||\
    \ year > 9999) {\n        return false;\n    }\n    return true;\n}\nint main()\
    \ {\n    auto candidate = valid_date;\n    assert(candidate((\"03-11-2000\"))\
    \ == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"\
    04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n\
    \    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"\
    03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"\
    04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n\
    \    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"\
    04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n\
    \    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\"\
    )) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"\
    04-2003\")) == (false));\n}\n"
  stdout: ''
  stderr: "tmp88fala3f: /tmp/tmp88fala3f.cpp:52: int main(): Assertion `candidate((\"\
    03-11-2000\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n    // Write your code here\n    \n    // Write\
    \ your code here\n    \n    // Write your code here\n    \n    // Write your code\
    \ here\n    \n    // Write your code here\n    \n    // Write your code here\n\
    \    \n    // Write your code here\n    \n    // Write your code here\n    \n\
    \    // Write your code here\n    \n    // Write your code here\n    \n    //\
    \ Write your code here\n    \n    // Write your code here\n    \n    // Write\
    \ your code here\n    \n    // Write your code here\n    \n    // Write your code\
    \ here\n    \n    // Write your code here\n    \n    // Write your code here\n\
    \    \n    // Write your code here\n    \n    // Write your code here\n    \n\
    \    // Write your code here\n    \n    // Write your code here\n    \n    //\
    \ Write your code here\n    \n    // Write your code here\n    \n    // Write\
    \ your code here\n    \n    // Write your code here\n    \n    // Write your code\
    \ here\n    \n    // Write your code here\n    \n    // Write your code here\n\
    \    \n    // Write your code here\n    \n    // Write your code here\n    \n\
    \    // Write your code here\n    \n    // Write your code here\n    \n    //\
    \ Write your code here\n    \n    // Write your code here\n    \n    // Write\
    \ your code here\n    \n    // Write your code here\n    \n    // Write your code\
    \ here\n    \n    // Write your code here\n    \n    // Write your code here\n\
    \    \n    // Write your code here\n    \n    // Write your code here\n    \n\
    \    // Write your code here\n    \n    // Write your code here\n    \n    //\
    \ Write your code here\n    \n    // Write your code here\n    \n    // Write\
    \ your code here\n    \n    // Write your code here\n    \n    // Write your code\
    \ here\n    \n    // Write your code here\n    \n    // Write your code here\n\
    \    \n    // Write your code here\n    \n    // Write your code here\n    \n\
    \    // Write your code here\n    \n    // Write your code here\n    \n    //\
    \ Write your code here\n    \n    // Write your code here\n    \n    // Write\
    \ your code here\n    \n    // Write your code here\n    \n    // Write your code\
    \ here\n    \n    // Write your code here\n    \n    // Write your code here\n\
    \    \n    // Write your code here\n    \n    // Write your code here\n    \n\
    \    // Write your code here\n    \n    // Write your code here\n    \n    //\
    \ Write your code here\n    \n    // Write your code here\n    \n    // Write\
    \ your code here\n    \n    // Write your code here\n    \n    // Write your code\
    \ here\n    \n    // Write your code here\n    \n    // Write your code here\n\
    \    \n    // Write your code here\n    \n    // \n}\nint main() {\n    auto candidate\
    \ = valid_date;\n    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"\
    15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n\
    \    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"\
    01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n\
    \    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\"\
    )) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"\
    21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n\
    \    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\"\
    )) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"\
    2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmpn0vjum5z: /tmp/tmpn0vjum5z.cpp:167: int main(): Assertion `candidate((\"\
    03-11-2000\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n    // Write your code here\n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n}\nint main() {\n    auto candidate = valid_date;\n\
    \    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"\
    15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n\
    \    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"\
    01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n\
    \    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\"\
    )) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"\
    21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n\
    \    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\"\
    )) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"\
    2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmp1g23x6oo: /tmp/tmp1g23x6oo.cpp:275: int main(): Assertion `candidate((\"\
    03-11-2000\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n    // Your code goes here\n    \n    // Write\
    \ your code here\n    \n    return true;\n}\nint main() {\n    auto candidate\
    \ = valid_date;\n    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"\
    15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n\
    \    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"\
    01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n\
    \    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\"\
    )) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"\
    21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n\
    \    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\"\
    )) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"\
    2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmpj23z_sxs: /tmp/tmpj23z_sxs.cpp:26: int main(): Assertion `candidate((\"\
    15-01-2012\")) == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n    // Write your code here\n    \n    bool\
    \ valid = false;\n    \n    std::string months[12] = {\"January\", \"February\"\
    , \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\"\
    , \"October\", \"November\", \"December\"};\n    \n    int days[12] = {31, 28,\
    \ 31, 30, 31, 30, 31, 31, 30, 31, 30, 31};\n    \n    int month = 0;\n    int\
    \ day = 0;\n    int year = 0;\n    \n    std::string date_str = date;\n    \n\
    \    size_t pos = date_str.find_first_of(\"-\");\n    \n    if (pos != std::string::npos)\
    \ {\n        date_str = date_str.substr(0, pos);\n    }\n    \n    pos = date_str.find_first_of(\"\
    /\");\n    \n    if (pos != std::string::npos) {\n        date_str = date_str.substr(0,\
    \ pos);\n    }\n    \n    pos = date_str.find_first_of(\"\\\\\");\n    \n    if\
    \ (pos != std::string::npos) {\n        date_str = date_str.substr(0, pos);\n\
    \    }\n    \n    pos = date_str.find_first_of(\"-\");\n    \n    if (pos != std::string::npos)\
    \ {\n        date_str = date_str.substr(0, pos);\n    }\n    \n    pos = date_str.find_first_of(\"\
    /\");\n    \n    if (pos != std::string::npos) {\n        date_str = date_str.substr(0,\
    \ pos);\n    }\n    \n    pos = date_str.find_first_of(\"\\\\\");\n    \n    if\
    \ (pos != std::string::npos) {\n        date_str = date_str.substr(0, pos);\n\
    \    }\n    \n    pos = date_str.find_first_of(\"-\");\n    \n    if (pos != std::string::npos)\
    \ {\n        date_str = date_str.substr(0, pos);\n    }\n    \n    pos = date_str.find_first_of(\"\
    /\");\n    \n    if (pos != std::string::npos) {\n        date_str = date_str.substr(0,\
    \ pos);\n    }\n    \n    pos = date_str.find_first_of(\"\\\\\");\n    \n    if\
    \ (pos != std::string::npos) {\n        date_str = date_str.substr(0, pos);\n\
    \    }\n    \n    pos = date_str.find_first_of(\"-\");\n    \n    if (pos != std::string::npos)\
    \ {\n        date_str = date_str.substr(0, pos);\n    }\n    \n    pos = date_str.find_first_of(\"\
    /\");\n    \n    if (pos != std::string::npos) {\n        date_str = date_str.substr(0,\
    \ pos);\n    }\n    \n    pos = date_str.find_first_of(\"\\\\\");\n    \n    if\
    \ (pos != std::string::npos) {\n        date_str = date_str.substr(0, pos);\n\
    \    }\n\n}\nint main() {\n    auto candidate = valid_date;\n    assert(candidate((\"\
    03-11-2000\")) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n\
    \    assert(candidate((\"04-0-2040\")) == (false));\n    assert(candidate((\"\
    06-04-2020\")) == (true));\n    assert(candidate((\"01-01-2007\")) == (true));\n\
    \    assert(candidate((\"03-32-2011\")) == (false));\n    assert(candidate((\"\
    \")) == (false));\n    assert(candidate((\"04-31-3000\")) == (false));\n    assert(candidate((\"\
    06-06-2005\")) == (true));\n    assert(candidate((\"21-31-2000\")) == (false));\n\
    \    assert(candidate((\"04-12-2003\")) == (true));\n    assert(candidate((\"\
    04122003\")) == (false));\n    assert(candidate((\"20030412\")) == (false));\n\
    \    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"2003-04-12\"\
    )) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n}\n"
  stdout: ''
  stderr: "tmp3qern4mi: /tmp/tmp3qern4mi.cpp:106: int main(): Assertion `candidate((\"\
    03-11-2000\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n    // Write your code here\n    int days[12]\
    \ = {0,31,28,31,30,31,30,31,31,30,31,30,31};\n    int months[12] = {0,1,2,3,4,5,6,7,8,9,10,11};\n\
    \    int years[12] = {0,2000,2001,2002,2003,2004,2005,2006,2007,2008,2009,2010,2011,2012};\n\
    \    int days_months[12][12] = {\n        {31,28,31,30,31,30,31,31,30,31,30,31},\n\
    \        {31,30,31,30,31,30,31,31,30,31,30,31},\n        {31,30,31,30,31,30,31,31,30,31,30,31},\n\
    \        {31,30,31,30,31,30,31,31,30,31,30,31},\n        {31,30,31,30,31,30,31,31,30,31,30,31},\n\
    \        {31,30,31,30,31,30,31,31,30,31,30,31},\n        {31,30,31,30,31,30,31,31,30,31,30,31},\n\
    \        {31,30,31,30,31,30,31,31,30,31,30,31},\n        {31,30,31,30,31,30,31,31,30,31,30,31},\n\
    \        {31,30,31,30,31,30,31,31,30,31,30,31},\n        {31,30,31,30,31,30,31,31,30,31,30,31},\n\
    \        {31,30,31,30,31,30,31,31,30,31,30,31},\n        {31,30,31,30,31,30,31,31,30,31,30,31},\n\
    \        {31,30,31,30,31,30,31,31,30,31,30,31},\n        {31,30,31,30,31,30,31,31,30,31,30,31},\n\
    \        {31,30,31,30,31,30,31,31,30,31,30,31},\n        {31,30,31,30,31,30,31,31,30,31,30,31},\n\
    \        {31,30,31,30,31,30,31,31,30,31,30,31},\n        {31,30,31,30,31,30,31,31,30,31,30,31},\n\
    \        {31,30,31,30,31,30,31,31,30,31,30,31},\n        {31,30,31,30,31,30,31,31,30,31,30,31},\n\
    \        {31,30,31,30,31,30,31,31,30,31,30,31},\n        {31,30,31,30,31,30,31,31,30,31,30,31},\n\
    \        {31,30,31,30,31,30,31,31,30,31,30,31},\n        {31,30,31,30,31,30,31,31,30,31,30,31},\n\
    \        {31,30,31,30,31,30,31,31,30,31,30,31},\n        {31,30,31,30,31,30,31,31,30,31,30,31},\n\
    \        {31,30,31,30,31,30,31,31,30,31,30,31},\n        {31,30,31,30,31,30,31,\n\
    }\nint main() {\n    auto candidate = valid_date;\n    assert(candidate((\"03-11-2000\"\
    )) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"\
    04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n\
    \    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"\
    03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"\
    04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n\
    \    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"\
    04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n\
    \    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\"\
    )) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"\
    04-2003\")) == (false));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpop11939x.cpp: In function \u2018bool valid_date(std::string)\u2019\
    :\n/tmp/tmpop11939x.cpp:18:58: error: too many initializers for \u2018int [12]\u2019\
    \n   18 |     int days[12] = {0,31,28,31,30,31,30,31,31,30,31,30,31};\n      |\
    \                                                          ^\n/tmp/tmpop11939x.cpp:20:88:\
    \ error: too many initializers for \u2018int [12]\u2019\n   20 |     int years[12]\
    \ = {0,2000,2001,2002,2003,2004,2005,2006,2007,2008,2009,2010,2011,2012};\n  \
    \    |                                                                       \
    \                 ^\n/tmp/tmpop11939x.cpp:52:1: error: expected \u2018}\u2019\
    \ before \u2018int\u2019\n   52 | int main() {\n      | ^~~\n/tmp/tmpop11939x.cpp:21:31:\
    \ note: to match this \u2018{\u2019\n   21 |     int days_months[12][12] = {\n\
    \      |                               ^\n/tmp/tmpop11939x.cpp:52:1: error: too\
    \ many initializers for \u2018int [12][12]\u2019\n   52 | int main() {\n     \
    \ | ^~~\n/tmp/tmpop11939x.cpp:70:1: error: expected \u2018}\u2019 at end of input\n\
    \   70 | }\n      | ^\n/tmp/tmpop11939x.cpp:16:35: note: to match this \u2018\
    {\u2019\n   16 | bool valid_date(std::string date) {\n      |                \
    \                   ^\n/tmp/tmpop11939x.cpp:70:1: warning: no return statement\
    \ in function returning non-void [-Wreturn-type]\n   70 | }\n      | ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n    // Write your code here\n    bool valid\
    \ = false;\n    \n    std::string months[12] = {\"01\",\"03\",\"05\",\"07\",\"\
    08\",\"10\",\"12\",\"04\",\"06\",\"09\",\"11\",\"02\"};\n    std::string days[31]\
    \ = {\"01\",\"02\",\"03\",\"04\",\"05\",\"06\",\"07\",\"08\",\"09\",\"10\",\"\
    11\",\"12\",\"13\",\"14\",\"15\",\"16\",\"17\",\"18\",\"19\",\"20\",\"21\",\"\
    22\",\"23\",\"24\",\"25\",\"26\",\"27\",\"28\",\"29\",\"30\",\"31\"};\n    std::string\
    \ years[12] = {\"2000\",\"2001\",\"2002\",\"2003\",\"2004\",\"2005\",\"2006\"\
    ,\"2007\",\"2008\",\"2009\",\"2010\",\"2011\",\"2012\",\"2013\",\"2014\",\"2015\"\
    ,\"2016\",\"2017\",\"2018\",\"2019\",\"2020\",\"2021\",\"2022\",\"2023\",\"2024\"\
    ,\"2025\",\"2026\",\"2027\",\"2028\",\"2029\",\"2030\",\"2031\",\"2032\",\"2033\"\
    ,\"2034\",\"2035\",\"2036\",\"2037\",\"2038\",\"2039\",\"2040\",\"2041\",\"2042\"\
    ,\"2043\",\"2044\",\"2045\",\"2046\",\"2047\",\"2048\",\"2049\",\"2050\",\"2051\"\
    ,\"2052\",\"2053\",\"2054\",\"2055\",\"2056\",\"2057\",\"2058\",\"2059\",\"2060\"\
    ,\"2061\",\"2062\",\"2063\",\"2064\",\"2065\",\"2066\",\"2067\",\"2068\",\"2069\"\
    ,\"2070\",\"2071\",\"2072\",\"2073\",\"2074\",\"2075\",\"2076\",\"2077\",\"2078\"\
    ,\"2079\",\"2080\",\"2081\",\"2082\",\"2083\",\"2084\",\"2085\",\"2086\",\"2087\"\
    ,\"2088\",\"2089\",\"2090\",\"2091\",\"2092\",\"2093\",\"2094\",\"2095\",\"2096\"\
    ,\"2097\",\"2098\",\"2099\",\"2100\",\"2101\",\"2102\",\"2103\",\"2104\",\"2105\"\
    ,\"2106\",\"2107\",\"2108\",\"2109\",\"2110\",\"2111\",\"2112\",\"2113\",\"2114\"\
    ,\"2115\",\"2116\",\"2117\",\"2118\",\"2119\",\"2120\",\"2121\",\"2122\",\"2123\"\
    ,\"2124\",\"2125\",\"2126\",\"2127\",\"2128\",\"2129\",\"2130\",\"2131\",\"2132\"\
    ,\"2133\",\"2134\",\"2135\",\"2136\",\"2137\",\"2138\",\"\n}\nint main() {\n \
    \   auto candidate = valid_date;\n    assert(candidate((\"03-11-2000\")) == (true));\n\
    \    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"\
    04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n\
    \    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"\
    03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"\
    04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n\
    \    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"\
    04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n\
    \    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\"\
    )) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"\
    04-2003\")) == (false));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpj7d2j_50.cpp:22:1003: warning: missing terminating \" character\n\
    \   22 |     std::string years[12] = {\"2000\",\"2001\",\"2002\",\"2003\",\"2004\"\
    ,\"2005\",\"2006\",\"2007\",\"2008\",\"2009\",\"2010\",\"2011\",\"2012\",\"2013\"\
    ,\"2014\",\"2015\",\"2016\",\"2017\",\"2018\",\"2019\",\"2020\",\"2021\",\"2022\"\
    ,\"2023\",\"2024\",\"2025\",\"2026\",\"2027\",\"2028\",\"2029\",\"2030\",\"2031\"\
    ,\"2032\",\"2033\",\"2034\",\"2035\",\"2036\",\"2037\",\"2038\",\"2039\",\"2040\"\
    ,\"2041\",\"2042\",\"2043\",\"2044\",\"2045\",\"2046\",\"2047\",\"2048\",\"2049\"\
    ,\"2050\",\"2051\",\"2052\",\"2053\",\"2054\",\"2055\",\"2056\",\"2057\",\"2058\"\
    ,\"2059\",\"2060\",\"2061\",\"2062\",\"2063\",\"2064\",\"2065\",\"2066\",\"2067\"\
    ,\"2068\",\"2069\",\"2070\",\"2071\",\"2072\",\"2073\",\"2074\",\"2075\",\"2076\"\
    ,\"2077\",\"2078\",\"2079\",\"2080\",\"2081\",\"2082\",\"2083\",\"2084\",\"2085\"\
    ,\"2086\",\"2087\",\"2088\",\"2089\",\"2090\",\"2091\",\"2092\",\"2093\",\"2094\"\
    ,\"2095\",\"2096\",\"2097\",\"2098\",\"2099\",\"2100\",\"2101\",\"2102\",\"2103\"\
    ,\"2104\",\"2105\",\"2106\",\"2107\",\"2108\",\"2109\",\"2110\",\"2111\",\"2112\"\
    ,\"2113\",\"2114\",\"2115\",\"2116\",\"2117\",\"2118\",\"2119\",\"2120\",\"2121\"\
    ,\"2122\",\"2123\",\"2124\",\"2125\",\"2126\",\"2127\",\"2128\",\"2129\",\"2130\"\
    ,\"2131\",\"2132\",\"2133\",\"2134\",\"2135\",\"2136\",\"2137\",\"2138\",\"\n\
    \      |                                                                     \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                      ^\n/tmp/tmpj7d2j_50.cpp:22:1003: error: missing terminating\
    \ \" character\n/tmp/tmpj7d2j_50.cpp: In function \u2018bool valid_date(std::string)\u2019\
    :\n/tmp/tmpj7d2j_50.cpp:23:1: error: too many initializers for \u2018std::string\
    \ [12]\u2019 {aka \u2018std::__cxx11::basic_string<char> [12]\u2019}\n   23 |\
    \ }\n      | ^\n/tmp/tmpj7d2j_50.cpp:24:1: error: expected \u2018,\u2019 or \u2018\
    ;\u2019 before \u2018int\u2019\n   24 | int main() {\n      | ^~~\n/tmp/tmpj7d2j_50.cpp:42:1:\
    \ error: expected \u2018}\u2019 at end of input\n   42 | }\n      | ^\n/tmp/tmpj7d2j_50.cpp:16:35:\
    \ note: to match this \u2018{\u2019\n   16 | bool valid_date(std::string date)\
    \ {\n      |                                   ^\n/tmp/tmpj7d2j_50.cpp:42:1: warning:\
    \ no return statement in function returning non-void [-Wreturn-type]\n   42 |\
    \ }\n      | ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n    // Write your code here\n    int day;\n\
    \    int month;\n    int year;\n    std::stringstream ss;\n    ss << date;\n \
    \   ss >> day >> month >> year;\n    if (month < 1 || month > 12) return false;\n\
    \    if (day < 1 || day > 31) return false;\n    if (month == 2) {\n        if\
    \ (day > 29) return false;\n    }\n    if (month == 4 || month == 6 || month ==\
    \ 9 || month == 11) {\n        if (day > 30) return false;\n    }\n    if (month\
    \ == 1) {\n        if (day > 31) return false;\n    }\n    if (month == 3 && day\
    \ > 31) return false;\n    if (month == 5 && day > 30) return false;\n    if (month\
    \ == 7 && day > 31) return false;\n    if (month == 8 && day > 31) return false;\n\
    \    if (month == 10 && day > 31) return false;\n    if (month == 12 && day >\
    \ 31) return false;\n    return true;\n}\nint main() {\n    auto candidate = valid_date;\n\
    \    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"\
    15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n\
    \    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"\
    01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n\
    \    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\"\
    )) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"\
    21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n\
    \    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\"\
    )) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"\
    2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmp8iynlac2: /tmp/tmp8iynlac2.cpp:45: int main(): Assertion `candidate((\"\
    03-11-2000\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n    // Write your code here\n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n}\nint main() {\n    auto candidate = valid_date;\n\
    \    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"\
    15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n\
    \    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"\
    01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n\
    \    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\"\
    )) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"\
    21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n\
    \    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\"\
    )) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"\
    2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmpqgizzql0: /tmp/tmpqgizzql0.cpp:275: int main(): Assertion `candidate((\"\
    03-11-2000\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n    // Write your code here\n    bool valid\
    \ = true;\n    std::string months[12] = {\"01\", \"03\", \"05\", \"07\", \"08\"\
    , \"10\", \"12\", \"04\", \"06\", \"09\", \"11\", \"02\"};\n    std::string days[31]\
    \ = {\"01\", \"03\", \"05\", \"07\", \"08\", \"10\", \"12\", \"04\", \"06\", \"\
    09\", \"11\", \"02\", \"13\", \"15\", \"17\", \"19\", \"21\", \"23\", \"25\",\
    \ \"27\", \"29\", \"31\", \"01\", \"03\", \"05\", \"07\", \"08\", \"10\", \"12\"\
    , \"04\", \"06\", \"09\", \"11\", \"02\", \"13\", \"15\", \"17\", \"19\", \"21\"\
    , \"23\", \"25\", \"27\", \"29\", \"31\", \"01\", \"03\", \"05\", \"07\", \"08\"\
    , \"10\", \"12\", \"04\", \"06\", \"09\", \"11\", \"02\", \"13\", \"15\", \"17\"\
    , \"19\", \"21\", \"23\", \"25\", \"27\", \"29\", \"31\"};\n    std::string years[12]\
    \ = {\"2000\", \"2001\", \"2002\", \"2003\", \"2004\", \"2005\", \"2006\", \"\
    2007\", \"2008\", \"2009\", \"2010\", \"2011\", \"2012\", \"2013\", \"2014\",\
    \ \"2015\", \"2016\", \"2017\", \"2018\", \"2019\", \"2020\", \"2021\", \"2022\"\
    , \"2023\", \"2024\", \"2025\", \"2026\", \"2027\", \"2028\", \"2029\", \"2030\"\
    , \"2031\", \"2032\", \"2033\", \"2034\", \"2035\", \"2036\", \"2037\", \"2038\"\
    , \"2039\", \"2040\", \"2041\", \"2042\", \"2043\", \"2044\", \"2045\", \"2046\"\
    , \"2047\", \"2048\", \"2049\", \"2050\", \"2051\", \"2052\", \"2053\", \"2054\"\
    , \"2055\", \"2056\", \"2057\", \"2058\", \"2059\", \"2060\", \"2061\", \"2062\"\
    , \"2063\", \"2064\", \"2065\", \"2066\", \"2067\", \"2068\", \"2069\", \"2070\"\
    , \"2071\", \"2072\", \"2073\", \"2074\", \"2075\", \"2076\", \"2077\", \"2078\"\
    , \"2079\", \"2080\", \"2081\", \"2082\", \"2083\", \"2084\", \"2085\", \"2086\"\
    , \"2087\", \"2088\", \"2089\", \"2090\", \"2091\", \"2092\", \"2093\", \"2094\"\
    , \"2095\", \"2096\", \"2097\", \"2098\", \"2099\", \"2100\", \"2101\", \"2102\"\
    , \"2103\", \"2104\", \"2105\", \"2106\", \"2107\", \"2108\", \"2109\", \"2110\"\
    , \"2111\", \"2112\", \"2113\", \"2114\", \"2115\", \"2116\", \"2117\", \"2118\"\
    , \"2119\", \"2120\n}\nint main() {\n    auto candidate = valid_date;\n    assert(candidate((\"\
    03-11-2000\")) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n\
    \    assert(candidate((\"04-0-2040\")) == (false));\n    assert(candidate((\"\
    06-04-2020\")) == (true));\n    assert(candidate((\"01-01-2007\")) == (true));\n\
    \    assert(candidate((\"03-32-2011\")) == (false));\n    assert(candidate((\"\
    \")) == (false));\n    assert(candidate((\"04-31-3000\")) == (false));\n    assert(candidate((\"\
    06-06-2005\")) == (true));\n    assert(candidate((\"21-31-2000\")) == (false));\n\
    \    assert(candidate((\"04-12-2003\")) == (true));\n    assert(candidate((\"\
    04122003\")) == (false));\n    assert(candidate((\"20030412\")) == (false));\n\
    \    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"2003-04-12\"\
    )) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp5ptzy5j8.cpp:21:990: warning: missing terminating \" character\n\
    \   21 |     std::string years[12] = {\"2000\", \"2001\", \"2002\", \"2003\",\
    \ \"2004\", \"2005\", \"2006\", \"2007\", \"2008\", \"2009\", \"2010\", \"2011\"\
    , \"2012\", \"2013\", \"2014\", \"2015\", \"2016\", \"2017\", \"2018\", \"2019\"\
    , \"2020\", \"2021\", \"2022\", \"2023\", \"2024\", \"2025\", \"2026\", \"2027\"\
    , \"2028\", \"2029\", \"2030\", \"2031\", \"2032\", \"2033\", \"2034\", \"2035\"\
    , \"2036\", \"2037\", \"2038\", \"2039\", \"2040\", \"2041\", \"2042\", \"2043\"\
    , \"2044\", \"2045\", \"2046\", \"2047\", \"2048\", \"2049\", \"2050\", \"2051\"\
    , \"2052\", \"2053\", \"2054\", \"2055\", \"2056\", \"2057\", \"2058\", \"2059\"\
    , \"2060\", \"2061\", \"2062\", \"2063\", \"2064\", \"2065\", \"2066\", \"2067\"\
    , \"2068\", \"2069\", \"2070\", \"2071\", \"2072\", \"2073\", \"2074\", \"2075\"\
    , \"2076\", \"2077\", \"2078\", \"2079\", \"2080\", \"2081\", \"2082\", \"2083\"\
    , \"2084\", \"2085\", \"2086\", \"2087\", \"2088\", \"2089\", \"2090\", \"2091\"\
    , \"2092\", \"2093\", \"2094\", \"2095\", \"2096\", \"2097\", \"2098\", \"2099\"\
    , \"2100\", \"2101\", \"2102\", \"2103\", \"2104\", \"2105\", \"2106\", \"2107\"\
    , \"2108\", \"2109\", \"2110\", \"2111\", \"2112\", \"2113\", \"2114\", \"2115\"\
    , \"2116\", \"2117\", \"2118\", \"2119\", \"2120\n      |                    \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                          ^\n/tmp/tmp5ptzy5j8.cpp:21:990:\
    \ error: missing terminating \" character\n   21 |     std::string years[12] =\
    \ {\"2000\", \"2001\", \"2002\", \"2003\", \"2004\", \"2005\", \"2006\", \"2007\"\
    , \"2008\", \"2009\", \"2010\", \"2011\", \"2012\", \"2013\", \"2014\", \"2015\"\
    , \"2016\", \"2017\", \"2018\", \"2019\", \"2020\", \"2021\", \"2022\", \"2023\"\
    , \"2024\", \"2025\", \"2026\", \"2027\", \"2028\", \"2029\", \"2030\", \"2031\"\
    , \"2032\", \"2033\", \"2034\", \"2035\", \"2036\", \"2037\", \"2038\", \"2039\"\
    , \"2040\", \"2041\", \"2042\", \"2043\", \"2044\", \"2045\", \"2046\", \"2047\"\
    , \"2048\", \"2049\", \"2050\", \"2051\", \"2052\", \"2053\", \"2054\", \"2055\"\
    , \"2056\", \"2057\", \"2058\", \"2059\", \"2060\", \"2061\", \"2062\", \"2063\"\
    , \"2064\", \"2065\", \"2066\", \"2067\", \"2068\", \"2069\", \"2070\", \"2071\"\
    , \"2072\", \"2073\", \"2074\", \"2075\", \"2076\", \"2077\", \"2078\", \"2079\"\
    , \"2080\", \"2081\", \"2082\", \"2083\", \"2084\", \"2085\", \"2086\", \"2087\"\
    , \"2088\", \"2089\", \"2090\", \"2091\", \"2092\", \"2093\", \"2094\", \"2095\"\
    , \"2096\", \"2097\", \"2098\", \"2099\", \"2100\", \"2101\", \"2102\", \"2103\"\
    , \"2104\", \"2105\", \"2106\", \"2107\", \"2108\", \"2109\", \"2110\", \"2111\"\
    , \"2112\", \"2113\", \"2114\", \"2115\", \"2116\", \"2117\", \"2118\", \"2119\"\
    , \"2120\n      |                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                  ^~~~~\n/tmp/tmp5ptzy5j8.cpp: In function \u2018bool valid_date(std::string)\u2019\
    :\n/tmp/tmp5ptzy5j8.cpp:20:423: error: too many initializers for \u2018std::string\
    \ [31]\u2019 {aka \u2018std::__cxx11::basic_string<char> [31]\u2019}\n   20 |\
    \     std::string days[31] = {\"01\", \"03\", \"05\", \"07\", \"08\", \"10\",\
    \ \"12\", \"04\", \"06\", \"09\", \"11\", \"02\", \"13\", \"15\", \"17\", \"19\"\
    , \"21\", \"23\", \"25\", \"27\", \"29\", \"31\", \"01\", \"03\", \"05\", \"07\"\
    , \"08\", \"10\", \"12\", \"04\", \"06\", \"09\", \"11\", \"02\", \"13\", \"15\"\
    , \"17\", \"19\", \"21\", \"23\", \"25\", \"27\", \"29\", \"31\", \"01\", \"03\"\
    , \"05\", \"07\", \"08\", \"10\", \"12\", \"04\", \"06\", \"09\", \"11\", \"02\"\
    , \"13\", \"15\", \"17\", \"19\", \"21\", \"23\", \"25\", \"27\", \"29\", \"31\"\
    };\n      |                                                                  \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                     ^\n/tmp/tmp5ptzy5j8.cpp:22:1:\
    \ error: too many initializers for \u2018std::string [12]\u2019 {aka \u2018std::__cxx11::basic_string<char>\
    \ [12]\u2019}\n   22 | }\n      | ^\n/tmp/tmp5ptzy5j8.cpp:23:1: error: expected\
    \ \u2018,\u2019 or \u2018;\u2019 before \u2018int\u2019\n   23 | int main() {\n\
    \      | ^~~\n/tmp/tmp5ptzy5j8.cpp:41:1: error: expected \u2018}\u2019 at end\
    \ of input\n   41 | }\n      | ^\n/tmp/tmp5ptzy5j8.cpp:16:35: note: to match this\
    \ \u2018{\u2019\n   16 | bool valid_date(std::string date) {\n      |        \
    \                           ^\n/tmp/tmp5ptzy5j8.cpp:41:1: warning: no return statement\
    \ in function returning non-void [-Wreturn-type]\n   41 | }\n      | ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n    // Write your code here\n    int day;\n\
    \    int month;\n    int year;\n    std::stringstream ss(date);\n    ss >> month\
    \ >> day >> year;\n    if (month < 1 || month > 12 || day < 1 || day > 31 || year\
    \ < 1 || year > 2020) {\n        return false;\n    }\n    if (month == 2) {\n\
    \        if (day > 29) {\n            return false;\n        }\n    }\n    if\
    \ (month == 4 || month == 6 || month == 9 || month == 11) {\n        if (day >\
    \ 30) {\n            return false;\n        }\n    }\n    if (month == 1) {\n\
    \        if (day > 31) {\n            return false;\n        }\n    }\n    return\
    \ true;\n}\nint main() {\n    auto candidate = valid_date;\n    assert(candidate((\"\
    03-11-2000\")) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n\
    \    assert(candidate((\"04-0-2040\")) == (false));\n    assert(candidate((\"\
    06-04-2020\")) == (true));\n    assert(candidate((\"01-01-2007\")) == (true));\n\
    \    assert(candidate((\"03-32-2011\")) == (false));\n    assert(candidate((\"\
    \")) == (false));\n    assert(candidate((\"04-31-3000\")) == (false));\n    assert(candidate((\"\
    06-06-2005\")) == (true));\n    assert(candidate((\"21-31-2000\")) == (false));\n\
    \    assert(candidate((\"04-12-2003\")) == (true));\n    assert(candidate((\"\
    04122003\")) == (false));\n    assert(candidate((\"20030412\")) == (false));\n\
    \    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"2003-04-12\"\
    )) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n}\n"
  stdout: ''
  stderr: "tmp8bxfybio: /tmp/tmp8bxfybio.cpp:45: int main(): Assertion `candidate((\"\
    03-11-2000\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n    // Write your code here\n    \n    \n}\n\
    int main() {\n    auto candidate = valid_date;\n    assert(candidate((\"03-11-2000\"\
    )) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"\
    04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n\
    \    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"\
    03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"\
    04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n\
    \    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"\
    04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n\
    \    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\"\
    )) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"\
    04-2003\")) == (false));\n}\n"
  stdout: ''
  stderr: "tmpo5xxyyaf: /tmp/tmpo5xxyyaf.cpp:23: int main(): Assertion `candidate((\"\
    03-11-2000\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n    // Write your code here\n    int day;\n\
    \    int month;\n    int year;\n    std::string date_str = date;\n    std::istringstream\
    \ iss(date_str);\n    iss >> day >> month >> year;\n    if (day < 1 || day > 31)\
    \ {\n        return false;\n    }\n    if (month < 1 || month > 12) {\n      \
    \  return false;\n    }\n    if (year < 1000 || year > 9999) {\n        return\
    \ false;\n    }\n    return true;\n}\nint main() {\n    auto candidate = valid_date;\n\
    \    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"\
    15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n\
    \    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"\
    01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n\
    \    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\"\
    )) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"\
    21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n\
    \    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\"\
    )) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"\
    2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmpnjgzj2pv: /tmp/tmpnjgzj2pv.cpp:37: int main(): Assertion `candidate((\"\
    03-11-2000\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n    // Write your code here\n    \n    // Write\
    \ your code here\n    \n    // Write your code here\n    \n    // Write your code\
    \ here\n    \n    // Write your code here\n    \n    // Write your code here\n\
    \    \n    // Write your code here\n    \n    // Write your code here\n    \n\
    \    // Write your code here\n    \n    // Write your code here\n    \n    //\
    \ Write your code here\n    \n    // Write your code here\n    \n    // Write\
    \ your code here\n    \n    // Write your code here\n    \n    // Write your code\
    \ here\n    \n    // Write your code here\n    \n    // Write your code here\n\
    \    \n    // Write your code here\n    \n    // Write your code here\n    \n\
    \    // Write your code here\n    \n    // Write your code here\n    \n    //\
    \ Write your code here\n    \n    // Write your code here\n    \n    // Write\
    \ your code here\n    \n    // Write your code here\n    \n    // Write your code\
    \ here\n    \n    // Write your code here\n    \n    // Write your code here\n\
    \    \n    // Write your code here\n    \n    // Write your code here\n    \n\
    \    // Write your code here\n    \n    // Write your code here\n    \n    //\
    \ Write your code here\n    \n    // Write your code here\n    \n    // Write\
    \ your code here\n    \n    // Write your code here\n    \n    // Write your code\
    \ here\n    \n    // Write your code here\n    \n    // Write your code here\n\
    \    \n    // Write your code here\n    \n    // Write your code here\n    \n\
    \    // Write your code here\n    \n    // Write your code here\n    \n    //\
    \ Write your code here\n    \n    // Write your code here\n    \n    // Write\
    \ your code here\n    \n    // Write your code here\n    \n    // Write your code\
    \ here\n    \n    // Write your code here\n    \n    // Write your code here\n\
    \    \n    // Write your code here\n    \n    // Write your code here\n    \n\
    \    // Write your code here\n    \n    // Write your code here\n    \n    //\
    \ Write your code here\n    \n    // Write your code here\n    \n    // Write\
    \ your code here\n    \n    // Write your code here\n    \n    // Write your code\
    \ here\n    \n    // Write your code here\n    \n    // Write your code here\n\
    \    \n    // Write your code here\n    \n    // Write your code here\n    \n\
    \    // Write your code here\n    \n    // Write your code here\n    \n    //\
    \ Write your code here\n    \n    // Write your code here\n    \n    // Write\
    \ your code here\n    \n    // Write your code here\n    \n    // Write your code\
    \ here\n    \n    // Write your code here\n    \n    // Write your code here\n\
    \    \n    // Write your code here\n    \n    // \n}\nint main() {\n    auto candidate\
    \ = valid_date;\n    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"\
    15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n\
    \    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"\
    01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n\
    \    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\"\
    )) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"\
    21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n\
    \    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\"\
    )) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"\
    2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmpgvo6ifcq: /tmp/tmpgvo6ifcq.cpp:167: int main(): Assertion `candidate((\"\
    03-11-2000\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n    // Write your code here\n    int day;\n\
    \    int month;\n    int year;\n    std::stringstream ss(date);\n    ss >> month\
    \ >> day >> year;\n    \n    if(month < 1 || month > 12){\n        return false;\n\
    \    }\n    if(day < 1 || day > 31){\n        return false;\n    }\n    if(month\
    \ == 2 && day > 29){\n        return false;\n    }\n    if(month == 4 || month\
    \ == 6 || month == 9 || month == 11 && day > 30){\n        return false;\n   \
    \ }\n    if(month == 1 && day > 31){\n        return false;\n    }\n    if(month\
    \ == 1 && day > 29){\n        return false;\n    }\n    if(month == 3 && day >\
    \ 31){\n        return false;\n    }\n    if(month == 5 && day > 31){\n      \
    \  return false;\n    }\n    if(month == 7 && day > 31){\n        return false;\n\
    \    }\n    if(month == 8 && day > 31){\n        return false;\n    }\n    if(month\
    \ == 10 && day > 31){\n        return false;\n    }\n    if(month == 12 && day\
    \ > 31){\n        return false;\n    }\n    if(month == 1 && day > 30){\n    \
    \    return false;\n    }\n    if(month == 3 && day > 30){\n        return false;\n\
    \    }\n    if(month == 5 && day > 30){\n        return false;\n    }\n    if(month\
    \ == 7 && day > 30){\n        return false;\n    }\n    if(month == 8 && day >\
    \ 30){\n        return false;\n    }\n    if(month == 10 && day > 30){\n     \
    \   return false;\n    }\n    if(month == 12 && day > 30){\n        return false;\n\
    \    }\n    if(month == 1 && day > 29){\n        return false;\n    }\n    if(month\
    \ == 3 && day > 29){\n        return false;\n    }\n    if(month == 5 && day >\
    \ 29){\n        return false;\n    }\n    if(month == 7 && day > 29){\n      \
    \  return false;\n    }\n    if(month == 8 && day > 29){\n        return false;\n\
    \    }\n    if(month == 10 && day > 29){\n        return false;\n    }\n    if(month\
    \ == 12 && day > 29){\n        return false;\n    }\n    if(month == 1 && day\
    \ > 28){\n        return false;\n    }\n    if(month == 3 && day > 28){\n    \
    \    return false;\n    }\n    if(month == 5 && day > 28){\n        return false;\n\
    \    }\n    if(month == 7 && day > 28){\n        return false;\n    }\n    if(month\
    \ == 8 && day > 28){\n        return false;\n    }\n    if(month == 10 && day\
    \ > 28){\n        return false;\n    }\n    if(month == 12 && day > 28){\n   \
    \     return false;\n    }\n    if(month == 1 && day > 27){\n        return false;\n\
    \    }\n    if(month == 3 && day > 27){\n        return false;\n    }\n    if(month\
    \ == 5 && \n}\nint main() {\n    auto candidate = valid_date;\n    assert(candidate((\"\
    03-11-2000\")) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n\
    \    assert(candidate((\"04-0-2040\")) == (false));\n    assert(candidate((\"\
    06-04-2020\")) == (true));\n    assert(candidate((\"01-01-2007\")) == (true));\n\
    \    assert(candidate((\"03-32-2011\")) == (false));\n    assert(candidate((\"\
    \")) == (false));\n    assert(candidate((\"04-31-3000\")) == (false));\n    assert(candidate((\"\
    06-06-2005\")) == (true));\n    assert(candidate((\"21-31-2000\")) == (false));\n\
    \    assert(candidate((\"04-12-2003\")) == (true));\n    assert(candidate((\"\
    04122003\")) == (false));\n    assert(candidate((\"20030412\")) == (false));\n\
    \    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"2003-04-12\"\
    )) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpq_hlhttm.cpp: In function \u2018bool valid_date(std::string)\u2019\
    :\n/tmp/tmpq_hlhttm.cpp:130:1: error: expected primary-expression before \u2018\
    }\u2019 token\n  130 | }\n      | ^\n/tmp/tmpq_hlhttm.cpp:129:21: error: expected\
    \ \u2018)\u2019 before \u2018}\u2019 token\n  129 |     if(month == 5 &&\n   \
    \   |       ~             ^\n      |                     )\n  130 | }\n      |\
    \ ~                    \n/tmp/tmpq_hlhttm.cpp:130:1: error: expected primary-expression\
    \ before \u2018}\u2019 token\n  130 | }\n      | ^\n/tmp/tmpq_hlhttm.cpp:130:1:\
    \ warning: control reaches end of non-void function [-Wreturn-type]\n  130 | }\n\
    \      | ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n    // Write your code here\n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n}\nint main() {\n    auto candidate = valid_date;\n\
    \    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"\
    15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n\
    \    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"\
    01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n\
    \    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\"\
    )) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"\
    21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n\
    \    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\"\
    )) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"\
    2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmpobm0cbh4: /tmp/tmpobm0cbh4.cpp:275: int main(): Assertion `candidate((\"\
    03-11-2000\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n    // Write your code here\n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n}\nint main() {\n    auto candidate = valid_date;\n\
    \    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"\
    15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n\
    \    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"\
    01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n\
    \    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\"\
    )) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"\
    21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n\
    \    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\"\
    )) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"\
    2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmp1y_2f3na: /tmp/tmp1y_2f3na.cpp:275: int main(): Assertion `candidate((\"\
    03-11-2000\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n    bool valid = true;\n    int day;\n    int\
    \ month;\n    int year;\n    std::stringstream ss;\n    ss << date;\n    ss >>\
    \ day >> month >> year;\n    if (day < 1 || day > 31) {\n        valid = false;\n\
    \    }\n    if (month < 1 || month > 12) {\n        valid = false;\n    }\n  \
    \  if (month == 2 && day > 29) {\n        valid = false;\n    }\n    if (month\
    \ == 4 || month == 6 || month == 9 || month == 11 && day > 30) {\n        valid\
    \ = false;\n    }\n    if (month == 1 || month == 3 || month == 5 || month ==\
    \ 7 || month == 8 || month == 10 && day > 31) {\n        valid = false;\n    }\n\
    \    if (month == 2) {\n        if (year % 400 == 0 || (year % 4 == 0 && year\
    \ % 100 != 0)) {\n            if (day > 29) {\n                valid = false;\n\
    \            }\n        } else {\n            if (day > 28) {\n              \
    \  valid = false;\n            }\n        }\n    }\n    return valid;\n}\nint\
    \ main() {\n    auto candidate = valid_date;\n    assert(candidate((\"03-11-2000\"\
    )) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"\
    04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n\
    \    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"\
    03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"\
    04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n\
    \    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"\
    04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n\
    \    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\"\
    )) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"\
    04-2003\")) == (false));\n}\n"
  stdout: ''
  stderr: "tmp62i7e36u: /tmp/tmp62i7e36u.cpp:54: int main(): Assertion `candidate((\"\
    03-11-2000\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n    // Write your code here\n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n}\nint main() {\n    auto candidate = valid_date;\n\
    \    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"\
    15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n\
    \    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"\
    01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n\
    \    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\"\
    )) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"\
    21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n\
    \    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\"\
    )) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"\
    2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmpahbu5jev: /tmp/tmpahbu5jev.cpp:275: int main(): Assertion `candidate((\"\
    03-11-2000\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n    // Write your code here\n    \n    bool\
    \ valid = true;\n    \n    std::string date_str = date;\n    \n    if (date_str.empty())\
    \ {\n        valid = false;\n    }\n    \n    int day;\n    int month;\n    int\
    \ year;\n    \n    std::stringstream ss(date_str);\n    \n    ss >> month;\n \
    \   \n    if (month < 1 || month > 12) {\n        valid = false;\n    }\n    \n\
    \    ss >> day;\n    \n    if (day < 1 || day > 31) {\n        valid = false;\n\
    \    }\n    \n    ss >> year;\n    \n    if (year < 1000 || year > 3000) {\n \
    \       valid = false;\n    }\n    \n    return valid;\n}\nint main() {\n    auto\
    \ candidate = valid_date;\n    assert(candidate((\"03-11-2000\")) == (true));\n\
    \    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"\
    04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n\
    \    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"\
    03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"\
    04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n\
    \    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"\
    04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n\
    \    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\"\
    )) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"\
    04-2003\")) == (false));\n}\n"
  stdout: ''
  stderr: "tmpvmez1z_r: /tmp/tmpvmez1z_r.cpp:55: int main(): Assertion `candidate((\"\
    03-11-2000\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n    // Write your code here\n    \n    // Write\
    \ your code here\n    \n    // Write your code here\n    \n    // Write your code\
    \ here\n    \n    // Write your code here\n    \n    // Write your code here\n\
    \    \n    // Write your code here\n    \n    // Write your code here\n    \n\
    \    // Write your code here\n    \n    // Write your code here\n    \n    //\
    \ Write your code here\n    \n    // Write your code here\n    \n    // Write\
    \ your code here\n    \n    // Write your code here\n    \n    // Write your code\
    \ here\n    \n    // Write your code here\n    \n    // Write your code here\n\
    \    \n    // Write your code here\n    \n    // Write your code here\n    \n\
    \    // Write your code here\n    \n    // Write your code here\n    \n    //\
    \ Write your code here\n    \n    // Write your code here\n    \n    // Write\
    \ your code here\n    \n    // Write your code here\n    \n    // Write your code\
    \ here\n    \n    // Write your code here\n    \n    // Write your code here\n\
    \    \n    // Write your code here\n    \n    // Write your code here\n    \n\
    \    // Write your code here\n    \n    // Write your code here\n    \n    //\
    \ Write your code here\n    \n    // Write your code here\n    \n    // Write\
    \ your code here\n    \n    // Write your code here\n    \n    // Write your code\
    \ here\n    \n    // Write your code here\n    \n    // Write your code here\n\
    \    \n    // Write your code here\n    \n    // Write your code here\n    \n\
    \    // Write your code here\n    \n    // Write your code here\n    \n    //\
    \ Write your code here\n    \n    // Write your code here\n    \n    // Write\
    \ your code here\n    \n    // Write your code here\n    \n    // Write your code\
    \ here\n    \n    // Write your code here\n    \n    // Write your code here\n\
    \    \n    // Write your code here\n    \n    // Write your code here\n    \n\
    \    // Write your code here\n    \n    // Write your code here\n    \n    //\
    \ Write your code here\n    \n    // Write your code here\n    \n    // Write\
    \ your code here\n    \n    // Write your code here\n    \n    // Write your code\
    \ here\n    \n    // Write your code here\n    \n    // Write your code here\n\
    \    \n    // Write your code here\n    \n    // Write your code here\n    \n\
    \    // Write your code here\n    \n    // Write your code here\n    \n    //\
    \ Write your code here\n    \n    // Write your code here\n    \n    // Write\
    \ your code here\n    \n    // Write your code here\n    \n    // Write your code\
    \ here\n    \n    // Write your code here\n    \n    // Write your code here\n\
    \    \n    // Write your code here\n    \n    // \n}\nint main() {\n    auto candidate\
    \ = valid_date;\n    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"\
    15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n\
    \    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"\
    01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n\
    \    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\"\
    )) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"\
    21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n\
    \    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\"\
    )) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"\
    2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmpk4dc4ogk: /tmp/tmpk4dc4ogk.cpp:167: int main(): Assertion `candidate((\"\
    03-11-2000\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n    // Write your code here\n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n}\nint main() {\n    auto candidate = valid_date;\n\
    \    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"\
    15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n\
    \    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"\
    01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n\
    \    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\"\
    )) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"\
    21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n\
    \    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\"\
    )) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"\
    2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmpj1zxbbsj: /tmp/tmpj1zxbbsj.cpp:275: int main(): Assertion `candidate((\"\
    03-11-2000\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n    // Write your code here\n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n}\nint main() {\n    auto candidate = valid_date;\n\
    \    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"\
    15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n\
    \    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"\
    01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n\
    \    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\"\
    )) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"\
    21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n\
    \    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\"\
    )) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"\
    2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmp9d5y76mm: /tmp/tmp9d5y76mm.cpp:275: int main(): Assertion `candidate((\"\
    03-11-2000\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n    // Write your code here\n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n}\nint main() {\n    auto candidate = valid_date;\n\
    \    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"\
    15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n\
    \    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"\
    01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n\
    \    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\"\
    )) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"\
    21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n\
    \    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\"\
    )) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"\
    2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmpjq1ycf28: /tmp/tmpjq1ycf28.cpp:275: int main(): Assertion `candidate((\"\
    03-11-2000\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n    // Write your code here\n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n}\nint main() {\n    auto candidate = valid_date;\n\
    \    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"\
    15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n\
    \    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"\
    01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n\
    \    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\"\
    )) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"\
    21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n\
    \    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\"\
    )) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"\
    2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmpt8pie2li: /tmp/tmpt8pie2li.cpp:275: int main(): Assertion `candidate((\"\
    03-11-2000\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n    // Write your code here\n    \n    // Write\
    \ your code here\n    \n    // Write your code here\n    \n    // Write your code\
    \ here\n    \n    // Write your code here\n    \n    // Write your code here\n\
    \    \n    // Write your code here\n    \n    // Write your code here\n    \n\
    \    // Write your code here\n    \n    // Write your code here\n    \n    //\
    \ Write your code here\n    \n    // Write your code here\n    \n    // Write\
    \ your code here\n    \n    // Write your code here\n    \n    // Write your code\
    \ here\n    \n    // Write your code here\n    \n    // Write your code here\n\
    \    \n    // Write your code here\n    \n    // Write your code here\n    \n\
    \    // Write your code here\n    \n    // Write your code here\n    \n    //\
    \ Write your code here\n    \n    // Write your code here\n    \n    // Write\
    \ your code here\n    \n    // Write your code here\n    \n    // Write your code\
    \ here\n    \n    // Write your code here\n    \n    // Write your code here\n\
    \    \n    // Write your code here\n    \n    // Write your code here\n    \n\
    \    // Write your code here\n    \n    // Write your code here\n    \n    //\
    \ Write your code here\n    \n    // Write your code here\n    \n    // Write\
    \ your code here\n    \n    // Write your code here\n    \n    // Write your code\
    \ here\n    \n    // Write your code here\n    \n    // Write your code here\n\
    \    \n    // Write your code here\n    \n    // Write your code here\n    \n\
    \    // Write your code here\n    \n    // Write your code here\n    \n    //\
    \ Write your code here\n    \n    // Write your code here\n    \n    // Write\
    \ your code here\n    \n    // Write your code here\n    \n    // Write your code\
    \ here\n    \n    // Write your code here\n    \n    // Write your code here\n\
    \    \n    // Write your code here\n    \n    // Write your code here\n    \n\
    \    // Write your code here\n    \n    // Write your code here\n    \n    //\
    \ Write your code here\n    \n    // Write your code here\n    \n    // Write\
    \ your code here\n    \n    // Write your code here\n    \n    // Write your code\
    \ here\n    \n    // Write your code here\n    \n    // Write your code here\n\
    \    \n    // Write your code here\n    \n    // Write your code here\n    \n\
    \    // Write your code here\n    \n    // Write your code here\n    \n    //\
    \ Write your code here\n    \n    // Write your code here\n    \n    // Write\
    \ your code here\n    \n    // Write your code here\n    \n    // Write your code\
    \ here\n    \n    // Write your code here\n    \n    // Write your code here\n\
    \    \n    // Write your code here\n    \n    // \n}\nint main() {\n    auto candidate\
    \ = valid_date;\n    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"\
    15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n\
    \    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"\
    01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n\
    \    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\"\
    )) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"\
    21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n\
    \    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\"\
    )) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"\
    2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmp0kgjdhej: /tmp/tmp0kgjdhej.cpp:167: int main(): Assertion `candidate((\"\
    03-11-2000\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n    // Write your code here\n    int day;\n\
    \    int month;\n    int year;\n    std::stringstream ss;\n    ss << date;\n \
    \   ss >> day >> month >> year;\n    if (day < 1 || day > 31) {\n        return\
    \ false;\n    }\n    if (month < 1 || month > 12) {\n        return false;\n \
    \   }\n    if (year < 1000 || year > 9999) {\n        return false;\n    }\n \
    \   if (month == 2) {\n        if (day > 29) {\n            return false;\n  \
    \      }\n    }\n    return true;\n}\nint main() {\n    auto candidate = valid_date;\n\
    \    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"\
    15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n\
    \    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"\
    01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n\
    \    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\"\
    )) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"\
    21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n\
    \    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\"\
    )) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"\
    2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmpwlwpcsob: /tmp/tmpwlwpcsob.cpp:42: int main(): Assertion `candidate((\"\
    03-11-2000\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns True if the date is valid\
    \ otherwise False.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') => True\n\
    // valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n//\
    \ valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nbool\
    \ valid_date(std::string date) {\n    // Write your code here\n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n}\nint main() {\n    auto candidate = valid_date;\n\
    \    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"\
    15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n\
    \    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"\
    01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n\
    \    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\"\
    )) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"\
    21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n\
    \    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\"\
    )) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"\
    2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmpaehol0hx: /tmp/tmpaehol0hx.cpp:275: int main(): Assertion `candidate((\"\
    03-11-2000\")) == (true)' failed.\n"
  exit_code: -6
  status: Exception
