name: HumanEval_96_count_up_to
language: cpp
prompt: "#include<assert.h>\n#include<bits/stdc++.h>\n// Implement a function that\
  \ takes an non-negative integer and returns an array of the first n\n// integers\
  \ that are prime numbers and less than n.\n// for example:\n// count_up_to(5) =>\
  \ [2,3]\n// count_up_to(11) => [2,3,5,7]\n// count_up_to(0) => []\n// count_up_to(20)\
  \ => [2,3,5,7,11,13,17,19]\n// count_up_to(1) => []\n// count_up_to(18) => [2,3,5,7,11,13,17]\n\
  std::vector<long> count_up_to(long n) {\n"
tests: "}\nint main() {\n    auto candidate = count_up_to;\n    assert(candidate((5))\
  \ == (std::vector<long>({2, 3})));\n    assert(candidate((6)) == (std::vector<long>({2,\
  \ 3, 5})));\n    assert(candidate((7)) == (std::vector<long>({2, 3, 5})));\n   \
  \ assert(candidate((10)) == (std::vector<long>({2, 3, 5, 7})));\n    assert(candidate((0))\
  \ == (std::vector<long>()));\n    assert(candidate((22)) == (std::vector<long>({2,\
  \ 3, 5, 7, 11, 13, 17, 19})));\n    assert(candidate((1)) == (std::vector<long>()));\n\
  \    assert(candidate((18)) == (std::vector<long>({2, 3, 5, 7, 11, 13, 17})));\n\
  \    assert(candidate((47)) == (std::vector<long>({2, 3, 5, 7, 11, 13, 17, 19, 23,\
  \ 29, 31, 37, 41, 43})));\n    assert(candidate((101)) == (std::vector<long>({2,\
  \ 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79,\
  \ 83, 89, 97})));\n}\n"
completions: []
stop_tokens:
- "\n}"
