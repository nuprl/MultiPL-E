name: HumanEval_118_get_closest_vowel
language: cpp
results:
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// get_closest_vowel(\"yogurt\") ==> \"u\"\
    \n// get_closest_vowel(\"FULL\") ==> \"U\"\n// get_closest_vowel(\"quick\") ==>\
    \ \"\"\n// get_closest_vowel(\"ab\") ==> \"\"\nstd::string get_closest_vowel(std::string\
    \ word) {\n    std::string vowels = \"AEIOUaeiou\";\n    std::string vowels_reverse\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_reverse = \"AEIOUaeiou\";\n\
    \    std::string vowels_reverse_back = \"AEIOUaeiou\";\n    std::string vowels_reverse_back_reverse\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_back_reverse_back = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse_back_reverse_back_reverse = \"AEIOUaeiou\";\n\
    \    std::string vowels_reverse_back_reverse_back_reverse_back = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse = \"\
    AEIOUaeiou\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse\
    \ = \"AEIO\n}\nint main() {\n    auto candidate = get_closest_vowel;\n    assert(candidate((\"\
    yogurt\")) == (\"u\"));\n    assert(candidate((\"full\")) == (\"u\"));\n    assert(candidate((\"\
    easy\")) == (\"\"));\n    assert(candidate((\"eAsy\")) == (\"\"));\n    assert(candidate((\"\
    ali\")) == (\"\"));\n    assert(candidate((\"bad\")) == (\"a\"));\n    assert(candidate((\"\
    most\")) == (\"o\"));\n    assert(candidate((\"ab\")) == (\"\"));\n    assert(candidate((\"\
    ba\")) == (\"\"));\n    assert(candidate((\"quick\")) == (\"\"));\n    assert(candidate((\"\
    anime\")) == (\"i\"));\n    assert(candidate((\"Asia\")) == (\"\"));\n    assert(candidate((\"\
    Above\")) == (\"o\"));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpgrf1fcxe.cpp:34:138: warning: missing terminating \" character\n\
    \   34 |     std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse\
    \ = \"AEIO\n      |                                                          \
    \                                                                            \
    \    ^\n/tmp/tmpgrf1fcxe.cpp:34:138: error: missing terminating \" character\n\
    \   34 |     std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse\
    \ = \"AEIO\n      |                                                          \
    \                                                                            \
    \    ^~~~~\n/tmp/tmpgrf1fcxe.cpp: In function \u2018std::string get_closest_vowel(std::string)\u2019\
    :\n/tmp/tmpgrf1fcxe.cpp:32:17: error: redeclaration of \u2018std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\u2019\
    \n   32 |     std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\
    \ = \"AEIOUaeiou\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpgrf1fcxe.cpp:31:17: note: \u2018std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\u2019\
    \ previously declared here\n   31 |     std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\
    \ = \"AEIOUaeiou\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpgrf1fcxe.cpp:33:17: error: redeclaration of \u2018std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\u2019\
    \n   33 |     std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\
    \ = \"AEIOUaeiou\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpgrf1fcxe.cpp:31:17: note: \u2018std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\u2019\
    \ previously declared here\n   31 |     std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\
    \ = \"AEIOUaeiou\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpgrf1fcxe.cpp:35:1: error: expected primary-expression before \u2018}\u2019\
    \ token\n   35 | }\n      | ^\n/tmp/tmpgrf1fcxe.cpp:35:1: error: expected \u2018\
    ,\u2019 or \u2018;\u2019 before \u2018}\u2019 token\n/tmp/tmpgrf1fcxe.cpp:35:1:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// get_closest_vowel(\"yogurt\") ==> \"u\"\
    \n// get_closest_vowel(\"FULL\") ==> \"U\"\n// get_closest_vowel(\"quick\") ==>\
    \ \"\"\n// get_closest_vowel(\"ab\") ==> \"\"\nstd::string get_closest_vowel(std::string\
    \ word) {\n    std::string vowels = \"AEIOUaeiou\";\n    std::string vowels_reversed\
    \ = vowels.substr(0, vowels.size() - 1) + vowels.substr(1, vowels.size() - 1);\n\
    \    std::string vowels_reversed_upper = vowels_reversed.toupper();\n    std::string\
    \ vowels_reversed_lower = vowels_reversed.tolower();\n    std::string vowels_reversed_upper_reversed\
    \ = vowels_reversed_upper.substr(0, vowels_reversed_upper.size() - 1) + vowels_reversed_upper.substr(1,\
    \ vowels_reversed_upper.size() - 1);\n    std::string vowels_reversed_lower_reversed\
    \ = vowels_reversed_lower.substr(0, vowels_reversed_lower.size() - 1) + vowels_reversed_lower.substr(1,\
    \ vowels_reversed_lower.size() - 1);\n    std::string vowels_reversed_upper_reversed_reversed\
    \ = vowels_reversed_upper_reversed.substr(0, vowels_reversed_upper_reversed.size()\
    \ - 1) + vowels_reversed_upper_reversed.substr(1, vowels_reversed_upper_reversed.size()\
    \ - 1);\n    std::string vowels_reversed_lower_reversed_reversed = vowels_reversed_lower_reversed.substr(0,\
    \ vowels_reversed_lower_reversed.size() - 1) + vowels_reversed_lower_reversed.substr(1,\
    \ vowels_reversed_lower_reversed.size() - 1);\n    std::string vowels_reversed_upper_reversed_reversed_reversed\
    \ = vowels_reversed_upper_reversed_reversed.substr(0, vowels_reversed_upper_reversed_reversed.size()\
    \ - 1) + vowels_reversed_upper_reversed_reversed.substr(1, vowels_reversed_upper_reversed_reversed.size()\
    \ - 1);\n    std::string vowels_reversed_lower_reversed_reversed_reversed = vowels_reversed_lower_reversed_reversed.substr(0,\
    \ vowels_reversed_lower_reversed_reversed.size() - 1) + vowels_reversed_lower_reversed_reversed.substr(1,\
    \ vowels_reversed_lower_reversed_reversed.size() - 1);\n    std::string vowels_reversed_upper_reversed_reversed_reversed_reversed\
    \ = vowels_reversed_upper_reversed_reversed_reversed.substr(0, vowels_reversed_upper_reversed_reversed_reversed.size()\
    \ - 1) + vowels_reversed_upper_reversed_reversed_reversed.substr(1, vowels_reversed_upper_reversed_reversed_reversed.size()\
    \ - 1);\n    std::string vowels_reversed_lower_reversed_reversed_reversed_reversed\
    \ = vowels_reversed_lower_reversed_reversed_reversed.substr(0, vowels_reversed_lower_reversed_reversed_reversed.size()\
    \ - 1) + vowels_reversed_lower_reversed_reversed_reversed.substr(\n}\nint main()\
    \ {\n    auto candidate = get_closest_vowel;\n    assert(candidate((\"yogurt\"\
    )) == (\"u\"));\n    assert(candidate((\"full\")) == (\"u\"));\n    assert(candidate((\"\
    easy\")) == (\"\"));\n    assert(candidate((\"eAsy\")) == (\"\"));\n    assert(candidate((\"\
    ali\")) == (\"\"));\n    assert(candidate((\"bad\")) == (\"a\"));\n    assert(candidate((\"\
    most\")) == (\"o\"));\n    assert(candidate((\"ab\")) == (\"\"));\n    assert(candidate((\"\
    ba\")) == (\"\"));\n    assert(candidate((\"quick\")) == (\"\"));\n    assert(candidate((\"\
    anime\")) == (\"i\"));\n    assert(candidate((\"Asia\")) == (\"\"));\n    assert(candidate((\"\
    Above\")) == (\"o\"));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpx4gr7yd8.cpp: In function \u2018std::string get_closest_vowel(std::string)\u2019\
    :\n/tmp/tmpx4gr7yd8.cpp:16:57: error: \u2018std::string\u2019 {aka \u2018class\
    \ std::__cxx11::basic_string<char>\u2019} has no member named \u2018toupper\u2019\
    \n   16 |     std::string vowels_reversed_upper = vowels_reversed.toupper();\n\
    \      |                                                         ^~~~~~~\n/tmp/tmpx4gr7yd8.cpp:17:57:\
    \ error: \u2018std::string\u2019 {aka \u2018class std::__cxx11::basic_string<char>\u2019\
    } has no member named \u2018tolower\u2019\n   17 |     std::string vowels_reversed_lower\
    \ = vowels_reversed.tolower();\n      |                                      \
    \                   ^~~~~~~\n/tmp/tmpx4gr7yd8.cpp:26:1: error: expected primary-expression\
    \ before \u2018}\u2019 token\n   26 | }\n      | ^\n/tmp/tmpx4gr7yd8.cpp:26:1:\
    \ error: expected \u2018,\u2019 or \u2018;\u2019 before \u2018}\u2019 token\n\
    /tmp/tmpx4gr7yd8.cpp:26:1: warning: no return statement in function returning\
    \ non-void [-Wreturn-type]\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// get_closest_vowel(\"yogurt\") ==> \"u\"\
    \n// get_closest_vowel(\"FULL\") ==> \"U\"\n// get_closest_vowel(\"quick\") ==>\
    \ \"\"\n// get_closest_vowel(\"ab\") ==> \"\"\nstd::string get_closest_vowel(std::string\
    \ word) {\n    int len = word.length();\n    std::string vowels = \"aeiouAEIOU\"\
    ;\n    std::string vowels_reverse = \"AEIOUaeiou\";\n    std::string vowels_reverse2\
    \ = \"aeiouAEIOU\";\n    std::string vowels_reverse3 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse4 = \"aeiouAEIOU\";\n    std::string vowels_reverse5 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse6 = \"aeiouAEIOU\";\n    std::string vowels_reverse7\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse8 = \"aeiouAEIOU\";\n    std::string\
    \ vowels_reverse9 = \"AEIOUaeiou\";\n    std::string vowels_reverse10 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse11 = \"AEIOUaeiou\";\n    std::string vowels_reverse12\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse13 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse14 = \"AEIOUaeiou\";\n    std::string vowels_reverse15 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse16 = \"AEIOUaeiou\";\n    std::string vowels_reverse17\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse18 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse19 = \"AEIOUaeiou\";\n    std::string vowels_reverse20 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse21 = \"AEIOUaeiou\";\n    std::string vowels_reverse22\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse23 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse24 = \"AEIOUaeiou\";\n    std::string vowels_reverse25 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse26 = \"AEIOUaeiou\";\n    std::string vowels_reverse27\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse28 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse29 = \"AEIOUaeiou\";\n    std::string vowels_reverse30 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse31 = \"AEIOUaeiou\";\n    std::string vowels_reverse32\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse33 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse34 = \"AEIOUaeiou\";\n    std::string vowels_reverse35 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_\n}\nint main() {\n    auto candidate = get_closest_vowel;\n\
    \    assert(candidate((\"yogurt\")) == (\"u\"));\n    assert(candidate((\"full\"\
    )) == (\"u\"));\n    assert(candidate((\"easy\")) == (\"\"));\n    assert(candidate((\"\
    eAsy\")) == (\"\"));\n    assert(candidate((\"ali\")) == (\"\"));\n    assert(candidate((\"\
    bad\")) == (\"a\"));\n    assert(candidate((\"most\")) == (\"o\"));\n    assert(candidate((\"\
    ab\")) == (\"\"));\n    assert(candidate((\"ba\")) == (\"\"));\n    assert(candidate((\"\
    quick\")) == (\"\"));\n    assert(candidate((\"anime\")) == (\"i\"));\n    assert(candidate((\"\
    Asia\")) == (\"\"));\n    assert(candidate((\"Above\")) == (\"o\"));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpsqj55kr7.cpp: In function \u2018std::string get_closest_vowel(std::string)\u2019\
    :\n/tmp/tmpsqj55kr7.cpp:52:1: error: expected initializer before \u2018}\u2019\
    \ token\n   52 | }\n      | ^\n/tmp/tmpsqj55kr7.cpp:52:1: warning: no return statement\
    \ in function returning non-void [-Wreturn-type]\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// get_closest_vowel(\"yogurt\") ==> \"u\"\
    \n// get_closest_vowel(\"FULL\") ==> \"U\"\n// get_closest_vowel(\"quick\") ==>\
    \ \"\"\n// get_closest_vowel(\"ab\") ==> \"\"\nstd::string get_closest_vowel(std::string\
    \ word) {\n    std::string vowels = \"AEIOUaeiou\";\n    std::string vowels_reverse\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_reverse = \"\";\n    std::string\
    \ vowels_reverse_back = \"\";\n    std::string vowels_reverse_back_reverse = \"\
    \";\n    std::string vowels_reverse_back_reverse_back = \"\";\n    std::string\
    \ vowels_reverse_back_reverse_back_reverse = \"\";\n    std::string vowels_reverse_back_reverse_back_reverse_back\
    \ = \"\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse\
    \ = \"\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back\
    \ = \"\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse\
    \ = \"\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\
    \ = \"\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse\
    \ = \"\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\
    \ = \"\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\
    \ = \"\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse\
    \ = \"\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\
    \ = \"\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse\
    \ = \"\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\
    \ = \"\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\
    \ = \"\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse\
    \ = \"\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\
    \ = \"\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\
    \ = \"\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\
    \ = \"\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_re\n\
    }\nint main() {\n    auto candidate = get_closest_vowel;\n    assert(candidate((\"\
    yogurt\")) == (\"u\"));\n    assert(candidate((\"full\")) == (\"u\"));\n    assert(candidate((\"\
    easy\")) == (\"\"));\n    assert(candidate((\"eAsy\")) == (\"\"));\n    assert(candidate((\"\
    ali\")) == (\"\"));\n    assert(candidate((\"bad\")) == (\"a\"));\n    assert(candidate((\"\
    most\")) == (\"o\"));\n    assert(candidate((\"ab\")) == (\"\"));\n    assert(candidate((\"\
    ba\")) == (\"\"));\n    assert(candidate((\"quick\")) == (\"\"));\n    assert(candidate((\"\
    anime\")) == (\"i\"));\n    assert(candidate((\"Asia\")) == (\"\"));\n    assert(candidate((\"\
    Above\")) == (\"o\"));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpzra14ssf.cpp: In function \u2018std::string get_closest_vowel(std::string)\u2019\
    :\n/tmp/tmpzra14ssf.cpp:28:17: error: redeclaration of \u2018std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\u2019\
    \n   28 |     std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\
    \ = \"\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpzra14ssf.cpp:27:17: note: \u2018std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\u2019\
    \ previously declared here\n   27 |     std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\
    \ = \"\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpzra14ssf.cpp:33:17: error: redeclaration of \u2018std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\u2019\
    \n   33 |     std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\
    \ = \"\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpzra14ssf.cpp:32:17: note: \u2018std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\u2019\
    \ previously declared here\n   32 |     std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\
    \ = \"\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpzra14ssf.cpp:36:17: error: redeclaration of \u2018std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\u2019\
    \n   36 |     std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\
    \ = \"\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpzra14ssf.cpp:35:17: note: \u2018std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\u2019\
    \ previously declared here\n   35 |     std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\
    \ = \"\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpzra14ssf.cpp:37:17: error: redeclaration of \u2018std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\u2019\
    \n   37 |     std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\
    \ = \"\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpzra14ssf.cpp:35:17: note: \u2018std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\u2019\
    \ previously declared here\n   35 |     std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\
    \ = \"\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpzra14ssf.cpp:39:1: error: expected initializer before \u2018}\u2019 token\n\
    \   39 | }\n      | ^\n/tmp/tmpzra14ssf.cpp:39:1: warning: no return statement\
    \ in function returning non-void [-Wreturn-type]\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// get_closest_vowel(\"yogurt\") ==> \"u\"\
    \n// get_closest_vowel(\"FULL\") ==> \"U\"\n// get_closest_vowel(\"quick\") ==>\
    \ \"\"\n// get_closest_vowel(\"ab\") ==> \"\"\nstd::string get_closest_vowel(std::string\
    \ word) {\n    std::string vowels = \"AEIOUaeiou\";\n    std::string vowels_reverse\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse2 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse3 = \"AEIOUaeiou\";\n    std::string vowels_reverse4 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse5 = \"AEIOUaeiou\";\n    std::string vowels_reverse6\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse7 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse8 = \"AEIOUaeiou\";\n    std::string vowels_reverse9 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse10 = \"AEIOUaeiou\";\n    std::string vowels_reverse11\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse12 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse13 = \"AEIOUaeiou\";\n    std::string vowels_reverse14 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse15 = \"AEIOUaeiou\";\n    std::string vowels_reverse16\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse17 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse18 = \"AEIOUaeiou\";\n    std::string vowels_reverse19 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse20 = \"AEIOUaeiou\";\n    std::string vowels_reverse21\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse22 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse23 = \"AEIOUaeiou\";\n    std::string vowels_reverse24 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse25 = \"AEIOUaeiou\";\n    std::string vowels_reverse26\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse27 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse28 = \"AEIOUaeiou\";\n    std::string vowels_reverse29 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse30 = \"AEIOUaeiou\";\n    std::string vowels_reverse31\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse32 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse33 = \"AEIOUaeiou\";\n    std::string vowels_reverse34 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse35 = \"AEIOUaeiou\";\n    std::string vowels_reverse36\
    \ = \"AEIOU\n}\nint main() {\n    auto candidate = get_closest_vowel;\n    assert(candidate((\"\
    yogurt\")) == (\"u\"));\n    assert(candidate((\"full\")) == (\"u\"));\n    assert(candidate((\"\
    easy\")) == (\"\"));\n    assert(candidate((\"eAsy\")) == (\"\"));\n    assert(candidate((\"\
    ali\")) == (\"\"));\n    assert(candidate((\"bad\")) == (\"a\"));\n    assert(candidate((\"\
    most\")) == (\"o\"));\n    assert(candidate((\"ab\")) == (\"\"));\n    assert(candidate((\"\
    ba\")) == (\"\"));\n    assert(candidate((\"quick\")) == (\"\"));\n    assert(candidate((\"\
    anime\")) == (\"i\"));\n    assert(candidate((\"Asia\")) == (\"\"));\n    assert(candidate((\"\
    Above\")) == (\"o\"));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpa7vsrps_.cpp:50:36: warning: missing terminating \" character\n\
    \   50 |     std::string vowels_reverse36 = \"AEIOU\n      |                 \
    \                   ^\n/tmp/tmpa7vsrps_.cpp:50:36: error: missing terminating\
    \ \" character\n   50 |     std::string vowels_reverse36 = \"AEIOU\n      |  \
    \                                  ^~~~~~\n/tmp/tmpa7vsrps_.cpp: In function \u2018\
    std::string get_closest_vowel(std::string)\u2019:\n/tmp/tmpa7vsrps_.cpp:51:1:\
    \ error: expected primary-expression before \u2018}\u2019 token\n   51 | }\n \
    \     | ^\n/tmp/tmpa7vsrps_.cpp:51:1: error: expected \u2018,\u2019 or \u2018\
    ;\u2019 before \u2018}\u2019 token\n/tmp/tmpa7vsrps_.cpp:51:1: warning: no return\
    \ statement in function returning non-void [-Wreturn-type]\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// get_closest_vowel(\"yogurt\") ==> \"u\"\
    \n// get_closest_vowel(\"FULL\") ==> \"U\"\n// get_closest_vowel(\"quick\") ==>\
    \ \"\"\n// get_closest_vowel(\"ab\") ==> \"\"\nstd::string get_closest_vowel(std::string\
    \ word) {\n    std::string vowels = \"aeiouAEIOU\";\n    std::string vowels_reverse\
    \ = vowels.rbegin();\n    std::string vowels_reverse2 = vowels.rend();\n    std::string\
    \ vowels_reverse3 = vowels.rbegin();\n    std::string vowels_reverse4 = vowels.rend();\n\
    \    std::string vowels_reverse5 = vowels.rbegin();\n    std::string vowels_reverse6\
    \ = vowels.rend();\n    std::string vowels_reverse7 = vowels.rbegin();\n    std::string\
    \ vowels_reverse8 = vowels.rend();\n    std::string vowels_reverse9 = vowels.rbegin();\n\
    \    std::string vowels_reverse10 = vowels.rend();\n    std::string vowels_reverse11\
    \ = vowels.rbegin();\n    std::string vowels_reverse12 = vowels.rend();\n    std::string\
    \ vowels_reverse13 = vowels.rbegin();\n    std::string vowels_reverse14 = vowels.rend();\n\
    \    std::string vowels_reverse15 = vowels.rbegin();\n    std::string vowels_reverse16\
    \ = vowels.rend();\n    std::string vowels_reverse17 = vowels.rbegin();\n    std::string\
    \ vowels_reverse18 = vowels.rend();\n    std::string vowels_reverse19 = vowels.rbegin();\n\
    \    std::string vowels_reverse20 = vowels.rend();\n    std::string vowels_reverse21\
    \ = vowels.rbegin();\n    std::string vowels_reverse22 = vowels.rend();\n    std::string\
    \ vowels_reverse23 = vowels.rbegin();\n    std::string vowels_reverse24 = vowels.rend();\n\
    \    std::string vowels_reverse25 = vowels.rbegin();\n    std::string vowels_reverse26\
    \ = vowels.rend();\n    std::string vowels_reverse27 = vowels.rbegin();\n    std::string\
    \ vowels_reverse28 = vowels.rend();\n    std::string vowels_reverse29 = vowels.rbegin();\n\
    \    std::string vowels_reverse30 = vowels.rend();\n    std::string vowels_reverse31\
    \ = vowels.rbegin();\n    std::string vowels_reverse32 = vowels.rend();\n    std::string\
    \ vowels_reverse33 = vowels.rbegin();\n    std::string vowels_reverse34 = vowels.rend();\n\
    \    std::string vowels_reverse35 = vowels.rbegin();\n    std::string vowels_reverse36\
    \ = vowels.rend();\n    std::string vowels_reverse37 = vowels.rbegin();\n    std::string\
    \ vowels_reverse38 = vowels.rend();\n    std::string vowels_reverse39 = vowels.rbegin();\n\
    \    std::string vowels_reverse40 = vowels.rend();\n    std::string vowels_reverse41\
    \ = vowels.rbegin();\n\n}\nint main() {\n    auto candidate = get_closest_vowel;\n\
    \    assert(candidate((\"yogurt\")) == (\"u\"));\n    assert(candidate((\"full\"\
    )) == (\"u\"));\n    assert(candidate((\"easy\")) == (\"\"));\n    assert(candidate((\"\
    eAsy\")) == (\"\"));\n    assert(candidate((\"ali\")) == (\"\"));\n    assert(candidate((\"\
    bad\")) == (\"a\"));\n    assert(candidate((\"most\")) == (\"o\"));\n    assert(candidate((\"\
    ab\")) == (\"\"));\n    assert(candidate((\"ba\")) == (\"\"));\n    assert(candidate((\"\
    quick\")) == (\"\"));\n    assert(candidate((\"anime\")) == (\"i\"));\n    assert(candidate((\"\
    Asia\")) == (\"\"));\n    assert(candidate((\"Above\")) == (\"o\"));\n}\n"
  stdout: ''
  stderr: "/tmp/tmprj2iud67.cpp: In function \u2018std::string get_closest_vowel(std::string)\u2019\
    :\n/tmp/tmprj2iud67.cpp:15:47: error: conversion from \u2018std::__cxx11::basic_string<char>::reverse_iterator\u2019\
    \ {aka \u2018std::reverse_iterator<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char>\
    \ > >\u2019} to non-scalar type \u2018std::string\u2019 {aka \u2018std::__cxx11::basic_string<char>\u2019\
    } requested\n   15 |     std::string vowels_reverse = vowels.rbegin();\n     \
    \ |                                  ~~~~~~~~~~~~~^~\n/tmp/tmprj2iud67.cpp:16:46:\
    \ error: conversion from \u2018std::__cxx11::basic_string<char>::reverse_iterator\u2019\
    \ {aka \u2018std::reverse_iterator<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char>\
    \ > >\u2019} to non-scalar type \u2018std::string\u2019 {aka \u2018std::__cxx11::basic_string<char>\u2019\
    } requested\n   16 |     std::string vowels_reverse2 = vowels.rend();\n      |\
    \                                   ~~~~~~~~~~~^~\n/tmp/tmprj2iud67.cpp:17:48:\
    \ error: conversion from \u2018std::__cxx11::basic_string<char>::reverse_iterator\u2019\
    \ {aka \u2018std::reverse_iterator<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char>\
    \ > >\u2019} to non-scalar type \u2018std::string\u2019 {aka \u2018std::__cxx11::basic_string<char>\u2019\
    } requested\n   17 |     std::string vowels_reverse3 = vowels.rbegin();\n    \
    \  |                                   ~~~~~~~~~~~~~^~\n/tmp/tmprj2iud67.cpp:18:46:\
    \ error: conversion from \u2018std::__cxx11::basic_string<char>::reverse_iterator\u2019\
    \ {aka \u2018std::reverse_iterator<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char>\
    \ > >\u2019} to non-scalar type \u2018std::string\u2019 {aka \u2018std::__cxx11::basic_string<char>\u2019\
    } requested\n   18 |     std::string vowels_reverse4 = vowels.rend();\n      |\
    \                                   ~~~~~~~~~~~^~\n/tmp/tmprj2iud67.cpp:19:48:\
    \ error: conversion from \u2018std::__cxx11::basic_string<char>::reverse_iterator\u2019\
    \ {aka \u2018std::reverse_iterator<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char>\
    \ > >\u2019} to non-scalar type \u2018std::string\u2019 {aka \u2018std::__cxx11::basic_string<char>\u2019\
    } requested\n   19 |     std::string vowels_reverse5 = vowels.rbegin();\n    \
    \  |                                   ~~~~~~~~~~~~~^~\n/tmp/tmprj2iud67.cpp:20:46:\
    \ error: conversion from \u2018std::__cxx11::basic_string<char>::reverse_iterator\u2019\
    \ {aka \u2018std::reverse_iterator<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char>\
    \ > >\u2019} to non-scalar type \u2018std::string\u2019 {aka \u2018std::__cxx11::basic_string<char>\u2019\
    } requested\n   20 |     std::string vowels_reverse6 = vowels.rend();\n      |\
    \                                   ~~~~~~~~~~~^~\n/tmp/tmprj2iud67.cpp:21:48:\
    \ error: conversion from \u2018std::__cxx11::basic_string<char>::reverse_iterator\u2019\
    \ {aka \u2018std::reverse_iterator<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char>\
    \ > >\u2019} to non-scalar type \u2018std::string\u2019 {aka \u2018std::__cxx11::basic_string<char>\u2019\
    } requested\n   21 |     std::string vowels_reverse7 = vowels.rbegin();\n    \
    \  |                                   ~~~~~~~~~~~~~^~\n/tmp/tmprj2iud67.cpp:22:46:\
    \ error: conversion from \u2018std::__cxx11::basic_string<char>::reverse_iterator\u2019\
    \ {aka \u2018std::reverse_iterator<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char>\
    \ > >\u2019} to non-scalar type \u2018std::string\u2019 {aka \u2018std::__cxx11::basic_string<char>\u2019\
    } requested\n   22 |     std::string vowels_reverse8 = vowels.rend();\n      |\
    \                                   ~~~~~~~~~~~^~\n/tmp/tmprj2iud67.cpp:23:48:\
    \ error: conversion from \u2018std::__cxx11::basic_string<char>::reverse_iterator\u2019\
    \ {aka \u2018std::reverse_iterator<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char>\
    \ > >\u2019} to non-scalar type \u2018std::string\u2019 {aka \u2018std::__cxx11::basic_string<char>\u2019\
    } requested\n   23 |     std::string vowels_reverse9 = vowels.rbegin();\n    \
    \  |                                   ~~~~~~~~~~~~~^~\n/tmp/tmprj2iud67.cpp:24:47:\
    \ error: conversion from \u2018std::__cxx11::basic_string<char>::reverse_iterator\u2019\
    \ {aka \u2018std::reverse_iterator<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char>\
    \ > >\u2019} to non-scalar type \u2018std::string\u2019 {aka \u2018std::__cxx11::basic_string<char>\u2019\
    } requested\n   24 |     std::string vowels_reverse10 = vowels.rend();\n     \
    \ |                                    ~~~~~~~~~~~^~\n/tmp/tmprj2iud67.cpp:25:49:\
    \ error: conversion from \u2018std::__cxx11::basic_string<char>::reverse_iterator\u2019\
    \ {aka \u2018std::reverse_iterator<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char>\
    \ > >\u2019} to non-scalar type \u2018std::string\u2019 {aka \u2018std::__cxx11::basic_string<char>\u2019\
    } requested\n   25 |     std::string vowels_reverse11 = vowels.rbegin();\n   \
    \   |                                    ~~~~~~~~~~~~~^~\n/tmp/tmprj2iud67.cpp:26:47:\
    \ error: conversion from \u2018std::__cxx11::basic_string<char>::reverse_iterator\u2019\
    \ {aka \u2018std::reverse_iterator<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char>\
    \ > >\u2019} to non-scalar type \u2018std::string\u2019 {aka \u2018std::__cxx11::basic_string<char>\u2019\
    } requested\n   26 |     std::string vowels_reverse12 = vowels.rend();\n     \
    \ |                                    ~~~~~~~~~~~^~\n/tmp/tmprj2iud67.cpp:27:49:\
    \ error: conversion from \u2018std::__cxx11::basic_string<char>::reverse_iterator\u2019\
    \ {aka \u2018std::reverse_iterator<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char>\
    \ > >\u2019} to non-scalar type \u2018std::string\u2019 {aka \u2018std::__cxx11::basic_string<char>\u2019\
    } requested\n   27 |     std::string vowels_reverse13 = vowels.rbegin();\n   \
    \   |                                    ~~~~~~~~~~~~~^~\n/tmp/tmprj2iud67.cpp:28:47:\
    \ error: conversion from \u2018std::__cxx11::basic_string<char>::reverse_iterator\u2019\
    \ {aka \u2018std::reverse_iterator<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char>\
    \ > >\u2019} to non-scalar type \u2018std::string\u2019 {aka \u2018std::__cxx11::basic_string<char>\u2019\
    } requested\n   28 |     std::string vowels_reverse14 = vowels.rend();\n     \
    \ |                                    ~~~~~~~~~~~^~\n/tmp/tmprj2iud67.cpp:29:49:\
    \ error: conversion from \u2018std::__cxx11::basic_string<char>::reverse_iterator\u2019\
    \ {aka \u2018std::reverse_iterator<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char>\
    \ > >\u2019} to non-scalar type \u2018std::string\u2019 {aka \u2018std::__cxx11::basic_string<char>\u2019\
    } requested\n   29 |     std::string vowels_reverse15 = vowels.rbegin();\n   \
    \   |                                    ~~~~~~~~~~~~~^~\n/tmp/tmprj2iud67.cpp:30:47:\
    \ error: conversion from \u2018std::__cxx11::basic_string<char>::reverse_iterator\u2019\
    \ {aka \u2018std::reverse_iterator<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char>\
    \ > >\u2019} to non-scalar type \u2018std::string\u2019 {aka \u2018std::__cxx11::basic_string<char>\u2019\
    } requested\n   30 |     std::string vowels_reverse16 = vowels.rend();\n     \
    \ |                                    ~~~~~~~~~~~^~\n/tmp/tmprj2iud67.cpp:31:49:\
    \ error: conversion from \u2018std::__cxx11::basic_string<char>::reverse_iterator\u2019\
    \ {aka \u2018std::reverse_iterator<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char>\
    \ > >\u2019} to non-scalar type \u2018std::string\u2019 {aka \u2018std::__cxx11::basic_string<char>\u2019\
    } requested\n   31 |     std::string vowels_reverse17 = vowels.rbegin();\n   \
    \   |                                    ~~~~~~~~~~~~~^~\n/tmp/tmprj2iud67.cpp:32:47:\
    \ error: conversion from \u2018std::__cxx11::basic_string<char>::reverse_iterator\u2019\
    \ {aka \u2018std::reverse_iterator<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char>\
    \ > >\u2019} to non-scalar type \u2018std::string\u2019 {aka \u2018std::__cxx11::basic_string<char>\u2019\
    } requested\n   32 |     std::string vowels_reverse18 = vowels.rend();\n     \
    \ |                                    ~~~~~~~~~~~^~\n/tmp/tmprj2iud67.cpp:33:49:\
    \ error: conversion from \u2018std::__cxx11::basic_string<char>::reverse_iterator\u2019\
    \ {aka \u2018std::reverse_iterator<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char>\
    \ > >\u2019} to non-scalar type \u2018std::string\u2019 {aka \u2018std::__cxx11::basic_string<char>\u2019\
    } requested\n   33 |     std::string vowels_reverse19 = vowels.rbegin();\n   \
    \   |                                    ~~~~~~~~~~~~~^~\n/tmp/tmprj2iud67.cpp:34:47:\
    \ error: conversion from \u2018std::__cxx11::basic_string<char>::reverse_iterator\u2019\
    \ {aka \u2018std::reverse_iterator<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char>\
    \ > >\u2019} to non-scalar type \u2018std::string\u2019 {aka \u2018std::__cxx11::basic_string<char>\u2019\
    } requested\n   34 |     std::string vowels_reverse20 = vowels.rend();\n     \
    \ |                                    ~~~~~~~~~~~^~\n/tmp/tmprj2iud67.cpp:35:49:\
    \ error: conversion from \u2018std::__cxx11::basic_string<char>::reverse_iterator\u2019\
    \ {aka \u2018std::reverse_iterator<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char>\
    \ > >\u2019} to non-scalar type \u2018std::string\u2019 {aka \u2018std::__cxx11::basic_string<char>\u2019\
    } requested\n   35 |     std::string vowels_reverse21 = vowels.rbegin();\n   \
    \   |                                    ~~~~~~~~~~~~~^~\n/tmp/tmprj2iud67.cpp:36:47:\
    \ error: conversion from \u2018std::__cxx11::basic_string<char>::reverse_iterator\u2019\
    \ {aka \u2018std::reverse_iterator<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char>\
    \ > >\u2019} to non-scalar type \u2018std::string\u2019 {aka \u2018std::__cxx11::basic_string<char>\u2019\
    } requested\n   36 |     std::string vowels_reverse22 = vowels.rend();\n     \
    \ |                                    ~~~~~~~~~~~^~\n/tmp/tmprj2iud67.cpp:37:49:\
    \ error: conversion from \u2018std::__cxx11::basic_string<char>::reverse_iterator\u2019\
    \ {aka \u2018std::reverse_iterator<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char>\
    \ > >\u2019} to non-scalar type \u2018std::string\u2019 {aka \u2018std::__cxx11::basic_string<char>\u2019\
    } requested\n   37 |     std::string vowels_reverse23 = vowels.rbegin();\n   \
    \   |                                    ~~~~~~~~~~~~~^~\n/tmp/tmprj2iud67.cpp:38:47:\
    \ error: conversion from \u2018std::__cxx11::basic_string<char>::reverse_iterator\u2019\
    \ {aka \u2018std::reverse_iterator<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char>\
    \ > >\u2019} to non-scalar type \u2018std::string\u2019 {aka \u2018std::__cxx11::basic_string<char>\u2019\
    } requested\n   38 |     std::string vowels_reverse24 = vowels.rend();\n     \
    \ |                                    ~~~~~~~~~~~^~\n/tmp/tmprj2iud67.cpp:39:49:\
    \ error: conversion from \u2018std::__cxx11::basic_string<char>::reverse_iterator\u2019\
    \ {aka \u2018std::reverse_iterator<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char>\
    \ > >\u2019} to non-scalar type \u2018std::string\u2019 {aka \u2018std::__cxx11::basic_string<char>\u2019\
    } requested\n   39 |     std::string vowels_reverse25 = vowels.rbegin();\n   \
    \   |                                    ~~~~~~~~~~~~~^~\n/tmp/tmprj2iud67.cpp:40:47:\
    \ error: conversion from \u2018std::__cxx11::basic_string<char>::reverse_iterator\u2019\
    \ {aka \u2018std::reverse_iterator<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char>\
    \ > >\u2019} to non-scalar type \u2018std::string\u2019 {aka \u2018std::__cxx11::basic_string<char>\u2019\
    } requested\n   40 |     std::string vowels_reverse26 = vowels.rend();\n     \
    \ |                                    ~~~~~~~~~~~^~\n/tmp/tmprj2iud67.cpp:41:49:\
    \ error: conversion from \u2018std::__cxx11::basic_string<char>::reverse_iterator\u2019\
    \ {aka \u2018std::reverse_iterator<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char>\
    \ > >\u2019} to non-scalar type \u2018std::string\u2019 {aka \u2018std::__cxx11::basic_string<char>\u2019\
    } requested\n   41 |     std::string vowels_reverse27 = vowels.rbegin();\n   \
    \   |                                    ~~~~~~~~~~~~~^~\n/tmp/tmprj2iud67.cpp:42:47:\
    \ error: conversion from \u2018std::__cxx11::basic_string<char>::reverse_iterator\u2019\
    \ {aka \u2018std::reverse_iterator<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char>\
    \ > >\u2019} to non-scalar type \u2018std::string\u2019 {aka \u2018std::__cxx11::basic_string<char>\u2019\
    } requested\n   42 |     std::string vowels_reverse28 = vowels.rend();\n     \
    \ |                                    ~~~~~~~~~~~^~\n/tmp/tmprj2iud67.cpp:43:49:\
    \ error: conversion from \u2018std::__cxx11::basic_string<char>::reverse_iterator\u2019\
    \ {aka \u2018std::reverse_iterator<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char>\
    \ > >\u2019} to non-scalar type \u2018std::string\u2019 {aka \u2018std::__cxx11::basic_string<char>\u2019\
    } requested\n   43 |     std::string vowels_reverse29 = vowels.rbegin();\n   \
    \   |                                    ~~~~~~~~~~~~~^~\n/tmp/tmprj2iud67.cpp:44:47:\
    \ error: conversion from \u2018std::__cxx11::basic_string<char>::reverse_iterator\u2019\
    \ {aka \u2018std::reverse_iterator<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char>\
    \ > >\u2019} to non-scalar type \u2018std::string\u2019 {aka \u2018std::__cxx11::basic_string<char>\u2019\
    } requested\n   44 |     std::string vowels_reverse30 = vowels.rend();\n     \
    \ |                                    ~~~~~~~~~~~^~\n/tmp/tmprj2iud67.cpp:45:49:\
    \ error: conversion from \u2018std::__cxx11::basic_string<char>::reverse_iterator\u2019\
    \ {aka \u2018std::reverse_iterator<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char>\
    \ > >\u2019} to non-scalar type \u2018std::string\u2019 {aka \u2018std::__cxx11::basic_string<char>\u2019\
    } requested\n   45 |     std::string vowels_reverse31 = vowels.rbegin();\n   \
    \   |                                    ~~~~~~~~~~~~~^~\n/tmp/tmprj2iud67.cpp:46:47:\
    \ error: conversion from \u2018std::__cxx11::basic_string<char>::reverse_iterator\u2019\
    \ {aka \u2018std::reverse_iterator<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char>\
    \ > >\u2019} to non-scalar type \u2018std::string\u2019 {aka \u2018std::__cxx11::basic_string<char>\u2019\
    } requested\n   46 |     std::string vowels_reverse32 = vowels.rend();\n     \
    \ |                                    ~~~~~~~~~~~^~\n/tmp/tmprj2iud67.cpp:47:49:\
    \ error: conversion from \u2018std::__cxx11::basic_string<char>::reverse_iterator\u2019\
    \ {aka \u2018std::reverse_iterator<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char>\
    \ > >\u2019} to non-scalar type \u2018std::string\u2019 {aka \u2018std::__cxx11::basic_string<char>\u2019\
    } requested\n   47 |     std::string vowels_reverse33 = vowels.rbegin();\n   \
    \   |                                    ~~~~~~~~~~~~~^~\n/tmp/tmprj2iud67.cpp:48:47:\
    \ error: conversion from \u2018std::__cxx11::basic_string<char>::reverse_iterator\u2019\
    \ {aka \u2018std::reverse_iterator<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char>\
    \ > >\u2019} to non-scalar type \u2018std::string\u2019 {aka \u2018std::__cxx11::basic_string<char>\u2019\
    } requested\n   48 |     std::string vowels_reverse34 = vowels.rend();\n     \
    \ |                                    ~~~~~~~~~~~^~\n/tmp/tmprj2iud67.cpp:49:49:\
    \ error: conversion from \u2018std::__cxx11::basic_string<char>::reverse_iterator\u2019\
    \ {aka \u2018std::reverse_iterator<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char>\
    \ > >\u2019} to non-scalar type \u2018std::string\u2019 {aka \u2018std::__cxx11::basic_string<char>\u2019\
    } requested\n   49 |     std::string vowels_reverse35 = vowels.rbegin();\n   \
    \   |                                    ~~~~~~~~~~~~~^~\n/tmp/tmprj2iud67.cpp:50:47:\
    \ error: conversion from \u2018std::__cxx11::basic_string<char>::reverse_iterator\u2019\
    \ {aka \u2018std::reverse_iterator<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char>\
    \ > >\u2019} to non-scalar type \u2018std::string\u2019 {aka \u2018std::__cxx11::basic_string<char>\u2019\
    } requested\n   50 |     std::string vowels_reverse36 = vowels.rend();\n     \
    \ |                                    ~~~~~~~~~~~^~\n/tmp/tmprj2iud67.cpp:51:49:\
    \ error: conversion from \u2018std::__cxx11::basic_string<char>::reverse_iterator\u2019\
    \ {aka \u2018std::reverse_iterator<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char>\
    \ > >\u2019} to non-scalar type \u2018std::string\u2019 {aka \u2018std::__cxx11::basic_string<char>\u2019\
    } requested\n   51 |     std::string vowels_reverse37 = vowels.rbegin();\n   \
    \   |                                    ~~~~~~~~~~~~~^~\n/tmp/tmprj2iud67.cpp:52:47:\
    \ error: conversion from \u2018std::__cxx11::basic_string<char>::reverse_iterator\u2019\
    \ {aka \u2018std::reverse_iterator<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char>\
    \ > >\u2019} to non-scalar type \u2018std::string\u2019 {aka \u2018std::__cxx11::basic_string<char>\u2019\
    } requested\n   52 |     std::string vowels_reverse38 = vowels.rend();\n     \
    \ |                                    ~~~~~~~~~~~^~\n/tmp/tmprj2iud67.cpp:53:49:\
    \ error: conversion from \u2018std::__cxx11::basic_string<char>::reverse_iterator\u2019\
    \ {aka \u2018std::reverse_iterator<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char>\
    \ > >\u2019} to non-scalar type \u2018std::string\u2019 {aka \u2018std::__cxx11::basic_string<char>\u2019\
    } requested\n   53 |     std::string vowels_reverse39 = vowels.rbegin();\n   \
    \   |                                    ~~~~~~~~~~~~~^~\n/tmp/tmprj2iud67.cpp:54:47:\
    \ error: conversion from \u2018std::__cxx11::basic_string<char>::reverse_iterator\u2019\
    \ {aka \u2018std::reverse_iterator<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char>\
    \ > >\u2019} to non-scalar type \u2018std::string\u2019 {aka \u2018std::__cxx11::basic_string<char>\u2019\
    } requested\n   54 |     std::string vowels_reverse40 = vowels.rend();\n     \
    \ |                                    ~~~~~~~~~~~^~\n/tmp/tmprj2iud67.cpp:55:49:\
    \ error: conversion from \u2018std::__cxx11::basic_string<char>::reverse_iterator\u2019\
    \ {aka \u2018std::reverse_iterator<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char>\
    \ > >\u2019} to non-scalar type \u2018std::string\u2019 {aka \u2018std::__cxx11::basic_string<char>\u2019\
    } requested\n   55 |     std::string vowels_reverse41 = vowels.rbegin();\n   \
    \   |                                    ~~~~~~~~~~~~~^~\n/tmp/tmprj2iud67.cpp:57:1:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n\
    \   57 | }\n      | ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// get_closest_vowel(\"yogurt\") ==> \"u\"\
    \n// get_closest_vowel(\"FULL\") ==> \"U\"\n// get_closest_vowel(\"quick\") ==>\
    \ \"\"\n// get_closest_vowel(\"ab\") ==> \"\"\nstd::string get_closest_vowel(std::string\
    \ word) {\n    int len = word.length();\n    int vowel_count = 0;\n    int consonant_count\
    \ = 0;\n    std::string vowels = \"AEIOUaeiou\";\n    std::string consonants =\
    \ \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\";\n    for (int i = 0; i < len;\
    \ i++) {\n        if (vowels.find(word[i]) != std::string::npos) {\n         \
    \   vowel_count++;\n        }\n        if (consonants.find(word[i]) != std::string::npos)\
    \ {\n            consonant_count++;\n        }\n    }\n    if (vowel_count > consonant_count)\
    \ {\n        return word[len - vowel_count];\n    }\n    return word[len - consonant_count];\n\
    }\nint main() {\n    auto candidate = get_closest_vowel;\n    assert(candidate((\"\
    yogurt\")) == (\"u\"));\n    assert(candidate((\"full\")) == (\"u\"));\n    assert(candidate((\"\
    easy\")) == (\"\"));\n    assert(candidate((\"eAsy\")) == (\"\"));\n    assert(candidate((\"\
    ali\")) == (\"\"));\n    assert(candidate((\"bad\")) == (\"a\"));\n    assert(candidate((\"\
    most\")) == (\"o\"));\n    assert(candidate((\"ab\")) == (\"\"));\n    assert(candidate((\"\
    ba\")) == (\"\"));\n    assert(candidate((\"quick\")) == (\"\"));\n    assert(candidate((\"\
    anime\")) == (\"i\"));\n    assert(candidate((\"Asia\")) == (\"\"));\n    assert(candidate((\"\
    Above\")) == (\"o\"));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpmsijbu8l.cpp: In function \u2018std::string get_closest_vowel(std::string)\u2019\
    :\n/tmp/tmpmsijbu8l.cpp:28:38: error: could not convert \u2018word.std::__cxx11::basic_string<char>::operator[](((std::__cxx11::basic_string<char>::size_type)(len\
    \ - vowel_count)))\u2019 from \u2018__gnu_cxx::__alloc_traits<std::allocator<char>,\
    \ char>::value_type\u2019 {aka \u2018char\u2019} to \u2018std::string\u2019 {aka\
    \ \u2018std::__cxx11::basic_string<char>\u2019}\n   28 |         return word[len\
    \ - vowel_count];\n      |                                      ^\n      |   \
    \                                   |\n      |                               \
    \       __gnu_cxx::__alloc_traits<std::allocator<char>, char>::value_type {aka\
    \ char}\n/tmp/tmpmsijbu8l.cpp:30:38: error: could not convert \u2018word.std::__cxx11::basic_string<char>::operator[](((std::__cxx11::basic_string<char>::size_type)(len\
    \ - consonant_count)))\u2019 from \u2018__gnu_cxx::__alloc_traits<std::allocator<char>,\
    \ char>::value_type\u2019 {aka \u2018char\u2019} to \u2018std::string\u2019 {aka\
    \ \u2018std::__cxx11::basic_string<char>\u2019}\n   30 |     return word[len -\
    \ consonant_count];\n      |                                      ^\n      | \
    \                                     |\n      |                             \
    \         __gnu_cxx::__alloc_traits<std::allocator<char>, char>::value_type {aka\
    \ char}\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// get_closest_vowel(\"yogurt\") ==> \"u\"\
    \n// get_closest_vowel(\"FULL\") ==> \"U\"\n// get_closest_vowel(\"quick\") ==>\
    \ \"\"\n// get_closest_vowel(\"ab\") ==> \"\"\nstd::string get_closest_vowel(std::string\
    \ word) {\n    std::string vowels = \"AEIOUaeiou\";\n    std::string vowels_end\
    \ = \"AEIOUaeiou\";\n    std::string vowels_start = \"AEIOUaeiou\";\n    std::string\
    \ vowels_start_end = \"AEIOUaeiou\";\n    std::string vowels_start_end_end = \"\
    AEIOUaeiou\";\n    std::string vowels_start_end_end_end = \"AEIOUaeiou\";\n  \
    \  std::string vowels_start_end_end_end_end = \"AEIOUaeiou\";\n    std::string\
    \ vowels_start_end_end_end_end_end = \"AEIOUaeiou\";\n    std::string vowels_start_end_end_end_end_end_end\
    \ = \"AEIOUaeiou\";\n    std::string vowels_start_end_end_end_end_end_end_end\
    \ = \"AEIOUaeiou\";\n    std::string vowels_start_end_end_end_end_end_end_end_end\
    \ = \"AEIOUaeiou\";\n    std::string vowels_start_end_end_end_end_end_end_end_end_end\
    \ = \"AEIOUaeiou\";\n    std::string vowels_start_end_end_end_end_end_end_end_end_end\
    \ = \"AEIOUaeiou\";\n    std::string vowels_start_end_end_end_end_end_end_end_end_end_end\
    \ = \"AEIOUaeiou\";\n    std::string vowels_start_end_end_end_end_end_end_end_end_end_end\
    \ = \"AEIOUaeiou\";\n    std::string vowels_start_end_end_end_end_end_end_end_end_end_end_end\
    \ = \"AEIOUaeiou\";\n    std::string vowels_start_end_end_end_end_end_end_end_end_end_end_end_end\
    \ = \"AEIOUaeiou\";\n    std::string vowels_start_end_end_end_end_end_end_end_end_end_end_end_end\
    \ = \"AEIOUaeiou\";\n    std::string vowels_start_end_end_end_end_end_end_end_end_end_end_end_end\
    \ = \"AEIOUaeiou\";\n    std::string vowels_start_end_end_end_end_end_end_end_end_end_end_end_end\
    \ = \"AEIOUaeiou\";\n    std::string vowels_start_end_end_end_end_end_end_end_end_end_end_end_end_end\
    \ = \"AEIOUaeiou\";\n    std::string vowels_start_end_end_end_end_end_end_end_end_end_end_end_end_end\
    \ = \"AEIOUaeiou\";\n    std::string vowels_start_end_end_end_end_end_end_end_end_end_end_end_end_end\
    \ = \"AEIOUaeiou\";\n    std::string vowels_start_end_end_end_end_end_end_end_end_end_end_end_end_end_end\
    \ = \"AEIOUaeiou\";\n    std::string vowels_start_end_end_end_end_end_end_end_end_end_end_end_\n\
    }\nint main() {\n    auto candidate = get_closest_vowel;\n    assert(candidate((\"\
    yogurt\")) == (\"u\"));\n    assert(candidate((\"full\")) == (\"u\"));\n    assert(candidate((\"\
    easy\")) == (\"\"));\n    assert(candidate((\"eAsy\")) == (\"\"));\n    assert(candidate((\"\
    ali\")) == (\"\"));\n    assert(candidate((\"bad\")) == (\"a\"));\n    assert(candidate((\"\
    most\")) == (\"o\"));\n    assert(candidate((\"ab\")) == (\"\"));\n    assert(candidate((\"\
    ba\")) == (\"\"));\n    assert(candidate((\"quick\")) == (\"\"));\n    assert(candidate((\"\
    anime\")) == (\"i\"));\n    assert(candidate((\"Asia\")) == (\"\"));\n    assert(candidate((\"\
    Above\")) == (\"o\"));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpvbjsqr3u.cpp: In function \u2018std::string get_closest_vowel(std::string)\u2019\
    :\n/tmp/tmpvbjsqr3u.cpp:26:17: error: redeclaration of \u2018std::string vowels_start_end_end_end_end_end_end_end_end_end\u2019\
    \n   26 |     std::string vowels_start_end_end_end_end_end_end_end_end_end = \"\
    AEIOUaeiou\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpvbjsqr3u.cpp:25:17: note: \u2018std::string vowels_start_end_end_end_end_end_end_end_end_end\u2019\
    \ previously declared here\n   25 |     std::string vowels_start_end_end_end_end_end_end_end_end_end\
    \ = \"AEIOUaeiou\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpvbjsqr3u.cpp:28:17: error: redeclaration of \u2018std::string vowels_start_end_end_end_end_end_end_end_end_end_end\u2019\
    \n   28 |     std::string vowels_start_end_end_end_end_end_end_end_end_end_end\
    \ = \"AEIOUaeiou\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpvbjsqr3u.cpp:27:17: note: \u2018std::string vowels_start_end_end_end_end_end_end_end_end_end_end\u2019\
    \ previously declared here\n   27 |     std::string vowels_start_end_end_end_end_end_end_end_end_end_end\
    \ = \"AEIOUaeiou\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpvbjsqr3u.cpp:31:17: error: redeclaration of \u2018std::string vowels_start_end_end_end_end_end_end_end_end_end_end_end_end\u2019\
    \n   31 |     std::string vowels_start_end_end_end_end_end_end_end_end_end_end_end_end\
    \ = \"AEIOUaeiou\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpvbjsqr3u.cpp:30:17: note: \u2018std::string vowels_start_end_end_end_end_end_end_end_end_end_end_end_end\u2019\
    \ previously declared here\n   30 |     std::string vowels_start_end_end_end_end_end_end_end_end_end_end_end_end\
    \ = \"AEIOUaeiou\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpvbjsqr3u.cpp:32:17: error: redeclaration of \u2018std::string vowels_start_end_end_end_end_end_end_end_end_end_end_end_end\u2019\
    \n   32 |     std::string vowels_start_end_end_end_end_end_end_end_end_end_end_end_end\
    \ = \"AEIOUaeiou\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpvbjsqr3u.cpp:30:17: note: \u2018std::string vowels_start_end_end_end_end_end_end_end_end_end_end_end_end\u2019\
    \ previously declared here\n   30 |     std::string vowels_start_end_end_end_end_end_end_end_end_end_end_end_end\
    \ = \"AEIOUaeiou\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpvbjsqr3u.cpp:33:17: error: redeclaration of \u2018std::string vowels_start_end_end_end_end_end_end_end_end_end_end_end_end\u2019\
    \n   33 |     std::string vowels_start_end_end_end_end_end_end_end_end_end_end_end_end\
    \ = \"AEIOUaeiou\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpvbjsqr3u.cpp:30:17: note: \u2018std::string vowels_start_end_end_end_end_end_end_end_end_end_end_end_end\u2019\
    \ previously declared here\n   30 |     std::string vowels_start_end_end_end_end_end_end_end_end_end_end_end_end\
    \ = \"AEIOUaeiou\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpvbjsqr3u.cpp:35:17: error: redeclaration of \u2018std::string vowels_start_end_end_end_end_end_end_end_end_end_end_end_end_end\u2019\
    \n   35 |     std::string vowels_start_end_end_end_end_end_end_end_end_end_end_end_end_end\
    \ = \"AEIOUaeiou\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpvbjsqr3u.cpp:34:17: note: \u2018std::string vowels_start_end_end_end_end_end_end_end_end_end_end_end_end_end\u2019\
    \ previously declared here\n   34 |     std::string vowels_start_end_end_end_end_end_end_end_end_end_end_end_end_end\
    \ = \"AEIOUaeiou\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpvbjsqr3u.cpp:36:17: error: redeclaration of \u2018std::string vowels_start_end_end_end_end_end_end_end_end_end_end_end_end_end\u2019\
    \n   36 |     std::string vowels_start_end_end_end_end_end_end_end_end_end_end_end_end_end\
    \ = \"AEIOUaeiou\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpvbjsqr3u.cpp:34:17: note: \u2018std::string vowels_start_end_end_end_end_end_end_end_end_end_end_end_end_end\u2019\
    \ previously declared here\n   34 |     std::string vowels_start_end_end_end_end_end_end_end_end_end_end_end_end_end\
    \ = \"AEIOUaeiou\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpvbjsqr3u.cpp:39:1: error: expected initializer before \u2018}\u2019 token\n\
    \   39 | }\n      | ^\n/tmp/tmpvbjsqr3u.cpp:39:1: warning: no return statement\
    \ in function returning non-void [-Wreturn-type]\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// get_closest_vowel(\"yogurt\") ==> \"u\"\
    \n// get_closest_vowel(\"FULL\") ==> \"U\"\n// get_closest_vowel(\"quick\") ==>\
    \ \"\"\n// get_closest_vowel(\"ab\") ==> \"\"\nstd::string get_closest_vowel(std::string\
    \ word) {\n    int n = word.length();\n    std::string vowels = \"aeiouAEIOU\"\
    ;\n    std::string vowels_reverse = \"AEIOUaeiou\";\n    std::string vowels_reverse2\
    \ = \"aeiouAEIOU\";\n    std::string vowels_reverse3 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse4 = \"AEIOUaeiou\";\n    std::string vowels_reverse5 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse6 = \"AEIOUaeiou\";\n    std::string vowels_reverse7\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse8 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse9 = \"AEIOUaeiou\";\n    std::string vowels_reverse10 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse11 = \"AEIOUaeiou\";\n    std::string vowels_reverse12\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse13 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse14 = \"AEIOUaeiou\";\n    std::string vowels_reverse15 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse16 = \"AEIOUaeiou\";\n    std::string vowels_reverse17\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse18 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse19 = \"AEIOUaeiou\";\n    std::string vowels_reverse20 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse21 = \"AEIOUaeiou\";\n    std::string vowels_reverse22\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse23 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse24 = \"AEIOUaeiou\";\n    std::string vowels_reverse25 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse26 = \"AEIOUaeiou\";\n    std::string vowels_reverse27\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse28 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse29 = \"AEIOUaeiou\";\n    std::string vowels_reverse30 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse31 = \"AEIOUaeiou\";\n    std::string vowels_reverse32\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse33 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse34 = \"AEIOUaeiou\";\n    std::string vowels_reverse35 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_\n}\nint main() {\n    auto candidate = get_closest_vowel;\n\
    \    assert(candidate((\"yogurt\")) == (\"u\"));\n    assert(candidate((\"full\"\
    )) == (\"u\"));\n    assert(candidate((\"easy\")) == (\"\"));\n    assert(candidate((\"\
    eAsy\")) == (\"\"));\n    assert(candidate((\"ali\")) == (\"\"));\n    assert(candidate((\"\
    bad\")) == (\"a\"));\n    assert(candidate((\"most\")) == (\"o\"));\n    assert(candidate((\"\
    ab\")) == (\"\"));\n    assert(candidate((\"ba\")) == (\"\"));\n    assert(candidate((\"\
    quick\")) == (\"\"));\n    assert(candidate((\"anime\")) == (\"i\"));\n    assert(candidate((\"\
    Asia\")) == (\"\"));\n    assert(candidate((\"Above\")) == (\"o\"));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp2gm2wnay.cpp: In function \u2018std::string get_closest_vowel(std::string)\u2019\
    :\n/tmp/tmp2gm2wnay.cpp:52:1: error: expected initializer before \u2018}\u2019\
    \ token\n   52 | }\n      | ^\n/tmp/tmp2gm2wnay.cpp:52:1: warning: no return statement\
    \ in function returning non-void [-Wreturn-type]\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// get_closest_vowel(\"yogurt\") ==> \"u\"\
    \n// get_closest_vowel(\"FULL\") ==> \"U\"\n// get_closest_vowel(\"quick\") ==>\
    \ \"\"\n// get_closest_vowel(\"ab\") ==> \"\"\nstd::string get_closest_vowel(std::string\
    \ word) {\n    std::string vowels = \"AEIOUaeiou\";\n    std::string vowels_reverse\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_reverse = \"AEIOUaeiou\";\n\
    \    std::string vowels_reverse_back = \"AEIOUaeiou\";\n    std::string vowels_reverse_back_reverse\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_back_reverse_back = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse_back_reverse_back_reverse = \"AEIOUaeiou\";\n\
    \    std::string vowels_reverse_back_reverse_back_reverse_back = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse = \"\
    AEIOUaeiou\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse\
    \ = \"AEIO\n}\nint main() {\n    auto candidate = get_closest_vowel;\n    assert(candidate((\"\
    yogurt\")) == (\"u\"));\n    assert(candidate((\"full\")) == (\"u\"));\n    assert(candidate((\"\
    easy\")) == (\"\"));\n    assert(candidate((\"eAsy\")) == (\"\"));\n    assert(candidate((\"\
    ali\")) == (\"\"));\n    assert(candidate((\"bad\")) == (\"a\"));\n    assert(candidate((\"\
    most\")) == (\"o\"));\n    assert(candidate((\"ab\")) == (\"\"));\n    assert(candidate((\"\
    ba\")) == (\"\"));\n    assert(candidate((\"quick\")) == (\"\"));\n    assert(candidate((\"\
    anime\")) == (\"i\"));\n    assert(candidate((\"Asia\")) == (\"\"));\n    assert(candidate((\"\
    Above\")) == (\"o\"));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpoqfw3h0q.cpp:34:138: warning: missing terminating \" character\n\
    \   34 |     std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse\
    \ = \"AEIO\n      |                                                          \
    \                                                                            \
    \    ^\n/tmp/tmpoqfw3h0q.cpp:34:138: error: missing terminating \" character\n\
    \   34 |     std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse\
    \ = \"AEIO\n      |                                                          \
    \                                                                            \
    \    ^~~~~\n/tmp/tmpoqfw3h0q.cpp: In function \u2018std::string get_closest_vowel(std::string)\u2019\
    :\n/tmp/tmpoqfw3h0q.cpp:32:17: error: redeclaration of \u2018std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\u2019\
    \n   32 |     std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\
    \ = \"AEIOUaeiou\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpoqfw3h0q.cpp:31:17: note: \u2018std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\u2019\
    \ previously declared here\n   31 |     std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\
    \ = \"AEIOUaeiou\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpoqfw3h0q.cpp:33:17: error: redeclaration of \u2018std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\u2019\
    \n   33 |     std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\
    \ = \"AEIOUaeiou\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpoqfw3h0q.cpp:31:17: note: \u2018std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\u2019\
    \ previously declared here\n   31 |     std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\
    \ = \"AEIOUaeiou\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpoqfw3h0q.cpp:35:1: error: expected primary-expression before \u2018}\u2019\
    \ token\n   35 | }\n      | ^\n/tmp/tmpoqfw3h0q.cpp:35:1: error: expected \u2018\
    ,\u2019 or \u2018;\u2019 before \u2018}\u2019 token\n/tmp/tmpoqfw3h0q.cpp:35:1:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// get_closest_vowel(\"yogurt\") ==> \"u\"\
    \n// get_closest_vowel(\"FULL\") ==> \"U\"\n// get_closest_vowel(\"quick\") ==>\
    \ \"\"\n// get_closest_vowel(\"ab\") ==> \"\"\nstd::string get_closest_vowel(std::string\
    \ word) {\n    std::string vowels = \"AEIOUaeiou\";\n    std::string vowels_reverse\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse2 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse3 = \"AEIOUaeiou\";\n    std::string vowels_reverse4 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse5 = \"AEIOUaeiou\";\n    std::string vowels_reverse6\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse7 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse8 = \"AEIOUaeiou\";\n    std::string vowels_reverse9 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse10 = \"AEIOUaeiou\";\n    std::string vowels_reverse11\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse12 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse13 = \"AEIOUaeiou\";\n    std::string vowels_reverse14 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse15 = \"AEIOUaeiou\";\n    std::string vowels_reverse16\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse17 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse18 = \"AEIOUaeiou\";\n    std::string vowels_reverse19 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse20 = \"AEIOUaeiou\";\n    std::string vowels_reverse21\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse22 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse23 = \"AEIOUaeiou\";\n    std::string vowels_reverse24 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse25 = \"AEIOUaeiou\";\n    std::string vowels_reverse26\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse27 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse28 = \"AEIOUaeiou\";\n    std::string vowels_reverse29 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse30 = \"AEIOUaeiou\";\n    std::string vowels_reverse31\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse32 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse33 = \"AEIOUaeiou\";\n    std::string vowels_reverse34 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse35 = \"AEIOUaeiou\";\n    std::string vowels_reverse36\
    \ = \"AEIOU\n}\nint main() {\n    auto candidate = get_closest_vowel;\n    assert(candidate((\"\
    yogurt\")) == (\"u\"));\n    assert(candidate((\"full\")) == (\"u\"));\n    assert(candidate((\"\
    easy\")) == (\"\"));\n    assert(candidate((\"eAsy\")) == (\"\"));\n    assert(candidate((\"\
    ali\")) == (\"\"));\n    assert(candidate((\"bad\")) == (\"a\"));\n    assert(candidate((\"\
    most\")) == (\"o\"));\n    assert(candidate((\"ab\")) == (\"\"));\n    assert(candidate((\"\
    ba\")) == (\"\"));\n    assert(candidate((\"quick\")) == (\"\"));\n    assert(candidate((\"\
    anime\")) == (\"i\"));\n    assert(candidate((\"Asia\")) == (\"\"));\n    assert(candidate((\"\
    Above\")) == (\"o\"));\n}\n"
  stdout: ''
  stderr: "/tmp/tmph_cqdsoo.cpp:50:36: warning: missing terminating \" character\n\
    \   50 |     std::string vowels_reverse36 = \"AEIOU\n      |                 \
    \                   ^\n/tmp/tmph_cqdsoo.cpp:50:36: error: missing terminating\
    \ \" character\n   50 |     std::string vowels_reverse36 = \"AEIOU\n      |  \
    \                                  ^~~~~~\n/tmp/tmph_cqdsoo.cpp: In function \u2018\
    std::string get_closest_vowel(std::string)\u2019:\n/tmp/tmph_cqdsoo.cpp:51:1:\
    \ error: expected primary-expression before \u2018}\u2019 token\n   51 | }\n \
    \     | ^\n/tmp/tmph_cqdsoo.cpp:51:1: error: expected \u2018,\u2019 or \u2018\
    ;\u2019 before \u2018}\u2019 token\n/tmp/tmph_cqdsoo.cpp:51:1: warning: no return\
    \ statement in function returning non-void [-Wreturn-type]\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// get_closest_vowel(\"yogurt\") ==> \"u\"\
    \n// get_closest_vowel(\"FULL\") ==> \"U\"\n// get_closest_vowel(\"quick\") ==>\
    \ \"\"\n// get_closest_vowel(\"ab\") ==> \"\"\nstd::string get_closest_vowel(std::string\
    \ word) {\n    std::string vowels = \"AEIOUaeiou\";\n    std::string vowels_reverse\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_reverse = \"AEIOUaeiou\";\n\
    \    std::string vowels_reverse_back = \"AEIOUaeiou\";\n    std::string vowels_reverse_back_reverse\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_back_reverse_back = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse_back_reverse_back_reverse = \"AEIOUaeiou\";\n\
    \    std::string vowels_reverse_back_reverse_back_reverse_back = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse = \"\
    AEIOUaeiou\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse\
    \ = \"AEIO\n}\nint main() {\n    auto candidate = get_closest_vowel;\n    assert(candidate((\"\
    yogurt\")) == (\"u\"));\n    assert(candidate((\"full\")) == (\"u\"));\n    assert(candidate((\"\
    easy\")) == (\"\"));\n    assert(candidate((\"eAsy\")) == (\"\"));\n    assert(candidate((\"\
    ali\")) == (\"\"));\n    assert(candidate((\"bad\")) == (\"a\"));\n    assert(candidate((\"\
    most\")) == (\"o\"));\n    assert(candidate((\"ab\")) == (\"\"));\n    assert(candidate((\"\
    ba\")) == (\"\"));\n    assert(candidate((\"quick\")) == (\"\"));\n    assert(candidate((\"\
    anime\")) == (\"i\"));\n    assert(candidate((\"Asia\")) == (\"\"));\n    assert(candidate((\"\
    Above\")) == (\"o\"));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpu_vozqhf.cpp:34:138: warning: missing terminating \" character\n\
    \   34 |     std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse\
    \ = \"AEIO\n      |                                                          \
    \                                                                            \
    \    ^\n/tmp/tmpu_vozqhf.cpp:34:138: error: missing terminating \" character\n\
    \   34 |     std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse\
    \ = \"AEIO\n      |                                                          \
    \                                                                            \
    \    ^~~~~\n/tmp/tmpu_vozqhf.cpp: In function \u2018std::string get_closest_vowel(std::string)\u2019\
    :\n/tmp/tmpu_vozqhf.cpp:32:17: error: redeclaration of \u2018std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\u2019\
    \n   32 |     std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\
    \ = \"AEIOUaeiou\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpu_vozqhf.cpp:31:17: note: \u2018std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\u2019\
    \ previously declared here\n   31 |     std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\
    \ = \"AEIOUaeiou\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpu_vozqhf.cpp:33:17: error: redeclaration of \u2018std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\u2019\
    \n   33 |     std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\
    \ = \"AEIOUaeiou\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpu_vozqhf.cpp:31:17: note: \u2018std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\u2019\
    \ previously declared here\n   31 |     std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\
    \ = \"AEIOUaeiou\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpu_vozqhf.cpp:35:1: error: expected primary-expression before \u2018}\u2019\
    \ token\n   35 | }\n      | ^\n/tmp/tmpu_vozqhf.cpp:35:1: error: expected \u2018\
    ,\u2019 or \u2018;\u2019 before \u2018}\u2019 token\n/tmp/tmpu_vozqhf.cpp:35:1:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// get_closest_vowel(\"yogurt\") ==> \"u\"\
    \n// get_closest_vowel(\"FULL\") ==> \"U\"\n// get_closest_vowel(\"quick\") ==>\
    \ \"\"\n// get_closest_vowel(\"ab\") ==> \"\"\nstd::string get_closest_vowel(std::string\
    \ word) {\n    std::string vowels = \"AEIOUaeiou\";\n    std::string vowels_reverse\
    \ = vowels.substr(0, vowels.size() - 1);\n    std::string vowels_reverse_reverse\
    \ = vowels_reverse.substr(0, vowels_reverse.size() - 1);\n    std::string vowels_reverse_reverse_reverse\
    \ = vowels_reverse_reverse.substr(0, vowels_reverse_reverse.size() - 1);\n   \
    \ std::string vowels_reverse_reverse_reverse_reverse = vowels_reverse_reverse_reverse.substr(0,\
    \ vowels_reverse_reverse_reverse.size() - 1);\n    std::string vowels_reverse_reverse_reverse_reverse_reverse\
    \ = vowels_reverse_reverse_reverse_reverse.substr(0, vowels_reverse_reverse_reverse_reverse.size()\
    \ - 1);\n    std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = vowels_reverse_reverse_reverse_reverse_reverse.substr(0, vowels_reverse_reverse_reverse_reverse_reverse.size()\
    \ - 1);\n    std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = vowels_reverse_reverse_reverse_reverse_reverse_reverse.substr(0, vowels_reverse_reverse_reverse_reverse_reverse_reverse.size()\
    \ - 1);\n    std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse.substr(0, vowels_reverse_reverse_reverse_reverse_reverse_reverse.size()\
    \ - 1);\n    std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse.substr(0, vowels_reverse_reverse_reverse_reverse_reverse_reverse.size()\
    \ - 1);\n    std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse.substr(0,\
    \ vowels_reverse_reverse_reverse_reverse_reverse_reverse.size() - 1);\n    std::string\
    \ vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse = vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse.substr(0,\
    \ vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse.size() - 1);\n\
    \    std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse.substr(0,\
    \ vowels_\n}\nint main() {\n    auto candidate = get_closest_vowel;\n    assert(candidate((\"\
    yogurt\")) == (\"u\"));\n    assert(candidate((\"full\")) == (\"u\"));\n    assert(candidate((\"\
    easy\")) == (\"\"));\n    assert(candidate((\"eAsy\")) == (\"\"));\n    assert(candidate((\"\
    ali\")) == (\"\"));\n    assert(candidate((\"bad\")) == (\"a\"));\n    assert(candidate((\"\
    most\")) == (\"o\"));\n    assert(candidate((\"ab\")) == (\"\"));\n    assert(candidate((\"\
    ba\")) == (\"\"));\n    assert(candidate((\"quick\")) == (\"\"));\n    assert(candidate((\"\
    anime\")) == (\"i\"));\n    assert(candidate((\"Asia\")) == (\"\"));\n    assert(candidate((\"\
    Above\")) == (\"o\"));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpsuu4xbwj.cpp: In function \u2018std::string get_closest_vowel(std::string)\u2019\
    :\n/tmp/tmpsuu4xbwj.cpp:23:17: error: redeclaration of \u2018std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\u2019\
    \n   23 |     std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse.substr(0, vowels_reverse_reverse_reverse_reverse_reverse_reverse.size()\
    \ - 1);\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpsuu4xbwj.cpp:22:17: note: \u2018std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\u2019\
    \ previously declared here\n   22 |     std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse.substr(0, vowels_reverse_reverse_reverse_reverse_reverse_reverse.size()\
    \ - 1);\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpsuu4xbwj.cpp:24:17: error: redeclaration of \u2018std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\u2019\
    \n   24 |     std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse.substr(0,\
    \ vowels_reverse_reverse_reverse_reverse_reverse_reverse.size() - 1);\n      |\
    \                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpsuu4xbwj.cpp:22:17: note: \u2018std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\u2019\
    \ previously declared here\n   22 |     std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse.substr(0, vowels_reverse_reverse_reverse_reverse_reverse_reverse.size()\
    \ - 1);\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpsuu4xbwj.cpp:25:17: error: redeclaration of \u2018std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\u2019\
    \n   25 |     std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse.substr(0,\
    \ vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse.size() - 1);\n\
    \      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpsuu4xbwj.cpp:22:17: note: \u2018std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\u2019\
    \ previously declared here\n   22 |     std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse.substr(0, vowels_reverse_reverse_reverse_reverse_reverse_reverse.size()\
    \ - 1);\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpsuu4xbwj.cpp:26:17: error: redeclaration of \u2018std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\u2019\
    \n   26 |     std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse.substr(0,\
    \ vowels_\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpsuu4xbwj.cpp:22:17: note: \u2018std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\u2019\
    \ previously declared here\n   22 |     std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse.substr(0, vowels_reverse_reverse_reverse_reverse_reverse_reverse.size()\
    \ - 1);\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpsuu4xbwj.cpp:26:90: error: \u2018vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\u2019\
    \ was not declared in this scope; did you mean \u2018vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\u2019\
    ?\n   26 |     std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse.substr(0,\
    \ vowels_\n      |                                                           \
    \                               ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    \      |                                                                     \
    \                     vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\n\
    /tmp/tmpsuu4xbwj.cpp:26:179: error: \u2018vowels_\u2019 was not declared in this\
    \ scope; did you mean \u2018vowels\u2019?\n   26 |     std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse.substr(0,\
    \ vowels_\n      |                                                           \
    \                                                                            \
    \                                            ^~~~~~~\n      |                \
    \                                                                            \
    \                                                                            \
    \           vowels\n/tmp/tmpsuu4xbwj.cpp:27:1: warning: no return statement in\
    \ function returning non-void [-Wreturn-type]\n   27 | }\n      | ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// get_closest_vowel(\"yogurt\") ==> \"u\"\
    \n// get_closest_vowel(\"FULL\") ==> \"U\"\n// get_closest_vowel(\"quick\") ==>\
    \ \"\"\n// get_closest_vowel(\"ab\") ==> \"\"\nstd::string get_closest_vowel(std::string\
    \ word) {\n    std::string vowels = \"AEIOUaeiou\";\n    std::string vowels_reverse\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse2 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse3 = \"AEIOUaeiou\";\n    std::string vowels_reverse4 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse5 = \"AEIOUaeiou\";\n    std::string vowels_reverse6\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse7 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse8 = \"AEIOUaeiou\";\n    std::string vowels_reverse9 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse10 = \"AEIOUaeiou\";\n    std::string vowels_reverse11\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse12 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse13 = \"AEIOUaeiou\";\n    std::string vowels_reverse14 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse15 = \"AEIOUaeiou\";\n    std::string vowels_reverse16\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse17 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse18 = \"AEIOUaeiou\";\n    std::string vowels_reverse19 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse20 = \"AEIOUaeiou\";\n    std::string vowels_reverse21\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse22 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse23 = \"AEIOUaeiou\";\n    std::string vowels_reverse24 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse25 = \"AEIOUaeiou\";\n    std::string vowels_reverse26\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse27 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse28 = \"AEIOUaeiou\";\n    std::string vowels_reverse29 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse30 = \"AEIOUaeiou\";\n    std::string vowels_reverse31\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse32 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse33 = \"AEIOUaeiou\";\n    std::string vowels_reverse34 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse35 = \"AEIOUaeiou\";\n    std::string vowels_reverse36\
    \ = \"AEIOU\n}\nint main() {\n    auto candidate = get_closest_vowel;\n    assert(candidate((\"\
    yogurt\")) == (\"u\"));\n    assert(candidate((\"full\")) == (\"u\"));\n    assert(candidate((\"\
    easy\")) == (\"\"));\n    assert(candidate((\"eAsy\")) == (\"\"));\n    assert(candidate((\"\
    ali\")) == (\"\"));\n    assert(candidate((\"bad\")) == (\"a\"));\n    assert(candidate((\"\
    most\")) == (\"o\"));\n    assert(candidate((\"ab\")) == (\"\"));\n    assert(candidate((\"\
    ba\")) == (\"\"));\n    assert(candidate((\"quick\")) == (\"\"));\n    assert(candidate((\"\
    anime\")) == (\"i\"));\n    assert(candidate((\"Asia\")) == (\"\"));\n    assert(candidate((\"\
    Above\")) == (\"o\"));\n}\n"
  stdout: ''
  stderr: "/tmp/tmppuap2tjm.cpp:50:36: warning: missing terminating \" character\n\
    \   50 |     std::string vowels_reverse36 = \"AEIOU\n      |                 \
    \                   ^\n/tmp/tmppuap2tjm.cpp:50:36: error: missing terminating\
    \ \" character\n   50 |     std::string vowels_reverse36 = \"AEIOU\n      |  \
    \                                  ^~~~~~\n/tmp/tmppuap2tjm.cpp: In function \u2018\
    std::string get_closest_vowel(std::string)\u2019:\n/tmp/tmppuap2tjm.cpp:51:1:\
    \ error: expected primary-expression before \u2018}\u2019 token\n   51 | }\n \
    \     | ^\n/tmp/tmppuap2tjm.cpp:51:1: error: expected \u2018,\u2019 or \u2018\
    ;\u2019 before \u2018}\u2019 token\n/tmp/tmppuap2tjm.cpp:51:1: warning: no return\
    \ statement in function returning non-void [-Wreturn-type]\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// get_closest_vowel(\"yogurt\") ==> \"u\"\
    \n// get_closest_vowel(\"FULL\") ==> \"U\"\n// get_closest_vowel(\"quick\") ==>\
    \ \"\"\n// get_closest_vowel(\"ab\") ==> \"\"\nstd::string get_closest_vowel(std::string\
    \ word) {\n    int n = word.length();\n    int vowel_counter = 0;\n    for(int\
    \ i = n-1; i >= 0; i--) {\n        if(word[i] == 'a' || word[i] == 'e' || word[i]\
    \ == 'i' || word[i] == 'o' || word[i] == 'u' || word[i] == 'y') {\n          \
    \  vowel_counter++;\n        }\n    }\n    std::string vowel;\n    if(vowel_counter\
    \ == 0) {\n        vowel = \"\";\n    } else {\n        vowel = word[vowel_counter-1];\n\
    \    }\n    return vowel;\n}\nint main() {\n    auto candidate = get_closest_vowel;\n\
    \    assert(candidate((\"yogurt\")) == (\"u\"));\n    assert(candidate((\"full\"\
    )) == (\"u\"));\n    assert(candidate((\"easy\")) == (\"\"));\n    assert(candidate((\"\
    eAsy\")) == (\"\"));\n    assert(candidate((\"ali\")) == (\"\"));\n    assert(candidate((\"\
    bad\")) == (\"a\"));\n    assert(candidate((\"most\")) == (\"o\"));\n    assert(candidate((\"\
    ab\")) == (\"\"));\n    assert(candidate((\"ba\")) == (\"\"));\n    assert(candidate((\"\
    quick\")) == (\"\"));\n    assert(candidate((\"anime\")) == (\"i\"));\n    assert(candidate((\"\
    Asia\")) == (\"\"));\n    assert(candidate((\"Above\")) == (\"o\"));\n}\n"
  stdout: ''
  stderr: "tmpfisoxjfl: /tmp/tmpfisoxjfl.cpp:31: int main(): Assertion `candidate((\"\
    yogurt\")) == (\"u\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// get_closest_vowel(\"yogurt\") ==> \"u\"\
    \n// get_closest_vowel(\"FULL\") ==> \"U\"\n// get_closest_vowel(\"quick\") ==>\
    \ \"\"\n// get_closest_vowel(\"ab\") ==> \"\"\nstd::string get_closest_vowel(std::string\
    \ word) {\n    std::string vowels = \"AEIOUaeiou\";\n    std::string vowels_reverse\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse2 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse3 = \"AEIOUaeiou\";\n    std::string vowels_reverse4 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse5 = \"AEIOUaeiou\";\n    std::string vowels_reverse6\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse7 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse8 = \"AEIOUaeiou\";\n    std::string vowels_reverse9 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse10 = \"AEIOUaeiou\";\n    std::string vowels_reverse11\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse12 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse13 = \"AEIOUaeiou\";\n    std::string vowels_reverse14 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse15 = \"AEIOUaeiou\";\n    std::string vowels_reverse16\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse17 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse18 = \"AEIOUaeiou\";\n    std::string vowels_reverse19 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse20 = \"AEIOUaeiou\";\n    std::string vowels_reverse21\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse22 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse23 = \"AEIOUaeiou\";\n    std::string vowels_reverse24 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse25 = \"AEIOUaeiou\";\n    std::string vowels_reverse26\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse27 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse28 = \"AEIOUaeiou\";\n    std::string vowels_reverse29 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse30 = \"AEIOUaeiou\";\n    std::string vowels_reverse31\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse32 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse33 = \"AEIOUaeiou\";\n    std::string vowels_reverse34 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse35 = \"AEIOUaeiou\";\n    std::string vowels_reverse36\
    \ = \"AEIOU\n}\nint main() {\n    auto candidate = get_closest_vowel;\n    assert(candidate((\"\
    yogurt\")) == (\"u\"));\n    assert(candidate((\"full\")) == (\"u\"));\n    assert(candidate((\"\
    easy\")) == (\"\"));\n    assert(candidate((\"eAsy\")) == (\"\"));\n    assert(candidate((\"\
    ali\")) == (\"\"));\n    assert(candidate((\"bad\")) == (\"a\"));\n    assert(candidate((\"\
    most\")) == (\"o\"));\n    assert(candidate((\"ab\")) == (\"\"));\n    assert(candidate((\"\
    ba\")) == (\"\"));\n    assert(candidate((\"quick\")) == (\"\"));\n    assert(candidate((\"\
    anime\")) == (\"i\"));\n    assert(candidate((\"Asia\")) == (\"\"));\n    assert(candidate((\"\
    Above\")) == (\"o\"));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpnqo0tqea.cpp:50:36: warning: missing terminating \" character\n\
    \   50 |     std::string vowels_reverse36 = \"AEIOU\n      |                 \
    \                   ^\n/tmp/tmpnqo0tqea.cpp:50:36: error: missing terminating\
    \ \" character\n   50 |     std::string vowels_reverse36 = \"AEIOU\n      |  \
    \                                  ^~~~~~\n/tmp/tmpnqo0tqea.cpp: In function \u2018\
    std::string get_closest_vowel(std::string)\u2019:\n/tmp/tmpnqo0tqea.cpp:51:1:\
    \ error: expected primary-expression before \u2018}\u2019 token\n   51 | }\n \
    \     | ^\n/tmp/tmpnqo0tqea.cpp:51:1: error: expected \u2018,\u2019 or \u2018\
    ;\u2019 before \u2018}\u2019 token\n/tmp/tmpnqo0tqea.cpp:51:1: warning: no return\
    \ statement in function returning non-void [-Wreturn-type]\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// get_closest_vowel(\"yogurt\") ==> \"u\"\
    \n// get_closest_vowel(\"FULL\") ==> \"U\"\n// get_closest_vowel(\"quick\") ==>\
    \ \"\"\n// get_closest_vowel(\"ab\") ==> \"\"\nstd::string get_closest_vowel(std::string\
    \ word) {\n    std::string vowels = \"AEIOUaeiou\";\n    std::string vowels_reverse\
    \ = vowels.substr(0, vowels.size() - 1);\n    std::string vowels_reverse_reverse\
    \ = vowels_reverse.substr(0, vowels_reverse.size() - 1);\n    std::string vowels_reverse_reverse_reverse\
    \ = vowels_reverse_reverse.substr(0, vowels_reverse_reverse.size() - 1);\n   \
    \ std::string vowels_reverse_reverse_reverse_reverse = vowels_reverse_reverse_reverse.substr(0,\
    \ vowels_reverse_reverse_reverse.size() - 1);\n    std::string vowels_reverse_reverse_reverse_reverse_reverse\
    \ = vowels_reverse_reverse_reverse_reverse.substr(0, vowels_reverse_reverse_reverse_reverse.size()\
    \ - 1);\n    std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = vowels_reverse_reverse_reverse_reverse_reverse.substr(0, vowels_reverse_reverse_reverse_reverse_reverse.size()\
    \ - 1);\n    std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = vowels_reverse_reverse_reverse_reverse_reverse_reverse.substr(0, vowels_reverse_reverse_reverse_reverse_reverse_reverse.size()\
    \ - 1);\n    std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse.substr(0, vowels_reverse_reverse_reverse_reverse_reverse_reverse.size()\
    \ - 1);\n    std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse.substr(0, vowels_reverse_reverse_reverse_reverse_reverse_reverse.size()\
    \ - 1);\n    std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse.substr(0,\
    \ vowels_reverse_reverse_reverse_reverse_reverse_reverse.size() - 1);\n    std::string\
    \ vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse = vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse.substr(0,\
    \ vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse.size() - 1);\n\
    \    std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse.substr(0,\
    \ vowels_\n}\nint main() {\n    auto candidate = get_closest_vowel;\n    assert(candidate((\"\
    yogurt\")) == (\"u\"));\n    assert(candidate((\"full\")) == (\"u\"));\n    assert(candidate((\"\
    easy\")) == (\"\"));\n    assert(candidate((\"eAsy\")) == (\"\"));\n    assert(candidate((\"\
    ali\")) == (\"\"));\n    assert(candidate((\"bad\")) == (\"a\"));\n    assert(candidate((\"\
    most\")) == (\"o\"));\n    assert(candidate((\"ab\")) == (\"\"));\n    assert(candidate((\"\
    ba\")) == (\"\"));\n    assert(candidate((\"quick\")) == (\"\"));\n    assert(candidate((\"\
    anime\")) == (\"i\"));\n    assert(candidate((\"Asia\")) == (\"\"));\n    assert(candidate((\"\
    Above\")) == (\"o\"));\n}\n"
  stdout: ''
  stderr: "/tmp/tmps4z9yldq.cpp: In function \u2018std::string get_closest_vowel(std::string)\u2019\
    :\n/tmp/tmps4z9yldq.cpp:23:17: error: redeclaration of \u2018std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\u2019\
    \n   23 |     std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse.substr(0, vowels_reverse_reverse_reverse_reverse_reverse_reverse.size()\
    \ - 1);\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmps4z9yldq.cpp:22:17: note: \u2018std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\u2019\
    \ previously declared here\n   22 |     std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse.substr(0, vowels_reverse_reverse_reverse_reverse_reverse_reverse.size()\
    \ - 1);\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmps4z9yldq.cpp:24:17: error: redeclaration of \u2018std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\u2019\
    \n   24 |     std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse.substr(0,\
    \ vowels_reverse_reverse_reverse_reverse_reverse_reverse.size() - 1);\n      |\
    \                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmps4z9yldq.cpp:22:17: note: \u2018std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\u2019\
    \ previously declared here\n   22 |     std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse.substr(0, vowels_reverse_reverse_reverse_reverse_reverse_reverse.size()\
    \ - 1);\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmps4z9yldq.cpp:25:17: error: redeclaration of \u2018std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\u2019\
    \n   25 |     std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse.substr(0,\
    \ vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse.size() - 1);\n\
    \      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmps4z9yldq.cpp:22:17: note: \u2018std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\u2019\
    \ previously declared here\n   22 |     std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse.substr(0, vowels_reverse_reverse_reverse_reverse_reverse_reverse.size()\
    \ - 1);\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmps4z9yldq.cpp:26:17: error: redeclaration of \u2018std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\u2019\
    \n   26 |     std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse.substr(0,\
    \ vowels_\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmps4z9yldq.cpp:22:17: note: \u2018std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\u2019\
    \ previously declared here\n   22 |     std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse.substr(0, vowels_reverse_reverse_reverse_reverse_reverse_reverse.size()\
    \ - 1);\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmps4z9yldq.cpp:26:90: error: \u2018vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\u2019\
    \ was not declared in this scope; did you mean \u2018vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\u2019\
    ?\n   26 |     std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse.substr(0,\
    \ vowels_\n      |                                                           \
    \                               ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    \      |                                                                     \
    \                     vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\n\
    /tmp/tmps4z9yldq.cpp:26:179: error: \u2018vowels_\u2019 was not declared in this\
    \ scope; did you mean \u2018vowels\u2019?\n   26 |     std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse.substr(0,\
    \ vowels_\n      |                                                           \
    \                                                                            \
    \                                            ^~~~~~~\n      |                \
    \                                                                            \
    \                                                                            \
    \           vowels\n/tmp/tmps4z9yldq.cpp:27:1: warning: no return statement in\
    \ function returning non-void [-Wreturn-type]\n   27 | }\n      | ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// get_closest_vowel(\"yogurt\") ==> \"u\"\
    \n// get_closest_vowel(\"FULL\") ==> \"U\"\n// get_closest_vowel(\"quick\") ==>\
    \ \"\"\n// get_closest_vowel(\"ab\") ==> \"\"\nstd::string get_closest_vowel(std::string\
    \ word) {\n    std::string vowels = \"AEIOUaeiou\";\n    std::string vowels_end\
    \ = \"AEIOUaeiou\";\n    std::string vowels_start = \"AEIOUaeiou\";\n    std::string\
    \ vowels_middle = \"AEIOUaeiou\";\n    std::string vowels_start2 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_end2 = \"AEIOUaeiou\";\n    std::string vowels_middle2\
    \ = \"AEIOUaeiou\";\n    std::string vowels_start3 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_end3 = \"AEIOUaeiou\";\n    std::string vowels_middle3 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_start4 = \"AEIOUaeiou\";\n    std::string vowels_end4\
    \ = \"AEIOUaeiou\";\n    std::string vowels_middle4 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_start5 = \"AEIOUaeiou\";\n    std::string vowels_end5 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_middle5 = \"AEIOUaeiou\";\n    std::string vowels_start6\
    \ = \"AEIOUaeiou\";\n    std::string vowels_end6 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_middle6 = \"AEIOUaeiou\";\n    std::string vowels_start7 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_end7 = \"AEIOUaeiou\";\n    std::string vowels_middle7\
    \ = \"AEIOUaeiou\";\n    std::string vowels_start8 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_end8 = \"AEIOUaeiou\";\n    std::string vowels_middle8 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_start9 = \"AEIOUaeiou\";\n    std::string vowels_end9\
    \ = \"AEIOUaeiou\";\n    std::string vowels_middle9 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_start10 = \"AEIOUaeiou\";\n    std::string vowels_end10 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_middle10 = \"AEIOUaeiou\";\n    std::string vowels_start11\
    \ = \"AEIOUaeiou\";\n    std::string vowels_end11 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_middle11 = \"AEIOUaeiou\";\n    std::string vowels_start12 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_end12 = \"AEIOUaeiou\";\n    std::string vowels_middle12\
    \ = \"AEIOUaeiou\";\n\n}\nint main() {\n    auto candidate = get_closest_vowel;\n\
    \    assert(candidate((\"yogurt\")) == (\"u\"));\n    assert(candidate((\"full\"\
    )) == (\"u\"));\n    assert(candidate((\"easy\")) == (\"\"));\n    assert(candidate((\"\
    eAsy\")) == (\"\"));\n    assert(candidate((\"ali\")) == (\"\"));\n    assert(candidate((\"\
    bad\")) == (\"a\"));\n    assert(candidate((\"most\")) == (\"o\"));\n    assert(candidate((\"\
    ab\")) == (\"\"));\n    assert(candidate((\"ba\")) == (\"\"));\n    assert(candidate((\"\
    quick\")) == (\"\"));\n    assert(candidate((\"anime\")) == (\"i\"));\n    assert(candidate((\"\
    Asia\")) == (\"\"));\n    assert(candidate((\"Above\")) == (\"o\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// get_closest_vowel(\"yogurt\") ==> \"u\"\
    \n// get_closest_vowel(\"FULL\") ==> \"U\"\n// get_closest_vowel(\"quick\") ==>\
    \ \"\"\n// get_closest_vowel(\"ab\") ==> \"\"\nstd::string get_closest_vowel(std::string\
    \ word) {\n    std::string vowels = \"AEIOUaeiou\";\n    std::string vowels_reverse\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse2 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse3 = \"AEIOUaeiou\";\n    std::string vowels_reverse4 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse5 = \"AEIOUaeiou\";\n    std::string vowels_reverse6\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse7 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse8 = \"AEIOUaeiou\";\n    std::string vowels_reverse9 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse10 = \"AEIOUaeiou\";\n    std::string vowels_reverse11\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse12 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse13 = \"AEIOUaeiou\";\n    std::string vowels_reverse14 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse15 = \"AEIOUaeiou\";\n    std::string vowels_reverse16\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse17 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse18 = \"AEIOUaeiou\";\n    std::string vowels_reverse19 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse20 = \"AEIOUaeiou\";\n    std::string vowels_reverse21\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse22 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse23 = \"AEIOUaeiou\";\n    std::string vowels_reverse24 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse25 = \"AEIOUaeiou\";\n    std::string vowels_reverse26\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse27 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse28 = \"AEIOUaeiou\";\n    std::string vowels_reverse29 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse30 = \"AEIOUaeiou\";\n    std::string vowels_reverse31\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse32 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse33 = \"AEIOUaeiou\";\n    std::string vowels_reverse34 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse35 = \"AEIOUaeiou\";\n    std::string vowels_reverse36\
    \ = \"AEIOU\n}\nint main() {\n    auto candidate = get_closest_vowel;\n    assert(candidate((\"\
    yogurt\")) == (\"u\"));\n    assert(candidate((\"full\")) == (\"u\"));\n    assert(candidate((\"\
    easy\")) == (\"\"));\n    assert(candidate((\"eAsy\")) == (\"\"));\n    assert(candidate((\"\
    ali\")) == (\"\"));\n    assert(candidate((\"bad\")) == (\"a\"));\n    assert(candidate((\"\
    most\")) == (\"o\"));\n    assert(candidate((\"ab\")) == (\"\"));\n    assert(candidate((\"\
    ba\")) == (\"\"));\n    assert(candidate((\"quick\")) == (\"\"));\n    assert(candidate((\"\
    anime\")) == (\"i\"));\n    assert(candidate((\"Asia\")) == (\"\"));\n    assert(candidate((\"\
    Above\")) == (\"o\"));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpiq8uzaqu.cpp:50:36: warning: missing terminating \" character\n\
    \   50 |     std::string vowels_reverse36 = \"AEIOU\n      |                 \
    \                   ^\n/tmp/tmpiq8uzaqu.cpp:50:36: error: missing terminating\
    \ \" character\n   50 |     std::string vowels_reverse36 = \"AEIOU\n      |  \
    \                                  ^~~~~~\n/tmp/tmpiq8uzaqu.cpp: In function \u2018\
    std::string get_closest_vowel(std::string)\u2019:\n/tmp/tmpiq8uzaqu.cpp:51:1:\
    \ error: expected primary-expression before \u2018}\u2019 token\n   51 | }\n \
    \     | ^\n/tmp/tmpiq8uzaqu.cpp:51:1: error: expected \u2018,\u2019 or \u2018\
    ;\u2019 before \u2018}\u2019 token\n/tmp/tmpiq8uzaqu.cpp:51:1: warning: no return\
    \ statement in function returning non-void [-Wreturn-type]\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// get_closest_vowel(\"yogurt\") ==> \"u\"\
    \n// get_closest_vowel(\"FULL\") ==> \"U\"\n// get_closest_vowel(\"quick\") ==>\
    \ \"\"\n// get_closest_vowel(\"ab\") ==> \"\"\nstd::string get_closest_vowel(std::string\
    \ word) {\n    std::string vowels = \"AEIOUaeiou\";\n    std::string vowels_reverse\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse2 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse3 = \"AEIOUaeiou\";\n    std::string vowels_reverse4 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse5 = \"AEIOUaeiou\";\n    std::string vowels_reverse6\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse7 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse8 = \"AEIOUaeiou\";\n    std::string vowels_reverse9 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse10 = \"AEIOUaeiou\";\n    std::string vowels_reverse11\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse12 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse13 = \"AEIOUaeiou\";\n    std::string vowels_reverse14 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse15 = \"AEIOUaeiou\";\n    std::string vowels_reverse16\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse17 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse18 = \"AEIOUaeiou\";\n    std::string vowels_reverse19 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse20 = \"AEIOUaeiou\";\n    std::string vowels_reverse21\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse22 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse23 = \"AEIOUaeiou\";\n    std::string vowels_reverse24 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse25 = \"AEIOUaeiou\";\n    std::string vowels_reverse26\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse27 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse28 = \"AEIOUaeiou\";\n    std::string vowels_reverse29 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse30 = \"AEIOUaeiou\";\n    std::string vowels_reverse31\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse32 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse33 = \"AEIOUaeiou\";\n    std::string vowels_reverse34 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse35 = \"AEIOUaeiou\";\n    std::string vowels_reverse36\
    \ = \"AEIOU\n}\nint main() {\n    auto candidate = get_closest_vowel;\n    assert(candidate((\"\
    yogurt\")) == (\"u\"));\n    assert(candidate((\"full\")) == (\"u\"));\n    assert(candidate((\"\
    easy\")) == (\"\"));\n    assert(candidate((\"eAsy\")) == (\"\"));\n    assert(candidate((\"\
    ali\")) == (\"\"));\n    assert(candidate((\"bad\")) == (\"a\"));\n    assert(candidate((\"\
    most\")) == (\"o\"));\n    assert(candidate((\"ab\")) == (\"\"));\n    assert(candidate((\"\
    ba\")) == (\"\"));\n    assert(candidate((\"quick\")) == (\"\"));\n    assert(candidate((\"\
    anime\")) == (\"i\"));\n    assert(candidate((\"Asia\")) == (\"\"));\n    assert(candidate((\"\
    Above\")) == (\"o\"));\n}\n"
  stdout: ''
  stderr: "/tmp/tmptctg0lbk.cpp:50:36: warning: missing terminating \" character\n\
    \   50 |     std::string vowels_reverse36 = \"AEIOU\n      |                 \
    \                   ^\n/tmp/tmptctg0lbk.cpp:50:36: error: missing terminating\
    \ \" character\n   50 |     std::string vowels_reverse36 = \"AEIOU\n      |  \
    \                                  ^~~~~~\n/tmp/tmptctg0lbk.cpp: In function \u2018\
    std::string get_closest_vowel(std::string)\u2019:\n/tmp/tmptctg0lbk.cpp:51:1:\
    \ error: expected primary-expression before \u2018}\u2019 token\n   51 | }\n \
    \     | ^\n/tmp/tmptctg0lbk.cpp:51:1: error: expected \u2018,\u2019 or \u2018\
    ;\u2019 before \u2018}\u2019 token\n/tmp/tmptctg0lbk.cpp:51:1: warning: no return\
    \ statement in function returning non-void [-Wreturn-type]\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// get_closest_vowel(\"yogurt\") ==> \"u\"\
    \n// get_closest_vowel(\"FULL\") ==> \"U\"\n// get_closest_vowel(\"quick\") ==>\
    \ \"\"\n// get_closest_vowel(\"ab\") ==> \"\"\nstd::string get_closest_vowel(std::string\
    \ word) {\n    std::string vowels = \"AEIOUaeiou\";\n    std::string vowels_reverse\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse2 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse3 = \"AEIOUaeiou\";\n    std::string vowels_reverse4 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse5 = \"AEIOUaeiou\";\n    std::string vowels_reverse6\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse7 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse8 = \"AEIOUaeiou\";\n    std::string vowels_reverse9 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse10 = \"AEIOUaeiou\";\n    std::string vowels_reverse11\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse12 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse13 = \"AEIOUaeiou\";\n    std::string vowels_reverse14 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse15 = \"AEIOUaeiou\";\n    std::string vowels_reverse16\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse17 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse18 = \"AEIOUaeiou\";\n    std::string vowels_reverse19 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse20 = \"AEIOUaeiou\";\n    std::string vowels_reverse21\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse22 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse23 = \"AEIOUaeiou\";\n    std::string vowels_reverse24 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse25 = \"AEIOUaeiou\";\n    std::string vowels_reverse26\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse27 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse28 = \"AEIOUaeiou\";\n    std::string vowels_reverse29 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse30 = \"AEIOUaeiou\";\n    std::string vowels_reverse31\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse32 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse33 = \"AEIOUaeiou\";\n    std::string vowels_reverse34 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse35 = \"AEIOUaeiou\";\n    std::string vowels_reverse36\
    \ = \"AEIOU\n}\nint main() {\n    auto candidate = get_closest_vowel;\n    assert(candidate((\"\
    yogurt\")) == (\"u\"));\n    assert(candidate((\"full\")) == (\"u\"));\n    assert(candidate((\"\
    easy\")) == (\"\"));\n    assert(candidate((\"eAsy\")) == (\"\"));\n    assert(candidate((\"\
    ali\")) == (\"\"));\n    assert(candidate((\"bad\")) == (\"a\"));\n    assert(candidate((\"\
    most\")) == (\"o\"));\n    assert(candidate((\"ab\")) == (\"\"));\n    assert(candidate((\"\
    ba\")) == (\"\"));\n    assert(candidate((\"quick\")) == (\"\"));\n    assert(candidate((\"\
    anime\")) == (\"i\"));\n    assert(candidate((\"Asia\")) == (\"\"));\n    assert(candidate((\"\
    Above\")) == (\"o\"));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpoql7d5un.cpp:50:36: warning: missing terminating \" character\n\
    \   50 |     std::string vowels_reverse36 = \"AEIOU\n      |                 \
    \                   ^\n/tmp/tmpoql7d5un.cpp:50:36: error: missing terminating\
    \ \" character\n   50 |     std::string vowels_reverse36 = \"AEIOU\n      |  \
    \                                  ^~~~~~\n/tmp/tmpoql7d5un.cpp: In function \u2018\
    std::string get_closest_vowel(std::string)\u2019:\n/tmp/tmpoql7d5un.cpp:51:1:\
    \ error: expected primary-expression before \u2018}\u2019 token\n   51 | }\n \
    \     | ^\n/tmp/tmpoql7d5un.cpp:51:1: error: expected \u2018,\u2019 or \u2018\
    ;\u2019 before \u2018}\u2019 token\n/tmp/tmpoql7d5un.cpp:51:1: warning: no return\
    \ statement in function returning non-void [-Wreturn-type]\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// get_closest_vowel(\"yogurt\") ==> \"u\"\
    \n// get_closest_vowel(\"FULL\") ==> \"U\"\n// get_closest_vowel(\"quick\") ==>\
    \ \"\"\n// get_closest_vowel(\"ab\") ==> \"\"\nstd::string get_closest_vowel(std::string\
    \ word) {\n    std::string vowels = \"AEIOUaeiou\";\n    std::string vowels_reverse\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse2 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse3 = \"AEIOUaeiou\";\n    std::string vowels_reverse4 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse5 = \"AEIOUaeiou\";\n    std::string vowels_reverse6\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse7 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse8 = \"AEIOUaeiou\";\n    std::string vowels_reverse9 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse10 = \"AEIOUaeiou\";\n    std::string vowels_reverse11\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse12 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse13 = \"AEIOUaeiou\";\n    std::string vowels_reverse14 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse15 = \"AEIOUaeiou\";\n    std::string vowels_reverse16\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse17 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse18 = \"AEIOUaeiou\";\n    std::string vowels_reverse19 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse20 = \"AEIOUaeiou\";\n    std::string vowels_reverse21\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse22 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse23 = \"AEIOUaeiou\";\n    std::string vowels_reverse24 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse25 = \"AEIOUaeiou\";\n    std::string vowels_reverse26\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse27 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse28 = \"AEIOUaeiou\";\n    std::string vowels_reverse29 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse30 = \"AEIOUaeiou\";\n    std::string vowels_reverse31\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse32 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse33 = \"AEIOUaeiou\";\n    std::string vowels_reverse34 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse35 = \"AEIOUaeiou\";\n    std::string vowels_reverse36\
    \ = \"AEIOU\n}\nint main() {\n    auto candidate = get_closest_vowel;\n    assert(candidate((\"\
    yogurt\")) == (\"u\"));\n    assert(candidate((\"full\")) == (\"u\"));\n    assert(candidate((\"\
    easy\")) == (\"\"));\n    assert(candidate((\"eAsy\")) == (\"\"));\n    assert(candidate((\"\
    ali\")) == (\"\"));\n    assert(candidate((\"bad\")) == (\"a\"));\n    assert(candidate((\"\
    most\")) == (\"o\"));\n    assert(candidate((\"ab\")) == (\"\"));\n    assert(candidate((\"\
    ba\")) == (\"\"));\n    assert(candidate((\"quick\")) == (\"\"));\n    assert(candidate((\"\
    anime\")) == (\"i\"));\n    assert(candidate((\"Asia\")) == (\"\"));\n    assert(candidate((\"\
    Above\")) == (\"o\"));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpkjsbjh4b.cpp:50:36: warning: missing terminating \" character\n\
    \   50 |     std::string vowels_reverse36 = \"AEIOU\n      |                 \
    \                   ^\n/tmp/tmpkjsbjh4b.cpp:50:36: error: missing terminating\
    \ \" character\n   50 |     std::string vowels_reverse36 = \"AEIOU\n      |  \
    \                                  ^~~~~~\n/tmp/tmpkjsbjh4b.cpp: In function \u2018\
    std::string get_closest_vowel(std::string)\u2019:\n/tmp/tmpkjsbjh4b.cpp:51:1:\
    \ error: expected primary-expression before \u2018}\u2019 token\n   51 | }\n \
    \     | ^\n/tmp/tmpkjsbjh4b.cpp:51:1: error: expected \u2018,\u2019 or \u2018\
    ;\u2019 before \u2018}\u2019 token\n/tmp/tmpkjsbjh4b.cpp:51:1: warning: no return\
    \ statement in function returning non-void [-Wreturn-type]\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// get_closest_vowel(\"yogurt\") ==> \"u\"\
    \n// get_closest_vowel(\"FULL\") ==> \"U\"\n// get_closest_vowel(\"quick\") ==>\
    \ \"\"\n// get_closest_vowel(\"ab\") ==> \"\"\nstd::string get_closest_vowel(std::string\
    \ word) {\n    std::string vowels = \"AEIOUaeiou\";\n    std::string vowels_end\
    \ = \"AEIOUaeiou\";\n    std::string vowels_start = \"AEIOUaeiou\";\n    std::string\
    \ vowels_middle = \"AEIOUaeiou\";\n    std::string vowels_start_end = \"AEIOUaeiou\"\
    ;\n    std::string vowels_middle_end = \"AEIOUaeiou\";\n    std::string vowels_start_end_middle\
    \ = \"AEIOUaeiou\";\n    std::string vowels_middle_start_end = \"AEIOUaeiou\"\
    ;\n    std::string vowels_start_middle_end = \"AEIOUaeiou\";\n    std::string\
    \ vowels_start_end_middle_start = \"AEIOUaeiou\";\n    std::string vowels_middle_start_end_start\
    \ = \"AEIOUaeiou\";\n    std::string vowels_middle_end_start_start = \"AEIOUaeiou\"\
    ;\n    std::string vowels_start_middle_end_start = \"AEIOUaeiou\";\n    std::string\
    \ vowels_start_end_middle_start = \"AEIOUaeiou\";\n    std::string vowels_middle_start_end_start_start\
    \ = \"AEIOUaeiou\";\n    std::string vowels_middle_end_start_start_start = \"\
    AEIOUaeiou\";\n    std::string vowels_start_end_middle_start_start = \"AEIOUaeiou\"\
    ;\n    std::string vowels_middle_start_end_start_start_start = \"AEIOUaeiou\"\
    ;\n    std::string vowels_start_end_middle_start_start_start = \"AEIOUaeiou\"\
    ;\n    std::string vowels_middle_start_end_start_start_start_start = \"AEIOUaeiou\"\
    ;\n    std::string vowels_start_end_middle_start_start_start_start = \"AEIOUaeiou\"\
    ;\n    std::string vowels_middle_start_end_start_start_start_start_start = \"\
    AEIOUaeiou\";\n    std::string vowels_start_end_middle_start_start_start_start_start\
    \ = \"AEIOUaeiou\";\n    std::string vowels_middle_start_end_start_start_start_start_start\
    \ = \"AEIOUaeiou\";\n    std::string vowels_start_end_middle_start_start_start_start_start\
    \ = \"AEIOUaeiou\";\n    std::string vowels_middle_start_end_start_start_start_start_start_start\
    \ = \"AEIOUaeiou\";\n    std::string vowels_start_end_middle_start_start_start_start_start_start\
    \ = \"AEIOUaeiou\";\n    std::string vowels_middle_start_end_start_start_start_start_start_start_start\
    \ = \"AEIOUaeiou\";\n    std::string vowels_start_end_middle_start_start_start_start_start_start_start\
    \ = \"AEIOUaeiou\";\n    std::string vowels_middle_start_end_start_start_start_start_start_start_start_start\
    \ = \"AEIO\n}\nint main() {\n    auto candidate = get_closest_vowel;\n    assert(candidate((\"\
    yogurt\")) == (\"u\"));\n    assert(candidate((\"full\")) == (\"u\"));\n    assert(candidate((\"\
    easy\")) == (\"\"));\n    assert(candidate((\"eAsy\")) == (\"\"));\n    assert(candidate((\"\
    ali\")) == (\"\"));\n    assert(candidate((\"bad\")) == (\"a\"));\n    assert(candidate((\"\
    most\")) == (\"o\"));\n    assert(candidate((\"ab\")) == (\"\"));\n    assert(candidate((\"\
    ba\")) == (\"\"));\n    assert(candidate((\"quick\")) == (\"\"));\n    assert(candidate((\"\
    anime\")) == (\"i\"));\n    assert(candidate((\"Asia\")) == (\"\"));\n    assert(candidate((\"\
    Above\")) == (\"o\"));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpgxoc5lrs.cpp:43:91: warning: missing terminating \" character\n\
    \   43 |     std::string vowels_middle_start_end_start_start_start_start_start_start_start_start\
    \ = \"AEIO\n      |                                                          \
    \                                 ^\n/tmp/tmpgxoc5lrs.cpp:43:91: error: missing\
    \ terminating \" character\n   43 |     std::string vowels_middle_start_end_start_start_start_start_start_start_start_start\
    \ = \"AEIO\n      |                                                          \
    \                                 ^~~~~\n/tmp/tmpgxoc5lrs.cpp: In function \u2018\
    std::string get_closest_vowel(std::string)\u2019:\n/tmp/tmpgxoc5lrs.cpp:27:17:\
    \ error: redeclaration of \u2018std::string vowels_start_end_middle_start\u2019\
    \n   27 |     std::string vowels_start_end_middle_start = \"AEIOUaeiou\";\n  \
    \    |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpgxoc5lrs.cpp:23:17:\
    \ note: \u2018std::string vowels_start_end_middle_start\u2019 previously declared\
    \ here\n   23 |     std::string vowels_start_end_middle_start = \"AEIOUaeiou\"\
    ;\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpgxoc5lrs.cpp:37:17:\
    \ error: redeclaration of \u2018std::string vowels_middle_start_end_start_start_start_start_start\u2019\
    \n   37 |     std::string vowels_middle_start_end_start_start_start_start_start\
    \ = \"AEIOUaeiou\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpgxoc5lrs.cpp:35:17: note: \u2018std::string vowels_middle_start_end_start_start_start_start_start\u2019\
    \ previously declared here\n   35 |     std::string vowels_middle_start_end_start_start_start_start_start\
    \ = \"AEIOUaeiou\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpgxoc5lrs.cpp:38:17: error: redeclaration of \u2018std::string vowels_start_end_middle_start_start_start_start_start\u2019\
    \n   38 |     std::string vowels_start_end_middle_start_start_start_start_start\
    \ = \"AEIOUaeiou\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpgxoc5lrs.cpp:36:17: note: \u2018std::string vowels_start_end_middle_start_start_start_start_start\u2019\
    \ previously declared here\n   36 |     std::string vowels_start_end_middle_start_start_start_start_start\
    \ = \"AEIOUaeiou\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpgxoc5lrs.cpp:44:1: error: expected primary-expression before \u2018}\u2019\
    \ token\n   44 | }\n      | ^\n/tmp/tmpgxoc5lrs.cpp:44:1: error: expected \u2018\
    ,\u2019 or \u2018;\u2019 before \u2018}\u2019 token\n/tmp/tmpgxoc5lrs.cpp:44:1:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// get_closest_vowel(\"yogurt\") ==> \"u\"\
    \n// get_closest_vowel(\"FULL\") ==> \"U\"\n// get_closest_vowel(\"quick\") ==>\
    \ \"\"\n// get_closest_vowel(\"ab\") ==> \"\"\nstd::string get_closest_vowel(std::string\
    \ word) {\n    std::string vowels = \"AEIOUaeiou\";\n    std::string vowels_reverse\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse2 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse3 = \"AEIOUaeiou\";\n    std::string vowels_reverse4 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse5 = \"AEIOUaeiou\";\n    std::string vowels_reverse6\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse7 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse8 = \"AEIOUaeiou\";\n    std::string vowels_reverse9 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse10 = \"AEIOUaeiou\";\n    std::string vowels_reverse11\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse12 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse13 = \"AEIOUaeiou\";\n    std::string vowels_reverse14 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse15 = \"AEIOUaeiou\";\n    std::string vowels_reverse16\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse17 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse18 = \"AEIOUaeiou\";\n    std::string vowels_reverse19 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse20 = \"AEIOUaeiou\";\n    std::string vowels_reverse21\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse22 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse23 = \"AEIOUaeiou\";\n    std::string vowels_reverse24 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse25 = \"AEIOUaeiou\";\n    std::string vowels_reverse26\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse27 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse28 = \"AEIOUaeiou\";\n    std::string vowels_reverse29 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse30 = \"AEIOUaeiou\";\n    std::string vowels_reverse31\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse32 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse33 = \"AEIOUaeiou\";\n    std::string vowels_reverse34 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse35 = \"AEIOUaeiou\";\n    std::string vowels_reverse36\
    \ = \"AEIOU\n}\nint main() {\n    auto candidate = get_closest_vowel;\n    assert(candidate((\"\
    yogurt\")) == (\"u\"));\n    assert(candidate((\"full\")) == (\"u\"));\n    assert(candidate((\"\
    easy\")) == (\"\"));\n    assert(candidate((\"eAsy\")) == (\"\"));\n    assert(candidate((\"\
    ali\")) == (\"\"));\n    assert(candidate((\"bad\")) == (\"a\"));\n    assert(candidate((\"\
    most\")) == (\"o\"));\n    assert(candidate((\"ab\")) == (\"\"));\n    assert(candidate((\"\
    ba\")) == (\"\"));\n    assert(candidate((\"quick\")) == (\"\"));\n    assert(candidate((\"\
    anime\")) == (\"i\"));\n    assert(candidate((\"Asia\")) == (\"\"));\n    assert(candidate((\"\
    Above\")) == (\"o\"));\n}\n"
  stdout: ''
  stderr: "/tmp/tmppnxtjksd.cpp:50:36: warning: missing terminating \" character\n\
    \   50 |     std::string vowels_reverse36 = \"AEIOU\n      |                 \
    \                   ^\n/tmp/tmppnxtjksd.cpp:50:36: error: missing terminating\
    \ \" character\n   50 |     std::string vowels_reverse36 = \"AEIOU\n      |  \
    \                                  ^~~~~~\n/tmp/tmppnxtjksd.cpp: In function \u2018\
    std::string get_closest_vowel(std::string)\u2019:\n/tmp/tmppnxtjksd.cpp:51:1:\
    \ error: expected primary-expression before \u2018}\u2019 token\n   51 | }\n \
    \     | ^\n/tmp/tmppnxtjksd.cpp:51:1: error: expected \u2018,\u2019 or \u2018\
    ;\u2019 before \u2018}\u2019 token\n/tmp/tmppnxtjksd.cpp:51:1: warning: no return\
    \ statement in function returning non-void [-Wreturn-type]\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// get_closest_vowel(\"yogurt\") ==> \"u\"\
    \n// get_closest_vowel(\"FULL\") ==> \"U\"\n// get_closest_vowel(\"quick\") ==>\
    \ \"\"\n// get_closest_vowel(\"ab\") ==> \"\"\nstd::string get_closest_vowel(std::string\
    \ word) {\n    std::string vowels = \"AEIOUaeiou\";\n    std::string vowels_reverse\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_reverse = \"AEIOUaeiou\";\n\
    \    std::string vowels_reverse_reverse_reverse = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse_reverse_reverse_reverse = \"AEIOUaeiou\";\n    std::string vowels_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AE\n}\nint main() {\n    auto candidate = get_closest_vowel;\n    assert(candidate((\"\
    yogurt\")) == (\"u\"));\n    assert(candidate((\"full\")) == (\"u\"));\n    assert(candidate((\"\
    easy\")) == (\"\"));\n    assert(candidate((\"eAsy\")) == (\"\"));\n    assert(candidate((\"\
    ali\")) == (\"\"));\n    assert(candidate((\"bad\")) == (\"a\"));\n    assert(candidate((\"\
    most\")) == (\"o\"));\n    assert(candidate((\"ab\")) == (\"\"));\n    assert(candidate((\"\
    ba\")) == (\"\"));\n    assert(candidate((\"quick\")) == (\"\"));\n    assert(candidate((\"\
    anime\")) == (\"i\"));\n    assert(candidate((\"Asia\")) == (\"\"));\n    assert(candidate((\"\
    Above\")) == (\"o\"));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpr7y_ryxv.cpp:35:90: warning: missing terminating \" character\n\
    \   35 |     std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AE\n      |                                                            \
    \                              ^\n/tmp/tmpr7y_ryxv.cpp:35:90: error: missing terminating\
    \ \" character\n   35 |     std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AE\n      |                                                            \
    \                              ^~~\n/tmp/tmpr7y_ryxv.cpp: In function \u2018std::string\
    \ get_closest_vowel(std::string)\u2019:\n/tmp/tmpr7y_ryxv.cpp:22:17: error: redeclaration\
    \ of \u2018std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse\u2019\
    \n   22 |     std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpr7y_ryxv.cpp:21:17: note: \u2018std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse\u2019\
    \ previously declared here\n   21 |     std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpr7y_ryxv.cpp:23:17: error: redeclaration of \u2018std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse\u2019\
    \n   23 |     std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpr7y_ryxv.cpp:21:17: note: \u2018std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse\u2019\
    \ previously declared here\n   21 |     std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpr7y_ryxv.cpp:25:17: error: redeclaration of \u2018std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\u2019\
    \n   25 |     std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpr7y_ryxv.cpp:24:17: note: \u2018std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\u2019\
    \ previously declared here\n   24 |     std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpr7y_ryxv.cpp:26:17: error: redeclaration of \u2018std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\u2019\
    \n   26 |     std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpr7y_ryxv.cpp:24:17: note: \u2018std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\u2019\
    \ previously declared here\n   24 |     std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpr7y_ryxv.cpp:27:17: error: redeclaration of \u2018std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\u2019\
    \n   27 |     std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpr7y_ryxv.cpp:24:17: note: \u2018std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\u2019\
    \ previously declared here\n   24 |     std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpr7y_ryxv.cpp:28:17: error: redeclaration of \u2018std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\u2019\
    \n   28 |     std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpr7y_ryxv.cpp:24:17: note: \u2018std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\u2019\
    \ previously declared here\n   24 |     std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpr7y_ryxv.cpp:29:17: error: redeclaration of \u2018std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\u2019\
    \n   29 |     std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpr7y_ryxv.cpp:24:17: note: \u2018std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\u2019\
    \ previously declared here\n   24 |     std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpr7y_ryxv.cpp:30:17: error: redeclaration of \u2018std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\u2019\
    \n   30 |     std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpr7y_ryxv.cpp:24:17: note: \u2018std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\u2019\
    \ previously declared here\n   24 |     std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpr7y_ryxv.cpp:31:17: error: redeclaration of \u2018std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\u2019\
    \n   31 |     std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpr7y_ryxv.cpp:24:17: note: \u2018std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\u2019\
    \ previously declared here\n   24 |     std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpr7y_ryxv.cpp:32:17: error: redeclaration of \u2018std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\u2019\
    \n   32 |     std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpr7y_ryxv.cpp:24:17: note: \u2018std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\u2019\
    \ previously declared here\n   24 |     std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpr7y_ryxv.cpp:33:17: error: redeclaration of \u2018std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\u2019\
    \n   33 |     std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpr7y_ryxv.cpp:24:17: note: \u2018std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\u2019\
    \ previously declared here\n   24 |     std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpr7y_ryxv.cpp:34:17: error: redeclaration of \u2018std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\u2019\
    \n   34 |     std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpr7y_ryxv.cpp:24:17: note: \u2018std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\u2019\
    \ previously declared here\n   24 |     std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpr7y_ryxv.cpp:35:17: error: redeclaration of \u2018std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\u2019\
    \n   35 |     std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AE\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpr7y_ryxv.cpp:24:17: note: \u2018std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\u2019\
    \ previously declared here\n   24 |     std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpr7y_ryxv.cpp:36:1: error: expected primary-expression before \u2018}\u2019\
    \ token\n   36 | }\n      | ^\n/tmp/tmpr7y_ryxv.cpp:36:1: warning: no return statement\
    \ in function returning non-void [-Wreturn-type]\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// get_closest_vowel(\"yogurt\") ==> \"u\"\
    \n// get_closest_vowel(\"FULL\") ==> \"U\"\n// get_closest_vowel(\"quick\") ==>\
    \ \"\"\n// get_closest_vowel(\"ab\") ==> \"\"\nstd::string get_closest_vowel(std::string\
    \ word) {\n    std::string vowels = \"AEIOUaeiou\";\n    std::string vowels_reverse\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse2 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse3 = \"AEIOUaeiou\";\n    std::string vowels_reverse4 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse5 = \"AEIOUaeiou\";\n    std::string vowels_reverse6\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse7 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse8 = \"AEIOUaeiou\";\n    std::string vowels_reverse9 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse10 = \"AEIOUaeiou\";\n    std::string vowels_reverse11\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse12 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse13 = \"AEIOUaeiou\";\n    std::string vowels_reverse14 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse15 = \"AEIOUaeiou\";\n    std::string vowels_reverse16\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse17 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse18 = \"AEIOUaeiou\";\n    std::string vowels_reverse19 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse20 = \"AEIOUaeiou\";\n    std::string vowels_reverse21\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse22 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse23 = \"AEIOUaeiou\";\n    std::string vowels_reverse24 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse25 = \"AEIOUaeiou\";\n    std::string vowels_reverse26\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse27 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse28 = \"AEIOUaeiou\";\n    std::string vowels_reverse29 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse30 = \"AEIOUaeiou\";\n    std::string vowels_reverse31\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse32 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse33 = \"AEIOUaeiou\";\n    std::string vowels_reverse34 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse35 = \"AEIOUaeiou\";\n    std::string vowels_reverse36\
    \ = \"AEIOU\n}\nint main() {\n    auto candidate = get_closest_vowel;\n    assert(candidate((\"\
    yogurt\")) == (\"u\"));\n    assert(candidate((\"full\")) == (\"u\"));\n    assert(candidate((\"\
    easy\")) == (\"\"));\n    assert(candidate((\"eAsy\")) == (\"\"));\n    assert(candidate((\"\
    ali\")) == (\"\"));\n    assert(candidate((\"bad\")) == (\"a\"));\n    assert(candidate((\"\
    most\")) == (\"o\"));\n    assert(candidate((\"ab\")) == (\"\"));\n    assert(candidate((\"\
    ba\")) == (\"\"));\n    assert(candidate((\"quick\")) == (\"\"));\n    assert(candidate((\"\
    anime\")) == (\"i\"));\n    assert(candidate((\"Asia\")) == (\"\"));\n    assert(candidate((\"\
    Above\")) == (\"o\"));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpc0pto2wx.cpp:50:36: warning: missing terminating \" character\n\
    \   50 |     std::string vowels_reverse36 = \"AEIOU\n      |                 \
    \                   ^\n/tmp/tmpc0pto2wx.cpp:50:36: error: missing terminating\
    \ \" character\n   50 |     std::string vowels_reverse36 = \"AEIOU\n      |  \
    \                                  ^~~~~~\n/tmp/tmpc0pto2wx.cpp: In function \u2018\
    std::string get_closest_vowel(std::string)\u2019:\n/tmp/tmpc0pto2wx.cpp:51:1:\
    \ error: expected primary-expression before \u2018}\u2019 token\n   51 | }\n \
    \     | ^\n/tmp/tmpc0pto2wx.cpp:51:1: error: expected \u2018,\u2019 or \u2018\
    ;\u2019 before \u2018}\u2019 token\n/tmp/tmpc0pto2wx.cpp:51:1: warning: no return\
    \ statement in function returning non-void [-Wreturn-type]\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// get_closest_vowel(\"yogurt\") ==> \"u\"\
    \n// get_closest_vowel(\"FULL\") ==> \"U\"\n// get_closest_vowel(\"quick\") ==>\
    \ \"\"\n// get_closest_vowel(\"ab\") ==> \"\"\nstd::string get_closest_vowel(std::string\
    \ word) {\n    std::string vowels = \"AEIOUaeiou\";\n    std::string vowels_reverse\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse2 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse3 = \"AEIOUaeiou\";\n    std::string vowels_reverse4 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse5 = \"AEIOUaeiou\";\n    std::string vowels_reverse6\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse7 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse8 = \"AEIOUaeiou\";\n    std::string vowels_reverse9 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse10 = \"AEIOUaeiou\";\n    std::string vowels_reverse11\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse12 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse13 = \"AEIOUaeiou\";\n    std::string vowels_reverse14 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse15 = \"AEIOUaeiou\";\n    std::string vowels_reverse16\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse17 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse18 = \"AEIOUaeiou\";\n    std::string vowels_reverse19 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse20 = \"AEIOUaeiou\";\n    std::string vowels_reverse21\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse22 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse23 = \"AEIOUaeiou\";\n    std::string vowels_reverse24 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse25 = \"AEIOUaeiou\";\n    std::string vowels_reverse26\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse27 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse28 = \"AEIOUaeiou\";\n    std::string vowels_reverse29 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse30 = \"AEIOUaeiou\";\n    std::string vowels_reverse31\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse32 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse33 = \"AEIOUaeiou\";\n    std::string vowels_reverse34 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse35 = \"AEIOUaeiou\";\n    std::string vowels_reverse36\
    \ = \"AEIOU\n}\nint main() {\n    auto candidate = get_closest_vowel;\n    assert(candidate((\"\
    yogurt\")) == (\"u\"));\n    assert(candidate((\"full\")) == (\"u\"));\n    assert(candidate((\"\
    easy\")) == (\"\"));\n    assert(candidate((\"eAsy\")) == (\"\"));\n    assert(candidate((\"\
    ali\")) == (\"\"));\n    assert(candidate((\"bad\")) == (\"a\"));\n    assert(candidate((\"\
    most\")) == (\"o\"));\n    assert(candidate((\"ab\")) == (\"\"));\n    assert(candidate((\"\
    ba\")) == (\"\"));\n    assert(candidate((\"quick\")) == (\"\"));\n    assert(candidate((\"\
    anime\")) == (\"i\"));\n    assert(candidate((\"Asia\")) == (\"\"));\n    assert(candidate((\"\
    Above\")) == (\"o\"));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpismxeaha.cpp:50:36: warning: missing terminating \" character\n\
    \   50 |     std::string vowels_reverse36 = \"AEIOU\n      |                 \
    \                   ^\n/tmp/tmpismxeaha.cpp:50:36: error: missing terminating\
    \ \" character\n   50 |     std::string vowels_reverse36 = \"AEIOU\n      |  \
    \                                  ^~~~~~\n/tmp/tmpismxeaha.cpp: In function \u2018\
    std::string get_closest_vowel(std::string)\u2019:\n/tmp/tmpismxeaha.cpp:51:1:\
    \ error: expected primary-expression before \u2018}\u2019 token\n   51 | }\n \
    \     | ^\n/tmp/tmpismxeaha.cpp:51:1: error: expected \u2018,\u2019 or \u2018\
    ;\u2019 before \u2018}\u2019 token\n/tmp/tmpismxeaha.cpp:51:1: warning: no return\
    \ statement in function returning non-void [-Wreturn-type]\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// get_closest_vowel(\"yogurt\") ==> \"u\"\
    \n// get_closest_vowel(\"FULL\") ==> \"U\"\n// get_closest_vowel(\"quick\") ==>\
    \ \"\"\n// get_closest_vowel(\"ab\") ==> \"\"\nstd::string get_closest_vowel(std::string\
    \ word) {\n    std::string vowels = \"aeiouAEIOU\";\n    std::string vowels_end\
    \ = \"AEIOUaeiou\";\n    std::string vowels_start = \"aeiouAEIOU\";\n    std::string\
    \ vowels_start_end = \"aeiouAEIOUaeiou\";\n    std::string vowels_start_end_2\
    \ = \"aeiouAEIOUaeiouAEIOUaeiou\";\n    std::string vowels_start_end_3 = \"aeiouAEIOUaeiouAEIOUaeiouAEIOUaeiou\"\
    ;\n    std::string vowels_start_end_4 = \"aeiouAEIOUaeiouAEIOUaeiouAEIOUaeiouAEIOUaeiou\"\
    ;\n    std::string vowels_start_end_5 = \"aeiouAEIOUaeiouAEIOUaeiouAEIOUaeiouAEIOUaeiouAEIOUaeiou\"\
    ;\n    std::string vowels_start_end_6 = \"aeiouAEIOUaeiouAEIOUaeiouAEIOUaeiouAEIOUaeiouAEIOUaeiouAEIOUaeiou\"\
    ;\n    std::string vowels_start_end_7 = \"aeiouAEIOUaeiouAEIOUaeiouAEIOUaeiouAEIOUaeiouAEIOUaeiouAEIOUaeiouAEIOUaeiou\"\
    ;\n    std::string vowels_start_end_8 = \"aeiouAEIOUaeiouAEIOUaeiouAEIOUaeiouAEIOUaeiouAEIOUaeiouAEIOUaeiouAEIOUaeiouAEIOUaeiou\"\
    ;\n    std::string vowels_start_end_9 = \"aeiouAEIOUaeiouAEIOUaeiouAEIOUaeiouAEIOUaeiouAEIOUaeiouAEIOUaeiouAEIOUaeiouAEIOUaeiou\"\
    ;\n    std::string vowels_start_end_10 = \"aeiouAEIOUaeiouAEIOUaeiouAEIOUaeiouAEIOUaeiouAEIOUaeiouAEIOUaeiouAEIOUaeiouAEIOUaeiouAEIOUaeiou\"\
    ;\n    std::string vowels_start_end_11 = \"aeiouAEIOUaeiouAEIOUaeiouAEIOUaeiouAEIOUaeiouAEIOUaeiouAEIOUaeiouAEIOUaeiouAEIOUaeiouAEIOUaeiouAEIOUaeiou\"\
    ;\n    std::string vowels_start_end_12 = \"aeiouAEIOUaeiouAEIOUaeiouAEIOUaeiouAEIOUae\n\
    }\nint main() {\n    auto candidate = get_closest_vowel;\n    assert(candidate((\"\
    yogurt\")) == (\"u\"));\n    assert(candidate((\"full\")) == (\"u\"));\n    assert(candidate((\"\
    easy\")) == (\"\"));\n    assert(candidate((\"eAsy\")) == (\"\"));\n    assert(candidate((\"\
    ali\")) == (\"\"));\n    assert(candidate((\"bad\")) == (\"a\"));\n    assert(candidate((\"\
    most\")) == (\"o\"));\n    assert(candidate((\"ab\")) == (\"\"));\n    assert(candidate((\"\
    ba\")) == (\"\"));\n    assert(candidate((\"quick\")) == (\"\"));\n    assert(candidate((\"\
    anime\")) == (\"i\"));\n    assert(candidate((\"Asia\")) == (\"\"));\n    assert(candidate((\"\
    Above\")) == (\"o\"));\n}\n"
  stdout: ''
  stderr: "/tmp/tmph9lqh63f.cpp:28:39: warning: missing terminating \" character\n\
    \   28 |     std::string vowels_start_end_12 = \"aeiouAEIOUaeiouAEIOUaeiouAEIOUaeiouAEIOUae\n\
    \      |                                       ^\n/tmp/tmph9lqh63f.cpp:28:39:\
    \ error: missing terminating \" character\n   28 |     std::string vowels_start_end_12\
    \ = \"aeiouAEIOUaeiouAEIOUaeiouAEIOUaeiouAEIOUae\n      |                    \
    \                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmph9lqh63f.cpp:\
    \ In function \u2018std::string get_closest_vowel(std::string)\u2019:\n/tmp/tmph9lqh63f.cpp:29:1:\
    \ error: expected primary-expression before \u2018}\u2019 token\n   29 | }\n \
    \     | ^\n/tmp/tmph9lqh63f.cpp:29:1: error: expected \u2018,\u2019 or \u2018\
    ;\u2019 before \u2018}\u2019 token\n/tmp/tmph9lqh63f.cpp:29:1: warning: no return\
    \ statement in function returning non-void [-Wreturn-type]\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// get_closest_vowel(\"yogurt\") ==> \"u\"\
    \n// get_closest_vowel(\"FULL\") ==> \"U\"\n// get_closest_vowel(\"quick\") ==>\
    \ \"\"\n// get_closest_vowel(\"ab\") ==> \"\"\nstd::string get_closest_vowel(std::string\
    \ word) {\n    std::string vowels = \"AEIOUaeiou\";\n    std::string vowels_lower\
    \ = \"AEIOUaeiou\";\n    std::string vowels_upper = \"AEIOUAEIOU\";\n    std::string\
    \ vowels_upper_lower = \"AEIOUAEIOU\";\n    std::string vowels_upper_lower_lower\
    \ = \"AEIOUAEIOU\";\n    std::string vowels_upper_lower_lower_lower = \"AEIOUAEIOU\"\
    ;\n    std::string vowels_upper_lower_lower_lower_lower = \"AEIOUAEIOU\";\n  \
    \  std::string vowels_upper_lower_lower_lower_lower_lower = \"AEIOUAEIOU\";\n\
    \    std::string vowels_upper_lower_lower_lower_lower_lower_lower = \"AEIOUAEIOU\"\
    ;\n    std::string vowels_upper_lower_lower_lower_lower_lower_lower_lower = \"\
    AEIOUAEIOU\";\n    std::string vowels_upper_lower_lower_lower_lower_lower_lower_lower_lower\
    \ = \"AEIOUAEIOU\";\n    std::string vowels_upper_lower_lower_lower_lower_lower_lower_lower_lower_lower\
    \ = \"AEIOUAEIOU\";\n    std::string vowels_upper_lower_lower_lower_lower_lower_lower_lower_lower_lower_lower\
    \ = \"AEIOUAEIOU\";\n    std::string vowels_upper_lower_lower_lower_lower_lower_lower_lower_lower_lower_lower\
    \ = \"AEIOUAEIOU\";\n    std::string vowels_upper_lower_lower_lower_lower_lower_lower_lower_lower_lower_lower\
    \ = \"AEIOUAEIOU\";\n    std::string vowels_upper_lower_lower_lower_lower_lower_lower_lower_lower_lower_lower_lower\
    \ = \"AEIOUAEIOU\";\n    std::string vowels_upper_lower_lower_lower_lower_lower_lower_lower_lower_lower_lower_lower_lower\
    \ = \"AEIOUAEIOU\";\n    std::string vowels_upper_lower_lower_lower_lower_lower_lower_lower_lower_lower_lower_lower_lower\
    \ = \"AEIOUAEIOU\";\n    std::string vowels_upper_lower_lower_lower_lower_lower_lower_lower_lower_lower_lower_lower_lower\
    \ = \"AEIOUAEIOU\";\n    std::string vowels_upper_lower_lower_lower_lower_lower_lower_lower_lower_lower_lower_lower_lower_lower\
    \ = \"AEIOUAEIOU\";\n    std::string vowels_upper_lower_lower_lower_lower_lower_lower_lower_lower_lower_lower_lower_lower_lower\
    \ = \"AEIOUAEIOU\";\n    std::string vowels_upper_lower_lower_lower_lower_lower_lower_lower_lower_lower_lower_lower_lower_lower_lower\
    \ = \"AEIOUAEIOU\";\n    std::string vowels_upper_lower_lower_lower_lower_lower_lower_lower_lower_lower_lower_lower_lower_lower_lower\
    \ = \"AEIOUAEIOU\";\n    std::string vowels_upper_lower_lower_lower_lower_lower_lower_lower_lower_lower_lower_lower_lower_lower_\n\
    }\nint main() {\n    auto candidate = get_closest_vowel;\n    assert(candidate((\"\
    yogurt\")) == (\"u\"));\n    assert(candidate((\"full\")) == (\"u\"));\n    assert(candidate((\"\
    easy\")) == (\"\"));\n    assert(candidate((\"eAsy\")) == (\"\"));\n    assert(candidate((\"\
    ali\")) == (\"\"));\n    assert(candidate((\"bad\")) == (\"a\"));\n    assert(candidate((\"\
    most\")) == (\"o\"));\n    assert(candidate((\"ab\")) == (\"\"));\n    assert(candidate((\"\
    ba\")) == (\"\"));\n    assert(candidate((\"quick\")) == (\"\"));\n    assert(candidate((\"\
    anime\")) == (\"i\"));\n    assert(candidate((\"Asia\")) == (\"\"));\n    assert(candidate((\"\
    Above\")) == (\"o\"));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpnhb3vfgo.cpp: In function \u2018std::string get_closest_vowel(std::string)\u2019\
    :\n/tmp/tmpnhb3vfgo.cpp:27:17: error: redeclaration of \u2018std::string vowels_upper_lower_lower_lower_lower_lower_lower_lower_lower_lower_lower\u2019\
    \n   27 |     std::string vowels_upper_lower_lower_lower_lower_lower_lower_lower_lower_lower_lower\
    \ = \"AEIOUAEIOU\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpnhb3vfgo.cpp:26:17: note: \u2018std::string vowels_upper_lower_lower_lower_lower_lower_lower_lower_lower_lower_lower\u2019\
    \ previously declared here\n   26 |     std::string vowels_upper_lower_lower_lower_lower_lower_lower_lower_lower_lower_lower\
    \ = \"AEIOUAEIOU\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpnhb3vfgo.cpp:28:17: error: redeclaration of \u2018std::string vowels_upper_lower_lower_lower_lower_lower_lower_lower_lower_lower_lower\u2019\
    \n   28 |     std::string vowels_upper_lower_lower_lower_lower_lower_lower_lower_lower_lower_lower\
    \ = \"AEIOUAEIOU\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpnhb3vfgo.cpp:26:17: note: \u2018std::string vowels_upper_lower_lower_lower_lower_lower_lower_lower_lower_lower_lower\u2019\
    \ previously declared here\n   26 |     std::string vowels_upper_lower_lower_lower_lower_lower_lower_lower_lower_lower_lower\
    \ = \"AEIOUAEIOU\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpnhb3vfgo.cpp:31:17: error: redeclaration of \u2018std::string vowels_upper_lower_lower_lower_lower_lower_lower_lower_lower_lower_lower_lower_lower\u2019\
    \n   31 |     std::string vowels_upper_lower_lower_lower_lower_lower_lower_lower_lower_lower_lower_lower_lower\
    \ = \"AEIOUAEIOU\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpnhb3vfgo.cpp:30:17: note: \u2018std::string vowels_upper_lower_lower_lower_lower_lower_lower_lower_lower_lower_lower_lower_lower\u2019\
    \ previously declared here\n   30 |     std::string vowels_upper_lower_lower_lower_lower_lower_lower_lower_lower_lower_lower_lower_lower\
    \ = \"AEIOUAEIOU\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpnhb3vfgo.cpp:32:17: error: redeclaration of \u2018std::string vowels_upper_lower_lower_lower_lower_lower_lower_lower_lower_lower_lower_lower_lower\u2019\
    \n   32 |     std::string vowels_upper_lower_lower_lower_lower_lower_lower_lower_lower_lower_lower_lower_lower\
    \ = \"AEIOUAEIOU\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpnhb3vfgo.cpp:30:17: note: \u2018std::string vowels_upper_lower_lower_lower_lower_lower_lower_lower_lower_lower_lower_lower_lower\u2019\
    \ previously declared here\n   30 |     std::string vowels_upper_lower_lower_lower_lower_lower_lower_lower_lower_lower_lower_lower_lower\
    \ = \"AEIOUAEIOU\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpnhb3vfgo.cpp:34:17: error: redeclaration of \u2018std::string vowels_upper_lower_lower_lower_lower_lower_lower_lower_lower_lower_lower_lower_lower_lower\u2019\
    \n   34 |     std::string vowels_upper_lower_lower_lower_lower_lower_lower_lower_lower_lower_lower_lower_lower_lower\
    \ = \"AEIOUAEIOU\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpnhb3vfgo.cpp:33:17: note: \u2018std::string vowels_upper_lower_lower_lower_lower_lower_lower_lower_lower_lower_lower_lower_lower_lower\u2019\
    \ previously declared here\n   33 |     std::string vowels_upper_lower_lower_lower_lower_lower_lower_lower_lower_lower_lower_lower_lower_lower\
    \ = \"AEIOUAEIOU\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpnhb3vfgo.cpp:36:17: error: redeclaration of \u2018std::string vowels_upper_lower_lower_lower_lower_lower_lower_lower_lower_lower_lower_lower_lower_lower_lower\u2019\
    \n   36 |     std::string vowels_upper_lower_lower_lower_lower_lower_lower_lower_lower_lower_lower_lower_lower_lower_lower\
    \ = \"AEIOUAEIOU\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpnhb3vfgo.cpp:35:17: note: \u2018std::string vowels_upper_lower_lower_lower_lower_lower_lower_lower_lower_lower_lower_lower_lower_lower_lower\u2019\
    \ previously declared here\n   35 |     std::string vowels_upper_lower_lower_lower_lower_lower_lower_lower_lower_lower_lower_lower_lower_lower_lower\
    \ = \"AEIOUAEIOU\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpnhb3vfgo.cpp:38:1: error: expected initializer before \u2018}\u2019 token\n\
    \   38 | }\n      | ^\n/tmp/tmpnhb3vfgo.cpp:38:1: warning: no return statement\
    \ in function returning non-void [-Wreturn-type]\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// get_closest_vowel(\"yogurt\") ==> \"u\"\
    \n// get_closest_vowel(\"FULL\") ==> \"U\"\n// get_closest_vowel(\"quick\") ==>\
    \ \"\"\n// get_closest_vowel(\"ab\") ==> \"\"\nstd::string get_closest_vowel(std::string\
    \ word) {\n    std::string vowels = \"AEIOUaeiou\";\n    std::string vowels_reverse\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse2 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse3 = \"AEIOUaeiou\";\n    std::string vowels_reverse4 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse5 = \"AEIOUaeiou\";\n    std::string vowels_reverse6\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse7 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse8 = \"AEIOUaeiou\";\n    std::string vowels_reverse9 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse10 = \"AEIOUaeiou\";\n    std::string vowels_reverse11\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse12 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse13 = \"AEIOUaeiou\";\n    std::string vowels_reverse14 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse15 = \"AEIOUaeiou\";\n    std::string vowels_reverse16\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse17 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse18 = \"AEIOUaeiou\";\n    std::string vowels_reverse19 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse20 = \"AEIOUaeiou\";\n    std::string vowels_reverse21\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse22 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse23 = \"AEIOUaeiou\";\n    std::string vowels_reverse24 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse25 = \"AEIOUaeiou\";\n    std::string vowels_reverse26\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse27 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse28 = \"AEIOUaeiou\";\n    std::string vowels_reverse29 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse30 = \"AEIOUaeiou\";\n    std::string vowels_reverse31\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse32 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse33 = \"AEIOUaeiou\";\n    std::string vowels_reverse34 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse35 = \"AEIOUaeiou\";\n    std::string vowels_reverse36\
    \ = \"AEIOU\n}\nint main() {\n    auto candidate = get_closest_vowel;\n    assert(candidate((\"\
    yogurt\")) == (\"u\"));\n    assert(candidate((\"full\")) == (\"u\"));\n    assert(candidate((\"\
    easy\")) == (\"\"));\n    assert(candidate((\"eAsy\")) == (\"\"));\n    assert(candidate((\"\
    ali\")) == (\"\"));\n    assert(candidate((\"bad\")) == (\"a\"));\n    assert(candidate((\"\
    most\")) == (\"o\"));\n    assert(candidate((\"ab\")) == (\"\"));\n    assert(candidate((\"\
    ba\")) == (\"\"));\n    assert(candidate((\"quick\")) == (\"\"));\n    assert(candidate((\"\
    anime\")) == (\"i\"));\n    assert(candidate((\"Asia\")) == (\"\"));\n    assert(candidate((\"\
    Above\")) == (\"o\"));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpfa9bdyxw.cpp:50:36: warning: missing terminating \" character\n\
    \   50 |     std::string vowels_reverse36 = \"AEIOU\n      |                 \
    \                   ^\n/tmp/tmpfa9bdyxw.cpp:50:36: error: missing terminating\
    \ \" character\n   50 |     std::string vowels_reverse36 = \"AEIOU\n      |  \
    \                                  ^~~~~~\n/tmp/tmpfa9bdyxw.cpp: In function \u2018\
    std::string get_closest_vowel(std::string)\u2019:\n/tmp/tmpfa9bdyxw.cpp:51:1:\
    \ error: expected primary-expression before \u2018}\u2019 token\n   51 | }\n \
    \     | ^\n/tmp/tmpfa9bdyxw.cpp:51:1: error: expected \u2018,\u2019 or \u2018\
    ;\u2019 before \u2018}\u2019 token\n/tmp/tmpfa9bdyxw.cpp:51:1: warning: no return\
    \ statement in function returning non-void [-Wreturn-type]\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// get_closest_vowel(\"yogurt\") ==> \"u\"\
    \n// get_closest_vowel(\"FULL\") ==> \"U\"\n// get_closest_vowel(\"quick\") ==>\
    \ \"\"\n// get_closest_vowel(\"ab\") ==> \"\"\nstd::string get_closest_vowel(std::string\
    \ word) {\n    std::string vowels = \"AEIOUaeiou\";\n    std::string vowels_reverse\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse2 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse3 = \"AEIOUaeiou\";\n    std::string vowels_reverse4 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse5 = \"AEIOUaeiou\";\n    std::string vowels_reverse6\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse7 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse8 = \"AEIOUaeiou\";\n    std::string vowels_reverse9 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse10 = \"AEIOUaeiou\";\n    std::string vowels_reverse11\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse12 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse13 = \"AEIOUaeiou\";\n    std::string vowels_reverse14 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse15 = \"AEIOUaeiou\";\n    std::string vowels_reverse16\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse17 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse18 = \"AEIOUaeiou\";\n    std::string vowels_reverse19 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse20 = \"AEIOUaeiou\";\n    std::string vowels_reverse21\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse22 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse23 = \"AEIOUaeiou\";\n    std::string vowels_reverse24 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse25 = \"AEIOUaeiou\";\n    std::string vowels_reverse26\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse27 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse28 = \"AEIOUaeiou\";\n    std::string vowels_reverse29 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse30 = \"AEIOUaeiou\";\n    std::string vowels_reverse31\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse32 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse33 = \"AEIOUaeiou\";\n    std::string vowels_reverse34 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse35 = \"AEIOUaeiou\";\n    std::string vowels_reverse36\
    \ = \"AEIOU\n}\nint main() {\n    auto candidate = get_closest_vowel;\n    assert(candidate((\"\
    yogurt\")) == (\"u\"));\n    assert(candidate((\"full\")) == (\"u\"));\n    assert(candidate((\"\
    easy\")) == (\"\"));\n    assert(candidate((\"eAsy\")) == (\"\"));\n    assert(candidate((\"\
    ali\")) == (\"\"));\n    assert(candidate((\"bad\")) == (\"a\"));\n    assert(candidate((\"\
    most\")) == (\"o\"));\n    assert(candidate((\"ab\")) == (\"\"));\n    assert(candidate((\"\
    ba\")) == (\"\"));\n    assert(candidate((\"quick\")) == (\"\"));\n    assert(candidate((\"\
    anime\")) == (\"i\"));\n    assert(candidate((\"Asia\")) == (\"\"));\n    assert(candidate((\"\
    Above\")) == (\"o\"));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpfo4vy6ve.cpp:50:36: warning: missing terminating \" character\n\
    \   50 |     std::string vowels_reverse36 = \"AEIOU\n      |                 \
    \                   ^\n/tmp/tmpfo4vy6ve.cpp:50:36: error: missing terminating\
    \ \" character\n   50 |     std::string vowels_reverse36 = \"AEIOU\n      |  \
    \                                  ^~~~~~\n/tmp/tmpfo4vy6ve.cpp: In function \u2018\
    std::string get_closest_vowel(std::string)\u2019:\n/tmp/tmpfo4vy6ve.cpp:51:1:\
    \ error: expected primary-expression before \u2018}\u2019 token\n   51 | }\n \
    \     | ^\n/tmp/tmpfo4vy6ve.cpp:51:1: error: expected \u2018,\u2019 or \u2018\
    ;\u2019 before \u2018}\u2019 token\n/tmp/tmpfo4vy6ve.cpp:51:1: warning: no return\
    \ statement in function returning non-void [-Wreturn-type]\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// get_closest_vowel(\"yogurt\") ==> \"u\"\
    \n// get_closest_vowel(\"FULL\") ==> \"U\"\n// get_closest_vowel(\"quick\") ==>\
    \ \"\"\n// get_closest_vowel(\"ab\") ==> \"\"\nstd::string get_closest_vowel(std::string\
    \ word) {\n    std::string vowels = \"AEIOUaeiou\";\n    std::string vowels_reverse\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_reverse = \"AEIOUaeiou\";\n\
    \    std::string vowels_reverse_reverse_reverse = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse_reverse_reverse_reverse = \"AEIOUaeiou\";\n    std::string vowels_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AE\n}\nint main() {\n    auto candidate = get_closest_vowel;\n    assert(candidate((\"\
    yogurt\")) == (\"u\"));\n    assert(candidate((\"full\")) == (\"u\"));\n    assert(candidate((\"\
    easy\")) == (\"\"));\n    assert(candidate((\"eAsy\")) == (\"\"));\n    assert(candidate((\"\
    ali\")) == (\"\"));\n    assert(candidate((\"bad\")) == (\"a\"));\n    assert(candidate((\"\
    most\")) == (\"o\"));\n    assert(candidate((\"ab\")) == (\"\"));\n    assert(candidate((\"\
    ba\")) == (\"\"));\n    assert(candidate((\"quick\")) == (\"\"));\n    assert(candidate((\"\
    anime\")) == (\"i\"));\n    assert(candidate((\"Asia\")) == (\"\"));\n    assert(candidate((\"\
    Above\")) == (\"o\"));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp1yxi19f6.cpp:35:90: warning: missing terminating \" character\n\
    \   35 |     std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AE\n      |                                                            \
    \                              ^\n/tmp/tmp1yxi19f6.cpp:35:90: error: missing terminating\
    \ \" character\n   35 |     std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AE\n      |                                                            \
    \                              ^~~\n/tmp/tmp1yxi19f6.cpp: In function \u2018std::string\
    \ get_closest_vowel(std::string)\u2019:\n/tmp/tmp1yxi19f6.cpp:22:17: error: redeclaration\
    \ of \u2018std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse\u2019\
    \n   22 |     std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmp1yxi19f6.cpp:21:17: note: \u2018std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse\u2019\
    \ previously declared here\n   21 |     std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmp1yxi19f6.cpp:23:17: error: redeclaration of \u2018std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse\u2019\
    \n   23 |     std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmp1yxi19f6.cpp:21:17: note: \u2018std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse\u2019\
    \ previously declared here\n   21 |     std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmp1yxi19f6.cpp:25:17: error: redeclaration of \u2018std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\u2019\
    \n   25 |     std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmp1yxi19f6.cpp:24:17: note: \u2018std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\u2019\
    \ previously declared here\n   24 |     std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmp1yxi19f6.cpp:26:17: error: redeclaration of \u2018std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\u2019\
    \n   26 |     std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmp1yxi19f6.cpp:24:17: note: \u2018std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\u2019\
    \ previously declared here\n   24 |     std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmp1yxi19f6.cpp:27:17: error: redeclaration of \u2018std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\u2019\
    \n   27 |     std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmp1yxi19f6.cpp:24:17: note: \u2018std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\u2019\
    \ previously declared here\n   24 |     std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmp1yxi19f6.cpp:28:17: error: redeclaration of \u2018std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\u2019\
    \n   28 |     std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmp1yxi19f6.cpp:24:17: note: \u2018std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\u2019\
    \ previously declared here\n   24 |     std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmp1yxi19f6.cpp:29:17: error: redeclaration of \u2018std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\u2019\
    \n   29 |     std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmp1yxi19f6.cpp:24:17: note: \u2018std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\u2019\
    \ previously declared here\n   24 |     std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmp1yxi19f6.cpp:30:17: error: redeclaration of \u2018std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\u2019\
    \n   30 |     std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmp1yxi19f6.cpp:24:17: note: \u2018std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\u2019\
    \ previously declared here\n   24 |     std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmp1yxi19f6.cpp:31:17: error: redeclaration of \u2018std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\u2019\
    \n   31 |     std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmp1yxi19f6.cpp:24:17: note: \u2018std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\u2019\
    \ previously declared here\n   24 |     std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmp1yxi19f6.cpp:32:17: error: redeclaration of \u2018std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\u2019\
    \n   32 |     std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmp1yxi19f6.cpp:24:17: note: \u2018std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\u2019\
    \ previously declared here\n   24 |     std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmp1yxi19f6.cpp:33:17: error: redeclaration of \u2018std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\u2019\
    \n   33 |     std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmp1yxi19f6.cpp:24:17: note: \u2018std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\u2019\
    \ previously declared here\n   24 |     std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmp1yxi19f6.cpp:34:17: error: redeclaration of \u2018std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\u2019\
    \n   34 |     std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmp1yxi19f6.cpp:24:17: note: \u2018std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\u2019\
    \ previously declared here\n   24 |     std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmp1yxi19f6.cpp:35:17: error: redeclaration of \u2018std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\u2019\
    \n   35 |     std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AE\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmp1yxi19f6.cpp:24:17: note: \u2018std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\u2019\
    \ previously declared here\n   24 |     std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmp1yxi19f6.cpp:36:1: error: expected primary-expression before \u2018}\u2019\
    \ token\n   36 | }\n      | ^\n/tmp/tmp1yxi19f6.cpp:36:1: warning: no return statement\
    \ in function returning non-void [-Wreturn-type]\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// get_closest_vowel(\"yogurt\") ==> \"u\"\
    \n// get_closest_vowel(\"FULL\") ==> \"U\"\n// get_closest_vowel(\"quick\") ==>\
    \ \"\"\n// get_closest_vowel(\"ab\") ==> \"\"\nstd::string get_closest_vowel(std::string\
    \ word) {\n    std::string vowels = \"AEIOUaeiou\";\n    std::string vowels_reverse\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_reverse = \"AEIOUaeiou\";\n\
    \    std::string vowels_reverse_reverse_reverse = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse_reverse_reverse_reverse = \"AEIOUaeiou\";\n    std::string vowels_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AE\n}\nint main() {\n    auto candidate = get_closest_vowel;\n    assert(candidate((\"\
    yogurt\")) == (\"u\"));\n    assert(candidate((\"full\")) == (\"u\"));\n    assert(candidate((\"\
    easy\")) == (\"\"));\n    assert(candidate((\"eAsy\")) == (\"\"));\n    assert(candidate((\"\
    ali\")) == (\"\"));\n    assert(candidate((\"bad\")) == (\"a\"));\n    assert(candidate((\"\
    most\")) == (\"o\"));\n    assert(candidate((\"ab\")) == (\"\"));\n    assert(candidate((\"\
    ba\")) == (\"\"));\n    assert(candidate((\"quick\")) == (\"\"));\n    assert(candidate((\"\
    anime\")) == (\"i\"));\n    assert(candidate((\"Asia\")) == (\"\"));\n    assert(candidate((\"\
    Above\")) == (\"o\"));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpp_t98k9e.cpp:35:90: warning: missing terminating \" character\n\
    \   35 |     std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AE\n      |                                                            \
    \                              ^\n/tmp/tmpp_t98k9e.cpp:35:90: error: missing terminating\
    \ \" character\n   35 |     std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AE\n      |                                                            \
    \                              ^~~\n/tmp/tmpp_t98k9e.cpp: In function \u2018std::string\
    \ get_closest_vowel(std::string)\u2019:\n/tmp/tmpp_t98k9e.cpp:22:17: error: redeclaration\
    \ of \u2018std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse\u2019\
    \n   22 |     std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpp_t98k9e.cpp:21:17: note: \u2018std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse\u2019\
    \ previously declared here\n   21 |     std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpp_t98k9e.cpp:23:17: error: redeclaration of \u2018std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse\u2019\
    \n   23 |     std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpp_t98k9e.cpp:21:17: note: \u2018std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse\u2019\
    \ previously declared here\n   21 |     std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpp_t98k9e.cpp:25:17: error: redeclaration of \u2018std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\u2019\
    \n   25 |     std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpp_t98k9e.cpp:24:17: note: \u2018std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\u2019\
    \ previously declared here\n   24 |     std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpp_t98k9e.cpp:26:17: error: redeclaration of \u2018std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\u2019\
    \n   26 |     std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpp_t98k9e.cpp:24:17: note: \u2018std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\u2019\
    \ previously declared here\n   24 |     std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpp_t98k9e.cpp:27:17: error: redeclaration of \u2018std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\u2019\
    \n   27 |     std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpp_t98k9e.cpp:24:17: note: \u2018std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\u2019\
    \ previously declared here\n   24 |     std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpp_t98k9e.cpp:28:17: error: redeclaration of \u2018std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\u2019\
    \n   28 |     std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpp_t98k9e.cpp:24:17: note: \u2018std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\u2019\
    \ previously declared here\n   24 |     std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpp_t98k9e.cpp:29:17: error: redeclaration of \u2018std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\u2019\
    \n   29 |     std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpp_t98k9e.cpp:24:17: note: \u2018std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\u2019\
    \ previously declared here\n   24 |     std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpp_t98k9e.cpp:30:17: error: redeclaration of \u2018std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\u2019\
    \n   30 |     std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpp_t98k9e.cpp:24:17: note: \u2018std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\u2019\
    \ previously declared here\n   24 |     std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpp_t98k9e.cpp:31:17: error: redeclaration of \u2018std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\u2019\
    \n   31 |     std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpp_t98k9e.cpp:24:17: note: \u2018std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\u2019\
    \ previously declared here\n   24 |     std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpp_t98k9e.cpp:32:17: error: redeclaration of \u2018std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\u2019\
    \n   32 |     std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpp_t98k9e.cpp:24:17: note: \u2018std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\u2019\
    \ previously declared here\n   24 |     std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpp_t98k9e.cpp:33:17: error: redeclaration of \u2018std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\u2019\
    \n   33 |     std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpp_t98k9e.cpp:24:17: note: \u2018std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\u2019\
    \ previously declared here\n   24 |     std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpp_t98k9e.cpp:34:17: error: redeclaration of \u2018std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\u2019\
    \n   34 |     std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpp_t98k9e.cpp:24:17: note: \u2018std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\u2019\
    \ previously declared here\n   24 |     std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpp_t98k9e.cpp:35:17: error: redeclaration of \u2018std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\u2019\
    \n   35 |     std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AE\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpp_t98k9e.cpp:24:17: note: \u2018std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\u2019\
    \ previously declared here\n   24 |     std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpp_t98k9e.cpp:36:1: error: expected primary-expression before \u2018}\u2019\
    \ token\n   36 | }\n      | ^\n/tmp/tmpp_t98k9e.cpp:36:1: warning: no return statement\
    \ in function returning non-void [-Wreturn-type]\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// get_closest_vowel(\"yogurt\") ==> \"u\"\
    \n// get_closest_vowel(\"FULL\") ==> \"U\"\n// get_closest_vowel(\"quick\") ==>\
    \ \"\"\n// get_closest_vowel(\"ab\") ==> \"\"\nstd::string get_closest_vowel(std::string\
    \ word) {\n    std::string vowels = \"aeiouAEIOU\";\n    std::string vowels_reverse\
    \ = vowels.substr(0, vowels.size() - 1);\n    std::string vowels_reverse2 = vowels_reverse.substr(0,\
    \ vowels_reverse.size() - 1);\n    std::string vowels_reverse3 = vowels_reverse2.substr(0,\
    \ vowels_reverse2.size() - 1);\n    std::string vowels_reverse4 = vowels_reverse3.substr(0,\
    \ vowels_reverse3.size() - 1);\n    std::string vowels_reverse5 = vowels_reverse4.substr(0,\
    \ vowels_reverse4.size() - 1);\n    std::string vowels_reverse6 = vowels_reverse5.substr(0,\
    \ vowels_reverse5.size() - 1);\n    std::string vowels_reverse7 = vowels_reverse6.substr(0,\
    \ vowels_reverse6.size() - 1);\n    std::string vowels_reverse8 = vowels_reverse7.substr(0,\
    \ vowels_reverse7.size() - 1);\n    std::string vowels_reverse9 = vowels_reverse8.substr(0,\
    \ vowels_reverse8.size() - 1);\n    std::string vowels_reverse10 = vowels_reverse9.substr(0,\
    \ vowels_reverse9.size() - 1);\n    std::string vowels_reverse11 = vowels_reverse10.substr(0,\
    \ vowels_reverse10.size() - 1);\n    std::string vowels_reverse12 = vowels_reverse11.substr(0,\
    \ vowels_reverse11.size() - 1);\n    std::string vowels_reverse13 = vowels_reverse12.substr(0,\
    \ vowels_reverse12.size() - 1);\n    std::string vowels_reverse14 = vowels_reverse13.substr(0,\
    \ vowels_reverse13.size() - 1);\n    std::string vowels_reverse15 = vowels_reverse14.substr(0,\
    \ vowels_reverse14.size() - 1);\n    std::string vowels_reverse16 = vowels_reverse15.substr(0,\
    \ vowels_reverse15.size() - 1);\n    std::string vowels_reverse17 = vowels_reverse16.substr(0,\
    \ vowels_reverse16.size() - 1);\n    std::string vowels_reverse18 = vowels_reverse17.substr(0,\
    \ vowels_reverse17.size() - 1);\n    std::string vowels_reverse19 = vowels_reverse18.substr(0,\
    \ vowels_reverse18.size() - 1);\n    std::string vowels_reverse20 = vowels_reverse19.substr(0,\
    \ vowels_reverse19.size() - 1);\n    std::string vowels_reverse21 = vowels_reverse20.substr(0,\
    \ vowels_reverse20.size() - 1);\n    std::string vowels_reverse22 = vowels_reverse21.substr(0,\
    \ vowels_reverse21.size() - 1);\n    std::string vowels_reverse23 = vowels_reverse22.substr(0,\
    \ vowels_reverse22.size() - 1);\n    std::string vowels_reverse24 = vowels_reverse23.substr(0,\
    \ vowels_reverse23.size() - 1);\n    std::string vowels_reverse25 = vowels_reverse24.substr(0,\
    \ vowels_\n}\nint main() {\n    auto candidate = get_closest_vowel;\n    assert(candidate((\"\
    yogurt\")) == (\"u\"));\n    assert(candidate((\"full\")) == (\"u\"));\n    assert(candidate((\"\
    easy\")) == (\"\"));\n    assert(candidate((\"eAsy\")) == (\"\"));\n    assert(candidate((\"\
    ali\")) == (\"\"));\n    assert(candidate((\"bad\")) == (\"a\"));\n    assert(candidate((\"\
    most\")) == (\"o\"));\n    assert(candidate((\"ab\")) == (\"\"));\n    assert(candidate((\"\
    ba\")) == (\"\"));\n    assert(candidate((\"quick\")) == (\"\"));\n    assert(candidate((\"\
    anime\")) == (\"i\"));\n    assert(candidate((\"Asia\")) == (\"\"));\n    assert(candidate((\"\
    Above\")) == (\"o\"));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpob1xnmwm.cpp: In function \u2018std::string get_closest_vowel(std::string)\u2019\
    :\n/tmp/tmpob1xnmwm.cpp:39:63: error: \u2018vowels_\u2019 was not declared in\
    \ this scope; did you mean \u2018vowels\u2019?\n   39 |     std::string vowels_reverse25\
    \ = vowels_reverse24.substr(0, vowels_\n      |                              \
    \                                 ^~~~~~~\n      |                           \
    \                                    vowels\n/tmp/tmpob1xnmwm.cpp:40:1: error:\
    \ expected \u2018,\u2019 or \u2018;\u2019 before \u2018}\u2019 token\n   40 |\
    \ }\n      | ^\n/tmp/tmpob1xnmwm.cpp:40:1: warning: no return statement in function\
    \ returning non-void [-Wreturn-type]\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// get_closest_vowel(\"yogurt\") ==> \"u\"\
    \n// get_closest_vowel(\"FULL\") ==> \"U\"\n// get_closest_vowel(\"quick\") ==>\
    \ \"\"\n// get_closest_vowel(\"ab\") ==> \"\"\nstd::string get_closest_vowel(std::string\
    \ word) {\n    std::string vowels = \"AEIOUaeiou\";\n    std::string vowels_reverse\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse2 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse3 = \"AEIOUaeiou\";\n    std::string vowels_reverse4 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse5 = \"AEIOUaeiou\";\n    std::string vowels_reverse6\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse7 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse8 = \"AEIOUaeiou\";\n    std::string vowels_reverse9 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse10 = \"AEIOUaeiou\";\n    std::string vowels_reverse11\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse12 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse13 = \"AEIOUaeiou\";\n    std::string vowels_reverse14 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse15 = \"AEIOUaeiou\";\n    std::string vowels_reverse16\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse17 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse18 = \"AEIOUaeiou\";\n    std::string vowels_reverse19 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse20 = \"AEIOUaeiou\";\n    std::string vowels_reverse21\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse22 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse23 = \"AEIOUaeiou\";\n    std::string vowels_reverse24 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse25 = \"AEIOUaeiou\";\n    std::string vowels_reverse26\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse27 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse28 = \"AEIOUaeiou\";\n    std::string vowels_reverse29 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse30 = \"AEIOUaeiou\";\n    std::string vowels_reverse31\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse32 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse33 = \"AEIOUaeiou\";\n    std::string vowels_reverse34 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse35 = \"AEIOUaeiou\";\n    std::string vowels_reverse36\
    \ = \"AEIOU\n}\nint main() {\n    auto candidate = get_closest_vowel;\n    assert(candidate((\"\
    yogurt\")) == (\"u\"));\n    assert(candidate((\"full\")) == (\"u\"));\n    assert(candidate((\"\
    easy\")) == (\"\"));\n    assert(candidate((\"eAsy\")) == (\"\"));\n    assert(candidate((\"\
    ali\")) == (\"\"));\n    assert(candidate((\"bad\")) == (\"a\"));\n    assert(candidate((\"\
    most\")) == (\"o\"));\n    assert(candidate((\"ab\")) == (\"\"));\n    assert(candidate((\"\
    ba\")) == (\"\"));\n    assert(candidate((\"quick\")) == (\"\"));\n    assert(candidate((\"\
    anime\")) == (\"i\"));\n    assert(candidate((\"Asia\")) == (\"\"));\n    assert(candidate((\"\
    Above\")) == (\"o\"));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp7an5zmkq.cpp:50:36: warning: missing terminating \" character\n\
    \   50 |     std::string vowels_reverse36 = \"AEIOU\n      |                 \
    \                   ^\n/tmp/tmp7an5zmkq.cpp:50:36: error: missing terminating\
    \ \" character\n   50 |     std::string vowels_reverse36 = \"AEIOU\n      |  \
    \                                  ^~~~~~\n/tmp/tmp7an5zmkq.cpp: In function \u2018\
    std::string get_closest_vowel(std::string)\u2019:\n/tmp/tmp7an5zmkq.cpp:51:1:\
    \ error: expected primary-expression before \u2018}\u2019 token\n   51 | }\n \
    \     | ^\n/tmp/tmp7an5zmkq.cpp:51:1: error: expected \u2018,\u2019 or \u2018\
    ;\u2019 before \u2018}\u2019 token\n/tmp/tmp7an5zmkq.cpp:51:1: warning: no return\
    \ statement in function returning non-void [-Wreturn-type]\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// get_closest_vowel(\"yogurt\") ==> \"u\"\
    \n// get_closest_vowel(\"FULL\") ==> \"U\"\n// get_closest_vowel(\"quick\") ==>\
    \ \"\"\n// get_closest_vowel(\"ab\") ==> \"\"\nstd::string get_closest_vowel(std::string\
    \ word) {\n    std::string vowels = \"AEIOUaeiou\";\n    std::string vowels_reverse\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse2 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse3 = \"AEIOUaeiou\";\n    std::string vowels_reverse4 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse5 = \"AEIOUaeiou\";\n    std::string vowels_reverse6\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse7 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse8 = \"AEIOUaeiou\";\n    std::string vowels_reverse9 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse10 = \"AEIOUaeiou\";\n    std::string vowels_reverse11\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse12 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse13 = \"AEIOUaeiou\";\n    std::string vowels_reverse14 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse15 = \"AEIOUaeiou\";\n    std::string vowels_reverse16\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse17 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse18 = \"AEIOUaeiou\";\n    std::string vowels_reverse19 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse20 = \"AEIOUaeiou\";\n    std::string vowels_reverse21\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse22 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse23 = \"AEIOUaeiou\";\n    std::string vowels_reverse24 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse25 = \"AEIOUaeiou\";\n    std::string vowels_reverse26\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse27 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse28 = \"AEIOUaeiou\";\n    std::string vowels_reverse29 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse30 = \"AEIOUaeiou\";\n    std::string vowels_reverse31\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse32 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse33 = \"AEIOUaeiou\";\n    std::string vowels_reverse34 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse35 = \"AEIOUaeiou\";\n    std::string vowels_reverse36\
    \ = \"AEIOU\n}\nint main() {\n    auto candidate = get_closest_vowel;\n    assert(candidate((\"\
    yogurt\")) == (\"u\"));\n    assert(candidate((\"full\")) == (\"u\"));\n    assert(candidate((\"\
    easy\")) == (\"\"));\n    assert(candidate((\"eAsy\")) == (\"\"));\n    assert(candidate((\"\
    ali\")) == (\"\"));\n    assert(candidate((\"bad\")) == (\"a\"));\n    assert(candidate((\"\
    most\")) == (\"o\"));\n    assert(candidate((\"ab\")) == (\"\"));\n    assert(candidate((\"\
    ba\")) == (\"\"));\n    assert(candidate((\"quick\")) == (\"\"));\n    assert(candidate((\"\
    anime\")) == (\"i\"));\n    assert(candidate((\"Asia\")) == (\"\"));\n    assert(candidate((\"\
    Above\")) == (\"o\"));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpco4ik3_9.cpp:50:36: warning: missing terminating \" character\n\
    \   50 |     std::string vowels_reverse36 = \"AEIOU\n      |                 \
    \                   ^\n/tmp/tmpco4ik3_9.cpp:50:36: error: missing terminating\
    \ \" character\n   50 |     std::string vowels_reverse36 = \"AEIOU\n      |  \
    \                                  ^~~~~~\n/tmp/tmpco4ik3_9.cpp: In function \u2018\
    std::string get_closest_vowel(std::string)\u2019:\n/tmp/tmpco4ik3_9.cpp:51:1:\
    \ error: expected primary-expression before \u2018}\u2019 token\n   51 | }\n \
    \     | ^\n/tmp/tmpco4ik3_9.cpp:51:1: error: expected \u2018,\u2019 or \u2018\
    ;\u2019 before \u2018}\u2019 token\n/tmp/tmpco4ik3_9.cpp:51:1: warning: no return\
    \ statement in function returning non-void [-Wreturn-type]\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// get_closest_vowel(\"yogurt\") ==> \"u\"\
    \n// get_closest_vowel(\"FULL\") ==> \"U\"\n// get_closest_vowel(\"quick\") ==>\
    \ \"\"\n// get_closest_vowel(\"ab\") ==> \"\"\nstd::string get_closest_vowel(std::string\
    \ word) {\n    // Write your code here\n    std::string vowels = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reversed = vowels.rbegin() + vowels.size();\n    std::string\
    \ vowels_reversed_reversed = vowels_reversed.rbegin() + vowels_reversed.size();\n\
    \    std::string vowels_reversed_reversed_reversed = vowels_reversed_reversed.rbegin()\
    \ + vowels_reversed_reversed.size();\n    std::string vowels_reversed_reversed_reversed_reversed\
    \ = vowels_reversed_reversed_reversed.rbegin() + vowels_reversed_reversed_reversed.size();\n\
    \    std::string vowels_reversed_reversed_reversed_reversed_reversed = vowels_reversed_reversed_reversed_reversed.rbegin()\
    \ + vowels_reversed_reversed_reversed_reversed.size();\n    std::string vowels_reversed_reversed_reversed_reversed_reversed_reversed\
    \ = vowels_reversed_reversed_reversed_reversed_reversed.rbegin() + vowels_reversed_reversed_reversed_reversed_reversed.size();\n\
    \    std::string vowels_reversed_reversed_reversed_reversed_reversed_reversed_reversed\
    \ = vowels_reversed_reversed_reversed_reversed_reversed_reversed_reversed.rbegin()\
    \ + vowels_reversed_reversed_reversed_reversed_reversed_reversed.size();\n   \
    \ std::string vowels_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed\
    \ = vowels_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed.rbegin()\
    \ + vowels_reversed_reversed_reversed_reversed_reversed_reversed_reversed.size();\n\
    \    std::string vowels_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed\
    \ = vowels_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed.rbegin()\
    \ + vowels_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed.size();\n\
    \    std::string vowels_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed\
    \ = vowels_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed.rbegin()\
    \ + vowels_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed.size();\n\
    \    std::string vowels_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed\
    \ = vowels_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed.r\n\
    }\nint main() {\n    auto candidate = get_closest_vowel;\n    assert(candidate((\"\
    yogurt\")) == (\"u\"));\n    assert(candidate((\"full\")) == (\"u\"));\n    assert(candidate((\"\
    easy\")) == (\"\"));\n    assert(candidate((\"eAsy\")) == (\"\"));\n    assert(candidate((\"\
    ali\")) == (\"\"));\n    assert(candidate((\"bad\")) == (\"a\"));\n    assert(candidate((\"\
    most\")) == (\"o\"));\n    assert(candidate((\"ab\")) == (\"\"));\n    assert(candidate((\"\
    ba\")) == (\"\"));\n    assert(candidate((\"quick\")) == (\"\"));\n    assert(candidate((\"\
    anime\")) == (\"i\"));\n    assert(candidate((\"Asia\")) == (\"\"));\n    assert(candidate((\"\
    Above\")) == (\"o\"));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpzxlaeheg.cpp: In function \u2018std::string get_closest_vowel(std::string)\u2019\
    :\n/tmp/tmpzxlaeheg.cpp:16:51: error: conversion from \u2018std::reverse_iterator<__gnu_cxx::__normal_iterator<char*,\
    \ std::__cxx11::basic_string<char> > >\u2019 to non-scalar type \u2018std::string\u2019\
    \ {aka \u2018std::__cxx11::basic_string<char>\u2019} requested\n   16 |     std::string\
    \ vowels_reversed = vowels.rbegin() + vowels.size();\n      |                \
    \                   ~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~\n/tmp/tmpzxlaeheg.cpp:17:69:\
    \ error: conversion from \u2018std::reverse_iterator<__gnu_cxx::__normal_iterator<char*,\
    \ std::__cxx11::basic_string<char> > >\u2019 to non-scalar type \u2018std::string\u2019\
    \ {aka \u2018std::__cxx11::basic_string<char>\u2019} requested\n   17 |     std::string\
    \ vowels_reversed_reversed = vowels_reversed.rbegin() + vowels_reversed.size();\n\
    \      |                                            ~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpzxlaeheg.cpp:18:87: error: conversion from \u2018std::reverse_iterator<__gnu_cxx::__normal_iterator<char*,\
    \ std::__cxx11::basic_string<char> > >\u2019 to non-scalar type \u2018std::string\u2019\
    \ {aka \u2018std::__cxx11::basic_string<char>\u2019} requested\n   18 |     std::string\
    \ vowels_reversed_reversed_reversed = vowels_reversed_reversed.rbegin() + vowels_reversed_reversed.size();\n\
    \      |                                                     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpzxlaeheg.cpp:19:105: error: conversion from \u2018std::reverse_iterator<__gnu_cxx::__normal_iterator<char*,\
    \ std::__cxx11::basic_string<char> > >\u2019 to non-scalar type \u2018std::string\u2019\
    \ {aka \u2018std::__cxx11::basic_string<char>\u2019} requested\n   19 |     std::string\
    \ vowels_reversed_reversed_reversed_reversed = vowels_reversed_reversed_reversed.rbegin()\
    \ + vowels_reversed_reversed_reversed.size();\n      |                       \
    \                                       ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpzxlaeheg.cpp:20:123: error: conversion from \u2018std::reverse_iterator<__gnu_cxx::__normal_iterator<char*,\
    \ std::__cxx11::basic_string<char> > >\u2019 to non-scalar type \u2018std::string\u2019\
    \ {aka \u2018std::__cxx11::basic_string<char>\u2019} requested\n   20 |     std::string\
    \ vowels_reversed_reversed_reversed_reversed_reversed = vowels_reversed_reversed_reversed_reversed.rbegin()\
    \ + vowels_reversed_reversed_reversed_reversed.size();\n      |              \
    \                                                         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpzxlaeheg.cpp:21:141: error: conversion from \u2018std::reverse_iterator<__gnu_cxx::__normal_iterator<char*,\
    \ std::__cxx11::basic_string<char> > >\u2019 to non-scalar type \u2018std::string\u2019\
    \ {aka \u2018std::__cxx11::basic_string<char>\u2019} requested\n   21 |     std::string\
    \ vowels_reversed_reversed_reversed_reversed_reversed_reversed = vowels_reversed_reversed_reversed_reversed_reversed.rbegin()\
    \ + vowels_reversed_reversed_reversed_reversed_reversed.size();\n      |     \
    \                                                                           ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpzxlaeheg.cpp:22:168: error: conversion from \u2018std::reverse_iterator<__gnu_cxx::__normal_iterator<char*,\
    \ std::__cxx11::basic_string<char> > >\u2019 to non-scalar type \u2018std::string\u2019\
    \ {aka \u2018std::__cxx11::basic_string<char>\u2019} requested\n   22 |     std::string\
    \ vowels_reversed_reversed_reversed_reversed_reversed_reversed_reversed = vowels_reversed_reversed_reversed_reversed_reversed_reversed_reversed.rbegin()\
    \ + vowels_reversed_reversed_reversed_reversed_reversed_reversed.size();\n   \
    \   |                                                                        \
    \                 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpzxlaeheg.cpp:23:186: error: conversion from \u2018std::reverse_iterator<__gnu_cxx::__normal_iterator<char*,\
    \ std::__cxx11::basic_string<char> > >\u2019 to non-scalar type \u2018std::string\u2019\
    \ {aka \u2018std::__cxx11::basic_string<char>\u2019} requested\n   23 |     std::string\
    \ vowels_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed\
    \ = vowels_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed.rbegin()\
    \ + vowels_reversed_reversed_reversed_reversed_reversed_reversed_reversed.size();\n\
    \      |                                                                     \
    \                             ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpzxlaeheg.cpp:24:107: error: \u2018vowels_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed\u2019\
    \ was not declared in this scope; did you mean \u2018vowels_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed\u2019\
    ?\n   24 |     std::string vowels_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed\
    \ = vowels_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed.rbegin()\
    \ + vowels_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed.size();\n\
    \      |                                                                     \
    \                                      ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    \      |                                                                     \
    \                                      vowels_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed\n\
    /tmp/tmpzxlaeheg.cpp:25:116: error: \u2018vowels_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed\u2019\
    \ was not declared in this scope; did you mean \u2018vowels_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed\u2019\
    ?\n   25 |     std::string vowels_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed\
    \ = vowels_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed.rbegin()\
    \ + vowels_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed.size();\n\
    \      |                                                                     \
    \                                               ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    \      |                                                                     \
    \                                               vowels_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed\n\
    /tmp/tmpzxlaeheg.cpp:26:125: error: \u2018vowels_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed\u2019\
    \ was not declared in this scope; did you mean \u2018vowels_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed\u2019\
    ?\n   26 |     std::string vowels_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed\
    \ = vowels_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed.r\n\
    \      |                                                                     \
    \                                                        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    \      |                                                                     \
    \                                                        vowels_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed\n\
    /tmp/tmpzxlaeheg.cpp:27:1: warning: no return statement in function returning\
    \ non-void [-Wreturn-type]\n   27 | }\n      | ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// get_closest_vowel(\"yogurt\") ==> \"u\"\
    \n// get_closest_vowel(\"FULL\") ==> \"U\"\n// get_closest_vowel(\"quick\") ==>\
    \ \"\"\n// get_closest_vowel(\"ab\") ==> \"\"\nstd::string get_closest_vowel(std::string\
    \ word) {\n    std::string vowels = \"AEIOUaeiou\";\n    std::string vowels_reverse\
    \ = vowels.substr(0, vowels.size() - 1);\n    std::string vowels_reverse2 = vowels_reverse.substr(0,\
    \ vowels_reverse.size() - 1);\n    std::string vowels_reverse3 = vowels_reverse2.substr(0,\
    \ vowels_reverse2.size() - 1);\n    std::string vowels_reverse4 = vowels_reverse3.substr(0,\
    \ vowels_reverse3.size() - 1);\n    std::string vowels_reverse5 = vowels_reverse4.substr(0,\
    \ vowels_reverse4.size() - 1);\n    std::string vowels_reverse6 = vowels_reverse5.substr(0,\
    \ vowels_reverse5.size() - 1);\n    std::string vowels_reverse7 = vowels_reverse6.substr(0,\
    \ vowels_reverse6.size() - 1);\n    std::string vowels_reverse8 = vowels_reverse7.substr(0,\
    \ vowels_reverse7.size() - 1);\n    std::string vowels_reverse9 = vowels_reverse8.substr(0,\
    \ vowels_reverse8.size() - 1);\n    std::string vowels_reverse10 = vowels_reverse9.substr(0,\
    \ vowels_reverse9.size() - 1);\n    std::string vowels_reverse11 = vowels_reverse10.substr(0,\
    \ vowels_reverse10.size() - 1);\n    std::string vowels_reverse12 = vowels_reverse11.substr(0,\
    \ vowels_reverse11.size() - 1);\n    std::string vowels_reverse13 = vowels_reverse12.substr(0,\
    \ vowels_reverse12.size() - 1);\n    std::string vowels_reverse14 = vowels_reverse13.substr(0,\
    \ vowels_reverse13.size() - 1);\n    std::string vowels_reverse15 = vowels_reverse14.substr(0,\
    \ vowels_reverse14.size() - 1);\n    std::string vowels_reverse16 = vowels_reverse15.substr(0,\
    \ vowels_reverse15.size() - 1);\n    std::string vowels_reverse17 = vowels_reverse16.substr(0,\
    \ vowels_reverse16.size() - 1);\n    std::string vowels_reverse18 = vowels_reverse17.substr(0,\
    \ vowels_reverse17.size() - 1);\n    std::string vowels_reverse19 = vowels_reverse18.substr(0,\
    \ vowels_reverse18.size() - 1);\n    std::string vowels_reverse20 = vowels_reverse19.substr(0,\
    \ vowels_reverse19.size() - 1);\n    std::string vowels_reverse21 = vowels_reverse20.substr(0,\
    \ vowels_reverse20.size() - 1);\n    std::string vowels_reverse22 = vowels_reverse21.substr(0,\
    \ vowels_reverse21.size() - 1);\n    std::string vowels_reverse23 = vowels_reverse22.substr(0,\
    \ vowels_reverse22.size() - 1);\n    std::string vowels_reverse24 = vowels_reverse23.substr(0,\
    \ vowels_reverse23.size() - 1);\n    std::string vowels_reverse25 = vowels_reverse24.substr(0,\
    \ vowels_\n}\nint main() {\n    auto candidate = get_closest_vowel;\n    assert(candidate((\"\
    yogurt\")) == (\"u\"));\n    assert(candidate((\"full\")) == (\"u\"));\n    assert(candidate((\"\
    easy\")) == (\"\"));\n    assert(candidate((\"eAsy\")) == (\"\"));\n    assert(candidate((\"\
    ali\")) == (\"\"));\n    assert(candidate((\"bad\")) == (\"a\"));\n    assert(candidate((\"\
    most\")) == (\"o\"));\n    assert(candidate((\"ab\")) == (\"\"));\n    assert(candidate((\"\
    ba\")) == (\"\"));\n    assert(candidate((\"quick\")) == (\"\"));\n    assert(candidate((\"\
    anime\")) == (\"i\"));\n    assert(candidate((\"Asia\")) == (\"\"));\n    assert(candidate((\"\
    Above\")) == (\"o\"));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpy8f0pbct.cpp: In function \u2018std::string get_closest_vowel(std::string)\u2019\
    :\n/tmp/tmpy8f0pbct.cpp:39:63: error: \u2018vowels_\u2019 was not declared in\
    \ this scope; did you mean \u2018vowels\u2019?\n   39 |     std::string vowels_reverse25\
    \ = vowels_reverse24.substr(0, vowels_\n      |                              \
    \                                 ^~~~~~~\n      |                           \
    \                                    vowels\n/tmp/tmpy8f0pbct.cpp:40:1: error:\
    \ expected \u2018,\u2019 or \u2018;\u2019 before \u2018}\u2019 token\n   40 |\
    \ }\n      | ^\n/tmp/tmpy8f0pbct.cpp:40:1: warning: no return statement in function\
    \ returning non-void [-Wreturn-type]\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// get_closest_vowel(\"yogurt\") ==> \"u\"\
    \n// get_closest_vowel(\"FULL\") ==> \"U\"\n// get_closest_vowel(\"quick\") ==>\
    \ \"\"\n// get_closest_vowel(\"ab\") ==> \"\"\nstd::string get_closest_vowel(std::string\
    \ word) {\n    std::string vowels = \"aeiouAEIOU\";\n    std::string vowels_end\
    \ = \"AEIOUaeiou\";\n    std::string vowels_start = \"aeiouAEIOU\";\n    std::string\
    \ vowels_start_end = \"AEIOUaeiou\";\n    std::string vowels_start_end_end = \"\
    aeiouAEIOUaeiou\";\n    std::string vowels_start_end_end_end = \"aeiouAEIOUaeiou\"\
    ;\n    std::string vowels_start_end_end_end_end = \"aeiouAEIOUaeiou\";\n    std::string\
    \ vowels_start_end_end_end_end_end = \"aeiouAEIOUaeiou\";\n    std::string vowels_start_end_end_end_end_end_end\
    \ = \"aeiouAEIOUaeiou\";\n    std::string vowels_start_end_end_end_end_end_end_end\
    \ = \"aeiouAEIOUaeiou\";\n    std::string vowels_start_end_end_end_end_end_end_end_end\
    \ = \"aeiouAEIOUaeiou\";\n    std::string vowels_start_end_end_end_end_end_end_end_end_end\
    \ = \"aeiouAEIOUaeiou\";\n    std::string vowels_start_end_end_end_end_end_end_end_end_end_end\
    \ = \"aeiouAEIOUaeiou\";\n    std::string vowels_start_end_end_end_end_end_end_end_end_end_end\
    \ = \"aeiouAEIOUaeiou\";\n    std::string vowels_start_end_end_end_end_end_end_end_end_end_end_end\
    \ = \"aeiouAEIOUaeiou\";\n    std::string vowels_start_end_end_end_end_end_end_end_end_end_end_end_end\
    \ = \"aeiouAEIOUaeiou\";\n    std::string vowels_start_end_end_end_end_end_end_end_end_end_end_end_end\
    \ = \"aeiouAEIOUaeiou\";\n    std::string vowels_start_end_end_end_end_end_end_end_end_end_end_end_end\
    \ = \"aeiouAEIOUaeiou\";\n    std::string vowels_start_end_end_end_end_end_end_end_end_end_end_end_end\
    \ = \"aeiouAEIOUaeiou\";\n    std::string vowels_start_end_end_end_end_end_end_end_end_end_end_end_end_end\
    \ = \"aeiouAEIOUaeiou\";\n    std::string vowels_start_end_end_end_end_end_end_end_end_end_end_end_end_end\
    \ = \"aeiouAEIOUaeiou\";\n    std::string vowels_start_end_end_end_end_end_end_end_end_end_end_end_end_end_end\
    \ = \"aeiouAEIOUaeiou\";\n    std::string vowels_start_end_end_end_end_end_end_end_end_end_end_end_end_end_end\
    \ = \"aeiouAEIOUaeiou\";\n}\nint main() {\n    auto candidate = get_closest_vowel;\n\
    \    assert(candidate((\"yogurt\")) == (\"u\"));\n    assert(candidate((\"full\"\
    )) == (\"u\"));\n    assert(candidate((\"easy\")) == (\"\"));\n    assert(candidate((\"\
    eAsy\")) == (\"\"));\n    assert(candidate((\"ali\")) == (\"\"));\n    assert(candidate((\"\
    bad\")) == (\"a\"));\n    assert(candidate((\"most\")) == (\"o\"));\n    assert(candidate((\"\
    ab\")) == (\"\"));\n    assert(candidate((\"ba\")) == (\"\"));\n    assert(candidate((\"\
    quick\")) == (\"\"));\n    assert(candidate((\"anime\")) == (\"i\"));\n    assert(candidate((\"\
    Asia\")) == (\"\"));\n    assert(candidate((\"Above\")) == (\"o\"));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpikq6p6ek.cpp: In function \u2018std::string get_closest_vowel(std::string)\u2019\
    :\n/tmp/tmpikq6p6ek.cpp:27:17: error: redeclaration of \u2018std::string vowels_start_end_end_end_end_end_end_end_end_end_end\u2019\
    \n   27 |     std::string vowels_start_end_end_end_end_end_end_end_end_end_end\
    \ = \"aeiouAEIOUaeiou\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpikq6p6ek.cpp:26:17: note: \u2018std::string vowels_start_end_end_end_end_end_end_end_end_end_end\u2019\
    \ previously declared here\n   26 |     std::string vowels_start_end_end_end_end_end_end_end_end_end_end\
    \ = \"aeiouAEIOUaeiou\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpikq6p6ek.cpp:30:17: error: redeclaration of \u2018std::string vowels_start_end_end_end_end_end_end_end_end_end_end_end_end\u2019\
    \n   30 |     std::string vowels_start_end_end_end_end_end_end_end_end_end_end_end_end\
    \ = \"aeiouAEIOUaeiou\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpikq6p6ek.cpp:29:17: note: \u2018std::string vowels_start_end_end_end_end_end_end_end_end_end_end_end_end\u2019\
    \ previously declared here\n   29 |     std::string vowels_start_end_end_end_end_end_end_end_end_end_end_end_end\
    \ = \"aeiouAEIOUaeiou\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpikq6p6ek.cpp:31:17: error: redeclaration of \u2018std::string vowels_start_end_end_end_end_end_end_end_end_end_end_end_end\u2019\
    \n   31 |     std::string vowels_start_end_end_end_end_end_end_end_end_end_end_end_end\
    \ = \"aeiouAEIOUaeiou\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpikq6p6ek.cpp:29:17: note: \u2018std::string vowels_start_end_end_end_end_end_end_end_end_end_end_end_end\u2019\
    \ previously declared here\n   29 |     std::string vowels_start_end_end_end_end_end_end_end_end_end_end_end_end\
    \ = \"aeiouAEIOUaeiou\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpikq6p6ek.cpp:32:17: error: redeclaration of \u2018std::string vowels_start_end_end_end_end_end_end_end_end_end_end_end_end\u2019\
    \n   32 |     std::string vowels_start_end_end_end_end_end_end_end_end_end_end_end_end\
    \ = \"aeiouAEIOUaeiou\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpikq6p6ek.cpp:29:17: note: \u2018std::string vowels_start_end_end_end_end_end_end_end_end_end_end_end_end\u2019\
    \ previously declared here\n   29 |     std::string vowels_start_end_end_end_end_end_end_end_end_end_end_end_end\
    \ = \"aeiouAEIOUaeiou\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpikq6p6ek.cpp:34:17: error: redeclaration of \u2018std::string vowels_start_end_end_end_end_end_end_end_end_end_end_end_end_end\u2019\
    \n   34 |     std::string vowels_start_end_end_end_end_end_end_end_end_end_end_end_end_end\
    \ = \"aeiouAEIOUaeiou\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpikq6p6ek.cpp:33:17: note: \u2018std::string vowels_start_end_end_end_end_end_end_end_end_end_end_end_end_end\u2019\
    \ previously declared here\n   33 |     std::string vowels_start_end_end_end_end_end_end_end_end_end_end_end_end_end\
    \ = \"aeiouAEIOUaeiou\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpikq6p6ek.cpp:36:17: error: redeclaration of \u2018std::string vowels_start_end_end_end_end_end_end_end_end_end_end_end_end_end_end\u2019\
    \n   36 |     std::string vowels_start_end_end_end_end_end_end_end_end_end_end_end_end_end_end\
    \ = \"aeiouAEIOUaeiou\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpikq6p6ek.cpp:35:17: note: \u2018std::string vowels_start_end_end_end_end_end_end_end_end_end_end_end_end_end_end\u2019\
    \ previously declared here\n   35 |     std::string vowels_start_end_end_end_end_end_end_end_end_end_end_end_end_end_end\
    \ = \"aeiouAEIOUaeiou\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpikq6p6ek.cpp:37:1: warning: no return statement in function returning\
    \ non-void [-Wreturn-type]\n   37 | }\n      | ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// get_closest_vowel(\"yogurt\") ==> \"u\"\
    \n// get_closest_vowel(\"FULL\") ==> \"U\"\n// get_closest_vowel(\"quick\") ==>\
    \ \"\"\n// get_closest_vowel(\"ab\") ==> \"\"\nstd::string get_closest_vowel(std::string\
    \ word) {\n    std::string vowels = \"AEIOUaeiou\";\n    std::string vowels_rev\
    \ = \"AEIOUaeiou\";\n    std::string vowels_rev2 = \"\";\n    std::string vowels_rev3\
    \ = \"\";\n    std::string vowels_rev4 = \"\";\n    std::string vowels_rev5 =\
    \ \"\";\n    std::string vowels_rev6 = \"\";\n    std::string vowels_rev7 = \"\
    \";\n    std::string vowels_rev8 = \"\";\n    std::string vowels_rev9 = \"\";\n\
    \    std::string vowels_rev10 = \"\";\n    std::string vowels_rev11 = \"\";\n\
    \    std::string vowels_rev12 = \"\";\n    std::string vowels_rev13 = \"\";\n\
    \    std::string vowels_rev14 = \"\";\n    std::string vowels_rev15 = \"\";\n\
    \    std::string vowels_rev16 = \"\";\n    std::string vowels_rev17 = \"\";\n\
    \    std::string vowels_rev18 = \"\";\n    std::string vowels_rev19 = \"\";\n\
    \    std::string vowels_rev20 = \"\";\n    std::string vowels_rev21 = \"\";\n\
    \    std::string vowels_rev22 = \"\";\n    std::string vowels_rev23 = \"\";\n\
    \    std::string vowels_rev24 = \"\";\n    std::string vowels_rev25 = \"\";\n\
    \    std::string vowels_rev26 = \"\";\n    std::string vowels_rev27 = \"\";\n\
    \    std::string vowels_rev28 = \"\";\n    std::string vowels_rev29 = \"\";\n\
    \    std::string vowels_rev30 = \"\";\n    std::string vowels_rev31 = \"\";\n\
    \    std::string vowels_rev32 = \"\";\n    std::string vowels_rev33 = \"\";\n\
    \    std::string vowels_rev34 = \"\";\n    std::string vowels_rev35 = \"\";\n\
    \    std::string vowels_rev36 = \"\";\n    std::string vowels_rev37 = \"\";\n\
    \    std::string vowels_rev38 = \"\";\n    std::string vowels_rev39 = \"\";\n\
    \    std::string vowels_rev40 = \"\";\n    std::string vowels_rev41 = \"\";\n\
    \    std::string vowels_rev42 = \"\";\n    std::string vowels_rev43 = \"\";\n\
    \    std::string vowels_rev44 = \"\";\n    std::string vowels_rev45 = \"\";\n\
    \    std::string vowels_rev46 = \"\";\n    std::string vowels_rev47 = \"\";\n\
    \    std::string vowels_rev48 = \"\";\n    std::string vowels_rev49 = \"\";\n\
    \    std::string vowels_rev50 = \"\";\n    std::string vowels_rev51 = \"\";\n\
    \    std::string vowels_rev52 = \"\";\n    std::string vowels_rev53 = \"\";\n\
    \    std::string vowels_rev54 = \"\";\n    std::string vowels_rev55 = \"\";\n\
    \    std::string vowels_rev56 = \"\";\n    std::string vowels_rev57 = \"\";\n\
    \    std::string vowels_rev58 = \"\";\n    std::string vowels_rev59 = \"\";\n\
    \    std::string vowels_rev60 = \"\";\n    std::string vowels_rev6\n}\nint main()\
    \ {\n    auto candidate = get_closest_vowel;\n    assert(candidate((\"yogurt\"\
    )) == (\"u\"));\n    assert(candidate((\"full\")) == (\"u\"));\n    assert(candidate((\"\
    easy\")) == (\"\"));\n    assert(candidate((\"eAsy\")) == (\"\"));\n    assert(candidate((\"\
    ali\")) == (\"\"));\n    assert(candidate((\"bad\")) == (\"a\"));\n    assert(candidate((\"\
    most\")) == (\"o\"));\n    assert(candidate((\"ab\")) == (\"\"));\n    assert(candidate((\"\
    ba\")) == (\"\"));\n    assert(candidate((\"quick\")) == (\"\"));\n    assert(candidate((\"\
    anime\")) == (\"i\"));\n    assert(candidate((\"Asia\")) == (\"\"));\n    assert(candidate((\"\
    Above\")) == (\"o\"));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp7zn9yr2s.cpp: In function \u2018std::string get_closest_vowel(std::string)\u2019\
    :\n/tmp/tmp7zn9yr2s.cpp:76:1: error: expected initializer before \u2018}\u2019\
    \ token\n   76 | }\n      | ^\n/tmp/tmp7zn9yr2s.cpp:76:1: warning: no return statement\
    \ in function returning non-void [-Wreturn-type]\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// get_closest_vowel(\"yogurt\") ==> \"u\"\
    \n// get_closest_vowel(\"FULL\") ==> \"U\"\n// get_closest_vowel(\"quick\") ==>\
    \ \"\"\n// get_closest_vowel(\"ab\") ==> \"\"\nstd::string get_closest_vowel(std::string\
    \ word) {\n    std::string vowels = \"AEIOUaeiou\";\n    std::string vowels_reverse\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_reverse = \"\";\n    std::string\
    \ vowels_reverse_back = \"\";\n    std::string vowels_reverse_back_reverse = \"\
    \";\n    std::string vowels_reverse_back_reverse_back = \"\";\n    std::string\
    \ vowels_reverse_back_reverse_back_reverse = \"\";\n    std::string vowels_reverse_back_reverse_back_reverse_back\
    \ = \"\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse\
    \ = \"\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back\
    \ = \"\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse\
    \ = \"\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\
    \ = \"\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse\
    \ = \"\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\
    \ = \"\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\
    \ = \"\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse\
    \ = \"\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\
    \ = \"\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse\
    \ = \"\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\
    \ = \"\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\
    \ = \"\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse\
    \ = \"\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\
    \ = \"\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\
    \ = \"\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\
    \ = \"\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_re\n\
    }\nint main() {\n    auto candidate = get_closest_vowel;\n    assert(candidate((\"\
    yogurt\")) == (\"u\"));\n    assert(candidate((\"full\")) == (\"u\"));\n    assert(candidate((\"\
    easy\")) == (\"\"));\n    assert(candidate((\"eAsy\")) == (\"\"));\n    assert(candidate((\"\
    ali\")) == (\"\"));\n    assert(candidate((\"bad\")) == (\"a\"));\n    assert(candidate((\"\
    most\")) == (\"o\"));\n    assert(candidate((\"ab\")) == (\"\"));\n    assert(candidate((\"\
    ba\")) == (\"\"));\n    assert(candidate((\"quick\")) == (\"\"));\n    assert(candidate((\"\
    anime\")) == (\"i\"));\n    assert(candidate((\"Asia\")) == (\"\"));\n    assert(candidate((\"\
    Above\")) == (\"o\"));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpb4fl2h71.cpp: In function \u2018std::string get_closest_vowel(std::string)\u2019\
    :\n/tmp/tmpb4fl2h71.cpp:28:17: error: redeclaration of \u2018std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\u2019\
    \n   28 |     std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\
    \ = \"\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpb4fl2h71.cpp:27:17: note: \u2018std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\u2019\
    \ previously declared here\n   27 |     std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\
    \ = \"\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpb4fl2h71.cpp:33:17: error: redeclaration of \u2018std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\u2019\
    \n   33 |     std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\
    \ = \"\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpb4fl2h71.cpp:32:17: note: \u2018std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\u2019\
    \ previously declared here\n   32 |     std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\
    \ = \"\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpb4fl2h71.cpp:36:17: error: redeclaration of \u2018std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\u2019\
    \n   36 |     std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\
    \ = \"\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpb4fl2h71.cpp:35:17: note: \u2018std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\u2019\
    \ previously declared here\n   35 |     std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\
    \ = \"\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpb4fl2h71.cpp:37:17: error: redeclaration of \u2018std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\u2019\
    \n   37 |     std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\
    \ = \"\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpb4fl2h71.cpp:35:17: note: \u2018std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\u2019\
    \ previously declared here\n   35 |     std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\
    \ = \"\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpb4fl2h71.cpp:39:1: error: expected initializer before \u2018}\u2019 token\n\
    \   39 | }\n      | ^\n/tmp/tmpb4fl2h71.cpp:39:1: warning: no return statement\
    \ in function returning non-void [-Wreturn-type]\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// get_closest_vowel(\"yogurt\") ==> \"u\"\
    \n// get_closest_vowel(\"FULL\") ==> \"U\"\n// get_closest_vowel(\"quick\") ==>\
    \ \"\"\n// get_closest_vowel(\"ab\") ==> \"\"\nstd::string get_closest_vowel(std::string\
    \ word) {\n    std::string vowels = \"aeiouAEIOU\";\n    std::string vowels_reverse\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse2 = \"aeiouAEIOU\";\n    std::string\
    \ vowels_reverse3 = \"AEIOUaeiou\";\n    std::string vowels_reverse4 = \"aeiouAEIOU\"\
    ;\n    std::string vowels_reverse5 = \"AEIOUaeiou\";\n    std::string vowels_reverse6\
    \ = \"aeiouAEIOU\";\n    std::string vowels_reverse7 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse8 = \"aeiouAEIOU\";\n    std::string vowels_reverse9 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse10 = \"aeiouAEIOU\";\n    std::string vowels_reverse11\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse12 = \"aeiouAEIOU\";\n    std::string\
    \ vowels_reverse13 = \"AEIOUaeiou\";\n    std::string vowels_reverse14 = \"aeiouAEIOU\"\
    ;\n    std::string vowels_reverse15 = \"AEIOUaeiou\";\n    std::string vowels_reverse16\
    \ = \"aeiouAEIOU\";\n    std::string vowels_reverse17 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse18 = \"aeiouAEIOU\";\n    std::string vowels_reverse19 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse20 = \"aeiouAEIOU\";\n    std::string vowels_reverse21\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse22 = \"aeiouAEIOU\";\n    std::string\
    \ vowels_reverse23 = \"AEIOUaeiou\";\n    std::string vowels_reverse24 = \"aeiouAEIOU\"\
    ;\n    std::string vowels_reverse25 = \"AEIOUaeiou\";\n    std::string vowels_reverse26\
    \ = \"aeiouAEIOU\";\n    std::string vowels_reverse27 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse28 = \"aeiouAEIOU\";\n    std::string vowels_reverse29 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse30 = \"aeiouAEIOU\";\n    std::string vowels_reverse31\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse32 = \"aeiouAEIOU\";\n    std::string\
    \ vowels_reverse33 = \"AEIOUaeiou\";\n    std::string vowels_reverse34 = \"aeiouAEIOU\"\
    ;\n    std::string vowels_reverse35 = \"AEIOUaeiou\";\n    std::string vowels_reverse36\
    \ = \"aeiouAE\n}\nint main() {\n    auto candidate = get_closest_vowel;\n    assert(candidate((\"\
    yogurt\")) == (\"u\"));\n    assert(candidate((\"full\")) == (\"u\"));\n    assert(candidate((\"\
    easy\")) == (\"\"));\n    assert(candidate((\"eAsy\")) == (\"\"));\n    assert(candidate((\"\
    ali\")) == (\"\"));\n    assert(candidate((\"bad\")) == (\"a\"));\n    assert(candidate((\"\
    most\")) == (\"o\"));\n    assert(candidate((\"ab\")) == (\"\"));\n    assert(candidate((\"\
    ba\")) == (\"\"));\n    assert(candidate((\"quick\")) == (\"\"));\n    assert(candidate((\"\
    anime\")) == (\"i\"));\n    assert(candidate((\"Asia\")) == (\"\"));\n    assert(candidate((\"\
    Above\")) == (\"o\"));\n}\n"
  stdout: ''
  stderr: "/tmp/tmplvgjnxpa.cpp:50:36: warning: missing terminating \" character\n\
    \   50 |     std::string vowels_reverse36 = \"aeiouAE\n      |               \
    \                     ^\n/tmp/tmplvgjnxpa.cpp:50:36: error: missing terminating\
    \ \" character\n   50 |     std::string vowels_reverse36 = \"aeiouAE\n      |\
    \                                    ^~~~~~~~\n/tmp/tmplvgjnxpa.cpp: In function\
    \ \u2018std::string get_closest_vowel(std::string)\u2019:\n/tmp/tmplvgjnxpa.cpp:51:1:\
    \ error: expected primary-expression before \u2018}\u2019 token\n   51 | }\n \
    \     | ^\n/tmp/tmplvgjnxpa.cpp:51:1: error: expected \u2018,\u2019 or \u2018\
    ;\u2019 before \u2018}\u2019 token\n/tmp/tmplvgjnxpa.cpp:51:1: warning: no return\
    \ statement in function returning non-void [-Wreturn-type]\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// get_closest_vowel(\"yogurt\") ==> \"u\"\
    \n// get_closest_vowel(\"FULL\") ==> \"U\"\n// get_closest_vowel(\"quick\") ==>\
    \ \"\"\n// get_closest_vowel(\"ab\") ==> \"\"\nstd::string get_closest_vowel(std::string\
    \ word) {\n    std::string vowels = \"AEIOUaeiou\";\n    std::string vowels_reverse\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_reverse = \"\";\n    std::string\
    \ vowels_reverse_back = \"\";\n    std::string vowels_reverse_back_reverse = \"\
    \";\n    std::string vowels_reverse_back_reverse_back = \"\";\n    std::string\
    \ vowels_reverse_back_reverse_back_reverse = \"\";\n    std::string vowels_reverse_back_reverse_back_reverse_back\
    \ = \"\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse\
    \ = \"\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back\
    \ = \"\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse\
    \ = \"\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\
    \ = \"\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse\
    \ = \"\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\
    \ = \"\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\
    \ = \"\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse\
    \ = \"\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\
    \ = \"\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse\
    \ = \"\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\
    \ = \"\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\
    \ = \"\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse\
    \ = \"\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\
    \ = \"\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\
    \ = \"\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\
    \ = \"\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_re\n\
    }\nint main() {\n    auto candidate = get_closest_vowel;\n    assert(candidate((\"\
    yogurt\")) == (\"u\"));\n    assert(candidate((\"full\")) == (\"u\"));\n    assert(candidate((\"\
    easy\")) == (\"\"));\n    assert(candidate((\"eAsy\")) == (\"\"));\n    assert(candidate((\"\
    ali\")) == (\"\"));\n    assert(candidate((\"bad\")) == (\"a\"));\n    assert(candidate((\"\
    most\")) == (\"o\"));\n    assert(candidate((\"ab\")) == (\"\"));\n    assert(candidate((\"\
    ba\")) == (\"\"));\n    assert(candidate((\"quick\")) == (\"\"));\n    assert(candidate((\"\
    anime\")) == (\"i\"));\n    assert(candidate((\"Asia\")) == (\"\"));\n    assert(candidate((\"\
    Above\")) == (\"o\"));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp4dwg22c2.cpp: In function \u2018std::string get_closest_vowel(std::string)\u2019\
    :\n/tmp/tmp4dwg22c2.cpp:28:17: error: redeclaration of \u2018std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\u2019\
    \n   28 |     std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\
    \ = \"\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmp4dwg22c2.cpp:27:17: note: \u2018std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\u2019\
    \ previously declared here\n   27 |     std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\
    \ = \"\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmp4dwg22c2.cpp:33:17: error: redeclaration of \u2018std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\u2019\
    \n   33 |     std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\
    \ = \"\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmp4dwg22c2.cpp:32:17: note: \u2018std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\u2019\
    \ previously declared here\n   32 |     std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\
    \ = \"\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmp4dwg22c2.cpp:36:17: error: redeclaration of \u2018std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\u2019\
    \n   36 |     std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\
    \ = \"\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmp4dwg22c2.cpp:35:17: note: \u2018std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\u2019\
    \ previously declared here\n   35 |     std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\
    \ = \"\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmp4dwg22c2.cpp:37:17: error: redeclaration of \u2018std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\u2019\
    \n   37 |     std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\
    \ = \"\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmp4dwg22c2.cpp:35:17: note: \u2018std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\u2019\
    \ previously declared here\n   35 |     std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\
    \ = \"\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmp4dwg22c2.cpp:39:1: error: expected initializer before \u2018}\u2019 token\n\
    \   39 | }\n      | ^\n/tmp/tmp4dwg22c2.cpp:39:1: warning: no return statement\
    \ in function returning non-void [-Wreturn-type]\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// get_closest_vowel(\"yogurt\") ==> \"u\"\
    \n// get_closest_vowel(\"FULL\") ==> \"U\"\n// get_closest_vowel(\"quick\") ==>\
    \ \"\"\n// get_closest_vowel(\"ab\") ==> \"\"\nstd::string get_closest_vowel(std::string\
    \ word) {\n    int len = word.length();\n    std::string vowels = \"aeiouAEIOU\"\
    ;\n    std::string vowels_end = \"AEIOUaeiou\";\n    int vowels_len = vowels.length();\n\
    \    int vowels_end_len = vowels_end.length();\n    int vowels_index = -1;\n \
    \   int vowels_end_index = -1;\n    int vowels_end_index = -1;\n    int vowels_end_index\
    \ = -1;\n    int vowels_end_index = -1;\n    int vowels_end_index = -1;\n    int\
    \ vowels_end_index = -1;\n    int vowels_end_index = -1;\n    int vowels_end_index\
    \ = -1;\n    int vowels_end_index = -1;\n    int vowels_end_index = -1;\n    int\
    \ vowels_end_index = -1;\n    int vowels_end_index = -1;\n    int vowels_end_index\
    \ = -1;\n    int vowels_end_index = -1;\n    int vowels_end_index = -1;\n    int\
    \ vowels_end_index = -1;\n    int vowels_end_index = -1;\n    int vowels_end_index\
    \ = -1;\n    int vowels_end_index = -1;\n    int vowels_end_index = -1;\n    int\
    \ vowels_end_index = -1;\n    int vowels_end_index = -1;\n    int vowels_end_index\
    \ = -1;\n    int vowels_end_index = -1;\n    int vowels_end_index = -1;\n    int\
    \ vowels_end_index = -1;\n    int vowels_end_index = -1;\n    int vowels_end_index\
    \ = -1;\n    int vowels_end_index = -1;\n    int vowels_end_index = -1;\n    int\
    \ vowels_end_index = -1;\n    int vowels_end_index = -1;\n    int vowels_end_index\
    \ = -1;\n    int vowels_end_index = -1;\n    int vowels_end_index = -1;\n    int\
    \ vowels_end_index = -1;\n    int vowels_end_index = -1;\n    int vowels_end_index\
    \ = -1;\n    int vowels_end_index = -1;\n    int vowels_end_index = -1;\n    int\
    \ vowels_end_index = -1;\n    int vowels_end_index = -1;\n    int vowels_end_index\
    \ = -1;\n    int vowels_end_index = -1;\n    int vowels_end_index = -1;\n    int\
    \ vowels_end_index = -1;\n    int vowels_end_index = -1;\n    int vowels_end_index\
    \ = -1;\n    int vowels_end_index = -1;\n    int vowels_end_index = -1;\n    int\
    \ vowels_end_index = -1;\n    int vowels_end_index = -1;\n    int vowels_end_index\
    \ = -1;\n    int vowels_end_index = -1;\n    int vowels_end_index = -1;\n    int\
    \ vowels_end_index = -1;\n    int vowels_end_index = -1;\n    int vowels_end_index\
    \ = -1;\n    int vowels_end_index = -1;\n    int vowels_end_index = -1;\n    int\
    \ vowels_end_index = -1;\n    int vowels_end_index = -1;\n    int vowels_end_index\
    \ = -1;\n    int vowels_end_index = -1;\n    int vowels_end_index = -1;\n    int\
    \ vowel\n}\nint main() {\n    auto candidate = get_closest_vowel;\n    assert(candidate((\"\
    yogurt\")) == (\"u\"));\n    assert(candidate((\"full\")) == (\"u\"));\n    assert(candidate((\"\
    easy\")) == (\"\"));\n    assert(candidate((\"eAsy\")) == (\"\"));\n    assert(candidate((\"\
    ali\")) == (\"\"));\n    assert(candidate((\"bad\")) == (\"a\"));\n    assert(candidate((\"\
    most\")) == (\"o\"));\n    assert(candidate((\"ab\")) == (\"\"));\n    assert(candidate((\"\
    ba\")) == (\"\"));\n    assert(candidate((\"quick\")) == (\"\"));\n    assert(candidate((\"\
    anime\")) == (\"i\"));\n    assert(candidate((\"Asia\")) == (\"\"));\n    assert(candidate((\"\
    Above\")) == (\"o\"));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpewg5aa7i.cpp: In function \u2018std::string get_closest_vowel(std::string)\u2019\
    :\n/tmp/tmpewg5aa7i.cpp:21:9: error: redeclaration of \u2018int vowels_end_index\u2019\
    \n   21 |     int vowels_end_index = -1;\n      |         ^~~~~~~~~~~~~~~~\n/tmp/tmpewg5aa7i.cpp:20:9:\
    \ note: \u2018int vowels_end_index\u2019 previously declared here\n   20 |   \
    \  int vowels_end_index = -1;\n      |         ^~~~~~~~~~~~~~~~\n/tmp/tmpewg5aa7i.cpp:22:9:\
    \ error: redeclaration of \u2018int vowels_end_index\u2019\n   22 |     int vowels_end_index\
    \ = -1;\n      |         ^~~~~~~~~~~~~~~~\n/tmp/tmpewg5aa7i.cpp:20:9: note: \u2018\
    int vowels_end_index\u2019 previously declared here\n   20 |     int vowels_end_index\
    \ = -1;\n      |         ^~~~~~~~~~~~~~~~\n/tmp/tmpewg5aa7i.cpp:23:9: error: redeclaration\
    \ of \u2018int vowels_end_index\u2019\n   23 |     int vowels_end_index = -1;\n\
    \      |         ^~~~~~~~~~~~~~~~\n/tmp/tmpewg5aa7i.cpp:20:9: note: \u2018int\
    \ vowels_end_index\u2019 previously declared here\n   20 |     int vowels_end_index\
    \ = -1;\n      |         ^~~~~~~~~~~~~~~~\n/tmp/tmpewg5aa7i.cpp:24:9: error: redeclaration\
    \ of \u2018int vowels_end_index\u2019\n   24 |     int vowels_end_index = -1;\n\
    \      |         ^~~~~~~~~~~~~~~~\n/tmp/tmpewg5aa7i.cpp:20:9: note: \u2018int\
    \ vowels_end_index\u2019 previously declared here\n   20 |     int vowels_end_index\
    \ = -1;\n      |         ^~~~~~~~~~~~~~~~\n/tmp/tmpewg5aa7i.cpp:25:9: error: redeclaration\
    \ of \u2018int vowels_end_index\u2019\n   25 |     int vowels_end_index = -1;\n\
    \      |         ^~~~~~~~~~~~~~~~\n/tmp/tmpewg5aa7i.cpp:20:9: note: \u2018int\
    \ vowels_end_index\u2019 previously declared here\n   20 |     int vowels_end_index\
    \ = -1;\n      |         ^~~~~~~~~~~~~~~~\n/tmp/tmpewg5aa7i.cpp:26:9: error: redeclaration\
    \ of \u2018int vowels_end_index\u2019\n   26 |     int vowels_end_index = -1;\n\
    \      |         ^~~~~~~~~~~~~~~~\n/tmp/tmpewg5aa7i.cpp:20:9: note: \u2018int\
    \ vowels_end_index\u2019 previously declared here\n   20 |     int vowels_end_index\
    \ = -1;\n      |         ^~~~~~~~~~~~~~~~\n/tmp/tmpewg5aa7i.cpp:27:9: error: redeclaration\
    \ of \u2018int vowels_end_index\u2019\n   27 |     int vowels_end_index = -1;\n\
    \      |         ^~~~~~~~~~~~~~~~\n/tmp/tmpewg5aa7i.cpp:20:9: note: \u2018int\
    \ vowels_end_index\u2019 previously declared here\n   20 |     int vowels_end_index\
    \ = -1;\n      |         ^~~~~~~~~~~~~~~~\n/tmp/tmpewg5aa7i.cpp:28:9: error: redeclaration\
    \ of \u2018int vowels_end_index\u2019\n   28 |     int vowels_end_index = -1;\n\
    \      |         ^~~~~~~~~~~~~~~~\n/tmp/tmpewg5aa7i.cpp:20:9: note: \u2018int\
    \ vowels_end_index\u2019 previously declared here\n   20 |     int vowels_end_index\
    \ = -1;\n      |         ^~~~~~~~~~~~~~~~\n/tmp/tmpewg5aa7i.cpp:29:9: error: redeclaration\
    \ of \u2018int vowels_end_index\u2019\n   29 |     int vowels_end_index = -1;\n\
    \      |         ^~~~~~~~~~~~~~~~\n/tmp/tmpewg5aa7i.cpp:20:9: note: \u2018int\
    \ vowels_end_index\u2019 previously declared here\n   20 |     int vowels_end_index\
    \ = -1;\n      |         ^~~~~~~~~~~~~~~~\n/tmp/tmpewg5aa7i.cpp:30:9: error: redeclaration\
    \ of \u2018int vowels_end_index\u2019\n   30 |     int vowels_end_index = -1;\n\
    \      |         ^~~~~~~~~~~~~~~~\n/tmp/tmpewg5aa7i.cpp:20:9: note: \u2018int\
    \ vowels_end_index\u2019 previously declared here\n   20 |     int vowels_end_index\
    \ = -1;\n      |         ^~~~~~~~~~~~~~~~\n/tmp/tmpewg5aa7i.cpp:31:9: error: redeclaration\
    \ of \u2018int vowels_end_index\u2019\n   31 |     int vowels_end_index = -1;\n\
    \      |         ^~~~~~~~~~~~~~~~\n/tmp/tmpewg5aa7i.cpp:20:9: note: \u2018int\
    \ vowels_end_index\u2019 previously declared here\n   20 |     int vowels_end_index\
    \ = -1;\n      |         ^~~~~~~~~~~~~~~~\n/tmp/tmpewg5aa7i.cpp:32:9: error: redeclaration\
    \ of \u2018int vowels_end_index\u2019\n   32 |     int vowels_end_index = -1;\n\
    \      |         ^~~~~~~~~~~~~~~~\n/tmp/tmpewg5aa7i.cpp:20:9: note: \u2018int\
    \ vowels_end_index\u2019 previously declared here\n   20 |     int vowels_end_index\
    \ = -1;\n      |         ^~~~~~~~~~~~~~~~\n/tmp/tmpewg5aa7i.cpp:33:9: error: redeclaration\
    \ of \u2018int vowels_end_index\u2019\n   33 |     int vowels_end_index = -1;\n\
    \      |         ^~~~~~~~~~~~~~~~\n/tmp/tmpewg5aa7i.cpp:20:9: note: \u2018int\
    \ vowels_end_index\u2019 previously declared here\n   20 |     int vowels_end_index\
    \ = -1;\n      |         ^~~~~~~~~~~~~~~~\n/tmp/tmpewg5aa7i.cpp:34:9: error: redeclaration\
    \ of \u2018int vowels_end_index\u2019\n   34 |     int vowels_end_index = -1;\n\
    \      |         ^~~~~~~~~~~~~~~~\n/tmp/tmpewg5aa7i.cpp:20:9: note: \u2018int\
    \ vowels_end_index\u2019 previously declared here\n   20 |     int vowels_end_index\
    \ = -1;\n      |         ^~~~~~~~~~~~~~~~\n/tmp/tmpewg5aa7i.cpp:35:9: error: redeclaration\
    \ of \u2018int vowels_end_index\u2019\n   35 |     int vowels_end_index = -1;\n\
    \      |         ^~~~~~~~~~~~~~~~\n/tmp/tmpewg5aa7i.cpp:20:9: note: \u2018int\
    \ vowels_end_index\u2019 previously declared here\n   20 |     int vowels_end_index\
    \ = -1;\n      |         ^~~~~~~~~~~~~~~~\n/tmp/tmpewg5aa7i.cpp:36:9: error: redeclaration\
    \ of \u2018int vowels_end_index\u2019\n   36 |     int vowels_end_index = -1;\n\
    \      |         ^~~~~~~~~~~~~~~~\n/tmp/tmpewg5aa7i.cpp:20:9: note: \u2018int\
    \ vowels_end_index\u2019 previously declared here\n   20 |     int vowels_end_index\
    \ = -1;\n      |         ^~~~~~~~~~~~~~~~\n/tmp/tmpewg5aa7i.cpp:37:9: error: redeclaration\
    \ of \u2018int vowels_end_index\u2019\n   37 |     int vowels_end_index = -1;\n\
    \      |         ^~~~~~~~~~~~~~~~\n/tmp/tmpewg5aa7i.cpp:20:9: note: \u2018int\
    \ vowels_end_index\u2019 previously declared here\n   20 |     int vowels_end_index\
    \ = -1;\n      |         ^~~~~~~~~~~~~~~~\n/tmp/tmpewg5aa7i.cpp:38:9: error: redeclaration\
    \ of \u2018int vowels_end_index\u2019\n   38 |     int vowels_end_index = -1;\n\
    \      |         ^~~~~~~~~~~~~~~~\n/tmp/tmpewg5aa7i.cpp:20:9: note: \u2018int\
    \ vowels_end_index\u2019 previously declared here\n   20 |     int vowels_end_index\
    \ = -1;\n      |         ^~~~~~~~~~~~~~~~\n/tmp/tmpewg5aa7i.cpp:39:9: error: redeclaration\
    \ of \u2018int vowels_end_index\u2019\n   39 |     int vowels_end_index = -1;\n\
    \      |         ^~~~~~~~~~~~~~~~\n/tmp/tmpewg5aa7i.cpp:20:9: note: \u2018int\
    \ vowels_end_index\u2019 previously declared here\n   20 |     int vowels_end_index\
    \ = -1;\n      |         ^~~~~~~~~~~~~~~~\n/tmp/tmpewg5aa7i.cpp:40:9: error: redeclaration\
    \ of \u2018int vowels_end_index\u2019\n   40 |     int vowels_end_index = -1;\n\
    \      |         ^~~~~~~~~~~~~~~~\n/tmp/tmpewg5aa7i.cpp:20:9: note: \u2018int\
    \ vowels_end_index\u2019 previously declared here\n   20 |     int vowels_end_index\
    \ = -1;\n      |         ^~~~~~~~~~~~~~~~\n/tmp/tmpewg5aa7i.cpp:41:9: error: redeclaration\
    \ of \u2018int vowels_end_index\u2019\n   41 |     int vowels_end_index = -1;\n\
    \      |         ^~~~~~~~~~~~~~~~\n/tmp/tmpewg5aa7i.cpp:20:9: note: \u2018int\
    \ vowels_end_index\u2019 previously declared here\n   20 |     int vowels_end_index\
    \ = -1;\n      |         ^~~~~~~~~~~~~~~~\n/tmp/tmpewg5aa7i.cpp:42:9: error: redeclaration\
    \ of \u2018int vowels_end_index\u2019\n   42 |     int vowels_end_index = -1;\n\
    \      |         ^~~~~~~~~~~~~~~~\n/tmp/tmpewg5aa7i.cpp:20:9: note: \u2018int\
    \ vowels_end_index\u2019 previously declared here\n   20 |     int vowels_end_index\
    \ = -1;\n      |         ^~~~~~~~~~~~~~~~\n/tmp/tmpewg5aa7i.cpp:43:9: error: redeclaration\
    \ of \u2018int vowels_end_index\u2019\n   43 |     int vowels_end_index = -1;\n\
    \      |         ^~~~~~~~~~~~~~~~\n/tmp/tmpewg5aa7i.cpp:20:9: note: \u2018int\
    \ vowels_end_index\u2019 previously declared here\n   20 |     int vowels_end_index\
    \ = -1;\n      |         ^~~~~~~~~~~~~~~~\n/tmp/tmpewg5aa7i.cpp:44:9: error: redeclaration\
    \ of \u2018int vowels_end_index\u2019\n   44 |     int vowels_end_index = -1;\n\
    \      |         ^~~~~~~~~~~~~~~~\n/tmp/tmpewg5aa7i.cpp:20:9: note: \u2018int\
    \ vowels_end_index\u2019 previously declared here\n   20 |     int vowels_end_index\
    \ = -1;\n      |         ^~~~~~~~~~~~~~~~\n/tmp/tmpewg5aa7i.cpp:45:9: error: redeclaration\
    \ of \u2018int vowels_end_index\u2019\n   45 |     int vowels_end_index = -1;\n\
    \      |         ^~~~~~~~~~~~~~~~\n/tmp/tmpewg5aa7i.cpp:20:9: note: \u2018int\
    \ vowels_end_index\u2019 previously declared here\n   20 |     int vowels_end_index\
    \ = -1;\n      |         ^~~~~~~~~~~~~~~~\n/tmp/tmpewg5aa7i.cpp:46:9: error: redeclaration\
    \ of \u2018int vowels_end_index\u2019\n   46 |     int vowels_end_index = -1;\n\
    \      |         ^~~~~~~~~~~~~~~~\n/tmp/tmpewg5aa7i.cpp:20:9: note: \u2018int\
    \ vowels_end_index\u2019 previously declared here\n   20 |     int vowels_end_index\
    \ = -1;\n      |         ^~~~~~~~~~~~~~~~\n/tmp/tmpewg5aa7i.cpp:47:9: error: redeclaration\
    \ of \u2018int vowels_end_index\u2019\n   47 |     int vowels_end_index = -1;\n\
    \      |         ^~~~~~~~~~~~~~~~\n/tmp/tmpewg5aa7i.cpp:20:9: note: \u2018int\
    \ vowels_end_index\u2019 previously declared here\n   20 |     int vowels_end_index\
    \ = -1;\n      |         ^~~~~~~~~~~~~~~~\n/tmp/tmpewg5aa7i.cpp:48:9: error: redeclaration\
    \ of \u2018int vowels_end_index\u2019\n   48 |     int vowels_end_index = -1;\n\
    \      |         ^~~~~~~~~~~~~~~~\n/tmp/tmpewg5aa7i.cpp:20:9: note: \u2018int\
    \ vowels_end_index\u2019 previously declared here\n   20 |     int vowels_end_index\
    \ = -1;\n      |         ^~~~~~~~~~~~~~~~\n/tmp/tmpewg5aa7i.cpp:49:9: error: redeclaration\
    \ of \u2018int vowels_end_index\u2019\n   49 |     int vowels_end_index = -1;\n\
    \      |         ^~~~~~~~~~~~~~~~\n/tmp/tmpewg5aa7i.cpp:20:9: note: \u2018int\
    \ vowels_end_index\u2019 previously declared here\n   20 |     int vowels_end_index\
    \ = -1;\n      |         ^~~~~~~~~~~~~~~~\n/tmp/tmpewg5aa7i.cpp:50:9: error: redeclaration\
    \ of \u2018int vowels_end_index\u2019\n   50 |     int vowels_end_index = -1;\n\
    \      |         ^~~~~~~~~~~~~~~~\n/tmp/tmpewg5aa7i.cpp:20:9: note: \u2018int\
    \ vowels_end_index\u2019 previously declared here\n   20 |     int vowels_end_index\
    \ = -1;\n      |         ^~~~~~~~~~~~~~~~\n/tmp/tmpewg5aa7i.cpp:51:9: error: redeclaration\
    \ of \u2018int vowels_end_index\u2019\n   51 |     int vowels_end_index = -1;\n\
    \      |         ^~~~~~~~~~~~~~~~\n/tmp/tmpewg5aa7i.cpp:20:9: note: \u2018int\
    \ vowels_end_index\u2019 previously declared here\n   20 |     int vowels_end_index\
    \ = -1;\n      |         ^~~~~~~~~~~~~~~~\n/tmp/tmpewg5aa7i.cpp:52:9: error: redeclaration\
    \ of \u2018int vowels_end_index\u2019\n   52 |     int vowels_end_index = -1;\n\
    \      |         ^~~~~~~~~~~~~~~~\n/tmp/tmpewg5aa7i.cpp:20:9: note: \u2018int\
    \ vowels_end_index\u2019 previously declared here\n   20 |     int vowels_end_index\
    \ = -1;\n      |         ^~~~~~~~~~~~~~~~\n/tmp/tmpewg5aa7i.cpp:53:9: error: redeclaration\
    \ of \u2018int vowels_end_index\u2019\n   53 |     int vowels_end_index = -1;\n\
    \      |         ^~~~~~~~~~~~~~~~\n/tmp/tmpewg5aa7i.cpp:20:9: note: \u2018int\
    \ vowels_end_index\u2019 previously declared here\n   20 |     int vowels_end_index\
    \ = -1;\n      |         ^~~~~~~~~~~~~~~~\n/tmp/tmpewg5aa7i.cpp:54:9: error: redeclaration\
    \ of \u2018int vowels_end_index\u2019\n   54 |     int vowels_end_index = -1;\n\
    \      |         ^~~~~~~~~~~~~~~~\n/tmp/tmpewg5aa7i.cpp:20:9: note: \u2018int\
    \ vowels_end_index\u2019 previously declared here\n   20 |     int vowels_end_index\
    \ = -1;\n      |         ^~~~~~~~~~~~~~~~\n/tmp/tmpewg5aa7i.cpp:55:9: error: redeclaration\
    \ of \u2018int vowels_end_index\u2019\n   55 |     int vowels_end_index = -1;\n\
    \      |         ^~~~~~~~~~~~~~~~\n/tmp/tmpewg5aa7i.cpp:20:9: note: \u2018int\
    \ vowels_end_index\u2019 previously declared here\n   20 |     int vowels_end_index\
    \ = -1;\n      |         ^~~~~~~~~~~~~~~~\n/tmp/tmpewg5aa7i.cpp:56:9: error: redeclaration\
    \ of \u2018int vowels_end_index\u2019\n   56 |     int vowels_end_index = -1;\n\
    \      |         ^~~~~~~~~~~~~~~~\n/tmp/tmpewg5aa7i.cpp:20:9: note: \u2018int\
    \ vowels_end_index\u2019 previously declared here\n   20 |     int vowels_end_index\
    \ = -1;\n      |         ^~~~~~~~~~~~~~~~\n/tmp/tmpewg5aa7i.cpp:57:9: error: redeclaration\
    \ of \u2018int vowels_end_index\u2019\n   57 |     int vowels_end_index = -1;\n\
    \      |         ^~~~~~~~~~~~~~~~\n/tmp/tmpewg5aa7i.cpp:20:9: note: \u2018int\
    \ vowels_end_index\u2019 previously declared here\n   20 |     int vowels_end_index\
    \ = -1;\n      |         ^~~~~~~~~~~~~~~~\n/tmp/tmpewg5aa7i.cpp:58:9: error: redeclaration\
    \ of \u2018int vowels_end_index\u2019\n   58 |     int vowels_end_index = -1;\n\
    \      |         ^~~~~~~~~~~~~~~~\n/tmp/tmpewg5aa7i.cpp:20:9: note: \u2018int\
    \ vowels_end_index\u2019 previously declared here\n   20 |     int vowels_end_index\
    \ = -1;\n      |         ^~~~~~~~~~~~~~~~\n/tmp/tmpewg5aa7i.cpp:59:9: error: redeclaration\
    \ of \u2018int vowels_end_index\u2019\n   59 |     int vowels_end_index = -1;\n\
    \      |         ^~~~~~~~~~~~~~~~\n/tmp/tmpewg5aa7i.cpp:20:9: note: \u2018int\
    \ vowels_end_index\u2019 previously declared here\n   20 |     int vowels_end_index\
    \ = -1;\n      |         ^~~~~~~~~~~~~~~~\n/tmp/tmpewg5aa7i.cpp:60:9: error: redeclaration\
    \ of \u2018int vowels_end_index\u2019\n   60 |     int vowels_end_index = -1;\n\
    \      |         ^~~~~~~~~~~~~~~~\n/tmp/tmpewg5aa7i.cpp:20:9: note: \u2018int\
    \ vowels_end_index\u2019 previously declared here\n   20 |     int vowels_end_index\
    \ = -1;\n      |         ^~~~~~~~~~~~~~~~\n/tmp/tmpewg5aa7i.cpp:61:9: error: redeclaration\
    \ of \u2018int vowels_end_index\u2019\n   61 |     int vowels_end_index = -1;\n\
    \      |         ^~~~~~~~~~~~~~~~\n/tmp/tmpewg5aa7i.cpp:20:9: note: \u2018int\
    \ vowels_end_index\u2019 previously declared here\n   20 |     int vowels_end_index\
    \ = -1;\n      |         ^~~~~~~~~~~~~~~~\n/tmp/tmpewg5aa7i.cpp:62:9: error: redeclaration\
    \ of \u2018int vowels_end_index\u2019\n   62 |     int vowels_end_index = -1;\n\
    \      |         ^~~~~~~~~~~~~~~~\n/tmp/tmpewg5aa7i.cpp:20:9: note: \u2018int\
    \ vowels_end_index\u2019 previously declared here\n   20 |     int vowels_end_index\
    \ = -1;\n      |         ^~~~~~~~~~~~~~~~\n/tmp/tmpewg5aa7i.cpp:63:9: error: redeclaration\
    \ of \u2018int vowels_end_index\u2019\n   63 |     int vowels_end_index = -1;\n\
    \      |         ^~~~~~~~~~~~~~~~\n/tmp/tmpewg5aa7i.cpp:20:9: note: \u2018int\
    \ vowels_end_index\u2019 previously declared here\n   20 |     int vowels_end_index\
    \ = -1;\n      |         ^~~~~~~~~~~~~~~~\n/tmp/tmpewg5aa7i.cpp:64:9: error: redeclaration\
    \ of \u2018int vowels_end_index\u2019\n   64 |     int vowels_end_index = -1;\n\
    \      |         ^~~~~~~~~~~~~~~~\n/tmp/tmpewg5aa7i.cpp:20:9: note: \u2018int\
    \ vowels_end_index\u2019 previously declared here\n   20 |     int vowels_end_index\
    \ = -1;\n      |         ^~~~~~~~~~~~~~~~\n/tmp/tmpewg5aa7i.cpp:65:9: error: redeclaration\
    \ of \u2018int vowels_end_index\u2019\n   65 |     int vowels_end_index = -1;\n\
    \      |         ^~~~~~~~~~~~~~~~\n/tmp/tmpewg5aa7i.cpp:20:9: note: \u2018int\
    \ vowels_end_index\u2019 previously declared here\n   20 |     int vowels_end_index\
    \ = -1;\n      |         ^~~~~~~~~~~~~~~~\n/tmp/tmpewg5aa7i.cpp:66:9: error: redeclaration\
    \ of \u2018int vowels_end_index\u2019\n   66 |     int vowels_end_index = -1;\n\
    \      |         ^~~~~~~~~~~~~~~~\n/tmp/tmpewg5aa7i.cpp:20:9: note: \u2018int\
    \ vowels_end_index\u2019 previously declared here\n   20 |     int vowels_end_index\
    \ = -1;\n      |         ^~~~~~~~~~~~~~~~\n/tmp/tmpewg5aa7i.cpp:67:9: error: redeclaration\
    \ of \u2018int vowels_end_index\u2019\n   67 |     int vowels_end_index = -1;\n\
    \      |         ^~~~~~~~~~~~~~~~\n/tmp/tmpewg5aa7i.cpp:20:9: note: \u2018int\
    \ vowels_end_index\u2019 previously declared here\n   20 |     int vowels_end_index\
    \ = -1;\n      |         ^~~~~~~~~~~~~~~~\n/tmp/tmpewg5aa7i.cpp:68:9: error: redeclaration\
    \ of \u2018int vowels_end_index\u2019\n   68 |     int vowels_end_index = -1;\n\
    \      |         ^~~~~~~~~~~~~~~~\n/tmp/tmpewg5aa7i.cpp:20:9: note: \u2018int\
    \ vowels_end_index\u2019 previously declared here\n   20 |     int vowels_end_index\
    \ = -1;\n      |         ^~~~~~~~~~~~~~~~\n/tmp/tmpewg5aa7i.cpp:69:9: error: redeclaration\
    \ of \u2018int vowels_end_index\u2019\n   69 |     int vowels_end_index = -1;\n\
    \      |         ^~~~~~~~~~~~~~~~\n/tmp/tmpewg5aa7i.cpp:20:9: note: \u2018int\
    \ vowels_end_index\u2019 previously declared here\n   20 |     int vowels_end_index\
    \ = -1;\n      |         ^~~~~~~~~~~~~~~~\n/tmp/tmpewg5aa7i.cpp:70:9: error: redeclaration\
    \ of \u2018int vowels_end_index\u2019\n   70 |     int vowels_end_index = -1;\n\
    \      |         ^~~~~~~~~~~~~~~~\n/tmp/tmpewg5aa7i.cpp:20:9: note: \u2018int\
    \ vowels_end_index\u2019 previously declared here\n   20 |     int vowels_end_index\
    \ = -1;\n      |         ^~~~~~~~~~~~~~~~\n/tmp/tmpewg5aa7i.cpp:71:9: error: redeclaration\
    \ of \u2018int vowels_end_index\u2019\n   71 |     int vowels_end_index = -1;\n\
    \      |         ^~~~~~~~~~~~~~~~\n/tmp/tmpewg5aa7i.cpp:20:9: note: \u2018int\
    \ vowels_end_index\u2019 previously declared here\n   20 |     int vowels_end_index\
    \ = -1;\n      |         ^~~~~~~~~~~~~~~~\n/tmp/tmpewg5aa7i.cpp:72:9: error: redeclaration\
    \ of \u2018int vowels_end_index\u2019\n   72 |     int vowels_end_index = -1;\n\
    \      |         ^~~~~~~~~~~~~~~~\n/tmp/tmpewg5aa7i.cpp:20:9: note: \u2018int\
    \ vowels_end_index\u2019 previously declared here\n   20 |     int vowels_end_index\
    \ = -1;\n      |         ^~~~~~~~~~~~~~~~\n/tmp/tmpewg5aa7i.cpp:73:9: error: redeclaration\
    \ of \u2018int vowels_end_index\u2019\n   73 |     int vowels_end_index = -1;\n\
    \      |         ^~~~~~~~~~~~~~~~\n/tmp/tmpewg5aa7i.cpp:20:9: note: \u2018int\
    \ vowels_end_index\u2019 previously declared here\n   20 |     int vowels_end_index\
    \ = -1;\n      |         ^~~~~~~~~~~~~~~~\n/tmp/tmpewg5aa7i.cpp:74:9: error: redeclaration\
    \ of \u2018int vowels_end_index\u2019\n   74 |     int vowels_end_index = -1;\n\
    \      |         ^~~~~~~~~~~~~~~~\n/tmp/tmpewg5aa7i.cpp:20:9: note: \u2018int\
    \ vowels_end_index\u2019 previously declared here\n   20 |     int vowels_end_index\
    \ = -1;\n      |         ^~~~~~~~~~~~~~~~\n/tmp/tmpewg5aa7i.cpp:75:9: error: redeclaration\
    \ of \u2018int vowels_end_index\u2019\n   75 |     int vowels_end_index = -1;\n\
    \      |         ^~~~~~~~~~~~~~~~\n/tmp/tmpewg5aa7i.cpp:20:9: note: \u2018int\
    \ vowels_end_index\u2019 previously declared here\n   20 |     int vowels_end_index\
    \ = -1;\n      |         ^~~~~~~~~~~~~~~~\n/tmp/tmpewg5aa7i.cpp:76:9: error: redeclaration\
    \ of \u2018int vowels_end_index\u2019\n   76 |     int vowels_end_index = -1;\n\
    \      |         ^~~~~~~~~~~~~~~~\n/tmp/tmpewg5aa7i.cpp:20:9: note: \u2018int\
    \ vowels_end_index\u2019 previously declared here\n   20 |     int vowels_end_index\
    \ = -1;\n      |         ^~~~~~~~~~~~~~~~\n/tmp/tmpewg5aa7i.cpp:77:9: error: redeclaration\
    \ of \u2018int vowels_end_index\u2019\n   77 |     int vowels_end_index = -1;\n\
    \      |         ^~~~~~~~~~~~~~~~\n/tmp/tmpewg5aa7i.cpp:20:9: note: \u2018int\
    \ vowels_end_index\u2019 previously declared here\n   20 |     int vowels_end_index\
    \ = -1;\n      |         ^~~~~~~~~~~~~~~~\n/tmp/tmpewg5aa7i.cpp:78:9: error: redeclaration\
    \ of \u2018int vowels_end_index\u2019\n   78 |     int vowels_end_index = -1;\n\
    \      |         ^~~~~~~~~~~~~~~~\n/tmp/tmpewg5aa7i.cpp:20:9: note: \u2018int\
    \ vowels_end_index\u2019 previously declared here\n   20 |     int vowels_end_index\
    \ = -1;\n      |         ^~~~~~~~~~~~~~~~\n/tmp/tmpewg5aa7i.cpp:79:9: error: redeclaration\
    \ of \u2018int vowels_end_index\u2019\n   79 |     int vowels_end_index = -1;\n\
    \      |         ^~~~~~~~~~~~~~~~\n/tmp/tmpewg5aa7i.cpp:20:9: note: \u2018int\
    \ vowels_end_index\u2019 previously declared here\n   20 |     int vowels_end_index\
    \ = -1;\n      |         ^~~~~~~~~~~~~~~~\n/tmp/tmpewg5aa7i.cpp:80:9: error: redeclaration\
    \ of \u2018int vowels_end_index\u2019\n   80 |     int vowels_end_index = -1;\n\
    \      |         ^~~~~~~~~~~~~~~~\n/tmp/tmpewg5aa7i.cpp:20:9: note: \u2018int\
    \ vowels_end_index\u2019 previously declared here\n   20 |     int vowels_end_index\
    \ = -1;\n      |         ^~~~~~~~~~~~~~~~\n/tmp/tmpewg5aa7i.cpp:81:9: error: redeclaration\
    \ of \u2018int vowels_end_index\u2019\n   81 |     int vowels_end_index = -1;\n\
    \      |         ^~~~~~~~~~~~~~~~\n/tmp/tmpewg5aa7i.cpp:20:9: note: \u2018int\
    \ vowels_end_index\u2019 previously declared here\n   20 |     int vowels_end_index\
    \ = -1;\n      |         ^~~~~~~~~~~~~~~~\n/tmp/tmpewg5aa7i.cpp:82:9: error: redeclaration\
    \ of \u2018int vowels_end_index\u2019\n   82 |     int vowels_end_index = -1;\n\
    \      |         ^~~~~~~~~~~~~~~~\n/tmp/tmpewg5aa7i.cpp:20:9: note: \u2018int\
    \ vowels_end_index\u2019 previously declared here\n   20 |     int vowels_end_index\
    \ = -1;\n      |         ^~~~~~~~~~~~~~~~\n/tmp/tmpewg5aa7i.cpp:83:9: error: redeclaration\
    \ of \u2018int vowels_end_index\u2019\n   83 |     int vowels_end_index = -1;\n\
    \      |         ^~~~~~~~~~~~~~~~\n/tmp/tmpewg5aa7i.cpp:20:9: note: \u2018int\
    \ vowels_end_index\u2019 previously declared here\n   20 |     int vowels_end_index\
    \ = -1;\n      |         ^~~~~~~~~~~~~~~~\n/tmp/tmpewg5aa7i.cpp:84:9: error: redeclaration\
    \ of \u2018int vowels_end_index\u2019\n   84 |     int vowels_end_index = -1;\n\
    \      |         ^~~~~~~~~~~~~~~~\n/tmp/tmpewg5aa7i.cpp:20:9: note: \u2018int\
    \ vowels_end_index\u2019 previously declared here\n   20 |     int vowels_end_index\
    \ = -1;\n      |         ^~~~~~~~~~~~~~~~\n/tmp/tmpewg5aa7i.cpp:86:1: error: expected\
    \ initializer before \u2018}\u2019 token\n   86 | }\n      | ^\n/tmp/tmpewg5aa7i.cpp:86:1:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// get_closest_vowel(\"yogurt\") ==> \"u\"\
    \n// get_closest_vowel(\"FULL\") ==> \"U\"\n// get_closest_vowel(\"quick\") ==>\
    \ \"\"\n// get_closest_vowel(\"ab\") ==> \"\"\nstd::string get_closest_vowel(std::string\
    \ word) {\n    std::string vowels = \"AEIOUaeiou\";\n    std::string vowels_reverse\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_reverse = \"AEIOUaeiou\";\n\
    \    std::string vowels_reverse_back = \"AEIOUaeiou\";\n    std::string vowels_reverse_back_reverse\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_back_reverse_back = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse_back_reverse_back_reverse = \"AEIOUaeiou\";\n\
    \    std::string vowels_reverse_back_reverse_back_reverse_back = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse = \"\
    AEIOUaeiou\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse\
    \ = \"AEIO\n}\nint main() {\n    auto candidate = get_closest_vowel;\n    assert(candidate((\"\
    yogurt\")) == (\"u\"));\n    assert(candidate((\"full\")) == (\"u\"));\n    assert(candidate((\"\
    easy\")) == (\"\"));\n    assert(candidate((\"eAsy\")) == (\"\"));\n    assert(candidate((\"\
    ali\")) == (\"\"));\n    assert(candidate((\"bad\")) == (\"a\"));\n    assert(candidate((\"\
    most\")) == (\"o\"));\n    assert(candidate((\"ab\")) == (\"\"));\n    assert(candidate((\"\
    ba\")) == (\"\"));\n    assert(candidate((\"quick\")) == (\"\"));\n    assert(candidate((\"\
    anime\")) == (\"i\"));\n    assert(candidate((\"Asia\")) == (\"\"));\n    assert(candidate((\"\
    Above\")) == (\"o\"));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpz8rm4a9m.cpp:34:138: warning: missing terminating \" character\n\
    \   34 |     std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse\
    \ = \"AEIO\n      |                                                          \
    \                                                                            \
    \    ^\n/tmp/tmpz8rm4a9m.cpp:34:138: error: missing terminating \" character\n\
    \   34 |     std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse\
    \ = \"AEIO\n      |                                                          \
    \                                                                            \
    \    ^~~~~\n/tmp/tmpz8rm4a9m.cpp: In function \u2018std::string get_closest_vowel(std::string)\u2019\
    :\n/tmp/tmpz8rm4a9m.cpp:32:17: error: redeclaration of \u2018std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\u2019\
    \n   32 |     std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\
    \ = \"AEIOUaeiou\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpz8rm4a9m.cpp:31:17: note: \u2018std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\u2019\
    \ previously declared here\n   31 |     std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\
    \ = \"AEIOUaeiou\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpz8rm4a9m.cpp:33:17: error: redeclaration of \u2018std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\u2019\
    \n   33 |     std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\
    \ = \"AEIOUaeiou\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpz8rm4a9m.cpp:31:17: note: \u2018std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\u2019\
    \ previously declared here\n   31 |     std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\
    \ = \"AEIOUaeiou\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpz8rm4a9m.cpp:35:1: error: expected primary-expression before \u2018}\u2019\
    \ token\n   35 | }\n      | ^\n/tmp/tmpz8rm4a9m.cpp:35:1: error: expected \u2018\
    ,\u2019 or \u2018;\u2019 before \u2018}\u2019 token\n/tmp/tmpz8rm4a9m.cpp:35:1:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// get_closest_vowel(\"yogurt\") ==> \"u\"\
    \n// get_closest_vowel(\"FULL\") ==> \"U\"\n// get_closest_vowel(\"quick\") ==>\
    \ \"\"\n// get_closest_vowel(\"ab\") ==> \"\"\nstd::string get_closest_vowel(std::string\
    \ word) {\n    std::string vowels = \"AEIOUaeiou\";\n    std::string vowels_reverse\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse2 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse3 = \"AEIOUaeiou\";\n    std::string vowels_reverse4 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse5 = \"AEIOUaeiou\";\n    std::string vowels_reverse6\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse7 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse8 = \"AEIOUaeiou\";\n    std::string vowels_reverse9 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse10 = \"AEIOUaeiou\";\n    std::string vowels_reverse11\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse12 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse13 = \"AEIOUaeiou\";\n    std::string vowels_reverse14 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse15 = \"AEIOUaeiou\";\n    std::string vowels_reverse16\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse17 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse18 = \"AEIOUaeiou\";\n    std::string vowels_reverse19 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse20 = \"AEIOUaeiou\";\n    std::string vowels_reverse21\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse22 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse23 = \"AEIOUaeiou\";\n    std::string vowels_reverse24 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse25 = \"AEIOUaeiou\";\n    std::string vowels_reverse26\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse27 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse28 = \"AEIOUaeiou\";\n    std::string vowels_reverse29 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse30 = \"AEIOUaeiou\";\n    std::string vowels_reverse31\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse32 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse33 = \"AEIOUaeiou\";\n    std::string vowels_reverse34 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse35 = \"AEIOUaeiou\";\n    std::string vowels_reverse36\
    \ = \"AEIOU\n}\nint main() {\n    auto candidate = get_closest_vowel;\n    assert(candidate((\"\
    yogurt\")) == (\"u\"));\n    assert(candidate((\"full\")) == (\"u\"));\n    assert(candidate((\"\
    easy\")) == (\"\"));\n    assert(candidate((\"eAsy\")) == (\"\"));\n    assert(candidate((\"\
    ali\")) == (\"\"));\n    assert(candidate((\"bad\")) == (\"a\"));\n    assert(candidate((\"\
    most\")) == (\"o\"));\n    assert(candidate((\"ab\")) == (\"\"));\n    assert(candidate((\"\
    ba\")) == (\"\"));\n    assert(candidate((\"quick\")) == (\"\"));\n    assert(candidate((\"\
    anime\")) == (\"i\"));\n    assert(candidate((\"Asia\")) == (\"\"));\n    assert(candidate((\"\
    Above\")) == (\"o\"));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpn6b6jn07.cpp:50:36: warning: missing terminating \" character\n\
    \   50 |     std::string vowels_reverse36 = \"AEIOU\n      |                 \
    \                   ^\n/tmp/tmpn6b6jn07.cpp:50:36: error: missing terminating\
    \ \" character\n   50 |     std::string vowels_reverse36 = \"AEIOU\n      |  \
    \                                  ^~~~~~\n/tmp/tmpn6b6jn07.cpp: In function \u2018\
    std::string get_closest_vowel(std::string)\u2019:\n/tmp/tmpn6b6jn07.cpp:51:1:\
    \ error: expected primary-expression before \u2018}\u2019 token\n   51 | }\n \
    \     | ^\n/tmp/tmpn6b6jn07.cpp:51:1: error: expected \u2018,\u2019 or \u2018\
    ;\u2019 before \u2018}\u2019 token\n/tmp/tmpn6b6jn07.cpp:51:1: warning: no return\
    \ statement in function returning non-void [-Wreturn-type]\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// get_closest_vowel(\"yogurt\") ==> \"u\"\
    \n// get_closest_vowel(\"FULL\") ==> \"U\"\n// get_closest_vowel(\"quick\") ==>\
    \ \"\"\n// get_closest_vowel(\"ab\") ==> \"\"\nstd::string get_closest_vowel(std::string\
    \ word) {\n    std::string vowels = \"AEIOUaeiou\";\n    std::string vowels_reverse\
    \ = vowels.substr(0, vowels.size() - 1);\n    std::string vowels_reverse2 = vowels_reverse.substr(0,\
    \ vowels_reverse.size() - 1);\n    std::string vowels_reverse3 = vowels_reverse2.substr(0,\
    \ vowels_reverse2.size() - 1);\n    std::string vowels_reverse4 = vowels_reverse3.substr(0,\
    \ vowels_reverse3.size() - 1);\n    std::string vowels_reverse5 = vowels_reverse4.substr(0,\
    \ vowels_reverse4.size() - 1);\n    std::string vowels_reverse6 = vowels_reverse5.substr(0,\
    \ vowels_reverse5.size() - 1);\n    std::string vowels_reverse7 = vowels_reverse6.substr(0,\
    \ vowels_reverse6.size() - 1);\n    std::string vowels_reverse8 = vowels_reverse7.substr(0,\
    \ vowels_reverse7.size() - 1);\n    std::string vowels_reverse9 = vowels_reverse8.substr(0,\
    \ vowels_reverse8.size() - 1);\n    std::string vowels_reverse10 = vowels_reverse9.substr(0,\
    \ vowels_reverse9.size() - 1);\n    std::string vowels_reverse11 = vowels_reverse10.substr(0,\
    \ vowels_reverse10.size() - 1);\n    std::string vowels_reverse12 = vowels_reverse11.substr(0,\
    \ vowels_reverse11.size() - 1);\n    std::string vowels_reverse13 = vowels_reverse12.substr(0,\
    \ vowels_reverse12.size() - 1);\n    std::string vowels_reverse14 = vowels_reverse13.substr(0,\
    \ vowels_reverse13.size() - 1);\n    std::string vowels_reverse15 = vowels_reverse14.substr(0,\
    \ vowels_reverse14.size() - 1);\n    std::string vowels_reverse16 = vowels_reverse15.substr(0,\
    \ vowels_reverse15.size() - 1);\n    std::string vowels_reverse17 = vowels_reverse16.substr(0,\
    \ vowels_reverse16.size() - 1);\n    std::string vowels_reverse18 = vowels_reverse17.substr(0,\
    \ vowels_reverse17.size() - 1);\n    std::string vowels_reverse19 = vowels_reverse18.substr(0,\
    \ vowels_reverse18.size() - 1);\n    std::string vowels_reverse20 = vowels_reverse19.substr(0,\
    \ vowels_reverse19.size() - 1);\n    std::string vowels_reverse21 = vowels_reverse20.substr(0,\
    \ vowels_reverse20.size() - 1);\n    std::string vowels_reverse22 = vowels_reverse21.substr(0,\
    \ vowels_reverse21.size() - 1);\n    std::string vowels_reverse23 = vowels_reverse22.substr(0,\
    \ vowels_reverse22.size() - 1);\n    std::string vowels_reverse24 = vowels_reverse23.substr(0,\
    \ vowels_reverse23.size() - 1);\n    std::string vowels_reverse25 = vowels_reverse24.substr(0,\
    \ vowels_\n}\nint main() {\n    auto candidate = get_closest_vowel;\n    assert(candidate((\"\
    yogurt\")) == (\"u\"));\n    assert(candidate((\"full\")) == (\"u\"));\n    assert(candidate((\"\
    easy\")) == (\"\"));\n    assert(candidate((\"eAsy\")) == (\"\"));\n    assert(candidate((\"\
    ali\")) == (\"\"));\n    assert(candidate((\"bad\")) == (\"a\"));\n    assert(candidate((\"\
    most\")) == (\"o\"));\n    assert(candidate((\"ab\")) == (\"\"));\n    assert(candidate((\"\
    ba\")) == (\"\"));\n    assert(candidate((\"quick\")) == (\"\"));\n    assert(candidate((\"\
    anime\")) == (\"i\"));\n    assert(candidate((\"Asia\")) == (\"\"));\n    assert(candidate((\"\
    Above\")) == (\"o\"));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpqrzvyn32.cpp: In function \u2018std::string get_closest_vowel(std::string)\u2019\
    :\n/tmp/tmpqrzvyn32.cpp:39:63: error: \u2018vowels_\u2019 was not declared in\
    \ this scope; did you mean \u2018vowels\u2019?\n   39 |     std::string vowels_reverse25\
    \ = vowels_reverse24.substr(0, vowels_\n      |                              \
    \                                 ^~~~~~~\n      |                           \
    \                                    vowels\n/tmp/tmpqrzvyn32.cpp:40:1: error:\
    \ expected \u2018,\u2019 or \u2018;\u2019 before \u2018}\u2019 token\n   40 |\
    \ }\n      | ^\n/tmp/tmpqrzvyn32.cpp:40:1: warning: no return statement in function\
    \ returning non-void [-Wreturn-type]\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// get_closest_vowel(\"yogurt\") ==> \"u\"\
    \n// get_closest_vowel(\"FULL\") ==> \"U\"\n// get_closest_vowel(\"quick\") ==>\
    \ \"\"\n// get_closest_vowel(\"ab\") ==> \"\"\nstd::string get_closest_vowel(std::string\
    \ word) {\n    std::string vowels = \"AEIOUaeiou\";\n    std::string vowels_reverse\
    \ = vowels.substr(0, vowels.size() - 1);\n    std::string vowels_reverse2 = vowels.substr(0,\
    \ vowels.size() - 2);\n    std::string vowels_reverse3 = vowels.substr(0, vowels.size()\
    \ - 3);\n    std::string vowels_reverse4 = vowels.substr(0, vowels.size() - 4);\n\
    \    std::string vowels_reverse5 = vowels.substr(0, vowels.size() - 5);\n    std::string\
    \ vowels_reverse6 = vowels.substr(0, vowels.size() - 6);\n    std::string vowels_reverse7\
    \ = vowels.substr(0, vowels.size() - 7);\n    std::string vowels_reverse8 = vowels.substr(0,\
    \ vowels.size() - 8);\n    std::string vowels_reverse9 = vowels.substr(0, vowels.size()\
    \ - 9);\n    std::string vowels_reverse10 = vowels.substr(0, vowels.size() - 10);\n\
    \    std::string vowels_reverse11 = vowels.substr(0, vowels.size() - 11);\n  \
    \  std::string vowels_reverse12 = vowels.substr(0, vowels.size() - 12);\n    std::string\
    \ vowels_reverse13 = vowels.substr(0, vowels.size() - 13);\n    std::string vowels_reverse14\
    \ = vowels.substr(0, vowels.size() - 14);\n    std::string vowels_reverse15 =\
    \ vowels.substr(0, vowels.size() - 15);\n    std::string vowels_reverse16 = vowels.substr(0,\
    \ vowels.size() - 16);\n    std::string vowels_reverse17 = vowels.substr(0, vowels.size()\
    \ - 17);\n    std::string vowels_reverse18 = vowels.substr(0, vowels.size() -\
    \ 18);\n    std::string vowels_reverse19 = vowels.substr(0, vowels.size() - 19);\n\
    \    std::string vowels_reverse20 = vowels.substr(0, vowels.size() - 20);\n  \
    \  std::string vowels_reverse21 = vowels.substr(0, vowels.size() - 21);\n    std::string\
    \ vowels_reverse22 = vowels.substr(0, vowels.size() - 22);\n    std::string vowels_reverse23\
    \ = vowels.substr(0, vowels.size() - 23);\n    std::string vowels_reverse24 =\
    \ vowels.substr(0, vowels.size() - 24);\n    std::string vowels_reverse25 = vowels.substr(0,\
    \ vowels.size() - 25);\n    std::string vowels_reverse26 = vowels.substr(0, vowels.size()\
    \ - 26);\n    std::string vowels_reverse27 = vowels.substr(0, vowels.size() -\
    \ 27);\n    std::string vowels_reverse28 = vowels.substr(0, vowels.size() - 28);\n\
    \    std::string vowels_reverse29 = vowels.substr(0, vowels.size() - 29);\n  \
    \  std::string vowels_reverse30 = vowels.substr(0, vowels.size() - 30);\n    std::string\
    \ vowels_reverse31 = vowels.substr(0, vowels.size() - 31);\n    std::string vowels_\n\
    }\nint main() {\n    auto candidate = get_closest_vowel;\n    assert(candidate((\"\
    yogurt\")) == (\"u\"));\n    assert(candidate((\"full\")) == (\"u\"));\n    assert(candidate((\"\
    easy\")) == (\"\"));\n    assert(candidate((\"eAsy\")) == (\"\"));\n    assert(candidate((\"\
    ali\")) == (\"\"));\n    assert(candidate((\"bad\")) == (\"a\"));\n    assert(candidate((\"\
    most\")) == (\"o\"));\n    assert(candidate((\"ab\")) == (\"\"));\n    assert(candidate((\"\
    ba\")) == (\"\"));\n    assert(candidate((\"quick\")) == (\"\"));\n    assert(candidate((\"\
    anime\")) == (\"i\"));\n    assert(candidate((\"Asia\")) == (\"\"));\n    assert(candidate((\"\
    Above\")) == (\"o\"));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp25x6x_ui.cpp: In function \u2018std::string get_closest_vowel(std::string)\u2019\
    :\n/tmp/tmp25x6x_ui.cpp:47:1: error: expected initializer before \u2018}\u2019\
    \ token\n   47 | }\n      | ^\n/tmp/tmp25x6x_ui.cpp:47:1: warning: no return statement\
    \ in function returning non-void [-Wreturn-type]\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// get_closest_vowel(\"yogurt\") ==> \"u\"\
    \n// get_closest_vowel(\"FULL\") ==> \"U\"\n// get_closest_vowel(\"quick\") ==>\
    \ \"\"\n// get_closest_vowel(\"ab\") ==> \"\"\nstd::string get_closest_vowel(std::string\
    \ word) {\n    int n = word.size();\n    int vowel_count = 0;\n    int consonant_count\
    \ = 0;\n    std::string vowels = \"aeiouAEIOU\";\n    std::string consonants =\
    \ \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\";\n    for (int i = 0; i < n;\
    \ i++) {\n        if (word[i] == vowels[vowel_count]) {\n            vowel_count++;\n\
    \        }\n        if (word[i] == consonants[consonant_count]) {\n          \
    \  consonant_count++;\n        }\n        if (vowel_count == vowels.size() &&\
    \ consonant_count == consonants.size()) {\n            return word[i];\n     \
    \   }\n    }\n    return \"\";\n}\nint main() {\n    auto candidate = get_closest_vowel;\n\
    \    assert(candidate((\"yogurt\")) == (\"u\"));\n    assert(candidate((\"full\"\
    )) == (\"u\"));\n    assert(candidate((\"easy\")) == (\"\"));\n    assert(candidate((\"\
    eAsy\")) == (\"\"));\n    assert(candidate((\"ali\")) == (\"\"));\n    assert(candidate((\"\
    bad\")) == (\"a\"));\n    assert(candidate((\"most\")) == (\"o\"));\n    assert(candidate((\"\
    ab\")) == (\"\"));\n    assert(candidate((\"ba\")) == (\"\"));\n    assert(candidate((\"\
    quick\")) == (\"\"));\n    assert(candidate((\"anime\")) == (\"i\"));\n    assert(candidate((\"\
    Asia\")) == (\"\"));\n    assert(candidate((\"Above\")) == (\"o\"));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp7relxy7u.cpp: In function \u2018std::string get_closest_vowel(std::string)\u2019\
    :\n/tmp/tmp7relxy7u.cpp:27:26: error: could not convert \u2018word.std::__cxx11::basic_string<char>::operator[](((std::__cxx11::basic_string<char>::size_type)i))\u2019\
    \ from \u2018__gnu_cxx::__alloc_traits<std::allocator<char>, char>::value_type\u2019\
    \ {aka \u2018char\u2019} to \u2018std::string\u2019 {aka \u2018std::__cxx11::basic_string<char>\u2019\
    }\n   27 |             return word[i];\n      |                          ^\n \
    \     |                          |\n      |                          __gnu_cxx::__alloc_traits<std::allocator<char>,\
    \ char>::value_type {aka char}\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// get_closest_vowel(\"yogurt\") ==> \"u\"\
    \n// get_closest_vowel(\"FULL\") ==> \"U\"\n// get_closest_vowel(\"quick\") ==>\
    \ \"\"\n// get_closest_vowel(\"ab\") ==> \"\"\nstd::string get_closest_vowel(std::string\
    \ word) {\n    std::string vowels = \"AEIOUaeiou\";\n    std::string vowels_reverse\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse2 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse3 = \"AEIOUaeiou\";\n    std::string vowels_reverse4 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse5 = \"AEIOUaeiou\";\n    std::string vowels_reverse6\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse7 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse8 = \"AEIOUaeiou\";\n    std::string vowels_reverse9 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse10 = \"AEIOUaeiou\";\n    std::string vowels_reverse11\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse12 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse13 = \"AEIOUaeiou\";\n    std::string vowels_reverse14 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse15 = \"AEIOUaeiou\";\n    std::string vowels_reverse16\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse17 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse18 = \"AEIOUaeiou\";\n    std::string vowels_reverse19 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse20 = \"AEIOUaeiou\";\n    std::string vowels_reverse21\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse22 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse23 = \"AEIOUaeiou\";\n    std::string vowels_reverse24 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse25 = \"AEIOUaeiou\";\n    std::string vowels_reverse26\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse27 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse28 = \"AEIOUaeiou\";\n    std::string vowels_reverse29 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse30 = \"AEIOUaeiou\";\n    std::string vowels_reverse31\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse32 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse33 = \"AEIOUaeiou\";\n    std::string vowels_reverse34 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse35 = \"AEIOUaeiou\";\n    std::string vowels_reverse36\
    \ = \"AEIOU\n}\nint main() {\n    auto candidate = get_closest_vowel;\n    assert(candidate((\"\
    yogurt\")) == (\"u\"));\n    assert(candidate((\"full\")) == (\"u\"));\n    assert(candidate((\"\
    easy\")) == (\"\"));\n    assert(candidate((\"eAsy\")) == (\"\"));\n    assert(candidate((\"\
    ali\")) == (\"\"));\n    assert(candidate((\"bad\")) == (\"a\"));\n    assert(candidate((\"\
    most\")) == (\"o\"));\n    assert(candidate((\"ab\")) == (\"\"));\n    assert(candidate((\"\
    ba\")) == (\"\"));\n    assert(candidate((\"quick\")) == (\"\"));\n    assert(candidate((\"\
    anime\")) == (\"i\"));\n    assert(candidate((\"Asia\")) == (\"\"));\n    assert(candidate((\"\
    Above\")) == (\"o\"));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpr_2g8gbz.cpp:50:36: warning: missing terminating \" character\n\
    \   50 |     std::string vowels_reverse36 = \"AEIOU\n      |                 \
    \                   ^\n/tmp/tmpr_2g8gbz.cpp:50:36: error: missing terminating\
    \ \" character\n   50 |     std::string vowels_reverse36 = \"AEIOU\n      |  \
    \                                  ^~~~~~\n/tmp/tmpr_2g8gbz.cpp: In function \u2018\
    std::string get_closest_vowel(std::string)\u2019:\n/tmp/tmpr_2g8gbz.cpp:51:1:\
    \ error: expected primary-expression before \u2018}\u2019 token\n   51 | }\n \
    \     | ^\n/tmp/tmpr_2g8gbz.cpp:51:1: error: expected \u2018,\u2019 or \u2018\
    ;\u2019 before \u2018}\u2019 token\n/tmp/tmpr_2g8gbz.cpp:51:1: warning: no return\
    \ statement in function returning non-void [-Wreturn-type]\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// get_closest_vowel(\"yogurt\") ==> \"u\"\
    \n// get_closest_vowel(\"FULL\") ==> \"U\"\n// get_closest_vowel(\"quick\") ==>\
    \ \"\"\n// get_closest_vowel(\"ab\") ==> \"\"\nstd::string get_closest_vowel(std::string\
    \ word) {\n    std::string vowels = \"AEIOUaeiou\";\n    std::string vowels_reverse\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse2 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse3 = \"AEIOUaeiou\";\n    std::string vowels_reverse4 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse5 = \"AEIOUaeiou\";\n    std::string vowels_reverse6\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse7 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse8 = \"AEIOUaeiou\";\n    std::string vowels_reverse9 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse10 = \"AEIOUaeiou\";\n    std::string vowels_reverse11\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse12 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse13 = \"AEIOUaeiou\";\n    std::string vowels_reverse14 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse15 = \"AEIOUaeiou\";\n    std::string vowels_reverse16\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse17 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse18 = \"AEIOUaeiou\";\n    std::string vowels_reverse19 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse20 = \"AEIOUaeiou\";\n    std::string vowels_reverse21\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse22 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse23 = \"AEIOUaeiou\";\n    std::string vowels_reverse24 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse25 = \"AEIOUaeiou\";\n    std::string vowels_reverse26\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse27 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse28 = \"AEIOUaeiou\";\n    std::string vowels_reverse29 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse30 = \"AEIOUaeiou\";\n    std::string vowels_reverse31\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse32 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse33 = \"AEIOUaeiou\";\n    std::string vowels_reverse34 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse35 = \"AEIOUaeiou\";\n    std::string vowels_reverse36\
    \ = \"AEIOU\n}\nint main() {\n    auto candidate = get_closest_vowel;\n    assert(candidate((\"\
    yogurt\")) == (\"u\"));\n    assert(candidate((\"full\")) == (\"u\"));\n    assert(candidate((\"\
    easy\")) == (\"\"));\n    assert(candidate((\"eAsy\")) == (\"\"));\n    assert(candidate((\"\
    ali\")) == (\"\"));\n    assert(candidate((\"bad\")) == (\"a\"));\n    assert(candidate((\"\
    most\")) == (\"o\"));\n    assert(candidate((\"ab\")) == (\"\"));\n    assert(candidate((\"\
    ba\")) == (\"\"));\n    assert(candidate((\"quick\")) == (\"\"));\n    assert(candidate((\"\
    anime\")) == (\"i\"));\n    assert(candidate((\"Asia\")) == (\"\"));\n    assert(candidate((\"\
    Above\")) == (\"o\"));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpqcthk7cy.cpp:50:36: warning: missing terminating \" character\n\
    \   50 |     std::string vowels_reverse36 = \"AEIOU\n      |                 \
    \                   ^\n/tmp/tmpqcthk7cy.cpp:50:36: error: missing terminating\
    \ \" character\n   50 |     std::string vowels_reverse36 = \"AEIOU\n      |  \
    \                                  ^~~~~~\n/tmp/tmpqcthk7cy.cpp: In function \u2018\
    std::string get_closest_vowel(std::string)\u2019:\n/tmp/tmpqcthk7cy.cpp:51:1:\
    \ error: expected primary-expression before \u2018}\u2019 token\n   51 | }\n \
    \     | ^\n/tmp/tmpqcthk7cy.cpp:51:1: error: expected \u2018,\u2019 or \u2018\
    ;\u2019 before \u2018}\u2019 token\n/tmp/tmpqcthk7cy.cpp:51:1: warning: no return\
    \ statement in function returning non-void [-Wreturn-type]\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// get_closest_vowel(\"yogurt\") ==> \"u\"\
    \n// get_closest_vowel(\"FULL\") ==> \"U\"\n// get_closest_vowel(\"quick\") ==>\
    \ \"\"\n// get_closest_vowel(\"ab\") ==> \"\"\nstd::string get_closest_vowel(std::string\
    \ word) {\n    std::string vowels = \"AEIOUaeiou\";\n    std::string vowels_reverse\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_reverse = \"AEIOUaeiou\";\n\
    \    std::string vowels_reverse_back = \"AEIOUaeiou\";\n    std::string vowels_reverse_back_reverse\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_back_reverse_back = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse_back_reverse_back_reverse = \"AEIOUaeiou\";\n\
    \    std::string vowels_reverse_back_reverse_back_reverse_back = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse = \"\
    AEIOUaeiou\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\n\
    }\nint main() {\n    auto candidate = get_closest_vowel;\n    assert(candidate((\"\
    yogurt\")) == (\"u\"));\n    assert(candidate((\"full\")) == (\"u\"));\n    assert(candidate((\"\
    easy\")) == (\"\"));\n    assert(candidate((\"eAsy\")) == (\"\"));\n    assert(candidate((\"\
    ali\")) == (\"\"));\n    assert(candidate((\"bad\")) == (\"a\"));\n    assert(candidate((\"\
    most\")) == (\"o\"));\n    assert(candidate((\"ab\")) == (\"\"));\n    assert(candidate((\"\
    ba\")) == (\"\"));\n    assert(candidate((\"quick\")) == (\"\"));\n    assert(candidate((\"\
    anime\")) == (\"i\"));\n    assert(candidate((\"Asia\")) == (\"\"));\n    assert(candidate((\"\
    Above\")) == (\"o\"));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp4xigisxg.cpp: In function \u2018std::string get_closest_vowel(std::string)\u2019\
    :\n/tmp/tmp4xigisxg.cpp:32:17: error: redeclaration of \u2018std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\u2019\
    \n   32 |     std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\
    \ = \"AEIOUaeiou\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmp4xigisxg.cpp:31:17: note: \u2018std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\u2019\
    \ previously declared here\n   31 |     std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\
    \ = \"AEIOUaeiou\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmp4xigisxg.cpp:35:1: error: expected initializer before \u2018}\u2019 token\n\
    \   35 | }\n      | ^\n/tmp/tmp4xigisxg.cpp:35:1: warning: no return statement\
    \ in function returning non-void [-Wreturn-type]\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// get_closest_vowel(\"yogurt\") ==> \"u\"\
    \n// get_closest_vowel(\"FULL\") ==> \"U\"\n// get_closest_vowel(\"quick\") ==>\
    \ \"\"\n// get_closest_vowel(\"ab\") ==> \"\"\nstd::string get_closest_vowel(std::string\
    \ word) {\n    std::string vowels = \"AEIOUaeiou\";\n    std::string vowels_reverse\
    \ = vowels + vowels.substr(1, vowels.size() - 1);\n    std::string vowels_reverse_reverse\
    \ = vowels_reverse + vowels_reverse.substr(1, vowels_reverse.size() - 1);\n  \
    \  std::string vowels_reverse_reverse_reverse = vowels_reverse_reverse + vowels_reverse_reverse.substr(1,\
    \ vowels_reverse_reverse.size() - 1);\n    std::string vowels_reverse_reverse_reverse_reverse\
    \ = vowels_reverse_reverse_reverse + vowels_reverse_reverse_reverse.substr(1,\
    \ vowels_reverse_reverse_reverse.size() - 1);\n    std::string vowels_reverse_reverse_reverse_reverse_reverse\
    \ = vowels_reverse_reverse_reverse_reverse_reverse + vowels_reverse_reverse_reverse_reverse.substr(1,\
    \ vowels_reverse_reverse_reverse_reverse.size() - 1);\n    std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = vowels_reverse_reverse_reverse_reverse_reverse_reverse + vowels_reverse_reverse_reverse_reverse_reverse.substr(1,\
    \ vowels_reverse_reverse_reverse_reverse.size() - 1);\n    std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse + vowels_reverse_reverse_reverse_reverse_reverse.substr(1,\
    \ vowels_reverse_reverse_reverse.size() - 1);\n    std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse + vowels_reverse_reverse_reverse_reverse_reverse.substr(1,\
    \ vowels_reverse_reverse_reverse.size() - 1);\n    std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse + vowels_reverse_reverse_reverse_reverse.substr(1,\
    \ vowels_reverse_reverse.size() - 1);\n    std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse + vowels_reverse_reverse_reverse_reverse.substr(1,\
    \ vowels_reverse_reverse.size() - 1);\n    std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse \n\
    }\nint main() {\n    auto candidate = get_closest_vowel;\n    assert(candidate((\"\
    yogurt\")) == (\"u\"));\n    assert(candidate((\"full\")) == (\"u\"));\n    assert(candidate((\"\
    easy\")) == (\"\"));\n    assert(candidate((\"eAsy\")) == (\"\"));\n    assert(candidate((\"\
    ali\")) == (\"\"));\n    assert(candidate((\"bad\")) == (\"a\"));\n    assert(candidate((\"\
    most\")) == (\"o\"));\n    assert(candidate((\"ab\")) == (\"\"));\n    assert(candidate((\"\
    ba\")) == (\"\"));\n    assert(candidate((\"quick\")) == (\"\"));\n    assert(candidate((\"\
    anime\")) == (\"i\"));\n    assert(candidate((\"Asia\")) == (\"\"));\n    assert(candidate((\"\
    Above\")) == (\"o\"));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpvuc5ixig.cpp: In function \u2018std::string get_closest_vowel(std::string)\u2019\
    :\n/tmp/tmpvuc5ixig.cpp:23:17: error: redeclaration of \u2018std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\u2019\
    \n   23 |     std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse + vowels_reverse_reverse_reverse_reverse.substr(1,\
    \ vowels_reverse_reverse.size() - 1);\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpvuc5ixig.cpp:22:17: note: \u2018std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\u2019\
    \ previously declared here\n   22 |     std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse + vowels_reverse_reverse_reverse_reverse_reverse.substr(1,\
    \ vowels_reverse_reverse_reverse.size() - 1);\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpvuc5ixig.cpp:24:17: error: redeclaration of \u2018std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\u2019\
    \n   24 |     std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse + vowels_reverse_reverse_reverse_reverse.substr(1,\
    \ vowels_reverse_reverse.size() - 1);\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpvuc5ixig.cpp:22:17: note: \u2018std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\u2019\
    \ previously declared here\n   22 |     std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse + vowels_reverse_reverse_reverse_reverse_reverse.substr(1,\
    \ vowels_reverse_reverse_reverse.size() - 1);\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpvuc5ixig.cpp:25:17: error: redeclaration of \u2018std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\u2019\
    \n   25 |     std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\n \
    \     |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpvuc5ixig.cpp:22:17: note: \u2018std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\u2019\
    \ previously declared here\n   22 |     std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse + vowels_reverse_reverse_reverse_reverse_reverse.substr(1,\
    \ vowels_reverse_reverse_reverse.size() - 1);\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpvuc5ixig.cpp:26:1: warning: no return statement in function returning\
    \ non-void [-Wreturn-type]\n   26 | }\n      | ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// get_closest_vowel(\"yogurt\") ==> \"u\"\
    \n// get_closest_vowel(\"FULL\") ==> \"U\"\n// get_closest_vowel(\"quick\") ==>\
    \ \"\"\n// get_closest_vowel(\"ab\") ==> \"\"\nstd::string get_closest_vowel(std::string\
    \ word) {\n    std::string vowels = \"aeiouAEIOU\";\n    std::string vowels_reverse\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse2 = \"aeiouAEIOU\";\n    std::string\
    \ vowels_reverse3 = \"aeiouAEIOU\";\n    std::string vowels_reverse4 = \"aeiouAEIOU\"\
    ;\n    std::string vowels_reverse5 = \"aeiouAEIOU\";\n    std::string vowels_reverse6\
    \ = \"aeiouAEIOU\";\n    std::string vowels_reverse7 = \"aeiouAEIOU\";\n    std::string\
    \ vowels_reverse8 = \"aeiouAEIOU\";\n    std::string vowels_reverse9 = \"aeiouAEIOU\"\
    ;\n    std::string vowels_reverse10 = \"aeiouAEIOU\";\n    std::string vowels_reverse11\
    \ = \"aeiouAEIOU\";\n    std::string vowels_reverse12 = \"aeiouAEIOU\";\n    std::string\
    \ vowels_reverse13 = \"aeiouAEIOU\";\n    std::string vowels_reverse14 = \"aeiouAEIOU\"\
    ;\n    std::string vowels_reverse15 = \"aeiouAEIOU\";\n    std::string vowels_reverse16\
    \ = \"aeiouAEIOU\";\n    std::string vowels_reverse17 = \"aeiouAEIOU\";\n    std::string\
    \ vowels_reverse18 = \"aeiouAEIOU\";\n    std::string vowels_reverse19 = \"aeiouAEIOU\"\
    ;\n    std::string vowels_reverse20 = \"aeiouAEIOU\";\n    std::string vowels_reverse21\
    \ = \"aeiouAEIOU\";\n    std::string vowels_reverse22 = \"aeiouAEIOU\";\n    std::string\
    \ vowels_reverse23 = \"aeiouAEIOU\";\n    std::string vowels_reverse24 = \"aeiouAEIOU\"\
    ;\n    std::string vowels_reverse25 = \"aeiouAEIOU\";\n    std::string vowels_reverse26\
    \ = \"aeiouAEIOU\";\n    std::string vowels_reverse27 = \"aeiouAEIOU\";\n    std::string\
    \ vowels_reverse28 = \"aeiouAEIOU\";\n    std::string vowels_reverse29 = \"aeiouAEIOU\"\
    ;\n    std::string vowels_reverse30 = \"aeiouAEIOU\";\n    std::string vowels_reverse31\
    \ = \"aeiouAEIOU\";\n    std::string vowels_reverse32 = \"aeiouAEIOU\";\n    std::string\
    \ vowels_reverse33 = \"aeiouAEIOU\";\n    std::string vowels_reverse34 = \"aeiouAEIOU\"\
    ;\n    std::string vowels_reverse35 = \"aeiouAEIOU\";\n    std::string vowels_reverse36\
    \ = \"aeiouAE\n}\nint main() {\n    auto candidate = get_closest_vowel;\n    assert(candidate((\"\
    yogurt\")) == (\"u\"));\n    assert(candidate((\"full\")) == (\"u\"));\n    assert(candidate((\"\
    easy\")) == (\"\"));\n    assert(candidate((\"eAsy\")) == (\"\"));\n    assert(candidate((\"\
    ali\")) == (\"\"));\n    assert(candidate((\"bad\")) == (\"a\"));\n    assert(candidate((\"\
    most\")) == (\"o\"));\n    assert(candidate((\"ab\")) == (\"\"));\n    assert(candidate((\"\
    ba\")) == (\"\"));\n    assert(candidate((\"quick\")) == (\"\"));\n    assert(candidate((\"\
    anime\")) == (\"i\"));\n    assert(candidate((\"Asia\")) == (\"\"));\n    assert(candidate((\"\
    Above\")) == (\"o\"));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpg5gmpowf.cpp:50:36: warning: missing terminating \" character\n\
    \   50 |     std::string vowels_reverse36 = \"aeiouAE\n      |               \
    \                     ^\n/tmp/tmpg5gmpowf.cpp:50:36: error: missing terminating\
    \ \" character\n   50 |     std::string vowels_reverse36 = \"aeiouAE\n      |\
    \                                    ^~~~~~~~\n/tmp/tmpg5gmpowf.cpp: In function\
    \ \u2018std::string get_closest_vowel(std::string)\u2019:\n/tmp/tmpg5gmpowf.cpp:51:1:\
    \ error: expected primary-expression before \u2018}\u2019 token\n   51 | }\n \
    \     | ^\n/tmp/tmpg5gmpowf.cpp:51:1: error: expected \u2018,\u2019 or \u2018\
    ;\u2019 before \u2018}\u2019 token\n/tmp/tmpg5gmpowf.cpp:51:1: warning: no return\
    \ statement in function returning non-void [-Wreturn-type]\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// get_closest_vowel(\"yogurt\") ==> \"u\"\
    \n// get_closest_vowel(\"FULL\") ==> \"U\"\n// get_closest_vowel(\"quick\") ==>\
    \ \"\"\n// get_closest_vowel(\"ab\") ==> \"\"\nstd::string get_closest_vowel(std::string\
    \ word) {\n    std::string vowels = \"AEIOUaeiou\";\n    std::string vowels_rev\
    \ = \"AEIOUaeiou\";\n    std::string vowels_rev2 = \"\";\n    std::string vowels_rev3\
    \ = \"\";\n    std::string vowels_rev4 = \"\";\n    std::string vowels_rev5 =\
    \ \"\";\n    std::string vowels_rev6 = \"\";\n    std::string vowels_rev7 = \"\
    \";\n    std::string vowels_rev8 = \"\";\n    std::string vowels_rev9 = \"\";\n\
    \    std::string vowels_rev10 = \"\";\n    std::string vowels_rev11 = \"\";\n\
    \    std::string vowels_rev12 = \"\";\n    std::string vowels_rev13 = \"\";\n\
    \    std::string vowels_rev14 = \"\";\n    std::string vowels_rev15 = \"\";\n\
    \    std::string vowels_rev16 = \"\";\n    std::string vowels_rev17 = \"\";\n\
    \    std::string vowels_rev18 = \"\";\n    std::string vowels_rev19 = \"\";\n\
    \    std::string vowels_rev20 = \"\";\n    std::string vowels_rev21 = \"\";\n\
    \    std::string vowels_rev22 = \"\";\n    std::string vowels_rev23 = \"\";\n\
    \    std::string vowels_rev24 = \"\";\n    std::string vowels_rev25 = \"\";\n\
    \    std::string vowels_rev26 = \"\";\n    std::string vowels_rev27 = \"\";\n\
    \    std::string vowels_rev28 = \"\";\n    std::string vowels_rev29 = \"\";\n\
    \    std::string vowels_rev30 = \"\";\n    std::string vowels_rev31 = \"\";\n\
    \    std::string vowels_rev32 = \"\";\n    std::string vowels_rev33 = \"\";\n\
    \    std::string vowels_rev34 = \"\";\n    std::string vowels_rev35 = \"\";\n\
    \    std::string vowels_rev36 = \"\";\n    std::string vowels_rev37 = \"\";\n\
    \    std::string vowels_rev38 = \"\";\n    std::string vowels_rev39 = \"\";\n\
    \    std::string vowels_rev40 = \"\";\n    std::string vowels_rev41 = \"\";\n\
    \    std::string vowels_rev42 = \"\";\n    std::string vowels_rev43 = \"\";\n\
    \    std::string vowels_rev44 = \"\";\n    std::string vowels_rev45 = \"\";\n\
    \    std::string vowels_rev46 = \"\";\n    std::string vowels_rev47 = \"\";\n\
    \    std::string vowels_rev48 = \"\";\n    std::string vowels_rev49 = \"\";\n\
    \    std::string vowels_rev50 = \"\";\n    std::string vowels_rev8 = \"\";\n \
    \   std::string vowels_rev9 = \"\";\n    std::string vowels_rev10 = \"\";\n  \
    \  std::string vowels_rev11 = \"\";\n    std::string vowels_rev12 = \"\";\n  \
    \  std::string vowels_rev13 = \"\";\n    std::string vowels_rev14 = \"\";\n  \
    \  std::string vowels_rev15 = \"\";\n    std::string vowels_rev16 = \"\";\n  \
    \  std::string vowels_rev17 = \"\";\n    std::string vowels_rev18 = \"\";\n  \
    \  std::string \n}\nint main() {\n    auto candidate = get_closest_vowel;\n  \
    \  assert(candidate((\"yogurt\")) == (\"u\"));\n    assert(candidate((\"full\"\
    )) == (\"u\"));\n    assert(candidate((\"easy\")) == (\"\"));\n    assert(candidate((\"\
    eAsy\")) == (\"\"));\n    assert(candidate((\"ali\")) == (\"\"));\n    assert(candidate((\"\
    bad\")) == (\"a\"));\n    assert(candidate((\"most\")) == (\"o\"));\n    assert(candidate((\"\
    ab\")) == (\"\"));\n    assert(candidate((\"ba\")) == (\"\"));\n    assert(candidate((\"\
    quick\")) == (\"\"));\n    assert(candidate((\"anime\")) == (\"i\"));\n    assert(candidate((\"\
    Asia\")) == (\"\"));\n    assert(candidate((\"Above\")) == (\"o\"));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpg8icu2i1.cpp: In function \u2018std::string get_closest_vowel(std::string)\u2019\
    :\n/tmp/tmpg8icu2i1.cpp:65:17: error: redeclaration of \u2018std::string vowels_rev8\u2019\
    \n   65 |     std::string vowels_rev8 = \"\";\n      |                 ^~~~~~~~~~~\n\
    /tmp/tmpg8icu2i1.cpp:22:17: note: \u2018std::string vowels_rev8\u2019 previously\
    \ declared here\n   22 |     std::string vowels_rev8 = \"\";\n      |        \
    \         ^~~~~~~~~~~\n/tmp/tmpg8icu2i1.cpp:66:17: error: redeclaration of \u2018\
    std::string vowels_rev9\u2019\n   66 |     std::string vowels_rev9 = \"\";\n \
    \     |                 ^~~~~~~~~~~\n/tmp/tmpg8icu2i1.cpp:23:17: note: \u2018\
    std::string vowels_rev9\u2019 previously declared here\n   23 |     std::string\
    \ vowels_rev9 = \"\";\n      |                 ^~~~~~~~~~~\n/tmp/tmpg8icu2i1.cpp:67:17:\
    \ error: redeclaration of \u2018std::string vowels_rev10\u2019\n   67 |     std::string\
    \ vowels_rev10 = \"\";\n      |                 ^~~~~~~~~~~~\n/tmp/tmpg8icu2i1.cpp:24:17:\
    \ note: \u2018std::string vowels_rev10\u2019 previously declared here\n   24 |\
    \     std::string vowels_rev10 = \"\";\n      |                 ^~~~~~~~~~~~\n\
    /tmp/tmpg8icu2i1.cpp:68:17: error: redeclaration of \u2018std::string vowels_rev11\u2019\
    \n   68 |     std::string vowels_rev11 = \"\";\n      |                 ^~~~~~~~~~~~\n\
    /tmp/tmpg8icu2i1.cpp:25:17: note: \u2018std::string vowels_rev11\u2019 previously\
    \ declared here\n   25 |     std::string vowels_rev11 = \"\";\n      |       \
    \          ^~~~~~~~~~~~\n/tmp/tmpg8icu2i1.cpp:69:17: error: redeclaration of \u2018\
    std::string vowels_rev12\u2019\n   69 |     std::string vowels_rev12 = \"\";\n\
    \      |                 ^~~~~~~~~~~~\n/tmp/tmpg8icu2i1.cpp:26:17: note: \u2018\
    std::string vowels_rev12\u2019 previously declared here\n   26 |     std::string\
    \ vowels_rev12 = \"\";\n      |                 ^~~~~~~~~~~~\n/tmp/tmpg8icu2i1.cpp:70:17:\
    \ error: redeclaration of \u2018std::string vowels_rev13\u2019\n   70 |     std::string\
    \ vowels_rev13 = \"\";\n      |                 ^~~~~~~~~~~~\n/tmp/tmpg8icu2i1.cpp:27:17:\
    \ note: \u2018std::string vowels_rev13\u2019 previously declared here\n   27 |\
    \     std::string vowels_rev13 = \"\";\n      |                 ^~~~~~~~~~~~\n\
    /tmp/tmpg8icu2i1.cpp:71:17: error: redeclaration of \u2018std::string vowels_rev14\u2019\
    \n   71 |     std::string vowels_rev14 = \"\";\n      |                 ^~~~~~~~~~~~\n\
    /tmp/tmpg8icu2i1.cpp:28:17: note: \u2018std::string vowels_rev14\u2019 previously\
    \ declared here\n   28 |     std::string vowels_rev14 = \"\";\n      |       \
    \          ^~~~~~~~~~~~\n/tmp/tmpg8icu2i1.cpp:72:17: error: redeclaration of \u2018\
    std::string vowels_rev15\u2019\n   72 |     std::string vowels_rev15 = \"\";\n\
    \      |                 ^~~~~~~~~~~~\n/tmp/tmpg8icu2i1.cpp:29:17: note: \u2018\
    std::string vowels_rev15\u2019 previously declared here\n   29 |     std::string\
    \ vowels_rev15 = \"\";\n      |                 ^~~~~~~~~~~~\n/tmp/tmpg8icu2i1.cpp:73:17:\
    \ error: redeclaration of \u2018std::string vowels_rev16\u2019\n   73 |     std::string\
    \ vowels_rev16 = \"\";\n      |                 ^~~~~~~~~~~~\n/tmp/tmpg8icu2i1.cpp:30:17:\
    \ note: \u2018std::string vowels_rev16\u2019 previously declared here\n   30 |\
    \     std::string vowels_rev16 = \"\";\n      |                 ^~~~~~~~~~~~\n\
    /tmp/tmpg8icu2i1.cpp:74:17: error: redeclaration of \u2018std::string vowels_rev17\u2019\
    \n   74 |     std::string vowels_rev17 = \"\";\n      |                 ^~~~~~~~~~~~\n\
    /tmp/tmpg8icu2i1.cpp:31:17: note: \u2018std::string vowels_rev17\u2019 previously\
    \ declared here\n   31 |     std::string vowels_rev17 = \"\";\n      |       \
    \          ^~~~~~~~~~~~\n/tmp/tmpg8icu2i1.cpp:75:17: error: redeclaration of \u2018\
    std::string vowels_rev18\u2019\n   75 |     std::string vowels_rev18 = \"\";\n\
    \      |                 ^~~~~~~~~~~~\n/tmp/tmpg8icu2i1.cpp:32:17: note: \u2018\
    std::string vowels_rev18\u2019 previously declared here\n   32 |     std::string\
    \ vowels_rev18 = \"\";\n      |                 ^~~~~~~~~~~~\n/tmp/tmpg8icu2i1.cpp:77:1:\
    \ error: expected unqualified-id before \u2018}\u2019 token\n   77 | }\n     \
    \ | ^\n/tmp/tmpg8icu2i1.cpp:77:1: warning: no return statement in function returning\
    \ non-void [-Wreturn-type]\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// get_closest_vowel(\"yogurt\") ==> \"u\"\
    \n// get_closest_vowel(\"FULL\") ==> \"U\"\n// get_closest_vowel(\"quick\") ==>\
    \ \"\"\n// get_closest_vowel(\"ab\") ==> \"\"\nstd::string get_closest_vowel(std::string\
    \ word) {\n    std::string vowels = \"AEIOUaeiou\";\n    std::string vowels_reverse\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_reverse = \"AEIOUaeiou\";\n\
    \    std::string vowels_reverse_reverse_reverse = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse_reverse_reverse_reverse = \"AEIOUaeiou\";\n    std::string vowels_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AE\n}\nint main() {\n    auto candidate = get_closest_vowel;\n    assert(candidate((\"\
    yogurt\")) == (\"u\"));\n    assert(candidate((\"full\")) == (\"u\"));\n    assert(candidate((\"\
    easy\")) == (\"\"));\n    assert(candidate((\"eAsy\")) == (\"\"));\n    assert(candidate((\"\
    ali\")) == (\"\"));\n    assert(candidate((\"bad\")) == (\"a\"));\n    assert(candidate((\"\
    most\")) == (\"o\"));\n    assert(candidate((\"ab\")) == (\"\"));\n    assert(candidate((\"\
    ba\")) == (\"\"));\n    assert(candidate((\"quick\")) == (\"\"));\n    assert(candidate((\"\
    anime\")) == (\"i\"));\n    assert(candidate((\"Asia\")) == (\"\"));\n    assert(candidate((\"\
    Above\")) == (\"o\"));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpkikykmhs.cpp:35:90: warning: missing terminating \" character\n\
    \   35 |     std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AE\n      |                                                            \
    \                              ^\n/tmp/tmpkikykmhs.cpp:35:90: error: missing terminating\
    \ \" character\n   35 |     std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AE\n      |                                                            \
    \                              ^~~\n/tmp/tmpkikykmhs.cpp: In function \u2018std::string\
    \ get_closest_vowel(std::string)\u2019:\n/tmp/tmpkikykmhs.cpp:22:17: error: redeclaration\
    \ of \u2018std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse\u2019\
    \n   22 |     std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpkikykmhs.cpp:21:17: note: \u2018std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse\u2019\
    \ previously declared here\n   21 |     std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpkikykmhs.cpp:23:17: error: redeclaration of \u2018std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse\u2019\
    \n   23 |     std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpkikykmhs.cpp:21:17: note: \u2018std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse\u2019\
    \ previously declared here\n   21 |     std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpkikykmhs.cpp:25:17: error: redeclaration of \u2018std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\u2019\
    \n   25 |     std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpkikykmhs.cpp:24:17: note: \u2018std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\u2019\
    \ previously declared here\n   24 |     std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpkikykmhs.cpp:26:17: error: redeclaration of \u2018std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\u2019\
    \n   26 |     std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpkikykmhs.cpp:24:17: note: \u2018std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\u2019\
    \ previously declared here\n   24 |     std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpkikykmhs.cpp:27:17: error: redeclaration of \u2018std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\u2019\
    \n   27 |     std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpkikykmhs.cpp:24:17: note: \u2018std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\u2019\
    \ previously declared here\n   24 |     std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpkikykmhs.cpp:28:17: error: redeclaration of \u2018std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\u2019\
    \n   28 |     std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpkikykmhs.cpp:24:17: note: \u2018std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\u2019\
    \ previously declared here\n   24 |     std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpkikykmhs.cpp:29:17: error: redeclaration of \u2018std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\u2019\
    \n   29 |     std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpkikykmhs.cpp:24:17: note: \u2018std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\u2019\
    \ previously declared here\n   24 |     std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpkikykmhs.cpp:30:17: error: redeclaration of \u2018std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\u2019\
    \n   30 |     std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpkikykmhs.cpp:24:17: note: \u2018std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\u2019\
    \ previously declared here\n   24 |     std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpkikykmhs.cpp:31:17: error: redeclaration of \u2018std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\u2019\
    \n   31 |     std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpkikykmhs.cpp:24:17: note: \u2018std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\u2019\
    \ previously declared here\n   24 |     std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpkikykmhs.cpp:32:17: error: redeclaration of \u2018std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\u2019\
    \n   32 |     std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpkikykmhs.cpp:24:17: note: \u2018std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\u2019\
    \ previously declared here\n   24 |     std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpkikykmhs.cpp:33:17: error: redeclaration of \u2018std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\u2019\
    \n   33 |     std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpkikykmhs.cpp:24:17: note: \u2018std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\u2019\
    \ previously declared here\n   24 |     std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpkikykmhs.cpp:34:17: error: redeclaration of \u2018std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\u2019\
    \n   34 |     std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpkikykmhs.cpp:24:17: note: \u2018std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\u2019\
    \ previously declared here\n   24 |     std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpkikykmhs.cpp:35:17: error: redeclaration of \u2018std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\u2019\
    \n   35 |     std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AE\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpkikykmhs.cpp:24:17: note: \u2018std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\u2019\
    \ previously declared here\n   24 |     std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpkikykmhs.cpp:36:1: error: expected primary-expression before \u2018}\u2019\
    \ token\n   36 | }\n      | ^\n/tmp/tmpkikykmhs.cpp:36:1: warning: no return statement\
    \ in function returning non-void [-Wreturn-type]\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// get_closest_vowel(\"yogurt\") ==> \"u\"\
    \n// get_closest_vowel(\"FULL\") ==> \"U\"\n// get_closest_vowel(\"quick\") ==>\
    \ \"\"\n// get_closest_vowel(\"ab\") ==> \"\"\nstd::string get_closest_vowel(std::string\
    \ word) {\n    std::string vowels = \"AEIOUaeiou\";\n    std::string vowels_reverse\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse2 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse3 = \"AEIOUaeiou\";\n    std::string vowels_reverse4 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse5 = \"AEIOUaeiou\";\n    std::string vowels_reverse6\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse7 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse8 = \"AEIOUaeiou\";\n    std::string vowels_reverse9 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse10 = \"AEIOUaeiou\";\n    std::string vowels_reverse11\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse12 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse13 = \"AEIOUaeiou\";\n    std::string vowels_reverse14 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse15 = \"AEIOUaeiou\";\n    std::string vowels_reverse16\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse17 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse18 = \"AEIOUaeiou\";\n    std::string vowels_reverse19 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse20 = \"AEIOUaeiou\";\n    std::string vowels_reverse21\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse22 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse23 = \"AEIOUaeiou\";\n    std::string vowels_reverse24 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse25 = \"AEIOUaeiou\";\n    std::string vowels_reverse26\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse27 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse28 = \"AEIOUaeiou\";\n    std::string vowels_reverse29 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse30 = \"AEIOUaeiou\";\n    std::string vowels_reverse31\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse32 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse33 = \"AEIOUaeiou\";\n    std::string vowels_reverse34 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse35 = \"AEIOUaeiou\";\n    std::string vowels_reverse36\
    \ = \"AEIOU\n}\nint main() {\n    auto candidate = get_closest_vowel;\n    assert(candidate((\"\
    yogurt\")) == (\"u\"));\n    assert(candidate((\"full\")) == (\"u\"));\n    assert(candidate((\"\
    easy\")) == (\"\"));\n    assert(candidate((\"eAsy\")) == (\"\"));\n    assert(candidate((\"\
    ali\")) == (\"\"));\n    assert(candidate((\"bad\")) == (\"a\"));\n    assert(candidate((\"\
    most\")) == (\"o\"));\n    assert(candidate((\"ab\")) == (\"\"));\n    assert(candidate((\"\
    ba\")) == (\"\"));\n    assert(candidate((\"quick\")) == (\"\"));\n    assert(candidate((\"\
    anime\")) == (\"i\"));\n    assert(candidate((\"Asia\")) == (\"\"));\n    assert(candidate((\"\
    Above\")) == (\"o\"));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpji2jomoz.cpp:50:36: warning: missing terminating \" character\n\
    \   50 |     std::string vowels_reverse36 = \"AEIOU\n      |                 \
    \                   ^\n/tmp/tmpji2jomoz.cpp:50:36: error: missing terminating\
    \ \" character\n   50 |     std::string vowels_reverse36 = \"AEIOU\n      |  \
    \                                  ^~~~~~\n/tmp/tmpji2jomoz.cpp: In function \u2018\
    std::string get_closest_vowel(std::string)\u2019:\n/tmp/tmpji2jomoz.cpp:51:1:\
    \ error: expected primary-expression before \u2018}\u2019 token\n   51 | }\n \
    \     | ^\n/tmp/tmpji2jomoz.cpp:51:1: error: expected \u2018,\u2019 or \u2018\
    ;\u2019 before \u2018}\u2019 token\n/tmp/tmpji2jomoz.cpp:51:1: warning: no return\
    \ statement in function returning non-void [-Wreturn-type]\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// get_closest_vowel(\"yogurt\") ==> \"u\"\
    \n// get_closest_vowel(\"FULL\") ==> \"U\"\n// get_closest_vowel(\"quick\") ==>\
    \ \"\"\n// get_closest_vowel(\"ab\") ==> \"\"\nstd::string get_closest_vowel(std::string\
    \ word) {\n    // Write your code here\n    std::string vowels = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse = \"AEIOUaeiou\";\n    std::string vowels_reverse2\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse3 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse4 = \"AEIOUaeiou\";\n    std::string vowels_reverse5 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse6 = \"AEIOUaeiou\";\n    std::string vowels_reverse7\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse8 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse9 = \"AEIOUaeiou\";\n    std::string vowels_reverse10 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse11 = \"AEIOUaeiou\";\n    std::string vowels_reverse12\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse13 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse14 = \"AEIOUaeiou\";\n    std::string vowels_reverse15 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse16 = \"AEIOUaeiou\";\n    std::string vowels_reverse17\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse18 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse19 = \"AEIOUaeiou\";\n    std::string vowels_reverse20 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse21 = \"AEIOUaeiou\";\n    std::string vowels_reverse22\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse23 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse24 = \"AEIOUaeiou\";\n    std::string vowels_reverse25 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse26 = \"AEIOUaeiou\";\n    std::string vowels_reverse27\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse28 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse29 = \"AEIOUaeiou\";\n    std::string vowels_reverse30 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse31 = \"AEIOUaeiou\";\n    std::string vowels_reverse32\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse33 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse34 = \"AEIOUaeiou\";\n    std::string vowels_reverse35 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse\n}\nint main() {\n    auto candidate = get_closest_vowel;\n\
    \    assert(candidate((\"yogurt\")) == (\"u\"));\n    assert(candidate((\"full\"\
    )) == (\"u\"));\n    assert(candidate((\"easy\")) == (\"\"));\n    assert(candidate((\"\
    eAsy\")) == (\"\"));\n    assert(candidate((\"ali\")) == (\"\"));\n    assert(candidate((\"\
    bad\")) == (\"a\"));\n    assert(candidate((\"most\")) == (\"o\"));\n    assert(candidate((\"\
    ab\")) == (\"\"));\n    assert(candidate((\"ba\")) == (\"\"));\n    assert(candidate((\"\
    quick\")) == (\"\"));\n    assert(candidate((\"anime\")) == (\"i\"));\n    assert(candidate((\"\
    Asia\")) == (\"\"));\n    assert(candidate((\"Above\")) == (\"o\"));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpp5xwhpzn.cpp: In function \u2018std::string get_closest_vowel(std::string)\u2019\
    :\n/tmp/tmpp5xwhpzn.cpp:52:1: error: expected initializer before \u2018}\u2019\
    \ token\n   52 | }\n      | ^\n/tmp/tmpp5xwhpzn.cpp:52:1: warning: no return statement\
    \ in function returning non-void [-Wreturn-type]\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// get_closest_vowel(\"yogurt\") ==> \"u\"\
    \n// get_closest_vowel(\"FULL\") ==> \"U\"\n// get_closest_vowel(\"quick\") ==>\
    \ \"\"\n// get_closest_vowel(\"ab\") ==> \"\"\nstd::string get_closest_vowel(std::string\
    \ word) {\n    std::string vowels = \"AEIOUaeiou\";\n    std::string vowels_reverse\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_reverse = \"\";\n    std::string\
    \ vowels_reverse_back = \"\";\n    std::string vowels_reverse_back_reverse = \"\
    \";\n    std::string vowels_reverse_back_reverse_back = \"\";\n    std::string\
    \ vowels_reverse_back_reverse_back_reverse = \"\";\n    std::string vowels_reverse_back_reverse_back_reverse_back\
    \ = \"\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse\
    \ = \"\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back\
    \ = \"\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse\
    \ = \"\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\
    \ = \"\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse\
    \ = \"\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\
    \ = \"\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\
    \ = \"\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse\
    \ = \"\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\
    \ = \"\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse\
    \ = \"\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\
    \ = \"\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\
    \ = \"\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse\
    \ = \"\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\
    \ = \"\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\
    \ = \"\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\
    \ = \"\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_re\n\
    }\nint main() {\n    auto candidate = get_closest_vowel;\n    assert(candidate((\"\
    yogurt\")) == (\"u\"));\n    assert(candidate((\"full\")) == (\"u\"));\n    assert(candidate((\"\
    easy\")) == (\"\"));\n    assert(candidate((\"eAsy\")) == (\"\"));\n    assert(candidate((\"\
    ali\")) == (\"\"));\n    assert(candidate((\"bad\")) == (\"a\"));\n    assert(candidate((\"\
    most\")) == (\"o\"));\n    assert(candidate((\"ab\")) == (\"\"));\n    assert(candidate((\"\
    ba\")) == (\"\"));\n    assert(candidate((\"quick\")) == (\"\"));\n    assert(candidate((\"\
    anime\")) == (\"i\"));\n    assert(candidate((\"Asia\")) == (\"\"));\n    assert(candidate((\"\
    Above\")) == (\"o\"));\n}\n"
  stdout: ''
  stderr: "/tmp/tmplpsn6q23.cpp: In function \u2018std::string get_closest_vowel(std::string)\u2019\
    :\n/tmp/tmplpsn6q23.cpp:28:17: error: redeclaration of \u2018std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\u2019\
    \n   28 |     std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\
    \ = \"\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmplpsn6q23.cpp:27:17: note: \u2018std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\u2019\
    \ previously declared here\n   27 |     std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\
    \ = \"\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmplpsn6q23.cpp:33:17: error: redeclaration of \u2018std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\u2019\
    \n   33 |     std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\
    \ = \"\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmplpsn6q23.cpp:32:17: note: \u2018std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\u2019\
    \ previously declared here\n   32 |     std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\
    \ = \"\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmplpsn6q23.cpp:36:17: error: redeclaration of \u2018std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\u2019\
    \n   36 |     std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\
    \ = \"\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmplpsn6q23.cpp:35:17: note: \u2018std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\u2019\
    \ previously declared here\n   35 |     std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\
    \ = \"\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmplpsn6q23.cpp:37:17: error: redeclaration of \u2018std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\u2019\
    \n   37 |     std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\
    \ = \"\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmplpsn6q23.cpp:35:17: note: \u2018std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\u2019\
    \ previously declared here\n   35 |     std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\
    \ = \"\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmplpsn6q23.cpp:39:1: error: expected initializer before \u2018}\u2019 token\n\
    \   39 | }\n      | ^\n/tmp/tmplpsn6q23.cpp:39:1: warning: no return statement\
    \ in function returning non-void [-Wreturn-type]\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// get_closest_vowel(\"yogurt\") ==> \"u\"\
    \n// get_closest_vowel(\"FULL\") ==> \"U\"\n// get_closest_vowel(\"quick\") ==>\
    \ \"\"\n// get_closest_vowel(\"ab\") ==> \"\"\nstd::string get_closest_vowel(std::string\
    \ word) {\n    std::string vowels = \"AEIOUaeiou\";\n    std::string vowels_reverse\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse2 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse3 = \"AEIOUaeiou\";\n    std::string vowels_reverse4 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse5 = \"AEIOUaeiou\";\n    std::string vowels_reverse6\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse7 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse8 = \"AEIOUaeiou\";\n    std::string vowels_reverse9 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse10 = \"AEIOUaeiou\";\n    std::string vowels_reverse11\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse12 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse13 = \"AEIOUaeiou\";\n    std::string vowels_reverse14 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse15 = \"AEIOUaeiou\";\n    std::string vowels_reverse16\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse17 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse18 = \"AEIOUaeiou\";\n    std::string vowels_reverse19 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse20 = \"AEIOUaeiou\";\n    std::string vowels_reverse21\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse22 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse23 = \"AEIOUaeiou\";\n    std::string vowels_reverse24 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse25 = \"AEIOUaeiou\";\n    std::string vowels_reverse26\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse27 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse28 = \"AEIOUaeiou\";\n    std::string vowels_reverse29 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse30 = \"AEIOUaeiou\";\n    std::string vowels_reverse31\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse32 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse33 = \"AEIOUaeiou\";\n    std::string vowels_reverse34 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse35 = \"AEIOUaeiou\";\n    std::string vowels_reverse36\
    \ = \"AEIOU\n}\nint main() {\n    auto candidate = get_closest_vowel;\n    assert(candidate((\"\
    yogurt\")) == (\"u\"));\n    assert(candidate((\"full\")) == (\"u\"));\n    assert(candidate((\"\
    easy\")) == (\"\"));\n    assert(candidate((\"eAsy\")) == (\"\"));\n    assert(candidate((\"\
    ali\")) == (\"\"));\n    assert(candidate((\"bad\")) == (\"a\"));\n    assert(candidate((\"\
    most\")) == (\"o\"));\n    assert(candidate((\"ab\")) == (\"\"));\n    assert(candidate((\"\
    ba\")) == (\"\"));\n    assert(candidate((\"quick\")) == (\"\"));\n    assert(candidate((\"\
    anime\")) == (\"i\"));\n    assert(candidate((\"Asia\")) == (\"\"));\n    assert(candidate((\"\
    Above\")) == (\"o\"));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpnpm5cma5.cpp:50:36: warning: missing terminating \" character\n\
    \   50 |     std::string vowels_reverse36 = \"AEIOU\n      |                 \
    \                   ^\n/tmp/tmpnpm5cma5.cpp:50:36: error: missing terminating\
    \ \" character\n   50 |     std::string vowels_reverse36 = \"AEIOU\n      |  \
    \                                  ^~~~~~\n/tmp/tmpnpm5cma5.cpp: In function \u2018\
    std::string get_closest_vowel(std::string)\u2019:\n/tmp/tmpnpm5cma5.cpp:51:1:\
    \ error: expected primary-expression before \u2018}\u2019 token\n   51 | }\n \
    \     | ^\n/tmp/tmpnpm5cma5.cpp:51:1: error: expected \u2018,\u2019 or \u2018\
    ;\u2019 before \u2018}\u2019 token\n/tmp/tmpnpm5cma5.cpp:51:1: warning: no return\
    \ statement in function returning non-void [-Wreturn-type]\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// get_closest_vowel(\"yogurt\") ==> \"u\"\
    \n// get_closest_vowel(\"FULL\") ==> \"U\"\n// get_closest_vowel(\"quick\") ==>\
    \ \"\"\n// get_closest_vowel(\"ab\") ==> \"\"\nstd::string get_closest_vowel(std::string\
    \ word) {\n    std::string vowels = \"AEIOUaeiou\";\n    std::string vowels_reversed\
    \ = vowels.substr(0, vowels.size() - 1);\n    std::string vowels_reversed_reversed\
    \ = vowels_reversed.substr(0, vowels_reversed.size() - 1);\n    std::string vowels_reversed_reversed_reversed\
    \ = vowels_reversed_reversed.substr(0, vowels_reversed_reversed.size() - 1);\n\
    \    std::string vowels_reversed_reversed_reversed_reversed = vowels_reversed_reversed_reversed.substr(0,\
    \ vowels_reversed_reversed_reversed.size() - 1);\n    std::string vowels_reversed_reversed_reversed_reversed_reversed\
    \ = vowels_reversed_reversed_reversed_reversed.substr(0, vowels_reversed_reversed_reversed_reversed.size()\
    \ - 1);\n    std::string vowels_reversed_reversed_reversed_reversed_reversed_reversed\
    \ = vowels_reversed_reversed_reversed_reversed_reversed.substr(0, vowels_reversed_reversed_reversed_reversed_reversed.size()\
    \ - 1);\n    std::string vowels_reversed_reversed_reversed_reversed_reversed_reversed_reversed\
    \ = vowels_reversed_reversed_reversed_reversed_reversed_reversed.substr(0, vowels_reversed_reversed_reversed_reversed_reversed_reversed.size()\
    \ - 1);\n    std::string vowels_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed\
    \ = vowels_reversed_reversed_reversed_reversed_reversed_reversed_reversed.substr(0,\
    \ vowels_reversed_reversed_reversed_reversed_reversed_reversed_reversed.size()\
    \ - 1);\n    std::string vowels_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed\
    \ = vowels_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed.substr(0,\
    \ vowels_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed.size()\
    \ - 1);\n    std::string vowels_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed\
    \ = vowels_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed.substr(0,\
    \ vowels_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed.size()\
    \ - 1);\n    std::string vowels_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed\
    \ = vowels_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed.substr(0,\
    \ vowels_reversed_reversed_reversed_reversed_\n}\nint main() {\n    auto candidate\
    \ = get_closest_vowel;\n    assert(candidate((\"yogurt\")) == (\"u\"));\n    assert(candidate((\"\
    full\")) == (\"u\"));\n    assert(candidate((\"easy\")) == (\"\"));\n    assert(candidate((\"\
    eAsy\")) == (\"\"));\n    assert(candidate((\"ali\")) == (\"\"));\n    assert(candidate((\"\
    bad\")) == (\"a\"));\n    assert(candidate((\"most\")) == (\"o\"));\n    assert(candidate((\"\
    ab\")) == (\"\"));\n    assert(candidate((\"ba\")) == (\"\"));\n    assert(candidate((\"\
    quick\")) == (\"\"));\n    assert(candidate((\"anime\")) == (\"i\"));\n    assert(candidate((\"\
    Asia\")) == (\"\"));\n    assert(candidate((\"Above\")) == (\"o\"));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpnwz6rxt0.cpp: In function \u2018std::string get_closest_vowel(std::string)\u2019\
    :\n/tmp/tmpnwz6rxt0.cpp:25:125: error: \u2018vowels_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed\u2019\
    \ was not declared in this scope; did you mean \u2018vowels_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed\u2019\
    ?\n   25 |     std::string vowels_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed\
    \ = vowels_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed.substr(0,\
    \ vowels_reversed_reversed_reversed_reversed_\n      |                       \
    \                                                                            \
    \                          ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    \      |                                                                     \
    \                                                        vowels_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed\n\
    /tmp/tmpnwz6rxt0.cpp:25:250: error: \u2018vowels_reversed_reversed_reversed_reversed_\u2019\
    \ was not declared in this scope; did you mean \u2018vowels_reversed_reversed_reversed_reversed\u2019\
    ?\n   25 |     std::string vowels_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed\
    \ = vowels_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed.substr(0,\
    \ vowels_reversed_reversed_reversed_reversed_\n      |                       \
    \                                                                            \
    \                                                                            \
    \                                                                           ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    \      |                                                                     \
    \                                                                            \
    \                                                                            \
    \                             vowels_reversed_reversed_reversed_reversed\n/tmp/tmpnwz6rxt0.cpp:26:1:\
    \ error: expected \u2018,\u2019 or \u2018;\u2019 before \u2018}\u2019 token\n\
    \   26 | }\n      | ^\n/tmp/tmpnwz6rxt0.cpp:26:1: warning: no return statement\
    \ in function returning non-void [-Wreturn-type]\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// get_closest_vowel(\"yogurt\") ==> \"u\"\
    \n// get_closest_vowel(\"FULL\") ==> \"U\"\n// get_closest_vowel(\"quick\") ==>\
    \ \"\"\n// get_closest_vowel(\"ab\") ==> \"\"\nstd::string get_closest_vowel(std::string\
    \ word) {\n    std::string vowels = \"AEIOUaeiou\";\n    std::string vowels_reverse\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_reverse = \"\";\n    std::string\
    \ vowels_reverse_back = \"\";\n    std::string vowels_reverse_back_reverse = \"\
    \";\n    std::string vowels_reverse_back_reverse_back = \"\";\n    std::string\
    \ vowels_reverse_back_reverse_back_reverse = \"\";\n    std::string vowels_reverse_back_reverse_back_reverse_back\
    \ = \"\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse\
    \ = \"\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back\
    \ = \"\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse\
    \ = \"\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\
    \ = \"\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse\
    \ = \"\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\
    \ = \"\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\
    \ = \"\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse\
    \ = \"\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\
    \ = \"\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse\
    \ = \"\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\
    \ = \"\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\
    \ = \"\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse\
    \ = \"\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\
    \ = \"\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\
    \ = \"\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\
    \ = \"\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_re\n\
    }\nint main() {\n    auto candidate = get_closest_vowel;\n    assert(candidate((\"\
    yogurt\")) == (\"u\"));\n    assert(candidate((\"full\")) == (\"u\"));\n    assert(candidate((\"\
    easy\")) == (\"\"));\n    assert(candidate((\"eAsy\")) == (\"\"));\n    assert(candidate((\"\
    ali\")) == (\"\"));\n    assert(candidate((\"bad\")) == (\"a\"));\n    assert(candidate((\"\
    most\")) == (\"o\"));\n    assert(candidate((\"ab\")) == (\"\"));\n    assert(candidate((\"\
    ba\")) == (\"\"));\n    assert(candidate((\"quick\")) == (\"\"));\n    assert(candidate((\"\
    anime\")) == (\"i\"));\n    assert(candidate((\"Asia\")) == (\"\"));\n    assert(candidate((\"\
    Above\")) == (\"o\"));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpmvwdt67e.cpp: In function \u2018std::string get_closest_vowel(std::string)\u2019\
    :\n/tmp/tmpmvwdt67e.cpp:28:17: error: redeclaration of \u2018std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\u2019\
    \n   28 |     std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\
    \ = \"\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpmvwdt67e.cpp:27:17: note: \u2018std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\u2019\
    \ previously declared here\n   27 |     std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\
    \ = \"\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpmvwdt67e.cpp:33:17: error: redeclaration of \u2018std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\u2019\
    \n   33 |     std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\
    \ = \"\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpmvwdt67e.cpp:32:17: note: \u2018std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\u2019\
    \ previously declared here\n   32 |     std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\
    \ = \"\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpmvwdt67e.cpp:36:17: error: redeclaration of \u2018std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\u2019\
    \n   36 |     std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\
    \ = \"\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpmvwdt67e.cpp:35:17: note: \u2018std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\u2019\
    \ previously declared here\n   35 |     std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\
    \ = \"\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpmvwdt67e.cpp:37:17: error: redeclaration of \u2018std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\u2019\
    \n   37 |     std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\
    \ = \"\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpmvwdt67e.cpp:35:17: note: \u2018std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\u2019\
    \ previously declared here\n   35 |     std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\
    \ = \"\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpmvwdt67e.cpp:39:1: error: expected initializer before \u2018}\u2019 token\n\
    \   39 | }\n      | ^\n/tmp/tmpmvwdt67e.cpp:39:1: warning: no return statement\
    \ in function returning non-void [-Wreturn-type]\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// get_closest_vowel(\"yogurt\") ==> \"u\"\
    \n// get_closest_vowel(\"FULL\") ==> \"U\"\n// get_closest_vowel(\"quick\") ==>\
    \ \"\"\n// get_closest_vowel(\"ab\") ==> \"\"\nstd::string get_closest_vowel(std::string\
    \ word) {\n    std::string vowels = \"AEIOUaeiou\";\n    std::string vowels_reverse\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_reverse = \"AEIOUaeiou\";\n\
    \    std::string vowels_reverse_back = \"AEIOUaeiou\";\n    std::string vowels_reverse_back_reverse\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_back_reverse_back = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse_back_reverse_back_reverse = \"AEIOUaeiou\";\n\
    \    std::string vowels_reverse_back_reverse_back_reverse_back = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse = \"\
    AEIOUaeiou\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse\
    \ = \"AEIO\n}\nint main() {\n    auto candidate = get_closest_vowel;\n    assert(candidate((\"\
    yogurt\")) == (\"u\"));\n    assert(candidate((\"full\")) == (\"u\"));\n    assert(candidate((\"\
    easy\")) == (\"\"));\n    assert(candidate((\"eAsy\")) == (\"\"));\n    assert(candidate((\"\
    ali\")) == (\"\"));\n    assert(candidate((\"bad\")) == (\"a\"));\n    assert(candidate((\"\
    most\")) == (\"o\"));\n    assert(candidate((\"ab\")) == (\"\"));\n    assert(candidate((\"\
    ba\")) == (\"\"));\n    assert(candidate((\"quick\")) == (\"\"));\n    assert(candidate((\"\
    anime\")) == (\"i\"));\n    assert(candidate((\"Asia\")) == (\"\"));\n    assert(candidate((\"\
    Above\")) == (\"o\"));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp86vsq5f6.cpp:34:138: warning: missing terminating \" character\n\
    \   34 |     std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse\
    \ = \"AEIO\n      |                                                          \
    \                                                                            \
    \    ^\n/tmp/tmp86vsq5f6.cpp:34:138: error: missing terminating \" character\n\
    \   34 |     std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse\
    \ = \"AEIO\n      |                                                          \
    \                                                                            \
    \    ^~~~~\n/tmp/tmp86vsq5f6.cpp: In function \u2018std::string get_closest_vowel(std::string)\u2019\
    :\n/tmp/tmp86vsq5f6.cpp:32:17: error: redeclaration of \u2018std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\u2019\
    \n   32 |     std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\
    \ = \"AEIOUaeiou\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmp86vsq5f6.cpp:31:17: note: \u2018std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\u2019\
    \ previously declared here\n   31 |     std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\
    \ = \"AEIOUaeiou\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmp86vsq5f6.cpp:33:17: error: redeclaration of \u2018std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\u2019\
    \n   33 |     std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\
    \ = \"AEIOUaeiou\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmp86vsq5f6.cpp:31:17: note: \u2018std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\u2019\
    \ previously declared here\n   31 |     std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\
    \ = \"AEIOUaeiou\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmp86vsq5f6.cpp:35:1: error: expected primary-expression before \u2018}\u2019\
    \ token\n   35 | }\n      | ^\n/tmp/tmp86vsq5f6.cpp:35:1: error: expected \u2018\
    ,\u2019 or \u2018;\u2019 before \u2018}\u2019 token\n/tmp/tmp86vsq5f6.cpp:35:1:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// get_closest_vowel(\"yogurt\") ==> \"u\"\
    \n// get_closest_vowel(\"FULL\") ==> \"U\"\n// get_closest_vowel(\"quick\") ==>\
    \ \"\"\n// get_closest_vowel(\"ab\") ==> \"\"\nstd::string get_closest_vowel(std::string\
    \ word) {\n    std::string vowels = \"aeiouAEIOU\";\n    std::string vowels_reverse\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse2 = \"aeiouAEIOU\";\n    std::string\
    \ vowels_reverse3 = \"aeiouAEIOU\";\n    std::string vowels_reverse4 = \"aeiouAEIOU\"\
    ;\n    std::string vowels_reverse5 = \"aeiouAEIOU\";\n    std::string vowels_reverse6\
    \ = \"aeiouAEIOU\";\n    std::string vowels_reverse7 = \"aeiouAEIOU\";\n    std::string\
    \ vowels_reverse8 = \"aeiouAEIOU\";\n    std::string vowels_reverse9 = \"aeiouAEIOU\"\
    ;\n    std::string vowels_reverse10 = \"aeiouAEIOU\";\n    std::string vowels_reverse11\
    \ = \"aeiouAEIOU\";\n    std::string vowels_reverse12 = \"aeiouAEIOU\";\n    std::string\
    \ vowels_reverse13 = \"aeiouAEIOU\";\n    std::string vowels_reverse14 = \"aeiouAEIOU\"\
    ;\n    std::string vowels_reverse15 = \"aeiouAEIOU\";\n    std::string vowels_reverse16\
    \ = \"aeiouAEIOU\";\n    std::string vowels_reverse17 = \"aeiouAEIOU\";\n    std::string\
    \ vowels_reverse18 = \"aeiouAEIOU\";\n    std::string vowels_reverse19 = \"aeiouAEIOU\"\
    ;\n    std::string vowels_reverse20 = \"aeiouAEIOU\";\n    std::string vowels_reverse21\
    \ = \"aeiouAEIOU\";\n    std::string vowels_reverse22 = \"aeiouAEIOU\";\n    std::string\
    \ vowels_reverse23 = \"aeiouAEIOU\";\n    std::string vowels_reverse24 = \"aeiouAEIOU\"\
    ;\n    std::string vowels_reverse25 = \"aeiouAEIOU\";\n    std::string vowels_reverse26\
    \ = \"aeiouAEIOU\";\n    std::string vowels_reverse27 = \"aeiouAEIOU\";\n    std::string\
    \ vowels_reverse28 = \"aeiouAEIOU\";\n    std::string vowels_reverse29 = \"aeiouAEIOU\"\
    ;\n    std::string vowels_reverse30 = \"aeiouAEIOU\";\n    std::string vowels_reverse31\
    \ = \"aeiouAEIOU\";\n    std::string vowels_reverse32 = \"aeiouAEIOU\";\n    std::string\
    \ vowels_reverse33 = \"aeiouAEIOU\";\n    std::string vowels_reverse34 = \"aeiouAEIOU\"\
    ;\n    std::string vowels_reverse35 = \"aeiouAEIOU\";\n    std::string vowels_reverse36\
    \ = \"aeiouAE\n}\nint main() {\n    auto candidate = get_closest_vowel;\n    assert(candidate((\"\
    yogurt\")) == (\"u\"));\n    assert(candidate((\"full\")) == (\"u\"));\n    assert(candidate((\"\
    easy\")) == (\"\"));\n    assert(candidate((\"eAsy\")) == (\"\"));\n    assert(candidate((\"\
    ali\")) == (\"\"));\n    assert(candidate((\"bad\")) == (\"a\"));\n    assert(candidate((\"\
    most\")) == (\"o\"));\n    assert(candidate((\"ab\")) == (\"\"));\n    assert(candidate((\"\
    ba\")) == (\"\"));\n    assert(candidate((\"quick\")) == (\"\"));\n    assert(candidate((\"\
    anime\")) == (\"i\"));\n    assert(candidate((\"Asia\")) == (\"\"));\n    assert(candidate((\"\
    Above\")) == (\"o\"));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpe5yt8mg6.cpp:50:36: warning: missing terminating \" character\n\
    \   50 |     std::string vowels_reverse36 = \"aeiouAE\n      |               \
    \                     ^\n/tmp/tmpe5yt8mg6.cpp:50:36: error: missing terminating\
    \ \" character\n   50 |     std::string vowels_reverse36 = \"aeiouAE\n      |\
    \                                    ^~~~~~~~\n/tmp/tmpe5yt8mg6.cpp: In function\
    \ \u2018std::string get_closest_vowel(std::string)\u2019:\n/tmp/tmpe5yt8mg6.cpp:51:1:\
    \ error: expected primary-expression before \u2018}\u2019 token\n   51 | }\n \
    \     | ^\n/tmp/tmpe5yt8mg6.cpp:51:1: error: expected \u2018,\u2019 or \u2018\
    ;\u2019 before \u2018}\u2019 token\n/tmp/tmpe5yt8mg6.cpp:51:1: warning: no return\
    \ statement in function returning non-void [-Wreturn-type]\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// get_closest_vowel(\"yogurt\") ==> \"u\"\
    \n// get_closest_vowel(\"FULL\") ==> \"U\"\n// get_closest_vowel(\"quick\") ==>\
    \ \"\"\n// get_closest_vowel(\"ab\") ==> \"\"\nstd::string get_closest_vowel(std::string\
    \ word) {\n    std::string vowels = \"AEIOUaeiou\";\n    std::string vowels_reverse\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse2 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse3 = \"AEIOUaeiou\";\n    std::string vowels_reverse4 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse5 = \"AEIOUaeiou\";\n    std::string vowels_reverse6\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse7 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse8 = \"AEIOUaeiou\";\n    std::string vowels_reverse9 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse10 = \"AEIOUaeiou\";\n    std::string vowels_reverse11\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse12 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse13 = \"AEIOUaeiou\";\n    std::string vowels_reverse14 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse15 = \"AEIOUaeiou\";\n    std::string vowels_reverse16\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse17 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse18 = \"AEIOUaeiou\";\n    std::string vowels_reverse19 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse20 = \"AEIOUaeiou\";\n    std::string vowels_reverse21\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse22 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse23 = \"AEIOUaeiou\";\n    std::string vowels_reverse24 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse25 = \"AEIOUaeiou\";\n    std::string vowels_reverse26\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse27 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse28 = \"AEIOUaeiou\";\n    std::string vowels_reverse29 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse30 = \"AEIOUaeiou\";\n    std::string vowels_reverse31\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse32 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse33 = \"AEIOUaeiou\";\n    std::string vowels_reverse34 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse35 = \"AEIOUaeiou\";\n    std::string vowels_reverse36\
    \ = \"AEIOU\n}\nint main() {\n    auto candidate = get_closest_vowel;\n    assert(candidate((\"\
    yogurt\")) == (\"u\"));\n    assert(candidate((\"full\")) == (\"u\"));\n    assert(candidate((\"\
    easy\")) == (\"\"));\n    assert(candidate((\"eAsy\")) == (\"\"));\n    assert(candidate((\"\
    ali\")) == (\"\"));\n    assert(candidate((\"bad\")) == (\"a\"));\n    assert(candidate((\"\
    most\")) == (\"o\"));\n    assert(candidate((\"ab\")) == (\"\"));\n    assert(candidate((\"\
    ba\")) == (\"\"));\n    assert(candidate((\"quick\")) == (\"\"));\n    assert(candidate((\"\
    anime\")) == (\"i\"));\n    assert(candidate((\"Asia\")) == (\"\"));\n    assert(candidate((\"\
    Above\")) == (\"o\"));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpvlikdpf8.cpp:50:36: warning: missing terminating \" character\n\
    \   50 |     std::string vowels_reverse36 = \"AEIOU\n      |                 \
    \                   ^\n/tmp/tmpvlikdpf8.cpp:50:36: error: missing terminating\
    \ \" character\n   50 |     std::string vowels_reverse36 = \"AEIOU\n      |  \
    \                                  ^~~~~~\n/tmp/tmpvlikdpf8.cpp: In function \u2018\
    std::string get_closest_vowel(std::string)\u2019:\n/tmp/tmpvlikdpf8.cpp:51:1:\
    \ error: expected primary-expression before \u2018}\u2019 token\n   51 | }\n \
    \     | ^\n/tmp/tmpvlikdpf8.cpp:51:1: error: expected \u2018,\u2019 or \u2018\
    ;\u2019 before \u2018}\u2019 token\n/tmp/tmpvlikdpf8.cpp:51:1: warning: no return\
    \ statement in function returning non-void [-Wreturn-type]\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// get_closest_vowel(\"yogurt\") ==> \"u\"\
    \n// get_closest_vowel(\"FULL\") ==> \"U\"\n// get_closest_vowel(\"quick\") ==>\
    \ \"\"\n// get_closest_vowel(\"ab\") ==> \"\"\nstd::string get_closest_vowel(std::string\
    \ word) {\n    std::string vowels = \"AEIOUaeiou\";\n    std::string vowels_end\
    \ = \"AEIOUaeiou\";\n    std::string vowels_start = \"AEIOUaeiou\";\n    std::string\
    \ vowels_middle = \"AEIOUaeiou\";\n    std::string vowels_start_end = \"AEIOUaeiou\"\
    ;\n    std::string vowels_middle_end = \"AEIOUaeiou\";\n    std::string vowels_start_end_middle\
    \ = \"AEIOUaeiou\";\n    std::string vowels_middle_start_end = \"AEIOUaeiou\"\
    ;\n    std::string vowels_start_middle_end = \"AEIOUaeiou\";\n    std::string\
    \ vowels_start_middle_end_middle = \"AEIOUaeiou\";\n    std::string vowels_start_middle_end_middle_start\
    \ = \"AEIOUaeiou\";\n    std::string vowels_start_middle_end_middle_start_end\
    \ = \"AEIOUaeiou\";\n    std::string vowels_start_middle_end_middle_start_end_middle\
    \ = \"AEIOUaeiou\";\n    std::string vowels_start_middle_end_middle_start_end_middle_start\
    \ = \"AEIOUaeiou\";\n    std::string vowels_start_middle_end_middle_start_end_middle_start_end\
    \ = \"AEIOUaeiou\";\n    std::string vowels_start_middle_end_middle_start_end_middle_start_end_middle\
    \ = \"AEIOUaeiou\";\n    std::string vowels_start_middle_end_middle_start_end_middle_start_end_middle_start\
    \ = \"AEIOUaeiou\";\n    std::string vowels_start_middle_end_middle_start_end_middle_start_end_middle_start_end\
    \ = \"AEIOUaeiou\";\n    std::string vowels_start_middle_end_middle_start_end_middle_start_end_middle_start_end_middle\
    \ = \"AEIOUaeiou\";\n    std::string vowels_start_middle_end_middle_start_end_middle_start_end_middle_start_end_middle_start\
    \ = \"AEIOUaeiou\";\n    std::string vowels_start_middle_end_middle_start_end_middle_start_end_middle_start_end_middle_start_end\
    \ = \"AEIOUaeiou\";\n    std::string vowels_start_middle_end_middle_start_end_middle_start_end_middle_start_end_middle_start_end_middle_start\
    \ = \"AEIOUaeiou\";\n    std::string vowels_start_middle_end_middle_start_end_middle_start_end_middle_start_end_middle_start_end_middle_start_end\
    \ = \"AEIOUaeiou\";\n    std::string vowels_start_middle_end_middle_start_end_middle_start_end_middle_start_end_middle_start_end_middle_start_end_middle_start\
    \ = \"AEIOUaeiou\";\n    std::string vowels_start_middle_end_middle_start_end_middle_start_end_middle_start_end_middle_start_end_middle_start_end_middle_start_end\
    \ = \"AEIOUaeiou\";\n    std::string vowels_start_middle_end_\n}\nint main() {\n\
    \    auto candidate = get_closest_vowel;\n    assert(candidate((\"yogurt\")) ==\
    \ (\"u\"));\n    assert(candidate((\"full\")) == (\"u\"));\n    assert(candidate((\"\
    easy\")) == (\"\"));\n    assert(candidate((\"eAsy\")) == (\"\"));\n    assert(candidate((\"\
    ali\")) == (\"\"));\n    assert(candidate((\"bad\")) == (\"a\"));\n    assert(candidate((\"\
    most\")) == (\"o\"));\n    assert(candidate((\"ab\")) == (\"\"));\n    assert(candidate((\"\
    ba\")) == (\"\"));\n    assert(candidate((\"quick\")) == (\"\"));\n    assert(candidate((\"\
    anime\")) == (\"i\"));\n    assert(candidate((\"Asia\")) == (\"\"));\n    assert(candidate((\"\
    Above\")) == (\"o\"));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpc4ugnmmk.cpp: In function \u2018std::string get_closest_vowel(std::string)\u2019\
    :\n/tmp/tmpc4ugnmmk.cpp:40:1: error: expected initializer before \u2018}\u2019\
    \ token\n   40 | }\n      | ^\n/tmp/tmpc4ugnmmk.cpp:40:1: warning: no return statement\
    \ in function returning non-void [-Wreturn-type]\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// get_closest_vowel(\"yogurt\") ==> \"u\"\
    \n// get_closest_vowel(\"FULL\") ==> \"U\"\n// get_closest_vowel(\"quick\") ==>\
    \ \"\"\n// get_closest_vowel(\"ab\") ==> \"\"\nstd::string get_closest_vowel(std::string\
    \ word) {\n    std::string vowels = \"AEIOUaeiou\";\n    std::string vowels_reverse\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse2 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse3 = \"AEIOUaeiou\";\n    std::string vowels_reverse4 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse5 = \"AEIOUaeiou\";\n    std::string vowels_reverse6\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse7 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse8 = \"AEIOUaeiou\";\n    std::string vowels_reverse9 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse10 = \"AEIOUaeiou\";\n    std::string vowels_reverse11\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse12 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse13 = \"AEIOUaeiou\";\n    std::string vowels_reverse14 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse15 = \"AEIOUaeiou\";\n    std::string vowels_reverse16\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse17 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse18 = \"AEIOUaeiou\";\n    std::string vowels_reverse19 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse20 = \"AEIOUaeiou\";\n    std::string vowels_reverse21\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse22 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse23 = \"AEIOUaeiou\";\n    std::string vowels_reverse24 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse25 = \"AEIOUaeiou\";\n    std::string vowels_reverse26\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse27 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse28 = \"AEIOUaeiou\";\n    std::string vowels_reverse29 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse30 = \"AEIOUaeiou\";\n    std::string vowels_reverse31\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse32 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse33 = \"AEIOUaeiou\";\n    std::string vowels_reverse34 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse35 = \"AEIOUaeiou\";\n    std::string vowels_reverse36\
    \ = \"AEIOU\n}\nint main() {\n    auto candidate = get_closest_vowel;\n    assert(candidate((\"\
    yogurt\")) == (\"u\"));\n    assert(candidate((\"full\")) == (\"u\"));\n    assert(candidate((\"\
    easy\")) == (\"\"));\n    assert(candidate((\"eAsy\")) == (\"\"));\n    assert(candidate((\"\
    ali\")) == (\"\"));\n    assert(candidate((\"bad\")) == (\"a\"));\n    assert(candidate((\"\
    most\")) == (\"o\"));\n    assert(candidate((\"ab\")) == (\"\"));\n    assert(candidate((\"\
    ba\")) == (\"\"));\n    assert(candidate((\"quick\")) == (\"\"));\n    assert(candidate((\"\
    anime\")) == (\"i\"));\n    assert(candidate((\"Asia\")) == (\"\"));\n    assert(candidate((\"\
    Above\")) == (\"o\"));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpem1xlqx6.cpp:50:36: warning: missing terminating \" character\n\
    \   50 |     std::string vowels_reverse36 = \"AEIOU\n      |                 \
    \                   ^\n/tmp/tmpem1xlqx6.cpp:50:36: error: missing terminating\
    \ \" character\n   50 |     std::string vowels_reverse36 = \"AEIOU\n      |  \
    \                                  ^~~~~~\n/tmp/tmpem1xlqx6.cpp: In function \u2018\
    std::string get_closest_vowel(std::string)\u2019:\n/tmp/tmpem1xlqx6.cpp:51:1:\
    \ error: expected primary-expression before \u2018}\u2019 token\n   51 | }\n \
    \     | ^\n/tmp/tmpem1xlqx6.cpp:51:1: error: expected \u2018,\u2019 or \u2018\
    ;\u2019 before \u2018}\u2019 token\n/tmp/tmpem1xlqx6.cpp:51:1: warning: no return\
    \ statement in function returning non-void [-Wreturn-type]\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// get_closest_vowel(\"yogurt\") ==> \"u\"\
    \n// get_closest_vowel(\"FULL\") ==> \"U\"\n// get_closest_vowel(\"quick\") ==>\
    \ \"\"\n// get_closest_vowel(\"ab\") ==> \"\"\nstd::string get_closest_vowel(std::string\
    \ word) {\n    std::string vowels = \"aeiouAEIOU\";\n    std::string vowels_reverse\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse2 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse3 = \"AEIOUaeiou\";\n    std::string vowels_reverse4 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse5 = \"AEIOUaeiou\";\n    std::string vowels_reverse6\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse7 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse8 = \"AEIOUaeiou\";\n    std::string vowels_reverse9 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse10 = \"AEIOUaeiou\";\n    std::string vowels_reverse11\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse12 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse13 = \"AEIOUaeiou\";\n    std::string vowels_reverse14 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse15 = \"AEIOUaeiou\";\n    std::string vowels_reverse16\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse17 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse18 = \"AEIOUaeiou\";\n    std::string vowels_reverse19 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse20 = \"AEIOUaeiou\";\n    std::string vowels_reverse21\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse22 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse23 = \"AEIOUaeiou\";\n    std::string vowels_reverse24 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse25 = \"AEIOUaeiou\";\n    std::string vowels_reverse26\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse27 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse28 = \"AEIOUaeiou\";\n    std::string vowels_reverse29 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse30 = \"AEIOUaeiou\";\n    std::string vowels_reverse31\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse32 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse33 = \"AEIOUaeiou\";\n    std::string vowels_reverse34 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse35 = \"AEIOUaeiou\";\n    std::string vowels_reverse36\
    \ = \"AEIOU\n}\nint main() {\n    auto candidate = get_closest_vowel;\n    assert(candidate((\"\
    yogurt\")) == (\"u\"));\n    assert(candidate((\"full\")) == (\"u\"));\n    assert(candidate((\"\
    easy\")) == (\"\"));\n    assert(candidate((\"eAsy\")) == (\"\"));\n    assert(candidate((\"\
    ali\")) == (\"\"));\n    assert(candidate((\"bad\")) == (\"a\"));\n    assert(candidate((\"\
    most\")) == (\"o\"));\n    assert(candidate((\"ab\")) == (\"\"));\n    assert(candidate((\"\
    ba\")) == (\"\"));\n    assert(candidate((\"quick\")) == (\"\"));\n    assert(candidate((\"\
    anime\")) == (\"i\"));\n    assert(candidate((\"Asia\")) == (\"\"));\n    assert(candidate((\"\
    Above\")) == (\"o\"));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp42gogkya.cpp:50:36: warning: missing terminating \" character\n\
    \   50 |     std::string vowels_reverse36 = \"AEIOU\n      |                 \
    \                   ^\n/tmp/tmp42gogkya.cpp:50:36: error: missing terminating\
    \ \" character\n   50 |     std::string vowels_reverse36 = \"AEIOU\n      |  \
    \                                  ^~~~~~\n/tmp/tmp42gogkya.cpp: In function \u2018\
    std::string get_closest_vowel(std::string)\u2019:\n/tmp/tmp42gogkya.cpp:51:1:\
    \ error: expected primary-expression before \u2018}\u2019 token\n   51 | }\n \
    \     | ^\n/tmp/tmp42gogkya.cpp:51:1: error: expected \u2018,\u2019 or \u2018\
    ;\u2019 before \u2018}\u2019 token\n/tmp/tmp42gogkya.cpp:51:1: warning: no return\
    \ statement in function returning non-void [-Wreturn-type]\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// get_closest_vowel(\"yogurt\") ==> \"u\"\
    \n// get_closest_vowel(\"FULL\") ==> \"U\"\n// get_closest_vowel(\"quick\") ==>\
    \ \"\"\n// get_closest_vowel(\"ab\") ==> \"\"\nstd::string get_closest_vowel(std::string\
    \ word) {\n    std::string vowels = \"AEIOUaeiou\";\n    std::string vowels_reverse\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse2 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse3 = \"AEIOUaeiou\";\n    std::string vowels_reverse4 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse5 = \"AEIOUaeiou\";\n    std::string vowels_reverse6\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse7 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse8 = \"AEIOUaeiou\";\n    std::string vowels_reverse9 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse10 = \"AEIOUaeiou\";\n    std::string vowels_reverse11\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse12 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse13 = \"AEIOUaeiou\";\n    std::string vowels_reverse14 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse15 = \"AEIOUaeiou\";\n    std::string vowels_reverse16\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse17 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse18 = \"AEIOUaeiou\";\n    std::string vowels_reverse19 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse20 = \"AEIOUaeiou\";\n    std::string vowels_reverse21\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse22 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse23 = \"AEIOUaeiou\";\n    std::string vowels_reverse24 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse25 = \"AEIOUaeiou\";\n    std::string vowels_reverse26\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse27 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse28 = \"AEIOUaeiou\";\n    std::string vowels_reverse29 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse30 = \"AEIOUaeiou\";\n    std::string vowels_reverse31\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse32 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse33 = \"AEIOUaeiou\";\n    std::string vowels_reverse34 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse35 = \"AEIOUaeiou\";\n    std::string vowels_reverse36\
    \ = \"AEIOU\n}\nint main() {\n    auto candidate = get_closest_vowel;\n    assert(candidate((\"\
    yogurt\")) == (\"u\"));\n    assert(candidate((\"full\")) == (\"u\"));\n    assert(candidate((\"\
    easy\")) == (\"\"));\n    assert(candidate((\"eAsy\")) == (\"\"));\n    assert(candidate((\"\
    ali\")) == (\"\"));\n    assert(candidate((\"bad\")) == (\"a\"));\n    assert(candidate((\"\
    most\")) == (\"o\"));\n    assert(candidate((\"ab\")) == (\"\"));\n    assert(candidate((\"\
    ba\")) == (\"\"));\n    assert(candidate((\"quick\")) == (\"\"));\n    assert(candidate((\"\
    anime\")) == (\"i\"));\n    assert(candidate((\"Asia\")) == (\"\"));\n    assert(candidate((\"\
    Above\")) == (\"o\"));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp88v96sg0.cpp:50:36: warning: missing terminating \" character\n\
    \   50 |     std::string vowels_reverse36 = \"AEIOU\n      |                 \
    \                   ^\n/tmp/tmp88v96sg0.cpp:50:36: error: missing terminating\
    \ \" character\n   50 |     std::string vowels_reverse36 = \"AEIOU\n      |  \
    \                                  ^~~~~~\n/tmp/tmp88v96sg0.cpp: In function \u2018\
    std::string get_closest_vowel(std::string)\u2019:\n/tmp/tmp88v96sg0.cpp:51:1:\
    \ error: expected primary-expression before \u2018}\u2019 token\n   51 | }\n \
    \     | ^\n/tmp/tmp88v96sg0.cpp:51:1: error: expected \u2018,\u2019 or \u2018\
    ;\u2019 before \u2018}\u2019 token\n/tmp/tmp88v96sg0.cpp:51:1: warning: no return\
    \ statement in function returning non-void [-Wreturn-type]\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// get_closest_vowel(\"yogurt\") ==> \"u\"\
    \n// get_closest_vowel(\"FULL\") ==> \"U\"\n// get_closest_vowel(\"quick\") ==>\
    \ \"\"\n// get_closest_vowel(\"ab\") ==> \"\"\nstd::string get_closest_vowel(std::string\
    \ word) {\n    std::string vowels = \"AEIOUaeiou\";\n    std::string vowels_reverse\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse2 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse3 = \"AEIOUaeiou\";\n    std::string vowels_reverse4 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse5 = \"AEIOUaeiou\";\n    std::string vowels_reverse6\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse7 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse8 = \"AEIOUaeiou\";\n    std::string vowels_reverse9 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse10 = \"AEIOUaeiou\";\n    std::string vowels_reverse11\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse12 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse13 = \"AEIOUaeiou\";\n    std::string vowels_reverse14 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse15 = \"AEIOUaeiou\";\n    std::string vowels_reverse16\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse17 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse18 = \"AEIOUaeiou\";\n    std::string vowels_reverse19 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse20 = \"AEIOUaeiou\";\n    std::string vowels_reverse21\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse22 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse23 = \"AEIOUaeiou\";\n    std::string vowels_reverse24 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse25 = \"AEIOUaeiou\";\n    std::string vowels_reverse26\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse27 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse28 = \"AEIOUaeiou\";\n    std::string vowels_reverse29 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse30 = \"AEIOUaeiou\";\n    std::string vowels_reverse31\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse32 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse33 = \"AEIOUaeiou\";\n    std::string vowels_reverse34 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse35 = \"AEIOUaeiou\";\n    std::string vowels_reverse36\
    \ = \"AEIOU\n}\nint main() {\n    auto candidate = get_closest_vowel;\n    assert(candidate((\"\
    yogurt\")) == (\"u\"));\n    assert(candidate((\"full\")) == (\"u\"));\n    assert(candidate((\"\
    easy\")) == (\"\"));\n    assert(candidate((\"eAsy\")) == (\"\"));\n    assert(candidate((\"\
    ali\")) == (\"\"));\n    assert(candidate((\"bad\")) == (\"a\"));\n    assert(candidate((\"\
    most\")) == (\"o\"));\n    assert(candidate((\"ab\")) == (\"\"));\n    assert(candidate((\"\
    ba\")) == (\"\"));\n    assert(candidate((\"quick\")) == (\"\"));\n    assert(candidate((\"\
    anime\")) == (\"i\"));\n    assert(candidate((\"Asia\")) == (\"\"));\n    assert(candidate((\"\
    Above\")) == (\"o\"));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpqm_e0e8d.cpp:50:36: warning: missing terminating \" character\n\
    \   50 |     std::string vowels_reverse36 = \"AEIOU\n      |                 \
    \                   ^\n/tmp/tmpqm_e0e8d.cpp:50:36: error: missing terminating\
    \ \" character\n   50 |     std::string vowels_reverse36 = \"AEIOU\n      |  \
    \                                  ^~~~~~\n/tmp/tmpqm_e0e8d.cpp: In function \u2018\
    std::string get_closest_vowel(std::string)\u2019:\n/tmp/tmpqm_e0e8d.cpp:51:1:\
    \ error: expected primary-expression before \u2018}\u2019 token\n   51 | }\n \
    \     | ^\n/tmp/tmpqm_e0e8d.cpp:51:1: error: expected \u2018,\u2019 or \u2018\
    ;\u2019 before \u2018}\u2019 token\n/tmp/tmpqm_e0e8d.cpp:51:1: warning: no return\
    \ statement in function returning non-void [-Wreturn-type]\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// get_closest_vowel(\"yogurt\") ==> \"u\"\
    \n// get_closest_vowel(\"FULL\") ==> \"U\"\n// get_closest_vowel(\"quick\") ==>\
    \ \"\"\n// get_closest_vowel(\"ab\") ==> \"\"\nstd::string get_closest_vowel(std::string\
    \ word) {\n    std::string vowels = \"AEIOUaeiou\";\n    std::string vowels_end\
    \ = \"AEIOUaeiou\";\n    std::string vowels_start = \"AEIOUaeiou\";\n    std::string\
    \ vowels_middle = \"AEIOUaeiou\";\n    std::string vowels_start_end = \"AEIOUaeiou\"\
    ;\n    std::string vowels_start_middle = \"AEIOUaeiou\";\n    std::string vowels_end_middle\
    \ = \"AEIOUaeiou\";\n    std::string vowels_middle_start = \"AEIOUaeiou\";\n \
    \   std::string vowels_middle_end = \"AEIOUaeiou\";\n    std::string vowels_start_middle_end\
    \ = \"AEIOUaeiou\";\n    std::string vowels_end_middle_start = \"AEIOUaeiou\"\
    ;\n    std::string vowels_middle_start_end = \"AEIOUaeiou\";\n    std::string\
    \ vowels_start_middle_end_end = \"AEIOUaeiou\";\n    std::string vowels_middle_start_end_end\
    \ = \"AEIOUaeiou\";\n    std::string vowels_start_middle_end_end_end = \"AEIOUaeiou\"\
    ;\n    std::string vowels_middle_start_end_end_end = \"AEIOUaeiou\";\n    std::string\
    \ vowels_start_middle_end_end_end_end = \"AEIOUaeiou\";\n    std::string vowels_middle_start_end_end_end_end_end\
    \ = \"AEIOUaeiou\";\n    std::string vowels_start_middle_end_end_end_end_end_end\
    \ = \"AEIOUaeiou\";\n    std::string vowels_middle_start_end_end_end_end_end_end_end\
    \ = \"AEIOUaeiou\";\n    std::string vowels_start_middle_end_end_end_end_end_end_end_end\
    \ = \"AEIOUaeiou\";\n    std::string vowels_middle_start_end_end_end_end_end_end_end_end_end\
    \ = \"AEIOUaeiou\";\n    std::string vowels_start_middle_end_end_end_end_end_end_end_end_end\
    \ = \"AEIOUaeiou\";\n    std::string vowels_middle_start_end_end_end_end_end_end_end_end_end_end\
    \ = \"AEIOUaeiou\";\n    std::string vowels_start_middle_end_end_end_end_end_end_end_end_end_end_end\
    \ = \"AEIOUaeiou\";\n    std::string vowels_middle_start_end_end_end_end_end_end_end_end_end_end_end\
    \ = \"AEIOUaeiou\";\n    std::string vowels_start_middle_end_end_end_end_end_end_end_end_end_end_end_end\
    \ = \"AEIOUaeiou\";\n    std::string vowels_middle_start_end_end_end_end_end_end_end_end_end_end_end_end_end\
    \ = \"AEIOUaeiou\";\n    std::string vowels_start_middle_end_end_\n}\nint main()\
    \ {\n    auto candidate = get_closest_vowel;\n    assert(candidate((\"yogurt\"\
    )) == (\"u\"));\n    assert(candidate((\"full\")) == (\"u\"));\n    assert(candidate((\"\
    easy\")) == (\"\"));\n    assert(candidate((\"eAsy\")) == (\"\"));\n    assert(candidate((\"\
    ali\")) == (\"\"));\n    assert(candidate((\"bad\")) == (\"a\"));\n    assert(candidate((\"\
    most\")) == (\"o\"));\n    assert(candidate((\"ab\")) == (\"\"));\n    assert(candidate((\"\
    ba\")) == (\"\"));\n    assert(candidate((\"quick\")) == (\"\"));\n    assert(candidate((\"\
    anime\")) == (\"i\"));\n    assert(candidate((\"Asia\")) == (\"\"));\n    assert(candidate((\"\
    Above\")) == (\"o\"));\n}\n"
  stdout: ''
  stderr: "/tmp/tmperuimj02.cpp: In function \u2018std::string get_closest_vowel(std::string)\u2019\
    :\n/tmp/tmperuimj02.cpp:43:1: error: expected initializer before \u2018}\u2019\
    \ token\n   43 | }\n      | ^\n/tmp/tmperuimj02.cpp:43:1: warning: no return statement\
    \ in function returning non-void [-Wreturn-type]\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// get_closest_vowel(\"yogurt\") ==> \"u\"\
    \n// get_closest_vowel(\"FULL\") ==> \"U\"\n// get_closest_vowel(\"quick\") ==>\
    \ \"\"\n// get_closest_vowel(\"ab\") ==> \"\"\nstd::string get_closest_vowel(std::string\
    \ word) {\n    int len = word.length();\n    std::string vowels = \"aeiouAEIOU\"\
    ;\n    std::string vowels_reverse = \"AEIOUaeiou\";\n    std::string vowels_reverse2\
    \ = \"aeiouAEIOU\";\n    std::string vowels_reverse3 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse4 = \"aeiouAEIOU\";\n    std::string vowels_reverse5 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse6 = \"aeiouAEIOU\";\n    std::string vowels_reverse7\
    \ = \"aeiouAEIOU\";\n    std::string vowels_reverse8 = \"aeiouAEIOU\";\n    std::string\
    \ vowels_reverse9 = \"aeiouAEIOU\";\n    std::string vowels_reverse10 = \"aeiouAEIOU\"\
    ;\n    std::string vowels_reverse11 = \"aeiouAEIOU\";\n    std::string vowels_reverse12\
    \ = \"aeiouAEIOU\";\n    std::string vowels_reverse13 = \"aeiouAEIOU\";\n    std::string\
    \ vowels_reverse14 = \"aeiouAEIOU\";\n    std::string vowels_reverse15 = \"aeiouAEIOU\"\
    ;\n    std::string vowels_reverse16 = \"aeiouAEIOU\";\n    std::string vowels_reverse17\
    \ = \"aeiouAEIOU\";\n    std::string vowels_reverse18 = \"aeiouAEIOU\";\n    std::string\
    \ vowels_reverse19 = \"aeiouAEIOU\";\n    std::string vowels_reverse20 = \"aeiouAEIOU\"\
    ;\n    std::string vowels_reverse21 = \"aeiouAEIOU\";\n    std::string vowels_reverse22\
    \ = \"aeiouAEIOU\";\n    std::string vowels_reverse23 = \"aeiouAEIOU\";\n    std::string\
    \ vowels_reverse24 = \"aeiouAEIOU\";\n    std::string vowels_reverse25 = \"aeiouAEIOU\"\
    ;\n    std::string vowels_reverse26 = \"aeiouAEIOU\";\n    std::string vowels_reverse27\
    \ = \"aeiouAEIOU\";\n    std::string vowels_reverse28 = \"aeiouAEIOU\";\n    std::string\
    \ vowels_reverse29 = \"aeiouAEIOU\";\n    std::string vowels_reverse30 = \"aeiouAEIOU\"\
    ;\n    std::string vowels_reverse31 = \"aeiouAEIOU\";\n    std::string vowels_reverse32\
    \ = \"aeiouAEIOU\";\n    std::string vowels_reverse33 = \"aeiouAEIOU\";\n    std::string\
    \ vowels_reverse34 = \"aeiouAEIOU\";\n    std::string vowels_reverse35 = \"aeiouAEIOU\"\
    ;\n    std::string vowels_\n}\nint main() {\n    auto candidate = get_closest_vowel;\n\
    \    assert(candidate((\"yogurt\")) == (\"u\"));\n    assert(candidate((\"full\"\
    )) == (\"u\"));\n    assert(candidate((\"easy\")) == (\"\"));\n    assert(candidate((\"\
    eAsy\")) == (\"\"));\n    assert(candidate((\"ali\")) == (\"\"));\n    assert(candidate((\"\
    bad\")) == (\"a\"));\n    assert(candidate((\"most\")) == (\"o\"));\n    assert(candidate((\"\
    ab\")) == (\"\"));\n    assert(candidate((\"ba\")) == (\"\"));\n    assert(candidate((\"\
    quick\")) == (\"\"));\n    assert(candidate((\"anime\")) == (\"i\"));\n    assert(candidate((\"\
    Asia\")) == (\"\"));\n    assert(candidate((\"Above\")) == (\"o\"));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpmgjm3whv.cpp: In function \u2018std::string get_closest_vowel(std::string)\u2019\
    :\n/tmp/tmpmgjm3whv.cpp:52:1: error: expected initializer before \u2018}\u2019\
    \ token\n   52 | }\n      | ^\n/tmp/tmpmgjm3whv.cpp:52:1: warning: no return statement\
    \ in function returning non-void [-Wreturn-type]\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// get_closest_vowel(\"yogurt\") ==> \"u\"\
    \n// get_closest_vowel(\"FULL\") ==> \"U\"\n// get_closest_vowel(\"quick\") ==>\
    \ \"\"\n// get_closest_vowel(\"ab\") ==> \"\"\nstd::string get_closest_vowel(std::string\
    \ word) {\n    std::string vowels = \"AEIOUaeiou\";\n    std::string vowels_end\
    \ = \"AEIOUaeiouy\";\n    std::string vowels_start = \"AEIOUaeiou\";\n    std::string\
    \ vowels_start_end = \"AEIOUaeiouy\";\n    std::string vowels_start_end_end =\
    \ \"AEIOUaeiouy\";\n    std::string vowels_start_end_end_end = \"AEIOUaeiouy\"\
    ;\n    std::string vowels_start_end_end_end_end = \"AEIOUaeiouy\";\n    std::string\
    \ vowels_start_end_end_end_end_end = \"AEIOUaeiouy\";\n    std::string vowels_start_end_end_end_end_end_end\
    \ = \"AEIOUaeiouy\";\n    std::string vowels_start_end_end_end_end_end_end_end\
    \ = \"AEIOUaeiouy\";\n    std::string vowels_start_end_end_end_end_end_end_end_end\
    \ = \"AEIOUaeiouy\";\n    std::string vowels_start_end_end_end_end_end_end_end_end_end\
    \ = \"AEIOUaeiouy\";\n    std::string vowels_start_end_end_end_end_end_end_end_end_end\
    \ = \"AEIOUaeiouy\";\n    std::string vowels_start_end_end_end_end_end_end_end_end_end_end\
    \ = \"AEIOUaeiouy\";\n    std::string vowels_start_end_end_end_end_end_end_end_end_end_end\
    \ = \"AEIOUaeiouy\";\n    std::string vowels_start_end_end_end_end_end_end_end_end_end_end_end\
    \ = \"AEIOUaeiouy\";\n    std::string vowels_start_end_end_end_end_end_end_end_end_end_end_end_end\
    \ = \"AEIOUaeiouy\";\n    std::string vowels_start_end_end_end_end_end_end_end_end_end_end_end_end\
    \ = \"AEIOUaeiouy\";\n    std::string vowels_start_end_end_end_end_end_end_end_end_end_end_end_end\
    \ = \"AEIOUaeiouy\";\n    std::string vowels_start_end_end_end_end_end_end_end_end_end_end_end_end_end\
    \ = \"AEIOUaeiouy\";\n    std::string vowels_start_end_end_end_end_end_end_end_end_end_end_end_end_end\
    \ = \"AEIOUaeiouy\";\n    std::string vowels_start_end_end_end_end_end_end_end_end_end_end_end_end_end\
    \ = \"AEIOUaeiouy\";\n    std::string vowels_start_end_end_end_end_end_end_end_end_end_end_end_end_end_end\
    \ = \"AEIOUaeiouy\";\n    std::string vowels_start_end_end_end_end_end_end_end_end_end_end_end_end_end_end\
    \ = \"\n}\nint main() {\n    auto candidate = get_closest_vowel;\n    assert(candidate((\"\
    yogurt\")) == (\"u\"));\n    assert(candidate((\"full\")) == (\"u\"));\n    assert(candidate((\"\
    easy\")) == (\"\"));\n    assert(candidate((\"eAsy\")) == (\"\"));\n    assert(candidate((\"\
    ali\")) == (\"\"));\n    assert(candidate((\"bad\")) == (\"a\"));\n    assert(candidate((\"\
    most\")) == (\"o\"));\n    assert(candidate((\"ab\")) == (\"\"));\n    assert(candidate((\"\
    ba\")) == (\"\"));\n    assert(candidate((\"quick\")) == (\"\"));\n    assert(candidate((\"\
    anime\")) == (\"i\"));\n    assert(candidate((\"Asia\")) == (\"\"));\n    assert(candidate((\"\
    Above\")) == (\"o\"));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpq_shy3zv.cpp:37:88: warning: missing terminating \" character\n\
    \   37 |     std::string vowels_start_end_end_end_end_end_end_end_end_end_end_end_end_end_end\
    \ = \"\n      |                                                              \
    \                          ^\n/tmp/tmpq_shy3zv.cpp:37:88: error: missing terminating\
    \ \" character\n/tmp/tmpq_shy3zv.cpp: In function \u2018std::string get_closest_vowel(std::string)\u2019\
    :\n/tmp/tmpq_shy3zv.cpp:26:17: error: redeclaration of \u2018std::string vowels_start_end_end_end_end_end_end_end_end_end\u2019\
    \n   26 |     std::string vowels_start_end_end_end_end_end_end_end_end_end = \"\
    AEIOUaeiouy\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpq_shy3zv.cpp:25:17: note: \u2018std::string vowels_start_end_end_end_end_end_end_end_end_end\u2019\
    \ previously declared here\n   25 |     std::string vowels_start_end_end_end_end_end_end_end_end_end\
    \ = \"AEIOUaeiouy\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpq_shy3zv.cpp:28:17: error: redeclaration of \u2018std::string vowels_start_end_end_end_end_end_end_end_end_end_end\u2019\
    \n   28 |     std::string vowels_start_end_end_end_end_end_end_end_end_end_end\
    \ = \"AEIOUaeiouy\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpq_shy3zv.cpp:27:17: note: \u2018std::string vowels_start_end_end_end_end_end_end_end_end_end_end\u2019\
    \ previously declared here\n   27 |     std::string vowels_start_end_end_end_end_end_end_end_end_end_end\
    \ = \"AEIOUaeiouy\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpq_shy3zv.cpp:31:17: error: redeclaration of \u2018std::string vowels_start_end_end_end_end_end_end_end_end_end_end_end_end\u2019\
    \n   31 |     std::string vowels_start_end_end_end_end_end_end_end_end_end_end_end_end\
    \ = \"AEIOUaeiouy\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpq_shy3zv.cpp:30:17: note: \u2018std::string vowels_start_end_end_end_end_end_end_end_end_end_end_end_end\u2019\
    \ previously declared here\n   30 |     std::string vowels_start_end_end_end_end_end_end_end_end_end_end_end_end\
    \ = \"AEIOUaeiouy\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpq_shy3zv.cpp:32:17: error: redeclaration of \u2018std::string vowels_start_end_end_end_end_end_end_end_end_end_end_end_end\u2019\
    \n   32 |     std::string vowels_start_end_end_end_end_end_end_end_end_end_end_end_end\
    \ = \"AEIOUaeiouy\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpq_shy3zv.cpp:30:17: note: \u2018std::string vowels_start_end_end_end_end_end_end_end_end_end_end_end_end\u2019\
    \ previously declared here\n   30 |     std::string vowels_start_end_end_end_end_end_end_end_end_end_end_end_end\
    \ = \"AEIOUaeiouy\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpq_shy3zv.cpp:34:17: error: redeclaration of \u2018std::string vowels_start_end_end_end_end_end_end_end_end_end_end_end_end_end\u2019\
    \n   34 |     std::string vowels_start_end_end_end_end_end_end_end_end_end_end_end_end_end\
    \ = \"AEIOUaeiouy\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpq_shy3zv.cpp:33:17: note: \u2018std::string vowels_start_end_end_end_end_end_end_end_end_end_end_end_end_end\u2019\
    \ previously declared here\n   33 |     std::string vowels_start_end_end_end_end_end_end_end_end_end_end_end_end_end\
    \ = \"AEIOUaeiouy\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpq_shy3zv.cpp:35:17: error: redeclaration of \u2018std::string vowels_start_end_end_end_end_end_end_end_end_end_end_end_end_end\u2019\
    \n   35 |     std::string vowels_start_end_end_end_end_end_end_end_end_end_end_end_end_end\
    \ = \"AEIOUaeiouy\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpq_shy3zv.cpp:33:17: note: \u2018std::string vowels_start_end_end_end_end_end_end_end_end_end_end_end_end_end\u2019\
    \ previously declared here\n   33 |     std::string vowels_start_end_end_end_end_end_end_end_end_end_end_end_end_end\
    \ = \"AEIOUaeiouy\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpq_shy3zv.cpp:37:17: error: redeclaration of \u2018std::string vowels_start_end_end_end_end_end_end_end_end_end_end_end_end_end_end\u2019\
    \n   37 |     std::string vowels_start_end_end_end_end_end_end_end_end_end_end_end_end_end_end\
    \ = \"\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpq_shy3zv.cpp:36:17: note: \u2018std::string vowels_start_end_end_end_end_end_end_end_end_end_end_end_end_end_end\u2019\
    \ previously declared here\n   36 |     std::string vowels_start_end_end_end_end_end_end_end_end_end_end_end_end_end_end\
    \ = \"AEIOUaeiouy\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpq_shy3zv.cpp:38:1: error: expected primary-expression before \u2018}\u2019\
    \ token\n   38 | }\n      | ^\n/tmp/tmpq_shy3zv.cpp:38:1: warning: no return statement\
    \ in function returning non-void [-Wreturn-type]\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// get_closest_vowel(\"yogurt\") ==> \"u\"\
    \n// get_closest_vowel(\"FULL\") ==> \"U\"\n// get_closest_vowel(\"quick\") ==>\
    \ \"\"\n// get_closest_vowel(\"ab\") ==> \"\"\nstd::string get_closest_vowel(std::string\
    \ word) {\n    std::string vowels = \"AEIOUaeiou\";\n    std::string vowels_reverse\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse2 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse3 = \"AEIOUaeiou\";\n    std::string vowels_reverse4 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse5 = \"AEIOUaeiou\";\n    std::string vowels_reverse6\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse7 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse8 = \"AEIOUaeiou\";\n    std::string vowels_reverse9 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse10 = \"AEIOUaeiou\";\n    std::string vowels_reverse11\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse12 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse13 = \"AEIOUaeiou\";\n    std::string vowels_reverse14 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse15 = \"AEIOUaeiou\";\n    std::string vowels_reverse16\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse17 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse18 = \"AEIOUaeiou\";\n    std::string vowels_reverse19 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse20 = \"AEIOUaeiou\";\n    std::string vowels_reverse21\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse22 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse23 = \"AEIOUaeiou\";\n    std::string vowels_reverse24 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse25 = \"AEIOUaeiou\";\n    std::string vowels_reverse26\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse27 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse28 = \"AEIOUaeiou\";\n    std::string vowels_reverse29 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse30 = \"AEIOUaeiou\";\n    std::string vowels_reverse31\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse32 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse33 = \"AEIOUaeiou\";\n    std::string vowels_reverse34 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse35 = \"AEIOUaeiou\";\n    std::string vowels_reverse36\
    \ = \"AEIOU\n}\nint main() {\n    auto candidate = get_closest_vowel;\n    assert(candidate((\"\
    yogurt\")) == (\"u\"));\n    assert(candidate((\"full\")) == (\"u\"));\n    assert(candidate((\"\
    easy\")) == (\"\"));\n    assert(candidate((\"eAsy\")) == (\"\"));\n    assert(candidate((\"\
    ali\")) == (\"\"));\n    assert(candidate((\"bad\")) == (\"a\"));\n    assert(candidate((\"\
    most\")) == (\"o\"));\n    assert(candidate((\"ab\")) == (\"\"));\n    assert(candidate((\"\
    ba\")) == (\"\"));\n    assert(candidate((\"quick\")) == (\"\"));\n    assert(candidate((\"\
    anime\")) == (\"i\"));\n    assert(candidate((\"Asia\")) == (\"\"));\n    assert(candidate((\"\
    Above\")) == (\"o\"));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpi3rnzxi0.cpp:50:36: warning: missing terminating \" character\n\
    \   50 |     std::string vowels_reverse36 = \"AEIOU\n      |                 \
    \                   ^\n/tmp/tmpi3rnzxi0.cpp:50:36: error: missing terminating\
    \ \" character\n   50 |     std::string vowels_reverse36 = \"AEIOU\n      |  \
    \                                  ^~~~~~\n/tmp/tmpi3rnzxi0.cpp: In function \u2018\
    std::string get_closest_vowel(std::string)\u2019:\n/tmp/tmpi3rnzxi0.cpp:51:1:\
    \ error: expected primary-expression before \u2018}\u2019 token\n   51 | }\n \
    \     | ^\n/tmp/tmpi3rnzxi0.cpp:51:1: error: expected \u2018,\u2019 or \u2018\
    ;\u2019 before \u2018}\u2019 token\n/tmp/tmpi3rnzxi0.cpp:51:1: warning: no return\
    \ statement in function returning non-void [-Wreturn-type]\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// get_closest_vowel(\"yogurt\") ==> \"u\"\
    \n// get_closest_vowel(\"FULL\") ==> \"U\"\n// get_closest_vowel(\"quick\") ==>\
    \ \"\"\n// get_closest_vowel(\"ab\") ==> \"\"\nstd::string get_closest_vowel(std::string\
    \ word) {\n    std::string vowels = \"AEIOUaeiou\";\n    std::string vowels_reverse\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse2 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse3 = \"AEIOUaeiou\";\n    std::string vowels_reverse4 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse5 = \"AEIOUaeiou\";\n    std::string vowels_reverse6\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse7 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse8 = \"AEIOUaeiou\";\n    std::string vowels_reverse9 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse10 = \"AEIOUaeiou\";\n    std::string vowels_reverse11\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse12 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse13 = \"AEIOUaeiou\";\n    std::string vowels_reverse14 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse15 = \"AEIOUaeiou\";\n    std::string vowels_reverse16\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse17 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse18 = \"AEIOUaeiou\";\n    std::string vowels_reverse19 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse20 = \"AEIOUaeiou\";\n    std::string vowels_reverse21\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse22 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse23 = \"AEIOUaeiou\";\n    std::string vowels_reverse24 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse25 = \"AEIOUaeiou\";\n    std::string vowels_reverse26\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse27 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse28 = \"AEIOUaeiou\";\n    std::string vowels_reverse29 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse30 = \"AEIOUaeiou\";\n    std::string vowels_reverse31\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse32 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse33 = \"AEIOUaeiou\";\n    std::string vowels_reverse34 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse35 = \"AEIOUaeiou\";\n    std::string vowels_reverse36\
    \ = \"AEIOU\n}\nint main() {\n    auto candidate = get_closest_vowel;\n    assert(candidate((\"\
    yogurt\")) == (\"u\"));\n    assert(candidate((\"full\")) == (\"u\"));\n    assert(candidate((\"\
    easy\")) == (\"\"));\n    assert(candidate((\"eAsy\")) == (\"\"));\n    assert(candidate((\"\
    ali\")) == (\"\"));\n    assert(candidate((\"bad\")) == (\"a\"));\n    assert(candidate((\"\
    most\")) == (\"o\"));\n    assert(candidate((\"ab\")) == (\"\"));\n    assert(candidate((\"\
    ba\")) == (\"\"));\n    assert(candidate((\"quick\")) == (\"\"));\n    assert(candidate((\"\
    anime\")) == (\"i\"));\n    assert(candidate((\"Asia\")) == (\"\"));\n    assert(candidate((\"\
    Above\")) == (\"o\"));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp675mo7xy.cpp:50:36: warning: missing terminating \" character\n\
    \   50 |     std::string vowels_reverse36 = \"AEIOU\n      |                 \
    \                   ^\n/tmp/tmp675mo7xy.cpp:50:36: error: missing terminating\
    \ \" character\n   50 |     std::string vowels_reverse36 = \"AEIOU\n      |  \
    \                                  ^~~~~~\n/tmp/tmp675mo7xy.cpp: In function \u2018\
    std::string get_closest_vowel(std::string)\u2019:\n/tmp/tmp675mo7xy.cpp:51:1:\
    \ error: expected primary-expression before \u2018}\u2019 token\n   51 | }\n \
    \     | ^\n/tmp/tmp675mo7xy.cpp:51:1: error: expected \u2018,\u2019 or \u2018\
    ;\u2019 before \u2018}\u2019 token\n/tmp/tmp675mo7xy.cpp:51:1: warning: no return\
    \ statement in function returning non-void [-Wreturn-type]\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// get_closest_vowel(\"yogurt\") ==> \"u\"\
    \n// get_closest_vowel(\"FULL\") ==> \"U\"\n// get_closest_vowel(\"quick\") ==>\
    \ \"\"\n// get_closest_vowel(\"ab\") ==> \"\"\nstd::string get_closest_vowel(std::string\
    \ word) {\n    std::string vowels = \"AEIOUaeiou\";\n    std::string vowels_reverse\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse2 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse3 = \"AEIOUaeiou\";\n    std::string vowels_reverse4 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse5 = \"AEIOUaeiou\";\n    std::string vowels_reverse6\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse7 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse8 = \"AEIOUaeiou\";\n    std::string vowels_reverse9 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse10 = \"AEIOUaeiou\";\n    std::string vowels_reverse11\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse12 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse13 = \"AEIOUaeiou\";\n    std::string vowels_reverse14 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse15 = \"AEIOUaeiou\";\n    std::string vowels_reverse16\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse17 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse18 = \"AEIOUaeiou\";\n    std::string vowels_reverse19 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse20 = \"AEIOUaeiou\";\n    std::string vowels_reverse21\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse22 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse23 = \"AEIOUaeiou\";\n    std::string vowels_reverse24 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse25 = \"AEIOUaeiou\";\n    std::string vowels_reverse26\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse27 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse28 = \"AEIOUaeiou\";\n    std::string vowels_reverse29 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse30 = \"AEIOUaeiou\";\n    std::string vowels_reverse31\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse32 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse33 = \"AEIOUaeiou\";\n    std::string vowels_reverse34 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse35 = \"AEIOUaeiou\";\n    std::string vowels_reverse36\
    \ = \"AEIOU\n}\nint main() {\n    auto candidate = get_closest_vowel;\n    assert(candidate((\"\
    yogurt\")) == (\"u\"));\n    assert(candidate((\"full\")) == (\"u\"));\n    assert(candidate((\"\
    easy\")) == (\"\"));\n    assert(candidate((\"eAsy\")) == (\"\"));\n    assert(candidate((\"\
    ali\")) == (\"\"));\n    assert(candidate((\"bad\")) == (\"a\"));\n    assert(candidate((\"\
    most\")) == (\"o\"));\n    assert(candidate((\"ab\")) == (\"\"));\n    assert(candidate((\"\
    ba\")) == (\"\"));\n    assert(candidate((\"quick\")) == (\"\"));\n    assert(candidate((\"\
    anime\")) == (\"i\"));\n    assert(candidate((\"Asia\")) == (\"\"));\n    assert(candidate((\"\
    Above\")) == (\"o\"));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpm8k4gyxn.cpp:50:36: warning: missing terminating \" character\n\
    \   50 |     std::string vowels_reverse36 = \"AEIOU\n      |                 \
    \                   ^\n/tmp/tmpm8k4gyxn.cpp:50:36: error: missing terminating\
    \ \" character\n   50 |     std::string vowels_reverse36 = \"AEIOU\n      |  \
    \                                  ^~~~~~\n/tmp/tmpm8k4gyxn.cpp: In function \u2018\
    std::string get_closest_vowel(std::string)\u2019:\n/tmp/tmpm8k4gyxn.cpp:51:1:\
    \ error: expected primary-expression before \u2018}\u2019 token\n   51 | }\n \
    \     | ^\n/tmp/tmpm8k4gyxn.cpp:51:1: error: expected \u2018,\u2019 or \u2018\
    ;\u2019 before \u2018}\u2019 token\n/tmp/tmpm8k4gyxn.cpp:51:1: warning: no return\
    \ statement in function returning non-void [-Wreturn-type]\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// get_closest_vowel(\"yogurt\") ==> \"u\"\
    \n// get_closest_vowel(\"FULL\") ==> \"U\"\n// get_closest_vowel(\"quick\") ==>\
    \ \"\"\n// get_closest_vowel(\"ab\") ==> \"\"\nstd::string get_closest_vowel(std::string\
    \ word) {\n    std::string vowels = \"AEIOUaeiou\";\n    std::string vowels_rev\
    \ = \"AEIOUaeiou\";\n    std::string vowels_rev2 = \"\";\n    std::string vowels_rev3\
    \ = \"\";\n    std::string vowels_rev4 = \"\";\n    std::string vowels_rev5 =\
    \ \"\";\n    std::string vowels_rev6 = \"\";\n    std::string vowels_rev7 = \"\
    \";\n    std::string vowels_rev8 = \"\";\n    std::string vowels_rev9 = \"\";\n\
    \    std::string vowels_rev10 = \"\";\n    std::string vowels_rev11 = \"\";\n\
    \    std::string vowels_rev12 = \"\";\n    std::string vowels_rev13 = \"\";\n\
    \    std::string vowels_rev14 = \"\";\n    std::string vowels_rev15 = \"\";\n\
    \    std::string vowels_rev16 = \"\";\n    std::string vowels_rev17 = \"\";\n\
    \    std::string vowels_rev18 = \"\";\n    std::string vowels_rev19 = \"\";\n\
    \    std::string vowels_rev20 = \"\";\n    std::string vowels_rev21 = \"\";\n\
    \    std::string vowels_rev22 = \"\";\n    std::string vowels_rev23 = \"\";\n\
    \    std::string vowels_rev24 = \"\";\n    std::string vowels_rev25 = \"\";\n\
    \    std::string vowels_rev26 = \"\";\n    std::string vowels_rev27 = \"\";\n\
    \    std::string vowels_rev28 = \"\";\n    std::string vowels_rev29 = \"\";\n\
    \    std::string vowels_rev30 = \"\";\n    std::string vowels_rev31 = \"\";\n\
    \    std::string vowels_rev32 = \"\";\n    std::string vowels_rev33 = \"\";\n\
    \    std::string vowels_rev34 = \"\";\n    std::string vowels_rev35 = \"\";\n\
    \    std::string vowels_rev36 = \"\";\n    std::string vowels_rev37 = \"\";\n\
    \    std::string vowels_rev38 = \"\";\n    std::string vowels_rev39 = \"\";\n\
    \    std::string vowels_rev40 = \"\";\n    std::string vowels_rev41 = \"\";\n\
    \    std::string vowels_rev42 = \"\";\n    std::string vowels_rev43 = \"\";\n\
    \    std::string vowels_rev44 = \"\";\n    std::string vowels_rev45 = \"\";\n\
    \    std::string vowels_rev46 = \"\";\n    std::string vowels_rev47 = \"\";\n\
    \    std::string vowels_rev48 = \"\";\n    std::string vowels_rev49 = \"\";\n\
    \    std::string vowels_rev50 = \"\";\n    std::string vowels_rev51 = \"\";\n\
    \    std::string vowels_rev52 = \"\";\n    std::string vowels_rev53 = \"\";\n\
    \    std::string vowels_rev54 = \"\";\n    std::string vowels_rev55 = \"\";\n\
    \    std::string vowels_rev56 = \"\";\n    std::string vowels_rev57 = \"\";\n\
    \    std::string vowels_rev58 = \"\";\n    std::string vowels_rev59 = \"\";\n\
    \    std::string vowels_rev60 = \"\";\n    std::string vowels_rev6\n}\nint main()\
    \ {\n    auto candidate = get_closest_vowel;\n    assert(candidate((\"yogurt\"\
    )) == (\"u\"));\n    assert(candidate((\"full\")) == (\"u\"));\n    assert(candidate((\"\
    easy\")) == (\"\"));\n    assert(candidate((\"eAsy\")) == (\"\"));\n    assert(candidate((\"\
    ali\")) == (\"\"));\n    assert(candidate((\"bad\")) == (\"a\"));\n    assert(candidate((\"\
    most\")) == (\"o\"));\n    assert(candidate((\"ab\")) == (\"\"));\n    assert(candidate((\"\
    ba\")) == (\"\"));\n    assert(candidate((\"quick\")) == (\"\"));\n    assert(candidate((\"\
    anime\")) == (\"i\"));\n    assert(candidate((\"Asia\")) == (\"\"));\n    assert(candidate((\"\
    Above\")) == (\"o\"));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpo5ty0lp7.cpp: In function \u2018std::string get_closest_vowel(std::string)\u2019\
    :\n/tmp/tmpo5ty0lp7.cpp:76:1: error: expected initializer before \u2018}\u2019\
    \ token\n   76 | }\n      | ^\n/tmp/tmpo5ty0lp7.cpp:76:1: warning: no return statement\
    \ in function returning non-void [-Wreturn-type]\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// get_closest_vowel(\"yogurt\") ==> \"u\"\
    \n// get_closest_vowel(\"FULL\") ==> \"U\"\n// get_closest_vowel(\"quick\") ==>\
    \ \"\"\n// get_closest_vowel(\"ab\") ==> \"\"\nstd::string get_closest_vowel(std::string\
    \ word) {\n    std::string vowels = \"AEIOUaeiou\";\n    std::string vowel_found\
    \ = \"\";\n    int vowel_index = 0;\n    int vowel_start_index = 0;\n    int vowel_end_index\
    \ = 0;\n    \n    for (int i = 0; i < word.length(); i++) {\n        if (vowels.find(word[i])\
    \ != std::string::npos) {\n            vowel_start_index = i;\n            vowel_end_index\
    \ = i;\n            vowel_index = i;\n        }\n    }\n    \n    for (int i =\
    \ word.length() - 1; i >= 0; i--) {\n        if (vowels.find(word[i]) != std::string::npos)\
    \ {\n            vowel_end_index = i;\n            vowel_index = i;\n        }\n\
    \    }\n    \n    if (vowel_start_index > vowel_end_index) {\n        return \"\
    \";\n    }\n    \n    for (int i = vowel_start_index; i <= vowel_end_index; i++)\
    \ {\n        if (vowels.find(word[i]) != std::string::npos) {\n            vowel_index\
    \ = i;\n        }\n    }\n    \n    if (vowel_index == vowel_start_index) {\n\
    \        return \"\";\n    }\n    \n    return vowels.substr(vowel_index + 1,\
    \ 1);\n}\nint main() {\n    auto candidate = get_closest_vowel;\n    assert(candidate((\"\
    yogurt\")) == (\"u\"));\n    assert(candidate((\"full\")) == (\"u\"));\n    assert(candidate((\"\
    easy\")) == (\"\"));\n    assert(candidate((\"eAsy\")) == (\"\"));\n    assert(candidate((\"\
    ali\")) == (\"\"));\n    assert(candidate((\"bad\")) == (\"a\"));\n    assert(candidate((\"\
    most\")) == (\"o\"));\n    assert(candidate((\"ab\")) == (\"\"));\n    assert(candidate((\"\
    ba\")) == (\"\"));\n    assert(candidate((\"quick\")) == (\"\"));\n    assert(candidate((\"\
    anime\")) == (\"i\"));\n    assert(candidate((\"Asia\")) == (\"\"));\n    assert(candidate((\"\
    Above\")) == (\"o\"));\n}\n"
  stdout: ''
  stderr: "tmp4fvph5m1: /tmp/tmp4fvph5m1.cpp:53: int main(): Assertion `candidate((\"\
    yogurt\")) == (\"u\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// get_closest_vowel(\"yogurt\") ==> \"u\"\
    \n// get_closest_vowel(\"FULL\") ==> \"U\"\n// get_closest_vowel(\"quick\") ==>\
    \ \"\"\n// get_closest_vowel(\"ab\") ==> \"\"\nstd::string get_closest_vowel(std::string\
    \ word) {\n    std::string vowels = \"AEIOUaeiou\";\n    std::string vowels_reverse\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_reverse = \"AEIOUaeiou\";\n\
    \    std::string vowels_reverse_reverse_reverse = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse_reverse_reverse_reverse = \"AEIOUaeiou\";\n    std::string vowels_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AE\n}\nint main() {\n    auto candidate = get_closest_vowel;\n    assert(candidate((\"\
    yogurt\")) == (\"u\"));\n    assert(candidate((\"full\")) == (\"u\"));\n    assert(candidate((\"\
    easy\")) == (\"\"));\n    assert(candidate((\"eAsy\")) == (\"\"));\n    assert(candidate((\"\
    ali\")) == (\"\"));\n    assert(candidate((\"bad\")) == (\"a\"));\n    assert(candidate((\"\
    most\")) == (\"o\"));\n    assert(candidate((\"ab\")) == (\"\"));\n    assert(candidate((\"\
    ba\")) == (\"\"));\n    assert(candidate((\"quick\")) == (\"\"));\n    assert(candidate((\"\
    anime\")) == (\"i\"));\n    assert(candidate((\"Asia\")) == (\"\"));\n    assert(candidate((\"\
    Above\")) == (\"o\"));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp427zgrbj.cpp:35:90: warning: missing terminating \" character\n\
    \   35 |     std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AE\n      |                                                            \
    \                              ^\n/tmp/tmp427zgrbj.cpp:35:90: error: missing terminating\
    \ \" character\n   35 |     std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AE\n      |                                                            \
    \                              ^~~\n/tmp/tmp427zgrbj.cpp: In function \u2018std::string\
    \ get_closest_vowel(std::string)\u2019:\n/tmp/tmp427zgrbj.cpp:22:17: error: redeclaration\
    \ of \u2018std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse\u2019\
    \n   22 |     std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmp427zgrbj.cpp:21:17: note: \u2018std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse\u2019\
    \ previously declared here\n   21 |     std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmp427zgrbj.cpp:23:17: error: redeclaration of \u2018std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse\u2019\
    \n   23 |     std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmp427zgrbj.cpp:21:17: note: \u2018std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse\u2019\
    \ previously declared here\n   21 |     std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmp427zgrbj.cpp:25:17: error: redeclaration of \u2018std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\u2019\
    \n   25 |     std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmp427zgrbj.cpp:24:17: note: \u2018std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\u2019\
    \ previously declared here\n   24 |     std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmp427zgrbj.cpp:26:17: error: redeclaration of \u2018std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\u2019\
    \n   26 |     std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmp427zgrbj.cpp:24:17: note: \u2018std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\u2019\
    \ previously declared here\n   24 |     std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmp427zgrbj.cpp:27:17: error: redeclaration of \u2018std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\u2019\
    \n   27 |     std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmp427zgrbj.cpp:24:17: note: \u2018std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\u2019\
    \ previously declared here\n   24 |     std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmp427zgrbj.cpp:28:17: error: redeclaration of \u2018std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\u2019\
    \n   28 |     std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmp427zgrbj.cpp:24:17: note: \u2018std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\u2019\
    \ previously declared here\n   24 |     std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmp427zgrbj.cpp:29:17: error: redeclaration of \u2018std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\u2019\
    \n   29 |     std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmp427zgrbj.cpp:24:17: note: \u2018std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\u2019\
    \ previously declared here\n   24 |     std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmp427zgrbj.cpp:30:17: error: redeclaration of \u2018std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\u2019\
    \n   30 |     std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmp427zgrbj.cpp:24:17: note: \u2018std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\u2019\
    \ previously declared here\n   24 |     std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmp427zgrbj.cpp:31:17: error: redeclaration of \u2018std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\u2019\
    \n   31 |     std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmp427zgrbj.cpp:24:17: note: \u2018std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\u2019\
    \ previously declared here\n   24 |     std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmp427zgrbj.cpp:32:17: error: redeclaration of \u2018std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\u2019\
    \n   32 |     std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmp427zgrbj.cpp:24:17: note: \u2018std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\u2019\
    \ previously declared here\n   24 |     std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmp427zgrbj.cpp:33:17: error: redeclaration of \u2018std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\u2019\
    \n   33 |     std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmp427zgrbj.cpp:24:17: note: \u2018std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\u2019\
    \ previously declared here\n   24 |     std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmp427zgrbj.cpp:34:17: error: redeclaration of \u2018std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\u2019\
    \n   34 |     std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmp427zgrbj.cpp:24:17: note: \u2018std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\u2019\
    \ previously declared here\n   24 |     std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmp427zgrbj.cpp:35:17: error: redeclaration of \u2018std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\u2019\
    \n   35 |     std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AE\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmp427zgrbj.cpp:24:17: note: \u2018std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\u2019\
    \ previously declared here\n   24 |     std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmp427zgrbj.cpp:36:1: error: expected primary-expression before \u2018}\u2019\
    \ token\n   36 | }\n      | ^\n/tmp/tmp427zgrbj.cpp:36:1: warning: no return statement\
    \ in function returning non-void [-Wreturn-type]\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// get_closest_vowel(\"yogurt\") ==> \"u\"\
    \n// get_closest_vowel(\"FULL\") ==> \"U\"\n// get_closest_vowel(\"quick\") ==>\
    \ \"\"\n// get_closest_vowel(\"ab\") ==> \"\"\nstd::string get_closest_vowel(std::string\
    \ word) {\n    std::string vowels = \"AEIOUaeiou\";\n    std::string vowels_reverse\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse2 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse3 = \"AEIOUaeiou\";\n    std::string vowels_reverse4 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse5 = \"AEIOUaeiou\";\n    std::string vowels_reverse6\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse7 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse8 = \"AEIOUaeiou\";\n    std::string vowels_reverse9 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse10 = \"AEIOUaeiou\";\n    std::string vowels_reverse11\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse12 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse13 = \"AEIOUaeiou\";\n    std::string vowels_reverse14 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse15 = \"AEIOUaeiou\";\n    std::string vowels_reverse16\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse17 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse18 = \"AEIOUaeiou\";\n    std::string vowels_reverse19 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse20 = \"AEIOUaeiou\";\n    std::string vowels_reverse21\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse22 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse23 = \"AEIOUaeiou\";\n    std::string vowels_reverse24 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse25 = \"AEIOUaeiou\";\n    std::string vowels_reverse26\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse27 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse28 = \"AEIOUaeiou\";\n    std::string vowels_reverse29 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse30 = \"AEIOUaeiou\";\n    std::string vowels_reverse31\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse32 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse33 = \"AEIOUaeiou\";\n    std::string vowels_reverse34 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse35 = \"AEIOUaeiou\";\n    std::string vowels_reverse36\
    \ = \"AEIOU\n}\nint main() {\n    auto candidate = get_closest_vowel;\n    assert(candidate((\"\
    yogurt\")) == (\"u\"));\n    assert(candidate((\"full\")) == (\"u\"));\n    assert(candidate((\"\
    easy\")) == (\"\"));\n    assert(candidate((\"eAsy\")) == (\"\"));\n    assert(candidate((\"\
    ali\")) == (\"\"));\n    assert(candidate((\"bad\")) == (\"a\"));\n    assert(candidate((\"\
    most\")) == (\"o\"));\n    assert(candidate((\"ab\")) == (\"\"));\n    assert(candidate((\"\
    ba\")) == (\"\"));\n    assert(candidate((\"quick\")) == (\"\"));\n    assert(candidate((\"\
    anime\")) == (\"i\"));\n    assert(candidate((\"Asia\")) == (\"\"));\n    assert(candidate((\"\
    Above\")) == (\"o\"));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp_cbzl6gd.cpp:50:36: warning: missing terminating \" character\n\
    \   50 |     std::string vowels_reverse36 = \"AEIOU\n      |                 \
    \                   ^\n/tmp/tmp_cbzl6gd.cpp:50:36: error: missing terminating\
    \ \" character\n   50 |     std::string vowels_reverse36 = \"AEIOU\n      |  \
    \                                  ^~~~~~\n/tmp/tmp_cbzl6gd.cpp: In function \u2018\
    std::string get_closest_vowel(std::string)\u2019:\n/tmp/tmp_cbzl6gd.cpp:51:1:\
    \ error: expected primary-expression before \u2018}\u2019 token\n   51 | }\n \
    \     | ^\n/tmp/tmp_cbzl6gd.cpp:51:1: error: expected \u2018,\u2019 or \u2018\
    ;\u2019 before \u2018}\u2019 token\n/tmp/tmp_cbzl6gd.cpp:51:1: warning: no return\
    \ statement in function returning non-void [-Wreturn-type]\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// get_closest_vowel(\"yogurt\") ==> \"u\"\
    \n// get_closest_vowel(\"FULL\") ==> \"U\"\n// get_closest_vowel(\"quick\") ==>\
    \ \"\"\n// get_closest_vowel(\"ab\") ==> \"\"\nstd::string get_closest_vowel(std::string\
    \ word) {\n    std::string vowels = \"AEIOUaeiou\";\n    std::string vowels_reverse\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_reverse = \"AEIOUaeiou\";\n\
    \    std::string vowels_reverse_back = \"AEIOUaeiou\";\n    std::string vowels_reverse_back_reverse\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_back_reverse_back = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse_back_reverse_back_reverse = \"AEIOUaeiou\";\n\
    \    std::string vowels_reverse_back_reverse_back_reverse_back = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse = \"\
    AEIOUaeiou\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse\
    \ = \"AEIO\n}\nint main() {\n    auto candidate = get_closest_vowel;\n    assert(candidate((\"\
    yogurt\")) == (\"u\"));\n    assert(candidate((\"full\")) == (\"u\"));\n    assert(candidate((\"\
    easy\")) == (\"\"));\n    assert(candidate((\"eAsy\")) == (\"\"));\n    assert(candidate((\"\
    ali\")) == (\"\"));\n    assert(candidate((\"bad\")) == (\"a\"));\n    assert(candidate((\"\
    most\")) == (\"o\"));\n    assert(candidate((\"ab\")) == (\"\"));\n    assert(candidate((\"\
    ba\")) == (\"\"));\n    assert(candidate((\"quick\")) == (\"\"));\n    assert(candidate((\"\
    anime\")) == (\"i\"));\n    assert(candidate((\"Asia\")) == (\"\"));\n    assert(candidate((\"\
    Above\")) == (\"o\"));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp41k94qtp.cpp:34:138: warning: missing terminating \" character\n\
    \   34 |     std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse\
    \ = \"AEIO\n      |                                                          \
    \                                                                            \
    \    ^\n/tmp/tmp41k94qtp.cpp:34:138: error: missing terminating \" character\n\
    \   34 |     std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse\
    \ = \"AEIO\n      |                                                          \
    \                                                                            \
    \    ^~~~~\n/tmp/tmp41k94qtp.cpp: In function \u2018std::string get_closest_vowel(std::string)\u2019\
    :\n/tmp/tmp41k94qtp.cpp:32:17: error: redeclaration of \u2018std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\u2019\
    \n   32 |     std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\
    \ = \"AEIOUaeiou\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmp41k94qtp.cpp:31:17: note: \u2018std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\u2019\
    \ previously declared here\n   31 |     std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\
    \ = \"AEIOUaeiou\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmp41k94qtp.cpp:33:17: error: redeclaration of \u2018std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\u2019\
    \n   33 |     std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\
    \ = \"AEIOUaeiou\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmp41k94qtp.cpp:31:17: note: \u2018std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\u2019\
    \ previously declared here\n   31 |     std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\
    \ = \"AEIOUaeiou\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmp41k94qtp.cpp:35:1: error: expected primary-expression before \u2018}\u2019\
    \ token\n   35 | }\n      | ^\n/tmp/tmp41k94qtp.cpp:35:1: error: expected \u2018\
    ,\u2019 or \u2018;\u2019 before \u2018}\u2019 token\n/tmp/tmp41k94qtp.cpp:35:1:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// get_closest_vowel(\"yogurt\") ==> \"u\"\
    \n// get_closest_vowel(\"FULL\") ==> \"U\"\n// get_closest_vowel(\"quick\") ==>\
    \ \"\"\n// get_closest_vowel(\"ab\") ==> \"\"\nstd::string get_closest_vowel(std::string\
    \ word) {\n    std::string vowels = \"AEIOUaeiou\";\n    std::string vowels_reverse\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_reverse = \"\";\n    std::string\
    \ vowels_reverse_back = \"\";\n    std::string vowels_reverse_back_reverse = \"\
    \";\n    std::string vowels_reverse_back_reverse_back = \"\";\n    std::string\
    \ vowels_reverse_back_reverse_back_reverse = \"\";\n    std::string vowels_reverse_back_reverse_back_reverse_back\
    \ = \"\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse\
    \ = \"\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back\
    \ = \"\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse\
    \ = \"\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\
    \ = \"\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse\
    \ = \"\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\
    \ = \"\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\
    \ = \"\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse\
    \ = \"\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\
    \ = \"\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse\
    \ = \"\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\
    \ = \"\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\
    \ = \"\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\
    \ = \"\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\
    \ = \"\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\
    \ = \"\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\
    \ = \"\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\
    \ = \"\";\n    \n}\nint main() {\n    auto candidate = get_closest_vowel;\n  \
    \  assert(candidate((\"yogurt\")) == (\"u\"));\n    assert(candidate((\"full\"\
    )) == (\"u\"));\n    assert(candidate((\"easy\")) == (\"\"));\n    assert(candidate((\"\
    eAsy\")) == (\"\"));\n    assert(candidate((\"ali\")) == (\"\"));\n    assert(candidate((\"\
    bad\")) == (\"a\"));\n    assert(candidate((\"most\")) == (\"o\"));\n    assert(candidate((\"\
    ab\")) == (\"\"));\n    assert(candidate((\"ba\")) == (\"\"));\n    assert(candidate((\"\
    quick\")) == (\"\"));\n    assert(candidate((\"anime\")) == (\"i\"));\n    assert(candidate((\"\
    Asia\")) == (\"\"));\n    assert(candidate((\"Above\")) == (\"o\"));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpcpb8241e.cpp: In function \u2018std::string get_closest_vowel(std::string)\u2019\
    :\n/tmp/tmpcpb8241e.cpp:28:17: error: redeclaration of \u2018std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\u2019\
    \n   28 |     std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\
    \ = \"\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpcpb8241e.cpp:27:17: note: \u2018std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\u2019\
    \ previously declared here\n   27 |     std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\
    \ = \"\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpcpb8241e.cpp:33:17: error: redeclaration of \u2018std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\u2019\
    \n   33 |     std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\
    \ = \"\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpcpb8241e.cpp:32:17: note: \u2018std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\u2019\
    \ previously declared here\n   32 |     std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\
    \ = \"\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpcpb8241e.cpp:34:17: error: redeclaration of \u2018std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\u2019\
    \n   34 |     std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\
    \ = \"\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpcpb8241e.cpp:32:17: note: \u2018std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\u2019\
    \ previously declared here\n   32 |     std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\
    \ = \"\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpcpb8241e.cpp:35:17: error: redeclaration of \u2018std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\u2019\
    \n   35 |     std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\
    \ = \"\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpcpb8241e.cpp:32:17: note: \u2018std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\u2019\
    \ previously declared here\n   32 |     std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\
    \ = \"\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpcpb8241e.cpp:36:17: error: redeclaration of \u2018std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\u2019\
    \n   36 |     std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\
    \ = \"\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpcpb8241e.cpp:32:17: note: \u2018std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\u2019\
    \ previously declared here\n   32 |     std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\
    \ = \"\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpcpb8241e.cpp:37:17: error: redeclaration of \u2018std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\u2019\
    \n   37 |     std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\
    \ = \"\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpcpb8241e.cpp:32:17: note: \u2018std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\u2019\
    \ previously declared here\n   32 |     std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\
    \ = \"\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpcpb8241e.cpp:38:17: error: redeclaration of \u2018std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\u2019\
    \n   38 |     std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\
    \ = \"\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpcpb8241e.cpp:32:17: note: \u2018std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\u2019\
    \ previously declared here\n   32 |     std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\
    \ = \"\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpcpb8241e.cpp:40:1: warning: no return statement in function returning\
    \ non-void [-Wreturn-type]\n   40 | }\n      | ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// get_closest_vowel(\"yogurt\") ==> \"u\"\
    \n// get_closest_vowel(\"FULL\") ==> \"U\"\n// get_closest_vowel(\"quick\") ==>\
    \ \"\"\n// get_closest_vowel(\"ab\") ==> \"\"\nstd::string get_closest_vowel(std::string\
    \ word) {\n    std::string vowels = \"AEIOUaeiou\";\n    std::string vowels_reverse\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse2 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse3 = \"AEIOUaeiou\";\n    std::string vowels_reverse4 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse5 = \"AEIOUaeiou\";\n    std::string vowels_reverse6\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse7 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse8 = \"AEIOUaeiou\";\n    std::string vowels_reverse9 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse10 = \"AEIOUaeiou\";\n    std::string vowels_reverse11\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse12 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse13 = \"AEIOUaeiou\";\n    std::string vowels_reverse14 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse15 = \"AEIOUaeiou\";\n    std::string vowels_reverse16\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse17 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse18 = \"AEIOUaeiou\";\n    std::string vowels_reverse19 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse20 = \"AEIOUaeiou\";\n    std::string vowels_reverse21\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse22 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse23 = \"AEIOUaeiou\";\n    std::string vowels_reverse24 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse25 = \"AEIOUaeiou\";\n    std::string vowels_reverse26\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse27 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse28 = \"AEIOUaeiou\";\n    std::string vowels_reverse29 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse30 = \"AEIOUaeiou\";\n    std::string vowels_reverse31\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse32 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse33 = \"AEIOUaeiou\";\n    std::string vowels_reverse34 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse35 = \"AEIOUaeiou\";\n    std::string vowels_reverse36\
    \ = \"AEIOU\n}\nint main() {\n    auto candidate = get_closest_vowel;\n    assert(candidate((\"\
    yogurt\")) == (\"u\"));\n    assert(candidate((\"full\")) == (\"u\"));\n    assert(candidate((\"\
    easy\")) == (\"\"));\n    assert(candidate((\"eAsy\")) == (\"\"));\n    assert(candidate((\"\
    ali\")) == (\"\"));\n    assert(candidate((\"bad\")) == (\"a\"));\n    assert(candidate((\"\
    most\")) == (\"o\"));\n    assert(candidate((\"ab\")) == (\"\"));\n    assert(candidate((\"\
    ba\")) == (\"\"));\n    assert(candidate((\"quick\")) == (\"\"));\n    assert(candidate((\"\
    anime\")) == (\"i\"));\n    assert(candidate((\"Asia\")) == (\"\"));\n    assert(candidate((\"\
    Above\")) == (\"o\"));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp07pyksvu.cpp:50:36: warning: missing terminating \" character\n\
    \   50 |     std::string vowels_reverse36 = \"AEIOU\n      |                 \
    \                   ^\n/tmp/tmp07pyksvu.cpp:50:36: error: missing terminating\
    \ \" character\n   50 |     std::string vowels_reverse36 = \"AEIOU\n      |  \
    \                                  ^~~~~~\n/tmp/tmp07pyksvu.cpp: In function \u2018\
    std::string get_closest_vowel(std::string)\u2019:\n/tmp/tmp07pyksvu.cpp:51:1:\
    \ error: expected primary-expression before \u2018}\u2019 token\n   51 | }\n \
    \     | ^\n/tmp/tmp07pyksvu.cpp:51:1: error: expected \u2018,\u2019 or \u2018\
    ;\u2019 before \u2018}\u2019 token\n/tmp/tmp07pyksvu.cpp:51:1: warning: no return\
    \ statement in function returning non-void [-Wreturn-type]\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// get_closest_vowel(\"yogurt\") ==> \"u\"\
    \n// get_closest_vowel(\"FULL\") ==> \"U\"\n// get_closest_vowel(\"quick\") ==>\
    \ \"\"\n// get_closest_vowel(\"ab\") ==> \"\"\nstd::string get_closest_vowel(std::string\
    \ word) {\n    // Write your code here\n    std::string vowels = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse = vowels.rbegin();\n    std::string vowels_reverse2\
    \ = vowels.rend();\n    std::string vowels_reverse3 = vowels.rbegin();\n    std::string\
    \ vowels_reverse4 = vowels.rend();\n    std::string vowels_reverse5 = vowels.rbegin();\n\
    \    std::string vowels_reverse6 = vowels.rend();\n    std::string vowels_reverse7\
    \ = vowels.rbegin();\n    std::string vowels_reverse8 = vowels.rend();\n    std::string\
    \ vowels_reverse9 = vowels.rbegin();\n    std::string vowels_reverse10 = vowels.rend();\n\
    \    std::string vowels_reverse11 = vowels.rbegin();\n    std::string vowels_reverse12\
    \ = vowels.rend();\n    std::string vowels_reverse13 = vowels.rbegin();\n    std::string\
    \ vowels_reverse14 = vowels.rend();\n    std::string vowels_reverse15 = vowels.rbegin();\n\
    \    std::string vowels_reverse16 = vowels.rend();\n    std::string vowels_reverse17\
    \ = vowels.rbegin();\n    std::string vowels_reverse18 = vowels.rend();\n    std::string\
    \ vowels_reverse19 = vowels.rbegin();\n    std::string vowels_reverse20 = vowels.rend();\n\
    \    std::string vowels_reverse21 = vowels.rbegin();\n    std::string vowels_reverse22\
    \ = vowels.rend();\n    std::string vowels_reverse23 = vowels.rbegin();\n    std::string\
    \ vowels_reverse24 = vowels.rend();\n    std::string vowels_reverse25 = vowels.rbegin();\n\
    \    std::string vowels_reverse26 = vowels.rend();\n    std::string vowels_reverse27\
    \ = vowels.rbegin();\n    std::string vowels_reverse28 = vowels.rend();\n    std::string\
    \ vowels_reverse29 = vowels.rbegin();\n    std::string vowels_reverse30 = vowels.rend();\n\
    \    std::string vowels_reverse31 = vowels.rbegin();\n    std::string vowels_reverse32\
    \ = vowels.rend();\n    std::string vowels_reverse33 = vowels.rbegin();\n    std::string\
    \ vowels_reverse34 = vowels.rend();\n    std::string vowels_reverse35 = vowels.rbegin();\n\
    \    std::string vowels_reverse36 = vowels.rend();\n    std::string vowels_reverse37\
    \ = vowels.rbegin();\n    std::string vowels_reverse38 = vowels.rend();\n    std::string\
    \ vowels_reverse39 = vowels.rbegin();\n    std::string vowels_reverse40 = vowels.rend();\n\
    \    std::string vowels_reverse41 = vowel\n}\nint main() {\n    auto candidate\
    \ = get_closest_vowel;\n    assert(candidate((\"yogurt\")) == (\"u\"));\n    assert(candidate((\"\
    full\")) == (\"u\"));\n    assert(candidate((\"easy\")) == (\"\"));\n    assert(candidate((\"\
    eAsy\")) == (\"\"));\n    assert(candidate((\"ali\")) == (\"\"));\n    assert(candidate((\"\
    bad\")) == (\"a\"));\n    assert(candidate((\"most\")) == (\"o\"));\n    assert(candidate((\"\
    ab\")) == (\"\"));\n    assert(candidate((\"ba\")) == (\"\"));\n    assert(candidate((\"\
    quick\")) == (\"\"));\n    assert(candidate((\"anime\")) == (\"i\"));\n    assert(candidate((\"\
    Asia\")) == (\"\"));\n    assert(candidate((\"Above\")) == (\"o\"));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpjcongq5j.cpp: In function \u2018std::string get_closest_vowel(std::string)\u2019\
    :\n/tmp/tmpjcongq5j.cpp:16:47: error: conversion from \u2018std::__cxx11::basic_string<char>::reverse_iterator\u2019\
    \ {aka \u2018std::reverse_iterator<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char>\
    \ > >\u2019} to non-scalar type \u2018std::string\u2019 {aka \u2018std::__cxx11::basic_string<char>\u2019\
    } requested\n   16 |     std::string vowels_reverse = vowels.rbegin();\n     \
    \ |                                  ~~~~~~~~~~~~~^~\n/tmp/tmpjcongq5j.cpp:17:46:\
    \ error: conversion from \u2018std::__cxx11::basic_string<char>::reverse_iterator\u2019\
    \ {aka \u2018std::reverse_iterator<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char>\
    \ > >\u2019} to non-scalar type \u2018std::string\u2019 {aka \u2018std::__cxx11::basic_string<char>\u2019\
    } requested\n   17 |     std::string vowels_reverse2 = vowels.rend();\n      |\
    \                                   ~~~~~~~~~~~^~\n/tmp/tmpjcongq5j.cpp:18:48:\
    \ error: conversion from \u2018std::__cxx11::basic_string<char>::reverse_iterator\u2019\
    \ {aka \u2018std::reverse_iterator<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char>\
    \ > >\u2019} to non-scalar type \u2018std::string\u2019 {aka \u2018std::__cxx11::basic_string<char>\u2019\
    } requested\n   18 |     std::string vowels_reverse3 = vowels.rbegin();\n    \
    \  |                                   ~~~~~~~~~~~~~^~\n/tmp/tmpjcongq5j.cpp:19:46:\
    \ error: conversion from \u2018std::__cxx11::basic_string<char>::reverse_iterator\u2019\
    \ {aka \u2018std::reverse_iterator<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char>\
    \ > >\u2019} to non-scalar type \u2018std::string\u2019 {aka \u2018std::__cxx11::basic_string<char>\u2019\
    } requested\n   19 |     std::string vowels_reverse4 = vowels.rend();\n      |\
    \                                   ~~~~~~~~~~~^~\n/tmp/tmpjcongq5j.cpp:20:48:\
    \ error: conversion from \u2018std::__cxx11::basic_string<char>::reverse_iterator\u2019\
    \ {aka \u2018std::reverse_iterator<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char>\
    \ > >\u2019} to non-scalar type \u2018std::string\u2019 {aka \u2018std::__cxx11::basic_string<char>\u2019\
    } requested\n   20 |     std::string vowels_reverse5 = vowels.rbegin();\n    \
    \  |                                   ~~~~~~~~~~~~~^~\n/tmp/tmpjcongq5j.cpp:21:46:\
    \ error: conversion from \u2018std::__cxx11::basic_string<char>::reverse_iterator\u2019\
    \ {aka \u2018std::reverse_iterator<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char>\
    \ > >\u2019} to non-scalar type \u2018std::string\u2019 {aka \u2018std::__cxx11::basic_string<char>\u2019\
    } requested\n   21 |     std::string vowels_reverse6 = vowels.rend();\n      |\
    \                                   ~~~~~~~~~~~^~\n/tmp/tmpjcongq5j.cpp:22:48:\
    \ error: conversion from \u2018std::__cxx11::basic_string<char>::reverse_iterator\u2019\
    \ {aka \u2018std::reverse_iterator<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char>\
    \ > >\u2019} to non-scalar type \u2018std::string\u2019 {aka \u2018std::__cxx11::basic_string<char>\u2019\
    } requested\n   22 |     std::string vowels_reverse7 = vowels.rbegin();\n    \
    \  |                                   ~~~~~~~~~~~~~^~\n/tmp/tmpjcongq5j.cpp:23:46:\
    \ error: conversion from \u2018std::__cxx11::basic_string<char>::reverse_iterator\u2019\
    \ {aka \u2018std::reverse_iterator<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char>\
    \ > >\u2019} to non-scalar type \u2018std::string\u2019 {aka \u2018std::__cxx11::basic_string<char>\u2019\
    } requested\n   23 |     std::string vowels_reverse8 = vowels.rend();\n      |\
    \                                   ~~~~~~~~~~~^~\n/tmp/tmpjcongq5j.cpp:24:48:\
    \ error: conversion from \u2018std::__cxx11::basic_string<char>::reverse_iterator\u2019\
    \ {aka \u2018std::reverse_iterator<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char>\
    \ > >\u2019} to non-scalar type \u2018std::string\u2019 {aka \u2018std::__cxx11::basic_string<char>\u2019\
    } requested\n   24 |     std::string vowels_reverse9 = vowels.rbegin();\n    \
    \  |                                   ~~~~~~~~~~~~~^~\n/tmp/tmpjcongq5j.cpp:25:47:\
    \ error: conversion from \u2018std::__cxx11::basic_string<char>::reverse_iterator\u2019\
    \ {aka \u2018std::reverse_iterator<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char>\
    \ > >\u2019} to non-scalar type \u2018std::string\u2019 {aka \u2018std::__cxx11::basic_string<char>\u2019\
    } requested\n   25 |     std::string vowels_reverse10 = vowels.rend();\n     \
    \ |                                    ~~~~~~~~~~~^~\n/tmp/tmpjcongq5j.cpp:26:49:\
    \ error: conversion from \u2018std::__cxx11::basic_string<char>::reverse_iterator\u2019\
    \ {aka \u2018std::reverse_iterator<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char>\
    \ > >\u2019} to non-scalar type \u2018std::string\u2019 {aka \u2018std::__cxx11::basic_string<char>\u2019\
    } requested\n   26 |     std::string vowels_reverse11 = vowels.rbegin();\n   \
    \   |                                    ~~~~~~~~~~~~~^~\n/tmp/tmpjcongq5j.cpp:27:47:\
    \ error: conversion from \u2018std::__cxx11::basic_string<char>::reverse_iterator\u2019\
    \ {aka \u2018std::reverse_iterator<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char>\
    \ > >\u2019} to non-scalar type \u2018std::string\u2019 {aka \u2018std::__cxx11::basic_string<char>\u2019\
    } requested\n   27 |     std::string vowels_reverse12 = vowels.rend();\n     \
    \ |                                    ~~~~~~~~~~~^~\n/tmp/tmpjcongq5j.cpp:28:49:\
    \ error: conversion from \u2018std::__cxx11::basic_string<char>::reverse_iterator\u2019\
    \ {aka \u2018std::reverse_iterator<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char>\
    \ > >\u2019} to non-scalar type \u2018std::string\u2019 {aka \u2018std::__cxx11::basic_string<char>\u2019\
    } requested\n   28 |     std::string vowels_reverse13 = vowels.rbegin();\n   \
    \   |                                    ~~~~~~~~~~~~~^~\n/tmp/tmpjcongq5j.cpp:29:47:\
    \ error: conversion from \u2018std::__cxx11::basic_string<char>::reverse_iterator\u2019\
    \ {aka \u2018std::reverse_iterator<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char>\
    \ > >\u2019} to non-scalar type \u2018std::string\u2019 {aka \u2018std::__cxx11::basic_string<char>\u2019\
    } requested\n   29 |     std::string vowels_reverse14 = vowels.rend();\n     \
    \ |                                    ~~~~~~~~~~~^~\n/tmp/tmpjcongq5j.cpp:30:49:\
    \ error: conversion from \u2018std::__cxx11::basic_string<char>::reverse_iterator\u2019\
    \ {aka \u2018std::reverse_iterator<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char>\
    \ > >\u2019} to non-scalar type \u2018std::string\u2019 {aka \u2018std::__cxx11::basic_string<char>\u2019\
    } requested\n   30 |     std::string vowels_reverse15 = vowels.rbegin();\n   \
    \   |                                    ~~~~~~~~~~~~~^~\n/tmp/tmpjcongq5j.cpp:31:47:\
    \ error: conversion from \u2018std::__cxx11::basic_string<char>::reverse_iterator\u2019\
    \ {aka \u2018std::reverse_iterator<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char>\
    \ > >\u2019} to non-scalar type \u2018std::string\u2019 {aka \u2018std::__cxx11::basic_string<char>\u2019\
    } requested\n   31 |     std::string vowels_reverse16 = vowels.rend();\n     \
    \ |                                    ~~~~~~~~~~~^~\n/tmp/tmpjcongq5j.cpp:32:49:\
    \ error: conversion from \u2018std::__cxx11::basic_string<char>::reverse_iterator\u2019\
    \ {aka \u2018std::reverse_iterator<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char>\
    \ > >\u2019} to non-scalar type \u2018std::string\u2019 {aka \u2018std::__cxx11::basic_string<char>\u2019\
    } requested\n   32 |     std::string vowels_reverse17 = vowels.rbegin();\n   \
    \   |                                    ~~~~~~~~~~~~~^~\n/tmp/tmpjcongq5j.cpp:33:47:\
    \ error: conversion from \u2018std::__cxx11::basic_string<char>::reverse_iterator\u2019\
    \ {aka \u2018std::reverse_iterator<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char>\
    \ > >\u2019} to non-scalar type \u2018std::string\u2019 {aka \u2018std::__cxx11::basic_string<char>\u2019\
    } requested\n   33 |     std::string vowels_reverse18 = vowels.rend();\n     \
    \ |                                    ~~~~~~~~~~~^~\n/tmp/tmpjcongq5j.cpp:34:49:\
    \ error: conversion from \u2018std::__cxx11::basic_string<char>::reverse_iterator\u2019\
    \ {aka \u2018std::reverse_iterator<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char>\
    \ > >\u2019} to non-scalar type \u2018std::string\u2019 {aka \u2018std::__cxx11::basic_string<char>\u2019\
    } requested\n   34 |     std::string vowels_reverse19 = vowels.rbegin();\n   \
    \   |                                    ~~~~~~~~~~~~~^~\n/tmp/tmpjcongq5j.cpp:35:47:\
    \ error: conversion from \u2018std::__cxx11::basic_string<char>::reverse_iterator\u2019\
    \ {aka \u2018std::reverse_iterator<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char>\
    \ > >\u2019} to non-scalar type \u2018std::string\u2019 {aka \u2018std::__cxx11::basic_string<char>\u2019\
    } requested\n   35 |     std::string vowels_reverse20 = vowels.rend();\n     \
    \ |                                    ~~~~~~~~~~~^~\n/tmp/tmpjcongq5j.cpp:36:49:\
    \ error: conversion from \u2018std::__cxx11::basic_string<char>::reverse_iterator\u2019\
    \ {aka \u2018std::reverse_iterator<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char>\
    \ > >\u2019} to non-scalar type \u2018std::string\u2019 {aka \u2018std::__cxx11::basic_string<char>\u2019\
    } requested\n   36 |     std::string vowels_reverse21 = vowels.rbegin();\n   \
    \   |                                    ~~~~~~~~~~~~~^~\n/tmp/tmpjcongq5j.cpp:37:47:\
    \ error: conversion from \u2018std::__cxx11::basic_string<char>::reverse_iterator\u2019\
    \ {aka \u2018std::reverse_iterator<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char>\
    \ > >\u2019} to non-scalar type \u2018std::string\u2019 {aka \u2018std::__cxx11::basic_string<char>\u2019\
    } requested\n   37 |     std::string vowels_reverse22 = vowels.rend();\n     \
    \ |                                    ~~~~~~~~~~~^~\n/tmp/tmpjcongq5j.cpp:38:49:\
    \ error: conversion from \u2018std::__cxx11::basic_string<char>::reverse_iterator\u2019\
    \ {aka \u2018std::reverse_iterator<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char>\
    \ > >\u2019} to non-scalar type \u2018std::string\u2019 {aka \u2018std::__cxx11::basic_string<char>\u2019\
    } requested\n   38 |     std::string vowels_reverse23 = vowels.rbegin();\n   \
    \   |                                    ~~~~~~~~~~~~~^~\n/tmp/tmpjcongq5j.cpp:39:47:\
    \ error: conversion from \u2018std::__cxx11::basic_string<char>::reverse_iterator\u2019\
    \ {aka \u2018std::reverse_iterator<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char>\
    \ > >\u2019} to non-scalar type \u2018std::string\u2019 {aka \u2018std::__cxx11::basic_string<char>\u2019\
    } requested\n   39 |     std::string vowels_reverse24 = vowels.rend();\n     \
    \ |                                    ~~~~~~~~~~~^~\n/tmp/tmpjcongq5j.cpp:40:49:\
    \ error: conversion from \u2018std::__cxx11::basic_string<char>::reverse_iterator\u2019\
    \ {aka \u2018std::reverse_iterator<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char>\
    \ > >\u2019} to non-scalar type \u2018std::string\u2019 {aka \u2018std::__cxx11::basic_string<char>\u2019\
    } requested\n   40 |     std::string vowels_reverse25 = vowels.rbegin();\n   \
    \   |                                    ~~~~~~~~~~~~~^~\n/tmp/tmpjcongq5j.cpp:41:47:\
    \ error: conversion from \u2018std::__cxx11::basic_string<char>::reverse_iterator\u2019\
    \ {aka \u2018std::reverse_iterator<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char>\
    \ > >\u2019} to non-scalar type \u2018std::string\u2019 {aka \u2018std::__cxx11::basic_string<char>\u2019\
    } requested\n   41 |     std::string vowels_reverse26 = vowels.rend();\n     \
    \ |                                    ~~~~~~~~~~~^~\n/tmp/tmpjcongq5j.cpp:42:49:\
    \ error: conversion from \u2018std::__cxx11::basic_string<char>::reverse_iterator\u2019\
    \ {aka \u2018std::reverse_iterator<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char>\
    \ > >\u2019} to non-scalar type \u2018std::string\u2019 {aka \u2018std::__cxx11::basic_string<char>\u2019\
    } requested\n   42 |     std::string vowels_reverse27 = vowels.rbegin();\n   \
    \   |                                    ~~~~~~~~~~~~~^~\n/tmp/tmpjcongq5j.cpp:43:47:\
    \ error: conversion from \u2018std::__cxx11::basic_string<char>::reverse_iterator\u2019\
    \ {aka \u2018std::reverse_iterator<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char>\
    \ > >\u2019} to non-scalar type \u2018std::string\u2019 {aka \u2018std::__cxx11::basic_string<char>\u2019\
    } requested\n   43 |     std::string vowels_reverse28 = vowels.rend();\n     \
    \ |                                    ~~~~~~~~~~~^~\n/tmp/tmpjcongq5j.cpp:44:49:\
    \ error: conversion from \u2018std::__cxx11::basic_string<char>::reverse_iterator\u2019\
    \ {aka \u2018std::reverse_iterator<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char>\
    \ > >\u2019} to non-scalar type \u2018std::string\u2019 {aka \u2018std::__cxx11::basic_string<char>\u2019\
    } requested\n   44 |     std::string vowels_reverse29 = vowels.rbegin();\n   \
    \   |                                    ~~~~~~~~~~~~~^~\n/tmp/tmpjcongq5j.cpp:45:47:\
    \ error: conversion from \u2018std::__cxx11::basic_string<char>::reverse_iterator\u2019\
    \ {aka \u2018std::reverse_iterator<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char>\
    \ > >\u2019} to non-scalar type \u2018std::string\u2019 {aka \u2018std::__cxx11::basic_string<char>\u2019\
    } requested\n   45 |     std::string vowels_reverse30 = vowels.rend();\n     \
    \ |                                    ~~~~~~~~~~~^~\n/tmp/tmpjcongq5j.cpp:46:49:\
    \ error: conversion from \u2018std::__cxx11::basic_string<char>::reverse_iterator\u2019\
    \ {aka \u2018std::reverse_iterator<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char>\
    \ > >\u2019} to non-scalar type \u2018std::string\u2019 {aka \u2018std::__cxx11::basic_string<char>\u2019\
    } requested\n   46 |     std::string vowels_reverse31 = vowels.rbegin();\n   \
    \   |                                    ~~~~~~~~~~~~~^~\n/tmp/tmpjcongq5j.cpp:47:47:\
    \ error: conversion from \u2018std::__cxx11::basic_string<char>::reverse_iterator\u2019\
    \ {aka \u2018std::reverse_iterator<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char>\
    \ > >\u2019} to non-scalar type \u2018std::string\u2019 {aka \u2018std::__cxx11::basic_string<char>\u2019\
    } requested\n   47 |     std::string vowels_reverse32 = vowels.rend();\n     \
    \ |                                    ~~~~~~~~~~~^~\n/tmp/tmpjcongq5j.cpp:48:49:\
    \ error: conversion from \u2018std::__cxx11::basic_string<char>::reverse_iterator\u2019\
    \ {aka \u2018std::reverse_iterator<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char>\
    \ > >\u2019} to non-scalar type \u2018std::string\u2019 {aka \u2018std::__cxx11::basic_string<char>\u2019\
    } requested\n   48 |     std::string vowels_reverse33 = vowels.rbegin();\n   \
    \   |                                    ~~~~~~~~~~~~~^~\n/tmp/tmpjcongq5j.cpp:49:47:\
    \ error: conversion from \u2018std::__cxx11::basic_string<char>::reverse_iterator\u2019\
    \ {aka \u2018std::reverse_iterator<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char>\
    \ > >\u2019} to non-scalar type \u2018std::string\u2019 {aka \u2018std::__cxx11::basic_string<char>\u2019\
    } requested\n   49 |     std::string vowels_reverse34 = vowels.rend();\n     \
    \ |                                    ~~~~~~~~~~~^~\n/tmp/tmpjcongq5j.cpp:50:49:\
    \ error: conversion from \u2018std::__cxx11::basic_string<char>::reverse_iterator\u2019\
    \ {aka \u2018std::reverse_iterator<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char>\
    \ > >\u2019} to non-scalar type \u2018std::string\u2019 {aka \u2018std::__cxx11::basic_string<char>\u2019\
    } requested\n   50 |     std::string vowels_reverse35 = vowels.rbegin();\n   \
    \   |                                    ~~~~~~~~~~~~~^~\n/tmp/tmpjcongq5j.cpp:51:47:\
    \ error: conversion from \u2018std::__cxx11::basic_string<char>::reverse_iterator\u2019\
    \ {aka \u2018std::reverse_iterator<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char>\
    \ > >\u2019} to non-scalar type \u2018std::string\u2019 {aka \u2018std::__cxx11::basic_string<char>\u2019\
    } requested\n   51 |     std::string vowels_reverse36 = vowels.rend();\n     \
    \ |                                    ~~~~~~~~~~~^~\n/tmp/tmpjcongq5j.cpp:52:49:\
    \ error: conversion from \u2018std::__cxx11::basic_string<char>::reverse_iterator\u2019\
    \ {aka \u2018std::reverse_iterator<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char>\
    \ > >\u2019} to non-scalar type \u2018std::string\u2019 {aka \u2018std::__cxx11::basic_string<char>\u2019\
    } requested\n   52 |     std::string vowels_reverse37 = vowels.rbegin();\n   \
    \   |                                    ~~~~~~~~~~~~~^~\n/tmp/tmpjcongq5j.cpp:53:47:\
    \ error: conversion from \u2018std::__cxx11::basic_string<char>::reverse_iterator\u2019\
    \ {aka \u2018std::reverse_iterator<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char>\
    \ > >\u2019} to non-scalar type \u2018std::string\u2019 {aka \u2018std::__cxx11::basic_string<char>\u2019\
    } requested\n   53 |     std::string vowels_reverse38 = vowels.rend();\n     \
    \ |                                    ~~~~~~~~~~~^~\n/tmp/tmpjcongq5j.cpp:54:49:\
    \ error: conversion from \u2018std::__cxx11::basic_string<char>::reverse_iterator\u2019\
    \ {aka \u2018std::reverse_iterator<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char>\
    \ > >\u2019} to non-scalar type \u2018std::string\u2019 {aka \u2018std::__cxx11::basic_string<char>\u2019\
    } requested\n   54 |     std::string vowels_reverse39 = vowels.rbegin();\n   \
    \   |                                    ~~~~~~~~~~~~~^~\n/tmp/tmpjcongq5j.cpp:55:47:\
    \ error: conversion from \u2018std::__cxx11::basic_string<char>::reverse_iterator\u2019\
    \ {aka \u2018std::reverse_iterator<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char>\
    \ > >\u2019} to non-scalar type \u2018std::string\u2019 {aka \u2018std::__cxx11::basic_string<char>\u2019\
    } requested\n   55 |     std::string vowels_reverse40 = vowels.rend();\n     \
    \ |                                    ~~~~~~~~~~~^~\n/tmp/tmpjcongq5j.cpp:56:36:\
    \ error: \u2018vowel\u2019 was not declared in this scope; did you mean \u2018\
    vowels\u2019?\n   56 |     std::string vowels_reverse41 = vowel\n      |     \
    \                               ^~~~~\n      |                               \
    \     vowels\n/tmp/tmpjcongq5j.cpp:57:1: error: expected \u2018,\u2019 or \u2018\
    ;\u2019 before \u2018}\u2019 token\n   57 | }\n      | ^\n/tmp/tmpjcongq5j.cpp:57:1:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// get_closest_vowel(\"yogurt\") ==> \"u\"\
    \n// get_closest_vowel(\"FULL\") ==> \"U\"\n// get_closest_vowel(\"quick\") ==>\
    \ \"\"\n// get_closest_vowel(\"ab\") ==> \"\"\nstd::string get_closest_vowel(std::string\
    \ word) {\n    std::string vowels = \"AEIOUaeiou\";\n    std::string vowels_reverse\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse2 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse3 = \"AEIOUaeiou\";\n    std::string vowels_reverse4 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse5 = \"AEIOUaeiou\";\n    std::string vowels_reverse6\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse7 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse8 = \"AEIOUaeiou\";\n    std::string vowels_reverse9 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse10 = \"AEIOUaeiou\";\n    std::string vowels_reverse11\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse12 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse13 = \"AEIOUaeiou\";\n    std::string vowels_reverse14 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse15 = \"AEIOUaeiou\";\n    std::string vowels_reverse16\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse17 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse18 = \"AEIOUaeiou\";\n    std::string vowels_reverse19 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse20 = \"AEIOUaeiou\";\n    std::string vowels_reverse21\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse22 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse23 = \"AEIOUaeiou\";\n    std::string vowels_reverse24 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse25 = \"AEIOUaeiou\";\n    std::string vowels_reverse26\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse27 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse28 = \"AEIOUaeiou\";\n    std::string vowels_reverse29 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse30 = \"AEIOUaeiou\";\n    std::string vowels_reverse31\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse32 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse33 = \"AEIOUaeiou\";\n    std::string vowels_reverse34 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse35 = \"AEIOUaeiou\";\n    std::string vowels_reverse36\
    \ = \"AEIOU\n}\nint main() {\n    auto candidate = get_closest_vowel;\n    assert(candidate((\"\
    yogurt\")) == (\"u\"));\n    assert(candidate((\"full\")) == (\"u\"));\n    assert(candidate((\"\
    easy\")) == (\"\"));\n    assert(candidate((\"eAsy\")) == (\"\"));\n    assert(candidate((\"\
    ali\")) == (\"\"));\n    assert(candidate((\"bad\")) == (\"a\"));\n    assert(candidate((\"\
    most\")) == (\"o\"));\n    assert(candidate((\"ab\")) == (\"\"));\n    assert(candidate((\"\
    ba\")) == (\"\"));\n    assert(candidate((\"quick\")) == (\"\"));\n    assert(candidate((\"\
    anime\")) == (\"i\"));\n    assert(candidate((\"Asia\")) == (\"\"));\n    assert(candidate((\"\
    Above\")) == (\"o\"));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp7p26ek0r.cpp:50:36: warning: missing terminating \" character\n\
    \   50 |     std::string vowels_reverse36 = \"AEIOU\n      |                 \
    \                   ^\n/tmp/tmp7p26ek0r.cpp:50:36: error: missing terminating\
    \ \" character\n   50 |     std::string vowels_reverse36 = \"AEIOU\n      |  \
    \                                  ^~~~~~\n/tmp/tmp7p26ek0r.cpp: In function \u2018\
    std::string get_closest_vowel(std::string)\u2019:\n/tmp/tmp7p26ek0r.cpp:51:1:\
    \ error: expected primary-expression before \u2018}\u2019 token\n   51 | }\n \
    \     | ^\n/tmp/tmp7p26ek0r.cpp:51:1: error: expected \u2018,\u2019 or \u2018\
    ;\u2019 before \u2018}\u2019 token\n/tmp/tmp7p26ek0r.cpp:51:1: warning: no return\
    \ statement in function returning non-void [-Wreturn-type]\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// get_closest_vowel(\"yogurt\") ==> \"u\"\
    \n// get_closest_vowel(\"FULL\") ==> \"U\"\n// get_closest_vowel(\"quick\") ==>\
    \ \"\"\n// get_closest_vowel(\"ab\") ==> \"\"\nstd::string get_closest_vowel(std::string\
    \ word) {\n    std::string vowels = \"AEIOUaeiou\";\n    std::string vowels_reverse\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_reverse = \"AEIOUaeiou\";\n\
    \    std::string vowels_reverse_reverse_reverse = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse_reverse_reverse_reverse = \"AEIOUaeiou\";\n    std::string vowels_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_reverse\n}\nint main() {\n\
    \    auto candidate = get_closest_vowel;\n    assert(candidate((\"yogurt\")) ==\
    \ (\"u\"));\n    assert(candidate((\"full\")) == (\"u\"));\n    assert(candidate((\"\
    easy\")) == (\"\"));\n    assert(candidate((\"eAsy\")) == (\"\"));\n    assert(candidate((\"\
    ali\")) == (\"\"));\n    assert(candidate((\"bad\")) == (\"a\"));\n    assert(candidate((\"\
    most\")) == (\"o\"));\n    assert(candidate((\"ab\")) == (\"\"));\n    assert(candidate((\"\
    ba\")) == (\"\"));\n    assert(candidate((\"quick\")) == (\"\"));\n    assert(candidate((\"\
    anime\")) == (\"i\"));\n    assert(candidate((\"Asia\")) == (\"\"));\n    assert(candidate((\"\
    Above\")) == (\"o\"));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpwyzrcsid.cpp: In function \u2018std::string get_closest_vowel(std::string)\u2019\
    :\n/tmp/tmpwyzrcsid.cpp:22:17: error: redeclaration of \u2018std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse\u2019\
    \n   22 |     std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpwyzrcsid.cpp:21:17: note: \u2018std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse\u2019\
    \ previously declared here\n   21 |     std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpwyzrcsid.cpp:23:17: error: redeclaration of \u2018std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse\u2019\
    \n   23 |     std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpwyzrcsid.cpp:21:17: note: \u2018std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse\u2019\
    \ previously declared here\n   21 |     std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpwyzrcsid.cpp:25:17: error: redeclaration of \u2018std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\u2019\
    \n   25 |     std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpwyzrcsid.cpp:24:17: note: \u2018std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\u2019\
    \ previously declared here\n   24 |     std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpwyzrcsid.cpp:26:17: error: redeclaration of \u2018std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\u2019\
    \n   26 |     std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpwyzrcsid.cpp:24:17: note: \u2018std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\u2019\
    \ previously declared here\n   24 |     std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpwyzrcsid.cpp:27:17: error: redeclaration of \u2018std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\u2019\
    \n   27 |     std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpwyzrcsid.cpp:24:17: note: \u2018std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\u2019\
    \ previously declared here\n   24 |     std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpwyzrcsid.cpp:29:17: error: redeclaration of \u2018std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\u2019\
    \n   29 |     std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpwyzrcsid.cpp:28:17: note: \u2018std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\u2019\
    \ previously declared here\n   28 |     std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpwyzrcsid.cpp:30:17: error: redeclaration of \u2018std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\u2019\
    \n   30 |     std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpwyzrcsid.cpp:28:17: note: \u2018std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\u2019\
    \ previously declared here\n   28 |     std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpwyzrcsid.cpp:31:17: error: redeclaration of \u2018std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\u2019\
    \n   31 |     std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpwyzrcsid.cpp:28:17: note: \u2018std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\u2019\
    \ previously declared here\n   28 |     std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpwyzrcsid.cpp:32:17: error: redeclaration of \u2018std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\u2019\
    \n   32 |     std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpwyzrcsid.cpp:28:17: note: \u2018std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\u2019\
    \ previously declared here\n   28 |     std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpwyzrcsid.cpp:33:17: error: redeclaration of \u2018std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\u2019\
    \n   33 |     std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpwyzrcsid.cpp:28:17: note: \u2018std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\u2019\
    \ previously declared here\n   28 |     std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpwyzrcsid.cpp:34:17: error: redeclaration of \u2018std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\u2019\
    \n   34 |     std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpwyzrcsid.cpp:28:17: note: \u2018std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\u2019\
    \ previously declared here\n   28 |     std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpwyzrcsid.cpp:36:1: error: expected initializer before \u2018}\u2019 token\n\
    \   36 | }\n      | ^\n/tmp/tmpwyzrcsid.cpp:36:1: warning: no return statement\
    \ in function returning non-void [-Wreturn-type]\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// get_closest_vowel(\"yogurt\") ==> \"u\"\
    \n// get_closest_vowel(\"FULL\") ==> \"U\"\n// get_closest_vowel(\"quick\") ==>\
    \ \"\"\n// get_closest_vowel(\"ab\") ==> \"\"\nstd::string get_closest_vowel(std::string\
    \ word) {\n    // Your code here\n    std::string vowels = \"AEIOUaeiou\";\n \
    \   std::string vowels_reverse = \"AEIOUaeiou\";\n    std::string vowels_reverse_reverse\
    \ = \"\";\n    std::string vowels_reverse_back = \"\";\n    std::string vowels_reverse_back_reverse\
    \ = \"\";\n    std::string vowels_reverse_back_reverse_back = \"\";\n    std::string\
    \ vowels_reverse_back_reverse_back_reverse = \"\";\n    std::string vowels_reverse_back_reverse_back_reverse_back\
    \ = \"\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse\
    \ = \"\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back\
    \ = \"\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse\
    \ = \"\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\
    \ = \"\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse\
    \ = \"\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\
    \ = \"\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\
    \ = \"\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse\
    \ = \"\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\
    \ = \"\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse\
    \ = \"\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\
    \ = \"\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\
    \ = \"\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse\
    \ = \"\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\
    \ = \"\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\
    \ = \"\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\
    \ = \"\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_\n\
    }\nint main() {\n    auto candidate = get_closest_vowel;\n    assert(candidate((\"\
    yogurt\")) == (\"u\"));\n    assert(candidate((\"full\")) == (\"u\"));\n    assert(candidate((\"\
    easy\")) == (\"\"));\n    assert(candidate((\"eAsy\")) == (\"\"));\n    assert(candidate((\"\
    ali\")) == (\"\"));\n    assert(candidate((\"bad\")) == (\"a\"));\n    assert(candidate((\"\
    most\")) == (\"o\"));\n    assert(candidate((\"ab\")) == (\"\"));\n    assert(candidate((\"\
    ba\")) == (\"\"));\n    assert(candidate((\"quick\")) == (\"\"));\n    assert(candidate((\"\
    anime\")) == (\"i\"));\n    assert(candidate((\"Asia\")) == (\"\"));\n    assert(candidate((\"\
    Above\")) == (\"o\"));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp_dweclvq.cpp: In function \u2018std::string get_closest_vowel(std::string)\u2019\
    :\n/tmp/tmp_dweclvq.cpp:29:17: error: redeclaration of \u2018std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\u2019\
    \n   29 |     std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\
    \ = \"\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmp_dweclvq.cpp:28:17: note: \u2018std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\u2019\
    \ previously declared here\n   28 |     std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\
    \ = \"\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmp_dweclvq.cpp:34:17: error: redeclaration of \u2018std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\u2019\
    \n   34 |     std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\
    \ = \"\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmp_dweclvq.cpp:33:17: note: \u2018std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\u2019\
    \ previously declared here\n   33 |     std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\
    \ = \"\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmp_dweclvq.cpp:37:17: error: redeclaration of \u2018std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\u2019\
    \n   37 |     std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\
    \ = \"\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmp_dweclvq.cpp:36:17: note: \u2018std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\u2019\
    \ previously declared here\n   36 |     std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\
    \ = \"\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmp_dweclvq.cpp:38:17: error: redeclaration of \u2018std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\u2019\
    \n   38 |     std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\
    \ = \"\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmp_dweclvq.cpp:36:17: note: \u2018std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\u2019\
    \ previously declared here\n   36 |     std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\
    \ = \"\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmp_dweclvq.cpp:40:1: error: expected initializer before \u2018}\u2019 token\n\
    \   40 | }\n      | ^\n/tmp/tmp_dweclvq.cpp:40:1: warning: no return statement\
    \ in function returning non-void [-Wreturn-type]\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// get_closest_vowel(\"yogurt\") ==> \"u\"\
    \n// get_closest_vowel(\"FULL\") ==> \"U\"\n// get_closest_vowel(\"quick\") ==>\
    \ \"\"\n// get_closest_vowel(\"ab\") ==> \"\"\nstd::string get_closest_vowel(std::string\
    \ word) {\n    std::string vowels = \"AEIOUaeiou\";\n    std::string vowels_reverse\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse2 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse3 = \"AEIOUaeiou\";\n    std::string vowels_reverse4 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse5 = \"AEIOUaeiou\";\n    std::string vowels_reverse6\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse7 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse8 = \"AEIOUaeiou\";\n    std::string vowels_reverse9 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse10 = \"AEIOUaeiou\";\n    std::string vowels_reverse11\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse12 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse13 = \"AEIOUaeiou\";\n    std::string vowels_reverse14 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse15 = \"AEIOUaeiou\";\n    std::string vowels_reverse16\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse17 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse18 = \"AEIOUaeiou\";\n    std::string vowels_reverse19 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse20 = \"AEIOUaeiou\";\n    std::string vowels_reverse21\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse22 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse23 = \"AEIOUaeiou\";\n    std::string vowels_reverse24 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse25 = \"AEIOUaeiou\";\n    std::string vowels_reverse26\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse27 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse28 = \"AEIOUaeiou\";\n    std::string vowels_reverse29 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse30 = \"AEIOUaeiou\";\n    std::string vowels_reverse31\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse32 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse33 = \"AEIOUaeiou\";\n    std::string vowels_reverse34 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse35 = \"AEIOUaeiou\";\n    std::string vowels_reverse36\
    \ = \"AEIOU\n}\nint main() {\n    auto candidate = get_closest_vowel;\n    assert(candidate((\"\
    yogurt\")) == (\"u\"));\n    assert(candidate((\"full\")) == (\"u\"));\n    assert(candidate((\"\
    easy\")) == (\"\"));\n    assert(candidate((\"eAsy\")) == (\"\"));\n    assert(candidate((\"\
    ali\")) == (\"\"));\n    assert(candidate((\"bad\")) == (\"a\"));\n    assert(candidate((\"\
    most\")) == (\"o\"));\n    assert(candidate((\"ab\")) == (\"\"));\n    assert(candidate((\"\
    ba\")) == (\"\"));\n    assert(candidate((\"quick\")) == (\"\"));\n    assert(candidate((\"\
    anime\")) == (\"i\"));\n    assert(candidate((\"Asia\")) == (\"\"));\n    assert(candidate((\"\
    Above\")) == (\"o\"));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpbyjum4sg.cpp:50:36: warning: missing terminating \" character\n\
    \   50 |     std::string vowels_reverse36 = \"AEIOU\n      |                 \
    \                   ^\n/tmp/tmpbyjum4sg.cpp:50:36: error: missing terminating\
    \ \" character\n   50 |     std::string vowels_reverse36 = \"AEIOU\n      |  \
    \                                  ^~~~~~\n/tmp/tmpbyjum4sg.cpp: In function \u2018\
    std::string get_closest_vowel(std::string)\u2019:\n/tmp/tmpbyjum4sg.cpp:51:1:\
    \ error: expected primary-expression before \u2018}\u2019 token\n   51 | }\n \
    \     | ^\n/tmp/tmpbyjum4sg.cpp:51:1: error: expected \u2018,\u2019 or \u2018\
    ;\u2019 before \u2018}\u2019 token\n/tmp/tmpbyjum4sg.cpp:51:1: warning: no return\
    \ statement in function returning non-void [-Wreturn-type]\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// get_closest_vowel(\"yogurt\") ==> \"u\"\
    \n// get_closest_vowel(\"FULL\") ==> \"U\"\n// get_closest_vowel(\"quick\") ==>\
    \ \"\"\n// get_closest_vowel(\"ab\") ==> \"\"\nstd::string get_closest_vowel(std::string\
    \ word) {\n    std::string vowels = \"AEIOUaeiou\";\n    std::string vowels_reverse\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_reverse = \"\";\n    std::string\
    \ vowels_reverse_back = \"\";\n    std::string vowels_reverse_back_reverse = \"\
    \";\n    std::string vowels_reverse_back_reverse_back = \"\";\n    std::string\
    \ vowels_reverse_back_reverse_back_reverse = \"\";\n    std::string vowels_reverse_back_reverse_back_reverse_back\
    \ = \"\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse\
    \ = \"\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back\
    \ = \"\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse\
    \ = \"\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\
    \ = \"\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse\
    \ = \"\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\
    \ = \"\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\
    \ = \"\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse\
    \ = \"\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\
    \ = \"\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse\
    \ = \"\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\
    \ = \"\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\
    \ = \"\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse\
    \ = \"\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\
    \ = \"\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\
    \ = \"\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\
    \ = \"\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_re\n\
    }\nint main() {\n    auto candidate = get_closest_vowel;\n    assert(candidate((\"\
    yogurt\")) == (\"u\"));\n    assert(candidate((\"full\")) == (\"u\"));\n    assert(candidate((\"\
    easy\")) == (\"\"));\n    assert(candidate((\"eAsy\")) == (\"\"));\n    assert(candidate((\"\
    ali\")) == (\"\"));\n    assert(candidate((\"bad\")) == (\"a\"));\n    assert(candidate((\"\
    most\")) == (\"o\"));\n    assert(candidate((\"ab\")) == (\"\"));\n    assert(candidate((\"\
    ba\")) == (\"\"));\n    assert(candidate((\"quick\")) == (\"\"));\n    assert(candidate((\"\
    anime\")) == (\"i\"));\n    assert(candidate((\"Asia\")) == (\"\"));\n    assert(candidate((\"\
    Above\")) == (\"o\"));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp1kpwmxu3.cpp: In function \u2018std::string get_closest_vowel(std::string)\u2019\
    :\n/tmp/tmp1kpwmxu3.cpp:28:17: error: redeclaration of \u2018std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\u2019\
    \n   28 |     std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\
    \ = \"\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmp1kpwmxu3.cpp:27:17: note: \u2018std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\u2019\
    \ previously declared here\n   27 |     std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\
    \ = \"\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmp1kpwmxu3.cpp:33:17: error: redeclaration of \u2018std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\u2019\
    \n   33 |     std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\
    \ = \"\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmp1kpwmxu3.cpp:32:17: note: \u2018std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\u2019\
    \ previously declared here\n   32 |     std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\
    \ = \"\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmp1kpwmxu3.cpp:36:17: error: redeclaration of \u2018std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\u2019\
    \n   36 |     std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\
    \ = \"\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmp1kpwmxu3.cpp:35:17: note: \u2018std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\u2019\
    \ previously declared here\n   35 |     std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\
    \ = \"\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmp1kpwmxu3.cpp:37:17: error: redeclaration of \u2018std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\u2019\
    \n   37 |     std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\
    \ = \"\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmp1kpwmxu3.cpp:35:17: note: \u2018std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\u2019\
    \ previously declared here\n   35 |     std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\
    \ = \"\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmp1kpwmxu3.cpp:39:1: error: expected initializer before \u2018}\u2019 token\n\
    \   39 | }\n      | ^\n/tmp/tmp1kpwmxu3.cpp:39:1: warning: no return statement\
    \ in function returning non-void [-Wreturn-type]\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// get_closest_vowel(\"yogurt\") ==> \"u\"\
    \n// get_closest_vowel(\"FULL\") ==> \"U\"\n// get_closest_vowel(\"quick\") ==>\
    \ \"\"\n// get_closest_vowel(\"ab\") ==> \"\"\nstd::string get_closest_vowel(std::string\
    \ word) {\n    std::string vowels = \"AEIOUaeiou\";\n    std::string vowel_found\
    \ = \"\";\n    int vowel_counter = 0;\n    int consonant_counter = 0;\n    int\
    \ consonant_counter2 = 0;\n    int consonant_counter3 = 0;\n    int consonant_counter4\
    \ = 0;\n    int consonant_counter5 = 0;\n    int consonant_counter6 = 0;\n   \
    \ int consonant_counter7 = 0;\n    int consonant_counter8 = 0;\n    int consonant_counter9\
    \ = 0;\n    int consonant_counter10 = 0;\n    int consonant_counter11 = 0;\n \
    \   int consonant_counter12 = 0;\n    int consonant_counter13 = 0;\n    int consonant_counter14\
    \ = 0;\n    int consonant_counter15 = 0;\n    int consonant_counter16 = 0;\n \
    \   int consonant_counter17 = 0;\n    int consonant_counter18 = 0;\n    int consonant_counter19\
    \ = 0;\n    int consonant_counter20 = 0;\n    int consonant_counter21 = 0;\n \
    \   int consonant_counter22 = 0;\n    int consonant_counter23 = 0;\n    int consonant_counter24\
    \ = 0;\n    int consonant_counter25 = 0;\n    int consonant_counter26 = 0;\n \
    \   int consonant_counter27 = 0;\n    int consonant_counter28 = 0;\n    int consonant_counter29\
    \ = 0;\n    int consonant_counter30 = 0;\n    int consonant_counter31 = 0;\n \
    \   int consonant_counter32 = 0;\n    int consonant_counter33 = 0;\n    int consonant_counter34\
    \ = 0;\n    int consonant_counter35 = 0;\n    int consonant_counter36 = 0;\n \
    \   int consonant_counter37 = 0;\n    int consonant_counter38 = 0;\n    int consonant_counter39\
    \ = 0;\n    int consonant_counter40 = 0;\n    int consonant_counter41 = 0;\n \
    \   int consonant_counter42 = 0;\n    int consonant_counter43 = 0;\n    int consonant_counter44\
    \ = 0;\n    int consonant_counter45 = 0;\n    int consonant_counter46 = 0;\n \
    \   int consonant_counter47 = 0;\n    int consonant_counter48 = 0;\n    int consonant_counter49\
    \ = 0;\n    int consonant_counter50 = 0;\n    int consonant_counter51 = 0;\n \
    \   int consonant_counter52 = 0;\n    int consonant_counter53 = 0;\n    int consonant_counter54\
    \ = 0;\n    int consonant_counter55 = 0;\n    int consonant_counter56 = 0;\n \
    \   int consonant_counter57 = 0;\n    int consonant_counter58 = 0;\n    int consonant_counter59\
    \ = 0;\n    int consonant_counter60 = 0;\n    int consonant_counter61 = 0;\n \
    \   int consonant_counter\n}\nint main() {\n    auto candidate = get_closest_vowel;\n\
    \    assert(candidate((\"yogurt\")) == (\"u\"));\n    assert(candidate((\"full\"\
    )) == (\"u\"));\n    assert(candidate((\"easy\")) == (\"\"));\n    assert(candidate((\"\
    eAsy\")) == (\"\"));\n    assert(candidate((\"ali\")) == (\"\"));\n    assert(candidate((\"\
    bad\")) == (\"a\"));\n    assert(candidate((\"most\")) == (\"o\"));\n    assert(candidate((\"\
    ab\")) == (\"\"));\n    assert(candidate((\"ba\")) == (\"\"));\n    assert(candidate((\"\
    quick\")) == (\"\"));\n    assert(candidate((\"anime\")) == (\"i\"));\n    assert(candidate((\"\
    Asia\")) == (\"\"));\n    assert(candidate((\"Above\")) == (\"o\"));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpy2hqfw8d.cpp: In function \u2018std::string get_closest_vowel(std::string)\u2019\
    :\n/tmp/tmpy2hqfw8d.cpp:79:1: error: expected initializer before \u2018}\u2019\
    \ token\n   79 | }\n      | ^\n/tmp/tmpy2hqfw8d.cpp:79:1: warning: no return statement\
    \ in function returning non-void [-Wreturn-type]\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// get_closest_vowel(\"yogurt\") ==> \"u\"\
    \n// get_closest_vowel(\"FULL\") ==> \"U\"\n// get_closest_vowel(\"quick\") ==>\
    \ \"\"\n// get_closest_vowel(\"ab\") ==> \"\"\nstd::string get_closest_vowel(std::string\
    \ word) {\n    std::string vowels = \"aeiouAEIOU\";\n    std::string vowels_lower\
    \ = \"aeiouaieouaeiou\";\n    std::string vowels_upper = \"AEIOUaeiouAEIOU\";\n\
    \    std::string vowels_upper2 = \"AEIOUaeiouAEIOU\";\n    std::string vowels_upper3\
    \ = \"AEIOUaeiouAEIOU\";\n    std::string vowels_upper4 = \"AEIOUaeiouAEIOU\"\
    ;\n    std::string vowels_upper5 = \"AEIOUaeiouAEIOU\";\n    std::string vowels_upper6\
    \ = \"AEIOUaeiouAEIOU\";\n    std::string vowels_upper7 = \"AEIOUaeiouAEIOU\"\
    ;\n    std::string vowels_upper8 = \"AEIOUaeiouAEIOU\";\n    std::string vowels_upper9\
    \ = \"AEIOUaeiouAEIOU\";\n    std::string vowels_upper10 = \"AEIOUaeiouAEIOU\"\
    ;\n    std::string vowels_upper11 = \"AEIOUaeiouAEIOU\";\n    std::string vowels_upper12\
    \ = \"AEIOUaeiouAEIOU\";\n    std::string vowels_upper13 = \"AEIOUaeiouAEIOU\"\
    ;\n    std::string vowels_upper14 = \"AEIOUaeiouAEIOU\";\n    std::string vowels_upper15\
    \ = \"AEIOUaeiouAEIOU\";\n    std::string vowels_upper16 = \"AEIOUaeiouAEIOU\"\
    ;\n    std::string vowels_upper17 = \"AEIOUaeiouAEIOU\";\n    std::string vowels_upper18\
    \ = \"AEIOUaeiouAEIOU\";\n    std::string vowels_upper19 = \"AEIOUaeiouAEIOU\"\
    ;\n    std::string vowels_upper20 = \"AEIOUaeiouAEIOU\";\n    std::string vowels_upper21\
    \ = \"AEIOUaeiouAEIOU\";\n    std::string vowels_upper22 = \"AEIOUaeiouAEIOU\"\
    ;\n    std::string vowels_upper23 = \"AEIOUaeiouAEIOU\";\n    std::string vowels_upper24\
    \ = \"AEIOUaeiouAEIOU\";\n    std::string vowels_upper25 = \"AEIOUaeiouAEIOU\"\
    ;\n    std::string vowels_upper26 = \"AEIOUaeiouAEIOU\";\n    std::string vowels_upper27\
    \ = \"AEIOUaeiouAEIOU\";\n    std::string vowels_upper28 = \"AEIOUaeiouAEIOU\"\
    ;\n    std::string vowels_upper29 = \"AEIOU\n}\nint main() {\n    auto candidate\
    \ = get_closest_vowel;\n    assert(candidate((\"yogurt\")) == (\"u\"));\n    assert(candidate((\"\
    full\")) == (\"u\"));\n    assert(candidate((\"easy\")) == (\"\"));\n    assert(candidate((\"\
    eAsy\")) == (\"\"));\n    assert(candidate((\"ali\")) == (\"\"));\n    assert(candidate((\"\
    bad\")) == (\"a\"));\n    assert(candidate((\"most\")) == (\"o\"));\n    assert(candidate((\"\
    ab\")) == (\"\"));\n    assert(candidate((\"ba\")) == (\"\"));\n    assert(candidate((\"\
    quick\")) == (\"\"));\n    assert(candidate((\"anime\")) == (\"i\"));\n    assert(candidate((\"\
    Asia\")) == (\"\"));\n    assert(candidate((\"Above\")) == (\"o\"));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpmd_4i9b2.cpp:44:34: warning: missing terminating \" character\n\
    \   44 |     std::string vowels_upper29 = \"AEIOU\n      |                   \
    \               ^\n/tmp/tmpmd_4i9b2.cpp:44:34: error: missing terminating \" character\n\
    \   44 |     std::string vowels_upper29 = \"AEIOU\n      |                   \
    \               ^~~~~~\n/tmp/tmpmd_4i9b2.cpp: In function \u2018std::string get_closest_vowel(std::string)\u2019\
    :\n/tmp/tmpmd_4i9b2.cpp:45:1: error: expected primary-expression before \u2018\
    }\u2019 token\n   45 | }\n      | ^\n/tmp/tmpmd_4i9b2.cpp:45:1: error: expected\
    \ \u2018,\u2019 or \u2018;\u2019 before \u2018}\u2019 token\n/tmp/tmpmd_4i9b2.cpp:45:1:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// get_closest_vowel(\"yogurt\") ==> \"u\"\
    \n// get_closest_vowel(\"FULL\") ==> \"U\"\n// get_closest_vowel(\"quick\") ==>\
    \ \"\"\n// get_closest_vowel(\"ab\") ==> \"\"\nstd::string get_closest_vowel(std::string\
    \ word) {\n    std::string vowels = \"AEIOUaeiou\";\n    std::string vowels_reverse\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_reverse = \"AEIOUaeiou\";\n\
    \    std::string vowels_reverse_reverse_reverse = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse_reverse_reverse_reverse = \"AEIOUaeiou\";\n    std::string vowels_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_reverse\n}\nint main() {\n\
    \    auto candidate = get_closest_vowel;\n    assert(candidate((\"yogurt\")) ==\
    \ (\"u\"));\n    assert(candidate((\"full\")) == (\"u\"));\n    assert(candidate((\"\
    easy\")) == (\"\"));\n    assert(candidate((\"eAsy\")) == (\"\"));\n    assert(candidate((\"\
    ali\")) == (\"\"));\n    assert(candidate((\"bad\")) == (\"a\"));\n    assert(candidate((\"\
    most\")) == (\"o\"));\n    assert(candidate((\"ab\")) == (\"\"));\n    assert(candidate((\"\
    ba\")) == (\"\"));\n    assert(candidate((\"quick\")) == (\"\"));\n    assert(candidate((\"\
    anime\")) == (\"i\"));\n    assert(candidate((\"Asia\")) == (\"\"));\n    assert(candidate((\"\
    Above\")) == (\"o\"));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp042qooqv.cpp: In function \u2018std::string get_closest_vowel(std::string)\u2019\
    :\n/tmp/tmp042qooqv.cpp:22:17: error: redeclaration of \u2018std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse\u2019\
    \n   22 |     std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmp042qooqv.cpp:21:17: note: \u2018std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse\u2019\
    \ previously declared here\n   21 |     std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmp042qooqv.cpp:23:17: error: redeclaration of \u2018std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse\u2019\
    \n   23 |     std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmp042qooqv.cpp:21:17: note: \u2018std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse\u2019\
    \ previously declared here\n   21 |     std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmp042qooqv.cpp:25:17: error: redeclaration of \u2018std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\u2019\
    \n   25 |     std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmp042qooqv.cpp:24:17: note: \u2018std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\u2019\
    \ previously declared here\n   24 |     std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmp042qooqv.cpp:26:17: error: redeclaration of \u2018std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\u2019\
    \n   26 |     std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmp042qooqv.cpp:24:17: note: \u2018std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\u2019\
    \ previously declared here\n   24 |     std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmp042qooqv.cpp:27:17: error: redeclaration of \u2018std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\u2019\
    \n   27 |     std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmp042qooqv.cpp:24:17: note: \u2018std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\u2019\
    \ previously declared here\n   24 |     std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmp042qooqv.cpp:29:17: error: redeclaration of \u2018std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\u2019\
    \n   29 |     std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmp042qooqv.cpp:28:17: note: \u2018std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\u2019\
    \ previously declared here\n   28 |     std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmp042qooqv.cpp:30:17: error: redeclaration of \u2018std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\u2019\
    \n   30 |     std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmp042qooqv.cpp:28:17: note: \u2018std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\u2019\
    \ previously declared here\n   28 |     std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmp042qooqv.cpp:31:17: error: redeclaration of \u2018std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\u2019\
    \n   31 |     std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmp042qooqv.cpp:28:17: note: \u2018std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\u2019\
    \ previously declared here\n   28 |     std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmp042qooqv.cpp:32:17: error: redeclaration of \u2018std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\u2019\
    \n   32 |     std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmp042qooqv.cpp:28:17: note: \u2018std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\u2019\
    \ previously declared here\n   28 |     std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmp042qooqv.cpp:33:17: error: redeclaration of \u2018std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\u2019\
    \n   33 |     std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmp042qooqv.cpp:28:17: note: \u2018std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\u2019\
    \ previously declared here\n   28 |     std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmp042qooqv.cpp:34:17: error: redeclaration of \u2018std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\u2019\
    \n   34 |     std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmp042qooqv.cpp:28:17: note: \u2018std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\u2019\
    \ previously declared here\n   28 |     std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmp042qooqv.cpp:36:1: error: expected initializer before \u2018}\u2019 token\n\
    \   36 | }\n      | ^\n/tmp/tmp042qooqv.cpp:36:1: warning: no return statement\
    \ in function returning non-void [-Wreturn-type]\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// get_closest_vowel(\"yogurt\") ==> \"u\"\
    \n// get_closest_vowel(\"FULL\") ==> \"U\"\n// get_closest_vowel(\"quick\") ==>\
    \ \"\"\n// get_closest_vowel(\"ab\") ==> \"\"\nstd::string get_closest_vowel(std::string\
    \ word) {\n    std::string vowels = \"AEIOUaeiou\";\n    std::string vowels_reverse\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_reverse = \"\";\n    std::string\
    \ vowels_reverse_back = \"\";\n    std::string vowels_reverse_back_reverse = \"\
    \";\n    std::string vowels_reverse_back_reverse_back = \"\";\n    std::string\
    \ vowels_reverse_back_reverse_back_reverse = \"\";\n    std::string vowels_reverse_back_reverse_back_reverse_back\
    \ = \"\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse\
    \ = \"\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back\
    \ = \"\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse\
    \ = \"\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\
    \ = \"\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse\
    \ = \"\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\
    \ = \"\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\
    \ = \"\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse\
    \ = \"\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\
    \ = \"\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse\
    \ = \"\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\
    \ = \"\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\
    \ = \"\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\
    \ = \"\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\
    \ = \"\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\
    \ = \"\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\
    \ = \"\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\
    \ = \"\";\n    \n}\nint main() {\n    auto candidate = get_closest_vowel;\n  \
    \  assert(candidate((\"yogurt\")) == (\"u\"));\n    assert(candidate((\"full\"\
    )) == (\"u\"));\n    assert(candidate((\"easy\")) == (\"\"));\n    assert(candidate((\"\
    eAsy\")) == (\"\"));\n    assert(candidate((\"ali\")) == (\"\"));\n    assert(candidate((\"\
    bad\")) == (\"a\"));\n    assert(candidate((\"most\")) == (\"o\"));\n    assert(candidate((\"\
    ab\")) == (\"\"));\n    assert(candidate((\"ba\")) == (\"\"));\n    assert(candidate((\"\
    quick\")) == (\"\"));\n    assert(candidate((\"anime\")) == (\"i\"));\n    assert(candidate((\"\
    Asia\")) == (\"\"));\n    assert(candidate((\"Above\")) == (\"o\"));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpnt7twfqp.cpp: In function \u2018std::string get_closest_vowel(std::string)\u2019\
    :\n/tmp/tmpnt7twfqp.cpp:28:17: error: redeclaration of \u2018std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\u2019\
    \n   28 |     std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\
    \ = \"\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpnt7twfqp.cpp:27:17: note: \u2018std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\u2019\
    \ previously declared here\n   27 |     std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\
    \ = \"\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpnt7twfqp.cpp:33:17: error: redeclaration of \u2018std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\u2019\
    \n   33 |     std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\
    \ = \"\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpnt7twfqp.cpp:32:17: note: \u2018std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\u2019\
    \ previously declared here\n   32 |     std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\
    \ = \"\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpnt7twfqp.cpp:34:17: error: redeclaration of \u2018std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\u2019\
    \n   34 |     std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\
    \ = \"\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpnt7twfqp.cpp:32:17: note: \u2018std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\u2019\
    \ previously declared here\n   32 |     std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\
    \ = \"\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpnt7twfqp.cpp:35:17: error: redeclaration of \u2018std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\u2019\
    \n   35 |     std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\
    \ = \"\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpnt7twfqp.cpp:32:17: note: \u2018std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\u2019\
    \ previously declared here\n   32 |     std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\
    \ = \"\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpnt7twfqp.cpp:36:17: error: redeclaration of \u2018std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\u2019\
    \n   36 |     std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\
    \ = \"\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpnt7twfqp.cpp:32:17: note: \u2018std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\u2019\
    \ previously declared here\n   32 |     std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\
    \ = \"\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpnt7twfqp.cpp:37:17: error: redeclaration of \u2018std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\u2019\
    \n   37 |     std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\
    \ = \"\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpnt7twfqp.cpp:32:17: note: \u2018std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\u2019\
    \ previously declared here\n   32 |     std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\
    \ = \"\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpnt7twfqp.cpp:38:17: error: redeclaration of \u2018std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\u2019\
    \n   38 |     std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\
    \ = \"\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpnt7twfqp.cpp:32:17: note: \u2018std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\u2019\
    \ previously declared here\n   32 |     std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\
    \ = \"\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpnt7twfqp.cpp:40:1: warning: no return statement in function returning\
    \ non-void [-Wreturn-type]\n   40 | }\n      | ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// get_closest_vowel(\"yogurt\") ==> \"u\"\
    \n// get_closest_vowel(\"FULL\") ==> \"U\"\n// get_closest_vowel(\"quick\") ==>\
    \ \"\"\n// get_closest_vowel(\"ab\") ==> \"\"\nstd::string get_closest_vowel(std::string\
    \ word) {\n    std::string vowels = \"AEIOUaeiou\";\n    std::string vowels_reverse\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse2 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse3 = \"AEIOUaeiou\";\n    std::string vowels_reverse4 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse5 = \"AEIOUaeiou\";\n    std::string vowels_reverse6\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse7 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse8 = \"AEIOUaeiou\";\n    std::string vowels_reverse9 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse10 = \"AEIOUaeiou\";\n    std::string vowels_reverse11\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse12 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse13 = \"AEIOUaeiou\";\n    std::string vowels_reverse14 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse15 = \"AEIOUaeiou\";\n    std::string vowels_reverse16\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse17 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse18 = \"AEIOUaeiou\";\n    std::string vowels_reverse19 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse20 = \"AEIOUaeiou\";\n    std::string vowels_reverse21\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse22 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse23 = \"AEIOUaeiou\";\n    std::string vowels_reverse24 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse25 = \"AEIOUaeiou\";\n    std::string vowels_reverse26\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse27 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse28 = \"AEIOUaeiou\";\n    std::string vowels_reverse29 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse30 = \"AEIOUaeiou\";\n    std::string vowels_reverse31\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse32 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse33 = \"AEIOUaeiou\";\n    std::string vowels_reverse34 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse35 = \"AEIOUaeiou\";\n    std::string vowels_reverse36\
    \ = \"AEIOU\n}\nint main() {\n    auto candidate = get_closest_vowel;\n    assert(candidate((\"\
    yogurt\")) == (\"u\"));\n    assert(candidate((\"full\")) == (\"u\"));\n    assert(candidate((\"\
    easy\")) == (\"\"));\n    assert(candidate((\"eAsy\")) == (\"\"));\n    assert(candidate((\"\
    ali\")) == (\"\"));\n    assert(candidate((\"bad\")) == (\"a\"));\n    assert(candidate((\"\
    most\")) == (\"o\"));\n    assert(candidate((\"ab\")) == (\"\"));\n    assert(candidate((\"\
    ba\")) == (\"\"));\n    assert(candidate((\"quick\")) == (\"\"));\n    assert(candidate((\"\
    anime\")) == (\"i\"));\n    assert(candidate((\"Asia\")) == (\"\"));\n    assert(candidate((\"\
    Above\")) == (\"o\"));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpsxe42g01.cpp:50:36: warning: missing terminating \" character\n\
    \   50 |     std::string vowels_reverse36 = \"AEIOU\n      |                 \
    \                   ^\n/tmp/tmpsxe42g01.cpp:50:36: error: missing terminating\
    \ \" character\n   50 |     std::string vowels_reverse36 = \"AEIOU\n      |  \
    \                                  ^~~~~~\n/tmp/tmpsxe42g01.cpp: In function \u2018\
    std::string get_closest_vowel(std::string)\u2019:\n/tmp/tmpsxe42g01.cpp:51:1:\
    \ error: expected primary-expression before \u2018}\u2019 token\n   51 | }\n \
    \     | ^\n/tmp/tmpsxe42g01.cpp:51:1: error: expected \u2018,\u2019 or \u2018\
    ;\u2019 before \u2018}\u2019 token\n/tmp/tmpsxe42g01.cpp:51:1: warning: no return\
    \ statement in function returning non-void [-Wreturn-type]\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// get_closest_vowel(\"yogurt\") ==> \"u\"\
    \n// get_closest_vowel(\"FULL\") ==> \"U\"\n// get_closest_vowel(\"quick\") ==>\
    \ \"\"\n// get_closest_vowel(\"ab\") ==> \"\"\nstd::string get_closest_vowel(std::string\
    \ word) {\n    std::string vowels = \"aeiouAEIOU\";\n    std::string vowels_reverse\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse2 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse3 = \"AEIOUaeiou\";\n    std::string vowels_reverse4 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse5 = \"AEIOUaeiou\";\n    std::string vowels_reverse6\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse7 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse8 = \"AEIOUaeiou\";\n    std::string vowels_reverse9 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse10 = \"AEIOUaeiou\";\n    std::string vowels_reverse11\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse12 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse13 = \"AEIOUaeiou\";\n    std::string vowels_reverse14 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse15 = \"AEIOUaeiou\";\n    std::string vowels_reverse16\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse17 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse18 = \"AEIOUaeiou\";\n    std::string vowels_reverse19 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse20 = \"AEIOUaeiou\";\n    std::string vowels_reverse21\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse22 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse23 = \"AEIOUaeiou\";\n    std::string vowels_reverse24 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse25 = \"AEIOUaeiou\";\n    std::string vowels_reverse26\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse27 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse28 = \"AEIOUaeiou\";\n    std::string vowels_reverse29 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse30 = \"AEIOUaeiou\";\n    std::string vowels_reverse31\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse32 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse33 = \"AEIOUaeiou\";\n    std::string vowels_reverse34 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse35 = \"AEIOUaeiou\";\n    std::string vowels_reverse36\
    \ = \"AEIOU\n}\nint main() {\n    auto candidate = get_closest_vowel;\n    assert(candidate((\"\
    yogurt\")) == (\"u\"));\n    assert(candidate((\"full\")) == (\"u\"));\n    assert(candidate((\"\
    easy\")) == (\"\"));\n    assert(candidate((\"eAsy\")) == (\"\"));\n    assert(candidate((\"\
    ali\")) == (\"\"));\n    assert(candidate((\"bad\")) == (\"a\"));\n    assert(candidate((\"\
    most\")) == (\"o\"));\n    assert(candidate((\"ab\")) == (\"\"));\n    assert(candidate((\"\
    ba\")) == (\"\"));\n    assert(candidate((\"quick\")) == (\"\"));\n    assert(candidate((\"\
    anime\")) == (\"i\"));\n    assert(candidate((\"Asia\")) == (\"\"));\n    assert(candidate((\"\
    Above\")) == (\"o\"));\n}\n"
  stdout: ''
  stderr: "/tmp/tmptafnd0cr.cpp:50:36: warning: missing terminating \" character\n\
    \   50 |     std::string vowels_reverse36 = \"AEIOU\n      |                 \
    \                   ^\n/tmp/tmptafnd0cr.cpp:50:36: error: missing terminating\
    \ \" character\n   50 |     std::string vowels_reverse36 = \"AEIOU\n      |  \
    \                                  ^~~~~~\n/tmp/tmptafnd0cr.cpp: In function \u2018\
    std::string get_closest_vowel(std::string)\u2019:\n/tmp/tmptafnd0cr.cpp:51:1:\
    \ error: expected primary-expression before \u2018}\u2019 token\n   51 | }\n \
    \     | ^\n/tmp/tmptafnd0cr.cpp:51:1: error: expected \u2018,\u2019 or \u2018\
    ;\u2019 before \u2018}\u2019 token\n/tmp/tmptafnd0cr.cpp:51:1: warning: no return\
    \ statement in function returning non-void [-Wreturn-type]\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// get_closest_vowel(\"yogurt\") ==> \"u\"\
    \n// get_closest_vowel(\"FULL\") ==> \"U\"\n// get_closest_vowel(\"quick\") ==>\
    \ \"\"\n// get_closest_vowel(\"ab\") ==> \"\"\nstd::string get_closest_vowel(std::string\
    \ word) {\n    std::string vowels = \"AEIOUaeiou\";\n    std::string vowels_reverse\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse2 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse3 = \"AEIOUaeiou\";\n    std::string vowels_reverse4 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse5 = \"AEIOUaeiou\";\n    std::string vowels_reverse6\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse7 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse8 = \"AEIOUaeiou\";\n    std::string vowels_reverse9 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse10 = \"AEIOUaeiou\";\n    std::string vowels_reverse11\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse12 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse13 = \"AEIOUaeiou\";\n    std::string vowels_reverse14 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse15 = \"AEIOUaeiou\";\n    std::string vowels_reverse16\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse17 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse18 = \"AEIOUaeiou\";\n    std::string vowels_reverse19 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse20 = \"AEIOUaeiou\";\n    std::string vowels_reverse21\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse22 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse23 = \"AEIOUaeiou\";\n    std::string vowels_reverse24 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse25 = \"AEIOUaeiou\";\n    std::string vowels_reverse26\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse27 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse28 = \"AEIOUaeiou\";\n    std::string vowels_reverse29 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse30 = \"AEIOUaeiou\";\n    std::string vowels_reverse31\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse32 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse33 = \"AEIOUaeiou\";\n    std::string vowels_reverse34 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse35 = \"AEIOUaeiou\";\n    std::string vowels_reverse36\
    \ = \"AEIOU\n}\nint main() {\n    auto candidate = get_closest_vowel;\n    assert(candidate((\"\
    yogurt\")) == (\"u\"));\n    assert(candidate((\"full\")) == (\"u\"));\n    assert(candidate((\"\
    easy\")) == (\"\"));\n    assert(candidate((\"eAsy\")) == (\"\"));\n    assert(candidate((\"\
    ali\")) == (\"\"));\n    assert(candidate((\"bad\")) == (\"a\"));\n    assert(candidate((\"\
    most\")) == (\"o\"));\n    assert(candidate((\"ab\")) == (\"\"));\n    assert(candidate((\"\
    ba\")) == (\"\"));\n    assert(candidate((\"quick\")) == (\"\"));\n    assert(candidate((\"\
    anime\")) == (\"i\"));\n    assert(candidate((\"Asia\")) == (\"\"));\n    assert(candidate((\"\
    Above\")) == (\"o\"));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp873xnzov.cpp:50:36: warning: missing terminating \" character\n\
    \   50 |     std::string vowels_reverse36 = \"AEIOU\n      |                 \
    \                   ^\n/tmp/tmp873xnzov.cpp:50:36: error: missing terminating\
    \ \" character\n   50 |     std::string vowels_reverse36 = \"AEIOU\n      |  \
    \                                  ^~~~~~\n/tmp/tmp873xnzov.cpp: In function \u2018\
    std::string get_closest_vowel(std::string)\u2019:\n/tmp/tmp873xnzov.cpp:51:1:\
    \ error: expected primary-expression before \u2018}\u2019 token\n   51 | }\n \
    \     | ^\n/tmp/tmp873xnzov.cpp:51:1: error: expected \u2018,\u2019 or \u2018\
    ;\u2019 before \u2018}\u2019 token\n/tmp/tmp873xnzov.cpp:51:1: warning: no return\
    \ statement in function returning non-void [-Wreturn-type]\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// get_closest_vowel(\"yogurt\") ==> \"u\"\
    \n// get_closest_vowel(\"FULL\") ==> \"U\"\n// get_closest_vowel(\"quick\") ==>\
    \ \"\"\n// get_closest_vowel(\"ab\") ==> \"\"\nstd::string get_closest_vowel(std::string\
    \ word) {\n    std::string vowels = \"AEIOUaeiou\";\n    std::string vowels_reverse\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_reverse = \"AEIOUaeiou\";\n\
    \    std::string vowels_reverse_back = \"AEIOUaeiou\";\n    std::string vowels_reverse_back_reverse\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_back_reverse_back = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse_back_reverse_back_reverse = \"AEIOUaeiou\";\n\
    \    std::string vowels_reverse_back_reverse_back_reverse_back = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse = \"\
    AEIOUaeiou\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse\
    \ = \"AEIO\n}\nint main() {\n    auto candidate = get_closest_vowel;\n    assert(candidate((\"\
    yogurt\")) == (\"u\"));\n    assert(candidate((\"full\")) == (\"u\"));\n    assert(candidate((\"\
    easy\")) == (\"\"));\n    assert(candidate((\"eAsy\")) == (\"\"));\n    assert(candidate((\"\
    ali\")) == (\"\"));\n    assert(candidate((\"bad\")) == (\"a\"));\n    assert(candidate((\"\
    most\")) == (\"o\"));\n    assert(candidate((\"ab\")) == (\"\"));\n    assert(candidate((\"\
    ba\")) == (\"\"));\n    assert(candidate((\"quick\")) == (\"\"));\n    assert(candidate((\"\
    anime\")) == (\"i\"));\n    assert(candidate((\"Asia\")) == (\"\"));\n    assert(candidate((\"\
    Above\")) == (\"o\"));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp3svt8az3.cpp:34:138: warning: missing terminating \" character\n\
    \   34 |     std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse\
    \ = \"AEIO\n      |                                                          \
    \                                                                            \
    \    ^\n/tmp/tmp3svt8az3.cpp:34:138: error: missing terminating \" character\n\
    \   34 |     std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse\
    \ = \"AEIO\n      |                                                          \
    \                                                                            \
    \    ^~~~~\n/tmp/tmp3svt8az3.cpp: In function \u2018std::string get_closest_vowel(std::string)\u2019\
    :\n/tmp/tmp3svt8az3.cpp:32:17: error: redeclaration of \u2018std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\u2019\
    \n   32 |     std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\
    \ = \"AEIOUaeiou\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmp3svt8az3.cpp:31:17: note: \u2018std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\u2019\
    \ previously declared here\n   31 |     std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\
    \ = \"AEIOUaeiou\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmp3svt8az3.cpp:33:17: error: redeclaration of \u2018std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\u2019\
    \n   33 |     std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\
    \ = \"AEIOUaeiou\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmp3svt8az3.cpp:31:17: note: \u2018std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\u2019\
    \ previously declared here\n   31 |     std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\
    \ = \"AEIOUaeiou\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmp3svt8az3.cpp:35:1: error: expected primary-expression before \u2018}\u2019\
    \ token\n   35 | }\n      | ^\n/tmp/tmp3svt8az3.cpp:35:1: error: expected \u2018\
    ,\u2019 or \u2018;\u2019 before \u2018}\u2019 token\n/tmp/tmp3svt8az3.cpp:35:1:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// get_closest_vowel(\"yogurt\") ==> \"u\"\
    \n// get_closest_vowel(\"FULL\") ==> \"U\"\n// get_closest_vowel(\"quick\") ==>\
    \ \"\"\n// get_closest_vowel(\"ab\") ==> \"\"\nstd::string get_closest_vowel(std::string\
    \ word) {\n    std::string vowels = \"aeiouAEIOU\";\n    std::string vowels_reverse\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse2 = \"aeiouAEIOUaeiou\";\n\
    \    std::string vowels_reverse3 = \"aeiouAEIOUaeiou\";\n    std::string vowels_reverse4\
    \ = \"aeiouAEIOUaeiou\";\n    std::string vowels_reverse5 = \"aeiouAEIOUaeiou\"\
    ;\n    std::string vowels_reverse6 = \"aeiouAEIOUaeiou\";\n    std::string vowels_reverse7\
    \ = \"aeiouAEIOUaeiou\";\n    std::string vowels_reverse8 = \"aeiouAEIOUaeiou\"\
    ;\n    std::string vowels_reverse9 = \"aeiouAEIOUaeiou\";\n    std::string vowels_reverse10\
    \ = \"aeiouAEIOUaeiou\";\n    std::string vowels_reverse11 = \"aeiouAEIOUaeiou\"\
    ;\n    std::string vowels_reverse12 = \"aeiouAEIOUaeiou\";\n    std::string vowels_reverse13\
    \ = \"aeiouAEIOUaeiou\";\n    std::string vowels_reverse14 = \"aeiouAEIOUaeiou\"\
    ;\n    std::string vowels_reverse15 = \"aeiouAEIOUaeiou\";\n    std::string vowels_reverse16\
    \ = \"aeiouAEIOUaeiou\";\n    std::string vowels_reverse17 = \"aeiouAEIOUaeiou\"\
    ;\n    std::string vowels_reverse18 = \"aeiouAEIOUaeiou\";\n    std::string vowels_reverse19\
    \ = \"aeiouAEIOUaeiou\";\n    std::string vowels_reverse20 = \"aeiouAEIOUaeiou\"\
    ;\n    std::string vowels_reverse21 = \"aeiouAEIOUaeiou\";\n    std::string vowels_reverse22\
    \ = \"aeiouAEIOUaeiou\";\n    std::string vowels_reverse23 = \"aeiouAEIOUaeiou\"\
    ;\n    std::string vowels_reverse24 = \"aeiouAEIOUaeiou\";\n    std::string vowels_reverse25\
    \ = \"aeiouAEIOUaeiou\";\n    std::string vowels_reverse26 = \"aeiouAEIOUaeiou\"\
    ;\n    std::string vowels_reverse27 = \"aeiouAEIOUaeiou\";\n    std::string vowels_reverse28\
    \ = \"aeiouAEIOUaeiou\";\n    std::string vowels_reverse29 = \"aeiouAEIOUaeiou\"\
    ;\n    std::string vowels_reverse30 = \"aeiouAEIOUaeiou\";\n    std::string vowels_reverse31\
    \ = \"aeiouAEIOUaeiou\";\n    std::string vowels_reverse32\n}\nint main() {\n\
    \    auto candidate = get_closest_vowel;\n    assert(candidate((\"yogurt\")) ==\
    \ (\"u\"));\n    assert(candidate((\"full\")) == (\"u\"));\n    assert(candidate((\"\
    easy\")) == (\"\"));\n    assert(candidate((\"eAsy\")) == (\"\"));\n    assert(candidate((\"\
    ali\")) == (\"\"));\n    assert(candidate((\"bad\")) == (\"a\"));\n    assert(candidate((\"\
    most\")) == (\"o\"));\n    assert(candidate((\"ab\")) == (\"\"));\n    assert(candidate((\"\
    ba\")) == (\"\"));\n    assert(candidate((\"quick\")) == (\"\"));\n    assert(candidate((\"\
    anime\")) == (\"i\"));\n    assert(candidate((\"Asia\")) == (\"\"));\n    assert(candidate((\"\
    Above\")) == (\"o\"));\n}\n"
  stdout: ''
  stderr: "/tmp/tmphgnfaihe.cpp: In function \u2018std::string get_closest_vowel(std::string)\u2019\
    :\n/tmp/tmphgnfaihe.cpp:47:1: error: expected initializer before \u2018}\u2019\
    \ token\n   47 | }\n      | ^\n/tmp/tmphgnfaihe.cpp:47:1: warning: no return statement\
    \ in function returning non-void [-Wreturn-type]\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// get_closest_vowel(\"yogurt\") ==> \"u\"\
    \n// get_closest_vowel(\"FULL\") ==> \"U\"\n// get_closest_vowel(\"quick\") ==>\
    \ \"\"\n// get_closest_vowel(\"ab\") ==> \"\"\nstd::string get_closest_vowel(std::string\
    \ word) {\n    std::string vowels = \"AEIOUaeiou\";\n    std::string vowels_reverse\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse2 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse3 = \"AEIOUaeiou\";\n    std::string vowels_reverse4 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse5 = \"AEIOUaeiou\";\n    std::string vowels_reverse6\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse7 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse8 = \"AEIOUaeiou\";\n    std::string vowels_reverse9 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse10 = \"AEIOUaeiou\";\n    std::string vowels_reverse11\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse12 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse13 = \"AEIOUaeiou\";\n    std::string vowels_reverse14 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse15 = \"AEIOUaeiou\";\n    std::string vowels_reverse16\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse17 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse18 = \"AEIOUaeiou\";\n    std::string vowels_reverse19 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse20 = \"AEIOUaeiou\";\n    std::string vowels_reverse21\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse22 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse23 = \"AEIOUaeiou\";\n    std::string vowels_reverse24 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse25 = \"AEIOUaeiou\";\n    std::string vowels_reverse26\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse27 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse28 = \"AEIOUaeiou\";\n    std::string vowels_reverse29 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse30 = \"AEIOUaeiou\";\n    std::string vowels_reverse31\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse32 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse33 = \"AEIOUaeiou\";\n    std::string vowels_reverse34 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse35 = \"AEIOUaeiou\";\n    std::string vowels_reverse36\
    \ = \"AEIOU\n}\nint main() {\n    auto candidate = get_closest_vowel;\n    assert(candidate((\"\
    yogurt\")) == (\"u\"));\n    assert(candidate((\"full\")) == (\"u\"));\n    assert(candidate((\"\
    easy\")) == (\"\"));\n    assert(candidate((\"eAsy\")) == (\"\"));\n    assert(candidate((\"\
    ali\")) == (\"\"));\n    assert(candidate((\"bad\")) == (\"a\"));\n    assert(candidate((\"\
    most\")) == (\"o\"));\n    assert(candidate((\"ab\")) == (\"\"));\n    assert(candidate((\"\
    ba\")) == (\"\"));\n    assert(candidate((\"quick\")) == (\"\"));\n    assert(candidate((\"\
    anime\")) == (\"i\"));\n    assert(candidate((\"Asia\")) == (\"\"));\n    assert(candidate((\"\
    Above\")) == (\"o\"));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpcim41fhh.cpp:50:36: warning: missing terminating \" character\n\
    \   50 |     std::string vowels_reverse36 = \"AEIOU\n      |                 \
    \                   ^\n/tmp/tmpcim41fhh.cpp:50:36: error: missing terminating\
    \ \" character\n   50 |     std::string vowels_reverse36 = \"AEIOU\n      |  \
    \                                  ^~~~~~\n/tmp/tmpcim41fhh.cpp: In function \u2018\
    std::string get_closest_vowel(std::string)\u2019:\n/tmp/tmpcim41fhh.cpp:51:1:\
    \ error: expected primary-expression before \u2018}\u2019 token\n   51 | }\n \
    \     | ^\n/tmp/tmpcim41fhh.cpp:51:1: error: expected \u2018,\u2019 or \u2018\
    ;\u2019 before \u2018}\u2019 token\n/tmp/tmpcim41fhh.cpp:51:1: warning: no return\
    \ statement in function returning non-void [-Wreturn-type]\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// get_closest_vowel(\"yogurt\") ==> \"u\"\
    \n// get_closest_vowel(\"FULL\") ==> \"U\"\n// get_closest_vowel(\"quick\") ==>\
    \ \"\"\n// get_closest_vowel(\"ab\") ==> \"\"\nstd::string get_closest_vowel(std::string\
    \ word) {\n    std::string vowels = \"AEIOUaeiou\";\n    std::string vowels_reverse\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_reverse = \"AEIOUaeiou\";\n\
    \    std::string vowels_reverse_reverse_reverse = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse_reverse_reverse_reverse = \"AEIOUaeiou\";\n    std::string vowels_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AE\n}\nint main() {\n    auto candidate = get_closest_vowel;\n    assert(candidate((\"\
    yogurt\")) == (\"u\"));\n    assert(candidate((\"full\")) == (\"u\"));\n    assert(candidate((\"\
    easy\")) == (\"\"));\n    assert(candidate((\"eAsy\")) == (\"\"));\n    assert(candidate((\"\
    ali\")) == (\"\"));\n    assert(candidate((\"bad\")) == (\"a\"));\n    assert(candidate((\"\
    most\")) == (\"o\"));\n    assert(candidate((\"ab\")) == (\"\"));\n    assert(candidate((\"\
    ba\")) == (\"\"));\n    assert(candidate((\"quick\")) == (\"\"));\n    assert(candidate((\"\
    anime\")) == (\"i\"));\n    assert(candidate((\"Asia\")) == (\"\"));\n    assert(candidate((\"\
    Above\")) == (\"o\"));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpgwhnocvg.cpp:35:90: warning: missing terminating \" character\n\
    \   35 |     std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AE\n      |                                                            \
    \                              ^\n/tmp/tmpgwhnocvg.cpp:35:90: error: missing terminating\
    \ \" character\n   35 |     std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AE\n      |                                                            \
    \                              ^~~\n/tmp/tmpgwhnocvg.cpp: In function \u2018std::string\
    \ get_closest_vowel(std::string)\u2019:\n/tmp/tmpgwhnocvg.cpp:22:17: error: redeclaration\
    \ of \u2018std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse\u2019\
    \n   22 |     std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpgwhnocvg.cpp:21:17: note: \u2018std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse\u2019\
    \ previously declared here\n   21 |     std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpgwhnocvg.cpp:23:17: error: redeclaration of \u2018std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse\u2019\
    \n   23 |     std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpgwhnocvg.cpp:21:17: note: \u2018std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse\u2019\
    \ previously declared here\n   21 |     std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpgwhnocvg.cpp:25:17: error: redeclaration of \u2018std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\u2019\
    \n   25 |     std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpgwhnocvg.cpp:24:17: note: \u2018std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\u2019\
    \ previously declared here\n   24 |     std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpgwhnocvg.cpp:26:17: error: redeclaration of \u2018std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\u2019\
    \n   26 |     std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpgwhnocvg.cpp:24:17: note: \u2018std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\u2019\
    \ previously declared here\n   24 |     std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpgwhnocvg.cpp:27:17: error: redeclaration of \u2018std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\u2019\
    \n   27 |     std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpgwhnocvg.cpp:24:17: note: \u2018std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\u2019\
    \ previously declared here\n   24 |     std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpgwhnocvg.cpp:28:17: error: redeclaration of \u2018std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\u2019\
    \n   28 |     std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpgwhnocvg.cpp:24:17: note: \u2018std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\u2019\
    \ previously declared here\n   24 |     std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpgwhnocvg.cpp:29:17: error: redeclaration of \u2018std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\u2019\
    \n   29 |     std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpgwhnocvg.cpp:24:17: note: \u2018std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\u2019\
    \ previously declared here\n   24 |     std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpgwhnocvg.cpp:30:17: error: redeclaration of \u2018std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\u2019\
    \n   30 |     std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpgwhnocvg.cpp:24:17: note: \u2018std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\u2019\
    \ previously declared here\n   24 |     std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpgwhnocvg.cpp:31:17: error: redeclaration of \u2018std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\u2019\
    \n   31 |     std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpgwhnocvg.cpp:24:17: note: \u2018std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\u2019\
    \ previously declared here\n   24 |     std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpgwhnocvg.cpp:32:17: error: redeclaration of \u2018std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\u2019\
    \n   32 |     std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpgwhnocvg.cpp:24:17: note: \u2018std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\u2019\
    \ previously declared here\n   24 |     std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpgwhnocvg.cpp:33:17: error: redeclaration of \u2018std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\u2019\
    \n   33 |     std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpgwhnocvg.cpp:24:17: note: \u2018std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\u2019\
    \ previously declared here\n   24 |     std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpgwhnocvg.cpp:34:17: error: redeclaration of \u2018std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\u2019\
    \n   34 |     std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpgwhnocvg.cpp:24:17: note: \u2018std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\u2019\
    \ previously declared here\n   24 |     std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpgwhnocvg.cpp:35:17: error: redeclaration of \u2018std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\u2019\
    \n   35 |     std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AE\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpgwhnocvg.cpp:24:17: note: \u2018std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\u2019\
    \ previously declared here\n   24 |     std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpgwhnocvg.cpp:36:1: error: expected primary-expression before \u2018}\u2019\
    \ token\n   36 | }\n      | ^\n/tmp/tmpgwhnocvg.cpp:36:1: warning: no return statement\
    \ in function returning non-void [-Wreturn-type]\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// get_closest_vowel(\"yogurt\") ==> \"u\"\
    \n// get_closest_vowel(\"FULL\") ==> \"U\"\n// get_closest_vowel(\"quick\") ==>\
    \ \"\"\n// get_closest_vowel(\"ab\") ==> \"\"\nstd::string get_closest_vowel(std::string\
    \ word) {\n    std::string vowels = \"AEIOUaeiou\";\n    std::string vowels_reverse\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_reverse = \"AEIOUaeiou\";\n\
    \    std::string vowels_reverse_reverse_reverse = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse_reverse_reverse_reverse = \"AEIOUaeiou\";\n    std::string vowels_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AE\n}\nint main() {\n    auto candidate = get_closest_vowel;\n    assert(candidate((\"\
    yogurt\")) == (\"u\"));\n    assert(candidate((\"full\")) == (\"u\"));\n    assert(candidate((\"\
    easy\")) == (\"\"));\n    assert(candidate((\"eAsy\")) == (\"\"));\n    assert(candidate((\"\
    ali\")) == (\"\"));\n    assert(candidate((\"bad\")) == (\"a\"));\n    assert(candidate((\"\
    most\")) == (\"o\"));\n    assert(candidate((\"ab\")) == (\"\"));\n    assert(candidate((\"\
    ba\")) == (\"\"));\n    assert(candidate((\"quick\")) == (\"\"));\n    assert(candidate((\"\
    anime\")) == (\"i\"));\n    assert(candidate((\"Asia\")) == (\"\"));\n    assert(candidate((\"\
    Above\")) == (\"o\"));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpng4aao4t.cpp:35:90: warning: missing terminating \" character\n\
    \   35 |     std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AE\n      |                                                            \
    \                              ^\n/tmp/tmpng4aao4t.cpp:35:90: error: missing terminating\
    \ \" character\n   35 |     std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AE\n      |                                                            \
    \                              ^~~\n/tmp/tmpng4aao4t.cpp: In function \u2018std::string\
    \ get_closest_vowel(std::string)\u2019:\n/tmp/tmpng4aao4t.cpp:22:17: error: redeclaration\
    \ of \u2018std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse\u2019\
    \n   22 |     std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpng4aao4t.cpp:21:17: note: \u2018std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse\u2019\
    \ previously declared here\n   21 |     std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpng4aao4t.cpp:23:17: error: redeclaration of \u2018std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse\u2019\
    \n   23 |     std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpng4aao4t.cpp:21:17: note: \u2018std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse\u2019\
    \ previously declared here\n   21 |     std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpng4aao4t.cpp:25:17: error: redeclaration of \u2018std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\u2019\
    \n   25 |     std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpng4aao4t.cpp:24:17: note: \u2018std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\u2019\
    \ previously declared here\n   24 |     std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpng4aao4t.cpp:26:17: error: redeclaration of \u2018std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\u2019\
    \n   26 |     std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpng4aao4t.cpp:24:17: note: \u2018std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\u2019\
    \ previously declared here\n   24 |     std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpng4aao4t.cpp:27:17: error: redeclaration of \u2018std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\u2019\
    \n   27 |     std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpng4aao4t.cpp:24:17: note: \u2018std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\u2019\
    \ previously declared here\n   24 |     std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpng4aao4t.cpp:28:17: error: redeclaration of \u2018std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\u2019\
    \n   28 |     std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpng4aao4t.cpp:24:17: note: \u2018std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\u2019\
    \ previously declared here\n   24 |     std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpng4aao4t.cpp:29:17: error: redeclaration of \u2018std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\u2019\
    \n   29 |     std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpng4aao4t.cpp:24:17: note: \u2018std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\u2019\
    \ previously declared here\n   24 |     std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpng4aao4t.cpp:30:17: error: redeclaration of \u2018std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\u2019\
    \n   30 |     std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpng4aao4t.cpp:24:17: note: \u2018std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\u2019\
    \ previously declared here\n   24 |     std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpng4aao4t.cpp:31:17: error: redeclaration of \u2018std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\u2019\
    \n   31 |     std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpng4aao4t.cpp:24:17: note: \u2018std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\u2019\
    \ previously declared here\n   24 |     std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpng4aao4t.cpp:32:17: error: redeclaration of \u2018std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\u2019\
    \n   32 |     std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpng4aao4t.cpp:24:17: note: \u2018std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\u2019\
    \ previously declared here\n   24 |     std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpng4aao4t.cpp:33:17: error: redeclaration of \u2018std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\u2019\
    \n   33 |     std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpng4aao4t.cpp:24:17: note: \u2018std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\u2019\
    \ previously declared here\n   24 |     std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpng4aao4t.cpp:34:17: error: redeclaration of \u2018std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\u2019\
    \n   34 |     std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpng4aao4t.cpp:24:17: note: \u2018std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\u2019\
    \ previously declared here\n   24 |     std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpng4aao4t.cpp:35:17: error: redeclaration of \u2018std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\u2019\
    \n   35 |     std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AE\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpng4aao4t.cpp:24:17: note: \u2018std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\u2019\
    \ previously declared here\n   24 |     std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpng4aao4t.cpp:36:1: error: expected primary-expression before \u2018}\u2019\
    \ token\n   36 | }\n      | ^\n/tmp/tmpng4aao4t.cpp:36:1: warning: no return statement\
    \ in function returning non-void [-Wreturn-type]\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// get_closest_vowel(\"yogurt\") ==> \"u\"\
    \n// get_closest_vowel(\"FULL\") ==> \"U\"\n// get_closest_vowel(\"quick\") ==>\
    \ \"\"\n// get_closest_vowel(\"ab\") ==> \"\"\nstd::string get_closest_vowel(std::string\
    \ word) {\n    std::string vowels = \"AEIOUaeiou\";\n    std::string vowels_reversed\
    \ = vowels.substr(0, vowels.size() - 1);\n    std::string vowels_reversed_upper\
    \ = vowels_reversed.toUpper();\n    std::string vowels_reversed_lower = vowels_reversed.toLower();\n\
    \    std::string vowels_reversed_upper_reversed = vowels_reversed_upper.substr(0,\
    \ vowels_reversed_upper.size() - 1);\n    std::string vowels_reversed_lower_reversed\
    \ = vowels_reversed_lower.substr(0, vowels_reversed_lower.size() - 1);\n    std::string\
    \ vowels_reversed_upper_reversed_reversed = vowels_reversed_upper_reversed.substr(0,\
    \ vowels_reversed_upper_reversed.size() - 1);\n    std::string vowels_reversed_lower_reversed_reversed\
    \ = vowels_reversed_lower_reversed.substr(0, vowels_reversed_lower_reversed.size()\
    \ - 1);\n    std::string vowels_reversed_upper_reversed_reversed_reversed = vowels_reversed_upper_reversed_reversed.substr(0,\
    \ vowels_reversed_upper_reversed_reversed.size() - 1);\n    std::string vowels_reversed_lower_reversed_reversed_reversed\
    \ = vowels_reversed_lower_reversed_reversed.substr(0, vowels_reversed_lower_reversed_reversed.size()\
    \ - 1);\n    std::string vowels_reversed_upper_reversed_reversed_reversed_reversed\
    \ = vowels_reversed_upper_reversed_reversed_reversed.substr(0, vowels_reversed_upper_reversed_reversed_reversed.size()\
    \ - 1);\n    std::string vowels_reversed_lower_reversed_reversed_reversed_reversed\
    \ = vowels_reversed_lower_reversed_reversed_reversed.substr(0, vowels_reversed_lower_reversed_reversed_reversed.size()\
    \ - 1);\n    std::string vowels_reversed_upper_reversed_reversed_reversed_reversed_reversed\
    \ = vowels_reversed_upper_reversed_reversed_reversed_reversed.substr(0, vowels_reversed_upper_reversed_reversed_reversed_reversed.size()\
    \ - 1);\n    std::string vowels_reversed_lower_reversed_reversed_reversed_reversed_reversed\
    \ = vowels_reversed_lower_reversed_reversed_reversed_reversed_reversed.substr(0,\
    \ vowels_reversed_lower_reversed_reversed_reversed_reversed_reversed.size() -\
    \ 1);\n    std::string vowels_reversed_upper_reversed_reversed_reversed_reversed_reversed_reversed\
    \ = vowels_reversed_upper_reversed_reversed_reversed_reversed_reversed_reversed.substr(0,\
    \ vowels_reversed_upper_reversed_reversed_reversed_reversed_reversed_reversed.size()\
    \ - 1);\n    std::string \n}\nint main() {\n    auto candidate = get_closest_vowel;\n\
    \    assert(candidate((\"yogurt\")) == (\"u\"));\n    assert(candidate((\"full\"\
    )) == (\"u\"));\n    assert(candidate((\"easy\")) == (\"\"));\n    assert(candidate((\"\
    eAsy\")) == (\"\"));\n    assert(candidate((\"ali\")) == (\"\"));\n    assert(candidate((\"\
    bad\")) == (\"a\"));\n    assert(candidate((\"most\")) == (\"o\"));\n    assert(candidate((\"\
    ab\")) == (\"\"));\n    assert(candidate((\"ba\")) == (\"\"));\n    assert(candidate((\"\
    quick\")) == (\"\"));\n    assert(candidate((\"anime\")) == (\"i\"));\n    assert(candidate((\"\
    Asia\")) == (\"\"));\n    assert(candidate((\"Above\")) == (\"o\"));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpmy0thqs4.cpp: In function \u2018std::string get_closest_vowel(std::string)\u2019\
    :\n/tmp/tmpmy0thqs4.cpp:16:57: error: \u2018std::string\u2019 {aka \u2018class\
    \ std::__cxx11::basic_string<char>\u2019} has no member named \u2018toUpper\u2019\
    \n   16 |     std::string vowels_reversed_upper = vowels_reversed.toUpper();\n\
    \      |                                                         ^~~~~~~\n/tmp/tmpmy0thqs4.cpp:17:57:\
    \ error: \u2018std::string\u2019 {aka \u2018class std::__cxx11::basic_string<char>\u2019\
    } has no member named \u2018toLower\u2019\n   17 |     std::string vowels_reversed_lower\
    \ = vowels_reversed.toLower();\n      |                                      \
    \                   ^~~~~~~\n/tmp/tmpmy0thqs4.cpp:30:1: error: expected unqualified-id\
    \ before \u2018}\u2019 token\n   30 | }\n      | ^\n/tmp/tmpmy0thqs4.cpp:30:1:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// get_closest_vowel(\"yogurt\") ==> \"u\"\
    \n// get_closest_vowel(\"FULL\") ==> \"U\"\n// get_closest_vowel(\"quick\") ==>\
    \ \"\"\n// get_closest_vowel(\"ab\") ==> \"\"\nstd::string get_closest_vowel(std::string\
    \ word) {\n    std::string vowels = \"AEIOUaeiou\";\n    std::string vowels_reverse\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_reverse = \"AEIOUaeiou\";\n\
    \    std::string vowels_reverse_back = \"AEIOUaeiou\";\n    std::string vowels_reverse_back_reverse\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_back_reverse_back = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse_back_reverse_back_reverse = \"AEIOUaeiou\";\n\
    \    std::string vowels_reverse_back_reverse_back_reverse_back = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse = \"\
    AEIOUaeiou\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\n\
    }\nint main() {\n    auto candidate = get_closest_vowel;\n    assert(candidate((\"\
    yogurt\")) == (\"u\"));\n    assert(candidate((\"full\")) == (\"u\"));\n    assert(candidate((\"\
    easy\")) == (\"\"));\n    assert(candidate((\"eAsy\")) == (\"\"));\n    assert(candidate((\"\
    ali\")) == (\"\"));\n    assert(candidate((\"bad\")) == (\"a\"));\n    assert(candidate((\"\
    most\")) == (\"o\"));\n    assert(candidate((\"ab\")) == (\"\"));\n    assert(candidate((\"\
    ba\")) == (\"\"));\n    assert(candidate((\"quick\")) == (\"\"));\n    assert(candidate((\"\
    anime\")) == (\"i\"));\n    assert(candidate((\"Asia\")) == (\"\"));\n    assert(candidate((\"\
    Above\")) == (\"o\"));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpqi79pfd5.cpp: In function \u2018std::string get_closest_vowel(std::string)\u2019\
    :\n/tmp/tmpqi79pfd5.cpp:32:17: error: redeclaration of \u2018std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\u2019\
    \n   32 |     std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\
    \ = \"AEIOUaeiou\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpqi79pfd5.cpp:31:17: note: \u2018std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\u2019\
    \ previously declared here\n   31 |     std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\
    \ = \"AEIOUaeiou\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpqi79pfd5.cpp:35:1: error: expected initializer before \u2018}\u2019 token\n\
    \   35 | }\n      | ^\n/tmp/tmpqi79pfd5.cpp:35:1: warning: no return statement\
    \ in function returning non-void [-Wreturn-type]\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// get_closest_vowel(\"yogurt\") ==> \"u\"\
    \n// get_closest_vowel(\"FULL\") ==> \"U\"\n// get_closest_vowel(\"quick\") ==>\
    \ \"\"\n// get_closest_vowel(\"ab\") ==> \"\"\nstd::string get_closest_vowel(std::string\
    \ word) {\n    std::string vowels = \"AEIOUaeiou\";\n    std::string vowels_reverse\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_reverse = \"\";\n    std::string\
    \ vowels_reverse_back = \"\";\n    std::string vowels_reverse_back_reverse = \"\
    \";\n    std::string vowels_reverse_back_reverse_back = \"\";\n    std::string\
    \ vowels_reverse_back_reverse_back_reverse = \"\";\n    std::string vowels_reverse_back_reverse_back_reverse_back\
    \ = \"\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse\
    \ = \"\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back\
    \ = \"\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse\
    \ = \"\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\
    \ = \"\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse\
    \ = \"\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\
    \ = \"\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\
    \ = \"\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse\
    \ = \"\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\
    \ = \"\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse\
    \ = \"\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\
    \ = \"\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\
    \ = \"\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse\
    \ = \"\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\
    \ = \"\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\
    \ = \"\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\
    \ = \"\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_re\n\
    }\nint main() {\n    auto candidate = get_closest_vowel;\n    assert(candidate((\"\
    yogurt\")) == (\"u\"));\n    assert(candidate((\"full\")) == (\"u\"));\n    assert(candidate((\"\
    easy\")) == (\"\"));\n    assert(candidate((\"eAsy\")) == (\"\"));\n    assert(candidate((\"\
    ali\")) == (\"\"));\n    assert(candidate((\"bad\")) == (\"a\"));\n    assert(candidate((\"\
    most\")) == (\"o\"));\n    assert(candidate((\"ab\")) == (\"\"));\n    assert(candidate((\"\
    ba\")) == (\"\"));\n    assert(candidate((\"quick\")) == (\"\"));\n    assert(candidate((\"\
    anime\")) == (\"i\"));\n    assert(candidate((\"Asia\")) == (\"\"));\n    assert(candidate((\"\
    Above\")) == (\"o\"));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpsz8bge00.cpp: In function \u2018std::string get_closest_vowel(std::string)\u2019\
    :\n/tmp/tmpsz8bge00.cpp:28:17: error: redeclaration of \u2018std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\u2019\
    \n   28 |     std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\
    \ = \"\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpsz8bge00.cpp:27:17: note: \u2018std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\u2019\
    \ previously declared here\n   27 |     std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\
    \ = \"\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpsz8bge00.cpp:33:17: error: redeclaration of \u2018std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\u2019\
    \n   33 |     std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\
    \ = \"\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpsz8bge00.cpp:32:17: note: \u2018std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\u2019\
    \ previously declared here\n   32 |     std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\
    \ = \"\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpsz8bge00.cpp:36:17: error: redeclaration of \u2018std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\u2019\
    \n   36 |     std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\
    \ = \"\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpsz8bge00.cpp:35:17: note: \u2018std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\u2019\
    \ previously declared here\n   35 |     std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\
    \ = \"\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpsz8bge00.cpp:37:17: error: redeclaration of \u2018std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\u2019\
    \n   37 |     std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\
    \ = \"\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpsz8bge00.cpp:35:17: note: \u2018std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\u2019\
    \ previously declared here\n   35 |     std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\
    \ = \"\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpsz8bge00.cpp:39:1: error: expected initializer before \u2018}\u2019 token\n\
    \   39 | }\n      | ^\n/tmp/tmpsz8bge00.cpp:39:1: warning: no return statement\
    \ in function returning non-void [-Wreturn-type]\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// get_closest_vowel(\"yogurt\") ==> \"u\"\
    \n// get_closest_vowel(\"FULL\") ==> \"U\"\n// get_closest_vowel(\"quick\") ==>\
    \ \"\"\n// get_closest_vowel(\"ab\") ==> \"\"\nstd::string get_closest_vowel(std::string\
    \ word) {\n    std::string vowels = \"AEIOUaeiou\";\n    std::string vowels_reverse\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse2 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse3 = \"AEIOUaeiou\";\n    std::string vowels_reverse4 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse5 = \"AEIOUaeiou\";\n    std::string vowels_reverse6\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse7 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse8 = \"AEIOUaeiou\";\n    std::string vowels_reverse9 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse10 = \"AEIOUaeiou\";\n    std::string vowels_reverse11\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse12 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse13 = \"AEIOUaeiou\";\n    std::string vowels_reverse14 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse15 = \"AEIOUaeiou\";\n    std::string vowels_reverse16\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse17 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse18 = \"AEIOUaeiou\";\n    std::string vowels_reverse19 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse20 = \"AEIOUaeiou\";\n    std::string vowels_reverse21\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse22 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse23 = \"AEIOUaeiou\";\n    std::string vowels_reverse24 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse25 = \"AEIOUaeiou\";\n    std::string vowels_reverse26\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse27 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse28 = \"AEIOUaeiou\";\n    std::string vowels_reverse29 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse30 = \"AEIOUaeiou\";\n    std::string vowels_reverse31\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse32 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse33 = \"AEIOUaeiou\";\n    std::string vowels_reverse34 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse35 = \"AEIOUaeiou\";\n    std::string vowels_reverse36\
    \ = \"AEIOU\n}\nint main() {\n    auto candidate = get_closest_vowel;\n    assert(candidate((\"\
    yogurt\")) == (\"u\"));\n    assert(candidate((\"full\")) == (\"u\"));\n    assert(candidate((\"\
    easy\")) == (\"\"));\n    assert(candidate((\"eAsy\")) == (\"\"));\n    assert(candidate((\"\
    ali\")) == (\"\"));\n    assert(candidate((\"bad\")) == (\"a\"));\n    assert(candidate((\"\
    most\")) == (\"o\"));\n    assert(candidate((\"ab\")) == (\"\"));\n    assert(candidate((\"\
    ba\")) == (\"\"));\n    assert(candidate((\"quick\")) == (\"\"));\n    assert(candidate((\"\
    anime\")) == (\"i\"));\n    assert(candidate((\"Asia\")) == (\"\"));\n    assert(candidate((\"\
    Above\")) == (\"o\"));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpqzse3mt6.cpp:50:36: warning: missing terminating \" character\n\
    \   50 |     std::string vowels_reverse36 = \"AEIOU\n      |                 \
    \                   ^\n/tmp/tmpqzse3mt6.cpp:50:36: error: missing terminating\
    \ \" character\n   50 |     std::string vowels_reverse36 = \"AEIOU\n      |  \
    \                                  ^~~~~~\n/tmp/tmpqzse3mt6.cpp: In function \u2018\
    std::string get_closest_vowel(std::string)\u2019:\n/tmp/tmpqzse3mt6.cpp:51:1:\
    \ error: expected primary-expression before \u2018}\u2019 token\n   51 | }\n \
    \     | ^\n/tmp/tmpqzse3mt6.cpp:51:1: error: expected \u2018,\u2019 or \u2018\
    ;\u2019 before \u2018}\u2019 token\n/tmp/tmpqzse3mt6.cpp:51:1: warning: no return\
    \ statement in function returning non-void [-Wreturn-type]\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// get_closest_vowel(\"yogurt\") ==> \"u\"\
    \n// get_closest_vowel(\"FULL\") ==> \"U\"\n// get_closest_vowel(\"quick\") ==>\
    \ \"\"\n// get_closest_vowel(\"ab\") ==> \"\"\nstd::string get_closest_vowel(std::string\
    \ word) {\n    std::string vowels = \"AEIOUaeiou\";\n    std::string vowels_reverse\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse2 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse3 = \"AEIOUaeiou\";\n    std::string vowels_reverse4 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse5 = \"AEIOUaeiou\";\n    std::string vowels_reverse6\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse7 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse8 = \"AEIOUaeiou\";\n    std::string vowels_reverse9 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse10 = \"AEIOUaeiou\";\n    std::string vowels_reverse11\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse12 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse13 = \"AEIOUaeiou\";\n    std::string vowels_reverse14 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse15 = \"AEIOUaeiou\";\n    std::string vowels_reverse16\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse17 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse18 = \"AEIOUaeiou\";\n    std::string vowels_reverse19 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse20 = \"AEIOUaeiou\";\n    std::string vowels_reverse21\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse22 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse23 = \"AEIOUaeiou\";\n    std::string vowels_reverse24 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse25 = \"AEIOUaeiou\";\n    std::string vowels_reverse26\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse27 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse28 = \"AEIOUaeiou\";\n    std::string vowels_reverse29 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse30 = \"AEIOUaeiou\";\n    std::string vowels_reverse31\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse32 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse33 = \"AEIOUaeiou\";\n    std::string vowels_reverse34 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse35 = \"AEIOUaeiou\";\n    std::string vowels_reverse36\
    \ = \"AEIOU\n}\nint main() {\n    auto candidate = get_closest_vowel;\n    assert(candidate((\"\
    yogurt\")) == (\"u\"));\n    assert(candidate((\"full\")) == (\"u\"));\n    assert(candidate((\"\
    easy\")) == (\"\"));\n    assert(candidate((\"eAsy\")) == (\"\"));\n    assert(candidate((\"\
    ali\")) == (\"\"));\n    assert(candidate((\"bad\")) == (\"a\"));\n    assert(candidate((\"\
    most\")) == (\"o\"));\n    assert(candidate((\"ab\")) == (\"\"));\n    assert(candidate((\"\
    ba\")) == (\"\"));\n    assert(candidate((\"quick\")) == (\"\"));\n    assert(candidate((\"\
    anime\")) == (\"i\"));\n    assert(candidate((\"Asia\")) == (\"\"));\n    assert(candidate((\"\
    Above\")) == (\"o\"));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp8be9_b6z.cpp:50:36: warning: missing terminating \" character\n\
    \   50 |     std::string vowels_reverse36 = \"AEIOU\n      |                 \
    \                   ^\n/tmp/tmp8be9_b6z.cpp:50:36: error: missing terminating\
    \ \" character\n   50 |     std::string vowels_reverse36 = \"AEIOU\n      |  \
    \                                  ^~~~~~\n/tmp/tmp8be9_b6z.cpp: In function \u2018\
    std::string get_closest_vowel(std::string)\u2019:\n/tmp/tmp8be9_b6z.cpp:51:1:\
    \ error: expected primary-expression before \u2018}\u2019 token\n   51 | }\n \
    \     | ^\n/tmp/tmp8be9_b6z.cpp:51:1: error: expected \u2018,\u2019 or \u2018\
    ;\u2019 before \u2018}\u2019 token\n/tmp/tmp8be9_b6z.cpp:51:1: warning: no return\
    \ statement in function returning non-void [-Wreturn-type]\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// get_closest_vowel(\"yogurt\") ==> \"u\"\
    \n// get_closest_vowel(\"FULL\") ==> \"U\"\n// get_closest_vowel(\"quick\") ==>\
    \ \"\"\n// get_closest_vowel(\"ab\") ==> \"\"\nstd::string get_closest_vowel(std::string\
    \ word) {\n    // Your code here\n    std::string vowels = \"AEIOUaeiou\";\n \
    \   std::string vowels_reverse = vowels.substr(0, vowels.size() - 1);\n    std::string\
    \ vowels_reverse2 = vowels.substr(0, vowels.size() - 2);\n    std::string vowels_reverse3\
    \ = vowels.substr(0, vowels.size() - 3);\n    std::string vowels_reverse4 = vowels.substr(0,\
    \ vowels.size() - 4);\n    std::string vowels_reverse5 = vowels.substr(0, vowels.size()\
    \ - 5);\n    std::string vowels_reverse6 = vowels.substr(0, vowels.size() - 6);\n\
    \    std::string vowels_reverse7 = vowels.substr(0, vowels.size() - 7);\n    std::string\
    \ vowels_reverse8 = vowels.substr(0, vowels.size() - 8);\n    std::string vowels_reverse9\
    \ = vowels.substr(0, vowels.size() - 9);\n    std::string vowels_reverse10 = vowels.substr(0,\
    \ vowels.size() - 10);\n    std::string vowels_reverse11 = vowels.substr(0, vowels.size()\
    \ - 11);\n    std::string vowels_reverse12 = vowels.substr(0, vowels.size() -\
    \ 12);\n    std::string vowels_reverse13 = vowels.substr(0, vowels.size() - 13);\n\
    \    std::string vowels_reverse14 = vowels.substr(0, vowels.size() - 14);\n  \
    \  std::string vowels_reverse15 = vowels.substr(0, vowels.size() - 15);\n    std::string\
    \ vowels_reverse16 = vowels.substr(0, vowels.size() - 16);\n    std::string vowels_reverse17\
    \ = vowels.substr(0, vowels.size() - 17);\n    std::string vowels_reverse18 =\
    \ vowels.substr(0, vowels.size() - 18);\n    std::string vowels_reverse19 = vowels.substr(0,\
    \ vowels.size() - 19);\n    std::string vowels_reverse20 = vowels.substr(0, vowels.size()\
    \ - 20);\n    std::string vowels_reverse21 = vowels.substr(0, vowels.size() -\
    \ 21);\n    std::string vowels_reverse22 = vowels.substr(0, vowels.size() - 22);\n\
    \    std::string vowels_reverse23 = vowels.substr(0, vowels.size() - 23);\n  \
    \  std::string vowels_reverse24 = vowels.substr(0, vowels.size() - 24);\n    std::string\
    \ vowels_reverse25 = vowels.substr(0, vowels.size() - 25);\n    std::string vowels_reverse26\
    \ = vowels.substr(0, vowels.size() - 26);\n    std::string vowels_reverse27 =\
    \ vowels.substr(0, vowels.size() - 27);\n    std::string vowels_reverse28 = vowels.substr(0,\
    \ vowels.size() - 28);\n    std::string vowels_reverse29 = vowels.substr(0, vowels.size()\
    \ - 29);\n    std::string vowels_reverse30 = vowels.substr(0, vowels.size() -\
    \ 30);\n    std::string vowels_reverse31 = vowels.substr(0, vowels.size() - 31);\n\
    }\nint main() {\n    auto candidate = get_closest_vowel;\n    assert(candidate((\"\
    yogurt\")) == (\"u\"));\n    assert(candidate((\"full\")) == (\"u\"));\n    assert(candidate((\"\
    easy\")) == (\"\"));\n    assert(candidate((\"eAsy\")) == (\"\"));\n    assert(candidate((\"\
    ali\")) == (\"\"));\n    assert(candidate((\"bad\")) == (\"a\"));\n    assert(candidate((\"\
    most\")) == (\"o\"));\n    assert(candidate((\"ab\")) == (\"\"));\n    assert(candidate((\"\
    ba\")) == (\"\"));\n    assert(candidate((\"quick\")) == (\"\"));\n    assert(candidate((\"\
    anime\")) == (\"i\"));\n    assert(candidate((\"Asia\")) == (\"\"));\n    assert(candidate((\"\
    Above\")) == (\"o\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// get_closest_vowel(\"yogurt\") ==> \"u\"\
    \n// get_closest_vowel(\"FULL\") ==> \"U\"\n// get_closest_vowel(\"quick\") ==>\
    \ \"\"\n// get_closest_vowel(\"ab\") ==> \"\"\nstd::string get_closest_vowel(std::string\
    \ word) {\n    std::string vowels = \"aeiouAEIOU\";\n    std::string vowels_reverse\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse2 = \"aeiouAEIOU\";\n    std::string\
    \ vowels_reverse3 = \"AEIOUaeiou\";\n    std::string vowels_reverse4 = \"aeiouAEIOU\"\
    ;\n    std::string vowels_reverse5 = \"AEIOUaeiou\";\n    std::string vowels_reverse6\
    \ = \"aeiouAEIOU\";\n    std::string vowels_reverse7 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse8 = \"aeiouAEIOU\";\n    std::string vowels_reverse9 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse10 = \"aeiouAEIOU\";\n    std::string vowels_reverse11\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse12 = \"aeiouAEIOU\";\n    std::string\
    \ vowels_reverse13 = \"AEIOUaeiou\";\n    std::string vowels_reverse14 = \"aeiouAEIOU\"\
    ;\n    std::string vowels_reverse15 = \"AEIOUaeiou\";\n    std::string vowels_reverse16\
    \ = \"aeiouAEIOU\";\n    std::string vowels_reverse17 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse18 = \"aeiouAEIOU\";\n    std::string vowels_reverse19 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse20 = \"aeiouAEIOU\";\n    std::string vowels_reverse21\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse22 = \"aeiouAEIOU\";\n    std::string\
    \ vowels_reverse23 = \"AEIOUaeiou\";\n    std::string vowels_reverse24 = \"aeiouAEIOU\"\
    ;\n    std::string vowels_reverse25 = \"AEIOUaeiou\";\n    std::string vowels_reverse26\
    \ = \"aeiouAEIOU\";\n    std::string vowels_reverse27 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse28 = \"aeiouAEIOU\";\n    std::string vowels_reverse29 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse30 = \"aeiouAEIOU\";\n    std::string vowels_reverse31\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse32 = \"aeiouAEIOU\";\n    std::string\
    \ vowels_reverse33 = \"AEIOUaeiou\";\n    std::string vowels_reverse34 = \"aeiouAEIOU\"\
    ;\n    std::string vowels_reverse35 = \"AEIOUaeiou\";\n    std::string vowels_reverse36\
    \ = \"aeiouAE\n}\nint main() {\n    auto candidate = get_closest_vowel;\n    assert(candidate((\"\
    yogurt\")) == (\"u\"));\n    assert(candidate((\"full\")) == (\"u\"));\n    assert(candidate((\"\
    easy\")) == (\"\"));\n    assert(candidate((\"eAsy\")) == (\"\"));\n    assert(candidate((\"\
    ali\")) == (\"\"));\n    assert(candidate((\"bad\")) == (\"a\"));\n    assert(candidate((\"\
    most\")) == (\"o\"));\n    assert(candidate((\"ab\")) == (\"\"));\n    assert(candidate((\"\
    ba\")) == (\"\"));\n    assert(candidate((\"quick\")) == (\"\"));\n    assert(candidate((\"\
    anime\")) == (\"i\"));\n    assert(candidate((\"Asia\")) == (\"\"));\n    assert(candidate((\"\
    Above\")) == (\"o\"));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpej4yo2px.cpp:50:36: warning: missing terminating \" character\n\
    \   50 |     std::string vowels_reverse36 = \"aeiouAE\n      |               \
    \                     ^\n/tmp/tmpej4yo2px.cpp:50:36: error: missing terminating\
    \ \" character\n   50 |     std::string vowels_reverse36 = \"aeiouAE\n      |\
    \                                    ^~~~~~~~\n/tmp/tmpej4yo2px.cpp: In function\
    \ \u2018std::string get_closest_vowel(std::string)\u2019:\n/tmp/tmpej4yo2px.cpp:51:1:\
    \ error: expected primary-expression before \u2018}\u2019 token\n   51 | }\n \
    \     | ^\n/tmp/tmpej4yo2px.cpp:51:1: error: expected \u2018,\u2019 or \u2018\
    ;\u2019 before \u2018}\u2019 token\n/tmp/tmpej4yo2px.cpp:51:1: warning: no return\
    \ statement in function returning non-void [-Wreturn-type]\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// get_closest_vowel(\"yogurt\") ==> \"u\"\
    \n// get_closest_vowel(\"FULL\") ==> \"U\"\n// get_closest_vowel(\"quick\") ==>\
    \ \"\"\n// get_closest_vowel(\"ab\") ==> \"\"\nstd::string get_closest_vowel(std::string\
    \ word) {\n    std::string vowels = \"AEIOUaeiou\";\n    std::string vowels_end\
    \ = \"AEIOUaeiouy\";\n    std::string vowels_start = \"AEIOUaeiou\";\n    std::string\
    \ vowels_start_end = \"AEIOUaeiouy\";\n    std::string vowels_start_end_end =\
    \ \"AEIOUaeiouy\";\n    std::string vowels_start_end_end_end = \"AEIOUaeiouy\"\
    ;\n    std::string vowels_start_end_end_end_end = \"AEIOUaeiouy\";\n    std::string\
    \ vowels_start_end_end_end_end_end = \"AEIOUaeiouy\";\n    std::string vowels_start_end_end_end_end_end_end\
    \ = \"AEIOUaeiouy\";\n    std::string vowels_start_end_end_end_end_end_end_end\
    \ = \"AEIOUaeiouy\";\n    std::string vowels_start_end_end_end_end_end_end_end_end\
    \ = \"AEIOUaeiouy\";\n    std::string vowels_start_end_end_end_end_end_end_end_end_end\
    \ = \"AEIOUaeiouy\";\n    std::string vowels_start_end_end_end_end_end_end_end_end_end\
    \ = \"AEIOUaeiouy\";\n    std::string vowels_start_end_end_end_end_end_end_end_end_end_end\
    \ = \"AEIOUaeiouy\";\n    std::string vowels_start_end_end_end_end_end_end_end_end_end_end\
    \ = \"AEIOUaeiouy\";\n    std::string vowels_start_end_end_end_end_end_end_end_end_end_end_end\
    \ = \"AEIOUaeiouy\";\n    std::string vowels_start_end_end_end_end_end_end_end_end_end_end_end_end\
    \ = \"AEIOUaeiouy\";\n    std::string vowels_start_end_end_end_end_end_end_end_end_end_end_end_end\
    \ = \"AEIOUaeiouy\";\n    std::string vowels_start_end_end_end_end_end_end_end_end_end_end_end_end\
    \ = \"AEIOUaeiouy\";\n    std::string vowels_start_end_end_end_end_end_end_end_end_end_end_end_end_end\
    \ = \"AEIOUaeiouy\";\n    std::string vowels_start_end_end_end_end_end_end_end_end_end_end_end_end_end\
    \ = \"AEIOUaeiouy\";\n    std::string vowels_start_end_end_end_end_end_end_end_end_end_end_end_end_end\
    \ = \"AEIOUaeiouy\";\n    std::string vowels_start_end_end_end_end_end_end_end_end_end_end_end_end_end_end\
    \ = \"AEIOUaeiouy\";\n    std::string vowels_start_end_end_end_end_end_end_end_end_end_end_end_end_end_end\
    \ = \"\n}\nint main() {\n    auto candidate = get_closest_vowel;\n    assert(candidate((\"\
    yogurt\")) == (\"u\"));\n    assert(candidate((\"full\")) == (\"u\"));\n    assert(candidate((\"\
    easy\")) == (\"\"));\n    assert(candidate((\"eAsy\")) == (\"\"));\n    assert(candidate((\"\
    ali\")) == (\"\"));\n    assert(candidate((\"bad\")) == (\"a\"));\n    assert(candidate((\"\
    most\")) == (\"o\"));\n    assert(candidate((\"ab\")) == (\"\"));\n    assert(candidate((\"\
    ba\")) == (\"\"));\n    assert(candidate((\"quick\")) == (\"\"));\n    assert(candidate((\"\
    anime\")) == (\"i\"));\n    assert(candidate((\"Asia\")) == (\"\"));\n    assert(candidate((\"\
    Above\")) == (\"o\"));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp0ub79jpd.cpp:37:88: warning: missing terminating \" character\n\
    \   37 |     std::string vowels_start_end_end_end_end_end_end_end_end_end_end_end_end_end_end\
    \ = \"\n      |                                                              \
    \                          ^\n/tmp/tmp0ub79jpd.cpp:37:88: error: missing terminating\
    \ \" character\n/tmp/tmp0ub79jpd.cpp: In function \u2018std::string get_closest_vowel(std::string)\u2019\
    :\n/tmp/tmp0ub79jpd.cpp:26:17: error: redeclaration of \u2018std::string vowels_start_end_end_end_end_end_end_end_end_end\u2019\
    \n   26 |     std::string vowels_start_end_end_end_end_end_end_end_end_end = \"\
    AEIOUaeiouy\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmp0ub79jpd.cpp:25:17: note: \u2018std::string vowels_start_end_end_end_end_end_end_end_end_end\u2019\
    \ previously declared here\n   25 |     std::string vowels_start_end_end_end_end_end_end_end_end_end\
    \ = \"AEIOUaeiouy\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmp0ub79jpd.cpp:28:17: error: redeclaration of \u2018std::string vowels_start_end_end_end_end_end_end_end_end_end_end\u2019\
    \n   28 |     std::string vowels_start_end_end_end_end_end_end_end_end_end_end\
    \ = \"AEIOUaeiouy\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmp0ub79jpd.cpp:27:17: note: \u2018std::string vowels_start_end_end_end_end_end_end_end_end_end_end\u2019\
    \ previously declared here\n   27 |     std::string vowels_start_end_end_end_end_end_end_end_end_end_end\
    \ = \"AEIOUaeiouy\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmp0ub79jpd.cpp:31:17: error: redeclaration of \u2018std::string vowels_start_end_end_end_end_end_end_end_end_end_end_end_end\u2019\
    \n   31 |     std::string vowels_start_end_end_end_end_end_end_end_end_end_end_end_end\
    \ = \"AEIOUaeiouy\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmp0ub79jpd.cpp:30:17: note: \u2018std::string vowels_start_end_end_end_end_end_end_end_end_end_end_end_end\u2019\
    \ previously declared here\n   30 |     std::string vowels_start_end_end_end_end_end_end_end_end_end_end_end_end\
    \ = \"AEIOUaeiouy\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmp0ub79jpd.cpp:32:17: error: redeclaration of \u2018std::string vowels_start_end_end_end_end_end_end_end_end_end_end_end_end\u2019\
    \n   32 |     std::string vowels_start_end_end_end_end_end_end_end_end_end_end_end_end\
    \ = \"AEIOUaeiouy\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmp0ub79jpd.cpp:30:17: note: \u2018std::string vowels_start_end_end_end_end_end_end_end_end_end_end_end_end\u2019\
    \ previously declared here\n   30 |     std::string vowels_start_end_end_end_end_end_end_end_end_end_end_end_end\
    \ = \"AEIOUaeiouy\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmp0ub79jpd.cpp:34:17: error: redeclaration of \u2018std::string vowels_start_end_end_end_end_end_end_end_end_end_end_end_end_end\u2019\
    \n   34 |     std::string vowels_start_end_end_end_end_end_end_end_end_end_end_end_end_end\
    \ = \"AEIOUaeiouy\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmp0ub79jpd.cpp:33:17: note: \u2018std::string vowels_start_end_end_end_end_end_end_end_end_end_end_end_end_end\u2019\
    \ previously declared here\n   33 |     std::string vowels_start_end_end_end_end_end_end_end_end_end_end_end_end_end\
    \ = \"AEIOUaeiouy\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmp0ub79jpd.cpp:35:17: error: redeclaration of \u2018std::string vowels_start_end_end_end_end_end_end_end_end_end_end_end_end_end\u2019\
    \n   35 |     std::string vowels_start_end_end_end_end_end_end_end_end_end_end_end_end_end\
    \ = \"AEIOUaeiouy\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmp0ub79jpd.cpp:33:17: note: \u2018std::string vowels_start_end_end_end_end_end_end_end_end_end_end_end_end_end\u2019\
    \ previously declared here\n   33 |     std::string vowels_start_end_end_end_end_end_end_end_end_end_end_end_end_end\
    \ = \"AEIOUaeiouy\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmp0ub79jpd.cpp:37:17: error: redeclaration of \u2018std::string vowels_start_end_end_end_end_end_end_end_end_end_end_end_end_end_end\u2019\
    \n   37 |     std::string vowels_start_end_end_end_end_end_end_end_end_end_end_end_end_end_end\
    \ = \"\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmp0ub79jpd.cpp:36:17: note: \u2018std::string vowels_start_end_end_end_end_end_end_end_end_end_end_end_end_end_end\u2019\
    \ previously declared here\n   36 |     std::string vowels_start_end_end_end_end_end_end_end_end_end_end_end_end_end_end\
    \ = \"AEIOUaeiouy\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmp0ub79jpd.cpp:38:1: error: expected primary-expression before \u2018}\u2019\
    \ token\n   38 | }\n      | ^\n/tmp/tmp0ub79jpd.cpp:38:1: warning: no return statement\
    \ in function returning non-void [-Wreturn-type]\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// get_closest_vowel(\"yogurt\") ==> \"u\"\
    \n// get_closest_vowel(\"FULL\") ==> \"U\"\n// get_closest_vowel(\"quick\") ==>\
    \ \"\"\n// get_closest_vowel(\"ab\") ==> \"\"\nstd::string get_closest_vowel(std::string\
    \ word) {\n    std::string vowels = \"AEIOUaeiou\";\n    std::string vowels_reverse\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_reverse = \"AEIOUaeiou\";\n\
    \    std::string vowels_reverse_back = \"AEIOUaeiou\";\n    std::string vowels_reverse_back_reverse\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_back_reverse_back = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse_back_reverse_back_reverse = \"AEIOUaeiou\";\n\
    \    std::string vowels_reverse_back_reverse_back_reverse_back = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse = \"\
    AEIOUaeiou\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse\
    \ = \"AEIO\n}\nint main() {\n    auto candidate = get_closest_vowel;\n    assert(candidate((\"\
    yogurt\")) == (\"u\"));\n    assert(candidate((\"full\")) == (\"u\"));\n    assert(candidate((\"\
    easy\")) == (\"\"));\n    assert(candidate((\"eAsy\")) == (\"\"));\n    assert(candidate((\"\
    ali\")) == (\"\"));\n    assert(candidate((\"bad\")) == (\"a\"));\n    assert(candidate((\"\
    most\")) == (\"o\"));\n    assert(candidate((\"ab\")) == (\"\"));\n    assert(candidate((\"\
    ba\")) == (\"\"));\n    assert(candidate((\"quick\")) == (\"\"));\n    assert(candidate((\"\
    anime\")) == (\"i\"));\n    assert(candidate((\"Asia\")) == (\"\"));\n    assert(candidate((\"\
    Above\")) == (\"o\"));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp1brrdeex.cpp:34:138: warning: missing terminating \" character\n\
    \   34 |     std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse\
    \ = \"AEIO\n      |                                                          \
    \                                                                            \
    \    ^\n/tmp/tmp1brrdeex.cpp:34:138: error: missing terminating \" character\n\
    \   34 |     std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse\
    \ = \"AEIO\n      |                                                          \
    \                                                                            \
    \    ^~~~~\n/tmp/tmp1brrdeex.cpp: In function \u2018std::string get_closest_vowel(std::string)\u2019\
    :\n/tmp/tmp1brrdeex.cpp:32:17: error: redeclaration of \u2018std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\u2019\
    \n   32 |     std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\
    \ = \"AEIOUaeiou\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmp1brrdeex.cpp:31:17: note: \u2018std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\u2019\
    \ previously declared here\n   31 |     std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\
    \ = \"AEIOUaeiou\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmp1brrdeex.cpp:33:17: error: redeclaration of \u2018std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\u2019\
    \n   33 |     std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\
    \ = \"AEIOUaeiou\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmp1brrdeex.cpp:31:17: note: \u2018std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\u2019\
    \ previously declared here\n   31 |     std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\
    \ = \"AEIOUaeiou\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmp1brrdeex.cpp:35:1: error: expected primary-expression before \u2018}\u2019\
    \ token\n   35 | }\n      | ^\n/tmp/tmp1brrdeex.cpp:35:1: error: expected \u2018\
    ,\u2019 or \u2018;\u2019 before \u2018}\u2019 token\n/tmp/tmp1brrdeex.cpp:35:1:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// get_closest_vowel(\"yogurt\") ==> \"u\"\
    \n// get_closest_vowel(\"FULL\") ==> \"U\"\n// get_closest_vowel(\"quick\") ==>\
    \ \"\"\n// get_closest_vowel(\"ab\") ==> \"\"\nstd::string get_closest_vowel(std::string\
    \ word) {\n    // Write your code here\n    std::string vowels = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse = \"AEIOUaeiou\";\n    std::string vowels_reverse_reverse\
    \ = \"\";\n    std::string vowels_reverse_back = \"\";\n    std::string vowels_reverse_back_reverse\
    \ = \"\";\n    std::string vowels_reverse_back_reverse_back = \"\";\n    std::string\
    \ vowels_reverse_back_reverse_back_reverse = \"\";\n    std::string vowels_reverse_back_reverse_back_reverse_back\
    \ = \"\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse\
    \ = \"\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back\
    \ = \"\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse\
    \ = \"\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\
    \ = \"\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse\
    \ = \"\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\
    \ = \"\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse\
    \ = \"\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\
    \ = \"\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\
    \ = \"\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\
    \ = \"\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\
    \ = \"\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse\
    \ = \"\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\
    \ = \"\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\
    \ = \"\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\
    \ = \"\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\
    \ = \"\";\n    std::string vowels_reverse_back_re\n}\nint main() {\n    auto candidate\
    \ = get_closest_vowel;\n    assert(candidate((\"yogurt\")) == (\"u\"));\n    assert(candidate((\"\
    full\")) == (\"u\"));\n    assert(candidate((\"easy\")) == (\"\"));\n    assert(candidate((\"\
    eAsy\")) == (\"\"));\n    assert(candidate((\"ali\")) == (\"\"));\n    assert(candidate((\"\
    bad\")) == (\"a\"));\n    assert(candidate((\"most\")) == (\"o\"));\n    assert(candidate((\"\
    ab\")) == (\"\"));\n    assert(candidate((\"ba\")) == (\"\"));\n    assert(candidate((\"\
    quick\")) == (\"\"));\n    assert(candidate((\"anime\")) == (\"i\"));\n    assert(candidate((\"\
    Asia\")) == (\"\"));\n    assert(candidate((\"Above\")) == (\"o\"));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpyapiedbo.cpp: In function \u2018std::string get_closest_vowel(std::string)\u2019\
    :\n/tmp/tmpyapiedbo.cpp:31:17: error: redeclaration of \u2018std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\u2019\
    \n   31 |     std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\
    \ = \"\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpyapiedbo.cpp:30:17: note: \u2018std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\u2019\
    \ previously declared here\n   30 |     std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\
    \ = \"\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpyapiedbo.cpp:33:17: error: redeclaration of \u2018std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\u2019\
    \n   33 |     std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\
    \ = \"\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpyapiedbo.cpp:32:17: note: \u2018std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\u2019\
    \ previously declared here\n   32 |     std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\
    \ = \"\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpyapiedbo.cpp:36:17: error: redeclaration of \u2018std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\u2019\
    \n   36 |     std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\
    \ = \"\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpyapiedbo.cpp:35:17: note: \u2018std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\u2019\
    \ previously declared here\n   35 |     std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\
    \ = \"\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpyapiedbo.cpp:37:17: error: redeclaration of \u2018std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\u2019\
    \n   37 |     std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\
    \ = \"\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpyapiedbo.cpp:35:17: note: \u2018std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\u2019\
    \ previously declared here\n   35 |     std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\
    \ = \"\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpyapiedbo.cpp:38:17: error: redeclaration of \u2018std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\u2019\
    \n   38 |     std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\
    \ = \"\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpyapiedbo.cpp:35:17: note: \u2018std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\u2019\
    \ previously declared here\n   35 |     std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\
    \ = \"\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpyapiedbo.cpp:40:1: error: expected initializer before \u2018}\u2019 token\n\
    \   40 | }\n      | ^\n/tmp/tmpyapiedbo.cpp:40:1: warning: no return statement\
    \ in function returning non-void [-Wreturn-type]\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// get_closest_vowel(\"yogurt\") ==> \"u\"\
    \n// get_closest_vowel(\"FULL\") ==> \"U\"\n// get_closest_vowel(\"quick\") ==>\
    \ \"\"\n// get_closest_vowel(\"ab\") ==> \"\"\nstd::string get_closest_vowel(std::string\
    \ word) {\n    int n = word.size();\n    std::string vowels = \"AEIOUaeiou\";\n\
    \    std::string vowels_reversed = vowels.substr(0, vowels.size() - 1);\n    std::string\
    \ vowels_reversed_upper = vowels_reversed.toupper();\n    std::string vowels_reversed_lower\
    \ = vowels_reversed.tolower();\n    std::string vowels_upper = vowels.toupper();\n\
    \    std::string vowels_lower = vowels.tolower();\n    std::string vowels_upper_reversed\
    \ = vowels_upper.substr(0, vowels_upper.size() - 1);\n    std::string vowels_lower_reversed\
    \ = vowels_lower.substr(0, vowels_lower.size() - 1);\n    std::string vowels_upper_reversed_upper\
    \ = vowels_upper_reversed.toupper();\n    std::string vowels_upper_reversed_lower\
    \ = vowels_upper_reversed.tolower();\n    std::string vowels_lower_reversed_upper\
    \ = vowels_lower_reversed.toupper();\n    std::string vowels_lower_reversed_lower\
    \ = vowels_lower_reversed.tolower();\n    std::string vowels_upper_reversed_vowels\
    \ = vowels_upper_reversed + vowels_upper_reversed_upper + vowels_upper_reversed_lower\
    \ + vowels_upper_reversed_vowels;\n    std::string vowels_lower_reversed_vowels\
    \ = vowels_lower_reversed + vowels_lower_reversed_upper + vowels_lower_reversed_lower\
    \ + vowels_lower_reversed_vowels;\n    std::string vowels_reversed_vowels = vowels_reversed\
    \ + vowels_reversed_upper + vowels_reversed_lower + vowels_reversed_vowels;\n\
    \    std::string vowels_lower_reversed_vowels = vowels_lower_reversed + vowels_lower_reversed_upper\
    \ + vowels_lower_reversed_lower + vowels_lower_reversed_vowels;\n    std::string\
    \ vowels_vowels = vowels_upper + vowels_lower + vowels_vowels;\n    std::string\
    \ vowels_vowels_reversed = vowels_vowels + vowels_reversed_vowels;\n    std::string\
    \ vowels_vowels_reversed_upper = vowels_vowels_reversed + vowels_reversed_upper;\n\
    \    std::string vowels_vowels_reversed_lower = vowels_vowels_reversed + vowels_reversed_lower;\n\
    \    std::string vowels_vowels_reversed_vowels = vowels_vowels_reversed + vowels_reversed_vowels;\n\
    \    std::string vowels_vowels_reversed_vowels_upper = vowels_vowels_reversed_vowels\
    \ + vowels_upper_reversed_vowels;\n    std::string vowels_vowels_reversed_vowels_lower\
    \ = vowels_vowels_reversed_vowels + vowel\n}\nint main() {\n    auto candidate\
    \ = get_closest_vowel;\n    assert(candidate((\"yogurt\")) == (\"u\"));\n    assert(candidate((\"\
    full\")) == (\"u\"));\n    assert(candidate((\"easy\")) == (\"\"));\n    assert(candidate((\"\
    eAsy\")) == (\"\"));\n    assert(candidate((\"ali\")) == (\"\"));\n    assert(candidate((\"\
    bad\")) == (\"a\"));\n    assert(candidate((\"most\")) == (\"o\"));\n    assert(candidate((\"\
    ab\")) == (\"\"));\n    assert(candidate((\"ba\")) == (\"\"));\n    assert(candidate((\"\
    quick\")) == (\"\"));\n    assert(candidate((\"anime\")) == (\"i\"));\n    assert(candidate((\"\
    Asia\")) == (\"\"));\n    assert(candidate((\"Above\")) == (\"o\"));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpbqblxt04.cpp: In function \u2018std::string get_closest_vowel(std::string)\u2019\
    :\n/tmp/tmpbqblxt04.cpp:17:57: error: \u2018std::string\u2019 {aka \u2018class\
    \ std::__cxx11::basic_string<char>\u2019} has no member named \u2018toupper\u2019\
    \n   17 |     std::string vowels_reversed_upper = vowels_reversed.toupper();\n\
    \      |                                                         ^~~~~~~\n/tmp/tmpbqblxt04.cpp:18:57:\
    \ error: \u2018std::string\u2019 {aka \u2018class std::__cxx11::basic_string<char>\u2019\
    } has no member named \u2018tolower\u2019\n   18 |     std::string vowels_reversed_lower\
    \ = vowels_reversed.tolower();\n      |                                      \
    \                   ^~~~~~~\n/tmp/tmpbqblxt04.cpp:19:39: error: \u2018std::string\u2019\
    \ {aka \u2018class std::__cxx11::basic_string<char>\u2019} has no member named\
    \ \u2018toupper\u2019\n   19 |     std::string vowels_upper = vowels.toupper();\n\
    \      |                                       ^~~~~~~\n/tmp/tmpbqblxt04.cpp:20:39:\
    \ error: \u2018std::string\u2019 {aka \u2018class std::__cxx11::basic_string<char>\u2019\
    } has no member named \u2018tolower\u2019\n   20 |     std::string vowels_lower\
    \ = vowels.tolower();\n      |                                       ^~~~~~~\n\
    /tmp/tmpbqblxt04.cpp:23:69: error: \u2018std::string\u2019 {aka \u2018class std::__cxx11::basic_string<char>\u2019\
    } has no member named \u2018toupper\u2019\n   23 |     std::string vowels_upper_reversed_upper\
    \ = vowels_upper_reversed.toupper();\n      |                                \
    \                                     ^~~~~~~\n/tmp/tmpbqblxt04.cpp:24:69: error:\
    \ \u2018std::string\u2019 {aka \u2018class std::__cxx11::basic_string<char>\u2019\
    } has no member named \u2018tolower\u2019\n   24 |     std::string vowels_upper_reversed_lower\
    \ = vowels_upper_reversed.tolower();\n      |                                \
    \                                     ^~~~~~~\n/tmp/tmpbqblxt04.cpp:25:69: error:\
    \ \u2018std::string\u2019 {aka \u2018class std::__cxx11::basic_string<char>\u2019\
    } has no member named \u2018toupper\u2019\n   25 |     std::string vowels_lower_reversed_upper\
    \ = vowels_lower_reversed.toupper();\n      |                                \
    \                                     ^~~~~~~\n/tmp/tmpbqblxt04.cpp:26:69: error:\
    \ \u2018std::string\u2019 {aka \u2018class std::__cxx11::basic_string<char>\u2019\
    } has no member named \u2018tolower\u2019\n   26 |     std::string vowels_lower_reversed_lower\
    \ = vowels_lower_reversed.tolower();\n      |                                \
    \                                     ^~~~~~~\n/tmp/tmpbqblxt04.cpp:30:17: error:\
    \ redeclaration of \u2018std::string vowels_lower_reversed_vowels\u2019\n   30\
    \ |     std::string vowels_lower_reversed_vowels = vowels_lower_reversed + vowels_lower_reversed_upper\
    \ + vowels_lower_reversed_lower + vowels_lower_reversed_vowels;\n      |     \
    \            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpbqblxt04.cpp:28:17: note: \u2018\
    std::string vowels_lower_reversed_vowels\u2019 previously declared here\n   28\
    \ |     std::string vowels_lower_reversed_vowels = vowels_lower_reversed + vowels_lower_reversed_upper\
    \ + vowels_lower_reversed_lower + vowels_lower_reversed_vowels;\n      |     \
    \            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmpbqblxt04.cpp:37:87: error:\
    \ \u2018vowel\u2019 was not declared in this scope; did you mean \u2018vowels\u2019\
    ?\n   37 |     std::string vowels_vowels_reversed_vowels_lower = vowels_vowels_reversed_vowels\
    \ + vowel\n      |                                                           \
    \                            ^~~~~\n      |                                  \
    \                                                     vowels\n/tmp/tmpbqblxt04.cpp:38:1:\
    \ error: expected \u2018,\u2019 or \u2018;\u2019 before \u2018}\u2019 token\n\
    \   38 | }\n      | ^\n/tmp/tmpbqblxt04.cpp:38:1: warning: no return statement\
    \ in function returning non-void [-Wreturn-type]\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// get_closest_vowel(\"yogurt\") ==> \"u\"\
    \n// get_closest_vowel(\"FULL\") ==> \"U\"\n// get_closest_vowel(\"quick\") ==>\
    \ \"\"\n// get_closest_vowel(\"ab\") ==> \"\"\nstd::string get_closest_vowel(std::string\
    \ word) {\n    std::string vowels = \"AEIOUaeiou\";\n    std::string vowels_reverse\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse2 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse3 = \"AEIOUaeiou\";\n    std::string vowels_reverse4 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse5 = \"AEIOUaeiou\";\n    std::string vowels_reverse6\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse7 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse8 = \"AEIOUaeiou\";\n    std::string vowels_reverse9 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse10 = \"AEIOUaeiou\";\n    std::string vowels_reverse11\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse12 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse13 = \"AEIOUaeiou\";\n    std::string vowels_reverse14 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse15 = \"AEIOUaeiou\";\n    std::string vowels_reverse16\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse17 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse18 = \"AEIOUaeiou\";\n    std::string vowels_reverse19 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse20 = \"AEIOUaeiou\";\n    std::string vowels_reverse21\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse22 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse23 = \"AEIOUaeiou\";\n    std::string vowels_reverse24 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse25 = \"AEIOUaeiou\";\n    std::string vowels_reverse26\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse27 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse28 = \"AEIOUaeiou\";\n    std::string vowels_reverse29 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse30 = \"AEIOUaeiou\";\n    std::string vowels_reverse31\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse32 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse33 = \"AEIOUaeiou\";\n    std::string vowels_reverse34 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse35 = \"AEIOUaeiou\";\n    std::string vowels_reverse36\
    \ = \"AEIOU\n}\nint main() {\n    auto candidate = get_closest_vowel;\n    assert(candidate((\"\
    yogurt\")) == (\"u\"));\n    assert(candidate((\"full\")) == (\"u\"));\n    assert(candidate((\"\
    easy\")) == (\"\"));\n    assert(candidate((\"eAsy\")) == (\"\"));\n    assert(candidate((\"\
    ali\")) == (\"\"));\n    assert(candidate((\"bad\")) == (\"a\"));\n    assert(candidate((\"\
    most\")) == (\"o\"));\n    assert(candidate((\"ab\")) == (\"\"));\n    assert(candidate((\"\
    ba\")) == (\"\"));\n    assert(candidate((\"quick\")) == (\"\"));\n    assert(candidate((\"\
    anime\")) == (\"i\"));\n    assert(candidate((\"Asia\")) == (\"\"));\n    assert(candidate((\"\
    Above\")) == (\"o\"));\n}\n"
  stdout: ''
  stderr: "/tmp/tmplk9ypt6o.cpp:50:36: warning: missing terminating \" character\n\
    \   50 |     std::string vowels_reverse36 = \"AEIOU\n      |                 \
    \                   ^\n/tmp/tmplk9ypt6o.cpp:50:36: error: missing terminating\
    \ \" character\n   50 |     std::string vowels_reverse36 = \"AEIOU\n      |  \
    \                                  ^~~~~~\n/tmp/tmplk9ypt6o.cpp: In function \u2018\
    std::string get_closest_vowel(std::string)\u2019:\n/tmp/tmplk9ypt6o.cpp:51:1:\
    \ error: expected primary-expression before \u2018}\u2019 token\n   51 | }\n \
    \     | ^\n/tmp/tmplk9ypt6o.cpp:51:1: error: expected \u2018,\u2019 or \u2018\
    ;\u2019 before \u2018}\u2019 token\n/tmp/tmplk9ypt6o.cpp:51:1: warning: no return\
    \ statement in function returning non-void [-Wreturn-type]\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// get_closest_vowel(\"yogurt\") ==> \"u\"\
    \n// get_closest_vowel(\"FULL\") ==> \"U\"\n// get_closest_vowel(\"quick\") ==>\
    \ \"\"\n// get_closest_vowel(\"ab\") ==> \"\"\nstd::string get_closest_vowel(std::string\
    \ word) {\n    std::string vowels = \"AEIOUaeiou\";\n    std::string vowels_reversed\
    \ = vowels.substr(0, vowels.size() - 1);\n    std::string vowels_reversed_upper\
    \ = vowels_reversed.toUpper();\n    std::string vowels_reversed_lower = vowels_reversed.toLower();\n\
    \    std::string vowels_reversed_upper_lower = vowels_reversed.toUpper() + vowels_reversed.toLower();\n\
    \    std::string vowels_reversed_upper_lower_lower = vowels_reversed.toUpper()\
    \ + vowels_reversed.toLower() + vowels_reversed.toLower();\n    std::string vowels_reversed_upper_lower_lower_lower\
    \ = vowels_reversed.toUpper() + vowels_reversed.toLower() + vowels_reversed.toLower()\
    \ + vowels_reversed.toLower();\n    std::string vowels_reversed_upper_lower_lower_lower_lower\
    \ = vowels_reversed.toUpper() + vowels_reversed.toLower() + vowels_reversed.toLower()\
    \ + vowels_reversed.toLower() + vowels_reversed.toLower() + vowels_reversed.toLower();\n\
    \    std::string vowels_reversed_upper_lower_lower_lower_lower_lower = vowels_reversed.toUpper()\
    \ + vowels_reversed.toLower() + vowels_reversed.toLower() + vowels_reversed.toLower()\
    \ + vowels_reversed.toLower() + vowels_reversed.toLower() + vowels_reversed.toLower()\
    \ + vowels_reversed.toLower();\n    std::string vowels_reversed_upper_lower_lower_lower_lower_lower_lower\
    \ = vowels_reversed.toUpper() + vowels_reversed.toLower() + vowels_reversed.toLower()\
    \ + vowels_reversed.toLower() + vowels_reversed.toLower() + vowels_reversed.toLower()\
    \ + vowels_reversed.toLower() + vowels_reversed.toLower() + vowels_reversed.toLower()\
    \ + vowels_reversed.toLower();\n    std::string vowels_reversed_upper_lower_lower_lower_lower_lower_lower_lower\
    \ = vowels_reversed.toUpper() + vowels_reversed.toLower() + vowels_reversed.toLower()\
    \ + vowels_reversed.toLower() + vowels_reversed.toLower() + vowels_reversed.toLower()\
    \ + vowels_reversed.toLower() + vowels_reversed.toLower() + vowels_reversed.toLower()\
    \ + vowels_reversed.toLower() + vowels_reversed.toLower() + vowels_reversed.toLower();\n\
    \    std::string vowels_reversed_upper_lower_lower_lower_lower_lower_lower_lower_lower\
    \ = vowel\n}\nint main() {\n    auto candidate = get_closest_vowel;\n    assert(candidate((\"\
    yogurt\")) == (\"u\"));\n    assert(candidate((\"full\")) == (\"u\"));\n    assert(candidate((\"\
    easy\")) == (\"\"));\n    assert(candidate((\"eAsy\")) == (\"\"));\n    assert(candidate((\"\
    ali\")) == (\"\"));\n    assert(candidate((\"bad\")) == (\"a\"));\n    assert(candidate((\"\
    most\")) == (\"o\"));\n    assert(candidate((\"ab\")) == (\"\"));\n    assert(candidate((\"\
    ba\")) == (\"\"));\n    assert(candidate((\"quick\")) == (\"\"));\n    assert(candidate((\"\
    anime\")) == (\"i\"));\n    assert(candidate((\"Asia\")) == (\"\"));\n    assert(candidate((\"\
    Above\")) == (\"o\"));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpopng75jv.cpp: In function \u2018std::string get_closest_vowel(std::string)\u2019\
    :\n/tmp/tmpopng75jv.cpp:16:57: error: \u2018std::string\u2019 {aka \u2018class\
    \ std::__cxx11::basic_string<char>\u2019} has no member named \u2018toUpper\u2019\
    \n   16 |     std::string vowels_reversed_upper = vowels_reversed.toUpper();\n\
    \      |                                                         ^~~~~~~\n/tmp/tmpopng75jv.cpp:17:57:\
    \ error: \u2018std::string\u2019 {aka \u2018class std::__cxx11::basic_string<char>\u2019\
    } has no member named \u2018toLower\u2019\n   17 |     std::string vowels_reversed_lower\
    \ = vowels_reversed.toLower();\n      |                                      \
    \                   ^~~~~~~\n/tmp/tmpopng75jv.cpp:18:63: error: \u2018std::string\u2019\
    \ {aka \u2018class std::__cxx11::basic_string<char>\u2019} has no member named\
    \ \u2018toUpper\u2019\n   18 |     std::string vowels_reversed_upper_lower = vowels_reversed.toUpper()\
    \ + vowels_reversed.toLower();\n      |                                      \
    \                         ^~~~~~~\n/tmp/tmpopng75jv.cpp:18:91: error: \u2018std::string\u2019\
    \ {aka \u2018class std::__cxx11::basic_string<char>\u2019} has no member named\
    \ \u2018toLower\u2019\n   18 |     std::string vowels_reversed_upper_lower = vowels_reversed.toUpper()\
    \ + vowels_reversed.toLower();\n      |                                      \
    \                                                     ^~~~~~~\n/tmp/tmpopng75jv.cpp:19:69:\
    \ error: \u2018std::string\u2019 {aka \u2018class std::__cxx11::basic_string<char>\u2019\
    } has no member named \u2018toUpper\u2019\n   19 |     std::string vowels_reversed_upper_lower_lower\
    \ = vowels_reversed.toUpper() + vowels_reversed.toLower() + vowels_reversed.toLower();\n\
    \      |                                                                     ^~~~~~~\n\
    /tmp/tmpopng75jv.cpp:19:97: error: \u2018std::string\u2019 {aka \u2018class std::__cxx11::basic_string<char>\u2019\
    } has no member named \u2018toLower\u2019\n   19 |     std::string vowels_reversed_upper_lower_lower\
    \ = vowels_reversed.toUpper() + vowels_reversed.toLower() + vowels_reversed.toLower();\n\
    \      |                                                                     \
    \                            ^~~~~~~\n/tmp/tmpopng75jv.cpp:19:125: error: \u2018\
    std::string\u2019 {aka \u2018class std::__cxx11::basic_string<char>\u2019} has\
    \ no member named \u2018toLower\u2019\n   19 |     std::string vowels_reversed_upper_lower_lower\
    \ = vowels_reversed.toUpper() + vowels_reversed.toLower() + vowels_reversed.toLower();\n\
    \      |                                                                     \
    \                                                        ^~~~~~~\n/tmp/tmpopng75jv.cpp:20:75:\
    \ error: \u2018std::string\u2019 {aka \u2018class std::__cxx11::basic_string<char>\u2019\
    } has no member named \u2018toUpper\u2019\n   20 |     std::string vowels_reversed_upper_lower_lower_lower\
    \ = vowels_reversed.toUpper() + vowels_reversed.toLower() + vowels_reversed.toLower()\
    \ + vowels_reversed.toLower();\n      |                                      \
    \                                     ^~~~~~~\n/tmp/tmpopng75jv.cpp:20:103: error:\
    \ \u2018std::string\u2019 {aka \u2018class std::__cxx11::basic_string<char>\u2019\
    } has no member named \u2018toLower\u2019\n   20 |     std::string vowels_reversed_upper_lower_lower_lower\
    \ = vowels_reversed.toUpper() + vowels_reversed.toLower() + vowels_reversed.toLower()\
    \ + vowels_reversed.toLower();\n      |                                      \
    \                                                                 ^~~~~~~\n/tmp/tmpopng75jv.cpp:20:131:\
    \ error: \u2018std::string\u2019 {aka \u2018class std::__cxx11::basic_string<char>\u2019\
    } has no member named \u2018toLower\u2019\n   20 |     std::string vowels_reversed_upper_lower_lower_lower\
    \ = vowels_reversed.toUpper() + vowels_reversed.toLower() + vowels_reversed.toLower()\
    \ + vowels_reversed.toLower();\n      |                                      \
    \                                                                            \
    \                 ^~~~~~~\n/tmp/tmpopng75jv.cpp:20:159: error: \u2018std::string\u2019\
    \ {aka \u2018class std::__cxx11::basic_string<char>\u2019} has no member named\
    \ \u2018toLower\u2019\n   20 |     std::string vowels_reversed_upper_lower_lower_lower\
    \ = vowels_reversed.toUpper() + vowels_reversed.toLower() + vowels_reversed.toLower()\
    \ + vowels_reversed.toLower();\n      |                                      \
    \                                                                            \
    \                                             ^~~~~~~\n/tmp/tmpopng75jv.cpp:21:81:\
    \ error: \u2018std::string\u2019 {aka \u2018class std::__cxx11::basic_string<char>\u2019\
    } has no member named \u2018toUpper\u2019\n   21 |     std::string vowels_reversed_upper_lower_lower_lower_lower\
    \ = vowels_reversed.toUpper() + vowels_reversed.toLower() + vowels_reversed.toLower()\
    \ + vowels_reversed.toLower() + vowels_reversed.toLower() + vowels_reversed.toLower();\n\
    \      |                                                                     \
    \            ^~~~~~~\n/tmp/tmpopng75jv.cpp:21:109: error: \u2018std::string\u2019\
    \ {aka \u2018class std::__cxx11::basic_string<char>\u2019} has no member named\
    \ \u2018toLower\u2019\n   21 |     std::string vowels_reversed_upper_lower_lower_lower_lower\
    \ = vowels_reversed.toUpper() + vowels_reversed.toLower() + vowels_reversed.toLower()\
    \ + vowels_reversed.toLower() + vowels_reversed.toLower() + vowels_reversed.toLower();\n\
    \      |                                                                     \
    \                                        ^~~~~~~\n/tmp/tmpopng75jv.cpp:21:137:\
    \ error: \u2018std::string\u2019 {aka \u2018class std::__cxx11::basic_string<char>\u2019\
    } has no member named \u2018toLower\u2019\n   21 |     std::string vowels_reversed_upper_lower_lower_lower_lower\
    \ = vowels_reversed.toUpper() + vowels_reversed.toLower() + vowels_reversed.toLower()\
    \ + vowels_reversed.toLower() + vowels_reversed.toLower() + vowels_reversed.toLower();\n\
    \      |                                                                     \
    \                                                                    ^~~~~~~\n\
    /tmp/tmpopng75jv.cpp:21:165: error: \u2018std::string\u2019 {aka \u2018class std::__cxx11::basic_string<char>\u2019\
    } has no member named \u2018toLower\u2019\n   21 |     std::string vowels_reversed_upper_lower_lower_lower_lower\
    \ = vowels_reversed.toUpper() + vowels_reversed.toLower() + vowels_reversed.toLower()\
    \ + vowels_reversed.toLower() + vowels_reversed.toLower() + vowels_reversed.toLower();\n\
    \      |                                                                     \
    \                                                                            \
    \                    ^~~~~~~\n/tmp/tmpopng75jv.cpp:21:193: error: \u2018std::string\u2019\
    \ {aka \u2018class std::__cxx11::basic_string<char>\u2019} has no member named\
    \ \u2018toLower\u2019\n   21 |     std::string vowels_reversed_upper_lower_lower_lower_lower\
    \ = vowels_reversed.toUpper() + vowels_reversed.toLower() + vowels_reversed.toLower()\
    \ + vowels_reversed.toLower() + vowels_reversed.toLower() + vowels_reversed.toLower();\n\
    \      |                                                                     \
    \                                                                            \
    \                                                ^~~~~~~\n/tmp/tmpopng75jv.cpp:21:221:\
    \ error: \u2018std::string\u2019 {aka \u2018class std::__cxx11::basic_string<char>\u2019\
    } has no member named \u2018toLower\u2019\n   21 |     std::string vowels_reversed_upper_lower_lower_lower_lower\
    \ = vowels_reversed.toUpper() + vowels_reversed.toLower() + vowels_reversed.toLower()\
    \ + vowels_reversed.toLower() + vowels_reversed.toLower() + vowels_reversed.toLower();\n\
    \      |                                                                     \
    \                                                                            \
    \                                                                            ^~~~~~~\n\
    /tmp/tmpopng75jv.cpp:22:87: error: \u2018std::string\u2019 {aka \u2018class std::__cxx11::basic_string<char>\u2019\
    } has no member named \u2018toUpper\u2019\n   22 |     std::string vowels_reversed_upper_lower_lower_lower_lower_lower\
    \ = vowels_reversed.toUpper() + vowels_reversed.toLower() + vowels_reversed.toLower()\
    \ + vowels_reversed.toLower() + vowels_reversed.toLower() + vowels_reversed.toLower()\
    \ + vowels_reversed.toLower() + vowels_reversed.toLower();\n      |          \
    \                                                                            \
    \ ^~~~~~~\n/tmp/tmpopng75jv.cpp:22:115: error: \u2018std::string\u2019 {aka \u2018\
    class std::__cxx11::basic_string<char>\u2019} has no member named \u2018toLower\u2019\
    \n   22 |     std::string vowels_reversed_upper_lower_lower_lower_lower_lower\
    \ = vowels_reversed.toUpper() + vowels_reversed.toLower() + vowels_reversed.toLower()\
    \ + vowels_reversed.toLower() + vowels_reversed.toLower() + vowels_reversed.toLower()\
    \ + vowels_reversed.toLower() + vowels_reversed.toLower();\n      |          \
    \                                                                            \
    \                             ^~~~~~~\n/tmp/tmpopng75jv.cpp:22:143: error: \u2018\
    std::string\u2019 {aka \u2018class std::__cxx11::basic_string<char>\u2019} has\
    \ no member named \u2018toLower\u2019\n   22 |     std::string vowels_reversed_upper_lower_lower_lower_lower_lower\
    \ = vowels_reversed.toUpper() + vowels_reversed.toLower() + vowels_reversed.toLower()\
    \ + vowels_reversed.toLower() + vowels_reversed.toLower() + vowels_reversed.toLower()\
    \ + vowels_reversed.toLower() + vowels_reversed.toLower();\n      |          \
    \                                                                            \
    \                                                         ^~~~~~~\n/tmp/tmpopng75jv.cpp:22:171:\
    \ error: \u2018std::string\u2019 {aka \u2018class std::__cxx11::basic_string<char>\u2019\
    } has no member named \u2018toLower\u2019\n   22 |     std::string vowels_reversed_upper_lower_lower_lower_lower_lower\
    \ = vowels_reversed.toUpper() + vowels_reversed.toLower() + vowels_reversed.toLower()\
    \ + vowels_reversed.toLower() + vowels_reversed.toLower() + vowels_reversed.toLower()\
    \ + vowels_reversed.toLower() + vowels_reversed.toLower();\n      |          \
    \                                                                            \
    \                                                                            \
    \         ^~~~~~~\n/tmp/tmpopng75jv.cpp:22:199: error: \u2018std::string\u2019\
    \ {aka \u2018class std::__cxx11::basic_string<char>\u2019} has no member named\
    \ \u2018toLower\u2019\n   22 |     std::string vowels_reversed_upper_lower_lower_lower_lower_lower\
    \ = vowels_reversed.toUpper() + vowels_reversed.toLower() + vowels_reversed.toLower()\
    \ + vowels_reversed.toLower() + vowels_reversed.toLower() + vowels_reversed.toLower()\
    \ + vowels_reversed.toLower() + vowels_reversed.toLower();\n      |          \
    \                                                                            \
    \                                                                            \
    \                                     ^~~~~~~\n/tmp/tmpopng75jv.cpp:22:227: error:\
    \ \u2018std::string\u2019 {aka \u2018class std::__cxx11::basic_string<char>\u2019\
    } has no member named \u2018toLower\u2019\n   22 |     std::string vowels_reversed_upper_lower_lower_lower_lower_lower\
    \ = vowels_reversed.toUpper() + vowels_reversed.toLower() + vowels_reversed.toLower()\
    \ + vowels_reversed.toLower() + vowels_reversed.toLower() + vowels_reversed.toLower()\
    \ + vowels_reversed.toLower() + vowels_reversed.toLower();\n      |          \
    \                                                                            \
    \                                                                            \
    \                                                                 ^~~~~~~\n/tmp/tmpopng75jv.cpp:22:255:\
    \ error: \u2018std::string\u2019 {aka \u2018class std::__cxx11::basic_string<char>\u2019\
    } has no member named \u2018toLower\u2019\n   22 |     std::string vowels_reversed_upper_lower_lower_lower_lower_lower\
    \ = vowels_reversed.toUpper() + vowels_reversed.toLower() + vowels_reversed.toLower()\
    \ + vowels_reversed.toLower() + vowels_reversed.toLower() + vowels_reversed.toLower()\
    \ + vowels_reversed.toLower() + vowels_reversed.toLower();\n      |          \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                 ^~~~~~~\n/tmp/tmpopng75jv.cpp:22:283: error: \u2018std::string\u2019\
    \ {aka \u2018class std::__cxx11::basic_string<char>\u2019} has no member named\
    \ \u2018toLower\u2019\n   22 |     std::string vowels_reversed_upper_lower_lower_lower_lower_lower\
    \ = vowels_reversed.toUpper() + vowels_reversed.toLower() + vowels_reversed.toLower()\
    \ + vowels_reversed.toLower() + vowels_reversed.toLower() + vowels_reversed.toLower()\
    \ + vowels_reversed.toLower() + vowels_reversed.toLower();\n      |          \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                             ^~~~~~~\n/tmp/tmpopng75jv.cpp:23:93:\
    \ error: \u2018std::string\u2019 {aka \u2018class std::__cxx11::basic_string<char>\u2019\
    } has no member named \u2018toUpper\u2019\n   23 |     std::string vowels_reversed_upper_lower_lower_lower_lower_lower_lower\
    \ = vowels_reversed.toUpper() + vowels_reversed.toLower() + vowels_reversed.toLower()\
    \ + vowels_reversed.toLower() + vowels_reversed.toLower() + vowels_reversed.toLower()\
    \ + vowels_reversed.toLower() + vowels_reversed.toLower() + vowels_reversed.toLower()\
    \ + vowels_reversed.toLower();\n      |                                      \
    \                                                       ^~~~~~~\n/tmp/tmpopng75jv.cpp:23:121:\
    \ error: \u2018std::string\u2019 {aka \u2018class std::__cxx11::basic_string<char>\u2019\
    } has no member named \u2018toLower\u2019\n   23 |     std::string vowels_reversed_upper_lower_lower_lower_lower_lower_lower\
    \ = vowels_reversed.toUpper() + vowels_reversed.toLower() + vowels_reversed.toLower()\
    \ + vowels_reversed.toLower() + vowels_reversed.toLower() + vowels_reversed.toLower()\
    \ + vowels_reversed.toLower() + vowels_reversed.toLower() + vowels_reversed.toLower()\
    \ + vowels_reversed.toLower();\n      |                                      \
    \                                                                            \
    \       ^~~~~~~\n/tmp/tmpopng75jv.cpp:23:149: error: \u2018std::string\u2019 {aka\
    \ \u2018class std::__cxx11::basic_string<char>\u2019} has no member named \u2018\
    toLower\u2019\n   23 |     std::string vowels_reversed_upper_lower_lower_lower_lower_lower_lower\
    \ = vowels_reversed.toUpper() + vowels_reversed.toLower() + vowels_reversed.toLower()\
    \ + vowels_reversed.toLower() + vowels_reversed.toLower() + vowels_reversed.toLower()\
    \ + vowels_reversed.toLower() + vowels_reversed.toLower() + vowels_reversed.toLower()\
    \ + vowels_reversed.toLower();\n      |                                      \
    \                                                                            \
    \                                   ^~~~~~~\n/tmp/tmpopng75jv.cpp:23:177: error:\
    \ \u2018std::string\u2019 {aka \u2018class std::__cxx11::basic_string<char>\u2019\
    } has no member named \u2018toLower\u2019\n   23 |     std::string vowels_reversed_upper_lower_lower_lower_lower_lower_lower\
    \ = vowels_reversed.toUpper() + vowels_reversed.toLower() + vowels_reversed.toLower()\
    \ + vowels_reversed.toLower() + vowels_reversed.toLower() + vowels_reversed.toLower()\
    \ + vowels_reversed.toLower() + vowels_reversed.toLower() + vowels_reversed.toLower()\
    \ + vowels_reversed.toLower();\n      |                                      \
    \                                                                            \
    \                                                               ^~~~~~~\n/tmp/tmpopng75jv.cpp:23:205:\
    \ error: \u2018std::string\u2019 {aka \u2018class std::__cxx11::basic_string<char>\u2019\
    } has no member named \u2018toLower\u2019\n   23 |     std::string vowels_reversed_upper_lower_lower_lower_lower_lower_lower\
    \ = vowels_reversed.toUpper() + vowels_reversed.toLower() + vowels_reversed.toLower()\
    \ + vowels_reversed.toLower() + vowels_reversed.toLower() + vowels_reversed.toLower()\
    \ + vowels_reversed.toLower() + vowels_reversed.toLower() + vowels_reversed.toLower()\
    \ + vowels_reversed.toLower();\n      |                                      \
    \                                                                            \
    \                                                                            \
    \               ^~~~~~~\n/tmp/tmpopng75jv.cpp:23:233: error: \u2018std::string\u2019\
    \ {aka \u2018class std::__cxx11::basic_string<char>\u2019} has no member named\
    \ \u2018toLower\u2019\n   23 |     std::string vowels_reversed_upper_lower_lower_lower_lower_lower_lower\
    \ = vowels_reversed.toUpper() + vowels_reversed.toLower() + vowels_reversed.toLower()\
    \ + vowels_reversed.toLower() + vowels_reversed.toLower() + vowels_reversed.toLower()\
    \ + vowels_reversed.toLower() + vowels_reversed.toLower() + vowels_reversed.toLower()\
    \ + vowels_reversed.toLower();\n      |                                      \
    \                                                                            \
    \                                                                            \
    \                                           ^~~~~~~\n/tmp/tmpopng75jv.cpp:23:261:\
    \ error: \u2018std::string\u2019 {aka \u2018class std::__cxx11::basic_string<char>\u2019\
    } has no member named \u2018toLower\u2019\n   23 |     std::string vowels_reversed_upper_lower_lower_lower_lower_lower_lower\
    \ = vowels_reversed.toUpper() + vowels_reversed.toLower() + vowels_reversed.toLower()\
    \ + vowels_reversed.toLower() + vowels_reversed.toLower() + vowels_reversed.toLower()\
    \ + vowels_reversed.toLower() + vowels_reversed.toLower() + vowels_reversed.toLower()\
    \ + vowels_reversed.toLower();\n      |                                      \
    \                                                                            \
    \                                                                            \
    \                                                                       ^~~~~~~\n\
    /tmp/tmpopng75jv.cpp:23:289: error: \u2018std::string\u2019 {aka \u2018class std::__cxx11::basic_string<char>\u2019\
    } has no member named \u2018toLower\u2019\n   23 |     std::string vowels_reversed_upper_lower_lower_lower_lower_lower_lower\
    \ = vowels_reversed.toUpper() + vowels_reversed.toLower() + vowels_reversed.toLower()\
    \ + vowels_reversed.toLower() + vowels_reversed.toLower() + vowels_reversed.toLower()\
    \ + vowels_reversed.toLower() + vowels_reversed.toLower() + vowels_reversed.toLower()\
    \ + vowels_reversed.toLower();\n      |                                      \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                       ^~~~~~~\n/tmp/tmpopng75jv.cpp:23:317: error: \u2018std::string\u2019\
    \ {aka \u2018class std::__cxx11::basic_string<char>\u2019} has no member named\
    \ \u2018toLower\u2019\n   23 |     std::string vowels_reversed_upper_lower_lower_lower_lower_lower_lower\
    \ = vowels_reversed.toUpper() + vowels_reversed.toLower() + vowels_reversed.toLower()\
    \ + vowels_reversed.toLower() + vowels_reversed.toLower() + vowels_reversed.toLower()\
    \ + vowels_reversed.toLower() + vowels_reversed.toLower() + vowels_reversed.toLower()\
    \ + vowels_reversed.toLower();\n      |                                      \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                   ^~~~~~~\n/tmp/tmpopng75jv.cpp:23:345:\
    \ error: \u2018std::string\u2019 {aka \u2018class std::__cxx11::basic_string<char>\u2019\
    } has no member named \u2018toLower\u2019\n   23 |     std::string vowels_reversed_upper_lower_lower_lower_lower_lower_lower\
    \ = vowels_reversed.toUpper() + vowels_reversed.toLower() + vowels_reversed.toLower()\
    \ + vowels_reversed.toLower() + vowels_reversed.toLower() + vowels_reversed.toLower()\
    \ + vowels_reversed.toLower() + vowels_reversed.toLower() + vowels_reversed.toLower()\
    \ + vowels_reversed.toLower();\n      |                                      \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \   ^~~~~~~\n/tmp/tmpopng75jv.cpp:24:99: error: \u2018std::string\u2019 {aka \u2018\
    class std::__cxx11::basic_string<char>\u2019} has no member named \u2018toUpper\u2019\
    \n   24 |     std::string vowels_reversed_upper_lower_lower_lower_lower_lower_lower_lower\
    \ = vowels_reversed.toUpper() + vowels_reversed.toLower() + vowels_reversed.toLower()\
    \ + vowels_reversed.toLower() + vowels_reversed.toLower() + vowels_reversed.toLower()\
    \ + vowels_reversed.toLower() + vowels_reversed.toLower() + vowels_reversed.toLower()\
    \ + vowels_reversed.toLower() + vowels_reversed.toLower() + vowels_reversed.toLower();\n\
    \      |                                                                     \
    \                              ^~~~~~~\n/tmp/tmpopng75jv.cpp:24:127: error: \u2018\
    std::string\u2019 {aka \u2018class std::__cxx11::basic_string<char>\u2019} has\
    \ no member named \u2018toLower\u2019\n   24 |     std::string vowels_reversed_upper_lower_lower_lower_lower_lower_lower_lower\
    \ = vowels_reversed.toUpper() + vowels_reversed.toLower() + vowels_reversed.toLower()\
    \ + vowels_reversed.toLower() + vowels_reversed.toLower() + vowels_reversed.toLower()\
    \ + vowels_reversed.toLower() + vowels_reversed.toLower() + vowels_reversed.toLower()\
    \ + vowels_reversed.toLower() + vowels_reversed.toLower() + vowels_reversed.toLower();\n\
    \      |                                                                     \
    \                                                          ^~~~~~~\n/tmp/tmpopng75jv.cpp:24:155:\
    \ error: \u2018std::string\u2019 {aka \u2018class std::__cxx11::basic_string<char>\u2019\
    } has no member named \u2018toLower\u2019\n   24 |     std::string vowels_reversed_upper_lower_lower_lower_lower_lower_lower_lower\
    \ = vowels_reversed.toUpper() + vowels_reversed.toLower() + vowels_reversed.toLower()\
    \ + vowels_reversed.toLower() + vowels_reversed.toLower() + vowels_reversed.toLower()\
    \ + vowels_reversed.toLower() + vowels_reversed.toLower() + vowels_reversed.toLower()\
    \ + vowels_reversed.toLower() + vowels_reversed.toLower() + vowels_reversed.toLower();\n\
    \      |                                                                     \
    \                                                                            \
    \          ^~~~~~~\n/tmp/tmpopng75jv.cpp:24:183: error: \u2018std::string\u2019\
    \ {aka \u2018class std::__cxx11::basic_string<char>\u2019} has no member named\
    \ \u2018toLower\u2019\n   24 |     std::string vowels_reversed_upper_lower_lower_lower_lower_lower_lower_lower\
    \ = vowels_reversed.toUpper() + vowels_reversed.toLower() + vowels_reversed.toLower()\
    \ + vowels_reversed.toLower() + vowels_reversed.toLower() + vowels_reversed.toLower()\
    \ + vowels_reversed.toLower() + vowels_reversed.toLower() + vowels_reversed.toLower()\
    \ + vowels_reversed.toLower() + vowels_reversed.toLower() + vowels_reversed.toLower();\n\
    \      |                                                                     \
    \                                                                            \
    \                                      ^~~~~~~\n/tmp/tmpopng75jv.cpp:24:211: error:\
    \ \u2018std::string\u2019 {aka \u2018class std::__cxx11::basic_string<char>\u2019\
    } has no member named \u2018toLower\u2019\n   24 |     std::string vowels_reversed_upper_lower_lower_lower_lower_lower_lower_lower\
    \ = vowels_reversed.toUpper() + vowels_reversed.toLower() + vowels_reversed.toLower()\
    \ + vowels_reversed.toLower() + vowels_reversed.toLower() + vowels_reversed.toLower()\
    \ + vowels_reversed.toLower() + vowels_reversed.toLower() + vowels_reversed.toLower()\
    \ + vowels_reversed.toLower() + vowels_reversed.toLower() + vowels_reversed.toLower();\n\
    \      |                                                                     \
    \                                                                            \
    \                                                                  ^~~~~~~\n/tmp/tmpopng75jv.cpp:24:239:\
    \ error: \u2018std::string\u2019 {aka \u2018class std::__cxx11::basic_string<char>\u2019\
    } has no member named \u2018toLower\u2019\n   24 |     std::string vowels_reversed_upper_lower_lower_lower_lower_lower_lower_lower\
    \ = vowels_reversed.toUpper() + vowels_reversed.toLower() + vowels_reversed.toLower()\
    \ + vowels_reversed.toLower() + vowels_reversed.toLower() + vowels_reversed.toLower()\
    \ + vowels_reversed.toLower() + vowels_reversed.toLower() + vowels_reversed.toLower()\
    \ + vowels_reversed.toLower() + vowels_reversed.toLower() + vowels_reversed.toLower();\n\
    \      |                                                                     \
    \                                                                            \
    \                                                                            \
    \                  ^~~~~~~\n/tmp/tmpopng75jv.cpp:24:267: error: \u2018std::string\u2019\
    \ {aka \u2018class std::__cxx11::basic_string<char>\u2019} has no member named\
    \ \u2018toLower\u2019\n   24 |     std::string vowels_reversed_upper_lower_lower_lower_lower_lower_lower_lower\
    \ = vowels_reversed.toUpper() + vowels_reversed.toLower() + vowels_reversed.toLower()\
    \ + vowels_reversed.toLower() + vowels_reversed.toLower() + vowels_reversed.toLower()\
    \ + vowels_reversed.toLower() + vowels_reversed.toLower() + vowels_reversed.toLower()\
    \ + vowels_reversed.toLower() + vowels_reversed.toLower() + vowels_reversed.toLower();\n\
    \      |                                                                     \
    \                                                                            \
    \                                                                            \
    \                                              ^~~~~~~\n/tmp/tmpopng75jv.cpp:24:295:\
    \ error: \u2018std::string\u2019 {aka \u2018class std::__cxx11::basic_string<char>\u2019\
    } has no member named \u2018toLower\u2019\n   24 |     std::string vowels_reversed_upper_lower_lower_lower_lower_lower_lower_lower\
    \ = vowels_reversed.toUpper() + vowels_reversed.toLower() + vowels_reversed.toLower()\
    \ + vowels_reversed.toLower() + vowels_reversed.toLower() + vowels_reversed.toLower()\
    \ + vowels_reversed.toLower() + vowels_reversed.toLower() + vowels_reversed.toLower()\
    \ + vowels_reversed.toLower() + vowels_reversed.toLower() + vowels_reversed.toLower();\n\
    \      |                                                                     \
    \                                                                            \
    \                                                                            \
    \                                                                          ^~~~~~~\n\
    /tmp/tmpopng75jv.cpp:24:323: error: \u2018std::string\u2019 {aka \u2018class std::__cxx11::basic_string<char>\u2019\
    } has no member named \u2018toLower\u2019\n   24 |     std::string vowels_reversed_upper_lower_lower_lower_lower_lower_lower_lower\
    \ = vowels_reversed.toUpper() + vowels_reversed.toLower() + vowels_reversed.toLower()\
    \ + vowels_reversed.toLower() + vowels_reversed.toLower() + vowels_reversed.toLower()\
    \ + vowels_reversed.toLower() + vowels_reversed.toLower() + vowels_reversed.toLower()\
    \ + vowels_reversed.toLower() + vowels_reversed.toLower() + vowels_reversed.toLower();\n\
    \      |                                                                     \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                          ^~~~~~~\n/tmp/tmpopng75jv.cpp:24:351: error: \u2018\
    std::string\u2019 {aka \u2018class std::__cxx11::basic_string<char>\u2019} has\
    \ no member named \u2018toLower\u2019\n   24 |     std::string vowels_reversed_upper_lower_lower_lower_lower_lower_lower_lower\
    \ = vowels_reversed.toUpper() + vowels_reversed.toLower() + vowels_reversed.toLower()\
    \ + vowels_reversed.toLower() + vowels_reversed.toLower() + vowels_reversed.toLower()\
    \ + vowels_reversed.toLower() + vowels_reversed.toLower() + vowels_reversed.toLower()\
    \ + vowels_reversed.toLower() + vowels_reversed.toLower() + vowels_reversed.toLower();\n\
    \      |                                                                     \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                      ^~~~~~~\n/tmp/tmpopng75jv.cpp:24:379:\
    \ error: \u2018std::string\u2019 {aka \u2018class std::__cxx11::basic_string<char>\u2019\
    } has no member named \u2018toLower\u2019\n   24 |     std::string vowels_reversed_upper_lower_lower_lower_lower_lower_lower_lower\
    \ = vowels_reversed.toUpper() + vowels_reversed.toLower() + vowels_reversed.toLower()\
    \ + vowels_reversed.toLower() + vowels_reversed.toLower() + vowels_reversed.toLower()\
    \ + vowels_reversed.toLower() + vowels_reversed.toLower() + vowels_reversed.toLower()\
    \ + vowels_reversed.toLower() + vowels_reversed.toLower() + vowels_reversed.toLower();\n\
    \      |                                                                     \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \      ^~~~~~~\n/tmp/tmpopng75jv.cpp:24:407: error: \u2018std::string\u2019 {aka\
    \ \u2018class std::__cxx11::basic_string<char>\u2019} has no member named \u2018\
    toLower\u2019\n   24 |     std::string vowels_reversed_upper_lower_lower_lower_lower_lower_lower_lower\
    \ = vowels_reversed.toUpper() + vowels_reversed.toLower() + vowels_reversed.toLower()\
    \ + vowels_reversed.toLower() + vowels_reversed.toLower() + vowels_reversed.toLower()\
    \ + vowels_reversed.toLower() + vowels_reversed.toLower() + vowels_reversed.toLower()\
    \ + vowels_reversed.toLower() + vowels_reversed.toLower() + vowels_reversed.toLower();\n\
    \      |                                                                     \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                  ^~~~~~~\n/tmp/tmpopng75jv.cpp:25:89: error:\
    \ \u2018vowel\u2019 was not declared in this scope; did you mean \u2018vowels\u2019\
    ?\n   25 |     std::string vowels_reversed_upper_lower_lower_lower_lower_lower_lower_lower_lower\
    \ = vowel\n      |                                                           \
    \                              ^~~~~\n      |                                \
    \                                                         vowels\n/tmp/tmpopng75jv.cpp:26:1:\
    \ error: expected \u2018,\u2019 or \u2018;\u2019 before \u2018}\u2019 token\n\
    \   26 | }\n      | ^\n/tmp/tmpopng75jv.cpp:26:1: warning: no return statement\
    \ in function returning non-void [-Wreturn-type]\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// get_closest_vowel(\"yogurt\") ==> \"u\"\
    \n// get_closest_vowel(\"FULL\") ==> \"U\"\n// get_closest_vowel(\"quick\") ==>\
    \ \"\"\n// get_closest_vowel(\"ab\") ==> \"\"\nstd::string get_closest_vowel(std::string\
    \ word) {\n    std::string vowels = \"aeiouAEIOU\";\n    std::string vowels_reverse\
    \ = vowels.rbegin();\n    std::string vowels_reverse2 = vowels.rend();\n    std::string\
    \ vowels_reverse3 = vowels.rbegin();\n    std::string vowels_reverse4 = vowels.rend();\n\
    \    std::string vowels_reverse5 = vowels.rbegin();\n    std::string vowels_reverse6\
    \ = vowels.rend();\n    std::string vowels_reverse7 = vowels.rbegin();\n    std::string\
    \ vowels_reverse8 = vowels.rend();\n    std::string vowels_reverse9 = vowels.rbegin();\n\
    \    std::string vowels_reverse10 = vowels.rend();\n    std::string vowels_reverse11\
    \ = vowels.rbegin();\n    std::string vowels_reverse12 = vowels.rend();\n    std::string\
    \ vowels_reverse13 = vowels.rbegin();\n    std::string vowels_reverse14 = vowels.rend();\n\
    \    std::string vowels_reverse15 = vowels.rbegin();\n    std::string vowels_reverse16\
    \ = vowels.rend();\n    std::string vowels_reverse17 = vowels.rbegin();\n    std::string\
    \ vowels_reverse18 = vowels.rend();\n    std::string vowels_reverse19 = vowels.rbegin();\n\
    \    std::string vowels_reverse20 = vowels.rend();\n    std::string vowels_reverse21\
    \ = vowels.rbegin();\n    std::string vowels_reverse22 = vowels.rend();\n    std::string\
    \ vowels_reverse23 = vowels.rbegin();\n    std::string vowels_reverse24 = vowels.rend();\n\
    \    std::string vowels_reverse25 = vowels.rbegin();\n    std::string vowels_reverse26\
    \ = vowels.rend();\n    std::string vowels_reverse27 = vowels.rbegin();\n    std::string\
    \ vowels_reverse28 = vowels.rend();\n    std::string vowels_reverse29 = vowels.rbegin();\n\
    \    std::string vowels_reverse30 = vowels.rend();\n    std::string vowels_reverse31\
    \ = vowels.rbegin();\n    std::string vowels_reverse32 = vowels.rend();\n    std::string\
    \ vowels_reverse33 = vowels.rbegin();\n    std::string vowels_reverse34 = vowels.rend();\n\
    \    std::string vowels_reverse35 = vowels.rbegin();\n    std::string vowels_reverse36\
    \ = vowels.rend();\n    std::string vowels_reverse37 = vowels.rbegin();\n    std::string\
    \ vowels_reverse38 = vowels.rend();\n    std::string vowels_reverse39 = vowels.rbegin();\n\
    \    std::string vowels_reverse40 = vowels.rend();\n    std::string vowels_reverse41\
    \ = vowels.rbegin();\n\n}\nint main() {\n    auto candidate = get_closest_vowel;\n\
    \    assert(candidate((\"yogurt\")) == (\"u\"));\n    assert(candidate((\"full\"\
    )) == (\"u\"));\n    assert(candidate((\"easy\")) == (\"\"));\n    assert(candidate((\"\
    eAsy\")) == (\"\"));\n    assert(candidate((\"ali\")) == (\"\"));\n    assert(candidate((\"\
    bad\")) == (\"a\"));\n    assert(candidate((\"most\")) == (\"o\"));\n    assert(candidate((\"\
    ab\")) == (\"\"));\n    assert(candidate((\"ba\")) == (\"\"));\n    assert(candidate((\"\
    quick\")) == (\"\"));\n    assert(candidate((\"anime\")) == (\"i\"));\n    assert(candidate((\"\
    Asia\")) == (\"\"));\n    assert(candidate((\"Above\")) == (\"o\"));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpgb62rvbg.cpp: In function \u2018std::string get_closest_vowel(std::string)\u2019\
    :\n/tmp/tmpgb62rvbg.cpp:15:47: error: conversion from \u2018std::__cxx11::basic_string<char>::reverse_iterator\u2019\
    \ {aka \u2018std::reverse_iterator<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char>\
    \ > >\u2019} to non-scalar type \u2018std::string\u2019 {aka \u2018std::__cxx11::basic_string<char>\u2019\
    } requested\n   15 |     std::string vowels_reverse = vowels.rbegin();\n     \
    \ |                                  ~~~~~~~~~~~~~^~\n/tmp/tmpgb62rvbg.cpp:16:46:\
    \ error: conversion from \u2018std::__cxx11::basic_string<char>::reverse_iterator\u2019\
    \ {aka \u2018std::reverse_iterator<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char>\
    \ > >\u2019} to non-scalar type \u2018std::string\u2019 {aka \u2018std::__cxx11::basic_string<char>\u2019\
    } requested\n   16 |     std::string vowels_reverse2 = vowels.rend();\n      |\
    \                                   ~~~~~~~~~~~^~\n/tmp/tmpgb62rvbg.cpp:17:48:\
    \ error: conversion from \u2018std::__cxx11::basic_string<char>::reverse_iterator\u2019\
    \ {aka \u2018std::reverse_iterator<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char>\
    \ > >\u2019} to non-scalar type \u2018std::string\u2019 {aka \u2018std::__cxx11::basic_string<char>\u2019\
    } requested\n   17 |     std::string vowels_reverse3 = vowels.rbegin();\n    \
    \  |                                   ~~~~~~~~~~~~~^~\n/tmp/tmpgb62rvbg.cpp:18:46:\
    \ error: conversion from \u2018std::__cxx11::basic_string<char>::reverse_iterator\u2019\
    \ {aka \u2018std::reverse_iterator<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char>\
    \ > >\u2019} to non-scalar type \u2018std::string\u2019 {aka \u2018std::__cxx11::basic_string<char>\u2019\
    } requested\n   18 |     std::string vowels_reverse4 = vowels.rend();\n      |\
    \                                   ~~~~~~~~~~~^~\n/tmp/tmpgb62rvbg.cpp:19:48:\
    \ error: conversion from \u2018std::__cxx11::basic_string<char>::reverse_iterator\u2019\
    \ {aka \u2018std::reverse_iterator<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char>\
    \ > >\u2019} to non-scalar type \u2018std::string\u2019 {aka \u2018std::__cxx11::basic_string<char>\u2019\
    } requested\n   19 |     std::string vowels_reverse5 = vowels.rbegin();\n    \
    \  |                                   ~~~~~~~~~~~~~^~\n/tmp/tmpgb62rvbg.cpp:20:46:\
    \ error: conversion from \u2018std::__cxx11::basic_string<char>::reverse_iterator\u2019\
    \ {aka \u2018std::reverse_iterator<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char>\
    \ > >\u2019} to non-scalar type \u2018std::string\u2019 {aka \u2018std::__cxx11::basic_string<char>\u2019\
    } requested\n   20 |     std::string vowels_reverse6 = vowels.rend();\n      |\
    \                                   ~~~~~~~~~~~^~\n/tmp/tmpgb62rvbg.cpp:21:48:\
    \ error: conversion from \u2018std::__cxx11::basic_string<char>::reverse_iterator\u2019\
    \ {aka \u2018std::reverse_iterator<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char>\
    \ > >\u2019} to non-scalar type \u2018std::string\u2019 {aka \u2018std::__cxx11::basic_string<char>\u2019\
    } requested\n   21 |     std::string vowels_reverse7 = vowels.rbegin();\n    \
    \  |                                   ~~~~~~~~~~~~~^~\n/tmp/tmpgb62rvbg.cpp:22:46:\
    \ error: conversion from \u2018std::__cxx11::basic_string<char>::reverse_iterator\u2019\
    \ {aka \u2018std::reverse_iterator<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char>\
    \ > >\u2019} to non-scalar type \u2018std::string\u2019 {aka \u2018std::__cxx11::basic_string<char>\u2019\
    } requested\n   22 |     std::string vowels_reverse8 = vowels.rend();\n      |\
    \                                   ~~~~~~~~~~~^~\n/tmp/tmpgb62rvbg.cpp:23:48:\
    \ error: conversion from \u2018std::__cxx11::basic_string<char>::reverse_iterator\u2019\
    \ {aka \u2018std::reverse_iterator<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char>\
    \ > >\u2019} to non-scalar type \u2018std::string\u2019 {aka \u2018std::__cxx11::basic_string<char>\u2019\
    } requested\n   23 |     std::string vowels_reverse9 = vowels.rbegin();\n    \
    \  |                                   ~~~~~~~~~~~~~^~\n/tmp/tmpgb62rvbg.cpp:24:47:\
    \ error: conversion from \u2018std::__cxx11::basic_string<char>::reverse_iterator\u2019\
    \ {aka \u2018std::reverse_iterator<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char>\
    \ > >\u2019} to non-scalar type \u2018std::string\u2019 {aka \u2018std::__cxx11::basic_string<char>\u2019\
    } requested\n   24 |     std::string vowels_reverse10 = vowels.rend();\n     \
    \ |                                    ~~~~~~~~~~~^~\n/tmp/tmpgb62rvbg.cpp:25:49:\
    \ error: conversion from \u2018std::__cxx11::basic_string<char>::reverse_iterator\u2019\
    \ {aka \u2018std::reverse_iterator<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char>\
    \ > >\u2019} to non-scalar type \u2018std::string\u2019 {aka \u2018std::__cxx11::basic_string<char>\u2019\
    } requested\n   25 |     std::string vowels_reverse11 = vowels.rbegin();\n   \
    \   |                                    ~~~~~~~~~~~~~^~\n/tmp/tmpgb62rvbg.cpp:26:47:\
    \ error: conversion from \u2018std::__cxx11::basic_string<char>::reverse_iterator\u2019\
    \ {aka \u2018std::reverse_iterator<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char>\
    \ > >\u2019} to non-scalar type \u2018std::string\u2019 {aka \u2018std::__cxx11::basic_string<char>\u2019\
    } requested\n   26 |     std::string vowels_reverse12 = vowels.rend();\n     \
    \ |                                    ~~~~~~~~~~~^~\n/tmp/tmpgb62rvbg.cpp:27:49:\
    \ error: conversion from \u2018std::__cxx11::basic_string<char>::reverse_iterator\u2019\
    \ {aka \u2018std::reverse_iterator<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char>\
    \ > >\u2019} to non-scalar type \u2018std::string\u2019 {aka \u2018std::__cxx11::basic_string<char>\u2019\
    } requested\n   27 |     std::string vowels_reverse13 = vowels.rbegin();\n   \
    \   |                                    ~~~~~~~~~~~~~^~\n/tmp/tmpgb62rvbg.cpp:28:47:\
    \ error: conversion from \u2018std::__cxx11::basic_string<char>::reverse_iterator\u2019\
    \ {aka \u2018std::reverse_iterator<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char>\
    \ > >\u2019} to non-scalar type \u2018std::string\u2019 {aka \u2018std::__cxx11::basic_string<char>\u2019\
    } requested\n   28 |     std::string vowels_reverse14 = vowels.rend();\n     \
    \ |                                    ~~~~~~~~~~~^~\n/tmp/tmpgb62rvbg.cpp:29:49:\
    \ error: conversion from \u2018std::__cxx11::basic_string<char>::reverse_iterator\u2019\
    \ {aka \u2018std::reverse_iterator<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char>\
    \ > >\u2019} to non-scalar type \u2018std::string\u2019 {aka \u2018std::__cxx11::basic_string<char>\u2019\
    } requested\n   29 |     std::string vowels_reverse15 = vowels.rbegin();\n   \
    \   |                                    ~~~~~~~~~~~~~^~\n/tmp/tmpgb62rvbg.cpp:30:47:\
    \ error: conversion from \u2018std::__cxx11::basic_string<char>::reverse_iterator\u2019\
    \ {aka \u2018std::reverse_iterator<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char>\
    \ > >\u2019} to non-scalar type \u2018std::string\u2019 {aka \u2018std::__cxx11::basic_string<char>\u2019\
    } requested\n   30 |     std::string vowels_reverse16 = vowels.rend();\n     \
    \ |                                    ~~~~~~~~~~~^~\n/tmp/tmpgb62rvbg.cpp:31:49:\
    \ error: conversion from \u2018std::__cxx11::basic_string<char>::reverse_iterator\u2019\
    \ {aka \u2018std::reverse_iterator<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char>\
    \ > >\u2019} to non-scalar type \u2018std::string\u2019 {aka \u2018std::__cxx11::basic_string<char>\u2019\
    } requested\n   31 |     std::string vowels_reverse17 = vowels.rbegin();\n   \
    \   |                                    ~~~~~~~~~~~~~^~\n/tmp/tmpgb62rvbg.cpp:32:47:\
    \ error: conversion from \u2018std::__cxx11::basic_string<char>::reverse_iterator\u2019\
    \ {aka \u2018std::reverse_iterator<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char>\
    \ > >\u2019} to non-scalar type \u2018std::string\u2019 {aka \u2018std::__cxx11::basic_string<char>\u2019\
    } requested\n   32 |     std::string vowels_reverse18 = vowels.rend();\n     \
    \ |                                    ~~~~~~~~~~~^~\n/tmp/tmpgb62rvbg.cpp:33:49:\
    \ error: conversion from \u2018std::__cxx11::basic_string<char>::reverse_iterator\u2019\
    \ {aka \u2018std::reverse_iterator<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char>\
    \ > >\u2019} to non-scalar type \u2018std::string\u2019 {aka \u2018std::__cxx11::basic_string<char>\u2019\
    } requested\n   33 |     std::string vowels_reverse19 = vowels.rbegin();\n   \
    \   |                                    ~~~~~~~~~~~~~^~\n/tmp/tmpgb62rvbg.cpp:34:47:\
    \ error: conversion from \u2018std::__cxx11::basic_string<char>::reverse_iterator\u2019\
    \ {aka \u2018std::reverse_iterator<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char>\
    \ > >\u2019} to non-scalar type \u2018std::string\u2019 {aka \u2018std::__cxx11::basic_string<char>\u2019\
    } requested\n   34 |     std::string vowels_reverse20 = vowels.rend();\n     \
    \ |                                    ~~~~~~~~~~~^~\n/tmp/tmpgb62rvbg.cpp:35:49:\
    \ error: conversion from \u2018std::__cxx11::basic_string<char>::reverse_iterator\u2019\
    \ {aka \u2018std::reverse_iterator<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char>\
    \ > >\u2019} to non-scalar type \u2018std::string\u2019 {aka \u2018std::__cxx11::basic_string<char>\u2019\
    } requested\n   35 |     std::string vowels_reverse21 = vowels.rbegin();\n   \
    \   |                                    ~~~~~~~~~~~~~^~\n/tmp/tmpgb62rvbg.cpp:36:47:\
    \ error: conversion from \u2018std::__cxx11::basic_string<char>::reverse_iterator\u2019\
    \ {aka \u2018std::reverse_iterator<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char>\
    \ > >\u2019} to non-scalar type \u2018std::string\u2019 {aka \u2018std::__cxx11::basic_string<char>\u2019\
    } requested\n   36 |     std::string vowels_reverse22 = vowels.rend();\n     \
    \ |                                    ~~~~~~~~~~~^~\n/tmp/tmpgb62rvbg.cpp:37:49:\
    \ error: conversion from \u2018std::__cxx11::basic_string<char>::reverse_iterator\u2019\
    \ {aka \u2018std::reverse_iterator<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char>\
    \ > >\u2019} to non-scalar type \u2018std::string\u2019 {aka \u2018std::__cxx11::basic_string<char>\u2019\
    } requested\n   37 |     std::string vowels_reverse23 = vowels.rbegin();\n   \
    \   |                                    ~~~~~~~~~~~~~^~\n/tmp/tmpgb62rvbg.cpp:38:47:\
    \ error: conversion from \u2018std::__cxx11::basic_string<char>::reverse_iterator\u2019\
    \ {aka \u2018std::reverse_iterator<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char>\
    \ > >\u2019} to non-scalar type \u2018std::string\u2019 {aka \u2018std::__cxx11::basic_string<char>\u2019\
    } requested\n   38 |     std::string vowels_reverse24 = vowels.rend();\n     \
    \ |                                    ~~~~~~~~~~~^~\n/tmp/tmpgb62rvbg.cpp:39:49:\
    \ error: conversion from \u2018std::__cxx11::basic_string<char>::reverse_iterator\u2019\
    \ {aka \u2018std::reverse_iterator<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char>\
    \ > >\u2019} to non-scalar type \u2018std::string\u2019 {aka \u2018std::__cxx11::basic_string<char>\u2019\
    } requested\n   39 |     std::string vowels_reverse25 = vowels.rbegin();\n   \
    \   |                                    ~~~~~~~~~~~~~^~\n/tmp/tmpgb62rvbg.cpp:40:47:\
    \ error: conversion from \u2018std::__cxx11::basic_string<char>::reverse_iterator\u2019\
    \ {aka \u2018std::reverse_iterator<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char>\
    \ > >\u2019} to non-scalar type \u2018std::string\u2019 {aka \u2018std::__cxx11::basic_string<char>\u2019\
    } requested\n   40 |     std::string vowels_reverse26 = vowels.rend();\n     \
    \ |                                    ~~~~~~~~~~~^~\n/tmp/tmpgb62rvbg.cpp:41:49:\
    \ error: conversion from \u2018std::__cxx11::basic_string<char>::reverse_iterator\u2019\
    \ {aka \u2018std::reverse_iterator<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char>\
    \ > >\u2019} to non-scalar type \u2018std::string\u2019 {aka \u2018std::__cxx11::basic_string<char>\u2019\
    } requested\n   41 |     std::string vowels_reverse27 = vowels.rbegin();\n   \
    \   |                                    ~~~~~~~~~~~~~^~\n/tmp/tmpgb62rvbg.cpp:42:47:\
    \ error: conversion from \u2018std::__cxx11::basic_string<char>::reverse_iterator\u2019\
    \ {aka \u2018std::reverse_iterator<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char>\
    \ > >\u2019} to non-scalar type \u2018std::string\u2019 {aka \u2018std::__cxx11::basic_string<char>\u2019\
    } requested\n   42 |     std::string vowels_reverse28 = vowels.rend();\n     \
    \ |                                    ~~~~~~~~~~~^~\n/tmp/tmpgb62rvbg.cpp:43:49:\
    \ error: conversion from \u2018std::__cxx11::basic_string<char>::reverse_iterator\u2019\
    \ {aka \u2018std::reverse_iterator<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char>\
    \ > >\u2019} to non-scalar type \u2018std::string\u2019 {aka \u2018std::__cxx11::basic_string<char>\u2019\
    } requested\n   43 |     std::string vowels_reverse29 = vowels.rbegin();\n   \
    \   |                                    ~~~~~~~~~~~~~^~\n/tmp/tmpgb62rvbg.cpp:44:47:\
    \ error: conversion from \u2018std::__cxx11::basic_string<char>::reverse_iterator\u2019\
    \ {aka \u2018std::reverse_iterator<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char>\
    \ > >\u2019} to non-scalar type \u2018std::string\u2019 {aka \u2018std::__cxx11::basic_string<char>\u2019\
    } requested\n   44 |     std::string vowels_reverse30 = vowels.rend();\n     \
    \ |                                    ~~~~~~~~~~~^~\n/tmp/tmpgb62rvbg.cpp:45:49:\
    \ error: conversion from \u2018std::__cxx11::basic_string<char>::reverse_iterator\u2019\
    \ {aka \u2018std::reverse_iterator<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char>\
    \ > >\u2019} to non-scalar type \u2018std::string\u2019 {aka \u2018std::__cxx11::basic_string<char>\u2019\
    } requested\n   45 |     std::string vowels_reverse31 = vowels.rbegin();\n   \
    \   |                                    ~~~~~~~~~~~~~^~\n/tmp/tmpgb62rvbg.cpp:46:47:\
    \ error: conversion from \u2018std::__cxx11::basic_string<char>::reverse_iterator\u2019\
    \ {aka \u2018std::reverse_iterator<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char>\
    \ > >\u2019} to non-scalar type \u2018std::string\u2019 {aka \u2018std::__cxx11::basic_string<char>\u2019\
    } requested\n   46 |     std::string vowels_reverse32 = vowels.rend();\n     \
    \ |                                    ~~~~~~~~~~~^~\n/tmp/tmpgb62rvbg.cpp:47:49:\
    \ error: conversion from \u2018std::__cxx11::basic_string<char>::reverse_iterator\u2019\
    \ {aka \u2018std::reverse_iterator<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char>\
    \ > >\u2019} to non-scalar type \u2018std::string\u2019 {aka \u2018std::__cxx11::basic_string<char>\u2019\
    } requested\n   47 |     std::string vowels_reverse33 = vowels.rbegin();\n   \
    \   |                                    ~~~~~~~~~~~~~^~\n/tmp/tmpgb62rvbg.cpp:48:47:\
    \ error: conversion from \u2018std::__cxx11::basic_string<char>::reverse_iterator\u2019\
    \ {aka \u2018std::reverse_iterator<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char>\
    \ > >\u2019} to non-scalar type \u2018std::string\u2019 {aka \u2018std::__cxx11::basic_string<char>\u2019\
    } requested\n   48 |     std::string vowels_reverse34 = vowels.rend();\n     \
    \ |                                    ~~~~~~~~~~~^~\n/tmp/tmpgb62rvbg.cpp:49:49:\
    \ error: conversion from \u2018std::__cxx11::basic_string<char>::reverse_iterator\u2019\
    \ {aka \u2018std::reverse_iterator<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char>\
    \ > >\u2019} to non-scalar type \u2018std::string\u2019 {aka \u2018std::__cxx11::basic_string<char>\u2019\
    } requested\n   49 |     std::string vowels_reverse35 = vowels.rbegin();\n   \
    \   |                                    ~~~~~~~~~~~~~^~\n/tmp/tmpgb62rvbg.cpp:50:47:\
    \ error: conversion from \u2018std::__cxx11::basic_string<char>::reverse_iterator\u2019\
    \ {aka \u2018std::reverse_iterator<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char>\
    \ > >\u2019} to non-scalar type \u2018std::string\u2019 {aka \u2018std::__cxx11::basic_string<char>\u2019\
    } requested\n   50 |     std::string vowels_reverse36 = vowels.rend();\n     \
    \ |                                    ~~~~~~~~~~~^~\n/tmp/tmpgb62rvbg.cpp:51:49:\
    \ error: conversion from \u2018std::__cxx11::basic_string<char>::reverse_iterator\u2019\
    \ {aka \u2018std::reverse_iterator<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char>\
    \ > >\u2019} to non-scalar type \u2018std::string\u2019 {aka \u2018std::__cxx11::basic_string<char>\u2019\
    } requested\n   51 |     std::string vowels_reverse37 = vowels.rbegin();\n   \
    \   |                                    ~~~~~~~~~~~~~^~\n/tmp/tmpgb62rvbg.cpp:52:47:\
    \ error: conversion from \u2018std::__cxx11::basic_string<char>::reverse_iterator\u2019\
    \ {aka \u2018std::reverse_iterator<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char>\
    \ > >\u2019} to non-scalar type \u2018std::string\u2019 {aka \u2018std::__cxx11::basic_string<char>\u2019\
    } requested\n   52 |     std::string vowels_reverse38 = vowels.rend();\n     \
    \ |                                    ~~~~~~~~~~~^~\n/tmp/tmpgb62rvbg.cpp:53:49:\
    \ error: conversion from \u2018std::__cxx11::basic_string<char>::reverse_iterator\u2019\
    \ {aka \u2018std::reverse_iterator<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char>\
    \ > >\u2019} to non-scalar type \u2018std::string\u2019 {aka \u2018std::__cxx11::basic_string<char>\u2019\
    } requested\n   53 |     std::string vowels_reverse39 = vowels.rbegin();\n   \
    \   |                                    ~~~~~~~~~~~~~^~\n/tmp/tmpgb62rvbg.cpp:54:47:\
    \ error: conversion from \u2018std::__cxx11::basic_string<char>::reverse_iterator\u2019\
    \ {aka \u2018std::reverse_iterator<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char>\
    \ > >\u2019} to non-scalar type \u2018std::string\u2019 {aka \u2018std::__cxx11::basic_string<char>\u2019\
    } requested\n   54 |     std::string vowels_reverse40 = vowels.rend();\n     \
    \ |                                    ~~~~~~~~~~~^~\n/tmp/tmpgb62rvbg.cpp:55:49:\
    \ error: conversion from \u2018std::__cxx11::basic_string<char>::reverse_iterator\u2019\
    \ {aka \u2018std::reverse_iterator<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char>\
    \ > >\u2019} to non-scalar type \u2018std::string\u2019 {aka \u2018std::__cxx11::basic_string<char>\u2019\
    } requested\n   55 |     std::string vowels_reverse41 = vowels.rbegin();\n   \
    \   |                                    ~~~~~~~~~~~~~^~\n/tmp/tmpgb62rvbg.cpp:57:1:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n\
    \   57 | }\n      | ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// get_closest_vowel(\"yogurt\") ==> \"u\"\
    \n// get_closest_vowel(\"FULL\") ==> \"U\"\n// get_closest_vowel(\"quick\") ==>\
    \ \"\"\n// get_closest_vowel(\"ab\") ==> \"\"\nstd::string get_closest_vowel(std::string\
    \ word) {\n    int n = word.length();\n    std::string vowels = \"aeiou\";\n \
    \   std::string vowels_reverse = \"AEIOU\";\n    std::string vowels_reverse2 =\
    \ \"AEIOUaeiou\";\n    std::string vowels_reverse3 = \"AEIOUaeiouAEIOU\";\n  \
    \  std::string vowels_reverse4 = \"AEIOUaeiouAEIOUaeiou\";\n    std::string vowels_reverse5\
    \ = \"AEIOUaeiouAEIOUaeiouAEIOU\";\n    std::string vowels_reverse6 = \"AEIOUaeiouAEIOUaeiouAEIOUaeiou\"\
    ;\n    std::string vowels_reverse7 = \"AEIOUaeiouAEIOUaeiouAEIOUaeiouAEIOU\";\n\
    \    std::string vowels_reverse8 = \"AEIOUaeiouAEIOUaeiouAEIOUaeiouAEIOUaeiou\"\
    ;\n    std::string vowels_reverse9 = \"AEIOUaeiouAEIOUaeiouAEIOUaeiouAEIOUaeiouAEIOU\"\
    ;\n    std::string vowels_reverse10 = \"AEIOUaeiouAEIOUaeiouAEIOUaeiouAEIOUaeiouAEIOUaeiou\"\
    ;\n    std::string vowels_reverse11 = \"AEIOUaeiouAEIOUaeiouAEIOUaeiouAEIOUaeiouAEIOUaeiouAEIOU\"\
    ;\n    std::string vowels_reverse12 = \"AEIOUaeiouAEIOUaeiouAEIOUaeiouAEIOUaeiouAEIOUaeiouAEIOUaeiou\"\
    ;\n    std::string vowels_reverse13 = \"AEIOUaeiouAEIOUaeiouAEIOUaeiouAEIOUaeiouAEIOUaeiouAEIOUaeiouAEIOU\"\
    ;\n    std::string vowels_reverse14 = \"AEIOUaeiouAEIOUaeiouAEIOUaeiouAEIOUaeiouAEIOUaeiouAEIOUaeiouAEIOUaeiou\"\
    ;\n    std::string vowels_reverse15 = \"AEIOUaeiouAEIOUaeiouAEIOUaeiouAEIOUaeiouAEIOUaeiouAEIOUaeiouAEIOUaeiouAEIOU\"\
    ;\n    std::string vowels_reverse16 = \"AEIOUaeiouAEIOUaeiouAEIOUaeiouAEIOUaeiouAEIOUaeiouAEIOUaeiouAEIOUaeiouAEIOUaeiou\"\
    ;\n    std::string vowels_reverse17 = \"AEIOUae\n}\nint main() {\n    auto candidate\
    \ = get_closest_vowel;\n    assert(candidate((\"yogurt\")) == (\"u\"));\n    assert(candidate((\"\
    full\")) == (\"u\"));\n    assert(candidate((\"easy\")) == (\"\"));\n    assert(candidate((\"\
    eAsy\")) == (\"\"));\n    assert(candidate((\"ali\")) == (\"\"));\n    assert(candidate((\"\
    bad\")) == (\"a\"));\n    assert(candidate((\"most\")) == (\"o\"));\n    assert(candidate((\"\
    ab\")) == (\"\"));\n    assert(candidate((\"ba\")) == (\"\"));\n    assert(candidate((\"\
    quick\")) == (\"\"));\n    assert(candidate((\"anime\")) == (\"i\"));\n    assert(candidate((\"\
    Asia\")) == (\"\"));\n    assert(candidate((\"Above\")) == (\"o\"));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpum45ux3r.cpp:32:36: warning: missing terminating \" character\n\
    \   32 |     std::string vowels_reverse17 = \"AEIOUae\n      |               \
    \                     ^\n/tmp/tmpum45ux3r.cpp:32:36: error: missing terminating\
    \ \" character\n   32 |     std::string vowels_reverse17 = \"AEIOUae\n      |\
    \                                    ^~~~~~~~\n/tmp/tmpum45ux3r.cpp: In function\
    \ \u2018std::string get_closest_vowel(std::string)\u2019:\n/tmp/tmpum45ux3r.cpp:33:1:\
    \ error: expected primary-expression before \u2018}\u2019 token\n   33 | }\n \
    \     | ^\n/tmp/tmpum45ux3r.cpp:33:1: error: expected \u2018,\u2019 or \u2018\
    ;\u2019 before \u2018}\u2019 token\n/tmp/tmpum45ux3r.cpp:33:1: warning: no return\
    \ statement in function returning non-void [-Wreturn-type]\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// get_closest_vowel(\"yogurt\") ==> \"u\"\
    \n// get_closest_vowel(\"FULL\") ==> \"U\"\n// get_closest_vowel(\"quick\") ==>\
    \ \"\"\n// get_closest_vowel(\"ab\") ==> \"\"\nstd::string get_closest_vowel(std::string\
    \ word) {\n    std::string vowels = \"AEIOUaeiou\";\n    std::string vowels_reverse\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse2 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse3 = \"AEIOUaeiou\";\n    std::string vowels_reverse4 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse5 = \"AEIOUaeiou\";\n    std::string vowels_reverse6\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse7 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse8 = \"AEIOUaeiou\";\n    std::string vowels_reverse9 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse10 = \"AEIOUaeiou\";\n    std::string vowels_reverse11\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse12 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse13 = \"AEIOUaeiou\";\n    std::string vowels_reverse14 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse15 = \"AEIOUaeiou\";\n    std::string vowels_reverse16\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse17 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse18 = \"AEIOUaeiou\";\n    std::string vowels_reverse19 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse20 = \"AEIOUaeiou\";\n    std::string vowels_reverse21\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse22 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse23 = \"AEIOUaeiou\";\n    std::string vowels_reverse24 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse25 = \"AEIOUaeiou\";\n    std::string vowels_reverse26\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse27 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse28 = \"AEIOUaeiou\";\n    std::string vowels_reverse29 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse30 = \"AEIOUaeiou\";\n    std::string vowels_reverse31\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse32 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse33 = \"AEIOUaeiou\";\n    std::string vowels_reverse34 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse35 = \"AEIOUaeiou\";\n    std::string vowels_reverse36\
    \ = \"AEIOU\n}\nint main() {\n    auto candidate = get_closest_vowel;\n    assert(candidate((\"\
    yogurt\")) == (\"u\"));\n    assert(candidate((\"full\")) == (\"u\"));\n    assert(candidate((\"\
    easy\")) == (\"\"));\n    assert(candidate((\"eAsy\")) == (\"\"));\n    assert(candidate((\"\
    ali\")) == (\"\"));\n    assert(candidate((\"bad\")) == (\"a\"));\n    assert(candidate((\"\
    most\")) == (\"o\"));\n    assert(candidate((\"ab\")) == (\"\"));\n    assert(candidate((\"\
    ba\")) == (\"\"));\n    assert(candidate((\"quick\")) == (\"\"));\n    assert(candidate((\"\
    anime\")) == (\"i\"));\n    assert(candidate((\"Asia\")) == (\"\"));\n    assert(candidate((\"\
    Above\")) == (\"o\"));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpukaykxg4.cpp:50:36: warning: missing terminating \" character\n\
    \   50 |     std::string vowels_reverse36 = \"AEIOU\n      |                 \
    \                   ^\n/tmp/tmpukaykxg4.cpp:50:36: error: missing terminating\
    \ \" character\n   50 |     std::string vowels_reverse36 = \"AEIOU\n      |  \
    \                                  ^~~~~~\n/tmp/tmpukaykxg4.cpp: In function \u2018\
    std::string get_closest_vowel(std::string)\u2019:\n/tmp/tmpukaykxg4.cpp:51:1:\
    \ error: expected primary-expression before \u2018}\u2019 token\n   51 | }\n \
    \     | ^\n/tmp/tmpukaykxg4.cpp:51:1: error: expected \u2018,\u2019 or \u2018\
    ;\u2019 before \u2018}\u2019 token\n/tmp/tmpukaykxg4.cpp:51:1: warning: no return\
    \ statement in function returning non-void [-Wreturn-type]\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// get_closest_vowel(\"yogurt\") ==> \"u\"\
    \n// get_closest_vowel(\"FULL\") ==> \"U\"\n// get_closest_vowel(\"quick\") ==>\
    \ \"\"\n// get_closest_vowel(\"ab\") ==> \"\"\nstd::string get_closest_vowel(std::string\
    \ word) {\n    std::string vowels = \"aeiouAEIOU\";\n    std::string vowels_reverse\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse2 = \"aeiouAEIOU\";\n    std::string\
    \ vowels_reverse3 = \"AEIOUaeiou\";\n    std::string vowels_reverse4 = \"aeiouAEIOU\"\
    ;\n    std::string vowels_reverse5 = \"AEIOUaeiou\";\n    std::string vowels_reverse6\
    \ = \"aeiouAEIOU\";\n    std::string vowels_reverse7 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse8 = \"aeiouAEIOU\";\n    std::string vowels_reverse9 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse10 = \"aeiouAEIOU\";\n    std::string vowels_reverse11\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse12 = \"aeiouAEIOU\";\n    std::string\
    \ vowels_reverse13 = \"AEIOUaeiou\";\n    std::string vowels_reverse14 = \"aeiouAEIOU\"\
    ;\n    std::string vowels_reverse15 = \"AEIOUaeiou\";\n    std::string vowels_reverse16\
    \ = \"aeiouAEIOU\";\n    std::string vowels_reverse17 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse18 = \"aeiouAEIOU\";\n    std::string vowels_reverse19 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse20 = \"aeiouAEIOU\";\n    std::string vowels_reverse21\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse22 = \"aeiouAEIOU\";\n    std::string\
    \ vowels_reverse23 = \"AEIOUaeiou\";\n    std::string vowels_reverse24 = \"aeiouAEIOU\"\
    ;\n    std::string vowels_reverse25 = \"AEIOUaeiou\";\n    std::string vowels_reverse26\
    \ = \"aeiouAEIOU\";\n    std::string vowels_reverse27 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse28 = \"aeiouAEIOU\";\n    std::string vowels_reverse29 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse30 = \"aeiouAEIOU\";\n    std::string vowels_reverse31\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse32 = \"aeiouAEIOU\";\n    std::string\
    \ vowels_reverse33 = \"AEIOUaeiou\";\n    std::string vowels_reverse34 = \"aeiouAEIOU\"\
    ;\n    std::string vowels_reverse35 = \"AEIOUaeiou\";\n    std::string vowels_reverse36\
    \ = \"aeiouAE\n}\nint main() {\n    auto candidate = get_closest_vowel;\n    assert(candidate((\"\
    yogurt\")) == (\"u\"));\n    assert(candidate((\"full\")) == (\"u\"));\n    assert(candidate((\"\
    easy\")) == (\"\"));\n    assert(candidate((\"eAsy\")) == (\"\"));\n    assert(candidate((\"\
    ali\")) == (\"\"));\n    assert(candidate((\"bad\")) == (\"a\"));\n    assert(candidate((\"\
    most\")) == (\"o\"));\n    assert(candidate((\"ab\")) == (\"\"));\n    assert(candidate((\"\
    ba\")) == (\"\"));\n    assert(candidate((\"quick\")) == (\"\"));\n    assert(candidate((\"\
    anime\")) == (\"i\"));\n    assert(candidate((\"Asia\")) == (\"\"));\n    assert(candidate((\"\
    Above\")) == (\"o\"));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpmikp68zv.cpp:50:36: warning: missing terminating \" character\n\
    \   50 |     std::string vowels_reverse36 = \"aeiouAE\n      |               \
    \                     ^\n/tmp/tmpmikp68zv.cpp:50:36: error: missing terminating\
    \ \" character\n   50 |     std::string vowels_reverse36 = \"aeiouAE\n      |\
    \                                    ^~~~~~~~\n/tmp/tmpmikp68zv.cpp: In function\
    \ \u2018std::string get_closest_vowel(std::string)\u2019:\n/tmp/tmpmikp68zv.cpp:51:1:\
    \ error: expected primary-expression before \u2018}\u2019 token\n   51 | }\n \
    \     | ^\n/tmp/tmpmikp68zv.cpp:51:1: error: expected \u2018,\u2019 or \u2018\
    ;\u2019 before \u2018}\u2019 token\n/tmp/tmpmikp68zv.cpp:51:1: warning: no return\
    \ statement in function returning non-void [-Wreturn-type]\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// get_closest_vowel(\"yogurt\") ==> \"u\"\
    \n// get_closest_vowel(\"FULL\") ==> \"U\"\n// get_closest_vowel(\"quick\") ==>\
    \ \"\"\n// get_closest_vowel(\"ab\") ==> \"\"\nstd::string get_closest_vowel(std::string\
    \ word) {\n    std::string vowels = \"AEIOUaeiou\";\n    std::string vowels_reverse\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_reverse = \"AEIOUaeiou\";\n\
    \    std::string vowels_reverse_back = \"AEIOUaeiou\";\n    std::string vowels_reverse_back_reverse\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_back_reverse_back = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse_back_reverse_back_reverse = \"AEIOUaeiou\";\n\
    \    std::string vowels_reverse_back_reverse_back_reverse_back = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse = \"\
    AEIOUaeiou\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse\
    \ = \"AEIO\n}\nint main() {\n    auto candidate = get_closest_vowel;\n    assert(candidate((\"\
    yogurt\")) == (\"u\"));\n    assert(candidate((\"full\")) == (\"u\"));\n    assert(candidate((\"\
    easy\")) == (\"\"));\n    assert(candidate((\"eAsy\")) == (\"\"));\n    assert(candidate((\"\
    ali\")) == (\"\"));\n    assert(candidate((\"bad\")) == (\"a\"));\n    assert(candidate((\"\
    most\")) == (\"o\"));\n    assert(candidate((\"ab\")) == (\"\"));\n    assert(candidate((\"\
    ba\")) == (\"\"));\n    assert(candidate((\"quick\")) == (\"\"));\n    assert(candidate((\"\
    anime\")) == (\"i\"));\n    assert(candidate((\"Asia\")) == (\"\"));\n    assert(candidate((\"\
    Above\")) == (\"o\"));\n}\n"
  stdout: ''
  stderr: "/tmp/tmppzrrvxk2.cpp:34:138: warning: missing terminating \" character\n\
    \   34 |     std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse\
    \ = \"AEIO\n      |                                                          \
    \                                                                            \
    \    ^\n/tmp/tmppzrrvxk2.cpp:34:138: error: missing terminating \" character\n\
    \   34 |     std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse\
    \ = \"AEIO\n      |                                                          \
    \                                                                            \
    \    ^~~~~\n/tmp/tmppzrrvxk2.cpp: In function \u2018std::string get_closest_vowel(std::string)\u2019\
    :\n/tmp/tmppzrrvxk2.cpp:32:17: error: redeclaration of \u2018std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\u2019\
    \n   32 |     std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\
    \ = \"AEIOUaeiou\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmppzrrvxk2.cpp:31:17: note: \u2018std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\u2019\
    \ previously declared here\n   31 |     std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\
    \ = \"AEIOUaeiou\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmppzrrvxk2.cpp:33:17: error: redeclaration of \u2018std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\u2019\
    \n   33 |     std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\
    \ = \"AEIOUaeiou\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmppzrrvxk2.cpp:31:17: note: \u2018std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\u2019\
    \ previously declared here\n   31 |     std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\
    \ = \"AEIOUaeiou\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmppzrrvxk2.cpp:35:1: error: expected primary-expression before \u2018}\u2019\
    \ token\n   35 | }\n      | ^\n/tmp/tmppzrrvxk2.cpp:35:1: error: expected \u2018\
    ,\u2019 or \u2018;\u2019 before \u2018}\u2019 token\n/tmp/tmppzrrvxk2.cpp:35:1:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// get_closest_vowel(\"yogurt\") ==> \"u\"\
    \n// get_closest_vowel(\"FULL\") ==> \"U\"\n// get_closest_vowel(\"quick\") ==>\
    \ \"\"\n// get_closest_vowel(\"ab\") ==> \"\"\nstd::string get_closest_vowel(std::string\
    \ word) {\n    std::string vowels = \"AEIOUaeiou\";\n    std::string vowels_reverse\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_reverse = \"\";\n    std::string\
    \ vowels_reverse_back = \"\";\n    std::string vowels_reverse_back_reverse = \"\
    \";\n    std::string vowels_reverse_back_reverse_back = \"\";\n    std::string\
    \ vowels_reverse_back_reverse_back_reverse = \"\";\n    std::string vowels_reverse_back_reverse_back_reverse_back\
    \ = \"\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse\
    \ = \"\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back\
    \ = \"\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse\
    \ = \"\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\
    \ = \"\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse\
    \ = \"\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\
    \ = \"\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\
    \ = \"\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse\
    \ = \"\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\
    \ = \"\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse\
    \ = \"\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\
    \ = \"\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\
    \ = \"\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse\
    \ = \"\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\
    \ = \"\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\
    \ = \"\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\
    \ = \"\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_re\n\
    }\nint main() {\n    auto candidate = get_closest_vowel;\n    assert(candidate((\"\
    yogurt\")) == (\"u\"));\n    assert(candidate((\"full\")) == (\"u\"));\n    assert(candidate((\"\
    easy\")) == (\"\"));\n    assert(candidate((\"eAsy\")) == (\"\"));\n    assert(candidate((\"\
    ali\")) == (\"\"));\n    assert(candidate((\"bad\")) == (\"a\"));\n    assert(candidate((\"\
    most\")) == (\"o\"));\n    assert(candidate((\"ab\")) == (\"\"));\n    assert(candidate((\"\
    ba\")) == (\"\"));\n    assert(candidate((\"quick\")) == (\"\"));\n    assert(candidate((\"\
    anime\")) == (\"i\"));\n    assert(candidate((\"Asia\")) == (\"\"));\n    assert(candidate((\"\
    Above\")) == (\"o\"));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpxi47vidt.cpp: In function \u2018std::string get_closest_vowel(std::string)\u2019\
    :\n/tmp/tmpxi47vidt.cpp:28:17: error: redeclaration of \u2018std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\u2019\
    \n   28 |     std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\
    \ = \"\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpxi47vidt.cpp:27:17: note: \u2018std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\u2019\
    \ previously declared here\n   27 |     std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\
    \ = \"\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpxi47vidt.cpp:33:17: error: redeclaration of \u2018std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\u2019\
    \n   33 |     std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\
    \ = \"\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpxi47vidt.cpp:32:17: note: \u2018std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\u2019\
    \ previously declared here\n   32 |     std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\
    \ = \"\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpxi47vidt.cpp:36:17: error: redeclaration of \u2018std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\u2019\
    \n   36 |     std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\
    \ = \"\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpxi47vidt.cpp:35:17: note: \u2018std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\u2019\
    \ previously declared here\n   35 |     std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\
    \ = \"\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpxi47vidt.cpp:37:17: error: redeclaration of \u2018std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\u2019\
    \n   37 |     std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\
    \ = \"\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpxi47vidt.cpp:35:17: note: \u2018std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\u2019\
    \ previously declared here\n   35 |     std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\
    \ = \"\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpxi47vidt.cpp:39:1: error: expected initializer before \u2018}\u2019 token\n\
    \   39 | }\n      | ^\n/tmp/tmpxi47vidt.cpp:39:1: warning: no return statement\
    \ in function returning non-void [-Wreturn-type]\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// get_closest_vowel(\"yogurt\") ==> \"u\"\
    \n// get_closest_vowel(\"FULL\") ==> \"U\"\n// get_closest_vowel(\"quick\") ==>\
    \ \"\"\n// get_closest_vowel(\"ab\") ==> \"\"\nstd::string get_closest_vowel(std::string\
    \ word) {\n    // Your code goes here\n    std::string vowels = \"AEIOUaeiou\"\
    ;\n    int n = word.size();\n    int vowel_count = 0;\n    for (int i = 0; i <\
    \ n; i++) {\n        if (vowels.find(word[i]) != std::string::npos) {\n      \
    \      vowel_count++;\n        }\n    }\n    if (vowel_count <= 1) {\n       \
    \ return \"\";\n    }\n    int vowel_pos = n - vowel_count;\n    int consonant_pos\
    \ = n - vowel_count + 1;\n    int consonant_count = 0;\n    for (int i = consonant_pos;\
    \ i < n; i++) {\n        if (word[i] == 'a' || word[i] == 'e' || word[i] == 'i'\
    \ || word[i] == 'o' || word[i] == 'u') {\n            consonant_count++;\n   \
    \     }\n    }\n    if (consonant_count <= 1) {\n        return \"\";\n    }\n\
    \    int consonant_pos = n - consonant_count + 1;\n    int vowel_pos = n - consonant_count\
    \ + vowel_count + 1;\n    int vowel_count2 = 0;\n    for (int i = vowel_pos; i\
    \ < n; i++) {\n        if (word[i] == 'a' || word[i] == 'e' || word[i] == 'i'\
    \ || word[i] == 'o' || word[i] == 'u') {\n            vowel_count2++;\n      \
    \  }\n    }\n    if (vowel_count2 <= 1) {\n        return \"\";\n    }\n    int\
    \ vowel_pos = n - consonant_count + vowel_count + vowel_count2 + 1;\n    int consonant_count\
    \ = 0;\n    for (int i = consonant_pos; i < n; i++) {\n        if (word[i] ==\
    \ 'a' || word[i] == 'e' || word[i] == 'i' || word[i] == 'o' || word[i] == 'u')\
    \ {\n            consonant_count++;\n        }\n    }\n    if (consonant_count\
    \ <= 1) {\n        return \"\";\n    }\n    int consonant_pos = n - consonant_count\
    \ + vowel_count + vowel_count2 + 1;\n    int vowel_pos = n - consonant_count +\
    \ vowel_count + vowel_count2 + vowel_count + 1;\n    int vowel_count3 = 0;\n \
    \   for (int i = vowel_pos; i < n; i++) {\n        if (word[i] == 'a' || word[i]\
    \ == 'e' || word[i] == 'i' || word[i] == 'o' || word[i] == 'u') {\n          \
    \  vowel_count3++;\n        }\n    }\n    if (vowel_count3 <= 1) {\n        return\
    \ \"\";\n    }\n    int vowel_pos = n - consonant_count + vowel_count + vowel_count2\
    \ + vowel_count3 + 1;\n    int consonant_count = 0;\n    for (int i = consonant_pos;\
    \ i < n; i++) {\n        if (word[i] == 'a' || word[i] == 'e' || word[i] == 'i'\
    \ || word[i] == 'o' || word[i] == 'u') {\n            consonant_count++;\n   \
    \     }\n}\nint main() {\n    auto candidate = get_closest_vowel;\n    assert(candidate((\"\
    yogurt\")) == (\"u\"));\n    assert(candidate((\"full\")) == (\"u\"));\n    assert(candidate((\"\
    easy\")) == (\"\"));\n    assert(candidate((\"eAsy\")) == (\"\"));\n    assert(candidate((\"\
    ali\")) == (\"\"));\n    assert(candidate((\"bad\")) == (\"a\"));\n    assert(candidate((\"\
    most\")) == (\"o\"));\n    assert(candidate((\"ab\")) == (\"\"));\n    assert(candidate((\"\
    ba\")) == (\"\"));\n    assert(candidate((\"quick\")) == (\"\"));\n    assert(candidate((\"\
    anime\")) == (\"i\"));\n    assert(candidate((\"Asia\")) == (\"\"));\n    assert(candidate((\"\
    Above\")) == (\"o\"));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp294prdc2.cpp: In function \u2018std::string get_closest_vowel(std::string)\u2019\
    :\n/tmp/tmp294prdc2.cpp:37:9: error: redeclaration of \u2018int consonant_pos\u2019\
    \n   37 |     int consonant_pos = n - consonant_count + 1;\n      |         ^~~~~~~~~~~~~\n\
    /tmp/tmp294prdc2.cpp:27:9: note: \u2018int consonant_pos\u2019 previously declared\
    \ here\n   27 |     int consonant_pos = n - vowel_count + 1;\n      |        \
    \ ^~~~~~~~~~~~~\n/tmp/tmp294prdc2.cpp:38:9: error: redeclaration of \u2018int\
    \ vowel_pos\u2019\n   38 |     int vowel_pos = n - consonant_count + vowel_count\
    \ + 1;\n      |         ^~~~~~~~~\n/tmp/tmp294prdc2.cpp:26:9: note: \u2018int\
    \ vowel_pos\u2019 previously declared here\n   26 |     int vowel_pos = n - vowel_count;\n\
    \      |         ^~~~~~~~~\n/tmp/tmp294prdc2.cpp:48:9: error: redeclaration of\
    \ \u2018int vowel_pos\u2019\n   48 |     int vowel_pos = n - consonant_count +\
    \ vowel_count + vowel_count2 + 1;\n      |         ^~~~~~~~~\n/tmp/tmp294prdc2.cpp:26:9:\
    \ note: \u2018int vowel_pos\u2019 previously declared here\n   26 |     int vowel_pos\
    \ = n - vowel_count;\n      |         ^~~~~~~~~\n/tmp/tmp294prdc2.cpp:49:9: error:\
    \ redeclaration of \u2018int consonant_count\u2019\n   49 |     int consonant_count\
    \ = 0;\n      |         ^~~~~~~~~~~~~~~\n/tmp/tmp294prdc2.cpp:28:9: note: \u2018\
    int consonant_count\u2019 previously declared here\n   28 |     int consonant_count\
    \ = 0;\n      |         ^~~~~~~~~~~~~~~\n/tmp/tmp294prdc2.cpp:58:9: error: redeclaration\
    \ of \u2018int consonant_pos\u2019\n   58 |     int consonant_pos = n - consonant_count\
    \ + vowel_count + vowel_count2 + 1;\n      |         ^~~~~~~~~~~~~\n/tmp/tmp294prdc2.cpp:27:9:\
    \ note: \u2018int consonant_pos\u2019 previously declared here\n   27 |     int\
    \ consonant_pos = n - vowel_count + 1;\n      |         ^~~~~~~~~~~~~\n/tmp/tmp294prdc2.cpp:59:9:\
    \ error: redeclaration of \u2018int vowel_pos\u2019\n   59 |     int vowel_pos\
    \ = n - consonant_count + vowel_count + vowel_count2 + vowel_count + 1;\n    \
    \  |         ^~~~~~~~~\n/tmp/tmp294prdc2.cpp:26:9: note: \u2018int vowel_pos\u2019\
    \ previously declared here\n   26 |     int vowel_pos = n - vowel_count;\n   \
    \   |         ^~~~~~~~~\n/tmp/tmp294prdc2.cpp:69:9: error: redeclaration of \u2018\
    int vowel_pos\u2019\n   69 |     int vowel_pos = n - consonant_count + vowel_count\
    \ + vowel_count2 + vowel_count3 + 1;\n      |         ^~~~~~~~~\n/tmp/tmp294prdc2.cpp:26:9:\
    \ note: \u2018int vowel_pos\u2019 previously declared here\n   26 |     int vowel_pos\
    \ = n - vowel_count;\n      |         ^~~~~~~~~\n/tmp/tmp294prdc2.cpp:70:9: error:\
    \ redeclaration of \u2018int consonant_count\u2019\n   70 |     int consonant_count\
    \ = 0;\n      |         ^~~~~~~~~~~~~~~\n/tmp/tmp294prdc2.cpp:28:9: note: \u2018\
    int consonant_count\u2019 previously declared here\n   28 |     int consonant_count\
    \ = 0;\n      |         ^~~~~~~~~~~~~~~\n/tmp/tmp294prdc2.cpp:76:12: error: a\
    \ function-definition is not allowed here before \u2018{\u2019 token\n   76 |\
    \ int main() {\n      |            ^\n/tmp/tmp294prdc2.cpp:91:1: error: expected\
    \ \u2018}\u2019 at end of input\n   91 | }\n      | ^\n/tmp/tmp294prdc2.cpp:13:49:\
    \ note: to match this \u2018{\u2019\n   13 | std::string get_closest_vowel(std::string\
    \ word) {\n      |                                                 ^\n/tmp/tmp294prdc2.cpp:91:1:\
    \ warning: control reaches end of non-void function [-Wreturn-type]\n   91 | }\n\
    \      | ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// get_closest_vowel(\"yogurt\") ==> \"u\"\
    \n// get_closest_vowel(\"FULL\") ==> \"U\"\n// get_closest_vowel(\"quick\") ==>\
    \ \"\"\n// get_closest_vowel(\"ab\") ==> \"\"\nstd::string get_closest_vowel(std::string\
    \ word) {\n    std::string vowels = \"AEIOUaeiou\";\n    std::string vowels_reversed\
    \ = vowels.substr(0, vowels.size() - 1);\n    std::string vowels_reversed_reversed\
    \ = vowels_reversed.substr(0, vowels_reversed.size() - 1);\n    std::string vowels_reversed_reversed_reversed\
    \ = vowels_reversed_reversed.substr(0, vowels_reversed_reversed.size() - 1);\n\
    \    std::string vowels_reversed_reversed_reversed_reversed = vowels_reversed_reversed_reversed.substr(0,\
    \ vowels_reversed_reversed_reversed.size() - 1);\n    std::string vowels_reversed_reversed_reversed_reversed_reversed\
    \ = vowels_reversed_reversed_reversed_reversed.substr(0, vowels_reversed_reversed_reversed_reversed.size()\
    \ - 1);\n    std::string vowels_reversed_reversed_reversed_reversed_reversed_reversed\
    \ = vowels_reversed_reversed_reversed_reversed_reversed.substr(0, vowels_reversed_reversed_reversed_reversed_reversed.size()\
    \ - 1);\n    std::string vowels_reversed_reversed_reversed_reversed_reversed_reversed_reversed\
    \ = vowels_reversed_reversed_reversed_reversed_reversed_reversed.substr(0, vowels_reversed_reversed_reversed_reversed_reversed_reversed.size()\
    \ - 1);\n    std::string vowels_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed\
    \ = vowels_reversed_reversed_reversed_reversed_reversed_reversed_reversed.substr(0,\
    \ vowels_reversed_reversed_reversed_reversed_reversed_reversed_reversed.size()\
    \ - 1);\n    std::string vowels_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed\
    \ = vowels_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed.substr(0,\
    \ vowels_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed.size()\
    \ - 1);\n    std::string vowels_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed\
    \ = vowels_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed.substr(0,\
    \ vowels_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed.size()\
    \ - 1);\n    std::string vowels_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed\
    \ = vowels_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed.substr(0,\
    \ vowels_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed.\n\
    }\nint main() {\n    auto candidate = get_closest_vowel;\n    assert(candidate((\"\
    yogurt\")) == (\"u\"));\n    assert(candidate((\"full\")) == (\"u\"));\n    assert(candidate((\"\
    easy\")) == (\"\"));\n    assert(candidate((\"eAsy\")) == (\"\"));\n    assert(candidate((\"\
    ali\")) == (\"\"));\n    assert(candidate((\"bad\")) == (\"a\"));\n    assert(candidate((\"\
    most\")) == (\"o\"));\n    assert(candidate((\"ab\")) == (\"\"));\n    assert(candidate((\"\
    ba\")) == (\"\"));\n    assert(candidate((\"quick\")) == (\"\"));\n    assert(candidate((\"\
    anime\")) == (\"i\"));\n    assert(candidate((\"Asia\")) == (\"\"));\n    assert(candidate((\"\
    Above\")) == (\"o\"));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp6cpqelli.cpp: In function \u2018std::string get_closest_vowel(std::string)\u2019\
    :\n/tmp/tmp6cpqelli.cpp:23:17: error: redeclaration of \u2018std::string vowels_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed\u2019\
    \n   23 |     std::string vowels_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed\
    \ = vowels_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed.substr(0,\
    \ vowels_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed.size()\
    \ - 1);\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmp6cpqelli.cpp:22:17: note: \u2018std::string vowels_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed\u2019\
    \ previously declared here\n   22 |     std::string vowels_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed\
    \ = vowels_reversed_reversed_reversed_reversed_reversed_reversed_reversed.substr(0,\
    \ vowels_reversed_reversed_reversed_reversed_reversed_reversed_reversed.size()\
    \ - 1);\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmp6cpqelli.cpp:23:98: error: \u2018vowels_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed\u2019\
    \ was not declared in this scope; did you mean \u2018vowels_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed\u2019\
    ?\n   23 |     std::string vowels_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed\
    \ = vowels_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed.substr(0,\
    \ vowels_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed.size()\
    \ - 1);\n      |                                                             \
    \                                     ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    \      |                                                                     \
    \                             vowels_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed\n\
    /tmp/tmp6cpqelli.cpp:24:107: error: \u2018vowels_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed\u2019\
    \ was not declared in this scope; did you mean \u2018vowels_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed\u2019\
    ?\n   24 |     std::string vowels_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed\
    \ = vowels_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed.substr(0,\
    \ vowels_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed.size()\
    \ - 1);\n      |                                                             \
    \                                              ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    \      |                                                                     \
    \                                      vowels_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed\n\
    /tmp/tmp6cpqelli.cpp:25:116: error: \u2018vowels_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed\u2019\
    \ was not declared in this scope; did you mean \u2018vowels_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed\u2019\
    ?\n   25 |     std::string vowels_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed\
    \ = vowels_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed.substr(0,\
    \ vowels_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed.\n\
    \      |                                                                     \
    \                                               ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    \      |                                                                     \
    \                                               vowels_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed\n\
    /tmp/tmp6cpqelli.cpp:26:1: error: expected unqualified-id before \u2018}\u2019\
    \ token\n   26 | }\n      | ^\n/tmp/tmp6cpqelli.cpp:26:1: warning: no return statement\
    \ in function returning non-void [-Wreturn-type]\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// get_closest_vowel(\"yogurt\") ==> \"u\"\
    \n// get_closest_vowel(\"FULL\") ==> \"U\"\n// get_closest_vowel(\"quick\") ==>\
    \ \"\"\n// get_closest_vowel(\"ab\") ==> \"\"\nstd::string get_closest_vowel(std::string\
    \ word) {\n    // Write your code here\n    std::string vowels = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse = \"AEIOUaeiou\";\n    std::string vowels_reverse2\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse3 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse4 = \"AEIOUaeiou\";\n    std::string vowels_reverse5 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse6 = \"AEIOUaeiou\";\n    std::string vowels_reverse7\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse8 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse9 = \"AEIOUaeiou\";\n    std::string vowels_reverse10 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse11 = \"AEIOUaeiou\";\n    std::string vowels_reverse12\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse13 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse14 = \"AEIOUaeiou\";\n    std::string vowels_reverse15 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse16 = \"AEIOUaeiou\";\n    std::string vowels_reverse17\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse18 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse19 = \"AEIOUaeiou\";\n    std::string vowels_reverse20 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse21 = \"AEIOUaeiou\";\n    std::string vowels_reverse22\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse23 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse24 = \"AEIOUaeiou\";\n    std::string vowels_reverse25 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse26 = \"AEIOUaeiou\";\n    std::string vowels_reverse27\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse28 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse29 = \"AEIOUaeiou\";\n    std::string vowels_reverse30 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse31 = \"AEIOUaeiou\";\n    std::string vowels_reverse32\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse33 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse34 = \"AEIOUaeiou\";\n    std::string vowels_reverse35 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse\n}\nint main() {\n    auto candidate = get_closest_vowel;\n\
    \    assert(candidate((\"yogurt\")) == (\"u\"));\n    assert(candidate((\"full\"\
    )) == (\"u\"));\n    assert(candidate((\"easy\")) == (\"\"));\n    assert(candidate((\"\
    eAsy\")) == (\"\"));\n    assert(candidate((\"ali\")) == (\"\"));\n    assert(candidate((\"\
    bad\")) == (\"a\"));\n    assert(candidate((\"most\")) == (\"o\"));\n    assert(candidate((\"\
    ab\")) == (\"\"));\n    assert(candidate((\"ba\")) == (\"\"));\n    assert(candidate((\"\
    quick\")) == (\"\"));\n    assert(candidate((\"anime\")) == (\"i\"));\n    assert(candidate((\"\
    Asia\")) == (\"\"));\n    assert(candidate((\"Above\")) == (\"o\"));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpn2yusyff.cpp: In function \u2018std::string get_closest_vowel(std::string)\u2019\
    :\n/tmp/tmpn2yusyff.cpp:52:1: error: expected initializer before \u2018}\u2019\
    \ token\n   52 | }\n      | ^\n/tmp/tmpn2yusyff.cpp:52:1: warning: no return statement\
    \ in function returning non-void [-Wreturn-type]\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// get_closest_vowel(\"yogurt\") ==> \"u\"\
    \n// get_closest_vowel(\"FULL\") ==> \"U\"\n// get_closest_vowel(\"quick\") ==>\
    \ \"\"\n// get_closest_vowel(\"ab\") ==> \"\"\nstd::string get_closest_vowel(std::string\
    \ word) {\n    std::string vowels = \"AEIOUaeiou\";\n    std::string vowels_reverse\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_reverse = \"AEIOUaeiou\";\n\
    \    std::string vowels_reverse_back = \"AEIOUaeiou\";\n    std::string vowels_reverse_back_reverse\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_back_reverse_back = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse_back_reverse_back_reverse = \"AEIOUaeiou\";\n\
    \    std::string vowels_reverse_back_reverse_back_reverse_back = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse = \"\
    AEIOUaeiou\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\n\
    }\nint main() {\n    auto candidate = get_closest_vowel;\n    assert(candidate((\"\
    yogurt\")) == (\"u\"));\n    assert(candidate((\"full\")) == (\"u\"));\n    assert(candidate((\"\
    easy\")) == (\"\"));\n    assert(candidate((\"eAsy\")) == (\"\"));\n    assert(candidate((\"\
    ali\")) == (\"\"));\n    assert(candidate((\"bad\")) == (\"a\"));\n    assert(candidate((\"\
    most\")) == (\"o\"));\n    assert(candidate((\"ab\")) == (\"\"));\n    assert(candidate((\"\
    ba\")) == (\"\"));\n    assert(candidate((\"quick\")) == (\"\"));\n    assert(candidate((\"\
    anime\")) == (\"i\"));\n    assert(candidate((\"Asia\")) == (\"\"));\n    assert(candidate((\"\
    Above\")) == (\"o\"));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpg8swe35u.cpp: In function \u2018std::string get_closest_vowel(std::string)\u2019\
    :\n/tmp/tmpg8swe35u.cpp:32:17: error: redeclaration of \u2018std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\u2019\
    \n   32 |     std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\
    \ = \"AEIOUaeiou\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpg8swe35u.cpp:31:17: note: \u2018std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\u2019\
    \ previously declared here\n   31 |     std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\
    \ = \"AEIOUaeiou\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpg8swe35u.cpp:35:1: error: expected initializer before \u2018}\u2019 token\n\
    \   35 | }\n      | ^\n/tmp/tmpg8swe35u.cpp:35:1: warning: no return statement\
    \ in function returning non-void [-Wreturn-type]\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// get_closest_vowel(\"yogurt\") ==> \"u\"\
    \n// get_closest_vowel(\"FULL\") ==> \"U\"\n// get_closest_vowel(\"quick\") ==>\
    \ \"\"\n// get_closest_vowel(\"ab\") ==> \"\"\nstd::string get_closest_vowel(std::string\
    \ word) {\n    // Your code here\n    std::string vowels = \"aeiouAEIOU\";\n \
    \   std::string vowels_reverse = \"AEIOUaeiou\";\n    std::string vowels_reverse2\
    \ = \"aeiouAEIOU\";\n    std::string vowels_reverse3 = \"aeiouAEIOU\";\n    std::string\
    \ vowels_reverse4 = \"aeiouAEIOU\";\n    std::string vowels_reverse5 = \"aeiouAEIOU\"\
    ;\n    std::string vowels_reverse6 = \"aeiouAEIOU\";\n    std::string vowels_reverse7\
    \ = \"aeiouAEIOU\";\n    std::string vowels_reverse8 = \"aeiouAEIOU\";\n    std::string\
    \ vowels_reverse9 = \"aeiouAEIOU\";\n    std::string vowels_reverse10 = \"aeiouAEIOU\"\
    ;\n    std::string vowels_reverse11 = \"aeiouAEIOU\";\n    std::string vowels_reverse12\
    \ = \"aeiouAEIOU\";\n    std::string vowels_reverse13 = \"aeiouAEIOU\";\n    std::string\
    \ vowels_reverse14 = \"aeiouAEIOU\";\n    std::string vowels_reverse15 = \"aeiouAEIOU\"\
    ;\n    std::string vowels_reverse16 = \"aeiouAEIOU\";\n    std::string vowels_reverse17\
    \ = \"aeiouAEIOU\";\n    std::string vowels_reverse18 = \"aeiouAEIOU\";\n    std::string\
    \ vowels_reverse19 = \"aeiouAEIOU\";\n    std::string vowels_reverse20 = \"aeiouAEIOU\"\
    ;\n    std::string vowels_reverse21 = \"aeiouAEIOU\";\n    std::string vowels_reverse22\
    \ = \"aeiouAEIOU\";\n    std::string vowels_reverse23 = \"aeiouAEIOU\";\n    std::string\
    \ vowels_reverse24 = \"aeiouAEIOU\";\n    std::string vowels_reverse25 = \"aeiouAEIOU\"\
    ;\n    std::string vowels_reverse26 = \"aeiouAEIOU\";\n    std::string vowels_reverse27\
    \ = \"aeiouAEIOU\";\n    std::string vowels_reverse28 = \"aeiouAEIOU\";\n    std::string\
    \ vowels_reverse29 = \"aeiouAEIOU\";\n    std::string vowels_reverse30 = \"aeiouAEIOU\"\
    ;\n    std::string vowels_reverse31 = \"aeiouAEIOU\";\n    std::string vowels_reverse32\
    \ = \"aeiouAEIOU\";\n    std::string vowels_reverse33 = \"aeiouAEIOU\";\n    std::string\
    \ vowels_reverse34 = \"aeiouAEIOU\";\n    std::string vowels_reverse35 = \"aeiouAEIOU\"\
    ;\n    std::string vowels_reverse\n}\nint main() {\n    auto candidate = get_closest_vowel;\n\
    \    assert(candidate((\"yogurt\")) == (\"u\"));\n    assert(candidate((\"full\"\
    )) == (\"u\"));\n    assert(candidate((\"easy\")) == (\"\"));\n    assert(candidate((\"\
    eAsy\")) == (\"\"));\n    assert(candidate((\"ali\")) == (\"\"));\n    assert(candidate((\"\
    bad\")) == (\"a\"));\n    assert(candidate((\"most\")) == (\"o\"));\n    assert(candidate((\"\
    ab\")) == (\"\"));\n    assert(candidate((\"ba\")) == (\"\"));\n    assert(candidate((\"\
    quick\")) == (\"\"));\n    assert(candidate((\"anime\")) == (\"i\"));\n    assert(candidate((\"\
    Asia\")) == (\"\"));\n    assert(candidate((\"Above\")) == (\"o\"));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpflos7o7d.cpp: In function \u2018std::string get_closest_vowel(std::string)\u2019\
    :\n/tmp/tmpflos7o7d.cpp:52:1: error: expected initializer before \u2018}\u2019\
    \ token\n   52 | }\n      | ^\n/tmp/tmpflos7o7d.cpp:52:1: warning: no return statement\
    \ in function returning non-void [-Wreturn-type]\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// get_closest_vowel(\"yogurt\") ==> \"u\"\
    \n// get_closest_vowel(\"FULL\") ==> \"U\"\n// get_closest_vowel(\"quick\") ==>\
    \ \"\"\n// get_closest_vowel(\"ab\") ==> \"\"\nstd::string get_closest_vowel(std::string\
    \ word) {\n    std::string vowels = \"AEIOUaeiou\";\n    std::string vowels_reverse\
    \ = vowels.substr(0, vowels.size() - 1);\n    std::string vowels_reverse2 = vowels.substr(0,\
    \ vowels.size() - 2);\n    std::string vowels_reverse3 = vowels.substr(0, vowels.size()\
    \ - 3);\n    std::string vowels_reverse4 = vowels.substr(0, vowels.size() - 4);\n\
    \    std::string vowels_reverse5 = vowels.substr(0, vowels.size() - 5);\n    std::string\
    \ vowels_reverse6 = vowels.substr(0, vowels.size() - 6);\n    std::string vowels_reverse7\
    \ = vowels.substr(0, vowels.size() - 7);\n    std::string vowels_reverse8 = vowels.substr(0,\
    \ vowels.size() - 8);\n    std::string vowels_reverse9 = vowels.substr(0, vowels.size()\
    \ - 9);\n    std::string vowels_reverse10 = vowels.substr(0, vowels.size() - 10);\n\
    \    std::string vowels_reverse11 = vowels.substr(0, vowels.size() - 11);\n  \
    \  std::string vowels_reverse12 = vowels.substr(0, vowels.size() - 12);\n    std::string\
    \ vowels_reverse13 = vowels.substr(0, vowels.size() - 13);\n    std::string vowels_reverse14\
    \ = vowels.substr(0, vowels.size() - 14);\n    std::string vowels_reverse15 =\
    \ vowels.substr(0, vowels.size() - 15);\n    std::string vowels_reverse16 = vowels.substr(0,\
    \ vowels.size() - 16);\n    std::string vowels_reverse17 = vowels.substr(0, vowels.size()\
    \ - 17);\n    std::string vowels_reverse18 = vowels.substr(0, vowels.size() -\
    \ 18);\n    std::string vowels_reverse19 = vowels.substr(0, vowels.size() - 19);\n\
    \    std::string vowels_reverse20 = vowels.substr(0, vowels.size() - 20);\n  \
    \  std::string vowels_reverse21 = vowels.substr(0, vowels.size() - 21);\n    std::string\
    \ vowels_reverse22 = vowels.substr(0, vowels.size() - 22);\n    std::string vowels_reverse23\
    \ = vowels.substr(0, vowels.size() - 23);\n    std::string vowels_reverse24 =\
    \ vowels.substr(0, vowels.size() - 24);\n    std::string vowels_reverse25 = vowels.substr(0,\
    \ vowels.size() - 25);\n    std::string vowels_reverse26 = vowels.substr(0, vowels.size()\
    \ - 26);\n    std::string vowels_reverse27 = vowels.substr(0, vowels.size() -\
    \ 27);\n    std::string vowels_reverse28 = vowels.substr(0, vowels.size() - 28);\n\
    \    std::string vowels_reverse29 = vowels.substr(0, vowels.size() - 29);\n  \
    \  std::string vowels_reverse30 = vowels.substr(0, vowels.size() - 30);\n    std::string\
    \ vowels_reverse31 = vowels.substr(0, vowels.size() - 31);\n    std::string vowels_\n\
    }\nint main() {\n    auto candidate = get_closest_vowel;\n    assert(candidate((\"\
    yogurt\")) == (\"u\"));\n    assert(candidate((\"full\")) == (\"u\"));\n    assert(candidate((\"\
    easy\")) == (\"\"));\n    assert(candidate((\"eAsy\")) == (\"\"));\n    assert(candidate((\"\
    ali\")) == (\"\"));\n    assert(candidate((\"bad\")) == (\"a\"));\n    assert(candidate((\"\
    most\")) == (\"o\"));\n    assert(candidate((\"ab\")) == (\"\"));\n    assert(candidate((\"\
    ba\")) == (\"\"));\n    assert(candidate((\"quick\")) == (\"\"));\n    assert(candidate((\"\
    anime\")) == (\"i\"));\n    assert(candidate((\"Asia\")) == (\"\"));\n    assert(candidate((\"\
    Above\")) == (\"o\"));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp8m7_47jw.cpp: In function \u2018std::string get_closest_vowel(std::string)\u2019\
    :\n/tmp/tmp8m7_47jw.cpp:47:1: error: expected initializer before \u2018}\u2019\
    \ token\n   47 | }\n      | ^\n/tmp/tmp8m7_47jw.cpp:47:1: warning: no return statement\
    \ in function returning non-void [-Wreturn-type]\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// get_closest_vowel(\"yogurt\") ==> \"u\"\
    \n// get_closest_vowel(\"FULL\") ==> \"U\"\n// get_closest_vowel(\"quick\") ==>\
    \ \"\"\n// get_closest_vowel(\"ab\") ==> \"\"\nstd::string get_closest_vowel(std::string\
    \ word) {\n    std::string vowels = \"AEIOUaeiou\";\n    std::string vowels_reverse\
    \ = vowels;\n    std::reverse(vowels_reverse.begin(), vowels_reverse.end());\n\
    \    std::string vowels_reverse2 = vowels;\n    std::reverse(vowels_reverse2.begin(),\
    \ vowels_reverse2.end());\n    std::string vowels_reverse3 = vowels;\n    std::reverse(vowels_reverse3.begin(),\
    \ vowels_reverse3.end());\n    std::string vowels_reverse4 = vowels;\n    std::reverse(vowels_reverse4.begin(),\
    \ vowels_reverse4.end());\n    std::string vowels_reverse5 = vowels;\n    std::reverse(vowels_reverse5.begin(),\
    \ vowels_reverse5.end());\n    std::string vowels_reverse6 = vowels;\n    std::reverse(vowels_reverse6.begin(),\
    \ vowels_reverse6.end());\n    std::string vowels_reverse7 = vowels;\n    std::reverse(vowels_reverse7.begin(),\
    \ vowels_reverse7.end());\n    std::string vowels_reverse8 = vowels;\n    std::reverse(vowels_reverse8.begin(),\
    \ vowels_reverse8.end());\n    std::string vowels_reverse9 = vowels;\n    std::reverse(vowels_reverse9.begin(),\
    \ vowels_reverse9.end());\n    std::string vowels_reverse10 = vowels;\n    std::reverse(vowels_reverse10.begin(),\
    \ vowels_reverse10.end());\n    std::string vowels_reverse11 = vowels;\n    std::reverse(vowels_reverse11.begin(),\
    \ vowels_reverse11.end());\n    std::string vowels_reverse12 = vowels;\n    std::reverse(vowels_reverse12.begin(),\
    \ vowels_reverse12.end());\n    std::string vowels_reverse13 = vowels;\n    std::reverse(vowels_reverse13.begin(),\
    \ vowels_reverse13.end());\n    std::string vowels_reverse14 = vowels;\n    std::reverse(vowels_reverse14.begin(),\
    \ vowels_reverse14.end());\n    std::string vowels_reverse15 = vowels;\n    std::reverse(vowels_reverse15.begin(),\
    \ vowels_reverse15.end());\n    std::string vowels_reverse16 = vowels;\n    std::reverse(vowels_reverse16.begin(),\
    \ vowels_reverse16.end());\n    std::string vowels_reverse17 = vowels;\n    std::reverse(vowels_reverse17.begin(),\
    \ vowels_reverse17.end());\n    std::string vowels_reverse18 = vowels;\n    std::reverse(vowels_reverse18.begin(),\
    \ vowels_reverse18.end());\n    std::string vowels_reverse19 = vowels;\n    std::reverse(vowels_reverse19.begin(),\
    \ vowels_reverse19.end());\n    std::string vowels_reverse20 = vowels;\n    std::reverse(vowels_reverse20.begin(),\
    \ vowels_reverse20.end());\n    std::string vowels_reverse21 = vowels;\n    std::reverse(vowel\n\
    }\nint main() {\n    auto candidate = get_closest_vowel;\n    assert(candidate((\"\
    yogurt\")) == (\"u\"));\n    assert(candidate((\"full\")) == (\"u\"));\n    assert(candidate((\"\
    easy\")) == (\"\"));\n    assert(candidate((\"eAsy\")) == (\"\"));\n    assert(candidate((\"\
    ali\")) == (\"\"));\n    assert(candidate((\"bad\")) == (\"a\"));\n    assert(candidate((\"\
    most\")) == (\"o\"));\n    assert(candidate((\"ab\")) == (\"\"));\n    assert(candidate((\"\
    ba\")) == (\"\"));\n    assert(candidate((\"quick\")) == (\"\"));\n    assert(candidate((\"\
    anime\")) == (\"i\"));\n    assert(candidate((\"Asia\")) == (\"\"));\n    assert(candidate((\"\
    Above\")) == (\"o\"));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp6yexcy1u.cpp: In function \u2018std::string get_closest_vowel(std::string)\u2019\
    :\n/tmp/tmp6yexcy1u.cpp:56:18: error: \u2018vowel\u2019 was not declared in this\
    \ scope; did you mean \u2018vowels\u2019?\n   56 |     std::reverse(vowel\n  \
    \    |                  ^~~~~\n      |                  vowels\n/tmp/tmp6yexcy1u.cpp:57:1:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n\
    \   57 | }\n      | ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// get_closest_vowel(\"yogurt\") ==> \"u\"\
    \n// get_closest_vowel(\"FULL\") ==> \"U\"\n// get_closest_vowel(\"quick\") ==>\
    \ \"\"\n// get_closest_vowel(\"ab\") ==> \"\"\nstd::string get_closest_vowel(std::string\
    \ word) {\n    std::string vowels = \"AEIOUaeiou\";\n    std::string vowels_reverse\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_reverse = \"AEIOUaeiou\";\n\
    \    std::string vowels_reverse_reverse_reverse = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse_reverse_reverse_reverse = \"AEIOUaeiou\";\n    std::string vowels_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_reverse\n}\nint main() {\n\
    \    auto candidate = get_closest_vowel;\n    assert(candidate((\"yogurt\")) ==\
    \ (\"u\"));\n    assert(candidate((\"full\")) == (\"u\"));\n    assert(candidate((\"\
    easy\")) == (\"\"));\n    assert(candidate((\"eAsy\")) == (\"\"));\n    assert(candidate((\"\
    ali\")) == (\"\"));\n    assert(candidate((\"bad\")) == (\"a\"));\n    assert(candidate((\"\
    most\")) == (\"o\"));\n    assert(candidate((\"ab\")) == (\"\"));\n    assert(candidate((\"\
    ba\")) == (\"\"));\n    assert(candidate((\"quick\")) == (\"\"));\n    assert(candidate((\"\
    anime\")) == (\"i\"));\n    assert(candidate((\"Asia\")) == (\"\"));\n    assert(candidate((\"\
    Above\")) == (\"o\"));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpqjr2h2n1.cpp: In function \u2018std::string get_closest_vowel(std::string)\u2019\
    :\n/tmp/tmpqjr2h2n1.cpp:22:17: error: redeclaration of \u2018std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse\u2019\
    \n   22 |     std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpqjr2h2n1.cpp:21:17: note: \u2018std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse\u2019\
    \ previously declared here\n   21 |     std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpqjr2h2n1.cpp:23:17: error: redeclaration of \u2018std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse\u2019\
    \n   23 |     std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpqjr2h2n1.cpp:21:17: note: \u2018std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse\u2019\
    \ previously declared here\n   21 |     std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpqjr2h2n1.cpp:25:17: error: redeclaration of \u2018std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\u2019\
    \n   25 |     std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpqjr2h2n1.cpp:24:17: note: \u2018std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\u2019\
    \ previously declared here\n   24 |     std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpqjr2h2n1.cpp:26:17: error: redeclaration of \u2018std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\u2019\
    \n   26 |     std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpqjr2h2n1.cpp:24:17: note: \u2018std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\u2019\
    \ previously declared here\n   24 |     std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpqjr2h2n1.cpp:27:17: error: redeclaration of \u2018std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\u2019\
    \n   27 |     std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpqjr2h2n1.cpp:24:17: note: \u2018std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\u2019\
    \ previously declared here\n   24 |     std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpqjr2h2n1.cpp:29:17: error: redeclaration of \u2018std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\u2019\
    \n   29 |     std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpqjr2h2n1.cpp:28:17: note: \u2018std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\u2019\
    \ previously declared here\n   28 |     std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpqjr2h2n1.cpp:30:17: error: redeclaration of \u2018std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\u2019\
    \n   30 |     std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpqjr2h2n1.cpp:28:17: note: \u2018std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\u2019\
    \ previously declared here\n   28 |     std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpqjr2h2n1.cpp:31:17: error: redeclaration of \u2018std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\u2019\
    \n   31 |     std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpqjr2h2n1.cpp:28:17: note: \u2018std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\u2019\
    \ previously declared here\n   28 |     std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpqjr2h2n1.cpp:32:17: error: redeclaration of \u2018std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\u2019\
    \n   32 |     std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpqjr2h2n1.cpp:28:17: note: \u2018std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\u2019\
    \ previously declared here\n   28 |     std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpqjr2h2n1.cpp:33:17: error: redeclaration of \u2018std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\u2019\
    \n   33 |     std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpqjr2h2n1.cpp:28:17: note: \u2018std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\u2019\
    \ previously declared here\n   28 |     std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpqjr2h2n1.cpp:34:17: error: redeclaration of \u2018std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\u2019\
    \n   34 |     std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpqjr2h2n1.cpp:28:17: note: \u2018std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\u2019\
    \ previously declared here\n   28 |     std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpqjr2h2n1.cpp:36:1: error: expected initializer before \u2018}\u2019 token\n\
    \   36 | }\n      | ^\n/tmp/tmpqjr2h2n1.cpp:36:1: warning: no return statement\
    \ in function returning non-void [-Wreturn-type]\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// get_closest_vowel(\"yogurt\") ==> \"u\"\
    \n// get_closest_vowel(\"FULL\") ==> \"U\"\n// get_closest_vowel(\"quick\") ==>\
    \ \"\"\n// get_closest_vowel(\"ab\") ==> \"\"\nstd::string get_closest_vowel(std::string\
    \ word) {\n    std::string vowels = \"AEIOUaeiou\";\n    std::string vowels_reversed\
    \ = vowels.substr(0, vowels.size() - 1);\n    std::string vowels_reversed_upper\
    \ = vowels_reversed.toupper();\n    std::string vowels_reversed_lower = vowels_reversed.tolower();\n\
    \    std::string vowels_reversed_upper_reversed = vowels_reversed_upper.substr(0,\
    \ vowels_reversed_upper.size() - 1);\n    std::string vowels_reversed_lower_reversed\
    \ = vowels_reversed_lower.substr(0, vowels_reversed_lower.size() - 1);\n    std::string\
    \ vowels_reversed_upper_reversed_reversed = vowels_reversed_upper_reversed.substr(0,\
    \ vowels_reversed_upper_reversed.size() - 1);\n    std::string vowels_reversed_lower_reversed_reversed\
    \ = vowels_reversed_lower_reversed.substr(0, vowels_reversed_lower_reversed.size()\
    \ - 1);\n    std::string vowels_reversed_upper_reversed_reversed_reversed = vowels_reversed_upper_reversed_reversed.substr(0,\
    \ vowels_reversed_upper_reversed_reversed.size() - 1);\n    std::string vowels_reversed_lower_reversed_reversed_reversed\
    \ = vowels_reversed_lower_reversed_reversed.substr(0, vowels_reversed_lower_reversed_reversed.size()\
    \ - 1);\n    std::string vowels_reversed_upper_reversed_reversed_reversed_reversed\
    \ = vowels_reversed_upper_reversed_reversed_reversed.substr(0, vowels_reversed_upper_reversed_reversed_reversed.size()\
    \ - 1);\n    std::string vowels_reversed_lower_reversed_reversed_reversed_reversed\
    \ = vowels_reversed_lower_reversed_reversed_reversed.substr(0, vowels_reversed_lower_reversed_reversed_reversed.size()\
    \ - 1);\n    std::string vowels_reversed_upper_reversed_reversed_reversed_reversed_reversed\
    \ = vowels_reversed_upper_reversed_reversed_reversed_reversed.substr(0, vowels_reversed_upper_reversed_reversed_reversed_reversed.size()\
    \ - 1);\n    std::string vowels_reversed_lower_reversed_reversed_reversed_reversed_reversed\
    \ = vowels_reversed_lower_reversed_reversed_reversed_reversed_reversed.substr(0,\
    \ vowels_reversed_lower_reversed_reversed_reversed_reversed_reversed.size() -\
    \ 1);\n    std::string vowels_reversed_upper_reversed_reversed_reversed_reversed_reversed_reversed\
    \ = vowels_reversed_upper_reversed_reversed_reversed_reversed_reversed_reversed.substr(0,\
    \ vowels_reversed_upper_reversed_reversed_reversed_reversed_reversed_reversed.size()\
    \ - 1);\n    std::string \n}\nint main() {\n    auto candidate = get_closest_vowel;\n\
    \    assert(candidate((\"yogurt\")) == (\"u\"));\n    assert(candidate((\"full\"\
    )) == (\"u\"));\n    assert(candidate((\"easy\")) == (\"\"));\n    assert(candidate((\"\
    eAsy\")) == (\"\"));\n    assert(candidate((\"ali\")) == (\"\"));\n    assert(candidate((\"\
    bad\")) == (\"a\"));\n    assert(candidate((\"most\")) == (\"o\"));\n    assert(candidate((\"\
    ab\")) == (\"\"));\n    assert(candidate((\"ba\")) == (\"\"));\n    assert(candidate((\"\
    quick\")) == (\"\"));\n    assert(candidate((\"anime\")) == (\"i\"));\n    assert(candidate((\"\
    Asia\")) == (\"\"));\n    assert(candidate((\"Above\")) == (\"o\"));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp46_vsfy7.cpp: In function \u2018std::string get_closest_vowel(std::string)\u2019\
    :\n/tmp/tmp46_vsfy7.cpp:16:57: error: \u2018std::string\u2019 {aka \u2018class\
    \ std::__cxx11::basic_string<char>\u2019} has no member named \u2018toupper\u2019\
    \n   16 |     std::string vowels_reversed_upper = vowels_reversed.toupper();\n\
    \      |                                                         ^~~~~~~\n/tmp/tmp46_vsfy7.cpp:17:57:\
    \ error: \u2018std::string\u2019 {aka \u2018class std::__cxx11::basic_string<char>\u2019\
    } has no member named \u2018tolower\u2019\n   17 |     std::string vowels_reversed_lower\
    \ = vowels_reversed.tolower();\n      |                                      \
    \                   ^~~~~~~\n/tmp/tmp46_vsfy7.cpp:30:1: error: expected unqualified-id\
    \ before \u2018}\u2019 token\n   30 | }\n      | ^\n/tmp/tmp46_vsfy7.cpp:30:1:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// get_closest_vowel(\"yogurt\") ==> \"u\"\
    \n// get_closest_vowel(\"FULL\") ==> \"U\"\n// get_closest_vowel(\"quick\") ==>\
    \ \"\"\n// get_closest_vowel(\"ab\") ==> \"\"\nstd::string get_closest_vowel(std::string\
    \ word) {\n    std::string vowels = \"aeiouAEIOU\";\n    std::string vowels_reverse\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse2 = \"aeiouAEIOU\";\n    std::string\
    \ vowels_reverse3 = \"aeiouAEIOU\";\n    std::string vowels_reverse4 = \"aeiouAEIOU\"\
    ;\n    std::string vowels_reverse5 = \"aeiouAEIOU\";\n    std::string vowels_reverse6\
    \ = \"aeiouAEIOU\";\n    std::string vowels_reverse7 = \"aeiouAEIOU\";\n    std::string\
    \ vowels_reverse8 = \"aeiouAEIOU\";\n    std::string vowels_reverse9 = \"aeiouAEIOU\"\
    ;\n    std::string vowels_reverse10 = \"aeiouAEIOU\";\n    std::string vowels_reverse11\
    \ = \"aeiouAEIOU\";\n    std::string vowels_reverse12 = \"aeiouAEIOU\";\n    std::string\
    \ vowels_reverse13 = \"aeiouAEIOU\";\n    std::string vowels_reverse14 = \"aeiouAEIOU\"\
    ;\n    std::string vowels_reverse15 = \"aeiouAEIOU\";\n    std::string vowels_reverse16\
    \ = \"aeiouAEIOU\";\n    std::string vowels_reverse17 = \"aeiouAEIOU\";\n    std::string\
    \ vowels_reverse18 = \"aeiouAEIOU\";\n    std::string vowels_reverse19 = \"aeiouAEIOU\"\
    ;\n    std::string vowels_reverse20 = \"aeiouAEIOU\";\n    std::string vowels_reverse21\
    \ = \"aeiouAEIOU\";\n    std::string vowels_reverse22 = \"aeiouAEIOU\";\n    std::string\
    \ vowels_reverse23 = \"aeiouAEIOU\";\n    std::string vowels_reverse24 = \"aeiouAEIOU\"\
    ;\n    std::string vowels_reverse25 = \"aeiouAEIOU\";\n    std::string vowels_reverse26\
    \ = \"aeiouAEIOU\";\n    std::string vowels_reverse27 = \"aeiouAEIOU\";\n    std::string\
    \ vowels_reverse28 = \"aeiouAEIOU\";\n    std::string vowels_reverse29 = \"aeiouAEIOU\"\
    ;\n    std::string vowels_reverse30 = \"aeiouAEIOU\";\n    std::string vowels_reverse31\
    \ = \"aeiouAEIOU\";\n    std::string vowels_reverse32 = \"aeiouAEIOU\";\n    std::string\
    \ vowels_reverse33 = \"aeiouAEIOU\";\n    std::string vowels_reverse34 = \"aeiouAEIOU\"\
    ;\n    std::string vowels_reverse35 = \"aeiouAEIOU\";\n    std::string vowels_reverse36\
    \ = \"aeiouAE\n}\nint main() {\n    auto candidate = get_closest_vowel;\n    assert(candidate((\"\
    yogurt\")) == (\"u\"));\n    assert(candidate((\"full\")) == (\"u\"));\n    assert(candidate((\"\
    easy\")) == (\"\"));\n    assert(candidate((\"eAsy\")) == (\"\"));\n    assert(candidate((\"\
    ali\")) == (\"\"));\n    assert(candidate((\"bad\")) == (\"a\"));\n    assert(candidate((\"\
    most\")) == (\"o\"));\n    assert(candidate((\"ab\")) == (\"\"));\n    assert(candidate((\"\
    ba\")) == (\"\"));\n    assert(candidate((\"quick\")) == (\"\"));\n    assert(candidate((\"\
    anime\")) == (\"i\"));\n    assert(candidate((\"Asia\")) == (\"\"));\n    assert(candidate((\"\
    Above\")) == (\"o\"));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpngq74ihu.cpp:50:36: warning: missing terminating \" character\n\
    \   50 |     std::string vowels_reverse36 = \"aeiouAE\n      |               \
    \                     ^\n/tmp/tmpngq74ihu.cpp:50:36: error: missing terminating\
    \ \" character\n   50 |     std::string vowels_reverse36 = \"aeiouAE\n      |\
    \                                    ^~~~~~~~\n/tmp/tmpngq74ihu.cpp: In function\
    \ \u2018std::string get_closest_vowel(std::string)\u2019:\n/tmp/tmpngq74ihu.cpp:51:1:\
    \ error: expected primary-expression before \u2018}\u2019 token\n   51 | }\n \
    \     | ^\n/tmp/tmpngq74ihu.cpp:51:1: error: expected \u2018,\u2019 or \u2018\
    ;\u2019 before \u2018}\u2019 token\n/tmp/tmpngq74ihu.cpp:51:1: warning: no return\
    \ statement in function returning non-void [-Wreturn-type]\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// get_closest_vowel(\"yogurt\") ==> \"u\"\
    \n// get_closest_vowel(\"FULL\") ==> \"U\"\n// get_closest_vowel(\"quick\") ==>\
    \ \"\"\n// get_closest_vowel(\"ab\") ==> \"\"\nstd::string get_closest_vowel(std::string\
    \ word) {\n    std::string vowels = \"AEIOUaeiou\";\n    std::string vowels_reverse\
    \ = vowels.substr(0, vowels.size() - 1);\n    std::string vowels_reverse2 = vowels_reverse.substr(0,\
    \ vowels_reverse.size() - 1);\n    std::string vowels_reverse3 = vowels_reverse2.substr(0,\
    \ vowels_reverse2.size() - 1);\n    std::string vowels_reverse4 = vowels_reverse3.substr(0,\
    \ vowels_reverse3.size() - 1);\n    std::string vowels_reverse5 = vowels_reverse4.substr(0,\
    \ vowels_reverse4.size() - 1);\n    std::string vowels_reverse6 = vowels_reverse5.substr(0,\
    \ vowels_reverse5.size() - 1);\n    std::string vowels_reverse7 = vowels_reverse6.substr(0,\
    \ vowels_reverse6.size() - 1);\n    std::string vowels_reverse8 = vowels_reverse7.substr(0,\
    \ vowels_reverse7.size() - 1);\n    std::string vowels_reverse9 = vowels_reverse8.substr(0,\
    \ vowels_reverse8.size() - 1);\n    std::string vowels_reverse10 = vowels_reverse9.substr(0,\
    \ vowels_reverse9.size() - 1);\n    std::string vowels_reverse11 = vowels_reverse10.substr(0,\
    \ vowels_reverse10.size() - 1);\n    std::string vowels_reverse12 = vowels_reverse11.substr(0,\
    \ vowels_reverse11.size() - 1);\n    std::string vowels_reverse13 = vowels_reverse12.substr(0,\
    \ vowels_reverse12.size() - 1);\n    std::string vowels_reverse14 = vowels_reverse13.substr(0,\
    \ vowels_reverse13.size() - 1);\n    std::string vowels_reverse15 = vowels_reverse14.substr(0,\
    \ vowels_reverse14.size() - 1);\n    std::string vowels_reverse16 = vowels_reverse15.substr(0,\
    \ vowels_reverse15.size() - 1);\n    std::string vowels_reverse17 = vowels_reverse16.substr(0,\
    \ vowels_reverse16.size() - 1);\n    std::string vowels_reverse18 = vowels_reverse17.substr(0,\
    \ vowels_reverse17.size() - 1);\n    std::string vowels_reverse19 = vowels_reverse18.substr(0,\
    \ vowels_reverse18.size() - 1);\n    std::string vowels_reverse20 = vowels_reverse19.substr(0,\
    \ vowels_reverse19.size() - 1);\n    std::string vowels_reverse21 = vowels_reverse20.substr(0,\
    \ vowels_reverse20.size() - 1);\n    std::string vowels_reverse22 = vowels_reverse21.substr(0,\
    \ vowels_reverse21.size() - 1);\n    std::string vowels_reverse23 = vowels_reverse22.substr(0,\
    \ vowels_reverse22.size() - 1);\n    std::string vowels_reverse24 = vowels_reverse23.substr(0,\
    \ vowels_reverse23.size() - 1);\n    std::string vowels_reverse25 = vowels_reverse24.substr(0,\
    \ vowels_\n}\nint main() {\n    auto candidate = get_closest_vowel;\n    assert(candidate((\"\
    yogurt\")) == (\"u\"));\n    assert(candidate((\"full\")) == (\"u\"));\n    assert(candidate((\"\
    easy\")) == (\"\"));\n    assert(candidate((\"eAsy\")) == (\"\"));\n    assert(candidate((\"\
    ali\")) == (\"\"));\n    assert(candidate((\"bad\")) == (\"a\"));\n    assert(candidate((\"\
    most\")) == (\"o\"));\n    assert(candidate((\"ab\")) == (\"\"));\n    assert(candidate((\"\
    ba\")) == (\"\"));\n    assert(candidate((\"quick\")) == (\"\"));\n    assert(candidate((\"\
    anime\")) == (\"i\"));\n    assert(candidate((\"Asia\")) == (\"\"));\n    assert(candidate((\"\
    Above\")) == (\"o\"));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpw8c7zbe3.cpp: In function \u2018std::string get_closest_vowel(std::string)\u2019\
    :\n/tmp/tmpw8c7zbe3.cpp:39:63: error: \u2018vowels_\u2019 was not declared in\
    \ this scope; did you mean \u2018vowels\u2019?\n   39 |     std::string vowels_reverse25\
    \ = vowels_reverse24.substr(0, vowels_\n      |                              \
    \                                 ^~~~~~~\n      |                           \
    \                                    vowels\n/tmp/tmpw8c7zbe3.cpp:40:1: error:\
    \ expected \u2018,\u2019 or \u2018;\u2019 before \u2018}\u2019 token\n   40 |\
    \ }\n      | ^\n/tmp/tmpw8c7zbe3.cpp:40:1: warning: no return statement in function\
    \ returning non-void [-Wreturn-type]\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// get_closest_vowel(\"yogurt\") ==> \"u\"\
    \n// get_closest_vowel(\"FULL\") ==> \"U\"\n// get_closest_vowel(\"quick\") ==>\
    \ \"\"\n// get_closest_vowel(\"ab\") ==> \"\"\nstd::string get_closest_vowel(std::string\
    \ word) {\n    std::string vowels = \"AEIOUaeiou\";\n    std::string vowels_reverse\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse2 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse3 = \"AEIOUaeiou\";\n    std::string vowels_reverse4 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse5 = \"AEIOUaeiou\";\n    std::string vowels_reverse6\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse7 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse8 = \"AEIOUaeiou\";\n    std::string vowels_reverse9 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse10 = \"AEIOUaeiou\";\n    std::string vowels_reverse11\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse12 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse13 = \"AEIOUaeiou\";\n    std::string vowels_reverse14 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse15 = \"AEIOUaeiou\";\n    std::string vowels_reverse16\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse17 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse18 = \"AEIOUaeiou\";\n    std::string vowels_reverse19 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse20 = \"AEIOUaeiou\";\n    std::string vowels_reverse21\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse22 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse23 = \"AEIOUaeiou\";\n    std::string vowels_reverse24 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse25 = \"AEIOUaeiou\";\n    std::string vowels_reverse26\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse27 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse28 = \"AEIOUaeiou\";\n    std::string vowels_reverse29 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse30 = \"AEIOUaeiou\";\n    std::string vowels_reverse31\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse32 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse33 = \"AEIOUaeiou\";\n    std::string vowels_reverse34 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse35 = \"AEIOUaeiou\";\n    std::string vowels_reverse36\
    \ = \"AEIOU\n}\nint main() {\n    auto candidate = get_closest_vowel;\n    assert(candidate((\"\
    yogurt\")) == (\"u\"));\n    assert(candidate((\"full\")) == (\"u\"));\n    assert(candidate((\"\
    easy\")) == (\"\"));\n    assert(candidate((\"eAsy\")) == (\"\"));\n    assert(candidate((\"\
    ali\")) == (\"\"));\n    assert(candidate((\"bad\")) == (\"a\"));\n    assert(candidate((\"\
    most\")) == (\"o\"));\n    assert(candidate((\"ab\")) == (\"\"));\n    assert(candidate((\"\
    ba\")) == (\"\"));\n    assert(candidate((\"quick\")) == (\"\"));\n    assert(candidate((\"\
    anime\")) == (\"i\"));\n    assert(candidate((\"Asia\")) == (\"\"));\n    assert(candidate((\"\
    Above\")) == (\"o\"));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpfjuw0r3z.cpp:50:36: warning: missing terminating \" character\n\
    \   50 |     std::string vowels_reverse36 = \"AEIOU\n      |                 \
    \                   ^\n/tmp/tmpfjuw0r3z.cpp:50:36: error: missing terminating\
    \ \" character\n   50 |     std::string vowels_reverse36 = \"AEIOU\n      |  \
    \                                  ^~~~~~\n/tmp/tmpfjuw0r3z.cpp: In function \u2018\
    std::string get_closest_vowel(std::string)\u2019:\n/tmp/tmpfjuw0r3z.cpp:51:1:\
    \ error: expected primary-expression before \u2018}\u2019 token\n   51 | }\n \
    \     | ^\n/tmp/tmpfjuw0r3z.cpp:51:1: error: expected \u2018,\u2019 or \u2018\
    ;\u2019 before \u2018}\u2019 token\n/tmp/tmpfjuw0r3z.cpp:51:1: warning: no return\
    \ statement in function returning non-void [-Wreturn-type]\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// get_closest_vowel(\"yogurt\") ==> \"u\"\
    \n// get_closest_vowel(\"FULL\") ==> \"U\"\n// get_closest_vowel(\"quick\") ==>\
    \ \"\"\n// get_closest_vowel(\"ab\") ==> \"\"\nstd::string get_closest_vowel(std::string\
    \ word) {\n    std::string vowels = \"aeiouAEIOU\";\n    std::string vowels_lower\
    \ = \"aeiouaieouaeiou\";\n    std::string vowels_upper = \"AEIOUaeiouAEIOU\";\n\
    \    std::string vowels_upper2 = \"AEIOUaeiouAEIOU\";\n    std::string vowels_upper3\
    \ = \"AEIOUaeiouAEIOU\";\n    std::string vowels_upper4 = \"AEIOUaeiouAEIOU\"\
    ;\n    std::string vowels_upper5 = \"AEIOUaeiouAEIOU\";\n    std::string vowels_upper6\
    \ = \"AEIOUaeiouAEIOU\";\n    std::string vowels_upper7 = \"AEIOUaeiouAEIOU\"\
    ;\n    std::string vowels_upper8 = \"AEIOUaeiouAEIOU\";\n    std::string vowels_upper9\
    \ = \"AEIOUaeiouAEIOU\";\n    std::string vowels_upper10 = \"AEIOUaeiouAEIOU\"\
    ;\n    std::string vowels_upper11 = \"AEIOUaeiouAEIOU\";\n    std::string vowels_upper12\
    \ = \"AEIOUaeiouAEIOU\";\n    std::string vowels_upper13 = \"AEIOUaeiouAEIOU\"\
    ;\n    std::string vowels_upper14 = \"AEIOUaeiouAEIOU\";\n    std::string vowels_upper15\
    \ = \"AEIOUaeiouAEIOU\";\n    std::string vowels_upper16 = \"AEIOUaeiouAEIOU\"\
    ;\n    std::string vowels_upper17 = \"AEIOUaeiouAEIOU\";\n    std::string vowels_upper18\
    \ = \"AEIOUaeiouAEIOU\";\n    std::string vowels_upper19 = \"AEIOUaeiouAEIOU\"\
    ;\n    std::string vowels_upper20 = \"AEIOUaeiouAEIOU\";\n    std::string vowels_upper21\
    \ = \"AEIOUaeiouAEIOU\";\n    std::string vowels_upper22 = \"AEIOUaeiouAEIOU\"\
    ;\n    std::string vowels_upper23 = \"AEIOUaeiouAEIOU\";\n    std::string vowels_upper24\
    \ = \"AEIOUaeiouAEIOU\";\n    std::string vowels_upper25 = \"AEIOUaeiouAEIOU\"\
    ;\n    std::string vowels_upper26 = \"AEIOUaeiouAEIOU\";\n    std::string vowels_upper27\
    \ = \"AEIOUaeiouAEIOU\";\n    std::string vowels_upper28 = \"AEIOUaeiouAEIOU\"\
    ;\n    std::string vowels_upper29 = \"AEIOU\n}\nint main() {\n    auto candidate\
    \ = get_closest_vowel;\n    assert(candidate((\"yogurt\")) == (\"u\"));\n    assert(candidate((\"\
    full\")) == (\"u\"));\n    assert(candidate((\"easy\")) == (\"\"));\n    assert(candidate((\"\
    eAsy\")) == (\"\"));\n    assert(candidate((\"ali\")) == (\"\"));\n    assert(candidate((\"\
    bad\")) == (\"a\"));\n    assert(candidate((\"most\")) == (\"o\"));\n    assert(candidate((\"\
    ab\")) == (\"\"));\n    assert(candidate((\"ba\")) == (\"\"));\n    assert(candidate((\"\
    quick\")) == (\"\"));\n    assert(candidate((\"anime\")) == (\"i\"));\n    assert(candidate((\"\
    Asia\")) == (\"\"));\n    assert(candidate((\"Above\")) == (\"o\"));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp7nrd0pbx.cpp:44:34: warning: missing terminating \" character\n\
    \   44 |     std::string vowels_upper29 = \"AEIOU\n      |                   \
    \               ^\n/tmp/tmp7nrd0pbx.cpp:44:34: error: missing terminating \" character\n\
    \   44 |     std::string vowels_upper29 = \"AEIOU\n      |                   \
    \               ^~~~~~\n/tmp/tmp7nrd0pbx.cpp: In function \u2018std::string get_closest_vowel(std::string)\u2019\
    :\n/tmp/tmp7nrd0pbx.cpp:45:1: error: expected primary-expression before \u2018\
    }\u2019 token\n   45 | }\n      | ^\n/tmp/tmp7nrd0pbx.cpp:45:1: error: expected\
    \ \u2018,\u2019 or \u2018;\u2019 before \u2018}\u2019 token\n/tmp/tmp7nrd0pbx.cpp:45:1:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// get_closest_vowel(\"yogurt\") ==> \"u\"\
    \n// get_closest_vowel(\"FULL\") ==> \"U\"\n// get_closest_vowel(\"quick\") ==>\
    \ \"\"\n// get_closest_vowel(\"ab\") ==> \"\"\nstd::string get_closest_vowel(std::string\
    \ word) {\n    std::string vowels = \"AEIOUaeiou\";\n    std::string vowels_reverse\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse2 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse3 = \"AEIOUaeiou\";\n    std::string vowels_reverse4 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse5 = \"AEIOUaeiou\";\n    std::string vowels_reverse6\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse7 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse8 = \"AEIOUaeiou\";\n    std::string vowels_reverse9 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse10 = \"AEIOUaeiou\";\n    std::string vowels_reverse11\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse12 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse13 = \"AEIOUaeiou\";\n    std::string vowels_reverse14 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse15 = \"AEIOUaeiou\";\n    std::string vowels_reverse16\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse17 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse18 = \"AEIOUaeiou\";\n    std::string vowels_reverse19 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse20 = \"AEIOUaeiou\";\n    std::string vowels_reverse21\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse22 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse23 = \"AEIOUaeiou\";\n    std::string vowels_reverse24 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse25 = \"AEIOUaeiou\";\n    std::string vowels_reverse26\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse27 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse28 = \"AEIOUaeiou\";\n    std::string vowels_reverse29 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse30 = \"AEIOUaeiou\";\n    std::string vowels_reverse31\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse32 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse33 = \"AEIOUaeiou\";\n    std::string vowels_reverse34 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse35 = \"AEIOUaeiou\";\n    std::string vowels_reverse36\
    \ = \"AEIOU\n}\nint main() {\n    auto candidate = get_closest_vowel;\n    assert(candidate((\"\
    yogurt\")) == (\"u\"));\n    assert(candidate((\"full\")) == (\"u\"));\n    assert(candidate((\"\
    easy\")) == (\"\"));\n    assert(candidate((\"eAsy\")) == (\"\"));\n    assert(candidate((\"\
    ali\")) == (\"\"));\n    assert(candidate((\"bad\")) == (\"a\"));\n    assert(candidate((\"\
    most\")) == (\"o\"));\n    assert(candidate((\"ab\")) == (\"\"));\n    assert(candidate((\"\
    ba\")) == (\"\"));\n    assert(candidate((\"quick\")) == (\"\"));\n    assert(candidate((\"\
    anime\")) == (\"i\"));\n    assert(candidate((\"Asia\")) == (\"\"));\n    assert(candidate((\"\
    Above\")) == (\"o\"));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp3u8s9jpb.cpp:50:36: warning: missing terminating \" character\n\
    \   50 |     std::string vowels_reverse36 = \"AEIOU\n      |                 \
    \                   ^\n/tmp/tmp3u8s9jpb.cpp:50:36: error: missing terminating\
    \ \" character\n   50 |     std::string vowels_reverse36 = \"AEIOU\n      |  \
    \                                  ^~~~~~\n/tmp/tmp3u8s9jpb.cpp: In function \u2018\
    std::string get_closest_vowel(std::string)\u2019:\n/tmp/tmp3u8s9jpb.cpp:51:1:\
    \ error: expected primary-expression before \u2018}\u2019 token\n   51 | }\n \
    \     | ^\n/tmp/tmp3u8s9jpb.cpp:51:1: error: expected \u2018,\u2019 or \u2018\
    ;\u2019 before \u2018}\u2019 token\n/tmp/tmp3u8s9jpb.cpp:51:1: warning: no return\
    \ statement in function returning non-void [-Wreturn-type]\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// get_closest_vowel(\"yogurt\") ==> \"u\"\
    \n// get_closest_vowel(\"FULL\") ==> \"U\"\n// get_closest_vowel(\"quick\") ==>\
    \ \"\"\n// get_closest_vowel(\"ab\") ==> \"\"\nstd::string get_closest_vowel(std::string\
    \ word) {\n    std::string vowels = \"AEIOUaeiou\";\n    std::string vowels_reversed\
    \ = vowels.substr(0, vowels.size() - 1);\n    std::string vowels_reversed_reversed\
    \ = vowels_reversed.substr(0, vowels_reversed.size() - 1);\n    std::string vowels_reversed_reversed_reversed\
    \ = vowels_reversed_reversed.substr(0, vowels_reversed_reversed.size() - 1);\n\
    \    std::string vowels_reversed_reversed_reversed_reversed = vowels_reversed_reversed_reversed.substr(0,\
    \ vowels_reversed_reversed_reversed.size() - 1);\n    std::string vowels_reversed_reversed_reversed_reversed_reversed\
    \ = vowels_reversed_reversed_reversed_reversed.substr(0, vowels_reversed_reversed_reversed_reversed.size()\
    \ - 1);\n    std::string vowels_reversed_reversed_reversed_reversed_reversed_reversed\
    \ = vowels_reversed_reversed_reversed_reversed_reversed.substr(0, vowels_reversed_reversed_reversed_reversed_reversed.size()\
    \ - 1);\n    std::string vowels_reversed_reversed_reversed_reversed_reversed_reversed_reversed\
    \ = vowels_reversed_reversed_reversed_reversed_reversed_reversed.substr(0, vowels_reversed_reversed_reversed_reversed_reversed_reversed.size()\
    \ - 1);\n    std::string vowels_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed\
    \ = vowels_reversed_reversed_reversed_reversed_reversed_reversed_reversed.substr(0,\
    \ vowels_reversed_reversed_reversed_reversed_reversed_reversed_reversed.size()\
    \ - 1);\n    std::string vowels_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed\
    \ = vowels_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed.substr(0,\
    \ vowels_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed.size()\
    \ - 1);\n    std::string vowels_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed\
    \ = vowels_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed.substr(0,\
    \ vowels_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed.size()\
    \ - 1);\n    std::string vowels_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed\
    \ = vowels_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed.substr(0,\
    \ vowels_reversed_reversed_reversed_reversed_\n}\nint main() {\n    auto candidate\
    \ = get_closest_vowel;\n    assert(candidate((\"yogurt\")) == (\"u\"));\n    assert(candidate((\"\
    full\")) == (\"u\"));\n    assert(candidate((\"easy\")) == (\"\"));\n    assert(candidate((\"\
    eAsy\")) == (\"\"));\n    assert(candidate((\"ali\")) == (\"\"));\n    assert(candidate((\"\
    bad\")) == (\"a\"));\n    assert(candidate((\"most\")) == (\"o\"));\n    assert(candidate((\"\
    ab\")) == (\"\"));\n    assert(candidate((\"ba\")) == (\"\"));\n    assert(candidate((\"\
    quick\")) == (\"\"));\n    assert(candidate((\"anime\")) == (\"i\"));\n    assert(candidate((\"\
    Asia\")) == (\"\"));\n    assert(candidate((\"Above\")) == (\"o\"));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp4h13sd5t.cpp: In function \u2018std::string get_closest_vowel(std::string)\u2019\
    :\n/tmp/tmp4h13sd5t.cpp:25:125: error: \u2018vowels_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed\u2019\
    \ was not declared in this scope; did you mean \u2018vowels_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed\u2019\
    ?\n   25 |     std::string vowels_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed\
    \ = vowels_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed.substr(0,\
    \ vowels_reversed_reversed_reversed_reversed_\n      |                       \
    \                                                                            \
    \                          ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    \      |                                                                     \
    \                                                        vowels_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed\n\
    /tmp/tmp4h13sd5t.cpp:25:250: error: \u2018vowels_reversed_reversed_reversed_reversed_\u2019\
    \ was not declared in this scope; did you mean \u2018vowels_reversed_reversed_reversed_reversed\u2019\
    ?\n   25 |     std::string vowels_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed\
    \ = vowels_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed.substr(0,\
    \ vowels_reversed_reversed_reversed_reversed_\n      |                       \
    \                                                                            \
    \                                                                            \
    \                                                                           ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    \      |                                                                     \
    \                                                                            \
    \                                                                            \
    \                             vowels_reversed_reversed_reversed_reversed\n/tmp/tmp4h13sd5t.cpp:26:1:\
    \ error: expected \u2018,\u2019 or \u2018;\u2019 before \u2018}\u2019 token\n\
    \   26 | }\n      | ^\n/tmp/tmp4h13sd5t.cpp:26:1: warning: no return statement\
    \ in function returning non-void [-Wreturn-type]\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// get_closest_vowel(\"yogurt\") ==> \"u\"\
    \n// get_closest_vowel(\"FULL\") ==> \"U\"\n// get_closest_vowel(\"quick\") ==>\
    \ \"\"\n// get_closest_vowel(\"ab\") ==> \"\"\nstd::string get_closest_vowel(std::string\
    \ word) {\n    std::string vowels = \"AEIOUaeiou\";\n    std::string vowels_reverse\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse2 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse3 = \"AEIOUaeiou\";\n    std::string vowels_reverse4 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse5 = \"AEIOUaeiou\";\n    std::string vowels_reverse6\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse7 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse8 = \"AEIOUaeiou\";\n    std::string vowels_reverse9 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse10 = \"AEIOUaeiou\";\n    std::string vowels_reverse11\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse12 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse13 = \"AEIOUaeiou\";\n    std::string vowels_reverse14 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse15 = \"AEIOUaeiou\";\n    std::string vowels_reverse16\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse17 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse18 = \"AEIOUaeiou\";\n    std::string vowels_reverse19 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse20 = \"AEIOUaeiou\";\n    std::string vowels_reverse21\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse22 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse23 = \"AEIOUaeiou\";\n    std::string vowels_reverse24 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse25 = \"AEIOUaeiou\";\n    std::string vowels_reverse26\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse27 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse28 = \"AEIOUaeiou\";\n    std::string vowels_reverse29 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse30 = \"AEIOUaeiou\";\n    std::string vowels_reverse31\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse32 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse33 = \"AEIOUaeiou\";\n    std::string vowels_reverse34 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse35 = \"AEIOUaeiou\";\n    std::string vowels_reverse36\
    \ = \"AEIOU\n}\nint main() {\n    auto candidate = get_closest_vowel;\n    assert(candidate((\"\
    yogurt\")) == (\"u\"));\n    assert(candidate((\"full\")) == (\"u\"));\n    assert(candidate((\"\
    easy\")) == (\"\"));\n    assert(candidate((\"eAsy\")) == (\"\"));\n    assert(candidate((\"\
    ali\")) == (\"\"));\n    assert(candidate((\"bad\")) == (\"a\"));\n    assert(candidate((\"\
    most\")) == (\"o\"));\n    assert(candidate((\"ab\")) == (\"\"));\n    assert(candidate((\"\
    ba\")) == (\"\"));\n    assert(candidate((\"quick\")) == (\"\"));\n    assert(candidate((\"\
    anime\")) == (\"i\"));\n    assert(candidate((\"Asia\")) == (\"\"));\n    assert(candidate((\"\
    Above\")) == (\"o\"));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp4ee_pva5.cpp:50:36: warning: missing terminating \" character\n\
    \   50 |     std::string vowels_reverse36 = \"AEIOU\n      |                 \
    \                   ^\n/tmp/tmp4ee_pva5.cpp:50:36: error: missing terminating\
    \ \" character\n   50 |     std::string vowels_reverse36 = \"AEIOU\n      |  \
    \                                  ^~~~~~\n/tmp/tmp4ee_pva5.cpp: In function \u2018\
    std::string get_closest_vowel(std::string)\u2019:\n/tmp/tmp4ee_pva5.cpp:51:1:\
    \ error: expected primary-expression before \u2018}\u2019 token\n   51 | }\n \
    \     | ^\n/tmp/tmp4ee_pva5.cpp:51:1: error: expected \u2018,\u2019 or \u2018\
    ;\u2019 before \u2018}\u2019 token\n/tmp/tmp4ee_pva5.cpp:51:1: warning: no return\
    \ statement in function returning non-void [-Wreturn-type]\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// get_closest_vowel(\"yogurt\") ==> \"u\"\
    \n// get_closest_vowel(\"FULL\") ==> \"U\"\n// get_closest_vowel(\"quick\") ==>\
    \ \"\"\n// get_closest_vowel(\"ab\") ==> \"\"\nstd::string get_closest_vowel(std::string\
    \ word) {\n    std::string vowels = \"AEIOUaeiou\";\n    std::string vowels_reverse\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse2 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse3 = \"AEIOUaeiou\";\n    std::string vowels_reverse4 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse5 = \"AEIOUaeiou\";\n    std::string vowels_reverse6\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse7 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse8 = \"AEIOUaeiou\";\n    std::string vowels_reverse9 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse10 = \"AEIOUaeiou\";\n    std::string vowels_reverse11\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse12 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse13 = \"AEIOUaeiou\";\n    std::string vowels_reverse14 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse15 = \"AEIOUaeiou\";\n    std::string vowels_reverse16\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse17 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse18 = \"AEIOUaeiou\";\n    std::string vowels_reverse19 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse20 = \"AEIOUaeiou\";\n    std::string vowels_reverse21\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse22 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse23 = \"AEIOUaeiou\";\n    std::string vowels_reverse24 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse25 = \"AEIOUaeiou\";\n    std::string vowels_reverse26\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse27 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse28 = \"AEIOUaeiou\";\n    std::string vowels_reverse29 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse30 = \"AEIOUaeiou\";\n    std::string vowels_reverse31\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse32 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse33 = \"AEIOUaeiou\";\n    std::string vowels_reverse34 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse35 = \"AEIOUaeiou\";\n    std::string vowels_reverse36\
    \ = \"AEIOU\n}\nint main() {\n    auto candidate = get_closest_vowel;\n    assert(candidate((\"\
    yogurt\")) == (\"u\"));\n    assert(candidate((\"full\")) == (\"u\"));\n    assert(candidate((\"\
    easy\")) == (\"\"));\n    assert(candidate((\"eAsy\")) == (\"\"));\n    assert(candidate((\"\
    ali\")) == (\"\"));\n    assert(candidate((\"bad\")) == (\"a\"));\n    assert(candidate((\"\
    most\")) == (\"o\"));\n    assert(candidate((\"ab\")) == (\"\"));\n    assert(candidate((\"\
    ba\")) == (\"\"));\n    assert(candidate((\"quick\")) == (\"\"));\n    assert(candidate((\"\
    anime\")) == (\"i\"));\n    assert(candidate((\"Asia\")) == (\"\"));\n    assert(candidate((\"\
    Above\")) == (\"o\"));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpnq7bo2yw.cpp:50:36: warning: missing terminating \" character\n\
    \   50 |     std::string vowels_reverse36 = \"AEIOU\n      |                 \
    \                   ^\n/tmp/tmpnq7bo2yw.cpp:50:36: error: missing terminating\
    \ \" character\n   50 |     std::string vowels_reverse36 = \"AEIOU\n      |  \
    \                                  ^~~~~~\n/tmp/tmpnq7bo2yw.cpp: In function \u2018\
    std::string get_closest_vowel(std::string)\u2019:\n/tmp/tmpnq7bo2yw.cpp:51:1:\
    \ error: expected primary-expression before \u2018}\u2019 token\n   51 | }\n \
    \     | ^\n/tmp/tmpnq7bo2yw.cpp:51:1: error: expected \u2018,\u2019 or \u2018\
    ;\u2019 before \u2018}\u2019 token\n/tmp/tmpnq7bo2yw.cpp:51:1: warning: no return\
    \ statement in function returning non-void [-Wreturn-type]\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// get_closest_vowel(\"yogurt\") ==> \"u\"\
    \n// get_closest_vowel(\"FULL\") ==> \"U\"\n// get_closest_vowel(\"quick\") ==>\
    \ \"\"\n// get_closest_vowel(\"ab\") ==> \"\"\nstd::string get_closest_vowel(std::string\
    \ word) {\n    std::string vowels = \"AEIOUaeiou\";\n    std::string vowels_reversed\
    \ = vowels.substr(0, vowels.size() - 1);\n    std::string vowels_reversed_upper\
    \ = vowels_reversed.toupper();\n    std::string vowels_reversed_lower = vowels_reversed.tolower();\n\
    \    std::string vowels_reversed_upper_reversed = vowels_reversed_upper.substr(0,\
    \ vowels_reversed_upper.size() - 1);\n    std::string vowels_reversed_lower_reversed\
    \ = vowels_reversed_lower.substr(0, vowels_reversed_lower.size() - 1);\n    std::string\
    \ vowels_reversed_upper_reversed_reversed = vowels_reversed_upper_reversed.substr(0,\
    \ vowels_reversed_upper_reversed.size() - 1);\n    std::string vowels_reversed_lower_reversed_reversed\
    \ = vowels_reversed_lower_reversed.substr(0, vowels_reversed_lower_reversed.size()\
    \ - 1);\n    std::string vowels_reversed_upper_reversed_reversed_reversed = vowels_reversed_upper_reversed_reversed.substr(0,\
    \ vowels_reversed_upper_reversed_reversed.size() - 1);\n    std::string vowels_reversed_lower_reversed_reversed_reversed\
    \ = vowels_reversed_lower_reversed_reversed.substr(0, vowels_reversed_lower_reversed_reversed.size()\
    \ - 1);\n    std::string vowels_reversed_upper_reversed_reversed_reversed_reversed\
    \ = vowels_reversed_upper_reversed_reversed_reversed.substr(0, vowels_reversed_upper_reversed_reversed_reversed.size()\
    \ - 1);\n    std::string vowels_reversed_lower_reversed_reversed_reversed_reversed\
    \ = vowels_reversed_lower_reversed_reversed_reversed.substr(0, vowels_reversed_lower_reversed_reversed_reversed.size()\
    \ - 1);\n    std::string vowels_reversed_upper_reversed_reversed_reversed_reversed_reversed\
    \ = vowels_reversed_upper_reversed_reversed_reversed_reversed.substr(0, vowels_reversed_upper_reversed_reversed_reversed_reversed.size()\
    \ - 1);\n    std::string vowels_reversed_lower_reversed_reversed_reversed_reversed_reversed\
    \ = vowels_reversed_lower_reversed_reversed_reversed_reversed_reversed.substr(0,\
    \ vowels_reversed_lower_reversed_reversed_reversed_reversed_reversed.size() -\
    \ 1);\n    std::string vowels_reversed_upper_reversed_reversed_reversed_reversed_reversed_reversed\
    \ = vowels_reversed_upper_reversed_reversed_reversed_reversed_reversed_reversed.substr(0,\
    \ vowels_reversed_upper_reversed_reversed_reversed_reversed_reversed_reversed.size()\
    \ - 1);\n    std::string \n}\nint main() {\n    auto candidate = get_closest_vowel;\n\
    \    assert(candidate((\"yogurt\")) == (\"u\"));\n    assert(candidate((\"full\"\
    )) == (\"u\"));\n    assert(candidate((\"easy\")) == (\"\"));\n    assert(candidate((\"\
    eAsy\")) == (\"\"));\n    assert(candidate((\"ali\")) == (\"\"));\n    assert(candidate((\"\
    bad\")) == (\"a\"));\n    assert(candidate((\"most\")) == (\"o\"));\n    assert(candidate((\"\
    ab\")) == (\"\"));\n    assert(candidate((\"ba\")) == (\"\"));\n    assert(candidate((\"\
    quick\")) == (\"\"));\n    assert(candidate((\"anime\")) == (\"i\"));\n    assert(candidate((\"\
    Asia\")) == (\"\"));\n    assert(candidate((\"Above\")) == (\"o\"));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpzui67i22.cpp: In function \u2018std::string get_closest_vowel(std::string)\u2019\
    :\n/tmp/tmpzui67i22.cpp:16:57: error: \u2018std::string\u2019 {aka \u2018class\
    \ std::__cxx11::basic_string<char>\u2019} has no member named \u2018toupper\u2019\
    \n   16 |     std::string vowels_reversed_upper = vowels_reversed.toupper();\n\
    \      |                                                         ^~~~~~~\n/tmp/tmpzui67i22.cpp:17:57:\
    \ error: \u2018std::string\u2019 {aka \u2018class std::__cxx11::basic_string<char>\u2019\
    } has no member named \u2018tolower\u2019\n   17 |     std::string vowels_reversed_lower\
    \ = vowels_reversed.tolower();\n      |                                      \
    \                   ^~~~~~~\n/tmp/tmpzui67i22.cpp:30:1: error: expected unqualified-id\
    \ before \u2018}\u2019 token\n   30 | }\n      | ^\n/tmp/tmpzui67i22.cpp:30:1:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// get_closest_vowel(\"yogurt\") ==> \"u\"\
    \n// get_closest_vowel(\"FULL\") ==> \"U\"\n// get_closest_vowel(\"quick\") ==>\
    \ \"\"\n// get_closest_vowel(\"ab\") ==> \"\"\nstd::string get_closest_vowel(std::string\
    \ word) {\n    std::string vowels = \"AEIOUaeiou\";\n    std::string vowels_reverse\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse2 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse3 = \"AEIOUaeiou\";\n    std::string vowels_reverse4 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse5 = \"AEIOUaeiou\";\n    std::string vowels_reverse6\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse7 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse8 = \"AEIOUaeiou\";\n    std::string vowels_reverse9 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse10 = \"AEIOUaeiou\";\n    std::string vowels_reverse11\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse12 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse13 = \"AEIOUaeiou\";\n    std::string vowels_reverse14 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse15 = \"AEIOUaeiou\";\n    std::string vowels_reverse16\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse17 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse18 = \"AEIOUaeiou\";\n    std::string vowels_reverse19 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse20 = \"AEIOUaeiou\";\n    std::string vowels_reverse21\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse22 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse23 = \"AEIOUaeiou\";\n    std::string vowels_reverse24 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse25 = \"AEIOUaeiou\";\n    std::string vowels_reverse26\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse27 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse28 = \"AEIOUaeiou\";\n    std::string vowels_reverse29 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse30 = \"AEIOUaeiou\";\n    std::string vowels_reverse31\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse32 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse33 = \"AEIOUaeiou\";\n    std::string vowels_reverse34 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse35 = \"AEIOUaeiou\";\n    std::string vowels_reverse36\
    \ = \"AEIOU\n}\nint main() {\n    auto candidate = get_closest_vowel;\n    assert(candidate((\"\
    yogurt\")) == (\"u\"));\n    assert(candidate((\"full\")) == (\"u\"));\n    assert(candidate((\"\
    easy\")) == (\"\"));\n    assert(candidate((\"eAsy\")) == (\"\"));\n    assert(candidate((\"\
    ali\")) == (\"\"));\n    assert(candidate((\"bad\")) == (\"a\"));\n    assert(candidate((\"\
    most\")) == (\"o\"));\n    assert(candidate((\"ab\")) == (\"\"));\n    assert(candidate((\"\
    ba\")) == (\"\"));\n    assert(candidate((\"quick\")) == (\"\"));\n    assert(candidate((\"\
    anime\")) == (\"i\"));\n    assert(candidate((\"Asia\")) == (\"\"));\n    assert(candidate((\"\
    Above\")) == (\"o\"));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpyv935ydb.cpp:50:36: warning: missing terminating \" character\n\
    \   50 |     std::string vowels_reverse36 = \"AEIOU\n      |                 \
    \                   ^\n/tmp/tmpyv935ydb.cpp:50:36: error: missing terminating\
    \ \" character\n   50 |     std::string vowels_reverse36 = \"AEIOU\n      |  \
    \                                  ^~~~~~\n/tmp/tmpyv935ydb.cpp: In function \u2018\
    std::string get_closest_vowel(std::string)\u2019:\n/tmp/tmpyv935ydb.cpp:51:1:\
    \ error: expected primary-expression before \u2018}\u2019 token\n   51 | }\n \
    \     | ^\n/tmp/tmpyv935ydb.cpp:51:1: error: expected \u2018,\u2019 or \u2018\
    ;\u2019 before \u2018}\u2019 token\n/tmp/tmpyv935ydb.cpp:51:1: warning: no return\
    \ statement in function returning non-void [-Wreturn-type]\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// get_closest_vowel(\"yogurt\") ==> \"u\"\
    \n// get_closest_vowel(\"FULL\") ==> \"U\"\n// get_closest_vowel(\"quick\") ==>\
    \ \"\"\n// get_closest_vowel(\"ab\") ==> \"\"\nstd::string get_closest_vowel(std::string\
    \ word) {\n    std::string vowels = \"AEIOUaeiou\";\n    std::string vowels_reverse\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse2 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse3 = \"AEIOUaeiou\";\n    std::string vowels_reverse4 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse5 = \"AEIOUaeiou\";\n    std::string vowels_reverse6\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse7 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse8 = \"AEIOUaeiou\";\n    std::string vowels_reverse9 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse10 = \"AEIOUaeiou\";\n    std::string vowels_reverse11\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse12 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse13 = \"AEIOUaeiou\";\n    std::string vowels_reverse14 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse15 = \"AEIOUaeiou\";\n    std::string vowels_reverse16\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse17 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse18 = \"AEIOUaeiou\";\n    std::string vowels_reverse19 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse20 = \"AEIOUaeiou\";\n    std::string vowels_reverse21\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse22 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse23 = \"AEIOUaeiou\";\n    std::string vowels_reverse24 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse25 = \"AEIOUaeiou\";\n    std::string vowels_reverse26\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse27 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse28 = \"AEIOUaeiou\";\n    std::string vowels_reverse29 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse30 = \"AEIOUaeiou\";\n    std::string vowels_reverse31\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse32 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse33 = \"AEIOUaeiou\";\n    std::string vowels_reverse34 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse35 = \"AEIOUaeiou\";\n    std::string vowels_reverse36\
    \ = \"AEIOU\n}\nint main() {\n    auto candidate = get_closest_vowel;\n    assert(candidate((\"\
    yogurt\")) == (\"u\"));\n    assert(candidate((\"full\")) == (\"u\"));\n    assert(candidate((\"\
    easy\")) == (\"\"));\n    assert(candidate((\"eAsy\")) == (\"\"));\n    assert(candidate((\"\
    ali\")) == (\"\"));\n    assert(candidate((\"bad\")) == (\"a\"));\n    assert(candidate((\"\
    most\")) == (\"o\"));\n    assert(candidate((\"ab\")) == (\"\"));\n    assert(candidate((\"\
    ba\")) == (\"\"));\n    assert(candidate((\"quick\")) == (\"\"));\n    assert(candidate((\"\
    anime\")) == (\"i\"));\n    assert(candidate((\"Asia\")) == (\"\"));\n    assert(candidate((\"\
    Above\")) == (\"o\"));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpjs60gssv.cpp:50:36: warning: missing terminating \" character\n\
    \   50 |     std::string vowels_reverse36 = \"AEIOU\n      |                 \
    \                   ^\n/tmp/tmpjs60gssv.cpp:50:36: error: missing terminating\
    \ \" character\n   50 |     std::string vowels_reverse36 = \"AEIOU\n      |  \
    \                                  ^~~~~~\n/tmp/tmpjs60gssv.cpp: In function \u2018\
    std::string get_closest_vowel(std::string)\u2019:\n/tmp/tmpjs60gssv.cpp:51:1:\
    \ error: expected primary-expression before \u2018}\u2019 token\n   51 | }\n \
    \     | ^\n/tmp/tmpjs60gssv.cpp:51:1: error: expected \u2018,\u2019 or \u2018\
    ;\u2019 before \u2018}\u2019 token\n/tmp/tmpjs60gssv.cpp:51:1: warning: no return\
    \ statement in function returning non-void [-Wreturn-type]\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// get_closest_vowel(\"yogurt\") ==> \"u\"\
    \n// get_closest_vowel(\"FULL\") ==> \"U\"\n// get_closest_vowel(\"quick\") ==>\
    \ \"\"\n// get_closest_vowel(\"ab\") ==> \"\"\nstd::string get_closest_vowel(std::string\
    \ word) {\n    std::string vowels = \"AEIOUaeiou\";\n    std::string vowels_reverse\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse2 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse3 = \"AEIOUaeiou\";\n    std::string vowels_reverse4 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse5 = \"AEIOUaeiou\";\n    std::string vowels_reverse6\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse7 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse8 = \"AEIOUaeiou\";\n    std::string vowels_reverse9 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse10 = \"AEIOUaeiou\";\n    std::string vowels_reverse11\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse12 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse13 = \"AEIOUaeiou\";\n    std::string vowels_reverse14 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse15 = \"AEIOUaeiou\";\n    std::string vowels_reverse16\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse17 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse18 = \"AEIOUaeiou\";\n    std::string vowels_reverse19 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse20 = \"AEIOUaeiou\";\n    std::string vowels_reverse21\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse22 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse23 = \"AEIOUaeiou\";\n    std::string vowels_reverse24 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse25 = \"AEIOUaeiou\";\n    std::string vowels_reverse26\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse27 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse28 = \"AEIOUaeiou\";\n    std::string vowels_reverse29 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse30 = \"AEIOUaeiou\";\n    std::string vowels_reverse31\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse32 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse33 = \"AEIOUaeiou\";\n    std::string vowels_reverse34 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse35 = \"AEIOUaeiou\";\n    std::string vowels_reverse36\
    \ = \"AEIOU\n}\nint main() {\n    auto candidate = get_closest_vowel;\n    assert(candidate((\"\
    yogurt\")) == (\"u\"));\n    assert(candidate((\"full\")) == (\"u\"));\n    assert(candidate((\"\
    easy\")) == (\"\"));\n    assert(candidate((\"eAsy\")) == (\"\"));\n    assert(candidate((\"\
    ali\")) == (\"\"));\n    assert(candidate((\"bad\")) == (\"a\"));\n    assert(candidate((\"\
    most\")) == (\"o\"));\n    assert(candidate((\"ab\")) == (\"\"));\n    assert(candidate((\"\
    ba\")) == (\"\"));\n    assert(candidate((\"quick\")) == (\"\"));\n    assert(candidate((\"\
    anime\")) == (\"i\"));\n    assert(candidate((\"Asia\")) == (\"\"));\n    assert(candidate((\"\
    Above\")) == (\"o\"));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp5ideapwq.cpp:50:36: warning: missing terminating \" character\n\
    \   50 |     std::string vowels_reverse36 = \"AEIOU\n      |                 \
    \                   ^\n/tmp/tmp5ideapwq.cpp:50:36: error: missing terminating\
    \ \" character\n   50 |     std::string vowels_reverse36 = \"AEIOU\n      |  \
    \                                  ^~~~~~\n/tmp/tmp5ideapwq.cpp: In function \u2018\
    std::string get_closest_vowel(std::string)\u2019:\n/tmp/tmp5ideapwq.cpp:51:1:\
    \ error: expected primary-expression before \u2018}\u2019 token\n   51 | }\n \
    \     | ^\n/tmp/tmp5ideapwq.cpp:51:1: error: expected \u2018,\u2019 or \u2018\
    ;\u2019 before \u2018}\u2019 token\n/tmp/tmp5ideapwq.cpp:51:1: warning: no return\
    \ statement in function returning non-void [-Wreturn-type]\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// get_closest_vowel(\"yogurt\") ==> \"u\"\
    \n// get_closest_vowel(\"FULL\") ==> \"U\"\n// get_closest_vowel(\"quick\") ==>\
    \ \"\"\n// get_closest_vowel(\"ab\") ==> \"\"\nstd::string get_closest_vowel(std::string\
    \ word) {\n    std::string vowels = \"AEIOUaeiou\";\n    std::string vowels_reverse\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse2 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse3 = \"AEIOUaeiou\";\n    std::string vowels_reverse4 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse5 = \"AEIOUaeiou\";\n    std::string vowels_reverse6\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse7 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse8 = \"AEIOUaeiou\";\n    std::string vowels_reverse9 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse10 = \"AEIOUaeiou\";\n    std::string vowels_reverse11\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse12 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse13 = \"AEIOUaeiou\";\n    std::string vowels_reverse14 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse15 = \"AEIOUaeiou\";\n    std::string vowels_reverse16\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse17 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse18 = \"AEIOUaeiou\";\n    std::string vowels_reverse19 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse20 = \"AEIOUaeiou\";\n    std::string vowels_reverse21\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse22 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse23 = \"AEIOUaeiou\";\n    std::string vowels_reverse24 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse25 = \"AEIOUaeiou\";\n    std::string vowels_reverse26\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse27 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse28 = \"AEIOUaeiou\";\n    std::string vowels_reverse29 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse30 = \"AEIOUaeiou\";\n    std::string vowels_reverse31\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse32 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse33 = \"AEIOUaeiou\";\n    std::string vowels_reverse34 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse35 = \"AEIOUaeiou\";\n    std::string vowels_reverse36\
    \ = \"AEIOU\n}\nint main() {\n    auto candidate = get_closest_vowel;\n    assert(candidate((\"\
    yogurt\")) == (\"u\"));\n    assert(candidate((\"full\")) == (\"u\"));\n    assert(candidate((\"\
    easy\")) == (\"\"));\n    assert(candidate((\"eAsy\")) == (\"\"));\n    assert(candidate((\"\
    ali\")) == (\"\"));\n    assert(candidate((\"bad\")) == (\"a\"));\n    assert(candidate((\"\
    most\")) == (\"o\"));\n    assert(candidate((\"ab\")) == (\"\"));\n    assert(candidate((\"\
    ba\")) == (\"\"));\n    assert(candidate((\"quick\")) == (\"\"));\n    assert(candidate((\"\
    anime\")) == (\"i\"));\n    assert(candidate((\"Asia\")) == (\"\"));\n    assert(candidate((\"\
    Above\")) == (\"o\"));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpsjwww2nd.cpp:50:36: warning: missing terminating \" character\n\
    \   50 |     std::string vowels_reverse36 = \"AEIOU\n      |                 \
    \                   ^\n/tmp/tmpsjwww2nd.cpp:50:36: error: missing terminating\
    \ \" character\n   50 |     std::string vowels_reverse36 = \"AEIOU\n      |  \
    \                                  ^~~~~~\n/tmp/tmpsjwww2nd.cpp: In function \u2018\
    std::string get_closest_vowel(std::string)\u2019:\n/tmp/tmpsjwww2nd.cpp:51:1:\
    \ error: expected primary-expression before \u2018}\u2019 token\n   51 | }\n \
    \     | ^\n/tmp/tmpsjwww2nd.cpp:51:1: error: expected \u2018,\u2019 or \u2018\
    ;\u2019 before \u2018}\u2019 token\n/tmp/tmpsjwww2nd.cpp:51:1: warning: no return\
    \ statement in function returning non-void [-Wreturn-type]\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// get_closest_vowel(\"yogurt\") ==> \"u\"\
    \n// get_closest_vowel(\"FULL\") ==> \"U\"\n// get_closest_vowel(\"quick\") ==>\
    \ \"\"\n// get_closest_vowel(\"ab\") ==> \"\"\nstd::string get_closest_vowel(std::string\
    \ word) {\n    std::string vowels = \"aeiouAEIOU\";\n    std::string vowels_reverse\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse2 = \"aeiouAEIOU\";\n    std::string\
    \ vowels_reverse3 = \"aeiouAEIOU\";\n    std::string vowels_reverse4 = \"aeiouAEIOU\"\
    ;\n    std::string vowels_reverse5 = \"aeiouAEIOU\";\n    std::string vowels_reverse6\
    \ = \"aeiouAEIOU\";\n    std::string vowels_reverse7 = \"aeiouAEIOU\";\n    std::string\
    \ vowels_reverse8 = \"aeiouAEIOU\";\n    std::string vowels_reverse9 = \"aeiouAEIOU\"\
    ;\n    std::string vowels_reverse10 = \"aeiouAEIOU\";\n    std::string vowels_reverse11\
    \ = \"aeiouAEIOU\";\n    std::string vowels_reverse12 = \"aeiouAEIOU\";\n    std::string\
    \ vowels_reverse13 = \"aeiouAEIOU\";\n    std::string vowels_reverse14 = \"aeiouAEIOU\"\
    ;\n    std::string vowels_reverse15 = \"aeiouAEIOU\";\n    std::string vowels_reverse16\
    \ = \"aeiouAEIOU\";\n    std::string vowels_reverse17 = \"aeiouAEIOU\";\n    std::string\
    \ vowels_reverse18 = \"aeiouAEIOU\";\n    std::string vowels_reverse19 = \"aeiouAEIOU\"\
    ;\n    std::string vowels_reverse20 = \"aeiouAEIOU\";\n    std::string vowels_reverse21\
    \ = \"aeiouAEIOU\";\n    std::string vowels_reverse22 = \"aeiouAEIOU\";\n    std::string\
    \ vowels_reverse23 = \"aeiouAEIOU\";\n    std::string vowels_reverse24 = \"aeiouAEIOU\"\
    ;\n    std::string vowels_reverse25 = \"aeiouAEIOU\";\n    std::string vowels_reverse26\
    \ = \"aeiouAEIOU\";\n    std::string vowels_reverse27 = \"aeiouAEIOU\";\n    std::string\
    \ vowels_reverse28 = \"aeiouAEIOU\";\n    std::string vowels_reverse29 = \"aeiouAEIOU\"\
    ;\n    std::string vowels_reverse30 = \"aeiouAEIOU\";\n    std::string vowels_reverse31\
    \ = \"aeiouAEIOU\";\n    std::string vowels_reverse32 = \"aeiouAEIOU\";\n    std::string\
    \ vowels_reverse33 = \"aeiouAEIOU\";\n    std::string vowels_reverse34 = \"aeiouAEIOU\"\
    ;\n    std::string vowels_reverse35 = \"aeiouAEIOU\";\n    std::string vowels_reverse36\
    \ = \"aeiouAE\n}\nint main() {\n    auto candidate = get_closest_vowel;\n    assert(candidate((\"\
    yogurt\")) == (\"u\"));\n    assert(candidate((\"full\")) == (\"u\"));\n    assert(candidate((\"\
    easy\")) == (\"\"));\n    assert(candidate((\"eAsy\")) == (\"\"));\n    assert(candidate((\"\
    ali\")) == (\"\"));\n    assert(candidate((\"bad\")) == (\"a\"));\n    assert(candidate((\"\
    most\")) == (\"o\"));\n    assert(candidate((\"ab\")) == (\"\"));\n    assert(candidate((\"\
    ba\")) == (\"\"));\n    assert(candidate((\"quick\")) == (\"\"));\n    assert(candidate((\"\
    anime\")) == (\"i\"));\n    assert(candidate((\"Asia\")) == (\"\"));\n    assert(candidate((\"\
    Above\")) == (\"o\"));\n}\n"
  stdout: ''
  stderr: "/tmp/tmps70wmxk9.cpp:50:36: warning: missing terminating \" character\n\
    \   50 |     std::string vowels_reverse36 = \"aeiouAE\n      |               \
    \                     ^\n/tmp/tmps70wmxk9.cpp:50:36: error: missing terminating\
    \ \" character\n   50 |     std::string vowels_reverse36 = \"aeiouAE\n      |\
    \                                    ^~~~~~~~\n/tmp/tmps70wmxk9.cpp: In function\
    \ \u2018std::string get_closest_vowel(std::string)\u2019:\n/tmp/tmps70wmxk9.cpp:51:1:\
    \ error: expected primary-expression before \u2018}\u2019 token\n   51 | }\n \
    \     | ^\n/tmp/tmps70wmxk9.cpp:51:1: error: expected \u2018,\u2019 or \u2018\
    ;\u2019 before \u2018}\u2019 token\n/tmp/tmps70wmxk9.cpp:51:1: warning: no return\
    \ statement in function returning non-void [-Wreturn-type]\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// get_closest_vowel(\"yogurt\") ==> \"u\"\
    \n// get_closest_vowel(\"FULL\") ==> \"U\"\n// get_closest_vowel(\"quick\") ==>\
    \ \"\"\n// get_closest_vowel(\"ab\") ==> \"\"\nstd::string get_closest_vowel(std::string\
    \ word) {\n    std::string vowels = \"AEIOUaeiou\";\n    std::string vowels_reverse\
    \ = vowels.substr(0, vowels.size() - 1);\n    std::string vowels_reverse2 = vowels.substr(0,\
    \ vowels.size() - 2);\n    std::string vowels_reverse3 = vowels.substr(0, vowels.size()\
    \ - 3);\n    std::string vowels_reverse4 = vowels.substr(0, vowels.size() - 4);\n\
    \    std::string vowels_reverse5 = vowels.substr(0, vowels.size() - 5);\n    std::string\
    \ vowels_reverse6 = vowels.substr(0, vowels.size() - 6);\n    std::string vowels_reverse7\
    \ = vowels.substr(0, vowels.size() - 7);\n    std::string vowels_reverse8 = vowels.substr(0,\
    \ vowels.size() - 8);\n    std::string vowels_reverse9 = vowels.substr(0, vowels.size()\
    \ - 9);\n    std::string vowels_reverse10 = vowels.substr(0, vowels.size() - 10);\n\
    \    std::string vowels_reverse11 = vowels.substr(0, vowels.size() - 11);\n  \
    \  std::string vowels_reverse12 = vowels.substr(0, vowels.size() - 12);\n    std::string\
    \ vowels_reverse13 = vowels.substr(0, vowels.size() - 13);\n    std::string vowels_reverse14\
    \ = vowels.substr(0, vowels.size() - 14);\n    std::string vowels_reverse15 =\
    \ vowels.substr(0, vowels.size() - 15);\n    std::string vowels_reverse16 = vowels.substr(0,\
    \ vowels.size() - 16);\n    std::string vowels_reverse17 = vowels.substr(0, vowels.size()\
    \ - 17);\n    std::string vowels_reverse18 = vowels.substr(0, vowels.size() -\
    \ 18);\n    std::string vowels_reverse19 = vowels.substr(0, vowels.size() - 19);\n\
    \    std::string vowels_reverse20 = vowels.substr(0, vowels.size() - 20);\n  \
    \  std::string vowels_reverse21 = vowels.substr(0, vowels.size() - 21);\n    std::string\
    \ vowels_reverse22 = vowels.substr(0, vowels.size() - 22);\n    std::string vowels_reverse23\
    \ = vowels.substr(0, vowels.size() - 23);\n    std::string vowels_reverse24 =\
    \ vowels.substr(0, vowels.size() - 24);\n    std::string vowels_reverse25 = vowels.substr(0,\
    \ vowels.size() - 25);\n    std::string vowels_reverse26 = vowels.substr(0, vowels.size()\
    \ - 26);\n    std::string vowels_reverse27 = vowels.substr(0, vowels.size() -\
    \ 27);\n    std::string vowels_reverse28 = vowels.substr(0, vowels.size() - 28);\n\
    \    std::string vowels_reverse29 = vowels.substr(0, vowels.size() - 29);\n  \
    \  std::string vowels_reverse30 = vowels.substr(0, vowels.size() - 30);\n    std::string\
    \ vowels_reverse31 = vowels.substr(0, vowels.size() - 31);\n    std::string vowels_\n\
    }\nint main() {\n    auto candidate = get_closest_vowel;\n    assert(candidate((\"\
    yogurt\")) == (\"u\"));\n    assert(candidate((\"full\")) == (\"u\"));\n    assert(candidate((\"\
    easy\")) == (\"\"));\n    assert(candidate((\"eAsy\")) == (\"\"));\n    assert(candidate((\"\
    ali\")) == (\"\"));\n    assert(candidate((\"bad\")) == (\"a\"));\n    assert(candidate((\"\
    most\")) == (\"o\"));\n    assert(candidate((\"ab\")) == (\"\"));\n    assert(candidate((\"\
    ba\")) == (\"\"));\n    assert(candidate((\"quick\")) == (\"\"));\n    assert(candidate((\"\
    anime\")) == (\"i\"));\n    assert(candidate((\"Asia\")) == (\"\"));\n    assert(candidate((\"\
    Above\")) == (\"o\"));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpev153urt.cpp: In function \u2018std::string get_closest_vowel(std::string)\u2019\
    :\n/tmp/tmpev153urt.cpp:47:1: error: expected initializer before \u2018}\u2019\
    \ token\n   47 | }\n      | ^\n/tmp/tmpev153urt.cpp:47:1: warning: no return statement\
    \ in function returning non-void [-Wreturn-type]\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// get_closest_vowel(\"yogurt\") ==> \"u\"\
    \n// get_closest_vowel(\"FULL\") ==> \"U\"\n// get_closest_vowel(\"quick\") ==>\
    \ \"\"\n// get_closest_vowel(\"ab\") ==> \"\"\nstd::string get_closest_vowel(std::string\
    \ word) {\n    std::string vowels = \"AEIOUaeiou\";\n    std::string vowels_lower\
    \ = \"AEIOUaeiou\";\n    std::string vowels_upper = \"AEIOUaeiou\";\n    std::string\
    \ vowels_all = \"AEIOUaeiou\";\n    std::string vowels_all_lower = \"AEIOUaeiou\"\
    ;\n    std::string vowels_all_upper = \"AEIOUaeiou\";\n    std::string vowels_all_lower\
    \ = \"AEIOUaeiou\";\n    std::string vowels_all_upper = \"AEIOUaeiou\";\n    std::string\
    \ vowels_all_lower = \"AEIOUaeiou\";\n    std::string vowels_all_upper = \"AEIOUaeiou\"\
    ;\n    std::string vowels_all_lower = \"AEIOUaeiou\";\n    std::string vowels_all_upper\
    \ = \"AEIOUaeiou\";\n    std::string vowels_all_lower = \"AEIOUaeiou\";\n    std::string\
    \ vowels_all_upper = \"AEIOUaeiou\";\n    std::string vowels_all_lower = \"AEIOUaeiou\"\
    ;\n    std::string vowels_all_upper = \"AEIOUaeiou\";\n    std::string vowels_all_lower\
    \ = \"AEIOUaeiou\";\n    std::string vowels_all_upper = \"AEIOUaeiou\";\n    std::string\
    \ vowels_all_lower = \"AEIOUaeiou\";\n    std::string vowels_all_upper = \"AEIOUaeiou\"\
    ;\n    std::string vowels_all_lower = \"AEIOUaeiou\";\n    std::string vowels_all_upper\
    \ = \"AEIOUaeiou\";\n    std::string vowels_all_lower = \"AEIOUaeiou\";\n    std::string\
    \ vowels_all_upper = \"AEIOUaeiou\";\n    std::string vowels_all_lower = \"AEIOUaeiou\"\
    ;\n    std::string vowels_all_upper = \"AEIOUaeiou\";\n    std::string vowels_all_lower\
    \ = \"AEIOUaeiou\";\n    std::string vowels_all_upper = \"AEIOUaeiou\";\n    std::string\
    \ vowels_all_lower = \"AEIOUaeiou\";\n    std::string vowels_all_upper = \"AEIOUaeiou\"\
    ;\n    std::string vowels_all_lower = \"AEIOUaeiou\";\n    std::string vowels_all_upper\
    \ = \"AEIOUaeiou\";\n    std::string vowels_all_lower = \"AEIOUaeiou\";\n    std::string\
    \ vowels_all_upper = \"AEIOUaeiou\";\n    std::string vowels_all_lower = \"AEIOUaeiou\"\
    ;\n    std::string vowels_all_upper = \"AEIOUaeiou\";\n    std::string vowels_all_lower\
    \ = \"AEIOUaeiou\";\n\n}\nint main() {\n    auto candidate = get_closest_vowel;\n\
    \    assert(candidate((\"yogurt\")) == (\"u\"));\n    assert(candidate((\"full\"\
    )) == (\"u\"));\n    assert(candidate((\"easy\")) == (\"\"));\n    assert(candidate((\"\
    eAsy\")) == (\"\"));\n    assert(candidate((\"ali\")) == (\"\"));\n    assert(candidate((\"\
    bad\")) == (\"a\"));\n    assert(candidate((\"most\")) == (\"o\"));\n    assert(candidate((\"\
    ab\")) == (\"\"));\n    assert(candidate((\"ba\")) == (\"\"));\n    assert(candidate((\"\
    quick\")) == (\"\"));\n    assert(candidate((\"anime\")) == (\"i\"));\n    assert(candidate((\"\
    Asia\")) == (\"\"));\n    assert(candidate((\"Above\")) == (\"o\"));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpcv4zcefn.cpp: In function \u2018std::string get_closest_vowel(std::string)\u2019\
    :\n/tmp/tmpcv4zcefn.cpp:20:17: error: redeclaration of \u2018std::string vowels_all_lower\u2019\
    \n   20 |     std::string vowels_all_lower = \"AEIOUaeiou\";\n      |        \
    \         ^~~~~~~~~~~~~~~~\n/tmp/tmpcv4zcefn.cpp:18:17: note: \u2018std::string\
    \ vowels_all_lower\u2019 previously declared here\n   18 |     std::string vowels_all_lower\
    \ = \"AEIOUaeiou\";\n      |                 ^~~~~~~~~~~~~~~~\n/tmp/tmpcv4zcefn.cpp:21:17:\
    \ error: redeclaration of \u2018std::string vowels_all_upper\u2019\n   21 |  \
    \   std::string vowels_all_upper = \"AEIOUaeiou\";\n      |                 ^~~~~~~~~~~~~~~~\n\
    /tmp/tmpcv4zcefn.cpp:19:17: note: \u2018std::string vowels_all_upper\u2019 previously\
    \ declared here\n   19 |     std::string vowels_all_upper = \"AEIOUaeiou\";\n\
    \      |                 ^~~~~~~~~~~~~~~~\n/tmp/tmpcv4zcefn.cpp:22:17: error:\
    \ redeclaration of \u2018std::string vowels_all_lower\u2019\n   22 |     std::string\
    \ vowels_all_lower = \"AEIOUaeiou\";\n      |                 ^~~~~~~~~~~~~~~~\n\
    /tmp/tmpcv4zcefn.cpp:18:17: note: \u2018std::string vowels_all_lower\u2019 previously\
    \ declared here\n   18 |     std::string vowels_all_lower = \"AEIOUaeiou\";\n\
    \      |                 ^~~~~~~~~~~~~~~~\n/tmp/tmpcv4zcefn.cpp:23:17: error:\
    \ redeclaration of \u2018std::string vowels_all_upper\u2019\n   23 |     std::string\
    \ vowels_all_upper = \"AEIOUaeiou\";\n      |                 ^~~~~~~~~~~~~~~~\n\
    /tmp/tmpcv4zcefn.cpp:19:17: note: \u2018std::string vowels_all_upper\u2019 previously\
    \ declared here\n   19 |     std::string vowels_all_upper = \"AEIOUaeiou\";\n\
    \      |                 ^~~~~~~~~~~~~~~~\n/tmp/tmpcv4zcefn.cpp:24:17: error:\
    \ redeclaration of \u2018std::string vowels_all_lower\u2019\n   24 |     std::string\
    \ vowels_all_lower = \"AEIOUaeiou\";\n      |                 ^~~~~~~~~~~~~~~~\n\
    /tmp/tmpcv4zcefn.cpp:18:17: note: \u2018std::string vowels_all_lower\u2019 previously\
    \ declared here\n   18 |     std::string vowels_all_lower = \"AEIOUaeiou\";\n\
    \      |                 ^~~~~~~~~~~~~~~~\n/tmp/tmpcv4zcefn.cpp:25:17: error:\
    \ redeclaration of \u2018std::string vowels_all_upper\u2019\n   25 |     std::string\
    \ vowels_all_upper = \"AEIOUaeiou\";\n      |                 ^~~~~~~~~~~~~~~~\n\
    /tmp/tmpcv4zcefn.cpp:19:17: note: \u2018std::string vowels_all_upper\u2019 previously\
    \ declared here\n   19 |     std::string vowels_all_upper = \"AEIOUaeiou\";\n\
    \      |                 ^~~~~~~~~~~~~~~~\n/tmp/tmpcv4zcefn.cpp:26:17: error:\
    \ redeclaration of \u2018std::string vowels_all_lower\u2019\n   26 |     std::string\
    \ vowels_all_lower = \"AEIOUaeiou\";\n      |                 ^~~~~~~~~~~~~~~~\n\
    /tmp/tmpcv4zcefn.cpp:18:17: note: \u2018std::string vowels_all_lower\u2019 previously\
    \ declared here\n   18 |     std::string vowels_all_lower = \"AEIOUaeiou\";\n\
    \      |                 ^~~~~~~~~~~~~~~~\n/tmp/tmpcv4zcefn.cpp:27:17: error:\
    \ redeclaration of \u2018std::string vowels_all_upper\u2019\n   27 |     std::string\
    \ vowels_all_upper = \"AEIOUaeiou\";\n      |                 ^~~~~~~~~~~~~~~~\n\
    /tmp/tmpcv4zcefn.cpp:19:17: note: \u2018std::string vowels_all_upper\u2019 previously\
    \ declared here\n   19 |     std::string vowels_all_upper = \"AEIOUaeiou\";\n\
    \      |                 ^~~~~~~~~~~~~~~~\n/tmp/tmpcv4zcefn.cpp:28:17: error:\
    \ redeclaration of \u2018std::string vowels_all_lower\u2019\n   28 |     std::string\
    \ vowels_all_lower = \"AEIOUaeiou\";\n      |                 ^~~~~~~~~~~~~~~~\n\
    /tmp/tmpcv4zcefn.cpp:18:17: note: \u2018std::string vowels_all_lower\u2019 previously\
    \ declared here\n   18 |     std::string vowels_all_lower = \"AEIOUaeiou\";\n\
    \      |                 ^~~~~~~~~~~~~~~~\n/tmp/tmpcv4zcefn.cpp:29:17: error:\
    \ redeclaration of \u2018std::string vowels_all_upper\u2019\n   29 |     std::string\
    \ vowels_all_upper = \"AEIOUaeiou\";\n      |                 ^~~~~~~~~~~~~~~~\n\
    /tmp/tmpcv4zcefn.cpp:19:17: note: \u2018std::string vowels_all_upper\u2019 previously\
    \ declared here\n   19 |     std::string vowels_all_upper = \"AEIOUaeiou\";\n\
    \      |                 ^~~~~~~~~~~~~~~~\n/tmp/tmpcv4zcefn.cpp:30:17: error:\
    \ redeclaration of \u2018std::string vowels_all_lower\u2019\n   30 |     std::string\
    \ vowels_all_lower = \"AEIOUaeiou\";\n      |                 ^~~~~~~~~~~~~~~~\n\
    /tmp/tmpcv4zcefn.cpp:18:17: note: \u2018std::string vowels_all_lower\u2019 previously\
    \ declared here\n   18 |     std::string vowels_all_lower = \"AEIOUaeiou\";\n\
    \      |                 ^~~~~~~~~~~~~~~~\n/tmp/tmpcv4zcefn.cpp:31:17: error:\
    \ redeclaration of \u2018std::string vowels_all_upper\u2019\n   31 |     std::string\
    \ vowels_all_upper = \"AEIOUaeiou\";\n      |                 ^~~~~~~~~~~~~~~~\n\
    /tmp/tmpcv4zcefn.cpp:19:17: note: \u2018std::string vowels_all_upper\u2019 previously\
    \ declared here\n   19 |     std::string vowels_all_upper = \"AEIOUaeiou\";\n\
    \      |                 ^~~~~~~~~~~~~~~~\n/tmp/tmpcv4zcefn.cpp:32:17: error:\
    \ redeclaration of \u2018std::string vowels_all_lower\u2019\n   32 |     std::string\
    \ vowels_all_lower = \"AEIOUaeiou\";\n      |                 ^~~~~~~~~~~~~~~~\n\
    /tmp/tmpcv4zcefn.cpp:18:17: note: \u2018std::string vowels_all_lower\u2019 previously\
    \ declared here\n   18 |     std::string vowels_all_lower = \"AEIOUaeiou\";\n\
    \      |                 ^~~~~~~~~~~~~~~~\n/tmp/tmpcv4zcefn.cpp:33:17: error:\
    \ redeclaration of \u2018std::string vowels_all_upper\u2019\n   33 |     std::string\
    \ vowels_all_upper = \"AEIOUaeiou\";\n      |                 ^~~~~~~~~~~~~~~~\n\
    /tmp/tmpcv4zcefn.cpp:19:17: note: \u2018std::string vowels_all_upper\u2019 previously\
    \ declared here\n   19 |     std::string vowels_all_upper = \"AEIOUaeiou\";\n\
    \      |                 ^~~~~~~~~~~~~~~~\n/tmp/tmpcv4zcefn.cpp:34:17: error:\
    \ redeclaration of \u2018std::string vowels_all_lower\u2019\n   34 |     std::string\
    \ vowels_all_lower = \"AEIOUaeiou\";\n      |                 ^~~~~~~~~~~~~~~~\n\
    /tmp/tmpcv4zcefn.cpp:18:17: note: \u2018std::string vowels_all_lower\u2019 previously\
    \ declared here\n   18 |     std::string vowels_all_lower = \"AEIOUaeiou\";\n\
    \      |                 ^~~~~~~~~~~~~~~~\n/tmp/tmpcv4zcefn.cpp:35:17: error:\
    \ redeclaration of \u2018std::string vowels_all_upper\u2019\n   35 |     std::string\
    \ vowels_all_upper = \"AEIOUaeiou\";\n      |                 ^~~~~~~~~~~~~~~~\n\
    /tmp/tmpcv4zcefn.cpp:19:17: note: \u2018std::string vowels_all_upper\u2019 previously\
    \ declared here\n   19 |     std::string vowels_all_upper = \"AEIOUaeiou\";\n\
    \      |                 ^~~~~~~~~~~~~~~~\n/tmp/tmpcv4zcefn.cpp:36:17: error:\
    \ redeclaration of \u2018std::string vowels_all_lower\u2019\n   36 |     std::string\
    \ vowels_all_lower = \"AEIOUaeiou\";\n      |                 ^~~~~~~~~~~~~~~~\n\
    /tmp/tmpcv4zcefn.cpp:18:17: note: \u2018std::string vowels_all_lower\u2019 previously\
    \ declared here\n   18 |     std::string vowels_all_lower = \"AEIOUaeiou\";\n\
    \      |                 ^~~~~~~~~~~~~~~~\n/tmp/tmpcv4zcefn.cpp:37:17: error:\
    \ redeclaration of \u2018std::string vowels_all_upper\u2019\n   37 |     std::string\
    \ vowels_all_upper = \"AEIOUaeiou\";\n      |                 ^~~~~~~~~~~~~~~~\n\
    /tmp/tmpcv4zcefn.cpp:19:17: note: \u2018std::string vowels_all_upper\u2019 previously\
    \ declared here\n   19 |     std::string vowels_all_upper = \"AEIOUaeiou\";\n\
    \      |                 ^~~~~~~~~~~~~~~~\n/tmp/tmpcv4zcefn.cpp:38:17: error:\
    \ redeclaration of \u2018std::string vowels_all_lower\u2019\n   38 |     std::string\
    \ vowels_all_lower = \"AEIOUaeiou\";\n      |                 ^~~~~~~~~~~~~~~~\n\
    /tmp/tmpcv4zcefn.cpp:18:17: note: \u2018std::string vowels_all_lower\u2019 previously\
    \ declared here\n   18 |     std::string vowels_all_lower = \"AEIOUaeiou\";\n\
    \      |                 ^~~~~~~~~~~~~~~~\n/tmp/tmpcv4zcefn.cpp:39:17: error:\
    \ redeclaration of \u2018std::string vowels_all_upper\u2019\n   39 |     std::string\
    \ vowels_all_upper = \"AEIOUaeiou\";\n      |                 ^~~~~~~~~~~~~~~~\n\
    /tmp/tmpcv4zcefn.cpp:19:17: note: \u2018std::string vowels_all_upper\u2019 previously\
    \ declared here\n   19 |     std::string vowels_all_upper = \"AEIOUaeiou\";\n\
    \      |                 ^~~~~~~~~~~~~~~~\n/tmp/tmpcv4zcefn.cpp:40:17: error:\
    \ redeclaration of \u2018std::string vowels_all_lower\u2019\n   40 |     std::string\
    \ vowels_all_lower = \"AEIOUaeiou\";\n      |                 ^~~~~~~~~~~~~~~~\n\
    /tmp/tmpcv4zcefn.cpp:18:17: note: \u2018std::string vowels_all_lower\u2019 previously\
    \ declared here\n   18 |     std::string vowels_all_lower = \"AEIOUaeiou\";\n\
    \      |                 ^~~~~~~~~~~~~~~~\n/tmp/tmpcv4zcefn.cpp:41:17: error:\
    \ redeclaration of \u2018std::string vowels_all_upper\u2019\n   41 |     std::string\
    \ vowels_all_upper = \"AEIOUaeiou\";\n      |                 ^~~~~~~~~~~~~~~~\n\
    /tmp/tmpcv4zcefn.cpp:19:17: note: \u2018std::string vowels_all_upper\u2019 previously\
    \ declared here\n   19 |     std::string vowels_all_upper = \"AEIOUaeiou\";\n\
    \      |                 ^~~~~~~~~~~~~~~~\n/tmp/tmpcv4zcefn.cpp:42:17: error:\
    \ redeclaration of \u2018std::string vowels_all_lower\u2019\n   42 |     std::string\
    \ vowels_all_lower = \"AEIOUaeiou\";\n      |                 ^~~~~~~~~~~~~~~~\n\
    /tmp/tmpcv4zcefn.cpp:18:17: note: \u2018std::string vowels_all_lower\u2019 previously\
    \ declared here\n   18 |     std::string vowels_all_lower = \"AEIOUaeiou\";\n\
    \      |                 ^~~~~~~~~~~~~~~~\n/tmp/tmpcv4zcefn.cpp:43:17: error:\
    \ redeclaration of \u2018std::string vowels_all_upper\u2019\n   43 |     std::string\
    \ vowels_all_upper = \"AEIOUaeiou\";\n      |                 ^~~~~~~~~~~~~~~~\n\
    /tmp/tmpcv4zcefn.cpp:19:17: note: \u2018std::string vowels_all_upper\u2019 previously\
    \ declared here\n   19 |     std::string vowels_all_upper = \"AEIOUaeiou\";\n\
    \      |                 ^~~~~~~~~~~~~~~~\n/tmp/tmpcv4zcefn.cpp:44:17: error:\
    \ redeclaration of \u2018std::string vowels_all_lower\u2019\n   44 |     std::string\
    \ vowels_all_lower = \"AEIOUaeiou\";\n      |                 ^~~~~~~~~~~~~~~~\n\
    /tmp/tmpcv4zcefn.cpp:18:17: note: \u2018std::string vowels_all_lower\u2019 previously\
    \ declared here\n   18 |     std::string vowels_all_lower = \"AEIOUaeiou\";\n\
    \      |                 ^~~~~~~~~~~~~~~~\n/tmp/tmpcv4zcefn.cpp:45:17: error:\
    \ redeclaration of \u2018std::string vowels_all_upper\u2019\n   45 |     std::string\
    \ vowels_all_upper = \"AEIOUaeiou\";\n      |                 ^~~~~~~~~~~~~~~~\n\
    /tmp/tmpcv4zcefn.cpp:19:17: note: \u2018std::string vowels_all_upper\u2019 previously\
    \ declared here\n   19 |     std::string vowels_all_upper = \"AEIOUaeiou\";\n\
    \      |                 ^~~~~~~~~~~~~~~~\n/tmp/tmpcv4zcefn.cpp:46:17: error:\
    \ redeclaration of \u2018std::string vowels_all_lower\u2019\n   46 |     std::string\
    \ vowels_all_lower = \"AEIOUaeiou\";\n      |                 ^~~~~~~~~~~~~~~~\n\
    /tmp/tmpcv4zcefn.cpp:18:17: note: \u2018std::string vowels_all_lower\u2019 previously\
    \ declared here\n   18 |     std::string vowels_all_lower = \"AEIOUaeiou\";\n\
    \      |                 ^~~~~~~~~~~~~~~~\n/tmp/tmpcv4zcefn.cpp:47:17: error:\
    \ redeclaration of \u2018std::string vowels_all_upper\u2019\n   47 |     std::string\
    \ vowels_all_upper = \"AEIOUaeiou\";\n      |                 ^~~~~~~~~~~~~~~~\n\
    /tmp/tmpcv4zcefn.cpp:19:17: note: \u2018std::string vowels_all_upper\u2019 previously\
    \ declared here\n   19 |     std::string vowels_all_upper = \"AEIOUaeiou\";\n\
    \      |                 ^~~~~~~~~~~~~~~~\n/tmp/tmpcv4zcefn.cpp:48:17: error:\
    \ redeclaration of \u2018std::string vowels_all_lower\u2019\n   48 |     std::string\
    \ vowels_all_lower = \"AEIOUaeiou\";\n      |                 ^~~~~~~~~~~~~~~~\n\
    /tmp/tmpcv4zcefn.cpp:18:17: note: \u2018std::string vowels_all_lower\u2019 previously\
    \ declared here\n   18 |     std::string vowels_all_lower = \"AEIOUaeiou\";\n\
    \      |                 ^~~~~~~~~~~~~~~~\n/tmp/tmpcv4zcefn.cpp:49:17: error:\
    \ redeclaration of \u2018std::string vowels_all_upper\u2019\n   49 |     std::string\
    \ vowels_all_upper = \"AEIOUaeiou\";\n      |                 ^~~~~~~~~~~~~~~~\n\
    /tmp/tmpcv4zcefn.cpp:19:17: note: \u2018std::string vowels_all_upper\u2019 previously\
    \ declared here\n   19 |     std::string vowels_all_upper = \"AEIOUaeiou\";\n\
    \      |                 ^~~~~~~~~~~~~~~~\n/tmp/tmpcv4zcefn.cpp:50:17: error:\
    \ redeclaration of \u2018std::string vowels_all_lower\u2019\n   50 |     std::string\
    \ vowels_all_lower = \"AEIOUaeiou\";\n      |                 ^~~~~~~~~~~~~~~~\n\
    /tmp/tmpcv4zcefn.cpp:18:17: note: \u2018std::string vowels_all_lower\u2019 previously\
    \ declared here\n   18 |     std::string vowels_all_lower = \"AEIOUaeiou\";\n\
    \      |                 ^~~~~~~~~~~~~~~~\n/tmp/tmpcv4zcefn.cpp:52:1: warning:\
    \ no return statement in function returning non-void [-Wreturn-type]\n   52 |\
    \ }\n      | ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// get_closest_vowel(\"yogurt\") ==> \"u\"\
    \n// get_closest_vowel(\"FULL\") ==> \"U\"\n// get_closest_vowel(\"quick\") ==>\
    \ \"\"\n// get_closest_vowel(\"ab\") ==> \"\"\nstd::string get_closest_vowel(std::string\
    \ word) {\n    std::string vowels = \"AEIOUaeiou\";\n    std::string vowels_reverse\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_reverse = \"AEIOUaeiou\";\n\
    \    std::string vowels_reverse_reverse_reverse = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse_reverse_reverse_reverse = \"AEIOUaeiou\";\n    std::string vowels_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_reverse\n}\nint main() {\n\
    \    auto candidate = get_closest_vowel;\n    assert(candidate((\"yogurt\")) ==\
    \ (\"u\"));\n    assert(candidate((\"full\")) == (\"u\"));\n    assert(candidate((\"\
    easy\")) == (\"\"));\n    assert(candidate((\"eAsy\")) == (\"\"));\n    assert(candidate((\"\
    ali\")) == (\"\"));\n    assert(candidate((\"bad\")) == (\"a\"));\n    assert(candidate((\"\
    most\")) == (\"o\"));\n    assert(candidate((\"ab\")) == (\"\"));\n    assert(candidate((\"\
    ba\")) == (\"\"));\n    assert(candidate((\"quick\")) == (\"\"));\n    assert(candidate((\"\
    anime\")) == (\"i\"));\n    assert(candidate((\"Asia\")) == (\"\"));\n    assert(candidate((\"\
    Above\")) == (\"o\"));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpi6ms3a4o.cpp: In function \u2018std::string get_closest_vowel(std::string)\u2019\
    :\n/tmp/tmpi6ms3a4o.cpp:22:17: error: redeclaration of \u2018std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse\u2019\
    \n   22 |     std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpi6ms3a4o.cpp:21:17: note: \u2018std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse\u2019\
    \ previously declared here\n   21 |     std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpi6ms3a4o.cpp:23:17: error: redeclaration of \u2018std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse\u2019\
    \n   23 |     std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpi6ms3a4o.cpp:21:17: note: \u2018std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse\u2019\
    \ previously declared here\n   21 |     std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpi6ms3a4o.cpp:25:17: error: redeclaration of \u2018std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\u2019\
    \n   25 |     std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpi6ms3a4o.cpp:24:17: note: \u2018std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\u2019\
    \ previously declared here\n   24 |     std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpi6ms3a4o.cpp:26:17: error: redeclaration of \u2018std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\u2019\
    \n   26 |     std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpi6ms3a4o.cpp:24:17: note: \u2018std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\u2019\
    \ previously declared here\n   24 |     std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpi6ms3a4o.cpp:27:17: error: redeclaration of \u2018std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\u2019\
    \n   27 |     std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpi6ms3a4o.cpp:24:17: note: \u2018std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\u2019\
    \ previously declared here\n   24 |     std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpi6ms3a4o.cpp:29:17: error: redeclaration of \u2018std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\u2019\
    \n   29 |     std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpi6ms3a4o.cpp:28:17: note: \u2018std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\u2019\
    \ previously declared here\n   28 |     std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpi6ms3a4o.cpp:30:17: error: redeclaration of \u2018std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\u2019\
    \n   30 |     std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpi6ms3a4o.cpp:28:17: note: \u2018std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\u2019\
    \ previously declared here\n   28 |     std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpi6ms3a4o.cpp:31:17: error: redeclaration of \u2018std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\u2019\
    \n   31 |     std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpi6ms3a4o.cpp:28:17: note: \u2018std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\u2019\
    \ previously declared here\n   28 |     std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpi6ms3a4o.cpp:32:17: error: redeclaration of \u2018std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\u2019\
    \n   32 |     std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpi6ms3a4o.cpp:28:17: note: \u2018std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\u2019\
    \ previously declared here\n   28 |     std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpi6ms3a4o.cpp:33:17: error: redeclaration of \u2018std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\u2019\
    \n   33 |     std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpi6ms3a4o.cpp:28:17: note: \u2018std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\u2019\
    \ previously declared here\n   28 |     std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpi6ms3a4o.cpp:34:17: error: redeclaration of \u2018std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\u2019\
    \n   34 |     std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpi6ms3a4o.cpp:28:17: note: \u2018std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\u2019\
    \ previously declared here\n   28 |     std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpi6ms3a4o.cpp:36:1: error: expected initializer before \u2018}\u2019 token\n\
    \   36 | }\n      | ^\n/tmp/tmpi6ms3a4o.cpp:36:1: warning: no return statement\
    \ in function returning non-void [-Wreturn-type]\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// get_closest_vowel(\"yogurt\") ==> \"u\"\
    \n// get_closest_vowel(\"FULL\") ==> \"U\"\n// get_closest_vowel(\"quick\") ==>\
    \ \"\"\n// get_closest_vowel(\"ab\") ==> \"\"\nstd::string get_closest_vowel(std::string\
    \ word) {\n    std::string vowels = \"AEIOUaeiou\";\n    std::string vowels_rev\
    \ = \"AEIOUaeiou\";\n    std::string vowels_rev1 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_rev2 = \"\";\n    std::string vowels_rev3 = \"\";\n    std::string vowels_rev4\
    \ = \"\";\n    std::string vowels_rev5 = \"\";\n    std::string vowels_rev6 =\
    \ \"\";\n    std::string vowels_rev7 = \"\";\n    std::string vowels_rev8 = \"\
    \";\n    std::string vowels_rev9 = \"\";\n    std::string vowels_rev10 = \"\"\
    ;\n    std::string vowels_rev11 = \"\";\n    std::string vowels_rev12 = \"\";\n\
    \    std::string vowels_rev13 = \"\";\n    std::string vowels_rev14 = \"\";\n\
    \    std::string vowels_rev15 = \"\";\n    std::string vowels_rev16 = \"\";\n\
    \    std::string vowels_rev17 = \"\";\n    std::string vowels_rev18 = \"\";\n\
    \    std::string vowels_rev19 = \"\";\n    std::string vowels_rev20 = \"\";\n\
    \    std::string vowels_rev21 = \"\";\n    std::string vowels_rev22 = \"\";\n\
    \    std::string vowels_rev23 = \"\";\n    std::string vowels_rev24 = \"\";\n\
    \    std::string vowels_rev25 = \"\";\n    std::string vowels_rev26 = \"\";\n\
    \    std::string vowels_rev27 = \"\";\n    std::string vowels_rev28 = \"\";\n\
    \    std::string vowels_rev29 = \"\";\n    std::string vowels_rev30 = \"\";\n\
    \    std::string vowels_rev31 = \"\";\n    std::string vowels_rev32 = \"\";\n\
    \    std::string vowels_rev33 = \"\";\n    std::string vowels_rev34 = \"\";\n\
    \    std::string vowels_rev35 = \"\";\n    std::string vowels_rev36 = \"\";\n\
    \    std::string vowels_rev37 = \"\";\n    std::string vowels_rev38 = \"\";\n\
    \    std::string vowels_rev39 = \"\";\n    std::string vowels_rev40 = \"\";\n\
    \    std::string vowels_rev41 = \"\";\n    std::string vowels_rev42 = \"\";\n\
    \    std::string vowels_rev43 = \"\";\n    std::string vowels_rev44 = \"\";\n\
    \    std::string vowels_rev45 = \"\";\n    std::string vowels_rev46 = \"\";\n\
    \    std::string vowels_rev47 = \"\";\n    std::string vowels_rev48 = \"\";\n\
    \    std::string vowels_rev49 = \"\";\n    std::string vowels_rev50 = \"\";\n\
    \    std::string vowels_rev51 = \"\";\n    std::string vowels_rev52 = \"\";\n\
    \    std::string vowels_rev53 = \"\";\n    std::string vowels_rev54 = \"\";\n\
    \    std::string vowels_rev55 = \"\";\n    std::string vowels_rev56 = \"\";\n\
    \    std::string vowels_rev57 = \"\";\n    std::string vowels_rev58 = \"\";\n\
    \    std::string vowels_rev59 = \"\";\n\n}\nint main() {\n    auto candidate =\
    \ get_closest_vowel;\n    assert(candidate((\"yogurt\")) == (\"u\"));\n    assert(candidate((\"\
    full\")) == (\"u\"));\n    assert(candidate((\"easy\")) == (\"\"));\n    assert(candidate((\"\
    eAsy\")) == (\"\"));\n    assert(candidate((\"ali\")) == (\"\"));\n    assert(candidate((\"\
    bad\")) == (\"a\"));\n    assert(candidate((\"most\")) == (\"o\"));\n    assert(candidate((\"\
    ab\")) == (\"\"));\n    assert(candidate((\"ba\")) == (\"\"));\n    assert(candidate((\"\
    quick\")) == (\"\"));\n    assert(candidate((\"anime\")) == (\"i\"));\n    assert(candidate((\"\
    Asia\")) == (\"\"));\n    assert(candidate((\"Above\")) == (\"o\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// get_closest_vowel(\"yogurt\") ==> \"u\"\
    \n// get_closest_vowel(\"FULL\") ==> \"U\"\n// get_closest_vowel(\"quick\") ==>\
    \ \"\"\n// get_closest_vowel(\"ab\") ==> \"\"\nstd::string get_closest_vowel(std::string\
    \ word) {\n    int n = word.length();\n    std::string vowels = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse = \"AEIOUaeiou\";\n    std::string vowels_reverse2\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse3 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse4 = \"AEIOUaeiou\";\n    std::string vowels_reverse5 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse6 = \"AEIOUaeiou\";\n    std::string vowels_reverse7\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse8 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse9 = \"AEIOUaeiou\";\n    std::string vowels_reverse10 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse11 = \"AEIOUaeiou\";\n    std::string vowels_reverse12\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse13 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse14 = \"AEIOUaeiou\";\n    std::string vowels_reverse15 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse16 = \"AEIOUaeiou\";\n    std::string vowels_reverse17\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse18 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse19 = \"AEIOUaeiou\";\n    std::string vowels_reverse20 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse21 = \"AEIOUaeiou\";\n    std::string vowels_reverse22\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse23 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse24 = \"AEIOUaeiou\";\n    std::string vowels_reverse25 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse26 = \"AEIOUaeiou\";\n    std::string vowels_reverse27\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse28 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse29 = \"AEIOUaeiou\";\n    std::string vowels_reverse30 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse31 = \"AEIOUaeiou\";\n    std::string vowels_reverse32\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse33 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse34 = \"AEIOUaeiou\";\n    std::string vowels_reverse35 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_\n}\nint main() {\n    auto candidate = get_closest_vowel;\n\
    \    assert(candidate((\"yogurt\")) == (\"u\"));\n    assert(candidate((\"full\"\
    )) == (\"u\"));\n    assert(candidate((\"easy\")) == (\"\"));\n    assert(candidate((\"\
    eAsy\")) == (\"\"));\n    assert(candidate((\"ali\")) == (\"\"));\n    assert(candidate((\"\
    bad\")) == (\"a\"));\n    assert(candidate((\"most\")) == (\"o\"));\n    assert(candidate((\"\
    ab\")) == (\"\"));\n    assert(candidate((\"ba\")) == (\"\"));\n    assert(candidate((\"\
    quick\")) == (\"\"));\n    assert(candidate((\"anime\")) == (\"i\"));\n    assert(candidate((\"\
    Asia\")) == (\"\"));\n    assert(candidate((\"Above\")) == (\"o\"));\n}\n"
  stdout: ''
  stderr: "/tmp/tmppc_zfv8w.cpp: In function \u2018std::string get_closest_vowel(std::string)\u2019\
    :\n/tmp/tmppc_zfv8w.cpp:52:1: error: expected initializer before \u2018}\u2019\
    \ token\n   52 | }\n      | ^\n/tmp/tmppc_zfv8w.cpp:52:1: warning: no return statement\
    \ in function returning non-void [-Wreturn-type]\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// get_closest_vowel(\"yogurt\") ==> \"u\"\
    \n// get_closest_vowel(\"FULL\") ==> \"U\"\n// get_closest_vowel(\"quick\") ==>\
    \ \"\"\n// get_closest_vowel(\"ab\") ==> \"\"\nstd::string get_closest_vowel(std::string\
    \ word) {\n    // Write your code here\n    std::string vowels = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse = \"AEIOUaeiou\";\n    std::string vowels_reverse_reverse\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_reverse_reverse = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse_reverse_reverse_reverse = \"AEIOUaeiou\";\n\
    \    std::string vowels_reverse_reverse_reverse_reverse_reverse = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse = \"\
    AEIOUaeiou\";\n    std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n}\nint main() {\n    auto candidate = get_closest_vowel;\n\
    \    assert(candidate((\"yogurt\")) == (\"u\"));\n    assert(candidate((\"full\"\
    )) == (\"u\"));\n    assert(candidate((\"easy\")) == (\"\"));\n    assert(candidate((\"\
    eAsy\")) == (\"\"));\n    assert(candidate((\"ali\")) == (\"\"));\n    assert(candidate((\"\
    bad\")) == (\"a\"));\n    assert(candidate((\"most\")) == (\"o\"));\n    assert(candidate((\"\
    ab\")) == (\"\"));\n    assert(candidate((\"ba\")) == (\"\"));\n    assert(candidate((\"\
    quick\")) == (\"\"));\n    assert(candidate((\"anime\")) == (\"i\"));\n    assert(candidate((\"\
    Asia\")) == (\"\"));\n    assert(candidate((\"Above\")) == (\"o\"));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp6qc8t_fd.cpp: In function \u2018std::string get_closest_vowel(std::string)\u2019\
    :\n/tmp/tmp6qc8t_fd.cpp:23:17: error: redeclaration of \u2018std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse\u2019\
    \n   23 |     std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmp6qc8t_fd.cpp:22:17: note: \u2018std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse\u2019\
    \ previously declared here\n   22 |     std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmp6qc8t_fd.cpp:25:17: error: redeclaration of \u2018std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\u2019\
    \n   25 |     std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmp6qc8t_fd.cpp:24:17: note: \u2018std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\u2019\
    \ previously declared here\n   24 |     std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmp6qc8t_fd.cpp:27:17: error: redeclaration of \u2018std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\u2019\
    \n   27 |     std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmp6qc8t_fd.cpp:26:17: note: \u2018std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\u2019\
    \ previously declared here\n   26 |     std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmp6qc8t_fd.cpp:29:17: error: redeclaration of \u2018std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\u2019\
    \n   29 |     std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmp6qc8t_fd.cpp:28:17: note: \u2018std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\u2019\
    \ previously declared here\n   28 |     std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmp6qc8t_fd.cpp:31:17: error: redeclaration of \u2018std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\u2019\
    \n   31 |     std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmp6qc8t_fd.cpp:30:17: note: \u2018std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\u2019\
    \ previously declared here\n   30 |     std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmp6qc8t_fd.cpp:32:17: error: redeclaration of \u2018std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\u2019\
    \n   32 |     std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmp6qc8t_fd.cpp:30:17: note: \u2018std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\u2019\
    \ previously declared here\n   30 |     std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmp6qc8t_fd.cpp:33:17: error: redeclaration of \u2018std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\u2019\
    \n   33 |     std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmp6qc8t_fd.cpp:30:17: note: \u2018std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\u2019\
    \ previously declared here\n   30 |     std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmp6qc8t_fd.cpp:34:17: error: redeclaration of \u2018std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\u2019\
    \n   34 |     std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmp6qc8t_fd.cpp:30:17: note: \u2018std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\u2019\
    \ previously declared here\n   30 |     std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmp6qc8t_fd.cpp:35:1: warning: no return statement in function returning\
    \ non-void [-Wreturn-type]\n   35 | }\n      | ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// get_closest_vowel(\"yogurt\") ==> \"u\"\
    \n// get_closest_vowel(\"FULL\") ==> \"U\"\n// get_closest_vowel(\"quick\") ==>\
    \ \"\"\n// get_closest_vowel(\"ab\") ==> \"\"\nstd::string get_closest_vowel(std::string\
    \ word) {\n    std::string vowels = \"AEIOUaeiou\";\n    std::string vowels_reverse\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_reverse = \"AEIOUaeiou\";\n\
    \    std::string vowels_reverse_back = \"AEIOUaeiou\";\n    std::string vowels_reverse_back_reverse\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_back_reverse_back = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse_back_reverse_back_reverse = \"AEIOUaeiou\";\n\
    \    std::string vowels_reverse_back_reverse_back_reverse_back = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse = \"\
    AEIOUaeiou\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\
    \ = \"AE\n}\nint main() {\n    auto candidate = get_closest_vowel;\n    assert(candidate((\"\
    yogurt\")) == (\"u\"));\n    assert(candidate((\"full\")) == (\"u\"));\n    assert(candidate((\"\
    easy\")) == (\"\"));\n    assert(candidate((\"eAsy\")) == (\"\"));\n    assert(candidate((\"\
    ali\")) == (\"\"));\n    assert(candidate((\"bad\")) == (\"a\"));\n    assert(candidate((\"\
    most\")) == (\"o\"));\n    assert(candidate((\"ab\")) == (\"\"));\n    assert(candidate((\"\
    ba\")) == (\"\"));\n    assert(candidate((\"quick\")) == (\"\"));\n    assert(candidate((\"\
    anime\")) == (\"i\"));\n    assert(candidate((\"Asia\")) == (\"\"));\n    assert(candidate((\"\
    Above\")) == (\"o\"));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpbhw9xuzt.cpp:34:143: warning: missing terminating \" character\n\
    \   34 |     std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\
    \ = \"AE\n      |                                                            \
    \                                                                            \
    \       ^\n/tmp/tmpbhw9xuzt.cpp:34:143: error: missing terminating \" character\n\
    \   34 |     std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\
    \ = \"AE\n      |                                                            \
    \                                                                            \
    \       ^~~\n/tmp/tmpbhw9xuzt.cpp: In function \u2018std::string get_closest_vowel(std::string)\u2019\
    :\n/tmp/tmpbhw9xuzt.cpp:32:17: error: redeclaration of \u2018std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\u2019\
    \n   32 |     std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\
    \ = \"AEIOUaeiou\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpbhw9xuzt.cpp:31:17: note: \u2018std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\u2019\
    \ previously declared here\n   31 |     std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\
    \ = \"AEIOUaeiou\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpbhw9xuzt.cpp:33:17: error: redeclaration of \u2018std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\u2019\
    \n   33 |     std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\
    \ = \"AEIOUaeiou\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpbhw9xuzt.cpp:31:17: note: \u2018std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\u2019\
    \ previously declared here\n   31 |     std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\
    \ = \"AEIOUaeiou\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpbhw9xuzt.cpp:35:1: error: expected primary-expression before \u2018}\u2019\
    \ token\n   35 | }\n      | ^\n/tmp/tmpbhw9xuzt.cpp:35:1: error: expected \u2018\
    ,\u2019 or \u2018;\u2019 before \u2018}\u2019 token\n/tmp/tmpbhw9xuzt.cpp:35:1:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// get_closest_vowel(\"yogurt\") ==> \"u\"\
    \n// get_closest_vowel(\"FULL\") ==> \"U\"\n// get_closest_vowel(\"quick\") ==>\
    \ \"\"\n// get_closest_vowel(\"ab\") ==> \"\"\nstd::string get_closest_vowel(std::string\
    \ word) {\n    std::string vowels = \"AEIOUaeiou\";\n    std::string vowels_reverse\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_reverse = \"AEIOUaeiou\";\n\
    \    std::string vowels_reverse_reverse_reverse = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse_reverse_reverse_reverse = \"AEIOUaeiou\";\n    std::string vowels_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AE\n}\nint main() {\n    auto candidate = get_closest_vowel;\n    assert(candidate((\"\
    yogurt\")) == (\"u\"));\n    assert(candidate((\"full\")) == (\"u\"));\n    assert(candidate((\"\
    easy\")) == (\"\"));\n    assert(candidate((\"eAsy\")) == (\"\"));\n    assert(candidate((\"\
    ali\")) == (\"\"));\n    assert(candidate((\"bad\")) == (\"a\"));\n    assert(candidate((\"\
    most\")) == (\"o\"));\n    assert(candidate((\"ab\")) == (\"\"));\n    assert(candidate((\"\
    ba\")) == (\"\"));\n    assert(candidate((\"quick\")) == (\"\"));\n    assert(candidate((\"\
    anime\")) == (\"i\"));\n    assert(candidate((\"Asia\")) == (\"\"));\n    assert(candidate((\"\
    Above\")) == (\"o\"));\n}\n"
  stdout: ''
  stderr: "/tmp/tmplh4sa9qt.cpp:35:90: warning: missing terminating \" character\n\
    \   35 |     std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AE\n      |                                                            \
    \                              ^\n/tmp/tmplh4sa9qt.cpp:35:90: error: missing terminating\
    \ \" character\n   35 |     std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AE\n      |                                                            \
    \                              ^~~\n/tmp/tmplh4sa9qt.cpp: In function \u2018std::string\
    \ get_closest_vowel(std::string)\u2019:\n/tmp/tmplh4sa9qt.cpp:22:17: error: redeclaration\
    \ of \u2018std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse\u2019\
    \n   22 |     std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmplh4sa9qt.cpp:21:17: note: \u2018std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse\u2019\
    \ previously declared here\n   21 |     std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmplh4sa9qt.cpp:23:17: error: redeclaration of \u2018std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse\u2019\
    \n   23 |     std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmplh4sa9qt.cpp:21:17: note: \u2018std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse\u2019\
    \ previously declared here\n   21 |     std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmplh4sa9qt.cpp:25:17: error: redeclaration of \u2018std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\u2019\
    \n   25 |     std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmplh4sa9qt.cpp:24:17: note: \u2018std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\u2019\
    \ previously declared here\n   24 |     std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmplh4sa9qt.cpp:26:17: error: redeclaration of \u2018std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\u2019\
    \n   26 |     std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmplh4sa9qt.cpp:24:17: note: \u2018std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\u2019\
    \ previously declared here\n   24 |     std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmplh4sa9qt.cpp:27:17: error: redeclaration of \u2018std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\u2019\
    \n   27 |     std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmplh4sa9qt.cpp:24:17: note: \u2018std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\u2019\
    \ previously declared here\n   24 |     std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmplh4sa9qt.cpp:28:17: error: redeclaration of \u2018std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\u2019\
    \n   28 |     std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmplh4sa9qt.cpp:24:17: note: \u2018std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\u2019\
    \ previously declared here\n   24 |     std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmplh4sa9qt.cpp:29:17: error: redeclaration of \u2018std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\u2019\
    \n   29 |     std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmplh4sa9qt.cpp:24:17: note: \u2018std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\u2019\
    \ previously declared here\n   24 |     std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmplh4sa9qt.cpp:30:17: error: redeclaration of \u2018std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\u2019\
    \n   30 |     std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmplh4sa9qt.cpp:24:17: note: \u2018std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\u2019\
    \ previously declared here\n   24 |     std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmplh4sa9qt.cpp:31:17: error: redeclaration of \u2018std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\u2019\
    \n   31 |     std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmplh4sa9qt.cpp:24:17: note: \u2018std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\u2019\
    \ previously declared here\n   24 |     std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmplh4sa9qt.cpp:32:17: error: redeclaration of \u2018std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\u2019\
    \n   32 |     std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmplh4sa9qt.cpp:24:17: note: \u2018std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\u2019\
    \ previously declared here\n   24 |     std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmplh4sa9qt.cpp:33:17: error: redeclaration of \u2018std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\u2019\
    \n   33 |     std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmplh4sa9qt.cpp:24:17: note: \u2018std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\u2019\
    \ previously declared here\n   24 |     std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmplh4sa9qt.cpp:34:17: error: redeclaration of \u2018std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\u2019\
    \n   34 |     std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmplh4sa9qt.cpp:24:17: note: \u2018std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\u2019\
    \ previously declared here\n   24 |     std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmplh4sa9qt.cpp:35:17: error: redeclaration of \u2018std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\u2019\
    \n   35 |     std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AE\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmplh4sa9qt.cpp:24:17: note: \u2018std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\u2019\
    \ previously declared here\n   24 |     std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmplh4sa9qt.cpp:36:1: error: expected primary-expression before \u2018}\u2019\
    \ token\n   36 | }\n      | ^\n/tmp/tmplh4sa9qt.cpp:36:1: warning: no return statement\
    \ in function returning non-void [-Wreturn-type]\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// get_closest_vowel(\"yogurt\") ==> \"u\"\
    \n// get_closest_vowel(\"FULL\") ==> \"U\"\n// get_closest_vowel(\"quick\") ==>\
    \ \"\"\n// get_closest_vowel(\"ab\") ==> \"\"\nstd::string get_closest_vowel(std::string\
    \ word) {\n    // Write your code here\n    std::string vowels = \"aeiouAEIOU\"\
    ;\n    std::string vowels_end = \"AEIOUaeiou\";\n    std::string vowels_start\
    \ = \"aeiouAEIOU\";\n    std::string vowels_start_end = \"AEIOUaeiou\";\n    std::string\
    \ vowels_start_end_end = \"aeiouAEIOUaeiou\";\n    std::string vowels_start_end_end_end\
    \ = \"aeiouAEIOUaeiou\";\n    std::string vowels_start_end_end_end_end = \"aeiouAEIOUaeiou\"\
    ;\n    std::string vowels_start_end_end_end_end_end = \"aeiouAEIOUaeiou\";\n \
    \   std::string vowels_start_end_end_end_end_end_end = \"aeiouAEIOUaeiou\";\n\
    \    std::string vowels_start_end_end_end_end_end_end_end = \"aeiouAEIOUaeiou\"\
    ;\n    std::string vowels_start_end_end_end_end_end_end_end_end = \"aeiouAEIOUaeiou\"\
    ;\n    std::string vowels_start_end_end_end_end_end_end_end_end_end = \"aeiouAEIOUaeiou\"\
    ;\n    std::string vowels_start_end_end_end_end_end_end_end_end_end_end = \"aeiouAEIOUaeiou\"\
    ;\n    std::string vowels_start_end_end_end_end_end_end_end_end_end_end = \"aeiouAEIOUaeiou\"\
    ;\n    std::string vowels_start_end_end_end_end_end_end_end_end_end_end_end =\
    \ \"aeiouAEIOUaeiou\";\n    std::string vowels_start_end_end_end_end_end_end_end_end_end_end_end_end\
    \ = \"aeiouAEIOUaeiou\";\n    std::string vowels_start_end_end_end_end_end_end_end_end_end_end_end_end\
    \ = \"aeiouAEIOUaeiou\";\n    std::string vowels_start_end_end_end_end_end_end_end_end_end_end_end_end\
    \ = \"aeiouAEIOUaeiou\";\n    std::string vowels_start_end_end_end_end_end_end_end_end_end_end_end_end_end\
    \ = \"aeiouAEIOUaeiou\";\n    std::string vowels_start_end_end_end_end_end_end_end_end_end_end_end_end_end_end\
    \ = \"aeiouAEIOUaeiou\";\n    std::string vowels_start_end_end_end_end_end_end_end_end_end_end_end_end_end_end\
    \ = \"aeiouAEIOUaeiou\";\n    std::string vowels_start_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end\
    \ = \"aeiouAEIOUaeiou\";\n    std::string vowels_start_end_end_end_end_end_end_end_end_end_end_end_end_end_end_\n\
    }\nint main() {\n    auto candidate = get_closest_vowel;\n    assert(candidate((\"\
    yogurt\")) == (\"u\"));\n    assert(candidate((\"full\")) == (\"u\"));\n    assert(candidate((\"\
    easy\")) == (\"\"));\n    assert(candidate((\"eAsy\")) == (\"\"));\n    assert(candidate((\"\
    ali\")) == (\"\"));\n    assert(candidate((\"bad\")) == (\"a\"));\n    assert(candidate((\"\
    most\")) == (\"o\"));\n    assert(candidate((\"ab\")) == (\"\"));\n    assert(candidate((\"\
    ba\")) == (\"\"));\n    assert(candidate((\"quick\")) == (\"\"));\n    assert(candidate((\"\
    anime\")) == (\"i\"));\n    assert(candidate((\"Asia\")) == (\"\"));\n    assert(candidate((\"\
    Above\")) == (\"o\"));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp4s2f3_hq.cpp: In function \u2018std::string get_closest_vowel(std::string)\u2019\
    :\n/tmp/tmp4s2f3_hq.cpp:28:17: error: redeclaration of \u2018std::string vowels_start_end_end_end_end_end_end_end_end_end_end\u2019\
    \n   28 |     std::string vowels_start_end_end_end_end_end_end_end_end_end_end\
    \ = \"aeiouAEIOUaeiou\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmp4s2f3_hq.cpp:27:17: note: \u2018std::string vowels_start_end_end_end_end_end_end_end_end_end_end\u2019\
    \ previously declared here\n   27 |     std::string vowels_start_end_end_end_end_end_end_end_end_end_end\
    \ = \"aeiouAEIOUaeiou\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmp4s2f3_hq.cpp:31:17: error: redeclaration of \u2018std::string vowels_start_end_end_end_end_end_end_end_end_end_end_end_end\u2019\
    \n   31 |     std::string vowels_start_end_end_end_end_end_end_end_end_end_end_end_end\
    \ = \"aeiouAEIOUaeiou\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmp4s2f3_hq.cpp:30:17: note: \u2018std::string vowels_start_end_end_end_end_end_end_end_end_end_end_end_end\u2019\
    \ previously declared here\n   30 |     std::string vowels_start_end_end_end_end_end_end_end_end_end_end_end_end\
    \ = \"aeiouAEIOUaeiou\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmp4s2f3_hq.cpp:32:17: error: redeclaration of \u2018std::string vowels_start_end_end_end_end_end_end_end_end_end_end_end_end\u2019\
    \n   32 |     std::string vowels_start_end_end_end_end_end_end_end_end_end_end_end_end\
    \ = \"aeiouAEIOUaeiou\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmp4s2f3_hq.cpp:30:17: note: \u2018std::string vowels_start_end_end_end_end_end_end_end_end_end_end_end_end\u2019\
    \ previously declared here\n   30 |     std::string vowels_start_end_end_end_end_end_end_end_end_end_end_end_end\
    \ = \"aeiouAEIOUaeiou\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmp4s2f3_hq.cpp:35:17: error: redeclaration of \u2018std::string vowels_start_end_end_end_end_end_end_end_end_end_end_end_end_end_end\u2019\
    \n   35 |     std::string vowels_start_end_end_end_end_end_end_end_end_end_end_end_end_end_end\
    \ = \"aeiouAEIOUaeiou\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmp4s2f3_hq.cpp:34:17: note: \u2018std::string vowels_start_end_end_end_end_end_end_end_end_end_end_end_end_end_end\u2019\
    \ previously declared here\n   34 |     std::string vowels_start_end_end_end_end_end_end_end_end_end_end_end_end_end_end\
    \ = \"aeiouAEIOUaeiou\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmp4s2f3_hq.cpp:38:1: error: expected initializer before \u2018}\u2019 token\n\
    \   38 | }\n      | ^\n/tmp/tmp4s2f3_hq.cpp:38:1: warning: no return statement\
    \ in function returning non-void [-Wreturn-type]\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// get_closest_vowel(\"yogurt\") ==> \"u\"\
    \n// get_closest_vowel(\"FULL\") ==> \"U\"\n// get_closest_vowel(\"quick\") ==>\
    \ \"\"\n// get_closest_vowel(\"ab\") ==> \"\"\nstd::string get_closest_vowel(std::string\
    \ word) {\n    std::string vowels = \"AEIOUaeiou\";\n    std::string vowels_reverse\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse2 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse3 = \"AEIOUaeiou\";\n    std::string vowels_reverse4 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse5 = \"AEIOUaeiou\";\n    std::string vowels_reverse6\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse7 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse8 = \"AEIOUaeiou\";\n    std::string vowels_reverse9 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse10 = \"AEIOUaeiou\";\n    std::string vowels_reverse11\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse12 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse13 = \"AEIOUaeiou\";\n    std::string vowels_reverse14 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse15 = \"AEIOUaeiou\";\n    std::string vowels_reverse16\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse17 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse18 = \"AEIOUaeiou\";\n    std::string vowels_reverse19 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse20 = \"AEIOUaeiou\";\n    std::string vowels_reverse21\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse22 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse23 = \"AEIOUaeiou\";\n    std::string vowels_reverse24 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse25 = \"AEIOUaeiou\";\n    std::string vowels_reverse26\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse27 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse28 = \"AEIOUaeiou\";\n    std::string vowels_reverse29 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse30 = \"AEIOUaeiou\";\n    std::string vowels_reverse31\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse32 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse33 = \"AEIOUaeiou\";\n    std::string vowels_reverse34 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse35 = \"AEIOUaeiou\";\n    std::string vowels_reverse36\
    \ = \"AEIOU\n}\nint main() {\n    auto candidate = get_closest_vowel;\n    assert(candidate((\"\
    yogurt\")) == (\"u\"));\n    assert(candidate((\"full\")) == (\"u\"));\n    assert(candidate((\"\
    easy\")) == (\"\"));\n    assert(candidate((\"eAsy\")) == (\"\"));\n    assert(candidate((\"\
    ali\")) == (\"\"));\n    assert(candidate((\"bad\")) == (\"a\"));\n    assert(candidate((\"\
    most\")) == (\"o\"));\n    assert(candidate((\"ab\")) == (\"\"));\n    assert(candidate((\"\
    ba\")) == (\"\"));\n    assert(candidate((\"quick\")) == (\"\"));\n    assert(candidate((\"\
    anime\")) == (\"i\"));\n    assert(candidate((\"Asia\")) == (\"\"));\n    assert(candidate((\"\
    Above\")) == (\"o\"));\n}\n"
  stdout: ''
  stderr: "/tmp/tmptr0u8ko9.cpp:50:36: warning: missing terminating \" character\n\
    \   50 |     std::string vowels_reverse36 = \"AEIOU\n      |                 \
    \                   ^\n/tmp/tmptr0u8ko9.cpp:50:36: error: missing terminating\
    \ \" character\n   50 |     std::string vowels_reverse36 = \"AEIOU\n      |  \
    \                                  ^~~~~~\n/tmp/tmptr0u8ko9.cpp: In function \u2018\
    std::string get_closest_vowel(std::string)\u2019:\n/tmp/tmptr0u8ko9.cpp:51:1:\
    \ error: expected primary-expression before \u2018}\u2019 token\n   51 | }\n \
    \     | ^\n/tmp/tmptr0u8ko9.cpp:51:1: error: expected \u2018,\u2019 or \u2018\
    ;\u2019 before \u2018}\u2019 token\n/tmp/tmptr0u8ko9.cpp:51:1: warning: no return\
    \ statement in function returning non-void [-Wreturn-type]\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// get_closest_vowel(\"yogurt\") ==> \"u\"\
    \n// get_closest_vowel(\"FULL\") ==> \"U\"\n// get_closest_vowel(\"quick\") ==>\
    \ \"\"\n// get_closest_vowel(\"ab\") ==> \"\"\nstd::string get_closest_vowel(std::string\
    \ word) {\n    std::string vowels = \"aeiouAEIOU\";\n    std::string vowels_reversed\
    \ = vowels.substr(0, vowels.size() - 1);\n    std::string vowels_reversed_upper\
    \ = vowels_reversed.toUpper();\n    std::string vowels_reversed_lower = vowels_reversed.toLower();\n\
    \    std::string vowels_reversed_upper_reversed = vowels_reversed_upper.substr(0,\
    \ vowels_reversed_upper.size() - 1);\n    std::string vowels_reversed_lower_reversed\
    \ = vowels_reversed_lower.substr(0, vowels_reversed_lower.size() - 1);\n    std::string\
    \ vowels_reversed_upper_reversed_reversed = vowels_reversed_upper_reversed.substr(0,\
    \ vowels_reversed_upper_reversed.size() - 1);\n    std::string vowels_reversed_lower_reversed_reversed\
    \ = vowels_reversed_lower_reversed.substr(0, vowels_reversed_lower_reversed.size()\
    \ - 1);\n    std::string vowels_reversed_upper_reversed_reversed_reversed = vowels_reversed_upper_reversed_reversed.substr(0,\
    \ vowels_reversed_upper_reversed_reversed.size() - 1);\n    std::string vowels_reversed_lower_reversed_reversed_reversed\
    \ = vowels_reversed_lower_reversed_reversed.substr(0, vowels_reversed_lower_reversed_reversed.size()\
    \ - 1);\n    std::string vowels_reversed_upper_reversed_reversed_reversed_reversed\
    \ = vowels_reversed_upper_reversed_reversed_reversed.substr(0, vowels_reversed_upper_reversed_reversed_reversed.size()\
    \ - 1);\n    std::string vowels_reversed_lower_reversed_reversed_reversed_reversed\
    \ = vowels_reversed_lower_reversed_reversed_reversed.substr(0, vowels_reversed_lower_reversed_reversed_reversed.size()\
    \ - 1);\n    std::string vowels_reversed_upper_reversed_reversed_reversed_reversed_reversed\
    \ = vowels_reversed_upper_reversed_reversed_reversed_reversed.substr(0, vowels_reversed_upper_reversed_reversed_reversed_reversed.size()\
    \ - 1);\n    std::string vowels_reversed_lower_reversed_reversed_reversed_reversed_reversed\
    \ = vowels_reversed_lower_reversed_reversed_reversed_reversed_reversed.substr(0,\
    \ vowels_reversed_lower_reversed_reversed_reversed_reversed_reversed.size() -\
    \ 1);\n    std::string vowels_reversed_upper_reversed_reversed_reversed_reversed_reversed_reversed\
    \ = vowels_reversed_upper_reversed_reversed_reversed_reversed_reversed_reversed.substr(0,\
    \ vowels_reversed_upper_reversed_reversed_reversed_reversed_reversed_reversed.size()\
    \ - 1);\n    std::string \n}\nint main() {\n    auto candidate = get_closest_vowel;\n\
    \    assert(candidate((\"yogurt\")) == (\"u\"));\n    assert(candidate((\"full\"\
    )) == (\"u\"));\n    assert(candidate((\"easy\")) == (\"\"));\n    assert(candidate((\"\
    eAsy\")) == (\"\"));\n    assert(candidate((\"ali\")) == (\"\"));\n    assert(candidate((\"\
    bad\")) == (\"a\"));\n    assert(candidate((\"most\")) == (\"o\"));\n    assert(candidate((\"\
    ab\")) == (\"\"));\n    assert(candidate((\"ba\")) == (\"\"));\n    assert(candidate((\"\
    quick\")) == (\"\"));\n    assert(candidate((\"anime\")) == (\"i\"));\n    assert(candidate((\"\
    Asia\")) == (\"\"));\n    assert(candidate((\"Above\")) == (\"o\"));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp1bouumr6.cpp: In function \u2018std::string get_closest_vowel(std::string)\u2019\
    :\n/tmp/tmp1bouumr6.cpp:16:57: error: \u2018std::string\u2019 {aka \u2018class\
    \ std::__cxx11::basic_string<char>\u2019} has no member named \u2018toUpper\u2019\
    \n   16 |     std::string vowels_reversed_upper = vowels_reversed.toUpper();\n\
    \      |                                                         ^~~~~~~\n/tmp/tmp1bouumr6.cpp:17:57:\
    \ error: \u2018std::string\u2019 {aka \u2018class std::__cxx11::basic_string<char>\u2019\
    } has no member named \u2018toLower\u2019\n   17 |     std::string vowels_reversed_lower\
    \ = vowels_reversed.toLower();\n      |                                      \
    \                   ^~~~~~~\n/tmp/tmp1bouumr6.cpp:30:1: error: expected unqualified-id\
    \ before \u2018}\u2019 token\n   30 | }\n      | ^\n/tmp/tmp1bouumr6.cpp:30:1:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// get_closest_vowel(\"yogurt\") ==> \"u\"\
    \n// get_closest_vowel(\"FULL\") ==> \"U\"\n// get_closest_vowel(\"quick\") ==>\
    \ \"\"\n// get_closest_vowel(\"ab\") ==> \"\"\nstd::string get_closest_vowel(std::string\
    \ word) {\n    int n = word.length();\n    int vowel_count = 0;\n    for (int\
    \ i = 0; i < n; i++) {\n        if (word[i] == 'a' || word[i] == 'e' || word[i]\
    \ == 'i' || word[i] == 'o' || word[i] == 'u' || word[i] == 'A' || word[i] == 'E'\
    \ || word[i] == 'I' || word[i] == 'O' || word[i] == 'U') {\n            vowel_count++;\n\
    \        }\n    }\n    if (vowel_count > 0) {\n        int vowel_start = n - vowel_count;\n\
    \        int vowel_end = n - 1;\n        int vowel_mid = vowel_start + vowel_end\
    \ / 2;\n        if (vowel_mid >= 0 && vowel_mid < n) {\n            if (word[vowel_mid]\
    \ == 'a' || word[vowel_mid] == 'e' || word[vowel_mid] == 'i' || word[vowel_mid]\
    \ == 'o' || word[vowel_mid] == 'u' || word[vowel_mid] == 'A' || word[vowel_mid]\
    \ == 'E' || word[vowel_mid] == 'I' || word[vowel_mid] == 'O' || word[vowel_mid]\
    \ == 'U') {\n                return word[vowel_mid];\n            }\n        }\n\
    \    }\n    return \"\";\n}\nint main() {\n    auto candidate = get_closest_vowel;\n\
    \    assert(candidate((\"yogurt\")) == (\"u\"));\n    assert(candidate((\"full\"\
    )) == (\"u\"));\n    assert(candidate((\"easy\")) == (\"\"));\n    assert(candidate((\"\
    eAsy\")) == (\"\"));\n    assert(candidate((\"ali\")) == (\"\"));\n    assert(candidate((\"\
    bad\")) == (\"a\"));\n    assert(candidate((\"most\")) == (\"o\"));\n    assert(candidate((\"\
    ab\")) == (\"\"));\n    assert(candidate((\"ba\")) == (\"\"));\n    assert(candidate((\"\
    quick\")) == (\"\"));\n    assert(candidate((\"anime\")) == (\"i\"));\n    assert(candidate((\"\
    Asia\")) == (\"\"));\n    assert(candidate((\"Above\")) == (\"o\"));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp4ncngzzo.cpp: In function \u2018std::string get_closest_vowel(std::string)\u2019\
    :\n/tmp/tmp4ncngzzo.cpp:27:38: error: could not convert \u2018word.std::__cxx11::basic_string<char>::operator[](((std::__cxx11::basic_string<char>::size_type)vowel_mid))\u2019\
    \ from \u2018__gnu_cxx::__alloc_traits<std::allocator<char>, char>::value_type\u2019\
    \ {aka \u2018char\u2019} to \u2018std::string\u2019 {aka \u2018std::__cxx11::basic_string<char>\u2019\
    }\n   27 |                 return word[vowel_mid];\n      |                  \
    \                    ^\n      |                                      |\n     \
    \ |                                      __gnu_cxx::__alloc_traits<std::allocator<char>,\
    \ char>::value_type {aka char}\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// get_closest_vowel(\"yogurt\") ==> \"u\"\
    \n// get_closest_vowel(\"FULL\") ==> \"U\"\n// get_closest_vowel(\"quick\") ==>\
    \ \"\"\n// get_closest_vowel(\"ab\") ==> \"\"\nstd::string get_closest_vowel(std::string\
    \ word) {\n    std::string vowels = \"aeiouAEIOU\";\n    std::string vowels_reversed\
    \ = vowels.substr(0, vowels.size() - 1) + vowels.substr(1, vowels.size());\n \
    \   std::string vowels_reversed_reversed = vowels_reversed.substr(0, vowels_reversed.size()\
    \ - 1) + vowels_reversed.substr(1, vowels_reversed.size());\n    std::string vowels_reversed_reversed_reversed\
    \ = vowels_reversed_reversed.substr(0, vowels_reversed_reversed.size() - 1) +\
    \ vowels_reversed_reversed.substr(1, vowels_reversed_reversed.size());\n    std::string\
    \ vowels_reversed_reversed_reversed_reversed = vowels_reversed_reversed_reversed.substr(0,\
    \ vowels_reversed_reversed_reversed.size() - 1) + vowels_reversed_reversed_reversed.substr(1,\
    \ vowels_reversed_reversed_reversed.size());\n    std::string vowels_reversed_reversed_reversed_reversed_reversed\
    \ = vowels_reversed_reversed_reversed_reversed.substr(0, vowels_reversed_reversed_reversed_reversed.size()\
    \ - 1) + vowels_reversed_reversed_reversed_reversed.substr(1, vowels_reversed_reversed_reversed_reversed.size());\n\
    \    std::string vowels_reversed_reversed_reversed_reversed_reversed_reversed\
    \ = vowels_reversed_reversed_reversed_reversed_reversed.substr(0, vowels_reversed_reversed_reversed_reversed_reversed.size()\
    \ - 1) + vowels_reversed_reversed_reversed_reversed_reversed.substr(1, vowels_reversed_reversed_reversed_reversed_reversed.size());\n\
    \    std::string vowels_reversed_reversed_reversed_reversed_reversed_reversed_reversed\
    \ = vowels_reversed_reversed_reversed_reversed_reversed_reversed_reversed.substr(0,\
    \ vowels_reversed_reversed_reversed_reversed_reversed_reversed.size() - 1) + vowels_reversed_reversed_reversed_reversed_reversed_reversed.substr(1,\
    \ vowels_reversed_reversed_reversed_reversed_reversed_reversed.size());\n    std::string\
    \ vowels_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed\
    \ = vowels_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed.substr(0,\
    \ vowels_reversed_reversed_reversed_reversed_reversed_reversed_reversed.size()\
    \ - 1) + vowels_reversed_reversed_reversed_reversed_reversed_reversed_reversed.substr(1,\
    \ vowels_reversed_reversed_reversed_reversed_reversed_reversed_reversed.size());\n\
    \    std::string vowels_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed\
    \ = vowels_reversed_reverse\n}\nint main() {\n    auto candidate = get_closest_vowel;\n\
    \    assert(candidate((\"yogurt\")) == (\"u\"));\n    assert(candidate((\"full\"\
    )) == (\"u\"));\n    assert(candidate((\"easy\")) == (\"\"));\n    assert(candidate((\"\
    eAsy\")) == (\"\"));\n    assert(candidate((\"ali\")) == (\"\"));\n    assert(candidate((\"\
    bad\")) == (\"a\"));\n    assert(candidate((\"most\")) == (\"o\"));\n    assert(candidate((\"\
    ab\")) == (\"\"));\n    assert(candidate((\"ba\")) == (\"\"));\n    assert(candidate((\"\
    quick\")) == (\"\"));\n    assert(candidate((\"anime\")) == (\"i\"));\n    assert(candidate((\"\
    Asia\")) == (\"\"));\n    assert(candidate((\"Above\")) == (\"o\"));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp3o7dbdv5.cpp: In function \u2018std::string get_closest_vowel(std::string)\u2019\
    :\n/tmp/tmp3o7dbdv5.cpp:23:107: error: \u2018vowels_reversed_reverse\u2019 was\
    \ not declared in this scope; did you mean \u2018vowels_reversed_reversed\u2019\
    ?\n   23 |     std::string vowels_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed\
    \ = vowels_reversed_reverse\n      |                                         \
    \                                                                  ^~~~~~~~~~~~~~~~~~~~~~~\n\
    \      |                                                                     \
    \                                      vowels_reversed_reversed\n/tmp/tmp3o7dbdv5.cpp:24:1:\
    \ error: expected \u2018,\u2019 or \u2018;\u2019 before \u2018}\u2019 token\n\
    \   24 | }\n      | ^\n/tmp/tmp3o7dbdv5.cpp:24:1: warning: no return statement\
    \ in function returning non-void [-Wreturn-type]\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// get_closest_vowel(\"yogurt\") ==> \"u\"\
    \n// get_closest_vowel(\"FULL\") ==> \"U\"\n// get_closest_vowel(\"quick\") ==>\
    \ \"\"\n// get_closest_vowel(\"ab\") ==> \"\"\nstd::string get_closest_vowel(std::string\
    \ word) {\n    std::string vowels = \"AEIOUaeiou\";\n    std::string vowels_reverse\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse2 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse3 = \"AEIOUaeiou\";\n    std::string vowels_reverse4 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse5 = \"AEIOUaeiou\";\n    std::string vowels_reverse6\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse7 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse8 = \"AEIOUaeiou\";\n    std::string vowels_reverse9 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse10 = \"AEIOUaeiou\";\n    std::string vowels_reverse11\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse12 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse13 = \"AEIOUaeiou\";\n    std::string vowels_reverse14 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse15 = \"AEIOUaeiou\";\n    std::string vowels_reverse16\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse17 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse18 = \"AEIOUaeiou\";\n    std::string vowels_reverse19 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse20 = \"AEIOUaeiou\";\n    std::string vowels_reverse21\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse22 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse23 = \"AEIOUaeiou\";\n    std::string vowels_reverse24 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse25 = \"AEIOUaeiou\";\n    std::string vowels_reverse26\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse27 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse28 = \"AEIOUaeiou\";\n    std::string vowels_reverse29 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse30 = \"AEIOUaeiou\";\n    std::string vowels_reverse31\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse32 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse33 = \"AEIOUaeiou\";\n    std::string vowels_reverse34 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse35 = \"AEIOUaeiou\";\n    std::string vowels_reverse36\
    \ = \"AEIOU\n}\nint main() {\n    auto candidate = get_closest_vowel;\n    assert(candidate((\"\
    yogurt\")) == (\"u\"));\n    assert(candidate((\"full\")) == (\"u\"));\n    assert(candidate((\"\
    easy\")) == (\"\"));\n    assert(candidate((\"eAsy\")) == (\"\"));\n    assert(candidate((\"\
    ali\")) == (\"\"));\n    assert(candidate((\"bad\")) == (\"a\"));\n    assert(candidate((\"\
    most\")) == (\"o\"));\n    assert(candidate((\"ab\")) == (\"\"));\n    assert(candidate((\"\
    ba\")) == (\"\"));\n    assert(candidate((\"quick\")) == (\"\"));\n    assert(candidate((\"\
    anime\")) == (\"i\"));\n    assert(candidate((\"Asia\")) == (\"\"));\n    assert(candidate((\"\
    Above\")) == (\"o\"));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpfylrki9a.cpp:50:36: warning: missing terminating \" character\n\
    \   50 |     std::string vowels_reverse36 = \"AEIOU\n      |                 \
    \                   ^\n/tmp/tmpfylrki9a.cpp:50:36: error: missing terminating\
    \ \" character\n   50 |     std::string vowels_reverse36 = \"AEIOU\n      |  \
    \                                  ^~~~~~\n/tmp/tmpfylrki9a.cpp: In function \u2018\
    std::string get_closest_vowel(std::string)\u2019:\n/tmp/tmpfylrki9a.cpp:51:1:\
    \ error: expected primary-expression before \u2018}\u2019 token\n   51 | }\n \
    \     | ^\n/tmp/tmpfylrki9a.cpp:51:1: error: expected \u2018,\u2019 or \u2018\
    ;\u2019 before \u2018}\u2019 token\n/tmp/tmpfylrki9a.cpp:51:1: warning: no return\
    \ statement in function returning non-void [-Wreturn-type]\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// get_closest_vowel(\"yogurt\") ==> \"u\"\
    \n// get_closest_vowel(\"FULL\") ==> \"U\"\n// get_closest_vowel(\"quick\") ==>\
    \ \"\"\n// get_closest_vowel(\"ab\") ==> \"\"\nstd::string get_closest_vowel(std::string\
    \ word) {\n    int n = word.length();\n    std::string vowels = \"AEIOUaeiou\"\
    ;\n    std::string vowels_rev = \"AEIOUaeiou\";\n    std::string vowels_rev2 =\
    \ \"\";\n    std::string vowels_rev3 = \"\";\n    std::string vowels_rev4 = \"\
    \";\n    std::string vowels_rev5 = \"\";\n    std::string vowels_rev6 = \"\";\n\
    \    std::string vowels_rev7 = \"\";\n    std::string vowels_rev8 = \"\";\n  \
    \  std::string vowels_rev9 = \"\";\n    std::string vowels_rev10 = \"\";\n   \
    \ std::string vowels_rev11 = \"\";\n    std::string vowels_rev12 = \"\";\n   \
    \ std::string vowels_rev13 = \"\";\n    std::string vowels_rev14 = \"\";\n   \
    \ std::string vowels_rev15 = \"\";\n    std::string vowels_rev16 = \"\";\n   \
    \ std::string vowels_rev17 = \"\";\n    std::string vowels_rev18 = \"\";\n   \
    \ std::string vowels_rev19 = \"\";\n    std::string vowels_rev20 = \"\";\n   \
    \ std::string vowels_rev21 = \"\";\n    std::string vowels_rev22 = \"\";\n   \
    \ std::string vowels_rev23 = \"\";\n    std::string vowels_rev24 = \"\";\n   \
    \ std::string vowels_rev25 = \"\";\n    std::string vowels_rev26 = \"\";\n   \
    \ std::string vowels_rev27 = \"\";\n    std::string vowels_rev28 = \"\";\n   \
    \ std::string vowels_rev29 = \"\";\n    std::string vowels_rev30 = \"\";\n   \
    \ std::string vowels_rev31 = \"\";\n    std::string vowels_rev32 = \"\";\n   \
    \ std::string vowels_rev33 = \"\";\n    std::string vowels_rev34 = \"\";\n   \
    \ std::string vowels_rev35 = \"\";\n    std::string vowels_rev36 = \"\";\n   \
    \ std::string vowels_rev37 = \"\";\n    std::string vowels_rev38 = \"\";\n   \
    \ std::string vowels_rev39 = \"\";\n    std::string vowels_rev40 = \"\";\n   \
    \ std::string vowels_rev41 = \"\";\n    std::string vowels_rev42 = \"\";\n   \
    \ std::string vowels_rev43 = \"\";\n    std::string vowels_rev44 = \"\";\n   \
    \ std::string vowels_rev45 = \"\";\n    std::string vowels_rev46 = \"\";\n   \
    \ std::string vowels_rev47 = \"\";\n    std::string vowels_rev48 = \"\";\n   \
    \ std::string vowels_rev49 = \"\";\n    std::string vowels_rev50 = \"\";\n   \
    \ std::string vowels_rev51 = \"\";\n    std::string vowels_rev52 = \"\";\n   \
    \ std::string vowels_rev53 = \"\";\n    std::string vowels_rev54 = \"\";\n   \
    \ std::string vowels_rev55 = \"\";\n    std::string vowels_rev56 = \"\";\n   \
    \ std::string vowels_rev57 = \"\";\n    std::string vowels_rev58 = \"\";\n   \
    \ std::string vowels_rev59 = \"\";\n    std::string vowels_rev60 = \"\";\n\n}\n\
    int main() {\n    auto candidate = get_closest_vowel;\n    assert(candidate((\"\
    yogurt\")) == (\"u\"));\n    assert(candidate((\"full\")) == (\"u\"));\n    assert(candidate((\"\
    easy\")) == (\"\"));\n    assert(candidate((\"eAsy\")) == (\"\"));\n    assert(candidate((\"\
    ali\")) == (\"\"));\n    assert(candidate((\"bad\")) == (\"a\"));\n    assert(candidate((\"\
    most\")) == (\"o\"));\n    assert(candidate((\"ab\")) == (\"\"));\n    assert(candidate((\"\
    ba\")) == (\"\"));\n    assert(candidate((\"quick\")) == (\"\"));\n    assert(candidate((\"\
    anime\")) == (\"i\"));\n    assert(candidate((\"Asia\")) == (\"\"));\n    assert(candidate((\"\
    Above\")) == (\"o\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// get_closest_vowel(\"yogurt\") ==> \"u\"\
    \n// get_closest_vowel(\"FULL\") ==> \"U\"\n// get_closest_vowel(\"quick\") ==>\
    \ \"\"\n// get_closest_vowel(\"ab\") ==> \"\"\nstd::string get_closest_vowel(std::string\
    \ word) {\n    std::string vowels = \"AEIOUaeiou\";\n    std::string vowels_reverse\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse2 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse3 = \"AEIOUaeiou\";\n    std::string vowels_reverse4 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse5 = \"AEIOUaeiou\";\n    std::string vowels_reverse6\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse7 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse8 = \"AEIOUaeiou\";\n    std::string vowels_reverse9 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse10 = \"AEIOUaeiou\";\n    std::string vowels_reverse11\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse12 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse13 = \"AEIOUaeiou\";\n    std::string vowels_reverse14 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse15 = \"AEIOUaeiou\";\n    std::string vowels_reverse16\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse17 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse18 = \"AEIOUaeiou\";\n    std::string vowels_reverse19 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse20 = \"AEIOUaeiou\";\n    std::string vowels_reverse21\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse22 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse23 = \"AEIOUaeiou\";\n    std::string vowels_reverse24 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse25 = \"AEIOUaeiou\";\n    std::string vowels_reverse26\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse27 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse28 = \"AEIOUaeiou\";\n    std::string vowels_reverse29 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse30 = \"AEIOUaeiou\";\n    std::string vowels_reverse31\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse32 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse33 = \"AEIOUaeiou\";\n    std::string vowels_reverse34 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse35 = \"AEIOUaeiou\";\n    std::string vowels_reverse36\
    \ = \"AEIOU\n}\nint main() {\n    auto candidate = get_closest_vowel;\n    assert(candidate((\"\
    yogurt\")) == (\"u\"));\n    assert(candidate((\"full\")) == (\"u\"));\n    assert(candidate((\"\
    easy\")) == (\"\"));\n    assert(candidate((\"eAsy\")) == (\"\"));\n    assert(candidate((\"\
    ali\")) == (\"\"));\n    assert(candidate((\"bad\")) == (\"a\"));\n    assert(candidate((\"\
    most\")) == (\"o\"));\n    assert(candidate((\"ab\")) == (\"\"));\n    assert(candidate((\"\
    ba\")) == (\"\"));\n    assert(candidate((\"quick\")) == (\"\"));\n    assert(candidate((\"\
    anime\")) == (\"i\"));\n    assert(candidate((\"Asia\")) == (\"\"));\n    assert(candidate((\"\
    Above\")) == (\"o\"));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp5i3uyukr.cpp:50:36: warning: missing terminating \" character\n\
    \   50 |     std::string vowels_reverse36 = \"AEIOU\n      |                 \
    \                   ^\n/tmp/tmp5i3uyukr.cpp:50:36: error: missing terminating\
    \ \" character\n   50 |     std::string vowels_reverse36 = \"AEIOU\n      |  \
    \                                  ^~~~~~\n/tmp/tmp5i3uyukr.cpp: In function \u2018\
    std::string get_closest_vowel(std::string)\u2019:\n/tmp/tmp5i3uyukr.cpp:51:1:\
    \ error: expected primary-expression before \u2018}\u2019 token\n   51 | }\n \
    \     | ^\n/tmp/tmp5i3uyukr.cpp:51:1: error: expected \u2018,\u2019 or \u2018\
    ;\u2019 before \u2018}\u2019 token\n/tmp/tmp5i3uyukr.cpp:51:1: warning: no return\
    \ statement in function returning non-void [-Wreturn-type]\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// get_closest_vowel(\"yogurt\") ==> \"u\"\
    \n// get_closest_vowel(\"FULL\") ==> \"U\"\n// get_closest_vowel(\"quick\") ==>\
    \ \"\"\n// get_closest_vowel(\"ab\") ==> \"\"\nstd::string get_closest_vowel(std::string\
    \ word) {\n    std::string vowels = \"AEIOUaeiou\";\n    std::string vowels_reverse\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse2 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse3 = \"AEIOUaeiou\";\n    std::string vowels_reverse4 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse5 = \"AEIOUaeiou\";\n    std::string vowels_reverse6\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse7 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse8 = \"AEIOUaeiou\";\n    std::string vowels_reverse9 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse10 = \"AEIOUaeiou\";\n    std::string vowels_reverse11\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse12 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse13 = \"AEIOUaeiou\";\n    std::string vowels_reverse14 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse15 = \"AEIOUaeiou\";\n    std::string vowels_reverse16\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse17 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse18 = \"AEIOUaeiou\";\n    std::string vowels_reverse19 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse20 = \"AEIOUaeiou\";\n    std::string vowels_reverse21\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse22 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse23 = \"AEIOUaeiou\";\n    std::string vowels_reverse24 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse25 = \"AEIOUaeiou\";\n    std::string vowels_reverse26\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse27 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse28 = \"AEIOUaeiou\";\n    std::string vowels_reverse29 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse30 = \"AEIOUaeiou\";\n    std::string vowels_reverse31\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse32 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse33 = \"AEIOUaeiou\";\n    std::string vowels_reverse34 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse35 = \"AEIOUaeiou\";\n    std::string vowels_reverse36\
    \ = \"AEIOU\n}\nint main() {\n    auto candidate = get_closest_vowel;\n    assert(candidate((\"\
    yogurt\")) == (\"u\"));\n    assert(candidate((\"full\")) == (\"u\"));\n    assert(candidate((\"\
    easy\")) == (\"\"));\n    assert(candidate((\"eAsy\")) == (\"\"));\n    assert(candidate((\"\
    ali\")) == (\"\"));\n    assert(candidate((\"bad\")) == (\"a\"));\n    assert(candidate((\"\
    most\")) == (\"o\"));\n    assert(candidate((\"ab\")) == (\"\"));\n    assert(candidate((\"\
    ba\")) == (\"\"));\n    assert(candidate((\"quick\")) == (\"\"));\n    assert(candidate((\"\
    anime\")) == (\"i\"));\n    assert(candidate((\"Asia\")) == (\"\"));\n    assert(candidate((\"\
    Above\")) == (\"o\"));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp8rc308xr.cpp:50:36: warning: missing terminating \" character\n\
    \   50 |     std::string vowels_reverse36 = \"AEIOU\n      |                 \
    \                   ^\n/tmp/tmp8rc308xr.cpp:50:36: error: missing terminating\
    \ \" character\n   50 |     std::string vowels_reverse36 = \"AEIOU\n      |  \
    \                                  ^~~~~~\n/tmp/tmp8rc308xr.cpp: In function \u2018\
    std::string get_closest_vowel(std::string)\u2019:\n/tmp/tmp8rc308xr.cpp:51:1:\
    \ error: expected primary-expression before \u2018}\u2019 token\n   51 | }\n \
    \     | ^\n/tmp/tmp8rc308xr.cpp:51:1: error: expected \u2018,\u2019 or \u2018\
    ;\u2019 before \u2018}\u2019 token\n/tmp/tmp8rc308xr.cpp:51:1: warning: no return\
    \ statement in function returning non-void [-Wreturn-type]\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// get_closest_vowel(\"yogurt\") ==> \"u\"\
    \n// get_closest_vowel(\"FULL\") ==> \"U\"\n// get_closest_vowel(\"quick\") ==>\
    \ \"\"\n// get_closest_vowel(\"ab\") ==> \"\"\nstd::string get_closest_vowel(std::string\
    \ word) {\n    std::string vowels = \"aeiouAEIOU\";\n    std::string vowels_end\
    \ = \"AEIOUaeiou\";\n    std::string vowels_start = \"aeiouAEIOU\";\n    std::string\
    \ vowels_start_end = \"aeiouAEIOUaeiou\";\n    std::string vowels_start_end_end\
    \ = \"aeiouAEIOUaeiouAEIOUaeiou\";\n    std::string vowels_start_end_end_end =\
    \ \"aeiouAEIOUaeiouAEIOUaeiouAEIOUaeiou\";\n    std::string vowels_start_end_end_end_end\
    \ = \"aeiouAEIOUaeiouAEIOUaeiouAEIOUaeiouAEIOUaeiou\";\n    std::string vowels_start_end_end_end_end_end\
    \ = \"aeiouAEIOUaeiouAEIOUaeiouAEIOUaeiouAEIOUaeiouAEIOUaeiou\";\n    std::string\
    \ vowels_start_end_end_end_end_end_end = \"aeiouAEIOUaeiouAEIOUaeiouAEIOUaeiouAEIOUaeiouAEIOUaeiouAEIOUaeiou\"\
    ;\n    std::string vowels_start_end_end_end_end_end_end_end = \"aeiouAEIOUaeiouAEIOUaeiouAEIOUaeiouAEIOUaeiouAEIOUaeiouAEIOUaeiou\"\
    ;\n    std::string vowels_start_end_end_end_end_end_end_end_end = \"aeiouAEIOUaeiouAEIOUaeiouAEIOUaeiouAEIOUaeiouAEIOUaeiouAEIOUaeiouAEIOUaeiou\"\
    ;\n    std::string vowels_start_end_end_end_end_end_end_end_end_end = \"aeiouAEIOUaeiouAEIOUaeiouAEIOUaeiouAEIOUaeiouAEIOUaeiouAEIOUaeiouAEIOUaeiou\"\
    ;\n    std::string vowels_start_end_end_end_end_end_end_end_end_end_end = \"aeiouAEIOUaeiouAEIOUaeiouAEIOUaeiouAEIOUaeiouAEIOUaeiouAEIOUaeiouAEIOUaeiouAEIOUaeiou\"\
    ;\n    std::string vowels_start_end_end_end_end_end_end_end_end_end_end = \"aeiouAEIOUaeiouAEIOUaeiouAEIOUaeiouAEIOUaeiouAEIOUaeiouAEIOUaeiouAEIOUaeiouAEIOUaeiouAEIOUaeiou\"\
    ;\n    std::string vowels_start_end_end_end_end_end_\n}\nint main() {\n    auto\
    \ candidate = get_closest_vowel;\n    assert(candidate((\"yogurt\")) == (\"u\"\
    ));\n    assert(candidate((\"full\")) == (\"u\"));\n    assert(candidate((\"easy\"\
    )) == (\"\"));\n    assert(candidate((\"eAsy\")) == (\"\"));\n    assert(candidate((\"\
    ali\")) == (\"\"));\n    assert(candidate((\"bad\")) == (\"a\"));\n    assert(candidate((\"\
    most\")) == (\"o\"));\n    assert(candidate((\"ab\")) == (\"\"));\n    assert(candidate((\"\
    ba\")) == (\"\"));\n    assert(candidate((\"quick\")) == (\"\"));\n    assert(candidate((\"\
    anime\")) == (\"i\"));\n    assert(candidate((\"Asia\")) == (\"\"));\n    assert(candidate((\"\
    Above\")) == (\"o\"));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp23ypwzoa.cpp: In function \u2018std::string get_closest_vowel(std::string)\u2019\
    :\n/tmp/tmp23ypwzoa.cpp:27:17: error: redeclaration of \u2018std::string vowels_start_end_end_end_end_end_end_end_end_end_end\u2019\
    \n   27 |     std::string vowels_start_end_end_end_end_end_end_end_end_end_end\
    \ = \"aeiouAEIOUaeiouAEIOUaeiouAEIOUaeiouAEIOUaeiouAEIOUaeiouAEIOUaeiouAEIOUaeiouAEIOUaeiouAEIOUaeiou\"\
    ;\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmp23ypwzoa.cpp:26:17: note: \u2018std::string vowels_start_end_end_end_end_end_end_end_end_end_end\u2019\
    \ previously declared here\n   26 |     std::string vowels_start_end_end_end_end_end_end_end_end_end_end\
    \ = \"aeiouAEIOUaeiouAEIOUaeiouAEIOUaeiouAEIOUaeiouAEIOUaeiouAEIOUaeiouAEIOUaeiouAEIOUaeiou\"\
    ;\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmp23ypwzoa.cpp:29:1: error: expected initializer before \u2018}\u2019 token\n\
    \   29 | }\n      | ^\n/tmp/tmp23ypwzoa.cpp:29:1: warning: no return statement\
    \ in function returning non-void [-Wreturn-type]\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// get_closest_vowel(\"yogurt\") ==> \"u\"\
    \n// get_closest_vowel(\"FULL\") ==> \"U\"\n// get_closest_vowel(\"quick\") ==>\
    \ \"\"\n// get_closest_vowel(\"ab\") ==> \"\"\nstd::string get_closest_vowel(std::string\
    \ word) {\n    int len = word.length();\n    std::string vowels = \"AEIOUaeiou\"\
    ;\n    std::string vowels_r = \"AEIOUaeiou\";\n    std::string vowels_l = \"AEIOUaeiou\"\
    ;\n    std::string vowels_r1 = \"AEIOUaeiou\";\n    std::string vowels_l1 = \"\
    AEIOUaeiou\";\n    std::string vowels_r2 = \"\";\n    std::string vowels_l2 =\
    \ \"\";\n    std::string vowels_r3 = \"\";\n    std::string vowels_l3 = \"\";\n\
    \    std::string vowels_r4 = \"\";\n    std::string vowels_l4 = \"\";\n    std::string\
    \ vowels_r5 = \"\";\n    std::string vowels_l5 = \"\";\n    std::string vowels_r6\
    \ = \"\";\n    std::string vowels_l6 = \"\";\n    std::string vowels_r7 = \"\"\
    ;\n    std::string vowels_l7 = \"\";\n    std::string vowels_r8 = \"\";\n    std::string\
    \ vowels_l8 = \"\";\n    std::string vowels_r9 = \"\";\n    std::string vowels_l9\
    \ = \"\";\n    std::string vowels_r10 = \"\";\n    std::string vowels_l10 = \"\
    \";\n    std::string vowels_r11 = \"\";\n    std::string vowels_l11 = \"\";\n\
    \    std::string vowels_r12 = \"\";\n    std::string vowels_l12 = \"\";\n    std::string\
    \ vowels_r13 = \"\";\n    std::string vowels_l13 = \"\";\n    std::string vowels_r14\
    \ = \"\";\n    std::string vowels_l14 = \"\";\n    std::string vowels_r15 = \"\
    \";\n    std::string vowels_l15 = \"\";\n    std::string vowels_r16 = \"\";\n\
    \    std::string vowels_l16 = \"\";\n    std::string vowels_r17 = \"\";\n    std::string\
    \ vowels_l17 = \"\";\n    std::string vowels_r18 = \"\";\n    std::string vowels_l18\
    \ = \"\";\n    std::string vowels_r19 = \"\";\n    std::string vowels_l19 = \"\
    \";\n    std::string vowels_r20 = \"\";\n    std::string vowels_l20 = \"\";\n\
    \    std::string vowels_r21 = \"\";\n    std::string vowels_l21 = \"\";\n    std::string\
    \ vowels_r22 = \"\";\n    std::string vowels_l22 = \"\";\n    std::string vowels_r23\
    \ = \"\";\n    std::string vowels_l23 = \"\";\n    std::string vowels_r24 = \"\
    \";\n    std::string vowels_l24 = \"\";\n    std::string vowels_r25 = \"\";\n\
    \    std::string vowels_l25 = \"\";\n    std::string vowels_r26 = \"\";\n    std::string\
    \ vowels_l26 = \"\";\n    std::string vowels_r27 = \"\";\n    std::string vowels_l27\
    \ = \"\";\n    std::string vowels_r28 = \"\";\n    std::string vowels_l28 = \"\
    \";\n    std::string vowels_r29 = \"\";\n    std::string \n}\nint main() {\n \
    \   auto candidate = get_closest_vowel;\n    assert(candidate((\"yogurt\")) ==\
    \ (\"u\"));\n    assert(candidate((\"full\")) == (\"u\"));\n    assert(candidate((\"\
    easy\")) == (\"\"));\n    assert(candidate((\"eAsy\")) == (\"\"));\n    assert(candidate((\"\
    ali\")) == (\"\"));\n    assert(candidate((\"bad\")) == (\"a\"));\n    assert(candidate((\"\
    most\")) == (\"o\"));\n    assert(candidate((\"ab\")) == (\"\"));\n    assert(candidate((\"\
    ba\")) == (\"\"));\n    assert(candidate((\"quick\")) == (\"\"));\n    assert(candidate((\"\
    anime\")) == (\"i\"));\n    assert(candidate((\"Asia\")) == (\"\"));\n    assert(candidate((\"\
    Above\")) == (\"o\"));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpubinu31z.cpp: In function \u2018std::string get_closest_vowel(std::string)\u2019\
    :\n/tmp/tmpubinu31z.cpp:76:1: error: expected unqualified-id before \u2018}\u2019\
    \ token\n   76 | }\n      | ^\n/tmp/tmpubinu31z.cpp:76:1: warning: no return statement\
    \ in function returning non-void [-Wreturn-type]\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// get_closest_vowel(\"yogurt\") ==> \"u\"\
    \n// get_closest_vowel(\"FULL\") ==> \"U\"\n// get_closest_vowel(\"quick\") ==>\
    \ \"\"\n// get_closest_vowel(\"ab\") ==> \"\"\nstd::string get_closest_vowel(std::string\
    \ word) {\n    // Your code here\n    std::string vowels = \"aeiouAEIOU\";\n \
    \   std::string vowels_rev = \"AEIOUaeiou\";\n    std::string vowels_rev2 = \"\
    \";\n    std::string vowels_rev3 = \"\";\n    std::string vowels_rev4 = \"\";\n\
    \    std::string vowels_rev5 = \"\";\n    std::string vowels_rev6 = \"\";\n  \
    \  std::string vowels_rev7 = \"\";\n    std::string vowels_rev8 = \"\";\n    std::string\
    \ vowels_rev9 = \"\";\n    std::string vowels_rev10 = \"\";\n    std::string vowels_rev11\
    \ = \"\";\n    std::string vowels_rev12 = \"\";\n    std::string vowels_rev13\
    \ = \"\";\n    std::string vowels_rev14 = \"\";\n    std::string vowels_rev15\
    \ = \"\";\n    std::string vowels_rev16 = \"\";\n    std::string vowels_rev17\
    \ = \"\";\n    std::string vowels_rev18 = \"\";\n    std::string vowels_rev19\
    \ = \"\";\n    std::string vowels_rev20 = \"\";\n    std::string vowels_rev21\
    \ = \"\";\n    std::string vowels_rev22 = \"\";\n    std::string vowels_rev23\
    \ = \"\";\n    std::string vowels_rev24 = \"\";\n    std::string vowels_rev25\
    \ = \"\";\n    std::string vowels_rev26 = \"\";\n    std::string vowels_rev27\
    \ = \"\";\n    std::string vowels_rev28 = \"\";\n    std::string vowels_rev29\
    \ = \"\";\n    std::string vowels_rev30 = \"\";\n    std::string vowels_rev31\
    \ = \"\";\n    std::string vowels_rev32 = \"\";\n    std::string vowels_rev33\
    \ = \"\";\n    std::string vowels_rev34 = \"\";\n    std::string vowels_rev35\
    \ = \"\";\n    std::string vowels_rev36 = \"\";\n    std::string vowels_rev37\
    \ = \"\";\n    std::string vowels_rev38 = \"\";\n    std::string vowels_rev39\
    \ = \"\";\n    std::string vowels_rev40 = \"\";\n    std::string vowels_rev41\
    \ = \"\";\n    std::string vowels_rev42 = \"\";\n    std::string vowels_rev43\
    \ = \"\";\n    std::string vowels_rev44 = \"\";\n    std::string vowels_rev45\
    \ = \"\";\n    std::string vowels_rev46 = \"\";\n    std::string vowels_rev47\
    \ = \"\";\n    std::string vowels_rev48 = \"\";\n    std::string vowels_rev49\
    \ = \"\";\n    std::string vowels_rev50 = \"\";\n    std::string vowels_rev51\
    \ = \"\";\n    std::string vowels_rev52 = \"\";\n    std::string vowels_rev53\
    \ = \"\";\n    std::string vowels_rev54 = \"\";\n    std::string vowels_rev55\
    \ = \"\";\n    std::string vowels_rev56 = \"\";\n    std::string vowels_rev57\
    \ = \"\";\n    std::string vowels_rev58 = \"\";\n    std::string vowels_rev59\
    \ = \"\";\n    std::string vowels_rev60 = \"\";\n    \n}\nint main() {\n    auto\
    \ candidate = get_closest_vowel;\n    assert(candidate((\"yogurt\")) == (\"u\"\
    ));\n    assert(candidate((\"full\")) == (\"u\"));\n    assert(candidate((\"easy\"\
    )) == (\"\"));\n    assert(candidate((\"eAsy\")) == (\"\"));\n    assert(candidate((\"\
    ali\")) == (\"\"));\n    assert(candidate((\"bad\")) == (\"a\"));\n    assert(candidate((\"\
    most\")) == (\"o\"));\n    assert(candidate((\"ab\")) == (\"\"));\n    assert(candidate((\"\
    ba\")) == (\"\"));\n    assert(candidate((\"quick\")) == (\"\"));\n    assert(candidate((\"\
    anime\")) == (\"i\"));\n    assert(candidate((\"Asia\")) == (\"\"));\n    assert(candidate((\"\
    Above\")) == (\"o\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// get_closest_vowel(\"yogurt\") ==> \"u\"\
    \n// get_closest_vowel(\"FULL\") ==> \"U\"\n// get_closest_vowel(\"quick\") ==>\
    \ \"\"\n// get_closest_vowel(\"ab\") ==> \"\"\nstd::string get_closest_vowel(std::string\
    \ word) {\n    std::string vowels = \"aeiouAEIOU\";\n    std::string vowels_reverse\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse2 = \"aeiouAEIOU\";\n    std::string\
    \ vowels_reverse3 = \"AEIOUaeiou\";\n    std::string vowels_reverse4 = \"aeiouAEIOU\"\
    ;\n    std::string vowels_reverse5 = \"AEIOUaeiou\";\n    std::string vowels_reverse6\
    \ = \"aeiouAEIOU\";\n    std::string vowels_reverse7 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse8 = \"aeiouAEIOU\";\n    std::string vowels_reverse9 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse10 = \"AEIOUaeiou\";\n    std::string vowels_reverse11\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse12 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse13 = \"AEIOUaeiou\";\n    std::string vowels_reverse14 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse15 = \"AEIOUaeiou\";\n    std::string vowels_reverse16\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse17 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse18 = \"AEIOUaeiou\";\n    std::string vowels_reverse19 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse20 = \"AEIOUaeiou\";\n    std::string vowels_reverse21\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse22 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse23 = \"AEIOUaeiou\";\n    std::string vowels_reverse24 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse25 = \"AEIOUaeiou\";\n    std::string vowels_reverse26\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse27 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse28 = \"AEIOUaeiou\";\n    std::string vowels_reverse29 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse30 = \"AEIOUaeiou\";\n    std::string vowels_reverse31\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse32 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse33 = \"AEIOUaeiou\";\n    std::string vowels_reverse34 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse35 = \"AEIOUaeiou\";\n    std::string vowels_reverse36\
    \ = \"AEIOU\n}\nint main() {\n    auto candidate = get_closest_vowel;\n    assert(candidate((\"\
    yogurt\")) == (\"u\"));\n    assert(candidate((\"full\")) == (\"u\"));\n    assert(candidate((\"\
    easy\")) == (\"\"));\n    assert(candidate((\"eAsy\")) == (\"\"));\n    assert(candidate((\"\
    ali\")) == (\"\"));\n    assert(candidate((\"bad\")) == (\"a\"));\n    assert(candidate((\"\
    most\")) == (\"o\"));\n    assert(candidate((\"ab\")) == (\"\"));\n    assert(candidate((\"\
    ba\")) == (\"\"));\n    assert(candidate((\"quick\")) == (\"\"));\n    assert(candidate((\"\
    anime\")) == (\"i\"));\n    assert(candidate((\"Asia\")) == (\"\"));\n    assert(candidate((\"\
    Above\")) == (\"o\"));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpfebxl_9i.cpp:50:36: warning: missing terminating \" character\n\
    \   50 |     std::string vowels_reverse36 = \"AEIOU\n      |                 \
    \                   ^\n/tmp/tmpfebxl_9i.cpp:50:36: error: missing terminating\
    \ \" character\n   50 |     std::string vowels_reverse36 = \"AEIOU\n      |  \
    \                                  ^~~~~~\n/tmp/tmpfebxl_9i.cpp: In function \u2018\
    std::string get_closest_vowel(std::string)\u2019:\n/tmp/tmpfebxl_9i.cpp:51:1:\
    \ error: expected primary-expression before \u2018}\u2019 token\n   51 | }\n \
    \     | ^\n/tmp/tmpfebxl_9i.cpp:51:1: error: expected \u2018,\u2019 or \u2018\
    ;\u2019 before \u2018}\u2019 token\n/tmp/tmpfebxl_9i.cpp:51:1: warning: no return\
    \ statement in function returning non-void [-Wreturn-type]\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// get_closest_vowel(\"yogurt\") ==> \"u\"\
    \n// get_closest_vowel(\"FULL\") ==> \"U\"\n// get_closest_vowel(\"quick\") ==>\
    \ \"\"\n// get_closest_vowel(\"ab\") ==> \"\"\nstd::string get_closest_vowel(std::string\
    \ word) {\n    std::string vowels = \"AEIOUaeiou\";\n    std::string vowels_reverse\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_reverse = \"AEIOUaeiou\";\n\
    \    std::string vowels_reverse_back = \"AEIOUaeiou\";\n    std::string vowels_reverse_back_reverse\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_back_reverse_back = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse_back_reverse_back_reverse = \"AEIOUaeiou\";\n\
    \    std::string vowels_reverse_back_reverse_back_reverse_back = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse = \"\
    AEIOUaeiou\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\n\
    }\nint main() {\n    auto candidate = get_closest_vowel;\n    assert(candidate((\"\
    yogurt\")) == (\"u\"));\n    assert(candidate((\"full\")) == (\"u\"));\n    assert(candidate((\"\
    easy\")) == (\"\"));\n    assert(candidate((\"eAsy\")) == (\"\"));\n    assert(candidate((\"\
    ali\")) == (\"\"));\n    assert(candidate((\"bad\")) == (\"a\"));\n    assert(candidate((\"\
    most\")) == (\"o\"));\n    assert(candidate((\"ab\")) == (\"\"));\n    assert(candidate((\"\
    ba\")) == (\"\"));\n    assert(candidate((\"quick\")) == (\"\"));\n    assert(candidate((\"\
    anime\")) == (\"i\"));\n    assert(candidate((\"Asia\")) == (\"\"));\n    assert(candidate((\"\
    Above\")) == (\"o\"));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpc3zanivw.cpp: In function \u2018std::string get_closest_vowel(std::string)\u2019\
    :\n/tmp/tmpc3zanivw.cpp:32:17: error: redeclaration of \u2018std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\u2019\
    \n   32 |     std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\
    \ = \"AEIOUaeiou\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpc3zanivw.cpp:31:17: note: \u2018std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\u2019\
    \ previously declared here\n   31 |     std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\
    \ = \"AEIOUaeiou\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpc3zanivw.cpp:35:1: error: expected initializer before \u2018}\u2019 token\n\
    \   35 | }\n      | ^\n/tmp/tmpc3zanivw.cpp:35:1: warning: no return statement\
    \ in function returning non-void [-Wreturn-type]\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// get_closest_vowel(\"yogurt\") ==> \"u\"\
    \n// get_closest_vowel(\"FULL\") ==> \"U\"\n// get_closest_vowel(\"quick\") ==>\
    \ \"\"\n// get_closest_vowel(\"ab\") ==> \"\"\nstd::string get_closest_vowel(std::string\
    \ word) {\n    std::string vowels = \"AEIOUaeiou\";\n    std::string vowels_reverse\
    \ = vowels.substr(0, vowels.size() - 1);\n    std::string vowels_reverse2 = vowels_reverse.substr(0,\
    \ vowels_reverse.size() - 1);\n    std::string vowels_reverse3 = vowels_reverse2.substr(0,\
    \ vowels_reverse2.size() - 1);\n    std::string vowels_reverse4 = vowels_reverse3.substr(0,\
    \ vowels_reverse3.size() - 1);\n    std::string vowels_reverse5 = vowels_reverse4.substr(0,\
    \ vowels_reverse4.size() - 1);\n    std::string vowels_reverse6 = vowels_reverse5.substr(0,\
    \ vowels_reverse5.size() - 1);\n    std::string vowels_reverse7 = vowels_reverse6.substr(0,\
    \ vowels_reverse6.size() - 1);\n    std::string vowels_reverse8 = vowels_reverse7.substr(0,\
    \ vowels_reverse7.size() - 1);\n    std::string vowels_reverse9 = vowels_reverse8.substr(0,\
    \ vowels_reverse8.size() - 1);\n    std::string vowels_reverse10 = vowels_reverse9.substr(0,\
    \ vowels_reverse9.size() - 1);\n    std::string vowels_reverse11 = vowels_reverse10.substr(0,\
    \ vowels_reverse10.size() - 1);\n    std::string vowels_reverse12 = vowels_reverse11.substr(0,\
    \ vowels_reverse11.size() - 1);\n    std::string vowels_reverse13 = vowels_reverse12.substr(0,\
    \ vowels_reverse12.size() - 1);\n    std::string vowels_reverse14 = vowels_reverse13.substr(0,\
    \ vowels_reverse13.size() - 1);\n    std::string vowels_reverse15 = vowels_reverse14.substr(0,\
    \ vowels_reverse14.size() - 1);\n    std::string vowels_reverse16 = vowels_reverse15.substr(0,\
    \ vowels_reverse15.size() - 1);\n    std::string vowels_reverse17 = vowels_reverse16.substr(0,\
    \ vowels_reverse16.size() - 1);\n    std::string vowels_reverse18 = vowels_reverse17.substr(0,\
    \ vowels_reverse17.size() - 1);\n    std::string vowels_reverse19 = vowels_reverse18.substr(0,\
    \ vowels_reverse18.size() - 1);\n    std::string vowels_reverse20 = vowels_reverse19.substr(0,\
    \ vowels_reverse19.size() - 1);\n    std::string vowels_reverse21 = vowels_reverse20.substr(0,\
    \ vowels_reverse20.size() - 1);\n    std::string vowels_reverse22 = vowels_reverse21.substr(0,\
    \ vowels_reverse21.size() - 1);\n    std::string vowels_reverse23 = vowels_reverse22.substr(0,\
    \ vowels_reverse22.size() - 1);\n    std::string vowels_reverse24 = vowels_reverse23.substr(0,\
    \ vowels_reverse23.size() - 1);\n    std::string vowels_reverse25 = vowels_reverse24.substr(0,\
    \ vowels_\n}\nint main() {\n    auto candidate = get_closest_vowel;\n    assert(candidate((\"\
    yogurt\")) == (\"u\"));\n    assert(candidate((\"full\")) == (\"u\"));\n    assert(candidate((\"\
    easy\")) == (\"\"));\n    assert(candidate((\"eAsy\")) == (\"\"));\n    assert(candidate((\"\
    ali\")) == (\"\"));\n    assert(candidate((\"bad\")) == (\"a\"));\n    assert(candidate((\"\
    most\")) == (\"o\"));\n    assert(candidate((\"ab\")) == (\"\"));\n    assert(candidate((\"\
    ba\")) == (\"\"));\n    assert(candidate((\"quick\")) == (\"\"));\n    assert(candidate((\"\
    anime\")) == (\"i\"));\n    assert(candidate((\"Asia\")) == (\"\"));\n    assert(candidate((\"\
    Above\")) == (\"o\"));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpx83cfj9e.cpp: In function \u2018std::string get_closest_vowel(std::string)\u2019\
    :\n/tmp/tmpx83cfj9e.cpp:39:63: error: \u2018vowels_\u2019 was not declared in\
    \ this scope; did you mean \u2018vowels\u2019?\n   39 |     std::string vowels_reverse25\
    \ = vowels_reverse24.substr(0, vowels_\n      |                              \
    \                                 ^~~~~~~\n      |                           \
    \                                    vowels\n/tmp/tmpx83cfj9e.cpp:40:1: error:\
    \ expected \u2018,\u2019 or \u2018;\u2019 before \u2018}\u2019 token\n   40 |\
    \ }\n      | ^\n/tmp/tmpx83cfj9e.cpp:40:1: warning: no return statement in function\
    \ returning non-void [-Wreturn-type]\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// get_closest_vowel(\"yogurt\") ==> \"u\"\
    \n// get_closest_vowel(\"FULL\") ==> \"U\"\n// get_closest_vowel(\"quick\") ==>\
    \ \"\"\n// get_closest_vowel(\"ab\") ==> \"\"\nstd::string get_closest_vowel(std::string\
    \ word) {\n    std::string vowels = \"AEIOUaeiou\";\n    std::string vowels_rev\
    \ = \"AEIOUaeiou\";\n    std::string vowels_rev2 = \"\";\n    std::string vowels_rev3\
    \ = \"\";\n    std::string vowels_rev4 = \"\";\n    std::string vowels_rev5 =\
    \ \"\";\n    std::string vowels_rev6 = \"\";\n    std::string vowels_rev7 = \"\
    \";\n    std::string vowels_rev8 = \"\";\n    std::string vowels_rev9 = \"\";\n\
    \    std::string vowels_rev10 = \"\";\n    std::string vowels_rev11 = \"\";\n\
    \    std::string vowels_rev12 = \"\";\n    std::string vowels_rev13 = \"\";\n\
    \    std::string vowels_rev14 = \"\";\n    std::string vowels_rev15 = \"\";\n\
    \    std::string vowels_rev16 = \"\";\n    std::string vowels_rev17 = \"\";\n\
    \    std::string vowels_rev18 = \"\";\n    std::string vowels_rev19 = \"\";\n\
    \    std::string vowels_rev20 = \"\";\n    std::string vowels_rev21 = \"\";\n\
    \    std::string vowels_rev22 = \"\";\n    std::string vowels_rev23 = \"\";\n\
    \    std::string vowels_rev24 = \"\";\n    std::string vowels_rev25 = \"\";\n\
    \    std::string vowels_rev26 = \"\";\n    std::string vowels_rev27 = \"\";\n\
    \    std::string vowels_rev28 = \"\";\n    std::string vowels_rev29 = \"\";\n\
    \    std::string vowels_rev30 = \"\";\n    std::string vowels_rev31 = \"\";\n\
    \    std::string vowels_rev32 = \"\";\n    std::string vowels_rev33 = \"\";\n\
    \    std::string vowels_rev34 = \"\";\n    std::string vowels_rev35 = \"\";\n\
    \    std::string vowels_rev36 = \"\";\n    std::string vowels_rev37 = \"\";\n\
    \    std::string vowels_rev38 = \"\";\n    std::string vowels_rev39 = \"\";\n\
    \    std::string vowels_rev40 = \"\";\n    std::string vowels_rev41 = \"\";\n\
    \    std::string vowels_rev42 = \"\";\n    std::string vowels_rev43 = \"\";\n\
    \    std::string vowels_rev44 = \"\";\n    std::string vowels_rev45 = \"\";\n\
    \    std::string vowels_rev46 = \"\";\n    std::string vowels_rev47 = \"\";\n\
    \    std::string vowels_rev48 = \"\";\n    std::string vowels_rev49 = \"\";\n\
    \    std::string vowels_rev50 = \"\";\n    std::string vowels_rev51 = \"\";\n\
    \    std::string vowels_rev52 = \"\";\n    std::string vowels_rev53 = \"\";\n\
    \    std::string vowels_rev54 = \"\";\n    std::string vowels_rev55 = \"\";\n\
    \    std::string vowels_rev56 = \"\";\n    std::string vowels_rev57 = \"\";\n\
    \    std::string vowels_rev58 = \"\";\n    std::string vowels_rev59 = \"\";\n\
    \    std::string vowels_rev60 = \"\";\n    std::string vowels_rev6\n}\nint main()\
    \ {\n    auto candidate = get_closest_vowel;\n    assert(candidate((\"yogurt\"\
    )) == (\"u\"));\n    assert(candidate((\"full\")) == (\"u\"));\n    assert(candidate((\"\
    easy\")) == (\"\"));\n    assert(candidate((\"eAsy\")) == (\"\"));\n    assert(candidate((\"\
    ali\")) == (\"\"));\n    assert(candidate((\"bad\")) == (\"a\"));\n    assert(candidate((\"\
    most\")) == (\"o\"));\n    assert(candidate((\"ab\")) == (\"\"));\n    assert(candidate((\"\
    ba\")) == (\"\"));\n    assert(candidate((\"quick\")) == (\"\"));\n    assert(candidate((\"\
    anime\")) == (\"i\"));\n    assert(candidate((\"Asia\")) == (\"\"));\n    assert(candidate((\"\
    Above\")) == (\"o\"));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpiqpk2nd9.cpp: In function \u2018std::string get_closest_vowel(std::string)\u2019\
    :\n/tmp/tmpiqpk2nd9.cpp:76:1: error: expected initializer before \u2018}\u2019\
    \ token\n   76 | }\n      | ^\n/tmp/tmpiqpk2nd9.cpp:76:1: warning: no return statement\
    \ in function returning non-void [-Wreturn-type]\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// get_closest_vowel(\"yogurt\") ==> \"u\"\
    \n// get_closest_vowel(\"FULL\") ==> \"U\"\n// get_closest_vowel(\"quick\") ==>\
    \ \"\"\n// get_closest_vowel(\"ab\") ==> \"\"\nstd::string get_closest_vowel(std::string\
    \ word) {\n    std::string vowels = \"aeiouAEIOU\";\n    std::string vowels_reverse\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse2 = \"aeiouAEIOU\";\n    std::string\
    \ vowels_reverse3 = \"AEIOUaeiou\";\n    std::string vowels_reverse4 = \"aeiouAEIOU\"\
    ;\n    std::string vowels_reverse5 = \"AEIOUaeiou\";\n    std::string vowels_reverse6\
    \ = \"aeiouAEIOU\";\n    std::string vowels_reverse7 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse8 = \"aeiouAEIOU\";\n    std::string vowels_reverse9 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse10 = \"aeiouAEIOU\";\n    std::string vowels_reverse11\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse12 = \"aeiouAEIOU\";\n    std::string\
    \ vowels_reverse13 = \"AEIOUaeiou\";\n    std::string vowels_reverse14 = \"aeiouAEIOU\"\
    ;\n    std::string vowels_reverse15 = \"AEIOUaeiou\";\n    std::string vowels_reverse16\
    \ = \"aeiouAEIOU\";\n    std::string vowels_reverse17 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse18 = \"aeiouAEIOU\";\n    std::string vowels_reverse19 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse20 = \"aeiouAEIOU\";\n    std::string vowels_reverse21\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse22 = \"aeiouAEIOU\";\n    std::string\
    \ vowels_reverse23 = \"AEIOUaeiou\";\n    std::string vowels_reverse24 = \"aeiouAEIOU\"\
    ;\n    std::string vowels_reverse25 = \"AEIOUaeiou\";\n    std::string vowels_reverse26\
    \ = \"aeiouAEIOU\";\n    std::string vowels_reverse27 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse28 = \"aeiouAEIOU\";\n    std::string vowels_reverse29 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse30 = \"aeiouAEIOU\";\n    std::string vowels_reverse31\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse32 = \"aeiouAEIOU\";\n    std::string\
    \ vowels_reverse33 = \"AEIOUaeiou\";\n    std::string vowels_reverse34 = \"aeiouAEIOU\"\
    ;\n    std::string vowels_reverse35 = \"AEIOUaeiou\";\n    std::string vowels_reverse36\
    \ = \"aeiouAE\n}\nint main() {\n    auto candidate = get_closest_vowel;\n    assert(candidate((\"\
    yogurt\")) == (\"u\"));\n    assert(candidate((\"full\")) == (\"u\"));\n    assert(candidate((\"\
    easy\")) == (\"\"));\n    assert(candidate((\"eAsy\")) == (\"\"));\n    assert(candidate((\"\
    ali\")) == (\"\"));\n    assert(candidate((\"bad\")) == (\"a\"));\n    assert(candidate((\"\
    most\")) == (\"o\"));\n    assert(candidate((\"ab\")) == (\"\"));\n    assert(candidate((\"\
    ba\")) == (\"\"));\n    assert(candidate((\"quick\")) == (\"\"));\n    assert(candidate((\"\
    anime\")) == (\"i\"));\n    assert(candidate((\"Asia\")) == (\"\"));\n    assert(candidate((\"\
    Above\")) == (\"o\"));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpgtgiqhr3.cpp:50:36: warning: missing terminating \" character\n\
    \   50 |     std::string vowels_reverse36 = \"aeiouAE\n      |               \
    \                     ^\n/tmp/tmpgtgiqhr3.cpp:50:36: error: missing terminating\
    \ \" character\n   50 |     std::string vowels_reverse36 = \"aeiouAE\n      |\
    \                                    ^~~~~~~~\n/tmp/tmpgtgiqhr3.cpp: In function\
    \ \u2018std::string get_closest_vowel(std::string)\u2019:\n/tmp/tmpgtgiqhr3.cpp:51:1:\
    \ error: expected primary-expression before \u2018}\u2019 token\n   51 | }\n \
    \     | ^\n/tmp/tmpgtgiqhr3.cpp:51:1: error: expected \u2018,\u2019 or \u2018\
    ;\u2019 before \u2018}\u2019 token\n/tmp/tmpgtgiqhr3.cpp:51:1: warning: no return\
    \ statement in function returning non-void [-Wreturn-type]\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// get_closest_vowel(\"yogurt\") ==> \"u\"\
    \n// get_closest_vowel(\"FULL\") ==> \"U\"\n// get_closest_vowel(\"quick\") ==>\
    \ \"\"\n// get_closest_vowel(\"ab\") ==> \"\"\nstd::string get_closest_vowel(std::string\
    \ word) {\n    std::string vowels = \"AEIOUaeiou\";\n    std::string vowels_reverse\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_reverse = \"\";\n    std::string\
    \ vowels_reverse_back = \"\";\n    std::string vowels_reverse_back_reverse = \"\
    \";\n    std::string vowels_reverse_back_reverse_back = \"\";\n    std::string\
    \ vowels_reverse_back_reverse_back_reverse = \"\";\n    std::string vowels_reverse_back_reverse_back_reverse_back\
    \ = \"\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse\
    \ = \"\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back\
    \ = \"\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse\
    \ = \"\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\
    \ = \"\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse\
    \ = \"\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\
    \ = \"\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\
    \ = \"\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse\
    \ = \"\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\
    \ = \"\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse\
    \ = \"\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\
    \ = \"\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\
    \ = \"\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse\
    \ = \"\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\
    \ = \"\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\
    \ = \"\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\
    \ = \"\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_re\n\
    }\nint main() {\n    auto candidate = get_closest_vowel;\n    assert(candidate((\"\
    yogurt\")) == (\"u\"));\n    assert(candidate((\"full\")) == (\"u\"));\n    assert(candidate((\"\
    easy\")) == (\"\"));\n    assert(candidate((\"eAsy\")) == (\"\"));\n    assert(candidate((\"\
    ali\")) == (\"\"));\n    assert(candidate((\"bad\")) == (\"a\"));\n    assert(candidate((\"\
    most\")) == (\"o\"));\n    assert(candidate((\"ab\")) == (\"\"));\n    assert(candidate((\"\
    ba\")) == (\"\"));\n    assert(candidate((\"quick\")) == (\"\"));\n    assert(candidate((\"\
    anime\")) == (\"i\"));\n    assert(candidate((\"Asia\")) == (\"\"));\n    assert(candidate((\"\
    Above\")) == (\"o\"));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpurlw4ijb.cpp: In function \u2018std::string get_closest_vowel(std::string)\u2019\
    :\n/tmp/tmpurlw4ijb.cpp:28:17: error: redeclaration of \u2018std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\u2019\
    \n   28 |     std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\
    \ = \"\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpurlw4ijb.cpp:27:17: note: \u2018std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\u2019\
    \ previously declared here\n   27 |     std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\
    \ = \"\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpurlw4ijb.cpp:33:17: error: redeclaration of \u2018std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\u2019\
    \n   33 |     std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\
    \ = \"\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpurlw4ijb.cpp:32:17: note: \u2018std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\u2019\
    \ previously declared here\n   32 |     std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\
    \ = \"\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpurlw4ijb.cpp:36:17: error: redeclaration of \u2018std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\u2019\
    \n   36 |     std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\
    \ = \"\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpurlw4ijb.cpp:35:17: note: \u2018std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\u2019\
    \ previously declared here\n   35 |     std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\
    \ = \"\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpurlw4ijb.cpp:37:17: error: redeclaration of \u2018std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\u2019\
    \n   37 |     std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\
    \ = \"\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpurlw4ijb.cpp:35:17: note: \u2018std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\u2019\
    \ previously declared here\n   35 |     std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\
    \ = \"\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpurlw4ijb.cpp:39:1: error: expected initializer before \u2018}\u2019 token\n\
    \   39 | }\n      | ^\n/tmp/tmpurlw4ijb.cpp:39:1: warning: no return statement\
    \ in function returning non-void [-Wreturn-type]\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// get_closest_vowel(\"yogurt\") ==> \"u\"\
    \n// get_closest_vowel(\"FULL\") ==> \"U\"\n// get_closest_vowel(\"quick\") ==>\
    \ \"\"\n// get_closest_vowel(\"ab\") ==> \"\"\nstd::string get_closest_vowel(std::string\
    \ word) {\n    std::string vowels = \"AEIOUaeiou\";\n    std::string vowels_reversed\
    \ = vowels.substr(0, vowels.size() - 1);\n    std::string vowels_reversed_upper\
    \ = vowels_reversed.toupper();\n    std::string vowels_reversed_lower = vowels_reversed.tolower();\n\
    \    std::string vowels_reversed_upper_lower = vowels_reversed_upper.tolower()\
    \ + vowels_reversed_lower.tolower();\n    std::string vowels_reversed_upper_lower_nospace\
    \ = vowels_reversed_upper_lower.replace(\" \", \"\");\n    std::string vowels_reversed_upper_lower_nospace_nospace\
    \ = vowels_reversed_upper_lower_nospace.replace(\" \", \"\");\n    std::string\
    \ vowels_reversed_upper_lower_nospace_nospace_nospace = vowels_reversed_upper_lower_nospace_nospace.replace(\"\
    \ \", \"\");\n    std::string vowels_reversed_upper_lower_nospace_nospace_nospace_nospace\
    \ = vowels_reversed_upper_lower_nospace_nospace_nospace_nospace.replace(\" \"\
    , \"\");\n    std::string vowels_reversed_upper_lower_nospace_nospace_nospace_nospace_nospace_nospace\
    \ = vowels_reversed_upper_lower_nospace_nospace_nospace_nospace_nospace_nospace.replace(\"\
    \ \", \"\");\n    std::string vowels_reversed_upper_lower_nospace_nospace_nospace_nospace_nospace_nospace_nospace\
    \ = vowels_reversed_upper_lower_nospace_nospace_nospace_nospace_nospace_nospace_nospace.replace(\"\
    \ \", \"\");\n    std::string vowels_reversed_upper_lower_nospace_nospace_nospace_nospace_nospace_nospace_nospace_nospace_nospace\
    \ = vowels_reversed_upper_lower_nospace_nospace_nospace_nospace_nospace_nospace_nospace_nospace_nospace.replace(\"\
    \ \", \"\");\n    std::string vowels_reversed_upper_lower_nospace_nospace_nospace_nospace_nospace_nospace_nospace_nospace_nospace_nospace_nospace\
    \ = vowels_reversed_upper_lower_nospace_nospace_nospace_nospace_nospace_nospace_nospace_nospace_nospace_nospace.replace(\"\
    \ \", \"\");\n    std::string vowels_reversed_upper_lower_nospace_nospace_nospace_nospace_nospace_nospace_nospace_nospace_nospace_nospace_nospace_nospace\
    \ = vowels_reversed_upper_lower_nospace_nospace_nospace_nospace_nospace_nospace_nospace_nospace_nospace_nospace_nospace_nospace.replace(\"\
    \ \", \"\");\n    std::string vowels_reversed_upper_lower_nospace_nospace_nospace_nospace_nospace_nospace_nospace_nospace_nospace_nospace_nospace_nospace_nospace_nospace\
    \ = vowels_reversed_upper_lower_no\n}\nint main() {\n    auto candidate = get_closest_vowel;\n\
    \    assert(candidate((\"yogurt\")) == (\"u\"));\n    assert(candidate((\"full\"\
    )) == (\"u\"));\n    assert(candidate((\"easy\")) == (\"\"));\n    assert(candidate((\"\
    eAsy\")) == (\"\"));\n    assert(candidate((\"ali\")) == (\"\"));\n    assert(candidate((\"\
    bad\")) == (\"a\"));\n    assert(candidate((\"most\")) == (\"o\"));\n    assert(candidate((\"\
    ab\")) == (\"\"));\n    assert(candidate((\"ba\")) == (\"\"));\n    assert(candidate((\"\
    quick\")) == (\"\"));\n    assert(candidate((\"anime\")) == (\"i\"));\n    assert(candidate((\"\
    Asia\")) == (\"\"));\n    assert(candidate((\"Above\")) == (\"o\"));\n}\n"
  stdout: ''
  stderr: "/tmp/tmptynzhvy4.cpp: In function \u2018std::string get_closest_vowel(std::string)\u2019\
    :\n/tmp/tmptynzhvy4.cpp:16:57: error: \u2018std::string\u2019 {aka \u2018class\
    \ std::__cxx11::basic_string<char>\u2019} has no member named \u2018toupper\u2019\
    \n   16 |     std::string vowels_reversed_upper = vowels_reversed.toupper();\n\
    \      |                                                         ^~~~~~~\n/tmp/tmptynzhvy4.cpp:17:57:\
    \ error: \u2018std::string\u2019 {aka \u2018class std::__cxx11::basic_string<char>\u2019\
    } has no member named \u2018tolower\u2019\n   17 |     std::string vowels_reversed_lower\
    \ = vowels_reversed.tolower();\n      |                                      \
    \                   ^~~~~~~\n/tmp/tmptynzhvy4.cpp:18:69: error: \u2018std::string\u2019\
    \ {aka \u2018class std::__cxx11::basic_string<char>\u2019} has no member named\
    \ \u2018tolower\u2019\n   18 |     std::string vowels_reversed_upper_lower = vowels_reversed_upper.tolower()\
    \ + vowels_reversed_lower.tolower();\n      |                                \
    \                                     ^~~~~~~\n/tmp/tmptynzhvy4.cpp:18:103: error:\
    \ \u2018std::string\u2019 {aka \u2018class std::__cxx11::basic_string<char>\u2019\
    } has no member named \u2018tolower\u2019\n   18 |     std::string vowels_reversed_upper_lower\
    \ = vowels_reversed_upper.tolower() + vowels_reversed_lower.tolower();\n     \
    \ |                                                                          \
    \                             ^~~~~~~\n/tmp/tmptynzhvy4.cpp:19:98: error: no matching\
    \ function for call to \u2018std::__cxx11::basic_string<char>::replace(const char\
    \ [2], const char [1])\u2019\n   19 |     std::string vowels_reversed_upper_lower_nospace\
    \ = vowels_reversed_upper_lower.replace(\" \", \"\");\n      |               \
    \                                                                            \
    \       ^\nIn file included from /usr/include/c++/9/string:55,\n             \
    \    from /usr/include/c++/9/bits/locale_classes.h:40,\n                 from\
    \ /usr/include/c++/9/bits/ios_base.h:41,\n                 from /usr/include/c++/9/ios:42,\n\
    \                 from /usr/include/c++/9/istream:38,\n                 from /usr/include/c++/9/sstream:38,\n\
    \                 from /usr/include/c++/9/complex:45,\n                 from /usr/include/c++/9/ccomplex:39,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n\
    \                 from /tmp/tmptynzhvy4.cpp:2:\n/usr/include/c++/9/bits/basic_string.h:1893:7:\
    \ note: candidate: \u2018std::__cxx11::basic_string<_CharT, _Traits, _Alloc>&\
    \ std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::replace(std::__cxx11::basic_string<_CharT,\
    \ _Traits, _Alloc>::size_type, std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type,\
    \ const std::__cxx11::basic_string<_CharT, _Traits, _Alloc>&) [with _CharT = char;\
    \ _Traits = std::char_traits<char>; _Alloc = std::allocator<char>; std::__cxx11::basic_string<_CharT,\
    \ _Traits, _Alloc>::size_type = long unsigned int]\u2019\n 1893 |       replace(size_type\
    \ __pos, size_type __n, const basic_string& __str)\n      |       ^~~~~~~\n/usr/include/c++/9/bits/basic_string.h:1893:7:\
    \ note:   candidate expects 3 arguments, 2 provided\n/usr/include/c++/9/bits/basic_string.h:1915:7:\
    \ note: candidate: \u2018std::__cxx11::basic_string<_CharT, _Traits, _Alloc>&\
    \ std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::replace(std::__cxx11::basic_string<_CharT,\
    \ _Traits, _Alloc>::size_type, std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type,\
    \ const std::__cxx11::basic_string<_CharT, _Traits, _Alloc>&, std::__cxx11::basic_string<_CharT,\
    \ _Traits, _Alloc>::size_type, std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type)\
    \ [with _CharT = char; _Traits = std::char_traits<char>; _Alloc = std::allocator<char>;\
    \ std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type = long unsigned\
    \ int]\u2019\n 1915 |       replace(size_type __pos1, size_type __n1, const basic_string&\
    \ __str,\n      |       ^~~~~~~\n/usr/include/c++/9/bits/basic_string.h:1915:7:\
    \ note:   candidate expects 5 arguments, 2 provided\n/usr/include/c++/9/bits/basic_string.h:1940:7:\
    \ note: candidate: \u2018std::__cxx11::basic_string<_CharT, _Traits, _Alloc>&\
    \ std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::replace(std::__cxx11::basic_string<_CharT,\
    \ _Traits, _Alloc>::size_type, std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type,\
    \ const _CharT*, std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type)\
    \ [with _CharT = char; _Traits = std::char_traits<char>; _Alloc = std::allocator<char>;\
    \ std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type = long unsigned\
    \ int]\u2019\n 1940 |       replace(size_type __pos, size_type __n1, const _CharT*\
    \ __s,\n      |       ^~~~~~~\n/usr/include/c++/9/bits/basic_string.h:1940:7:\
    \ note:   candidate expects 4 arguments, 2 provided\n/usr/include/c++/9/bits/basic_string.h:1965:7:\
    \ note: candidate: \u2018std::__cxx11::basic_string<_CharT, _Traits, _Alloc>&\
    \ std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::replace(std::__cxx11::basic_string<_CharT,\
    \ _Traits, _Alloc>::size_type, std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type,\
    \ const _CharT*) [with _CharT = char; _Traits = std::char_traits<char>; _Alloc\
    \ = std::allocator<char>; std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type\
    \ = long unsigned int]\u2019\n 1965 |       replace(size_type __pos, size_type\
    \ __n1, const _CharT* __s)\n      |       ^~~~~~~\n/usr/include/c++/9/bits/basic_string.h:1965:7:\
    \ note:   candidate expects 3 arguments, 2 provided\n/usr/include/c++/9/bits/basic_string.h:1989:7:\
    \ note: candidate: \u2018std::__cxx11::basic_string<_CharT, _Traits, _Alloc>&\
    \ std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::replace(std::__cxx11::basic_string<_CharT,\
    \ _Traits, _Alloc>::size_type, std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type,\
    \ std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type, _CharT) [with\
    \ _CharT = char; _Traits = std::char_traits<char>; _Alloc = std::allocator<char>;\
    \ std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type = long unsigned\
    \ int]\u2019\n 1989 |       replace(size_type __pos, size_type __n1, size_type\
    \ __n2, _CharT __c)\n      |       ^~~~~~~\n/usr/include/c++/9/bits/basic_string.h:1989:7:\
    \ note:   candidate expects 4 arguments, 2 provided\n/usr/include/c++/9/bits/basic_string.h:2007:7:\
    \ note: candidate: \u2018std::__cxx11::basic_string<_CharT, _Traits, _Alloc>&\
    \ std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::replace(std::__cxx11::basic_string<_CharT,\
    \ _Traits, _Alloc>::__const_iterator, std::__cxx11::basic_string<_CharT, _Traits,\
    \ _Alloc>::__const_iterator, const std::__cxx11::basic_string<_CharT, _Traits,\
    \ _Alloc>&) [with _CharT = char; _Traits = std::char_traits<char>; _Alloc = std::allocator<char>;\
    \ std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::__const_iterator = __gnu_cxx::__normal_iterator<const\
    \ char*, std::__cxx11::basic_string<char> >; typename __gnu_cxx::__alloc_traits<typename\
    \ __gnu_cxx::__alloc_traits<_Alloc>::rebind<_CharT>::other>::const_pointer = const\
    \ char*]\u2019\n 2007 |       replace(__const_iterator __i1, __const_iterator\
    \ __i2,\n      |       ^~~~~~~\n/usr/include/c++/9/bits/basic_string.h:2007:7:\
    \ note:   candidate expects 3 arguments, 2 provided\n/usr/include/c++/9/bits/basic_string.h:2027:7:\
    \ note: candidate: \u2018std::__cxx11::basic_string<_CharT, _Traits, _Alloc>&\
    \ std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::replace(std::__cxx11::basic_string<_CharT,\
    \ _Traits, _Alloc>::__const_iterator, std::__cxx11::basic_string<_CharT, _Traits,\
    \ _Alloc>::__const_iterator, const _CharT*, std::__cxx11::basic_string<_CharT,\
    \ _Traits, _Alloc>::size_type) [with _CharT = char; _Traits = std::char_traits<char>;\
    \ _Alloc = std::allocator<char>; std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::__const_iterator\
    \ = __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char>\
    \ >; typename __gnu_cxx::__alloc_traits<typename __gnu_cxx::__alloc_traits<_Alloc>::rebind<_CharT>::other>::const_pointer\
    \ = const char*; std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type\
    \ = long unsigned int]\u2019\n 2027 |       replace(__const_iterator __i1, __const_iterator\
    \ __i2,\n      |       ^~~~~~~\n/usr/include/c++/9/bits/basic_string.h:2027:7:\
    \ note:   candidate expects 4 arguments, 2 provided\n/usr/include/c++/9/bits/basic_string.h:2049:7:\
    \ note: candidate: \u2018std::__cxx11::basic_string<_CharT, _Traits, _Alloc>&\
    \ std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::replace(std::__cxx11::basic_string<_CharT,\
    \ _Traits, _Alloc>::__const_iterator, std::__cxx11::basic_string<_CharT, _Traits,\
    \ _Alloc>::__const_iterator, const _CharT*) [with _CharT = char; _Traits = std::char_traits<char>;\
    \ _Alloc = std::allocator<char>; std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::__const_iterator\
    \ = __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char>\
    \ >; typename __gnu_cxx::__alloc_traits<typename __gnu_cxx::__alloc_traits<_Alloc>::rebind<_CharT>::other>::const_pointer\
    \ = const char*]\u2019\n 2049 |       replace(__const_iterator __i1, __const_iterator\
    \ __i2, const _CharT* __s)\n      |       ^~~~~~~\n/usr/include/c++/9/bits/basic_string.h:2049:7:\
    \ note:   candidate expects 3 arguments, 2 provided\n/usr/include/c++/9/bits/basic_string.h:2070:7:\
    \ note: candidate: \u2018std::__cxx11::basic_string<_CharT, _Traits, _Alloc>&\
    \ std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::replace(std::__cxx11::basic_string<_CharT,\
    \ _Traits, _Alloc>::__const_iterator, std::__cxx11::basic_string<_CharT, _Traits,\
    \ _Alloc>::__const_iterator, std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type,\
    \ _CharT) [with _CharT = char; _Traits = std::char_traits<char>; _Alloc = std::allocator<char>;\
    \ std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::__const_iterator = __gnu_cxx::__normal_iterator<const\
    \ char*, std::__cxx11::basic_string<char> >; typename __gnu_cxx::__alloc_traits<typename\
    \ __gnu_cxx::__alloc_traits<_Alloc>::rebind<_CharT>::other>::const_pointer = const\
    \ char*; std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type = long\
    \ unsigned int]\u2019\n 2070 |       replace(__const_iterator __i1, __const_iterator\
    \ __i2, size_type __n,\n      |       ^~~~~~~\n/usr/include/c++/9/bits/basic_string.h:2070:7:\
    \ note:   candidate expects 4 arguments, 2 provided\n/usr/include/c++/9/bits/basic_string.h:2097:9:\
    \ note: candidate: \u2018template<class _InputIterator, class> std::__cxx11::basic_string<_CharT,\
    \ _Traits, _Alloc>& std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::replace(std::__cxx11::basic_string<_CharT,\
    \ _Traits, _Alloc>::const_iterator, std::__cxx11::basic_string<_CharT, _Traits,\
    \ _Alloc>::const_iterator, _InputIterator, _InputIterator) [with _InputIterator\
    \ = _InputIterator; <template-parameter-2-2> = <template-parameter-1-2>; _CharT\
    \ = char; _Traits = std::char_traits<char>; _Alloc = std::allocator<char>]\u2019\
    \n 2097 |         replace(const_iterator __i1, const_iterator __i2,\n      | \
    \        ^~~~~~~\n/usr/include/c++/9/bits/basic_string.h:2097:9: note:   template\
    \ argument deduction/substitution failed:\n/tmp/tmptynzhvy4.cpp:19:98: note: \
    \  candidate expects 4 arguments, 2 provided\n   19 |     std::string vowels_reversed_upper_lower_nospace\
    \ = vowels_reversed_upper_lower.replace(\" \", \"\");\n      |               \
    \                                                                            \
    \       ^\nIn file included from /usr/include/c++/9/string:55,\n             \
    \    from /usr/include/c++/9/bits/locale_classes.h:40,\n                 from\
    \ /usr/include/c++/9/bits/ios_base.h:41,\n                 from /usr/include/c++/9/ios:42,\n\
    \                 from /usr/include/c++/9/istream:38,\n                 from /usr/include/c++/9/sstream:38,\n\
    \                 from /usr/include/c++/9/complex:45,\n                 from /usr/include/c++/9/ccomplex:39,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n\
    \                 from /tmp/tmptynzhvy4.cpp:2:\n/usr/include/c++/9/bits/basic_string.h:2127:7:\
    \ note: candidate: \u2018std::__cxx11::basic_string<_CharT, _Traits, _Alloc>&\
    \ std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::replace(std::__cxx11::basic_string<_CharT,\
    \ _Traits, _Alloc>::__const_iterator, std::__cxx11::basic_string<_CharT, _Traits,\
    \ _Alloc>::__const_iterator, _CharT*, _CharT*) [with _CharT = char; _Traits =\
    \ std::char_traits<char>; _Alloc = std::allocator<char>; std::__cxx11::basic_string<_CharT,\
    \ _Traits, _Alloc>::__const_iterator = __gnu_cxx::__normal_iterator<const char*,\
    \ std::__cxx11::basic_string<char> >; typename __gnu_cxx::__alloc_traits<typename\
    \ __gnu_cxx::__alloc_traits<_Alloc>::rebind<_CharT>::other>::const_pointer = const\
    \ char*]\u2019\n 2127 |       replace(__const_iterator __i1, __const_iterator\
    \ __i2,\n      |       ^~~~~~~\n/usr/include/c++/9/bits/basic_string.h:2127:7:\
    \ note:   candidate expects 4 arguments, 2 provided\n/usr/include/c++/9/bits/basic_string.h:2138:7:\
    \ note: candidate: \u2018std::__cxx11::basic_string<_CharT, _Traits, _Alloc>&\
    \ std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::replace(std::__cxx11::basic_string<_CharT,\
    \ _Traits, _Alloc>::__const_iterator, std::__cxx11::basic_string<_CharT, _Traits,\
    \ _Alloc>::__const_iterator, const _CharT*, const _CharT*) [with _CharT = char;\
    \ _Traits = std::char_traits<char>; _Alloc = std::allocator<char>; std::__cxx11::basic_string<_CharT,\
    \ _Traits, _Alloc>::__const_iterator = __gnu_cxx::__normal_iterator<const char*,\
    \ std::__cxx11::basic_string<char> >; typename __gnu_cxx::__alloc_traits<typename\
    \ __gnu_cxx::__alloc_traits<_Alloc>::rebind<_CharT>::other>::const_pointer = const\
    \ char*]\u2019\n 2138 |       replace(__const_iterator __i1, __const_iterator\
    \ __i2,\n      |       ^~~~~~~\n/usr/include/c++/9/bits/basic_string.h:2138:7:\
    \ note:   candidate expects 4 arguments, 2 provided\n/usr/include/c++/9/bits/basic_string.h:2149:7:\
    \ note: candidate: \u2018std::__cxx11::basic_string<_CharT, _Traits, _Alloc>&\
    \ std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::replace(std::__cxx11::basic_string<_CharT,\
    \ _Traits, _Alloc>::__const_iterator, std::__cxx11::basic_string<_CharT, _Traits,\
    \ _Alloc>::__const_iterator, std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::iterator,\
    \ std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::iterator) [with _CharT\
    \ = char; _Traits = std::char_traits<char>; _Alloc = std::allocator<char>; std::__cxx11::basic_string<_CharT,\
    \ _Traits, _Alloc>::__const_iterator = __gnu_cxx::__normal_iterator<const char*,\
    \ std::__cxx11::basic_string<char> >; typename __gnu_cxx::__alloc_traits<typename\
    \ __gnu_cxx::__alloc_traits<_Alloc>::rebind<_CharT>::other>::const_pointer = const\
    \ char*; std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::iterator = __gnu_cxx::__normal_iterator<char*,\
    \ std::__cxx11::basic_string<char> >; typename __gnu_cxx::__alloc_traits<typename\
    \ __gnu_cxx::__alloc_traits<_Alloc>::rebind<_CharT>::other>::pointer = char*]\u2019\
    \n 2149 |       replace(__const_iterator __i1, __const_iterator __i2,\n      |\
    \       ^~~~~~~\n/usr/include/c++/9/bits/basic_string.h:2149:7: note:   candidate\
    \ expects 4 arguments, 2 provided\n/usr/include/c++/9/bits/basic_string.h:2160:7:\
    \ note: candidate: \u2018std::__cxx11::basic_string<_CharT, _Traits, _Alloc>&\
    \ std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::replace(std::__cxx11::basic_string<_CharT,\
    \ _Traits, _Alloc>::__const_iterator, std::__cxx11::basic_string<_CharT, _Traits,\
    \ _Alloc>::__const_iterator, std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::const_iterator,\
    \ std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::const_iterator) [with _CharT\
    \ = char; _Traits = std::char_traits<char>; _Alloc = std::allocator<char>; std::__cxx11::basic_string<_CharT,\
    \ _Traits, _Alloc>::__const_iterator = __gnu_cxx::__normal_iterator<const char*,\
    \ std::__cxx11::basic_string<char> >; typename __gnu_cxx::__alloc_traits<typename\
    \ __gnu_cxx::__alloc_traits<_Alloc>::rebind<_CharT>::other>::const_pointer = const\
    \ char*; std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::const_iterator =\
    \ __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> >]\u2019\
    \n 2160 |       replace(__const_iterator __i1, __const_iterator __i2,\n      |\
    \       ^~~~~~~\n/usr/include/c++/9/bits/basic_string.h:2160:7: note:   candidate\
    \ expects 4 arguments, 2 provided\n/usr/include/c++/9/bits/basic_string.h:2185:21:\
    \ note: candidate: \u2018std::__cxx11::basic_string<_CharT, _Traits, _Alloc>&\
    \ std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::replace(std::__cxx11::basic_string<_CharT,\
    \ _Traits, _Alloc>::const_iterator, std::__cxx11::basic_string<_CharT, _Traits,\
    \ _Alloc>::const_iterator, std::initializer_list<_Tp>) [with _CharT = char; _Traits\
    \ = std::char_traits<char>; _Alloc = std::allocator<char>; std::__cxx11::basic_string<_CharT,\
    \ _Traits, _Alloc>::const_iterator = __gnu_cxx::__normal_iterator<const char*,\
    \ std::__cxx11::basic_string<char> >; typename __gnu_cxx::__alloc_traits<typename\
    \ __gnu_cxx::__alloc_traits<_Alloc>::rebind<_CharT>::other>::const_pointer = const\
    \ char*]\u2019\n 2185 |       basic_string& replace(const_iterator __i1, const_iterator\
    \ __i2,\n      |                     ^~~~~~~\n/usr/include/c++/9/bits/basic_string.h:2185:21:\
    \ note:   candidate expects 3 arguments, 2 provided\n/tmp/tmptynzhvy4.cpp:20:114:\
    \ error: no matching function for call to \u2018std::__cxx11::basic_string<char>::replace(const\
    \ char [2], const char [1])\u2019\n   20 |     std::string vowels_reversed_upper_lower_nospace_nospace\
    \ = vowels_reversed_upper_lower_nospace.replace(\" \", \"\");\n      |       \
    \                                                                            \
    \                               ^\nIn file included from /usr/include/c++/9/string:55,\n\
    \                 from /usr/include/c++/9/bits/locale_classes.h:40,\n        \
    \         from /usr/include/c++/9/bits/ios_base.h:41,\n                 from /usr/include/c++/9/ios:42,\n\
    \                 from /usr/include/c++/9/istream:38,\n                 from /usr/include/c++/9/sstream:38,\n\
    \                 from /usr/include/c++/9/complex:45,\n                 from /usr/include/c++/9/ccomplex:39,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n\
    \                 from /tmp/tmptynzhvy4.cpp:2:\n/usr/include/c++/9/bits/basic_string.h:1893:7:\
    \ note: candidate: \u2018std::__cxx11::basic_string<_CharT, _Traits, _Alloc>&\
    \ std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::replace(std::__cxx11::basic_string<_CharT,\
    \ _Traits, _Alloc>::size_type, std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type,\
    \ const std::__cxx11::basic_string<_CharT, _Traits, _Alloc>&) [with _CharT = char;\
    \ _Traits = std::char_traits<char>; _Alloc = std::allocator<char>; std::__cxx11::basic_string<_CharT,\
    \ _Traits, _Alloc>::size_type = long unsigned int]\u2019\n 1893 |       replace(size_type\
    \ __pos, size_type __n, const basic_string& __str)\n      |       ^~~~~~~\n/usr/include/c++/9/bits/basic_string.h:1893:7:\
    \ note:   candidate expects 3 arguments, 2 provided\n/usr/include/c++/9/bits/basic_string.h:1915:7:\
    \ note: candidate: \u2018std::__cxx11::basic_string<_CharT, _Traits, _Alloc>&\
    \ std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::replace(std::__cxx11::basic_string<_CharT,\
    \ _Traits, _Alloc>::size_type, std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type,\
    \ const std::__cxx11::basic_string<_CharT, _Traits, _Alloc>&, std::__cxx11::basic_string<_CharT,\
    \ _Traits, _Alloc>::size_type, std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type)\
    \ [with _CharT = char; _Traits = std::char_traits<char>; _Alloc = std::allocator<char>;\
    \ std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type = long unsigned\
    \ int]\u2019\n 1915 |       replace(size_type __pos1, size_type __n1, const basic_string&\
    \ __str,\n      |       ^~~~~~~\n/usr/include/c++/9/bits/basic_string.h:1915:7:\
    \ note:   candidate expects 5 arguments, 2 provided\n/usr/include/c++/9/bits/basic_string.h:1940:7:\
    \ note: candidate: \u2018std::__cxx11::basic_string<_CharT, _Traits, _Alloc>&\
    \ std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::replace(std::__cxx11::basic_string<_CharT,\
    \ _Traits, _Alloc>::size_type, std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type,\
    \ const _CharT*, std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type)\
    \ [with _CharT = char; _Traits = std::char_traits<char>; _Alloc = std::allocator<char>;\
    \ std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type = long unsigned\
    \ int]\u2019\n 1940 |       replace(size_type __pos, size_type __n1, const _CharT*\
    \ __s,\n      |       ^~~~~~~\n/usr/include/c++/9/bits/basic_string.h:1940:7:\
    \ note:   candidate expects 4 arguments, 2 provided\n/usr/include/c++/9/bits/basic_string.h:1965:7:\
    \ note: candidate: \u2018std::__cxx11::basic_string<_CharT, _Traits, _Alloc>&\
    \ std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::replace(std::__cxx11::basic_string<_CharT,\
    \ _Traits, _Alloc>::size_type, std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type,\
    \ const _CharT*) [with _CharT = char; _Traits = std::char_traits<char>; _Alloc\
    \ = std::allocator<char>; std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type\
    \ = long unsigned int]\u2019\n 1965 |       replace(size_type __pos, size_type\
    \ __n1, const _CharT* __s)\n      |       ^~~~~~~\n/usr/include/c++/9/bits/basic_string.h:1965:7:\
    \ note:   candidate expects 3 arguments, 2 provided\n/usr/include/c++/9/bits/basic_string.h:1989:7:\
    \ note: candidate: \u2018std::__cxx11::basic_string<_CharT, _Traits, _Alloc>&\
    \ std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::replace(std::__cxx11::basic_string<_CharT,\
    \ _Traits, _Alloc>::size_type, std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type,\
    \ std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type, _CharT) [with\
    \ _CharT = char; _Traits = std::char_traits<char>; _Alloc = std::allocator<char>;\
    \ std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type = long unsigned\
    \ int]\u2019\n 1989 |       replace(size_type __pos, size_type __n1, size_type\
    \ __n2, _CharT __c)\n      |       ^~~~~~~\n/usr/include/c++/9/bits/basic_string.h:1989:7:\
    \ note:   candidate expects 4 arguments, 2 provided\n/usr/include/c++/9/bits/basic_string.h:2007:7:\
    \ note: candidate: \u2018std::__cxx11::basic_string<_CharT, _Traits, _Alloc>&\
    \ std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::replace(std::__cxx11::basic_string<_CharT,\
    \ _Traits, _Alloc>::__const_iterator, std::__cxx11::basic_string<_CharT, _Traits,\
    \ _Alloc>::__const_iterator, const std::__cxx11::basic_string<_CharT, _Traits,\
    \ _Alloc>&) [with _CharT = char; _Traits = std::char_traits<char>; _Alloc = std::allocator<char>;\
    \ std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::__const_iterator = __gnu_cxx::__normal_iterator<const\
    \ char*, std::__cxx11::basic_string<char> >; typename __gnu_cxx::__alloc_traits<typename\
    \ __gnu_cxx::__alloc_traits<_Alloc>::rebind<_CharT>::other>::const_pointer = const\
    \ char*]\u2019\n 2007 |       replace(__const_iterator __i1, __const_iterator\
    \ __i2,\n      |       ^~~~~~~\n/usr/include/c++/9/bits/basic_string.h:2007:7:\
    \ note:   candidate expects 3 arguments, 2 provided\n/usr/include/c++/9/bits/basic_string.h:2027:7:\
    \ note: candidate: \u2018std::__cxx11::basic_string<_CharT, _Traits, _Alloc>&\
    \ std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::replace(std::__cxx11::basic_string<_CharT,\
    \ _Traits, _Alloc>::__const_iterator, std::__cxx11::basic_string<_CharT, _Traits,\
    \ _Alloc>::__const_iterator, const _CharT*, std::__cxx11::basic_string<_CharT,\
    \ _Traits, _Alloc>::size_type) [with _CharT = char; _Traits = std::char_traits<char>;\
    \ _Alloc = std::allocator<char>; std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::__const_iterator\
    \ = __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char>\
    \ >; typename __gnu_cxx::__alloc_traits<typename __gnu_cxx::__alloc_traits<_Alloc>::rebind<_CharT>::other>::const_pointer\
    \ = const char*; std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type\
    \ = long unsigned int]\u2019\n 2027 |       replace(__const_iterator __i1, __const_iterator\
    \ __i2,\n      |       ^~~~~~~\n/usr/include/c++/9/bits/basic_string.h:2027:7:\
    \ note:   candidate expects 4 arguments, 2 provided\n/usr/include/c++/9/bits/basic_string.h:2049:7:\
    \ note: candidate: \u2018std::__cxx11::basic_string<_CharT, _Traits, _Alloc>&\
    \ std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::replace(std::__cxx11::basic_string<_CharT,\
    \ _Traits, _Alloc>::__const_iterator, std::__cxx11::basic_string<_CharT, _Traits,\
    \ _Alloc>::__const_iterator, const _CharT*) [with _CharT = char; _Traits = std::char_traits<char>;\
    \ _Alloc = std::allocator<char>; std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::__const_iterator\
    \ = __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char>\
    \ >; typename __gnu_cxx::__alloc_traits<typename __gnu_cxx::__alloc_traits<_Alloc>::rebind<_CharT>::other>::const_pointer\
    \ = const char*]\u2019\n 2049 |       replace(__const_iterator __i1, __const_iterator\
    \ __i2, const _CharT* __s)\n      |       ^~~~~~~\n/usr/include/c++/9/bits/basic_string.h:2049:7:\
    \ note:   candidate expects 3 arguments, 2 provided\n/usr/include/c++/9/bits/basic_string.h:2070:7:\
    \ note: candidate: \u2018std::__cxx11::basic_string<_CharT, _Traits, _Alloc>&\
    \ std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::replace(std::__cxx11::basic_string<_CharT,\
    \ _Traits, _Alloc>::__const_iterator, std::__cxx11::basic_string<_CharT, _Traits,\
    \ _Alloc>::__const_iterator, std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type,\
    \ _CharT) [with _CharT = char; _Traits = std::char_traits<char>; _Alloc = std::allocator<char>;\
    \ std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::__const_iterator = __gnu_cxx::__normal_iterator<const\
    \ char*, std::__cxx11::basic_string<char> >; typename __gnu_cxx::__alloc_traits<typename\
    \ __gnu_cxx::__alloc_traits<_Alloc>::rebind<_CharT>::other>::const_pointer = const\
    \ char*; std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type = long\
    \ unsigned int]\u2019\n 2070 |       replace(__const_iterator __i1, __const_iterator\
    \ __i2, size_type __n,\n      |       ^~~~~~~\n/usr/include/c++/9/bits/basic_string.h:2070:7:\
    \ note:   candidate expects 4 arguments, 2 provided\n/usr/include/c++/9/bits/basic_string.h:2097:9:\
    \ note: candidate: \u2018template<class _InputIterator, class> std::__cxx11::basic_string<_CharT,\
    \ _Traits, _Alloc>& std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::replace(std::__cxx11::basic_string<_CharT,\
    \ _Traits, _Alloc>::const_iterator, std::__cxx11::basic_string<_CharT, _Traits,\
    \ _Alloc>::const_iterator, _InputIterator, _InputIterator) [with _InputIterator\
    \ = _InputIterator; <template-parameter-2-2> = <template-parameter-1-2>; _CharT\
    \ = char; _Traits = std::char_traits<char>; _Alloc = std::allocator<char>]\u2019\
    \n 2097 |         replace(const_iterator __i1, const_iterator __i2,\n      | \
    \        ^~~~~~~\n/usr/include/c++/9/bits/basic_string.h:2097:9: note:   template\
    \ argument deduction/substitution failed:\n/tmp/tmptynzhvy4.cpp:20:114: note:\
    \   candidate expects 4 arguments, 2 provided\n   20 |     std::string vowels_reversed_upper_lower_nospace_nospace\
    \ = vowels_reversed_upper_lower_nospace.replace(\" \", \"\");\n      |       \
    \                                                                            \
    \                               ^\nIn file included from /usr/include/c++/9/string:55,\n\
    \                 from /usr/include/c++/9/bits/locale_classes.h:40,\n        \
    \         from /usr/include/c++/9/bits/ios_base.h:41,\n                 from /usr/include/c++/9/ios:42,\n\
    \                 from /usr/include/c++/9/istream:38,\n                 from /usr/include/c++/9/sstream:38,\n\
    \                 from /usr/include/c++/9/complex:45,\n                 from /usr/include/c++/9/ccomplex:39,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n\
    \                 from /tmp/tmptynzhvy4.cpp:2:\n/usr/include/c++/9/bits/basic_string.h:2127:7:\
    \ note: candidate: \u2018std::__cxx11::basic_string<_CharT, _Traits, _Alloc>&\
    \ std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::replace(std::__cxx11::basic_string<_CharT,\
    \ _Traits, _Alloc>::__const_iterator, std::__cxx11::basic_string<_CharT, _Traits,\
    \ _Alloc>::__const_iterator, _CharT*, _CharT*) [with _CharT = char; _Traits =\
    \ std::char_traits<char>; _Alloc = std::allocator<char>; std::__cxx11::basic_string<_CharT,\
    \ _Traits, _Alloc>::__const_iterator = __gnu_cxx::__normal_iterator<const char*,\
    \ std::__cxx11::basic_string<char> >; typename __gnu_cxx::__alloc_traits<typename\
    \ __gnu_cxx::__alloc_traits<_Alloc>::rebind<_CharT>::other>::const_pointer = const\
    \ char*]\u2019\n 2127 |       replace(__const_iterator __i1, __const_iterator\
    \ __i2,\n      |       ^~~~~~~\n/usr/include/c++/9/bits/basic_string.h:2127:7:\
    \ note:   candidate expects 4 arguments, 2 provided\n/usr/include/c++/9/bits/basic_string.h:2138:7:\
    \ note: candidate: \u2018std::__cxx11::basic_string<_CharT, _Traits, _Alloc>&\
    \ std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::replace(std::__cxx11::basic_string<_CharT,\
    \ _Traits, _Alloc>::__const_iterator, std::__cxx11::basic_string<_CharT, _Traits,\
    \ _Alloc>::__const_iterator, const _CharT*, const _CharT*) [with _CharT = char;\
    \ _Traits = std::char_traits<char>; _Alloc = std::allocator<char>; std::__cxx11::basic_string<_CharT,\
    \ _Traits, _Alloc>::__const_iterator = __gnu_cxx::__normal_iterator<const char*,\
    \ std::__cxx11::basic_string<char> >; typename __gnu_cxx::__alloc_traits<typename\
    \ __gnu_cxx::__alloc_traits<_Alloc>::rebind<_CharT>::other>::const_pointer = const\
    \ char*]\u2019\n 2138 |       replace(__const_iterator __i1, __const_iterator\
    \ __i2,\n      |       ^~~~~~~\n/usr/include/c++/9/bits/basic_string.h:2138:7:\
    \ note:   candidate expects 4 arguments, 2 provided\n/usr/include/c++/9/bits/basic_string.h:2149:7:\
    \ note: candidate: \u2018std::__cxx11::basic_string<_CharT, _Traits, _Alloc>&\
    \ std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::replace(std::__cxx11::basic_string<_CharT,\
    \ _Traits, _Alloc>::__const_iterator, std::__cxx11::basic_string<_CharT, _Traits,\
    \ _Alloc>::__const_iterator, std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::iterator,\
    \ std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::iterator) [with _CharT\
    \ = char; _Traits = std::char_traits<char>; _Alloc = std::allocator<char>; std::__cxx11::basic_string<_CharT,\
    \ _Traits, _Alloc>::__const_iterator = __gnu_cxx::__normal_iterator<const char*,\
    \ std::__cxx11::basic_string<char> >; typename __gnu_cxx::__alloc_traits<typename\
    \ __gnu_cxx::__alloc_traits<_Alloc>::rebind<_CharT>::other>::const_pointer = const\
    \ char*; std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::iterator = __gnu_cxx::__normal_iterator<char*,\
    \ std::__cxx11::basic_string<char> >; typename __gnu_cxx::__alloc_traits<typename\
    \ __gnu_cxx::__alloc_traits<_Alloc>::rebind<_CharT>::other>::pointer = char*]\u2019\
    \n 2149 |       replace(__const_iterator __i1, __const_iterator __i2,\n      |\
    \       ^~~~~~~\n/usr/include/c++/9/bits/basic_string.h:2149:7: note:   candidate\
    \ expects 4 arguments, 2 provided\n/usr/include/c++/9/bits/basic_string.h:2160:7:\
    \ note: candidate: \u2018std::__cxx11::basic_string<_CharT, _Traits, _Alloc>&\
    \ std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::replace(std::__cxx11::basic_string<_CharT,\
    \ _Traits, _Alloc>::__const_iterator, std::__cxx11::basic_string<_CharT, _Traits,\
    \ _Alloc>::__const_iterator, std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::const_iterator,\
    \ std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::const_iterator) [with _CharT\
    \ = char; _Traits = std::char_traits<char>; _Alloc = std::allocator<char>; std::__cxx11::basic_string<_CharT,\
    \ _Traits, _Alloc>::__const_iterator = __gnu_cxx::__normal_iterator<const char*,\
    \ std::__cxx11::basic_string<char> >; typename __gnu_cxx::__alloc_traits<typename\
    \ __gnu_cxx::__alloc_traits<_Alloc>::rebind<_CharT>::other>::const_pointer = const\
    \ char*; std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::const_iterator =\
    \ __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> >]\u2019\
    \n 2160 |       replace(__const_iterator __i1, __const_iterator __i2,\n      |\
    \       ^~~~~~~\n/usr/include/c++/9/bits/basic_string.h:2160:7: note:   candidate\
    \ expects 4 arguments, 2 provided\n/usr/include/c++/9/bits/basic_string.h:2185:21:\
    \ note: candidate: \u2018std::__cxx11::basic_string<_CharT, _Traits, _Alloc>&\
    \ std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::replace(std::__cxx11::basic_string<_CharT,\
    \ _Traits, _Alloc>::const_iterator, std::__cxx11::basic_string<_CharT, _Traits,\
    \ _Alloc>::const_iterator, std::initializer_list<_Tp>) [with _CharT = char; _Traits\
    \ = std::char_traits<char>; _Alloc = std::allocator<char>; std::__cxx11::basic_string<_CharT,\
    \ _Traits, _Alloc>::const_iterator = __gnu_cxx::__normal_iterator<const char*,\
    \ std::__cxx11::basic_string<char> >; typename __gnu_cxx::__alloc_traits<typename\
    \ __gnu_cxx::__alloc_traits<_Alloc>::rebind<_CharT>::other>::const_pointer = const\
    \ char*]\u2019\n 2185 |       basic_string& replace(const_iterator __i1, const_iterator\
    \ __i2,\n      |                     ^~~~~~~\n/usr/include/c++/9/bits/basic_string.h:2185:21:\
    \ note:   candidate expects 3 arguments, 2 provided\n/tmp/tmptynzhvy4.cpp:21:130:\
    \ error: no matching function for call to \u2018std::__cxx11::basic_string<char>::replace(const\
    \ char [2], const char [1])\u2019\n   21 |     std::string vowels_reversed_upper_lower_nospace_nospace_nospace\
    \ = vowels_reversed_upper_lower_nospace_nospace.replace(\" \", \"\");\n      |\
    \                                                                            \
    \                                                      ^\nIn file included from\
    \ /usr/include/c++/9/string:55,\n                 from /usr/include/c++/9/bits/locale_classes.h:40,\n\
    \                 from /usr/include/c++/9/bits/ios_base.h:41,\n              \
    \   from /usr/include/c++/9/ios:42,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmptynzhvy4.cpp:2:\n/usr/include/c++/9/bits/basic_string.h:1893:7: note:\
    \ candidate: \u2018std::__cxx11::basic_string<_CharT, _Traits, _Alloc>& std::__cxx11::basic_string<_CharT,\
    \ _Traits, _Alloc>::replace(std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type,\
    \ std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type, const std::__cxx11::basic_string<_CharT,\
    \ _Traits, _Alloc>&) [with _CharT = char; _Traits = std::char_traits<char>; _Alloc\
    \ = std::allocator<char>; std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type\
    \ = long unsigned int]\u2019\n 1893 |       replace(size_type __pos, size_type\
    \ __n, const basic_string& __str)\n      |       ^~~~~~~\n/usr/include/c++/9/bits/basic_string.h:1893:7:\
    \ note:   candidate expects 3 arguments, 2 provided\n/usr/include/c++/9/bits/basic_string.h:1915:7:\
    \ note: candidate: \u2018std::__cxx11::basic_string<_CharT, _Traits, _Alloc>&\
    \ std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::replace(std::__cxx11::basic_string<_CharT,\
    \ _Traits, _Alloc>::size_type, std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type,\
    \ const std::__cxx11::basic_string<_CharT, _Traits, _Alloc>&, std::__cxx11::basic_string<_CharT,\
    \ _Traits, _Alloc>::size_type, std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type)\
    \ [with _CharT = char; _Traits = std::char_traits<char>; _Alloc = std::allocator<char>;\
    \ std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type = long unsigned\
    \ int]\u2019\n 1915 |       replace(size_type __pos1, size_type __n1, const basic_string&\
    \ __str,\n      |       ^~~~~~~\n/usr/include/c++/9/bits/basic_string.h:1915:7:\
    \ note:   candidate expects 5 arguments, 2 provided\n/usr/include/c++/9/bits/basic_string.h:1940:7:\
    \ note: candidate: \u2018std::__cxx11::basic_string<_CharT, _Traits, _Alloc>&\
    \ std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::replace(std::__cxx11::basic_string<_CharT,\
    \ _Traits, _Alloc>::size_type, std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type,\
    \ const _CharT*, std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type)\
    \ [with _CharT = char; _Traits = std::char_traits<char>; _Alloc = std::allocator<char>;\
    \ std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type = long unsigned\
    \ int]\u2019\n 1940 |       replace(size_type __pos, size_type __n1, const _CharT*\
    \ __s,\n      |       ^~~~~~~\n/usr/include/c++/9/bits/basic_string.h:1940:7:\
    \ note:   candidate expects 4 arguments, 2 provided\n/usr/include/c++/9/bits/basic_string.h:1965:7:\
    \ note: candidate: \u2018std::__cxx11::basic_string<_CharT, _Traits, _Alloc>&\
    \ std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::replace(std::__cxx11::basic_string<_CharT,\
    \ _Traits, _Alloc>::size_type, std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type,\
    \ const _CharT*) [with _CharT = char; _Traits = std::char_traits<char>; _Alloc\
    \ = std::allocator<char>; std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type\
    \ = long unsigned int]\u2019\n 1965 |       replace(size_type __pos, size_type\
    \ __n1, const _CharT* __s)\n      |       ^~~~~~~\n/usr/include/c++/9/bits/basic_string.h:1965:7:\
    \ note:   candidate expects 3 arguments, 2 provided\n/usr/include/c++/9/bits/basic_string.h:1989:7:\
    \ note: candidate: \u2018std::__cxx11::basic_string<_CharT, _Traits, _Alloc>&\
    \ std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::replace(std::__cxx11::basic_string<_CharT,\
    \ _Traits, _Alloc>::size_type, std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type,\
    \ std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type, _CharT) [with\
    \ _CharT = char; _Traits = std::char_traits<char>; _Alloc = std::allocator<char>;\
    \ std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type = long unsigned\
    \ int]\u2019\n 1989 |       replace(size_type __pos, size_type __n1, size_type\
    \ __n2, _CharT __c)\n      |       ^~~~~~~\n/usr/include/c++/9/bits/basic_string.h:1989:7:\
    \ note:   candidate expects 4 arguments, 2 provided\n/usr/include/c++/9/bits/basic_string.h:2007:7:\
    \ note: candidate: \u2018std::__cxx11::basic_string<_CharT, _Traits, _Alloc>&\
    \ std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::replace(std::__cxx11::basic_string<_CharT,\
    \ _Traits, _Alloc>::__const_iterator, std::__cxx11::basic_string<_CharT, _Traits,\
    \ _Alloc>::__const_iterator, const std::__cxx11::basic_string<_CharT, _Traits,\
    \ _Alloc>&) [with _CharT = char; _Traits = std::char_traits<char>; _Alloc = std::allocator<char>;\
    \ std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::__const_iterator = __gnu_cxx::__normal_iterator<const\
    \ char*, std::__cxx11::basic_string<char> >; typename __gnu_cxx::__alloc_traits<typename\
    \ __gnu_cxx::__alloc_traits<_Alloc>::rebind<_CharT>::other>::const_pointer = const\
    \ char*]\u2019\n 2007 |       replace(__const_iterator __i1, __const_iterator\
    \ __i2,\n      |       ^~~~~~~\n/usr/include/c++/9/bits/basic_string.h:2007:7:\
    \ note:   candidate expects 3 arguments, 2 provided\n/usr/include/c++/9/bits/basic_string.h:2027:7:\
    \ note: candidate: \u2018std::__cxx11::basic_string<_CharT, _Traits, _Alloc>&\
    \ std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::replace(std::__cxx11::basic_string<_CharT,\
    \ _Traits, _Alloc>::__const_iterator, std::__cxx11::basic_string<_CharT, _Traits,\
    \ _Alloc>::__const_iterator, const _CharT*, std::__cxx11::basic_string<_CharT,\
    \ _Traits, _Alloc>::size_type) [with _CharT = char; _Traits = std::char_traits<char>;\
    \ _Alloc = std::allocator<char>; std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::__const_iterator\
    \ = __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char>\
    \ >; typename __gnu_cxx::__alloc_traits<typename __gnu_cxx::__alloc_traits<_Alloc>::rebind<_CharT>::other>::const_pointer\
    \ = const char*; std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type\
    \ = long unsigned int]\u2019\n 2027 |       replace(__const_iterator __i1, __const_iterator\
    \ __i2,\n      |       ^~~~~~~\n/usr/include/c++/9/bits/basic_string.h:2027:7:\
    \ note:   candidate expects 4 arguments, 2 provided\n/usr/include/c++/9/bits/basic_string.h:2049:7:\
    \ note: candidate: \u2018std::__cxx11::basic_string<_CharT, _Traits, _Alloc>&\
    \ std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::replace(std::__cxx11::basic_string<_CharT,\
    \ _Traits, _Alloc>::__const_iterator, std::__cxx11::basic_string<_CharT, _Traits,\
    \ _Alloc>::__const_iterator, const _CharT*) [with _CharT = char; _Traits = std::char_traits<char>;\
    \ _Alloc = std::allocator<char>; std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::__const_iterator\
    \ = __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char>\
    \ >; typename __gnu_cxx::__alloc_traits<typename __gnu_cxx::__alloc_traits<_Alloc>::rebind<_CharT>::other>::const_pointer\
    \ = const char*]\u2019\n 2049 |       replace(__const_iterator __i1, __const_iterator\
    \ __i2, const _CharT* __s)\n      |       ^~~~~~~\n/usr/include/c++/9/bits/basic_string.h:2049:7:\
    \ note:   candidate expects 3 arguments, 2 provided\n/usr/include/c++/9/bits/basic_string.h:2070:7:\
    \ note: candidate: \u2018std::__cxx11::basic_string<_CharT, _Traits, _Alloc>&\
    \ std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::replace(std::__cxx11::basic_string<_CharT,\
    \ _Traits, _Alloc>::__const_iterator, std::__cxx11::basic_string<_CharT, _Traits,\
    \ _Alloc>::__const_iterator, std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type,\
    \ _CharT) [with _CharT = char; _Traits = std::char_traits<char>; _Alloc = std::allocator<char>;\
    \ std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::__const_iterator = __gnu_cxx::__normal_iterator<const\
    \ char*, std::__cxx11::basic_string<char> >; typename __gnu_cxx::__alloc_traits<typename\
    \ __gnu_cxx::__alloc_traits<_Alloc>::rebind<_CharT>::other>::const_pointer = const\
    \ char*; std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type = long\
    \ unsigned int]\u2019\n 2070 |       replace(__const_iterator __i1, __const_iterator\
    \ __i2, size_type __n,\n      |       ^~~~~~~\n/usr/include/c++/9/bits/basic_string.h:2070:7:\
    \ note:   candidate expects 4 arguments, 2 provided\n/usr/include/c++/9/bits/basic_string.h:2097:9:\
    \ note: candidate: \u2018template<class _InputIterator, class> std::__cxx11::basic_string<_CharT,\
    \ _Traits, _Alloc>& std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::replace(std::__cxx11::basic_string<_CharT,\
    \ _Traits, _Alloc>::const_iterator, std::__cxx11::basic_string<_CharT, _Traits,\
    \ _Alloc>::const_iterator, _InputIterator, _InputIterator) [with _InputIterator\
    \ = _InputIterator; <template-parameter-2-2> = <template-parameter-1-2>; _CharT\
    \ = char; _Traits = std::char_traits<char>; _Alloc = std::allocator<char>]\u2019\
    \n 2097 |         replace(const_iterator __i1, const_iterator __i2,\n      | \
    \        ^~~~~~~\n/usr/include/c++/9/bits/basic_string.h:2097:9: note:   template\
    \ argument deduction/substitution failed:\n/tmp/tmptynzhvy4.cpp:21:130: note:\
    \   candidate expects 4 arguments, 2 provided\n   21 |     std::string vowels_reversed_upper_lower_nospace_nospace_nospace\
    \ = vowels_reversed_upper_lower_nospace_nospace.replace(\" \", \"\");\n      |\
    \                                                                            \
    \                                                      ^\nIn file included from\
    \ /usr/include/c++/9/string:55,\n                 from /usr/include/c++/9/bits/locale_classes.h:40,\n\
    \                 from /usr/include/c++/9/bits/ios_base.h:41,\n              \
    \   from /usr/include/c++/9/ios:42,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmptynzhvy4.cpp:2:\n/usr/include/c++/9/bits/basic_string.h:2127:7: note:\
    \ candidate: \u2018std::__cxx11::basic_string<_CharT, _Traits, _Alloc>& std::__cxx11::basic_string<_CharT,\
    \ _Traits, _Alloc>::replace(std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::__const_iterator,\
    \ std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::__const_iterator, _CharT*,\
    \ _CharT*) [with _CharT = char; _Traits = std::char_traits<char>; _Alloc = std::allocator<char>;\
    \ std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::__const_iterator = __gnu_cxx::__normal_iterator<const\
    \ char*, std::__cxx11::basic_string<char> >; typename __gnu_cxx::__alloc_traits<typename\
    \ __gnu_cxx::__alloc_traits<_Alloc>::rebind<_CharT>::other>::const_pointer = const\
    \ char*]\u2019\n 2127 |       replace(__const_iterator __i1, __const_iterator\
    \ __i2,\n      |       ^~~~~~~\n/usr/include/c++/9/bits/basic_string.h:2127:7:\
    \ note:   candidate expects 4 arguments, 2 provided\n/usr/include/c++/9/bits/basic_string.h:2138:7:\
    \ note: candidate: \u2018std::__cxx11::basic_string<_CharT, _Traits, _Alloc>&\
    \ std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::replace(std::__cxx11::basic_string<_CharT,\
    \ _Traits, _Alloc>::__const_iterator, std::__cxx11::basic_string<_CharT, _Traits,\
    \ _Alloc>::__const_iterator, const _CharT*, const _CharT*) [with _CharT = char;\
    \ _Traits = std::char_traits<char>; _Alloc = std::allocator<char>; std::__cxx11::basic_string<_CharT,\
    \ _Traits, _Alloc>::__const_iterator = __gnu_cxx::__normal_iterator<const char*,\
    \ std::__cxx11::basic_string<char> >; typename __gnu_cxx::__alloc_traits<typename\
    \ __gnu_cxx::__alloc_traits<_Alloc>::rebind<_CharT>::other>::const_pointer = const\
    \ char*]\u2019\n 2138 |       replace(__const_iterator __i1, __const_iterator\
    \ __i2,\n      |       ^~~~~~~\n/usr/include/c++/9/bits/basic_string.h:2138:7:\
    \ note:   candidate expects 4 arguments, 2 provided\n/usr/include/c++/9/bits/basic_string.h:2149:7:\
    \ note: candidate: \u2018std::__cxx11::basic_string<_CharT, _Traits, _Alloc>&\
    \ std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::replace(std::__cxx11::basic_string<_CharT,\
    \ _Traits, _Alloc>::__const_iterator, std::__cxx11::basic_string<_CharT, _Traits,\
    \ _Alloc>::__const_iterator, std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::iterator,\
    \ std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::iterator) [with _CharT\
    \ = char; _Traits = std::char_traits<char>; _Alloc = std::allocator<char>; std::__cxx11::basic_string<_CharT,\
    \ _Traits, _Alloc>::__const_iterator = __gnu_cxx::__normal_iterator<const char*,\
    \ std::__cxx11::basic_string<char> >; typename __gnu_cxx::__alloc_traits<typename\
    \ __gnu_cxx::__alloc_traits<_Alloc>::rebind<_CharT>::other>::const_pointer = const\
    \ char*; std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::iterator = __gnu_cxx::__normal_iterator<char*,\
    \ std::__cxx11::basic_string<char> >; typename __gnu_cxx::__alloc_traits<typename\
    \ __gnu_cxx::__alloc_traits<_Alloc>::rebind<_CharT>::other>::pointer = char*]\u2019\
    \n 2149 |       replace(__const_iterator __i1, __const_iterator __i2,\n      |\
    \       ^~~~~~~\n/usr/include/c++/9/bits/basic_string.h:2149:7: note:   candidate\
    \ expects 4 arguments, 2 provided\n/usr/include/c++/9/bits/basic_string.h:2160:7:\
    \ note: candidate: \u2018std::__cxx11::basic_string<_CharT, _Traits, _Alloc>&\
    \ std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::replace(std::__cxx11::basic_string<_CharT,\
    \ _Traits, _Alloc>::__const_iterator, std::__cxx11::basic_string<_CharT, _Traits,\
    \ _Alloc>::__const_iterator, std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::const_iterator,\
    \ std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::const_iterator) [with _CharT\
    \ = char; _Traits = std::char_traits<char>; _Alloc = std::allocator<char>; std::__cxx11::basic_string<_CharT,\
    \ _Traits, _Alloc>::__const_iterator = __gnu_cxx::__normal_iterator<const char*,\
    \ std::__cxx11::basic_string<char> >; typename __gnu_cxx::__alloc_traits<typename\
    \ __gnu_cxx::__alloc_traits<_Alloc>::rebind<_CharT>::other>::const_pointer = const\
    \ char*; std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::const_iterator =\
    \ __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> >]\u2019\
    \n 2160 |       replace(__const_iterator __i1, __const_iterator __i2,\n      |\
    \       ^~~~~~~\n/usr/include/c++/9/bits/basic_string.h:2160:7: note:   candidate\
    \ expects 4 arguments, 2 provided\n/usr/include/c++/9/bits/basic_string.h:2185:21:\
    \ note: candidate: \u2018std::__cxx11::basic_string<_CharT, _Traits, _Alloc>&\
    \ std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::replace(std::__cxx11::basic_string<_CharT,\
    \ _Traits, _Alloc>::const_iterator, std::__cxx11::basic_string<_CharT, _Traits,\
    \ _Alloc>::const_iterator, std::initializer_list<_Tp>) [with _CharT = char; _Traits\
    \ = std::char_traits<char>; _Alloc = std::allocator<char>; std::__cxx11::basic_string<_CharT,\
    \ _Traits, _Alloc>::const_iterator = __gnu_cxx::__normal_iterator<const char*,\
    \ std::__cxx11::basic_string<char> >; typename __gnu_cxx::__alloc_traits<typename\
    \ __gnu_cxx::__alloc_traits<_Alloc>::rebind<_CharT>::other>::const_pointer = const\
    \ char*]\u2019\n 2185 |       basic_string& replace(const_iterator __i1, const_iterator\
    \ __i2,\n      |                     ^~~~~~~\n/usr/include/c++/9/bits/basic_string.h:2185:21:\
    \ note:   candidate expects 3 arguments, 2 provided\n/tmp/tmptynzhvy4.cpp:22:154:\
    \ error: no matching function for call to \u2018std::__cxx11::basic_string<char>::replace(const\
    \ char [2], const char [1])\u2019\n   22 |     std::string vowels_reversed_upper_lower_nospace_nospace_nospace_nospace\
    \ = vowels_reversed_upper_lower_nospace_nospace_nospace_nospace.replace(\" \"\
    , \"\");\n      |                                                            \
    \                                                                            \
    \                  ^\nIn file included from /usr/include/c++/9/string:55,\n  \
    \               from /usr/include/c++/9/bits/locale_classes.h:40,\n          \
    \       from /usr/include/c++/9/bits/ios_base.h:41,\n                 from /usr/include/c++/9/ios:42,\n\
    \                 from /usr/include/c++/9/istream:38,\n                 from /usr/include/c++/9/sstream:38,\n\
    \                 from /usr/include/c++/9/complex:45,\n                 from /usr/include/c++/9/ccomplex:39,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n\
    \                 from /tmp/tmptynzhvy4.cpp:2:\n/usr/include/c++/9/bits/basic_string.h:1893:7:\
    \ note: candidate: \u2018std::__cxx11::basic_string<_CharT, _Traits, _Alloc>&\
    \ std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::replace(std::__cxx11::basic_string<_CharT,\
    \ _Traits, _Alloc>::size_type, std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type,\
    \ const std::__cxx11::basic_string<_CharT, _Traits, _Alloc>&) [with _CharT = char;\
    \ _Traits = std::char_traits<char>; _Alloc = std::allocator<char>; std::__cxx11::basic_string<_CharT,\
    \ _Traits, _Alloc>::size_type = long unsigned int]\u2019\n 1893 |       replace(size_type\
    \ __pos, size_type __n, const basic_string& __str)\n      |       ^~~~~~~\n/usr/include/c++/9/bits/basic_string.h:1893:7:\
    \ note:   candidate expects 3 arguments, 2 provided\n/usr/include/c++/9/bits/basic_string.h:1915:7:\
    \ note: candidate: \u2018std::__cxx11::basic_string<_CharT, _Traits, _Alloc>&\
    \ std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::replace(std::__cxx11::basic_string<_CharT,\
    \ _Traits, _Alloc>::size_type, std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type,\
    \ const std::__cxx11::basic_string<_CharT, _Traits, _Alloc>&, std::__cxx11::basic_string<_CharT,\
    \ _Traits, _Alloc>::size_type, std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type)\
    \ [with _CharT = char; _Traits = std::char_traits<char>; _Alloc = std::allocator<char>;\
    \ std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type = long unsigned\
    \ int]\u2019\n 1915 |       replace(size_type __pos1, size_type __n1, const basic_string&\
    \ __str,\n      |       ^~~~~~~\n/usr/include/c++/9/bits/basic_string.h:1915:7:\
    \ note:   candidate expects 5 arguments, 2 provided\n/usr/include/c++/9/bits/basic_string.h:1940:7:\
    \ note: candidate: \u2018std::__cxx11::basic_string<_CharT, _Traits, _Alloc>&\
    \ std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::replace(std::__cxx11::basic_string<_CharT,\
    \ _Traits, _Alloc>::size_type, std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type,\
    \ const _CharT*, std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type)\
    \ [with _CharT = char; _Traits = std::char_traits<char>; _Alloc = std::allocator<char>;\
    \ std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type = long unsigned\
    \ int]\u2019\n 1940 |       replace(size_type __pos, size_type __n1, const _CharT*\
    \ __s,\n      |       ^~~~~~~\n/usr/include/c++/9/bits/basic_string.h:1940:7:\
    \ note:   candidate expects 4 arguments, 2 provided\n/usr/include/c++/9/bits/basic_string.h:1965:7:\
    \ note: candidate: \u2018std::__cxx11::basic_string<_CharT, _Traits, _Alloc>&\
    \ std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::replace(std::__cxx11::basic_string<_CharT,\
    \ _Traits, _Alloc>::size_type, std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type,\
    \ const _CharT*) [with _CharT = char; _Traits = std::char_traits<char>; _Alloc\
    \ = std::allocator<char>; std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type\
    \ = long unsigned int]\u2019\n 1965 |       replace(size_type __pos, size_type\
    \ __n1, const _CharT* __s)\n      |       ^~~~~~~\n/usr/include/c++/9/bits/basic_string.h:1965:7:\
    \ note:   candidate expects 3 arguments, 2 provided\n/usr/include/c++/9/bits/basic_string.h:1989:7:\
    \ note: candidate: \u2018std::__cxx11::basic_string<_CharT, _Traits, _Alloc>&\
    \ std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::replace(std::__cxx11::basic_string<_CharT,\
    \ _Traits, _Alloc>::size_type, std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type,\
    \ std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type, _CharT) [with\
    \ _CharT = char; _Traits = std::char_traits<char>; _Alloc = std::allocator<char>;\
    \ std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type = long unsigned\
    \ int]\u2019\n 1989 |       replace(size_type __pos, size_type __n1, size_type\
    \ __n2, _CharT __c)\n      |       ^~~~~~~\n/usr/include/c++/9/bits/basic_string.h:1989:7:\
    \ note:   candidate expects 4 arguments, 2 provided\n/usr/include/c++/9/bits/basic_string.h:2007:7:\
    \ note: candidate: \u2018std::__cxx11::basic_string<_CharT, _Traits, _Alloc>&\
    \ std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::replace(std::__cxx11::basic_string<_CharT,\
    \ _Traits, _Alloc>::__const_iterator, std::__cxx11::basic_string<_CharT, _Traits,\
    \ _Alloc>::__const_iterator, const std::__cxx11::basic_string<_CharT, _Traits,\
    \ _Alloc>&) [with _CharT = char; _Traits = std::char_traits<char>; _Alloc = std::allocator<char>;\
    \ std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::__const_iterator = __gnu_cxx::__normal_iterator<const\
    \ char*, std::__cxx11::basic_string<char> >; typename __gnu_cxx::__alloc_traits<typename\
    \ __gnu_cxx::__alloc_traits<_Alloc>::rebind<_CharT>::other>::const_pointer = const\
    \ char*]\u2019\n 2007 |       replace(__const_iterator __i1, __const_iterator\
    \ __i2,\n      |       ^~~~~~~\n/usr/include/c++/9/bits/basic_string.h:2007:7:\
    \ note:   candidate expects 3 arguments, 2 provided\n/usr/include/c++/9/bits/basic_string.h:2027:7:\
    \ note: candidate: \u2018std::__cxx11::basic_string<_CharT, _Traits, _Alloc>&\
    \ std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::replace(std::__cxx11::basic_string<_CharT,\
    \ _Traits, _Alloc>::__const_iterator, std::__cxx11::basic_string<_CharT, _Traits,\
    \ _Alloc>::__const_iterator, const _CharT*, std::__cxx11::basic_string<_CharT,\
    \ _Traits, _Alloc>::size_type) [with _CharT = char; _Traits = std::char_traits<char>;\
    \ _Alloc = std::allocator<char>; std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::__const_iterator\
    \ = __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char>\
    \ >; typename __gnu_cxx::__alloc_traits<typename __gnu_cxx::__alloc_traits<_Alloc>::rebind<_CharT>::other>::const_pointer\
    \ = const char*; std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type\
    \ = long unsigned int]\u2019\n 2027 |       replace(__const_iterator __i1, __const_iterator\
    \ __i2,\n      |       ^~~~~~~\n/usr/include/c++/9/bits/basic_string.h:2027:7:\
    \ note:   candidate expects 4 arguments, 2 provided\n/usr/include/c++/9/bits/basic_string.h:2049:7:\
    \ note: candidate: \u2018std::__cxx11::basic_string<_CharT, _Traits, _Alloc>&\
    \ std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::replace(std::__cxx11::basic_string<_CharT,\
    \ _Traits, _Alloc>::__const_iterator, std::__cxx11::basic_string<_CharT, _Traits,\
    \ _Alloc>::__const_iterator, const _CharT*) [with _CharT = char; _Traits = std::char_traits<char>;\
    \ _Alloc = std::allocator<char>; std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::__const_iterator\
    \ = __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char>\
    \ >; typename __gnu_cxx::__alloc_traits<typename __gnu_cxx::__alloc_traits<_Alloc>::rebind<_CharT>::other>::const_pointer\
    \ = const char*]\u2019\n 2049 |       replace(__const_iterator __i1, __const_iterator\
    \ __i2, const _CharT* __s)\n      |       ^~~~~~~\n/usr/include/c++/9/bits/basic_string.h:2049:7:\
    \ note:   candidate expects 3 arguments, 2 provided\n/usr/include/c++/9/bits/basic_string.h:2070:7:\
    \ note: candidate: \u2018std::__cxx11::basic_string<_CharT, _Traits, _Alloc>&\
    \ std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::replace(std::__cxx11::basic_string<_CharT,\
    \ _Traits, _Alloc>::__const_iterator, std::__cxx11::basic_string<_CharT, _Traits,\
    \ _Alloc>::__const_iterator, std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type,\
    \ _CharT) [with _CharT = char; _Traits = std::char_traits<char>; _Alloc = std::allocator<char>;\
    \ std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::__const_iterator = __gnu_cxx::__normal_iterator<const\
    \ char*, std::__cxx11::basic_string<char> >; typename __gnu_cxx::__alloc_traits<typename\
    \ __gnu_cxx::__alloc_traits<_Alloc>::rebind<_CharT>::other>::const_pointer = const\
    \ char*; std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type = long\
    \ unsigned int]\u2019\n 2070 |       replace(__const_iterator __i1, __const_iterator\
    \ __i2, size_type __n,\n      |       ^~~~~~~\n/usr/include/c++/9/bits/basic_string.h:2070:7:\
    \ note:   candidate expects 4 arguments, 2 provided\n/usr/include/c++/9/bits/basic_string.h:2097:9:\
    \ note: candidate: \u2018template<class _InputIterator, class> std::__cxx11::basic_string<_CharT,\
    \ _Traits, _Alloc>& std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::replace(std::__cxx11::basic_string<_CharT,\
    \ _Traits, _Alloc>::const_iterator, std::__cxx11::basic_string<_CharT, _Traits,\
    \ _Alloc>::const_iterator, _InputIterator, _InputIterator) [with _InputIterator\
    \ = _InputIterator; <template-parameter-2-2> = <template-parameter-1-2>; _CharT\
    \ = char; _Traits = std::char_traits<char>; _Alloc = std::allocator<char>]\u2019\
    \n 2097 |         replace(const_iterator __i1, const_iterator __i2,\n      | \
    \        ^~~~~~~\n/usr/include/c++/9/bits/basic_string.h:2097:9: note:   template\
    \ argument deduction/substitution failed:\n/tmp/tmptynzhvy4.cpp:22:154: note:\
    \   candidate expects 4 arguments, 2 provided\n   22 |     std::string vowels_reversed_upper_lower_nospace_nospace_nospace_nospace\
    \ = vowels_reversed_upper_lower_nospace_nospace_nospace_nospace.replace(\" \"\
    , \"\");\n      |                                                            \
    \                                                                            \
    \                  ^\nIn file included from /usr/include/c++/9/string:55,\n  \
    \               from /usr/include/c++/9/bits/locale_classes.h:40,\n          \
    \       from /usr/include/c++/9/bits/ios_base.h:41,\n                 from /usr/include/c++/9/ios:42,\n\
    \                 from /usr/include/c++/9/istream:38,\n                 from /usr/include/c++/9/sstream:38,\n\
    \                 from /usr/include/c++/9/complex:45,\n                 from /usr/include/c++/9/ccomplex:39,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n\
    \                 from /tmp/tmptynzhvy4.cpp:2:\n/usr/include/c++/9/bits/basic_string.h:2127:7:\
    \ note: candidate: \u2018std::__cxx11::basic_string<_CharT, _Traits, _Alloc>&\
    \ std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::replace(std::__cxx11::basic_string<_CharT,\
    \ _Traits, _Alloc>::__const_iterator, std::__cxx11::basic_string<_CharT, _Traits,\
    \ _Alloc>::__const_iterator, _CharT*, _CharT*) [with _CharT = char; _Traits =\
    \ std::char_traits<char>; _Alloc = std::allocator<char>; std::__cxx11::basic_string<_CharT,\
    \ _Traits, _Alloc>::__const_iterator = __gnu_cxx::__normal_iterator<const char*,\
    \ std::__cxx11::basic_string<char> >; typename __gnu_cxx::__alloc_traits<typename\
    \ __gnu_cxx::__alloc_traits<_Alloc>::rebind<_CharT>::other>::const_pointer = const\
    \ char*]\u2019\n 2127 |       replace(__const_iterator __i1, __const_iterator\
    \ __i2,\n      |       ^~~~~~~\n/usr/include/c++/9/bits/basic_string.h:2127:7:\
    \ note:   candidate expects 4 arguments, 2 provided\n/usr/include/c++/9/bits/basic_string.h:2138:7:\
    \ note: candidate: \u2018std::__cxx11::basic_string<_CharT, _Traits, _Alloc>&\
    \ std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::replace(std::__cxx11::basic_string<_CharT,\
    \ _Traits, _Alloc>::__const_iterator, std::__cxx11::basic_string<_CharT, _Traits,\
    \ _Alloc>::__const_iterator, const _CharT*, const _CharT*) [with _CharT = char;\
    \ _Traits = std::char_traits<char>; _Alloc = std::allocator<char>; std::__cxx11::basic_string<_CharT,\
    \ _Traits, _Alloc>::__const_iterator = __gnu_cxx::__normal_iterator<const char*,\
    \ std::__cxx11::basic_string<char> >; typename __gnu_cxx::__alloc_traits<typename\
    \ __gnu_cxx::__alloc_traits<_Alloc>::rebind<_CharT>::other>::const_pointer = const\
    \ char*]\u2019\n 2138 |       replace(__const_iterator __i1, __const_iterator\
    \ __i2,\n      |       ^~~~~~~\n/usr/include/c++/9/bits/basic_string.h:2138:7:\
    \ note:   candidate expects 4 arguments, 2 provided\n/usr/include/c++/9/bits/basic_string.h:2149:7:\
    \ note: candidate: \u2018std::__cxx11::basic_string<_CharT, _Traits, _Alloc>&\
    \ std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::replace(std::__cxx11::basic_string<_CharT,\
    \ _Traits, _Alloc>::__const_iterator, std::__cxx11::basic_string<_CharT, _Traits,\
    \ _Alloc>::__const_iterator, std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::iterator,\
    \ std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::iterator) [with _CharT\
    \ = char; _Traits = std::char_traits<char>; _Alloc = std::allocator<char>; std::__cxx11::basic_string<_CharT,\
    \ _Traits, _Alloc>::__const_iterator = __gnu_cxx::__normal_iterator<const char*,\
    \ std::__cxx11::basic_string<char> >; typename __gnu_cxx::__alloc_traits<typename\
    \ __gnu_cxx::__alloc_traits<_Alloc>::rebind<_CharT>::other>::const_pointer = const\
    \ char*; std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::iterator = __gnu_cxx::__normal_iterator<char*,\
    \ std::__cxx11::basic_string<char> >; typename __gnu_cxx::__alloc_traits<typename\
    \ __gnu_cxx::__alloc_traits<_Alloc>::rebind<_CharT>::other>::pointer = char*]\u2019\
    \n 2149 |       replace(__const_iterator __i1, __const_iterator __i2,\n      |\
    \       ^~~~~~~\n/usr/include/c++/9/bits/basic_string.h:2149:7: note:   candidate\
    \ expects 4 arguments, 2 provided\n/usr/include/c++/9/bits/basic_string.h:2160:7:\
    \ note: candidate: \u2018std::__cxx11::basic_string<_CharT, _Traits, _Alloc>&\
    \ std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::replace(std::__cxx11::basic_string<_CharT,\
    \ _Traits, _Alloc>::__const_iterator, std::__cxx11::basic_string<_CharT, _Traits,\
    \ _Alloc>::__const_iterator, std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::const_iterator,\
    \ std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::const_iterator) [with _CharT\
    \ = char; _Traits = std::char_traits<char>; _Alloc = std::allocator<char>; std::__cxx11::basic_string<_CharT,\
    \ _Traits, _Alloc>::__const_iterator = __gnu_cxx::__normal_iterator<const char*,\
    \ std::__cxx11::basic_string<char> >; typename __gnu_cxx::__alloc_traits<typename\
    \ __gnu_cxx::__alloc_traits<_Alloc>::rebind<_CharT>::other>::const_pointer = const\
    \ char*; std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::const_iterator =\
    \ __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> >]\u2019\
    \n 2160 |       replace(__const_iterator __i1, __const_iterator __i2,\n      |\
    \       ^~~~~~~\n/usr/include/c++/9/bits/basic_string.h:2160:7: note:   candidate\
    \ expects 4 arguments, 2 provided\n/usr/include/c++/9/bits/basic_string.h:2185:21:\
    \ note: candidate: \u2018std::__cxx11::basic_string<_CharT, _Traits, _Alloc>&\
    \ std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::replace(std::__cxx11::basic_string<_CharT,\
    \ _Traits, _Alloc>::const_iterator, std::__cxx11::basic_string<_CharT, _Traits,\
    \ _Alloc>::const_iterator, std::initializer_list<_Tp>) [with _CharT = char; _Traits\
    \ = std::char_traits<char>; _Alloc = std::allocator<char>; std::__cxx11::basic_string<_CharT,\
    \ _Traits, _Alloc>::const_iterator = __gnu_cxx::__normal_iterator<const char*,\
    \ std::__cxx11::basic_string<char> >; typename __gnu_cxx::__alloc_traits<typename\
    \ __gnu_cxx::__alloc_traits<_Alloc>::rebind<_CharT>::other>::const_pointer = const\
    \ char*]\u2019\n 2185 |       basic_string& replace(const_iterator __i1, const_iterator\
    \ __i2,\n      |                     ^~~~~~~\n/usr/include/c++/9/bits/basic_string.h:2185:21:\
    \ note:   candidate expects 3 arguments, 2 provided\n/tmp/tmptynzhvy4.cpp:23:186:\
    \ error: no matching function for call to \u2018std::__cxx11::basic_string<char>::replace(const\
    \ char [2], const char [1])\u2019\n   23 |     std::string vowels_reversed_upper_lower_nospace_nospace_nospace_nospace_nospace_nospace\
    \ = vowels_reversed_upper_lower_nospace_nospace_nospace_nospace_nospace_nospace.replace(\"\
    \ \", \"\");\n      |                                                        \
    \                                                                            \
    \                                                      ^\nIn file included from\
    \ /usr/include/c++/9/string:55,\n                 from /usr/include/c++/9/bits/locale_classes.h:40,\n\
    \                 from /usr/include/c++/9/bits/ios_base.h:41,\n              \
    \   from /usr/include/c++/9/ios:42,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmptynzhvy4.cpp:2:\n/usr/include/c++/9/bits/basic_string.h:1893:7: note:\
    \ candidate: \u2018std::__cxx11::basic_string<_CharT, _Traits, _Alloc>& std::__cxx11::basic_string<_CharT,\
    \ _Traits, _Alloc>::replace(std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type,\
    \ std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type, const std::__cxx11::basic_string<_CharT,\
    \ _Traits, _Alloc>&) [with _CharT = char; _Traits = std::char_traits<char>; _Alloc\
    \ = std::allocator<char>; std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type\
    \ = long unsigned int]\u2019\n 1893 |       replace(size_type __pos, size_type\
    \ __n, const basic_string& __str)\n      |       ^~~~~~~\n/usr/include/c++/9/bits/basic_string.h:1893:7:\
    \ note:   candidate expects 3 arguments, 2 provided\n/usr/include/c++/9/bits/basic_string.h:1915:7:\
    \ note: candidate: \u2018std::__cxx11::basic_string<_CharT, _Traits, _Alloc>&\
    \ std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::replace(std::__cxx11::basic_string<_CharT,\
    \ _Traits, _Alloc>::size_type, std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type,\
    \ const std::__cxx11::basic_string<_CharT, _Traits, _Alloc>&, std::__cxx11::basic_string<_CharT,\
    \ _Traits, _Alloc>::size_type, std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type)\
    \ [with _CharT = char; _Traits = std::char_traits<char>; _Alloc = std::allocator<char>;\
    \ std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type = long unsigned\
    \ int]\u2019\n 1915 |       replace(size_type __pos1, size_type __n1, const basic_string&\
    \ __str,\n      |       ^~~~~~~\n/usr/include/c++/9/bits/basic_string.h:1915:7:\
    \ note:   candidate expects 5 arguments, 2 provided\n/usr/include/c++/9/bits/basic_string.h:1940:7:\
    \ note: candidate: \u2018std::__cxx11::basic_string<_CharT, _Traits, _Alloc>&\
    \ std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::replace(std::__cxx11::basic_string<_CharT,\
    \ _Traits, _Alloc>::size_type, std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type,\
    \ const _CharT*, std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type)\
    \ [with _CharT = char; _Traits = std::char_traits<char>; _Alloc = std::allocator<char>;\
    \ std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type = long unsigned\
    \ int]\u2019\n 1940 |       replace(size_type __pos, size_type __n1, const _CharT*\
    \ __s,\n      |       ^~~~~~~\n/usr/include/c++/9/bits/basic_string.h:1940:7:\
    \ note:   candidate expects 4 arguments, 2 provided\n/usr/include/c++/9/bits/basic_string.h:1965:7:\
    \ note: candidate: \u2018std::__cxx11::basic_string<_CharT, _Traits, _Alloc>&\
    \ std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::replace(std::__cxx11::basic_string<_CharT,\
    \ _Traits, _Alloc>::size_type, std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type,\
    \ const _CharT*) [with _CharT = char; _Traits = std::char_traits<char>; _Alloc\
    \ = std::allocator<char>; std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type\
    \ = long unsigned int]\u2019\n 1965 |       replace(size_type __pos, size_type\
    \ __n1, const _CharT* __s)\n      |       ^~~~~~~\n/usr/include/c++/9/bits/basic_string.h:1965:7:\
    \ note:   candidate expects 3 arguments, 2 provided\n/usr/include/c++/9/bits/basic_string.h:1989:7:\
    \ note: candidate: \u2018std::__cxx11::basic_string<_CharT, _Traits, _Alloc>&\
    \ std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::replace(std::__cxx11::basic_string<_CharT,\
    \ _Traits, _Alloc>::size_type, std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type,\
    \ std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type, _CharT) [with\
    \ _CharT = char; _Traits = std::char_traits<char>; _Alloc = std::allocator<char>;\
    \ std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type = long unsigned\
    \ int]\u2019\n 1989 |       replace(size_type __pos, size_type __n1, size_type\
    \ __n2, _CharT __c)\n      |       ^~~~~~~\n/usr/include/c++/9/bits/basic_string.h:1989:7:\
    \ note:   candidate expects 4 arguments, 2 provided\n/usr/include/c++/9/bits/basic_string.h:2007:7:\
    \ note: candidate: \u2018std::__cxx11::basic_string<_CharT, _Traits, _Alloc>&\
    \ std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::replace(std::__cxx11::basic_string<_CharT,\
    \ _Traits, _Alloc>::__const_iterator, std::__cxx11::basic_string<_CharT, _Traits,\
    \ _Alloc>::__const_iterator, const std::__cxx11::basic_string<_CharT, _Traits,\
    \ _Alloc>&) [with _CharT = char; _Traits = std::char_traits<char>; _Alloc = std::allocator<char>;\
    \ std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::__const_iterator = __gnu_cxx::__normal_iterator<const\
    \ char*, std::__cxx11::basic_string<char> >; typename __gnu_cxx::__alloc_traits<typename\
    \ __gnu_cxx::__alloc_traits<_Alloc>::rebind<_CharT>::other>::const_pointer = const\
    \ char*]\u2019\n 2007 |       replace(__const_iterator __i1, __const_iterator\
    \ __i2,\n      |       ^~~~~~~\n/usr/include/c++/9/bits/basic_string.h:2007:7:\
    \ note:   candidate expects 3 arguments, 2 provided\n/usr/include/c++/9/bits/basic_string.h:2027:7:\
    \ note: candidate: \u2018std::__cxx11::basic_string<_CharT, _Traits, _Alloc>&\
    \ std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::replace(std::__cxx11::basic_string<_CharT,\
    \ _Traits, _Alloc>::__const_iterator, std::__cxx11::basic_string<_CharT, _Traits,\
    \ _Alloc>::__const_iterator, const _CharT*, std::__cxx11::basic_string<_CharT,\
    \ _Traits, _Alloc>::size_type) [with _CharT = char; _Traits = std::char_traits<char>;\
    \ _Alloc = std::allocator<char>; std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::__const_iterator\
    \ = __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char>\
    \ >; typename __gnu_cxx::__alloc_traits<typename __gnu_cxx::__alloc_traits<_Alloc>::rebind<_CharT>::other>::const_pointer\
    \ = const char*; std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type\
    \ = long unsigned int]\u2019\n 2027 |       replace(__const_iterator __i1, __const_iterator\
    \ __i2,\n      |       ^~~~~~~\n/usr/include/c++/9/bits/basic_string.h:2027:7:\
    \ note:   candidate expects 4 arguments, 2 provided\n/usr/include/c++/9/bits/basic_string.h:2049:7:\
    \ note: candidate: \u2018std::__cxx11::basic_string<_CharT, _Traits, _Alloc>&\
    \ std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::replace(std::__cxx11::basic_string<_CharT,\
    \ _Traits, _Alloc>::__const_iterator, std::__cxx11::basic_string<_CharT, _Traits,\
    \ _Alloc>::__const_iterator, const _CharT*) [with _CharT = char; _Traits = std::char_traits<char>;\
    \ _Alloc = std::allocator<char>; std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::__const_iterator\
    \ = __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char>\
    \ >; typename __gnu_cxx::__alloc_traits<typename __gnu_cxx::__alloc_traits<_Alloc>::rebind<_CharT>::other>::const_pointer\
    \ = const char*]\u2019\n 2049 |       replace(__const_iterator __i1, __const_iterator\
    \ __i2, const _CharT* __s)\n      |       ^~~~~~~\n/usr/include/c++/9/bits/basic_string.h:2049:7:\
    \ note:   candidate expects 3 arguments, 2 provided\n/usr/include/c++/9/bits/basic_string.h:2070:7:\
    \ note: candidate: \u2018std::__cxx11::basic_string<_CharT, _Traits, _Alloc>&\
    \ std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::replace(std::__cxx11::basic_string<_CharT,\
    \ _Traits, _Alloc>::__const_iterator, std::__cxx11::basic_string<_CharT, _Traits,\
    \ _Alloc>::__const_iterator, std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type,\
    \ _CharT) [with _CharT = char; _Traits = std::char_traits<char>; _Alloc = std::allocator<char>;\
    \ std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::__const_iterator = __gnu_cxx::__normal_iterator<const\
    \ char*, std::__cxx11::basic_string<char> >; typename __gnu_cxx::__alloc_traits<typename\
    \ __gnu_cxx::__alloc_traits<_Alloc>::rebind<_CharT>::other>::const_pointer = const\
    \ char*; std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type = long\
    \ unsigned int]\u2019\n 2070 |       replace(__const_iterator __i1, __const_iterator\
    \ __i2, size_type __n,\n      |       ^~~~~~~\n/usr/include/c++/9/bits/basic_string.h:2070:7:\
    \ note:   candidate expects 4 arguments, 2 provided\n/usr/include/c++/9/bits/basic_string.h:2097:9:\
    \ note: candidate: \u2018template<class _InputIterator, class> std::__cxx11::basic_string<_CharT,\
    \ _Traits, _Alloc>& std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::replace(std::__cxx11::basic_string<_CharT,\
    \ _Traits, _Alloc>::const_iterator, std::__cxx11::basic_string<_CharT, _Traits,\
    \ _Alloc>::const_iterator, _InputIterator, _InputIterator) [with _InputIterator\
    \ = _InputIterator; <template-parameter-2-2> = <template-parameter-1-2>; _CharT\
    \ = char; _Traits = std::char_traits<char>; _Alloc = std::allocator<char>]\u2019\
    \n 2097 |         replace(const_iterator __i1, const_iterator __i2,\n      | \
    \        ^~~~~~~\n/usr/include/c++/9/bits/basic_string.h:2097:9: note:   template\
    \ argument deduction/substitution failed:\n/tmp/tmptynzhvy4.cpp:23:186: note:\
    \   candidate expects 4 arguments, 2 provided\n   23 |     std::string vowels_reversed_upper_lower_nospace_nospace_nospace_nospace_nospace_nospace\
    \ = vowels_reversed_upper_lower_nospace_nospace_nospace_nospace_nospace_nospace.replace(\"\
    \ \", \"\");\n      |                                                        \
    \                                                                            \
    \                                                      ^\nIn file included from\
    \ /usr/include/c++/9/string:55,\n                 from /usr/include/c++/9/bits/locale_classes.h:40,\n\
    \                 from /usr/include/c++/9/bits/ios_base.h:41,\n              \
    \   from /usr/include/c++/9/ios:42,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmptynzhvy4.cpp:2:\n/usr/include/c++/9/bits/basic_string.h:2127:7: note:\
    \ candidate: \u2018std::__cxx11::basic_string<_CharT, _Traits, _Alloc>& std::__cxx11::basic_string<_CharT,\
    \ _Traits, _Alloc>::replace(std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::__const_iterator,\
    \ std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::__const_iterator, _CharT*,\
    \ _CharT*) [with _CharT = char; _Traits = std::char_traits<char>; _Alloc = std::allocator<char>;\
    \ std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::__const_iterator = __gnu_cxx::__normal_iterator<const\
    \ char*, std::__cxx11::basic_string<char> >; typename __gnu_cxx::__alloc_traits<typename\
    \ __gnu_cxx::__alloc_traits<_Alloc>::rebind<_CharT>::other>::const_pointer = const\
    \ char*]\u2019\n 2127 |       replace(__const_iterator __i1, __const_iterator\
    \ __i2,\n      |       ^~~~~~~\n/usr/include/c++/9/bits/basic_string.h:2127:7:\
    \ note:   candidate expects 4 arguments, 2 provided\n/usr/include/c++/9/bits/basic_string.h:2138:7:\
    \ note: candidate: \u2018std::__cxx11::basic_string<_CharT, _Traits, _Alloc>&\
    \ std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::replace(std::__cxx11::basic_string<_CharT,\
    \ _Traits, _Alloc>::__const_iterator, std::__cxx11::basic_string<_CharT, _Traits,\
    \ _Alloc>::__const_iterator, const _CharT*, const _CharT*) [with _CharT = char;\
    \ _Traits = std::char_traits<char>; _Alloc = std::allocator<char>; std::__cxx11::basic_string<_CharT,\
    \ _Traits, _Alloc>::__const_iterator = __gnu_cxx::__normal_iterator<const char*,\
    \ std::__cxx11::basic_string<char> >; typename __gnu_cxx::__alloc_traits<typename\
    \ __gnu_cxx::__alloc_traits<_Alloc>::rebind<_CharT>::other>::const_pointer = const\
    \ char*]\u2019\n 2138 |       replace(__const_iterator __i1, __const_iterator\
    \ __i2,\n      |       ^~~~~~~\n/usr/include/c++/9/bits/basic_string.h:2138:7:\
    \ note:   candidate expects 4 arguments, 2 provided\n/usr/include/c++/9/bits/basic_string.h:2149:7:\
    \ note: candidate: \u2018std::__cxx11::basic_string<_CharT, _Traits, _Alloc>&\
    \ std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::replace(std::__cxx11::basic_string<_CharT,\
    \ _Traits, _Alloc>::__const_iterator, std::__cxx11::basic_string<_CharT, _Traits,\
    \ _Alloc>::__const_iterator, std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::iterator,\
    \ std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::iterator) [with _CharT\
    \ = char; _Traits = std::char_traits<char>; _Alloc = std::allocator<char>; std::__cxx11::basic_string<_CharT,\
    \ _Traits, _Alloc>::__const_iterator = __gnu_cxx::__normal_iterator<const char*,\
    \ std::__cxx11::basic_string<char> >; typename __gnu_cxx::__alloc_traits<typename\
    \ __gnu_cxx::__alloc_traits<_Alloc>::rebind<_CharT>::other>::const_pointer = const\
    \ char*; std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::iterator = __gnu_cxx::__normal_iterator<char*,\
    \ std::__cxx11::basic_string<char> >; typename __gnu_cxx::__alloc_traits<typename\
    \ __gnu_cxx::__alloc_traits<_Alloc>::rebind<_CharT>::other>::pointer = char*]\u2019\
    \n 2149 |       replace(__const_iterator __i1, __const_iterator __i2,\n      |\
    \       ^~~~~~~\n/usr/include/c++/9/bits/basic_string.h:2149:7: note:   candidate\
    \ expects 4 arguments, 2 provided\n/usr/include/c++/9/bits/basic_string.h:2160:7:\
    \ note: candidate: \u2018std::__cxx11::basic_string<_CharT, _Traits, _Alloc>&\
    \ std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::replace(std::__cxx11::basic_string<_CharT,\
    \ _Traits, _Alloc>::__const_iterator, std::__cxx11::basic_string<_CharT, _Traits,\
    \ _Alloc>::__const_iterator, std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::const_iterator,\
    \ std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::const_iterator) [with _CharT\
    \ = char; _Traits = std::char_traits<char>; _Alloc = std::allocator<char>; std::__cxx11::basic_string<_CharT,\
    \ _Traits, _Alloc>::__const_iterator = __gnu_cxx::__normal_iterator<const char*,\
    \ std::__cxx11::basic_string<char> >; typename __gnu_cxx::__alloc_traits<typename\
    \ __gnu_cxx::__alloc_traits<_Alloc>::rebind<_CharT>::other>::const_pointer = const\
    \ char*; std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::const_iterator =\
    \ __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> >]\u2019\
    \n 2160 |       replace(__const_iterator __i1, __const_iterator __i2,\n      |\
    \       ^~~~~~~\n/usr/include/c++/9/bits/basic_string.h:2160:7: note:   candidate\
    \ expects 4 arguments, 2 provided\n/usr/include/c++/9/bits/basic_string.h:2185:21:\
    \ note: candidate: \u2018std::__cxx11::basic_string<_CharT, _Traits, _Alloc>&\
    \ std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::replace(std::__cxx11::basic_string<_CharT,\
    \ _Traits, _Alloc>::const_iterator, std::__cxx11::basic_string<_CharT, _Traits,\
    \ _Alloc>::const_iterator, std::initializer_list<_Tp>) [with _CharT = char; _Traits\
    \ = std::char_traits<char>; _Alloc = std::allocator<char>; std::__cxx11::basic_string<_CharT,\
    \ _Traits, _Alloc>::const_iterator = __gnu_cxx::__normal_iterator<const char*,\
    \ std::__cxx11::basic_string<char> >; typename __gnu_cxx::__alloc_traits<typename\
    \ __gnu_cxx::__alloc_traits<_Alloc>::rebind<_CharT>::other>::const_pointer = const\
    \ char*]\u2019\n 2185 |       basic_string& replace(const_iterator __i1, const_iterator\
    \ __i2,\n      |                     ^~~~~~~\n/usr/include/c++/9/bits/basic_string.h:2185:21:\
    \ note:   candidate expects 3 arguments, 2 provided\n/tmp/tmptynzhvy4.cpp:24:202:\
    \ error: no matching function for call to \u2018std::__cxx11::basic_string<char>::replace(const\
    \ char [2], const char [1])\u2019\n   24 |     std::string vowels_reversed_upper_lower_nospace_nospace_nospace_nospace_nospace_nospace_nospace\
    \ = vowels_reversed_upper_lower_nospace_nospace_nospace_nospace_nospace_nospace_nospace.replace(\"\
    \ \", \"\");\n      |                                                        \
    \                                                                            \
    \                                                                      ^\nIn file\
    \ included from /usr/include/c++/9/string:55,\n                 from /usr/include/c++/9/bits/locale_classes.h:40,\n\
    \                 from /usr/include/c++/9/bits/ios_base.h:41,\n              \
    \   from /usr/include/c++/9/ios:42,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmptynzhvy4.cpp:2:\n/usr/include/c++/9/bits/basic_string.h:1893:7: note:\
    \ candidate: \u2018std::__cxx11::basic_string<_CharT, _Traits, _Alloc>& std::__cxx11::basic_string<_CharT,\
    \ _Traits, _Alloc>::replace(std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type,\
    \ std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type, const std::__cxx11::basic_string<_CharT,\
    \ _Traits, _Alloc>&) [with _CharT = char; _Traits = std::char_traits<char>; _Alloc\
    \ = std::allocator<char>; std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type\
    \ = long unsigned int]\u2019\n 1893 |       replace(size_type __pos, size_type\
    \ __n, const basic_string& __str)\n      |       ^~~~~~~\n/usr/include/c++/9/bits/basic_string.h:1893:7:\
    \ note:   candidate expects 3 arguments, 2 provided\n/usr/include/c++/9/bits/basic_string.h:1915:7:\
    \ note: candidate: \u2018std::__cxx11::basic_string<_CharT, _Traits, _Alloc>&\
    \ std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::replace(std::__cxx11::basic_string<_CharT,\
    \ _Traits, _Alloc>::size_type, std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type,\
    \ const std::__cxx11::basic_string<_CharT, _Traits, _Alloc>&, std::__cxx11::basic_string<_CharT,\
    \ _Traits, _Alloc>::size_type, std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type)\
    \ [with _CharT = char; _Traits = std::char_traits<char>; _Alloc = std::allocator<char>;\
    \ std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type = long unsigned\
    \ int]\u2019\n 1915 |       replace(size_type __pos1, size_type __n1, const basic_string&\
    \ __str,\n      |       ^~~~~~~\n/usr/include/c++/9/bits/basic_string.h:1915:7:\
    \ note:   candidate expects 5 arguments, 2 provided\n/usr/include/c++/9/bits/basic_string.h:1940:7:\
    \ note: candidate: \u2018std::__cxx11::basic_string<_CharT, _Traits, _Alloc>&\
    \ std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::replace(std::__cxx11::basic_string<_CharT,\
    \ _Traits, _Alloc>::size_type, std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type,\
    \ const _CharT*, std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type)\
    \ [with _CharT = char; _Traits = std::char_traits<char>; _Alloc = std::allocator<char>;\
    \ std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type = long unsigned\
    \ int]\u2019\n 1940 |       replace(size_type __pos, size_type __n1, const _CharT*\
    \ __s,\n      |       ^~~~~~~\n/usr/include/c++/9/bits/basic_string.h:1940:7:\
    \ note:   candidate expects 4 arguments, 2 provided\n/usr/include/c++/9/bits/basic_string.h:1965:7:\
    \ note: candidate: \u2018std::__cxx11::basic_string<_CharT, _Traits, _Alloc>&\
    \ std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::replace(std::__cxx11::basic_string<_CharT,\
    \ _Traits, _Alloc>::size_type, std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type,\
    \ const _CharT*) [with _CharT = char; _Traits = std::char_traits<char>; _Alloc\
    \ = std::allocator<char>; std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type\
    \ = long unsigned int]\u2019\n 1965 |       replace(size_type __pos, size_type\
    \ __n1, const _CharT* __s)\n      |       ^~~~~~~\n/usr/include/c++/9/bits/basic_string.h:1965:7:\
    \ note:   candidate expects 3 arguments, 2 provided\n/usr/include/c++/9/bits/basic_string.h:1989:7:\
    \ note: candidate: \u2018std::__cxx11::basic_string<_CharT, _Traits, _Alloc>&\
    \ std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::replace(std::__cxx11::basic_string<_CharT,\
    \ _Traits, _Alloc>::size_type, std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type,\
    \ std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type, _CharT) [with\
    \ _CharT = char; _Traits = std::char_traits<char>; _Alloc = std::allocator<char>;\
    \ std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type = long unsigned\
    \ int]\u2019\n 1989 |       replace(size_type __pos, size_type __n1, size_type\
    \ __n2, _CharT __c)\n      |       ^~~~~~~\n/usr/include/c++/9/bits/basic_string.h:1989:7:\
    \ note:   candidate expects 4 arguments, 2 provided\n/usr/include/c++/9/bits/basic_string.h:2007:7:\
    \ note: candidate: \u2018std::__cxx11::basic_string<_CharT, _Traits, _Alloc>&\
    \ std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::replace(std::__cxx11::basic_string<_CharT,\
    \ _Traits, _Alloc>::__const_iterator, std::__cxx11::basic_string<_CharT, _Traits,\
    \ _Alloc>::__const_iterator, const std::__cxx11::basic_string<_CharT, _Traits,\
    \ _Alloc>&) [with _CharT = char; _Traits = std::char_traits<char>; _Alloc = std::allocator<char>;\
    \ std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::__const_iterator = __gnu_cxx::__normal_iterator<const\
    \ char*, std::__cxx11::basic_string<char> >; typename __gnu_cxx::__alloc_traits<typename\
    \ __gnu_cxx::__alloc_traits<_Alloc>::rebind<_CharT>::other>::const_pointer = const\
    \ char*]\u2019\n 2007 |       replace(__const_iterator __i1, __const_iterator\
    \ __i2,\n      |       ^~~~~~~\n/usr/include/c++/9/bits/basic_string.h:2007:7:\
    \ note:   candidate expects 3 arguments, 2 provided\n/usr/include/c++/9/bits/basic_string.h:2027:7:\
    \ note: candidate: \u2018std::__cxx11::basic_string<_CharT, _Traits, _Alloc>&\
    \ std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::replace(std::__cxx11::basic_string<_CharT,\
    \ _Traits, _Alloc>::__const_iterator, std::__cxx11::basic_string<_CharT, _Traits,\
    \ _Alloc>::__const_iterator, const _CharT*, std::__cxx11::basic_string<_CharT,\
    \ _Traits, _Alloc>::size_type) [with _CharT = char; _Traits = std::char_traits<char>;\
    \ _Alloc = std::allocator<char>; std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::__const_iterator\
    \ = __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char>\
    \ >; typename __gnu_cxx::__alloc_traits<typename __gnu_cxx::__alloc_traits<_Alloc>::rebind<_CharT>::other>::const_pointer\
    \ = const char*; std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type\
    \ = long unsigned int]\u2019\n 2027 |       replace(__const_iterator __i1, __const_iterator\
    \ __i2,\n      |       ^~~~~~~\n/usr/include/c++/9/bits/basic_string.h:2027:7:\
    \ note:   candidate expects 4 arguments, 2 provided\n/usr/include/c++/9/bits/basic_string.h:2049:7:\
    \ note: candidate: \u2018std::__cxx11::basic_string<_CharT, _Traits, _Alloc>&\
    \ std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::replace(std::__cxx11::basic_string<_CharT,\
    \ _Traits, _Alloc>::__const_iterator, std::__cxx11::basic_string<_CharT, _Traits,\
    \ _Alloc>::__const_iterator, const _CharT*) [with _CharT = char; _Traits = std::char_traits<char>;\
    \ _Alloc = std::allocator<char>; std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::__const_iterator\
    \ = __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char>\
    \ >; typename __gnu_cxx::__alloc_traits<typename __gnu_cxx::__alloc_traits<_Alloc>::rebind<_CharT>::other>::const_pointer\
    \ = const char*]\u2019\n 2049 |       replace(__const_iterator __i1, __const_iterator\
    \ __i2, const _CharT* __s)\n      |       ^~~~~~~\n/usr/include/c++/9/bits/basic_string.h:2049:7:\
    \ note:   candidate expects 3 arguments, 2 provided\n/usr/include/c++/9/bits/basic_string.h:2070:7:\
    \ note: candidate: \u2018std::__cxx11::basic_string<_CharT, _Traits, _Alloc>&\
    \ std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::replace(std::__cxx11::basic_string<_CharT,\
    \ _Traits, _Alloc>::__const_iterator, std::__cxx11::basic_string<_CharT, _Traits,\
    \ _Alloc>::__const_iterator, std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type,\
    \ _CharT) [with _CharT = char; _Traits = std::char_traits<char>; _Alloc = std::allocator<char>;\
    \ std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::__const_iterator = __gnu_cxx::__normal_iterator<const\
    \ char*, std::__cxx11::basic_string<char> >; typename __gnu_cxx::__alloc_traits<typename\
    \ __gnu_cxx::__alloc_traits<_Alloc>::rebind<_CharT>::other>::const_pointer = const\
    \ char*; std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type = long\
    \ unsigned int]\u2019\n 2070 |       replace(__const_iterator __i1, __const_iterator\
    \ __i2, size_type __n,\n      |       ^~~~~~~\n/usr/include/c++/9/bits/basic_string.h:2070:7:\
    \ note:   candidate expects 4 arguments, 2 provided\n/usr/include/c++/9/bits/basic_string.h:2097:9:\
    \ note: candidate: \u2018template<class _InputIterator, class> std::__cxx11::basic_string<_CharT,\
    \ _Traits, _Alloc>& std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::replace(std::__cxx11::basic_string<_CharT,\
    \ _Traits, _Alloc>::const_iterator, std::__cxx11::basic_string<_CharT, _Traits,\
    \ _Alloc>::const_iterator, _InputIterator, _InputIterator) [with _InputIterator\
    \ = _InputIterator; <template-parameter-2-2> = <template-parameter-1-2>; _CharT\
    \ = char; _Traits = std::char_traits<char>; _Alloc = std::allocator<char>]\u2019\
    \n 2097 |         replace(const_iterator __i1, const_iterator __i2,\n      | \
    \        ^~~~~~~\n/usr/include/c++/9/bits/basic_string.h:2097:9: note:   template\
    \ argument deduction/substitution failed:\n/tmp/tmptynzhvy4.cpp:24:202: note:\
    \   candidate expects 4 arguments, 2 provided\n   24 |     std::string vowels_reversed_upper_lower_nospace_nospace_nospace_nospace_nospace_nospace_nospace\
    \ = vowels_reversed_upper_lower_nospace_nospace_nospace_nospace_nospace_nospace_nospace.replace(\"\
    \ \", \"\");\n      |                                                        \
    \                                                                            \
    \                                                                      ^\nIn file\
    \ included from /usr/include/c++/9/string:55,\n                 from /usr/include/c++/9/bits/locale_classes.h:40,\n\
    \                 from /usr/include/c++/9/bits/ios_base.h:41,\n              \
    \   from /usr/include/c++/9/ios:42,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmptynzhvy4.cpp:2:\n/usr/include/c++/9/bits/basic_string.h:2127:7: note:\
    \ candidate: \u2018std::__cxx11::basic_string<_CharT, _Traits, _Alloc>& std::__cxx11::basic_string<_CharT,\
    \ _Traits, _Alloc>::replace(std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::__const_iterator,\
    \ std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::__const_iterator, _CharT*,\
    \ _CharT*) [with _CharT = char; _Traits = std::char_traits<char>; _Alloc = std::allocator<char>;\
    \ std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::__const_iterator = __gnu_cxx::__normal_iterator<const\
    \ char*, std::__cxx11::basic_string<char> >; typename __gnu_cxx::__alloc_traits<typename\
    \ __gnu_cxx::__alloc_traits<_Alloc>::rebind<_CharT>::other>::const_pointer = const\
    \ char*]\u2019\n 2127 |       replace(__const_iterator __i1, __const_iterator\
    \ __i2,\n      |       ^~~~~~~\n/usr/include/c++/9/bits/basic_string.h:2127:7:\
    \ note:   candidate expects 4 arguments, 2 provided\n/usr/include/c++/9/bits/basic_string.h:2138:7:\
    \ note: candidate: \u2018std::__cxx11::basic_string<_CharT, _Traits, _Alloc>&\
    \ std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::replace(std::__cxx11::basic_string<_CharT,\
    \ _Traits, _Alloc>::__const_iterator, std::__cxx11::basic_string<_CharT, _Traits,\
    \ _Alloc>::__const_iterator, const _CharT*, const _CharT*) [with _CharT = char;\
    \ _Traits = std::char_traits<char>; _Alloc = std::allocator<char>; std::__cxx11::basic_string<_CharT,\
    \ _Traits, _Alloc>::__const_iterator = __gnu_cxx::__normal_iterator<const char*,\
    \ std::__cxx11::basic_string<char> >; typename __gnu_cxx::__alloc_traits<typename\
    \ __gnu_cxx::__alloc_traits<_Alloc>::rebind<_CharT>::other>::const_pointer = const\
    \ char*]\u2019\n 2138 |       replace(__const_iterator __i1, __const_iterator\
    \ __i2,\n      |       ^~~~~~~\n/usr/include/c++/9/bits/basic_string.h:2138:7:\
    \ note:   candidate expects 4 arguments, 2 provided\n/usr/include/c++/9/bits/basic_string.h:2149:7:\
    \ note: candidate: \u2018std::__cxx11::basic_string<_CharT, _Traits, _Alloc>&\
    \ std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::replace(std::__cxx11::basic_string<_CharT,\
    \ _Traits, _Alloc>::__const_iterator, std::__cxx11::basic_string<_CharT, _Traits,\
    \ _Alloc>::__const_iterator, std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::iterator,\
    \ std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::iterator) [with _CharT\
    \ = char; _Traits = std::char_traits<char>; _Alloc = std::allocator<char>; std::__cxx11::basic_string<_CharT,\
    \ _Traits, _Alloc>::__const_iterator = __gnu_cxx::__normal_iterator<const char*,\
    \ std::__cxx11::basic_string<char> >; typename __gnu_cxx::__alloc_traits<typename\
    \ __gnu_cxx::__alloc_traits<_Alloc>::rebind<_CharT>::other>::const_pointer = const\
    \ char*; std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::iterator = __gnu_cxx::__normal_iterator<char*,\
    \ std::__cxx11::basic_string<char> >; typename __gnu_cxx::__alloc_traits<typename\
    \ __gnu_cxx::__alloc_traits<_Alloc>::rebind<_CharT>::other>::pointer = char*]\u2019\
    \n 2149 |       replace(__const_iterator __i1, __const_iterator __i2,\n      |\
    \       ^~~~~~~\n/usr/include/c++/9/bits/basic_string.h:2149:7: note:   candidate\
    \ expects 4 arguments, 2 provided\n/usr/include/c++/9/bits/basic_string.h:2160:7:\
    \ note: candidate: \u2018std::__cxx11::basic_string<_CharT, _Traits, _Alloc>&\
    \ std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::replace(std::__cxx11::basic_string<_CharT,\
    \ _Traits, _Alloc>::__const_iterator, std::__cxx11::basic_string<_CharT, _Traits,\
    \ _Alloc>::__const_iterator, std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::const_iterator,\
    \ std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::const_iterator) [with _CharT\
    \ = char; _Traits = std::char_traits<char>; _Alloc = std::allocator<char>; std::__cxx11::basic_string<_CharT,\
    \ _Traits, _Alloc>::__const_iterator = __gnu_cxx::__normal_iterator<const char*,\
    \ std::__cxx11::basic_string<char> >; typename __gnu_cxx::__alloc_traits<typename\
    \ __gnu_cxx::__alloc_traits<_Alloc>::rebind<_CharT>::other>::const_pointer = const\
    \ char*; std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::const_iterator =\
    \ __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> >]\u2019\
    \n 2160 |       replace(__const_iterator __i1, __const_iterator __i2,\n      |\
    \       ^~~~~~~\n/usr/include/c++/9/bits/basic_string.h:2160:7: note:   candidate\
    \ expects 4 arguments, 2 provided\n/usr/include/c++/9/bits/basic_string.h:2185:21:\
    \ note: candidate: \u2018std::__cxx11::basic_string<_CharT, _Traits, _Alloc>&\
    \ std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::replace(std::__cxx11::basic_string<_CharT,\
    \ _Traits, _Alloc>::const_iterator, std::__cxx11::basic_string<_CharT, _Traits,\
    \ _Alloc>::const_iterator, std::initializer_list<_Tp>) [with _CharT = char; _Traits\
    \ = std::char_traits<char>; _Alloc = std::allocator<char>; std::__cxx11::basic_string<_CharT,\
    \ _Traits, _Alloc>::const_iterator = __gnu_cxx::__normal_iterator<const char*,\
    \ std::__cxx11::basic_string<char> >; typename __gnu_cxx::__alloc_traits<typename\
    \ __gnu_cxx::__alloc_traits<_Alloc>::rebind<_CharT>::other>::const_pointer = const\
    \ char*]\u2019\n 2185 |       basic_string& replace(const_iterator __i1, const_iterator\
    \ __i2,\n      |                     ^~~~~~~\n/usr/include/c++/9/bits/basic_string.h:2185:21:\
    \ note:   candidate expects 3 arguments, 2 provided\n/tmp/tmptynzhvy4.cpp:25:234:\
    \ error: no matching function for call to \u2018std::__cxx11::basic_string<char>::replace(const\
    \ char [2], const char [1])\u2019\n   25 |     std::string vowels_reversed_upper_lower_nospace_nospace_nospace_nospace_nospace_nospace_nospace_nospace_nospace\
    \ = vowels_reversed_upper_lower_nospace_nospace_nospace_nospace_nospace_nospace_nospace_nospace_nospace.replace(\"\
    \ \", \"\");\n      |                                                        \
    \                                                                            \
    \                                                                            \
    \                          ^\nIn file included from /usr/include/c++/9/string:55,\n\
    \                 from /usr/include/c++/9/bits/locale_classes.h:40,\n        \
    \         from /usr/include/c++/9/bits/ios_base.h:41,\n                 from /usr/include/c++/9/ios:42,\n\
    \                 from /usr/include/c++/9/istream:38,\n                 from /usr/include/c++/9/sstream:38,\n\
    \                 from /usr/include/c++/9/complex:45,\n                 from /usr/include/c++/9/ccomplex:39,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n\
    \                 from /tmp/tmptynzhvy4.cpp:2:\n/usr/include/c++/9/bits/basic_string.h:1893:7:\
    \ note: candidate: \u2018std::__cxx11::basic_string<_CharT, _Traits, _Alloc>&\
    \ std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::replace(std::__cxx11::basic_string<_CharT,\
    \ _Traits, _Alloc>::size_type, std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type,\
    \ const std::__cxx11::basic_string<_CharT, _Traits, _Alloc>&) [with _CharT = char;\
    \ _Traits = std::char_traits<char>; _Alloc = std::allocator<char>; std::__cxx11::basic_string<_CharT,\
    \ _Traits, _Alloc>::size_type = long unsigned int]\u2019\n 1893 |       replace(size_type\
    \ __pos, size_type __n, const basic_string& __str)\n      |       ^~~~~~~\n/usr/include/c++/9/bits/basic_string.h:1893:7:\
    \ note:   candidate expects 3 arguments, 2 provided\n/usr/include/c++/9/bits/basic_string.h:1915:7:\
    \ note: candidate: \u2018std::__cxx11::basic_string<_CharT, _Traits, _Alloc>&\
    \ std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::replace(std::__cxx11::basic_string<_CharT,\
    \ _Traits, _Alloc>::size_type, std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type,\
    \ const std::__cxx11::basic_string<_CharT, _Traits, _Alloc>&, std::__cxx11::basic_string<_CharT,\
    \ _Traits, _Alloc>::size_type, std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type)\
    \ [with _CharT = char; _Traits = std::char_traits<char>; _Alloc = std::allocator<char>;\
    \ std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type = long unsigned\
    \ int]\u2019\n 1915 |       replace(size_type __pos1, size_type __n1, const basic_string&\
    \ __str,\n      |       ^~~~~~~\n/usr/include/c++/9/bits/basic_string.h:1915:7:\
    \ note:   candidate expects 5 arguments, 2 provided\n/usr/include/c++/9/bits/basic_string.h:1940:7:\
    \ note: candidate: \u2018std::__cxx11::basic_string<_CharT, _Traits, _Alloc>&\
    \ std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::replace(std::__cxx11::basic_string<_CharT,\
    \ _Traits, _Alloc>::size_type, std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type,\
    \ const _CharT*, std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type)\
    \ [with _CharT = char; _Traits = std::char_traits<char>; _Alloc = std::allocator<char>;\
    \ std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type = long unsigned\
    \ int]\u2019\n 1940 |       replace(size_type __pos, size_type __n1, const _CharT*\
    \ __s,\n      |       ^~~~~~~\n/usr/include/c++/9/bits/basic_string.h:1940:7:\
    \ note:   candidate expects 4 arguments, 2 provided\n/usr/include/c++/9/bits/basic_string.h:1965:7:\
    \ note: candidate: \u2018std::__cxx11::basic_string<_CharT, _Traits, _Alloc>&\
    \ std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::replace(std::__cxx11::basic_string<_CharT,\
    \ _Traits, _Alloc>::size_type, std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type,\
    \ const _CharT*) [with _CharT = char; _Traits = std::char_traits<char>; _Alloc\
    \ = std::allocator<char>; std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type\
    \ = long unsigned int]\u2019\n 1965 |       replace(size_type __pos, size_type\
    \ __n1, const _CharT* __s)\n      |       ^~~~~~~\n/usr/include/c++/9/bits/basic_string.h:1965:7:\
    \ note:   candidate expects 3 arguments, 2 provided\n/usr/include/c++/9/bits/basic_string.h:1989:7:\
    \ note: candidate: \u2018std::__cxx11::basic_string<_CharT, _Traits, _Alloc>&\
    \ std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::replace(std::__cxx11::basic_string<_CharT,\
    \ _Traits, _Alloc>::size_type, std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type,\
    \ std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type, _CharT) [with\
    \ _CharT = char; _Traits = std::char_traits<char>; _Alloc = std::allocator<char>;\
    \ std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type = long unsigned\
    \ int]\u2019\n 1989 |       replace(size_type __pos, size_type __n1, size_type\
    \ __n2, _CharT __c)\n      |       ^~~~~~~\n/usr/include/c++/9/bits/basic_string.h:1989:7:\
    \ note:   candidate expects 4 arguments, 2 provided\n/usr/include/c++/9/bits/basic_string.h:2007:7:\
    \ note: candidate: \u2018std::__cxx11::basic_string<_CharT, _Traits, _Alloc>&\
    \ std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::replace(std::__cxx11::basic_string<_CharT,\
    \ _Traits, _Alloc>::__const_iterator, std::__cxx11::basic_string<_CharT, _Traits,\
    \ _Alloc>::__const_iterator, const std::__cxx11::basic_string<_CharT, _Traits,\
    \ _Alloc>&) [with _CharT = char; _Traits = std::char_traits<char>; _Alloc = std::allocator<char>;\
    \ std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::__const_iterator = __gnu_cxx::__normal_iterator<const\
    \ char*, std::__cxx11::basic_string<char> >; typename __gnu_cxx::__alloc_traits<typename\
    \ __gnu_cxx::__alloc_traits<_Alloc>::rebind<_CharT>::other>::const_pointer = const\
    \ char*]\u2019\n 2007 |       replace(__const_iterator __i1, __const_iterator\
    \ __i2,\n      |       ^~~~~~~\n/usr/include/c++/9/bits/basic_string.h:2007:7:\
    \ note:   candidate expects 3 arguments, 2 provided\n/usr/include/c++/9/bits/basic_string.h:2027:7:\
    \ note: candidate: \u2018std::__cxx11::basic_string<_CharT, _Traits, _Alloc>&\
    \ std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::replace(std::__cxx11::basic_string<_CharT,\
    \ _Traits, _Alloc>::__const_iterator, std::__cxx11::basic_string<_CharT, _Traits,\
    \ _Alloc>::__const_iterator, const _CharT*, std::__cxx11::basic_string<_CharT,\
    \ _Traits, _Alloc>::size_type) [with _CharT = char; _Traits = std::char_traits<char>;\
    \ _Alloc = std::allocator<char>; std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::__const_iterator\
    \ = __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char>\
    \ >; typename __gnu_cxx::__alloc_traits<typename __gnu_cxx::__alloc_traits<_Alloc>::rebind<_CharT>::other>::const_pointer\
    \ = const char*; std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type\
    \ = long unsigned int]\u2019\n 2027 |       replace(__const_iterator __i1, __const_iterator\
    \ __i2,\n      |       ^~~~~~~\n/usr/include/c++/9/bits/basic_string.h:2027:7:\
    \ note:   candidate expects 4 arguments, 2 provided\n/usr/include/c++/9/bits/basic_string.h:2049:7:\
    \ note: candidate: \u2018std::__cxx11::basic_string<_CharT, _Traits, _Alloc>&\
    \ std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::replace(std::__cxx11::basic_string<_CharT,\
    \ _Traits, _Alloc>::__const_iterator, std::__cxx11::basic_string<_CharT, _Traits,\
    \ _Alloc>::__const_iterator, const _CharT*) [with _CharT = char; _Traits = std::char_traits<char>;\
    \ _Alloc = std::allocator<char>; std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::__const_iterator\
    \ = __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char>\
    \ >; typename __gnu_cxx::__alloc_traits<typename __gnu_cxx::__alloc_traits<_Alloc>::rebind<_CharT>::other>::const_pointer\
    \ = const char*]\u2019\n 2049 |       replace(__const_iterator __i1, __const_iterator\
    \ __i2, const _CharT* __s)\n      |       ^~~~~~~\n/usr/include/c++/9/bits/basic_string.h:2049:7:\
    \ note:   candidate expects 3 arguments, 2 provided\n/usr/include/c++/9/bits/basic_string.h:2070:7:\
    \ note: candidate: \u2018std::__cxx11::basic_string<_CharT, _Traits, _Alloc>&\
    \ std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::replace(std::__cxx11::basic_string<_CharT,\
    \ _Traits, _Alloc>::__const_iterator, std::__cxx11::basic_string<_CharT, _Traits,\
    \ _Alloc>::__const_iterator, std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type,\
    \ _CharT) [with _CharT = char; _Traits = std::char_traits<char>; _Alloc = std::allocator<char>;\
    \ std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::__const_iterator = __gnu_cxx::__normal_iterator<const\
    \ char*, std::__cxx11::basic_string<char> >; typename __gnu_cxx::__alloc_traits<typename\
    \ __gnu_cxx::__alloc_traits<_Alloc>::rebind<_CharT>::other>::const_pointer = const\
    \ char*; std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type = long\
    \ unsigned int]\u2019\n 2070 |       replace(__const_iterator __i1, __const_iterator\
    \ __i2, size_type __n,\n      |       ^~~~~~~\n/usr/include/c++/9/bits/basic_string.h:2070:7:\
    \ note:   candidate expects 4 arguments, 2 provided\n/usr/include/c++/9/bits/basic_string.h:2097:9:\
    \ note: candidate: \u2018template<class _InputIterator, class> std::__cxx11::basic_string<_CharT,\
    \ _Traits, _Alloc>& std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::replace(std::__cxx11::basic_string<_CharT,\
    \ _Traits, _Alloc>::const_iterator, std::__cxx11::basic_string<_CharT, _Traits,\
    \ _Alloc>::const_iterator, _InputIterator, _InputIterator) [with _InputIterator\
    \ = _InputIterator; <template-parameter-2-2> = <template-parameter-1-2>; _CharT\
    \ = char; _Traits = std::char_traits<char>; _Alloc = std::allocator<char>]\u2019\
    \n 2097 |         replace(const_iterator __i1, const_iterator __i2,\n      | \
    \        ^~~~~~~\n/usr/include/c++/9/bits/basic_string.h:2097:9: note:   template\
    \ argument deduction/substitution failed:\n/tmp/tmptynzhvy4.cpp:25:234: note:\
    \   candidate expects 4 arguments, 2 provided\n   25 |     std::string vowels_reversed_upper_lower_nospace_nospace_nospace_nospace_nospace_nospace_nospace_nospace_nospace\
    \ = vowels_reversed_upper_lower_nospace_nospace_nospace_nospace_nospace_nospace_nospace_nospace_nospace.replace(\"\
    \ \", \"\");\n      |                                                        \
    \                                                                            \
    \                                                                            \
    \                          ^\nIn file included from /usr/include/c++/9/string:55,\n\
    \                 from /usr/include/c++/9/bits/locale_classes.h:40,\n        \
    \         from /usr/include/c++/9/bits/ios_base.h:41,\n                 from /usr/include/c++/9/ios:42,\n\
    \                 from /usr/include/c++/9/istream:38,\n                 from /usr/include/c++/9/sstream:38,\n\
    \                 from /usr/include/c++/9/complex:45,\n                 from /usr/include/c++/9/ccomplex:39,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n\
    \                 from /tmp/tmptynzhvy4.cpp:2:\n/usr/include/c++/9/bits/basic_string.h:2127:7:\
    \ note: candidate: \u2018std::__cxx11::basic_string<_CharT, _Traits, _Alloc>&\
    \ std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::replace(std::__cxx11::basic_string<_CharT,\
    \ _Traits, _Alloc>::__const_iterator, std::__cxx11::basic_string<_CharT, _Traits,\
    \ _Alloc>::__const_iterator, _CharT*, _CharT*) [with _CharT = char; _Traits =\
    \ std::char_traits<char>; _Alloc = std::allocator<char>; std::__cxx11::basic_string<_CharT,\
    \ _Traits, _Alloc>::__const_iterator = __gnu_cxx::__normal_iterator<const char*,\
    \ std::__cxx11::basic_string<char> >; typename __gnu_cxx::__alloc_traits<typename\
    \ __gnu_cxx::__alloc_traits<_Alloc>::rebind<_CharT>::other>::const_pointer = const\
    \ char*]\u2019\n 2127 |       replace(__const_iterator __i1, __const_iterator\
    \ __i2,\n      |       ^~~~~~~\n/usr/include/c++/9/bits/basic_string.h:2127:7:\
    \ note:   candidate expects 4 arguments, 2 provided\n/usr/include/c++/9/bits/basic_string.h:2138:7:\
    \ note: candidate: \u2018std::__cxx11::basic_string<_CharT, _Traits, _Alloc>&\
    \ std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::replace(std::__cxx11::basic_string<_CharT,\
    \ _Traits, _Alloc>::__const_iterator, std::__cxx11::basic_string<_CharT, _Traits,\
    \ _Alloc>::__const_iterator, const _CharT*, const _CharT*) [with _CharT = char;\
    \ _Traits = std::char_traits<char>; _Alloc = std::allocator<char>; std::__cxx11::basic_string<_CharT,\
    \ _Traits, _Alloc>::__const_iterator = __gnu_cxx::__normal_iterator<const char*,\
    \ std::__cxx11::basic_string<char> >; typename __gnu_cxx::__alloc_traits<typename\
    \ __gnu_cxx::__alloc_traits<_Alloc>::rebind<_CharT>::other>::const_pointer = const\
    \ char*]\u2019\n 2138 |       replace(__const_iterator __i1, __const_iterator\
    \ __i2,\n      |       ^~~~~~~\n/usr/include/c++/9/bits/basic_string.h:2138:7:\
    \ note:   candidate expects 4 arguments, 2 provided\n/usr/include/c++/9/bits/basic_string.h:2149:7:\
    \ note: candidate: \u2018std::__cxx11::basic_string<_CharT, _Traits, _Alloc>&\
    \ std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::replace(std::__cxx11::basic_string<_CharT,\
    \ _Traits, _Alloc>::__const_iterator, std::__cxx11::basic_string<_CharT, _Traits,\
    \ _Alloc>::__const_iterator, std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::iterator,\
    \ std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::iterator) [with _CharT\
    \ = char; _Traits = std::char_traits<char>; _Alloc = std::allocator<char>; std::__cxx11::basic_string<_CharT,\
    \ _Traits, _Alloc>::__const_iterator = __gnu_cxx::__normal_iterator<const char*,\
    \ std::__cxx11::basic_string<char> >; typename __gnu_cxx::__alloc_traits<typename\
    \ __gnu_cxx::__alloc_traits<_Alloc>::rebind<_CharT>::other>::const_pointer = const\
    \ char*; std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::iterator = __gnu_cxx::__normal_iterator<char*,\
    \ std::__cxx11::basic_string<char> >; typename __gnu_cxx::__alloc_traits<typename\
    \ __gnu_cxx::__alloc_traits<_Alloc>::rebind<_CharT>::other>::pointer = char*]\u2019\
    \n 2149 |       replace(__const_iterator __i1, __const_iterator __i2,\n      |\
    \       ^~~~~~~\n/usr/include/c++/9/bits/basic_string.h:2149:7: note:   candidate\
    \ expects 4 arguments, 2 provided\n/usr/include/c++/9/bits/basic_string.h:2160:7:\
    \ note: candidate: \u2018std::__cxx11::basic_string<_CharT, _Traits, _Alloc>&\
    \ std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::replace(std::__cxx11::basic_string<_CharT,\
    \ _Traits, _Alloc>::__const_iterator, std::__cxx11::basic_string<_CharT, _Traits,\
    \ _Alloc>::__const_iterator, std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::const_iterator,\
    \ std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::const_iterator) [with _CharT\
    \ = char; _Traits = std::char_traits<char>; _Alloc = std::allocator<char>; std::__cxx11::basic_string<_CharT,\
    \ _Traits, _Alloc>::__const_iterator = __gnu_cxx::__normal_iterator<const char*,\
    \ std::__cxx11::basic_string<char> >; typename __gnu_cxx::__alloc_traits<typename\
    \ __gnu_cxx::__alloc_traits<_Alloc>::rebind<_CharT>::other>::const_pointer = const\
    \ char*; std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::const_iterator =\
    \ __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> >]\u2019\
    \n 2160 |       replace(__const_iterator __i1, __const_iterator __i2,\n      |\
    \       ^~~~~~~\n/usr/include/c++/9/bits/basic_string.h:2160:7: note:   candidate\
    \ expects 4 arguments, 2 provided\n/usr/include/c++/9/bits/basic_string.h:2185:21:\
    \ note: candidate: \u2018std::__cxx11::basic_string<_CharT, _Traits, _Alloc>&\
    \ std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::replace(std::__cxx11::basic_string<_CharT,\
    \ _Traits, _Alloc>::const_iterator, std::__cxx11::basic_string<_CharT, _Traits,\
    \ _Alloc>::const_iterator, std::initializer_list<_Tp>) [with _CharT = char; _Traits\
    \ = std::char_traits<char>; _Alloc = std::allocator<char>; std::__cxx11::basic_string<_CharT,\
    \ _Traits, _Alloc>::const_iterator = __gnu_cxx::__normal_iterator<const char*,\
    \ std::__cxx11::basic_string<char> >; typename __gnu_cxx::__alloc_traits<typename\
    \ __gnu_cxx::__alloc_traits<_Alloc>::rebind<_CharT>::other>::const_pointer = const\
    \ char*]\u2019\n 2185 |       basic_string& replace(const_iterator __i1, const_iterator\
    \ __i2,\n      |                     ^~~~~~~\n/usr/include/c++/9/bits/basic_string.h:2185:21:\
    \ note:   candidate expects 3 arguments, 2 provided\n/tmp/tmptynzhvy4.cpp:26:135:\
    \ error: \u2018vowels_reversed_upper_lower_nospace_nospace_nospace_nospace_nospace_nospace_nospace_nospace_nospace_nospace\u2019\
    \ was not declared in this scope; did you mean \u2018vowels_reversed_upper_lower_nospace_nospace_nospace_nospace_nospace_nospace_nospace_nospace_nospace_nospace_nospace\u2019\
    ?\n   26 |     std::string vowels_reversed_upper_lower_nospace_nospace_nospace_nospace_nospace_nospace_nospace_nospace_nospace_nospace_nospace\
    \ = vowels_reversed_upper_lower_nospace_nospace_nospace_nospace_nospace_nospace_nospace_nospace_nospace_nospace.replace(\"\
    \ \", \"\");\n      |                                                        \
    \                                                                            \
    \   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    \      |                                                                     \
    \                                                                  vowels_reversed_upper_lower_nospace_nospace_nospace_nospace_nospace_nospace_nospace_nospace_nospace_nospace_nospace\n\
    /tmp/tmptynzhvy4.cpp:27:282: error: no matching function for call to \u2018std::__cxx11::basic_string<char>::replace(const\
    \ char [2], const char [1])\u2019\n   27 |     std::string vowels_reversed_upper_lower_nospace_nospace_nospace_nospace_nospace_nospace_nospace_nospace_nospace_nospace_nospace_nospace\
    \ = vowels_reversed_upper_lower_nospace_nospace_nospace_nospace_nospace_nospace_nospace_nospace_nospace_nospace_nospace_nospace.replace(\"\
    \ \", \"\");\n      |                                                        \
    \                                                                            \
    \                                                                            \
    \                                                                          ^\n\
    In file included from /usr/include/c++/9/string:55,\n                 from /usr/include/c++/9/bits/locale_classes.h:40,\n\
    \                 from /usr/include/c++/9/bits/ios_base.h:41,\n              \
    \   from /usr/include/c++/9/ios:42,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmptynzhvy4.cpp:2:\n/usr/include/c++/9/bits/basic_string.h:1893:7: note:\
    \ candidate: \u2018std::__cxx11::basic_string<_CharT, _Traits, _Alloc>& std::__cxx11::basic_string<_CharT,\
    \ _Traits, _Alloc>::replace(std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type,\
    \ std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type, const std::__cxx11::basic_string<_CharT,\
    \ _Traits, _Alloc>&) [with _CharT = char; _Traits = std::char_traits<char>; _Alloc\
    \ = std::allocator<char>; std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type\
    \ = long unsigned int]\u2019\n 1893 |       replace(size_type __pos, size_type\
    \ __n, const basic_string& __str)\n      |       ^~~~~~~\n/usr/include/c++/9/bits/basic_string.h:1893:7:\
    \ note:   candidate expects 3 arguments, 2 provided\n/usr/include/c++/9/bits/basic_string.h:1915:7:\
    \ note: candidate: \u2018std::__cxx11::basic_string<_CharT, _Traits, _Alloc>&\
    \ std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::replace(std::__cxx11::basic_string<_CharT,\
    \ _Traits, _Alloc>::size_type, std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type,\
    \ const std::__cxx11::basic_string<_CharT, _Traits, _Alloc>&, std::__cxx11::basic_string<_CharT,\
    \ _Traits, _Alloc>::size_type, std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type)\
    \ [with _CharT = char; _Traits = std::char_traits<char>; _Alloc = std::allocator<char>;\
    \ std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type = long unsigned\
    \ int]\u2019\n 1915 |       replace(size_type __pos1, size_type __n1, const basic_string&\
    \ __str,\n      |       ^~~~~~~\n/usr/include/c++/9/bits/basic_string.h:1915:7:\
    \ note:   candidate expects 5 arguments, 2 provided\n/usr/include/c++/9/bits/basic_string.h:1940:7:\
    \ note: candidate: \u2018std::__cxx11::basic_string<_CharT, _Traits, _Alloc>&\
    \ std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::replace(std::__cxx11::basic_string<_CharT,\
    \ _Traits, _Alloc>::size_type, std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type,\
    \ const _CharT*, std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type)\
    \ [with _CharT = char; _Traits = std::char_traits<char>; _Alloc = std::allocator<char>;\
    \ std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type = long unsigned\
    \ int]\u2019\n 1940 |       replace(size_type __pos, size_type __n1, const _CharT*\
    \ __s,\n      |       ^~~~~~~\n/usr/include/c++/9/bits/basic_string.h:1940:7:\
    \ note:   candidate expects 4 arguments, 2 provided\n/usr/include/c++/9/bits/basic_string.h:1965:7:\
    \ note: candidate: \u2018std::__cxx11::basic_string<_CharT, _Traits, _Alloc>&\
    \ std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::replace(std::__cxx11::basic_string<_CharT,\
    \ _Traits, _Alloc>::size_type, std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type,\
    \ const _CharT*) [with _CharT = char; _Traits = std::char_traits<char>; _Alloc\
    \ = std::allocator<char>; std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type\
    \ = long unsigned int]\u2019\n 1965 |       replace(size_type __pos, size_type\
    \ __n1, const _CharT* __s)\n      |       ^~~~~~~\n/usr/include/c++/9/bits/basic_string.h:1965:7:\
    \ note:   candidate expects 3 arguments, 2 provided\n/usr/include/c++/9/bits/basic_string.h:1989:7:\
    \ note: candidate: \u2018std::__cxx11::basic_string<_CharT, _Traits, _Alloc>&\
    \ std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::replace(std::__cxx11::basic_string<_CharT,\
    \ _Traits, _Alloc>::size_type, std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type,\
    \ std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type, _CharT) [with\
    \ _CharT = char; _Traits = std::char_traits<char>; _Alloc = std::allocator<char>;\
    \ std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type = long unsigned\
    \ int]\u2019\n 1989 |       replace(size_type __pos, size_type __n1, size_type\
    \ __n2, _CharT __c)\n      |       ^~~~~~~\n/usr/include/c++/9/bits/basic_string.h:1989:7:\
    \ note:   candidate expects 4 arguments, 2 provided\n/usr/include/c++/9/bits/basic_string.h:2007:7:\
    \ note: candidate: \u2018std::__cxx11::basic_string<_CharT, _Traits, _Alloc>&\
    \ std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::replace(std::__cxx11::basic_string<_CharT,\
    \ _Traits, _Alloc>::__const_iterator, std::__cxx11::basic_string<_CharT, _Traits,\
    \ _Alloc>::__const_iterator, const std::__cxx11::basic_string<_CharT, _Traits,\
    \ _Alloc>&) [with _CharT = char; _Traits = std::char_traits<char>; _Alloc = std::allocator<char>;\
    \ std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::__const_iterator = __gnu_cxx::__normal_iterator<const\
    \ char*, std::__cxx11::basic_string<char> >; typename __gnu_cxx::__alloc_traits<typename\
    \ __gnu_cxx::__alloc_traits<_Alloc>::rebind<_CharT>::other>::const_pointer = const\
    \ char*]\u2019\n 2007 |       replace(__const_iterator __i1, __const_iterator\
    \ __i2,\n      |       ^~~~~~~\n/usr/include/c++/9/bits/basic_string.h:2007:7:\
    \ note:   candidate expects 3 arguments, 2 provided\n/usr/include/c++/9/bits/basic_string.h:2027:7:\
    \ note: candidate: \u2018std::__cxx11::basic_string<_CharT, _Traits, _Alloc>&\
    \ std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::replace(std::__cxx11::basic_string<_CharT,\
    \ _Traits, _Alloc>::__const_iterator, std::__cxx11::basic_string<_CharT, _Traits,\
    \ _Alloc>::__const_iterator, const _CharT*, std::__cxx11::basic_string<_CharT,\
    \ _Traits, _Alloc>::size_type) [with _CharT = char; _Traits = std::char_traits<char>;\
    \ _Alloc = std::allocator<char>; std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::__const_iterator\
    \ = __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char>\
    \ >; typename __gnu_cxx::__alloc_traits<typename __gnu_cxx::__alloc_traits<_Alloc>::rebind<_CharT>::other>::const_pointer\
    \ = const char*; std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type\
    \ = long unsigned int]\u2019\n 2027 |       replace(__const_iterator __i1, __const_iterator\
    \ __i2,\n      |       ^~~~~~~\n/usr/include/c++/9/bits/basic_string.h:2027:7:\
    \ note:   candidate expects 4 arguments, 2 provided\n/usr/include/c++/9/bits/basic_string.h:2049:7:\
    \ note: candidate: \u2018std::__cxx11::basic_string<_CharT, _Traits, _Alloc>&\
    \ std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::replace(std::__cxx11::basic_string<_CharT,\
    \ _Traits, _Alloc>::__const_iterator, std::__cxx11::basic_string<_CharT, _Traits,\
    \ _Alloc>::__const_iterator, const _CharT*) [with _CharT = char; _Traits = std::char_traits<char>;\
    \ _Alloc = std::allocator<char>; std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::__const_iterator\
    \ = __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char>\
    \ >; typename __gnu_cxx::__alloc_traits<typename __gnu_cxx::__alloc_traits<_Alloc>::rebind<_CharT>::other>::const_pointer\
    \ = const char*]\u2019\n 2049 |       replace(__const_iterator __i1, __const_iterator\
    \ __i2, const _CharT* __s)\n      |       ^~~~~~~\n/usr/include/c++/9/bits/basic_string.h:2049:7:\
    \ note:   candidate expects 3 arguments, 2 provided\n/usr/include/c++/9/bits/basic_string.h:2070:7:\
    \ note: candidate: \u2018std::__cxx11::basic_string<_CharT, _Traits, _Alloc>&\
    \ std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::replace(std::__cxx11::basic_string<_CharT,\
    \ _Traits, _Alloc>::__const_iterator, std::__cxx11::basic_string<_CharT, _Traits,\
    \ _Alloc>::__const_iterator, std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type,\
    \ _CharT) [with _CharT = char; _Traits = std::char_traits<char>; _Alloc = std::allocator<char>;\
    \ std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::__const_iterator = __gnu_cxx::__normal_iterator<const\
    \ char*, std::__cxx11::basic_string<char> >; typename __gnu_cxx::__alloc_traits<typename\
    \ __gnu_cxx::__alloc_traits<_Alloc>::rebind<_CharT>::other>::const_pointer = const\
    \ char*; std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type = long\
    \ unsigned int]\u2019\n 2070 |       replace(__const_iterator __i1, __const_iterator\
    \ __i2, size_type __n,\n      |       ^~~~~~~\n/usr/include/c++/9/bits/basic_string.h:2070:7:\
    \ note:   candidate expects 4 arguments, 2 provided\n/usr/include/c++/9/bits/basic_string.h:2097:9:\
    \ note: candidate: \u2018template<class _InputIterator, class> std::__cxx11::basic_string<_CharT,\
    \ _Traits, _Alloc>& std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::replace(std::__cxx11::basic_string<_CharT,\
    \ _Traits, _Alloc>::const_iterator, std::__cxx11::basic_string<_CharT, _Traits,\
    \ _Alloc>::const_iterator, _InputIterator, _InputIterator) [with _InputIterator\
    \ = _InputIterator; <template-parameter-2-2> = <template-parameter-1-2>; _CharT\
    \ = char; _Traits = std::char_traits<char>; _Alloc = std::allocator<char>]\u2019\
    \n 2097 |         replace(const_iterator __i1, const_iterator __i2,\n      | \
    \        ^~~~~~~\n/usr/include/c++/9/bits/basic_string.h:2097:9: note:   template\
    \ argument deduction/substitution failed:\n/tmp/tmptynzhvy4.cpp:27:282: note:\
    \   candidate expects 4 arguments, 2 provided\n   27 |     std::string vowels_reversed_upper_lower_nospace_nospace_nospace_nospace_nospace_nospace_nospace_nospace_nospace_nospace_nospace_nospace\
    \ = vowels_reversed_upper_lower_nospace_nospace_nospace_nospace_nospace_nospace_nospace_nospace_nospace_nospace_nospace_nospace.replace(\"\
    \ \", \"\");\n      |                                                        \
    \                                                                            \
    \                                                                            \
    \                                                                          ^\n\
    In file included from /usr/include/c++/9/string:55,\n                 from /usr/include/c++/9/bits/locale_classes.h:40,\n\
    \                 from /usr/include/c++/9/bits/ios_base.h:41,\n              \
    \   from /usr/include/c++/9/ios:42,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmptynzhvy4.cpp:2:\n/usr/include/c++/9/bits/basic_string.h:2127:7: note:\
    \ candidate: \u2018std::__cxx11::basic_string<_CharT, _Traits, _Alloc>& std::__cxx11::basic_string<_CharT,\
    \ _Traits, _Alloc>::replace(std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::__const_iterator,\
    \ std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::__const_iterator, _CharT*,\
    \ _CharT*) [with _CharT = char; _Traits = std::char_traits<char>; _Alloc = std::allocator<char>;\
    \ std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::__const_iterator = __gnu_cxx::__normal_iterator<const\
    \ char*, std::__cxx11::basic_string<char> >; typename __gnu_cxx::__alloc_traits<typename\
    \ __gnu_cxx::__alloc_traits<_Alloc>::rebind<_CharT>::other>::const_pointer = const\
    \ char*]\u2019\n 2127 |       replace(__const_iterator __i1, __const_iterator\
    \ __i2,\n      |       ^~~~~~~\n/usr/include/c++/9/bits/basic_string.h:2127:7:\
    \ note:   candidate expects 4 arguments, 2 provided\n/usr/include/c++/9/bits/basic_string.h:2138:7:\
    \ note: candidate: \u2018std::__cxx11::basic_string<_CharT, _Traits, _Alloc>&\
    \ std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::replace(std::__cxx11::basic_string<_CharT,\
    \ _Traits, _Alloc>::__const_iterator, std::__cxx11::basic_string<_CharT, _Traits,\
    \ _Alloc>::__const_iterator, const _CharT*, const _CharT*) [with _CharT = char;\
    \ _Traits = std::char_traits<char>; _Alloc = std::allocator<char>; std::__cxx11::basic_string<_CharT,\
    \ _Traits, _Alloc>::__const_iterator = __gnu_cxx::__normal_iterator<const char*,\
    \ std::__cxx11::basic_string<char> >; typename __gnu_cxx::__alloc_traits<typename\
    \ __gnu_cxx::__alloc_traits<_Alloc>::rebind<_CharT>::other>::const_pointer = const\
    \ char*]\u2019\n 2138 |       replace(__const_iterator __i1, __const_iterator\
    \ __i2,\n      |       ^~~~~~~\n/usr/include/c++/9/bits/basic_string.h:2138:7:\
    \ note:   candidate expects 4 arguments, 2 provided\n/usr/include/c++/9/bits/basic_string.h:2149:7:\
    \ note: candidate: \u2018std::__cxx11::basic_string<_CharT, _Traits, _Alloc>&\
    \ std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::replace(std::__cxx11::basic_string<_CharT,\
    \ _Traits, _Alloc>::__const_iterator, std::__cxx11::basic_string<_CharT, _Traits,\
    \ _Alloc>::__const_iterator, std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::iterator,\
    \ std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::iterator) [with _CharT\
    \ = char; _Traits = std::char_traits<char>; _Alloc = std::allocator<char>; std::__cxx11::basic_string<_CharT,\
    \ _Traits, _Alloc>::__const_iterator = __gnu_cxx::__normal_iterator<const char*,\
    \ std::__cxx11::basic_string<char> >; typename __gnu_cxx::__alloc_traits<typename\
    \ __gnu_cxx::__alloc_traits<_Alloc>::rebind<_CharT>::other>::const_pointer = const\
    \ char*; std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::iterator = __gnu_cxx::__normal_iterator<char*,\
    \ std::__cxx11::basic_string<char> >; typename __gnu_cxx::__alloc_traits<typename\
    \ __gnu_cxx::__alloc_traits<_Alloc>::rebind<_CharT>::other>::pointer = char*]\u2019\
    \n 2149 |       replace(__const_iterator __i1, __const_iterator __i2,\n      |\
    \       ^~~~~~~\n/usr/include/c++/9/bits/basic_string.h:2149:7: note:   candidate\
    \ expects 4 arguments, 2 provided\n/usr/include/c++/9/bits/basic_string.h:2160:7:\
    \ note: candidate: \u2018std::__cxx11::basic_string<_CharT, _Traits, _Alloc>&\
    \ std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::replace(std::__cxx11::basic_string<_CharT,\
    \ _Traits, _Alloc>::__const_iterator, std::__cxx11::basic_string<_CharT, _Traits,\
    \ _Alloc>::__const_iterator, std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::const_iterator,\
    \ std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::const_iterator) [with _CharT\
    \ = char; _Traits = std::char_traits<char>; _Alloc = std::allocator<char>; std::__cxx11::basic_string<_CharT,\
    \ _Traits, _Alloc>::__const_iterator = __gnu_cxx::__normal_iterator<const char*,\
    \ std::__cxx11::basic_string<char> >; typename __gnu_cxx::__alloc_traits<typename\
    \ __gnu_cxx::__alloc_traits<_Alloc>::rebind<_CharT>::other>::const_pointer = const\
    \ char*; std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::const_iterator =\
    \ __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char> >]\u2019\
    \n 2160 |       replace(__const_iterator __i1, __const_iterator __i2,\n      |\
    \       ^~~~~~~\n/usr/include/c++/9/bits/basic_string.h:2160:7: note:   candidate\
    \ expects 4 arguments, 2 provided\n/usr/include/c++/9/bits/basic_string.h:2185:21:\
    \ note: candidate: \u2018std::__cxx11::basic_string<_CharT, _Traits, _Alloc>&\
    \ std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::replace(std::__cxx11::basic_string<_CharT,\
    \ _Traits, _Alloc>::const_iterator, std::__cxx11::basic_string<_CharT, _Traits,\
    \ _Alloc>::const_iterator, std::initializer_list<_Tp>) [with _CharT = char; _Traits\
    \ = std::char_traits<char>; _Alloc = std::allocator<char>; std::__cxx11::basic_string<_CharT,\
    \ _Traits, _Alloc>::const_iterator = __gnu_cxx::__normal_iterator<const char*,\
    \ std::__cxx11::basic_string<char> >; typename __gnu_cxx::__alloc_traits<typename\
    \ __gnu_cxx::__alloc_traits<_Alloc>::rebind<_CharT>::other>::const_pointer = const\
    \ char*]\u2019\n 2185 |       basic_string& replace(const_iterator __i1, const_iterator\
    \ __i2,\n      |                     ^~~~~~~\n/usr/include/c++/9/bits/basic_string.h:2185:21:\
    \ note:   candidate expects 3 arguments, 2 provided\n/tmp/tmptynzhvy4.cpp:28:159:\
    \ error: \u2018vowels_reversed_upper_lower_no\u2019 was not declared in this scope;\
    \ did you mean \u2018vowels_reversed_upper_lower\u2019?\n   28 |     std::string\
    \ vowels_reversed_upper_lower_nospace_nospace_nospace_nospace_nospace_nospace_nospace_nospace_nospace_nospace_nospace_nospace_nospace_nospace\
    \ = vowels_reversed_upper_lower_no\n      |                                  \
    \                                                                            \
    \                                                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    \      |                                                                     \
    \                                                                            \
    \              vowels_reversed_upper_lower\n/tmp/tmptynzhvy4.cpp:29:1: error:\
    \ expected \u2018,\u2019 or \u2018;\u2019 before \u2018}\u2019 token\n   29 |\
    \ }\n      | ^\n/tmp/tmptynzhvy4.cpp:29:1: warning: no return statement in function\
    \ returning non-void [-Wreturn-type]\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// get_closest_vowel(\"yogurt\") ==> \"u\"\
    \n// get_closest_vowel(\"FULL\") ==> \"U\"\n// get_closest_vowel(\"quick\") ==>\
    \ \"\"\n// get_closest_vowel(\"ab\") ==> \"\"\nstd::string get_closest_vowel(std::string\
    \ word) {\n    std::string vowels = \"AEIOUaeiou\";\n    std::string vowels_reverse\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_reverse = \"AEIOUaeiou\";\n\
    \    std::string vowels_reverse_reverse_reverse = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse_reverse_reverse_reverse = \"AEIOUaeiou\";\n    std::string vowels_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AE\n}\nint main() {\n    auto candidate = get_closest_vowel;\n    assert(candidate((\"\
    yogurt\")) == (\"u\"));\n    assert(candidate((\"full\")) == (\"u\"));\n    assert(candidate((\"\
    easy\")) == (\"\"));\n    assert(candidate((\"eAsy\")) == (\"\"));\n    assert(candidate((\"\
    ali\")) == (\"\"));\n    assert(candidate((\"bad\")) == (\"a\"));\n    assert(candidate((\"\
    most\")) == (\"o\"));\n    assert(candidate((\"ab\")) == (\"\"));\n    assert(candidate((\"\
    ba\")) == (\"\"));\n    assert(candidate((\"quick\")) == (\"\"));\n    assert(candidate((\"\
    anime\")) == (\"i\"));\n    assert(candidate((\"Asia\")) == (\"\"));\n    assert(candidate((\"\
    Above\")) == (\"o\"));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp64j0ljbk.cpp:35:90: warning: missing terminating \" character\n\
    \   35 |     std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AE\n      |                                                            \
    \                              ^\n/tmp/tmp64j0ljbk.cpp:35:90: error: missing terminating\
    \ \" character\n   35 |     std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AE\n      |                                                            \
    \                              ^~~\n/tmp/tmp64j0ljbk.cpp: In function \u2018std::string\
    \ get_closest_vowel(std::string)\u2019:\n/tmp/tmp64j0ljbk.cpp:22:17: error: redeclaration\
    \ of \u2018std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse\u2019\
    \n   22 |     std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmp64j0ljbk.cpp:21:17: note: \u2018std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse\u2019\
    \ previously declared here\n   21 |     std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmp64j0ljbk.cpp:23:17: error: redeclaration of \u2018std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse\u2019\
    \n   23 |     std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmp64j0ljbk.cpp:21:17: note: \u2018std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse\u2019\
    \ previously declared here\n   21 |     std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmp64j0ljbk.cpp:25:17: error: redeclaration of \u2018std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\u2019\
    \n   25 |     std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmp64j0ljbk.cpp:24:17: note: \u2018std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\u2019\
    \ previously declared here\n   24 |     std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmp64j0ljbk.cpp:26:17: error: redeclaration of \u2018std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\u2019\
    \n   26 |     std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmp64j0ljbk.cpp:24:17: note: \u2018std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\u2019\
    \ previously declared here\n   24 |     std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmp64j0ljbk.cpp:27:17: error: redeclaration of \u2018std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\u2019\
    \n   27 |     std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmp64j0ljbk.cpp:24:17: note: \u2018std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\u2019\
    \ previously declared here\n   24 |     std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmp64j0ljbk.cpp:28:17: error: redeclaration of \u2018std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\u2019\
    \n   28 |     std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmp64j0ljbk.cpp:24:17: note: \u2018std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\u2019\
    \ previously declared here\n   24 |     std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmp64j0ljbk.cpp:29:17: error: redeclaration of \u2018std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\u2019\
    \n   29 |     std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmp64j0ljbk.cpp:24:17: note: \u2018std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\u2019\
    \ previously declared here\n   24 |     std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmp64j0ljbk.cpp:30:17: error: redeclaration of \u2018std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\u2019\
    \n   30 |     std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmp64j0ljbk.cpp:24:17: note: \u2018std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\u2019\
    \ previously declared here\n   24 |     std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmp64j0ljbk.cpp:31:17: error: redeclaration of \u2018std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\u2019\
    \n   31 |     std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmp64j0ljbk.cpp:24:17: note: \u2018std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\u2019\
    \ previously declared here\n   24 |     std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmp64j0ljbk.cpp:32:17: error: redeclaration of \u2018std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\u2019\
    \n   32 |     std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmp64j0ljbk.cpp:24:17: note: \u2018std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\u2019\
    \ previously declared here\n   24 |     std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmp64j0ljbk.cpp:33:17: error: redeclaration of \u2018std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\u2019\
    \n   33 |     std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmp64j0ljbk.cpp:24:17: note: \u2018std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\u2019\
    \ previously declared here\n   24 |     std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmp64j0ljbk.cpp:34:17: error: redeclaration of \u2018std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\u2019\
    \n   34 |     std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmp64j0ljbk.cpp:24:17: note: \u2018std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\u2019\
    \ previously declared here\n   24 |     std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmp64j0ljbk.cpp:35:17: error: redeclaration of \u2018std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\u2019\
    \n   35 |     std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AE\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmp64j0ljbk.cpp:24:17: note: \u2018std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\u2019\
    \ previously declared here\n   24 |     std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmp64j0ljbk.cpp:36:1: error: expected primary-expression before \u2018}\u2019\
    \ token\n   36 | }\n      | ^\n/tmp/tmp64j0ljbk.cpp:36:1: warning: no return statement\
    \ in function returning non-void [-Wreturn-type]\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// get_closest_vowel(\"yogurt\") ==> \"u\"\
    \n// get_closest_vowel(\"FULL\") ==> \"U\"\n// get_closest_vowel(\"quick\") ==>\
    \ \"\"\n// get_closest_vowel(\"ab\") ==> \"\"\nstd::string get_closest_vowel(std::string\
    \ word) {\n    std::string vowels = \"AEIOUaeiou\";\n    std::string vowels_reverse\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse2 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse3 = \"AEIOUaeiou\";\n    std::string vowels_reverse4 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse5 = \"AEIOUaeiou\";\n    std::string vowels_reverse6\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse7 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse8 = \"AEIOUaeiou\";\n    std::string vowels_reverse9 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse10 = \"AEIOUaeiou\";\n    std::string vowels_reverse11\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse12 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse13 = \"AEIOUaeiou\";\n    std::string vowels_reverse14 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse15 = \"AEIOUaeiou\";\n    std::string vowels_reverse16\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse17 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse18 = \"AEIOUaeiou\";\n    std::string vowels_reverse19 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse20 = \"AEIOUaeiou\";\n    std::string vowels_reverse21\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse22 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse23 = \"AEIOUaeiou\";\n    std::string vowels_reverse24 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse25 = \"AEIOUaeiou\";\n    std::string vowels_reverse26\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse27 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse28 = \"AEIOUaeiou\";\n    std::string vowels_reverse29 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse30 = \"AEIOUaeiou\";\n    std::string vowels_reverse31\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse32 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse33 = \"AEIOUaeiou\";\n    std::string vowels_reverse34 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse35 = \"AEIOUaeiou\";\n    std::string vowels_reverse36\
    \ = \"AEIOU\n}\nint main() {\n    auto candidate = get_closest_vowel;\n    assert(candidate((\"\
    yogurt\")) == (\"u\"));\n    assert(candidate((\"full\")) == (\"u\"));\n    assert(candidate((\"\
    easy\")) == (\"\"));\n    assert(candidate((\"eAsy\")) == (\"\"));\n    assert(candidate((\"\
    ali\")) == (\"\"));\n    assert(candidate((\"bad\")) == (\"a\"));\n    assert(candidate((\"\
    most\")) == (\"o\"));\n    assert(candidate((\"ab\")) == (\"\"));\n    assert(candidate((\"\
    ba\")) == (\"\"));\n    assert(candidate((\"quick\")) == (\"\"));\n    assert(candidate((\"\
    anime\")) == (\"i\"));\n    assert(candidate((\"Asia\")) == (\"\"));\n    assert(candidate((\"\
    Above\")) == (\"o\"));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp511ckp6u.cpp:50:36: warning: missing terminating \" character\n\
    \   50 |     std::string vowels_reverse36 = \"AEIOU\n      |                 \
    \                   ^\n/tmp/tmp511ckp6u.cpp:50:36: error: missing terminating\
    \ \" character\n   50 |     std::string vowels_reverse36 = \"AEIOU\n      |  \
    \                                  ^~~~~~\n/tmp/tmp511ckp6u.cpp: In function \u2018\
    std::string get_closest_vowel(std::string)\u2019:\n/tmp/tmp511ckp6u.cpp:51:1:\
    \ error: expected primary-expression before \u2018}\u2019 token\n   51 | }\n \
    \     | ^\n/tmp/tmp511ckp6u.cpp:51:1: error: expected \u2018,\u2019 or \u2018\
    ;\u2019 before \u2018}\u2019 token\n/tmp/tmp511ckp6u.cpp:51:1: warning: no return\
    \ statement in function returning non-void [-Wreturn-type]\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// get_closest_vowel(\"yogurt\") ==> \"u\"\
    \n// get_closest_vowel(\"FULL\") ==> \"U\"\n// get_closest_vowel(\"quick\") ==>\
    \ \"\"\n// get_closest_vowel(\"ab\") ==> \"\"\nstd::string get_closest_vowel(std::string\
    \ word) {\n    // Your code here\n    std::string vowels = \"AEIOUaeiou\";\n \
    \   std::string vowels_reverse = \"AEIOUaeiou\";\n    std::string vowels_reverse2\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse3 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse4 = \"AEIOUaeiou\";\n    std::string vowels_reverse5 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse6 = \"AEIOUaeiou\";\n    std::string vowels_reverse7\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse8 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse9 = \"AEIOUaeiou\";\n    std::string vowels_reverse10 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse11 = \"AEIOUaeiou\";\n    std::string vowels_reverse12\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse13 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse14 = \"AEIOUaeiou\";\n    std::string vowels_reverse15 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse16 = \"AEIOUaeiou\";\n    std::string vowels_reverse17\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse18 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse19 = \"AEIOUaeiou\";\n    std::string vowels_reverse20 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse21 = \"AEIOUaeiou\";\n    std::string vowels_reverse22\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse23 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse24 = \"AEIOUaeiou\";\n    std::string vowels_reverse25 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse26 = \"AEIOUaeiou\";\n    std::string vowels_reverse27\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse28 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse29 = \"AEIOUaeiou\";\n    std::string vowels_reverse30 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse31 = \"AEIOUaeiou\";\n    std::string vowels_reverse32\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse33 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse34 = \"AEIOUaeiou\";\n    std::string vowels_reverse35 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse\n}\nint main() {\n    auto candidate = get_closest_vowel;\n\
    \    assert(candidate((\"yogurt\")) == (\"u\"));\n    assert(candidate((\"full\"\
    )) == (\"u\"));\n    assert(candidate((\"easy\")) == (\"\"));\n    assert(candidate((\"\
    eAsy\")) == (\"\"));\n    assert(candidate((\"ali\")) == (\"\"));\n    assert(candidate((\"\
    bad\")) == (\"a\"));\n    assert(candidate((\"most\")) == (\"o\"));\n    assert(candidate((\"\
    ab\")) == (\"\"));\n    assert(candidate((\"ba\")) == (\"\"));\n    assert(candidate((\"\
    quick\")) == (\"\"));\n    assert(candidate((\"anime\")) == (\"i\"));\n    assert(candidate((\"\
    Asia\")) == (\"\"));\n    assert(candidate((\"Above\")) == (\"o\"));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpxr27hm9v.cpp: In function \u2018std::string get_closest_vowel(std::string)\u2019\
    :\n/tmp/tmpxr27hm9v.cpp:52:1: error: expected initializer before \u2018}\u2019\
    \ token\n   52 | }\n      | ^\n/tmp/tmpxr27hm9v.cpp:52:1: warning: no return statement\
    \ in function returning non-void [-Wreturn-type]\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// get_closest_vowel(\"yogurt\") ==> \"u\"\
    \n// get_closest_vowel(\"FULL\") ==> \"U\"\n// get_closest_vowel(\"quick\") ==>\
    \ \"\"\n// get_closest_vowel(\"ab\") ==> \"\"\nstd::string get_closest_vowel(std::string\
    \ word) {\n    std::string vowels = \"AEIOUaeiou\";\n    std::string vowels_reverse\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_reverse = \"AEIOUaeiou\";\n\
    \    std::string vowels_reverse_back = \"AEIOUaeiou\";\n    std::string vowels_reverse_back_reverse\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_back_reverse_back = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse_back_reverse_back_reverse = \"AEIOUaeiou\";\n\
    \    std::string vowels_reverse_back_reverse_back_reverse_back = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse = \"\
    AEIOUaeiou\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\n\
    }\nint main() {\n    auto candidate = get_closest_vowel;\n    assert(candidate((\"\
    yogurt\")) == (\"u\"));\n    assert(candidate((\"full\")) == (\"u\"));\n    assert(candidate((\"\
    easy\")) == (\"\"));\n    assert(candidate((\"eAsy\")) == (\"\"));\n    assert(candidate((\"\
    ali\")) == (\"\"));\n    assert(candidate((\"bad\")) == (\"a\"));\n    assert(candidate((\"\
    most\")) == (\"o\"));\n    assert(candidate((\"ab\")) == (\"\"));\n    assert(candidate((\"\
    ba\")) == (\"\"));\n    assert(candidate((\"quick\")) == (\"\"));\n    assert(candidate((\"\
    anime\")) == (\"i\"));\n    assert(candidate((\"Asia\")) == (\"\"));\n    assert(candidate((\"\
    Above\")) == (\"o\"));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp2pdj_hvi.cpp: In function \u2018std::string get_closest_vowel(std::string)\u2019\
    :\n/tmp/tmp2pdj_hvi.cpp:32:17: error: redeclaration of \u2018std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\u2019\
    \n   32 |     std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\
    \ = \"AEIOUaeiou\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmp2pdj_hvi.cpp:31:17: note: \u2018std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\u2019\
    \ previously declared here\n   31 |     std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\
    \ = \"AEIOUaeiou\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmp2pdj_hvi.cpp:35:1: error: expected initializer before \u2018}\u2019 token\n\
    \   35 | }\n      | ^\n/tmp/tmp2pdj_hvi.cpp:35:1: warning: no return statement\
    \ in function returning non-void [-Wreturn-type]\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// get_closest_vowel(\"yogurt\") ==> \"u\"\
    \n// get_closest_vowel(\"FULL\") ==> \"U\"\n// get_closest_vowel(\"quick\") ==>\
    \ \"\"\n// get_closest_vowel(\"ab\") ==> \"\"\nstd::string get_closest_vowel(std::string\
    \ word) {\n    std::string vowels = \"AEIOUaeiou\";\n    std::string vowels_reverse\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse2 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse3 = \"AEIOUaeiou\";\n    std::string vowels_reverse4 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse5 = \"AEIOUaeiou\";\n    std::string vowels_reverse6\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse7 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse8 = \"AEIOUaeiou\";\n    std::string vowels_reverse9 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse10 = \"AEIOUaeiou\";\n    std::string vowels_reverse11\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse12 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse13 = \"AEIOUaeiou\";\n    std::string vowels_reverse14 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse15 = \"AEIOUaeiou\";\n    std::string vowels_reverse16\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse17 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse18 = \"AEIOUaeiou\";\n    std::string vowels_reverse19 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse20 = \"AEIOUaeiou\";\n    std::string vowels_reverse21\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse22 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse23 = \"AEIOUaeiou\";\n    std::string vowels_reverse24 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse25 = \"AEIOUaeiou\";\n    std::string vowels_reverse26\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse27 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse28 = \"AEIOUaeiou\";\n    std::string vowels_reverse29 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse30 = \"AEIOUaeiou\";\n    std::string vowels_reverse31\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse32 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse33 = \"AEIOUaeiou\";\n    std::string vowels_reverse34 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse35 = \"AEIOUaeiou\";\n    std::string vowels_reverse36\
    \ = \"AEIOU\n}\nint main() {\n    auto candidate = get_closest_vowel;\n    assert(candidate((\"\
    yogurt\")) == (\"u\"));\n    assert(candidate((\"full\")) == (\"u\"));\n    assert(candidate((\"\
    easy\")) == (\"\"));\n    assert(candidate((\"eAsy\")) == (\"\"));\n    assert(candidate((\"\
    ali\")) == (\"\"));\n    assert(candidate((\"bad\")) == (\"a\"));\n    assert(candidate((\"\
    most\")) == (\"o\"));\n    assert(candidate((\"ab\")) == (\"\"));\n    assert(candidate((\"\
    ba\")) == (\"\"));\n    assert(candidate((\"quick\")) == (\"\"));\n    assert(candidate((\"\
    anime\")) == (\"i\"));\n    assert(candidate((\"Asia\")) == (\"\"));\n    assert(candidate((\"\
    Above\")) == (\"o\"));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpovux07la.cpp:50:36: warning: missing terminating \" character\n\
    \   50 |     std::string vowels_reverse36 = \"AEIOU\n      |                 \
    \                   ^\n/tmp/tmpovux07la.cpp:50:36: error: missing terminating\
    \ \" character\n   50 |     std::string vowels_reverse36 = \"AEIOU\n      |  \
    \                                  ^~~~~~\n/tmp/tmpovux07la.cpp: In function \u2018\
    std::string get_closest_vowel(std::string)\u2019:\n/tmp/tmpovux07la.cpp:51:1:\
    \ error: expected primary-expression before \u2018}\u2019 token\n   51 | }\n \
    \     | ^\n/tmp/tmpovux07la.cpp:51:1: error: expected \u2018,\u2019 or \u2018\
    ;\u2019 before \u2018}\u2019 token\n/tmp/tmpovux07la.cpp:51:1: warning: no return\
    \ statement in function returning non-void [-Wreturn-type]\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// get_closest_vowel(\"yogurt\") ==> \"u\"\
    \n// get_closest_vowel(\"FULL\") ==> \"U\"\n// get_closest_vowel(\"quick\") ==>\
    \ \"\"\n// get_closest_vowel(\"ab\") ==> \"\"\nstd::string get_closest_vowel(std::string\
    \ word) {\n    std::string vowels = \"aeiouAEIOU\";\n    std::string vowels_end\
    \ = \"AEIOUaeiou\";\n    std::string vowels_start = \"aeiouAEIOU\";\n    std::string\
    \ vowels_start_end = \"AEIOUaeiou\";\n    std::string vowels_start_end_end = \"\
    aeiouAEIOUaeiou\";\n    std::string vowels_start_end_end_end = \"aeiouAEIOUaeiou\"\
    ;\n    std::string vowels_start_end_end_end_end = \"aeiouAEIOUaeiou\";\n    std::string\
    \ vowels_start_end_end_end_end_end = \"aeiouAEIOUaeiou\";\n    std::string vowels_start_end_end_end_end_end_end\
    \ = \"aeiouAEIOUaeiou\";\n    std::string vowels_start_end_end_end_end_end_end_end\
    \ = \"aeiouAEIOUaeiou\";\n    std::string vowels_start_end_end_end_end_end_end_end_end\
    \ = \"aeiouAEIOUaeiou\";\n    std::string vowels_start_end_end_end_end_end_end_end_end_end\
    \ = \"aeiouAEIOUaeiou\";\n    std::string vowels_start_end_end_end_end_end_end_end_end_end_end\
    \ = \"aeiouAEIOUaeiou\";\n    std::string vowels_start_end_end_end_end_end_end_end_end_end_end\
    \ = \"aeiouAEIOUaeiou\";\n    std::string vowels_start_end_end_end_end_end_end_end_end_end_end_end\
    \ = \"aeiouAEIOUaeiou\";\n    std::string vowels_start_end_end_end_end_end_end_end_end_end_end_end_end\
    \ = \"aeiouAEIOUaeiou\";\n    std::string vowels_start_end_end_end_end_end_end_end_end_end_end_end_end\
    \ = \"aeiouAEIOUaeiou\";\n    std::string vowels_start_end_end_end_end_end_end_end_end_end_end_end_end\
    \ = \"aeiouAEIOUaeiou\";\n    std::string vowels_start_end_end_end_end_end_end_end_end_end_end_end_end\
    \ = \"aeiouAEIOUaeiou\";\n    std::string vowels_start_end_end_end_end_end_end_end_end_end_end_end_end_end\
    \ = \"aeiouAEIOUaeiou\";\n    std::string vowels_start_end_end_end_end_end_end_end_end_end_end_end_end_end\
    \ = \"aeiouAEIOUaeiou\";\n    std::string vowels_start_end_end_end_end_end_end_end_end_end_end_end_end_end_end\
    \ = \"aeiouAEIOUaeiou\";\n    std::string vowels_start_end_end_end_end_end_end_end_end_end_end_end_end_end_end\
    \ = \"aeiouAEIOUaeiou\";\n}\nint main() {\n    auto candidate = get_closest_vowel;\n\
    \    assert(candidate((\"yogurt\")) == (\"u\"));\n    assert(candidate((\"full\"\
    )) == (\"u\"));\n    assert(candidate((\"easy\")) == (\"\"));\n    assert(candidate((\"\
    eAsy\")) == (\"\"));\n    assert(candidate((\"ali\")) == (\"\"));\n    assert(candidate((\"\
    bad\")) == (\"a\"));\n    assert(candidate((\"most\")) == (\"o\"));\n    assert(candidate((\"\
    ab\")) == (\"\"));\n    assert(candidate((\"ba\")) == (\"\"));\n    assert(candidate((\"\
    quick\")) == (\"\"));\n    assert(candidate((\"anime\")) == (\"i\"));\n    assert(candidate((\"\
    Asia\")) == (\"\"));\n    assert(candidate((\"Above\")) == (\"o\"));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp3wp0yc4r.cpp: In function \u2018std::string get_closest_vowel(std::string)\u2019\
    :\n/tmp/tmp3wp0yc4r.cpp:27:17: error: redeclaration of \u2018std::string vowels_start_end_end_end_end_end_end_end_end_end_end\u2019\
    \n   27 |     std::string vowels_start_end_end_end_end_end_end_end_end_end_end\
    \ = \"aeiouAEIOUaeiou\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmp3wp0yc4r.cpp:26:17: note: \u2018std::string vowels_start_end_end_end_end_end_end_end_end_end_end\u2019\
    \ previously declared here\n   26 |     std::string vowels_start_end_end_end_end_end_end_end_end_end_end\
    \ = \"aeiouAEIOUaeiou\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmp3wp0yc4r.cpp:30:17: error: redeclaration of \u2018std::string vowels_start_end_end_end_end_end_end_end_end_end_end_end_end\u2019\
    \n   30 |     std::string vowels_start_end_end_end_end_end_end_end_end_end_end_end_end\
    \ = \"aeiouAEIOUaeiou\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmp3wp0yc4r.cpp:29:17: note: \u2018std::string vowels_start_end_end_end_end_end_end_end_end_end_end_end_end\u2019\
    \ previously declared here\n   29 |     std::string vowels_start_end_end_end_end_end_end_end_end_end_end_end_end\
    \ = \"aeiouAEIOUaeiou\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmp3wp0yc4r.cpp:31:17: error: redeclaration of \u2018std::string vowels_start_end_end_end_end_end_end_end_end_end_end_end_end\u2019\
    \n   31 |     std::string vowels_start_end_end_end_end_end_end_end_end_end_end_end_end\
    \ = \"aeiouAEIOUaeiou\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmp3wp0yc4r.cpp:29:17: note: \u2018std::string vowels_start_end_end_end_end_end_end_end_end_end_end_end_end\u2019\
    \ previously declared here\n   29 |     std::string vowels_start_end_end_end_end_end_end_end_end_end_end_end_end\
    \ = \"aeiouAEIOUaeiou\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmp3wp0yc4r.cpp:32:17: error: redeclaration of \u2018std::string vowels_start_end_end_end_end_end_end_end_end_end_end_end_end\u2019\
    \n   32 |     std::string vowels_start_end_end_end_end_end_end_end_end_end_end_end_end\
    \ = \"aeiouAEIOUaeiou\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmp3wp0yc4r.cpp:29:17: note: \u2018std::string vowels_start_end_end_end_end_end_end_end_end_end_end_end_end\u2019\
    \ previously declared here\n   29 |     std::string vowels_start_end_end_end_end_end_end_end_end_end_end_end_end\
    \ = \"aeiouAEIOUaeiou\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmp3wp0yc4r.cpp:34:17: error: redeclaration of \u2018std::string vowels_start_end_end_end_end_end_end_end_end_end_end_end_end_end\u2019\
    \n   34 |     std::string vowels_start_end_end_end_end_end_end_end_end_end_end_end_end_end\
    \ = \"aeiouAEIOUaeiou\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmp3wp0yc4r.cpp:33:17: note: \u2018std::string vowels_start_end_end_end_end_end_end_end_end_end_end_end_end_end\u2019\
    \ previously declared here\n   33 |     std::string vowels_start_end_end_end_end_end_end_end_end_end_end_end_end_end\
    \ = \"aeiouAEIOUaeiou\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmp3wp0yc4r.cpp:36:17: error: redeclaration of \u2018std::string vowels_start_end_end_end_end_end_end_end_end_end_end_end_end_end_end\u2019\
    \n   36 |     std::string vowels_start_end_end_end_end_end_end_end_end_end_end_end_end_end_end\
    \ = \"aeiouAEIOUaeiou\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmp3wp0yc4r.cpp:35:17: note: \u2018std::string vowels_start_end_end_end_end_end_end_end_end_end_end_end_end_end_end\u2019\
    \ previously declared here\n   35 |     std::string vowels_start_end_end_end_end_end_end_end_end_end_end_end_end_end_end\
    \ = \"aeiouAEIOUaeiou\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmp3wp0yc4r.cpp:37:1: warning: no return statement in function returning\
    \ non-void [-Wreturn-type]\n   37 | }\n      | ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// get_closest_vowel(\"yogurt\") ==> \"u\"\
    \n// get_closest_vowel(\"FULL\") ==> \"U\"\n// get_closest_vowel(\"quick\") ==>\
    \ \"\"\n// get_closest_vowel(\"ab\") ==> \"\"\nstd::string get_closest_vowel(std::string\
    \ word) {\n    std::string vowels = \"AEIOUaeiou\";\n    std::string vowels_end\
    \ = \"AEIOUaeiouy\";\n    std::string vowels_start = \"AEIOUaeiou\";\n    std::string\
    \ vowels_start_end = \"AEIOUaeiouy\";\n    std::string vowels_start_end_end =\
    \ \"AEIOUaeiouy\";\n    std::string vowels_start_end_end_end = \"AEIOUaeiouy\"\
    ;\n    std::string vowels_start_end_end_end_end = \"AEIOUaeiouy\";\n    std::string\
    \ vowels_start_end_end_end_end_end = \"AEIOUaeiouy\";\n    std::string vowels_start_end_end_end_end_end_end\
    \ = \"AEIOUaeiouy\";\n    std::string vowels_start_end_end_end_end_end_end_end\
    \ = \"AEIOUaeiouy\";\n    std::string vowels_start_end_end_end_end_end_end_end_end\
    \ = \"AEIOUaeiouy\";\n    std::string vowels_start_end_end_end_end_end_end_end_end_end\
    \ = \"AEIOUaeiouy\";\n    std::string vowels_start_end_end_end_end_end_end_end_end_end\
    \ = \"AEIOUaeiouy\";\n    std::string vowels_start_end_end_end_end_end_end_end_end_end_end\
    \ = \"AEIOUaeiouy\";\n    std::string vowels_start_end_end_end_end_end_end_end_end_end_end\
    \ = \"AEIOUaeiouy\";\n    std::string vowels_start_end_end_end_end_end_end_end_end_end_end_end\
    \ = \"AEIOUaeiouy\";\n    std::string vowels_start_end_end_end_end_end_end_end_end_end_end_end_end\
    \ = \"AEIOUaeiouy\";\n    std::string vowels_start_end_end_end_end_end_end_end_end_end_end_end_end\
    \ = \"AEIOUaeiouy\";\n    std::string vowels_start_end_end_end_end_end_end_end_end_end_end_end_end\
    \ = \"AEIOUaeiouy\";\n    std::string vowels_start_end_end_end_end_end_end_end_end_end_end_end_end_end\
    \ = \"AEIOUaeiouy\";\n    std::string vowels_start_end_end_end_end_end_end_end_end_end_end_end_end_end\
    \ = \"AEIOUaeiouy\";\n    std::string vowels_start_end_end_end_end_end_end_end_end_end_end_end_end_end\
    \ = \"AEIOUaeiouy\";\n    std::string vowels_start_end_end_end_end_end_end_end_end_end_end_end_end_end_end\
    \ = \"AEIOUaeiouy\";\n    std::string vowels_start_end_end_end_end_end_end_end_end_end_end_end_end_end_end\
    \ = \"\n}\nint main() {\n    auto candidate = get_closest_vowel;\n    assert(candidate((\"\
    yogurt\")) == (\"u\"));\n    assert(candidate((\"full\")) == (\"u\"));\n    assert(candidate((\"\
    easy\")) == (\"\"));\n    assert(candidate((\"eAsy\")) == (\"\"));\n    assert(candidate((\"\
    ali\")) == (\"\"));\n    assert(candidate((\"bad\")) == (\"a\"));\n    assert(candidate((\"\
    most\")) == (\"o\"));\n    assert(candidate((\"ab\")) == (\"\"));\n    assert(candidate((\"\
    ba\")) == (\"\"));\n    assert(candidate((\"quick\")) == (\"\"));\n    assert(candidate((\"\
    anime\")) == (\"i\"));\n    assert(candidate((\"Asia\")) == (\"\"));\n    assert(candidate((\"\
    Above\")) == (\"o\"));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpgtzblcqs.cpp:37:88: warning: missing terminating \" character\n\
    \   37 |     std::string vowels_start_end_end_end_end_end_end_end_end_end_end_end_end_end_end\
    \ = \"\n      |                                                              \
    \                          ^\n/tmp/tmpgtzblcqs.cpp:37:88: error: missing terminating\
    \ \" character\n/tmp/tmpgtzblcqs.cpp: In function \u2018std::string get_closest_vowel(std::string)\u2019\
    :\n/tmp/tmpgtzblcqs.cpp:26:17: error: redeclaration of \u2018std::string vowels_start_end_end_end_end_end_end_end_end_end\u2019\
    \n   26 |     std::string vowels_start_end_end_end_end_end_end_end_end_end = \"\
    AEIOUaeiouy\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpgtzblcqs.cpp:25:17: note: \u2018std::string vowels_start_end_end_end_end_end_end_end_end_end\u2019\
    \ previously declared here\n   25 |     std::string vowels_start_end_end_end_end_end_end_end_end_end\
    \ = \"AEIOUaeiouy\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpgtzblcqs.cpp:28:17: error: redeclaration of \u2018std::string vowels_start_end_end_end_end_end_end_end_end_end_end\u2019\
    \n   28 |     std::string vowels_start_end_end_end_end_end_end_end_end_end_end\
    \ = \"AEIOUaeiouy\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpgtzblcqs.cpp:27:17: note: \u2018std::string vowels_start_end_end_end_end_end_end_end_end_end_end\u2019\
    \ previously declared here\n   27 |     std::string vowels_start_end_end_end_end_end_end_end_end_end_end\
    \ = \"AEIOUaeiouy\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpgtzblcqs.cpp:31:17: error: redeclaration of \u2018std::string vowels_start_end_end_end_end_end_end_end_end_end_end_end_end\u2019\
    \n   31 |     std::string vowels_start_end_end_end_end_end_end_end_end_end_end_end_end\
    \ = \"AEIOUaeiouy\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpgtzblcqs.cpp:30:17: note: \u2018std::string vowels_start_end_end_end_end_end_end_end_end_end_end_end_end\u2019\
    \ previously declared here\n   30 |     std::string vowels_start_end_end_end_end_end_end_end_end_end_end_end_end\
    \ = \"AEIOUaeiouy\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpgtzblcqs.cpp:32:17: error: redeclaration of \u2018std::string vowels_start_end_end_end_end_end_end_end_end_end_end_end_end\u2019\
    \n   32 |     std::string vowels_start_end_end_end_end_end_end_end_end_end_end_end_end\
    \ = \"AEIOUaeiouy\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpgtzblcqs.cpp:30:17: note: \u2018std::string vowels_start_end_end_end_end_end_end_end_end_end_end_end_end\u2019\
    \ previously declared here\n   30 |     std::string vowels_start_end_end_end_end_end_end_end_end_end_end_end_end\
    \ = \"AEIOUaeiouy\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpgtzblcqs.cpp:34:17: error: redeclaration of \u2018std::string vowels_start_end_end_end_end_end_end_end_end_end_end_end_end_end\u2019\
    \n   34 |     std::string vowels_start_end_end_end_end_end_end_end_end_end_end_end_end_end\
    \ = \"AEIOUaeiouy\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpgtzblcqs.cpp:33:17: note: \u2018std::string vowels_start_end_end_end_end_end_end_end_end_end_end_end_end_end\u2019\
    \ previously declared here\n   33 |     std::string vowels_start_end_end_end_end_end_end_end_end_end_end_end_end_end\
    \ = \"AEIOUaeiouy\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpgtzblcqs.cpp:35:17: error: redeclaration of \u2018std::string vowels_start_end_end_end_end_end_end_end_end_end_end_end_end_end\u2019\
    \n   35 |     std::string vowels_start_end_end_end_end_end_end_end_end_end_end_end_end_end\
    \ = \"AEIOUaeiouy\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpgtzblcqs.cpp:33:17: note: \u2018std::string vowels_start_end_end_end_end_end_end_end_end_end_end_end_end_end\u2019\
    \ previously declared here\n   33 |     std::string vowels_start_end_end_end_end_end_end_end_end_end_end_end_end_end\
    \ = \"AEIOUaeiouy\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpgtzblcqs.cpp:37:17: error: redeclaration of \u2018std::string vowels_start_end_end_end_end_end_end_end_end_end_end_end_end_end_end\u2019\
    \n   37 |     std::string vowels_start_end_end_end_end_end_end_end_end_end_end_end_end_end_end\
    \ = \"\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpgtzblcqs.cpp:36:17: note: \u2018std::string vowels_start_end_end_end_end_end_end_end_end_end_end_end_end_end_end\u2019\
    \ previously declared here\n   36 |     std::string vowels_start_end_end_end_end_end_end_end_end_end_end_end_end_end_end\
    \ = \"AEIOUaeiouy\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpgtzblcqs.cpp:38:1: error: expected primary-expression before \u2018}\u2019\
    \ token\n   38 | }\n      | ^\n/tmp/tmpgtzblcqs.cpp:38:1: warning: no return statement\
    \ in function returning non-void [-Wreturn-type]\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// get_closest_vowel(\"yogurt\") ==> \"u\"\
    \n// get_closest_vowel(\"FULL\") ==> \"U\"\n// get_closest_vowel(\"quick\") ==>\
    \ \"\"\n// get_closest_vowel(\"ab\") ==> \"\"\nstd::string get_closest_vowel(std::string\
    \ word) {\n    std::string vowels = \"AEIOUaeiou\";\n    std::string vowels_reverse\
    \ = vowels + vowels.substr(1, vowels.size());\n    std::string vowels_reverse_reverse\
    \ = vowels_reverse + vowels_reverse.substr(1, vowels_reverse.size());\n    std::string\
    \ vowels_reverse_reverse_reverse = vowels_reverse_reverse + vowels_reverse_reverse.substr(1,\
    \ vowels_reverse_reverse.size());\n    std::string vowels_reverse_reverse_reverse_reverse\
    \ = vowels_reverse_reverse_reverse_reverse + vowels_reverse_reverse_reverse.substr(1,\
    \ vowels_reverse_reverse_reverse.size());\n    std::string vowels_reverse_reverse_reverse_reverse_reverse\
    \ = vowels_reverse_reverse_reverse_reverse_reverse + vowels_reverse_reverse_reverse_reverse.substr(1,\
    \ vowels_reverse_reverse_reverse_reverse.size());\n    std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = vowels_reverse_reverse_reverse_reverse_reverse_reverse + vowels_reverse_reverse_reverse_reverse_reverse.substr(1,\
    \ vowels_reverse_reverse_reverse_reverse_reverse.size());\n    std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse + vowels_reverse_reverse_reverse_reverse_reverse_reverse.substr(1,\
    \ vowels_reverse_reverse_reverse_reverse_reverse_reverse.size());\n    std::string\
    \ vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse = vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ + vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse.substr(1, vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse.size());\n\
    \    std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse + vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse.substr(1,\
    \ vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse.size());\n  \
    \  std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ + vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse.substr(1,\
    \ vowels_reverse_reverse\n}\nint main() {\n    auto candidate = get_closest_vowel;\n\
    \    assert(candidate((\"yogurt\")) == (\"u\"));\n    assert(candidate((\"full\"\
    )) == (\"u\"));\n    assert(candidate((\"easy\")) == (\"\"));\n    assert(candidate((\"\
    eAsy\")) == (\"\"));\n    assert(candidate((\"ali\")) == (\"\"));\n    assert(candidate((\"\
    bad\")) == (\"a\"));\n    assert(candidate((\"most\")) == (\"o\"));\n    assert(candidate((\"\
    ab\")) == (\"\"));\n    assert(candidate((\"ba\")) == (\"\"));\n    assert(candidate((\"\
    quick\")) == (\"\"));\n    assert(candidate((\"anime\")) == (\"i\"));\n    assert(candidate((\"\
    Asia\")) == (\"\"));\n    assert(candidate((\"Above\")) == (\"o\"));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpq8t1qo56.cpp: In function \u2018std::string get_closest_vowel(std::string)\u2019\
    :\n/tmp/tmpq8t1qo56.cpp:23:17: error: redeclaration of \u2018std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\u2019\
    \n   23 |     std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse + vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse.substr(1,\
    \ vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse.size());\n  \
    \    |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpq8t1qo56.cpp:22:17: note: \u2018std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\u2019\
    \ previously declared here\n   22 |     std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse + vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse.substr(1,\
    \ vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse.size());\n  \
    \    |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpq8t1qo56.cpp:24:17: error: redeclaration of \u2018std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\u2019\
    \n   24 |     std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ + vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse.substr(1,\
    \ vowels_reverse_reverse\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpq8t1qo56.cpp:22:17: note: \u2018std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\u2019\
    \ previously declared here\n   22 |     std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse + vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse.substr(1,\
    \ vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse.size());\n  \
    \    |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpq8t1qo56.cpp:24:90: error: \u2018vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\u2019\
    \ was not declared in this scope; did you mean \u2018vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\u2019\
    ?\n   24 |     std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ + vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse.substr(1,\
    \ vowels_reverse_reverse\n      |                                            \
    \                                              ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    \      |                                                                     \
    \                     vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\n\
    /tmp/tmpq8t1qo56.cpp:24:274: error: expected \u2018)\u2019 before \u2018}\u2019\
    \ token\n   24 |     std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ + vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse.substr(1,\
    \ vowels_reverse_reverse\n      |                                            \
    \                                                                            \
    \                                                                            \
    \                                                    ~                       \
    \  ^\n      |                                                                \
    \                                                                            \
    \                                                                            \
    \                                                          )\n   25 | }\n    \
    \  | ~                                                                       \
    \                                                                            \
    \                                                                            \
    \                                                  \n/tmp/tmpq8t1qo56.cpp:25:1:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n\
    \   25 | }\n      | ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// get_closest_vowel(\"yogurt\") ==> \"u\"\
    \n// get_closest_vowel(\"FULL\") ==> \"U\"\n// get_closest_vowel(\"quick\") ==>\
    \ \"\"\n// get_closest_vowel(\"ab\") ==> \"\"\nstd::string get_closest_vowel(std::string\
    \ word) {\n    std::string vowels = \"aeiouAEIOU\";\n    std::string vowels_rev\
    \ = \"AEIOUaeiou\";\n    std::string vowels_rev1 = \"aeiouAEIOU\";\n    std::string\
    \ vowels_rev2 = \"\";\n    std::string vowels_rev3 = \"\";\n    std::string vowels_rev4\
    \ = \"\";\n    std::string vowels_rev5 = \"\";\n    std::string vowels_rev6 =\
    \ \"\";\n    std::string vowels_rev7 = \"\";\n    std::string vowels_rev8 = \"\
    \";\n    std::string vowels_rev9 = \"\";\n    std::string vowels_rev10 = \"\"\
    ;\n    std::string vowels_rev11 = \"\";\n    std::string vowels_rev12 = \"\";\n\
    \    std::string vowels_rev13 = \"\";\n    std::string vowels_rev14 = \"\";\n\
    \    std::string vowels_rev15 = \"\";\n    std::string vowels_rev16 = \"\";\n\
    \    std::string vowels_rev17 = \"\";\n    std::string vowels_rev18 = \"\";\n\
    \    std::string vowels_rev19 = \"\";\n    std::string vowels_rev20 = \"\";\n\
    \    std::string vowels_rev21 = \"\";\n    std::string vowels_rev22 = \"\";\n\
    \    std::string vowels_rev23 = \"\";\n    std::string vowels_rev24 = \"\";\n\
    \    std::string vowels_rev25 = \"\";\n    std::string vowels_rev26 = \"\";\n\
    \    std::string vowels_rev27 = \"\";\n    std::string vowels_rev28 = \"\";\n\
    \    std::string vowels_rev29 = \"\";\n    std::string vowels_rev30 = \"\";\n\
    \    std::string vowels_rev31 = \"\";\n    std::string vowels_rev32 = \"\";\n\
    \    std::string vowels_rev33 = \"\";\n    std::string vowels_rev34 = \"\";\n\
    \    std::string vowels_rev35 = \"\";\n    std::string vowels_rev36 = \"\";\n\
    \    std::string vowels_rev37 = \"\";\n    std::string vowels_rev38 = \"\";\n\
    \    std::string vowels_rev39 = \"\";\n    std::string vowels_rev40 = \"\";\n\
    \    std::string vowels_rev41 = \"\";\n    std::string vowels_rev42 = \"\";\n\
    \    std::string vowels_rev43 = \"\";\n    std::string vowels_rev44 = \"\";\n\
    \    std::string vowels_rev45 = \"\";\n    std::string vowels_rev46 = \"\";\n\
    \    std::string vowels_rev47 = \"\";\n    std::string vowels_rev48 = \"\";\n\
    \    std::string vowels_rev49 = \"\";\n    std::string vowels_rev50 = \"\";\n\
    \    std::string vowels_rev51 = \"\";\n    std::string vowels_rev52 = \"\";\n\
    \    std::string vowels_rev53 = \"\";\n    std::string vowels_rev54 = \"\";\n\
    \    std::string vowels_rev55 = \"\";\n    std::string vowels_rev56 = \"\";\n\
    \    std::string vowels_rev57 = \"\";\n    std::string vowels_rev58 = \"\";\n\
    \    std::string vowels_rev59 = \"\";\n\n}\nint main() {\n    auto candidate =\
    \ get_closest_vowel;\n    assert(candidate((\"yogurt\")) == (\"u\"));\n    assert(candidate((\"\
    full\")) == (\"u\"));\n    assert(candidate((\"easy\")) == (\"\"));\n    assert(candidate((\"\
    eAsy\")) == (\"\"));\n    assert(candidate((\"ali\")) == (\"\"));\n    assert(candidate((\"\
    bad\")) == (\"a\"));\n    assert(candidate((\"most\")) == (\"o\"));\n    assert(candidate((\"\
    ab\")) == (\"\"));\n    assert(candidate((\"ba\")) == (\"\"));\n    assert(candidate((\"\
    quick\")) == (\"\"));\n    assert(candidate((\"anime\")) == (\"i\"));\n    assert(candidate((\"\
    Asia\")) == (\"\"));\n    assert(candidate((\"Above\")) == (\"o\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// get_closest_vowel(\"yogurt\") ==> \"u\"\
    \n// get_closest_vowel(\"FULL\") ==> \"U\"\n// get_closest_vowel(\"quick\") ==>\
    \ \"\"\n// get_closest_vowel(\"ab\") ==> \"\"\nstd::string get_closest_vowel(std::string\
    \ word) {\n    std::string vowels = \"AEIOUaeiou\";\n    std::string vowels_reverse\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_reverse = \"AEIOUaeiou\";\n\
    \    std::string vowels_reverse_reverse_reverse = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse_reverse_reverse_reverse = \"AEIOUaeiou\";\n    std::string vowels_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_reverse\n}\nint main() {\n\
    \    auto candidate = get_closest_vowel;\n    assert(candidate((\"yogurt\")) ==\
    \ (\"u\"));\n    assert(candidate((\"full\")) == (\"u\"));\n    assert(candidate((\"\
    easy\")) == (\"\"));\n    assert(candidate((\"eAsy\")) == (\"\"));\n    assert(candidate((\"\
    ali\")) == (\"\"));\n    assert(candidate((\"bad\")) == (\"a\"));\n    assert(candidate((\"\
    most\")) == (\"o\"));\n    assert(candidate((\"ab\")) == (\"\"));\n    assert(candidate((\"\
    ba\")) == (\"\"));\n    assert(candidate((\"quick\")) == (\"\"));\n    assert(candidate((\"\
    anime\")) == (\"i\"));\n    assert(candidate((\"Asia\")) == (\"\"));\n    assert(candidate((\"\
    Above\")) == (\"o\"));\n}\n"
  stdout: ''
  stderr: "/tmp/tmplo_6cdhg.cpp: In function \u2018std::string get_closest_vowel(std::string)\u2019\
    :\n/tmp/tmplo_6cdhg.cpp:22:17: error: redeclaration of \u2018std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse\u2019\
    \n   22 |     std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmplo_6cdhg.cpp:21:17: note: \u2018std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse\u2019\
    \ previously declared here\n   21 |     std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmplo_6cdhg.cpp:23:17: error: redeclaration of \u2018std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse\u2019\
    \n   23 |     std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmplo_6cdhg.cpp:21:17: note: \u2018std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse\u2019\
    \ previously declared here\n   21 |     std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmplo_6cdhg.cpp:25:17: error: redeclaration of \u2018std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\u2019\
    \n   25 |     std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmplo_6cdhg.cpp:24:17: note: \u2018std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\u2019\
    \ previously declared here\n   24 |     std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmplo_6cdhg.cpp:26:17: error: redeclaration of \u2018std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\u2019\
    \n   26 |     std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmplo_6cdhg.cpp:24:17: note: \u2018std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\u2019\
    \ previously declared here\n   24 |     std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmplo_6cdhg.cpp:27:17: error: redeclaration of \u2018std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\u2019\
    \n   27 |     std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmplo_6cdhg.cpp:24:17: note: \u2018std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\u2019\
    \ previously declared here\n   24 |     std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmplo_6cdhg.cpp:29:17: error: redeclaration of \u2018std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\u2019\
    \n   29 |     std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmplo_6cdhg.cpp:28:17: note: \u2018std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\u2019\
    \ previously declared here\n   28 |     std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmplo_6cdhg.cpp:30:17: error: redeclaration of \u2018std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\u2019\
    \n   30 |     std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmplo_6cdhg.cpp:28:17: note: \u2018std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\u2019\
    \ previously declared here\n   28 |     std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmplo_6cdhg.cpp:31:17: error: redeclaration of \u2018std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\u2019\
    \n   31 |     std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmplo_6cdhg.cpp:28:17: note: \u2018std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\u2019\
    \ previously declared here\n   28 |     std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmplo_6cdhg.cpp:32:17: error: redeclaration of \u2018std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\u2019\
    \n   32 |     std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmplo_6cdhg.cpp:28:17: note: \u2018std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\u2019\
    \ previously declared here\n   28 |     std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmplo_6cdhg.cpp:33:17: error: redeclaration of \u2018std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\u2019\
    \n   33 |     std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmplo_6cdhg.cpp:28:17: note: \u2018std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\u2019\
    \ previously declared here\n   28 |     std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmplo_6cdhg.cpp:34:17: error: redeclaration of \u2018std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\u2019\
    \n   34 |     std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmplo_6cdhg.cpp:28:17: note: \u2018std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\u2019\
    \ previously declared here\n   28 |     std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmplo_6cdhg.cpp:36:1: error: expected initializer before \u2018}\u2019 token\n\
    \   36 | }\n      | ^\n/tmp/tmplo_6cdhg.cpp:36:1: warning: no return statement\
    \ in function returning non-void [-Wreturn-type]\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// get_closest_vowel(\"yogurt\") ==> \"u\"\
    \n// get_closest_vowel(\"FULL\") ==> \"U\"\n// get_closest_vowel(\"quick\") ==>\
    \ \"\"\n// get_closest_vowel(\"ab\") ==> \"\"\nstd::string get_closest_vowel(std::string\
    \ word) {\n    std::string vowels = \"AEIOUaeiou\";\n    std::string vowel_found\
    \ = \"\";\n    std::string vowel_found2 = \"\";\n    std::string vowel_found3\
    \ = \"\";\n    std::string vowel_found4 = \"\";\n    std::string vowel_found5\
    \ = \"\";\n    std::string vowel_found6 = \"\";\n    std::string vowel_found7\
    \ = \"\";\n    std::string vowel_found8 = \"\";\n    std::string vowel_found9\
    \ = \"\";\n    std::string vowel_found10 = \"\";\n    std::string vowel_found11\
    \ = \"\";\n    std::string vowel_found12 = \"\";\n    std::string vowel_found13\
    \ = \"\";\n    std::string vowel_found14 = \"\";\n    std::string vowel_found15\
    \ = \"\";\n    std::string vowel_found16 = \"\";\n    std::string vowel_found17\
    \ = \"\";\n    std::string vowel_found18 = \"\";\n    std::string vowel_found19\
    \ = \"\";\n    std::string vowel_found20 = \"\";\n    std::string vowel_found21\
    \ = \"\";\n    std::string vowel_found22 = \"\";\n    std::string vowel_found23\
    \ = \"\";\n    std::string vowel_found24 = \"\";\n    std::string vowel_found25\
    \ = \"\";\n    std::string vowel_found26 = \"\";\n    std::string vowel_found27\
    \ = \"\";\n    std::string vowel_found28 = \"\";\n    std::string vowel_found29\
    \ = \"\";\n    std::string vowel_found30 = \"\";\n    std::string vowel_found31\
    \ = \"\";\n    std::string vowel_found32 = \"\";\n    std::string vowel_found33\
    \ = \"\";\n    std::string vowel_found34 = \"\";\n    std::string vowel_found35\
    \ = \"\";\n    std::string vowel_found36 = \"\";\n    std::string vowel_found37\
    \ = \"\";\n    std::string vowel_found38 = \"\";\n    std::string vowel_found39\
    \ = \"\";\n    std::string vowel_found40 = \"\";\n    std::string vowel_found41\
    \ = \"\";\n    std::string vowel_found42 = \"\";\n    std::string vowel_found43\
    \ = \"\";\n    std::string vowel_found44 = \"\";\n    std::string vowel_found45\
    \ = \"\";\n    std::string vowel_found46 = \"\";\n    std::string vowel_found47\
    \ = \"\";\n    std::string vowel_found48 = \"\";\n    std::string vowel_found49\
    \ = \"\";\n    std::string vowel_found50 = \"\";\n    std::string vowel_found51\
    \ = \"\";\n    std::string vowel_found52 = \"\";\n    std::string vowel_found53\
    \ = \"\";\n    std::string vowel_found54 = \"\";\n    std::string vowel_found55\
    \ = \"\";\n    std::string vowel_found56 = \"\";\n    std::string vowel_found57\
    \ = \"\";\n    std::string vowel_found58 = \"\";\n    std::string vowel_found59\
    \ = \"\";\n    std::string vowel_found60 = \"\";\n    std::string vowel_found61\
    \ = \"\";\n    std::string vowel\n}\nint main() {\n    auto candidate = get_closest_vowel;\n\
    \    assert(candidate((\"yogurt\")) == (\"u\"));\n    assert(candidate((\"full\"\
    )) == (\"u\"));\n    assert(candidate((\"easy\")) == (\"\"));\n    assert(candidate((\"\
    eAsy\")) == (\"\"));\n    assert(candidate((\"ali\")) == (\"\"));\n    assert(candidate((\"\
    bad\")) == (\"a\"));\n    assert(candidate((\"most\")) == (\"o\"));\n    assert(candidate((\"\
    ab\")) == (\"\"));\n    assert(candidate((\"ba\")) == (\"\"));\n    assert(candidate((\"\
    quick\")) == (\"\"));\n    assert(candidate((\"anime\")) == (\"i\"));\n    assert(candidate((\"\
    Asia\")) == (\"\"));\n    assert(candidate((\"Above\")) == (\"o\"));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpe9w23fq_.cpp: In function \u2018std::string get_closest_vowel(std::string)\u2019\
    :\n/tmp/tmpe9w23fq_.cpp:77:1: error: expected initializer before \u2018}\u2019\
    \ token\n   77 | }\n      | ^\n/tmp/tmpe9w23fq_.cpp:77:1: warning: no return statement\
    \ in function returning non-void [-Wreturn-type]\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// get_closest_vowel(\"yogurt\") ==> \"u\"\
    \n// get_closest_vowel(\"FULL\") ==> \"U\"\n// get_closest_vowel(\"quick\") ==>\
    \ \"\"\n// get_closest_vowel(\"ab\") ==> \"\"\nstd::string get_closest_vowel(std::string\
    \ word) {\n    std::string vowels = \"AEIOUaeiou\";\n    std::string vowels_reverse\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse2 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse3 = \"AEIOUaeiou\";\n    std::string vowels_reverse4 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse5 = \"AEIOUaeiou\";\n    std::string vowels_reverse6\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse7 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse8 = \"AEIOUaeiou\";\n    std::string vowels_reverse9 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse10 = \"AEIOUaeiou\";\n    std::string vowels_reverse11\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse12 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse13 = \"AEIOUaeiou\";\n    std::string vowels_reverse14 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse15 = \"AEIOUaeiou\";\n    std::string vowels_reverse16\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse17 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse18 = \"AEIOUaeiou\";\n    std::string vowels_reverse19 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse20 = \"AEIOUaeiou\";\n    std::string vowels_reverse21\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse22 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse23 = \"AEIOUaeiou\";\n    std::string vowels_reverse24 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse25 = \"AEIOUaeiou\";\n    std::string vowels_reverse26\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse27 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse28 = \"AEIOUaeiou\";\n    std::string vowels_reverse29 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse30 = \"AEIOUaeiou\";\n    std::string vowels_reverse31\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse32 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse33 = \"AEIOUaeiou\";\n    std::string vowels_reverse34 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse35 = \"AEIOUaeiou\";\n    std::string vowels_reverse36\
    \ = \"AEIOU\n}\nint main() {\n    auto candidate = get_closest_vowel;\n    assert(candidate((\"\
    yogurt\")) == (\"u\"));\n    assert(candidate((\"full\")) == (\"u\"));\n    assert(candidate((\"\
    easy\")) == (\"\"));\n    assert(candidate((\"eAsy\")) == (\"\"));\n    assert(candidate((\"\
    ali\")) == (\"\"));\n    assert(candidate((\"bad\")) == (\"a\"));\n    assert(candidate((\"\
    most\")) == (\"o\"));\n    assert(candidate((\"ab\")) == (\"\"));\n    assert(candidate((\"\
    ba\")) == (\"\"));\n    assert(candidate((\"quick\")) == (\"\"));\n    assert(candidate((\"\
    anime\")) == (\"i\"));\n    assert(candidate((\"Asia\")) == (\"\"));\n    assert(candidate((\"\
    Above\")) == (\"o\"));\n}\n"
  stdout: ''
  stderr: "/tmp/tmptm05qtdh.cpp:50:36: warning: missing terminating \" character\n\
    \   50 |     std::string vowels_reverse36 = \"AEIOU\n      |                 \
    \                   ^\n/tmp/tmptm05qtdh.cpp:50:36: error: missing terminating\
    \ \" character\n   50 |     std::string vowels_reverse36 = \"AEIOU\n      |  \
    \                                  ^~~~~~\n/tmp/tmptm05qtdh.cpp: In function \u2018\
    std::string get_closest_vowel(std::string)\u2019:\n/tmp/tmptm05qtdh.cpp:51:1:\
    \ error: expected primary-expression before \u2018}\u2019 token\n   51 | }\n \
    \     | ^\n/tmp/tmptm05qtdh.cpp:51:1: error: expected \u2018,\u2019 or \u2018\
    ;\u2019 before \u2018}\u2019 token\n/tmp/tmptm05qtdh.cpp:51:1: warning: no return\
    \ statement in function returning non-void [-Wreturn-type]\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// get_closest_vowel(\"yogurt\") ==> \"u\"\
    \n// get_closest_vowel(\"FULL\") ==> \"U\"\n// get_closest_vowel(\"quick\") ==>\
    \ \"\"\n// get_closest_vowel(\"ab\") ==> \"\"\nstd::string get_closest_vowel(std::string\
    \ word) {\n    std::string vowels = \"aeiouAEIOU\";\n    std::string vowels_reverse\
    \ = vowels.substr(0, vowels.size() - 1);\n    std::string vowels_reverse_reverse\
    \ = vowels_reverse.substr(0, vowels_reverse.size() - 1);\n    std::string vowels_reverse_reverse_vowels\
    \ = vowels_reverse_reverse.substr(0, vowels_reverse_reverse.size() - 1);\n   \
    \ std::string vowels_reverse_reverse_vowels_reverse = vowels_reverse_reverse_vowels.substr(0,\
    \ vowels_reverse_reverse_vowels.size() - 1);\n    std::string vowels_reverse_reverse_vowels_reverse_vowels\
    \ = vowels_reverse_reverse_vowels_reverse.substr(0, vowels_reverse_reverse_vowels_reverse.size()\
    \ - 1);\n    std::string vowels_reverse_reverse_vowels_reverse_vowels_reverse\
    \ = vowels_reverse_reverse_vowels_reverse_vowels.substr(0, vowels_reverse_reverse_vowels_reverse_vowels.size()\
    \ - 1);\n    std::string vowels_reverse_reverse_vowels_reverse_vowels_reverse_vowels_reverse\
    \ = vowels_reverse_reverse_vowels_reverse_vowels_reverse.substr(0, vowels_reverse_reverse_vowels_reverse_vowels_reverse.size()\
    \ - 1);\n    std::string vowels_reverse_reverse_vowels_reverse_vowels_reverse_vowels_reverse_vowels_reverse\
    \ = vowels_reverse_reverse_vowels_reverse_vowels_reverse_vowels_reverse.substr(0,\
    \ vowels_reverse_reverse_vowels_reverse_vowels_reverse_vowels_reverse.size() -\
    \ 1);\n    std::string vowels_reverse_reverse_vowels_reverse_vowels_reverse_vowels_reverse_vowels_reverse_vowels_reverse\
    \ = vowels_reverse_reverse_vowels_reverse_vowels_reverse_vowels_reverse_vowels_reverse.substr(0,\
    \ vowels_reverse_reverse_vowels_reverse_vowels_reverse_vowels_reverse_vowels_reverse.size()\
    \ - 1);\n    std::string vowels_reverse_reverse_vowels_reverse_vowels_reverse_vowels_reverse_vowels_reverse_vowels_reverse_vowels_reverse\
    \ = vowels_reverse_reverse_vowels_reverse_vowels_reverse_vowels_reverse_vowels_reverse_vowels_reverse.substr(0,\
    \ vowels_reverse_reverse_vowels_reverse_vowels_reverse_vowels_reverse_vowels_reverse_vowels_reverse.size()\
    \ - 1);\n    std::string vowels_reverse_reverse_vowels_reverse_vowels_reverse_vowels_reverse_vowels_reverse_vowels_reverse_vowels_reverse_vowels_reverse\
    \ = vowels_reverse_reverse_vowels_reverse_vowels_reverse_vowels_reverse_vowels_reverse_vowels_reverse_vowels_reverse.substr(0,\
    \ vowels_reverse_reverse_vowels_reverse_vowels_reverse_vowels_reverse_vowels_reverse_vowels_reverse_vowels_reverse.size()\
    \ - 1);\n    std::string vowels_reverse_reverse_vowels_reverse_vowels_reverse_vowels_\n\
    }\nint main() {\n    auto candidate = get_closest_vowel;\n    assert(candidate((\"\
    yogurt\")) == (\"u\"));\n    assert(candidate((\"full\")) == (\"u\"));\n    assert(candidate((\"\
    easy\")) == (\"\"));\n    assert(candidate((\"eAsy\")) == (\"\"));\n    assert(candidate((\"\
    ali\")) == (\"\"));\n    assert(candidate((\"bad\")) == (\"a\"));\n    assert(candidate((\"\
    most\")) == (\"o\"));\n    assert(candidate((\"ab\")) == (\"\"));\n    assert(candidate((\"\
    ba\")) == (\"\"));\n    assert(candidate((\"quick\")) == (\"\"));\n    assert(candidate((\"\
    anime\")) == (\"i\"));\n    assert(candidate((\"Asia\")) == (\"\"));\n    assert(candidate((\"\
    Above\")) == (\"o\"));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpmufij7lk.cpp: In function \u2018std::string get_closest_vowel(std::string)\u2019\
    :\n/tmp/tmpmufij7lk.cpp:27:1: error: expected initializer before \u2018}\u2019\
    \ token\n   27 | }\n      | ^\n/tmp/tmpmufij7lk.cpp:27:1: warning: no return statement\
    \ in function returning non-void [-Wreturn-type]\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// get_closest_vowel(\"yogurt\") ==> \"u\"\
    \n// get_closest_vowel(\"FULL\") ==> \"U\"\n// get_closest_vowel(\"quick\") ==>\
    \ \"\"\n// get_closest_vowel(\"ab\") ==> \"\"\nstd::string get_closest_vowel(std::string\
    \ word) {\n    std::string vowels = \"aeiouAEIOU\";\n    std::string vowels_reverse\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse2 = \"aeiouAEIOU\";\n    std::string\
    \ vowels_reverse3 = \"AEIOUaeiou\";\n    std::string vowels_reverse4 = \"aeiouAEIOU\"\
    ;\n    std::string vowels_reverse5 = \"AEIOUaeiou\";\n    std::string vowels_reverse6\
    \ = \"aeiouAEIOU\";\n    std::string vowels_reverse7 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse8 = \"aeiouAEIOU\";\n    std::string vowels_reverse9 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse10 = \"AEIOUaeiou\";\n    std::string vowels_reverse11\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse12 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse13 = \"AEIOUaeiou\";\n    std::string vowels_reverse14 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse15 = \"AEIOUaeiou\";\n    std::string vowels_reverse16\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse17 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse18 = \"AEIOUaeiou\";\n    std::string vowels_reverse19 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse20 = \"AEIOUaeiou\";\n    std::string vowels_reverse21\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse22 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse23 = \"AEIOUaeiou\";\n    std::string vowels_reverse24 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse25 = \"AEIOUaeiou\";\n    std::string vowels_reverse26\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse27 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse28 = \"AEIOUaeiou\";\n    std::string vowels_reverse29 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse30 = \"AEIOUaeiou\";\n    std::string vowels_reverse31\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse32 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse33 = \"AEIOUaeiou\";\n    std::string vowels_reverse34 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse35 = \"AEIOUaeiou\";\n    std::string vowels_reverse36\
    \ = \"AEIOU\n}\nint main() {\n    auto candidate = get_closest_vowel;\n    assert(candidate((\"\
    yogurt\")) == (\"u\"));\n    assert(candidate((\"full\")) == (\"u\"));\n    assert(candidate((\"\
    easy\")) == (\"\"));\n    assert(candidate((\"eAsy\")) == (\"\"));\n    assert(candidate((\"\
    ali\")) == (\"\"));\n    assert(candidate((\"bad\")) == (\"a\"));\n    assert(candidate((\"\
    most\")) == (\"o\"));\n    assert(candidate((\"ab\")) == (\"\"));\n    assert(candidate((\"\
    ba\")) == (\"\"));\n    assert(candidate((\"quick\")) == (\"\"));\n    assert(candidate((\"\
    anime\")) == (\"i\"));\n    assert(candidate((\"Asia\")) == (\"\"));\n    assert(candidate((\"\
    Above\")) == (\"o\"));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpurbkx8l3.cpp:50:36: warning: missing terminating \" character\n\
    \   50 |     std::string vowels_reverse36 = \"AEIOU\n      |                 \
    \                   ^\n/tmp/tmpurbkx8l3.cpp:50:36: error: missing terminating\
    \ \" character\n   50 |     std::string vowels_reverse36 = \"AEIOU\n      |  \
    \                                  ^~~~~~\n/tmp/tmpurbkx8l3.cpp: In function \u2018\
    std::string get_closest_vowel(std::string)\u2019:\n/tmp/tmpurbkx8l3.cpp:51:1:\
    \ error: expected primary-expression before \u2018}\u2019 token\n   51 | }\n \
    \     | ^\n/tmp/tmpurbkx8l3.cpp:51:1: error: expected \u2018,\u2019 or \u2018\
    ;\u2019 before \u2018}\u2019 token\n/tmp/tmpurbkx8l3.cpp:51:1: warning: no return\
    \ statement in function returning non-void [-Wreturn-type]\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// get_closest_vowel(\"yogurt\") ==> \"u\"\
    \n// get_closest_vowel(\"FULL\") ==> \"U\"\n// get_closest_vowel(\"quick\") ==>\
    \ \"\"\n// get_closest_vowel(\"ab\") ==> \"\"\nstd::string get_closest_vowel(std::string\
    \ word) {\n    std::string vowels = \"AEIOUaeiou\";\n    std::string vowels_reverse\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_reverse = \"\";\n    std::string\
    \ vowels_reverse_back = \"\";\n    std::string vowels_reverse_back_reverse = \"\
    \";\n    std::string vowels_reverse_back_reverse_back = \"\";\n    std::string\
    \ vowels_reverse_back_reverse_back_reverse = \"\";\n    std::string vowels_reverse_back_reverse_back_reverse_back\
    \ = \"\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse\
    \ = \"\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back\
    \ = \"\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse\
    \ = \"\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\
    \ = \"\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse\
    \ = \"\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\
    \ = \"\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\
    \ = \"\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse\
    \ = \"\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\
    \ = \"\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse\
    \ = \"\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\
    \ = \"\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\
    \ = \"\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse\
    \ = \"\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\
    \ = \"\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\
    \ = \"\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\
    \ = \"\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_re\n\
    }\nint main() {\n    auto candidate = get_closest_vowel;\n    assert(candidate((\"\
    yogurt\")) == (\"u\"));\n    assert(candidate((\"full\")) == (\"u\"));\n    assert(candidate((\"\
    easy\")) == (\"\"));\n    assert(candidate((\"eAsy\")) == (\"\"));\n    assert(candidate((\"\
    ali\")) == (\"\"));\n    assert(candidate((\"bad\")) == (\"a\"));\n    assert(candidate((\"\
    most\")) == (\"o\"));\n    assert(candidate((\"ab\")) == (\"\"));\n    assert(candidate((\"\
    ba\")) == (\"\"));\n    assert(candidate((\"quick\")) == (\"\"));\n    assert(candidate((\"\
    anime\")) == (\"i\"));\n    assert(candidate((\"Asia\")) == (\"\"));\n    assert(candidate((\"\
    Above\")) == (\"o\"));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp0fdtfdv9.cpp: In function \u2018std::string get_closest_vowel(std::string)\u2019\
    :\n/tmp/tmp0fdtfdv9.cpp:28:17: error: redeclaration of \u2018std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\u2019\
    \n   28 |     std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\
    \ = \"\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmp0fdtfdv9.cpp:27:17: note: \u2018std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\u2019\
    \ previously declared here\n   27 |     std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\
    \ = \"\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmp0fdtfdv9.cpp:33:17: error: redeclaration of \u2018std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\u2019\
    \n   33 |     std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\
    \ = \"\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmp0fdtfdv9.cpp:32:17: note: \u2018std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\u2019\
    \ previously declared here\n   32 |     std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\
    \ = \"\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmp0fdtfdv9.cpp:36:17: error: redeclaration of \u2018std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\u2019\
    \n   36 |     std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\
    \ = \"\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmp0fdtfdv9.cpp:35:17: note: \u2018std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\u2019\
    \ previously declared here\n   35 |     std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\
    \ = \"\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmp0fdtfdv9.cpp:37:17: error: redeclaration of \u2018std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\u2019\
    \n   37 |     std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\
    \ = \"\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmp0fdtfdv9.cpp:35:17: note: \u2018std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\u2019\
    \ previously declared here\n   35 |     std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\
    \ = \"\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmp0fdtfdv9.cpp:39:1: error: expected initializer before \u2018}\u2019 token\n\
    \   39 | }\n      | ^\n/tmp/tmp0fdtfdv9.cpp:39:1: warning: no return statement\
    \ in function returning non-void [-Wreturn-type]\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// get_closest_vowel(\"yogurt\") ==> \"u\"\
    \n// get_closest_vowel(\"FULL\") ==> \"U\"\n// get_closest_vowel(\"quick\") ==>\
    \ \"\"\n// get_closest_vowel(\"ab\") ==> \"\"\nstd::string get_closest_vowel(std::string\
    \ word) {\n    std::string vowels = \"AEIOUaeiou\";\n    std::string vowels_reverse\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse2 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse3 = \"AEIOUaeiou\";\n    std::string vowels_reverse4 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse5 = \"AEIOUaeiou\";\n    std::string vowels_reverse6\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse7 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse8 = \"AEIOUaeiou\";\n    std::string vowels_reverse9 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse10 = \"AEIOUaeiou\";\n    std::string vowels_reverse11\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse12 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse13 = \"AEIOUaeiou\";\n    std::string vowels_reverse14 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse15 = \"AEIOUaeiou\";\n    std::string vowels_reverse16\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse17 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse18 = \"AEIOUaeiou\";\n    std::string vowels_reverse19 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse20 = \"AEIOUaeiou\";\n    std::string vowels_reverse21\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse22 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse23 = \"AEIOUaeiou\";\n    std::string vowels_reverse24 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse25 = \"AEIOUaeiou\";\n    std::string vowels_reverse26\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse27 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse28 = \"AEIOUaeiou\";\n    std::string vowels_reverse29 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse30 = \"AEIOUaeiou\";\n    std::string vowels_reverse31\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse32 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse33 = \"AEIOUaeiou\";\n    std::string vowels_reverse34 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse35 = \"AEIOUaeiou\";\n    std::string vowels_reverse36\
    \ = \"AEIOU\n}\nint main() {\n    auto candidate = get_closest_vowel;\n    assert(candidate((\"\
    yogurt\")) == (\"u\"));\n    assert(candidate((\"full\")) == (\"u\"));\n    assert(candidate((\"\
    easy\")) == (\"\"));\n    assert(candidate((\"eAsy\")) == (\"\"));\n    assert(candidate((\"\
    ali\")) == (\"\"));\n    assert(candidate((\"bad\")) == (\"a\"));\n    assert(candidate((\"\
    most\")) == (\"o\"));\n    assert(candidate((\"ab\")) == (\"\"));\n    assert(candidate((\"\
    ba\")) == (\"\"));\n    assert(candidate((\"quick\")) == (\"\"));\n    assert(candidate((\"\
    anime\")) == (\"i\"));\n    assert(candidate((\"Asia\")) == (\"\"));\n    assert(candidate((\"\
    Above\")) == (\"o\"));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp3o67mjx8.cpp:50:36: warning: missing terminating \" character\n\
    \   50 |     std::string vowels_reverse36 = \"AEIOU\n      |                 \
    \                   ^\n/tmp/tmp3o67mjx8.cpp:50:36: error: missing terminating\
    \ \" character\n   50 |     std::string vowels_reverse36 = \"AEIOU\n      |  \
    \                                  ^~~~~~\n/tmp/tmp3o67mjx8.cpp: In function \u2018\
    std::string get_closest_vowel(std::string)\u2019:\n/tmp/tmp3o67mjx8.cpp:51:1:\
    \ error: expected primary-expression before \u2018}\u2019 token\n   51 | }\n \
    \     | ^\n/tmp/tmp3o67mjx8.cpp:51:1: error: expected \u2018,\u2019 or \u2018\
    ;\u2019 before \u2018}\u2019 token\n/tmp/tmp3o67mjx8.cpp:51:1: warning: no return\
    \ statement in function returning non-void [-Wreturn-type]\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// get_closest_vowel(\"yogurt\") ==> \"u\"\
    \n// get_closest_vowel(\"FULL\") ==> \"U\"\n// get_closest_vowel(\"quick\") ==>\
    \ \"\"\n// get_closest_vowel(\"ab\") ==> \"\"\nstd::string get_closest_vowel(std::string\
    \ word) {\n    std::string vowels = \"AEIOUaeiou\";\n    std::string vowels_reverse\
    \ = vowels.substr(0, vowels.size() - 1);\n    std::string vowels_reverse2 = vowels_reverse.substr(0,\
    \ vowels_reverse.size() - 1);\n    std::string vowels_reverse3 = vowels_reverse2.substr(0,\
    \ vowels_reverse2.size() - 1);\n    std::string vowels_reverse4 = vowels_reverse3.substr(0,\
    \ vowels_reverse3.size() - 1);\n    std::string vowels_reverse5 = vowels_reverse4.substr(0,\
    \ vowels_reverse4.size() - 1);\n    std::string vowels_reverse6 = vowels_reverse5.substr(0,\
    \ vowels_reverse5.size() - 1);\n    std::string vowels_reverse7 = vowels_reverse6.substr(0,\
    \ vowels_reverse6.size() - 1);\n    std::string vowels_reverse8 = vowels_reverse7.substr(0,\
    \ vowels_reverse7.size() - 1);\n    std::string vowels_reverse9 = vowels_reverse8.substr(0,\
    \ vowels_reverse8.size() - 1);\n    std::string vowels_reverse10 = vowels_reverse9.substr(0,\
    \ vowels_reverse9.size() - 1);\n    std::string vowels_reverse11 = vowels_reverse10.substr(0,\
    \ vowels_reverse10.size() - 1);\n    std::string vowels_reverse12 = vowels_reverse11.substr(0,\
    \ vowels_reverse11.size() - 1);\n    std::string vowels_reverse13 = vowels_reverse12.substr(0,\
    \ vowels_reverse12.size() - 1);\n    std::string vowels_reverse14 = vowels_reverse13.substr(0,\
    \ vowels_reverse13.size() - 1);\n    std::string vowels_reverse15 = vowels_reverse14.substr(0,\
    \ vowels_reverse14.size() - 1);\n    std::string vowels_reverse16 = vowels_reverse15.substr(0,\
    \ vowels_reverse15.size() - 1);\n    std::string vowels_reverse17 = vowels_reverse16.substr(0,\
    \ vowels_reverse16.size() - 1);\n    std::string vowels_reverse18 = vowels_reverse17.substr(0,\
    \ vowels_reverse17.size() - 1);\n    std::string vowels_reverse19 = vowels_reverse18.substr(0,\
    \ vowels_reverse18.size() - 1);\n    std::string vowels_reverse20 = vowels_reverse19.substr(0,\
    \ vowels_reverse19.size() - 1);\n    std::string vowels_reverse21 = vowels_reverse20.substr(0,\
    \ vowels_reverse20.size() - 1);\n    std::string vowels_reverse22 = vowels_reverse21.substr(0,\
    \ vowels_reverse21.size() - 1);\n    std::string vowels_reverse23 = vowels_reverse22.substr(0,\
    \ vowels_reverse22.size() - 1);\n    std::string vowels_reverse24 = vowels_reverse23.substr(0,\
    \ vowels_reverse23.size() - 1);\n    std::string vowels_reverse25 = vowels_reverse24.substr(0,\
    \ vowels_\n}\nint main() {\n    auto candidate = get_closest_vowel;\n    assert(candidate((\"\
    yogurt\")) == (\"u\"));\n    assert(candidate((\"full\")) == (\"u\"));\n    assert(candidate((\"\
    easy\")) == (\"\"));\n    assert(candidate((\"eAsy\")) == (\"\"));\n    assert(candidate((\"\
    ali\")) == (\"\"));\n    assert(candidate((\"bad\")) == (\"a\"));\n    assert(candidate((\"\
    most\")) == (\"o\"));\n    assert(candidate((\"ab\")) == (\"\"));\n    assert(candidate((\"\
    ba\")) == (\"\"));\n    assert(candidate((\"quick\")) == (\"\"));\n    assert(candidate((\"\
    anime\")) == (\"i\"));\n    assert(candidate((\"Asia\")) == (\"\"));\n    assert(candidate((\"\
    Above\")) == (\"o\"));\n}\n"
  stdout: ''
  stderr: "/tmp/tmppbj1a9ea.cpp: In function \u2018std::string get_closest_vowel(std::string)\u2019\
    :\n/tmp/tmppbj1a9ea.cpp:39:63: error: \u2018vowels_\u2019 was not declared in\
    \ this scope; did you mean \u2018vowels\u2019?\n   39 |     std::string vowels_reverse25\
    \ = vowels_reverse24.substr(0, vowels_\n      |                              \
    \                                 ^~~~~~~\n      |                           \
    \                                    vowels\n/tmp/tmppbj1a9ea.cpp:40:1: error:\
    \ expected \u2018,\u2019 or \u2018;\u2019 before \u2018}\u2019 token\n   40 |\
    \ }\n      | ^\n/tmp/tmppbj1a9ea.cpp:40:1: warning: no return statement in function\
    \ returning non-void [-Wreturn-type]\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// get_closest_vowel(\"yogurt\") ==> \"u\"\
    \n// get_closest_vowel(\"FULL\") ==> \"U\"\n// get_closest_vowel(\"quick\") ==>\
    \ \"\"\n// get_closest_vowel(\"ab\") ==> \"\"\nstd::string get_closest_vowel(std::string\
    \ word) {\n    // Write your code here\n    std::string vowels = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse = vowels.substr(0, vowels.size() - 1);\n   \
    \ std::string vowels_reverse2 = vowels.substr(0, vowels.size() - 2);\n    std::string\
    \ vowels_reverse3 = vowels.substr(0, vowels.size() - 3);\n    std::string vowels_reverse4\
    \ = vowels.substr(0, vowels.size() - 4);\n    std::string vowels_reverse5 = vowels.substr(0,\
    \ vowels.size() - 5);\n    std::string vowels_reverse6 = vowels.substr(0, vowels.size()\
    \ - 6);\n    std::string vowels_reverse7 = vowels.substr(0, vowels.size() - 7);\n\
    \    std::string vowels_reverse8 = vowels.substr(0, vowels.size() - 8);\n    std::string\
    \ vowels_reverse9 = vowels.substr(0, vowels.size() - 9);\n    std::string vowels_reverse10\
    \ = vowels.substr(0, vowels.size() - 10);\n    std::string vowels_reverse11 =\
    \ vowels.substr(0, vowels.size() - 11);\n    std::string vowels_reverse12 = vowels.substr(0,\
    \ vowels.size() - 12);\n    std::string vowels_reverse13 = vowels.substr(0, vowels.size()\
    \ - 13);\n    std::string vowels_reverse14 = vowels.substr(0, vowels.size() -\
    \ 14);\n    std::string vowels_reverse15 = vowels.substr(0, vowels.size() - 15);\n\
    \    std::string vowels_reverse16 = vowels.substr(0, vowels.size() - 16);\n  \
    \  std::string vowels_reverse17 = vowels.substr(0, vowels.size() - 17);\n    std::string\
    \ vowels_reverse18 = vowels.substr(0, vowels.size() - 18);\n    std::string vowels_reverse19\
    \ = vowels.substr(0, vowels.size() - 19);\n    std::string vowels_reverse20 =\
    \ vowels.substr(0, vowels.size() - 20);\n    std::string vowels_reverse21 = vowels.substr(0,\
    \ vowels.size() - 21);\n    std::string vowels_reverse22 = vowels.substr(0, vowels.size()\
    \ - 22);\n    std::string vowels_reverse23 = vowels.substr(0, vowels.size() -\
    \ 23);\n    std::string vowels_reverse24 = vowels.substr(0, vowels.size() - 24);\n\
    \    std::string vowels_reverse25 = vowels.substr(0, vowels.size() - 25);\n  \
    \  std::string vowels_reverse26 = vowels.substr(0, vowels.size() - 26);\n    std::string\
    \ vowels_reverse27 = vowels.substr(0, vowels.size() - 27);\n    std::string vowels_reverse28\
    \ = vowels.substr(0, vowels.size() - 28);\n    std::string vowels_reverse29 =\
    \ vowels.substr(0, vowels.size() - 29);\n    std::string vowels_reverse30 = vowels.substr(0,\
    \ vowels.size() - 30);\n    std::string vowels_reverse31 = vowels.substr(0, vowels.size()\
    \ - 31);\n}\nint main() {\n    auto candidate = get_closest_vowel;\n    assert(candidate((\"\
    yogurt\")) == (\"u\"));\n    assert(candidate((\"full\")) == (\"u\"));\n    assert(candidate((\"\
    easy\")) == (\"\"));\n    assert(candidate((\"eAsy\")) == (\"\"));\n    assert(candidate((\"\
    ali\")) == (\"\"));\n    assert(candidate((\"bad\")) == (\"a\"));\n    assert(candidate((\"\
    most\")) == (\"o\"));\n    assert(candidate((\"ab\")) == (\"\"));\n    assert(candidate((\"\
    ba\")) == (\"\"));\n    assert(candidate((\"quick\")) == (\"\"));\n    assert(candidate((\"\
    anime\")) == (\"i\"));\n    assert(candidate((\"Asia\")) == (\"\"));\n    assert(candidate((\"\
    Above\")) == (\"o\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// get_closest_vowel(\"yogurt\") ==> \"u\"\
    \n// get_closest_vowel(\"FULL\") ==> \"U\"\n// get_closest_vowel(\"quick\") ==>\
    \ \"\"\n// get_closest_vowel(\"ab\") ==> \"\"\nstd::string get_closest_vowel(std::string\
    \ word) {\n    std::string vowels = \"AEIOUaeiou\";\n    std::string vowels_reverse\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_reverse = \"AEIOUaeiou\";\n\
    \    std::string vowels_reverse_reverse_reverse = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse_reverse_reverse_reverse = \"AEIOUaeiou\";\n    std::string vowels_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_reverse\n}\nint main() {\n\
    \    auto candidate = get_closest_vowel;\n    assert(candidate((\"yogurt\")) ==\
    \ (\"u\"));\n    assert(candidate((\"full\")) == (\"u\"));\n    assert(candidate((\"\
    easy\")) == (\"\"));\n    assert(candidate((\"eAsy\")) == (\"\"));\n    assert(candidate((\"\
    ali\")) == (\"\"));\n    assert(candidate((\"bad\")) == (\"a\"));\n    assert(candidate((\"\
    most\")) == (\"o\"));\n    assert(candidate((\"ab\")) == (\"\"));\n    assert(candidate((\"\
    ba\")) == (\"\"));\n    assert(candidate((\"quick\")) == (\"\"));\n    assert(candidate((\"\
    anime\")) == (\"i\"));\n    assert(candidate((\"Asia\")) == (\"\"));\n    assert(candidate((\"\
    Above\")) == (\"o\"));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp14dato9n.cpp: In function \u2018std::string get_closest_vowel(std::string)\u2019\
    :\n/tmp/tmp14dato9n.cpp:22:17: error: redeclaration of \u2018std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse\u2019\
    \n   22 |     std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmp14dato9n.cpp:21:17: note: \u2018std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse\u2019\
    \ previously declared here\n   21 |     std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmp14dato9n.cpp:23:17: error: redeclaration of \u2018std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse\u2019\
    \n   23 |     std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmp14dato9n.cpp:21:17: note: \u2018std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse\u2019\
    \ previously declared here\n   21 |     std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmp14dato9n.cpp:25:17: error: redeclaration of \u2018std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\u2019\
    \n   25 |     std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmp14dato9n.cpp:24:17: note: \u2018std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\u2019\
    \ previously declared here\n   24 |     std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmp14dato9n.cpp:26:17: error: redeclaration of \u2018std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\u2019\
    \n   26 |     std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmp14dato9n.cpp:24:17: note: \u2018std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\u2019\
    \ previously declared here\n   24 |     std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmp14dato9n.cpp:27:17: error: redeclaration of \u2018std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\u2019\
    \n   27 |     std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmp14dato9n.cpp:24:17: note: \u2018std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\u2019\
    \ previously declared here\n   24 |     std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmp14dato9n.cpp:29:17: error: redeclaration of \u2018std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\u2019\
    \n   29 |     std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmp14dato9n.cpp:28:17: note: \u2018std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\u2019\
    \ previously declared here\n   28 |     std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmp14dato9n.cpp:30:17: error: redeclaration of \u2018std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\u2019\
    \n   30 |     std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmp14dato9n.cpp:28:17: note: \u2018std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\u2019\
    \ previously declared here\n   28 |     std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmp14dato9n.cpp:31:17: error: redeclaration of \u2018std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\u2019\
    \n   31 |     std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmp14dato9n.cpp:28:17: note: \u2018std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\u2019\
    \ previously declared here\n   28 |     std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmp14dato9n.cpp:32:17: error: redeclaration of \u2018std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\u2019\
    \n   32 |     std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmp14dato9n.cpp:28:17: note: \u2018std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\u2019\
    \ previously declared here\n   28 |     std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmp14dato9n.cpp:33:17: error: redeclaration of \u2018std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\u2019\
    \n   33 |     std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmp14dato9n.cpp:28:17: note: \u2018std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\u2019\
    \ previously declared here\n   28 |     std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmp14dato9n.cpp:34:17: error: redeclaration of \u2018std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\u2019\
    \n   34 |     std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmp14dato9n.cpp:28:17: note: \u2018std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\u2019\
    \ previously declared here\n   28 |     std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmp14dato9n.cpp:36:1: error: expected initializer before \u2018}\u2019 token\n\
    \   36 | }\n      | ^\n/tmp/tmp14dato9n.cpp:36:1: warning: no return statement\
    \ in function returning non-void [-Wreturn-type]\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// get_closest_vowel(\"yogurt\") ==> \"u\"\
    \n// get_closest_vowel(\"FULL\") ==> \"U\"\n// get_closest_vowel(\"quick\") ==>\
    \ \"\"\n// get_closest_vowel(\"ab\") ==> \"\"\nstd::string get_closest_vowel(std::string\
    \ word) {\n    std::string vowels = \"AEIOUaeiou\";\n    std::string vowels_reversed\
    \ = vowels.substr(0, vowels.size() - 1) + vowels.substr(1, vowels.size());\n \
    \   std::string vowels_reversed_upper = vowels_reversed.toUpper();\n    std::string\
    \ vowels_reversed_lower = vowels_reversed.toLower();\n    std::string vowels_reversed_upper_reversed\
    \ = vowels_reversed_upper.substr(0, vowels_reversed_upper.size() - 1) + vowels_reversed_upper.substr(1,\
    \ vowels_reversed_upper.size());\n    std::string vowels_reversed_lower_reversed\
    \ = vowels_reversed_lower.substr(0, vowels_reversed_lower.size() - 1) + vowels_reversed_lower.substr(1,\
    \ vowels_reversed_lower.size());\n    std::string vowels_reversed_upper_reversed_reversed\
    \ = vowels_reversed_upper_reversed.substr(0, vowels_reversed_upper_reversed.size()\
    \ - 1) + vowels_reversed_upper_reversed.substr(1, vowels_reversed_upper_reversed.size());\n\
    \    std::string vowels_reversed_lower_reversed_reversed = vowels_reversed_lower_reversed.substr(0,\
    \ vowels_reversed_lower_reversed.size() - 1) + vowels_reversed_lower_reversed.substr(1,\
    \ vowels_reversed_lower_reversed.size());\n    std::string vowels_reversed_upper_reversed_reversed_reversed\
    \ = vowels_reversed_upper_reversed_reversed.substr(0, vowels_reversed_upper_reversed_reversed.size()\
    \ - 1) + vowels_reversed_upper_reversed_reversed.substr(1, vowels_reversed_upper_reversed_reversed.size());\n\
    \    std::string vowels_reversed_lower_reversed_reversed_reversed = vowels_reversed_lower_reversed_reversed.substr(0,\
    \ vowels_reversed_lower_reversed_reversed.size() - 1) + vowels_reversed_lower_reversed_reversed.substr(1,\
    \ vowels_reversed_lower_reversed_reversed.size());\n    std::string vowels_reversed_upper_reversed_reversed_reversed_reversed\
    \ = vowels_reversed_upper_reversed_reversed_reversed.substr(0, vowels_reversed_upper_reversed_reversed_reversed.size()\
    \ - 1) + vowels_reversed_upper_reversed_reversed_reversed.substr(1, vowels_reversed_upper_reversed_reversed_reversed.size());\n\
    \    std::string vowels_reversed_lower_reversed_reversed_reversed_reversed = vowels_reversed_lower_reversed_reversed_reversed.substr(0,\
    \ vowels_reversed_lower_reversed_reversed_reversed.size() - 1) + vowels_reversed_lower_reversed_reversed_reversed.substr(1,\
    \ vowels_reversed_lower_reversed_\n}\nint main() {\n    auto candidate = get_closest_vowel;\n\
    \    assert(candidate((\"yogurt\")) == (\"u\"));\n    assert(candidate((\"full\"\
    )) == (\"u\"));\n    assert(candidate((\"easy\")) == (\"\"));\n    assert(candidate((\"\
    eAsy\")) == (\"\"));\n    assert(candidate((\"ali\")) == (\"\"));\n    assert(candidate((\"\
    bad\")) == (\"a\"));\n    assert(candidate((\"most\")) == (\"o\"));\n    assert(candidate((\"\
    ab\")) == (\"\"));\n    assert(candidate((\"ba\")) == (\"\"));\n    assert(candidate((\"\
    quick\")) == (\"\"));\n    assert(candidate((\"anime\")) == (\"i\"));\n    assert(candidate((\"\
    Asia\")) == (\"\"));\n    assert(candidate((\"Above\")) == (\"o\"));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpk41d6mkx.cpp: In function \u2018std::string get_closest_vowel(std::string)\u2019\
    :\n/tmp/tmpk41d6mkx.cpp:16:57: error: \u2018std::string\u2019 {aka \u2018class\
    \ std::__cxx11::basic_string<char>\u2019} has no member named \u2018toUpper\u2019\
    \n   16 |     std::string vowels_reversed_upper = vowels_reversed.toUpper();\n\
    \      |                                                         ^~~~~~~\n/tmp/tmpk41d6mkx.cpp:17:57:\
    \ error: \u2018std::string\u2019 {aka \u2018class std::__cxx11::basic_string<char>\u2019\
    } has no member named \u2018toLower\u2019\n   17 |     std::string vowels_reversed_lower\
    \ = vowels_reversed.toLower();\n      |                                      \
    \                   ^~~~~~~\n/tmp/tmpk41d6mkx.cpp:25:258: error: \u2018vowels_reversed_lower_reversed_\u2019\
    \ was not declared in this scope; did you mean \u2018vowels_reversed_lower_reversed\u2019\
    ?\n   25 |     std::string vowels_reversed_lower_reversed_reversed_reversed_reversed\
    \ = vowels_reversed_lower_reversed_reversed_reversed.substr(0, vowels_reversed_lower_reversed_reversed_reversed.size()\
    \ - 1) + vowels_reversed_lower_reversed_reversed_reversed.substr(1, vowels_reversed_lower_reversed_\n\
    \      |                                                                     \
    \                                                                            \
    \                                                                            \
    \                                     ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n      |\
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                              vowels_reversed_lower_reversed\n/tmp/tmpk41d6mkx.cpp:26:1:\
    \ error: expected \u2018,\u2019 or \u2018;\u2019 before \u2018}\u2019 token\n\
    \   26 | }\n      | ^\n/tmp/tmpk41d6mkx.cpp:26:1: warning: no return statement\
    \ in function returning non-void [-Wreturn-type]\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// get_closest_vowel(\"yogurt\") ==> \"u\"\
    \n// get_closest_vowel(\"FULL\") ==> \"U\"\n// get_closest_vowel(\"quick\") ==>\
    \ \"\"\n// get_closest_vowel(\"ab\") ==> \"\"\nstd::string get_closest_vowel(std::string\
    \ word) {\n    std::string vowels = \"AEIOUaeiou\";\n    std::string vowels_reverse\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse2 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse3 = \"AEIOUaeiou\";\n    std::string vowels_reverse4 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse5 = \"AEIOUaeiou\";\n    std::string vowels_reverse6\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse7 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse8 = \"AEIOUaeiou\";\n    std::string vowels_reverse9 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse10 = \"AEIOUaeiou\";\n    std::string vowels_reverse11\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse12 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse13 = \"AEIOUaeiou\";\n    std::string vowels_reverse14 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse15 = \"AEIOUaeiou\";\n    std::string vowels_reverse16\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse17 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse18 = \"AEIOUaeiou\";\n    std::string vowels_reverse19 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse20 = \"AEIOUaeiou\";\n    std::string vowels_reverse21\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse22 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse23 = \"AEIOUaeiou\";\n    std::string vowels_reverse24 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse25 = \"AEIOUaeiou\";\n    std::string vowels_reverse26\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse27 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse28 = \"AEIOUaeiou\";\n    std::string vowels_reverse29 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse30 = \"AEIOUaeiou\";\n    std::string vowels_reverse31\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse32 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse33 = \"AEIOUaeiou\";\n    std::string vowels_reverse34 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse35 = \"AEIOUaeiou\";\n    std::string vowels_reverse36\
    \ = \"AEIOU\n}\nint main() {\n    auto candidate = get_closest_vowel;\n    assert(candidate((\"\
    yogurt\")) == (\"u\"));\n    assert(candidate((\"full\")) == (\"u\"));\n    assert(candidate((\"\
    easy\")) == (\"\"));\n    assert(candidate((\"eAsy\")) == (\"\"));\n    assert(candidate((\"\
    ali\")) == (\"\"));\n    assert(candidate((\"bad\")) == (\"a\"));\n    assert(candidate((\"\
    most\")) == (\"o\"));\n    assert(candidate((\"ab\")) == (\"\"));\n    assert(candidate((\"\
    ba\")) == (\"\"));\n    assert(candidate((\"quick\")) == (\"\"));\n    assert(candidate((\"\
    anime\")) == (\"i\"));\n    assert(candidate((\"Asia\")) == (\"\"));\n    assert(candidate((\"\
    Above\")) == (\"o\"));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpvd8ghgkv.cpp:50:36: warning: missing terminating \" character\n\
    \   50 |     std::string vowels_reverse36 = \"AEIOU\n      |                 \
    \                   ^\n/tmp/tmpvd8ghgkv.cpp:50:36: error: missing terminating\
    \ \" character\n   50 |     std::string vowels_reverse36 = \"AEIOU\n      |  \
    \                                  ^~~~~~\n/tmp/tmpvd8ghgkv.cpp: In function \u2018\
    std::string get_closest_vowel(std::string)\u2019:\n/tmp/tmpvd8ghgkv.cpp:51:1:\
    \ error: expected primary-expression before \u2018}\u2019 token\n   51 | }\n \
    \     | ^\n/tmp/tmpvd8ghgkv.cpp:51:1: error: expected \u2018,\u2019 or \u2018\
    ;\u2019 before \u2018}\u2019 token\n/tmp/tmpvd8ghgkv.cpp:51:1: warning: no return\
    \ statement in function returning non-void [-Wreturn-type]\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// get_closest_vowel(\"yogurt\") ==> \"u\"\
    \n// get_closest_vowel(\"FULL\") ==> \"U\"\n// get_closest_vowel(\"quick\") ==>\
    \ \"\"\n// get_closest_vowel(\"ab\") ==> \"\"\nstd::string get_closest_vowel(std::string\
    \ word) {\n    std::string vowels = \"AEIOUaeiou\";\n    std::string vowels_end\
    \ = \"AEIOUaeiou\";\n    std::string vowels_start = \"AEIOUaeiou\";\n    std::string\
    \ vowels_middle = \"AEIOUaeiou\";\n    std::string vowels_start2 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_end2 = \"AEIOUaeiou\";\n    std::string vowels_middle2\
    \ = \"AEIOUaeiou\";\n    std::string vowels_start3 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_end3 = \"AEIOUaeiou\";\n    std::string vowels_middle3 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_start4 = \"AEIOUaeiou\";\n    std::string vowels_end4\
    \ = \"AEIOUaeiou\";\n    std::string vowels_middle4 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_start5 = \"AEIOUaeiou\";\n    std::string vowels_end5 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_middle5 = \"AEIOUaeiou\";\n    std::string vowels_start6\
    \ = \"AEIOUaeiou\";\n    std::string vowels_end6 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_middle6 = \"AEIOUaeiou\";\n    std::string vowels_start7 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_end7 = \"AEIOUaeiou\";\n    std::string vowels_middle7\
    \ = \"AEIOUaeiou\";\n    std::string vowels_start8 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_end8 = \"AEIOUaeiou\";\n    std::string vowels_middle8 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_start9 = \"AEIOUaeiou\";\n    std::string vowels_end9\
    \ = \"AEIOUaeiou\";\n    std::string vowels_middle9 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_start10 = \"AEIOUaeiou\";\n    std::string vowels_end10 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_middle10 = \"AEIOUaeiou\";\n    std::string vowels_start11\
    \ = \"AEIOUaeiou\";\n    std::string vowels_end11 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_middle11 = \"AEIOUaeiou\";\n    std::string vowels_start12 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_end12 = \"AEIOUaeiou\";\n    std::string vowels_middle12\
    \ = \"AEIOUaeiou\";\n\n}\nint main() {\n    auto candidate = get_closest_vowel;\n\
    \    assert(candidate((\"yogurt\")) == (\"u\"));\n    assert(candidate((\"full\"\
    )) == (\"u\"));\n    assert(candidate((\"easy\")) == (\"\"));\n    assert(candidate((\"\
    eAsy\")) == (\"\"));\n    assert(candidate((\"ali\")) == (\"\"));\n    assert(candidate((\"\
    bad\")) == (\"a\"));\n    assert(candidate((\"most\")) == (\"o\"));\n    assert(candidate((\"\
    ab\")) == (\"\"));\n    assert(candidate((\"ba\")) == (\"\"));\n    assert(candidate((\"\
    quick\")) == (\"\"));\n    assert(candidate((\"anime\")) == (\"i\"));\n    assert(candidate((\"\
    Asia\")) == (\"\"));\n    assert(candidate((\"Above\")) == (\"o\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// get_closest_vowel(\"yogurt\") ==> \"u\"\
    \n// get_closest_vowel(\"FULL\") ==> \"U\"\n// get_closest_vowel(\"quick\") ==>\
    \ \"\"\n// get_closest_vowel(\"ab\") ==> \"\"\nstd::string get_closest_vowel(std::string\
    \ word) {\n    std::string vowels = \"AEIOUaeiou\";\n    std::string vowels_reverse\
    \ = vowels;\n    std::reverse(vowels_reverse.begin(), vowels_reverse.end());\n\
    \    std::string vowels_reverse2 = vowels;\n    std::reverse(vowels_reverse2.begin(),\
    \ vowels_reverse2.end());\n    std::string vowels_reverse3 = vowels;\n    std::reverse(vowels_reverse3.begin(),\
    \ vowels_reverse3.end());\n    std::string vowels_reverse4 = vowels;\n    std::reverse(vowels_reverse4.begin(),\
    \ vowels_reverse4.end());\n    std::string vowels_reverse5 = vowels;\n    std::reverse(vowels_reverse5.begin(),\
    \ vowels_reverse5.end());\n    std::string vowels_reverse6 = vowels;\n    std::reverse(vowels_reverse6.begin(),\
    \ vowels_reverse6.end());\n    std::string vowels_reverse7 = vowels;\n    std::reverse(vowels_reverse7.begin(),\
    \ vowels_reverse7.end());\n    std::string vowels_reverse8 = vowels;\n    std::reverse(vowels_reverse8.begin(),\
    \ vowels_reverse8.end());\n    std::string vowels_reverse9 = vowels;\n    std::reverse(vowels_reverse9.begin(),\
    \ vowels_reverse9.end());\n    std::string vowels_reverse10 = vowels;\n    std::reverse(vowels_reverse10.begin(),\
    \ vowels_reverse10.end());\n    std::string vowels_reverse11 = vowels;\n    std::reverse(vowels_reverse11.begin(),\
    \ vowels_reverse11.end());\n    std::string vowels_reverse12 = vowels;\n    std::reverse(vowels_reverse12.begin(),\
    \ vowels_reverse12.end());\n    std::string vowels_reverse13 = vowels;\n    std::reverse(vowels_reverse13.begin(),\
    \ vowels_reverse13.end());\n    std::string vowels_reverse14 = vowels;\n    std::reverse(vowels_reverse14.begin(),\
    \ vowels_reverse14.end());\n    std::string vowels_reverse15 = vowels;\n    std::reverse(vowels_reverse15.begin(),\
    \ vowels_reverse15.end());\n    std::string vowels_reverse16 = vowels;\n    std::reverse(vowels_reverse16.begin(),\
    \ vowels_reverse16.end());\n    std::string vowels_reverse17 = vowels;\n    std::reverse(vowels_reverse17.begin(),\
    \ vowels_reverse17.end());\n    std::string vowels_reverse18 = vowels;\n    std::reverse(vowels_reverse18.begin(),\
    \ vowels_reverse18.end());\n    std::string vowels_reverse19 = vowels;\n    std::reverse(vowels_reverse19.begin(),\
    \ vowels_reverse19.end());\n    std::string vowels_reverse20 = vowels;\n    std::reverse(vowels_reverse20.begin(),\
    \ vowels_reverse20.end());\n    std::string vowels_reverse21 = vowels;\n    std::reverse(vowel\n\
    }\nint main() {\n    auto candidate = get_closest_vowel;\n    assert(candidate((\"\
    yogurt\")) == (\"u\"));\n    assert(candidate((\"full\")) == (\"u\"));\n    assert(candidate((\"\
    easy\")) == (\"\"));\n    assert(candidate((\"eAsy\")) == (\"\"));\n    assert(candidate((\"\
    ali\")) == (\"\"));\n    assert(candidate((\"bad\")) == (\"a\"));\n    assert(candidate((\"\
    most\")) == (\"o\"));\n    assert(candidate((\"ab\")) == (\"\"));\n    assert(candidate((\"\
    ba\")) == (\"\"));\n    assert(candidate((\"quick\")) == (\"\"));\n    assert(candidate((\"\
    anime\")) == (\"i\"));\n    assert(candidate((\"Asia\")) == (\"\"));\n    assert(candidate((\"\
    Above\")) == (\"o\"));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpwemnp4k4.cpp: In function \u2018std::string get_closest_vowel(std::string)\u2019\
    :\n/tmp/tmpwemnp4k4.cpp:56:18: error: \u2018vowel\u2019 was not declared in this\
    \ scope; did you mean \u2018vowels\u2019?\n   56 |     std::reverse(vowel\n  \
    \    |                  ^~~~~\n      |                  vowels\n/tmp/tmpwemnp4k4.cpp:57:1:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n\
    \   57 | }\n      | ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// get_closest_vowel(\"yogurt\") ==> \"u\"\
    \n// get_closest_vowel(\"FULL\") ==> \"U\"\n// get_closest_vowel(\"quick\") ==>\
    \ \"\"\n// get_closest_vowel(\"ab\") ==> \"\"\nstd::string get_closest_vowel(std::string\
    \ word) {\n    std::string vowels = \"AEIOUaeiou\";\n    std::string vowels_reverse\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_reverse = \"\";\n    std::string\
    \ vowels_reverse_back = \"\";\n    std::string vowels_reverse_back_reverse = \"\
    \";\n    std::string vowels_reverse_back_reverse_back = \"\";\n    std::string\
    \ vowels_reverse_back_reverse_back_reverse = \"\";\n    std::string vowels_reverse_back_reverse_back_reverse_back\
    \ = \"\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse\
    \ = \"\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back\
    \ = \"\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse\
    \ = \"\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\
    \ = \"\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse\
    \ = \"\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\
    \ = \"\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\
    \ = \"\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse\
    \ = \"\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\
    \ = \"\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse\
    \ = \"\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\
    \ = \"\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\
    \ = \"\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse\
    \ = \"\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\
    \ = \"\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\
    \ = \"\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\
    \ = \"\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_re\n\
    }\nint main() {\n    auto candidate = get_closest_vowel;\n    assert(candidate((\"\
    yogurt\")) == (\"u\"));\n    assert(candidate((\"full\")) == (\"u\"));\n    assert(candidate((\"\
    easy\")) == (\"\"));\n    assert(candidate((\"eAsy\")) == (\"\"));\n    assert(candidate((\"\
    ali\")) == (\"\"));\n    assert(candidate((\"bad\")) == (\"a\"));\n    assert(candidate((\"\
    most\")) == (\"o\"));\n    assert(candidate((\"ab\")) == (\"\"));\n    assert(candidate((\"\
    ba\")) == (\"\"));\n    assert(candidate((\"quick\")) == (\"\"));\n    assert(candidate((\"\
    anime\")) == (\"i\"));\n    assert(candidate((\"Asia\")) == (\"\"));\n    assert(candidate((\"\
    Above\")) == (\"o\"));\n}\n"
  stdout: ''
  stderr: "/tmp/tmph9_ewx3h.cpp: In function \u2018std::string get_closest_vowel(std::string)\u2019\
    :\n/tmp/tmph9_ewx3h.cpp:28:17: error: redeclaration of \u2018std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\u2019\
    \n   28 |     std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\
    \ = \"\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmph9_ewx3h.cpp:27:17: note: \u2018std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\u2019\
    \ previously declared here\n   27 |     std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\
    \ = \"\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmph9_ewx3h.cpp:33:17: error: redeclaration of \u2018std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\u2019\
    \n   33 |     std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\
    \ = \"\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmph9_ewx3h.cpp:32:17: note: \u2018std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\u2019\
    \ previously declared here\n   32 |     std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\
    \ = \"\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmph9_ewx3h.cpp:36:17: error: redeclaration of \u2018std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\u2019\
    \n   36 |     std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\
    \ = \"\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmph9_ewx3h.cpp:35:17: note: \u2018std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\u2019\
    \ previously declared here\n   35 |     std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\
    \ = \"\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmph9_ewx3h.cpp:37:17: error: redeclaration of \u2018std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\u2019\
    \n   37 |     std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\
    \ = \"\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmph9_ewx3h.cpp:35:17: note: \u2018std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\u2019\
    \ previously declared here\n   35 |     std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\
    \ = \"\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmph9_ewx3h.cpp:39:1: error: expected initializer before \u2018}\u2019 token\n\
    \   39 | }\n      | ^\n/tmp/tmph9_ewx3h.cpp:39:1: warning: no return statement\
    \ in function returning non-void [-Wreturn-type]\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// get_closest_vowel(\"yogurt\") ==> \"u\"\
    \n// get_closest_vowel(\"FULL\") ==> \"U\"\n// get_closest_vowel(\"quick\") ==>\
    \ \"\"\n// get_closest_vowel(\"ab\") ==> \"\"\nstd::string get_closest_vowel(std::string\
    \ word) {\n    std::string vowels = \"AEIOUaeiou\";\n    std::string vowels_reverse\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse2 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse3 = \"AEIOUaeiou\";\n    std::string vowels_reverse4 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse5 = \"AEIOUaeiou\";\n    std::string vowels_reverse6\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse7 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse8 = \"AEIOUaeiou\";\n    std::string vowels_reverse9 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse10 = \"AEIOUaeiou\";\n    std::string vowels_reverse11\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse12 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse13 = \"AEIOUaeiou\";\n    std::string vowels_reverse14 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse15 = \"AEIOUaeiou\";\n    std::string vowels_reverse16\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse17 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse18 = \"AEIOUaeiou\";\n    std::string vowels_reverse19 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse20 = \"AEIOUaeiou\";\n    std::string vowels_reverse21\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse22 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse23 = \"AEIOUaeiou\";\n    std::string vowels_reverse24 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse25 = \"AEIOUaeiou\";\n    std::string vowels_reverse26\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse27 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse28 = \"AEIOUaeiou\";\n    std::string vowels_reverse29 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse30 = \"AEIOUaeiou\";\n    std::string vowels_reverse31\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse32 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse33 = \"AEIOUaeiou\";\n    std::string vowels_reverse34 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse35 = \"AEIOUaeiou\";\n    std::string vowels_reverse36\
    \ = \"AEIOU\n}\nint main() {\n    auto candidate = get_closest_vowel;\n    assert(candidate((\"\
    yogurt\")) == (\"u\"));\n    assert(candidate((\"full\")) == (\"u\"));\n    assert(candidate((\"\
    easy\")) == (\"\"));\n    assert(candidate((\"eAsy\")) == (\"\"));\n    assert(candidate((\"\
    ali\")) == (\"\"));\n    assert(candidate((\"bad\")) == (\"a\"));\n    assert(candidate((\"\
    most\")) == (\"o\"));\n    assert(candidate((\"ab\")) == (\"\"));\n    assert(candidate((\"\
    ba\")) == (\"\"));\n    assert(candidate((\"quick\")) == (\"\"));\n    assert(candidate((\"\
    anime\")) == (\"i\"));\n    assert(candidate((\"Asia\")) == (\"\"));\n    assert(candidate((\"\
    Above\")) == (\"o\"));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp4_9nbb5q.cpp:50:36: warning: missing terminating \" character\n\
    \   50 |     std::string vowels_reverse36 = \"AEIOU\n      |                 \
    \                   ^\n/tmp/tmp4_9nbb5q.cpp:50:36: error: missing terminating\
    \ \" character\n   50 |     std::string vowels_reverse36 = \"AEIOU\n      |  \
    \                                  ^~~~~~\n/tmp/tmp4_9nbb5q.cpp: In function \u2018\
    std::string get_closest_vowel(std::string)\u2019:\n/tmp/tmp4_9nbb5q.cpp:51:1:\
    \ error: expected primary-expression before \u2018}\u2019 token\n   51 | }\n \
    \     | ^\n/tmp/tmp4_9nbb5q.cpp:51:1: error: expected \u2018,\u2019 or \u2018\
    ;\u2019 before \u2018}\u2019 token\n/tmp/tmp4_9nbb5q.cpp:51:1: warning: no return\
    \ statement in function returning non-void [-Wreturn-type]\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// get_closest_vowel(\"yogurt\") ==> \"u\"\
    \n// get_closest_vowel(\"FULL\") ==> \"U\"\n// get_closest_vowel(\"quick\") ==>\
    \ \"\"\n// get_closest_vowel(\"ab\") ==> \"\"\nstd::string get_closest_vowel(std::string\
    \ word) {\n    std::string vowels = \"AEIOUaeiou\";\n    std::string vowels_reverse\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_reverse = \"AEIOUaeiou\";\n\
    \    std::string vowels_reverse_back = \"AEIOUaeiou\";\n    std::string vowels_reverse_back_reverse\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_back_reverse_back = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse_back_reverse_back_reverse = \"AEIOUaeiou\";\n\
    \    std::string vowels_reverse_back_reverse_back_reverse_back = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse = \"\
    AEIOUaeiou\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\n\
    }\nint main() {\n    auto candidate = get_closest_vowel;\n    assert(candidate((\"\
    yogurt\")) == (\"u\"));\n    assert(candidate((\"full\")) == (\"u\"));\n    assert(candidate((\"\
    easy\")) == (\"\"));\n    assert(candidate((\"eAsy\")) == (\"\"));\n    assert(candidate((\"\
    ali\")) == (\"\"));\n    assert(candidate((\"bad\")) == (\"a\"));\n    assert(candidate((\"\
    most\")) == (\"o\"));\n    assert(candidate((\"ab\")) == (\"\"));\n    assert(candidate((\"\
    ba\")) == (\"\"));\n    assert(candidate((\"quick\")) == (\"\"));\n    assert(candidate((\"\
    anime\")) == (\"i\"));\n    assert(candidate((\"Asia\")) == (\"\"));\n    assert(candidate((\"\
    Above\")) == (\"o\"));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp7wugm0a7.cpp: In function \u2018std::string get_closest_vowel(std::string)\u2019\
    :\n/tmp/tmp7wugm0a7.cpp:32:17: error: redeclaration of \u2018std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\u2019\
    \n   32 |     std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\
    \ = \"AEIOUaeiou\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmp7wugm0a7.cpp:31:17: note: \u2018std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\u2019\
    \ previously declared here\n   31 |     std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\
    \ = \"AEIOUaeiou\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmp7wugm0a7.cpp:35:1: error: expected initializer before \u2018}\u2019 token\n\
    \   35 | }\n      | ^\n/tmp/tmp7wugm0a7.cpp:35:1: warning: no return statement\
    \ in function returning non-void [-Wreturn-type]\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// get_closest_vowel(\"yogurt\") ==> \"u\"\
    \n// get_closest_vowel(\"FULL\") ==> \"U\"\n// get_closest_vowel(\"quick\") ==>\
    \ \"\"\n// get_closest_vowel(\"ab\") ==> \"\"\nstd::string get_closest_vowel(std::string\
    \ word) {\n    std::string vowels = \"AEIOUaeiou\";\n    std::string vowels_reverse\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_reverse = \"AEIOUaeiou\";\n\
    \    std::string vowels_reverse_reverse_reverse = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse_reverse_reverse_reverse = \"AEIOUaeiou\";\n    std::string vowels_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_reverse\n}\nint main() {\n\
    \    auto candidate = get_closest_vowel;\n    assert(candidate((\"yogurt\")) ==\
    \ (\"u\"));\n    assert(candidate((\"full\")) == (\"u\"));\n    assert(candidate((\"\
    easy\")) == (\"\"));\n    assert(candidate((\"eAsy\")) == (\"\"));\n    assert(candidate((\"\
    ali\")) == (\"\"));\n    assert(candidate((\"bad\")) == (\"a\"));\n    assert(candidate((\"\
    most\")) == (\"o\"));\n    assert(candidate((\"ab\")) == (\"\"));\n    assert(candidate((\"\
    ba\")) == (\"\"));\n    assert(candidate((\"quick\")) == (\"\"));\n    assert(candidate((\"\
    anime\")) == (\"i\"));\n    assert(candidate((\"Asia\")) == (\"\"));\n    assert(candidate((\"\
    Above\")) == (\"o\"));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp2dat8ewe.cpp: In function \u2018std::string get_closest_vowel(std::string)\u2019\
    :\n/tmp/tmp2dat8ewe.cpp:22:17: error: redeclaration of \u2018std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse\u2019\
    \n   22 |     std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmp2dat8ewe.cpp:21:17: note: \u2018std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse\u2019\
    \ previously declared here\n   21 |     std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmp2dat8ewe.cpp:23:17: error: redeclaration of \u2018std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse\u2019\
    \n   23 |     std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmp2dat8ewe.cpp:21:17: note: \u2018std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse\u2019\
    \ previously declared here\n   21 |     std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmp2dat8ewe.cpp:25:17: error: redeclaration of \u2018std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\u2019\
    \n   25 |     std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmp2dat8ewe.cpp:24:17: note: \u2018std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\u2019\
    \ previously declared here\n   24 |     std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmp2dat8ewe.cpp:26:17: error: redeclaration of \u2018std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\u2019\
    \n   26 |     std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmp2dat8ewe.cpp:24:17: note: \u2018std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\u2019\
    \ previously declared here\n   24 |     std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmp2dat8ewe.cpp:27:17: error: redeclaration of \u2018std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\u2019\
    \n   27 |     std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmp2dat8ewe.cpp:24:17: note: \u2018std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\u2019\
    \ previously declared here\n   24 |     std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmp2dat8ewe.cpp:29:17: error: redeclaration of \u2018std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\u2019\
    \n   29 |     std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmp2dat8ewe.cpp:28:17: note: \u2018std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\u2019\
    \ previously declared here\n   28 |     std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmp2dat8ewe.cpp:30:17: error: redeclaration of \u2018std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\u2019\
    \n   30 |     std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmp2dat8ewe.cpp:28:17: note: \u2018std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\u2019\
    \ previously declared here\n   28 |     std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmp2dat8ewe.cpp:31:17: error: redeclaration of \u2018std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\u2019\
    \n   31 |     std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmp2dat8ewe.cpp:28:17: note: \u2018std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\u2019\
    \ previously declared here\n   28 |     std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmp2dat8ewe.cpp:32:17: error: redeclaration of \u2018std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\u2019\
    \n   32 |     std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmp2dat8ewe.cpp:28:17: note: \u2018std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\u2019\
    \ previously declared here\n   28 |     std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmp2dat8ewe.cpp:33:17: error: redeclaration of \u2018std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\u2019\
    \n   33 |     std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmp2dat8ewe.cpp:28:17: note: \u2018std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\u2019\
    \ previously declared here\n   28 |     std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmp2dat8ewe.cpp:34:17: error: redeclaration of \u2018std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\u2019\
    \n   34 |     std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmp2dat8ewe.cpp:28:17: note: \u2018std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\u2019\
    \ previously declared here\n   28 |     std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmp2dat8ewe.cpp:36:1: error: expected initializer before \u2018}\u2019 token\n\
    \   36 | }\n      | ^\n/tmp/tmp2dat8ewe.cpp:36:1: warning: no return statement\
    \ in function returning non-void [-Wreturn-type]\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// get_closest_vowel(\"yogurt\") ==> \"u\"\
    \n// get_closest_vowel(\"FULL\") ==> \"U\"\n// get_closest_vowel(\"quick\") ==>\
    \ \"\"\n// get_closest_vowel(\"ab\") ==> \"\"\nstd::string get_closest_vowel(std::string\
    \ word) {\n    std::string vowels = \"AEIOUaeiou\";\n    std::string vowels_reversed\
    \ = vowels.substr(0, vowels.size() - 1) + vowels.substr(1, vowels.size());\n \
    \   std::string vowels_reversed_upper = vowels_reversed.toUpper();\n    std::string\
    \ vowels_reversed_lower = vowels_reversed.toLower();\n    std::string vowels_reversed_upper_reversed\
    \ = vowels_reversed_upper.substr(0, vowels_reversed_upper.size() - 1) + vowels_reversed_upper.substr(1,\
    \ vowels_reversed_upper.size());\n    std::string vowels_reversed_lower_reversed\
    \ = vowels_reversed_lower.substr(0, vowels_reversed_lower.size() - 1) + vowels_reversed_lower.substr(1,\
    \ vowels_reversed_lower.size());\n    std::string vowels_reversed_upper_reversed_reversed\
    \ = vowels_reversed_upper_reversed.substr(0, vowels_reversed_upper_reversed.size()\
    \ - 1) + vowels_reversed_upper_reversed.substr(1, vowels_reversed_upper_reversed.size());\n\
    \    std::string vowels_reversed_lower_reversed_reversed = vowels_reversed_lower_reversed.substr(0,\
    \ vowels_reversed_lower_reversed.size() - 1) + vowels_reversed_lower_reversed.substr(1,\
    \ vowels_reversed_lower_reversed.size());\n    std::string vowels_reversed_upper_reversed_reversed_reversed\
    \ = vowels_reversed_upper_reversed_reversed.substr(0, vowels_reversed_upper_reversed_reversed.size()\
    \ - 1) + vowels_reversed_upper_reversed_reversed.substr(1, vowels_reversed_upper_reversed_reversed.size());\n\
    \    std::string vowels_reversed_lower_reversed_reversed_reversed = vowels_reversed_lower_reversed_reversed.substr(0,\
    \ vowels_reversed_lower_reversed_reversed.size() - 1) + vowels_reversed_lower_reversed_reversed.substr(1,\
    \ vowels_reversed_lower_reversed_reversed.size());\n    std::string vowels_reversed_upper_reversed_reversed_reversed_reversed\
    \ = vowels_reversed_upper_reversed_reversed_reversed.substr(0, vowels_reversed_upper_reversed_reversed_reversed.size()\
    \ - 1) + vowels_reversed_upper_reversed_reversed_reversed.substr(1, vowels_reversed_upper_reversed_reversed_reversed.size());\n\
    \    std::string vowels_reversed_lower_reversed_reversed_reversed_reversed = vowels_reversed_lower_reversed_reversed_reversed.substr(0,\
    \ vowels_reversed_lower_reversed_reversed_reversed.size() - 1) + vowels_reversed_lower_reversed_reversed_reversed.substr(1,\
    \ vowels_reversed_lower_reversed_\n}\nint main() {\n    auto candidate = get_closest_vowel;\n\
    \    assert(candidate((\"yogurt\")) == (\"u\"));\n    assert(candidate((\"full\"\
    )) == (\"u\"));\n    assert(candidate((\"easy\")) == (\"\"));\n    assert(candidate((\"\
    eAsy\")) == (\"\"));\n    assert(candidate((\"ali\")) == (\"\"));\n    assert(candidate((\"\
    bad\")) == (\"a\"));\n    assert(candidate((\"most\")) == (\"o\"));\n    assert(candidate((\"\
    ab\")) == (\"\"));\n    assert(candidate((\"ba\")) == (\"\"));\n    assert(candidate((\"\
    quick\")) == (\"\"));\n    assert(candidate((\"anime\")) == (\"i\"));\n    assert(candidate((\"\
    Asia\")) == (\"\"));\n    assert(candidate((\"Above\")) == (\"o\"));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpw_ns96f5.cpp: In function \u2018std::string get_closest_vowel(std::string)\u2019\
    :\n/tmp/tmpw_ns96f5.cpp:16:57: error: \u2018std::string\u2019 {aka \u2018class\
    \ std::__cxx11::basic_string<char>\u2019} has no member named \u2018toUpper\u2019\
    \n   16 |     std::string vowels_reversed_upper = vowels_reversed.toUpper();\n\
    \      |                                                         ^~~~~~~\n/tmp/tmpw_ns96f5.cpp:17:57:\
    \ error: \u2018std::string\u2019 {aka \u2018class std::__cxx11::basic_string<char>\u2019\
    } has no member named \u2018toLower\u2019\n   17 |     std::string vowels_reversed_lower\
    \ = vowels_reversed.toLower();\n      |                                      \
    \                   ^~~~~~~\n/tmp/tmpw_ns96f5.cpp:25:258: error: \u2018vowels_reversed_lower_reversed_\u2019\
    \ was not declared in this scope; did you mean \u2018vowels_reversed_lower_reversed\u2019\
    ?\n   25 |     std::string vowels_reversed_lower_reversed_reversed_reversed_reversed\
    \ = vowels_reversed_lower_reversed_reversed_reversed.substr(0, vowels_reversed_lower_reversed_reversed_reversed.size()\
    \ - 1) + vowels_reversed_lower_reversed_reversed_reversed.substr(1, vowels_reversed_lower_reversed_\n\
    \      |                                                                     \
    \                                                                            \
    \                                                                            \
    \                                     ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n      |\
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                              vowels_reversed_lower_reversed\n/tmp/tmpw_ns96f5.cpp:26:1:\
    \ error: expected \u2018,\u2019 or \u2018;\u2019 before \u2018}\u2019 token\n\
    \   26 | }\n      | ^\n/tmp/tmpw_ns96f5.cpp:26:1: warning: no return statement\
    \ in function returning non-void [-Wreturn-type]\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// get_closest_vowel(\"yogurt\") ==> \"u\"\
    \n// get_closest_vowel(\"FULL\") ==> \"U\"\n// get_closest_vowel(\"quick\") ==>\
    \ \"\"\n// get_closest_vowel(\"ab\") ==> \"\"\nstd::string get_closest_vowel(std::string\
    \ word) {\n    std::string vowels = \"AEIOUaeiou\";\n    std::string vowels_reverse\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_reverse = \"AEIOUaeiou\";\n\
    \    std::string vowels_reverse_back = \"AEIOUaeiou\";\n    std::string vowels_reverse_back_reverse\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_back_reverse_back = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse_back_reverse_back_reverse = \"AEIOUaeiou\";\n\
    \    std::string vowels_reverse_back_reverse_back_reverse_back = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse = \"\
    AEIOUaeiou\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\n\
    }\nint main() {\n    auto candidate = get_closest_vowel;\n    assert(candidate((\"\
    yogurt\")) == (\"u\"));\n    assert(candidate((\"full\")) == (\"u\"));\n    assert(candidate((\"\
    easy\")) == (\"\"));\n    assert(candidate((\"eAsy\")) == (\"\"));\n    assert(candidate((\"\
    ali\")) == (\"\"));\n    assert(candidate((\"bad\")) == (\"a\"));\n    assert(candidate((\"\
    most\")) == (\"o\"));\n    assert(candidate((\"ab\")) == (\"\"));\n    assert(candidate((\"\
    ba\")) == (\"\"));\n    assert(candidate((\"quick\")) == (\"\"));\n    assert(candidate((\"\
    anime\")) == (\"i\"));\n    assert(candidate((\"Asia\")) == (\"\"));\n    assert(candidate((\"\
    Above\")) == (\"o\"));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpezdwv0c_.cpp: In function \u2018std::string get_closest_vowel(std::string)\u2019\
    :\n/tmp/tmpezdwv0c_.cpp:32:17: error: redeclaration of \u2018std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\u2019\
    \n   32 |     std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\
    \ = \"AEIOUaeiou\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpezdwv0c_.cpp:31:17: note: \u2018std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\u2019\
    \ previously declared here\n   31 |     std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\
    \ = \"AEIOUaeiou\";\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpezdwv0c_.cpp:35:1: error: expected initializer before \u2018}\u2019 token\n\
    \   35 | }\n      | ^\n/tmp/tmpezdwv0c_.cpp:35:1: warning: no return statement\
    \ in function returning non-void [-Wreturn-type]\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// get_closest_vowel(\"yogurt\") ==> \"u\"\
    \n// get_closest_vowel(\"FULL\") ==> \"U\"\n// get_closest_vowel(\"quick\") ==>\
    \ \"\"\n// get_closest_vowel(\"ab\") ==> \"\"\nstd::string get_closest_vowel(std::string\
    \ word) {\n    int n = word.size();\n    int vowel_pos = -1;\n    int consonant_pos\
    \ = -1;\n    int vowel_len = -1;\n    int consonant_len = -1;\n    std::string\
    \ vowel = \"\";\n    std::string consonant = \"\";\n    for(int i = 0; i < n;\
    \ i++) {\n        if(word[i] == 'a' || word[i] == 'e' || word[i] == 'i' || word[i]\
    \ == 'o' || word[i] == 'u' || word[i] == 'y') {\n            vowel_pos = i;\n\
    \            vowel_len = i - vowel_pos;\n        }\n        if(word[i] == 'b'\
    \ || word[i] == 'c' || word[i] == 'd' || word[i] == 'f' || word[i] == 'g' || word[i]\
    \ == 'h' || word[i] == 'j' || word[i] == 'k' || word[i] == 'l' || word[i] == 'm'\
    \ || word[i] == 'n' || word[i] == 'p' || word[i] == 'q' || word[i] == 'r' || word[i]\
    \ == 's' || word[i] == 't' || word[i] == 'v' || word[i] == 'w' || word[i] == 'x'\
    \ || word[i] == 'y') {\n            consonant_pos = i;\n            consonant_len\
    \ = i - consonant_pos;\n        }\n    }\n    if(vowel_pos == -1 || consonant_pos\
    \ == -1) {\n        return \"\";\n    }\n    if(vowel_len < consonant_len) {\n\
    \        vowel = word.substr(vowel_pos + 1, consonant_len - vowel_len);\n    }\
    \ else {\n        vowel = word.substr(consonant_pos + 1, vowel_len - consonant_len);\n\
    \    }\n    return vowel;\n}\nint main() {\n    auto candidate = get_closest_vowel;\n\
    \    assert(candidate((\"yogurt\")) == (\"u\"));\n    assert(candidate((\"full\"\
    )) == (\"u\"));\n    assert(candidate((\"easy\")) == (\"\"));\n    assert(candidate((\"\
    eAsy\")) == (\"\"));\n    assert(candidate((\"ali\")) == (\"\"));\n    assert(candidate((\"\
    bad\")) == (\"a\"));\n    assert(candidate((\"most\")) == (\"o\"));\n    assert(candidate((\"\
    ab\")) == (\"\"));\n    assert(candidate((\"ba\")) == (\"\"));\n    assert(candidate((\"\
    quick\")) == (\"\"));\n    assert(candidate((\"anime\")) == (\"i\"));\n    assert(candidate((\"\
    Asia\")) == (\"\"));\n    assert(candidate((\"Above\")) == (\"o\"));\n}\n"
  stdout: ''
  stderr: "tmp619pocki: /tmp/tmp619pocki.cpp:43: int main(): Assertion `candidate((\"\
    yogurt\")) == (\"u\")' failed.\n"
  exit_code: -6
  status: Exception
