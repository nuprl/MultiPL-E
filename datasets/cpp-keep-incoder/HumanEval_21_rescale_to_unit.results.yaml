name: HumanEval_21_rescale_to_unit
language: cpp
results:
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\n\
    std::vector<float> rescale_to_unit(std::vector<float> numbers) {\n    assert(numbers.size()\
    \ >= 2);\n    std::vector<float> rescaled_numbers;\n    rescaled_numbers.reserve(numbers.size());\n\
    \    for (float number : numbers) {\n        rescaled_numbers.push_back(number);\n\
    \        rescaled_numbers.push_back(number);\n    }\n    return rescaled_numbers;\n\
    }\nint main() {\n    auto candidate = rescale_to_unit;\n    assert(candidate((std::vector<float>({2.0,\
    \ 49.9}))) == (std::vector<float>({0.0, 1.0})));\n    assert(candidate((std::vector<float>({100.0,\
    \ 49.9}))) == (std::vector<float>({1.0, 0.0})));\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0, 4.0, 5.0}))) == (std::vector<float>({0.0, 0.25, 0.5, 0.75, 1.0})));\n\
    \    assert(candidate((std::vector<float>({2.0, 1.0, 5.0, 3.0, 4.0}))) == (std::vector<float>({0.25,\
    \ 0.0, 1.0, 0.5, 0.75})));\n    assert(candidate((std::vector<float>({12.0, 11.0,\
    \ 15.0, 13.0, 14.0}))) == (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n\
    }\n"
  stdout: ''
  stderr: "tmp5ziqhyak: /tmp/tmp5ziqhyak.cpp:19: int main(): Assertion `candidate((std::vector<float>({2.0,\
    \ 49.9}))) == (std::vector<float>({0.0, 1.0}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\n\
    std::vector<float> rescale_to_unit(std::vector<float> numbers) {\n    std::vector<float>\
    \ rescaled_numbers;\n    rescaled_numbers.reserve(numbers.size());\n    for (float\
    \ number : numbers) {\n        rescaled_numbers.push_back(number);\n        rescaled_numbers.push_back(number);\n\
    \    }\n    return rescaled_numbers;\n}\nint main() {\n    auto candidate = rescale_to_unit;\n\
    \    assert(candidate((std::vector<float>({2.0, 49.9}))) == (std::vector<float>({0.0,\
    \ 1.0})));\n    assert(candidate((std::vector<float>({100.0, 49.9}))) == (std::vector<float>({1.0,\
    \ 0.0})));\n    assert(candidate((std::vector<float>({1.0, 2.0, 3.0, 4.0, 5.0})))\
    \ == (std::vector<float>({0.0, 0.25, 0.5, 0.75, 1.0})));\n    assert(candidate((std::vector<float>({2.0,\
    \ 1.0, 5.0, 3.0, 4.0}))) == (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n\
    \    assert(candidate((std::vector<float>({12.0, 11.0, 15.0, 13.0, 14.0}))) ==\
    \ (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n}\n"
  stdout: ''
  stderr: "tmpy45o3ev1: /tmp/tmpy45o3ev1.cpp:18: int main(): Assertion `candidate((std::vector<float>({2.0,\
    \ 49.9}))) == (std::vector<float>({0.0, 1.0}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\n\
    std::vector<float> rescale_to_unit(std::vector<float> numbers) {\n    std::vector<float>\
    \ rescaled_numbers;\n    rescaled_numbers.reserve(numbers.size());\n    for (auto\
    \ number : numbers) {\n        rescaled_numbers.push_back(number / numbers.back());\n\
    \    }\n    return rescaled_numbers;\n}\nint main() {\n    auto candidate = rescale_to_unit;\n\
    \    assert(candidate((std::vector<float>({2.0, 49.9}))) == (std::vector<float>({0.0,\
    \ 1.0})));\n    assert(candidate((std::vector<float>({100.0, 49.9}))) == (std::vector<float>({1.0,\
    \ 0.0})));\n    assert(candidate((std::vector<float>({1.0, 2.0, 3.0, 4.0, 5.0})))\
    \ == (std::vector<float>({0.0, 0.25, 0.5, 0.75, 1.0})));\n    assert(candidate((std::vector<float>({2.0,\
    \ 1.0, 5.0, 3.0, 4.0}))) == (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n\
    \    assert(candidate((std::vector<float>({12.0, 11.0, 15.0, 13.0, 14.0}))) ==\
    \ (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n}\n"
  stdout: ''
  stderr: "tmpilkl19uw: /tmp/tmpilkl19uw.cpp:17: int main(): Assertion `candidate((std::vector<float>({2.0,\
    \ 49.9}))) == (std::vector<float>({0.0, 1.0}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\n\
    std::vector<float> rescale_to_unit(std::vector<float> numbers) {\n    std::vector<float>\
    \ rescaled_numbers;\n    rescaled_numbers.reserve(numbers.size());\n    for (float\
    \ number : numbers) {\n        rescaled_numbers.push_back(number);\n        rescaled_numbers.push_back(number);\n\
    \    }\n    return rescaled_numbers;\n}\nint main() {\n    auto candidate = rescale_to_unit;\n\
    \    assert(candidate((std::vector<float>({2.0, 49.9}))) == (std::vector<float>({0.0,\
    \ 1.0})));\n    assert(candidate((std::vector<float>({100.0, 49.9}))) == (std::vector<float>({1.0,\
    \ 0.0})));\n    assert(candidate((std::vector<float>({1.0, 2.0, 3.0, 4.0, 5.0})))\
    \ == (std::vector<float>({0.0, 0.25, 0.5, 0.75, 1.0})));\n    assert(candidate((std::vector<float>({2.0,\
    \ 1.0, 5.0, 3.0, 4.0}))) == (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n\
    \    assert(candidate((std::vector<float>({12.0, 11.0, 15.0, 13.0, 14.0}))) ==\
    \ (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n}\n"
  stdout: ''
  stderr: "tmp04bg0rd9: /tmp/tmp04bg0rd9.cpp:18: int main(): Assertion `candidate((std::vector<float>({2.0,\
    \ 49.9}))) == (std::vector<float>({0.0, 1.0}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\n\
    std::vector<float> rescale_to_unit(std::vector<float> numbers) {\n    std::vector<float>\
    \ rescaled_numbers;\n    rescaled_numbers.reserve(numbers.size());\n    for (float\
    \ number : numbers) {\n        rescaled_numbers.push_back(std::min(std::max(number,\
    \ 0.0f), 1.0f));\n    }\n    return rescaled_numbers;\n}\nint main() {\n    auto\
    \ candidate = rescale_to_unit;\n    assert(candidate((std::vector<float>({2.0,\
    \ 49.9}))) == (std::vector<float>({0.0, 1.0})));\n    assert(candidate((std::vector<float>({100.0,\
    \ 49.9}))) == (std::vector<float>({1.0, 0.0})));\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0, 4.0, 5.0}))) == (std::vector<float>({0.0, 0.25, 0.5, 0.75, 1.0})));\n\
    \    assert(candidate((std::vector<float>({2.0, 1.0, 5.0, 3.0, 4.0}))) == (std::vector<float>({0.25,\
    \ 0.0, 1.0, 0.5, 0.75})));\n    assert(candidate((std::vector<float>({12.0, 11.0,\
    \ 15.0, 13.0, 14.0}))) == (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n\
    }\n"
  stdout: ''
  stderr: "tmppq3_diai: /tmp/tmppq3_diai.cpp:17: int main(): Assertion `candidate((std::vector<float>({2.0,\
    \ 49.9}))) == (std::vector<float>({0.0, 1.0}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\n\
    std::vector<float> rescale_to_unit(std::vector<float> numbers) {\n    std::vector<float>\
    \ rescaled_numbers;\n    rescaled_numbers.reserve(numbers.size());\n    for (float\
    \ number : numbers) {\n        rescaled_numbers.push_back(number / numbers.size());\n\
    \    }\n    return rescaled_numbers;\n}\nint main() {\n    auto candidate = rescale_to_unit;\n\
    \    assert(candidate((std::vector<float>({2.0, 49.9}))) == (std::vector<float>({0.0,\
    \ 1.0})));\n    assert(candidate((std::vector<float>({100.0, 49.9}))) == (std::vector<float>({1.0,\
    \ 0.0})));\n    assert(candidate((std::vector<float>({1.0, 2.0, 3.0, 4.0, 5.0})))\
    \ == (std::vector<float>({0.0, 0.25, 0.5, 0.75, 1.0})));\n    assert(candidate((std::vector<float>({2.0,\
    \ 1.0, 5.0, 3.0, 4.0}))) == (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n\
    \    assert(candidate((std::vector<float>({12.0, 11.0, 15.0, 13.0, 14.0}))) ==\
    \ (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n}\n"
  stdout: ''
  stderr: "tmpuqkdguyz: /tmp/tmpuqkdguyz.cpp:17: int main(): Assertion `candidate((std::vector<float>({2.0,\
    \ 49.9}))) == (std::vector<float>({0.0, 1.0}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\n\
    std::vector<float> rescale_to_unit(std::vector<float> numbers) {\n    std::vector<float>\
    \ rescaled_numbers;\n    rescaled_numbers.reserve(numbers.size());\n    for (float\
    \ number : numbers) {\n        rescaled_numbers.push_back(std::min(std::max(number,\
    \ 0.0f), 1.0f));\n    }\n    return rescaled_numbers;\n}\nint main() {\n    auto\
    \ candidate = rescale_to_unit;\n    assert(candidate((std::vector<float>({2.0,\
    \ 49.9}))) == (std::vector<float>({0.0, 1.0})));\n    assert(candidate((std::vector<float>({100.0,\
    \ 49.9}))) == (std::vector<float>({1.0, 0.0})));\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0, 4.0, 5.0}))) == (std::vector<float>({0.0, 0.25, 0.5, 0.75, 1.0})));\n\
    \    assert(candidate((std::vector<float>({2.0, 1.0, 5.0, 3.0, 4.0}))) == (std::vector<float>({0.25,\
    \ 0.0, 1.0, 0.5, 0.75})));\n    assert(candidate((std::vector<float>({12.0, 11.0,\
    \ 15.0, 13.0, 14.0}))) == (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n\
    }\n"
  stdout: ''
  stderr: "tmprnxki_m9: /tmp/tmprnxki_m9.cpp:17: int main(): Assertion `candidate((std::vector<float>({2.0,\
    \ 49.9}))) == (std::vector<float>({0.0, 1.0}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\n\
    std::vector<float> rescale_to_unit(std::vector<float> numbers) {\n    std::vector<float>\
    \ rescaled_numbers;\n    rescaled_numbers.reserve(numbers.size());\n    for (float\
    \ number : numbers) {\n        rescaled_numbers.push_back(std::min(std::max(number,\
    \ 0.0f), 1.0f));\n    }\n    return rescaled_numbers;\n}\nint main() {\n    auto\
    \ candidate = rescale_to_unit;\n    assert(candidate((std::vector<float>({2.0,\
    \ 49.9}))) == (std::vector<float>({0.0, 1.0})));\n    assert(candidate((std::vector<float>({100.0,\
    \ 49.9}))) == (std::vector<float>({1.0, 0.0})));\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0, 4.0, 5.0}))) == (std::vector<float>({0.0, 0.25, 0.5, 0.75, 1.0})));\n\
    \    assert(candidate((std::vector<float>({2.0, 1.0, 5.0, 3.0, 4.0}))) == (std::vector<float>({0.25,\
    \ 0.0, 1.0, 0.5, 0.75})));\n    assert(candidate((std::vector<float>({12.0, 11.0,\
    \ 15.0, 13.0, 14.0}))) == (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n\
    }\n"
  stdout: ''
  stderr: "tmp1oy6ub88: /tmp/tmp1oy6ub88.cpp:17: int main(): Assertion `candidate((std::vector<float>({2.0,\
    \ 49.9}))) == (std::vector<float>({0.0, 1.0}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\n\
    std::vector<float> rescale_to_unit(std::vector<float> numbers) {\n    std::vector<float>\
    \ result;\n    float min = std::numeric_limits<float>::max();\n    float max =\
    \ std::numeric_limits<float>::min();\n    for (float number : numbers) {\n   \
    \     min = std::min(min, number);\n        max = std::max(max, number);\n   \
    \ }\n    for (float number : numbers) {\n        result.push_back(number * (max\
    \ - min) / numbers.size() + min);\n    }\n    return result;\n}\nint main() {\n\
    \    auto candidate = rescale_to_unit;\n    assert(candidate((std::vector<float>({2.0,\
    \ 49.9}))) == (std::vector<float>({0.0, 1.0})));\n    assert(candidate((std::vector<float>({100.0,\
    \ 49.9}))) == (std::vector<float>({1.0, 0.0})));\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0, 4.0, 5.0}))) == (std::vector<float>({0.0, 0.25, 0.5, 0.75, 1.0})));\n\
    \    assert(candidate((std::vector<float>({2.0, 1.0, 5.0, 3.0, 4.0}))) == (std::vector<float>({0.25,\
    \ 0.0, 1.0, 0.5, 0.75})));\n    assert(candidate((std::vector<float>({12.0, 11.0,\
    \ 15.0, 13.0, 14.0}))) == (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n\
    }\n"
  stdout: ''
  stderr: "tmp44z97o1z: /tmp/tmp44z97o1z.cpp:22: int main(): Assertion `candidate((std::vector<float>({2.0,\
    \ 49.9}))) == (std::vector<float>({0.0, 1.0}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\n\
    std::vector<float> rescale_to_unit(std::vector<float> numbers) {\n    assert(numbers.size()\
    \ >= 2);\n    std::vector<float> rescaled_numbers(numbers.size());\n    float\
    \ min_number = numbers[0];\n    float max_number = numbers[0];\n    for (size_t\
    \ i = 1; i < numbers.size(); ++i) {\n        min_number = std::min(min_number,\
    \ numbers[i]);\n        max_number = std::max(max_number, numbers[i]);\n    }\n\
    \    for (size_t i = 0; i < numbers.size(); ++i) {\n        rescaled_numbers[i]\
    \ = numbers[i] - min_number;\n        rescaled_numbers[i] /= (max_number - min_number);\n\
    \    }\n    return rescaled_numbers;\n}\nint main() {\n    auto candidate = rescale_to_unit;\n\
    \    assert(candidate((std::vector<float>({2.0, 49.9}))) == (std::vector<float>({0.0,\
    \ 1.0})));\n    assert(candidate((std::vector<float>({100.0, 49.9}))) == (std::vector<float>({1.0,\
    \ 0.0})));\n    assert(candidate((std::vector<float>({1.0, 2.0, 3.0, 4.0, 5.0})))\
    \ == (std::vector<float>({0.0, 0.25, 0.5, 0.75, 1.0})));\n    assert(candidate((std::vector<float>({2.0,\
    \ 1.0, 5.0, 3.0, 4.0}))) == (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n\
    \    assert(candidate((std::vector<float>({12.0, 11.0, 15.0, 13.0, 14.0}))) ==\
    \ (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\n\
    std::vector<float> rescale_to_unit(std::vector<float> numbers) {\n    std::vector<float>\
    \ rescaled_numbers;\n    rescaled_numbers.reserve(numbers.size());\n    for (float\
    \ number : numbers) {\n        rescaled_numbers.push_back(number);\n        rescaled_numbers.push_back(number);\n\
    \    }\n    return rescaled_numbers;\n}\nint main() {\n    auto candidate = rescale_to_unit;\n\
    \    assert(candidate((std::vector<float>({2.0, 49.9}))) == (std::vector<float>({0.0,\
    \ 1.0})));\n    assert(candidate((std::vector<float>({100.0, 49.9}))) == (std::vector<float>({1.0,\
    \ 0.0})));\n    assert(candidate((std::vector<float>({1.0, 2.0, 3.0, 4.0, 5.0})))\
    \ == (std::vector<float>({0.0, 0.25, 0.5, 0.75, 1.0})));\n    assert(candidate((std::vector<float>({2.0,\
    \ 1.0, 5.0, 3.0, 4.0}))) == (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n\
    \    assert(candidate((std::vector<float>({12.0, 11.0, 15.0, 13.0, 14.0}))) ==\
    \ (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n}\n"
  stdout: ''
  stderr: "tmptl2430xh: /tmp/tmptl2430xh.cpp:18: int main(): Assertion `candidate((std::vector<float>({2.0,\
    \ 49.9}))) == (std::vector<float>({0.0, 1.0}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\n\
    std::vector<float> rescale_to_unit(std::vector<float> numbers) {\n    assert(numbers.size()\
    \ > 1);\n    std::vector<float> rescaled_numbers;\n    rescaled_numbers.reserve(numbers.size());\n\
    \    for (float number : numbers) {\n        rescaled_numbers.push_back(number\
    \ / numbers[0]);\n    }\n    return rescaled_numbers;\n}\nint main() {\n    auto\
    \ candidate = rescale_to_unit;\n    assert(candidate((std::vector<float>({2.0,\
    \ 49.9}))) == (std::vector<float>({0.0, 1.0})));\n    assert(candidate((std::vector<float>({100.0,\
    \ 49.9}))) == (std::vector<float>({1.0, 0.0})));\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0, 4.0, 5.0}))) == (std::vector<float>({0.0, 0.25, 0.5, 0.75, 1.0})));\n\
    \    assert(candidate((std::vector<float>({2.0, 1.0, 5.0, 3.0, 4.0}))) == (std::vector<float>({0.25,\
    \ 0.0, 1.0, 0.5, 0.75})));\n    assert(candidate((std::vector<float>({12.0, 11.0,\
    \ 15.0, 13.0, 14.0}))) == (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n\
    }\n"
  stdout: ''
  stderr: "tmplahe9fnh: /tmp/tmplahe9fnh.cpp:18: int main(): Assertion `candidate((std::vector<float>({2.0,\
    \ 49.9}))) == (std::vector<float>({0.0, 1.0}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\n\
    std::vector<float> rescale_to_unit(std::vector<float> numbers) {\n    assert(numbers.size()\
    \ >= 2);\n    std::vector<float> new_numbers;\n    new_numbers.reserve(numbers.size());\n\
    \    for (auto number : numbers) {\n        new_numbers.push_back(number / numbers.size());\n\
    \    }\n    return new_numbers;\n}\nint main() {\n    auto candidate = rescale_to_unit;\n\
    \    assert(candidate((std::vector<float>({2.0, 49.9}))) == (std::vector<float>({0.0,\
    \ 1.0})));\n    assert(candidate((std::vector<float>({100.0, 49.9}))) == (std::vector<float>({1.0,\
    \ 0.0})));\n    assert(candidate((std::vector<float>({1.0, 2.0, 3.0, 4.0, 5.0})))\
    \ == (std::vector<float>({0.0, 0.25, 0.5, 0.75, 1.0})));\n    assert(candidate((std::vector<float>({2.0,\
    \ 1.0, 5.0, 3.0, 4.0}))) == (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n\
    \    assert(candidate((std::vector<float>({12.0, 11.0, 15.0, 13.0, 14.0}))) ==\
    \ (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n}\n"
  stdout: ''
  stderr: "tmpcsvi_h7e: /tmp/tmpcsvi_h7e.cpp:18: int main(): Assertion `candidate((std::vector<float>({2.0,\
    \ 49.9}))) == (std::vector<float>({0.0, 1.0}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\n\
    std::vector<float> rescale_to_unit(std::vector<float> numbers) {\n    assert(numbers.size()\
    \ >= 2);\n    std::vector<float> rescaled_numbers;\n    rescaled_numbers.reserve(numbers.size());\n\
    \    for (float number : numbers) {\n        rescaled_numbers.push_back(number\
    \ / numbers.size());\n    }\n    return rescaled_numbers;\n}\nint main() {\n \
    \   auto candidate = rescale_to_unit;\n    assert(candidate((std::vector<float>({2.0,\
    \ 49.9}))) == (std::vector<float>({0.0, 1.0})));\n    assert(candidate((std::vector<float>({100.0,\
    \ 49.9}))) == (std::vector<float>({1.0, 0.0})));\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0, 4.0, 5.0}))) == (std::vector<float>({0.0, 0.25, 0.5, 0.75, 1.0})));\n\
    \    assert(candidate((std::vector<float>({2.0, 1.0, 5.0, 3.0, 4.0}))) == (std::vector<float>({0.25,\
    \ 0.0, 1.0, 0.5, 0.75})));\n    assert(candidate((std::vector<float>({12.0, 11.0,\
    \ 15.0, 13.0, 14.0}))) == (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n\
    }\n"
  stdout: ''
  stderr: "tmpt6m8up8i: /tmp/tmpt6m8up8i.cpp:18: int main(): Assertion `candidate((std::vector<float>({2.0,\
    \ 49.9}))) == (std::vector<float>({0.0, 1.0}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\n\
    std::vector<float> rescale_to_unit(std::vector<float> numbers) {\n    std::vector<float>\
    \ rescaled;\n    rescaled.reserve(numbers.size());\n    for (float number : numbers)\
    \ {\n        rescaled.push_back(number / numbers.size());\n    }\n    return rescaled;\n\
    }\nint main() {\n    auto candidate = rescale_to_unit;\n    assert(candidate((std::vector<float>({2.0,\
    \ 49.9}))) == (std::vector<float>({0.0, 1.0})));\n    assert(candidate((std::vector<float>({100.0,\
    \ 49.9}))) == (std::vector<float>({1.0, 0.0})));\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0, 4.0, 5.0}))) == (std::vector<float>({0.0, 0.25, 0.5, 0.75, 1.0})));\n\
    \    assert(candidate((std::vector<float>({2.0, 1.0, 5.0, 3.0, 4.0}))) == (std::vector<float>({0.25,\
    \ 0.0, 1.0, 0.5, 0.75})));\n    assert(candidate((std::vector<float>({12.0, 11.0,\
    \ 15.0, 13.0, 14.0}))) == (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n\
    }\n"
  stdout: ''
  stderr: "tmp7plb4zd4: /tmp/tmp7plb4zd4.cpp:17: int main(): Assertion `candidate((std::vector<float>({2.0,\
    \ 49.9}))) == (std::vector<float>({0.0, 1.0}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\n\
    std::vector<float> rescale_to_unit(std::vector<float> numbers) {\n    std::vector<float>\
    \ rescaled_numbers(numbers.size());\n    float min_number = std::numeric_limits<float>::max();\n\
    \    float max_number = std::numeric_limits<float>::min();\n    for (size_t i\
    \ = 0; i < numbers.size(); i++) {\n        min_number = std::min(min_number, numbers[i]);\n\
    \        max_number = std::max(max_number, numbers[i]);\n        rescaled_numbers[i]\
    \ = numbers[i] - min_number;\n    }\n    for (size_t i = 0; i < numbers.size();\
    \ i++) {\n        rescaled_numbers[i] = rescaled_numbers[i] / max_number - min_number;\n\
    \    }\n    return rescaled_numbers;\n}\nint main() {\n    auto candidate = rescale_to_unit;\n\
    \    assert(candidate((std::vector<float>({2.0, 49.9}))) == (std::vector<float>({0.0,\
    \ 1.0})));\n    assert(candidate((std::vector<float>({100.0, 49.9}))) == (std::vector<float>({1.0,\
    \ 0.0})));\n    assert(candidate((std::vector<float>({1.0, 2.0, 3.0, 4.0, 5.0})))\
    \ == (std::vector<float>({0.0, 0.25, 0.5, 0.75, 1.0})));\n    assert(candidate((std::vector<float>({2.0,\
    \ 1.0, 5.0, 3.0, 4.0}))) == (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n\
    \    assert(candidate((std::vector<float>({12.0, 11.0, 15.0, 13.0, 14.0}))) ==\
    \ (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n}\n"
  stdout: ''
  stderr: "tmpw9bks1xi: /tmp/tmpw9bks1xi.cpp:23: int main(): Assertion `candidate((std::vector<float>({2.0,\
    \ 49.9}))) == (std::vector<float>({0.0, 1.0}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\n\
    std::vector<float> rescale_to_unit(std::vector<float> numbers) {\n    std::vector<float>\
    \ result;\n    float min = *std::min_element(numbers.begin(), numbers.end());\n\
    \    float max = *std::max_element(numbers.begin(), numbers.end());\n    float\
    \ range = (max - min);\n    for (float number : numbers) {\n        result.push_back(number\
    \ - min);\n    }\n    for (float number : result) {\n        assert(number >=\
    \ 0.0);\n        assert(number <= 1.0);\n    }\n    for (float number : result)\
    \ {\n        assert(number >= 0.0);\n        assert(number <= 1.0);\n    }\n \
    \   return result;\n}\nint main() {\n    auto candidate = rescale_to_unit;\n \
    \   assert(candidate((std::vector<float>({2.0, 49.9}))) == (std::vector<float>({0.0,\
    \ 1.0})));\n    assert(candidate((std::vector<float>({100.0, 49.9}))) == (std::vector<float>({1.0,\
    \ 0.0})));\n    assert(candidate((std::vector<float>({1.0, 2.0, 3.0, 4.0, 5.0})))\
    \ == (std::vector<float>({0.0, 0.25, 0.5, 0.75, 1.0})));\n    assert(candidate((std::vector<float>({2.0,\
    \ 1.0, 5.0, 3.0, 4.0}))) == (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n\
    \    assert(candidate((std::vector<float>({12.0, 11.0, 15.0, 13.0, 14.0}))) ==\
    \ (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n}\n"
  stdout: ''
  stderr: "tmpo9vhls0t: /tmp/tmpo9vhls0t.cpp:17: std::vector<float> rescale_to_unit(std::vector<float>):\
    \ Assertion `number <= 1.0' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\n\
    std::vector<float> rescale_to_unit(std::vector<float> numbers) {\n    assert(numbers.size()\
    \ >= 2);\n    std::vector<float> rescaled_numbers;\n    rescaled_numbers.reserve(numbers.size());\n\
    \    for (float number : numbers) {\n        rescaled_numbers.push_back(number\
    \ / numbers[0]);\n    }\n    return rescaled_numbers;\n}\nint main() {\n    auto\
    \ candidate = rescale_to_unit;\n    assert(candidate((std::vector<float>({2.0,\
    \ 49.9}))) == (std::vector<float>({0.0, 1.0})));\n    assert(candidate((std::vector<float>({100.0,\
    \ 49.9}))) == (std::vector<float>({1.0, 0.0})));\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0, 4.0, 5.0}))) == (std::vector<float>({0.0, 0.25, 0.5, 0.75, 1.0})));\n\
    \    assert(candidate((std::vector<float>({2.0, 1.0, 5.0, 3.0, 4.0}))) == (std::vector<float>({0.25,\
    \ 0.0, 1.0, 0.5, 0.75})));\n    assert(candidate((std::vector<float>({12.0, 11.0,\
    \ 15.0, 13.0, 14.0}))) == (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n\
    }\n"
  stdout: ''
  stderr: "tmpvp76f4d6: /tmp/tmpvp76f4d6.cpp:18: int main(): Assertion `candidate((std::vector<float>({2.0,\
    \ 49.9}))) == (std::vector<float>({0.0, 1.0}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\n\
    std::vector<float> rescale_to_unit(std::vector<float> numbers) {\n    assert(numbers.size()\
    \ >= 2);\n    std::vector<float> new_numbers;\n    new_numbers.reserve(numbers.size());\n\
    \    for (auto number : numbers) {\n        new_numbers.push_back(number);\n \
    \   }\n    for (auto number : numbers) {\n        new_numbers.push_back(number);\n\
    \    }\n    return new_numbers;\n}\nint main() {\n    auto candidate = rescale_to_unit;\n\
    \    assert(candidate((std::vector<float>({2.0, 49.9}))) == (std::vector<float>({0.0,\
    \ 1.0})));\n    assert(candidate((std::vector<float>({100.0, 49.9}))) == (std::vector<float>({1.0,\
    \ 0.0})));\n    assert(candidate((std::vector<float>({1.0, 2.0, 3.0, 4.0, 5.0})))\
    \ == (std::vector<float>({0.0, 0.25, 0.5, 0.75, 1.0})));\n    assert(candidate((std::vector<float>({2.0,\
    \ 1.0, 5.0, 3.0, 4.0}))) == (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n\
    \    assert(candidate((std::vector<float>({12.0, 11.0, 15.0, 13.0, 14.0}))) ==\
    \ (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n}\n"
  stdout: ''
  stderr: "tmp6sfqdsru: /tmp/tmp6sfqdsru.cpp:21: int main(): Assertion `candidate((std::vector<float>({2.0,\
    \ 49.9}))) == (std::vector<float>({0.0, 1.0}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\n\
    std::vector<float> rescale_to_unit(std::vector<float> numbers) {\n    assert(numbers.size()\
    \ >= 2);\n    std::vector<float> rescaled_numbers;\n    rescaled_numbers.reserve(numbers.size());\n\
    \    float min_number = std::numeric_limits<float>::min();\n    float max_number\
    \ = std::numeric_limits<float>::max();\n    for (float number : numbers) {\n \
    \       rescaled_numbers.push_back(number * (max_number - min_number) / (numbers.back()\
    \ - numbers.front()));\n        min_number = std::min(min_number, number);\n \
    \       max_number = std::max(max_number, number);\n    }\n    return rescaled_numbers;\n\
    }\nint main() {\n    auto candidate = rescale_to_unit;\n    assert(candidate((std::vector<float>({2.0,\
    \ 49.9}))) == (std::vector<float>({0.0, 1.0})));\n    assert(candidate((std::vector<float>({100.0,\
    \ 49.9}))) == (std::vector<float>({1.0, 0.0})));\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0, 4.0, 5.0}))) == (std::vector<float>({0.0, 0.25, 0.5, 0.75, 1.0})));\n\
    \    assert(candidate((std::vector<float>({2.0, 1.0, 5.0, 3.0, 4.0}))) == (std::vector<float>({0.25,\
    \ 0.0, 1.0, 0.5, 0.75})));\n    assert(candidate((std::vector<float>({12.0, 11.0,\
    \ 15.0, 13.0, 14.0}))) == (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n\
    }\n"
  stdout: ''
  stderr: "tmp1ffu2vlk: /tmp/tmp1ffu2vlk.cpp:22: int main(): Assertion `candidate((std::vector<float>({2.0,\
    \ 49.9}))) == (std::vector<float>({0.0, 1.0}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\n\
    std::vector<float> rescale_to_unit(std::vector<float> numbers) {\n    assert(numbers.size()\
    \ > 1);\n    std::vector<float> rescaled_numbers(numbers.size());\n    float smallest_number\
    \ = numbers[0];\n    float largest_number = numbers[0];\n    for (size_t i = 1;\
    \ i < numbers.size(); ++i) {\n        smallest_number = std::min(smallest_number,\
    \ numbers[i]);\n        largest_number = std::max(largest_number, numbers[i]);\n\
    \    }\n    for (size_t i = 0; i < numbers.size(); ++i) {\n        rescaled_numbers[i]\
    \ = numbers[i] - smallest_number / largest_number;\n    }\n    return rescaled_numbers;\n\
    }\nint main() {\n    auto candidate = rescale_to_unit;\n    assert(candidate((std::vector<float>({2.0,\
    \ 49.9}))) == (std::vector<float>({0.0, 1.0})));\n    assert(candidate((std::vector<float>({100.0,\
    \ 49.9}))) == (std::vector<float>({1.0, 0.0})));\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0, 4.0, 5.0}))) == (std::vector<float>({0.0, 0.25, 0.5, 0.75, 1.0})));\n\
    \    assert(candidate((std::vector<float>({2.0, 1.0, 5.0, 3.0, 4.0}))) == (std::vector<float>({0.25,\
    \ 0.0, 1.0, 0.5, 0.75})));\n    assert(candidate((std::vector<float>({12.0, 11.0,\
    \ 15.0, 13.0, 14.0}))) == (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n\
    }\n"
  stdout: ''
  stderr: "tmp8g3kqjf2: /tmp/tmp8g3kqjf2.cpp:23: int main(): Assertion `candidate((std::vector<float>({2.0,\
    \ 49.9}))) == (std::vector<float>({0.0, 1.0}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\n\
    std::vector<float> rescale_to_unit(std::vector<float> numbers) {\n    std::vector<float>\
    \ rescaled_numbers;\n    rescaled_numbers.reserve(numbers.size());\n    for (float\
    \ number : numbers) {\n        rescaled_numbers.push_back(number / numbers[0]);\n\
    \    }\n    return rescaled_numbers;\n}\nint main() {\n    auto candidate = rescale_to_unit;\n\
    \    assert(candidate((std::vector<float>({2.0, 49.9}))) == (std::vector<float>({0.0,\
    \ 1.0})));\n    assert(candidate((std::vector<float>({100.0, 49.9}))) == (std::vector<float>({1.0,\
    \ 0.0})));\n    assert(candidate((std::vector<float>({1.0, 2.0, 3.0, 4.0, 5.0})))\
    \ == (std::vector<float>({0.0, 0.25, 0.5, 0.75, 1.0})));\n    assert(candidate((std::vector<float>({2.0,\
    \ 1.0, 5.0, 3.0, 4.0}))) == (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n\
    \    assert(candidate((std::vector<float>({12.0, 11.0, 15.0, 13.0, 14.0}))) ==\
    \ (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n}\n"
  stdout: ''
  stderr: "tmpkl3v8lhp: /tmp/tmpkl3v8lhp.cpp:17: int main(): Assertion `candidate((std::vector<float>({2.0,\
    \ 49.9}))) == (std::vector<float>({0.0, 1.0}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\n\
    std::vector<float> rescale_to_unit(std::vector<float> numbers) {\n    std::vector<float>\
    \ rescaled_numbers;\n    rescaled_numbers.reserve(numbers.size());\n    for (float\
    \ number : numbers) {\n        rescaled_numbers.push_back(number / numbers[0]);\n\
    \    }\n    return rescaled_numbers;\n}\nint main() {\n    auto candidate = rescale_to_unit;\n\
    \    assert(candidate((std::vector<float>({2.0, 49.9}))) == (std::vector<float>({0.0,\
    \ 1.0})));\n    assert(candidate((std::vector<float>({100.0, 49.9}))) == (std::vector<float>({1.0,\
    \ 0.0})));\n    assert(candidate((std::vector<float>({1.0, 2.0, 3.0, 4.0, 5.0})))\
    \ == (std::vector<float>({0.0, 0.25, 0.5, 0.75, 1.0})));\n    assert(candidate((std::vector<float>({2.0,\
    \ 1.0, 5.0, 3.0, 4.0}))) == (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n\
    \    assert(candidate((std::vector<float>({12.0, 11.0, 15.0, 13.0, 14.0}))) ==\
    \ (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n}\n"
  stdout: ''
  stderr: "tmpg211sq6c: /tmp/tmpg211sq6c.cpp:17: int main(): Assertion `candidate((std::vector<float>({2.0,\
    \ 49.9}))) == (std::vector<float>({0.0, 1.0}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\n\
    std::vector<float> rescale_to_unit(std::vector<float> numbers) {\n    std::vector<float>\
    \ rescaled_numbers;\n    rescaled_numbers.reserve(numbers.size());\n    for (float\
    \ number : numbers) {\n        rescaled_numbers.push_back(number / numbers[0]);\n\
    \    }\n    return rescaled_numbers;\n}\nint main() {\n    auto candidate = rescale_to_unit;\n\
    \    assert(candidate((std::vector<float>({2.0, 49.9}))) == (std::vector<float>({0.0,\
    \ 1.0})));\n    assert(candidate((std::vector<float>({100.0, 49.9}))) == (std::vector<float>({1.0,\
    \ 0.0})));\n    assert(candidate((std::vector<float>({1.0, 2.0, 3.0, 4.0, 5.0})))\
    \ == (std::vector<float>({0.0, 0.25, 0.5, 0.75, 1.0})));\n    assert(candidate((std::vector<float>({2.0,\
    \ 1.0, 5.0, 3.0, 4.0}))) == (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n\
    \    assert(candidate((std::vector<float>({12.0, 11.0, 15.0, 13.0, 14.0}))) ==\
    \ (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n}\n"
  stdout: ''
  stderr: "tmp9c86uwk8: /tmp/tmp9c86uwk8.cpp:17: int main(): Assertion `candidate((std::vector<float>({2.0,\
    \ 49.9}))) == (std::vector<float>({0.0, 1.0}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\n\
    std::vector<float> rescale_to_unit(std::vector<float> numbers) {\n    assert(numbers.size()\
    \ >= 2);\n    float min = *std::min_element(numbers.begin(), numbers.end());\n\
    \    float max = *std::max_element(numbers.begin(), numbers.end());\n    float\
    \ scale = 1.0f / (max - min);\n    for (float number : numbers) {\n        number\
    \ *= scale;\n    }\n    return numbers;\n}\nint main() {\n    auto candidate =\
    \ rescale_to_unit;\n    assert(candidate((std::vector<float>({2.0, 49.9}))) ==\
    \ (std::vector<float>({0.0, 1.0})));\n    assert(candidate((std::vector<float>({100.0,\
    \ 49.9}))) == (std::vector<float>({1.0, 0.0})));\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0, 4.0, 5.0}))) == (std::vector<float>({0.0, 0.25, 0.5, 0.75, 1.0})));\n\
    \    assert(candidate((std::vector<float>({2.0, 1.0, 5.0, 3.0, 4.0}))) == (std::vector<float>({0.25,\
    \ 0.0, 1.0, 0.5, 0.75})));\n    assert(candidate((std::vector<float>({12.0, 11.0,\
    \ 15.0, 13.0, 14.0}))) == (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n\
    }\n"
  stdout: ''
  stderr: "tmpztj33pzd: /tmp/tmpztj33pzd.cpp:19: int main(): Assertion `candidate((std::vector<float>({2.0,\
    \ 49.9}))) == (std::vector<float>({0.0, 1.0}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\n\
    std::vector<float> rescale_to_unit(std::vector<float> numbers) {\n    std::vector<float>\
    \ rescaled_numbers;\n    rescaled_numbers.reserve(numbers.size());\n    float\
    \ min = *std::min_element(numbers.begin(), numbers.end());\n    float max = *std::max_element(numbers.begin(),\
    \ numbers.end());\n    float range = max - min;\n    for (auto number : numbers)\
    \ {\n        rescaled_numbers.push_back(number * (range / numbers.back()));\n\
    \    }\n    return rescaled_numbers;\n}\nint main() {\n    auto candidate = rescale_to_unit;\n\
    \    assert(candidate((std::vector<float>({2.0, 49.9}))) == (std::vector<float>({0.0,\
    \ 1.0})));\n    assert(candidate((std::vector<float>({100.0, 49.9}))) == (std::vector<float>({1.0,\
    \ 0.0})));\n    assert(candidate((std::vector<float>({1.0, 2.0, 3.0, 4.0, 5.0})))\
    \ == (std::vector<float>({0.0, 0.25, 0.5, 0.75, 1.0})));\n    assert(candidate((std::vector<float>({2.0,\
    \ 1.0, 5.0, 3.0, 4.0}))) == (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n\
    \    assert(candidate((std::vector<float>({12.0, 11.0, 15.0, 13.0, 14.0}))) ==\
    \ (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n}\n"
  stdout: ''
  stderr: "tmp1jqr_wvu: /tmp/tmp1jqr_wvu.cpp:20: int main(): Assertion `candidate((std::vector<float>({2.0,\
    \ 49.9}))) == (std::vector<float>({0.0, 1.0}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\n\
    std::vector<float> rescale_to_unit(std::vector<float> numbers) {\n    assert(numbers.size()\
    \ >= 2);\n    std::vector<float> rescaled_numbers;\n    rescaled_numbers.reserve(numbers.size());\n\
    \    float smallest = numbers[0];\n    float largest = numbers[0];\n    for (float\
    \ number : numbers) {\n        rescaled_numbers.push_back(number - smallest);\n\
    \        smallest = std::min(smallest, number);\n        largest = std::max(largest,\
    \ number);\n    }\n    rescaled_numbers.push_back(1.0f - largest);\n    return\
    \ rescaled_numbers;\n}\nint main() {\n    auto candidate = rescale_to_unit;\n\
    \    assert(candidate((std::vector<float>({2.0, 49.9}))) == (std::vector<float>({0.0,\
    \ 1.0})));\n    assert(candidate((std::vector<float>({100.0, 49.9}))) == (std::vector<float>({1.0,\
    \ 0.0})));\n    assert(candidate((std::vector<float>({1.0, 2.0, 3.0, 4.0, 5.0})))\
    \ == (std::vector<float>({0.0, 0.25, 0.5, 0.75, 1.0})));\n    assert(candidate((std::vector<float>({2.0,\
    \ 1.0, 5.0, 3.0, 4.0}))) == (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n\
    \    assert(candidate((std::vector<float>({12.0, 11.0, 15.0, 13.0, 14.0}))) ==\
    \ (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n}\n"
  stdout: ''
  stderr: "tmpbbmqzr21: /tmp/tmpbbmqzr21.cpp:23: int main(): Assertion `candidate((std::vector<float>({2.0,\
    \ 49.9}))) == (std::vector<float>({0.0, 1.0}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\n\
    std::vector<float> rescale_to_unit(std::vector<float> numbers) {\n    assert(numbers.size()\
    \ >= 2);\n    std::vector<float> rescaled_numbers;\n    rescaled_numbers.reserve(numbers.size());\n\
    \    float min = *std::min_element(numbers.begin(), numbers.end());\n    float\
    \ max = *std::max_element(numbers.begin(), numbers.end());\n    float scale =\
    \ 1.0f / (max - min);\n    for (float number : numbers) {\n        rescaled_numbers.push_back(number\
    \ * scale);\n    }\n    return rescaled_numbers;\n}\nint main() {\n    auto candidate\
    \ = rescale_to_unit;\n    assert(candidate((std::vector<float>({2.0, 49.9})))\
    \ == (std::vector<float>({0.0, 1.0})));\n    assert(candidate((std::vector<float>({100.0,\
    \ 49.9}))) == (std::vector<float>({1.0, 0.0})));\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0, 4.0, 5.0}))) == (std::vector<float>({0.0, 0.25, 0.5, 0.75, 1.0})));\n\
    \    assert(candidate((std::vector<float>({2.0, 1.0, 5.0, 3.0, 4.0}))) == (std::vector<float>({0.25,\
    \ 0.0, 1.0, 0.5, 0.75})));\n    assert(candidate((std::vector<float>({12.0, 11.0,\
    \ 15.0, 13.0, 14.0}))) == (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n\
    }\n"
  stdout: ''
  stderr: "tmpk3h12_d0: /tmp/tmpk3h12_d0.cpp:21: int main(): Assertion `candidate((std::vector<float>({2.0,\
    \ 49.9}))) == (std::vector<float>({0.0, 1.0}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\n\
    std::vector<float> rescale_to_unit(std::vector<float> numbers) {\n    std::vector<float>\
    \ rescaled_numbers;\n    rescaled_numbers.reserve(numbers.size());\n    for (float\
    \ number : numbers) {\n        rescaled_numbers.push_back(number / numbers.size());\n\
    \    }\n    return rescaled_numbers;\n}\nint main() {\n    auto candidate = rescale_to_unit;\n\
    \    assert(candidate((std::vector<float>({2.0, 49.9}))) == (std::vector<float>({0.0,\
    \ 1.0})));\n    assert(candidate((std::vector<float>({100.0, 49.9}))) == (std::vector<float>({1.0,\
    \ 0.0})));\n    assert(candidate((std::vector<float>({1.0, 2.0, 3.0, 4.0, 5.0})))\
    \ == (std::vector<float>({0.0, 0.25, 0.5, 0.75, 1.0})));\n    assert(candidate((std::vector<float>({2.0,\
    \ 1.0, 5.0, 3.0, 4.0}))) == (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n\
    \    assert(candidate((std::vector<float>({12.0, 11.0, 15.0, 13.0, 14.0}))) ==\
    \ (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n}\n"
  stdout: ''
  stderr: "tmp5dwjqnt_: /tmp/tmp5dwjqnt_.cpp:17: int main(): Assertion `candidate((std::vector<float>({2.0,\
    \ 49.9}))) == (std::vector<float>({0.0, 1.0}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\n\
    std::vector<float> rescale_to_unit(std::vector<float> numbers) {\n    std::vector<float>\
    \ rescaled_numbers;\n    rescaled_numbers.reserve(numbers.size());\n    for (auto\
    \ number : numbers) {\n        rescaled_numbers.push_back(std::min(std::max(number,\
    \ 0.0f), 1.0f));\n    }\n    return rescaled_numbers;\n}\nint main() {\n    auto\
    \ candidate = rescale_to_unit;\n    assert(candidate((std::vector<float>({2.0,\
    \ 49.9}))) == (std::vector<float>({0.0, 1.0})));\n    assert(candidate((std::vector<float>({100.0,\
    \ 49.9}))) == (std::vector<float>({1.0, 0.0})));\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0, 4.0, 5.0}))) == (std::vector<float>({0.0, 0.25, 0.5, 0.75, 1.0})));\n\
    \    assert(candidate((std::vector<float>({2.0, 1.0, 5.0, 3.0, 4.0}))) == (std::vector<float>({0.25,\
    \ 0.0, 1.0, 0.5, 0.75})));\n    assert(candidate((std::vector<float>({12.0, 11.0,\
    \ 15.0, 13.0, 14.0}))) == (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n\
    }\n"
  stdout: ''
  stderr: "tmpeq8j_hov: /tmp/tmpeq8j_hov.cpp:17: int main(): Assertion `candidate((std::vector<float>({2.0,\
    \ 49.9}))) == (std::vector<float>({0.0, 1.0}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\n\
    std::vector<float> rescale_to_unit(std::vector<float> numbers) {\n    assert(numbers.size()\
    \ >= 2);\n    std::vector<float> rescaled_numbers;\n    rescaled_numbers.reserve(numbers.size());\n\
    \    float smallest_number = numbers[0];\n    float largest_number = numbers[0];\n\
    \    for (float number : numbers) {\n        smallest_number = std::min(smallest_number,\
    \ number);\n        largest_number = std::max(largest_number, number);\n    }\n\
    \    float scale = 1.0f / (largest_number - smallest_number);\n    for (float\
    \ number : numbers) {\n        rescaled_numbers.push_back(smallest_number + (number\
    \ - smallest_number) * scale);\n    }\n    return rescaled_numbers;\n}\nint main()\
    \ {\n    auto candidate = rescale_to_unit;\n    assert(candidate((std::vector<float>({2.0,\
    \ 49.9}))) == (std::vector<float>({0.0, 1.0})));\n    assert(candidate((std::vector<float>({100.0,\
    \ 49.9}))) == (std::vector<float>({1.0, 0.0})));\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0, 4.0, 5.0}))) == (std::vector<float>({0.0, 0.25, 0.5, 0.75, 1.0})));\n\
    \    assert(candidate((std::vector<float>({2.0, 1.0, 5.0, 3.0, 4.0}))) == (std::vector<float>({0.25,\
    \ 0.0, 1.0, 0.5, 0.75})));\n    assert(candidate((std::vector<float>({12.0, 11.0,\
    \ 15.0, 13.0, 14.0}))) == (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n\
    }\n"
  stdout: ''
  stderr: "tmpgiyxqu38: /tmp/tmpgiyxqu38.cpp:25: int main(): Assertion `candidate((std::vector<float>({2.0,\
    \ 49.9}))) == (std::vector<float>({0.0, 1.0}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\n\
    std::vector<float> rescale_to_unit(std::vector<float> numbers) {\n    assert(numbers.size()\
    \ > 1);\n    std::vector<float> result(numbers.begin(), numbers.end());\n    float\
    \ min = *std::min_element(numbers.begin(), numbers.end());\n    float max = *std::max_element(numbers.begin(),\
    \ numbers.end());\n    float scale = 1.0f / (max - min);\n    for (auto number\
    \ : numbers) {\n        result[numbers.find(number) - numbers.begin()] = scale\
    \ * number;\n    }\n    return result;\n}\nint main() {\n    auto candidate =\
    \ rescale_to_unit;\n    assert(candidate((std::vector<float>({2.0, 49.9}))) ==\
    \ (std::vector<float>({0.0, 1.0})));\n    assert(candidate((std::vector<float>({100.0,\
    \ 49.9}))) == (std::vector<float>({1.0, 0.0})));\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0, 4.0, 5.0}))) == (std::vector<float>({0.0, 0.25, 0.5, 0.75, 1.0})));\n\
    \    assert(candidate((std::vector<float>({2.0, 1.0, 5.0, 3.0, 4.0}))) == (std::vector<float>({0.25,\
    \ 0.0, 1.0, 0.5, 0.75})));\n    assert(candidate((std::vector<float>({12.0, 11.0,\
    \ 15.0, 13.0, 14.0}))) == (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n\
    }\n"
  stdout: ''
  stderr: "/tmp/tmplu360men.cpp: In function \u2018std::vector<float> rescale_to_unit(std::vector<float>)\u2019\
    :\n/tmp/tmplu360men.cpp:14:24: error: \u2018class std::vector<float>\u2019 has\
    \ no member named \u2018find\u2019\n   14 |         result[numbers.find(number)\
    \ - numbers.begin()] = scale * number;\n      |                        ^~~~\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\n\
    std::vector<float> rescale_to_unit(std::vector<float> numbers) {\n    assert(numbers.size()\
    \ >= 2);\n    std::vector<float> rescaled_numbers;\n    rescaled_numbers.reserve(numbers.size());\n\
    \    for (float number : numbers) {\n        rescaled_numbers.push_back(number);\n\
    \        rescaled_numbers.push_back(number);\n    }\n    return rescaled_numbers;\n\
    }\nint main() {\n    auto candidate = rescale_to_unit;\n    assert(candidate((std::vector<float>({2.0,\
    \ 49.9}))) == (std::vector<float>({0.0, 1.0})));\n    assert(candidate((std::vector<float>({100.0,\
    \ 49.9}))) == (std::vector<float>({1.0, 0.0})));\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0, 4.0, 5.0}))) == (std::vector<float>({0.0, 0.25, 0.5, 0.75, 1.0})));\n\
    \    assert(candidate((std::vector<float>({2.0, 1.0, 5.0, 3.0, 4.0}))) == (std::vector<float>({0.25,\
    \ 0.0, 1.0, 0.5, 0.75})));\n    assert(candidate((std::vector<float>({12.0, 11.0,\
    \ 15.0, 13.0, 14.0}))) == (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n\
    }\n"
  stdout: ''
  stderr: "tmphffymod1: /tmp/tmphffymod1.cpp:19: int main(): Assertion `candidate((std::vector<float>({2.0,\
    \ 49.9}))) == (std::vector<float>({0.0, 1.0}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\n\
    std::vector<float> rescale_to_unit(std::vector<float> numbers) {\n    assert(numbers.size()\
    \ > 1);\n    std::vector<float> result(numbers.size());\n    float min = std::numeric_limits<float>::min();\n\
    \    float max = std::numeric_limits<float>::max();\n    for (size_t i = 0; i\
    \ < numbers.size(); i++) {\n        result[i] = numbers[i] - min;\n        result[i]\
    \ = result[i] / (max - min);\n    }\n    return result;\n}\nint main() {\n   \
    \ auto candidate = rescale_to_unit;\n    assert(candidate((std::vector<float>({2.0,\
    \ 49.9}))) == (std::vector<float>({0.0, 1.0})));\n    assert(candidate((std::vector<float>({100.0,\
    \ 49.9}))) == (std::vector<float>({1.0, 0.0})));\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0, 4.0, 5.0}))) == (std::vector<float>({0.0, 0.25, 0.5, 0.75, 1.0})));\n\
    \    assert(candidate((std::vector<float>({2.0, 1.0, 5.0, 3.0, 4.0}))) == (std::vector<float>({0.25,\
    \ 0.0, 1.0, 0.5, 0.75})));\n    assert(candidate((std::vector<float>({12.0, 11.0,\
    \ 15.0, 13.0, 14.0}))) == (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n\
    }\n"
  stdout: ''
  stderr: "tmpnu8dwiup: /tmp/tmpnu8dwiup.cpp:20: int main(): Assertion `candidate((std::vector<float>({2.0,\
    \ 49.9}))) == (std::vector<float>({0.0, 1.0}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\n\
    std::vector<float> rescale_to_unit(std::vector<float> numbers) {\n    assert(numbers.size()\
    \ >= 2);\n    std::vector<float> rescaled_numbers;\n    rescaled_numbers.reserve(numbers.size());\n\
    \    float min = *std::min_element(numbers.begin(), numbers.end());\n    float\
    \ max = *std::max_element(numbers.begin(), numbers.end());\n    float scale =\
    \ 1.0f / (max - min);\n    for (float number : numbers) {\n        rescaled_numbers.push_back(number\
    \ * scale);\n    }\n    return rescaled_numbers;\n}\nint main() {\n    auto candidate\
    \ = rescale_to_unit;\n    assert(candidate((std::vector<float>({2.0, 49.9})))\
    \ == (std::vector<float>({0.0, 1.0})));\n    assert(candidate((std::vector<float>({100.0,\
    \ 49.9}))) == (std::vector<float>({1.0, 0.0})));\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0, 4.0, 5.0}))) == (std::vector<float>({0.0, 0.25, 0.5, 0.75, 1.0})));\n\
    \    assert(candidate((std::vector<float>({2.0, 1.0, 5.0, 3.0, 4.0}))) == (std::vector<float>({0.25,\
    \ 0.0, 1.0, 0.5, 0.75})));\n    assert(candidate((std::vector<float>({12.0, 11.0,\
    \ 15.0, 13.0, 14.0}))) == (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n\
    }\n"
  stdout: ''
  stderr: "tmpefu8bie7: /tmp/tmpefu8bie7.cpp:21: int main(): Assertion `candidate((std::vector<float>({2.0,\
    \ 49.9}))) == (std::vector<float>({0.0, 1.0}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\n\
    std::vector<float> rescale_to_unit(std::vector<float> numbers) {\n    std::vector<float>\
    \ rescaled_numbers;\n    rescaled_numbers.reserve(numbers.size());\n    for (float\
    \ number : numbers) {\n        rescaled_numbers.push_back(number / numbers.size());\n\
    \    }\n    return rescaled_numbers;\n}\nint main() {\n    auto candidate = rescale_to_unit;\n\
    \    assert(candidate((std::vector<float>({2.0, 49.9}))) == (std::vector<float>({0.0,\
    \ 1.0})));\n    assert(candidate((std::vector<float>({100.0, 49.9}))) == (std::vector<float>({1.0,\
    \ 0.0})));\n    assert(candidate((std::vector<float>({1.0, 2.0, 3.0, 4.0, 5.0})))\
    \ == (std::vector<float>({0.0, 0.25, 0.5, 0.75, 1.0})));\n    assert(candidate((std::vector<float>({2.0,\
    \ 1.0, 5.0, 3.0, 4.0}))) == (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n\
    \    assert(candidate((std::vector<float>({12.0, 11.0, 15.0, 13.0, 14.0}))) ==\
    \ (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n}\n"
  stdout: ''
  stderr: "tmpl95l9paz: /tmp/tmpl95l9paz.cpp:17: int main(): Assertion `candidate((std::vector<float>({2.0,\
    \ 49.9}))) == (std::vector<float>({0.0, 1.0}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\n\
    std::vector<float> rescale_to_unit(std::vector<float> numbers) {\n    std::vector<float>\
    \ rescaled_numbers(numbers.size());\n    for (size_t i = 0; i < numbers.size();\
    \ i++) {\n        rescaled_numbers[i] = numbers[i] / numbers[0];\n    }\n    return\
    \ rescaled_numbers;\n}\nint main() {\n    auto candidate = rescale_to_unit;\n\
    \    assert(candidate((std::vector<float>({2.0, 49.9}))) == (std::vector<float>({0.0,\
    \ 1.0})));\n    assert(candidate((std::vector<float>({100.0, 49.9}))) == (std::vector<float>({1.0,\
    \ 0.0})));\n    assert(candidate((std::vector<float>({1.0, 2.0, 3.0, 4.0, 5.0})))\
    \ == (std::vector<float>({0.0, 0.25, 0.5, 0.75, 1.0})));\n    assert(candidate((std::vector<float>({2.0,\
    \ 1.0, 5.0, 3.0, 4.0}))) == (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n\
    \    assert(candidate((std::vector<float>({12.0, 11.0, 15.0, 13.0, 14.0}))) ==\
    \ (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n}\n"
  stdout: ''
  stderr: "tmpugojbkjd: /tmp/tmpugojbkjd.cpp:16: int main(): Assertion `candidate((std::vector<float>({2.0,\
    \ 49.9}))) == (std::vector<float>({0.0, 1.0}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\n\
    std::vector<float> rescale_to_unit(std::vector<float> numbers) {\n    std::vector<float>\
    \ rescaled_numbers;\n    rescaled_numbers.reserve(numbers.size());\n    for (float\
    \ number : numbers) {\n        rescaled_numbers.push_back(std::min(std::max(number,\
    \ 0.0f), 1.0f));\n    }\n    return rescaled_numbers;\n}\nint main() {\n    auto\
    \ candidate = rescale_to_unit;\n    assert(candidate((std::vector<float>({2.0,\
    \ 49.9}))) == (std::vector<float>({0.0, 1.0})));\n    assert(candidate((std::vector<float>({100.0,\
    \ 49.9}))) == (std::vector<float>({1.0, 0.0})));\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0, 4.0, 5.0}))) == (std::vector<float>({0.0, 0.25, 0.5, 0.75, 1.0})));\n\
    \    assert(candidate((std::vector<float>({2.0, 1.0, 5.0, 3.0, 4.0}))) == (std::vector<float>({0.25,\
    \ 0.0, 1.0, 0.5, 0.75})));\n    assert(candidate((std::vector<float>({12.0, 11.0,\
    \ 15.0, 13.0, 14.0}))) == (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n\
    }\n"
  stdout: ''
  stderr: "tmpd_rqtxt6: /tmp/tmpd_rqtxt6.cpp:17: int main(): Assertion `candidate((std::vector<float>({2.0,\
    \ 49.9}))) == (std::vector<float>({0.0, 1.0}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\n\
    std::vector<float> rescale_to_unit(std::vector<float> numbers) {\n    assert(numbers.size()\
    \ >= 2);\n    std::vector<float> new_numbers;\n    new_numbers.reserve(numbers.size());\n\
    \    for (float number : numbers) {\n        new_numbers.push_back(number);\n\
    \    }\n    for (float number : numbers) {\n        new_numbers.push_back(number\
    \ / new_numbers.size());\n    }\n    return new_numbers;\n}\nint main() {\n  \
    \  auto candidate = rescale_to_unit;\n    assert(candidate((std::vector<float>({2.0,\
    \ 49.9}))) == (std::vector<float>({0.0, 1.0})));\n    assert(candidate((std::vector<float>({100.0,\
    \ 49.9}))) == (std::vector<float>({1.0, 0.0})));\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0, 4.0, 5.0}))) == (std::vector<float>({0.0, 0.25, 0.5, 0.75, 1.0})));\n\
    \    assert(candidate((std::vector<float>({2.0, 1.0, 5.0, 3.0, 4.0}))) == (std::vector<float>({0.25,\
    \ 0.0, 1.0, 0.5, 0.75})));\n    assert(candidate((std::vector<float>({12.0, 11.0,\
    \ 15.0, 13.0, 14.0}))) == (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n\
    }\n"
  stdout: ''
  stderr: "tmp7tcc5e7t: /tmp/tmp7tcc5e7t.cpp:21: int main(): Assertion `candidate((std::vector<float>({2.0,\
    \ 49.9}))) == (std::vector<float>({0.0, 1.0}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\n\
    std::vector<float> rescale_to_unit(std::vector<float> numbers) {\n    assert(numbers.size()\
    \ >= 2);\n    std::vector<float> result;\n    float min = numbers[0];\n    float\
    \ max = numbers[0];\n    for (auto number : numbers) {\n        min = std::min(min,\
    \ number);\n        max = std::max(max, number);\n    }\n    for (auto number\
    \ : numbers) {\n        result.push_back(number - min) / (max - min);\n    }\n\
    \    return result;\n}\nint main() {\n    auto candidate = rescale_to_unit;\n\
    \    assert(candidate((std::vector<float>({2.0, 49.9}))) == (std::vector<float>({0.0,\
    \ 1.0})));\n    assert(candidate((std::vector<float>({100.0, 49.9}))) == (std::vector<float>({1.0,\
    \ 0.0})));\n    assert(candidate((std::vector<float>({1.0, 2.0, 3.0, 4.0, 5.0})))\
    \ == (std::vector<float>({0.0, 0.25, 0.5, 0.75, 1.0})));\n    assert(candidate((std::vector<float>({2.0,\
    \ 1.0, 5.0, 3.0, 4.0}))) == (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n\
    \    assert(candidate((std::vector<float>({12.0, 11.0, 15.0, 13.0, 14.0}))) ==\
    \ (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpsa2aylnp.cpp: In function \u2018std::vector<float> rescale_to_unit(std::vector<float>)\u2019\
    :\n/tmp/tmpsa2aylnp.cpp:17:40: error: invalid operands of types \u2018void\u2019\
    \ and \u2018float\u2019 to binary \u2018operator/\u2019\n   17 |         result.push_back(number\
    \ - min) / (max - min);\n      |         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ^ ~~~~~~~~~~~\n\
    \      |                         |                     |\n      |            \
    \             void                  float\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\n\
    std::vector<float> rescale_to_unit(std::vector<float> numbers) {\n    std::vector<float>\
    \ result;\n    float min = std::numeric_limits<float>::max();\n    float max =\
    \ std::numeric_limits<float>::min();\n    for (float number : numbers) {\n   \
    \     min = std::min(min, number);\n        max = std::max(max, number);\n   \
    \ }\n    for (float number : numbers) {\n        result.push_back(number - min)\
    \ / (max - min);\n    }\n    return result;\n}\nint main() {\n    auto candidate\
    \ = rescale_to_unit;\n    assert(candidate((std::vector<float>({2.0, 49.9})))\
    \ == (std::vector<float>({0.0, 1.0})));\n    assert(candidate((std::vector<float>({100.0,\
    \ 49.9}))) == (std::vector<float>({1.0, 0.0})));\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0, 4.0, 5.0}))) == (std::vector<float>({0.0, 0.25, 0.5, 0.75, 1.0})));\n\
    \    assert(candidate((std::vector<float>({2.0, 1.0, 5.0, 3.0, 4.0}))) == (std::vector<float>({0.25,\
    \ 0.0, 1.0, 0.5, 0.75})));\n    assert(candidate((std::vector<float>({12.0, 11.0,\
    \ 15.0, 13.0, 14.0}))) == (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n\
    }\n"
  stdout: ''
  stderr: "/tmp/tmpqkd44i57.cpp: In function \u2018std::vector<float> rescale_to_unit(std::vector<float>)\u2019\
    :\n/tmp/tmpqkd44i57.cpp:16:40: error: invalid operands of types \u2018void\u2019\
    \ and \u2018float\u2019 to binary \u2018operator/\u2019\n   16 |         result.push_back(number\
    \ - min) / (max - min);\n      |         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ^ ~~~~~~~~~~~\n\
    \      |                         |                     |\n      |            \
    \             void                  float\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\n\
    std::vector<float> rescale_to_unit(std::vector<float> numbers) {\n    std::vector<float>\
    \ rescaled_numbers;\n    rescaled_numbers.reserve(numbers.size());\n    for (float\
    \ number : numbers) {\n        rescaled_numbers.push_back(number / numbers[0]);\n\
    \    }\n    return rescaled_numbers;\n}\nint main() {\n    auto candidate = rescale_to_unit;\n\
    \    assert(candidate((std::vector<float>({2.0, 49.9}))) == (std::vector<float>({0.0,\
    \ 1.0})));\n    assert(candidate((std::vector<float>({100.0, 49.9}))) == (std::vector<float>({1.0,\
    \ 0.0})));\n    assert(candidate((std::vector<float>({1.0, 2.0, 3.0, 4.0, 5.0})))\
    \ == (std::vector<float>({0.0, 0.25, 0.5, 0.75, 1.0})));\n    assert(candidate((std::vector<float>({2.0,\
    \ 1.0, 5.0, 3.0, 4.0}))) == (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n\
    \    assert(candidate((std::vector<float>({12.0, 11.0, 15.0, 13.0, 14.0}))) ==\
    \ (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n}\n"
  stdout: ''
  stderr: "tmpnsx0q2ew: /tmp/tmpnsx0q2ew.cpp:17: int main(): Assertion `candidate((std::vector<float>({2.0,\
    \ 49.9}))) == (std::vector<float>({0.0, 1.0}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\n\
    std::vector<float> rescale_to_unit(std::vector<float> numbers) {\n    std::vector<float>\
    \ rescaled_numbers;\n    rescaled_numbers.reserve(numbers.size());\n    for (float\
    \ number : numbers) {\n        rescaled_numbers.push_back(std::min(std::max(number,\
    \ 0.0f), 1.0f));\n    }\n    return rescaled_numbers;\n}\nint main() {\n    auto\
    \ candidate = rescale_to_unit;\n    assert(candidate((std::vector<float>({2.0,\
    \ 49.9}))) == (std::vector<float>({0.0, 1.0})));\n    assert(candidate((std::vector<float>({100.0,\
    \ 49.9}))) == (std::vector<float>({1.0, 0.0})));\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0, 4.0, 5.0}))) == (std::vector<float>({0.0, 0.25, 0.5, 0.75, 1.0})));\n\
    \    assert(candidate((std::vector<float>({2.0, 1.0, 5.0, 3.0, 4.0}))) == (std::vector<float>({0.25,\
    \ 0.0, 1.0, 0.5, 0.75})));\n    assert(candidate((std::vector<float>({12.0, 11.0,\
    \ 15.0, 13.0, 14.0}))) == (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n\
    }\n"
  stdout: ''
  stderr: "tmp0luaxxrl: /tmp/tmp0luaxxrl.cpp:17: int main(): Assertion `candidate((std::vector<float>({2.0,\
    \ 49.9}))) == (std::vector<float>({0.0, 1.0}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\n\
    std::vector<float> rescale_to_unit(std::vector<float> numbers) {\n    std::vector<float>\
    \ result;\n    float min = *std::min_element(numbers.begin(), numbers.end());\n\
    \    float max = *std::max_element(numbers.begin(), numbers.end());\n    float\
    \ range = max - min;\n    float scale = 1.0f / range;\n    for (float number :\
    \ numbers) {\n        result.push_back(number * scale);\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = rescale_to_unit;\n    assert(candidate((std::vector<float>({2.0,\
    \ 49.9}))) == (std::vector<float>({0.0, 1.0})));\n    assert(candidate((std::vector<float>({100.0,\
    \ 49.9}))) == (std::vector<float>({1.0, 0.0})));\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0, 4.0, 5.0}))) == (std::vector<float>({0.0, 0.25, 0.5, 0.75, 1.0})));\n\
    \    assert(candidate((std::vector<float>({2.0, 1.0, 5.0, 3.0, 4.0}))) == (std::vector<float>({0.25,\
    \ 0.0, 1.0, 0.5, 0.75})));\n    assert(candidate((std::vector<float>({12.0, 11.0,\
    \ 15.0, 13.0, 14.0}))) == (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n\
    }\n"
  stdout: ''
  stderr: "tmpn_pg8_we: /tmp/tmpn_pg8_we.cpp:20: int main(): Assertion `candidate((std::vector<float>({2.0,\
    \ 49.9}))) == (std::vector<float>({0.0, 1.0}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\n\
    std::vector<float> rescale_to_unit(std::vector<float> numbers) {\n    std::vector<float>\
    \ rescaled_numbers;\n    rescaled_numbers.reserve(numbers.size());\n    for (float\
    \ number : numbers) {\n        rescaled_numbers.push_back(number / numbers.size());\n\
    \    }\n    return rescaled_numbers;\n}\nint main() {\n    auto candidate = rescale_to_unit;\n\
    \    assert(candidate((std::vector<float>({2.0, 49.9}))) == (std::vector<float>({0.0,\
    \ 1.0})));\n    assert(candidate((std::vector<float>({100.0, 49.9}))) == (std::vector<float>({1.0,\
    \ 0.0})));\n    assert(candidate((std::vector<float>({1.0, 2.0, 3.0, 4.0, 5.0})))\
    \ == (std::vector<float>({0.0, 0.25, 0.5, 0.75, 1.0})));\n    assert(candidate((std::vector<float>({2.0,\
    \ 1.0, 5.0, 3.0, 4.0}))) == (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n\
    \    assert(candidate((std::vector<float>({12.0, 11.0, 15.0, 13.0, 14.0}))) ==\
    \ (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n}\n"
  stdout: ''
  stderr: "tmp5pkwmukj: /tmp/tmp5pkwmukj.cpp:17: int main(): Assertion `candidate((std::vector<float>({2.0,\
    \ 49.9}))) == (std::vector<float>({0.0, 1.0}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\n\
    std::vector<float> rescale_to_unit(std::vector<float> numbers) {\n    assert(numbers.size()\
    \ >= 2);\n    std::vector<float> rescaled_numbers;\n    rescaled_numbers.reserve(numbers.size());\n\
    \    for (float number : numbers) {\n        rescaled_numbers.push_back(number\
    \ / numbers[0]);\n    }\n    return rescaled_numbers;\n}\nint main() {\n    auto\
    \ candidate = rescale_to_unit;\n    assert(candidate((std::vector<float>({2.0,\
    \ 49.9}))) == (std::vector<float>({0.0, 1.0})));\n    assert(candidate((std::vector<float>({100.0,\
    \ 49.9}))) == (std::vector<float>({1.0, 0.0})));\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0, 4.0, 5.0}))) == (std::vector<float>({0.0, 0.25, 0.5, 0.75, 1.0})));\n\
    \    assert(candidate((std::vector<float>({2.0, 1.0, 5.0, 3.0, 4.0}))) == (std::vector<float>({0.25,\
    \ 0.0, 1.0, 0.5, 0.75})));\n    assert(candidate((std::vector<float>({12.0, 11.0,\
    \ 15.0, 13.0, 14.0}))) == (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n\
    }\n"
  stdout: ''
  stderr: "tmpub11uisi: /tmp/tmpub11uisi.cpp:18: int main(): Assertion `candidate((std::vector<float>({2.0,\
    \ 49.9}))) == (std::vector<float>({0.0, 1.0}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\n\
    std::vector<float> rescale_to_unit(std::vector<float> numbers) {\n    std::vector<float>\
    \ rescaled_numbers;\n    rescaled_numbers.reserve(numbers.size());\n    for (float\
    \ number : numbers) {\n        rescaled_numbers.push_back(std::min(std::max(number,\
    \ 0.0f), 1.0f));\n    }\n    return rescaled_numbers;\n}\nint main() {\n    auto\
    \ candidate = rescale_to_unit;\n    assert(candidate((std::vector<float>({2.0,\
    \ 49.9}))) == (std::vector<float>({0.0, 1.0})));\n    assert(candidate((std::vector<float>({100.0,\
    \ 49.9}))) == (std::vector<float>({1.0, 0.0})));\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0, 4.0, 5.0}))) == (std::vector<float>({0.0, 0.25, 0.5, 0.75, 1.0})));\n\
    \    assert(candidate((std::vector<float>({2.0, 1.0, 5.0, 3.0, 4.0}))) == (std::vector<float>({0.25,\
    \ 0.0, 1.0, 0.5, 0.75})));\n    assert(candidate((std::vector<float>({12.0, 11.0,\
    \ 15.0, 13.0, 14.0}))) == (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n\
    }\n"
  stdout: ''
  stderr: "tmpkii82f_t: /tmp/tmpkii82f_t.cpp:17: int main(): Assertion `candidate((std::vector<float>({2.0,\
    \ 49.9}))) == (std::vector<float>({0.0, 1.0}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\n\
    std::vector<float> rescale_to_unit(std::vector<float> numbers) {\n    std::vector<float>\
    \ rescaled_numbers;\n    rescaled_numbers.reserve(numbers.size());\n    float\
    \ min = std::numeric_limits<float>::min();\n    float max = std::numeric_limits<float>::max();\n\
    \    for (float number : numbers) {\n        rescaled_numbers.push_back(number\
    \ - min) / (max - min);\n    }\n    return rescaled_numbers;\n}\nint main() {\n\
    \    auto candidate = rescale_to_unit;\n    assert(candidate((std::vector<float>({2.0,\
    \ 49.9}))) == (std::vector<float>({0.0, 1.0})));\n    assert(candidate((std::vector<float>({100.0,\
    \ 49.9}))) == (std::vector<float>({1.0, 0.0})));\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0, 4.0, 5.0}))) == (std::vector<float>({0.0, 0.25, 0.5, 0.75, 1.0})));\n\
    \    assert(candidate((std::vector<float>({2.0, 1.0, 5.0, 3.0, 4.0}))) == (std::vector<float>({0.25,\
    \ 0.0, 1.0, 0.5, 0.75})));\n    assert(candidate((std::vector<float>({12.0, 11.0,\
    \ 15.0, 13.0, 14.0}))) == (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n\
    }\n"
  stdout: ''
  stderr: "/tmp/tmpdiigwyn2.cpp: In function \u2018std::vector<float> rescale_to_unit(std::vector<float>)\u2019\
    :\n/tmp/tmpdiigwyn2.cpp:13:50: error: invalid operands of types \u2018void\u2019\
    \ and \u2018float\u2019 to binary \u2018operator/\u2019\n   13 |         rescaled_numbers.push_back(number\
    \ - min) / (max - min);\n      |         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\
    \ ^ ~~~~~~~~~~~\n      |                                   |                 \
    \    |\n      |                                   void                  float\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\n\
    std::vector<float> rescale_to_unit(std::vector<float> numbers) {\n    assert(numbers.size()\
    \ >= 2);\n    float min = *std::min_element(numbers.begin(), numbers.end());\n\
    \    float max = *std::max_element(numbers.begin(), numbers.end());\n    float\
    \ range = max - min;\n    float scale = 1.0f / range;\n    std::vector<float>\
    \ rescaled_numbers;\n    for (float number : numbers) {\n        rescaled_numbers.push_back(number\
    \ * scale);\n    }\n    return rescaled_numbers;\n}\nint main() {\n    auto candidate\
    \ = rescale_to_unit;\n    assert(candidate((std::vector<float>({2.0, 49.9})))\
    \ == (std::vector<float>({0.0, 1.0})));\n    assert(candidate((std::vector<float>({100.0,\
    \ 49.9}))) == (std::vector<float>({1.0, 0.0})));\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0, 4.0, 5.0}))) == (std::vector<float>({0.0, 0.25, 0.5, 0.75, 1.0})));\n\
    \    assert(candidate((std::vector<float>({2.0, 1.0, 5.0, 3.0, 4.0}))) == (std::vector<float>({0.25,\
    \ 0.0, 1.0, 0.5, 0.75})));\n    assert(candidate((std::vector<float>({12.0, 11.0,\
    \ 15.0, 13.0, 14.0}))) == (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n\
    }\n"
  stdout: ''
  stderr: "tmpnf2eu13f: /tmp/tmpnf2eu13f.cpp:21: int main(): Assertion `candidate((std::vector<float>({2.0,\
    \ 49.9}))) == (std::vector<float>({0.0, 1.0}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\n\
    std::vector<float> rescale_to_unit(std::vector<float> numbers) {\n    std::vector<float>\
    \ rescaled_numbers;\n    rescaled_numbers.reserve(numbers.size());\n    for (float\
    \ number : numbers) {\n        rescaled_numbers.push_back(number);\n        rescaled_numbers.push_back(number\
    \ / numbers.size());\n    }\n    return rescaled_numbers;\n}\nint main() {\n \
    \   auto candidate = rescale_to_unit;\n    assert(candidate((std::vector<float>({2.0,\
    \ 49.9}))) == (std::vector<float>({0.0, 1.0})));\n    assert(candidate((std::vector<float>({100.0,\
    \ 49.9}))) == (std::vector<float>({1.0, 0.0})));\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0, 4.0, 5.0}))) == (std::vector<float>({0.0, 0.25, 0.5, 0.75, 1.0})));\n\
    \    assert(candidate((std::vector<float>({2.0, 1.0, 5.0, 3.0, 4.0}))) == (std::vector<float>({0.25,\
    \ 0.0, 1.0, 0.5, 0.75})));\n    assert(candidate((std::vector<float>({12.0, 11.0,\
    \ 15.0, 13.0, 14.0}))) == (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n\
    }\n"
  stdout: ''
  stderr: "tmpwb4qbjpl: /tmp/tmpwb4qbjpl.cpp:18: int main(): Assertion `candidate((std::vector<float>({2.0,\
    \ 49.9}))) == (std::vector<float>({0.0, 1.0}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\n\
    std::vector<float> rescale_to_unit(std::vector<float> numbers) {\n    std::vector<float>\
    \ rescaled_numbers;\n    rescaled_numbers.reserve(numbers.size());\n    for (float\
    \ number : numbers) {\n        rescaled_numbers.push_back(number);\n    }\n  \
    \  float smallest_number = *std::min_element(rescaled_numbers.begin(), rescaled_numbers.end());\n\
    \    float largest_number = *std::max_element(rescaled_numbers.begin(), rescaled_numbers.end());\n\
    \    float scale = largest_number - smallest_number;\n    for (float number :\
    \ rescaled_numbers) {\n        rescaled_numbers[rescaled_numbers.size() - 1 -\
    \ rescaled_numbers.find(number)] = number / scale;\n    }\n    return rescaled_numbers;\n\
    }\nint main() {\n    auto candidate = rescale_to_unit;\n    assert(candidate((std::vector<float>({2.0,\
    \ 49.9}))) == (std::vector<float>({0.0, 1.0})));\n    assert(candidate((std::vector<float>({100.0,\
    \ 49.9}))) == (std::vector<float>({1.0, 0.0})));\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0, 4.0, 5.0}))) == (std::vector<float>({0.0, 0.25, 0.5, 0.75, 1.0})));\n\
    \    assert(candidate((std::vector<float>({2.0, 1.0, 5.0, 3.0, 4.0}))) == (std::vector<float>({0.25,\
    \ 0.0, 1.0, 0.5, 0.75})));\n    assert(candidate((std::vector<float>({12.0, 11.0,\
    \ 15.0, 13.0, 14.0}))) == (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n\
    }\n"
  stdout: ''
  stderr: "/tmp/tmpb0pkflsy.cpp: In function \u2018std::vector<float> rescale_to_unit(std::vector<float>)\u2019\
    :\n/tmp/tmpb0pkflsy.cpp:17:73: error: \u2018class std::vector<float>\u2019 has\
    \ no member named \u2018find\u2019\n   17 |         rescaled_numbers[rescaled_numbers.size()\
    \ - 1 - rescaled_numbers.find(number)] = number / scale;\n      |            \
    \                                                             ^~~~\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\n\
    std::vector<float> rescale_to_unit(std::vector<float> numbers) {\n    std::vector<float>\
    \ rescaled_numbers;\n    rescaled_numbers.reserve(numbers.size());\n    for (float\
    \ number : numbers) {\n        rescaled_numbers.push_back(number / numbers.size());\n\
    \    }\n    return rescaled_numbers;\n}\nint main() {\n    auto candidate = rescale_to_unit;\n\
    \    assert(candidate((std::vector<float>({2.0, 49.9}))) == (std::vector<float>({0.0,\
    \ 1.0})));\n    assert(candidate((std::vector<float>({100.0, 49.9}))) == (std::vector<float>({1.0,\
    \ 0.0})));\n    assert(candidate((std::vector<float>({1.0, 2.0, 3.0, 4.0, 5.0})))\
    \ == (std::vector<float>({0.0, 0.25, 0.5, 0.75, 1.0})));\n    assert(candidate((std::vector<float>({2.0,\
    \ 1.0, 5.0, 3.0, 4.0}))) == (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n\
    \    assert(candidate((std::vector<float>({12.0, 11.0, 15.0, 13.0, 14.0}))) ==\
    \ (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n}\n"
  stdout: ''
  stderr: "tmp8lv11bln: /tmp/tmp8lv11bln.cpp:17: int main(): Assertion `candidate((std::vector<float>({2.0,\
    \ 49.9}))) == (std::vector<float>({0.0, 1.0}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\n\
    std::vector<float> rescale_to_unit(std::vector<float> numbers) {\n    assert(numbers.size()\
    \ > 1);\n    std::vector<float> new_numbers(numbers.size());\n    for (size_t\
    \ i = 0; i < numbers.size(); i++) {\n        new_numbers[i] = numbers[i] / numbers[0];\n\
    \    }\n    return new_numbers;\n}\nint main() {\n    auto candidate = rescale_to_unit;\n\
    \    assert(candidate((std::vector<float>({2.0, 49.9}))) == (std::vector<float>({0.0,\
    \ 1.0})));\n    assert(candidate((std::vector<float>({100.0, 49.9}))) == (std::vector<float>({1.0,\
    \ 0.0})));\n    assert(candidate((std::vector<float>({1.0, 2.0, 3.0, 4.0, 5.0})))\
    \ == (std::vector<float>({0.0, 0.25, 0.5, 0.75, 1.0})));\n    assert(candidate((std::vector<float>({2.0,\
    \ 1.0, 5.0, 3.0, 4.0}))) == (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n\
    \    assert(candidate((std::vector<float>({12.0, 11.0, 15.0, 13.0, 14.0}))) ==\
    \ (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n}\n"
  stdout: ''
  stderr: "tmpz2zdgmgq: /tmp/tmpz2zdgmgq.cpp:17: int main(): Assertion `candidate((std::vector<float>({2.0,\
    \ 49.9}))) == (std::vector<float>({0.0, 1.0}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\n\
    std::vector<float> rescale_to_unit(std::vector<float> numbers) {\n    std::vector<float>\
    \ rescaled_numbers;\n    rescaled_numbers.reserve(numbers.size());\n    for (float\
    \ number : numbers) {\n        rescaled_numbers.push_back(std::min(std::max(number,\
    \ 0.0f), 1.0f));\n    }\n    return rescaled_numbers;\n}\nint main() {\n    auto\
    \ candidate = rescale_to_unit;\n    assert(candidate((std::vector<float>({2.0,\
    \ 49.9}))) == (std::vector<float>({0.0, 1.0})));\n    assert(candidate((std::vector<float>({100.0,\
    \ 49.9}))) == (std::vector<float>({1.0, 0.0})));\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0, 4.0, 5.0}))) == (std::vector<float>({0.0, 0.25, 0.5, 0.75, 1.0})));\n\
    \    assert(candidate((std::vector<float>({2.0, 1.0, 5.0, 3.0, 4.0}))) == (std::vector<float>({0.25,\
    \ 0.0, 1.0, 0.5, 0.75})));\n    assert(candidate((std::vector<float>({12.0, 11.0,\
    \ 15.0, 13.0, 14.0}))) == (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n\
    }\n"
  stdout: ''
  stderr: "tmpiul4y2xp: /tmp/tmpiul4y2xp.cpp:17: int main(): Assertion `candidate((std::vector<float>({2.0,\
    \ 49.9}))) == (std::vector<float>({0.0, 1.0}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\n\
    std::vector<float> rescale_to_unit(std::vector<float> numbers) {\n    assert(numbers.size()\
    \ >= 2);\n    std::vector<float> result;\n    float min = numbers[0];\n    float\
    \ max = numbers[0];\n    for (auto n : numbers) {\n        if (n < min) min =\
    \ n;\n        if (n > max) max = n;\n    }\n    for (auto n : numbers) {\n   \
    \     result.push_back((n - min) / (max - min));\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = rescale_to_unit;\n    assert(candidate((std::vector<float>({2.0,\
    \ 49.9}))) == (std::vector<float>({0.0, 1.0})));\n    assert(candidate((std::vector<float>({100.0,\
    \ 49.9}))) == (std::vector<float>({1.0, 0.0})));\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0, 4.0, 5.0}))) == (std::vector<float>({0.0, 0.25, 0.5, 0.75, 1.0})));\n\
    \    assert(candidate((std::vector<float>({2.0, 1.0, 5.0, 3.0, 4.0}))) == (std::vector<float>({0.25,\
    \ 0.0, 1.0, 0.5, 0.75})));\n    assert(candidate((std::vector<float>({12.0, 11.0,\
    \ 15.0, 13.0, 14.0}))) == (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\n\
    std::vector<float> rescale_to_unit(std::vector<float> numbers) {\n    assert(numbers.size()\
    \ >= 2);\n    std::vector<float> rescaled_numbers;\n    rescaled_numbers.reserve(numbers.size());\n\
    \    for (float number : numbers) {\n        rescaled_numbers.push_back(number);\n\
    \        rescaled_numbers.push_back(number);\n    }\n    return rescaled_numbers;\n\
    }\nint main() {\n    auto candidate = rescale_to_unit;\n    assert(candidate((std::vector<float>({2.0,\
    \ 49.9}))) == (std::vector<float>({0.0, 1.0})));\n    assert(candidate((std::vector<float>({100.0,\
    \ 49.9}))) == (std::vector<float>({1.0, 0.0})));\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0, 4.0, 5.0}))) == (std::vector<float>({0.0, 0.25, 0.5, 0.75, 1.0})));\n\
    \    assert(candidate((std::vector<float>({2.0, 1.0, 5.0, 3.0, 4.0}))) == (std::vector<float>({0.25,\
    \ 0.0, 1.0, 0.5, 0.75})));\n    assert(candidate((std::vector<float>({12.0, 11.0,\
    \ 15.0, 13.0, 14.0}))) == (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n\
    }\n"
  stdout: ''
  stderr: "tmpceqm3xi2: /tmp/tmpceqm3xi2.cpp:19: int main(): Assertion `candidate((std::vector<float>({2.0,\
    \ 49.9}))) == (std::vector<float>({0.0, 1.0}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\n\
    std::vector<float> rescale_to_unit(std::vector<float> numbers) {\n    assert(numbers.size()\
    \ >= 2);\n    std::vector<float> rescaled_numbers;\n    rescaled_numbers.reserve(numbers.size());\n\
    \    for (float number : numbers) {\n        rescaled_numbers.push_back(number\
    \ / numbers[0]);\n    }\n    return rescaled_numbers;\n}\nint main() {\n    auto\
    \ candidate = rescale_to_unit;\n    assert(candidate((std::vector<float>({2.0,\
    \ 49.9}))) == (std::vector<float>({0.0, 1.0})));\n    assert(candidate((std::vector<float>({100.0,\
    \ 49.9}))) == (std::vector<float>({1.0, 0.0})));\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0, 4.0, 5.0}))) == (std::vector<float>({0.0, 0.25, 0.5, 0.75, 1.0})));\n\
    \    assert(candidate((std::vector<float>({2.0, 1.0, 5.0, 3.0, 4.0}))) == (std::vector<float>({0.25,\
    \ 0.0, 1.0, 0.5, 0.75})));\n    assert(candidate((std::vector<float>({12.0, 11.0,\
    \ 15.0, 13.0, 14.0}))) == (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n\
    }\n"
  stdout: ''
  stderr: "tmphma9otcl: /tmp/tmphma9otcl.cpp:18: int main(): Assertion `candidate((std::vector<float>({2.0,\
    \ 49.9}))) == (std::vector<float>({0.0, 1.0}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\n\
    std::vector<float> rescale_to_unit(std::vector<float> numbers) {\n    std::vector<float>\
    \ rescaled_numbers;\n    rescaled_numbers.reserve(numbers.size());\n    float\
    \ min_number = std::numeric_limits<float>::max();\n    float max_number = std::numeric_limits<float>::min();\n\
    \    for (float number : numbers) {\n        min_number = std::min(min_number,\
    \ number);\n        max_number = std::max(max_number, number);\n        rescaled_numbers.push_back(number\
    \ - min_number);\n    }\n    for (float number : rescaled_numbers) {\n       \
    \ rescaled_numbers.push_back(number / max_number);\n    }\n    return rescaled_numbers;\n\
    }\nint main() {\n    auto candidate = rescale_to_unit;\n    assert(candidate((std::vector<float>({2.0,\
    \ 49.9}))) == (std::vector<float>({0.0, 1.0})));\n    assert(candidate((std::vector<float>({100.0,\
    \ 49.9}))) == (std::vector<float>({1.0, 0.0})));\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0, 4.0, 5.0}))) == (std::vector<float>({0.0, 0.25, 0.5, 0.75, 1.0})));\n\
    \    assert(candidate((std::vector<float>({2.0, 1.0, 5.0, 3.0, 4.0}))) == (std::vector<float>({0.25,\
    \ 0.0, 1.0, 0.5, 0.75})));\n    assert(candidate((std::vector<float>({12.0, 11.0,\
    \ 15.0, 13.0, 14.0}))) == (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n\
    }\n"
  stdout: ''
  stderr: "tmpfh_t5ws4: /tmp/tmpfh_t5ws4.cpp:24: int main(): Assertion `candidate((std::vector<float>({2.0,\
    \ 49.9}))) == (std::vector<float>({0.0, 1.0}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\n\
    std::vector<float> rescale_to_unit(std::vector<float> numbers) {\n    assert(numbers.size()\
    \ >= 2);\n    std::vector<float> new_numbers;\n    new_numbers.reserve(numbers.size());\n\
    \    for (float number : numbers) {\n        new_numbers.push_back(number);\n\
    \    }\n    float min = new_numbers[0];\n    float max = new_numbers[0];\n   \
    \ for (float number : new_numbers) {\n        min = std::min(min, number);\n \
    \       max = std::max(max, number);\n    }\n    for (float number : new_numbers)\
    \ {\n        number -= min;\n        number /= (max - min);\n        number +=\
    \ 0.5;\n    }\n    return new_numbers;\n}\nint main() {\n    auto candidate =\
    \ rescale_to_unit;\n    assert(candidate((std::vector<float>({2.0, 49.9}))) ==\
    \ (std::vector<float>({0.0, 1.0})));\n    assert(candidate((std::vector<float>({100.0,\
    \ 49.9}))) == (std::vector<float>({1.0, 0.0})));\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0, 4.0, 5.0}))) == (std::vector<float>({0.0, 0.25, 0.5, 0.75, 1.0})));\n\
    \    assert(candidate((std::vector<float>({2.0, 1.0, 5.0, 3.0, 4.0}))) == (std::vector<float>({0.25,\
    \ 0.0, 1.0, 0.5, 0.75})));\n    assert(candidate((std::vector<float>({12.0, 11.0,\
    \ 15.0, 13.0, 14.0}))) == (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n\
    }\n"
  stdout: ''
  stderr: "tmp2o7fy9zl: /tmp/tmp2o7fy9zl.cpp:29: int main(): Assertion `candidate((std::vector<float>({2.0,\
    \ 49.9}))) == (std::vector<float>({0.0, 1.0}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\n\
    std::vector<float> rescale_to_unit(std::vector<float> numbers) {\n    std::vector<float>\
    \ rescaled_numbers;\n    rescaled_numbers.reserve(numbers.size());\n    for (float\
    \ number : numbers) {\n        rescaled_numbers.push_back(number / numbers[0]);\n\
    \    }\n    return rescaled_numbers;\n}\nint main() {\n    auto candidate = rescale_to_unit;\n\
    \    assert(candidate((std::vector<float>({2.0, 49.9}))) == (std::vector<float>({0.0,\
    \ 1.0})));\n    assert(candidate((std::vector<float>({100.0, 49.9}))) == (std::vector<float>({1.0,\
    \ 0.0})));\n    assert(candidate((std::vector<float>({1.0, 2.0, 3.0, 4.0, 5.0})))\
    \ == (std::vector<float>({0.0, 0.25, 0.5, 0.75, 1.0})));\n    assert(candidate((std::vector<float>({2.0,\
    \ 1.0, 5.0, 3.0, 4.0}))) == (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n\
    \    assert(candidate((std::vector<float>({12.0, 11.0, 15.0, 13.0, 14.0}))) ==\
    \ (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n}\n"
  stdout: ''
  stderr: "tmp44ce8dkq: /tmp/tmp44ce8dkq.cpp:17: int main(): Assertion `candidate((std::vector<float>({2.0,\
    \ 49.9}))) == (std::vector<float>({0.0, 1.0}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\n\
    std::vector<float> rescale_to_unit(std::vector<float> numbers) {\n    assert(numbers.size()\
    \ > 1);\n    std::vector<float> result;\n    float min = *std::min_element(numbers.begin(),\
    \ numbers.end());\n    float max = *std::max_element(numbers.begin(), numbers.end());\n\
    \    float range = max - min;\n    float scale = 1.0f / range;\n    for (float\
    \ number : numbers) {\n        result.push_back(number * scale);\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = rescale_to_unit;\n    assert(candidate((std::vector<float>({2.0,\
    \ 49.9}))) == (std::vector<float>({0.0, 1.0})));\n    assert(candidate((std::vector<float>({100.0,\
    \ 49.9}))) == (std::vector<float>({1.0, 0.0})));\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0, 4.0, 5.0}))) == (std::vector<float>({0.0, 0.25, 0.5, 0.75, 1.0})));\n\
    \    assert(candidate((std::vector<float>({2.0, 1.0, 5.0, 3.0, 4.0}))) == (std::vector<float>({0.25,\
    \ 0.0, 1.0, 0.5, 0.75})));\n    assert(candidate((std::vector<float>({12.0, 11.0,\
    \ 15.0, 13.0, 14.0}))) == (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n\
    }\n"
  stdout: ''
  stderr: "tmpu_zneagz: /tmp/tmpu_zneagz.cpp:21: int main(): Assertion `candidate((std::vector<float>({2.0,\
    \ 49.9}))) == (std::vector<float>({0.0, 1.0}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\n\
    std::vector<float> rescale_to_unit(std::vector<float> numbers) {\n    assert(numbers.size()\
    \ >= 2);\n    std::vector<float> result(numbers.size());\n    float min = *std::min_element(numbers.begin(),\
    \ numbers.end());\n    float max = *std::max_element(numbers.begin(), numbers.end());\n\
    \    float range = max - min;\n    float scale = 1.0f / range;\n    for (size_t\
    \ i = 0; i < numbers.size(); i++) {\n        result[i] = numbers[i] * scale;\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = rescale_to_unit;\n\
    \    assert(candidate((std::vector<float>({2.0, 49.9}))) == (std::vector<float>({0.0,\
    \ 1.0})));\n    assert(candidate((std::vector<float>({100.0, 49.9}))) == (std::vector<float>({1.0,\
    \ 0.0})));\n    assert(candidate((std::vector<float>({1.0, 2.0, 3.0, 4.0, 5.0})))\
    \ == (std::vector<float>({0.0, 0.25, 0.5, 0.75, 1.0})));\n    assert(candidate((std::vector<float>({2.0,\
    \ 1.0, 5.0, 3.0, 4.0}))) == (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n\
    \    assert(candidate((std::vector<float>({12.0, 11.0, 15.0, 13.0, 14.0}))) ==\
    \ (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n}\n"
  stdout: ''
  stderr: "tmpzfv4mvm0: /tmp/tmpzfv4mvm0.cpp:21: int main(): Assertion `candidate((std::vector<float>({2.0,\
    \ 49.9}))) == (std::vector<float>({0.0, 1.0}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\n\
    std::vector<float> rescale_to_unit(std::vector<float> numbers) {\n    assert(numbers.size()\
    \ >= 2);\n    std::vector<float> rescaled_numbers;\n    rescaled_numbers.reserve(numbers.size());\n\
    \    for (float number : numbers) {\n        rescaled_numbers.push_back(number\
    \ / numbers[0]);\n    }\n    return rescaled_numbers;\n}\nint main() {\n    auto\
    \ candidate = rescale_to_unit;\n    assert(candidate((std::vector<float>({2.0,\
    \ 49.9}))) == (std::vector<float>({0.0, 1.0})));\n    assert(candidate((std::vector<float>({100.0,\
    \ 49.9}))) == (std::vector<float>({1.0, 0.0})));\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0, 4.0, 5.0}))) == (std::vector<float>({0.0, 0.25, 0.5, 0.75, 1.0})));\n\
    \    assert(candidate((std::vector<float>({2.0, 1.0, 5.0, 3.0, 4.0}))) == (std::vector<float>({0.25,\
    \ 0.0, 1.0, 0.5, 0.75})));\n    assert(candidate((std::vector<float>({12.0, 11.0,\
    \ 15.0, 13.0, 14.0}))) == (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n\
    }\n"
  stdout: ''
  stderr: "tmpd11caalp: /tmp/tmpd11caalp.cpp:18: int main(): Assertion `candidate((std::vector<float>({2.0,\
    \ 49.9}))) == (std::vector<float>({0.0, 1.0}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\n\
    std::vector<float> rescale_to_unit(std::vector<float> numbers) {\n    std::vector<float>\
    \ rescaled_numbers;\n    rescaled_numbers.reserve(numbers.size());\n    for (float\
    \ number : numbers) {\n        rescaled_numbers.push_back(number / numbers.size());\n\
    \    }\n    return rescaled_numbers;\n}\nint main() {\n    auto candidate = rescale_to_unit;\n\
    \    assert(candidate((std::vector<float>({2.0, 49.9}))) == (std::vector<float>({0.0,\
    \ 1.0})));\n    assert(candidate((std::vector<float>({100.0, 49.9}))) == (std::vector<float>({1.0,\
    \ 0.0})));\n    assert(candidate((std::vector<float>({1.0, 2.0, 3.0, 4.0, 5.0})))\
    \ == (std::vector<float>({0.0, 0.25, 0.5, 0.75, 1.0})));\n    assert(candidate((std::vector<float>({2.0,\
    \ 1.0, 5.0, 3.0, 4.0}))) == (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n\
    \    assert(candidate((std::vector<float>({12.0, 11.0, 15.0, 13.0, 14.0}))) ==\
    \ (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n}\n"
  stdout: ''
  stderr: "tmp_ooukxxl: /tmp/tmp_ooukxxl.cpp:17: int main(): Assertion `candidate((std::vector<float>({2.0,\
    \ 49.9}))) == (std::vector<float>({0.0, 1.0}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\n\
    std::vector<float> rescale_to_unit(std::vector<float> numbers) {\n    assert(numbers.size()\
    \ >= 2);\n    std::vector<float> rescaled_numbers;\n    rescaled_numbers.reserve(numbers.size());\n\
    \    for (float number : numbers) {\n        rescaled_numbers.push_back(number\
    \ / numbers[0]);\n    }\n    return rescaled_numbers;\n}\nint main() {\n    auto\
    \ candidate = rescale_to_unit;\n    assert(candidate((std::vector<float>({2.0,\
    \ 49.9}))) == (std::vector<float>({0.0, 1.0})));\n    assert(candidate((std::vector<float>({100.0,\
    \ 49.9}))) == (std::vector<float>({1.0, 0.0})));\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0, 4.0, 5.0}))) == (std::vector<float>({0.0, 0.25, 0.5, 0.75, 1.0})));\n\
    \    assert(candidate((std::vector<float>({2.0, 1.0, 5.0, 3.0, 4.0}))) == (std::vector<float>({0.25,\
    \ 0.0, 1.0, 0.5, 0.75})));\n    assert(candidate((std::vector<float>({12.0, 11.0,\
    \ 15.0, 13.0, 14.0}))) == (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n\
    }\n"
  stdout: ''
  stderr: "tmpdk8mcjv7: /tmp/tmpdk8mcjv7.cpp:18: int main(): Assertion `candidate((std::vector<float>({2.0,\
    \ 49.9}))) == (std::vector<float>({0.0, 1.0}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\n\
    std::vector<float> rescale_to_unit(std::vector<float> numbers) {\n    std::vector<float>\
    \ rescaled_numbers;\n    rescaled_numbers.reserve(numbers.size());\n    for (float\
    \ number : numbers) {\n        rescaled_numbers.push_back(number / numbers.size());\n\
    \    }\n    return rescaled_numbers;\n}\nint main() {\n    auto candidate = rescale_to_unit;\n\
    \    assert(candidate((std::vector<float>({2.0, 49.9}))) == (std::vector<float>({0.0,\
    \ 1.0})));\n    assert(candidate((std::vector<float>({100.0, 49.9}))) == (std::vector<float>({1.0,\
    \ 0.0})));\n    assert(candidate((std::vector<float>({1.0, 2.0, 3.0, 4.0, 5.0})))\
    \ == (std::vector<float>({0.0, 0.25, 0.5, 0.75, 1.0})));\n    assert(candidate((std::vector<float>({2.0,\
    \ 1.0, 5.0, 3.0, 4.0}))) == (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n\
    \    assert(candidate((std::vector<float>({12.0, 11.0, 15.0, 13.0, 14.0}))) ==\
    \ (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n}\n"
  stdout: ''
  stderr: "tmpa1rhcw06: /tmp/tmpa1rhcw06.cpp:17: int main(): Assertion `candidate((std::vector<float>({2.0,\
    \ 49.9}))) == (std::vector<float>({0.0, 1.0}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\n\
    std::vector<float> rescale_to_unit(std::vector<float> numbers) {\n    assert(numbers.size()\
    \ >= 2);\n    std::vector<float> result(numbers.size());\n    float min = numbers[0];\n\
    \    float max = numbers[0];\n    for (size_t i = 1; i < numbers.size(); i++)\
    \ {\n        min = std::min(min, numbers[i]);\n        max = std::max(max, numbers[i]);\n\
    \    }\n    for (size_t i = 0; i < numbers.size(); i++) {\n        result[i] =\
    \ numbers[i] - min;\n        result[i] /= (max - min);\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = rescale_to_unit;\n    assert(candidate((std::vector<float>({2.0,\
    \ 49.9}))) == (std::vector<float>({0.0, 1.0})));\n    assert(candidate((std::vector<float>({100.0,\
    \ 49.9}))) == (std::vector<float>({1.0, 0.0})));\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0, 4.0, 5.0}))) == (std::vector<float>({0.0, 0.25, 0.5, 0.75, 1.0})));\n\
    \    assert(candidate((std::vector<float>({2.0, 1.0, 5.0, 3.0, 4.0}))) == (std::vector<float>({0.25,\
    \ 0.0, 1.0, 0.5, 0.75})));\n    assert(candidate((std::vector<float>({12.0, 11.0,\
    \ 15.0, 13.0, 14.0}))) == (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\n\
    std::vector<float> rescale_to_unit(std::vector<float> numbers) {\n    assert(numbers.size()\
    \ >= 2);\n    float min = *std::min_element(numbers.begin(), numbers.end());\n\
    \    float max = *std::max_element(numbers.begin(), numbers.end());\n    float\
    \ scale = 1.0f / (max - min);\n    std::vector<float> res(numbers.size());\n \
    \   for (size_t i = 0; i < numbers.size(); ++i) {\n        res[i] = numbers[i]\
    \ * scale;\n    }\n    return res;\n}\nint main() {\n    auto candidate = rescale_to_unit;\n\
    \    assert(candidate((std::vector<float>({2.0, 49.9}))) == (std::vector<float>({0.0,\
    \ 1.0})));\n    assert(candidate((std::vector<float>({100.0, 49.9}))) == (std::vector<float>({1.0,\
    \ 0.0})));\n    assert(candidate((std::vector<float>({1.0, 2.0, 3.0, 4.0, 5.0})))\
    \ == (std::vector<float>({0.0, 0.25, 0.5, 0.75, 1.0})));\n    assert(candidate((std::vector<float>({2.0,\
    \ 1.0, 5.0, 3.0, 4.0}))) == (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n\
    \    assert(candidate((std::vector<float>({12.0, 11.0, 15.0, 13.0, 14.0}))) ==\
    \ (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n}\n"
  stdout: ''
  stderr: "tmpph6zvnuc: /tmp/tmpph6zvnuc.cpp:20: int main(): Assertion `candidate((std::vector<float>({2.0,\
    \ 49.9}))) == (std::vector<float>({0.0, 1.0}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\n\
    std::vector<float> rescale_to_unit(std::vector<float> numbers) {\n    assert(numbers.size()\
    \ >= 2);\n    std::vector<float> rescaled_numbers;\n    rescaled_numbers.reserve(numbers.size());\n\
    \    for (auto number : numbers) {\n        rescaled_numbers.push_back(number\
    \ / numbers[0]);\n    }\n    return rescaled_numbers;\n}\nint main() {\n    auto\
    \ candidate = rescale_to_unit;\n    assert(candidate((std::vector<float>({2.0,\
    \ 49.9}))) == (std::vector<float>({0.0, 1.0})));\n    assert(candidate((std::vector<float>({100.0,\
    \ 49.9}))) == (std::vector<float>({1.0, 0.0})));\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0, 4.0, 5.0}))) == (std::vector<float>({0.0, 0.25, 0.5, 0.75, 1.0})));\n\
    \    assert(candidate((std::vector<float>({2.0, 1.0, 5.0, 3.0, 4.0}))) == (std::vector<float>({0.25,\
    \ 0.0, 1.0, 0.5, 0.75})));\n    assert(candidate((std::vector<float>({12.0, 11.0,\
    \ 15.0, 13.0, 14.0}))) == (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n\
    }\n"
  stdout: ''
  stderr: "tmpvzdjhemp: /tmp/tmpvzdjhemp.cpp:18: int main(): Assertion `candidate((std::vector<float>({2.0,\
    \ 49.9}))) == (std::vector<float>({0.0, 1.0}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\n\
    std::vector<float> rescale_to_unit(std::vector<float> numbers) {\n    std::vector<float>\
    \ rescaled_numbers;\n    rescaled_numbers.reserve(numbers.size());\n    for (float\
    \ number : numbers) {\n        rescaled_numbers.push_back(number / numbers.size());\n\
    \    }\n    return rescaled_numbers;\n}\nint main() {\n    auto candidate = rescale_to_unit;\n\
    \    assert(candidate((std::vector<float>({2.0, 49.9}))) == (std::vector<float>({0.0,\
    \ 1.0})));\n    assert(candidate((std::vector<float>({100.0, 49.9}))) == (std::vector<float>({1.0,\
    \ 0.0})));\n    assert(candidate((std::vector<float>({1.0, 2.0, 3.0, 4.0, 5.0})))\
    \ == (std::vector<float>({0.0, 0.25, 0.5, 0.75, 1.0})));\n    assert(candidate((std::vector<float>({2.0,\
    \ 1.0, 5.0, 3.0, 4.0}))) == (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n\
    \    assert(candidate((std::vector<float>({12.0, 11.0, 15.0, 13.0, 14.0}))) ==\
    \ (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n}\n"
  stdout: ''
  stderr: "tmpnl0jw7jt: /tmp/tmpnl0jw7jt.cpp:17: int main(): Assertion `candidate((std::vector<float>({2.0,\
    \ 49.9}))) == (std::vector<float>({0.0, 1.0}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\n\
    std::vector<float> rescale_to_unit(std::vector<float> numbers) {\n    assert(numbers.size()\
    \ > 1);\n    std::vector<float> new_numbers(numbers.size());\n    float smallest\
    \ = numbers[0];\n    float largest = numbers[0];\n    for (size_t i = 1; i < numbers.size();\
    \ i++) {\n        smallest = std::min(smallest, numbers[i]);\n        largest\
    \ = std::max(largest, numbers[i]);\n    }\n    for (size_t i = 0; i < numbers.size();\
    \ i++) {\n        new_numbers[i] = numbers[i] - smallest;\n        new_numbers[i]\
    \ /= (largest - smallest);\n    }\n    return new_numbers;\n}\nint main() {\n\
    \    auto candidate = rescale_to_unit;\n    assert(candidate((std::vector<float>({2.0,\
    \ 49.9}))) == (std::vector<float>({0.0, 1.0})));\n    assert(candidate((std::vector<float>({100.0,\
    \ 49.9}))) == (std::vector<float>({1.0, 0.0})));\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0, 4.0, 5.0}))) == (std::vector<float>({0.0, 0.25, 0.5, 0.75, 1.0})));\n\
    \    assert(candidate((std::vector<float>({2.0, 1.0, 5.0, 3.0, 4.0}))) == (std::vector<float>({0.25,\
    \ 0.0, 1.0, 0.5, 0.75})));\n    assert(candidate((std::vector<float>({12.0, 11.0,\
    \ 15.0, 13.0, 14.0}))) == (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\n\
    std::vector<float> rescale_to_unit(std::vector<float> numbers) {\n    assert(numbers.size()\
    \ >= 2);\n    float min = *std::min_element(numbers.begin(), numbers.end());\n\
    \    float max = *std::max_element(numbers.begin(), numbers.end());\n    float\
    \ scale = 1.0f / (max - min);\n    std::vector<float> rescaled_numbers(numbers.size());\n\
    \    for (size_t i = 0; i < numbers.size(); ++i) {\n        rescaled_numbers[i]\
    \ = numbers[i] * scale;\n    }\n    return rescaled_numbers;\n}\nint main() {\n\
    \    auto candidate = rescale_to_unit;\n    assert(candidate((std::vector<float>({2.0,\
    \ 49.9}))) == (std::vector<float>({0.0, 1.0})));\n    assert(candidate((std::vector<float>({100.0,\
    \ 49.9}))) == (std::vector<float>({1.0, 0.0})));\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0, 4.0, 5.0}))) == (std::vector<float>({0.0, 0.25, 0.5, 0.75, 1.0})));\n\
    \    assert(candidate((std::vector<float>({2.0, 1.0, 5.0, 3.0, 4.0}))) == (std::vector<float>({0.25,\
    \ 0.0, 1.0, 0.5, 0.75})));\n    assert(candidate((std::vector<float>({12.0, 11.0,\
    \ 15.0, 13.0, 14.0}))) == (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n\
    }\n"
  stdout: ''
  stderr: "tmphvek8gu9: /tmp/tmphvek8gu9.cpp:20: int main(): Assertion `candidate((std::vector<float>({2.0,\
    \ 49.9}))) == (std::vector<float>({0.0, 1.0}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\n\
    std::vector<float> rescale_to_unit(std::vector<float> numbers) {\n    std::vector<float>\
    \ rescaled_numbers;\n    rescaled_numbers.reserve(numbers.size());\n    for (float\
    \ number : numbers) {\n        rescaled_numbers.push_back(number / numbers[0]);\n\
    \    }\n    return rescaled_numbers;\n}\nint main() {\n    auto candidate = rescale_to_unit;\n\
    \    assert(candidate((std::vector<float>({2.0, 49.9}))) == (std::vector<float>({0.0,\
    \ 1.0})));\n    assert(candidate((std::vector<float>({100.0, 49.9}))) == (std::vector<float>({1.0,\
    \ 0.0})));\n    assert(candidate((std::vector<float>({1.0, 2.0, 3.0, 4.0, 5.0})))\
    \ == (std::vector<float>({0.0, 0.25, 0.5, 0.75, 1.0})));\n    assert(candidate((std::vector<float>({2.0,\
    \ 1.0, 5.0, 3.0, 4.0}))) == (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n\
    \    assert(candidate((std::vector<float>({12.0, 11.0, 15.0, 13.0, 14.0}))) ==\
    \ (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n}\n"
  stdout: ''
  stderr: "tmpn0l4hx65: /tmp/tmpn0l4hx65.cpp:17: int main(): Assertion `candidate((std::vector<float>({2.0,\
    \ 49.9}))) == (std::vector<float>({0.0, 1.0}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\n\
    std::vector<float> rescale_to_unit(std::vector<float> numbers) {\n    assert(numbers.size()\
    \ >= 2);\n    std::vector<float> new_numbers;\n    new_numbers.reserve(numbers.size());\n\
    \    for (float number : numbers) {\n        new_numbers.push_back(number / numbers[0]);\n\
    \    }\n    return new_numbers;\n}\nint main() {\n    auto candidate = rescale_to_unit;\n\
    \    assert(candidate((std::vector<float>({2.0, 49.9}))) == (std::vector<float>({0.0,\
    \ 1.0})));\n    assert(candidate((std::vector<float>({100.0, 49.9}))) == (std::vector<float>({1.0,\
    \ 0.0})));\n    assert(candidate((std::vector<float>({1.0, 2.0, 3.0, 4.0, 5.0})))\
    \ == (std::vector<float>({0.0, 0.25, 0.5, 0.75, 1.0})));\n    assert(candidate((std::vector<float>({2.0,\
    \ 1.0, 5.0, 3.0, 4.0}))) == (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n\
    \    assert(candidate((std::vector<float>({12.0, 11.0, 15.0, 13.0, 14.0}))) ==\
    \ (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n}\n"
  stdout: ''
  stderr: "tmpog6lsfqh: /tmp/tmpog6lsfqh.cpp:18: int main(): Assertion `candidate((std::vector<float>({2.0,\
    \ 49.9}))) == (std::vector<float>({0.0, 1.0}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\n\
    std::vector<float> rescale_to_unit(std::vector<float> numbers) {\n    assert(numbers.size()\
    \ >= 2);\n    std::vector<float> rescaled_numbers(numbers.size());\n    float\
    \ smallest_number = numbers[0];\n    float largest_number = numbers[0];\n    for\
    \ (size_t i = 1; i < numbers.size(); ++i) {\n        smallest_number = std::min(smallest_number,\
    \ numbers[i]);\n        largest_number = std::max(largest_number, numbers[i]);\n\
    \    }\n    float scale = 1.0f / (largest_number - smallest_number);\n    for\
    \ (size_t i = 0; i < numbers.size(); ++i) {\n        rescaled_numbers[i] = numbers[i]\
    \ * scale;\n    }\n    return rescaled_numbers;\n}\nint main() {\n    auto candidate\
    \ = rescale_to_unit;\n    assert(candidate((std::vector<float>({2.0, 49.9})))\
    \ == (std::vector<float>({0.0, 1.0})));\n    assert(candidate((std::vector<float>({100.0,\
    \ 49.9}))) == (std::vector<float>({1.0, 0.0})));\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0, 4.0, 5.0}))) == (std::vector<float>({0.0, 0.25, 0.5, 0.75, 1.0})));\n\
    \    assert(candidate((std::vector<float>({2.0, 1.0, 5.0, 3.0, 4.0}))) == (std::vector<float>({0.25,\
    \ 0.0, 1.0, 0.5, 0.75})));\n    assert(candidate((std::vector<float>({12.0, 11.0,\
    \ 15.0, 13.0, 14.0}))) == (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n\
    }\n"
  stdout: ''
  stderr: "tmplwi10qaq: /tmp/tmplwi10qaq.cpp:24: int main(): Assertion `candidate((std::vector<float>({2.0,\
    \ 49.9}))) == (std::vector<float>({0.0, 1.0}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\n\
    std::vector<float> rescale_to_unit(std::vector<float> numbers) {\n    assert(numbers.size()\
    \ > 1);\n    std::vector<float> rescaled_numbers(numbers.size());\n    float smallest\
    \ = numbers[0];\n    float largest = numbers[0];\n    for (size_t i = 1; i < numbers.size();\
    \ i++) {\n        smallest = std::min(smallest, numbers[i]);\n        largest\
    \ = std::max(largest, numbers[i]);\n    }\n    float scale = largest / smallest;\n\
    \    for (size_t i = 0; i < numbers.size(); i++) {\n        rescaled_numbers[i]\
    \ = numbers[i] * scale;\n    }\n    return rescaled_numbers;\n}\nint main() {\n\
    \    auto candidate = rescale_to_unit;\n    assert(candidate((std::vector<float>({2.0,\
    \ 49.9}))) == (std::vector<float>({0.0, 1.0})));\n    assert(candidate((std::vector<float>({100.0,\
    \ 49.9}))) == (std::vector<float>({1.0, 0.0})));\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0, 4.0, 5.0}))) == (std::vector<float>({0.0, 0.25, 0.5, 0.75, 1.0})));\n\
    \    assert(candidate((std::vector<float>({2.0, 1.0, 5.0, 3.0, 4.0}))) == (std::vector<float>({0.25,\
    \ 0.0, 1.0, 0.5, 0.75})));\n    assert(candidate((std::vector<float>({12.0, 11.0,\
    \ 15.0, 13.0, 14.0}))) == (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n\
    }\n"
  stdout: ''
  stderr: "tmputrcuw53: /tmp/tmputrcuw53.cpp:24: int main(): Assertion `candidate((std::vector<float>({2.0,\
    \ 49.9}))) == (std::vector<float>({0.0, 1.0}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\n\
    std::vector<float> rescale_to_unit(std::vector<float> numbers) {\n    std::vector<float>\
    \ rescaled_numbers;\n    rescaled_numbers.reserve(numbers.size());\n    for (float\
    \ number : numbers) {\n        rescaled_numbers.push_back(number / numbers[0]);\n\
    \    }\n    return rescaled_numbers;\n}\nint main() {\n    auto candidate = rescale_to_unit;\n\
    \    assert(candidate((std::vector<float>({2.0, 49.9}))) == (std::vector<float>({0.0,\
    \ 1.0})));\n    assert(candidate((std::vector<float>({100.0, 49.9}))) == (std::vector<float>({1.0,\
    \ 0.0})));\n    assert(candidate((std::vector<float>({1.0, 2.0, 3.0, 4.0, 5.0})))\
    \ == (std::vector<float>({0.0, 0.25, 0.5, 0.75, 1.0})));\n    assert(candidate((std::vector<float>({2.0,\
    \ 1.0, 5.0, 3.0, 4.0}))) == (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n\
    \    assert(candidate((std::vector<float>({12.0, 11.0, 15.0, 13.0, 14.0}))) ==\
    \ (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n}\n"
  stdout: ''
  stderr: "tmp7olb7_nu: /tmp/tmp7olb7_nu.cpp:17: int main(): Assertion `candidate((std::vector<float>({2.0,\
    \ 49.9}))) == (std::vector<float>({0.0, 1.0}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\n\
    std::vector<float> rescale_to_unit(std::vector<float> numbers) {\n    assert(numbers.size()\
    \ >= 2);\n    std::vector<float> rescaled_numbers;\n    rescaled_numbers.reserve(numbers.size());\n\
    \    for (float number : numbers) {\n        rescaled_numbers.push_back(number\
    \ / numbers[0]);\n    }\n    return rescaled_numbers;\n}\nint main() {\n    auto\
    \ candidate = rescale_to_unit;\n    assert(candidate((std::vector<float>({2.0,\
    \ 49.9}))) == (std::vector<float>({0.0, 1.0})));\n    assert(candidate((std::vector<float>({100.0,\
    \ 49.9}))) == (std::vector<float>({1.0, 0.0})));\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0, 4.0, 5.0}))) == (std::vector<float>({0.0, 0.25, 0.5, 0.75, 1.0})));\n\
    \    assert(candidate((std::vector<float>({2.0, 1.0, 5.0, 3.0, 4.0}))) == (std::vector<float>({0.25,\
    \ 0.0, 1.0, 0.5, 0.75})));\n    assert(candidate((std::vector<float>({12.0, 11.0,\
    \ 15.0, 13.0, 14.0}))) == (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n\
    }\n"
  stdout: ''
  stderr: "tmpol3dwvsv: /tmp/tmpol3dwvsv.cpp:18: int main(): Assertion `candidate((std::vector<float>({2.0,\
    \ 49.9}))) == (std::vector<float>({0.0, 1.0}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\n\
    std::vector<float> rescale_to_unit(std::vector<float> numbers) {\n    std::vector<float>\
    \ rescaled_numbers;\n    rescaled_numbers.reserve(numbers.size());\n    for (float\
    \ number : numbers) {\n        rescaled_numbers.push_back(number / numbers[0]);\n\
    \    }\n    return rescaled_numbers;\n}\nint main() {\n    auto candidate = rescale_to_unit;\n\
    \    assert(candidate((std::vector<float>({2.0, 49.9}))) == (std::vector<float>({0.0,\
    \ 1.0})));\n    assert(candidate((std::vector<float>({100.0, 49.9}))) == (std::vector<float>({1.0,\
    \ 0.0})));\n    assert(candidate((std::vector<float>({1.0, 2.0, 3.0, 4.0, 5.0})))\
    \ == (std::vector<float>({0.0, 0.25, 0.5, 0.75, 1.0})));\n    assert(candidate((std::vector<float>({2.0,\
    \ 1.0, 5.0, 3.0, 4.0}))) == (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n\
    \    assert(candidate((std::vector<float>({12.0, 11.0, 15.0, 13.0, 14.0}))) ==\
    \ (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n}\n"
  stdout: ''
  stderr: "tmpkpe0_6eu: /tmp/tmpkpe0_6eu.cpp:17: int main(): Assertion `candidate((std::vector<float>({2.0,\
    \ 49.9}))) == (std::vector<float>({0.0, 1.0}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\n\
    std::vector<float> rescale_to_unit(std::vector<float> numbers) {\n    assert(numbers.size()\
    \ >= 2);\n    std::vector<float> result;\n    float min = numbers[0];\n    float\
    \ max = numbers[0];\n    for (auto n : numbers) {\n        if (n < min) min =\
    \ n;\n        if (n > max) max = n;\n    }\n    for (auto n : numbers) {\n   \
    \     result.push_back((n - min) / (max - min));\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = rescale_to_unit;\n    assert(candidate((std::vector<float>({2.0,\
    \ 49.9}))) == (std::vector<float>({0.0, 1.0})));\n    assert(candidate((std::vector<float>({100.0,\
    \ 49.9}))) == (std::vector<float>({1.0, 0.0})));\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0, 4.0, 5.0}))) == (std::vector<float>({0.0, 0.25, 0.5, 0.75, 1.0})));\n\
    \    assert(candidate((std::vector<float>({2.0, 1.0, 5.0, 3.0, 4.0}))) == (std::vector<float>({0.25,\
    \ 0.0, 1.0, 0.5, 0.75})));\n    assert(candidate((std::vector<float>({12.0, 11.0,\
    \ 15.0, 13.0, 14.0}))) == (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\n\
    std::vector<float> rescale_to_unit(std::vector<float> numbers) {\n    std::vector<float>\
    \ rescaled_numbers;\n    rescaled_numbers.reserve(numbers.size());\n    for (float\
    \ number : numbers) {\n        rescaled_numbers.push_back(number / numbers.size());\n\
    \    }\n    return rescaled_numbers;\n}\nint main() {\n    auto candidate = rescale_to_unit;\n\
    \    assert(candidate((std::vector<float>({2.0, 49.9}))) == (std::vector<float>({0.0,\
    \ 1.0})));\n    assert(candidate((std::vector<float>({100.0, 49.9}))) == (std::vector<float>({1.0,\
    \ 0.0})));\n    assert(candidate((std::vector<float>({1.0, 2.0, 3.0, 4.0, 5.0})))\
    \ == (std::vector<float>({0.0, 0.25, 0.5, 0.75, 1.0})));\n    assert(candidate((std::vector<float>({2.0,\
    \ 1.0, 5.0, 3.0, 4.0}))) == (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n\
    \    assert(candidate((std::vector<float>({12.0, 11.0, 15.0, 13.0, 14.0}))) ==\
    \ (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n}\n"
  stdout: ''
  stderr: "tmporzbfxiy: /tmp/tmporzbfxiy.cpp:17: int main(): Assertion `candidate((std::vector<float>({2.0,\
    \ 49.9}))) == (std::vector<float>({0.0, 1.0}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\n\
    std::vector<float> rescale_to_unit(std::vector<float> numbers) {\n    std::vector<float>\
    \ rescaled_numbers;\n    rescaled_numbers.reserve(numbers.size());\n    for (float\
    \ number : numbers) {\n        rescaled_numbers.push_back(number / numbers[0]);\n\
    \    }\n    return rescaled_numbers;\n}\nint main() {\n    auto candidate = rescale_to_unit;\n\
    \    assert(candidate((std::vector<float>({2.0, 49.9}))) == (std::vector<float>({0.0,\
    \ 1.0})));\n    assert(candidate((std::vector<float>({100.0, 49.9}))) == (std::vector<float>({1.0,\
    \ 0.0})));\n    assert(candidate((std::vector<float>({1.0, 2.0, 3.0, 4.0, 5.0})))\
    \ == (std::vector<float>({0.0, 0.25, 0.5, 0.75, 1.0})));\n    assert(candidate((std::vector<float>({2.0,\
    \ 1.0, 5.0, 3.0, 4.0}))) == (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n\
    \    assert(candidate((std::vector<float>({12.0, 11.0, 15.0, 13.0, 14.0}))) ==\
    \ (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n}\n"
  stdout: ''
  stderr: "tmpru8ij3ge: /tmp/tmpru8ij3ge.cpp:17: int main(): Assertion `candidate((std::vector<float>({2.0,\
    \ 49.9}))) == (std::vector<float>({0.0, 1.0}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\n\
    std::vector<float> rescale_to_unit(std::vector<float> numbers) {\n    std::vector<float>\
    \ rescaled_numbers;\n    rescaled_numbers.reserve(numbers.size());\n    for (float\
    \ number : numbers) {\n        rescaled_numbers.push_back(number / numbers.size());\n\
    \    }\n    return rescaled_numbers;\n}\nint main() {\n    auto candidate = rescale_to_unit;\n\
    \    assert(candidate((std::vector<float>({2.0, 49.9}))) == (std::vector<float>({0.0,\
    \ 1.0})));\n    assert(candidate((std::vector<float>({100.0, 49.9}))) == (std::vector<float>({1.0,\
    \ 0.0})));\n    assert(candidate((std::vector<float>({1.0, 2.0, 3.0, 4.0, 5.0})))\
    \ == (std::vector<float>({0.0, 0.25, 0.5, 0.75, 1.0})));\n    assert(candidate((std::vector<float>({2.0,\
    \ 1.0, 5.0, 3.0, 4.0}))) == (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n\
    \    assert(candidate((std::vector<float>({12.0, 11.0, 15.0, 13.0, 14.0}))) ==\
    \ (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n}\n"
  stdout: ''
  stderr: "tmp3vljou59: /tmp/tmp3vljou59.cpp:17: int main(): Assertion `candidate((std::vector<float>({2.0,\
    \ 49.9}))) == (std::vector<float>({0.0, 1.0}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\n\
    std::vector<float> rescale_to_unit(std::vector<float> numbers) {\n    assert(numbers.size()\
    \ >= 2);\n    std::vector<float> result(numbers.size());\n    float min = numbers[0];\n\
    \    float max = numbers[0];\n    for (size_t i = 1; i < numbers.size(); ++i)\
    \ {\n        if (numbers[i] < min) {\n            min = numbers[i];\n        }\
    \ else if (numbers[i] > max) {\n            max = numbers[i];\n        }\n   \
    \ }\n    for (size_t i = 0; i < numbers.size(); ++i) {\n        result[i] = numbers[i]\
    \ - min;\n        result[i] /= (max - min);\n    }\n    return result;\n}\nint\
    \ main() {\n    auto candidate = rescale_to_unit;\n    assert(candidate((std::vector<float>({2.0,\
    \ 49.9}))) == (std::vector<float>({0.0, 1.0})));\n    assert(candidate((std::vector<float>({100.0,\
    \ 49.9}))) == (std::vector<float>({1.0, 0.0})));\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0, 4.0, 5.0}))) == (std::vector<float>({0.0, 0.25, 0.5, 0.75, 1.0})));\n\
    \    assert(candidate((std::vector<float>({2.0, 1.0, 5.0, 3.0, 4.0}))) == (std::vector<float>({0.25,\
    \ 0.0, 1.0, 0.5, 0.75})));\n    assert(candidate((std::vector<float>({12.0, 11.0,\
    \ 15.0, 13.0, 14.0}))) == (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\n\
    std::vector<float> rescale_to_unit(std::vector<float> numbers) {\n    assert(numbers.size()\
    \ >= 2);\n    std::vector<float> rescaled;\n    rescaled.reserve(numbers.size());\n\
    \    for (float number : numbers) {\n        rescaled.push_back(number / numbers[0]);\n\
    \    }\n    return rescaled;\n}\nint main() {\n    auto candidate = rescale_to_unit;\n\
    \    assert(candidate((std::vector<float>({2.0, 49.9}))) == (std::vector<float>({0.0,\
    \ 1.0})));\n    assert(candidate((std::vector<float>({100.0, 49.9}))) == (std::vector<float>({1.0,\
    \ 0.0})));\n    assert(candidate((std::vector<float>({1.0, 2.0, 3.0, 4.0, 5.0})))\
    \ == (std::vector<float>({0.0, 0.25, 0.5, 0.75, 1.0})));\n    assert(candidate((std::vector<float>({2.0,\
    \ 1.0, 5.0, 3.0, 4.0}))) == (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n\
    \    assert(candidate((std::vector<float>({12.0, 11.0, 15.0, 13.0, 14.0}))) ==\
    \ (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n}\n"
  stdout: ''
  stderr: "tmpgapdnad1: /tmp/tmpgapdnad1.cpp:18: int main(): Assertion `candidate((std::vector<float>({2.0,\
    \ 49.9}))) == (std::vector<float>({0.0, 1.0}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\n\
    std::vector<float> rescale_to_unit(std::vector<float> numbers) {\n    std::vector<float>\
    \ rescaled;\n    rescaled.reserve(numbers.size());\n    for (auto number : numbers)\
    \ {\n        rescaled.push_back(number);\n        rescaled.push_back(number);\n\
    \    }\n    return rescaled;\n}\nint main() {\n    auto candidate = rescale_to_unit;\n\
    \    assert(candidate((std::vector<float>({2.0, 49.9}))) == (std::vector<float>({0.0,\
    \ 1.0})));\n    assert(candidate((std::vector<float>({100.0, 49.9}))) == (std::vector<float>({1.0,\
    \ 0.0})));\n    assert(candidate((std::vector<float>({1.0, 2.0, 3.0, 4.0, 5.0})))\
    \ == (std::vector<float>({0.0, 0.25, 0.5, 0.75, 1.0})));\n    assert(candidate((std::vector<float>({2.0,\
    \ 1.0, 5.0, 3.0, 4.0}))) == (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n\
    \    assert(candidate((std::vector<float>({12.0, 11.0, 15.0, 13.0, 14.0}))) ==\
    \ (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n}\n"
  stdout: ''
  stderr: "tmp6s0s3fe0: /tmp/tmp6s0s3fe0.cpp:18: int main(): Assertion `candidate((std::vector<float>({2.0,\
    \ 49.9}))) == (std::vector<float>({0.0, 1.0}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\n\
    std::vector<float> rescale_to_unit(std::vector<float> numbers) {\n    assert(numbers.size()\
    \ >= 2);\n    std::vector<float> result;\n    float min = numbers[0];\n    float\
    \ max = numbers[0];\n    for (auto n : numbers) {\n        if (n < min) min =\
    \ n;\n        if (n > max) max = n;\n    }\n    for (auto n : numbers) {\n   \
    \     result.push_back((n - min) / (max - min));\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = rescale_to_unit;\n    assert(candidate((std::vector<float>({2.0,\
    \ 49.9}))) == (std::vector<float>({0.0, 1.0})));\n    assert(candidate((std::vector<float>({100.0,\
    \ 49.9}))) == (std::vector<float>({1.0, 0.0})));\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0, 4.0, 5.0}))) == (std::vector<float>({0.0, 0.25, 0.5, 0.75, 1.0})));\n\
    \    assert(candidate((std::vector<float>({2.0, 1.0, 5.0, 3.0, 4.0}))) == (std::vector<float>({0.25,\
    \ 0.0, 1.0, 0.5, 0.75})));\n    assert(candidate((std::vector<float>({12.0, 11.0,\
    \ 15.0, 13.0, 14.0}))) == (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\n\
    std::vector<float> rescale_to_unit(std::vector<float> numbers) {\n    assert(numbers.size()\
    \ >= 2);\n    std::vector<float> result;\n    float min = *std::min_element(numbers.begin(),\
    \ numbers.end());\n    float max = *std::max_element(numbers.begin(), numbers.end());\n\
    \    float scale = max - min;\n    for (float number : numbers) {\n        result.push_back(number\
    \ * scale);\n    }\n    return result;\n}\nint main() {\n    auto candidate =\
    \ rescale_to_unit;\n    assert(candidate((std::vector<float>({2.0, 49.9}))) ==\
    \ (std::vector<float>({0.0, 1.0})));\n    assert(candidate((std::vector<float>({100.0,\
    \ 49.9}))) == (std::vector<float>({1.0, 0.0})));\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0, 4.0, 5.0}))) == (std::vector<float>({0.0, 0.25, 0.5, 0.75, 1.0})));\n\
    \    assert(candidate((std::vector<float>({2.0, 1.0, 5.0, 3.0, 4.0}))) == (std::vector<float>({0.25,\
    \ 0.0, 1.0, 0.5, 0.75})));\n    assert(candidate((std::vector<float>({12.0, 11.0,\
    \ 15.0, 13.0, 14.0}))) == (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n\
    }\n"
  stdout: ''
  stderr: "tmp1uacx61s: /tmp/tmp1uacx61s.cpp:20: int main(): Assertion `candidate((std::vector<float>({2.0,\
    \ 49.9}))) == (std::vector<float>({0.0, 1.0}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\n\
    std::vector<float> rescale_to_unit(std::vector<float> numbers) {\n    std::vector<float>\
    \ rescaled_numbers;\n    rescaled_numbers.reserve(numbers.size());\n    for (float\
    \ number : numbers) {\n        rescaled_numbers.push_back(number / numbers.size());\n\
    \    }\n    return rescaled_numbers;\n}\nint main() {\n    auto candidate = rescale_to_unit;\n\
    \    assert(candidate((std::vector<float>({2.0, 49.9}))) == (std::vector<float>({0.0,\
    \ 1.0})));\n    assert(candidate((std::vector<float>({100.0, 49.9}))) == (std::vector<float>({1.0,\
    \ 0.0})));\n    assert(candidate((std::vector<float>({1.0, 2.0, 3.0, 4.0, 5.0})))\
    \ == (std::vector<float>({0.0, 0.25, 0.5, 0.75, 1.0})));\n    assert(candidate((std::vector<float>({2.0,\
    \ 1.0, 5.0, 3.0, 4.0}))) == (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n\
    \    assert(candidate((std::vector<float>({12.0, 11.0, 15.0, 13.0, 14.0}))) ==\
    \ (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n}\n"
  stdout: ''
  stderr: "tmpb8su82oe: /tmp/tmpb8su82oe.cpp:17: int main(): Assertion `candidate((std::vector<float>({2.0,\
    \ 49.9}))) == (std::vector<float>({0.0, 1.0}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\n\
    std::vector<float> rescale_to_unit(std::vector<float> numbers) {\n    std::vector<float>\
    \ rescaled_numbers;\n    rescaled_numbers.reserve(numbers.size());\n    for (float\
    \ number : numbers) {\n        rescaled_numbers.push_back(number / numbers.size());\n\
    \    }\n    return rescaled_numbers;\n}\nint main() {\n    auto candidate = rescale_to_unit;\n\
    \    assert(candidate((std::vector<float>({2.0, 49.9}))) == (std::vector<float>({0.0,\
    \ 1.0})));\n    assert(candidate((std::vector<float>({100.0, 49.9}))) == (std::vector<float>({1.0,\
    \ 0.0})));\n    assert(candidate((std::vector<float>({1.0, 2.0, 3.0, 4.0, 5.0})))\
    \ == (std::vector<float>({0.0, 0.25, 0.5, 0.75, 1.0})));\n    assert(candidate((std::vector<float>({2.0,\
    \ 1.0, 5.0, 3.0, 4.0}))) == (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n\
    \    assert(candidate((std::vector<float>({12.0, 11.0, 15.0, 13.0, 14.0}))) ==\
    \ (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n}\n"
  stdout: ''
  stderr: "tmpctxi_85z: /tmp/tmpctxi_85z.cpp:17: int main(): Assertion `candidate((std::vector<float>({2.0,\
    \ 49.9}))) == (std::vector<float>({0.0, 1.0}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\n\
    std::vector<float> rescale_to_unit(std::vector<float> numbers) {\n    std::vector<float>\
    \ rescaled_numbers(numbers.size());\n    float smallest_number = numbers[0];\n\
    \    float largest_number = numbers[0];\n    for (size_t i = 1; i < numbers.size();\
    \ i++) {\n        smallest_number = std::min(smallest_number, numbers[i]);\n \
    \       largest_number = std::max(largest_number, numbers[i]);\n    }\n    float\
    \ scale = 1.0f / (largest_number - smallest_number);\n    for (size_t i = 0; i\
    \ < numbers.size(); i++) {\n        rescaled_numbers[i] = numbers[i] * scale;\n\
    \    }\n    return rescaled_numbers;\n}\nint main() {\n    auto candidate = rescale_to_unit;\n\
    \    assert(candidate((std::vector<float>({2.0, 49.9}))) == (std::vector<float>({0.0,\
    \ 1.0})));\n    assert(candidate((std::vector<float>({100.0, 49.9}))) == (std::vector<float>({1.0,\
    \ 0.0})));\n    assert(candidate((std::vector<float>({1.0, 2.0, 3.0, 4.0, 5.0})))\
    \ == (std::vector<float>({0.0, 0.25, 0.5, 0.75, 1.0})));\n    assert(candidate((std::vector<float>({2.0,\
    \ 1.0, 5.0, 3.0, 4.0}))) == (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n\
    \    assert(candidate((std::vector<float>({12.0, 11.0, 15.0, 13.0, 14.0}))) ==\
    \ (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n}\n"
  stdout: ''
  stderr: "tmpb904zhsm: /tmp/tmpb904zhsm.cpp:23: int main(): Assertion `candidate((std::vector<float>({2.0,\
    \ 49.9}))) == (std::vector<float>({0.0, 1.0}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\n\
    std::vector<float> rescale_to_unit(std::vector<float> numbers) {\n    std::vector<float>\
    \ rescaled_numbers;\n    rescaled_numbers.reserve(numbers.size());\n    for (float\
    \ number : numbers) {\n        rescaled_numbers.push_back(number / numbers[0]);\n\
    \    }\n    return rescaled_numbers;\n}\nint main() {\n    auto candidate = rescale_to_unit;\n\
    \    assert(candidate((std::vector<float>({2.0, 49.9}))) == (std::vector<float>({0.0,\
    \ 1.0})));\n    assert(candidate((std::vector<float>({100.0, 49.9}))) == (std::vector<float>({1.0,\
    \ 0.0})));\n    assert(candidate((std::vector<float>({1.0, 2.0, 3.0, 4.0, 5.0})))\
    \ == (std::vector<float>({0.0, 0.25, 0.5, 0.75, 1.0})));\n    assert(candidate((std::vector<float>({2.0,\
    \ 1.0, 5.0, 3.0, 4.0}))) == (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n\
    \    assert(candidate((std::vector<float>({12.0, 11.0, 15.0, 13.0, 14.0}))) ==\
    \ (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n}\n"
  stdout: ''
  stderr: "tmp8u9bwl3l: /tmp/tmp8u9bwl3l.cpp:17: int main(): Assertion `candidate((std::vector<float>({2.0,\
    \ 49.9}))) == (std::vector<float>({0.0, 1.0}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\n\
    std::vector<float> rescale_to_unit(std::vector<float> numbers) {\n    assert(numbers.size()\
    \ >= 2);\n    std::vector<float> result;\n    float min = *std::min_element(numbers.begin(),\
    \ numbers.end());\n    float max = *std::max_element(numbers.begin(), numbers.end());\n\
    \    float range = max - min;\n    float scale = 1.0f / range;\n    for (float\
    \ number : numbers) {\n        result.push_back(number * scale);\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = rescale_to_unit;\n    assert(candidate((std::vector<float>({2.0,\
    \ 49.9}))) == (std::vector<float>({0.0, 1.0})));\n    assert(candidate((std::vector<float>({100.0,\
    \ 49.9}))) == (std::vector<float>({1.0, 0.0})));\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0, 4.0, 5.0}))) == (std::vector<float>({0.0, 0.25, 0.5, 0.75, 1.0})));\n\
    \    assert(candidate((std::vector<float>({2.0, 1.0, 5.0, 3.0, 4.0}))) == (std::vector<float>({0.25,\
    \ 0.0, 1.0, 0.5, 0.75})));\n    assert(candidate((std::vector<float>({12.0, 11.0,\
    \ 15.0, 13.0, 14.0}))) == (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n\
    }\n"
  stdout: ''
  stderr: "tmposfxejs9: /tmp/tmposfxejs9.cpp:21: int main(): Assertion `candidate((std::vector<float>({2.0,\
    \ 49.9}))) == (std::vector<float>({0.0, 1.0}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\n\
    std::vector<float> rescale_to_unit(std::vector<float> numbers) {\n    std::vector<float>\
    \ rescaled_numbers;\n    rescaled_numbers.reserve(numbers.size());\n    for (float\
    \ number : numbers) {\n        rescaled_numbers.push_back(std::min(std::max(number,\
    \ 0.0f), 1.0f));\n    }\n    return rescaled_numbers;\n}\nint main() {\n    auto\
    \ candidate = rescale_to_unit;\n    assert(candidate((std::vector<float>({2.0,\
    \ 49.9}))) == (std::vector<float>({0.0, 1.0})));\n    assert(candidate((std::vector<float>({100.0,\
    \ 49.9}))) == (std::vector<float>({1.0, 0.0})));\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0, 4.0, 5.0}))) == (std::vector<float>({0.0, 0.25, 0.5, 0.75, 1.0})));\n\
    \    assert(candidate((std::vector<float>({2.0, 1.0, 5.0, 3.0, 4.0}))) == (std::vector<float>({0.25,\
    \ 0.0, 1.0, 0.5, 0.75})));\n    assert(candidate((std::vector<float>({12.0, 11.0,\
    \ 15.0, 13.0, 14.0}))) == (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n\
    }\n"
  stdout: ''
  stderr: "tmp_8ta2mga: /tmp/tmp_8ta2mga.cpp:17: int main(): Assertion `candidate((std::vector<float>({2.0,\
    \ 49.9}))) == (std::vector<float>({0.0, 1.0}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\n\
    std::vector<float> rescale_to_unit(std::vector<float> numbers) {\n    assert(numbers.size()\
    \ >= 2);\n    float min = *std::min_element(numbers.begin(), numbers.end());\n\
    \    float max = *std::max_element(numbers.begin(), numbers.end());\n    float\
    \ range = max - min;\n    float scale = 1.0f / range;\n    std::vector<float>\
    \ rescaled_numbers;\n    rescaled_numbers.reserve(numbers.size());\n    for (auto\
    \ number : numbers) {\n        rescaled_numbers.push_back(number * scale);\n \
    \   }\n    return rescaled_numbers;\n}\nint main() {\n    auto candidate = rescale_to_unit;\n\
    \    assert(candidate((std::vector<float>({2.0, 49.9}))) == (std::vector<float>({0.0,\
    \ 1.0})));\n    assert(candidate((std::vector<float>({100.0, 49.9}))) == (std::vector<float>({1.0,\
    \ 0.0})));\n    assert(candidate((std::vector<float>({1.0, 2.0, 3.0, 4.0, 5.0})))\
    \ == (std::vector<float>({0.0, 0.25, 0.5, 0.75, 1.0})));\n    assert(candidate((std::vector<float>({2.0,\
    \ 1.0, 5.0, 3.0, 4.0}))) == (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n\
    \    assert(candidate((std::vector<float>({12.0, 11.0, 15.0, 13.0, 14.0}))) ==\
    \ (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n}\n"
  stdout: ''
  stderr: "tmp7wps9ktr: /tmp/tmp7wps9ktr.cpp:22: int main(): Assertion `candidate((std::vector<float>({2.0,\
    \ 49.9}))) == (std::vector<float>({0.0, 1.0}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\n\
    std::vector<float> rescale_to_unit(std::vector<float> numbers) {\n    std::vector<float>\
    \ rescaled_numbers;\n    rescaled_numbers.reserve(numbers.size());\n    for (float\
    \ number : numbers) {\n        rescaled_numbers.push_back(number * 2.0f - 1.0f);\n\
    \    }\n    return rescaled_numbers;\n}\nint main() {\n    auto candidate = rescale_to_unit;\n\
    \    assert(candidate((std::vector<float>({2.0, 49.9}))) == (std::vector<float>({0.0,\
    \ 1.0})));\n    assert(candidate((std::vector<float>({100.0, 49.9}))) == (std::vector<float>({1.0,\
    \ 0.0})));\n    assert(candidate((std::vector<float>({1.0, 2.0, 3.0, 4.0, 5.0})))\
    \ == (std::vector<float>({0.0, 0.25, 0.5, 0.75, 1.0})));\n    assert(candidate((std::vector<float>({2.0,\
    \ 1.0, 5.0, 3.0, 4.0}))) == (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n\
    \    assert(candidate((std::vector<float>({12.0, 11.0, 15.0, 13.0, 14.0}))) ==\
    \ (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n}\n"
  stdout: ''
  stderr: "tmpm0wlpl7j: /tmp/tmpm0wlpl7j.cpp:17: int main(): Assertion `candidate((std::vector<float>({2.0,\
    \ 49.9}))) == (std::vector<float>({0.0, 1.0}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\n\
    std::vector<float> rescale_to_unit(std::vector<float> numbers) {\n    std::vector<float>\
    \ rescaled_numbers;\n    rescaled_numbers.reserve(numbers.size());\n    for (float\
    \ number : numbers) {\n        rescaled_numbers.push_back(number / numbers.size());\n\
    \    }\n    return rescaled_numbers;\n}\nint main() {\n    auto candidate = rescale_to_unit;\n\
    \    assert(candidate((std::vector<float>({2.0, 49.9}))) == (std::vector<float>({0.0,\
    \ 1.0})));\n    assert(candidate((std::vector<float>({100.0, 49.9}))) == (std::vector<float>({1.0,\
    \ 0.0})));\n    assert(candidate((std::vector<float>({1.0, 2.0, 3.0, 4.0, 5.0})))\
    \ == (std::vector<float>({0.0, 0.25, 0.5, 0.75, 1.0})));\n    assert(candidate((std::vector<float>({2.0,\
    \ 1.0, 5.0, 3.0, 4.0}))) == (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n\
    \    assert(candidate((std::vector<float>({12.0, 11.0, 15.0, 13.0, 14.0}))) ==\
    \ (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n}\n"
  stdout: ''
  stderr: "tmpiqmyrc8i: /tmp/tmpiqmyrc8i.cpp:17: int main(): Assertion `candidate((std::vector<float>({2.0,\
    \ 49.9}))) == (std::vector<float>({0.0, 1.0}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\n\
    std::vector<float> rescale_to_unit(std::vector<float> numbers) {\n    assert(numbers.size()\
    \ > 1);\n    std::vector<float> rescaled_numbers;\n    rescaled_numbers.reserve(numbers.size());\n\
    \    float smallest_number = numbers[0];\n    float largest_number = numbers[0];\n\
    \    for (auto number : numbers) {\n        smallest_number = std::min(smallest_number,\
    \ number);\n        largest_number = std::max(largest_number, number);\n    }\n\
    \    float scale = 1.0f / (largest_number - smallest_number);\n    for (auto number\
    \ : numbers) {\n        rescaled_numbers.push_back(number * scale);\n    }\n \
    \   return rescaled_numbers;\n}\nint main() {\n    auto candidate = rescale_to_unit;\n\
    \    assert(candidate((std::vector<float>({2.0, 49.9}))) == (std::vector<float>({0.0,\
    \ 1.0})));\n    assert(candidate((std::vector<float>({100.0, 49.9}))) == (std::vector<float>({1.0,\
    \ 0.0})));\n    assert(candidate((std::vector<float>({1.0, 2.0, 3.0, 4.0, 5.0})))\
    \ == (std::vector<float>({0.0, 0.25, 0.5, 0.75, 1.0})));\n    assert(candidate((std::vector<float>({2.0,\
    \ 1.0, 5.0, 3.0, 4.0}))) == (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n\
    \    assert(candidate((std::vector<float>({12.0, 11.0, 15.0, 13.0, 14.0}))) ==\
    \ (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n}\n"
  stdout: ''
  stderr: "tmpvzop24hd: /tmp/tmpvzop24hd.cpp:25: int main(): Assertion `candidate((std::vector<float>({2.0,\
    \ 49.9}))) == (std::vector<float>({0.0, 1.0}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\n\
    std::vector<float> rescale_to_unit(std::vector<float> numbers) {\n    assert(numbers.size()\
    \ >= 2);\n    std::vector<float> rescaled_numbers;\n    rescaled_numbers.reserve(numbers.size());\n\
    \    for (float number : numbers) {\n        rescaled_numbers.push_back(number\
    \ / numbers[0]);\n    }\n    return rescaled_numbers;\n}\nint main() {\n    auto\
    \ candidate = rescale_to_unit;\n    assert(candidate((std::vector<float>({2.0,\
    \ 49.9}))) == (std::vector<float>({0.0, 1.0})));\n    assert(candidate((std::vector<float>({100.0,\
    \ 49.9}))) == (std::vector<float>({1.0, 0.0})));\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0, 4.0, 5.0}))) == (std::vector<float>({0.0, 0.25, 0.5, 0.75, 1.0})));\n\
    \    assert(candidate((std::vector<float>({2.0, 1.0, 5.0, 3.0, 4.0}))) == (std::vector<float>({0.25,\
    \ 0.0, 1.0, 0.5, 0.75})));\n    assert(candidate((std::vector<float>({12.0, 11.0,\
    \ 15.0, 13.0, 14.0}))) == (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n\
    }\n"
  stdout: ''
  stderr: "tmpgmzlxqwk: /tmp/tmpgmzlxqwk.cpp:18: int main(): Assertion `candidate((std::vector<float>({2.0,\
    \ 49.9}))) == (std::vector<float>({0.0, 1.0}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\n\
    std::vector<float> rescale_to_unit(std::vector<float> numbers) {\n    assert(numbers.size()\
    \ >= 2);\n    std::vector<float> new_numbers;\n    new_numbers.reserve(numbers.size());\n\
    \    for (float number : numbers) {\n        new_numbers.push_back(number / numbers.size());\n\
    \    }\n    return new_numbers;\n}\nint main() {\n    auto candidate = rescale_to_unit;\n\
    \    assert(candidate((std::vector<float>({2.0, 49.9}))) == (std::vector<float>({0.0,\
    \ 1.0})));\n    assert(candidate((std::vector<float>({100.0, 49.9}))) == (std::vector<float>({1.0,\
    \ 0.0})));\n    assert(candidate((std::vector<float>({1.0, 2.0, 3.0, 4.0, 5.0})))\
    \ == (std::vector<float>({0.0, 0.25, 0.5, 0.75, 1.0})));\n    assert(candidate((std::vector<float>({2.0,\
    \ 1.0, 5.0, 3.0, 4.0}))) == (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n\
    \    assert(candidate((std::vector<float>({12.0, 11.0, 15.0, 13.0, 14.0}))) ==\
    \ (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n}\n"
  stdout: ''
  stderr: "tmpltb20rgh: /tmp/tmpltb20rgh.cpp:18: int main(): Assertion `candidate((std::vector<float>({2.0,\
    \ 49.9}))) == (std::vector<float>({0.0, 1.0}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\n\
    std::vector<float> rescale_to_unit(std::vector<float> numbers) {\n    std::vector<float>\
    \ rescaled_numbers;\n    rescaled_numbers.reserve(numbers.size());\n    for (float\
    \ number : numbers) {\n        rescaled_numbers.push_back(number / numbers.size());\n\
    \    }\n    return rescaled_numbers;\n}\nint main() {\n    auto candidate = rescale_to_unit;\n\
    \    assert(candidate((std::vector<float>({2.0, 49.9}))) == (std::vector<float>({0.0,\
    \ 1.0})));\n    assert(candidate((std::vector<float>({100.0, 49.9}))) == (std::vector<float>({1.0,\
    \ 0.0})));\n    assert(candidate((std::vector<float>({1.0, 2.0, 3.0, 4.0, 5.0})))\
    \ == (std::vector<float>({0.0, 0.25, 0.5, 0.75, 1.0})));\n    assert(candidate((std::vector<float>({2.0,\
    \ 1.0, 5.0, 3.0, 4.0}))) == (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n\
    \    assert(candidate((std::vector<float>({12.0, 11.0, 15.0, 13.0, 14.0}))) ==\
    \ (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n}\n"
  stdout: ''
  stderr: "tmp3qk4yko5: /tmp/tmp3qk4yko5.cpp:17: int main(): Assertion `candidate((std::vector<float>({2.0,\
    \ 49.9}))) == (std::vector<float>({0.0, 1.0}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\n\
    std::vector<float> rescale_to_unit(std::vector<float> numbers) {\n    assert(numbers.size()\
    \ >= 2);\n    std::vector<float> result(numbers.size());\n    float min = numbers[0];\n\
    \    float max = numbers[0];\n    for (size_t i = 0; i < numbers.size(); i++)\
    \ {\n        if (numbers[i] > max) {\n            max = numbers[i];\n        }\n\
    \        if (numbers[i] < min) {\n            min = numbers[i];\n        }\n \
    \   }\n    for (size_t i = 0; i < numbers.size(); i++) {\n        result[i] =\
    \ numbers[i] - min;\n        result[i] *= (max - min) / (numbers.size() - 1);\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = rescale_to_unit;\n\
    \    assert(candidate((std::vector<float>({2.0, 49.9}))) == (std::vector<float>({0.0,\
    \ 1.0})));\n    assert(candidate((std::vector<float>({100.0, 49.9}))) == (std::vector<float>({1.0,\
    \ 0.0})));\n    assert(candidate((std::vector<float>({1.0, 2.0, 3.0, 4.0, 5.0})))\
    \ == (std::vector<float>({0.0, 0.25, 0.5, 0.75, 1.0})));\n    assert(candidate((std::vector<float>({2.0,\
    \ 1.0, 5.0, 3.0, 4.0}))) == (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n\
    \    assert(candidate((std::vector<float>({12.0, 11.0, 15.0, 13.0, 14.0}))) ==\
    \ (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n}\n"
  stdout: ''
  stderr: "tmp8ey1o71o: /tmp/tmp8ey1o71o.cpp:28: int main(): Assertion `candidate((std::vector<float>({2.0,\
    \ 49.9}))) == (std::vector<float>({0.0, 1.0}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\n\
    std::vector<float> rescale_to_unit(std::vector<float> numbers) {\n    assert(numbers.size()\
    \ >= 2);\n    std::vector<float> result;\n    float min = *std::min_element(numbers.begin(),\
    \ numbers.end());\n    float max = *std::max_element(numbers.begin(), numbers.end());\n\
    \    float scale = max - min;\n    for (float number : numbers) {\n        result.push_back(number\
    \ * scale);\n    }\n    return result;\n}\nint main() {\n    auto candidate =\
    \ rescale_to_unit;\n    assert(candidate((std::vector<float>({2.0, 49.9}))) ==\
    \ (std::vector<float>({0.0, 1.0})));\n    assert(candidate((std::vector<float>({100.0,\
    \ 49.9}))) == (std::vector<float>({1.0, 0.0})));\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0, 4.0, 5.0}))) == (std::vector<float>({0.0, 0.25, 0.5, 0.75, 1.0})));\n\
    \    assert(candidate((std::vector<float>({2.0, 1.0, 5.0, 3.0, 4.0}))) == (std::vector<float>({0.25,\
    \ 0.0, 1.0, 0.5, 0.75})));\n    assert(candidate((std::vector<float>({12.0, 11.0,\
    \ 15.0, 13.0, 14.0}))) == (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n\
    }\n"
  stdout: ''
  stderr: "tmpb4jonzv_: /tmp/tmpb4jonzv_.cpp:20: int main(): Assertion `candidate((std::vector<float>({2.0,\
    \ 49.9}))) == (std::vector<float>({0.0, 1.0}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\n\
    std::vector<float> rescale_to_unit(std::vector<float> numbers) {\n    std::vector<float>\
    \ rescaled_numbers;\n    rescaled_numbers.reserve(numbers.size());\n    for (auto\
    \ number : numbers) {\n        rescaled_numbers.push_back(std::min(std::max(number,\
    \ 0.0f), 1.0f));\n    }\n    return rescaled_numbers;\n}\nint main() {\n    auto\
    \ candidate = rescale_to_unit;\n    assert(candidate((std::vector<float>({2.0,\
    \ 49.9}))) == (std::vector<float>({0.0, 1.0})));\n    assert(candidate((std::vector<float>({100.0,\
    \ 49.9}))) == (std::vector<float>({1.0, 0.0})));\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0, 4.0, 5.0}))) == (std::vector<float>({0.0, 0.25, 0.5, 0.75, 1.0})));\n\
    \    assert(candidate((std::vector<float>({2.0, 1.0, 5.0, 3.0, 4.0}))) == (std::vector<float>({0.25,\
    \ 0.0, 1.0, 0.5, 0.75})));\n    assert(candidate((std::vector<float>({12.0, 11.0,\
    \ 15.0, 13.0, 14.0}))) == (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n\
    }\n"
  stdout: ''
  stderr: "tmppw91iaxn: /tmp/tmppw91iaxn.cpp:17: int main(): Assertion `candidate((std::vector<float>({2.0,\
    \ 49.9}))) == (std::vector<float>({0.0, 1.0}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\n\
    std::vector<float> rescale_to_unit(std::vector<float> numbers) {\n    assert(numbers.size()\
    \ >= 2);\n    std::vector<float> rescaled_numbers;\n    rescaled_numbers.reserve(numbers.size());\n\
    \    for (float number : numbers) {\n        rescaled_numbers.push_back(number\
    \ / numbers[0]);\n    }\n    return rescaled_numbers;\n}\nint main() {\n    auto\
    \ candidate = rescale_to_unit;\n    assert(candidate((std::vector<float>({2.0,\
    \ 49.9}))) == (std::vector<float>({0.0, 1.0})));\n    assert(candidate((std::vector<float>({100.0,\
    \ 49.9}))) == (std::vector<float>({1.0, 0.0})));\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0, 4.0, 5.0}))) == (std::vector<float>({0.0, 0.25, 0.5, 0.75, 1.0})));\n\
    \    assert(candidate((std::vector<float>({2.0, 1.0, 5.0, 3.0, 4.0}))) == (std::vector<float>({0.25,\
    \ 0.0, 1.0, 0.5, 0.75})));\n    assert(candidate((std::vector<float>({12.0, 11.0,\
    \ 15.0, 13.0, 14.0}))) == (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n\
    }\n"
  stdout: ''
  stderr: "tmpzfetna0n: /tmp/tmpzfetna0n.cpp:18: int main(): Assertion `candidate((std::vector<float>({2.0,\
    \ 49.9}))) == (std::vector<float>({0.0, 1.0}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\n\
    std::vector<float> rescale_to_unit(std::vector<float> numbers) {\n    std::vector<float>\
    \ rescaled_numbers;\n    rescaled_numbers.reserve(numbers.size());\n    for (float\
    \ number : numbers) {\n        rescaled_numbers.push_back(number / numbers.size());\n\
    \    }\n    return rescaled_numbers;\n}\nint main() {\n    auto candidate = rescale_to_unit;\n\
    \    assert(candidate((std::vector<float>({2.0, 49.9}))) == (std::vector<float>({0.0,\
    \ 1.0})));\n    assert(candidate((std::vector<float>({100.0, 49.9}))) == (std::vector<float>({1.0,\
    \ 0.0})));\n    assert(candidate((std::vector<float>({1.0, 2.0, 3.0, 4.0, 5.0})))\
    \ == (std::vector<float>({0.0, 0.25, 0.5, 0.75, 1.0})));\n    assert(candidate((std::vector<float>({2.0,\
    \ 1.0, 5.0, 3.0, 4.0}))) == (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n\
    \    assert(candidate((std::vector<float>({12.0, 11.0, 15.0, 13.0, 14.0}))) ==\
    \ (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n}\n"
  stdout: ''
  stderr: "tmpoimtdugd: /tmp/tmpoimtdugd.cpp:17: int main(): Assertion `candidate((std::vector<float>({2.0,\
    \ 49.9}))) == (std::vector<float>({0.0, 1.0}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\n\
    std::vector<float> rescale_to_unit(std::vector<float> numbers) {\n    std::vector<float>\
    \ result;\n    float min = *std::min_element(numbers.begin(), numbers.end());\n\
    \    float max = *std::max_element(numbers.begin(), numbers.end());\n    float\
    \ scale = max - min;\n    for (float number : numbers) {\n        result.push_back(number\
    \ * scale);\n    }\n    return result;\n}\nint main() {\n    auto candidate =\
    \ rescale_to_unit;\n    assert(candidate((std::vector<float>({2.0, 49.9}))) ==\
    \ (std::vector<float>({0.0, 1.0})));\n    assert(candidate((std::vector<float>({100.0,\
    \ 49.9}))) == (std::vector<float>({1.0, 0.0})));\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0, 4.0, 5.0}))) == (std::vector<float>({0.0, 0.25, 0.5, 0.75, 1.0})));\n\
    \    assert(candidate((std::vector<float>({2.0, 1.0, 5.0, 3.0, 4.0}))) == (std::vector<float>({0.25,\
    \ 0.0, 1.0, 0.5, 0.75})));\n    assert(candidate((std::vector<float>({12.0, 11.0,\
    \ 15.0, 13.0, 14.0}))) == (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n\
    }\n"
  stdout: ''
  stderr: "tmpwi4z6hjb: /tmp/tmpwi4z6hjb.cpp:19: int main(): Assertion `candidate((std::vector<float>({2.0,\
    \ 49.9}))) == (std::vector<float>({0.0, 1.0}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\n\
    std::vector<float> rescale_to_unit(std::vector<float> numbers) {\n    assert(numbers.size()\
    \ >= 2);\n    std::vector<float> rescaled_numbers(numbers.size());\n    float\
    \ smallest_number = numbers[0];\n    float largest_number = numbers[0];\n    for\
    \ (size_t i = 1; i < numbers.size(); ++i) {\n        smallest_number = std::min(smallest_number,\
    \ numbers[i]);\n        largest_number = std::max(largest_number, numbers[i]);\n\
    \    }\n    float scale = 1.0f / (largest_number - smallest_number);\n    for\
    \ (size_t i = 0; i < numbers.size(); ++i) {\n        rescaled_numbers[i] = numbers[i]\
    \ * scale;\n    }\n    return rescaled_numbers;\n}\nint main() {\n    auto candidate\
    \ = rescale_to_unit;\n    assert(candidate((std::vector<float>({2.0, 49.9})))\
    \ == (std::vector<float>({0.0, 1.0})));\n    assert(candidate((std::vector<float>({100.0,\
    \ 49.9}))) == (std::vector<float>({1.0, 0.0})));\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0, 4.0, 5.0}))) == (std::vector<float>({0.0, 0.25, 0.5, 0.75, 1.0})));\n\
    \    assert(candidate((std::vector<float>({2.0, 1.0, 5.0, 3.0, 4.0}))) == (std::vector<float>({0.25,\
    \ 0.0, 1.0, 0.5, 0.75})));\n    assert(candidate((std::vector<float>({12.0, 11.0,\
    \ 15.0, 13.0, 14.0}))) == (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n\
    }\n"
  stdout: ''
  stderr: "tmpd0lv4pxq: /tmp/tmpd0lv4pxq.cpp:24: int main(): Assertion `candidate((std::vector<float>({2.0,\
    \ 49.9}))) == (std::vector<float>({0.0, 1.0}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\n\
    std::vector<float> rescale_to_unit(std::vector<float> numbers) {\n    std::vector<float>\
    \ result;\n    float min = std::numeric_limits<float>::max();\n    float max =\
    \ std::numeric_limits<float>::min();\n    for (float number : numbers) {\n   \
    \     min = std::min(min, number);\n        max = std::max(max, number);\n   \
    \ }\n    for (float number : numbers) {\n        result.push_back(number * (max\
    \ - min) / numbers.size());\n    }\n    return result;\n}\nint main() {\n    auto\
    \ candidate = rescale_to_unit;\n    assert(candidate((std::vector<float>({2.0,\
    \ 49.9}))) == (std::vector<float>({0.0, 1.0})));\n    assert(candidate((std::vector<float>({100.0,\
    \ 49.9}))) == (std::vector<float>({1.0, 0.0})));\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0, 4.0, 5.0}))) == (std::vector<float>({0.0, 0.25, 0.5, 0.75, 1.0})));\n\
    \    assert(candidate((std::vector<float>({2.0, 1.0, 5.0, 3.0, 4.0}))) == (std::vector<float>({0.25,\
    \ 0.0, 1.0, 0.5, 0.75})));\n    assert(candidate((std::vector<float>({12.0, 11.0,\
    \ 15.0, 13.0, 14.0}))) == (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n\
    }\n"
  stdout: ''
  stderr: "tmpfobw78av: /tmp/tmpfobw78av.cpp:22: int main(): Assertion `candidate((std::vector<float>({2.0,\
    \ 49.9}))) == (std::vector<float>({0.0, 1.0}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\n\
    std::vector<float> rescale_to_unit(std::vector<float> numbers) {\n    assert(numbers.size()\
    \ >= 2);\n    std::vector<float> rescaled_numbers(numbers.size());\n    float\
    \ min = numbers[0];\n    float max = numbers[0];\n    for (size_t i = 1; i < numbers.size();\
    \ i++) {\n        min = std::min(min, numbers[i]);\n        max = std::max(max,\
    \ numbers[i]);\n    }\n    for (size_t i = 0; i < numbers.size(); i++) {\n   \
    \     rescaled_numbers[i] = numbers[i] - min;\n        rescaled_numbers[i] /=\
    \ (max - min);\n    }\n    return rescaled_numbers;\n}\nint main() {\n    auto\
    \ candidate = rescale_to_unit;\n    assert(candidate((std::vector<float>({2.0,\
    \ 49.9}))) == (std::vector<float>({0.0, 1.0})));\n    assert(candidate((std::vector<float>({100.0,\
    \ 49.9}))) == (std::vector<float>({1.0, 0.0})));\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0, 4.0, 5.0}))) == (std::vector<float>({0.0, 0.25, 0.5, 0.75, 1.0})));\n\
    \    assert(candidate((std::vector<float>({2.0, 1.0, 5.0, 3.0, 4.0}))) == (std::vector<float>({0.25,\
    \ 0.0, 1.0, 0.5, 0.75})));\n    assert(candidate((std::vector<float>({12.0, 11.0,\
    \ 15.0, 13.0, 14.0}))) == (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\n\
    std::vector<float> rescale_to_unit(std::vector<float> numbers) {\n    std::vector<float>\
    \ rescaled_numbers;\n    rescaled_numbers.reserve(numbers.size());\n    for (float\
    \ number : numbers) {\n        rescaled_numbers.push_back(number / numbers.size());\n\
    \    }\n    return rescaled_numbers;\n}\nint main() {\n    auto candidate = rescale_to_unit;\n\
    \    assert(candidate((std::vector<float>({2.0, 49.9}))) == (std::vector<float>({0.0,\
    \ 1.0})));\n    assert(candidate((std::vector<float>({100.0, 49.9}))) == (std::vector<float>({1.0,\
    \ 0.0})));\n    assert(candidate((std::vector<float>({1.0, 2.0, 3.0, 4.0, 5.0})))\
    \ == (std::vector<float>({0.0, 0.25, 0.5, 0.75, 1.0})));\n    assert(candidate((std::vector<float>({2.0,\
    \ 1.0, 5.0, 3.0, 4.0}))) == (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n\
    \    assert(candidate((std::vector<float>({12.0, 11.0, 15.0, 13.0, 14.0}))) ==\
    \ (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n}\n"
  stdout: ''
  stderr: "tmpcgua2a49: /tmp/tmpcgua2a49.cpp:17: int main(): Assertion `candidate((std::vector<float>({2.0,\
    \ 49.9}))) == (std::vector<float>({0.0, 1.0}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\n\
    std::vector<float> rescale_to_unit(std::vector<float> numbers) {\n    assert(numbers.size()\
    \ >= 2);\n    std::vector<float> result(numbers.size());\n    float min = numbers[0];\n\
    \    float max = numbers[0];\n    for (size_t i = 1; i < numbers.size(); i++)\
    \ {\n        min = std::min(min, numbers[i]);\n        max = std::max(max, numbers[i]);\n\
    \    }\n    for (size_t i = 0; i < numbers.size(); i++) {\n        result[i] =\
    \ numbers[i] - min;\n        result[i] = result[i] / (max - min);\n    }\n   \
    \ return result;\n}\nint main() {\n    auto candidate = rescale_to_unit;\n   \
    \ assert(candidate((std::vector<float>({2.0, 49.9}))) == (std::vector<float>({0.0,\
    \ 1.0})));\n    assert(candidate((std::vector<float>({100.0, 49.9}))) == (std::vector<float>({1.0,\
    \ 0.0})));\n    assert(candidate((std::vector<float>({1.0, 2.0, 3.0, 4.0, 5.0})))\
    \ == (std::vector<float>({0.0, 0.25, 0.5, 0.75, 1.0})));\n    assert(candidate((std::vector<float>({2.0,\
    \ 1.0, 5.0, 3.0, 4.0}))) == (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n\
    \    assert(candidate((std::vector<float>({12.0, 11.0, 15.0, 13.0, 14.0}))) ==\
    \ (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\n\
    std::vector<float> rescale_to_unit(std::vector<float> numbers) {\n    std::vector<float>\
    \ rescaled_numbers;\n    rescaled_numbers.reserve(numbers.size());\n    for (float\
    \ number : numbers) {\n        rescaled_numbers.push_back(number / numbers.size());\n\
    \    }\n    return rescaled_numbers;\n}\nint main() {\n    auto candidate = rescale_to_unit;\n\
    \    assert(candidate((std::vector<float>({2.0, 49.9}))) == (std::vector<float>({0.0,\
    \ 1.0})));\n    assert(candidate((std::vector<float>({100.0, 49.9}))) == (std::vector<float>({1.0,\
    \ 0.0})));\n    assert(candidate((std::vector<float>({1.0, 2.0, 3.0, 4.0, 5.0})))\
    \ == (std::vector<float>({0.0, 0.25, 0.5, 0.75, 1.0})));\n    assert(candidate((std::vector<float>({2.0,\
    \ 1.0, 5.0, 3.0, 4.0}))) == (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n\
    \    assert(candidate((std::vector<float>({12.0, 11.0, 15.0, 13.0, 14.0}))) ==\
    \ (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n}\n"
  stdout: ''
  stderr: "tmpfe2g2uxo: /tmp/tmpfe2g2uxo.cpp:17: int main(): Assertion `candidate((std::vector<float>({2.0,\
    \ 49.9}))) == (std::vector<float>({0.0, 1.0}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\n\
    std::vector<float> rescale_to_unit(std::vector<float> numbers) {\n    assert(numbers.size()\
    \ >= 2);\n    std::vector<float> rescaled_numbers(numbers.size());\n    float\
    \ max_number = std::max(numbers);\n    float min_number = std::min(numbers);\n\
    \    float range = max_number - min_number;\n    for (size_t i = 0; i < numbers.size();\
    \ i++) {\n        rescaled_numbers[i] = numbers[i] - min_number;\n        rescaled_numbers[i]\
    \ /= range;\n    }\n    return rescaled_numbers;\n}\nint main() {\n    auto candidate\
    \ = rescale_to_unit;\n    assert(candidate((std::vector<float>({2.0, 49.9})))\
    \ == (std::vector<float>({0.0, 1.0})));\n    assert(candidate((std::vector<float>({100.0,\
    \ 49.9}))) == (std::vector<float>({1.0, 0.0})));\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0, 4.0, 5.0}))) == (std::vector<float>({0.0, 0.25, 0.5, 0.75, 1.0})));\n\
    \    assert(candidate((std::vector<float>({2.0, 1.0, 5.0, 3.0, 4.0}))) == (std::vector<float>({0.25,\
    \ 0.0, 1.0, 0.5, 0.75})));\n    assert(candidate((std::vector<float>({12.0, 11.0,\
    \ 15.0, 13.0, 14.0}))) == (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n\
    }\n"
  stdout: ''
  stderr: "/tmp/tmp5y9p_goc.cpp: In function \u2018std::vector<float> rescale_to_unit(std::vector<float>)\u2019\
    :\n/tmp/tmp5y9p_goc.cpp:10:40: error: no matching function for call to \u2018\
    max(std::vector<float>&)\u2019\n   10 |     float max_number = std::max(numbers);\n\
    \      |                                        ^\nIn file included from /usr/include/c++/9/bits/char_traits.h:39,\n\
    \                 from /usr/include/c++/9/ios:40,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmp5y9p_goc.cpp:2:\n/usr/include/c++/9/bits/stl_algobase.h:222:5: note:\
    \ candidate: \u2018template<class _Tp> constexpr const _Tp& std::max(const _Tp&,\
    \ const _Tp&)\u2019\n  222 |     max(const _Tp& __a, const _Tp& __b)\n      |\
    \     ^~~\n/usr/include/c++/9/bits/stl_algobase.h:222:5: note:   template argument\
    \ deduction/substitution failed:\n/tmp/tmp5y9p_goc.cpp:10:40: note:   candidate\
    \ expects 2 arguments, 1 provided\n   10 |     float max_number = std::max(numbers);\n\
    \      |                                        ^\nIn file included from /usr/include/c++/9/bits/char_traits.h:39,\n\
    \                 from /usr/include/c++/9/ios:40,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmp5y9p_goc.cpp:2:\n/usr/include/c++/9/bits/stl_algobase.h:268:5: note:\
    \ candidate: \u2018template<class _Tp, class _Compare> constexpr const _Tp& std::max(const\
    \ _Tp&, const _Tp&, _Compare)\u2019\n  268 |     max(const _Tp& __a, const _Tp&\
    \ __b, _Compare __comp)\n      |     ^~~\n/usr/include/c++/9/bits/stl_algobase.h:268:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmp5y9p_goc.cpp:10:40:\
    \ note:   candidate expects 3 arguments, 1 provided\n   10 |     float max_number\
    \ = std::max(numbers);\n      |                                        ^\nIn file\
    \ included from /usr/include/c++/9/algorithm:62,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp5y9p_goc.cpp:2:\n/usr/include/c++/9/bits/stl_algo.h:3462:5:\
    \ note: candidate: \u2018template<class _Tp> constexpr _Tp std::max(std::initializer_list<_Tp>)\u2019\
    \n 3462 |     max(initializer_list<_Tp> __l)\n      |     ^~~\n/usr/include/c++/9/bits/stl_algo.h:3462:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmp5y9p_goc.cpp:10:40:\
    \ note:   \u2018std::vector<float>\u2019 is not derived from \u2018std::initializer_list<_Tp>\u2019\
    \n   10 |     float max_number = std::max(numbers);\n      |                 \
    \                       ^\nIn file included from /usr/include/c++/9/algorithm:62,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp5y9p_goc.cpp:2:\n/usr/include/c++/9/bits/stl_algo.h:3468:5:\
    \ note: candidate: \u2018template<class _Tp, class _Compare> constexpr _Tp std::max(std::initializer_list<_Tp>,\
    \ _Compare)\u2019\n 3468 |     max(initializer_list<_Tp> __l, _Compare __comp)\n\
    \      |     ^~~\n/usr/include/c++/9/bits/stl_algo.h:3468:5: note:   template\
    \ argument deduction/substitution failed:\n/tmp/tmp5y9p_goc.cpp:10:40: note: \
    \  \u2018std::vector<float>\u2019 is not derived from \u2018std::initializer_list<_Tp>\u2019\
    \n   10 |     float max_number = std::max(numbers);\n      |                 \
    \                       ^\n/tmp/tmp5y9p_goc.cpp:11:40: error: no matching function\
    \ for call to \u2018min(std::vector<float>&)\u2019\n   11 |     float min_number\
    \ = std::min(numbers);\n      |                                        ^\nIn file\
    \ included from /usr/include/c++/9/bits/char_traits.h:39,\n                 from\
    \ /usr/include/c++/9/ios:40,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmp5y9p_goc.cpp:2:\n/usr/include/c++/9/bits/stl_algobase.h:198:5: note:\
    \ candidate: \u2018template<class _Tp> constexpr const _Tp& std::min(const _Tp&,\
    \ const _Tp&)\u2019\n  198 |     min(const _Tp& __a, const _Tp& __b)\n      |\
    \     ^~~\n/usr/include/c++/9/bits/stl_algobase.h:198:5: note:   template argument\
    \ deduction/substitution failed:\n/tmp/tmp5y9p_goc.cpp:11:40: note:   candidate\
    \ expects 2 arguments, 1 provided\n   11 |     float min_number = std::min(numbers);\n\
    \      |                                        ^\nIn file included from /usr/include/c++/9/bits/char_traits.h:39,\n\
    \                 from /usr/include/c++/9/ios:40,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmp5y9p_goc.cpp:2:\n/usr/include/c++/9/bits/stl_algobase.h:246:5: note:\
    \ candidate: \u2018template<class _Tp, class _Compare> constexpr const _Tp& std::min(const\
    \ _Tp&, const _Tp&, _Compare)\u2019\n  246 |     min(const _Tp& __a, const _Tp&\
    \ __b, _Compare __comp)\n      |     ^~~\n/usr/include/c++/9/bits/stl_algobase.h:246:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmp5y9p_goc.cpp:11:40:\
    \ note:   candidate expects 3 arguments, 1 provided\n   11 |     float min_number\
    \ = std::min(numbers);\n      |                                        ^\nIn file\
    \ included from /usr/include/c++/9/algorithm:62,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp5y9p_goc.cpp:2:\n/usr/include/c++/9/bits/stl_algo.h:3450:5:\
    \ note: candidate: \u2018template<class _Tp> constexpr _Tp std::min(std::initializer_list<_Tp>)\u2019\
    \n 3450 |     min(initializer_list<_Tp> __l)\n      |     ^~~\n/usr/include/c++/9/bits/stl_algo.h:3450:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmp5y9p_goc.cpp:11:40:\
    \ note:   \u2018std::vector<float>\u2019 is not derived from \u2018std::initializer_list<_Tp>\u2019\
    \n   11 |     float min_number = std::min(numbers);\n      |                 \
    \                       ^\nIn file included from /usr/include/c++/9/algorithm:62,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp5y9p_goc.cpp:2:\n/usr/include/c++/9/bits/stl_algo.h:3456:5:\
    \ note: candidate: \u2018template<class _Tp, class _Compare> constexpr _Tp std::min(std::initializer_list<_Tp>,\
    \ _Compare)\u2019\n 3456 |     min(initializer_list<_Tp> __l, _Compare __comp)\n\
    \      |     ^~~\n/usr/include/c++/9/bits/stl_algo.h:3456:5: note:   template\
    \ argument deduction/substitution failed:\n/tmp/tmp5y9p_goc.cpp:11:40: note: \
    \  \u2018std::vector<float>\u2019 is not derived from \u2018std::initializer_list<_Tp>\u2019\
    \n   11 |     float min_number = std::min(numbers);\n      |                 \
    \                       ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\n\
    std::vector<float> rescale_to_unit(std::vector<float> numbers) {\n    std::vector<float>\
    \ rescaled_numbers;\n    rescaled_numbers.reserve(numbers.size());\n    for (float\
    \ number : numbers) {\n        rescaled_numbers.push_back(number / numbers.size());\n\
    \    }\n    return rescaled_numbers;\n}\nint main() {\n    auto candidate = rescale_to_unit;\n\
    \    assert(candidate((std::vector<float>({2.0, 49.9}))) == (std::vector<float>({0.0,\
    \ 1.0})));\n    assert(candidate((std::vector<float>({100.0, 49.9}))) == (std::vector<float>({1.0,\
    \ 0.0})));\n    assert(candidate((std::vector<float>({1.0, 2.0, 3.0, 4.0, 5.0})))\
    \ == (std::vector<float>({0.0, 0.25, 0.5, 0.75, 1.0})));\n    assert(candidate((std::vector<float>({2.0,\
    \ 1.0, 5.0, 3.0, 4.0}))) == (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n\
    \    assert(candidate((std::vector<float>({12.0, 11.0, 15.0, 13.0, 14.0}))) ==\
    \ (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n}\n"
  stdout: ''
  stderr: "tmp77vecbqg: /tmp/tmp77vecbqg.cpp:17: int main(): Assertion `candidate((std::vector<float>({2.0,\
    \ 49.9}))) == (std::vector<float>({0.0, 1.0}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\n\
    std::vector<float> rescale_to_unit(std::vector<float> numbers) {\n    std::vector<float>\
    \ rescaled_numbers;\n    rescaled_numbers.reserve(numbers.size());\n    for (float\
    \ number : numbers) {\n        rescaled_numbers.push_back(number / numbers[0]);\n\
    \    }\n    return rescaled_numbers;\n}\nint main() {\n    auto candidate = rescale_to_unit;\n\
    \    assert(candidate((std::vector<float>({2.0, 49.9}))) == (std::vector<float>({0.0,\
    \ 1.0})));\n    assert(candidate((std::vector<float>({100.0, 49.9}))) == (std::vector<float>({1.0,\
    \ 0.0})));\n    assert(candidate((std::vector<float>({1.0, 2.0, 3.0, 4.0, 5.0})))\
    \ == (std::vector<float>({0.0, 0.25, 0.5, 0.75, 1.0})));\n    assert(candidate((std::vector<float>({2.0,\
    \ 1.0, 5.0, 3.0, 4.0}))) == (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n\
    \    assert(candidate((std::vector<float>({12.0, 11.0, 15.0, 13.0, 14.0}))) ==\
    \ (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n}\n"
  stdout: ''
  stderr: "tmpntl83n9q: /tmp/tmpntl83n9q.cpp:17: int main(): Assertion `candidate((std::vector<float>({2.0,\
    \ 49.9}))) == (std::vector<float>({0.0, 1.0}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\n\
    std::vector<float> rescale_to_unit(std::vector<float> numbers) {\n    std::vector<float>\
    \ result;\n    float min = std::numeric_limits<float>::max();\n    float max =\
    \ std::numeric_limits<float>::min();\n    for (float number : numbers) {\n   \
    \     min = std::min(min, number);\n        max = std::max(max, number);\n   \
    \ }\n    for (float number : numbers) {\n        result.push_back(number * (max\
    \ - min) / (max - min));\n    }\n    return result;\n}\nint main() {\n    auto\
    \ candidate = rescale_to_unit;\n    assert(candidate((std::vector<float>({2.0,\
    \ 49.9}))) == (std::vector<float>({0.0, 1.0})));\n    assert(candidate((std::vector<float>({100.0,\
    \ 49.9}))) == (std::vector<float>({1.0, 0.0})));\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0, 4.0, 5.0}))) == (std::vector<float>({0.0, 0.25, 0.5, 0.75, 1.0})));\n\
    \    assert(candidate((std::vector<float>({2.0, 1.0, 5.0, 3.0, 4.0}))) == (std::vector<float>({0.25,\
    \ 0.0, 1.0, 0.5, 0.75})));\n    assert(candidate((std::vector<float>({12.0, 11.0,\
    \ 15.0, 13.0, 14.0}))) == (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n\
    }\n"
  stdout: ''
  stderr: "tmpwdjcj7dz: /tmp/tmpwdjcj7dz.cpp:22: int main(): Assertion `candidate((std::vector<float>({2.0,\
    \ 49.9}))) == (std::vector<float>({0.0, 1.0}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\n\
    std::vector<float> rescale_to_unit(std::vector<float> numbers) {\n    std::vector<float>\
    \ rescaled_numbers;\n    rescaled_numbers.reserve(numbers.size());\n    for (auto\
    \ number : numbers) {\n        rescaled_numbers.push_back(number / numbers.size());\n\
    \    }\n    return rescaled_numbers;\n}\nint main() {\n    auto candidate = rescale_to_unit;\n\
    \    assert(candidate((std::vector<float>({2.0, 49.9}))) == (std::vector<float>({0.0,\
    \ 1.0})));\n    assert(candidate((std::vector<float>({100.0, 49.9}))) == (std::vector<float>({1.0,\
    \ 0.0})));\n    assert(candidate((std::vector<float>({1.0, 2.0, 3.0, 4.0, 5.0})))\
    \ == (std::vector<float>({0.0, 0.25, 0.5, 0.75, 1.0})));\n    assert(candidate((std::vector<float>({2.0,\
    \ 1.0, 5.0, 3.0, 4.0}))) == (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n\
    \    assert(candidate((std::vector<float>({12.0, 11.0, 15.0, 13.0, 14.0}))) ==\
    \ (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n}\n"
  stdout: ''
  stderr: "tmpng46fzts: /tmp/tmpng46fzts.cpp:17: int main(): Assertion `candidate((std::vector<float>({2.0,\
    \ 49.9}))) == (std::vector<float>({0.0, 1.0}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\n\
    std::vector<float> rescale_to_unit(std::vector<float> numbers) {\n    assert(numbers.size()\
    \ >= 2);\n    std::vector<float> rescaled;\n    rescaled.reserve(numbers.size());\n\
    \    for (float number : numbers) {\n        rescaled.push_back(number / numbers[0]);\n\
    \    }\n    return rescaled;\n}\nint main() {\n    auto candidate = rescale_to_unit;\n\
    \    assert(candidate((std::vector<float>({2.0, 49.9}))) == (std::vector<float>({0.0,\
    \ 1.0})));\n    assert(candidate((std::vector<float>({100.0, 49.9}))) == (std::vector<float>({1.0,\
    \ 0.0})));\n    assert(candidate((std::vector<float>({1.0, 2.0, 3.0, 4.0, 5.0})))\
    \ == (std::vector<float>({0.0, 0.25, 0.5, 0.75, 1.0})));\n    assert(candidate((std::vector<float>({2.0,\
    \ 1.0, 5.0, 3.0, 4.0}))) == (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n\
    \    assert(candidate((std::vector<float>({12.0, 11.0, 15.0, 13.0, 14.0}))) ==\
    \ (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n}\n"
  stdout: ''
  stderr: "tmppy_b8yye: /tmp/tmppy_b8yye.cpp:18: int main(): Assertion `candidate((std::vector<float>({2.0,\
    \ 49.9}))) == (std::vector<float>({0.0, 1.0}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\n\
    std::vector<float> rescale_to_unit(std::vector<float> numbers) {\n    assert(numbers.size()\
    \ >= 2);\n    std::vector<float> rescaled_numbers;\n    rescaled_numbers.reserve(numbers.size());\n\
    \    for (float number : numbers) {\n        rescaled_numbers.push_back(number\
    \ / numbers[0]);\n    }\n    return rescaled_numbers;\n}\nint main() {\n    auto\
    \ candidate = rescale_to_unit;\n    assert(candidate((std::vector<float>({2.0,\
    \ 49.9}))) == (std::vector<float>({0.0, 1.0})));\n    assert(candidate((std::vector<float>({100.0,\
    \ 49.9}))) == (std::vector<float>({1.0, 0.0})));\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0, 4.0, 5.0}))) == (std::vector<float>({0.0, 0.25, 0.5, 0.75, 1.0})));\n\
    \    assert(candidate((std::vector<float>({2.0, 1.0, 5.0, 3.0, 4.0}))) == (std::vector<float>({0.25,\
    \ 0.0, 1.0, 0.5, 0.75})));\n    assert(candidate((std::vector<float>({12.0, 11.0,\
    \ 15.0, 13.0, 14.0}))) == (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n\
    }\n"
  stdout: ''
  stderr: "tmpn1oju5z9: /tmp/tmpn1oju5z9.cpp:18: int main(): Assertion `candidate((std::vector<float>({2.0,\
    \ 49.9}))) == (std::vector<float>({0.0, 1.0}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\n\
    std::vector<float> rescale_to_unit(std::vector<float> numbers) {\n    std::vector<float>\
    \ rescaled_numbers(numbers.size());\n    float smallest_number = numbers[0];\n\
    \    float largest_number = numbers[0];\n    for (size_t i = 0; i < numbers.size();\
    \ i++) {\n        rescaled_numbers[i] = numbers[i] / smallest_number;\n      \
    \  smallest_number = std::min(smallest_number, numbers[i]);\n        largest_number\
    \ = std::max(largest_number, numbers[i]);\n    }\n    return rescaled_numbers;\n\
    }\nint main() {\n    auto candidate = rescale_to_unit;\n    assert(candidate((std::vector<float>({2.0,\
    \ 49.9}))) == (std::vector<float>({0.0, 1.0})));\n    assert(candidate((std::vector<float>({100.0,\
    \ 49.9}))) == (std::vector<float>({1.0, 0.0})));\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0, 4.0, 5.0}))) == (std::vector<float>({0.0, 0.25, 0.5, 0.75, 1.0})));\n\
    \    assert(candidate((std::vector<float>({2.0, 1.0, 5.0, 3.0, 4.0}))) == (std::vector<float>({0.25,\
    \ 0.0, 1.0, 0.5, 0.75})));\n    assert(candidate((std::vector<float>({12.0, 11.0,\
    \ 15.0, 13.0, 14.0}))) == (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n\
    }\n"
  stdout: ''
  stderr: "tmpr7a3nai7: /tmp/tmpr7a3nai7.cpp:20: int main(): Assertion `candidate((std::vector<float>({2.0,\
    \ 49.9}))) == (std::vector<float>({0.0, 1.0}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\n\
    std::vector<float> rescale_to_unit(std::vector<float> numbers) {\n    assert(numbers.size()\
    \ >= 2);\n    std::vector<float> rescaled_numbers(numbers.size());\n    float\
    \ min_number = numbers[0];\n    float max_number = numbers[0];\n    for (size_t\
    \ i = 1; i < numbers.size(); i++) {\n        if (numbers[i] < min_number) {\n\
    \            min_number = numbers[i];\n        }\n        if (numbers[i] > max_number)\
    \ {\n            max_number = numbers[i];\n        }\n    }\n    for (size_t i\
    \ = 0; i < numbers.size(); i++) {\n        rescaled_numbers[i] = numbers[i] -\
    \ min_number;\n        rescaled_numbers[i] /= (max_number - min_number);\n   \
    \ }\n    return rescaled_numbers;\n}\nint main() {\n    auto candidate = rescale_to_unit;\n\
    \    assert(candidate((std::vector<float>({2.0, 49.9}))) == (std::vector<float>({0.0,\
    \ 1.0})));\n    assert(candidate((std::vector<float>({100.0, 49.9}))) == (std::vector<float>({1.0,\
    \ 0.0})));\n    assert(candidate((std::vector<float>({1.0, 2.0, 3.0, 4.0, 5.0})))\
    \ == (std::vector<float>({0.0, 0.25, 0.5, 0.75, 1.0})));\n    assert(candidate((std::vector<float>({2.0,\
    \ 1.0, 5.0, 3.0, 4.0}))) == (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n\
    \    assert(candidate((std::vector<float>({12.0, 11.0, 15.0, 13.0, 14.0}))) ==\
    \ (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\n\
    std::vector<float> rescale_to_unit(std::vector<float> numbers) {\n    std::vector<float>\
    \ rescaled_numbers;\n    rescaled_numbers.reserve(numbers.size());\n    for (float\
    \ number : numbers) {\n        rescaled_numbers.push_back(std::min(std::max(number,\
    \ 0.0f), 1.0f));\n    }\n    return rescaled_numbers;\n}\nint main() {\n    auto\
    \ candidate = rescale_to_unit;\n    assert(candidate((std::vector<float>({2.0,\
    \ 49.9}))) == (std::vector<float>({0.0, 1.0})));\n    assert(candidate((std::vector<float>({100.0,\
    \ 49.9}))) == (std::vector<float>({1.0, 0.0})));\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0, 4.0, 5.0}))) == (std::vector<float>({0.0, 0.25, 0.5, 0.75, 1.0})));\n\
    \    assert(candidate((std::vector<float>({2.0, 1.0, 5.0, 3.0, 4.0}))) == (std::vector<float>({0.25,\
    \ 0.0, 1.0, 0.5, 0.75})));\n    assert(candidate((std::vector<float>({12.0, 11.0,\
    \ 15.0, 13.0, 14.0}))) == (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n\
    }\n"
  stdout: ''
  stderr: "tmphqeapukk: /tmp/tmphqeapukk.cpp:17: int main(): Assertion `candidate((std::vector<float>({2.0,\
    \ 49.9}))) == (std::vector<float>({0.0, 1.0}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\n\
    std::vector<float> rescale_to_unit(std::vector<float> numbers) {\n    std::vector<float>\
    \ rescaled_numbers;\n    rescaled_numbers.reserve(numbers.size());\n    float\
    \ min = std::numeric_limits<float>::min();\n    float max = std::numeric_limits<float>::max();\n\
    \    for (float number : numbers) {\n        rescaled_numbers.push_back(number\
    \ - min) / (max - min);\n    }\n    return rescaled_numbers;\n}\nint main() {\n\
    \    auto candidate = rescale_to_unit;\n    assert(candidate((std::vector<float>({2.0,\
    \ 49.9}))) == (std::vector<float>({0.0, 1.0})));\n    assert(candidate((std::vector<float>({100.0,\
    \ 49.9}))) == (std::vector<float>({1.0, 0.0})));\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0, 4.0, 5.0}))) == (std::vector<float>({0.0, 0.25, 0.5, 0.75, 1.0})));\n\
    \    assert(candidate((std::vector<float>({2.0, 1.0, 5.0, 3.0, 4.0}))) == (std::vector<float>({0.25,\
    \ 0.0, 1.0, 0.5, 0.75})));\n    assert(candidate((std::vector<float>({12.0, 11.0,\
    \ 15.0, 13.0, 14.0}))) == (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n\
    }\n"
  stdout: ''
  stderr: "/tmp/tmpx1limz9c.cpp: In function \u2018std::vector<float> rescale_to_unit(std::vector<float>)\u2019\
    :\n/tmp/tmpx1limz9c.cpp:13:50: error: invalid operands of types \u2018void\u2019\
    \ and \u2018float\u2019 to binary \u2018operator/\u2019\n   13 |         rescaled_numbers.push_back(number\
    \ - min) / (max - min);\n      |         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\
    \ ^ ~~~~~~~~~~~\n      |                                   |                 \
    \    |\n      |                                   void                  float\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\n\
    std::vector<float> rescale_to_unit(std::vector<float> numbers) {\n    assert(numbers.size()\
    \ >= 2);\n    std::vector<float> result;\n    float min = *std::min_element(numbers.begin(),\
    \ numbers.end());\n    float max = *std::max_element(numbers.begin(), numbers.end());\n\
    \    float scale = (max - min) / (numbers.back() - numbers.front());\n    for\
    \ (float number : numbers) {\n        result.push_back(number * scale);\n    }\n\
    \    return result;\n}\nint main() {\n    auto candidate = rescale_to_unit;\n\
    \    assert(candidate((std::vector<float>({2.0, 49.9}))) == (std::vector<float>({0.0,\
    \ 1.0})));\n    assert(candidate((std::vector<float>({100.0, 49.9}))) == (std::vector<float>({1.0,\
    \ 0.0})));\n    assert(candidate((std::vector<float>({1.0, 2.0, 3.0, 4.0, 5.0})))\
    \ == (std::vector<float>({0.0, 0.25, 0.5, 0.75, 1.0})));\n    assert(candidate((std::vector<float>({2.0,\
    \ 1.0, 5.0, 3.0, 4.0}))) == (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n\
    \    assert(candidate((std::vector<float>({12.0, 11.0, 15.0, 13.0, 14.0}))) ==\
    \ (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n}\n"
  stdout: ''
  stderr: "tmp_um4wdxv: /tmp/tmp_um4wdxv.cpp:20: int main(): Assertion `candidate((std::vector<float>({2.0,\
    \ 49.9}))) == (std::vector<float>({0.0, 1.0}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\n\
    std::vector<float> rescale_to_unit(std::vector<float> numbers) {\n    std::vector<float>\
    \ rescaled;\n    rescaled.reserve(numbers.size());\n    for (float number : numbers)\
    \ {\n        rescaled.push_back(number / numbers.back());\n    }\n    return rescaled;\n\
    }\nint main() {\n    auto candidate = rescale_to_unit;\n    assert(candidate((std::vector<float>({2.0,\
    \ 49.9}))) == (std::vector<float>({0.0, 1.0})));\n    assert(candidate((std::vector<float>({100.0,\
    \ 49.9}))) == (std::vector<float>({1.0, 0.0})));\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0, 4.0, 5.0}))) == (std::vector<float>({0.0, 0.25, 0.5, 0.75, 1.0})));\n\
    \    assert(candidate((std::vector<float>({2.0, 1.0, 5.0, 3.0, 4.0}))) == (std::vector<float>({0.25,\
    \ 0.0, 1.0, 0.5, 0.75})));\n    assert(candidate((std::vector<float>({12.0, 11.0,\
    \ 15.0, 13.0, 14.0}))) == (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n\
    }\n"
  stdout: ''
  stderr: "tmpiuvqvea_: /tmp/tmpiuvqvea_.cpp:17: int main(): Assertion `candidate((std::vector<float>({2.0,\
    \ 49.9}))) == (std::vector<float>({0.0, 1.0}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\n\
    std::vector<float> rescale_to_unit(std::vector<float> numbers) {\n    assert(numbers.size()\
    \ >= 2);\n    std::vector<float> rescaled;\n    rescaled.reserve(numbers.size());\n\
    \    for (float number : numbers) {\n        rescaled.push_back(number);\n   \
    \     rescaled.push_back(number);\n    }\n    return rescaled;\n}\nint main()\
    \ {\n    auto candidate = rescale_to_unit;\n    assert(candidate((std::vector<float>({2.0,\
    \ 49.9}))) == (std::vector<float>({0.0, 1.0})));\n    assert(candidate((std::vector<float>({100.0,\
    \ 49.9}))) == (std::vector<float>({1.0, 0.0})));\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0, 4.0, 5.0}))) == (std::vector<float>({0.0, 0.25, 0.5, 0.75, 1.0})));\n\
    \    assert(candidate((std::vector<float>({2.0, 1.0, 5.0, 3.0, 4.0}))) == (std::vector<float>({0.25,\
    \ 0.0, 1.0, 0.5, 0.75})));\n    assert(candidate((std::vector<float>({12.0, 11.0,\
    \ 15.0, 13.0, 14.0}))) == (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n\
    }\n"
  stdout: ''
  stderr: "tmpnxlpwyy_: /tmp/tmpnxlpwyy_.cpp:19: int main(): Assertion `candidate((std::vector<float>({2.0,\
    \ 49.9}))) == (std::vector<float>({0.0, 1.0}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\n\
    std::vector<float> rescale_to_unit(std::vector<float> numbers) {\n    assert(numbers.size()\
    \ >= 2);\n    float min = *std::min_element(numbers.begin(), numbers.end());\n\
    \    float max = *std::max_element(numbers.begin(), numbers.end());\n    float\
    \ scale = max - min;\n    std::vector<float> rescaled_numbers;\n    for (float\
    \ number : numbers) {\n        rescaled_numbers.push_back(number * scale + min);\n\
    \    }\n    return rescaled_numbers;\n}\nint main() {\n    auto candidate = rescale_to_unit;\n\
    \    assert(candidate((std::vector<float>({2.0, 49.9}))) == (std::vector<float>({0.0,\
    \ 1.0})));\n    assert(candidate((std::vector<float>({100.0, 49.9}))) == (std::vector<float>({1.0,\
    \ 0.0})));\n    assert(candidate((std::vector<float>({1.0, 2.0, 3.0, 4.0, 5.0})))\
    \ == (std::vector<float>({0.0, 0.25, 0.5, 0.75, 1.0})));\n    assert(candidate((std::vector<float>({2.0,\
    \ 1.0, 5.0, 3.0, 4.0}))) == (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n\
    \    assert(candidate((std::vector<float>({12.0, 11.0, 15.0, 13.0, 14.0}))) ==\
    \ (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n}\n"
  stdout: ''
  stderr: "tmp560x60gh: /tmp/tmp560x60gh.cpp:20: int main(): Assertion `candidate((std::vector<float>({2.0,\
    \ 49.9}))) == (std::vector<float>({0.0, 1.0}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\n\
    std::vector<float> rescale_to_unit(std::vector<float> numbers) {\n    std::vector<float>\
    \ rescaled_numbers;\n    rescaled_numbers.reserve(numbers.size());\n    for (float\
    \ number : numbers) {\n        rescaled_numbers.push_back(number / numbers.size());\n\
    \    }\n    return rescaled_numbers;\n}\nint main() {\n    auto candidate = rescale_to_unit;\n\
    \    assert(candidate((std::vector<float>({2.0, 49.9}))) == (std::vector<float>({0.0,\
    \ 1.0})));\n    assert(candidate((std::vector<float>({100.0, 49.9}))) == (std::vector<float>({1.0,\
    \ 0.0})));\n    assert(candidate((std::vector<float>({1.0, 2.0, 3.0, 4.0, 5.0})))\
    \ == (std::vector<float>({0.0, 0.25, 0.5, 0.75, 1.0})));\n    assert(candidate((std::vector<float>({2.0,\
    \ 1.0, 5.0, 3.0, 4.0}))) == (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n\
    \    assert(candidate((std::vector<float>({12.0, 11.0, 15.0, 13.0, 14.0}))) ==\
    \ (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n}\n"
  stdout: ''
  stderr: "tmp9_el_i7y: /tmp/tmp9_el_i7y.cpp:17: int main(): Assertion `candidate((std::vector<float>({2.0,\
    \ 49.9}))) == (std::vector<float>({0.0, 1.0}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\n\
    std::vector<float> rescale_to_unit(std::vector<float> numbers) {\n    std::vector<float>\
    \ result;\n    float min = *std::min_element(numbers.begin(), numbers.end());\n\
    \    float max = *std::max_element(numbers.begin(), numbers.end());\n    float\
    \ range = max - min;\n    for (float number : numbers) {\n        float rescaled\
    \ = number - min;\n        rescaled = rescaled / range;\n        result.push_back(rescaled);\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = rescale_to_unit;\n\
    \    assert(candidate((std::vector<float>({2.0, 49.9}))) == (std::vector<float>({0.0,\
    \ 1.0})));\n    assert(candidate((std::vector<float>({100.0, 49.9}))) == (std::vector<float>({1.0,\
    \ 0.0})));\n    assert(candidate((std::vector<float>({1.0, 2.0, 3.0, 4.0, 5.0})))\
    \ == (std::vector<float>({0.0, 0.25, 0.5, 0.75, 1.0})));\n    assert(candidate((std::vector<float>({2.0,\
    \ 1.0, 5.0, 3.0, 4.0}))) == (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n\
    \    assert(candidate((std::vector<float>({12.0, 11.0, 15.0, 13.0, 14.0}))) ==\
    \ (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\n\
    std::vector<float> rescale_to_unit(std::vector<float> numbers) {\n    std::vector<float>\
    \ rescaled_numbers;\n    rescaled_numbers.reserve(numbers.size());\n    for (float\
    \ number : numbers) {\n        rescaled_numbers.push_back(number / numbers[0]);\n\
    \    }\n    return rescaled_numbers;\n}\nint main() {\n    auto candidate = rescale_to_unit;\n\
    \    assert(candidate((std::vector<float>({2.0, 49.9}))) == (std::vector<float>({0.0,\
    \ 1.0})));\n    assert(candidate((std::vector<float>({100.0, 49.9}))) == (std::vector<float>({1.0,\
    \ 0.0})));\n    assert(candidate((std::vector<float>({1.0, 2.0, 3.0, 4.0, 5.0})))\
    \ == (std::vector<float>({0.0, 0.25, 0.5, 0.75, 1.0})));\n    assert(candidate((std::vector<float>({2.0,\
    \ 1.0, 5.0, 3.0, 4.0}))) == (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n\
    \    assert(candidate((std::vector<float>({12.0, 11.0, 15.0, 13.0, 14.0}))) ==\
    \ (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n}\n"
  stdout: ''
  stderr: "tmpr59cw1dw: /tmp/tmpr59cw1dw.cpp:17: int main(): Assertion `candidate((std::vector<float>({2.0,\
    \ 49.9}))) == (std::vector<float>({0.0, 1.0}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\n\
    std::vector<float> rescale_to_unit(std::vector<float> numbers) {\n    std::vector<float>\
    \ rescaled_numbers(numbers.size());\n    for (size_t i = 0; i < numbers.size();\
    \ i++) {\n        rescaled_numbers[i] = numbers[i] / numbers[0];\n    }\n    return\
    \ rescaled_numbers;\n}\nint main() {\n    auto candidate = rescale_to_unit;\n\
    \    assert(candidate((std::vector<float>({2.0, 49.9}))) == (std::vector<float>({0.0,\
    \ 1.0})));\n    assert(candidate((std::vector<float>({100.0, 49.9}))) == (std::vector<float>({1.0,\
    \ 0.0})));\n    assert(candidate((std::vector<float>({1.0, 2.0, 3.0, 4.0, 5.0})))\
    \ == (std::vector<float>({0.0, 0.25, 0.5, 0.75, 1.0})));\n    assert(candidate((std::vector<float>({2.0,\
    \ 1.0, 5.0, 3.0, 4.0}))) == (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n\
    \    assert(candidate((std::vector<float>({12.0, 11.0, 15.0, 13.0, 14.0}))) ==\
    \ (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n}\n"
  stdout: ''
  stderr: "tmpco653p83: /tmp/tmpco653p83.cpp:16: int main(): Assertion `candidate((std::vector<float>({2.0,\
    \ 49.9}))) == (std::vector<float>({0.0, 1.0}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\n\
    std::vector<float> rescale_to_unit(std::vector<float> numbers) {\n    assert(numbers.size()\
    \ > 1);\n    std::vector<float> rescaled_numbers(numbers.size());\n    float min\
    \ = std::numeric_limits<float>::max();\n    float max = std::numeric_limits<float>::min();\n\
    \    for (size_t i = 0; i < numbers.size(); i++) {\n        rescaled_numbers[i]\
    \ = numbers[i] - min;\n        min = std::min(min, numbers[i]);\n        max =\
    \ std::max(max, numbers[i]);\n    }\n    float scale = 1.0f / (max - min);\n \
    \   for (size_t i = 0; i < numbers.size(); i++) {\n        rescaled_numbers[i]\
    \ *= scale;\n    }\n    return rescaled_numbers;\n}\nint main() {\n    auto candidate\
    \ = rescale_to_unit;\n    assert(candidate((std::vector<float>({2.0, 49.9})))\
    \ == (std::vector<float>({0.0, 1.0})));\n    assert(candidate((std::vector<float>({100.0,\
    \ 49.9}))) == (std::vector<float>({1.0, 0.0})));\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0, 4.0, 5.0}))) == (std::vector<float>({0.0, 0.25, 0.5, 0.75, 1.0})));\n\
    \    assert(candidate((std::vector<float>({2.0, 1.0, 5.0, 3.0, 4.0}))) == (std::vector<float>({0.25,\
    \ 0.0, 1.0, 0.5, 0.75})));\n    assert(candidate((std::vector<float>({12.0, 11.0,\
    \ 15.0, 13.0, 14.0}))) == (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n\
    }\n"
  stdout: ''
  stderr: "tmpp3h9n22f: /tmp/tmpp3h9n22f.cpp:25: int main(): Assertion `candidate((std::vector<float>({2.0,\
    \ 49.9}))) == (std::vector<float>({0.0, 1.0}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\n\
    std::vector<float> rescale_to_unit(std::vector<float> numbers) {\n    std::vector<float>\
    \ result;\n    float min = std::numeric_limits<float>::max();\n    float max =\
    \ std::numeric_limits<float>::min();\n    for (float number : numbers) {\n   \
    \     min = std::min(min, number);\n        max = std::max(max, number);\n   \
    \ }\n    for (float number : numbers) {\n        result.push_back(number * (max\
    \ - min) / (max - min));\n    }\n    return result;\n}\nint main() {\n    auto\
    \ candidate = rescale_to_unit;\n    assert(candidate((std::vector<float>({2.0,\
    \ 49.9}))) == (std::vector<float>({0.0, 1.0})));\n    assert(candidate((std::vector<float>({100.0,\
    \ 49.9}))) == (std::vector<float>({1.0, 0.0})));\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0, 4.0, 5.0}))) == (std::vector<float>({0.0, 0.25, 0.5, 0.75, 1.0})));\n\
    \    assert(candidate((std::vector<float>({2.0, 1.0, 5.0, 3.0, 4.0}))) == (std::vector<float>({0.25,\
    \ 0.0, 1.0, 0.5, 0.75})));\n    assert(candidate((std::vector<float>({12.0, 11.0,\
    \ 15.0, 13.0, 14.0}))) == (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n\
    }\n"
  stdout: ''
  stderr: "tmpubox9t0j: /tmp/tmpubox9t0j.cpp:22: int main(): Assertion `candidate((std::vector<float>({2.0,\
    \ 49.9}))) == (std::vector<float>({0.0, 1.0}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\n\
    std::vector<float> rescale_to_unit(std::vector<float> numbers) {\n    std::vector<float>\
    \ rescaled_numbers;\n    rescaled_numbers.reserve(numbers.size());\n    for (float\
    \ number : numbers) {\n        rescaled_numbers.push_back(number / numbers[0]);\n\
    \    }\n    return rescaled_numbers;\n}\nint main() {\n    auto candidate = rescale_to_unit;\n\
    \    assert(candidate((std::vector<float>({2.0, 49.9}))) == (std::vector<float>({0.0,\
    \ 1.0})));\n    assert(candidate((std::vector<float>({100.0, 49.9}))) == (std::vector<float>({1.0,\
    \ 0.0})));\n    assert(candidate((std::vector<float>({1.0, 2.0, 3.0, 4.0, 5.0})))\
    \ == (std::vector<float>({0.0, 0.25, 0.5, 0.75, 1.0})));\n    assert(candidate((std::vector<float>({2.0,\
    \ 1.0, 5.0, 3.0, 4.0}))) == (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n\
    \    assert(candidate((std::vector<float>({12.0, 11.0, 15.0, 13.0, 14.0}))) ==\
    \ (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n}\n"
  stdout: ''
  stderr: "tmpun356jpw: /tmp/tmpun356jpw.cpp:17: int main(): Assertion `candidate((std::vector<float>({2.0,\
    \ 49.9}))) == (std::vector<float>({0.0, 1.0}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\n\
    std::vector<float> rescale_to_unit(std::vector<float> numbers) {\n    assert(numbers.size()\
    \ > 1);\n    std::vector<float> rescaled;\n    rescaled.reserve(numbers.size());\n\
    \    for (float number : numbers) {\n        rescaled.push_back(number / numbers[0]);\n\
    \    }\n    return rescaled;\n}\nint main() {\n    auto candidate = rescale_to_unit;\n\
    \    assert(candidate((std::vector<float>({2.0, 49.9}))) == (std::vector<float>({0.0,\
    \ 1.0})));\n    assert(candidate((std::vector<float>({100.0, 49.9}))) == (std::vector<float>({1.0,\
    \ 0.0})));\n    assert(candidate((std::vector<float>({1.0, 2.0, 3.0, 4.0, 5.0})))\
    \ == (std::vector<float>({0.0, 0.25, 0.5, 0.75, 1.0})));\n    assert(candidate((std::vector<float>({2.0,\
    \ 1.0, 5.0, 3.0, 4.0}))) == (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n\
    \    assert(candidate((std::vector<float>({12.0, 11.0, 15.0, 13.0, 14.0}))) ==\
    \ (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n}\n"
  stdout: ''
  stderr: "tmpiffk2nnf: /tmp/tmpiffk2nnf.cpp:18: int main(): Assertion `candidate((std::vector<float>({2.0,\
    \ 49.9}))) == (std::vector<float>({0.0, 1.0}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\n\
    std::vector<float> rescale_to_unit(std::vector<float> numbers) {\n    assert(numbers.size()\
    \ >= 2);\n    std::vector<float> rescaled_numbers;\n    rescaled_numbers.reserve(numbers.size());\n\
    \    for (float number : numbers) {\n        rescaled_numbers.push_back(number\
    \ / numbers[0]);\n    }\n    return rescaled_numbers;\n}\nint main() {\n    auto\
    \ candidate = rescale_to_unit;\n    assert(candidate((std::vector<float>({2.0,\
    \ 49.9}))) == (std::vector<float>({0.0, 1.0})));\n    assert(candidate((std::vector<float>({100.0,\
    \ 49.9}))) == (std::vector<float>({1.0, 0.0})));\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0, 4.0, 5.0}))) == (std::vector<float>({0.0, 0.25, 0.5, 0.75, 1.0})));\n\
    \    assert(candidate((std::vector<float>({2.0, 1.0, 5.0, 3.0, 4.0}))) == (std::vector<float>({0.25,\
    \ 0.0, 1.0, 0.5, 0.75})));\n    assert(candidate((std::vector<float>({12.0, 11.0,\
    \ 15.0, 13.0, 14.0}))) == (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n\
    }\n"
  stdout: ''
  stderr: "tmpprzhl1zf: /tmp/tmpprzhl1zf.cpp:18: int main(): Assertion `candidate((std::vector<float>({2.0,\
    \ 49.9}))) == (std::vector<float>({0.0, 1.0}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\n\
    std::vector<float> rescale_to_unit(std::vector<float> numbers) {\n    assert(numbers.size()\
    \ >= 2);\n    std::vector<float> result(numbers.size());\n    float min = numbers[0];\n\
    \    float max = numbers[0];\n    for (size_t i = 1; i < numbers.size(); i++)\
    \ {\n        if (numbers[i] < min) min = numbers[i];\n        if (numbers[i] >\
    \ max) max = numbers[i];\n    }\n    for (size_t i = 0; i < numbers.size(); i++)\
    \ {\n        result[i] = numbers[i] - min;\n        result[i] /= (max - min);\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = rescale_to_unit;\n\
    \    assert(candidate((std::vector<float>({2.0, 49.9}))) == (std::vector<float>({0.0,\
    \ 1.0})));\n    assert(candidate((std::vector<float>({100.0, 49.9}))) == (std::vector<float>({1.0,\
    \ 0.0})));\n    assert(candidate((std::vector<float>({1.0, 2.0, 3.0, 4.0, 5.0})))\
    \ == (std::vector<float>({0.0, 0.25, 0.5, 0.75, 1.0})));\n    assert(candidate((std::vector<float>({2.0,\
    \ 1.0, 5.0, 3.0, 4.0}))) == (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n\
    \    assert(candidate((std::vector<float>({12.0, 11.0, 15.0, 13.0, 14.0}))) ==\
    \ (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\n\
    std::vector<float> rescale_to_unit(std::vector<float> numbers) {\n    std::vector<float>\
    \ rescaled_numbers;\n    rescaled_numbers.reserve(numbers.size());\n    for (float\
    \ number : numbers) {\n        rescaled_numbers.push_back(number / numbers[0]);\n\
    \    }\n    return rescaled_numbers;\n}\nint main() {\n    auto candidate = rescale_to_unit;\n\
    \    assert(candidate((std::vector<float>({2.0, 49.9}))) == (std::vector<float>({0.0,\
    \ 1.0})));\n    assert(candidate((std::vector<float>({100.0, 49.9}))) == (std::vector<float>({1.0,\
    \ 0.0})));\n    assert(candidate((std::vector<float>({1.0, 2.0, 3.0, 4.0, 5.0})))\
    \ == (std::vector<float>({0.0, 0.25, 0.5, 0.75, 1.0})));\n    assert(candidate((std::vector<float>({2.0,\
    \ 1.0, 5.0, 3.0, 4.0}))) == (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n\
    \    assert(candidate((std::vector<float>({12.0, 11.0, 15.0, 13.0, 14.0}))) ==\
    \ (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n}\n"
  stdout: ''
  stderr: "tmpawafkwx_: /tmp/tmpawafkwx_.cpp:17: int main(): Assertion `candidate((std::vector<float>({2.0,\
    \ 49.9}))) == (std::vector<float>({0.0, 1.0}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\n\
    std::vector<float> rescale_to_unit(std::vector<float> numbers) {\n    std::vector<float>\
    \ rescaled_numbers;\n    rescaled_numbers.reserve(numbers.size());\n    for (float\
    \ number : numbers) {\n        rescaled_numbers.push_back(number / numbers.size());\n\
    \    }\n    return rescaled_numbers;\n}\nint main() {\n    auto candidate = rescale_to_unit;\n\
    \    assert(candidate((std::vector<float>({2.0, 49.9}))) == (std::vector<float>({0.0,\
    \ 1.0})));\n    assert(candidate((std::vector<float>({100.0, 49.9}))) == (std::vector<float>({1.0,\
    \ 0.0})));\n    assert(candidate((std::vector<float>({1.0, 2.0, 3.0, 4.0, 5.0})))\
    \ == (std::vector<float>({0.0, 0.25, 0.5, 0.75, 1.0})));\n    assert(candidate((std::vector<float>({2.0,\
    \ 1.0, 5.0, 3.0, 4.0}))) == (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n\
    \    assert(candidate((std::vector<float>({12.0, 11.0, 15.0, 13.0, 14.0}))) ==\
    \ (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n}\n"
  stdout: ''
  stderr: "tmp8sq7d191: /tmp/tmp8sq7d191.cpp:17: int main(): Assertion `candidate((std::vector<float>({2.0,\
    \ 49.9}))) == (std::vector<float>({0.0, 1.0}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\n\
    std::vector<float> rescale_to_unit(std::vector<float> numbers) {\n    std::vector<float>\
    \ result;\n    float min = *std::min_element(numbers.begin(), numbers.end());\n\
    \    float max = *std::max_element(numbers.begin(), numbers.end());\n    float\
    \ scale = 1.0f / (max - min);\n    for (float number : numbers) {\n        result.push_back(number\
    \ * scale);\n    }\n    return result;\n}\nint main() {\n    auto candidate =\
    \ rescale_to_unit;\n    assert(candidate((std::vector<float>({2.0, 49.9}))) ==\
    \ (std::vector<float>({0.0, 1.0})));\n    assert(candidate((std::vector<float>({100.0,\
    \ 49.9}))) == (std::vector<float>({1.0, 0.0})));\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0, 4.0, 5.0}))) == (std::vector<float>({0.0, 0.25, 0.5, 0.75, 1.0})));\n\
    \    assert(candidate((std::vector<float>({2.0, 1.0, 5.0, 3.0, 4.0}))) == (std::vector<float>({0.25,\
    \ 0.0, 1.0, 0.5, 0.75})));\n    assert(candidate((std::vector<float>({12.0, 11.0,\
    \ 15.0, 13.0, 14.0}))) == (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n\
    }\n"
  stdout: ''
  stderr: "tmp6zsks9uc: /tmp/tmp6zsks9uc.cpp:19: int main(): Assertion `candidate((std::vector<float>({2.0,\
    \ 49.9}))) == (std::vector<float>({0.0, 1.0}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\n\
    std::vector<float> rescale_to_unit(std::vector<float> numbers) {\n    std::vector<float>\
    \ rescaled_numbers(numbers.begin(), numbers.end());\n    float min_number = std::numeric_limits<float>::min();\n\
    \    float max_number = std::numeric_limits<float>::max();\n    for (float number\
    \ : rescaled_numbers) {\n        rescaled_numbers = std::map<float, float>::\n\
    \            map(rescaled_numbers, [](float number) {\n                return\
    \ (number - min_number) / (max_number - min_number);\n            });\n    }\n\
    \    return rescaled_numbers;\n}\nint main() {\n    auto candidate = rescale_to_unit;\n\
    \    assert(candidate((std::vector<float>({2.0, 49.9}))) == (std::vector<float>({0.0,\
    \ 1.0})));\n    assert(candidate((std::vector<float>({100.0, 49.9}))) == (std::vector<float>({1.0,\
    \ 0.0})));\n    assert(candidate((std::vector<float>({1.0, 2.0, 3.0, 4.0, 5.0})))\
    \ == (std::vector<float>({0.0, 0.25, 0.5, 0.75, 1.0})));\n    assert(candidate((std::vector<float>({2.0,\
    \ 1.0, 5.0, 3.0, 4.0}))) == (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n\
    \    assert(candidate((std::vector<float>({12.0, 11.0, 15.0, 13.0, 14.0}))) ==\
    \ (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpl9y97mxg.cpp: In lambda function:\n/tmp/tmpl9y97mxg.cpp:14:34:\
    \ error: \u2018min_number\u2019 is not captured\n   14 |                 return\
    \ (number - min_number) / (max_number - min_number);\n      |                \
    \                  ^~~~~~~~~~\n/tmp/tmpl9y97mxg.cpp:13:36: note: the lambda has\
    \ no capture-default\n   13 |             map(rescaled_numbers, [](float number)\
    \ {\n      |                                    ^\n/tmp/tmpl9y97mxg.cpp:9:11:\
    \ note: \u2018float min_number\u2019 declared here\n    9 |     float min_number\
    \ = std::numeric_limits<float>::min();\n      |           ^~~~~~~~~~\n/tmp/tmpl9y97mxg.cpp:14:49:\
    \ error: \u2018max_number\u2019 is not captured\n   14 |                 return\
    \ (number - min_number) / (max_number - min_number);\n      |                \
    \                                 ^~~~~~~~~~\n/tmp/tmpl9y97mxg.cpp:13:36: note:\
    \ the lambda has no capture-default\n   13 |             map(rescaled_numbers,\
    \ [](float number) {\n      |                                    ^\n/tmp/tmpl9y97mxg.cpp:10:11:\
    \ note: \u2018float max_number\u2019 declared here\n   10 |     float max_number\
    \ = std::numeric_limits<float>::max();\n      |           ^~~~~~~~~~\n/tmp/tmpl9y97mxg.cpp:14:62:\
    \ error: \u2018min_number\u2019 is not captured\n   14 |                 return\
    \ (number - min_number) / (max_number - min_number);\n      |                \
    \                                              ^~~~~~~~~~\n/tmp/tmpl9y97mxg.cpp:13:36:\
    \ note: the lambda has no capture-default\n   13 |             map(rescaled_numbers,\
    \ [](float number) {\n      |                                    ^\n/tmp/tmpl9y97mxg.cpp:9:11:\
    \ note: \u2018float min_number\u2019 declared here\n    9 |     float min_number\
    \ = std::numeric_limits<float>::min();\n      |           ^~~~~~~~~~\n/tmp/tmpl9y97mxg.cpp:\
    \ In function \u2018std::vector<float> rescale_to_unit(std::vector<float>)\u2019\
    :\n/tmp/tmpl9y97mxg.cpp:15:14: error: cannot call constructor \u2018std::map<float,\
    \ float>::map\u2019 directly [-fpermissive]\n   15 |             });\n      |\
    \              ^\n/tmp/tmpl9y97mxg.cpp:15:14: note: for a function-style cast,\
    \ remove the redundant \u2018::map\u2019\n/tmp/tmpl9y97mxg.cpp:15:14: error: no\
    \ matching function for call to \u2018std::map<float, float>::map(std::vector<float>&,\
    \ rescale_to_unit(std::vector<float>)::<lambda(float)>)\u2019\nIn file included\
    \ from /usr/include/c++/9/map:61,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:81,\n\
    \                 from /tmp/tmpl9y97mxg.cpp:2:\n/usr/include/c++/9/bits/stl_map.h:288:2:\
    \ note: candidate: \u2018template<class _InputIterator> std::map<_Key, _Tp, _Compare,\
    \ _Alloc>::map(_InputIterator, _InputIterator, const _Compare&, const allocator_type&)\u2019\
    \n  288 |  map(_InputIterator __first, _InputIterator __last,\n      |  ^~~\n\
    /usr/include/c++/9/bits/stl_map.h:288:2: note:   template argument deduction/substitution\
    \ failed:\n/tmp/tmpl9y97mxg.cpp:15:14: note:   deduced conflicting types for parameter\
    \ \u2018_InputIterator\u2019 (\u2018std::vector<float>\u2019 and \u2018rescale_to_unit(std::vector<float>)::<lambda(float)>\u2019\
    )\n   15 |             });\n      |              ^\nIn file included from /usr/include/c++/9/map:61,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:81,\n\
    \                 from /tmp/tmpl9y97mxg.cpp:2:\n/usr/include/c++/9/bits/stl_map.h:271:2:\
    \ note: candidate: \u2018template<class _InputIterator> std::map<_Key, _Tp, _Compare,\
    \ _Alloc>::map(_InputIterator, _InputIterator)\u2019\n  271 |  map(_InputIterator\
    \ __first, _InputIterator __last)\n      |  ^~~\n/usr/include/c++/9/bits/stl_map.h:271:2:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmpl9y97mxg.cpp:15:14:\
    \ note:   deduced conflicting types for parameter \u2018_InputIterator\u2019 (\u2018\
    std::vector<float>\u2019 and \u2018rescale_to_unit(std::vector<float>)::<lambda(float)>\u2019\
    )\n   15 |             });\n      |              ^\nIn file included from /usr/include/c++/9/map:61,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:81,\n\
    \                 from /tmp/tmpl9y97mxg.cpp:2:\n/usr/include/c++/9/bits/stl_map.h:254:2:\
    \ note: candidate: \u2018template<class _InputIterator> std::map<_Key, _Tp, _Compare,\
    \ _Alloc>::map(_InputIterator, _InputIterator, const allocator_type&)\u2019\n\
    \  254 |  map(_InputIterator __first, _InputIterator __last,\n      |  ^~~\n/usr/include/c++/9/bits/stl_map.h:254:2:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmpl9y97mxg.cpp:15:14:\
    \ note:   deduced conflicting types for parameter \u2018_InputIterator\u2019 (\u2018\
    std::vector<float>\u2019 and \u2018rescale_to_unit(std::vector<float>)::<lambda(float)>\u2019\
    )\n   15 |             });\n      |              ^\nIn file included from /usr/include/c++/9/map:61,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:81,\n\
    \                 from /tmp/tmpl9y97mxg.cpp:2:\n/usr/include/c++/9/bits/stl_map.h:248:7:\
    \ note: candidate: \u2018std::map<_Key, _Tp, _Compare, _Alloc>::map(std::initializer_list<std::pair<const\
    \ _Key, _Tp> >, const allocator_type&) [with _Key = float; _Tp = float; _Compare\
    \ = std::less<float>; _Alloc = std::allocator<std::pair<const float, float> >;\
    \ std::map<_Key, _Tp, _Compare, _Alloc>::allocator_type = std::allocator<std::pair<const\
    \ float, float> >]\u2019\n  248 |       map(initializer_list<value_type> __l,\
    \ const allocator_type& __a)\n      |       ^~~\n/usr/include/c++/9/bits/stl_map.h:248:40:\
    \ note:   no known conversion for argument 1 from \u2018std::vector<float>\u2019\
    \ to \u2018std::initializer_list<std::pair<const float, float> >\u2019\n  248\
    \ |       map(initializer_list<value_type> __l, const allocator_type& __a)\n \
    \     |           ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~\n/usr/include/c++/9/bits/stl_map.h:242:7:\
    \ note: candidate: \u2018std::map<_Key, _Tp, _Compare, _Alloc>::map(std::map<_Key,\
    \ _Tp, _Compare, _Alloc>&&, const allocator_type&) [with _Key = float; _Tp = float;\
    \ _Compare = std::less<float>; _Alloc = std::allocator<std::pair<const float,\
    \ float> >; std::map<_Key, _Tp, _Compare, _Alloc>::allocator_type = std::allocator<std::pair<const\
    \ float, float> >]\u2019\n  242 |       map(map&& __m, const allocator_type& __a)\n\
    \      |       ^~~\n/usr/include/c++/9/bits/stl_map.h:242:17: note:   no known\
    \ conversion for argument 1 from \u2018std::vector<float>\u2019 to \u2018std::map<float,\
    \ float>&&\u2019\n  242 |       map(map&& __m, const allocator_type& __a)\n  \
    \    |           ~~~~~~^~~\n/usr/include/c++/9/bits/stl_map.h:238:7: note: candidate:\
    \ \u2018std::map<_Key, _Tp, _Compare, _Alloc>::map(const std::map<_Key, _Tp, _Compare,\
    \ _Alloc>&, const allocator_type&) [with _Key = float; _Tp = float; _Compare =\
    \ std::less<float>; _Alloc = std::allocator<std::pair<const float, float> >; std::map<_Key,\
    \ _Tp, _Compare, _Alloc>::allocator_type = std::allocator<std::pair<const float,\
    \ float> >]\u2019\n  238 |       map(const map& __m, const allocator_type& __a)\n\
    \      |       ^~~\n/usr/include/c++/9/bits/stl_map.h:238:22: note:   no known\
    \ conversion for argument 1 from \u2018std::vector<float>\u2019 to \u2018const\
    \ std::map<float, float>&\u2019\n  238 |       map(const map& __m, const allocator_type&\
    \ __a)\n      |           ~~~~~~~~~~~^~~\n/usr/include/c++/9/bits/stl_map.h:234:7:\
    \ note: candidate: \u2018std::map<_Key, _Tp, _Compare, _Alloc>::map(const allocator_type&)\
    \ [with _Key = float; _Tp = float; _Compare = std::less<float>; _Alloc = std::allocator<std::pair<const\
    \ float, float> >; std::map<_Key, _Tp, _Compare, _Alloc>::allocator_type = std::allocator<std::pair<const\
    \ float, float> >]\u2019\n  234 |       map(const allocator_type& __a)\n     \
    \ |       ^~~\n/usr/include/c++/9/bits/stl_map.h:234:7: note:   candidate expects\
    \ 1 argument, 2 provided\n/usr/include/c++/9/bits/stl_map.h:226:7: note: candidate:\
    \ \u2018std::map<_Key, _Tp, _Compare, _Alloc>::map(std::initializer_list<std::pair<const\
    \ _Key, _Tp> >, const _Compare&, const allocator_type&) [with _Key = float; _Tp\
    \ = float; _Compare = std::less<float>; _Alloc = std::allocator<std::pair<const\
    \ float, float> >; std::map<_Key, _Tp, _Compare, _Alloc>::allocator_type = std::allocator<std::pair<const\
    \ float, float> >]\u2019\n  226 |       map(initializer_list<value_type> __l,\n\
    \      |       ^~~\n/usr/include/c++/9/bits/stl_map.h:226:40: note:   no known\
    \ conversion for argument 1 from \u2018std::vector<float>\u2019 to \u2018std::initializer_list<std::pair<const\
    \ float, float> >\u2019\n  226 |       map(initializer_list<value_type> __l,\n\
    \      |           ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~\n/usr/include/c++/9/bits/stl_map.h:213:7:\
    \ note: candidate: \u2018std::map<_Key, _Tp, _Compare, _Alloc>::map(std::map<_Key,\
    \ _Tp, _Compare, _Alloc>&&) [with _Key = float; _Tp = float; _Compare = std::less<float>;\
    \ _Alloc = std::allocator<std::pair<const float, float> >]\u2019\n  213 |    \
    \   map(map&&) = default;\n      |       ^~~\n/usr/include/c++/9/bits/stl_map.h:213:7:\
    \ note:   candidate expects 1 argument, 2 provided\n/usr/include/c++/9/bits/stl_map.h:205:7:\
    \ note: candidate: \u2018std::map<_Key, _Tp, _Compare, _Alloc>::map(const std::map<_Key,\
    \ _Tp, _Compare, _Alloc>&) [with _Key = float; _Tp = float; _Compare = std::less<float>;\
    \ _Alloc = std::allocator<std::pair<const float, float> >]\u2019\n  205 |    \
    \   map(const map&) = default;\n      |       ^~~\n/usr/include/c++/9/bits/stl_map.h:205:7:\
    \ note:   candidate expects 1 argument, 2 provided\n/usr/include/c++/9/bits/stl_map.h:192:7:\
    \ note: candidate: \u2018std::map<_Key, _Tp, _Compare, _Alloc>::map(const _Compare&,\
    \ const allocator_type&) [with _Key = float; _Tp = float; _Compare = std::less<float>;\
    \ _Alloc = std::allocator<std::pair<const float, float> >; std::map<_Key, _Tp,\
    \ _Compare, _Alloc>::allocator_type = std::allocator<std::pair<const float, float>\
    \ >]\u2019\n  192 |       map(const _Compare& __comp,\n      |       ^~~\n/usr/include/c++/9/bits/stl_map.h:192:27:\
    \ note:   no known conversion for argument 1 from \u2018std::vector<float>\u2019\
    \ to \u2018const std::less<float>&\u2019\n  192 |       map(const _Compare& __comp,\n\
    \      |           ~~~~~~~~~~~~~~~~^~~~~~\n/usr/include/c++/9/bits/stl_map.h:183:7:\
    \ note: candidate: \u2018std::map<_Key, _Tp, _Compare, _Alloc>::map() [with _Key\
    \ = float; _Tp = float; _Compare = std::less<float>; _Alloc = std::allocator<std::pair<const\
    \ float, float> >]\u2019\n  183 |       map() = default;\n      |       ^~~\n\
    /usr/include/c++/9/bits/stl_map.h:183:7: note:   candidate expects 0 arguments,\
    \ 2 provided\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\n\
    std::vector<float> rescale_to_unit(std::vector<float> numbers) {\n    std::vector<float>\
    \ result;\n    float min = std::numeric_limits<float>::max();\n    float max =\
    \ std::numeric_limits<float>::min();\n    for (float number : numbers) {\n   \
    \     min = std::min(min, number);\n        max = std::max(max, number);\n   \
    \ }\n    for (float number : numbers) {\n        result.push_back(number - min)\
    \ / (max - min);\n    }\n    return result;\n}\nint main() {\n    auto candidate\
    \ = rescale_to_unit;\n    assert(candidate((std::vector<float>({2.0, 49.9})))\
    \ == (std::vector<float>({0.0, 1.0})));\n    assert(candidate((std::vector<float>({100.0,\
    \ 49.9}))) == (std::vector<float>({1.0, 0.0})));\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0, 4.0, 5.0}))) == (std::vector<float>({0.0, 0.25, 0.5, 0.75, 1.0})));\n\
    \    assert(candidate((std::vector<float>({2.0, 1.0, 5.0, 3.0, 4.0}))) == (std::vector<float>({0.25,\
    \ 0.0, 1.0, 0.5, 0.75})));\n    assert(candidate((std::vector<float>({12.0, 11.0,\
    \ 15.0, 13.0, 14.0}))) == (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n\
    }\n"
  stdout: ''
  stderr: "/tmp/tmpnvnv6mns.cpp: In function \u2018std::vector<float> rescale_to_unit(std::vector<float>)\u2019\
    :\n/tmp/tmpnvnv6mns.cpp:16:40: error: invalid operands of types \u2018void\u2019\
    \ and \u2018float\u2019 to binary \u2018operator/\u2019\n   16 |         result.push_back(number\
    \ - min) / (max - min);\n      |         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ^ ~~~~~~~~~~~\n\
    \      |                         |                     |\n      |            \
    \             void                  float\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\n\
    std::vector<float> rescale_to_unit(std::vector<float> numbers) {\n    assert(numbers.size()\
    \ >= 2);\n    std::vector<float> result;\n    float min = numbers[0];\n    float\
    \ max = numbers[0];\n    for (auto number : numbers) {\n        if (number < min)\
    \ min = number;\n        if (number > max) max = number;\n    }\n    for (auto\
    \ number : numbers) {\n        result.push_back(number - min) / (max - min);\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = rescale_to_unit;\n\
    \    assert(candidate((std::vector<float>({2.0, 49.9}))) == (std::vector<float>({0.0,\
    \ 1.0})));\n    assert(candidate((std::vector<float>({100.0, 49.9}))) == (std::vector<float>({1.0,\
    \ 0.0})));\n    assert(candidate((std::vector<float>({1.0, 2.0, 3.0, 4.0, 5.0})))\
    \ == (std::vector<float>({0.0, 0.25, 0.5, 0.75, 1.0})));\n    assert(candidate((std::vector<float>({2.0,\
    \ 1.0, 5.0, 3.0, 4.0}))) == (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n\
    \    assert(candidate((std::vector<float>({12.0, 11.0, 15.0, 13.0, 14.0}))) ==\
    \ (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpup_q7k0c.cpp: In function \u2018std::vector<float> rescale_to_unit(std::vector<float>)\u2019\
    :\n/tmp/tmpup_q7k0c.cpp:17:40: error: invalid operands of types \u2018void\u2019\
    \ and \u2018float\u2019 to binary \u2018operator/\u2019\n   17 |         result.push_back(number\
    \ - min) / (max - min);\n      |         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ^ ~~~~~~~~~~~\n\
    \      |                         |                     |\n      |            \
    \             void                  float\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\n\
    std::vector<float> rescale_to_unit(std::vector<float> numbers) {\n    std::vector<float>\
    \ rescaled_numbers;\n    rescaled_numbers.reserve(numbers.size());\n    for (float\
    \ number : numbers) {\n        rescaled_numbers.push_back(number / numbers.size());\n\
    \    }\n    return rescaled_numbers;\n}\nint main() {\n    auto candidate = rescale_to_unit;\n\
    \    assert(candidate((std::vector<float>({2.0, 49.9}))) == (std::vector<float>({0.0,\
    \ 1.0})));\n    assert(candidate((std::vector<float>({100.0, 49.9}))) == (std::vector<float>({1.0,\
    \ 0.0})));\n    assert(candidate((std::vector<float>({1.0, 2.0, 3.0, 4.0, 5.0})))\
    \ == (std::vector<float>({0.0, 0.25, 0.5, 0.75, 1.0})));\n    assert(candidate((std::vector<float>({2.0,\
    \ 1.0, 5.0, 3.0, 4.0}))) == (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n\
    \    assert(candidate((std::vector<float>({12.0, 11.0, 15.0, 13.0, 14.0}))) ==\
    \ (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n}\n"
  stdout: ''
  stderr: "tmp0wjhm1pq: /tmp/tmp0wjhm1pq.cpp:17: int main(): Assertion `candidate((std::vector<float>({2.0,\
    \ 49.9}))) == (std::vector<float>({0.0, 1.0}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\n\
    std::vector<float> rescale_to_unit(std::vector<float> numbers) {\n    assert(numbers.size()\
    \ >= 2);\n    std::vector<float> rescaled_numbers(numbers.size());\n    float\
    \ smallest_number = numbers[0];\n    float largest_number = numbers[0];\n    for\
    \ (size_t i = 1; i < numbers.size(); ++i) {\n        smallest_number = std::min(smallest_number,\
    \ numbers[i]);\n        largest_number = std::max(largest_number, numbers[i]);\n\
    \    }\n    for (size_t i = 0; i < numbers.size(); ++i) {\n        rescaled_numbers[i]\
    \ = numbers[i] - smallest_number;\n        rescaled_numbers[i] /= (largest_number\
    \ - smallest_number);\n    }\n    return rescaled_numbers;\n}\nint main() {\n\
    \    auto candidate = rescale_to_unit;\n    assert(candidate((std::vector<float>({2.0,\
    \ 49.9}))) == (std::vector<float>({0.0, 1.0})));\n    assert(candidate((std::vector<float>({100.0,\
    \ 49.9}))) == (std::vector<float>({1.0, 0.0})));\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0, 4.0, 5.0}))) == (std::vector<float>({0.0, 0.25, 0.5, 0.75, 1.0})));\n\
    \    assert(candidate((std::vector<float>({2.0, 1.0, 5.0, 3.0, 4.0}))) == (std::vector<float>({0.25,\
    \ 0.0, 1.0, 0.5, 0.75})));\n    assert(candidate((std::vector<float>({12.0, 11.0,\
    \ 15.0, 13.0, 14.0}))) == (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\n\
    std::vector<float> rescale_to_unit(std::vector<float> numbers) {\n    std::vector<float>\
    \ rescaled;\n    rescaled.reserve(numbers.size());\n    for (auto number : numbers)\
    \ {\n        rescaled.push_back(number / numbers.back());\n    }\n    return rescaled;\n\
    }\nint main() {\n    auto candidate = rescale_to_unit;\n    assert(candidate((std::vector<float>({2.0,\
    \ 49.9}))) == (std::vector<float>({0.0, 1.0})));\n    assert(candidate((std::vector<float>({100.0,\
    \ 49.9}))) == (std::vector<float>({1.0, 0.0})));\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0, 4.0, 5.0}))) == (std::vector<float>({0.0, 0.25, 0.5, 0.75, 1.0})));\n\
    \    assert(candidate((std::vector<float>({2.0, 1.0, 5.0, 3.0, 4.0}))) == (std::vector<float>({0.25,\
    \ 0.0, 1.0, 0.5, 0.75})));\n    assert(candidate((std::vector<float>({12.0, 11.0,\
    \ 15.0, 13.0, 14.0}))) == (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n\
    }\n"
  stdout: ''
  stderr: "tmpif2suwvo: /tmp/tmpif2suwvo.cpp:17: int main(): Assertion `candidate((std::vector<float>({2.0,\
    \ 49.9}))) == (std::vector<float>({0.0, 1.0}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\n\
    std::vector<float> rescale_to_unit(std::vector<float> numbers) {\n    assert(numbers.size()\
    \ >= 2);\n    std::vector<float> rescaled_numbers;\n    rescaled_numbers.reserve(numbers.size());\n\
    \    for (float number : numbers) {\n        rescaled_numbers.push_back(number\
    \ * 2.0 - 1.0);\n    }\n    return rescaled_numbers;\n}\nint main() {\n    auto\
    \ candidate = rescale_to_unit;\n    assert(candidate((std::vector<float>({2.0,\
    \ 49.9}))) == (std::vector<float>({0.0, 1.0})));\n    assert(candidate((std::vector<float>({100.0,\
    \ 49.9}))) == (std::vector<float>({1.0, 0.0})));\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0, 4.0, 5.0}))) == (std::vector<float>({0.0, 0.25, 0.5, 0.75, 1.0})));\n\
    \    assert(candidate((std::vector<float>({2.0, 1.0, 5.0, 3.0, 4.0}))) == (std::vector<float>({0.25,\
    \ 0.0, 1.0, 0.5, 0.75})));\n    assert(candidate((std::vector<float>({12.0, 11.0,\
    \ 15.0, 13.0, 14.0}))) == (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n\
    }\n"
  stdout: ''
  stderr: "tmpdp3ksezq: /tmp/tmpdp3ksezq.cpp:18: int main(): Assertion `candidate((std::vector<float>({2.0,\
    \ 49.9}))) == (std::vector<float>({0.0, 1.0}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\n\
    std::vector<float> rescale_to_unit(std::vector<float> numbers) {\n    assert(numbers.size()\
    \ >= 2);\n    std::vector<float> rescaled_numbers;\n    rescaled_numbers.reserve(numbers.size());\n\
    \    for (float number : numbers) {\n        rescaled_numbers.push_back(number\
    \ / numbers[0]);\n    }\n    return rescaled_numbers;\n}\nint main() {\n    auto\
    \ candidate = rescale_to_unit;\n    assert(candidate((std::vector<float>({2.0,\
    \ 49.9}))) == (std::vector<float>({0.0, 1.0})));\n    assert(candidate((std::vector<float>({100.0,\
    \ 49.9}))) == (std::vector<float>({1.0, 0.0})));\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0, 4.0, 5.0}))) == (std::vector<float>({0.0, 0.25, 0.5, 0.75, 1.0})));\n\
    \    assert(candidate((std::vector<float>({2.0, 1.0, 5.0, 3.0, 4.0}))) == (std::vector<float>({0.25,\
    \ 0.0, 1.0, 0.5, 0.75})));\n    assert(candidate((std::vector<float>({12.0, 11.0,\
    \ 15.0, 13.0, 14.0}))) == (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n\
    }\n"
  stdout: ''
  stderr: "tmpnfqf95b8: /tmp/tmpnfqf95b8.cpp:18: int main(): Assertion `candidate((std::vector<float>({2.0,\
    \ 49.9}))) == (std::vector<float>({0.0, 1.0}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\n\
    std::vector<float> rescale_to_unit(std::vector<float> numbers) {\n    assert(numbers.size()\
    \ > 1);\n    std::vector<float> rescaled_numbers;\n    rescaled_numbers.reserve(numbers.size());\n\
    \    for (auto number : numbers) {\n        rescaled_numbers.push_back(number\
    \ / numbers.back());\n    }\n    return rescaled_numbers;\n}\nint main() {\n \
    \   auto candidate = rescale_to_unit;\n    assert(candidate((std::vector<float>({2.0,\
    \ 49.9}))) == (std::vector<float>({0.0, 1.0})));\n    assert(candidate((std::vector<float>({100.0,\
    \ 49.9}))) == (std::vector<float>({1.0, 0.0})));\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0, 4.0, 5.0}))) == (std::vector<float>({0.0, 0.25, 0.5, 0.75, 1.0})));\n\
    \    assert(candidate((std::vector<float>({2.0, 1.0, 5.0, 3.0, 4.0}))) == (std::vector<float>({0.25,\
    \ 0.0, 1.0, 0.5, 0.75})));\n    assert(candidate((std::vector<float>({12.0, 11.0,\
    \ 15.0, 13.0, 14.0}))) == (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n\
    }\n"
  stdout: ''
  stderr: "tmpya5_16ka: /tmp/tmpya5_16ka.cpp:18: int main(): Assertion `candidate((std::vector<float>({2.0,\
    \ 49.9}))) == (std::vector<float>({0.0, 1.0}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\n\
    std::vector<float> rescale_to_unit(std::vector<float> numbers) {\n    assert(numbers.size()\
    \ > 1);\n    std::vector<float> rescaled;\n    rescaled.reserve(numbers.size());\n\
    \    float min = numbers[0];\n    float max = numbers[0];\n    for (float number\
    \ : numbers) {\n        min = std::min(min, number);\n        max = std::max(max,\
    \ number);\n    }\n    float scale = 1.0f / (max - min);\n    for (float number\
    \ : numbers) {\n        rescaled.push_back(number * scale);\n    }\n    return\
    \ rescaled;\n}\nint main() {\n    auto candidate = rescale_to_unit;\n    assert(candidate((std::vector<float>({2.0,\
    \ 49.9}))) == (std::vector<float>({0.0, 1.0})));\n    assert(candidate((std::vector<float>({100.0,\
    \ 49.9}))) == (std::vector<float>({1.0, 0.0})));\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0, 4.0, 5.0}))) == (std::vector<float>({0.0, 0.25, 0.5, 0.75, 1.0})));\n\
    \    assert(candidate((std::vector<float>({2.0, 1.0, 5.0, 3.0, 4.0}))) == (std::vector<float>({0.25,\
    \ 0.0, 1.0, 0.5, 0.75})));\n    assert(candidate((std::vector<float>({12.0, 11.0,\
    \ 15.0, 13.0, 14.0}))) == (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n\
    }\n"
  stdout: ''
  stderr: "tmpvbh02km4: /tmp/tmpvbh02km4.cpp:25: int main(): Assertion `candidate((std::vector<float>({2.0,\
    \ 49.9}))) == (std::vector<float>({0.0, 1.0}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\n\
    std::vector<float> rescale_to_unit(std::vector<float> numbers) {\n    assert(numbers.size()\
    \ >= 2);\n    std::vector<float> rescaled_numbers(numbers.size());\n    float\
    \ smallest_number = numbers[0];\n    float largest_number = numbers[0];\n    for\
    \ (size_t i = 1; i < numbers.size(); ++i) {\n        smallest_number = std::min(smallest_number,\
    \ numbers[i]);\n        largest_number = std::max(largest_number, numbers[i]);\n\
    \    }\n    for (size_t i = 0; i < numbers.size(); ++i) {\n        rescaled_numbers[i]\
    \ = numbers[i] - smallest_number;\n        rescaled_numbers[i] /= (largest_number\
    \ - smallest_number);\n    }\n    return rescaled_numbers;\n}\nint main() {\n\
    \    auto candidate = rescale_to_unit;\n    assert(candidate((std::vector<float>({2.0,\
    \ 49.9}))) == (std::vector<float>({0.0, 1.0})));\n    assert(candidate((std::vector<float>({100.0,\
    \ 49.9}))) == (std::vector<float>({1.0, 0.0})));\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0, 4.0, 5.0}))) == (std::vector<float>({0.0, 0.25, 0.5, 0.75, 1.0})));\n\
    \    assert(candidate((std::vector<float>({2.0, 1.0, 5.0, 3.0, 4.0}))) == (std::vector<float>({0.25,\
    \ 0.0, 1.0, 0.5, 0.75})));\n    assert(candidate((std::vector<float>({12.0, 11.0,\
    \ 15.0, 13.0, 14.0}))) == (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\n\
    std::vector<float> rescale_to_unit(std::vector<float> numbers) {\n    assert(numbers.size()\
    \ >= 2);\n    std::vector<float> rescaled_numbers;\n    rescaled_numbers.reserve(numbers.size());\n\
    \    float smallest_number = numbers[0];\n    float largest_number = numbers[0];\n\
    \    for (auto number : numbers) {\n        smallest_number = std::min(smallest_number,\
    \ number);\n        largest_number = std::max(largest_number, number);\n     \
    \   rescaled_numbers.push_back(smallest_number / largest_number);\n    }\n   \
    \ return rescaled_numbers;\n}\nint main() {\n    auto candidate = rescale_to_unit;\n\
    \    assert(candidate((std::vector<float>({2.0, 49.9}))) == (std::vector<float>({0.0,\
    \ 1.0})));\n    assert(candidate((std::vector<float>({100.0, 49.9}))) == (std::vector<float>({1.0,\
    \ 0.0})));\n    assert(candidate((std::vector<float>({1.0, 2.0, 3.0, 4.0, 5.0})))\
    \ == (std::vector<float>({0.0, 0.25, 0.5, 0.75, 1.0})));\n    assert(candidate((std::vector<float>({2.0,\
    \ 1.0, 5.0, 3.0, 4.0}))) == (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n\
    \    assert(candidate((std::vector<float>({12.0, 11.0, 15.0, 13.0, 14.0}))) ==\
    \ (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n}\n"
  stdout: ''
  stderr: "tmpis2klkd_: /tmp/tmpis2klkd_.cpp:22: int main(): Assertion `candidate((std::vector<float>({2.0,\
    \ 49.9}))) == (std::vector<float>({0.0, 1.0}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\n\
    std::vector<float> rescale_to_unit(std::vector<float> numbers) {\n    std::vector<float>\
    \ rescaled_numbers(numbers.begin(), numbers.end());\n    std::transform(rescaled_numbers.begin(),\
    \ rescaled_numbers.end(), rescaled_numbers.begin(), [](float x) -> float {\n \
    \       return std::min(std::max(x, 0.0f), 1.0f);\n    });\n    return rescaled_numbers;\n\
    }\nint main() {\n    auto candidate = rescale_to_unit;\n    assert(candidate((std::vector<float>({2.0,\
    \ 49.9}))) == (std::vector<float>({0.0, 1.0})));\n    assert(candidate((std::vector<float>({100.0,\
    \ 49.9}))) == (std::vector<float>({1.0, 0.0})));\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0, 4.0, 5.0}))) == (std::vector<float>({0.0, 0.25, 0.5, 0.75, 1.0})));\n\
    \    assert(candidate((std::vector<float>({2.0, 1.0, 5.0, 3.0, 4.0}))) == (std::vector<float>({0.25,\
    \ 0.0, 1.0, 0.5, 0.75})));\n    assert(candidate((std::vector<float>({12.0, 11.0,\
    \ 15.0, 13.0, 14.0}))) == (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n\
    }\n"
  stdout: ''
  stderr: "tmprto1_yfr: /tmp/tmprto1_yfr.cpp:16: int main(): Assertion `candidate((std::vector<float>({2.0,\
    \ 49.9}))) == (std::vector<float>({0.0, 1.0}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\n\
    std::vector<float> rescale_to_unit(std::vector<float> numbers) {\n    std::vector<float>\
    \ rescaled_numbers;\n    rescaled_numbers.reserve(numbers.size());\n    for (float\
    \ number : numbers) {\n        rescaled_numbers.push_back(number / numbers.size());\n\
    \    }\n    return rescaled_numbers;\n}\nint main() {\n    auto candidate = rescale_to_unit;\n\
    \    assert(candidate((std::vector<float>({2.0, 49.9}))) == (std::vector<float>({0.0,\
    \ 1.0})));\n    assert(candidate((std::vector<float>({100.0, 49.9}))) == (std::vector<float>({1.0,\
    \ 0.0})));\n    assert(candidate((std::vector<float>({1.0, 2.0, 3.0, 4.0, 5.0})))\
    \ == (std::vector<float>({0.0, 0.25, 0.5, 0.75, 1.0})));\n    assert(candidate((std::vector<float>({2.0,\
    \ 1.0, 5.0, 3.0, 4.0}))) == (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n\
    \    assert(candidate((std::vector<float>({12.0, 11.0, 15.0, 13.0, 14.0}))) ==\
    \ (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n}\n"
  stdout: ''
  stderr: "tmp0bmaiosw: /tmp/tmp0bmaiosw.cpp:17: int main(): Assertion `candidate((std::vector<float>({2.0,\
    \ 49.9}))) == (std::vector<float>({0.0, 1.0}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\n\
    std::vector<float> rescale_to_unit(std::vector<float> numbers) {\n    assert(numbers.size()\
    \ >= 2);\n    std::vector<float> result(numbers.size());\n    for (size_t i =\
    \ 0; i < numbers.size(); ++i) {\n        result[i] = numbers[i] / numbers[0];\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = rescale_to_unit;\n\
    \    assert(candidate((std::vector<float>({2.0, 49.9}))) == (std::vector<float>({0.0,\
    \ 1.0})));\n    assert(candidate((std::vector<float>({100.0, 49.9}))) == (std::vector<float>({1.0,\
    \ 0.0})));\n    assert(candidate((std::vector<float>({1.0, 2.0, 3.0, 4.0, 5.0})))\
    \ == (std::vector<float>({0.0, 0.25, 0.5, 0.75, 1.0})));\n    assert(candidate((std::vector<float>({2.0,\
    \ 1.0, 5.0, 3.0, 4.0}))) == (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n\
    \    assert(candidate((std::vector<float>({12.0, 11.0, 15.0, 13.0, 14.0}))) ==\
    \ (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n}\n"
  stdout: ''
  stderr: "tmpwtnmozgq: /tmp/tmpwtnmozgq.cpp:17: int main(): Assertion `candidate((std::vector<float>({2.0,\
    \ 49.9}))) == (std::vector<float>({0.0, 1.0}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\n\
    std::vector<float> rescale_to_unit(std::vector<float> numbers) {\n    assert(numbers.size()\
    \ >= 2);\n    std::vector<float> rescaled_numbers(numbers.begin(), numbers.end());\n\
    \    float min_number = std::numeric_limits<float>::min();\n    float max_number\
    \ = std::numeric_limits<float>::max();\n    float min_rescaled_number = std::numeric_limits<float>::min();\n\
    \    float max_rescaled_number = std::numeric_limits<float>::max();\n    for (size_t\
    \ i = 0; i < rescaled_numbers.size(); ++i) {\n        rescaled_numbers[i] = numbers[i]\
    \ - min_number;\n        min_rescaled_number = std::min(min_rescaled_number, rescaled_numbers[i]);\n\
    \        max_rescaled_number = std::max(max_rescaled_number, rescaled_numbers[i]);\n\
    \    }\n    rescaled_numbers[0] = min_rescaled_number;\n    rescaled_numbers[rescaled_numbers.size()\
    \ - 1] = max_rescaled_number;\n    return rescaled_numbers;\n}\nint main() {\n\
    \    auto candidate = rescale_to_unit;\n    assert(candidate((std::vector<float>({2.0,\
    \ 49.9}))) == (std::vector<float>({0.0, 1.0})));\n    assert(candidate((std::vector<float>({100.0,\
    \ 49.9}))) == (std::vector<float>({1.0, 0.0})));\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0, 4.0, 5.0}))) == (std::vector<float>({0.0, 0.25, 0.5, 0.75, 1.0})));\n\
    \    assert(candidate((std::vector<float>({2.0, 1.0, 5.0, 3.0, 4.0}))) == (std::vector<float>({0.25,\
    \ 0.0, 1.0, 0.5, 0.75})));\n    assert(candidate((std::vector<float>({12.0, 11.0,\
    \ 15.0, 13.0, 14.0}))) == (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n\
    }\n"
  stdout: ''
  stderr: "tmpyo2ddj6u: /tmp/tmpyo2ddj6u.cpp:25: int main(): Assertion `candidate((std::vector<float>({2.0,\
    \ 49.9}))) == (std::vector<float>({0.0, 1.0}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\n\
    std::vector<float> rescale_to_unit(std::vector<float> numbers) {\n    assert(numbers.size()\
    \ > 1);\n    std::vector<float> rescaled_numbers;\n    rescaled_numbers.reserve(numbers.size());\n\
    \    for (float number : numbers) {\n        rescaled_numbers.push_back(number\
    \ / numbers[0]);\n    }\n    return rescaled_numbers;\n}\nint main() {\n    auto\
    \ candidate = rescale_to_unit;\n    assert(candidate((std::vector<float>({2.0,\
    \ 49.9}))) == (std::vector<float>({0.0, 1.0})));\n    assert(candidate((std::vector<float>({100.0,\
    \ 49.9}))) == (std::vector<float>({1.0, 0.0})));\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0, 4.0, 5.0}))) == (std::vector<float>({0.0, 0.25, 0.5, 0.75, 1.0})));\n\
    \    assert(candidate((std::vector<float>({2.0, 1.0, 5.0, 3.0, 4.0}))) == (std::vector<float>({0.25,\
    \ 0.0, 1.0, 0.5, 0.75})));\n    assert(candidate((std::vector<float>({12.0, 11.0,\
    \ 15.0, 13.0, 14.0}))) == (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n\
    }\n"
  stdout: ''
  stderr: "tmpubq1zo71: /tmp/tmpubq1zo71.cpp:18: int main(): Assertion `candidate((std::vector<float>({2.0,\
    \ 49.9}))) == (std::vector<float>({0.0, 1.0}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\n\
    std::vector<float> rescale_to_unit(std::vector<float> numbers) {\n    std::vector<float>\
    \ rescaled_numbers(numbers.size());\n    float smallest_number = numbers[0];\n\
    \    float largest_number = numbers[0];\n    for (size_t i = 0; i < numbers.size();\
    \ i++) {\n        rescaled_numbers[i] = numbers[i] - smallest_number;\n      \
    \  smallest_number = std::min(smallest_number, numbers[i]);\n        largest_number\
    \ = std::max(largest_number, numbers[i]);\n    }\n    float scale = 1.0f / (largest_number\
    \ - smallest_number);\n    for (size_t i = 0; i < numbers.size(); i++) {\n   \
    \     rescaled_numbers[i] *= scale;\n    }\n    return rescaled_numbers;\n}\n\
    int main() {\n    auto candidate = rescale_to_unit;\n    assert(candidate((std::vector<float>({2.0,\
    \ 49.9}))) == (std::vector<float>({0.0, 1.0})));\n    assert(candidate((std::vector<float>({100.0,\
    \ 49.9}))) == (std::vector<float>({1.0, 0.0})));\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0, 4.0, 5.0}))) == (std::vector<float>({0.0, 0.25, 0.5, 0.75, 1.0})));\n\
    \    assert(candidate((std::vector<float>({2.0, 1.0, 5.0, 3.0, 4.0}))) == (std::vector<float>({0.25,\
    \ 0.0, 1.0, 0.5, 0.75})));\n    assert(candidate((std::vector<float>({12.0, 11.0,\
    \ 15.0, 13.0, 14.0}))) == (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n\
    }\n"
  stdout: ''
  stderr: "tmpuvmnhjq_: /tmp/tmpuvmnhjq_.cpp:25: int main(): Assertion `candidate((std::vector<float>({100.0,\
    \ 49.9}))) == (std::vector<float>({1.0, 0.0}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\n\
    std::vector<float> rescale_to_unit(std::vector<float> numbers) {\n    assert(numbers.size()\
    \ >= 2);\n    std::vector<float> rescaled_numbers;\n    rescaled_numbers.reserve(numbers.size());\n\
    \    for (float number : numbers) {\n        rescaled_numbers.push_back(number\
    \ / numbers.size());\n    }\n    return rescaled_numbers;\n}\nint main() {\n \
    \   auto candidate = rescale_to_unit;\n    assert(candidate((std::vector<float>({2.0,\
    \ 49.9}))) == (std::vector<float>({0.0, 1.0})));\n    assert(candidate((std::vector<float>({100.0,\
    \ 49.9}))) == (std::vector<float>({1.0, 0.0})));\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0, 4.0, 5.0}))) == (std::vector<float>({0.0, 0.25, 0.5, 0.75, 1.0})));\n\
    \    assert(candidate((std::vector<float>({2.0, 1.0, 5.0, 3.0, 4.0}))) == (std::vector<float>({0.25,\
    \ 0.0, 1.0, 0.5, 0.75})));\n    assert(candidate((std::vector<float>({12.0, 11.0,\
    \ 15.0, 13.0, 14.0}))) == (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n\
    }\n"
  stdout: ''
  stderr: "tmpxdxhc7yu: /tmp/tmpxdxhc7yu.cpp:18: int main(): Assertion `candidate((std::vector<float>({2.0,\
    \ 49.9}))) == (std::vector<float>({0.0, 1.0}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\n\
    std::vector<float> rescale_to_unit(std::vector<float> numbers) {\n    assert(numbers.size()\
    \ >= 2);\n    float min = *std::min_element(numbers.begin(), numbers.end());\n\
    \    float max = *std::max_element(numbers.begin(), numbers.end());\n    float\
    \ range = max - min;\n    float scale = 1.0f / range;\n    std::vector<float>\
    \ rescaled_numbers;\n    for (float number : numbers) {\n        rescaled_numbers.push_back(number\
    \ * scale);\n    }\n    return rescaled_numbers;\n}\nint main() {\n    auto candidate\
    \ = rescale_to_unit;\n    assert(candidate((std::vector<float>({2.0, 49.9})))\
    \ == (std::vector<float>({0.0, 1.0})));\n    assert(candidate((std::vector<float>({100.0,\
    \ 49.9}))) == (std::vector<float>({1.0, 0.0})));\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0, 4.0, 5.0}))) == (std::vector<float>({0.0, 0.25, 0.5, 0.75, 1.0})));\n\
    \    assert(candidate((std::vector<float>({2.0, 1.0, 5.0, 3.0, 4.0}))) == (std::vector<float>({0.25,\
    \ 0.0, 1.0, 0.5, 0.75})));\n    assert(candidate((std::vector<float>({12.0, 11.0,\
    \ 15.0, 13.0, 14.0}))) == (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n\
    }\n"
  stdout: ''
  stderr: "tmpc7jhff_1: /tmp/tmpc7jhff_1.cpp:21: int main(): Assertion `candidate((std::vector<float>({2.0,\
    \ 49.9}))) == (std::vector<float>({0.0, 1.0}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\n\
    std::vector<float> rescale_to_unit(std::vector<float> numbers) {\n    assert(numbers.size()\
    \ >= 2);\n    std::vector<float> rescaled_numbers;\n    rescaled_numbers.reserve(numbers.size());\n\
    \    for (float number : numbers) {\n        rescaled_numbers.push_back(number\
    \ / numbers[0]);\n    }\n    return rescaled_numbers;\n}\nint main() {\n    auto\
    \ candidate = rescale_to_unit;\n    assert(candidate((std::vector<float>({2.0,\
    \ 49.9}))) == (std::vector<float>({0.0, 1.0})));\n    assert(candidate((std::vector<float>({100.0,\
    \ 49.9}))) == (std::vector<float>({1.0, 0.0})));\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0, 4.0, 5.0}))) == (std::vector<float>({0.0, 0.25, 0.5, 0.75, 1.0})));\n\
    \    assert(candidate((std::vector<float>({2.0, 1.0, 5.0, 3.0, 4.0}))) == (std::vector<float>({0.25,\
    \ 0.0, 1.0, 0.5, 0.75})));\n    assert(candidate((std::vector<float>({12.0, 11.0,\
    \ 15.0, 13.0, 14.0}))) == (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n\
    }\n"
  stdout: ''
  stderr: "tmp04k2x8rj: /tmp/tmp04k2x8rj.cpp:18: int main(): Assertion `candidate((std::vector<float>({2.0,\
    \ 49.9}))) == (std::vector<float>({0.0, 1.0}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\n\
    std::vector<float> rescale_to_unit(std::vector<float> numbers) {\n    std::vector<float>\
    \ result;\n    float min = *std::min_element(numbers.begin(), numbers.end());\n\
    \    float max = *std::max_element(numbers.begin(), numbers.end());\n    float\
    \ scale = 1.0f / (max - min);\n    for (float number : numbers) {\n        result.push_back(number\
    \ * scale);\n    }\n    return result;\n}\nint main() {\n    auto candidate =\
    \ rescale_to_unit;\n    assert(candidate((std::vector<float>({2.0, 49.9}))) ==\
    \ (std::vector<float>({0.0, 1.0})));\n    assert(candidate((std::vector<float>({100.0,\
    \ 49.9}))) == (std::vector<float>({1.0, 0.0})));\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0, 4.0, 5.0}))) == (std::vector<float>({0.0, 0.25, 0.5, 0.75, 1.0})));\n\
    \    assert(candidate((std::vector<float>({2.0, 1.0, 5.0, 3.0, 4.0}))) == (std::vector<float>({0.25,\
    \ 0.0, 1.0, 0.5, 0.75})));\n    assert(candidate((std::vector<float>({12.0, 11.0,\
    \ 15.0, 13.0, 14.0}))) == (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n\
    }\n"
  stdout: ''
  stderr: "tmp2cqlyz2h: /tmp/tmp2cqlyz2h.cpp:19: int main(): Assertion `candidate((std::vector<float>({2.0,\
    \ 49.9}))) == (std::vector<float>({0.0, 1.0}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\n\
    std::vector<float> rescale_to_unit(std::vector<float> numbers) {\n    std::vector<float>\
    \ rescaled_numbers;\n    rescaled_numbers.reserve(numbers.size());\n    for (float\
    \ number : numbers) {\n        rescaled_numbers.push_back(number / numbers.size());\n\
    \    }\n    return rescaled_numbers;\n}\nint main() {\n    auto candidate = rescale_to_unit;\n\
    \    assert(candidate((std::vector<float>({2.0, 49.9}))) == (std::vector<float>({0.0,\
    \ 1.0})));\n    assert(candidate((std::vector<float>({100.0, 49.9}))) == (std::vector<float>({1.0,\
    \ 0.0})));\n    assert(candidate((std::vector<float>({1.0, 2.0, 3.0, 4.0, 5.0})))\
    \ == (std::vector<float>({0.0, 0.25, 0.5, 0.75, 1.0})));\n    assert(candidate((std::vector<float>({2.0,\
    \ 1.0, 5.0, 3.0, 4.0}))) == (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n\
    \    assert(candidate((std::vector<float>({12.0, 11.0, 15.0, 13.0, 14.0}))) ==\
    \ (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n}\n"
  stdout: ''
  stderr: "tmpu7rdrmtd: /tmp/tmpu7rdrmtd.cpp:17: int main(): Assertion `candidate((std::vector<float>({2.0,\
    \ 49.9}))) == (std::vector<float>({0.0, 1.0}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\n\
    std::vector<float> rescale_to_unit(std::vector<float> numbers) {\n    std::vector<float>\
    \ rescaled_numbers;\n    rescaled_numbers.reserve(numbers.size());\n    for (float\
    \ number : numbers) {\n        rescaled_numbers.push_back(number);\n        rescaled_numbers.push_back(number);\n\
    \    }\n    return rescaled_numbers;\n}\nint main() {\n    auto candidate = rescale_to_unit;\n\
    \    assert(candidate((std::vector<float>({2.0, 49.9}))) == (std::vector<float>({0.0,\
    \ 1.0})));\n    assert(candidate((std::vector<float>({100.0, 49.9}))) == (std::vector<float>({1.0,\
    \ 0.0})));\n    assert(candidate((std::vector<float>({1.0, 2.0, 3.0, 4.0, 5.0})))\
    \ == (std::vector<float>({0.0, 0.25, 0.5, 0.75, 1.0})));\n    assert(candidate((std::vector<float>({2.0,\
    \ 1.0, 5.0, 3.0, 4.0}))) == (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n\
    \    assert(candidate((std::vector<float>({12.0, 11.0, 15.0, 13.0, 14.0}))) ==\
    \ (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n}\n"
  stdout: ''
  stderr: "tmphc3bk4hf: /tmp/tmphc3bk4hf.cpp:18: int main(): Assertion `candidate((std::vector<float>({2.0,\
    \ 49.9}))) == (std::vector<float>({0.0, 1.0}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\n\
    std::vector<float> rescale_to_unit(std::vector<float> numbers) {\n    std::vector<float>\
    \ rescaled_numbers;\n    rescaled_numbers.reserve(numbers.size());\n    for (float\
    \ number : numbers) {\n        rescaled_numbers.push_back(std::min(std::max(number,\
    \ 0.0f), 1.0f));\n    }\n    return rescaled_numbers;\n}\nint main() {\n    auto\
    \ candidate = rescale_to_unit;\n    assert(candidate((std::vector<float>({2.0,\
    \ 49.9}))) == (std::vector<float>({0.0, 1.0})));\n    assert(candidate((std::vector<float>({100.0,\
    \ 49.9}))) == (std::vector<float>({1.0, 0.0})));\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0, 4.0, 5.0}))) == (std::vector<float>({0.0, 0.25, 0.5, 0.75, 1.0})));\n\
    \    assert(candidate((std::vector<float>({2.0, 1.0, 5.0, 3.0, 4.0}))) == (std::vector<float>({0.25,\
    \ 0.0, 1.0, 0.5, 0.75})));\n    assert(candidate((std::vector<float>({12.0, 11.0,\
    \ 15.0, 13.0, 14.0}))) == (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n\
    }\n"
  stdout: ''
  stderr: "tmpowsr64jq: /tmp/tmpowsr64jq.cpp:17: int main(): Assertion `candidate((std::vector<float>({2.0,\
    \ 49.9}))) == (std::vector<float>({0.0, 1.0}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\n\
    std::vector<float> rescale_to_unit(std::vector<float> numbers) {\n    assert(numbers.size()\
    \ > 1);\n    std::vector<float> rescaled_numbers;\n    rescaled_numbers.reserve(numbers.size());\n\
    \    for (float number : numbers) {\n        rescaled_numbers.push_back(number\
    \ / numbers[0]);\n    }\n    return rescaled_numbers;\n}\nint main() {\n    auto\
    \ candidate = rescale_to_unit;\n    assert(candidate((std::vector<float>({2.0,\
    \ 49.9}))) == (std::vector<float>({0.0, 1.0})));\n    assert(candidate((std::vector<float>({100.0,\
    \ 49.9}))) == (std::vector<float>({1.0, 0.0})));\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0, 4.0, 5.0}))) == (std::vector<float>({0.0, 0.25, 0.5, 0.75, 1.0})));\n\
    \    assert(candidate((std::vector<float>({2.0, 1.0, 5.0, 3.0, 4.0}))) == (std::vector<float>({0.25,\
    \ 0.0, 1.0, 0.5, 0.75})));\n    assert(candidate((std::vector<float>({12.0, 11.0,\
    \ 15.0, 13.0, 14.0}))) == (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n\
    }\n"
  stdout: ''
  stderr: "tmpw9w__3hu: /tmp/tmpw9w__3hu.cpp:18: int main(): Assertion `candidate((std::vector<float>({2.0,\
    \ 49.9}))) == (std::vector<float>({0.0, 1.0}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\n\
    std::vector<float> rescale_to_unit(std::vector<float> numbers) {\n    std::vector<float>\
    \ rescaled;\n    rescaled.reserve(numbers.size());\n    for (float number : numbers)\
    \ {\n        rescaled.push_back(number / numbers.size());\n    }\n    return rescaled;\n\
    }\nint main() {\n    auto candidate = rescale_to_unit;\n    assert(candidate((std::vector<float>({2.0,\
    \ 49.9}))) == (std::vector<float>({0.0, 1.0})));\n    assert(candidate((std::vector<float>({100.0,\
    \ 49.9}))) == (std::vector<float>({1.0, 0.0})));\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0, 4.0, 5.0}))) == (std::vector<float>({0.0, 0.25, 0.5, 0.75, 1.0})));\n\
    \    assert(candidate((std::vector<float>({2.0, 1.0, 5.0, 3.0, 4.0}))) == (std::vector<float>({0.25,\
    \ 0.0, 1.0, 0.5, 0.75})));\n    assert(candidate((std::vector<float>({12.0, 11.0,\
    \ 15.0, 13.0, 14.0}))) == (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n\
    }\n"
  stdout: ''
  stderr: "tmpwa523e_v: /tmp/tmpwa523e_v.cpp:17: int main(): Assertion `candidate((std::vector<float>({2.0,\
    \ 49.9}))) == (std::vector<float>({0.0, 1.0}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\n\
    std::vector<float> rescale_to_unit(std::vector<float> numbers) {\n    assert(numbers.size()\
    \ >= 2);\n    std::vector<float> rescaled_numbers;\n    rescaled_numbers.reserve(numbers.size());\n\
    \    for (float number : numbers) {\n        rescaled_numbers.push_back(number);\n\
    \        rescaled_numbers.push_back(number);\n    }\n    return rescaled_numbers;\n\
    }\nint main() {\n    auto candidate = rescale_to_unit;\n    assert(candidate((std::vector<float>({2.0,\
    \ 49.9}))) == (std::vector<float>({0.0, 1.0})));\n    assert(candidate((std::vector<float>({100.0,\
    \ 49.9}))) == (std::vector<float>({1.0, 0.0})));\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0, 4.0, 5.0}))) == (std::vector<float>({0.0, 0.25, 0.5, 0.75, 1.0})));\n\
    \    assert(candidate((std::vector<float>({2.0, 1.0, 5.0, 3.0, 4.0}))) == (std::vector<float>({0.25,\
    \ 0.0, 1.0, 0.5, 0.75})));\n    assert(candidate((std::vector<float>({12.0, 11.0,\
    \ 15.0, 13.0, 14.0}))) == (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n\
    }\n"
  stdout: ''
  stderr: "tmpizcuylyi: /tmp/tmpizcuylyi.cpp:19: int main(): Assertion `candidate((std::vector<float>({2.0,\
    \ 49.9}))) == (std::vector<float>({0.0, 1.0}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\n\
    std::vector<float> rescale_to_unit(std::vector<float> numbers) {\n    std::vector<float>\
    \ rescaled_numbers;\n    rescaled_numbers.reserve(numbers.size());\n    for (auto\
    \ number : numbers) {\n        rescaled_numbers.push_back(number / numbers.size());\n\
    \    }\n    return rescaled_numbers;\n}\nint main() {\n    auto candidate = rescale_to_unit;\n\
    \    assert(candidate((std::vector<float>({2.0, 49.9}))) == (std::vector<float>({0.0,\
    \ 1.0})));\n    assert(candidate((std::vector<float>({100.0, 49.9}))) == (std::vector<float>({1.0,\
    \ 0.0})));\n    assert(candidate((std::vector<float>({1.0, 2.0, 3.0, 4.0, 5.0})))\
    \ == (std::vector<float>({0.0, 0.25, 0.5, 0.75, 1.0})));\n    assert(candidate((std::vector<float>({2.0,\
    \ 1.0, 5.0, 3.0, 4.0}))) == (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n\
    \    assert(candidate((std::vector<float>({12.0, 11.0, 15.0, 13.0, 14.0}))) ==\
    \ (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n}\n"
  stdout: ''
  stderr: "tmplrfr_x3m: /tmp/tmplrfr_x3m.cpp:17: int main(): Assertion `candidate((std::vector<float>({2.0,\
    \ 49.9}))) == (std::vector<float>({0.0, 1.0}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\n\
    std::vector<float> rescale_to_unit(std::vector<float> numbers) {\n    std::vector<float>\
    \ rescaled_numbers;\n    rescaled_numbers.reserve(numbers.size());\n    for (auto\
    \ number : numbers) {\n        rescaled_numbers.push_back(number / numbers.size());\n\
    \    }\n    return rescaled_numbers;\n}\nint main() {\n    auto candidate = rescale_to_unit;\n\
    \    assert(candidate((std::vector<float>({2.0, 49.9}))) == (std::vector<float>({0.0,\
    \ 1.0})));\n    assert(candidate((std::vector<float>({100.0, 49.9}))) == (std::vector<float>({1.0,\
    \ 0.0})));\n    assert(candidate((std::vector<float>({1.0, 2.0, 3.0, 4.0, 5.0})))\
    \ == (std::vector<float>({0.0, 0.25, 0.5, 0.75, 1.0})));\n    assert(candidate((std::vector<float>({2.0,\
    \ 1.0, 5.0, 3.0, 4.0}))) == (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n\
    \    assert(candidate((std::vector<float>({12.0, 11.0, 15.0, 13.0, 14.0}))) ==\
    \ (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n}\n"
  stdout: ''
  stderr: "tmpywsh1k5u: /tmp/tmpywsh1k5u.cpp:17: int main(): Assertion `candidate((std::vector<float>({2.0,\
    \ 49.9}))) == (std::vector<float>({0.0, 1.0}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\n\
    std::vector<float> rescale_to_unit(std::vector<float> numbers) {\n    std::vector<float>\
    \ rescaled_numbers;\n    rescaled_numbers.reserve(numbers.size());\n    for (float\
    \ number : numbers) {\n        rescaled_numbers.push_back(number / numbers.size());\n\
    \    }\n    return rescaled_numbers;\n}\nint main() {\n    auto candidate = rescale_to_unit;\n\
    \    assert(candidate((std::vector<float>({2.0, 49.9}))) == (std::vector<float>({0.0,\
    \ 1.0})));\n    assert(candidate((std::vector<float>({100.0, 49.9}))) == (std::vector<float>({1.0,\
    \ 0.0})));\n    assert(candidate((std::vector<float>({1.0, 2.0, 3.0, 4.0, 5.0})))\
    \ == (std::vector<float>({0.0, 0.25, 0.5, 0.75, 1.0})));\n    assert(candidate((std::vector<float>({2.0,\
    \ 1.0, 5.0, 3.0, 4.0}))) == (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n\
    \    assert(candidate((std::vector<float>({12.0, 11.0, 15.0, 13.0, 14.0}))) ==\
    \ (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n}\n"
  stdout: ''
  stderr: "tmp98fyfwvl: /tmp/tmp98fyfwvl.cpp:17: int main(): Assertion `candidate((std::vector<float>({2.0,\
    \ 49.9}))) == (std::vector<float>({0.0, 1.0}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\n\
    std::vector<float> rescale_to_unit(std::vector<float> numbers) {\n    std::vector<float>\
    \ rescaled_numbers;\n    rescaled_numbers.reserve(numbers.size());\n    for (float\
    \ number : numbers) {\n        rescaled_numbers.push_back(number / numbers[0]);\n\
    \    }\n    return rescaled_numbers;\n}\nint main() {\n    auto candidate = rescale_to_unit;\n\
    \    assert(candidate((std::vector<float>({2.0, 49.9}))) == (std::vector<float>({0.0,\
    \ 1.0})));\n    assert(candidate((std::vector<float>({100.0, 49.9}))) == (std::vector<float>({1.0,\
    \ 0.0})));\n    assert(candidate((std::vector<float>({1.0, 2.0, 3.0, 4.0, 5.0})))\
    \ == (std::vector<float>({0.0, 0.25, 0.5, 0.75, 1.0})));\n    assert(candidate((std::vector<float>({2.0,\
    \ 1.0, 5.0, 3.0, 4.0}))) == (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n\
    \    assert(candidate((std::vector<float>({12.0, 11.0, 15.0, 13.0, 14.0}))) ==\
    \ (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n}\n"
  stdout: ''
  stderr: "tmpkvkf8n2h: /tmp/tmpkvkf8n2h.cpp:17: int main(): Assertion `candidate((std::vector<float>({2.0,\
    \ 49.9}))) == (std::vector<float>({0.0, 1.0}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\n\
    std::vector<float> rescale_to_unit(std::vector<float> numbers) {\n    std::vector<float>\
    \ rescaled_numbers;\n    rescaled_numbers.reserve(numbers.size());\n    for (float\
    \ number : numbers) {\n        rescaled_numbers.push_back(number / numbers.size());\n\
    \    }\n    return rescaled_numbers;\n}\nint main() {\n    auto candidate = rescale_to_unit;\n\
    \    assert(candidate((std::vector<float>({2.0, 49.9}))) == (std::vector<float>({0.0,\
    \ 1.0})));\n    assert(candidate((std::vector<float>({100.0, 49.9}))) == (std::vector<float>({1.0,\
    \ 0.0})));\n    assert(candidate((std::vector<float>({1.0, 2.0, 3.0, 4.0, 5.0})))\
    \ == (std::vector<float>({0.0, 0.25, 0.5, 0.75, 1.0})));\n    assert(candidate((std::vector<float>({2.0,\
    \ 1.0, 5.0, 3.0, 4.0}))) == (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n\
    \    assert(candidate((std::vector<float>({12.0, 11.0, 15.0, 13.0, 14.0}))) ==\
    \ (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n}\n"
  stdout: ''
  stderr: "tmpunpda19a: /tmp/tmpunpda19a.cpp:17: int main(): Assertion `candidate((std::vector<float>({2.0,\
    \ 49.9}))) == (std::vector<float>({0.0, 1.0}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\n\
    std::vector<float> rescale_to_unit(std::vector<float> numbers) {\n    std::vector<float>\
    \ rescaled_numbers;\n    rescaled_numbers.reserve(numbers.size());\n    for (float\
    \ number : numbers) {\n        rescaled_numbers.push_back(number / numbers.size());\n\
    \    }\n    return rescaled_numbers;\n}\nint main() {\n    auto candidate = rescale_to_unit;\n\
    \    assert(candidate((std::vector<float>({2.0, 49.9}))) == (std::vector<float>({0.0,\
    \ 1.0})));\n    assert(candidate((std::vector<float>({100.0, 49.9}))) == (std::vector<float>({1.0,\
    \ 0.0})));\n    assert(candidate((std::vector<float>({1.0, 2.0, 3.0, 4.0, 5.0})))\
    \ == (std::vector<float>({0.0, 0.25, 0.5, 0.75, 1.0})));\n    assert(candidate((std::vector<float>({2.0,\
    \ 1.0, 5.0, 3.0, 4.0}))) == (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n\
    \    assert(candidate((std::vector<float>({12.0, 11.0, 15.0, 13.0, 14.0}))) ==\
    \ (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n}\n"
  stdout: ''
  stderr: "tmpp_rro84y: /tmp/tmpp_rro84y.cpp:17: int main(): Assertion `candidate((std::vector<float>({2.0,\
    \ 49.9}))) == (std::vector<float>({0.0, 1.0}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\n\
    std::vector<float> rescale_to_unit(std::vector<float> numbers) {\n    assert(numbers.size()\
    \ > 1);\n    std::vector<float> rescaled_numbers;\n    rescaled_numbers.reserve(numbers.size());\n\
    \    for (float number : numbers) {\n        rescaled_numbers.push_back(number\
    \ / numbers[0]);\n    }\n    return rescaled_numbers;\n}\nint main() {\n    auto\
    \ candidate = rescale_to_unit;\n    assert(candidate((std::vector<float>({2.0,\
    \ 49.9}))) == (std::vector<float>({0.0, 1.0})));\n    assert(candidate((std::vector<float>({100.0,\
    \ 49.9}))) == (std::vector<float>({1.0, 0.0})));\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0, 4.0, 5.0}))) == (std::vector<float>({0.0, 0.25, 0.5, 0.75, 1.0})));\n\
    \    assert(candidate((std::vector<float>({2.0, 1.0, 5.0, 3.0, 4.0}))) == (std::vector<float>({0.25,\
    \ 0.0, 1.0, 0.5, 0.75})));\n    assert(candidate((std::vector<float>({12.0, 11.0,\
    \ 15.0, 13.0, 14.0}))) == (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n\
    }\n"
  stdout: ''
  stderr: "tmp5i0zwuxp: /tmp/tmp5i0zwuxp.cpp:18: int main(): Assertion `candidate((std::vector<float>({2.0,\
    \ 49.9}))) == (std::vector<float>({0.0, 1.0}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\n\
    std::vector<float> rescale_to_unit(std::vector<float> numbers) {\n    std::vector<float>\
    \ rescaled_numbers;\n    rescaled_numbers.reserve(numbers.size());\n    for (float\
    \ number : numbers) {\n        rescaled_numbers.push_back(std::min(std::max(number,\
    \ 0.0f), 1.0f));\n    }\n    return rescaled_numbers;\n}\nint main() {\n    auto\
    \ candidate = rescale_to_unit;\n    assert(candidate((std::vector<float>({2.0,\
    \ 49.9}))) == (std::vector<float>({0.0, 1.0})));\n    assert(candidate((std::vector<float>({100.0,\
    \ 49.9}))) == (std::vector<float>({1.0, 0.0})));\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0, 4.0, 5.0}))) == (std::vector<float>({0.0, 0.25, 0.5, 0.75, 1.0})));\n\
    \    assert(candidate((std::vector<float>({2.0, 1.0, 5.0, 3.0, 4.0}))) == (std::vector<float>({0.25,\
    \ 0.0, 1.0, 0.5, 0.75})));\n    assert(candidate((std::vector<float>({12.0, 11.0,\
    \ 15.0, 13.0, 14.0}))) == (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n\
    }\n"
  stdout: ''
  stderr: "tmp5whv7aku: /tmp/tmp5whv7aku.cpp:17: int main(): Assertion `candidate((std::vector<float>({2.0,\
    \ 49.9}))) == (std::vector<float>({0.0, 1.0}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\n\
    std::vector<float> rescale_to_unit(std::vector<float> numbers) {\n    std::vector<float>\
    \ result;\n    float min = std::numeric_limits<float>::max();\n    float max =\
    \ std::numeric_limits<float>::min();\n    for (float number : numbers) {\n   \
    \     min = std::min(min, number);\n        max = std::max(max, number);\n   \
    \ }\n    for (float number : numbers) {\n        result.push_back(number * (max\
    \ - min) / numbers.size());\n    }\n    return result;\n}\nint main() {\n    auto\
    \ candidate = rescale_to_unit;\n    assert(candidate((std::vector<float>({2.0,\
    \ 49.9}))) == (std::vector<float>({0.0, 1.0})));\n    assert(candidate((std::vector<float>({100.0,\
    \ 49.9}))) == (std::vector<float>({1.0, 0.0})));\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0, 4.0, 5.0}))) == (std::vector<float>({0.0, 0.25, 0.5, 0.75, 1.0})));\n\
    \    assert(candidate((std::vector<float>({2.0, 1.0, 5.0, 3.0, 4.0}))) == (std::vector<float>({0.25,\
    \ 0.0, 1.0, 0.5, 0.75})));\n    assert(candidate((std::vector<float>({12.0, 11.0,\
    \ 15.0, 13.0, 14.0}))) == (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n\
    }\n"
  stdout: ''
  stderr: "tmp3i1u_84u: /tmp/tmp3i1u_84u.cpp:22: int main(): Assertion `candidate((std::vector<float>({2.0,\
    \ 49.9}))) == (std::vector<float>({0.0, 1.0}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\n\
    std::vector<float> rescale_to_unit(std::vector<float> numbers) {\n    assert(numbers.size()\
    \ >= 2);\n    std::vector<float> rescaled_numbers(numbers.begin(), numbers.end());\n\
    \    float min_number = std::numeric_limits<float>::min();\n    float max_number\
    \ = std::numeric_limits<float>::max();\n    float min_rescaled_number = std::numeric_limits<float>::min();\n\
    \    float max_rescaled_number = std::numeric_limits<float>::max();\n    for (float\
    \ number : numbers) {\n        min_rescaled_number = std::min(min_rescaled_number,\
    \ number);\n        max_rescaled_number = std::max(max_rescaled_number, number);\n\
    \    }\n    for (float number : numbers) {\n        rescaled_numbers[numbers.find(number)]\
    \ *= (max_rescaled_number - min_rescaled_number) / (max_number - min_number);\n\
    \    }\n    return rescaled_numbers;\n}\nint main() {\n    auto candidate = rescale_to_unit;\n\
    \    assert(candidate((std::vector<float>({2.0, 49.9}))) == (std::vector<float>({0.0,\
    \ 1.0})));\n    assert(candidate((std::vector<float>({100.0, 49.9}))) == (std::vector<float>({1.0,\
    \ 0.0})));\n    assert(candidate((std::vector<float>({1.0, 2.0, 3.0, 4.0, 5.0})))\
    \ == (std::vector<float>({0.0, 0.25, 0.5, 0.75, 1.0})));\n    assert(candidate((std::vector<float>({2.0,\
    \ 1.0, 5.0, 3.0, 4.0}))) == (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n\
    \    assert(candidate((std::vector<float>({12.0, 11.0, 15.0, 13.0, 14.0}))) ==\
    \ (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpxdy0w54p.cpp: In function \u2018std::vector<float> rescale_to_unit(std::vector<float>)\u2019\
    :\n/tmp/tmpxdy0w54p.cpp:19:34: error: \u2018class std::vector<float>\u2019 has\
    \ no member named \u2018find\u2019\n   19 |         rescaled_numbers[numbers.find(number)]\
    \ *= (max_rescaled_number - min_rescaled_number) / (max_number - min_number);\n\
    \      |                                  ^~~~\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\n\
    std::vector<float> rescale_to_unit(std::vector<float> numbers) {\n    std::vector<float>\
    \ rescaled_numbers;\n    rescaled_numbers.reserve(numbers.size());\n    for (float\
    \ number : numbers) {\n        rescaled_numbers.push_back(number / numbers[0]);\n\
    \    }\n    return rescaled_numbers;\n}\nint main() {\n    auto candidate = rescale_to_unit;\n\
    \    assert(candidate((std::vector<float>({2.0, 49.9}))) == (std::vector<float>({0.0,\
    \ 1.0})));\n    assert(candidate((std::vector<float>({100.0, 49.9}))) == (std::vector<float>({1.0,\
    \ 0.0})));\n    assert(candidate((std::vector<float>({1.0, 2.0, 3.0, 4.0, 5.0})))\
    \ == (std::vector<float>({0.0, 0.25, 0.5, 0.75, 1.0})));\n    assert(candidate((std::vector<float>({2.0,\
    \ 1.0, 5.0, 3.0, 4.0}))) == (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n\
    \    assert(candidate((std::vector<float>({12.0, 11.0, 15.0, 13.0, 14.0}))) ==\
    \ (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n}\n"
  stdout: ''
  stderr: "tmpbvsdx22x: /tmp/tmpbvsdx22x.cpp:17: int main(): Assertion `candidate((std::vector<float>({2.0,\
    \ 49.9}))) == (std::vector<float>({0.0, 1.0}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\n\
    std::vector<float> rescale_to_unit(std::vector<float> numbers) {\n    assert(numbers.size()\
    \ >= 2);\n    std::vector<float> rescaled_numbers(numbers.size());\n    float\
    \ min_number = numbers[0];\n    float max_number = numbers[0];\n    for (size_t\
    \ i = 1; i < numbers.size(); i++) {\n        min_number = std::min(min_number,\
    \ numbers[i]);\n        max_number = std::max(max_number, numbers[i]);\n    }\n\
    \    for (size_t i = 0; i < numbers.size(); i++) {\n        rescaled_numbers[i]\
    \ = numbers[i] - min_number;\n        rescaled_numbers[i] /= (max_number - min_number);\n\
    \    }\n    return rescaled_numbers;\n}\nint main() {\n    auto candidate = rescale_to_unit;\n\
    \    assert(candidate((std::vector<float>({2.0, 49.9}))) == (std::vector<float>({0.0,\
    \ 1.0})));\n    assert(candidate((std::vector<float>({100.0, 49.9}))) == (std::vector<float>({1.0,\
    \ 0.0})));\n    assert(candidate((std::vector<float>({1.0, 2.0, 3.0, 4.0, 5.0})))\
    \ == (std::vector<float>({0.0, 0.25, 0.5, 0.75, 1.0})));\n    assert(candidate((std::vector<float>({2.0,\
    \ 1.0, 5.0, 3.0, 4.0}))) == (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n\
    \    assert(candidate((std::vector<float>({12.0, 11.0, 15.0, 13.0, 14.0}))) ==\
    \ (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\n\
    std::vector<float> rescale_to_unit(std::vector<float> numbers) {\n    assert(numbers.size()\
    \ >= 2);\n    std::vector<float> rescaled_numbers;\n    rescaled_numbers.reserve(numbers.size());\n\
    \    for (auto number : numbers) {\n        rescaled_numbers.push_back(number\
    \ / numbers[0]);\n    }\n    return rescaled_numbers;\n}\nint main() {\n    auto\
    \ candidate = rescale_to_unit;\n    assert(candidate((std::vector<float>({2.0,\
    \ 49.9}))) == (std::vector<float>({0.0, 1.0})));\n    assert(candidate((std::vector<float>({100.0,\
    \ 49.9}))) == (std::vector<float>({1.0, 0.0})));\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0, 4.0, 5.0}))) == (std::vector<float>({0.0, 0.25, 0.5, 0.75, 1.0})));\n\
    \    assert(candidate((std::vector<float>({2.0, 1.0, 5.0, 3.0, 4.0}))) == (std::vector<float>({0.25,\
    \ 0.0, 1.0, 0.5, 0.75})));\n    assert(candidate((std::vector<float>({12.0, 11.0,\
    \ 15.0, 13.0, 14.0}))) == (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n\
    }\n"
  stdout: ''
  stderr: "tmpt2kmjwvz: /tmp/tmpt2kmjwvz.cpp:18: int main(): Assertion `candidate((std::vector<float>({2.0,\
    \ 49.9}))) == (std::vector<float>({0.0, 1.0}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\n\
    std::vector<float> rescale_to_unit(std::vector<float> numbers) {\n    std::vector<float>\
    \ rescaled_numbers;\n    rescaled_numbers.reserve(numbers.size());\n    for (float\
    \ number : numbers) {\n        rescaled_numbers.push_back(number / numbers.size());\n\
    \    }\n    return rescaled_numbers;\n}\nint main() {\n    auto candidate = rescale_to_unit;\n\
    \    assert(candidate((std::vector<float>({2.0, 49.9}))) == (std::vector<float>({0.0,\
    \ 1.0})));\n    assert(candidate((std::vector<float>({100.0, 49.9}))) == (std::vector<float>({1.0,\
    \ 0.0})));\n    assert(candidate((std::vector<float>({1.0, 2.0, 3.0, 4.0, 5.0})))\
    \ == (std::vector<float>({0.0, 0.25, 0.5, 0.75, 1.0})));\n    assert(candidate((std::vector<float>({2.0,\
    \ 1.0, 5.0, 3.0, 4.0}))) == (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n\
    \    assert(candidate((std::vector<float>({12.0, 11.0, 15.0, 13.0, 14.0}))) ==\
    \ (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n}\n"
  stdout: ''
  stderr: "tmp4w2mwxjh: /tmp/tmp4w2mwxjh.cpp:17: int main(): Assertion `candidate((std::vector<float>({2.0,\
    \ 49.9}))) == (std::vector<float>({0.0, 1.0}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\n\
    std::vector<float> rescale_to_unit(std::vector<float> numbers) {\n    assert(numbers.size()\
    \ >= 2);\n    std::vector<float> result;\n    float min = *std::min_element(numbers.begin(),\
    \ numbers.end());\n    float max = *std::max_element(numbers.begin(), numbers.end());\n\
    \    float scale = 1.0f / (max - min);\n    for (float number : numbers) {\n \
    \       result.push_back(number * scale);\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = rescale_to_unit;\n    assert(candidate((std::vector<float>({2.0,\
    \ 49.9}))) == (std::vector<float>({0.0, 1.0})));\n    assert(candidate((std::vector<float>({100.0,\
    \ 49.9}))) == (std::vector<float>({1.0, 0.0})));\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0, 4.0, 5.0}))) == (std::vector<float>({0.0, 0.25, 0.5, 0.75, 1.0})));\n\
    \    assert(candidate((std::vector<float>({2.0, 1.0, 5.0, 3.0, 4.0}))) == (std::vector<float>({0.25,\
    \ 0.0, 1.0, 0.5, 0.75})));\n    assert(candidate((std::vector<float>({12.0, 11.0,\
    \ 15.0, 13.0, 14.0}))) == (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n\
    }\n"
  stdout: ''
  stderr: "tmp0uaccrn7: /tmp/tmp0uaccrn7.cpp:20: int main(): Assertion `candidate((std::vector<float>({2.0,\
    \ 49.9}))) == (std::vector<float>({0.0, 1.0}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\n\
    std::vector<float> rescale_to_unit(std::vector<float> numbers) {\n    assert(numbers.size()\
    \ >= 2);\n    std::vector<float> rescaled_numbers(numbers.size());\n    float\
    \ smallest_number = numbers[0];\n    float largest_number = numbers[0];\n    for\
    \ (size_t i = 1; i < numbers.size(); i++) {\n        smallest_number = std::min(smallest_number,\
    \ numbers[i]);\n        largest_number = std::max(largest_number, numbers[i]);\n\
    \    }\n    for (size_t i = 0; i < numbers.size(); i++) {\n        rescaled_numbers[i]\
    \ = numbers[i] - smallest_number;\n        rescaled_numbers[i] /= (largest_number\
    \ - smallest_number);\n    }\n    return rescaled_numbers;\n}\nint main() {\n\
    \    auto candidate = rescale_to_unit;\n    assert(candidate((std::vector<float>({2.0,\
    \ 49.9}))) == (std::vector<float>({0.0, 1.0})));\n    assert(candidate((std::vector<float>({100.0,\
    \ 49.9}))) == (std::vector<float>({1.0, 0.0})));\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0, 4.0, 5.0}))) == (std::vector<float>({0.0, 0.25, 0.5, 0.75, 1.0})));\n\
    \    assert(candidate((std::vector<float>({2.0, 1.0, 5.0, 3.0, 4.0}))) == (std::vector<float>({0.25,\
    \ 0.0, 1.0, 0.5, 0.75})));\n    assert(candidate((std::vector<float>({12.0, 11.0,\
    \ 15.0, 13.0, 14.0}))) == (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\n\
    std::vector<float> rescale_to_unit(std::vector<float> numbers) {\n    std::vector<float>\
    \ rescaled_numbers;\n    rescaled_numbers.reserve(numbers.size());\n    for (float\
    \ number : numbers) {\n        rescaled_numbers.push_back(number / numbers.size());\n\
    \    }\n    return rescaled_numbers;\n}\nint main() {\n    auto candidate = rescale_to_unit;\n\
    \    assert(candidate((std::vector<float>({2.0, 49.9}))) == (std::vector<float>({0.0,\
    \ 1.0})));\n    assert(candidate((std::vector<float>({100.0, 49.9}))) == (std::vector<float>({1.0,\
    \ 0.0})));\n    assert(candidate((std::vector<float>({1.0, 2.0, 3.0, 4.0, 5.0})))\
    \ == (std::vector<float>({0.0, 0.25, 0.5, 0.75, 1.0})));\n    assert(candidate((std::vector<float>({2.0,\
    \ 1.0, 5.0, 3.0, 4.0}))) == (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n\
    \    assert(candidate((std::vector<float>({12.0, 11.0, 15.0, 13.0, 14.0}))) ==\
    \ (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n}\n"
  stdout: ''
  stderr: "tmp33_u83nw: /tmp/tmp33_u83nw.cpp:17: int main(): Assertion `candidate((std::vector<float>({2.0,\
    \ 49.9}))) == (std::vector<float>({0.0, 1.0}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\n\
    std::vector<float> rescale_to_unit(std::vector<float> numbers) {\n    std::vector<float>\
    \ rescaled_numbers;\n    rescaled_numbers.reserve(numbers.size());\n    for (float\
    \ number : numbers) {\n        rescaled_numbers.push_back(number);\n        rescaled_numbers.push_back(number);\n\
    \    }\n    return rescaled_numbers;\n}\nint main() {\n    auto candidate = rescale_to_unit;\n\
    \    assert(candidate((std::vector<float>({2.0, 49.9}))) == (std::vector<float>({0.0,\
    \ 1.0})));\n    assert(candidate((std::vector<float>({100.0, 49.9}))) == (std::vector<float>({1.0,\
    \ 0.0})));\n    assert(candidate((std::vector<float>({1.0, 2.0, 3.0, 4.0, 5.0})))\
    \ == (std::vector<float>({0.0, 0.25, 0.5, 0.75, 1.0})));\n    assert(candidate((std::vector<float>({2.0,\
    \ 1.0, 5.0, 3.0, 4.0}))) == (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n\
    \    assert(candidate((std::vector<float>({12.0, 11.0, 15.0, 13.0, 14.0}))) ==\
    \ (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n}\n"
  stdout: ''
  stderr: "tmp2k2g4cxr: /tmp/tmp2k2g4cxr.cpp:18: int main(): Assertion `candidate((std::vector<float>({2.0,\
    \ 49.9}))) == (std::vector<float>({0.0, 1.0}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\n\
    std::vector<float> rescale_to_unit(std::vector<float> numbers) {\n    std::vector<float>\
    \ rescaled_numbers;\n    rescaled_numbers.reserve(numbers.size());\n    for (float\
    \ number : numbers) {\n        rescaled_numbers.push_back(number / numbers.size());\n\
    \    }\n    return rescaled_numbers;\n}\nint main() {\n    auto candidate = rescale_to_unit;\n\
    \    assert(candidate((std::vector<float>({2.0, 49.9}))) == (std::vector<float>({0.0,\
    \ 1.0})));\n    assert(candidate((std::vector<float>({100.0, 49.9}))) == (std::vector<float>({1.0,\
    \ 0.0})));\n    assert(candidate((std::vector<float>({1.0, 2.0, 3.0, 4.0, 5.0})))\
    \ == (std::vector<float>({0.0, 0.25, 0.5, 0.75, 1.0})));\n    assert(candidate((std::vector<float>({2.0,\
    \ 1.0, 5.0, 3.0, 4.0}))) == (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n\
    \    assert(candidate((std::vector<float>({12.0, 11.0, 15.0, 13.0, 14.0}))) ==\
    \ (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n}\n"
  stdout: ''
  stderr: "tmpe34jqh7x: /tmp/tmpe34jqh7x.cpp:17: int main(): Assertion `candidate((std::vector<float>({2.0,\
    \ 49.9}))) == (std::vector<float>({0.0, 1.0}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\n\
    std::vector<float> rescale_to_unit(std::vector<float> numbers) {\n    assert(numbers.size()\
    \ >= 2);\n    std::vector<float> rescaled_numbers(numbers.size());\n    float\
    \ min_number = std::numeric_limits<float>::max();\n    float max_number = std::numeric_limits<float>::min();\n\
    \    for (size_t i = 0; i < numbers.size(); i++) {\n        rescaled_numbers[i]\
    \ = numbers[i] - min_number;\n        min_number = std::min(min_number, numbers[i]);\n\
    \        max_number = std::max(max_number, numbers[i]);\n    }\n    float scale\
    \ = 1.0f / (max_number - min_number);\n    for (size_t i = 0; i < numbers.size();\
    \ i++) {\n        rescaled_numbers[i] *= scale;\n    }\n    return rescaled_numbers;\n\
    }\nint main() {\n    auto candidate = rescale_to_unit;\n    assert(candidate((std::vector<float>({2.0,\
    \ 49.9}))) == (std::vector<float>({0.0, 1.0})));\n    assert(candidate((std::vector<float>({100.0,\
    \ 49.9}))) == (std::vector<float>({1.0, 0.0})));\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0, 4.0, 5.0}))) == (std::vector<float>({0.0, 0.25, 0.5, 0.75, 1.0})));\n\
    \    assert(candidate((std::vector<float>({2.0, 1.0, 5.0, 3.0, 4.0}))) == (std::vector<float>({0.25,\
    \ 0.0, 1.0, 0.5, 0.75})));\n    assert(candidate((std::vector<float>({12.0, 11.0,\
    \ 15.0, 13.0, 14.0}))) == (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n\
    }\n"
  stdout: ''
  stderr: "tmpjhg4ccr2: /tmp/tmpjhg4ccr2.cpp:25: int main(): Assertion `candidate((std::vector<float>({2.0,\
    \ 49.9}))) == (std::vector<float>({0.0, 1.0}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\n\
    std::vector<float> rescale_to_unit(std::vector<float> numbers) {\n    assert(numbers.size()\
    \ >= 2);\n    float min = *std::min_element(numbers.begin(), numbers.end());\n\
    \    float max = *std::max_element(numbers.begin(), numbers.end());\n    float\
    \ scale = max - min;\n    std::vector<float> rescaled_numbers;\n    rescaled_numbers.reserve(numbers.size());\n\
    \    for (auto number : numbers) {\n        rescaled_numbers.push_back(number\
    \ * scale + min);\n    }\n    return rescaled_numbers;\n}\nint main() {\n    auto\
    \ candidate = rescale_to_unit;\n    assert(candidate((std::vector<float>({2.0,\
    \ 49.9}))) == (std::vector<float>({0.0, 1.0})));\n    assert(candidate((std::vector<float>({100.0,\
    \ 49.9}))) == (std::vector<float>({1.0, 0.0})));\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0, 4.0, 5.0}))) == (std::vector<float>({0.0, 0.25, 0.5, 0.75, 1.0})));\n\
    \    assert(candidate((std::vector<float>({2.0, 1.0, 5.0, 3.0, 4.0}))) == (std::vector<float>({0.25,\
    \ 0.0, 1.0, 0.5, 0.75})));\n    assert(candidate((std::vector<float>({12.0, 11.0,\
    \ 15.0, 13.0, 14.0}))) == (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n\
    }\n"
  stdout: ''
  stderr: "tmpiegutvt1: /tmp/tmpiegutvt1.cpp:21: int main(): Assertion `candidate((std::vector<float>({2.0,\
    \ 49.9}))) == (std::vector<float>({0.0, 1.0}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\n\
    std::vector<float> rescale_to_unit(std::vector<float> numbers) {\n    assert(numbers.size()\
    \ > 1);\n    std::vector<float> rescaled_numbers(numbers.size());\n    float min_number\
    \ = numbers[0];\n    float max_number = numbers[0];\n    for (size_t i = 1; i\
    \ < numbers.size(); i++) {\n        min_number = std::min(min_number, numbers[i]);\n\
    \        max_number = std::max(max_number, numbers[i]);\n    }\n    for (size_t\
    \ i = 0; i < numbers.size(); i++) {\n        rescaled_numbers[i] = numbers[i]\
    \ - min_number;\n        rescaled_numbers[i] /= (max_number - min_number);\n \
    \   }\n    return rescaled_numbers;\n}\nint main() {\n    auto candidate = rescale_to_unit;\n\
    \    assert(candidate((std::vector<float>({2.0, 49.9}))) == (std::vector<float>({0.0,\
    \ 1.0})));\n    assert(candidate((std::vector<float>({100.0, 49.9}))) == (std::vector<float>({1.0,\
    \ 0.0})));\n    assert(candidate((std::vector<float>({1.0, 2.0, 3.0, 4.0, 5.0})))\
    \ == (std::vector<float>({0.0, 0.25, 0.5, 0.75, 1.0})));\n    assert(candidate((std::vector<float>({2.0,\
    \ 1.0, 5.0, 3.0, 4.0}))) == (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n\
    \    assert(candidate((std::vector<float>({12.0, 11.0, 15.0, 13.0, 14.0}))) ==\
    \ (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\n\
    std::vector<float> rescale_to_unit(std::vector<float> numbers) {\n    std::vector<float>\
    \ rescaled_numbers;\n    rescaled_numbers.reserve(numbers.size());\n    for (float\
    \ number : numbers) {\n        rescaled_numbers.push_back(number / numbers.size());\n\
    \    }\n    return rescaled_numbers;\n}\nint main() {\n    auto candidate = rescale_to_unit;\n\
    \    assert(candidate((std::vector<float>({2.0, 49.9}))) == (std::vector<float>({0.0,\
    \ 1.0})));\n    assert(candidate((std::vector<float>({100.0, 49.9}))) == (std::vector<float>({1.0,\
    \ 0.0})));\n    assert(candidate((std::vector<float>({1.0, 2.0, 3.0, 4.0, 5.0})))\
    \ == (std::vector<float>({0.0, 0.25, 0.5, 0.75, 1.0})));\n    assert(candidate((std::vector<float>({2.0,\
    \ 1.0, 5.0, 3.0, 4.0}))) == (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n\
    \    assert(candidate((std::vector<float>({12.0, 11.0, 15.0, 13.0, 14.0}))) ==\
    \ (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n}\n"
  stdout: ''
  stderr: "tmpc69znl3_: /tmp/tmpc69znl3_.cpp:17: int main(): Assertion `candidate((std::vector<float>({2.0,\
    \ 49.9}))) == (std::vector<float>({0.0, 1.0}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\n\
    std::vector<float> rescale_to_unit(std::vector<float> numbers) {\n    std::vector<float>\
    \ rescaled_numbers;\n    rescaled_numbers.reserve(numbers.size());\n    for (float\
    \ number : numbers) {\n        rescaled_numbers.push_back(number / numbers.size());\n\
    \    }\n    return rescaled_numbers;\n}\nint main() {\n    auto candidate = rescale_to_unit;\n\
    \    assert(candidate((std::vector<float>({2.0, 49.9}))) == (std::vector<float>({0.0,\
    \ 1.0})));\n    assert(candidate((std::vector<float>({100.0, 49.9}))) == (std::vector<float>({1.0,\
    \ 0.0})));\n    assert(candidate((std::vector<float>({1.0, 2.0, 3.0, 4.0, 5.0})))\
    \ == (std::vector<float>({0.0, 0.25, 0.5, 0.75, 1.0})));\n    assert(candidate((std::vector<float>({2.0,\
    \ 1.0, 5.0, 3.0, 4.0}))) == (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n\
    \    assert(candidate((std::vector<float>({12.0, 11.0, 15.0, 13.0, 14.0}))) ==\
    \ (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n}\n"
  stdout: ''
  stderr: "tmp7nnlsvfq: /tmp/tmp7nnlsvfq.cpp:17: int main(): Assertion `candidate((std::vector<float>({2.0,\
    \ 49.9}))) == (std::vector<float>({0.0, 1.0}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\n\
    std::vector<float> rescale_to_unit(std::vector<float> numbers) {\n    std::vector<float>\
    \ rescaled_numbers;\n    rescaled_numbers.reserve(numbers.size());\n    for (float\
    \ number : numbers) {\n        rescaled_numbers.push_back(number);\n    }\n  \
    \  float smallest_number = rescaled_numbers[0];\n    float largest_number = rescaled_numbers[0];\n\
    \    for (float number : rescaled_numbers) {\n        if (number < smallest_number)\
    \ {\n            smallest_number = number;\n        }\n        if (number > largest_number)\
    \ {\n            largest_number = number;\n        }\n    }\n    float scale =\
    \ 1.0f / (largest_number - smallest_number);\n    for (float number : rescaled_numbers)\
    \ {\n        rescaled_number *= scale;\n    }\n    return rescaled_numbers;\n\
    }\nint main() {\n    auto candidate = rescale_to_unit;\n    assert(candidate((std::vector<float>({2.0,\
    \ 49.9}))) == (std::vector<float>({0.0, 1.0})));\n    assert(candidate((std::vector<float>({100.0,\
    \ 49.9}))) == (std::vector<float>({1.0, 0.0})));\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0, 4.0, 5.0}))) == (std::vector<float>({0.0, 0.25, 0.5, 0.75, 1.0})));\n\
    \    assert(candidate((std::vector<float>({2.0, 1.0, 5.0, 3.0, 4.0}))) == (std::vector<float>({0.25,\
    \ 0.0, 1.0, 0.5, 0.75})));\n    assert(candidate((std::vector<float>({12.0, 11.0,\
    \ 15.0, 13.0, 14.0}))) == (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n\
    }\n"
  stdout: ''
  stderr: "/tmp/tmpsbrms4y_.cpp: In function \u2018std::vector<float> rescale_to_unit(std::vector<float>)\u2019\
    :\n/tmp/tmpsbrms4y_.cpp:25:9: error: \u2018rescaled_number\u2019 was not declared\
    \ in this scope; did you mean \u2018rescaled_numbers\u2019?\n   25 |         rescaled_number\
    \ *= scale;\n      |         ^~~~~~~~~~~~~~~\n      |         rescaled_numbers\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\n\
    std::vector<float> rescale_to_unit(std::vector<float> numbers) {\n    assert(numbers.size()\
    \ >= 2);\n    std::vector<float> rescaled_numbers(numbers.size());\n    float\
    \ min_number = numbers[0];\n    float max_number = numbers[0];\n    for (size_t\
    \ i = 1; i < numbers.size(); ++i) {\n        if (numbers[i] < min_number) {\n\
    \            min_number = numbers[i];\n        }\n        if (numbers[i] > max_number)\
    \ {\n            max_number = numbers[i];\n        }\n    }\n    float scale =\
    \ max_number - min_number;\n    for (size_t i = 0; i < numbers.size(); ++i) {\n\
    \        rescaled_numbers[i] = numbers[i] - min_number;\n        rescaled_numbers[i]\
    \ *= scale;\n    }\n    return rescaled_numbers;\n}\nint main() {\n    auto candidate\
    \ = rescale_to_unit;\n    assert(candidate((std::vector<float>({2.0, 49.9})))\
    \ == (std::vector<float>({0.0, 1.0})));\n    assert(candidate((std::vector<float>({100.0,\
    \ 49.9}))) == (std::vector<float>({1.0, 0.0})));\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0, 4.0, 5.0}))) == (std::vector<float>({0.0, 0.25, 0.5, 0.75, 1.0})));\n\
    \    assert(candidate((std::vector<float>({2.0, 1.0, 5.0, 3.0, 4.0}))) == (std::vector<float>({0.25,\
    \ 0.0, 1.0, 0.5, 0.75})));\n    assert(candidate((std::vector<float>({12.0, 11.0,\
    \ 15.0, 13.0, 14.0}))) == (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n\
    }\n"
  stdout: ''
  stderr: "tmpzjwqv5np: /tmp/tmpzjwqv5np.cpp:29: int main(): Assertion `candidate((std::vector<float>({2.0,\
    \ 49.9}))) == (std::vector<float>({0.0, 1.0}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\n\
    std::vector<float> rescale_to_unit(std::vector<float> numbers) {\n    assert(numbers.size()\
    \ >= 2);\n    float min = *std::min_element(numbers.begin(), numbers.end());\n\
    \    float max = *std::max_element(numbers.begin(), numbers.end());\n    float\
    \ scale = 1.0f / (max - min);\n    std::vector<float> rescaled_numbers;\n    rescaled_numbers.reserve(numbers.size());\n\
    \    for (float number : numbers) {\n        rescaled_numbers.push_back(number\
    \ * scale);\n    }\n    return rescaled_numbers;\n}\nint main() {\n    auto candidate\
    \ = rescale_to_unit;\n    assert(candidate((std::vector<float>({2.0, 49.9})))\
    \ == (std::vector<float>({0.0, 1.0})));\n    assert(candidate((std::vector<float>({100.0,\
    \ 49.9}))) == (std::vector<float>({1.0, 0.0})));\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0, 4.0, 5.0}))) == (std::vector<float>({0.0, 0.25, 0.5, 0.75, 1.0})));\n\
    \    assert(candidate((std::vector<float>({2.0, 1.0, 5.0, 3.0, 4.0}))) == (std::vector<float>({0.25,\
    \ 0.0, 1.0, 0.5, 0.75})));\n    assert(candidate((std::vector<float>({12.0, 11.0,\
    \ 15.0, 13.0, 14.0}))) == (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n\
    }\n"
  stdout: ''
  stderr: "tmpy86w9j55: /tmp/tmpy86w9j55.cpp:21: int main(): Assertion `candidate((std::vector<float>({2.0,\
    \ 49.9}))) == (std::vector<float>({0.0, 1.0}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\n\
    std::vector<float> rescale_to_unit(std::vector<float> numbers) {\n    std::vector<float>\
    \ rescaled_numbers;\n    rescaled_numbers.reserve(numbers.size());\n    for (auto\
    \ number : numbers) {\n        rescaled_numbers.push_back(number / numbers.size());\n\
    \    }\n    return rescaled_numbers;\n}\nint main() {\n    auto candidate = rescale_to_unit;\n\
    \    assert(candidate((std::vector<float>({2.0, 49.9}))) == (std::vector<float>({0.0,\
    \ 1.0})));\n    assert(candidate((std::vector<float>({100.0, 49.9}))) == (std::vector<float>({1.0,\
    \ 0.0})));\n    assert(candidate((std::vector<float>({1.0, 2.0, 3.0, 4.0, 5.0})))\
    \ == (std::vector<float>({0.0, 0.25, 0.5, 0.75, 1.0})));\n    assert(candidate((std::vector<float>({2.0,\
    \ 1.0, 5.0, 3.0, 4.0}))) == (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n\
    \    assert(candidate((std::vector<float>({12.0, 11.0, 15.0, 13.0, 14.0}))) ==\
    \ (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n}\n"
  stdout: ''
  stderr: "tmp2yc27dk1: /tmp/tmp2yc27dk1.cpp:17: int main(): Assertion `candidate((std::vector<float>({2.0,\
    \ 49.9}))) == (std::vector<float>({0.0, 1.0}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\n\
    std::vector<float> rescale_to_unit(std::vector<float> numbers) {\n    assert(numbers.size()\
    \ >= 2);\n    std::vector<float> result(numbers.size());\n    float min = *std::min_element(numbers.begin(),\
    \ numbers.end());\n    float max = *std::max_element(numbers.begin(), numbers.end());\n\
    \    float scale = max - min;\n    for (size_t i = 0; i < numbers.size(); ++i)\
    \ {\n        result[i] = numbers[i] - min;\n        result[i] *= 1.0 / scale;\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = rescale_to_unit;\n\
    \    assert(candidate((std::vector<float>({2.0, 49.9}))) == (std::vector<float>({0.0,\
    \ 1.0})));\n    assert(candidate((std::vector<float>({100.0, 49.9}))) == (std::vector<float>({1.0,\
    \ 0.0})));\n    assert(candidate((std::vector<float>({1.0, 2.0, 3.0, 4.0, 5.0})))\
    \ == (std::vector<float>({0.0, 0.25, 0.5, 0.75, 1.0})));\n    assert(candidate((std::vector<float>({2.0,\
    \ 1.0, 5.0, 3.0, 4.0}))) == (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n\
    \    assert(candidate((std::vector<float>({12.0, 11.0, 15.0, 13.0, 14.0}))) ==\
    \ (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\n\
    std::vector<float> rescale_to_unit(std::vector<float> numbers) {\n    assert(numbers.size()\
    \ > 1);\n    std::vector<float> rescaled_numbers(numbers.size());\n    float smallest_number\
    \ = numbers[0];\n    float largest_number = numbers[0];\n    for (size_t i = 1;\
    \ i < numbers.size(); ++i) {\n        smallest_number = std::min(smallest_number,\
    \ numbers[i]);\n        largest_number = std::max(largest_number, numbers[i]);\n\
    \    }\n    float scale = 1.0f / (largest_number - smallest_number);\n    for\
    \ (size_t i = 0; i < numbers.size(); ++i) {\n        rescaled_numbers[i] = numbers[i]\
    \ * scale;\n    }\n    return rescaled_numbers;\n}\nint main() {\n    auto candidate\
    \ = rescale_to_unit;\n    assert(candidate((std::vector<float>({2.0, 49.9})))\
    \ == (std::vector<float>({0.0, 1.0})));\n    assert(candidate((std::vector<float>({100.0,\
    \ 49.9}))) == (std::vector<float>({1.0, 0.0})));\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0, 4.0, 5.0}))) == (std::vector<float>({0.0, 0.25, 0.5, 0.75, 1.0})));\n\
    \    assert(candidate((std::vector<float>({2.0, 1.0, 5.0, 3.0, 4.0}))) == (std::vector<float>({0.25,\
    \ 0.0, 1.0, 0.5, 0.75})));\n    assert(candidate((std::vector<float>({12.0, 11.0,\
    \ 15.0, 13.0, 14.0}))) == (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n\
    }\n"
  stdout: ''
  stderr: "tmp3u5dmxrw: /tmp/tmp3u5dmxrw.cpp:24: int main(): Assertion `candidate((std::vector<float>({2.0,\
    \ 49.9}))) == (std::vector<float>({0.0, 1.0}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers\
    \ (of at least two elements), apply a linear transform to that list,\n// such\
    \ that the smallest number will become 0 and the largest will become 1\n// >>>\
    \ rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n// [0.0, 0.25, 0.5, 0.75, 1.0]\n\
    std::vector<float> rescale_to_unit(std::vector<float> numbers) {\n    assert(numbers.size()\
    \ >= 2);\n    float min = *std::min_element(numbers.begin(), numbers.end());\n\
    \    float max = *std::max_element(numbers.begin(), numbers.end());\n    float\
    \ range = max - min;\n    float scale = 1.0f / range;\n    std::vector<float>\
    \ rescaled_numbers;\n    for (float number : numbers) {\n        rescaled_numbers.push_back(number\
    \ * scale);\n    }\n    return rescaled_numbers;\n}\nint main() {\n    auto candidate\
    \ = rescale_to_unit;\n    assert(candidate((std::vector<float>({2.0, 49.9})))\
    \ == (std::vector<float>({0.0, 1.0})));\n    assert(candidate((std::vector<float>({100.0,\
    \ 49.9}))) == (std::vector<float>({1.0, 0.0})));\n    assert(candidate((std::vector<float>({1.0,\
    \ 2.0, 3.0, 4.0, 5.0}))) == (std::vector<float>({0.0, 0.25, 0.5, 0.75, 1.0})));\n\
    \    assert(candidate((std::vector<float>({2.0, 1.0, 5.0, 3.0, 4.0}))) == (std::vector<float>({0.25,\
    \ 0.0, 1.0, 0.5, 0.75})));\n    assert(candidate((std::vector<float>({12.0, 11.0,\
    \ 15.0, 13.0, 14.0}))) == (std::vector<float>({0.25, 0.0, 1.0, 0.5, 0.75})));\n\
    }\n"
  stdout: ''
  stderr: "tmpwq92_7nv: /tmp/tmpwq92_7nv.cpp:21: int main(): Assertion `candidate((std::vector<float>({2.0,\
    \ 49.9}))) == (std::vector<float>({0.0, 1.0}))' failed.\n"
  exit_code: -6
  status: Exception
