name: HumanEval_33_sort_third
language: cpp
prompt: "#include<assert.h>\n#include<bits/stdc++.h>\n// This function takes a list\
  \ l and returns a list l' such that\n// l' is identical to l in the indicies that\
  \ are not divisible by three, while its values at the indicies that are divisible\
  \ by three are equal\n// to the values of the corresponding indicies of l, but sorted.\n\
  // >>> sort_third([1, 2, 3])\n// [1, 2, 3]\n// >>> sort_third([5, 6, 3, 4, 8, 9,\
  \ 2])\n// [2, 6, 3, 4, 8, 9, 5]\nstd::vector<long> sort_third(std::vector<long>\
  \ l) {\n"
tests: "}\nint main() {\n    auto candidate = sort_third;\n    assert(candidate((std::vector<long>({5,\
  \ 6, 3, 4, 8, 9, 2}))) == (std::vector<long>({2, 6, 3, 4, 8, 9, 5})));\n    assert(candidate((std::vector<long>({5,\
  \ 8, 3, 4, 6, 9, 2}))) == (std::vector<long>({2, 8, 3, 4, 6, 9, 5})));\n    assert(candidate((std::vector<long>({5,\
  \ 6, 9, 4, 8, 3, 2}))) == (std::vector<long>({2, 6, 9, 4, 8, 3, 5})));\n    assert(candidate((std::vector<long>({5,\
  \ 6, 3, 4, 8, 9, 2, 1}))) == (std::vector<long>({2, 6, 3, 4, 8, 9, 5, 1})));\n}\n"
completions: []
stop_tokens:
- "\n}"
