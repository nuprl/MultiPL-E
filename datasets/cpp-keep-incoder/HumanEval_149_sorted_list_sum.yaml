name: HumanEval_149_sorted_list_sum
language: cpp
prompt: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that accepts\
  \ a list of strings as a parameter,\n// deletes the strings that have odd lengths\
  \ from it,\n// and returns the resulted list with a sorted order,\n// The list is\
  \ always a list of strings and never an array of numbers,\n// and it may contain\
  \ duplicates.\n// The order of the list should be ascending by length of each word,\
  \ and you\n// should return the list sorted by that rule.\n// If two words have\
  \ the same length, sort the list alphabetically.\n// The function should return\
  \ a list of strings in sorted order.\n// You may assume that all words will have\
  \ the same length.\n// For example:\n// assert list_sort([\"aa\", \"a\", \"aaa\"\
  ]) => [\"aa\"]\n// assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\"\
  , \"cd\"]\nstd::vector<std::string> sorted_list_sum(std::vector<std::string> lst)\
  \ {\n"
tests: "}\nint main() {\n    auto candidate = sorted_list_sum;\n    assert(candidate((std::vector<std::string>({\"\
  aa\", \"a\", \"aaa\"}))) == (std::vector<std::string>({\"aa\"})));\n    assert(candidate((std::vector<std::string>({\"\
  school\", \"AI\", \"asdf\", \"b\"}))) == (std::vector<std::string>({\"AI\", \"asdf\"\
  , \"school\"})));\n    assert(candidate((std::vector<std::string>({\"d\", \"b\"\
  , \"c\", \"a\"}))) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({\"\
  d\", \"dcba\", \"abcd\", \"a\"}))) == (std::vector<std::string>({\"abcd\", \"dcba\"\
  })));\n    assert(candidate((std::vector<std::string>({\"AI\", \"ai\", \"au\"})))\
  \ == (std::vector<std::string>({\"AI\", \"ai\", \"au\"})));\n    assert(candidate((std::vector<std::string>({\"\
  a\", \"b\", \"b\", \"c\", \"c\", \"a\"}))) == (std::vector<std::string>()));\n \
  \   assert(candidate((std::vector<std::string>({\"aaaa\", \"bbbb\", \"dd\", \"cc\"\
  }))) == (std::vector<std::string>({\"cc\", \"dd\", \"aaaa\", \"bbbb\"})));\n}\n"
completions: []
stop_tokens:
- "\n}"
