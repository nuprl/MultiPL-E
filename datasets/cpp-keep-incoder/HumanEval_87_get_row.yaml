name: HumanEval_87_get_row
language: cpp
prompt: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a 2 dimensional\
  \ data, as a nested lists,\n// which is similar to matrix, however, unlike matrices,\n\
  // each row may contain a different number of columns.\n// Given lst, and integer\
  \ x, find integers x in the list,\n// and return list of tuples, [(x1, y1), (x2,\
  \ y2) ...] such that\n// each tuple is a coordinate - (row, columns), starting with\
  \ 0.\n// Sort coordinates initially by rows in ascending order.\n// Also, sort coordinates\
  \ of the row by columns in descending order.\n// Examples:\n// get_row([\n// [1,2,3,4,5,6],\n\
  // [1,2,3,4,1,6],\n// [1,2,3,4,5,1]\n// ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5),\
  \ (2, 0)]\n// get_row([], 1) == []\n// get_row([[], [1], [1, 2, 3]], 3) == [(2,\
  \ 2)]\nstd::vector<std::tuple<long, long>> get_row(std::vector<std::vector<long>>\
  \ lst, long x) {\n"
tests: "}\nint main() {\n    auto candidate = get_row;\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1,\
  \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 1, 6}), std::vector<long>({1,\
  \ 2, 3, 4, 5, 1})})), (1)) == (std::vector<std::tuple<long, long>>({std::make_tuple(0,\
  \ 0), std::make_tuple(1, 4), std::make_tuple(1, 0), std::make_tuple(2, 5), std::make_tuple(2,\
  \ 0)})));\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1,\
  \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6}), std::vector<long>({1,\
  \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6}), std::vector<long>({1,\
  \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6})})), (2)) == (std::vector<std::tuple<long,\
  \ long>>({std::make_tuple(0, 1), std::make_tuple(1, 1), std::make_tuple(2, 1), std::make_tuple(3,\
  \ 1), std::make_tuple(4, 1), std::make_tuple(5, 1)})));\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1,\
  \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6}), std::vector<long>({1,\
  \ 1, 3, 4, 5, 6}), std::vector<long>({1, 2, 1, 4, 5, 6}), std::vector<long>({1,\
  \ 2, 3, 1, 5, 6}), std::vector<long>({1, 2, 3, 4, 1, 6}), std::vector<long>({1,\
  \ 2, 3, 4, 5, 1})})), (1)) == (std::vector<std::tuple<long, long>>({std::make_tuple(0,\
  \ 0), std::make_tuple(1, 0), std::make_tuple(2, 1), std::make_tuple(2, 0), std::make_tuple(3,\
  \ 2), std::make_tuple(3, 0), std::make_tuple(4, 3), std::make_tuple(4, 0), std::make_tuple(5,\
  \ 4), std::make_tuple(5, 0), std::make_tuple(6, 5), std::make_tuple(6, 0)})));\n\
  \    assert(candidate((std::vector<std::vector<long>>()), (1)) == (std::vector<std::tuple<long,\
  \ long>>()));\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1})})),\
  \ (2)) == (std::vector<std::tuple<long, long>>()));\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>(),\
  \ std::vector<long>({1}), std::vector<long>({1, 2, 3})})), (3)) == (std::vector<std::tuple<long,\
  \ long>>({std::make_tuple(2, 2)})));\n}\n"
completions: []
stop_tokens:
- "\n}"
