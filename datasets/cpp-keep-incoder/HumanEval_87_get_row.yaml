name: HumanEval_87_get_row
language: cpp
prompt: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a 2 dimensional\
  \ data, as a nested lists,\n// which is similar to matrix, however, unlike matrices,\n\
  // each row may contain a different number of columns.\n// Given lst, and integer\
  \ x, find integers x in the list,\n// and return list of tuples, [(x1, y1), (x2,\
  \ y2) ...] such that\n// each tuple is a coordinate - (row, columns), starting with\
  \ 0.\n// Sort coordinates initially by rows in ascending order.\n// Also, sort coordinates\
  \ of the row by columns in descending order.\n// Examples:\n// get_row([\n// [1,2,3,4,5,6],\n\
  // [1,2,3,4,1,6],\n// [1,2,3,4,5,1]\n// ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5),\
  \ (2, 0)]\n// get_row([], 1) == []\n// get_row([[], [1], [1, 2, 3]], 3) == [(2,\
  \ 2)]\nstd::vector<std::tuple<long, long>> get_row(std::vector<std::vector<long>>\
  \ lst, long x) {\n"
tests: "}\nint main() {\n    auto candidate = get_row;\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1,\
  \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 1, 6}), std::vector<long>({1,\
  \ 2, 3, 4, 5, 1})})), (1)) == (std::vector<std::tuple<long, long>>({std::make_tuple(0,\
  \ 0), std::make_tuple(1, 4), std::make_tuple(1, 0), std::make_tuple(2, 5), std::make_tuple(2,\
  \ 0)})));\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1,\
  \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6}), std::vector<long>({1,\
  \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6}), std::vector<long>({1,\
  \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6})})), (2)) == (std::vector<std::tuple<long,\
  \ long>>({std::make_tuple(0, 1), std::make_tuple(1, 1), std::make_tuple(2, 1), std::make_tuple(3,\
  \ 1), std::make_tuple(4, 1), std::make_tuple(5, 1)})));\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1,\
  \ 2, 3, 4, 5, 6}), std::vector<long>({1, 2, 3, 4, 5, 6}), std::vector<long>({1,\
  \ 1, 3, 4, 5, 6}), std::vector<long>({1, 2, 1, 4, 5, 6}), std::vector<long>({1,\
  \ 2, 3, 1, 5, 6}), std::vector<long>({1, 2, 3, 4, 1, 6}), std::vector<long>({1,\
  \ 2, 3, 4, 5, 1})})), (1)) == (std::vector<std::tuple<long, long>>({std::make_tuple(0,\
  \ 0), std::make_tuple(1, 0), std::make_tuple(2, 1), std::make_tuple(2, 0), std::make_tuple(3,\
  \ 2), std::make_tuple(3, 0), std::make_tuple(4, 3), std::make_tuple(4, 0), std::make_tuple(5,\
  \ 4), std::make_tuple(5, 0), std::make_tuple(6, 5), std::make_tuple(6, 0)})));\n\
  \    assert(candidate((std::vector<std::vector<long>>()), (1)) == (std::vector<std::tuple<long,\
  \ long>>()));\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>({1})})),\
  \ (2)) == (std::vector<std::tuple<long, long>>()));\n    assert(candidate((std::vector<std::vector<long>>({std::vector<long>(),\
  \ std::vector<long>({1}), std::vector<long>({1, 2, 3})})), (3)) == (std::vector<std::tuple<long,\
  \ long>>({std::make_tuple(2, 2)})));\n}\n"
completions: ["    std::vector<std::tuple<long, long>> res;\n    res.reserve(lst.size());\n\
    \    for (auto &row : lst) {\n        std::vector<std::tuple<long, long>> rowres;\n\
    \        rowres.reserve(row.size());\n        for (auto &el : row) {\n       \
    \     if (el == x) {\n                rowres.emplace_back(std::make_tuple(std::distance(row.begin(),\
    \ std::find(row.begin(), row.end(), x)), std::distance(row.begin(), std::find(row.begin(),\
    \ row.end(), x) + 1)));\n            }\n        }\n        res.emplace_back(std::make_tuple(std::distance(row.begin(),\
    \ std::find(row.begin(), row.end(), x)), std::distance(row.begin(), std::find(row.begin(),\
    \ row.end(), x) + 1)));\n    }\n    std::sort(res.begin(), res.end(), [](const\
    \ std::tuple<long, long> &a, const std::tuple<long, long> &b) { return std::get<0>(a)\
    \ > std::get<0>(b); });\n    std::sort(res.begin(), res.end(), [](const std::tuple<long,\
    \ long> &a, const std::tuple<long, long> &b) { return std::get<1>(a) > std::get<1>(b);\
    \ });\n    return res;", "    // Your code here\n    std::vector<std::tuple<long,\
    \ long>> res;\n    for(auto &row : lst){\n        for(auto &col : row){\n    \
    \        if(col == x){\n                res.push_back(std::make_tuple(row.size()\
    \ - 1, col.size() - 1));\n            }\n        }\n    }\n    std::sort(res.begin(),\
    \ res.end(), [](std::tuple<long, long> a, std::tuple<long, long> b){\n       \
    \ return std::get<0>(a) < std::get<0>(b);\n    });\n    std::sort(res.begin(),\
    \ res.end(), [](std::tuple<long, long> a, std::tuple<long, long> b){\n       \
    \ return std::get<1>(a) < std::get<1>(b);\n    });\n    return res;", "    //\
    \ Your code here\n    std::vector<std::tuple<long, long>> res;\n    for(auto &row\
    \ : lst){\n        for(auto &col : row){\n            if(col == x){\n        \
    \        res.push_back(std::make_tuple(row.size() - 1, col.size() - 1));\n   \
    \         }\n        }\n    }\n    std::sort(res.begin(), res.end(), [](auto &a,\
    \ auto &b){\n        return std::get<0>(a) < std::get<0>(b);\n    });\n    std::sort(res.begin(),\
    \ res.end(), [](auto &a, auto &b){\n        return std::get<1>(a) < std::get<1>(b);\n\
    \    });\n    return res;", "    std::vector<std::tuple<long, long>> res;\n  \
    \  res.reserve(lst.size());\n    for (auto &row : lst) {\n        std::vector<std::tuple<long,\
    \ long>> rowres;\n        rowres.reserve(row.size());\n        for (auto &elem\
    \ : row) {\n            if (elem == x) {\n                rowres.push_back({elem\
    \ - 1, elem + 1});\n            }\n        }\n        res.push_back(std::make_tuple(rowres.begin(),\
    \ rowres.end()));\n    }\n    std::sort(res.begin(), res.end(), [](const std::tuple<long,\
    \ long> &a, const std::tuple<long, long> &b) { return std::get<0>(a) < std::get<0>(b);\
    \ });\n    std::sort(res.begin(), res.end(), [](const std::tuple<long, long> &a,\
    \ const std::tuple<long, long> &b) { return std::get<1>(a) < std::get<1>(b); });\n\
    \    return res;", "    // Write your code here\n    std::vector<std::tuple<long,\
    \ long>> res;\n    for(auto &row:lst){\n        for(auto &val:row){\n        \
    \    if(val==x){\n                res.push_back(std::make_tuple(row.size(),row.size()-1));\n\
    \            }\n        }\n    }\n    std::sort(res.begin(),res.end(),[](std::tuple<long,\
    \ long> a, std::tuple<long, long> b){\n        return std::get<0>(a)>std::get<0>(b);\n\
    \    });\n    std::sort(res.begin(),res.end(),[](std::tuple<long, long> a, std::tuple<long,\
    \ long> b){\n        return std::get<1>(a)>std::get<1>(b);\n    });\n    return\
    \ res;", "    std::vector<std::tuple<long, long>> res;\n    std::vector<std::tuple<long,\
    \ long>> row;\n    std::vector<std::tuple<long, long>> col;\n    long row_index\
    \ = 0;\n    long col_index = 0;\n    long row_len = 0;\n    long col_len = 0;\n\
    \    for (auto &row : lst) {\n        row_len += row.size();\n    }\n    for (auto\
    \ &col : lst) {\n        col_len += col.size();\n    }\n    for (auto &row : lst)\
    \ {\n        for (auto &col : row) {\n            if (col == x) {\n          \
    \      res.push_back({row_index, col_index});\n            }\n        }\n    }\n\
    \    std::sort(res.begin(), res.end(), [](const std::tuple<long, long> &a, const\
    \ std::tuple<long, long> &b) {\n        return std::get<0>(a) < std::get<0>(b);\n\
    \    });\n    for (auto &res : res) {\n        std::sort(res.begin(), res.end(),\
    \ [](const std::tuple<long, long> &a, const std::tuple<long, long> &b) {\n   \
    \         return std::get<1>(a) < std::get<1>(b);\n        });\n    }\n    return\
    \ res;", "    std::vector<std::tuple<long, long>> res;\n    std::vector<long>\
    \ row;\n    std::vector<long> col;\n    long cnt = 0;\n    for (auto &row : lst)\
    \ {\n        row.clear();\n        col.clear();\n        for (auto &elem : row)\
    \ {\n            row.push_back(elem);\n            col.push_back(elem);\n    \
    \    }\n        std::sort(row.begin(), row.end());\n        std::sort(col.begin(),\
    \ col.end());\n        if (row.size() == col.size()) {\n            for (auto\
    \ &elem : row) {\n                if (elem == x) {\n                    res.push_back({cnt,\
    \ elem});\n                }\n                cnt++;\n            }\n        }\n\
    \    }\n    return res;", "    std::vector<std::tuple<long, long>> res;\n    std::vector<long>\
    \ row;\n    std::vector<long> col;\n    long cnt = 0;\n    for (auto &i : lst)\
    \ {\n        row.push_back(i[0]);\n        col.push_back(i.size() - 1);\n    \
    \    cnt += i[0];\n    }\n    row.push_back(x);\n    col.push_back(cnt);\n   \
    \ res.push_back(std::make_tuple(std::get<0>(row), std::get<1>(col)));\n    for\
    \ (auto &i : row) {\n        std::sort(col.begin(), col.end(), std::greater<long>());\n\
    \        std::sort(row.begin(), row.end(), std::greater<long>());\n        for\
    \ (auto &j : col) {\n            std::sort(res.begin(), res.end(), std::greater<std::tuple<long,\
    \ long>>());\n            if (j == i) {\n                res.push_back(std::make_tuple(i,\
    \ std::get<1>(col)));\n            }\n        }\n    }\n    return res;", "  \
    \  std::vector<std::tuple<long, long>> res;\n    for(auto &row : lst) {\n    \
    \    for(auto &col : row) {\n            if(col == x) {\n                res.push_back(std::make_tuple(row.size()\
    \ - 1, col.size() - 1));\n            }\n        }\n    }\n    std::sort(res.begin(),\
    \ res.end(), [](auto &a, auto &b) { return std::get<0>(a) < std::get<0>(b); });\n\
    \    std::sort(res.begin(), res.end(), [](auto &a, auto &b) { return std::get<1>(a)\
    \ < std::get<1>(b); });\n    return res;", "    std::vector<std::tuple<long, long>>\
    \ res;\n    std::vector<long> row;\n    std::vector<long> col;\n    for (auto\
    \ &i : lst) {\n        row.push_back(i[0]);\n        col.push_back(i.size() -\
    \ 1);\n    }\n    std::sort(row.begin(), row.end());\n    std::sort(col.begin(),\
    \ col.end());\n    for (long i = 0; i < row.size(); i++) {\n        if (row[i]\
    \ == x) {\n            std::sort(col.begin(), col.end());\n            for (long\
    \ j = 0; j < col.size(); j++) {\n                res.push_back(std::make_tuple(i,\
    \ col[j]));\n            }\n        }\n    }\n    return res;", "    // Your code\
    \ here\n    std::vector<std::tuple<long, long>> res;\n    for(auto &row : lst)\
    \ {\n        for(auto &el : row) {\n            if(el == x) {\n              \
    \  res.emplace_back(std::make_tuple(row.size() - 1, row.size() - 1));\n      \
    \      }\n        }\n    }\n    std::sort(res.begin(), res.end(), [](const std::tuple<long,\
    \ long> &a, const std::tuple<long, long> &b) -> bool {\n        return std::get<0>(a)\
    \ < std::get<0>(b);\n    });\n    std::sort(res.begin(), res.end(), [](const std::tuple<long,\
    \ long> &a, const std::tuple<long, long> &b) -> bool {\n        return std::get<1>(a)\
    \ < std::get<1>(b);\n    });\n    return res;", "    std::vector<std::tuple<long,\
    \ long>> res;\n    std::vector<long> row;\n    std::vector<long> col;\n    for\
    \ (auto &v : lst) {\n        row.push_back(v[0]);\n        col.push_back(v[1]);\n\
    \    }\n    std::sort(row.begin(), row.end());\n    std::sort(col.begin(), col.end());\n\
    \    for (long i = 0; i < row.size(); i++) {\n        if (row[i] == x) {\n   \
    \         res.push_back(std::make_tuple(i, col[i]));\n        }\n    }\n    return\
    \ res;", "    std::vector<std::tuple<long, long>> res;\n    for(auto &row : lst)\
    \ {\n        for(auto &el : row) {\n            if(el == x) {\n              \
    \  res.emplace_back(std::make_tuple(row.size(), row.size() - 1));\n          \
    \  }\n        }\n    }\n    std::sort(res.begin(), res.end(), [](auto &a, auto\
    \ &b) { return std::get<0>(a) > std::get<0>(b); });\n    std::sort(res.begin(),\
    \ res.end(), [](auto &a, auto &b) { return std::get<1>(a) > std::get<1>(b); });\n\
    \    return res;", "    std::vector<std::tuple<long, long>> res;\n    std::vector<long>\
    \ row;\n    std::vector<long> col;\n    for (auto &i : lst) {\n        row.push_back(i[0]);\n\
    \        col.push_back(i.size() - 1);\n    }\n    std::sort(row.begin(), row.end());\n\
    \    std::sort(col.begin(), col.end());\n    for (long i = 0; i < row.size();\
    \ i++) {\n        long j = col[i];\n        while (j > 0) {\n            if (row[j]\
    \ == x) {\n                res.push_back(std::make_tuple(i, j));\n           \
    \ }\n            j--;\n        }\n    }\n    return res;", "    std::vector<std::tuple<long,\
    \ long>> res;\n    std::vector<long> row;\n    std::vector<long> col;\n    long\
    \ row_index = 0;\n    long col_index = 0;\n    long row_size = lst.size();\n \
    \   long col_size = lst[0].size();\n    long row_max = std::max(row_size, col_size);\n\
    \    long col_max = std::max(row_size, col_size);\n    long row_min = std::min(row_size,\
    \ col_size);\n    long col_min = std::min(row_size, col_size);\n    long row_mid\
    \ = row_size / 2;\n    long col_mid = col_size / 2;\n    for (long i = 0; i <\
    \ row_size; i++) {\n        row.push_back(i);\n    }\n    for (long i = 0; i <\
    \ col_size; i++) {\n        col.push_back(i);\n    }\n    for (long i = 0; i <\
    \ row_max; i++) {\n        for (long j = 0; j < col_max; j++) {\n            if\
    \ (i == row_mid && j == col_mid && row_mid != col_mid) {\n                res.push_back(std::make_tuple(i,\
    \ j));\n            }\n            if (i == row_mid && j != col_mid && row_mid\
    \ != col_mid) {\n                res.push_back(std::make_tuple(i, j));\n     \
    \       }\n            if (i != row_mid && j == col_mid && row_mid != col_mid)\
    \ {\n                res.push_back(std::make_tuple(i, j));\n            }\n  \
    \          if (i != row_mid && j != col_mid && row_mid != col_mid) {\n       \
    \         res.push_back(std::make_tuple(i, j));\n            }\n            if\
    \ (i == row_mid && j == col_mid && row_mid == col_mid) {\n                res.push_back(std::make_tuple(i,\
    \ j));\n            }\n            if (i != row_mid && j == col_mid && row_mid\
    \ == col_mid) {\n                res.push_back(std::make_tuple(i, j));\n     \
    \       }\n            if (i != row_mid && j != col_mid && row_mid == col_mid)\
    \ {\n                res.push_back(std::make_tuple(i, j));\n            }\n  \
    \          if (i == row_mid && j != col_mid && row_mid != col_mid) {\n       \
    \         res.push_back(std::make_tuple(i, j));\n            }\n            if\
    \ (i != row_mid && j == col_mid && row_mid != col_mid) {\n                res.push_back(std::make_tuple(i,\
    \ j));\n            }\n            if (i != row_mid && j != col_mid && row_mid\
    \ != col_mid) {\n                res.push_back(std::make_tuple(i, j));\n     \
    \       }\n        }\n    }\n    std::sort(res.begin(), res.end(), [](const std::tuple<long,\
    \ long> &a, const std::tuple<long, long> &b) {\n        return std::get", "  \
    \  std::vector<std::tuple<long, long>> res;\n    for(auto &row : lst) {\n    \
    \    for(auto &val : row) {\n            if(val == x) {\n                res.emplace_back(std::make_tuple(row.size()\
    \ - 1, row.size() - 1));\n            }\n        }\n    }\n    std::sort(res.begin(),\
    \ res.end(), [](std::tuple<long, long> a, std::tuple<long, long> b) {\n      \
    \  return std::get<0>(a) < std::get<0>(b);\n    });\n    std::sort(res.begin(),\
    \ res.end(), [](std::tuple<long, long> a, std::tuple<long, long> b) {\n      \
    \  return std::get<1>(a) < std::get<1>(b);\n    });\n    return res;", "    //\
    \ Your code here\n    std::vector<std::tuple<long, long>> res;\n    for(auto &row\
    \ : lst) {\n        for(auto &el : row) {\n            if(el == x) {\n       \
    \         res.emplace_back(row.size() - 1, row.size() - 1);\n            }\n \
    \       }\n    }\n    std::sort(res.begin(), res.end(), [](const std::tuple<long,\
    \ long> &a, const std::tuple<long, long> &b) { return std::get<0>(a) < std::get<0>(b);\
    \ });\n    std::sort(res.begin(), res.end(), [](const std::tuple<long, long> &a,\
    \ const std::tuple<long, long> &b) { return std::get<1>(a) < std::get<1>(b); });\n\
    \    return res;", "    std::vector<std::tuple<long, long>> res;\n    for(auto\
    \ &row : lst) {\n        for(auto &val : row) {\n            if(val == x) {\n\
    \                res.push_back(std::make_tuple(row.size(), row.size() - 1));\n\
    \            }\n        }\n    }\n    std::sort(res.begin(), res.end(), [](const\
    \ std::tuple<long, long> &a, const std::tuple<long, long> &b) { return std::get<0>(a)\
    \ > std::get<0>(b); });\n    std::sort(res.begin(), res.end(), [](const std::tuple<long,\
    \ long> &a, const std::tuple<long, long> &b) { return std::get<1>(a) > std::get<1>(b);\
    \ });\n    return res;", "    std::vector<std::tuple<long, long>> res;\n    long\
    \ n = lst.size();\n    long m = lst[0].size();\n    long i = 0;\n    long j =\
    \ 0;\n    long k = 0;\n    long l = 0;\n    long m1 = m - 1;\n    long n1 = n\
    \ - 1;\n    while (i < n1 && j < m1) {\n        if (lst[i][j] == x) {\n      \
    \      std::tuple<long, long> t = std::make_tuple(i, j);\n            res.push_back(t);\n\
    \            i += 1;\n            j += 1;\n        } else if (lst[i][j] < x) {\n\
    \            i += 1;\n        } else {\n            j += 1;\n        }\n    }\n\
    \    while (i < n1) {\n        std::tuple<long, long> t = std::make_tuple(i, 0);\n\
    \        res.push_back(t);\n        i += 1;\n    }\n    while (j < m1) {\n   \
    \     std::tuple<long, long> t = std::make_tuple(0, j);\n        res.push_back(t);\n\
    \        j += 1;\n    }\n    return res;", "    // Write your code here\n    std::vector<std::tuple<long,\
    \ long>> res;\n    for(auto &row : lst){\n        for(auto &el : row){\n     \
    \       if(el == x){\n                res.emplace_back(std::make_tuple(row.size()\
    \ - 1, row.size() - 1));\n            }\n        }\n    }\n    std::sort(res.begin(),\
    \ res.end(), [](const std::tuple<long, long> &a, const std::tuple<long, long>\
    \ &b){\n        return std::get<0>(a) < std::get<0>(b);\n    });\n    std::sort(res.begin(),\
    \ res.end(), [](const std::tuple<long, long> &a, const std::tuple<long, long>\
    \ &b){\n        return std::get<1>(a) < std::get<1>(b);\n    });\n    return res;",
  "    std::vector<std::tuple<long, long>> res;\n    std::vector<long> row;\n    std::vector<long>\
    \ col;\n    std::vector<long> temp;\n    long cnt = 0;\n    for (auto &i : lst)\
    \ {\n        row.push_back(i.size());\n        col.push_back(i);\n    }\n    sort(row.begin(),\
    \ row.end());\n    sort(col.begin(), col.end());\n    for (long i = 0; i < row.size();\
    \ i++) {\n        for (long j = 0; j < col.size(); j++) {\n            if (row[i]\
    \ == col[j]) {\n                temp.push_back(col[j]);\n                cnt++;\n\
    \            }\n        }\n    }\n    for (long i = 0; i < temp.size(); i++) {\n\
    \        res.push_back(std::make_tuple(i, temp[i]));\n    }\n    return res;",
  "    // Write your code here\n    std::vector<std::tuple<long, long>> res;\n   \
    \ for(auto &row : lst){\n        for(auto &col : row){\n            if(col ==\
    \ x){\n                res.push_back(std::make_tuple(row.size() - 1, col.size()\
    \ - 1));\n            }\n        }\n    }\n    std::sort(res.begin(), res.end(),\
    \ [](auto &a, auto &b){return std::get<0>(a) < std::get<0>(b);});\n    std::sort(res.begin(),\
    \ res.end(), [](auto &a, auto &b){return std::get<1>(a) < std::get<1>(b);});\n\
    \    return res;", "    std::vector<std::tuple<long, long>> res;\n    std::vector<long>\
    \ row;\n    std::vector<long> col;\n    long cnt = 0;\n    for (auto &i : lst)\
    \ {\n        row.push_back(i.size());\n        col.push_back(cnt);\n        cnt\
    \ += i.size();\n    }\n    std::sort(row.begin(), row.end(), [](long a, long b)\
    \ { return a < b; });\n    std::sort(col.begin(), col.end(), [](long a, long b)\
    \ { return a < b; });\n    for (long i = 0; i < row.size(); i++) {\n        for\
    \ (long j = 0; j < col[i]; j++) {\n            if (row[i] == x && col[j] == x)\
    \ {\n                res.push_back({i, j});\n            }\n        }\n    }\n\
    \    return res;", "    // Write your code here\n    std::vector<std::tuple<long,\
    \ long>> res;\n    for(auto &row : lst) {\n        for(auto &col : row) {\n  \
    \          if(col == x) {\n                res.push_back(std::make_tuple(row.size()\
    \ - 1, col.size() - 1));\n            }\n        }\n    }\n    std::sort(res.begin(),\
    \ res.end(), [](auto &a, auto &b){return std::get<0>(a) < std::get<0>(b);});\n\
    \    std::sort(res.begin(), res.end(), [](auto &a, auto &b){return std::get<1>(a)\
    \ < std::get<1>(b);});\n    return res;", "    std::vector<std::tuple<long, long>>\
    \ res;\n    std::vector<long> row;\n    std::vector<long> col;\n    for (auto\
    \ &v : lst) {\n        row.push_back(v[0]);\n        col.push_back(v[1]);\n  \
    \  }\n    std::sort(row.begin(), row.end());\n    std::sort(col.begin(), col.end());\n\
    \    for (long i = 0; i < row.size(); i++) {\n        for (long j = 0; j < col.size();\
    \ j++) {\n            if (row[i] == x && col[j] == x) {\n                res.push_back(std::make_tuple(i,\
    \ j));\n            }\n        }\n    }\n    return res;", "    // Write your\
    \ code here\n    std::vector<std::tuple<long, long>> res;\n    for(auto &row :\
    \ lst) {\n        for(auto &val : row) {\n            if(val == x) {\n       \
    \         res.push_back({row.size(), row.size() - 1});\n            }\n      \
    \  }\n    }\n    std::sort(res.begin(), res.end(), [](const std::tuple<long, long>\
    \ &a, const std::tuple<long, long> &b) { return std::get<0>(a) < std::get<0>(b);\
    \ });\n    std::sort(res.begin(), res.end(), [](const std::tuple<long, long> &a,\
    \ const std::tuple<long, long> &b) { return std::get<1>(a) < std::get<1>(b); });\n\
    \    return res;", "    std::vector<std::tuple<long, long>> res;\n    for(auto\
    \ &row : lst) {\n        for(auto &val : row) {\n            if(val == x) {\n\
    \                res.emplace_back(std::make_tuple(row.size(), row.size() - 1));\n\
    \            }\n        }\n    }\n    std::sort(res.begin(), res.end(), [](auto\
    \ &a, auto &b) { return std::get<0>(a) < std::get<0>(b); });\n    std::sort(res.begin(),\
    \ res.end(), [](auto &a, auto &b) { return std::get<1>(a) < std::get<1>(b); });\n\
    \    return res;", "    // Write your code here\n    std::vector<std::tuple<long,\
    \ long>> res;\n    for(auto &row : lst) {\n        for(auto &col : row) {\n  \
    \          if(col == x) {\n                res.push_back({row, col});\n      \
    \      }\n        }\n    }\n    std::sort(res.begin(), res.end(), [](const std::tuple<long,\
    \ long> &a, const std::tuple<long, long> &b) -> bool {\n        return std::get<0>(a)\
    \ < std::get<0>(b);\n    });\n    std::sort(res.begin(), res.end(), [](const std::tuple<long,\
    \ long> &a, const std::tuple<long, long> &b) -> bool {\n        return std::get<1>(a)\
    \ > std::get<1>(b);\n    });\n    return res;", "    // Write your code here\n\
    \    std::vector<std::tuple<long, long>> res;\n    for(auto &row : lst){\n   \
    \     for(auto &col : row){\n            if(col == x){\n                res.emplace_back(std::make_tuple(row.size()\
    \ - 1, col.size() - 1));\n            }\n        }\n    }\n    std::sort(res.begin(),\
    \ res.end(), [](auto &a, auto &b){return std::get<0>(a) < std::get<0>(b);});\n\
    \    std::sort(res.begin(), res.end(), [](auto &a, auto &b){return std::get<1>(a)\
    \ < std::get<1>(b);});\n    return res;", "    // Write your code here\n    std::vector<std::tuple<long,\
    \ long>> res;\n    for(auto &row : lst){\n        for(auto &col : row){\n    \
    \        if(col == x){\n                res.emplace_back(std::make_tuple(row.size()\
    \ - 1, col.size() - 1));\n            }\n        }\n    }\n    std::sort(res.begin(),\
    \ res.end(), [](auto &a, auto &b){return std::get<0>(a) < std::get<0>(b);});\n\
    \    std::sort(res.begin(), res.end(), [](auto &a, auto &b){return std::get<1>(a)\
    \ > std::get<1>(b);});\n    return res;", "    std::vector<std::tuple<long, long>>\
    \ res;\n    for(auto &row : lst) {\n        for(auto &val : row) {\n         \
    \   if(val == x) {\n                res.push_back(std::make_tuple(row.size() -\
    \ 1, row.size() - 1));\n            }\n        }\n    }\n    std::sort(res.begin(),\
    \ res.end(), [](std::tuple<long, long> a, std::tuple<long, long> b) {\n      \
    \  return std::get<0>(a) < std::get<0>(b);\n    });\n    std::sort(res.begin(),\
    \ res.end(), [](std::tuple<long, long> a, std::tuple<long, long> b) {\n      \
    \  return std::get<1>(a) < std::get<1>(b);\n    });\n    return res;", "    std::vector<std::tuple<long,\
    \ long>> res;\n    long n = lst.size();\n    long m = lst[0].size();\n    long\
    \ i = 0;\n    long j = 0;\n    long k = 0;\n    long l = 0;\n    long m1 = n -\
    \ 1;\n    long m2 = m - 1;\n    while (i < m1 && j < m2) {\n        if (lst[i][j]\
    \ == x) {\n            res.push_back({i, j});\n            i += 1;\n         \
    \   j += 1;\n        } else if (lst[i][j] > x) {\n            i += 1;\n      \
    \  } else {\n            j += 1;\n        }\n    }\n    while (i < m1) {\n   \
    \     res.push_back({i, 0});\n        i += 1;\n    }\n    while (j < m2) {\n \
    \       res.push_back({0, j});\n        j += 1;\n    }\n    return res;", "  \
    \  std::vector<std::tuple<long, long>> res;\n    long row = 0;\n    long col =\
    \ 0;\n    for (auto &row : lst) {\n        long row_size = row.size();\n     \
    \   for (long i = 0; i < row_size; i++) {\n            if (row[i] == x) {\n  \
    \              res.push_back({row, col});\n                break;\n          \
    \  }\n        }\n        col += row_size;\n    }\n    std::sort(res.begin(), res.end(),\
    \ [](const std::tuple<long, long> &a, const std::tuple<long, long> &b) -> bool\
    \ {\n        return std::get<0>(a) < std::get<0>(b);\n    });\n    std::sort(res.begin(),\
    \ res.end(), [](const std::tuple<long, long> &a, const std::tuple<long, long>\
    \ &b) -> bool {\n        return std::get<1>(a) > std::get<1>(b);\n    });\n  \
    \  return res;", "    // Your code here\n    std::vector<std::tuple<long, long>>\
    \ res;\n    for(auto &row : lst) {\n        for(auto &el : row) {\n          \
    \  if(el == x) {\n                res.push_back(std::make_tuple(row.size() - 1,\
    \ row.size() - 1));\n            }\n        }\n    }\n    std::sort(res.begin(),\
    \ res.end(), [](const std::tuple<long, long> &a, const std::tuple<long, long>\
    \ &b) -> bool {\n        return std::get<0>(a) < std::get<0>(b);\n    });\n  \
    \  std::sort(res.begin(), res.end(), [](const std::tuple<long, long> &a, const\
    \ std::tuple<long, long> &b) -> bool {\n        return std::get<1>(a) < std::get<1>(b);\n\
    \    });\n    return res;", "    std::vector<std::tuple<long, long>> res;\n  \
    \  long n = lst.size();\n    long m = lst[0].size();\n    long i = 0;\n    long\
    \ j = 0;\n    long k = 0;\n    long l = 0;\n    long m1 = m;\n    long n1 = n;\n\
    \    long k1 = k;\n    long l1 = l;\n    long m2 = m;\n    long n2 = n;\n    long\
    \ k2 = k;\n    long l2 = l;\n    long m3 = m;\n    long n3 = n;\n    long k3 =\
    \ k;\n    long l3 = l;\n    long m4 = m;\n    long n4 = n;\n    long k4 = k;\n\
    \    long l4 = l;\n    long m5 = m;\n    long n5 = n;\n    long k5 = k;\n    long\
    \ l5 = l;\n    long m6 = m;\n    long n6 = n;\n    long k6 = k;\n    long l6 =\
    \ l;\n    long m7 = m;\n    long n7 = n;\n    long k7 = k;\n    long l7 = l;\n\
    \    long m8 = m;\n    long n8 = n;\n    long k8 = k;\n    long l8 = l;\n    long\
    \ m9 = m;\n    long n9 = n;\n    long k9 = k;\n    long l9 = l;\n    long m10\
    \ = m;\n    long n10 = n;\n    long k10 = k;\n    long l10 = l;\n    long m11\
    \ = m;\n    long n11 = n;\n    long k11 = k;\n    long l11 = l;\n    long m12\
    \ = m;\n    long n12 = n;\n    long k12 = k;\n    long l12 = l;\n    long m13\
    \ = m;\n    long n13 = n;\n    long k13 = k;\n    long l13 = l;\n    long m14\
    \ = m;\n    long n14 = n;\n    long k14 = k;\n    long l14 = l;\n    long m15\
    \ = m;\n    long n15 = n;\n    long k15 = k;\n    long l15 = l;\n    long m16\
    \ = m;\n    long n16 = n;\n    long k16 = k;\n    long l16 = l;\n    long m17\
    \ = m;\n    long n17 = n;\n    long k17 = k;\n    long l17 = l;\n    long m18\
    \ = m;\n    long n18 = n;\n    long k18 = k;\n    long l18 = l;\n    long m19\
    \ = m;\n    long n19", "    std::vector<std::tuple<long, long>> res;\n    std::vector<long>\
    \ row;\n    std::vector<long> col;\n    long row_index = 0;\n    long col_index\
    \ = 0;\n    for (auto &row : lst) {\n        row.push_back(x);\n        row_index++;\n\
    \    }\n    for (auto &row : lst) {\n        for (auto &col : row) {\n       \
    \     col.push_back(x);\n            col_index++;\n        }\n    }\n    std::sort(row.begin(),\
    \ row.end());\n    std::sort(col.begin(), col.end());\n    for (long i = 0; i\
    \ < row_index; i++) {\n        res.push_back(std::make_tuple(i, row[i]));\n  \
    \  }\n    for (long i = 0; i < col_index; i++) {\n        res.push_back(std::make_tuple(row[i],\
    \ i));\n    }\n    return res;", "    std::vector<std::tuple<long, long>> res;\n\
    \    for(auto &row : lst) {\n        for(auto &val : row) {\n            if(val\
    \ == x) {\n                res.push_back({row.size(), row.size() - 1});\n    \
    \        }\n        }\n    }\n    std::sort(res.begin(), res.end(), [](const std::tuple<long,\
    \ long> &a, const std::tuple<long, long> &b) -> bool {\n        return std::get<0>(a)\
    \ < std::get<0>(b);\n    });\n    std::sort(res.begin(), res.end(), [](const std::tuple<long,\
    \ long> &a, const std::tuple<long, long> &b) -> bool {\n        return std::get<1>(a)\
    \ < std::get<1>(b);\n    });\n    return res;", "    std::vector<std::tuple<long,\
    \ long>> res;\n    long row = 0;\n    long col = 0;\n    long cnt = 0;\n    long\
    \ cnt2 = 0;\n    long cnt3 = 0;\n    long cnt4 = 0;\n    long cnt5 = 0;\n    long\
    \ cnt6 = 0;\n    long cnt7 = 0;\n    long cnt8 = 0;\n    long cnt9 = 0;\n    long\
    \ cnt10 = 0;\n    long cnt11 = 0;\n    long cnt12 = 0;\n    long cnt13 = 0;\n\
    \    long cnt14 = 0;\n    long cnt15 = 0;\n    long cnt16 = 0;\n    long cnt17\
    \ = 0;\n    long cnt18 = 0;\n    long cnt19 = 0;\n    long cnt20 = 0;\n    long\
    \ cnt21 = 0;\n    long cnt22 = 0;\n    long cnt23 = 0;\n    long cnt24 = 0;\n\
    \    long cnt25 = 0;\n    long cnt26 = 0;\n    long cnt27 = 0;\n    long cnt28\
    \ = 0;\n    long cnt29 = 0;\n    long cnt30 = 0;\n    long cnt31 = 0;\n    long\
    \ cnt32 = 0;\n    long cnt33 = 0;\n    long cnt34 = 0;\n    long cnt35 = 0;\n\
    \    long cnt36 = 0;\n    long cnt37 = 0;\n    long cnt38 = 0;\n    long cnt39\
    \ = 0;\n    long cnt40 = 0;\n    long cnt41 = 0;\n    long cnt42 = 0;\n    long\
    \ cnt43 = 0;\n    long cnt44 = 0;\n    long cnt45 = 0;\n    long cnt46 = 0;\n\
    \    long cnt47 = 0;\n    long cnt48 = 0;\n    long cnt49 = 0;\n    long cnt50\
    \ = 0;\n    long cnt51 = 0;\n    long cnt52 = 0;\n    long cnt53 = 0;\n    long\
    \ cnt54 = 0;\n    long cnt55 = 0;\n    long cnt56 = 0;\n    long cnt57 = 0;\n\
    \    long cnt58 = 0;\n    long cnt59 = 0;\n    long cnt60 = 0;\n    long cnt61\
    \ = 0;\n    long cnt62 = 0;\n    long cnt63 = 0;\n    long cnt64 = 0;\n    long\
    \ cnt65 = 0;\n    long cnt66 = 0;\n    long cnt67 = 0;\n    long cnt68 = 0;\n\
    \    long cnt69 = 0;\n    long cnt70 = 0;\n    long cnt71 = 0;\n    long cnt72\
    \ = 0;\n    long cnt73 = 0;\n    long cnt74 = 0;\n    long cnt75 = 0;\n    long\
    \ cnt76 = 0;\n    long cnt77 = 0;\n    long cnt78 = 0;\n    long cnt79 = 0;\n\
    \    long cnt80 = 0;\n    long cnt81 = 0;\n    long cnt82 = 0;\n    long cnt83\
    \ = 0;", "    std::vector<std::tuple<long, long>> res;\n    if (lst.size() ==\
    \ 0) {\n        return res;\n    }\n    std::vector<std::tuple<long, long>> row;\n\
    \    std::vector<std::tuple<long, long>> row2;\n    for (auto &i : lst) {\n  \
    \      row.clear();\n        row2.clear();\n        for (auto &j : i) {\n    \
    \        if (j == x) {\n                row.emplace_back(j, 0);\n            \
    \    row2.emplace_back(j, 0);\n            } else {\n                row.emplace_back(j,\
    \ 0);\n                row2.emplace_back(j, 0);\n            }\n        }\n  \
    \      res.emplace_back(std::make_tuple(std::get<0>(row), std::get<1>(row)));\n\
    \        res.emplace_back(std::make_tuple(std::get<0>(row2), std::get<1>(row2)));\n\
    \    }\n    std::sort(res.begin(), res.end(), [](const std::tuple<long, long>\
    \ &a, const std::tuple<long, long> &b) {\n        return std::get<0>(a) < std::get<0>(b);\n\
    \    });\n    std::sort(res.begin(), res.end(), [](const std::tuple<long, long>\
    \ &a, const std::tuple<long, long> &b) {\n        return std::get<1>(a) < std::get<1>(b);\n\
    \    });\n    return res;", "    std::vector<std::tuple<long, long>> res;\n  \
    \  std::vector<long> row;\n    std::vector<long> col;\n    for (auto &i : lst)\
    \ {\n        row.push_back(i[0]);\n        col.push_back(i.size() - 1);\n    }\n\
    \    std::sort(row.begin(), row.end());\n    std::sort(col.begin(), col.end());\n\
    \    for (long i = 0; i < row.size(); i++) {\n        for (long j = 0; j < col.size();\
    \ j++) {\n            if (row[i] == x && col[j] == i) {\n                res.push_back(std::make_tuple(i,\
    \ j));\n            }\n        }\n    }\n    return res;", "    std::vector<std::tuple<long,\
    \ long>> res;\n    long n = lst.size();\n    long m = lst[0].size();\n    long\
    \ i = 0;\n    long j = 0;\n    long k = 0;\n    long l = 0;\n    long m1 = n -\
    \ 1;\n    long m2 = m - 1;\n    long m3 = n - 1;\n    long m4 = m - 1;\n    long\
    \ m5 = n - 1;\n    long m6 = m - 1;\n    long m7 = n - 1;\n    long m8 = m - 1;\n\
    \    long m9 = n - 1;\n    long m10 = m - 1;\n    long m11 = n - 1;\n    long\
    \ m12 = m - 1;\n    long m13 = n - 1;\n    long m14 = m - 1;\n    long m15 = n\
    \ - 1;\n    long m16 = m - 1;\n    long m17 = n - 1;\n    long m18 = m - 1;\n\
    \    long m19 = n - 1;\n    long m20 = m - 1;\n    long m21 = n - 1;\n    long\
    \ m22 = m - 1;\n    long m23 = n - 1;\n    long m24 = m - 1;\n    long m25 = n\
    \ - 1;\n    long m26 = m - 1;\n    long m27 = n - 1;\n    long m28 = m - 1;\n\
    \    long m29 = n - 1;\n    long m30 = m - 1;\n    long m31 = n - 1;\n    long\
    \ m32 = m - 1;\n    long m33 = n - 1;\n    long m34 = m - 1;\n    long m35 = n\
    \ - 1;\n    long m36 = m - 1;\n    long m37 = n - 1;\n    long m38 = m - 1;\n\
    \    long m39 = n - 1;\n    long m40 = m - 1;\n    long m41 = n - 1;\n    long\
    \ m42 = m - 1;\n    long m43 = n - 1;\n    long m44 = m - 1;\n    long m45 = n\
    \ - 1;\n    long m46 = m - 1;\n    long m47 = n - 1;\n    long m48 = m - 1;\n\
    \    long m49 = n - 1;\n    long m50 = m - 1;\n    long m51 = n - 1;\n    long\
    \ m52 = m - 1;\n    long m53 = n - 1;\n    long m54 = m - 1;\n    long m55 = n\
    \ - 1;\n    long m56 = m - 1;\n    long m57 = n - 1;\n    long m58 = m - 1;\n\
    \    long m59 = n - 1;\n    long m60 = m - 1;\n    ", "    std::vector<std::tuple<long,\
    \ long>> res;\n    long row = 0;\n    long col = 0;\n    for (auto &i : lst) {\n\
    \        row = std::max(row, i[0]);\n        col = std::max(col, i[1]);\n    }\n\
    \    for (auto &i : lst) {\n        if (i[0] == row) {\n            res.push_back({row,\
    \ col});\n        }\n    }\n    std::sort(res.begin(), res.end(), [](std::tuple<long,\
    \ long> a, std::tuple<long, long> b) {\n        return std::get<0>(a) > std::get<0>(b);\n\
    \    });\n    std::sort(res.begin(), res.end(), [](std::tuple<long, long> a, std::tuple<long,\
    \ long> b) {\n        return std::get<1>(a) > std::get<1>(b);\n    });\n    return\
    \ res;", "    std::vector<std::tuple<long, long>> res;\n    std::vector<std::vector<long>>\
    \ row;\n    std::vector<std::vector<long>> col;\n    long n = lst.size();\n  \
    \  long m = lst[0].size();\n    long cnt = 0;\n    for (long i = 0; i < n; i++)\
    \ {\n        row.push_back(std::vector<long>());\n        col.push_back(std::vector<long>());\n\
    \        for (long j = 0; j < m; j++) {\n            if (lst[i][j] == x) {\n \
    \               row.back().push_back(j);\n                col.back().push_back(i);\n\
    \                cnt++;\n            }\n        }\n    }\n    for (long i = 0;\
    \ i < n; i++) {\n        for (long j = 0; j < m; j++) {\n            if (row.back().size()\
    \ > col.back().size()) {\n                res.push_back(std::make_tuple(i, j));\n\
    \            }\n        }\n    }\n    std::sort(res.begin(), res.end(), [](std::tuple<long,\
    \ long> a, std::tuple<long, long> b) {\n        return std::get<0>(a) < std::get<0>(b);\n\
    \    });\n    for (long i = 0; i < n; i++) {\n        std::sort(res.begin() +\
    \ i, res.end(), [](std::tuple<long, long> a, std::tuple<long, long> b) {\n   \
    \         return std::get<1>(a) < std::get<1>(b);\n        });\n    }\n    return\
    \ res;", "    std::vector<std::tuple<long, long>> res;\n    for(auto &row : lst)\
    \ {\n        for(auto &el : row) {\n            if(el == x) {\n              \
    \  res.push_back(std::make_tuple(row.size() - 1, row.size() - 1));\n         \
    \   }\n        }\n    }\n    std::sort(res.begin(), res.end(), [](std::tuple<long,\
    \ long> a, std::tuple<long, long> b) {\n        return std::get<0>(a) < std::get<0>(b);\n\
    \    });\n    std::sort(res.begin(), res.end(), [](std::tuple<long, long> a, std::tuple<long,\
    \ long> b) {\n        return std::get<1>(a) > std::get<1>(b);\n    });\n    return\
    \ res;", "    std::vector<std::tuple<long, long>> res;\n    std::vector<long>\
    \ row;\n    std::vector<long> col;\n    std::vector<long> row_col;\n    std::vector<long>\
    \ row_col2;\n    std::vector<long> row_col3;\n    std::vector<long> row_col4;\n\
    \    std::vector<long> row_col5;\n    std::vector<long> row_col6;\n    std::vector<long>\
    \ row_col7;\n    std::vector<long> row_col8;\n    std::vector<long> row_col9;\n\
    \    std::vector<long> row_col10;\n    std::vector<long> row_col11;\n    std::vector<long>\
    \ row_col12;\n    std::vector<long> row_col13;\n    std::vector<long> row_col14;\n\
    \    std::vector<long> row_col15;\n    std::vector<long> row_col16;\n    std::vector<long>\
    \ row_col17;\n    std::vector<long> row_col18;\n    std::vector<long> row_col19;\n\
    \    std::vector<long> row_col20;\n    std::vector<long> row_col21;\n    std::vector<long>\
    \ row_col22;\n    std::vector<long> row_col23;\n    std::vector<long> row_col24;\n\
    \    std::vector<long> row_col25;\n    std::vector<long> row_col26;\n    std::vector<long>\
    \ row_col27;\n    std::vector<long> row_col28;\n    std::vector<long> row_col29;\n\
    \    std::vector<long> row_col30;\n    std::vector<long> row_col31;\n    std::vector<long>\
    \ row_col32;\n    std::vector<long> row_col33;\n    std::vector<long> row_col34;\n\
    \    std::vector<long> row_col35;\n    std::vector<long> row_col36;\n    std::vector<long>\
    \ row_col37;\n    std::vector<long> row_col38;\n    std::vector<long> row_col39;\n\
    \    std::vector<long> row_col40;\n    std::vector<long> row_col41;\n    std::vector<long>\
    \ row_col42;\n    std::vector<long> row_col43;\n    std::vector<long> row_col44;\n\
    \    std::vector<long> row_col45;\n    std::vector<long> row_col46;\n    std::vector<long>\
    \ row_col47;\n    std::vector<long> row_col48;\n    std::vector<long> row_col49;\n\
    \    std::vector<long> row_col50;\n    std::vector<long> row_col51;\n    std::vector<long>\
    \ row_col52;\n    std::vector<long> row_col53;\n    std::vector<long> row_col54;\n\
    \    std::vector<long> row_col55;\n    std::vector<long> row_col56;\n    std::vector<long",
  "    std::vector<std::tuple<long, long>> res;\n    std::vector<long> row;\n    std::vector<long>\
    \ col;\n    for (auto &i : lst) {\n        row.push_back(i[0]);\n        col.push_back(i.size()\
    \ - 1);\n    }\n    std::sort(row.begin(), row.end());\n    std::sort(col.begin(),\
    \ col.end());\n    for (long i = 0; i < row.size(); i++) {\n        long j = row[i];\n\
    \        long k = col[i];\n        if (j == k) {\n            continue;\n    \
    \    }\n        for (long l = 0; l < j; l++) {\n            for (long m = k; m\
    \ < j; m++) {\n                if (lst[j][m] == x) {\n                    res.push_back({i,\
    \ j});\n                }\n            }\n        }\n    }\n    return res;",
  "    std::vector<std::tuple<long, long>> res;\n    std::vector<std::tuple<long,\
    \ long>> temp;\n    long row = 0;\n    long col = 0;\n    long cnt = 0;\n    for\
    \ (auto &i : lst) {\n        cnt += i.size();\n    }\n    for (auto &i : lst)\
    \ {\n        for (auto &j : i) {\n            if (j == x) {\n                res.push_back(std::make_tuple(row,\
    \ col));\n                temp.push_back(std::make_tuple(row, col));\n       \
    \     }\n        }\n    }\n    std::sort(temp.begin(), temp.end(), [](std::tuple<long,\
    \ long> a, std::tuple<long, long> b) {\n        return std::get<0>(a) > std::get<0>(b);\n\
    \    });\n    std::sort(res.begin(), res.end(), [](std::tuple<long, long> a, std::tuple<long,\
    \ long> b) {\n        return std::get<0>(a) > std::get<0>(b);\n    });\n    for\
    \ (auto &i : temp) {\n        res.push_back(i);\n    }\n    return res;", "  \
    \  std::vector<std::tuple<long, long>> res;\n    std::vector<long> row;\n    std::vector<long>\
    \ col;\n    for (auto &v : lst) {\n        row.push_back(v[0]);\n        col.push_back(v[1]);\n\
    \    }\n    std::sort(row.begin(), row.end());\n    std::sort(col.begin(), col.end());\n\
    \    for (long i = 0; i < row.size(); i++) {\n        long j = row[i];\n     \
    \   long k = col[i];\n        if (j == k) {\n            continue;\n        }\n\
    \        for (long m = j; m < k; m++) {\n            std::tuple<long, long> t\
    \ = std::make_tuple(i, m);\n            res.push_back(t);\n        }\n    }\n\
    \    return res;", "    std::vector<std::tuple<long, long>> res;\n    long row\
    \ = 0;\n    long col = 0;\n    for (auto &row : lst) {\n        auto it = std::find(row.begin(),\
    \ row.end(), x);\n        if (it != row.end()) {\n            col = std::distance(row.begin(),\
    \ it);\n            res.emplace_back(row, col);\n        }\n    }\n    std::sort(res.begin(),\
    \ res.end(), [](const std::tuple<long, long> &a, const std::tuple<long, long>\
    \ &b) {\n        return std::get<0>(a) < std::get<0>(b);\n    });\n    std::sort(res.begin(),\
    \ res.end(), [](const std::tuple<long, long> &a, const std::tuple<long, long>\
    \ &b) {\n        return std::get<1>(a) > std::get<1>(b);\n    });\n    return\
    \ res;", "    std::vector<std::tuple<long, long>> res;\n    long n = lst.size();\n\
    \    long m = lst[0].size();\n    long i = 0;\n    long j = 0;\n    long k = 0;\n\
    \    long l = 0;\n    long m1 = m;\n    long n1 = n;\n    long xx = x;\n    long\
    \ yy = x;\n    long zz = x;\n    long aa = x;\n    long bb = x;\n    long cc =\
    \ x;\n    long dd = x;\n    long ee = x;\n    long ff = x;\n    long gg = x;\n\
    \    long hh = x;\n    long ii = x;\n    long jj = x;\n    long kk = x;\n    long\
    \ ll = x;\n    long mm = x;\n    long nn = x;\n    long oo = x;\n    long pp =\
    \ x;\n    long qq = x;\n    long rr = x;\n    long ss = x;\n    long tt = x;\n\
    \    long uu = x;\n    long vv = x;\n    long ww = x;\n    long xx = x;\n    long\
    \ yy = x;\n    long zz = x;\n    long aa = x;\n    long bb = x;\n    long cc =\
    \ x;\n    long dd = x;\n    long ee = x;\n    long ff = x;\n    long gg = x;\n\
    \    long hh = x;\n    long ii = x;\n    long jj = x;\n    long kk = x;\n    long\
    \ ll = x;\n    long mm = x;\n    long nn = x;\n    long oo = x;\n    long pp =\
    \ x;\n    long qq = x;\n    long rr = x;\n    long ss = x;\n    long tt = x;\n\
    \    long uu = x;\n    long vv = x;\n    long ww = x;\n    long xx = x;\n    long\
    \ yy = x;\n    long zz = x;\n    long aa = x;\n    long bb = x;\n    long cc =\
    \ x;\n    long dd = x;\n    long ee = x;\n    long ff = x;\n    long gg = x;\n\
    \    long hh = x;\n    long ii = x;\n    long jj = x;\n    long kk = x;\n    long\
    \ ll = x;\n    long mm = x;\n    long nn = x;\n    long oo = x;\n    long pp =\
    \ x;\n    long qq = x;\n    long rr = x;\n    long ss = x;\n    long tt = x;\n\
    \    long uu = x;\n    long ", "    std::vector<std::tuple<long, long>> res;\n\
    \    std::vector<std::tuple<long, long>> temp;\n    long n = lst.size();\n   \
    \ long m = lst[0].size();\n    long count = 0;\n    for (long i = 0; i < n; i++)\
    \ {\n        long j = i;\n        while (j > 0 && lst[j][j - 1] == lst[j][j])\
    \ {\n            j--;\n        }\n        if (j == -1) {\n            temp.push_back(std::make_tuple(i,\
    \ 0));\n            count++;\n        } else {\n            temp.push_back(std::make_tuple(i,\
    \ j));\n            count++;\n        }\n    }\n    std::sort(temp.begin(), temp.end(),\
    \ [](std::tuple<long, long> a, std::tuple<long, long> b) {\n        return std::get<0>(a)\
    \ < std::get<0>(b);\n    });\n    for (long i = 0; i < count; i++) {\n       \
    \ res.push_back(temp[i]);\n    }\n    std::sort(res.begin(), res.end(), [](std::tuple<long,\
    \ long> a, std::tuple<long, long> b) {\n        return std::get<1>(a) > std::get<1>(b);\n\
    \    });\n    return res;", "    std::vector<std::tuple<long, long>> res;\n  \
    \  std::vector<long> row;\n    std::vector<long> col;\n    std::vector<long> rowCol;\n\
    \    std::vector<long> rowColCol;\n    std::vector<long> rowColColCol;\n    std::vector<long>\
    \ rowColColColCol;\n    std::vector<long> rowColColColColCol;\n    std::vector<long>\
    \ rowColColColColColCol;\n    std::vector<long> rowColColColColColColCol;\n  \
    \  std::vector<long> rowColColColColColColColCol;\n    std::vector<long> rowColColColColColColColColCol;\n\
    \    std::vector<long> rowColColColColColColColColColCol;\n    std::vector<long>\
    \ rowColColColColColColColColColColCol;\n    std::vector<long> rowColColColColColColColColColColColCol;\n\
    \    std::vector<long> rowColColColColColColColColColColColColCol;\n    std::vector<long>\
    \ rowColColColColColColColColColColColColColCol;\n    std::vector<long> rowColColColColColColColColColColColColColColCol;\n\
    \    std::vector<long> rowColColColColColColColColColColColColColColCol;\n   \
    \ std::vector<long> rowColColColColColColColColColColColColColColColCol;\n   \
    \ std::vector<long> rowColColColColColColColColColColColColColColColColCol;\n\
    \    std::vector<long> rowColColColColColColColColColColColColColColColColColCol;\n\
    \    std::vector<long> rowColColColColColColColColColColColColColColColColColCol;\n\
    \    std::vector<long> rowColColColColColColColColColColColColColColColColColCol;\n\
    \    std::vector<long> rowColColColColColColColColColColColColColColColColColColCol;\n\
    \    std::vector<long> rowColColColColColColColColColColColColColColColColColColColColCol;\n\
    \    std::vector<long> rowColColColColColColColColColColColColColColColColColColColColColCol;\n\
    \    std::vector<long> rowColColColColColColColColColColColColColColColColColColColColCol;\n\
    \    std::vector<long> rowColColCol", "    std::vector<std::tuple<long, long>>\
    \ res;\n    std::vector<long> row;\n    std::vector<long> col;\n    long row_index\
    \ = 0;\n    long col_index = 0;\n    for (auto &row : lst) {\n        row.clear();\n\
    \        col.clear();\n        for (auto &elem : row) {\n            row.push_back(elem);\n\
    \            col.push_back(elem);\n        }\n        std::sort(row.begin(), row.end());\n\
    \        std::sort(col.begin(), col.end());\n        if (row_index == 0)\n   \
    \         std::sort(row.begin(), row.end());\n        if (col_index == 0)\n  \
    \          std::sort(col.begin(), col.end());\n        if (row_index == col.size()\
    \ && row_index < row.size() && col_index == row.size()) {\n            std::sort(row.begin(),\
    \ row.end());\n            std::sort(col.begin(), col.end());\n        }\n   \
    \     if (row_index == row.size() && col_index == col.size()) {\n            std::sort(row.begin(),\
    \ row.end());\n            std::sort(col.begin(), col.end());\n        }\n   \
    \     if (row_index == row.size() && col_index < row.size()) {\n            std::sort(row.begin(),\
    \ row.end());\n            std::sort(col.begin(), col.end());\n        }\n   \
    \     if (row_index < row.size() && col_index == row.size()) {\n            std::sort(row.begin(),\
    \ row.end());\n            std::sort(col.begin(), col.end());\n        }\n   \
    \     if (row_index < row.size() && col_index < row.size()) {\n            std::sort(row.begin(),\
    \ row.end());\n            std::sort(col.begin(), col.end());\n        }\n   \
    \     if (row_index == row.size() && col_index == row.size()) {\n            std::sort(row.begin(),\
    \ row.end());\n            std::sort(col.begin(), col.end());\n        }\n   \
    \     if (row_index < row.size() && col_index < row.size()) {\n            std::sort(row.begin(),\
    \ row.end());\n            std::sort(col.begin(), col.end());\n        }\n   \
    \     if (row_index == row.size() && col_index == row.size()) {\n            std::sort(row.begin(),\
    \ row.end());\n            std::sort(col.begin(), col.end());\n        }\n   \
    \     if (row_index < row.size() && col_index == row.size()) {\n            std::sort(row.begin(),\
    \ row.end());\n            std::sort(col.begin(), col.end());\n        }\n   \
    \     if (row_index == row.size() && col_index < row.size()) {\n            std::sort(row.begin(),\
    \ row.end());\n            std::sort(col.begin(), col.end());\n        }\n   \
    \     if (row_index < row.size() && col_index == row.size()) {\n            std::sort(row.begin(), ",
  "    std::vector<std::tuple<long, long>> res;\n    for(auto &row : lst) {\n    \
    \    for(auto &elem : row) {\n            if(elem == x) {\n                res.push_back(std::make_tuple(row.size()\
    \ - 1, row.size() - 1));\n            }\n        }\n    }\n    std::sort(res.begin(),\
    \ res.end(), [](const std::tuple<long, long> &a, const std::tuple<long, long>\
    \ &b) {\n        return std::get<0>(a) < std::get<0>(b);\n    });\n    std::sort(res.begin(),\
    \ res.end(), [](const std::tuple<long, long> &a, const std::tuple<long, long>\
    \ &b) {\n        return std::get<1>(a) < std::get<1>(b);\n    });\n    return\
    \ res;", "    std::vector<std::tuple<long, long>> res;\n    for(auto &row : lst)\
    \ {\n        for(auto &el : row) {\n            if(el == x) {\n              \
    \  res.emplace_back(std::make_tuple(row.size() - 1, row.size() - 1));\n      \
    \      }\n        }\n    }\n    std::sort(res.begin(), res.end(), [](std::tuple<long,\
    \ long> a, std::tuple<long, long> b) {\n        return std::get<0>(a) < std::get<0>(b);\n\
    \    });\n    std::sort(res.begin(), res.end(), [](std::tuple<long, long> a, std::tuple<long,\
    \ long> b) {\n        return std::get<1>(a) < std::get<1>(b);\n    });\n    return\
    \ res;", "    std::vector<std::tuple<long, long>> res;\n    long n = lst.size();\n\
    \    long m = lst[0].size();\n    long cnt = 0;\n    for (long i = 0; i < n; i++)\
    \ {\n        long cnt2 = 0;\n        for (long j = 0; j < m; j++) {\n        \
    \    if (lst[i][j] == x) {\n                res.push_back({i, j});\n         \
    \       cnt2++;\n            }\n        }\n        if (cnt2 == m) {\n        \
    \    cnt++;\n        }\n    }\n    if (cnt == 0) {\n        res.clear();\n   \
    \ }\n    std::sort(res.begin(), res.end(), [](auto a, auto b) {\n        return\
    \ std::get<0>(a) < std::get<0>(b);\n    });\n    for (auto &it : res) {\n    \
    \    std::sort(std::get<1>(it), res.end(), [](auto a, auto b) {\n            return\
    \ std::get<1>(a) < std::get<1>(b);\n        });\n    }\n    return res;", "  \
    \  std::vector<std::tuple<long, long>> res;\n    std::vector<long> row;\n    std::vector<long>\
    \ col;\n    for (auto &i : lst) {\n        row.push_back(i[0]);\n        col.push_back(i.size()\
    \ - 1);\n    }\n    std::sort(row.begin(), row.end(), [](long a, long b) { return\
    \ a < b; });\n    std::sort(col.begin(), col.end(), [](long a, long b) { return\
    \ b < a; });\n    for (long i = 0; i < row.size(); i++) {\n        for (long j\
    \ = 0; j < col.size(); j++) {\n            if (row[i] == x && col[j] == x) {\n\
    \                res.push_back(std::make_tuple(i, j));\n            }\n      \
    \  }\n    }\n    return res;", "    std::vector<std::tuple<long, long>> res;\n\
    \    long row = 0;\n    long col = 0;\n    for (auto &row : lst) {\n        col\
    \ = row.size() - 1;\n        while (col >= 0 && row[col] == x) {\n           \
    \ col--;\n        }\n        if (col >= 0) {\n            res.emplace_back(std::make_tuple(row,\
    \ col));\n        }\n        row++;\n    }\n    std::sort(res.begin(), res.end(),\
    \ [](auto &a, auto &b) { return std::get<0>(a) < std::get<0>(b); });\n    std::sort(res.begin(),\
    \ res.end(), [](auto &a, auto &b) { return std::get<1>(a) < std::get<1>(b); });\n\
    \    return res;", "    std::vector<std::tuple<long, long>> res;\n    if (lst.empty())\n\
    \        return res;\n    std::vector<std::tuple<long, long>> row;\n    std::vector<std::tuple<long,\
    \ long>> row2;\n    for (auto &row : lst) {\n        row.clear();\n        row2.clear();\n\
    \        for (auto &elem : row) {\n            row.push_back(elem);\n        }\n\
    \        for (auto &elem : row2) {\n            row2.push_back(elem);\n      \
    \  }\n    }\n    std::sort(row.begin(), row.end(), [](auto &a, auto &b) { return\
    \ std::get<0>(a) < std::get<0>(b); });\n    std::sort(row2.begin(), row2.end(),\
    \ [](auto &a, auto &b) { return std::get<1>(a) < std::get<1>(b); });\n    for\
    \ (auto &row : row) {\n        std::sort(row2.begin(), row2.end(), [](auto &a,\
    \ auto &b) { return std::get<0>(a) < std::get<0>(b); });\n        if (std::get<0>(row)\
    \ == x)\n            res.push_back(std::make_tuple(std::get<0>(row), std::get<1>(row)));\n\
    \    }\n    return res;", "    std::vector<std::tuple<long, long>> res;\n    long\
    \ row = 0;\n    long col = 0;\n    long cnt = 0;\n    for (auto &row : lst) {\n\
    \        cnt += row.size();\n    }\n    for (auto &row : lst) {\n        auto\
    \ it = std::find(row.begin(), row.end(), x);\n        if (it != row.end()) {\n\
    \            col = std::distance(row.begin(), it);\n            res.push_back({row,\
    \ col});\n        }\n    }\n    std::sort(res.begin(), res.end(), [](const std::tuple<long,\
    \ long> &a, const std::tuple<long, long> &b) {\n        return std::get<0>(a)\
    \ < std::get<0>(b);\n    });\n    std::sort(res.begin(), res.end(), [](const std::tuple<long,\
    \ long> &a, const std::tuple<long, long> &b) {\n        return std::get<1>(a)\
    \ < std::get<1>(b);\n    });\n    return res;", "    // Your code here\n    std::vector<std::tuple<long,\
    \ long>> res;\n    for(auto &row : lst) {\n        for(auto &ele : row) {\n  \
    \          if(ele == x) {\n                res.push_back({row.size(), ele});\n\
    \            }\n        }\n    }\n    std::sort(res.begin(), res.end(), [](const\
    \ std::tuple<long, long> &a, const std::tuple<long, long> &b) -> bool {\n    \
    \    return std::get<0>(a) < std::get<0>(b);\n    });\n    std::sort(res.begin(),\
    \ res.end(), [](const std::tuple<long, long> &a, const std::tuple<long, long>\
    \ &b) -> bool {\n        return std::get<1>(a) < std::get<1>(b);\n    });\n  \
    \  return res;", "    std::vector<std::tuple<long, long>> res;\n    std::vector<long>\
    \ row;\n    std::vector<long> col;\n    for (auto &i : lst) {\n        row.push_back(i[0]);\n\
    \        col.push_back(i.size() - 1);\n    }\n    std::sort(row.begin(), row.end());\n\
    \    std::sort(col.begin(), col.end());\n    for (long i = 0; i < row.size();\
    \ i++) {\n        for (long j = 0; j < col.size(); j++) {\n            if (row[i]\
    \ == x && col[j] == i) {\n                res.push_back(std::make_tuple(i, j));\n\
    \            }\n        }\n    }\n    return res;", "    // Write your code here\n\
    \    std::vector<std::tuple<long, long>> res;\n    for(auto &row : lst){\n   \
    \     for(auto &el : row){\n            if(el == x){\n                res.emplace_back(row.size()\
    \ - 1, row.size() - 1);\n            }\n        }\n    }\n    std::sort(res.begin(),\
    \ res.end(), [](const std::tuple<long, long> &a, const std::tuple<long, long>\
    \ &b){\n        return std::get<0>(a) < std::get<0>(b);\n    });\n    std::sort(res.begin(),\
    \ res.end(), [](const std::tuple<long, long> &a, const std::tuple<long, long>\
    \ &b){\n        return std::get<1>(a) < std::get<1>(b);\n    });\n    return res;",
  "    std::vector<std::tuple<long, long>> res;\n    for(auto &row : lst) {\n    \
    \    for(auto &col : row) {\n            if(col == x) {\n                res.emplace_back(std::make_tuple(row.size()\
    \ - 1, col.size() - 1));\n            }\n        }\n    }\n    std::sort(res.begin(),\
    \ res.end(), [](const std::tuple<long, long> &a, const std::tuple<long, long>\
    \ &b) {\n        return std::get<0>(a) < std::get<0>(b);\n    });\n    std::sort(res.begin(),\
    \ res.end(), [](const std::tuple<long, long> &a, const std::tuple<long, long>\
    \ &b) {\n        return std::get<1>(a) < std::get<1>(b);\n    });\n    return\
    \ res;", "    std::vector<std::tuple<long, long>> res;\n    for(auto &row : lst)\
    \ {\n        for(auto &el : row) {\n            if(el == x) {\n              \
    \  res.push_back(std::make_tuple(row.size() - 1, row.size() - 1));\n         \
    \   }\n        }\n    }\n    std::sort(res.begin(), res.end(), [](const std::tuple<long,\
    \ long> &a, const std::tuple<long, long> &b) {\n        return std::get<0>(a)\
    \ < std::get<0>(b);\n    });\n    std::sort(res.begin(), res.end(), [](const std::tuple<long,\
    \ long> &a, const std::tuple<long, long> &b) {\n        return std::get<1>(a)\
    \ < std::get<1>(b);\n    });\n    return res;", "    // Write your code here\n\
    \    std::vector<std::tuple<long, long>> res;\n    for(auto &row : lst) {\n  \
    \      for(auto &elem : row) {\n            if(elem == x) {\n                res.push_back(std::make_tuple(row.size(),\
    \ row.size() - 1));\n            }\n        }\n    }\n    std::sort(res.begin(),\
    \ res.end(), [](const std::tuple<long, long> &a, const std::tuple<long, long>\
    \ &b) -> bool {\n        return std::get<0>(a) < std::get<0>(b);\n    });\n  \
    \  std::sort(res.begin(), res.end(), [](const std::tuple<long, long> &a, const\
    \ std::tuple<long, long> &b) -> bool {\n        return std::get<1>(a) > std::get<1>(b);\n\
    \    });\n    return res;", "    std::vector<std::tuple<long, long>> res;\n  \
    \  std::vector<long> row;\n    std::vector<long> col;\n    for (auto &i : lst)\
    \ {\n        row.push_back(i.size());\n        col.push_back(0);\n    }\n    std::sort(row.begin(),\
    \ row.end(), [](long a, long b) { return a < b; });\n    std::sort(col.begin(),\
    \ col.end(), [](long a, long b) { return b < a; });\n    for (long i = 0; i <\
    \ row.size(); i++) {\n        for (long j = 0; j < row[i]; j++) {\n          \
    \  if (col[j] == x) {\n                res.push_back(std::make_tuple(i, j));\n\
    \            }\n        }\n    }\n    return res;", "    // Write your code here\n\
    \    std::vector<std::tuple<long, long>> res;\n    for(auto &row : lst){\n   \
    \     for(auto &el : row){\n            if(el == x){\n                res.push_back(std::make_tuple(row.size()\
    \ - 1, row.size() - 1));\n            }\n        }\n    }\n    std::sort(res.begin(),\
    \ res.end(), [](std::tuple<long, long> a, std::tuple<long, long> b){\n       \
    \ return std::get<0>(a) < std::get<0>(b);\n    });\n    std::sort(res.begin(),\
    \ res.end(), [](std::tuple<long, long> a, std::tuple<long, long> b){\n       \
    \ return std::get<1>(a) < std::get<1>(b);\n    });\n    return res;", "    //\
    \ Write your code here\n    std::vector<std::tuple<long, long>> res;\n    for(auto\
    \ &row : lst){\n        for(auto &ele : row){\n            if(ele == x){\n   \
    \             res.push_back(std::make_tuple(row.size() - 1, row.size() - 1));\n\
    \            }\n        }\n    }\n    std::sort(res.begin(), res.end(), [](std::tuple<long,\
    \ long> a, std::tuple<long, long> b){\n        return std::get<0>(a) < std::get<0>(b);\n\
    \    });\n    std::sort(res.begin(), res.end(), [](std::tuple<long, long> a, std::tuple<long,\
    \ long> b){\n        return std::get<1>(a) < std::get<1>(b);\n    });\n    return\
    \ res;", "    std::vector<std::tuple<long, long>> res;\n    std::vector<long>\
    \ row;\n    std::vector<long> col;\n    long row_index = 0;\n    long col_index\
    \ = 0;\n    for (auto &row : lst) {\n        row.clear();\n        col.clear();\n\
    \        for (auto &col : row) {\n            if (col == x) {\n              \
    \  res.emplace_back(row_index, col_index);\n            }\n            col.push_back(x);\n\
    \        }\n        row_index++;\n    }\n    std::sort(res.begin(), res.end(),\
    \ [](const std::tuple<long, long> &a, const std::tuple<long, long> &b) {\n   \
    \     return std::get<0>(a) < std::get<0>(b);\n    });\n    for (auto &row : res)\
    \ {\n        std::sort(row.begin(), row.end(), [](const long &a, const long &b)\
    \ {\n            return std::get<1>(a) < std::get<1>(b);\n        });\n    }\n\
    \    return res;", "    std::vector<std::tuple<long, long>> res;\n    std::vector<long>\
    \ row;\n    std::vector<long> col;\n    long row_index = 0;\n    long col_index\
    \ = 0;\n    long row_size = lst.size();\n    long col_size = lst[0].size();\n\
    \    for (long i = 0; i < row_size; i++) {\n        row.push_back(i);\n    }\n\
    \    for (long i = 0; i < row_size; i++) {\n        col.push_back(i);\n    }\n\
    \    for (long i = 0; i < row_size; i++) {\n        for (long j = 0; j < col_size;\
    \ j++) {\n            if (lst[i][j] == x) {\n                res.push_back(std::make_tuple(i,\
    \ j));\n            }\n        }\n    }\n    std::sort(res.begin(), res.end(),\
    \ [](std::tuple<long, long> a, std::tuple<long, long> b) {\n        return std::get<0>(a)\
    \ < std::get<0>(b);\n    });\n    std::sort(res.begin(), res.end(), [](std::tuple<long,\
    \ long> a, std::tuple<long, long> b) {\n        return std::get<1>(a) > std::get<1>(b);\n\
    \    });\n    for (long i = 0; i < row_size; i++) {\n        std::sort(res.begin()\
    \ + i, res.end(), [](std::tuple<long, long> a, std::tuple<long, long> b) {\n \
    \           return std::get<0>(a) < std::get<0>(b);\n        });\n        std::sort(res.begin()\
    \ + i, res.end(), [](std::tuple<long, long> a, std::tuple<long, long> b) {\n \
    \           return std::get<1>(a) > std::get<1>(b);\n        });\n    }\n    return\
    \ res;", "    std::vector<std::tuple<long, long>> res;\n    if (lst.size() ==\
    \ 0) {\n        return res;\n    }\n    std::vector<std::tuple<long, long>> row;\n\
    \    for (auto &v : lst) {\n        row.emplace_back(std::make_tuple(v.size(),\
    \ v.size()));\n    }\n    std::sort(row.begin(), row.end(), [](const std::tuple<long,\
    \ long> &a, const std::tuple<long, long> &b) {\n        return std::get<0>(a)\
    \ < std::get<0>(b);\n    });\n    std::sort(row.begin(), row.end(), [](const std::tuple<long,\
    \ long> &a, const std::tuple<long, long> &b) {\n        return std::get<1>(a)\
    \ < std::get<1>(b);\n    });\n    for (auto &v : row) {\n        auto it = std::find(v.begin(),\
    \ v.end(), x);\n        if (it != v.end()) {\n            res.emplace_back(std::make_tuple(std::get<0>(*it),\
    \ std::get<1>(*it)));\n        }\n    }\n    return res;", "    // Write your\
    \ code here\n    std::vector<std::tuple<long, long>> res;\n    for(auto &row :\
    \ lst){\n        for(auto &col : row){\n            if(col == x){\n          \
    \      res.emplace_back(std::make_tuple(row.size() - 1, col.size() - 1));\n  \
    \          }\n        }\n    }\n    std::sort(res.begin(), res.end(), [](auto\
    \ &a, auto &b){return std::get<0>(a) < std::get<0>(b);});\n    std::sort(res.begin(),\
    \ res.end(), [](auto &a, auto &b){return std::get<1>(a) > std::get<1>(b);});\n\
    \    return res;", "    std::vector<std::tuple<long, long>> res;\n    long row\
    \ = 0;\n    long col = 0;\n    long cnt = 0;\n    for(auto &row : lst) {\n   \
    \     for(auto &col : row) {\n            if(cnt == x) {\n                res.push_back(std::make_tuple(row,\
    \ col));\n            }\n            cnt++;\n        }\n    }\n    std::sort(res.begin(),\
    \ res.end(), [](std::tuple<long, long> a, std::tuple<long, long> b) { return std::get<0>(a)\
    \ < std::get<0>(b); });\n    std::sort(res.begin(), res.end(), [](std::tuple<long,\
    \ long> a, std::tuple<long, long> b) { return std::get<1>(a) > std::get<1>(b);\
    \ });\n    return res;", "    std::vector<std::tuple<long, long>> res;\n    long\
    \ n = lst.size();\n    long m = lst[0].size();\n    long i = 0;\n    long j =\
    \ 0;\n    long k = 0;\n    long l = 0;\n    long m1 = m - 1;\n    long m2 = m\
    \ - 2;\n    long m3 = m - 3;\n    long m4 = m - 4;\n    long m5 = m - 5;\n   \
    \ long m6 = m - 6;\n    long m7 = m - 7;\n    long m8 = m - 8;\n    long m9 =\
    \ m - 9;\n    long m10 = m - 10;\n    long m11 = m - 11;\n    long m12 = m - 12;\n\
    \    long m13 = m - 13;\n    long m14 = m - 14;\n    long m15 = m - 15;\n    long\
    \ m16 = m - 16;\n    long m17 = m - 17;\n    long m18 = m - 18;\n    long m19\
    \ = m - 19;\n    long m20 = m - 20;\n    long m21 = m / 2;\n    long m22 = m /\
    \ 2;\n    long m23 = m / 2;\n    long m24 = m / 2;\n    long m25 = m / 2;\n  \
    \  long m26 = m / 2;\n    long m27 = m / 2;\n    long m28 = m / 2;\n    long m29\
    \ = m / 2;\n    long m30 = m / 2;\n    long m31 = m / 2;\n    long m32 = m / 2;\n\
    \    long m33 = m / 2;\n    long m34 = m / 2;\n    long m35 = m / 2;\n    long\
    \ m36 = m / 2;\n    long m37 = m / 2;\n    long m38 = m / 2;\n    long m39 = m\
    \ / 2;\n    long m40 = m / 2;\n    long m41 = m / 2;\n    long m42 = m / 2;\n\
    \    long m43 = m / 2;\n    long m44 = m / 2;\n    long m45 = m / 2;\n    long\
    \ m46 = m / 2;\n    long m47 = m / 2;\n    long m48 = m / 2;\n    long m49 = m\
    \ / 2;\n    long m50 = m / 2;\n    long m51 = m / 2;\n    long m52 = m / 2;\n\
    \    long m53 = m / 2;\n    long m54 = m / 2;\n    long m55 = m / 2;\n    long\
    \ m", "    // Write your code here\n    std::vector<std::tuple<long, long>> res;\n\
    \    for(auto &row : lst) {\n        for(auto &col : row) {\n            if(col\
    \ == x) {\n                res.emplace_back(std::make_tuple(row.size() - 1, col.size()\
    \ - 1));\n            }\n        }\n    }\n    std::sort(res.begin(), res.end(),\
    \ [](auto &a, auto &b) { return std::get<0>(a) < std::get<0>(b); });\n    std::sort(res.begin(),\
    \ res.end(), [](auto &a, auto &b) { return std::get<1>(a) < std::get<1>(b); });\n\
    \    return res;", "    std::vector<std::tuple<long, long>> res;\n    std::vector<long>\
    \ row;\n    std::vector<long> col;\n    long row_index = 0;\n    long col_index\
    \ = 0;\n    for (auto &row : lst) {\n        row.clear();\n        col.clear();\n\
    \        for (auto &el : row) {\n            if (el == x) {\n                row.push_back(row_index);\n\
    \                col.push_back(col_index);\n            }\n        }\n       \
    \ row_index++;\n        col_index--;\n        res.push_back(std::make_tuple(std::move(row),\
    \ std::move(col)));\n    }\n    std::sort(res.begin(), res.end(), [](const std::tuple<long,\
    \ long> &a, const std::tuple<long, long> &b) {\n        return std::get<0>(a)\
    \ < std::get<0>(b);\n    });\n    std::sort(res.begin(), res.end(), [](const std::tuple<long,\
    \ long> &a, const std::tuple<long, long> &b) {\n        return std::get<1>(a)\
    \ < std::get<1>(b);\n    });\n    return res;", "    // Your code here\n    std::vector<std::tuple<long,\
    \ long>> res;\n    for(auto &row : lst) {\n        for(auto &col : row) {\n  \
    \          if(col == x) {\n                res.push_back(std::make_tuple(row.size(),\
    \ col.size()));\n            }\n        }\n    }\n    std::sort(res.begin(), res.end(),\
    \ [](auto &a, auto &b) { return std::get<0>(a) > std::get<0>(b); });\n    std::sort(res.begin(),\
    \ res.end(), [](auto &a, auto &b) { return std::get<1>(a) > std::get<1>(b); });\n\
    \    return res;", "    // Your code here\n    std::vector<std::tuple<long, long>>\
    \ res;\n    for(auto &row : lst) {\n        for(auto &val : row) {\n         \
    \   if(val == x) {\n                res.push_back(std::make_tuple(row.size() -\
    \ 1, row.size() - 1));\n            }\n        }\n    }\n    std::sort(res.begin(),\
    \ res.end(), [](const std::tuple<long, long> &a, const std::tuple<long, long>\
    \ &b) { return std::get<0>(a) < std::get<0>(b); });\n    std::sort(res.begin(),\
    \ res.end(), [](const std::tuple<long, long> &a, const std::tuple<long, long>\
    \ &b) { return std::get<1>(a) > std::get<1>(b); });\n    return res;", "    std::vector<std::tuple<long,\
    \ long>> res;\n    for(auto &row : lst) {\n        for(auto &val : row) {\n  \
    \          if(val == x) {\n                res.emplace_back(row.size() - 1, row.size()\
    \ - 1);\n            }\n        }\n    }\n    std::sort(res.begin(), res.end(),\
    \ [](auto &a, auto &b) { return std::get<0>(a) < std::get<0>(b); });\n    std::sort(res.begin(),\
    \ res.end(), [](auto &a, auto &b) { return std::get<1>(a) < std::get<1>(b); });\n\
    \    return res;", "    std::vector<std::tuple<long, long>> res;\n    for(auto\
    \ &row : lst) {\n        for(auto &col : row) {\n            if(col == x) {\n\
    \                res.emplace_back(std::make_tuple(row.size() - 1, col.size() -\
    \ 1));\n            }\n        }\n    }\n    std::sort(res.begin(), res.end(),\
    \ [](const std::tuple<long, long> &a, const std::tuple<long, long> &b) {\n   \
    \     return std::get<0>(a) < std::get<0>(b);\n    });\n    std::sort(res.begin(),\
    \ res.end(), [](const std::tuple<long, long> &a, const std::tuple<long, long>\
    \ &b) {\n        return std::get<1>(a) < std::get<1>(b);\n    });\n    return\
    \ res;", "    std::vector<std::tuple<long, long>> res;\n    for(auto &row : lst)\
    \ {\n        for(auto &col : row) {\n            if(col == x) {\n            \
    \    res.push_back(std::make_tuple(row.size() - 1, col.size() - 1));\n       \
    \     }\n        }\n    }\n    std::sort(res.begin(), res.end(), [](const std::tuple<long,\
    \ long> &a, const std::tuple<long, long> &b) -> bool {\n        return std::get<0>(a)\
    \ < std::get<0>(b);\n    });\n    std::sort(res.begin(), res.end(), [](const std::tuple<long,\
    \ long> &a, const std::tuple<long, long> &b) -> bool {\n        return std::get<1>(a)\
    \ < std::get<1>(b);\n    });\n    return res;", "    std::vector<std::tuple<long,\
    \ long>> res;\n    for(auto &row : lst) {\n        for(auto &el : row) {\n   \
    \         if(el == x) {\n                res.push_back(std::make_tuple(row.size(),\
    \ row.size() - 1));\n            }\n        }\n    }\n    std::sort(res.begin(),\
    \ res.end(), [](const std::tuple<long, long> &a, const std::tuple<long, long>\
    \ &b) {\n        return std::get<0>(a) < std::get<0>(b);\n    });\n    std::sort(res.begin(),\
    \ res.end(), [](const std::tuple<long, long> &a, const std::tuple<long, long>\
    \ &b) {\n        return std::get<1>(a) > std::get<1>(b);\n    });\n    return\
    \ res;", "    std::vector<std::tuple<long, long>> res;\n    res.reserve(lst.size());\n\
    \    for (auto &row : lst) {\n        std::vector<std::tuple<long, long>> rowres;\n\
    \        rowres.reserve(row.size());\n        for (auto &el : row) {\n       \
    \     if (el == x) {\n                rowres.emplace_back(std::make_tuple(std::distance(row.begin(),\
    \ std::find(row.begin(), row.end(), x)), std::distance(row.begin(), std::find(row.begin(),\
    \ row.end(), x) + 1)));\n            }\n        }\n        res.emplace_back(std::make_tuple(std::distance(row.begin(),\
    \ std::find(row.begin(), row.end(), x)), std::distance(row.begin(), std::find(row.begin(),\
    \ row.end(), x) + 1)));\n    }\n    std::sort(res.begin(), res.end(), [](const\
    \ std::tuple<long, long> &a, const std::tuple<long, long> &b) {\n        return\
    \ std::get<0>(a) < std::get<0>(b);\n    });\n    std::sort(res.begin(), res.end(),\
    \ [](const std::tuple<long, long> &a, const std::tuple<long, long> &b) {\n   \
    \     return std::get<1>(a) < std::get<1>(b);\n    });\n    return res;", "  \
    \  std::vector<std::tuple<long, long>> res;\n    std::vector<long> row;\n    std::vector<long>\
    \ col;\n    long cnt = 0;\n    for (auto &v : lst) {\n        row.push_back(v[0]);\n\
    \        col.push_back(v[1]);\n        cnt += v[0];\n    }\n    sort(row.begin(),\
    \ row.end());\n    sort(col.begin(), col.end());\n    for (long i = 0; i < row.size();\
    \ i++) {\n        long j = row[i];\n        long k = col[i];\n        for (long\
    \ l = 0; l < cnt; l++) {\n            if (j == k) {\n                res.push_back({i,\
    \ j});\n                break;\n            }\n            j++;\n            k--;\n\
    \        }\n    }\n    return res;", "    // Your code here\n    std::vector<std::tuple<long,\
    \ long>> res;\n    for(auto &row : lst) {\n        for(auto &el : row) {\n   \
    \         if(el == x) {\n                res.push_back(std::make_tuple(row.size()\
    \ - 1, row.size() - 1));\n            }\n        }\n    }\n    std::sort(res.begin(),\
    \ res.end(), [](const std::tuple<long, long> &a, const std::tuple<long, long>\
    \ &b) -> bool {\n        return std::get<0>(a) < std::get<0>(b);\n    });\n  \
    \  std::sort(res.begin(), res.end(), [](const std::tuple<long, long> &a, const\
    \ std::tuple<long, long> &b) -> bool {\n        return std::get<1>(a) < std::get<1>(b);\n\
    \    });\n    return res;", "    std::vector<std::tuple<long, long>> res;\n  \
    \  std::vector<std::tuple<long, long>> row;\n    std::vector<std::tuple<long,\
    \ long>> col;\n    std::vector<std::tuple<long, long>> temp;\n    long row_index\
    \ = 0;\n    long col_index = 0;\n    for (auto &row : lst) {\n        row.clear();\n\
    \        temp.clear();\n        for (auto &col : row) {\n            col.clear();\n\
    \            temp.push_back(std::make_tuple(col_index, row_index));\n        \
    \    col_index++;\n        }\n        row.swap(temp);\n        row_index++;\n\
    \    }\n    for (auto &row : lst) {\n        row.clear();\n        temp.clear();\n\
    \        for (auto &col : row) {\n            col.clear();\n            temp.push_back(std::make_tuple(col_index,\
    \ row_index));\n            col_index++;\n        }\n        row.swap(temp);\n\
    \        row_index++;\n    }\n    for (auto &row : lst) {\n        row.clear();\n\
    \        temp.clear();\n        for (auto &col : row) {\n            col.clear();\n\
    \            temp.push_back(std::make_tuple(col_index, row_index));\n        \
    \    col_index++;\n        }\n        row.swap(temp);\n        row_index++;\n\
    \    }\n    for (auto &row : lst) {\n        row.clear();\n        temp.clear();\n\
    \        for (auto &col : row) {\n            col.clear();\n            temp.push_back(std::make_tuple(col_index,\
    \ row_index));\n            col_index++;\n        }\n        row.swap(temp);\n\
    \        row_index++;\n    }\n    for (auto &row : lst) {\n        row.clear();\n\
    \        temp.clear();\n        for (auto &col : row) {\n            col.clear();\n\
    \            temp.push_back(std::make_tuple(col_index, row_index));\n        \
    \    col_index++;\n        }\n        row.swap(temp);\n        row_index++;\n\
    \    }\n    for (auto &row : lst) {\n        row.clear();\n        temp.clear();\n\
    \        for (auto &col : row) {\n            col.clear();\n            temp.push_back(std::make_tuple(col_index,\
    \ row_index));\n            col_index++;\n        }\n        row.swap(temp);\n\
    \        row_index++;\n    }\n    for (auto &row : lst) {\n        row.clear();\n\
    \        temp.clear();\n        for (auto &col : row) {\n            col.clear();\n\
    \            temp.push_back(std::make_tuple(col_index, row_index));\n        \
    \    col_index++;\n        }\n        row.swap(temp);\n        row_index++;\n\
    \    }\n    for (auto &row : lst) {\n        row.clear();\n        temp.clear();\n\
    \        for (auto &col : row) {\n            col.clear();\n            temp.push_back(std::make_tuple(col_index, ",
  "    std::vector<std::tuple<long, long>> res;\n    std::vector<std::vector<long>>\
    \ temp;\n    long row = 0;\n    long col = 0;\n    for (auto &i : lst) {\n   \
    \     row = i;\n        temp.push_back(i);\n    }\n    for (auto &i : temp) {\n\
    \        for (auto &j : i) {\n            if (j == x) {\n                res.push_back(std::make_tuple(row,\
    \ col));\n            }\n        }\n    }\n    std::sort(res.begin(), res.end(),\
    \ [](std::tuple<long, long> a, std::tuple<long, long> b) {\n        return std::get<0>(a)\
    \ < std::get<0>(b);\n    });\n    std::sort(res.begin(), res.end(), [](std::tuple<long,\
    \ long> a, std::tuple<long, long> b) {\n        return std::get<1>(a) < std::get<1>(b);\n\
    \    });\n    return res;", "    std::vector<std::tuple<long, long>> res;\n  \
    \  for(auto &row : lst) {\n        for(auto &elem : row) {\n            if(elem\
    \ == x) {\n                res.push_back(std::make_tuple(row.size() - 1, row.size()\
    \ - 1));\n            }\n        }\n    }\n    std::sort(res.begin(), res.end(),\
    \ [](const std::tuple<long, long> &a, const std::tuple<long, long> &b) { return\
    \ std::get<0>(a) < std::get<0>(b); });\n    std::sort(res.begin(), res.end(),\
    \ [](const std::tuple<long, long> &a, const std::tuple<long, long> &b) { return\
    \ std::get<1>(a) < std::get<1>(b); });\n    return res;", "    std::vector<std::tuple<long,\
    \ long>> res;\n    std::vector<std::tuple<long, long>> row;\n    std::vector<std::tuple<long,\
    \ long>> col;\n    for (auto &i : lst) {\n        row.push_back(i);\n    }\n \
    \   for (auto &i : row) {\n        col.push_back(i);\n    }\n    for (auto &i\
    \ : col) {\n        std::sort(i.begin(), i.end(), [](long a, long b) { return\
    \ a > b; });\n        std::sort(i.rbegin(), i.rend(), [](long a, long b) { return\
    \ b > a; });\n    }\n    for (auto &i : col) {\n        for (auto &j : i) {\n\
    \            if (j == x) {\n                res.push_back(std::make_tuple(i, j));\n\
    \            }\n        }\n    }\n    return res;", "    // Your code here\n \
    \   std::vector<std::tuple<long, long>> res;\n    for(auto &row : lst){\n    \
    \    for(auto &ele : row){\n            if(ele == x){\n                res.push_back(std::make_tuple(row.size()\
    \ - 1, row.size() - 1));\n            }\n        }\n    }\n    std::sort(res.begin(),\
    \ res.end(), [](std::tuple<long, long> a, std::tuple<long, long> b){\n       \
    \ return std::get<0>(a) > std::get<0>(b);\n    });\n    std::sort(res.begin(),\
    \ res.end(), [](std::tuple<long, long> a, std::tuple<long, long> b){\n       \
    \ return std::get<1>(a) > std::get<1>(b);\n    });\n    return res;", "    //\
    \ Your code here\n    std::vector<std::tuple<long, long>> res;\n    for(auto &v\
    \ : lst) {\n        for(auto &v2 : v) {\n            if(v2 == x) {\n         \
    \       res.emplace_back(v);\n            }\n        }\n    }\n    std::sort(res.begin(),\
    \ res.end(), [](const std::tuple<long, long> &a, const std::tuple<long, long>\
    \ &b) -> bool {\n        return std::get<0>(a) < std::get<0>(b);\n    });\n  \
    \  std::sort(res.begin(), res.end(), [](const std::tuple<long, long> &a, const\
    \ std::tuple<long, long> &b) -> bool {\n        return std::get<1>(a) < std::get<1>(b);\n\
    \    });\n    return res;", "    std::vector<std::tuple<long, long>> res;\n  \
    \  std::vector<long> row;\n    std::vector<long> col;\n    std::vector<long> temp;\n\
    \    long cnt = 0;\n    for (auto &i : lst) {\n        row.push_back(i[0]);\n\
    \        col.push_back(i.size() - 1);\n    }\n    sort(row.begin(), row.end());\n\
    \    sort(col.begin(), col.end());\n    for (long i = 0; i < row.size(); i++)\
    \ {\n        for (long j = 0; j < col.size(); j++) {\n            if (row[i] ==\
    \ x && col[j] == x) {\n                res.push_back({i, j});\n              \
    \  cnt++;\n            }\n        }\n    }\n    if (cnt == 0) {\n        res.push_back(std::make_tuple(0,\
    \ 0));\n    }\n    return res;", "    std::vector<std::tuple<long, long>> res;\n\
    \    if (lst.size() == 0) {\n        return res;\n    }\n    std::vector<std::tuple<long,\
    \ long>> row;\n    for (auto &i : lst) {\n        row.push_back(i);\n    }\n \
    \   row.sort([](auto &a, auto &b) { return std::get<0>(a) < std::get<0>(b); });\n\
    \    row.sort([](auto &a, auto &b) { return std::get<1>(a) > std::get<1>(b); });\n\
    \    for (auto &i : row) {\n        if (std::get<0>(i) == x) {\n            res.push_back(std::make_tuple(std::get<0>(i),\
    \ std::get<1>(i)));\n        }\n    }\n    return res;", "    std::vector<std::tuple<long,\
    \ long>> res;\n    for(auto &row : lst) {\n        for(auto &el : row) {\n   \
    \         if(el == x) {\n                res.push_back(std::make_tuple(row.size(),\
    \ row.size() - 1));\n            }\n        }\n    }\n    std::sort(res.begin(),\
    \ res.end(), [](const std::tuple<long, long> &a, const std::tuple<long, long>\
    \ &b) { return std::get<0>(a) < std::get<0>(b); });\n    std::sort(res.begin(),\
    \ res.end(), [](const std::tuple<long, long> &a, const std::tuple<long, long>\
    \ &b) { return std::get<1>(a) < std::get<1>(b); });\n    return res;", "    std::vector<std::tuple<long,\
    \ long>> res;\n    std::vector<long> row;\n    std::vector<long> col;\n    long\
    \ row_index = 0;\n    long col_index = 0;\n    for (auto &row : lst) {\n     \
    \   row.clear();\n        col.clear();\n        for (auto &el : row) {\n     \
    \       if (el == x) {\n                row.push_back(row_index);\n          \
    \      col.push_back(col_index);\n            }\n        }\n        row_index++;\n\
    \        col_index++;\n    }\n    std::sort(row.begin(), row.end());\n    std::sort(col.begin(),\
    \ col.end());\n    for (auto &el : row) {\n        for (auto &el2 : col) {\n \
    \           if (el == el2) {\n                res.push_back(std::make_tuple(el,\
    \ el2));\n            }\n        }\n    }\n    return res;", "    std::vector<std::tuple<long,\
    \ long>> res;\n    for(auto &row : lst) {\n        for(auto &val : row) {\n  \
    \          if(val == x) {\n                res.push_back(std::make_tuple(row.size()\
    \ - 1, row.size() - 1));\n            }\n        }\n    }\n    std::sort(res.begin(),\
    \ res.end(), [](auto &a, auto &b) {\n        return std::get<0>(a) > std::get<0>(b);\n\
    \    });\n    std::sort(res.begin(), res.end(), [](auto &a, auto &b) {\n     \
    \   return std::get<1>(a) > std::get<1>(b);\n    });\n    return res;", "    std::vector<std::tuple<long,\
    \ long>> res;\n    for(auto &row : lst) {\n        for(auto &val : row) {\n  \
    \          if(val == x) {\n                res.emplace_back(std::make_tuple(row.size(),\
    \ row.size() - 1));\n            }\n        }\n    }\n    std::sort(res.begin(),\
    \ res.end(), [](const std::tuple<long, long> &a, const std::tuple<long, long>\
    \ &b) { return std::get<0>(a) < std::get<0>(b); });\n    std::sort(res.begin(),\
    \ res.end(), [](const std::tuple<long, long> &a, const std::tuple<long, long>\
    \ &b) { return std::get<1>(a) < std::get<1>(b); });\n    return res;", "    //\
    \ Your code here\n    std::vector<std::tuple<long, long>> res;\n    for(auto &row\
    \ : lst){\n        for(auto &col : row){\n            if(col == x){\n        \
    \        res.push_back(std::make_tuple(row.size() - 1, col.size() - 1));\n   \
    \         }\n        }\n    }\n    std::sort(res.begin(), res.end(), [](auto &a,\
    \ auto &b){\n        return std::get<0>(a) < std::get<0>(b);\n    });\n    std::sort(res.begin(),\
    \ res.end(), [](auto &a, auto &b){\n        return std::get<1>(a) > std::get<1>(b);\n\
    \    });\n    return res;", "    std::vector<std::tuple<long, long>> res;\n  \
    \  std::vector<long> row;\n    std::vector<long> col;\n    std::vector<long> temp;\n\
    \    for (auto &i : lst) {\n        row.push_back(i[0]);\n        col.push_back(i.size()\
    \ - 1);\n    }\n    std::sort(row.begin(), row.end());\n    std::sort(col.begin(),\
    \ col.end());\n    for (long i = 0; i < row.size(); i++) {\n        temp.clear();\n\
    \        for (long j = 0; j < col.size(); j++) {\n            if (row[i] == col[j])\
    \ {\n                temp.push_back(j);\n            }\n        }\n        res.push_back(std::make_tuple(row[i],\
    \ temp.size()));\n    }\n    return res;", "    std::vector<std::tuple<long, long>>\
    \ res;\n    for(auto &row : lst) {\n        for(auto &el : row) {\n          \
    \  if(el == x) {\n                res.emplace_back(std::make_tuple(row.size(),\
    \ row.size() - 1));\n            }\n        }\n    }\n    std::sort(res.begin(),\
    \ res.end(), [](auto &a, auto &b) { return std::get<0>(a) < std::get<0>(b); });\n\
    \    std::sort(res.begin(), res.end(), [](auto &a, auto &b) { return std::get<1>(a)\
    \ < std::get<1>(b); });\n    return res;", "    std::vector<std::tuple<long, long>>\
    \ res;\n    std::vector<long> row;\n    std::vector<long> col;\n    for (auto\
    \ &v : lst) {\n        row.push_back(v[0]);\n        col.push_back(v[1]);\n  \
    \  }\n    std::sort(row.begin(), row.end());\n    std::sort(col.begin(), col.end());\n\
    \    for (long i = 0; i < row.size(); i++) {\n        long j = row.size() - i\
    \ - 1;\n        long k = col.size() - j - 1;\n        if (row[i] == x && col[j]\
    \ == x) {\n            res.push_back({i, j});\n        }\n    }\n    return res;",
  "    // Your code here\n    std::vector<std::tuple<long, long>> res;\n    for(auto\
    \ &row : lst) {\n        for(auto &val : row) {\n            if(val == x) {\n\
    \                res.emplace_back(std::make_tuple(row.size() - 1, row.size() -\
    \ 1));\n            }\n        }\n    }\n    std::sort(res.begin(), res.end(),\
    \ [](const std::tuple<long, long> &a, const std::tuple<long, long> &b){\n    \
    \    return std::get<0>(a) < std::get<0>(b);\n    });\n    std::sort(res.begin(),\
    \ res.end(), [](const std::tuple<long, long> &a, const std::tuple<long, long>\
    \ &b){\n        return std::get<1>(a) < std::get<1>(b);\n    });\n    return res;",
  "    std::vector<std::tuple<long, long>> res;\n    for(auto &row : lst) {\n    \
    \    for(auto &val : row) {\n            if(val == x) {\n                res.emplace_back(std::make_tuple(row.size(),\
    \ row.size() - 1));\n            }\n        }\n    }\n    std::sort(res.begin(),\
    \ res.end(), [](const std::tuple<long, long> &a, const std::tuple<long, long>\
    \ &b) {\n        return std::get<0>(a) < std::get<0>(b);\n    });\n    std::sort(res.begin(),\
    \ res.end(), [](const std::tuple<long, long> &a, const std::tuple<long, long>\
    \ &b) {\n        return std::get<1>(a) < std::get<1>(b);\n    });\n    return\
    \ res;", "    // Write your code here\n    std::vector<std::tuple<long, long>>\
    \ res;\n    for(auto &row : lst){\n        for(auto &val : row){\n           \
    \ if(val == x){\n                res.emplace_back(row.size() - 1, row.size() -\
    \ 1);\n            }\n        }\n    }\n    std::sort(res.begin(), res.end(),\
    \ [](const std::tuple<long, long> &a, const std::tuple<long, long> &b){\n    \
    \    return std::get<0>(a) < std::get<0>(b);\n    });\n    std::sort(res.begin(),\
    \ res.end(), [](const std::tuple<long, long> &a, const std::tuple<long, long>\
    \ &b){\n        return std::get<1>(a) < std::get<1>(b);\n    });\n    return res;",
  "    std::vector<std::tuple<long, long>> res;\n    long row = 0;\n    long col =\
    \ 0;\n    for (auto &v : lst) {\n        row += v.size();\n        col += v.size();\n\
    \    }\n    long row_max = row;\n    long col_max = col;\n    for (auto &v : lst)\
    \ {\n        row_max = std::max(row_max, v.size());\n        col_max = std::max(col_max,\
    \ v.size());\n    }\n    long row_min = row;\n    long col_min = col;\n    for\
    \ (auto &v : lst) {\n        row_min = std::min(row_min, v.size());\n        col_min\
    \ = std::min(col_min, v.size());\n    }\n    long row_mid = row - row_min;\n \
    \   long col_mid = col - col_min;\n    long row_start = row_mid - row_max;\n \
    \   long row_end = row_mid + row_max;\n    long col_start = col_mid - col_max;\n\
    \    long col_end = col_mid + col_max;\n    for (auto &v : lst) {\n        for\
    \ (long i = 0; i < v.size(); i++) {\n            if (v[i] == x) {\n          \
    \      res.emplace_back(std::make_tuple(row_start + i, col_start + i));\n    \
    \        }\n        }\n    }\n    std::sort(res.begin(), res.end(), [](const std::tuple<long,\
    \ long> &a, const std::tuple<long, long> &b) {\n        return std::get<0>(a)\
    \ < std::get<0>(b);\n    });\n    std::sort(res.begin(), res.end(), [](const std::tuple<long,\
    \ long> &a, const std::tuple<long, long> &b) {\n        return std::get<1>(a)\
    \ < std::get<1>(b);\n    });\n    return res;", "    std::vector<std::tuple<long,\
    \ long>> res;\n    std::vector<long> row;\n    std::vector<long> col;\n    long\
    \ row_index = 0;\n    long col_index = 0;\n    for (auto &row : lst) {\n     \
    \   row.push_back(0);\n    }\n    for (auto &row : lst) {\n        for (auto &col\
    \ : row) {\n            if (col == x) {\n                res.push_back({row_index,\
    \ col_index});\n            }\n        }\n    }\n    std::sort(res.begin(), res.end(),\
    \ [](const std::tuple<long, long> &a, const std::tuple<long, long> &b) {\n   \
    \     return std::get<0>(a) < std::get<0>(b);\n    });\n    std::sort(res.begin(),\
    \ res.end(), [](const std::tuple<long, long> &a, const std::tuple<long, long>\
    \ &b) {\n        return std::get<1>(a) < std::get<1>(b);\n    });\n    return\
    \ res;", "    std::vector<std::tuple<long, long>> res;\n    if (lst.size() ==\
    \ 0) {\n        return res;\n    }\n    std::vector<std::tuple<long, long>> row;\n\
    \    std::vector<std::tuple<long, long>> col;\n    for (auto &it : lst) {\n  \
    \      row.emplace_back(std::get<0>(it), std::get<1>(it));\n        col.emplace_back(std::get<0>(it),\
    \ std::get<1>(it));\n    }\n    std::sort(row.begin(), row.end(), [](const std::tuple<long,\
    \ long> &a, const std::tuple<long, long> &b) {\n        return std::get<0>(a)\
    \ < std::get<0>(b);\n    });\n    std::sort(col.begin(), col.end(), [](const std::tuple<long,\
    \ long> &a, const std::tuple<long, long> &b) {\n        return std::get<1>(a)\
    \ < std::get<1>(b);\n    });\n    for (auto &it : row) {\n        if (std::get<0>(it)\
    \ == x) {\n            res.emplace_back(std::get<0>(it), std::get<1>(it));\n \
    \       }\n    }\n    return res;", "    std::vector<std::tuple<long, long>> res;\n\
    \    for(auto &row : lst) {\n        for(auto &col : row) {\n            if(col\
    \ == x) {\n                res.emplace_back(std::make_tuple(row.size(), col.size()));\n\
    \            }\n        }\n    }\n    std::sort(res.begin(), res.end(), [](const\
    \ std::tuple<long, long> &a, const std::tuple<long, long> &b) {\n        return\
    \ std::get<0>(a) < std::get<0>(b);\n    });\n    std::sort(res.begin(), res.end(),\
    \ [](const std::tuple<long, long> &a, const std::tuple<long, long> &b) {\n   \
    \     return std::get<1>(a) < std::get<1>(b);\n    });\n    return res;", "  \
    \  std::vector<std::tuple<long, long>> res;\n    long row = 0;\n    long col =\
    \ 0;\n    long cnt = 0;\n    for(auto &row : lst) {\n        for(auto &col : row)\
    \ {\n            if(col == x) {\n                res.push_back(std::make_tuple(row,\
    \ col));\n                cnt++;\n            }\n        }\n    }\n    for(auto\
    \ &row : lst) {\n        for(auto &col : row) {\n            if(col != x) {\n\
    \                res.push_back(std::make_tuple(row, col));\n            }\n  \
    \      }\n    }\n    for(auto &row : lst) {\n        for(auto &col : row) {\n\
    \            if(col == x) {\n                res.push_back(std::make_tuple(row,\
    \ col));\n            }\n        }\n    }\n    for(auto &row : lst) {\n      \
    \  for(auto &col : row) {\n            if(col != x) {\n                res.push_back(std::make_tuple(row,\
    \ col));\n            }\n        }\n    }\n    for(auto &row : lst) {\n      \
    \  for(auto &col : row) {\n            if(col != x) {\n                res.push_back(std::make_tuple(row,\
    \ col));\n            }\n        }\n    }\n    for(auto &row : lst) {\n      \
    \  for(auto &col : row) {\n            if(col != x) {\n                res.push_back(std::make_tuple(row,\
    \ col));\n            }\n        }\n    }\n    for(auto &row : lst) {\n      \
    \  for(auto &col : row) {\n            if(col != x) {\n                res.push_back(std::make_tuple(row,\
    \ col));\n            }\n        }\n    }\n    for(auto &row : lst) {\n      \
    \  for(auto &col : row) {\n            if(col != x) {\n                res.push_back(std::make_tuple(row,\
    \ col));\n            }\n        }\n    }\n    for(auto &row : lst) {\n      \
    \  for(auto &col : row) {\n            if(col != x) {\n                res.push_back(std::make_tuple(row,\
    \ col));\n            }\n        }\n    }\n    for(auto &row : lst) {\n      \
    \  for(auto &col : row) {\n            if(col != x) {\n                res.push_back(std::make_tuple(row,\
    \ col));\n            }\n        }\n    }\n    for(auto &row : lst) {\n      \
    \  for(auto &col : row) {\n            if(col != x) {\n                res.push_back(std::make_tuple(row,\
    \ col));\n            }\n        }\n    }\n    for(auto &row : lst) {\n      \
    \  for(auto &col : row) {\n            if(col != x) {\n                res.push_back(std::make_tuple(row,\
    \ col));\n            }\n        }\n    }\n    for(auto ", "    // Write your\
    \ code here\n    std::vector<std::tuple<long, long>> res;\n    for(auto &row :\
    \ lst){\n        for(auto &col : row){\n            if(col == x){\n          \
    \      res.emplace_back(row.size() - 1, col.size() - 1);\n            }\n    \
    \    }\n    }\n    std::sort(res.begin(), res.end(), [](const std::tuple<long,\
    \ long> &a, const std::tuple<long, long> &b){\n        return std::get<0>(a) <\
    \ std::get<0>(b);\n    });\n    std::sort(res.begin(), res.end(), [](const std::tuple<long,\
    \ long> &a, const std::tuple<long, long> &b){\n        return std::get<1>(a) <\
    \ std::get<1>(b);\n    });\n    return res;", "    std::vector<std::tuple<long,\
    \ long>> res;\n    std::vector<std::vector<long>> row;\n    std::vector<std::vector<long>>\
    \ column;\n    for (auto &i : lst) {\n        row.push_back(i);\n    }\n    for\
    \ (auto &i : row) {\n        column.push_back(i);\n    }\n    for (auto &i : column)\
    \ {\n        std::sort(i.begin(), i.end());\n    }\n    for (auto &i : column)\
    \ {\n        std::sort(i.rbegin(), i.rend());\n    }\n    for (auto &i : row)\
    \ {\n        std::sort(i.begin(), i.end());\n    }\n    for (auto &i : row) {\n\
    \        std::sort(i.rbegin(), i.rend());\n    }\n    for (auto &i : column) {\n\
    \        std::sort(i.begin(), i.end());\n    }\n    for (auto &i : column) {\n\
    \        std::sort(i.rbegin(), i.rend());\n    }\n    for (auto &i : row) {\n\
    \        std::sort(i.begin(), i.end());\n    }\n    for (auto &i : row) {\n  \
    \      std::sort(i.rbegin(), i.rend());\n    }\n    for (auto &i : column) {\n\
    \        std::sort(i.begin(), i.end());\n    }\n    for (auto &i : column) {\n\
    \        std::sort(i.rbegin(), i.rend());\n    }\n    for (auto &i : row) {\n\
    \        std::sort(i.begin(), i.end());\n    }\n    for (auto &i : row) {\n  \
    \      std::sort(i.rbegin(), i.rend());\n    }\n    for (auto &i : column) {\n\
    \        std::sort(i.begin(), i.end());\n    }\n    for (auto &i : column) {\n\
    \        std::sort(i.rbegin(), i.rend());\n    }\n    for (auto &i : row) {\n\
    \        std::sort(i.begin(), i.end());\n    }\n    for (auto &i : row) {\n  \
    \      std::sort(i.rbegin(), i.rend());\n    }\n    for (auto &i : column) {\n\
    \        std::sort(i.begin(), i.end());\n    }\n    for (auto &i : column) {\n\
    \        std::sort(i.rbegin(), i.rend());\n    }\n    for (auto &i : row) {\n\
    \        std::sort(i.begin(), i.end());\n    }\n    for (auto &i : row) {\n  \
    \      std::sort(i.rbegin(), i.rend());\n    }\n    for (auto &i : column) {\n\
    \        std::sort(i.begin(), i.end());\n    }\n    for (auto &i : column) {\n\
    \        std::sort(i.rbegin(), i.rend());\n    }\n    for (auto &i : ", "    std::vector<std::tuple<long,\
    \ long>> res;\n    std::vector<long> row;\n    std::vector<long> col;\n    long\
    \ row_index = 0;\n    long col_index = 0;\n    long row_max = std::accumulate(lst.begin(),\
    \ lst.end(), 0);\n    long col_max = std::accumulate(lst.begin(), lst.end(), 0);\n\
    \    long row_min = std::numeric_limits<long>::max();\n    long col_min = std::numeric_limits<long>::max();\n\
    \    long row_cnt = 0;\n    long col_cnt = 0;\n    long row_cnt2 = 0;\n    long\
    \ col_cnt2 = 0;\n    for (auto &row : lst) {\n        row_cnt += row.size();\n\
    \        row_cnt2 += row.size();\n        row_min = std::min(row_min, row.size());\n\
    \        row_max = std::max(row_max, row.size());\n    }\n    for (auto &col :\
    \ lst) {\n        col_cnt += col.size();\n        col_cnt2 += col.size();\n  \
    \      col_min = std::min(col_min, col.size());\n        col_max = std::max(col_max,\
    \ col.size());\n    }\n    for (auto &row : lst) {\n        for (auto &col : lst)\
    \ {\n            if (col == row) {\n                continue;\n            }\n\
    \            long row_cnt3 = row.size();\n            long col_cnt3 = col.size();\n\
    \            long row_cnt4 = row_cnt3;\n            long col_cnt4 = col_cnt3;\n\
    \            long row_cnt5 = row_cnt4;\n            long col_cnt5 = col_cnt4;\n\
    \            long row_cnt6 = row_cnt5;\n            long col_cnt6 = col_cnt5;\n\
    \            long row_cnt7 = row_cnt6;\n            long col_cnt7 = col_cnt6;\n\
    \            long row_cnt8 = row_cnt7;\n            long col_cnt8 = col_cnt7;\n\
    \            long row_cnt9 = row_cnt8;\n            long col_cnt9 = col_cnt8;\n\
    \            long row_cnt10 = row_cnt9;\n            long col_cnt10 = col_cnt9;\n\
    \            long row_cnt11 = row_cnt10;\n            long col_cnt11 = col_cnt10;\n\
    \            long row_cnt12 = row_cnt11;\n            long col_cnt12 = col_cnt11;\n\
    \            long row_cnt13 = row_cnt12;\n            long col_cnt13 = col_cnt12;\n\
    \            long row_cnt14 = row_cnt13;\n            long col_cnt14 = col_cnt13;\n\
    \            long row_cnt15 = row_cnt14;\n            long col_cnt15 = col_cnt14;\n",
  "    // Write your code here\n    std::vector<std::tuple<long, long>> res;\n   \
    \ for(auto &row : lst){\n        for(auto &col : row){\n            if(col ==\
    \ x){\n                res.push_back(std::make_tuple(row.size() - 1, col.size()\
    \ - 1));\n            }\n        }\n    }\n    std::sort(res.begin(), res.end(),\
    \ [](std::tuple<long, long> a, std::tuple<long, long> b){\n        return std::get<0>(a)\
    \ < std::get<0>(b);\n    });\n    std::sort(res.begin(), res.end(), [](std::tuple<long,\
    \ long> a, std::tuple<long, long> b){\n        return std::get<1>(a) < std::get<1>(b);\n\
    \    });\n    return res;", "    std::vector<std::tuple<long, long>> res;\n  \
    \  long n = lst.size();\n    long m = lst[0].size();\n    long i, j, k;\n    for\
    \ (i = 0; i < n; i++) {\n        long row = i;\n        for (j = 0; j < m; j++)\
    \ {\n            if (lst[i][j] == x) {\n                res.push_back(std::make_tuple(row,\
    \ j));\n            }\n        }\n    }\n    std::sort(res.begin(), res.end(),\
    \ [](std::tuple<long, long> a, std::tuple<long, long> b) {\n        return std::get<0>(a)\
    \ < std::get<0>(b);\n    });\n    for (i = 0; i < n; i++) {\n        std::sort(res[i].begin(),\
    \ res[i].end(), [](std::tuple<long, long> a, std::tuple<long, long> b) {\n   \
    \         return std::get<1>(a) < std::get<1>(b);\n        });\n    }\n    return\
    \ res;", "    std::vector<std::tuple<long, long>> res;\n    std::vector<long>\
    \ row;\n    std::vector<long> col;\n    for (auto &i : lst) {\n        row.push_back(i[0]);\n\
    \        col.push_back(i.size() - 1);\n    }\n    std::sort(row.begin(), row.end());\n\
    \    std::sort(col.begin(), col.end());\n    for (long i = 0; i < row.size();\
    \ i++) {\n        for (long j = 0; j < col.size(); j++) {\n            if (row[i]\
    \ == x && col[j] == i) {\n                res.push_back(std::make_tuple(i, j));\n\
    \            }\n        }\n    }\n    return res;", "    std::vector<std::tuple<long,\
    \ long>> res;\n    long row = 0;\n    long col = 0;\n    long cnt = 0;\n    for\
    \ (auto &row : lst) {\n        cnt += row.size();\n    }\n    for (auto &row :\
    \ lst) {\n        for (auto &val : row) {\n            if (val == x) {\n     \
    \           res.push_back(std::make_tuple(row, col));\n            }\n       \
    \ }\n        col += row.size();\n    }\n    std::sort(res.begin(), res.end(),\
    \ [](std::tuple<long, long> a, std::tuple<long, long> b) {\n        return std::get<0>(a)\
    \ < std::get<0>(b);\n    });\n    std::sort(res.begin(), res.end(), [](std::tuple<long,\
    \ long> a, std::tuple<long, long> b) {\n        return std::get<1>(a) > std::get<1>(b);\n\
    \    });\n    return res;", "    std::vector<std::tuple<long, long>> res;\n  \
    \  for(auto &row : lst) {\n        for(auto &col : row) {\n            if(col\
    \ == x) {\n                res.emplace_back(std::make_tuple(row.size() - 1, col.size()\
    \ - 1));\n            }\n        }\n    }\n    std::sort(res.begin(), res.end(),\
    \ [](const std::tuple<long, long> &a, const std::tuple<long, long> &b) { return\
    \ std::get<0>(a) < std::get<0>(b); });\n    std::sort(res.begin(), res.end(),\
    \ [](const std::tuple<long, long> &a, const std::tuple<long, long> &b) { return\
    \ std::get<1>(a) < std::get<1>(b); });\n    return res;", "    std::vector<std::tuple<long,\
    \ long>> res;\n    std::vector<long> row;\n    std::vector<long> col;\n    long\
    \ row_index = 0;\n    long col_index = 0;\n    for (auto &row : lst) {\n     \
    \   row.clear();\n        col.clear();\n        for (auto &col : row) {\n    \
    \        if (col == x) {\n                res.emplace_back(row_index, col_index);\n\
    \                col.clear();\n                row_index++;\n                col_index\
    \ = 0;\n            } else {\n                col.push_back(col);\n          \
    \      col_index++;\n            }\n        }\n    }\n    return res;", "    std::vector<std::tuple<long,\
    \ long>> res;\n    for(auto &row : lst) {\n        for(auto &elem : row) {\n \
    \           if(elem == x) {\n                res.push_back({row.size(), row.size()\
    \ - 1});\n            }\n        }\n    }\n    std::sort(res.begin(), res.end(),\
    \ [](const std::tuple<long, long> &a, const std::tuple<long, long> &b) -> bool\
    \ {\n        return std::get<0>(a) < std::get<0>(b);\n    });\n    std::sort(res.begin(),\
    \ res.end(), [](const std::tuple<long, long> &a, const std::tuple<long, long>\
    \ &b) -> bool {\n        return std::get<1>(a) < std::get<1>(b);\n    });\n  \
    \  return res;", "    std::vector<std::tuple<long, long>> res;\n    long n = lst.size();\n\
    \    long m = lst[0].size();\n    long i, j, k;\n    for (i = 0; i < n; i++) {\n\
    \        for (j = 0; j < m; j++) {\n            if (lst[i][j] == x) {\n      \
    \          res.push_back({i, j});\n            }\n        }\n    }\n    std::sort(res.begin(),\
    \ res.end(), [](auto a, auto b) {\n        return std::get<0>(a) < std::get<0>(b);\n\
    \    });\n    for (i = 0; i < n; i++) {\n        std::sort(res[i].begin(), res[i].end(),\
    \ [](auto a, auto b) {\n            return std::get<1>(a) < std::get<1>(b);\n\
    \        });\n    }\n    return res;", "    std::vector<std::tuple<long, long>>\
    \ res;\n    long row = 0;\n    long col = 0;\n    long cnt = 0;\n    for(auto\
    \ &v : lst) {\n        cnt += v.size();\n    }\n    for(auto &v : lst) {\n   \
    \     for(auto &i : v) {\n            if(i == x) {\n                res.push_back(std::make_tuple(row,\
    \ col));\n            }\n        }\n        col += v.size();\n    }\n    for(auto\
    \ &v : lst) {\n        for(auto &i : v) {\n            if(i == x) {\n        \
    \        res.push_back(std::make_tuple(row, col));\n            }\n        }\n\
    \        col -= v.size();\n    }\n    std::sort(res.begin(), res.end(), [](std::tuple<long,\
    \ long> a, std::tuple<long, long> b) {\n        return std::get<0>(a) < std::get<0>(b);\n\
    \    });\n    std::sort(res.begin(), res.end(), [](std::tuple<long, long> a, std::tuple<long,\
    \ long> b) {\n        return std::get<1>(a) > std::get<1>(b);\n    });\n    return\
    \ res;", "    std::vector<std::tuple<long, long>> res;\n    std::vector<long>\
    \ row;\n    std::vector<long> col;\n    std::vector<long> temp;\n    long cnt\
    \ = 0;\n    for (auto &row : lst) {\n        row.clear();\n        temp.clear();\n\
    \        for (auto &col : row) {\n            temp.push_back(col);\n        }\n\
    \        temp.push_back(x);\n        col.push_back(cnt);\n        row.push_back(std::move(temp));\n\
    \        cnt++;\n    }\n    for (auto &row : lst) {\n        std::sort(row.begin(),\
    \ row.end());\n        std::sort(row.begin(), row.end(), [](long a, long b) {\
    \ return b < a; });\n        std::sort(row.begin(), row.end(), [](long a, long\
    \ b) { return b > a; });\n        std::sort(row.begin(), row.end(), [](long a,\
    \ long b) { return b < a; });\n        std::sort(row.begin(), row.end(), [](long\
    \ a, long b) { return b > a; });\n    }\n    for (auto &row : lst) {\n       \
    \ std::sort(row.begin(), row.end());\n        std::sort(row.begin(), row.end(),\
    \ [](long a, long b) { return b < a; });\n        std::sort(row.begin(), row.end(),\
    \ [](long a, long b) { return b > a; });\n        std::sort(row.begin(), row.end(),\
    \ [](long a, long b) { return b < a; });\n        std::sort(row.begin(), row.end(),\
    \ [](long a, long b) { return b > a; });\n    }\n    for (auto &row : lst) {\n\
    \        std::sort(row.begin(), row.end());\n        std::sort(row.begin(), row.end(),\
    \ [](long a, long b) { return b < a; });\n        std::sort(row.begin(), row.end(),\
    \ [](long a, long b) { return b > a; });\n        std::sort(row.begin(), row.end(),\
    \ [](long a, long b) { return b < a; });\n        std::sort(row.begin(), row.end(),\
    \ [](long a, long b) { return b > a; });\n    }\n    for (auto &row : lst) {\n\
    \        std::sort(row.begin(), row.end());\n        std::sort(row.begin(), row.end(),\
    \ [](long a, long b) { return b < a; });\n        std::sort(row.begin(), row.end(),\
    \ [](long a, long b) { return b > a; });\n        std::sort(row.begin(), row.end(),\
    \ [](long a, long b) { return b < a; });\n        std::sort(row.begin(), row.end(),\
    \ [](long a, long b) { return b > a; });\n    }\n    for (auto &row : lst) {\n\
    \        std::", "    std::vector<std::tuple<long, long>> res;\n    for(auto &row\
    \ : lst) {\n        for(auto &val : row) {\n            if(val == x) {\n     \
    \           res.emplace_back(row.size() - 1, row.size() - 1);\n            }\n\
    \        }\n    }\n    std::sort(res.begin(), res.end(), [](const std::tuple<long,\
    \ long> &a, const std::tuple<long, long> &b) -> bool {\n        return std::get<0>(a)\
    \ < std::get<0>(b);\n    });\n    std::sort(res.begin(), res.end(), [](const std::tuple<long,\
    \ long> &a, const std::tuple<long, long> &b) -> bool {\n        return std::get<1>(a)\
    \ < std::get<1>(b);\n    });\n    return res;", "    std::vector<std::tuple<long,\
    \ long>> res;\n    std::vector<long> row;\n    std::vector<long> col;\n    long\
    \ row_index = 0;\n    long col_index = 0;\n    for (auto &row : lst) {\n     \
    \   row.clear();\n        col.clear();\n        for (auto &col : row) {\n    \
    \        if (col == x) {\n                res.emplace_back(row_index, col_index);\n\
    \                row_index++;\n                col_index++;\n            }\n \
    \           col.push_back(0);\n        }\n    }\n    std::sort(res.begin(), res.end(),\
    \ [](const std::tuple<long, long> &a, const std::tuple<long, long> &b) {\n   \
    \     return std::get<0>(a) < std::get<0>(b);\n    });\n    std::sort(res.begin(),\
    \ res.end(), [](const std::tuple<long, long> &a, const std::tuple<long, long>\
    \ &b) {\n        return std::get<1>(a) > std::get<1>(b);\n    });\n    return\
    \ res;", "    std::vector<std::tuple<long, long>> res;\n    std::vector<long>\
    \ row;\n    std::vector<long> col;\n    for (auto &i : lst) {\n        row.push_back(i.size());\n\
    \        col.push_back(0);\n    }\n    std::sort(row.begin(), row.end(), [](long\
    \ a, long b) { return a < b; });\n    std::sort(col.begin(), col.end(), [](long\
    \ a, long b) { return b < a; });\n    for (long i = 0; i < row.size(); i++) {\n\
    \        for (long j = 0; j < col[i]; j++) {\n            if (row[i] == x && col[j]\
    \ == x) {\n                res.push_back(std::make_tuple(i, j));\n           \
    \ }\n        }\n    }\n    return res;", "    std::vector<std::tuple<long, long>>\
    \ res;\n    if (lst.size() == 0) {\n        return res;\n    }\n    std::vector<std::tuple<long,\
    \ long>> row;\n    for (auto &i : lst) {\n        row.push_back(i);\n    }\n \
    \   std::sort(row.begin(), row.end(), [](auto &a, auto &b) { return std::get<0>(a)\
    \ < std::get<0>(b); });\n    std::sort(row.begin(), row.end(), [](auto &a, auto\
    \ &b) { return std::get<1>(a) > std::get<1>(b); });\n    for (auto &i : row) {\n\
    \        if (std::get<0>(i) == x) {\n            std::get<1>(i)++;\n         \
    \   res.push_back(i);\n        }\n    }\n    return res;", "    std::vector<std::tuple<long,\
    \ long>> res;\n    if (lst.size() == 0) {\n        return res;\n    }\n    std::vector<std::tuple<long,\
    \ long>> row;\n    std::vector<std::tuple<long, long>> temp;\n    for (auto &i\
    \ : lst) {\n        row.clear();\n        temp.clear();\n        for (auto &j\
    \ : i) {\n            if (j == x) {\n                row.push_back(std::make_tuple(i,\
    \ 0));\n                temp.push_back(std::make_tuple(i, 0));\n            }\
    \ else {\n                row.push_back(std::make_tuple(i, j));\n            \
    \    temp.push_back(std::make_tuple(i, j));\n            }\n        }\n      \
    \  std::sort(row.begin(), row.end());\n        std::sort(temp.begin(), temp.end());\n\
    \        res.push_back(std::make_tuple(std::get<0>(row), std::get<1>(row)));\n\
    \        res.push_back(std::make_tuple(std::get<0>(temp), std::get<1>(temp)));\n\
    \    }\n    std::sort(res.begin(), res.end());\n    return res;", "    std::vector<std::tuple<long,\
    \ long>> res;\n    res.reserve(lst.size());\n    for (auto &row : lst) {\n   \
    \     std::sort(row.begin(), row.end());\n        std::sort(row.rbegin(), row.rend());\n\
    \        res.push_back(std::make_tuple(row.front(), row.back()));\n    }\n   \
    \ std::sort(res.begin(), res.end());\n    return res;", "    // Your code here\n\
    \    std::vector<std::tuple<long, long>> res;\n    for(auto &row : lst) {\n  \
    \      for(auto &col : row) {\n            if(col == x) {\n                res.push_back({row,\
    \ col});\n            }\n        }\n    }\n    std::sort(res.begin(), res.end(),\
    \ [](const std::tuple<long, long> &a, const std::tuple<long, long> &b) { return\
    \ std::get<0>(a) < std::get<0>(b); });\n    std::sort(res.begin(), res.end(),\
    \ [](const std::tuple<long, long> &a, const std::tuple<long, long> &b) { return\
    \ std::get<1>(a) < std::get<1>(b); });\n    return res;", "    std::vector<std::tuple<long,\
    \ long>> res;\n    long row = 0;\n    long col = 0;\n    for (auto &i : lst) {\n\
    \        auto it = std::find(i.begin(), i.end(), x);\n        if (it != i.end())\
    \ {\n            auto y = std::distance(it.base(), i.begin());\n            auto\
    \ x = std::distance(it.base(), it);\n            res.emplace_back(row, col);\n\
    \            row += y;\n            col += x;\n        }\n    }\n    std::sort(res.begin(),\
    \ res.end(), [](const std::tuple<long, long> &a, const std::tuple<long, long>\
    \ &b) {\n        return std::get<0>(a) < std::get<0>(b);\n    });\n    std::sort(res.begin(),\
    \ res.end(), [](const std::tuple<long, long> &a, const std::tuple<long, long>\
    \ &b) {\n        return std::get<1>(a) < std::get<1>(b);\n    });\n    return\
    \ res;", "    std::vector<std::tuple<long, long>> res;\n    for(auto &row : lst)\
    \ {\n        for(auto &col : row) {\n            if(col == x) {\n            \
    \    res.push_back(std::make_tuple(row.size() - 1, col.size() - 1));\n       \
    \     }\n        }\n    }\n    std::sort(res.begin(), res.end(), [](auto &a, auto\
    \ &b) { return std::get<0>(a) < std::get<0>(b); });\n    std::sort(res.begin(),\
    \ res.end(), [](auto &a, auto &b) { return std::get<1>(a) < std::get<1>(b); });\n\
    \    return res;", "    std::vector<std::tuple<long, long>> res;\n    std::vector<long>\
    \ row;\n    std::vector<long> col;\n    long row_index = 0;\n    long col_index\
    \ = 0;\n    long row_size = lst.size();\n    long col_size = lst[0].size();\n\
    \    long row_sum = 0;\n    long col_sum = 0;\n    for (long i = 0; i < row_size;\
    \ i++) {\n        row.clear();\n        col.clear();\n        for (long j = 0;\
    \ j < col_size; j++) {\n            row.push_back(lst[i][j]);\n            col.push_back(j);\n\
    \        }\n        row_sum += row.size();\n        col_sum += col_size;\n   \
    \     if (row_sum == x) {\n            res.push_back(std::make_tuple(row_index,\
    \ col_index));\n            row_index++;\n            row_sum -= row.size();\n\
    \        } else if (col_sum == x) {\n            res.push_back(std::make_tuple(row_index,\
    \ col_index));\n            col_index--;\n            col_sum -= col_size;\n \
    \       }\n    }\n    return res;", "    std::vector<std::tuple<long, long>> res;\n\
    \    std::vector<long> row;\n    std::vector<long> col;\n    long row_index =\
    \ 0;\n    long col_index = 0;\n    for (auto &row : lst) {\n        row.clear();\n\
    \        col.clear();\n        for (auto &el : row) {\n            row.push_back(el);\n\
    \            col.push_back(el);\n        }\n        std::sort(row.begin(), row.end());\n\
    \        std::sort(col.begin(), col.end());\n        if (row_index == row.size())\
    \ {\n            row_index = 0;\n            col_index = 0;\n        }\n     \
    \   if (col_index == col.size()) {\n            col_index = 0;\n        }\n  \
    \      if (row_index == x && col_index == x) {\n            res.push_back(std::make_tuple(row_index,\
    \ col_index));\n        }\n        row_index++;\n        col_index++;\n    }\n\
    \    return res;", "    std::vector<std::tuple<long, long>> res;\n    long n =\
    \ lst.size();\n    long m = lst[0].size();\n    long row = 0;\n    long col =\
    \ 0;\n    long cnt = 0;\n    long minRow = std::numeric_limits<long>::max();\n\
    \    long minCol = std::numeric_limits<long>::max();\n    for (long i = 0; i <\
    \ n; i++) {\n        long row = i;\n        long col = i;\n        for (long j\
    \ = 0; j < m; j++) {\n            if (lst[i][j] == x) {\n                res.push_back(std::make_tuple(row,\
    \ col));\n                cnt++;\n            }\n            if (cnt > 1) {\n\
    \                minRow = std::min(minRow, row);\n                minCol = std::min(minCol,\
    \ col);\n            }\n        }\n    }\n    if (cnt < 2) {\n        return res;\n\
    \    }\n    for (long i = 0; i < n; i++) {\n        long row = i;\n        long\
    \ col = i;\n        for (long j = 0; j < m; j++) {\n            if (lst[i][j]\
    \ == x) {\n                res.push_back(std::make_tuple(row, col));\n       \
    \     }\n        }\n    }\n    std::sort(res.begin(), res.end(), [](std::tuple<long,\
    \ long> a, std::tuple<long, long> b) -> bool {\n        return std::get<0>(a)\
    \ < std::get<0>(b);\n    });\n    std::sort(res.begin(), res.end(), [](std::tuple<long,\
    \ long> a, std::tuple<long, long> b) -> bool {\n        return std::get<1>(a)\
    \ < std::get<1>(b);\n    });\n    return res;", "    std::vector<std::tuple<long,\
    \ long>> res;\n    long n = lst.size();\n    long m = lst[0].size();\n    long\
    \ i = 0;\n    long j = 0;\n    while (i < n && j < m) {\n        if (lst[i][j]\
    \ == x) {\n            res.push_back({i, j});\n            i += 1;\n         \
    \   j += 1;\n        } else if (lst[i][j] > x) {\n            j += 1;\n      \
    \  } else {\n            i += 1;\n        }\n    }\n    return res;", "    std::vector<std::tuple<long,\
    \ long>> res;\n    std::vector<std::vector<long>> temp;\n    long row = 0;\n \
    \   long col = 0;\n    for (auto &v : lst) {\n        v.push_back(row);\n    \
    \    temp.push_back(v);\n        row += 1;\n    }\n    for (auto &v : temp) {\n\
    \        v.push_back(col);\n        col += 1;\n    }\n    std::sort(temp.begin(),\
    \ temp.end(), [](auto &a, auto &b) { return std::get<0>(a) < std::get<0>(b); });\n\
    \    std::sort(temp.begin(), temp.end(), [](auto &a, auto &b) { return std::get<1>(a)\
    \ < std::get<1>(b); });\n    for (auto &v : temp) {\n        auto it = std::find(v.begin(),\
    \ v.end(), x);\n        if (it != v.end()) {\n            res.push_back(std::make_tuple(std::get<0>(v),\
    \ std::get<1>(v)));\n        }\n    }\n    return res;", "    // Write your code\
    \ here\n    std::vector<std::tuple<long, long>> res;\n    for(auto &row : lst)\
    \ {\n        for(auto &el : row) {\n            if(el == x) {\n              \
    \  res.emplace_back(std::make_tuple(row.size() - 1, row.size() - 1));\n      \
    \      }\n        }\n    }\n    std::sort(res.begin(), res.end(), [](const std::tuple<long,\
    \ long> &a, const std::tuple<long, long> &b) -> bool {\n        return std::get<0>(a)\
    \ < std::get<0>(b);\n    });\n    std::sort(res.begin(), res.end(), [](const std::tuple<long,\
    \ long> &a, const std::tuple<long, long> &b) -> bool {\n        return std::get<1>(a)\
    \ < std::get<1>(b);\n    });\n    return res;", "    std::vector<std::tuple<long,\
    \ long>> res;\n    res.reserve(lst.size());\n    for (auto &row : lst) {\n   \
    \     std::sort(row.begin(), row.end());\n        std::reverse(row.begin(), row.end());\n\
    \        std::vector<std::tuple<long, long>> rowres;\n        rowres.reserve(row.size());\n\
    \        for (auto &el : row) {\n            rowres.emplace_back(el);\n      \
    \  }\n        res.emplace_back(std::make_tuple(std::distance(row.begin(), std::find(row.begin(),\
    \ row.end(), x)), std::distance(row.rbegin(), std::find(row.rbegin(), row.rend(),\
    \ x))));\n    }\n    return res;", "    std::vector<std::tuple<long, long>> res;\n\
    \    for(auto &row : lst) {\n        for(auto &el : row) {\n            if(el\
    \ == x) {\n                res.push_back(std::make_tuple(row.size() - 1, row.size()\
    \ - 1));\n            }\n        }\n    }\n    std::sort(res.begin(), res.end(),\
    \ [](const std::tuple<long, long> &a, const std::tuple<long, long> &b) {\n   \
    \     return std::get<0>(a) < std::get<0>(b);\n    });\n    std::sort(res.begin(),\
    \ res.end(), [](const std::tuple<long, long> &a, const std::tuple<long, long>\
    \ &b) {\n        return std::get<1>(a) < std::get<1>(b);\n    });\n    return\
    \ res;", "    std::vector<std::tuple<long, long>> res;\n    std::vector<long>\
    \ row;\n    std::vector<long> col;\n    long row_index = 0;\n    long col_index\
    \ = 0;\n    for (auto &row : lst) {\n        row.clear();\n        col.clear();\n\
    \        for (auto &el : row) {\n            row.push_back(el);\n            col.push_back(el);\n\
    \        }\n        if (row.size() == 0) {\n            continue;\n        }\n\
    \        col_index = 0;\n        for (auto &el : col) {\n            if (el ==\
    \ x) {\n                res.push_back(std::make_tuple(row_index, col_index));\n\
    \            }\n            if (el > x) {\n                col_index++;\n    \
    \        }\n        }\n        row_index++;\n    }\n    std::sort(res.begin(),\
    \ res.end(), [](const std::tuple<long, long> &a, const std::tuple<long, long>\
    \ &b) {\n        return std::get<0>(a) < std::get<0>(b);\n    });\n    std::sort(res.begin(),\
    \ res.end(), [](const std::tuple<long, long> &a, const std::tuple<long, long>\
    \ &b) {\n        return std::get<1>(a) < std::get<1>(b);\n    });\n    return\
    \ res;", "    std::vector<std::tuple<long, long>> res;\n    std::vector<long>\
    \ row;\n    std::vector<long> col;\n    long rowId = 0;\n    long colId = 0;\n\
    \    for (auto &row : lst) {\n        row.push_back(0);\n        col.push_back(0);\n\
    \    }\n    for (auto &row : lst) {\n        for (auto &col : row) {\n       \
    \     if (col == x) {\n                res.push_back(std::make_tuple(rowId, colId));\n\
    \            }\n            col++;\n        }\n        rowId++;\n        colId\
    \ = 0;\n    }\n    std::sort(res.begin(), res.end(), [](const std::tuple<long,\
    \ long> &a, const std::tuple<long, long> &b) {\n        return std::get<0>(a)\
    \ < std::get<0>(b);\n    });\n    std::sort(res.begin(), res.end(), [](const std::tuple<long,\
    \ long> &a, const std::tuple<long, long> &b) {\n        return std::get<1>(a)\
    \ < std::get<1>(b);\n    });\n    return res;", "    std::vector<std::tuple<long,\
    \ long>> res;\n    long row = 0;\n    long col = 0;\n    for (auto &row : lst)\
    \ {\n        auto it = std::find(row.begin(), row.end(), x);\n        if (it !=\
    \ row.end()) {\n            res.push_back(std::make_tuple(row, col));\n      \
    \      row = *it;\n            col = x - row;\n        }\n    }\n    std::sort(res.begin(),\
    \ res.end(), [](const std::tuple<long, long> &a, const std::tuple<long, long>\
    \ &b) {\n        return std::get<0>(a) < std::get<0>(b);\n    });\n    std::sort(res.begin(),\
    \ res.end(), [](const std::tuple<long, long> &a, const std::tuple<long, long>\
    \ &b) {\n        return std::get<1>(a) < std::get<1>(b);\n    });\n    return\
    \ res;", "    std::vector<std::tuple<long, long>> res;\n    for(auto &row : lst)\
    \ {\n        for(auto &el : row) {\n            if(el == x) {\n              \
    \  res.push_back(std::make_tuple(row.size() - 1, row.size() - 1));\n         \
    \   }\n        }\n    }\n    std::sort(res.begin(), res.end(), [](const std::tuple<long,\
    \ long> &a, const std::tuple<long, long> &b) {\n        return std::get<0>(a)\
    \ < std::get<0>(b);\n    });\n    std::sort(res.begin(), res.end(), [](const std::tuple<long,\
    \ long> &a, const std::tuple<long, long> &b) {\n        return std::get<1>(a)\
    \ < std::get<1>(b);\n    });\n    return res;", "    std::vector<std::tuple<long,\
    \ long>> res;\n    long row = 0;\n    long col = 0;\n    for (auto &v : lst) {\n\
    \        long n = v.size();\n        if (n == 0) {\n            res.push_back(std::make_tuple(row,\
    \ col));\n        }\n        else if (n == 1) {\n            if (v[0] == x) {\n\
    \                res.push_back(std::make_tuple(row, col));\n            }\n  \
    \      }\n        else {\n            long mid = n / 2;\n            long mid1\
    \ = mid - 1;\n            long mid2 = mid + 1;\n            long mid3 = mid2 -\
    \ 1;\n            long mid4 = mid2 + 1;\n            long mid5 = mid3 - 1;\n \
    \           long mid6 = mid3 + 1;\n            long mid7 = mid4 - 1;\n       \
    \     long mid8 = mid4 + 1;\n            long mid9 = mid5 - 1;\n            long\
    \ mid10 = mid5 + 1;\n            long mid11 = mid6 - 1;\n            long mid12\
    \ = mid6 + 1;\n            long mid13 = mid7 - 1;\n            long mid14 = mid7\
    \ + 1;\n            long mid15 = mid8 - 1;\n            long mid16 = mid8 + 1;\n\
    \            long mid17 = mid9 - 1;\n            long mid18 = mid9 + 1;\n    \
    \        long mid19 = mid10 - 1;\n            long mid20 = mid10 + 1;\n      \
    \      long mid21 = mid11 - 1;\n            long mid22 = mid11 + 1;\n        \
    \    long mid23 = mid12 - 1;\n            long mid24 = mid12 + 1;\n          \
    \  long mid25 = mid13 - 1;\n            long mid26 = mid13 + 1;\n            long\
    \ mid27 = mid14 - 1;\n            long mid28 = mid14 + 1;\n            long mid29\
    \ = mid15 - 1;\n            long mid30 = mid15 + 1;\n            long mid31 =\
    \ mid16 - 1;\n            long mid32 = mid16 + 1;\n            long mid33 = mid17\
    \ - 1;\n            long mid34 = mid17 + 1;\n            long mid35 = mid18 -\
    \ 1;\n            long mid36 = mid18 + 1;\n            long mid37 = mid19 - 1;\n\
    \            long mid38 = mid19 + 1;\n            long mid39 = mid20 - 1;\n  \
    \          long mid40 = mid20 + 1;\n            long mid41 = mid21 - 1;\n    \
    \        long mid42 = mid21 + 1;\n            long mid43 = mid22 - 1;\n      \
    \      long mid44 = mid22 + 1;\n            long mid45 = mid23 - 1;\n        \
    \    long mid46 = mid23 + 1;\n            long mid", "    std::vector<std::tuple<long,\
    \ long>> res;\n    std::vector<long> row;\n    std::vector<long> col;\n    long\
    \ row_index = 0;\n    long col_index = 0;\n    for (auto &row : lst) {\n     \
    \   row.clear();\n        col.clear();\n        for (auto &elem : row) {\n   \
    \         row.push_back(elem);\n            col.push_back(elem);\n        }\n\
    \        if (row.size() == 0) {\n            continue;\n        }\n        std::sort(row.begin(),\
    \ row.end());\n        std::sort(col.begin(), col.end());\n        if (row_index\
    \ == 0 && col_index == 0) {\n            res.push_back(std::make_tuple(0, 0));\n\
    \        }\n        if (row_index == 0 && col_index == row.size() - 1) {\n   \
    \         res.push_back(std::make_tuple(0, row.size() - 1));\n        }\n    \
    \    if (row_index == row.size() - 1 && col_index == 0) {\n            res.push_back(std::make_tuple(row.size()\
    \ - 1, 0));\n        }\n        if (row_index == row.size() - 1 && col_index ==\
    \ row.size() - 1) {\n            res.push_back(std::make_tuple(row.size() - 1,\
    \ row.size() - 1));\n        }\n        for (long i = 0; i < row.size(); i++)\
    \ {\n            if (row_index == i) {\n                res.push_back(std::make_tuple(row_index,\
    \ col_index));\n            }\n            if (col_index == i) {\n           \
    \     res.push_back(std::make_tuple(row_index, col_index));\n            }\n \
    \           if (row_index == i && col_index == row.size() - 1) {\n           \
    \     res.push_back(std::make_tuple(row_index, col_index));\n            }\n \
    \           if (row_index == i && col_index == row.size() - 1) {\n           \
    \     res.push_back(std::make_tuple(row_index, col_index));\n            }\n \
    \       }\n        row_index++;\n        col_index++;\n    }\n    return res;",
  "    std::vector<std::tuple<long, long>> res;\n    std::vector<long> row;\n    std::vector<long>\
    \ col;\n    long row_index = 0;\n    long col_index = 0;\n    for (auto &row :\
    \ lst) {\n        row.clear();\n        col.clear();\n        for (auto &col :\
    \ row) {\n            if (col == x) {\n                row.push_back(row_index);\n\
    \                col.push_back(col_index);\n            }\n        }\n       \
    \ row_index++;\n        col_index = 0;\n    }\n    std::sort(row.begin(), row.end());\n\
    \    std::sort(col.begin(), col.end());\n    for (auto &row : row) {\n       \
    \ for (auto &col : col) {\n            res.push_back(std::make_tuple(row, col));\n\
    \        }\n    }\n    return res;", "    std::vector<std::tuple<long, long>>\
    \ res;\n    for(auto &row : lst) {\n        for(auto &col : row) {\n         \
    \   if(col == x) {\n                res.emplace_back(std::make_tuple(row.size()\
    \ - 1, col.size() - 1));\n            }\n        }\n    }\n    std::sort(res.begin(),\
    \ res.end(), [](auto &a, auto &b) { return std::get<0>(a) < std::get<0>(b); });\n\
    \    std::sort(res.begin(), res.end(), [](auto &a, auto &b) { return std::get<1>(a)\
    \ < std::get<1>(b); });\n    return res;", "    std::vector<std::tuple<long, long>>\
    \ res;\n    std::vector<long> row;\n    std::vector<long> col;\n    for (auto\
    \ &v : lst) {\n        row.push_back(v[0]);\n        col.push_back(v[1]);\n  \
    \  }\n    std::sort(row.begin(), row.end());\n    std::sort(col.begin(), col.end());\n\
    \    for (long i = 0; i < row.size(); i++) {\n        for (long j = 0; j < col.size();\
    \ j++) {\n            if (row[i] == x && col[j] == x) {\n                res.push_back(std::make_tuple(i,\
    \ j));\n            }\n        }\n    }\n    return res;", "    std::vector<std::tuple<long,\
    \ long>> res;\n    for(auto &row : lst) {\n        for(auto &val : row) {\n  \
    \          if(val == x) {\n                res.emplace_back(row.size() - 1, row.size()\
    \ - 1);\n            }\n        }\n    }\n    std::sort(res.begin(), res.end(),\
    \ [](const std::tuple<long, long> &a, const std::tuple<long, long> &b) {\n   \
    \     return std::get<0>(a) < std::get<0>(b);\n    });\n    std::sort(res.begin(),\
    \ res.end(), [](const std::tuple<long, long> &a, const std::tuple<long, long>\
    \ &b) {\n        return std::get<1>(a) < std::get<1>(b);\n    });\n    return\
    \ res;", "    std::vector<std::tuple<long, long>> res;\n    long row = 0;\n  \
    \  long col = 0;\n    long cnt = 0;\n    for(auto &row : lst) {\n        for(auto\
    \ &col : row) {\n            if(col == x) {\n                res.emplace_back(std::make_tuple(row,\
    \ col));\n                cnt++;\n            }\n        }\n    }\n    if(cnt\
    \ != 1) {\n        std::cerr << \"Invalid input\" << std::endl;\n    }\n    std::sort(res.begin(),\
    \ res.end(), [](const std::tuple<long, long> &a, const std::tuple<long, long>\
    \ &b) {\n        return std::get<0>(a) < std::get<0>(b);\n    });\n    std::sort(res.begin(),\
    \ res.end(), [](const std::tuple<long, long> &a, const std::tuple<long, long>\
    \ &b) {\n        return std::get<1>(a) < std::get<1>(b);\n    });\n    return\
    \ res;", "    // Write your code here\n    std::vector<std::tuple<long, long>>\
    \ res;\n    for(auto &row : lst){\n        for(auto &el : row){\n            if(el\
    \ == x){\n                res.push_back(std::make_tuple(row.size() - 1, row.size()\
    \ - 1));\n            }\n        }\n    }\n    std::sort(res.begin(), res.end(),\
    \ [](auto &a, auto &b){return std::get<0>(a) < std::get<0>(b);});\n    std::sort(res.begin(),\
    \ res.end(), [](auto &a, auto &b){return std::get<1>(a) > std::get<1>(b);});\n\
    \    return res;", "    std::vector<std::tuple<long, long>> res;\n    for(auto\
    \ &row : lst) {\n        for(auto &val : row) {\n            if(val == x) {\n\
    \                res.emplace_back(std::make_tuple(row.size() - 1, row.size() -\
    \ 1));\n            }\n        }\n    }\n    std::sort(res.begin(), res.end(),\
    \ [](const std::tuple<long, long> &a, const std::tuple<long, long> &b) {\n   \
    \     return std::get<0>(a) < std::get<0>(b);\n    });\n    std::sort(res.begin(),\
    \ res.end(), [](const std::tuple<long, long> &a, const std::tuple<long, long>\
    \ &b) {\n        return std::get<1>(a) < std::get<1>(b);\n    });\n    return\
    \ res;", "    std::vector<std::tuple<long, long>> res;\n    std::vector<std::tuple<long,\
    \ long>> row;\n    std::vector<std::tuple<long, long>> col;\n    std::vector<std::tuple<long,\
    \ long>> temp;\n    long row_index = 0;\n    long col_index = 0;\n    long row_size\
    \ = lst.size();\n    long col_size = lst[0].size();\n    long row_start = 0;\n\
    \    long col_start = 0;\n    for (long i = 0; i < row_size; i++) {\n        row.clear();\n\
    \        temp.clear();\n        for (long j = 0; j < col_size; j++) {\n      \
    \      if (lst[i][j] == x) {\n                row.push_back(std::make_tuple(i,\
    \ j));\n                temp.push_back(std::make_tuple(i, j));\n            }\n\
    \        }\n        std::sort(row.begin(), row.end(), [](std::tuple<long, long>\
    \ a, std::tuple<long, long> b) {\n            return std::get<0>(a) < std::get<0>(b);\n\
    \        });\n        std::sort(temp.begin(), temp.end(), [](std::tuple<long,\
    \ long> a, std::tuple<long, long> b) {\n            return std::get<1>(a) < std::get<1>(b);\n\
    \        });\n        for (long j = 0; j < col_size; j++) {\n            if (std::get<1>(temp[j])\
    \ == j) {\n                col.push_back(std::make_tuple(i, j));\n           \
    \ }\n        }\n        std::sort(col.begin(), col.end(), [](std::tuple<long,\
    \ long> a, std::tuple<long, long> b) {\n            return std::get<0>(a) < std::get<0>(b);\n\
    \        });\n        for (long j = 0; j < col_size; j++) {\n            if (std::get<0>(col[j])\
    \ == i) {\n                res.push_back(std::make_tuple(i, j));\n           \
    \ }\n        }\n        row_start = i;\n        col_start = j;\n    }\n    return\
    \ res;", "    std::vector<std::tuple<long, long>> res;\n    long n = lst.size();\n\
    \    long m = lst[0].size();\n    long cnt = 0;\n    for (long i = 0; i < n; i++)\
    \ {\n        long cnt2 = 0;\n        for (long j = 0; j < m; j++) {\n        \
    \    if (lst[i][j] == x) {\n                res.push_back({i, j});\n         \
    \       cnt2++;\n            }\n        }\n        if (cnt2 == m) {\n        \
    \    cnt++;\n        }\n    }\n    if (cnt == 0) {\n        res.clear();\n   \
    \ }\n    std::sort(res.begin(), res.end(), [](std::tuple<long, long> a, std::tuple<long,\
    \ long> b) {\n        return std::get<0>(a) < std::get<0>(b);\n    });\n    for\
    \ (long i = 0; i < n; i++) {\n        std::sort(res.begin() + i, res.end(), [](std::tuple<long,\
    \ long> a, std::tuple<long, long> b) {\n            return std::get<1>(a) > std::get<1>(b);\n\
    \        });\n    }\n    return res;", "    std::vector<std::tuple<long, long>>\
    \ res;\n    res.reserve(lst.size());\n    for (auto &row : lst) {\n        auto\
    \ it = std::find(row.begin(), row.end(), x);\n        if (it != row.end()) {\n\
    \            std::sort(row.begin(), row.end());\n            std::sort(row.rbegin(),\
    \ row.rend());\n            res.emplace_back(std::make_tuple(std::distance(row.begin(),\
    \ it), std::distance(row.rbegin(), it)));\n        }\n    }\n    return res;",
  "    std::vector<std::tuple<long, long>> res;\n    std::vector<long> row;\n    std::vector<long>\
    \ col;\n    for (auto &row : lst) {\n        row.clear();\n        col.clear();\n\
    \        for (auto &el : row) {\n            row.push_back(el);\n            col.push_back(el);\n\
    \        }\n        std::sort(row.begin(), row.end());\n        std::sort(col.begin(),\
    \ col.end());\n        res.emplace_back(std::make_tuple(row.back(), col.back()));\n\
    \    }\n    std::sort(res.begin(), res.end(), [](const std::tuple<long, long>\
    \ &a, const std::tuple<long, long> &b) {\n        return std::get<0>(a) < std::get<0>(b);\n\
    \    });\n    for (auto &el : res) {\n        if (std::get<0>(el) == x) {\n  \
    \          return res;\n        }\n    }\n    return res;", "    std::vector<std::tuple<long,\
    \ long>> res;\n    std::vector<long> row;\n    std::vector<long> col;\n    for\
    \ (auto &v : lst) {\n        row.push_back(v[0]);\n        col.push_back(v[1]);\n\
    \    }\n    std::sort(row.begin(), row.end());\n    std::sort(col.begin(), col.end());\n\
    \    for (long i = 0; i < row.size(); i++) {\n        if (row[i] == x) {\n   \
    \         std::tuple<long, long> t = std::make_tuple(i, col[i]);\n           \
    \ res.push_back(t);\n        }\n    }\n    return res;", "    // Your code here\n\
    \    std::vector<std::tuple<long, long>> res;\n    for(auto &row : lst) {\n  \
    \      for(auto &el : row) {\n            if(el == x) {\n                res.push_back(std::make_tuple(row.size()\
    \ - 1, row.size() - 1));\n            }\n        }\n    }\n    std::sort(res.begin(),\
    \ res.end(), [](const std::tuple<long, long> &a, const std::tuple<long, long>\
    \ &b) { return std::get<0>(a) > std::get<0>(b); });\n    std::sort(res.begin(),\
    \ res.end(), [](const std::tuple<long, long> &a, const std::tuple<long, long>\
    \ &b) { return std::get<1>(a) > std::get<1>(b); });\n    return res;", "    //\
    \ Your code here\n    std::vector<std::tuple<long, long>> res;\n    for(auto &row\
    \ : lst) {\n        for(auto &col : row) {\n            if(col == x) {\n     \
    \           res.emplace_back(std::make_tuple(row.size() - 1, col.size() - 1));\n\
    \            }\n        }\n    }\n    std::sort(res.begin(), res.end(), [](const\
    \ std::tuple<long, long> &a, const std::tuple<long, long> &b) {\n        return\
    \ std::get<0>(a) < std::get<0>(b);\n    });\n    std::sort(res.begin(), res.end(),\
    \ [](const std::tuple<long, long> &a, const std::tuple<long, long> &b) {\n   \
    \     return std::get<1>(a) < std::get<1>(b);\n    });\n    return res;", "  \
    \  // Your code here\n    std::vector<std::tuple<long, long>> res;\n    for(auto\
    \ &row : lst) {\n        for(auto &col : row) {\n            if(col == x) {\n\
    \                res.push_back(std::make_tuple(row.size(), col.size()));\n   \
    \         }\n        }\n    }\n    std::sort(res.begin(), res.end(), [](const\
    \ std::tuple<long, long> &a, const std::tuple<long, long> &b) -> bool {\n    \
    \    return std::get<0>(a) < std::get<0>(b);\n    });\n    std::sort(res.begin(),\
    \ res.end(), [](const std::tuple<long, long> &a, const std::tuple<long, long>\
    \ &b) -> bool {\n        return std::get<1>(a) < std::get<1>(b);\n    });\n  \
    \  return res;", "    // Write your code here\n    std::vector<std::tuple<long,\
    \ long>> res;\n    for(auto &row : lst){\n        for(auto &el : row){\n     \
    \       if(el == x){\n                res.push_back(std::make_tuple(row.size()\
    \ - 1, row.size() - 1));\n            }\n        }\n    }\n    std::sort(res.begin(),\
    \ res.end(), [](auto &a, auto &b){\n        return std::get<0>(a) < std::get<0>(b);\n\
    \    });\n    std::sort(res.begin(), res.end(), [](auto &a, auto &b){\n      \
    \  return std::get<1>(a) > std::get<1>(b);\n    });\n    return res;", "    std::vector<std::tuple<long,\
    \ long>> res;\n    long row = 0;\n    long col = 0;\n    long cnt = 0;\n    long\
    \ cnt2 = 0;\n    long cnt3 = 0;\n    for (auto &row : lst) {\n        cnt = 0;\n\
    \        cnt2 = 0;\n        cnt3 = 0;\n        for (auto &col : row) {\n     \
    \       if (col == x) {\n                res.emplace_back(std::make_tuple(row,\
    \ col));\n                cnt++;\n            }\n            if (col == x - 1)\
    \ {\n                res.emplace_back(std::make_tuple(row, col));\n          \
    \      cnt2++;\n            }\n            if (col == x - 2) {\n             \
    \   res.emplace_back(std::make_tuple(row, col));\n                cnt3++;\n  \
    \          }\n        }\n        if (cnt != 0) {\n            std::sort(res.begin(),\
    \ res.end(), [](std::tuple<long, long> a, std::tuple<long, long> b) {\n      \
    \          return std::get<0>(a) < std::get<0>(b);\n            });\n        \
    \    std::sort(res.begin(), res.end(), [](std::tuple<long, long> a, std::tuple<long,\
    \ long> b) {\n                return std::get<1>(a) < std::get<1>(b);\n      \
    \      });\n        }\n        if (cnt2 != 0) {\n            std::sort(res.begin(),\
    \ res.end(), [](std::tuple<long, long> a, std::tuple<long, long> b) {\n      \
    \          return std::get<0>(a) < std::get<0>(b);\n            });\n        \
    \    std::sort(res.begin(), res.end(), [](std::tuple<long, long> a, std::tuple<long,\
    \ long> b) {\n                return std::get<1>(a) < std::get<1>(b);\n      \
    \      });\n        }\n        if (cnt3 != 0) {\n            std::sort(res.begin(),\
    \ res.end(), [](std::tuple<long, long> a, std::tuple<long, long> b) {\n      \
    \          return std::get<0>(a) < std::get<0>(b);\n            });\n        \
    \    std::sort(res.begin(), res.end(), [](std::tuple<long, long> a, std::tuple<long,\
    \ long> b) {\n                return std::get<1>(a) < std::get<1>(b);\n      \
    \      });\n        }\n    }\n    return res;", "    std::vector<std::tuple<long,\
    \ long>> res;\n    std::vector<long> row;\n    std::vector<long> col;\n    for\
    \ (auto &i : lst) {\n        row.push_back(i.size());\n        col.push_back(0);\n\
    \    }\n    std::sort(row.begin(), row.end(), [](long a, long b) { return a >\
    \ b; });\n    std::sort(col.begin(), col.end(), [](long a, long b) { return a\
    \ > b; });\n    for (long i = 0; i < row.size(); i++) {\n        for (long j =\
    \ 0; j < col[i]; j++) {\n            if (row[i] == x && col[j] == x) {\n     \
    \           res.push_back(std::make_tuple(i, j));\n            }\n        }\n\
    \    }\n    return res;", "    std::vector<std::tuple<long, long>> res;\n    std::vector<long>\
    \ row;\n    std::vector<long> col;\n    long cnt = 0;\n    for (auto &v : lst)\
    \ {\n        row.push_back(v[0]);\n        col.push_back(v[1]);\n        cnt +=\
    \ v[0];\n    }\n    long maxcnt = cnt;\n    for (long i = 0; i < row.size(); i++)\
    \ {\n        long cnt = 0;\n        for (auto &v : lst) {\n            if (v[0]\
    \ == row[i] && v[1] == col[i]) {\n                cnt += v[0];\n            }\n\
    \        }\n        if (cnt > maxcnt) {\n            maxcnt = cnt;\n        }\n\
    \    }\n    for (long i = 0; i < row.size(); i++) {\n        long cnt = 0;\n \
    \       for (auto &v : lst) {\n            if (v[0] == row[i] && v[1] == col[i])\
    \ {\n                cnt += v[0];\n            }\n        }\n        if (cnt ==\
    \ maxcnt) {\n            res.push_back(std::make_tuple(i, cnt));\n        }\n\
    \    }\n    std::sort(res.begin(), res.end(), [](auto &a, auto &b) { return a[1]\
    \ < b[1]; });\n    std::sort(res.begin(), res.end(), [](auto &a, auto &b) { return\
    \ a[0] > b[0]; });\n    return res;", "    std::vector<std::tuple<long, long>>\
    \ res;\n    res.reserve(lst.size());\n    for (auto &row : lst) {\n        std::tuple<long,\
    \ long> coord;\n        coord.first = row[0];\n        coord.second = row[lst.size()\
    \ - 1];\n        res.push_back(coord);\n    }\n    std::sort(res.begin(), res.end(),\
    \ [](const std::tuple<long, long> &a, const std::tuple<long, long> &b) {\n   \
    \     return std::get<0>(a) < std::get<0>(b);\n    });\n    std::sort(res.begin(),\
    \ res.end(), [](const std::tuple<long, long> &a, const std::tuple<long, long>\
    \ &b) {\n        return std::get<1>(a) < std::get<1>(b);\n    });\n    for (auto\
    \ &row : res) {\n        if (std::get<0>(row) == x) {\n            return res;\n\
    \        }\n    }\n    return res;", "    std::vector<std::tuple<long, long>>\
    \ res;\n    long row = 0;\n    long col = 0;\n    for (auto &row : lst) {\n  \
    \      col = std::distance(row.begin(), std::find(row.begin(), row.end(), x));\n\
    \        res.emplace_back(std::make_tuple(row, col));\n    }\n    std::sort(res.begin(),\
    \ res.end(), [](const std::tuple<long, long> &a, const std::tuple<long, long>\
    \ &b) { return std::get<0>(a) < std::get<0>(b); });\n    std::sort(res.begin(),\
    \ res.end(), [](const std::tuple<long, long> &a, const std::tuple<long, long>\
    \ &b) { return std::get<1>(a) > std::get<1>(b); });\n    return res;", "    std::vector<std::tuple<long,\
    \ long>> res;\n    res.reserve(lst.size());\n    for (auto &row : lst) {\n   \
    \     std::vector<std::tuple<long, long>> rowres;\n        rowres.reserve(row.size());\n\
    \        for (auto &el : row) {\n            if (el == x) {\n                rowres.emplace_back(std::make_tuple(row.size()\
    \ - 1, row.size() - 1));\n            } else {\n                rowres.emplace_back(std::make_tuple(row.size()\
    \ - 1, el));\n            }\n        }\n        res.emplace_back(std::move(rowres));\n\
    \    }\n    std::sort(res.begin(), res.end(), [](const std::tuple<long, long>\
    \ &a, const std::tuple<long, long> &b) -> bool {\n        return std::get<0>(a)\
    \ < std::get<0>(b);\n    });\n    std::sort(res.begin(), res.end(), [](const std::tuple<long,\
    \ long> &a, const std::tuple<long, long> &b) -> bool {\n        return std::get<1>(a)\
    \ < std::get<1>(b);\n    });\n    return res;", "    // Write your code here\n\
    \    std::vector<std::tuple<long, long>> res;\n    for(auto &row:lst){\n     \
    \   for(auto &val:row){\n            if(val == x){\n                res.push_back(std::make_tuple(row.size(),row.size()-1));\n\
    \            }\n        }\n    }\n    std::sort(res.begin(),res.end(),[](std::tuple<long,\
    \ long> a, std::tuple<long, long> b){\n        return std::get<0>(a) < std::get<0>(b);\n\
    \    });\n    std::sort(res.begin(),res.end(),[](std::tuple<long, long> a, std::tuple<long,\
    \ long> b){\n        return std::get<1>(a) > std::get<1>(b);\n    });\n    return\
    \ res;", "    // Your code here\n    std::vector<std::tuple<long, long>> res;\n\
    \    for(auto &row : lst){\n        for(auto &col : row){\n            if(col\
    \ == x){\n                res.push_back(std::make_tuple(row.size() - 1, col.size()\
    \ - 1));\n            }\n        }\n    }\n    std::sort(res.begin(), res.end(),\
    \ [](const std::tuple<long, long> &a, const std::tuple<long, long> &b){\n    \
    \    return std::get<0>(a) < std::get<0>(b);\n    });\n    std::sort(res.begin(),\
    \ res.end(), [](const std::tuple<long, long> &a, const std::tuple<long, long>\
    \ &b){\n        return std::get<1>(a) > std::get<1>(b);\n    });\n    return res;",
  "    std::vector<std::tuple<long, long>> res;\n    if (lst.empty()) {\n        return\
    \ res;\n    }\n    std::vector<std::tuple<long, long>> row;\n    std::vector<std::tuple<long,\
    \ long>> row2;\n    for (auto &i : lst) {\n        row.push_back(i);\n    }\n\
    \    for (auto &i : row) {\n        std::sort(i.begin(), i.end());\n    }\n  \
    \  for (auto &i : row) {\n        std::sort(i.begin(), i.end(), [](long a, long\
    \ b) { return b < a; });\n    }\n    for (auto &i : row) {\n        std::reverse(i.begin(),\
    \ i.end());\n    }\n    for (auto &i : row) {\n        std::sort(i.begin(), i.end(),\
    \ [](long a, long b) { return b < a; });\n    }\n    for (auto &i : row) {\n \
    \       std::reverse(i.begin(), i.end());\n    }\n    for (auto &i : row) {\n\
    \        std::sort(i.begin(), i.end(), [](long a, long b) { return b < a; });\n\
    \    }\n    for (auto &i : row) {\n        std::reverse(i.begin(), i.end());\n\
    \    }\n    for (auto &i : row) {\n        std::sort(i.begin(), i.end(), [](long\
    \ a, long b) { return b < a; });\n    }\n    for (auto &i : row) {\n        std::reverse(i.begin(),\
    \ i.end());\n    }\n    for (auto &i : row) {\n        std::sort(i.begin(), i.end(),\
    \ [](long a, long b) { return b < a; });\n    }\n    for (auto &i : row) {\n \
    \       std::reverse(i.begin(), i.end());\n    }\n    for (auto &i : row) {\n\
    \        std::sort(i.begin(), i.end(), [](long a, long b) { return b < a; });\n\
    \    }\n    for (auto &i : row) {\n        std::reverse(i.begin(), i.end());\n\
    \    }\n    for (auto &i : row) {\n        std::sort(i.begin(), i.end(), [](long\
    \ a, long b) { return b < a; });\n    }\n    for (auto &i : row) {\n        std::reverse(i.begin(),\
    \ i.end());\n    }\n    for (auto &i : row) {\n        std::sort(i.begin(), i.end(),\
    \ [](long a, long b) { return b < a; });\n    }\n    for (auto &i : row) {\n \
    \       std::reverse(i.begin(), i.end());\n    }\n    for (auto &i : row) {\n\
    \        std::sort(i.begin(), i.end(), [](long a, long b) { return b < a; });\n\
    \    }\n    for (auto &i ", "    std::vector<std::tuple<long, long>> res;\n  \
    \  long n = lst.size();\n    long m = lst[0].size();\n    long cnt = 0;\n    for\
    \ (long i = 0; i < n; i++) {\n        cnt += lst[i][0] == x;\n        if (cnt\
    \ >= m) {\n            std::sort(res.begin(), res.end(), [](auto a, auto b) {\
    \ return std::get<0>(a) > std::get<0>(b); });\n            std::sort(res.begin(),\
    \ res.end(), [](auto a, auto b) { return std::get<1>(a) > std::get<1>(b); });\n\
    \            break;\n        }\n    }\n    return res;", "    std::vector<std::tuple<long,\
    \ long>> res;\n    std::vector<long> row;\n    std::vector<long> col;\n    long\
    \ rowId = 0;\n    long colId = 0;\n    for (auto &row : lst) {\n        row.clear();\n\
    \        col.clear();\n        for (auto &col : row) {\n            if (col ==\
    \ x) {\n                res.emplace_back(rowId, colId);\n            }\n     \
    \       row.push_back(col);\n            col.push_back(colId);\n            colId++;\n\
    \        }\n        rowId++;\n    }\n    std::sort(res.begin(), res.end(), [](const\
    \ std::tuple<long, long> &a, const std::tuple<long, long> &b) -> bool {\n    \
    \    return std::get<0>(a) < std::get<0>(b);\n    });\n    std::sort(res.begin(),\
    \ res.end(), [](const std::tuple<long, long> &a, const std::tuple<long, long>\
    \ &b) -> bool {\n        return std::get<1>(a) < std::get<1>(b);\n    });\n  \
    \  return res;", "    // Write your code here\n    std::vector<std::tuple<long,\
    \ long>> res;\n    for(auto &row : lst){\n        for(auto &el : row){\n     \
    \       if(el == x){\n                res.emplace_back(row.size() - 1, row.size()\
    \ - 1);\n            }\n        }\n    }\n    std::sort(res.begin(), res.end(),\
    \ [](const std::tuple<long, long> &a, const std::tuple<long, long> &b){\n    \
    \    return std::get<0>(a) < std::get<0>(b);\n    });\n    std::sort(res.begin(),\
    \ res.end(), [](const std::tuple<long, long> &a, const std::tuple<long, long>\
    \ &b){\n        return std::get<1>(a) < std::get<1>(b);\n    });\n    return res;",
  "    std::vector<std::tuple<long, long>> res;\n    res.reserve(lst.size());\n  \
    \  for (auto &row : lst) {\n        std::sort(row.begin(), row.end());\n     \
    \   std::reverse(row.begin(), row.end());\n        std::sort(row.begin(), row.end());\n\
    \        std::reverse(row.begin(), row.end());\n        std::sort(row.begin(),\
    \ row.end());\n        std::reverse(row.begin(), row.end());\n        std::sort(row.begin(),\
    \ row.end());\n        std::reverse(row.begin(), row.end());\n        std::sort(row.begin(),\
    \ row.end());\n        std::reverse(row.begin(), row.end());\n        std::sort(row.begin(),\
    \ row.end());\n        std::reverse(row.begin(), row.end());\n        std::sort(row.begin(),\
    \ row.end());\n        std::reverse(row.begin(), row.end());\n        std::sort(row.begin(),\
    \ row.end());\n        std::reverse(row.begin(), row.end());\n        std::sort(row.begin(),\
    \ row.end());\n        std::reverse(row.begin(), row.end());\n        std::sort(row.begin(),\
    \ row.end());\n        std::reverse(row.begin(), row.end());\n        std::sort(row.begin(),\
    \ row.end());\n        std::reverse(row.begin(), row.end());\n        std::sort(row.begin(),\
    \ row.end());\n        std::reverse(row.begin(), row.end());\n        std::sort(row.begin(),\
    \ row.end());\n        std::reverse(row.begin(), row.end());\n        std::sort(row.begin(),\
    \ row.end());\n        std::reverse(row.begin(), row.end());\n        std::sort(row.begin(),\
    \ row.end());\n        std::reverse(row.begin(), row.end());\n        std::sort(row.begin(),\
    \ row.end());\n        std::reverse(row.begin(), row.end());\n        std::sort(row.begin(),\
    \ row.end());\n        std::reverse(row.begin(), row.end());\n        std::sort(row.begin(),\
    \ row.end());\n        std::reverse(row.begin(), row.end());\n        std::sort(row.begin(),\
    \ row.end());\n        std::reverse(row.begin(), row.end());\n        std::sort(row.begin(),\
    \ row.end());\n        std::reverse(row.begin(), row.end());\n        std::sort(row.begin(),\
    \ row.end());\n        std::reverse(row.begin(), row.end());\n        std::sort(row.begin(),\
    \ row.end());\n        std::reverse(row.begin(), row.end());\n        std::sort(row.begin(),\
    \ row.end());\n        std::reverse(row.begin(), row.end());\n        std::sort(row.begin(),\
    \ row.end());\n        std::reverse(row.begin(), row.end());\n        std::sort(row.begin(), ",
  "    // Write your code here\n    std::vector<std::tuple<long, long>> res;\n   \
    \ for(auto &row : lst) {\n        for(auto &el : row) {\n            if(el ==\
    \ x) {\n                res.push_back(std::make_tuple(row.size() - 1, row.size()\
    \ - 1));\n            }\n        }\n    }\n    std::sort(res.begin(), res.end(),\
    \ [](std::tuple<long, long> a, std::tuple<long, long> b){\n        return std::get<0>(a)\
    \ < std::get<0>(b);\n    });\n    std::sort(res.begin(), res.end(), [](std::tuple<long,\
    \ long> a, std::tuple<long, long> b){\n        return std::get<1>(a) > std::get<1>(b);\n\
    \    });\n    return res;", "    // Your code here\n    std::vector<std::tuple<long,\
    \ long>> res;\n    for(auto &row : lst) {\n        for(auto &val : row) {\n  \
    \          if(val == x) {\n                res.push_back({row.size(), row.size()\
    \ - 1});\n            }\n        }\n    }\n    std::sort(res.begin(), res.end(),\
    \ [](const std::tuple<long, long> &a, const std::tuple<long, long> &b) -> bool\
    \ {\n        return std::get<0>(a) < std::get<0>(b);\n    });\n    std::sort(res.begin(),\
    \ res.end(), [](const std::tuple<long, long> &a, const std::tuple<long, long>\
    \ &b) -> bool {\n        return std::get<1>(a) < std::get<1>(b);\n    });\n  \
    \  return res;", "    // Your code here\n    std::vector<std::tuple<long, long>>\
    \ res;\n    for(auto &row : lst) {\n        for(auto &val : row) {\n         \
    \   if(val == x) {\n                res.emplace_back(row.size() - 1, row.size()\
    \ - 1);\n            }\n        }\n    }\n    std::sort(res.begin(), res.end(),\
    \ [](auto &a, auto &b){\n        return std::get<0>(a) < std::get<0>(b);\n   \
    \ });\n    std::sort(res.begin(), res.end(), [](auto &a, auto &b){\n        return\
    \ std::get<1>(a) < std::get<1>(b);\n    });\n    return res;", "    std::vector<std::tuple<long,\
    \ long>> res;\n    long n = lst.size();\n    long m = lst[0].size();\n    long\
    \ i = 0;\n    long j = 0;\n    long k = 0;\n    long l = 0;\n    long m1 = m;\n\
    \    long n1 = n;\n    long xx = x;\n    long yy = 1;\n    long zz = 1;\n    long\
    \ aa = 1;\n    long bb = 1;\n    long cc = 1;\n    long dd = 1;\n    long ee =\
    \ 1;\n    long ff = 1;\n    long gg = 1;\n    long hh = 1;\n    long ii = 0;\n\
    \    long jj = 0;\n    long kk = 0;\n    long ll = 0;\n    long mm = 1;\n    long\
    \ nn = 0;\n    long oo = 1;\n    long pp = 1;\n    long qq = 1;\n    long rr =\
    \ 0;\n    long ss;\n    long tt;\n    long uu;\n    long vv;\n    long ww;\n \
    \   long xx;\n    long yy;\n    long zz;\n    long aa;\n    long bb;\n    long\
    \ cc;\n    long dd;\n    long ee;\n    long ff;\n    long gg;\n    long hh;\n\
    \    long ii;\n    long jj;\n    long kk;\n    long ll;\n    long mm;\n    long\
    \ nn;\n    long oo;\n    long pp;\n    long qq;\n    long rr;\n    long ss;\n\
    \    long tt;\n    long uu;\n    long vv;\n    long ww;\n    long xx;\n    long\
    \ yy;\n    long zz;\n    long aa;\n    long bb;\n    long cc;\n    long dd;\n\
    \    long ee;\n    long ff;\n    long gg;\n    long hh;\n    long ii;\n    long\
    \ jj;\n    long kk;\n    long ll;\n    long mm;\n    long nn;\n    long oo;\n\
    \    long pp;\n    long qq;\n    long rr;\n    long ss;\n    long tt;\n    long\
    \ uu;\n    long vv;\n    long ww;\n    long xx;\n    long yy;\n    long zz;\n\
    \    long aa;\n    long bb;\n    long cc;\n    long dd;\n    long ee;\n    long\
    \ ff;\n    long gg;\n    long hh;\n    long ii;\n    long ", "    std::vector<std::tuple<long,\
    \ long>> res;\n    std::vector<long> row;\n    std::vector<long> col;\n    for\
    \ (auto &row : lst) {\n        row.clear();\n        col.clear();\n        for\
    \ (auto &elem : row) {\n            row.push_back(elem);\n            col.push_back(elem);\n\
    \        }\n    }\n    for (auto &row : lst) {\n        std::sort(row.begin(),\
    \ row.end());\n        std::sort(col.begin(), col.end());\n        for (auto &elem\
    \ : row) {\n            if (elem == x) {\n                res.push_back(std::make_tuple(row.size()\
    \ - 1, col.size() - 1));\n                break;\n            }\n        }\n \
    \   }\n    return res;", "    std::vector<std::tuple<long, long>> res;\n    std::vector<long>\
    \ row;\n    std::vector<long> col;\n    long cnt = 0;\n    for (auto &row : lst)\
    \ {\n        row.clear();\n        col.clear();\n        cnt = 0;\n        for\
    \ (auto &el : row) {\n            row.push_back(el);\n            col.push_back(el);\n\
    \            cnt++;\n        }\n        if (cnt > x) {\n            std::sort(row.begin(),\
    \ row.end());\n            std::sort(col.begin(), col.end());\n            res.push_back(std::make_tuple(row.back(),\
    \ col.back()));\n        }\n    }\n    return res;", "    std::vector<std::tuple<long,\
    \ long>> res;\n    std::vector<long> row;\n    std::vector<long> col;\n    long\
    \ row_index = 0;\n    long col_index = 0;\n    long row_max = std::accumulate(lst.begin(),\
    \ lst.end(), 0);\n    long col_max = std::accumulate(lst[0].begin(), lst[0].end(),\
    \ 0);\n    for (auto &row : lst) {\n        row.clear();\n        col.clear();\n\
    \        for (auto &col : row) {\n            col.clear();\n            col.push_back(0);\n\
    \            col.push_back(col_index);\n            col_index++;\n        }\n\
    \        row.push_back(row_index);\n        row.push_back(col_index);\n      \
    \  row_index++;\n    }\n    for (auto &row : lst) {\n        row.clear();\n  \
    \      col.clear();\n        for (auto &col : row) {\n            col.clear();\n\
    \            col.push_back(col_index);\n            col_index++;\n        }\n\
    \        row.push_back(row_index);\n        row.push_back(col_index);\n      \
    \  row_index++;\n    }\n    for (auto &row : lst) {\n        row.clear();\n  \
    \      col.clear();\n        for (auto &col : row) {\n            col.clear();\n\
    \            col.push_back(col_index);\n            col_index++;\n        }\n\
    \        row.push_back(row_index);\n        row.push_back(col_index);\n      \
    \  row_index++;\n    }\n    for (auto &row : lst) {\n        row.clear();\n  \
    \      col.clear();\n        for (auto &col : row) {\n            col.clear();\n\
    \            col.push_back(col_index);\n            col_index++;\n        }\n\
    \        row.push_back(row_index);\n        row.push_back(col_index);\n      \
    \  row_index++;\n    }\n    for (auto &row : lst) {\n        row.clear();\n  \
    \      col.clear();\n        for (auto &col : row) {\n            col.clear();\n\
    \            col.push_back(col_index);\n            col_index++;\n        }\n\
    \        row.push_back(row_index);\n        row.push_back(col_index);\n      \
    \  row_index++;\n    }\n    for (auto &row : lst) {\n        row.clear();\n  \
    \      col.clear();\n        for (auto &col : row) {\n            col.clear();\n\
    \            col.push_back(col_index);\n            col_index++;\n        }\n\
    \        row.push_back(row_index);\n        row.push_back(col_index);\n      \
    \  row_index++;\n    }\n    for (auto &row : lst) {\n        row.clear();\n  \
    \      col.clear();\n        for (auto &col : row) {\n            col.clear();\n\
    \            col.push_back(col_index);\n            col_index++;\n        }\n\
    \        row.push_back(row_index);\n        row.push_back(col_index);\n      \
    \  row_index++;\n    }\n    for (auto &row : lst) {\n        row.", "    std::vector<std::tuple<long,\
    \ long>> res;\n    std::vector<long> row;\n    std::vector<long> col;\n    long\
    \ row_index = 0;\n    long col_index = 0;\n    long row_size = lst.size();\n \
    \   long col_size = lst[0].size();\n    long row_max = std::max(row_size, col_size);\n\
    \    long col_max = std::max(row_size, col_size);\n    for (long i = 0; i < row_size;\
    \ i++) {\n        row.push_back(0);\n    }\n    for (long i = 0; i < col_size;\
    \ i++) {\n        col.push_back(0);\n    }\n    for (long i = 0; i < row_size;\
    \ i++) {\n        for (long j = 0; j < col_size; j++) {\n            if (lst[i][j]\
    \ == x) {\n                row.push_back(j);\n                col.push_back(i);\n\
    \            }\n        }\n    }\n    std::sort(row.begin(), row.end());\n   \
    \ std::sort(col.begin(), col.end());\n    for (long i = 0; i < row_size; i++)\
    \ {\n        for (long j = 0; j < col_size; j++) {\n            if (row[i] ==\
    \ j) {\n                res.push_back(std::make_tuple(i, col[j]));\n         \
    \   }\n        }\n    }\n    return res;", "    std::vector<std::tuple<long, long>>\
    \ res;\n    long n = lst.size();\n    long m = lst[0].size();\n    long cnt =\
    \ 0;\n    for (long i = 0; i < n; i++) {\n        for (long j = 0; j < m; j++)\
    \ {\n            if (lst[i][j] == x) {\n                res.push_back({i, j});\n\
    \                cnt++;\n            }\n        }\n    }\n    if (cnt == 0) {\n\
    \        res.push_back(std::make_tuple(0, 0));\n    }\n    std::sort(res.begin(),\
    \ res.end(), [](const std::tuple<long, long> &a, const std::tuple<long, long>\
    \ &b) {\n        return std::get<0>(a) < std::get<0>(b);\n    });\n    std::sort(res.begin(),\
    \ res.end(), [](const std::tuple<long, long> &a, const std::tuple<long, long>\
    \ &b) {\n        return std::get<1>(a) < std::get<1>(b);\n    });\n    return\
    \ res;", "    std::vector<std::tuple<long, long>> res;\n    for(auto &row : lst)\
    \ {\n        for(auto &el : row) {\n            if(el == x) {\n              \
    \  res.push_back(std::make_tuple(row.size() - 1, row.size() - 1));\n         \
    \   }\n        }\n    }\n    std::sort(res.begin(), res.end(), [](auto &a, auto\
    \ &b) { return std::get<0>(a) < std::get<0>(b); });\n    std::sort(res.begin(),\
    \ res.end(), [](auto &a, auto &b) { return std::get<1>(a) < std::get<1>(b); });\n\
    \    return res;", "    std::vector<std::tuple<long, long>> res;\n    long n =\
    \ lst.size();\n    long m = lst[0].size();\n    long i, j, k;\n    long row =\
    \ 0;\n    long col = 0;\n    for (i = 0; i < n; i++) {\n        for (j = 0; j\
    \ < m; j++) {\n            if (lst[i][j] == x) {\n                res.push_back(std::make_tuple(i,\
    \ j));\n                row = i;\n                col = j;\n                break;\n\
    \            }\n        }\n    }\n    std::sort(res.begin(), res.end(), [](const\
    \ std::tuple<long, long>& a, const std::tuple<long, long>& b) {\n        return\
    \ std::get<0>(a) < std::get<0>(b);\n    });\n    std::sort(res.begin(), res.end(),\
    \ [](const std::tuple<long, long>& a, const std::tuple<long, long>& b) {\n   \
    \     return std::get<1>(a) < std::get<1>(b);\n    });\n    for (i = 0; i < n;\
    \ i++) {\n        for (j = 0; j < m; j++) {\n            if (std::get<0>(res.at(i))\
    \ == row) {\n                res.at(i) = std::make_tuple(i, j);\n            \
    \    break;\n            }\n        }\n    }\n    return res;", "    std::vector<std::tuple<long,\
    \ long>> res;\n    long n = lst.size();\n    long m = lst[0].size();\n    long\
    \ cnt = 0;\n    for (long i = 0; i < n; i++) {\n        cnt += lst[i][i];\n  \
    \      if (cnt > x) {\n            break;\n        }\n    }\n    for (long i =\
    \ 0; i < m; i++) {\n        cnt += lst[0][i];\n        if (cnt > x) {\n      \
    \      break;\n        }\n    }\n    for (long i = 0; i < n; i++) {\n        for\
    \ (long j = 0; j < m; j++) {\n            cnt += lst[i][j];\n            if (cnt\
    \ > x) {\n                break;\n            }\n        }\n        if (cnt >\
    \ x) {\n            break;\n        }\n        res.push_back(std::make_tuple(i,\
    \ j));\n    }\n    std::sort(res.begin(), res.end(), [](const std::tuple<long,\
    \ long>& a, const std::tuple<long, long>& b) {\n        return std::get<0>(a)\
    \ < std::get<0>(b);\n    });\n    std::sort(res.begin(), res.end(), [](const std::tuple<long,\
    \ long>& a, const std::tuple<long, long>& b) {\n        return std::get<1>(a)\
    \ < std::get<1>(b);\n    });\n    return res;", "    std::vector<std::tuple<long,\
    \ long>> res;\n    std::vector<std::vector<long>> row;\n    std::vector<long>\
    \ col;\n    long rowId = 0;\n    long colId = 0;\n    for (auto &v : lst) {\n\
    \        row.push_back(v);\n        colId = col.size();\n        for (auto &v2\
    \ : v) {\n            if (v2 != x) {\n                col.push_back(v2);\n   \
    \         }\n        }\n        if (col.size() == rowId) {\n            res.push_back(std::make_tuple(rowId,\
    \ colId));\n            rowId++;\n            colId = 0;\n        }\n    }\n \
    \   return res;", "    std::vector<std::tuple<long, long>> res;\n    std::vector<std::vector<long>>\
    \ temp;\n    std::vector<long> row;\n    std::vector<long> col;\n    long cnt\
    \ = 0;\n    for(auto &i : lst) {\n        row.push_back(i[0]);\n        col.push_back(i.size()\
    \ - 1);\n        temp.push_back(i);\n    }\n    for(auto &i : temp) {\n      \
    \  for(auto &j : i) {\n            if(j == x) {\n                res.push_back({cnt++,\
    \ col.back()});\n            }\n        }\n    }\n    std::sort(res.begin(), res.end(),\
    \ [](std::tuple<long, long> a, std::tuple<long, long> b) {\n        return std::get<0>(a)\
    \ < std::get<0>(b);\n    });\n    std::sort(res.begin(), res.end(), [](std::tuple<long,\
    \ long> a, std::tuple<long, long> b) {\n        return std::get<1>(a) < std::get<1>(b);\n\
    \    });\n    return res;", "    // Write your code here\n    std::vector<std::tuple<long,\
    \ long>> res;\n    for(auto &row : lst){\n        for(auto &col : row){\n    \
    \        if(col == x){\n                res.push_back({row.size() - 1, col.size()\
    \ - 1});\n            }\n        }\n    }\n    std::sort(res.begin(), res.end(),\
    \ [](std::tuple<long, long> a, std::tuple<long, long> b){\n        return std::get<0>(a)\
    \ < std::get<0>(b);\n    });\n    std::sort(res.begin(), res.end(), [](std::tuple<long,\
    \ long> a, std::tuple<long, long> b){\n        return std::get<1>(a) < std::get<1>(b);\n\
    \    });\n    return res;", "    // Your code here\n    std::vector<std::tuple<long,\
    \ long>> res;\n    for(auto &row : lst) {\n        for(auto &el : row) {\n   \
    \         if(el == x) {\n                res.emplace_back(std::make_tuple(row.size()\
    \ - 1, row.size() - 1));\n            }\n        }\n    }\n    std::sort(res.begin(),\
    \ res.end(), [](const std::tuple<long, long> &a, const std::tuple<long, long>\
    \ &b) {\n        return std::get<0>(a) < std::get<0>(b);\n    });\n    std::sort(res.begin(),\
    \ res.end(), [](const std::tuple<long, long> &a, const std::tuple<long, long>\
    \ &b) {\n        return std::get<1>(a) < std::get<1>(b);\n    });\n    return\
    \ res;", "    std::vector<std::tuple<long, long>> res;\n    std::vector<long>\
    \ row;\n    std::vector<long> col;\n    long row_index = 0;\n    long col_index\
    \ = 0;\n    long row_size = lst.size();\n    long col_size = lst[0].size();\n\
    \    long row_sum = 0;\n    long col_sum = 0;\n    for (long i = 0; i < row_size;\
    \ i++) {\n        row.push_back(lst[i][i]);\n        row_sum += lst[i][i];\n \
    \   }\n    for (long i = 0; i < col_size; i++) {\n        col.push_back(lst[0][i]);\n\
    \        col_sum += lst[0][i];\n    }\n    for (long i = 0; i < row_size; i++)\
    \ {\n        for (long j = 0; j < col_size; j++) {\n            if (lst[i][j]\
    \ == x) {\n                res.push_back(std::make_tuple(i, j));\n           \
    \ }\n        }\n    }\n    std::sort(res.begin(), res.end(), [](const std::tuple<long,\
    \ long> &a, const std::tuple<long, long> &b) {\n        return std::get<0>(a)\
    \ < std::get<0>(b);\n    });\n    std::sort(res.begin(), res.end(), [](const std::tuple<long,\
    \ long> &a, const std::tuple<long, long> &b) {\n        return std::get<1>(a)\
    \ > std::get<1>(b);\n    });\n    for (auto &it : res) {\n        long row = std::get<0>(it);\n\
    \        long col = std::get<1>(it);\n        row_index += row;\n        col_index\
    \ += col;\n    }\n    row_index -= row_sum;\n    col_index -= col_sum;\n    return\
    \ res;", "    std::vector<std::tuple<long, long>> res;\n    std::vector<long>\
    \ row;\n    std::vector<long> col;\n    long cnt = 0;\n    for (auto &v : lst)\
    \ {\n        row.push_back(v[0]);\n        col.push_back(v[1]);\n        cnt +=\
    \ v[0];\n    }\n    long cnt2 = 0;\n    for (auto &v : row) {\n        cnt2 +=\
    \ v;\n    }\n    if (cnt2 == 0) {\n        return res;\n    }\n    long cnt3 =\
    \ 0;\n    for (auto &v : col) {\n        cnt3 += v;\n    }\n    if (cnt3 == 0)\
    \ {\n        return res;\n    }\n    std::vector<std::tuple<long, long>> temp;\n\
    \    for (auto &v : lst) {\n        if (v[0] == x) {\n            temp.emplace_back(v[0],\
    \ v[1]);\n        }\n    }\n    std::sort(temp.begin(), temp.end(), [](const std::tuple<long,\
    \ long> &a, const std::tuple<long, long> &b) -> bool {\n        return std::get<0>(a)\
    \ < std::get<0>(b);\n    });\n    for (auto &v : temp) {\n        res.emplace_back(std::get<0>(v),\
    \ std::get<1>(v));\n    }\n    return res;", "    std::vector<std::tuple<long,\
    \ long>> res;\n    std::vector<long> row;\n    std::vector<long> col;\n    long\
    \ row_index = 0;\n    long col_index = 0;\n    for (auto &row : lst) {\n     \
    \   row.clear();\n        col.clear();\n        for (auto &col : row) {\n    \
    \        if (col == x) {\n                res.emplace_back(row_index, col_index);\n\
    \                row_index++;\n                col_index++;\n            }\n \
    \           col.push_back(0);\n        }\n    }\n    return res;", "    std::vector<std::tuple<long,\
    \ long>> res;\n    std::vector<std::vector<long>> row;\n    std::vector<std::vector<long>>\
    \ col;\n    std::vector<std::vector<long>> res;\n    long row = 0;\n    long col\
    \ = 0;\n    long cnt = 0;\n    for (auto &it : lst) {\n        row.push_back(it);\n\
    \        col.push_back(it);\n        cnt++;\n    }\n    for (long i = 0; i < cnt;\
    \ i++) {\n        long cnt2 = 0;\n        for (long j = 0; j < row.size(); j++)\
    \ {\n            if (row[j] == i) {\n                cnt2++;\n            }\n\
    \        }\n        if (cnt2 == col.size()) {\n            res.push_back(std::make_tuple(i,\
    \ j));\n        }\n    }\n    std::sort(res.begin(), res.end(), [](std::tuple<long,\
    \ long> a, std::tuple<long, long> b) {\n        return std::get<0>(a) < std::get<0>(b);\n\
    \    });\n    for (auto &it : res) {\n        long row = std::get<0>(it);\n  \
    \      long col = std::get<1>(it);\n        long cnt = 0;\n        for (long i\
    \ = 0; i < row.size(); i++) {\n            if (row[i] == col) {\n            \
    \    cnt++;\n            }\n        }\n        if (cnt == row.size()) {\n    \
    \        col.push_back(col);\n            row.push_back(row);\n            col.push_back(col);\n\
    \            row.push_back(row);\n            res.push_back(std::make_tuple(row,\
    \ col));\n        }\n    }\n    std::sort(res.begin(), res.end(), [](std::tuple<long,\
    \ long> a, std::tuple<long, long> b) {\n        return std::get<1>(a) < std::get<1>(b);\n\
    \    });\n    return res;", "    std::vector<std::tuple<long, long>> res;\n  \
    \  std::vector<long> row;\n    std::vector<long> col;\n    long row_index = 0;\n\
    \    long col_index = 0;\n    for (auto &row : lst) {\n        row.clear();\n\
    \        col.clear();\n        for (auto &elem : row) {\n            row.push_back(elem);\n\
    \            col.push_back(elem);\n        }\n        std::sort(row.begin(), row.end());\n\
    \        std::sort(col.begin(), col.end());\n        if (row_index == 0)\n   \
    \         std::sort(row.begin(), row.end());\n        if (col_index == 0)\n  \
    \          std::sort(col.begin(), col.end());\n        if (row_index == col.size()\
    \ - 1) {\n            if (row_index == 0)\n                res.emplace_back(0,\
    \ row_index);\n            else\n                res.emplace_back(row_index, 0);\n\
    \            row_index++;\n            col_index++;\n        }\n        else if\
    \ (col_index == row.size() - 1) {\n            if (col_index == 0)\n         \
    \       res.emplace_back(row_index, 0);\n            else\n                res.emplace_back(row_index,\
    \ col_index);\n            row_index++;\n            col_index++;\n        }\n\
    \        else if (row_index == 0 && col_index == row.size() - 1) {\n         \
    \   if (row_index == 0 && col_index == 0)\n                res.emplace_back(0,\
    \ 0);\n            else\n                res.emplace_back(row_index, col_index);\n\
    \            row_index++;\n            col_index++;\n        }\n        else if\
    \ (row_index == 0 && col_index != row.size() - 1) {\n            if (row_index\
    \ == 0 && col_index == 0)\n                res.emplace_back(0, col_index);\n \
    \           else\n                res.emplace_back(row_index, col_index);\n  \
    \          row_index++;\n            col_index++;\n        }\n        else if\
    \ (row_index != 0 && col_index == row.size() - 1) {\n            if (row_index\
    \ == 0 && col_index == 0)\n                res.emplace_back(row_index, 0);\n \
    \           else\n                res.emplace_back(row_index, col_index);\n  \
    \          row_index++;\n            col_index++;\n        }\n        else if\
    \ (row_index != 0 && col_index != row.size() - 1) {\n            if (row_index\
    \ == 0 && col_index == 0)\n                res.emplace_back(row_index, col_index);\n\
    \            else\n                res.emplace_back(row_index, col_index);\n \
    \           row_index++;\n            col_index++;\n        }\n        else if\
    \ (row_index != 0 && col_index == row.size() - 1) {\n            if (row_index\
    \ == 0 && col_index == 0)\n                res.emplace_back(row_index, 0);\n \
    \           else\n                res.emplace_back(", "    std::vector<std::tuple<long,\
    \ long>> res;\n    for(auto &row : lst) {\n        for(auto &el : row) {\n   \
    \         if(el == x) {\n                res.emplace_back(std::make_tuple(row.size()\
    \ - 1, row.size() - 1));\n            }\n        }\n    }\n    std::sort(res.begin(),\
    \ res.end(), [](const std::tuple<long, long> &a, const std::tuple<long, long>\
    \ &b) { return std::get<0>(a) < std::get<0>(b); });\n    std::sort(res.begin(),\
    \ res.end(), [](const std::tuple<long, long> &a, const std::tuple<long, long>\
    \ &b) { return std::get<1>(a) > std::get<1>(b); });\n    return res;", "    std::vector<std::tuple<long,\
    \ long>> res;\n    for(auto &row : lst) {\n        for(auto &el : row) {\n   \
    \         if(el == x) {\n                res.push_back(std::make_tuple(row.size()\
    \ - 1, row.size() - 1));\n            }\n        }\n    }\n    std::sort(res.begin(),\
    \ res.end(), [](const std::tuple<long, long> &a, const std::tuple<long, long>\
    \ &b) { return std::get<0>(a) < std::get<0>(b); });\n    std::sort(res.begin(),\
    \ res.end(), [](const std::tuple<long, long> &a, const std::tuple<long, long>\
    \ &b) { return std::get<1>(a) < std::get<1>(b); });\n    return res;", "    std::vector<std::tuple<long,\
    \ long>> res;\n    std::vector<long> row;\n    std::vector<long> col;\n    for\
    \ (auto &i : lst) {\n        row.push_back(i[0]);\n        col.push_back(i.size()\
    \ - 1);\n    }\n    std::sort(row.begin(), row.end(), std::greater<long>());\n\
    \    std::sort(col.begin(), col.end(), std::greater<long>());\n    for (long i\
    \ = 0; i < row.size(); i++) {\n        for (long j = 0; j < col.size(); j++) {\n\
    \            if (row[i] == x && col[j] == i) {\n                res.push_back(std::make_tuple(i,\
    \ j));\n            }\n        }\n    }\n    return res;", "    std::vector<std::tuple<long,\
    \ long>> res;\n    long n = lst.size();\n    long m = lst[0].size();\n    long\
    \ cnt = 0;\n    for (long i = 0; i < n; i++) {\n        long cnt = 0;\n      \
    \  for (long j = 0; j < m; j++) {\n            if (lst[i][j] == x) {\n       \
    \         res.push_back({i, j});\n                cnt++;\n            }\n    \
    \    }\n        if (cnt == m) {\n            break;\n        }\n    }\n    std::sort(res.begin(),\
    \ res.end(), [](std::tuple<long, long> a, std::tuple<long, long> b) {\n      \
    \  return std::get<0>(a) < std::get<0>(b);\n    });\n    for (auto &i : res) {\n\
    \        std::sort(i.begin(), i.end(), [](std::tuple<long, long> a, std::tuple<long,\
    \ long> b) {\n            return std::get<1>(a) > std::get<1>(b);\n        });\n\
    \    }\n    return res;"]
stop_tokens:
- "\n}"
