name: HumanEval_148_bf
language: cpp
prompt: "#include<assert.h>\n#include<bits/stdc++.h>\n// There are eight planets in\
  \ our solar system: the closerst to the Sun \n// is Mercury, the next one is Venus,\
  \ then Earth, Mars, Jupiter, Saturn, \n// Uranus, Neptune.\n// Write a function\
  \ that takes two planet names as strings planet1 and planet2. \n// The function\
  \ should return a tuple containing all planets whose orbits are \n// located between\
  \ the orbit of planet1 and the orbit of planet2, sorted by \n// the proximity to\
  \ the sun. \n// The function should return an empty tuple if planet1 or planet2\n\
  // are not correct planet names. \n// Examples\n// bf(\"Jupiter\", \"Neptune\")\
  \ ==> (\"Saturn\", \"Uranus\")\n// bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n\
  // bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
  , \"Saturn\")\nstd::tuple<std::string, > bf(std::string planet1, std::string planet2)\
  \ {\n"
tests: "}\nint main() {\n    auto candidate = bf;\n    assert(candidate((\"Jupiter\"\
  ), (\"Neptune\")) == std::make_tuple(\"Saturn\", \"Uranus\"));\n    assert(candidate((\"\
  Earth\"), (\"Mercury\")) == std::make_tuple(\"Venus\"));\n    assert(candidate((\"\
  Mercury\"), (\"Uranus\")) == std::make_tuple(\"Venus\", \"Earth\", \"Mars\", \"\
  Jupiter\", \"Saturn\"));\n    assert(candidate((\"Neptune\"), (\"Venus\")) == std::make_tuple(\"\
  Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"));\n    assert(candidate((\"\
  Earth\"), (\"Earth\")) == (std::tuple<std::string, >(std::tuple<long>)));\n    assert(candidate((\"\
  Mars\"), (\"Earth\")) == (std::tuple<std::string, >(std::tuple<long>)));\n    assert(candidate((\"\
  Jupiter\"), (\"Makemake\")) == (std::tuple<std::string, >(std::tuple<long>)));\n\
  }\n"
completions: []
stop_tokens:
- "\n}"
