name: HumanEval_26_remove_duplicates
language: cpp
prompt: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a list of integers,\
  \ remove all elements that occur more than once.\n// Keep order of elements left\
  \ the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1, 3,\
  \ 4]\nstd::vector<long> remove_duplicates(std::vector<long> numbers) {\n"
tests: "}\nint main() {\n    auto candidate = remove_duplicates;\n    assert(candidate((std::vector<long>()))\
  \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
  \ 4}))) == (std::vector<long>({1, 2, 3, 4})));\n    assert(candidate((std::vector<long>({1,\
  \ 2, 3, 2, 4, 3, 5}))) == (std::vector<long>({1, 4, 5})));\n}\n"
completions: ["  std::vector<long> result;\n  std::set<long> seen;\n  for (long i\
    \ : numbers) {\n    if (seen.find(i) == seen.end()) {\n      result.push_back(i);\n\
    \      seen.insert(i);\n    }\n  }\n  return result;", "    std::vector<long>\
    \ result;\n    std::set<long> seen;\n    for (long num : numbers) {\n        if\
    \ (seen.find(num) == seen.end()) {\n            seen.insert(num);\n          \
    \  result.push_back(num);\n        }\n    }\n    return result;", "    std::vector<long>\
    \ result;\n    std::unordered_set<long> seen;\n    for (auto i : numbers) {\n\
    \        if (seen.find(i) == seen.end()) {\n            result.push_back(i);\n\
    \            seen.insert(i);\n        }\n    }\n    return result;", "    std::vector<long>\
    \ result;\n    std::unordered_set<long> seen;\n    for (long num : numbers) {\n\
    \        if (seen.find(num) == seen.end()) {\n            seen.insert(num);\n\
    \            result.push_back(num);\n        }\n    }\n    return result;", " \
    \   std::vector<long> result;\n    std::set<long> seen;\n    for (long i : numbers)\
    \ {\n        if (seen.find(i) == seen.end()) {\n            result.push_back(i);\n\
    \            seen.insert(i);\n        }\n    }\n    return result;", "    std::vector<long>\
    \ result;\n    std::set<long> seen;\n    for (long num : numbers) {\n        if\
    \ (seen.find(num) == seen.end()) {\n            result.push_back(num);\n     \
    \       seen.insert(num);\n        }\n    }\n    return result;", "    std::vector<long>\
    \ result;\n    std::set<long> seen;\n    for (long i : numbers) {\n        if\
    \ (seen.find(i) == seen.end()) {\n            result.push_back(i);\n         \
    \   seen.insert(i);\n        }\n    }\n    return result;", "    std::vector<long>\
    \ result;\n    std::unordered_set<long> seen;\n    for (auto i : numbers) {\n\
    \        if (seen.find(i) == seen.end()) {\n            result.push_back(i);\n\
    \            seen.insert(i);\n        }\n    }\n    return result;", "    std::vector<long>\
    \ result;\n    std::set<long> seen;\n    for (long i : numbers) {\n        if\
    \ (seen.find(i) == seen.end()) {\n            seen.insert(i);\n            result.push_back(i);\n\
    \        }\n    }\n    return result;", "    std::vector<long> result;\n    std::unordered_set<long>\
    \ seen;\n    for (long num : numbers) {\n        if (seen.find(num) == seen.end())\
    \ {\n            result.push_back(num);\n            seen.insert(num);\n     \
    \   }\n    }\n    return result;", "    std::vector<long> result;\n    std::set<long>\
    \ seen;\n    for (long num : numbers) {\n        if (seen.find(num) == seen.end())\
    \ {\n            result.push_back(num);\n            seen.insert(num);\n     \
    \   }\n    }\n    return result;", "  std::vector<long> result;\n  std::unordered_set<long>\
    \ seen;\n  for (auto i : numbers) {\n    if (seen.count(i) == 0) {\n      result.push_back(i);\n\
    \      seen.insert(i);\n    }\n  }\n  return result;", "    std::vector<long>\
    \ result;\n    std::set<long> seen;\n    for (long i : numbers) {\n        if\
    \ (seen.find(i) == seen.end()) {\n            result.push_back(i);\n         \
    \   seen.insert(i);\n        }\n    }\n    return result;", "    std::vector<long>\
    \ result;\n    std::set<long> seen;\n    for (long num : numbers) {\n        if\
    \ (seen.find(num) == seen.end()) {\n            seen.insert(num);\n          \
    \  result.push_back(num);\n        }\n    }\n    return result;", "    std::vector<long>\
    \ result;\n    std::unordered_set<long> seen;\n    for (auto i : numbers) {\n\
    \        if (seen.find(i) == seen.end()) {\n            seen.insert(i);\n    \
    \        result.push_back(i);\n        }\n    }\n    return result;", "    std::vector<long>\
    \ result;\n    std::unordered_set<long> seen;\n    for (long num : numbers) {\n\
    \        if (seen.find(num) != seen.end()) {\n            continue;\n        }\n\
    \        seen.insert(num);\n        result.push_back(num);\n    }\n    return\
    \ result;", "  std::vector<long> result;\n  std::set<long> seen;\n  for (long\
    \ i : numbers) {\n    if (seen.find(i) == seen.end()) {\n      result.push_back(i);\n\
    \      seen.insert(i);\n    }\n  }\n  return result;", "    std::vector<long>\
    \ result;\n    std::unordered_set<long> seen;\n    for (long i : numbers) {\n\
    \        if (seen.count(i) == 0) {\n            result.push_back(i);\n       \
    \     seen.insert(i);\n        }\n    }\n    return result;", "    std::vector<long>\
    \ result;\n    std::set<long> seen;\n    for (long i : numbers) {\n        if\
    \ (seen.find(i) == seen.end()) {\n            result.push_back(i);\n         \
    \   seen.insert(i);\n        }\n    }\n    return result;", "    std::vector<long>\
    \ result;\n    std::set<long> seen;\n    for (long num : numbers) {\n        if\
    \ (seen.find(num) == seen.end()) {\n            seen.insert(num);\n          \
    \  result.push_back(num);\n        }\n    }\n    return result;", "    std::vector<long>\
    \ result;\n    std::set<long> seen;\n    for (auto i : numbers) {\n        if\
    \ (seen.find(i) == seen.end()) {\n            result.push_back(i);\n         \
    \   seen.insert(i);\n        }\n    }\n    return result;", "    std::vector<long>\
    \ result;\n    std::set<long> seen;\n    for (long i : numbers) {\n        if\
    \ (seen.find(i) == seen.end()) {\n            seen.insert(i);\n            result.push_back(i);\n\
    \        }\n    }\n    return result;", "    std::vector<long> result;\n    std::unordered_set<long>\
    \ seen;\n    for (auto i : numbers) {\n        if (seen.find(i) == seen.end())\
    \ {\n            result.push_back(i);\n            seen.insert(i);\n        }\n\
    \    }\n    return result;", "    std::vector<long> result;\n    std::unordered_set<long>\
    \ seen;\n    for (auto i : numbers) {\n        if (seen.find(i) == seen.end())\
    \ {\n            result.push_back(i);\n            seen.insert(i);\n        }\n\
    \    }\n    return result;", "    std::vector<long> result;\n    std::set<long>\
    \ seen;\n    for (long i : numbers) {\n        if (seen.find(i) == seen.end())\
    \ {\n            seen.insert(i);\n            result.push_back(i);\n        }\n\
    \    }\n    return result;", "    std::vector<long> result;\n    std::set<long>\
    \ seen;\n    for (long num : numbers) {\n        if (seen.find(num) != seen.end())\
    \ {\n            continue;\n        }\n        seen.insert(num);\n        result.push_back(num);\n\
    \    }\n    return result;", "    // Write your code here.\n    std::vector<long>\
    \ result;\n    std::set<long> seen;\n    for(long i : numbers){\n        if(seen.find(i)\
    \ == seen.end()){\n            result.push_back(i);\n            seen.insert(i);\n\
    \        }\n    }\n    return result;", "    std::vector<long> result;\n    std::set<long>\
    \ seen;\n    for (long num : numbers) {\n        if (seen.find(num) != seen.end())\
    \ {\n            continue;\n        }\n        seen.insert(num);\n        result.push_back(num);\n\
    \    }\n    return result;", "    std::vector<long> result;\n    std::set<long>\
    \ seen;\n    for (long num : numbers) {\n        if (seen.find(num) == seen.end())\
    \ {\n            result.push_back(num);\n            seen.insert(num);\n     \
    \   }\n    }\n    return result;", "    std::vector<long> result;\n    std::unordered_set<long>\
    \ seen;\n    for (long num : numbers) {\n        if (seen.find(num) == seen.end())\
    \ {\n            seen.insert(num);\n            result.push_back(num);\n     \
    \   }\n    }\n    return result;", "    std::vector<long> result;\n    std::unordered_set<long>\
    \ seen;\n    for (long i : numbers) {\n        if (seen.count(i) == 0) {\n   \
    \         result.push_back(i);\n            seen.insert(i);\n        }\n    }\n\
    \    return result;", "    std::vector<long> result;\n    std::set<long> seen;\n\
    \    for (auto i : numbers) {\n        if (seen.find(i) == seen.end()) {\n   \
    \         result.push_back(i);\n            seen.insert(i);\n        }\n    }\n\
    \    return result;", "    std::vector<long> result;\n    std::set<long> seen;\n\
    \    for (long i : numbers) {\n        if (seen.find(i) == seen.end()) {\n   \
    \         result.push_back(i);\n            seen.insert(i);\n        }\n    }\n\
    \    return result;", "    std::vector<long> result;\n    std::set<long> seen;\n\
    \    for (long i : numbers) {\n        if (seen.find(i) == seen.end()) {\n   \
    \         result.push_back(i);\n            seen.insert(i);\n        }\n    }\n\
    \    return result;", "  std::vector<long> result;\n  std::set<long> seen;\n \
    \ for (long i : numbers) {\n    if (seen.find(i) == seen.end()) {\n      result.push_back(i);\n\
    \      seen.insert(i);\n    }\n  }\n  return result;", "    std::vector<long>\
    \ result;\n    std::unordered_set<long> seen;\n    for (auto i : numbers) {\n\
    \        if (seen.count(i) == 0) {\n            result.push_back(i);\n       \
    \     seen.insert(i);\n        }\n    }\n    return result;", "    std::vector<long>\
    \ result;\n    std::set<long> seen;\n    for (auto i : numbers) {\n        if\
    \ (seen.find(i) == seen.end()) {\n            result.push_back(i);\n         \
    \   seen.insert(i);\n        }\n    }\n    return result;", "    std::vector<long>\
    \ result;\n    std::set<long> seen;\n    for (long num : numbers) {\n        if\
    \ (seen.find(num) == seen.end()) {\n            result.push_back(num);\n     \
    \       seen.insert(num);\n        }\n    }\n    return result;", "    std::vector<long>\
    \ result;\n    std::unordered_set<long> seen;\n    for (long i : numbers) {\n\
    \        if (seen.find(i) == seen.end()) {\n            result.push_back(i);\n\
    \            seen.insert(i);\n        }\n    }\n    return result;", "    std::vector<long>\
    \ result;\n    std::unordered_set<long> seen;\n    for (long num : numbers) {\n\
    \        if (seen.find(num) == seen.end()) {\n            seen.insert(num);\n\
    \            result.push_back(num);\n        }\n    }\n    return result;", " \
    \   std::vector<long> result;\n    std::set<long> seen;\n    for (long i : numbers)\
    \ {\n        if (seen.find(i) == seen.end()) {\n            seen.insert(i);\n\
    \            result.push_back(i);\n        }\n    }\n    return result;", "  \
    \  std::vector<long> result;\n    std::set<long> seen;\n    for (auto i : numbers)\
    \ {\n        if (seen.find(i) == seen.end()) {\n            result.push_back(i);\n\
    \            seen.insert(i);\n        }\n    }\n    return result;", "    std::vector<long>\
    \ result;\n    std::set<long> seen;\n    for (long i : numbers) {\n        if\
    \ (seen.find(i) == seen.end()) {\n            seen.insert(i);\n            result.push_back(i);\n\
    \        }\n    }\n    return result;", "    std::vector<long> result;\n    std::set<long>\
    \ seen;\n    for (auto n : numbers) {\n        if (seen.find(n) == seen.end())\
    \ {\n            result.push_back(n);\n            seen.insert(n);\n        }\n\
    \    }\n    return result;", "    std::vector<long> result;\n    std::set<long>\
    \ seen;\n    for (long num : numbers) {\n        if (seen.find(num) == seen.end())\
    \ {\n            result.push_back(num);\n            seen.insert(num);\n     \
    \   }\n    }\n    return result;", "    std::vector<long> result;\n    std::unordered_set<long>\
    \ seen;\n    for (auto i : numbers) {\n        if (seen.find(i) == seen.end())\
    \ {\n            result.push_back(i);\n            seen.insert(i);\n        }\n\
    \    }\n    return result;", "    std::vector<long> result;\n    std::set<long>\
    \ seen;\n    for (long num : numbers) {\n        if (seen.find(num) != seen.end())\
    \ {\n            continue;\n        }\n        seen.insert(num);\n        result.push_back(num);\n\
    \    }\n    return result;", "  std::vector<long> result;\n  std::set<long> seen;\n\
    \  for (long num : numbers) {\n    if (seen.find(num) != seen.end()) {\n     \
    \ continue;\n    }\n    result.push_back(num);\n    seen.insert(num);\n  }\n \
    \ return result;", "    std::vector<long> result;\n    std::set<long> seen;\n\
    \    for (long i : numbers) {\n        if (seen.find(i) == seen.end()) {\n   \
    \         seen.insert(i);\n            result.push_back(i);\n        }\n    }\n\
    \    return result;", "    std::vector<long> result;\n    std::set<long> seen;\n\
    \    for (long num : numbers) {\n        if (seen.find(num) == seen.end()) {\n\
    \            seen.insert(num);\n            result.push_back(num);\n        }\n\
    \    }\n    return result;", "    std::vector<long> result;\n    std::set<long>\
    \ seen;\n    for (long num : numbers) {\n        if (seen.find(num) == seen.end())\
    \ {\n            result.push_back(num);\n            seen.insert(num);\n     \
    \   }\n    }\n    return result;", "    std::vector<long> result;\n    std::set<long>\
    \ seen;\n    for (long num : numbers) {\n        if (seen.find(num) == seen.end())\
    \ {\n            result.push_back(num);\n            seen.insert(num);\n     \
    \   }\n    }\n    return result;", "    std::vector<long> result;\n    std::set<long>\
    \ seen;\n    for (long i : numbers) {\n        if (seen.find(i) == seen.end())\
    \ {\n            result.push_back(i);\n            seen.insert(i);\n        }\n\
    \    }\n    return result;", "  std::vector<long> result;\n  std::set<long> seen;\n\
    \  for (long i : numbers) {\n    if (seen.find(i) == seen.end()) {\n      result.push_back(i);\n\
    \      seen.insert(i);\n    }\n  }\n  return result;", "    std::vector<long>\
    \ result;\n    std::set<long> seen;\n    for (auto i : numbers) {\n        if\
    \ (seen.find(i) == seen.end()) {\n            result.push_back(i);\n         \
    \   seen.insert(i);\n        }\n    }\n    return result;", "    std::vector<long>\
    \ result;\n    std::set<long> seen;\n    for (long i : numbers) {\n        if\
    \ (seen.find(i) == seen.end()) {\n            result.push_back(i);\n         \
    \   seen.insert(i);\n        }\n    }\n    return result;", "    std::vector<long>\
    \ result;\n    std::unordered_set<long> seen;\n    for (long num : numbers) {\n\
    \        if (seen.find(num) != seen.end()) {\n            continue;\n        }\n\
    \        seen.insert(num);\n        result.push_back(num);\n    }\n    return\
    \ result;", "  std::vector<long> result;\n  std::set<long> seen;\n  for (long\
    \ i : numbers) {\n    if (seen.find(i) == seen.end()) {\n      result.push_back(i);\n\
    \      seen.insert(i);\n    }\n  }\n  return result;", "    std::vector<long>\
    \ result;\n    std::unordered_set<long> seen;\n    for (auto n : numbers) {\n\
    \        if (seen.find(n) == seen.end()) {\n            result.push_back(n);\n\
    \            seen.insert(n);\n        }\n    }\n    return result;", "    std::vector<long>\
    \ result;\n    std::unordered_set<long> seen;\n    for (auto i : numbers) {\n\
    \        if (seen.find(i) == seen.end()) {\n            result.push_back(i);\n\
    \            seen.insert(i);\n        }\n    }\n    return result;", "    std::vector<long>\
    \ result;\n    std::set<long> seen;\n    for (long i : numbers) {\n        if\
    \ (seen.find(i) == seen.end()) {\n            result.push_back(i);\n         \
    \   seen.insert(i);\n        }\n    }\n    return result;", "    std::vector<long>\
    \ result;\n    std::set<long> seen;\n    for (long i : numbers) {\n        if\
    \ (seen.find(i) == seen.end()) {\n            result.push_back(i);\n         \
    \   seen.insert(i);\n        }\n    }\n    return result;", "    std::vector<long>\
    \ result;\n    std::set<long> seen;\n    for (auto i : numbers) {\n        if\
    \ (seen.find(i) == seen.end()) {\n            seen.insert(i);\n            result.push_back(i);\n\
    \        }\n    }\n    return result;", "    std::vector<long> result;\n    std::set<long>\
    \ seen;\n    for (long i : numbers) {\n        if (seen.find(i) == seen.end())\
    \ {\n            result.push_back(i);\n            seen.insert(i);\n        }\n\
    \    }\n    return result;", "    std::vector<long> result;\n    std::unordered_set<long>\
    \ seen;\n    for (long num : numbers) {\n        if (seen.find(num) == seen.end())\
    \ {\n            result.push_back(num);\n            seen.insert(num);\n     \
    \   }\n    }\n    return result;", "    std::vector<long> result;\n    std::set<long>\
    \ seen;\n    for (auto i : numbers) {\n        if (seen.find(i) == seen.end())\
    \ {\n            seen.insert(i);\n            result.push_back(i);\n        }\n\
    \    }\n    return result;", "    std::vector<long> result;\n    std::set<long>\
    \ seen;\n    for (long i : numbers) {\n        if (seen.find(i) == seen.end())\
    \ {\n            seen.insert(i);\n            result.push_back(i);\n        }\n\
    \    }\n    return result;", "    std::vector<long> result;\n    std::set<long>\
    \ seen;\n    for (long num : numbers) {\n        if (seen.find(num) == seen.end())\
    \ {\n            result.push_back(num);\n            seen.insert(num);\n     \
    \   }\n    }\n    return result;", "    std::vector<long> result;\n    std::unordered_set<long>\
    \ seen;\n    for (auto i : numbers) {\n        if (seen.find(i) == seen.end())\
    \ {\n            seen.insert(i);\n            result.push_back(i);\n        }\n\
    \    }\n    return result;", "    std::vector<long> result;\n    std::set<long>\
    \ seen;\n    for (auto i : numbers) {\n        if (seen.find(i) == seen.end())\
    \ {\n            seen.insert(i);\n            result.push_back(i);\n        }\n\
    \    }\n    return result;", "    std::vector<long> result;\n    std::set<long>\
    \ seen;\n    for (long num : numbers) {\n        if (seen.find(num) == seen.end())\
    \ {\n            seen.insert(num);\n            result.push_back(num);\n     \
    \   }\n    }\n    return result;", "  std::vector<long> result;\n  std::set<long>\
    \ seen;\n  for (long num : numbers) {\n    if (seen.find(num) != seen.end()) {\n\
    \      continue;\n    }\n    result.push_back(num);\n    seen.insert(num);\n \
    \ }\n  return result;", "    std::vector<long> result;\n    std::unordered_set<long>\
    \ seen;\n    for (auto i : numbers) {\n        if (seen.find(i) == seen.end())\
    \ {\n            seen.insert(i);\n            result.push_back(i);\n        }\n\
    \    }\n    return result;", "    std::vector<long> result;\n    std::set<long>\
    \ seen;\n    for (long i : numbers) {\n        if (seen.find(i) == seen.end())\
    \ {\n            seen.insert(i);\n            result.push_back(i);\n        }\n\
    \    }\n    return result;", "    std::vector<long> result;\n    std::unordered_set<long>\
    \ seen;\n    for (auto i : numbers) {\n        if (seen.find(i) == seen.end())\
    \ {\n            result.push_back(i);\n            seen.insert(i);\n        }\n\
    \    }\n    return result;", "    std::vector<long> result;\n    std::set<long>\
    \ seen;\n    for (long i : numbers) {\n        if (seen.find(i) == seen.end())\
    \ {\n            seen.insert(i);\n            result.push_back(i);\n        }\n\
    \    }\n    return result;", "    std::vector<long> result;\n    std::set<long>\
    \ seen;\n    for (long i : numbers) {\n        if (seen.find(i) == seen.end())\
    \ {\n            result.push_back(i);\n            seen.insert(i);\n        }\n\
    \    }\n    return result;", "    std::vector<long> result;\n    std::set<long>\
    \ seen;\n    for (long num : numbers) {\n        if (seen.find(num) == seen.end())\
    \ {\n            result.push_back(num);\n            seen.insert(num);\n     \
    \   }\n    }\n    return result;", "    std::vector<long> result;\n    std::set<long>\
    \ seen;\n    for (long i : numbers) {\n        if (seen.find(i) == seen.end())\
    \ {\n            result.push_back(i);\n            seen.insert(i);\n        }\n\
    \    }\n    return result;", "    std::vector<long> result;\n    std::set<long>\
    \ seen;\n    for (long i : numbers) {\n        if (seen.find(i) == seen.end())\
    \ {\n            seen.insert(i);\n            result.push_back(i);\n        }\n\
    \    }\n    return result;", "    std::vector<long> result;\n    std::unordered_set<long>\
    \ seen;\n    for (auto i : numbers) {\n        if (seen.find(i) == seen.end())\
    \ {\n            result.push_back(i);\n            seen.insert(i);\n        }\n\
    \    }\n    return result;", "    std::vector<long> result;\n    std::unordered_set<long>\
    \ seen;\n    for (long i : numbers) {\n        if (seen.find(i) == seen.end())\
    \ {\n            seen.insert(i);\n            result.push_back(i);\n        }\n\
    \    }\n    return result;", "    std::vector<long> result;\n    std::set<long>\
    \ seen;\n    for (long num : numbers) {\n        if (seen.find(num) != seen.end())\
    \ {\n            continue;\n        }\n        seen.insert(num);\n        result.push_back(num);\n\
    \    }\n    return result;", "  std::vector<long> result;\n  std::set<long> seen;\n\
    \  for (auto n : numbers) {\n    if (seen.find(n) == seen.end()) {\n      result.push_back(n);\n\
    \      seen.insert(n);\n    }\n  }\n  return result;", "    std::vector<long>\
    \ result;\n    std::set<long> seen;\n    for (long i : numbers) {\n        if\
    \ (seen.find(i) == seen.end()) {\n            result.push_back(i);\n         \
    \   seen.insert(i);\n        }\n    }\n    return result;", "    std::vector<long>\
    \ result;\n    std::unordered_set<long> seen;\n    for (auto i : numbers) {\n\
    \        if (seen.find(i) == seen.end()) {\n            result.push_back(i);\n\
    \            seen.insert(i);\n        }\n    }\n    return result;", "    std::vector<long>\
    \ result;\n    std::set<long> seen;\n    for (long num : numbers) {\n        if\
    \ (seen.find(num) != seen.end()) {\n            continue;\n        }\n       \
    \ seen.insert(num);\n        result.push_back(num);\n    }\n    return result;",
  "    std::vector<long> result;\n    std::set<long> seen;\n    for (long i : numbers)\
    \ {\n        if (seen.find(i) == seen.end()) {\n            result.push_back(i);\n\
    \            seen.insert(i);\n        }\n    }\n    return result;", "    std::vector<long>\
    \ result;\n    std::set<long> seen;\n    for (long i : numbers) {\n        if\
    \ (seen.find(i) == seen.end()) {\n            result.push_back(i);\n         \
    \   seen.insert(i);\n        }\n    }\n    return result;", "    std::vector<long>\
    \ result;\n    std::unordered_set<long> seen;\n    for (auto i : numbers) {\n\
    \        if (seen.find(i) == seen.end()) {\n            seen.insert(i);\n    \
    \        result.push_back(i);\n        }\n    }\n    return result;", "    std::vector<long>\
    \ result;\n    std::set<long> seen;\n    for (long i : numbers) {\n        if\
    \ (seen.find(i) == seen.end()) {\n            result.push_back(i);\n         \
    \   seen.insert(i);\n        }\n    }\n    return result;", "    std::vector<long>\
    \ result;\n    std::set<long> seen;\n    for (long i : numbers) {\n        if\
    \ (seen.find(i) == seen.end()) {\n            result.push_back(i);\n         \
    \   seen.insert(i);\n        }\n    }\n    return result;", "    std::vector<long>\
    \ result;\n    std::unordered_set<long> seen;\n    for (long i : numbers) {\n\
    \        if (seen.find(i) == seen.end()) {\n            seen.insert(i);\n    \
    \        result.push_back(i);\n        }\n    }\n    return result;", "    std::vector<long>\
    \ result;\n    std::unordered_set<long> seen;\n    for (long num : numbers) {\n\
    \        if (seen.find(num) == seen.end()) {\n            seen.insert(num);\n\
    \            result.push_back(num);\n        }\n    }\n    return result;", " \
    \   std::vector<long> result;\n    std::set<long> seen;\n    for (auto i : numbers)\
    \ {\n        if (seen.find(i) == seen.end()) {\n            result.push_back(i);\n\
    \            seen.insert(i);\n        }\n    }\n    return result;", "    std::vector<long>\
    \ result;\n    std::set<long> seen;\n    for (long num : numbers) {\n        if\
    \ (seen.find(num) != seen.end()) {\n            continue;\n        }\n       \
    \ seen.insert(num);\n        result.push_back(num);\n    }\n    return result;",
  "    std::vector<long> result;\n    std::set<long> seen;\n    for (long num : numbers)\
    \ {\n        if (seen.find(num) == seen.end()) {\n            result.push_back(num);\n\
    \            seen.insert(num);\n        }\n    }\n    return result;", "    std::vector<long>\
    \ result;\n    std::unordered_set<long> seen;\n    for (long num : numbers) {\n\
    \        if (seen.find(num) == seen.end()) {\n            seen.insert(num);\n\
    \            result.push_back(num);\n        }\n    }\n    return result;", " \
    \   std::vector<long> result;\n    std::set<long> seen;\n    for (long num : numbers)\
    \ {\n        if (seen.find(num) != seen.end()) {\n            continue;\n    \
    \    }\n        seen.insert(num);\n        result.push_back(num);\n    }\n   \
    \ return result;", "    std::vector<long> result;\n    std::set<long> seen;\n\
    \    for (long i : numbers) {\n        if (seen.find(i) == seen.end()) {\n   \
    \         result.push_back(i);\n            seen.insert(i);\n        }\n    }\n\
    \    return result;", "    std::vector<long> result;\n    std::set<long> seen;\n\
    \    for (auto i : numbers) {\n        if (seen.find(i) == seen.end()) {\n   \
    \         result.push_back(i);\n            seen.insert(i);\n        }\n    }\n\
    \    return result;", "    std::vector<long> result;\n    std::set<long> seen;\n\
    \    for (long num : numbers) {\n        if (seen.find(num) == seen.end()) {\n\
    \            result.push_back(num);\n            seen.insert(num);\n        }\n\
    \    }\n    return result;", "    std::vector<long> result;\n    std::set<long>\
    \ seen;\n    for (long i : numbers) {\n        if (seen.find(i) == seen.end())\
    \ {\n            result.push_back(i);\n            seen.insert(i);\n        }\n\
    \    }\n    return result;", "    std::vector<long> result;\n    std::set<long>\
    \ seen;\n    for (long i : numbers) {\n        if (seen.find(i) == seen.end())\
    \ {\n            result.push_back(i);\n            seen.insert(i);\n        }\n\
    \    }\n    return result;", "    std::vector<long> result;\n    std::set<long>\
    \ seen;\n    for (long i : numbers) {\n        if (seen.find(i) == seen.end())\
    \ {\n            result.push_back(i);\n            seen.insert(i);\n        }\n\
    \    }\n    return result;", "    std::vector<long> result;\n    std::set<long>\
    \ seen;\n    for (long i : numbers) {\n        if (seen.find(i) == seen.end())\
    \ {\n            result.push_back(i);\n            seen.insert(i);\n        }\n\
    \    }\n    return result;", "    std::vector<long> result;\n    std::unordered_set<long>\
    \ seen;\n    for (long num : numbers) {\n        if (seen.find(num) != seen.end())\
    \ {\n            continue;\n        }\n        seen.insert(num);\n        result.push_back(num);\n\
    \    }\n    return result;", "    std::vector<long> result;\n    std::unordered_set<long>\
    \ seen;\n    for (auto i : numbers) {\n        if (seen.find(i) == seen.end())\
    \ {\n            result.push_back(i);\n            seen.insert(i);\n        }\n\
    \    }\n    return result;", "    std::vector<long> result;\n    std::set<long>\
    \ seen;\n    for (long i : numbers) {\n        if (seen.find(i) == seen.end())\
    \ {\n            seen.insert(i);\n            result.push_back(i);\n        }\n\
    \    }\n    return result;", "  std::vector<long> result;\n  std::set<long> seen;\n\
    \  for (long i : numbers) {\n    if (seen.find(i) == seen.end()) {\n      result.push_back(i);\n\
    \      seen.insert(i);\n    }\n  }\n  return result;", "    std::vector<long>\
    \ result;\n    std::unordered_set<long> seen;\n    for (long num : numbers) {\n\
    \        if (seen.find(num) != seen.end()) {\n            continue;\n        }\n\
    \        seen.insert(num);\n        result.push_back(num);\n    }\n    return\
    \ result;", "    std::vector<long> result;\n    std::unordered_set<long> seen;\n\
    \    for (auto i : numbers) {\n        if (seen.find(i) == seen.end()) {\n   \
    \         seen.insert(i);\n            result.push_back(i);\n        }\n    }\n\
    \    return result;", "    std::vector<long> result;\n    std::unordered_set<long>\
    \ seen;\n    for (long num : numbers) {\n        if (seen.find(num) == seen.end())\
    \ {\n            seen.insert(num);\n            result.push_back(num);\n     \
    \   }\n    }\n    return result;", "    std::vector<long> result;\n    std::unordered_set<long>\
    \ seen;\n    for (auto i : numbers) {\n        if (seen.find(i) == seen.end())\
    \ {\n            result.push_back(i);\n            seen.insert(i);\n        }\n\
    \    }\n    return result;", "  std::vector<long> result;\n  std::set<long> seen;\n\
    \  for (long i : numbers) {\n    if (seen.find(i) == seen.end()) {\n      result.push_back(i);\n\
    \      seen.insert(i);\n    }\n  }\n  return result;", "    std::vector<long>\
    \ result;\n    std::set<long> seen;\n    for (long num : numbers) {\n        if\
    \ (seen.find(num) == seen.end()) {\n            seen.insert(num);\n          \
    \  result.push_back(num);\n        }\n    }\n    return result;", "    std::vector<long>\
    \ result;\n    std::unordered_set<long> seen;\n    for (auto i : numbers) {\n\
    \        if (seen.find(i) == seen.end()) {\n            seen.insert(i);\n    \
    \        result.push_back(i);\n        }\n    }\n    return result;", "    std::vector<long>\
    \ result;\n    std::set<long> seen;\n    for (long i : numbers) {\n        if\
    \ (seen.find(i) == seen.end()) {\n            result.push_back(i);\n         \
    \   seen.insert(i);\n        }\n    }\n    return result;", "    std::vector<long>\
    \ result;\n    std::set<long> seen;\n    for (long i : numbers) {\n        if\
    \ (seen.find(i) == seen.end()) {\n            result.push_back(i);\n         \
    \   seen.insert(i);\n        }\n    }\n    return result;", "    std::vector<long>\
    \ result;\n    std::set<long> seen;\n    for (long i : numbers) {\n        if\
    \ (seen.find(i) == seen.end()) {\n            result.push_back(i);\n         \
    \   seen.insert(i);\n        }\n    }\n    return result;", "    std::vector<long>\
    \ result;\n    std::set<long> seen;\n    for (long i : numbers) {\n        if\
    \ (seen.find(i) == seen.end()) {\n            result.push_back(i);\n         \
    \   seen.insert(i);\n        }\n    }\n    return result;", "  std::vector<long>\
    \ result;\n  std::set<long> seen;\n  for (long i : numbers) {\n    if (seen.find(i)\
    \ == seen.end()) {\n      result.push_back(i);\n      seen.insert(i);\n    }\n\
    \  }\n  return result;", "    std::vector<long> result;\n    std::set<long> seen;\n\
    \    for (long i : numbers) {\n        if (seen.find(i) == seen.end()) {\n   \
    \         seen.insert(i);\n            result.push_back(i);\n        }\n    }\n\
    \    return result;", "    std::vector<long> result;\n    std::set<long> seen;\n\
    \    for (long i : numbers) {\n        if (seen.find(i) == seen.end()) {\n   \
    \         result.push_back(i);\n            seen.insert(i);\n        }\n    }\n\
    \    return result;", "    std::vector<long> result;\n    std::set<long> seen;\n\
    \    for (auto n : numbers) {\n        if (seen.find(n) == seen.end()) {\n   \
    \         seen.insert(n);\n            result.push_back(n);\n        }\n    }\n\
    \    return result;", "    std::vector<long> result;\n    std::set<long> seen;\n\
    \    for (long i : numbers) {\n        if (seen.find(i) == seen.end()) {\n   \
    \         result.push_back(i);\n            seen.insert(i);\n        }\n    }\n\
    \    return result;", "    std::vector<long> result;\n    std::set<long> seen;\n\
    \    for (auto n : numbers) {\n        if (seen.find(n) == seen.end()) {\n   \
    \         seen.insert(n);\n            result.push_back(n);\n        }\n    }\n\
    \    return result;", "    std::vector<long> result;\n    std::set<long> seen;\n\
    \    for (long i : numbers) {\n        if (seen.find(i) == seen.end()) {\n   \
    \         result.push_back(i);\n            seen.insert(i);\n        }\n    }\n\
    \    return result;", "    std::vector<long> result;\n    std::set<long> seen;\n\
    \    for (long i : numbers) {\n        if (seen.find(i) == seen.end()) {\n   \
    \         seen.insert(i);\n            result.push_back(i);\n        }\n    }\n\
    \    return result;", "    std::vector<long> result;\n    std::set<long> seen;\n\
    \    for (long num : numbers) {\n        if (seen.find(num) != seen.end()) {\n\
    \            continue;\n        }\n        seen.insert(num);\n        result.push_back(num);\n\
    \    }\n    return result;", "    std::vector<long> result;\n    std::set<long>\
    \ seen;\n    for (auto i : numbers) {\n        if (seen.find(i) == seen.end())\
    \ {\n            result.push_back(i);\n            seen.insert(i);\n        }\n\
    \    }\n    return result;", "    std::vector<long> result;\n    std::set<long>\
    \ seen;\n    for (long num : numbers) {\n        if (seen.find(num) == seen.end())\
    \ {\n            seen.insert(num);\n            result.push_back(num);\n     \
    \   }\n    }\n    return result;", "    std::vector<long> result;\n    std::set<long>\
    \ seen;\n    for (long i : numbers) {\n        if (seen.find(i) == seen.end())\
    \ {\n            result.push_back(i);\n            seen.insert(i);\n        }\n\
    \    }\n    return result;", "    std::vector<long> result;\n    std::set<long>\
    \ seen;\n    for (long i : numbers) {\n        if (seen.find(i) == seen.end())\
    \ {\n            seen.insert(i);\n            result.push_back(i);\n        }\n\
    \    }\n    return result;", "  std::vector<long> result;\n  std::set<long> seen;\n\
    \  for (long i : numbers) {\n    if (seen.find(i) == seen.end()) {\n      result.push_back(i);\n\
    \      seen.insert(i);\n    }\n  }\n  return result;", "    std::vector<long>\
    \ result;\n    std::set<long> seen;\n    for (auto i : numbers) {\n        if\
    \ (seen.find(i) == seen.end()) {\n            result.push_back(i);\n         \
    \   seen.insert(i);\n        }\n    }\n    return result;", "    std::vector<long>\
    \ result;\n    std::set<long> seen;\n    for (long i : numbers) {\n        if\
    \ (seen.find(i) == seen.end()) {\n            seen.insert(i);\n            result.push_back(i);\n\
    \        }\n    }\n    return result;", "    std::vector<long> result;\n    std::unordered_set<long>\
    \ seen;\n    for (auto i : numbers) {\n        if (seen.find(i) == seen.end())\
    \ {\n            result.push_back(i);\n            seen.insert(i);\n        }\n\
    \    }\n    return result;", "    std::vector<long> result;\n    std::unordered_set<long>\
    \ seen;\n    for (auto i : numbers) {\n        if (seen.find(i) == seen.end())\
    \ {\n            result.push_back(i);\n            seen.insert(i);\n        }\n\
    \    }\n    return result;", "    std::vector<long> result;\n    std::set<long>\
    \ seen;\n    for (long i : numbers) {\n        if (seen.find(i) == seen.end())\
    \ {\n            seen.insert(i);\n            result.push_back(i);\n        }\n\
    \    }\n    return result;", "    std::vector<long> result;\n    std::set<long>\
    \ seen;\n    for (long i : numbers) {\n        if (seen.find(i) == seen.end())\
    \ {\n            result.push_back(i);\n            seen.insert(i);\n        }\n\
    \    }\n    return result;", "    std::vector<long> result;\n    std::unordered_set<long>\
    \ seen;\n    for (auto i : numbers) {\n        if (seen.find(i) == seen.end())\
    \ {\n            seen.insert(i);\n            result.push_back(i);\n        }\n\
    \    }\n    return result;", "    std::vector<long> result;\n    std::set<long>\
    \ seen;\n    for (long i : numbers) {\n        if (seen.find(i) == seen.end())\
    \ {\n            result.push_back(i);\n            seen.insert(i);\n        }\n\
    \    }\n    return result;", "    std::vector<long> result;\n    std::set<long>\
    \ seen;\n    for (long i : numbers) {\n        if (seen.find(i) == seen.end())\
    \ {\n            result.push_back(i);\n            seen.insert(i);\n        }\n\
    \    }\n    return result;", "    std::vector<long> result;\n    std::unordered_set<long>\
    \ seen;\n    for (long i : numbers) {\n        if (seen.find(i) == seen.end())\
    \ {\n            result.push_back(i);\n            seen.insert(i);\n        }\n\
    \    }\n    return result;", "    std::vector<long> result;\n    std::set<long>\
    \ seen;\n    for (long i : numbers) {\n        if (seen.find(i) == seen.end())\
    \ {\n            seen.insert(i);\n            result.push_back(i);\n        }\n\
    \    }\n    return result;", "    // Write your code here.\n    std::vector<long>\
    \ result;\n    std::unordered_set<long> seen;\n    for (long i : numbers) {\n\
    \        if (seen.find(i) == seen.end()) {\n            result.push_back(i);\n\
    \            seen.insert(i);\n        }\n    }\n    return result;", "    std::vector<long>\
    \ result;\n    std::set<long> seen;\n    for (long i : numbers) {\n        if\
    \ (seen.find(i) == seen.end()) {\n            seen.insert(i);\n            result.push_back(i);\n\
    \        }\n    }\n    return result;", "    std::vector<long> result;\n    std::unordered_set<long>\
    \ seen;\n    for (auto i : numbers) {\n        if (seen.find(i) == seen.end())\
    \ {\n            seen.insert(i);\n            result.push_back(i);\n        }\n\
    \    }\n    return result;", "    std::vector<long> result;\n    std::unordered_set<long>\
    \ seen;\n    for (long i : numbers) {\n        if (seen.find(i) == seen.end())\
    \ {\n            seen.insert(i);\n            result.push_back(i);\n        }\n\
    \    }\n    return result;", "    std::vector<long> result;\n    std::unordered_set<long>\
    \ seen;\n    for (long num : numbers) {\n        if (seen.find(num) == seen.end())\
    \ {\n            seen.insert(num);\n            result.push_back(num);\n     \
    \   }\n    }\n    return result;", "    std::vector<long> result;\n    std::unordered_set<long>\
    \ seen;\n    for (long i : numbers) {\n        if (seen.find(i) == seen.end())\
    \ {\n            result.push_back(i);\n            seen.insert(i);\n        }\n\
    \    }\n    return result;", "    std::vector<long> result;\n    std::unordered_set<long>\
    \ seen;\n    for (long i : numbers) {\n        if (seen.find(i) == seen.end())\
    \ {\n            result.push_back(i);\n            seen.insert(i);\n        }\n\
    \    }\n    return result;", "    std::vector<long> result;\n    std::set<long>\
    \ seen;\n    for (long i : numbers) {\n        if (seen.find(i) == seen.end())\
    \ {\n            seen.insert(i);\n            result.push_back(i);\n        }\n\
    \    }\n    return result;", "    std::vector<long> result;\n    std::unordered_set<long>\
    \ seen;\n    for (auto i : numbers) {\n        if (seen.find(i) == seen.end())\
    \ {\n            result.push_back(i);\n            seen.insert(i);\n        }\n\
    \    }\n    return result;", "    std::vector<long> result;\n    std::unordered_set<long>\
    \ seen;\n    for (auto i : numbers) {\n        if (seen.count(i) == 0) {\n   \
    \         result.push_back(i);\n            seen.insert(i);\n        }\n    }\n\
    \    return result;", "    std::vector<long> result;\n    std::set<long> seen;\n\
    \    for (long i : numbers) {\n        if (seen.find(i) == seen.end()) {\n   \
    \         result.push_back(i);\n            seen.insert(i);\n        }\n    }\n\
    \    return result;", "    std::vector<long> result;\n    std::unordered_set<long>\
    \ seen;\n    for (auto i : numbers) {\n        if (seen.count(i) == 0) {\n   \
    \         result.push_back(i);\n            seen.insert(i);\n        }\n    }\n\
    \    return result;", "    std::vector<long> result;\n    std::unordered_set<long>\
    \ seen;\n    for (auto n : numbers) {\n        if (seen.find(n) == seen.end())\
    \ {\n            result.push_back(n);\n            seen.insert(n);\n        }\n\
    \    }\n    return result;", "    std::vector<long> result;\n    std::set<long>\
    \ seen;\n    for (long i : numbers) {\n        if (seen.find(i) == seen.end())\
    \ {\n            result.push_back(i);\n            seen.insert(i);\n        }\n\
    \    }\n    return result;", "    std::vector<long> result;\n    std::unordered_set<long>\
    \ seen;\n    for (long num : numbers) {\n        if (seen.find(num) == seen.end())\
    \ {\n            seen.insert(num);\n            result.push_back(num);\n     \
    \   }\n    }\n    return result;", "    std::vector<long> result;\n    std::set<long>\
    \ seen;\n    for (auto i : numbers) {\n        if (seen.find(i) == seen.end())\
    \ {\n            seen.insert(i);\n            result.push_back(i);\n        }\n\
    \    }\n    return result;", "    std::vector<long> result;\n    std::unordered_set<long>\
    \ seen;\n    for (auto n : numbers) {\n        if (seen.find(n) == seen.end())\
    \ {\n            seen.insert(n);\n            result.push_back(n);\n        }\n\
    \    }\n    return result;", "  std::vector<long> result;\n  std::set<long> seen;\n\
    \  for (long i : numbers) {\n    if (seen.find(i) == seen.end()) {\n      result.push_back(i);\n\
    \      seen.insert(i);\n    }\n  }\n  return result;", "    std::vector<long>\
    \ result;\n    std::set<long> seen;\n    for (auto n : numbers) {\n        if\
    \ (seen.find(n) == seen.end()) {\n            result.push_back(n);\n         \
    \   seen.insert(n);\n        }\n    }\n    return result;", "    std::vector<long>\
    \ result;\n    std::unordered_set<long> seen;\n    for (long num : numbers) {\n\
    \        if (seen.find(num) == seen.end()) {\n            result.push_back(num);\n\
    \            seen.insert(num);\n        }\n    }\n    return result;", "    std::vector<long>\
    \ result;\n    std::set<long> seen;\n    for (auto i : numbers) {\n        if\
    \ (seen.find(i) == seen.end()) {\n            result.push_back(i);\n         \
    \   seen.insert(i);\n        }\n    }\n    return result;", "    std::vector<long>\
    \ result;\n    std::unordered_set<long> seen;\n    for (long num : numbers) {\n\
    \        if (seen.find(num) == seen.end()) {\n            result.push_back(num);\n\
    \            seen.insert(num);\n        }\n    }\n    return result;", "    std::vector<long>\
    \ result;\n    std::unordered_set<long> seen;\n    for (long i : numbers) {\n\
    \        if (seen.find(i) == seen.end()) {\n            seen.insert(i);\n    \
    \        result.push_back(i);\n        }\n    }\n    return result;", "    std::vector<long>\
    \ result;\n    std::set<long> seen;\n    for (long num : numbers) {\n        if\
    \ (seen.find(num) == seen.end()) {\n            seen.insert(num);\n          \
    \  result.push_back(num);\n        }\n    }\n    return result;", "    std::vector<long>\
    \ result;\n    std::unordered_set<long> seen;\n    for (long i : numbers) {\n\
    \        if (seen.find(i) == seen.end()) {\n            seen.insert(i);\n    \
    \        result.push_back(i);\n        }\n    }\n    return result;", "    std::vector<long>\
    \ result;\n    std::unordered_set<long> seen;\n    for (auto i : numbers) {\n\
    \        if (seen.find(i) == seen.end()) {\n            seen.insert(i);\n    \
    \        result.push_back(i);\n        }\n    }\n    return result;", "    std::vector<long>\
    \ result;\n    std::set<long> seen;\n    for (long num : numbers) {\n        if\
    \ (seen.find(num) != seen.end()) {\n            continue;\n        }\n       \
    \ seen.insert(num);\n        result.push_back(num);\n    }\n    return result;",
  "    std::vector<long> result;\n    std::set<long> seen;\n    for (auto i : numbers)\
    \ {\n        if (seen.find(i) == seen.end()) {\n            result.push_back(i);\n\
    \            seen.insert(i);\n        }\n    }\n    return result;", "    std::vector<long>\
    \ result;\n    std::set<long> seen;\n    for (long i : numbers) {\n        if\
    \ (seen.find(i) == seen.end()) {\n            seen.insert(i);\n            result.push_back(i);\n\
    \        }\n    }\n    return result;", "    std::vector<long> result;\n    std::set<long>\
    \ seen;\n    for (long i : numbers) {\n        if (seen.find(i) == seen.end())\
    \ {\n            result.push_back(i);\n            seen.insert(i);\n        }\n\
    \    }\n    return result;", "    std::vector<long> result;\n    std::set<long>\
    \ seen;\n    for (long i : numbers) {\n        if (seen.find(i) == seen.end())\
    \ {\n            result.push_back(i);\n            seen.insert(i);\n        }\n\
    \    }\n    return result;", "    std::vector<long> result;\n    std::unordered_set<long>\
    \ seen;\n    for (auto n : numbers) {\n        if (seen.find(n) == seen.end())\
    \ {\n            result.push_back(n);\n            seen.insert(n);\n        }\n\
    \    }\n    return result;", "    std::vector<long> result;\n    std::unordered_set<long>\
    \ seen;\n    for (auto i : numbers) {\n        if (seen.find(i) == seen.end())\
    \ {\n            result.push_back(i);\n            seen.insert(i);\n        }\n\
    \    }\n    return result;", "    std::vector<long> result;\n    std::set<long>\
    \ seen;\n    for (auto i : numbers) {\n        if (seen.find(i) == seen.end())\
    \ {\n            result.push_back(i);\n            seen.insert(i);\n        }\n\
    \    }\n    return result;", "    std::vector<long> result;\n    std::set<long>\
    \ seen;\n    for (long num : numbers) {\n        if (seen.find(num) != seen.end())\
    \ {\n            continue;\n        }\n        seen.insert(num);\n        result.push_back(num);\n\
    \    }\n    return result;", "    std::vector<long> result;\n    std::unordered_set<long>\
    \ seen;\n    for (long i : numbers) {\n        if (seen.find(i) == seen.end())\
    \ {\n            result.push_back(i);\n            seen.insert(i);\n        }\n\
    \    }\n    return result;", "    std::vector<long> result;\n    std::set<long>\
    \ seen;\n    for (long i : numbers) {\n        if (seen.find(i) == seen.end())\
    \ {\n            seen.insert(i);\n            result.push_back(i);\n        }\n\
    \    }\n    return result;", "    std::vector<long> result;\n    std::unordered_set<long>\
    \ seen;\n    for (auto i : numbers) {\n        if (seen.find(i) == seen.end())\
    \ {\n            result.push_back(i);\n            seen.insert(i);\n        }\n\
    \    }\n    return result;", "    std::vector<long> result;\n    std::set<long>\
    \ seen;\n    for (long num : numbers) {\n        if (seen.find(num) == seen.end())\
    \ {\n            seen.insert(num);\n            result.push_back(num);\n     \
    \   }\n    }\n    return result;", "    std::vector<long> result;\n    std::set<long>\
    \ seen;\n    for (long num : numbers) {\n        if (seen.find(num) != seen.end())\
    \ {\n            continue;\n        }\n        seen.insert(num);\n        result.push_back(num);\n\
    \    }\n    return result;", "    std::vector<long> result;\n    std::set<long>\
    \ seen;\n    for (long num : numbers) {\n        if (seen.find(num) == seen.end())\
    \ {\n            seen.insert(num);\n            result.push_back(num);\n     \
    \   }\n    }\n    return result;", "    std::vector<long> result;\n    std::set<long>\
    \ seen;\n    for (long i : numbers) {\n        if (seen.find(i) == seen.end())\
    \ {\n            result.push_back(i);\n            seen.insert(i);\n        }\n\
    \    }\n    return result;", "    std::vector<long> result;\n    std::set<long>\
    \ seen;\n    for (long i : numbers) {\n        if (seen.find(i) == seen.end())\
    \ {\n            result.push_back(i);\n            seen.insert(i);\n        }\n\
    \    }\n    return result;", "    std::vector<long> result;\n    std::set<long>\
    \ seen;\n    for (long num : numbers) {\n        if (seen.find(num) != seen.end())\
    \ {\n            continue;\n        }\n        seen.insert(num);\n        result.push_back(num);\n\
    \    }\n    return result;", "    std::vector<long> result;\n    std::set<long>\
    \ seen;\n    for (long num : numbers) {\n        if (seen.find(num) == seen.end())\
    \ {\n            result.push_back(num);\n            seen.insert(num);\n     \
    \   }\n    }\n    return result;", "    std::vector<long> result;\n    std::set<long>\
    \ seen;\n    for (long i : numbers) {\n        if (seen.find(i) == seen.end())\
    \ {\n            result.push_back(i);\n            seen.insert(i);\n        }\n\
    \    }\n    return result;", "    std::vector<long> result;\n    std::unordered_set<long>\
    \ seen;\n    for (long number : numbers) {\n        if (seen.find(number) == seen.end())\
    \ {\n            seen.insert(number);\n            result.push_back(number);\n\
    \        }\n    }\n    return result;", "    std::vector<long> result;\n    std::set<long>\
    \ seen;\n    for (auto i : numbers) {\n        if (seen.find(i) == seen.end())\
    \ {\n            seen.insert(i);\n            result.push_back(i);\n        }\n\
    \    }\n    return result;", "    std::vector<long> result;\n    std::set<long>\
    \ seen;\n    for (long i : numbers) {\n        if (seen.find(i) == seen.end())\
    \ {\n            result.push_back(i);\n            seen.insert(i);\n        }\n\
    \    }\n    return result;", "    std::vector<long> result;\n    std::set<long>\
    \ seen;\n    for (auto i : numbers) {\n        if (seen.find(i) == seen.end())\
    \ {\n            result.push_back(i);\n            seen.insert(i);\n        }\n\
    \    }\n    return result;", "    std::vector<long> result;\n    std::set<long>\
    \ seen;\n    for (auto i : numbers) {\n        if (seen.find(i) == seen.end())\
    \ {\n            result.push_back(i);\n            seen.insert(i);\n        }\n\
    \    }\n    return result;", "    std::vector<long> result;\n    std::set<long>\
    \ seen;\n    for (long i : numbers) {\n        if (seen.find(i) == seen.end())\
    \ {\n            seen.insert(i);\n            result.push_back(i);\n        }\n\
    \    }\n    return result;", "    std::vector<long> result;\n    std::unordered_set<long>\
    \ seen;\n    for (auto i : numbers) {\n        if (seen.find(i) == seen.end())\
    \ {\n            seen.insert(i);\n            result.push_back(i);\n        }\n\
    \    }\n    return result;", "  std::vector<long> result;\n  std::unordered_set<long>\
    \ seen;\n  for (auto i : numbers) {\n    if (seen.find(i) == seen.end()) {\n \
    \     result.push_back(i);\n      seen.insert(i);\n    }\n  }\n  return result;"]
stop_tokens:
- "\n}"
