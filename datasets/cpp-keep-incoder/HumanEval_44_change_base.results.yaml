name: HumanEval_44_change_base
language: cpp
results:
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base(8, 3)\n// '22'\n// >>> change_base(8,\
    \ 2)\n// '1000'\n// >>> change_base(7, 2)\n// '111'\nstd::string change_base(long\
    \ x, long base) {\n    std::string ans = \"\";\n    while (x > 0) {\n        ans\
    \ += (char)(x % base);\n        x /= base;\n    }\n    return ans;\n}\nint main()\
    \ {\n    auto candidate = change_base;\n    assert(candidate((8), (3)) == (\"\
    22\"));\n    assert(candidate((9), (3)) == (\"100\"));\n    assert(candidate((234),\
    \ (2)) == (\"11101010\"));\n    assert(candidate((16), (2)) == (\"10000\"));\n\
    \    assert(candidate((8), (2)) == (\"1000\"));\n    assert(candidate((7), (2))\
    \ == (\"111\"));\n    assert(candidate((2), (3)) == (\"2\"));\n    assert(candidate((3),\
    \ (4)) == (\"3\"));\n    assert(candidate((4), (5)) == (\"4\"));\n    assert(candidate((5),\
    \ (6)) == (\"5\"));\n    assert(candidate((6), (7)) == (\"6\"));\n    assert(candidate((7),\
    \ (8)) == (\"7\"));\n}\n"
  stdout: ''
  stderr: "tmp0yhw7e_2: /tmp/tmp0yhw7e_2.cpp:22: int main(): Assertion `candidate((8),\
    \ (3)) == (\"22\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base(8, 3)\n// '22'\n// >>> change_base(8,\
    \ 2)\n// '1000'\n// >>> change_base(7, 2)\n// '111'\nstd::string change_base(long\
    \ x, long base) {\n    std::string ans = \"\";\n    while (x != 0) {\n       \
    \ long r = x % base;\n        ans = std::to_string(r) + ans;\n        x = x /\
    \ base;\n    }\n    return ans;\n}\nint main() {\n    auto candidate = change_base;\n\
    \    assert(candidate((8), (3)) == (\"22\"));\n    assert(candidate((9), (3))\
    \ == (\"100\"));\n    assert(candidate((234), (2)) == (\"11101010\"));\n    assert(candidate((16),\
    \ (2)) == (\"10000\"));\n    assert(candidate((8), (2)) == (\"1000\"));\n    assert(candidate((7),\
    \ (2)) == (\"111\"));\n    assert(candidate((2), (3)) == (\"2\"));\n    assert(candidate((3),\
    \ (4)) == (\"3\"));\n    assert(candidate((4), (5)) == (\"4\"));\n    assert(candidate((5),\
    \ (6)) == (\"5\"));\n    assert(candidate((6), (7)) == (\"6\"));\n    assert(candidate((7),\
    \ (8)) == (\"7\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base(8, 3)\n// '22'\n// >>> change_base(8,\
    \ 2)\n// '1000'\n// >>> change_base(7, 2)\n// '111'\nstd::string change_base(long\
    \ x, long base) {\n    std::string ans = \"\";\n    long tmp = x;\n    while (base\
    \ > 0) {\n        tmp = tmp / base;\n        ans = std::to_string(tmp) + ans;\n\
    \        base--;\n    }\n    return ans;\n}\nint main() {\n    auto candidate\
    \ = change_base;\n    assert(candidate((8), (3)) == (\"22\"));\n    assert(candidate((9),\
    \ (3)) == (\"100\"));\n    assert(candidate((234), (2)) == (\"11101010\"));\n\
    \    assert(candidate((16), (2)) == (\"10000\"));\n    assert(candidate((8), (2))\
    \ == (\"1000\"));\n    assert(candidate((7), (2)) == (\"111\"));\n    assert(candidate((2),\
    \ (3)) == (\"2\"));\n    assert(candidate((3), (4)) == (\"3\"));\n    assert(candidate((4),\
    \ (5)) == (\"4\"));\n    assert(candidate((5), (6)) == (\"5\"));\n    assert(candidate((6),\
    \ (7)) == (\"6\"));\n    assert(candidate((7), (8)) == (\"7\"));\n}\n"
  stdout: ''
  stderr: "tmp78_5zsgb: /tmp/tmp78_5zsgb.cpp:24: int main(): Assertion `candidate((8),\
    \ (3)) == (\"22\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base(8, 3)\n// '22'\n// >>> change_base(8,\
    \ 2)\n// '1000'\n// >>> change_base(7, 2)\n// '111'\nstd::string change_base(long\
    \ x, long base) {\n    std::string ans = \"\";\n    long temp = x;\n    while\
    \ (temp > 0) {\n        ans = std::to_string(temp % base) + ans;\n        temp\
    \ = temp / base;\n    }\n    return ans;\n}\nint main() {\n    auto candidate\
    \ = change_base;\n    assert(candidate((8), (3)) == (\"22\"));\n    assert(candidate((9),\
    \ (3)) == (\"100\"));\n    assert(candidate((234), (2)) == (\"11101010\"));\n\
    \    assert(candidate((16), (2)) == (\"10000\"));\n    assert(candidate((8), (2))\
    \ == (\"1000\"));\n    assert(candidate((7), (2)) == (\"111\"));\n    assert(candidate((2),\
    \ (3)) == (\"2\"));\n    assert(candidate((3), (4)) == (\"3\"));\n    assert(candidate((4),\
    \ (5)) == (\"4\"));\n    assert(candidate((5), (6)) == (\"5\"));\n    assert(candidate((6),\
    \ (7)) == (\"6\"));\n    assert(candidate((7), (8)) == (\"7\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base(8, 3)\n// '22'\n// >>> change_base(8,\
    \ 2)\n// '1000'\n// >>> change_base(7, 2)\n// '111'\nstd::string change_base(long\
    \ x, long base) {\n    std::string ans = \"\";\n    long temp = x;\n    while\
    \ (temp > 0) {\n        int digit = temp % base;\n        ans = std::to_string(digit)\
    \ + ans;\n        temp = temp / base;\n    }\n    return ans;\n}\nint main() {\n\
    \    auto candidate = change_base;\n    assert(candidate((8), (3)) == (\"22\"\
    ));\n    assert(candidate((9), (3)) == (\"100\"));\n    assert(candidate((234),\
    \ (2)) == (\"11101010\"));\n    assert(candidate((16), (2)) == (\"10000\"));\n\
    \    assert(candidate((8), (2)) == (\"1000\"));\n    assert(candidate((7), (2))\
    \ == (\"111\"));\n    assert(candidate((2), (3)) == (\"2\"));\n    assert(candidate((3),\
    \ (4)) == (\"3\"));\n    assert(candidate((4), (5)) == (\"4\"));\n    assert(candidate((5),\
    \ (6)) == (\"5\"));\n    assert(candidate((6), (7)) == (\"6\"));\n    assert(candidate((7),\
    \ (8)) == (\"7\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base(8, 3)\n// '22'\n// >>> change_base(8,\
    \ 2)\n// '1000'\n// >>> change_base(7, 2)\n// '111'\nstd::string change_base(long\
    \ x, long base) {\n    std::string ans = \"\";\n    long tmp = x;\n    while (base\
    \ > 0) {\n        tmp = tmp / base;\n        ans = std::to_string(tmp) + ans;\n\
    \        base--;\n    }\n    return ans;\n}\nint main() {\n    auto candidate\
    \ = change_base;\n    assert(candidate((8), (3)) == (\"22\"));\n    assert(candidate((9),\
    \ (3)) == (\"100\"));\n    assert(candidate((234), (2)) == (\"11101010\"));\n\
    \    assert(candidate((16), (2)) == (\"10000\"));\n    assert(candidate((8), (2))\
    \ == (\"1000\"));\n    assert(candidate((7), (2)) == (\"111\"));\n    assert(candidate((2),\
    \ (3)) == (\"2\"));\n    assert(candidate((3), (4)) == (\"3\"));\n    assert(candidate((4),\
    \ (5)) == (\"4\"));\n    assert(candidate((5), (6)) == (\"5\"));\n    assert(candidate((6),\
    \ (7)) == (\"6\"));\n    assert(candidate((7), (8)) == (\"7\"));\n}\n"
  stdout: ''
  stderr: "tmpo4yto7ic: /tmp/tmpo4yto7ic.cpp:24: int main(): Assertion `candidate((8),\
    \ (3)) == (\"22\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base(8, 3)\n// '22'\n// >>> change_base(8,\
    \ 2)\n// '1000'\n// >>> change_base(7, 2)\n// '111'\nstd::string change_base(long\
    \ x, long base) {\n    long rem = x % base;\n    std::string ans = \"\";\n   \
    \ while (x > 0) {\n        ans += (char)(x % base);\n        x /= base;\n    }\n\
    \    if (rem != 0) {\n        ans += (char)(rem % base);\n    }\n    return ans;\n\
    }\nint main() {\n    auto candidate = change_base;\n    assert(candidate((8),\
    \ (3)) == (\"22\"));\n    assert(candidate((9), (3)) == (\"100\"));\n    assert(candidate((234),\
    \ (2)) == (\"11101010\"));\n    assert(candidate((16), (2)) == (\"10000\"));\n\
    \    assert(candidate((8), (2)) == (\"1000\"));\n    assert(candidate((7), (2))\
    \ == (\"111\"));\n    assert(candidate((2), (3)) == (\"2\"));\n    assert(candidate((3),\
    \ (4)) == (\"3\"));\n    assert(candidate((4), (5)) == (\"4\"));\n    assert(candidate((5),\
    \ (6)) == (\"5\"));\n    assert(candidate((6), (7)) == (\"6\"));\n    assert(candidate((7),\
    \ (8)) == (\"7\"));\n}\n"
  stdout: ''
  stderr: "tmp_gdogg2f: /tmp/tmp_gdogg2f.cpp:26: int main(): Assertion `candidate((8),\
    \ (3)) == (\"22\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base(8, 3)\n// '22'\n// >>> change_base(8,\
    \ 2)\n// '1000'\n// >>> change_base(7, 2)\n// '111'\nstd::string change_base(long\
    \ x, long base) {\n    std::string ans = \"\";\n    long tmp = x;\n    while (base\
    \ > 0) {\n        tmp = tmp / base;\n        ans = std::to_string(tmp % base)\
    \ + ans;\n        base--;\n    }\n    return ans;\n}\nint main() {\n    auto candidate\
    \ = change_base;\n    assert(candidate((8), (3)) == (\"22\"));\n    assert(candidate((9),\
    \ (3)) == (\"100\"));\n    assert(candidate((234), (2)) == (\"11101010\"));\n\
    \    assert(candidate((16), (2)) == (\"10000\"));\n    assert(candidate((8), (2))\
    \ == (\"1000\"));\n    assert(candidate((7), (2)) == (\"111\"));\n    assert(candidate((2),\
    \ (3)) == (\"2\"));\n    assert(candidate((3), (4)) == (\"3\"));\n    assert(candidate((4),\
    \ (5)) == (\"4\"));\n    assert(candidate((5), (6)) == (\"5\"));\n    assert(candidate((6),\
    \ (7)) == (\"6\"));\n    assert(candidate((7), (8)) == (\"7\"));\n}\n"
  stdout: ''
  stderr: "tmpqfhs298_: /tmp/tmpqfhs298_.cpp:24: int main(): Assertion `candidate((8),\
    \ (3)) == (\"22\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base(8, 3)\n// '22'\n// >>> change_base(8,\
    \ 2)\n// '1000'\n// >>> change_base(7, 2)\n// '111'\nstd::string change_base(long\
    \ x, long base) {\n    std::string ans = \"\";\n    while (x > 0) {\n        ans\
    \ += (char)(x % base);\n        x /= base;\n    }\n    return ans;\n}\nint main()\
    \ {\n    auto candidate = change_base;\n    assert(candidate((8), (3)) == (\"\
    22\"));\n    assert(candidate((9), (3)) == (\"100\"));\n    assert(candidate((234),\
    \ (2)) == (\"11101010\"));\n    assert(candidate((16), (2)) == (\"10000\"));\n\
    \    assert(candidate((8), (2)) == (\"1000\"));\n    assert(candidate((7), (2))\
    \ == (\"111\"));\n    assert(candidate((2), (3)) == (\"2\"));\n    assert(candidate((3),\
    \ (4)) == (\"3\"));\n    assert(candidate((4), (5)) == (\"4\"));\n    assert(candidate((5),\
    \ (6)) == (\"5\"));\n    assert(candidate((6), (7)) == (\"6\"));\n    assert(candidate((7),\
    \ (8)) == (\"7\"));\n}\n"
  stdout: ''
  stderr: "tmp29zq7f2n: /tmp/tmp29zq7f2n.cpp:22: int main(): Assertion `candidate((8),\
    \ (3)) == (\"22\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base(8, 3)\n// '22'\n// >>> change_base(8,\
    \ 2)\n// '1000'\n// >>> change_base(7, 2)\n// '111'\nstd::string change_base(long\
    \ x, long base) {\n    long tmp = x;\n    std::string ans = \"\";\n    while (base\
    \ > 0) {\n        tmp = tmp / base;\n        ans = std::to_string(tmp) + ans;\n\
    \        base--;\n    }\n    while (base < 0) {\n        tmp = tmp * base;\n \
    \       ans = std::to_string(tmp) + ans;\n        base++;\n    }\n    return ans;\n\
    }\nint main() {\n    auto candidate = change_base;\n    assert(candidate((8),\
    \ (3)) == (\"22\"));\n    assert(candidate((9), (3)) == (\"100\"));\n    assert(candidate((234),\
    \ (2)) == (\"11101010\"));\n    assert(candidate((16), (2)) == (\"10000\"));\n\
    \    assert(candidate((8), (2)) == (\"1000\"));\n    assert(candidate((7), (2))\
    \ == (\"111\"));\n    assert(candidate((2), (3)) == (\"2\"));\n    assert(candidate((3),\
    \ (4)) == (\"3\"));\n    assert(candidate((4), (5)) == (\"4\"));\n    assert(candidate((5),\
    \ (6)) == (\"5\"));\n    assert(candidate((6), (7)) == (\"6\"));\n    assert(candidate((7),\
    \ (8)) == (\"7\"));\n}\n"
  stdout: ''
  stderr: "tmpht36kq1q: /tmp/tmpht36kq1q.cpp:29: int main(): Assertion `candidate((8),\
    \ (3)) == (\"22\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base(8, 3)\n// '22'\n// >>> change_base(8,\
    \ 2)\n// '1000'\n// >>> change_base(7, 2)\n// '111'\nstd::string change_base(long\
    \ x, long base) {\n    std::string ans = \"\";\n    long temp = x;\n    while\
    \ (temp > 0) {\n        ans += (temp % base);\n        temp /= base;\n    }\n\
    \    return ans;\n}\nint main() {\n    auto candidate = change_base;\n    assert(candidate((8),\
    \ (3)) == (\"22\"));\n    assert(candidate((9), (3)) == (\"100\"));\n    assert(candidate((234),\
    \ (2)) == (\"11101010\"));\n    assert(candidate((16), (2)) == (\"10000\"));\n\
    \    assert(candidate((8), (2)) == (\"1000\"));\n    assert(candidate((7), (2))\
    \ == (\"111\"));\n    assert(candidate((2), (3)) == (\"2\"));\n    assert(candidate((3),\
    \ (4)) == (\"3\"));\n    assert(candidate((4), (5)) == (\"4\"));\n    assert(candidate((5),\
    \ (6)) == (\"5\"));\n    assert(candidate((6), (7)) == (\"6\"));\n    assert(candidate((7),\
    \ (8)) == (\"7\"));\n}\n"
  stdout: ''
  stderr: "tmphk59b_ph: /tmp/tmphk59b_ph.cpp:23: int main(): Assertion `candidate((8),\
    \ (3)) == (\"22\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base(8, 3)\n// '22'\n// >>> change_base(8,\
    \ 2)\n// '1000'\n// >>> change_base(7, 2)\n// '111'\nstd::string change_base(long\
    \ x, long base) {\n    std::string ans = \"\";\n    long temp;\n    temp = x;\n\
    \    while (temp != 0) {\n        temp = temp / base;\n        ans = std::to_string(temp)\
    \ + ans;\n    }\n    return ans;\n}\nint main() {\n    auto candidate = change_base;\n\
    \    assert(candidate((8), (3)) == (\"22\"));\n    assert(candidate((9), (3))\
    \ == (\"100\"));\n    assert(candidate((234), (2)) == (\"11101010\"));\n    assert(candidate((16),\
    \ (2)) == (\"10000\"));\n    assert(candidate((8), (2)) == (\"1000\"));\n    assert(candidate((7),\
    \ (2)) == (\"111\"));\n    assert(candidate((2), (3)) == (\"2\"));\n    assert(candidate((3),\
    \ (4)) == (\"3\"));\n    assert(candidate((4), (5)) == (\"4\"));\n    assert(candidate((5),\
    \ (6)) == (\"5\"));\n    assert(candidate((6), (7)) == (\"6\"));\n    assert(candidate((7),\
    \ (8)) == (\"7\"));\n}\n"
  stdout: ''
  stderr: "tmp5qnl9bo1: /tmp/tmp5qnl9bo1.cpp:24: int main(): Assertion `candidate((8),\
    \ (3)) == (\"22\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base(8, 3)\n// '22'\n// >>> change_base(8,\
    \ 2)\n// '1000'\n// >>> change_base(7, 2)\n// '111'\nstd::string change_base(long\
    \ x, long base) {\n    std::string ans = \"\";\n    while (x != 0) {\n       \
    \ ans += (x % base);\n        x /= base;\n    }\n    return ans;\n}\nint main()\
    \ {\n    auto candidate = change_base;\n    assert(candidate((8), (3)) == (\"\
    22\"));\n    assert(candidate((9), (3)) == (\"100\"));\n    assert(candidate((234),\
    \ (2)) == (\"11101010\"));\n    assert(candidate((16), (2)) == (\"10000\"));\n\
    \    assert(candidate((8), (2)) == (\"1000\"));\n    assert(candidate((7), (2))\
    \ == (\"111\"));\n    assert(candidate((2), (3)) == (\"2\"));\n    assert(candidate((3),\
    \ (4)) == (\"3\"));\n    assert(candidate((4), (5)) == (\"4\"));\n    assert(candidate((5),\
    \ (6)) == (\"5\"));\n    assert(candidate((6), (7)) == (\"6\"));\n    assert(candidate((7),\
    \ (8)) == (\"7\"));\n}\n"
  stdout: ''
  stderr: "tmpv09785gm: /tmp/tmpv09785gm.cpp:22: int main(): Assertion `candidate((8),\
    \ (3)) == (\"22\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base(8, 3)\n// '22'\n// >>> change_base(8,\
    \ 2)\n// '1000'\n// >>> change_base(7, 2)\n// '111'\nstd::string change_base(long\
    \ x, long base) {\n    std::string ans = \"\";\n    long temp = 0;\n    temp =\
    \ x;\n    while (temp != 0) {\n        ans += (temp % base);\n        temp /=\
    \ base;\n    }\n    return ans;\n}\nint main() {\n    auto candidate = change_base;\n\
    \    assert(candidate((8), (3)) == (\"22\"));\n    assert(candidate((9), (3))\
    \ == (\"100\"));\n    assert(candidate((234), (2)) == (\"11101010\"));\n    assert(candidate((16),\
    \ (2)) == (\"10000\"));\n    assert(candidate((8), (2)) == (\"1000\"));\n    assert(candidate((7),\
    \ (2)) == (\"111\"));\n    assert(candidate((2), (3)) == (\"2\"));\n    assert(candidate((3),\
    \ (4)) == (\"3\"));\n    assert(candidate((4), (5)) == (\"4\"));\n    assert(candidate((5),\
    \ (6)) == (\"5\"));\n    assert(candidate((6), (7)) == (\"6\"));\n    assert(candidate((7),\
    \ (8)) == (\"7\"));\n}\n"
  stdout: ''
  stderr: "tmpb941rxdv: /tmp/tmpb941rxdv.cpp:24: int main(): Assertion `candidate((8),\
    \ (3)) == (\"22\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base(8, 3)\n// '22'\n// >>> change_base(8,\
    \ 2)\n// '1000'\n// >>> change_base(7, 2)\n// '111'\nstd::string change_base(long\
    \ x, long base) {\n    std::string ans = \"\";\n    long temp = x;\n    while\
    \ (temp > 0) {\n        ans += (temp % base);\n        temp /= base;\n    }\n\
    \    return ans;\n}\nint main() {\n    auto candidate = change_base;\n    assert(candidate((8),\
    \ (3)) == (\"22\"));\n    assert(candidate((9), (3)) == (\"100\"));\n    assert(candidate((234),\
    \ (2)) == (\"11101010\"));\n    assert(candidate((16), (2)) == (\"10000\"));\n\
    \    assert(candidate((8), (2)) == (\"1000\"));\n    assert(candidate((7), (2))\
    \ == (\"111\"));\n    assert(candidate((2), (3)) == (\"2\"));\n    assert(candidate((3),\
    \ (4)) == (\"3\"));\n    assert(candidate((4), (5)) == (\"4\"));\n    assert(candidate((5),\
    \ (6)) == (\"5\"));\n    assert(candidate((6), (7)) == (\"6\"));\n    assert(candidate((7),\
    \ (8)) == (\"7\"));\n}\n"
  stdout: ''
  stderr: "tmpfvlm_r2k: /tmp/tmpfvlm_r2k.cpp:23: int main(): Assertion `candidate((8),\
    \ (3)) == (\"22\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base(8, 3)\n// '22'\n// >>> change_base(8,\
    \ 2)\n// '1000'\n// >>> change_base(7, 2)\n// '111'\nstd::string change_base(long\
    \ x, long base) {\n    std::string ans = \"\";\n    long n = x;\n    while (n\
    \ > 0) {\n        int digit = n % base;\n        ans += digit;\n        n /= base;\n\
    \    }\n    return ans;\n}\nint main() {\n    auto candidate = change_base;\n\
    \    assert(candidate((8), (3)) == (\"22\"));\n    assert(candidate((9), (3))\
    \ == (\"100\"));\n    assert(candidate((234), (2)) == (\"11101010\"));\n    assert(candidate((16),\
    \ (2)) == (\"10000\"));\n    assert(candidate((8), (2)) == (\"1000\"));\n    assert(candidate((7),\
    \ (2)) == (\"111\"));\n    assert(candidate((2), (3)) == (\"2\"));\n    assert(candidate((3),\
    \ (4)) == (\"3\"));\n    assert(candidate((4), (5)) == (\"4\"));\n    assert(candidate((5),\
    \ (6)) == (\"5\"));\n    assert(candidate((6), (7)) == (\"6\"));\n    assert(candidate((7),\
    \ (8)) == (\"7\"));\n}\n"
  stdout: ''
  stderr: "tmp9v36ramv: /tmp/tmp9v36ramv.cpp:24: int main(): Assertion `candidate((8),\
    \ (3)) == (\"22\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base(8, 3)\n// '22'\n// >>> change_base(8,\
    \ 2)\n// '1000'\n// >>> change_base(7, 2)\n// '111'\nstd::string change_base(long\
    \ x, long base) {\n    std::string ans = \"\";\n    long n = x;\n    while (n\
    \ > 0) {\n        int r = n % base;\n        ans += char(r + '0');\n        n\
    \ /= base;\n    }\n    return ans;\n}\nint main() {\n    auto candidate = change_base;\n\
    \    assert(candidate((8), (3)) == (\"22\"));\n    assert(candidate((9), (3))\
    \ == (\"100\"));\n    assert(candidate((234), (2)) == (\"11101010\"));\n    assert(candidate((16),\
    \ (2)) == (\"10000\"));\n    assert(candidate((8), (2)) == (\"1000\"));\n    assert(candidate((7),\
    \ (2)) == (\"111\"));\n    assert(candidate((2), (3)) == (\"2\"));\n    assert(candidate((3),\
    \ (4)) == (\"3\"));\n    assert(candidate((4), (5)) == (\"4\"));\n    assert(candidate((5),\
    \ (6)) == (\"5\"));\n    assert(candidate((6), (7)) == (\"6\"));\n    assert(candidate((7),\
    \ (8)) == (\"7\"));\n}\n"
  stdout: ''
  stderr: "tmpfgor0u5x: /tmp/tmpfgor0u5x.cpp:25: int main(): Assertion `candidate((9),\
    \ (3)) == (\"100\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base(8, 3)\n// '22'\n// >>> change_base(8,\
    \ 2)\n// '1000'\n// >>> change_base(7, 2)\n// '111'\nstd::string change_base(long\
    \ x, long base) {\n    std::string ans = \"\";\n    while (x > 0) {\n        int\
    \ digit = x % base;\n        ans = std::to_string(digit) + ans;\n        x /=\
    \ base;\n    }\n    return ans;\n}\nint main() {\n    auto candidate = change_base;\n\
    \    assert(candidate((8), (3)) == (\"22\"));\n    assert(candidate((9), (3))\
    \ == (\"100\"));\n    assert(candidate((234), (2)) == (\"11101010\"));\n    assert(candidate((16),\
    \ (2)) == (\"10000\"));\n    assert(candidate((8), (2)) == (\"1000\"));\n    assert(candidate((7),\
    \ (2)) == (\"111\"));\n    assert(candidate((2), (3)) == (\"2\"));\n    assert(candidate((3),\
    \ (4)) == (\"3\"));\n    assert(candidate((4), (5)) == (\"4\"));\n    assert(candidate((5),\
    \ (6)) == (\"5\"));\n    assert(candidate((6), (7)) == (\"6\"));\n    assert(candidate((7),\
    \ (8)) == (\"7\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base(8, 3)\n// '22'\n// >>> change_base(8,\
    \ 2)\n// '1000'\n// >>> change_base(7, 2)\n// '111'\nstd::string change_base(long\
    \ x, long base) {\n    std::string ans = \"\";\n    long temp = x;\n    while\
    \ (temp != 0) {\n        ans += (temp % base);\n        temp /= base;\n    }\n\
    \    return ans;\n}\nint main() {\n    auto candidate = change_base;\n    assert(candidate((8),\
    \ (3)) == (\"22\"));\n    assert(candidate((9), (3)) == (\"100\"));\n    assert(candidate((234),\
    \ (2)) == (\"11101010\"));\n    assert(candidate((16), (2)) == (\"10000\"));\n\
    \    assert(candidate((8), (2)) == (\"1000\"));\n    assert(candidate((7), (2))\
    \ == (\"111\"));\n    assert(candidate((2), (3)) == (\"2\"));\n    assert(candidate((3),\
    \ (4)) == (\"3\"));\n    assert(candidate((4), (5)) == (\"4\"));\n    assert(candidate((5),\
    \ (6)) == (\"5\"));\n    assert(candidate((6), (7)) == (\"6\"));\n    assert(candidate((7),\
    \ (8)) == (\"7\"));\n}\n"
  stdout: ''
  stderr: "tmp9neuzd4n: /tmp/tmp9neuzd4n.cpp:23: int main(): Assertion `candidate((8),\
    \ (3)) == (\"22\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base(8, 3)\n// '22'\n// >>> change_base(8,\
    \ 2)\n// '1000'\n// >>> change_base(7, 2)\n// '111'\nstd::string change_base(long\
    \ x, long base) {\n    std::string ans = \"\";\n    long temp = 0;\n    while\
    \ (x != 0) {\n        temp = x % base;\n        ans = std::to_string(temp) + ans;\n\
    \        x = x / base;\n    }\n    return ans;\n}\nint main() {\n    auto candidate\
    \ = change_base;\n    assert(candidate((8), (3)) == (\"22\"));\n    assert(candidate((9),\
    \ (3)) == (\"100\"));\n    assert(candidate((234), (2)) == (\"11101010\"));\n\
    \    assert(candidate((16), (2)) == (\"10000\"));\n    assert(candidate((8), (2))\
    \ == (\"1000\"));\n    assert(candidate((7), (2)) == (\"111\"));\n    assert(candidate((2),\
    \ (3)) == (\"2\"));\n    assert(candidate((3), (4)) == (\"3\"));\n    assert(candidate((4),\
    \ (5)) == (\"4\"));\n    assert(candidate((5), (6)) == (\"5\"));\n    assert(candidate((6),\
    \ (7)) == (\"6\"));\n    assert(candidate((7), (8)) == (\"7\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base(8, 3)\n// '22'\n// >>> change_base(8,\
    \ 2)\n// '1000'\n// >>> change_base(7, 2)\n// '111'\nstd::string change_base(long\
    \ x, long base) {\n    std::string ans = \"\";\n    long temp = x;\n    while\
    \ (temp != 0) {\n        ans += (char)(temp % base);\n        temp /= base;\n\
    \    }\n    return ans;\n}\nint main() {\n    auto candidate = change_base;\n\
    \    assert(candidate((8), (3)) == (\"22\"));\n    assert(candidate((9), (3))\
    \ == (\"100\"));\n    assert(candidate((234), (2)) == (\"11101010\"));\n    assert(candidate((16),\
    \ (2)) == (\"10000\"));\n    assert(candidate((8), (2)) == (\"1000\"));\n    assert(candidate((7),\
    \ (2)) == (\"111\"));\n    assert(candidate((2), (3)) == (\"2\"));\n    assert(candidate((3),\
    \ (4)) == (\"3\"));\n    assert(candidate((4), (5)) == (\"4\"));\n    assert(candidate((5),\
    \ (6)) == (\"5\"));\n    assert(candidate((6), (7)) == (\"6\"));\n    assert(candidate((7),\
    \ (8)) == (\"7\"));\n}\n"
  stdout: ''
  stderr: "tmpa_cae79x: /tmp/tmpa_cae79x.cpp:23: int main(): Assertion `candidate((8),\
    \ (3)) == (\"22\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base(8, 3)\n// '22'\n// >>> change_base(8,\
    \ 2)\n// '1000'\n// >>> change_base(7, 2)\n// '111'\nstd::string change_base(long\
    \ x, long base) {\n    std::string ans = \"\";\n    while (x > 0) {\n        int\
    \ rem = x % base;\n        ans = std::to_string(rem) + ans;\n        x = x / base;\n\
    \    }\n    return ans;\n}\nint main() {\n    auto candidate = change_base;\n\
    \    assert(candidate((8), (3)) == (\"22\"));\n    assert(candidate((9), (3))\
    \ == (\"100\"));\n    assert(candidate((234), (2)) == (\"11101010\"));\n    assert(candidate((16),\
    \ (2)) == (\"10000\"));\n    assert(candidate((8), (2)) == (\"1000\"));\n    assert(candidate((7),\
    \ (2)) == (\"111\"));\n    assert(candidate((2), (3)) == (\"2\"));\n    assert(candidate((3),\
    \ (4)) == (\"3\"));\n    assert(candidate((4), (5)) == (\"4\"));\n    assert(candidate((5),\
    \ (6)) == (\"5\"));\n    assert(candidate((6), (7)) == (\"6\"));\n    assert(candidate((7),\
    \ (8)) == (\"7\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base(8, 3)\n// '22'\n// >>> change_base(8,\
    \ 2)\n// '1000'\n// >>> change_base(7, 2)\n// '111'\nstd::string change_base(long\
    \ x, long base) {\n    std::string ans = \"\";\n    long n = x;\n    while (n\
    \ > 0) {\n        long r = n % base;\n        ans = std::to_string(r) + ans;\n\
    \        n = n / base;\n    }\n    return ans;\n}\nint main() {\n    auto candidate\
    \ = change_base;\n    assert(candidate((8), (3)) == (\"22\"));\n    assert(candidate((9),\
    \ (3)) == (\"100\"));\n    assert(candidate((234), (2)) == (\"11101010\"));\n\
    \    assert(candidate((16), (2)) == (\"10000\"));\n    assert(candidate((8), (2))\
    \ == (\"1000\"));\n    assert(candidate((7), (2)) == (\"111\"));\n    assert(candidate((2),\
    \ (3)) == (\"2\"));\n    assert(candidate((3), (4)) == (\"3\"));\n    assert(candidate((4),\
    \ (5)) == (\"4\"));\n    assert(candidate((5), (6)) == (\"5\"));\n    assert(candidate((6),\
    \ (7)) == (\"6\"));\n    assert(candidate((7), (8)) == (\"7\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base(8, 3)\n// '22'\n// >>> change_base(8,\
    \ 2)\n// '1000'\n// >>> change_base(7, 2)\n// '111'\nstd::string change_base(long\
    \ x, long base) {\n    std::string ans = \"\";\n    long n = x;\n    while (n\
    \ > 0) {\n        int r = n % base;\n        ans += char(r + '0');\n        n\
    \ /= base;\n    }\n    return ans;\n}\nint main() {\n    auto candidate = change_base;\n\
    \    assert(candidate((8), (3)) == (\"22\"));\n    assert(candidate((9), (3))\
    \ == (\"100\"));\n    assert(candidate((234), (2)) == (\"11101010\"));\n    assert(candidate((16),\
    \ (2)) == (\"10000\"));\n    assert(candidate((8), (2)) == (\"1000\"));\n    assert(candidate((7),\
    \ (2)) == (\"111\"));\n    assert(candidate((2), (3)) == (\"2\"));\n    assert(candidate((3),\
    \ (4)) == (\"3\"));\n    assert(candidate((4), (5)) == (\"4\"));\n    assert(candidate((5),\
    \ (6)) == (\"5\"));\n    assert(candidate((6), (7)) == (\"6\"));\n    assert(candidate((7),\
    \ (8)) == (\"7\"));\n}\n"
  stdout: ''
  stderr: "tmptyro2gz0: /tmp/tmptyro2gz0.cpp:25: int main(): Assertion `candidate((9),\
    \ (3)) == (\"100\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base(8, 3)\n// '22'\n// >>> change_base(8,\
    \ 2)\n// '1000'\n// >>> change_base(7, 2)\n// '111'\nstd::string change_base(long\
    \ x, long base) {\n    long res = 0;\n    while (x > 0) {\n        res += x %\
    \ base;\n        x /= base;\n    }\n    return std::to_string(res);\n}\nint main()\
    \ {\n    auto candidate = change_base;\n    assert(candidate((8), (3)) == (\"\
    22\"));\n    assert(candidate((9), (3)) == (\"100\"));\n    assert(candidate((234),\
    \ (2)) == (\"11101010\"));\n    assert(candidate((16), (2)) == (\"10000\"));\n\
    \    assert(candidate((8), (2)) == (\"1000\"));\n    assert(candidate((7), (2))\
    \ == (\"111\"));\n    assert(candidate((2), (3)) == (\"2\"));\n    assert(candidate((3),\
    \ (4)) == (\"3\"));\n    assert(candidate((4), (5)) == (\"4\"));\n    assert(candidate((5),\
    \ (6)) == (\"5\"));\n    assert(candidate((6), (7)) == (\"6\"));\n    assert(candidate((7),\
    \ (8)) == (\"7\"));\n}\n"
  stdout: ''
  stderr: "tmp96tvtacx: /tmp/tmp96tvtacx.cpp:22: int main(): Assertion `candidate((8),\
    \ (3)) == (\"22\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base(8, 3)\n// '22'\n// >>> change_base(8,\
    \ 2)\n// '1000'\n// >>> change_base(7, 2)\n// '111'\nstd::string change_base(long\
    \ x, long base) {\n    std::string ans = \"\";\n    long temp = x;\n    while\
    \ (temp > 0) {\n        ans += (temp % base);\n        temp /= base;\n    }\n\
    \    return ans;\n}\nint main() {\n    auto candidate = change_base;\n    assert(candidate((8),\
    \ (3)) == (\"22\"));\n    assert(candidate((9), (3)) == (\"100\"));\n    assert(candidate((234),\
    \ (2)) == (\"11101010\"));\n    assert(candidate((16), (2)) == (\"10000\"));\n\
    \    assert(candidate((8), (2)) == (\"1000\"));\n    assert(candidate((7), (2))\
    \ == (\"111\"));\n    assert(candidate((2), (3)) == (\"2\"));\n    assert(candidate((3),\
    \ (4)) == (\"3\"));\n    assert(candidate((4), (5)) == (\"4\"));\n    assert(candidate((5),\
    \ (6)) == (\"5\"));\n    assert(candidate((6), (7)) == (\"6\"));\n    assert(candidate((7),\
    \ (8)) == (\"7\"));\n}\n"
  stdout: ''
  stderr: "tmpu3o4_nzi: /tmp/tmpu3o4_nzi.cpp:23: int main(): Assertion `candidate((8),\
    \ (3)) == (\"22\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base(8, 3)\n// '22'\n// >>> change_base(8,\
    \ 2)\n// '1000'\n// >>> change_base(7, 2)\n// '111'\nstd::string change_base(long\
    \ x, long base) {\n    std::string ans = \"\";\n    long tmp = x;\n    while (base\
    \ > 0) {\n        tmp = tmp / base;\n        ans = std::to_string(tmp % base)\
    \ + ans;\n        base--;\n    }\n    return ans;\n}\nint main() {\n    auto candidate\
    \ = change_base;\n    assert(candidate((8), (3)) == (\"22\"));\n    assert(candidate((9),\
    \ (3)) == (\"100\"));\n    assert(candidate((234), (2)) == (\"11101010\"));\n\
    \    assert(candidate((16), (2)) == (\"10000\"));\n    assert(candidate((8), (2))\
    \ == (\"1000\"));\n    assert(candidate((7), (2)) == (\"111\"));\n    assert(candidate((2),\
    \ (3)) == (\"2\"));\n    assert(candidate((3), (4)) == (\"3\"));\n    assert(candidate((4),\
    \ (5)) == (\"4\"));\n    assert(candidate((5), (6)) == (\"5\"));\n    assert(candidate((6),\
    \ (7)) == (\"6\"));\n    assert(candidate((7), (8)) == (\"7\"));\n}\n"
  stdout: ''
  stderr: "tmp7v8rkbai: /tmp/tmp7v8rkbai.cpp:24: int main(): Assertion `candidate((8),\
    \ (3)) == (\"22\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base(8, 3)\n// '22'\n// >>> change_base(8,\
    \ 2)\n// '1000'\n// >>> change_base(7, 2)\n// '111'\nstd::string change_base(long\
    \ x, long base) {\n    std::string ans = \"\";\n    long tmp = x;\n    while (base\
    \ > 0) {\n        tmp = tmp / base;\n        ans = std::to_string(tmp) + ans;\n\
    \        base--;\n    }\n    while (base < 0) {\n        tmp = tmp * base;\n \
    \       ans = std::to_string(tmp) + ans;\n        base++;\n    }\n    return ans;\n\
    }\nint main() {\n    auto candidate = change_base;\n    assert(candidate((8),\
    \ (3)) == (\"22\"));\n    assert(candidate((9), (3)) == (\"100\"));\n    assert(candidate((234),\
    \ (2)) == (\"11101010\"));\n    assert(candidate((16), (2)) == (\"10000\"));\n\
    \    assert(candidate((8), (2)) == (\"1000\"));\n    assert(candidate((7), (2))\
    \ == (\"111\"));\n    assert(candidate((2), (3)) == (\"2\"));\n    assert(candidate((3),\
    \ (4)) == (\"3\"));\n    assert(candidate((4), (5)) == (\"4\"));\n    assert(candidate((5),\
    \ (6)) == (\"5\"));\n    assert(candidate((6), (7)) == (\"6\"));\n    assert(candidate((7),\
    \ (8)) == (\"7\"));\n}\n"
  stdout: ''
  stderr: "tmp3t_zecti: /tmp/tmp3t_zecti.cpp:29: int main(): Assertion `candidate((8),\
    \ (3)) == (\"22\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base(8, 3)\n// '22'\n// >>> change_base(8,\
    \ 2)\n// '1000'\n// >>> change_base(7, 2)\n// '111'\nstd::string change_base(long\
    \ x, long base) {\n    std::string ans = \"\";\n    long n = x;\n    while (n\
    \ > 0) {\n        long r = n % base;\n        ans += char(r + '0');\n        n\
    \ /= base;\n    }\n    return ans;\n}\nint main() {\n    auto candidate = change_base;\n\
    \    assert(candidate((8), (3)) == (\"22\"));\n    assert(candidate((9), (3))\
    \ == (\"100\"));\n    assert(candidate((234), (2)) == (\"11101010\"));\n    assert(candidate((16),\
    \ (2)) == (\"10000\"));\n    assert(candidate((8), (2)) == (\"1000\"));\n    assert(candidate((7),\
    \ (2)) == (\"111\"));\n    assert(candidate((2), (3)) == (\"2\"));\n    assert(candidate((3),\
    \ (4)) == (\"3\"));\n    assert(candidate((4), (5)) == (\"4\"));\n    assert(candidate((5),\
    \ (6)) == (\"5\"));\n    assert(candidate((6), (7)) == (\"6\"));\n    assert(candidate((7),\
    \ (8)) == (\"7\"));\n}\n"
  stdout: ''
  stderr: "tmphaui_d_e: /tmp/tmphaui_d_e.cpp:25: int main(): Assertion `candidate((9),\
    \ (3)) == (\"100\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base(8, 3)\n// '22'\n// >>> change_base(8,\
    \ 2)\n// '1000'\n// >>> change_base(7, 2)\n// '111'\nstd::string change_base(long\
    \ x, long base) {\n    std::string ans = \"\";\n    long tmp = x;\n    while (base\
    \ > 0) {\n        tmp = tmp / base;\n        ans = std::to_string(tmp % base)\
    \ + ans;\n        base--;\n    }\n    return ans;\n}\nint main() {\n    auto candidate\
    \ = change_base;\n    assert(candidate((8), (3)) == (\"22\"));\n    assert(candidate((9),\
    \ (3)) == (\"100\"));\n    assert(candidate((234), (2)) == (\"11101010\"));\n\
    \    assert(candidate((16), (2)) == (\"10000\"));\n    assert(candidate((8), (2))\
    \ == (\"1000\"));\n    assert(candidate((7), (2)) == (\"111\"));\n    assert(candidate((2),\
    \ (3)) == (\"2\"));\n    assert(candidate((3), (4)) == (\"3\"));\n    assert(candidate((4),\
    \ (5)) == (\"4\"));\n    assert(candidate((5), (6)) == (\"5\"));\n    assert(candidate((6),\
    \ (7)) == (\"6\"));\n    assert(candidate((7), (8)) == (\"7\"));\n}\n"
  stdout: ''
  stderr: "tmpni6f62wf: /tmp/tmpni6f62wf.cpp:24: int main(): Assertion `candidate((8),\
    \ (3)) == (\"22\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base(8, 3)\n// '22'\n// >>> change_base(8,\
    \ 2)\n// '1000'\n// >>> change_base(7, 2)\n// '111'\nstd::string change_base(long\
    \ x, long base) {\n    std::string ans = \"\";\n    long temp = x;\n    while\
    \ (temp > 0) {\n        ans += (char)(temp % base);\n        temp /= base;\n \
    \   }\n    return ans;\n}\nint main() {\n    auto candidate = change_base;\n \
    \   assert(candidate((8), (3)) == (\"22\"));\n    assert(candidate((9), (3)) ==\
    \ (\"100\"));\n    assert(candidate((234), (2)) == (\"11101010\"));\n    assert(candidate((16),\
    \ (2)) == (\"10000\"));\n    assert(candidate((8), (2)) == (\"1000\"));\n    assert(candidate((7),\
    \ (2)) == (\"111\"));\n    assert(candidate((2), (3)) == (\"2\"));\n    assert(candidate((3),\
    \ (4)) == (\"3\"));\n    assert(candidate((4), (5)) == (\"4\"));\n    assert(candidate((5),\
    \ (6)) == (\"5\"));\n    assert(candidate((6), (7)) == (\"6\"));\n    assert(candidate((7),\
    \ (8)) == (\"7\"));\n}\n"
  stdout: ''
  stderr: "tmpnlizx21h: /tmp/tmpnlizx21h.cpp:23: int main(): Assertion `candidate((8),\
    \ (3)) == (\"22\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base(8, 3)\n// '22'\n// >>> change_base(8,\
    \ 2)\n// '1000'\n// >>> change_base(7, 2)\n// '111'\nstd::string change_base(long\
    \ x, long base) {\n    std::string ans = \"\";\n    while (x > 0) {\n        ans\
    \ += (char)(x % base);\n        x /= base;\n    }\n    return ans;\n}\nint main()\
    \ {\n    auto candidate = change_base;\n    assert(candidate((8), (3)) == (\"\
    22\"));\n    assert(candidate((9), (3)) == (\"100\"));\n    assert(candidate((234),\
    \ (2)) == (\"11101010\"));\n    assert(candidate((16), (2)) == (\"10000\"));\n\
    \    assert(candidate((8), (2)) == (\"1000\"));\n    assert(candidate((7), (2))\
    \ == (\"111\"));\n    assert(candidate((2), (3)) == (\"2\"));\n    assert(candidate((3),\
    \ (4)) == (\"3\"));\n    assert(candidate((4), (5)) == (\"4\"));\n    assert(candidate((5),\
    \ (6)) == (\"5\"));\n    assert(candidate((6), (7)) == (\"6\"));\n    assert(candidate((7),\
    \ (8)) == (\"7\"));\n}\n"
  stdout: ''
  stderr: "tmpdsm0td79: /tmp/tmpdsm0td79.cpp:22: int main(): Assertion `candidate((8),\
    \ (3)) == (\"22\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base(8, 3)\n// '22'\n// >>> change_base(8,\
    \ 2)\n// '1000'\n// >>> change_base(7, 2)\n// '111'\nstd::string change_base(long\
    \ x, long base) {\n    std::string ans = \"\";\n    long tmp = x;\n    while (base\
    \ > 0) {\n        tmp = tmp / base;\n        ans = std::to_string(tmp) + ans;\n\
    \        base--;\n    }\n    while (base < 0) {\n        tmp = tmp * base;\n \
    \       ans = std::to_string(tmp) + ans;\n        base++;\n    }\n    return ans;\n\
    }\nint main() {\n    auto candidate = change_base;\n    assert(candidate((8),\
    \ (3)) == (\"22\"));\n    assert(candidate((9), (3)) == (\"100\"));\n    assert(candidate((234),\
    \ (2)) == (\"11101010\"));\n    assert(candidate((16), (2)) == (\"10000\"));\n\
    \    assert(candidate((8), (2)) == (\"1000\"));\n    assert(candidate((7), (2))\
    \ == (\"111\"));\n    assert(candidate((2), (3)) == (\"2\"));\n    assert(candidate((3),\
    \ (4)) == (\"3\"));\n    assert(candidate((4), (5)) == (\"4\"));\n    assert(candidate((5),\
    \ (6)) == (\"5\"));\n    assert(candidate((6), (7)) == (\"6\"));\n    assert(candidate((7),\
    \ (8)) == (\"7\"));\n}\n"
  stdout: ''
  stderr: "tmp6a7ygwni: /tmp/tmp6a7ygwni.cpp:29: int main(): Assertion `candidate((8),\
    \ (3)) == (\"22\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base(8, 3)\n// '22'\n// >>> change_base(8,\
    \ 2)\n// '1000'\n// >>> change_base(7, 2)\n// '111'\nstd::string change_base(long\
    \ x, long base) {\n    std::string ans = \"\";\n    long temp;\n    while (x >\
    \ 0) {\n        temp = x % base;\n        ans = std::to_string(temp) + ans;\n\
    \        x = x / base;\n    }\n    return ans;\n}\nint main() {\n    auto candidate\
    \ = change_base;\n    assert(candidate((8), (3)) == (\"22\"));\n    assert(candidate((9),\
    \ (3)) == (\"100\"));\n    assert(candidate((234), (2)) == (\"11101010\"));\n\
    \    assert(candidate((16), (2)) == (\"10000\"));\n    assert(candidate((8), (2))\
    \ == (\"1000\"));\n    assert(candidate((7), (2)) == (\"111\"));\n    assert(candidate((2),\
    \ (3)) == (\"2\"));\n    assert(candidate((3), (4)) == (\"3\"));\n    assert(candidate((4),\
    \ (5)) == (\"4\"));\n    assert(candidate((5), (6)) == (\"5\"));\n    assert(candidate((6),\
    \ (7)) == (\"6\"));\n    assert(candidate((7), (8)) == (\"7\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base(8, 3)\n// '22'\n// >>> change_base(8,\
    \ 2)\n// '1000'\n// >>> change_base(7, 2)\n// '111'\nstd::string change_base(long\
    \ x, long base) {\n    std::string ans = \"\";\n    long n = x;\n    while (n\
    \ > 0) {\n        long r = n % base;\n        ans = std::to_string(r) + ans;\n\
    \        n = n / base;\n    }\n    return ans;\n}\nint main() {\n    auto candidate\
    \ = change_base;\n    assert(candidate((8), (3)) == (\"22\"));\n    assert(candidate((9),\
    \ (3)) == (\"100\"));\n    assert(candidate((234), (2)) == (\"11101010\"));\n\
    \    assert(candidate((16), (2)) == (\"10000\"));\n    assert(candidate((8), (2))\
    \ == (\"1000\"));\n    assert(candidate((7), (2)) == (\"111\"));\n    assert(candidate((2),\
    \ (3)) == (\"2\"));\n    assert(candidate((3), (4)) == (\"3\"));\n    assert(candidate((4),\
    \ (5)) == (\"4\"));\n    assert(candidate((5), (6)) == (\"5\"));\n    assert(candidate((6),\
    \ (7)) == (\"6\"));\n    assert(candidate((7), (8)) == (\"7\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base(8, 3)\n// '22'\n// >>> change_base(8,\
    \ 2)\n// '1000'\n// >>> change_base(7, 2)\n// '111'\nstd::string change_base(long\
    \ x, long base) {\n    std::string ans = \"\";\n    long temp = x;\n    while\
    \ (temp > 0) {\n        int digit = temp % base;\n        ans = std::to_string(digit)\
    \ + ans;\n        temp = temp / base;\n    }\n    return ans;\n}\nint main() {\n\
    \    auto candidate = change_base;\n    assert(candidate((8), (3)) == (\"22\"\
    ));\n    assert(candidate((9), (3)) == (\"100\"));\n    assert(candidate((234),\
    \ (2)) == (\"11101010\"));\n    assert(candidate((16), (2)) == (\"10000\"));\n\
    \    assert(candidate((8), (2)) == (\"1000\"));\n    assert(candidate((7), (2))\
    \ == (\"111\"));\n    assert(candidate((2), (3)) == (\"2\"));\n    assert(candidate((3),\
    \ (4)) == (\"3\"));\n    assert(candidate((4), (5)) == (\"4\"));\n    assert(candidate((5),\
    \ (6)) == (\"5\"));\n    assert(candidate((6), (7)) == (\"6\"));\n    assert(candidate((7),\
    \ (8)) == (\"7\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base(8, 3)\n// '22'\n// >>> change_base(8,\
    \ 2)\n// '1000'\n// >>> change_base(7, 2)\n// '111'\nstd::string change_base(long\
    \ x, long base) {\n    std::string ans = \"\";\n    long n = x;\n    while (n\
    \ > 0) {\n        long r = n % base;\n        ans += char(r + '0');\n        n\
    \ /= base;\n    }\n    return ans;\n}\nint main() {\n    auto candidate = change_base;\n\
    \    assert(candidate((8), (3)) == (\"22\"));\n    assert(candidate((9), (3))\
    \ == (\"100\"));\n    assert(candidate((234), (2)) == (\"11101010\"));\n    assert(candidate((16),\
    \ (2)) == (\"10000\"));\n    assert(candidate((8), (2)) == (\"1000\"));\n    assert(candidate((7),\
    \ (2)) == (\"111\"));\n    assert(candidate((2), (3)) == (\"2\"));\n    assert(candidate((3),\
    \ (4)) == (\"3\"));\n    assert(candidate((4), (5)) == (\"4\"));\n    assert(candidate((5),\
    \ (6)) == (\"5\"));\n    assert(candidate((6), (7)) == (\"6\"));\n    assert(candidate((7),\
    \ (8)) == (\"7\"));\n}\n"
  stdout: ''
  stderr: "tmpuvtg14fk: /tmp/tmpuvtg14fk.cpp:25: int main(): Assertion `candidate((9),\
    \ (3)) == (\"100\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base(8, 3)\n// '22'\n// >>> change_base(8,\
    \ 2)\n// '1000'\n// >>> change_base(7, 2)\n// '111'\nstd::string change_base(long\
    \ x, long base) {\n    std::string ans = \"\";\n    while (x > 0) {\n        long\
    \ r = x % base;\n        ans += (char) (r + '0');\n        x /= base;\n    }\n\
    \    return ans;\n}\nint main() {\n    auto candidate = change_base;\n    assert(candidate((8),\
    \ (3)) == (\"22\"));\n    assert(candidate((9), (3)) == (\"100\"));\n    assert(candidate((234),\
    \ (2)) == (\"11101010\"));\n    assert(candidate((16), (2)) == (\"10000\"));\n\
    \    assert(candidate((8), (2)) == (\"1000\"));\n    assert(candidate((7), (2))\
    \ == (\"111\"));\n    assert(candidate((2), (3)) == (\"2\"));\n    assert(candidate((3),\
    \ (4)) == (\"3\"));\n    assert(candidate((4), (5)) == (\"4\"));\n    assert(candidate((5),\
    \ (6)) == (\"5\"));\n    assert(candidate((6), (7)) == (\"6\"));\n    assert(candidate((7),\
    \ (8)) == (\"7\"));\n}\n"
  stdout: ''
  stderr: "tmpy5j3dmkx: /tmp/tmpy5j3dmkx.cpp:24: int main(): Assertion `candidate((9),\
    \ (3)) == (\"100\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base(8, 3)\n// '22'\n// >>> change_base(8,\
    \ 2)\n// '1000'\n// >>> change_base(7, 2)\n// '111'\nstd::string change_base(long\
    \ x, long base) {\n    std::string ans = \"\";\n    long temp = x;\n    while\
    \ (temp > 0) {\n        int digit = temp % base;\n        ans += digit;\n    \
    \    temp /= base;\n    }\n    return ans;\n}\nint main() {\n    auto candidate\
    \ = change_base;\n    assert(candidate((8), (3)) == (\"22\"));\n    assert(candidate((9),\
    \ (3)) == (\"100\"));\n    assert(candidate((234), (2)) == (\"11101010\"));\n\
    \    assert(candidate((16), (2)) == (\"10000\"));\n    assert(candidate((8), (2))\
    \ == (\"1000\"));\n    assert(candidate((7), (2)) == (\"111\"));\n    assert(candidate((2),\
    \ (3)) == (\"2\"));\n    assert(candidate((3), (4)) == (\"3\"));\n    assert(candidate((4),\
    \ (5)) == (\"4\"));\n    assert(candidate((5), (6)) == (\"5\"));\n    assert(candidate((6),\
    \ (7)) == (\"6\"));\n    assert(candidate((7), (8)) == (\"7\"));\n}\n"
  stdout: ''
  stderr: "tmpsxclfg56: /tmp/tmpsxclfg56.cpp:24: int main(): Assertion `candidate((8),\
    \ (3)) == (\"22\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base(8, 3)\n// '22'\n// >>> change_base(8,\
    \ 2)\n// '1000'\n// >>> change_base(7, 2)\n// '111'\nstd::string change_base(long\
    \ x, long base) {\n    std::string ans = \"\";\n    long temp = 0;\n    while\
    \ (x > 0) {\n        temp = x % base;\n        ans = std::to_string(temp) + ans;\n\
    \        x = x / base;\n    }\n    return ans;\n}\nint main() {\n    auto candidate\
    \ = change_base;\n    assert(candidate((8), (3)) == (\"22\"));\n    assert(candidate((9),\
    \ (3)) == (\"100\"));\n    assert(candidate((234), (2)) == (\"11101010\"));\n\
    \    assert(candidate((16), (2)) == (\"10000\"));\n    assert(candidate((8), (2))\
    \ == (\"1000\"));\n    assert(candidate((7), (2)) == (\"111\"));\n    assert(candidate((2),\
    \ (3)) == (\"2\"));\n    assert(candidate((3), (4)) == (\"3\"));\n    assert(candidate((4),\
    \ (5)) == (\"4\"));\n    assert(candidate((5), (6)) == (\"5\"));\n    assert(candidate((6),\
    \ (7)) == (\"6\"));\n    assert(candidate((7), (8)) == (\"7\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base(8, 3)\n// '22'\n// >>> change_base(8,\
    \ 2)\n// '1000'\n// >>> change_base(7, 2)\n// '111'\nstd::string change_base(long\
    \ x, long base) {\n    std::string ans = \"\";\n    long temp = x;\n    while\
    \ (temp != 0) {\n        int rem = temp % base;\n        ans = std::to_string(rem)\
    \ + ans;\n        temp = temp / base;\n    }\n    return ans;\n}\nint main() {\n\
    \    auto candidate = change_base;\n    assert(candidate((8), (3)) == (\"22\"\
    ));\n    assert(candidate((9), (3)) == (\"100\"));\n    assert(candidate((234),\
    \ (2)) == (\"11101010\"));\n    assert(candidate((16), (2)) == (\"10000\"));\n\
    \    assert(candidate((8), (2)) == (\"1000\"));\n    assert(candidate((7), (2))\
    \ == (\"111\"));\n    assert(candidate((2), (3)) == (\"2\"));\n    assert(candidate((3),\
    \ (4)) == (\"3\"));\n    assert(candidate((4), (5)) == (\"4\"));\n    assert(candidate((5),\
    \ (6)) == (\"5\"));\n    assert(candidate((6), (7)) == (\"6\"));\n    assert(candidate((7),\
    \ (8)) == (\"7\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base(8, 3)\n// '22'\n// >>> change_base(8,\
    \ 2)\n// '1000'\n// >>> change_base(7, 2)\n// '111'\nstd::string change_base(long\
    \ x, long base) {\n    std::string ans = \"\";\n    long n = x;\n    while (n\
    \ > 0) {\n        int r = n % base;\n        ans += (char) (r + '0');\n      \
    \  n /= base;\n    }\n    return ans;\n}\nint main() {\n    auto candidate = change_base;\n\
    \    assert(candidate((8), (3)) == (\"22\"));\n    assert(candidate((9), (3))\
    \ == (\"100\"));\n    assert(candidate((234), (2)) == (\"11101010\"));\n    assert(candidate((16),\
    \ (2)) == (\"10000\"));\n    assert(candidate((8), (2)) == (\"1000\"));\n    assert(candidate((7),\
    \ (2)) == (\"111\"));\n    assert(candidate((2), (3)) == (\"2\"));\n    assert(candidate((3),\
    \ (4)) == (\"3\"));\n    assert(candidate((4), (5)) == (\"4\"));\n    assert(candidate((5),\
    \ (6)) == (\"5\"));\n    assert(candidate((6), (7)) == (\"6\"));\n    assert(candidate((7),\
    \ (8)) == (\"7\"));\n}\n"
  stdout: ''
  stderr: "tmpwyscr0_6: /tmp/tmpwyscr0_6.cpp:25: int main(): Assertion `candidate((9),\
    \ (3)) == (\"100\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base(8, 3)\n// '22'\n// >>> change_base(8,\
    \ 2)\n// '1000'\n// >>> change_base(7, 2)\n// '111'\nstd::string change_base(long\
    \ x, long base) {\n    std::string ans = \"\";\n    long temp = x;\n    while\
    \ (temp != 0) {\n        int digit = temp % base;\n        ans += digit;\n   \
    \     temp /= base;\n    }\n    return ans;\n}\nint main() {\n    auto candidate\
    \ = change_base;\n    assert(candidate((8), (3)) == (\"22\"));\n    assert(candidate((9),\
    \ (3)) == (\"100\"));\n    assert(candidate((234), (2)) == (\"11101010\"));\n\
    \    assert(candidate((16), (2)) == (\"10000\"));\n    assert(candidate((8), (2))\
    \ == (\"1000\"));\n    assert(candidate((7), (2)) == (\"111\"));\n    assert(candidate((2),\
    \ (3)) == (\"2\"));\n    assert(candidate((3), (4)) == (\"3\"));\n    assert(candidate((4),\
    \ (5)) == (\"4\"));\n    assert(candidate((5), (6)) == (\"5\"));\n    assert(candidate((6),\
    \ (7)) == (\"6\"));\n    assert(candidate((7), (8)) == (\"7\"));\n}\n"
  stdout: ''
  stderr: "tmp6t42i60b: /tmp/tmp6t42i60b.cpp:24: int main(): Assertion `candidate((8),\
    \ (3)) == (\"22\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base(8, 3)\n// '22'\n// >>> change_base(8,\
    \ 2)\n// '1000'\n// >>> change_base(7, 2)\n// '111'\nstd::string change_base(long\
    \ x, long base) {\n    std::string ans = \"\";\n    while (x > 0) {\n        ans\
    \ = std::to_string(x % base) + ans;\n        x /= base;\n    }\n    return ans;\n\
    }\nint main() {\n    auto candidate = change_base;\n    assert(candidate((8),\
    \ (3)) == (\"22\"));\n    assert(candidate((9), (3)) == (\"100\"));\n    assert(candidate((234),\
    \ (2)) == (\"11101010\"));\n    assert(candidate((16), (2)) == (\"10000\"));\n\
    \    assert(candidate((8), (2)) == (\"1000\"));\n    assert(candidate((7), (2))\
    \ == (\"111\"));\n    assert(candidate((2), (3)) == (\"2\"));\n    assert(candidate((3),\
    \ (4)) == (\"3\"));\n    assert(candidate((4), (5)) == (\"4\"));\n    assert(candidate((5),\
    \ (6)) == (\"5\"));\n    assert(candidate((6), (7)) == (\"6\"));\n    assert(candidate((7),\
    \ (8)) == (\"7\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base(8, 3)\n// '22'\n// >>> change_base(8,\
    \ 2)\n// '1000'\n// >>> change_base(7, 2)\n// '111'\nstd::string change_base(long\
    \ x, long base) {\n    std::string ans = \"\";\n    long temp = x;\n    while\
    \ (temp > 0) {\n        int digit = temp % base;\n        ans += digit;\n    \
    \    temp /= base;\n    }\n    return ans;\n}\nint main() {\n    auto candidate\
    \ = change_base;\n    assert(candidate((8), (3)) == (\"22\"));\n    assert(candidate((9),\
    \ (3)) == (\"100\"));\n    assert(candidate((234), (2)) == (\"11101010\"));\n\
    \    assert(candidate((16), (2)) == (\"10000\"));\n    assert(candidate((8), (2))\
    \ == (\"1000\"));\n    assert(candidate((7), (2)) == (\"111\"));\n    assert(candidate((2),\
    \ (3)) == (\"2\"));\n    assert(candidate((3), (4)) == (\"3\"));\n    assert(candidate((4),\
    \ (5)) == (\"4\"));\n    assert(candidate((5), (6)) == (\"5\"));\n    assert(candidate((6),\
    \ (7)) == (\"6\"));\n    assert(candidate((7), (8)) == (\"7\"));\n}\n"
  stdout: ''
  stderr: "tmp_cag0v7b: /tmp/tmp_cag0v7b.cpp:24: int main(): Assertion `candidate((8),\
    \ (3)) == (\"22\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base(8, 3)\n// '22'\n// >>> change_base(8,\
    \ 2)\n// '1000'\n// >>> change_base(7, 2)\n// '111'\nstd::string change_base(long\
    \ x, long base) {\n    std::string ans = \"\";\n    long temp = x;\n    while\
    \ (temp != 0) {\n        ans = std::to_string(temp % base) + ans;\n        temp\
    \ = temp / base;\n    }\n    return ans;\n}\nint main() {\n    auto candidate\
    \ = change_base;\n    assert(candidate((8), (3)) == (\"22\"));\n    assert(candidate((9),\
    \ (3)) == (\"100\"));\n    assert(candidate((234), (2)) == (\"11101010\"));\n\
    \    assert(candidate((16), (2)) == (\"10000\"));\n    assert(candidate((8), (2))\
    \ == (\"1000\"));\n    assert(candidate((7), (2)) == (\"111\"));\n    assert(candidate((2),\
    \ (3)) == (\"2\"));\n    assert(candidate((3), (4)) == (\"3\"));\n    assert(candidate((4),\
    \ (5)) == (\"4\"));\n    assert(candidate((5), (6)) == (\"5\"));\n    assert(candidate((6),\
    \ (7)) == (\"6\"));\n    assert(candidate((7), (8)) == (\"7\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base(8, 3)\n// '22'\n// >>> change_base(8,\
    \ 2)\n// '1000'\n// >>> change_base(7, 2)\n// '111'\nstd::string change_base(long\
    \ x, long base) {\n    std::string ans = \"\";\n    long n = x;\n    while (n\
    \ > 0) {\n        long r = n % base;\n        ans += char(r + 48);\n        n\
    \ = n / base;\n    }\n    return ans;\n}\nint main() {\n    auto candidate = change_base;\n\
    \    assert(candidate((8), (3)) == (\"22\"));\n    assert(candidate((9), (3))\
    \ == (\"100\"));\n    assert(candidate((234), (2)) == (\"11101010\"));\n    assert(candidate((16),\
    \ (2)) == (\"10000\"));\n    assert(candidate((8), (2)) == (\"1000\"));\n    assert(candidate((7),\
    \ (2)) == (\"111\"));\n    assert(candidate((2), (3)) == (\"2\"));\n    assert(candidate((3),\
    \ (4)) == (\"3\"));\n    assert(candidate((4), (5)) == (\"4\"));\n    assert(candidate((5),\
    \ (6)) == (\"5\"));\n    assert(candidate((6), (7)) == (\"6\"));\n    assert(candidate((7),\
    \ (8)) == (\"7\"));\n}\n"
  stdout: ''
  stderr: "tmp4dgkz8hc: /tmp/tmp4dgkz8hc.cpp:25: int main(): Assertion `candidate((9),\
    \ (3)) == (\"100\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base(8, 3)\n// '22'\n// >>> change_base(8,\
    \ 2)\n// '1000'\n// >>> change_base(7, 2)\n// '111'\nstd::string change_base(long\
    \ x, long base) {\n    std::string ans = \"\";\n    while (x > 0) {\n        ans\
    \ += (char)(x % base);\n        x /= base;\n    }\n    return ans;\n}\nint main()\
    \ {\n    auto candidate = change_base;\n    assert(candidate((8), (3)) == (\"\
    22\"));\n    assert(candidate((9), (3)) == (\"100\"));\n    assert(candidate((234),\
    \ (2)) == (\"11101010\"));\n    assert(candidate((16), (2)) == (\"10000\"));\n\
    \    assert(candidate((8), (2)) == (\"1000\"));\n    assert(candidate((7), (2))\
    \ == (\"111\"));\n    assert(candidate((2), (3)) == (\"2\"));\n    assert(candidate((3),\
    \ (4)) == (\"3\"));\n    assert(candidate((4), (5)) == (\"4\"));\n    assert(candidate((5),\
    \ (6)) == (\"5\"));\n    assert(candidate((6), (7)) == (\"6\"));\n    assert(candidate((7),\
    \ (8)) == (\"7\"));\n}\n"
  stdout: ''
  stderr: "tmplhb4lqn7: /tmp/tmplhb4lqn7.cpp:22: int main(): Assertion `candidate((8),\
    \ (3)) == (\"22\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base(8, 3)\n// '22'\n// >>> change_base(8,\
    \ 2)\n// '1000'\n// >>> change_base(7, 2)\n// '111'\nstd::string change_base(long\
    \ x, long base) {\n    std::string ans = \"\";\n    long temp = x;\n    while\
    \ (temp > 0) {\n        int digit = temp % base;\n        ans += digit;\n    \
    \    temp /= base;\n    }\n    return ans;\n}\nint main() {\n    auto candidate\
    \ = change_base;\n    assert(candidate((8), (3)) == (\"22\"));\n    assert(candidate((9),\
    \ (3)) == (\"100\"));\n    assert(candidate((234), (2)) == (\"11101010\"));\n\
    \    assert(candidate((16), (2)) == (\"10000\"));\n    assert(candidate((8), (2))\
    \ == (\"1000\"));\n    assert(candidate((7), (2)) == (\"111\"));\n    assert(candidate((2),\
    \ (3)) == (\"2\"));\n    assert(candidate((3), (4)) == (\"3\"));\n    assert(candidate((4),\
    \ (5)) == (\"4\"));\n    assert(candidate((5), (6)) == (\"5\"));\n    assert(candidate((6),\
    \ (7)) == (\"6\"));\n    assert(candidate((7), (8)) == (\"7\"));\n}\n"
  stdout: ''
  stderr: "tmpgl8g8rjv: /tmp/tmpgl8g8rjv.cpp:24: int main(): Assertion `candidate((8),\
    \ (3)) == (\"22\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base(8, 3)\n// '22'\n// >>> change_base(8,\
    \ 2)\n// '1000'\n// >>> change_base(7, 2)\n// '111'\nstd::string change_base(long\
    \ x, long base) {\n    std::string ans = \"\";\n    long tmp = x;\n    while (base\
    \ > 0) {\n        tmp = tmp / base;\n        ans = std::to_string(tmp % base)\
    \ + ans;\n        base--;\n    }\n    return ans;\n}\nint main() {\n    auto candidate\
    \ = change_base;\n    assert(candidate((8), (3)) == (\"22\"));\n    assert(candidate((9),\
    \ (3)) == (\"100\"));\n    assert(candidate((234), (2)) == (\"11101010\"));\n\
    \    assert(candidate((16), (2)) == (\"10000\"));\n    assert(candidate((8), (2))\
    \ == (\"1000\"));\n    assert(candidate((7), (2)) == (\"111\"));\n    assert(candidate((2),\
    \ (3)) == (\"2\"));\n    assert(candidate((3), (4)) == (\"3\"));\n    assert(candidate((4),\
    \ (5)) == (\"4\"));\n    assert(candidate((5), (6)) == (\"5\"));\n    assert(candidate((6),\
    \ (7)) == (\"6\"));\n    assert(candidate((7), (8)) == (\"7\"));\n}\n"
  stdout: ''
  stderr: "tmpugpbovo8: /tmp/tmpugpbovo8.cpp:24: int main(): Assertion `candidate((8),\
    \ (3)) == (\"22\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base(8, 3)\n// '22'\n// >>> change_base(8,\
    \ 2)\n// '1000'\n// >>> change_base(7, 2)\n// '111'\nstd::string change_base(long\
    \ x, long base) {\n    std::string ans = \"\";\n    long temp = x;\n    while\
    \ (temp > 0) {\n        int digit = temp % base;\n        ans += digit;\n    \
    \    temp /= base;\n    }\n    return ans;\n}\nint main() {\n    auto candidate\
    \ = change_base;\n    assert(candidate((8), (3)) == (\"22\"));\n    assert(candidate((9),\
    \ (3)) == (\"100\"));\n    assert(candidate((234), (2)) == (\"11101010\"));\n\
    \    assert(candidate((16), (2)) == (\"10000\"));\n    assert(candidate((8), (2))\
    \ == (\"1000\"));\n    assert(candidate((7), (2)) == (\"111\"));\n    assert(candidate((2),\
    \ (3)) == (\"2\"));\n    assert(candidate((3), (4)) == (\"3\"));\n    assert(candidate((4),\
    \ (5)) == (\"4\"));\n    assert(candidate((5), (6)) == (\"5\"));\n    assert(candidate((6),\
    \ (7)) == (\"6\"));\n    assert(candidate((7), (8)) == (\"7\"));\n}\n"
  stdout: ''
  stderr: "tmprzvlzjm0: /tmp/tmprzvlzjm0.cpp:24: int main(): Assertion `candidate((8),\
    \ (3)) == (\"22\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base(8, 3)\n// '22'\n// >>> change_base(8,\
    \ 2)\n// '1000'\n// >>> change_base(7, 2)\n// '111'\nstd::string change_base(long\
    \ x, long base) {\n    std::string ans = \"\";\n    long tmp = x;\n    while (base\
    \ > 0) {\n        tmp = tmp / base;\n        ans = std::to_string(tmp) + ans;\n\
    \        base--;\n    }\n    while (base < 0) {\n        tmp = tmp * base;\n \
    \       ans = std::to_string(tmp) + ans;\n        base++;\n    }\n    return ans;\n\
    }\nint main() {\n    auto candidate = change_base;\n    assert(candidate((8),\
    \ (3)) == (\"22\"));\n    assert(candidate((9), (3)) == (\"100\"));\n    assert(candidate((234),\
    \ (2)) == (\"11101010\"));\n    assert(candidate((16), (2)) == (\"10000\"));\n\
    \    assert(candidate((8), (2)) == (\"1000\"));\n    assert(candidate((7), (2))\
    \ == (\"111\"));\n    assert(candidate((2), (3)) == (\"2\"));\n    assert(candidate((3),\
    \ (4)) == (\"3\"));\n    assert(candidate((4), (5)) == (\"4\"));\n    assert(candidate((5),\
    \ (6)) == (\"5\"));\n    assert(candidate((6), (7)) == (\"6\"));\n    assert(candidate((7),\
    \ (8)) == (\"7\"));\n}\n"
  stdout: ''
  stderr: "tmp2weumhh6: /tmp/tmp2weumhh6.cpp:29: int main(): Assertion `candidate((8),\
    \ (3)) == (\"22\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base(8, 3)\n// '22'\n// >>> change_base(8,\
    \ 2)\n// '1000'\n// >>> change_base(7, 2)\n// '111'\nstd::string change_base(long\
    \ x, long base) {\n    std::string ans = \"\";\n    long tmp = x;\n    while (base\
    \ > 0) {\n        tmp = tmp / base;\n        ans = std::to_string(tmp % base)\
    \ + ans;\n        base--;\n    }\n    return ans;\n}\nint main() {\n    auto candidate\
    \ = change_base;\n    assert(candidate((8), (3)) == (\"22\"));\n    assert(candidate((9),\
    \ (3)) == (\"100\"));\n    assert(candidate((234), (2)) == (\"11101010\"));\n\
    \    assert(candidate((16), (2)) == (\"10000\"));\n    assert(candidate((8), (2))\
    \ == (\"1000\"));\n    assert(candidate((7), (2)) == (\"111\"));\n    assert(candidate((2),\
    \ (3)) == (\"2\"));\n    assert(candidate((3), (4)) == (\"3\"));\n    assert(candidate((4),\
    \ (5)) == (\"4\"));\n    assert(candidate((5), (6)) == (\"5\"));\n    assert(candidate((6),\
    \ (7)) == (\"6\"));\n    assert(candidate((7), (8)) == (\"7\"));\n}\n"
  stdout: ''
  stderr: "tmps03qwqip: /tmp/tmps03qwqip.cpp:24: int main(): Assertion `candidate((8),\
    \ (3)) == (\"22\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base(8, 3)\n// '22'\n// >>> change_base(8,\
    \ 2)\n// '1000'\n// >>> change_base(7, 2)\n// '111'\nstd::string change_base(long\
    \ x, long base) {\n    std::string ans = \"\";\n    while (x > 0) {\n        ans\
    \ = std::to_string(x % base) + ans;\n        x = x / base;\n    }\n    return\
    \ ans;\n}\nint main() {\n    auto candidate = change_base;\n    assert(candidate((8),\
    \ (3)) == (\"22\"));\n    assert(candidate((9), (3)) == (\"100\"));\n    assert(candidate((234),\
    \ (2)) == (\"11101010\"));\n    assert(candidate((16), (2)) == (\"10000\"));\n\
    \    assert(candidate((8), (2)) == (\"1000\"));\n    assert(candidate((7), (2))\
    \ == (\"111\"));\n    assert(candidate((2), (3)) == (\"2\"));\n    assert(candidate((3),\
    \ (4)) == (\"3\"));\n    assert(candidate((4), (5)) == (\"4\"));\n    assert(candidate((5),\
    \ (6)) == (\"5\"));\n    assert(candidate((6), (7)) == (\"6\"));\n    assert(candidate((7),\
    \ (8)) == (\"7\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base(8, 3)\n// '22'\n// >>> change_base(8,\
    \ 2)\n// '1000'\n// >>> change_base(7, 2)\n// '111'\nstd::string change_base(long\
    \ x, long base) {\n    std::string ans = \"\";\n    long rem = x;\n    while (x\
    \ != 0) {\n        rem = rem / base;\n        ans = std::to_string(rem) + ans;\n\
    \        x = x % base;\n    }\n    return ans;\n}\nint main() {\n    auto candidate\
    \ = change_base;\n    assert(candidate((8), (3)) == (\"22\"));\n    assert(candidate((9),\
    \ (3)) == (\"100\"));\n    assert(candidate((234), (2)) == (\"11101010\"));\n\
    \    assert(candidate((16), (2)) == (\"10000\"));\n    assert(candidate((8), (2))\
    \ == (\"1000\"));\n    assert(candidate((7), (2)) == (\"111\"));\n    assert(candidate((2),\
    \ (3)) == (\"2\"));\n    assert(candidate((3), (4)) == (\"3\"));\n    assert(candidate((4),\
    \ (5)) == (\"4\"));\n    assert(candidate((5), (6)) == (\"5\"));\n    assert(candidate((6),\
    \ (7)) == (\"6\"));\n    assert(candidate((7), (8)) == (\"7\"));\n}\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base(8, 3)\n// '22'\n// >>> change_base(8,\
    \ 2)\n// '1000'\n// >>> change_base(7, 2)\n// '111'\nstd::string change_base(long\
    \ x, long base) {\n    std::string ans = \"\";\n    while (x > 0) {\n        ans\
    \ = std::to_string(x % base) + ans;\n        x /= base;\n    }\n    return ans;\n\
    }\nint main() {\n    auto candidate = change_base;\n    assert(candidate((8),\
    \ (3)) == (\"22\"));\n    assert(candidate((9), (3)) == (\"100\"));\n    assert(candidate((234),\
    \ (2)) == (\"11101010\"));\n    assert(candidate((16), (2)) == (\"10000\"));\n\
    \    assert(candidate((8), (2)) == (\"1000\"));\n    assert(candidate((7), (2))\
    \ == (\"111\"));\n    assert(candidate((2), (3)) == (\"2\"));\n    assert(candidate((3),\
    \ (4)) == (\"3\"));\n    assert(candidate((4), (5)) == (\"4\"));\n    assert(candidate((5),\
    \ (6)) == (\"5\"));\n    assert(candidate((6), (7)) == (\"6\"));\n    assert(candidate((7),\
    \ (8)) == (\"7\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base(8, 3)\n// '22'\n// >>> change_base(8,\
    \ 2)\n// '1000'\n// >>> change_base(7, 2)\n// '111'\nstd::string change_base(long\
    \ x, long base) {\n    std::string ans = \"\";\n    while (x > 0) {\n        ans\
    \ += (char)(x % base);\n        x /= base;\n    }\n    return ans;\n}\nint main()\
    \ {\n    auto candidate = change_base;\n    assert(candidate((8), (3)) == (\"\
    22\"));\n    assert(candidate((9), (3)) == (\"100\"));\n    assert(candidate((234),\
    \ (2)) == (\"11101010\"));\n    assert(candidate((16), (2)) == (\"10000\"));\n\
    \    assert(candidate((8), (2)) == (\"1000\"));\n    assert(candidate((7), (2))\
    \ == (\"111\"));\n    assert(candidate((2), (3)) == (\"2\"));\n    assert(candidate((3),\
    \ (4)) == (\"3\"));\n    assert(candidate((4), (5)) == (\"4\"));\n    assert(candidate((5),\
    \ (6)) == (\"5\"));\n    assert(candidate((6), (7)) == (\"6\"));\n    assert(candidate((7),\
    \ (8)) == (\"7\"));\n}\n"
  stdout: ''
  stderr: "tmpad_33gh2: /tmp/tmpad_33gh2.cpp:22: int main(): Assertion `candidate((8),\
    \ (3)) == (\"22\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base(8, 3)\n// '22'\n// >>> change_base(8,\
    \ 2)\n// '1000'\n// >>> change_base(7, 2)\n// '111'\nstd::string change_base(long\
    \ x, long base) {\n    std::string ans = \"\";\n    long temp = x;\n    while\
    \ (temp != 0) {\n        ans += (temp % base);\n        temp /= base;\n    }\n\
    \    return ans;\n}\nint main() {\n    auto candidate = change_base;\n    assert(candidate((8),\
    \ (3)) == (\"22\"));\n    assert(candidate((9), (3)) == (\"100\"));\n    assert(candidate((234),\
    \ (2)) == (\"11101010\"));\n    assert(candidate((16), (2)) == (\"10000\"));\n\
    \    assert(candidate((8), (2)) == (\"1000\"));\n    assert(candidate((7), (2))\
    \ == (\"111\"));\n    assert(candidate((2), (3)) == (\"2\"));\n    assert(candidate((3),\
    \ (4)) == (\"3\"));\n    assert(candidate((4), (5)) == (\"4\"));\n    assert(candidate((5),\
    \ (6)) == (\"5\"));\n    assert(candidate((6), (7)) == (\"6\"));\n    assert(candidate((7),\
    \ (8)) == (\"7\"));\n}\n"
  stdout: ''
  stderr: "tmppf32kni0: /tmp/tmppf32kni0.cpp:23: int main(): Assertion `candidate((8),\
    \ (3)) == (\"22\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base(8, 3)\n// '22'\n// >>> change_base(8,\
    \ 2)\n// '1000'\n// >>> change_base(7, 2)\n// '111'\nstd::string change_base(long\
    \ x, long base) {\n    std::string ans = \"\";\n    while (x > 0) {\n        int\
    \ rem = x % base;\n        ans = std::to_string(base) + ans;\n        x = x /\
    \ base;\n    }\n    return ans;\n}\nint main() {\n    auto candidate = change_base;\n\
    \    assert(candidate((8), (3)) == (\"22\"));\n    assert(candidate((9), (3))\
    \ == (\"100\"));\n    assert(candidate((234), (2)) == (\"11101010\"));\n    assert(candidate((16),\
    \ (2)) == (\"10000\"));\n    assert(candidate((8), (2)) == (\"1000\"));\n    assert(candidate((7),\
    \ (2)) == (\"111\"));\n    assert(candidate((2), (3)) == (\"2\"));\n    assert(candidate((3),\
    \ (4)) == (\"3\"));\n    assert(candidate((4), (5)) == (\"4\"));\n    assert(candidate((5),\
    \ (6)) == (\"5\"));\n    assert(candidate((6), (7)) == (\"6\"));\n    assert(candidate((7),\
    \ (8)) == (\"7\"));\n}\n"
  stdout: ''
  stderr: "tmpnnkscifn: /tmp/tmpnnkscifn.cpp:23: int main(): Assertion `candidate((8),\
    \ (3)) == (\"22\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base(8, 3)\n// '22'\n// >>> change_base(8,\
    \ 2)\n// '1000'\n// >>> change_base(7, 2)\n// '111'\nstd::string change_base(long\
    \ x, long base) {\n    std::string ans = \"\";\n    long temp = x;\n    while\
    \ (temp > 0) {\n        int digit = temp % base;\n        ans = std::to_string(digit)\
    \ + ans;\n        temp /= base;\n    }\n    return ans;\n}\nint main() {\n   \
    \ auto candidate = change_base;\n    assert(candidate((8), (3)) == (\"22\"));\n\
    \    assert(candidate((9), (3)) == (\"100\"));\n    assert(candidate((234), (2))\
    \ == (\"11101010\"));\n    assert(candidate((16), (2)) == (\"10000\"));\n    assert(candidate((8),\
    \ (2)) == (\"1000\"));\n    assert(candidate((7), (2)) == (\"111\"));\n    assert(candidate((2),\
    \ (3)) == (\"2\"));\n    assert(candidate((3), (4)) == (\"3\"));\n    assert(candidate((4),\
    \ (5)) == (\"4\"));\n    assert(candidate((5), (6)) == (\"5\"));\n    assert(candidate((6),\
    \ (7)) == (\"6\"));\n    assert(candidate((7), (8)) == (\"7\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base(8, 3)\n// '22'\n// >>> change_base(8,\
    \ 2)\n// '1000'\n// >>> change_base(7, 2)\n// '111'\nstd::string change_base(long\
    \ x, long base) {\n    std::string ans = \"\";\n    long temp = x;\n    while\
    \ (temp > 0) {\n        int digit = temp % base;\n        ans += digit;\n    \
    \    temp /= base;\n    }\n    return ans;\n}\nint main() {\n    auto candidate\
    \ = change_base;\n    assert(candidate((8), (3)) == (\"22\"));\n    assert(candidate((9),\
    \ (3)) == (\"100\"));\n    assert(candidate((234), (2)) == (\"11101010\"));\n\
    \    assert(candidate((16), (2)) == (\"10000\"));\n    assert(candidate((8), (2))\
    \ == (\"1000\"));\n    assert(candidate((7), (2)) == (\"111\"));\n    assert(candidate((2),\
    \ (3)) == (\"2\"));\n    assert(candidate((3), (4)) == (\"3\"));\n    assert(candidate((4),\
    \ (5)) == (\"4\"));\n    assert(candidate((5), (6)) == (\"5\"));\n    assert(candidate((6),\
    \ (7)) == (\"6\"));\n    assert(candidate((7), (8)) == (\"7\"));\n}\n"
  stdout: ''
  stderr: "tmp2c9fer_p: /tmp/tmp2c9fer_p.cpp:24: int main(): Assertion `candidate((8),\
    \ (3)) == (\"22\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base(8, 3)\n// '22'\n// >>> change_base(8,\
    \ 2)\n// '1000'\n// >>> change_base(7, 2)\n// '111'\nstd::string change_base(long\
    \ x, long base) {\n    std::string ans = \"\";\n    long temp = 0;\n    while\
    \ (x > 0) {\n        temp = x % base;\n        ans += std::to_string(temp);\n\
    \        x = x / base;\n    }\n    return ans;\n}\nint main() {\n    auto candidate\
    \ = change_base;\n    assert(candidate((8), (3)) == (\"22\"));\n    assert(candidate((9),\
    \ (3)) == (\"100\"));\n    assert(candidate((234), (2)) == (\"11101010\"));\n\
    \    assert(candidate((16), (2)) == (\"10000\"));\n    assert(candidate((8), (2))\
    \ == (\"1000\"));\n    assert(candidate((7), (2)) == (\"111\"));\n    assert(candidate((2),\
    \ (3)) == (\"2\"));\n    assert(candidate((3), (4)) == (\"3\"));\n    assert(candidate((4),\
    \ (5)) == (\"4\"));\n    assert(candidate((5), (6)) == (\"5\"));\n    assert(candidate((6),\
    \ (7)) == (\"6\"));\n    assert(candidate((7), (8)) == (\"7\"));\n}\n"
  stdout: ''
  stderr: "tmp23sd4llg: /tmp/tmp23sd4llg.cpp:25: int main(): Assertion `candidate((9),\
    \ (3)) == (\"100\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base(8, 3)\n// '22'\n// >>> change_base(8,\
    \ 2)\n// '1000'\n// >>> change_base(7, 2)\n// '111'\nstd::string change_base(long\
    \ x, long base) {\n    long temp;\n    temp = x;\n    std::string ans;\n    while\
    \ (temp != 0) {\n        temp = temp / base;\n        ans = std::to_string(temp)\
    \ + ans;\n    }\n    return ans;\n}\nint main() {\n    auto candidate = change_base;\n\
    \    assert(candidate((8), (3)) == (\"22\"));\n    assert(candidate((9), (3))\
    \ == (\"100\"));\n    assert(candidate((234), (2)) == (\"11101010\"));\n    assert(candidate((16),\
    \ (2)) == (\"10000\"));\n    assert(candidate((8), (2)) == (\"1000\"));\n    assert(candidate((7),\
    \ (2)) == (\"111\"));\n    assert(candidate((2), (3)) == (\"2\"));\n    assert(candidate((3),\
    \ (4)) == (\"3\"));\n    assert(candidate((4), (5)) == (\"4\"));\n    assert(candidate((5),\
    \ (6)) == (\"5\"));\n    assert(candidate((6), (7)) == (\"6\"));\n    assert(candidate((7),\
    \ (8)) == (\"7\"));\n}\n"
  stdout: ''
  stderr: "tmpgfox69xc: /tmp/tmpgfox69xc.cpp:24: int main(): Assertion `candidate((8),\
    \ (3)) == (\"22\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base(8, 3)\n// '22'\n// >>> change_base(8,\
    \ 2)\n// '1000'\n// >>> change_base(7, 2)\n// '111'\nstd::string change_base(long\
    \ x, long base) {\n    std::string ans = \"\";\n    long temp = x;\n    while\
    \ (temp != 0) {\n        ans += (temp % base);\n        temp /= base;\n    }\n\
    \    return ans;\n}\nint main() {\n    auto candidate = change_base;\n    assert(candidate((8),\
    \ (3)) == (\"22\"));\n    assert(candidate((9), (3)) == (\"100\"));\n    assert(candidate((234),\
    \ (2)) == (\"11101010\"));\n    assert(candidate((16), (2)) == (\"10000\"));\n\
    \    assert(candidate((8), (2)) == (\"1000\"));\n    assert(candidate((7), (2))\
    \ == (\"111\"));\n    assert(candidate((2), (3)) == (\"2\"));\n    assert(candidate((3),\
    \ (4)) == (\"3\"));\n    assert(candidate((4), (5)) == (\"4\"));\n    assert(candidate((5),\
    \ (6)) == (\"5\"));\n    assert(candidate((6), (7)) == (\"6\"));\n    assert(candidate((7),\
    \ (8)) == (\"7\"));\n}\n"
  stdout: ''
  stderr: "tmpxs_azzsd: /tmp/tmpxs_azzsd.cpp:23: int main(): Assertion `candidate((8),\
    \ (3)) == (\"22\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base(8, 3)\n// '22'\n// >>> change_base(8,\
    \ 2)\n// '1000'\n// >>> change_base(7, 2)\n// '111'\nstd::string change_base(long\
    \ x, long base) {\n    std::string ans = \"\";\n    long temp = x;\n    while\
    \ (temp > 0) {\n        int rem = temp % base;\n        ans = std::to_string(rem)\
    \ + ans;\n        temp = temp / base;\n    }\n    return ans;\n}\nint main() {\n\
    \    auto candidate = change_base;\n    assert(candidate((8), (3)) == (\"22\"\
    ));\n    assert(candidate((9), (3)) == (\"100\"));\n    assert(candidate((234),\
    \ (2)) == (\"11101010\"));\n    assert(candidate((16), (2)) == (\"10000\"));\n\
    \    assert(candidate((8), (2)) == (\"1000\"));\n    assert(candidate((7), (2))\
    \ == (\"111\"));\n    assert(candidate((2), (3)) == (\"2\"));\n    assert(candidate((3),\
    \ (4)) == (\"3\"));\n    assert(candidate((4), (5)) == (\"4\"));\n    assert(candidate((5),\
    \ (6)) == (\"5\"));\n    assert(candidate((6), (7)) == (\"6\"));\n    assert(candidate((7),\
    \ (8)) == (\"7\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base(8, 3)\n// '22'\n// >>> change_base(8,\
    \ 2)\n// '1000'\n// >>> change_base(7, 2)\n// '111'\nstd::string change_base(long\
    \ x, long base) {\n    std::string ans = \"\";\n    while (x != 0) {\n       \
    \ long r = x % base;\n        ans = std::to_string(r) + ans;\n        x = x /\
    \ base;\n    }\n    return ans;\n}\nint main() {\n    auto candidate = change_base;\n\
    \    assert(candidate((8), (3)) == (\"22\"));\n    assert(candidate((9), (3))\
    \ == (\"100\"));\n    assert(candidate((234), (2)) == (\"11101010\"));\n    assert(candidate((16),\
    \ (2)) == (\"10000\"));\n    assert(candidate((8), (2)) == (\"1000\"));\n    assert(candidate((7),\
    \ (2)) == (\"111\"));\n    assert(candidate((2), (3)) == (\"2\"));\n    assert(candidate((3),\
    \ (4)) == (\"3\"));\n    assert(candidate((4), (5)) == (\"4\"));\n    assert(candidate((5),\
    \ (6)) == (\"5\"));\n    assert(candidate((6), (7)) == (\"6\"));\n    assert(candidate((7),\
    \ (8)) == (\"7\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base(8, 3)\n// '22'\n// >>> change_base(8,\
    \ 2)\n// '1000'\n// >>> change_base(7, 2)\n// '111'\nstd::string change_base(long\
    \ x, long base) {\n    std::string ans = \"\";\n    long temp = 0;\n    long mod\
    \ = x;\n    while (mod != 0) {\n        temp = mod % base;\n        ans = std::to_string(temp)\
    \ + ans;\n        mod = mod / base;\n    }\n    return ans;\n}\nint main() {\n\
    \    auto candidate = change_base;\n    assert(candidate((8), (3)) == (\"22\"\
    ));\n    assert(candidate((9), (3)) == (\"100\"));\n    assert(candidate((234),\
    \ (2)) == (\"11101010\"));\n    assert(candidate((16), (2)) == (\"10000\"));\n\
    \    assert(candidate((8), (2)) == (\"1000\"));\n    assert(candidate((7), (2))\
    \ == (\"111\"));\n    assert(candidate((2), (3)) == (\"2\"));\n    assert(candidate((3),\
    \ (4)) == (\"3\"));\n    assert(candidate((4), (5)) == (\"4\"));\n    assert(candidate((5),\
    \ (6)) == (\"5\"));\n    assert(candidate((6), (7)) == (\"6\"));\n    assert(candidate((7),\
    \ (8)) == (\"7\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base(8, 3)\n// '22'\n// >>> change_base(8,\
    \ 2)\n// '1000'\n// >>> change_base(7, 2)\n// '111'\nstd::string change_base(long\
    \ x, long base) {\n    std::string ans = \"\";\n    long n = x;\n    while (n\
    \ > 0) {\n        int digit = n % base;\n        ans += digit;\n        n /= base;\n\
    \    }\n    return ans;\n}\nint main() {\n    auto candidate = change_base;\n\
    \    assert(candidate((8), (3)) == (\"22\"));\n    assert(candidate((9), (3))\
    \ == (\"100\"));\n    assert(candidate((234), (2)) == (\"11101010\"));\n    assert(candidate((16),\
    \ (2)) == (\"10000\"));\n    assert(candidate((8), (2)) == (\"1000\"));\n    assert(candidate((7),\
    \ (2)) == (\"111\"));\n    assert(candidate((2), (3)) == (\"2\"));\n    assert(candidate((3),\
    \ (4)) == (\"3\"));\n    assert(candidate((4), (5)) == (\"4\"));\n    assert(candidate((5),\
    \ (6)) == (\"5\"));\n    assert(candidate((6), (7)) == (\"6\"));\n    assert(candidate((7),\
    \ (8)) == (\"7\"));\n}\n"
  stdout: ''
  stderr: "tmphxmvrlgk: /tmp/tmphxmvrlgk.cpp:24: int main(): Assertion `candidate((8),\
    \ (3)) == (\"22\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base(8, 3)\n// '22'\n// >>> change_base(8,\
    \ 2)\n// '1000'\n// >>> change_base(7, 2)\n// '111'\nstd::string change_base(long\
    \ x, long base) {\n    std::string ans = \"\";\n    while (x > 0) {\n        ans\
    \ += (char)(x % base);\n        x /= base;\n    }\n    return ans;\n}\nint main()\
    \ {\n    auto candidate = change_base;\n    assert(candidate((8), (3)) == (\"\
    22\"));\n    assert(candidate((9), (3)) == (\"100\"));\n    assert(candidate((234),\
    \ (2)) == (\"11101010\"));\n    assert(candidate((16), (2)) == (\"10000\"));\n\
    \    assert(candidate((8), (2)) == (\"1000\"));\n    assert(candidate((7), (2))\
    \ == (\"111\"));\n    assert(candidate((2), (3)) == (\"2\"));\n    assert(candidate((3),\
    \ (4)) == (\"3\"));\n    assert(candidate((4), (5)) == (\"4\"));\n    assert(candidate((5),\
    \ (6)) == (\"5\"));\n    assert(candidate((6), (7)) == (\"6\"));\n    assert(candidate((7),\
    \ (8)) == (\"7\"));\n}\n"
  stdout: ''
  stderr: "tmp5_yglqbz: /tmp/tmp5_yglqbz.cpp:22: int main(): Assertion `candidate((8),\
    \ (3)) == (\"22\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base(8, 3)\n// '22'\n// >>> change_base(8,\
    \ 2)\n// '1000'\n// >>> change_base(7, 2)\n// '111'\nstd::string change_base(long\
    \ x, long base) {\n    std::string ans = \"\";\n    while (x > 0) {\n        ans\
    \ += (char)(x % base);\n        x /= base;\n    }\n    return ans;\n}\nint main()\
    \ {\n    auto candidate = change_base;\n    assert(candidate((8), (3)) == (\"\
    22\"));\n    assert(candidate((9), (3)) == (\"100\"));\n    assert(candidate((234),\
    \ (2)) == (\"11101010\"));\n    assert(candidate((16), (2)) == (\"10000\"));\n\
    \    assert(candidate((8), (2)) == (\"1000\"));\n    assert(candidate((7), (2))\
    \ == (\"111\"));\n    assert(candidate((2), (3)) == (\"2\"));\n    assert(candidate((3),\
    \ (4)) == (\"3\"));\n    assert(candidate((4), (5)) == (\"4\"));\n    assert(candidate((5),\
    \ (6)) == (\"5\"));\n    assert(candidate((6), (7)) == (\"6\"));\n    assert(candidate((7),\
    \ (8)) == (\"7\"));\n}\n"
  stdout: ''
  stderr: "tmp_eph6syl: /tmp/tmp_eph6syl.cpp:22: int main(): Assertion `candidate((8),\
    \ (3)) == (\"22\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base(8, 3)\n// '22'\n// >>> change_base(8,\
    \ 2)\n// '1000'\n// >>> change_base(7, 2)\n// '111'\nstd::string change_base(long\
    \ x, long base) {\n    std::string ans = \"\";\n    long temp = x;\n    while\
    \ (temp > 0) {\n        ans = std::to_string(temp % base) + ans;\n        temp\
    \ = temp / base;\n    }\n    return ans;\n}\nint main() {\n    auto candidate\
    \ = change_base;\n    assert(candidate((8), (3)) == (\"22\"));\n    assert(candidate((9),\
    \ (3)) == (\"100\"));\n    assert(candidate((234), (2)) == (\"11101010\"));\n\
    \    assert(candidate((16), (2)) == (\"10000\"));\n    assert(candidate((8), (2))\
    \ == (\"1000\"));\n    assert(candidate((7), (2)) == (\"111\"));\n    assert(candidate((2),\
    \ (3)) == (\"2\"));\n    assert(candidate((3), (4)) == (\"3\"));\n    assert(candidate((4),\
    \ (5)) == (\"4\"));\n    assert(candidate((5), (6)) == (\"5\"));\n    assert(candidate((6),\
    \ (7)) == (\"6\"));\n    assert(candidate((7), (8)) == (\"7\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base(8, 3)\n// '22'\n// >>> change_base(8,\
    \ 2)\n// '1000'\n// >>> change_base(7, 2)\n// '111'\nstd::string change_base(long\
    \ x, long base) {\n    std::string ans = \"\";\n    long n = x;\n    while (n\
    \ > 0) {\n        long r = n % base;\n        ans = std::to_string(r) + ans;\n\
    \        n = n / base;\n    }\n    return ans;\n}\nint main() {\n    auto candidate\
    \ = change_base;\n    assert(candidate((8), (3)) == (\"22\"));\n    assert(candidate((9),\
    \ (3)) == (\"100\"));\n    assert(candidate((234), (2)) == (\"11101010\"));\n\
    \    assert(candidate((16), (2)) == (\"10000\"));\n    assert(candidate((8), (2))\
    \ == (\"1000\"));\n    assert(candidate((7), (2)) == (\"111\"));\n    assert(candidate((2),\
    \ (3)) == (\"2\"));\n    assert(candidate((3), (4)) == (\"3\"));\n    assert(candidate((4),\
    \ (5)) == (\"4\"));\n    assert(candidate((5), (6)) == (\"5\"));\n    assert(candidate((6),\
    \ (7)) == (\"6\"));\n    assert(candidate((7), (8)) == (\"7\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base(8, 3)\n// '22'\n// >>> change_base(8,\
    \ 2)\n// '1000'\n// >>> change_base(7, 2)\n// '111'\nstd::string change_base(long\
    \ x, long base) {\n    std::string ans = \"\";\n    long tmp = x;\n    while (base\
    \ > 0) {\n        tmp = tmp / base;\n        ans = std::to_string(tmp) + ans;\n\
    \        base--;\n    }\n    while (base < 0) {\n        tmp = tmp * base;\n \
    \       ans = std::to_string(tmp) + ans;\n        base++;\n    }\n    return ans;\n\
    }\nint main() {\n    auto candidate = change_base;\n    assert(candidate((8),\
    \ (3)) == (\"22\"));\n    assert(candidate((9), (3)) == (\"100\"));\n    assert(candidate((234),\
    \ (2)) == (\"11101010\"));\n    assert(candidate((16), (2)) == (\"10000\"));\n\
    \    assert(candidate((8), (2)) == (\"1000\"));\n    assert(candidate((7), (2))\
    \ == (\"111\"));\n    assert(candidate((2), (3)) == (\"2\"));\n    assert(candidate((3),\
    \ (4)) == (\"3\"));\n    assert(candidate((4), (5)) == (\"4\"));\n    assert(candidate((5),\
    \ (6)) == (\"5\"));\n    assert(candidate((6), (7)) == (\"6\"));\n    assert(candidate((7),\
    \ (8)) == (\"7\"));\n}\n"
  stdout: ''
  stderr: "tmpobztv0ix: /tmp/tmpobztv0ix.cpp:29: int main(): Assertion `candidate((8),\
    \ (3)) == (\"22\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base(8, 3)\n// '22'\n// >>> change_base(8,\
    \ 2)\n// '1000'\n// >>> change_base(7, 2)\n// '111'\nstd::string change_base(long\
    \ x, long base) {\n    std::string ans = \"\";\n    long temp = x;\n    while\
    \ (temp != 0) {\n        int digit = temp % base;\n        ans = std::to_string(digit)\
    \ + ans;\n        temp = temp / base;\n    }\n    return ans;\n}\nint main() {\n\
    \    auto candidate = change_base;\n    assert(candidate((8), (3)) == (\"22\"\
    ));\n    assert(candidate((9), (3)) == (\"100\"));\n    assert(candidate((234),\
    \ (2)) == (\"11101010\"));\n    assert(candidate((16), (2)) == (\"10000\"));\n\
    \    assert(candidate((8), (2)) == (\"1000\"));\n    assert(candidate((7), (2))\
    \ == (\"111\"));\n    assert(candidate((2), (3)) == (\"2\"));\n    assert(candidate((3),\
    \ (4)) == (\"3\"));\n    assert(candidate((4), (5)) == (\"4\"));\n    assert(candidate((5),\
    \ (6)) == (\"5\"));\n    assert(candidate((6), (7)) == (\"6\"));\n    assert(candidate((7),\
    \ (8)) == (\"7\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base(8, 3)\n// '22'\n// >>> change_base(8,\
    \ 2)\n// '1000'\n// >>> change_base(7, 2)\n// '111'\nstd::string change_base(long\
    \ x, long base) {\n    std::string ans = \"\";\n    long tmp = x;\n    while (base\
    \ > 0) {\n        tmp = tmp / base;\n        ans = std::to_string(tmp) + ans;\n\
    \        base--;\n    }\n    while (base < 0) {\n        tmp = tmp * base;\n \
    \       ans = std::to_string(tmp) + ans;\n        base++;\n    }\n    return ans;\n\
    }\nint main() {\n    auto candidate = change_base;\n    assert(candidate((8),\
    \ (3)) == (\"22\"));\n    assert(candidate((9), (3)) == (\"100\"));\n    assert(candidate((234),\
    \ (2)) == (\"11101010\"));\n    assert(candidate((16), (2)) == (\"10000\"));\n\
    \    assert(candidate((8), (2)) == (\"1000\"));\n    assert(candidate((7), (2))\
    \ == (\"111\"));\n    assert(candidate((2), (3)) == (\"2\"));\n    assert(candidate((3),\
    \ (4)) == (\"3\"));\n    assert(candidate((4), (5)) == (\"4\"));\n    assert(candidate((5),\
    \ (6)) == (\"5\"));\n    assert(candidate((6), (7)) == (\"6\"));\n    assert(candidate((7),\
    \ (8)) == (\"7\"));\n}\n"
  stdout: ''
  stderr: "tmpfol_iib7: /tmp/tmpfol_iib7.cpp:29: int main(): Assertion `candidate((8),\
    \ (3)) == (\"22\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base(8, 3)\n// '22'\n// >>> change_base(8,\
    \ 2)\n// '1000'\n// >>> change_base(7, 2)\n// '111'\nstd::string change_base(long\
    \ x, long base) {\n    std::string ans = \"\";\n    long n = x;\n    while (n\
    \ > 0) {\n        int digit = n % base;\n        ans += (char)(digit + '0');\n\
    \        n /= base;\n    }\n    return ans;\n}\nint main() {\n    auto candidate\
    \ = change_base;\n    assert(candidate((8), (3)) == (\"22\"));\n    assert(candidate((9),\
    \ (3)) == (\"100\"));\n    assert(candidate((234), (2)) == (\"11101010\"));\n\
    \    assert(candidate((16), (2)) == (\"10000\"));\n    assert(candidate((8), (2))\
    \ == (\"1000\"));\n    assert(candidate((7), (2)) == (\"111\"));\n    assert(candidate((2),\
    \ (3)) == (\"2\"));\n    assert(candidate((3), (4)) == (\"3\"));\n    assert(candidate((4),\
    \ (5)) == (\"4\"));\n    assert(candidate((5), (6)) == (\"5\"));\n    assert(candidate((6),\
    \ (7)) == (\"6\"));\n    assert(candidate((7), (8)) == (\"7\"));\n}\n"
  stdout: ''
  stderr: "tmp3i1k9obm: /tmp/tmp3i1k9obm.cpp:25: int main(): Assertion `candidate((9),\
    \ (3)) == (\"100\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base(8, 3)\n// '22'\n// >>> change_base(8,\
    \ 2)\n// '1000'\n// >>> change_base(7, 2)\n// '111'\nstd::string change_base(long\
    \ x, long base) {\n    std::string ans = \"\";\n    long rem = x;\n    while (x\
    \ > 0) {\n        rem = rem % base;\n        ans = std::to_string(rem) + ans;\n\
    \        x /= base;\n    }\n    return ans;\n}\nint main() {\n    auto candidate\
    \ = change_base;\n    assert(candidate((8), (3)) == (\"22\"));\n    assert(candidate((9),\
    \ (3)) == (\"100\"));\n    assert(candidate((234), (2)) == (\"11101010\"));\n\
    \    assert(candidate((16), (2)) == (\"10000\"));\n    assert(candidate((8), (2))\
    \ == (\"1000\"));\n    assert(candidate((7), (2)) == (\"111\"));\n    assert(candidate((2),\
    \ (3)) == (\"2\"));\n    assert(candidate((3), (4)) == (\"3\"));\n    assert(candidate((4),\
    \ (5)) == (\"4\"));\n    assert(candidate((5), (6)) == (\"5\"));\n    assert(candidate((6),\
    \ (7)) == (\"6\"));\n    assert(candidate((7), (8)) == (\"7\"));\n}\n"
  stdout: ''
  stderr: "tmpnp56a44h: /tmp/tmpnp56a44h.cpp:25: int main(): Assertion `candidate((9),\
    \ (3)) == (\"100\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base(8, 3)\n// '22'\n// >>> change_base(8,\
    \ 2)\n// '1000'\n// >>> change_base(7, 2)\n// '111'\nstd::string change_base(long\
    \ x, long base) {\n    std::string ans = \"\";\n    long temp = x;\n    while\
    \ (temp > 0) {\n        int rem = temp % base;\n        ans = std::to_string(base)\
    \ + ans;\n        temp = temp / base;\n    }\n    return ans;\n}\nint main() {\n\
    \    auto candidate = change_base;\n    assert(candidate((8), (3)) == (\"22\"\
    ));\n    assert(candidate((9), (3)) == (\"100\"));\n    assert(candidate((234),\
    \ (2)) == (\"11101010\"));\n    assert(candidate((16), (2)) == (\"10000\"));\n\
    \    assert(candidate((8), (2)) == (\"1000\"));\n    assert(candidate((7), (2))\
    \ == (\"111\"));\n    assert(candidate((2), (3)) == (\"2\"));\n    assert(candidate((3),\
    \ (4)) == (\"3\"));\n    assert(candidate((4), (5)) == (\"4\"));\n    assert(candidate((5),\
    \ (6)) == (\"5\"));\n    assert(candidate((6), (7)) == (\"6\"));\n    assert(candidate((7),\
    \ (8)) == (\"7\"));\n}\n"
  stdout: ''
  stderr: "tmp4jagnret: /tmp/tmp4jagnret.cpp:24: int main(): Assertion `candidate((8),\
    \ (3)) == (\"22\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base(8, 3)\n// '22'\n// >>> change_base(8,\
    \ 2)\n// '1000'\n// >>> change_base(7, 2)\n// '111'\nstd::string change_base(long\
    \ x, long base) {\n    std::string ans = \"\";\n    long temp = x;\n    while\
    \ (temp > 0) {\n        ans = std::to_string(temp % base) + ans;\n        temp\
    \ /= base;\n    }\n    return ans;\n}\nint main() {\n    auto candidate = change_base;\n\
    \    assert(candidate((8), (3)) == (\"22\"));\n    assert(candidate((9), (3))\
    \ == (\"100\"));\n    assert(candidate((234), (2)) == (\"11101010\"));\n    assert(candidate((16),\
    \ (2)) == (\"10000\"));\n    assert(candidate((8), (2)) == (\"1000\"));\n    assert(candidate((7),\
    \ (2)) == (\"111\"));\n    assert(candidate((2), (3)) == (\"2\"));\n    assert(candidate((3),\
    \ (4)) == (\"3\"));\n    assert(candidate((4), (5)) == (\"4\"));\n    assert(candidate((5),\
    \ (6)) == (\"5\"));\n    assert(candidate((6), (7)) == (\"6\"));\n    assert(candidate((7),\
    \ (8)) == (\"7\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base(8, 3)\n// '22'\n// >>> change_base(8,\
    \ 2)\n// '1000'\n// >>> change_base(7, 2)\n// '111'\nstd::string change_base(long\
    \ x, long base) {\n    std::string ans = \"\";\n    while (x > 0) {\n        ans\
    \ += (x % base);\n        x /= base;\n    }\n    return ans;\n}\nint main() {\n\
    \    auto candidate = change_base;\n    assert(candidate((8), (3)) == (\"22\"\
    ));\n    assert(candidate((9), (3)) == (\"100\"));\n    assert(candidate((234),\
    \ (2)) == (\"11101010\"));\n    assert(candidate((16), (2)) == (\"10000\"));\n\
    \    assert(candidate((8), (2)) == (\"1000\"));\n    assert(candidate((7), (2))\
    \ == (\"111\"));\n    assert(candidate((2), (3)) == (\"2\"));\n    assert(candidate((3),\
    \ (4)) == (\"3\"));\n    assert(candidate((4), (5)) == (\"4\"));\n    assert(candidate((5),\
    \ (6)) == (\"5\"));\n    assert(candidate((6), (7)) == (\"6\"));\n    assert(candidate((7),\
    \ (8)) == (\"7\"));\n}\n"
  stdout: ''
  stderr: "tmpbbet02vq: /tmp/tmpbbet02vq.cpp:22: int main(): Assertion `candidate((8),\
    \ (3)) == (\"22\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base(8, 3)\n// '22'\n// >>> change_base(8,\
    \ 2)\n// '1000'\n// >>> change_base(7, 2)\n// '111'\nstd::string change_base(long\
    \ x, long base) {\n    std::string ans = \"\";\n    while (x != 0) {\n       \
    \ ans += (x % base);\n        x /= base;\n    }\n    return ans;\n}\nint main()\
    \ {\n    auto candidate = change_base;\n    assert(candidate((8), (3)) == (\"\
    22\"));\n    assert(candidate((9), (3)) == (\"100\"));\n    assert(candidate((234),\
    \ (2)) == (\"11101010\"));\n    assert(candidate((16), (2)) == (\"10000\"));\n\
    \    assert(candidate((8), (2)) == (\"1000\"));\n    assert(candidate((7), (2))\
    \ == (\"111\"));\n    assert(candidate((2), (3)) == (\"2\"));\n    assert(candidate((3),\
    \ (4)) == (\"3\"));\n    assert(candidate((4), (5)) == (\"4\"));\n    assert(candidate((5),\
    \ (6)) == (\"5\"));\n    assert(candidate((6), (7)) == (\"6\"));\n    assert(candidate((7),\
    \ (8)) == (\"7\"));\n}\n"
  stdout: ''
  stderr: "tmpgln5m3sb: /tmp/tmpgln5m3sb.cpp:22: int main(): Assertion `candidate((8),\
    \ (3)) == (\"22\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base(8, 3)\n// '22'\n// >>> change_base(8,\
    \ 2)\n// '1000'\n// >>> change_base(7, 2)\n// '111'\nstd::string change_base(long\
    \ x, long base) {\n    std::string ans = \"\";\n    long temp;\n    while (x !=\
    \ 0) {\n        temp = x % base;\n        ans += std::to_string(temp);\n     \
    \   x /= base;\n    }\n    return ans;\n}\nint main() {\n    auto candidate =\
    \ change_base;\n    assert(candidate((8), (3)) == (\"22\"));\n    assert(candidate((9),\
    \ (3)) == (\"100\"));\n    assert(candidate((234), (2)) == (\"11101010\"));\n\
    \    assert(candidate((16), (2)) == (\"10000\"));\n    assert(candidate((8), (2))\
    \ == (\"1000\"));\n    assert(candidate((7), (2)) == (\"111\"));\n    assert(candidate((2),\
    \ (3)) == (\"2\"));\n    assert(candidate((3), (4)) == (\"3\"));\n    assert(candidate((4),\
    \ (5)) == (\"4\"));\n    assert(candidate((5), (6)) == (\"5\"));\n    assert(candidate((6),\
    \ (7)) == (\"6\"));\n    assert(candidate((7), (8)) == (\"7\"));\n}\n"
  stdout: ''
  stderr: "tmpvxshvxmn: /tmp/tmpvxshvxmn.cpp:25: int main(): Assertion `candidate((9),\
    \ (3)) == (\"100\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base(8, 3)\n// '22'\n// >>> change_base(8,\
    \ 2)\n// '1000'\n// >>> change_base(7, 2)\n// '111'\nstd::string change_base(long\
    \ x, long base) {\n    std::string ans = \"\";\n    long temp = x;\n    while\
    \ (temp != 0) {\n        temp = temp / base;\n        ans = std::to_string(temp)\
    \ + ans;\n    }\n    return ans;\n}\nint main() {\n    auto candidate = change_base;\n\
    \    assert(candidate((8), (3)) == (\"22\"));\n    assert(candidate((9), (3))\
    \ == (\"100\"));\n    assert(candidate((234), (2)) == (\"11101010\"));\n    assert(candidate((16),\
    \ (2)) == (\"10000\"));\n    assert(candidate((8), (2)) == (\"1000\"));\n    assert(candidate((7),\
    \ (2)) == (\"111\"));\n    assert(candidate((2), (3)) == (\"2\"));\n    assert(candidate((3),\
    \ (4)) == (\"3\"));\n    assert(candidate((4), (5)) == (\"4\"));\n    assert(candidate((5),\
    \ (6)) == (\"5\"));\n    assert(candidate((6), (7)) == (\"6\"));\n    assert(candidate((7),\
    \ (8)) == (\"7\"));\n}\n"
  stdout: ''
  stderr: "tmpxcdc6p9h: /tmp/tmpxcdc6p9h.cpp:23: int main(): Assertion `candidate((8),\
    \ (3)) == (\"22\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base(8, 3)\n// '22'\n// >>> change_base(8,\
    \ 2)\n// '1000'\n// >>> change_base(7, 2)\n// '111'\nstd::string change_base(long\
    \ x, long base) {\n    std::string ans = \"\";\n    long temp = x;\n    while\
    \ (temp > 0) {\n        ans += (temp % base);\n        temp /= base;\n    }\n\
    \    return ans;\n}\nint main() {\n    auto candidate = change_base;\n    assert(candidate((8),\
    \ (3)) == (\"22\"));\n    assert(candidate((9), (3)) == (\"100\"));\n    assert(candidate((234),\
    \ (2)) == (\"11101010\"));\n    assert(candidate((16), (2)) == (\"10000\"));\n\
    \    assert(candidate((8), (2)) == (\"1000\"));\n    assert(candidate((7), (2))\
    \ == (\"111\"));\n    assert(candidate((2), (3)) == (\"2\"));\n    assert(candidate((3),\
    \ (4)) == (\"3\"));\n    assert(candidate((4), (5)) == (\"4\"));\n    assert(candidate((5),\
    \ (6)) == (\"5\"));\n    assert(candidate((6), (7)) == (\"6\"));\n    assert(candidate((7),\
    \ (8)) == (\"7\"));\n}\n"
  stdout: ''
  stderr: "tmp23c6bktk: /tmp/tmp23c6bktk.cpp:23: int main(): Assertion `candidate((8),\
    \ (3)) == (\"22\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base(8, 3)\n// '22'\n// >>> change_base(8,\
    \ 2)\n// '1000'\n// >>> change_base(7, 2)\n// '111'\nstd::string change_base(long\
    \ x, long base) {\n    std::string ans = \"\";\n    long temp = 0;\n    long limit\
    \ = pow(base, base);\n    while (temp < x) {\n        temp = temp * base + limit;\n\
    \        ans = std::to_string(temp) + ans;\n    }\n    return ans;\n}\nint main()\
    \ {\n    auto candidate = change_base;\n    assert(candidate((8), (3)) == (\"\
    22\"));\n    assert(candidate((9), (3)) == (\"100\"));\n    assert(candidate((234),\
    \ (2)) == (\"11101010\"));\n    assert(candidate((16), (2)) == (\"10000\"));\n\
    \    assert(candidate((8), (2)) == (\"1000\"));\n    assert(candidate((7), (2))\
    \ == (\"111\"));\n    assert(candidate((2), (3)) == (\"2\"));\n    assert(candidate((3),\
    \ (4)) == (\"3\"));\n    assert(candidate((4), (5)) == (\"4\"));\n    assert(candidate((5),\
    \ (6)) == (\"5\"));\n    assert(candidate((6), (7)) == (\"6\"));\n    assert(candidate((7),\
    \ (8)) == (\"7\"));\n}\n"
  stdout: ''
  stderr: "tmp82wkqpis: /tmp/tmp82wkqpis.cpp:24: int main(): Assertion `candidate((8),\
    \ (3)) == (\"22\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base(8, 3)\n// '22'\n// >>> change_base(8,\
    \ 2)\n// '1000'\n// >>> change_base(7, 2)\n// '111'\nstd::string change_base(long\
    \ x, long base) {\n    std::string ans = \"\";\n    while (x > 0) {\n        ans\
    \ = std::to_string(x % base) + ans;\n        x /= base;\n    }\n    return ans;\n\
    }\nint main() {\n    auto candidate = change_base;\n    assert(candidate((8),\
    \ (3)) == (\"22\"));\n    assert(candidate((9), (3)) == (\"100\"));\n    assert(candidate((234),\
    \ (2)) == (\"11101010\"));\n    assert(candidate((16), (2)) == (\"10000\"));\n\
    \    assert(candidate((8), (2)) == (\"1000\"));\n    assert(candidate((7), (2))\
    \ == (\"111\"));\n    assert(candidate((2), (3)) == (\"2\"));\n    assert(candidate((3),\
    \ (4)) == (\"3\"));\n    assert(candidate((4), (5)) == (\"4\"));\n    assert(candidate((5),\
    \ (6)) == (\"5\"));\n    assert(candidate((6), (7)) == (\"6\"));\n    assert(candidate((7),\
    \ (8)) == (\"7\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base(8, 3)\n// '22'\n// >>> change_base(8,\
    \ 2)\n// '1000'\n// >>> change_base(7, 2)\n// '111'\nstd::string change_base(long\
    \ x, long base) {\n    std::string ans = \"\";\n    while (x != 0) {\n       \
    \ long r = x % base;\n        ans = std::to_string(r) + ans;\n        x = x /\
    \ base;\n    }\n    return ans;\n}\nint main() {\n    auto candidate = change_base;\n\
    \    assert(candidate((8), (3)) == (\"22\"));\n    assert(candidate((9), (3))\
    \ == (\"100\"));\n    assert(candidate((234), (2)) == (\"11101010\"));\n    assert(candidate((16),\
    \ (2)) == (\"10000\"));\n    assert(candidate((8), (2)) == (\"1000\"));\n    assert(candidate((7),\
    \ (2)) == (\"111\"));\n    assert(candidate((2), (3)) == (\"2\"));\n    assert(candidate((3),\
    \ (4)) == (\"3\"));\n    assert(candidate((4), (5)) == (\"4\"));\n    assert(candidate((5),\
    \ (6)) == (\"5\"));\n    assert(candidate((6), (7)) == (\"6\"));\n    assert(candidate((7),\
    \ (8)) == (\"7\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base(8, 3)\n// '22'\n// >>> change_base(8,\
    \ 2)\n// '1000'\n// >>> change_base(7, 2)\n// '111'\nstd::string change_base(long\
    \ x, long base) {\n    std::string ans = \"\";\n    while (x > 0) {\n        ans\
    \ += (char)(x % base);\n        x /= base;\n    }\n    return ans;\n}\nint main()\
    \ {\n    auto candidate = change_base;\n    assert(candidate((8), (3)) == (\"\
    22\"));\n    assert(candidate((9), (3)) == (\"100\"));\n    assert(candidate((234),\
    \ (2)) == (\"11101010\"));\n    assert(candidate((16), (2)) == (\"10000\"));\n\
    \    assert(candidate((8), (2)) == (\"1000\"));\n    assert(candidate((7), (2))\
    \ == (\"111\"));\n    assert(candidate((2), (3)) == (\"2\"));\n    assert(candidate((3),\
    \ (4)) == (\"3\"));\n    assert(candidate((4), (5)) == (\"4\"));\n    assert(candidate((5),\
    \ (6)) == (\"5\"));\n    assert(candidate((6), (7)) == (\"6\"));\n    assert(candidate((7),\
    \ (8)) == (\"7\"));\n}\n"
  stdout: ''
  stderr: "tmpqmsni9nt: /tmp/tmpqmsni9nt.cpp:22: int main(): Assertion `candidate((8),\
    \ (3)) == (\"22\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base(8, 3)\n// '22'\n// >>> change_base(8,\
    \ 2)\n// '1000'\n// >>> change_base(7, 2)\n// '111'\nstd::string change_base(long\
    \ x, long base) {\n    std::string ans = \"\";\n    long tmp = x;\n    while (base\
    \ > 0) {\n        tmp = tmp / base;\n        ans = std::to_string(tmp % base)\
    \ + ans;\n        base--;\n    }\n    return ans;\n}\nint main() {\n    auto candidate\
    \ = change_base;\n    assert(candidate((8), (3)) == (\"22\"));\n    assert(candidate((9),\
    \ (3)) == (\"100\"));\n    assert(candidate((234), (2)) == (\"11101010\"));\n\
    \    assert(candidate((16), (2)) == (\"10000\"));\n    assert(candidate((8), (2))\
    \ == (\"1000\"));\n    assert(candidate((7), (2)) == (\"111\"));\n    assert(candidate((2),\
    \ (3)) == (\"2\"));\n    assert(candidate((3), (4)) == (\"3\"));\n    assert(candidate((4),\
    \ (5)) == (\"4\"));\n    assert(candidate((5), (6)) == (\"5\"));\n    assert(candidate((6),\
    \ (7)) == (\"6\"));\n    assert(candidate((7), (8)) == (\"7\"));\n}\n"
  stdout: ''
  stderr: "tmpk7tqgkzo: /tmp/tmpk7tqgkzo.cpp:24: int main(): Assertion `candidate((8),\
    \ (3)) == (\"22\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base(8, 3)\n// '22'\n// >>> change_base(8,\
    \ 2)\n// '1000'\n// >>> change_base(7, 2)\n// '111'\nstd::string change_base(long\
    \ x, long base) {\n    std::string ans = \"\";\n    while (x > 0) {\n        int\
    \ digit = x % base;\n        ans += std::to_string(digit);\n        x /= base;\n\
    \    }\n    return ans;\n}\nint main() {\n    auto candidate = change_base;\n\
    \    assert(candidate((8), (3)) == (\"22\"));\n    assert(candidate((9), (3))\
    \ == (\"100\"));\n    assert(candidate((234), (2)) == (\"11101010\"));\n    assert(candidate((16),\
    \ (2)) == (\"10000\"));\n    assert(candidate((8), (2)) == (\"1000\"));\n    assert(candidate((7),\
    \ (2)) == (\"111\"));\n    assert(candidate((2), (3)) == (\"2\"));\n    assert(candidate((3),\
    \ (4)) == (\"3\"));\n    assert(candidate((4), (5)) == (\"4\"));\n    assert(candidate((5),\
    \ (6)) == (\"5\"));\n    assert(candidate((6), (7)) == (\"6\"));\n    assert(candidate((7),\
    \ (8)) == (\"7\"));\n}\n"
  stdout: ''
  stderr: "tmpaq8gvla6: /tmp/tmpaq8gvla6.cpp:24: int main(): Assertion `candidate((9),\
    \ (3)) == (\"100\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base(8, 3)\n// '22'\n// >>> change_base(8,\
    \ 2)\n// '1000'\n// >>> change_base(7, 2)\n// '111'\nstd::string change_base(long\
    \ x, long base) {\n    long rem = x % base;\n    std::string ans = \"\";\n   \
    \ while (x > 0) {\n        ans = std::to_string(x / base) + ans;\n        x -=\
    \ rem * base;\n        rem = x % base;\n    }\n    return ans;\n}\nint main()\
    \ {\n    auto candidate = change_base;\n    assert(candidate((8), (3)) == (\"\
    22\"));\n    assert(candidate((9), (3)) == (\"100\"));\n    assert(candidate((234),\
    \ (2)) == (\"11101010\"));\n    assert(candidate((16), (2)) == (\"10000\"));\n\
    \    assert(candidate((8), (2)) == (\"1000\"));\n    assert(candidate((7), (2))\
    \ == (\"111\"));\n    assert(candidate((2), (3)) == (\"2\"));\n    assert(candidate((3),\
    \ (4)) == (\"3\"));\n    assert(candidate((4), (5)) == (\"4\"));\n    assert(candidate((5),\
    \ (6)) == (\"5\"));\n    assert(candidate((6), (7)) == (\"6\"));\n    assert(candidate((7),\
    \ (8)) == (\"7\"));\n}\n"
  stdout: ''
  stderr: "tmpcyzx3xhp: /tmp/tmpcyzx3xhp.cpp:24: int main(): Assertion `candidate((8),\
    \ (3)) == (\"22\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base(8, 3)\n// '22'\n// >>> change_base(8,\
    \ 2)\n// '1000'\n// >>> change_base(7, 2)\n// '111'\nstd::string change_base(long\
    \ x, long base) {\n    std::string ans = \"\";\n    long tmp = x;\n    while (base\
    \ > 0) {\n        tmp = tmp / base;\n        ans = std::to_string(tmp) + ans;\n\
    \        base--;\n    }\n    while (base < 0) {\n        tmp = tmp * base;\n \
    \       ans = std::to_string(tmp) + ans;\n        base++;\n    }\n    return ans;\n\
    }\nint main() {\n    auto candidate = change_base;\n    assert(candidate((8),\
    \ (3)) == (\"22\"));\n    assert(candidate((9), (3)) == (\"100\"));\n    assert(candidate((234),\
    \ (2)) == (\"11101010\"));\n    assert(candidate((16), (2)) == (\"10000\"));\n\
    \    assert(candidate((8), (2)) == (\"1000\"));\n    assert(candidate((7), (2))\
    \ == (\"111\"));\n    assert(candidate((2), (3)) == (\"2\"));\n    assert(candidate((3),\
    \ (4)) == (\"3\"));\n    assert(candidate((4), (5)) == (\"4\"));\n    assert(candidate((5),\
    \ (6)) == (\"5\"));\n    assert(candidate((6), (7)) == (\"6\"));\n    assert(candidate((7),\
    \ (8)) == (\"7\"));\n}\n"
  stdout: ''
  stderr: "tmpnt2qarky: /tmp/tmpnt2qarky.cpp:29: int main(): Assertion `candidate((8),\
    \ (3)) == (\"22\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base(8, 3)\n// '22'\n// >>> change_base(8,\
    \ 2)\n// '1000'\n// >>> change_base(7, 2)\n// '111'\nstd::string change_base(long\
    \ x, long base) {\n    std::string ans = \"\";\n    long temp = x;\n    while\
    \ (temp > 0) {\n        long rem = temp % base;\n        ans = std::to_string(rem)\
    \ + ans;\n        temp = temp / base;\n    }\n    return ans;\n}\nint main() {\n\
    \    auto candidate = change_base;\n    assert(candidate((8), (3)) == (\"22\"\
    ));\n    assert(candidate((9), (3)) == (\"100\"));\n    assert(candidate((234),\
    \ (2)) == (\"11101010\"));\n    assert(candidate((16), (2)) == (\"10000\"));\n\
    \    assert(candidate((8), (2)) == (\"1000\"));\n    assert(candidate((7), (2))\
    \ == (\"111\"));\n    assert(candidate((2), (3)) == (\"2\"));\n    assert(candidate((3),\
    \ (4)) == (\"3\"));\n    assert(candidate((4), (5)) == (\"4\"));\n    assert(candidate((5),\
    \ (6)) == (\"5\"));\n    assert(candidate((6), (7)) == (\"6\"));\n    assert(candidate((7),\
    \ (8)) == (\"7\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base(8, 3)\n// '22'\n// >>> change_base(8,\
    \ 2)\n// '1000'\n// >>> change_base(7, 2)\n// '111'\nstd::string change_base(long\
    \ x, long base) {\n    std::string res;\n    while (x > 0) {\n        res.push_back((x\
    \ % base) + '0');\n        x /= base;\n    }\n    res.push_back((x % base) + '0');\n\
    \    return res;\n}\nint main() {\n    auto candidate = change_base;\n    assert(candidate((8),\
    \ (3)) == (\"22\"));\n    assert(candidate((9), (3)) == (\"100\"));\n    assert(candidate((234),\
    \ (2)) == (\"11101010\"));\n    assert(candidate((16), (2)) == (\"10000\"));\n\
    \    assert(candidate((8), (2)) == (\"1000\"));\n    assert(candidate((7), (2))\
    \ == (\"111\"));\n    assert(candidate((2), (3)) == (\"2\"));\n    assert(candidate((3),\
    \ (4)) == (\"3\"));\n    assert(candidate((4), (5)) == (\"4\"));\n    assert(candidate((5),\
    \ (6)) == (\"5\"));\n    assert(candidate((6), (7)) == (\"6\"));\n    assert(candidate((7),\
    \ (8)) == (\"7\"));\n}\n"
  stdout: ''
  stderr: "tmpqnggqegn: /tmp/tmpqnggqegn.cpp:23: int main(): Assertion `candidate((8),\
    \ (3)) == (\"22\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base(8, 3)\n// '22'\n// >>> change_base(8,\
    \ 2)\n// '1000'\n// >>> change_base(7, 2)\n// '111'\nstd::string change_base(long\
    \ x, long base) {\n    std::string ans = \"\";\n    long tmp = x;\n    while (base\
    \ > 0) {\n        tmp = tmp / base;\n        ans = std::to_string(tmp % base)\
    \ + ans;\n        base--;\n    }\n    return ans;\n}\nint main() {\n    auto candidate\
    \ = change_base;\n    assert(candidate((8), (3)) == (\"22\"));\n    assert(candidate((9),\
    \ (3)) == (\"100\"));\n    assert(candidate((234), (2)) == (\"11101010\"));\n\
    \    assert(candidate((16), (2)) == (\"10000\"));\n    assert(candidate((8), (2))\
    \ == (\"1000\"));\n    assert(candidate((7), (2)) == (\"111\"));\n    assert(candidate((2),\
    \ (3)) == (\"2\"));\n    assert(candidate((3), (4)) == (\"3\"));\n    assert(candidate((4),\
    \ (5)) == (\"4\"));\n    assert(candidate((5), (6)) == (\"5\"));\n    assert(candidate((6),\
    \ (7)) == (\"6\"));\n    assert(candidate((7), (8)) == (\"7\"));\n}\n"
  stdout: ''
  stderr: "tmpeivljxs1: /tmp/tmpeivljxs1.cpp:24: int main(): Assertion `candidate((8),\
    \ (3)) == (\"22\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base(8, 3)\n// '22'\n// >>> change_base(8,\
    \ 2)\n// '1000'\n// >>> change_base(7, 2)\n// '111'\nstd::string change_base(long\
    \ x, long base) {\n    std::string ans = \"\";\n    while (x != 0) {\n       \
    \ int rem = x % base;\n        ans = std::to_string(base) + ans;\n        x =\
    \ x / base;\n    }\n    return ans;\n}\nint main() {\n    auto candidate = change_base;\n\
    \    assert(candidate((8), (3)) == (\"22\"));\n    assert(candidate((9), (3))\
    \ == (\"100\"));\n    assert(candidate((234), (2)) == (\"11101010\"));\n    assert(candidate((16),\
    \ (2)) == (\"10000\"));\n    assert(candidate((8), (2)) == (\"1000\"));\n    assert(candidate((7),\
    \ (2)) == (\"111\"));\n    assert(candidate((2), (3)) == (\"2\"));\n    assert(candidate((3),\
    \ (4)) == (\"3\"));\n    assert(candidate((4), (5)) == (\"4\"));\n    assert(candidate((5),\
    \ (6)) == (\"5\"));\n    assert(candidate((6), (7)) == (\"6\"));\n    assert(candidate((7),\
    \ (8)) == (\"7\"));\n}\n"
  stdout: ''
  stderr: "tmpgb66yp5a: /tmp/tmpgb66yp5a.cpp:23: int main(): Assertion `candidate((8),\
    \ (3)) == (\"22\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base(8, 3)\n// '22'\n// >>> change_base(8,\
    \ 2)\n// '1000'\n// >>> change_base(7, 2)\n// '111'\nstd::string change_base(long\
    \ x, long base) {\n    std::string ans = \"\";\n    while (x > 0) {\n        long\
    \ r = x % base;\n        ans = std::to_string(r) + ans;\n        x = x / base;\n\
    \    }\n    return ans;\n}\nint main() {\n    auto candidate = change_base;\n\
    \    assert(candidate((8), (3)) == (\"22\"));\n    assert(candidate((9), (3))\
    \ == (\"100\"));\n    assert(candidate((234), (2)) == (\"11101010\"));\n    assert(candidate((16),\
    \ (2)) == (\"10000\"));\n    assert(candidate((8), (2)) == (\"1000\"));\n    assert(candidate((7),\
    \ (2)) == (\"111\"));\n    assert(candidate((2), (3)) == (\"2\"));\n    assert(candidate((3),\
    \ (4)) == (\"3\"));\n    assert(candidate((4), (5)) == (\"4\"));\n    assert(candidate((5),\
    \ (6)) == (\"5\"));\n    assert(candidate((6), (7)) == (\"6\"));\n    assert(candidate((7),\
    \ (8)) == (\"7\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base(8, 3)\n// '22'\n// >>> change_base(8,\
    \ 2)\n// '1000'\n// >>> change_base(7, 2)\n// '111'\nstd::string change_base(long\
    \ x, long base) {\n    std::string ans = \"\";\n    while (x != 0) {\n       \
    \ long r = x % base;\n        ans = std::to_string(r) + ans;\n        x = x /\
    \ base;\n    }\n    return ans;\n}\nint main() {\n    auto candidate = change_base;\n\
    \    assert(candidate((8), (3)) == (\"22\"));\n    assert(candidate((9), (3))\
    \ == (\"100\"));\n    assert(candidate((234), (2)) == (\"11101010\"));\n    assert(candidate((16),\
    \ (2)) == (\"10000\"));\n    assert(candidate((8), (2)) == (\"1000\"));\n    assert(candidate((7),\
    \ (2)) == (\"111\"));\n    assert(candidate((2), (3)) == (\"2\"));\n    assert(candidate((3),\
    \ (4)) == (\"3\"));\n    assert(candidate((4), (5)) == (\"4\"));\n    assert(candidate((5),\
    \ (6)) == (\"5\"));\n    assert(candidate((6), (7)) == (\"6\"));\n    assert(candidate((7),\
    \ (8)) == (\"7\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base(8, 3)\n// '22'\n// >>> change_base(8,\
    \ 2)\n// '1000'\n// >>> change_base(7, 2)\n// '111'\nstd::string change_base(long\
    \ x, long base) {\n    std::string ans = \"\";\n    long temp = x;\n    while\
    \ (temp > 0) {\n        int digit = temp % base;\n        ans = std::to_string(digit)\
    \ + ans;\n        temp = temp / base;\n    }\n    return ans;\n}\nint main() {\n\
    \    auto candidate = change_base;\n    assert(candidate((8), (3)) == (\"22\"\
    ));\n    assert(candidate((9), (3)) == (\"100\"));\n    assert(candidate((234),\
    \ (2)) == (\"11101010\"));\n    assert(candidate((16), (2)) == (\"10000\"));\n\
    \    assert(candidate((8), (2)) == (\"1000\"));\n    assert(candidate((7), (2))\
    \ == (\"111\"));\n    assert(candidate((2), (3)) == (\"2\"));\n    assert(candidate((3),\
    \ (4)) == (\"3\"));\n    assert(candidate((4), (5)) == (\"4\"));\n    assert(candidate((5),\
    \ (6)) == (\"5\"));\n    assert(candidate((6), (7)) == (\"6\"));\n    assert(candidate((7),\
    \ (8)) == (\"7\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base(8, 3)\n// '22'\n// >>> change_base(8,\
    \ 2)\n// '1000'\n// >>> change_base(7, 2)\n// '111'\nstd::string change_base(long\
    \ x, long base) {\n    std::string ans = \"\";\n    while (x > 0) {\n        ans\
    \ += (char)(x % base);\n        x /= base;\n    }\n    return ans;\n}\nint main()\
    \ {\n    auto candidate = change_base;\n    assert(candidate((8), (3)) == (\"\
    22\"));\n    assert(candidate((9), (3)) == (\"100\"));\n    assert(candidate((234),\
    \ (2)) == (\"11101010\"));\n    assert(candidate((16), (2)) == (\"10000\"));\n\
    \    assert(candidate((8), (2)) == (\"1000\"));\n    assert(candidate((7), (2))\
    \ == (\"111\"));\n    assert(candidate((2), (3)) == (\"2\"));\n    assert(candidate((3),\
    \ (4)) == (\"3\"));\n    assert(candidate((4), (5)) == (\"4\"));\n    assert(candidate((5),\
    \ (6)) == (\"5\"));\n    assert(candidate((6), (7)) == (\"6\"));\n    assert(candidate((7),\
    \ (8)) == (\"7\"));\n}\n"
  stdout: ''
  stderr: "tmpx6_v0oh0: /tmp/tmpx6_v0oh0.cpp:22: int main(): Assertion `candidate((8),\
    \ (3)) == (\"22\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base(8, 3)\n// '22'\n// >>> change_base(8,\
    \ 2)\n// '1000'\n// >>> change_base(7, 2)\n// '111'\nstd::string change_base(long\
    \ x, long base) {\n    long n = x;\n    std::string ans = \"\";\n    while (n\
    \ > 0) {\n        ans = std::to_string(n % base) + ans;\n        n = n / base;\n\
    \    }\n    return ans;\n}\nint main() {\n    auto candidate = change_base;\n\
    \    assert(candidate((8), (3)) == (\"22\"));\n    assert(candidate((9), (3))\
    \ == (\"100\"));\n    assert(candidate((234), (2)) == (\"11101010\"));\n    assert(candidate((16),\
    \ (2)) == (\"10000\"));\n    assert(candidate((8), (2)) == (\"1000\"));\n    assert(candidate((7),\
    \ (2)) == (\"111\"));\n    assert(candidate((2), (3)) == (\"2\"));\n    assert(candidate((3),\
    \ (4)) == (\"3\"));\n    assert(candidate((4), (5)) == (\"4\"));\n    assert(candidate((5),\
    \ (6)) == (\"5\"));\n    assert(candidate((6), (7)) == (\"6\"));\n    assert(candidate((7),\
    \ (8)) == (\"7\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base(8, 3)\n// '22'\n// >>> change_base(8,\
    \ 2)\n// '1000'\n// >>> change_base(7, 2)\n// '111'\nstd::string change_base(long\
    \ x, long base) {\n    std::string ans = \"\";\n    while (x > 0) {\n        ans\
    \ += (char)(x % base);\n        x /= base;\n    }\n    return ans;\n}\nint main()\
    \ {\n    auto candidate = change_base;\n    assert(candidate((8), (3)) == (\"\
    22\"));\n    assert(candidate((9), (3)) == (\"100\"));\n    assert(candidate((234),\
    \ (2)) == (\"11101010\"));\n    assert(candidate((16), (2)) == (\"10000\"));\n\
    \    assert(candidate((8), (2)) == (\"1000\"));\n    assert(candidate((7), (2))\
    \ == (\"111\"));\n    assert(candidate((2), (3)) == (\"2\"));\n    assert(candidate((3),\
    \ (4)) == (\"3\"));\n    assert(candidate((4), (5)) == (\"4\"));\n    assert(candidate((5),\
    \ (6)) == (\"5\"));\n    assert(candidate((6), (7)) == (\"6\"));\n    assert(candidate((7),\
    \ (8)) == (\"7\"));\n}\n"
  stdout: ''
  stderr: "tmpwmsvs44u: /tmp/tmpwmsvs44u.cpp:22: int main(): Assertion `candidate((8),\
    \ (3)) == (\"22\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base(8, 3)\n// '22'\n// >>> change_base(8,\
    \ 2)\n// '1000'\n// >>> change_base(7, 2)\n// '111'\nstd::string change_base(long\
    \ x, long base) {\n    std::string ans = \"\";\n    long n = x;\n    while (n\
    \ > 0) {\n        ans += n % base;\n        n /= base;\n    }\n    return ans;\n\
    }\nint main() {\n    auto candidate = change_base;\n    assert(candidate((8),\
    \ (3)) == (\"22\"));\n    assert(candidate((9), (3)) == (\"100\"));\n    assert(candidate((234),\
    \ (2)) == (\"11101010\"));\n    assert(candidate((16), (2)) == (\"10000\"));\n\
    \    assert(candidate((8), (2)) == (\"1000\"));\n    assert(candidate((7), (2))\
    \ == (\"111\"));\n    assert(candidate((2), (3)) == (\"2\"));\n    assert(candidate((3),\
    \ (4)) == (\"3\"));\n    assert(candidate((4), (5)) == (\"4\"));\n    assert(candidate((5),\
    \ (6)) == (\"5\"));\n    assert(candidate((6), (7)) == (\"6\"));\n    assert(candidate((7),\
    \ (8)) == (\"7\"));\n}\n"
  stdout: ''
  stderr: "tmp9p08wv66: /tmp/tmp9p08wv66.cpp:23: int main(): Assertion `candidate((8),\
    \ (3)) == (\"22\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base(8, 3)\n// '22'\n// >>> change_base(8,\
    \ 2)\n// '1000'\n// >>> change_base(7, 2)\n// '111'\nstd::string change_base(long\
    \ x, long base) {\n    std::string ans = \"\";\n    long temp = 0;\n    while\
    \ (x > 0) {\n        temp = x % base;\n        ans = std::to_string(temp) + ans;\n\
    \        x = x / base;\n    }\n    return ans;\n}\nint main() {\n    auto candidate\
    \ = change_base;\n    assert(candidate((8), (3)) == (\"22\"));\n    assert(candidate((9),\
    \ (3)) == (\"100\"));\n    assert(candidate((234), (2)) == (\"11101010\"));\n\
    \    assert(candidate((16), (2)) == (\"10000\"));\n    assert(candidate((8), (2))\
    \ == (\"1000\"));\n    assert(candidate((7), (2)) == (\"111\"));\n    assert(candidate((2),\
    \ (3)) == (\"2\"));\n    assert(candidate((3), (4)) == (\"3\"));\n    assert(candidate((4),\
    \ (5)) == (\"4\"));\n    assert(candidate((5), (6)) == (\"5\"));\n    assert(candidate((6),\
    \ (7)) == (\"6\"));\n    assert(candidate((7), (8)) == (\"7\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base(8, 3)\n// '22'\n// >>> change_base(8,\
    \ 2)\n// '1000'\n// >>> change_base(7, 2)\n// '111'\nstd::string change_base(long\
    \ x, long base) {\n    std::string ans = \"\";\n    long temp = x;\n    while\
    \ (temp != 0) {\n        ans += (temp % base);\n        temp /= base;\n    }\n\
    \    return ans;\n}\nint main() {\n    auto candidate = change_base;\n    assert(candidate((8),\
    \ (3)) == (\"22\"));\n    assert(candidate((9), (3)) == (\"100\"));\n    assert(candidate((234),\
    \ (2)) == (\"11101010\"));\n    assert(candidate((16), (2)) == (\"10000\"));\n\
    \    assert(candidate((8), (2)) == (\"1000\"));\n    assert(candidate((7), (2))\
    \ == (\"111\"));\n    assert(candidate((2), (3)) == (\"2\"));\n    assert(candidate((3),\
    \ (4)) == (\"3\"));\n    assert(candidate((4), (5)) == (\"4\"));\n    assert(candidate((5),\
    \ (6)) == (\"5\"));\n    assert(candidate((6), (7)) == (\"6\"));\n    assert(candidate((7),\
    \ (8)) == (\"7\"));\n}\n"
  stdout: ''
  stderr: "tmpj58qlxls: /tmp/tmpj58qlxls.cpp:23: int main(): Assertion `candidate((8),\
    \ (3)) == (\"22\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base(8, 3)\n// '22'\n// >>> change_base(8,\
    \ 2)\n// '1000'\n// >>> change_base(7, 2)\n// '111'\nstd::string change_base(long\
    \ x, long base) {\n    std::string ans = \"\";\n    long temp = x;\n    while\
    \ (temp != 0) {\n        ans += (temp % base);\n        temp /= base;\n    }\n\
    \    return ans;\n}\nint main() {\n    auto candidate = change_base;\n    assert(candidate((8),\
    \ (3)) == (\"22\"));\n    assert(candidate((9), (3)) == (\"100\"));\n    assert(candidate((234),\
    \ (2)) == (\"11101010\"));\n    assert(candidate((16), (2)) == (\"10000\"));\n\
    \    assert(candidate((8), (2)) == (\"1000\"));\n    assert(candidate((7), (2))\
    \ == (\"111\"));\n    assert(candidate((2), (3)) == (\"2\"));\n    assert(candidate((3),\
    \ (4)) == (\"3\"));\n    assert(candidate((4), (5)) == (\"4\"));\n    assert(candidate((5),\
    \ (6)) == (\"5\"));\n    assert(candidate((6), (7)) == (\"6\"));\n    assert(candidate((7),\
    \ (8)) == (\"7\"));\n}\n"
  stdout: ''
  stderr: "tmp1l5hy6vo: /tmp/tmp1l5hy6vo.cpp:23: int main(): Assertion `candidate((8),\
    \ (3)) == (\"22\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base(8, 3)\n// '22'\n// >>> change_base(8,\
    \ 2)\n// '1000'\n// >>> change_base(7, 2)\n// '111'\nstd::string change_base(long\
    \ x, long base) {\n    std::string ans = \"\";\n    long temp = x;\n    while\
    \ (temp != 0) {\n        int digit = temp % base;\n        ans += digit;\n   \
    \     temp /= base;\n    }\n    return ans;\n}\nint main() {\n    auto candidate\
    \ = change_base;\n    assert(candidate((8), (3)) == (\"22\"));\n    assert(candidate((9),\
    \ (3)) == (\"100\"));\n    assert(candidate((234), (2)) == (\"11101010\"));\n\
    \    assert(candidate((16), (2)) == (\"10000\"));\n    assert(candidate((8), (2))\
    \ == (\"1000\"));\n    assert(candidate((7), (2)) == (\"111\"));\n    assert(candidate((2),\
    \ (3)) == (\"2\"));\n    assert(candidate((3), (4)) == (\"3\"));\n    assert(candidate((4),\
    \ (5)) == (\"4\"));\n    assert(candidate((5), (6)) == (\"5\"));\n    assert(candidate((6),\
    \ (7)) == (\"6\"));\n    assert(candidate((7), (8)) == (\"7\"));\n}\n"
  stdout: ''
  stderr: "tmpmhwp81ui: /tmp/tmpmhwp81ui.cpp:24: int main(): Assertion `candidate((8),\
    \ (3)) == (\"22\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base(8, 3)\n// '22'\n// >>> change_base(8,\
    \ 2)\n// '1000'\n// >>> change_base(7, 2)\n// '111'\nstd::string change_base(long\
    \ x, long base) {\n    std::string ans = \"\";\n    long tmp = x;\n    while (base\
    \ > 0) {\n        tmp = tmp / base;\n        ans = std::to_string(tmp % base)\
    \ + ans;\n        base--;\n    }\n    while (base < 0) {\n        tmp = tmp *\
    \ base;\n        ans = std::to_string(tmp % base) + ans;\n        base++;\n  \
    \  }\n    return ans;\n}\nint main() {\n    auto candidate = change_base;\n  \
    \  assert(candidate((8), (3)) == (\"22\"));\n    assert(candidate((9), (3)) ==\
    \ (\"100\"));\n    assert(candidate((234), (2)) == (\"11101010\"));\n    assert(candidate((16),\
    \ (2)) == (\"10000\"));\n    assert(candidate((8), (2)) == (\"1000\"));\n    assert(candidate((7),\
    \ (2)) == (\"111\"));\n    assert(candidate((2), (3)) == (\"2\"));\n    assert(candidate((3),\
    \ (4)) == (\"3\"));\n    assert(candidate((4), (5)) == (\"4\"));\n    assert(candidate((5),\
    \ (6)) == (\"5\"));\n    assert(candidate((6), (7)) == (\"6\"));\n    assert(candidate((7),\
    \ (8)) == (\"7\"));\n}\n"
  stdout: ''
  stderr: "tmp8s5s18a1: /tmp/tmp8s5s18a1.cpp:29: int main(): Assertion `candidate((8),\
    \ (3)) == (\"22\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base(8, 3)\n// '22'\n// >>> change_base(8,\
    \ 2)\n// '1000'\n// >>> change_base(7, 2)\n// '111'\nstd::string change_base(long\
    \ x, long base) {\n    std::string ans = \"\";\n    long tmp = x;\n    while (base\
    \ > 0) {\n        tmp = tmp / base;\n        ans = std::to_string(tmp % base)\
    \ + ans;\n        base--;\n    }\n    return ans;\n}\nint main() {\n    auto candidate\
    \ = change_base;\n    assert(candidate((8), (3)) == (\"22\"));\n    assert(candidate((9),\
    \ (3)) == (\"100\"));\n    assert(candidate((234), (2)) == (\"11101010\"));\n\
    \    assert(candidate((16), (2)) == (\"10000\"));\n    assert(candidate((8), (2))\
    \ == (\"1000\"));\n    assert(candidate((7), (2)) == (\"111\"));\n    assert(candidate((2),\
    \ (3)) == (\"2\"));\n    assert(candidate((3), (4)) == (\"3\"));\n    assert(candidate((4),\
    \ (5)) == (\"4\"));\n    assert(candidate((5), (6)) == (\"5\"));\n    assert(candidate((6),\
    \ (7)) == (\"6\"));\n    assert(candidate((7), (8)) == (\"7\"));\n}\n"
  stdout: ''
  stderr: "tmpjezjclwf: /tmp/tmpjezjclwf.cpp:24: int main(): Assertion `candidate((8),\
    \ (3)) == (\"22\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base(8, 3)\n// '22'\n// >>> change_base(8,\
    \ 2)\n// '1000'\n// >>> change_base(7, 2)\n// '111'\nstd::string change_base(long\
    \ x, long base) {\n    std::string ans = \"\";\n    long temp = x;\n    while\
    \ (temp > 0) {\n        int rem = temp % base;\n        ans = std::to_string(rem)\
    \ + ans;\n        temp = temp / base;\n    }\n    return ans;\n}\nint main() {\n\
    \    auto candidate = change_base;\n    assert(candidate((8), (3)) == (\"22\"\
    ));\n    assert(candidate((9), (3)) == (\"100\"));\n    assert(candidate((234),\
    \ (2)) == (\"11101010\"));\n    assert(candidate((16), (2)) == (\"10000\"));\n\
    \    assert(candidate((8), (2)) == (\"1000\"));\n    assert(candidate((7), (2))\
    \ == (\"111\"));\n    assert(candidate((2), (3)) == (\"2\"));\n    assert(candidate((3),\
    \ (4)) == (\"3\"));\n    assert(candidate((4), (5)) == (\"4\"));\n    assert(candidate((5),\
    \ (6)) == (\"5\"));\n    assert(candidate((6), (7)) == (\"6\"));\n    assert(candidate((7),\
    \ (8)) == (\"7\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base(8, 3)\n// '22'\n// >>> change_base(8,\
    \ 2)\n// '1000'\n// >>> change_base(7, 2)\n// '111'\nstd::string change_base(long\
    \ x, long base) {\n    std::string ans = \"\";\n    long tmp = x;\n    while (base\
    \ > 0) {\n        tmp = tmp / base;\n        ans = std::to_string(tmp % base)\
    \ + ans;\n        base--;\n    }\n    return ans;\n}\nint main() {\n    auto candidate\
    \ = change_base;\n    assert(candidate((8), (3)) == (\"22\"));\n    assert(candidate((9),\
    \ (3)) == (\"100\"));\n    assert(candidate((234), (2)) == (\"11101010\"));\n\
    \    assert(candidate((16), (2)) == (\"10000\"));\n    assert(candidate((8), (2))\
    \ == (\"1000\"));\n    assert(candidate((7), (2)) == (\"111\"));\n    assert(candidate((2),\
    \ (3)) == (\"2\"));\n    assert(candidate((3), (4)) == (\"3\"));\n    assert(candidate((4),\
    \ (5)) == (\"4\"));\n    assert(candidate((5), (6)) == (\"5\"));\n    assert(candidate((6),\
    \ (7)) == (\"6\"));\n    assert(candidate((7), (8)) == (\"7\"));\n}\n"
  stdout: ''
  stderr: "tmp76poqk0q: /tmp/tmp76poqk0q.cpp:24: int main(): Assertion `candidate((8),\
    \ (3)) == (\"22\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base(8, 3)\n// '22'\n// >>> change_base(8,\
    \ 2)\n// '1000'\n// >>> change_base(7, 2)\n// '111'\nstd::string change_base(long\
    \ x, long base) {\n    long tmp = x;\n    std::string ans = \"\";\n    while (base)\
    \ {\n        tmp = tmp / base;\n        ans = std::to_string(tmp % base) + ans;\n\
    \        base--;\n    }\n    return ans;\n}\nint main() {\n    auto candidate\
    \ = change_base;\n    assert(candidate((8), (3)) == (\"22\"));\n    assert(candidate((9),\
    \ (3)) == (\"100\"));\n    assert(candidate((234), (2)) == (\"11101010\"));\n\
    \    assert(candidate((16), (2)) == (\"10000\"));\n    assert(candidate((8), (2))\
    \ == (\"1000\"));\n    assert(candidate((7), (2)) == (\"111\"));\n    assert(candidate((2),\
    \ (3)) == (\"2\"));\n    assert(candidate((3), (4)) == (\"3\"));\n    assert(candidate((4),\
    \ (5)) == (\"4\"));\n    assert(candidate((5), (6)) == (\"5\"));\n    assert(candidate((6),\
    \ (7)) == (\"6\"));\n    assert(candidate((7), (8)) == (\"7\"));\n}\n"
  stdout: ''
  stderr: "tmpc6hu5qho: /tmp/tmpc6hu5qho.cpp:24: int main(): Assertion `candidate((8),\
    \ (3)) == (\"22\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base(8, 3)\n// '22'\n// >>> change_base(8,\
    \ 2)\n// '1000'\n// >>> change_base(7, 2)\n// '111'\nstd::string change_base(long\
    \ x, long base) {\n    std::string ans = \"\";\n    long temp = x;\n    while\
    \ (temp != 0) {\n        int digit = temp % base;\n        ans += digit;\n   \
    \     temp /= base;\n    }\n    return ans;\n}\nint main() {\n    auto candidate\
    \ = change_base;\n    assert(candidate((8), (3)) == (\"22\"));\n    assert(candidate((9),\
    \ (3)) == (\"100\"));\n    assert(candidate((234), (2)) == (\"11101010\"));\n\
    \    assert(candidate((16), (2)) == (\"10000\"));\n    assert(candidate((8), (2))\
    \ == (\"1000\"));\n    assert(candidate((7), (2)) == (\"111\"));\n    assert(candidate((2),\
    \ (3)) == (\"2\"));\n    assert(candidate((3), (4)) == (\"3\"));\n    assert(candidate((4),\
    \ (5)) == (\"4\"));\n    assert(candidate((5), (6)) == (\"5\"));\n    assert(candidate((6),\
    \ (7)) == (\"6\"));\n    assert(candidate((7), (8)) == (\"7\"));\n}\n"
  stdout: ''
  stderr: "tmpowcm8xuh: /tmp/tmpowcm8xuh.cpp:24: int main(): Assertion `candidate((8),\
    \ (3)) == (\"22\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base(8, 3)\n// '22'\n// >>> change_base(8,\
    \ 2)\n// '1000'\n// >>> change_base(7, 2)\n// '111'\nstd::string change_base(long\
    \ x, long base) {\n    std::string ans = \"\";\n    long temp = x;\n    while\
    \ (temp > 0) {\n        int rem = temp % base;\n        ans += std::to_string(base);\n\
    \        temp = temp / base;\n        ans += std::to_string(rem);\n    }\n   \
    \ return ans;\n}\nint main() {\n    auto candidate = change_base;\n    assert(candidate((8),\
    \ (3)) == (\"22\"));\n    assert(candidate((9), (3)) == (\"100\"));\n    assert(candidate((234),\
    \ (2)) == (\"11101010\"));\n    assert(candidate((16), (2)) == (\"10000\"));\n\
    \    assert(candidate((8), (2)) == (\"1000\"));\n    assert(candidate((7), (2))\
    \ == (\"111\"));\n    assert(candidate((2), (3)) == (\"2\"));\n    assert(candidate((3),\
    \ (4)) == (\"3\"));\n    assert(candidate((4), (5)) == (\"4\"));\n    assert(candidate((5),\
    \ (6)) == (\"5\"));\n    assert(candidate((6), (7)) == (\"6\"));\n    assert(candidate((7),\
    \ (8)) == (\"7\"));\n}\n"
  stdout: ''
  stderr: "tmpvba6hmvs: /tmp/tmpvba6hmvs.cpp:25: int main(): Assertion `candidate((8),\
    \ (3)) == (\"22\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base(8, 3)\n// '22'\n// >>> change_base(8,\
    \ 2)\n// '1000'\n// >>> change_base(7, 2)\n// '111'\nstd::string change_base(long\
    \ x, long base) {\n    std::string ans = \"\";\n    long tmp = x;\n    while (base\
    \ > 0) {\n        tmp = tmp / base;\n        ans = std::to_string(tmp) + ans;\n\
    \        base--;\n    }\n    return ans;\n}\nint main() {\n    auto candidate\
    \ = change_base;\n    assert(candidate((8), (3)) == (\"22\"));\n    assert(candidate((9),\
    \ (3)) == (\"100\"));\n    assert(candidate((234), (2)) == (\"11101010\"));\n\
    \    assert(candidate((16), (2)) == (\"10000\"));\n    assert(candidate((8), (2))\
    \ == (\"1000\"));\n    assert(candidate((7), (2)) == (\"111\"));\n    assert(candidate((2),\
    \ (3)) == (\"2\"));\n    assert(candidate((3), (4)) == (\"3\"));\n    assert(candidate((4),\
    \ (5)) == (\"4\"));\n    assert(candidate((5), (6)) == (\"5\"));\n    assert(candidate((6),\
    \ (7)) == (\"6\"));\n    assert(candidate((7), (8)) == (\"7\"));\n}\n"
  stdout: ''
  stderr: "tmpau9wl2vj: /tmp/tmpau9wl2vj.cpp:24: int main(): Assertion `candidate((8),\
    \ (3)) == (\"22\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base(8, 3)\n// '22'\n// >>> change_base(8,\
    \ 2)\n// '1000'\n// >>> change_base(7, 2)\n// '111'\nstd::string change_base(long\
    \ x, long base) {\n    std::string ans = \"\";\n    while (x > 0) {\n        ans\
    \ += (char)(x % base);\n        x /= base;\n    }\n    return ans;\n}\nint main()\
    \ {\n    auto candidate = change_base;\n    assert(candidate((8), (3)) == (\"\
    22\"));\n    assert(candidate((9), (3)) == (\"100\"));\n    assert(candidate((234),\
    \ (2)) == (\"11101010\"));\n    assert(candidate((16), (2)) == (\"10000\"));\n\
    \    assert(candidate((8), (2)) == (\"1000\"));\n    assert(candidate((7), (2))\
    \ == (\"111\"));\n    assert(candidate((2), (3)) == (\"2\"));\n    assert(candidate((3),\
    \ (4)) == (\"3\"));\n    assert(candidate((4), (5)) == (\"4\"));\n    assert(candidate((5),\
    \ (6)) == (\"5\"));\n    assert(candidate((6), (7)) == (\"6\"));\n    assert(candidate((7),\
    \ (8)) == (\"7\"));\n}\n"
  stdout: ''
  stderr: "tmppid4x2p4: /tmp/tmppid4x2p4.cpp:22: int main(): Assertion `candidate((8),\
    \ (3)) == (\"22\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base(8, 3)\n// '22'\n// >>> change_base(8,\
    \ 2)\n// '1000'\n// >>> change_base(7, 2)\n// '111'\nstd::string change_base(long\
    \ x, long base) {\n    std::string ans = \"\";\n    long temp = x;\n    while\
    \ (temp != 0) {\n        ans += (temp % base);\n        temp /= base;\n    }\n\
    \    return ans;\n}\nint main() {\n    auto candidate = change_base;\n    assert(candidate((8),\
    \ (3)) == (\"22\"));\n    assert(candidate((9), (3)) == (\"100\"));\n    assert(candidate((234),\
    \ (2)) == (\"11101010\"));\n    assert(candidate((16), (2)) == (\"10000\"));\n\
    \    assert(candidate((8), (2)) == (\"1000\"));\n    assert(candidate((7), (2))\
    \ == (\"111\"));\n    assert(candidate((2), (3)) == (\"2\"));\n    assert(candidate((3),\
    \ (4)) == (\"3\"));\n    assert(candidate((4), (5)) == (\"4\"));\n    assert(candidate((5),\
    \ (6)) == (\"5\"));\n    assert(candidate((6), (7)) == (\"6\"));\n    assert(candidate((7),\
    \ (8)) == (\"7\"));\n}\n"
  stdout: ''
  stderr: "tmp3scu5n2q: /tmp/tmp3scu5n2q.cpp:23: int main(): Assertion `candidate((8),\
    \ (3)) == (\"22\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base(8, 3)\n// '22'\n// >>> change_base(8,\
    \ 2)\n// '1000'\n// >>> change_base(7, 2)\n// '111'\nstd::string change_base(long\
    \ x, long base) {\n    long res = 0;\n    while (x > 0) {\n        res *= base;\n\
    \        res += x % base;\n        x /= base;\n    }\n    return std::to_string(res);\n\
    }\nint main() {\n    auto candidate = change_base;\n    assert(candidate((8),\
    \ (3)) == (\"22\"));\n    assert(candidate((9), (3)) == (\"100\"));\n    assert(candidate((234),\
    \ (2)) == (\"11101010\"));\n    assert(candidate((16), (2)) == (\"10000\"));\n\
    \    assert(candidate((8), (2)) == (\"1000\"));\n    assert(candidate((7), (2))\
    \ == (\"111\"));\n    assert(candidate((2), (3)) == (\"2\"));\n    assert(candidate((3),\
    \ (4)) == (\"3\"));\n    assert(candidate((4), (5)) == (\"4\"));\n    assert(candidate((5),\
    \ (6)) == (\"5\"));\n    assert(candidate((6), (7)) == (\"6\"));\n    assert(candidate((7),\
    \ (8)) == (\"7\"));\n}\n"
  stdout: ''
  stderr: "tmpi9xjnbl4: /tmp/tmpi9xjnbl4.cpp:23: int main(): Assertion `candidate((8),\
    \ (3)) == (\"22\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base(8, 3)\n// '22'\n// >>> change_base(8,\
    \ 2)\n// '1000'\n// >>> change_base(7, 2)\n// '111'\nstd::string change_base(long\
    \ x, long base) {\n    std::string ans = \"\";\n    while (x != 0) {\n       \
    \ int r = x % base;\n        ans = std::to_string(r) + ans;\n        x = x / base;\n\
    \    }\n    return ans;\n}\nint main() {\n    auto candidate = change_base;\n\
    \    assert(candidate((8), (3)) == (\"22\"));\n    assert(candidate((9), (3))\
    \ == (\"100\"));\n    assert(candidate((234), (2)) == (\"11101010\"));\n    assert(candidate((16),\
    \ (2)) == (\"10000\"));\n    assert(candidate((8), (2)) == (\"1000\"));\n    assert(candidate((7),\
    \ (2)) == (\"111\"));\n    assert(candidate((2), (3)) == (\"2\"));\n    assert(candidate((3),\
    \ (4)) == (\"3\"));\n    assert(candidate((4), (5)) == (\"4\"));\n    assert(candidate((5),\
    \ (6)) == (\"5\"));\n    assert(candidate((6), (7)) == (\"6\"));\n    assert(candidate((7),\
    \ (8)) == (\"7\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base(8, 3)\n// '22'\n// >>> change_base(8,\
    \ 2)\n// '1000'\n// >>> change_base(7, 2)\n// '111'\nstd::string change_base(long\
    \ x, long base) {\n    std::string ans = \"\";\n    long temp = x;\n    while\
    \ (temp > 0) {\n        int rem = temp % base;\n        ans = std::to_string(rem)\
    \ + ans;\n        temp = temp / base;\n    }\n    return ans;\n}\nint main() {\n\
    \    auto candidate = change_base;\n    assert(candidate((8), (3)) == (\"22\"\
    ));\n    assert(candidate((9), (3)) == (\"100\"));\n    assert(candidate((234),\
    \ (2)) == (\"11101010\"));\n    assert(candidate((16), (2)) == (\"10000\"));\n\
    \    assert(candidate((8), (2)) == (\"1000\"));\n    assert(candidate((7), (2))\
    \ == (\"111\"));\n    assert(candidate((2), (3)) == (\"2\"));\n    assert(candidate((3),\
    \ (4)) == (\"3\"));\n    assert(candidate((4), (5)) == (\"4\"));\n    assert(candidate((5),\
    \ (6)) == (\"5\"));\n    assert(candidate((6), (7)) == (\"6\"));\n    assert(candidate((7),\
    \ (8)) == (\"7\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base(8, 3)\n// '22'\n// >>> change_base(8,\
    \ 2)\n// '1000'\n// >>> change_base(7, 2)\n// '111'\nstd::string change_base(long\
    \ x, long base) {\n    std::string ans = \"\";\n    long temp = x;\n    while\
    \ (temp > 0) {\n        int digit = temp % base;\n        ans += digit;\n    \
    \    temp /= base;\n    }\n    return ans;\n}\nint main() {\n    auto candidate\
    \ = change_base;\n    assert(candidate((8), (3)) == (\"22\"));\n    assert(candidate((9),\
    \ (3)) == (\"100\"));\n    assert(candidate((234), (2)) == (\"11101010\"));\n\
    \    assert(candidate((16), (2)) == (\"10000\"));\n    assert(candidate((8), (2))\
    \ == (\"1000\"));\n    assert(candidate((7), (2)) == (\"111\"));\n    assert(candidate((2),\
    \ (3)) == (\"2\"));\n    assert(candidate((3), (4)) == (\"3\"));\n    assert(candidate((4),\
    \ (5)) == (\"4\"));\n    assert(candidate((5), (6)) == (\"5\"));\n    assert(candidate((6),\
    \ (7)) == (\"6\"));\n    assert(candidate((7), (8)) == (\"7\"));\n}\n"
  stdout: ''
  stderr: "tmp9_0uv7d2: /tmp/tmp9_0uv7d2.cpp:24: int main(): Assertion `candidate((8),\
    \ (3)) == (\"22\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base(8, 3)\n// '22'\n// >>> change_base(8,\
    \ 2)\n// '1000'\n// >>> change_base(7, 2)\n// '111'\nstd::string change_base(long\
    \ x, long base) {\n    std::string ans = \"\";\n    while (x > 0) {\n        ans\
    \ += (x % base);\n        x /= base;\n    }\n    return ans;\n}\nint main() {\n\
    \    auto candidate = change_base;\n    assert(candidate((8), (3)) == (\"22\"\
    ));\n    assert(candidate((9), (3)) == (\"100\"));\n    assert(candidate((234),\
    \ (2)) == (\"11101010\"));\n    assert(candidate((16), (2)) == (\"10000\"));\n\
    \    assert(candidate((8), (2)) == (\"1000\"));\n    assert(candidate((7), (2))\
    \ == (\"111\"));\n    assert(candidate((2), (3)) == (\"2\"));\n    assert(candidate((3),\
    \ (4)) == (\"3\"));\n    assert(candidate((4), (5)) == (\"4\"));\n    assert(candidate((5),\
    \ (6)) == (\"5\"));\n    assert(candidate((6), (7)) == (\"6\"));\n    assert(candidate((7),\
    \ (8)) == (\"7\"));\n}\n"
  stdout: ''
  stderr: "tmpa0bubqqw: /tmp/tmpa0bubqqw.cpp:22: int main(): Assertion `candidate((8),\
    \ (3)) == (\"22\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base(8, 3)\n// '22'\n// >>> change_base(8,\
    \ 2)\n// '1000'\n// >>> change_base(7, 2)\n// '111'\nstd::string change_base(long\
    \ x, long base) {\n    long temp = x;\n    std::string ans = \"\";\n    while\
    \ (temp != 0) {\n        int digit = temp % base;\n        ans = std::to_string(digit)\
    \ + ans;\n        temp = temp / base;\n    }\n    return ans;\n}\nint main() {\n\
    \    auto candidate = change_base;\n    assert(candidate((8), (3)) == (\"22\"\
    ));\n    assert(candidate((9), (3)) == (\"100\"));\n    assert(candidate((234),\
    \ (2)) == (\"11101010\"));\n    assert(candidate((16), (2)) == (\"10000\"));\n\
    \    assert(candidate((8), (2)) == (\"1000\"));\n    assert(candidate((7), (2))\
    \ == (\"111\"));\n    assert(candidate((2), (3)) == (\"2\"));\n    assert(candidate((3),\
    \ (4)) == (\"3\"));\n    assert(candidate((4), (5)) == (\"4\"));\n    assert(candidate((5),\
    \ (6)) == (\"5\"));\n    assert(candidate((6), (7)) == (\"6\"));\n    assert(candidate((7),\
    \ (8)) == (\"7\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base(8, 3)\n// '22'\n// >>> change_base(8,\
    \ 2)\n// '1000'\n// >>> change_base(7, 2)\n// '111'\nstd::string change_base(long\
    \ x, long base) {\n    std::string ans = \"\";\n    long temp = x;\n    while\
    \ (temp != 0) {\n        ans += (temp % base);\n        temp /= base;\n    }\n\
    \    return ans;\n}\nint main() {\n    auto candidate = change_base;\n    assert(candidate((8),\
    \ (3)) == (\"22\"));\n    assert(candidate((9), (3)) == (\"100\"));\n    assert(candidate((234),\
    \ (2)) == (\"11101010\"));\n    assert(candidate((16), (2)) == (\"10000\"));\n\
    \    assert(candidate((8), (2)) == (\"1000\"));\n    assert(candidate((7), (2))\
    \ == (\"111\"));\n    assert(candidate((2), (3)) == (\"2\"));\n    assert(candidate((3),\
    \ (4)) == (\"3\"));\n    assert(candidate((4), (5)) == (\"4\"));\n    assert(candidate((5),\
    \ (6)) == (\"5\"));\n    assert(candidate((6), (7)) == (\"6\"));\n    assert(candidate((7),\
    \ (8)) == (\"7\"));\n}\n"
  stdout: ''
  stderr: "tmp_gycv8gl: /tmp/tmp_gycv8gl.cpp:23: int main(): Assertion `candidate((8),\
    \ (3)) == (\"22\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base(8, 3)\n// '22'\n// >>> change_base(8,\
    \ 2)\n// '1000'\n// >>> change_base(7, 2)\n// '111'\nstd::string change_base(long\
    \ x, long base) {\n    std::string ans = \"\";\n    long n = x;\n    while (n\
    \ > 0) {\n        long r = n % base;\n        ans += char(r + 48);\n        n\
    \ /= base;\n    }\n    return ans;\n}\nint main() {\n    auto candidate = change_base;\n\
    \    assert(candidate((8), (3)) == (\"22\"));\n    assert(candidate((9), (3))\
    \ == (\"100\"));\n    assert(candidate((234), (2)) == (\"11101010\"));\n    assert(candidate((16),\
    \ (2)) == (\"10000\"));\n    assert(candidate((8), (2)) == (\"1000\"));\n    assert(candidate((7),\
    \ (2)) == (\"111\"));\n    assert(candidate((2), (3)) == (\"2\"));\n    assert(candidate((3),\
    \ (4)) == (\"3\"));\n    assert(candidate((4), (5)) == (\"4\"));\n    assert(candidate((5),\
    \ (6)) == (\"5\"));\n    assert(candidate((6), (7)) == (\"6\"));\n    assert(candidate((7),\
    \ (8)) == (\"7\"));\n}\n"
  stdout: ''
  stderr: "tmpn76bporr: /tmp/tmpn76bporr.cpp:25: int main(): Assertion `candidate((9),\
    \ (3)) == (\"100\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base(8, 3)\n// '22'\n// >>> change_base(8,\
    \ 2)\n// '1000'\n// >>> change_base(7, 2)\n// '111'\nstd::string change_base(long\
    \ x, long base) {\n    std::string ans = \"\";\n    long temp = x;\n    while\
    \ (temp != 0) {\n        ans += (temp % base);\n        temp /= base;\n    }\n\
    \    return ans;\n}\nint main() {\n    auto candidate = change_base;\n    assert(candidate((8),\
    \ (3)) == (\"22\"));\n    assert(candidate((9), (3)) == (\"100\"));\n    assert(candidate((234),\
    \ (2)) == (\"11101010\"));\n    assert(candidate((16), (2)) == (\"10000\"));\n\
    \    assert(candidate((8), (2)) == (\"1000\"));\n    assert(candidate((7), (2))\
    \ == (\"111\"));\n    assert(candidate((2), (3)) == (\"2\"));\n    assert(candidate((3),\
    \ (4)) == (\"3\"));\n    assert(candidate((4), (5)) == (\"4\"));\n    assert(candidate((5),\
    \ (6)) == (\"5\"));\n    assert(candidate((6), (7)) == (\"6\"));\n    assert(candidate((7),\
    \ (8)) == (\"7\"));\n}\n"
  stdout: ''
  stderr: "tmp3dx0k_r1: /tmp/tmp3dx0k_r1.cpp:23: int main(): Assertion `candidate((8),\
    \ (3)) == (\"22\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base(8, 3)\n// '22'\n// >>> change_base(8,\
    \ 2)\n// '1000'\n// >>> change_base(7, 2)\n// '111'\nstd::string change_base(long\
    \ x, long base) {\n    std::string ans = \"\";\n    long temp = 0;\n    while\
    \ (x > 0) {\n        temp = x % base;\n        ans = std::to_string(temp) + ans;\n\
    \        x = x / base;\n    }\n    return ans;\n}\nint main() {\n    auto candidate\
    \ = change_base;\n    assert(candidate((8), (3)) == (\"22\"));\n    assert(candidate((9),\
    \ (3)) == (\"100\"));\n    assert(candidate((234), (2)) == (\"11101010\"));\n\
    \    assert(candidate((16), (2)) == (\"10000\"));\n    assert(candidate((8), (2))\
    \ == (\"1000\"));\n    assert(candidate((7), (2)) == (\"111\"));\n    assert(candidate((2),\
    \ (3)) == (\"2\"));\n    assert(candidate((3), (4)) == (\"3\"));\n    assert(candidate((4),\
    \ (5)) == (\"4\"));\n    assert(candidate((5), (6)) == (\"5\"));\n    assert(candidate((6),\
    \ (7)) == (\"6\"));\n    assert(candidate((7), (8)) == (\"7\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base(8, 3)\n// '22'\n// >>> change_base(8,\
    \ 2)\n// '1000'\n// >>> change_base(7, 2)\n// '111'\nstd::string change_base(long\
    \ x, long base) {\n    std::string ans = \"\";\n    long temp = 0;\n    temp =\
    \ x;\n    while (temp != 0) {\n        temp = temp / base;\n        ans = std::to_string(temp)\
    \ + ans;\n    }\n    return ans;\n}\nint main() {\n    auto candidate = change_base;\n\
    \    assert(candidate((8), (3)) == (\"22\"));\n    assert(candidate((9), (3))\
    \ == (\"100\"));\n    assert(candidate((234), (2)) == (\"11101010\"));\n    assert(candidate((16),\
    \ (2)) == (\"10000\"));\n    assert(candidate((8), (2)) == (\"1000\"));\n    assert(candidate((7),\
    \ (2)) == (\"111\"));\n    assert(candidate((2), (3)) == (\"2\"));\n    assert(candidate((3),\
    \ (4)) == (\"3\"));\n    assert(candidate((4), (5)) == (\"4\"));\n    assert(candidate((5),\
    \ (6)) == (\"5\"));\n    assert(candidate((6), (7)) == (\"6\"));\n    assert(candidate((7),\
    \ (8)) == (\"7\"));\n}\n"
  stdout: ''
  stderr: "tmpafyqf7le: /tmp/tmpafyqf7le.cpp:24: int main(): Assertion `candidate((8),\
    \ (3)) == (\"22\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base(8, 3)\n// '22'\n// >>> change_base(8,\
    \ 2)\n// '1000'\n// >>> change_base(7, 2)\n// '111'\nstd::string change_base(long\
    \ x, long base) {\n    std::string ans = \"\";\n    long temp = x;\n    while\
    \ (temp > 0) {\n        ans += (temp % base);\n        temp /= base;\n    }\n\
    \    return ans;\n}\nint main() {\n    auto candidate = change_base;\n    assert(candidate((8),\
    \ (3)) == (\"22\"));\n    assert(candidate((9), (3)) == (\"100\"));\n    assert(candidate((234),\
    \ (2)) == (\"11101010\"));\n    assert(candidate((16), (2)) == (\"10000\"));\n\
    \    assert(candidate((8), (2)) == (\"1000\"));\n    assert(candidate((7), (2))\
    \ == (\"111\"));\n    assert(candidate((2), (3)) == (\"2\"));\n    assert(candidate((3),\
    \ (4)) == (\"3\"));\n    assert(candidate((4), (5)) == (\"4\"));\n    assert(candidate((5),\
    \ (6)) == (\"5\"));\n    assert(candidate((6), (7)) == (\"6\"));\n    assert(candidate((7),\
    \ (8)) == (\"7\"));\n}\n"
  stdout: ''
  stderr: "tmpm7gxvefa: /tmp/tmpm7gxvefa.cpp:23: int main(): Assertion `candidate((8),\
    \ (3)) == (\"22\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base(8, 3)\n// '22'\n// >>> change_base(8,\
    \ 2)\n// '1000'\n// >>> change_base(7, 2)\n// '111'\nstd::string change_base(long\
    \ x, long base) {\n    std::string ans = \"\";\n    long n = x;\n    while (n\
    \ > 0) {\n        int digit = n % base;\n        ans += digit;\n        n /= base;\n\
    \    }\n    return ans;\n}\nint main() {\n    auto candidate = change_base;\n\
    \    assert(candidate((8), (3)) == (\"22\"));\n    assert(candidate((9), (3))\
    \ == (\"100\"));\n    assert(candidate((234), (2)) == (\"11101010\"));\n    assert(candidate((16),\
    \ (2)) == (\"10000\"));\n    assert(candidate((8), (2)) == (\"1000\"));\n    assert(candidate((7),\
    \ (2)) == (\"111\"));\n    assert(candidate((2), (3)) == (\"2\"));\n    assert(candidate((3),\
    \ (4)) == (\"3\"));\n    assert(candidate((4), (5)) == (\"4\"));\n    assert(candidate((5),\
    \ (6)) == (\"5\"));\n    assert(candidate((6), (7)) == (\"6\"));\n    assert(candidate((7),\
    \ (8)) == (\"7\"));\n}\n"
  stdout: ''
  stderr: "tmp651ct317: /tmp/tmp651ct317.cpp:24: int main(): Assertion `candidate((8),\
    \ (3)) == (\"22\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base(8, 3)\n// '22'\n// >>> change_base(8,\
    \ 2)\n// '1000'\n// >>> change_base(7, 2)\n// '111'\nstd::string change_base(long\
    \ x, long base) {\n    std::string ans = \"\";\n    while (x > 0) {\n        int\
    \ digit = x % base;\n        ans = std::to_string(digit) + ans;\n        x /=\
    \ base;\n    }\n    return ans;\n}\nint main() {\n    auto candidate = change_base;\n\
    \    assert(candidate((8), (3)) == (\"22\"));\n    assert(candidate((9), (3))\
    \ == (\"100\"));\n    assert(candidate((234), (2)) == (\"11101010\"));\n    assert(candidate((16),\
    \ (2)) == (\"10000\"));\n    assert(candidate((8), (2)) == (\"1000\"));\n    assert(candidate((7),\
    \ (2)) == (\"111\"));\n    assert(candidate((2), (3)) == (\"2\"));\n    assert(candidate((3),\
    \ (4)) == (\"3\"));\n    assert(candidate((4), (5)) == (\"4\"));\n    assert(candidate((5),\
    \ (6)) == (\"5\"));\n    assert(candidate((6), (7)) == (\"6\"));\n    assert(candidate((7),\
    \ (8)) == (\"7\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base(8, 3)\n// '22'\n// >>> change_base(8,\
    \ 2)\n// '1000'\n// >>> change_base(7, 2)\n// '111'\nstd::string change_base(long\
    \ x, long base) {\n    std::string ans = \"\";\n    long temp = x;\n    while\
    \ (temp > 0) {\n        ans += (temp % base);\n        temp /= base;\n    }\n\
    \    return ans;\n}\nint main() {\n    auto candidate = change_base;\n    assert(candidate((8),\
    \ (3)) == (\"22\"));\n    assert(candidate((9), (3)) == (\"100\"));\n    assert(candidate((234),\
    \ (2)) == (\"11101010\"));\n    assert(candidate((16), (2)) == (\"10000\"));\n\
    \    assert(candidate((8), (2)) == (\"1000\"));\n    assert(candidate((7), (2))\
    \ == (\"111\"));\n    assert(candidate((2), (3)) == (\"2\"));\n    assert(candidate((3),\
    \ (4)) == (\"3\"));\n    assert(candidate((4), (5)) == (\"4\"));\n    assert(candidate((5),\
    \ (6)) == (\"5\"));\n    assert(candidate((6), (7)) == (\"6\"));\n    assert(candidate((7),\
    \ (8)) == (\"7\"));\n}\n"
  stdout: ''
  stderr: "tmpdqg49fx1: /tmp/tmpdqg49fx1.cpp:23: int main(): Assertion `candidate((8),\
    \ (3)) == (\"22\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base(8, 3)\n// '22'\n// >>> change_base(8,\
    \ 2)\n// '1000'\n// >>> change_base(7, 2)\n// '111'\nstd::string change_base(long\
    \ x, long base) {\n    std::string ans = \"\";\n    while (x != 0) {\n       \
    \ ans += (char)(x % base);\n        x /= base;\n    }\n    return ans;\n}\nint\
    \ main() {\n    auto candidate = change_base;\n    assert(candidate((8), (3))\
    \ == (\"22\"));\n    assert(candidate((9), (3)) == (\"100\"));\n    assert(candidate((234),\
    \ (2)) == (\"11101010\"));\n    assert(candidate((16), (2)) == (\"10000\"));\n\
    \    assert(candidate((8), (2)) == (\"1000\"));\n    assert(candidate((7), (2))\
    \ == (\"111\"));\n    assert(candidate((2), (3)) == (\"2\"));\n    assert(candidate((3),\
    \ (4)) == (\"3\"));\n    assert(candidate((4), (5)) == (\"4\"));\n    assert(candidate((5),\
    \ (6)) == (\"5\"));\n    assert(candidate((6), (7)) == (\"6\"));\n    assert(candidate((7),\
    \ (8)) == (\"7\"));\n}\n"
  stdout: ''
  stderr: "tmpg_8pbu3h: /tmp/tmpg_8pbu3h.cpp:22: int main(): Assertion `candidate((8),\
    \ (3)) == (\"22\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base(8, 3)\n// '22'\n// >>> change_base(8,\
    \ 2)\n// '1000'\n// >>> change_base(7, 2)\n// '111'\nstd::string change_base(long\
    \ x, long base) {\n    std::string ans = \"\";\n    long rem = x;\n    while (x\
    \ != 0) {\n        rem = rem / base;\n        ans = std::to_string(rem) + ans;\n\
    \        x = x % base;\n    }\n    return ans;\n}\nint main() {\n    auto candidate\
    \ = change_base;\n    assert(candidate((8), (3)) == (\"22\"));\n    assert(candidate((9),\
    \ (3)) == (\"100\"));\n    assert(candidate((234), (2)) == (\"11101010\"));\n\
    \    assert(candidate((16), (2)) == (\"10000\"));\n    assert(candidate((8), (2))\
    \ == (\"1000\"));\n    assert(candidate((7), (2)) == (\"111\"));\n    assert(candidate((2),\
    \ (3)) == (\"2\"));\n    assert(candidate((3), (4)) == (\"3\"));\n    assert(candidate((4),\
    \ (5)) == (\"4\"));\n    assert(candidate((5), (6)) == (\"5\"));\n    assert(candidate((6),\
    \ (7)) == (\"6\"));\n    assert(candidate((7), (8)) == (\"7\"));\n}\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base(8, 3)\n// '22'\n// >>> change_base(8,\
    \ 2)\n// '1000'\n// >>> change_base(7, 2)\n// '111'\nstd::string change_base(long\
    \ x, long base) {\n    std::string ans = \"\";\n    long temp = x;\n    while\
    \ (temp != 0) {\n        int rem = temp % base;\n        ans = std::to_string(base)\
    \ + ans;\n        temp = temp / base;\n    }\n    return ans;\n}\nint main() {\n\
    \    auto candidate = change_base;\n    assert(candidate((8), (3)) == (\"22\"\
    ));\n    assert(candidate((9), (3)) == (\"100\"));\n    assert(candidate((234),\
    \ (2)) == (\"11101010\"));\n    assert(candidate((16), (2)) == (\"10000\"));\n\
    \    assert(candidate((8), (2)) == (\"1000\"));\n    assert(candidate((7), (2))\
    \ == (\"111\"));\n    assert(candidate((2), (3)) == (\"2\"));\n    assert(candidate((3),\
    \ (4)) == (\"3\"));\n    assert(candidate((4), (5)) == (\"4\"));\n    assert(candidate((5),\
    \ (6)) == (\"5\"));\n    assert(candidate((6), (7)) == (\"6\"));\n    assert(candidate((7),\
    \ (8)) == (\"7\"));\n}\n"
  stdout: ''
  stderr: "tmp9317z7a7: /tmp/tmp9317z7a7.cpp:24: int main(): Assertion `candidate((8),\
    \ (3)) == (\"22\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base(8, 3)\n// '22'\n// >>> change_base(8,\
    \ 2)\n// '1000'\n// >>> change_base(7, 2)\n// '111'\nstd::string change_base(long\
    \ x, long base) {\n    std::string ans = \"\";\n    long tmp = x;\n    while (base\
    \ > 0) {\n        tmp = tmp / base;\n        ans = std::to_string(tmp) + ans;\n\
    \        base--;\n    }\n    return ans;\n}\nint main() {\n    auto candidate\
    \ = change_base;\n    assert(candidate((8), (3)) == (\"22\"));\n    assert(candidate((9),\
    \ (3)) == (\"100\"));\n    assert(candidate((234), (2)) == (\"11101010\"));\n\
    \    assert(candidate((16), (2)) == (\"10000\"));\n    assert(candidate((8), (2))\
    \ == (\"1000\"));\n    assert(candidate((7), (2)) == (\"111\"));\n    assert(candidate((2),\
    \ (3)) == (\"2\"));\n    assert(candidate((3), (4)) == (\"3\"));\n    assert(candidate((4),\
    \ (5)) == (\"4\"));\n    assert(candidate((5), (6)) == (\"5\"));\n    assert(candidate((6),\
    \ (7)) == (\"6\"));\n    assert(candidate((7), (8)) == (\"7\"));\n}\n"
  stdout: ''
  stderr: "tmpdz_x03m9: /tmp/tmpdz_x03m9.cpp:24: int main(): Assertion `candidate((8),\
    \ (3)) == (\"22\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base(8, 3)\n// '22'\n// >>> change_base(8,\
    \ 2)\n// '1000'\n// >>> change_base(7, 2)\n// '111'\nstd::string change_base(long\
    \ x, long base) {\n    std::string ans = \"\";\n    long temp = x;\n    while\
    \ (temp > 0) {\n        int rem = temp % base;\n        ans = std::to_string(rem)\
    \ + ans;\n        temp = temp / base;\n    }\n    return ans;\n}\nint main() {\n\
    \    auto candidate = change_base;\n    assert(candidate((8), (3)) == (\"22\"\
    ));\n    assert(candidate((9), (3)) == (\"100\"));\n    assert(candidate((234),\
    \ (2)) == (\"11101010\"));\n    assert(candidate((16), (2)) == (\"10000\"));\n\
    \    assert(candidate((8), (2)) == (\"1000\"));\n    assert(candidate((7), (2))\
    \ == (\"111\"));\n    assert(candidate((2), (3)) == (\"2\"));\n    assert(candidate((3),\
    \ (4)) == (\"3\"));\n    assert(candidate((4), (5)) == (\"4\"));\n    assert(candidate((5),\
    \ (6)) == (\"5\"));\n    assert(candidate((6), (7)) == (\"6\"));\n    assert(candidate((7),\
    \ (8)) == (\"7\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base(8, 3)\n// '22'\n// >>> change_base(8,\
    \ 2)\n// '1000'\n// >>> change_base(7, 2)\n// '111'\nstd::string change_base(long\
    \ x, long base) {\n    std::string ans = \"\";\n    long temp = x;\n    while\
    \ (temp != 0) {\n        ans += (temp % base);\n        temp /= base;\n    }\n\
    \    return ans;\n}\nint main() {\n    auto candidate = change_base;\n    assert(candidate((8),\
    \ (3)) == (\"22\"));\n    assert(candidate((9), (3)) == (\"100\"));\n    assert(candidate((234),\
    \ (2)) == (\"11101010\"));\n    assert(candidate((16), (2)) == (\"10000\"));\n\
    \    assert(candidate((8), (2)) == (\"1000\"));\n    assert(candidate((7), (2))\
    \ == (\"111\"));\n    assert(candidate((2), (3)) == (\"2\"));\n    assert(candidate((3),\
    \ (4)) == (\"3\"));\n    assert(candidate((4), (5)) == (\"4\"));\n    assert(candidate((5),\
    \ (6)) == (\"5\"));\n    assert(candidate((6), (7)) == (\"6\"));\n    assert(candidate((7),\
    \ (8)) == (\"7\"));\n}\n"
  stdout: ''
  stderr: "tmp7z3rwuhi: /tmp/tmp7z3rwuhi.cpp:23: int main(): Assertion `candidate((8),\
    \ (3)) == (\"22\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base(8, 3)\n// '22'\n// >>> change_base(8,\
    \ 2)\n// '1000'\n// >>> change_base(7, 2)\n// '111'\nstd::string change_base(long\
    \ x, long base) {\n    long tmp = x;\n    std::string ans = \"\";\n    while (tmp\
    \ > 0) {\n        int rem = tmp % base;\n        ans = std::to_string(rem) + ans;\n\
    \        tmp /= base;\n    }\n    return ans;\n}\nint main() {\n    auto candidate\
    \ = change_base;\n    assert(candidate((8), (3)) == (\"22\"));\n    assert(candidate((9),\
    \ (3)) == (\"100\"));\n    assert(candidate((234), (2)) == (\"11101010\"));\n\
    \    assert(candidate((16), (2)) == (\"10000\"));\n    assert(candidate((8), (2))\
    \ == (\"1000\"));\n    assert(candidate((7), (2)) == (\"111\"));\n    assert(candidate((2),\
    \ (3)) == (\"2\"));\n    assert(candidate((3), (4)) == (\"3\"));\n    assert(candidate((4),\
    \ (5)) == (\"4\"));\n    assert(candidate((5), (6)) == (\"5\"));\n    assert(candidate((6),\
    \ (7)) == (\"6\"));\n    assert(candidate((7), (8)) == (\"7\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base(8, 3)\n// '22'\n// >>> change_base(8,\
    \ 2)\n// '1000'\n// >>> change_base(7, 2)\n// '111'\nstd::string change_base(long\
    \ x, long base) {\n    std::string ans = \"\";\n    long tmp = x;\n    while (base\
    \ > 0) {\n        tmp = tmp / base;\n        ans = std::to_string(tmp) + ans;\n\
    \        base--;\n    }\n    return ans;\n}\nint main() {\n    auto candidate\
    \ = change_base;\n    assert(candidate((8), (3)) == (\"22\"));\n    assert(candidate((9),\
    \ (3)) == (\"100\"));\n    assert(candidate((234), (2)) == (\"11101010\"));\n\
    \    assert(candidate((16), (2)) == (\"10000\"));\n    assert(candidate((8), (2))\
    \ == (\"1000\"));\n    assert(candidate((7), (2)) == (\"111\"));\n    assert(candidate((2),\
    \ (3)) == (\"2\"));\n    assert(candidate((3), (4)) == (\"3\"));\n    assert(candidate((4),\
    \ (5)) == (\"4\"));\n    assert(candidate((5), (6)) == (\"5\"));\n    assert(candidate((6),\
    \ (7)) == (\"6\"));\n    assert(candidate((7), (8)) == (\"7\"));\n}\n"
  stdout: ''
  stderr: "tmpji14mftj: /tmp/tmpji14mftj.cpp:24: int main(): Assertion `candidate((8),\
    \ (3)) == (\"22\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base(8, 3)\n// '22'\n// >>> change_base(8,\
    \ 2)\n// '1000'\n// >>> change_base(7, 2)\n// '111'\nstd::string change_base(long\
    \ x, long base) {\n    std::string ans = \"\";\n    long tmp = x;\n    while (base\
    \ > 0) {\n        tmp = tmp / base;\n        ans = std::to_string(tmp % base)\
    \ + ans;\n        base--;\n    }\n    return ans;\n}\nint main() {\n    auto candidate\
    \ = change_base;\n    assert(candidate((8), (3)) == (\"22\"));\n    assert(candidate((9),\
    \ (3)) == (\"100\"));\n    assert(candidate((234), (2)) == (\"11101010\"));\n\
    \    assert(candidate((16), (2)) == (\"10000\"));\n    assert(candidate((8), (2))\
    \ == (\"1000\"));\n    assert(candidate((7), (2)) == (\"111\"));\n    assert(candidate((2),\
    \ (3)) == (\"2\"));\n    assert(candidate((3), (4)) == (\"3\"));\n    assert(candidate((4),\
    \ (5)) == (\"4\"));\n    assert(candidate((5), (6)) == (\"5\"));\n    assert(candidate((6),\
    \ (7)) == (\"6\"));\n    assert(candidate((7), (8)) == (\"7\"));\n}\n"
  stdout: ''
  stderr: "tmpgdfp9_op: /tmp/tmpgdfp9_op.cpp:24: int main(): Assertion `candidate((8),\
    \ (3)) == (\"22\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base(8, 3)\n// '22'\n// >>> change_base(8,\
    \ 2)\n// '1000'\n// >>> change_base(7, 2)\n// '111'\nstd::string change_base(long\
    \ x, long base) {\n    std::string ans = \"\";\n    long temp = x;\n    while\
    \ (temp != 0) {\n        int digit = temp % base;\n        ans = std::to_string(digit)\
    \ + ans;\n        temp = temp / base;\n    }\n    return ans;\n}\nint main() {\n\
    \    auto candidate = change_base;\n    assert(candidate((8), (3)) == (\"22\"\
    ));\n    assert(candidate((9), (3)) == (\"100\"));\n    assert(candidate((234),\
    \ (2)) == (\"11101010\"));\n    assert(candidate((16), (2)) == (\"10000\"));\n\
    \    assert(candidate((8), (2)) == (\"1000\"));\n    assert(candidate((7), (2))\
    \ == (\"111\"));\n    assert(candidate((2), (3)) == (\"2\"));\n    assert(candidate((3),\
    \ (4)) == (\"3\"));\n    assert(candidate((4), (5)) == (\"4\"));\n    assert(candidate((5),\
    \ (6)) == (\"5\"));\n    assert(candidate((6), (7)) == (\"6\"));\n    assert(candidate((7),\
    \ (8)) == (\"7\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base(8, 3)\n// '22'\n// >>> change_base(8,\
    \ 2)\n// '1000'\n// >>> change_base(7, 2)\n// '111'\nstd::string change_base(long\
    \ x, long base) {\n    std::string ans = \"\";\n    long tmp = x;\n    while (base\
    \ > 0) {\n        tmp = tmp / base;\n        ans = std::to_string(tmp % base)\
    \ + ans;\n        base = base * 10;\n    }\n    ans = std::to_string(tmp) + ans;\n\
    \    return ans;\n}\nint main() {\n    auto candidate = change_base;\n    assert(candidate((8),\
    \ (3)) == (\"22\"));\n    assert(candidate((9), (3)) == (\"100\"));\n    assert(candidate((234),\
    \ (2)) == (\"11101010\"));\n    assert(candidate((16), (2)) == (\"10000\"));\n\
    \    assert(candidate((8), (2)) == (\"1000\"));\n    assert(candidate((7), (2))\
    \ == (\"111\"));\n    assert(candidate((2), (3)) == (\"2\"));\n    assert(candidate((3),\
    \ (4)) == (\"3\"));\n    assert(candidate((4), (5)) == (\"4\"));\n    assert(candidate((5),\
    \ (6)) == (\"5\"));\n    assert(candidate((6), (7)) == (\"6\"));\n    assert(candidate((7),\
    \ (8)) == (\"7\"));\n}\n"
  stdout: ''
  stderr: "tmpsgfdru8j: /tmp/tmpsgfdru8j.cpp:25: int main(): Assertion `candidate((8),\
    \ (3)) == (\"22\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base(8, 3)\n// '22'\n// >>> change_base(8,\
    \ 2)\n// '1000'\n// >>> change_base(7, 2)\n// '111'\nstd::string change_base(long\
    \ x, long base) {\n    std::string ans = \"\";\n    long temp;\n    temp = x;\n\
    \    while (temp != 0) {\n        temp = temp / base;\n        ans = std::to_string(temp)\
    \ + ans;\n    }\n    return ans;\n}\nint main() {\n    auto candidate = change_base;\n\
    \    assert(candidate((8), (3)) == (\"22\"));\n    assert(candidate((9), (3))\
    \ == (\"100\"));\n    assert(candidate((234), (2)) == (\"11101010\"));\n    assert(candidate((16),\
    \ (2)) == (\"10000\"));\n    assert(candidate((8), (2)) == (\"1000\"));\n    assert(candidate((7),\
    \ (2)) == (\"111\"));\n    assert(candidate((2), (3)) == (\"2\"));\n    assert(candidate((3),\
    \ (4)) == (\"3\"));\n    assert(candidate((4), (5)) == (\"4\"));\n    assert(candidate((5),\
    \ (6)) == (\"5\"));\n    assert(candidate((6), (7)) == (\"6\"));\n    assert(candidate((7),\
    \ (8)) == (\"7\"));\n}\n"
  stdout: ''
  stderr: "tmp2g3r24m2: /tmp/tmp2g3r24m2.cpp:24: int main(): Assertion `candidate((8),\
    \ (3)) == (\"22\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base(8, 3)\n// '22'\n// >>> change_base(8,\
    \ 2)\n// '1000'\n// >>> change_base(7, 2)\n// '111'\nstd::string change_base(long\
    \ x, long base) {\n    std::string res;\n    long temp;\n    temp = x;\n    while\
    \ (temp != 0) {\n        res += (temp % base);\n        temp /= base;\n    }\n\
    \    return res;\n}\nint main() {\n    auto candidate = change_base;\n    assert(candidate((8),\
    \ (3)) == (\"22\"));\n    assert(candidate((9), (3)) == (\"100\"));\n    assert(candidate((234),\
    \ (2)) == (\"11101010\"));\n    assert(candidate((16), (2)) == (\"10000\"));\n\
    \    assert(candidate((8), (2)) == (\"1000\"));\n    assert(candidate((7), (2))\
    \ == (\"111\"));\n    assert(candidate((2), (3)) == (\"2\"));\n    assert(candidate((3),\
    \ (4)) == (\"3\"));\n    assert(candidate((4), (5)) == (\"4\"));\n    assert(candidate((5),\
    \ (6)) == (\"5\"));\n    assert(candidate((6), (7)) == (\"6\"));\n    assert(candidate((7),\
    \ (8)) == (\"7\"));\n}\n"
  stdout: ''
  stderr: "tmp89ymgvg4: /tmp/tmp89ymgvg4.cpp:24: int main(): Assertion `candidate((8),\
    \ (3)) == (\"22\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base(8, 3)\n// '22'\n// >>> change_base(8,\
    \ 2)\n// '1000'\n// >>> change_base(7, 2)\n// '111'\nstd::string change_base(long\
    \ x, long base) {\n    long temp = x;\n    std::string ans = \"\";\n    while\
    \ (temp != 0) {\n        int rem = temp % base;\n        ans = std::to_string(base)\
    \ + ans;\n        temp = temp / base;\n    }\n    return ans;\n}\nint main() {\n\
    \    auto candidate = change_base;\n    assert(candidate((8), (3)) == (\"22\"\
    ));\n    assert(candidate((9), (3)) == (\"100\"));\n    assert(candidate((234),\
    \ (2)) == (\"11101010\"));\n    assert(candidate((16), (2)) == (\"10000\"));\n\
    \    assert(candidate((8), (2)) == (\"1000\"));\n    assert(candidate((7), (2))\
    \ == (\"111\"));\n    assert(candidate((2), (3)) == (\"2\"));\n    assert(candidate((3),\
    \ (4)) == (\"3\"));\n    assert(candidate((4), (5)) == (\"4\"));\n    assert(candidate((5),\
    \ (6)) == (\"5\"));\n    assert(candidate((6), (7)) == (\"6\"));\n    assert(candidate((7),\
    \ (8)) == (\"7\"));\n}\n"
  stdout: ''
  stderr: "tmpa0b9wi90: /tmp/tmpa0b9wi90.cpp:24: int main(): Assertion `candidate((8),\
    \ (3)) == (\"22\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base(8, 3)\n// '22'\n// >>> change_base(8,\
    \ 2)\n// '1000'\n// >>> change_base(7, 2)\n// '111'\nstd::string change_base(long\
    \ x, long base) {\n    std::string ans = \"\";\n    long temp = x;\n    while\
    \ (temp > 0) {\n        ans += (temp % base);\n        temp /= base;\n    }\n\
    \    return ans;\n}\nint main() {\n    auto candidate = change_base;\n    assert(candidate((8),\
    \ (3)) == (\"22\"));\n    assert(candidate((9), (3)) == (\"100\"));\n    assert(candidate((234),\
    \ (2)) == (\"11101010\"));\n    assert(candidate((16), (2)) == (\"10000\"));\n\
    \    assert(candidate((8), (2)) == (\"1000\"));\n    assert(candidate((7), (2))\
    \ == (\"111\"));\n    assert(candidate((2), (3)) == (\"2\"));\n    assert(candidate((3),\
    \ (4)) == (\"3\"));\n    assert(candidate((4), (5)) == (\"4\"));\n    assert(candidate((5),\
    \ (6)) == (\"5\"));\n    assert(candidate((6), (7)) == (\"6\"));\n    assert(candidate((7),\
    \ (8)) == (\"7\"));\n}\n"
  stdout: ''
  stderr: "tmpxibjxwzv: /tmp/tmpxibjxwzv.cpp:23: int main(): Assertion `candidate((8),\
    \ (3)) == (\"22\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base(8, 3)\n// '22'\n// >>> change_base(8,\
    \ 2)\n// '1000'\n// >>> change_base(7, 2)\n// '111'\nstd::string change_base(long\
    \ x, long base) {\n    std::string ans = \"\";\n    while (x > 0) {\n        long\
    \ r = x % base;\n        ans = std::to_string(r) + ans;\n        x = x / base;\n\
    \    }\n    return ans;\n}\nint main() {\n    auto candidate = change_base;\n\
    \    assert(candidate((8), (3)) == (\"22\"));\n    assert(candidate((9), (3))\
    \ == (\"100\"));\n    assert(candidate((234), (2)) == (\"11101010\"));\n    assert(candidate((16),\
    \ (2)) == (\"10000\"));\n    assert(candidate((8), (2)) == (\"1000\"));\n    assert(candidate((7),\
    \ (2)) == (\"111\"));\n    assert(candidate((2), (3)) == (\"2\"));\n    assert(candidate((3),\
    \ (4)) == (\"3\"));\n    assert(candidate((4), (5)) == (\"4\"));\n    assert(candidate((5),\
    \ (6)) == (\"5\"));\n    assert(candidate((6), (7)) == (\"6\"));\n    assert(candidate((7),\
    \ (8)) == (\"7\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base(8, 3)\n// '22'\n// >>> change_base(8,\
    \ 2)\n// '1000'\n// >>> change_base(7, 2)\n// '111'\nstd::string change_base(long\
    \ x, long base) {\n    std::string ans = \"\";\n    long temp = x;\n    while\
    \ (temp != 0) {\n        int digit = temp % base;\n        ans = std::to_string(digit)\
    \ + ans;\n        temp = temp / base;\n    }\n    return ans;\n}\nint main() {\n\
    \    auto candidate = change_base;\n    assert(candidate((8), (3)) == (\"22\"\
    ));\n    assert(candidate((9), (3)) == (\"100\"));\n    assert(candidate((234),\
    \ (2)) == (\"11101010\"));\n    assert(candidate((16), (2)) == (\"10000\"));\n\
    \    assert(candidate((8), (2)) == (\"1000\"));\n    assert(candidate((7), (2))\
    \ == (\"111\"));\n    assert(candidate((2), (3)) == (\"2\"));\n    assert(candidate((3),\
    \ (4)) == (\"3\"));\n    assert(candidate((4), (5)) == (\"4\"));\n    assert(candidate((5),\
    \ (6)) == (\"5\"));\n    assert(candidate((6), (7)) == (\"6\"));\n    assert(candidate((7),\
    \ (8)) == (\"7\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base(8, 3)\n// '22'\n// >>> change_base(8,\
    \ 2)\n// '1000'\n// >>> change_base(7, 2)\n// '111'\nstd::string change_base(long\
    \ x, long base) {\n    std::string ans = \"\";\n    while (x > 0) {\n        ans\
    \ += (char)(x % base);\n        x /= base;\n    }\n    return ans;\n}\nint main()\
    \ {\n    auto candidate = change_base;\n    assert(candidate((8), (3)) == (\"\
    22\"));\n    assert(candidate((9), (3)) == (\"100\"));\n    assert(candidate((234),\
    \ (2)) == (\"11101010\"));\n    assert(candidate((16), (2)) == (\"10000\"));\n\
    \    assert(candidate((8), (2)) == (\"1000\"));\n    assert(candidate((7), (2))\
    \ == (\"111\"));\n    assert(candidate((2), (3)) == (\"2\"));\n    assert(candidate((3),\
    \ (4)) == (\"3\"));\n    assert(candidate((4), (5)) == (\"4\"));\n    assert(candidate((5),\
    \ (6)) == (\"5\"));\n    assert(candidate((6), (7)) == (\"6\"));\n    assert(candidate((7),\
    \ (8)) == (\"7\"));\n}\n"
  stdout: ''
  stderr: "tmp5u2j2akl: /tmp/tmp5u2j2akl.cpp:22: int main(): Assertion `candidate((8),\
    \ (3)) == (\"22\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base(8, 3)\n// '22'\n// >>> change_base(8,\
    \ 2)\n// '1000'\n// >>> change_base(7, 2)\n// '111'\nstd::string change_base(long\
    \ x, long base) {\n    std::string ans = \"\";\n    long tmp = x;\n    while (base\
    \ > 0) {\n        tmp = tmp / base;\n        ans = std::to_string(tmp) + ans;\n\
    \        base--;\n    }\n    while (base < 0) {\n        tmp = tmp * base;\n \
    \       ans = std::to_string(tmp) + ans;\n        base++;\n    }\n    return ans;\n\
    }\nint main() {\n    auto candidate = change_base;\n    assert(candidate((8),\
    \ (3)) == (\"22\"));\n    assert(candidate((9), (3)) == (\"100\"));\n    assert(candidate((234),\
    \ (2)) == (\"11101010\"));\n    assert(candidate((16), (2)) == (\"10000\"));\n\
    \    assert(candidate((8), (2)) == (\"1000\"));\n    assert(candidate((7), (2))\
    \ == (\"111\"));\n    assert(candidate((2), (3)) == (\"2\"));\n    assert(candidate((3),\
    \ (4)) == (\"3\"));\n    assert(candidate((4), (5)) == (\"4\"));\n    assert(candidate((5),\
    \ (6)) == (\"5\"));\n    assert(candidate((6), (7)) == (\"6\"));\n    assert(candidate((7),\
    \ (8)) == (\"7\"));\n}\n"
  stdout: ''
  stderr: "tmpesyf9rz7: /tmp/tmpesyf9rz7.cpp:29: int main(): Assertion `candidate((8),\
    \ (3)) == (\"22\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base(8, 3)\n// '22'\n// >>> change_base(8,\
    \ 2)\n// '1000'\n// >>> change_base(7, 2)\n// '111'\nstd::string change_base(long\
    \ x, long base) {\n    std::string ans = \"\";\n    long n = x;\n    while (n\
    \ > 0) {\n        long r = n % base;\n        ans = std::to_string(r) + ans;\n\
    \        n = n / base;\n    }\n    return ans;\n}\nint main() {\n    auto candidate\
    \ = change_base;\n    assert(candidate((8), (3)) == (\"22\"));\n    assert(candidate((9),\
    \ (3)) == (\"100\"));\n    assert(candidate((234), (2)) == (\"11101010\"));\n\
    \    assert(candidate((16), (2)) == (\"10000\"));\n    assert(candidate((8), (2))\
    \ == (\"1000\"));\n    assert(candidate((7), (2)) == (\"111\"));\n    assert(candidate((2),\
    \ (3)) == (\"2\"));\n    assert(candidate((3), (4)) == (\"3\"));\n    assert(candidate((4),\
    \ (5)) == (\"4\"));\n    assert(candidate((5), (6)) == (\"5\"));\n    assert(candidate((6),\
    \ (7)) == (\"6\"));\n    assert(candidate((7), (8)) == (\"7\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base(8, 3)\n// '22'\n// >>> change_base(8,\
    \ 2)\n// '1000'\n// >>> change_base(7, 2)\n// '111'\nstd::string change_base(long\
    \ x, long base) {\n    std::string ans = \"\";\n    long tmp = x;\n    while (base\
    \ > 0) {\n        tmp = tmp / base;\n        ans = std::to_string(tmp % base)\
    \ + ans;\n        base--;\n    }\n    while (base < 0) {\n        tmp = tmp *\
    \ base;\n        ans = std::to_string(tmp % base) + ans;\n        base++;\n  \
    \  }\n    return ans;\n}\nint main() {\n    auto candidate = change_base;\n  \
    \  assert(candidate((8), (3)) == (\"22\"));\n    assert(candidate((9), (3)) ==\
    \ (\"100\"));\n    assert(candidate((234), (2)) == (\"11101010\"));\n    assert(candidate((16),\
    \ (2)) == (\"10000\"));\n    assert(candidate((8), (2)) == (\"1000\"));\n    assert(candidate((7),\
    \ (2)) == (\"111\"));\n    assert(candidate((2), (3)) == (\"2\"));\n    assert(candidate((3),\
    \ (4)) == (\"3\"));\n    assert(candidate((4), (5)) == (\"4\"));\n    assert(candidate((5),\
    \ (6)) == (\"5\"));\n    assert(candidate((6), (7)) == (\"6\"));\n    assert(candidate((7),\
    \ (8)) == (\"7\"));\n}\n"
  stdout: ''
  stderr: "tmpa0vhaj1l: /tmp/tmpa0vhaj1l.cpp:29: int main(): Assertion `candidate((8),\
    \ (3)) == (\"22\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base(8, 3)\n// '22'\n// >>> change_base(8,\
    \ 2)\n// '1000'\n// >>> change_base(7, 2)\n// '111'\nstd::string change_base(long\
    \ x, long base) {\n    std::string ans = \"\";\n    long tmp = x;\n    while (base\
    \ > 0) {\n        tmp = tmp / base;\n        ans = std::to_string(tmp) + ans;\n\
    \        base--;\n    }\n    while (base < 0) {\n        tmp = tmp * base;\n \
    \       ans = std::to_string(tmp) + ans;\n        base++;\n    }\n    return ans;\n\
    }\nint main() {\n    auto candidate = change_base;\n    assert(candidate((8),\
    \ (3)) == (\"22\"));\n    assert(candidate((9), (3)) == (\"100\"));\n    assert(candidate((234),\
    \ (2)) == (\"11101010\"));\n    assert(candidate((16), (2)) == (\"10000\"));\n\
    \    assert(candidate((8), (2)) == (\"1000\"));\n    assert(candidate((7), (2))\
    \ == (\"111\"));\n    assert(candidate((2), (3)) == (\"2\"));\n    assert(candidate((3),\
    \ (4)) == (\"3\"));\n    assert(candidate((4), (5)) == (\"4\"));\n    assert(candidate((5),\
    \ (6)) == (\"5\"));\n    assert(candidate((6), (7)) == (\"6\"));\n    assert(candidate((7),\
    \ (8)) == (\"7\"));\n}\n"
  stdout: ''
  stderr: "tmpwxkqjnfx: /tmp/tmpwxkqjnfx.cpp:29: int main(): Assertion `candidate((8),\
    \ (3)) == (\"22\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base(8, 3)\n// '22'\n// >>> change_base(8,\
    \ 2)\n// '1000'\n// >>> change_base(7, 2)\n// '111'\nstd::string change_base(long\
    \ x, long base) {\n    std::string ans = \"\";\n    while (x > 0) {\n        ans\
    \ += (char)(x % base);\n        x /= base;\n    }\n    return ans;\n}\nint main()\
    \ {\n    auto candidate = change_base;\n    assert(candidate((8), (3)) == (\"\
    22\"));\n    assert(candidate((9), (3)) == (\"100\"));\n    assert(candidate((234),\
    \ (2)) == (\"11101010\"));\n    assert(candidate((16), (2)) == (\"10000\"));\n\
    \    assert(candidate((8), (2)) == (\"1000\"));\n    assert(candidate((7), (2))\
    \ == (\"111\"));\n    assert(candidate((2), (3)) == (\"2\"));\n    assert(candidate((3),\
    \ (4)) == (\"3\"));\n    assert(candidate((4), (5)) == (\"4\"));\n    assert(candidate((5),\
    \ (6)) == (\"5\"));\n    assert(candidate((6), (7)) == (\"6\"));\n    assert(candidate((7),\
    \ (8)) == (\"7\"));\n}\n"
  stdout: ''
  stderr: "tmpvfkr_cok: /tmp/tmpvfkr_cok.cpp:22: int main(): Assertion `candidate((8),\
    \ (3)) == (\"22\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base(8, 3)\n// '22'\n// >>> change_base(8,\
    \ 2)\n// '1000'\n// >>> change_base(7, 2)\n// '111'\nstd::string change_base(long\
    \ x, long base) {\n    long temp = x;\n    std::string ans = \"\";\n    while\
    \ (temp != 0) {\n        ans += (temp % base);\n        temp /= base;\n    }\n\
    \    return ans;\n}\nint main() {\n    auto candidate = change_base;\n    assert(candidate((8),\
    \ (3)) == (\"22\"));\n    assert(candidate((9), (3)) == (\"100\"));\n    assert(candidate((234),\
    \ (2)) == (\"11101010\"));\n    assert(candidate((16), (2)) == (\"10000\"));\n\
    \    assert(candidate((8), (2)) == (\"1000\"));\n    assert(candidate((7), (2))\
    \ == (\"111\"));\n    assert(candidate((2), (3)) == (\"2\"));\n    assert(candidate((3),\
    \ (4)) == (\"3\"));\n    assert(candidate((4), (5)) == (\"4\"));\n    assert(candidate((5),\
    \ (6)) == (\"5\"));\n    assert(candidate((6), (7)) == (\"6\"));\n    assert(candidate((7),\
    \ (8)) == (\"7\"));\n}\n"
  stdout: ''
  stderr: "tmps4j_h95d: /tmp/tmps4j_h95d.cpp:23: int main(): Assertion `candidate((8),\
    \ (3)) == (\"22\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base(8, 3)\n// '22'\n// >>> change_base(8,\
    \ 2)\n// '1000'\n// >>> change_base(7, 2)\n// '111'\nstd::string change_base(long\
    \ x, long base) {\n    std::string ans = \"\";\n    while (x > 0) {\n        int\
    \ digit = x % base;\n        ans += digit;\n        x /= base;\n    }\n    return\
    \ ans;\n}\nint main() {\n    auto candidate = change_base;\n    assert(candidate((8),\
    \ (3)) == (\"22\"));\n    assert(candidate((9), (3)) == (\"100\"));\n    assert(candidate((234),\
    \ (2)) == (\"11101010\"));\n    assert(candidate((16), (2)) == (\"10000\"));\n\
    \    assert(candidate((8), (2)) == (\"1000\"));\n    assert(candidate((7), (2))\
    \ == (\"111\"));\n    assert(candidate((2), (3)) == (\"2\"));\n    assert(candidate((3),\
    \ (4)) == (\"3\"));\n    assert(candidate((4), (5)) == (\"4\"));\n    assert(candidate((5),\
    \ (6)) == (\"5\"));\n    assert(candidate((6), (7)) == (\"6\"));\n    assert(candidate((7),\
    \ (8)) == (\"7\"));\n}\n"
  stdout: ''
  stderr: "tmpgs1kaiwu: /tmp/tmpgs1kaiwu.cpp:23: int main(): Assertion `candidate((8),\
    \ (3)) == (\"22\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base(8, 3)\n// '22'\n// >>> change_base(8,\
    \ 2)\n// '1000'\n// >>> change_base(7, 2)\n// '111'\nstd::string change_base(long\
    \ x, long base) {\n    std::string ans = \"\";\n    long temp = x;\n    while\
    \ (temp != 0) {\n        int digit = temp % base;\n        ans = std::to_string(digit)\
    \ + ans;\n        temp = temp / base;\n    }\n    return ans;\n}\nint main() {\n\
    \    auto candidate = change_base;\n    assert(candidate((8), (3)) == (\"22\"\
    ));\n    assert(candidate((9), (3)) == (\"100\"));\n    assert(candidate((234),\
    \ (2)) == (\"11101010\"));\n    assert(candidate((16), (2)) == (\"10000\"));\n\
    \    assert(candidate((8), (2)) == (\"1000\"));\n    assert(candidate((7), (2))\
    \ == (\"111\"));\n    assert(candidate((2), (3)) == (\"2\"));\n    assert(candidate((3),\
    \ (4)) == (\"3\"));\n    assert(candidate((4), (5)) == (\"4\"));\n    assert(candidate((5),\
    \ (6)) == (\"5\"));\n    assert(candidate((6), (7)) == (\"6\"));\n    assert(candidate((7),\
    \ (8)) == (\"7\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base(8, 3)\n// '22'\n// >>> change_base(8,\
    \ 2)\n// '1000'\n// >>> change_base(7, 2)\n// '111'\nstd::string change_base(long\
    \ x, long base) {\n    std::string ans = \"\";\n    long n = x;\n    while (n\
    \ > 0) {\n        int r = n % base;\n        ans = std::to_string(r) + ans;\n\
    \        n = n / base;\n    }\n    return ans;\n}\nint main() {\n    auto candidate\
    \ = change_base;\n    assert(candidate((8), (3)) == (\"22\"));\n    assert(candidate((9),\
    \ (3)) == (\"100\"));\n    assert(candidate((234), (2)) == (\"11101010\"));\n\
    \    assert(candidate((16), (2)) == (\"10000\"));\n    assert(candidate((8), (2))\
    \ == (\"1000\"));\n    assert(candidate((7), (2)) == (\"111\"));\n    assert(candidate((2),\
    \ (3)) == (\"2\"));\n    assert(candidate((3), (4)) == (\"3\"));\n    assert(candidate((4),\
    \ (5)) == (\"4\"));\n    assert(candidate((5), (6)) == (\"5\"));\n    assert(candidate((6),\
    \ (7)) == (\"6\"));\n    assert(candidate((7), (8)) == (\"7\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base(8, 3)\n// '22'\n// >>> change_base(8,\
    \ 2)\n// '1000'\n// >>> change_base(7, 2)\n// '111'\nstd::string change_base(long\
    \ x, long base) {\n    std::string ans = \"\";\n    while (x != 0) {\n       \
    \ int r = x % base;\n        ans = std::to_string(r) + ans;\n        x = x / base;\n\
    \    }\n    return ans;\n}\nint main() {\n    auto candidate = change_base;\n\
    \    assert(candidate((8), (3)) == (\"22\"));\n    assert(candidate((9), (3))\
    \ == (\"100\"));\n    assert(candidate((234), (2)) == (\"11101010\"));\n    assert(candidate((16),\
    \ (2)) == (\"10000\"));\n    assert(candidate((8), (2)) == (\"1000\"));\n    assert(candidate((7),\
    \ (2)) == (\"111\"));\n    assert(candidate((2), (3)) == (\"2\"));\n    assert(candidate((3),\
    \ (4)) == (\"3\"));\n    assert(candidate((4), (5)) == (\"4\"));\n    assert(candidate((5),\
    \ (6)) == (\"5\"));\n    assert(candidate((6), (7)) == (\"6\"));\n    assert(candidate((7),\
    \ (8)) == (\"7\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base(8, 3)\n// '22'\n// >>> change_base(8,\
    \ 2)\n// '1000'\n// >>> change_base(7, 2)\n// '111'\nstd::string change_base(long\
    \ x, long base) {\n    std::string ans = \"\";\n    long temp = x;\n    while\
    \ (temp > 0) {\n        int rem = temp % base;\n        ans = std::to_string(base)\
    \ + ans;\n        temp = temp / base;\n    }\n    return ans;\n}\nint main() {\n\
    \    auto candidate = change_base;\n    assert(candidate((8), (3)) == (\"22\"\
    ));\n    assert(candidate((9), (3)) == (\"100\"));\n    assert(candidate((234),\
    \ (2)) == (\"11101010\"));\n    assert(candidate((16), (2)) == (\"10000\"));\n\
    \    assert(candidate((8), (2)) == (\"1000\"));\n    assert(candidate((7), (2))\
    \ == (\"111\"));\n    assert(candidate((2), (3)) == (\"2\"));\n    assert(candidate((3),\
    \ (4)) == (\"3\"));\n    assert(candidate((4), (5)) == (\"4\"));\n    assert(candidate((5),\
    \ (6)) == (\"5\"));\n    assert(candidate((6), (7)) == (\"6\"));\n    assert(candidate((7),\
    \ (8)) == (\"7\"));\n}\n"
  stdout: ''
  stderr: "tmpzsabwunc: /tmp/tmpzsabwunc.cpp:24: int main(): Assertion `candidate((8),\
    \ (3)) == (\"22\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base(8, 3)\n// '22'\n// >>> change_base(8,\
    \ 2)\n// '1000'\n// >>> change_base(7, 2)\n// '111'\nstd::string change_base(long\
    \ x, long base) {\n    std::string ans = \"\";\n    while (x > 0) {\n        ans\
    \ = std::to_string(x % base) + ans;\n        x /= base;\n    }\n    return ans;\n\
    }\nint main() {\n    auto candidate = change_base;\n    assert(candidate((8),\
    \ (3)) == (\"22\"));\n    assert(candidate((9), (3)) == (\"100\"));\n    assert(candidate((234),\
    \ (2)) == (\"11101010\"));\n    assert(candidate((16), (2)) == (\"10000\"));\n\
    \    assert(candidate((8), (2)) == (\"1000\"));\n    assert(candidate((7), (2))\
    \ == (\"111\"));\n    assert(candidate((2), (3)) == (\"2\"));\n    assert(candidate((3),\
    \ (4)) == (\"3\"));\n    assert(candidate((4), (5)) == (\"4\"));\n    assert(candidate((5),\
    \ (6)) == (\"5\"));\n    assert(candidate((6), (7)) == (\"6\"));\n    assert(candidate((7),\
    \ (8)) == (\"7\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base(8, 3)\n// '22'\n// >>> change_base(8,\
    \ 2)\n// '1000'\n// >>> change_base(7, 2)\n// '111'\nstd::string change_base(long\
    \ x, long base) {\n    std::string ans = \"\";\n    long temp = x;\n    while\
    \ (temp != 0) {\n        ans = std::to_string(temp % base) + ans;\n        temp\
    \ = temp / base;\n    }\n    return ans;\n}\nint main() {\n    auto candidate\
    \ = change_base;\n    assert(candidate((8), (3)) == (\"22\"));\n    assert(candidate((9),\
    \ (3)) == (\"100\"));\n    assert(candidate((234), (2)) == (\"11101010\"));\n\
    \    assert(candidate((16), (2)) == (\"10000\"));\n    assert(candidate((8), (2))\
    \ == (\"1000\"));\n    assert(candidate((7), (2)) == (\"111\"));\n    assert(candidate((2),\
    \ (3)) == (\"2\"));\n    assert(candidate((3), (4)) == (\"3\"));\n    assert(candidate((4),\
    \ (5)) == (\"4\"));\n    assert(candidate((5), (6)) == (\"5\"));\n    assert(candidate((6),\
    \ (7)) == (\"6\"));\n    assert(candidate((7), (8)) == (\"7\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base(8, 3)\n// '22'\n// >>> change_base(8,\
    \ 2)\n// '1000'\n// >>> change_base(7, 2)\n// '111'\nstd::string change_base(long\
    \ x, long base) {\n    std::string ans = \"\";\n    long tmp = x;\n    while (base\
    \ > 0) {\n        tmp = tmp / base;\n        ans = std::to_string(tmp % base)\
    \ + ans;\n        base--;\n    }\n    while (base < 0) {\n        tmp = tmp *\
    \ base;\n        ans = std::to_string(tmp % base) + ans;\n        base++;\n  \
    \  }\n    return ans;\n}\nint main() {\n    auto candidate = change_base;\n  \
    \  assert(candidate((8), (3)) == (\"22\"));\n    assert(candidate((9), (3)) ==\
    \ (\"100\"));\n    assert(candidate((234), (2)) == (\"11101010\"));\n    assert(candidate((16),\
    \ (2)) == (\"10000\"));\n    assert(candidate((8), (2)) == (\"1000\"));\n    assert(candidate((7),\
    \ (2)) == (\"111\"));\n    assert(candidate((2), (3)) == (\"2\"));\n    assert(candidate((3),\
    \ (4)) == (\"3\"));\n    assert(candidate((4), (5)) == (\"4\"));\n    assert(candidate((5),\
    \ (6)) == (\"5\"));\n    assert(candidate((6), (7)) == (\"6\"));\n    assert(candidate((7),\
    \ (8)) == (\"7\"));\n}\n"
  stdout: ''
  stderr: "tmpe85kou9v: /tmp/tmpe85kou9v.cpp:29: int main(): Assertion `candidate((8),\
    \ (3)) == (\"22\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base(8, 3)\n// '22'\n// >>> change_base(8,\
    \ 2)\n// '1000'\n// >>> change_base(7, 2)\n// '111'\nstd::string change_base(long\
    \ x, long base) {\n    std::string ans = \"\";\n    long n = x;\n    while (n\
    \ > 0) {\n        long r = n % base;\n        ans = std::to_string(r) + ans;\n\
    \        n = n / base;\n    }\n    return ans;\n}\nint main() {\n    auto candidate\
    \ = change_base;\n    assert(candidate((8), (3)) == (\"22\"));\n    assert(candidate((9),\
    \ (3)) == (\"100\"));\n    assert(candidate((234), (2)) == (\"11101010\"));\n\
    \    assert(candidate((16), (2)) == (\"10000\"));\n    assert(candidate((8), (2))\
    \ == (\"1000\"));\n    assert(candidate((7), (2)) == (\"111\"));\n    assert(candidate((2),\
    \ (3)) == (\"2\"));\n    assert(candidate((3), (4)) == (\"3\"));\n    assert(candidate((4),\
    \ (5)) == (\"4\"));\n    assert(candidate((5), (6)) == (\"5\"));\n    assert(candidate((6),\
    \ (7)) == (\"6\"));\n    assert(candidate((7), (8)) == (\"7\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base(8, 3)\n// '22'\n// >>> change_base(8,\
    \ 2)\n// '1000'\n// >>> change_base(7, 2)\n// '111'\nstd::string change_base(long\
    \ x, long base) {\n    std::string ans = \"\";\n    long temp = x;\n    while\
    \ (temp != 0) {\n        ans = std::to_string(temp % base) + ans;\n        temp\
    \ = temp / base;\n    }\n    return ans;\n}\nint main() {\n    auto candidate\
    \ = change_base;\n    assert(candidate((8), (3)) == (\"22\"));\n    assert(candidate((9),\
    \ (3)) == (\"100\"));\n    assert(candidate((234), (2)) == (\"11101010\"));\n\
    \    assert(candidate((16), (2)) == (\"10000\"));\n    assert(candidate((8), (2))\
    \ == (\"1000\"));\n    assert(candidate((7), (2)) == (\"111\"));\n    assert(candidate((2),\
    \ (3)) == (\"2\"));\n    assert(candidate((3), (4)) == (\"3\"));\n    assert(candidate((4),\
    \ (5)) == (\"4\"));\n    assert(candidate((5), (6)) == (\"5\"));\n    assert(candidate((6),\
    \ (7)) == (\"6\"));\n    assert(candidate((7), (8)) == (\"7\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base(8, 3)\n// '22'\n// >>> change_base(8,\
    \ 2)\n// '1000'\n// >>> change_base(7, 2)\n// '111'\nstd::string change_base(long\
    \ x, long base) {\n    std::string ans = \"\";\n    long n = x;\n    while (n\
    \ > 0) {\n        long r = n % base;\n        ans = std::to_string(r) + ans;\n\
    \        n = n / base;\n    }\n    return ans;\n}\nint main() {\n    auto candidate\
    \ = change_base;\n    assert(candidate((8), (3)) == (\"22\"));\n    assert(candidate((9),\
    \ (3)) == (\"100\"));\n    assert(candidate((234), (2)) == (\"11101010\"));\n\
    \    assert(candidate((16), (2)) == (\"10000\"));\n    assert(candidate((8), (2))\
    \ == (\"1000\"));\n    assert(candidate((7), (2)) == (\"111\"));\n    assert(candidate((2),\
    \ (3)) == (\"2\"));\n    assert(candidate((3), (4)) == (\"3\"));\n    assert(candidate((4),\
    \ (5)) == (\"4\"));\n    assert(candidate((5), (6)) == (\"5\"));\n    assert(candidate((6),\
    \ (7)) == (\"6\"));\n    assert(candidate((7), (8)) == (\"7\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base(8, 3)\n// '22'\n// >>> change_base(8,\
    \ 2)\n// '1000'\n// >>> change_base(7, 2)\n// '111'\nstd::string change_base(long\
    \ x, long base) {\n    std::string ans = \"\";\n    long tmp = x;\n    while (base\
    \ > 0) {\n        tmp = tmp / base;\n        ans = std::to_string(tmp % base)\
    \ + ans;\n        base = base * 10;\n    }\n    return ans;\n}\nint main() {\n\
    \    auto candidate = change_base;\n    assert(candidate((8), (3)) == (\"22\"\
    ));\n    assert(candidate((9), (3)) == (\"100\"));\n    assert(candidate((234),\
    \ (2)) == (\"11101010\"));\n    assert(candidate((16), (2)) == (\"10000\"));\n\
    \    assert(candidate((8), (2)) == (\"1000\"));\n    assert(candidate((7), (2))\
    \ == (\"111\"));\n    assert(candidate((2), (3)) == (\"2\"));\n    assert(candidate((3),\
    \ (4)) == (\"3\"));\n    assert(candidate((4), (5)) == (\"4\"));\n    assert(candidate((5),\
    \ (6)) == (\"5\"));\n    assert(candidate((6), (7)) == (\"6\"));\n    assert(candidate((7),\
    \ (8)) == (\"7\"));\n}\n"
  stdout: ''
  stderr: "tmp_pbicwxp: /tmp/tmp_pbicwxp.cpp:24: int main(): Assertion `candidate((8),\
    \ (3)) == (\"22\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base(8, 3)\n// '22'\n// >>> change_base(8,\
    \ 2)\n// '1000'\n// >>> change_base(7, 2)\n// '111'\nstd::string change_base(long\
    \ x, long base) {\n    std::string ans = \"\";\n    long temp = 0;\n    temp =\
    \ x;\n    while (temp != 0) {\n        ans += (temp % base);\n        temp /=\
    \ base;\n    }\n    return ans;\n}\nint main() {\n    auto candidate = change_base;\n\
    \    assert(candidate((8), (3)) == (\"22\"));\n    assert(candidate((9), (3))\
    \ == (\"100\"));\n    assert(candidate((234), (2)) == (\"11101010\"));\n    assert(candidate((16),\
    \ (2)) == (\"10000\"));\n    assert(candidate((8), (2)) == (\"1000\"));\n    assert(candidate((7),\
    \ (2)) == (\"111\"));\n    assert(candidate((2), (3)) == (\"2\"));\n    assert(candidate((3),\
    \ (4)) == (\"3\"));\n    assert(candidate((4), (5)) == (\"4\"));\n    assert(candidate((5),\
    \ (6)) == (\"5\"));\n    assert(candidate((6), (7)) == (\"6\"));\n    assert(candidate((7),\
    \ (8)) == (\"7\"));\n}\n"
  stdout: ''
  stderr: "tmpwmvy997z: /tmp/tmpwmvy997z.cpp:24: int main(): Assertion `candidate((8),\
    \ (3)) == (\"22\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base(8, 3)\n// '22'\n// >>> change_base(8,\
    \ 2)\n// '1000'\n// >>> change_base(7, 2)\n// '111'\nstd::string change_base(long\
    \ x, long base) {\n    long rem = x % base;\n    std::string ans = \"\";\n   \
    \ while (x > 0) {\n        ans += (char)(x % base);\n        x /= base;\n    }\n\
    \    if (rem != 0) {\n        ans += (char)(rem + base);\n    }\n    return ans;\n\
    }\nint main() {\n    auto candidate = change_base;\n    assert(candidate((8),\
    \ (3)) == (\"22\"));\n    assert(candidate((9), (3)) == (\"100\"));\n    assert(candidate((234),\
    \ (2)) == (\"11101010\"));\n    assert(candidate((16), (2)) == (\"10000\"));\n\
    \    assert(candidate((8), (2)) == (\"1000\"));\n    assert(candidate((7), (2))\
    \ == (\"111\"));\n    assert(candidate((2), (3)) == (\"2\"));\n    assert(candidate((3),\
    \ (4)) == (\"3\"));\n    assert(candidate((4), (5)) == (\"4\"));\n    assert(candidate((5),\
    \ (6)) == (\"5\"));\n    assert(candidate((6), (7)) == (\"6\"));\n    assert(candidate((7),\
    \ (8)) == (\"7\"));\n}\n"
  stdout: ''
  stderr: "tmps5qgp8ry: /tmp/tmps5qgp8ry.cpp:26: int main(): Assertion `candidate((8),\
    \ (3)) == (\"22\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base(8, 3)\n// '22'\n// >>> change_base(8,\
    \ 2)\n// '1000'\n// >>> change_base(7, 2)\n// '111'\nstd::string change_base(long\
    \ x, long base) {\n    std::string ans = \"\";\n    long temp = x;\n    while\
    \ (temp > 0) {\n        int digit = temp % base;\n        ans = std::to_string(digit)\
    \ + ans;\n        temp = temp / base;\n    }\n    return ans;\n}\nint main() {\n\
    \    auto candidate = change_base;\n    assert(candidate((8), (3)) == (\"22\"\
    ));\n    assert(candidate((9), (3)) == (\"100\"));\n    assert(candidate((234),\
    \ (2)) == (\"11101010\"));\n    assert(candidate((16), (2)) == (\"10000\"));\n\
    \    assert(candidate((8), (2)) == (\"1000\"));\n    assert(candidate((7), (2))\
    \ == (\"111\"));\n    assert(candidate((2), (3)) == (\"2\"));\n    assert(candidate((3),\
    \ (4)) == (\"3\"));\n    assert(candidate((4), (5)) == (\"4\"));\n    assert(candidate((5),\
    \ (6)) == (\"5\"));\n    assert(candidate((6), (7)) == (\"6\"));\n    assert(candidate((7),\
    \ (8)) == (\"7\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base(8, 3)\n// '22'\n// >>> change_base(8,\
    \ 2)\n// '1000'\n// >>> change_base(7, 2)\n// '111'\nstd::string change_base(long\
    \ x, long base) {\n    std::string ans = \"\";\n    long temp = x;\n    while\
    \ (temp > 0) {\n        ans = std::to_string(temp % base) + ans;\n        temp\
    \ /= base;\n    }\n    return ans;\n}\nint main() {\n    auto candidate = change_base;\n\
    \    assert(candidate((8), (3)) == (\"22\"));\n    assert(candidate((9), (3))\
    \ == (\"100\"));\n    assert(candidate((234), (2)) == (\"11101010\"));\n    assert(candidate((16),\
    \ (2)) == (\"10000\"));\n    assert(candidate((8), (2)) == (\"1000\"));\n    assert(candidate((7),\
    \ (2)) == (\"111\"));\n    assert(candidate((2), (3)) == (\"2\"));\n    assert(candidate((3),\
    \ (4)) == (\"3\"));\n    assert(candidate((4), (5)) == (\"4\"));\n    assert(candidate((5),\
    \ (6)) == (\"5\"));\n    assert(candidate((6), (7)) == (\"6\"));\n    assert(candidate((7),\
    \ (8)) == (\"7\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base(8, 3)\n// '22'\n// >>> change_base(8,\
    \ 2)\n// '1000'\n// >>> change_base(7, 2)\n// '111'\nstd::string change_base(long\
    \ x, long base) {\n    std::string ans = \"\";\n    while (x > 0) {\n        ans\
    \ = std::to_string(x / base) + ans;\n        x %= base;\n    }\n    return ans;\n\
    }\nint main() {\n    auto candidate = change_base;\n    assert(candidate((8),\
    \ (3)) == (\"22\"));\n    assert(candidate((9), (3)) == (\"100\"));\n    assert(candidate((234),\
    \ (2)) == (\"11101010\"));\n    assert(candidate((16), (2)) == (\"10000\"));\n\
    \    assert(candidate((8), (2)) == (\"1000\"));\n    assert(candidate((7), (2))\
    \ == (\"111\"));\n    assert(candidate((2), (3)) == (\"2\"));\n    assert(candidate((3),\
    \ (4)) == (\"3\"));\n    assert(candidate((4), (5)) == (\"4\"));\n    assert(candidate((5),\
    \ (6)) == (\"5\"));\n    assert(candidate((6), (7)) == (\"6\"));\n    assert(candidate((7),\
    \ (8)) == (\"7\"));\n}\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base(8, 3)\n// '22'\n// >>> change_base(8,\
    \ 2)\n// '1000'\n// >>> change_base(7, 2)\n// '111'\nstd::string change_base(long\
    \ x, long base) {\n    std::string ans = \"\";\n    long temp = x;\n    while\
    \ (temp > 0) {\n        int digit = temp % base;\n        ans += digit;\n    \
    \    temp /= base;\n    }\n    return ans;\n}\nint main() {\n    auto candidate\
    \ = change_base;\n    assert(candidate((8), (3)) == (\"22\"));\n    assert(candidate((9),\
    \ (3)) == (\"100\"));\n    assert(candidate((234), (2)) == (\"11101010\"));\n\
    \    assert(candidate((16), (2)) == (\"10000\"));\n    assert(candidate((8), (2))\
    \ == (\"1000\"));\n    assert(candidate((7), (2)) == (\"111\"));\n    assert(candidate((2),\
    \ (3)) == (\"2\"));\n    assert(candidate((3), (4)) == (\"3\"));\n    assert(candidate((4),\
    \ (5)) == (\"4\"));\n    assert(candidate((5), (6)) == (\"5\"));\n    assert(candidate((6),\
    \ (7)) == (\"6\"));\n    assert(candidate((7), (8)) == (\"7\"));\n}\n"
  stdout: ''
  stderr: "tmpp27ampkv: /tmp/tmpp27ampkv.cpp:24: int main(): Assertion `candidate((8),\
    \ (3)) == (\"22\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base(8, 3)\n// '22'\n// >>> change_base(8,\
    \ 2)\n// '1000'\n// >>> change_base(7, 2)\n// '111'\nstd::string change_base(long\
    \ x, long base) {\n    std::string ans = \"\";\n    while (x > 0) {\n        ans\
    \ = std::to_string(x % base) + ans;\n        x = x / base;\n    }\n    return\
    \ ans;\n}\nint main() {\n    auto candidate = change_base;\n    assert(candidate((8),\
    \ (3)) == (\"22\"));\n    assert(candidate((9), (3)) == (\"100\"));\n    assert(candidate((234),\
    \ (2)) == (\"11101010\"));\n    assert(candidate((16), (2)) == (\"10000\"));\n\
    \    assert(candidate((8), (2)) == (\"1000\"));\n    assert(candidate((7), (2))\
    \ == (\"111\"));\n    assert(candidate((2), (3)) == (\"2\"));\n    assert(candidate((3),\
    \ (4)) == (\"3\"));\n    assert(candidate((4), (5)) == (\"4\"));\n    assert(candidate((5),\
    \ (6)) == (\"5\"));\n    assert(candidate((6), (7)) == (\"6\"));\n    assert(candidate((7),\
    \ (8)) == (\"7\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base(8, 3)\n// '22'\n// >>> change_base(8,\
    \ 2)\n// '1000'\n// >>> change_base(7, 2)\n// '111'\nstd::string change_base(long\
    \ x, long base) {\n    std::string ans = \"\";\n    long temp = 0;\n    while\
    \ (x > 0) {\n        temp = x % base;\n        ans = std::to_string(temp) + ans;\n\
    \        x = x / base;\n    }\n    return ans;\n}\nint main() {\n    auto candidate\
    \ = change_base;\n    assert(candidate((8), (3)) == (\"22\"));\n    assert(candidate((9),\
    \ (3)) == (\"100\"));\n    assert(candidate((234), (2)) == (\"11101010\"));\n\
    \    assert(candidate((16), (2)) == (\"10000\"));\n    assert(candidate((8), (2))\
    \ == (\"1000\"));\n    assert(candidate((7), (2)) == (\"111\"));\n    assert(candidate((2),\
    \ (3)) == (\"2\"));\n    assert(candidate((3), (4)) == (\"3\"));\n    assert(candidate((4),\
    \ (5)) == (\"4\"));\n    assert(candidate((5), (6)) == (\"5\"));\n    assert(candidate((6),\
    \ (7)) == (\"6\"));\n    assert(candidate((7), (8)) == (\"7\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base(8, 3)\n// '22'\n// >>> change_base(8,\
    \ 2)\n// '1000'\n// >>> change_base(7, 2)\n// '111'\nstd::string change_base(long\
    \ x, long base) {\n    std::string ans = \"\";\n    while (x > 0) {\n        ans\
    \ += (char)(x % base);\n        x /= base;\n    }\n    return ans;\n}\nint main()\
    \ {\n    auto candidate = change_base;\n    assert(candidate((8), (3)) == (\"\
    22\"));\n    assert(candidate((9), (3)) == (\"100\"));\n    assert(candidate((234),\
    \ (2)) == (\"11101010\"));\n    assert(candidate((16), (2)) == (\"10000\"));\n\
    \    assert(candidate((8), (2)) == (\"1000\"));\n    assert(candidate((7), (2))\
    \ == (\"111\"));\n    assert(candidate((2), (3)) == (\"2\"));\n    assert(candidate((3),\
    \ (4)) == (\"3\"));\n    assert(candidate((4), (5)) == (\"4\"));\n    assert(candidate((5),\
    \ (6)) == (\"5\"));\n    assert(candidate((6), (7)) == (\"6\"));\n    assert(candidate((7),\
    \ (8)) == (\"7\"));\n}\n"
  stdout: ''
  stderr: "tmpsqd5_v2e: /tmp/tmpsqd5_v2e.cpp:22: int main(): Assertion `candidate((8),\
    \ (3)) == (\"22\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base(8, 3)\n// '22'\n// >>> change_base(8,\
    \ 2)\n// '1000'\n// >>> change_base(7, 2)\n// '111'\nstd::string change_base(long\
    \ x, long base) {\n    std::string ans = \"\";\n    long temp = x;\n    while\
    \ (temp != 0) {\n        ans += (char)(temp % base);\n        temp /= base;\n\
    \    }\n    return ans;\n}\nint main() {\n    auto candidate = change_base;\n\
    \    assert(candidate((8), (3)) == (\"22\"));\n    assert(candidate((9), (3))\
    \ == (\"100\"));\n    assert(candidate((234), (2)) == (\"11101010\"));\n    assert(candidate((16),\
    \ (2)) == (\"10000\"));\n    assert(candidate((8), (2)) == (\"1000\"));\n    assert(candidate((7),\
    \ (2)) == (\"111\"));\n    assert(candidate((2), (3)) == (\"2\"));\n    assert(candidate((3),\
    \ (4)) == (\"3\"));\n    assert(candidate((4), (5)) == (\"4\"));\n    assert(candidate((5),\
    \ (6)) == (\"5\"));\n    assert(candidate((6), (7)) == (\"6\"));\n    assert(candidate((7),\
    \ (8)) == (\"7\"));\n}\n"
  stdout: ''
  stderr: "tmprhzf_70c: /tmp/tmprhzf_70c.cpp:23: int main(): Assertion `candidate((8),\
    \ (3)) == (\"22\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base(8, 3)\n// '22'\n// >>> change_base(8,\
    \ 2)\n// '1000'\n// >>> change_base(7, 2)\n// '111'\nstd::string change_base(long\
    \ x, long base) {\n    std::string ans = \"\";\n    long temp = x;\n    while\
    \ (temp != 0) {\n        ans = std::to_string(temp % base) + ans;\n        temp\
    \ /= base;\n    }\n    return ans;\n}\nint main() {\n    auto candidate = change_base;\n\
    \    assert(candidate((8), (3)) == (\"22\"));\n    assert(candidate((9), (3))\
    \ == (\"100\"));\n    assert(candidate((234), (2)) == (\"11101010\"));\n    assert(candidate((16),\
    \ (2)) == (\"10000\"));\n    assert(candidate((8), (2)) == (\"1000\"));\n    assert(candidate((7),\
    \ (2)) == (\"111\"));\n    assert(candidate((2), (3)) == (\"2\"));\n    assert(candidate((3),\
    \ (4)) == (\"3\"));\n    assert(candidate((4), (5)) == (\"4\"));\n    assert(candidate((5),\
    \ (6)) == (\"5\"));\n    assert(candidate((6), (7)) == (\"6\"));\n    assert(candidate((7),\
    \ (8)) == (\"7\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base(8, 3)\n// '22'\n// >>> change_base(8,\
    \ 2)\n// '1000'\n// >>> change_base(7, 2)\n// '111'\nstd::string change_base(long\
    \ x, long base) {\n    std::string ans = \"\";\n    while (x > 0) {\n        ans\
    \ += (char)(x % base);\n        x /= base;\n    }\n    return ans;\n}\nint main()\
    \ {\n    auto candidate = change_base;\n    assert(candidate((8), (3)) == (\"\
    22\"));\n    assert(candidate((9), (3)) == (\"100\"));\n    assert(candidate((234),\
    \ (2)) == (\"11101010\"));\n    assert(candidate((16), (2)) == (\"10000\"));\n\
    \    assert(candidate((8), (2)) == (\"1000\"));\n    assert(candidate((7), (2))\
    \ == (\"111\"));\n    assert(candidate((2), (3)) == (\"2\"));\n    assert(candidate((3),\
    \ (4)) == (\"3\"));\n    assert(candidate((4), (5)) == (\"4\"));\n    assert(candidate((5),\
    \ (6)) == (\"5\"));\n    assert(candidate((6), (7)) == (\"6\"));\n    assert(candidate((7),\
    \ (8)) == (\"7\"));\n}\n"
  stdout: ''
  stderr: "tmpw8t4_9fj: /tmp/tmpw8t4_9fj.cpp:22: int main(): Assertion `candidate((8),\
    \ (3)) == (\"22\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base(8, 3)\n// '22'\n// >>> change_base(8,\
    \ 2)\n// '1000'\n// >>> change_base(7, 2)\n// '111'\nstd::string change_base(long\
    \ x, long base) {\n    long temp = x;\n    std::string ans = \"\";\n    while\
    \ (temp != 0) {\n        int digit = temp % base;\n        ans = std::to_string(digit)\
    \ + ans;\n        temp /= base;\n    }\n    return ans;\n}\nint main() {\n   \
    \ auto candidate = change_base;\n    assert(candidate((8), (3)) == (\"22\"));\n\
    \    assert(candidate((9), (3)) == (\"100\"));\n    assert(candidate((234), (2))\
    \ == (\"11101010\"));\n    assert(candidate((16), (2)) == (\"10000\"));\n    assert(candidate((8),\
    \ (2)) == (\"1000\"));\n    assert(candidate((7), (2)) == (\"111\"));\n    assert(candidate((2),\
    \ (3)) == (\"2\"));\n    assert(candidate((3), (4)) == (\"3\"));\n    assert(candidate((4),\
    \ (5)) == (\"4\"));\n    assert(candidate((5), (6)) == (\"5\"));\n    assert(candidate((6),\
    \ (7)) == (\"6\"));\n    assert(candidate((7), (8)) == (\"7\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base(8, 3)\n// '22'\n// >>> change_base(8,\
    \ 2)\n// '1000'\n// >>> change_base(7, 2)\n// '111'\nstd::string change_base(long\
    \ x, long base) {\n    std::string ans = \"\";\n    while (x > 0) {\n        ans\
    \ += (char)(x % base);\n        x /= base;\n    }\n    return ans;\n}\nint main()\
    \ {\n    auto candidate = change_base;\n    assert(candidate((8), (3)) == (\"\
    22\"));\n    assert(candidate((9), (3)) == (\"100\"));\n    assert(candidate((234),\
    \ (2)) == (\"11101010\"));\n    assert(candidate((16), (2)) == (\"10000\"));\n\
    \    assert(candidate((8), (2)) == (\"1000\"));\n    assert(candidate((7), (2))\
    \ == (\"111\"));\n    assert(candidate((2), (3)) == (\"2\"));\n    assert(candidate((3),\
    \ (4)) == (\"3\"));\n    assert(candidate((4), (5)) == (\"4\"));\n    assert(candidate((5),\
    \ (6)) == (\"5\"));\n    assert(candidate((6), (7)) == (\"6\"));\n    assert(candidate((7),\
    \ (8)) == (\"7\"));\n}\n"
  stdout: ''
  stderr: "tmpt9mmz3mx: /tmp/tmpt9mmz3mx.cpp:22: int main(): Assertion `candidate((8),\
    \ (3)) == (\"22\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base(8, 3)\n// '22'\n// >>> change_base(8,\
    \ 2)\n// '1000'\n// >>> change_base(7, 2)\n// '111'\nstd::string change_base(long\
    \ x, long base) {\n    std::string ans = \"\";\n    while (x != 0) {\n       \
    \ ans += (char)(x % base);\n        x /= base;\n    }\n    return ans;\n}\nint\
    \ main() {\n    auto candidate = change_base;\n    assert(candidate((8), (3))\
    \ == (\"22\"));\n    assert(candidate((9), (3)) == (\"100\"));\n    assert(candidate((234),\
    \ (2)) == (\"11101010\"));\n    assert(candidate((16), (2)) == (\"10000\"));\n\
    \    assert(candidate((8), (2)) == (\"1000\"));\n    assert(candidate((7), (2))\
    \ == (\"111\"));\n    assert(candidate((2), (3)) == (\"2\"));\n    assert(candidate((3),\
    \ (4)) == (\"3\"));\n    assert(candidate((4), (5)) == (\"4\"));\n    assert(candidate((5),\
    \ (6)) == (\"5\"));\n    assert(candidate((6), (7)) == (\"6\"));\n    assert(candidate((7),\
    \ (8)) == (\"7\"));\n}\n"
  stdout: ''
  stderr: "tmpm1wx1wpo: /tmp/tmpm1wx1wpo.cpp:22: int main(): Assertion `candidate((8),\
    \ (3)) == (\"22\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base(8, 3)\n// '22'\n// >>> change_base(8,\
    \ 2)\n// '1000'\n// >>> change_base(7, 2)\n// '111'\nstd::string change_base(long\
    \ x, long base) {\n    std::string ans = \"\";\n    long n = x;\n    while (n\
    \ > 0) {\n        ans += n % base;\n        n /= base;\n    }\n    return ans;\n\
    }\nint main() {\n    auto candidate = change_base;\n    assert(candidate((8),\
    \ (3)) == (\"22\"));\n    assert(candidate((9), (3)) == (\"100\"));\n    assert(candidate((234),\
    \ (2)) == (\"11101010\"));\n    assert(candidate((16), (2)) == (\"10000\"));\n\
    \    assert(candidate((8), (2)) == (\"1000\"));\n    assert(candidate((7), (2))\
    \ == (\"111\"));\n    assert(candidate((2), (3)) == (\"2\"));\n    assert(candidate((3),\
    \ (4)) == (\"3\"));\n    assert(candidate((4), (5)) == (\"4\"));\n    assert(candidate((5),\
    \ (6)) == (\"5\"));\n    assert(candidate((6), (7)) == (\"6\"));\n    assert(candidate((7),\
    \ (8)) == (\"7\"));\n}\n"
  stdout: ''
  stderr: "tmpofxofjlw: /tmp/tmpofxofjlw.cpp:23: int main(): Assertion `candidate((8),\
    \ (3)) == (\"22\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base(8, 3)\n// '22'\n// >>> change_base(8,\
    \ 2)\n// '1000'\n// >>> change_base(7, 2)\n// '111'\nstd::string change_base(long\
    \ x, long base) {\n    std::string ans = \"\";\n    long temp = x;\n    while\
    \ (temp != 0) {\n        int digit = temp % base;\n        ans += digit;\n   \
    \     temp /= base;\n    }\n    return ans;\n}\nint main() {\n    auto candidate\
    \ = change_base;\n    assert(candidate((8), (3)) == (\"22\"));\n    assert(candidate((9),\
    \ (3)) == (\"100\"));\n    assert(candidate((234), (2)) == (\"11101010\"));\n\
    \    assert(candidate((16), (2)) == (\"10000\"));\n    assert(candidate((8), (2))\
    \ == (\"1000\"));\n    assert(candidate((7), (2)) == (\"111\"));\n    assert(candidate((2),\
    \ (3)) == (\"2\"));\n    assert(candidate((3), (4)) == (\"3\"));\n    assert(candidate((4),\
    \ (5)) == (\"4\"));\n    assert(candidate((5), (6)) == (\"5\"));\n    assert(candidate((6),\
    \ (7)) == (\"6\"));\n    assert(candidate((7), (8)) == (\"7\"));\n}\n"
  stdout: ''
  stderr: "tmp6656vs5y: /tmp/tmp6656vs5y.cpp:24: int main(): Assertion `candidate((8),\
    \ (3)) == (\"22\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base(8, 3)\n// '22'\n// >>> change_base(8,\
    \ 2)\n// '1000'\n// >>> change_base(7, 2)\n// '111'\nstd::string change_base(long\
    \ x, long base) {\n    std::string ans = \"\";\n    long temp = x;\n    while\
    \ (temp > 0) {\n        int rem = temp % base;\n        ans += (char)(rem + '0');\n\
    \        temp /= base;\n    }\n    return ans;\n}\nint main() {\n    auto candidate\
    \ = change_base;\n    assert(candidate((8), (3)) == (\"22\"));\n    assert(candidate((9),\
    \ (3)) == (\"100\"));\n    assert(candidate((234), (2)) == (\"11101010\"));\n\
    \    assert(candidate((16), (2)) == (\"10000\"));\n    assert(candidate((8), (2))\
    \ == (\"1000\"));\n    assert(candidate((7), (2)) == (\"111\"));\n    assert(candidate((2),\
    \ (3)) == (\"2\"));\n    assert(candidate((3), (4)) == (\"3\"));\n    assert(candidate((4),\
    \ (5)) == (\"4\"));\n    assert(candidate((5), (6)) == (\"5\"));\n    assert(candidate((6),\
    \ (7)) == (\"6\"));\n    assert(candidate((7), (8)) == (\"7\"));\n}\n"
  stdout: ''
  stderr: "tmpa6xsfsjv: /tmp/tmpa6xsfsjv.cpp:25: int main(): Assertion `candidate((9),\
    \ (3)) == (\"100\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base(8, 3)\n// '22'\n// >>> change_base(8,\
    \ 2)\n// '1000'\n// >>> change_base(7, 2)\n// '111'\nstd::string change_base(long\
    \ x, long base) {\n    std::string ans = \"\";\n    while (x > 0) {\n        ans\
    \ += (char)(x % base);\n        x /= base;\n    }\n    return ans;\n}\nint main()\
    \ {\n    auto candidate = change_base;\n    assert(candidate((8), (3)) == (\"\
    22\"));\n    assert(candidate((9), (3)) == (\"100\"));\n    assert(candidate((234),\
    \ (2)) == (\"11101010\"));\n    assert(candidate((16), (2)) == (\"10000\"));\n\
    \    assert(candidate((8), (2)) == (\"1000\"));\n    assert(candidate((7), (2))\
    \ == (\"111\"));\n    assert(candidate((2), (3)) == (\"2\"));\n    assert(candidate((3),\
    \ (4)) == (\"3\"));\n    assert(candidate((4), (5)) == (\"4\"));\n    assert(candidate((5),\
    \ (6)) == (\"5\"));\n    assert(candidate((6), (7)) == (\"6\"));\n    assert(candidate((7),\
    \ (8)) == (\"7\"));\n}\n"
  stdout: ''
  stderr: "tmpzgm0bpqz: /tmp/tmpzgm0bpqz.cpp:22: int main(): Assertion `candidate((8),\
    \ (3)) == (\"22\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base(8, 3)\n// '22'\n// >>> change_base(8,\
    \ 2)\n// '1000'\n// >>> change_base(7, 2)\n// '111'\nstd::string change_base(long\
    \ x, long base) {\n    std::string ans = \"\";\n    while (x > 0) {\n        ans\
    \ += (char)(x % base);\n        x /= base;\n    }\n    return ans;\n}\nint main()\
    \ {\n    auto candidate = change_base;\n    assert(candidate((8), (3)) == (\"\
    22\"));\n    assert(candidate((9), (3)) == (\"100\"));\n    assert(candidate((234),\
    \ (2)) == (\"11101010\"));\n    assert(candidate((16), (2)) == (\"10000\"));\n\
    \    assert(candidate((8), (2)) == (\"1000\"));\n    assert(candidate((7), (2))\
    \ == (\"111\"));\n    assert(candidate((2), (3)) == (\"2\"));\n    assert(candidate((3),\
    \ (4)) == (\"3\"));\n    assert(candidate((4), (5)) == (\"4\"));\n    assert(candidate((5),\
    \ (6)) == (\"5\"));\n    assert(candidate((6), (7)) == (\"6\"));\n    assert(candidate((7),\
    \ (8)) == (\"7\"));\n}\n"
  stdout: ''
  stderr: "tmpbrg0009x: /tmp/tmpbrg0009x.cpp:22: int main(): Assertion `candidate((8),\
    \ (3)) == (\"22\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base(8, 3)\n// '22'\n// >>> change_base(8,\
    \ 2)\n// '1000'\n// >>> change_base(7, 2)\n// '111'\nstd::string change_base(long\
    \ x, long base) {\n    std::string ans = \"\";\n    long temp = x;\n    while\
    \ (temp > 0) {\n        ans += (temp % base);\n        temp /= base;\n    }\n\
    \    return ans;\n}\nint main() {\n    auto candidate = change_base;\n    assert(candidate((8),\
    \ (3)) == (\"22\"));\n    assert(candidate((9), (3)) == (\"100\"));\n    assert(candidate((234),\
    \ (2)) == (\"11101010\"));\n    assert(candidate((16), (2)) == (\"10000\"));\n\
    \    assert(candidate((8), (2)) == (\"1000\"));\n    assert(candidate((7), (2))\
    \ == (\"111\"));\n    assert(candidate((2), (3)) == (\"2\"));\n    assert(candidate((3),\
    \ (4)) == (\"3\"));\n    assert(candidate((4), (5)) == (\"4\"));\n    assert(candidate((5),\
    \ (6)) == (\"5\"));\n    assert(candidate((6), (7)) == (\"6\"));\n    assert(candidate((7),\
    \ (8)) == (\"7\"));\n}\n"
  stdout: ''
  stderr: "tmp148ybyf9: /tmp/tmp148ybyf9.cpp:23: int main(): Assertion `candidate((8),\
    \ (3)) == (\"22\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base(8, 3)\n// '22'\n// >>> change_base(8,\
    \ 2)\n// '1000'\n// >>> change_base(7, 2)\n// '111'\nstd::string change_base(long\
    \ x, long base) {\n    long res = 0;\n    while (x > 0) {\n        res += x %\
    \ base;\n        x /= base;\n    }\n    return std::to_string(res);\n}\nint main()\
    \ {\n    auto candidate = change_base;\n    assert(candidate((8), (3)) == (\"\
    22\"));\n    assert(candidate((9), (3)) == (\"100\"));\n    assert(candidate((234),\
    \ (2)) == (\"11101010\"));\n    assert(candidate((16), (2)) == (\"10000\"));\n\
    \    assert(candidate((8), (2)) == (\"1000\"));\n    assert(candidate((7), (2))\
    \ == (\"111\"));\n    assert(candidate((2), (3)) == (\"2\"));\n    assert(candidate((3),\
    \ (4)) == (\"3\"));\n    assert(candidate((4), (5)) == (\"4\"));\n    assert(candidate((5),\
    \ (6)) == (\"5\"));\n    assert(candidate((6), (7)) == (\"6\"));\n    assert(candidate((7),\
    \ (8)) == (\"7\"));\n}\n"
  stdout: ''
  stderr: "tmp5lh40e6w: /tmp/tmp5lh40e6w.cpp:22: int main(): Assertion `candidate((8),\
    \ (3)) == (\"22\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base(8, 3)\n// '22'\n// >>> change_base(8,\
    \ 2)\n// '1000'\n// >>> change_base(7, 2)\n// '111'\nstd::string change_base(long\
    \ x, long base) {\n    std::string ans = \"\";\n    long temp = x;\n    while\
    \ (temp > 0) {\n        long rem = temp % base;\n        ans = std::to_string(rem)\
    \ + ans;\n        temp = temp / base;\n    }\n    return ans;\n}\nint main() {\n\
    \    auto candidate = change_base;\n    assert(candidate((8), (3)) == (\"22\"\
    ));\n    assert(candidate((9), (3)) == (\"100\"));\n    assert(candidate((234),\
    \ (2)) == (\"11101010\"));\n    assert(candidate((16), (2)) == (\"10000\"));\n\
    \    assert(candidate((8), (2)) == (\"1000\"));\n    assert(candidate((7), (2))\
    \ == (\"111\"));\n    assert(candidate((2), (3)) == (\"2\"));\n    assert(candidate((3),\
    \ (4)) == (\"3\"));\n    assert(candidate((4), (5)) == (\"4\"));\n    assert(candidate((5),\
    \ (6)) == (\"5\"));\n    assert(candidate((6), (7)) == (\"6\"));\n    assert(candidate((7),\
    \ (8)) == (\"7\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base(8, 3)\n// '22'\n// >>> change_base(8,\
    \ 2)\n// '1000'\n// >>> change_base(7, 2)\n// '111'\nstd::string change_base(long\
    \ x, long base) {\n    std::string ans = \"\";\n    long rem = x;\n    while (x\
    \ != 0) {\n        rem = rem / base;\n        ans = std::to_string(rem) + ans;\n\
    \        x = x / base;\n    }\n    return ans;\n}\nint main() {\n    auto candidate\
    \ = change_base;\n    assert(candidate((8), (3)) == (\"22\"));\n    assert(candidate((9),\
    \ (3)) == (\"100\"));\n    assert(candidate((234), (2)) == (\"11101010\"));\n\
    \    assert(candidate((16), (2)) == (\"10000\"));\n    assert(candidate((8), (2))\
    \ == (\"1000\"));\n    assert(candidate((7), (2)) == (\"111\"));\n    assert(candidate((2),\
    \ (3)) == (\"2\"));\n    assert(candidate((3), (4)) == (\"3\"));\n    assert(candidate((4),\
    \ (5)) == (\"4\"));\n    assert(candidate((5), (6)) == (\"5\"));\n    assert(candidate((6),\
    \ (7)) == (\"6\"));\n    assert(candidate((7), (8)) == (\"7\"));\n}\n"
  stdout: ''
  stderr: "tmpwcc1qizq: /tmp/tmpwcc1qizq.cpp:24: int main(): Assertion `candidate((8),\
    \ (3)) == (\"22\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base(8, 3)\n// '22'\n// >>> change_base(8,\
    \ 2)\n// '1000'\n// >>> change_base(7, 2)\n// '111'\nstd::string change_base(long\
    \ x, long base) {\n    std::string ans = \"\";\n    long n = x;\n    while (n\
    \ > 0) {\n        long r = n / base;\n        ans = std::to_string(r) + ans;\n\
    \        n = n % base;\n    }\n    return ans;\n}\nint main() {\n    auto candidate\
    \ = change_base;\n    assert(candidate((8), (3)) == (\"22\"));\n    assert(candidate((9),\
    \ (3)) == (\"100\"));\n    assert(candidate((234), (2)) == (\"11101010\"));\n\
    \    assert(candidate((16), (2)) == (\"10000\"));\n    assert(candidate((8), (2))\
    \ == (\"1000\"));\n    assert(candidate((7), (2)) == (\"111\"));\n    assert(candidate((2),\
    \ (3)) == (\"2\"));\n    assert(candidate((3), (4)) == (\"3\"));\n    assert(candidate((4),\
    \ (5)) == (\"4\"));\n    assert(candidate((5), (6)) == (\"5\"));\n    assert(candidate((6),\
    \ (7)) == (\"6\"));\n    assert(candidate((7), (8)) == (\"7\"));\n}\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base(8, 3)\n// '22'\n// >>> change_base(8,\
    \ 2)\n// '1000'\n// >>> change_base(7, 2)\n// '111'\nstd::string change_base(long\
    \ x, long base) {\n    std::string ans = \"\";\n    while (x > 0) {\n        ans\
    \ += (char)(x % base);\n        x /= base;\n    }\n    return ans;\n}\nint main()\
    \ {\n    auto candidate = change_base;\n    assert(candidate((8), (3)) == (\"\
    22\"));\n    assert(candidate((9), (3)) == (\"100\"));\n    assert(candidate((234),\
    \ (2)) == (\"11101010\"));\n    assert(candidate((16), (2)) == (\"10000\"));\n\
    \    assert(candidate((8), (2)) == (\"1000\"));\n    assert(candidate((7), (2))\
    \ == (\"111\"));\n    assert(candidate((2), (3)) == (\"2\"));\n    assert(candidate((3),\
    \ (4)) == (\"3\"));\n    assert(candidate((4), (5)) == (\"4\"));\n    assert(candidate((5),\
    \ (6)) == (\"5\"));\n    assert(candidate((6), (7)) == (\"6\"));\n    assert(candidate((7),\
    \ (8)) == (\"7\"));\n}\n"
  stdout: ''
  stderr: "tmp8xr7ubdd: /tmp/tmp8xr7ubdd.cpp:22: int main(): Assertion `candidate((8),\
    \ (3)) == (\"22\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base(8, 3)\n// '22'\n// >>> change_base(8,\
    \ 2)\n// '1000'\n// >>> change_base(7, 2)\n// '111'\nstd::string change_base(long\
    \ x, long base) {\n    std::string ans = \"\";\n    long tmp = x;\n    while (base\
    \ > 0) {\n        tmp = tmp / base;\n        ans = std::to_string(tmp) + ans;\n\
    \        base--;\n    }\n    while (base < 0) {\n        tmp = tmp * base;\n \
    \       ans = std::to_string(tmp) + ans;\n        base++;\n    }\n    return ans;\n\
    }\nint main() {\n    auto candidate = change_base;\n    assert(candidate((8),\
    \ (3)) == (\"22\"));\n    assert(candidate((9), (3)) == (\"100\"));\n    assert(candidate((234),\
    \ (2)) == (\"11101010\"));\n    assert(candidate((16), (2)) == (\"10000\"));\n\
    \    assert(candidate((8), (2)) == (\"1000\"));\n    assert(candidate((7), (2))\
    \ == (\"111\"));\n    assert(candidate((2), (3)) == (\"2\"));\n    assert(candidate((3),\
    \ (4)) == (\"3\"));\n    assert(candidate((4), (5)) == (\"4\"));\n    assert(candidate((5),\
    \ (6)) == (\"5\"));\n    assert(candidate((6), (7)) == (\"6\"));\n    assert(candidate((7),\
    \ (8)) == (\"7\"));\n}\n"
  stdout: ''
  stderr: "tmpizlnz73d: /tmp/tmpizlnz73d.cpp:29: int main(): Assertion `candidate((8),\
    \ (3)) == (\"22\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base(8, 3)\n// '22'\n// >>> change_base(8,\
    \ 2)\n// '1000'\n// >>> change_base(7, 2)\n// '111'\nstd::string change_base(long\
    \ x, long base) {\n    std::string ans = \"\";\n    long tmp = x;\n    while (base\
    \ > 0) {\n        tmp = tmp / base;\n        ans = std::to_string(tmp % base)\
    \ + ans;\n        base--;\n    }\n    return ans;\n}\nint main() {\n    auto candidate\
    \ = change_base;\n    assert(candidate((8), (3)) == (\"22\"));\n    assert(candidate((9),\
    \ (3)) == (\"100\"));\n    assert(candidate((234), (2)) == (\"11101010\"));\n\
    \    assert(candidate((16), (2)) == (\"10000\"));\n    assert(candidate((8), (2))\
    \ == (\"1000\"));\n    assert(candidate((7), (2)) == (\"111\"));\n    assert(candidate((2),\
    \ (3)) == (\"2\"));\n    assert(candidate((3), (4)) == (\"3\"));\n    assert(candidate((4),\
    \ (5)) == (\"4\"));\n    assert(candidate((5), (6)) == (\"5\"));\n    assert(candidate((6),\
    \ (7)) == (\"6\"));\n    assert(candidate((7), (8)) == (\"7\"));\n}\n"
  stdout: ''
  stderr: "tmplej4my90: /tmp/tmplej4my90.cpp:24: int main(): Assertion `candidate((8),\
    \ (3)) == (\"22\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base(8, 3)\n// '22'\n// >>> change_base(8,\
    \ 2)\n// '1000'\n// >>> change_base(7, 2)\n// '111'\nstd::string change_base(long\
    \ x, long base) {\n    std::string ans = \"\";\n    long temp = x;\n    while\
    \ (temp != 0) {\n        long rem = temp % base;\n        ans = std::to_string(rem)\
    \ + ans;\n        temp = temp / base;\n    }\n    return ans;\n}\nint main() {\n\
    \    auto candidate = change_base;\n    assert(candidate((8), (3)) == (\"22\"\
    ));\n    assert(candidate((9), (3)) == (\"100\"));\n    assert(candidate((234),\
    \ (2)) == (\"11101010\"));\n    assert(candidate((16), (2)) == (\"10000\"));\n\
    \    assert(candidate((8), (2)) == (\"1000\"));\n    assert(candidate((7), (2))\
    \ == (\"111\"));\n    assert(candidate((2), (3)) == (\"2\"));\n    assert(candidate((3),\
    \ (4)) == (\"3\"));\n    assert(candidate((4), (5)) == (\"4\"));\n    assert(candidate((5),\
    \ (6)) == (\"5\"));\n    assert(candidate((6), (7)) == (\"6\"));\n    assert(candidate((7),\
    \ (8)) == (\"7\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base(8, 3)\n// '22'\n// >>> change_base(8,\
    \ 2)\n// '1000'\n// >>> change_base(7, 2)\n// '111'\nstd::string change_base(long\
    \ x, long base) {\n    std::string ans = \"\";\n    while (x > 0) {\n        ans\
    \ += (char)(x % base);\n        x /= base;\n    }\n    return ans;\n}\nint main()\
    \ {\n    auto candidate = change_base;\n    assert(candidate((8), (3)) == (\"\
    22\"));\n    assert(candidate((9), (3)) == (\"100\"));\n    assert(candidate((234),\
    \ (2)) == (\"11101010\"));\n    assert(candidate((16), (2)) == (\"10000\"));\n\
    \    assert(candidate((8), (2)) == (\"1000\"));\n    assert(candidate((7), (2))\
    \ == (\"111\"));\n    assert(candidate((2), (3)) == (\"2\"));\n    assert(candidate((3),\
    \ (4)) == (\"3\"));\n    assert(candidate((4), (5)) == (\"4\"));\n    assert(candidate((5),\
    \ (6)) == (\"5\"));\n    assert(candidate((6), (7)) == (\"6\"));\n    assert(candidate((7),\
    \ (8)) == (\"7\"));\n}\n"
  stdout: ''
  stderr: "tmp028gjlge: /tmp/tmp028gjlge.cpp:22: int main(): Assertion `candidate((8),\
    \ (3)) == (\"22\")' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base(8, 3)\n// '22'\n// >>> change_base(8,\
    \ 2)\n// '1000'\n// >>> change_base(7, 2)\n// '111'\nstd::string change_base(long\
    \ x, long base) {\n    std::string ans = \"\";\n    long temp = 0;\n    while\
    \ (x > 0) {\n        temp = x % base;\n        ans = std::to_string(temp) + ans;\n\
    \        x = x / base;\n    }\n    return ans;\n}\nint main() {\n    auto candidate\
    \ = change_base;\n    assert(candidate((8), (3)) == (\"22\"));\n    assert(candidate((9),\
    \ (3)) == (\"100\"));\n    assert(candidate((234), (2)) == (\"11101010\"));\n\
    \    assert(candidate((16), (2)) == (\"10000\"));\n    assert(candidate((8), (2))\
    \ == (\"1000\"));\n    assert(candidate((7), (2)) == (\"111\"));\n    assert(candidate((2),\
    \ (3)) == (\"2\"));\n    assert(candidate((3), (4)) == (\"3\"));\n    assert(candidate((4),\
    \ (5)) == (\"4\"));\n    assert(candidate((5), (6)) == (\"5\"));\n    assert(candidate((6),\
    \ (7)) == (\"6\"));\n    assert(candidate((7), (8)) == (\"7\"));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base\
    \ of input number x to base.\n// return string representation after the conversion.\n\
    // base numbers are less than 10.\n// >>> change_base(8, 3)\n// '22'\n// >>> change_base(8,\
    \ 2)\n// '1000'\n// >>> change_base(7, 2)\n// '111'\nstd::string change_base(long\
    \ x, long base) {\n    std::string ans = \"\";\n    while (x > 0) {\n        ans\
    \ += (char)(x % base);\n        x /= base;\n    }\n    return ans;\n}\nint main()\
    \ {\n    auto candidate = change_base;\n    assert(candidate((8), (3)) == (\"\
    22\"));\n    assert(candidate((9), (3)) == (\"100\"));\n    assert(candidate((234),\
    \ (2)) == (\"11101010\"));\n    assert(candidate((16), (2)) == (\"10000\"));\n\
    \    assert(candidate((8), (2)) == (\"1000\"));\n    assert(candidate((7), (2))\
    \ == (\"111\"));\n    assert(candidate((2), (3)) == (\"2\"));\n    assert(candidate((3),\
    \ (4)) == (\"3\"));\n    assert(candidate((4), (5)) == (\"4\"));\n    assert(candidate((5),\
    \ (6)) == (\"5\"));\n    assert(candidate((6), (7)) == (\"6\"));\n    assert(candidate((7),\
    \ (8)) == (\"7\"));\n}\n"
  stdout: ''
  stderr: "tmpaa3ybr5o: /tmp/tmpaa3ybr5o.cpp:22: int main(): Assertion `candidate((8),\
    \ (3)) == (\"22\")' failed.\n"
  exit_code: -6
  status: Exception
