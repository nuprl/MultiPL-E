name: HumanEval_120_maximum
language: cpp
prompt: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of integers\
  \ and a positive integer k, return a sorted list \n// of length k with the maximum\
  \ k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k = 3\n// Output:\
  \ [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k = 2\n// Output: [4,\
  \ 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n// Output:\
  \ [2]\n// Note:\n// 1. The length of the array will be in the range of [1, 1000].\n\
  // 2. The elements in the array will be in the range of [-1000, 1000].\n// 3. 0\
  \ <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k) {\n"
tests: "}\nint main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({-3,\
  \ -4, 5})), (3)) == (std::vector<long>({-4, -3, 5})));\n    assert(candidate((std::vector<long>({4,\
  \ -4, 4})), (2)) == (std::vector<long>({4, 4})));\n    assert(candidate((std::vector<long>({-3,\
  \ 2, 1, 2, -1, -2, 1})), (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
  \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
  \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
  \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
  \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
  \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
  \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
  \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
  \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
  \ (0)) == (std::vector<long>()));\n}\n"
completions: []
stop_tokens:
- "\n}"
