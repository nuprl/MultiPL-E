name: HumanEval_31_is_prime
language: cpp
results:
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n    if (n == 1)\n        return false;\n  \
    \  if (n == 2)\n        return true;\n    if (n % 2 == 0)\n        return false;\n\
    \    for (int i = 3; i * i <= n; i += 2)\n        if (n % i == 0)\n          \
    \  return false;\n    return true;\n}\nint main() {\n    auto candidate = is_prime;\n\
    \    assert(candidate((6)) == (false));\n    assert(candidate((101)) == (true));\n\
    \    assert(candidate((11)) == (true));\n    assert(candidate((13441)) == (true));\n\
    \    assert(candidate((61)) == (true));\n    assert(candidate((4)) == (false));\n\
    \    assert(candidate((1)) == (false));\n    assert(candidate((5)) == (true));\n\
    \    assert(candidate((11)) == (true));\n    assert(candidate((17)) == (true));\n\
    \    assert(candidate((85)) == (false));\n    assert(candidate((77)) == (false));\n\
    \    assert(candidate((255379)) == (false));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n    if (n <= 1) return false;\n    long sqr\
    \ = sqrt(n);\n    for (long i = 3; i <= sqr; i += 2) {\n        if (n % i == 0)\
    \ return false;\n    }\n    return true;\n}\nint main() {\n    auto candidate\
    \ = is_prime;\n    assert(candidate((6)) == (false));\n    assert(candidate((101))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((13441))\
    \ == (true));\n    assert(candidate((61)) == (true));\n    assert(candidate((4))\
    \ == (false));\n    assert(candidate((1)) == (false));\n    assert(candidate((5))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((17))\
    \ == (true));\n    assert(candidate((85)) == (false));\n    assert(candidate((77))\
    \ == (false));\n    assert(candidate((255379)) == (false));\n}\n"
  stdout: ''
  stderr: "tmpht8_7sqk: /tmp/tmpht8_7sqk.cpp:28: int main(): Assertion `candidate((6))\
    \ == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n    if (n < 2)\n        return false;\n   \
    \ if (n == 2)\n        return true;\n    if (n % 2 == 0)\n        return false;\n\
    \    for (int i = 3; i * i <= n; i += 2)\n        if (n % i == 0)\n          \
    \  return false;\n    return true;\n}\nint main() {\n    auto candidate = is_prime;\n\
    \    assert(candidate((6)) == (false));\n    assert(candidate((101)) == (true));\n\
    \    assert(candidate((11)) == (true));\n    assert(candidate((13441)) == (true));\n\
    \    assert(candidate((61)) == (true));\n    assert(candidate((4)) == (false));\n\
    \    assert(candidate((1)) == (false));\n    assert(candidate((5)) == (true));\n\
    \    assert(candidate((11)) == (true));\n    assert(candidate((17)) == (true));\n\
    \    assert(candidate((85)) == (false));\n    assert(candidate((77)) == (false));\n\
    \    assert(candidate((255379)) == (false));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n    if (n <= 1) return false;\n    if (n <=\
    \ 3) return true;\n    if (n % 2 == 0 || n % 3 == 0) return false;\n    long i\
    \ = 5;\n    while (i <= n / i) {\n        if (n % i == 0 || n % (i + 2) == 0)\
    \ return false;\n        i += 6;\n    }\n    return true;\n}\nint main() {\n \
    \   auto candidate = is_prime;\n    assert(candidate((6)) == (false));\n    assert(candidate((101))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((13441))\
    \ == (true));\n    assert(candidate((61)) == (true));\n    assert(candidate((4))\
    \ == (false));\n    assert(candidate((1)) == (false));\n    assert(candidate((5))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((17))\
    \ == (true));\n    assert(candidate((85)) == (false));\n    assert(candidate((77))\
    \ == (false));\n    assert(candidate((255379)) == (false));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n    if (n == 1)\n        return false;\n  \
    \  if (n == 2)\n        return true;\n    if (n % 2 == 0)\n        return false;\n\
    \    for (int i = 3; i <= sqrt(n); i += 2)\n        if (n % i == 0)\n        \
    \    return false;\n    return true;\n}\nint main() {\n    auto candidate = is_prime;\n\
    \    assert(candidate((6)) == (false));\n    assert(candidate((101)) == (true));\n\
    \    assert(candidate((11)) == (true));\n    assert(candidate((13441)) == (true));\n\
    \    assert(candidate((61)) == (true));\n    assert(candidate((4)) == (false));\n\
    \    assert(candidate((1)) == (false));\n    assert(candidate((5)) == (true));\n\
    \    assert(candidate((11)) == (true));\n    assert(candidate((17)) == (true));\n\
    \    assert(candidate((85)) == (false));\n    assert(candidate((77)) == (false));\n\
    \    assert(candidate((255379)) == (false));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n    if (n <= 1) return false;\n    long sqr\
    \ = sqrt(n);\n    for (long i = 3; i <= sqr; i += 2) {\n        if (n % i == 0)\
    \ return false;\n    }\n    return true;\n}\nint main() {\n    auto candidate\
    \ = is_prime;\n    assert(candidate((6)) == (false));\n    assert(candidate((101))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((13441))\
    \ == (true));\n    assert(candidate((61)) == (true));\n    assert(candidate((4))\
    \ == (false));\n    assert(candidate((1)) == (false));\n    assert(candidate((5))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((17))\
    \ == (true));\n    assert(candidate((85)) == (false));\n    assert(candidate((77))\
    \ == (false));\n    assert(candidate((255379)) == (false));\n}\n"
  stdout: ''
  stderr: "tmpba0r8hm9: /tmp/tmpba0r8hm9.cpp:28: int main(): Assertion `candidate((6))\
    \ == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n    if (n == 1)\n        return false;\n  \
    \  if (n == 2)\n        return true;\n    if (n % 2 == 0)\n        return false;\n\
    \    if (n % 3 == 0)\n        return false;\n    long i = 5;\n    while (i <=\
    \ sqrt(n)) {\n        if (n % i == 0)\n            return false;\n        i +=\
    \ 6;\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_prime;\n\
    \    assert(candidate((6)) == (false));\n    assert(candidate((101)) == (true));\n\
    \    assert(candidate((11)) == (true));\n    assert(candidate((13441)) == (true));\n\
    \    assert(candidate((61)) == (true));\n    assert(candidate((4)) == (false));\n\
    \    assert(candidate((1)) == (false));\n    assert(candidate((5)) == (true));\n\
    \    assert(candidate((11)) == (true));\n    assert(candidate((17)) == (true));\n\
    \    assert(candidate((85)) == (false));\n    assert(candidate((77)) == (false));\n\
    \    assert(candidate((255379)) == (false));\n}\n"
  stdout: ''
  stderr: "tmpm94sksf6: /tmp/tmpm94sksf6.cpp:48: int main(): Assertion `candidate((77))\
    \ == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n  if (n <= 1) return false;\n  if (n == 2)\
    \ return true;\n  if (n % 2 == 0) return false;\n  if (n % 3 == 0) return false;\n\
    \  if (n % 5 == 0) return false;\n  if (n % 7 == 0) return false;\n  long sq =\
    \ sqrt(n);\n  for (long i = 3; i <= sq; i += 2) {\n    if (n % i == 0) return\
    \ false;\n  }\n  return true;\n}\nint main() {\n    auto candidate = is_prime;\n\
    \    assert(candidate((6)) == (false));\n    assert(candidate((101)) == (true));\n\
    \    assert(candidate((11)) == (true));\n    assert(candidate((13441)) == (true));\n\
    \    assert(candidate((61)) == (true));\n    assert(candidate((4)) == (false));\n\
    \    assert(candidate((1)) == (false));\n    assert(candidate((5)) == (true));\n\
    \    assert(candidate((11)) == (true));\n    assert(candidate((17)) == (true));\n\
    \    assert(candidate((85)) == (false));\n    assert(candidate((77)) == (false));\n\
    \    assert(candidate((255379)) == (false));\n}\n"
  stdout: ''
  stderr: "tmp19b3y8kk: /tmp/tmp19b3y8kk.cpp:40: int main(): Assertion `candidate((5))\
    \ == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n  if (n <= 1) return false;\n  if (n <= 3)\
    \ return true;\n  if (n % 2 == 0 || n % 3 == 0) return false;\n  for (long i =\
    \ 3; i * i <= n; i += 2) {\n    if (n % i == 0 || n % (i + 2) == 0) return false;\n\
    \  }\n  return true;\n}\nint main() {\n    auto candidate = is_prime;\n    assert(candidate((6))\
    \ == (false));\n    assert(candidate((101)) == (true));\n    assert(candidate((11))\
    \ == (true));\n    assert(candidate((13441)) == (true));\n    assert(candidate((61))\
    \ == (true));\n    assert(candidate((4)) == (false));\n    assert(candidate((1))\
    \ == (false));\n    assert(candidate((5)) == (true));\n    assert(candidate((11))\
    \ == (true));\n    assert(candidate((17)) == (true));\n    assert(candidate((85))\
    \ == (false));\n    assert(candidate((77)) == (false));\n    assert(candidate((255379))\
    \ == (false));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n    if (n == 1)\n        return false;\n  \
    \  if (n == 2)\n        return true;\n    if (n % 2 == 0)\n        return false;\n\
    \    for (int i = 3; i <= sqrt(n); i += 2)\n        if (n % i == 0)\n        \
    \    return false;\n    return true;\n}\nint main() {\n    auto candidate = is_prime;\n\
    \    assert(candidate((6)) == (false));\n    assert(candidate((101)) == (true));\n\
    \    assert(candidate((11)) == (true));\n    assert(candidate((13441)) == (true));\n\
    \    assert(candidate((61)) == (true));\n    assert(candidate((4)) == (false));\n\
    \    assert(candidate((1)) == (false));\n    assert(candidate((5)) == (true));\n\
    \    assert(candidate((11)) == (true));\n    assert(candidate((17)) == (true));\n\
    \    assert(candidate((85)) == (false));\n    assert(candidate((77)) == (false));\n\
    \    assert(candidate((255379)) == (false));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n    if (n == 1)\n        return false;\n  \
    \  if (n == 2)\n        return true;\n    if (n % 2 == 0)\n        return false;\n\
    \    for (int i = 3; i * i <= n; i += 2)\n        if (n % i == 0)\n          \
    \  return false;\n    return true;\n}\nint main() {\n    auto candidate = is_prime;\n\
    \    assert(candidate((6)) == (false));\n    assert(candidate((101)) == (true));\n\
    \    assert(candidate((11)) == (true));\n    assert(candidate((13441)) == (true));\n\
    \    assert(candidate((61)) == (true));\n    assert(candidate((4)) == (false));\n\
    \    assert(candidate((1)) == (false));\n    assert(candidate((5)) == (true));\n\
    \    assert(candidate((11)) == (true));\n    assert(candidate((17)) == (true));\n\
    \    assert(candidate((85)) == (false));\n    assert(candidate((77)) == (false));\n\
    \    assert(candidate((255379)) == (false));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n    if (n == 1)\n        return false;\n  \
    \  if (n == 2)\n        return true;\n    if (n % 2 == 0)\n        return false;\n\
    \    for (int i = 3; i <= sqrt(n); i += 2)\n        if (n % i == 0)\n        \
    \    return false;\n    return true;\n}\nint main() {\n    auto candidate = is_prime;\n\
    \    assert(candidate((6)) == (false));\n    assert(candidate((101)) == (true));\n\
    \    assert(candidate((11)) == (true));\n    assert(candidate((13441)) == (true));\n\
    \    assert(candidate((61)) == (true));\n    assert(candidate((4)) == (false));\n\
    \    assert(candidate((1)) == (false));\n    assert(candidate((5)) == (true));\n\
    \    assert(candidate((11)) == (true));\n    assert(candidate((17)) == (true));\n\
    \    assert(candidate((85)) == (false));\n    assert(candidate((77)) == (false));\n\
    \    assert(candidate((255379)) == (false));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n  if (n <= 1)\n    return false;\n  if (n ==\
    \ 2)\n    return true;\n  if (n % 2 == 0)\n    return false;\n  for (long i =\
    \ 3; i <= n / i; i += 2)\n    if (n % i == 0)\n      return false;\n  return true;\n\
    }\nint main() {\n    auto candidate = is_prime;\n    assert(candidate((6)) ==\
    \ (false));\n    assert(candidate((101)) == (true));\n    assert(candidate((11))\
    \ == (true));\n    assert(candidate((13441)) == (true));\n    assert(candidate((61))\
    \ == (true));\n    assert(candidate((4)) == (false));\n    assert(candidate((1))\
    \ == (false));\n    assert(candidate((5)) == (true));\n    assert(candidate((11))\
    \ == (true));\n    assert(candidate((17)) == (true));\n    assert(candidate((85))\
    \ == (false));\n    assert(candidate((77)) == (false));\n    assert(candidate((255379))\
    \ == (false));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n    if (n == 1)\n        return false;\n  \
    \  if (n == 2)\n        return true;\n    if (n % 2 == 0)\n        return false;\n\
    \    for (int i = 3; i <= n / 2; i += 2)\n        if (n % i == 0)\n          \
    \  return false;\n    return true;\n}\nint main() {\n    auto candidate = is_prime;\n\
    \    assert(candidate((6)) == (false));\n    assert(candidate((101)) == (true));\n\
    \    assert(candidate((11)) == (true));\n    assert(candidate((13441)) == (true));\n\
    \    assert(candidate((61)) == (true));\n    assert(candidate((4)) == (false));\n\
    \    assert(candidate((1)) == (false));\n    assert(candidate((5)) == (true));\n\
    \    assert(candidate((11)) == (true));\n    assert(candidate((17)) == (true));\n\
    \    assert(candidate((85)) == (false));\n    assert(candidate((77)) == (false));\n\
    \    assert(candidate((255379)) == (false));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n    if (n == 1)\n        return false;\n  \
    \  if (n == 2)\n        return true;\n    if (n % 2 == 0)\n        return false;\n\
    \    for (int i = 3; i <= sqrt(n); i += 2)\n        if (n % i == 0)\n        \
    \    return false;\n    return true;\n}\nint main() {\n    auto candidate = is_prime;\n\
    \    assert(candidate((6)) == (false));\n    assert(candidate((101)) == (true));\n\
    \    assert(candidate((11)) == (true));\n    assert(candidate((13441)) == (true));\n\
    \    assert(candidate((61)) == (true));\n    assert(candidate((4)) == (false));\n\
    \    assert(candidate((1)) == (false));\n    assert(candidate((5)) == (true));\n\
    \    assert(candidate((11)) == (true));\n    assert(candidate((17)) == (true));\n\
    \    assert(candidate((85)) == (false));\n    assert(candidate((77)) == (false));\n\
    \    assert(candidate((255379)) == (false));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n    if (n == 1)\n        return false;\n  \
    \  if (n == 2)\n        return true;\n    if (n % 2 == 0)\n        return false;\n\
    \    if (n % 3 == 0)\n        return false;\n    int i = 5;\n    while (i <= sqrt(n))\n\
    \        if (n % i == 0)\n            return false;\n        i += 6;\n    return\
    \ true;\n}\nint main() {\n    auto candidate = is_prime;\n    assert(candidate((6))\
    \ == (false));\n    assert(candidate((101)) == (true));\n    assert(candidate((11))\
    \ == (true));\n    assert(candidate((13441)) == (true));\n    assert(candidate((61))\
    \ == (true));\n    assert(candidate((4)) == (false));\n    assert(candidate((1))\
    \ == (false));\n    assert(candidate((5)) == (true));\n    assert(candidate((11))\
    \ == (true));\n    assert(candidate((17)) == (true));\n    assert(candidate((85))\
    \ == (false));\n    assert(candidate((77)) == (false));\n    assert(candidate((255379))\
    \ == (false));\n}\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n    if (n == 1)\n        return false;\n  \
    \  if (n == 2)\n        return true;\n    if (n % 2 == 0)\n        return false;\n\
    \    for (int i = 3; i * i <= n; i += 2)\n        if (n % i == 0)\n          \
    \  return false;\n    return true;\n}\nint main() {\n    auto candidate = is_prime;\n\
    \    assert(candidate((6)) == (false));\n    assert(candidate((101)) == (true));\n\
    \    assert(candidate((11)) == (true));\n    assert(candidate((13441)) == (true));\n\
    \    assert(candidate((61)) == (true));\n    assert(candidate((4)) == (false));\n\
    \    assert(candidate((1)) == (false));\n    assert(candidate((5)) == (true));\n\
    \    assert(candidate((11)) == (true));\n    assert(candidate((17)) == (true));\n\
    \    assert(candidate((85)) == (false));\n    assert(candidate((77)) == (false));\n\
    \    assert(candidate((255379)) == (false));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n    if (n == 1)\n        return false;\n  \
    \  if (n == 2)\n        return true;\n    if (n % 2 == 0)\n        return false;\n\
    \    for (int i = 3; i * i <= n; i += 2)\n        if (n % i == 0)\n          \
    \  return false;\n    return true;\n}\nint main() {\n    auto candidate = is_prime;\n\
    \    assert(candidate((6)) == (false));\n    assert(candidate((101)) == (true));\n\
    \    assert(candidate((11)) == (true));\n    assert(candidate((13441)) == (true));\n\
    \    assert(candidate((61)) == (true));\n    assert(candidate((4)) == (false));\n\
    \    assert(candidate((1)) == (false));\n    assert(candidate((5)) == (true));\n\
    \    assert(candidate((11)) == (true));\n    assert(candidate((17)) == (true));\n\
    \    assert(candidate((85)) == (false));\n    assert(candidate((77)) == (false));\n\
    \    assert(candidate((255379)) == (false));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n    if (n <= 1) return false;\n    long sqr\
    \ = sqrt(n);\n    for (long i = 3; i <= sqr; i += 2) {\n        if (n % i == 0)\
    \ return false;\n    }\n    return true;\n}\nint main() {\n    auto candidate\
    \ = is_prime;\n    assert(candidate((6)) == (false));\n    assert(candidate((101))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((13441))\
    \ == (true));\n    assert(candidate((61)) == (true));\n    assert(candidate((4))\
    \ == (false));\n    assert(candidate((1)) == (false));\n    assert(candidate((5))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((17))\
    \ == (true));\n    assert(candidate((85)) == (false));\n    assert(candidate((77))\
    \ == (false));\n    assert(candidate((255379)) == (false));\n}\n"
  stdout: ''
  stderr: "tmphk5esbii: /tmp/tmphk5esbii.cpp:28: int main(): Assertion `candidate((6))\
    \ == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n    if (n == 1) return false;\n    if (n ==\
    \ 2) return true;\n    if (n % 2 == 0) return false;\n    if (n % 3 == 0) return\
    \ false;\n    if (n % 5 == 0) return false;\n    long i = 5;\n    while (i <=\
    \ sqrt(n)) {\n        if (n % i == 0) return false;\n        i += 6;\n    }\n\
    \    return true;\n}\nint main() {\n    auto candidate = is_prime;\n    assert(candidate((6))\
    \ == (false));\n    assert(candidate((101)) == (true));\n    assert(candidate((11))\
    \ == (true));\n    assert(candidate((13441)) == (true));\n    assert(candidate((61))\
    \ == (true));\n    assert(candidate((4)) == (false));\n    assert(candidate((1))\
    \ == (false));\n    assert(candidate((5)) == (true));\n    assert(candidate((11))\
    \ == (true));\n    assert(candidate((17)) == (true));\n    assert(candidate((85))\
    \ == (false));\n    assert(candidate((77)) == (false));\n    assert(candidate((255379))\
    \ == (false));\n}\n"
  stdout: ''
  stderr: "tmppgead_z6: /tmp/tmppgead_z6.cpp:40: int main(): Assertion `candidate((5))\
    \ == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n  if (n <= 1) return false;\n  if (n == 2)\
    \ return true;\n  if (n % 2 == 0) return false;\n  if (n % 3 == 0) return false;\n\
    \  if (n % 5 == 0) return false;\n  if (n % 7 == 0) return false;\n  if (n % 11\
    \ == 0) return false;\n  if (n % 13 == 0) return false;\n  if (n % 17 == 0) return\
    \ false;\n  if (n % 19 == 0) return false;\n  if (n % 23 == 0) return false;\n\
    \  if (n % 29 == 0) return false;\n  if (n % 31 == 0) return false;\n  if (n %\
    \ 37 == 0) return false;\n  if (n % 41) == 0) return false;\n  if (n % 43) ==\
    \ 0) return false;\n  if (n % 47) == 0) return false;\n  if (n % 53) == 0) return\
    \ false;\n  if (n % 59) == 0) return false;\n  if (n % 61) == 0) return false;\n\
    \  if (n % 67) == 0) return false;\n  if (n % 71) == 0) return false;\n  if (n\
    \ % 73) == 0) return false;\n  if (n % 79) == 0) return false;\n  if (n % 83)\
    \ == 0) return false;\n  if (n % 89) == 0) return false;\n  if (n % 97) == 0)\
    \ return false;\n  if (n % 103) == 0) return false;\n  if (n % 111 == 0) return\
    \ false;\n  if (n % 121 == 0) return false;\n  if (n % 131 == 0) return false;\n\
    \  if (n % 141 == 0) return false;\n  if (n % 151 == 0) return false;\n  if (n\
    \ % 161 == 0) return false;\n  if (n % 171 == 0) return false;\n  if (n % 181\
    \ == 0) return false;\n  if (n % 191 == 0) return false;\n  if (n % 201 == 0)\
    \ return false;\n  if (n % 211 == 0) return false;\n  if (n % 221 == 0) return\
    \ false;\n  if (n % 231 == 0) return false;\n  if (n % 241 == 0) return false;\n\
    \  if (n % 251 == 0) return false;\n  if (n % 261 == 0) return false;\n  if (n\
    \ % 271 == 0) return false;\n  if (n % 281 == 0) return false;\n  if (n % 291\
    \ == 0) return false;\n  if (n % 301 == 0) return false;\n  if (n % 311 == 0)\
    \ return false;\n  if (n % 321 == 0) return false;\n  if (n % 331 == 0) return\
    \ false;\n  if (n % 341 == 0) return false;\n  if (n % 351 == 0) return false;\n\
    \  if (n % 361 == 0) return false;\n  if (n % 371 == 0) return false;\n  if (n\
    \ % 381 == 0) return false;\n  if (n % 391 == 0) return false;\n  if (n % 401\
    \ == 0) return false;\n  if (n % 411 == 0) return false;\n  if (n % 421 == 0)\
    \ return false;\n  if (n % 431 == 0) return false;\n  if (n % 441 == 0) return\
    \ false;\n  if (n % 451 == 0) return false;\n  if (n % 461 == 0) return false;\n\
    \  if (n % 47\n}\nint main() {\n    auto candidate = is_prime;\n    assert(candidate((6))\
    \ == (false));\n    assert(candidate((101)) == (true));\n    assert(candidate((11))\
    \ == (true));\n    assert(candidate((13441)) == (true));\n    assert(candidate((61))\
    \ == (true));\n    assert(candidate((4)) == (false));\n    assert(candidate((1))\
    \ == (false));\n    assert(candidate((5)) == (true));\n    assert(candidate((11))\
    \ == (true));\n    assert(candidate((17)) == (true));\n    assert(candidate((85))\
    \ == (false));\n    assert(candidate((77)) == (false));\n    assert(candidate((255379))\
    \ == (false));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpqb0l69e2.cpp: In function \u2018bool is_prime(long int)\u2019:\n\
    /tmp/tmpqb0l69e2.cpp:33:15: error: expected primary-expression before \u2018==\u2019\
    \ token\n   33 |   if (n % 41) == 0) return false;\n      |               ^~\n\
    /tmp/tmpqb0l69e2.cpp:34:15: error: expected primary-expression before \u2018==\u2019\
    \ token\n   34 |   if (n % 43) == 0) return false;\n      |               ^~\n\
    /tmp/tmpqb0l69e2.cpp:35:15: error: expected primary-expression before \u2018==\u2019\
    \ token\n   35 |   if (n % 47) == 0) return false;\n      |               ^~\n\
    /tmp/tmpqb0l69e2.cpp:36:15: error: expected primary-expression before \u2018==\u2019\
    \ token\n   36 |   if (n % 53) == 0) return false;\n      |               ^~\n\
    /tmp/tmpqb0l69e2.cpp:37:15: error: expected primary-expression before \u2018==\u2019\
    \ token\n   37 |   if (n % 59) == 0) return false;\n      |               ^~\n\
    /tmp/tmpqb0l69e2.cpp:38:15: error: expected primary-expression before \u2018==\u2019\
    \ token\n   38 |   if (n % 61) == 0) return false;\n      |               ^~\n\
    /tmp/tmpqb0l69e2.cpp:39:15: error: expected primary-expression before \u2018==\u2019\
    \ token\n   39 |   if (n % 67) == 0) return false;\n      |               ^~\n\
    /tmp/tmpqb0l69e2.cpp:40:15: error: expected primary-expression before \u2018==\u2019\
    \ token\n   40 |   if (n % 71) == 0) return false;\n      |               ^~\n\
    /tmp/tmpqb0l69e2.cpp:41:15: error: expected primary-expression before \u2018==\u2019\
    \ token\n   41 |   if (n % 73) == 0) return false;\n      |               ^~\n\
    /tmp/tmpqb0l69e2.cpp:42:15: error: expected primary-expression before \u2018==\u2019\
    \ token\n   42 |   if (n % 79) == 0) return false;\n      |               ^~\n\
    /tmp/tmpqb0l69e2.cpp:43:15: error: expected primary-expression before \u2018==\u2019\
    \ token\n   43 |   if (n % 83) == 0) return false;\n      |               ^~\n\
    /tmp/tmpqb0l69e2.cpp:44:15: error: expected primary-expression before \u2018==\u2019\
    \ token\n   44 |   if (n % 89) == 0) return false;\n      |               ^~\n\
    /tmp/tmpqb0l69e2.cpp:45:15: error: expected primary-expression before \u2018==\u2019\
    \ token\n   45 |   if (n % 97) == 0) return false;\n      |               ^~\n\
    /tmp/tmpqb0l69e2.cpp:46:16: error: expected primary-expression before \u2018==\u2019\
    \ token\n   46 |   if (n % 103) == 0) return false;\n      |                ^~\n\
    /tmp/tmpqb0l69e2.cpp:83:13: error: expected \u2018)\u2019 before \u2018}\u2019\
    \ token\n   83 |   if (n % 47\n      |      ~      ^\n      |             )\n\
    \   84 | }\n      | ~            \n/tmp/tmpqb0l69e2.cpp:84:1: error: expected\
    \ primary-expression before \u2018}\u2019 token\n   84 | }\n      | ^\n/tmp/tmpqb0l69e2.cpp:84:1:\
    \ warning: control reaches end of non-void function [-Wreturn-type]\n   84 | }\n\
    \      | ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n  if (n == 1)\n    return false;\n  if (n ==\
    \ 2)\n    return true;\n  if (n % 2 == 0)\n    return false;\n  for (long i =\
    \ 3; i * i <= n; i += 2)\n    if (n % i == 0)\n      return false;\n  return true;\n\
    }\nint main() {\n    auto candidate = is_prime;\n    assert(candidate((6)) ==\
    \ (false));\n    assert(candidate((101)) == (true));\n    assert(candidate((11))\
    \ == (true));\n    assert(candidate((13441)) == (true));\n    assert(candidate((61))\
    \ == (true));\n    assert(candidate((4)) == (false));\n    assert(candidate((1))\
    \ == (false));\n    assert(candidate((5)) == (true));\n    assert(candidate((11))\
    \ == (true));\n    assert(candidate((17)) == (true));\n    assert(candidate((85))\
    \ == (false));\n    assert(candidate((77)) == (false));\n    assert(candidate((255379))\
    \ == (false));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n  if (n <= 1) return false;\n  if (n == 2)\
    \ return true;\n  if (n % 2 == 0) return false;\n  if (n % 3 == 0) return false;\n\
    \  long i = 5;\n  while (i <= sqrt(n)) {\n    if (n % i == 0) return false;\n\
    \    i += 6;\n  }\n  return true;\n}\nint main() {\n    auto candidate = is_prime;\n\
    \    assert(candidate((6)) == (false));\n    assert(candidate((101)) == (true));\n\
    \    assert(candidate((11)) == (true));\n    assert(candidate((13441)) == (true));\n\
    \    assert(candidate((61)) == (true));\n    assert(candidate((4)) == (false));\n\
    \    assert(candidate((1)) == (false));\n    assert(candidate((5)) == (true));\n\
    \    assert(candidate((11)) == (true));\n    assert(candidate((17)) == (true));\n\
    \    assert(candidate((85)) == (false));\n    assert(candidate((77)) == (false));\n\
    \    assert(candidate((255379)) == (false));\n}\n"
  stdout: ''
  stderr: "tmp9x4p2c1g: /tmp/tmp9x4p2c1g.cpp:43: int main(): Assertion `candidate((77))\
    \ == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n    if (n == 1)\n        return false;\n  \
    \  if (n == 2)\n        return true;\n    if (n % 2 == 0)\n        return false;\n\
    \    if (n % 3 == 0)\n        return false;\n    long i = 5;\n    while (i <=\
    \ sqrt(n))\n        if (n % i == 0)\n            return false;\n        i += 6;\n\
    \    return true;\n}\nint main() {\n    auto candidate = is_prime;\n    assert(candidate((6))\
    \ == (false));\n    assert(candidate((101)) == (true));\n    assert(candidate((11))\
    \ == (true));\n    assert(candidate((13441)) == (true));\n    assert(candidate((61))\
    \ == (true));\n    assert(candidate((4)) == (false));\n    assert(candidate((1))\
    \ == (false));\n    assert(candidate((5)) == (true));\n    assert(candidate((11))\
    \ == (true));\n    assert(candidate((17)) == (true));\n    assert(candidate((85))\
    \ == (false));\n    assert(candidate((77)) == (false));\n    assert(candidate((255379))\
    \ == (false));\n}\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n    if (n <= 1) return false;\n    if (n ==\
    \ 2) return true;\n    if (n % 2 == 0) return false;\n    if (n % 3 == 0) return\
    \ false;\n    long i = 5;\n    while (i * i <= n) {\n        if (n % i == 0) return\
    \ false;\n        i += 6;\n    }\n    return true;\n}\nint main() {\n    auto\
    \ candidate = is_prime;\n    assert(candidate((6)) == (false));\n    assert(candidate((101))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((13441))\
    \ == (true));\n    assert(candidate((61)) == (true));\n    assert(candidate((4))\
    \ == (false));\n    assert(candidate((1)) == (false));\n    assert(candidate((5))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((17))\
    \ == (true));\n    assert(candidate((85)) == (false));\n    assert(candidate((77))\
    \ == (false));\n    assert(candidate((255379)) == (false));\n}\n"
  stdout: ''
  stderr: "tmpbynvy3ok: /tmp/tmpbynvy3ok.cpp:43: int main(): Assertion `candidate((77))\
    \ == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n    if (n < 2)\n        return false;\n   \
    \ if (n == 2)\n        return true;\n    if (n % 2 == 0)\n        return false;\n\
    \    for (int i = 3; i * i <= n; i += 2)\n        if (n % i == 0)\n          \
    \  return false;\n    return true;\n}\nint main() {\n    auto candidate = is_prime;\n\
    \    assert(candidate((6)) == (false));\n    assert(candidate((101)) == (true));\n\
    \    assert(candidate((11)) == (true));\n    assert(candidate((13441)) == (true));\n\
    \    assert(candidate((61)) == (true));\n    assert(candidate((4)) == (false));\n\
    \    assert(candidate((1)) == (false));\n    assert(candidate((5)) == (true));\n\
    \    assert(candidate((11)) == (true));\n    assert(candidate((17)) == (true));\n\
    \    assert(candidate((85)) == (false));\n    assert(candidate((77)) == (false));\n\
    \    assert(candidate((255379)) == (false));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n    if (n < 2) return false;\n    if (n ==\
    \ 2) return true;\n    if (n % 2 == 0) return false;\n    long sq = sqrt(n);\n\
    \    for (long i = 3; i <= sq; i += 2) {\n        if (n % i == 0) return false;\n\
    \    }\n    return true;\n}\nint main() {\n    auto candidate = is_prime;\n  \
    \  assert(candidate((6)) == (false));\n    assert(candidate((101)) == (true));\n\
    \    assert(candidate((11)) == (true));\n    assert(candidate((13441)) == (true));\n\
    \    assert(candidate((61)) == (true));\n    assert(candidate((4)) == (false));\n\
    \    assert(candidate((1)) == (false));\n    assert(candidate((5)) == (true));\n\
    \    assert(candidate((11)) == (true));\n    assert(candidate((17)) == (true));\n\
    \    assert(candidate((85)) == (false));\n    assert(candidate((77)) == (false));\n\
    \    assert(candidate((255379)) == (false));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n    if (n == 1)\n        return false;\n  \
    \  if (n == 2)\n        return true;\n    if (n % 2 == 0)\n        return false;\n\
    \    for (int i = 3; i * i <= n; i += 2)\n        if (n % i == 0)\n          \
    \  return false;\n    return true;\n}\nint main() {\n    auto candidate = is_prime;\n\
    \    assert(candidate((6)) == (false));\n    assert(candidate((101)) == (true));\n\
    \    assert(candidate((11)) == (true));\n    assert(candidate((13441)) == (true));\n\
    \    assert(candidate((61)) == (true));\n    assert(candidate((4)) == (false));\n\
    \    assert(candidate((1)) == (false));\n    assert(candidate((5)) == (true));\n\
    \    assert(candidate((11)) == (true));\n    assert(candidate((17)) == (true));\n\
    \    assert(candidate((85)) == (false));\n    assert(candidate((77)) == (false));\n\
    \    assert(candidate((255379)) == (false));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n    if (n == 1)\n        return false;\n  \
    \  if (n == 2)\n        return true;\n    if (n % 2 == 0)\n        return false;\n\
    \    for (int i = 3; i * i <= n; i += 2)\n        if (n % i == 0)\n          \
    \  return false;\n    return true;\n}\nint main() {\n    auto candidate = is_prime;\n\
    \    assert(candidate((6)) == (false));\n    assert(candidate((101)) == (true));\n\
    \    assert(candidate((11)) == (true));\n    assert(candidate((13441)) == (true));\n\
    \    assert(candidate((61)) == (true));\n    assert(candidate((4)) == (false));\n\
    \    assert(candidate((1)) == (false));\n    assert(candidate((5)) == (true));\n\
    \    assert(candidate((11)) == (true));\n    assert(candidate((17)) == (true));\n\
    \    assert(candidate((85)) == (false));\n    assert(candidate((77)) == (false));\n\
    \    assert(candidate((255379)) == (false));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n    // Write your code here.\n    long i =\
    \ 2;\n    long flag = 0;\n    while(i*i <= n) {\n        if(n%i == 0) {\n    \
    \        flag = 1;\n            break;\n        }\n        i++;\n    }\n    if(flag\
    \ == 1) {\n        return true;\n    }\n    return false;\n}\nint main() {\n \
    \   auto candidate = is_prime;\n    assert(candidate((6)) == (false));\n    assert(candidate((101))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((13441))\
    \ == (true));\n    assert(candidate((61)) == (true));\n    assert(candidate((4))\
    \ == (false));\n    assert(candidate((1)) == (false));\n    assert(candidate((5))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((17))\
    \ == (true));\n    assert(candidate((85)) == (false));\n    assert(candidate((77))\
    \ == (false));\n    assert(candidate((255379)) == (false));\n}\n"
  stdout: ''
  stderr: "tmpyrv95cnj: /tmp/tmpyrv95cnj.cpp:36: int main(): Assertion `candidate((6))\
    \ == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n    if (n == 1)\n        return false;\n  \
    \  if (n == 2)\n        return true;\n    if (n % 2 == 0)\n        return false;\n\
    \    for (int i = 3; i * i <= n; i += 2)\n        if (n % i == 0)\n          \
    \  return false;\n    return true;\n}\nint main() {\n    auto candidate = is_prime;\n\
    \    assert(candidate((6)) == (false));\n    assert(candidate((101)) == (true));\n\
    \    assert(candidate((11)) == (true));\n    assert(candidate((13441)) == (true));\n\
    \    assert(candidate((61)) == (true));\n    assert(candidate((4)) == (false));\n\
    \    assert(candidate((1)) == (false));\n    assert(candidate((5)) == (true));\n\
    \    assert(candidate((11)) == (true));\n    assert(candidate((17)) == (true));\n\
    \    assert(candidate((85)) == (false));\n    assert(candidate((77)) == (false));\n\
    \    assert(candidate((255379)) == (false));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n    if (n == 1)\n        return false;\n  \
    \  if (n == 2)\n        return true;\n    if (n % 2 == 0)\n        return false;\n\
    \    for (int i = 3; i <= sqrt(n); i += 2)\n        if (n % i == 0)\n        \
    \    return false;\n    return true;\n}\nint main() {\n    auto candidate = is_prime;\n\
    \    assert(candidate((6)) == (false));\n    assert(candidate((101)) == (true));\n\
    \    assert(candidate((11)) == (true));\n    assert(candidate((13441)) == (true));\n\
    \    assert(candidate((61)) == (true));\n    assert(candidate((4)) == (false));\n\
    \    assert(candidate((1)) == (false));\n    assert(candidate((5)) == (true));\n\
    \    assert(candidate((11)) == (true));\n    assert(candidate((17)) == (true));\n\
    \    assert(candidate((85)) == (false));\n    assert(candidate((77)) == (false));\n\
    \    assert(candidate((255379)) == (false));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n    if (n == 1)\n        return false;\n  \
    \  if (n == 2)\n        return true;\n    if (n % 2 == 0)\n        return false;\n\
    \    if (n % 3 == 0)\n        return false;\n    long i = 5;\n    while (i <=\
    \ sqrt(n))\n        if (n % i == 0)\n            return false;\n        i += 6;\n\
    \    return true;\n}\nint main() {\n    auto candidate = is_prime;\n    assert(candidate((6))\
    \ == (false));\n    assert(candidate((101)) == (true));\n    assert(candidate((11))\
    \ == (true));\n    assert(candidate((13441)) == (true));\n    assert(candidate((61))\
    \ == (true));\n    assert(candidate((4)) == (false));\n    assert(candidate((1))\
    \ == (false));\n    assert(candidate((5)) == (true));\n    assert(candidate((11))\
    \ == (true));\n    assert(candidate((17)) == (true));\n    assert(candidate((85))\
    \ == (false));\n    assert(candidate((77)) == (false));\n    assert(candidate((255379))\
    \ == (false));\n}\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n    if (n == 1)\n        return false;\n  \
    \  if (n == 2)\n        return true;\n    if (n % 2 == 0)\n        return false;\n\
    \    if (n % 3 == 0)\n        return false;\n    long i = 5;\n    while (i <=\
    \ n / 3) {\n        if (n % i == 0)\n            return false;\n        i += 6;\n\
    \    }\n    return true;\n}\nint main() {\n    auto candidate = is_prime;\n  \
    \  assert(candidate((6)) == (false));\n    assert(candidate((101)) == (true));\n\
    \    assert(candidate((11)) == (true));\n    assert(candidate((13441)) == (true));\n\
    \    assert(candidate((61)) == (true));\n    assert(candidate((4)) == (false));\n\
    \    assert(candidate((1)) == (false));\n    assert(candidate((5)) == (true));\n\
    \    assert(candidate((11)) == (true));\n    assert(candidate((17)) == (true));\n\
    \    assert(candidate((85)) == (false));\n    assert(candidate((77)) == (false));\n\
    \    assert(candidate((255379)) == (false));\n}\n"
  stdout: ''
  stderr: "tmpvr3nv2o8: /tmp/tmpvr3nv2o8.cpp:49: int main(): Assertion `candidate((255379))\
    \ == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n    if (n == 1)\n        return false;\n  \
    \  if (n == 2)\n        return true;\n    if (n % 2 == 0)\n        return false;\n\
    \    for (int i = 3; i * i <= n; i += 2)\n        if (n % i == 0)\n          \
    \  return false;\n    return true;\n}\nint main() {\n    auto candidate = is_prime;\n\
    \    assert(candidate((6)) == (false));\n    assert(candidate((101)) == (true));\n\
    \    assert(candidate((11)) == (true));\n    assert(candidate((13441)) == (true));\n\
    \    assert(candidate((61)) == (true));\n    assert(candidate((4)) == (false));\n\
    \    assert(candidate((1)) == (false));\n    assert(candidate((5)) == (true));\n\
    \    assert(candidate((11)) == (true));\n    assert(candidate((17)) == (true));\n\
    \    assert(candidate((85)) == (false));\n    assert(candidate((77)) == (false));\n\
    \    assert(candidate((255379)) == (false));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n    if (n == 2) return true;\n    if (n % 2\
    \ == 0) return false;\n    for (int i = 3; i <= sqrt(n); i += 2) {\n        if\
    \ (n % i == 0) return false;\n    }\n    return true;\n}\nint main() {\n    auto\
    \ candidate = is_prime;\n    assert(candidate((6)) == (false));\n    assert(candidate((101))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((13441))\
    \ == (true));\n    assert(candidate((61)) == (true));\n    assert(candidate((4))\
    \ == (false));\n    assert(candidate((1)) == (false));\n    assert(candidate((5))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((17))\
    \ == (true));\n    assert(candidate((85)) == (false));\n    assert(candidate((77))\
    \ == (false));\n    assert(candidate((255379)) == (false));\n}\n"
  stdout: ''
  stderr: "tmp04wk0v8f: /tmp/tmp04wk0v8f.cpp:34: int main(): Assertion `candidate((1))\
    \ == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n    if (n <= 1) return false;\n    if (n ==\
    \ 2) return true;\n    if (n % 2 == 0) return false;\n    long m = sqrt(n);\n\
    \    for (long i = 3; i <= m; i += 2) {\n        if (n % i == 0) return false;\n\
    \    }\n    return true;\n}\nint main() {\n    auto candidate = is_prime;\n  \
    \  assert(candidate((6)) == (false));\n    assert(candidate((101)) == (true));\n\
    \    assert(candidate((11)) == (true));\n    assert(candidate((13441)) == (true));\n\
    \    assert(candidate((61)) == (true));\n    assert(candidate((4)) == (false));\n\
    \    assert(candidate((1)) == (false));\n    assert(candidate((5)) == (true));\n\
    \    assert(candidate((11)) == (true));\n    assert(candidate((17)) == (true));\n\
    \    assert(candidate((85)) == (false));\n    assert(candidate((77)) == (false));\n\
    \    assert(candidate((255379)) == (false));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n    if (n == 1)\n        return false;\n  \
    \  if (n == 2)\n        return true;\n    if (n % 2 == 0)\n        return false;\n\
    \    for (int i = 3; i <= sqrt(n); i += 2)\n        if (n % i == 0)\n        \
    \    return false;\n    return true;\n}\nint main() {\n    auto candidate = is_prime;\n\
    \    assert(candidate((6)) == (false));\n    assert(candidate((101)) == (true));\n\
    \    assert(candidate((11)) == (true));\n    assert(candidate((13441)) == (true));\n\
    \    assert(candidate((61)) == (true));\n    assert(candidate((4)) == (false));\n\
    \    assert(candidate((1)) == (false));\n    assert(candidate((5)) == (true));\n\
    \    assert(candidate((11)) == (true));\n    assert(candidate((17)) == (true));\n\
    \    assert(candidate((85)) == (false));\n    assert(candidate((77)) == (false));\n\
    \    assert(candidate((255379)) == (false));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n    if (n <= 1) return false;\n    if (n ==\
    \ 2) return true;\n    if (n % 2 == 0) return false;\n    for (int i = 3; i *\
    \ i <= n; i += 2) {\n        if (n % i == 0) return false;\n    }\n    return\
    \ true;\n}\nint main() {\n    auto candidate = is_prime;\n    assert(candidate((6))\
    \ == (false));\n    assert(candidate((101)) == (true));\n    assert(candidate((11))\
    \ == (true));\n    assert(candidate((13441)) == (true));\n    assert(candidate((61))\
    \ == (true));\n    assert(candidate((4)) == (false));\n    assert(candidate((1))\
    \ == (false));\n    assert(candidate((5)) == (true));\n    assert(candidate((11))\
    \ == (true));\n    assert(candidate((17)) == (true));\n    assert(candidate((85))\
    \ == (false));\n    assert(candidate((77)) == (false));\n    assert(candidate((255379))\
    \ == (false));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n    if (n == 1)\n        return false;\n  \
    \  if (n == 2)\n        return true;\n    if (n % 2 == 0)\n        return false;\n\
    \    for (int i = 3; i * i <= n; i += 2)\n        if (n % i == 0)\n          \
    \  return false;\n    return true;\n}\nint main() {\n    auto candidate = is_prime;\n\
    \    assert(candidate((6)) == (false));\n    assert(candidate((101)) == (true));\n\
    \    assert(candidate((11)) == (true));\n    assert(candidate((13441)) == (true));\n\
    \    assert(candidate((61)) == (true));\n    assert(candidate((4)) == (false));\n\
    \    assert(candidate((1)) == (false));\n    assert(candidate((5)) == (true));\n\
    \    assert(candidate((11)) == (true));\n    assert(candidate((17)) == (true));\n\
    \    assert(candidate((85)) == (false));\n    assert(candidate((77)) == (false));\n\
    \    assert(candidate((255379)) == (false));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n  if (n == 2) return true;\n  if (n % 2 ==\
    \ 0) return false;\n  if (n < 3) return true;\n  if (n % 3 == 0) return false;\n\
    \  if (n < 9) return true;\n  if (n % 9 == 0) return false;\n  if (n < 27) return\
    \ true;\n  if (n % 27 == 0) return false;\n  if (n < 53) return true;\n  if (n\
    \ % 53 == 0) return false;\n  if (n < 1025) return true;\n  if (n % 1025 == 0)\
    \ return false;\n  if (n < 20389) return true;\n  if (n % 20389 == 0) return false;\n\
    \  if (n < 418131) return true;\n  if (n % 418131 == 0) return false;\n  if (n\
    \ < 7341025) return true;\n  if (n % 7341025 == 0) return false;\n  if (n < 137438951)\
    \ return true;\n  if (n % 137438951 == 0) return false;\n  if (n < 17497497671)\
    \ return true;\n  if (n % 17497497671 == 0) return false;\n  if (n < 34747494131)\
    \ return true;\n  if (n % 34747494131 == 0) return false;\n  if (n < 634747494131)\
    \ return true;\n  if (n % 634747494131 == 0) return false;\n  if (n < 1034747494131)\
    \ return true;\n  if (n % 1034747494131 == 0) return false;\n  if (n < 2034747494131)\
    \ return true;\n  if (n % 2034747494131 == 0) return false;\n  if (n < 4034747494131)\
    \ return true;\n  if (n % 4034747494131 == 0) return false;\n  if (n < 5034747494131)\
    \ return true;\n  if (n % 5034747494131 == 0) return false;\n  if (n < 7034747494131)\
    \ return true;\n  if (n % 7034747494131 == 0) return false;\n  if (n < 9034747494131)\
    \ return true;\n  if (n % 9034747494131 == 0) return false;\n  if (n < 10034747494131)\
    \ return true;\n  if (n % 10034747494131 == 0) return false;\n  if (n < 11034747494131)\
    \ return true;\n  if (n % 11034747494131 == 0) return false;\n  if (n < 12034747494131)\
    \ return true;\n  if (n % 12034747494131 == 0) return false;\n  if (n < 13034747494131)\
    \ return true;\n  if (n % 13034747494131 == 0) return false;\n  if (n < 1403474\n\
    }\nint main() {\n    auto candidate = is_prime;\n    assert(candidate((6)) ==\
    \ (false));\n    assert(candidate((101)) == (true));\n    assert(candidate((11))\
    \ == (true));\n    assert(candidate((13441)) == (true));\n    assert(candidate((61))\
    \ == (true));\n    assert(candidate((4)) == (false));\n    assert(candidate((1))\
    \ == (false));\n    assert(candidate((5)) == (true));\n    assert(candidate((11))\
    \ == (true));\n    assert(candidate((17)) == (true));\n    assert(candidate((85))\
    \ == (false));\n    assert(candidate((77)) == (false));\n    assert(candidate((255379))\
    \ == (false));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpflpm9nd7.cpp: In function \u2018bool is_prime(long int)\u2019:\n\
    /tmp/tmpflpm9nd7.cpp:65:18: error: expected \u2018)\u2019 before \u2018}\u2019\
    \ token\n   65 |   if (n < 1403474\n      |      ~           ^\n      |      \
    \            )\n   66 | }\n      | ~                 \n/tmp/tmpflpm9nd7.cpp:66:1:\
    \ error: expected primary-expression before \u2018}\u2019 token\n   66 | }\n \
    \     | ^\n/tmp/tmpflpm9nd7.cpp:66:1: warning: control reaches end of non-void\
    \ function [-Wreturn-type]\n   66 | }\n      | ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n    if (n == 1)\n        return false;\n  \
    \  if (n == 2)\n        return true;\n    if (n % 2 == 0)\n        return false;\n\
    \    if (n % 3 == 0)\n        return false;\n    if (n % 5 == 0)\n        return\
    \ false;\n    if (n % 7 == 0)\n        return false;\n    int i = 5;\n    while\
    \ (i <= sqrt(n))\n        if (n % i == 0)\n            return false;\n       \
    \ i += 6;\n    return true;\n}\nint main() {\n    auto candidate = is_prime;\n\
    \    assert(candidate((6)) == (false));\n    assert(candidate((101)) == (true));\n\
    \    assert(candidate((11)) == (true));\n    assert(candidate((13441)) == (true));\n\
    \    assert(candidate((61)) == (true));\n    assert(candidate((4)) == (false));\n\
    \    assert(candidate((1)) == (false));\n    assert(candidate((5)) == (true));\n\
    \    assert(candidate((11)) == (true));\n    assert(candidate((17)) == (true));\n\
    \    assert(candidate((85)) == (false));\n    assert(candidate((77)) == (false));\n\
    \    assert(candidate((255379)) == (false));\n}\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n    if (n <= 1) return false;\n    if (n ==\
    \ 2) return true;\n    if (n % 2 == 0) return false;\n    if (n % 3 == 0) return\
    \ false;\n    int i = 5;\n    while (i <= sqrt(n)) {\n        if (n % i == 0)\
    \ return false;\n        i += 6;\n    }\n    return true;\n}\nint main() {\n \
    \   auto candidate = is_prime;\n    assert(candidate((6)) == (false));\n    assert(candidate((101))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((13441))\
    \ == (true));\n    assert(candidate((61)) == (true));\n    assert(candidate((4))\
    \ == (false));\n    assert(candidate((1)) == (false));\n    assert(candidate((5))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((17))\
    \ == (true));\n    assert(candidate((85)) == (false));\n    assert(candidate((77))\
    \ == (false));\n    assert(candidate((255379)) == (false));\n}\n"
  stdout: ''
  stderr: "tmpdra1dep3: /tmp/tmpdra1dep3.cpp:43: int main(): Assertion `candidate((77))\
    \ == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n    if (n <= 1) return false;\n    long sqr\
    \ = sqrt(n);\n    for (long i = 3; i <= sqr; i += 2) {\n        if (n % i == 0)\
    \ return false;\n    }\n    return true;\n}\nint main() {\n    auto candidate\
    \ = is_prime;\n    assert(candidate((6)) == (false));\n    assert(candidate((101))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((13441))\
    \ == (true));\n    assert(candidate((61)) == (true));\n    assert(candidate((4))\
    \ == (false));\n    assert(candidate((1)) == (false));\n    assert(candidate((5))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((17))\
    \ == (true));\n    assert(candidate((85)) == (false));\n    assert(candidate((77))\
    \ == (false));\n    assert(candidate((255379)) == (false));\n}\n"
  stdout: ''
  stderr: "tmpxhwafsd8: /tmp/tmpxhwafsd8.cpp:28: int main(): Assertion `candidate((6))\
    \ == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n    if (n == 1) return false;\n    if (n ==\
    \ 2) return true;\n    if (n % 2 == 0) return false;\n    if (n % 3 == 0) return\
    \ false;\n    int i = 5;\n    while (i < n) {\n        if (n % i == 0) return\
    \ false;\n        i += 6;\n    }\n    return true;\n}\nint main() {\n    auto\
    \ candidate = is_prime;\n    assert(candidate((6)) == (false));\n    assert(candidate((101))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((13441))\
    \ == (true));\n    assert(candidate((61)) == (true));\n    assert(candidate((4))\
    \ == (false));\n    assert(candidate((1)) == (false));\n    assert(candidate((5))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((17))\
    \ == (true));\n    assert(candidate((85)) == (false));\n    assert(candidate((77))\
    \ == (false));\n    assert(candidate((255379)) == (false));\n}\n"
  stdout: ''
  stderr: "tmprcgq8g7m: /tmp/tmprcgq8g7m.cpp:44: int main(): Assertion `candidate((255379))\
    \ == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n    if (n == 1)\n        return false;\n  \
    \  if (n == 2)\n        return true;\n    if (n % 2 == 0)\n        return false;\n\
    \    if (n % 3 == 0)\n        return false;\n    long i = 5;\n    while (i < n)\
    \ {\n        if (n % i == 0)\n            return false;\n        i += 6;\n   \
    \ }\n    return true;\n}\nint main() {\n    auto candidate = is_prime;\n    assert(candidate((6))\
    \ == (false));\n    assert(candidate((101)) == (true));\n    assert(candidate((11))\
    \ == (true));\n    assert(candidate((13441)) == (true));\n    assert(candidate((61))\
    \ == (true));\n    assert(candidate((4)) == (false));\n    assert(candidate((1))\
    \ == (false));\n    assert(candidate((5)) == (true));\n    assert(candidate((11))\
    \ == (true));\n    assert(candidate((17)) == (true));\n    assert(candidate((85))\
    \ == (false));\n    assert(candidate((77)) == (false));\n    assert(candidate((255379))\
    \ == (false));\n}\n"
  stdout: ''
  stderr: "tmpxumnucw8: /tmp/tmpxumnucw8.cpp:49: int main(): Assertion `candidate((255379))\
    \ == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n    if (n == 1) return false;\n    if (n ==\
    \ 2) return true;\n    if (n % 2 == 0) return false;\n    if (n % 3 == 0) return\
    \ false;\n    long i = 5;\n    while (i <= sqrt(n)) {\n        if (n % i == 0)\
    \ return false;\n        i += 6;\n    }\n    return true;\n}\nint main() {\n \
    \   auto candidate = is_prime;\n    assert(candidate((6)) == (false));\n    assert(candidate((101))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((13441))\
    \ == (true));\n    assert(candidate((61)) == (true));\n    assert(candidate((4))\
    \ == (false));\n    assert(candidate((1)) == (false));\n    assert(candidate((5))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((17))\
    \ == (true));\n    assert(candidate((85)) == (false));\n    assert(candidate((77))\
    \ == (false));\n    assert(candidate((255379)) == (false));\n}\n"
  stdout: ''
  stderr: "tmpknbp9920: /tmp/tmpknbp9920.cpp:43: int main(): Assertion `candidate((77))\
    \ == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n    if (n <= 1)\n        return false;\n  \
    \  if (n == 2)\n        return true;\n    if (n % 2 == 0)\n        return false;\n\
    \    for (int i = 3; i <= sqrt(n); i += 2)\n        if (n % i == 0)\n        \
    \    return false;\n    return true;\n}\nint main() {\n    auto candidate = is_prime;\n\
    \    assert(candidate((6)) == (false));\n    assert(candidate((101)) == (true));\n\
    \    assert(candidate((11)) == (true));\n    assert(candidate((13441)) == (true));\n\
    \    assert(candidate((61)) == (true));\n    assert(candidate((4)) == (false));\n\
    \    assert(candidate((1)) == (false));\n    assert(candidate((5)) == (true));\n\
    \    assert(candidate((11)) == (true));\n    assert(candidate((17)) == (true));\n\
    \    assert(candidate((85)) == (false));\n    assert(candidate((77)) == (false));\n\
    \    assert(candidate((255379)) == (false));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n    if (n <= 1) return false;\n    long sqr\
    \ = sqrt(n);\n    for (long i = 3; i <= sqr; i += 2) {\n        if (n % i == 0)\
    \ return false;\n    }\n    return true;\n}\nint main() {\n    auto candidate\
    \ = is_prime;\n    assert(candidate((6)) == (false));\n    assert(candidate((101))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((13441))\
    \ == (true));\n    assert(candidate((61)) == (true));\n    assert(candidate((4))\
    \ == (false));\n    assert(candidate((1)) == (false));\n    assert(candidate((5))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((17))\
    \ == (true));\n    assert(candidate((85)) == (false));\n    assert(candidate((77))\
    \ == (false));\n    assert(candidate((255379)) == (false));\n}\n"
  stdout: ''
  stderr: "tmpa1of6npc: /tmp/tmpa1of6npc.cpp:28: int main(): Assertion `candidate((6))\
    \ == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n    if (n <= 1) return false;\n    if (n ==\
    \ 2) return true;\n    if (n % 2 == 0) return false;\n    long sqr = sqrt(n);\n\
    \    for (long i = 3; i <= sqr; i += 2) {\n        if (n % i == 0) return false;\n\
    \    }\n    return true;\n}\nint main() {\n    auto candidate = is_prime;\n  \
    \  assert(candidate((6)) == (false));\n    assert(candidate((101)) == (true));\n\
    \    assert(candidate((11)) == (true));\n    assert(candidate((13441)) == (true));\n\
    \    assert(candidate((61)) == (true));\n    assert(candidate((4)) == (false));\n\
    \    assert(candidate((1)) == (false));\n    assert(candidate((5)) == (true));\n\
    \    assert(candidate((11)) == (true));\n    assert(candidate((17)) == (true));\n\
    \    assert(candidate((85)) == (false));\n    assert(candidate((77)) == (false));\n\
    \    assert(candidate((255379)) == (false));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n    if (n <= 1) return false;\n    if (n ==\
    \ 2) return true;\n    if (n % 2 == 0) return false;\n    if (n % 3 == 0) return\
    \ false;\n    int i = 5;\n    while (i <= sqrt(n)) {\n        if (n % i == 0)\
    \ return false;\n        i += 6;\n    }\n    return true;\n}\nint main() {\n \
    \   auto candidate = is_prime;\n    assert(candidate((6)) == (false));\n    assert(candidate((101))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((13441))\
    \ == (true));\n    assert(candidate((61)) == (true));\n    assert(candidate((4))\
    \ == (false));\n    assert(candidate((1)) == (false));\n    assert(candidate((5))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((17))\
    \ == (true));\n    assert(candidate((85)) == (false));\n    assert(candidate((77))\
    \ == (false));\n    assert(candidate((255379)) == (false));\n}\n"
  stdout: ''
  stderr: "tmp3_1tksi0: /tmp/tmp3_1tksi0.cpp:43: int main(): Assertion `candidate((77))\
    \ == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n    if (n < 2)\n        return false;\n   \
    \ if (n == 2)\n        return true;\n    if (n % 2 == 0)\n        return false;\n\
    \    for (int i = 3; i * i <= n; i += 2)\n        if (n % i == 0)\n          \
    \  return false;\n    return true;\n}\nint main() {\n    auto candidate = is_prime;\n\
    \    assert(candidate((6)) == (false));\n    assert(candidate((101)) == (true));\n\
    \    assert(candidate((11)) == (true));\n    assert(candidate((13441)) == (true));\n\
    \    assert(candidate((61)) == (true));\n    assert(candidate((4)) == (false));\n\
    \    assert(candidate((1)) == (false));\n    assert(candidate((5)) == (true));\n\
    \    assert(candidate((11)) == (true));\n    assert(candidate((17)) == (true));\n\
    \    assert(candidate((85)) == (false));\n    assert(candidate((77)) == (false));\n\
    \    assert(candidate((255379)) == (false));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n    if (n < 2)\n        return false;\n   \
    \ if (n == 2)\n        return true;\n    if (n % 2 == 0)\n        return false;\n\
    \    for (int i = 3; i <= sqrt(n); i += 2)\n        if (n % i == 0)\n        \
    \    return false;\n    return true;\n}\nint main() {\n    auto candidate = is_prime;\n\
    \    assert(candidate((6)) == (false));\n    assert(candidate((101)) == (true));\n\
    \    assert(candidate((11)) == (true));\n    assert(candidate((13441)) == (true));\n\
    \    assert(candidate((61)) == (true));\n    assert(candidate((4)) == (false));\n\
    \    assert(candidate((1)) == (false));\n    assert(candidate((5)) == (true));\n\
    \    assert(candidate((11)) == (true));\n    assert(candidate((17)) == (true));\n\
    \    assert(candidate((85)) == (false));\n    assert(candidate((77)) == (false));\n\
    \    assert(candidate((255379)) == (false));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n  if (n < 2) return false;\n  if (n == 2) return\
    \ true;\n  if (n % 2 == 0) return false;\n  if (n % 3 == 0) return false;\n  if\
    \ (n % 5 == 0) return false;\n  if (n % 7 == 0) return false;\n  if (n % 11 ==\
    \ 0) return false;\n  if (n % 13 == 0) return false;\n  if (n % 17 == 0) return\
    \ false;\n  if (n % 19 == 0) return false;\n  if (n % 23 == 0) return false;\n\
    \  if (n % 29 == 0) return false;\n  if (n % 31 == 0) return false;\n  if (n %\
    \ 37 == 0) return false;\n  if (n % 41) == 0) return false;\n  if (n % 43) ==\
    \ 0) return false;\n  if (n % 47) == 0) return false;\n  if (n % 53) == 0) return\
    \ false;\n  if (n % 59) == 0) return false;\n  if (n % 61) == 0) return false;\n\
    \  if (n % 67) == 0) return false;\n  if (n % 71) == 0) return false;\n  if (n\
    \ % 73) == 0) return false;\n  if (n % 79) == 0) return false;\n  if (n % 83)\
    \ == 0) return false;\n  if (n % 89) == 0) return false;\n  if (n % 97) == 0)\
    \ return false;\n  if (n % 103) == 0) return false;\n  if (n % 109) == 0) return\
    \ false;\n  if (n % 113) == 0) return false;\n  if (n % 127) == 0) return false;\n\
    \  if (n % 131) == 0) return false;\n  if (n % 139) == 0) return false;\n  if\
    \ (n % 147) == 0) return false;\n  if (n % 151) == 0) return false;\n  if (n %\
    \ 157) == 0) return false;\n  if (n % 163) == 0) return false;\n  if (n % 167)\
    \ == 0) return false;\n  if (n % 173) == 0) return false;\n  if (n % 179) == 0)\
    \ return false;\n  if (n % 181) == 0) return false;\n  if (n % 185) == 0) return\
    \ false;\n  if (n % 189) == 0) return false;\n  if (n % 193) == 0) return false;\n\
    \  if (n % 197) == 0) return false;\n  if (n % 201) == 0) return false;\n  if\
    \ (n % 207) == 0) return false;\n  if (n % 211) == 0) return false;\n  if (n %\
    \ 215) == 0) return false;\n  if (n % 217) == 0) return false;\n  if (n % 223)\
    \ == 0) return false;\n  if (n % 227) == 0) return false;\n  if (n % 229) == 0)\
    \ return false;\n  if (n % 233) == 0) return false;\n  if (n % 239) == 0) return\
    \ false;\n  if (n % 241) == 0) return false;\n  if (n % 247) == 0) return false;\n\
    \  if (n % 251) == 0) return false;\n  if (n % 257) == 0) return false;\n  if\
    \ (n % 263) == 0) return false;\n  if (n % 269) == 0) return false;\n  if (n %\
    \ 271) == 0) return false;\n  if (n % 277) == 0) return false;\n  if (n % 283)\
    \ == 0) return false;\n\n}\nint main() {\n    auto candidate = is_prime;\n   \
    \ assert(candidate((6)) == (false));\n    assert(candidate((101)) == (true));\n\
    \    assert(candidate((11)) == (true));\n    assert(candidate((13441)) == (true));\n\
    \    assert(candidate((61)) == (true));\n    assert(candidate((4)) == (false));\n\
    \    assert(candidate((1)) == (false));\n    assert(candidate((5)) == (true));\n\
    \    assert(candidate((11)) == (true));\n    assert(candidate((17)) == (true));\n\
    \    assert(candidate((85)) == (false));\n    assert(candidate((77)) == (false));\n\
    \    assert(candidate((255379)) == (false));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp2n5l6cr9.cpp: In function \u2018bool is_prime(long int)\u2019:\n\
    /tmp/tmp2n5l6cr9.cpp:33:15: error: expected primary-expression before \u2018==\u2019\
    \ token\n   33 |   if (n % 41) == 0) return false;\n      |               ^~\n\
    /tmp/tmp2n5l6cr9.cpp:34:15: error: expected primary-expression before \u2018==\u2019\
    \ token\n   34 |   if (n % 43) == 0) return false;\n      |               ^~\n\
    /tmp/tmp2n5l6cr9.cpp:35:15: error: expected primary-expression before \u2018==\u2019\
    \ token\n   35 |   if (n % 47) == 0) return false;\n      |               ^~\n\
    /tmp/tmp2n5l6cr9.cpp:36:15: error: expected primary-expression before \u2018==\u2019\
    \ token\n   36 |   if (n % 53) == 0) return false;\n      |               ^~\n\
    /tmp/tmp2n5l6cr9.cpp:37:15: error: expected primary-expression before \u2018==\u2019\
    \ token\n   37 |   if (n % 59) == 0) return false;\n      |               ^~\n\
    /tmp/tmp2n5l6cr9.cpp:38:15: error: expected primary-expression before \u2018==\u2019\
    \ token\n   38 |   if (n % 61) == 0) return false;\n      |               ^~\n\
    /tmp/tmp2n5l6cr9.cpp:39:15: error: expected primary-expression before \u2018==\u2019\
    \ token\n   39 |   if (n % 67) == 0) return false;\n      |               ^~\n\
    /tmp/tmp2n5l6cr9.cpp:40:15: error: expected primary-expression before \u2018==\u2019\
    \ token\n   40 |   if (n % 71) == 0) return false;\n      |               ^~\n\
    /tmp/tmp2n5l6cr9.cpp:41:15: error: expected primary-expression before \u2018==\u2019\
    \ token\n   41 |   if (n % 73) == 0) return false;\n      |               ^~\n\
    /tmp/tmp2n5l6cr9.cpp:42:15: error: expected primary-expression before \u2018==\u2019\
    \ token\n   42 |   if (n % 79) == 0) return false;\n      |               ^~\n\
    /tmp/tmp2n5l6cr9.cpp:43:15: error: expected primary-expression before \u2018==\u2019\
    \ token\n   43 |   if (n % 83) == 0) return false;\n      |               ^~\n\
    /tmp/tmp2n5l6cr9.cpp:44:15: error: expected primary-expression before \u2018==\u2019\
    \ token\n   44 |   if (n % 89) == 0) return false;\n      |               ^~\n\
    /tmp/tmp2n5l6cr9.cpp:45:15: error: expected primary-expression before \u2018==\u2019\
    \ token\n   45 |   if (n % 97) == 0) return false;\n      |               ^~\n\
    /tmp/tmp2n5l6cr9.cpp:46:16: error: expected primary-expression before \u2018==\u2019\
    \ token\n   46 |   if (n % 103) == 0) return false;\n      |                ^~\n\
    /tmp/tmp2n5l6cr9.cpp:47:16: error: expected primary-expression before \u2018==\u2019\
    \ token\n   47 |   if (n % 109) == 0) return false;\n      |                ^~\n\
    /tmp/tmp2n5l6cr9.cpp:48:16: error: expected primary-expression before \u2018==\u2019\
    \ token\n   48 |   if (n % 113) == 0) return false;\n      |                ^~\n\
    /tmp/tmp2n5l6cr9.cpp:49:16: error: expected primary-expression before \u2018==\u2019\
    \ token\n   49 |   if (n % 127) == 0) return false;\n      |                ^~\n\
    /tmp/tmp2n5l6cr9.cpp:50:16: error: expected primary-expression before \u2018==\u2019\
    \ token\n   50 |   if (n % 131) == 0) return false;\n      |                ^~\n\
    /tmp/tmp2n5l6cr9.cpp:51:16: error: expected primary-expression before \u2018==\u2019\
    \ token\n   51 |   if (n % 139) == 0) return false;\n      |                ^~\n\
    /tmp/tmp2n5l6cr9.cpp:52:16: error: expected primary-expression before \u2018==\u2019\
    \ token\n   52 |   if (n % 147) == 0) return false;\n      |                ^~\n\
    /tmp/tmp2n5l6cr9.cpp:53:16: error: expected primary-expression before \u2018==\u2019\
    \ token\n   53 |   if (n % 151) == 0) return false;\n      |                ^~\n\
    /tmp/tmp2n5l6cr9.cpp:54:16: error: expected primary-expression before \u2018==\u2019\
    \ token\n   54 |   if (n % 157) == 0) return false;\n      |                ^~\n\
    /tmp/tmp2n5l6cr9.cpp:55:16: error: expected primary-expression before \u2018==\u2019\
    \ token\n   55 |   if (n % 163) == 0) return false;\n      |                ^~\n\
    /tmp/tmp2n5l6cr9.cpp:56:16: error: expected primary-expression before \u2018==\u2019\
    \ token\n   56 |   if (n % 167) == 0) return false;\n      |                ^~\n\
    /tmp/tmp2n5l6cr9.cpp:57:16: error: expected primary-expression before \u2018==\u2019\
    \ token\n   57 |   if (n % 173) == 0) return false;\n      |                ^~\n\
    /tmp/tmp2n5l6cr9.cpp:58:16: error: expected primary-expression before \u2018==\u2019\
    \ token\n   58 |   if (n % 179) == 0) return false;\n      |                ^~\n\
    /tmp/tmp2n5l6cr9.cpp:59:16: error: expected primary-expression before \u2018==\u2019\
    \ token\n   59 |   if (n % 181) == 0) return false;\n      |                ^~\n\
    /tmp/tmp2n5l6cr9.cpp:60:16: error: expected primary-expression before \u2018==\u2019\
    \ token\n   60 |   if (n % 185) == 0) return false;\n      |                ^~\n\
    /tmp/tmp2n5l6cr9.cpp:61:16: error: expected primary-expression before \u2018==\u2019\
    \ token\n   61 |   if (n % 189) == 0) return false;\n      |                ^~\n\
    /tmp/tmp2n5l6cr9.cpp:62:16: error: expected primary-expression before \u2018==\u2019\
    \ token\n   62 |   if (n % 193) == 0) return false;\n      |                ^~\n\
    /tmp/tmp2n5l6cr9.cpp:63:16: error: expected primary-expression before \u2018==\u2019\
    \ token\n   63 |   if (n % 197) == 0) return false;\n      |                ^~\n\
    /tmp/tmp2n5l6cr9.cpp:64:16: error: expected primary-expression before \u2018==\u2019\
    \ token\n   64 |   if (n % 201) == 0) return false;\n      |                ^~\n\
    /tmp/tmp2n5l6cr9.cpp:65:16: error: expected primary-expression before \u2018==\u2019\
    \ token\n   65 |   if (n % 207) == 0) return false;\n      |                ^~\n\
    /tmp/tmp2n5l6cr9.cpp:66:16: error: expected primary-expression before \u2018==\u2019\
    \ token\n   66 |   if (n % 211) == 0) return false;\n      |                ^~\n\
    /tmp/tmp2n5l6cr9.cpp:67:16: error: expected primary-expression before \u2018==\u2019\
    \ token\n   67 |   if (n % 215) == 0) return false;\n      |                ^~\n\
    /tmp/tmp2n5l6cr9.cpp:68:16: error: expected primary-expression before \u2018==\u2019\
    \ token\n   68 |   if (n % 217) == 0) return false;\n      |                ^~\n\
    /tmp/tmp2n5l6cr9.cpp:69:16: error: expected primary-expression before \u2018==\u2019\
    \ token\n   69 |   if (n % 223) == 0) return false;\n      |                ^~\n\
    /tmp/tmp2n5l6cr9.cpp:70:16: error: expected primary-expression before \u2018==\u2019\
    \ token\n   70 |   if (n % 227) == 0) return false;\n      |                ^~\n\
    /tmp/tmp2n5l6cr9.cpp:71:16: error: expected primary-expression before \u2018==\u2019\
    \ token\n   71 |   if (n % 229) == 0) return false;\n      |                ^~\n\
    /tmp/tmp2n5l6cr9.cpp:72:16: error: expected primary-expression before \u2018==\u2019\
    \ token\n   72 |   if (n % 233) == 0) return false;\n      |                ^~\n\
    /tmp/tmp2n5l6cr9.cpp:73:16: error: expected primary-expression before \u2018==\u2019\
    \ token\n   73 |   if (n % 239) == 0) return false;\n      |                ^~\n\
    /tmp/tmp2n5l6cr9.cpp:74:16: error: expected primary-expression before \u2018==\u2019\
    \ token\n   74 |   if (n % 241) == 0) return false;\n      |                ^~\n\
    /tmp/tmp2n5l6cr9.cpp:75:16: error: expected primary-expression before \u2018==\u2019\
    \ token\n   75 |   if (n % 247) == 0) return false;\n      |                ^~\n\
    /tmp/tmp2n5l6cr9.cpp:76:16: error: expected primary-expression before \u2018==\u2019\
    \ token\n   76 |   if (n % 251) == 0) return false;\n      |                ^~\n\
    /tmp/tmp2n5l6cr9.cpp:77:16: error: expected primary-expression before \u2018==\u2019\
    \ token\n   77 |   if (n % 257) == 0) return false;\n      |                ^~\n\
    /tmp/tmp2n5l6cr9.cpp:78:16: error: expected primary-expression before \u2018==\u2019\
    \ token\n   78 |   if (n % 263) == 0) return false;\n      |                ^~\n\
    /tmp/tmp2n5l6cr9.cpp:79:16: error: expected primary-expression before \u2018==\u2019\
    \ token\n   79 |   if (n % 269) == 0) return false;\n      |                ^~\n\
    /tmp/tmp2n5l6cr9.cpp:80:16: error: expected primary-expression before \u2018==\u2019\
    \ token\n   80 |   if (n % 271) == 0) return false;\n      |                ^~\n\
    /tmp/tmp2n5l6cr9.cpp:81:16: error: expected primary-expression before \u2018==\u2019\
    \ token\n   81 |   if (n % 277) == 0) return false;\n      |                ^~\n\
    /tmp/tmp2n5l6cr9.cpp:82:16: error: expected primary-expression before \u2018==\u2019\
    \ token\n   82 |   if (n % 283) == 0) return false;\n      |                ^~\n\
    /tmp/tmp2n5l6cr9.cpp:84:1: warning: control reaches end of non-void function [-Wreturn-type]\n\
    \   84 | }\n      | ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n    if (n <= 1) return false;\n    if (n ==\
    \ 2) return true;\n    if (n % 2 == 0) return false;\n    if (n % 3 == 0) return\
    \ false;\n    long i = 5;\n    while (i <= sqrt(n)) {\n        if (n % i == 0)\
    \ return false;\n        i += 6;\n    }\n    return true;\n}\nint main() {\n \
    \   auto candidate = is_prime;\n    assert(candidate((6)) == (false));\n    assert(candidate((101))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((13441))\
    \ == (true));\n    assert(candidate((61)) == (true));\n    assert(candidate((4))\
    \ == (false));\n    assert(candidate((1)) == (false));\n    assert(candidate((5))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((17))\
    \ == (true));\n    assert(candidate((85)) == (false));\n    assert(candidate((77))\
    \ == (false));\n    assert(candidate((255379)) == (false));\n}\n"
  stdout: ''
  stderr: "tmpcm28y6p8: /tmp/tmpcm28y6p8.cpp:43: int main(): Assertion `candidate((77))\
    \ == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n  if (n == 1)\n    return false;\n  if (n ==\
    \ 2)\n    return true;\n  if (n % 2 == 0)\n    return false;\n  for (long i =\
    \ 3; i * i <= n; i += 2)\n    if (n % i == 0)\n      return false;\n  return true;\n\
    }\nint main() {\n    auto candidate = is_prime;\n    assert(candidate((6)) ==\
    \ (false));\n    assert(candidate((101)) == (true));\n    assert(candidate((11))\
    \ == (true));\n    assert(candidate((13441)) == (true));\n    assert(candidate((61))\
    \ == (true));\n    assert(candidate((4)) == (false));\n    assert(candidate((1))\
    \ == (false));\n    assert(candidate((5)) == (true));\n    assert(candidate((11))\
    \ == (true));\n    assert(candidate((17)) == (true));\n    assert(candidate((85))\
    \ == (false));\n    assert(candidate((77)) == (false));\n    assert(candidate((255379))\
    \ == (false));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n    if (n <= 1) return false;\n    if (n ==\
    \ 2) return true;\n    if (n % 2 == 0) return false;\n    if (n % 3 == 0) return\
    \ false;\n    long i = 5;\n    while (i <= sqrt(n)) {\n        if (n % i == 0)\
    \ return false;\n        i += 6;\n    }\n    return true;\n}\nint main() {\n \
    \   auto candidate = is_prime;\n    assert(candidate((6)) == (false));\n    assert(candidate((101))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((13441))\
    \ == (true));\n    assert(candidate((61)) == (true));\n    assert(candidate((4))\
    \ == (false));\n    assert(candidate((1)) == (false));\n    assert(candidate((5))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((17))\
    \ == (true));\n    assert(candidate((85)) == (false));\n    assert(candidate((77))\
    \ == (false));\n    assert(candidate((255379)) == (false));\n}\n"
  stdout: ''
  stderr: "tmpjqq6up1s: /tmp/tmpjqq6up1s.cpp:43: int main(): Assertion `candidate((77))\
    \ == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n    if (n <= 1) return false;\n    if (n <=\
    \ 3) return true;\n    if (n % 2 == 0 || n % 3 == 0) return false;\n    long i\
    \ = 5;\n    while (i <= sqrt(n)) {\n        if (n % i == 0 || n % (i + 2) == 0)\
    \ return false;\n        i += 6;\n    }\n    return true;\n}\nint main() {\n \
    \   auto candidate = is_prime;\n    assert(candidate((6)) == (false));\n    assert(candidate((101))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((13441))\
    \ == (true));\n    assert(candidate((61)) == (true));\n    assert(candidate((4))\
    \ == (false));\n    assert(candidate((1)) == (false));\n    assert(candidate((5))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((17))\
    \ == (true));\n    assert(candidate((85)) == (false));\n    assert(candidate((77))\
    \ == (false));\n    assert(candidate((255379)) == (false));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n    if (n == 1)\n        return false;\n  \
    \  if (n == 2)\n        return true;\n    if (n % 2 == 0)\n        return false;\n\
    \    for (int i = 3; i <= n / 2; i += 2)\n        if (n % i == 0)\n          \
    \  return false;\n    return true;\n}\nint main() {\n    auto candidate = is_prime;\n\
    \    assert(candidate((6)) == (false));\n    assert(candidate((101)) == (true));\n\
    \    assert(candidate((11)) == (true));\n    assert(candidate((13441)) == (true));\n\
    \    assert(candidate((61)) == (true));\n    assert(candidate((4)) == (false));\n\
    \    assert(candidate((1)) == (false));\n    assert(candidate((5)) == (true));\n\
    \    assert(candidate((11)) == (true));\n    assert(candidate((17)) == (true));\n\
    \    assert(candidate((85)) == (false));\n    assert(candidate((77)) == (false));\n\
    \    assert(candidate((255379)) == (false));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n    if (n < 2) return false;\n    if (n ==\
    \ 2) return true;\n    if (n % 2 == 0) return false;\n    for (int i = 3; i *\
    \ i <= n; i += 2) {\n        if (n % i == 0) return false;\n    }\n    return\
    \ true;\n}\nint main() {\n    auto candidate = is_prime;\n    assert(candidate((6))\
    \ == (false));\n    assert(candidate((101)) == (true));\n    assert(candidate((11))\
    \ == (true));\n    assert(candidate((13441)) == (true));\n    assert(candidate((61))\
    \ == (true));\n    assert(candidate((4)) == (false));\n    assert(candidate((1))\
    \ == (false));\n    assert(candidate((5)) == (true));\n    assert(candidate((11))\
    \ == (true));\n    assert(candidate((17)) == (true));\n    assert(candidate((85))\
    \ == (false));\n    assert(candidate((77)) == (false));\n    assert(candidate((255379))\
    \ == (false));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n    if (n == 1)\n        return false;\n  \
    \  if (n == 2)\n        return true;\n    if (n % 2 == 0)\n        return false;\n\
    \    for (int i = 3; i * i <= n; i += 2)\n        if (n % i == 0)\n          \
    \  return false;\n    return true;\n}\nint main() {\n    auto candidate = is_prime;\n\
    \    assert(candidate((6)) == (false));\n    assert(candidate((101)) == (true));\n\
    \    assert(candidate((11)) == (true));\n    assert(candidate((13441)) == (true));\n\
    \    assert(candidate((61)) == (true));\n    assert(candidate((4)) == (false));\n\
    \    assert(candidate((1)) == (false));\n    assert(candidate((5)) == (true));\n\
    \    assert(candidate((11)) == (true));\n    assert(candidate((17)) == (true));\n\
    \    assert(candidate((85)) == (false));\n    assert(candidate((77)) == (false));\n\
    \    assert(candidate((255379)) == (false));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n    if (n == 1) return false;\n    if (n ==\
    \ 2) return true;\n    if (n % 2 == 0) return false;\n    if (n % 3 == 0) return\
    \ false;\n    long i = 5;\n    while (i <= n / 3) {\n        if (n % i == 0) return\
    \ false;\n        i += 6;\n    }\n    return true;\n}\nint main() {\n    auto\
    \ candidate = is_prime;\n    assert(candidate((6)) == (false));\n    assert(candidate((101))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((13441))\
    \ == (true));\n    assert(candidate((61)) == (true));\n    assert(candidate((4))\
    \ == (false));\n    assert(candidate((1)) == (false));\n    assert(candidate((5))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((17))\
    \ == (true));\n    assert(candidate((85)) == (false));\n    assert(candidate((77))\
    \ == (false));\n    assert(candidate((255379)) == (false));\n}\n"
  stdout: ''
  stderr: "tmpiwr1my2x: /tmp/tmpiwr1my2x.cpp:44: int main(): Assertion `candidate((255379))\
    \ == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n    if (n == 1)\n        return false;\n  \
    \  if (n == 2)\n        return true;\n    if (n % 2 == 0)\n        return false;\n\
    \    for (int i = 3; i * i <= n; i += 2)\n        if (n % i == 0)\n          \
    \  return false;\n    return true;\n}\nint main() {\n    auto candidate = is_prime;\n\
    \    assert(candidate((6)) == (false));\n    assert(candidate((101)) == (true));\n\
    \    assert(candidate((11)) == (true));\n    assert(candidate((13441)) == (true));\n\
    \    assert(candidate((61)) == (true));\n    assert(candidate((4)) == (false));\n\
    \    assert(candidate((1)) == (false));\n    assert(candidate((5)) == (true));\n\
    \    assert(candidate((11)) == (true));\n    assert(candidate((17)) == (true));\n\
    \    assert(candidate((85)) == (false));\n    assert(candidate((77)) == (false));\n\
    \    assert(candidate((255379)) == (false));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n    if (n < 2)\n        return false;\n   \
    \ long sq = sqrt(n);\n    for (long i = 3; i <= sq; i += 2)\n        if (n % i\
    \ == 0)\n            return false;\n    return true;\n}\nint main() {\n    auto\
    \ candidate = is_prime;\n    assert(candidate((6)) == (false));\n    assert(candidate((101))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((13441))\
    \ == (true));\n    assert(candidate((61)) == (true));\n    assert(candidate((4))\
    \ == (false));\n    assert(candidate((1)) == (false));\n    assert(candidate((5))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((17))\
    \ == (true));\n    assert(candidate((85)) == (false));\n    assert(candidate((77))\
    \ == (false));\n    assert(candidate((255379)) == (false));\n}\n"
  stdout: ''
  stderr: "tmpqqwkan15: /tmp/tmpqqwkan15.cpp:29: int main(): Assertion `candidate((6))\
    \ == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n  if (n == 1)\n    return false;\n  if (n ==\
    \ 2)\n    return true;\n  if (n % 2 == 0)\n    return false;\n  for (long i =\
    \ 3; i * i <= n; i += 2)\n    if (n % i == 0)\n      return false;\n  return true;\n\
    }\nint main() {\n    auto candidate = is_prime;\n    assert(candidate((6)) ==\
    \ (false));\n    assert(candidate((101)) == (true));\n    assert(candidate((11))\
    \ == (true));\n    assert(candidate((13441)) == (true));\n    assert(candidate((61))\
    \ == (true));\n    assert(candidate((4)) == (false));\n    assert(candidate((1))\
    \ == (false));\n    assert(candidate((5)) == (true));\n    assert(candidate((11))\
    \ == (true));\n    assert(candidate((17)) == (true));\n    assert(candidate((85))\
    \ == (false));\n    assert(candidate((77)) == (false));\n    assert(candidate((255379))\
    \ == (false));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n    if (n <= 1) return false;\n    if (n ==\
    \ 2) return true;\n    if (n % 2 == 0) return false;\n    if (n % 3 == 0) return\
    \ false;\n    if (n % 5 == 0) return false;\n    int i = 5;\n    while (i <= sqrt(n))\
    \ {\n        if (n % i == 0) return false;\n        i += 6;\n    }\n    return\
    \ true;\n}\nint main() {\n    auto candidate = is_prime;\n    assert(candidate((6))\
    \ == (false));\n    assert(candidate((101)) == (true));\n    assert(candidate((11))\
    \ == (true));\n    assert(candidate((13441)) == (true));\n    assert(candidate((61))\
    \ == (true));\n    assert(candidate((4)) == (false));\n    assert(candidate((1))\
    \ == (false));\n    assert(candidate((5)) == (true));\n    assert(candidate((11))\
    \ == (true));\n    assert(candidate((17)) == (true));\n    assert(candidate((85))\
    \ == (false));\n    assert(candidate((77)) == (false));\n    assert(candidate((255379))\
    \ == (false));\n}\n"
  stdout: ''
  stderr: "tmpjrs5mmcs: /tmp/tmpjrs5mmcs.cpp:40: int main(): Assertion `candidate((5))\
    \ == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n    if (n <= 1) return false;\n    if (n ==\
    \ 2) return true;\n    if (n % 2 == 0) return false;\n    if (n % 3 == 0) return\
    \ false;\n    long i = 5;\n    while (i <= n / 3) {\n        if (n % i == 0) return\
    \ false;\n        i += 6;\n    }\n    return true;\n}\nint main() {\n    auto\
    \ candidate = is_prime;\n    assert(candidate((6)) == (false));\n    assert(candidate((101))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((13441))\
    \ == (true));\n    assert(candidate((61)) == (true));\n    assert(candidate((4))\
    \ == (false));\n    assert(candidate((1)) == (false));\n    assert(candidate((5))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((17))\
    \ == (true));\n    assert(candidate((85)) == (false));\n    assert(candidate((77))\
    \ == (false));\n    assert(candidate((255379)) == (false));\n}\n"
  stdout: ''
  stderr: "tmpd9h6w6zs: /tmp/tmpd9h6w6zs.cpp:44: int main(): Assertion `candidate((255379))\
    \ == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n    if (n <= 1) return false;\n    if (n <=\
    \ 3) return true;\n    if (n % 2 == 0 || n % 3 == 0) return false;\n    long i\
    \ = 5;\n    while (i <= n / i) {\n        if (n % i == 0 || n % (i + 2) == 0)\
    \ return false;\n        i += 6;\n    }\n    return true;\n}\nint main() {\n \
    \   auto candidate = is_prime;\n    assert(candidate((6)) == (false));\n    assert(candidate((101))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((13441))\
    \ == (true));\n    assert(candidate((61)) == (true));\n    assert(candidate((4))\
    \ == (false));\n    assert(candidate((1)) == (false));\n    assert(candidate((5))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((17))\
    \ == (true));\n    assert(candidate((85)) == (false));\n    assert(candidate((77))\
    \ == (false));\n    assert(candidate((255379)) == (false));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n    if (n == 1)\n        return false;\n  \
    \  if (n == 2)\n        return true;\n    if (n % 2 == 0)\n        return false;\n\
    \    for (int i = 3; i * i <= n; i += 2)\n        if (n % i == 0)\n          \
    \  return false;\n    return true;\n}\nint main() {\n    auto candidate = is_prime;\n\
    \    assert(candidate((6)) == (false));\n    assert(candidate((101)) == (true));\n\
    \    assert(candidate((11)) == (true));\n    assert(candidate((13441)) == (true));\n\
    \    assert(candidate((61)) == (true));\n    assert(candidate((4)) == (false));\n\
    \    assert(candidate((1)) == (false));\n    assert(candidate((5)) == (true));\n\
    \    assert(candidate((11)) == (true));\n    assert(candidate((17)) == (true));\n\
    \    assert(candidate((85)) == (false));\n    assert(candidate((77)) == (false));\n\
    \    assert(candidate((255379)) == (false));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n    if (n == 1) return false;\n    if (n ==\
    \ 2) return true;\n    if (n % 2 == 0) return false;\n    if (n % 3 == 0) return\
    \ false;\n    long i = 5;\n    while (i <= sqrt(n)) {\n        if (n % i == 0)\
    \ return false;\n        i += 6;\n    }\n    return true;\n}\nint main() {\n \
    \   auto candidate = is_prime;\n    assert(candidate((6)) == (false));\n    assert(candidate((101))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((13441))\
    \ == (true));\n    assert(candidate((61)) == (true));\n    assert(candidate((4))\
    \ == (false));\n    assert(candidate((1)) == (false));\n    assert(candidate((5))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((17))\
    \ == (true));\n    assert(candidate((85)) == (false));\n    assert(candidate((77))\
    \ == (false));\n    assert(candidate((255379)) == (false));\n}\n"
  stdout: ''
  stderr: "tmpsxbnt5z5: /tmp/tmpsxbnt5z5.cpp:43: int main(): Assertion `candidate((77))\
    \ == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n    if (n == 1)\n        return false;\n  \
    \  if (n == 2)\n        return true;\n    if (n % 2 == 0)\n        return false;\n\
    \    for (int i = 3; i * i <= n; i += 2)\n        if (n % i == 0)\n          \
    \  return false;\n    return true;\n}\nint main() {\n    auto candidate = is_prime;\n\
    \    assert(candidate((6)) == (false));\n    assert(candidate((101)) == (true));\n\
    \    assert(candidate((11)) == (true));\n    assert(candidate((13441)) == (true));\n\
    \    assert(candidate((61)) == (true));\n    assert(candidate((4)) == (false));\n\
    \    assert(candidate((1)) == (false));\n    assert(candidate((5)) == (true));\n\
    \    assert(candidate((11)) == (true));\n    assert(candidate((17)) == (true));\n\
    \    assert(candidate((85)) == (false));\n    assert(candidate((77)) == (false));\n\
    \    assert(candidate((255379)) == (false));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n    if (n <= 1) return false;\n    if (n ==\
    \ 2) return true;\n    if (n % 2 == 0) return false;\n    for (int i = 3; i <=\
    \ sqrt(n); i += 2)\n        if (n % i == 0)\n            return false;\n    return\
    \ true;\n}\nint main() {\n    auto candidate = is_prime;\n    assert(candidate((6))\
    \ == (false));\n    assert(candidate((101)) == (true));\n    assert(candidate((11))\
    \ == (true));\n    assert(candidate((13441)) == (true));\n    assert(candidate((61))\
    \ == (true));\n    assert(candidate((4)) == (false));\n    assert(candidate((1))\
    \ == (false));\n    assert(candidate((5)) == (true));\n    assert(candidate((11))\
    \ == (true));\n    assert(candidate((17)) == (true));\n    assert(candidate((85))\
    \ == (false));\n    assert(candidate((77)) == (false));\n    assert(candidate((255379))\
    \ == (false));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n  if (n == 1)\n    return false;\n  if (n ==\
    \ 2)\n    return true;\n  if (n % 2 == 0)\n    return false;\n  if (n % 3 == 0)\n\
    \    return false;\n  int i = 5;\n  while (i <= sqrt(n))\n    if (n % i == 0)\n\
    \      return false;\n    i += 6;\n  return true;\n}\nint main() {\n    auto candidate\
    \ = is_prime;\n    assert(candidate((6)) == (false));\n    assert(candidate((101))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((13441))\
    \ == (true));\n    assert(candidate((61)) == (true));\n    assert(candidate((4))\
    \ == (false));\n    assert(candidate((1)) == (false));\n    assert(candidate((5))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((17))\
    \ == (true));\n    assert(candidate((85)) == (false));\n    assert(candidate((77))\
    \ == (false));\n    assert(candidate((255379)) == (false));\n}\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n    // Write your code here.\n    long i=2;\n\
    \    while(i<n){\n        if(n%i==0){\n            return false;\n        }\n\
    \        i++;\n    }\n    return true;\n}\nint main() {\n    auto candidate =\
    \ is_prime;\n    assert(candidate((6)) == (false));\n    assert(candidate((101))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((13441))\
    \ == (true));\n    assert(candidate((61)) == (true));\n    assert(candidate((4))\
    \ == (false));\n    assert(candidate((1)) == (false));\n    assert(candidate((5))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((17))\
    \ == (true));\n    assert(candidate((85)) == (false));\n    assert(candidate((77))\
    \ == (false));\n    assert(candidate((255379)) == (false));\n}\n"
  stdout: ''
  stderr: "tmp2y7g896t: /tmp/tmp2y7g896t.cpp:37: int main(): Assertion `candidate((1))\
    \ == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n    if (n == 2) return true;\n    if (n % 2\
    \ == 0) return false;\n    for (int i = 3; i * i <= n; i += 2) {\n        if (n\
    \ % i == 0) return false;\n    }\n    return true;\n}\nint main() {\n    auto\
    \ candidate = is_prime;\n    assert(candidate((6)) == (false));\n    assert(candidate((101))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((13441))\
    \ == (true));\n    assert(candidate((61)) == (true));\n    assert(candidate((4))\
    \ == (false));\n    assert(candidate((1)) == (false));\n    assert(candidate((5))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((17))\
    \ == (true));\n    assert(candidate((85)) == (false));\n    assert(candidate((77))\
    \ == (false));\n    assert(candidate((255379)) == (false));\n}\n"
  stdout: ''
  stderr: "tmp33obaqo_: /tmp/tmp33obaqo_.cpp:34: int main(): Assertion `candidate((1))\
    \ == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n    if (n <= 1) return false;\n    if (n ==\
    \ 2) return true;\n    if (n % 2 == 0) return false;\n    if (n % 3 == 0) return\
    \ false;\n    if (n % 5 == 0) return false;\n    long i = 5;\n    while (i * i\
    \ <= n) {\n        if (n % i == 0) return false;\n        i += 6;\n    }\n   \
    \ return true;\n}\nint main() {\n    auto candidate = is_prime;\n    assert(candidate((6))\
    \ == (false));\n    assert(candidate((101)) == (true));\n    assert(candidate((11))\
    \ == (true));\n    assert(candidate((13441)) == (true));\n    assert(candidate((61))\
    \ == (true));\n    assert(candidate((4)) == (false));\n    assert(candidate((1))\
    \ == (false));\n    assert(candidate((5)) == (true));\n    assert(candidate((11))\
    \ == (true));\n    assert(candidate((17)) == (true));\n    assert(candidate((85))\
    \ == (false));\n    assert(candidate((77)) == (false));\n    assert(candidate((255379))\
    \ == (false));\n}\n"
  stdout: ''
  stderr: "tmp04v_j6py: /tmp/tmp04v_j6py.cpp:40: int main(): Assertion `candidate((5))\
    \ == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n    if (n < 2) return false;\n    if (n ==\
    \ 2) return true;\n    if (n % 2 == 0) return false;\n    long sq = sqrt(n);\n\
    \    for (long i = 3; i <= sq; i += 2) {\n        if (n % i == 0) return false;\n\
    \    }\n    return true;\n}\nint main() {\n    auto candidate = is_prime;\n  \
    \  assert(candidate((6)) == (false));\n    assert(candidate((101)) == (true));\n\
    \    assert(candidate((11)) == (true));\n    assert(candidate((13441)) == (true));\n\
    \    assert(candidate((61)) == (true));\n    assert(candidate((4)) == (false));\n\
    \    assert(candidate((1)) == (false));\n    assert(candidate((5)) == (true));\n\
    \    assert(candidate((11)) == (true));\n    assert(candidate((17)) == (true));\n\
    \    assert(candidate((85)) == (false));\n    assert(candidate((77)) == (false));\n\
    \    assert(candidate((255379)) == (false));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n    if (n <= 1) return false;\n    if (n ==\
    \ 2) return true;\n    if (n % 2 == 0) return false;\n    if (n % 3 == 0) return\
    \ false;\n    if (n % 5 == 0) return false;\n    int i = 5;\n    while (i <= sqrt(n))\
    \ {\n        if (n % i == 0) return false;\n        i += 6;\n    }\n    return\
    \ true;\n}\nint main() {\n    auto candidate = is_prime;\n    assert(candidate((6))\
    \ == (false));\n    assert(candidate((101)) == (true));\n    assert(candidate((11))\
    \ == (true));\n    assert(candidate((13441)) == (true));\n    assert(candidate((61))\
    \ == (true));\n    assert(candidate((4)) == (false));\n    assert(candidate((1))\
    \ == (false));\n    assert(candidate((5)) == (true));\n    assert(candidate((11))\
    \ == (true));\n    assert(candidate((17)) == (true));\n    assert(candidate((85))\
    \ == (false));\n    assert(candidate((77)) == (false));\n    assert(candidate((255379))\
    \ == (false));\n}\n"
  stdout: ''
  stderr: "tmpn68n5gqy: /tmp/tmpn68n5gqy.cpp:40: int main(): Assertion `candidate((5))\
    \ == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n    if (n == 1)\n        return false;\n  \
    \  if (n == 2)\n        return true;\n    if (n % 2 == 0)\n        return false;\n\
    \    for (int i = 3; i * i <= n; i += 2)\n        if (n % i == 0)\n          \
    \  return false;\n    return true;\n}\nint main() {\n    auto candidate = is_prime;\n\
    \    assert(candidate((6)) == (false));\n    assert(candidate((101)) == (true));\n\
    \    assert(candidate((11)) == (true));\n    assert(candidate((13441)) == (true));\n\
    \    assert(candidate((61)) == (true));\n    assert(candidate((4)) == (false));\n\
    \    assert(candidate((1)) == (false));\n    assert(candidate((5)) == (true));\n\
    \    assert(candidate((11)) == (true));\n    assert(candidate((17)) == (true));\n\
    \    assert(candidate((85)) == (false));\n    assert(candidate((77)) == (false));\n\
    \    assert(candidate((255379)) == (false));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n    if (n == 1)\n        return false;\n  \
    \  if (n == 2)\n        return true;\n    if (n % 2 == 0)\n        return false;\n\
    \    for (int i = 3; i * i <= n; i += 2)\n        if (n % i == 0)\n          \
    \  return false;\n    return true;\n}\nint main() {\n    auto candidate = is_prime;\n\
    \    assert(candidate((6)) == (false));\n    assert(candidate((101)) == (true));\n\
    \    assert(candidate((11)) == (true));\n    assert(candidate((13441)) == (true));\n\
    \    assert(candidate((61)) == (true));\n    assert(candidate((4)) == (false));\n\
    \    assert(candidate((1)) == (false));\n    assert(candidate((5)) == (true));\n\
    \    assert(candidate((11)) == (true));\n    assert(candidate((17)) == (true));\n\
    \    assert(candidate((85)) == (false));\n    assert(candidate((77)) == (false));\n\
    \    assert(candidate((255379)) == (false));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n    if (n == 1) return false;\n    if (n ==\
    \ 2) return true;\n    if (n % 2 == 0) return false;\n    if (n % 3 == 0) return\
    \ false;\n    if (n % 5 == 0) return false;\n    int i = 5;\n    while (i <= n\
    \ / i) {\n        if (n % i == 0) return false;\n        i += 6;\n    }\n    return\
    \ true;\n}\nint main() {\n    auto candidate = is_prime;\n    assert(candidate((6))\
    \ == (false));\n    assert(candidate((101)) == (true));\n    assert(candidate((11))\
    \ == (true));\n    assert(candidate((13441)) == (true));\n    assert(candidate((61))\
    \ == (true));\n    assert(candidate((4)) == (false));\n    assert(candidate((1))\
    \ == (false));\n    assert(candidate((5)) == (true));\n    assert(candidate((11))\
    \ == (true));\n    assert(candidate((17)) == (true));\n    assert(candidate((85))\
    \ == (false));\n    assert(candidate((77)) == (false));\n    assert(candidate((255379))\
    \ == (false));\n}\n"
  stdout: ''
  stderr: "tmpmjwvpmht: /tmp/tmpmjwvpmht.cpp:40: int main(): Assertion `candidate((5))\
    \ == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n    if (n == 1) return false;\n    if (n ==\
    \ 2) return true;\n    if (n % 2 == 0) return false;\n    if (n % 3 == 0) return\
    \ false;\n    if (n % 5 == 0) return false;\n    if (n % 7 == 0) return false;\n\
    \    int i = 5;\n    while (i <= sqrt(n)) {\n        if (n % i == 0) return false;\n\
    \        i += 6;\n    }\n    return true;\n}\nint main() {\n    auto candidate\
    \ = is_prime;\n    assert(candidate((6)) == (false));\n    assert(candidate((101))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((13441))\
    \ == (true));\n    assert(candidate((61)) == (true));\n    assert(candidate((4))\
    \ == (false));\n    assert(candidate((1)) == (false));\n    assert(candidate((5))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((17))\
    \ == (true));\n    assert(candidate((85)) == (false));\n    assert(candidate((77))\
    \ == (false));\n    assert(candidate((255379)) == (false));\n}\n"
  stdout: ''
  stderr: "tmpwi9qobso: /tmp/tmpwi9qobso.cpp:41: int main(): Assertion `candidate((5))\
    \ == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n    if (n <= 1) return false;\n    long sqr\
    \ = sqrt(n);\n    for (long i = 3; i <= sqr; i += 2) {\n        if (n % i == 0)\
    \ return false;\n    }\n    return true;\n}\nint main() {\n    auto candidate\
    \ = is_prime;\n    assert(candidate((6)) == (false));\n    assert(candidate((101))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((13441))\
    \ == (true));\n    assert(candidate((61)) == (true));\n    assert(candidate((4))\
    \ == (false));\n    assert(candidate((1)) == (false));\n    assert(candidate((5))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((17))\
    \ == (true));\n    assert(candidate((85)) == (false));\n    assert(candidate((77))\
    \ == (false));\n    assert(candidate((255379)) == (false));\n}\n"
  stdout: ''
  stderr: "tmphyipf5hd: /tmp/tmphyipf5hd.cpp:28: int main(): Assertion `candidate((6))\
    \ == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n    if (n == 1) return false;\n    if (n ==\
    \ 2) return true;\n    if (n % 2 == 0) return false;\n    if (n % 3 == 0) return\
    \ false;\n    long i = 5;\n    while (i < n) {\n        if (n % i == 0) return\
    \ false;\n        i += 6;\n    }\n    return true;\n}\nint main() {\n    auto\
    \ candidate = is_prime;\n    assert(candidate((6)) == (false));\n    assert(candidate((101))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((13441))\
    \ == (true));\n    assert(candidate((61)) == (true));\n    assert(candidate((4))\
    \ == (false));\n    assert(candidate((1)) == (false));\n    assert(candidate((5))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((17))\
    \ == (true));\n    assert(candidate((85)) == (false));\n    assert(candidate((77))\
    \ == (false));\n    assert(candidate((255379)) == (false));\n}\n"
  stdout: ''
  stderr: "tmp4ogrp_ai: /tmp/tmp4ogrp_ai.cpp:44: int main(): Assertion `candidate((255379))\
    \ == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n    // Write your code here.\n    long i=2;\n\
    \    while(i<n){\n        if(n%i==0)\n            return false;\n        i++;\n\
    \    }\n    return true;\n}\nint main() {\n    auto candidate = is_prime;\n  \
    \  assert(candidate((6)) == (false));\n    assert(candidate((101)) == (true));\n\
    \    assert(candidate((11)) == (true));\n    assert(candidate((13441)) == (true));\n\
    \    assert(candidate((61)) == (true));\n    assert(candidate((4)) == (false));\n\
    \    assert(candidate((1)) == (false));\n    assert(candidate((5)) == (true));\n\
    \    assert(candidate((11)) == (true));\n    assert(candidate((17)) == (true));\n\
    \    assert(candidate((85)) == (false));\n    assert(candidate((77)) == (false));\n\
    \    assert(candidate((255379)) == (false));\n}\n"
  stdout: ''
  stderr: "tmppmqqqonp: /tmp/tmppmqqqonp.cpp:36: int main(): Assertion `candidate((1))\
    \ == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n    if (n == 1)\n        return false;\n  \
    \  if (n == 2)\n        return true;\n    if (n % 2 == 0)\n        return false;\n\
    \    if (n % 3 == 0)\n        return false;\n    long i = 5;\n    while (i <=\
    \ sqrt(n)) {\n        if (n % i == 0)\n            return false;\n        i +=\
    \ 6;\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_prime;\n\
    \    assert(candidate((6)) == (false));\n    assert(candidate((101)) == (true));\n\
    \    assert(candidate((11)) == (true));\n    assert(candidate((13441)) == (true));\n\
    \    assert(candidate((61)) == (true));\n    assert(candidate((4)) == (false));\n\
    \    assert(candidate((1)) == (false));\n    assert(candidate((5)) == (true));\n\
    \    assert(candidate((11)) == (true));\n    assert(candidate((17)) == (true));\n\
    \    assert(candidate((85)) == (false));\n    assert(candidate((77)) == (false));\n\
    \    assert(candidate((255379)) == (false));\n}\n"
  stdout: ''
  stderr: "tmp5vv5rhfq: /tmp/tmp5vv5rhfq.cpp:48: int main(): Assertion `candidate((77))\
    \ == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n    if (n <= 1) return false;\n    if (n ==\
    \ 2) return true;\n    if (n % 2 == 0) return false;\n    if (n % 3 == 0) return\
    \ false;\n    long i = 5;\n    while (i <= sqrt(n)) {\n        if (n % i == 0)\
    \ return false;\n        i += 6;\n    }\n    return true;\n}\nint main() {\n \
    \   auto candidate = is_prime;\n    assert(candidate((6)) == (false));\n    assert(candidate((101))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((13441))\
    \ == (true));\n    assert(candidate((61)) == (true));\n    assert(candidate((4))\
    \ == (false));\n    assert(candidate((1)) == (false));\n    assert(candidate((5))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((17))\
    \ == (true));\n    assert(candidate((85)) == (false));\n    assert(candidate((77))\
    \ == (false));\n    assert(candidate((255379)) == (false));\n}\n"
  stdout: ''
  stderr: "tmpjfimkpbi: /tmp/tmpjfimkpbi.cpp:43: int main(): Assertion `candidate((77))\
    \ == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n    if (n == 1)\n        return false;\n  \
    \  if (n == 2)\n        return true;\n    if (n % 2 == 0)\n        return false;\n\
    \    for (int i = 3; i * i <= n; i += 2)\n        if (n % i == 0)\n          \
    \  return false;\n    return true;\n}\nint main() {\n    auto candidate = is_prime;\n\
    \    assert(candidate((6)) == (false));\n    assert(candidate((101)) == (true));\n\
    \    assert(candidate((11)) == (true));\n    assert(candidate((13441)) == (true));\n\
    \    assert(candidate((61)) == (true));\n    assert(candidate((4)) == (false));\n\
    \    assert(candidate((1)) == (false));\n    assert(candidate((5)) == (true));\n\
    \    assert(candidate((11)) == (true));\n    assert(candidate((17)) == (true));\n\
    \    assert(candidate((85)) == (false));\n    assert(candidate((77)) == (false));\n\
    \    assert(candidate((255379)) == (false));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n    if (n <= 1)\n        return false;\n  \
    \  long sqr = sqrt(n);\n    for (long i = 3; i <= sqr; i += 2)\n        if (n\
    \ % i == 0)\n            return false;\n    return true;\n}\nint main() {\n  \
    \  auto candidate = is_prime;\n    assert(candidate((6)) == (false));\n    assert(candidate((101))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((13441))\
    \ == (true));\n    assert(candidate((61)) == (true));\n    assert(candidate((4))\
    \ == (false));\n    assert(candidate((1)) == (false));\n    assert(candidate((5))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((17))\
    \ == (true));\n    assert(candidate((85)) == (false));\n    assert(candidate((77))\
    \ == (false));\n    assert(candidate((255379)) == (false));\n}\n"
  stdout: ''
  stderr: "tmp47y4zuvf: /tmp/tmp47y4zuvf.cpp:29: int main(): Assertion `candidate((6))\
    \ == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n    if (n == 1)\n        return false;\n  \
    \  if (n == 2)\n        return true;\n    if (n % 2 == 0)\n        return false;\n\
    \    for (int i = 3; i <= sqrt(n); i += 2)\n        if (n % i == 0)\n        \
    \    return false;\n    return true;\n}\nint main() {\n    auto candidate = is_prime;\n\
    \    assert(candidate((6)) == (false));\n    assert(candidate((101)) == (true));\n\
    \    assert(candidate((11)) == (true));\n    assert(candidate((13441)) == (true));\n\
    \    assert(candidate((61)) == (true));\n    assert(candidate((4)) == (false));\n\
    \    assert(candidate((1)) == (false));\n    assert(candidate((5)) == (true));\n\
    \    assert(candidate((11)) == (true));\n    assert(candidate((17)) == (true));\n\
    \    assert(candidate((85)) == (false));\n    assert(candidate((77)) == (false));\n\
    \    assert(candidate((255379)) == (false));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n    if (n == 1)\n        return false;\n  \
    \  if (n == 2)\n        return true;\n    if (n % 2 == 0)\n        return false;\n\
    \    for (int i = 3; i <= sqrt(n); i += 2)\n        if (n % i == 0)\n        \
    \    return false;\n    return true;\n}\nint main() {\n    auto candidate = is_prime;\n\
    \    assert(candidate((6)) == (false));\n    assert(candidate((101)) == (true));\n\
    \    assert(candidate((11)) == (true));\n    assert(candidate((13441)) == (true));\n\
    \    assert(candidate((61)) == (true));\n    assert(candidate((4)) == (false));\n\
    \    assert(candidate((1)) == (false));\n    assert(candidate((5)) == (true));\n\
    \    assert(candidate((11)) == (true));\n    assert(candidate((17)) == (true));\n\
    \    assert(candidate((85)) == (false));\n    assert(candidate((77)) == (false));\n\
    \    assert(candidate((255379)) == (false));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n    if (n == 1)\n        return false;\n  \
    \  if (n == 2)\n        return true;\n    if (n % 2 == 0)\n        return false;\n\
    \    for (int i = 3; i <= sqrt(n); i += 2)\n        if (n % i == 0)\n        \
    \    return false;\n    return true;\n}\nint main() {\n    auto candidate = is_prime;\n\
    \    assert(candidate((6)) == (false));\n    assert(candidate((101)) == (true));\n\
    \    assert(candidate((11)) == (true));\n    assert(candidate((13441)) == (true));\n\
    \    assert(candidate((61)) == (true));\n    assert(candidate((4)) == (false));\n\
    \    assert(candidate((1)) == (false));\n    assert(candidate((5)) == (true));\n\
    \    assert(candidate((11)) == (true));\n    assert(candidate((17)) == (true));\n\
    \    assert(candidate((85)) == (false));\n    assert(candidate((77)) == (false));\n\
    \    assert(candidate((255379)) == (false));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n    if (n == 1)\n        return false;\n  \
    \  if (n == 2)\n        return true;\n    if (n % 2 == 0)\n        return false;\n\
    \    for (int i = 3; i <= sqrt(n); i += 2)\n        if (n % i == 0)\n        \
    \    return false;\n    return true;\n}\nint main() {\n    auto candidate = is_prime;\n\
    \    assert(candidate((6)) == (false));\n    assert(candidate((101)) == (true));\n\
    \    assert(candidate((11)) == (true));\n    assert(candidate((13441)) == (true));\n\
    \    assert(candidate((61)) == (true));\n    assert(candidate((4)) == (false));\n\
    \    assert(candidate((1)) == (false));\n    assert(candidate((5)) == (true));\n\
    \    assert(candidate((11)) == (true));\n    assert(candidate((17)) == (true));\n\
    \    assert(candidate((85)) == (false));\n    assert(candidate((77)) == (false));\n\
    \    assert(candidate((255379)) == (false));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n    if (n == 1) return false;\n    if (n ==\
    \ 2) return true;\n    if (n % 2 == 0) return false;\n    if (n % 3 == 0) return\
    \ false;\n    int i = 5;\n    while (i <= sqrt(n)) {\n        if (n % i == 0)\
    \ return false;\n        i += 6;\n    }\n    return true;\n}\nint main() {\n \
    \   auto candidate = is_prime;\n    assert(candidate((6)) == (false));\n    assert(candidate((101))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((13441))\
    \ == (true));\n    assert(candidate((61)) == (true));\n    assert(candidate((4))\
    \ == (false));\n    assert(candidate((1)) == (false));\n    assert(candidate((5))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((17))\
    \ == (true));\n    assert(candidate((85)) == (false));\n    assert(candidate((77))\
    \ == (false));\n    assert(candidate((255379)) == (false));\n}\n"
  stdout: ''
  stderr: "tmpch9akcv7: /tmp/tmpch9akcv7.cpp:43: int main(): Assertion `candidate((77))\
    \ == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n    if (n == 1) return false;\n    if (n ==\
    \ 2) return true;\n    if (n % 2 == 0) return false;\n    if (n % 3 == 0) return\
    \ false;\n    int i = 5;\n    while (i <= sqrt(n)) {\n        if (n % i == 0)\
    \ return false;\n        i += 6;\n    }\n    return true;\n}\nint main() {\n \
    \   auto candidate = is_prime;\n    assert(candidate((6)) == (false));\n    assert(candidate((101))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((13441))\
    \ == (true));\n    assert(candidate((61)) == (true));\n    assert(candidate((4))\
    \ == (false));\n    assert(candidate((1)) == (false));\n    assert(candidate((5))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((17))\
    \ == (true));\n    assert(candidate((85)) == (false));\n    assert(candidate((77))\
    \ == (false));\n    assert(candidate((255379)) == (false));\n}\n"
  stdout: ''
  stderr: "tmpvwlwm4zr: /tmp/tmpvwlwm4zr.cpp:43: int main(): Assertion `candidate((77))\
    \ == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n    if (n < 2) return false;\n    if (n ==\
    \ 2) return true;\n    if (n % 2 == 0) return false;\n    for (int i = 3; i *\
    \ i <= n; i += 2) {\n        if (n % i == 0) return false;\n    }\n    return\
    \ true;\n}\nint main() {\n    auto candidate = is_prime;\n    assert(candidate((6))\
    \ == (false));\n    assert(candidate((101)) == (true));\n    assert(candidate((11))\
    \ == (true));\n    assert(candidate((13441)) == (true));\n    assert(candidate((61))\
    \ == (true));\n    assert(candidate((4)) == (false));\n    assert(candidate((1))\
    \ == (false));\n    assert(candidate((5)) == (true));\n    assert(candidate((11))\
    \ == (true));\n    assert(candidate((17)) == (true));\n    assert(candidate((85))\
    \ == (false));\n    assert(candidate((77)) == (false));\n    assert(candidate((255379))\
    \ == (false));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n    if (n <= 1) return false;\n    if (n ==\
    \ 2) return true;\n    if (n % 2 == 0) return false;\n    if (n % 3 == 0) return\
    \ false;\n    if (n % 5 == 0) return false;\n    long m = sqrt(n);\n    for (long\
    \ i = 5; i <= m; i += 6) {\n        if (n % i == 0 || n % (i + 2) == 0) return\
    \ false;\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_prime;\n\
    \    assert(candidate((6)) == (false));\n    assert(candidate((101)) == (true));\n\
    \    assert(candidate((11)) == (true));\n    assert(candidate((13441)) == (true));\n\
    \    assert(candidate((61)) == (true));\n    assert(candidate((4)) == (false));\n\
    \    assert(candidate((1)) == (false));\n    assert(candidate((5)) == (true));\n\
    \    assert(candidate((11)) == (true));\n    assert(candidate((17)) == (true));\n\
    \    assert(candidate((85)) == (false));\n    assert(candidate((77)) == (false));\n\
    \    assert(candidate((255379)) == (false));\n}\n"
  stdout: ''
  stderr: "tmp7nkj9ks5: /tmp/tmp7nkj9ks5.cpp:39: int main(): Assertion `candidate((5))\
    \ == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n    if (n == 1)\n        return false;\n  \
    \  if (n == 2)\n        return true;\n    if (n % 2 == 0)\n        return false;\n\
    \    if (n % 3 == 0)\n        return false;\n    if (n % 5 == 0)\n        return\
    \ false;\n    int i = 5;\n    while (i <= sqrt(n))\n        if (n % i == 0)\n\
    \            return false;\n        i += 6;\n    return true;\n}\nint main() {\n\
    \    auto candidate = is_prime;\n    assert(candidate((6)) == (false));\n    assert(candidate((101))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((13441))\
    \ == (true));\n    assert(candidate((61)) == (true));\n    assert(candidate((4))\
    \ == (false));\n    assert(candidate((1)) == (false));\n    assert(candidate((5))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((17))\
    \ == (true));\n    assert(candidate((85)) == (false));\n    assert(candidate((77))\
    \ == (false));\n    assert(candidate((255379)) == (false));\n}\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n    if (n <= 1) return false;\n    long sq\
    \ = sqrt(n);\n    for (long i = 3; i <= sq; i += 2) {\n        if (n % i == 0)\
    \ return false;\n    }\n    return true;\n}\nint main() {\n    auto candidate\
    \ = is_prime;\n    assert(candidate((6)) == (false));\n    assert(candidate((101))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((13441))\
    \ == (true));\n    assert(candidate((61)) == (true));\n    assert(candidate((4))\
    \ == (false));\n    assert(candidate((1)) == (false));\n    assert(candidate((5))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((17))\
    \ == (true));\n    assert(candidate((85)) == (false));\n    assert(candidate((77))\
    \ == (false));\n    assert(candidate((255379)) == (false));\n}\n"
  stdout: ''
  stderr: "tmp1lzsxs89: /tmp/tmp1lzsxs89.cpp:28: int main(): Assertion `candidate((6))\
    \ == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n    if (n == 1)\n        return false;\n  \
    \  if (n == 2)\n        return true;\n    if (n % 2 == 0)\n        return false;\n\
    \    if (n % 3 == 0)\n        return false;\n    if (n % 5 == 0)\n        return\
    \ false;\n    int i = 5;\n    while (i <= sqrt(n)) {\n        if (n % i == 0)\n\
    \            return false;\n        i += 6;\n    }\n    return true;\n}\nint main()\
    \ {\n    auto candidate = is_prime;\n    assert(candidate((6)) == (false));\n\
    \    assert(candidate((101)) == (true));\n    assert(candidate((11)) == (true));\n\
    \    assert(candidate((13441)) == (true));\n    assert(candidate((61)) == (true));\n\
    \    assert(candidate((4)) == (false));\n    assert(candidate((1)) == (false));\n\
    \    assert(candidate((5)) == (true));\n    assert(candidate((11)) == (true));\n\
    \    assert(candidate((17)) == (true));\n    assert(candidate((85)) == (false));\n\
    \    assert(candidate((77)) == (false));\n    assert(candidate((255379)) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmp3_2s3xa7: /tmp/tmp3_2s3xa7.cpp:46: int main(): Assertion `candidate((5))\
    \ == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n    if (n <= 1) return false;\n    if (n ==\
    \ 2) return true;\n    if (n % 2 == 0) return false;\n    long m = sqrt(n);\n\
    \    for (long i = 3; i <= m; i += 2) {\n        if (n % i == 0) return false;\n\
    \    }\n    return true;\n}\nint main() {\n    auto candidate = is_prime;\n  \
    \  assert(candidate((6)) == (false));\n    assert(candidate((101)) == (true));\n\
    \    assert(candidate((11)) == (true));\n    assert(candidate((13441)) == (true));\n\
    \    assert(candidate((61)) == (true));\n    assert(candidate((4)) == (false));\n\
    \    assert(candidate((1)) == (false));\n    assert(candidate((5)) == (true));\n\
    \    assert(candidate((11)) == (true));\n    assert(candidate((17)) == (true));\n\
    \    assert(candidate((85)) == (false));\n    assert(candidate((77)) == (false));\n\
    \    assert(candidate((255379)) == (false));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n    if (n == 1) return false;\n    if (n ==\
    \ 2) return true;\n    if (n % 2 == 0) return false;\n    if (n % 3 == 0) return\
    \ false;\n    if (n % 5 == 0) return false;\n    long limit = (long) sqrt(n);\n\
    \    for (long i = 3; i <= limit; i += 2) {\n        if (n % i == 0) return false;\n\
    \    }\n    return true;\n}\nint main() {\n    auto candidate = is_prime;\n  \
    \  assert(candidate((6)) == (false));\n    assert(candidate((101)) == (true));\n\
    \    assert(candidate((11)) == (true));\n    assert(candidate((13441)) == (true));\n\
    \    assert(candidate((61)) == (true));\n    assert(candidate((4)) == (false));\n\
    \    assert(candidate((1)) == (false));\n    assert(candidate((5)) == (true));\n\
    \    assert(candidate((11)) == (true));\n    assert(candidate((17)) == (true));\n\
    \    assert(candidate((85)) == (false));\n    assert(candidate((77)) == (false));\n\
    \    assert(candidate((255379)) == (false));\n}\n"
  stdout: ''
  stderr: "tmp1oav5j7m: /tmp/tmp1oav5j7m.cpp:39: int main(): Assertion `candidate((5))\
    \ == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n  if (n < 2) return false;\n  if (n == 2) return\
    \ true;\n  if (n % 2 == 0) return false;\n  if (n % 3 == 0) return false;\n  if\
    \ (n % 5 == 0) return false;\n  if (n % 7 == 0) return false;\n  if (n % 11 ==\
    \ 0) return false;\n  if (n % 13 == 0) return false;\n  if (n % 17 == 0) return\
    \ false;\n  if (n % 19 == 0) return false;\n  if (n % 23 == 0) return false;\n\
    \  if (n % 29 == 0) return false;\n  if (n % 31 == 0) return false;\n  if (n %\
    \ 37 == 0) return false;\n  if (n % 41) == 0) return false;\n  if (n % 43) ==\
    \ 0) return false;\n  if (n % 47) == 0) return false;\n  if (n % 53) == 0) return\
    \ false;\n  if (n % 59) == 0) return false;\n  if (n % 61) == 0) return false;\n\
    \  if (n % 67) == 0) return false;\n  if (n % 71) == 0) return false;\n  if (n\
    \ % 73) == 0) return false;\n  if (n % 79) == 0) return false;\n  if (n % 83)\
    \ == 0) return false;\n  if (n % 89) == 0) return false;\n  if (n % 97) == 0)\
    \ return false;\n  if (n % 103) == 0) return false;\n  if (n % 111 == 0) return\
    \ false;\n  if (n % 121 == 0) return false;\n  if (n % 131 == 0) return false;\n\
    \  if (n % 141 == 0) return false;\n  if (n % 151 == 0) return false;\n  if (n\
    \ % 161 == 0) return false;\n  if (n % 171 == 0) return false;\n  if (n % 181\
    \ == 0) return false;\n  if (n % 191 == 0) return false;\n  if (n % 201 == 0)\
    \ return false;\n  if (n % 211 == 0) return false;\n  if (n % 221 == 0) return\
    \ false;\n  if (n % 231 == 0) return false;\n  if (n % 241 == 0) return false;\n\
    \  if (n % 251 == 0) return false;\n  if (n % 261 == 0) return false;\n  if (n\
    \ % 271 == 0) return false;\n  if (n % 281 == 0) return false;\n  if (n % 291\
    \ == 0) return false;\n  if (n % 301 == 0) return false;\n  if (n % 311 == 0)\
    \ return false;\n  if (n % 321 == 0) return false;\n  if (n % 331 == 0) return\
    \ false;\n  if (n % 341 == 0) return false;\n  if (n % 351 == 0) return false;\n\
    \  if (n % 361 == 0) return false;\n  if (n % 371 == 0) return false;\n  if (n\
    \ % 381 == 0) return false;\n  if (n % 391 == 0) return false;\n  if (n % 401\
    \ == 0) return false;\n  if (n % 411 == 0) return false;\n  if (n % 421 == 0)\
    \ return false;\n  if (n % 431 == 0) return false;\n  if (n % 441 == 0) return\
    \ false;\n  if (n % 451 == 0) return false;\n  if (n % 461 == 0) return false;\n\
    \  if (n % 471 == \n}\nint main() {\n    auto candidate = is_prime;\n    assert(candidate((6))\
    \ == (false));\n    assert(candidate((101)) == (true));\n    assert(candidate((11))\
    \ == (true));\n    assert(candidate((13441)) == (true));\n    assert(candidate((61))\
    \ == (true));\n    assert(candidate((4)) == (false));\n    assert(candidate((1))\
    \ == (false));\n    assert(candidate((5)) == (true));\n    assert(candidate((11))\
    \ == (true));\n    assert(candidate((17)) == (true));\n    assert(candidate((85))\
    \ == (false));\n    assert(candidate((77)) == (false));\n    assert(candidate((255379))\
    \ == (false));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpi51qaiss.cpp: In function \u2018bool is_prime(long int)\u2019:\n\
    /tmp/tmpi51qaiss.cpp:33:15: error: expected primary-expression before \u2018==\u2019\
    \ token\n   33 |   if (n % 41) == 0) return false;\n      |               ^~\n\
    /tmp/tmpi51qaiss.cpp:34:15: error: expected primary-expression before \u2018==\u2019\
    \ token\n   34 |   if (n % 43) == 0) return false;\n      |               ^~\n\
    /tmp/tmpi51qaiss.cpp:35:15: error: expected primary-expression before \u2018==\u2019\
    \ token\n   35 |   if (n % 47) == 0) return false;\n      |               ^~\n\
    /tmp/tmpi51qaiss.cpp:36:15: error: expected primary-expression before \u2018==\u2019\
    \ token\n   36 |   if (n % 53) == 0) return false;\n      |               ^~\n\
    /tmp/tmpi51qaiss.cpp:37:15: error: expected primary-expression before \u2018==\u2019\
    \ token\n   37 |   if (n % 59) == 0) return false;\n      |               ^~\n\
    /tmp/tmpi51qaiss.cpp:38:15: error: expected primary-expression before \u2018==\u2019\
    \ token\n   38 |   if (n % 61) == 0) return false;\n      |               ^~\n\
    /tmp/tmpi51qaiss.cpp:39:15: error: expected primary-expression before \u2018==\u2019\
    \ token\n   39 |   if (n % 67) == 0) return false;\n      |               ^~\n\
    /tmp/tmpi51qaiss.cpp:40:15: error: expected primary-expression before \u2018==\u2019\
    \ token\n   40 |   if (n % 71) == 0) return false;\n      |               ^~\n\
    /tmp/tmpi51qaiss.cpp:41:15: error: expected primary-expression before \u2018==\u2019\
    \ token\n   41 |   if (n % 73) == 0) return false;\n      |               ^~\n\
    /tmp/tmpi51qaiss.cpp:42:15: error: expected primary-expression before \u2018==\u2019\
    \ token\n   42 |   if (n % 79) == 0) return false;\n      |               ^~\n\
    /tmp/tmpi51qaiss.cpp:43:15: error: expected primary-expression before \u2018==\u2019\
    \ token\n   43 |   if (n % 83) == 0) return false;\n      |               ^~\n\
    /tmp/tmpi51qaiss.cpp:44:15: error: expected primary-expression before \u2018==\u2019\
    \ token\n   44 |   if (n % 89) == 0) return false;\n      |               ^~\n\
    /tmp/tmpi51qaiss.cpp:45:15: error: expected primary-expression before \u2018==\u2019\
    \ token\n   45 |   if (n % 97) == 0) return false;\n      |               ^~\n\
    /tmp/tmpi51qaiss.cpp:46:16: error: expected primary-expression before \u2018==\u2019\
    \ token\n   46 |   if (n % 103) == 0) return false;\n      |                ^~\n\
    /tmp/tmpi51qaiss.cpp:84:1: error: expected primary-expression before \u2018}\u2019\
    \ token\n   84 | }\n      | ^\n/tmp/tmpi51qaiss.cpp:83:17: error: expected \u2018\
    )\u2019 before \u2018}\u2019 token\n   83 |   if (n % 471 ==\n      |      ~ \
    \         ^\n      |                 )\n   84 | }\n      | ~                \n\
    /tmp/tmpi51qaiss.cpp:84:1: error: expected primary-expression before \u2018}\u2019\
    \ token\n   84 | }\n      | ^\n/tmp/tmpi51qaiss.cpp:84:1: warning: control reaches\
    \ end of non-void function [-Wreturn-type]\n   84 | }\n      | ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n    if (n == 1)\n        return false;\n  \
    \  if (n == 2)\n        return true;\n    if (n % 2 == 0)\n        return false;\n\
    \    for (int i = 3; i * i <= n; i += 2)\n        if (n % i == 0)\n          \
    \  return false;\n    return true;\n}\nint main() {\n    auto candidate = is_prime;\n\
    \    assert(candidate((6)) == (false));\n    assert(candidate((101)) == (true));\n\
    \    assert(candidate((11)) == (true));\n    assert(candidate((13441)) == (true));\n\
    \    assert(candidate((61)) == (true));\n    assert(candidate((4)) == (false));\n\
    \    assert(candidate((1)) == (false));\n    assert(candidate((5)) == (true));\n\
    \    assert(candidate((11)) == (true));\n    assert(candidate((17)) == (true));\n\
    \    assert(candidate((85)) == (false));\n    assert(candidate((77)) == (false));\n\
    \    assert(candidate((255379)) == (false));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n    if (n == 1)\n        return false;\n  \
    \  if (n == 2)\n        return true;\n    if (n % 2 == 0)\n        return false;\n\
    \    if (n % 3 == 0)\n        return false;\n    long i = 5;\n    while (i <=\
    \ sqrt(n))\n        if (n % i == 0)\n            return false;\n        i += 6;\n\
    \    return true;\n}\nint main() {\n    auto candidate = is_prime;\n    assert(candidate((6))\
    \ == (false));\n    assert(candidate((101)) == (true));\n    assert(candidate((11))\
    \ == (true));\n    assert(candidate((13441)) == (true));\n    assert(candidate((61))\
    \ == (true));\n    assert(candidate((4)) == (false));\n    assert(candidate((1))\
    \ == (false));\n    assert(candidate((5)) == (true));\n    assert(candidate((11))\
    \ == (true));\n    assert(candidate((17)) == (true));\n    assert(candidate((85))\
    \ == (false));\n    assert(candidate((77)) == (false));\n    assert(candidate((255379))\
    \ == (false));\n}\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n    if (n == 1)\n        return false;\n  \
    \  if (n == 2)\n        return true;\n    if (n % 2 == 0)\n        return false;\n\
    \    for (int i = 3; i * i <= n; i += 2)\n        if (n % i == 0)\n          \
    \  return false;\n    return true;\n}\nint main() {\n    auto candidate = is_prime;\n\
    \    assert(candidate((6)) == (false));\n    assert(candidate((101)) == (true));\n\
    \    assert(candidate((11)) == (true));\n    assert(candidate((13441)) == (true));\n\
    \    assert(candidate((61)) == (true));\n    assert(candidate((4)) == (false));\n\
    \    assert(candidate((1)) == (false));\n    assert(candidate((5)) == (true));\n\
    \    assert(candidate((11)) == (true));\n    assert(candidate((17)) == (true));\n\
    \    assert(candidate((85)) == (false));\n    assert(candidate((77)) == (false));\n\
    \    assert(candidate((255379)) == (false));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n    if (n == 1)\n        return false;\n  \
    \  if (n == 2)\n        return true;\n    if (n % 2 == 0)\n        return false;\n\
    \    if (n % 3 == 0)\n        return false;\n    long i = 5;\n    while (i <=\
    \ n / 3) {\n        if (n % i == 0)\n            return false;\n        i += 6;\n\
    \    }\n    return true;\n}\nint main() {\n    auto candidate = is_prime;\n  \
    \  assert(candidate((6)) == (false));\n    assert(candidate((101)) == (true));\n\
    \    assert(candidate((11)) == (true));\n    assert(candidate((13441)) == (true));\n\
    \    assert(candidate((61)) == (true));\n    assert(candidate((4)) == (false));\n\
    \    assert(candidate((1)) == (false));\n    assert(candidate((5)) == (true));\n\
    \    assert(candidate((11)) == (true));\n    assert(candidate((17)) == (true));\n\
    \    assert(candidate((85)) == (false));\n    assert(candidate((77)) == (false));\n\
    \    assert(candidate((255379)) == (false));\n}\n"
  stdout: ''
  stderr: "tmpsro6nzjh: /tmp/tmpsro6nzjh.cpp:49: int main(): Assertion `candidate((255379))\
    \ == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n    if (n <= 1) return false;\n    if (n <=\
    \ 3) return true;\n    if (n % 2 == 0 || n % 3 == 0) return false;\n    long i\
    \ = 5;\n    while (i <= n / i) {\n        if (n % i == 0 || n % (i + 2) == 0)\
    \ return false;\n        i += 6;\n    }\n    return true;\n}\nint main() {\n \
    \   auto candidate = is_prime;\n    assert(candidate((6)) == (false));\n    assert(candidate((101))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((13441))\
    \ == (true));\n    assert(candidate((61)) == (true));\n    assert(candidate((4))\
    \ == (false));\n    assert(candidate((1)) == (false));\n    assert(candidate((5))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((17))\
    \ == (true));\n    assert(candidate((85)) == (false));\n    assert(candidate((77))\
    \ == (false));\n    assert(candidate((255379)) == (false));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n    if (n <= 1) return false;\n    if (n ==\
    \ 2) return true;\n    if (n % 2 == 0) return false;\n    for (int i = 3; i *\
    \ i <= n; i += 2) {\n        if (n % i == 0) return false;\n    }\n    return\
    \ true;\n}\nint main() {\n    auto candidate = is_prime;\n    assert(candidate((6))\
    \ == (false));\n    assert(candidate((101)) == (true));\n    assert(candidate((11))\
    \ == (true));\n    assert(candidate((13441)) == (true));\n    assert(candidate((61))\
    \ == (true));\n    assert(candidate((4)) == (false));\n    assert(candidate((1))\
    \ == (false));\n    assert(candidate((5)) == (true));\n    assert(candidate((11))\
    \ == (true));\n    assert(candidate((17)) == (true));\n    assert(candidate((85))\
    \ == (false));\n    assert(candidate((77)) == (false));\n    assert(candidate((255379))\
    \ == (false));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n    if (n <= 1) return false;\n    if (n ==\
    \ 2) return true;\n    if (n % 2 == 0) return false;\n    for (int i = 3; i *\
    \ i <= n; i += 2) {\n        if (n % i == 0) return false;\n    }\n    return\
    \ true;\n}\nint main() {\n    auto candidate = is_prime;\n    assert(candidate((6))\
    \ == (false));\n    assert(candidate((101)) == (true));\n    assert(candidate((11))\
    \ == (true));\n    assert(candidate((13441)) == (true));\n    assert(candidate((61))\
    \ == (true));\n    assert(candidate((4)) == (false));\n    assert(candidate((1))\
    \ == (false));\n    assert(candidate((5)) == (true));\n    assert(candidate((11))\
    \ == (true));\n    assert(candidate((17)) == (true));\n    assert(candidate((85))\
    \ == (false));\n    assert(candidate((77)) == (false));\n    assert(candidate((255379))\
    \ == (false));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n    if (n <= 1) return false;\n    if (n ==\
    \ 2) return true;\n    if (n % 2 == 0) return false;\n    for (int i = 3; i *\
    \ i <= n; i += 2)\n        if (n % i == 0)\n            return false;\n    return\
    \ true;\n}\nint main() {\n    auto candidate = is_prime;\n    assert(candidate((6))\
    \ == (false));\n    assert(candidate((101)) == (true));\n    assert(candidate((11))\
    \ == (true));\n    assert(candidate((13441)) == (true));\n    assert(candidate((61))\
    \ == (true));\n    assert(candidate((4)) == (false));\n    assert(candidate((1))\
    \ == (false));\n    assert(candidate((5)) == (true));\n    assert(candidate((11))\
    \ == (true));\n    assert(candidate((17)) == (true));\n    assert(candidate((85))\
    \ == (false));\n    assert(candidate((77)) == (false));\n    assert(candidate((255379))\
    \ == (false));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n    // Write your code here.\n    long i =\
    \ 2;\n    long count = 0;\n    while (i * i <= n) {\n        if (n % i == 0) {\n\
    \            count++;\n        }\n        i++;\n    }\n    if (count == 0) {\n\
    \        return true;\n    }\n    return false;\n}\nint main() {\n    auto candidate\
    \ = is_prime;\n    assert(candidate((6)) == (false));\n    assert(candidate((101))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((13441))\
    \ == (true));\n    assert(candidate((61)) == (true));\n    assert(candidate((4))\
    \ == (false));\n    assert(candidate((1)) == (false));\n    assert(candidate((5))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((17))\
    \ == (true));\n    assert(candidate((85)) == (false));\n    assert(candidate((77))\
    \ == (false));\n    assert(candidate((255379)) == (false));\n}\n"
  stdout: ''
  stderr: "tmpc37erf8n: /tmp/tmpc37erf8n.cpp:41: int main(): Assertion `candidate((1))\
    \ == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n    if (n <= 1) return false;\n    if (n ==\
    \ 2) return true;\n    if (n % 2 == 0) return false;\n    if (n % 3 == 0) return\
    \ false;\n    long i = 5;\n    while (i <= sqrt(n)) {\n        if (n % i == 0)\
    \ return false;\n        i += 6;\n    }\n    return true;\n}\nint main() {\n \
    \   auto candidate = is_prime;\n    assert(candidate((6)) == (false));\n    assert(candidate((101))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((13441))\
    \ == (true));\n    assert(candidate((61)) == (true));\n    assert(candidate((4))\
    \ == (false));\n    assert(candidate((1)) == (false));\n    assert(candidate((5))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((17))\
    \ == (true));\n    assert(candidate((85)) == (false));\n    assert(candidate((77))\
    \ == (false));\n    assert(candidate((255379)) == (false));\n}\n"
  stdout: ''
  stderr: "tmpr_63wmdh: /tmp/tmpr_63wmdh.cpp:43: int main(): Assertion `candidate((77))\
    \ == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n    if (n <= 1)\n        return false;\n  \
    \  if (n == 2)\n        return true;\n    if (n % 2 == 0)\n        return false;\n\
    \    for (int i = 3; i * i <= n; i += 2)\n        if (n % i == 0)\n          \
    \  return false;\n    return true;\n}\nint main() {\n    auto candidate = is_prime;\n\
    \    assert(candidate((6)) == (false));\n    assert(candidate((101)) == (true));\n\
    \    assert(candidate((11)) == (true));\n    assert(candidate((13441)) == (true));\n\
    \    assert(candidate((61)) == (true));\n    assert(candidate((4)) == (false));\n\
    \    assert(candidate((1)) == (false));\n    assert(candidate((5)) == (true));\n\
    \    assert(candidate((11)) == (true));\n    assert(candidate((17)) == (true));\n\
    \    assert(candidate((85)) == (false));\n    assert(candidate((77)) == (false));\n\
    \    assert(candidate((255379)) == (false));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n    if (n == 1)\n        return false;\n  \
    \  if (n == 2)\n        return true;\n    if (n % 2 == 0)\n        return false;\n\
    \    for (int i = 3; i <= sqrt(n); i += 2)\n        if (n % i == 0)\n        \
    \    return false;\n    return true;\n}\nint main() {\n    auto candidate = is_prime;\n\
    \    assert(candidate((6)) == (false));\n    assert(candidate((101)) == (true));\n\
    \    assert(candidate((11)) == (true));\n    assert(candidate((13441)) == (true));\n\
    \    assert(candidate((61)) == (true));\n    assert(candidate((4)) == (false));\n\
    \    assert(candidate((1)) == (false));\n    assert(candidate((5)) == (true));\n\
    \    assert(candidate((11)) == (true));\n    assert(candidate((17)) == (true));\n\
    \    assert(candidate((85)) == (false));\n    assert(candidate((77)) == (false));\n\
    \    assert(candidate((255379)) == (false));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n    if (n <= 1) return false;\n    if (n ==\
    \ 2) return true;\n    if (n % 2 == 0) return false;\n    long m = sqrt(n);\n\
    \    for (long i = 3; i <= m; i += 2) {\n        if (n % i == 0) return false;\n\
    \    }\n    return true;\n}\nint main() {\n    auto candidate = is_prime;\n  \
    \  assert(candidate((6)) == (false));\n    assert(candidate((101)) == (true));\n\
    \    assert(candidate((11)) == (true));\n    assert(candidate((13441)) == (true));\n\
    \    assert(candidate((61)) == (true));\n    assert(candidate((4)) == (false));\n\
    \    assert(candidate((1)) == (false));\n    assert(candidate((5)) == (true));\n\
    \    assert(candidate((11)) == (true));\n    assert(candidate((17)) == (true));\n\
    \    assert(candidate((85)) == (false));\n    assert(candidate((77)) == (false));\n\
    \    assert(candidate((255379)) == (false));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n    if (n <= 1) return false;\n    long sqr\
    \ = sqrt(n);\n    for (long i = 3; i <= sqr; i += 2) {\n        if (n % i == 0)\
    \ return false;\n    }\n    return true;\n}\nint main() {\n    auto candidate\
    \ = is_prime;\n    assert(candidate((6)) == (false));\n    assert(candidate((101))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((13441))\
    \ == (true));\n    assert(candidate((61)) == (true));\n    assert(candidate((4))\
    \ == (false));\n    assert(candidate((1)) == (false));\n    assert(candidate((5))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((17))\
    \ == (true));\n    assert(candidate((85)) == (false));\n    assert(candidate((77))\
    \ == (false));\n    assert(candidate((255379)) == (false));\n}\n"
  stdout: ''
  stderr: "tmptyczjg2a: /tmp/tmptyczjg2a.cpp:28: int main(): Assertion `candidate((6))\
    \ == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n    if (n == 1)\n        return false;\n  \
    \  if (n == 2)\n        return true;\n    if (n % 2 == 0)\n        return false;\n\
    \    for (int i = 3; i <= sqrt(n); i += 2)\n        if (n % i == 0)\n        \
    \    return false;\n    return true;\n}\nint main() {\n    auto candidate = is_prime;\n\
    \    assert(candidate((6)) == (false));\n    assert(candidate((101)) == (true));\n\
    \    assert(candidate((11)) == (true));\n    assert(candidate((13441)) == (true));\n\
    \    assert(candidate((61)) == (true));\n    assert(candidate((4)) == (false));\n\
    \    assert(candidate((1)) == (false));\n    assert(candidate((5)) == (true));\n\
    \    assert(candidate((11)) == (true));\n    assert(candidate((17)) == (true));\n\
    \    assert(candidate((85)) == (false));\n    assert(candidate((77)) == (false));\n\
    \    assert(candidate((255379)) == (false));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n    if (n == 1)\n        return false;\n  \
    \  if (n == 2)\n        return true;\n    if (n % 2 == 0)\n        return false;\n\
    \    for (int i = 3; i * i <= n; i += 2)\n        if (n % i == 0)\n          \
    \  return false;\n    return true;\n}\nint main() {\n    auto candidate = is_prime;\n\
    \    assert(candidate((6)) == (false));\n    assert(candidate((101)) == (true));\n\
    \    assert(candidate((11)) == (true));\n    assert(candidate((13441)) == (true));\n\
    \    assert(candidate((61)) == (true));\n    assert(candidate((4)) == (false));\n\
    \    assert(candidate((1)) == (false));\n    assert(candidate((5)) == (true));\n\
    \    assert(candidate((11)) == (true));\n    assert(candidate((17)) == (true));\n\
    \    assert(candidate((85)) == (false));\n    assert(candidate((77)) == (false));\n\
    \    assert(candidate((255379)) == (false));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n    if (n == 1)\n        return false;\n  \
    \  if (n == 2)\n        return true;\n    if (n % 2 == 0)\n        return false;\n\
    \    for (int i = 3; i <= sqrt(n); i += 2)\n        if (n % i == 0)\n        \
    \    return false;\n    return true;\n}\nint main() {\n    auto candidate = is_prime;\n\
    \    assert(candidate((6)) == (false));\n    assert(candidate((101)) == (true));\n\
    \    assert(candidate((11)) == (true));\n    assert(candidate((13441)) == (true));\n\
    \    assert(candidate((61)) == (true));\n    assert(candidate((4)) == (false));\n\
    \    assert(candidate((1)) == (false));\n    assert(candidate((5)) == (true));\n\
    \    assert(candidate((11)) == (true));\n    assert(candidate((17)) == (true));\n\
    \    assert(candidate((85)) == (false));\n    assert(candidate((77)) == (false));\n\
    \    assert(candidate((255379)) == (false));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n    if (n <= 1) return false;\n    if (n ==\
    \ 2) return true;\n    if (n % 2 == 0) return false;\n    if (n % 3 == 0) return\
    \ false;\n    int i = 5;\n    while (i < n / 3) {\n        if (n % i == 0) return\
    \ false;\n        i += 6;\n    }\n    return true;\n}\nint main() {\n    auto\
    \ candidate = is_prime;\n    assert(candidate((6)) == (false));\n    assert(candidate((101))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((13441))\
    \ == (true));\n    assert(candidate((61)) == (true));\n    assert(candidate((4))\
    \ == (false));\n    assert(candidate((1)) == (false));\n    assert(candidate((5))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((17))\
    \ == (true));\n    assert(candidate((85)) == (false));\n    assert(candidate((77))\
    \ == (false));\n    assert(candidate((255379)) == (false));\n}\n"
  stdout: ''
  stderr: "tmpb6ehdrpf: /tmp/tmpb6ehdrpf.cpp:44: int main(): Assertion `candidate((255379))\
    \ == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n    if (n == 1) return false;\n    if (n ==\
    \ 2) return true;\n    if (n % 2 == 0) return false;\n    if (n < 3) return true;\n\
    \    if (n % 3 == 0) return false;\n    if (n < 9) return true;\n    if (n % 9\
    \ == 0) return false;\n    if (n < 27) return true;\n    if (n % 27 == 0) return\
    \ false;\n    if (n < 53) return true;\n    if (n % 53 == 0) return false;\n \
    \   if (n < 1025) return true;\n    if (n % 1025 == 0) return false;\n    if (n\
    \ < 20389) return true;\n    if (n % 20389 == 0) return false;\n    if (n < 41813)\
    \ return true;\n    if (n % 41813 == 0) return false;\n    if (n < 76757) return\
    \ true;\n    if (n % 76757 == 0) return false;\n    if (n < 137438951) return\
    \ true;\n    if (n % 137438951 == 0) return false;\n    if (n < 2584578931) return\
    \ true;\n    if (n % 2584578931 == 0) return false;\n    if (n < 34155007173)\
    \ return true;\n    if (n % 34155007173 == 0) return false;\n    if (n < 6348114173)\
    \ return true;\n    if (n % 6348114173 == 0) return false;\n    if (n < 137438951)\
    \ return true;\n    if (n % 137438951 == 0) return false;\n    if (n < 2584578931)\
    \ return true;\n    if (n % 2584578931 == 0) return false;\n    if (n < 34155007173)\
    \ return true;\n    if (n % 34155007173 == 0) return false;\n    if (n < 6348114173)\
    \ return true;\n    if (n % 6348114173 == 0) return false;\n    if (n < 137438951)\
    \ return true;\n    if (n % 137438951 == 0) return false;\n    if (n < 2584578931)\
    \ return true;\n    if (n % 2584578931 == 0) return false;\n    if (n < 34155007173)\
    \ return true;\n    if (n % 34155007173 == 0) return false;\n    if (n < 6348114173)\
    \ return true;\n    if (n % 6348114173 == 0) return false;\n    if (n < 137438951)\
    \ return true;\n    if (n % 137438951 == 0) return false;\n    if (n < 2584578931)\
    \ return true;\n    if (n % 2584578931 == 0) return false;\n    if (n < 34155007173)\
    \ return true;\n    if (n % 34155007173 == 0) return false;\n    if (n < 6348114173)\
    \ return true;\n    if (n % 6348114173 == 0) return false;\n    if (n < 137438951)\
    \ return true;\n    if (n % 137438951 == 0) return false;\n    if (\n}\nint main()\
    \ {\n    auto candidate = is_prime;\n    assert(candidate((6)) == (false));\n\
    \    assert(candidate((101)) == (true));\n    assert(candidate((11)) == (true));\n\
    \    assert(candidate((13441)) == (true));\n    assert(candidate((61)) == (true));\n\
    \    assert(candidate((4)) == (false));\n    assert(candidate((1)) == (false));\n\
    \    assert(candidate((5)) == (true));\n    assert(candidate((11)) == (true));\n\
    \    assert(candidate((17)) == (true));\n    assert(candidate((85)) == (false));\n\
    \    assert(candidate((77)) == (false));\n    assert(candidate((255379)) == (false));\n\
    }\n"
  stdout: ''
  stderr: "/tmp/tmp97g9rxv3.cpp: In function \u2018bool is_prime(long int)\u2019:\n\
    /tmp/tmp97g9rxv3.cpp:73:1: error: expected primary-expression before \u2018}\u2019\
    \ token\n   73 | }\n      | ^\n/tmp/tmp97g9rxv3.cpp:72:9: error: expected \u2018\
    )\u2019 before \u2018}\u2019 token\n   72 |     if (\n      |        ~^\n    \
    \  |         )\n   73 | }\n      | ~        \n/tmp/tmp97g9rxv3.cpp:73:1: error:\
    \ expected primary-expression before \u2018}\u2019 token\n   73 | }\n      | ^\n\
    /tmp/tmp97g9rxv3.cpp:73:1: warning: control reaches end of non-void function [-Wreturn-type]\n\
    \   73 | }\n      | ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n    if (n < 2) return false;\n    if (n ==\
    \ 2) return true;\n    if (n % 2 == 0) return false;\n    if (n % 3 == 0) return\
    \ false;\n    long i = 5;\n    while (i <= sqrt(n)) {\n        if (n % i == 0)\
    \ return false;\n        i += 6;\n    }\n    return true;\n}\nint main() {\n \
    \   auto candidate = is_prime;\n    assert(candidate((6)) == (false));\n    assert(candidate((101))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((13441))\
    \ == (true));\n    assert(candidate((61)) == (true));\n    assert(candidate((4))\
    \ == (false));\n    assert(candidate((1)) == (false));\n    assert(candidate((5))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((17))\
    \ == (true));\n    assert(candidate((85)) == (false));\n    assert(candidate((77))\
    \ == (false));\n    assert(candidate((255379)) == (false));\n}\n"
  stdout: ''
  stderr: "tmpdgkjzr5x: /tmp/tmpdgkjzr5x.cpp:43: int main(): Assertion `candidate((77))\
    \ == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n    if (n == 1)\n        return false;\n  \
    \  if (n == 2)\n        return true;\n    if (n % 2 == 0)\n        return false;\n\
    \    if (n % 3 == 0)\n        return false;\n    long i = 5;\n    while (i <=\
    \ sqrt(n))\n        if (n % i == 0)\n            return false;\n        i += 6;\n\
    \    return true;\n}\nint main() {\n    auto candidate = is_prime;\n    assert(candidate((6))\
    \ == (false));\n    assert(candidate((101)) == (true));\n    assert(candidate((11))\
    \ == (true));\n    assert(candidate((13441)) == (true));\n    assert(candidate((61))\
    \ == (true));\n    assert(candidate((4)) == (false));\n    assert(candidate((1))\
    \ == (false));\n    assert(candidate((5)) == (true));\n    assert(candidate((11))\
    \ == (true));\n    assert(candidate((17)) == (true));\n    assert(candidate((85))\
    \ == (false));\n    assert(candidate((77)) == (false));\n    assert(candidate((255379))\
    \ == (false));\n}\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n    if (n == 1)\n        return false;\n  \
    \  if (n == 2)\n        return true;\n    if (n % 2 == 0)\n        return false;\n\
    \    if (n % 3 == 0)\n        return false;\n    int i = 3;\n    while (i <= sqrt(n))\n\
    \        if (n % i == 0)\n            return false;\n        i += 2;\n    return\
    \ true;\n}\nint main() {\n    auto candidate = is_prime;\n    assert(candidate((6))\
    \ == (false));\n    assert(candidate((101)) == (true));\n    assert(candidate((11))\
    \ == (true));\n    assert(candidate((13441)) == (true));\n    assert(candidate((61))\
    \ == (true));\n    assert(candidate((4)) == (false));\n    assert(candidate((1))\
    \ == (false));\n    assert(candidate((5)) == (true));\n    assert(candidate((11))\
    \ == (true));\n    assert(candidate((17)) == (true));\n    assert(candidate((85))\
    \ == (false));\n    assert(candidate((77)) == (false));\n    assert(candidate((255379))\
    \ == (false));\n}\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n    if (n <= 1)\n        return false;\n  \
    \  if (n == 2)\n        return true;\n    if (n % 2 == 0)\n        return false;\n\
    \    for (int i = 3; i <= n / i; i += 2)\n        if (n % i == 0)\n          \
    \  return false;\n    return true;\n}\nint main() {\n    auto candidate = is_prime;\n\
    \    assert(candidate((6)) == (false));\n    assert(candidate((101)) == (true));\n\
    \    assert(candidate((11)) == (true));\n    assert(candidate((13441)) == (true));\n\
    \    assert(candidate((61)) == (true));\n    assert(candidate((4)) == (false));\n\
    \    assert(candidate((1)) == (false));\n    assert(candidate((5)) == (true));\n\
    \    assert(candidate((11)) == (true));\n    assert(candidate((17)) == (true));\n\
    \    assert(candidate((85)) == (false));\n    assert(candidate((77)) == (false));\n\
    \    assert(candidate((255379)) == (false));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n    if (n <= 1) return false;\n    if (n ==\
    \ 2) return true;\n    if (n % 2 == 0) return false;\n    if (n % 3 == 0) return\
    \ false;\n    long i = 5;\n    while (i <= sqrt(n)) {\n        if (n % i == 0)\
    \ return false;\n        i += 6;\n    }\n    return true;\n}\nint main() {\n \
    \   auto candidate = is_prime;\n    assert(candidate((6)) == (false));\n    assert(candidate((101))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((13441))\
    \ == (true));\n    assert(candidate((61)) == (true));\n    assert(candidate((4))\
    \ == (false));\n    assert(candidate((1)) == (false));\n    assert(candidate((5))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((17))\
    \ == (true));\n    assert(candidate((85)) == (false));\n    assert(candidate((77))\
    \ == (false));\n    assert(candidate((255379)) == (false));\n}\n"
  stdout: ''
  stderr: "tmp8xdu_oic: /tmp/tmp8xdu_oic.cpp:43: int main(): Assertion `candidate((77))\
    \ == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n    if (n <= 1) return false;\n    if (n ==\
    \ 2) return true;\n    if (n % 2 == 0) return false;\n    if (n % 3 == 0) return\
    \ false;\n    if (n % 5 == 0) return false;\n    int i = 5;\n    while (i <= sqrt(n))\
    \ {\n        if (n % i == 0) return false;\n        i += 6;\n    }\n    return\
    \ true;\n}\nint main() {\n    auto candidate = is_prime;\n    assert(candidate((6))\
    \ == (false));\n    assert(candidate((101)) == (true));\n    assert(candidate((11))\
    \ == (true));\n    assert(candidate((13441)) == (true));\n    assert(candidate((61))\
    \ == (true));\n    assert(candidate((4)) == (false));\n    assert(candidate((1))\
    \ == (false));\n    assert(candidate((5)) == (true));\n    assert(candidate((11))\
    \ == (true));\n    assert(candidate((17)) == (true));\n    assert(candidate((85))\
    \ == (false));\n    assert(candidate((77)) == (false));\n    assert(candidate((255379))\
    \ == (false));\n}\n"
  stdout: ''
  stderr: "tmpzwqj__lt: /tmp/tmpzwqj__lt.cpp:40: int main(): Assertion `candidate((5))\
    \ == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n    if (n == 1)\n        return false;\n  \
    \  if (n == 2)\n        return true;\n    if (n % 2 == 0)\n        return false;\n\
    \    for (int i = 3; i * i <= n; i += 2)\n        if (n % i == 0)\n          \
    \  return false;\n    return true;\n}\nint main() {\n    auto candidate = is_prime;\n\
    \    assert(candidate((6)) == (false));\n    assert(candidate((101)) == (true));\n\
    \    assert(candidate((11)) == (true));\n    assert(candidate((13441)) == (true));\n\
    \    assert(candidate((61)) == (true));\n    assert(candidate((4)) == (false));\n\
    \    assert(candidate((1)) == (false));\n    assert(candidate((5)) == (true));\n\
    \    assert(candidate((11)) == (true));\n    assert(candidate((17)) == (true));\n\
    \    assert(candidate((85)) == (false));\n    assert(candidate((77)) == (false));\n\
    \    assert(candidate((255379)) == (false));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n    if (n == 1)\n        return false;\n  \
    \  if (n == 2)\n        return true;\n    if (n % 2 == 0)\n        return false;\n\
    \    if (n % 3 == 0)\n        return false;\n    int i = 3;\n    while (i <= sqrt(n))\n\
    \        if (n % i == 0)\n            return false;\n        i += 2;\n    return\
    \ true;\n}\nint main() {\n    auto candidate = is_prime;\n    assert(candidate((6))\
    \ == (false));\n    assert(candidate((101)) == (true));\n    assert(candidate((11))\
    \ == (true));\n    assert(candidate((13441)) == (true));\n    assert(candidate((61))\
    \ == (true));\n    assert(candidate((4)) == (false));\n    assert(candidate((1))\
    \ == (false));\n    assert(candidate((5)) == (true));\n    assert(candidate((11))\
    \ == (true));\n    assert(candidate((17)) == (true));\n    assert(candidate((85))\
    \ == (false));\n    assert(candidate((77)) == (false));\n    assert(candidate((255379))\
    \ == (false));\n}\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n  if (n < 2) return false;\n  if (n == 2) return\
    \ true;\n  if (n % 2 == 0) return false;\n  if (n % 3 == 0) return false;\n  if\
    \ (n % 5 == 0) return false;\n  if (n % 7 == 0) return false;\n  if (n % 11 ==\
    \ 0) return false;\n  if (n % 13 == 0) return false;\n  if (n % 17 == 0) return\
    \ false;\n  if (n % 19 == 0) return false;\n  if (n % 23 == 0) return false;\n\
    \  if (n % 29 == 0) return false;\n  if (n % 31 == 0) return false;\n  if (n %\
    \ 37 == 0) return false;\n  if (n % 41) == 0) return false;\n  if (n % 43) ==\
    \ 0) return false;\n  if (n % 47) == 0) return false;\n  if (n % 53) == 0) return\
    \ false;\n  if (n % 59) == 0) return false;\n  if (n % 61) == 0) return false;\n\
    \  if (n % 67) == 0) return false;\n  if (n % 71) == 0) return false;\n  if (n\
    \ % 73) == 0) return false;\n  if (n % 79) == 0) return false;\n  if (n % 83)\
    \ == 0) return false;\n  if (n % 89) == 0) return false;\n  if (n % 97) == 0)\
    \ return false;\n  if (n % 103) == 0) return false;\n  if (n % 111 == 0) return\
    \ false;\n  if (n % 121 == 0) return false;\n  if (n % 131 == 0) return false;\n\
    \  if (n % 141 == 0) return false;\n  if (n % 151 == 0) return false;\n  if (n\
    \ % 161 == 0) return false;\n  if (n % 171 == 0) return false;\n  if (n % 181\
    \ == 0) return false;\n  if (n % 191 == 0) return false;\n  if (n % 201 == 0)\
    \ return false;\n  if (n % 211 == 0) return false;\n  if (n % 221 == 0) return\
    \ false;\n  if (n % 231 == 0) return false;\n  if (n % 241 == 0) return false;\n\
    \  if (n % 251 == 0) return false;\n  if (n % 261 == 0) return false;\n  if (n\
    \ % 271 == 0) return false;\n  if (n % 281 == 0) return false;\n  if (n % 291\
    \ == 0) return false;\n  if (n % 301 == 0) return false;\n  if (n % 311 == 0)\
    \ return false;\n  if (n % 321 == 0) return false;\n  if (n % 331 == 0) return\
    \ false;\n  if (n % 341 == 0) return false;\n  if (n % 351 == 0) return false;\n\
    \  if (n % 361 == 0) return false;\n  if (n % 371 == 0) return false;\n  if (n\
    \ % 381 == 0) return false;\n  if (n % 391 == 0) return false;\n  if (n % 401\
    \ == 0) return false;\n  if (n % 411 == 0) return false;\n  if (n % 421 == 0)\
    \ return false;\n  if (n % 431 == 0) return false;\n  if (n % 441 == 0) return\
    \ false;\n  if (n % 451 == 0) return false;\n  if (n % 461 == 0) return false;\n\
    \  if (n % 471 == \n}\nint main() {\n    auto candidate = is_prime;\n    assert(candidate((6))\
    \ == (false));\n    assert(candidate((101)) == (true));\n    assert(candidate((11))\
    \ == (true));\n    assert(candidate((13441)) == (true));\n    assert(candidate((61))\
    \ == (true));\n    assert(candidate((4)) == (false));\n    assert(candidate((1))\
    \ == (false));\n    assert(candidate((5)) == (true));\n    assert(candidate((11))\
    \ == (true));\n    assert(candidate((17)) == (true));\n    assert(candidate((85))\
    \ == (false));\n    assert(candidate((77)) == (false));\n    assert(candidate((255379))\
    \ == (false));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp_igqsp7z.cpp: In function \u2018bool is_prime(long int)\u2019:\n\
    /tmp/tmp_igqsp7z.cpp:33:15: error: expected primary-expression before \u2018==\u2019\
    \ token\n   33 |   if (n % 41) == 0) return false;\n      |               ^~\n\
    /tmp/tmp_igqsp7z.cpp:34:15: error: expected primary-expression before \u2018==\u2019\
    \ token\n   34 |   if (n % 43) == 0) return false;\n      |               ^~\n\
    /tmp/tmp_igqsp7z.cpp:35:15: error: expected primary-expression before \u2018==\u2019\
    \ token\n   35 |   if (n % 47) == 0) return false;\n      |               ^~\n\
    /tmp/tmp_igqsp7z.cpp:36:15: error: expected primary-expression before \u2018==\u2019\
    \ token\n   36 |   if (n % 53) == 0) return false;\n      |               ^~\n\
    /tmp/tmp_igqsp7z.cpp:37:15: error: expected primary-expression before \u2018==\u2019\
    \ token\n   37 |   if (n % 59) == 0) return false;\n      |               ^~\n\
    /tmp/tmp_igqsp7z.cpp:38:15: error: expected primary-expression before \u2018==\u2019\
    \ token\n   38 |   if (n % 61) == 0) return false;\n      |               ^~\n\
    /tmp/tmp_igqsp7z.cpp:39:15: error: expected primary-expression before \u2018==\u2019\
    \ token\n   39 |   if (n % 67) == 0) return false;\n      |               ^~\n\
    /tmp/tmp_igqsp7z.cpp:40:15: error: expected primary-expression before \u2018==\u2019\
    \ token\n   40 |   if (n % 71) == 0) return false;\n      |               ^~\n\
    /tmp/tmp_igqsp7z.cpp:41:15: error: expected primary-expression before \u2018==\u2019\
    \ token\n   41 |   if (n % 73) == 0) return false;\n      |               ^~\n\
    /tmp/tmp_igqsp7z.cpp:42:15: error: expected primary-expression before \u2018==\u2019\
    \ token\n   42 |   if (n % 79) == 0) return false;\n      |               ^~\n\
    /tmp/tmp_igqsp7z.cpp:43:15: error: expected primary-expression before \u2018==\u2019\
    \ token\n   43 |   if (n % 83) == 0) return false;\n      |               ^~\n\
    /tmp/tmp_igqsp7z.cpp:44:15: error: expected primary-expression before \u2018==\u2019\
    \ token\n   44 |   if (n % 89) == 0) return false;\n      |               ^~\n\
    /tmp/tmp_igqsp7z.cpp:45:15: error: expected primary-expression before \u2018==\u2019\
    \ token\n   45 |   if (n % 97) == 0) return false;\n      |               ^~\n\
    /tmp/tmp_igqsp7z.cpp:46:16: error: expected primary-expression before \u2018==\u2019\
    \ token\n   46 |   if (n % 103) == 0) return false;\n      |                ^~\n\
    /tmp/tmp_igqsp7z.cpp:84:1: error: expected primary-expression before \u2018}\u2019\
    \ token\n   84 | }\n      | ^\n/tmp/tmp_igqsp7z.cpp:83:17: error: expected \u2018\
    )\u2019 before \u2018}\u2019 token\n   83 |   if (n % 471 ==\n      |      ~ \
    \         ^\n      |                 )\n   84 | }\n      | ~                \n\
    /tmp/tmp_igqsp7z.cpp:84:1: error: expected primary-expression before \u2018}\u2019\
    \ token\n   84 | }\n      | ^\n/tmp/tmp_igqsp7z.cpp:84:1: warning: control reaches\
    \ end of non-void function [-Wreturn-type]\n   84 | }\n      | ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n    if (n <= 1) return false;\n    long sqr\
    \ = sqrt(n);\n    for (long i = 3; i <= sqr; i += 2) {\n        if (n % i == 0)\
    \ return false;\n    }\n    return true;\n}\nint main() {\n    auto candidate\
    \ = is_prime;\n    assert(candidate((6)) == (false));\n    assert(candidate((101))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((13441))\
    \ == (true));\n    assert(candidate((61)) == (true));\n    assert(candidate((4))\
    \ == (false));\n    assert(candidate((1)) == (false));\n    assert(candidate((5))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((17))\
    \ == (true));\n    assert(candidate((85)) == (false));\n    assert(candidate((77))\
    \ == (false));\n    assert(candidate((255379)) == (false));\n}\n"
  stdout: ''
  stderr: "tmpwk9ak7ah: /tmp/tmpwk9ak7ah.cpp:28: int main(): Assertion `candidate((6))\
    \ == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n    if (n == 1)\n        return false;\n  \
    \  if (n == 2)\n        return true;\n    if (n % 2 == 0)\n        return false;\n\
    \    if (n % 3 == 0)\n        return false;\n    long i = 5;\n    while (i <=\
    \ sqrt(n))\n        if (n % i == 0)\n            return false;\n        i += 6;\n\
    \    return true;\n}\nint main() {\n    auto candidate = is_prime;\n    assert(candidate((6))\
    \ == (false));\n    assert(candidate((101)) == (true));\n    assert(candidate((11))\
    \ == (true));\n    assert(candidate((13441)) == (true));\n    assert(candidate((61))\
    \ == (true));\n    assert(candidate((4)) == (false));\n    assert(candidate((1))\
    \ == (false));\n    assert(candidate((5)) == (true));\n    assert(candidate((11))\
    \ == (true));\n    assert(candidate((17)) == (true));\n    assert(candidate((85))\
    \ == (false));\n    assert(candidate((77)) == (false));\n    assert(candidate((255379))\
    \ == (false));\n}\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n    if (n == 1)\n        return false;\n  \
    \  if (n == 2)\n        return true;\n    if (n % 2 == 0)\n        return false;\n\
    \    for (int i = 3; i <= sqrt(n); i += 2)\n        if (n % i == 0)\n        \
    \    return false;\n    return true;\n}\nint main() {\n    auto candidate = is_prime;\n\
    \    assert(candidate((6)) == (false));\n    assert(candidate((101)) == (true));\n\
    \    assert(candidate((11)) == (true));\n    assert(candidate((13441)) == (true));\n\
    \    assert(candidate((61)) == (true));\n    assert(candidate((4)) == (false));\n\
    \    assert(candidate((1)) == (false));\n    assert(candidate((5)) == (true));\n\
    \    assert(candidate((11)) == (true));\n    assert(candidate((17)) == (true));\n\
    \    assert(candidate((85)) == (false));\n    assert(candidate((77)) == (false));\n\
    \    assert(candidate((255379)) == (false));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n    if (n <= 1) return false;\n    if (n ==\
    \ 2) return true;\n    if (n % 2 == 0) return false;\n    for (int i = 3; i *\
    \ i <= n; i += 2) {\n        if (n % i == 0) return false;\n    }\n    return\
    \ true;\n}\nint main() {\n    auto candidate = is_prime;\n    assert(candidate((6))\
    \ == (false));\n    assert(candidate((101)) == (true));\n    assert(candidate((11))\
    \ == (true));\n    assert(candidate((13441)) == (true));\n    assert(candidate((61))\
    \ == (true));\n    assert(candidate((4)) == (false));\n    assert(candidate((1))\
    \ == (false));\n    assert(candidate((5)) == (true));\n    assert(candidate((11))\
    \ == (true));\n    assert(candidate((17)) == (true));\n    assert(candidate((85))\
    \ == (false));\n    assert(candidate((77)) == (false));\n    assert(candidate((255379))\
    \ == (false));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n    if (n == 1)\n        return false;\n  \
    \  if (n == 2)\n        return true;\n    if (n % 2 == 0)\n        return false;\n\
    \    if (n % 3 == 0)\n        return false;\n    long i = 5;\n    while (i <=\
    \ n / 3) {\n        if (n % i == 0)\n            return false;\n        i += 6;\n\
    \    }\n    return true;\n}\nint main() {\n    auto candidate = is_prime;\n  \
    \  assert(candidate((6)) == (false));\n    assert(candidate((101)) == (true));\n\
    \    assert(candidate((11)) == (true));\n    assert(candidate((13441)) == (true));\n\
    \    assert(candidate((61)) == (true));\n    assert(candidate((4)) == (false));\n\
    \    assert(candidate((1)) == (false));\n    assert(candidate((5)) == (true));\n\
    \    assert(candidate((11)) == (true));\n    assert(candidate((17)) == (true));\n\
    \    assert(candidate((85)) == (false));\n    assert(candidate((77)) == (false));\n\
    \    assert(candidate((255379)) == (false));\n}\n"
  stdout: ''
  stderr: "tmp1sfhkj0f: /tmp/tmp1sfhkj0f.cpp:49: int main(): Assertion `candidate((255379))\
    \ == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n    if (n <= 1) return false;\n    long sqr\
    \ = sqrt(n);\n    for (long i = 3; i <= sqr; i += 2) {\n        if (n % i == 0)\
    \ return false;\n    }\n    return true;\n}\nint main() {\n    auto candidate\
    \ = is_prime;\n    assert(candidate((6)) == (false));\n    assert(candidate((101))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((13441))\
    \ == (true));\n    assert(candidate((61)) == (true));\n    assert(candidate((4))\
    \ == (false));\n    assert(candidate((1)) == (false));\n    assert(candidate((5))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((17))\
    \ == (true));\n    assert(candidate((85)) == (false));\n    assert(candidate((77))\
    \ == (false));\n    assert(candidate((255379)) == (false));\n}\n"
  stdout: ''
  stderr: "tmphxpuxbaw: /tmp/tmphxpuxbaw.cpp:28: int main(): Assertion `candidate((6))\
    \ == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n    if (n == 1)\n        return false;\n  \
    \  if (n == 2)\n        return true;\n    if (n % 2 == 0)\n        return false;\n\
    \    if (n % 3 == 0)\n        return false;\n    long i = 5;\n    while (i <=\
    \ n / 3) {\n        if (n % i == 0)\n            return false;\n        i += 6;\n\
    \    }\n    return true;\n}\nint main() {\n    auto candidate = is_prime;\n  \
    \  assert(candidate((6)) == (false));\n    assert(candidate((101)) == (true));\n\
    \    assert(candidate((11)) == (true));\n    assert(candidate((13441)) == (true));\n\
    \    assert(candidate((61)) == (true));\n    assert(candidate((4)) == (false));\n\
    \    assert(candidate((1)) == (false));\n    assert(candidate((5)) == (true));\n\
    \    assert(candidate((11)) == (true));\n    assert(candidate((17)) == (true));\n\
    \    assert(candidate((85)) == (false));\n    assert(candidate((77)) == (false));\n\
    \    assert(candidate((255379)) == (false));\n}\n"
  stdout: ''
  stderr: "tmp23t2j_e1: /tmp/tmp23t2j_e1.cpp:49: int main(): Assertion `candidate((255379))\
    \ == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n    if (n == 1)\n        return false;\n  \
    \  if (n == 2)\n        return true;\n    if (n % 2 == 0)\n        return false;\n\
    \    if (n % 3 == 0)\n        return false;\n    if (n % 5 == 0)\n        return\
    \ false;\n    long i = 5;\n    while (i <= sqrt(n))\n        if (n % i == 0)\n\
    \            return false;\n        i += 6;\n    return true;\n}\nint main() {\n\
    \    auto candidate = is_prime;\n    assert(candidate((6)) == (false));\n    assert(candidate((101))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((13441))\
    \ == (true));\n    assert(candidate((61)) == (true));\n    assert(candidate((4))\
    \ == (false));\n    assert(candidate((1)) == (false));\n    assert(candidate((5))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((17))\
    \ == (true));\n    assert(candidate((85)) == (false));\n    assert(candidate((77))\
    \ == (false));\n    assert(candidate((255379)) == (false));\n}\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n    if (n == 1)\n        return false;\n  \
    \  if (n == 2)\n        return true;\n    if (n % 2 == 0)\n        return false;\n\
    \    if (n % 3 == 0)\n        return false;\n    long i = 5;\n    while (i <=\
    \ n / 3) {\n        if (n % i == 0)\n            return false;\n        i += 6;\n\
    \    }\n    return true;\n}\nint main() {\n    auto candidate = is_prime;\n  \
    \  assert(candidate((6)) == (false));\n    assert(candidate((101)) == (true));\n\
    \    assert(candidate((11)) == (true));\n    assert(candidate((13441)) == (true));\n\
    \    assert(candidate((61)) == (true));\n    assert(candidate((4)) == (false));\n\
    \    assert(candidate((1)) == (false));\n    assert(candidate((5)) == (true));\n\
    \    assert(candidate((11)) == (true));\n    assert(candidate((17)) == (true));\n\
    \    assert(candidate((85)) == (false));\n    assert(candidate((77)) == (false));\n\
    \    assert(candidate((255379)) == (false));\n}\n"
  stdout: ''
  stderr: "tmp5nz00oq1: /tmp/tmp5nz00oq1.cpp:49: int main(): Assertion `candidate((255379))\
    \ == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n    if (n < 2)\n        return false;\n   \
    \ if (n == 2)\n        return true;\n    if (n % 2 == 0)\n        return false;\n\
    \    for (int i = 3; i <= sqrt(n); i += 2)\n        if (n % i == 0)\n        \
    \    return false;\n    return true;\n}\nint main() {\n    auto candidate = is_prime;\n\
    \    assert(candidate((6)) == (false));\n    assert(candidate((101)) == (true));\n\
    \    assert(candidate((11)) == (true));\n    assert(candidate((13441)) == (true));\n\
    \    assert(candidate((61)) == (true));\n    assert(candidate((4)) == (false));\n\
    \    assert(candidate((1)) == (false));\n    assert(candidate((5)) == (true));\n\
    \    assert(candidate((11)) == (true));\n    assert(candidate((17)) == (true));\n\
    \    assert(candidate((85)) == (false));\n    assert(candidate((77)) == (false));\n\
    \    assert(candidate((255379)) == (false));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n    if (n == 1) return false;\n    if (n ==\
    \ 2) return true;\n    if (n % 2 == 0) return false;\n    if (n % 3 == 0) return\
    \ false;\n    long i = 5;\n    while (i < n) {\n        if (n % i == 0) return\
    \ false;\n        i += 6;\n    }\n    return true;\n}\nint main() {\n    auto\
    \ candidate = is_prime;\n    assert(candidate((6)) == (false));\n    assert(candidate((101))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((13441))\
    \ == (true));\n    assert(candidate((61)) == (true));\n    assert(candidate((4))\
    \ == (false));\n    assert(candidate((1)) == (false));\n    assert(candidate((5))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((17))\
    \ == (true));\n    assert(candidate((85)) == (false));\n    assert(candidate((77))\
    \ == (false));\n    assert(candidate((255379)) == (false));\n}\n"
  stdout: ''
  stderr: "tmps0c8x7ui: /tmp/tmps0c8x7ui.cpp:44: int main(): Assertion `candidate((255379))\
    \ == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n    if (n == 1) return false;\n    if (n ==\
    \ 2) return true;\n    if (n % 2 == 0) return false;\n    if (n % 3 == 0) return\
    \ false;\n    long i = 5;\n    while (i <= sqrt(n)) {\n        if (n % i == 0)\
    \ return false;\n        i += 6;\n    }\n    return true;\n}\nint main() {\n \
    \   auto candidate = is_prime;\n    assert(candidate((6)) == (false));\n    assert(candidate((101))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((13441))\
    \ == (true));\n    assert(candidate((61)) == (true));\n    assert(candidate((4))\
    \ == (false));\n    assert(candidate((1)) == (false));\n    assert(candidate((5))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((17))\
    \ == (true));\n    assert(candidate((85)) == (false));\n    assert(candidate((77))\
    \ == (false));\n    assert(candidate((255379)) == (false));\n}\n"
  stdout: ''
  stderr: "tmp64qya_77: /tmp/tmp64qya_77.cpp:43: int main(): Assertion `candidate((77))\
    \ == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n    if (n < 2) return false;\n    if (n ==\
    \ 2) return true;\n    if (n % 2 == 0) return false;\n    for (int i = 3; i <=\
    \ sqrt(n); i += 2)\n        if (n % i == 0) return false;\n    return true;\n\
    }\nint main() {\n    auto candidate = is_prime;\n    assert(candidate((6)) ==\
    \ (false));\n    assert(candidate((101)) == (true));\n    assert(candidate((11))\
    \ == (true));\n    assert(candidate((13441)) == (true));\n    assert(candidate((61))\
    \ == (true));\n    assert(candidate((4)) == (false));\n    assert(candidate((1))\
    \ == (false));\n    assert(candidate((5)) == (true));\n    assert(candidate((11))\
    \ == (true));\n    assert(candidate((17)) == (true));\n    assert(candidate((85))\
    \ == (false));\n    assert(candidate((77)) == (false));\n    assert(candidate((255379))\
    \ == (false));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n    if (n == 1)\n        return false;\n  \
    \  if (n == 2)\n        return true;\n    if (n % 2 == 0)\n        return false;\n\
    \    if (n % 3 == 0)\n        return false;\n    long i = 5;\n    while (i <=\
    \ n / 3) {\n        if (n % i == 0)\n            return false;\n        i += 6;\n\
    \    }\n    return true;\n}\nint main() {\n    auto candidate = is_prime;\n  \
    \  assert(candidate((6)) == (false));\n    assert(candidate((101)) == (true));\n\
    \    assert(candidate((11)) == (true));\n    assert(candidate((13441)) == (true));\n\
    \    assert(candidate((61)) == (true));\n    assert(candidate((4)) == (false));\n\
    \    assert(candidate((1)) == (false));\n    assert(candidate((5)) == (true));\n\
    \    assert(candidate((11)) == (true));\n    assert(candidate((17)) == (true));\n\
    \    assert(candidate((85)) == (false));\n    assert(candidate((77)) == (false));\n\
    \    assert(candidate((255379)) == (false));\n}\n"
  stdout: ''
  stderr: "tmpfzvg3o79: /tmp/tmpfzvg3o79.cpp:49: int main(): Assertion `candidate((255379))\
    \ == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n    if (n < 2) return false;\n    if (n ==\
    \ 2) return true;\n    if (n % 2 == 0) return false;\n    long sq = sqrt(n);\n\
    \    for (long i = 3; i <= sq; i += 2) {\n        if (n % i == 0) return false;\n\
    \    }\n    return true;\n}\nint main() {\n    auto candidate = is_prime;\n  \
    \  assert(candidate((6)) == (false));\n    assert(candidate((101)) == (true));\n\
    \    assert(candidate((11)) == (true));\n    assert(candidate((13441)) == (true));\n\
    \    assert(candidate((61)) == (true));\n    assert(candidate((4)) == (false));\n\
    \    assert(candidate((1)) == (false));\n    assert(candidate((5)) == (true));\n\
    \    assert(candidate((11)) == (true));\n    assert(candidate((17)) == (true));\n\
    \    assert(candidate((85)) == (false));\n    assert(candidate((77)) == (false));\n\
    \    assert(candidate((255379)) == (false));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n    if (n <= 1) return false;\n    long sq\
    \ = sqrt(n);\n    for (long i = 3; i <= sq; i += 2) {\n        if (n % i == 0)\
    \ return false;\n    }\n    return true;\n}\nint main() {\n    auto candidate\
    \ = is_prime;\n    assert(candidate((6)) == (false));\n    assert(candidate((101))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((13441))\
    \ == (true));\n    assert(candidate((61)) == (true));\n    assert(candidate((4))\
    \ == (false));\n    assert(candidate((1)) == (false));\n    assert(candidate((5))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((17))\
    \ == (true));\n    assert(candidate((85)) == (false));\n    assert(candidate((77))\
    \ == (false));\n    assert(candidate((255379)) == (false));\n}\n"
  stdout: ''
  stderr: "tmp7zsa0kk7: /tmp/tmp7zsa0kk7.cpp:28: int main(): Assertion `candidate((6))\
    \ == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n    if (n == 1) return false;\n    if (n ==\
    \ 2) return true;\n    if (n % 2 == 0) return false;\n    if (n % 3 == 0) return\
    \ false;\n    int i = 5;\n    while (i <= sqrt(n)) {\n        if (n % i == 0)\
    \ return false;\n        i += 6;\n    }\n    return true;\n}\nint main() {\n \
    \   auto candidate = is_prime;\n    assert(candidate((6)) == (false));\n    assert(candidate((101))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((13441))\
    \ == (true));\n    assert(candidate((61)) == (true));\n    assert(candidate((4))\
    \ == (false));\n    assert(candidate((1)) == (false));\n    assert(candidate((5))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((17))\
    \ == (true));\n    assert(candidate((85)) == (false));\n    assert(candidate((77))\
    \ == (false));\n    assert(candidate((255379)) == (false));\n}\n"
  stdout: ''
  stderr: "tmpk0pvt942: /tmp/tmpk0pvt942.cpp:43: int main(): Assertion `candidate((77))\
    \ == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n    if (n == 1) return false;\n    if (n ==\
    \ 2) return true;\n    if (n % 2 == 0) return false;\n    if (n % 3 == 0) return\
    \ false;\n    long i = 5;\n    while (i <= sqrt(n)) {\n        if (n % i == 0)\
    \ return false;\n        i += 6;\n    }\n    return true;\n}\nint main() {\n \
    \   auto candidate = is_prime;\n    assert(candidate((6)) == (false));\n    assert(candidate((101))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((13441))\
    \ == (true));\n    assert(candidate((61)) == (true));\n    assert(candidate((4))\
    \ == (false));\n    assert(candidate((1)) == (false));\n    assert(candidate((5))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((17))\
    \ == (true));\n    assert(candidate((85)) == (false));\n    assert(candidate((77))\
    \ == (false));\n    assert(candidate((255379)) == (false));\n}\n"
  stdout: ''
  stderr: "tmpcncqs1_x: /tmp/tmpcncqs1_x.cpp:43: int main(): Assertion `candidate((77))\
    \ == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n    if (n == 2) return true;\n    if (n % 2\
    \ == 0) return false;\n    if (n < 3) return true;\n    if (n % 3 == 0) return\
    \ false;\n    if (n < 5) return true;\n    if (n % 5 == 0) return false;\n   \
    \ if (n < 7) return true;\n    if (n % 7 == 0) return false;\n    if (n < 11)\
    \ return true;\n    if (n % 11 == 0) return false;\n    if (n < 13) return true;\n\
    \    if (n % 13 == 0) return false;\n    if (n < 17) return true;\n    if (n %\
    \ 17 == 0) return false;\n    if (n < 19) return true;\n    if (n % 19 == 0) return\
    \ false;\n    if (n < 23) return true;\n    if (n % 23 == 0) return false;\n \
    \   if (n < 29) return true;\n    if (n % 29 == 0) return false;\n    if (n <\
    \ 31) return true;\n    if (n % 31 == 0) return false;\n    if (n < 37) return\
    \ true;\n    if (n % 37 == 0) return false;\n    if (n < 43) return true;\n  \
    \  if (n % 43 == 0) return false;\n    if (n < 47) return true;\n    if (n % 47\
    \ == 0) return false;\n    if (n < 53) return true;\n    if (n % 53 == 0) return\
    \ false;\n    if (n < 59) return true;\n    if (n % 59 == 0) return false;\n \
    \   if (n < 61) return true;\n    if (n % 61 == 0) return false;\n    if (n <\
    \ 67) return true;\n    if (n % 67 == 0) return false;\n    if (n < 73) return\
    \ true;\n    if (n % 73 == 0) return false;\n    if (n < 79) return true;\n  \
    \  if (n % 79 == 0) return false;\n    if (n < 83) return true;\n    if (n % 83\
    \ == 0) return false;\n    if (n < 89) return true;\n    if (n % 89 == 0) return\
    \ false;\n    if (n < 97) return true;\n    if (n % 97 == 0) return false;\n \
    \   if (n < 101) return true;\n    if (n % 101 == 0) return false;\n    if (n\
    \ < 107) return true;\n    if (n % 107 == 0) return false;\n    if (n < 113) return\
    \ true;\n    if (n % 113 == 0) return false;\n    if (n < 119) return true;\n\
    \    if (n % 119 == 0) return false;\n    if (n < 127) return true;\n    if (n\
    \ % 127 == 0) return false;\n    if (n < 131) return true;\n    if (n % 131 ==\
    \ 0) return false;\n    if (n < 137) return true;\n    if (n % 137 == 0) return\
    \ false;\n    if (n < 141) return true;\n    if (n % 141 == 0) return false;\n\
    \    if (n < 147) return true;\n    if (n % 147 == 0) return false;\n    if (n\
    \ < 151) return true;\n    if (n % 151 == 0) return false;\n    if (n < 157) return\
    \ true;\n    if (n % 157 == 0) return false;\n    if (n < 163) return true;\n\
    \    if (n % 163 == 0) return false;\n    if (n < 171) return true;\n    if (n\
    \ % 171 == 0) return false;\n    if (n < \n}\nint main() {\n    auto candidate\
    \ = is_prime;\n    assert(candidate((6)) == (false));\n    assert(candidate((101))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((13441))\
    \ == (true));\n    assert(candidate((61)) == (true));\n    assert(candidate((4))\
    \ == (false));\n    assert(candidate((1)) == (false));\n    assert(candidate((5))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((17))\
    \ == (true));\n    assert(candidate((85)) == (false));\n    assert(candidate((77))\
    \ == (false));\n    assert(candidate((255379)) == (false));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpp8v9cf9a.cpp: In function \u2018bool is_prime(long int)\u2019:\n\
    /tmp/tmpp8v9cf9a.cpp:92:1: error: expected primary-expression before \u2018}\u2019\
    \ token\n   92 | }\n      | ^\n/tmp/tmpp8v9cf9a.cpp:91:12: error: expected \u2018\
    )\u2019 before \u2018}\u2019 token\n   91 |     if (n <\n      |        ~   ^\n\
    \      |            )\n   92 | }\n      | ~           \n/tmp/tmpp8v9cf9a.cpp:92:1:\
    \ error: expected primary-expression before \u2018}\u2019 token\n   92 | }\n \
    \     | ^\n/tmp/tmpp8v9cf9a.cpp:92:1: warning: control reaches end of non-void\
    \ function [-Wreturn-type]\n   92 | }\n      | ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n    if (n == 1)\n        return false;\n  \
    \  if (n == 2)\n        return true;\n    if (n % 2 == 0)\n        return false;\n\
    \    for (int i = 3; i * i <= n; i += 2)\n        if (n % i == 0)\n          \
    \  return false;\n    return true;\n}\nint main() {\n    auto candidate = is_prime;\n\
    \    assert(candidate((6)) == (false));\n    assert(candidate((101)) == (true));\n\
    \    assert(candidate((11)) == (true));\n    assert(candidate((13441)) == (true));\n\
    \    assert(candidate((61)) == (true));\n    assert(candidate((4)) == (false));\n\
    \    assert(candidate((1)) == (false));\n    assert(candidate((5)) == (true));\n\
    \    assert(candidate((11)) == (true));\n    assert(candidate((17)) == (true));\n\
    \    assert(candidate((85)) == (false));\n    assert(candidate((77)) == (false));\n\
    \    assert(candidate((255379)) == (false));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n    if (n == 1) return false;\n    if (n ==\
    \ 2) return true;\n    if (n % 2 == 0) return false;\n    if (n % 3 == 0) return\
    \ false;\n    if (n % 5 == 0) return false;\n    if (n % 7 == 0) return false;\n\
    \    long sq = sqrt(n);\n    long i = 3;\n    while (i <= sq) {\n        if (n\
    \ % i == 0) return false;\n        i += 6;\n    }\n    return true;\n}\nint main()\
    \ {\n    auto candidate = is_prime;\n    assert(candidate((6)) == (false));\n\
    \    assert(candidate((101)) == (true));\n    assert(candidate((11)) == (true));\n\
    \    assert(candidate((13441)) == (true));\n    assert(candidate((61)) == (true));\n\
    \    assert(candidate((4)) == (false));\n    assert(candidate((1)) == (false));\n\
    \    assert(candidate((5)) == (true));\n    assert(candidate((11)) == (true));\n\
    \    assert(candidate((17)) == (true));\n    assert(candidate((85)) == (false));\n\
    \    assert(candidate((77)) == (false));\n    assert(candidate((255379)) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmpaljgw5x1: /tmp/tmpaljgw5x1.cpp:42: int main(): Assertion `candidate((5))\
    \ == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n    if (n == 1)\n        return false;\n  \
    \  if (n == 2)\n        return true;\n    if (n % 2 == 0)\n        return false;\n\
    \    if (n % 3 == 0)\n        return false;\n    long i = 5;\n    while (i <=\
    \ sqrt(n)) {\n        if (n % i == 0)\n            return false;\n        i +=\
    \ 6;\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_prime;\n\
    \    assert(candidate((6)) == (false));\n    assert(candidate((101)) == (true));\n\
    \    assert(candidate((11)) == (true));\n    assert(candidate((13441)) == (true));\n\
    \    assert(candidate((61)) == (true));\n    assert(candidate((4)) == (false));\n\
    \    assert(candidate((1)) == (false));\n    assert(candidate((5)) == (true));\n\
    \    assert(candidate((11)) == (true));\n    assert(candidate((17)) == (true));\n\
    \    assert(candidate((85)) == (false));\n    assert(candidate((77)) == (false));\n\
    \    assert(candidate((255379)) == (false));\n}\n"
  stdout: ''
  stderr: "tmpgb919fi6: /tmp/tmpgb919fi6.cpp:48: int main(): Assertion `candidate((77))\
    \ == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n    if (n == 1) return false;\n    if (n ==\
    \ 2) return true;\n    if (n % 2 == 0) return false;\n    if (n % 3 == 0) return\
    \ false;\n    long i = 5;\n    while (i <= sqrt(n)) {\n        if (n % i == 0)\
    \ return false;\n        i += 6;\n    }\n    return true;\n}\nint main() {\n \
    \   auto candidate = is_prime;\n    assert(candidate((6)) == (false));\n    assert(candidate((101))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((13441))\
    \ == (true));\n    assert(candidate((61)) == (true));\n    assert(candidate((4))\
    \ == (false));\n    assert(candidate((1)) == (false));\n    assert(candidate((5))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((17))\
    \ == (true));\n    assert(candidate((85)) == (false));\n    assert(candidate((77))\
    \ == (false));\n    assert(candidate((255379)) == (false));\n}\n"
  stdout: ''
  stderr: "tmptbt_1tup: /tmp/tmptbt_1tup.cpp:43: int main(): Assertion `candidate((77))\
    \ == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n    if (n == 1)\n        return false;\n  \
    \  if (n == 2)\n        return true;\n    if (n % 2 == 0)\n        return false;\n\
    \    for (int i = 3; i * i <= n; i += 2)\n        if (n % i == 0)\n          \
    \  return false;\n    return true;\n}\nint main() {\n    auto candidate = is_prime;\n\
    \    assert(candidate((6)) == (false));\n    assert(candidate((101)) == (true));\n\
    \    assert(candidate((11)) == (true));\n    assert(candidate((13441)) == (true));\n\
    \    assert(candidate((61)) == (true));\n    assert(candidate((4)) == (false));\n\
    \    assert(candidate((1)) == (false));\n    assert(candidate((5)) == (true));\n\
    \    assert(candidate((11)) == (true));\n    assert(candidate((17)) == (true));\n\
    \    assert(candidate((85)) == (false));\n    assert(candidate((77)) == (false));\n\
    \    assert(candidate((255379)) == (false));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n    if (n == 1)\n        return false;\n  \
    \  if (n == 2)\n        return true;\n    if (n % 2 == 0)\n        return false;\n\
    \    long sqr = sqrt(n);\n    for (long i = 3; i <= sqr; i += 2) {\n        if\
    \ (n % i == 0)\n            return false;\n    }\n    return true;\n}\nint main()\
    \ {\n    auto candidate = is_prime;\n    assert(candidate((6)) == (false));\n\
    \    assert(candidate((101)) == (true));\n    assert(candidate((11)) == (true));\n\
    \    assert(candidate((13441)) == (true));\n    assert(candidate((61)) == (true));\n\
    \    assert(candidate((4)) == (false));\n    assert(candidate((1)) == (false));\n\
    \    assert(candidate((5)) == (true));\n    assert(candidate((11)) == (true));\n\
    \    assert(candidate((17)) == (true));\n    assert(candidate((85)) == (false));\n\
    \    assert(candidate((77)) == (false));\n    assert(candidate((255379)) == (false));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n    if (n <= 1) return false;\n    if (n ==\
    \ 2) return true;\n    if (n % 2 == 0) return false;\n    for (int i = 3; i *\
    \ i <= n; i += 2) {\n        if (n % i == 0) return false;\n    }\n    return\
    \ true;\n}\nint main() {\n    auto candidate = is_prime;\n    assert(candidate((6))\
    \ == (false));\n    assert(candidate((101)) == (true));\n    assert(candidate((11))\
    \ == (true));\n    assert(candidate((13441)) == (true));\n    assert(candidate((61))\
    \ == (true));\n    assert(candidate((4)) == (false));\n    assert(candidate((1))\
    \ == (false));\n    assert(candidate((5)) == (true));\n    assert(candidate((11))\
    \ == (true));\n    assert(candidate((17)) == (true));\n    assert(candidate((85))\
    \ == (false));\n    assert(candidate((77)) == (false));\n    assert(candidate((255379))\
    \ == (false));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n    if (n == 1)\n        return false;\n  \
    \  if (n == 2)\n        return true;\n    if (n % 2 == 0)\n        return false;\n\
    \    for (int i = 3; i * i <= n; i += 2)\n        if (n % i == 0)\n          \
    \  return false;\n    return true;\n}\nint main() {\n    auto candidate = is_prime;\n\
    \    assert(candidate((6)) == (false));\n    assert(candidate((101)) == (true));\n\
    \    assert(candidate((11)) == (true));\n    assert(candidate((13441)) == (true));\n\
    \    assert(candidate((61)) == (true));\n    assert(candidate((4)) == (false));\n\
    \    assert(candidate((1)) == (false));\n    assert(candidate((5)) == (true));\n\
    \    assert(candidate((11)) == (true));\n    assert(candidate((17)) == (true));\n\
    \    assert(candidate((85)) == (false));\n    assert(candidate((77)) == (false));\n\
    \    assert(candidate((255379)) == (false));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n    if (n == 1)\n        return false;\n  \
    \  if (n == 2)\n        return true;\n    if (n % 2 == 0)\n        return false;\n\
    \    for (int i = 3; i * i <= n; i += 2)\n        if (n % i == 0)\n          \
    \  return false;\n    return true;\n}\nint main() {\n    auto candidate = is_prime;\n\
    \    assert(candidate((6)) == (false));\n    assert(candidate((101)) == (true));\n\
    \    assert(candidate((11)) == (true));\n    assert(candidate((13441)) == (true));\n\
    \    assert(candidate((61)) == (true));\n    assert(candidate((4)) == (false));\n\
    \    assert(candidate((1)) == (false));\n    assert(candidate((5)) == (true));\n\
    \    assert(candidate((11)) == (true));\n    assert(candidate((17)) == (true));\n\
    \    assert(candidate((85)) == (false));\n    assert(candidate((77)) == (false));\n\
    \    assert(candidate((255379)) == (false));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n    if (n == 1)\n        return false;\n  \
    \  if (n == 2)\n        return true;\n    if (n % 2 == 0)\n        return false;\n\
    \    for (int i = 3; i * i <= n; i += 2)\n        if (n % i == 0)\n          \
    \  return false;\n    return true;\n}\nint main() {\n    auto candidate = is_prime;\n\
    \    assert(candidate((6)) == (false));\n    assert(candidate((101)) == (true));\n\
    \    assert(candidate((11)) == (true));\n    assert(candidate((13441)) == (true));\n\
    \    assert(candidate((61)) == (true));\n    assert(candidate((4)) == (false));\n\
    \    assert(candidate((1)) == (false));\n    assert(candidate((5)) == (true));\n\
    \    assert(candidate((11)) == (true));\n    assert(candidate((17)) == (true));\n\
    \    assert(candidate((85)) == (false));\n    assert(candidate((77)) == (false));\n\
    \    assert(candidate((255379)) == (false));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n    if (n <= 1) return false;\n    if (n ==\
    \ 2) return true;\n    if (n % 2 == 0) return false;\n    for (int i = 3; i <=\
    \ sqrt(n); i += 2) {\n        if (n % i == 0) return false;\n    }\n    return\
    \ true;\n}\nint main() {\n    auto candidate = is_prime;\n    assert(candidate((6))\
    \ == (false));\n    assert(candidate((101)) == (true));\n    assert(candidate((11))\
    \ == (true));\n    assert(candidate((13441)) == (true));\n    assert(candidate((61))\
    \ == (true));\n    assert(candidate((4)) == (false));\n    assert(candidate((1))\
    \ == (false));\n    assert(candidate((5)) == (true));\n    assert(candidate((11))\
    \ == (true));\n    assert(candidate((17)) == (true));\n    assert(candidate((85))\
    \ == (false));\n    assert(candidate((77)) == (false));\n    assert(candidate((255379))\
    \ == (false));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n    if (n <= 1)\n        return false;\n  \
    \  if (n == 2)\n        return true;\n    if (n % 2 == 0)\n        return false;\n\
    \    for (int i = 3; i <= n / i; i += 2)\n        if (n % i == 0)\n          \
    \  return false;\n    return true;\n}\nint main() {\n    auto candidate = is_prime;\n\
    \    assert(candidate((6)) == (false));\n    assert(candidate((101)) == (true));\n\
    \    assert(candidate((11)) == (true));\n    assert(candidate((13441)) == (true));\n\
    \    assert(candidate((61)) == (true));\n    assert(candidate((4)) == (false));\n\
    \    assert(candidate((1)) == (false));\n    assert(candidate((5)) == (true));\n\
    \    assert(candidate((11)) == (true));\n    assert(candidate((17)) == (true));\n\
    \    assert(candidate((85)) == (false));\n    assert(candidate((77)) == (false));\n\
    \    assert(candidate((255379)) == (false));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n    if (n <= 1) return false;\n    if (n ==\
    \ 2) return true;\n    if (n % 2 == 0) return false;\n    for (int i = 3; i <=\
    \ sqrt(n); i += 2) {\n        if (n % i == 0) return false;\n    }\n    return\
    \ true;\n}\nint main() {\n    auto candidate = is_prime;\n    assert(candidate((6))\
    \ == (false));\n    assert(candidate((101)) == (true));\n    assert(candidate((11))\
    \ == (true));\n    assert(candidate((13441)) == (true));\n    assert(candidate((61))\
    \ == (true));\n    assert(candidate((4)) == (false));\n    assert(candidate((1))\
    \ == (false));\n    assert(candidate((5)) == (true));\n    assert(candidate((11))\
    \ == (true));\n    assert(candidate((17)) == (true));\n    assert(candidate((85))\
    \ == (false));\n    assert(candidate((77)) == (false));\n    assert(candidate((255379))\
    \ == (false));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n    if (n == 2) return true;\n    if (n % 2\
    \ == 0) return false;\n    if (n < 3) return true;\n    if (n % 3 == 0) return\
    \ false;\n    if (n < 9) return true;\n    if (n % 9 == 0) return false;\n   \
    \ if (n < 27) return true;\n    if (n % 27 == 0) return false;\n    if (n < 53)\
    \ return true;\n    if (n % 53 == 0) return false;\n    if (n < 1025) return true;\n\
    \    if (n % 1025 == 0) return false;\n    if (n < 20389) return true;\n    if\
    \ (n % 20389 == 0) return false;\n    if (n < 418131) return true;\n    if (n\
    \ % 418131 == 0) return false;\n    if (n < 7341025) return true;\n    if (n %\
    \ 7341025 == 0) return false;\n    if (n < 137438951) return true;\n    if (n\
    \ % 137438951 == 0) return false;\n    if (n < 174976971) return true;\n    if\
    \ (n % 174976971 == 0) return false;\n    if (n < 2484103951) return true;\n \
    \   if (n % 2484103951 == 0) return false;\n    if (n < 3474749331) return true;\n\
    \    if (n % 3474749331 == 0) return false;\n    if (n < 63474749331) return true;\n\
    \    if (n % 63474749331 == 0) return false;\n    if (n < 937496971) return true;\n\
    \    if (n % 937496971 == 0) return false;\n    if (n < 1837496971) return true;\n\
    \    if (n % 1837496971 == 0) return false;\n    if (n < 3537496971) return true;\n\
    \    if (n % 3537496971 == 0) return false;\n    if (n < 5437496971) return true;\n\
    \    if (n % 5437496971 == 0) return false;\n    if (n < 1037496971) return true;\n\
    \    if (n % 1037496971 == 0) return false;\n    if (n < 2037496971) return true;\n\
    \    if (n % 2037496971 == 0) return false;\n    if (n < 4037496971) return true;\n\
    \    if (n % 4037496971 == 0) return false;\n    if (n < 5037496971) return true;\n\
    \    if (n % 5037496971 == 0) return false;\n    if (n < 6037496971) return true;\n\
    \    if (n % 6037496971 == 0) return false;\n    if (n < 7037496971) return true;\n\
    \    if (n % 7037496971 == 0) return false;\n    if (n < 8037496971) return true;\n\
    \    if (n % 8037496971 == 0) return false;\n    if (n < 903749697\n}\nint main()\
    \ {\n    auto candidate = is_prime;\n    assert(candidate((6)) == (false));\n\
    \    assert(candidate((101)) == (true));\n    assert(candidate((11)) == (true));\n\
    \    assert(candidate((13441)) == (true));\n    assert(candidate((61)) == (true));\n\
    \    assert(candidate((4)) == (false));\n    assert(candidate((1)) == (false));\n\
    \    assert(candidate((5)) == (true));\n    assert(candidate((11)) == (true));\n\
    \    assert(candidate((17)) == (true));\n    assert(candidate((85)) == (false));\n\
    \    assert(candidate((77)) == (false));\n    assert(candidate((255379)) == (false));\n\
    }\n"
  stdout: ''
  stderr: "/tmp/tmprqchjw9l.cpp: In function \u2018bool is_prime(long int)\u2019:\n\
    /tmp/tmprqchjw9l.cpp:69:22: error: expected \u2018)\u2019 before \u2018}\u2019\
    \ token\n   69 |     if (n < 903749697\n      |        ~             ^\n     \
    \ |                      )\n   70 | }\n      | ~                     \n/tmp/tmprqchjw9l.cpp:70:1:\
    \ error: expected primary-expression before \u2018}\u2019 token\n   70 | }\n \
    \     | ^\n/tmp/tmprqchjw9l.cpp:70:1: warning: control reaches end of non-void\
    \ function [-Wreturn-type]\n   70 | }\n      | ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n    if (n == 1) return false;\n    if (n ==\
    \ 2) return true;\n    if (n % 2 == 0) return false;\n    if (n % 3 == 0) return\
    \ false;\n    int i = 5;\n    while (i <= sqrt(n)) {\n        if (n % i == 0)\
    \ return false;\n        i += 6;\n    }\n    return true;\n}\nint main() {\n \
    \   auto candidate = is_prime;\n    assert(candidate((6)) == (false));\n    assert(candidate((101))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((13441))\
    \ == (true));\n    assert(candidate((61)) == (true));\n    assert(candidate((4))\
    \ == (false));\n    assert(candidate((1)) == (false));\n    assert(candidate((5))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((17))\
    \ == (true));\n    assert(candidate((85)) == (false));\n    assert(candidate((77))\
    \ == (false));\n    assert(candidate((255379)) == (false));\n}\n"
  stdout: ''
  stderr: "tmpqouc051p: /tmp/tmpqouc051p.cpp:43: int main(): Assertion `candidate((77))\
    \ == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n    if (n < 2) return false;\n    if (n ==\
    \ 2) return true;\n    if (n % 2 == 0) return false;\n    if (n % 3 == 0) return\
    \ false;\n    long i = 5;\n    while (i <= n / 3) {\n        if (n % i == 0) return\
    \ false;\n        i += 6;\n    }\n    return true;\n}\nint main() {\n    auto\
    \ candidate = is_prime;\n    assert(candidate((6)) == (false));\n    assert(candidate((101))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((13441))\
    \ == (true));\n    assert(candidate((61)) == (true));\n    assert(candidate((4))\
    \ == (false));\n    assert(candidate((1)) == (false));\n    assert(candidate((5))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((17))\
    \ == (true));\n    assert(candidate((85)) == (false));\n    assert(candidate((77))\
    \ == (false));\n    assert(candidate((255379)) == (false));\n}\n"
  stdout: ''
  stderr: "tmpbt7vxmho: /tmp/tmpbt7vxmho.cpp:44: int main(): Assertion `candidate((255379))\
    \ == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n    if (n == 1)\n        return false;\n  \
    \  if (n == 2)\n        return true;\n    if (n % 2 == 0)\n        return false;\n\
    \    for (int i = 3; i * i <= n; i += 2)\n        if (n % i == 0)\n          \
    \  return false;\n    return true;\n}\nint main() {\n    auto candidate = is_prime;\n\
    \    assert(candidate((6)) == (false));\n    assert(candidate((101)) == (true));\n\
    \    assert(candidate((11)) == (true));\n    assert(candidate((13441)) == (true));\n\
    \    assert(candidate((61)) == (true));\n    assert(candidate((4)) == (false));\n\
    \    assert(candidate((1)) == (false));\n    assert(candidate((5)) == (true));\n\
    \    assert(candidate((11)) == (true));\n    assert(candidate((17)) == (true));\n\
    \    assert(candidate((85)) == (false));\n    assert(candidate((77)) == (false));\n\
    \    assert(candidate((255379)) == (false));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n    if (n == 1)\n        return false;\n  \
    \  if (n == 2)\n        return true;\n    if (n % 2 == 0)\n        return false;\n\
    \    for (int i = 3; i <= sqrt(n); i += 2)\n        if (n % i == 0)\n        \
    \    return false;\n    return true;\n}\nint main() {\n    auto candidate = is_prime;\n\
    \    assert(candidate((6)) == (false));\n    assert(candidate((101)) == (true));\n\
    \    assert(candidate((11)) == (true));\n    assert(candidate((13441)) == (true));\n\
    \    assert(candidate((61)) == (true));\n    assert(candidate((4)) == (false));\n\
    \    assert(candidate((1)) == (false));\n    assert(candidate((5)) == (true));\n\
    \    assert(candidate((11)) == (true));\n    assert(candidate((17)) == (true));\n\
    \    assert(candidate((85)) == (false));\n    assert(candidate((77)) == (false));\n\
    \    assert(candidate((255379)) == (false));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n    if (n == 2) return true;\n    if (n % 2\
    \ == 0) return false;\n    for (int i = 3; i * i <= n; i += 2) {\n        if (n\
    \ % i == 0) return false;\n    }\n    return true;\n}\nint main() {\n    auto\
    \ candidate = is_prime;\n    assert(candidate((6)) == (false));\n    assert(candidate((101))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((13441))\
    \ == (true));\n    assert(candidate((61)) == (true));\n    assert(candidate((4))\
    \ == (false));\n    assert(candidate((1)) == (false));\n    assert(candidate((5))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((17))\
    \ == (true));\n    assert(candidate((85)) == (false));\n    assert(candidate((77))\
    \ == (false));\n    assert(candidate((255379)) == (false));\n}\n"
  stdout: ''
  stderr: "tmprw9tvsbn: /tmp/tmprw9tvsbn.cpp:34: int main(): Assertion `candidate((1))\
    \ == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n    if (n == 2) return true;\n    if (n % 2\
    \ == 0) return false;\n    if (n < 3) return true;\n    if (n % 3 == 0) return\
    \ false;\n    if (n < 5) return true;\n    if (n % 5 == 0) return false;\n   \
    \ if (n < 7) return true;\n    if (n % 7 == 0) return false;\n    if (n < 11)\
    \ return true;\n    if (n % 11 == 0) return false;\n    if (n < 13) return true;\n\
    \    if (n % 13 == 0) return false;\n    if (n < 17) return true;\n    if (n %\
    \ 17 == 0) return false;\n    if (n < 19) return true;\n    if (n % 19 == 0) return\
    \ false;\n    if (n < 23) return true;\n    if (n % 23 == 0) return false;\n \
    \   if (n < 29) return true;\n    if (n % 29 == 0) return false;\n    if (n <\
    \ 31) return true;\n    if (n % 31 == 0) return false;\n    if (n < 37) return\
    \ true;\n    if (n % 37 == 0) return false;\n    if (n < 43) return true;\n  \
    \  if (n % 43 == 0) return false;\n    if (n < 47) return true;\n    if (n % 47\
    \ == 0) return false;\n    if (n < 53) return true;\n    if (n % 53 == 0) return\
    \ false;\n    if (n < 59) return true;\n    if (n % 59 == 0) return false;\n \
    \   if (n < 61) return true;\n    if (n % 61 == 0) return false;\n    if (n <\
    \ 67) return true;\n    if (n % 67 == 0) return false;\n    if (n < 73) return\
    \ true;\n    if (n % 73 == 0) return false;\n    if (n < 79) return true;\n  \
    \  if (n % 79 == 0) return false;\n    if (n < 83) return true;\n    if (n % 83\
    \ == 0) return false;\n    if (n < 89) return true;\n    if (n % 89 == 0) return\
    \ false;\n    if (n < 97) return true;\n    if (n % 97 == 0) return false;\n \
    \   if (n < 101) return true;\n    if (n % 101 == 0) return false;\n    if (n\
    \ < 103) return true;\n    if (n % 103 == 0) return false;\n    if (n < 109) return\
    \ true;\n    if (n % 109 == 0) return false;\n    if (n < 113) return true;\n\
    \    if (n % 113 == 0) return false;\n    if (n < 121) return true;\n    if (n\
    \ % 121 == 0) return false;\n    if (n < 127) return true;\n    if (n % 127 ==\
    \ 0) return false;\n    if (n < 131) return true;\n    if (n % 131 == 0) return\
    \ false;\n    if (n < 137) return true;\n    if (n % 137 == 0) return false;\n\
    \    if (n < 141) return true;\n    if (n % 141 == 0) return false;\n    if (n\
    \ < 147) return true;\n    if (n % 147 == 0) return false;\n    if (n < 151) return\
    \ true;\n    if (n % 151 == 0) return false;\n    if (n < 157) return true;\n\
    \    if (n % 157 == 0) return false;\n    if (n < 163) return true;\n    if (n\
    \ % 163 == 0) return false;\n    if (\n}\nint main() {\n    auto candidate = is_prime;\n\
    \    assert(candidate((6)) == (false));\n    assert(candidate((101)) == (true));\n\
    \    assert(candidate((11)) == (true));\n    assert(candidate((13441)) == (true));\n\
    \    assert(candidate((61)) == (true));\n    assert(candidate((4)) == (false));\n\
    \    assert(candidate((1)) == (false));\n    assert(candidate((5)) == (true));\n\
    \    assert(candidate((11)) == (true));\n    assert(candidate((17)) == (true));\n\
    \    assert(candidate((85)) == (false));\n    assert(candidate((77)) == (false));\n\
    \    assert(candidate((255379)) == (false));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp23tkf0ip.cpp: In function \u2018bool is_prime(long int)\u2019:\n\
    /tmp/tmp23tkf0ip.cpp:92:1: error: expected primary-expression before \u2018}\u2019\
    \ token\n   92 | }\n      | ^\n/tmp/tmp23tkf0ip.cpp:91:9: error: expected \u2018\
    )\u2019 before \u2018}\u2019 token\n   91 |     if (\n      |        ~^\n    \
    \  |         )\n   92 | }\n      | ~        \n/tmp/tmp23tkf0ip.cpp:92:1: error:\
    \ expected primary-expression before \u2018}\u2019 token\n   92 | }\n      | ^\n\
    /tmp/tmp23tkf0ip.cpp:92:1: warning: control reaches end of non-void function [-Wreturn-type]\n\
    \   92 | }\n      | ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n    if (n <= 1) return false;\n    if (n ==\
    \ 2) return true;\n    if (n % 2 == 0) return false;\n    if (n % 3 == 0) return\
    \ false;\n    int i = 5;\n    while (i <= sqrt(n)) {\n        if (n % i == 0)\
    \ return false;\n        i += 6;\n    }\n    return true;\n}\nint main() {\n \
    \   auto candidate = is_prime;\n    assert(candidate((6)) == (false));\n    assert(candidate((101))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((13441))\
    \ == (true));\n    assert(candidate((61)) == (true));\n    assert(candidate((4))\
    \ == (false));\n    assert(candidate((1)) == (false));\n    assert(candidate((5))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((17))\
    \ == (true));\n    assert(candidate((85)) == (false));\n    assert(candidate((77))\
    \ == (false));\n    assert(candidate((255379)) == (false));\n}\n"
  stdout: ''
  stderr: "tmptxwu6mmm: /tmp/tmptxwu6mmm.cpp:43: int main(): Assertion `candidate((77))\
    \ == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n    if (n == 1)\n        return false;\n  \
    \  if (n == 2)\n        return true;\n    if (n % 2 == 0)\n        return false;\n\
    \    if (n % 3 == 0)\n        return false;\n    long i = 5;\n    while (i < n)\
    \ {\n        if (n % i == 0)\n            return false;\n        i += 6;\n   \
    \ }\n    return true;\n}\nint main() {\n    auto candidate = is_prime;\n    assert(candidate((6))\
    \ == (false));\n    assert(candidate((101)) == (true));\n    assert(candidate((11))\
    \ == (true));\n    assert(candidate((13441)) == (true));\n    assert(candidate((61))\
    \ == (true));\n    assert(candidate((4)) == (false));\n    assert(candidate((1))\
    \ == (false));\n    assert(candidate((5)) == (true));\n    assert(candidate((11))\
    \ == (true));\n    assert(candidate((17)) == (true));\n    assert(candidate((85))\
    \ == (false));\n    assert(candidate((77)) == (false));\n    assert(candidate((255379))\
    \ == (false));\n}\n"
  stdout: ''
  stderr: "tmphgq_q8ny: /tmp/tmphgq_q8ny.cpp:49: int main(): Assertion `candidate((255379))\
    \ == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n    if (n == 1)\n        return false;\n  \
    \  if (n == 2)\n        return true;\n    if (n % 2 == 0)\n        return false;\n\
    \    for (int i = 3; i * i <= n; i += 2)\n        if (n % i == 0)\n          \
    \  return false;\n    return true;\n}\nint main() {\n    auto candidate = is_prime;\n\
    \    assert(candidate((6)) == (false));\n    assert(candidate((101)) == (true));\n\
    \    assert(candidate((11)) == (true));\n    assert(candidate((13441)) == (true));\n\
    \    assert(candidate((61)) == (true));\n    assert(candidate((4)) == (false));\n\
    \    assert(candidate((1)) == (false));\n    assert(candidate((5)) == (true));\n\
    \    assert(candidate((11)) == (true));\n    assert(candidate((17)) == (true));\n\
    \    assert(candidate((85)) == (false));\n    assert(candidate((77)) == (false));\n\
    \    assert(candidate((255379)) == (false));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n    if (n == 1)\n        return false;\n  \
    \  if (n == 2)\n        return true;\n    if (n % 2 == 0)\n        return false;\n\
    \    for (int i = 3; i * i <= n; i += 2)\n        if (n % i == 0)\n          \
    \  return false;\n    return true;\n}\nint main() {\n    auto candidate = is_prime;\n\
    \    assert(candidate((6)) == (false));\n    assert(candidate((101)) == (true));\n\
    \    assert(candidate((11)) == (true));\n    assert(candidate((13441)) == (true));\n\
    \    assert(candidate((61)) == (true));\n    assert(candidate((4)) == (false));\n\
    \    assert(candidate((1)) == (false));\n    assert(candidate((5)) == (true));\n\
    \    assert(candidate((11)) == (true));\n    assert(candidate((17)) == (true));\n\
    \    assert(candidate((85)) == (false));\n    assert(candidate((77)) == (false));\n\
    \    assert(candidate((255379)) == (false));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n    if (n <= 1) return false;\n    if (n ==\
    \ 2) return true;\n    if (n % 2 == 0) return false;\n    if (n % 3 == 0) return\
    \ false;\n    if (n % 5 == 0) return false;\n    long i = 5;\n    while (i * i\
    \ <= n) {\n        if (n % i == 0) return false;\n        i += 6;\n    }\n   \
    \ return true;\n}\nint main() {\n    auto candidate = is_prime;\n    assert(candidate((6))\
    \ == (false));\n    assert(candidate((101)) == (true));\n    assert(candidate((11))\
    \ == (true));\n    assert(candidate((13441)) == (true));\n    assert(candidate((61))\
    \ == (true));\n    assert(candidate((4)) == (false));\n    assert(candidate((1))\
    \ == (false));\n    assert(candidate((5)) == (true));\n    assert(candidate((11))\
    \ == (true));\n    assert(candidate((17)) == (true));\n    assert(candidate((85))\
    \ == (false));\n    assert(candidate((77)) == (false));\n    assert(candidate((255379))\
    \ == (false));\n}\n"
  stdout: ''
  stderr: "tmpzv6i8rz3: /tmp/tmpzv6i8rz3.cpp:40: int main(): Assertion `candidate((5))\
    \ == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n    if (n <= 1) return false;\n    if (n ==\
    \ 2) return true;\n    if (n % 2 == 0) return false;\n    if (n % 3 == 0) return\
    \ false;\n    long i = 5;\n    while (i <= sqrt(n)) {\n        if (n % i == 0)\
    \ return false;\n        i += 6;\n    }\n    return true;\n}\nint main() {\n \
    \   auto candidate = is_prime;\n    assert(candidate((6)) == (false));\n    assert(candidate((101))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((13441))\
    \ == (true));\n    assert(candidate((61)) == (true));\n    assert(candidate((4))\
    \ == (false));\n    assert(candidate((1)) == (false));\n    assert(candidate((5))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((17))\
    \ == (true));\n    assert(candidate((85)) == (false));\n    assert(candidate((77))\
    \ == (false));\n    assert(candidate((255379)) == (false));\n}\n"
  stdout: ''
  stderr: "tmpqk6kaqjo: /tmp/tmpqk6kaqjo.cpp:43: int main(): Assertion `candidate((77))\
    \ == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n    if (n == 1) return false;\n    if (n ==\
    \ 2) return true;\n    if (n % 2 == 0) return false;\n    if (n % 3 == 0) return\
    \ false;\n    if (n % 5 == 0) return false;\n    if (n % 7 == 0) return false;\n\
    \    if (n % 11 == 0) return false;\n    if (n % 13 == 0) return false;\n    if\
    \ (n % 17 == 0) return false;\n    if (n % 19 == 0) return false;\n    if (n %\
    \ 23 == 0) return false;\n    if (n % 29 == 0) return false;\n    if (n % 31 ==\
    \ 0) return false;\n    if (n % 37 == 0) return false;\n    if (n % 41) == 0)\
    \ return false;\n    if (n % 43) == 0) return false;\n    if (n % 47) == 0) return\
    \ false;\n    if (n % 53) == 0) return false;\n    if (n % 59) == 0) return false;\n\
    \    if (n % 61) == 0) return false;\n    if (n % 67) == 0) return false;\n  \
    \  if (n % 71) == 0) return false;\n    if (n % 73) == 0) return false;\n    if\
    \ (n % 79) == 0) return false;\n    if (n % 83) == 0) return false;\n    if (n\
    \ % 89) == 0) return false;\n    if (n % 97) == 0) return false;\n    if (n %\
    \ 103) == 0) return false;\n    if (n % 109) == 0) return false;\n    if (n %\
    \ 113) == 0) return false;\n    if (n % 127) == 0) return false;\n    if (n %\
    \ 131) == 0) return false;\n    if (n % 139) == 0) return false;\n    if (n %\
    \ 147) == 0) return false;\n    if (n % 151) == 0) return false;\n    if (n %\
    \ 157) == 0) return false;\n    if (n % 163) == 0) return false;\n    if (n %\
    \ 167) == 0) return false;\n    if (n % 173) == 0) return false;\n    if (n %\
    \ 179) == 0) return false;\n    if (n % 181) == 0) return false;\n    if (n %\
    \ 191) == 0) return false;\n    if (n % 197) == 0) return false;\n    if (n %\
    \ 203) == 0) return false;\n    if (n % 209) == 0) return false;\n    if (n %\
    \ 215) == 0) return false;\n    if (n % 217) == 0) return false;\n    if (n %\
    \ 223) == 0) return false;\n    if (n % 229) == 0) return false;\n    if (n %\
    \ 233) == 0) return false;\n    if (n % 239) == 0) return false;\n    if (n %\
    \ 241) == 0) return false;\n    if (n % 247) == 0) return false;\n    if (n %\
    \ 253) == 0) return false;\n    if (n % 259) == 0) return false;\n    if (n %\
    \ 261) == 0) return false;\n    if (n % 263) == 0) return false;\n    if (n %\
    \ 269) == 0) return false;\n    if (n % 271) == 0) return false;\n    if (n %\
    \ 277) == 0) return false;\n    if (n % 283) == 0) return false;\n    if (n %\
    \ 289) == 0) return false;\n    if (n % 291) == 0) return false;\n    if (n %\
    \ 297) == 0) return false;\n}\nint main() {\n    auto candidate = is_prime;\n\
    \    assert(candidate((6)) == (false));\n    assert(candidate((101)) == (true));\n\
    \    assert(candidate((11)) == (true));\n    assert(candidate((13441)) == (true));\n\
    \    assert(candidate((61)) == (true));\n    assert(candidate((4)) == (false));\n\
    \    assert(candidate((1)) == (false));\n    assert(candidate((5)) == (true));\n\
    \    assert(candidate((11)) == (true));\n    assert(candidate((17)) == (true));\n\
    \    assert(candidate((85)) == (false));\n    assert(candidate((77)) == (false));\n\
    \    assert(candidate((255379)) == (false));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpinqvmpns.cpp: In function \u2018bool is_prime(long int)\u2019:\n\
    /tmp/tmpinqvmpns.cpp:33:17: error: expected primary-expression before \u2018==\u2019\
    \ token\n   33 |     if (n % 41) == 0) return false;\n      |                \
    \ ^~\n/tmp/tmpinqvmpns.cpp:34:17: error: expected primary-expression before \u2018\
    ==\u2019 token\n   34 |     if (n % 43) == 0) return false;\n      |         \
    \        ^~\n/tmp/tmpinqvmpns.cpp:35:17: error: expected primary-expression before\
    \ \u2018==\u2019 token\n   35 |     if (n % 47) == 0) return false;\n      | \
    \                ^~\n/tmp/tmpinqvmpns.cpp:36:17: error: expected primary-expression\
    \ before \u2018==\u2019 token\n   36 |     if (n % 53) == 0) return false;\n \
    \     |                 ^~\n/tmp/tmpinqvmpns.cpp:37:17: error: expected primary-expression\
    \ before \u2018==\u2019 token\n   37 |     if (n % 59) == 0) return false;\n \
    \     |                 ^~\n/tmp/tmpinqvmpns.cpp:38:17: error: expected primary-expression\
    \ before \u2018==\u2019 token\n   38 |     if (n % 61) == 0) return false;\n \
    \     |                 ^~\n/tmp/tmpinqvmpns.cpp:39:17: error: expected primary-expression\
    \ before \u2018==\u2019 token\n   39 |     if (n % 67) == 0) return false;\n \
    \     |                 ^~\n/tmp/tmpinqvmpns.cpp:40:17: error: expected primary-expression\
    \ before \u2018==\u2019 token\n   40 |     if (n % 71) == 0) return false;\n \
    \     |                 ^~\n/tmp/tmpinqvmpns.cpp:41:17: error: expected primary-expression\
    \ before \u2018==\u2019 token\n   41 |     if (n % 73) == 0) return false;\n \
    \     |                 ^~\n/tmp/tmpinqvmpns.cpp:42:17: error: expected primary-expression\
    \ before \u2018==\u2019 token\n   42 |     if (n % 79) == 0) return false;\n \
    \     |                 ^~\n/tmp/tmpinqvmpns.cpp:43:17: error: expected primary-expression\
    \ before \u2018==\u2019 token\n   43 |     if (n % 83) == 0) return false;\n \
    \     |                 ^~\n/tmp/tmpinqvmpns.cpp:44:17: error: expected primary-expression\
    \ before \u2018==\u2019 token\n   44 |     if (n % 89) == 0) return false;\n \
    \     |                 ^~\n/tmp/tmpinqvmpns.cpp:45:17: error: expected primary-expression\
    \ before \u2018==\u2019 token\n   45 |     if (n % 97) == 0) return false;\n \
    \     |                 ^~\n/tmp/tmpinqvmpns.cpp:46:18: error: expected primary-expression\
    \ before \u2018==\u2019 token\n   46 |     if (n % 103) == 0) return false;\n\
    \      |                  ^~\n/tmp/tmpinqvmpns.cpp:47:18: error: expected primary-expression\
    \ before \u2018==\u2019 token\n   47 |     if (n % 109) == 0) return false;\n\
    \      |                  ^~\n/tmp/tmpinqvmpns.cpp:48:18: error: expected primary-expression\
    \ before \u2018==\u2019 token\n   48 |     if (n % 113) == 0) return false;\n\
    \      |                  ^~\n/tmp/tmpinqvmpns.cpp:49:18: error: expected primary-expression\
    \ before \u2018==\u2019 token\n   49 |     if (n % 127) == 0) return false;\n\
    \      |                  ^~\n/tmp/tmpinqvmpns.cpp:50:18: error: expected primary-expression\
    \ before \u2018==\u2019 token\n   50 |     if (n % 131) == 0) return false;\n\
    \      |                  ^~\n/tmp/tmpinqvmpns.cpp:51:18: error: expected primary-expression\
    \ before \u2018==\u2019 token\n   51 |     if (n % 139) == 0) return false;\n\
    \      |                  ^~\n/tmp/tmpinqvmpns.cpp:52:18: error: expected primary-expression\
    \ before \u2018==\u2019 token\n   52 |     if (n % 147) == 0) return false;\n\
    \      |                  ^~\n/tmp/tmpinqvmpns.cpp:53:18: error: expected primary-expression\
    \ before \u2018==\u2019 token\n   53 |     if (n % 151) == 0) return false;\n\
    \      |                  ^~\n/tmp/tmpinqvmpns.cpp:54:18: error: expected primary-expression\
    \ before \u2018==\u2019 token\n   54 |     if (n % 157) == 0) return false;\n\
    \      |                  ^~\n/tmp/tmpinqvmpns.cpp:55:18: error: expected primary-expression\
    \ before \u2018==\u2019 token\n   55 |     if (n % 163) == 0) return false;\n\
    \      |                  ^~\n/tmp/tmpinqvmpns.cpp:56:18: error: expected primary-expression\
    \ before \u2018==\u2019 token\n   56 |     if (n % 167) == 0) return false;\n\
    \      |                  ^~\n/tmp/tmpinqvmpns.cpp:57:18: error: expected primary-expression\
    \ before \u2018==\u2019 token\n   57 |     if (n % 173) == 0) return false;\n\
    \      |                  ^~\n/tmp/tmpinqvmpns.cpp:58:18: error: expected primary-expression\
    \ before \u2018==\u2019 token\n   58 |     if (n % 179) == 0) return false;\n\
    \      |                  ^~\n/tmp/tmpinqvmpns.cpp:59:18: error: expected primary-expression\
    \ before \u2018==\u2019 token\n   59 |     if (n % 181) == 0) return false;\n\
    \      |                  ^~\n/tmp/tmpinqvmpns.cpp:60:18: error: expected primary-expression\
    \ before \u2018==\u2019 token\n   60 |     if (n % 191) == 0) return false;\n\
    \      |                  ^~\n/tmp/tmpinqvmpns.cpp:61:18: error: expected primary-expression\
    \ before \u2018==\u2019 token\n   61 |     if (n % 197) == 0) return false;\n\
    \      |                  ^~\n/tmp/tmpinqvmpns.cpp:62:18: error: expected primary-expression\
    \ before \u2018==\u2019 token\n   62 |     if (n % 203) == 0) return false;\n\
    \      |                  ^~\n/tmp/tmpinqvmpns.cpp:63:18: error: expected primary-expression\
    \ before \u2018==\u2019 token\n   63 |     if (n % 209) == 0) return false;\n\
    \      |                  ^~\n/tmp/tmpinqvmpns.cpp:64:18: error: expected primary-expression\
    \ before \u2018==\u2019 token\n   64 |     if (n % 215) == 0) return false;\n\
    \      |                  ^~\n/tmp/tmpinqvmpns.cpp:65:18: error: expected primary-expression\
    \ before \u2018==\u2019 token\n   65 |     if (n % 217) == 0) return false;\n\
    \      |                  ^~\n/tmp/tmpinqvmpns.cpp:66:18: error: expected primary-expression\
    \ before \u2018==\u2019 token\n   66 |     if (n % 223) == 0) return false;\n\
    \      |                  ^~\n/tmp/tmpinqvmpns.cpp:67:18: error: expected primary-expression\
    \ before \u2018==\u2019 token\n   67 |     if (n % 229) == 0) return false;\n\
    \      |                  ^~\n/tmp/tmpinqvmpns.cpp:68:18: error: expected primary-expression\
    \ before \u2018==\u2019 token\n   68 |     if (n % 233) == 0) return false;\n\
    \      |                  ^~\n/tmp/tmpinqvmpns.cpp:69:18: error: expected primary-expression\
    \ before \u2018==\u2019 token\n   69 |     if (n % 239) == 0) return false;\n\
    \      |                  ^~\n/tmp/tmpinqvmpns.cpp:70:18: error: expected primary-expression\
    \ before \u2018==\u2019 token\n   70 |     if (n % 241) == 0) return false;\n\
    \      |                  ^~\n/tmp/tmpinqvmpns.cpp:71:18: error: expected primary-expression\
    \ before \u2018==\u2019 token\n   71 |     if (n % 247) == 0) return false;\n\
    \      |                  ^~\n/tmp/tmpinqvmpns.cpp:72:18: error: expected primary-expression\
    \ before \u2018==\u2019 token\n   72 |     if (n % 253) == 0) return false;\n\
    \      |                  ^~\n/tmp/tmpinqvmpns.cpp:73:18: error: expected primary-expression\
    \ before \u2018==\u2019 token\n   73 |     if (n % 259) == 0) return false;\n\
    \      |                  ^~\n/tmp/tmpinqvmpns.cpp:74:18: error: expected primary-expression\
    \ before \u2018==\u2019 token\n   74 |     if (n % 261) == 0) return false;\n\
    \      |                  ^~\n/tmp/tmpinqvmpns.cpp:75:18: error: expected primary-expression\
    \ before \u2018==\u2019 token\n   75 |     if (n % 263) == 0) return false;\n\
    \      |                  ^~\n/tmp/tmpinqvmpns.cpp:76:18: error: expected primary-expression\
    \ before \u2018==\u2019 token\n   76 |     if (n % 269) == 0) return false;\n\
    \      |                  ^~\n/tmp/tmpinqvmpns.cpp:77:18: error: expected primary-expression\
    \ before \u2018==\u2019 token\n   77 |     if (n % 271) == 0) return false;\n\
    \      |                  ^~\n/tmp/tmpinqvmpns.cpp:78:18: error: expected primary-expression\
    \ before \u2018==\u2019 token\n   78 |     if (n % 277) == 0) return false;\n\
    \      |                  ^~\n/tmp/tmpinqvmpns.cpp:79:18: error: expected primary-expression\
    \ before \u2018==\u2019 token\n   79 |     if (n % 283) == 0) return false;\n\
    \      |                  ^~\n/tmp/tmpinqvmpns.cpp:80:18: error: expected primary-expression\
    \ before \u2018==\u2019 token\n   80 |     if (n % 289) == 0) return false;\n\
    \      |                  ^~\n/tmp/tmpinqvmpns.cpp:81:18: error: expected primary-expression\
    \ before \u2018==\u2019 token\n   81 |     if (n % 291) == 0) return false;\n\
    \      |                  ^~\n/tmp/tmpinqvmpns.cpp:82:18: error: expected primary-expression\
    \ before \u2018==\u2019 token\n   82 |     if (n % 297) == 0) return false;\n\
    \      |                  ^~\n/tmp/tmpinqvmpns.cpp:83:1: warning: control reaches\
    \ end of non-void function [-Wreturn-type]\n   83 | }\n      | ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n    if (n == 1)\n        return false;\n  \
    \  if (n == 2)\n        return true;\n    if (n % 2 == 0)\n        return false;\n\
    \    for (int i = 3; i <= sqrt(n); i += 2)\n        if (n % i == 0)\n        \
    \    return false;\n    return true;\n}\nint main() {\n    auto candidate = is_prime;\n\
    \    assert(candidate((6)) == (false));\n    assert(candidate((101)) == (true));\n\
    \    assert(candidate((11)) == (true));\n    assert(candidate((13441)) == (true));\n\
    \    assert(candidate((61)) == (true));\n    assert(candidate((4)) == (false));\n\
    \    assert(candidate((1)) == (false));\n    assert(candidate((5)) == (true));\n\
    \    assert(candidate((11)) == (true));\n    assert(candidate((17)) == (true));\n\
    \    assert(candidate((85)) == (false));\n    assert(candidate((77)) == (false));\n\
    \    assert(candidate((255379)) == (false));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n    if (n <= 1) return false;\n    if (n <=\
    \ 3) return true;\n    if (n % 2 == 0 || n % 3 == 0) return false;\n    long m\
    \ = (long) sqrt(n);\n    for (long i = 5; i <= m; i += 6) {\n        if (n % i\
    \ == 0 || n % (i + 2) == 0) return false;\n    }\n    return true;\n}\nint main()\
    \ {\n    auto candidate = is_prime;\n    assert(candidate((6)) == (false));\n\
    \    assert(candidate((101)) == (true));\n    assert(candidate((11)) == (true));\n\
    \    assert(candidate((13441)) == (true));\n    assert(candidate((61)) == (true));\n\
    \    assert(candidate((4)) == (false));\n    assert(candidate((1)) == (false));\n\
    \    assert(candidate((5)) == (true));\n    assert(candidate((11)) == (true));\n\
    \    assert(candidate((17)) == (true));\n    assert(candidate((85)) == (false));\n\
    \    assert(candidate((77)) == (false));\n    assert(candidate((255379)) == (false));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n    if (n == 1)\n        return false;\n  \
    \  if (n == 2)\n        return true;\n    if (n % 2 == 0)\n        return false;\n\
    \    for (int i = 3; i <= sqrt(n); i += 2)\n        if (n % i == 0)\n        \
    \    return false;\n    return true;\n}\nint main() {\n    auto candidate = is_prime;\n\
    \    assert(candidate((6)) == (false));\n    assert(candidate((101)) == (true));\n\
    \    assert(candidate((11)) == (true));\n    assert(candidate((13441)) == (true));\n\
    \    assert(candidate((61)) == (true));\n    assert(candidate((4)) == (false));\n\
    \    assert(candidate((1)) == (false));\n    assert(candidate((5)) == (true));\n\
    \    assert(candidate((11)) == (true));\n    assert(candidate((17)) == (true));\n\
    \    assert(candidate((85)) == (false));\n    assert(candidate((77)) == (false));\n\
    \    assert(candidate((255379)) == (false));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n    if (n == 1)\n        return false;\n  \
    \  if (n == 2)\n        return true;\n    if (n % 2 == 0)\n        return false;\n\
    \    if (n % 3 == 0)\n        return false;\n    long i = 5;\n    while (i <=\
    \ sqrt(n)) {\n        if (n % i == 0)\n            return false;\n        i +=\
    \ 6;\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_prime;\n\
    \    assert(candidate((6)) == (false));\n    assert(candidate((101)) == (true));\n\
    \    assert(candidate((11)) == (true));\n    assert(candidate((13441)) == (true));\n\
    \    assert(candidate((61)) == (true));\n    assert(candidate((4)) == (false));\n\
    \    assert(candidate((1)) == (false));\n    assert(candidate((5)) == (true));\n\
    \    assert(candidate((11)) == (true));\n    assert(candidate((17)) == (true));\n\
    \    assert(candidate((85)) == (false));\n    assert(candidate((77)) == (false));\n\
    \    assert(candidate((255379)) == (false));\n}\n"
  stdout: ''
  stderr: "tmpevzmg0b8: /tmp/tmpevzmg0b8.cpp:48: int main(): Assertion `candidate((77))\
    \ == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n    if (n <= 1) return false;\n    long m =\
    \ n / 2;\n    for (long i = 2; i * i <= m; i++) {\n        if (n % i == 0) return\
    \ false;\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_prime;\n\
    \    assert(candidate((6)) == (false));\n    assert(candidate((101)) == (true));\n\
    \    assert(candidate((11)) == (true));\n    assert(candidate((13441)) == (true));\n\
    \    assert(candidate((61)) == (true));\n    assert(candidate((4)) == (false));\n\
    \    assert(candidate((1)) == (false));\n    assert(candidate((5)) == (true));\n\
    \    assert(candidate((11)) == (true));\n    assert(candidate((17)) == (true));\n\
    \    assert(candidate((85)) == (false));\n    assert(candidate((77)) == (false));\n\
    \    assert(candidate((255379)) == (false));\n}\n"
  stdout: ''
  stderr: "tmpqo9uc7na: /tmp/tmpqo9uc7na.cpp:28: int main(): Assertion `candidate((6))\
    \ == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n    if (n <= 1) return false;\n    if (n ==\
    \ 2) return true;\n    if (n % 2 == 0) return false;\n    if (n % 3 == 0) return\
    \ false;\n    int i = 5;\n    while (i <= sqrt(n)) {\n        if (n % i == 0)\
    \ return false;\n        i += 6;\n    }\n    return true;\n}\nint main() {\n \
    \   auto candidate = is_prime;\n    assert(candidate((6)) == (false));\n    assert(candidate((101))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((13441))\
    \ == (true));\n    assert(candidate((61)) == (true));\n    assert(candidate((4))\
    \ == (false));\n    assert(candidate((1)) == (false));\n    assert(candidate((5))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((17))\
    \ == (true));\n    assert(candidate((85)) == (false));\n    assert(candidate((77))\
    \ == (false));\n    assert(candidate((255379)) == (false));\n}\n"
  stdout: ''
  stderr: "tmph135pr73: /tmp/tmph135pr73.cpp:43: int main(): Assertion `candidate((77))\
    \ == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n    if (n == 1) return false;\n    if (n ==\
    \ 2) return true;\n    if (n % 2 == 0) return false;\n    if (n % 3 == 0) return\
    \ false;\n    int i = 5;\n    while (i < n) {\n        if (n % i == 0) return\
    \ false;\n        i += 6;\n    }\n    return true;\n}\nint main() {\n    auto\
    \ candidate = is_prime;\n    assert(candidate((6)) == (false));\n    assert(candidate((101))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((13441))\
    \ == (true));\n    assert(candidate((61)) == (true));\n    assert(candidate((4))\
    \ == (false));\n    assert(candidate((1)) == (false));\n    assert(candidate((5))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((17))\
    \ == (true));\n    assert(candidate((85)) == (false));\n    assert(candidate((77))\
    \ == (false));\n    assert(candidate((255379)) == (false));\n}\n"
  stdout: ''
  stderr: "tmp5mz6_z9d: /tmp/tmp5mz6_z9d.cpp:44: int main(): Assertion `candidate((255379))\
    \ == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n    if (n <= 1) return false;\n    if (n ==\
    \ 2) return true;\n    if (n % 2 == 0) return false;\n    if (n % 3 == 0) return\
    \ false;\n    long i = 5;\n    while (i < n) {\n        if (n % i == 0) return\
    \ false;\n        i += 6;\n    }\n    return true;\n}\nint main() {\n    auto\
    \ candidate = is_prime;\n    assert(candidate((6)) == (false));\n    assert(candidate((101))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((13441))\
    \ == (true));\n    assert(candidate((61)) == (true));\n    assert(candidate((4))\
    \ == (false));\n    assert(candidate((1)) == (false));\n    assert(candidate((5))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((17))\
    \ == (true));\n    assert(candidate((85)) == (false));\n    assert(candidate((77))\
    \ == (false));\n    assert(candidate((255379)) == (false));\n}\n"
  stdout: ''
  stderr: "tmp8j6kd9hu: /tmp/tmp8j6kd9hu.cpp:44: int main(): Assertion `candidate((255379))\
    \ == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n    if (n <= 1) return false;\n    if (n ==\
    \ 2) return true;\n    if (n % 2 == 0) return false;\n    long sq = sqrt(n);\n\
    \    for (long i = 3; i <= sq; i += 2) {\n        if (n % i == 0) return false;\n\
    \    }\n    return true;\n}\nint main() {\n    auto candidate = is_prime;\n  \
    \  assert(candidate((6)) == (false));\n    assert(candidate((101)) == (true));\n\
    \    assert(candidate((11)) == (true));\n    assert(candidate((13441)) == (true));\n\
    \    assert(candidate((61)) == (true));\n    assert(candidate((4)) == (false));\n\
    \    assert(candidate((1)) == (false));\n    assert(candidate((5)) == (true));\n\
    \    assert(candidate((11)) == (true));\n    assert(candidate((17)) == (true));\n\
    \    assert(candidate((85)) == (false));\n    assert(candidate((77)) == (false));\n\
    \    assert(candidate((255379)) == (false));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n    if (n <= 1) return false;\n    if (n ==\
    \ 2) return true;\n    if (n % 2 == 0) return false;\n    if (n % 3 == 0) return\
    \ false;\n    if (n % 5 == 0) return false;\n    long i = 5;\n    while (i <=\
    \ sqrt(n)) {\n        if (n % i == 0) return false;\n        i += 6;\n    }\n\
    \    return true;\n}\nint main() {\n    auto candidate = is_prime;\n    assert(candidate((6))\
    \ == (false));\n    assert(candidate((101)) == (true));\n    assert(candidate((11))\
    \ == (true));\n    assert(candidate((13441)) == (true));\n    assert(candidate((61))\
    \ == (true));\n    assert(candidate((4)) == (false));\n    assert(candidate((1))\
    \ == (false));\n    assert(candidate((5)) == (true));\n    assert(candidate((11))\
    \ == (true));\n    assert(candidate((17)) == (true));\n    assert(candidate((85))\
    \ == (false));\n    assert(candidate((77)) == (false));\n    assert(candidate((255379))\
    \ == (false));\n}\n"
  stdout: ''
  stderr: "tmpo5s0nh0j: /tmp/tmpo5s0nh0j.cpp:40: int main(): Assertion `candidate((5))\
    \ == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n    if (n == 1)\n        return false;\n  \
    \  if (n == 2)\n        return true;\n    if (n % 2 == 0)\n        return false;\n\
    \    for (int i = 3; i * i <= n; i += 2)\n        if (n % i == 0)\n          \
    \  return false;\n    return true;\n}\nint main() {\n    auto candidate = is_prime;\n\
    \    assert(candidate((6)) == (false));\n    assert(candidate((101)) == (true));\n\
    \    assert(candidate((11)) == (true));\n    assert(candidate((13441)) == (true));\n\
    \    assert(candidate((61)) == (true));\n    assert(candidate((4)) == (false));\n\
    \    assert(candidate((1)) == (false));\n    assert(candidate((5)) == (true));\n\
    \    assert(candidate((11)) == (true));\n    assert(candidate((17)) == (true));\n\
    \    assert(candidate((85)) == (false));\n    assert(candidate((77)) == (false));\n\
    \    assert(candidate((255379)) == (false));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n    if (n == 1)\n        return false;\n  \
    \  if (n == 2)\n        return true;\n    if (n % 2 == 0)\n        return false;\n\
    \    if (n % 3 == 0)\n        return false;\n    long i = 5;\n    while (i <=\
    \ n / 3) {\n        if (n % i == 0)\n            return false;\n        i += 6;\n\
    \    }\n    return true;\n}\nint main() {\n    auto candidate = is_prime;\n  \
    \  assert(candidate((6)) == (false));\n    assert(candidate((101)) == (true));\n\
    \    assert(candidate((11)) == (true));\n    assert(candidate((13441)) == (true));\n\
    \    assert(candidate((61)) == (true));\n    assert(candidate((4)) == (false));\n\
    \    assert(candidate((1)) == (false));\n    assert(candidate((5)) == (true));\n\
    \    assert(candidate((11)) == (true));\n    assert(candidate((17)) == (true));\n\
    \    assert(candidate((85)) == (false));\n    assert(candidate((77)) == (false));\n\
    \    assert(candidate((255379)) == (false));\n}\n"
  stdout: ''
  stderr: "tmpx007y23q: /tmp/tmpx007y23q.cpp:49: int main(): Assertion `candidate((255379))\
    \ == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n    if (n <= 1) return false;\n    if (n ==\
    \ 2) return true;\n    if (n % 2 == 0) return false;\n    long i = 3;\n    while\
    \ (i <= sqrt(n)) {\n        if (n % i == 0) return false;\n        i += 2;\n \
    \   }\n    return true;\n}\nint main() {\n    auto candidate = is_prime;\n   \
    \ assert(candidate((6)) == (false));\n    assert(candidate((101)) == (true));\n\
    \    assert(candidate((11)) == (true));\n    assert(candidate((13441)) == (true));\n\
    \    assert(candidate((61)) == (true));\n    assert(candidate((4)) == (false));\n\
    \    assert(candidate((1)) == (false));\n    assert(candidate((5)) == (true));\n\
    \    assert(candidate((11)) == (true));\n    assert(candidate((17)) == (true));\n\
    \    assert(candidate((85)) == (false));\n    assert(candidate((77)) == (false));\n\
    \    assert(candidate((255379)) == (false));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n    if (n == 2) return true;\n    if (n ==\
    \ 1) return false;\n    if (n % 2 == 0) return false;\n    if (n % 3 == 0) return\
    \ false;\n    if (n % 5 == 0) return false;\n    if (n % 7 == 0) return false;\n\
    \    if (n % 11 == 0) return false;\n    if (n % 13 == 0) return false;\n    if\
    \ (n % 17 == 0) return false;\n    if (n % 19 == 0) return false;\n    if (n %\
    \ 23 == 0) return false;\n    if (n % 29 == 0) return false;\n    if (n % 31 ==\
    \ 0) return false;\n    if (n % 37 == 0) return false;\n    if (n % 41) == 0)\
    \ return false;\n    if (n % 43) == 0) return false;\n    if (n % 47) == 0) return\
    \ false;\n    if (n % 53) == 0) return false;\n    if (n % 59) == 0) return false;\n\
    \    if (n % 61) == 0) return false;\n    if (n % 67) == 0) return false;\n  \
    \  if (n % 71) == 0) return false;\n    if (n % 73) == 0) return false;\n    if\
    \ (n % 79) == 0) return false;\n    if (n % 83) == 0) return false;\n    if (n\
    \ % 89) == 0) return false;\n    if (n % 97) == 0) return false;\n    if (n %\
    \ 103) == 0) return false;\n    if (n % 109) == 0) return false;\n    if (n %\
    \ 113) == 0) return false;\n    if (n % 127) == 0) return false;\n    if (n %\
    \ 131) == 0) return false;\n    if (n % 139) == 0) return false;\n    if (n %\
    \ 147) == 0) return false;\n    if (n % 151) == 0) return false;\n    if (n %\
    \ 157) == 0) return false;\n    if (n % 163) == 0) return false;\n    if (n %\
    \ 167) == 0) return false;\n    if (n % 173) == 0) return false;\n    if (n %\
    \ 179) == 0) return false;\n    if (n % 181) == 0) return false;\n    if (n %\
    \ 185) == 0) return false;\n    if (n % 191) == 0) return false;\n    if (n %\
    \ 197) == 0) return false;\n    if (n % 203) == 0) return false;\n    if (n %\
    \ 209) == 0) return false;\n    if (n % 215) == 0) return false;\n    if (n %\
    \ 217) == 0) return false;\n    if (n % 223) == 0) return false;\n    if (n %\
    \ 229) == 0) return false;\n    if (n % 233) == 0) return false;\n    if (n %\
    \ 239) == 0) return false;\n    if (n % 241) == 0) return false;\n    if (n %\
    \ 247) == 0) return false;\n    if (n % 253) == 0) return false;\n    if (n %\
    \ 259) == 0) return false;\n    if (n % 261) == 0) return false;\n    if (n %\
    \ 265) == 0) return false;\n    if (n % 271) == 0) return false;\n    if (n %\
    \ 277) == 0) return false;\n    if (n % 283) == 0) return false;\n    if (n %\
    \ 289) == 0) return false;\n    if (n % 291) == 0) return false;\n    if (n %\
    \ 297) == 0) return false;\n\n}\nint main() {\n    auto candidate = is_prime;\n\
    \    assert(candidate((6)) == (false));\n    assert(candidate((101)) == (true));\n\
    \    assert(candidate((11)) == (true));\n    assert(candidate((13441)) == (true));\n\
    \    assert(candidate((61)) == (true));\n    assert(candidate((4)) == (false));\n\
    \    assert(candidate((1)) == (false));\n    assert(candidate((5)) == (true));\n\
    \    assert(candidate((11)) == (true));\n    assert(candidate((17)) == (true));\n\
    \    assert(candidate((85)) == (false));\n    assert(candidate((77)) == (false));\n\
    \    assert(candidate((255379)) == (false));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpfwm0kj2f.cpp: In function \u2018bool is_prime(long int)\u2019:\n\
    /tmp/tmpfwm0kj2f.cpp:33:17: error: expected primary-expression before \u2018==\u2019\
    \ token\n   33 |     if (n % 41) == 0) return false;\n      |                \
    \ ^~\n/tmp/tmpfwm0kj2f.cpp:34:17: error: expected primary-expression before \u2018\
    ==\u2019 token\n   34 |     if (n % 43) == 0) return false;\n      |         \
    \        ^~\n/tmp/tmpfwm0kj2f.cpp:35:17: error: expected primary-expression before\
    \ \u2018==\u2019 token\n   35 |     if (n % 47) == 0) return false;\n      | \
    \                ^~\n/tmp/tmpfwm0kj2f.cpp:36:17: error: expected primary-expression\
    \ before \u2018==\u2019 token\n   36 |     if (n % 53) == 0) return false;\n \
    \     |                 ^~\n/tmp/tmpfwm0kj2f.cpp:37:17: error: expected primary-expression\
    \ before \u2018==\u2019 token\n   37 |     if (n % 59) == 0) return false;\n \
    \     |                 ^~\n/tmp/tmpfwm0kj2f.cpp:38:17: error: expected primary-expression\
    \ before \u2018==\u2019 token\n   38 |     if (n % 61) == 0) return false;\n \
    \     |                 ^~\n/tmp/tmpfwm0kj2f.cpp:39:17: error: expected primary-expression\
    \ before \u2018==\u2019 token\n   39 |     if (n % 67) == 0) return false;\n \
    \     |                 ^~\n/tmp/tmpfwm0kj2f.cpp:40:17: error: expected primary-expression\
    \ before \u2018==\u2019 token\n   40 |     if (n % 71) == 0) return false;\n \
    \     |                 ^~\n/tmp/tmpfwm0kj2f.cpp:41:17: error: expected primary-expression\
    \ before \u2018==\u2019 token\n   41 |     if (n % 73) == 0) return false;\n \
    \     |                 ^~\n/tmp/tmpfwm0kj2f.cpp:42:17: error: expected primary-expression\
    \ before \u2018==\u2019 token\n   42 |     if (n % 79) == 0) return false;\n \
    \     |                 ^~\n/tmp/tmpfwm0kj2f.cpp:43:17: error: expected primary-expression\
    \ before \u2018==\u2019 token\n   43 |     if (n % 83) == 0) return false;\n \
    \     |                 ^~\n/tmp/tmpfwm0kj2f.cpp:44:17: error: expected primary-expression\
    \ before \u2018==\u2019 token\n   44 |     if (n % 89) == 0) return false;\n \
    \     |                 ^~\n/tmp/tmpfwm0kj2f.cpp:45:17: error: expected primary-expression\
    \ before \u2018==\u2019 token\n   45 |     if (n % 97) == 0) return false;\n \
    \     |                 ^~\n/tmp/tmpfwm0kj2f.cpp:46:18: error: expected primary-expression\
    \ before \u2018==\u2019 token\n   46 |     if (n % 103) == 0) return false;\n\
    \      |                  ^~\n/tmp/tmpfwm0kj2f.cpp:47:18: error: expected primary-expression\
    \ before \u2018==\u2019 token\n   47 |     if (n % 109) == 0) return false;\n\
    \      |                  ^~\n/tmp/tmpfwm0kj2f.cpp:48:18: error: expected primary-expression\
    \ before \u2018==\u2019 token\n   48 |     if (n % 113) == 0) return false;\n\
    \      |                  ^~\n/tmp/tmpfwm0kj2f.cpp:49:18: error: expected primary-expression\
    \ before \u2018==\u2019 token\n   49 |     if (n % 127) == 0) return false;\n\
    \      |                  ^~\n/tmp/tmpfwm0kj2f.cpp:50:18: error: expected primary-expression\
    \ before \u2018==\u2019 token\n   50 |     if (n % 131) == 0) return false;\n\
    \      |                  ^~\n/tmp/tmpfwm0kj2f.cpp:51:18: error: expected primary-expression\
    \ before \u2018==\u2019 token\n   51 |     if (n % 139) == 0) return false;\n\
    \      |                  ^~\n/tmp/tmpfwm0kj2f.cpp:52:18: error: expected primary-expression\
    \ before \u2018==\u2019 token\n   52 |     if (n % 147) == 0) return false;\n\
    \      |                  ^~\n/tmp/tmpfwm0kj2f.cpp:53:18: error: expected primary-expression\
    \ before \u2018==\u2019 token\n   53 |     if (n % 151) == 0) return false;\n\
    \      |                  ^~\n/tmp/tmpfwm0kj2f.cpp:54:18: error: expected primary-expression\
    \ before \u2018==\u2019 token\n   54 |     if (n % 157) == 0) return false;\n\
    \      |                  ^~\n/tmp/tmpfwm0kj2f.cpp:55:18: error: expected primary-expression\
    \ before \u2018==\u2019 token\n   55 |     if (n % 163) == 0) return false;\n\
    \      |                  ^~\n/tmp/tmpfwm0kj2f.cpp:56:18: error: expected primary-expression\
    \ before \u2018==\u2019 token\n   56 |     if (n % 167) == 0) return false;\n\
    \      |                  ^~\n/tmp/tmpfwm0kj2f.cpp:57:18: error: expected primary-expression\
    \ before \u2018==\u2019 token\n   57 |     if (n % 173) == 0) return false;\n\
    \      |                  ^~\n/tmp/tmpfwm0kj2f.cpp:58:18: error: expected primary-expression\
    \ before \u2018==\u2019 token\n   58 |     if (n % 179) == 0) return false;\n\
    \      |                  ^~\n/tmp/tmpfwm0kj2f.cpp:59:18: error: expected primary-expression\
    \ before \u2018==\u2019 token\n   59 |     if (n % 181) == 0) return false;\n\
    \      |                  ^~\n/tmp/tmpfwm0kj2f.cpp:60:18: error: expected primary-expression\
    \ before \u2018==\u2019 token\n   60 |     if (n % 185) == 0) return false;\n\
    \      |                  ^~\n/tmp/tmpfwm0kj2f.cpp:61:18: error: expected primary-expression\
    \ before \u2018==\u2019 token\n   61 |     if (n % 191) == 0) return false;\n\
    \      |                  ^~\n/tmp/tmpfwm0kj2f.cpp:62:18: error: expected primary-expression\
    \ before \u2018==\u2019 token\n   62 |     if (n % 197) == 0) return false;\n\
    \      |                  ^~\n/tmp/tmpfwm0kj2f.cpp:63:18: error: expected primary-expression\
    \ before \u2018==\u2019 token\n   63 |     if (n % 203) == 0) return false;\n\
    \      |                  ^~\n/tmp/tmpfwm0kj2f.cpp:64:18: error: expected primary-expression\
    \ before \u2018==\u2019 token\n   64 |     if (n % 209) == 0) return false;\n\
    \      |                  ^~\n/tmp/tmpfwm0kj2f.cpp:65:18: error: expected primary-expression\
    \ before \u2018==\u2019 token\n   65 |     if (n % 215) == 0) return false;\n\
    \      |                  ^~\n/tmp/tmpfwm0kj2f.cpp:66:18: error: expected primary-expression\
    \ before \u2018==\u2019 token\n   66 |     if (n % 217) == 0) return false;\n\
    \      |                  ^~\n/tmp/tmpfwm0kj2f.cpp:67:18: error: expected primary-expression\
    \ before \u2018==\u2019 token\n   67 |     if (n % 223) == 0) return false;\n\
    \      |                  ^~\n/tmp/tmpfwm0kj2f.cpp:68:18: error: expected primary-expression\
    \ before \u2018==\u2019 token\n   68 |     if (n % 229) == 0) return false;\n\
    \      |                  ^~\n/tmp/tmpfwm0kj2f.cpp:69:18: error: expected primary-expression\
    \ before \u2018==\u2019 token\n   69 |     if (n % 233) == 0) return false;\n\
    \      |                  ^~\n/tmp/tmpfwm0kj2f.cpp:70:18: error: expected primary-expression\
    \ before \u2018==\u2019 token\n   70 |     if (n % 239) == 0) return false;\n\
    \      |                  ^~\n/tmp/tmpfwm0kj2f.cpp:71:18: error: expected primary-expression\
    \ before \u2018==\u2019 token\n   71 |     if (n % 241) == 0) return false;\n\
    \      |                  ^~\n/tmp/tmpfwm0kj2f.cpp:72:18: error: expected primary-expression\
    \ before \u2018==\u2019 token\n   72 |     if (n % 247) == 0) return false;\n\
    \      |                  ^~\n/tmp/tmpfwm0kj2f.cpp:73:18: error: expected primary-expression\
    \ before \u2018==\u2019 token\n   73 |     if (n % 253) == 0) return false;\n\
    \      |                  ^~\n/tmp/tmpfwm0kj2f.cpp:74:18: error: expected primary-expression\
    \ before \u2018==\u2019 token\n   74 |     if (n % 259) == 0) return false;\n\
    \      |                  ^~\n/tmp/tmpfwm0kj2f.cpp:75:18: error: expected primary-expression\
    \ before \u2018==\u2019 token\n   75 |     if (n % 261) == 0) return false;\n\
    \      |                  ^~\n/tmp/tmpfwm0kj2f.cpp:76:18: error: expected primary-expression\
    \ before \u2018==\u2019 token\n   76 |     if (n % 265) == 0) return false;\n\
    \      |                  ^~\n/tmp/tmpfwm0kj2f.cpp:77:18: error: expected primary-expression\
    \ before \u2018==\u2019 token\n   77 |     if (n % 271) == 0) return false;\n\
    \      |                  ^~\n/tmp/tmpfwm0kj2f.cpp:78:18: error: expected primary-expression\
    \ before \u2018==\u2019 token\n   78 |     if (n % 277) == 0) return false;\n\
    \      |                  ^~\n/tmp/tmpfwm0kj2f.cpp:79:18: error: expected primary-expression\
    \ before \u2018==\u2019 token\n   79 |     if (n % 283) == 0) return false;\n\
    \      |                  ^~\n/tmp/tmpfwm0kj2f.cpp:80:18: error: expected primary-expression\
    \ before \u2018==\u2019 token\n   80 |     if (n % 289) == 0) return false;\n\
    \      |                  ^~\n/tmp/tmpfwm0kj2f.cpp:81:18: error: expected primary-expression\
    \ before \u2018==\u2019 token\n   81 |     if (n % 291) == 0) return false;\n\
    \      |                  ^~\n/tmp/tmpfwm0kj2f.cpp:82:18: error: expected primary-expression\
    \ before \u2018==\u2019 token\n   82 |     if (n % 297) == 0) return false;\n\
    \      |                  ^~\n/tmp/tmpfwm0kj2f.cpp:84:1: warning: control reaches\
    \ end of non-void function [-Wreturn-type]\n   84 | }\n      | ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n    if (n <= 1) return false;\n    if (n ==\
    \ 2) return true;\n    if (n % 2 == 0) return false;\n    for (int i = 3; i <=\
    \ sqrt(n); i += 2) {\n        if (n % i == 0) return false;\n    }\n    return\
    \ true;\n}\nint main() {\n    auto candidate = is_prime;\n    assert(candidate((6))\
    \ == (false));\n    assert(candidate((101)) == (true));\n    assert(candidate((11))\
    \ == (true));\n    assert(candidate((13441)) == (true));\n    assert(candidate((61))\
    \ == (true));\n    assert(candidate((4)) == (false));\n    assert(candidate((1))\
    \ == (false));\n    assert(candidate((5)) == (true));\n    assert(candidate((11))\
    \ == (true));\n    assert(candidate((17)) == (true));\n    assert(candidate((85))\
    \ == (false));\n    assert(candidate((77)) == (false));\n    assert(candidate((255379))\
    \ == (false));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n    if (n == 1)\n        return false;\n  \
    \  if (n == 2)\n        return true;\n    if (n % 2 == 0)\n        return false;\n\
    \    for (int i = 3; i * i <= n; i += 2)\n        if (n % i == 0)\n          \
    \  return false;\n    return true;\n}\nint main() {\n    auto candidate = is_prime;\n\
    \    assert(candidate((6)) == (false));\n    assert(candidate((101)) == (true));\n\
    \    assert(candidate((11)) == (true));\n    assert(candidate((13441)) == (true));\n\
    \    assert(candidate((61)) == (true));\n    assert(candidate((4)) == (false));\n\
    \    assert(candidate((1)) == (false));\n    assert(candidate((5)) == (true));\n\
    \    assert(candidate((11)) == (true));\n    assert(candidate((17)) == (true));\n\
    \    assert(candidate((85)) == (false));\n    assert(candidate((77)) == (false));\n\
    \    assert(candidate((255379)) == (false));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n    if (n == 2) return true;\n    if (n ==\
    \ 1) return false;\n    if (n % 2 == 0) return false;\n    if (n % 3 == 0) return\
    \ false;\n    if (n % 5 == 0) return false;\n    if (n % 7 == 0) return false;\n\
    \    long max = (long) sqrt(n);\n    for (long i = 3; i <= max; i += 2) {\n  \
    \      if (n % i == 0) return false;\n    }\n    return true;\n}\nint main() {\n\
    \    auto candidate = is_prime;\n    assert(candidate((6)) == (false));\n    assert(candidate((101))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((13441))\
    \ == (true));\n    assert(candidate((61)) == (true));\n    assert(candidate((4))\
    \ == (false));\n    assert(candidate((1)) == (false));\n    assert(candidate((5))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((17))\
    \ == (true));\n    assert(candidate((85)) == (false));\n    assert(candidate((77))\
    \ == (false));\n    assert(candidate((255379)) == (false));\n}\n"
  stdout: ''
  stderr: "tmp9i3jmszx: /tmp/tmp9i3jmszx.cpp:40: int main(): Assertion `candidate((5))\
    \ == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n    if (n <= 1)\n        return false;\n  \
    \  if (n == 2)\n        return true;\n    if (n % 2 == 0)\n        return false;\n\
    \    for (int i = 3; i <= sqrt(n); i += 2)\n        if (n % i == 0)\n        \
    \    return false;\n    return true;\n}\nint main() {\n    auto candidate = is_prime;\n\
    \    assert(candidate((6)) == (false));\n    assert(candidate((101)) == (true));\n\
    \    assert(candidate((11)) == (true));\n    assert(candidate((13441)) == (true));\n\
    \    assert(candidate((61)) == (true));\n    assert(candidate((4)) == (false));\n\
    \    assert(candidate((1)) == (false));\n    assert(candidate((5)) == (true));\n\
    \    assert(candidate((11)) == (true));\n    assert(candidate((17)) == (true));\n\
    \    assert(candidate((85)) == (false));\n    assert(candidate((77)) == (false));\n\
    \    assert(candidate((255379)) == (false));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n    if (n == 1)\n        return false;\n  \
    \  if (n == 2)\n        return true;\n    if (n % 2 == 0)\n        return false;\n\
    \    for (int i = 3; i * i <= n; i += 2)\n        if (n % i == 0)\n          \
    \  return false;\n    return true;\n}\nint main() {\n    auto candidate = is_prime;\n\
    \    assert(candidate((6)) == (false));\n    assert(candidate((101)) == (true));\n\
    \    assert(candidate((11)) == (true));\n    assert(candidate((13441)) == (true));\n\
    \    assert(candidate((61)) == (true));\n    assert(candidate((4)) == (false));\n\
    \    assert(candidate((1)) == (false));\n    assert(candidate((5)) == (true));\n\
    \    assert(candidate((11)) == (true));\n    assert(candidate((17)) == (true));\n\
    \    assert(candidate((85)) == (false));\n    assert(candidate((77)) == (false));\n\
    \    assert(candidate((255379)) == (false));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n    if (n == 1)\n        return false;\n  \
    \  if (n == 2)\n        return true;\n    if (n % 2 == 0)\n        return false;\n\
    \    if (n % 3 == 0)\n        return false;\n    long i = 5;\n    while (i <=\
    \ sqrt(n))\n        if (n % i == 0)\n            return false;\n        i += 6;\n\
    \    return true;\n}\nint main() {\n    auto candidate = is_prime;\n    assert(candidate((6))\
    \ == (false));\n    assert(candidate((101)) == (true));\n    assert(candidate((11))\
    \ == (true));\n    assert(candidate((13441)) == (true));\n    assert(candidate((61))\
    \ == (true));\n    assert(candidate((4)) == (false));\n    assert(candidate((1))\
    \ == (false));\n    assert(candidate((5)) == (true));\n    assert(candidate((11))\
    \ == (true));\n    assert(candidate((17)) == (true));\n    assert(candidate((85))\
    \ == (false));\n    assert(candidate((77)) == (false));\n    assert(candidate((255379))\
    \ == (false));\n}\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n    if (n <= 1) return false;\n    if (n ==\
    \ 2) return true;\n    if (n % 2 == 0) return false;\n    for (int i = 3; i <=\
    \ n / i; i += 2) {\n        if (n % i == 0) return false;\n    }\n    return true;\n\
    }\nint main() {\n    auto candidate = is_prime;\n    assert(candidate((6)) ==\
    \ (false));\n    assert(candidate((101)) == (true));\n    assert(candidate((11))\
    \ == (true));\n    assert(candidate((13441)) == (true));\n    assert(candidate((61))\
    \ == (true));\n    assert(candidate((4)) == (false));\n    assert(candidate((1))\
    \ == (false));\n    assert(candidate((5)) == (true));\n    assert(candidate((11))\
    \ == (true));\n    assert(candidate((17)) == (true));\n    assert(candidate((85))\
    \ == (false));\n    assert(candidate((77)) == (false));\n    assert(candidate((255379))\
    \ == (false));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n    if (n == 1)\n        return false;\n  \
    \  if (n == 2)\n        return true;\n    if (n % 2 == 0)\n        return false;\n\
    \    for (int i = 3; i * i <= n; i += 2)\n        if (n % i == 0)\n          \
    \  return false;\n    return true;\n}\nint main() {\n    auto candidate = is_prime;\n\
    \    assert(candidate((6)) == (false));\n    assert(candidate((101)) == (true));\n\
    \    assert(candidate((11)) == (true));\n    assert(candidate((13441)) == (true));\n\
    \    assert(candidate((61)) == (true));\n    assert(candidate((4)) == (false));\n\
    \    assert(candidate((1)) == (false));\n    assert(candidate((5)) == (true));\n\
    \    assert(candidate((11)) == (true));\n    assert(candidate((17)) == (true));\n\
    \    assert(candidate((85)) == (false));\n    assert(candidate((77)) == (false));\n\
    \    assert(candidate((255379)) == (false));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n    if (n == 1) return false;\n    if (n ==\
    \ 2) return true;\n    if (n % 2 == 0) return false;\n    if (n % 3 == 0) return\
    \ false;\n    long i = 5;\n    while (i <= sqrt(n)) {\n        if (n % i == 0)\
    \ return false;\n        i += 6;\n    }\n    return true;\n}\nint main() {\n \
    \   auto candidate = is_prime;\n    assert(candidate((6)) == (false));\n    assert(candidate((101))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((13441))\
    \ == (true));\n    assert(candidate((61)) == (true));\n    assert(candidate((4))\
    \ == (false));\n    assert(candidate((1)) == (false));\n    assert(candidate((5))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((17))\
    \ == (true));\n    assert(candidate((85)) == (false));\n    assert(candidate((77))\
    \ == (false));\n    assert(candidate((255379)) == (false));\n}\n"
  stdout: ''
  stderr: "tmpt4pc4x52: /tmp/tmpt4pc4x52.cpp:43: int main(): Assertion `candidate((77))\
    \ == (false)' failed.\n"
  exit_code: -6
  status: Exception
