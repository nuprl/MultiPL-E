name: HumanEval_140_fix_spaces
language: cpp
prompt: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
  \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
  \ spaces, \n// then replace all consecutive spaces with - \n// fix_spaces(\"Example\"\
  ) == \"Example\"\n// fix_spaces(\"Example 1\") == \"Example_1\"\n// fix_spaces(\"\
  \ Example 2\") == \"_Example_2\"\n// fix_spaces(\" Example   3\") == \"_Example-3\"\
  \nstd::string fix_spaces(std::string text) {\n"
tests: "}\nint main() {\n    auto candidate = fix_spaces;\n    assert(candidate((\"\
  Example\")) == (\"Example\"));\n    assert(candidate((\"Mudasir Hanif \")) == (\"\
  Mudasir_Hanif_\"));\n    assert(candidate((\"Yellow Yellow  Dirty  Fellow\")) ==\
  \ (\"Yellow_Yellow__Dirty__Fellow\"));\n    assert(candidate((\"Exa   mple\")) ==\
  \ (\"Exa-mple\"));\n    assert(candidate((\"   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"\
  ));\n}\n"
completions: ["    std::string res = text;\n    std::replace(std::begin(res), std::end(res),\
    \ ' ', '_');\n    std::replace(std::begin(res), std::end(res), ' ', '_');\n  \
    \  std::replace(std::begin(res), std::end(res), ' ', '-');\n    return res;",
  "    std::string s = text;\n    std::replace(s.begin(), s.end(), ' ', '_');\n  \
    \  if (s.size() > 2 && s[s.size() - 1] == ' ' && s[s.size() - 2] == ' ') {\n \
    \       s.replace(s.size() - 2, s.size() - 1, ' ');\n    }\n    return s;", " \
    \   std::string s = text;\n    s.replace(s.begin(), s.end(), ' ');\n    size_t\
    \ prev = 0, next = 0, count = 0;\n    for (size_t i = 0; i < s.length(); i++)\
    \ {\n        if (s[i] == ' ') {\n            count++;\n            if (count ==\
    \ 2) {\n                s[prev++] = ' ';\n                s[next++] = ' ';\n \
    \               count = 0;\n            } else {\n                s[prev++] =\
    \ s[i];\n            }\n        } else {\n            s[next++] = s[i];\n    \
    \        count = 0;\n        }\n    }\n    s[next] = '\\0';\n    return s;", " \
    \   std::string s = text;\n    std::replace(s.begin(), s.end(), ' ', '_');\n \
    \   if (s.size() > 2 && s[s.size() - 1] == ' ' && s[s.size() - 2] == ' ') {\n\
    \        s.replace(s.size() - 2, s.size() - 1, ' ');\n    }\n    return s;", " \
    \   std::string result = text;\n    for(size_t i = 0; i < result.size(); i++)\
    \ {\n        if(result[i] == ' ') {\n            result.erase(i, 1);\n       \
    \     result.insert(i, '_');\n        }\n    }\n    for(size_t i = 0; i < result.size();\
    \ i++) {\n        if(result[i] == ' ' && result[i+1] == ' ') {\n            result.erase(i,\
    \ 1);\n            result.insert(i, '-');\n        }\n    }\n    return result;",
  "    std::string s = text;\n    std::replace(s.begin(), s.end(), ' ', '_');\n  \
    \  if (s.size() > 2) {\n        std::replace(s.begin(), s.end(), ' ', '_');\n\
    \    }\n    return s;", "    std::string s = text;\n    std::replace(s.begin(),\
    \ s.end(), ' ', '_');\n    if (s.size() > 2 && s[s.size() - 1] == ' ' && s[s.size()\
    \ - 2] == ' ') {\n        s.replace(s.size() - 2, s.size() - 1, std::string(\"\
    _\"));\n    }\n    return s;", "    std::string s = text;\n    std::replace(s.begin(),\
    \ s.end(), ' ', '_');\n    if (s.size() > 2 && s[s.size() - 1] == ' ' && s[s.size()\
    \ - 2] == ' ') {\n        s.replace(s.size() - 2, s.size() - 1, \"\");\n    }\n\
    \    return s;", "    std::string s = text;\n    std::replace(s.begin(), s.end(),\
    \ ' ', '_');\n    if (s.size() > 2 && s[s.size() - 1] == ' ' && s[s.size() - 2]\
    \ == ' ') {\n        s.replace(s.size() - 2, s.size() - 1, std::string(\"_\"));\n\
    \    }\n    return s;", "    std::string s = text;\n    std::replace(s.begin(),\
    \ s.end(), ' ', '_');\n    if (s.size() > 2 && s[s.size() - 1] == ' ' && s[s.size()\
    \ - 2] == ' ') {\n        s.replace(s.size() - 2, s.size() - 1, std::string(\"\
    _\"));\n    }\n    return s;", "    std::string s = text;\n    s.replace(s.begin(),\
    \ s.end(), ' ');\n    if (s.size() > 2 && s.substr(0, 2) == ' ') {\n        s.replace(s.begin(),\
    \ s.begin() + 2, std::string(\"_\"));\n    }\n    return s;", "    std::string\
    \ s = text;\n    s.replace(s.begin(), s.end(), ' ');\n    size_t prev = 0, next\
    \ = 0, count = 0;\n    while (next < s.size()) {\n        if (s[next] == ' ')\
    \ {\n            count++;\n            if (count == 2) {\n                s[prev]\
    \ = '_';\n                s[next] = '-';\n                prev = next + 1;\n \
    \               count = 0;\n            }\n        } else {\n            count\
    \ = 0;\n        }\n        next++;\n    }\n    return s;", "    std::string s\
    \ = text;\n    std::replace(s.begin(), s.end(), ' ', '_');\n    if (s.size() >\
    \ 2 && s[s.size() - 1] == ' ' && s[s.size() - 2] == ' ') {\n        s.replace(s.size()\
    \ - 2, s.size() - 1, \"\");\n    }\n    return s;", "    std::string s = text;\n\
    \    s.replace(s.begin(), s.end(), ' ');\n    size_t prev = 0, next = 0, count\
    \ = 0;\n    for (size_t i = 0; i < s.size(); i++) {\n        if (s[i] == ' ')\
    \ {\n            count++;\n            if (count == 2) {\n                s[prev++]\
    \ = ' ';\n                count = 0;\n            } else {\n                s[prev++]\
    \ = s[i];\n            }\n        } else {\n            count = 0;\n         \
    \   s[prev++] = s[i];\n        }\n    }\n    s[prev] = '\\0';\n    return s;",
  "    std::string s = text;\n    std::replace(s.begin(), s.end(), ' ', '_');\n  \
    \  if (s.size() > 2 && s.substr(0, 2) == \" \") {\n        std::replace(s.begin(),\
    \ s.end(), ' ', '_');\n    }\n    return s;", "    std::string s = text;\n   \
    \ std::replace(s.begin(), s.end(), ' ', '_');\n    std::replace(s.begin(), s.end(),\
    \ '  ', '-');\n    return s;", "    std::string s = text;\n    size_t pos = 0;\n\
    \    size_t prev = 0, next = 0, count = 0;\n    while (pos < s.size()) {\n   \
    \     next = s.find(' ', pos);\n        if (next == std::string::npos) {\n   \
    \         next = s.size();\n        }\n        size_t len = next - pos;\n    \
    \    if (len > 2) {\n            while (pos < s.size() && s.at(pos) == ' ') {\n\
    \                pos++;\n            }\n            while (pos < s.size() && s.at(pos)\
    \ != ' ') {\n                pos++;\n            }\n            while (pos < s.size()\
    \ && s.at(pos) == ' ') {\n                pos++;\n            }\n            while\
    \ (pos < s.size() && s.at(pos) != ' ') {\n                pos++;\n           \
    \ }\n            while (pos < s.size() && s.at(pos) == ' ') {\n              \
    \  pos++;\n            }\n            while (pos < s.size() && s.at(pos) != '\
    \ ') {\n                pos++;\n            }\n            while (pos < s.size()\
    \ && s.at(pos) == ' ') {\n                pos++;\n            }\n            while\
    \ (pos < s.size() && s.at(pos) != ' ') {\n                pos++;\n           \
    \ }\n            while (pos < s.size() && s.at(pos) == ' ') {\n              \
    \  pos++;\n            }\n            while (pos < s.size() && s.at(pos) != '\
    \ ') {\n                pos++;\n            }\n            while (pos < s.size()\
    \ && s.at(pos) == ' ') {\n                pos++;\n            }\n            while\
    \ (pos < s.size() && s.at(pos) != ' ') {\n                pos++;\n           \
    \ }\n            while (pos < s.size() && s.at(pos) == ' ') {\n              \
    \  pos++;\n            }\n            while (pos < s.size() && s.at(pos) != '\
    \ ') {\n                pos++;\n            }\n            while (pos < s.size()\
    \ && s.at(pos) == ' ') {\n                pos++;\n            }\n            while\
    \ (pos < s.size() && s.at(pos) != ' ') {\n                pos++;\n           \
    \ }\n            while (pos < s.size() && s.at(pos) == ' ') {\n              \
    \  pos++;\n            }\n            while (pos < s.size() && s.at(pos) != '\
    \ ') {\n                pos++;\n            }\n            while (pos < s.size()\
    \ && s.at(pos) == ' ') {\n                pos++;\n            }\n            while\
    \ (pos < s.size() && s.at(pos) != ' ') {\n                pos++;\n           \
    \ }\n            while (pos < s.size() && s.at(pos) == ' ') {\n              \
    \  pos++;\n            }\n            while (pos < s.size() && s.at(pos) != '\
    \ ') {\n                pos++;\n            }\n            while (pos < s.size()\
    \ && s.at(pos) == ' ') {\n                pos++;\n            }\n            while\
    \ (pos < s.size() && s.at(pos) != ' ') {", "    std::string s = text;\n    std::replace(s.begin(),\
    \ s.end(), ' ', '_');\n    if (s.size() > 2 && s[s.size() - 1] == s[s.size() -\
    \ 2]) {\n        std::replace(s.begin(), s.end(), ' ', '-');\n    }\n    return\
    \ s;", "    std::string res = text;\n    std::replace(std::begin(res), std::end(res),\
    \ ' ', '_');\n    std::replace(std::begin(res), std::end(res), ' ', '_');\n  \
    \  std::replace(std::begin(res), std::end(res), ' ', '_');\n    std::replace(std::begin(res),\
    \ std::end(res), ' ', '_');\n    return res;", "    std::string s = text;\n  \
    \  std::replace(s.begin(), s.end(), ' ', '_');\n    if (s.size() > 2 && s[s.size()\
    \ - 1] == s[s.size() - 2]) {\n        std::replace(s.begin(), s.end(), ' ', '_');\n\
    \    }\n    return s;", "    std::string s = text;\n    std::replace(s.begin(),\
    \ s.end(), ' ', '_');\n    if (s.size() > 2 && s[s.size() - 1] == ' ' && s[s.size()\
    \ - 2] == ' ') {\n        s.replace(s.size() - 2, s.size() - 1, std::string(\"\
    _\"));\n    }\n    return s;", "    std::string s = text;\n    std::replace(s.begin(),\
    \ s.end(), ' ', '_');\n    if (s.size() > 2 && s[s.size() - 1] == ' ' && s[s.size()\
    \ - 2] == ' ') {\n        s.replace(s.size() - 2, s.size() - 1, \"\");\n    }\n\
    \    return s;", "    std::string s = text;\n    std::replace(s.begin(), s.end(),\
    \ ' ', '_');\n    if (s.size() > 2 && s[s.size() - 1] == ' ' && s[s.size() - 2]\
    \ == ' ') {\n        s.replace(s.size() - 2, s.size() - 1, std::string(\"_\"));\n\
    \    }\n    return s;", "    std::string result = text;\n    size_t pos = 0;\n\
    \    while((pos = result.find(\" \", pos)) != std::string::npos) {\n        result.replace(pos,\
    \ 1, std::string(\"_\"));\n        pos += 1;\n    }\n    while((pos = result.find_first_not_of(\"\
    \ \", pos)) != std::string::npos) {\n        result.replace(pos, 1, std::string(\"\
    -\"));\n        pos += 1;\n    }\n    return result;", "    std::string s = text;\n\
    \    s.replace(s.begin(), s.end(), ' ');\n    s.replace(s.begin(), s.end(), '\
    \ ');\n    s.replace(s.begin(), s.end(), '-');\n    s.replace(s.begin(), s.end(),\
    \ '-');\n    return s;", "    std::string s = text;\n    std::replace(s.begin(),\
    \ s.end(), ' ', '_');\n    if (s.size() > 2 && s[s.size() - 1] == ' ' && s[s.size()\
    \ - 2] == ' ') {\n        s.replace(s.size() - 2, s.size() - 1, std::string(\"\
    _\"));\n    }\n    return s;", "    std::string s = text;\n    std::replace(s.begin(),\
    \ s.end(), ' ', '_');\n    if (s.size() > 2 && s[s.size() - 1] == ' ' && s[s.size()\
    \ - 2] == ' ') {\n        s.replace(s.size() - 2, s.size() - 1, \"\");\n    }\n\
    \    return s;", "    std::string res = text;\n    std::replace(std::begin(res),\
    \ std::end(res), ' ', '_');\n    if (res.size() > 2 && res[0] == res[1] && res[1]\
    \ == res[2] && res[2] == res[3]) {\n        std::replace(std::begin(res), std::end(res),\
    \ ' ', '-');\n    }\n    return res;", "    std::string s = text;\n    size_t\
    \ pos = 0;\n    while(pos < s.size()) {\n        size_t next_space = s.find_first_of('\
    \ ', pos);\n        if(next_space != std::string::npos) {\n            s.erase(pos,\
    \ next_space - pos);\n            pos = next_space;\n        } else {\n      \
    \      pos = s.size();\n        }\n    }\n    size_t prev_space = s.find_first_not_of('\
    \ ', pos);\n    if(prev_space != std::string::npos) {\n        s.erase(prev_space,\
    \ s.size() - prev_space);\n    }\n    return s;", "    std::string s = text;\n\
    \    std::replace(s.begin(), s.end(), ' ', '_');\n    if (s.size() > 2) {\n  \
    \      std::replace(s.begin(), s.end(), ' ', '_');\n    }\n    return s;", " \
    \   std::string s = text;\n    std::replace(s.begin(), s.end(), ' ', '_');\n \
    \   if (s.size() > 2 && s[s.size() - 1] == ' ' && s[s.size() - 2] == ' ') {\n\
    \        s.replace(s.size() - 2, s.size() - 1, std::string(\"_\"));\n    }\n \
    \   return s;", "    std::string s = text;\n    std::replace(s.begin(), s.end(),\
    \ ' ', '_');\n    if (s.size() > 2) {\n        std::replace(s.begin(), s.end(),\
    \ ' ', '_');\n    }\n    return s;", "    std::string s = text;\n    s.replace(s.begin(),\
    \ s.end(), ' ');\n    size_t prev = 0, next = 0, count = 0;\n    while (next <\
    \ s.size()) {\n        if (s[next] == ' ') {\n            count++;\n         \
    \   if (count == 2) {\n                s[prev++] = s[next];\n                s[next]\
    \ = '-';\n                count = 0;\n            } else {\n                s[next]\
    \ = '_';\n            }\n        } else {\n            count = 0;\n        }\n\
    \        ++next;\n    }\n    return s;", "    std::string res = text;\n    std::replace(std::begin(res),\
    \ std::end(res), ' ', '_');\n    if (res.find_first_not_of(' ') != std::string::npos)\
    \ {\n        std::replace(std::begin(res), std::end(res), ' ', '-');\n    }\n\
    \    return res;", "    std::string s = text;\n    for(size_t i = 0; i < s.size();\
    \ i++) {\n        if(s[i] == ' ') {\n            s[i] = '_';\n        }\n    \
    \    if(s.substr(i, 2) == \" \") {\n            s[i] = '_';\n            s[i +\
    \ 1] = '-';\n        }\n    }\n    return s;", "    std::string s = text;\n  \
    \  std::replace(s.begin(), s.end(), ' ', '_');\n    if (s.size() > 2 && s.substr(0,\
    \ 2) == \" \") {\n        std::replace(s.begin(), s.end(), ' ', '_');\n    }\n\
    \    return s;", "    std::string s = text;\n    std::replace(s.begin(), s.end(),\
    \ ' ', '_');\n    if (s.size() > 2 && s[s.size() - 1] == ' ' && s[s.size() - 2]\
    \ == ' ') {\n        s.replace(s.size() - 2, s.size() - 1, ' ');\n    }\n    return\
    \ s;", "    std::string s = text;\n    std::replace(s.begin(), s.end(), ' ', '_');\n\
    \    if (s.size() > 2 && s.substr(0, 2) == \" \") {\n        s.replace(s.begin(),\
    \ s.begin() + 2, \"\");\n    }\n    return s;", "    std::string s = text;\n \
    \   s.replace(s.begin(), s.end(), ' ');\n    int i = 0;\n    while (i < s.size()\
    \ && s[i] != ' ') {\n        i++;\n    }\n    if (i != s.size()) {\n        s.replace(i,\
    \ s.size(), '_');\n    }\n    while (i < s.size() && s[i] != ' ') {\n        i++;\n\
    \    }\n    if (i != s.size()) {\n        s.replace(i, s.size(), '-');\n    }\n\
    \    return s;", "    std::string s = text;\n    s.replace(s.begin(), s.end(),\
    \ ' ');\n    size_t prev = 0, next = 0, count = 0;\n    while (next < s.size())\
    \ {\n        if (s[next] == ' ') {\n            count++;\n            if (count\
    \ == 2) {\n                s[prev] = '_';\n                s[next] = '-';\n  \
    \              prev = next;\n                next = prev + 1;\n              \
    \  count = 0;\n            }\n        } else {\n            count = 0;\n     \
    \   }\n        next++;\n    }\n    return s;", "    std::string s = text;\n  \
    \  std::replace(s.begin(), s.end(), ' ', '_');\n    if (s.size() > 2 && s[s.size()\
    \ - 1] == ' ' && s[s.size() - 2] == ' ') {\n        s.replace(s.size() - 2, s.size()\
    \ - 1, \"\");\n    }\n    return s;", "    std::string s = text;\n    s.replace(s.begin(),\
    \ s.end(), ' ');\n    int n = s.size();\n    for(int i = 0; i < n; i++) {\n  \
    \      if(s[i] == ' ' && i+1 < n && s[i+1] == ' ') {\n            s[i] = '_';\n\
    \            s[i+1] = '-';\n        }\n    }\n    return s;", "    std::string\
    \ s = text;\n    std::replace(s.begin(), s.end(), ' ', '_');\n    if (s.size()\
    \ > 2 && s[s.size() - 1] == ' ' && s[s.size() - 2] == ' ') {\n        s.replace(s.size()\
    \ - 2, s.size() - 1, std::string(\"_\"));\n    }\n    return s;", "    std::string\
    \ s = text;\n    std::replace(s.begin(), s.end(), ' ', '_');\n    if (s.size()\
    \ > 2 && s[s.size() - 1] == ' ' && s[s.size() - 2] == ' ') {\n        s.replace(s.size()\
    \ - 2, s.size() - 1, ' ');\n    }\n    return s;", "    std::string s = text;\n\
    \    std::replace(s.begin(), s.end(), ' ', '_');\n    if (s.size() > 2) {\n  \
    \      std::replace(s.begin(), s.end(), ' ', '_');\n    }\n    return s;", " \
    \   std::string s = text;\n    std::replace(s.begin(), s.end(), ' ', '_');\n \
    \   if (s.size() > 2 && s[s.size() - 1] == s[s.size() - 2]) {\n        s.replace(s.size()\
    \ - 1, s.size() - 2, \"\");\n    }\n    return s;", "    std::string s = text;\n\
    \    std::replace(s.begin(), s.end(), ' ', '_');\n    if (s.size() > 2 && s.substr(0,\
    \ 2) == \" \") {\n        s.replace(s.begin(), s.begin() + 2, \"\");\n    }\n\
    \    return s;", "    std::string out = text;\n    for (size_t i = 0; i < out.size();\
    \ i++) {\n        if (out[i] == ' ') {\n            out[i] = '_';\n        }\n\
    \        if (out[i] == ' ' && out[i - 1] == ' ') {\n            out[i] = '_';\n\
    \        }\n    }\n    return out;", "    std::string s = text;\n    std::replace(s.begin(),\
    \ s.end(), ' ', '_');\n    std::replace(s.begin(), s.end(), '  ', '-');\n    return\
    \ s;", "    std::string s = text;\n    for(size_t i = 0; i < s.length(); i++)\
    \ {\n        if(s[i] == ' ') {\n            s[i] = '_';\n        }\n    }\n  \
    \  size_t prev = 0, next = 0, count = 0;\n    while(next < s.length()) {\n   \
    \     if(s[next] == ' ') {\n            count++;\n            while(s[next] ==\
    \ ' ') {\n                next++;\n            }\n            if(count > 2) {\n\
    \                s[prev] = '-';\n            }\n            prev = next;\n   \
    \         next = prev + 1;\n            count = 0;\n        } else {\n       \
    \     count = 1;\n            next = prev + 1;\n        }\n    }\n    return s;",
  "    std::string s = text;\n    for(size_t i = 0; i < s.length(); i++) {\n     \
    \   if(s[i] == ' ') {\n            s[i] = '_';\n        }\n        if(s[i+1] ==\
    \ ' ' && s[i+2] == ' ') {\n            s[i] = '-';\n            s[i+1] = '-';\n\
    \            s[i+2] = '-';\n        }\n    }\n    return s;", "    std::string\
    \ out = text;\n    for(size_t i = 0; i < out.size(); i++) {\n        if(out[i]\
    \ == ' ') {\n            out.insert(i, '_');\n            i += 2;\n        }\n\
    \    }\n    while(out.size() > 2 && out[0] == ' ' && out[out.size() - 1] == '\
    \ ') {\n        out[0] = out[out.size() - 2] = '-';\n        out.erase(out.size()\
    \ - 1);\n    }\n    return out;", "    std::string s = text;\n    std::replace(s.begin(),\
    \ s.end(), ' ', '_');\n    if (s.size() > 2 && s[s.size() - 1] == ' ' && s[s.size()\
    \ - 2] == ' ') {\n        s.replace(s.size() - 2, s.size() - 1, ' ');\n    }\n\
    \    return s;", "    std::string res = text;\n    std::replace(std::begin(res),\
    \ std::end(res), ' ', '_');\n    if (res.size() > 2 && res[0] == ' ' && res[res.size()\
    \ - 1] == ' ') {\n        std::replace(std::begin(res), std::end(res), ' ', '_');\n\
    \    }\n    return res;", "    std::string s = text;\n    s.replace(s.begin(),\
    \ s.end(), ' ');\n    size_t prev = 0, pos = 0;\n    while (pos < s.size()) {\n\
    \        if (s[pos] == ' ') {\n            s[prev++] = s[pos];\n            s[pos]\
    \ = '_';\n            prev = pos;\n            ++pos;\n        } else {\n    \
    \        ++pos;\n        }\n    }\n    s[prev] = '\\0';\n    return s;", "   \
    \ std::string s = text;\n    std::replace(s.begin(), s.end(), ' ', '_');\n   \
    \ if (s.size() > 2 && s[s.size() - 1] == ' ' && s[s.size() - 2] == ' ') {\n  \
    \      s.replace(s.size() - 2, s.size() - 1, std::string(\"_\"));\n    }\n   \
    \ return s;", "    std::string s = text;\n    s.replace(s.begin(), s.end(), '\
    \ ');\n    size_t prev = 0, next = 0, count = 0;\n    while (next < s.size())\
    \ {\n        if (s[next] == ' ') {\n            count++;\n            if (count\
    \ == 2) {\n                s[prev] = s[next];\n                s[next] = '_';\n\
    \                prev = next;\n                count = 0;\n            } else\
    \ if (count == 1) {\n                s[prev] = s[next];\n                s[next]\
    \ = '-';\n                prev = next;\n                count = 0;\n         \
    \   }\n        } else {\n            count = 1;\n            prev = next;\n  \
    \      }\n        next++;\n    }\n    return s;", "    std::string s = text;\n\
    \    std::replace(s.begin(), s.end(), ' ', '_');\n    if (s.size() > 2 && s.substr(0,\
    \ 2) == \" \") {\n        std::replace(s.begin(), s.end(), ' ', '-');\n    }\n\
    \    return s;", "    std::string s = text;\n    std::replace(s.begin(), s.end(),\
    \ ' ', '_');\n    std::replace(s.begin(), s.end(), '  ', '-');\n    return s;",
  "    std::string s = text;\n    std::replace(s.begin(), s.end(), ' ', '_');\n  \
    \  if (s.size() > 2 && s[s.size() - 1] == ' ' && s[s.size() - 2] == ' ') {\n \
    \       s.replace(s.size() - 2, s.size() - 1, ' ');\n    }\n    return s;", " \
    \   std::string res = text;\n    size_t pos = 0;\n    while ((pos = res.find(\"\
    \ \", pos)) != std::string::npos) {\n        res.insert(pos, \"_\");\n       \
    \ pos += 1;\n    }\n    if (res.size() > 2 && res[res.size() - 1] == ' ' && res[res.size()\
    \ - 2] == ' ') {\n        res.erase(res.size() - 2);\n    }\n    return res;",
  "    std::string s = text;\n    std::replace(s.begin(), s.end(), ' ', '_');\n  \
    \  if (s.size() > 2 && s[s.size() - 1] == ' ' && s[s.size() - 2] == ' ') {\n \
    \       s.replace(s.size() - 2, s.size() - 1, std::string(\"_\"));\n    }\n  \
    \  return s;", "    std::string s = text;\n    std::replace(s.begin(), s.end(),\
    \ ' ', '_');\n    if (s.size() > 2 && s.substr(0, 2) == \" \") {\n        s.replace(s.begin(),\
    \ s.begin() + 2, \"\");\n    }\n    return s;", "    std::string s = text;\n \
    \   s.replace(s.begin(), s.end(), ' ');\n    size_t prev = 0, pos = 0;\n    while\
    \ (pos < s.size()) {\n        pos = s.find_first_of(' ', prev);\n        if (pos\
    \ == std::string::npos) {\n            pos = s.size();\n        }\n        s.replace(pos,\
    \ 1, std::string(\"-\"));\n        prev = pos + 1;\n    }\n    return s;", " \
    \   std::string s = text;\n    std::replace(s.begin(), s.end(), ' ', '_');\n \
    \   if (s.size() > 2 && s[s.size() - 1] == ' ' && s[s.size() - 2] == ' ') {\n\
    \        s.replace(s.size() - 2, s.size() - 1, \"\");\n    }\n    return s;",
  "    std::string s = text;\n    std::replace(s.begin(), s.end(), ' ', '_');\n  \
    \  if (s.size() > 2 && s[s.size() - 1] == ' ' && s[s.size() - 2] == ' ') {\n \
    \       s.replace(s.size() - 2, s.size() - 1, std::string(\"_\"));\n    }\n  \
    \  return s;", "    std::string s = text;\n    s.replace(s.begin(), s.end(), '\
    \ ');\n    size_t prev = 0, next = 0, count = 0;\n    while(next < s.size()) {\n\
    \        if(s[next] == ' ') {\n            count++;\n            if(count == 2)\
    \ {\n                s[prev] = '_';\n                s[next] = '-';\n        \
    \        prev = next + 1;\n                count = 0;\n            }\n       \
    \ } else {\n            count = 0;\n        }\n        next++;\n    }\n    return\
    \ s;", "    std::string res = text;\n    std::size_t found = res.find_first_not_of(\"\
    \ \");\n    while (found != std::string::npos) {\n        res = res.substr(0,\
    \ found) + std::to_string(std::distance(text.begin(), found)) + res.substr(found\
    \ + 1);\n        found = res.find_first_not_of(\" \", found + 1);\n    }\n   \
    \ return res;", "    std::string s = text;\n    std::replace(s.begin(), s.end(),\
    \ ' ', '_');\n    if (s.size() > 2 && s[s.size() - 1] == ' ' && s[s.size() - 2]\
    \ == ' ') {\n        s.replace(s.size() - 2, s.size() - 1, \"\");\n    }\n   \
    \ return s;", "    std::string s = text;\n    std::replace(s.begin(), s.end(),\
    \ ' ', '_');\n    if (s.size() > 2 && s[s.size() - 1] == ' ' && s[s.size() - 2]\
    \ == ' ') {\n        s.replace(s.size() - 2, s.size() - 1, \"\");\n    }\n   \
    \ return s;", "    std::string s = text;\n    std::replace(s.begin(), s.end(),\
    \ ' ', '_');\n    if (s.size() > 2 && s[s.size() - 1] == ' ' && s[s.size() - 2]\
    \ == ' ') {\n        s.replace(s.size() - 2, s.size() - 1, ' ');\n    }\n    return\
    \ s;", "    std::string s = text;\n    std::replace(s.begin(), s.end(), ' ', '_');\n\
    \    if (s.size() > 2 && s[s.size() - 1] == ' ' && s[s.size() - 2] == ' ') {\n\
    \        s.replace(s.size() - 2, s.size() - 1, std::string(\"_\"));\n    }\n \
    \   return s;", "    std::string s = text;\n    std::replace(s.begin(), s.end(),\
    \ ' ', '_');\n    if (s.size() > 2 && s[s.size() - 1] == ' ' && s[s.size() - 2]\
    \ == ' ') {\n        s.replace(s.size() - 2, s.size() - 1, std::string(\"_\"));\n\
    \    }\n    return s;", "    std::string s = text;\n    std::replace(s.begin(),\
    \ s.end(), ' ', '_');\n    if (s.size() > 2 && s[s.size() - 1] == ' ' && s[s.size()\
    \ - 2] == ' ') {\n        s.replace(s.size() - 2, s.size() - 1, ' ');\n    }\n\
    \    return s;", "    std::string s = text;\n    std::replace(s.begin(), s.end(),\
    \ ' ', '_');\n    if (s.size() > 2 && s[s.size() - 1] == ' ' && s[s.size() - 2]\
    \ == ' ') {\n        s.replace(s.size() - 2, s.size() - 1, \"\");\n    }\n   \
    \ return s;", "    std::string s = text;\n    std::replace(s.begin(), s.end(),\
    \ ' ', '_');\n    if (s.size() > 2 && s.substr(0, 2) == \" \") {\n        s.replace(s.begin(),\
    \ s.begin() + 2, \"\");\n    }\n    return s;", "    std::string s = text;\n \
    \   std::replace(s.begin(), s.end(), ' ', '_');\n    if (s.size() > 2 && s[s.size()\
    \ - 1] == ' ' && s[s.size() - 2] == ' ') {\n        s.replace(s.size() - 2, s.size()\
    \ - 1, std::string(\"_\"));\n    }\n    return s;", "    std::string s = text;\n\
    \    std::replace(s.begin(), s.end(), ' ', '_');\n    if (s.size() > 2 && s.substr(0,\
    \ 2) == \" \") {\n        s.replace(s.begin(), s.begin() + 2, \"\");\n    }\n\
    \    return s;", "    std::string s = text;\n    std::replace(s.begin(), s.end(),\
    \ ' ', '_');\n    if (s.size() > 2 && s[s.size() - 1] == ' ' && s[s.size() - 2]\
    \ == ' ') {\n        s.replace(s.size() - 2, s.size() - 1, std::string(\"_\"));\n\
    \    }\n    return s;", "    std::string s = text;\n    std::replace(s.begin(),\
    \ s.end(), ' ', '_');\n    if (s.size() > 2 && s.substr(0, 2) == \" \") {\n  \
    \      std::replace(s.begin(), s.end(), ' ', '-');\n    }\n    return s;", " \
    \   std::string s = text;\n    size_t prev = 0, pos = 0;\n    while (pos < s.size())\
    \ {\n        pos = s.find_first_of(\" \", prev);\n        if (pos == std::string::npos)\
    \ {\n            pos = s.size();\n        }\n        size_t next = pos;\n    \
    \    while (next < s.size() && s[next] == ' ') {\n            next++;\n      \
    \  }\n        s.erase(prev, next);\n        prev = pos + 1;\n    }\n    while\
    \ (s.size() > 1 && s[s.size() - 1] == ' ') {\n        s.erase(s.size() - 1);\n\
    \    }\n    return s;", "    std::string s = text;\n    std::replace(s.begin(),\
    \ s.end(), ' ', '_');\n    std::replace(s.begin(), s.end(), '  ', '-');\n    return\
    \ s;", "    std::string s = text;\n    std::replace(s.begin(), s.end(), ' ', '_');\n\
    \    if (s.size() > 2 && s[s.size() - 1] == s[s.size() - 2]) {\n        std::replace(s.begin(),\
    \ s.end(), ' ', '-');\n    }\n    return s;", "    std::string s = text;\n   \
    \ s.replace(s.begin(), s.end(), ' ');\n    size_t prev = 0, next = 0, count =\
    \ 0;\n    while (next < s.size()) {\n        if (s[next] == ' ') {\n         \
    \   count++;\n            if (count == 2) {\n                s[prev] = s[next]\
    \ = '_';\n                prev++;\n                next++;\n                count\
    \ = 0;\n            }\n        } else {\n            count = 0;\n        }\n \
    \       next++;\n    }\n    return s;", "    std::string out = text;\n    for(size_t\
    \ i = 0; i < out.size(); i++) {\n        if(out[i] == ' ') {\n            if(i\
    \ + 1 < out.size() && out[i + 1] == ' ') {\n                out[i] = '_';\n  \
    \              i++;\n            }\n        }\n    }\n    \n    size_t count =\
    \ 0;\n    for(size_t i = 0; i < out.size(); i++) {\n        if(out[i] == ' ')\
    \ {\n            count++;\n        } else {\n            count = 0;\n        }\n\
    \        if(count == 2) {\n            out[i] = '_';\n        }\n    }\n    \n\
    \    return out;", "    std::string s = text;\n    std::replace(s.begin(), s.end(),\
    \ ' ', '_');\n    if (s.size() > 2 && s[s.size() - 1] == ' ' && s[s.size() - 2]\
    \ == ' ') {\n        s.replace(s.size() - 2, s.size() - 1, std::string(\"_\"));\n\
    \    }\n    return s;", "    std::string result = text;\n    size_t pos = 0;\n\
    \    while((pos = result.find(\" \", pos)) != std::string::npos) {\n        result.replace(pos,\
    \ 1, std::string(\"_\"));\n        pos = result.find(\" \", pos + 1);\n    }\n\
    \    while((pos = result.find(\"  \", pos)) != std::string::npos) {\n        result.replace(pos,\
    \ 2, std::string(\"-\"));\n        pos = result.find(\"  \", pos + 2);\n    }\n\
    \    return result;", "    std::string s = text;\n    std::replace(s.begin(),\
    \ s.end(), ' ', '_');\n    if (s.size() > 2 && s[s.size() - 1] == s[s.size() -\
    \ 2]) {\n        std::replace(s.begin(), s.end(), ' ', '-');\n    }\n    return\
    \ s;", "    std::string s = text;\n    for(size_t i = 0; i < s.length(); i++)\
    \ {\n        if(s[i] == ' ') {\n            s[i] = '_';\n        }\n        if(s[i\
    \ + 1] == ' ' && s[i + 2] == ' ') {\n            s[i] = '-';\n        }\n    }\n\
    \    return s;", "    std::string result = text;\n    size_t pos = 0;\n    while\
    \ ((pos = result.find(\" \", pos)) != std::string::npos) {\n        result.replace(pos,\
    \ 1, std::string(\" \"));\n        ++pos;\n    }\n    if (result.length() > 2)\
    \ {\n        pos = 0;\n        while ((pos = result.find(\" \", pos)) != std::string::npos)\
    \ {\n            result.replace(pos, 1, std::string(\"-\"));\n            ++pos;\n\
    \        }\n    }\n    return result;", "    std::string s = text;\n    std::replace(s.begin(),\
    \ s.end(), ' ', '_');\n    if (s.size() > 2 && s[s.size() - 1] == ' ' && s[s.size()\
    \ - 2] == ' ') {\n        s.replace(s.size() - 2, s.size() - 1, std::string(\"\
    _\"));\n    }\n    return s;", "    std::string s = text;\n    std::replace(s.begin(),\
    \ s.end(), ' ', '_');\n    if (s.size() > 2 && s.substr(0, 2) == \" \") {\n  \
    \      s.replace(s.begin(), s.begin() + 2, \"\");\n    }\n    return s;", "  \
    \  std::string s = text;\n    std::replace(s.begin(), s.end(), ' ', '_');\n  \
    \  if (s.size() > 2 && s.substr(0, 2) == \" \") {\n        std::replace(s.begin(),\
    \ s.end(), ' ', '_');\n    }\n    return s;", "    std::string s = text;\n   \
    \ std::replace(s.begin(), s.end(), ' ', '_');\n    if (s.size() > 2 && s[s.size()\
    \ - 1] == ' ' && s[s.size() - 2] == ' ') {\n        s.replace(s.size() - 2, s.size()\
    \ - 1, \"\");\n    }\n    return s;", "    std::string s = text;\n    std::replace(s.begin(),\
    \ s.end(), ' ', '_');\n    if (s.size() > 2 && s.substr(0, 2) == \" \") {\n  \
    \      std::replace(s.begin(), s.end(), ' ', '_');\n    }\n    return s;", " \
    \   std::string s = text;\n    std::replace(s.begin(), s.end(), ' ', '_');\n \
    \   if (s.size() > 2 && s.substr(0, 2) == \" \") {\n        s.replace(s.begin(),\
    \ s.begin() + 2, \"\");\n    }\n    return s;", "    std::string out = text;\n\
    \    for (size_t i = 0; i < out.size(); i++) {\n        if (out[i] == ' ') {\n\
    \            out[i] = '_';\n        }\n        if (out[i] == ' ' && out[i+1] ==\
    \ ' ') {\n            out[i] = '-';\n        }\n    }\n    return out;", "   \
    \ std::string res = text;\n    size_t pos = 0;\n    while(pos < res.size()) {\n\
    \        if(res[pos] == ' ') {\n            res[pos] = '_';\n            pos +=\
    \ 1;\n        }\n        else if(res[pos] == ' ' && pos != 0) {\n            res[pos]\
    \ = '-';\n            pos += 1;\n        }\n        pos += 1;\n    }\n    return\
    \ res;", "    std::string s = text;\n    for(size_t i = 0; i < s.length(); i++)\
    \ {\n        if(s[i] == ' ') {\n            s[i] = '_';\n        }\n        if(s[i\
    \ + 1] == ' ' && s[i + 2] == ' ') {\n            s[i] = '-';\n            s[i\
    \ + 1] = '-';\n            s[i + 2] = '-';\n        }\n    }\n    return s;",
  "    std::string res = text;\n    size_t pos = 0;\n    while ((pos = res.find(\"\
    \ \", pos)) != std::string::npos) {\n        res = res.substr(0, pos) + \"_\"\
    \ + res.substr(pos + 1);\n        pos = res.find(\" \", pos);\n    }\n    return\
    \ res;", "    std::string s = text;\n    s.replace(s.begin(), s.end(), ' ');\n\
    \    size_t prev = 0, next = 0, count = 0;\n    while (next < s.size()) {\n  \
    \      if (s[next] == ' ') {\n            count++;\n        } else {\n       \
    \     if (count > 1) {\n                s.replace(prev, (next - prev), std::string(\"\
    _\") + std::to_string(count));\n                prev = next + 1;\n           \
    \     count = 0;\n            } else {\n                prev = next + 1;\n   \
    \             count = 0;\n            }\n        }\n        ++next;\n    }\n \
    \   return s;", "    std::string s = text;\n    std::replace(s.begin(), s.end(),\
    \ ' ', '_');\n    std::replace(s.begin(), s.end(), '  ', '-');\n    return s;",
  "    std::string s = text;\n    std::replace(s.begin(), s.end(), ' ', '_');\n  \
    \  if (s.size() > 2 && s[s.size() - 1] == ' ' && s[s.size() - 2] == ' ') {\n \
    \       s.replace(s.size() - 2, s.size() - 1, std::string(\"_\"));\n    }\n  \
    \  return s;", "    std::string s = text;\n    size_t pos = 0;\n    while(pos\
    \ < s.size()) {\n        if(s[pos] == ' ') {\n            s[pos] = '_';\n    \
    \        pos++;\n        }\n        else {\n            pos++;\n        }\n  \
    \  }\n    return s;", "    std::string result = text;\n    size_t pos = 0;\n \
    \   while ((pos = result.find(\" \", pos)) != std::string::npos) {\n        result.replace(pos,\
    \ 1, std::string(\" \"));\n        ++pos;\n    }\n    while (pos < result.length()\
    \ && result[pos] == ' ')\n        ++pos;\n    while (pos < result.length() &&\
    \ result[pos] == ' ')\n        result.replace(pos, 1, std::string(\"-\"));\n \
    \   return result;", "    std::string s = text;\n    std::replace(s.begin(), s.end(),\
    \ ' ', '_');\n    if (s.size() > 2 && s[s.size() - 1] == s[s.size() - 2]) {\n\
    \        std::replace(s.begin(), s.end(), ' ', '-');\n    }\n    return s;", " \
    \   std::string s = text;\n    std::replace(s.begin(), s.end(), ' ', '_');\n \
    \   std::replace(s.begin(), s.end(), '  ', '-');\n    return s;", "    std::string\
    \ s = text;\n    s.replace(s.begin(), s.end(), ' ');\n    if (s.size() > 2) {\n\
    \        s.replace(s.begin(), s.end(), ' ');\n        s.replace(s.begin(), s.end(),\
    \ '-');\n    }\n    return s;", "    std::string s = text;\n    std::replace(s.begin(),\
    \ s.end(), ' ', '_');\n    if (s.size() > 2 && s[s.size() - 1] == ' ' && s[s.size()\
    \ - 2] == ' ') {\n        s.replace(s.size() - 2, s.size() - 1, \"\");\n    }\n\
    \    return s;", "    std::string s = text;\n    std::replace(s.begin(), s.end(),\
    \ ' ', '_');\n    if (s.size() > 2 && s.substr(0, 2) == \" \") {\n        s.replace(s.begin(),\
    \ s.begin() + 2, \"\");\n    }\n    return s;", "    std::string s = text;\n \
    \   std::replace(s.begin(), s.end(), ' ', '_');\n    if (s.size() > 2 && s[s.size()\
    \ - 1] == ' ' && s[s.size() - 2] == ' ') {\n        s.replace(s.size() - 2, s.size()\
    \ - 1, std::string(\"_\"));\n    }\n    return s;", "    std::string s = text;\n\
    \    std::replace(s.begin(), s.end(), ' ', '_');\n    std::replace(s.begin(),\
    \ s.end(), '  ', '-');\n    return s;", "    std::string s = text;\n    std::replace(s.begin(),\
    \ s.end(), ' ', '_');\n    if (s.size() > 2 && s[s.size() - 1] == ' ' && s[s.size()\
    \ - 2] == ' ') {\n        s.replace(s.size() - 2, s.size() - 1, std::string(\"\
    _\"));\n    }\n    return s;", "    std::string s = text;\n    std::replace(s.begin(),\
    \ s.end(), ' ', '_');\n    if (s.size() > 2 && s[s.size() - 1] == ' ' && s[s.size()\
    \ - 2] == ' ') {\n        s.replace(s.size() - 2, s.size() - 1, ' ');\n    }\n\
    \    return s;", "    std::string s = text;\n    std::replace(s.begin(), s.end(),\
    \ ' ', '_');\n    if (s.size() > 2 && s[s.size() - 1] == s[s.size() - 2]) {\n\
    \        std::replace(s.begin(), s.end(), ' ', '-');\n    }\n    return s;", " \
    \   std::string s = text;\n    s.replace(s.begin(), s.end(), ' ');\n    size_t\
    \ pos = 0;\n    while (pos < s.size()) {\n        size_t prev = pos;\n       \
    \ pos = s.find_first_not_of(\" \", pos);\n        if (pos != std::string::npos)\
    \ {\n            s.erase(prev, pos + 1);\n        }\n    }\n    while (pos < s.size())\
    \ {\n        size_t prev = pos;\n        pos = s.find_first_of(\" \", pos);\n\
    \        if (pos != std::string::npos) {\n            s.insert(prev, \"-\");\n\
    \        }\n    }\n    return s;", "    std::string s = text;\n    std::replace(s.begin(),\
    \ s.end(), ' ', '_');\n    if (s.size() > 2 && s.substr(0, 2) == \" \") {\n  \
    \      s.replace(s.begin(), s.begin() + 2, \"\");\n    }\n    return s;", "  \
    \  std::string s = text;\n    std::replace(s.begin(), s.end(), ' ', '_');\n  \
    \  if (s.size() > 2 && s[s.size() - 1] == ' ' && s[s.size() - 2] == ' ') {\n \
    \       s.replace(s.size() - 2, s.size() - 1, std::string(\"_\"));\n    }\n  \
    \  return s;", "    std::string s = text;\n    std::replace(s.begin(), s.end(),\
    \ ' ', '_');\n    if (s.size() > 2 && s[s.size() - 1] == ' ' && s[s.size() - 2]\
    \ == ' ') {\n        s.replace(s.size() - 2, s.size() - 1, std::string(\"_\"));\n\
    \    }\n    return s;", "    std::string s = text;\n    for(size_t i = 0; i <\
    \ s.length(); i++) {\n        if(s[i] == ' ') {\n            s[i] = '_';\n   \
    \     }\n        if(s.substr(i, 2) == \" \") {\n            s[i] = '_';\n    \
    \    }\n    }\n    return s;", "    std::string s = text;\n    std::replace(s.begin(),\
    \ s.end(), ' ', '_');\n    if (s.size() > 2 && s[s.size() - 1] == ' ' && s[s.size()\
    \ - 2] == ' ') {\n        s.replace(s.size() - 2, s.size() - 1, ' ');\n    }\n\
    \    return s;", "    std::string s = text;\n    std::replace(s.begin(), s.end(),\
    \ ' ', '_');\n    std::replace(s.begin(), s.end(), ' ', '_');\n    if (s.size()\
    \ > 2 && s[s.size() - 1] == ' ' && s[s.size() - 2] == ' ') {\n        std::replace(s.begin(),\
    \ s.end(), ' ', '-');\n    }\n    return s;", "    std::string s = text;\n   \
    \ std::replace(s.begin(), s.end(), ' ', '_');\n    if (s.size() > 2 && s[s.size()\
    \ - 1] == ' ' && s[s.size() - 2] == ' ') {\n        s.replace(s.size() - 2, s.size()\
    \ - 1, ' ');\n    }\n    return s;", "    std::string s = text;\n    std::replace(s.begin(),\
    \ s.end(), ' ', '_');\n    if (s.size() > 2 && s.substr(0, 2) == \" \") {\n  \
    \      std::replace(s.begin(), s.end(), ' ', '_');\n    }\n    return s;", " \
    \   std::string s = text;\n    std::replace(s.begin(), s.end(), ' ', '_');\n \
    \   if (s.size() > 2 && s[s.size() - 1] == s[s.size() - 2]) {\n        s.replace(s.size()\
    \ - 2, s.size() - 1, ' ');\n    }\n    return s;", "    std::string s = text;\n\
    \    std::replace(s.begin(), s.end(), ' ', '_');\n    if (s.size() > 2 && s[s.size()\
    \ - 1] == s[s.size() - 2]) {\n        std::replace(s.begin(), s.end(), ' ', '-');\n\
    \    }\n    return s;", "    std::string s = text;\n    std::replace(s.begin(),\
    \ s.end(), ' ', '_');\n    if (s.size() > 2 && s[s.size() - 1] == s[s.size() -\
    \ 2]) {\n        std::replace(s.begin(), s.end(), ' ', '_');\n    }\n    return\
    \ s;", "    std::string s = text;\n    for(size_t i = 0; i < s.size(); i++) {\n\
    \        if(s[i] == ' ') {\n            s[i] = '_';\n        }\n        if(s.substr(i,\
    \ 2) == \" \") {\n            s[i] = '_';\n            s[i+1] = '-';\n       \
    \ }\n    }\n    return s;", "    std::string s = text;\n    std::replace(s.begin(),\
    \ s.end(), ' ', '_');\n    if (s.size() > 2 && s[s.size() - 1] == ' ' && s[s.size()\
    \ - 2] == ' ') {\n        s.replace(s.size() - 2, s.size() - 1, std::string(\"\
    _\"));\n    }\n    return s;", "    std::string res = text;\n    size_t pos =\
    \ 0;\n    while ((pos = res.find(\" \", pos)) != std::string::npos) {\n      \
    \  res = res.substr(0, pos) + \"_\" + res.substr(pos + 1);\n        pos = res.find(\"\
    \ \", pos);\n    }\n    if (res.size() > 2 && res.substr(0, 2) == \"_ \")\n  \
    \      res = res.substr(2);\n    return res;", "    std::string s = text;\n  \
    \  std::replace(s.begin(), s.end(), ' ', '_');\n    if (s.size() > 2 && s[s.size()\
    \ - 1] == ' ' && s[s.size() - 2] == ' ') {\n        s.replace(s.size() - 2, s.size()\
    \ - 1, std::string(\"_\"));\n    }\n    return s;", "    std::string s = text;\n\
    \    std::replace(s.begin(), s.end(), ' ', '_');\n    if (s.size() > 2 && s[s.size()\
    \ - 1] == ' ' && s[s.size() - 2] == ' ') {\n        s.replace(s.size() - 2, s.size()\
    \ - 1, std::string(\"_\"));\n    }\n    return s;", "    std::string result =\
    \ text;\n    size_t pos = 0;\n    while ((pos = result.find(\" \", pos)) != std::string::npos)\
    \ {\n        result.replace(pos, 1, std::string(\"_\"));\n        pos = pos +\
    \ 1;\n    }\n    if (result.length() > 2) {\n        size_t pos = 0;\n       \
    \ while ((pos = result.find(\" \", pos)) != std::string::npos) {\n           \
    \ result.replace(pos, 1, std::string(\"-\"));\n            pos = pos + 1;\n  \
    \      }\n    }\n    return result;", "    std::string s = text;\n    s.replace(s.begin(),\
    \ s.end(), ' ');\n    size_t prev = 0, next = 0, count = 0;\n    while (next <\
    \ s.size()) {\n        if (s[next] == ' ') {\n            count++;\n         \
    \   if (count == 2) {\n                s[prev++] = s[next];\n                s[next]\
    \ = '-';\n                count = 0;\n            } else {\n                s[next]\
    \ = '_';\n            }\n        } else {\n            count = 0;\n        }\n\
    \        next++;\n    }\n    return s;", "    std::string res = text;\n    std::replace(std::begin(res),\
    \ std::end(res), ' ', '_');\n    if (res.size() > 2) {\n        std::replace(std::begin(res),\
    \ std::end(res), ' ', '_');\n    }\n    return res;", "    std::string s = text;\n\
    \    std::replace(s.begin(), s.end(), ' ', '_');\n    if (s.size() > 2 && s[s.size()\
    \ - 1] == ' ' && s[s.size() - 2] == ' ') {\n        s.replace(s.size() - 2, s.size()\
    \ - 1, std::string(\"_\"));\n    }\n    return s;", "    std::string s = text;\n\
    \    std::replace(s.begin(), s.end(), ' ', '_');\n    if (s.size() > 2 && s[s.size()\
    \ - 1] == ' ' && s[s.size() - 2] == ' ') {\n        s.replace(s.size() - 2, s.size()\
    \ - 1, \"\");\n    }\n    return s;", "    std::string result = text;\n    size_t\
    \ pos = 0;\n    while ((pos = result.find(\" \", pos)) != std::string::npos) {\n\
    \        result.replace(pos, 1, std::string(\"_\"));\n        pos += 1;\n    }\n\
    \    if (result.size() > 2 && result[result.size() - 1] == ' ' && result[result.size()\
    \ - 2] == ' ') {\n        result.replace(result.size() - 1, 1, std::string(\"\
    -\"));\n    }\n    return result;", "    std::string out = text;\n    for(size_t\
    \ i = 0; i < out.size(); i++) {\n        if(out[i] == ' ') {\n            out[i]\
    \ = '_';\n        }\n    }\n    size_t prev = 0, next = 0;\n    for(size_t i =\
    \ 0; i < out.size(); i++) {\n        if(out[i] == '_') {\n            if(prev\
    \ == i) {\n                prev = i + 1;\n            }\n            if(next ==\
    \ i) {\n                next = i + 1;\n            }\n        }\n    }\n    if(prev\
    \ != out.size()) {\n        for(size_t i = prev; i < out.size(); i++) {\n    \
    \        out[i] = '_';\n        }\n    }\n    if(next != out.size()) {\n     \
    \   for(size_t i = next; i < out.size(); i++) {\n            out[i] = '_';\n \
    \       }\n    }\n    return out;", "    std::string out = text;\n    for (size_t\
    \ i = 0; i < out.size(); i++) {\n        if (out[i] == ' ') {\n            out[i]\
    \ = '_';\n        }\n    }\n    if (out.size() > 2 && out.substr(0, 2) == \" \"\
    ) {\n        out = out.substr(1);\n    }\n    for (size_t i = 0; i < out.size();\
    \ i++) {\n        if (out[i] == ' ') {\n            out[i] = '_';\n        }\n\
    \    }\n    return out;", "    std::string s = text;\n    s.replace(s.begin(),\
    \ s.end(), ' ');\n    size_t prev = 0, pos = 0;\n    while (pos < s.size()) {\n\
    \        pos = s.find_first_not_of(\" \", prev);\n        if (pos == std::string::npos)\
    \ {\n            pos = s.size();\n        }\n        s.replace(pos, 1, std::string(\"\
    \ \"));\n        prev = pos + 1;\n    }\n    return s;", "    std::string s =\
    \ text;\n    std::replace(s.begin(), s.end(), ' ', '_');\n    if (s.size() > 2\
    \ && s.substr(0, 2) == \" \") {\n        s.replace(s.begin(), s.begin() + 2, \"\
    \");\n    }\n    return s;", "    std::string s = text;\n    s.replace(s.begin(),\
    \ s.end(), ' ');\n    size_t prev = 0, next = 0, len = s.size();\n    while (next\
    \ < len) {\n        if (s[next] == ' ') {\n            s[prev++] = s[next++];\n\
    \        } else if (s[next] == '\\t') {\n            s[prev++] = s[next++];\n\
    \            s[prev++] = s[next++];\n        } else {\n            s[prev++] =\
    \ s[next++];\n        }\n    }\n    s[prev] = '\\0';\n    return s;", "    std::string\
    \ res = text;\n    std::replace(std::begin(res), std::end(res), ' ', '_');\n \
    \   if (res.find_first_not_of(' ') != std::string::npos) {\n        std::replace(std::begin(res),\
    \ std::end(res), ' ', '-');\n    }\n    return res;", "    std::string s = text;\n\
    \    s.replace(s.begin(), s.end(), ' ');\n    size_t prev = 0, pos = 0;\n    while\
    \ (pos < s.size()) {\n        if (s[pos] == ' ') {\n            s[prev++] = s[pos];\n\
    \            s[pos] = '_';\n            prev = pos;\n            ++pos;\n    \
    \    }\n        else {\n            ++pos;\n        }\n    }\n    return s;",
  "    std::string s = text;\n    std::replace(s.begin(), s.end(), ' ', '_');\n  \
    \  if (s.size() > 2 && s[s.size() - 1] == ' ' && s[s.size() - 2] == ' ') {\n \
    \       s.replace(s.size() - 2, s.size() - 1, \"\");\n    }\n    return s;", " \
    \   std::string s = text;\n    std::replace(s.begin(), s.end(), ' ', '_');\n \
    \   if (s.size() > 2) {\n        std::replace(s.begin(), s.end(), ' ', '_');\n\
    \    }\n    return s;", "    std::string s = text;\n    s.replace(s.begin(), s.end(),\
    \ ' ');\n    int count = 0;\n    for (int i = 0; i < s.size(); i++) {\n      \
    \  if (s[i] == ' ') {\n            count++;\n            if (count == 2) {\n \
    \               s.replace(i, i + 1, \"-\");\n                i += 1;\n       \
    \         count = 0;\n            }\n        }\n    }\n    return s;", "    std::string\
    \ s = text;\n    std::replace(s.begin(), s.end(), ' ', '_');\n    if (s.size()\
    \ > 2 && s[s.size() - 1] == ' ' && s[s.size() - 2] == ' ') {\n        s.replace(s.size()\
    \ - 2, s.size() - 1, std::string(\"_\"));\n    }\n    return s;", "    std::string\
    \ s = text;\n    std::replace(s.begin(), s.end(), ' ', '_');\n    if (s.size()\
    \ > 2 && s[s.size() - 1] == ' ' && s[s.size() - 2] == ' ') {\n        s.replace(s.size()\
    \ - 2, s.size() - 1, \"\");\n    }\n    return s;", "    std::string s = text;\n\
    \    std::replace(s.begin(), s.end(), ' ', '_');\n    if (s.size() > 2 && s[s.size()\
    \ - 1] == ' ' && s[s.size() - 2] == ' ') {\n        s.replace(s.size() - 2, s.size()\
    \ - 1, \"\");\n    }\n    return s;", "    std::string s = text;\n    s.replace(s.begin(),\
    \ s.end(), ' ');\n    size_t prev = 0, pos = 0;\n    while (pos < s.size()) {\n\
    \        pos = s.find_first_not_of(\" \", prev);\n        if (pos == std::string::npos)\
    \ {\n            break;\n        }\n        s.replace(pos, 1, std::string(\"-\"\
    ));\n        prev = pos + 1;\n    }\n    return s;", "    std::string s = text;\n\
    \    for(size_t i = 0; i < s.length(); i++) {\n        if(s[i] == ' ') {\n   \
    \         s[i] = '_';\n        }\n    }\n    size_t prev = 0, next = 0, count\
    \ = 0;\n    while(next < s.length()) {\n        if(s[next] == ' ') {\n       \
    \     count++;\n            while(s[next] == ' ' && next < s.length()) {\n   \
    \             next++;\n            }\n            if(count > 2) {\n          \
    \      s[prev] = '-';\n                prev = next;\n                count = 0;\n\
    \            }\n        } else {\n            count = 0;\n        }\n        next++;\n\
    \    }\n    return s;", "    std::string s = text;\n    std::replace(s.begin(),\
    \ s.end(), ' ', '_');\n    if (s.size() > 2 && s[s.size() - 1] == ' ' && s[s.size()\
    \ - 2] == ' ') {\n        s.replace(s.size() - 2, s.size() - 1, \"\");\n    }\n\
    \    return s;", "    std::string out = text;\n    for (size_t i = 0; i < out.size();\
    \ i++) {\n        if (out[i] == ' ') {\n            out[i] = '_';\n        }\n\
    \    }\n    size_t prev = 0, next = 0, count = 0;\n    for (size_t i = 0; i <\
    \ out.size(); i++) {\n        if (out[i] == ' ') {\n            prev = i;\n  \
    \          count = 1;\n        }\n        if (count == 2) {\n            next\
    \ = i;\n            out[prev] = out[next];\n            count = 1;\n        }\n\
    \    }\n    return out;", "    std::string s = text;\n    std::replace(s.begin(),\
    \ s.end(), ' ', '_');\n    if (s.size() > 2 && s[s.size() - 1] == ' ' && s[s.size()\
    \ - 2] == ' ') {\n        s.replace(s.size() - 2, s.size() - 1, \"\");\n    }\n\
    \    return s;", "    std::string s = text;\n    s.replace(s.begin(), s.end(),\
    \ ' ');\n    size_t prev = 0, pos = 0;\n    while (pos < s.size()) {\n       \
    \ if (s[pos] == ' ') {\n            s[prev++] = s[pos];\n            s[pos] =\
    \ '_';\n            prev = pos;\n            ++pos;\n        }\n        ++pos;\n\
    \    }\n    return s;", "    std::string s = text;\n    std::replace(s.begin(),\
    \ s.end(), ' ', '_');\n    if (s.size() > 2 && s[s.size() - 1] == ' ' && s[s.size()\
    \ - 2] == ' ') {\n        s.replace(s.size() - 2, s.size() - 1, \"\");\n    }\n\
    \    return s;", "    std::string s = text;\n    std::replace(s.begin(), s.end(),\
    \ ' ', '_');\n    std::replace(s.begin(), s.end(), '  ', '-');\n    return s;",
  "    std::string res = text;\n    std::replace(std::begin(res), std::end(res), '\
    \ ', '_');\n    std::replace(std::begin(res), std::end(res), ' ', '_');\n    std::replace(std::begin(res),\
    \ std::end(res), ' ', '_');\n    std::replace(std::begin(res), std::end(res),\
    \ ' ', '_');\n    std::replace(std::begin(res), std::end(res), ' ', '_');\n  \
    \  return res;", "    std::string res = text;\n    std::replace(std::begin(res),\
    \ std::end(res), ' ', '_');\n    std::replace(std::begin(res), std::end(res),\
    \ ' ', '_');\n    std::replace(std::begin(res), std::end(res), ' ', '-');\n  \
    \  return res;", "    std::string s = text;\n    for(size_t i = 0; i < s.length();\
    \ i++) {\n        if(s[i] == ' ') {\n            s[i] = '_';\n        }\n    \
    \    if(i > 0 && s[i-1] == ' ') {\n            s[i] = '_';\n        }\n    }\n\
    \    \n    size_t count = 0;\n    for(size_t i = 0; i < s.length(); i++) {\n \
    \       if(s[i] == ' ') {\n            count++;\n        }\n    }\n    \n    if(count\
    \ > 2) {\n        for(size_t i = 0; i < s.length(); i++) {\n            if(s[i]\
    \ == ' ') {\n                s[i] = '-';\n            }\n        }\n    }\n  \
    \  \n    return s;", "    std::string s = text;\n    std::replace(s.begin(), s.end(),\
    \ ' ', '_');\n    std::replace(s.begin(), s.end(), '  ', '-');\n    return s;",
  "    std::string s = text;\n    std::replace(s.begin(), s.end(), ' ', '_');\n  \
    \  if (s.size() > 2 && s.substr(0, 2) == \" \") {\n        s.replace(s.begin(),\
    \ s.begin() + 2, \"\");\n    }\n    return s;", "    std::string s = text;\n \
    \   std::replace(s.begin(), s.end(), ' ', '_');\n    if (s.size() > 2 && s[s.size()\
    \ - 1] == ' ' && s[s.size() - 2] == ' ') {\n        s.replace(s.size() - 2, s.size()\
    \ - 1, std::string(\"_\"));\n    }\n    return s;", "    std::string out = text;\n\
    \    for(size_t i = 0; i < out.size(); i++) {\n        if(out[i] == ' ') {\n \
    \           out[i] = '_';\n        }\n    }\n    size_t count = 0;\n    for(size_t\
    \ i = 0; i < out.size(); i++) {\n        if(out[i] == ' ') {\n            count++;\n\
    \            if(count == 2) {\n                out[i] = '_';\n            }\n\
    \        }\n    }\n    return out;", "    std::string s = text;\n    std::replace(s.begin(),\
    \ s.end(), ' ', '_');\n    if (s.size() > 2 && s[s.size() - 1] == ' ' && s[s.size()\
    \ - 2] == ' ') {\n        s.replace(s.size() - 2, s.size() - 1, \"\");\n    }\n\
    \    return s;", "    std::string s = text;\n    std::replace(s.begin(), s.end(),\
    \ ' ', '_');\n    if (s.size() > 2) {\n        std::replace(s.begin(), s.end(),\
    \ ' ', '_');\n    }\n    return s;", "    std::string s = text;\n    std::replace(s.begin(),\
    \ s.end(), ' ', '_');\n    if (s.size() > 2 && s.substr(0, 2) == \" \") {\n  \
    \      s.replace(s.begin(), s.begin() + 2, \"\");\n    }\n    return s;", "  \
    \  std::string s = text;\n    std::replace(s.begin(), s.end(), ' ', '_');\n  \
    \  if (s.size() > 2 && s.substr(0, 2) == \" \") {\n        std::replace(s.begin(),\
    \ s.end(), ' ', '_');\n    }\n    return s;", "    std::string s = text;\n   \
    \ s.replace(s.begin(), s.end(), ' ');\n    size_t prev = 0, next = 0, count =\
    \ 0;\n    while (next < s.size()) {\n        if (s[next] == ' ') {\n         \
    \   count++;\n            if (count == 2) {\n                s[prev] = '_';\n\
    \                s[next] = '-';\n                prev++;\n                next++;\n\
    \                count = 0;\n            }\n        } else {\n            count\
    \ = 0;\n        }\n        next++;\n    }\n    return s;", "    std::string s\
    \ = text;\n    std::replace(s.begin(), s.end(), ' ', '_');\n    std::replace(s.begin(),\
    \ s.end(), '  ', '-');\n    return s;", "    std::string s = text;\n    std::replace(s.begin(),\
    \ s.end(), ' ', '_');\n    if (s.size() > 2 && s[s.size() - 1] == ' ' && s[s.size()\
    \ - 2] == ' ') {\n        s.replace(s.size() - 2, s.size() - 1, \"\");\n    }\n\
    \    return s;", "    std::string s = text;\n    std::replace(s.begin(), s.end(),\
    \ ' ', '_');\n    std::replace(s.begin(), s.end(), '  ', '-');\n    return s;",
  "    std::string s = text;\n    std::replace(s.begin(), s.end(), ' ', '_');\n  \
    \  if (s.size() > 2 && s[s.size() - 1] == ' ' && s[s.size() - 2] == ' ') {\n \
    \       s.replace(s.size() - 2, s.size() - 1, std::string(\"_\"));\n    }\n  \
    \  return s;", "    std::string s = text;\n    std::replace(s.begin(), s.end(),\
    \ ' ', '_');\n    if (s.size() > 2 && s.substr(0, 2) == \" \") {\n        s.replace(s.begin(),\
    \ s.begin() + 2, \"\");\n    }\n    return s;", "    std::string s = text;\n \
    \   std::replace(s.begin(), s.end(), ' ', '_');\n    if (s.size() > 2 && s[s.size()\
    \ - 1] == s[s.size() - 2]) {\n        std::replace(s.begin(), s.end(), ' ', '_');\n\
    \    }\n    return s;", "    std::string res = text;\n    std::replace(std::begin(res),\
    \ std::end(res), ' ', '_');\n    if (std::adjacent_find(std::begin(res), std::end(res))\
    \ != std::end(res)) {\n        std::replace(std::begin(res), std::end(res), '\
    \ ', '-');\n    }\n    return res;", "    std::string s = text;\n    std::replace(s.begin(),\
    \ s.end(), ' ', '_');\n    if (s.size() > 2 && s.substr(0, 2) == \" \") {\n  \
    \      s.replace(s.begin(), s.begin() + 2, \"\");\n    }\n    return s;", "  \
    \  std::string s = text;\n    std::replace(s.begin(), s.end(), ' ', '_');\n  \
    \  if (s.size() > 2 && s[s.size() - 1] == ' ' && s[s.size() - 2] == ' ') {\n \
    \       s.replace(s.size() - 2, s.size() - 1, std::string(\"_\"));\n    }\n  \
    \  return s;", "    std::string s = text;\n    size_t prev = 0, pos = 0;\n   \
    \ while (pos < s.size()) {\n        pos = s.find_first_not_of(\" \", prev);\n\
    \        if (pos == std::string::npos) {\n            break;\n        }\n    \
    \    s.replace(pos, 1, std::string(\" \"));\n        prev = pos + 1;\n    }\n\
    \    while (pos < s.size()) {\n        pos = s.find_first_of(\" \", prev);\n \
    \       if (pos == std::string::npos) {\n            break;\n        }\n     \
    \   s.replace(pos, 1, std::string(\"_\"));\n        prev = pos + 1;\n    }\n \
    \   return s;", "    std::string s = text;\n    s.replace(s.begin(), s.end(),\
    \ ' ');\n    size_t prev = 0, pos = 0;\n    while (pos < s.size()) {\n       \
    \ pos = s.find_first_not_of(\" \", prev);\n        if (pos == std::string::npos)\
    \ pos = s.size();\n        s.replace(pos, 1, std::string(\"-\"));\n        prev\
    \ = pos + 1;\n    }\n    return s;", "    std::string s = text;\n    std::replace(s.begin(),\
    \ s.end(), ' ', '_');\n    if (s.size() > 2 && s[s.size() - 1] == ' ' && s[s.size()\
    \ - 2] == ' ') {\n        s.replace(s.size() - 2, s.size() - 1, \"\");\n    }\n\
    \    return s;", "    std::string s = text;\n    std::replace(s.begin(), s.end(),\
    \ ' ', '_');\n    if (s.size() > 2 && s[s.size() - 1] == ' ' && s[s.size() - 2]\
    \ == ' ') {\n        s.replace(s.size() - 2, s.size() - 1, ' ');\n    }\n    return\
    \ s;", "    std::string s = text;\n    std::replace(s.begin(), s.end(), ' ', '_');\n\
    \    if (s.size() > 2 && s.substr(0, 2) == \" \") {\n        s.replace(s.begin(),\
    \ s.begin() + 2, \"\");\n    }\n    return s;", "    std::string res = text;\n\
    \    size_t pos = 0;\n    while ((pos = res.find(\" \", pos)) != std::string::npos)\
    \ {\n        res = res.substr(0, pos) + \"_\" + res.substr(pos + 1);\n       \
    \ pos = res.find(\" \", pos);\n    }\n    if (res.size() > 2) {\n        while\
    \ ((pos = res.find(\" \", pos)) != std::string::npos) {\n            res = res.substr(0,\
    \ pos) + \"-\" + res.substr(pos + 1);\n            pos = res.find(\" \", pos);\n\
    \        }\n    }\n    return res;", "    std::string result = text;\n    size_t\
    \ pos = 0;\n    while ((pos = result.find(\" \", pos)) != std::string::npos) {\n\
    \        result.replace(pos, 1, std::string(\"_\"));\n        pos += 1;\n    }\n\
    \    if (result.size() > 2) {\n        pos = 0;\n        while ((pos = result.find(\"\
    \ \", pos)) != std::string::npos) {\n            result.replace(pos, 1, std::string(\"\
    -\"));\n            pos += 1;\n        }\n    }\n    return result;", "    std::string\
    \ s = text;\n    std::replace(s.begin(), s.end(), ' ', '_');\n    if (s.size()\
    \ > 2) {\n        std::replace(s.begin(), s.end(), ' ', '_');\n    }\n    return\
    \ s;", "    std::string s = text;\n    std::replace(s.begin(), s.end(), ' ', '_');\n\
    \    if (s.size() > 2 && s[s.size() - 1] == ' ' && s[s.size() - 2] == ' ') {\n\
    \        s.replace(s.size() - 2, s.size() - 1, \"\");\n    }\n    return s;",
  "    std::string result = text;\n    size_t pos = 0;\n    while((pos = result.find(\"\
    \ \", pos)) != std::string::npos) {\n        result.replace(pos, 1, std::string(\"\
    _\"));\n        pos += 1;\n    }\n    while((pos = result.find_first_not_of(\"\
    \ \", pos)) != std::string::npos) {\n        result.replace(pos, 1, std::string(\"\
    -\"));\n        pos += 1;\n    }\n    return result;", "    std::string s = text;\n\
    \    std::replace(s.begin(), s.end(), ' ', '_');\n    if (s.size() > 2 && s[s.size()\
    \ - 1] == ' ' && s[s.size() - 2] == ' ') {\n        s.replace(s.size() - 2, s.size()\
    \ - 1, ' ');\n    }\n    return s;", "    std::string s = text;\n    std::replace(s.begin(),\
    \ s.end(), ' ', '_');\n    if (s.size() > 2 && s[s.size() - 1] == ' ' && s[s.size()\
    \ - 2] == ' ') {\n        s.replace(s.size() - 2, s.size() - 1, std::string(\"\
    _\"));\n    }\n    return s;", "    std::string result = text;\n    size_t pos\
    \ = 0;\n    while (pos < result.length()) {\n        pos = result.find_first_not_of(\"\
    \ \", pos);\n        if (pos != std::string::npos) {\n            result.replace(pos,\
    \ 1, std::string(\"_\"));\n        }\n        pos = result.find_first_of(\" \"\
    , pos);\n        if (pos != std::string::npos) {\n            result.replace(pos,\
    \ 1, std::string(\"-\"));\n        }\n    }\n    return result;", "    std::string\
    \ s = text;\n    std::replace(s.begin(), s.end(), ' ', '_');\n    if (s.size()\
    \ > 2 && s[s.size() - 1] == ' ' && s[s.size() - 2] == ' ') {\n        s.replace(s.size()\
    \ - 2, s.size() - 1, \"\");\n    }\n    return s;", "    std::string s = text;\n\
    \    std::replace(s.begin(), s.end(), ' ', '_');\n    if (s.size() > 2 && s[s.size()\
    \ - 1] == ' ' && s[s.size() - 2] == ' ') {\n        s.replace(s.size() - 2, s.size()\
    \ - 1, \"\");\n    }\n    return s;", "    std::string s = text;\n    std::replace(s.begin(),\
    \ s.end(), ' ', '_');\n    if (s.size() > 2 && s[s.size() - 1] == ' ' && s[s.size()\
    \ - 2] == ' ') {\n        s.replace(s.size() - 2, s.size() - 1, std::string(\"\
    _\"));\n    }\n    return s;", "    std::string res = text;\n    std::replace(std::begin(res),\
    \ std::end(res), ' ', '_');\n    if (res.find_first_of(' ') != std::string::npos)\
    \ {\n        std::replace(std::begin(res), std::end(res), ' ', '-');\n    }\n\
    \    return res;", "    std::string s = text;\n    s.replace(s.begin(), s.end(),\
    \ ' ');\n    int count = 0;\n    for (int i = 0; i < s.size(); i++) {\n      \
    \  if (s[i] == ' ') {\n            count++;\n        } else {\n            count\
    \ = 0;\n        }\n        if (count > 2) {\n            s.replace(i, i + 1, \"\
    -\");\n            i += 1;\n        }\n    }\n    return s;", "    std::string\
    \ s = text;\n    std::replace(s.begin(), s.end(), ' ', '_');\n    if (s.size()\
    \ > 2 && s[s.size() - 1] == s[s.size() - 2]) {\n        s.replace(s.size() - 2,\
    \ s.size() - 1, ' ');\n    }\n    return s;", "    std::string s = text;\n   \
    \ for(size_t i = 0; i < s.length(); i++) {\n        if(s[i] == ' ') {\n      \
    \      s[i] = '_';\n        }\n    }\n    size_t prev = 0, next = 0, count = 0;\n\
    \    while(next < s.length()) {\n        if(s[next] == ' ') {\n            s[next]\
    \ = '_';\n            count++;\n            prev = next;\n            next = next\
    \ + 1;\n        } else {\n            if(count > 1) {\n                s[prev]\
    \ = '-';\n                s[next] = '-';\n                prev = prev + 1;\n \
    \               next = next + 1;\n            }\n            count = 0;\n    \
    \        prev = next;\n            next = next + 1;\n        }\n    }\n    return\
    \ s;"]
stop_tokens:
- "\n}"
