name: HumanEval_128_prod_signs
language: cpp
prompt: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given an array arr\
  \ of integers and you need to return\n// sum of magnitudes of integers multiplied\
  \ by product of all signs\n// of each number in the array, represented by 1, -1\
  \ or 0.\n// Note: return None for empty arr.\n// Example:\n// >>> prod_signs([1,\
  \ 2, 2, -4]) == -9\n// >>> prod_signs([0, 1]) == 0\n// >>> prod_signs([]) == None\n\
  std::optional<long> prod_signs(std::vector<long> arr) {\n"
tests: "}\nint main() {\n    auto candidate = prod_signs;\n    assert(candidate((std::vector<long>({1,\
  \ 2, 2, -4}))) == (std::optional<long>(-9)));\n    assert(candidate((std::vector<long>({0,\
  \ 1}))) == (std::optional<long>(0)));\n    assert(candidate((std::vector<long>({1,\
  \ 1, 1, 2, 3, -1, 1}))) == (std::optional<long>(-10)));\n    assert(candidate((std::vector<long>()))\
  \ == (std::optional<long>({})));\n    assert(candidate((std::vector<long>({2, 4,\
  \ 1, 2, -1, -1, 9}))) == (std::optional<long>(20)));\n    assert(candidate((std::vector<long>({-1,\
  \ 1, -1, 1}))) == (std::optional<long>(4)));\n    assert(candidate((std::vector<long>({-1,\
  \ 1, 1, 1}))) == (std::optional<long>(-4)));\n    assert(candidate((std::vector<long>({-1,\
  \ 1, 1, 0}))) == (std::optional<long>(0)));\n}\n"
completions: ["    if (arr.empty())\n        return std::nullopt;\n    long ans =\
    \ arr[0];\n    for (long i : arr)\n        ans = ans * i;\n    return ans;", " \
    \   if (arr.empty())\n        return std::nullopt;\n    long prod = 1;\n    for\
    \ (auto i : arr)\n        prod *= i;\n    long sign = 1;\n    for (auto i : arr)\n\
    \        sign *= i;\n    return sign * prod;", "    if (arr.empty())\n       \
    \ return std::nullopt;\n    long long ans = 0;\n    for (long i : arr) {\n   \
    \     ans += i * std::signbit(i);\n    }\n    return ans;", "    if (arr.empty())\n\
    \        return std::nullopt;\n    long prod = 1;\n    for (auto i : arr)\n  \
    \      prod *= i;\n    long res = 0;\n    for (auto i : arr)\n        res += i\
    \ * prod;\n    return res;", "    if (arr.empty())\n        return std::nullopt;\n\
    \    long prod = 1;\n    for (auto i : arr)\n        prod *= i;\n    long res\
    \ = 0;\n    for (auto i : arr)\n        res += i * prod;\n    return res;", " \
    \   if (arr.empty()) return std::nullopt;\n    long ans = arr[0];\n    for (long\
    \ i : arr) {\n        ans = std::max(ans, i * std::signbit(i));\n    }\n    return\
    \ ans;", "    if (arr.empty()) return std::nullopt;\n    long long ans = 0;\n\
    \    for (long i : arr) {\n        ans += i * std::signbit(i);\n    }\n    return\
    \ ans;", "    if (arr.empty()) return std::nullopt;\n    long long ans = 1;\n\
    \    for (auto i : arr) {\n        ans *= i;\n        if (i < 0) ans *= -1;\n\
    \    }\n    return ans;", "    if (arr.empty())\n        return std::nullopt;\n\
    \    long prod = 1;\n    for (auto i : arr)\n        prod *= i;\n    long res\
    \ = 0;\n    for (auto i : arr)\n        res += i * prod;\n    return res;", " \
    \   if (arr.empty())\n        return std::nullopt;\n    long ans = 0;\n    for\
    \ (long i : arr) {\n        ans += std::abs(i) * std::sign(i);\n    }\n    return\
    \ ans;", "    if (arr.empty())\n        return std::nullopt;\n    long long ans\
    \ = 0;\n    for (auto i : arr) {\n        ans += i * std::signbit(i);\n    }\n\
    \    return ans;", "    if (arr.empty())\n        return std::nullopt;\n    long\
    \ ans = arr[0];\n    for (auto i : arr)\n        ans = std::max(ans, i * ans);\n\
    \    return ans;", "    if (arr.empty()) return std::nullopt;\n    long ans =\
    \ 0, sign = 1;\n    for (long i : arr) {\n        ans += sign * i;\n        sign\
    \ *= (i < 0) ? -1 : 1;\n    }\n    return ans;", "    if (arr.empty()) return\
    \ std::nullopt;\n    long ans = 1;\n    for (auto i : arr) {\n        ans *= i;\n\
    \        ans *= (i != 0);\n    }\n    return ans;", "    if (arr.empty())\n  \
    \      return std::nullopt;\n    long long ans = 0;\n    for (long i : arr) {\n\
    \        ans += std::abs(i) * std::sign(i);\n    }\n    return ans;", "    if\
    \ (arr.empty()) return std::nullopt;\n    long ans = 0, sign = 1;\n    for (auto\
    \ i : arr) {\n        ans += sign * i;\n        sign *= (i < 0) ? -1 : 1;\n  \
    \  }\n    return ans;", "    if (arr.empty()) return std::nullopt;\n    long prod\
    \ = 1;\n    for (auto i : arr) {\n        prod *= i;\n    }\n    long sum = 0;\n\
    \    for (auto i : arr) {\n        sum += std::abs(i);\n    }\n    return sum\
    \ * prod;", "    if (arr.empty())\n        return std::nullopt;\n    long long\
    \ ans = 0;\n    for (auto i : arr) {\n        ans += i * std::signbit(i);\n  \
    \  }\n    return ans;", "    if (arr.empty())\n        return std::nullopt;\n\
    \    long res = 0;\n    for (long i : arr) {\n        res += std::abs(i) * std::sign(i);\n\
    \    }\n    return res;", "    if (arr.empty()) return std::nullopt;\n    long\
    \ prod = 1;\n    for (auto i : arr) {\n        prod *= i;\n    }\n    long sign\
    \ = 1;\n    for (auto i : arr) {\n        sign *= i;\n    }\n    return prod *\
    \ sign;", "    if (arr.empty())\n        return std::nullopt;\n    long ans =\
    \ 1;\n    for (long i : arr)\n        ans *= i;\n    long sign = 1;\n    for (long\
    \ i : arr)\n        sign *= i;\n    return ans * sign;", "    if (arr.empty())\
    \ return std::nullopt;\n    long ans = 1;\n    for (auto i : arr) {\n        ans\
    \ *= i;\n        if (i < 0) ans *= -1;\n    }\n    return ans;", "    if (arr.empty())\
    \ return std::nullopt;\n    long prod = 1;\n    for (auto i : arr) {\n       \
    \ prod *= i;\n    }\n    long sign = 1;\n    for (auto i : arr) {\n        sign\
    \ *= i;\n    }\n    return sign * prod;", "    if (arr.empty()) return std::nullopt;\n\
    \    long prod = 1;\n    for (auto i : arr) {\n        prod *= i;\n    }\n   \
    \ long sum = 0;\n    for (auto i : arr) {\n        sum += std::abs(i);\n    }\n\
    \    return sum * prod;", "    if (arr.empty()) return std::nullopt;\n    long\
    \ ans = 0, sign = 1;\n    for (auto i : arr) {\n        ans += sign * i;\n   \
    \     sign *= (i < 0) ? -1 : 1;\n    }\n    return ans;", "  if (arr.empty())\n\
    \    return std::nullopt;\n  long prod = 1;\n  for (long i : arr)\n    prod *=\
    \ i;\n  long sum = 0;\n  for (long i : arr)\n    sum += std::abs(i);\n  return\
    \ sum * prod;", "    if (arr.empty())\n        return std::nullopt;\n    long\
    \ ans = arr[0];\n    for (long i : arr) {\n        ans *= i;\n        ans *= (i\
    \ < 0) ? -1 : 1;\n    }\n    return ans;", "    if (arr.empty())\n        return\
    \ std::nullopt;\n    long ans = arr[0];\n    for (long i : arr) {\n        ans\
    \ = std::max(ans, i * std::signbit(i));\n    }\n    return ans;", "    if (arr.empty())\
    \ return std::nullopt;\n    long long ans = 1;\n    for (auto i : arr) {\n   \
    \     ans *= i;\n        ans *= (i >> 31);\n    }\n    return ans;", "    if (arr.empty())\n\
    \        return std::nullopt;\n    long long ans = 1;\n    for (long long i :\
    \ arr)\n        ans *= i;\n    for (long long i : arr)\n        ans *= (i & 1);\n\
    \    return ans;", "    if (arr.empty())\n        return std::nullopt;\n    long\
    \ prod = 1;\n    for (auto i : arr)\n        prod *= i;\n    long sign = 1;\n\
    \    for (auto i : arr)\n        sign *= i;\n    return sign * prod;", "    if\
    \ (arr.empty())\n        return std::nullopt;\n    long ans = 0, sign = 1;\n \
    \   for (auto i : arr) {\n        ans += sign * i;\n        sign *= (i < 0) ?\
    \ -1 : 1;\n    }\n    return ans;", "    if (arr.empty())\n        return std::nullopt;\n\
    \    long ans = arr[0];\n    for (long i : arr)\n        ans = std::max(ans, i\
    \ * std::signbit(i));\n    return ans;", "    if (arr.empty()) return std::nullopt;\n\
    \    long ans = 0, sign = 1;\n    for (auto i : arr) {\n        ans += sign *\
    \ i;\n        sign *= (i < 0) ? -1 : 1;\n    }\n    return ans;", "    if (arr.empty())\
    \ return std::nullopt;\n    long prod = 1;\n    for (auto i : arr) {\n       \
    \ prod *= i;\n    }\n    long res = 0;\n    for (auto i : arr) {\n        res\
    \ += abs(i) * prod;\n    }\n    return res;", "    if (arr.empty())\n        return\
    \ std::nullopt;\n    long res = 0;\n    for (long i : arr) {\n        res += std::abs(i);\n\
    \    }\n    for (long i : arr) {\n        res *= std::signbit(i);\n    }\n   \
    \ return res;", "    if (arr.empty()) return std::nullopt;\n    long ans = 0,\
    \ sign = 1;\n    for (auto i : arr) {\n        ans += sign * i;\n        sign\
    \ *= (i < 0) ? -1 : 1;\n    }\n    return ans;", "    if (arr.empty()) return\
    \ std::nullopt;\n    long prod = 1;\n    for (auto i : arr) {\n        prod *=\
    \ i;\n    }\n    long res = 0;\n    for (auto i : arr) {\n        res += i * prod;\n\
    \    }\n    return res;", "    if (arr.empty()) return std::nullopt;\n    long\
    \ ans = 0, sign = 1;\n    for (auto i : arr) {\n        ans += sign * i;\n   \
    \     sign *= (i < 0) ? -1 : 1;\n    }\n    return ans;", "    if (arr.empty())\n\
    \        return std::nullopt;\n    long prod = 1;\n    for (auto i : arr)\n  \
    \      prod *= i;\n    long sign = 1;\n    for (auto i : arr)\n        sign *=\
    \ i;\n    return sign * prod;", "  if (arr.empty())\n    return std::nullopt;\n\
    \  long prod = 1;\n  for (auto i : arr)\n    prod *= i;\n  long res = 0;\n  for\
    \ (auto i : arr)\n    res += std::abs(i) * prod;\n  return res;", "    if (arr.empty())\n\
    \        return std::nullopt;\n    long long ans = arr[0];\n    for (auto i :\
    \ arr)\n        ans = ans * i;\n    return ans;", "    if (arr.empty()) return\
    \ std::nullopt;\n    long ans = 0, sign = 1;\n    for (long i : arr) {\n     \
    \   ans += sign * i;\n        sign *= (i < 0) ? -1 : 1;\n    }\n    return ans;",
  "    if (arr.empty())\n        return std::nullopt;\n    long res = 0;\n    for\
    \ (auto i : arr) {\n        res += i * std::signbit(i);\n    }\n    return res;",
  "    if (arr.empty())\n        return std::nullopt;\n    long long ans = 1;\n  \
    \  for (auto i : arr)\n        ans *= i;\n    long long sign = 1;\n    for (auto\
    \ i : arr)\n        sign *= i;\n    return ans * sign;", "    if (arr.empty())\
    \ return std::nullopt;\n    long res = 0;\n    for (auto i : arr) {\n        res\
    \ += i * std::signbit(i);\n    }\n    return res;", "  if (arr.empty()) return\
    \ std::nullopt;\n  long res = 0;\n  for (int i = 0; i < arr.size(); i++) {\n \
    \   res += arr[i] * (arr[i] < 0 ? -1 : 1);\n  }\n  return res;", "    if (arr.empty())\
    \ return std::nullopt;\n    long ans = 0, sign = 1;\n    for (auto i : arr) {\n\
    \        ans += sign * i;\n        sign *= (i < 0) ? -1 : 1;\n    }\n    return\
    \ ans;", "    if (arr.empty()) return std::nullopt;\n    long ans = 0;\n    for\
    \ (long i : arr) {\n        ans += std::abs(i) * std::sign(i);\n    }\n    return\
    \ ans;", "    if (arr.empty())\n        return std::nullopt;\n    long ans = 0,\
    \ sign = 1;\n    for (long i : arr) {\n        ans += sign * i;\n        sign\
    \ *= (i < 0) ? -1 : 1;\n    }\n    return ans;", "    if (arr.empty())\n     \
    \   return std::nullopt;\n    long prod = 1;\n    for (auto i : arr)\n       \
    \ prod *= i;\n    long sum = 0;\n    for (auto i : arr)\n        sum += std::abs(i);\n\
    \    return std::optional<long>(prod * sum);", "  if (arr.empty()) return std::nullopt;\n\
    \  long ans = arr[0];\n  for (int i = 1; i < arr.size(); ++i) {\n    ans = ans\
    \ * arr[i];\n  }\n  return ans;", "    if (arr.empty())\n        return std::nullopt;\n\
    \    long prod = 1;\n    for (auto i : arr)\n        prod *= i;\n    long sum\
    \ = 0;\n    for (auto i : arr)\n        sum += std::abs(i);\n    return sum *\
    \ prod;", "    if (arr.empty())\n        return std::nullopt;\n    long prod =\
    \ 1;\n    for (auto i : arr)\n        prod *= i;\n    long sum = 0;\n    for (auto\
    \ i : arr)\n        sum += std::abs(i) * std::signbit(i);\n    return sum * prod;",
  "    if (arr.empty())\n        return std::nullopt;\n    long prod = 1;\n    for\
    \ (auto i : arr)\n        prod *= i;\n    long res = 0;\n    for (auto i : arr)\n\
    \        res += i * prod;\n    return res;", "    if (arr.empty())\n        return\
    \ std::nullopt;\n    long ans = 0;\n    for (auto i : arr)\n        ans += i *\
    \ std::signbit(i);\n    return ans;", "    if (arr.empty()) return std::nullopt;\n\
    \    long res = 0;\n    for (auto i : arr) {\n        res += i * std::signbit(i);\n\
    \    }\n    return res;", "    if (arr.empty()) return std::nullopt;\n    long\
    \ ans = arr[0];\n    for (long i : arr) ans = ans * i;\n    return ans;", "  \
    \  if (arr.empty())\n        return std::nullopt;\n    long long ans = 0;\n  \
    \  for (auto i : arr) {\n        ans += i * std::signbit(i);\n    }\n    return\
    \ ans;", "    if (arr.empty())\n        return std::nullopt;\n    long ans = 0,\
    \ sign = 1;\n    for (auto i : arr) {\n        ans += sign * i;\n        sign\
    \ *= (i < 0) ? -1 : 1;\n    }\n    return ans;", "    if (arr.empty()) return\
    \ std::nullopt;\n    long ans = 0;\n    for (auto i : arr) {\n        ans += i\
    \ * std::signbit(i);\n    }\n    return ans;", "    if (arr.empty()) return std::nullopt;\n\
    \    long long ans = 0;\n    for (long i : arr) {\n        ans += i * std::signbit(i);\n\
    \    }\n    return ans;", "    if (arr.empty())\n        return std::nullopt;\n\
    \    long product = 1;\n    for (auto i : arr)\n        product *= i;\n    long\
    \ sum = 0;\n    for (auto i : arr)\n        sum += std::abs(i);\n    return sum\
    \ * product;", "    if (arr.empty()) return std::nullopt;\n    long ans = arr[0];\n\
    \    for (long i : arr) ans *= i;\n    return ans;", "    if (arr.empty())\n \
    \       return std::nullopt;\n    long product = 1;\n    long sign = 1;\n    for\
    \ (long i : arr) {\n        product *= i;\n        sign *= (i < 0) ? -1 : 1;\n\
    \    }\n    return std::make_optional(sign * product);", "    if (arr.empty())\
    \ return std::nullopt;\n    long res = 0;\n    for (long i : arr) {\n        res\
    \ += i * std::signbit(i);\n    }\n    return res;", "    if (arr.empty()) return\
    \ std::nullopt;\n    long ans = arr[0];\n    for (long i : arr) ans *= i;\n  \
    \  for (long i : arr) ans *= (i != 0? 1: -1);\n    return ans;", "    if (arr.empty())\
    \ return std::nullopt;\n    long product = 1;\n    for (auto i : arr) {\n    \
    \    product *= i;\n    }\n    long sum = 0;\n    for (auto i : arr) {\n     \
    \   sum += std::abs(i);\n    }\n    return product * sum;", "    if (arr.empty())\n\
    \        return std::nullopt;\n    long long ans = 0;\n    for (auto i : arr)\
    \ {\n        ans += i * std::signbit(i);\n    }\n    return ans;", "    if (arr.empty())\n\
    \        return std::nullopt;\n    long prod = 1;\n    for (auto i : arr)\n  \
    \      prod *= i;\n    long sign = 1;\n    for (auto i : arr)\n        sign *=\
    \ i;\n    return sign * prod;", "    if (arr.empty()) return std::nullopt;\n \
    \   long prod = 1;\n    for (auto i : arr) prod *= i;\n    long sign = 1;\n  \
    \  for (auto i : arr) sign *= i;\n    return sign * prod;", "    if (arr.empty())\n\
    \        return std::nullopt;\n    long long ans = 1;\n    for (auto i : arr)\
    \ {\n        ans *= i;\n        ans *= (i >> 31);\n    }\n    return ans;", " \
    \   if (arr.empty()) return std::nullopt;\n    long product = 1;\n    for (long\
    \ i : arr) {\n        product *= i;\n    }\n    long sum = 0;\n    for (long i\
    \ : arr) {\n        sum += std::abs(i);\n    }\n    return sum * product;", " \
    \   if (arr.empty()) return std::nullopt;\n    long ans = 0, sign = 1;\n    for\
    \ (auto i : arr) {\n        ans += sign * i;\n        sign *= (i < 0 ? -1 : 1);\n\
    \    }\n    return ans;", "    if (arr.empty()) return std::nullopt;\n    long\
    \ ans = 0;\n    for (auto i : arr) {\n        ans += std::abs(i) * std::sign(i);\n\
    \    }\n    return ans;", "    if (arr.empty())\n        return std::nullopt;\n\
    \    long ans = arr[0];\n    for (long i : arr)\n        ans = std::max(ans, i\
    \ * std::signbit(i));\n    return ans;", "    if (arr.empty())\n        return\
    \ std::nullopt;\n    long ans = 0;\n    for (long i : arr) {\n        ans += i\
    \ * std::signbit(i);\n    }\n    return ans;", "    if (arr.empty()) return std::nullopt;\n\
    \    long long ans = 0;\n    for (long i : arr) {\n        ans += i * std::signbit(i);\n\
    \    }\n    return ans;", "  if (arr.empty()) return std::nullopt;\n  long ans\
    \ = arr[0];\n  for (long i : arr) ans = std::max(ans, i * std::signbit(i));\n\
    \  return ans;", "    if (arr.empty()) return std::nullopt;\n    long ans = 1;\n\
    \    for (auto i : arr) {\n        ans *= i;\n        ans *= (i != 0);\n    }\n\
    \    return ans;", "    if (arr.empty())\n        return std::nullopt;\n    long\
    \ product = 1;\n    for (auto i : arr) {\n        product *= i;\n    }\n    long\
    \ sum = 0;\n    for (auto i : arr) {\n        sum += std::abs(i);\n    }\n   \
    \ return sum * product;", "  if (arr.empty())\n    return std::nullopt;\n  long\
    \ long ans = 0;\n  for (long long i : arr) {\n    ans += i * std::signbit(i);\n\
    \  }\n  return ans;", "    if (arr.empty())\n        return std::nullopt;\n  \
    \  long res = 0;\n    for (auto i : arr) {\n        res = res * i;\n    }\n  \
    \  return res;", "    if (arr.empty()) return std::nullopt;\n    long long ans\
    \ = 0;\n    for (auto i : arr) {\n        ans += std::abs(i) * std::sign(i);\n\
    \    }\n    return ans;", "    if (arr.empty()) return std::nullopt;\n    long\
    \ ans = 0, sign = 1;\n    for (auto i : arr) {\n        ans += sign * i;\n   \
    \     sign *= (i < 0) ? -1 : 1;\n    }\n    return ans;", "    if (arr.empty())\n\
    \        return std::nullopt;\n    long prod = 1;\n    for (auto i : arr)\n  \
    \      prod *= i;\n    long sign = 1;\n    for (auto i : arr)\n        sign *=\
    \ i;\n    return sign * prod;", "    if (arr.empty()) return std::nullopt;\n \
    \   long ans = arr[0];\n    for (long i : arr) ans = std::max(ans, i * std::signbit(i));\n\
    \    return ans;", "    if (arr.empty()) return std::nullopt;\n    long ans =\
    \ arr[0];\n    for (long i : arr) ans *= i;\n    return ans;", "    if (arr.empty())\n\
    \        return std::nullopt;\n    long long ans = 0;\n    for (auto i : arr)\
    \ {\n        ans += i * std::signbit(i);\n    }\n    return ans;", "    if (arr.empty())\n\
    \        return std::nullopt;\n    long res = 0;\n    for (auto i : arr) {\n \
    \       res += std::abs(i) * std::sign(i);\n    }\n    return res;", "    if (arr.empty())\n\
    \        return std::nullopt;\n    long long ans = 0;\n    for (long i : arr)\
    \ {\n        ans += i * std::signbit(i);\n    }\n    return ans;", "    if (arr.empty())\
    \ return std::nullopt;\n    long product = 1;\n    for (auto i : arr) {\n    \
    \    product *= i;\n    }\n    long sum = 0;\n    for (auto i : arr) {\n     \
    \   sum += std::abs(i);\n    }\n    return sum * product;", "    if (arr.empty())\
    \ return std::nullopt;\n    long ans = arr[0];\n    for (long i : arr) ans *=\
    \ i;\n    for (long i : arr) ans *= (i < 0) ? -1 : 1;\n    return ans;", "   \
    \ if (arr.empty())\n        return std::nullopt;\n    long ans = 0;\n    for (long\
    \ i : arr) {\n        ans += i * std::signbit(i);\n    }\n    return ans;", " \
    \   if (arr.empty())\n        return std::nullopt;\n    long res = 0;\n    for\
    \ (auto i : arr) {\n        res += i * std::signbit(i);\n    }\n    return res;",
  "    if (arr.empty()) return std::nullopt;\n    long product = 1;\n    for (auto\
    \ i : arr) {\n        product *= i;\n    }\n    long sum = 0;\n    for (auto i\
    \ : arr) {\n        sum += std::abs(i);\n    }\n    return sum * product;", " \
    \   if (arr.empty())\n        return std::nullopt;\n    long product = 1;\n  \
    \  for (auto i : arr) {\n        product *= i;\n    }\n    long sum = 0;\n   \
    \ for (auto i : arr) {\n        sum += std::abs(i);\n    }\n    return sum * product;",
  "    if (arr.empty()) return std::nullopt;\n    long ans = 1;\n    for (auto i :\
    \ arr) {\n        ans *= i;\n        ans *= (i < 0) ? -1 : 1;\n    }\n    return\
    \ ans;", "    if (arr.empty())\n        return std::nullopt;\n    long ans = arr[0];\n\
    \    for (long i : arr) {\n        ans = std::max(ans, i * std::abs(i));\n   \
    \ }\n    return ans;", "    if (arr.empty())\n        return std::nullopt;\n \
    \   long ans = arr[0];\n    for (long i : arr) {\n        ans = ans * i;\n   \
    \ }\n    return ans;", "    if (arr.empty()) return std::nullopt;\n    long ans\
    \ = 0;\n    for (long i : arr) {\n        ans += std::abs(i) * std::sign(i);\n\
    \    }\n    return ans;", "    if (arr.empty())\n        return std::nullopt;\n\
    \    long res = 0;\n    for (long i : arr) {\n        res += std::abs(i) * std::sign(i);\n\
    \    }\n    return res;", "    if (arr.empty())\n        return std::nullopt;\n\
    \    long ans = arr[0];\n    for (long i : arr)\n        ans = std::max(ans, i\
    \ * std::signbit(i));\n    return ans;", "    if (arr.empty())\n        return\
    \ std::nullopt;\n    long ans = arr[0];\n    for (auto i : arr)\n        ans *=\
    \ i;\n    return ans;", "    if (arr.empty())\n        return std::nullopt;\n\
    \    long ans = 0, sign = 1;\n    for (auto i : arr)\n        ans += sign * i;\n\
    \    sign *= -1;\n    for (auto i : arr)\n        ans *= sign;\n    return ans;",
  "    if (arr.empty()) return std::nullopt;\n    long prod = 1;\n    for (auto i\
    \ : arr) {\n        prod *= i;\n    }\n    long sum = 0;\n    for (auto i : arr)\
    \ {\n        sum += std::abs(i) * prod;\n    }\n    return sum;", "    if (arr.empty())\
    \ return std::nullopt;\n    long ans = 0, sign = 1;\n    for (auto i : arr) {\n\
    \        ans += sign * i;\n        sign *= (i < 0) ? -1 : 1;\n    }\n    return\
    \ ans;", "    if (arr.empty()) return std::nullopt;\n    long product = 1;\n \
    \   long sign = 1;\n    for (auto i : arr) {\n        product *= i;\n        sign\
    \ *= i;\n    }\n    return sign * product;", "    if (arr.empty())\n        return\
    \ std::nullopt;\n    long prod = 1;\n    for (auto i : arr)\n        prod *= i;\n\
    \    long res = 0;\n    for (auto i : arr)\n        res += std::abs(i) * prod;\n\
    \    return res;", "    if (arr.empty())\n        return std::nullopt;\n    long\
    \ ans = 1;\n    for (auto i : arr) {\n        ans *= i;\n        ans *= (i >>\
    \ 31) & 1;\n    }\n    return ans;", "    if (arr.empty()) return std::nullopt;\n\
    \    long long ans = 0, sign = 1;\n    for (auto i : arr) {\n        ans += sign\
    \ * i;\n        sign *= (i < 0) ? -1 : 1;\n    }\n    return ans;", "    if (arr.empty())\n\
    \        return std::nullopt;\n    long long ans = arr[0];\n    for (long i =\
    \ 1; i < arr.size(); i++)\n        ans = ans * arr[i];\n    return ans;", "  \
    \  if (arr.empty()) return std::nullopt;\n    long res = 0;\n    for (long i :\
    \ arr) {\n        res += std::abs(i) * std::sign(i);\n    }\n    return res;",
  "    if (arr.empty()) return std::nullopt;\n    long long ans = 0;\n    for (auto\
    \ i : arr) {\n        ans += i * std::signbit(i);\n    }\n    return ans;", " \
    \   if (arr.empty())\n        return std::nullopt;\n    long ans = arr[0];\n \
    \   for (long i : arr)\n        ans = std::max(ans, i * ans);\n    return ans;",
  "    if (arr.empty()) return std::nullopt;\n    long product = 1;\n    for (long\
    \ i : arr) {\n        product *= i;\n    }\n    long sum = 0;\n    for (long i\
    \ : arr) {\n        sum += std::abs(i) * product;\n    }\n    return sum;", " \
    \   if (arr.empty())\n        return std::nullopt;\n    long ans = arr[0];\n \
    \   for (long i : arr)\n        ans = std::max(ans, i * std::signbit(i));\n  \
    \  return ans;", "    if (arr.empty())\n        return std::nullopt;\n    long\
    \ ans = 0, sign = 1;\n    for (auto i : arr)\n        ans += sign * i;\n    sign\
    \ *= -1;\n    for (auto i : arr)\n        ans *= sign;\n    return ans;", "  \
    \  if (arr.empty()) return std::nullopt;\n    long ans = 0, sign = 1;\n    for\
    \ (auto i : arr) {\n        ans += sign * i;\n        sign *= (i < 0) ? -1 : 1;\n\
    \    }\n    return ans;", "    if (arr.empty())\n        return std::nullopt;\n\
    \    long long ans = 0;\n    for (auto i : arr) {\n        ans += i * std::signbit(i);\n\
    \    }\n    return ans;", "    if (arr.empty()) return std::nullopt;\n    long\
    \ ans = 0;\n    for (long i : arr) {\n        ans += i * std::signbit(i);\n  \
    \  }\n    return ans;", "    if (arr.empty()) return std::nullopt;\n    long ans\
    \ = 0, sign = 1;\n    for (auto i : arr) {\n        ans += sign * i;\n       \
    \ sign *= (i < 0) ? -1 : 1;\n    }\n    return ans;", "  if (arr.empty()) return\
    \ std::nullopt;\n  long prod = 1;\n  for (auto i : arr) {\n    prod *= i;\n  }\n\
    \  long sum = 0;\n  for (auto i : arr) {\n    sum += std::abs(i) * std::sign(i);\n\
    \  }\n  return sum * prod;", "    if (arr.empty()) return std::nullopt;\n    long\
    \ ans = 0, sign = 1;\n    for (auto i : arr) {\n        ans += sign * i;\n   \
    \     sign *= (i < 0) ? -1 : 1;\n    }\n    return ans;", "    if (arr.empty())\
    \ return std::nullopt;\n    long ans = 0;\n    for (auto i : arr) {\n        ans\
    \ += std::abs(i) * std::sign(i);\n    }\n    return ans;", "    if (arr.empty())\
    \ return std::nullopt;\n    long prod = 1;\n    for (auto i : arr) {\n       \
    \ prod *= i;\n    }\n    long sum = 0;\n    for (auto i : arr) {\n        sum\
    \ += std::abs(i);\n    }\n    return prod * sum;", "    if (arr.empty()) return\
    \ std::nullopt;\n    long ans = 0, sign = 1;\n    for (auto i : arr) {\n     \
    \   ans += sign * i;\n        sign *= (i < 0) ? -1 : 1;\n    }\n    return ans;",
  "    if (arr.empty()) return std::nullopt;\n    long long ans = arr[0];\n    for\
    \ (auto i : arr) ans *= i;\n    long long sign = 1;\n    for (auto i : arr) ans\
    \ *= sign;\n    return ans;", "    if (arr.empty())\n        return std::nullopt;\n\
    \    long ans = 0, sign = 1;\n    for (auto i : arr)\n        ans += sign * i;\n\
    \    sign *= -1;\n    for (auto i : arr)\n        ans *= sign;\n    return ans;",
  "    if (arr.empty())\n        return std::nullopt;\n    long prod = 1;\n    for\
    \ (auto i : arr)\n        prod *= i;\n    long sign = 1;\n    for (auto i : arr)\n\
    \        sign *= i;\n    return sign * prod;", "    if (arr.empty())\n       \
    \ return std::nullopt;\n    long long ans = 0;\n    for (auto i : arr) {\n   \
    \     ans += i * std::signbit(i);\n    }\n    return ans;", "    if (arr.empty())\n\
    \        return std::nullopt;\n    long ans = arr[0];\n    for (long i : arr)\n\
    \        ans = ans * i;\n    return ans;", "    if (arr.empty())\n        return\
    \ std::nullopt;\n    long ans = 0, sign = 1;\n    for (auto i : arr) {\n     \
    \   ans += sign * i;\n        sign *= (i < 0) ? -1 : 1;\n    }\n    return ans;",
  "    if (arr.empty())\n        return std::nullopt;\n    long ans = 0, sign = 1;\n\
    \    for (auto i : arr) {\n        ans += sign * i;\n        sign *= (i < 0) ?\
    \ -1 : 1;\n    }\n    return ans;", "    if (arr.empty())\n        return std::nullopt;\n\
    \    long ans = arr[0];\n    for (long i : arr)\n        ans = std::max(ans, i\
    \ * std::signbit(i));\n    return ans;", "    if (arr.empty()) return std::nullopt;\n\
    \    long prod = 1;\n    for (auto i : arr) prod *= i;\n    long res = 0;\n  \
    \  for (auto i : arr) {\n        if (i == -1) res += 1;\n        else if (i ==\
    \ 1) res += -1;\n        else res += 0;\n    }\n    return res == 0 ? std::nullopt\
    \ : res * prod;", "    if (arr.empty()) return std::nullopt;\n    long long ans\
    \ = 0;\n    for (long i : arr) {\n        ans += i * std::signbit(i);\n    }\n\
    \    return ans;", "    if (arr.empty())\n        return std::nullopt;\n    long\
    \ ans = 0, sign = 1;\n    for (long i : arr) {\n        ans += sign * i;\n   \
    \     sign *= (i < 0) ? -1 : 1;\n    }\n    return ans;", "    if (arr.empty())\n\
    \        return std::nullopt;\n    long res = 0;\n    for (long i : arr) {\n \
    \       res += std::abs(i) * std::sign(i);\n    }\n    return res;", "    if (arr.empty())\n\
    \        return std::nullopt;\n    long prod = 1;\n    for (long i : arr)\n  \
    \      prod *= i;\n    long sum = 0;\n    for (long i : arr)\n        sum += std::abs(i);\n\
    \    return sum * prod;", "    if (arr.empty()) return std::nullopt;\n    long\
    \ long ans = 1;\n    for (auto i : arr) {\n        ans *= i;\n        ans *= (i\
    \ != 0);\n    }\n    return ans;", "    if (arr.empty())\n        return std::nullopt;\n\
    \    long ans = 1;\n    for (auto i : arr)\n        ans *= i;\n    for (auto i\
    \ : arr)\n        ans *= (i & 1);\n    return ans;", "    if (arr.empty())\n \
    \       return std::nullopt;\n    long long ans = 0;\n    for (long i : arr) {\n\
    \        ans += std::abs(i) * std::sign(i);\n    }\n    return ans;", "    if\
    \ (arr.empty())\n        return std::nullopt;\n    long prod = 1;\n    for (auto\
    \ i : arr)\n        prod *= i;\n    long sum = 0;\n    for (auto i : arr)\n  \
    \      sum += std::abs(i);\n    return prod * sum;", "    if (arr.empty())\n \
    \       return std::nullopt;\n    long ans = 0;\n    for (auto i : arr) {\n  \
    \      ans += std::abs(i) * std::sign(i);\n    }\n    return ans;", "    if (arr.empty())\
    \ return std::nullopt;\n    long ans = 0, sign = 1;\n    for (long i : arr) {\n\
    \        ans += sign * i;\n        sign *= (i < 0) ? -1 : 1;\n    }\n    return\
    \ ans;", "    if (arr.empty()) return std::nullopt;\n    long ans = arr[0];\n\
    \    for (long i : arr) ans *= i;\n    return ans;", "    if (arr.empty()) return\
    \ std::nullopt;\n    long long ans = 0, sign = 1;\n    for (auto i : arr) {\n\
    \        ans += sign * i;\n        sign *= (i < 0) ? -1 : 1;\n    }\n    return\
    \ ans;", "    if (arr.empty()) return std::nullopt;\n    long prod = 1;\n    for\
    \ (long i : arr) {\n        prod *= i;\n    }\n    long sum = 0;\n    for (long\
    \ i : arr) {\n        sum += std::abs(i) * prod;\n    }\n    return sum;", " \
    \   if (arr.empty()) return std::nullopt;\n    long product = 1;\n    for (auto\
    \ i : arr) {\n        product *= i;\n    }\n    long sum = 0;\n    for (auto i\
    \ : arr) {\n        sum += std::abs(i) * product;\n    }\n    return sum;", " \
    \   if (arr.empty())\n        return std::nullopt;\n    long prod = 1;\n    for\
    \ (auto i : arr) {\n        prod *= i;\n    }\n    long sum = 0;\n    for (auto\
    \ i : arr) {\n        sum += std::abs(i);\n    }\n    return prod * sum;", " \
    \   if (arr.empty())\n        return std::nullopt;\n    long ans = 0, sign = 1;\n\
    \    for (auto i : arr) {\n        ans += sign * i;\n        sign *= (i < 0) ?\
    \ -1 : 1;\n    }\n    return ans;", "    if (arr.empty())\n        return std::nullopt;\n\
    \    long ans = 0;\n    for (auto i : arr) {\n        ans += i * std::signbit(i);\n\
    \    }\n    return ans;", "    if (arr.empty()) return std::nullopt;\n    long\
    \ ans = 0, sign = 1;\n    for (long i : arr) {\n        ans += sign * i;\n   \
    \     sign *= (i < 0) ? -1 : 1;\n    }\n    return ans;", "    if (arr.empty())\
    \ return std::nullopt;\n    long ans = 0, sign = 1;\n    for (auto i : arr) {\n\
    \        ans += sign * i;\n        sign *= (i < 0 ? -1 : 1);\n    }\n    return\
    \ ans;", "  if (arr.empty())\n    return std::nullopt;\n  long ans = 1;\n  for\
    \ (auto i : arr)\n    ans *= i;\n  for (auto i : arr)\n    ans *= (i < 0) ? -1\
    \ : 1;\n  return ans;", "    if (arr.empty())\n        return std::nullopt;\n\
    \    long long ans = 0;\n    for (long i : arr) {\n        ans += i * std::signbit(i);\n\
    \    }\n    return ans;", "    if (arr.empty())\n        return std::nullopt;\n\
    \    long long ans = 0;\n    for (auto i : arr) {\n        ans += i * std::signbit(i);\n\
    \    }\n    return ans;", "    if (arr.empty())\n        return std::nullopt;\n\
    \    long ans = arr[0];\n    for (auto i : arr) {\n        ans *= i;\n       \
    \ ans *= (i > 0) * 1;\n        ans *= (i < 0) * -1;\n    }\n    return ans;",
  "    if (arr.empty()) return std::nullopt;\n    long ans = 0, sign = 1;\n    for\
    \ (long i : arr) {\n        ans += sign * i;\n        sign *= (i < 0) ? -1 : 1;\n\
    \    }\n    return ans;", "    if (arr.empty()) return std::nullopt;\n    long\
    \ ans = 0, sign = 1;\n    for (auto i : arr) {\n        ans += sign * i;\n   \
    \     sign *= (i < 0) ? -1 : 1;\n    }\n    return ans;", "    if (arr.empty())\
    \ return std::nullopt;\n    long product = 1;\n    for (auto i : arr) {\n    \
    \    product *= i;\n    }\n    long sum = 0;\n    for (auto i : arr) {\n     \
    \   sum += std::abs(i);\n    }\n    return std::optional<long>(sum * product);",
  "    if (arr.empty())\n        return std::nullopt;\n    long ans = arr[0];\n  \
    \  for (auto i : arr)\n        ans *= i;\n    if (ans < 0)\n        ans *= -1;\n\
    \    return ans;", "    if (arr.empty())\n        return std::nullopt;\n    long\
    \ ans = arr[0];\n    for (long i : arr)\n        ans *= i;\n    if (ans < 0)\n\
    \        ans *= -1;\n    return ans;", "    if (arr.empty()) return std::nullopt;\n\
    \    long long ans = 0;\n    for (auto i : arr) {\n        ans += i * std::signbit(i);\n\
    \    }\n    return ans;", "    if (arr.empty()) return std::nullopt;\n    long\
    \ ans = 0;\n    for (long i : arr) {\n        ans += std::abs(i) * std::sign(i);\n\
    \    }\n    return ans;", "    if (arr.empty()) return std::nullopt;\n    long\
    \ long ans = 1;\n    for (auto i : arr) {\n        ans *= i;\n        ans *= (i\
    \ & 1);\n    }\n    return ans;", "    if (arr.empty())\n        return std::nullopt;\n\
    \    long long ans = 1;\n    for (auto i : arr) {\n        ans *= i;\n       \
    \ if (i < 0)\n            ans *= -1;\n    }\n    return ans;", "    if (arr.empty())\
    \ return std::nullopt;\n    long ans = 0;\n    for (long i : arr) {\n        ans\
    \ += std::abs(i) * std::sign(i);\n    }\n    return ans;", "  if (arr.empty())\n\
    \    return std::nullopt;\n  long prod = 1;\n  for (auto i : arr)\n    prod *=\
    \ i;\n  long sum = 0;\n  for (auto i : arr)\n    sum += std::abs(i) * prod;\n\
    \  return sum;", "  if (arr.empty())\n    return std::nullopt;\n  long prod =\
    \ 1;\n  for (auto i : arr)\n    prod *= i;\n  long sum = 0;\n  for (auto i : arr)\n\
    \    sum += std::abs(i);\n  return sum * prod;", "    if (arr.empty()) return\
    \ std::nullopt;\n    long ans = arr[0];\n    for (long i : arr) ans *= i;\n  \
    \  for (long i : arr) ans *= (i > 0) - i;\n    return ans;", "    if (arr.empty())\
    \ return std::nullopt;\n    long prod = 1;\n    for (auto i : arr) {\n       \
    \ prod *= i;\n    }\n    long sum = 0;\n    for (auto i : arr) {\n        sum\
    \ += std::abs(i);\n    }\n    return sum * prod;", "    if (arr.empty())\n   \
    \     return std::nullopt;\n    long product = 1;\n    for (auto i : arr)\n  \
    \      product *= i;\n    long sum = 0;\n    for (auto i : arr)\n        sum +=\
    \ std::abs(i) * product;\n    return sum;", "    if (arr.empty())\n        return\
    \ std::nullopt;\n    long ans = arr[0];\n    for (long i : arr) {\n        ans\
    \ = std::max(ans, i * std::signbit(i));\n    }\n    return ans;", "    if (arr.empty())\
    \ return std::nullopt;\n    long res = 0;\n    for (auto i : arr) {\n        res\
    \ += i * std::signbit(i);\n    }\n    return res;", "    if (arr.empty())\n  \
    \      return std::nullopt;\n    long long ans = arr[0];\n    for (long i = 1;\
    \ i < arr.size(); i++)\n        ans = ans * arr[i];\n    return ans;", "    if\
    \ (arr.empty())\n        return std::nullopt;\n    long ans = 0;\n    for (auto\
    \ i : arr)\n        ans += i * std::signbit(i);\n    return ans;", "    if (arr.empty())\
    \ return std::nullopt;\n    long product = 1;\n    for (auto i : arr) {\n    \
    \    product *= i;\n    }\n    long sum = 0;\n    for (auto i : arr) {\n     \
    \   sum += std::abs(i) * product;\n    }\n    return sum;", "    if (arr.empty())\n\
    \        return std::nullopt;\n    long prod = 1;\n    for (auto i : arr)\n  \
    \      prod *= i;\n    long sum = 0;\n    for (auto i : arr)\n        sum += std::abs(i);\n\
    \    return std::optional<long>(sum * prod, true);", "    if (arr.empty())\n \
    \       return std::nullopt;\n    long prod = 1;\n    for (auto i : arr) {\n \
    \       prod *= i;\n    }\n    long sum = 0;\n    for (auto i : arr) {\n     \
    \   sum += std::abs(i);\n    }\n    return prod * sum;", "    if (arr.empty())\
    \ return std::nullopt;\n    long ans = 0;\n    for (long i : arr) {\n        ans\
    \ += std::abs(i);\n    }\n    long prod = 1;\n    for (long i : arr) {\n     \
    \   prod *= i;\n    }\n    return ans * prod;", "    if (arr.empty())\n      \
    \  return std::nullopt;\n    long long res = 0;\n    for (long i : arr)\n    \
    \    res += i * std::signbit(i);\n    return res;", "    if (arr.empty()) return\
    \ std::nullopt;\n    long ans = arr[0];\n    for (long i : arr) {\n        ans\
    \ *= i;\n        ans *= (i != 0);\n    }\n    return ans;", "    if (arr.empty())\
    \ return std::nullopt;\n    long res = 0;\n    for (auto i : arr) {\n        res\
    \ += i * std::signbit(i);\n    }\n    return res;", "  if (arr.empty()) return\
    \ std::nullopt;\n  long res = 0;\n  for (long i : arr) {\n    res = res * i;\n\
    \  }\n  return res;", "    if (arr.empty()) return std::nullopt;\n    long ans\
    \ = 0, sign = 1;\n    for (long i : arr) {\n        ans += sign * i;\n       \
    \ sign *= (i < 0) ? -1 : 1;\n    }\n    return ans;", "    if (arr.empty()) return\
    \ std::nullopt;\n    long ans = 0;\n    for (long i : arr) {\n        ans += i\
    \ * std::signbit(i);\n    }\n    return ans;", "    if (arr.empty()) return std::nullopt;\n\
    \    long product = 1;\n    for (auto i : arr) {\n        product *= i;\n    }\n\
    \    long sum = 0;\n    for (auto i : arr) {\n        sum += std::abs(i);\n  \
    \  }\n    return sum * product;", "    if (arr.empty()) return std::nullopt;\n\
    \    long ans = 0, sign = 1;\n    for (auto i : arr) {\n        ans += sign *\
    \ i;\n        sign *= (i < 0 ? -1 : 1);\n    }\n    return ans;", "    if (arr.empty())\
    \ return std::nullopt;\n    long ans = 0;\n    for (auto i : arr) {\n        ans\
    \ += std::abs(i) * std::sign(i);\n    }\n    return ans;", "    if (arr.empty())\n\
    \        return std::nullopt;\n    long ans = 0, sign = 1;\n    for (auto i :\
    \ arr)\n        ans += sign * i;\n    sign *= -1;\n    for (auto i : arr)\n  \
    \      ans += sign * i;\n    return ans;", "    if (arr.empty())\n        return\
    \ std::nullopt;\n    long ans = 0, sign = 1;\n    for (long i : arr) {\n     \
    \   ans += sign * i;\n        sign *= (i < 0) ? -1 : 1;\n    }\n    return ans;",
  "    if (arr.empty()) return std::nullopt;\n    long ans = 0;\n    for (long i :\
    \ arr) {\n        ans += i * std::signbit(i);\n    }\n    return ans;", "    if\
    \ (arr.empty()) return std::nullopt;\n    long ans = 0, sign = 1;\n    for (auto\
    \ i : arr) {\n        ans += sign * i;\n        sign *= (i < 0) ? -1 : 1;\n  \
    \  }\n    return ans;", "    if (arr.empty()) return std::nullopt;\n    long ans\
    \ = 0;\n    for (long i : arr) {\n        ans += std::abs(i);\n    }\n    long\
    \ prod = 1;\n    for (long i : arr) {\n        prod *= std::signbit(i);\n    }\n\
    \    return ans * prod;", "    if (arr.empty())\n        return std::nullopt;\n\
    \    long product = 1;\n    for (auto i : arr)\n        product *= i;\n    long\
    \ sum = 0;\n    for (auto i : arr)\n        sum += std::abs(i);\n    return product\
    \ * sum;", "    if (arr.empty())\n        return std::nullopt;\n    long prod\
    \ = 1;\n    for (auto i : arr)\n        prod *= i;\n    long sum = 0;\n    for\
    \ (auto i : arr)\n        sum += std::abs(i);\n    return prod * sum;", "    if\
    \ (arr.empty())\n        return std::nullopt;\n    long prod = 1;\n    for (auto\
    \ i : arr)\n        prod *= i;\n    long sum = 0;\n    for (auto i : arr)\n  \
    \      sum += std::abs(i);\n    return sum * prod;", "    if (arr.empty())\n \
    \       return std::nullopt;\n    long ans = 0;\n    for (long i : arr) {\n  \
    \      ans += std::abs(i) * std::sign(i);\n    }\n    return ans;"]
stop_tokens:
- "\n}"
