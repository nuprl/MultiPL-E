name: HumanEval_29_filter_by_prefix
language: cpp
prompt: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of strings\
  \ only for ones that start with a given prefix.\n// >>> filter_by_prefix([], 'a')\n\
  // []\n// >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n// ['abc',\
  \ 'array']\nstd::vector<std::string> filter_by_prefix(std::vector<std::string> strings,\
  \ std::string prefix) {\n"
tests: "}\nint main() {\n    auto candidate = filter_by_prefix;\n    assert(candidate((std::vector<std::string>()),\
  \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({\"\
  xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xxx\")) == (std::vector<std::string>({\"\
  xxx\", \"xxxAAA\", \"xxx\"})));\n}\n"
completions: ["    std::vector<std::string> result;\n    for(auto &str : strings)\
    \ {\n        if(str.substr(0, prefix.size()) == prefix) {\n            result.push_back(str);\n\
    \        }\n    }\n    return result;", "  std::vector<std::string> result;\n\
    \  for (auto &s : strings) {\n    if (s.substr(0, prefix.size()) == prefix) {\n\
    \      result.push_back(s);\n    }\n  }\n  return result;", "    std::vector<std::string>\
    \ result;\n    for (auto &string : strings) {\n        if (string.substr(0, prefix.size())\
    \ == prefix) {\n            result.push_back(string);\n        }\n    }\n    return\
    \ result;", "  std::vector<std::string> result;\n  for (auto &s : strings) {\n\
    \    if (s.substr(0, prefix.size()) == prefix) {\n      result.push_back(s);\n\
    \    }\n  }\n  return result;", "    std::vector<std::string> result;\n    for\
    \ (auto &string : strings) {\n        if (string.substr(0, prefix.size()) == prefix)\
    \ {\n            result.push_back(string);\n        }\n    }\n    return result;",
  "    std::vector<std::string> result;\n    for (auto &s : strings) {\n        if\
    \ (s.substr(0, prefix.size()) == prefix) {\n            result.push_back(s);\n\
    \        }\n    }\n    return result;", "    std::vector<std::string> result;\n\
    \    for (auto &string : strings) {\n        if (string.substr(0, prefix.size())\
    \ == prefix) {\n            result.push_back(string);\n        }\n    }\n    return\
    \ result;", "    std::vector<std::string> result;\n    for (auto &s : strings)\
    \ {\n        if (s.substr(0, prefix.size()) == prefix) {\n            result.push_back(s);\n\
    \        }\n    }\n    return result;", "    std::vector<std::string> result;\n\
    \    for(auto &s : strings) {\n        if(s.substr(0, prefix.size()) == prefix)\
    \ {\n            result.push_back(s);\n        }\n    }\n    return result;",
  "    std::vector<std::string> result;\n    for (auto &s : strings) {\n        if\
    \ (s.substr(0, prefix.size()) == prefix) {\n            result.push_back(s);\n\
    \        }\n    }\n    return result;", "    std::vector<std::string> result;\n\
    \    for (auto &s : strings) {\n        if (s.substr(0, prefix.size()) == prefix)\
    \ {\n            result.push_back(s);\n        }\n    }\n    return result;",
  "    std::vector<std::string> result;\n    for (auto &s : strings) {\n        if\
    \ (s.substr(0, prefix.size()) == prefix) {\n            result.push_back(s);\n\
    \        }\n    }\n    return result;", "  std::vector<std::string> result;\n\
    \  for (auto &string : strings) {\n    if (string.substr(0, prefix.size()) ==\
    \ prefix) {\n      result.push_back(string);\n    }\n  }\n  return result;", " \
    \   std::vector<std::string> result;\n    for (auto &s : strings) {\n        if\
    \ (s.substr(0, prefix.size()) == prefix) {\n            result.push_back(s);\n\
    \        }\n    }\n    return result;", "    std::vector<std::string> result;\n\
    \    for (auto &s : strings) {\n        if (s.substr(0, prefix.size()) == prefix)\
    \ {\n            result.push_back(s);\n        }\n    }\n    return result;",
  "  std::vector<std::string> result;\n  for (auto &s : strings) {\n    if (s.substr(0,\
    \ prefix.size()) == prefix) {\n      result.push_back(s);\n    }\n  }\n  return\
    \ result;", "    std::vector<std::string> result;\n    for (auto &s : strings)\
    \ {\n        if (s.substr(0, prefix.size()) == prefix) {\n            result.push_back(s);\n\
    \        }\n    }\n    return result;", "    std::vector<std::string> result;\n\
    \    for (auto &s : strings) {\n        if (s.substr(0, prefix.size()) == prefix)\
    \ {\n            result.push_back(s);\n        }\n    }\n    return result;",
  "    std::vector<std::string> result;\n    for (auto &string : strings) {\n    \
    \    if (string.substr(0, prefix.size()) == prefix) {\n            result.push_back(string);\n\
    \        }\n    }\n    return result;", "    std::vector<std::string> result;\n\
    \    for(auto &s : strings) {\n        if(s.substr(0, prefix.size()) == prefix)\
    \ {\n            result.push_back(s);\n        }\n    }\n    return result;",
  "    std::vector<std::string> result;\n    for (auto &s : strings) {\n        if\
    \ (s.substr(0, prefix.size()) == prefix) {\n            result.push_back(s);\n\
    \        }\n    }\n    return result;", "    std::vector<std::string> result;\n\
    \    for (auto &string : strings) {\n        if (string.substr(0, prefix.size())\
    \ == prefix) {\n            result.push_back(string);\n        }\n    }\n    return\
    \ result;", "    std::vector<std::string> result;\n    for (auto &string : strings)\
    \ {\n        if (string.substr(0, prefix.size()) == prefix) {\n            result.push_back(string);\n\
    \        }\n    }\n    return result;", "  std::vector<std::string> result;\n\
    \  for (std::string s : strings) {\n    if (s.substr(0, prefix.size()) == prefix)\
    \ {\n      result.push_back(s);\n    }\n  }\n  return result;", "    std::vector<std::string>\
    \ result;\n    for (auto &s : strings) {\n        if (s.substr(0, prefix.size())\
    \ == prefix) {\n            result.push_back(s);\n        }\n    }\n    return\
    \ result;", "    std::vector<std::string> result;\n    for (auto &string : strings)\
    \ {\n        if (string.substr(0, prefix.size()) == prefix) {\n            result.push_back(string);\n\
    \        }\n    }\n    return result;", "    std::vector<std::string> result;\n\
    \    for (std::string &string : strings) {\n        if (string.substr(0, prefix.size())\
    \ == prefix) {\n            result.push_back(string);\n        }\n    }\n    return\
    \ result;", "    std::vector<std::string> result;\n    for (auto &s : strings)\
    \ {\n        if (s.substr(0, prefix.size()) == prefix) {\n            result.push_back(s);\n\
    \        }\n    }\n    return result;", "  std::vector<std::string> result;\n\
    \  for (auto &s : strings) {\n    if (s.substr(0, prefix.size()) == prefix) {\n\
    \      result.push_back(s);\n    }\n  }\n  return result;", "    std::vector<std::string>\
    \ result;\n    for (auto &string : strings) {\n        if (string.substr(0, prefix.size())\
    \ == prefix) {\n            result.push_back(string);\n        }\n    }\n    return\
    \ result;", "    std::vector<std::string> result;\n    for (auto &s : strings)\
    \ {\n        if (s.substr(0, prefix.size()) == prefix) {\n            result.push_back(s);\n\
    \        }\n    }\n    return result;", "    std::vector<std::string> result;\n\
    \    for (auto &s : strings) {\n        if (s.substr(0, prefix.size()) == prefix)\
    \ {\n            result.push_back(s);\n        }\n    }\n    return result;",
  "  std::vector<std::string> result;\n  for (auto &s : strings) {\n    if (s.substr(0,\
    \ prefix.size()) == prefix) {\n      result.push_back(s);\n    }\n  }\n  return\
    \ result;", "  std::vector<std::string> result;\n  for (auto &string : strings)\
    \ {\n    if (string.substr(0, prefix.size()) == prefix) {\n      result.push_back(string);\n\
    \    }\n  }\n  return result;", "    std::vector<std::string> result;\n    for\
    \ (auto &string : strings) {\n        if (string.substr(0, prefix.size()) == prefix)\
    \ {\n            result.push_back(string);\n        }\n    }\n    return result;",
  "  std::vector<std::string> result;\n  for (std::string s : strings) {\n    if (s.substr(0,\
    \ prefix.size()) == prefix) {\n      result.push_back(s);\n    }\n  }\n  return\
    \ result;", "    std::vector<std::string> result;\n    for(auto &str : strings)\
    \ {\n        if(str.substr(0, prefix.size()) == prefix) {\n            result.push_back(str);\n\
    \        }\n    }\n    return result;", "    std::vector<std::string> result;\n\
    \    for (auto &string : strings) {\n        if (string.substr(0, prefix.size())\
    \ == prefix) {\n            result.push_back(string);\n        }\n    }\n    return\
    \ result;", "    std::vector<std::string> result;\n    for (std::string &string\
    \ : strings) {\n        if (string.substr(0, prefix.size()) == prefix) {\n   \
    \         result.push_back(string);\n        }\n    }\n    return result;", " \
    \   std::vector<std::string> result;\n    for (auto &s : strings) {\n        if\
    \ (s.substr(0, prefix.size()) == prefix) {\n            result.push_back(s);\n\
    \        }\n    }\n    return result;", "    std::vector<std::string> result;\n\
    \    for (auto &string : strings) {\n        if (string.substr(0, prefix.size())\
    \ == prefix) {\n            result.push_back(string);\n        }\n    }\n    return\
    \ result;", "    std::vector<std::string> result;\n    for (auto &s : strings)\
    \ {\n        if (s.substr(0, prefix.size()) == prefix) {\n            result.push_back(s);\n\
    \        }\n    }\n    return result;", "  std::vector<std::string> result;\n\
    \  for (auto &string : strings) {\n    if (string.substr(0, prefix.size()) ==\
    \ prefix) {\n      result.push_back(string);\n    }\n  }\n  return result;", " \
    \   std::vector<std::string> result;\n    for (auto &s : strings) {\n        if\
    \ (s.substr(0, prefix.size()) == prefix) {\n            result.push_back(s);\n\
    \        }\n    }\n    return result;", "    std::vector<std::string> result;\n\
    \    for(auto &s : strings) {\n        if(s.substr(0, prefix.size()) == prefix)\
    \ {\n            result.push_back(s);\n        }\n    }\n    return result;",
  "  std::vector<std::string> result;\n  for (auto &s : strings) {\n    if (s.substr(0,\
    \ prefix.size()) == prefix) {\n      result.push_back(s);\n    }\n  }\n  return\
    \ result;", "    std::vector<std::string> result;\n    for (auto &string : strings)\
    \ {\n        if (string.substr(0, prefix.size()) == prefix) {\n            result.push_back(string);\n\
    \        }\n    }\n    return result;", "  std::vector<std::string> result;\n\
    \  for (const auto& string : strings) {\n    if (string.substr(0, prefix.size())\
    \ == prefix) {\n      result.push_back(string);\n    }\n  }\n  return result;",
  "    std::vector<std::string> result;\n    for (auto &string : strings) {\n    \
    \    if (string.substr(0, prefix.size()) == prefix) {\n            result.push_back(string);\n\
    \        }\n    }\n    return result;", "    std::vector<std::string> result;\n\
    \    for (auto &s : strings) {\n        if (s.substr(0, prefix.size()) == prefix)\
    \ {\n            result.push_back(s);\n        }\n    }\n    return result;",
  "    std::vector<std::string> result;\n    for (auto &s : strings) {\n        if\
    \ (s.substr(0, prefix.size()) == prefix) {\n            result.push_back(s);\n\
    \        }\n    }\n    return result;", "  std::vector<std::string> result;\n\
    \  for (auto &s : strings) {\n    if (s.substr(0, prefix.size()) == prefix) {\n\
    \      result.push_back(s);\n    }\n  }\n  return result;", "    std::vector<std::string>\
    \ result;\n    for (auto &s : strings) {\n        if (s.substr(0, prefix.size())\
    \ == prefix) {\n            result.push_back(s);\n        }\n    }\n    return\
    \ result;", "    std::vector<std::string> result;\n    for (auto &s : strings)\
    \ {\n        if (s.substr(0, prefix.size()) == prefix) {\n            result.push_back(s);\n\
    \        }\n    }\n    return result;", "    std::vector<std::string> result;\n\
    \    for (auto &s : strings) {\n        if (s.substr(0, prefix.size()) == prefix)\
    \ {\n            result.push_back(s);\n        }\n    }\n    return result;",
  "    std::vector<std::string> result;\n    for (auto &s : strings) {\n        if\
    \ (s.substr(0, prefix.size()) == prefix) {\n            result.push_back(s);\n\
    \        }\n    }\n    return result;", "    std::vector<std::string> result;\n\
    \    for (auto &s : strings) {\n        if (s.substr(0, prefix.size()) == prefix)\
    \ {\n            result.push_back(s);\n        }\n    }\n    return result;",
  "    std::vector<std::string> result;\n    for (auto &s : strings) {\n        if\
    \ (s.substr(0, prefix.size()) == prefix) {\n            result.push_back(s);\n\
    \        }\n    }\n    return result;", "    std::vector<std::string> result;\n\
    \    for (auto &s : strings) {\n        if (s.substr(0, prefix.size()) == prefix)\
    \ {\n            result.push_back(s);\n        }\n    }\n    return result;",
  "    std::vector<std::string> result;\n    for (auto &s : strings) {\n        if\
    \ (s.substr(0, prefix.size()) == prefix) {\n            result.push_back(s);\n\
    \        }\n    }\n    return result;", "    std::vector<std::string> result;\n\
    \    for (auto &s : strings) {\n        if (s.substr(0, prefix.size()) == prefix)\
    \ {\n            result.push_back(s);\n        }\n    }\n    return result;",
  "  std::vector<std::string> result;\n  for (auto &string : strings) {\n    if (string.substr(0,\
    \ prefix.size()) == prefix) {\n      result.push_back(string);\n    }\n  }\n \
    \ return result;", "    std::vector<std::string> result;\n    for (auto &s : strings)\
    \ {\n        if (s.substr(0, prefix.size()) == prefix) {\n            result.push_back(s);\n\
    \        }\n    }\n    return result;", "    std::vector<std::string> result;\n\
    \    for (auto &s : strings) {\n        if (s.substr(0, prefix.size()) == prefix)\
    \ {\n            result.push_back(s);\n        }\n    }\n    return result;",
  "    std::vector<std::string> result;\n    for (auto &string : strings) {\n    \
    \    if (string.substr(0, prefix.size()) == prefix) {\n            result.push_back(string);\n\
    \        }\n    }\n    return result;", "  std::vector<std::string> result;\n\
    \  for (auto &string : strings) {\n    if (string.substr(0, prefix.size()) ==\
    \ prefix) {\n      result.push_back(string);\n    }\n  }\n  return result;", " \
    \ std::vector<std::string> result;\n  for (auto &s : strings) {\n    if (s.substr(0,\
    \ prefix.size()) == prefix) {\n      result.push_back(s);\n    }\n  }\n  return\
    \ result;", "    std::vector<std::string> result;\n    for(auto &s : strings)\
    \ {\n        if(s.substr(0, prefix.size()) == prefix) {\n            result.push_back(s);\n\
    \        }\n    }\n    return result;", "    std::vector<std::string> result;\n\
    \    for (auto &string : strings) {\n        if (string.substr(0, prefix.size())\
    \ == prefix) {\n            result.push_back(string);\n        }\n    }\n    return\
    \ result;", "    std::vector<std::string> result;\n    for (auto &s : strings)\
    \ {\n        if (s.substr(0, prefix.size()) == prefix) {\n            result.push_back(s);\n\
    \        }\n    }\n    return result;", "    std::vector<std::string> result;\n\
    \    for (std::string s : strings) {\n        if (s.substr(0, prefix.size()) ==\
    \ prefix) {\n            result.push_back(s);\n        }\n    }\n    return result;",
  "    std::vector<std::string> result;\n    bool found = false;\n    for (auto &string\
    \ : strings) {\n        if (string.substr(0, prefix.size()) == prefix) {\n   \
    \         found = true;\n            result.push_back(string);\n        }\n  \
    \  }\n    if (!found) {\n        throw std::invalid_argument(\"No strings starting\
    \ with prefix \" + prefix);\n    }\n    return result;", "    std::vector<std::string>\
    \ result;\n    for (auto &string : strings) {\n        if (string.substr(0, prefix.size())\
    \ == prefix) {\n            result.push_back(string);\n        }\n    }\n    return\
    \ result;", "    std::vector<std::string> result;\n    for (auto &s : strings)\
    \ {\n        if (s.substr(0, prefix.size()) == prefix) {\n            result.push_back(s);\n\
    \        }\n    }\n    return result;", "    std::vector<std::string> result;\n\
    \    for (auto &string : strings) {\n        if (string.substr(0, prefix.size())\
    \ == prefix) {\n            result.push_back(string);\n        }\n    }\n    return\
    \ result;", "    std::vector<std::string> result;\n    for (auto &string : strings)\
    \ {\n        if (string.substr(0, prefix.size()) == prefix) {\n            result.push_back(string);\n\
    \        }\n    }\n    return result;", "    std::vector<std::string> result;\n\
    \    for (auto &s : strings) {\n        if (s.substr(0, prefix.size()) == prefix)\
    \ {\n            result.push_back(s);\n        }\n    }\n    return result;",
  "    std::vector<std::string> result;\n    for (auto &string : strings) {\n    \
    \    if (string.substr(0, prefix.size()) == prefix) {\n            result.push_back(string);\n\
    \        }\n    }\n    return result;", "    std::vector<std::string> result;\n\
    \    for (auto &s : strings) {\n        if (s.substr(0, prefix.size()) == prefix)\
    \ {\n            result.push_back(s);\n        }\n    }\n    return result;",
  "    std::vector<std::string> result;\n    for (auto &string : strings) {\n    \
    \    if (string.substr(0, prefix.size()) == prefix) {\n            result.push_back(string);\n\
    \        }\n    }\n    return result;", "  std::vector<std::string> result;\n\
    \  for (auto &s : strings) {\n    if (s.substr(0, prefix.size()) == prefix) {\n\
    \      result.push_back(s);\n    }\n  }\n  return result;", "    std::vector<std::string>\
    \ result;\n    for(auto &s : strings) {\n        if(s.substr(0, prefix.size())\
    \ == prefix) {\n            result.push_back(s);\n        }\n    }\n    return\
    \ result;", "  std::vector<std::string> result;\n  for (const auto& s : strings)\
    \ {\n    if (s.substr(0, prefix.size()) == prefix) {\n      result.push_back(s);\n\
    \    }\n  }\n  return result;", "    std::vector<std::string> result;\n    for\
    \ (auto &s : strings) {\n        if (s.substr(0, prefix.size()) == prefix) {\n\
    \            result.push_back(s);\n        }\n    }\n    return result;", "  \
    \  std::vector<std::string> result;\n    for (auto &string : strings) {\n    \
    \    if (string.substr(0, prefix.size()) == prefix) {\n            result.push_back(string);\n\
    \        }\n    }\n    return result;", "  std::vector<std::string> result;\n\
    \  for (auto &s : strings) {\n    if (s.substr(0, prefix.size()) == prefix) {\n\
    \      result.push_back(s);\n    }\n  }\n  return result;", "    std::vector<std::string>\
    \ result;\n    for (auto &string : strings) {\n        if (string.substr(0, prefix.size())\
    \ == prefix) {\n            result.push_back(string);\n        }\n    }\n    return\
    \ result;", "    std::vector<std::string> result;\n    for (auto &s : strings)\
    \ {\n        if (s.substr(0, prefix.size()) == prefix) {\n            result.push_back(s);\n\
    \        }\n    }\n    return result;", "    std::vector<std::string> result;\n\
    \    for (auto &s : strings) {\n        if (s.substr(0, prefix.size()) == prefix)\
    \ {\n            result.push_back(s);\n        }\n    }\n    return result;",
  "  std::vector<std::string> result;\n  for (auto &s : strings) {\n    if (s.substr(0,\
    \ prefix.size()) == prefix) {\n      result.push_back(s);\n    }\n  }\n  return\
    \ result;", "    std::vector<std::string> result;\n    for (std::string &string\
    \ : strings) {\n        if (string.substr(0, prefix.size()) == prefix) {\n   \
    \         result.push_back(string);\n        }\n    }\n    return result;", " \
    \   std::vector<std::string> result;\n    for (std::string &s : strings) {\n \
    \       if (s.substr(0, prefix.length()) == prefix) {\n            result.push_back(s);\n\
    \        }\n    }\n    return result;", "    std::vector<std::string> result;\n\
    \    for (auto &string : strings) {\n        if (string.substr(0, prefix.size())\
    \ == prefix) {\n            result.push_back(string);\n        }\n    }\n    return\
    \ result;", "    std::vector<std::string> result;\n    for (auto &s : strings)\
    \ {\n        if (s.substr(0, prefix.size()) == prefix) {\n            result.push_back(s);\n\
    \        }\n    }\n    return result;", "  std::vector<std::string> result;\n\
    \  for (auto &string : strings) {\n    if (string.substr(0, prefix.size()) ==\
    \ prefix) {\n      result.push_back(string);\n    }\n  }\n  return result;", " \
    \ std::vector<std::string> result;\n  for (auto &string : strings) {\n    if (string.substr(0,\
    \ prefix.size()) == prefix) {\n      result.push_back(string);\n    }\n  }\n \
    \ return result;", "    std::vector<std::string> result;\n    for (auto &string\
    \ : strings) {\n        if (string.substr(0, prefix.size()) == prefix) {\n   \
    \         result.push_back(string);\n        }\n    }\n    return result;", " \
    \ std::vector<std::string> result;\n  for (std::string s : strings) {\n    if\
    \ (s.substr(0, prefix.length()) == prefix) {\n      result.push_back(s);\n   \
    \ }\n  }\n  return result;", "    std::vector<std::string> result;\n    for (auto\
    \ &s : strings) {\n        if (s.substr(0, prefix.size()) == prefix) {\n     \
    \       result.push_back(s);\n        }\n    }\n    return result;", "  std::vector<std::string>\
    \ result;\n  for (std::string &string : strings) {\n    if (string.substr(0, prefix.size())\
    \ == prefix) {\n      result.push_back(string);\n    }\n  }\n  return result;",
  "    std::vector<std::string> result;\n    for(auto &s : strings) {\n        if(s.substr(0,\
    \ prefix.size()) == prefix) {\n            result.push_back(s);\n        }\n \
    \   }\n    return result;", "    std::vector<std::string> result;\n    for (auto\
    \ &s : strings) {\n        if (s.substr(0, prefix.size()) == prefix) {\n     \
    \       result.push_back(s);\n        }\n    }\n    return result;", "    std::vector<std::string>\
    \ result;\n    for (auto &string : strings) {\n        if (string.substr(0, prefix.size())\
    \ == prefix) {\n            result.push_back(string);\n        }\n    }\n    return\
    \ result;", "    std::vector<std::string> result;\n    for (auto &s : strings)\
    \ {\n        if (s.substr(0, prefix.size()) == prefix) {\n            result.push_back(s);\n\
    \        }\n    }\n    return result;", "    std::vector<std::string> result;\n\
    \    for (auto &s : strings) {\n        if (s.substr(0, prefix.size()) == prefix)\
    \ {\n            result.push_back(s);\n        }\n    }\n    return result;",
  "  std::vector<std::string> result;\n  for (auto &s : strings) {\n    if (s.substr(0,\
    \ prefix.size()) == prefix) {\n      result.push_back(s);\n    }\n  }\n  return\
    \ result;", "    std::vector<std::string> result;\n    for (std::string s : strings)\
    \ {\n        if (s.substr(0, prefix.length()) == prefix) {\n            result.push_back(s);\n\
    \        }\n    }\n    return result;", "  std::vector<std::string> result;\n\
    \  for (auto &s : strings) {\n    if (s.substr(0, prefix.size()) == prefix) {\n\
    \      result.push_back(s);\n    }\n  }\n  return result;", "    std::vector<std::string>\
    \ result;\n    for (auto &s : strings) {\n        if (s.substr(0, prefix.size())\
    \ == prefix) {\n            result.push_back(s);\n        }\n    }\n    return\
    \ result;", "    std::vector<std::string> result;\n    for (auto &s : strings)\
    \ {\n        if (s.substr(0, prefix.size()) == prefix) {\n            result.push_back(s);\n\
    \        }\n    }\n    return result;", "    std::vector<std::string> result;\n\
    \    for (auto &s : strings) {\n        if (s.substr(0, prefix.size()) == prefix)\
    \ {\n            result.push_back(s);\n        }\n    }\n    return result;",
  "    std::vector<std::string> result;\n    for (auto &s : strings) {\n        if\
    \ (s.substr(0, prefix.size()) == prefix) {\n            result.push_back(s);\n\
    \        }\n    }\n    return result;", "    std::vector<std::string> result;\n\
    \    for(auto &s : strings) {\n        if(s.substr(0, prefix.size()) == prefix)\
    \ {\n            result.push_back(s);\n        }\n    }\n    return result;",
  "  std::vector<std::string> result;\n  for (auto &s : strings) {\n    if (s.substr(0,\
    \ prefix.size()) == prefix) {\n      result.push_back(s);\n    }\n  }\n  return\
    \ result;", "  std::vector<std::string> result;\n  for (const auto& s : strings)\
    \ {\n    if (s.substr(0, prefix.length()) == prefix) {\n      result.push_back(s);\n\
    \    }\n  }\n  return result;", "    std::vector<std::string> result;\n    for\
    \ (auto &string : strings) {\n        if (string.substr(0, prefix.size()) == prefix)\
    \ {\n            result.push_back(string);\n        }\n    }\n    return result;",
  "  std::vector<std::string> result;\n  for (auto &string : strings) {\n    if (string.substr(0,\
    \ prefix.size()) == prefix) {\n      result.push_back(string);\n    }\n  }\n \
    \ return result;", "    std::vector<std::string> result;\n    for (auto &s : strings)\
    \ {\n        if (s.substr(0, prefix.size()) == prefix) {\n            result.push_back(s);\n\
    \        }\n    }\n    return result;", "    std::vector<std::string> result;\n\
    \    for (auto &s : strings) {\n        if (s.substr(0, prefix.size()) == prefix)\
    \ {\n            result.push_back(s);\n        }\n    }\n    return result;",
  "  std::vector<std::string> result;\n  for (auto &string : strings) {\n    if (string.substr(0,\
    \ prefix.size()) == prefix) {\n      result.push_back(string);\n    }\n  }\n \
    \ return result;", "  std::vector<std::string> result;\n  for (auto &s : strings)\
    \ {\n    if (s.substr(0, prefix.size()) == prefix) {\n      result.push_back(s);\n\
    \    }\n  }\n  return result;", "    std::vector<std::string> result;\n    for\
    \ (auto &s : strings) {\n        if (s.substr(0, prefix.size()) == prefix) {\n\
    \            result.push_back(s);\n        }\n    }\n    return result;", "  \
    \  std::vector<std::string> result;\n    for (auto &s : strings) {\n        if\
    \ (s.substr(0, prefix.size()) == prefix) {\n            result.push_back(s);\n\
    \        }\n    }\n    return result;", "    std::vector<std::string> result;\n\
    \    for (auto &s : strings) {\n        if (s.substr(0, prefix.size()) == prefix)\
    \ {\n            result.push_back(s);\n        }\n    }\n    return result;",
  "    std::vector<std::string> result;\n    for (auto &s : strings) {\n        if\
    \ (s.substr(0, prefix.size()) == prefix) {\n            result.push_back(s);\n\
    \        }\n    }\n    return result;", "    std::vector<std::string> result;\n\
    \    for (auto &s : strings) {\n        if (s.substr(0, prefix.size()) == prefix)\
    \ {\n            result.push_back(s);\n        }\n    }\n    return result;",
  "  std::vector<std::string> result;\n  for (auto &s : strings) {\n    if (s.substr(0,\
    \ prefix.size()) == prefix) {\n      result.push_back(s);\n    }\n  }\n  return\
    \ result;", "    std::vector<std::string> result;\n    for (auto &string : strings)\
    \ {\n        if (string.substr(0, prefix.size()) == prefix) {\n            result.push_back(string);\n\
    \        }\n    }\n    return result;", "    std::vector<std::string> result;\n\
    \    for (auto &s : strings) {\n        if (s.substr(0, prefix.size()) == prefix)\
    \ {\n            result.push_back(s);\n        }\n    }\n    return result;",
  "    std::vector<std::string> result;\n    for (auto &s : strings) {\n        if\
    \ (s.substr(0, prefix.size()) == prefix) {\n            result.push_back(s);\n\
    \        }\n    }\n    return result;", "    std::vector<std::string> result;\n\
    \    for (auto &s : strings) {\n        if (s.substr(0, prefix.size()) == prefix)\
    \ {\n            result.push_back(s);\n        }\n    }\n    return result;",
  "    std::vector<std::string> result;\n    for (std::string &string : strings) {\n\
    \        if (string.substr(0, prefix.size()) == prefix) {\n            result.push_back(string);\n\
    \        }\n    }\n    return result;", "    std::vector<std::string> result;\n\
    \    for (auto &s : strings) {\n        if (s.substr(0, prefix.size()) == prefix)\
    \ {\n            result.push_back(s);\n        }\n    }\n    return result;",
  "  std::vector<std::string> result;\n  for (auto &string : strings) {\n    if (string.substr(0,\
    \ prefix.size()) == prefix) {\n      result.push_back(string);\n    }\n  }\n \
    \ return result;", "    std::vector<std::string> result;\n    for (std::string\
    \ &string : strings) {\n        if (string.substr(0, prefix.size()) == prefix)\
    \ {\n            result.push_back(string);\n        }\n    }\n    return result;",
  "    std::vector<std::string> result;\n    for(auto &str : strings) {\n        if(str.substr(0,\
    \ prefix.size()) == prefix) {\n            result.push_back(str);\n        }\n\
    \    }\n    return result;", "    std::vector<std::string> result;\n    for (auto\
    \ &s : strings) {\n        if (s.substr(0, prefix.size()) == prefix) {\n     \
    \       result.push_back(s);\n        }\n    }\n    return result;", "    std::vector<std::string>\
    \ result;\n    for (auto &s : strings) {\n        if (s.substr(0, prefix.size())\
    \ == prefix) {\n            result.push_back(s);\n        }\n    }\n    return\
    \ result;", "    std::vector<std::string> result;\n    for (auto &s : strings)\
    \ {\n        if (s.substr(0, prefix.size()) == prefix) {\n            result.push_back(s);\n\
    \        }\n    }\n    return result;", "    std::vector<std::string> result;\n\
    \    for (auto &s : strings) {\n        if (s.substr(0, prefix.size()) == prefix)\
    \ {\n            result.push_back(s);\n        }\n    }\n    return result;",
  "    std::vector<std::string> result;\n    for (auto &s : strings) {\n        if\
    \ (s.substr(0, prefix.size()) == prefix) {\n            result.push_back(s);\n\
    \        }\n    }\n    return result;", "    std::vector<std::string> result;\n\
    \    for (auto &string : strings) {\n        if (string.substr(0, prefix.size())\
    \ == prefix) {\n            result.push_back(string);\n        }\n    }\n    return\
    \ result;", "    std::vector<std::string> result;\n    for (auto &s : strings)\
    \ {\n        if (s.substr(0, prefix.size()) == prefix) {\n            result.push_back(s);\n\
    \        }\n    }\n    return result;", "    std::vector<std::string> result;\n\
    \    for(auto &string : strings) {\n        if(string.substr(0, prefix.size())\
    \ == prefix) {\n            result.push_back(string);\n        }\n    }\n    return\
    \ result;", "    std::vector<std::string> result;\n    for (auto &s : strings)\
    \ {\n        if (s.substr(0, prefix.size()) == prefix) {\n            result.push_back(s);\n\
    \        }\n    }\n    return result;", "    std::vector<std::string> result;\n\
    \    for (auto &s : strings) {\n        if (s.substr(0, prefix.size()) == prefix)\
    \ {\n            result.push_back(s);\n        }\n    }\n    return result;",
  "    std::vector<std::string> result;\n    for (auto &s : strings) {\n        if\
    \ (s.substr(0, prefix.size()) == prefix) {\n            result.push_back(s);\n\
    \        }\n    }\n    return result;", "    std::vector<std::string> result;\n\
    \    for (auto &s : strings) {\n        if (s.substr(0, prefix.size()) == prefix)\
    \ {\n            result.push_back(s);\n        }\n    }\n    return result;",
  "  std::vector<std::string> result;\n  for (auto &s : strings) {\n    if (s.substr(0,\
    \ prefix.length()) == prefix) {\n      result.push_back(s);\n    }\n  }\n  return\
    \ result;", "    std::vector<std::string> result;\n    for (auto &s : strings)\
    \ {\n        if (s.substr(0, prefix.size()) == prefix) {\n            result.push_back(s);\n\
    \        }\n    }\n    return result;", "    std::vector<std::string> result;\n\
    \    for (auto &string : strings) {\n        if (string.substr(0, prefix.size())\
    \ == prefix) {\n            result.push_back(string);\n        }\n    }\n    return\
    \ result;", "    std::vector<std::string> result;\n    for (auto &string : strings)\
    \ {\n        if (string.substr(0, prefix.size()) == prefix) {\n            result.push_back(string);\n\
    \        }\n    }\n    return result;", "    std::vector<std::string> result;\n\
    \    for (auto &string : strings) {\n        if (string.substr(0, prefix.size())\
    \ == prefix) {\n            result.push_back(string);\n        }\n    }\n    return\
    \ result;", "  std::vector<std::string> result;\n  for (auto &s : strings) {\n\
    \    if (s.substr(0, prefix.size()) == prefix) {\n      result.push_back(s);\n\
    \    }\n  }\n  return result;", "    std::vector<std::string> result;\n    for\
    \ (auto &s : strings) {\n        if (s.substr(0, prefix.size()) == prefix) {\n\
    \            result.push_back(s);\n        }\n    }\n    return result;", "  std::vector<std::string>\
    \ result;\n  for (auto &s : strings) {\n    if (s.substr(0, prefix.size()) ==\
    \ prefix) {\n      result.push_back(s);\n    }\n  }\n  return result;", "    std::vector<std::string>\
    \ result;\n    for (auto &s : strings) {\n        if (s.substr(0, prefix.size())\
    \ == prefix) {\n            result.push_back(s);\n        }\n    }\n    return\
    \ result;", "    std::vector<std::string> result;\n    for(auto &s : strings)\
    \ {\n        if(s.substr(0, prefix.size()) == prefix) {\n            result.push_back(s);\n\
    \        }\n    }\n    return result;", "    std::vector<std::string> result;\n\
    \    for (auto &s : strings) {\n        if (s.substr(0, prefix.size()) == prefix)\
    \ {\n            result.push_back(s);\n        }\n    }\n    return result;",
  "    std::vector<std::string> result;\n    for (std::string s : strings) {\n   \
    \     if (s.substr(0, prefix.size()) == prefix) {\n            result.push_back(s);\n\
    \        }\n    }\n    return result;", "  std::vector<std::string> result;\n\
    \  for (std::string s : strings) {\n    if (s.substr(0, prefix.size()) == prefix)\
    \ {\n      result.push_back(s);\n    }\n  }\n  return result;", "    std::vector<std::string>\
    \ result;\n    for (auto &string : strings) {\n        if (string.substr(0, prefix.size())\
    \ == prefix) {\n            result.push_back(string);\n        }\n    }\n    return\
    \ result;", "  std::vector<std::string> result;\n  for (auto &s : strings) {\n\
    \    if (s.substr(0, prefix.size()) == prefix) {\n      result.push_back(s);\n\
    \    }\n  }\n  return result;", "  std::vector<std::string> result;\n  for (auto\
    \ &s : strings) {\n    if (s.substr(0, prefix.size()) == prefix) {\n      result.push_back(s);\n\
    \    }\n  }\n  return result;", "    std::vector<std::string> result;\n    for\
    \ (auto &string : strings) {\n        if (string.substr(0, prefix.size()) == prefix)\
    \ {\n            result.push_back(string);\n        }\n    }\n    return result;",
  "    std::vector<std::string> result;\n    for (auto &string : strings) {\n    \
    \    if (string.substr(0, prefix.size()) == prefix) {\n            result.push_back(string);\n\
    \        }\n    }\n    return result;", "  std::vector<std::string> result;\n\
    \  for (auto &string : strings) {\n    if (string.substr(0, prefix.size()) ==\
    \ prefix) {\n      result.push_back(string);\n    }\n  }\n  return result;", " \
    \   std::vector<std::string> result;\n    for (auto &s : strings) {\n        if\
    \ (s.substr(0, prefix.size()) == prefix) {\n            result.push_back(s);\n\
    \        }\n    }\n    return result;", "  std::vector<std::string> result;\n\
    \  for (auto &string : strings) {\n    if (string.substr(0, prefix.size()) ==\
    \ prefix) {\n      result.push_back(string);\n    }\n  }\n  return result;", " \
    \   std::vector<std::string> result;\n    for (auto &s : strings) {\n        if\
    \ (s.substr(0, prefix.size()) == prefix) {\n            result.push_back(s);\n\
    \        }\n    }\n    return result;", "    std::vector<std::string> result;\n\
    \    for (auto &s : strings) {\n        if (s.substr(0, prefix.size()) == prefix)\
    \ {\n            result.push_back(s);\n        }\n    }\n    return result;",
  "    std::vector<std::string> result;\n    for (auto &string : strings) {\n    \
    \    if (string.substr(0, prefix.size()) == prefix) {\n            result.push_back(string);\n\
    \        }\n    }\n    return result;", "    std::vector<std::string> result;\n\
    \    for (std::string &string : strings) {\n        if (string.substr(0, prefix.size())\
    \ == prefix) {\n            result.push_back(string);\n        }\n    }\n    return\
    \ result;", "    std::vector<std::string> result;\n    for (auto &s : strings)\
    \ {\n        if (s.substr(0, prefix.size()) == prefix) {\n            result.push_back(s);\n\
    \        }\n    }\n    return result;", "    std::vector<std::string> result;\n\
    \    for (auto &s : strings) {\n        if (s.substr(0, prefix.size()) == prefix)\
    \ {\n            result.push_back(s);\n        }\n    }\n    return result;",
  "    std::vector<std::string> result;\n    for (std::string &s : strings) {\n  \
    \      if (s.substr(0, prefix.size()) == prefix) {\n            result.push_back(s);\n\
    \        }\n    }\n    return result;", "    std::vector<std::string> result;\n\
    \    for (auto &s : strings) {\n        if (s.substr(0, prefix.size()) == prefix)\
    \ {\n            result.push_back(s);\n        }\n    }\n    return result;",
  "  std::vector<std::string> result;\n  for (std::string s : strings) {\n    if (s.substr(0,\
    \ prefix.size()) == prefix) {\n      result.push_back(s);\n    }\n  }\n  return\
    \ result;", "    std::vector<std::string> result;\n    for (auto &s : strings)\
    \ {\n        if (s.substr(0, prefix.size()) == prefix) {\n            result.push_back(s);\n\
    \        }\n    }\n    return result;", "  std::vector<std::string> result;\n\
    \  for (auto &s : strings) {\n    if (s.substr(0, prefix.size()) == prefix) {\n\
    \      result.push_back(s);\n    }\n  }\n  return result;", "    std::vector<std::string>\
    \ result;\n    for (auto &s : strings) {\n        if (s.substr(0, prefix.size())\
    \ == prefix) {\n            result.push_back(s);\n        }\n    }\n    return\
    \ result;", "  std::vector<std::string> result;\n  for (auto &s : strings) {\n\
    \    if (s.substr(0, prefix.size()) == prefix) {\n      result.push_back(s);\n\
    \    }\n  }\n  return result;", "    std::vector<std::string> result;\n    for\
    \ (auto &s : strings) {\n        if (s.substr(0, prefix.size()) == prefix) {\n\
    \            result.push_back(s);\n        }\n    }\n    return result;", "  std::vector<std::string>\
    \ result;\n  for (auto &s : strings) {\n    if (s.substr(0, prefix.size()) ==\
    \ prefix) {\n      result.push_back(s);\n    }\n  }\n  return result;", "    std::vector<std::string>\
    \ result;\n    for (auto &string : strings) {\n        if (string.substr(0, prefix.size())\
    \ == prefix) {\n            result.push_back(string);\n        }\n    }\n    return\
    \ result;", "    std::vector<std::string> result;\n    for (auto &string : strings)\
    \ {\n        if (string.substr(0, prefix.size()) == prefix) {\n            result.push_back(string);\n\
    \        }\n    }\n    return result;", "    std::vector<std::string> result;\n\
    \    for(auto &string : strings) {\n        if(string.substr(0, prefix.size())\
    \ == prefix) {\n            result.push_back(string);\n        }\n    }\n    return\
    \ result;", "    std::vector<std::string> result;\n    for (auto &s : strings)\
    \ {\n        if (s.substr(0, prefix.size()) == prefix) {\n            result.push_back(s);\n\
    \        }\n    }\n    return result;", "    std::vector<std::string> result;\n\
    \    for (auto &s : strings) {\n        if (s.substr(0, prefix.size()) == prefix)\
    \ {\n            result.push_back(s);\n        }\n    }\n    return result;",
  "  std::vector<std::string> result;\n  for (std::string s : strings) {\n    if (s.substr(0,\
    \ prefix.size()) == prefix) {\n      result.push_back(s);\n    }\n  }\n  return\
    \ result;", "    std::vector<std::string> result;\n    for (auto &string : strings)\
    \ {\n        if (string.substr(0, prefix.size()) == prefix) {\n            result.push_back(string);\n\
    \        }\n    }\n    return result;", "    std::vector<std::string> result;\n\
    \    for (auto &string : strings) {\n        if (string.substr(0, prefix.size())\
    \ == prefix) {\n            result.push_back(string);\n        }\n    }\n    return\
    \ result;", "    std::vector<std::string> result;\n    for(auto &s: strings) {\n\
    \        if(s.substr(0, prefix.size()) == prefix) {\n            result.push_back(s);\n\
    \        }\n    }\n    return result;", "  std::vector<std::string> result;\n\
    \  for (auto &s : strings) {\n    if (s.substr(0, prefix.length()) == prefix)\
    \ {\n      result.push_back(s);\n    }\n  }\n  return result;", "  std::vector<std::string>\
    \ result;\n  for (auto &s : strings) {\n    if (s.substr(0, prefix.size()) ==\
    \ prefix) {\n      result.push_back(s);\n    }\n  }\n  return result;", "    std::vector<std::string>\
    \ result;\n    for (auto &s : strings) {\n        if (s.substr(0, prefix.size())\
    \ == prefix) {\n            result.push_back(s);\n        }\n    }\n    return\
    \ result;", "    std::vector<std::string> result;\n    for (auto &string : strings)\
    \ {\n        if (string.substr(0, prefix.size()) == prefix) {\n            result.push_back(string);\n\
    \        }\n    }\n    return result;", "    std::vector<std::string> result;\n\
    \    for (auto &s : strings) {\n        if (s.substr(0, prefix.size()) == prefix)\
    \ {\n            result.push_back(s);\n        }\n    }\n    return result;",
  "    std::vector<std::string> result;\n    for (auto &s : strings) {\n        if\
    \ (s.substr(0, prefix.size()) == prefix) {\n            result.push_back(s);\n\
    \        }\n    }\n    return result;", "    std::vector<std::string> result;\n\
    \    for (auto &s : strings) {\n        if (s.substr(0, prefix.size()) == prefix)\
    \ {\n            result.push_back(s);\n        }\n    }\n    return result;"]
stop_tokens:
- "\n}"
