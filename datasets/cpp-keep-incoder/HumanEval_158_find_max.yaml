name: HumanEval_158_find_max
language: cpp
prompt: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that accepts\
  \ a list of strings.\n// The list contains different words. Return the word with\
  \ maximum number\n// of unique characters. If multiple strings have maximum number\
  \ of unique\n// characters, return the one which comes first in lexicographical\
  \ order.\n// find_max([\"name\", \"of\", \"string\"]) == \"string\"\n// find_max([\"\
  name\", \"enam\", \"game\"]) == \"enam\"\n// find_max([\"aaaaaaa\", \"bb\" ,\"cc\"\
  ]) == \"\"aaaaaaa\"\nstd::string find_max(std::vector<std::string> words) {\n"
tests: "}\nint main() {\n    auto candidate = find_max;\n    assert(candidate((std::vector<std::string>({\"\
  name\", \"of\", \"string\"}))) == (\"string\"));\n    assert(candidate((std::vector<std::string>({\"\
  name\", \"enam\", \"game\"}))) == (\"enam\"));\n    assert(candidate((std::vector<std::string>({\"\
  aaaaaaa\", \"bb\", \"cc\"}))) == (\"aaaaaaa\"));\n    assert(candidate((std::vector<std::string>({\"\
  abc\", \"cba\"}))) == (\"abc\"));\n    assert(candidate((std::vector<std::string>({\"\
  play\", \"this\", \"game\", \"of\", \"footbott\"}))) == (\"footbott\"));\n    assert(candidate((std::vector<std::string>({\"\
  we\", \"are\", \"gonna\", \"rock\"}))) == (\"gonna\"));\n    assert(candidate((std::vector<std::string>({\"\
  we\", \"are\", \"a\", \"mad\", \"nation\"}))) == (\"nation\"));\n    assert(candidate((std::vector<std::string>({\"\
  this\", \"is\", \"a\", \"prrk\"}))) == (\"this\"));\n    assert(candidate((std::vector<std::string>({\"\
  b\"}))) == (\"b\"));\n    assert(candidate((std::vector<std::string>({\"play\",\
  \ \"play\", \"play\"}))) == (\"play\"));\n}\n"
completions: ["    // code here\n    std::string max;\n    int maxCount = 0;\n   \
    \ for (auto &word : words) {\n        auto count = std::count(word.begin(), word.end(),\
    \ 'a');\n        if (count > maxCount) {\n            max = word;\n          \
    \  maxCount = count;\n        }\n    }\n    return max;", "    // Your code here\n\
    \    std::string max;\n    int maxCount = 0;\n    for (auto &word: words) {\n\
    \        std::unordered_map<char, int> charCount;\n        for (auto &c: word)\
    \ {\n            charCount[c]++;\n        }\n        for (auto &c: charCount)\
    \ {\n            if (c.second > maxCount) {\n                max = word;\n   \
    \             maxCount = c.second;\n            }\n        }\n    }\n    return\
    \ max;", "    std::string max;\n    int max_count = 0;\n    for (auto &w : words)\
    \ {\n        auto count = std::count(w.begin(), w.end(), 'a');\n        if (count\
    \ > max_count) {\n            max = w;\n            max_count = count;\n     \
    \   }\n    }\n    return max;", "    std::string max = \"\";\n    int max_count\
    \ = 0;\n    for (auto &word : words) {\n        auto count = std::count_if(word.begin(),\
    \ word.end(), [](char c) {\n            return std::isalpha(c);\n        });\n\
    \        if (count > max_count) {\n            max_count = count;\n          \
    \  max = word;\n        }\n    }\n    return max;", "    std::string max = \"\"\
    ;\n    int max_count = 0;\n    for (auto &word : words) {\n        int count =\
    \ 0;\n        for (auto &c : word) {\n            count += 1;\n        }\n   \
    \     if (count > max_count) {\n            max = word;\n            max_count\
    \ = count;\n        }\n    }\n    return max;", "    // Write your code here\n\
    \    std::string max = \"\";\n    int maxCount = 0;\n    for (auto &i : words)\
    \ {\n        int count = 0;\n        for (auto &j : words) {\n            if (i\
    \ == j) {\n                continue;\n            }\n            count += 1;\n\
    \        }\n        if (count > maxCount) {\n            max = i;\n          \
    \  maxCount = count;\n        }\n    }\n    return max;", "    std::string max\
    \ = \"\";\n    int maxCount = 0;\n    for (auto &word : words) {\n        int\
    \ count = std::count(word.begin(), word.end(), 'a');\n        if (count > maxCount)\
    \ {\n            max = word;\n            maxCount = count;\n        }\n    }\n\
    \    return max;", "    std::string max = \"\";\n    int max_count = 0;\n    for\
    \ (auto &word : words) {\n        auto count = std::count(word.begin(), word.end(),\
    \ 'a');\n        if (count > max_count) {\n            max = word;\n         \
    \   max_count = count;\n        }\n    }\n    return max;", "    // Write your\
    \ code here\n    std::string max = \"\";\n    int maxCount = 0;\n    for (auto\
    \ &word: words) {\n        std::unordered_set<char> chars;\n        for (auto\
    \ &c: word) {\n            chars.insert(c);\n        }\n        if (chars.size()\
    \ > maxCount) {\n            max = word;\n            maxCount = chars.size();\n\
    \        }\n    }\n    return max;", "    // Your code here\n    std::string max\
    \ = \"\";\n    int maxCount = 0;\n    for (auto &word : words) {\n        int\
    \ count = 0;\n        for (auto &c : word) {\n            count += (c == 'a' ||\
    \ c == 'e' || c == 'i' || c == 'o' || c == 'u');\n        }\n        if (count\
    \ > maxCount) {\n            max = word;\n            maxCount = count;\n    \
    \    }\n    }\n    return max;", "    // Write your code here\n    std::string\
    \ max = \"\";\n    int maxCount = 0;\n    for (auto &word : words) {\n       \
    \ int count = 0;\n        for (auto &c : word) {\n            if (std::count(word.begin(),\
    \ word.end(), c) > 0) {\n                count++;\n            }\n        }\n\
    \        if (count > maxCount) {\n            max = word;\n            maxCount\
    \ = count;\n        }\n    }\n    return max;", "    std::string max = \"\";\n\
    \    int maxCount = 0;\n    for (auto word : words) {\n        int count = std::count(word.begin(),\
    \ word.end(), 'a');\n        if (count > maxCount) {\n            max = word;\n\
    \            maxCount = count;\n        }\n    }\n    return max;", "    // Your\
    \ code here\n    std::string max = \"\";\n    int maxCount = 0;\n    for (auto\
    \ &word : words) {\n        int count = 0;\n        for (auto &c : word) {\n \
    \           if (std::count(max.begin(), max.end(), c) > 0) {\n               \
    \ count++;\n            }\n        }\n        if (count > maxCount) {\n      \
    \      max = word;\n            maxCount = count;\n        }\n    }\n    return\
    \ max;", "    // Your code here\n    std::string max = \"\";\n    int maxCount\
    \ = 0;\n    for (auto &word : words) {\n        int count = 0;\n        for (auto\
    \ &c : word) {\n            count += 1;\n        }\n        if (count > maxCount)\
    \ {\n            max = word;\n            maxCount = count;\n        }\n    }\n\
    \    return max;", "    int max_count = 0, max_index = 0;\n    for (size_t i =\
    \ 0; i < words.size(); i++) {\n        int count = 0;\n        for (size_t j =\
    \ 0; j < words[i].size(); j++) {\n            count += words[i][j].size();\n \
    \       }\n        if (count > max_count) {\n            max_count = count;\n\
    \            max_index = i;\n        }\n    }\n    return words[max_index];",
  "    // Write your code here\n    std::string max = \"\";\n    int count = 0;\n\
    \    for (auto &word : words) {\n        count += word.length();\n        if (count\
    \ > word.length()) {\n            max = word;\n            count = word.length();\n\
    \        }\n    }\n    return max;", "    // code here\n    std::string max;\n\
    \    int maxCount = 0;\n    for (auto &word : words) {\n        int count = 0;\n\
    \        for (auto &c : word) {\n            count += (c == 'a' || c == 'e' ||\
    \ c == 'i' || c == 'o' || c == 'u');\n        }\n        if (count > maxCount)\
    \ {\n            max = word;\n            maxCount = count;\n        }\n    }\n\
    \    return max;", "    // Write your code here\n    std::string max = \"\";\n\
    \    int max_count = 0;\n    for (auto &w : words) {\n        std::set<char> s;\n\
    \        for (auto &c : w) {\n            s.insert(c);\n        }\n        if\
    \ (s.size() > max_count) {\n            max_count = s.size();\n            max\
    \ = w;\n        }\n    }\n    return max;", "    // Your code here\n    std::string\
    \ max = \"\";\n    int maxCount = 0;\n    for (auto &word : words) {\n       \
    \ int count = 0;\n        for (auto &c : word) {\n            if (std::count(word.begin(),\
    \ word.end(), c) > 0) {\n                count++;\n            }\n        }\n\
    \        if (count > maxCount) {\n            max = word;\n            maxCount\
    \ = count;\n        }\n    }\n    return max;", "    std::string max = \"\";\n\
    \    int maxCount = 0;\n    for (auto &word : words) {\n        auto count = std::count(word.begin(),\
    \ word.end(), 'a');\n        if (count > maxCount) {\n            max = word;\n\
    \            maxCount = count;\n        }\n    }\n    return max;", "    // Write\
    \ your code here\n    std::string max;\n    int maxCount = 0;\n    for (auto &word\
    \ : words) {\n        int count = 0;\n        for (auto &c : word) {\n       \
    \     count += 1;\n        }\n        if (count > maxCount) {\n            max\
    \ = word;\n            maxCount = count;\n        }\n    }\n    return max;",
  "    int max = 0;\n    std::string maxWord = \"\";\n    for (auto &word : words)\
    \ {\n        int count = 0;\n        for (auto &c : word) {\n            count\
    \ += 1;\n        }\n        if (count > max) {\n            max = count;\n   \
    \         maxWord = word;\n        }\n    }\n    return maxWord;", "    // Write\
    \ your code here\n    std::string max = \"\";\n    int maxCount = 0;\n    for\
    \ (auto &i : words) {\n        int count = 0;\n        for (auto &j : words) {\n\
    \            if (i == j) {\n                continue;\n            }\n       \
    \     count += 1;\n        }\n        if (count > maxCount) {\n            max\
    \ = i;\n            maxCount = count;\n        }\n    }\n    return max;", " \
    \   // Write your code here\n    std::string max = \"\";\n    int maxCount = 0;\n\
    \    for(auto &word: words){\n        int count = 0;\n        for(auto &c: word){\n\
    \            if(c == max){\n                count++;\n            }\n        }\n\
    \        if(count > maxCount){\n            max = word;\n            maxCount\
    \ = count;\n        }\n    }\n    return max;", "    // code here\n    std::string\
    \ max;\n    int maxCount = 0;\n    for (auto &word : words) {\n        int count\
    \ = 0;\n        for (auto &c : word) {\n            if (std::count(word.begin(),\
    \ word.end(), c) > 0) {\n                count++;\n            }\n        }\n\
    \        if (count > maxCount) {\n            max = word;\n            maxCount\
    \ = count;\n        }\n    }\n    return max;", "    // Your code here\n    std::string\
    \ max;\n    int maxCount = 0;\n    for (auto &word : words) {\n        int count\
    \ = 0;\n        for (auto &c : word) {\n            count += 1;\n        }\n \
    \       if (count > maxCount) {\n            max = word;\n            maxCount\
    \ = count;\n        }\n    }\n    return max;", "    // Your code here\n    std::string\
    \ max = \"\";\n    int maxCount = 0;\n    for (auto word : words) {\n        auto\
    \ count = std::count(word.begin(), word.end(), 'a');\n        if (count > maxCount)\
    \ {\n            max = word;\n            maxCount = count;\n        }\n    }\n\
    \    return max;", "    std::string max = \"\";\n    int max_count = 0;\n    for\
    \ (auto &word : words) {\n        int count = 0;\n        for (auto &c : word)\
    \ {\n            if (std::count(max.begin(), max.end(), c) > 0) {\n          \
    \      count++;\n            }\n        }\n        if (count > max_count) {\n\
    \            max = word;\n            max_count = count;\n        }\n    }\n \
    \   return max;", "    std::string max;\n    int maxCount = 0;\n    for (auto\
    \ &word : words) {\n        std::set<char> chars;\n        for (char c : word)\
    \ {\n            chars.insert(c);\n        }\n        if (chars.size() > maxCount)\
    \ {\n            max = word;\n            maxCount = chars.size();\n        }\n\
    \    }\n    return max;", "    // Write your code here\n    std::string max =\
    \ \"\";\n    int maxCount = 0;\n    for (auto &word : words) {\n        int count\
    \ = 0;\n        for (auto &c : word) {\n            if (std::count(max.begin(),\
    \ max.end(), c) > 0) {\n                count++;\n            }\n        }\n \
    \       if (count > maxCount) {\n            max = word;\n            maxCount\
    \ = count;\n        }\n    }\n    return max;", "    std::string max = \"\";\n\
    \    int max_count = 0;\n    for (auto &word : words) {\n        int count = 0;\n\
    \        for (auto &c : word) {\n            count += 1;\n        }\n        if\
    \ (count > max_count) {\n            max = word;\n            max_count = count;\n\
    \        }\n    }\n    return max;", "    int max_count = 0, max_index = 0;\n\
    \    for (size_t i = 0; i < words.size(); i++) {\n        int count = 0;\n   \
    \     for (size_t j = 0; j < words[i].size(); j++) {\n            count += words[i][j].size();\n\
    \        }\n        if (count > max_count) {\n            max_count = count;\n\
    \            max_index = i;\n        }\n    }\n    return words[max_index];",
  "    int max_count = 0;\n    std::string max_word = \"\";\n    for (auto &word :\
    \ words) {\n        int count = 0;\n        for (auto &c : word) {\n         \
    \   count += 1;\n        }\n        if (count > max_count) {\n            max_count\
    \ = count;\n            max_word = word;\n        }\n    }\n    return max_word;",
  "    // Your code here\n    std::string max = \"\";\n    int maxCount = 0;\n   \
    \ for (auto &word : words) {\n        int count = 0;\n        for (auto &c : word)\
    \ {\n            if (std::count(word.begin(), word.end(), c) > 0) {\n        \
    \        count++;\n            }\n        }\n        if (count > maxCount) {\n\
    \            max = word;\n            maxCount = count;\n        }\n    }\n  \
    \  return max;", "    std::string max;\n    int max_count = 0;\n    for (auto\
    \ &word : words) {\n        int count = 0;\n        for (auto &c : word) {\n \
    \           count += 1;\n        }\n        if (count > max_count) {\n       \
    \     max = word;\n            max_count = count;\n        }\n    }\n    return\
    \ max;", "    // Your code here\n    std::string max;\n    std::string temp;\n\
    \    int count = 0;\n    for (auto &i : words) {\n        temp = i;\n        std::sort(temp.begin(),\
    \ temp.end());\n        std::unique_copy(temp.begin(), temp.end(), std::back_inserter(max));\n\
    \        count += 1;\n    }\n    if (count > 1) {\n        return max;\n    }\n\
    \    return \"\";", "    // Your code here\n    std::string max = \"\";\n    int\
    \ maxCount = 0;\n    for (auto &word : words) {\n        int count = 0;\n    \
    \    for (auto &c : word) {\n            count += (c == 'a' || c == 'e' || c ==\
    \ 'i' || c == 'o' || c == 'u');\n        }\n        if (count > maxCount) {\n\
    \            max = word;\n            maxCount = count;\n        }\n    }\n  \
    \  return max;", "    int n = words.size();\n    int max_count = 0;\n    std::string\
    \ max_word = \"\";\n    for (int i = 0; i < n; i++) {\n        int count = 0;\n\
    \        for (int j = 0; j < n; j++) {\n            if (words[i] == words[j])\
    \ {\n                count++;\n            }\n        }\n        if (count > max_count)\
    \ {\n            max_count = count;\n            max_word = words[i];\n      \
    \  }\n    }\n    return max_word;", "    std::string max = \"\";\n    int maxCount\
    \ = 0;\n    for (auto &word : words) {\n        int count = 0;\n        for (auto\
    \ &c : word) {\n            count += 1;\n        }\n        if (count > maxCount)\
    \ {\n            max = word;\n            maxCount = count;\n        }\n    }\n\
    \    return max;", "    // code here\n    std::string max;\n    std::string max2;\n\
    \    int maxCount = 0;\n    for (auto &word : words) {\n        int count = 0;\n\
    \        for (auto &c : word) {\n            if (std::count(word.begin(), word.end(),\
    \ c) > 0) {\n                count++;\n            }\n        }\n        if (count\
    \ > maxCount) {\n            maxCount = count;\n            max = word;\n    \
    \    }\n        if (count > maxCount) {\n            max2 = word;\n        }\n\
    \    }\n    if (maxCount == 0) {\n        return \"\";\n    }\n    if (maxCount\
    \ == 1) {\n        return max2;\n    }\n    return max;", "    // Write your code\
    \ here\n    std::string max = \"\";\n    int maxCount = 0;\n    for (auto &word\
    \ : words) {\n        int count = 0;\n        for (auto &c : word) {\n       \
    \     count += 1;\n        }\n        if (count > maxCount) {\n            max\
    \ = word;\n            maxCount = count;\n        }\n    }\n    return max;",
  "    std::string max = \"\";\n    int max_count = 0;\n    for (auto &w : words)\
    \ {\n        auto count = std::count(w.begin(), w.end(), 'a');\n        if (count\
    \ > max_count) {\n            max = w;\n            max_count = count;\n     \
    \   }\n    }\n    return max;", "    std::string max = \"\";\n    int max_count\
    \ = 0;\n    for (auto &w : words) {\n        auto count = std::count(w.begin(),\
    \ w.end(), 'a');\n        if (count > max_count) {\n            max_count = count;\n\
    \            max = w;\n        }\n    }\n    return max;", "    std::string max;\n\
    \    int max_count = 0;\n    for (auto &word : words) {\n        int count = 0;\n\
    \        for (auto &c : word) {\n            count += 1;\n        }\n        if\
    \ (count > max_count) {\n            max_count = count;\n            max = word;\n\
    \        }\n    }\n    return max;", "    std::string max = \"\";\n    int max_count\
    \ = 0;\n    for (auto &word : words) {\n        auto count = std::count(word.begin(),\
    \ word.end(), 'a');\n        if (count > max_count) {\n            max_count =\
    \ count;\n            max = word;\n        }\n    }\n    return max;", "    std::string\
    \ max;\n    int maxCount = 0;\n    for (auto word : words) {\n        int count\
    \ = std::count(word.begin(), word.end(), 'a');\n        if (count > maxCount)\
    \ {\n            max = word;\n            maxCount = count;\n        }\n    }\n\
    \    return max;", "    // Your code here\n    std::string max;\n    int maxCount\
    \ = 0;\n    for (auto &word : words) {\n        int count = 0;\n        for (auto\
    \ &c : word) {\n            count += 1;\n        }\n        if (count > maxCount)\
    \ {\n            max = word;\n            maxCount = count;\n        }\n    }\n\
    \    return max;", "    // Write your code here\n    std::string max;\n    int\
    \ maxCount = 0;\n    for (auto &word : words) {\n        int count = 0;\n    \
    \    for (auto &c : word) {\n            count += 1;\n        }\n        if (count\
    \ > maxCount) {\n            max = word;\n            maxCount = count;\n    \
    \    }\n    }\n    return max;", "    std::string max;\n    int max_count = 0;\n\
    \    for (auto &word : words) {\n        int count = 0;\n        for (auto &c\
    \ : word) {\n            count += 1;\n        }\n        if (count > max_count)\
    \ {\n            max = word;\n            max_count = count;\n        }\n    }\n\
    \    return max;", "    std::string max = \"\";\n    int maxCount = 0;\n    for\
    \ (auto word : words) {\n        auto count = std::count(word.begin(), word.end(),\
    \ 'a');\n        if (count > maxCount) {\n            max = word;\n          \
    \  maxCount = count;\n        }\n    }\n    return max;", "    int max_count =\
    \ 0;\n    std::string max_word = \"\";\n    for (auto &word : words) {\n     \
    \   int count = 0;\n        for (auto &c : word) {\n            if (std::count(word.begin(),\
    \ word.end(), c) > 0) {\n                count++;\n            }\n        }\n\
    \        if (count > max_count) {\n            max_count = count;\n          \
    \  max_word = word;\n        }\n    }\n    return max_word;", "    // Write your\
    \ code here\n    std::string maxWord = \"\";\n    int maxCount = 0;\n    for (auto\
    \ &word : words) {\n        int count = 0;\n        for (auto &c : word) {\n \
    \           count += 1;\n        }\n        if (count > maxCount) {\n        \
    \    maxCount = count;\n            maxWord = word;\n        }\n    }\n    return\
    \ maxWord;", "    int max_count = 0, max_index = -1;\n    for (size_t i = 0; i\
    \ < words.size(); i++) {\n        int count = 0;\n        for (size_t j = 0; j\
    \ < words[i].size(); j++) {\n            count += words[i][j].size();\n      \
    \  }\n        if (count > max_count) {\n            max_count = count;\n     \
    \       max_index = i;\n        }\n    }\n    return words[max_index];", "   \
    \ std::string max;\n    int max_count = 0;\n    for (auto &word : words) {\n \
    \       std::unordered_set<char> unique_chars;\n        for (auto &c : word) {\n\
    \            unique_chars.insert(c);\n        }\n        if (unique_chars.size()\
    \ > max_count) {\n            max = word;\n            max_count = unique_chars.size();\n\
    \        }\n    }\n    return max;", "    int max_count = 0;\n    std::string\
    \ max_word = \"\";\n    for (auto &word : words) {\n        int count = 0;\n \
    \       for (auto &c : word) {\n            count += 1;\n        }\n        if\
    \ (count > max_count) {\n            max_count = count;\n            max_word\
    \ = word;\n        }\n    }\n    return max_word;", "    // Write your code here\n\
    \    std::string max;\n    int maxCount = 0;\n    for (auto word : words) {\n\
    \        int count = 0;\n        for (auto c : word) {\n            count += (c\
    \ == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u');\n        }\n      \
    \  if (count > maxCount) {\n            max = word;\n            maxCount = count;\n\
    \        }\n    }\n    return max;", "    std::string max;\n    int max_count\
    \ = 0;\n    for (auto &word : words) {\n        int count = 0;\n        for (auto\
    \ &c : word) {\n            count += 1;\n        }\n        if (count > max_count)\
    \ {\n            max = word;\n            max_count = count;\n        }\n    }\n\
    \    return max;", "    int max_count = 0;\n    std::string max_word = \"\";\n\
    \    for (auto &word : words) {\n        int count = 0;\n        for (auto &c\
    \ : word) {\n            count += (c == 'a' || c == 'e' || c == 'i' || c == 'o'\
    \ || c == 'u');\n        }\n        if (count > max_count) {\n            max_count\
    \ = count;\n            max_word = word;\n        }\n    }\n    return max_word;",
  "    int n = words.size();\n    int max_count = 0, max_index = -1;\n    for (int\
    \ i = 0; i < n; ++i) {\n        int count = 0;\n        for (int j = 0; j < n;\
    \ ++j) {\n            if (i != j && words[j].size() > words[i].size()) {\n   \
    \             count += 1;\n            }\n        }\n        if (count > max_count)\
    \ {\n            max_count = count;\n            max_index = i;\n        }\n \
    \   }\n    if (max_count == 0) {\n        return \"\";\n    }\n    return words[max_index];",
  "    // Write your code here\n    std::string max;\n    int maxCount = 0;\n    for\
    \ (auto &word: words) {\n        std::unordered_map<char, int> charCount;\n  \
    \      for (char c: word) {\n            charCount[c]++;\n        }\n        int\
    \ count = charCount.size();\n        if (count > maxCount) {\n            max\
    \ = word;\n            maxCount = count;\n        }\n    }\n    return max;",
  "    // code here\n    std::string max = \"\";\n    int maxCount = 0;\n    for (auto\
    \ &word : words) {\n        int count = 0;\n        for (auto &c : word) {\n \
    \           if (std::count(word.begin(), word.end(), c) > 0) {\n             \
    \   count++;\n            }\n        }\n        if (count > maxCount) {\n    \
    \        max = word;\n            maxCount = count;\n        }\n    }\n    return\
    \ max;", "    std::string max = \"\";\n    int max_count = 0;\n    for (auto &w\
    \ : words) {\n        auto count = std::count(w.begin(), w.end(), 'a');\n    \
    \    if (count > max_count) {\n            max_count = count;\n            max\
    \ = w;\n        }\n    }\n    return max;", "    // Write your code here\n   \
    \ std::string max;\n    int maxCount = 0;\n    for(auto &word: words){\n     \
    \   int count = 0;\n        for(auto &c: word){\n            if(c == 'a'){\n \
    \               count++;\n            }\n        }\n        if(count > maxCount){\n\
    \            max = word;\n            maxCount = count;\n        }\n    }\n  \
    \  return max;", "    // Your code here\n    std::string max = \"\";\n    int\
    \ maxCount = 0;\n    for (auto &word : words) {\n        int count = 0;\n    \
    \    for (auto &c : word) {\n            count += 1;\n        }\n        if (count\
    \ > maxCount) {\n            max = word;\n            maxCount = count;\n    \
    \    }\n    }\n    return max;", "    // Write your code here\n    std::string\
    \ max = \"\";\n    int maxCount = 0;\n    for (auto &word : words) {\n       \
    \ int count = 0;\n        for (auto &c : word) {\n            count += 1;\n  \
    \      }\n        if (count > maxCount) {\n            max = word;\n         \
    \   maxCount = count;\n        }\n    }\n    return max;", "    // Your code here\n\
    \    std::string max;\n    int maxCount = 0;\n    for (auto word : words) {\n\
    \        int count = 0;\n        for (auto c : word) {\n            count += 1;\n\
    \        }\n        if (count > maxCount) {\n            max = word;\n       \
    \     maxCount = count;\n        }\n    }\n    return max;", "    // Your code\
    \ here\n    std::string max;\n    int maxCount = 0;\n    for (auto &word : words)\
    \ {\n        int count = 0;\n        for (auto &c : word) {\n            count\
    \ += 1;\n        }\n        if (count > maxCount) {\n            max = word;\n\
    \            maxCount = count;\n        }\n    }\n    return max;", "    int max_count\
    \ = 0, max_index = 0;\n    for (size_t i = 0; i < words.size(); i++) {\n     \
    \   int count = 0;\n        for (size_t j = 0; j < words[i].size(); j++) {\n \
    \           if (words[i][j] == words[i][max_index]) {\n                count++;\n\
    \            }\n        }\n        if (count > max_count) {\n            max_count\
    \ = count;\n            max_index = i;\n        }\n    }\n    return words[max_index];",
  "    // Your code here\n    std::string max = \"\";\n    int maxCount = 0;\n   \
    \ for (auto &word : words) {\n        auto count = std::count_if(word.begin(),\
    \ word.end(), [&](char c) {\n            return std::tolower(c) == std::tolower(max);\n\
    \        });\n        if (count > maxCount) {\n            max = word;\n     \
    \       maxCount = count;\n        }\n    }\n    return max;", "    // Your code\
    \ here\n    std::string max = \"\";\n    int maxCount = 0;\n    for (auto &word\
    \ : words) {\n        int count = 0;\n        for (auto &c : word) {\n       \
    \     count += 1;\n        }\n        if (count > maxCount) {\n            max\
    \ = word;\n            maxCount = count;\n        }\n    }\n    return max;",
  "    // Your code here\n    std::string max = \"\";\n    int maxCount = 0;\n   \
    \ for (auto &word : words) {\n        int count = 0;\n        for (auto &c : word)\
    \ {\n            count += 1;\n        }\n        if (count > maxCount) {\n   \
    \         max = word;\n            maxCount = count;\n        }\n    }\n    return\
    \ max;", "    // Write your code here\n    std::string maxWord = \"\";\n    int\
    \ maxCount = 0;\n    for(auto &word : words) {\n        std::sort(word.begin(),\
    \ word.end());\n        std::set<char> chars;\n        for(auto &c : word) {\n\
    \            chars.insert(c);\n        }\n        auto count = chars.size();\n\
    \        if(count > maxCount) {\n            maxCount = count;\n            maxWord\
    \ = word;\n        }\n    }\n    return maxWord;", "    // Write your code here\n\
    \    std::string max = \"\";\n    int maxCount = 0;\n    for (auto &word : words)\
    \ {\n        int count = 0;\n        for (auto &c : word) {\n            count\
    \ += 1;\n        }\n        if (count > maxCount) {\n            max = word;\n\
    \            maxCount = count;\n        }\n    }\n    return max;", "    // Your\
    \ code here\n    std::string max;\n    int maxCount = 0;\n    for (auto &word\
    \ : words) {\n        int count = 0;\n        for (auto &c : word) {\n       \
    \     if (std::count(word.begin(), word.end(), c) > 0) {\n                count++;\n\
    \            }\n        }\n        if (count > maxCount) {\n            max =\
    \ word;\n            maxCount = count;\n        }\n    }\n    return max;", " \
    \   // Write your code here\n    std::string max;\n    int maxCount = 0;\n   \
    \ for(auto &word: words){\n        int count = 0;\n        for(auto &c: word){\n\
    \            if(c == 'a'){\n                count++;\n            }\n        }\n\
    \        if(count > maxCount){\n            max = word;\n            maxCount\
    \ = count;\n        }\n    }\n    return max;", "    // Your code here\n    std::string\
    \ max = \"\";\n    int maxCount = 0;\n    for (auto &word : words) {\n       \
    \ auto count = std::count(word.begin(), word.end(), 'a');\n        if (count >\
    \ maxCount) {\n            max = word;\n            maxCount = count;\n      \
    \  }\n    }\n    return max;", "    std::string max;\n    int max_count = 0;\n\
    \    for (auto &word : words) {\n        int count = 0;\n        for (auto &c\
    \ : word) {\n            count += 1;\n        }\n        if (count > max_count)\
    \ {\n            max = word;\n            max_count = count;\n        }\n    }\n\
    \    return max;", "    // Your code here\n    std::string max = \"\";\n    int\
    \ maxCount = 0;\n    for (auto &word : words) {\n        int count = 0;\n    \
    \    for (auto &c : word) {\n            if (std::count(max.begin(), max.end(),\
    \ c) > 0) {\n                count++;\n            }\n        }\n        if (count\
    \ > maxCount) {\n            max = word;\n            maxCount = count;\n    \
    \    }\n    }\n    return max;", "    // Write your code here\n    std::string\
    \ maxWord = \"\";\n    int maxCount = 0;\n    for (auto &word : words) {\n   \
    \     int count = 0;\n        for (auto &c : word) {\n            count += 1;\n\
    \        }\n        if (count > maxCount) {\n            maxCount = count;\n \
    \           maxWord = word;\n        }\n    }\n    return maxWord;", "    // Write\
    \ your code here\n    std::string max = \"\";\n    int maxCount = 0;\n    for\
    \ (auto &word : words) {\n        int count = 0;\n        for (auto &c : word)\
    \ {\n            count += 1;\n        }\n        if (count > maxCount) {\n   \
    \         max = word;\n            maxCount = count;\n        }\n    }\n    return\
    \ max;", "    // Write your code here\n    std::string max;\n    int maxCount\
    \ = 0;\n    for (auto &word : words) {\n        int count = 0;\n        for (auto\
    \ &c : word) {\n            if (std::count(word.begin(), word.end(), c) > 0) {\n\
    \                count++;\n            }\n        }\n        if (count > maxCount)\
    \ {\n            max = word;\n            maxCount = count;\n        }\n    }\n\
    \    return max;", "    // code here\n    std::string max;\n    int maxCount =\
    \ 0;\n    for (auto &word : words) {\n        int count = 0;\n        for (auto\
    \ &c : word) {\n            count += 1;\n        }\n        if (count > maxCount)\
    \ {\n            max = word;\n            maxCount = count;\n        }\n    }\n\
    \    return max;", "    int n = words.size();\n    int max_count = 0;\n    std::string\
    \ max_word = \"\";\n    for (int i = 0; i < n; i++) {\n        int count = 0;\n\
    \        for (int j = 0; j < n; j++) {\n            if (words[j] == words[i])\
    \ {\n                count++;\n            }\n        }\n        if (count > max_count)\
    \ {\n            max_count = count;\n            max_word = words[i];\n      \
    \  }\n    }\n    return max_word;", "    // Write your code here\n    std::string\
    \ max = \"\";\n    int maxCount = 0;\n    for (auto word : words) {\n        auto\
    \ count = std::count(word.begin(), word.end(), 'a');\n        if (count > maxCount)\
    \ {\n            max = word;\n            maxCount = count;\n        }\n    }\n\
    \    return max;", "    std::string max = \"\";\n    int maxCount = 0;\n    for\
    \ (auto word : words) {\n        int count = 0;\n        for (auto c : word) {\n\
    \            count += (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u');\n\
    \        }\n        if (count > maxCount) {\n            max = word;\n       \
    \     maxCount = count;\n        }\n    }\n    return max;", "    std::string\
    \ max;\n    int maxCount = 0;\n    for (auto &word : words) {\n        int count\
    \ = 0;\n        for (auto &c : word) {\n            count += 1;\n        }\n \
    \       if (count > maxCount) {\n            max = word;\n            maxCount\
    \ = count;\n        }\n    }\n    return max;", "    std::string max = \"\";\n\
    \    int max_count = 0;\n    for (auto &word : words) {\n        auto count =\
    \ std::count(word.begin(), word.end(), 'a');\n        if (count > max_count) {\n\
    \            max_count = count;\n            max = word;\n        }\n    }\n \
    \   return max;", "    std::string max = \"\";\n    int max_count = 0;\n    for\
    \ (auto &word : words) {\n        auto count = std::count(word.begin(), word.end(),\
    \ 'a');\n        if (count > max_count) {\n            max = word;\n         \
    \   max_count = count;\n        }\n    }\n    return max;", "    // Your code\
    \ here\n    std::string max = \"\";\n    int maxCount = 0;\n    for (auto &w :\
    \ words) {\n        int count = 0;\n        for (auto &c : w) {\n            count\
    \ += 1;\n        }\n        if (count > maxCount) {\n            max = w;\n  \
    \          maxCount = count;\n        }\n    }\n    return max;", "    int max\
    \ = 0;\n    std::string maxWord = \"\";\n    for (auto &word : words) {\n    \
    \    auto count = std::count(word.begin(), word.end(), 'a');\n        if (count\
    \ > max) {\n            max = count;\n            maxWord = word;\n        }\n\
    \    }\n    return maxWord;", "    // Write your code here\n    std::string max;\n\
    \    int maxCount = 0;\n    for(auto &word: words) {\n        int count = 0;\n\
    \        for(auto &c: word) {\n            count += 1;\n        }\n        if(count\
    \ > maxCount) {\n            max = word;\n            maxCount = count;\n    \
    \    }\n    }\n    return max;", "    std::string max = \"\";\n    int maxCount\
    \ = 0;\n    for (auto &word : words) {\n        int count = std::count(word.begin(),\
    \ word.end(), 'a');\n        if (count > maxCount) {\n            max = word;\n\
    \            maxCount = count;\n        }\n    }\n    return max;", "    // Write\
    \ your code here\n    std::string max = \"\";\n    int maxCount = 0;\n    for\
    \ (auto &word : words) {\n        int count = 0;\n        for (auto &c : word)\
    \ {\n            count += 1;\n        }\n        if (count > maxCount) {\n   \
    \         max = word;\n            maxCount = count;\n        }\n    }\n    return\
    \ max;", "    // Your code here\n    std::string max = \"\";\n    int maxCount\
    \ = 0;\n    for (auto &word : words) {\n        int count = 0;\n        for (auto\
    \ &c : word) {\n            count += 1;\n        }\n        if (count > maxCount)\
    \ {\n            max = word;\n            maxCount = count;\n        }\n    }\n\
    \    return max;", "    // Your code here\n    std::string max = \"\";\n    int\
    \ maxCount = 0;\n    for (auto &word : words) {\n        int count = 0;\n    \
    \    for (auto &c : word) {\n            count += 1;\n        }\n        if (count\
    \ > maxCount) {\n            max = word;\n            maxCount = count;\n    \
    \    }\n    }\n    return max;", "    std::string max = \"\";\n    int maxCount\
    \ = 0;\n    for (auto &word : words) {\n        int count = 0;\n        for (auto\
    \ &c : word) {\n            count += (c == 'a' || c == 'e' || c == 'i' || c ==\
    \ 'o' || c == 'u');\n        }\n        if (count > maxCount) {\n            max\
    \ = word;\n            maxCount = count;\n        }\n    }\n    return max;",
  "    // Your code here\n    std::string max = \"\";\n    int maxCount = 0;\n   \
    \ for (auto &word : words) {\n        int count = 0;\n        for (auto &c : word)\
    \ {\n            if (std::count(word.begin(), word.end(), c) > 0) {\n        \
    \        count++;\n            }\n        }\n        if (count > maxCount) {\n\
    \            max = word;\n            maxCount = count;\n        }\n    }\n  \
    \  return max;", "    std::string max = \"\";\n    int max_count = 0;\n    for\
    \ (auto &word : words) {\n        int count = 0;\n        for (auto &c : word)\
    \ {\n            if (std::count(max.begin(), max.end(), c) > 0) {\n          \
    \      count++;\n            }\n        }\n        if (count > max_count) {\n\
    \            max = word;\n            max_count = count;\n        }\n    }\n \
    \   return max;", "    // Your code here\n    std::string max = \"\";\n    int\
    \ maxCount = 0;\n    for (auto &w : words) {\n        int count = 0;\n       \
    \ for (auto &c : w) {\n            count += 1;\n        }\n        if (count >\
    \ maxCount) {\n            max = w;\n            maxCount = count;\n        }\n\
    \    }\n    return max;", "    std::string max = \"\";\n    int max_count = 0;\n\
    \    for (auto &w : words) {\n        auto count = std::count(w.begin(), w.end(),\
    \ 'a');\n        if (count > max_count) {\n            max = w;\n            max_count\
    \ = count;\n        }\n    }\n    return max;", "    // Write your code here\n\
    \    std::string max = \"\";\n    int maxCount = 0;\n    for (auto &word : words)\
    \ {\n        auto count = std::count(word.begin(), word.end(), 'a');\n       \
    \ if (count > maxCount) {\n            max = word;\n            maxCount = count;\n\
    \        }\n    }\n    return max;", "    // Your code here\n    std::string max;\n\
    \    int maxCount = 0;\n    for (auto &w : words) {\n        int count = 0;\n\
    \        for (auto &c : w) {\n            if (std::count(w.begin(), w.end(), c)\
    \ > 0) {\n                count++;\n            }\n        }\n        if (count\
    \ > maxCount) {\n            max = w;\n            maxCount = count;\n       \
    \ }\n    }\n    return max;", "    std::string max = \"\";\n    int max_count\
    \ = 0;\n    for (auto &word : words) {\n        int count = 0;\n        for (auto\
    \ &c : word) {\n            if (std::count(max.begin(), max.end(), c) > 0) {\n\
    \                count++;\n            }\n        }\n        if (count > max_count)\
    \ {\n            max_count = count;\n            max = word;\n        }\n    }\n\
    \    return max;", "    // Write your code here\n    std::string maxWord = \"\"\
    ;\n    int maxCount = 0;\n    for (auto &word : words) {\n        int count =\
    \ 0;\n        for (auto &c : word) {\n            count += 1;\n        }\n   \
    \     if (count > maxCount) {\n            maxCount = count;\n            maxWord\
    \ = word;\n        }\n    }\n    return maxWord;", "    // Write your code here\n\
    \    std::string max = \"\";\n    int maxCount = 0;\n    for (auto &word : words)\
    \ {\n        int count = 0;\n        for (auto &c : word) {\n            if (std::count(word.begin(),\
    \ word.end(), c) > 0) {\n                count++;\n            }\n        }\n\
    \        if (count > maxCount) {\n            max = word;\n            maxCount\
    \ = count;\n        }\n    }\n    return max;", "    // Write your code here\n\
    \    std::string max = \"\";\n    int maxCount = 0;\n    for (auto &word : words)\
    \ {\n        int count = 0;\n        for (auto &c : word) {\n            if (std::count(max.begin(),\
    \ max.end(), c) > 0) {\n                count++;\n            }\n        }\n \
    \       if (count > maxCount) {\n            max = word;\n            maxCount\
    \ = count;\n        }\n    }\n    return max;", "    // Your code here\n    std::string\
    \ max = \"\";\n    int max_count = 0;\n    for (auto &word : words) {\n      \
    \  int count = 0;\n        for (auto &c : word) {\n            count += 1;\n \
    \       }\n        if (count > max_count) {\n            max_count = count;\n\
    \            max = word;\n        }\n    }\n    return max;", "    int max = 0;\n\
    \    std::string maxWord = \"\";\n    for (auto &word : words) {\n        int\
    \ uniqueChar = std::count(word.begin(), word.end(), 'a');\n        if (uniqueChar\
    \ > max) {\n            max = uniqueChar;\n            maxWord = word;\n     \
    \   }\n    }\n    return maxWord;", "    std::string max = \"\";\n    int max_count\
    \ = 0;\n    for (auto &w : words) {\n        int count = 0;\n        for (auto\
    \ &c : w) {\n            count += (c == 'a' || c == 'e' || c == 'i' || c == 'o'\
    \ || c == 'u');\n        }\n        if (count > max_count) {\n            max\
    \ = w;\n            max_count = count;\n        }\n    }\n    return max;", " \
    \   std::string max;\n    int max_count = 0;\n    for (auto &word : words) {\n\
    \        int count = 0;\n        for (auto &c : word) {\n            count +=\
    \ 1;\n        }\n        if (count > max_count) {\n            max = word;\n \
    \           max_count = count;\n        }\n    }\n    return max;", "    // Your\
    \ code here\n    std::string max;\n    int maxCount = 0;\n    for (auto &word\
    \ : words) {\n        int count = 0;\n        for (auto &c : word) {\n       \
    \     if (std::count(word.begin(), word.end(), c) > 0) {\n                count++;\n\
    \            }\n        }\n        if (count > maxCount) {\n            max =\
    \ word;\n            maxCount = count;\n        }\n    }\n    return max;", " \
    \   // Write your code here\n    std::string max;\n    int maxCount = 0;\n   \
    \ for (auto word : words) {\n        auto count = std::count(word.begin(), word.end(),\
    \ 'a');\n        if (count > maxCount) {\n            max = word;\n          \
    \  maxCount = count;\n        }\n    }\n    return max;", "    std::string max\
    \ = \"\";\n    int max_count = 0;\n    for (auto &word : words) {\n        int\
    \ count = 0;\n        for (auto &c : word) {\n            count += 1;\n      \
    \  }\n        if (count > max_count) {\n            max = word;\n            max_count\
    \ = count;\n        }\n    }\n    return max;", "    // Write your code here\n\
    \    std::string maxWord = \"\";\n    int maxCount = 0;\n    for (auto word :\
    \ words) {\n        int count = 0;\n        for (auto c : word) {\n          \
    \  count += (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u');\n    \
    \    }\n        if (count > maxCount) {\n            maxCount = count;\n     \
    \       maxWord = word;\n        }\n    }\n    return maxWord;", "    std::string\
    \ maxWord = \"\";\n    int maxCount = 0;\n    for (auto &word : words) {\n   \
    \     int count = 0;\n        for (auto &c : word) {\n            count += (c\
    \ == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u');\n        }\n      \
    \  if (count > maxCount) {\n            maxCount = count;\n            maxWord\
    \ = word;\n        }\n    }\n    return maxWord;", "    // Your code here\n  \
    \  std::string maxWord = \"\";\n    int maxCount = 0;\n    for (auto word : words)\
    \ {\n        int count = 0;\n        for (auto c : word) {\n            if (std::count(word.begin(),\
    \ word.end(), c) > 0) {\n                count++;\n            }\n        }\n\
    \        if (count > maxCount) {\n            maxCount = count;\n            maxWord\
    \ = word;\n        }\n    }\n    return maxWord;", "    std::string max = \"\"\
    ;\n    int max_count = 0;\n    for (auto &w : words) {\n        int count = 0;\n\
    \        for (auto &c : w) {\n            if (std::count(w.begin(), w.end(), c)\
    \ > count) {\n                count = std::count(w.begin(), w.end(), c);\n   \
    \         }\n        }\n        if (count > max_count) {\n            max_count\
    \ = count;\n            max = w;\n        }\n    }\n    return max;", "    //\
    \ Write your code here\n    std::string max = \"\";\n    int maxCount = 0;\n \
    \   for (auto word : words) {\n        int count = 0;\n        for (auto c : word)\
    \ {\n            count += 1;\n        }\n        if (count > maxCount) {\n   \
    \         max = word;\n            maxCount = count;\n        }\n    }\n    return\
    \ max;", "    // Your code here\n    std::string max = \"\";\n    int maxCount\
    \ = 0;\n    for (auto &word : words) {\n        int count = 0;\n        for (auto\
    \ &c : word) {\n            count += 1;\n        }\n        if (count > maxCount)\
    \ {\n            max = word;\n            maxCount = count;\n        }\n    }\n\
    \    return max;", "    // Your code here\n    std::string maxWord = \"\";\n \
    \   int maxCount = 0;\n    for (auto word : words) {\n        int count = 0;\n\
    \        for (auto c : word) {\n            if (std::count(word.begin(), word.end(),\
    \ c) > 0) {\n                count++;\n            }\n        }\n        if (count\
    \ > maxCount) {\n            maxCount = count;\n            maxWord = word;\n\
    \        }\n    }\n    return maxWord;", "    // Your code here\n    std::string\
    \ max = \"\";\n    int maxCount = 0;\n    for (auto &word : words) {\n       \
    \ int count = 0;\n        for (auto &c : word) {\n            count += 1;\n  \
    \      }\n        if (count > maxCount) {\n            max = word;\n         \
    \   maxCount = count;\n        }\n    }\n    return max;", "    // Your code here\n\
    \    std::string max = \"\";\n    int maxCount = 0;\n    for (auto word : words)\
    \ {\n        auto count = std::count(word.begin(), word.end(), 'a');\n       \
    \ if (count > maxCount) {\n            max = word;\n            maxCount = count;\n\
    \        }\n    }\n    return max;", "    // Your code here\n    std::string max\
    \ = \"\";\n    int maxCount = 0;\n    for (auto word : words) {\n        auto\
    \ count = std::count_if(words.begin(), words.end(), [&](std::string s) {\n   \
    \         return s.find(word) != std::string::npos;\n        });\n        if (count\
    \ > maxCount) {\n            max = word;\n            maxCount = count;\n    \
    \    }\n    }\n    return max;", "    std::string max = \"\";\n    int max_count\
    \ = 0;\n    for (auto &word : words) {\n        auto count = std::count(word.begin(),\
    \ word.end(), 'a');\n        if (count > max_count) {\n            max = word;\n\
    \            max_count = count;\n        }\n    }\n    return max;", "    std::string\
    \ max = \"\";\n    int maxCount = 0;\n    for (auto word : words) {\n        int\
    \ count = 0;\n        for (auto c : word) {\n            if (std::count(max.begin(),\
    \ max.end(), c) > 0) {\n                count++;\n            }\n        }\n \
    \       if (count > maxCount) {\n            max = word;\n            maxCount\
    \ = count;\n        }\n    }\n    return max;", "    // Your code here\n    std::string\
    \ maxWord = \"\";\n    int maxCount = 0;\n    for (auto &word : words) {\n   \
    \     int count = 0;\n        for (auto &c : word) {\n            count += 1;\n\
    \        }\n        if (count > maxCount) {\n            maxCount = count;\n \
    \           maxWord = word;\n        }\n    }\n    return maxWord;", "    int\
    \ max_count = 0;\n    std::string max_word = \"\";\n    for (auto &word : words)\
    \ {\n        int count = std::count(word.begin(), word.end(), 'a');\n        if\
    \ (count > max_count) {\n            max_count = count;\n            max_word\
    \ = word;\n        }\n    }\n    return max_word;", "    // Write your code here\n\
    \    std::string max = \"\";\n    int max_count = 0;\n    for (auto &i : words)\
    \ {\n        int count = 0;\n        for (auto &j : words) {\n            if (i\
    \ == j) {\n                continue;\n            }\n            count += 1;\n\
    \        }\n        if (count > max_count) {\n            max = i;\n         \
    \   max_count = count;\n        }\n    }\n    return max;", "    // Your code\
    \ here\n    std::string max = \"\";\n    int maxCount = 0;\n    for (auto &word\
    \ : words) {\n        int count = 0;\n        for (auto &c : word) {\n       \
    \     if (std::count(max.begin(), max.end(), c) > 0) {\n                count++;\n\
    \            }\n        }\n        if (count > maxCount) {\n            max =\
    \ word;\n            maxCount = count;\n        }\n    }\n    return max;", " \
    \   // Your code here\n    std::string max = \"\";\n    int maxCount = 0;\n  \
    \  for (auto &word : words) {\n        int count = 0;\n        for (auto &c :\
    \ word) {\n            count += 1;\n        }\n        if (count > maxCount) {\n\
    \            max = word;\n            maxCount = count;\n        }\n    }\n  \
    \  return max;", "    // Your code here\n    std::string max = \"\";\n    int\
    \ maxCount = 0;\n    for (auto &word : words) {\n        int count = 0;\n    \
    \    for (auto &c : word) {\n            count += 1;\n        }\n        if (count\
    \ > maxCount) {\n            max = word;\n            maxCount = count;\n    \
    \    }\n    }\n    return max;", "    // Write your code here\n    std::string\
    \ max = \"\";\n    int maxCount = 0;\n    for (auto &word : words) {\n       \
    \ int count = 0;\n        for (auto &c : word) {\n            count += 1;\n  \
    \      }\n        if (count > maxCount) {\n            max = word;\n         \
    \   maxCount = count;\n        }\n    }\n    return max;", "    // Write your\
    \ code here\n    std::string max = \"\";\n    int maxCount = 0;\n    for (auto\
    \ &word : words) {\n        int count = 0;\n        for (auto &c : word) {\n \
    \           count += 1;\n        }\n        if (count > maxCount) {\n        \
    \    max = word;\n            maxCount = count;\n        }\n    }\n    return\
    \ max;", "    // Write your code here\n    std::string max;\n    int maxCount\
    \ = 0;\n    for(auto &word: words){\n        for(auto &c: word){\n           \
    \ if(c == max){\n                maxCount++;\n            }\n        }\n     \
    \   if(maxCount > 0){\n            max = word;\n            maxCount = 1;\n  \
    \      }\n        else{\n            maxCount = 0;\n        }\n    }\n    return\
    \ max;", "    // Your code here\n    std::string maxWord = \"\";\n    int maxCount\
    \ = 0;\n    for (auto word : words) {\n        int count = 0;\n        for (auto\
    \ c : word) {\n            count += 1;\n        }\n        if (count > maxCount)\
    \ {\n            maxCount = count;\n            maxWord = word;\n        }\n \
    \   }\n    return maxWord;", "    // Your code here\n    std::string max = \"\"\
    ;\n    int maxCount = 0;\n    for (auto &i : words) {\n        int count = 0;\n\
    \        for (auto &j : words) {\n            if (i == j) {\n                continue;\n\
    \            }\n            count += 1;\n        }\n        if (count > maxCount)\
    \ {\n            max = i;\n            maxCount = count;\n        }\n    }\n \
    \   return max;", "    std::string max = \"\";\n    int maxCount = 0;\n    for\
    \ (auto word : words) {\n        int count = std::count(word.begin(), word.end(),\
    \ 'a');\n        if (count > maxCount) {\n            max = word;\n          \
    \  maxCount = count;\n        }\n    }\n    return max;", "    std::string max\
    \ = \"\";\n    int max_count = 0;\n    for (auto &w : words) {\n        int count\
    \ = 0;\n        for (auto &c : w) {\n            if (std::count(w.begin(), w.end(),\
    \ c) > count) {\n                count = std::count(w.begin(), w.end(), c);\n\
    \            }\n        }\n        if (count > max_count) {\n            max_count\
    \ = count;\n            max = w;\n        }\n    }\n    return max;", "    //\
    \ Write your code here\n    std::string max = \"\";\n    int max_count = 0;\n\
    \    for (auto &x : words) {\n        auto count = std::count(x.begin(), x.end(),\
    \ 'a');\n        if (count > max_count) {\n            max = x;\n            max_count\
    \ = count;\n        }\n    }\n    return max;", "    // Your code here\n    std::string\
    \ max;\n    int maxCount = 0;\n    for (auto &word : words) {\n        int count\
    \ = 0;\n        for (auto &c : word) {\n            count += 1;\n        }\n \
    \       if (count > maxCount) {\n            max = word;\n            maxCount\
    \ = count;\n        }\n    }\n    return max;", "    // Your code here\n    std::string\
    \ max;\n    int maxCount = 0;\n    for (auto &word : words) {\n        int count\
    \ = 0;\n        for (auto &c : word) {\n            count += 1;\n        }\n \
    \       if (count > maxCount) {\n            max = word;\n            maxCount\
    \ = count;\n        }\n    }\n    return max;", "    // Your code here\n    std::string\
    \ max = \"\";\n    int maxCount = 0;\n    for (auto &word : words) {\n       \
    \ int count = 0;\n        for (auto &c : word) {\n            count += 1;\n  \
    \      }\n        if (count > maxCount) {\n            max = word;\n         \
    \   maxCount = count;\n        }\n    }\n    return max;", "    // code here\n\
    \    std::string max = \"\";\n    int max_count = 0;\n    for (auto &word : words)\
    \ {\n        int count = 0;\n        for (auto &c : word) {\n            count\
    \ += 1;\n        }\n        if (count > max_count) {\n            max = word;\n\
    \            max_count = count;\n        }\n    }\n    return max;", "    std::string\
    \ max = \"\";\n    int max_count = 0;\n    for (auto &word : words) {\n      \
    \  int count = 0;\n        for (auto &c : word) {\n            count += 1;\n \
    \       }\n        if (count > max_count) {\n            max = word;\n       \
    \     max_count = count;\n        }\n    }\n    return max;", "    // Your code\
    \ here\n    std::string max;\n    int maxCount = 0;\n    for (auto &word: words)\
    \ {\n        int count = 0;\n        for (auto &c: word) {\n            count\
    \ += 1;\n        }\n        if (count > maxCount) {\n            max = word;\n\
    \            maxCount = count;\n        }\n    }\n    return max;", "    std::string\
    \ max = \"\";\n    int max_count = 0;\n    for (auto &word : words) {\n      \
    \  auto count = std::count(word.begin(), word.end(), 'a');\n        if (count\
    \ > max_count) {\n            max_count = count;\n            max = word;\n  \
    \      }\n    }\n    return max;", "    std::string max = \"\";\n    int max_count\
    \ = 0;\n    for (auto &word : words) {\n        auto count = std::count(word.begin(),\
    \ word.end(), 'a');\n        if (count > max_count) {\n            max = word;\n\
    \            max_count = count;\n        }\n    }\n    return max;", "    // Write\
    \ your code here\n    std::string max = \"\";\n    int maxCount = 0;\n    for\
    \ (auto &word : words) {\n        int count = 0;\n        for (auto &c : word)\
    \ {\n            if (std::count(max.begin(), max.end(), c) > 0) {\n          \
    \      count++;\n            }\n        }\n        if (count > maxCount) {\n \
    \           max = word;\n            maxCount = count;\n        }\n    }\n   \
    \ return max;", "    // Write your code here\n    std::string max;\n    std::string\
    \ temp;\n    int count = 0;\n    for (auto &word : words) {\n        std::sort(word.begin(),\
    \ word.end());\n        temp = word;\n        for (auto &c : word) {\n       \
    \     if (std::count(temp.begin(), temp.end(), c) > count) {\n               \
    \ max = temp;\n                count = std::count(temp.begin(), temp.end(), c);\n\
    \            }\n        }\n    }\n    return max;", "    // Write your code here\n\
    \    std::string max = \"\";\n    int maxCount = 0;\n    for (auto &word : words)\
    \ {\n        int count = 0;\n        for (auto &c : word) {\n            if (std::count(word.begin(),\
    \ word.end(), c) > 0) {\n                count++;\n            }\n        }\n\
    \        if (count > maxCount) {\n            max = word;\n            maxCount\
    \ = count;\n        }\n    }\n    return max;", "    std::string max = \"\";\n\
    \    int max_count = 0;\n    for (auto &word : words) {\n        int count = 0;\n\
    \        for (auto &c : word) {\n            count += 1;\n        }\n        if\
    \ (count > max_count) {\n            max = word;\n            max_count = count;\n\
    \        }\n    }\n    return max;", "    // Write your code here\n    std::string\
    \ max;\n    int maxCount = 0;\n    for (auto &w : words) {\n        int count\
    \ = 0;\n        for (auto &c : w) {\n            count += 1;\n        }\n    \
    \    if (count > maxCount) {\n            max = w;\n            maxCount = count;\n\
    \        }\n    }\n    return max;", "    // Write your code here\n    std::string\
    \ max = \"\";\n    int maxCount = 0;\n    for (auto &word : words) {\n       \
    \ int count = 0;\n        for (auto &c : word) {\n            count += (c == 'a'\
    \ || c == 'e' || c == 'i' || c == 'o' || c == 'u');\n        }\n        if (count\
    \ > maxCount) {\n            max = word;\n            maxCount = count;\n    \
    \    }\n    }\n    return max;", "    std::string max = \"\";\n    int max_count\
    \ = 0;\n    for (auto &word : words) {\n        auto count = std::count_if(word.begin(),\
    \ word.end(), [&](char c) {\n            return std::tolower(c) != 'a';\n    \
    \    });\n        if (count > max_count) {\n            max = word;\n        \
    \    max_count = count;\n        }\n    }\n    return max;", "    int n = words.size();\n\
    \    int max = 0;\n    std::string maxWord = \"\";\n    for (int i = 0; i < n;\
    \ i++) {\n        int count = 0;\n        for (int j = 0; j < n; j++) {\n    \
    \        if (words[j] == words[i]) {\n                count++;\n            }\n\
    \        }\n        if (count > max) {\n            max = count;\n           \
    \ maxWord = words[i];\n        }\n    }\n    return maxWord;", "    std::string\
    \ max = \"\";\n    int max_count = 0;\n    for (auto &word : words) {\n      \
    \  int count = 0;\n        for (auto &c : word) {\n            count += (c ==\
    \ 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u');\n        }\n        if\
    \ (count > max_count) {\n            max_count = count;\n            max = word;\n\
    \        }\n    }\n    return max;", "    // Write your code here\n    std::string\
    \ max = \"\";\n    int maxCount = 0;\n    for (auto &word : words) {\n       \
    \ int count = 0;\n        for (auto &c : word) {\n            count += 1;\n  \
    \      }\n        if (count > maxCount) {\n            max = word;\n         \
    \   maxCount = count;\n        }\n    }\n    return max;", "    // Write your\
    \ code here\n    std::string max = \"\";\n    int maxCount = 0;\n    for (auto\
    \ word : words) {\n        int count = 0;\n        for (auto c : word) {\n   \
    \         count += 1;\n        }\n        if (count > maxCount) {\n          \
    \  max = word;\n            maxCount = count;\n        }\n    }\n    return max;",
  "    // Write your code here\n    std::string max = \"\";\n    int maxCount = 0;\n\
    \    for (auto &word : words) {\n        int count = 0;\n        for (auto &c\
    \ : word) {\n            count += 1;\n        }\n        if (count > maxCount)\
    \ {\n            max = word;\n            maxCount = count;\n        }\n    }\n\
    \    return max;", "    std::string max;\n    int max_count = 0;\n    for (auto\
    \ &word : words) {\n        int count = 0;\n        for (auto &c : word) {\n \
    \           if (std::count(word.begin(), word.end(), c) > 0) {\n             \
    \   count++;\n            }\n        }\n        if (count > max_count) {\n   \
    \         max = word;\n            max_count = count;\n        }\n    }\n    return\
    \ max;", "    // Your code here\n    std::string max = \"\";\n    int maxCount\
    \ = 0;\n    for (auto &word : words) {\n        int count = 0;\n        for (auto\
    \ &c : word) {\n            count += 1;\n        }\n        if (count > maxCount)\
    \ {\n            max = word;\n            maxCount = count;\n        }\n    }\n\
    \    return max;", "    // Your code here\n    std::string max = \"\";\n    int\
    \ maxCount = 0;\n    for (auto &word : words) {\n        int count = 0;\n    \
    \    for (auto &c : word) {\n            count += 1;\n        }\n        if (count\
    \ > maxCount) {\n            max = word;\n            maxCount = count;\n    \
    \    }\n    }\n    return max;", "    // Write your code here\n    std::string\
    \ max = \"\";\n    int count = 0;\n    for (auto &i : words) {\n        count\
    \ += i.size();\n        if (i.size() > max.size()) {\n            max = i;\n \
    \       }\n    }\n    if (count > words.size()) {\n        return \"\";\n    }\n\
    \    return max;", "    int max_count = 0;\n    std::string max_word = \"\";\n\
    \    for (auto &word : words) {\n        int count = 0;\n        for (auto &c\
    \ : word) {\n            count += 1;\n        }\n        if (count > max_count)\
    \ {\n            max_count = count;\n            max_word = word;\n        }\n\
    \    }\n    return max_word;", "    // Write your code here\n    std::string maxWord\
    \ = \"\";\n    int maxCount = 0;\n    for(auto &word : words) {\n        std::unordered_map<char,\
    \ int> charCount;\n        for(auto &c : word) {\n            charCount[c]++;\n\
    \        }\n        if(charCount.size() > maxCount) {\n            maxCount =\
    \ charCount.size();\n            maxWord = word;\n        }\n    }\n    return\
    \ maxWord;", "    // Your code here\n    std::string max = \"\";\n    int maxCount\
    \ = 0;\n    for (auto &i : words) {\n        auto it = std::find(i.begin(), i.end(),\
    \ max);\n        if (it != i.end()) {\n            maxCount = std::count(i.begin(),\
    \ it, max);\n            max = *it;\n        }\n    }\n    if (maxCount > 1) {\n\
    \        return max;\n    }\n    return words[0];", "    // Write your code here\n\
    \    std::string max = \"\";\n    int maxCount = 0;\n    for (auto &word : words)\
    \ {\n        int count = 0;\n        for (auto &c : word) {\n            count\
    \ += 1;\n        }\n        if (count > maxCount) {\n            max = word;\n\
    \            maxCount = count;\n        }\n    }\n    return max;", "    std::string\
    \ max = \"\";\n    int max_count = 0;\n    for (auto &word : words) {\n      \
    \  int count = 0;\n        for (auto &c : word) {\n            if (std::count(max.begin(),\
    \ max.end(), c) > 0) {\n                count++;\n            }\n        }\n \
    \       if (count > max_count) {\n            max_count = count;\n           \
    \ max = word;\n        }\n    }\n    return max;", "    // Your code here\n  \
    \  std::string max = \"\";\n    int maxCount = 0;\n    for (auto &word : words)\
    \ {\n        int count = 0;\n        for (auto &c : word) {\n            if (std::count(max.begin(),\
    \ max.end(), c) > 0) {\n                count++;\n            }\n        }\n \
    \       if (count > maxCount) {\n            max = word;\n            maxCount\
    \ = count;\n        }\n    }\n    return max;", "    // Your code here\n    std::string\
    \ maxWord = \"\";\n    int maxCount = 0;\n    for (auto word : words) {\n    \
    \    int count = 0;\n        for (auto c : word) {\n            count += (c ==\
    \ 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u');\n        }\n        if\
    \ (count > maxCount) {\n            maxCount = count;\n            maxWord = word;\n\
    \        }\n    }\n    return maxWord;", "    // Your code here\n    std::string\
    \ max;\n    std::string max2;\n    std::string max3;\n    std::string max4;\n\
    \    std::string max5;\n    std::string max6;\n    std::string max7;\n    std::string\
    \ max8;\n    std::string max9;\n    std::string max10;\n    std::string max11;\n\
    \    std::string max12;\n    std::string max13;\n    std::string max14;\n    std::string\
    \ max15;\n    std::string max16;\n    std::string max17;\n    std::string max18;\n\
    \    std::string max19;\n    std::string max20;\n    std::string max21;\n    std::string\
    \ max22;\n    std::string max23;\n    std::string max24;\n    std::string max25;\n\
    \    std::string max26;\n    std::string max27;\n    std::string max28;\n    std::string\
    \ max29;\n    std::string max30;\n    std::string max31;\n    std::string max32;\n\
    \    std::string max33;\n    std::string max34;\n    std::string max35;\n    std::string\
    \ max36;\n    std::string max37;\n    std::string max38;\n    std::string max39;\n\
    \    std::string max40;\n    std::string max41;\n    std::string max42;\n    std::string\
    \ max43;\n    std::string max44;\n    std::string max45;\n    std::string max46;\n\
    \    std::string max47;\n    std::string max48;\n    std::string max49;\n    std::string\
    \ max50;\n    std::string max51;\n    std::string max52;\n    std::string max53;\n\
    \    std::string max54;\n    std::string max55;\n    std::string max56;\n    std::string\
    \ max57;\n    std::string max58;\n    std::string max59;\n    std::string max60;\n\
    \    std::string max61;\n    std::string max62;\n    std::string max63;\n    std::string\
    \ max64;\n    std::string max65;\n    std::string max66;\n    std::string max67;\n\
    \    std::string max68;\n    std::string max69;\n    std::string max70;\n    std::string\
    \ max71;\n    std::string max72;\n    std::string max73;\n    std::string max74;\n\
    \    std::string max75;\n    std::string max76;\n    std::string max77;\n    std::string\
    \ max78;\n    std::string max79;\n    std::string max80;\n    std::string max81;\n\
    \    std::string max82;\n    std::string max83;\n    std::string max84;\n    std::string\
    \ max85;\n    std::string max86;\n    std::string max87;\n    std::string max88;",
  "    std::string max = \"\";\n    int max_count = 0;\n    for (auto &word : words)\
    \ {\n        int count = 0;\n        for (auto &c : word) {\n            count\
    \ += 1;\n        }\n        if (count > max_count) {\n            max = word;\n\
    \            max_count = count;\n        }\n    }\n    return max;", "    std::string\
    \ max = \"\";\n    int max_count = 0;\n    for (auto &word : words) {\n      \
    \  int count = 0;\n        for (auto &c : word) {\n            count += (c ==\
    \ 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u');\n        }\n        if\
    \ (count > max_count) {\n            max = word;\n            max_count = count;\n\
    \        }\n    }\n    return max;", "    std::string max = \"\";\n    int max_count\
    \ = 0;\n    for (auto &word : words) {\n        int count = 0;\n        for (auto\
    \ &c : word) {\n            count += (c == 'a' || c == 'e' || c == 'i' || c ==\
    \ 'o' || c == 'u');\n        }\n        if (count > max_count) {\n           \
    \ max = word;\n            max_count = count;\n        }\n    }\n    return max;",
  "    std::string max = \"\";\n    int max_count = 0;\n    for (auto &w : words)\
    \ {\n        auto count = std::count(w.begin(), w.end(), 'a');\n        if (count\
    \ > max_count) {\n            max = w;\n            max_count = count;\n     \
    \   }\n    }\n    return max;", "    std::string max = \"\";\n    int maxCount\
    \ = 0;\n    for (auto &word : words) {\n        auto count = std::count(word.begin(),\
    \ word.end(), 'a');\n        if (count > maxCount) {\n            max = word;\n\
    \            maxCount = count;\n        }\n    }\n    return max;", "    std::string\
    \ max = \"\";\n    int max_count = 0;\n    for (auto &word : words) {\n      \
    \  int count = 0;\n        for (auto &c : word) {\n            count += (c ==\
    \ 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u');\n        }\n        if\
    \ (count > max_count) {\n            max = word;\n            max_count = count;\n\
    \        }\n    }\n    return max;", "    // Your code here\n    std::string maxWord\
    \ = \"\";\n    int maxCount = 0;\n    for (auto &word : words) {\n        int\
    \ count = 0;\n        for (auto &c : word) {\n            count += 1;\n      \
    \  }\n        if (count > maxCount) {\n            maxCount = count;\n       \
    \     maxWord = word;\n        }\n    }\n    return maxWord;", "    // Write your\
    \ code here\n    std::string maxWord = \"\";\n    int maxCount = 0;\n    for (auto\
    \ &word : words) {\n        int count = 0;\n        for (auto &c : word) {\n \
    \           count += 1;\n        }\n        if (count > maxCount) {\n        \
    \    maxCount = count;\n            maxWord = word;\n        }\n    }\n    return\
    \ maxWord;", "    // Your code here\n    std::string max;\n    int maxCount =\
    \ 0;\n    for (auto &word : words) {\n        int count = 0;\n        for (auto\
    \ &c : word) {\n            count += 1;\n        }\n        if (count > maxCount)\
    \ {\n            max = word;\n            maxCount = count;\n        }\n    }\n\
    \    return max;", "    int max = 0;\n    std::string maxWord = \"\";\n    for\
    \ (auto &word : words) {\n        auto unique = std::count(word.begin(), word.end(),\
    \ 0);\n        if (unique > max) {\n            max = unique;\n            maxWord\
    \ = word;\n        }\n    }\n    return maxWord;", "    // Write your code here\n\
    \    std::string max = \"\";\n    int maxCount = 0;\n    for(auto &word: words){\n\
    \        std::unordered_map<char,int> charCount;\n        for(auto &char: word){\n\
    \            charCount[char]++;\n        }\n        if(charCount.size() > maxCount){\n\
    \            max = word;\n            maxCount = charCount.size();\n        }\n\
    \    }\n    return max;", "    std::string max = \"\";\n    int maxCount = 0;\n\
    \    for (auto &word : words) {\n        int count = std::count(word.begin(),\
    \ word.end(), 'a');\n        if (count > maxCount) {\n            max = word;\n\
    \            maxCount = count;\n        }\n    }\n    return max;", "    // Your\
    \ code here\n    std::string max = \"\";\n    int max_count = 0;\n    for (auto\
    \ &word : words) {\n        int count = 0;\n        for (auto &c : word) {\n \
    \           count += 1;\n        }\n        if (count > max_count) {\n       \
    \     max = word;\n            max_count = count;\n        }\n    }\n    return\
    \ max;", "    // Your code here\n    std::string max = \"\";\n    int count =\
    \ 0;\n    for (auto &i : words) {\n        count += i.size();\n        if (count\
    \ > max.size()) {\n            max = i;\n        }\n    }\n    return max;", " \
    \   // Your code here\n    std::string max;\n    int max_count = 0;\n    for (auto\
    \ &word : words) {\n        int count = 0;\n        for (auto &c : word) {\n \
    \           count += 1;\n        }\n        if (count > max_count) {\n       \
    \     max = word;\n            max_count = count;\n        }\n    }\n    return\
    \ max;", "    // Your code here\n    std::string max = \"\";\n    int maxCount\
    \ = 0;\n    for (auto &word : words) {\n        int count = 0;\n        for (auto\
    \ &c : word) {\n            if (std::count(word.begin(), word.end(), c) > 0) {\n\
    \                count++;\n            }\n        }\n        if (count > maxCount)\
    \ {\n            max = word;\n            maxCount = count;\n        }\n    }\n\
    \    return max;", "    // Your code goes here\n    std::string maxWord = \"\"\
    ;\n    int maxCount = 0;\n    for (auto word : words) {\n        int count = 0;\n\
    \        for (auto c : word) {\n            count += (c == 'a' || c == 'e' ||\
    \ c == 'i' || c == 'o' || c == 'u');\n        }\n        if (count > maxCount)\
    \ {\n            maxCount = count;\n            maxWord = word;\n        }\n \
    \   }\n    return maxWord;", "    // Your code here\n    std::string max = \"\"\
    ;\n    int maxCount = 0;\n    for (auto &word : words) {\n        int count =\
    \ 0;\n        for (auto &c : word) {\n            count += 1;\n        }\n   \
    \     if (count > maxCount) {\n            max = word;\n            maxCount =\
    \ count;\n        }\n    }\n    return max;", "    std::string max = \"\";\n \
    \   int max_count = 0;\n    for (auto &word : words) {\n        int count = 0;\n\
    \        for (auto &c : word) {\n            count += 1;\n        }\n        if\
    \ (count > max_count) {\n            max_count = count;\n            max = word;\n\
    \        }\n    }\n    return max;", "    // Write your code here\n    std::string\
    \ max = \"\";\n    int maxCount = 0;\n    for (auto &word : words) {\n       \
    \ int count = 0;\n        for (auto &c : word) {\n            if (std::count(max.begin(),\
    \ max.end(), c) > 0) {\n                count++;\n            }\n        }\n \
    \       if (count > maxCount) {\n            max = word;\n            maxCount\
    \ = count;\n        }\n    }\n    return max;", "    std::string max = \"\";\n\
    \    int maxCount = 0;\n    for (auto &word : words) {\n        int count = std::count(word.begin(),\
    \ word.end(), 'a');\n        if (count > maxCount) {\n            max = word;\n\
    \            maxCount = count;\n        }\n    }\n    return max;", "    std::string\
    \ max = \"\";\n    int maxCount = 0;\n    for (auto &word : words) {\n       \
    \ auto count = std::count(word.begin(), word.end(), 'a');\n        if (count >\
    \ maxCount) {\n            max = word;\n            maxCount = count;\n      \
    \  }\n    }\n    return max;", "    // Write your code here\n    std::string max;\n\
    \    int maxCount = 0;\n    for (auto &word : words) {\n        int count = 0;\n\
    \        for (auto &c : word) {\n            if (std::count(word.begin(), word.end(),\
    \ c) > 0) {\n                count++;\n            }\n        }\n        if (count\
    \ > maxCount) {\n            max = word;\n            maxCount = count;\n    \
    \    }\n    }\n    return max;", "    // Write your code here\n    std::string\
    \ max = \"\";\n    int maxCount = 0;\n    for (auto &word : words) {\n       \
    \ int count = 0;\n        for (auto &c : word) {\n            count += 1;\n  \
    \      }\n        if (count > maxCount) {\n            max = word;\n         \
    \   maxCount = count;\n        }\n    }\n    return max;", "    // Write your\
    \ code here\n    std::string maxWord = \"\";\n    int maxCount = 0;\n    for (auto\
    \ word : words) {\n        int count = 0;\n        for (auto c : word) {\n   \
    \         count += 1;\n        }\n        if (count > maxCount) {\n          \
    \  maxCount = count;\n            maxWord = word;\n        }\n    }\n    return\
    \ maxWord;", "    // Your code here\n    std::string max = \"\";\n    int maxCount\
    \ = 0;\n    for (auto &word : words) {\n        int count = 0;\n        for (auto\
    \ &c : word) {\n            if (std::count(word.begin(), word.end(), c) > 0) {\n\
    \                count++;\n            }\n        }\n        if (count > maxCount)\
    \ {\n            max = word;\n            maxCount = count;\n        }\n    }\n\
    \    return max;", "    // Write your code here\n    std::string max = \"\";\n\
    \    int maxCount = 0;\n    for (auto &i : words) {\n        int count = 0;\n\
    \        for (auto &j : i) {\n            count += 1;\n        }\n        if (count\
    \ > maxCount) {\n            max = i;\n            maxCount = count;\n       \
    \ }\n    }\n    return max;", "    std::string max = \"\";\n    int max_count\
    \ = 0;\n    for (auto &w : words) {\n        int count = 0;\n        for (auto\
    \ &c : w) {\n            count += 1;\n        }\n        if (count > max_count)\
    \ {\n            max_count = count;\n            max = w;\n        }\n    }\n\
    \    return max;", "    std::string max = \"\";\n    int max_count = 0;\n    for\
    \ (auto &word : words) {\n        int count = 0;\n        for (auto &c : word)\
    \ {\n            if (std::count(max.begin(), max.end(), c) > 0) {\n          \
    \      count++;\n            }\n        }\n        if (count > max_count) {\n\
    \            max = word;\n            max_count = count;\n        }\n    }\n \
    \   return max;"]
stop_tokens:
- "\n}"
