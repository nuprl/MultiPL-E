name: HumanEval_114_minSubArraySum
language: cpp
prompt: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of integers\
  \ nums, find the minimum sum of any non-empty sub-array\n// of nums.\n// Example\n\
  // minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n// minSubArraySum([-1, -2, -3]) == -6\n\
  long minSubArraySum(std::vector<long> nums) {\n"
tests: "}\nint main() {\n    auto candidate = minSubArraySum;\n    assert(candidate((std::vector<long>({2,\
  \ 3, 4, 1, 2, 4}))) == (1));\n    assert(candidate((std::vector<long>({-1, -2, -3})))\
  \ == (-6));\n    assert(candidate((std::vector<long>({-1, -2, -3, 2, -10}))) ==\
  \ (-14));\n    assert(candidate((std::vector<long>({-9999999999999999}))) == (-9999999999999999));\n\
  \    assert(candidate((std::vector<long>({0, 10, 20, 1000000}))) == (0));\n    assert(candidate((std::vector<long>({-1,\
  \ -2, -3, 10, -5}))) == (-6));\n    assert(candidate((std::vector<long>({100, -1,\
  \ -2, -3, 10, -5}))) == (-6));\n    assert(candidate((std::vector<long>({10, 11,\
  \ 13, 8, 3, 4}))) == (3));\n    assert(candidate((std::vector<long>({100, -33, 32,\
  \ -1, 0, -2}))) == (-33));\n    assert(candidate((std::vector<long>({-10}))) ==\
  \ (-10));\n    assert(candidate((std::vector<long>({7}))) == (7));\n    assert(candidate((std::vector<long>({1,\
  \ -1}))) == (-1));\n}\n"
completions: []
stop_tokens:
- "\n}"
