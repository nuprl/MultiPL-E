name: HumanEval_83_starts_one_ends
language: cpp
results:
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ n, return the count of the numbers of n-digit\n// positive integers that start\
    \ or end with 1.\nlong starts_one_ends(long n) {\n    long count = 0;\n    long\
    \ start = 1;\n    long end = 1;\n    while (n != 0) {\n        if (n % 10 == 1)\
    \ {\n            count++;\n            end = end * 10;\n        }\n        n /=\
    \ 10;\n    }\n    if (n == 0) {\n        return count;\n    }\n    long starts\
    \ = count + 1;\n    long ends = count + 1;\n    while (n != 0) {\n        if (n\
    \ % 10 == 1) {\n            ends = ends * 10;\n        }\n        n /= 10;\n \
    \   }\n    if (n == 0) {\n        return starts + ends;\n    }\n    return starts\
    \ + ends;\n}\nint main() {\n    auto candidate = starts_one_ends;\n    assert(candidate((1))\
    \ == (1));\n    assert(candidate((2)) == (18));\n    assert(candidate((3)) ==\
    \ (180));\n    assert(candidate((4)) == (1800));\n    assert(candidate((5)) ==\
    \ (18000));\n}\n"
  stdout: ''
  stderr: "tmp2lg6aswm: /tmp/tmp2lg6aswm.cpp:35: int main(): Assertion `candidate((2))\
    \ == (18)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ n, return the count of the numbers of n-digit\n// positive integers that start\
    \ or end with 1.\nlong starts_one_ends(long n) {\n    long count = 0;\n    while\
    \ (n > 0) {\n        if (n % 10 == 1) {\n            count++;\n        }\n   \
    \     n /= 10;\n    }\n    return count;\n}\nint main() {\n    auto candidate\
    \ = starts_one_ends;\n    assert(candidate((1)) == (1));\n    assert(candidate((2))\
    \ == (18));\n    assert(candidate((3)) == (180));\n    assert(candidate((4)) ==\
    \ (1800));\n    assert(candidate((5)) == (18000));\n}\n"
  stdout: ''
  stderr: "tmpf6q2v_af: /tmp/tmpf6q2v_af.cpp:18: int main(): Assertion `candidate((2))\
    \ == (18)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ n, return the count of the numbers of n-digit\n// positive integers that start\
    \ or end with 1.\nlong starts_one_ends(long n) {\n    long count = 0;\n    while\
    \ (n != 0) {\n        if (n % 10 == 1) {\n            count++;\n        }\n  \
    \      n /= 10;\n    }\n    return count;\n}\nint main() {\n    auto candidate\
    \ = starts_one_ends;\n    assert(candidate((1)) == (1));\n    assert(candidate((2))\
    \ == (18));\n    assert(candidate((3)) == (180));\n    assert(candidate((4)) ==\
    \ (1800));\n    assert(candidate((5)) == (18000));\n}\n"
  stdout: ''
  stderr: "tmpf3t421lz: /tmp/tmpf3t421lz.cpp:18: int main(): Assertion `candidate((2))\
    \ == (18)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ n, return the count of the numbers of n-digit\n// positive integers that start\
    \ or end with 1.\nlong starts_one_ends(long n) {\n    long count = 0;\n    long\
    \ limit = n;\n    while (limit > 0) {\n        if (limit % 10 == 1) {\n      \
    \      count++;\n        }\n        limit /= 10;\n    }\n    return count;\n}\n\
    int main() {\n    auto candidate = starts_one_ends;\n    assert(candidate((1))\
    \ == (1));\n    assert(candidate((2)) == (18));\n    assert(candidate((3)) ==\
    \ (180));\n    assert(candidate((4)) == (1800));\n    assert(candidate((5)) ==\
    \ (18000));\n}\n"
  stdout: ''
  stderr: "tmpg0diooc7: /tmp/tmpg0diooc7.cpp:19: int main(): Assertion `candidate((2))\
    \ == (18)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ n, return the count of the numbers of n-digit\n// positive integers that start\
    \ or end with 1.\nlong starts_one_ends(long n) {\n    long count = 0;\n    long\
    \ temp;\n    temp = n;\n    while (temp > 0) {\n        if (temp % 10 == 1) {\n\
    \            count++;\n        }\n        temp /= 10;\n    }\n    return count;\n\
    }\nint main() {\n    auto candidate = starts_one_ends;\n    assert(candidate((1))\
    \ == (1));\n    assert(candidate((2)) == (18));\n    assert(candidate((3)) ==\
    \ (180));\n    assert(candidate((4)) == (1800));\n    assert(candidate((5)) ==\
    \ (18000));\n}\n"
  stdout: ''
  stderr: "tmpo10zab81: /tmp/tmpo10zab81.cpp:20: int main(): Assertion `candidate((2))\
    \ == (18)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ n, return the count of the numbers of n-digit\n// positive integers that start\
    \ or end with 1.\nlong starts_one_ends(long n) {\n    long count = 0;\n    long\
    \ start = 1;\n    long end = 1;\n    while (n >= end) {\n        end = end * 10;\n\
    \        count++;\n    }\n    while (start <= n) {\n        start = start * 10;\n\
    \        count++;\n    }\n    return count;\n}\nint main() {\n    auto candidate\
    \ = starts_one_ends;\n    assert(candidate((1)) == (1));\n    assert(candidate((2))\
    \ == (18));\n    assert(candidate((3)) == (180));\n    assert(candidate((4)) ==\
    \ (1800));\n    assert(candidate((5)) == (18000));\n}\n"
  stdout: ''
  stderr: "tmpd31co2_9: /tmp/tmpd31co2_9.cpp:21: int main(): Assertion `candidate((1))\
    \ == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ n, return the count of the numbers of n-digit\n// positive integers that start\
    \ or end with 1.\nlong starts_one_ends(long n) {\n    long count = 0;\n    long\
    \ mod = pow(10, n);\n    long start = 1, end = 1;\n    while (start <= n) {\n\
    \        if (start % mod == 0) {\n            count++;\n        }\n        start\
    \ *= 10;\n    }\n    while (end <= n) {\n        if (end % mod == 0) {\n     \
    \       count++;\n        }\n        end *= 10;\n    }\n    return count;\n}\n\
    int main() {\n    auto candidate = starts_one_ends;\n    assert(candidate((1))\
    \ == (1));\n    assert(candidate((2)) == (18));\n    assert(candidate((3)) ==\
    \ (180));\n    assert(candidate((4)) == (1800));\n    assert(candidate((5)) ==\
    \ (18000));\n}\n"
  stdout: ''
  stderr: "tmpzx7ohmqj: /tmp/tmpzx7ohmqj.cpp:25: int main(): Assertion `candidate((1))\
    \ == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ n, return the count of the numbers of n-digit\n// positive integers that start\
    \ or end with 1.\nlong starts_one_ends(long n) {\n    long count = 0;\n    long\
    \ start = 1;\n    long end = 1;\n    while (n > 0) {\n        if (n % 10 == 1)\
    \ {\n            count++;\n            end = end * 10;\n        }\n        n /=\
    \ 10;\n    }\n    while (n > 0) {\n        if (n % 10 == 1) {\n            count++;\n\
    \            start = start * 10;\n        }\n        n /= 10;\n    }\n    return\
    \ count;\n}\nint main() {\n    auto candidate = starts_one_ends;\n    assert(candidate((1))\
    \ == (1));\n    assert(candidate((2)) == (18));\n    assert(candidate((3)) ==\
    \ (180));\n    assert(candidate((4)) == (1800));\n    assert(candidate((5)) ==\
    \ (18000));\n}\n"
  stdout: ''
  stderr: "tmpmm_h57_2: /tmp/tmpmm_h57_2.cpp:28: int main(): Assertion `candidate((2))\
    \ == (18)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ n, return the count of the numbers of n-digit\n// positive integers that start\
    \ or end with 1.\nlong starts_one_ends(long n) {\n    long count = 0;\n    long\
    \ start = 1;\n    long end = 1;\n    while (n != 0) {\n        if (n % 10 == 1)\
    \ {\n            count++;\n        }\n        end = end * 10;\n        n /= 10;\n\
    \    }\n    if (n == 0) {\n        count++;\n    }\n    return count;\n}\nint\
    \ main() {\n    auto candidate = starts_one_ends;\n    assert(candidate((1)) ==\
    \ (1));\n    assert(candidate((2)) == (18));\n    assert(candidate((3)) == (180));\n\
    \    assert(candidate((4)) == (1800));\n    assert(candidate((5)) == (18000));\n\
    }\n"
  stdout: ''
  stderr: "tmpn36dw061: /tmp/tmpn36dw061.cpp:23: int main(): Assertion `candidate((1))\
    \ == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ n, return the count of the numbers of n-digit\n// positive integers that start\
    \ or end with 1.\nlong starts_one_ends(long n) {\n    long count = 0;\n    long\
    \ i = 1;\n    while (i <= n) {\n        if (i % 10 == 1) {\n            count++;\n\
    \        }\n        i++;\n    }\n    return count;\n}\nint main() {\n    auto\
    \ candidate = starts_one_ends;\n    assert(candidate((1)) == (1));\n    assert(candidate((2))\
    \ == (18));\n    assert(candidate((3)) == (180));\n    assert(candidate((4)) ==\
    \ (1800));\n    assert(candidate((5)) == (18000));\n}\n"
  stdout: ''
  stderr: "tmprgvlzx6x: /tmp/tmprgvlzx6x.cpp:19: int main(): Assertion `candidate((2))\
    \ == (18)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ n, return the count of the numbers of n-digit\n// positive integers that start\
    \ or end with 1.\nlong starts_one_ends(long n) {\n    long count = 0;\n    long\
    \ start = 1, end = n;\n    while (start <= end) {\n        if (n % 10 == 1) {\n\
    \            count++;\n        }\n        start *= 10;\n        end /= 10;\n \
    \   }\n    return count;\n}\nint main() {\n    auto candidate = starts_one_ends;\n\
    \    assert(candidate((1)) == (1));\n    assert(candidate((2)) == (18));\n   \
    \ assert(candidate((3)) == (180));\n    assert(candidate((4)) == (1800));\n  \
    \  assert(candidate((5)) == (18000));\n}\n"
  stdout: ''
  stderr: "tmpzd_r11vh: /tmp/tmpzd_r11vh.cpp:20: int main(): Assertion `candidate((2))\
    \ == (18)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ n, return the count of the numbers of n-digit\n// positive integers that start\
    \ or end with 1.\nlong starts_one_ends(long n) {\n    long count = 0;\n    long\
    \ start = 1;\n    long end = 1;\n    while (n > 0) {\n        if (n % 10 == 1)\
    \ {\n            count++;\n        }\n        end = end * 10;\n        n /= 10;\n\
    \    }\n    if (n == 0) {\n        count++;\n    }\n    return count;\n}\nint\
    \ main() {\n    auto candidate = starts_one_ends;\n    assert(candidate((1)) ==\
    \ (1));\n    assert(candidate((2)) == (18));\n    assert(candidate((3)) == (180));\n\
    \    assert(candidate((4)) == (1800));\n    assert(candidate((5)) == (18000));\n\
    }\n"
  stdout: ''
  stderr: "tmp_5r4hrsk: /tmp/tmp_5r4hrsk.cpp:23: int main(): Assertion `candidate((1))\
    \ == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ n, return the count of the numbers of n-digit\n// positive integers that start\
    \ or end with 1.\nlong starts_one_ends(long n) {\n    long count = 0;\n    long\
    \ limit = n;\n    while (limit > 0) {\n        long digit = limit % 10;\n    \
    \    if (digit == 1) {\n            count++;\n        }\n        limit /= 10;\n\
    \    }\n    return count;\n}\nint main() {\n    auto candidate = starts_one_ends;\n\
    \    assert(candidate((1)) == (1));\n    assert(candidate((2)) == (18));\n   \
    \ assert(candidate((3)) == (180));\n    assert(candidate((4)) == (1800));\n  \
    \  assert(candidate((5)) == (18000));\n}\n"
  stdout: ''
  stderr: "tmpwrccu3ej: /tmp/tmpwrccu3ej.cpp:20: int main(): Assertion `candidate((2))\
    \ == (18)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ n, return the count of the numbers of n-digit\n// positive integers that start\
    \ or end with 1.\nlong starts_one_ends(long n) {\n    long count = 0;\n    long\
    \ start = 1;\n    long end = 1;\n    while (n > 0) {\n        if (n % 10 == 1)\
    \ {\n            count++;\n        }\n        end = end * 10;\n        n /= 10;\n\
    \    }\n    while (n > 0) {\n        if (n % 10 == 1) {\n            count++;\n\
    \        }\n        start = start * 10;\n        n /= 10;\n    }\n    return count;\n\
    }\nint main() {\n    auto candidate = starts_one_ends;\n    assert(candidate((1))\
    \ == (1));\n    assert(candidate((2)) == (18));\n    assert(candidate((3)) ==\
    \ (180));\n    assert(candidate((4)) == (1800));\n    assert(candidate((5)) ==\
    \ (18000));\n}\n"
  stdout: ''
  stderr: "tmpkiwmcl85: /tmp/tmpkiwmcl85.cpp:28: int main(): Assertion `candidate((2))\
    \ == (18)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ n, return the count of the numbers of n-digit\n// positive integers that start\
    \ or end with 1.\nlong starts_one_ends(long n) {\n    long count = 0;\n    long\
    \ cur = 1;\n    while (cur <= n) {\n        if (cur % 10 == 1) {\n           \
    \ count++;\n        }\n        cur *= 10;\n    }\n    return count;\n}\nint main()\
    \ {\n    auto candidate = starts_one_ends;\n    assert(candidate((1)) == (1));\n\
    \    assert(candidate((2)) == (18));\n    assert(candidate((3)) == (180));\n \
    \   assert(candidate((4)) == (1800));\n    assert(candidate((5)) == (18000));\n\
    }\n"
  stdout: ''
  stderr: "tmpx99iw7xi: /tmp/tmpx99iw7xi.cpp:19: int main(): Assertion `candidate((2))\
    \ == (18)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ n, return the count of the numbers of n-digit\n// positive integers that start\
    \ or end with 1.\nlong starts_one_ends(long n) {\n    long count = 0;\n    long\
    \ limit = n;\n    while (limit > 0) {\n        if (limit % 10 == 1)\n        \
    \    count++;\n        limit /= 10;\n    }\n    return count;\n}\nint main() {\n\
    \    auto candidate = starts_one_ends;\n    assert(candidate((1)) == (1));\n \
    \   assert(candidate((2)) == (18));\n    assert(candidate((3)) == (180));\n  \
    \  assert(candidate((4)) == (1800));\n    assert(candidate((5)) == (18000));\n\
    }\n"
  stdout: ''
  stderr: "tmpngldumvk: /tmp/tmpngldumvk.cpp:18: int main(): Assertion `candidate((2))\
    \ == (18)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ n, return the count of the numbers of n-digit\n// positive integers that start\
    \ or end with 1.\nlong starts_one_ends(long n) {\n    long count = 0;\n    while\
    \ (n > 0) {\n        if (n % 10 == 1) {\n            count++;\n        }\n   \
    \     n /= 10;\n    }\n    return count;\n}\nint main() {\n    auto candidate\
    \ = starts_one_ends;\n    assert(candidate((1)) == (1));\n    assert(candidate((2))\
    \ == (18));\n    assert(candidate((3)) == (180));\n    assert(candidate((4)) ==\
    \ (1800));\n    assert(candidate((5)) == (18000));\n}\n"
  stdout: ''
  stderr: "tmpgru9_5rc: /tmp/tmpgru9_5rc.cpp:18: int main(): Assertion `candidate((2))\
    \ == (18)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ n, return the count of the numbers of n-digit\n// positive integers that start\
    \ or end with 1.\nlong starts_one_ends(long n) {\n    long count = 0;\n    long\
    \ start = 1;\n    long end = 1;\n    while (n >= end) {\n        end = end * 10;\n\
    \        count++;\n    }\n    while (start <= n) {\n        start = start * 10;\n\
    \        count++;\n    }\n    return count;\n}\nint main() {\n    auto candidate\
    \ = starts_one_ends;\n    assert(candidate((1)) == (1));\n    assert(candidate((2))\
    \ == (18));\n    assert(candidate((3)) == (180));\n    assert(candidate((4)) ==\
    \ (1800));\n    assert(candidate((5)) == (18000));\n}\n"
  stdout: ''
  stderr: "tmpe7jp_7fo: /tmp/tmpe7jp_7fo.cpp:21: int main(): Assertion `candidate((1))\
    \ == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ n, return the count of the numbers of n-digit\n// positive integers that start\
    \ or end with 1.\nlong starts_one_ends(long n) {\n    long count = 0;\n    long\
    \ m = n;\n    while (m != 0) {\n        m /= 10;\n        count++;\n    }\n  \
    \  return count;\n}\nint main() {\n    auto candidate = starts_one_ends;\n   \
    \ assert(candidate((1)) == (1));\n    assert(candidate((2)) == (18));\n    assert(candidate((3))\
    \ == (180));\n    assert(candidate((4)) == (1800));\n    assert(candidate((5))\
    \ == (18000));\n}\n"
  stdout: ''
  stderr: "tmp2oqitbp7: /tmp/tmp2oqitbp7.cpp:17: int main(): Assertion `candidate((2))\
    \ == (18)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ n, return the count of the numbers of n-digit\n// positive integers that start\
    \ or end with 1.\nlong starts_one_ends(long n) {\n    long count = 0;\n    long\
    \ cur = 1;\n    while (n > 0) {\n        if (n % 10 == 1) {\n            count++;\n\
    \        }\n        n /= 10;\n        cur *= 10;\n    }\n    return count;\n}\n\
    int main() {\n    auto candidate = starts_one_ends;\n    assert(candidate((1))\
    \ == (1));\n    assert(candidate((2)) == (18));\n    assert(candidate((3)) ==\
    \ (180));\n    assert(candidate((4)) == (1800));\n    assert(candidate((5)) ==\
    \ (18000));\n}\n"
  stdout: ''
  stderr: "tmp9rxhy438: /tmp/tmp9rxhy438.cpp:20: int main(): Assertion `candidate((2))\
    \ == (18)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ n, return the count of the numbers of n-digit\n// positive integers that start\
    \ or end with 1.\nlong starts_one_ends(long n) {\n    long count = 0;\n    long\
    \ x = 1;\n    while (n > 0) {\n        if (n % 10 == 1) {\n            count++;\n\
    \        }\n        n /= 10;\n        x *= 10;\n    }\n    return count;\n}\n\
    int main() {\n    auto candidate = starts_one_ends;\n    assert(candidate((1))\
    \ == (1));\n    assert(candidate((2)) == (18));\n    assert(candidate((3)) ==\
    \ (180));\n    assert(candidate((4)) == (1800));\n    assert(candidate((5)) ==\
    \ (18000));\n}\n"
  stdout: ''
  stderr: "tmpukntlmzq: /tmp/tmpukntlmzq.cpp:20: int main(): Assertion `candidate((2))\
    \ == (18)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ n, return the count of the numbers of n-digit\n// positive integers that start\
    \ or end with 1.\nlong starts_one_ends(long n) {\n    long count = 0;\n    long\
    \ i = 1;\n    while (i <= n) {\n        if (i % 10 == 1) {\n            count++;\n\
    \        }\n        i++;\n    }\n    return count;\n}\nint main() {\n    auto\
    \ candidate = starts_one_ends;\n    assert(candidate((1)) == (1));\n    assert(candidate((2))\
    \ == (18));\n    assert(candidate((3)) == (180));\n    assert(candidate((4)) ==\
    \ (1800));\n    assert(candidate((5)) == (18000));\n}\n"
  stdout: ''
  stderr: "tmppzmrldqb: /tmp/tmppzmrldqb.cpp:19: int main(): Assertion `candidate((2))\
    \ == (18)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ n, return the count of the numbers of n-digit\n// positive integers that start\
    \ or end with 1.\nlong starts_one_ends(long n) {\n    long count = 0;\n    long\
    \ start = 1;\n    long end = 1;\n    while (n > 0) {\n        long temp = n;\n\
    \        while (temp > 0) {\n            temp = temp / 10;\n        }\n      \
    \  if (temp == 1) {\n            count++;\n        }\n        temp = n;\n    \
    \    while (temp > 0) {\n            temp = temp / 10;\n        }\n        if\
    \ (temp == 1) {\n            end = end * 10;\n        }\n        temp = n;\n \
    \       while (temp > 0) {\n            temp = temp / 10;\n        }\n       \
    \ if (temp == 1) {\n            start = start * 10;\n        }\n        n = n\
    \ - 1;\n    }\n    return count;\n}\nint main() {\n    auto candidate = starts_one_ends;\n\
    \    assert(candidate((1)) == (1));\n    assert(candidate((2)) == (18));\n   \
    \ assert(candidate((3)) == (180));\n    assert(candidate((4)) == (1800));\n  \
    \  assert(candidate((5)) == (18000));\n}\n"
  stdout: ''
  stderr: "tmpfio81pnw: /tmp/tmpfio81pnw.cpp:37: int main(): Assertion `candidate((1))\
    \ == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ n, return the count of the numbers of n-digit\n// positive integers that start\
    \ or end with 1.\nlong starts_one_ends(long n) {\n    long count = 0;\n    long\
    \ start = 1;\n    long end = 1;\n    while (n != 0) {\n        if (n % 10 == 1)\
    \ {\n            count++;\n            if (start == 1) {\n                start\
    \ = n;\n            } else {\n                end = n;\n            }\n      \
    \  }\n        n /= 10;\n    }\n    return count;\n}\nint main() {\n    auto candidate\
    \ = starts_one_ends;\n    assert(candidate((1)) == (1));\n    assert(candidate((2))\
    \ == (18));\n    assert(candidate((3)) == (180));\n    assert(candidate((4)) ==\
    \ (1800));\n    assert(candidate((5)) == (18000));\n}\n"
  stdout: ''
  stderr: "tmp2w5nztyp: /tmp/tmp2w5nztyp.cpp:25: int main(): Assertion `candidate((2))\
    \ == (18)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ n, return the count of the numbers of n-digit\n// positive integers that start\
    \ or end with 1.\nlong starts_one_ends(long n) {\n    long count = 0;\n    long\
    \ start = 1;\n    long end = 1;\n    while (n > 0) {\n        if (n % 10 == 1)\
    \ {\n            count++;\n            end = end * 10;\n        } else {\n   \
    \         start = start * 10;\n        }\n        n = n / 10;\n    }\n    return\
    \ count;\n}\nint main() {\n    auto candidate = starts_one_ends;\n    assert(candidate((1))\
    \ == (1));\n    assert(candidate((2)) == (18));\n    assert(candidate((3)) ==\
    \ (180));\n    assert(candidate((4)) == (1800));\n    assert(candidate((5)) ==\
    \ (18000));\n}\n"
  stdout: ''
  stderr: "tmpvlq1n8fw: /tmp/tmpvlq1n8fw.cpp:23: int main(): Assertion `candidate((2))\
    \ == (18)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ n, return the count of the numbers of n-digit\n// positive integers that start\
    \ or end with 1.\nlong starts_one_ends(long n) {\n    long count = 0;\n    while\
    \ (n != 0) {\n        if (n % 10 == 1) {\n            count++;\n        }\n  \
    \      n /= 10;\n    }\n    return count;\n}\nint main() {\n    auto candidate\
    \ = starts_one_ends;\n    assert(candidate((1)) == (1));\n    assert(candidate((2))\
    \ == (18));\n    assert(candidate((3)) == (180));\n    assert(candidate((4)) ==\
    \ (1800));\n    assert(candidate((5)) == (18000));\n}\n"
  stdout: ''
  stderr: "tmpeftz_x79: /tmp/tmpeftz_x79.cpp:18: int main(): Assertion `candidate((2))\
    \ == (18)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ n, return the count of the numbers of n-digit\n// positive integers that start\
    \ or end with 1.\nlong starts_one_ends(long n) {\n    long count = 0;\n    long\
    \ i = 1;\n    while (i <= n) {\n        if (i % 10 == 1) {\n            count++;\n\
    \        }\n        i++;\n    }\n    return count;\n}\nint main() {\n    auto\
    \ candidate = starts_one_ends;\n    assert(candidate((1)) == (1));\n    assert(candidate((2))\
    \ == (18));\n    assert(candidate((3)) == (180));\n    assert(candidate((4)) ==\
    \ (1800));\n    assert(candidate((5)) == (18000));\n}\n"
  stdout: ''
  stderr: "tmpzanym0gw: /tmp/tmpzanym0gw.cpp:19: int main(): Assertion `candidate((2))\
    \ == (18)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ n, return the count of the numbers of n-digit\n// positive integers that start\
    \ or end with 1.\nlong starts_one_ends(long n) {\n    long count = 0;\n    long\
    \ i = 1;\n    while (i <= n) {\n        if (i % 10 == 1) {\n            count++;\n\
    \        }\n        i++;\n    }\n    return count;\n}\nint main() {\n    auto\
    \ candidate = starts_one_ends;\n    assert(candidate((1)) == (1));\n    assert(candidate((2))\
    \ == (18));\n    assert(candidate((3)) == (180));\n    assert(candidate((4)) ==\
    \ (1800));\n    assert(candidate((5)) == (18000));\n}\n"
  stdout: ''
  stderr: "tmpbig5qjrv: /tmp/tmpbig5qjrv.cpp:19: int main(): Assertion `candidate((2))\
    \ == (18)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ n, return the count of the numbers of n-digit\n// positive integers that start\
    \ or end with 1.\nlong starts_one_ends(long n) {\n    long count = 0;\n    long\
    \ start = 1;\n    long end = 1;\n    while (n >= end) {\n        end = end * 10;\n\
    \        count++;\n    }\n    while (start <= n) {\n        start = start * 10;\n\
    \        count++;\n    }\n    return count;\n}\nint main() {\n    auto candidate\
    \ = starts_one_ends;\n    assert(candidate((1)) == (1));\n    assert(candidate((2))\
    \ == (18));\n    assert(candidate((3)) == (180));\n    assert(candidate((4)) ==\
    \ (1800));\n    assert(candidate((5)) == (18000));\n}\n"
  stdout: ''
  stderr: "tmpge04uosn: /tmp/tmpge04uosn.cpp:21: int main(): Assertion `candidate((1))\
    \ == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ n, return the count of the numbers of n-digit\n// positive integers that start\
    \ or end with 1.\nlong starts_one_ends(long n) {\n    long count = 0;\n    long\
    \ start = 1;\n    long end = 1;\n    while (n > 0) {\n        long digit = n %\
    \ 10;\n        if (digit == 1) {\n            count++;\n            if (start\
    \ == 1) {\n                start = digit;\n            } else {\n            \
    \    end = digit;\n            }\n        }\n        n /= 10;\n    }\n    return\
    \ count;\n}\nint main() {\n    auto candidate = starts_one_ends;\n    assert(candidate((1))\
    \ == (1));\n    assert(candidate((2)) == (18));\n    assert(candidate((3)) ==\
    \ (180));\n    assert(candidate((4)) == (1800));\n    assert(candidate((5)) ==\
    \ (18000));\n}\n"
  stdout: ''
  stderr: "tmpzae7x6_m: /tmp/tmpzae7x6_m.cpp:26: int main(): Assertion `candidate((2))\
    \ == (18)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ n, return the count of the numbers of n-digit\n// positive integers that start\
    \ or end with 1.\nlong starts_one_ends(long n) {\n    long count = 0;\n    long\
    \ start = n;\n    long end = n;\n    while (start != 1) {\n        start /= 10;\n\
    \        end /= 10;\n        if (start == end) {\n            count++;\n     \
    \   }\n    }\n    return count;\n}\nint main() {\n    auto candidate = starts_one_ends;\n\
    \    assert(candidate((1)) == (1));\n    assert(candidate((2)) == (18));\n   \
    \ assert(candidate((3)) == (180));\n    assert(candidate((4)) == (1800));\n  \
    \  assert(candidate((5)) == (18000));\n}\n"
  stdout: ''
  stderr: "tmpjy8lkw_m: /tmp/tmpjy8lkw_m.cpp:20: int main(): Assertion `candidate((1))\
    \ == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ n, return the count of the numbers of n-digit\n// positive integers that start\
    \ or end with 1.\nlong starts_one_ends(long n) {\n    long count = 0;\n    long\
    \ start = 1;\n    long end = 1;\n    while (n != 0) {\n        if (n % 10 == 1)\
    \ {\n            count++;\n            end = end * 10;\n        }\n        n /=\
    \ 10;\n    }\n    if (start == end) {\n        count++;\n    }\n    return count;\n\
    }\nint main() {\n    auto candidate = starts_one_ends;\n    assert(candidate((1))\
    \ == (1));\n    assert(candidate((2)) == (18));\n    assert(candidate((3)) ==\
    \ (180));\n    assert(candidate((4)) == (1800));\n    assert(candidate((5)) ==\
    \ (18000));\n}\n"
  stdout: ''
  stderr: "tmp2krerfqu: /tmp/tmp2krerfqu.cpp:24: int main(): Assertion `candidate((2))\
    \ == (18)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ n, return the count of the numbers of n-digit\n// positive integers that start\
    \ or end with 1.\nlong starts_one_ends(long n) {\n    long count = 0;\n    while\
    \ (n > 0) {\n        if (n % 10 == 1) count++;\n        n /= 10;\n    }\n    return\
    \ count;\n}\nint main() {\n    auto candidate = starts_one_ends;\n    assert(candidate((1))\
    \ == (1));\n    assert(candidate((2)) == (18));\n    assert(candidate((3)) ==\
    \ (180));\n    assert(candidate((4)) == (1800));\n    assert(candidate((5)) ==\
    \ (18000));\n}\n"
  stdout: ''
  stderr: "tmpzydilpnf: /tmp/tmpzydilpnf.cpp:16: int main(): Assertion `candidate((2))\
    \ == (18)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ n, return the count of the numbers of n-digit\n// positive integers that start\
    \ or end with 1.\nlong starts_one_ends(long n) {\n    long count = 0;\n    long\
    \ i = 1;\n    while (i <= n) {\n        if (i % 10 == 1) {\n            count++;\n\
    \        }\n        i++;\n    }\n    return count;\n}\nint main() {\n    auto\
    \ candidate = starts_one_ends;\n    assert(candidate((1)) == (1));\n    assert(candidate((2))\
    \ == (18));\n    assert(candidate((3)) == (180));\n    assert(candidate((4)) ==\
    \ (1800));\n    assert(candidate((5)) == (18000));\n}\n"
  stdout: ''
  stderr: "tmpbgiyfe8y: /tmp/tmpbgiyfe8y.cpp:19: int main(): Assertion `candidate((2))\
    \ == (18)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ n, return the count of the numbers of n-digit\n// positive integers that start\
    \ or end with 1.\nlong starts_one_ends(long n) {\n    long count = 0;\n    long\
    \ start = 1;\n    long end = 1;\n    while (n != 0) {\n        if (n / 10 == 1)\
    \ {\n            count++;\n        }\n        n /= 10;\n    }\n    return count;\n\
    }\nint main() {\n    auto candidate = starts_one_ends;\n    assert(candidate((1))\
    \ == (1));\n    assert(candidate((2)) == (18));\n    assert(candidate((3)) ==\
    \ (180));\n    assert(candidate((4)) == (1800));\n    assert(candidate((5)) ==\
    \ (18000));\n}\n"
  stdout: ''
  stderr: "tmpd58dzc0d: /tmp/tmpd58dzc0d.cpp:19: int main(): Assertion `candidate((1))\
    \ == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ n, return the count of the numbers of n-digit\n// positive integers that start\
    \ or end with 1.\nlong starts_one_ends(long n) {\n    long count = 0;\n    long\
    \ start = 1;\n    long end = 1;\n    while (n >= end) {\n        end = end * 10;\n\
    \        count++;\n    }\n    while (start <= n) {\n        start = start * 10;\n\
    \        count++;\n    }\n    return count;\n}\nint main() {\n    auto candidate\
    \ = starts_one_ends;\n    assert(candidate((1)) == (1));\n    assert(candidate((2))\
    \ == (18));\n    assert(candidate((3)) == (180));\n    assert(candidate((4)) ==\
    \ (1800));\n    assert(candidate((5)) == (18000));\n}\n"
  stdout: ''
  stderr: "tmphhtwnhh3: /tmp/tmphhtwnhh3.cpp:21: int main(): Assertion `candidate((1))\
    \ == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ n, return the count of the numbers of n-digit\n// positive integers that start\
    \ or end with 1.\nlong starts_one_ends(long n) {\n    long count = 0;\n    while\
    \ (n > 0) {\n        if (n % 10 == 1) {\n            count++;\n        }\n   \
    \     n /= 10;\n    }\n    return count;\n}\nint main() {\n    auto candidate\
    \ = starts_one_ends;\n    assert(candidate((1)) == (1));\n    assert(candidate((2))\
    \ == (18));\n    assert(candidate((3)) == (180));\n    assert(candidate((4)) ==\
    \ (1800));\n    assert(candidate((5)) == (18000));\n}\n"
  stdout: ''
  stderr: "tmpouyvv987: /tmp/tmpouyvv987.cpp:18: int main(): Assertion `candidate((2))\
    \ == (18)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ n, return the count of the numbers of n-digit\n// positive integers that start\
    \ or end with 1.\nlong starts_one_ends(long n) {\n    long count = 0;\n    long\
    \ start = 1;\n    long end = 1;\n    while (n > 0) {\n        if (n % 10 == 1)\
    \ {\n            count++;\n            if (n == start) {\n                start\
    \ = n + 1;\n            }\n            if (n == end) {\n                end =\
    \ n + 1;\n            }\n        }\n        n /= 10;\n    }\n    return count;\n\
    }\nint main() {\n    auto candidate = starts_one_ends;\n    assert(candidate((1))\
    \ == (1));\n    assert(candidate((2)) == (18));\n    assert(candidate((3)) ==\
    \ (180));\n    assert(candidate((4)) == (1800));\n    assert(candidate((5)) ==\
    \ (18000));\n}\n"
  stdout: ''
  stderr: "tmp_wy7hx4g: /tmp/tmp_wy7hx4g.cpp:26: int main(): Assertion `candidate((2))\
    \ == (18)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ n, return the count of the numbers of n-digit\n// positive integers that start\
    \ or end with 1.\nlong starts_one_ends(long n) {\n    long count = 0;\n    long\
    \ start = 1;\n    long end = 1;\n    while (n > 0) {\n        if (n % 10 == 1)\
    \ {\n            count++;\n        }\n        end = end * 10;\n        n /= 10;\n\
    \    }\n    start = start * 10;\n    while (n > 0) {\n        if (n % 10 == 1)\
    \ {\n            count++;\n        }\n        start = start * 10;\n        n /=\
    \ 10;\n    }\n    return count;\n}\nint main() {\n    auto candidate = starts_one_ends;\n\
    \    assert(candidate((1)) == (1));\n    assert(candidate((2)) == (18));\n   \
    \ assert(candidate((3)) == (180));\n    assert(candidate((4)) == (1800));\n  \
    \  assert(candidate((5)) == (18000));\n}\n"
  stdout: ''
  stderr: "tmp66zlx5x_: /tmp/tmp66zlx5x_.cpp:29: int main(): Assertion `candidate((2))\
    \ == (18)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ n, return the count of the numbers of n-digit\n// positive integers that start\
    \ or end with 1.\nlong starts_one_ends(long n) {\n    long count = 0;\n    long\
    \ start = 1;\n    long end = 1;\n    while (n >= end) {\n        end = end * 10;\n\
    \        count++;\n    }\n    while (start <= n) {\n        start = start * 10;\n\
    \        count--;\n    }\n    return count;\n}\nint main() {\n    auto candidate\
    \ = starts_one_ends;\n    assert(candidate((1)) == (1));\n    assert(candidate((2))\
    \ == (18));\n    assert(candidate((3)) == (180));\n    assert(candidate((4)) ==\
    \ (1800));\n    assert(candidate((5)) == (18000));\n}\n"
  stdout: ''
  stderr: "tmphqmfbnhv: /tmp/tmphqmfbnhv.cpp:21: int main(): Assertion `candidate((1))\
    \ == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ n, return the count of the numbers of n-digit\n// positive integers that start\
    \ or end with 1.\nlong starts_one_ends(long n) {\n    long count = 0;\n    while\
    \ (n > 0) {\n        if (n % 10 == 1) {\n            count++;\n        }\n   \
    \     n /= 10;\n    }\n    return count;\n}\nint main() {\n    auto candidate\
    \ = starts_one_ends;\n    assert(candidate((1)) == (1));\n    assert(candidate((2))\
    \ == (18));\n    assert(candidate((3)) == (180));\n    assert(candidate((4)) ==\
    \ (1800));\n    assert(candidate((5)) == (18000));\n}\n"
  stdout: ''
  stderr: "tmpdmkqwehh: /tmp/tmpdmkqwehh.cpp:18: int main(): Assertion `candidate((2))\
    \ == (18)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ n, return the count of the numbers of n-digit\n// positive integers that start\
    \ or end with 1.\nlong starts_one_ends(long n) {\n    long count = 0;\n    long\
    \ cur = 1;\n    while (cur <= n) {\n        if (cur % 10 == 1) {\n           \
    \ count++;\n        }\n        cur *= 10;\n    }\n    return count;\n}\nint main()\
    \ {\n    auto candidate = starts_one_ends;\n    assert(candidate((1)) == (1));\n\
    \    assert(candidate((2)) == (18));\n    assert(candidate((3)) == (180));\n \
    \   assert(candidate((4)) == (1800));\n    assert(candidate((5)) == (18000));\n\
    }\n"
  stdout: ''
  stderr: "tmpqnbk2ux6: /tmp/tmpqnbk2ux6.cpp:19: int main(): Assertion `candidate((2))\
    \ == (18)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ n, return the count of the numbers of n-digit\n// positive integers that start\
    \ or end with 1.\nlong starts_one_ends(long n) {\n    long count = 0;\n    long\
    \ start = 1;\n    long end = 1;\n    while (n != 0) {\n        long temp = n %\
    \ 10;\n        if (temp == 1) {\n            count++;\n        }\n        end\
    \ = temp;\n        n = n / 10;\n    }\n    return count;\n}\nint main() {\n  \
    \  auto candidate = starts_one_ends;\n    assert(candidate((1)) == (1));\n   \
    \ assert(candidate((2)) == (18));\n    assert(candidate((3)) == (180));\n    assert(candidate((4))\
    \ == (1800));\n    assert(candidate((5)) == (18000));\n}\n"
  stdout: ''
  stderr: "tmpa1qktb_q: /tmp/tmpa1qktb_q.cpp:22: int main(): Assertion `candidate((2))\
    \ == (18)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ n, return the count of the numbers of n-digit\n// positive integers that start\
    \ or end with 1.\nlong starts_one_ends(long n) {\n    long count = 0;\n    while\
    \ (n > 0) {\n        if (n % 10 == 1) {\n            count++;\n        }\n   \
    \     n /= 10;\n    }\n    return count;\n}\nint main() {\n    auto candidate\
    \ = starts_one_ends;\n    assert(candidate((1)) == (1));\n    assert(candidate((2))\
    \ == (18));\n    assert(candidate((3)) == (180));\n    assert(candidate((4)) ==\
    \ (1800));\n    assert(candidate((5)) == (18000));\n}\n"
  stdout: ''
  stderr: "tmpl7j2zk2g: /tmp/tmpl7j2zk2g.cpp:18: int main(): Assertion `candidate((2))\
    \ == (18)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ n, return the count of the numbers of n-digit\n// positive integers that start\
    \ or end with 1.\nlong starts_one_ends(long n) {\n    long count = 0;\n    long\
    \ x = 1;\n    while (x != 0) {\n        if (n >= x) {\n            count++;\n\
    \        }\n        x /= 10;\n    }\n    return count;\n}\nint main() {\n    auto\
    \ candidate = starts_one_ends;\n    assert(candidate((1)) == (1));\n    assert(candidate((2))\
    \ == (18));\n    assert(candidate((3)) == (180));\n    assert(candidate((4)) ==\
    \ (1800));\n    assert(candidate((5)) == (18000));\n}\n"
  stdout: ''
  stderr: "tmpw026ux5o: /tmp/tmpw026ux5o.cpp:19: int main(): Assertion `candidate((2))\
    \ == (18)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ n, return the count of the numbers of n-digit\n// positive integers that start\
    \ or end with 1.\nlong starts_one_ends(long n) {\n    long count = 0;\n    long\
    \ x = 1;\n    while (x != 0) {\n        if (n >= x) {\n            count++;\n\
    \        }\n        x /= 10;\n    }\n    return count;\n}\nint main() {\n    auto\
    \ candidate = starts_one_ends;\n    assert(candidate((1)) == (1));\n    assert(candidate((2))\
    \ == (18));\n    assert(candidate((3)) == (180));\n    assert(candidate((4)) ==\
    \ (1800));\n    assert(candidate((5)) == (18000));\n}\n"
  stdout: ''
  stderr: "tmpqr2zjns3: /tmp/tmpqr2zjns3.cpp:19: int main(): Assertion `candidate((2))\
    \ == (18)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ n, return the count of the numbers of n-digit\n// positive integers that start\
    \ or end with 1.\nlong starts_one_ends(long n) {\n    long count = 0;\n    long\
    \ start = 1;\n    long end = 1;\n    while (n >= end) {\n        end = end * 10;\n\
    \        count += 1;\n    }\n    while (start <= n) {\n        start = start *\
    \ 10;\n        count += 1;\n    }\n    return count;\n}\nint main() {\n    auto\
    \ candidate = starts_one_ends;\n    assert(candidate((1)) == (1));\n    assert(candidate((2))\
    \ == (18));\n    assert(candidate((3)) == (180));\n    assert(candidate((4)) ==\
    \ (1800));\n    assert(candidate((5)) == (18000));\n}\n"
  stdout: ''
  stderr: "tmp0e1skq57: /tmp/tmp0e1skq57.cpp:21: int main(): Assertion `candidate((1))\
    \ == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ n, return the count of the numbers of n-digit\n// positive integers that start\
    \ or end with 1.\nlong starts_one_ends(long n) {\n    long count = 0;\n    long\
    \ start = 1, end = n;\n    while (start <= end) {\n        if (n % 10 == 1) {\n\
    \            count++;\n        }\n        start *= 10;\n        end /= 10;\n \
    \   }\n    return count;\n}\nint main() {\n    auto candidate = starts_one_ends;\n\
    \    assert(candidate((1)) == (1));\n    assert(candidate((2)) == (18));\n   \
    \ assert(candidate((3)) == (180));\n    assert(candidate((4)) == (1800));\n  \
    \  assert(candidate((5)) == (18000));\n}\n"
  stdout: ''
  stderr: "tmp89z2zzot: /tmp/tmp89z2zzot.cpp:20: int main(): Assertion `candidate((2))\
    \ == (18)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ n, return the count of the numbers of n-digit\n// positive integers that start\
    \ or end with 1.\nlong starts_one_ends(long n) {\n    long count = 0;\n    long\
    \ i = 1;\n    while (i <= n) {\n        if (i % 10 == 1) {\n            count++;\n\
    \        }\n        i++;\n    }\n    return count;\n}\nint main() {\n    auto\
    \ candidate = starts_one_ends;\n    assert(candidate((1)) == (1));\n    assert(candidate((2))\
    \ == (18));\n    assert(candidate((3)) == (180));\n    assert(candidate((4)) ==\
    \ (1800));\n    assert(candidate((5)) == (18000));\n}\n"
  stdout: ''
  stderr: "tmpp322x73f: /tmp/tmpp322x73f.cpp:19: int main(): Assertion `candidate((2))\
    \ == (18)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ n, return the count of the numbers of n-digit\n// positive integers that start\
    \ or end with 1.\nlong starts_one_ends(long n) {\n    long count = 0;\n    long\
    \ limit = pow(10, n);\n    long start = 1;\n    long end = 1;\n    while (start\
    \ <= limit) {\n        if (start % 10 == 1 && end % 10 != 1) {\n            count++;\n\
    \        }\n        if (start % 10 != 1 && end % 10 == 1) {\n            count++;\n\
    \        }\n        start = start * 10;\n        end = end * 10;\n    }\n    return\
    \ count;\n}\nint main() {\n    auto candidate = starts_one_ends;\n    assert(candidate((1))\
    \ == (1));\n    assert(candidate((2)) == (18));\n    assert(candidate((3)) ==\
    \ (180));\n    assert(candidate((4)) == (1800));\n    assert(candidate((5)) ==\
    \ (18000));\n}\n"
  stdout: ''
  stderr: "tmpgg_5rh8x: /tmp/tmpgg_5rh8x.cpp:24: int main(): Assertion `candidate((1))\
    \ == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ n, return the count of the numbers of n-digit\n// positive integers that start\
    \ or end with 1.\nlong starts_one_ends(long n) {\n    long count = 0;\n    while\
    \ (n != 0) {\n        if (n % 10 == 1) {\n            ++count;\n        }\n  \
    \      n /= 10;\n    }\n    return count;\n}\nint main() {\n    auto candidate\
    \ = starts_one_ends;\n    assert(candidate((1)) == (1));\n    assert(candidate((2))\
    \ == (18));\n    assert(candidate((3)) == (180));\n    assert(candidate((4)) ==\
    \ (1800));\n    assert(candidate((5)) == (18000));\n}\n"
  stdout: ''
  stderr: "tmpoovntg2x: /tmp/tmpoovntg2x.cpp:18: int main(): Assertion `candidate((2))\
    \ == (18)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ n, return the count of the numbers of n-digit\n// positive integers that start\
    \ or end with 1.\nlong starts_one_ends(long n) {\n    long count = 0;\n    long\
    \ i = 1;\n    long remain = n;\n    while (remain > 0) {\n        if (remain %\
    \ 10 == 1) {\n            count++;\n        }\n        remain /= 10;\n    }\n\
    \    return count;\n}\nint main() {\n    auto candidate = starts_one_ends;\n \
    \   assert(candidate((1)) == (1));\n    assert(candidate((2)) == (18));\n    assert(candidate((3))\
    \ == (180));\n    assert(candidate((4)) == (1800));\n    assert(candidate((5))\
    \ == (18000));\n}\n"
  stdout: ''
  stderr: "tmp2vnuozvp: /tmp/tmp2vnuozvp.cpp:20: int main(): Assertion `candidate((2))\
    \ == (18)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ n, return the count of the numbers of n-digit\n// positive integers that start\
    \ or end with 1.\nlong starts_one_ends(long n) {\n    long count = 0;\n    while\
    \ (n > 0) {\n        if (n % 10 == 1) {\n            count++;\n        }\n   \
    \     n /= 10;\n    }\n    return count;\n}\nint main() {\n    auto candidate\
    \ = starts_one_ends;\n    assert(candidate((1)) == (1));\n    assert(candidate((2))\
    \ == (18));\n    assert(candidate((3)) == (180));\n    assert(candidate((4)) ==\
    \ (1800));\n    assert(candidate((5)) == (18000));\n}\n"
  stdout: ''
  stderr: "tmpgc1gnbz1: /tmp/tmpgc1gnbz1.cpp:18: int main(): Assertion `candidate((2))\
    \ == (18)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ n, return the count of the numbers of n-digit\n// positive integers that start\
    \ or end with 1.\nlong starts_one_ends(long n) {\n    long count = 0;\n    long\
    \ remain = n;\n    while (remain > 0) {\n        if (remain % 10 == 1) {\n   \
    \         count++;\n        }\n        remain /= 10;\n    }\n    return count;\n\
    }\nint main() {\n    auto candidate = starts_one_ends;\n    assert(candidate((1))\
    \ == (1));\n    assert(candidate((2)) == (18));\n    assert(candidate((3)) ==\
    \ (180));\n    assert(candidate((4)) == (1800));\n    assert(candidate((5)) ==\
    \ (18000));\n}\n"
  stdout: ''
  stderr: "tmpguksaasg: /tmp/tmpguksaasg.cpp:19: int main(): Assertion `candidate((2))\
    \ == (18)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ n, return the count of the numbers of n-digit\n// positive integers that start\
    \ or end with 1.\nlong starts_one_ends(long n) {\n    long count = 0;\n    long\
    \ temp;\n    temp = n;\n    while (temp != 0) {\n        if (temp % 10 == 1) {\n\
    \            count++;\n        }\n        temp /= 10;\n    }\n    return count;\n\
    }\nint main() {\n    auto candidate = starts_one_ends;\n    assert(candidate((1))\
    \ == (1));\n    assert(candidate((2)) == (18));\n    assert(candidate((3)) ==\
    \ (180));\n    assert(candidate((4)) == (1800));\n    assert(candidate((5)) ==\
    \ (18000));\n}\n"
  stdout: ''
  stderr: "tmpo9kwjd5u: /tmp/tmpo9kwjd5u.cpp:20: int main(): Assertion `candidate((2))\
    \ == (18)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ n, return the count of the numbers of n-digit\n// positive integers that start\
    \ or end with 1.\nlong starts_one_ends(long n) {\n    long count = 0;\n    long\
    \ start = 1;\n    long end = 1;\n    while (n > 0) {\n        if (n % 10 == 1)\
    \ {\n            count++;\n        }\n        n /= 10;\n    }\n    return count;\n\
    }\nint main() {\n    auto candidate = starts_one_ends;\n    assert(candidate((1))\
    \ == (1));\n    assert(candidate((2)) == (18));\n    assert(candidate((3)) ==\
    \ (180));\n    assert(candidate((4)) == (1800));\n    assert(candidate((5)) ==\
    \ (18000));\n}\n"
  stdout: ''
  stderr: "tmpvl2inljp: /tmp/tmpvl2inljp.cpp:20: int main(): Assertion `candidate((2))\
    \ == (18)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ n, return the count of the numbers of n-digit\n// positive integers that start\
    \ or end with 1.\nlong starts_one_ends(long n) {\n    long count = 0;\n    long\
    \ start = 1;\n    long end = 1;\n    while (n > 0) {\n        long temp = n;\n\
    \        while (temp > 0) {\n            temp = temp / 10;\n        }\n      \
    \  if (temp == 1) {\n            count++;\n        }\n        temp = n;\n    \
    \    while (temp > 0) {\n            temp = temp / 10;\n        }\n        if\
    \ (temp == end) {\n            count++;\n        }\n        end = end * 10;\n\
    \    }\n    return count;\n}\nint main() {\n    auto candidate = starts_one_ends;\n\
    \    assert(candidate((1)) == (1));\n    assert(candidate((2)) == (18));\n   \
    \ assert(candidate((3)) == (180));\n    assert(candidate((4)) == (1800));\n  \
    \  assert(candidate((5)) == (18000));\n}\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ n, return the count of the numbers of n-digit\n// positive integers that start\
    \ or end with 1.\nlong starts_one_ends(long n) {\n    long count = 0;\n    long\
    \ start = 1;\n    long end = 1;\n    while (n != 0) {\n        if (n % 10 == 1)\
    \ {\n            count++;\n            if (n == start) {\n                start\
    \ = start + 1;\n            }\n            if (n == end) {\n                end\
    \ = end + 1;\n            }\n        }\n        n = n / 10;\n    }\n    return\
    \ count;\n}\nint main() {\n    auto candidate = starts_one_ends;\n    assert(candidate((1))\
    \ == (1));\n    assert(candidate((2)) == (18));\n    assert(candidate((3)) ==\
    \ (180));\n    assert(candidate((4)) == (1800));\n    assert(candidate((5)) ==\
    \ (18000));\n}\n"
  stdout: ''
  stderr: "tmp2c5zohq7: /tmp/tmp2c5zohq7.cpp:26: int main(): Assertion `candidate((2))\
    \ == (18)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ n, return the count of the numbers of n-digit\n// positive integers that start\
    \ or end with 1.\nlong starts_one_ends(long n) {\n    long count = 0;\n    long\
    \ start = 1;\n    long end = 1;\n    while (n > 0) {\n        if (n % 10 == 1)\
    \ {\n            count++;\n            end = end * 10;\n        } else {\n   \
    \         start = start * 10;\n        }\n        n = n / 10;\n    }\n    return\
    \ count;\n}\nint main() {\n    auto candidate = starts_one_ends;\n    assert(candidate((1))\
    \ == (1));\n    assert(candidate((2)) == (18));\n    assert(candidate((3)) ==\
    \ (180));\n    assert(candidate((4)) == (1800));\n    assert(candidate((5)) ==\
    \ (18000));\n}\n"
  stdout: ''
  stderr: "tmpjphhvr5i: /tmp/tmpjphhvr5i.cpp:23: int main(): Assertion `candidate((2))\
    \ == (18)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ n, return the count of the numbers of n-digit\n// positive integers that start\
    \ or end with 1.\nlong starts_one_ends(long n) {\n    long count = 0;\n    long\
    \ cur = 1;\n    while (cur <= n) {\n        if (cur % 10 == 1) {\n           \
    \ count++;\n        }\n        cur *= 10;\n    }\n    return count;\n}\nint main()\
    \ {\n    auto candidate = starts_one_ends;\n    assert(candidate((1)) == (1));\n\
    \    assert(candidate((2)) == (18));\n    assert(candidate((3)) == (180));\n \
    \   assert(candidate((4)) == (1800));\n    assert(candidate((5)) == (18000));\n\
    }\n"
  stdout: ''
  stderr: "tmpjwxz8mba: /tmp/tmpjwxz8mba.cpp:19: int main(): Assertion `candidate((2))\
    \ == (18)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ n, return the count of the numbers of n-digit\n// positive integers that start\
    \ or end with 1.\nlong starts_one_ends(long n) {\n    long count = 0;\n    long\
    \ start = 1;\n    long end = 1;\n    while (n > 0) {\n        if (n % 10 == 1)\
    \ {\n            count++;\n        }\n        n /= 10;\n    }\n    while (n >\
    \ 0) {\n        if (n % 10 == 0) {\n            count--;\n        }\n        n\
    \ /= 10;\n    }\n    return count;\n}\nint main() {\n    auto candidate = starts_one_ends;\n\
    \    assert(candidate((1)) == (1));\n    assert(candidate((2)) == (18));\n   \
    \ assert(candidate((3)) == (180));\n    assert(candidate((4)) == (1800));\n  \
    \  assert(candidate((5)) == (18000));\n}\n"
  stdout: ''
  stderr: "tmpk0guaujf: /tmp/tmpk0guaujf.cpp:26: int main(): Assertion `candidate((2))\
    \ == (18)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ n, return the count of the numbers of n-digit\n// positive integers that start\
    \ or end with 1.\nlong starts_one_ends(long n) {\n    long count = 0;\n    long\
    \ start = 1;\n    long end = 1;\n    while (n > 0) {\n        if (n % 10 == 1)\
    \ {\n            count++;\n        }\n        n /= 10;\n    }\n    if (n == 0)\
    \ {\n        return count;\n    }\n    while (n > 0) {\n        if (n % 10 ==\
    \ 1) {\n            count++;\n        }\n        n /= 10;\n    }\n    return count;\n\
    }\nint main() {\n    auto candidate = starts_one_ends;\n    assert(candidate((1))\
    \ == (1));\n    assert(candidate((2)) == (18));\n    assert(candidate((3)) ==\
    \ (180));\n    assert(candidate((4)) == (1800));\n    assert(candidate((5)) ==\
    \ (18000));\n}\n"
  stdout: ''
  stderr: "tmp9hh7gkjt: /tmp/tmp9hh7gkjt.cpp:29: int main(): Assertion `candidate((2))\
    \ == (18)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ n, return the count of the numbers of n-digit\n// positive integers that start\
    \ or end with 1.\nlong starts_one_ends(long n) {\n    long count = 0;\n    long\
    \ start = 1;\n    long end = 1;\n    while (n > 0) {\n        if (n % 10 == 1)\
    \ {\n            count++;\n        }\n        end = end * 10;\n        n /= 10;\n\
    \    }\n    while (start <= n) {\n        if (n % 10 == 1) {\n            count++;\n\
    \        }\n        start = start * 10;\n        n /= 10;\n    }\n    return count;\n\
    }\nint main() {\n    auto candidate = starts_one_ends;\n    assert(candidate((1))\
    \ == (1));\n    assert(candidate((2)) == (18));\n    assert(candidate((3)) ==\
    \ (180));\n    assert(candidate((4)) == (1800));\n    assert(candidate((5)) ==\
    \ (18000));\n}\n"
  stdout: ''
  stderr: "tmp5p14os97: /tmp/tmp5p14os97.cpp:28: int main(): Assertion `candidate((2))\
    \ == (18)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ n, return the count of the numbers of n-digit\n// positive integers that start\
    \ or end with 1.\nlong starts_one_ends(long n) {\n    long count = 0;\n    long\
    \ start = 1;\n    long end = 1;\n    while (n != 0) {\n        end = n % 10;\n\
    \        if (end == 1) {\n            count++;\n        }\n        n = n / 10;\n\
    \    }\n    return count;\n}\nint main() {\n    auto candidate = starts_one_ends;\n\
    \    assert(candidate((1)) == (1));\n    assert(candidate((2)) == (18));\n   \
    \ assert(candidate((3)) == (180));\n    assert(candidate((4)) == (1800));\n  \
    \  assert(candidate((5)) == (18000));\n}\n"
  stdout: ''
  stderr: "tmp8ielpv_s: /tmp/tmp8ielpv_s.cpp:21: int main(): Assertion `candidate((2))\
    \ == (18)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ n, return the count of the numbers of n-digit\n// positive integers that start\
    \ or end with 1.\nlong starts_one_ends(long n) {\n    long count = 0;\n    long\
    \ start = 1;\n    long end = 1;\n    long i = 2;\n    while (i < n) {\n      \
    \  if (n % i == 0) {\n            start = i;\n            end = n;\n        }\n\
    \        i += 2;\n    }\n    long mid = n / 2;\n    while (start < end) {\n  \
    \      if (mid % 2 == 0) {\n            count += 1;\n        }\n        mid /=\
    \ 2;\n    }\n    return count;\n}\nint main() {\n    auto candidate = starts_one_ends;\n\
    \    assert(candidate((1)) == (1));\n    assert(candidate((2)) == (18));\n   \
    \ assert(candidate((3)) == (180));\n    assert(candidate((4)) == (1800));\n  \
    \  assert(candidate((5)) == (18000));\n}\n"
  stdout: ''
  stderr: "tmpw9kspclz: /tmp/tmpw9kspclz.cpp:28: int main(): Assertion `candidate((1))\
    \ == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ n, return the count of the numbers of n-digit\n// positive integers that start\
    \ or end with 1.\nlong starts_one_ends(long n) {\n    long count = 0;\n    long\
    \ start = 1;\n    long end = 1;\n    while (n > 0) {\n        long digit = n %\
    \ 10;\n        if (digit == 1) {\n            count++;\n            if (start\
    \ == 1) {\n                start = digit;\n            } else {\n            \
    \    end = digit;\n            }\n        }\n        n = n / 10;\n    }\n    return\
    \ count;\n}\nint main() {\n    auto candidate = starts_one_ends;\n    assert(candidate((1))\
    \ == (1));\n    assert(candidate((2)) == (18));\n    assert(candidate((3)) ==\
    \ (180));\n    assert(candidate((4)) == (1800));\n    assert(candidate((5)) ==\
    \ (18000));\n}\n"
  stdout: ''
  stderr: "tmpcpcw_m_h: /tmp/tmpcpcw_m_h.cpp:26: int main(): Assertion `candidate((2))\
    \ == (18)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ n, return the count of the numbers of n-digit\n// positive integers that start\
    \ or end with 1.\nlong starts_one_ends(long n) {\n    long count = 0;\n    long\
    \ start = 1;\n    long end = 1;\n    while (n != 0) {\n        if (n / 10 == 1)\
    \ {\n            count++;\n        }\n        end = end * 10;\n        n /= 10;\n\
    \    }\n    return count;\n}\nint main() {\n    auto candidate = starts_one_ends;\n\
    \    assert(candidate((1)) == (1));\n    assert(candidate((2)) == (18));\n   \
    \ assert(candidate((3)) == (180));\n    assert(candidate((4)) == (1800));\n  \
    \  assert(candidate((5)) == (18000));\n}\n"
  stdout: ''
  stderr: "tmp63bny7kv: /tmp/tmp63bny7kv.cpp:20: int main(): Assertion `candidate((1))\
    \ == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ n, return the count of the numbers of n-digit\n// positive integers that start\
    \ or end with 1.\nlong starts_one_ends(long n) {\n    long count = 0;\n    while\
    \ (n > 0) {\n        if (n % 10 == 1) {\n            count++;\n        }\n   \
    \     n /= 10;\n    }\n    return count;\n}\nint main() {\n    auto candidate\
    \ = starts_one_ends;\n    assert(candidate((1)) == (1));\n    assert(candidate((2))\
    \ == (18));\n    assert(candidate((3)) == (180));\n    assert(candidate((4)) ==\
    \ (1800));\n    assert(candidate((5)) == (18000));\n}\n"
  stdout: ''
  stderr: "tmp_ol7sscn: /tmp/tmp_ol7sscn.cpp:18: int main(): Assertion `candidate((2))\
    \ == (18)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ n, return the count of the numbers of n-digit\n// positive integers that start\
    \ or end with 1.\nlong starts_one_ends(long n) {\n    long count = 0;\n    long\
    \ limit = pow(10, n);\n    long start = 1;\n    while (start <= limit) {\n   \
    \     if (start % 10 == 1) {\n            count++;\n        }\n        start *=\
    \ 10;\n    }\n    return count;\n}\nint main() {\n    auto candidate = starts_one_ends;\n\
    \    assert(candidate((1)) == (1));\n    assert(candidate((2)) == (18));\n   \
    \ assert(candidate((3)) == (180));\n    assert(candidate((4)) == (1800));\n  \
    \  assert(candidate((5)) == (18000));\n}\n"
  stdout: ''
  stderr: "tmpg8rdas8g: /tmp/tmpg8rdas8g.cpp:20: int main(): Assertion `candidate((2))\
    \ == (18)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ n, return the count of the numbers of n-digit\n// positive integers that start\
    \ or end with 1.\nlong starts_one_ends(long n) {\n    long count = 0;\n    long\
    \ start = 1;\n    long end = 1;\n    while (n > 0) {\n        if (n % 10 == 1)\
    \ {\n            count++;\n            if (n == start) {\n                start\
    \ = n + 1;\n            }\n            if (n == end) {\n                end =\
    \ n + 1;\n            }\n        }\n        n /= 10;\n    }\n    return count;\n\
    }\nint main() {\n    auto candidate = starts_one_ends;\n    assert(candidate((1))\
    \ == (1));\n    assert(candidate((2)) == (18));\n    assert(candidate((3)) ==\
    \ (180));\n    assert(candidate((4)) == (1800));\n    assert(candidate((5)) ==\
    \ (18000));\n}\n"
  stdout: ''
  stderr: "tmporr4j2of: /tmp/tmporr4j2of.cpp:26: int main(): Assertion `candidate((2))\
    \ == (18)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ n, return the count of the numbers of n-digit\n// positive integers that start\
    \ or end with 1.\nlong starts_one_ends(long n) {\n    long count = 0;\n    long\
    \ cur = 1;\n    while (cur <= n) {\n        if (cur % 10 == 1) {\n           \
    \ count++;\n        }\n        cur *= 10;\n    }\n    return count;\n}\nint main()\
    \ {\n    auto candidate = starts_one_ends;\n    assert(candidate((1)) == (1));\n\
    \    assert(candidate((2)) == (18));\n    assert(candidate((3)) == (180));\n \
    \   assert(candidate((4)) == (1800));\n    assert(candidate((5)) == (18000));\n\
    }\n"
  stdout: ''
  stderr: "tmphvzuwf7h: /tmp/tmphvzuwf7h.cpp:19: int main(): Assertion `candidate((2))\
    \ == (18)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ n, return the count of the numbers of n-digit\n// positive integers that start\
    \ or end with 1.\nlong starts_one_ends(long n) {\n    long count = 0;\n    long\
    \ start = 1;\n    long end = 1;\n    while (n > 0) {\n        if (n % 10 == 1)\
    \ {\n            count++;\n            end = end * 10 + 1;\n        } else {\n\
    \            start = start * 10 + 1;\n        }\n        n = n / 10;\n    }\n\
    \    return count;\n}\nint main() {\n    auto candidate = starts_one_ends;\n \
    \   assert(candidate((1)) == (1));\n    assert(candidate((2)) == (18));\n    assert(candidate((3))\
    \ == (180));\n    assert(candidate((4)) == (1800));\n    assert(candidate((5))\
    \ == (18000));\n}\n"
  stdout: ''
  stderr: "tmpgr3wpq7u: /tmp/tmpgr3wpq7u.cpp:23: int main(): Assertion `candidate((2))\
    \ == (18)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ n, return the count of the numbers of n-digit\n// positive integers that start\
    \ or end with 1.\nlong starts_one_ends(long n) {\n    long count = 0;\n    long\
    \ i = 1;\n    while (i <= n) {\n        if (i % 10 == 1) {\n            count++;\n\
    \        }\n        i++;\n    }\n    return count;\n}\nint main() {\n    auto\
    \ candidate = starts_one_ends;\n    assert(candidate((1)) == (1));\n    assert(candidate((2))\
    \ == (18));\n    assert(candidate((3)) == (180));\n    assert(candidate((4)) ==\
    \ (1800));\n    assert(candidate((5)) == (18000));\n}\n"
  stdout: ''
  stderr: "tmpwomk159f: /tmp/tmpwomk159f.cpp:19: int main(): Assertion `candidate((2))\
    \ == (18)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ n, return the count of the numbers of n-digit\n// positive integers that start\
    \ or end with 1.\nlong starts_one_ends(long n) {\n    long count = 0;\n    long\
    \ curr = n;\n    while (curr != 0) {\n        if (curr % 10 == 1) {\n        \
    \    count++;\n        }\n        curr = (curr / 10) - 1;\n    }\n    return count;\n\
    }\nint main() {\n    auto candidate = starts_one_ends;\n    assert(candidate((1))\
    \ == (1));\n    assert(candidate((2)) == (18));\n    assert(candidate((3)) ==\
    \ (180));\n    assert(candidate((4)) == (1800));\n    assert(candidate((5)) ==\
    \ (18000));\n}\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ n, return the count of the numbers of n-digit\n// positive integers that start\
    \ or end with 1.\nlong starts_one_ends(long n) {\n    long count = 0;\n    long\
    \ start = 1;\n    long end = 1;\n    while (n >= 1) {\n        long temp = n;\n\
    \        while (temp > 0) {\n            temp = temp / 10;\n        }\n      \
    \  long temp = temp * start;\n        if (temp == end) {\n            count++;\n\
    \        }\n        start = end;\n        end = temp;\n    }\n    return count;\n\
    }\nint main() {\n    auto candidate = starts_one_ends;\n    assert(candidate((1))\
    \ == (1));\n    assert(candidate((2)) == (18));\n    assert(candidate((3)) ==\
    \ (180));\n    assert(candidate((4)) == (1800));\n    assert(candidate((5)) ==\
    \ (18000));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp1y018ef6.cpp: In function \u2018long int starts_one_ends(long int)\u2019\
    :\n/tmp/tmp1y018ef6.cpp:14:14: error: redeclaration of \u2018long int temp\u2019\
    \n   14 |         long temp = temp * start;\n      |              ^~~~\n/tmp/tmp1y018ef6.cpp:10:14:\
    \ note: \u2018long int temp\u2019 previously declared here\n   10 |         long\
    \ temp = n;\n      |              ^~~~\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ n, return the count of the numbers of n-digit\n// positive integers that start\
    \ or end with 1.\nlong starts_one_ends(long n) {\n    long count = 0;\n    long\
    \ limit = n;\n    long curr = 1;\n    while (curr < limit) {\n        if (curr\
    \ == 1) {\n            count++;\n        }\n        curr *= 10;\n    }\n    return\
    \ count;\n}\nint main() {\n    auto candidate = starts_one_ends;\n    assert(candidate((1))\
    \ == (1));\n    assert(candidate((2)) == (18));\n    assert(candidate((3)) ==\
    \ (180));\n    assert(candidate((4)) == (1800));\n    assert(candidate((5)) ==\
    \ (18000));\n}\n"
  stdout: ''
  stderr: "tmp44gm4gvo: /tmp/tmp44gm4gvo.cpp:19: int main(): Assertion `candidate((1))\
    \ == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ n, return the count of the numbers of n-digit\n// positive integers that start\
    \ or end with 1.\nlong starts_one_ends(long n) {\n    long count = 0;\n    long\
    \ start = 1;\n    long end = 1;\n    long i = 1;\n    while (i <= n) {\n     \
    \   if (i % 10 == 1) {\n            start = i;\n        }\n        if (i % 10\
    \ == -1) {\n            end = i;\n        }\n        i++;\n    }\n    count =\
    \ (end - start) + 1;\n    return count;\n}\nint main() {\n    auto candidate =\
    \ starts_one_ends;\n    assert(candidate((1)) == (1));\n    assert(candidate((2))\
    \ == (18));\n    assert(candidate((3)) == (180));\n    assert(candidate((4)) ==\
    \ (1800));\n    assert(candidate((5)) == (18000));\n}\n"
  stdout: ''
  stderr: "tmpig3fb6rr: /tmp/tmpig3fb6rr.cpp:25: int main(): Assertion `candidate((2))\
    \ == (18)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ n, return the count of the numbers of n-digit\n// positive integers that start\
    \ or end with 1.\nlong starts_one_ends(long n) {\n    long count = 0;\n    long\
    \ remain = n;\n    while (remain > 0) {\n        remain = remain/10;\n       \
    \ count++;\n    }\n    return count;\n}\nint main() {\n    auto candidate = starts_one_ends;\n\
    \    assert(candidate((1)) == (1));\n    assert(candidate((2)) == (18));\n   \
    \ assert(candidate((3)) == (180));\n    assert(candidate((4)) == (1800));\n  \
    \  assert(candidate((5)) == (18000));\n}\n"
  stdout: ''
  stderr: "tmpapat_iaa: /tmp/tmpapat_iaa.cpp:17: int main(): Assertion `candidate((2))\
    \ == (18)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ n, return the count of the numbers of n-digit\n// positive integers that start\
    \ or end with 1.\nlong starts_one_ends(long n) {\n    long count = 0;\n    long\
    \ cur = 1;\n    while (cur <= n) {\n        if (cur % 10 == 1) {\n           \
    \ count++;\n        }\n        cur *= 10;\n    }\n    return count;\n}\nint main()\
    \ {\n    auto candidate = starts_one_ends;\n    assert(candidate((1)) == (1));\n\
    \    assert(candidate((2)) == (18));\n    assert(candidate((3)) == (180));\n \
    \   assert(candidate((4)) == (1800));\n    assert(candidate((5)) == (18000));\n\
    }\n"
  stdout: ''
  stderr: "tmpnasiv9fq: /tmp/tmpnasiv9fq.cpp:19: int main(): Assertion `candidate((2))\
    \ == (18)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ n, return the count of the numbers of n-digit\n// positive integers that start\
    \ or end with 1.\nlong starts_one_ends(long n) {\n    long count = 0;\n    long\
    \ i = 1;\n    while (i <= n) {\n        if (i % 10 == 1) {\n            count++;\n\
    \        }\n        i++;\n    }\n    return count;\n}\nint main() {\n    auto\
    \ candidate = starts_one_ends;\n    assert(candidate((1)) == (1));\n    assert(candidate((2))\
    \ == (18));\n    assert(candidate((3)) == (180));\n    assert(candidate((4)) ==\
    \ (1800));\n    assert(candidate((5)) == (18000));\n}\n"
  stdout: ''
  stderr: "tmpamjsymra: /tmp/tmpamjsymra.cpp:19: int main(): Assertion `candidate((2))\
    \ == (18)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ n, return the count of the numbers of n-digit\n// positive integers that start\
    \ or end with 1.\nlong starts_one_ends(long n) {\n    long count = 0;\n    while\
    \ (n > 0) {\n        if (n % 10 == 1) {\n            count++;\n        }\n   \
    \     n /= 10;\n    }\n    return count;\n}\nint main() {\n    auto candidate\
    \ = starts_one_ends;\n    assert(candidate((1)) == (1));\n    assert(candidate((2))\
    \ == (18));\n    assert(candidate((3)) == (180));\n    assert(candidate((4)) ==\
    \ (1800));\n    assert(candidate((5)) == (18000));\n}\n"
  stdout: ''
  stderr: "tmp_gzxev50: /tmp/tmp_gzxev50.cpp:18: int main(): Assertion `candidate((2))\
    \ == (18)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ n, return the count of the numbers of n-digit\n// positive integers that start\
    \ or end with 1.\nlong starts_one_ends(long n) {\n    long count = 0;\n    long\
    \ i = 1;\n    while (i <= n) {\n        if (i % 10 == 1) {\n            count++;\n\
    \        }\n        i++;\n    }\n    return count;\n}\nint main() {\n    auto\
    \ candidate = starts_one_ends;\n    assert(candidate((1)) == (1));\n    assert(candidate((2))\
    \ == (18));\n    assert(candidate((3)) == (180));\n    assert(candidate((4)) ==\
    \ (1800));\n    assert(candidate((5)) == (18000));\n}\n"
  stdout: ''
  stderr: "tmpdase_l5u: /tmp/tmpdase_l5u.cpp:19: int main(): Assertion `candidate((2))\
    \ == (18)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ n, return the count of the numbers of n-digit\n// positive integers that start\
    \ or end with 1.\nlong starts_one_ends(long n) {\n    long count = 0;\n    long\
    \ start = 1;\n    long end = 1;\n    while (n >= end) {\n        end = end * 10;\n\
    \        count++;\n    }\n    while (start <= n) {\n        start = start * 10;\n\
    \        count--;\n    }\n    return count;\n}\nint main() {\n    auto candidate\
    \ = starts_one_ends;\n    assert(candidate((1)) == (1));\n    assert(candidate((2))\
    \ == (18));\n    assert(candidate((3)) == (180));\n    assert(candidate((4)) ==\
    \ (1800));\n    assert(candidate((5)) == (18000));\n}\n"
  stdout: ''
  stderr: "tmpysn3eblm: /tmp/tmpysn3eblm.cpp:21: int main(): Assertion `candidate((1))\
    \ == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ n, return the count of the numbers of n-digit\n// positive integers that start\
    \ or end with 1.\nlong starts_one_ends(long n) {\n    long count = 0;\n    long\
    \ start = 1;\n    long end = 1;\n    while (n > 0) {\n        if (n % 10 == 1)\
    \ {\n            count++;\n        }\n        end = end * 10;\n        n /= 10;\n\
    \    }\n    while (n > 0) {\n        if (n % 10 == 1) {\n            count++;\n\
    \        }\n        start = start * 10;\n        n /= 10;\n    }\n    return count;\n\
    }\nint main() {\n    auto candidate = starts_one_ends;\n    assert(candidate((1))\
    \ == (1));\n    assert(candidate((2)) == (18));\n    assert(candidate((3)) ==\
    \ (180));\n    assert(candidate((4)) == (1800));\n    assert(candidate((5)) ==\
    \ (18000));\n}\n"
  stdout: ''
  stderr: "tmpy5vpu7uj: /tmp/tmpy5vpu7uj.cpp:28: int main(): Assertion `candidate((2))\
    \ == (18)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ n, return the count of the numbers of n-digit\n// positive integers that start\
    \ or end with 1.\nlong starts_one_ends(long n) {\n    long count = 0;\n    long\
    \ start = 1;\n    long end = 1;\n    while (n != 0) {\n        if (n % 10 == 1)\
    \ {\n            count++;\n        }\n        if (n % 10 == 0) {\n           \
    \ end = n;\n        }\n        n /= 10;\n    }\n    if (start == end) {\n    \
    \    count++;\n    }\n    return count;\n}\nint main() {\n    auto candidate =\
    \ starts_one_ends;\n    assert(candidate((1)) == (1));\n    assert(candidate((2))\
    \ == (18));\n    assert(candidate((3)) == (180));\n    assert(candidate((4)) ==\
    \ (1800));\n    assert(candidate((5)) == (18000));\n}\n"
  stdout: ''
  stderr: "tmphsi7caoh: /tmp/tmphsi7caoh.cpp:25: int main(): Assertion `candidate((1))\
    \ == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ n, return the count of the numbers of n-digit\n// positive integers that start\
    \ or end with 1.\nlong starts_one_ends(long n) {\n    long count = 0;\n    long\
    \ start = 1;\n    long end = 1;\n    while (n > 0) {\n        if (n % 10 == 1)\
    \ {\n            count++;\n            if (n == start) {\n                start\
    \ = n + 1;\n            } else if (n == end) {\n                end = n + 1;\n\
    \            }\n        }\n        n /= 10;\n    }\n    return count;\n}\nint\
    \ main() {\n    auto candidate = starts_one_ends;\n    assert(candidate((1)) ==\
    \ (1));\n    assert(candidate((2)) == (18));\n    assert(candidate((3)) == (180));\n\
    \    assert(candidate((4)) == (1800));\n    assert(candidate((5)) == (18000));\n\
    }\n"
  stdout: ''
  stderr: "tmpa0ajdi7_: /tmp/tmpa0ajdi7_.cpp:25: int main(): Assertion `candidate((2))\
    \ == (18)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ n, return the count of the numbers of n-digit\n// positive integers that start\
    \ or end with 1.\nlong starts_one_ends(long n) {\n    long count = 0;\n    long\
    \ start = 1;\n    long end = 1;\n    long temp = 1;\n    while (n > 0) {\n   \
    \     temp = n % 10;\n        if (temp == 1) {\n            count++;\n       \
    \     end = temp;\n        } else {\n            start = temp;\n        }\n  \
    \      n = n / 10;\n    }\n    return count;\n}\nint main() {\n    auto candidate\
    \ = starts_one_ends;\n    assert(candidate((1)) == (1));\n    assert(candidate((2))\
    \ == (18));\n    assert(candidate((3)) == (180));\n    assert(candidate((4)) ==\
    \ (1800));\n    assert(candidate((5)) == (18000));\n}\n"
  stdout: ''
  stderr: "tmppu563pqu: /tmp/tmppu563pqu.cpp:25: int main(): Assertion `candidate((2))\
    \ == (18)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ n, return the count of the numbers of n-digit\n// positive integers that start\
    \ or end with 1.\nlong starts_one_ends(long n) {\n    long count = 0;\n    long\
    \ i = 1;\n    while (n / i >= 1) {\n        if (n % i == 0) {\n            count++;\n\
    \        }\n        i++;\n    }\n    return count;\n}\nint main() {\n    auto\
    \ candidate = starts_one_ends;\n    assert(candidate((1)) == (1));\n    assert(candidate((2))\
    \ == (18));\n    assert(candidate((3)) == (180));\n    assert(candidate((4)) ==\
    \ (1800));\n    assert(candidate((5)) == (18000));\n}\n"
  stdout: ''
  stderr: "tmp4ed16sl2: /tmp/tmp4ed16sl2.cpp:19: int main(): Assertion `candidate((2))\
    \ == (18)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ n, return the count of the numbers of n-digit\n// positive integers that start\
    \ or end with 1.\nlong starts_one_ends(long n) {\n    long count = 0;\n    long\
    \ start = 1;\n    long end = 1;\n    while (n != 0) {\n        if (n / 10 == 1)\
    \ {\n            count++;\n        }\n        if (n / 10 == 2) {\n           \
    \ end = end * 10;\n        }\n        if (n / 10 == 3) {\n            start =\
    \ start * 10;\n        }\n        n = n / 10;\n    }\n    return count;\n}\nint\
    \ main() {\n    auto candidate = starts_one_ends;\n    assert(candidate((1)) ==\
    \ (1));\n    assert(candidate((2)) == (18));\n    assert(candidate((3)) == (180));\n\
    \    assert(candidate((4)) == (1800));\n    assert(candidate((5)) == (18000));\n\
    }\n"
  stdout: ''
  stderr: "tmphxqu23x1: /tmp/tmphxqu23x1.cpp:25: int main(): Assertion `candidate((1))\
    \ == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ n, return the count of the numbers of n-digit\n// positive integers that start\
    \ or end with 1.\nlong starts_one_ends(long n) {\n    long count = 0;\n    long\
    \ remain = n;\n    while (remain > 0) {\n        if (remain % 10 == 1) {\n   \
    \         count++;\n        }\n        remain /= 10;\n    }\n    return count;\n\
    }\nint main() {\n    auto candidate = starts_one_ends;\n    assert(candidate((1))\
    \ == (1));\n    assert(candidate((2)) == (18));\n    assert(candidate((3)) ==\
    \ (180));\n    assert(candidate((4)) == (1800));\n    assert(candidate((5)) ==\
    \ (18000));\n}\n"
  stdout: ''
  stderr: "tmp00hix7ns: /tmp/tmp00hix7ns.cpp:19: int main(): Assertion `candidate((2))\
    \ == (18)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ n, return the count of the numbers of n-digit\n// positive integers that start\
    \ or end with 1.\nlong starts_one_ends(long n) {\n    long count = 0;\n    while\
    \ (n > 0) {\n        if (n % 10 == 1) {\n            count++;\n        }\n   \
    \     n /= 10;\n    }\n    return count;\n}\nint main() {\n    auto candidate\
    \ = starts_one_ends;\n    assert(candidate((1)) == (1));\n    assert(candidate((2))\
    \ == (18));\n    assert(candidate((3)) == (180));\n    assert(candidate((4)) ==\
    \ (1800));\n    assert(candidate((5)) == (18000));\n}\n"
  stdout: ''
  stderr: "tmp37dqvqgv: /tmp/tmp37dqvqgv.cpp:18: int main(): Assertion `candidate((2))\
    \ == (18)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ n, return the count of the numbers of n-digit\n// positive integers that start\
    \ or end with 1.\nlong starts_one_ends(long n) {\n    long count = 0;\n    long\
    \ x = 1;\n    while (x != 0) {\n        if (x % 10 == 1) {\n            count++;\n\
    \        }\n        x /= 10;\n    }\n    return count;\n}\nint main() {\n    auto\
    \ candidate = starts_one_ends;\n    assert(candidate((1)) == (1));\n    assert(candidate((2))\
    \ == (18));\n    assert(candidate((3)) == (180));\n    assert(candidate((4)) ==\
    \ (1800));\n    assert(candidate((5)) == (18000));\n}\n"
  stdout: ''
  stderr: "tmpf95f9ch0: /tmp/tmpf95f9ch0.cpp:19: int main(): Assertion `candidate((2))\
    \ == (18)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ n, return the count of the numbers of n-digit\n// positive integers that start\
    \ or end with 1.\nlong starts_one_ends(long n) {\n    long count = 0;\n    long\
    \ start = 1;\n    long end = 1;\n    while (n >= end) {\n        end = end * 10;\n\
    \        count += 1;\n    }\n    while (n <= start) {\n        start = start *\
    \ 10;\n        count += 1;\n    }\n    return count;\n}\nint main() {\n    auto\
    \ candidate = starts_one_ends;\n    assert(candidate((1)) == (1));\n    assert(candidate((2))\
    \ == (18));\n    assert(candidate((3)) == (180));\n    assert(candidate((4)) ==\
    \ (1800));\n    assert(candidate((5)) == (18000));\n}\n"
  stdout: ''
  stderr: "tmp_id23mj7: /tmp/tmp_id23mj7.cpp:21: int main(): Assertion `candidate((1))\
    \ == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ n, return the count of the numbers of n-digit\n// positive integers that start\
    \ or end with 1.\nlong starts_one_ends(long n) {\n    long count = 0;\n    long\
    \ i = 1;\n    while (i <= n) {\n        if (i % 10 == 1) {\n            count++;\n\
    \        }\n        i++;\n    }\n    return count;\n}\nint main() {\n    auto\
    \ candidate = starts_one_ends;\n    assert(candidate((1)) == (1));\n    assert(candidate((2))\
    \ == (18));\n    assert(candidate((3)) == (180));\n    assert(candidate((4)) ==\
    \ (1800));\n    assert(candidate((5)) == (18000));\n}\n"
  stdout: ''
  stderr: "tmpcrbkqsvz: /tmp/tmpcrbkqsvz.cpp:19: int main(): Assertion `candidate((2))\
    \ == (18)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ n, return the count of the numbers of n-digit\n// positive integers that start\
    \ or end with 1.\nlong starts_one_ends(long n) {\n    long count = 0;\n    while\
    \ (n > 0) {\n        if (n % 10 == 1) {\n            ++count;\n        }\n   \
    \     n /= 10;\n    }\n    return count;\n}\nint main() {\n    auto candidate\
    \ = starts_one_ends;\n    assert(candidate((1)) == (1));\n    assert(candidate((2))\
    \ == (18));\n    assert(candidate((3)) == (180));\n    assert(candidate((4)) ==\
    \ (1800));\n    assert(candidate((5)) == (18000));\n}\n"
  stdout: ''
  stderr: "tmpscs3hi8d: /tmp/tmpscs3hi8d.cpp:18: int main(): Assertion `candidate((2))\
    \ == (18)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ n, return the count of the numbers of n-digit\n// positive integers that start\
    \ or end with 1.\nlong starts_one_ends(long n) {\n    long count = 0;\n    long\
    \ limit = n;\n    long i = 1;\n    while (i <= limit) {\n        if (i % 10 ==\
    \ 1) {\n            count++;\n        }\n        i++;\n    }\n    return count;\n\
    }\nint main() {\n    auto candidate = starts_one_ends;\n    assert(candidate((1))\
    \ == (1));\n    assert(candidate((2)) == (18));\n    assert(candidate((3)) ==\
    \ (180));\n    assert(candidate((4)) == (1800));\n    assert(candidate((5)) ==\
    \ (18000));\n}\n"
  stdout: ''
  stderr: "tmpk46897rk: /tmp/tmpk46897rk.cpp:20: int main(): Assertion `candidate((2))\
    \ == (18)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ n, return the count of the numbers of n-digit\n// positive integers that start\
    \ or end with 1.\nlong starts_one_ends(long n) {\n    long count = 0;\n    long\
    \ start = 1;\n    long end = 1;\n    while (n != 0) {\n        if (n % 10 == 1)\
    \ {\n            count++;\n        }\n        end = end * 10;\n        n /= 10;\n\
    \    }\n    if (start == end) {\n        count++;\n    }\n    return count;\n\
    }\nint main() {\n    auto candidate = starts_one_ends;\n    assert(candidate((1))\
    \ == (1));\n    assert(candidate((2)) == (18));\n    assert(candidate((3)) ==\
    \ (180));\n    assert(candidate((4)) == (1800));\n    assert(candidate((5)) ==\
    \ (18000));\n}\n"
  stdout: ''
  stderr: "tmp052m9w8e: /tmp/tmp052m9w8e.cpp:24: int main(): Assertion `candidate((2))\
    \ == (18)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ n, return the count of the numbers of n-digit\n// positive integers that start\
    \ or end with 1.\nlong starts_one_ends(long n) {\n    long count = 0;\n    long\
    \ start = 1;\n    long end = 1;\n    while (n > 0) {\n        if (n % 10 == 1)\
    \ {\n            count++;\n            end = end * 10;\n        }\n        n /=\
    \ 10;\n    }\n    while (start <= end) {\n        if (start % 10 == 1) {\n   \
    \         count++;\n            start = start * 10;\n        }\n        start\
    \ /= 10;\n    }\n    return count;\n}\nint main() {\n    auto candidate = starts_one_ends;\n\
    \    assert(candidate((1)) == (1));\n    assert(candidate((2)) == (18));\n   \
    \ assert(candidate((3)) == (180));\n    assert(candidate((4)) == (1800));\n  \
    \  assert(candidate((5)) == (18000));\n}\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ n, return the count of the numbers of n-digit\n// positive integers that start\
    \ or end with 1.\nlong starts_one_ends(long n) {\n    long count = 0;\n    long\
    \ remainder = n;\n    long digit = 0;\n    while (remainder > 0) {\n        digit\
    \ = remainder % 10;\n        remainder = remainder / 10;\n        if (digit ==\
    \ 1) {\n            count++;\n        }\n    }\n    return count;\n}\nint main()\
    \ {\n    auto candidate = starts_one_ends;\n    assert(candidate((1)) == (1));\n\
    \    assert(candidate((2)) == (18));\n    assert(candidate((3)) == (180));\n \
    \   assert(candidate((4)) == (1800));\n    assert(candidate((5)) == (18000));\n\
    }\n"
  stdout: ''
  stderr: "tmplqlz4bax: /tmp/tmplqlz4bax.cpp:21: int main(): Assertion `candidate((2))\
    \ == (18)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ n, return the count of the numbers of n-digit\n// positive integers that start\
    \ or end with 1.\nlong starts_one_ends(long n) {\n    long count = 0;\n    long\
    \ start = 1;\n    long end = 1;\n    while (n > 0) {\n        if (n % 10 == 1)\
    \ {\n            count++;\n        }\n        n /= 10;\n    }\n    while (n >\
    \ 0) {\n        if (n % 10 == 1) {\n            end++;\n        }\n        n /=\
    \ 10;\n    }\n    while (start <= end) {\n        if (start == end) {\n      \
    \      count++;\n        }\n        start++;\n        end++;\n    }\n    return\
    \ count;\n}\nint main() {\n    auto candidate = starts_one_ends;\n    assert(candidate((1))\
    \ == (1));\n    assert(candidate((2)) == (18));\n    assert(candidate((3)) ==\
    \ (180));\n    assert(candidate((4)) == (1800));\n    assert(candidate((5)) ==\
    \ (18000));\n}\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ n, return the count of the numbers of n-digit\n// positive integers that start\
    \ or end with 1.\nlong starts_one_ends(long n) {\n    long count = 0;\n    while\
    \ (n > 0) {\n        if (n % 10 == 1) {\n            count++;\n        }\n   \
    \     n /= 10;\n    }\n    return count;\n}\nint main() {\n    auto candidate\
    \ = starts_one_ends;\n    assert(candidate((1)) == (1));\n    assert(candidate((2))\
    \ == (18));\n    assert(candidate((3)) == (180));\n    assert(candidate((4)) ==\
    \ (1800));\n    assert(candidate((5)) == (18000));\n}\n"
  stdout: ''
  stderr: "tmp8my1d29c: /tmp/tmp8my1d29c.cpp:18: int main(): Assertion `candidate((2))\
    \ == (18)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ n, return the count of the numbers of n-digit\n// positive integers that start\
    \ or end with 1.\nlong starts_one_ends(long n) {\n    long count = 0;\n    long\
    \ remain = n;\n    while (remain > 0) {\n        long digit = remain%10;\n   \
    \     if (digit == 1) {\n            count++;\n        }\n        remain /= 10;\n\
    \    }\n    return count;\n}\nint main() {\n    auto candidate = starts_one_ends;\n\
    \    assert(candidate((1)) == (1));\n    assert(candidate((2)) == (18));\n   \
    \ assert(candidate((3)) == (180));\n    assert(candidate((4)) == (1800));\n  \
    \  assert(candidate((5)) == (18000));\n}\n"
  stdout: ''
  stderr: "tmpys56x987: /tmp/tmpys56x987.cpp:20: int main(): Assertion `candidate((2))\
    \ == (18)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ n, return the count of the numbers of n-digit\n// positive integers that start\
    \ or end with 1.\nlong starts_one_ends(long n) {\n    long count = 0;\n    long\
    \ start = 1;\n    long end = 1;\n    long temp = 1;\n    while (temp <= n) {\n\
    \        temp = temp * 10;\n        ++count;\n    }\n    while (temp > n) {\n\
    \        temp = temp / 10;\n        ++count;\n    }\n    if (temp == 1) {\n  \
    \      ++count;\n    }\n    return count;\n}\nint main() {\n    auto candidate\
    \ = starts_one_ends;\n    assert(candidate((1)) == (1));\n    assert(candidate((2))\
    \ == (18));\n    assert(candidate((3)) == (180));\n    assert(candidate((4)) ==\
    \ (1800));\n    assert(candidate((5)) == (18000));\n}\n"
  stdout: ''
  stderr: "tmpcx_9ok1o: /tmp/tmpcx_9ok1o.cpp:25: int main(): Assertion `candidate((1))\
    \ == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ n, return the count of the numbers of n-digit\n// positive integers that start\
    \ or end with 1.\nlong starts_one_ends(long n) {\n    long count = 0;\n    long\
    \ i = 1;\n    long j = 1;\n    while (i <= n) {\n        if (i % 10 == 1) {\n\
    \            count++;\n        }\n        i++;\n        j++;\n    }\n    return\
    \ count;\n}\nint main() {\n    auto candidate = starts_one_ends;\n    assert(candidate((1))\
    \ == (1));\n    assert(candidate((2)) == (18));\n    assert(candidate((3)) ==\
    \ (180));\n    assert(candidate((4)) == (1800));\n    assert(candidate((5)) ==\
    \ (18000));\n}\n"
  stdout: ''
  stderr: "tmpzt6s7tzs: /tmp/tmpzt6s7tzs.cpp:21: int main(): Assertion `candidate((2))\
    \ == (18)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ n, return the count of the numbers of n-digit\n// positive integers that start\
    \ or end with 1.\nlong starts_one_ends(long n) {\n    long count = 0;\n    long\
    \ limit = n;\n    while (limit > 0) {\n        limit = limit / 10;\n        count++;\n\
    \    }\n    return count;\n}\nint main() {\n    auto candidate = starts_one_ends;\n\
    \    assert(candidate((1)) == (1));\n    assert(candidate((2)) == (18));\n   \
    \ assert(candidate((3)) == (180));\n    assert(candidate((4)) == (1800));\n  \
    \  assert(candidate((5)) == (18000));\n}\n"
  stdout: ''
  stderr: "tmprrd1yb7x: /tmp/tmprrd1yb7x.cpp:17: int main(): Assertion `candidate((2))\
    \ == (18)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ n, return the count of the numbers of n-digit\n// positive integers that start\
    \ or end with 1.\nlong starts_one_ends(long n) {\n    long count = 0;\n    long\
    \ i = 1;\n    while (i <= n) {\n        if (i % 10 == 1) {\n            count++;\n\
    \        }\n        i++;\n    }\n    return count;\n}\nint main() {\n    auto\
    \ candidate = starts_one_ends;\n    assert(candidate((1)) == (1));\n    assert(candidate((2))\
    \ == (18));\n    assert(candidate((3)) == (180));\n    assert(candidate((4)) ==\
    \ (1800));\n    assert(candidate((5)) == (18000));\n}\n"
  stdout: ''
  stderr: "tmpt_m19233: /tmp/tmpt_m19233.cpp:19: int main(): Assertion `candidate((2))\
    \ == (18)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ n, return the count of the numbers of n-digit\n// positive integers that start\
    \ or end with 1.\nlong starts_one_ends(long n) {\n    long count = 0;\n    while\
    \ (n > 0) {\n        if (n % 10 == 1) {\n            count++;\n        }\n   \
    \     n /= 10;\n    }\n    return count;\n}\nint main() {\n    auto candidate\
    \ = starts_one_ends;\n    assert(candidate((1)) == (1));\n    assert(candidate((2))\
    \ == (18));\n    assert(candidate((3)) == (180));\n    assert(candidate((4)) ==\
    \ (1800));\n    assert(candidate((5)) == (18000));\n}\n"
  stdout: ''
  stderr: "tmpbq1udrpl: /tmp/tmpbq1udrpl.cpp:18: int main(): Assertion `candidate((2))\
    \ == (18)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ n, return the count of the numbers of n-digit\n// positive integers that start\
    \ or end with 1.\nlong starts_one_ends(long n) {\n    long count = 0;\n    long\
    \ start = 1;\n    long end = 1;\n    while (n > 0) {\n        if (n % 10 == 1)\
    \ {\n            count++;\n            end = end * 10;\n        }\n        n =\
    \ n / 10;\n    }\n    if (n == 0) {\n        count++;\n        end = end * 10;\n\
    \    }\n    return count;\n}\nint main() {\n    auto candidate = starts_one_ends;\n\
    \    assert(candidate((1)) == (1));\n    assert(candidate((2)) == (18));\n   \
    \ assert(candidate((3)) == (180));\n    assert(candidate((4)) == (1800));\n  \
    \  assert(candidate((5)) == (18000));\n}\n"
  stdout: ''
  stderr: "tmp1wh6t7pm: /tmp/tmp1wh6t7pm.cpp:24: int main(): Assertion `candidate((1))\
    \ == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ n, return the count of the numbers of n-digit\n// positive integers that start\
    \ or end with 1.\nlong starts_one_ends(long n) {\n    long count = 0;\n    long\
    \ start = 1;\n    long end = 1;\n    while (n > 0) {\n        long temp = n;\n\
    \        n /= 10;\n        if (temp == 1) {\n            count++;\n        } else\
    \ {\n            while (temp > 0) {\n                temp = temp / 10;\n     \
    \       }\n            if (temp == 1) {\n                count++;\n          \
    \      end = end;\n            } else {\n                while (temp > 0) {\n\
    \                    temp = temp / 10;\n                }\n                if\
    \ (temp == 1) {\n                    start = start;\n                    count++;\n\
    \                }\n            }\n        }\n    }\n    return count;\n}\nint\
    \ main() {\n    auto candidate = starts_one_ends;\n    assert(candidate((1)) ==\
    \ (1));\n    assert(candidate((2)) == (18));\n    assert(candidate((3)) == (180));\n\
    \    assert(candidate((4)) == (1800));\n    assert(candidate((5)) == (18000));\n\
    }\n"
  stdout: ''
  stderr: "tmp1nz1eqxa: /tmp/tmp1nz1eqxa.cpp:37: int main(): Assertion `candidate((2))\
    \ == (18)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ n, return the count of the numbers of n-digit\n// positive integers that start\
    \ or end with 1.\nlong starts_one_ends(long n) {\n    long count = 0;\n    long\
    \ start = 1;\n    long end = 1;\n    while (n != 0) {\n        if (n >= start)\
    \ {\n            end = end * 10;\n            n = n / 10;\n        }\n       \
    \ start = start * 10;\n        count = count + 1;\n    }\n    return count;\n\
    }\nint main() {\n    auto candidate = starts_one_ends;\n    assert(candidate((1))\
    \ == (1));\n    assert(candidate((2)) == (18));\n    assert(candidate((3)) ==\
    \ (180));\n    assert(candidate((4)) == (1800));\n    assert(candidate((5)) ==\
    \ (18000));\n}\n"
  stdout: ''
  stderr: "tmpm8ktglm4: /tmp/tmpm8ktglm4.cpp:22: int main(): Assertion `candidate((2))\
    \ == (18)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ n, return the count of the numbers of n-digit\n// positive integers that start\
    \ or end with 1.\nlong starts_one_ends(long n) {\n    long count = 0;\n    long\
    \ i = 1;\n    while (i <= n) {\n        if (i % 10 == 1) {\n            count++;\n\
    \        }\n        i++;\n    }\n    return count;\n}\nint main() {\n    auto\
    \ candidate = starts_one_ends;\n    assert(candidate((1)) == (1));\n    assert(candidate((2))\
    \ == (18));\n    assert(candidate((3)) == (180));\n    assert(candidate((4)) ==\
    \ (1800));\n    assert(candidate((5)) == (18000));\n}\n"
  stdout: ''
  stderr: "tmpm7xl0a18: /tmp/tmpm7xl0a18.cpp:19: int main(): Assertion `candidate((2))\
    \ == (18)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ n, return the count of the numbers of n-digit\n// positive integers that start\
    \ or end with 1.\nlong starts_one_ends(long n) {\n    long count = 0;\n    long\
    \ start = 1, end = n;\n    while (start < end) {\n        long mid = (start +\
    \ end) / 2;\n        if (mid % 10 == 1) {\n            count++;\n            start\
    \ = mid + 1;\n        } else {\n            end = mid;\n        }\n    }\n   \
    \ return count;\n}\nint main() {\n    auto candidate = starts_one_ends;\n    assert(candidate((1))\
    \ == (1));\n    assert(candidate((2)) == (18));\n    assert(candidate((3)) ==\
    \ (180));\n    assert(candidate((4)) == (1800));\n    assert(candidate((5)) ==\
    \ (18000));\n}\n"
  stdout: ''
  stderr: "tmpyeiy9ac0: /tmp/tmpyeiy9ac0.cpp:21: int main(): Assertion `candidate((1))\
    \ == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ n, return the count of the numbers of n-digit\n// positive integers that start\
    \ or end with 1.\nlong starts_one_ends(long n) {\n    long count = 0;\n    while\
    \ (n > 0) {\n        if (n % 10 == 1) {\n            count++;\n        }\n   \
    \     n /= 10;\n    }\n    return count;\n}\nint main() {\n    auto candidate\
    \ = starts_one_ends;\n    assert(candidate((1)) == (1));\n    assert(candidate((2))\
    \ == (18));\n    assert(candidate((3)) == (180));\n    assert(candidate((4)) ==\
    \ (1800));\n    assert(candidate((5)) == (18000));\n}\n"
  stdout: ''
  stderr: "tmpme67m_ye: /tmp/tmpme67m_ye.cpp:18: int main(): Assertion `candidate((2))\
    \ == (18)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ n, return the count of the numbers of n-digit\n// positive integers that start\
    \ or end with 1.\nlong starts_one_ends(long n) {\n    long count = 0;\n    long\
    \ start = 1;\n    long end = 1;\n    while (n != 0) {\n        if (n / 10 == 1)\
    \ {\n            count++;\n        }\n        if (n / 10 == 2) {\n           \
    \ end = end * 10;\n        }\n        if (n / 10 == 3) {\n            start =\
    \ start * 10;\n        }\n        n = n / 10;\n    }\n    return count;\n}\nint\
    \ main() {\n    auto candidate = starts_one_ends;\n    assert(candidate((1)) ==\
    \ (1));\n    assert(candidate((2)) == (18));\n    assert(candidate((3)) == (180));\n\
    \    assert(candidate((4)) == (1800));\n    assert(candidate((5)) == (18000));\n\
    }\n"
  stdout: ''
  stderr: "tmpq36219kn: /tmp/tmpq36219kn.cpp:25: int main(): Assertion `candidate((1))\
    \ == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ n, return the count of the numbers of n-digit\n// positive integers that start\
    \ or end with 1.\nlong starts_one_ends(long n) {\n    long count = 0;\n    long\
    \ x = n;\n    while (x != 0) {\n        long y = x / 10;\n        if (y == 1 ||\
    \ y == 9) {\n            count++;\n        }\n        x = x - y * 10;\n    }\n\
    \    return count;\n}\nint main() {\n    auto candidate = starts_one_ends;\n \
    \   assert(candidate((1)) == (1));\n    assert(candidate((2)) == (18));\n    assert(candidate((3))\
    \ == (180));\n    assert(candidate((4)) == (1800));\n    assert(candidate((5))\
    \ == (18000));\n}\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ n, return the count of the numbers of n-digit\n// positive integers that start\
    \ or end with 1.\nlong starts_one_ends(long n) {\n    long count = 0;\n    long\
    \ start = 1;\n    long end = 1;\n    while (n != 0) {\n        if (n % 10 == 1)\
    \ {\n            count++;\n        }\n        end = end * 10;\n        n /= 10;\n\
    \    }\n    if (n == 0) {\n        count++;\n    }\n    return count;\n}\nint\
    \ main() {\n    auto candidate = starts_one_ends;\n    assert(candidate((1)) ==\
    \ (1));\n    assert(candidate((2)) == (18));\n    assert(candidate((3)) == (180));\n\
    \    assert(candidate((4)) == (1800));\n    assert(candidate((5)) == (18000));\n\
    }\n"
  stdout: ''
  stderr: "tmpjwkuz362: /tmp/tmpjwkuz362.cpp:23: int main(): Assertion `candidate((1))\
    \ == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ n, return the count of the numbers of n-digit\n// positive integers that start\
    \ or end with 1.\nlong starts_one_ends(long n) {\n    long count = 0;\n    long\
    \ start = 1;\n    long end = 1;\n    while (n >= end) {\n        end = end * 10;\n\
    \        count++;\n    }\n    while (start <= n) {\n        start = start * 10;\n\
    \        count++;\n    }\n    return count;\n}\nint main() {\n    auto candidate\
    \ = starts_one_ends;\n    assert(candidate((1)) == (1));\n    assert(candidate((2))\
    \ == (18));\n    assert(candidate((3)) == (180));\n    assert(candidate((4)) ==\
    \ (1800));\n    assert(candidate((5)) == (18000));\n}\n"
  stdout: ''
  stderr: "tmpv6l28z_e: /tmp/tmpv6l28z_e.cpp:21: int main(): Assertion `candidate((1))\
    \ == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ n, return the count of the numbers of n-digit\n// positive integers that start\
    \ or end with 1.\nlong starts_one_ends(long n) {\n    long count = 0;\n    long\
    \ start = 1;\n    long end = 1;\n    while (n != 0) {\n        if (n / start ==\
    \ 1) {\n            count++;\n        }\n        if (n / end == 1) {\n       \
    \     count++;\n        }\n        start++;\n        end++;\n        n--;\n  \
    \  }\n    return count;\n}\nint main() {\n    auto candidate = starts_one_ends;\n\
    \    assert(candidate((1)) == (1));\n    assert(candidate((2)) == (18));\n   \
    \ assert(candidate((3)) == (180));\n    assert(candidate((4)) == (1800));\n  \
    \  assert(candidate((5)) == (18000));\n}\n"
  stdout: ''
  stderr: "tmpmofj9thb: /tmp/tmpmofj9thb.cpp:24: int main(): Assertion `candidate((1))\
    \ == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ n, return the count of the numbers of n-digit\n// positive integers that start\
    \ or end with 1.\nlong starts_one_ends(long n) {\n    long count = 0;\n    long\
    \ i = 1;\n    while (n > 0) {\n        if (n % i == 0) {\n            count++;\n\
    \        }\n        i++;\n        n/=i;\n    }\n    return count;\n}\nint main()\
    \ {\n    auto candidate = starts_one_ends;\n    assert(candidate((1)) == (1));\n\
    \    assert(candidate((2)) == (18));\n    assert(candidate((3)) == (180));\n \
    \   assert(candidate((4)) == (1800));\n    assert(candidate((5)) == (18000));\n\
    }\n"
  stdout: ''
  stderr: "tmp2gw8neo8: /tmp/tmp2gw8neo8.cpp:20: int main(): Assertion `candidate((2))\
    \ == (18)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ n, return the count of the numbers of n-digit\n// positive integers that start\
    \ or end with 1.\nlong starts_one_ends(long n) {\n    long count = 0;\n    long\
    \ start = 1, end = n;\n    while (start <= end) {\n        if (n % 10 == 1) {\n\
    \            count++;\n        }\n        start *= 10;\n        end /= 10;\n \
    \   }\n    return count;\n}\nint main() {\n    auto candidate = starts_one_ends;\n\
    \    assert(candidate((1)) == (1));\n    assert(candidate((2)) == (18));\n   \
    \ assert(candidate((3)) == (180));\n    assert(candidate((4)) == (1800));\n  \
    \  assert(candidate((5)) == (18000));\n}\n"
  stdout: ''
  stderr: "tmpenvoyv6r: /tmp/tmpenvoyv6r.cpp:20: int main(): Assertion `candidate((2))\
    \ == (18)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ n, return the count of the numbers of n-digit\n// positive integers that start\
    \ or end with 1.\nlong starts_one_ends(long n) {\n    long count = 0;\n    long\
    \ i = 1;\n    long remain = n;\n    while (remain > 0) {\n        if (remain %\
    \ 10 == 1) {\n            count++;\n        }\n        remain /= 10;\n       \
    \ i++;\n    }\n    return count;\n}\nint main() {\n    auto candidate = starts_one_ends;\n\
    \    assert(candidate((1)) == (1));\n    assert(candidate((2)) == (18));\n   \
    \ assert(candidate((3)) == (180));\n    assert(candidate((4)) == (1800));\n  \
    \  assert(candidate((5)) == (18000));\n}\n"
  stdout: ''
  stderr: "tmplhn52xr_: /tmp/tmplhn52xr_.cpp:21: int main(): Assertion `candidate((2))\
    \ == (18)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ n, return the count of the numbers of n-digit\n// positive integers that start\
    \ or end with 1.\nlong starts_one_ends(long n) {\n    long count = 0;\n    long\
    \ start = 1;\n    long end = 1;\n    while (n >= end) {\n        end = end * 10;\n\
    \        count++;\n    }\n    while (start <= n) {\n        start = start * 10;\n\
    \        count++;\n    }\n    return count;\n}\nint main() {\n    auto candidate\
    \ = starts_one_ends;\n    assert(candidate((1)) == (1));\n    assert(candidate((2))\
    \ == (18));\n    assert(candidate((3)) == (180));\n    assert(candidate((4)) ==\
    \ (1800));\n    assert(candidate((5)) == (18000));\n}\n"
  stdout: ''
  stderr: "tmpqz2h2svn: /tmp/tmpqz2h2svn.cpp:21: int main(): Assertion `candidate((1))\
    \ == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ n, return the count of the numbers of n-digit\n// positive integers that start\
    \ or end with 1.\nlong starts_one_ends(long n) {\n    long count = 0;\n    long\
    \ start = 1;\n    long end = 1;\n    while (n >= end) {\n        end = end * 10;\n\
    \        count += 1;\n    }\n    while (start <= n) {\n        start = start *\
    \ 10;\n        count += 1;\n    }\n    return count;\n}\nint main() {\n    auto\
    \ candidate = starts_one_ends;\n    assert(candidate((1)) == (1));\n    assert(candidate((2))\
    \ == (18));\n    assert(candidate((3)) == (180));\n    assert(candidate((4)) ==\
    \ (1800));\n    assert(candidate((5)) == (18000));\n}\n"
  stdout: ''
  stderr: "tmpiayojuo3: /tmp/tmpiayojuo3.cpp:21: int main(): Assertion `candidate((1))\
    \ == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ n, return the count of the numbers of n-digit\n// positive integers that start\
    \ or end with 1.\nlong starts_one_ends(long n) {\n    long count = 0;\n    long\
    \ cur = 1;\n    while (n > 0) {\n        if (n % 10 == 1) {\n            count\
    \ += 1;\n        }\n        n /= 10;\n    }\n    return count;\n}\nint main()\
    \ {\n    auto candidate = starts_one_ends;\n    assert(candidate((1)) == (1));\n\
    \    assert(candidate((2)) == (18));\n    assert(candidate((3)) == (180));\n \
    \   assert(candidate((4)) == (1800));\n    assert(candidate((5)) == (18000));\n\
    }\n"
  stdout: ''
  stderr: "tmptin8y7_c: /tmp/tmptin8y7_c.cpp:19: int main(): Assertion `candidate((2))\
    \ == (18)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ n, return the count of the numbers of n-digit\n// positive integers that start\
    \ or end with 1.\nlong starts_one_ends(long n) {\n    long count = 0;\n    long\
    \ i = 1;\n    while (i <= n) {\n        if (i % 10 == 1) {\n            count++;\n\
    \        }\n        i++;\n    }\n    return count;\n}\nint main() {\n    auto\
    \ candidate = starts_one_ends;\n    assert(candidate((1)) == (1));\n    assert(candidate((2))\
    \ == (18));\n    assert(candidate((3)) == (180));\n    assert(candidate((4)) ==\
    \ (1800));\n    assert(candidate((5)) == (18000));\n}\n"
  stdout: ''
  stderr: "tmpasenltpq: /tmp/tmpasenltpq.cpp:19: int main(): Assertion `candidate((2))\
    \ == (18)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ n, return the count of the numbers of n-digit\n// positive integers that start\
    \ or end with 1.\nlong starts_one_ends(long n) {\n    long count = 0;\n    while\
    \ (n > 0) {\n        if (n % 10 == 1) count++;\n        n /= 10;\n    }\n    return\
    \ count;\n}\nint main() {\n    auto candidate = starts_one_ends;\n    assert(candidate((1))\
    \ == (1));\n    assert(candidate((2)) == (18));\n    assert(candidate((3)) ==\
    \ (180));\n    assert(candidate((4)) == (1800));\n    assert(candidate((5)) ==\
    \ (18000));\n}\n"
  stdout: ''
  stderr: "tmpwbnxxap3: /tmp/tmpwbnxxap3.cpp:16: int main(): Assertion `candidate((2))\
    \ == (18)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ n, return the count of the numbers of n-digit\n// positive integers that start\
    \ or end with 1.\nlong starts_one_ends(long n) {\n    long count = 0;\n    long\
    \ i = 1;\n    while (i <= n) {\n        if (i % 10 == 1) {\n            count++;\n\
    \        }\n        i++;\n    }\n    return count;\n}\nint main() {\n    auto\
    \ candidate = starts_one_ends;\n    assert(candidate((1)) == (1));\n    assert(candidate((2))\
    \ == (18));\n    assert(candidate((3)) == (180));\n    assert(candidate((4)) ==\
    \ (1800));\n    assert(candidate((5)) == (18000));\n}\n"
  stdout: ''
  stderr: "tmpl1mod5ym: /tmp/tmpl1mod5ym.cpp:19: int main(): Assertion `candidate((2))\
    \ == (18)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ n, return the count of the numbers of n-digit\n// positive integers that start\
    \ or end with 1.\nlong starts_one_ends(long n) {\n    long count = 0;\n    long\
    \ start = 1;\n    long end = 1;\n    while (n != 0) {\n        if (n % 10 == 1)\
    \ {\n            count++;\n            if (n == start) {\n                start\
    \ = start + 1;\n            } else if (n == end) {\n                end = end\
    \ + 1;\n            }\n        }\n        n /= 10;\n    }\n    return count;\n\
    }\nint main() {\n    auto candidate = starts_one_ends;\n    assert(candidate((1))\
    \ == (1));\n    assert(candidate((2)) == (18));\n    assert(candidate((3)) ==\
    \ (180));\n    assert(candidate((4)) == (1800));\n    assert(candidate((5)) ==\
    \ (18000));\n}\n"
  stdout: ''
  stderr: "tmpwb4p3dzi: /tmp/tmpwb4p3dzi.cpp:25: int main(): Assertion `candidate((2))\
    \ == (18)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ n, return the count of the numbers of n-digit\n// positive integers that start\
    \ or end with 1.\nlong starts_one_ends(long n) {\n    long count = 0;\n    while\
    \ (n > 0) {\n        if (n % 10 == 1) {\n            count++;\n        }\n   \
    \     n /= 10;\n    }\n    return count;\n}\nint main() {\n    auto candidate\
    \ = starts_one_ends;\n    assert(candidate((1)) == (1));\n    assert(candidate((2))\
    \ == (18));\n    assert(candidate((3)) == (180));\n    assert(candidate((4)) ==\
    \ (1800));\n    assert(candidate((5)) == (18000));\n}\n"
  stdout: ''
  stderr: "tmp4_vdc86f: /tmp/tmp4_vdc86f.cpp:18: int main(): Assertion `candidate((2))\
    \ == (18)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ n, return the count of the numbers of n-digit\n// positive integers that start\
    \ or end with 1.\nlong starts_one_ends(long n) {\n    long count = 0;\n    long\
    \ temp = 1;\n    while (temp <= n) {\n        if (temp % 10 == 1) {\n        \
    \    count++;\n        }\n        temp++;\n    }\n    return count;\n}\nint main()\
    \ {\n    auto candidate = starts_one_ends;\n    assert(candidate((1)) == (1));\n\
    \    assert(candidate((2)) == (18));\n    assert(candidate((3)) == (180));\n \
    \   assert(candidate((4)) == (1800));\n    assert(candidate((5)) == (18000));\n\
    }\n"
  stdout: ''
  stderr: "tmpcchjb5t3: /tmp/tmpcchjb5t3.cpp:19: int main(): Assertion `candidate((2))\
    \ == (18)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ n, return the count of the numbers of n-digit\n// positive integers that start\
    \ or end with 1.\nlong starts_one_ends(long n) {\n    long count = 0;\n    long\
    \ i = 1;\n    while (i <= n) {\n        if (i % 10 == 1) {\n            count++;\n\
    \        }\n        i++;\n    }\n    return count;\n}\nint main() {\n    auto\
    \ candidate = starts_one_ends;\n    assert(candidate((1)) == (1));\n    assert(candidate((2))\
    \ == (18));\n    assert(candidate((3)) == (180));\n    assert(candidate((4)) ==\
    \ (1800));\n    assert(candidate((5)) == (18000));\n}\n"
  stdout: ''
  stderr: "tmpzlls4gam: /tmp/tmpzlls4gam.cpp:19: int main(): Assertion `candidate((2))\
    \ == (18)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ n, return the count of the numbers of n-digit\n// positive integers that start\
    \ or end with 1.\nlong starts_one_ends(long n) {\n    long count = 0;\n    while\
    \ (n > 0) {\n        if (n % 10 == 1) {\n            count++;\n        }\n   \
    \     n /= 10;\n    }\n    return count;\n}\nint main() {\n    auto candidate\
    \ = starts_one_ends;\n    assert(candidate((1)) == (1));\n    assert(candidate((2))\
    \ == (18));\n    assert(candidate((3)) == (180));\n    assert(candidate((4)) ==\
    \ (1800));\n    assert(candidate((5)) == (18000));\n}\n"
  stdout: ''
  stderr: "tmpekxdd9i5: /tmp/tmpekxdd9i5.cpp:18: int main(): Assertion `candidate((2))\
    \ == (18)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ n, return the count of the numbers of n-digit\n// positive integers that start\
    \ or end with 1.\nlong starts_one_ends(long n) {\n    long count = 0;\n    long\
    \ limit = pow(10, n);\n    long start = 1, end = limit;\n    while (start <= end)\
    \ {\n        if (start == end) {\n            if (start == 1) count++;\n     \
    \       start = end;\n            end = limit;\n        } else {\n           \
    \ if (start % 10 == 1) count++;\n            start = start / 10;\n           \
    \ end = end / 10;\n        }\n    }\n    return count;\n}\nint main() {\n    auto\
    \ candidate = starts_one_ends;\n    assert(candidate((1)) == (1));\n    assert(candidate((2))\
    \ == (18));\n    assert(candidate((3)) == (180));\n    assert(candidate((4)) ==\
    \ (1800));\n    assert(candidate((5)) == (18000));\n}\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ n, return the count of the numbers of n-digit\n// positive integers that start\
    \ or end with 1.\nlong starts_one_ends(long n) {\n    long count = 0;\n    long\
    \ limit = n;\n    while (limit > 0) {\n        if (limit % 10 == 1) {\n      \
    \      count++;\n        }\n        limit /= 10;\n    }\n    return count;\n}\n\
    int main() {\n    auto candidate = starts_one_ends;\n    assert(candidate((1))\
    \ == (1));\n    assert(candidate((2)) == (18));\n    assert(candidate((3)) ==\
    \ (180));\n    assert(candidate((4)) == (1800));\n    assert(candidate((5)) ==\
    \ (18000));\n}\n"
  stdout: ''
  stderr: "tmp63lw385y: /tmp/tmp63lw385y.cpp:19: int main(): Assertion `candidate((2))\
    \ == (18)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ n, return the count of the numbers of n-digit\n// positive integers that start\
    \ or end with 1.\nlong starts_one_ends(long n) {\n    long count = 0;\n    long\
    \ i = 1;\n    while (n > 0) {\n        if (n % 10 == 1) {\n            count++;\n\
    \        }\n        n /= 10;\n        i++;\n    }\n    return count;\n}\nint main()\
    \ {\n    auto candidate = starts_one_ends;\n    assert(candidate((1)) == (1));\n\
    \    assert(candidate((2)) == (18));\n    assert(candidate((3)) == (180));\n \
    \   assert(candidate((4)) == (1800));\n    assert(candidate((5)) == (18000));\n\
    }\n"
  stdout: ''
  stderr: "tmp0h856pqo: /tmp/tmp0h856pqo.cpp:20: int main(): Assertion `candidate((2))\
    \ == (18)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ n, return the count of the numbers of n-digit\n// positive integers that start\
    \ or end with 1.\nlong starts_one_ends(long n) {\n    long count = 0;\n    while\
    \ (n != 0) {\n        if (n % 10 == 1) {\n            count++;\n        }\n  \
    \      n /= 10;\n    }\n    return count;\n}\nint main() {\n    auto candidate\
    \ = starts_one_ends;\n    assert(candidate((1)) == (1));\n    assert(candidate((2))\
    \ == (18));\n    assert(candidate((3)) == (180));\n    assert(candidate((4)) ==\
    \ (1800));\n    assert(candidate((5)) == (18000));\n}\n"
  stdout: ''
  stderr: "tmpjwnnfv0c: /tmp/tmpjwnnfv0c.cpp:18: int main(): Assertion `candidate((2))\
    \ == (18)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ n, return the count of the numbers of n-digit\n// positive integers that start\
    \ or end with 1.\nlong starts_one_ends(long n) {\n    long count = 0;\n    long\
    \ start = 1;\n    long end = 1;\n    while (n != 0) {\n        if (n / 10 == 1)\
    \ {\n            count++;\n        }\n        end = end * 10;\n        n /= 10;\n\
    \    }\n    if (n == 0) {\n        return count;\n    }\n    while (start != end)\
    \ {\n        if (start == 1) {\n            count++;\n        }\n        start\
    \ = start * 10;\n    }\n    return count;\n}\nint main() {\n    auto candidate\
    \ = starts_one_ends;\n    assert(candidate((1)) == (1));\n    assert(candidate((2))\
    \ == (18));\n    assert(candidate((3)) == (180));\n    assert(candidate((4)) ==\
    \ (1800));\n    assert(candidate((5)) == (18000));\n}\n"
  stdout: ''
  stderr: "tmpp1uuo9rw: /tmp/tmpp1uuo9rw.cpp:29: int main(): Assertion `candidate((1))\
    \ == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ n, return the count of the numbers of n-digit\n// positive integers that start\
    \ or end with 1.\nlong starts_one_ends(long n) {\n    long count = 0;\n    while\
    \ (n > 0) {\n        if (n % 10 == 1) count++;\n        n /= 10;\n    }\n    return\
    \ count;\n}\nint main() {\n    auto candidate = starts_one_ends;\n    assert(candidate((1))\
    \ == (1));\n    assert(candidate((2)) == (18));\n    assert(candidate((3)) ==\
    \ (180));\n    assert(candidate((4)) == (1800));\n    assert(candidate((5)) ==\
    \ (18000));\n}\n"
  stdout: ''
  stderr: "tmpqq6u6rcs: /tmp/tmpqq6u6rcs.cpp:16: int main(): Assertion `candidate((2))\
    \ == (18)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ n, return the count of the numbers of n-digit\n// positive integers that start\
    \ or end with 1.\nlong starts_one_ends(long n) {\n    long count = 0;\n    long\
    \ mod = n;\n    while (mod != 0) {\n        mod = mod * 10;\n        count++;\n\
    \    }\n    return count;\n}\nint main() {\n    auto candidate = starts_one_ends;\n\
    \    assert(candidate((1)) == (1));\n    assert(candidate((2)) == (18));\n   \
    \ assert(candidate((3)) == (180));\n    assert(candidate((4)) == (1800));\n  \
    \  assert(candidate((5)) == (18000));\n}\n"
  stdout: ''
  stderr: "tmphykd5xqw: /tmp/tmphykd5xqw.cpp:16: int main(): Assertion `candidate((1))\
    \ == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ n, return the count of the numbers of n-digit\n// positive integers that start\
    \ or end with 1.\nlong starts_one_ends(long n) {\n    long count = 0;\n    long\
    \ i = 1;\n    while (i <= n) {\n        if (i % 10 == 1) {\n            count++;\n\
    \        }\n        i++;\n    }\n    return count;\n}\nint main() {\n    auto\
    \ candidate = starts_one_ends;\n    assert(candidate((1)) == (1));\n    assert(candidate((2))\
    \ == (18));\n    assert(candidate((3)) == (180));\n    assert(candidate((4)) ==\
    \ (1800));\n    assert(candidate((5)) == (18000));\n}\n"
  stdout: ''
  stderr: "tmp05by8n8z: /tmp/tmp05by8n8z.cpp:19: int main(): Assertion `candidate((2))\
    \ == (18)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ n, return the count of the numbers of n-digit\n// positive integers that start\
    \ or end with 1.\nlong starts_one_ends(long n) {\n    long count = 0;\n    long\
    \ start = 1;\n    long end = 1;\n    while (n != 0) {\n        if (n % 10 == 1)\
    \ {\n            count++;\n        }\n        end = end * 10;\n        n /= 10;\n\
    \    }\n    if (n == 0) {\n        return count;\n    }\n    while (n != 0) {\n\
    \        if (n % 10 == 1) {\n            count++;\n        }\n        start =\
    \ start * 10;\n        n /= 10;\n    }\n    return count + end - start + 1;\n\
    }\nint main() {\n    auto candidate = starts_one_ends;\n    assert(candidate((1))\
    \ == (1));\n    assert(candidate((2)) == (18));\n    assert(candidate((3)) ==\
    \ (180));\n    assert(candidate((4)) == (1800));\n    assert(candidate((5)) ==\
    \ (18000));\n}\n"
  stdout: ''
  stderr: "tmpm3lbqvh_: /tmp/tmpm3lbqvh_.cpp:31: int main(): Assertion `candidate((2))\
    \ == (18)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ n, return the count of the numbers of n-digit\n// positive integers that start\
    \ or end with 1.\nlong starts_one_ends(long n) {\n    long count = 0;\n    long\
    \ i = 1;\n    while (i <= n) {\n        if (i % 10 == 1) {\n            count++;\n\
    \        }\n        i++;\n    }\n    return count;\n}\nint main() {\n    auto\
    \ candidate = starts_one_ends;\n    assert(candidate((1)) == (1));\n    assert(candidate((2))\
    \ == (18));\n    assert(candidate((3)) == (180));\n    assert(candidate((4)) ==\
    \ (1800));\n    assert(candidate((5)) == (18000));\n}\n"
  stdout: ''
  stderr: "tmpzpt04bhh: /tmp/tmpzpt04bhh.cpp:19: int main(): Assertion `candidate((2))\
    \ == (18)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ n, return the count of the numbers of n-digit\n// positive integers that start\
    \ or end with 1.\nlong starts_one_ends(long n) {\n    long count = 0;\n    long\
    \ i = 1;\n    while (i <= n) {\n        if (i % 10 == 1) {\n            count++;\n\
    \        }\n        i++;\n    }\n    return count;\n}\nint main() {\n    auto\
    \ candidate = starts_one_ends;\n    assert(candidate((1)) == (1));\n    assert(candidate((2))\
    \ == (18));\n    assert(candidate((3)) == (180));\n    assert(candidate((4)) ==\
    \ (1800));\n    assert(candidate((5)) == (18000));\n}\n"
  stdout: ''
  stderr: "tmpwv2ctbza: /tmp/tmpwv2ctbza.cpp:19: int main(): Assertion `candidate((2))\
    \ == (18)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ n, return the count of the numbers of n-digit\n// positive integers that start\
    \ or end with 1.\nlong starts_one_ends(long n) {\n    long count = 0;\n    long\
    \ start = 1;\n    long end = 1;\n    while (n > 0) {\n        long tmp = n % 10;\n\
    \        if (tmp == 1) {\n            count++;\n        } else {\n           \
    \ if (tmp == end) {\n                end = tmp + 1;\n            } else {\n  \
    \              start = tmp + 1;\n            }\n        }\n        n = n / 10;\n\
    \    }\n    return count;\n}\nint main() {\n    auto candidate = starts_one_ends;\n\
    \    assert(candidate((1)) == (1));\n    assert(candidate((2)) == (18));\n   \
    \ assert(candidate((3)) == (180));\n    assert(candidate((4)) == (1800));\n  \
    \  assert(candidate((5)) == (18000));\n}\n"
  stdout: ''
  stderr: "tmpaa0lq5xd: /tmp/tmpaa0lq5xd.cpp:27: int main(): Assertion `candidate((2))\
    \ == (18)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ n, return the count of the numbers of n-digit\n// positive integers that start\
    \ or end with 1.\nlong starts_one_ends(long n) {\n    long count = 0;\n    long\
    \ i = 1;\n    while (i <= n) {\n        if (i % 10 == 1) {\n            count++;\n\
    \        }\n        i++;\n    }\n    return count;\n}\nint main() {\n    auto\
    \ candidate = starts_one_ends;\n    assert(candidate((1)) == (1));\n    assert(candidate((2))\
    \ == (18));\n    assert(candidate((3)) == (180));\n    assert(candidate((4)) ==\
    \ (1800));\n    assert(candidate((5)) == (18000));\n}\n"
  stdout: ''
  stderr: "tmpo7sxz_2w: /tmp/tmpo7sxz_2w.cpp:19: int main(): Assertion `candidate((2))\
    \ == (18)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ n, return the count of the numbers of n-digit\n// positive integers that start\
    \ or end with 1.\nlong starts_one_ends(long n) {\n    long count = 0;\n    while\
    \ (n != 0) {\n        if (n & 1) count++;\n        n >>= 1;\n    }\n    return\
    \ count;\n}\nint main() {\n    auto candidate = starts_one_ends;\n    assert(candidate((1))\
    \ == (1));\n    assert(candidate((2)) == (18));\n    assert(candidate((3)) ==\
    \ (180));\n    assert(candidate((4)) == (1800));\n    assert(candidate((5)) ==\
    \ (18000));\n}\n"
  stdout: ''
  stderr: "tmp9oxjb67g: /tmp/tmp9oxjb67g.cpp:16: int main(): Assertion `candidate((2))\
    \ == (18)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ n, return the count of the numbers of n-digit\n// positive integers that start\
    \ or end with 1.\nlong starts_one_ends(long n) {\n    long count = 0;\n    long\
    \ i = 1;\n    while (i <= n) {\n        if (i % 10 == 1) {\n            count++;\n\
    \        }\n        i++;\n    }\n    return count;\n}\nint main() {\n    auto\
    \ candidate = starts_one_ends;\n    assert(candidate((1)) == (1));\n    assert(candidate((2))\
    \ == (18));\n    assert(candidate((3)) == (180));\n    assert(candidate((4)) ==\
    \ (1800));\n    assert(candidate((5)) == (18000));\n}\n"
  stdout: ''
  stderr: "tmp5cex3_xk: /tmp/tmp5cex3_xk.cpp:19: int main(): Assertion `candidate((2))\
    \ == (18)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ n, return the count of the numbers of n-digit\n// positive integers that start\
    \ or end with 1.\nlong starts_one_ends(long n) {\n    long count = 0;\n    long\
    \ start = 1;\n    long end = 1;\n    while (n != 0) {\n        if (n % 10 == 1)\
    \ {\n            count++;\n            end = end * 10;\n        } else {\n   \
    \         start = start * 10;\n        }\n        n = n / 10;\n    }\n    start\
    \ = start * 10;\n    end = end * 10;\n    if (n == 0) {\n        count++;\n  \
    \  }\n    return count;\n}\nint main() {\n    auto candidate = starts_one_ends;\n\
    \    assert(candidate((1)) == (1));\n    assert(candidate((2)) == (18));\n   \
    \ assert(candidate((3)) == (180));\n    assert(candidate((4)) == (1800));\n  \
    \  assert(candidate((5)) == (18000));\n}\n"
  stdout: ''
  stderr: "tmp0q5qja5w: /tmp/tmp0q5qja5w.cpp:27: int main(): Assertion `candidate((1))\
    \ == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ n, return the count of the numbers of n-digit\n// positive integers that start\
    \ or end with 1.\nlong starts_one_ends(long n) {\n    long count = 0;\n    long\
    \ start = 1;\n    long end = 1;\n    while (n >= end) {\n        end = end * 10;\n\
    \        count++;\n    }\n    while (start <= n) {\n        start = start * 10;\n\
    \        count++;\n    }\n    return count;\n}\nint main() {\n    auto candidate\
    \ = starts_one_ends;\n    assert(candidate((1)) == (1));\n    assert(candidate((2))\
    \ == (18));\n    assert(candidate((3)) == (180));\n    assert(candidate((4)) ==\
    \ (1800));\n    assert(candidate((5)) == (18000));\n}\n"
  stdout: ''
  stderr: "tmp9416e3j8: /tmp/tmp9416e3j8.cpp:21: int main(): Assertion `candidate((1))\
    \ == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ n, return the count of the numbers of n-digit\n// positive integers that start\
    \ or end with 1.\nlong starts_one_ends(long n) {\n    long count = 0;\n    long\
    \ i = 1;\n    while (n > 0) {\n        if (n % 10 == 1) {\n            count++;\n\
    \        }\n        n /= 10;\n        i++;\n    }\n    return count;\n}\nint main()\
    \ {\n    auto candidate = starts_one_ends;\n    assert(candidate((1)) == (1));\n\
    \    assert(candidate((2)) == (18));\n    assert(candidate((3)) == (180));\n \
    \   assert(candidate((4)) == (1800));\n    assert(candidate((5)) == (18000));\n\
    }\n"
  stdout: ''
  stderr: "tmp7yr7d3l2: /tmp/tmp7yr7d3l2.cpp:20: int main(): Assertion `candidate((2))\
    \ == (18)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ n, return the count of the numbers of n-digit\n// positive integers that start\
    \ or end with 1.\nlong starts_one_ends(long n) {\n    long count = 0;\n    long\
    \ start = 1;\n    long end = 1;\n    while (n != 0) {\n        if (n % 10 == 1)\
    \ {\n            count++;\n        }\n        end = end * 10;\n        n /= 10;\n\
    \    }\n    return count;\n}\nint main() {\n    auto candidate = starts_one_ends;\n\
    \    assert(candidate((1)) == (1));\n    assert(candidate((2)) == (18));\n   \
    \ assert(candidate((3)) == (180));\n    assert(candidate((4)) == (1800));\n  \
    \  assert(candidate((5)) == (18000));\n}\n"
  stdout: ''
  stderr: "tmp25qfh4y3: /tmp/tmp25qfh4y3.cpp:21: int main(): Assertion `candidate((2))\
    \ == (18)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ n, return the count of the numbers of n-digit\n// positive integers that start\
    \ or end with 1.\nlong starts_one_ends(long n) {\n    long count = 0;\n    long\
    \ start = 1;\n    long end = 1;\n    while (n > 0) {\n        if (n % 10 == 1)\
    \ {\n            count++;\n            end = n * 10 + end;\n        } else {\n\
    \            start = n * 10 + start;\n        }\n        n /= 10;\n    }\n   \
    \ return count;\n}\nint main() {\n    auto candidate = starts_one_ends;\n    assert(candidate((1))\
    \ == (1));\n    assert(candidate((2)) == (18));\n    assert(candidate((3)) ==\
    \ (180));\n    assert(candidate((4)) == (1800));\n    assert(candidate((5)) ==\
    \ (18000));\n}\n"
  stdout: ''
  stderr: "tmpgycim12t: /tmp/tmpgycim12t.cpp:23: int main(): Assertion `candidate((2))\
    \ == (18)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ n, return the count of the numbers of n-digit\n// positive integers that start\
    \ or end with 1.\nlong starts_one_ends(long n) {\n    long count = 0;\n    long\
    \ start = 1;\n    long end = 1;\n    while (n != 0) {\n        if (n % 10 == 1)\
    \ {\n            count++;\n        }\n        n /= 10;\n    }\n    if (n == 0)\
    \ {\n        count++;\n    }\n    return count;\n}\nint main() {\n    auto candidate\
    \ = starts_one_ends;\n    assert(candidate((1)) == (1));\n    assert(candidate((2))\
    \ == (18));\n    assert(candidate((3)) == (180));\n    assert(candidate((4)) ==\
    \ (1800));\n    assert(candidate((5)) == (18000));\n}\n"
  stdout: ''
  stderr: "tmpgax588_p: /tmp/tmpgax588_p.cpp:22: int main(): Assertion `candidate((1))\
    \ == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ n, return the count of the numbers of n-digit\n// positive integers that start\
    \ or end with 1.\nlong starts_one_ends(long n) {\n    long count = 0;\n    while\
    \ (n > 0) {\n        if (n % 10 == 1) {\n            count++;\n        }\n   \
    \     n /= 10;\n    }\n    return count;\n}\nint main() {\n    auto candidate\
    \ = starts_one_ends;\n    assert(candidate((1)) == (1));\n    assert(candidate((2))\
    \ == (18));\n    assert(candidate((3)) == (180));\n    assert(candidate((4)) ==\
    \ (1800));\n    assert(candidate((5)) == (18000));\n}\n"
  stdout: ''
  stderr: "tmpmonst_30: /tmp/tmpmonst_30.cpp:18: int main(): Assertion `candidate((2))\
    \ == (18)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ n, return the count of the numbers of n-digit\n// positive integers that start\
    \ or end with 1.\nlong starts_one_ends(long n) {\n    long count = 0;\n    while\
    \ (n != 0) {\n        if (n & 1)\n            ++count;\n        n >>= 1;\n   \
    \ }\n    return count;\n}\nint main() {\n    auto candidate = starts_one_ends;\n\
    \    assert(candidate((1)) == (1));\n    assert(candidate((2)) == (18));\n   \
    \ assert(candidate((3)) == (180));\n    assert(candidate((4)) == (1800));\n  \
    \  assert(candidate((5)) == (18000));\n}\n"
  stdout: ''
  stderr: "tmp1nkqaxbv: /tmp/tmp1nkqaxbv.cpp:17: int main(): Assertion `candidate((2))\
    \ == (18)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ n, return the count of the numbers of n-digit\n// positive integers that start\
    \ or end with 1.\nlong starts_one_ends(long n) {\n    long count = 0;\n    long\
    \ start = 1;\n    long end = 1;\n    while (n > 0) {\n        long temp = n;\n\
    \        while (temp > 0) {\n            temp = temp / 10;\n        }\n      \
    \  if (temp == 1) {\n            count++;\n        }\n        temp = n;\n    \
    \    while (temp > 0) {\n            temp = temp / 10;\n        }\n        if\
    \ (temp == end) {\n            count++;\n        }\n        end = end * 10;\n\
    \    }\n    return count;\n}\nint main() {\n    auto candidate = starts_one_ends;\n\
    \    assert(candidate((1)) == (1));\n    assert(candidate((2)) == (18));\n   \
    \ assert(candidate((3)) == (180));\n    assert(candidate((4)) == (1800));\n  \
    \  assert(candidate((5)) == (18000));\n}\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ n, return the count of the numbers of n-digit\n// positive integers that start\
    \ or end with 1.\nlong starts_one_ends(long n) {\n    long count = 0;\n    long\
    \ limit = n;\n    long curr = 1;\n    while (curr < limit) {\n        if (curr\
    \ == 1) {\n            count++;\n        }\n        curr *= 10;\n    }\n    return\
    \ count;\n}\nint main() {\n    auto candidate = starts_one_ends;\n    assert(candidate((1))\
    \ == (1));\n    assert(candidate((2)) == (18));\n    assert(candidate((3)) ==\
    \ (180));\n    assert(candidate((4)) == (1800));\n    assert(candidate((5)) ==\
    \ (18000));\n}\n"
  stdout: ''
  stderr: "tmp5pay78wh: /tmp/tmp5pay78wh.cpp:19: int main(): Assertion `candidate((1))\
    \ == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ n, return the count of the numbers of n-digit\n// positive integers that start\
    \ or end with 1.\nlong starts_one_ends(long n) {\n    long count = 0;\n    while\
    \ (n > 0) {\n        if (n % 10 == 1) {\n            count++;\n        }\n   \
    \     n /= 10;\n    }\n    return count;\n}\nint main() {\n    auto candidate\
    \ = starts_one_ends;\n    assert(candidate((1)) == (1));\n    assert(candidate((2))\
    \ == (18));\n    assert(candidate((3)) == (180));\n    assert(candidate((4)) ==\
    \ (1800));\n    assert(candidate((5)) == (18000));\n}\n"
  stdout: ''
  stderr: "tmpbcpqtwql: /tmp/tmpbcpqtwql.cpp:18: int main(): Assertion `candidate((2))\
    \ == (18)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ n, return the count of the numbers of n-digit\n// positive integers that start\
    \ or end with 1.\nlong starts_one_ends(long n) {\n    long count = 0;\n    long\
    \ start = 1;\n    long end = 1;\n    while (n != 0) {\n        if (n % 10 == 1)\
    \ {\n            count++;\n        }\n        end = end * 10;\n        n /= 10;\n\
    \    }\n    return count;\n}\nint main() {\n    auto candidate = starts_one_ends;\n\
    \    assert(candidate((1)) == (1));\n    assert(candidate((2)) == (18));\n   \
    \ assert(candidate((3)) == (180));\n    assert(candidate((4)) == (1800));\n  \
    \  assert(candidate((5)) == (18000));\n}\n"
  stdout: ''
  stderr: "tmpfkqrnpxr: /tmp/tmpfkqrnpxr.cpp:21: int main(): Assertion `candidate((2))\
    \ == (18)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ n, return the count of the numbers of n-digit\n// positive integers that start\
    \ or end with 1.\nlong starts_one_ends(long n) {\n    long count = 0;\n    while\
    \ (n != 0) {\n        if (n % 10 == 1) {\n            count++;\n        }\n  \
    \      n /= 10;\n    }\n    return count;\n}\nint main() {\n    auto candidate\
    \ = starts_one_ends;\n    assert(candidate((1)) == (1));\n    assert(candidate((2))\
    \ == (18));\n    assert(candidate((3)) == (180));\n    assert(candidate((4)) ==\
    \ (1800));\n    assert(candidate((5)) == (18000));\n}\n"
  stdout: ''
  stderr: "tmpxlyirdzk: /tmp/tmpxlyirdzk.cpp:18: int main(): Assertion `candidate((2))\
    \ == (18)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ n, return the count of the numbers of n-digit\n// positive integers that start\
    \ or end with 1.\nlong starts_one_ends(long n) {\n    long count = 0;\n    long\
    \ m = n;\n    while (m > 0) {\n        if (m % 10 == 1) {\n            count++;\n\
    \        }\n        m /= 10;\n    }\n    return count;\n}\nint main() {\n    auto\
    \ candidate = starts_one_ends;\n    assert(candidate((1)) == (1));\n    assert(candidate((2))\
    \ == (18));\n    assert(candidate((3)) == (180));\n    assert(candidate((4)) ==\
    \ (1800));\n    assert(candidate((5)) == (18000));\n}\n"
  stdout: ''
  stderr: "tmpftjin9md: /tmp/tmpftjin9md.cpp:19: int main(): Assertion `candidate((2))\
    \ == (18)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ n, return the count of the numbers of n-digit\n// positive integers that start\
    \ or end with 1.\nlong starts_one_ends(long n) {\n    long count = 0;\n    long\
    \ start = 1;\n    long end = 1;\n    while (n != 0) {\n        if (n % 10 == 1)\
    \ {\n            count++;\n        }\n        end = end * 10;\n        n /= 10;\n\
    \    }\n    long temp = end;\n    while (temp != start) {\n        if (temp %\
    \ 10 == 1) {\n            count++;\n        }\n        temp = temp / 10;\n   \
    \ }\n    return count;\n}\nint main() {\n    auto candidate = starts_one_ends;\n\
    \    assert(candidate((1)) == (1));\n    assert(candidate((2)) == (18));\n   \
    \ assert(candidate((3)) == (180));\n    assert(candidate((4)) == (1800));\n  \
    \  assert(candidate((5)) == (18000));\n}\n"
  stdout: ''
  stderr: "tmp_n_ita4j: /tmp/tmp_n_ita4j.cpp:28: int main(): Assertion `candidate((2))\
    \ == (18)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ n, return the count of the numbers of n-digit\n// positive integers that start\
    \ or end with 1.\nlong starts_one_ends(long n) {\n    long count = 0;\n    while\
    \ (n > 0) {\n        if (n % 10 == 1) {\n            count++;\n        }\n   \
    \     n /= 10;\n    }\n    return count;\n}\nint main() {\n    auto candidate\
    \ = starts_one_ends;\n    assert(candidate((1)) == (1));\n    assert(candidate((2))\
    \ == (18));\n    assert(candidate((3)) == (180));\n    assert(candidate((4)) ==\
    \ (1800));\n    assert(candidate((5)) == (18000));\n}\n"
  stdout: ''
  stderr: "tmpxjx3am4c: /tmp/tmpxjx3am4c.cpp:18: int main(): Assertion `candidate((2))\
    \ == (18)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ n, return the count of the numbers of n-digit\n// positive integers that start\
    \ or end with 1.\nlong starts_one_ends(long n) {\n    long count = 0;\n    long\
    \ start = 1;\n    long end = 1;\n    long i = 1;\n    while (i <= n) {\n     \
    \   long temp = i;\n        while (temp > 0) {\n            temp = temp / 10;\n\
    \        }\n        if (temp == 1) {\n            count++;\n        }\n      \
    \  temp = i;\n        while (temp > 0) {\n            temp = temp / 10;\n    \
    \    }\n        if (temp == end) {\n            count++;\n        }\n        end\
    \ = end * 10;\n        start = start * 10;\n        i++;\n    }\n    return count;\n\
    }\nint main() {\n    auto candidate = starts_one_ends;\n    assert(candidate((1))\
    \ == (1));\n    assert(candidate((2)) == (18));\n    assert(candidate((3)) ==\
    \ (180));\n    assert(candidate((4)) == (1800));\n    assert(candidate((5)) ==\
    \ (18000));\n}\n"
  stdout: ''
  stderr: "tmphxn1tuzi: /tmp/tmphxn1tuzi.cpp:33: int main(): Assertion `candidate((1))\
    \ == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ n, return the count of the numbers of n-digit\n// positive integers that start\
    \ or end with 1.\nlong starts_one_ends(long n) {\n    long count = 0;\n    long\
    \ start = 1;\n    long end = 1;\n    while (n != 0) {\n        long temp = n;\n\
    \        n /= 10;\n        if (temp == 1) {\n            count++;\n        }\n\
    \        if (temp == end) {\n            end = end * 10;\n        } else {\n \
    \           start = start * 10;\n            end = end * 10;\n        }\n    }\n\
    \    return count;\n}\nint main() {\n    auto candidate = starts_one_ends;\n \
    \   assert(candidate((1)) == (1));\n    assert(candidate((2)) == (18));\n    assert(candidate((3))\
    \ == (180));\n    assert(candidate((4)) == (1800));\n    assert(candidate((5))\
    \ == (18000));\n}\n"
  stdout: ''
  stderr: "tmpjn52nh_6: /tmp/tmpjn52nh_6.cpp:27: int main(): Assertion `candidate((2))\
    \ == (18)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ n, return the count of the numbers of n-digit\n// positive integers that start\
    \ or end with 1.\nlong starts_one_ends(long n) {\n    long count = 0;\n    long\
    \ x = 1;\n    while (x <= n) {\n        if (x % 10 == 1) {\n            count++;\n\
    \        }\n        x *= 10;\n    }\n    return count;\n}\nint main() {\n    auto\
    \ candidate = starts_one_ends;\n    assert(candidate((1)) == (1));\n    assert(candidate((2))\
    \ == (18));\n    assert(candidate((3)) == (180));\n    assert(candidate((4)) ==\
    \ (1800));\n    assert(candidate((5)) == (18000));\n}\n"
  stdout: ''
  stderr: "tmp3_3fnnxt: /tmp/tmp3_3fnnxt.cpp:19: int main(): Assertion `candidate((2))\
    \ == (18)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ n, return the count of the numbers of n-digit\n// positive integers that start\
    \ or end with 1.\nlong starts_one_ends(long n) {\n    long count = 0;\n    long\
    \ limit = pow(10, n);\n    long start = 1;\n    long end = 1;\n    while (start\
    \ <= limit) {\n        if (start % 10 == 1) {\n            count++;\n        }\n\
    \        start *= 10;\n    }\n    while (end <= limit) {\n        if (end % 10\
    \ == 1) {\n            count++;\n        }\n        end *= 10;\n    }\n    return\
    \ count;\n}\nint main() {\n    auto candidate = starts_one_ends;\n    assert(candidate((1))\
    \ == (1));\n    assert(candidate((2)) == (18));\n    assert(candidate((3)) ==\
    \ (180));\n    assert(candidate((4)) == (1800));\n    assert(candidate((5)) ==\
    \ (18000));\n}\n"
  stdout: ''
  stderr: "tmpy2wqea3l: /tmp/tmpy2wqea3l.cpp:26: int main(): Assertion `candidate((1))\
    \ == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ n, return the count of the numbers of n-digit\n// positive integers that start\
    \ or end with 1.\nlong starts_one_ends(long n) {\n    long count = 0;\n    long\
    \ m = n;\n    long a = 1;\n    long b = 1;\n    long c = 1;\n    long d = 1;\n\
    \    long e = 1;\n    long f = 1;\n    long g = 1;\n    long h = 1;\n    long\
    \ i = 1;\n    long j = 1;\n    long k = 1;\n    long l = 1;\n    long m = 1;\n\
    \    long n = 1;\n    long o = 1;\n    long p = 1;\n    long q = 1;\n    long\
    \ r = 1;\n    long s = 1;\n    long t = 1;\n    long u = 1;\n    long v = 1;\n\
    \    long w = 1;\n    long x = 1;\n    long y = 1;\n    long z = 1;\n    long\
    \ a = 1;\n    long b = 1;\n    long c = 1;\n    long d = 1;\n    long e = 1;\n\
    \    long f = 1;\n    long g = 1;\n    long h = 1;\n    long i = 1;\n    long\
    \ j = 1;\n    long k = 1;\n    long l = 1;\n    long m = 1;\n    long n = 1;\n\
    \    long o = 1;\n    long p = 1;\n    long q = 1;\n    long r = 1;\n    long\
    \ s = 1;\n    long t = 1;\n    long u = 1;\n    long v = 1;\n    long w = 1;\n\
    \    long x = 1;\n    long y = 1;\n    long z = 1;\n    long a = 1;\n    long\
    \ b = 1;\n    long c = 1;\n    long d = 1;\n    long e = 1;\n    long f = 1;\n\
    \    long g = 1;\n    long h = 1;\n    long i = 1;\n    long j = 1;\n    long\
    \ k = 1;\n    long l = 1;\n    long m = 1;\n    long n = 1;\n    long o = 1;\n\
    \    long p = 1;\n    long q = 1;\n    long r = 1;\n    long s = 1;\n    long\
    \ t = 1;\n    long u = 1;\n    long v = 1;\n    long w = 1;\n    long x = 1;\n\
    \    long y = 1;\n    long z = 1;\n    long a = 1;\n    long b = 1;\n    long\
    \ c = 1;\n    long d = 1;\n    long e = 1;\n    long f = 1;\n    long g = 1;\n\
    \    long h = 1;\n    long i = 1;\n    long j = 1;\n    long k = 1;\n    long\
    \ l = 1;\n    long m = 1;\n    long n = 1;\n    long o = 1;\n    long p = 1;\n\
    \    long q = 1;\n    long r = 1;\n    long s = 1;\n    long t = 1;\n    long\
    \ u = 1;\n    long v = 1;\n    long w\n}\nint main() {\n    auto candidate = starts_one_ends;\n\
    \    assert(candidate((1)) == (1));\n    assert(candidate((2)) == (18));\n   \
    \ assert(candidate((3)) == (180));\n    assert(candidate((4)) == (1800));\n  \
    \  assert(candidate((5)) == (18000));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpcegu3afg.cpp: In function \u2018long int starts_one_ends(long int)\u2019\
    :\n/tmp/tmpcegu3afg.cpp:20:10: error: redeclaration of \u2018long int m\u2019\n\
    \   20 |     long m = 1;\n      |          ^\n/tmp/tmpcegu3afg.cpp:7:10: note:\
    \ \u2018long int m\u2019 previously declared here\n    7 |     long m = n;\n \
    \     |          ^\n/tmp/tmpcegu3afg.cpp:21:10: error: declaration of \u2018long\
    \ int n\u2019 shadows a parameter\n   21 |     long n = 1;\n      |          ^\n\
    /tmp/tmpcegu3afg.cpp:34:10: error: redeclaration of \u2018long int a\u2019\n \
    \  34 |     long a = 1;\n      |          ^\n/tmp/tmpcegu3afg.cpp:8:10: note:\
    \ \u2018long int a\u2019 previously declared here\n    8 |     long a = 1;\n \
    \     |          ^\n/tmp/tmpcegu3afg.cpp:35:10: error: redeclaration of \u2018\
    long int b\u2019\n   35 |     long b = 1;\n      |          ^\n/tmp/tmpcegu3afg.cpp:9:10:\
    \ note: \u2018long int b\u2019 previously declared here\n    9 |     long b =\
    \ 1;\n      |          ^\n/tmp/tmpcegu3afg.cpp:36:10: error: redeclaration of\
    \ \u2018long int c\u2019\n   36 |     long c = 1;\n      |          ^\n/tmp/tmpcegu3afg.cpp:10:10:\
    \ note: \u2018long int c\u2019 previously declared here\n   10 |     long c =\
    \ 1;\n      |          ^\n/tmp/tmpcegu3afg.cpp:37:10: error: redeclaration of\
    \ \u2018long int d\u2019\n   37 |     long d = 1;\n      |          ^\n/tmp/tmpcegu3afg.cpp:11:10:\
    \ note: \u2018long int d\u2019 previously declared here\n   11 |     long d =\
    \ 1;\n      |          ^\n/tmp/tmpcegu3afg.cpp:38:10: error: redeclaration of\
    \ \u2018long int e\u2019\n   38 |     long e = 1;\n      |          ^\n/tmp/tmpcegu3afg.cpp:12:10:\
    \ note: \u2018long int e\u2019 previously declared here\n   12 |     long e =\
    \ 1;\n      |          ^\n/tmp/tmpcegu3afg.cpp:39:10: error: redeclaration of\
    \ \u2018long int f\u2019\n   39 |     long f = 1;\n      |          ^\n/tmp/tmpcegu3afg.cpp:13:10:\
    \ note: \u2018long int f\u2019 previously declared here\n   13 |     long f =\
    \ 1;\n      |          ^\n/tmp/tmpcegu3afg.cpp:40:10: error: redeclaration of\
    \ \u2018long int g\u2019\n   40 |     long g = 1;\n      |          ^\n/tmp/tmpcegu3afg.cpp:14:10:\
    \ note: \u2018long int g\u2019 previously declared here\n   14 |     long g =\
    \ 1;\n      |          ^\n/tmp/tmpcegu3afg.cpp:41:10: error: redeclaration of\
    \ \u2018long int h\u2019\n   41 |     long h = 1;\n      |          ^\n/tmp/tmpcegu3afg.cpp:15:10:\
    \ note: \u2018long int h\u2019 previously declared here\n   15 |     long h =\
    \ 1;\n      |          ^\n/tmp/tmpcegu3afg.cpp:42:10: error: redeclaration of\
    \ \u2018long int i\u2019\n   42 |     long i = 1;\n      |          ^\n/tmp/tmpcegu3afg.cpp:16:10:\
    \ note: \u2018long int i\u2019 previously declared here\n   16 |     long i =\
    \ 1;\n      |          ^\n/tmp/tmpcegu3afg.cpp:43:10: error: redeclaration of\
    \ \u2018long int j\u2019\n   43 |     long j = 1;\n      |          ^\n/tmp/tmpcegu3afg.cpp:17:10:\
    \ note: \u2018long int j\u2019 previously declared here\n   17 |     long j =\
    \ 1;\n      |          ^\n/tmp/tmpcegu3afg.cpp:44:10: error: redeclaration of\
    \ \u2018long int k\u2019\n   44 |     long k = 1;\n      |          ^\n/tmp/tmpcegu3afg.cpp:18:10:\
    \ note: \u2018long int k\u2019 previously declared here\n   18 |     long k =\
    \ 1;\n      |          ^\n/tmp/tmpcegu3afg.cpp:45:10: error: redeclaration of\
    \ \u2018long int l\u2019\n   45 |     long l = 1;\n      |          ^\n/tmp/tmpcegu3afg.cpp:19:10:\
    \ note: \u2018long int l\u2019 previously declared here\n   19 |     long l =\
    \ 1;\n      |          ^\n/tmp/tmpcegu3afg.cpp:46:10: error: redeclaration of\
    \ \u2018long int m\u2019\n   46 |     long m = 1;\n      |          ^\n/tmp/tmpcegu3afg.cpp:7:10:\
    \ note: \u2018long int m\u2019 previously declared here\n    7 |     long m =\
    \ n;\n      |          ^\n/tmp/tmpcegu3afg.cpp:47:10: error: redeclaration of\
    \ \u2018long int n\u2019\n   47 |     long n = 1;\n      |          ^\n/tmp/tmpcegu3afg.cpp:21:10:\
    \ note: \u2018long int n\u2019 previously declared here\n   21 |     long n =\
    \ 1;\n      |          ^\n/tmp/tmpcegu3afg.cpp:48:10: error: redeclaration of\
    \ \u2018long int o\u2019\n   48 |     long o = 1;\n      |          ^\n/tmp/tmpcegu3afg.cpp:22:10:\
    \ note: \u2018long int o\u2019 previously declared here\n   22 |     long o =\
    \ 1;\n      |          ^\n/tmp/tmpcegu3afg.cpp:49:10: error: redeclaration of\
    \ \u2018long int p\u2019\n   49 |     long p = 1;\n      |          ^\n/tmp/tmpcegu3afg.cpp:23:10:\
    \ note: \u2018long int p\u2019 previously declared here\n   23 |     long p =\
    \ 1;\n      |          ^\n/tmp/tmpcegu3afg.cpp:50:10: error: redeclaration of\
    \ \u2018long int q\u2019\n   50 |     long q = 1;\n      |          ^\n/tmp/tmpcegu3afg.cpp:24:10:\
    \ note: \u2018long int q\u2019 previously declared here\n   24 |     long q =\
    \ 1;\n      |          ^\n/tmp/tmpcegu3afg.cpp:51:10: error: redeclaration of\
    \ \u2018long int r\u2019\n   51 |     long r = 1;\n      |          ^\n/tmp/tmpcegu3afg.cpp:25:10:\
    \ note: \u2018long int r\u2019 previously declared here\n   25 |     long r =\
    \ 1;\n      |          ^\n/tmp/tmpcegu3afg.cpp:52:10: error: redeclaration of\
    \ \u2018long int s\u2019\n   52 |     long s = 1;\n      |          ^\n/tmp/tmpcegu3afg.cpp:26:10:\
    \ note: \u2018long int s\u2019 previously declared here\n   26 |     long s =\
    \ 1;\n      |          ^\n/tmp/tmpcegu3afg.cpp:53:10: error: redeclaration of\
    \ \u2018long int t\u2019\n   53 |     long t = 1;\n      |          ^\n/tmp/tmpcegu3afg.cpp:27:10:\
    \ note: \u2018long int t\u2019 previously declared here\n   27 |     long t =\
    \ 1;\n      |          ^\n/tmp/tmpcegu3afg.cpp:54:10: error: redeclaration of\
    \ \u2018long int u\u2019\n   54 |     long u = 1;\n      |          ^\n/tmp/tmpcegu3afg.cpp:28:10:\
    \ note: \u2018long int u\u2019 previously declared here\n   28 |     long u =\
    \ 1;\n      |          ^\n/tmp/tmpcegu3afg.cpp:55:10: error: redeclaration of\
    \ \u2018long int v\u2019\n   55 |     long v = 1;\n      |          ^\n/tmp/tmpcegu3afg.cpp:29:10:\
    \ note: \u2018long int v\u2019 previously declared here\n   29 |     long v =\
    \ 1;\n      |          ^\n/tmp/tmpcegu3afg.cpp:56:10: error: redeclaration of\
    \ \u2018long int w\u2019\n   56 |     long w = 1;\n      |          ^\n/tmp/tmpcegu3afg.cpp:30:10:\
    \ note: \u2018long int w\u2019 previously declared here\n   30 |     long w =\
    \ 1;\n      |          ^\n/tmp/tmpcegu3afg.cpp:57:10: error: redeclaration of\
    \ \u2018long int x\u2019\n   57 |     long x = 1;\n      |          ^\n/tmp/tmpcegu3afg.cpp:31:10:\
    \ note: \u2018long int x\u2019 previously declared here\n   31 |     long x =\
    \ 1;\n      |          ^\n/tmp/tmpcegu3afg.cpp:58:10: error: redeclaration of\
    \ \u2018long int y\u2019\n   58 |     long y = 1;\n      |          ^\n/tmp/tmpcegu3afg.cpp:32:10:\
    \ note: \u2018long int y\u2019 previously declared here\n   32 |     long y =\
    \ 1;\n      |          ^\n/tmp/tmpcegu3afg.cpp:59:10: error: redeclaration of\
    \ \u2018long int z\u2019\n   59 |     long z = 1;\n      |          ^\n/tmp/tmpcegu3afg.cpp:33:10:\
    \ note: \u2018long int z\u2019 previously declared here\n   33 |     long z =\
    \ 1;\n      |          ^\n/tmp/tmpcegu3afg.cpp:60:10: error: redeclaration of\
    \ \u2018long int a\u2019\n   60 |     long a = 1;\n      |          ^\n/tmp/tmpcegu3afg.cpp:8:10:\
    \ note: \u2018long int a\u2019 previously declared here\n    8 |     long a =\
    \ 1;\n      |          ^\n/tmp/tmpcegu3afg.cpp:61:10: error: redeclaration of\
    \ \u2018long int b\u2019\n   61 |     long b = 1;\n      |          ^\n/tmp/tmpcegu3afg.cpp:9:10:\
    \ note: \u2018long int b\u2019 previously declared here\n    9 |     long b =\
    \ 1;\n      |          ^\n/tmp/tmpcegu3afg.cpp:62:10: error: redeclaration of\
    \ \u2018long int c\u2019\n   62 |     long c = 1;\n      |          ^\n/tmp/tmpcegu3afg.cpp:10:10:\
    \ note: \u2018long int c\u2019 previously declared here\n   10 |     long c =\
    \ 1;\n      |          ^\n/tmp/tmpcegu3afg.cpp:63:10: error: redeclaration of\
    \ \u2018long int d\u2019\n   63 |     long d = 1;\n      |          ^\n/tmp/tmpcegu3afg.cpp:11:10:\
    \ note: \u2018long int d\u2019 previously declared here\n   11 |     long d =\
    \ 1;\n      |          ^\n/tmp/tmpcegu3afg.cpp:64:10: error: redeclaration of\
    \ \u2018long int e\u2019\n   64 |     long e = 1;\n      |          ^\n/tmp/tmpcegu3afg.cpp:12:10:\
    \ note: \u2018long int e\u2019 previously declared here\n   12 |     long e =\
    \ 1;\n      |          ^\n/tmp/tmpcegu3afg.cpp:65:10: error: redeclaration of\
    \ \u2018long int f\u2019\n   65 |     long f = 1;\n      |          ^\n/tmp/tmpcegu3afg.cpp:13:10:\
    \ note: \u2018long int f\u2019 previously declared here\n   13 |     long f =\
    \ 1;\n      |          ^\n/tmp/tmpcegu3afg.cpp:66:10: error: redeclaration of\
    \ \u2018long int g\u2019\n   66 |     long g = 1;\n      |          ^\n/tmp/tmpcegu3afg.cpp:14:10:\
    \ note: \u2018long int g\u2019 previously declared here\n   14 |     long g =\
    \ 1;\n      |          ^\n/tmp/tmpcegu3afg.cpp:67:10: error: redeclaration of\
    \ \u2018long int h\u2019\n   67 |     long h = 1;\n      |          ^\n/tmp/tmpcegu3afg.cpp:15:10:\
    \ note: \u2018long int h\u2019 previously declared here\n   15 |     long h =\
    \ 1;\n      |          ^\n/tmp/tmpcegu3afg.cpp:68:10: error: redeclaration of\
    \ \u2018long int i\u2019\n   68 |     long i = 1;\n      |          ^\n/tmp/tmpcegu3afg.cpp:16:10:\
    \ note: \u2018long int i\u2019 previously declared here\n   16 |     long i =\
    \ 1;\n      |          ^\n/tmp/tmpcegu3afg.cpp:69:10: error: redeclaration of\
    \ \u2018long int j\u2019\n   69 |     long j = 1;\n      |          ^\n/tmp/tmpcegu3afg.cpp:17:10:\
    \ note: \u2018long int j\u2019 previously declared here\n   17 |     long j =\
    \ 1;\n      |          ^\n/tmp/tmpcegu3afg.cpp:70:10: error: redeclaration of\
    \ \u2018long int k\u2019\n   70 |     long k = 1;\n      |          ^\n/tmp/tmpcegu3afg.cpp:18:10:\
    \ note: \u2018long int k\u2019 previously declared here\n   18 |     long k =\
    \ 1;\n      |          ^\n/tmp/tmpcegu3afg.cpp:71:10: error: redeclaration of\
    \ \u2018long int l\u2019\n   71 |     long l = 1;\n      |          ^\n/tmp/tmpcegu3afg.cpp:19:10:\
    \ note: \u2018long int l\u2019 previously declared here\n   19 |     long l =\
    \ 1;\n      |          ^\n/tmp/tmpcegu3afg.cpp:72:10: error: redeclaration of\
    \ \u2018long int m\u2019\n   72 |     long m = 1;\n      |          ^\n/tmp/tmpcegu3afg.cpp:7:10:\
    \ note: \u2018long int m\u2019 previously declared here\n    7 |     long m =\
    \ n;\n      |          ^\n/tmp/tmpcegu3afg.cpp:73:10: error: redeclaration of\
    \ \u2018long int n\u2019\n   73 |     long n = 1;\n      |          ^\n/tmp/tmpcegu3afg.cpp:21:10:\
    \ note: \u2018long int n\u2019 previously declared here\n   21 |     long n =\
    \ 1;\n      |          ^\n/tmp/tmpcegu3afg.cpp:74:10: error: redeclaration of\
    \ \u2018long int o\u2019\n   74 |     long o = 1;\n      |          ^\n/tmp/tmpcegu3afg.cpp:22:10:\
    \ note: \u2018long int o\u2019 previously declared here\n   22 |     long o =\
    \ 1;\n      |          ^\n/tmp/tmpcegu3afg.cpp:75:10: error: redeclaration of\
    \ \u2018long int p\u2019\n   75 |     long p = 1;\n      |          ^\n/tmp/tmpcegu3afg.cpp:23:10:\
    \ note: \u2018long int p\u2019 previously declared here\n   23 |     long p =\
    \ 1;\n      |          ^\n/tmp/tmpcegu3afg.cpp:76:10: error: redeclaration of\
    \ \u2018long int q\u2019\n   76 |     long q = 1;\n      |          ^\n/tmp/tmpcegu3afg.cpp:24:10:\
    \ note: \u2018long int q\u2019 previously declared here\n   24 |     long q =\
    \ 1;\n      |          ^\n/tmp/tmpcegu3afg.cpp:77:10: error: redeclaration of\
    \ \u2018long int r\u2019\n   77 |     long r = 1;\n      |          ^\n/tmp/tmpcegu3afg.cpp:25:10:\
    \ note: \u2018long int r\u2019 previously declared here\n   25 |     long r =\
    \ 1;\n      |          ^\n/tmp/tmpcegu3afg.cpp:78:10: error: redeclaration of\
    \ \u2018long int s\u2019\n   78 |     long s = 1;\n      |          ^\n/tmp/tmpcegu3afg.cpp:26:10:\
    \ note: \u2018long int s\u2019 previously declared here\n   26 |     long s =\
    \ 1;\n      |          ^\n/tmp/tmpcegu3afg.cpp:79:10: error: redeclaration of\
    \ \u2018long int t\u2019\n   79 |     long t = 1;\n      |          ^\n/tmp/tmpcegu3afg.cpp:27:10:\
    \ note: \u2018long int t\u2019 previously declared here\n   27 |     long t =\
    \ 1;\n      |          ^\n/tmp/tmpcegu3afg.cpp:80:10: error: redeclaration of\
    \ \u2018long int u\u2019\n   80 |     long u = 1;\n      |          ^\n/tmp/tmpcegu3afg.cpp:28:10:\
    \ note: \u2018long int u\u2019 previously declared here\n   28 |     long u =\
    \ 1;\n      |          ^\n/tmp/tmpcegu3afg.cpp:81:10: error: redeclaration of\
    \ \u2018long int v\u2019\n   81 |     long v = 1;\n      |          ^\n/tmp/tmpcegu3afg.cpp:29:10:\
    \ note: \u2018long int v\u2019 previously declared here\n   29 |     long v =\
    \ 1;\n      |          ^\n/tmp/tmpcegu3afg.cpp:82:10: error: redeclaration of\
    \ \u2018long int w\u2019\n   82 |     long w = 1;\n      |          ^\n/tmp/tmpcegu3afg.cpp:30:10:\
    \ note: \u2018long int w\u2019 previously declared here\n   30 |     long w =\
    \ 1;\n      |          ^\n/tmp/tmpcegu3afg.cpp:83:10: error: redeclaration of\
    \ \u2018long int x\u2019\n   83 |     long x = 1;\n      |          ^\n/tmp/tmpcegu3afg.cpp:31:10:\
    \ note: \u2018long int x\u2019 previously declared here\n   31 |     long x =\
    \ 1;\n      |          ^\n/tmp/tmpcegu3afg.cpp:84:10: error: redeclaration of\
    \ \u2018long int y\u2019\n   84 |     long y = 1;\n      |          ^\n/tmp/tmpcegu3afg.cpp:32:10:\
    \ note: \u2018long int y\u2019 previously declared here\n   32 |     long y =\
    \ 1;\n      |          ^\n/tmp/tmpcegu3afg.cpp:85:10: error: redeclaration of\
    \ \u2018long int z\u2019\n   85 |     long z = 1;\n      |          ^\n/tmp/tmpcegu3afg.cpp:33:10:\
    \ note: \u2018long int z\u2019 previously declared here\n   33 |     long z =\
    \ 1;\n      |          ^\n/tmp/tmpcegu3afg.cpp:86:10: error: redeclaration of\
    \ \u2018long int a\u2019\n   86 |     long a = 1;\n      |          ^\n/tmp/tmpcegu3afg.cpp:8:10:\
    \ note: \u2018long int a\u2019 previously declared here\n    8 |     long a =\
    \ 1;\n      |          ^\n/tmp/tmpcegu3afg.cpp:87:10: error: redeclaration of\
    \ \u2018long int b\u2019\n   87 |     long b = 1;\n      |          ^\n/tmp/tmpcegu3afg.cpp:9:10:\
    \ note: \u2018long int b\u2019 previously declared here\n    9 |     long b =\
    \ 1;\n      |          ^\n/tmp/tmpcegu3afg.cpp:88:10: error: redeclaration of\
    \ \u2018long int c\u2019\n   88 |     long c = 1;\n      |          ^\n/tmp/tmpcegu3afg.cpp:10:10:\
    \ note: \u2018long int c\u2019 previously declared here\n   10 |     long c =\
    \ 1;\n      |          ^\n/tmp/tmpcegu3afg.cpp:89:10: error: redeclaration of\
    \ \u2018long int d\u2019\n   89 |     long d = 1;\n      |          ^\n/tmp/tmpcegu3afg.cpp:11:10:\
    \ note: \u2018long int d\u2019 previously declared here\n   11 |     long d =\
    \ 1;\n      |          ^\n/tmp/tmpcegu3afg.cpp:90:10: error: redeclaration of\
    \ \u2018long int e\u2019\n   90 |     long e = 1;\n      |          ^\n/tmp/tmpcegu3afg.cpp:12:10:\
    \ note: \u2018long int e\u2019 previously declared here\n   12 |     long e =\
    \ 1;\n      |          ^\n/tmp/tmpcegu3afg.cpp:91:10: error: redeclaration of\
    \ \u2018long int f\u2019\n   91 |     long f = 1;\n      |          ^\n/tmp/tmpcegu3afg.cpp:13:10:\
    \ note: \u2018long int f\u2019 previously declared here\n   13 |     long f =\
    \ 1;\n      |          ^\n/tmp/tmpcegu3afg.cpp:92:10: error: redeclaration of\
    \ \u2018long int g\u2019\n   92 |     long g = 1;\n      |          ^\n/tmp/tmpcegu3afg.cpp:14:10:\
    \ note: \u2018long int g\u2019 previously declared here\n   14 |     long g =\
    \ 1;\n      |          ^\n/tmp/tmpcegu3afg.cpp:93:10: error: redeclaration of\
    \ \u2018long int h\u2019\n   93 |     long h = 1;\n      |          ^\n/tmp/tmpcegu3afg.cpp:15:10:\
    \ note: \u2018long int h\u2019 previously declared here\n   15 |     long h =\
    \ 1;\n      |          ^\n/tmp/tmpcegu3afg.cpp:94:10: error: redeclaration of\
    \ \u2018long int i\u2019\n   94 |     long i = 1;\n      |          ^\n/tmp/tmpcegu3afg.cpp:16:10:\
    \ note: \u2018long int i\u2019 previously declared here\n   16 |     long i =\
    \ 1;\n      |          ^\n/tmp/tmpcegu3afg.cpp:95:10: error: redeclaration of\
    \ \u2018long int j\u2019\n   95 |     long j = 1;\n      |          ^\n/tmp/tmpcegu3afg.cpp:17:10:\
    \ note: \u2018long int j\u2019 previously declared here\n   17 |     long j =\
    \ 1;\n      |          ^\n/tmp/tmpcegu3afg.cpp:96:10: error: redeclaration of\
    \ \u2018long int k\u2019\n   96 |     long k = 1;\n      |          ^\n/tmp/tmpcegu3afg.cpp:18:10:\
    \ note: \u2018long int k\u2019 previously declared here\n   18 |     long k =\
    \ 1;\n      |          ^\n/tmp/tmpcegu3afg.cpp:97:10: error: redeclaration of\
    \ \u2018long int l\u2019\n   97 |     long l = 1;\n      |          ^\n/tmp/tmpcegu3afg.cpp:19:10:\
    \ note: \u2018long int l\u2019 previously declared here\n   19 |     long l =\
    \ 1;\n      |          ^\n/tmp/tmpcegu3afg.cpp:98:10: error: redeclaration of\
    \ \u2018long int m\u2019\n   98 |     long m = 1;\n      |          ^\n/tmp/tmpcegu3afg.cpp:7:10:\
    \ note: \u2018long int m\u2019 previously declared here\n    7 |     long m =\
    \ n;\n      |          ^\n/tmp/tmpcegu3afg.cpp:99:10: error: redeclaration of\
    \ \u2018long int n\u2019\n   99 |     long n = 1;\n      |          ^\n/tmp/tmpcegu3afg.cpp:21:10:\
    \ note: \u2018long int n\u2019 previously declared here\n   21 |     long n =\
    \ 1;\n      |          ^\n/tmp/tmpcegu3afg.cpp:100:10: error: redeclaration of\
    \ \u2018long int o\u2019\n  100 |     long o = 1;\n      |          ^\n/tmp/tmpcegu3afg.cpp:22:10:\
    \ note: \u2018long int o\u2019 previously declared here\n   22 |     long o =\
    \ 1;\n      |          ^\n/tmp/tmpcegu3afg.cpp:101:10: error: redeclaration of\
    \ \u2018long int p\u2019\n  101 |     long p = 1;\n      |          ^\n/tmp/tmpcegu3afg.cpp:23:10:\
    \ note: \u2018long int p\u2019 previously declared here\n   23 |     long p =\
    \ 1;\n      |          ^\n/tmp/tmpcegu3afg.cpp:102:10: error: redeclaration of\
    \ \u2018long int q\u2019\n  102 |     long q = 1;\n      |          ^\n/tmp/tmpcegu3afg.cpp:24:10:\
    \ note: \u2018long int q\u2019 previously declared here\n   24 |     long q =\
    \ 1;\n      |          ^\n/tmp/tmpcegu3afg.cpp:103:10: error: redeclaration of\
    \ \u2018long int r\u2019\n  103 |     long r = 1;\n      |          ^\n/tmp/tmpcegu3afg.cpp:25:10:\
    \ note: \u2018long int r\u2019 previously declared here\n   25 |     long r =\
    \ 1;\n      |          ^\n/tmp/tmpcegu3afg.cpp:104:10: error: redeclaration of\
    \ \u2018long int s\u2019\n  104 |     long s = 1;\n      |          ^\n/tmp/tmpcegu3afg.cpp:26:10:\
    \ note: \u2018long int s\u2019 previously declared here\n   26 |     long s =\
    \ 1;\n      |          ^\n/tmp/tmpcegu3afg.cpp:105:10: error: redeclaration of\
    \ \u2018long int t\u2019\n  105 |     long t = 1;\n      |          ^\n/tmp/tmpcegu3afg.cpp:27:10:\
    \ note: \u2018long int t\u2019 previously declared here\n   27 |     long t =\
    \ 1;\n      |          ^\n/tmp/tmpcegu3afg.cpp:106:10: error: redeclaration of\
    \ \u2018long int u\u2019\n  106 |     long u = 1;\n      |          ^\n/tmp/tmpcegu3afg.cpp:28:10:\
    \ note: \u2018long int u\u2019 previously declared here\n   28 |     long u =\
    \ 1;\n      |          ^\n/tmp/tmpcegu3afg.cpp:107:10: error: redeclaration of\
    \ \u2018long int v\u2019\n  107 |     long v = 1;\n      |          ^\n/tmp/tmpcegu3afg.cpp:29:10:\
    \ note: \u2018long int v\u2019 previously declared here\n   29 |     long v =\
    \ 1;\n      |          ^\n/tmp/tmpcegu3afg.cpp:109:1: error: expected initializer\
    \ before \u2018}\u2019 token\n  109 | }\n      | ^\n/tmp/tmpcegu3afg.cpp:109:1:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ n, return the count of the numbers of n-digit\n// positive integers that start\
    \ or end with 1.\nlong starts_one_ends(long n) {\n    long count = 0;\n    long\
    \ start = 1;\n    long end = 1;\n    while (n >= end) {\n        end = end * 10;\n\
    \        count++;\n    }\n    while (start <= n) {\n        start = start * 10;\n\
    \        count++;\n    }\n    return count;\n}\nint main() {\n    auto candidate\
    \ = starts_one_ends;\n    assert(candidate((1)) == (1));\n    assert(candidate((2))\
    \ == (18));\n    assert(candidate((3)) == (180));\n    assert(candidate((4)) ==\
    \ (1800));\n    assert(candidate((5)) == (18000));\n}\n"
  stdout: ''
  stderr: "tmpzxtmoof7: /tmp/tmpzxtmoof7.cpp:21: int main(): Assertion `candidate((1))\
    \ == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ n, return the count of the numbers of n-digit\n// positive integers that start\
    \ or end with 1.\nlong starts_one_ends(long n) {\n    long count = 0;\n    long\
    \ start = 1;\n    long end = 1;\n    long remain = n;\n    while (remain > 0)\
    \ {\n        if (remain % 10 == 1) {\n            count++;\n        }\n      \
    \  remain /= 10;\n    }\n    return count;\n}\nint main() {\n    auto candidate\
    \ = starts_one_ends;\n    assert(candidate((1)) == (1));\n    assert(candidate((2))\
    \ == (18));\n    assert(candidate((3)) == (180));\n    assert(candidate((4)) ==\
    \ (1800));\n    assert(candidate((5)) == (18000));\n}\n"
  stdout: ''
  stderr: "tmp7yt2eh6j: /tmp/tmp7yt2eh6j.cpp:21: int main(): Assertion `candidate((2))\
    \ == (18)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ n, return the count of the numbers of n-digit\n// positive integers that start\
    \ or end with 1.\nlong starts_one_ends(long n) {\n    long count = 0;\n    long\
    \ start = 1;\n    long end = 1;\n    while (n != 0) {\n        if (n % 10 == 1)\
    \ {\n            count++;\n            end = end * 10;\n        }\n        if\
    \ (n % 10 == 0) {\n            count++;\n            start = start * 10;\n   \
    \     }\n        n = n / 10;\n    }\n    return count;\n}\nint main() {\n    auto\
    \ candidate = starts_one_ends;\n    assert(candidate((1)) == (1));\n    assert(candidate((2))\
    \ == (18));\n    assert(candidate((3)) == (180));\n    assert(candidate((4)) ==\
    \ (1800));\n    assert(candidate((5)) == (18000));\n}\n"
  stdout: ''
  stderr: "tmpoij68u1u: /tmp/tmpoij68u1u.cpp:25: int main(): Assertion `candidate((2))\
    \ == (18)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ n, return the count of the numbers of n-digit\n// positive integers that start\
    \ or end with 1.\nlong starts_one_ends(long n) {\n    long count = 0;\n    long\
    \ start = 1;\n    long end = 1;\n    while (n != 0) {\n        if (n / 10 == 1)\
    \ {\n            count++;\n        }\n        end = end * 10;\n        n /= 10;\n\
    \    }\n    if (start == 1) {\n        count++;\n    }\n    return count;\n}\n\
    int main() {\n    auto candidate = starts_one_ends;\n    assert(candidate((1))\
    \ == (1));\n    assert(candidate((2)) == (18));\n    assert(candidate((3)) ==\
    \ (180));\n    assert(candidate((4)) == (1800));\n    assert(candidate((5)) ==\
    \ (18000));\n}\n"
  stdout: ''
  stderr: "tmp4y_omey5: /tmp/tmp4y_omey5.cpp:24: int main(): Assertion `candidate((2))\
    \ == (18)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ n, return the count of the numbers of n-digit\n// positive integers that start\
    \ or end with 1.\nlong starts_one_ends(long n) {\n    long count = 0;\n    long\
    \ x = 1;\n    while (x != 0) {\n        if (x % 10 == 1) {\n            count++;\n\
    \        }\n        x /= 10;\n    }\n    return count;\n}\nint main() {\n    auto\
    \ candidate = starts_one_ends;\n    assert(candidate((1)) == (1));\n    assert(candidate((2))\
    \ == (18));\n    assert(candidate((3)) == (180));\n    assert(candidate((4)) ==\
    \ (1800));\n    assert(candidate((5)) == (18000));\n}\n"
  stdout: ''
  stderr: "tmpkisq66c6: /tmp/tmpkisq66c6.cpp:19: int main(): Assertion `candidate((2))\
    \ == (18)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ n, return the count of the numbers of n-digit\n// positive integers that start\
    \ or end with 1.\nlong starts_one_ends(long n) {\n    long count = 0;\n    long\
    \ start = 1;\n    long end = 1;\n    while (n >= start) {\n        start = end\
    \ + 1;\n        end = start + 1;\n        count += 1;\n    }\n    return count;\n\
    }\nint main() {\n    auto candidate = starts_one_ends;\n    assert(candidate((1))\
    \ == (1));\n    assert(candidate((2)) == (18));\n    assert(candidate((3)) ==\
    \ (180));\n    assert(candidate((4)) == (1800));\n    assert(candidate((5)) ==\
    \ (18000));\n}\n"
  stdout: ''
  stderr: "tmp0tcf95sm: /tmp/tmp0tcf95sm.cpp:19: int main(): Assertion `candidate((2))\
    \ == (18)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ n, return the count of the numbers of n-digit\n// positive integers that start\
    \ or end with 1.\nlong starts_one_ends(long n) {\n    long count = 0;\n    long\
    \ start = 1;\n    long end = 1;\n    while (n > 0) {\n        if (n / start ==\
    \ end) {\n            count++;\n        }\n        start = start + end;\n    \
    \    end = end + end;\n        n = n / 10;\n    }\n    return count;\n}\nint main()\
    \ {\n    auto candidate = starts_one_ends;\n    assert(candidate((1)) == (1));\n\
    \    assert(candidate((2)) == (18));\n    assert(candidate((3)) == (180));\n \
    \   assert(candidate((4)) == (1800));\n    assert(candidate((5)) == (18000));\n\
    }\n"
  stdout: ''
  stderr: "tmpo78pelcw: /tmp/tmpo78pelcw.cpp:22: int main(): Assertion `candidate((2))\
    \ == (18)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ n, return the count of the numbers of n-digit\n// positive integers that start\
    \ or end with 1.\nlong starts_one_ends(long n) {\n    long count = 0;\n    long\
    \ start = 1;\n    long end = 1;\n    while (n > 0) {\n        if (n % 10 == 1)\
    \ {\n            count++;\n        }\n        n /= 10;\n    }\n    if (n == 0)\
    \ {\n        return count;\n    }\n    while (n > 0) {\n        if (n % 10 ==\
    \ 1) {\n            count++;\n        }\n        n /= 10;\n    }\n    return count;\n\
    }\nint main() {\n    auto candidate = starts_one_ends;\n    assert(candidate((1))\
    \ == (1));\n    assert(candidate((2)) == (18));\n    assert(candidate((3)) ==\
    \ (180));\n    assert(candidate((4)) == (1800));\n    assert(candidate((5)) ==\
    \ (18000));\n}\n"
  stdout: ''
  stderr: "tmpumu0n5zi: /tmp/tmpumu0n5zi.cpp:29: int main(): Assertion `candidate((2))\
    \ == (18)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ n, return the count of the numbers of n-digit\n// positive integers that start\
    \ or end with 1.\nlong starts_one_ends(long n) {\n    long count = 0;\n    long\
    \ start = 1;\n    long end = 1;\n    while (n > 0) {\n        if (n % 10 == 1)\
    \ {\n            count++;\n            end = n * 10;\n        } else {\n     \
    \       start = n * 10;\n        }\n        n /= 10;\n    }\n    return count;\n\
    }\nint main() {\n    auto candidate = starts_one_ends;\n    assert(candidate((1))\
    \ == (1));\n    assert(candidate((2)) == (18));\n    assert(candidate((3)) ==\
    \ (180));\n    assert(candidate((4)) == (1800));\n    assert(candidate((5)) ==\
    \ (18000));\n}\n"
  stdout: ''
  stderr: "tmpqn5fxhz_: /tmp/tmpqn5fxhz_.cpp:23: int main(): Assertion `candidate((2))\
    \ == (18)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ n, return the count of the numbers of n-digit\n// positive integers that start\
    \ or end with 1.\nlong starts_one_ends(long n) {\n    long count = 0;\n    long\
    \ start = 1;\n    long end = 1;\n    while (n >= end) {\n        end = end * 10;\n\
    \        count += 1;\n    }\n    while (start <= n) {\n        start = start *\
    \ 10;\n        count += 1;\n    }\n    return count;\n}\nint main() {\n    auto\
    \ candidate = starts_one_ends;\n    assert(candidate((1)) == (1));\n    assert(candidate((2))\
    \ == (18));\n    assert(candidate((3)) == (180));\n    assert(candidate((4)) ==\
    \ (1800));\n    assert(candidate((5)) == (18000));\n}\n"
  stdout: ''
  stderr: "tmpdle9pgpn: /tmp/tmpdle9pgpn.cpp:21: int main(): Assertion `candidate((1))\
    \ == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ n, return the count of the numbers of n-digit\n// positive integers that start\
    \ or end with 1.\nlong starts_one_ends(long n) {\n    long count = 0;\n    long\
    \ i = 1;\n    while (i <= n) {\n        if (i % 10 == 1) {\n            count++;\n\
    \        }\n        i++;\n    }\n    return count;\n}\nint main() {\n    auto\
    \ candidate = starts_one_ends;\n    assert(candidate((1)) == (1));\n    assert(candidate((2))\
    \ == (18));\n    assert(candidate((3)) == (180));\n    assert(candidate((4)) ==\
    \ (1800));\n    assert(candidate((5)) == (18000));\n}\n"
  stdout: ''
  stderr: "tmppk7xc2ri: /tmp/tmppk7xc2ri.cpp:19: int main(): Assertion `candidate((2))\
    \ == (18)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ n, return the count of the numbers of n-digit\n// positive integers that start\
    \ or end with 1.\nlong starts_one_ends(long n) {\n    long count = 0;\n    long\
    \ start = 1;\n    long end = 1;\n    while (n != 0) {\n        if (n % 10 == 1)\
    \ {\n            count++;\n            end = end * 10;\n        }\n        n /=\
    \ 10;\n    }\n    long temp = end;\n    while (temp != start) {\n        temp\
    \ = temp * 10;\n    }\n    return count;\n}\nint main() {\n    auto candidate\
    \ = starts_one_ends;\n    assert(candidate((1)) == (1));\n    assert(candidate((2))\
    \ == (18));\n    assert(candidate((3)) == (180));\n    assert(candidate((4)) ==\
    \ (1800));\n    assert(candidate((5)) == (18000));\n}\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ n, return the count of the numbers of n-digit\n// positive integers that start\
    \ or end with 1.\nlong starts_one_ends(long n) {\n    long count = 0;\n    long\
    \ start = 1;\n    long end = 1;\n    while (n >= end) {\n        end = end * 10;\n\
    \        count++;\n    }\n    while (start <= n) {\n        start = start * 10;\n\
    \        count++;\n    }\n    return count;\n}\nint main() {\n    auto candidate\
    \ = starts_one_ends;\n    assert(candidate((1)) == (1));\n    assert(candidate((2))\
    \ == (18));\n    assert(candidate((3)) == (180));\n    assert(candidate((4)) ==\
    \ (1800));\n    assert(candidate((5)) == (18000));\n}\n"
  stdout: ''
  stderr: "tmpvt8lyfq2: /tmp/tmpvt8lyfq2.cpp:21: int main(): Assertion `candidate((1))\
    \ == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ n, return the count of the numbers of n-digit\n// positive integers that start\
    \ or end with 1.\nlong starts_one_ends(long n) {\n    long count = 0;\n    long\
    \ limit = n;\n    while (limit > 0) {\n        long remainder = limit % 10;\n\
    \        if (remainder == 1) {\n            count++;\n        }\n        limit\
    \ = limit / 10;\n    }\n    return count;\n}\nint main() {\n    auto candidate\
    \ = starts_one_ends;\n    assert(candidate((1)) == (1));\n    assert(candidate((2))\
    \ == (18));\n    assert(candidate((3)) == (180));\n    assert(candidate((4)) ==\
    \ (1800));\n    assert(candidate((5)) == (18000));\n}\n"
  stdout: ''
  stderr: "tmp3flthvvp: /tmp/tmp3flthvvp.cpp:20: int main(): Assertion `candidate((2))\
    \ == (18)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ n, return the count of the numbers of n-digit\n// positive integers that start\
    \ or end with 1.\nlong starts_one_ends(long n) {\n    long count = 0;\n    long\
    \ start = 1;\n    long end = 1;\n    while (n > 0) {\n        if (n % 10 == 1)\
    \ {\n            count++;\n        }\n        end = end * 10;\n        n /= 10;\n\
    \    }\n    long temp = end;\n    while (temp != start) {\n        if (temp %\
    \ 10 == 1) {\n            count++;\n        }\n        temp = temp / 10;\n   \
    \ }\n    return count;\n}\nint main() {\n    auto candidate = starts_one_ends;\n\
    \    assert(candidate((1)) == (1));\n    assert(candidate((2)) == (18));\n   \
    \ assert(candidate((3)) == (180));\n    assert(candidate((4)) == (1800));\n  \
    \  assert(candidate((5)) == (18000));\n}\n"
  stdout: ''
  stderr: "tmp0m1w9yyh: /tmp/tmp0m1w9yyh.cpp:28: int main(): Assertion `candidate((2))\
    \ == (18)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ n, return the count of the numbers of n-digit\n// positive integers that start\
    \ or end with 1.\nlong starts_one_ends(long n) {\n    long count = 0;\n    long\
    \ limit = n;\n    long cur = 1;\n    while (cur <= limit) {\n        if (cur %\
    \ 10 == 1) {\n            count++;\n        }\n        cur++;\n    }\n    return\
    \ count;\n}\nint main() {\n    auto candidate = starts_one_ends;\n    assert(candidate((1))\
    \ == (1));\n    assert(candidate((2)) == (18));\n    assert(candidate((3)) ==\
    \ (180));\n    assert(candidate((4)) == (1800));\n    assert(candidate((5)) ==\
    \ (18000));\n}\n"
  stdout: ''
  stderr: "tmp90oll46h: /tmp/tmp90oll46h.cpp:20: int main(): Assertion `candidate((2))\
    \ == (18)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ n, return the count of the numbers of n-digit\n// positive integers that start\
    \ or end with 1.\nlong starts_one_ends(long n) {\n    long count = 0;\n    long\
    \ start = 1;\n    long end = 1;\n    while (n > 0) {\n        long digit = n %\
    \ 10;\n        n /= 10;\n        if (digit == 1) {\n            count++;\n   \
    \     } else {\n            if (start == 1) {\n                start = digit;\n\
    \            } else {\n                end = digit;\n            }\n        }\n\
    \    }\n    if (start == 1) {\n        count++;\n    }\n    if (end == 1) {\n\
    \        count++;\n    }\n    return count;\n}\nint main() {\n    auto candidate\
    \ = starts_one_ends;\n    assert(candidate((1)) == (1));\n    assert(candidate((2))\
    \ == (18));\n    assert(candidate((3)) == (180));\n    assert(candidate((4)) ==\
    \ (1800));\n    assert(candidate((5)) == (18000));\n}\n"
  stdout: ''
  stderr: "tmp3b_ca6kn: /tmp/tmp3b_ca6kn.cpp:32: int main(): Assertion `candidate((1))\
    \ == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ n, return the count of the numbers of n-digit\n// positive integers that start\
    \ or end with 1.\nlong starts_one_ends(long n) {\n    long count = 0;\n    long\
    \ i = 1;\n    while (i <= n) {\n        if (i % 10 == 1) {\n            count++;\n\
    \        }\n        i++;\n    }\n    return count;\n}\nint main() {\n    auto\
    \ candidate = starts_one_ends;\n    assert(candidate((1)) == (1));\n    assert(candidate((2))\
    \ == (18));\n    assert(candidate((3)) == (180));\n    assert(candidate((4)) ==\
    \ (1800));\n    assert(candidate((5)) == (18000));\n}\n"
  stdout: ''
  stderr: "tmp0bbzm7_1: /tmp/tmp0bbzm7_1.cpp:19: int main(): Assertion `candidate((2))\
    \ == (18)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ n, return the count of the numbers of n-digit\n// positive integers that start\
    \ or end with 1.\nlong starts_one_ends(long n) {\n    long count = 0;\n    long\
    \ i = 1;\n    while (i <= n) {\n        if (i % 10 == 1) {\n            count++;\n\
    \        }\n        i++;\n    }\n    return count;\n}\nint main() {\n    auto\
    \ candidate = starts_one_ends;\n    assert(candidate((1)) == (1));\n    assert(candidate((2))\
    \ == (18));\n    assert(candidate((3)) == (180));\n    assert(candidate((4)) ==\
    \ (1800));\n    assert(candidate((5)) == (18000));\n}\n"
  stdout: ''
  stderr: "tmpykn0yg8b: /tmp/tmpykn0yg8b.cpp:19: int main(): Assertion `candidate((2))\
    \ == (18)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ n, return the count of the numbers of n-digit\n// positive integers that start\
    \ or end with 1.\nlong starts_one_ends(long n) {\n    long count = 0;\n    long\
    \ start = 1;\n    long end = 1;\n    while (n != 0) {\n        if (n % 10 == 1)\
    \ {\n            count++;\n        }\n        end = end * 10;\n        n /= 10;\n\
    \    }\n    return count;\n}\nint main() {\n    auto candidate = starts_one_ends;\n\
    \    assert(candidate((1)) == (1));\n    assert(candidate((2)) == (18));\n   \
    \ assert(candidate((3)) == (180));\n    assert(candidate((4)) == (1800));\n  \
    \  assert(candidate((5)) == (18000));\n}\n"
  stdout: ''
  stderr: "tmpav6g4ana: /tmp/tmpav6g4ana.cpp:21: int main(): Assertion `candidate((2))\
    \ == (18)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ n, return the count of the numbers of n-digit\n// positive integers that start\
    \ or end with 1.\nlong starts_one_ends(long n) {\n    long count = 0;\n    long\
    \ start = 1;\n    long end = 1;\n    while (n != 0) {\n        long temp = n %\
    \ 10;\n        if (temp == 1) {\n            count++;\n        }\n        end\
    \ = temp;\n        n /= 10;\n    }\n    return count;\n}\nint main() {\n    auto\
    \ candidate = starts_one_ends;\n    assert(candidate((1)) == (1));\n    assert(candidate((2))\
    \ == (18));\n    assert(candidate((3)) == (180));\n    assert(candidate((4)) ==\
    \ (1800));\n    assert(candidate((5)) == (18000));\n}\n"
  stdout: ''
  stderr: "tmpiyhhj436: /tmp/tmpiyhhj436.cpp:22: int main(): Assertion `candidate((2))\
    \ == (18)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ n, return the count of the numbers of n-digit\n// positive integers that start\
    \ or end with 1.\nlong starts_one_ends(long n) {\n    long count = 0;\n    while\
    \ (n > 0) {\n        if (n % 10 == 1) {\n            count++;\n        }\n   \
    \     n /= 10;\n    }\n    return count;\n}\nint main() {\n    auto candidate\
    \ = starts_one_ends;\n    assert(candidate((1)) == (1));\n    assert(candidate((2))\
    \ == (18));\n    assert(candidate((3)) == (180));\n    assert(candidate((4)) ==\
    \ (1800));\n    assert(candidate((5)) == (18000));\n}\n"
  stdout: ''
  stderr: "tmp29absjml: /tmp/tmp29absjml.cpp:18: int main(): Assertion `candidate((2))\
    \ == (18)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ n, return the count of the numbers of n-digit\n// positive integers that start\
    \ or end with 1.\nlong starts_one_ends(long n) {\n    long count = 0;\n    long\
    \ start = 1;\n    long end = 1;\n    while (n > 0) {\n        long temp = n;\n\
    \        while (temp > 0) {\n            temp = temp / 10;\n        }\n      \
    \  if (temp == 1) {\n            count++;\n        }\n        temp = n;\n    \
    \    while (temp > 0) {\n            temp = temp / 10;\n        }\n        if\
    \ (temp == end) {\n            count++;\n        }\n        end = end * 10;\n\
    \    }\n    return count;\n}\nint main() {\n    auto candidate = starts_one_ends;\n\
    \    assert(candidate((1)) == (1));\n    assert(candidate((2)) == (18));\n   \
    \ assert(candidate((3)) == (180));\n    assert(candidate((4)) == (1800));\n  \
    \  assert(candidate((5)) == (18000));\n}\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ n, return the count of the numbers of n-digit\n// positive integers that start\
    \ or end with 1.\nlong starts_one_ends(long n) {\n    long count = 0;\n    long\
    \ remainder = n % 10;\n    long last_digit = n % 100;\n    long last_digit_of_last_digit\
    \ = last_digit % 10;\n    long last_digit_of_last_digit_of_last_digit = last_digit_of_last_digit\
    \ % 10;\n    long last_digit_of_last_digit_of_last_digit_of_last_digit = last_digit_of_last_digit_of_last_digit\
    \ % 10;\n    long last_digit_of_last_digit_of_last_digit_of_last_digit_of_last_digit\
    \ = last_digit_of_last_digit_of_last_digit_of_last_digit % 10;\n    long last_digit_of_last_digit_of_last_digit_of_last_digit_of_last_digit_of_last_digit\
    \ = last_digit_of_last_digit_of_last_digit_of_last_digit_of_last_digit % 10;\n\
    \    long last_digit_of_last_digit_of_last_digit_of_last_digit_of_last_digit_of_last_digit_of_last_digit\
    \ = last_digit_of_last_digit_of_last_digit_of_last_digit_of_last_digit_of_last_digit\
    \ % 10;\n    long last_digit_of_last_digit_of_last_digit_of_last_digit_of_last_digit_of_last_digit_of_last_digit_of_last_digit\
    \ = last_digit_of_last_digit_of_last_digit_of_last_digit_of_last_digit_of_last_digit_of_last_digit\
    \ % 10;\n    long last_digit_of_last_digit_of_last_digit_of_last_digit_of_last_digit_of_last_digit_of_last_digit_of_last_digit\
    \ = last_digit_of_last_digit_of_last_digit_of_last_digit_of_last_digit_of_last_digit_of_last_digit_of_last_digit\
    \ % 10;\n    long last_digit_of_last_digit_of_last_digit_of_last_digit_of_last_digit_of_last_digit_of_last_digit_of_last_digit_of_last_digit\
    \ = last_digit_of_last_digit_of_last_digit_of_last_digit_of_last_digit_of_last_digit_of_last_digit_of_last_digit_of_last_digit\
    \ % 10;\n    long last_digit_of_last_digit_of_last_digit_of_last_digit_of_last_digit_of_last_digit_of_last_digit_of_last_digit_of_last_digit\
    \ = last_digit_of_last_digit_of_last_digit_of_last_digit_of_last_digit_of_last_digit_of_last_digit_of_last_digit_of_last_digit_of_last_digit\
    \ % 10;\n    long last_digit_of_last_digit_of_last_digit_of_last_digit_of_last_digit_of_last_digit_of_last_digit_of_last_digit_of_last_digit_of_last_digit\
    \ = last_digit_of_last_digit_of_last_digit_of_last_digit_of_last_digit_of_last_digit_of_last_digit_of_last_digit_of_last_digit_of_last_digit\
    \ % 10;\n    long last_digit_of_last_digit_of_last_digit_of_last_digit_of_last_digit_of_last_digit_of_last_digit_of_last_digit_of_last_digit_of_last_digit\
    \ = last_digit_of_last_digit_of_last_digit_of_\n}\nint main() {\n    auto candidate\
    \ = starts_one_ends;\n    assert(candidate((1)) == (1));\n    assert(candidate((2))\
    \ == (18));\n    assert(candidate((3)) == (180));\n    assert(candidate((4)) ==\
    \ (1800));\n    assert(candidate((5)) == (18000));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp7ef9ma5x.cpp: In function \u2018long int starts_one_ends(long int)\u2019\
    :\n/tmp/tmp7ef9ma5x.cpp:16:10: error: redeclaration of \u2018long int last_digit_of_last_digit_of_last_digit_of_last_digit_of_last_digit_of_last_digit_of_last_digit_of_last_digit\u2019\
    \n   16 |     long last_digit_of_last_digit_of_last_digit_of_last_digit_of_last_digit_of_last_digit_of_last_digit_of_last_digit\
    \ = last_digit_of_last_digit_of_last_digit_of_last_digit_of_last_digit_of_last_digit_of_last_digit_of_last_digit\
    \ % 10;\n      |          ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmp7ef9ma5x.cpp:15:10: note: \u2018long int last_digit_of_last_digit_of_last_digit_of_last_digit_of_last_digit_of_last_digit_of_last_digit_of_last_digit\u2019\
    \ previously declared here\n   15 |     long last_digit_of_last_digit_of_last_digit_of_last_digit_of_last_digit_of_last_digit_of_last_digit_of_last_digit\
    \ = last_digit_of_last_digit_of_last_digit_of_last_digit_of_last_digit_of_last_digit_of_last_digit\
    \ % 10;\n      |          ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmp7ef9ma5x.cpp:18:10: error: redeclaration of \u2018long int last_digit_of_last_digit_of_last_digit_of_last_digit_of_last_digit_of_last_digit_of_last_digit_of_last_digit_of_last_digit\u2019\
    \n   18 |     long last_digit_of_last_digit_of_last_digit_of_last_digit_of_last_digit_of_last_digit_of_last_digit_of_last_digit_of_last_digit\
    \ = last_digit_of_last_digit_of_last_digit_of_last_digit_of_last_digit_of_last_digit_of_last_digit_of_last_digit_of_last_digit_of_last_digit\
    \ % 10;\n      |          ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmp7ef9ma5x.cpp:17:10: note: \u2018long int last_digit_of_last_digit_of_last_digit_of_last_digit_of_last_digit_of_last_digit_of_last_digit_of_last_digit_of_last_digit\u2019\
    \ previously declared here\n   17 |     long last_digit_of_last_digit_of_last_digit_of_last_digit_of_last_digit_of_last_digit_of_last_digit_of_last_digit_of_last_digit\
    \ = last_digit_of_last_digit_of_last_digit_of_last_digit_of_last_digit_of_last_digit_of_last_digit_of_last_digit_of_last_digit\
    \ % 10;\n      |          ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmp7ef9ma5x.cpp:18:135: error: \u2018last_digit_of_last_digit_of_last_digit_of_last_digit_of_last_digit_of_last_digit_of_last_digit_of_last_digit_of_last_digit_of_last_digit\u2019\
    \ was not declared in this scope; did you mean \u2018last_digit_of_last_digit_of_last_digit_of_last_digit_of_last_digit_of_last_digit_of_last_digit_of_last_digit_of_last_digit\u2019\
    ?\n   18 |     long last_digit_of_last_digit_of_last_digit_of_last_digit_of_last_digit_of_last_digit_of_last_digit_of_last_digit_of_last_digit\
    \ = last_digit_of_last_digit_of_last_digit_of_last_digit_of_last_digit_of_last_digit_of_last_digit_of_last_digit_of_last_digit_of_last_digit\
    \ % 10;\n      |                                                             \
    \                                                                          ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    \      |                                                                     \
    \                                                                  last_digit_of_last_digit_of_last_digit_of_last_digit_of_last_digit_of_last_digit_of_last_digit_of_last_digit_of_last_digit\n\
    /tmp/tmp7ef9ma5x.cpp:20:149: error: \u2018last_digit_of_last_digit_of_last_digit_of_\u2019\
    \ was not declared in this scope; did you mean \u2018last_digit_of_last_digit_of_last_digit\u2019\
    ?\n   20 |     long last_digit_of_last_digit_of_last_digit_of_last_digit_of_last_digit_of_last_digit_of_last_digit_of_last_digit_of_last_digit_of_last_digit\
    \ = last_digit_of_last_digit_of_last_digit_of_\n      |                      \
    \                                                                            \
    \                                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    \      |                                                                     \
    \                                                                            \
    \    last_digit_of_last_digit_of_last_digit\n/tmp/tmp7ef9ma5x.cpp:21:1: warning:\
    \ no return statement in function returning non-void [-Wreturn-type]\n   21 |\
    \ }\n      | ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ n, return the count of the numbers of n-digit\n// positive integers that start\
    \ or end with 1.\nlong starts_one_ends(long n) {\n    long count = 0;\n    long\
    \ i = 1;\n    while (i <= n) {\n        if (i % 10 == 1) {\n            count++;\n\
    \        }\n        i++;\n    }\n    return count;\n}\nint main() {\n    auto\
    \ candidate = starts_one_ends;\n    assert(candidate((1)) == (1));\n    assert(candidate((2))\
    \ == (18));\n    assert(candidate((3)) == (180));\n    assert(candidate((4)) ==\
    \ (1800));\n    assert(candidate((5)) == (18000));\n}\n"
  stdout: ''
  stderr: "tmpw2wwkl86: /tmp/tmpw2wwkl86.cpp:19: int main(): Assertion `candidate((2))\
    \ == (18)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ n, return the count of the numbers of n-digit\n// positive integers that start\
    \ or end with 1.\nlong starts_one_ends(long n) {\n    long count = 0;\n    long\
    \ start = 1;\n    long end = 1;\n    while (n >= end) {\n        end = end * 10;\n\
    \        count++;\n    }\n    while (start <= n) {\n        start = start * 10;\n\
    \        count++;\n    }\n    return count;\n}\nint main() {\n    auto candidate\
    \ = starts_one_ends;\n    assert(candidate((1)) == (1));\n    assert(candidate((2))\
    \ == (18));\n    assert(candidate((3)) == (180));\n    assert(candidate((4)) ==\
    \ (1800));\n    assert(candidate((5)) == (18000));\n}\n"
  stdout: ''
  stderr: "tmpgeshk0b_: /tmp/tmpgeshk0b_.cpp:21: int main(): Assertion `candidate((1))\
    \ == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ n, return the count of the numbers of n-digit\n// positive integers that start\
    \ or end with 1.\nlong starts_one_ends(long n) {\n    long count = 0;\n    long\
    \ start = 1;\n    long end = 1;\n    while (n > 0) {\n        if (n % 10 == 1)\
    \ {\n            count++;\n            if (start == 1) {\n                start\
    \ = n;\n            } else {\n                end = n;\n            }\n      \
    \  }\n        n /= 10;\n    }\n    return count;\n}\nint main() {\n    auto candidate\
    \ = starts_one_ends;\n    assert(candidate((1)) == (1));\n    assert(candidate((2))\
    \ == (18));\n    assert(candidate((3)) == (180));\n    assert(candidate((4)) ==\
    \ (1800));\n    assert(candidate((5)) == (18000));\n}\n"
  stdout: ''
  stderr: "tmpktgruc1m: /tmp/tmpktgruc1m.cpp:25: int main(): Assertion `candidate((2))\
    \ == (18)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ n, return the count of the numbers of n-digit\n// positive integers that start\
    \ or end with 1.\nlong starts_one_ends(long n) {\n    long count = 0;\n    while\
    \ (n > 0) {\n        if (n % 10 == 1) count++;\n        n /= 10;\n    }\n    return\
    \ count;\n}\nint main() {\n    auto candidate = starts_one_ends;\n    assert(candidate((1))\
    \ == (1));\n    assert(candidate((2)) == (18));\n    assert(candidate((3)) ==\
    \ (180));\n    assert(candidate((4)) == (1800));\n    assert(candidate((5)) ==\
    \ (18000));\n}\n"
  stdout: ''
  stderr: "tmpct56yb6p: /tmp/tmpct56yb6p.cpp:16: int main(): Assertion `candidate((2))\
    \ == (18)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ n, return the count of the numbers of n-digit\n// positive integers that start\
    \ or end with 1.\nlong starts_one_ends(long n) {\n    long count = 0;\n    long\
    \ i = 1;\n    while (i <= n) {\n        if (i % 10 == 1) {\n            count++;\n\
    \        }\n        i++;\n    }\n    return count;\n}\nint main() {\n    auto\
    \ candidate = starts_one_ends;\n    assert(candidate((1)) == (1));\n    assert(candidate((2))\
    \ == (18));\n    assert(candidate((3)) == (180));\n    assert(candidate((4)) ==\
    \ (1800));\n    assert(candidate((5)) == (18000));\n}\n"
  stdout: ''
  stderr: "tmprz0eun4i: /tmp/tmprz0eun4i.cpp:19: int main(): Assertion `candidate((2))\
    \ == (18)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ n, return the count of the numbers of n-digit\n// positive integers that start\
    \ or end with 1.\nlong starts_one_ends(long n) {\n    long count = 0;\n    long\
    \ i = 1;\n    while (i <= n) {\n        if (i % 10 == 1) {\n            count++;\n\
    \        }\n        i++;\n    }\n    return count;\n}\nint main() {\n    auto\
    \ candidate = starts_one_ends;\n    assert(candidate((1)) == (1));\n    assert(candidate((2))\
    \ == (18));\n    assert(candidate((3)) == (180));\n    assert(candidate((4)) ==\
    \ (1800));\n    assert(candidate((5)) == (18000));\n}\n"
  stdout: ''
  stderr: "tmp_zdqbwpd: /tmp/tmp_zdqbwpd.cpp:19: int main(): Assertion `candidate((2))\
    \ == (18)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ n, return the count of the numbers of n-digit\n// positive integers that start\
    \ or end with 1.\nlong starts_one_ends(long n) {\n    long count = 0;\n    long\
    \ start = 1;\n    long end = 1;\n    while (n >= end) {\n        end = end * 10;\n\
    \        count++;\n    }\n    while (n >= start) {\n        start = start * 10;\n\
    \        count--;\n    }\n    return count;\n}\nint main() {\n    auto candidate\
    \ = starts_one_ends;\n    assert(candidate((1)) == (1));\n    assert(candidate((2))\
    \ == (18));\n    assert(candidate((3)) == (180));\n    assert(candidate((4)) ==\
    \ (1800));\n    assert(candidate((5)) == (18000));\n}\n"
  stdout: ''
  stderr: "tmp7k4lam1f: /tmp/tmp7k4lam1f.cpp:21: int main(): Assertion `candidate((1))\
    \ == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer\
    \ n, return the count of the numbers of n-digit\n// positive integers that start\
    \ or end with 1.\nlong starts_one_ends(long n) {\n    long count = 0;\n    long\
    \ remainder = n % 10;\n    if (remainder == 1) {\n        ++count;\n    }\n  \
    \  n /= 10;\n    while (n) {\n        remainder = n % 10;\n        if (remainder\
    \ == 1) {\n            ++count;\n        }\n        n /= 10;\n    }\n    return\
    \ count;\n}\nint main() {\n    auto candidate = starts_one_ends;\n    assert(candidate((1))\
    \ == (1));\n    assert(candidate((2)) == (18));\n    assert(candidate((3)) ==\
    \ (180));\n    assert(candidate((4)) == (1800));\n    assert(candidate((5)) ==\
    \ (18000));\n}\n"
  stdout: ''
  stderr: "tmpn1npxsj6: /tmp/tmpn1npxsj6.cpp:24: int main(): Assertion `candidate((2))\
    \ == (18)' failed.\n"
  exit_code: -6
  status: Exception
