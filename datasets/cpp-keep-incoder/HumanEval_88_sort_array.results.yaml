name: HumanEval_88_sort_array
language: cpp
results:
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// * sort_array([]) => []\n// * sort_array([5]) => [5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6])\
    \ => [6, 5, 4, 3, 2, 1, 0]\nstd::vector<long> sort_array(std::vector<long> array)\
    \ {\n    long long sum = 0;\n    for (long long i = 0; i < array.size(); i++)\
    \ {\n        sum += array[i];\n    }\n    if (sum % 2 == 0) {\n        std::sort(array.begin(),\
    \ array.end());\n    } else {\n        std::sort(array.rbegin(), array.rend());\n\
    \    }\n    return array;\n}\nint main() {\n    auto candidate = sort_array;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({5})))\
    \ == (std::vector<long>({5})));\n    assert(candidate((std::vector<long>({2, 4,\
    \ 3, 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5})));\n    assert(candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5, 6}))) == (std::vector<long>({6, 5, 4, 3, 2, 1, 0})));\n    assert(candidate((std::vector<long>({2,\
    \ 1}))) == (std::vector<long>({1, 2})));\n    assert(candidate((std::vector<long>({15,\
    \ 42, 87, 32, 11, 0}))) == (std::vector<long>({0, 11, 15, 32, 42, 87})));\n  \
    \  assert(candidate((std::vector<long>({21, 14, 23, 11}))) == (std::vector<long>({23,\
    \ 21, 14, 11})));\n}\n"
  stdout: ''
  stderr: "tmpt3oxywpc: /tmp/tmpt3oxywpc.cpp:29: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// * sort_array([]) => []\n// * sort_array([5]) => [5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6])\
    \ => [6, 5, 4, 3, 2, 1, 0]\nstd::vector<long> sort_array(std::vector<long> array)\
    \ {\n    long sum = 0;\n    for (long i : array) {\n        sum += i;\n    }\n\
    \    if (sum % 2 == 0) {\n        std::sort(array.begin(), array.end());\n   \
    \ } else {\n        std::sort(array.rbegin(), array.rend());\n    }\n    return\
    \ array;\n}\nint main() {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({5}))) ==\
    \ (std::vector<long>({5})));\n    assert(candidate((std::vector<long>({2, 4, 3,\
    \ 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5})));\n    assert(candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5, 6}))) == (std::vector<long>({6, 5, 4, 3, 2, 1, 0})));\n    assert(candidate((std::vector<long>({2,\
    \ 1}))) == (std::vector<long>({1, 2})));\n    assert(candidate((std::vector<long>({15,\
    \ 42, 87, 32, 11, 0}))) == (std::vector<long>({0, 11, 15, 32, 42, 87})));\n  \
    \  assert(candidate((std::vector<long>({21, 14, 23, 11}))) == (std::vector<long>({23,\
    \ 21, 14, 11})));\n}\n"
  stdout: ''
  stderr: "tmpth783d74: /tmp/tmpth783d74.cpp:29: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// * sort_array([]) => []\n// * sort_array([5]) => [5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6])\
    \ => [6, 5, 4, 3, 2, 1, 0]\nstd::vector<long> sort_array(std::vector<long> array)\
    \ {\n    // write your code here\n    long sum = 0;\n    for (long i = 0; i <\
    \ array.size(); i++) {\n        sum += array[i];\n    }\n    if (sum % 2 == 0)\
    \ {\n        std::sort(array.begin(), array.end());\n    } else {\n        std::sort(array.rbegin(),\
    \ array.rend());\n    }\n    return array;\n}\nint main() {\n    auto candidate\
    \ = sort_array;\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({5}))) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({2, 4, 3, 0, 1, 5}))) == (std::vector<long>({0,\
    \ 1, 2, 3, 4, 5})));\n    assert(candidate((std::vector<long>({2, 4, 3, 0, 1,\
    \ 5, 6}))) == (std::vector<long>({6, 5, 4, 3, 2, 1, 0})));\n    assert(candidate((std::vector<long>({2,\
    \ 1}))) == (std::vector<long>({1, 2})));\n    assert(candidate((std::vector<long>({15,\
    \ 42, 87, 32, 11, 0}))) == (std::vector<long>({0, 11, 15, 32, 42, 87})));\n  \
    \  assert(candidate((std::vector<long>({21, 14, 23, 11}))) == (std::vector<long>({23,\
    \ 21, 14, 11})));\n}\n"
  stdout: ''
  stderr: "tmpq2h46qvw: /tmp/tmpq2h46qvw.cpp:30: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// * sort_array([]) => []\n// * sort_array([5]) => [5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6])\
    \ => [6, 5, 4, 3, 2, 1, 0]\nstd::vector<long> sort_array(std::vector<long> array)\
    \ {\n    // Your code here\n    long long sum = 0;\n    for (long i = 0; i < array.size();\
    \ i++) {\n        sum += array[i];\n    }\n    if (sum % 2 == 0) {\n        std::sort(array.begin(),\
    \ array.end());\n    } else {\n        std::sort(array.rbegin(), array.rend());\n\
    \    }\n    return array;\n}\nint main() {\n    auto candidate = sort_array;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({5})))\
    \ == (std::vector<long>({5})));\n    assert(candidate((std::vector<long>({2, 4,\
    \ 3, 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5})));\n    assert(candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5, 6}))) == (std::vector<long>({6, 5, 4, 3, 2, 1, 0})));\n    assert(candidate((std::vector<long>({2,\
    \ 1}))) == (std::vector<long>({1, 2})));\n    assert(candidate((std::vector<long>({15,\
    \ 42, 87, 32, 11, 0}))) == (std::vector<long>({0, 11, 15, 32, 42, 87})));\n  \
    \  assert(candidate((std::vector<long>({21, 14, 23, 11}))) == (std::vector<long>({23,\
    \ 21, 14, 11})));\n}\n"
  stdout: ''
  stderr: "tmpioh0mp0v: /tmp/tmpioh0mp0v.cpp:30: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// * sort_array([]) => []\n// * sort_array([5]) => [5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6])\
    \ => [6, 5, 4, 3, 2, 1, 0]\nstd::vector<long> sort_array(std::vector<long> array)\
    \ {\n    // write your code here\n    long sum = 0;\n    for (long i : array)\
    \ {\n        sum += i;\n    }\n    if (sum % 2 == 0) {\n        std::sort(array.begin(),\
    \ array.end());\n    } else {\n        std::sort(array.rbegin(), array.rend());\n\
    \    }\n    return array;\n}\nint main() {\n    auto candidate = sort_array;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({5})))\
    \ == (std::vector<long>({5})));\n    assert(candidate((std::vector<long>({2, 4,\
    \ 3, 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5})));\n    assert(candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5, 6}))) == (std::vector<long>({6, 5, 4, 3, 2, 1, 0})));\n    assert(candidate((std::vector<long>({2,\
    \ 1}))) == (std::vector<long>({1, 2})));\n    assert(candidate((std::vector<long>({15,\
    \ 42, 87, 32, 11, 0}))) == (std::vector<long>({0, 11, 15, 32, 42, 87})));\n  \
    \  assert(candidate((std::vector<long>({21, 14, 23, 11}))) == (std::vector<long>({23,\
    \ 21, 14, 11})));\n}\n"
  stdout: ''
  stderr: "tmp1k1lhj0a: /tmp/tmp1k1lhj0a.cpp:30: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// * sort_array([]) => []\n// * sort_array([5]) => [5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6])\
    \ => [6, 5, 4, 3, 2, 1, 0]\nstd::vector<long> sort_array(std::vector<long> array)\
    \ {\n    long sum = 0;\n    for (long i : array) {\n        sum += i;\n    }\n\
    \    if (sum % 2 == 0) {\n        std::sort(array.begin(), array.end());\n   \
    \ } else {\n        std::sort(array.rbegin(), array.rend());\n    }\n    return\
    \ array;\n}\nint main() {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({5}))) ==\
    \ (std::vector<long>({5})));\n    assert(candidate((std::vector<long>({2, 4, 3,\
    \ 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5})));\n    assert(candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5, 6}))) == (std::vector<long>({6, 5, 4, 3, 2, 1, 0})));\n    assert(candidate((std::vector<long>({2,\
    \ 1}))) == (std::vector<long>({1, 2})));\n    assert(candidate((std::vector<long>({15,\
    \ 42, 87, 32, 11, 0}))) == (std::vector<long>({0, 11, 15, 32, 42, 87})));\n  \
    \  assert(candidate((std::vector<long>({21, 14, 23, 11}))) == (std::vector<long>({23,\
    \ 21, 14, 11})));\n}\n"
  stdout: ''
  stderr: "tmpq31ht2rp: /tmp/tmpq31ht2rp.cpp:29: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// * sort_array([]) => []\n// * sort_array([5]) => [5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6])\
    \ => [6, 5, 4, 3, 2, 1, 0]\nstd::vector<long> sort_array(std::vector<long> array)\
    \ {\n    long long sum = 0;\n    for (long long i = 0; i < array.size(); i++)\
    \ {\n        sum += array[i];\n    }\n    if (sum % 2 == 0) {\n        std::sort(array.begin(),\
    \ array.end());\n        return array;\n    } else {\n        std::sort(array.rbegin(),\
    \ array.rend());\n        return array;\n    }\n}\nint main() {\n    auto candidate\
    \ = sort_array;\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({5}))) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({2, 4, 3, 0, 1, 5}))) == (std::vector<long>({0,\
    \ 1, 2, 3, 4, 5})));\n    assert(candidate((std::vector<long>({2, 4, 3, 0, 1,\
    \ 5, 6}))) == (std::vector<long>({6, 5, 4, 3, 2, 1, 0})));\n    assert(candidate((std::vector<long>({2,\
    \ 1}))) == (std::vector<long>({1, 2})));\n    assert(candidate((std::vector<long>({15,\
    \ 42, 87, 32, 11, 0}))) == (std::vector<long>({0, 11, 15, 32, 42, 87})));\n  \
    \  assert(candidate((std::vector<long>({21, 14, 23, 11}))) == (std::vector<long>({23,\
    \ 21, 14, 11})));\n}\n"
  stdout: ''
  stderr: "tmpfdldrgf2: /tmp/tmpfdldrgf2.cpp:30: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// * sort_array([]) => []\n// * sort_array([5]) => [5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6])\
    \ => [6, 5, 4, 3, 2, 1, 0]\nstd::vector<long> sort_array(std::vector<long> array)\
    \ {\n    // Your code here\n    long sum = 0;\n    long temp;\n    long temp2;\n\
    \    long sum2;\n    long sum3;\n    long sum4;\n    long sum5;\n    long sum6;\n\
    \    long sum7;\n    long sum8;\n    long sum9;\n    long sum10;\n    long sum11;\n\
    \    long sum12;\n    long sum13;\n    long sum14;\n    long sum15;\n    long\
    \ sum16;\n    long sum17;\n    long sum18;\n    long sum19;\n    long sum20;\n\
    \    long sum21;\n    long sum22;\n    long sum23;\n    long sum24;\n    long\
    \ sum25;\n    long sum26;\n    long sum27;\n    long sum28;\n    long sum29;\n\
    \    long sum30;\n    long sum31;\n    long sum32;\n    long sum33;\n    long\
    \ sum34;\n    long sum35;\n    long sum36;\n    long sum37;\n    long sum38;\n\
    \    long sum39;\n    long sum40;\n    long sum41;\n    long sum42;\n    long\
    \ sum43;\n    long sum44;\n    long sum45;\n    long sum46;\n    long sum47;\n\
    \    long sum48;\n    long sum49;\n    long sum50;\n    long sum51;\n    long\
    \ sum52;\n    long sum53;\n    long sum54;\n    long sum55;\n    long sum56;\n\
    \    long sum57;\n    long sum58;\n    long sum59;\n    long sum60;\n    long\
    \ sum61;\n    long sum62;\n    long sum63;\n    long sum64;\n    long sum65;\n\
    \    long sum66;\n    long sum67;\n    long sum68;\n    long sum69;\n    long\
    \ sum70;\n    long sum71;\n    long sum72;\n    long sum73;\n    long sum74;\n\
    \    long sum75;\n    long sum76;\n    long sum77;\n    long sum78;\n    long\
    \ sum79;\n    long sum80;\n    long sum81;\n    long sum82;\n    long sum83;\n\
    \    long sum84;\n    long sum85;\n    long sum86;\n    \n}\nint main() {\n  \
    \  auto candidate = sort_array;\n    assert(candidate((std::vector<long>())) ==\
    \ (std::vector<long>()));\n    assert(candidate((std::vector<long>({5}))) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({2, 4, 3, 0, 1, 5}))) == (std::vector<long>({0,\
    \ 1, 2, 3, 4, 5})));\n    assert(candidate((std::vector<long>({2, 4, 3, 0, 1,\
    \ 5, 6}))) == (std::vector<long>({6, 5, 4, 3, 2, 1, 0})));\n    assert(candidate((std::vector<long>({2,\
    \ 1}))) == (std::vector<long>({1, 2})));\n    assert(candidate((std::vector<long>({15,\
    \ 42, 87, 32, 11, 0}))) == (std::vector<long>({0, 11, 15, 32, 42, 87})));\n  \
    \  assert(candidate((std::vector<long>({21, 14, 23, 11}))) == (std::vector<long>({23,\
    \ 21, 14, 11})));\n}\n"
  stdout: ''
  stderr: "tmp9n10uyrx: /tmp/tmp9n10uyrx.cpp:107: int main(): Assertion `candidate((std::vector<long>()))\
    \ == (std::vector<long>())' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// * sort_array([]) => []\n// * sort_array([5]) => [5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6])\
    \ => [6, 5, 4, 3, 2, 1, 0]\nstd::vector<long> sort_array(std::vector<long> array)\
    \ {\n    // write your code here\n    long sum = 0;\n    for (long i : array)\
    \ {\n        sum += i;\n    }\n    if (sum % 2 == 1) {\n        std::sort(array.begin(),\
    \ array.end());\n    } else {\n        std::sort(array.rbegin(), array.rend());\n\
    \    }\n    return array;\n}\nint main() {\n    auto candidate = sort_array;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({5})))\
    \ == (std::vector<long>({5})));\n    assert(candidate((std::vector<long>({2, 4,\
    \ 3, 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5})));\n    assert(candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5, 6}))) == (std::vector<long>({6, 5, 4, 3, 2, 1, 0})));\n    assert(candidate((std::vector<long>({2,\
    \ 1}))) == (std::vector<long>({1, 2})));\n    assert(candidate((std::vector<long>({15,\
    \ 42, 87, 32, 11, 0}))) == (std::vector<long>({0, 11, 15, 32, 42, 87})));\n  \
    \  assert(candidate((std::vector<long>({21, 14, 23, 11}))) == (std::vector<long>({23,\
    \ 21, 14, 11})));\n}\n"
  stdout: ''
  stderr: "tmpsd_676pg: /tmp/tmpsd_676pg.cpp:31: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5, 6}))) == (std::vector<long>({6, 5, 4, 3, 2, 1, 0}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// * sort_array([]) => []\n// * sort_array([5]) => [5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6])\
    \ => [6, 5, 4, 3, 2, 1, 0]\nstd::vector<long> sort_array(std::vector<long> array)\
    \ {\n    // Your code here\n    long sum = 0;\n    for (long i : array) {\n  \
    \      sum += i;\n    }\n    if (sum % 2 == 0) {\n        std::sort(array.begin(),\
    \ array.end());\n    } else {\n        std::sort(array.rbegin(), array.rend());\n\
    \    }\n    return array;\n}\nint main() {\n    auto candidate = sort_array;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({5})))\
    \ == (std::vector<long>({5})));\n    assert(candidate((std::vector<long>({2, 4,\
    \ 3, 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5})));\n    assert(candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5, 6}))) == (std::vector<long>({6, 5, 4, 3, 2, 1, 0})));\n    assert(candidate((std::vector<long>({2,\
    \ 1}))) == (std::vector<long>({1, 2})));\n    assert(candidate((std::vector<long>({15,\
    \ 42, 87, 32, 11, 0}))) == (std::vector<long>({0, 11, 15, 32, 42, 87})));\n  \
    \  assert(candidate((std::vector<long>({21, 14, 23, 11}))) == (std::vector<long>({23,\
    \ 21, 14, 11})));\n}\n"
  stdout: ''
  stderr: "tmpvc_6qb0h: /tmp/tmpvc_6qb0h.cpp:30: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// * sort_array([]) => []\n// * sort_array([5]) => [5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6])\
    \ => [6, 5, 4, 3, 2, 1, 0]\nstd::vector<long> sort_array(std::vector<long> array)\
    \ {\n    // Your code here\n    long sum = 0;\n    for (long i = 0; i < array.size();\
    \ i++) {\n        sum += array[i];\n    }\n    if (sum % 2 == 0) {\n        std::sort(array.begin(),\
    \ array.end());\n    } else {\n        std::sort(array.rbegin(), array.rend());\n\
    \    }\n    return array;\n}\nint main() {\n    auto candidate = sort_array;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({5})))\
    \ == (std::vector<long>({5})));\n    assert(candidate((std::vector<long>({2, 4,\
    \ 3, 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5})));\n    assert(candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5, 6}))) == (std::vector<long>({6, 5, 4, 3, 2, 1, 0})));\n    assert(candidate((std::vector<long>({2,\
    \ 1}))) == (std::vector<long>({1, 2})));\n    assert(candidate((std::vector<long>({15,\
    \ 42, 87, 32, 11, 0}))) == (std::vector<long>({0, 11, 15, 32, 42, 87})));\n  \
    \  assert(candidate((std::vector<long>({21, 14, 23, 11}))) == (std::vector<long>({23,\
    \ 21, 14, 11})));\n}\n"
  stdout: ''
  stderr: "tmpplhk7jc9: /tmp/tmpplhk7jc9.cpp:30: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// * sort_array([]) => []\n// * sort_array([5]) => [5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6])\
    \ => [6, 5, 4, 3, 2, 1, 0]\nstd::vector<long> sort_array(std::vector<long> array)\
    \ {\n    // Your code here\n    long long sum = 0;\n    for (long i = 0; i < array.size();\
    \ i++) {\n        sum += array[i];\n    }\n    if (sum % 2 == 0) {\n        std::sort(array.begin(),\
    \ array.end());\n    } else {\n        std::sort(array.rbegin(), array.rend());\n\
    \    }\n    return array;\n}\nint main() {\n    auto candidate = sort_array;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({5})))\
    \ == (std::vector<long>({5})));\n    assert(candidate((std::vector<long>({2, 4,\
    \ 3, 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5})));\n    assert(candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5, 6}))) == (std::vector<long>({6, 5, 4, 3, 2, 1, 0})));\n    assert(candidate((std::vector<long>({2,\
    \ 1}))) == (std::vector<long>({1, 2})));\n    assert(candidate((std::vector<long>({15,\
    \ 42, 87, 32, 11, 0}))) == (std::vector<long>({0, 11, 15, 32, 42, 87})));\n  \
    \  assert(candidate((std::vector<long>({21, 14, 23, 11}))) == (std::vector<long>({23,\
    \ 21, 14, 11})));\n}\n"
  stdout: ''
  stderr: "tmpoqxx4r5o: /tmp/tmpoqxx4r5o.cpp:30: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// * sort_array([]) => []\n// * sort_array([5]) => [5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6])\
    \ => [6, 5, 4, 3, 2, 1, 0]\nstd::vector<long> sort_array(std::vector<long> array)\
    \ {\n    // Your code here\n    long sum = 0;\n    for (long i = 0; i < array.size();\
    \ i++) {\n        sum += array[i];\n    }\n    if (sum % 2 == 0) {\n        std::sort(array.begin(),\
    \ array.end());\n    } else {\n        std::sort(array.rbegin(), array.rend());\n\
    \    }\n    return array;\n}\nint main() {\n    auto candidate = sort_array;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({5})))\
    \ == (std::vector<long>({5})));\n    assert(candidate((std::vector<long>({2, 4,\
    \ 3, 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5})));\n    assert(candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5, 6}))) == (std::vector<long>({6, 5, 4, 3, 2, 1, 0})));\n    assert(candidate((std::vector<long>({2,\
    \ 1}))) == (std::vector<long>({1, 2})));\n    assert(candidate((std::vector<long>({15,\
    \ 42, 87, 32, 11, 0}))) == (std::vector<long>({0, 11, 15, 32, 42, 87})));\n  \
    \  assert(candidate((std::vector<long>({21, 14, 23, 11}))) == (std::vector<long>({23,\
    \ 21, 14, 11})));\n}\n"
  stdout: ''
  stderr: "tmp4kl_iyki: /tmp/tmp4kl_iyki.cpp:30: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// * sort_array([]) => []\n// * sort_array([5]) => [5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6])\
    \ => [6, 5, 4, 3, 2, 1, 0]\nstd::vector<long> sort_array(std::vector<long> array)\
    \ {\n    long long sum = 0;\n    for (long long i : array) {\n        sum += i;\n\
    \    }\n    if (sum % 2 == 1) {\n        std::sort(array.begin(), array.end());\n\
    \    } else {\n        std::sort(array.rbegin(), array.rend());\n    }\n    return\
    \ array;\n}\nint main() {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({5}))) ==\
    \ (std::vector<long>({5})));\n    assert(candidate((std::vector<long>({2, 4, 3,\
    \ 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5})));\n    assert(candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5, 6}))) == (std::vector<long>({6, 5, 4, 3, 2, 1, 0})));\n    assert(candidate((std::vector<long>({2,\
    \ 1}))) == (std::vector<long>({1, 2})));\n    assert(candidate((std::vector<long>({15,\
    \ 42, 87, 32, 11, 0}))) == (std::vector<long>({0, 11, 15, 32, 42, 87})));\n  \
    \  assert(candidate((std::vector<long>({21, 14, 23, 11}))) == (std::vector<long>({23,\
    \ 21, 14, 11})));\n}\n"
  stdout: ''
  stderr: "tmp81ba2lj_: /tmp/tmp81ba2lj_.cpp:30: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5, 6}))) == (std::vector<long>({6, 5, 4, 3, 2, 1, 0}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// * sort_array([]) => []\n// * sort_array([5]) => [5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6])\
    \ => [6, 5, 4, 3, 2, 1, 0]\nstd::vector<long> sort_array(std::vector<long> array)\
    \ {\n    // write your code here\n    long long sum = 0;\n    for (long i = 0;\
    \ i < array.size(); i++) {\n        sum += array[i];\n    }\n    if (sum % 2 ==\
    \ 0) {\n        std::sort(array.begin(), array.end());\n    } else {\n       \
    \ std::sort(array.rbegin(), array.rend());\n    }\n    return array;\n}\nint main()\
    \ {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({5}))) ==\
    \ (std::vector<long>({5})));\n    assert(candidate((std::vector<long>({2, 4, 3,\
    \ 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5})));\n    assert(candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5, 6}))) == (std::vector<long>({6, 5, 4, 3, 2, 1, 0})));\n    assert(candidate((std::vector<long>({2,\
    \ 1}))) == (std::vector<long>({1, 2})));\n    assert(candidate((std::vector<long>({15,\
    \ 42, 87, 32, 11, 0}))) == (std::vector<long>({0, 11, 15, 32, 42, 87})));\n  \
    \  assert(candidate((std::vector<long>({21, 14, 23, 11}))) == (std::vector<long>({23,\
    \ 21, 14, 11})));\n}\n"
  stdout: ''
  stderr: "tmpajdlnqtt: /tmp/tmpajdlnqtt.cpp:30: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// * sort_array([]) => []\n// * sort_array([5]) => [5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6])\
    \ => [6, 5, 4, 3, 2, 1, 0]\nstd::vector<long> sort_array(std::vector<long> array)\
    \ {\n    long sum = 0;\n    for (long i : array) {\n        sum += i;\n    }\n\
    \    if (sum % 2 == 0) {\n        std::sort(array.begin(), array.end());\n   \
    \ } else {\n        std::sort(array.rbegin(), array.rend());\n    }\n    return\
    \ array;\n}\nint main() {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({5}))) ==\
    \ (std::vector<long>({5})));\n    assert(candidate((std::vector<long>({2, 4, 3,\
    \ 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5})));\n    assert(candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5, 6}))) == (std::vector<long>({6, 5, 4, 3, 2, 1, 0})));\n    assert(candidate((std::vector<long>({2,\
    \ 1}))) == (std::vector<long>({1, 2})));\n    assert(candidate((std::vector<long>({15,\
    \ 42, 87, 32, 11, 0}))) == (std::vector<long>({0, 11, 15, 32, 42, 87})));\n  \
    \  assert(candidate((std::vector<long>({21, 14, 23, 11}))) == (std::vector<long>({23,\
    \ 21, 14, 11})));\n}\n"
  stdout: ''
  stderr: "tmpa4sh_uv8: /tmp/tmpa4sh_uv8.cpp:29: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// * sort_array([]) => []\n// * sort_array([5]) => [5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6])\
    \ => [6, 5, 4, 3, 2, 1, 0]\nstd::vector<long> sort_array(std::vector<long> array)\
    \ {\n    // Your code here\n    long long sum = 0;\n    for (long i = 0; i < array.size();\
    \ i++) {\n        sum += array[i];\n    }\n    if (sum % 2 == 0) {\n        std::sort(array.begin(),\
    \ array.end());\n    } else {\n        std::sort(array.rbegin(), array.rend());\n\
    \    }\n    return array;\n}\nint main() {\n    auto candidate = sort_array;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({5})))\
    \ == (std::vector<long>({5})));\n    assert(candidate((std::vector<long>({2, 4,\
    \ 3, 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5})));\n    assert(candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5, 6}))) == (std::vector<long>({6, 5, 4, 3, 2, 1, 0})));\n    assert(candidate((std::vector<long>({2,\
    \ 1}))) == (std::vector<long>({1, 2})));\n    assert(candidate((std::vector<long>({15,\
    \ 42, 87, 32, 11, 0}))) == (std::vector<long>({0, 11, 15, 32, 42, 87})));\n  \
    \  assert(candidate((std::vector<long>({21, 14, 23, 11}))) == (std::vector<long>({23,\
    \ 21, 14, 11})));\n}\n"
  stdout: ''
  stderr: "tmph91mtf32: /tmp/tmph91mtf32.cpp:30: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// * sort_array([]) => []\n// * sort_array([5]) => [5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6])\
    \ => [6, 5, 4, 3, 2, 1, 0]\nstd::vector<long> sort_array(std::vector<long> array)\
    \ {\n    // write your code here\n    long long sum = 0;\n    for (long i = 0;\
    \ i < array.size(); i++) {\n        sum += array[i];\n    }\n    if (sum % 2 ==\
    \ 1) {\n        std::sort(array.begin(), array.end());\n    } else {\n       \
    \ std::sort(array.rbegin(), array.rend());\n    }\n    return array;\n}\nint main()\
    \ {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({5}))) ==\
    \ (std::vector<long>({5})));\n    assert(candidate((std::vector<long>({2, 4, 3,\
    \ 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5})));\n    assert(candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5, 6}))) == (std::vector<long>({6, 5, 4, 3, 2, 1, 0})));\n    assert(candidate((std::vector<long>({2,\
    \ 1}))) == (std::vector<long>({1, 2})));\n    assert(candidate((std::vector<long>({15,\
    \ 42, 87, 32, 11, 0}))) == (std::vector<long>({0, 11, 15, 32, 42, 87})));\n  \
    \  assert(candidate((std::vector<long>({21, 14, 23, 11}))) == (std::vector<long>({23,\
    \ 21, 14, 11})));\n}\n"
  stdout: ''
  stderr: "tmp0b9vxtrm: /tmp/tmp0b9vxtrm.cpp:31: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5, 6}))) == (std::vector<long>({6, 5, 4, 3, 2, 1, 0}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// * sort_array([]) => []\n// * sort_array([5]) => [5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6])\
    \ => [6, 5, 4, 3, 2, 1, 0]\nstd::vector<long> sort_array(std::vector<long> array)\
    \ {\n    // write your code here\n    long sum = 0;\n    for (long i = 0; i <\
    \ array.size(); i++) {\n        sum += array[i];\n    }\n    if (sum % 2 == 1)\
    \ {\n        std::sort(array.begin(), array.end());\n    } else {\n        std::sort(array.rbegin(),\
    \ array.rend());\n    }\n    return array;\n}\nint main() {\n    auto candidate\
    \ = sort_array;\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({5}))) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({2, 4, 3, 0, 1, 5}))) == (std::vector<long>({0,\
    \ 1, 2, 3, 4, 5})));\n    assert(candidate((std::vector<long>({2, 4, 3, 0, 1,\
    \ 5, 6}))) == (std::vector<long>({6, 5, 4, 3, 2, 1, 0})));\n    assert(candidate((std::vector<long>({2,\
    \ 1}))) == (std::vector<long>({1, 2})));\n    assert(candidate((std::vector<long>({15,\
    \ 42, 87, 32, 11, 0}))) == (std::vector<long>({0, 11, 15, 32, 42, 87})));\n  \
    \  assert(candidate((std::vector<long>({21, 14, 23, 11}))) == (std::vector<long>({23,\
    \ 21, 14, 11})));\n}\n"
  stdout: ''
  stderr: "tmp2ve82zp3: /tmp/tmp2ve82zp3.cpp:31: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5, 6}))) == (std::vector<long>({6, 5, 4, 3, 2, 1, 0}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// * sort_array([]) => []\n// * sort_array([5]) => [5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6])\
    \ => [6, 5, 4, 3, 2, 1, 0]\nstd::vector<long> sort_array(std::vector<long> array)\
    \ {\n    long long sum = 0;\n    for (long i = 0; i < array.size(); i++) {\n \
    \       sum += array[i];\n    }\n    if (sum % 2 == 1) {\n        std::sort(array.begin(),\
    \ array.end());\n    } else {\n        std::sort(array.rbegin(), array.rend());\n\
    \    }\n    return array;\n}\nint main() {\n    auto candidate = sort_array;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({5})))\
    \ == (std::vector<long>({5})));\n    assert(candidate((std::vector<long>({2, 4,\
    \ 3, 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5})));\n    assert(candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5, 6}))) == (std::vector<long>({6, 5, 4, 3, 2, 1, 0})));\n    assert(candidate((std::vector<long>({2,\
    \ 1}))) == (std::vector<long>({1, 2})));\n    assert(candidate((std::vector<long>({15,\
    \ 42, 87, 32, 11, 0}))) == (std::vector<long>({0, 11, 15, 32, 42, 87})));\n  \
    \  assert(candidate((std::vector<long>({21, 14, 23, 11}))) == (std::vector<long>({23,\
    \ 21, 14, 11})));\n}\n"
  stdout: ''
  stderr: "tmp2tkug2hv: /tmp/tmp2tkug2hv.cpp:30: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5, 6}))) == (std::vector<long>({6, 5, 4, 3, 2, 1, 0}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// * sort_array([]) => []\n// * sort_array([5]) => [5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6])\
    \ => [6, 5, 4, 3, 2, 1, 0]\nstd::vector<long> sort_array(std::vector<long> array)\
    \ {\n    long long sum = 0;\n    for (long long i : array) {\n        sum += i;\n\
    \    }\n    if (sum % 2 == 0) {\n        std::sort(array.begin(), array.end());\n\
    \    } else {\n        std::sort(array.rbegin(), array.rend());\n    }\n    return\
    \ array;\n}\nint main() {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({5}))) ==\
    \ (std::vector<long>({5})));\n    assert(candidate((std::vector<long>({2, 4, 3,\
    \ 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5})));\n    assert(candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5, 6}))) == (std::vector<long>({6, 5, 4, 3, 2, 1, 0})));\n    assert(candidate((std::vector<long>({2,\
    \ 1}))) == (std::vector<long>({1, 2})));\n    assert(candidate((std::vector<long>({15,\
    \ 42, 87, 32, 11, 0}))) == (std::vector<long>({0, 11, 15, 32, 42, 87})));\n  \
    \  assert(candidate((std::vector<long>({21, 14, 23, 11}))) == (std::vector<long>({23,\
    \ 21, 14, 11})));\n}\n"
  stdout: ''
  stderr: "tmpthq7_2cw: /tmp/tmpthq7_2cw.cpp:29: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// * sort_array([]) => []\n// * sort_array([5]) => [5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6])\
    \ => [6, 5, 4, 3, 2, 1, 0]\nstd::vector<long> sort_array(std::vector<long> array)\
    \ {\n    std::vector<long> result;\n    long sum = 0;\n    for (long i : array)\
    \ {\n        sum += i;\n        result.push_back(i);\n    }\n    if (sum % 2 ==\
    \ 1) {\n        std::sort(result.begin(), result.end());\n    } else {\n     \
    \   std::sort(result.rbegin(), result.rend());\n    }\n    return result;\n}\n\
    int main() {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({5}))) ==\
    \ (std::vector<long>({5})));\n    assert(candidate((std::vector<long>({2, 4, 3,\
    \ 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5})));\n    assert(candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5, 6}))) == (std::vector<long>({6, 5, 4, 3, 2, 1, 0})));\n    assert(candidate((std::vector<long>({2,\
    \ 1}))) == (std::vector<long>({1, 2})));\n    assert(candidate((std::vector<long>({15,\
    \ 42, 87, 32, 11, 0}))) == (std::vector<long>({0, 11, 15, 32, 42, 87})));\n  \
    \  assert(candidate((std::vector<long>({21, 14, 23, 11}))) == (std::vector<long>({23,\
    \ 21, 14, 11})));\n}\n"
  stdout: ''
  stderr: "tmpr03q6kwi: /tmp/tmpr03q6kwi.cpp:32: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5, 6}))) == (std::vector<long>({6, 5, 4, 3, 2, 1, 0}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// * sort_array([]) => []\n// * sort_array([5]) => [5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6])\
    \ => [6, 5, 4, 3, 2, 1, 0]\nstd::vector<long> sort_array(std::vector<long> array)\
    \ {\n    long long sum = 0;\n    for (auto i : array) {\n        sum += i;\n \
    \   }\n    if (sum % 2 == 0) {\n        std::sort(array.begin(), array.end());\n\
    \    } else {\n        std::sort(array.rbegin(), array.rend());\n    }\n    return\
    \ array;\n}\nint main() {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({5}))) ==\
    \ (std::vector<long>({5})));\n    assert(candidate((std::vector<long>({2, 4, 3,\
    \ 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5})));\n    assert(candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5, 6}))) == (std::vector<long>({6, 5, 4, 3, 2, 1, 0})));\n    assert(candidate((std::vector<long>({2,\
    \ 1}))) == (std::vector<long>({1, 2})));\n    assert(candidate((std::vector<long>({15,\
    \ 42, 87, 32, 11, 0}))) == (std::vector<long>({0, 11, 15, 32, 42, 87})));\n  \
    \  assert(candidate((std::vector<long>({21, 14, 23, 11}))) == (std::vector<long>({23,\
    \ 21, 14, 11})));\n}\n"
  stdout: ''
  stderr: "tmp8hecfb71: /tmp/tmp8hecfb71.cpp:29: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// * sort_array([]) => []\n// * sort_array([5]) => [5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6])\
    \ => [6, 5, 4, 3, 2, 1, 0]\nstd::vector<long> sort_array(std::vector<long> array)\
    \ {\n    // Your code here\n    long sum = 0;\n    for (long i = 0; i < array.size();\
    \ i++) {\n        sum += array[i];\n    }\n    if (sum % 2 == 0) {\n        std::sort(array.begin(),\
    \ array.end());\n    } else {\n        std::sort(array.rbegin(), array.rend());\n\
    \    }\n    return array;\n}\nint main() {\n    auto candidate = sort_array;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({5})))\
    \ == (std::vector<long>({5})));\n    assert(candidate((std::vector<long>({2, 4,\
    \ 3, 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5})));\n    assert(candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5, 6}))) == (std::vector<long>({6, 5, 4, 3, 2, 1, 0})));\n    assert(candidate((std::vector<long>({2,\
    \ 1}))) == (std::vector<long>({1, 2})));\n    assert(candidate((std::vector<long>({15,\
    \ 42, 87, 32, 11, 0}))) == (std::vector<long>({0, 11, 15, 32, 42, 87})));\n  \
    \  assert(candidate((std::vector<long>({21, 14, 23, 11}))) == (std::vector<long>({23,\
    \ 21, 14, 11})));\n}\n"
  stdout: ''
  stderr: "tmpg9g6cxab: /tmp/tmpg9g6cxab.cpp:30: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// * sort_array([]) => []\n// * sort_array([5]) => [5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6])\
    \ => [6, 5, 4, 3, 2, 1, 0]\nstd::vector<long> sort_array(std::vector<long> array)\
    \ {\n    long sum = 0;\n    for (long i : array) {\n        sum += i;\n    }\n\
    \    if (sum % 2 == 0) {\n        std::sort(array.begin(), array.end());\n   \
    \ } else {\n        std::sort(array.rbegin(), array.rend());\n    }\n    return\
    \ array;\n}\nint main() {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({5}))) ==\
    \ (std::vector<long>({5})));\n    assert(candidate((std::vector<long>({2, 4, 3,\
    \ 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5})));\n    assert(candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5, 6}))) == (std::vector<long>({6, 5, 4, 3, 2, 1, 0})));\n    assert(candidate((std::vector<long>({2,\
    \ 1}))) == (std::vector<long>({1, 2})));\n    assert(candidate((std::vector<long>({15,\
    \ 42, 87, 32, 11, 0}))) == (std::vector<long>({0, 11, 15, 32, 42, 87})));\n  \
    \  assert(candidate((std::vector<long>({21, 14, 23, 11}))) == (std::vector<long>({23,\
    \ 21, 14, 11})));\n}\n"
  stdout: ''
  stderr: "tmpj3v17j6m: /tmp/tmpj3v17j6m.cpp:29: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// * sort_array([]) => []\n// * sort_array([5]) => [5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6])\
    \ => [6, 5, 4, 3, 2, 1, 0]\nstd::vector<long> sort_array(std::vector<long> array)\
    \ {\n    // write your code here\n    long sum = 0;\n    for (long i : array)\
    \ {\n        sum += i;\n    }\n    if (sum % 2 == 0) {\n        std::sort(array.begin(),\
    \ array.end());\n    } else {\n        std::sort(array.rbegin(), array.rend());\n\
    \    }\n    return array;\n}\nint main() {\n    auto candidate = sort_array;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({5})))\
    \ == (std::vector<long>({5})));\n    assert(candidate((std::vector<long>({2, 4,\
    \ 3, 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5})));\n    assert(candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5, 6}))) == (std::vector<long>({6, 5, 4, 3, 2, 1, 0})));\n    assert(candidate((std::vector<long>({2,\
    \ 1}))) == (std::vector<long>({1, 2})));\n    assert(candidate((std::vector<long>({15,\
    \ 42, 87, 32, 11, 0}))) == (std::vector<long>({0, 11, 15, 32, 42, 87})));\n  \
    \  assert(candidate((std::vector<long>({21, 14, 23, 11}))) == (std::vector<long>({23,\
    \ 21, 14, 11})));\n}\n"
  stdout: ''
  stderr: "tmpf9kp8arx: /tmp/tmpf9kp8arx.cpp:30: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// * sort_array([]) => []\n// * sort_array([5]) => [5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6])\
    \ => [6, 5, 4, 3, 2, 1, 0]\nstd::vector<long> sort_array(std::vector<long> array)\
    \ {\n    long long sum = 0;\n    for (auto i : array) {\n        sum += i;\n \
    \   }\n    if (sum % 2 == 0) {\n        std::sort(array.begin(), array.end());\n\
    \    } else {\n        std::sort(array.rbegin(), array.rend());\n    }\n    return\
    \ array;\n}\nint main() {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({5}))) ==\
    \ (std::vector<long>({5})));\n    assert(candidate((std::vector<long>({2, 4, 3,\
    \ 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5})));\n    assert(candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5, 6}))) == (std::vector<long>({6, 5, 4, 3, 2, 1, 0})));\n    assert(candidate((std::vector<long>({2,\
    \ 1}))) == (std::vector<long>({1, 2})));\n    assert(candidate((std::vector<long>({15,\
    \ 42, 87, 32, 11, 0}))) == (std::vector<long>({0, 11, 15, 32, 42, 87})));\n  \
    \  assert(candidate((std::vector<long>({21, 14, 23, 11}))) == (std::vector<long>({23,\
    \ 21, 14, 11})));\n}\n"
  stdout: ''
  stderr: "tmpk54m53_6: /tmp/tmpk54m53_6.cpp:29: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// * sort_array([]) => []\n// * sort_array([5]) => [5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6])\
    \ => [6, 5, 4, 3, 2, 1, 0]\nstd::vector<long> sort_array(std::vector<long> array)\
    \ {\n    long sum = 0;\n    for (long i : array) {\n        sum += i;\n    }\n\
    \    if (sum % 2 == 0) {\n        std::sort(array.begin(), array.end());\n   \
    \ } else {\n        std::sort(array.rbegin(), array.rend());\n    }\n    return\
    \ array;\n}\nint main() {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({5}))) ==\
    \ (std::vector<long>({5})));\n    assert(candidate((std::vector<long>({2, 4, 3,\
    \ 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5})));\n    assert(candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5, 6}))) == (std::vector<long>({6, 5, 4, 3, 2, 1, 0})));\n    assert(candidate((std::vector<long>({2,\
    \ 1}))) == (std::vector<long>({1, 2})));\n    assert(candidate((std::vector<long>({15,\
    \ 42, 87, 32, 11, 0}))) == (std::vector<long>({0, 11, 15, 32, 42, 87})));\n  \
    \  assert(candidate((std::vector<long>({21, 14, 23, 11}))) == (std::vector<long>({23,\
    \ 21, 14, 11})));\n}\n"
  stdout: ''
  stderr: "tmppe0j7kow: /tmp/tmppe0j7kow.cpp:29: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// * sort_array([]) => []\n// * sort_array([5]) => [5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6])\
    \ => [6, 5, 4, 3, 2, 1, 0]\nstd::vector<long> sort_array(std::vector<long> array)\
    \ {\n    long long sum = 0;\n    for (long i = 0; i < array.size(); i++) {\n \
    \       sum += array[i];\n    }\n    if (sum % 2 != 0) {\n        std::sort(array.begin(),\
    \ array.end());\n    } else {\n        std::sort(array.rbegin(), array.rend());\n\
    \    }\n    return array;\n}\nint main() {\n    auto candidate = sort_array;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({5})))\
    \ == (std::vector<long>({5})));\n    assert(candidate((std::vector<long>({2, 4,\
    \ 3, 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5})));\n    assert(candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5, 6}))) == (std::vector<long>({6, 5, 4, 3, 2, 1, 0})));\n    assert(candidate((std::vector<long>({2,\
    \ 1}))) == (std::vector<long>({1, 2})));\n    assert(candidate((std::vector<long>({15,\
    \ 42, 87, 32, 11, 0}))) == (std::vector<long>({0, 11, 15, 32, 42, 87})));\n  \
    \  assert(candidate((std::vector<long>({21, 14, 23, 11}))) == (std::vector<long>({23,\
    \ 21, 14, 11})));\n}\n"
  stdout: ''
  stderr: "tmpbp1fqrkn: /tmp/tmpbp1fqrkn.cpp:30: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5, 6}))) == (std::vector<long>({6, 5, 4, 3, 2, 1, 0}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// * sort_array([]) => []\n// * sort_array([5]) => [5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6])\
    \ => [6, 5, 4, 3, 2, 1, 0]\nstd::vector<long> sort_array(std::vector<long> array)\
    \ {\n    // Your code here\n    long long sum = 0;\n    long long sum2 = 0;\n\
    \    for (long i = 0; i < array.size(); i++) {\n        sum += array[i];\n   \
    \     sum2 += array[i];\n    }\n    if (sum % 2 == 0) {\n        std::sort(array.begin(),\
    \ array.end());\n    } else {\n        std::sort(array.begin(), array.end(), std::greater<long\
    \ long>());\n    }\n    return array;\n}\nint main() {\n    auto candidate = sort_array;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({5})))\
    \ == (std::vector<long>({5})));\n    assert(candidate((std::vector<long>({2, 4,\
    \ 3, 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5})));\n    assert(candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5, 6}))) == (std::vector<long>({6, 5, 4, 3, 2, 1, 0})));\n    assert(candidate((std::vector<long>({2,\
    \ 1}))) == (std::vector<long>({1, 2})));\n    assert(candidate((std::vector<long>({15,\
    \ 42, 87, 32, 11, 0}))) == (std::vector<long>({0, 11, 15, 32, 42, 87})));\n  \
    \  assert(candidate((std::vector<long>({21, 14, 23, 11}))) == (std::vector<long>({23,\
    \ 21, 14, 11})));\n}\n"
  stdout: ''
  stderr: "tmpdxtdb8vy: /tmp/tmpdxtdb8vy.cpp:32: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// * sort_array([]) => []\n// * sort_array([5]) => [5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6])\
    \ => [6, 5, 4, 3, 2, 1, 0]\nstd::vector<long> sort_array(std::vector<long> array)\
    \ {\n    long long sum = 0;\n    for (long long i = 0; i < array.size(); i++)\
    \ {\n        sum += array[i];\n    }\n    if (sum % 2 == 0) {\n        std::sort(array.begin(),\
    \ array.end());\n    } else {\n        std::sort(array.rbegin(), array.rend());\n\
    \    }\n    return array;\n}\nint main() {\n    auto candidate = sort_array;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({5})))\
    \ == (std::vector<long>({5})));\n    assert(candidate((std::vector<long>({2, 4,\
    \ 3, 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5})));\n    assert(candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5, 6}))) == (std::vector<long>({6, 5, 4, 3, 2, 1, 0})));\n    assert(candidate((std::vector<long>({2,\
    \ 1}))) == (std::vector<long>({1, 2})));\n    assert(candidate((std::vector<long>({15,\
    \ 42, 87, 32, 11, 0}))) == (std::vector<long>({0, 11, 15, 32, 42, 87})));\n  \
    \  assert(candidate((std::vector<long>({21, 14, 23, 11}))) == (std::vector<long>({23,\
    \ 21, 14, 11})));\n}\n"
  stdout: ''
  stderr: "tmp34bix4fb: /tmp/tmp34bix4fb.cpp:29: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// * sort_array([]) => []\n// * sort_array([5]) => [5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6])\
    \ => [6, 5, 4, 3, 2, 1, 0]\nstd::vector<long> sort_array(std::vector<long> array)\
    \ {\n    long sum = 0;\n    for (long i : array) {\n        sum += i;\n    }\n\
    \    if (sum % 2 == 0) {\n        std::sort(array.begin(), array.end());\n   \
    \ } else {\n        std::sort(array.rbegin(), array.rend());\n    }\n    return\
    \ array;\n}\nint main() {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({5}))) ==\
    \ (std::vector<long>({5})));\n    assert(candidate((std::vector<long>({2, 4, 3,\
    \ 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5})));\n    assert(candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5, 6}))) == (std::vector<long>({6, 5, 4, 3, 2, 1, 0})));\n    assert(candidate((std::vector<long>({2,\
    \ 1}))) == (std::vector<long>({1, 2})));\n    assert(candidate((std::vector<long>({15,\
    \ 42, 87, 32, 11, 0}))) == (std::vector<long>({0, 11, 15, 32, 42, 87})));\n  \
    \  assert(candidate((std::vector<long>({21, 14, 23, 11}))) == (std::vector<long>({23,\
    \ 21, 14, 11})));\n}\n"
  stdout: ''
  stderr: "tmpe1pod32q: /tmp/tmpe1pod32q.cpp:29: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// * sort_array([]) => []\n// * sort_array([5]) => [5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6])\
    \ => [6, 5, 4, 3, 2, 1, 0]\nstd::vector<long> sort_array(std::vector<long> array)\
    \ {\n    // Your code here\n    long sum = 0;\n    for (long i : array) {\n  \
    \      sum += i;\n    }\n    if (sum % 2 == 0) {\n        std::sort(array.begin(),\
    \ array.end());\n    } else {\n        std::sort(array.rbegin(), array.rend());\n\
    \    }\n    return array;\n}\nint main() {\n    auto candidate = sort_array;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({5})))\
    \ == (std::vector<long>({5})));\n    assert(candidate((std::vector<long>({2, 4,\
    \ 3, 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5})));\n    assert(candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5, 6}))) == (std::vector<long>({6, 5, 4, 3, 2, 1, 0})));\n    assert(candidate((std::vector<long>({2,\
    \ 1}))) == (std::vector<long>({1, 2})));\n    assert(candidate((std::vector<long>({15,\
    \ 42, 87, 32, 11, 0}))) == (std::vector<long>({0, 11, 15, 32, 42, 87})));\n  \
    \  assert(candidate((std::vector<long>({21, 14, 23, 11}))) == (std::vector<long>({23,\
    \ 21, 14, 11})));\n}\n"
  stdout: ''
  stderr: "tmppxigbc0w: /tmp/tmppxigbc0w.cpp:30: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// * sort_array([]) => []\n// * sort_array([5]) => [5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6])\
    \ => [6, 5, 4, 3, 2, 1, 0]\nstd::vector<long> sort_array(std::vector<long> array)\
    \ {\n    long long sum = 0;\n    for (long i = 0; i < array.size(); i++) {\n \
    \       sum += array[i];\n    }\n    if (sum % 2 == 0) {\n        std::sort(array.begin(),\
    \ array.end());\n    } else {\n        std::sort(array.rbegin(), array.rend());\n\
    \    }\n    return array;\n}\nint main() {\n    auto candidate = sort_array;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({5})))\
    \ == (std::vector<long>({5})));\n    assert(candidate((std::vector<long>({2, 4,\
    \ 3, 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5})));\n    assert(candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5, 6}))) == (std::vector<long>({6, 5, 4, 3, 2, 1, 0})));\n    assert(candidate((std::vector<long>({2,\
    \ 1}))) == (std::vector<long>({1, 2})));\n    assert(candidate((std::vector<long>({15,\
    \ 42, 87, 32, 11, 0}))) == (std::vector<long>({0, 11, 15, 32, 42, 87})));\n  \
    \  assert(candidate((std::vector<long>({21, 14, 23, 11}))) == (std::vector<long>({23,\
    \ 21, 14, 11})));\n}\n"
  stdout: ''
  stderr: "tmp7aikmbt1: /tmp/tmp7aikmbt1.cpp:29: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// * sort_array([]) => []\n// * sort_array([5]) => [5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6])\
    \ => [6, 5, 4, 3, 2, 1, 0]\nstd::vector<long> sort_array(std::vector<long> array)\
    \ {\n    // write your code here\n    long long sum = 0;\n    for (long long i\
    \ = 0; i < array.size(); i++) {\n        sum += array[i];\n    }\n    if (sum\
    \ % 2 == 1) {\n        std::sort(array.begin(), array.end());\n    } else {\n\
    \        std::sort(array.rbegin(), array.rend());\n    }\n    return array;\n\
    }\nint main() {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({5}))) ==\
    \ (std::vector<long>({5})));\n    assert(candidate((std::vector<long>({2, 4, 3,\
    \ 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5})));\n    assert(candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5, 6}))) == (std::vector<long>({6, 5, 4, 3, 2, 1, 0})));\n    assert(candidate((std::vector<long>({2,\
    \ 1}))) == (std::vector<long>({1, 2})));\n    assert(candidate((std::vector<long>({15,\
    \ 42, 87, 32, 11, 0}))) == (std::vector<long>({0, 11, 15, 32, 42, 87})));\n  \
    \  assert(candidate((std::vector<long>({21, 14, 23, 11}))) == (std::vector<long>({23,\
    \ 21, 14, 11})));\n}\n"
  stdout: ''
  stderr: "tmprw3wj_f9: /tmp/tmprw3wj_f9.cpp:31: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5, 6}))) == (std::vector<long>({6, 5, 4, 3, 2, 1, 0}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// * sort_array([]) => []\n// * sort_array([5]) => [5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6])\
    \ => [6, 5, 4, 3, 2, 1, 0]\nstd::vector<long> sort_array(std::vector<long> array)\
    \ {\n    // Your code here\n    long sum = 0;\n    long temp = 0;\n    long temp2\
    \ = 0;\n    long temp3 = 0;\n    long temp4 = 0;\n    long temp5 = 0;\n    long\
    \ temp6 = 0;\n    long temp7 = 0;\n    long temp8 = 0;\n    long temp9 = 0;\n\
    \    long temp10 = 0;\n    long temp11 = 0;\n    long temp12 = 0;\n    long temp13\
    \ = 0;\n    long temp14 = 0;\n    long temp15 = 0;\n    long temp16 = 0;\n   \
    \ long temp17 = 0;\n    long temp18 = 0;\n    long temp19 = 0;\n    long temp20\
    \ = 0;\n    long temp21 = 0;\n    long temp22 = 0;\n    long temp23 = 0;\n   \
    \ long temp24 = 0;\n    long temp25 = 0;\n    long temp26 = 0;\n    long temp27\
    \ = 0;\n    long temp28 = 0;\n    long temp29 = 0;\n    long temp30 = 0;\n   \
    \ long temp31 = 0;\n    long temp32 = 0;\n    long temp33 = 0;\n    long temp34\
    \ = 0;\n    long temp35 = 0;\n    long temp36 = 0;\n    long temp37 = 0;\n   \
    \ long temp38 = 0;\n    long temp39 = 0;\n    long temp40 = 0;\n    long temp41\
    \ = 0;\n    long temp42 = 0;\n    long temp43 = 0;\n    long temp44 = 0;\n   \
    \ long temp45 = 0;\n    long temp46 = 0;\n    long temp47 = 0;\n    long temp48\
    \ = 0;\n    long temp49 = 0;\n    long temp50 = 0;\n    long temp51 = 0;\n   \
    \ long temp52 = 0;\n    long temp53 = 0;\n    long temp54 = 0;\n    long temp55\
    \ = 0;\n    long temp56 = 0;\n    long temp57 = 0;\n    long temp58 = 0;\n   \
    \ long temp59 = 0;\n    long temp60 = 0;\n    long temp61 = 0;\n    long temp62\
    \ = 0;\n    long temp63 = 0;\n    long temp64 = 0;\n    long temp65 = 0;\n   \
    \ long temp66 = 0;\n    long temp67 = 0;\n    long temp68 = 0;\n    long temp69\
    \ = 0;\n    long temp70 = 0;\n    long temp71 = 0;\n    long temp72 = 0;\n   \
    \ long temp73 = 0;\n    long temp74 = 0;\n    long temp75 = 0;\n    long temp76\
    \ = 0;\n    long temp77 = 0;\n    long temp78 = 0;\n    long temp79 = 0;\n   \
    \ long temp80 = 0;\n    long temp81 = 0;\n    long temp82 = 0;\n    long temp83\
    \ = 0;\n    long temp84 = 0;\n    long temp\n}\nint main() {\n    auto candidate\
    \ = sort_array;\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({5}))) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({2, 4, 3, 0, 1, 5}))) == (std::vector<long>({0,\
    \ 1, 2, 3, 4, 5})));\n    assert(candidate((std::vector<long>({2, 4, 3, 0, 1,\
    \ 5, 6}))) == (std::vector<long>({6, 5, 4, 3, 2, 1, 0})));\n    assert(candidate((std::vector<long>({2,\
    \ 1}))) == (std::vector<long>({1, 2})));\n    assert(candidate((std::vector<long>({15,\
    \ 42, 87, 32, 11, 0}))) == (std::vector<long>({0, 11, 15, 32, 42, 87})));\n  \
    \  assert(candidate((std::vector<long>({21, 14, 23, 11}))) == (std::vector<long>({23,\
    \ 21, 14, 11})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpni9dgwzh.cpp: In function \u2018std::vector<long int> sort_array(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpni9dgwzh.cpp:101:1: error: expected initializer before\
    \ \u2018}\u2019 token\n  101 | }\n      | ^\n/tmp/tmpni9dgwzh.cpp:101:1: warning:\
    \ no return statement in function returning non-void [-Wreturn-type]\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// * sort_array([]) => []\n// * sort_array([5]) => [5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6])\
    \ => [6, 5, 4, 3, 2, 1, 0]\nstd::vector<long> sort_array(std::vector<long> array)\
    \ {\n    // Your code here\n    long sum = 0;\n    for (long i = 0; i < array.size();\
    \ i++) {\n        sum += array[i];\n    }\n    if (sum % 2 == 0) {\n        std::sort(array.begin(),\
    \ array.end());\n    } else {\n        std::sort(array.rbegin(), array.rend());\n\
    \    }\n    return array;\n}\nint main() {\n    auto candidate = sort_array;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({5})))\
    \ == (std::vector<long>({5})));\n    assert(candidate((std::vector<long>({2, 4,\
    \ 3, 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5})));\n    assert(candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5, 6}))) == (std::vector<long>({6, 5, 4, 3, 2, 1, 0})));\n    assert(candidate((std::vector<long>({2,\
    \ 1}))) == (std::vector<long>({1, 2})));\n    assert(candidate((std::vector<long>({15,\
    \ 42, 87, 32, 11, 0}))) == (std::vector<long>({0, 11, 15, 32, 42, 87})));\n  \
    \  assert(candidate((std::vector<long>({21, 14, 23, 11}))) == (std::vector<long>({23,\
    \ 21, 14, 11})));\n}\n"
  stdout: ''
  stderr: "tmp64hprbmb: /tmp/tmp64hprbmb.cpp:30: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// * sort_array([]) => []\n// * sort_array([5]) => [5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6])\
    \ => [6, 5, 4, 3, 2, 1, 0]\nstd::vector<long> sort_array(std::vector<long> array)\
    \ {\n    long long sum = 0;\n    for (long long i = 0; i < array.size(); i++)\
    \ {\n        sum += array[i];\n    }\n    if (sum % 2 == 0) {\n        std::sort(array.begin(),\
    \ array.end());\n    } else {\n        std::sort(array.rbegin(), array.rend());\n\
    \    }\n    return array;\n}\nint main() {\n    auto candidate = sort_array;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({5})))\
    \ == (std::vector<long>({5})));\n    assert(candidate((std::vector<long>({2, 4,\
    \ 3, 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5})));\n    assert(candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5, 6}))) == (std::vector<long>({6, 5, 4, 3, 2, 1, 0})));\n    assert(candidate((std::vector<long>({2,\
    \ 1}))) == (std::vector<long>({1, 2})));\n    assert(candidate((std::vector<long>({15,\
    \ 42, 87, 32, 11, 0}))) == (std::vector<long>({0, 11, 15, 32, 42, 87})));\n  \
    \  assert(candidate((std::vector<long>({21, 14, 23, 11}))) == (std::vector<long>({23,\
    \ 21, 14, 11})));\n}\n"
  stdout: ''
  stderr: "tmpl2dc4kto: /tmp/tmpl2dc4kto.cpp:29: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// * sort_array([]) => []\n// * sort_array([5]) => [5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6])\
    \ => [6, 5, 4, 3, 2, 1, 0]\nstd::vector<long> sort_array(std::vector<long> array)\
    \ {\n    long long sum = 0;\n    for (long i = 0; i < array.size(); i++) {\n \
    \       sum += array[i];\n    }\n    if (sum % 2 == 0) {\n        std::sort(array.begin(),\
    \ array.end());\n    } else {\n        std::sort(array.rbegin(), array.rend());\n\
    \    }\n    return array;\n}\nint main() {\n    auto candidate = sort_array;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({5})))\
    \ == (std::vector<long>({5})));\n    assert(candidate((std::vector<long>({2, 4,\
    \ 3, 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5})));\n    assert(candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5, 6}))) == (std::vector<long>({6, 5, 4, 3, 2, 1, 0})));\n    assert(candidate((std::vector<long>({2,\
    \ 1}))) == (std::vector<long>({1, 2})));\n    assert(candidate((std::vector<long>({15,\
    \ 42, 87, 32, 11, 0}))) == (std::vector<long>({0, 11, 15, 32, 42, 87})));\n  \
    \  assert(candidate((std::vector<long>({21, 14, 23, 11}))) == (std::vector<long>({23,\
    \ 21, 14, 11})));\n}\n"
  stdout: ''
  stderr: "tmp2wql7dee: /tmp/tmp2wql7dee.cpp:29: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// * sort_array([]) => []\n// * sort_array([5]) => [5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6])\
    \ => [6, 5, 4, 3, 2, 1, 0]\nstd::vector<long> sort_array(std::vector<long> array)\
    \ {\n    long long sum = 0;\n    for (long long i = 0; i < array.size(); i++)\
    \ {\n        sum += array[i];\n    }\n    if (sum % 2 == 0) {\n        std::sort(array.begin(),\
    \ array.end());\n    } else {\n        std::sort(array.rbegin(), array.rend());\n\
    \    }\n    return array;\n}\nint main() {\n    auto candidate = sort_array;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({5})))\
    \ == (std::vector<long>({5})));\n    assert(candidate((std::vector<long>({2, 4,\
    \ 3, 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5})));\n    assert(candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5, 6}))) == (std::vector<long>({6, 5, 4, 3, 2, 1, 0})));\n    assert(candidate((std::vector<long>({2,\
    \ 1}))) == (std::vector<long>({1, 2})));\n    assert(candidate((std::vector<long>({15,\
    \ 42, 87, 32, 11, 0}))) == (std::vector<long>({0, 11, 15, 32, 42, 87})));\n  \
    \  assert(candidate((std::vector<long>({21, 14, 23, 11}))) == (std::vector<long>({23,\
    \ 21, 14, 11})));\n}\n"
  stdout: ''
  stderr: "tmp3hzzuzw6: /tmp/tmp3hzzuzw6.cpp:29: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// * sort_array([]) => []\n// * sort_array([5]) => [5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6])\
    \ => [6, 5, 4, 3, 2, 1, 0]\nstd::vector<long> sort_array(std::vector<long> array)\
    \ {\n    // Your code here\n    long long sum = 0;\n    for (long long i = 0;\
    \ i < array.size(); i++) {\n        sum += array[i];\n    }\n    if (sum % 2 ==\
    \ 1) {\n        std::sort(array.begin(), array.end());\n    } else {\n       \
    \ std::sort(array.rbegin(), array.rend());\n    }\n    return array;\n}\nint main()\
    \ {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({5}))) ==\
    \ (std::vector<long>({5})));\n    assert(candidate((std::vector<long>({2, 4, 3,\
    \ 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5})));\n    assert(candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5, 6}))) == (std::vector<long>({6, 5, 4, 3, 2, 1, 0})));\n    assert(candidate((std::vector<long>({2,\
    \ 1}))) == (std::vector<long>({1, 2})));\n    assert(candidate((std::vector<long>({15,\
    \ 42, 87, 32, 11, 0}))) == (std::vector<long>({0, 11, 15, 32, 42, 87})));\n  \
    \  assert(candidate((std::vector<long>({21, 14, 23, 11}))) == (std::vector<long>({23,\
    \ 21, 14, 11})));\n}\n"
  stdout: ''
  stderr: "tmp23c1n9_u: /tmp/tmp23c1n9_u.cpp:31: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5, 6}))) == (std::vector<long>({6, 5, 4, 3, 2, 1, 0}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// * sort_array([]) => []\n// * sort_array([5]) => [5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6])\
    \ => [6, 5, 4, 3, 2, 1, 0]\nstd::vector<long> sort_array(std::vector<long> array)\
    \ {\n    // Your code here\n    long long sum = 0;\n    for (long i = 0; i < array.size();\
    \ i++) {\n        sum += array[i];\n    }\n    if (sum % 2 == 0) {\n        std::sort(array.begin(),\
    \ array.end());\n    } else {\n        std::sort(array.rbegin(), array.rend());\n\
    \    }\n    return array;\n}\nint main() {\n    auto candidate = sort_array;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({5})))\
    \ == (std::vector<long>({5})));\n    assert(candidate((std::vector<long>({2, 4,\
    \ 3, 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5})));\n    assert(candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5, 6}))) == (std::vector<long>({6, 5, 4, 3, 2, 1, 0})));\n    assert(candidate((std::vector<long>({2,\
    \ 1}))) == (std::vector<long>({1, 2})));\n    assert(candidate((std::vector<long>({15,\
    \ 42, 87, 32, 11, 0}))) == (std::vector<long>({0, 11, 15, 32, 42, 87})));\n  \
    \  assert(candidate((std::vector<long>({21, 14, 23, 11}))) == (std::vector<long>({23,\
    \ 21, 14, 11})));\n}\n"
  stdout: ''
  stderr: "tmpyaikzwag: /tmp/tmpyaikzwag.cpp:30: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// * sort_array([]) => []\n// * sort_array([5]) => [5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6])\
    \ => [6, 5, 4, 3, 2, 1, 0]\nstd::vector<long> sort_array(std::vector<long> array)\
    \ {\n    // Your code here\n    long sum = 0;\n    for (long i : array) {\n  \
    \      sum += i;\n    }\n    if (sum % 2 == 0) {\n        std::sort(array.begin(),\
    \ array.end());\n    } else {\n        std::sort(array.rbegin(), array.rend());\n\
    \    }\n    return array;\n}\nint main() {\n    auto candidate = sort_array;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({5})))\
    \ == (std::vector<long>({5})));\n    assert(candidate((std::vector<long>({2, 4,\
    \ 3, 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5})));\n    assert(candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5, 6}))) == (std::vector<long>({6, 5, 4, 3, 2, 1, 0})));\n    assert(candidate((std::vector<long>({2,\
    \ 1}))) == (std::vector<long>({1, 2})));\n    assert(candidate((std::vector<long>({15,\
    \ 42, 87, 32, 11, 0}))) == (std::vector<long>({0, 11, 15, 32, 42, 87})));\n  \
    \  assert(candidate((std::vector<long>({21, 14, 23, 11}))) == (std::vector<long>({23,\
    \ 21, 14, 11})));\n}\n"
  stdout: ''
  stderr: "tmp9brdjvl1: /tmp/tmp9brdjvl1.cpp:30: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// * sort_array([]) => []\n// * sort_array([5]) => [5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6])\
    \ => [6, 5, 4, 3, 2, 1, 0]\nstd::vector<long> sort_array(std::vector<long> array)\
    \ {\n    long sum = 0;\n    for (long i : array) {\n        sum += i;\n    }\n\
    \    if (sum % 2 == 0) {\n        std::sort(array.begin(), array.end());\n   \
    \ } else {\n        std::sort(array.rbegin(), array.rend());\n    }\n    return\
    \ array;\n}\nint main() {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({5}))) ==\
    \ (std::vector<long>({5})));\n    assert(candidate((std::vector<long>({2, 4, 3,\
    \ 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5})));\n    assert(candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5, 6}))) == (std::vector<long>({6, 5, 4, 3, 2, 1, 0})));\n    assert(candidate((std::vector<long>({2,\
    \ 1}))) == (std::vector<long>({1, 2})));\n    assert(candidate((std::vector<long>({15,\
    \ 42, 87, 32, 11, 0}))) == (std::vector<long>({0, 11, 15, 32, 42, 87})));\n  \
    \  assert(candidate((std::vector<long>({21, 14, 23, 11}))) == (std::vector<long>({23,\
    \ 21, 14, 11})));\n}\n"
  stdout: ''
  stderr: "tmpqg2rjobi: /tmp/tmpqg2rjobi.cpp:29: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// * sort_array([]) => []\n// * sort_array([5]) => [5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6])\
    \ => [6, 5, 4, 3, 2, 1, 0]\nstd::vector<long> sort_array(std::vector<long> array)\
    \ {\n    // write your code here\n    long sum = 0;\n    for (long i = 0; i <\
    \ array.size(); i++) {\n        sum += array[i];\n    }\n    if (sum % 2 == 1)\
    \ {\n        std::sort(array.begin(), array.end());\n    } else {\n        std::sort(array.rbegin(),\
    \ array.rend());\n    }\n    return array;\n}\nint main() {\n    auto candidate\
    \ = sort_array;\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({5}))) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({2, 4, 3, 0, 1, 5}))) == (std::vector<long>({0,\
    \ 1, 2, 3, 4, 5})));\n    assert(candidate((std::vector<long>({2, 4, 3, 0, 1,\
    \ 5, 6}))) == (std::vector<long>({6, 5, 4, 3, 2, 1, 0})));\n    assert(candidate((std::vector<long>({2,\
    \ 1}))) == (std::vector<long>({1, 2})));\n    assert(candidate((std::vector<long>({15,\
    \ 42, 87, 32, 11, 0}))) == (std::vector<long>({0, 11, 15, 32, 42, 87})));\n  \
    \  assert(candidate((std::vector<long>({21, 14, 23, 11}))) == (std::vector<long>({23,\
    \ 21, 14, 11})));\n}\n"
  stdout: ''
  stderr: "tmpupi43zq0: /tmp/tmpupi43zq0.cpp:31: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5, 6}))) == (std::vector<long>({6, 5, 4, 3, 2, 1, 0}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// * sort_array([]) => []\n// * sort_array([5]) => [5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6])\
    \ => [6, 5, 4, 3, 2, 1, 0]\nstd::vector<long> sort_array(std::vector<long> array)\
    \ {\n    // write your code here\n    long long sum = 0;\n    for (long i = 0;\
    \ i < array.size(); i++) {\n        sum += array[i];\n    }\n    if (sum % 2 ==\
    \ 1) {\n        std::sort(array.begin(), array.end());\n    } else {\n       \
    \ std::sort(array.rbegin(), array.rend());\n    }\n    return array;\n}\nint main()\
    \ {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({5}))) ==\
    \ (std::vector<long>({5})));\n    assert(candidate((std::vector<long>({2, 4, 3,\
    \ 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5})));\n    assert(candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5, 6}))) == (std::vector<long>({6, 5, 4, 3, 2, 1, 0})));\n    assert(candidate((std::vector<long>({2,\
    \ 1}))) == (std::vector<long>({1, 2})));\n    assert(candidate((std::vector<long>({15,\
    \ 42, 87, 32, 11, 0}))) == (std::vector<long>({0, 11, 15, 32, 42, 87})));\n  \
    \  assert(candidate((std::vector<long>({21, 14, 23, 11}))) == (std::vector<long>({23,\
    \ 21, 14, 11})));\n}\n"
  stdout: ''
  stderr: "tmp5yi74opa: /tmp/tmp5yi74opa.cpp:31: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5, 6}))) == (std::vector<long>({6, 5, 4, 3, 2, 1, 0}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// * sort_array([]) => []\n// * sort_array([5]) => [5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6])\
    \ => [6, 5, 4, 3, 2, 1, 0]\nstd::vector<long> sort_array(std::vector<long> array)\
    \ {\n    // Your code here\n    long long sum = 0;\n    for (long i = 0; i < array.size();\
    \ i++) {\n        sum += array[i];\n    }\n    if (sum % 2 == 0) {\n        std::sort(array.begin(),\
    \ array.end());\n    } else {\n        std::sort(array.rbegin(), array.rend());\n\
    \    }\n    return array;\n}\nint main() {\n    auto candidate = sort_array;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({5})))\
    \ == (std::vector<long>({5})));\n    assert(candidate((std::vector<long>({2, 4,\
    \ 3, 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5})));\n    assert(candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5, 6}))) == (std::vector<long>({6, 5, 4, 3, 2, 1, 0})));\n    assert(candidate((std::vector<long>({2,\
    \ 1}))) == (std::vector<long>({1, 2})));\n    assert(candidate((std::vector<long>({15,\
    \ 42, 87, 32, 11, 0}))) == (std::vector<long>({0, 11, 15, 32, 42, 87})));\n  \
    \  assert(candidate((std::vector<long>({21, 14, 23, 11}))) == (std::vector<long>({23,\
    \ 21, 14, 11})));\n}\n"
  stdout: ''
  stderr: "tmparoiekbj: /tmp/tmparoiekbj.cpp:30: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// * sort_array([]) => []\n// * sort_array([5]) => [5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6])\
    \ => [6, 5, 4, 3, 2, 1, 0]\nstd::vector<long> sort_array(std::vector<long> array)\
    \ {\n    // write your code here\n    long long sum = 0;\n    for (long i = 0;\
    \ i < array.size(); i++) {\n        sum += array[i];\n    }\n    if (sum % 2 ==\
    \ 0) {\n        std::sort(array.begin(), array.end());\n    } else {\n       \
    \ std::sort(array.rbegin(), array.rend());\n    }\n    return array;\n}\nint main()\
    \ {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({5}))) ==\
    \ (std::vector<long>({5})));\n    assert(candidate((std::vector<long>({2, 4, 3,\
    \ 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5})));\n    assert(candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5, 6}))) == (std::vector<long>({6, 5, 4, 3, 2, 1, 0})));\n    assert(candidate((std::vector<long>({2,\
    \ 1}))) == (std::vector<long>({1, 2})));\n    assert(candidate((std::vector<long>({15,\
    \ 42, 87, 32, 11, 0}))) == (std::vector<long>({0, 11, 15, 32, 42, 87})));\n  \
    \  assert(candidate((std::vector<long>({21, 14, 23, 11}))) == (std::vector<long>({23,\
    \ 21, 14, 11})));\n}\n"
  stdout: ''
  stderr: "tmpn5njoyxd: /tmp/tmpn5njoyxd.cpp:30: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// * sort_array([]) => []\n// * sort_array([5]) => [5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6])\
    \ => [6, 5, 4, 3, 2, 1, 0]\nstd::vector<long> sort_array(std::vector<long> array)\
    \ {\n    // Your code here\n    long sum = 0;\n    for (long i : array) {\n  \
    \      sum += i;\n    }\n    if (sum % 2 == 0) {\n        std::sort(array.begin(),\
    \ array.end());\n    } else {\n        std::sort(array.rbegin(), array.rend());\n\
    \    }\n    return array;\n}\nint main() {\n    auto candidate = sort_array;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({5})))\
    \ == (std::vector<long>({5})));\n    assert(candidate((std::vector<long>({2, 4,\
    \ 3, 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5})));\n    assert(candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5, 6}))) == (std::vector<long>({6, 5, 4, 3, 2, 1, 0})));\n    assert(candidate((std::vector<long>({2,\
    \ 1}))) == (std::vector<long>({1, 2})));\n    assert(candidate((std::vector<long>({15,\
    \ 42, 87, 32, 11, 0}))) == (std::vector<long>({0, 11, 15, 32, 42, 87})));\n  \
    \  assert(candidate((std::vector<long>({21, 14, 23, 11}))) == (std::vector<long>({23,\
    \ 21, 14, 11})));\n}\n"
  stdout: ''
  stderr: "tmp71c0xuaa: /tmp/tmp71c0xuaa.cpp:30: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// * sort_array([]) => []\n// * sort_array([5]) => [5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6])\
    \ => [6, 5, 4, 3, 2, 1, 0]\nstd::vector<long> sort_array(std::vector<long> array)\
    \ {\n    // write your code here\n    long sum = 0;\n    for (long i = 0; i <\
    \ array.size(); i++) {\n        sum += array[i];\n    }\n    if (sum % 2 == 0)\
    \ {\n        std::sort(array.begin(), array.end());\n    } else {\n        std::sort(array.rbegin(),\
    \ array.rend());\n    }\n    return array;\n}\nint main() {\n    auto candidate\
    \ = sort_array;\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({5}))) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({2, 4, 3, 0, 1, 5}))) == (std::vector<long>({0,\
    \ 1, 2, 3, 4, 5})));\n    assert(candidate((std::vector<long>({2, 4, 3, 0, 1,\
    \ 5, 6}))) == (std::vector<long>({6, 5, 4, 3, 2, 1, 0})));\n    assert(candidate((std::vector<long>({2,\
    \ 1}))) == (std::vector<long>({1, 2})));\n    assert(candidate((std::vector<long>({15,\
    \ 42, 87, 32, 11, 0}))) == (std::vector<long>({0, 11, 15, 32, 42, 87})));\n  \
    \  assert(candidate((std::vector<long>({21, 14, 23, 11}))) == (std::vector<long>({23,\
    \ 21, 14, 11})));\n}\n"
  stdout: ''
  stderr: "tmpxhekhw4d: /tmp/tmpxhekhw4d.cpp:30: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// * sort_array([]) => []\n// * sort_array([5]) => [5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6])\
    \ => [6, 5, 4, 3, 2, 1, 0]\nstd::vector<long> sort_array(std::vector<long> array)\
    \ {\n    // Your code here\n    long long sum = 0;\n    for (long i = 0; i < array.size();\
    \ i++) {\n        sum += array[i];\n    }\n    if (sum % 2 == 0) {\n        std::sort(array.begin(),\
    \ array.end());\n    } else {\n        std::sort(array.rbegin(), array.rend());\n\
    \    }\n    return array;\n}\nint main() {\n    auto candidate = sort_array;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({5})))\
    \ == (std::vector<long>({5})));\n    assert(candidate((std::vector<long>({2, 4,\
    \ 3, 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5})));\n    assert(candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5, 6}))) == (std::vector<long>({6, 5, 4, 3, 2, 1, 0})));\n    assert(candidate((std::vector<long>({2,\
    \ 1}))) == (std::vector<long>({1, 2})));\n    assert(candidate((std::vector<long>({15,\
    \ 42, 87, 32, 11, 0}))) == (std::vector<long>({0, 11, 15, 32, 42, 87})));\n  \
    \  assert(candidate((std::vector<long>({21, 14, 23, 11}))) == (std::vector<long>({23,\
    \ 21, 14, 11})));\n}\n"
  stdout: ''
  stderr: "tmpmv8x5h74: /tmp/tmpmv8x5h74.cpp:30: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// * sort_array([]) => []\n// * sort_array([5]) => [5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6])\
    \ => [6, 5, 4, 3, 2, 1, 0]\nstd::vector<long> sort_array(std::vector<long> array)\
    \ {\n    long sum = 0;\n    for (long i : array) {\n        sum += i;\n    }\n\
    \    if (sum % 2 == 1) {\n        std::sort(array.begin(), array.end());\n   \
    \ } else {\n        std::sort(array.rbegin(), array.rend());\n    }\n    return\
    \ array;\n}\nint main() {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({5}))) ==\
    \ (std::vector<long>({5})));\n    assert(candidate((std::vector<long>({2, 4, 3,\
    \ 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5})));\n    assert(candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5, 6}))) == (std::vector<long>({6, 5, 4, 3, 2, 1, 0})));\n    assert(candidate((std::vector<long>({2,\
    \ 1}))) == (std::vector<long>({1, 2})));\n    assert(candidate((std::vector<long>({15,\
    \ 42, 87, 32, 11, 0}))) == (std::vector<long>({0, 11, 15, 32, 42, 87})));\n  \
    \  assert(candidate((std::vector<long>({21, 14, 23, 11}))) == (std::vector<long>({23,\
    \ 21, 14, 11})));\n}\n"
  stdout: ''
  stderr: "tmp3e0u5em9: /tmp/tmp3e0u5em9.cpp:30: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5, 6}))) == (std::vector<long>({6, 5, 4, 3, 2, 1, 0}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// * sort_array([]) => []\n// * sort_array([5]) => [5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6])\
    \ => [6, 5, 4, 3, 2, 1, 0]\nstd::vector<long> sort_array(std::vector<long> array)\
    \ {\n    long long sum = 0;\n    for (long long i = 0; i < array.size(); i++)\
    \ {\n        sum += array[i];\n    }\n    if (sum % 2 == 0) {\n        std::sort(array.begin(),\
    \ array.end());\n    } else {\n        std::sort(array.rbegin(), array.rend());\n\
    \    }\n    return array;\n}\nint main() {\n    auto candidate = sort_array;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({5})))\
    \ == (std::vector<long>({5})));\n    assert(candidate((std::vector<long>({2, 4,\
    \ 3, 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5})));\n    assert(candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5, 6}))) == (std::vector<long>({6, 5, 4, 3, 2, 1, 0})));\n    assert(candidate((std::vector<long>({2,\
    \ 1}))) == (std::vector<long>({1, 2})));\n    assert(candidate((std::vector<long>({15,\
    \ 42, 87, 32, 11, 0}))) == (std::vector<long>({0, 11, 15, 32, 42, 87})));\n  \
    \  assert(candidate((std::vector<long>({21, 14, 23, 11}))) == (std::vector<long>({23,\
    \ 21, 14, 11})));\n}\n"
  stdout: ''
  stderr: "tmplrz_ggd2: /tmp/tmplrz_ggd2.cpp:29: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// * sort_array([]) => []\n// * sort_array([5]) => [5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6])\
    \ => [6, 5, 4, 3, 2, 1, 0]\nstd::vector<long> sort_array(std::vector<long> array)\
    \ {\n    long long sum = 0;\n    for (long long i = 0; i < array.size(); i++)\
    \ {\n        sum += array[i];\n    }\n    if (sum % 2 == 0) {\n        std::sort(array.begin(),\
    \ array.end());\n    } else {\n        std::sort(array.rbegin(), array.rend());\n\
    \    }\n    return array;\n}\nint main() {\n    auto candidate = sort_array;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({5})))\
    \ == (std::vector<long>({5})));\n    assert(candidate((std::vector<long>({2, 4,\
    \ 3, 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5})));\n    assert(candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5, 6}))) == (std::vector<long>({6, 5, 4, 3, 2, 1, 0})));\n    assert(candidate((std::vector<long>({2,\
    \ 1}))) == (std::vector<long>({1, 2})));\n    assert(candidate((std::vector<long>({15,\
    \ 42, 87, 32, 11, 0}))) == (std::vector<long>({0, 11, 15, 32, 42, 87})));\n  \
    \  assert(candidate((std::vector<long>({21, 14, 23, 11}))) == (std::vector<long>({23,\
    \ 21, 14, 11})));\n}\n"
  stdout: ''
  stderr: "tmpfi2g1acx: /tmp/tmpfi2g1acx.cpp:29: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// * sort_array([]) => []\n// * sort_array([5]) => [5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6])\
    \ => [6, 5, 4, 3, 2, 1, 0]\nstd::vector<long> sort_array(std::vector<long> array)\
    \ {\n    // Your code here\n    long sum = 0;\n    for (long i : array) {\n  \
    \      sum += i;\n    }\n    if (sum % 2 == 0) {\n        std::sort(array.begin(),\
    \ array.end());\n    } else {\n        std::sort(array.rbegin(), array.rend());\n\
    \    }\n    return array;\n}\nint main() {\n    auto candidate = sort_array;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({5})))\
    \ == (std::vector<long>({5})));\n    assert(candidate((std::vector<long>({2, 4,\
    \ 3, 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5})));\n    assert(candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5, 6}))) == (std::vector<long>({6, 5, 4, 3, 2, 1, 0})));\n    assert(candidate((std::vector<long>({2,\
    \ 1}))) == (std::vector<long>({1, 2})));\n    assert(candidate((std::vector<long>({15,\
    \ 42, 87, 32, 11, 0}))) == (std::vector<long>({0, 11, 15, 32, 42, 87})));\n  \
    \  assert(candidate((std::vector<long>({21, 14, 23, 11}))) == (std::vector<long>({23,\
    \ 21, 14, 11})));\n}\n"
  stdout: ''
  stderr: "tmpqo7mwzrc: /tmp/tmpqo7mwzrc.cpp:30: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// * sort_array([]) => []\n// * sort_array([5]) => [5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6])\
    \ => [6, 5, 4, 3, 2, 1, 0]\nstd::vector<long> sort_array(std::vector<long> array)\
    \ {\n    // Your code here\n    long long sum = 0;\n    for (long i = 0; i < array.size();\
    \ i++) {\n        sum += array[i];\n    }\n    if (sum % 2 == 0) {\n        std::sort(array.begin(),\
    \ array.end());\n    } else {\n        std::sort(array.rbegin(), array.rend());\n\
    \    }\n    return array;\n}\nint main() {\n    auto candidate = sort_array;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({5})))\
    \ == (std::vector<long>({5})));\n    assert(candidate((std::vector<long>({2, 4,\
    \ 3, 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5})));\n    assert(candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5, 6}))) == (std::vector<long>({6, 5, 4, 3, 2, 1, 0})));\n    assert(candidate((std::vector<long>({2,\
    \ 1}))) == (std::vector<long>({1, 2})));\n    assert(candidate((std::vector<long>({15,\
    \ 42, 87, 32, 11, 0}))) == (std::vector<long>({0, 11, 15, 32, 42, 87})));\n  \
    \  assert(candidate((std::vector<long>({21, 14, 23, 11}))) == (std::vector<long>({23,\
    \ 21, 14, 11})));\n}\n"
  stdout: ''
  stderr: "tmpuly8v92h: /tmp/tmpuly8v92h.cpp:30: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// * sort_array([]) => []\n// * sort_array([5]) => [5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6])\
    \ => [6, 5, 4, 3, 2, 1, 0]\nstd::vector<long> sort_array(std::vector<long> array)\
    \ {\n    // write your code here\n    long sum = 0;\n    for (long i = 0; i <\
    \ array.size(); i++) {\n        sum += array[i];\n    }\n    if (sum % 2 == 0)\
    \ {\n        std::sort(array.begin(), array.end());\n    } else {\n        std::sort(array.rbegin(),\
    \ array.rend());\n    }\n    return array;\n}\nint main() {\n    auto candidate\
    \ = sort_array;\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({5}))) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({2, 4, 3, 0, 1, 5}))) == (std::vector<long>({0,\
    \ 1, 2, 3, 4, 5})));\n    assert(candidate((std::vector<long>({2, 4, 3, 0, 1,\
    \ 5, 6}))) == (std::vector<long>({6, 5, 4, 3, 2, 1, 0})));\n    assert(candidate((std::vector<long>({2,\
    \ 1}))) == (std::vector<long>({1, 2})));\n    assert(candidate((std::vector<long>({15,\
    \ 42, 87, 32, 11, 0}))) == (std::vector<long>({0, 11, 15, 32, 42, 87})));\n  \
    \  assert(candidate((std::vector<long>({21, 14, 23, 11}))) == (std::vector<long>({23,\
    \ 21, 14, 11})));\n}\n"
  stdout: ''
  stderr: "tmpbe1x3etz: /tmp/tmpbe1x3etz.cpp:30: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// * sort_array([]) => []\n// * sort_array([5]) => [5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6])\
    \ => [6, 5, 4, 3, 2, 1, 0]\nstd::vector<long> sort_array(std::vector<long> array)\
    \ {\n    long long sum = 0;\n    for (auto i : array) {\n        sum += i;\n \
    \   }\n    if (sum % 2 == 0) {\n        std::sort(array.begin(), array.end());\n\
    \    } else {\n        std::sort(array.rbegin(), array.rend());\n    }\n    return\
    \ array;\n}\nint main() {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({5}))) ==\
    \ (std::vector<long>({5})));\n    assert(candidate((std::vector<long>({2, 4, 3,\
    \ 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5})));\n    assert(candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5, 6}))) == (std::vector<long>({6, 5, 4, 3, 2, 1, 0})));\n    assert(candidate((std::vector<long>({2,\
    \ 1}))) == (std::vector<long>({1, 2})));\n    assert(candidate((std::vector<long>({15,\
    \ 42, 87, 32, 11, 0}))) == (std::vector<long>({0, 11, 15, 32, 42, 87})));\n  \
    \  assert(candidate((std::vector<long>({21, 14, 23, 11}))) == (std::vector<long>({23,\
    \ 21, 14, 11})));\n}\n"
  stdout: ''
  stderr: "tmpw9qmxnbc: /tmp/tmpw9qmxnbc.cpp:29: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// * sort_array([]) => []\n// * sort_array([5]) => [5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6])\
    \ => [6, 5, 4, 3, 2, 1, 0]\nstd::vector<long> sort_array(std::vector<long> array)\
    \ {\n    long long sum = 0;\n    for (long long i = 0; i < array.size(); i++)\
    \ {\n        sum += array[i];\n    }\n    if (sum % 2 == 0) {\n        std::sort(array.begin(),\
    \ array.end());\n    } else {\n        std::sort(array.rbegin(), array.rend());\n\
    \    }\n    return array;\n}\nint main() {\n    auto candidate = sort_array;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({5})))\
    \ == (std::vector<long>({5})));\n    assert(candidate((std::vector<long>({2, 4,\
    \ 3, 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5})));\n    assert(candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5, 6}))) == (std::vector<long>({6, 5, 4, 3, 2, 1, 0})));\n    assert(candidate((std::vector<long>({2,\
    \ 1}))) == (std::vector<long>({1, 2})));\n    assert(candidate((std::vector<long>({15,\
    \ 42, 87, 32, 11, 0}))) == (std::vector<long>({0, 11, 15, 32, 42, 87})));\n  \
    \  assert(candidate((std::vector<long>({21, 14, 23, 11}))) == (std::vector<long>({23,\
    \ 21, 14, 11})));\n}\n"
  stdout: ''
  stderr: "tmphzhfkvm8: /tmp/tmphzhfkvm8.cpp:29: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// * sort_array([]) => []\n// * sort_array([5]) => [5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6])\
    \ => [6, 5, 4, 3, 2, 1, 0]\nstd::vector<long> sort_array(std::vector<long> array)\
    \ {\n    // Your code here\n    long long sum = 0;\n    for (long i = 0; i < array.size();\
    \ i++) {\n        sum += array[i];\n    }\n    if (sum % 2 == 1) {\n        std::sort(array.begin(),\
    \ array.end());\n    } else {\n        std::sort(array.rbegin(), array.rend());\n\
    \    }\n    return array;\n}\nint main() {\n    auto candidate = sort_array;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({5})))\
    \ == (std::vector<long>({5})));\n    assert(candidate((std::vector<long>({2, 4,\
    \ 3, 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5})));\n    assert(candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5, 6}))) == (std::vector<long>({6, 5, 4, 3, 2, 1, 0})));\n    assert(candidate((std::vector<long>({2,\
    \ 1}))) == (std::vector<long>({1, 2})));\n    assert(candidate((std::vector<long>({15,\
    \ 42, 87, 32, 11, 0}))) == (std::vector<long>({0, 11, 15, 32, 42, 87})));\n  \
    \  assert(candidate((std::vector<long>({21, 14, 23, 11}))) == (std::vector<long>({23,\
    \ 21, 14, 11})));\n}\n"
  stdout: ''
  stderr: "tmp38m440iq: /tmp/tmp38m440iq.cpp:31: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5, 6}))) == (std::vector<long>({6, 5, 4, 3, 2, 1, 0}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// * sort_array([]) => []\n// * sort_array([5]) => [5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6])\
    \ => [6, 5, 4, 3, 2, 1, 0]\nstd::vector<long> sort_array(std::vector<long> array)\
    \ {\n    // Your code here\n    long sum = 0;\n    for (long i : array) {\n  \
    \      sum += i;\n    }\n    if (sum % 2 == 0) {\n        std::sort(array.begin(),\
    \ array.end());\n    } else {\n        std::sort(array.rbegin(), array.rend());\n\
    \    }\n    return array;\n}\nint main() {\n    auto candidate = sort_array;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({5})))\
    \ == (std::vector<long>({5})));\n    assert(candidate((std::vector<long>({2, 4,\
    \ 3, 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5})));\n    assert(candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5, 6}))) == (std::vector<long>({6, 5, 4, 3, 2, 1, 0})));\n    assert(candidate((std::vector<long>({2,\
    \ 1}))) == (std::vector<long>({1, 2})));\n    assert(candidate((std::vector<long>({15,\
    \ 42, 87, 32, 11, 0}))) == (std::vector<long>({0, 11, 15, 32, 42, 87})));\n  \
    \  assert(candidate((std::vector<long>({21, 14, 23, 11}))) == (std::vector<long>({23,\
    \ 21, 14, 11})));\n}\n"
  stdout: ''
  stderr: "tmp06vje0qs: /tmp/tmp06vje0qs.cpp:30: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// * sort_array([]) => []\n// * sort_array([5]) => [5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6])\
    \ => [6, 5, 4, 3, 2, 1, 0]\nstd::vector<long> sort_array(std::vector<long> array)\
    \ {\n    long sum = 0;\n    for (long i : array) {\n        sum += i;\n    }\n\
    \    if (sum % 2 == 0) {\n        std::sort(array.begin(), array.end());\n   \
    \ } else {\n        std::sort(array.rbegin(), array.rend());\n    }\n    return\
    \ array;\n}\nint main() {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({5}))) ==\
    \ (std::vector<long>({5})));\n    assert(candidate((std::vector<long>({2, 4, 3,\
    \ 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5})));\n    assert(candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5, 6}))) == (std::vector<long>({6, 5, 4, 3, 2, 1, 0})));\n    assert(candidate((std::vector<long>({2,\
    \ 1}))) == (std::vector<long>({1, 2})));\n    assert(candidate((std::vector<long>({15,\
    \ 42, 87, 32, 11, 0}))) == (std::vector<long>({0, 11, 15, 32, 42, 87})));\n  \
    \  assert(candidate((std::vector<long>({21, 14, 23, 11}))) == (std::vector<long>({23,\
    \ 21, 14, 11})));\n}\n"
  stdout: ''
  stderr: "tmp3hf65eaf: /tmp/tmp3hf65eaf.cpp:29: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// * sort_array([]) => []\n// * sort_array([5]) => [5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6])\
    \ => [6, 5, 4, 3, 2, 1, 0]\nstd::vector<long> sort_array(std::vector<long> array)\
    \ {\n    // write your code here\n    long sum = 0;\n    for (long i : array)\
    \ {\n        sum += i;\n    }\n    if (sum % 2 == 0) {\n        std::sort(array.begin(),\
    \ array.end());\n    } else {\n        std::sort(array.rbegin(), array.rend());\n\
    \    }\n    return array;\n}\nint main() {\n    auto candidate = sort_array;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({5})))\
    \ == (std::vector<long>({5})));\n    assert(candidate((std::vector<long>({2, 4,\
    \ 3, 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5})));\n    assert(candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5, 6}))) == (std::vector<long>({6, 5, 4, 3, 2, 1, 0})));\n    assert(candidate((std::vector<long>({2,\
    \ 1}))) == (std::vector<long>({1, 2})));\n    assert(candidate((std::vector<long>({15,\
    \ 42, 87, 32, 11, 0}))) == (std::vector<long>({0, 11, 15, 32, 42, 87})));\n  \
    \  assert(candidate((std::vector<long>({21, 14, 23, 11}))) == (std::vector<long>({23,\
    \ 21, 14, 11})));\n}\n"
  stdout: ''
  stderr: "tmpbuhb9jfe: /tmp/tmpbuhb9jfe.cpp:30: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// * sort_array([]) => []\n// * sort_array([5]) => [5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6])\
    \ => [6, 5, 4, 3, 2, 1, 0]\nstd::vector<long> sort_array(std::vector<long> array)\
    \ {\n    // write your code here\n    long sum = 0;\n    for (long i = 0; i <\
    \ array.size(); i++) {\n        sum += array[i];\n    }\n    if (sum % 2 == 1)\
    \ {\n        std::sort(array.begin(), array.end());\n    } else {\n        std::sort(array.rbegin(),\
    \ array.rend());\n    }\n    return array;\n}\nint main() {\n    auto candidate\
    \ = sort_array;\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({5}))) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({2, 4, 3, 0, 1, 5}))) == (std::vector<long>({0,\
    \ 1, 2, 3, 4, 5})));\n    assert(candidate((std::vector<long>({2, 4, 3, 0, 1,\
    \ 5, 6}))) == (std::vector<long>({6, 5, 4, 3, 2, 1, 0})));\n    assert(candidate((std::vector<long>({2,\
    \ 1}))) == (std::vector<long>({1, 2})));\n    assert(candidate((std::vector<long>({15,\
    \ 42, 87, 32, 11, 0}))) == (std::vector<long>({0, 11, 15, 32, 42, 87})));\n  \
    \  assert(candidate((std::vector<long>({21, 14, 23, 11}))) == (std::vector<long>({23,\
    \ 21, 14, 11})));\n}\n"
  stdout: ''
  stderr: "tmpob958kxm: /tmp/tmpob958kxm.cpp:31: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5, 6}))) == (std::vector<long>({6, 5, 4, 3, 2, 1, 0}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// * sort_array([]) => []\n// * sort_array([5]) => [5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6])\
    \ => [6, 5, 4, 3, 2, 1, 0]\nstd::vector<long> sort_array(std::vector<long> array)\
    \ {\n    // Your code here\n    long long sum = 0;\n    for (long i = 0; i < array.size();\
    \ i++) {\n        sum += array[i];\n    }\n    if (sum % 2 == 1) {\n        std::sort(array.begin(),\
    \ array.end());\n    } else {\n        std::sort(array.rbegin(), array.rend());\n\
    \    }\n    return array;\n}\nint main() {\n    auto candidate = sort_array;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({5})))\
    \ == (std::vector<long>({5})));\n    assert(candidate((std::vector<long>({2, 4,\
    \ 3, 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5})));\n    assert(candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5, 6}))) == (std::vector<long>({6, 5, 4, 3, 2, 1, 0})));\n    assert(candidate((std::vector<long>({2,\
    \ 1}))) == (std::vector<long>({1, 2})));\n    assert(candidate((std::vector<long>({15,\
    \ 42, 87, 32, 11, 0}))) == (std::vector<long>({0, 11, 15, 32, 42, 87})));\n  \
    \  assert(candidate((std::vector<long>({21, 14, 23, 11}))) == (std::vector<long>({23,\
    \ 21, 14, 11})));\n}\n"
  stdout: ''
  stderr: "tmphxr2frbq: /tmp/tmphxr2frbq.cpp:31: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5, 6}))) == (std::vector<long>({6, 5, 4, 3, 2, 1, 0}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// * sort_array([]) => []\n// * sort_array([5]) => [5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6])\
    \ => [6, 5, 4, 3, 2, 1, 0]\nstd::vector<long> sort_array(std::vector<long> array)\
    \ {\n    // Your code here\n    long long sum = 0;\n    for (long i = 0; i < array.size();\
    \ i++) {\n        sum += array[i];\n    }\n    if (sum % 2 == 0) {\n        std::sort(array.begin(),\
    \ array.end());\n    } else {\n        std::sort(array.rbegin(), array.rend());\n\
    \    }\n    return array;\n}\nint main() {\n    auto candidate = sort_array;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({5})))\
    \ == (std::vector<long>({5})));\n    assert(candidate((std::vector<long>({2, 4,\
    \ 3, 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5})));\n    assert(candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5, 6}))) == (std::vector<long>({6, 5, 4, 3, 2, 1, 0})));\n    assert(candidate((std::vector<long>({2,\
    \ 1}))) == (std::vector<long>({1, 2})));\n    assert(candidate((std::vector<long>({15,\
    \ 42, 87, 32, 11, 0}))) == (std::vector<long>({0, 11, 15, 32, 42, 87})));\n  \
    \  assert(candidate((std::vector<long>({21, 14, 23, 11}))) == (std::vector<long>({23,\
    \ 21, 14, 11})));\n}\n"
  stdout: ''
  stderr: "tmppx7ma_kt: /tmp/tmppx7ma_kt.cpp:30: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// * sort_array([]) => []\n// * sort_array([5]) => [5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6])\
    \ => [6, 5, 4, 3, 2, 1, 0]\nstd::vector<long> sort_array(std::vector<long> array)\
    \ {\n    // write your code here\n    long long sum = 0;\n    long long sum1 =\
    \ 0;\n    long long sum2 = 0;\n    long long sum3 = 0;\n    long long sum4 = 0;\n\
    \    long long sum5 = 0;\n    long long sum6 = 0;\n    long long sum7 = 0;\n \
    \   long long sum8 = 0;\n    long long sum9 = 0;\n    long long sum10 = 0;\n \
    \   long long sum11 = 0;\n    long long sum12 = 0;\n    long long sum13 = 0;\n\
    \    long long sum14 = 0;\n    long long sum15 = 0;\n    long long sum16 = 0;\n\
    \    long long sum17 = 0;\n    long long sum18 = 0;\n    long long sum19 = 0;\n\
    \    long long sum20 = 0;\n    long long sum21 = 0;\n    long long sum22 = 0;\n\
    \    long long sum23 = 0;\n    long long sum24 = 0;\n    long long sum25 = 0;\n\
    \    long long sum26 = 0;\n    long long sum27 = 0;\n    long long sum28 = 0;\n\
    \    long long sum29 = 0;\n    long long sum30 = 0;\n    long long sum31 = 0;\n\
    \    long long sum32 = 0;\n    long long sum33 = 0;\n    long long sum34 = 0;\n\
    \    long long sum35 = 0;\n    long long sum36 = 0;\n    long long sum37 = 0;\n\
    \    long long sum38 = 0;\n    long long sum39 = 0;\n    long long sum40 = 0;\n\
    \    long long sum41 = 0;\n    long long sum42 = 0;\n    long long sum43 = 0;\n\
    \    long long sum44 = 0;\n    long long sum45 = 0;\n    long long sum46 = 0;\n\
    \    long long sum47 = 0;\n    long long sum48 = 0;\n    long long sum49 = 0;\n\
    \    long long sum50 = 0;\n    long long sum51 = 0;\n    long long sum52 = 0;\n\
    \    long long sum53 = 0;\n    long long sum54 = 0;\n    long long sum55 = 0;\n\
    \    long long sum56 = 0;\n    long long sum57 = 0;\n    long long sum58 = 0;\n\
    \    long long sum59 = 0;\n    long long sum60 = 0;\n    long long sum61 = 0;\n\
    \    long long sum62 = 0;\n    long long sum63 = 0;\n    long long sum64 = 0;\n\
    \    long long sum65 = 0;\n    long long sum66 = 0;\n    long long sum67 = 0;\n\
    \    long long sum68 = 0;\n    long long sum69 = 0;\n    long long sum70 = 0;\n\
    \    long long sum71 = 0;\n    long long sum72 = 0;\n    long \n}\nint main()\
    \ {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({5}))) ==\
    \ (std::vector<long>({5})));\n    assert(candidate((std::vector<long>({2, 4, 3,\
    \ 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5})));\n    assert(candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5, 6}))) == (std::vector<long>({6, 5, 4, 3, 2, 1, 0})));\n    assert(candidate((std::vector<long>({2,\
    \ 1}))) == (std::vector<long>({1, 2})));\n    assert(candidate((std::vector<long>({15,\
    \ 42, 87, 32, 11, 0}))) == (std::vector<long>({0, 11, 15, 32, 42, 87})));\n  \
    \  assert(candidate((std::vector<long>({21, 14, 23, 11}))) == (std::vector<long>({23,\
    \ 21, 14, 11})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp5jhmkook.cpp: In function \u2018std::vector<long int> sort_array(std::vector<long\
    \ int>)\u2019:\n/tmp/tmp5jhmkook.cpp:89:1: error: expected unqualified-id before\
    \ \u2018}\u2019 token\n   89 | }\n      | ^\n/tmp/tmp5jhmkook.cpp:89:1: warning:\
    \ no return statement in function returning non-void [-Wreturn-type]\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// * sort_array([]) => []\n// * sort_array([5]) => [5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6])\
    \ => [6, 5, 4, 3, 2, 1, 0]\nstd::vector<long> sort_array(std::vector<long> array)\
    \ {\n    // write your code here\n    long sum = 0;\n    for (long i = 0; i <\
    \ array.size(); i++) {\n        sum += array[i];\n    }\n    if (sum % 2 == 0)\
    \ {\n        std::sort(array.begin(), array.end());\n    } else {\n        std::sort(array.rbegin(),\
    \ array.rend());\n    }\n    return array;\n}\nint main() {\n    auto candidate\
    \ = sort_array;\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({5}))) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({2, 4, 3, 0, 1, 5}))) == (std::vector<long>({0,\
    \ 1, 2, 3, 4, 5})));\n    assert(candidate((std::vector<long>({2, 4, 3, 0, 1,\
    \ 5, 6}))) == (std::vector<long>({6, 5, 4, 3, 2, 1, 0})));\n    assert(candidate((std::vector<long>({2,\
    \ 1}))) == (std::vector<long>({1, 2})));\n    assert(candidate((std::vector<long>({15,\
    \ 42, 87, 32, 11, 0}))) == (std::vector<long>({0, 11, 15, 32, 42, 87})));\n  \
    \  assert(candidate((std::vector<long>({21, 14, 23, 11}))) == (std::vector<long>({23,\
    \ 21, 14, 11})));\n}\n"
  stdout: ''
  stderr: "tmp2sdp7imn: /tmp/tmp2sdp7imn.cpp:30: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// * sort_array([]) => []\n// * sort_array([5]) => [5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6])\
    \ => [6, 5, 4, 3, 2, 1, 0]\nstd::vector<long> sort_array(std::vector<long> array)\
    \ {\n    std::vector<long> result;\n    long sum = 0;\n    for (auto i : array)\
    \ {\n        sum += i;\n        result.push_back(i);\n    }\n    if (sum % 2 ==\
    \ 0) {\n        std::sort(result.begin(), result.end());\n    } else {\n     \
    \   std::sort(result.rbegin(), result.rend());\n    }\n    return result;\n}\n\
    int main() {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({5}))) ==\
    \ (std::vector<long>({5})));\n    assert(candidate((std::vector<long>({2, 4, 3,\
    \ 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5})));\n    assert(candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5, 6}))) == (std::vector<long>({6, 5, 4, 3, 2, 1, 0})));\n    assert(candidate((std::vector<long>({2,\
    \ 1}))) == (std::vector<long>({1, 2})));\n    assert(candidate((std::vector<long>({15,\
    \ 42, 87, 32, 11, 0}))) == (std::vector<long>({0, 11, 15, 32, 42, 87})));\n  \
    \  assert(candidate((std::vector<long>({21, 14, 23, 11}))) == (std::vector<long>({23,\
    \ 21, 14, 11})));\n}\n"
  stdout: ''
  stderr: "tmpm4x62cj2: /tmp/tmpm4x62cj2.cpp:31: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// * sort_array([]) => []\n// * sort_array([5]) => [5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6])\
    \ => [6, 5, 4, 3, 2, 1, 0]\nstd::vector<long> sort_array(std::vector<long> array)\
    \ {\n    long long sum = 0;\n    for (long long i = 0; i < array.size(); i++)\
    \ {\n        sum += array[i];\n    }\n    if (sum % 2 == 0) {\n        std::sort(array.begin(),\
    \ array.end());\n    } else {\n        std::sort(array.rbegin(), array.rend());\n\
    \    }\n    return array;\n}\nint main() {\n    auto candidate = sort_array;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({5})))\
    \ == (std::vector<long>({5})));\n    assert(candidate((std::vector<long>({2, 4,\
    \ 3, 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5})));\n    assert(candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5, 6}))) == (std::vector<long>({6, 5, 4, 3, 2, 1, 0})));\n    assert(candidate((std::vector<long>({2,\
    \ 1}))) == (std::vector<long>({1, 2})));\n    assert(candidate((std::vector<long>({15,\
    \ 42, 87, 32, 11, 0}))) == (std::vector<long>({0, 11, 15, 32, 42, 87})));\n  \
    \  assert(candidate((std::vector<long>({21, 14, 23, 11}))) == (std::vector<long>({23,\
    \ 21, 14, 11})));\n}\n"
  stdout: ''
  stderr: "tmpw8lyqaef: /tmp/tmpw8lyqaef.cpp:29: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// * sort_array([]) => []\n// * sort_array([5]) => [5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6])\
    \ => [6, 5, 4, 3, 2, 1, 0]\nstd::vector<long> sort_array(std::vector<long> array)\
    \ {\n    long long sum = 0;\n    for (auto i : array) {\n        sum += i;\n \
    \   }\n    if (sum % 2 == 0) {\n        std::sort(array.begin(), array.end());\n\
    \    } else {\n        std::sort(array.rbegin(), array.rend());\n    }\n    return\
    \ array;\n}\nint main() {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({5}))) ==\
    \ (std::vector<long>({5})));\n    assert(candidate((std::vector<long>({2, 4, 3,\
    \ 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5})));\n    assert(candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5, 6}))) == (std::vector<long>({6, 5, 4, 3, 2, 1, 0})));\n    assert(candidate((std::vector<long>({2,\
    \ 1}))) == (std::vector<long>({1, 2})));\n    assert(candidate((std::vector<long>({15,\
    \ 42, 87, 32, 11, 0}))) == (std::vector<long>({0, 11, 15, 32, 42, 87})));\n  \
    \  assert(candidate((std::vector<long>({21, 14, 23, 11}))) == (std::vector<long>({23,\
    \ 21, 14, 11})));\n}\n"
  stdout: ''
  stderr: "tmpypwtzyn3: /tmp/tmpypwtzyn3.cpp:29: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// * sort_array([]) => []\n// * sort_array([5]) => [5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6])\
    \ => [6, 5, 4, 3, 2, 1, 0]\nstd::vector<long> sort_array(std::vector<long> array)\
    \ {\n    long sum = 0;\n    for (long i : array) {\n        sum += i;\n    }\n\
    \    if (sum % 2 == 0) {\n        std::sort(array.begin(), array.end());\n   \
    \ } else {\n        std::sort(array.rbegin(), array.rend());\n    }\n    return\
    \ array;\n}\nint main() {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({5}))) ==\
    \ (std::vector<long>({5})));\n    assert(candidate((std::vector<long>({2, 4, 3,\
    \ 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5})));\n    assert(candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5, 6}))) == (std::vector<long>({6, 5, 4, 3, 2, 1, 0})));\n    assert(candidate((std::vector<long>({2,\
    \ 1}))) == (std::vector<long>({1, 2})));\n    assert(candidate((std::vector<long>({15,\
    \ 42, 87, 32, 11, 0}))) == (std::vector<long>({0, 11, 15, 32, 42, 87})));\n  \
    \  assert(candidate((std::vector<long>({21, 14, 23, 11}))) == (std::vector<long>({23,\
    \ 21, 14, 11})));\n}\n"
  stdout: ''
  stderr: "tmp81i143rp: /tmp/tmp81i143rp.cpp:29: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// * sort_array([]) => []\n// * sort_array([5]) => [5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6])\
    \ => [6, 5, 4, 3, 2, 1, 0]\nstd::vector<long> sort_array(std::vector<long> array)\
    \ {\n    long long sum = 0;\n    for (long long i = 0; i < array.size(); i++)\
    \ {\n        sum += array[i];\n    }\n    if (sum % 2 == 0) {\n        std::sort(array.begin(),\
    \ array.end());\n        return array;\n    } else {\n        std::sort(array.rbegin(),\
    \ array.rend());\n        return array;\n    }\n}\nint main() {\n    auto candidate\
    \ = sort_array;\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({5}))) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({2, 4, 3, 0, 1, 5}))) == (std::vector<long>({0,\
    \ 1, 2, 3, 4, 5})));\n    assert(candidate((std::vector<long>({2, 4, 3, 0, 1,\
    \ 5, 6}))) == (std::vector<long>({6, 5, 4, 3, 2, 1, 0})));\n    assert(candidate((std::vector<long>({2,\
    \ 1}))) == (std::vector<long>({1, 2})));\n    assert(candidate((std::vector<long>({15,\
    \ 42, 87, 32, 11, 0}))) == (std::vector<long>({0, 11, 15, 32, 42, 87})));\n  \
    \  assert(candidate((std::vector<long>({21, 14, 23, 11}))) == (std::vector<long>({23,\
    \ 21, 14, 11})));\n}\n"
  stdout: ''
  stderr: "tmpka8hntnl: /tmp/tmpka8hntnl.cpp:30: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// * sort_array([]) => []\n// * sort_array([5]) => [5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6])\
    \ => [6, 5, 4, 3, 2, 1, 0]\nstd::vector<long> sort_array(std::vector<long> array)\
    \ {\n    // Your code here\n    long sum = 0;\n    for (long i : array) {\n  \
    \      sum += i;\n    }\n    if (sum % 2 == 1) {\n        std::sort(array.begin(),\
    \ array.end());\n    } else {\n        std::sort(array.rbegin(), array.rend());\n\
    \    }\n    return array;\n}\nint main() {\n    auto candidate = sort_array;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({5})))\
    \ == (std::vector<long>({5})));\n    assert(candidate((std::vector<long>({2, 4,\
    \ 3, 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5})));\n    assert(candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5, 6}))) == (std::vector<long>({6, 5, 4, 3, 2, 1, 0})));\n    assert(candidate((std::vector<long>({2,\
    \ 1}))) == (std::vector<long>({1, 2})));\n    assert(candidate((std::vector<long>({15,\
    \ 42, 87, 32, 11, 0}))) == (std::vector<long>({0, 11, 15, 32, 42, 87})));\n  \
    \  assert(candidate((std::vector<long>({21, 14, 23, 11}))) == (std::vector<long>({23,\
    \ 21, 14, 11})));\n}\n"
  stdout: ''
  stderr: "tmpkdsgucz_: /tmp/tmpkdsgucz_.cpp:31: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5, 6}))) == (std::vector<long>({6, 5, 4, 3, 2, 1, 0}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// * sort_array([]) => []\n// * sort_array([5]) => [5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6])\
    \ => [6, 5, 4, 3, 2, 1, 0]\nstd::vector<long> sort_array(std::vector<long> array)\
    \ {\n    // write your code here\n    long long sum = 0;\n    for (long i = 0;\
    \ i < array.size(); i++) {\n        sum += array[i];\n    }\n    if (sum % 2 ==\
    \ 0) {\n        std::sort(array.begin(), array.end());\n    } else {\n       \
    \ std::sort(array.rbegin(), array.rend());\n    }\n    return array;\n}\nint main()\
    \ {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({5}))) ==\
    \ (std::vector<long>({5})));\n    assert(candidate((std::vector<long>({2, 4, 3,\
    \ 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5})));\n    assert(candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5, 6}))) == (std::vector<long>({6, 5, 4, 3, 2, 1, 0})));\n    assert(candidate((std::vector<long>({2,\
    \ 1}))) == (std::vector<long>({1, 2})));\n    assert(candidate((std::vector<long>({15,\
    \ 42, 87, 32, 11, 0}))) == (std::vector<long>({0, 11, 15, 32, 42, 87})));\n  \
    \  assert(candidate((std::vector<long>({21, 14, 23, 11}))) == (std::vector<long>({23,\
    \ 21, 14, 11})));\n}\n"
  stdout: ''
  stderr: "tmpb8ztzq7p: /tmp/tmpb8ztzq7p.cpp:30: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// * sort_array([]) => []\n// * sort_array([5]) => [5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6])\
    \ => [6, 5, 4, 3, 2, 1, 0]\nstd::vector<long> sort_array(std::vector<long> array)\
    \ {\n    long long sum = 0;\n    for (auto i : array) {\n        sum += i;\n \
    \   }\n    if (sum % 2 == 0) {\n        std::sort(array.begin(), array.end());\n\
    \    } else {\n        std::sort(array.rbegin(), array.rend());\n    }\n    return\
    \ array;\n}\nint main() {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({5}))) ==\
    \ (std::vector<long>({5})));\n    assert(candidate((std::vector<long>({2, 4, 3,\
    \ 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5})));\n    assert(candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5, 6}))) == (std::vector<long>({6, 5, 4, 3, 2, 1, 0})));\n    assert(candidate((std::vector<long>({2,\
    \ 1}))) == (std::vector<long>({1, 2})));\n    assert(candidate((std::vector<long>({15,\
    \ 42, 87, 32, 11, 0}))) == (std::vector<long>({0, 11, 15, 32, 42, 87})));\n  \
    \  assert(candidate((std::vector<long>({21, 14, 23, 11}))) == (std::vector<long>({23,\
    \ 21, 14, 11})));\n}\n"
  stdout: ''
  stderr: "tmpxaxkmutp: /tmp/tmpxaxkmutp.cpp:29: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// * sort_array([]) => []\n// * sort_array([5]) => [5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6])\
    \ => [6, 5, 4, 3, 2, 1, 0]\nstd::vector<long> sort_array(std::vector<long> array)\
    \ {\n    // write your code here\n    long sum = 0;\n    for (long i = 0; i <\
    \ array.size(); i++) {\n        sum += array[i];\n    }\n    if (sum % 2 == 0)\
    \ {\n        std::sort(array.begin(), array.end());\n    } else {\n        std::sort(array.rbegin(),\
    \ array.rend());\n    }\n    return array;\n}\nint main() {\n    auto candidate\
    \ = sort_array;\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({5}))) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({2, 4, 3, 0, 1, 5}))) == (std::vector<long>({0,\
    \ 1, 2, 3, 4, 5})));\n    assert(candidate((std::vector<long>({2, 4, 3, 0, 1,\
    \ 5, 6}))) == (std::vector<long>({6, 5, 4, 3, 2, 1, 0})));\n    assert(candidate((std::vector<long>({2,\
    \ 1}))) == (std::vector<long>({1, 2})));\n    assert(candidate((std::vector<long>({15,\
    \ 42, 87, 32, 11, 0}))) == (std::vector<long>({0, 11, 15, 32, 42, 87})));\n  \
    \  assert(candidate((std::vector<long>({21, 14, 23, 11}))) == (std::vector<long>({23,\
    \ 21, 14, 11})));\n}\n"
  stdout: ''
  stderr: "tmp2p9gs5xs: /tmp/tmp2p9gs5xs.cpp:30: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// * sort_array([]) => []\n// * sort_array([5]) => [5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6])\
    \ => [6, 5, 4, 3, 2, 1, 0]\nstd::vector<long> sort_array(std::vector<long> array)\
    \ {\n    // write your code here\n    long sum = 0;\n    for (long i : array)\
    \ {\n        sum += i;\n    }\n    if (sum % 2 == 0) {\n        std::sort(array.begin(),\
    \ array.end());\n    } else {\n        std::sort(array.rbegin(), array.rend());\n\
    \    }\n    return array;\n}\nint main() {\n    auto candidate = sort_array;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({5})))\
    \ == (std::vector<long>({5})));\n    assert(candidate((std::vector<long>({2, 4,\
    \ 3, 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5})));\n    assert(candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5, 6}))) == (std::vector<long>({6, 5, 4, 3, 2, 1, 0})));\n    assert(candidate((std::vector<long>({2,\
    \ 1}))) == (std::vector<long>({1, 2})));\n    assert(candidate((std::vector<long>({15,\
    \ 42, 87, 32, 11, 0}))) == (std::vector<long>({0, 11, 15, 32, 42, 87})));\n  \
    \  assert(candidate((std::vector<long>({21, 14, 23, 11}))) == (std::vector<long>({23,\
    \ 21, 14, 11})));\n}\n"
  stdout: ''
  stderr: "tmpykfhcjvv: /tmp/tmpykfhcjvv.cpp:30: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// * sort_array([]) => []\n// * sort_array([5]) => [5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6])\
    \ => [6, 5, 4, 3, 2, 1, 0]\nstd::vector<long> sort_array(std::vector<long> array)\
    \ {\n    long long sum = 0;\n    for (auto i : array) {\n        sum += i;\n \
    \   }\n    if (sum % 2 == 0) {\n        std::sort(array.begin(), array.end());\n\
    \    } else {\n        std::sort(array.rbegin(), array.rend());\n    }\n    return\
    \ array;\n}\nint main() {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({5}))) ==\
    \ (std::vector<long>({5})));\n    assert(candidate((std::vector<long>({2, 4, 3,\
    \ 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5})));\n    assert(candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5, 6}))) == (std::vector<long>({6, 5, 4, 3, 2, 1, 0})));\n    assert(candidate((std::vector<long>({2,\
    \ 1}))) == (std::vector<long>({1, 2})));\n    assert(candidate((std::vector<long>({15,\
    \ 42, 87, 32, 11, 0}))) == (std::vector<long>({0, 11, 15, 32, 42, 87})));\n  \
    \  assert(candidate((std::vector<long>({21, 14, 23, 11}))) == (std::vector<long>({23,\
    \ 21, 14, 11})));\n}\n"
  stdout: ''
  stderr: "tmpwx5sin7b: /tmp/tmpwx5sin7b.cpp:29: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// * sort_array([]) => []\n// * sort_array([5]) => [5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6])\
    \ => [6, 5, 4, 3, 2, 1, 0]\nstd::vector<long> sort_array(std::vector<long> array)\
    \ {\n    // Your code here\n    long long sum = 0;\n    for (long i = 0; i < array.size();\
    \ i++) {\n        sum += array[i];\n    }\n    if (sum % 2 == 0) {\n        std::sort(array.begin(),\
    \ array.end());\n    } else {\n        std::sort(array.rbegin(), array.rend());\n\
    \    }\n    return array;\n}\nint main() {\n    auto candidate = sort_array;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({5})))\
    \ == (std::vector<long>({5})));\n    assert(candidate((std::vector<long>({2, 4,\
    \ 3, 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5})));\n    assert(candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5, 6}))) == (std::vector<long>({6, 5, 4, 3, 2, 1, 0})));\n    assert(candidate((std::vector<long>({2,\
    \ 1}))) == (std::vector<long>({1, 2})));\n    assert(candidate((std::vector<long>({15,\
    \ 42, 87, 32, 11, 0}))) == (std::vector<long>({0, 11, 15, 32, 42, 87})));\n  \
    \  assert(candidate((std::vector<long>({21, 14, 23, 11}))) == (std::vector<long>({23,\
    \ 21, 14, 11})));\n}\n"
  stdout: ''
  stderr: "tmp0oak2w7e: /tmp/tmp0oak2w7e.cpp:30: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// * sort_array([]) => []\n// * sort_array([5]) => [5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6])\
    \ => [6, 5, 4, 3, 2, 1, 0]\nstd::vector<long> sort_array(std::vector<long> array)\
    \ {\n    long long sum = 0;\n    for (long long i = 0; i < array.size(); i++)\
    \ {\n        sum += array[i];\n    }\n    if (sum % 2 == 0) {\n        std::sort(array.begin(),\
    \ array.end());\n    } else {\n        std::sort(array.rbegin(), array.rend());\n\
    \    }\n    return array;\n}\nint main() {\n    auto candidate = sort_array;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({5})))\
    \ == (std::vector<long>({5})));\n    assert(candidate((std::vector<long>({2, 4,\
    \ 3, 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5})));\n    assert(candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5, 6}))) == (std::vector<long>({6, 5, 4, 3, 2, 1, 0})));\n    assert(candidate((std::vector<long>({2,\
    \ 1}))) == (std::vector<long>({1, 2})));\n    assert(candidate((std::vector<long>({15,\
    \ 42, 87, 32, 11, 0}))) == (std::vector<long>({0, 11, 15, 32, 42, 87})));\n  \
    \  assert(candidate((std::vector<long>({21, 14, 23, 11}))) == (std::vector<long>({23,\
    \ 21, 14, 11})));\n}\n"
  stdout: ''
  stderr: "tmp8tog3dli: /tmp/tmp8tog3dli.cpp:29: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// * sort_array([]) => []\n// * sort_array([5]) => [5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6])\
    \ => [6, 5, 4, 3, 2, 1, 0]\nstd::vector<long> sort_array(std::vector<long> array)\
    \ {\n    // Your code here\n    long long sum = 0;\n    for (long i = 0; i < array.size();\
    \ i++) {\n        sum += array[i];\n    }\n    if (sum % 2 == 0) {\n        std::sort(array.begin(),\
    \ array.end());\n    } else {\n        std::sort(array.rbegin(), array.rend());\n\
    \    }\n    return array;\n}\nint main() {\n    auto candidate = sort_array;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({5})))\
    \ == (std::vector<long>({5})));\n    assert(candidate((std::vector<long>({2, 4,\
    \ 3, 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5})));\n    assert(candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5, 6}))) == (std::vector<long>({6, 5, 4, 3, 2, 1, 0})));\n    assert(candidate((std::vector<long>({2,\
    \ 1}))) == (std::vector<long>({1, 2})));\n    assert(candidate((std::vector<long>({15,\
    \ 42, 87, 32, 11, 0}))) == (std::vector<long>({0, 11, 15, 32, 42, 87})));\n  \
    \  assert(candidate((std::vector<long>({21, 14, 23, 11}))) == (std::vector<long>({23,\
    \ 21, 14, 11})));\n}\n"
  stdout: ''
  stderr: "tmp8j2ksuqf: /tmp/tmp8j2ksuqf.cpp:30: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// * sort_array([]) => []\n// * sort_array([5]) => [5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6])\
    \ => [6, 5, 4, 3, 2, 1, 0]\nstd::vector<long> sort_array(std::vector<long> array)\
    \ {\n    long long sum = 0;\n    for (long i = 0; i < array.size(); i++) {\n \
    \       sum += array[i];\n    }\n    if (sum % 2 == 0) {\n        std::sort(array.begin(),\
    \ array.end());\n    } else {\n        std::sort(array.rbegin(), array.rend());\n\
    \    }\n    return array;\n}\nint main() {\n    auto candidate = sort_array;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({5})))\
    \ == (std::vector<long>({5})));\n    assert(candidate((std::vector<long>({2, 4,\
    \ 3, 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5})));\n    assert(candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5, 6}))) == (std::vector<long>({6, 5, 4, 3, 2, 1, 0})));\n    assert(candidate((std::vector<long>({2,\
    \ 1}))) == (std::vector<long>({1, 2})));\n    assert(candidate((std::vector<long>({15,\
    \ 42, 87, 32, 11, 0}))) == (std::vector<long>({0, 11, 15, 32, 42, 87})));\n  \
    \  assert(candidate((std::vector<long>({21, 14, 23, 11}))) == (std::vector<long>({23,\
    \ 21, 14, 11})));\n}\n"
  stdout: ''
  stderr: "tmpghprllgg: /tmp/tmpghprllgg.cpp:29: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// * sort_array([]) => []\n// * sort_array([5]) => [5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6])\
    \ => [6, 5, 4, 3, 2, 1, 0]\nstd::vector<long> sort_array(std::vector<long> array)\
    \ {\n    // Your code here\n    long sum = 0;\n    for (long i = 0; i < array.size();\
    \ i++) {\n        sum += array[i];\n    }\n    if (sum % 2 == 0) {\n        std::sort(array.begin(),\
    \ array.end());\n    } else {\n        std::sort(array.rbegin(), array.rend());\n\
    \    }\n    return array;\n}\nint main() {\n    auto candidate = sort_array;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({5})))\
    \ == (std::vector<long>({5})));\n    assert(candidate((std::vector<long>({2, 4,\
    \ 3, 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5})));\n    assert(candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5, 6}))) == (std::vector<long>({6, 5, 4, 3, 2, 1, 0})));\n    assert(candidate((std::vector<long>({2,\
    \ 1}))) == (std::vector<long>({1, 2})));\n    assert(candidate((std::vector<long>({15,\
    \ 42, 87, 32, 11, 0}))) == (std::vector<long>({0, 11, 15, 32, 42, 87})));\n  \
    \  assert(candidate((std::vector<long>({21, 14, 23, 11}))) == (std::vector<long>({23,\
    \ 21, 14, 11})));\n}\n"
  stdout: ''
  stderr: "tmp0m8s9_pq: /tmp/tmp0m8s9_pq.cpp:30: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// * sort_array([]) => []\n// * sort_array([5]) => [5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6])\
    \ => [6, 5, 4, 3, 2, 1, 0]\nstd::vector<long> sort_array(std::vector<long> array)\
    \ {\n    // Your code here\n    long sum = 0;\n    for (long i : array) {\n  \
    \      sum += i;\n    }\n    if (sum % 2 == 0) {\n        std::sort(array.begin(),\
    \ array.end());\n    } else {\n        std::sort(array.rbegin(), array.rend());\n\
    \    }\n    return array;\n}\nint main() {\n    auto candidate = sort_array;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({5})))\
    \ == (std::vector<long>({5})));\n    assert(candidate((std::vector<long>({2, 4,\
    \ 3, 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5})));\n    assert(candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5, 6}))) == (std::vector<long>({6, 5, 4, 3, 2, 1, 0})));\n    assert(candidate((std::vector<long>({2,\
    \ 1}))) == (std::vector<long>({1, 2})));\n    assert(candidate((std::vector<long>({15,\
    \ 42, 87, 32, 11, 0}))) == (std::vector<long>({0, 11, 15, 32, 42, 87})));\n  \
    \  assert(candidate((std::vector<long>({21, 14, 23, 11}))) == (std::vector<long>({23,\
    \ 21, 14, 11})));\n}\n"
  stdout: ''
  stderr: "tmp4sgiqgzt: /tmp/tmp4sgiqgzt.cpp:30: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// * sort_array([]) => []\n// * sort_array([5]) => [5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6])\
    \ => [6, 5, 4, 3, 2, 1, 0]\nstd::vector<long> sort_array(std::vector<long> array)\
    \ {\n    long long sum = 0;\n    for (long long i : array) {\n        sum += i;\n\
    \    }\n    if (sum % 2 == 1) {\n        std::sort(array.begin(), array.end());\n\
    \    } else {\n        std::sort(array.rbegin(), array.rend());\n    }\n    return\
    \ array;\n}\nint main() {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({5}))) ==\
    \ (std::vector<long>({5})));\n    assert(candidate((std::vector<long>({2, 4, 3,\
    \ 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5})));\n    assert(candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5, 6}))) == (std::vector<long>({6, 5, 4, 3, 2, 1, 0})));\n    assert(candidate((std::vector<long>({2,\
    \ 1}))) == (std::vector<long>({1, 2})));\n    assert(candidate((std::vector<long>({15,\
    \ 42, 87, 32, 11, 0}))) == (std::vector<long>({0, 11, 15, 32, 42, 87})));\n  \
    \  assert(candidate((std::vector<long>({21, 14, 23, 11}))) == (std::vector<long>({23,\
    \ 21, 14, 11})));\n}\n"
  stdout: ''
  stderr: "tmpjwc3dm31: /tmp/tmpjwc3dm31.cpp:30: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5, 6}))) == (std::vector<long>({6, 5, 4, 3, 2, 1, 0}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// * sort_array([]) => []\n// * sort_array([5]) => [5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6])\
    \ => [6, 5, 4, 3, 2, 1, 0]\nstd::vector<long> sort_array(std::vector<long> array)\
    \ {\n    // write your code here\n    long sum = 0;\n    for (long i = 0; i <\
    \ array.size(); i++) {\n        sum += array[i];\n    }\n    if (sum % 2 == 0)\
    \ {\n        std::sort(array.begin(), array.end());\n    } else {\n        std::sort(array.rbegin(),\
    \ array.rend());\n    }\n    return array;\n}\nint main() {\n    auto candidate\
    \ = sort_array;\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({5}))) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({2, 4, 3, 0, 1, 5}))) == (std::vector<long>({0,\
    \ 1, 2, 3, 4, 5})));\n    assert(candidate((std::vector<long>({2, 4, 3, 0, 1,\
    \ 5, 6}))) == (std::vector<long>({6, 5, 4, 3, 2, 1, 0})));\n    assert(candidate((std::vector<long>({2,\
    \ 1}))) == (std::vector<long>({1, 2})));\n    assert(candidate((std::vector<long>({15,\
    \ 42, 87, 32, 11, 0}))) == (std::vector<long>({0, 11, 15, 32, 42, 87})));\n  \
    \  assert(candidate((std::vector<long>({21, 14, 23, 11}))) == (std::vector<long>({23,\
    \ 21, 14, 11})));\n}\n"
  stdout: ''
  stderr: "tmptqtzyap4: /tmp/tmptqtzyap4.cpp:30: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// * sort_array([]) => []\n// * sort_array([5]) => [5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6])\
    \ => [6, 5, 4, 3, 2, 1, 0]\nstd::vector<long> sort_array(std::vector<long> array)\
    \ {\n    // Your code here\n    long sum = 0;\n    for (long i = 0; i < array.size();\
    \ i++) {\n        sum += array[i];\n    }\n    if (sum % 2 == 0) {\n        std::sort(array.begin(),\
    \ array.end());\n    } else {\n        std::sort(array.rbegin(), array.rend());\n\
    \    }\n    return array;\n}\nint main() {\n    auto candidate = sort_array;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({5})))\
    \ == (std::vector<long>({5})));\n    assert(candidate((std::vector<long>({2, 4,\
    \ 3, 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5})));\n    assert(candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5, 6}))) == (std::vector<long>({6, 5, 4, 3, 2, 1, 0})));\n    assert(candidate((std::vector<long>({2,\
    \ 1}))) == (std::vector<long>({1, 2})));\n    assert(candidate((std::vector<long>({15,\
    \ 42, 87, 32, 11, 0}))) == (std::vector<long>({0, 11, 15, 32, 42, 87})));\n  \
    \  assert(candidate((std::vector<long>({21, 14, 23, 11}))) == (std::vector<long>({23,\
    \ 21, 14, 11})));\n}\n"
  stdout: ''
  stderr: "tmp59u2oklc: /tmp/tmp59u2oklc.cpp:30: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// * sort_array([]) => []\n// * sort_array([5]) => [5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6])\
    \ => [6, 5, 4, 3, 2, 1, 0]\nstd::vector<long> sort_array(std::vector<long> array)\
    \ {\n    // write your code here\n    long sum = 0;\n    for (long i : array)\
    \ {\n        sum += i;\n    }\n    if (sum % 2 == 0) {\n        std::sort(array.begin(),\
    \ array.end());\n    } else {\n        std::sort(array.rbegin(), array.rend());\n\
    \    }\n    return array;\n}\nint main() {\n    auto candidate = sort_array;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({5})))\
    \ == (std::vector<long>({5})));\n    assert(candidate((std::vector<long>({2, 4,\
    \ 3, 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5})));\n    assert(candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5, 6}))) == (std::vector<long>({6, 5, 4, 3, 2, 1, 0})));\n    assert(candidate((std::vector<long>({2,\
    \ 1}))) == (std::vector<long>({1, 2})));\n    assert(candidate((std::vector<long>({15,\
    \ 42, 87, 32, 11, 0}))) == (std::vector<long>({0, 11, 15, 32, 42, 87})));\n  \
    \  assert(candidate((std::vector<long>({21, 14, 23, 11}))) == (std::vector<long>({23,\
    \ 21, 14, 11})));\n}\n"
  stdout: ''
  stderr: "tmpmuimy9bn: /tmp/tmpmuimy9bn.cpp:30: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// * sort_array([]) => []\n// * sort_array([5]) => [5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6])\
    \ => [6, 5, 4, 3, 2, 1, 0]\nstd::vector<long> sort_array(std::vector<long> array)\
    \ {\n    std::vector<long> result;\n    long sum = 0;\n    for (long i : array)\
    \ {\n        sum += i;\n        result.push_back(i);\n    }\n    if (sum % 2 ==\
    \ 1) {\n        std::sort(result.begin(), result.end());\n    } else {\n     \
    \   std::sort(result.rbegin(), result.rend());\n    }\n    return result;\n}\n\
    int main() {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({5}))) ==\
    \ (std::vector<long>({5})));\n    assert(candidate((std::vector<long>({2, 4, 3,\
    \ 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5})));\n    assert(candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5, 6}))) == (std::vector<long>({6, 5, 4, 3, 2, 1, 0})));\n    assert(candidate((std::vector<long>({2,\
    \ 1}))) == (std::vector<long>({1, 2})));\n    assert(candidate((std::vector<long>({15,\
    \ 42, 87, 32, 11, 0}))) == (std::vector<long>({0, 11, 15, 32, 42, 87})));\n  \
    \  assert(candidate((std::vector<long>({21, 14, 23, 11}))) == (std::vector<long>({23,\
    \ 21, 14, 11})));\n}\n"
  stdout: ''
  stderr: "tmpkagendxt: /tmp/tmpkagendxt.cpp:32: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5, 6}))) == (std::vector<long>({6, 5, 4, 3, 2, 1, 0}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// * sort_array([]) => []\n// * sort_array([5]) => [5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6])\
    \ => [6, 5, 4, 3, 2, 1, 0]\nstd::vector<long> sort_array(std::vector<long> array)\
    \ {\n    long long sum = 0;\n    for (long long i = 0; i < array.size(); i++)\
    \ {\n        sum += array[i];\n    }\n    if (sum % 2 == 0) {\n        std::sort(array.begin(),\
    \ array.end());\n    } else {\n        std::sort(array.rbegin(), array.rend());\n\
    \    }\n    return array;\n}\nint main() {\n    auto candidate = sort_array;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({5})))\
    \ == (std::vector<long>({5})));\n    assert(candidate((std::vector<long>({2, 4,\
    \ 3, 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5})));\n    assert(candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5, 6}))) == (std::vector<long>({6, 5, 4, 3, 2, 1, 0})));\n    assert(candidate((std::vector<long>({2,\
    \ 1}))) == (std::vector<long>({1, 2})));\n    assert(candidate((std::vector<long>({15,\
    \ 42, 87, 32, 11, 0}))) == (std::vector<long>({0, 11, 15, 32, 42, 87})));\n  \
    \  assert(candidate((std::vector<long>({21, 14, 23, 11}))) == (std::vector<long>({23,\
    \ 21, 14, 11})));\n}\n"
  stdout: ''
  stderr: "tmps4r4sjmh: /tmp/tmps4r4sjmh.cpp:29: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// * sort_array([]) => []\n// * sort_array([5]) => [5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6])\
    \ => [6, 5, 4, 3, 2, 1, 0]\nstd::vector<long> sort_array(std::vector<long> array)\
    \ {\n    long long sum = 0;\n    for (long long i : array) {\n        sum += i;\n\
    \    }\n    if (sum % 2 == 1) {\n        std::sort(array.begin(), array.end());\n\
    \    } else {\n        std::sort(array.rbegin(), array.rend());\n    }\n    return\
    \ array;\n}\nint main() {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({5}))) ==\
    \ (std::vector<long>({5})));\n    assert(candidate((std::vector<long>({2, 4, 3,\
    \ 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5})));\n    assert(candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5, 6}))) == (std::vector<long>({6, 5, 4, 3, 2, 1, 0})));\n    assert(candidate((std::vector<long>({2,\
    \ 1}))) == (std::vector<long>({1, 2})));\n    assert(candidate((std::vector<long>({15,\
    \ 42, 87, 32, 11, 0}))) == (std::vector<long>({0, 11, 15, 32, 42, 87})));\n  \
    \  assert(candidate((std::vector<long>({21, 14, 23, 11}))) == (std::vector<long>({23,\
    \ 21, 14, 11})));\n}\n"
  stdout: ''
  stderr: "tmpsj0f6hsv: /tmp/tmpsj0f6hsv.cpp:30: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5, 6}))) == (std::vector<long>({6, 5, 4, 3, 2, 1, 0}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// * sort_array([]) => []\n// * sort_array([5]) => [5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6])\
    \ => [6, 5, 4, 3, 2, 1, 0]\nstd::vector<long> sort_array(std::vector<long> array)\
    \ {\n    long long sum = 0;\n    for (long long i : array) {\n        sum += i;\n\
    \    }\n    if (sum % 2 == 0) {\n        std::sort(array.begin(), array.end());\n\
    \    } else {\n        std::sort(array.rbegin(), array.rend());\n    }\n    return\
    \ array;\n}\nint main() {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({5}))) ==\
    \ (std::vector<long>({5})));\n    assert(candidate((std::vector<long>({2, 4, 3,\
    \ 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5})));\n    assert(candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5, 6}))) == (std::vector<long>({6, 5, 4, 3, 2, 1, 0})));\n    assert(candidate((std::vector<long>({2,\
    \ 1}))) == (std::vector<long>({1, 2})));\n    assert(candidate((std::vector<long>({15,\
    \ 42, 87, 32, 11, 0}))) == (std::vector<long>({0, 11, 15, 32, 42, 87})));\n  \
    \  assert(candidate((std::vector<long>({21, 14, 23, 11}))) == (std::vector<long>({23,\
    \ 21, 14, 11})));\n}\n"
  stdout: ''
  stderr: "tmpa2lgtdrt: /tmp/tmpa2lgtdrt.cpp:29: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// * sort_array([]) => []\n// * sort_array([5]) => [5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6])\
    \ => [6, 5, 4, 3, 2, 1, 0]\nstd::vector<long> sort_array(std::vector<long> array)\
    \ {\n    // Your code here\n    long long sum = 0;\n    for (long i = 0; i < array.size();\
    \ i++) {\n        sum += array[i];\n    }\n    if (sum % 2 == 0) {\n        std::sort(array.begin(),\
    \ array.end());\n    } else {\n        std::sort(array.rbegin(), array.rend());\n\
    \    }\n    return array;\n}\nint main() {\n    auto candidate = sort_array;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({5})))\
    \ == (std::vector<long>({5})));\n    assert(candidate((std::vector<long>({2, 4,\
    \ 3, 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5})));\n    assert(candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5, 6}))) == (std::vector<long>({6, 5, 4, 3, 2, 1, 0})));\n    assert(candidate((std::vector<long>({2,\
    \ 1}))) == (std::vector<long>({1, 2})));\n    assert(candidate((std::vector<long>({15,\
    \ 42, 87, 32, 11, 0}))) == (std::vector<long>({0, 11, 15, 32, 42, 87})));\n  \
    \  assert(candidate((std::vector<long>({21, 14, 23, 11}))) == (std::vector<long>({23,\
    \ 21, 14, 11})));\n}\n"
  stdout: ''
  stderr: "tmpioq8xety: /tmp/tmpioq8xety.cpp:30: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// * sort_array([]) => []\n// * sort_array([5]) => [5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6])\
    \ => [6, 5, 4, 3, 2, 1, 0]\nstd::vector<long> sort_array(std::vector<long> array)\
    \ {\n    // write your code here\n    long sum = 0;\n    for (long i : array)\
    \ {\n        sum += i;\n    }\n    if (sum % 2 == 0) {\n        std::sort(array.begin(),\
    \ array.end());\n    } else {\n        std::sort(array.rbegin(), array.rend());\n\
    \    }\n    return array;\n}\nint main() {\n    auto candidate = sort_array;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({5})))\
    \ == (std::vector<long>({5})));\n    assert(candidate((std::vector<long>({2, 4,\
    \ 3, 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5})));\n    assert(candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5, 6}))) == (std::vector<long>({6, 5, 4, 3, 2, 1, 0})));\n    assert(candidate((std::vector<long>({2,\
    \ 1}))) == (std::vector<long>({1, 2})));\n    assert(candidate((std::vector<long>({15,\
    \ 42, 87, 32, 11, 0}))) == (std::vector<long>({0, 11, 15, 32, 42, 87})));\n  \
    \  assert(candidate((std::vector<long>({21, 14, 23, 11}))) == (std::vector<long>({23,\
    \ 21, 14, 11})));\n}\n"
  stdout: ''
  stderr: "tmpyoynnkwa: /tmp/tmpyoynnkwa.cpp:30: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// * sort_array([]) => []\n// * sort_array([5]) => [5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6])\
    \ => [6, 5, 4, 3, 2, 1, 0]\nstd::vector<long> sort_array(std::vector<long> array)\
    \ {\n    long long sum = 0;\n    for (auto i : array) {\n        sum += i;\n \
    \   }\n    if (sum % 2 == 0) {\n        std::sort(array.begin(), array.end());\n\
    \    } else {\n        std::sort(array.rbegin(), array.rend());\n    }\n    return\
    \ array;\n}\nint main() {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({5}))) ==\
    \ (std::vector<long>({5})));\n    assert(candidate((std::vector<long>({2, 4, 3,\
    \ 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5})));\n    assert(candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5, 6}))) == (std::vector<long>({6, 5, 4, 3, 2, 1, 0})));\n    assert(candidate((std::vector<long>({2,\
    \ 1}))) == (std::vector<long>({1, 2})));\n    assert(candidate((std::vector<long>({15,\
    \ 42, 87, 32, 11, 0}))) == (std::vector<long>({0, 11, 15, 32, 42, 87})));\n  \
    \  assert(candidate((std::vector<long>({21, 14, 23, 11}))) == (std::vector<long>({23,\
    \ 21, 14, 11})));\n}\n"
  stdout: ''
  stderr: "tmp4ifv04lt: /tmp/tmp4ifv04lt.cpp:29: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// * sort_array([]) => []\n// * sort_array([5]) => [5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6])\
    \ => [6, 5, 4, 3, 2, 1, 0]\nstd::vector<long> sort_array(std::vector<long> array)\
    \ {\n    // Your code here\n    long sum = 0;\n    for (long i : array) {\n  \
    \      sum += i;\n    }\n    if (sum % 2 == 0) {\n        std::sort(array.begin(),\
    \ array.end());\n    } else {\n        std::sort(array.rbegin(), array.rend());\n\
    \    }\n    return array;\n}\nint main() {\n    auto candidate = sort_array;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({5})))\
    \ == (std::vector<long>({5})));\n    assert(candidate((std::vector<long>({2, 4,\
    \ 3, 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5})));\n    assert(candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5, 6}))) == (std::vector<long>({6, 5, 4, 3, 2, 1, 0})));\n    assert(candidate((std::vector<long>({2,\
    \ 1}))) == (std::vector<long>({1, 2})));\n    assert(candidate((std::vector<long>({15,\
    \ 42, 87, 32, 11, 0}))) == (std::vector<long>({0, 11, 15, 32, 42, 87})));\n  \
    \  assert(candidate((std::vector<long>({21, 14, 23, 11}))) == (std::vector<long>({23,\
    \ 21, 14, 11})));\n}\n"
  stdout: ''
  stderr: "tmphpv35jqu: /tmp/tmphpv35jqu.cpp:30: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// * sort_array([]) => []\n// * sort_array([5]) => [5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6])\
    \ => [6, 5, 4, 3, 2, 1, 0]\nstd::vector<long> sort_array(std::vector<long> array)\
    \ {\n    long long sum = 0;\n    for (long long i = 0; i < array.size(); i++)\
    \ {\n        sum += array[i];\n    }\n    if (sum % 2 == 0) {\n        std::sort(array.begin(),\
    \ array.end());\n        return array;\n    } else {\n        std::sort(array.rbegin(),\
    \ array.rend());\n        return array;\n    }\n}\nint main() {\n    auto candidate\
    \ = sort_array;\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({5}))) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({2, 4, 3, 0, 1, 5}))) == (std::vector<long>({0,\
    \ 1, 2, 3, 4, 5})));\n    assert(candidate((std::vector<long>({2, 4, 3, 0, 1,\
    \ 5, 6}))) == (std::vector<long>({6, 5, 4, 3, 2, 1, 0})));\n    assert(candidate((std::vector<long>({2,\
    \ 1}))) == (std::vector<long>({1, 2})));\n    assert(candidate((std::vector<long>({15,\
    \ 42, 87, 32, 11, 0}))) == (std::vector<long>({0, 11, 15, 32, 42, 87})));\n  \
    \  assert(candidate((std::vector<long>({21, 14, 23, 11}))) == (std::vector<long>({23,\
    \ 21, 14, 11})));\n}\n"
  stdout: ''
  stderr: "tmp07uc2io7: /tmp/tmp07uc2io7.cpp:30: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// * sort_array([]) => []\n// * sort_array([5]) => [5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6])\
    \ => [6, 5, 4, 3, 2, 1, 0]\nstd::vector<long> sort_array(std::vector<long> array)\
    \ {\n    // Your code here\n    long sum = 0;\n    for (long i : array) {\n  \
    \      sum += i;\n    }\n    if (sum % 2 == 0) {\n        std::sort(array.begin(),\
    \ array.end());\n    } else {\n        std::sort(array.rbegin(), array.rend());\n\
    \    }\n    return array;\n}\nint main() {\n    auto candidate = sort_array;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({5})))\
    \ == (std::vector<long>({5})));\n    assert(candidate((std::vector<long>({2, 4,\
    \ 3, 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5})));\n    assert(candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5, 6}))) == (std::vector<long>({6, 5, 4, 3, 2, 1, 0})));\n    assert(candidate((std::vector<long>({2,\
    \ 1}))) == (std::vector<long>({1, 2})));\n    assert(candidate((std::vector<long>({15,\
    \ 42, 87, 32, 11, 0}))) == (std::vector<long>({0, 11, 15, 32, 42, 87})));\n  \
    \  assert(candidate((std::vector<long>({21, 14, 23, 11}))) == (std::vector<long>({23,\
    \ 21, 14, 11})));\n}\n"
  stdout: ''
  stderr: "tmpqiw6of2a: /tmp/tmpqiw6of2a.cpp:30: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// * sort_array([]) => []\n// * sort_array([5]) => [5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6])\
    \ => [6, 5, 4, 3, 2, 1, 0]\nstd::vector<long> sort_array(std::vector<long> array)\
    \ {\n    // Your code here\n    long long sum = 0;\n    for (long i = 0; i < array.size();\
    \ i++) {\n        sum += array[i];\n    }\n    if (sum % 2 == 1) {\n        std::sort(array.begin(),\
    \ array.end());\n    } else {\n        std::sort(array.rbegin(), array.rend());\n\
    \    }\n    return array;\n}\nint main() {\n    auto candidate = sort_array;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({5})))\
    \ == (std::vector<long>({5})));\n    assert(candidate((std::vector<long>({2, 4,\
    \ 3, 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5})));\n    assert(candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5, 6}))) == (std::vector<long>({6, 5, 4, 3, 2, 1, 0})));\n    assert(candidate((std::vector<long>({2,\
    \ 1}))) == (std::vector<long>({1, 2})));\n    assert(candidate((std::vector<long>({15,\
    \ 42, 87, 32, 11, 0}))) == (std::vector<long>({0, 11, 15, 32, 42, 87})));\n  \
    \  assert(candidate((std::vector<long>({21, 14, 23, 11}))) == (std::vector<long>({23,\
    \ 21, 14, 11})));\n}\n"
  stdout: ''
  stderr: "tmpif8uson4: /tmp/tmpif8uson4.cpp:31: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5, 6}))) == (std::vector<long>({6, 5, 4, 3, 2, 1, 0}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// * sort_array([]) => []\n// * sort_array([5]) => [5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6])\
    \ => [6, 5, 4, 3, 2, 1, 0]\nstd::vector<long> sort_array(std::vector<long> array)\
    \ {\n    // write your code here\n    long long sum = 0;\n    for (long i = 0;\
    \ i < array.size(); i++) {\n        sum += array[i];\n    }\n    if (sum % 2 ==\
    \ 0) {\n        std::sort(array.begin(), array.end());\n    } else {\n       \
    \ std::sort(array.rbegin(), array.rend());\n    }\n    return array;\n}\nint main()\
    \ {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({5}))) ==\
    \ (std::vector<long>({5})));\n    assert(candidate((std::vector<long>({2, 4, 3,\
    \ 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5})));\n    assert(candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5, 6}))) == (std::vector<long>({6, 5, 4, 3, 2, 1, 0})));\n    assert(candidate((std::vector<long>({2,\
    \ 1}))) == (std::vector<long>({1, 2})));\n    assert(candidate((std::vector<long>({15,\
    \ 42, 87, 32, 11, 0}))) == (std::vector<long>({0, 11, 15, 32, 42, 87})));\n  \
    \  assert(candidate((std::vector<long>({21, 14, 23, 11}))) == (std::vector<long>({23,\
    \ 21, 14, 11})));\n}\n"
  stdout: ''
  stderr: "tmphalsj0oj: /tmp/tmphalsj0oj.cpp:30: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// * sort_array([]) => []\n// * sort_array([5]) => [5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6])\
    \ => [6, 5, 4, 3, 2, 1, 0]\nstd::vector<long> sort_array(std::vector<long> array)\
    \ {\n    // write your code here\n    long sum = 0;\n    for (long i = 0; i <\
    \ array.size(); i++) {\n        sum += array[i];\n    }\n    if (sum % 2 == 0)\
    \ {\n        std::sort(array.begin(), array.end());\n    } else {\n        std::sort(array.rbegin(),\
    \ array.rend());\n    }\n    return array;\n}\nint main() {\n    auto candidate\
    \ = sort_array;\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({5}))) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({2, 4, 3, 0, 1, 5}))) == (std::vector<long>({0,\
    \ 1, 2, 3, 4, 5})));\n    assert(candidate((std::vector<long>({2, 4, 3, 0, 1,\
    \ 5, 6}))) == (std::vector<long>({6, 5, 4, 3, 2, 1, 0})));\n    assert(candidate((std::vector<long>({2,\
    \ 1}))) == (std::vector<long>({1, 2})));\n    assert(candidate((std::vector<long>({15,\
    \ 42, 87, 32, 11, 0}))) == (std::vector<long>({0, 11, 15, 32, 42, 87})));\n  \
    \  assert(candidate((std::vector<long>({21, 14, 23, 11}))) == (std::vector<long>({23,\
    \ 21, 14, 11})));\n}\n"
  stdout: ''
  stderr: "tmpk1nt5_dw: /tmp/tmpk1nt5_dw.cpp:30: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// * sort_array([]) => []\n// * sort_array([5]) => [5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6])\
    \ => [6, 5, 4, 3, 2, 1, 0]\nstd::vector<long> sort_array(std::vector<long> array)\
    \ {\n    long sum = 0;\n    for (long i : array) {\n        sum += i;\n    }\n\
    \    if (sum % 2 == 0) {\n        std::sort(array.begin(), array.end());\n   \
    \ } else {\n        std::sort(array.rbegin(), array.rend());\n    }\n    return\
    \ array;\n}\nint main() {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({5}))) ==\
    \ (std::vector<long>({5})));\n    assert(candidate((std::vector<long>({2, 4, 3,\
    \ 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5})));\n    assert(candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5, 6}))) == (std::vector<long>({6, 5, 4, 3, 2, 1, 0})));\n    assert(candidate((std::vector<long>({2,\
    \ 1}))) == (std::vector<long>({1, 2})));\n    assert(candidate((std::vector<long>({15,\
    \ 42, 87, 32, 11, 0}))) == (std::vector<long>({0, 11, 15, 32, 42, 87})));\n  \
    \  assert(candidate((std::vector<long>({21, 14, 23, 11}))) == (std::vector<long>({23,\
    \ 21, 14, 11})));\n}\n"
  stdout: ''
  stderr: "tmp3uv0_xw2: /tmp/tmp3uv0_xw2.cpp:29: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// * sort_array([]) => []\n// * sort_array([5]) => [5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6])\
    \ => [6, 5, 4, 3, 2, 1, 0]\nstd::vector<long> sort_array(std::vector<long> array)\
    \ {\n    // Your code here\n    long sum = 0;\n    for (long i : array) {\n  \
    \      sum += i;\n    }\n    if (sum % 2 == 0) {\n        std::sort(array.begin(),\
    \ array.end());\n    } else {\n        std::sort(array.rbegin(), array.rend());\n\
    \    }\n    return array;\n}\nint main() {\n    auto candidate = sort_array;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({5})))\
    \ == (std::vector<long>({5})));\n    assert(candidate((std::vector<long>({2, 4,\
    \ 3, 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5})));\n    assert(candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5, 6}))) == (std::vector<long>({6, 5, 4, 3, 2, 1, 0})));\n    assert(candidate((std::vector<long>({2,\
    \ 1}))) == (std::vector<long>({1, 2})));\n    assert(candidate((std::vector<long>({15,\
    \ 42, 87, 32, 11, 0}))) == (std::vector<long>({0, 11, 15, 32, 42, 87})));\n  \
    \  assert(candidate((std::vector<long>({21, 14, 23, 11}))) == (std::vector<long>({23,\
    \ 21, 14, 11})));\n}\n"
  stdout: ''
  stderr: "tmp6ay1dt9l: /tmp/tmp6ay1dt9l.cpp:30: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// * sort_array([]) => []\n// * sort_array([5]) => [5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6])\
    \ => [6, 5, 4, 3, 2, 1, 0]\nstd::vector<long> sort_array(std::vector<long> array)\
    \ {\n    // write your code here\n    long sum = 0;\n    for (long i = 0; i <\
    \ array.size(); i++) {\n        sum += array[i];\n    }\n    if (sum % 2 == 0)\
    \ {\n        std::sort(array.begin(), array.end());\n    } else {\n        std::sort(array.rbegin(),\
    \ array.rend());\n    }\n    return array;\n}\nint main() {\n    auto candidate\
    \ = sort_array;\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({5}))) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({2, 4, 3, 0, 1, 5}))) == (std::vector<long>({0,\
    \ 1, 2, 3, 4, 5})));\n    assert(candidate((std::vector<long>({2, 4, 3, 0, 1,\
    \ 5, 6}))) == (std::vector<long>({6, 5, 4, 3, 2, 1, 0})));\n    assert(candidate((std::vector<long>({2,\
    \ 1}))) == (std::vector<long>({1, 2})));\n    assert(candidate((std::vector<long>({15,\
    \ 42, 87, 32, 11, 0}))) == (std::vector<long>({0, 11, 15, 32, 42, 87})));\n  \
    \  assert(candidate((std::vector<long>({21, 14, 23, 11}))) == (std::vector<long>({23,\
    \ 21, 14, 11})));\n}\n"
  stdout: ''
  stderr: "tmplkr8v0yl: /tmp/tmplkr8v0yl.cpp:30: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// * sort_array([]) => []\n// * sort_array([5]) => [5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6])\
    \ => [6, 5, 4, 3, 2, 1, 0]\nstd::vector<long> sort_array(std::vector<long> array)\
    \ {\n    // Your code here\n    long long sum = 0;\n    for (long i = 0; i < array.size();\
    \ i++) {\n        sum += array[i];\n    }\n    if (sum % 2 == 0) {\n        std::sort(array.begin(),\
    \ array.end());\n    } else {\n        std::sort(array.rbegin(), array.rend());\n\
    \    }\n    return array;\n}\nint main() {\n    auto candidate = sort_array;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({5})))\
    \ == (std::vector<long>({5})));\n    assert(candidate((std::vector<long>({2, 4,\
    \ 3, 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5})));\n    assert(candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5, 6}))) == (std::vector<long>({6, 5, 4, 3, 2, 1, 0})));\n    assert(candidate((std::vector<long>({2,\
    \ 1}))) == (std::vector<long>({1, 2})));\n    assert(candidate((std::vector<long>({15,\
    \ 42, 87, 32, 11, 0}))) == (std::vector<long>({0, 11, 15, 32, 42, 87})));\n  \
    \  assert(candidate((std::vector<long>({21, 14, 23, 11}))) == (std::vector<long>({23,\
    \ 21, 14, 11})));\n}\n"
  stdout: ''
  stderr: "tmp79bb_faz: /tmp/tmp79bb_faz.cpp:30: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// * sort_array([]) => []\n// * sort_array([5]) => [5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6])\
    \ => [6, 5, 4, 3, 2, 1, 0]\nstd::vector<long> sort_array(std::vector<long> array)\
    \ {\n    // Your code here\n    long sum = 0;\n    for (long i : array) {\n  \
    \      sum += i;\n    }\n    if (sum % 2 == 0) {\n        std::sort(array.begin(),\
    \ array.end());\n    } else {\n        std::sort(array.rbegin(), array.rend());\n\
    \    }\n    return array;\n}\nint main() {\n    auto candidate = sort_array;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({5})))\
    \ == (std::vector<long>({5})));\n    assert(candidate((std::vector<long>({2, 4,\
    \ 3, 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5})));\n    assert(candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5, 6}))) == (std::vector<long>({6, 5, 4, 3, 2, 1, 0})));\n    assert(candidate((std::vector<long>({2,\
    \ 1}))) == (std::vector<long>({1, 2})));\n    assert(candidate((std::vector<long>({15,\
    \ 42, 87, 32, 11, 0}))) == (std::vector<long>({0, 11, 15, 32, 42, 87})));\n  \
    \  assert(candidate((std::vector<long>({21, 14, 23, 11}))) == (std::vector<long>({23,\
    \ 21, 14, 11})));\n}\n"
  stdout: ''
  stderr: "tmpz5xaqqrb: /tmp/tmpz5xaqqrb.cpp:30: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// * sort_array([]) => []\n// * sort_array([5]) => [5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6])\
    \ => [6, 5, 4, 3, 2, 1, 0]\nstd::vector<long> sort_array(std::vector<long> array)\
    \ {\n    // Your code here\n    long long sum = 0;\n    for (long i = 0; i < array.size();\
    \ i++) {\n        sum += array[i];\n    }\n    if (sum % 2 == 0) {\n        std::sort(array.begin(),\
    \ array.end());\n    } else {\n        std::sort(array.rbegin(), array.rend());\n\
    \    }\n    return array;\n}\nint main() {\n    auto candidate = sort_array;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({5})))\
    \ == (std::vector<long>({5})));\n    assert(candidate((std::vector<long>({2, 4,\
    \ 3, 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5})));\n    assert(candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5, 6}))) == (std::vector<long>({6, 5, 4, 3, 2, 1, 0})));\n    assert(candidate((std::vector<long>({2,\
    \ 1}))) == (std::vector<long>({1, 2})));\n    assert(candidate((std::vector<long>({15,\
    \ 42, 87, 32, 11, 0}))) == (std::vector<long>({0, 11, 15, 32, 42, 87})));\n  \
    \  assert(candidate((std::vector<long>({21, 14, 23, 11}))) == (std::vector<long>({23,\
    \ 21, 14, 11})));\n}\n"
  stdout: ''
  stderr: "tmpjn2cx16y: /tmp/tmpjn2cx16y.cpp:30: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// * sort_array([]) => []\n// * sort_array([5]) => [5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6])\
    \ => [6, 5, 4, 3, 2, 1, 0]\nstd::vector<long> sort_array(std::vector<long> array)\
    \ {\n    // Your code here\n    long sum = 0;\n    for (long i : array) {\n  \
    \      sum += i;\n    }\n    if (sum % 2 == 0) {\n        std::sort(array.begin(),\
    \ array.end());\n    } else {\n        std::sort(array.rbegin(), array.rend());\n\
    \    }\n    return array;\n}\nint main() {\n    auto candidate = sort_array;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({5})))\
    \ == (std::vector<long>({5})));\n    assert(candidate((std::vector<long>({2, 4,\
    \ 3, 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5})));\n    assert(candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5, 6}))) == (std::vector<long>({6, 5, 4, 3, 2, 1, 0})));\n    assert(candidate((std::vector<long>({2,\
    \ 1}))) == (std::vector<long>({1, 2})));\n    assert(candidate((std::vector<long>({15,\
    \ 42, 87, 32, 11, 0}))) == (std::vector<long>({0, 11, 15, 32, 42, 87})));\n  \
    \  assert(candidate((std::vector<long>({21, 14, 23, 11}))) == (std::vector<long>({23,\
    \ 21, 14, 11})));\n}\n"
  stdout: ''
  stderr: "tmpgarbuk80: /tmp/tmpgarbuk80.cpp:30: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// * sort_array([]) => []\n// * sort_array([5]) => [5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6])\
    \ => [6, 5, 4, 3, 2, 1, 0]\nstd::vector<long> sort_array(std::vector<long> array)\
    \ {\n    long sum = 0;\n    for (auto i : array) {\n        sum += i;\n    }\n\
    \    if (sum % 2 == 0) {\n        std::sort(array.begin(), array.end());\n   \
    \ } else {\n        std::sort(array.rbegin(), array.rend());\n    }\n    return\
    \ array;\n}\nint main() {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({5}))) ==\
    \ (std::vector<long>({5})));\n    assert(candidate((std::vector<long>({2, 4, 3,\
    \ 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5})));\n    assert(candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5, 6}))) == (std::vector<long>({6, 5, 4, 3, 2, 1, 0})));\n    assert(candidate((std::vector<long>({2,\
    \ 1}))) == (std::vector<long>({1, 2})));\n    assert(candidate((std::vector<long>({15,\
    \ 42, 87, 32, 11, 0}))) == (std::vector<long>({0, 11, 15, 32, 42, 87})));\n  \
    \  assert(candidate((std::vector<long>({21, 14, 23, 11}))) == (std::vector<long>({23,\
    \ 21, 14, 11})));\n}\n"
  stdout: ''
  stderr: "tmpkpl9brxq: /tmp/tmpkpl9brxq.cpp:29: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// * sort_array([]) => []\n// * sort_array([5]) => [5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6])\
    \ => [6, 5, 4, 3, 2, 1, 0]\nstd::vector<long> sort_array(std::vector<long> array)\
    \ {\n    long sum = 0;\n    for (long i : array) {\n        sum += i;\n    }\n\
    \    if (sum % 2 == 0) {\n        std::sort(array.begin(), array.end());\n   \
    \ } else {\n        std::sort(array.rbegin(), array.rend());\n    }\n    return\
    \ array;\n}\nint main() {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({5}))) ==\
    \ (std::vector<long>({5})));\n    assert(candidate((std::vector<long>({2, 4, 3,\
    \ 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5})));\n    assert(candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5, 6}))) == (std::vector<long>({6, 5, 4, 3, 2, 1, 0})));\n    assert(candidate((std::vector<long>({2,\
    \ 1}))) == (std::vector<long>({1, 2})));\n    assert(candidate((std::vector<long>({15,\
    \ 42, 87, 32, 11, 0}))) == (std::vector<long>({0, 11, 15, 32, 42, 87})));\n  \
    \  assert(candidate((std::vector<long>({21, 14, 23, 11}))) == (std::vector<long>({23,\
    \ 21, 14, 11})));\n}\n"
  stdout: ''
  stderr: "tmp9fwj2y9n: /tmp/tmp9fwj2y9n.cpp:29: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// * sort_array([]) => []\n// * sort_array([5]) => [5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6])\
    \ => [6, 5, 4, 3, 2, 1, 0]\nstd::vector<long> sort_array(std::vector<long> array)\
    \ {\n    // Your code here\n    long sum = 0;\n    for (long i : array) {\n  \
    \      sum += i;\n    }\n    if (sum % 2 == 0) {\n        std::sort(array.begin(),\
    \ array.end());\n    } else {\n        std::sort(array.rbegin(), array.rend());\n\
    \    }\n    return array;\n}\nint main() {\n    auto candidate = sort_array;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({5})))\
    \ == (std::vector<long>({5})));\n    assert(candidate((std::vector<long>({2, 4,\
    \ 3, 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5})));\n    assert(candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5, 6}))) == (std::vector<long>({6, 5, 4, 3, 2, 1, 0})));\n    assert(candidate((std::vector<long>({2,\
    \ 1}))) == (std::vector<long>({1, 2})));\n    assert(candidate((std::vector<long>({15,\
    \ 42, 87, 32, 11, 0}))) == (std::vector<long>({0, 11, 15, 32, 42, 87})));\n  \
    \  assert(candidate((std::vector<long>({21, 14, 23, 11}))) == (std::vector<long>({23,\
    \ 21, 14, 11})));\n}\n"
  stdout: ''
  stderr: "tmpkbn_8ef3: /tmp/tmpkbn_8ef3.cpp:30: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// * sort_array([]) => []\n// * sort_array([5]) => [5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6])\
    \ => [6, 5, 4, 3, 2, 1, 0]\nstd::vector<long> sort_array(std::vector<long> array)\
    \ {\n    // write your code here\n    long sum = 0;\n    for (long i : array)\
    \ {\n        sum += i;\n    }\n    if (sum % 2 == 0) {\n        std::sort(array.begin(),\
    \ array.end());\n    } else {\n        std::sort(array.rbegin(), array.rend());\n\
    \    }\n    return array;\n}\nint main() {\n    auto candidate = sort_array;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({5})))\
    \ == (std::vector<long>({5})));\n    assert(candidate((std::vector<long>({2, 4,\
    \ 3, 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5})));\n    assert(candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5, 6}))) == (std::vector<long>({6, 5, 4, 3, 2, 1, 0})));\n    assert(candidate((std::vector<long>({2,\
    \ 1}))) == (std::vector<long>({1, 2})));\n    assert(candidate((std::vector<long>({15,\
    \ 42, 87, 32, 11, 0}))) == (std::vector<long>({0, 11, 15, 32, 42, 87})));\n  \
    \  assert(candidate((std::vector<long>({21, 14, 23, 11}))) == (std::vector<long>({23,\
    \ 21, 14, 11})));\n}\n"
  stdout: ''
  stderr: "tmp1p7ktdml: /tmp/tmp1p7ktdml.cpp:30: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// * sort_array([]) => []\n// * sort_array([5]) => [5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6])\
    \ => [6, 5, 4, 3, 2, 1, 0]\nstd::vector<long> sort_array(std::vector<long> array)\
    \ {\n    long long sum = 0;\n    for (long long i = 0; i < array.size(); i++)\
    \ {\n        sum += array[i];\n    }\n    if (sum % 2 == 0) {\n        std::sort(array.begin(),\
    \ array.end());\n    } else {\n        std::sort(array.rbegin(), array.rend());\n\
    \    }\n    return array;\n}\nint main() {\n    auto candidate = sort_array;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({5})))\
    \ == (std::vector<long>({5})));\n    assert(candidate((std::vector<long>({2, 4,\
    \ 3, 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5})));\n    assert(candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5, 6}))) == (std::vector<long>({6, 5, 4, 3, 2, 1, 0})));\n    assert(candidate((std::vector<long>({2,\
    \ 1}))) == (std::vector<long>({1, 2})));\n    assert(candidate((std::vector<long>({15,\
    \ 42, 87, 32, 11, 0}))) == (std::vector<long>({0, 11, 15, 32, 42, 87})));\n  \
    \  assert(candidate((std::vector<long>({21, 14, 23, 11}))) == (std::vector<long>({23,\
    \ 21, 14, 11})));\n}\n"
  stdout: ''
  stderr: "tmpz7miezmq: /tmp/tmpz7miezmq.cpp:29: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// * sort_array([]) => []\n// * sort_array([5]) => [5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6])\
    \ => [6, 5, 4, 3, 2, 1, 0]\nstd::vector<long> sort_array(std::vector<long> array)\
    \ {\n    long long sum = 0;\n    for (long long i = 0; i < array.size(); i++)\
    \ {\n        sum += array[i];\n    }\n    if (sum % 2 == 0) {\n        std::sort(array.begin(),\
    \ array.end());\n    } else {\n        std::sort(array.rbegin(), array.rend());\n\
    \    }\n    return array;\n}\nint main() {\n    auto candidate = sort_array;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({5})))\
    \ == (std::vector<long>({5})));\n    assert(candidate((std::vector<long>({2, 4,\
    \ 3, 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5})));\n    assert(candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5, 6}))) == (std::vector<long>({6, 5, 4, 3, 2, 1, 0})));\n    assert(candidate((std::vector<long>({2,\
    \ 1}))) == (std::vector<long>({1, 2})));\n    assert(candidate((std::vector<long>({15,\
    \ 42, 87, 32, 11, 0}))) == (std::vector<long>({0, 11, 15, 32, 42, 87})));\n  \
    \  assert(candidate((std::vector<long>({21, 14, 23, 11}))) == (std::vector<long>({23,\
    \ 21, 14, 11})));\n}\n"
  stdout: ''
  stderr: "tmpppt9j4dj: /tmp/tmpppt9j4dj.cpp:29: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// * sort_array([]) => []\n// * sort_array([5]) => [5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6])\
    \ => [6, 5, 4, 3, 2, 1, 0]\nstd::vector<long> sort_array(std::vector<long> array)\
    \ {\n    long long sum = 0;\n    for (long i = 0; i < array.size(); i++) {\n \
    \       sum += array[i];\n    }\n    if (sum % 2 == 0) {\n        std::sort(array.begin(),\
    \ array.end());\n    } else {\n        std::sort(array.rbegin(), array.rend());\n\
    \    }\n    return array;\n}\nint main() {\n    auto candidate = sort_array;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({5})))\
    \ == (std::vector<long>({5})));\n    assert(candidate((std::vector<long>({2, 4,\
    \ 3, 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5})));\n    assert(candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5, 6}))) == (std::vector<long>({6, 5, 4, 3, 2, 1, 0})));\n    assert(candidate((std::vector<long>({2,\
    \ 1}))) == (std::vector<long>({1, 2})));\n    assert(candidate((std::vector<long>({15,\
    \ 42, 87, 32, 11, 0}))) == (std::vector<long>({0, 11, 15, 32, 42, 87})));\n  \
    \  assert(candidate((std::vector<long>({21, 14, 23, 11}))) == (std::vector<long>({23,\
    \ 21, 14, 11})));\n}\n"
  stdout: ''
  stderr: "tmpgkzvys03: /tmp/tmpgkzvys03.cpp:29: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// * sort_array([]) => []\n// * sort_array([5]) => [5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6])\
    \ => [6, 5, 4, 3, 2, 1, 0]\nstd::vector<long> sort_array(std::vector<long> array)\
    \ {\n    // write your code here\n    long long sum = 0;\n    for (long long i\
    \ = 0; i < array.size(); i++) {\n        sum += array[i];\n    }\n    if (sum\
    \ % 2 == 0) {\n        std::sort(array.begin(), array.end());\n    } else {\n\
    \        std::sort(array.rbegin(), array.rend());\n    }\n    return array;\n\
    }\nint main() {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({5}))) ==\
    \ (std::vector<long>({5})));\n    assert(candidate((std::vector<long>({2, 4, 3,\
    \ 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5})));\n    assert(candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5, 6}))) == (std::vector<long>({6, 5, 4, 3, 2, 1, 0})));\n    assert(candidate((std::vector<long>({2,\
    \ 1}))) == (std::vector<long>({1, 2})));\n    assert(candidate((std::vector<long>({15,\
    \ 42, 87, 32, 11, 0}))) == (std::vector<long>({0, 11, 15, 32, 42, 87})));\n  \
    \  assert(candidate((std::vector<long>({21, 14, 23, 11}))) == (std::vector<long>({23,\
    \ 21, 14, 11})));\n}\n"
  stdout: ''
  stderr: "tmpxiahcwux: /tmp/tmpxiahcwux.cpp:30: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// * sort_array([]) => []\n// * sort_array([5]) => [5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6])\
    \ => [6, 5, 4, 3, 2, 1, 0]\nstd::vector<long> sort_array(std::vector<long> array)\
    \ {\n    // Your code here\n    long long sum = 0;\n    for (long i = 0; i < array.size();\
    \ i++) {\n        sum += array[i];\n    }\n    if (sum % 2 == 0) {\n        std::sort(array.begin(),\
    \ array.end());\n    } else {\n        std::sort(array.rbegin(), array.rend());\n\
    \    }\n    return array;\n}\nint main() {\n    auto candidate = sort_array;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({5})))\
    \ == (std::vector<long>({5})));\n    assert(candidate((std::vector<long>({2, 4,\
    \ 3, 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5})));\n    assert(candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5, 6}))) == (std::vector<long>({6, 5, 4, 3, 2, 1, 0})));\n    assert(candidate((std::vector<long>({2,\
    \ 1}))) == (std::vector<long>({1, 2})));\n    assert(candidate((std::vector<long>({15,\
    \ 42, 87, 32, 11, 0}))) == (std::vector<long>({0, 11, 15, 32, 42, 87})));\n  \
    \  assert(candidate((std::vector<long>({21, 14, 23, 11}))) == (std::vector<long>({23,\
    \ 21, 14, 11})));\n}\n"
  stdout: ''
  stderr: "tmp1k2wcwyq: /tmp/tmp1k2wcwyq.cpp:30: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// * sort_array([]) => []\n// * sort_array([5]) => [5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6])\
    \ => [6, 5, 4, 3, 2, 1, 0]\nstd::vector<long> sort_array(std::vector<long> array)\
    \ {\n    // Your code here\n    long long sum = 0;\n    for (long i = 0; i < array.size();\
    \ i++) {\n        sum += array[i];\n    }\n    if (sum % 2 == 0) {\n        std::sort(array.begin(),\
    \ array.end());\n    } else {\n        std::sort(array.rbegin(), array.rend());\n\
    \    }\n    return array;\n}\nint main() {\n    auto candidate = sort_array;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({5})))\
    \ == (std::vector<long>({5})));\n    assert(candidate((std::vector<long>({2, 4,\
    \ 3, 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5})));\n    assert(candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5, 6}))) == (std::vector<long>({6, 5, 4, 3, 2, 1, 0})));\n    assert(candidate((std::vector<long>({2,\
    \ 1}))) == (std::vector<long>({1, 2})));\n    assert(candidate((std::vector<long>({15,\
    \ 42, 87, 32, 11, 0}))) == (std::vector<long>({0, 11, 15, 32, 42, 87})));\n  \
    \  assert(candidate((std::vector<long>({21, 14, 23, 11}))) == (std::vector<long>({23,\
    \ 21, 14, 11})));\n}\n"
  stdout: ''
  stderr: "tmp63bdzt2h: /tmp/tmp63bdzt2h.cpp:30: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// * sort_array([]) => []\n// * sort_array([5]) => [5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6])\
    \ => [6, 5, 4, 3, 2, 1, 0]\nstd::vector<long> sort_array(std::vector<long> array)\
    \ {\n    // write your code here\n    long long sum = 0;\n    for (long i = 0;\
    \ i < array.size(); i++) {\n        sum += array[i];\n    }\n    if (sum % 2 ==\
    \ 0) {\n        std::sort(array.begin(), array.end());\n    } else {\n       \
    \ std::sort(array.rbegin(), array.rend());\n    }\n    return array;\n}\nint main()\
    \ {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({5}))) ==\
    \ (std::vector<long>({5})));\n    assert(candidate((std::vector<long>({2, 4, 3,\
    \ 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5})));\n    assert(candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5, 6}))) == (std::vector<long>({6, 5, 4, 3, 2, 1, 0})));\n    assert(candidate((std::vector<long>({2,\
    \ 1}))) == (std::vector<long>({1, 2})));\n    assert(candidate((std::vector<long>({15,\
    \ 42, 87, 32, 11, 0}))) == (std::vector<long>({0, 11, 15, 32, 42, 87})));\n  \
    \  assert(candidate((std::vector<long>({21, 14, 23, 11}))) == (std::vector<long>({23,\
    \ 21, 14, 11})));\n}\n"
  stdout: ''
  stderr: "tmp74dzu6os: /tmp/tmp74dzu6os.cpp:30: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// * sort_array([]) => []\n// * sort_array([5]) => [5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6])\
    \ => [6, 5, 4, 3, 2, 1, 0]\nstd::vector<long> sort_array(std::vector<long> array)\
    \ {\n    long long sum = 0;\n    for (long long i = 0; i < array.size(); i++)\
    \ {\n        sum += array[i];\n    }\n    if (sum % 2 == 0) {\n        std::sort(array.begin(),\
    \ array.end());\n    } else {\n        std::sort(array.rbegin(), array.rend());\n\
    \    }\n    return array;\n}\nint main() {\n    auto candidate = sort_array;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({5})))\
    \ == (std::vector<long>({5})));\n    assert(candidate((std::vector<long>({2, 4,\
    \ 3, 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5})));\n    assert(candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5, 6}))) == (std::vector<long>({6, 5, 4, 3, 2, 1, 0})));\n    assert(candidate((std::vector<long>({2,\
    \ 1}))) == (std::vector<long>({1, 2})));\n    assert(candidate((std::vector<long>({15,\
    \ 42, 87, 32, 11, 0}))) == (std::vector<long>({0, 11, 15, 32, 42, 87})));\n  \
    \  assert(candidate((std::vector<long>({21, 14, 23, 11}))) == (std::vector<long>({23,\
    \ 21, 14, 11})));\n}\n"
  stdout: ''
  stderr: "tmp0gitipi9: /tmp/tmp0gitipi9.cpp:29: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// * sort_array([]) => []\n// * sort_array([5]) => [5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6])\
    \ => [6, 5, 4, 3, 2, 1, 0]\nstd::vector<long> sort_array(std::vector<long> array)\
    \ {\n    long sum = 0;\n    for (long i : array) {\n        sum += i;\n    }\n\
    \    if (sum % 2 == 1) {\n        std::sort(array.begin(), array.end());\n   \
    \ } else {\n        std::sort(array.rbegin(), array.rend());\n    }\n    return\
    \ array;\n}\nint main() {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({5}))) ==\
    \ (std::vector<long>({5})));\n    assert(candidate((std::vector<long>({2, 4, 3,\
    \ 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5})));\n    assert(candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5, 6}))) == (std::vector<long>({6, 5, 4, 3, 2, 1, 0})));\n    assert(candidate((std::vector<long>({2,\
    \ 1}))) == (std::vector<long>({1, 2})));\n    assert(candidate((std::vector<long>({15,\
    \ 42, 87, 32, 11, 0}))) == (std::vector<long>({0, 11, 15, 32, 42, 87})));\n  \
    \  assert(candidate((std::vector<long>({21, 14, 23, 11}))) == (std::vector<long>({23,\
    \ 21, 14, 11})));\n}\n"
  stdout: ''
  stderr: "tmpx8nwaf4f: /tmp/tmpx8nwaf4f.cpp:30: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5, 6}))) == (std::vector<long>({6, 5, 4, 3, 2, 1, 0}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// * sort_array([]) => []\n// * sort_array([5]) => [5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6])\
    \ => [6, 5, 4, 3, 2, 1, 0]\nstd::vector<long> sort_array(std::vector<long> array)\
    \ {\n    long long sum = 0;\n    for (auto i : array) {\n        sum += i;\n \
    \   }\n    if (sum % 2 == 0) {\n        std::sort(array.begin(), array.end());\n\
    \    } else {\n        std::sort(array.rbegin(), array.rend());\n    }\n    return\
    \ array;\n}\nint main() {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({5}))) ==\
    \ (std::vector<long>({5})));\n    assert(candidate((std::vector<long>({2, 4, 3,\
    \ 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5})));\n    assert(candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5, 6}))) == (std::vector<long>({6, 5, 4, 3, 2, 1, 0})));\n    assert(candidate((std::vector<long>({2,\
    \ 1}))) == (std::vector<long>({1, 2})));\n    assert(candidate((std::vector<long>({15,\
    \ 42, 87, 32, 11, 0}))) == (std::vector<long>({0, 11, 15, 32, 42, 87})));\n  \
    \  assert(candidate((std::vector<long>({21, 14, 23, 11}))) == (std::vector<long>({23,\
    \ 21, 14, 11})));\n}\n"
  stdout: ''
  stderr: "tmps3fzyauj: /tmp/tmps3fzyauj.cpp:29: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// * sort_array([]) => []\n// * sort_array([5]) => [5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6])\
    \ => [6, 5, 4, 3, 2, 1, 0]\nstd::vector<long> sort_array(std::vector<long> array)\
    \ {\n    std::vector<long> result;\n    long sum = 0;\n    for (long i : array)\
    \ {\n        sum += i;\n        result.push_back(i);\n    }\n    if (sum % 2 ==\
    \ 1) {\n        std::sort(result.begin(), result.end());\n    } else {\n     \
    \   std::sort(result.rbegin(), result.rend());\n    }\n    return result;\n}\n\
    int main() {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({5}))) ==\
    \ (std::vector<long>({5})));\n    assert(candidate((std::vector<long>({2, 4, 3,\
    \ 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5})));\n    assert(candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5, 6}))) == (std::vector<long>({6, 5, 4, 3, 2, 1, 0})));\n    assert(candidate((std::vector<long>({2,\
    \ 1}))) == (std::vector<long>({1, 2})));\n    assert(candidate((std::vector<long>({15,\
    \ 42, 87, 32, 11, 0}))) == (std::vector<long>({0, 11, 15, 32, 42, 87})));\n  \
    \  assert(candidate((std::vector<long>({21, 14, 23, 11}))) == (std::vector<long>({23,\
    \ 21, 14, 11})));\n}\n"
  stdout: ''
  stderr: "tmpos1ibu_p: /tmp/tmpos1ibu_p.cpp:32: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5, 6}))) == (std::vector<long>({6, 5, 4, 3, 2, 1, 0}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// * sort_array([]) => []\n// * sort_array([5]) => [5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6])\
    \ => [6, 5, 4, 3, 2, 1, 0]\nstd::vector<long> sort_array(std::vector<long> array)\
    \ {\n    // Your code here\n    long long sum = 0;\n    for (long i = 0; i < array.size();\
    \ i++) {\n        sum += array[i];\n    }\n    if (sum % 2 == 0) {\n        std::sort(array.begin(),\
    \ array.end());\n        return array;\n    } else {\n        std::sort(array.rbegin(),\
    \ array.rend());\n        return array;\n    }\n}\nint main() {\n    auto candidate\
    \ = sort_array;\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({5}))) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({2, 4, 3, 0, 1, 5}))) == (std::vector<long>({0,\
    \ 1, 2, 3, 4, 5})));\n    assert(candidate((std::vector<long>({2, 4, 3, 0, 1,\
    \ 5, 6}))) == (std::vector<long>({6, 5, 4, 3, 2, 1, 0})));\n    assert(candidate((std::vector<long>({2,\
    \ 1}))) == (std::vector<long>({1, 2})));\n    assert(candidate((std::vector<long>({15,\
    \ 42, 87, 32, 11, 0}))) == (std::vector<long>({0, 11, 15, 32, 42, 87})));\n  \
    \  assert(candidate((std::vector<long>({21, 14, 23, 11}))) == (std::vector<long>({23,\
    \ 21, 14, 11})));\n}\n"
  stdout: ''
  stderr: "tmp7u5bhdea: /tmp/tmp7u5bhdea.cpp:31: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// * sort_array([]) => []\n// * sort_array([5]) => [5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6])\
    \ => [6, 5, 4, 3, 2, 1, 0]\nstd::vector<long> sort_array(std::vector<long> array)\
    \ {\n    // Your code here\n    long long sum = 0;\n    for (long i = 0; i < array.size();\
    \ i++) {\n        sum += array[i];\n    }\n    if (sum % 2 == 0) {\n        std::sort(array.begin(),\
    \ array.end());\n    } else {\n        std::sort(array.rbegin(), array.rend());\n\
    \    }\n    return array;\n}\nint main() {\n    auto candidate = sort_array;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({5})))\
    \ == (std::vector<long>({5})));\n    assert(candidate((std::vector<long>({2, 4,\
    \ 3, 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5})));\n    assert(candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5, 6}))) == (std::vector<long>({6, 5, 4, 3, 2, 1, 0})));\n    assert(candidate((std::vector<long>({2,\
    \ 1}))) == (std::vector<long>({1, 2})));\n    assert(candidate((std::vector<long>({15,\
    \ 42, 87, 32, 11, 0}))) == (std::vector<long>({0, 11, 15, 32, 42, 87})));\n  \
    \  assert(candidate((std::vector<long>({21, 14, 23, 11}))) == (std::vector<long>({23,\
    \ 21, 14, 11})));\n}\n"
  stdout: ''
  stderr: "tmpwfide780: /tmp/tmpwfide780.cpp:30: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// * sort_array([]) => []\n// * sort_array([5]) => [5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6])\
    \ => [6, 5, 4, 3, 2, 1, 0]\nstd::vector<long> sort_array(std::vector<long> array)\
    \ {\n    long long sum = 0;\n    for (long long i = 0; i < array.size(); i++)\
    \ {\n        sum += array[i];\n    }\n    if (sum % 2 == 0) {\n        std::sort(array.begin(),\
    \ array.end());\n    } else {\n        std::sort(array.rbegin(), array.rend());\n\
    \    }\n    return array;\n}\nint main() {\n    auto candidate = sort_array;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({5})))\
    \ == (std::vector<long>({5})));\n    assert(candidate((std::vector<long>({2, 4,\
    \ 3, 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5})));\n    assert(candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5, 6}))) == (std::vector<long>({6, 5, 4, 3, 2, 1, 0})));\n    assert(candidate((std::vector<long>({2,\
    \ 1}))) == (std::vector<long>({1, 2})));\n    assert(candidate((std::vector<long>({15,\
    \ 42, 87, 32, 11, 0}))) == (std::vector<long>({0, 11, 15, 32, 42, 87})));\n  \
    \  assert(candidate((std::vector<long>({21, 14, 23, 11}))) == (std::vector<long>({23,\
    \ 21, 14, 11})));\n}\n"
  stdout: ''
  stderr: "tmpx0golw13: /tmp/tmpx0golw13.cpp:29: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// * sort_array([]) => []\n// * sort_array([5]) => [5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6])\
    \ => [6, 5, 4, 3, 2, 1, 0]\nstd::vector<long> sort_array(std::vector<long> array)\
    \ {\n    // Your code here\n    long long sum = 0;\n    for (long i = 0; i < array.size();\
    \ i++) {\n        sum += array[i];\n    }\n    if (sum % 2 == 0) {\n        std::sort(array.begin(),\
    \ array.end());\n    } else {\n        std::sort(array.rbegin(), array.rend());\n\
    \    }\n    return array;\n}\nint main() {\n    auto candidate = sort_array;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({5})))\
    \ == (std::vector<long>({5})));\n    assert(candidate((std::vector<long>({2, 4,\
    \ 3, 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5})));\n    assert(candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5, 6}))) == (std::vector<long>({6, 5, 4, 3, 2, 1, 0})));\n    assert(candidate((std::vector<long>({2,\
    \ 1}))) == (std::vector<long>({1, 2})));\n    assert(candidate((std::vector<long>({15,\
    \ 42, 87, 32, 11, 0}))) == (std::vector<long>({0, 11, 15, 32, 42, 87})));\n  \
    \  assert(candidate((std::vector<long>({21, 14, 23, 11}))) == (std::vector<long>({23,\
    \ 21, 14, 11})));\n}\n"
  stdout: ''
  stderr: "tmpkbg2qboq: /tmp/tmpkbg2qboq.cpp:30: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// * sort_array([]) => []\n// * sort_array([5]) => [5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6])\
    \ => [6, 5, 4, 3, 2, 1, 0]\nstd::vector<long> sort_array(std::vector<long> array)\
    \ {\n    long long sum = 0;\n    for (long i = 0; i < array.size(); i++) {\n \
    \       sum += array[i];\n    }\n    if (sum % 2 == 0) {\n        std::sort(array.begin(),\
    \ array.end());\n    } else {\n        std::sort(array.rbegin(), array.rend());\n\
    \    }\n    return array;\n}\nint main() {\n    auto candidate = sort_array;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({5})))\
    \ == (std::vector<long>({5})));\n    assert(candidate((std::vector<long>({2, 4,\
    \ 3, 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5})));\n    assert(candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5, 6}))) == (std::vector<long>({6, 5, 4, 3, 2, 1, 0})));\n    assert(candidate((std::vector<long>({2,\
    \ 1}))) == (std::vector<long>({1, 2})));\n    assert(candidate((std::vector<long>({15,\
    \ 42, 87, 32, 11, 0}))) == (std::vector<long>({0, 11, 15, 32, 42, 87})));\n  \
    \  assert(candidate((std::vector<long>({21, 14, 23, 11}))) == (std::vector<long>({23,\
    \ 21, 14, 11})));\n}\n"
  stdout: ''
  stderr: "tmp4r_fqv2c: /tmp/tmp4r_fqv2c.cpp:29: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// * sort_array([]) => []\n// * sort_array([5]) => [5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6])\
    \ => [6, 5, 4, 3, 2, 1, 0]\nstd::vector<long> sort_array(std::vector<long> array)\
    \ {\n    long long sum = 0;\n    for (long long i = 0; i < array.size(); i++)\
    \ {\n        sum += array[i];\n    }\n    if (sum % 2 == 0) {\n        std::sort(array.begin(),\
    \ array.end());\n    } else {\n        std::sort(array.rbegin(), array.rend());\n\
    \    }\n    return array;\n}\nint main() {\n    auto candidate = sort_array;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({5})))\
    \ == (std::vector<long>({5})));\n    assert(candidate((std::vector<long>({2, 4,\
    \ 3, 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5})));\n    assert(candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5, 6}))) == (std::vector<long>({6, 5, 4, 3, 2, 1, 0})));\n    assert(candidate((std::vector<long>({2,\
    \ 1}))) == (std::vector<long>({1, 2})));\n    assert(candidate((std::vector<long>({15,\
    \ 42, 87, 32, 11, 0}))) == (std::vector<long>({0, 11, 15, 32, 42, 87})));\n  \
    \  assert(candidate((std::vector<long>({21, 14, 23, 11}))) == (std::vector<long>({23,\
    \ 21, 14, 11})));\n}\n"
  stdout: ''
  stderr: "tmpyt814bc6: /tmp/tmpyt814bc6.cpp:29: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// * sort_array([]) => []\n// * sort_array([5]) => [5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6])\
    \ => [6, 5, 4, 3, 2, 1, 0]\nstd::vector<long> sort_array(std::vector<long> array)\
    \ {\n    long sum = 0;\n    for (long i : array) {\n        sum += i;\n    }\n\
    \    if (sum % 2 == 0) {\n        std::sort(array.begin(), array.end());\n   \
    \ } else {\n        std::sort(array.rbegin(), array.rend());\n    }\n    return\
    \ array;\n}\nint main() {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({5}))) ==\
    \ (std::vector<long>({5})));\n    assert(candidate((std::vector<long>({2, 4, 3,\
    \ 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5})));\n    assert(candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5, 6}))) == (std::vector<long>({6, 5, 4, 3, 2, 1, 0})));\n    assert(candidate((std::vector<long>({2,\
    \ 1}))) == (std::vector<long>({1, 2})));\n    assert(candidate((std::vector<long>({15,\
    \ 42, 87, 32, 11, 0}))) == (std::vector<long>({0, 11, 15, 32, 42, 87})));\n  \
    \  assert(candidate((std::vector<long>({21, 14, 23, 11}))) == (std::vector<long>({23,\
    \ 21, 14, 11})));\n}\n"
  stdout: ''
  stderr: "tmprd_hl08k: /tmp/tmprd_hl08k.cpp:29: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// * sort_array([]) => []\n// * sort_array([5]) => [5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6])\
    \ => [6, 5, 4, 3, 2, 1, 0]\nstd::vector<long> sort_array(std::vector<long> array)\
    \ {\n    long long sum = 0;\n    for (long long i = 0; i < array.size(); i++)\
    \ {\n        sum += array[i];\n    }\n    if (sum % 2 == 0) {\n        std::sort(array.begin(),\
    \ array.end());\n    } else {\n        std::sort(array.rbegin(), array.rend());\n\
    \    }\n    return array;\n}\nint main() {\n    auto candidate = sort_array;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({5})))\
    \ == (std::vector<long>({5})));\n    assert(candidate((std::vector<long>({2, 4,\
    \ 3, 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5})));\n    assert(candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5, 6}))) == (std::vector<long>({6, 5, 4, 3, 2, 1, 0})));\n    assert(candidate((std::vector<long>({2,\
    \ 1}))) == (std::vector<long>({1, 2})));\n    assert(candidate((std::vector<long>({15,\
    \ 42, 87, 32, 11, 0}))) == (std::vector<long>({0, 11, 15, 32, 42, 87})));\n  \
    \  assert(candidate((std::vector<long>({21, 14, 23, 11}))) == (std::vector<long>({23,\
    \ 21, 14, 11})));\n}\n"
  stdout: ''
  stderr: "tmparax59d2: /tmp/tmparax59d2.cpp:29: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// * sort_array([]) => []\n// * sort_array([5]) => [5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6])\
    \ => [6, 5, 4, 3, 2, 1, 0]\nstd::vector<long> sort_array(std::vector<long> array)\
    \ {\n    // Your code here\n    long sum = 0;\n    for (long i : array) {\n  \
    \      sum += i;\n    }\n    if (sum % 2 == 0) {\n        std::sort(array.begin(),\
    \ array.end());\n    } else {\n        std::sort(array.rbegin(), array.rend());\n\
    \    }\n    return array;\n}\nint main() {\n    auto candidate = sort_array;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({5})))\
    \ == (std::vector<long>({5})));\n    assert(candidate((std::vector<long>({2, 4,\
    \ 3, 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5})));\n    assert(candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5, 6}))) == (std::vector<long>({6, 5, 4, 3, 2, 1, 0})));\n    assert(candidate((std::vector<long>({2,\
    \ 1}))) == (std::vector<long>({1, 2})));\n    assert(candidate((std::vector<long>({15,\
    \ 42, 87, 32, 11, 0}))) == (std::vector<long>({0, 11, 15, 32, 42, 87})));\n  \
    \  assert(candidate((std::vector<long>({21, 14, 23, 11}))) == (std::vector<long>({23,\
    \ 21, 14, 11})));\n}\n"
  stdout: ''
  stderr: "tmpteaczss3: /tmp/tmpteaczss3.cpp:30: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// * sort_array([]) => []\n// * sort_array([5]) => [5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6])\
    \ => [6, 5, 4, 3, 2, 1, 0]\nstd::vector<long> sort_array(std::vector<long> array)\
    \ {\n    long long sum = 0;\n    for (long i = 0; i < array.size(); i++) {\n \
    \       sum += array[i];\n    }\n    if (sum % 2 == 0) {\n        std::sort(array.begin(),\
    \ array.end());\n    } else {\n        std::sort(array.rbegin(), array.rend());\n\
    \    }\n    return array;\n}\nint main() {\n    auto candidate = sort_array;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({5})))\
    \ == (std::vector<long>({5})));\n    assert(candidate((std::vector<long>({2, 4,\
    \ 3, 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5})));\n    assert(candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5, 6}))) == (std::vector<long>({6, 5, 4, 3, 2, 1, 0})));\n    assert(candidate((std::vector<long>({2,\
    \ 1}))) == (std::vector<long>({1, 2})));\n    assert(candidate((std::vector<long>({15,\
    \ 42, 87, 32, 11, 0}))) == (std::vector<long>({0, 11, 15, 32, 42, 87})));\n  \
    \  assert(candidate((std::vector<long>({21, 14, 23, 11}))) == (std::vector<long>({23,\
    \ 21, 14, 11})));\n}\n"
  stdout: ''
  stderr: "tmpopwip7k3: /tmp/tmpopwip7k3.cpp:29: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// * sort_array([]) => []\n// * sort_array([5]) => [5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6])\
    \ => [6, 5, 4, 3, 2, 1, 0]\nstd::vector<long> sort_array(std::vector<long> array)\
    \ {\n    // Your code here\n    long long sum = 0;\n    long long sum2 = 0;\n\
    \    long long sum3 = 0;\n    long long sum4 = 0;\n    long long sum5 = 0;\n \
    \   long long sum6 = 0;\n    long long sum7 = 0;\n    long long sum8 = 0;\n  \
    \  long long sum9 = 0;\n    long long sum10 = 0;\n    long long sum11 = 0;\n \
    \   long long sum12 = 0;\n    long long sum13 = 0;\n    long long sum14 = 0;\n\
    \    long long sum15 = 0;\n    long long sum16 = 0;\n    long long sum17 = 0;\n\
    \    long long sum18 = 0;\n    long long sum19 = 0;\n    long long sum20 = 0;\n\
    \    long long sum21 = 0;\n    long long sum22 = 0;\n    long long sum23 = 0;\n\
    \    long long sum24 = 0;\n    long long sum25 = 0;\n    long long sum26 = 0;\n\
    \    long long sum27 = 0;\n    long long sum28 = 0;\n    long long sum29 = 0;\n\
    \    long long sum30 = 0;\n    long long sum31 = 0;\n    long long sum32 = 0;\n\
    \    long long sum33 = 0;\n    long long sum34 = 0;\n    long long sum35 = 0;\n\
    \    long long sum36 = 0;\n    long long sum37 = 0;\n    long long sum38 = 0;\n\
    \    long long sum39 = 0;\n    long long sum40 = 0;\n    long long sum41 = 0;\n\
    \    long long sum42 = 0;\n    long long sum43 = 0;\n    long long sum44 = 0;\n\
    \    long long sum45 = 0;\n    long long sum46 = 0;\n    long long sum47 = 0;\n\
    \    long long sum48 = 0;\n    long long sum49 = 0;\n    long long sum50 = 0;\n\
    \    long long sum51 = 0;\n    long long sum52 = 0;\n    long long sum53 = 0;\n\
    \    long long sum54 = 0;\n    long long sum55 = 0;\n    long long sum56 = 0;\n\
    \    long long sum57 = 0;\n    long long sum58 = 0;\n    long long sum59 = 0;\n\
    \    long long sum60 = 0;\n    long long sum61 = 0;\n    long long sum62 = 0;\n\
    \    long long sum63 = 0;\n    long long sum64 = 0;\n    long long sum65 = 0;\n\
    \    long long sum66 = 0;\n    long long sum67 = 0;\n    long long sum68 = 0;\n\
    \    long long sum69 = 0;\n    long long sum70 = 0;\n    long long sum71 = 0;\n\
    \    long long sum72 = 0;\n    long long sum73 = 0;\n    \n}\nint main() {\n \
    \   auto candidate = sort_array;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({5}))) ==\
    \ (std::vector<long>({5})));\n    assert(candidate((std::vector<long>({2, 4, 3,\
    \ 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5})));\n    assert(candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5, 6}))) == (std::vector<long>({6, 5, 4, 3, 2, 1, 0})));\n    assert(candidate((std::vector<long>({2,\
    \ 1}))) == (std::vector<long>({1, 2})));\n    assert(candidate((std::vector<long>({15,\
    \ 42, 87, 32, 11, 0}))) == (std::vector<long>({0, 11, 15, 32, 42, 87})));\n  \
    \  assert(candidate((std::vector<long>({21, 14, 23, 11}))) == (std::vector<long>({23,\
    \ 21, 14, 11})));\n}\n"
  stdout: ''
  stderr: "tmpsfynq4ze: /tmp/tmpsfynq4ze.cpp:92: int main(): Assertion `candidate((std::vector<long>()))\
    \ == (std::vector<long>())' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// * sort_array([]) => []\n// * sort_array([5]) => [5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6])\
    \ => [6, 5, 4, 3, 2, 1, 0]\nstd::vector<long> sort_array(std::vector<long> array)\
    \ {\n    // Your code here\n    long long sum = 0;\n    for (long i = 0; i < array.size();\
    \ i++) {\n        sum += array[i];\n    }\n    if (sum % 2 == 0) {\n        std::sort(array.begin(),\
    \ array.end());\n    } else {\n        std::sort(array.rbegin(), array.rend());\n\
    \    }\n    return array;\n}\nint main() {\n    auto candidate = sort_array;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({5})))\
    \ == (std::vector<long>({5})));\n    assert(candidate((std::vector<long>({2, 4,\
    \ 3, 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5})));\n    assert(candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5, 6}))) == (std::vector<long>({6, 5, 4, 3, 2, 1, 0})));\n    assert(candidate((std::vector<long>({2,\
    \ 1}))) == (std::vector<long>({1, 2})));\n    assert(candidate((std::vector<long>({15,\
    \ 42, 87, 32, 11, 0}))) == (std::vector<long>({0, 11, 15, 32, 42, 87})));\n  \
    \  assert(candidate((std::vector<long>({21, 14, 23, 11}))) == (std::vector<long>({23,\
    \ 21, 14, 11})));\n}\n"
  stdout: ''
  stderr: "tmpc7k0r8i4: /tmp/tmpc7k0r8i4.cpp:30: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// * sort_array([]) => []\n// * sort_array([5]) => [5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6])\
    \ => [6, 5, 4, 3, 2, 1, 0]\nstd::vector<long> sort_array(std::vector<long> array)\
    \ {\n    // write your code here\n    long sum = 0;\n    long temp = 0;\n    long\
    \ sum2 = 0;\n    long temp2 = 0;\n    long sum3 = 0;\n    long temp3 = 0;\n  \
    \  long sum4 = 0;\n    long temp4 = 0;\n    long sum5 = 0;\n    long temp5 = 0;\n\
    \    long sum6 = 0;\n    long temp6 = 0;\n    long sum7 = 0;\n    long temp7 =\
    \ 0;\n    long sum8 = 0;\n    long temp8 = 0;\n    long sum9 = 0;\n    long temp9\
    \ = 0;\n    long sum10 = 0;\n    long temp10 = 0;\n    long sum11 = 0;\n    long\
    \ temp11 = 0;\n    long sum12 = 0;\n    long temp12 = 0;\n    long sum13 = 0;\n\
    \    long temp13 = 0;\n    long sum14 = 0;\n    long temp14 = 0;\n    long sum15\
    \ = 0;\n    long temp15 = 0;\n    long sum16 = 0;\n    long temp16 = 0;\n    long\
    \ sum17 = 0;\n    long temp17 = 0;\n    long sum18 = 0;\n    long temp18 = 0;\n\
    \    long sum19 = 0;\n    long temp19 = 0;\n    long sum20 = 0;\n    long temp20\
    \ = 0;\n    long sum21 = 0;\n    long temp21 = 0;\n    long sum22 = 0;\n    long\
    \ temp22 = 0;\n    long sum23 = 0;\n    long temp23 = 0;\n    long sum24 = 0;\n\
    \    long temp24 = 0;\n    long sum25 = 0;\n    long temp25 = 0;\n    long sum26\
    \ = 0;\n    long temp26 = 0;\n    long sum27 = 0;\n    long temp27 = 0;\n    long\
    \ sum28 = 0;\n    long temp28 = 0;\n    long sum29 = 0;\n    long temp29 = 0;\n\
    \    long sum30 = 0;\n    long temp30 = 0;\n    long sum31 = 0;\n    long temp31\
    \ = 0;\n    long sum32 = 0;\n    long temp32 = 0;\n    long sum33 = 0;\n    long\
    \ temp33 = 0;\n    long sum34 = 0;\n    long temp34 = 0;\n    long sum35 = 0;\n\
    \    long temp35 = 0;\n    long sum36 = 0;\n    long temp36 = 0;\n    long sum37\
    \ = 0;\n    long temp37 = 0;\n    long sum38 = 0;\n    long temp38 = 0;\n    long\
    \ sum39 = 0;\n    long temp39 = 0;\n    long sum40 = 0;\n    long temp40 = 0;\n\
    \    long sum41 = 0;\n    long temp41 = 0;\n    long sum42 = 0;\n    long temp42\
    \ = 0;\n    long sum43 = 0;\n    long temp43 = 0;\n    \n}\nint main() {\n   \
    \ auto candidate = sort_array;\n    assert(candidate((std::vector<long>())) ==\
    \ (std::vector<long>()));\n    assert(candidate((std::vector<long>({5}))) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({2, 4, 3, 0, 1, 5}))) == (std::vector<long>({0,\
    \ 1, 2, 3, 4, 5})));\n    assert(candidate((std::vector<long>({2, 4, 3, 0, 1,\
    \ 5, 6}))) == (std::vector<long>({6, 5, 4, 3, 2, 1, 0})));\n    assert(candidate((std::vector<long>({2,\
    \ 1}))) == (std::vector<long>({1, 2})));\n    assert(candidate((std::vector<long>({15,\
    \ 42, 87, 32, 11, 0}))) == (std::vector<long>({0, 11, 15, 32, 42, 87})));\n  \
    \  assert(candidate((std::vector<long>({21, 14, 23, 11}))) == (std::vector<long>({23,\
    \ 21, 14, 11})));\n}\n"
  stdout: ''
  stderr: "tmpijaidnu7: /tmp/tmpijaidnu7.cpp:105: int main(): Assertion `candidate((std::vector<long>()))\
    \ == (std::vector<long>())' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// * sort_array([]) => []\n// * sort_array([5]) => [5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6])\
    \ => [6, 5, 4, 3, 2, 1, 0]\nstd::vector<long> sort_array(std::vector<long> array)\
    \ {\n    // write your code here\n    long sum = 0;\n    for (long i = 0; i <\
    \ array.size(); i++) {\n        sum += array[i];\n    }\n    if (sum % 2 == 0)\
    \ {\n        std::sort(array.begin(), array.end());\n    } else {\n        std::sort(array.rbegin(),\
    \ array.rend());\n    }\n    return array;\n}\nint main() {\n    auto candidate\
    \ = sort_array;\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({5}))) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({2, 4, 3, 0, 1, 5}))) == (std::vector<long>({0,\
    \ 1, 2, 3, 4, 5})));\n    assert(candidate((std::vector<long>({2, 4, 3, 0, 1,\
    \ 5, 6}))) == (std::vector<long>({6, 5, 4, 3, 2, 1, 0})));\n    assert(candidate((std::vector<long>({2,\
    \ 1}))) == (std::vector<long>({1, 2})));\n    assert(candidate((std::vector<long>({15,\
    \ 42, 87, 32, 11, 0}))) == (std::vector<long>({0, 11, 15, 32, 42, 87})));\n  \
    \  assert(candidate((std::vector<long>({21, 14, 23, 11}))) == (std::vector<long>({23,\
    \ 21, 14, 11})));\n}\n"
  stdout: ''
  stderr: "tmp3vf7hjrw: /tmp/tmp3vf7hjrw.cpp:30: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// * sort_array([]) => []\n// * sort_array([5]) => [5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6])\
    \ => [6, 5, 4, 3, 2, 1, 0]\nstd::vector<long> sort_array(std::vector<long> array)\
    \ {\n    long sum = 0;\n    for (auto i : array) {\n        sum += i;\n    }\n\
    \    if (sum % 2 == 0) {\n        std::sort(array.begin(), array.end());\n   \
    \ } else {\n        std::sort(array.rbegin(), array.rend());\n    }\n    return\
    \ array;\n}\nint main() {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({5}))) ==\
    \ (std::vector<long>({5})));\n    assert(candidate((std::vector<long>({2, 4, 3,\
    \ 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5})));\n    assert(candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5, 6}))) == (std::vector<long>({6, 5, 4, 3, 2, 1, 0})));\n    assert(candidate((std::vector<long>({2,\
    \ 1}))) == (std::vector<long>({1, 2})));\n    assert(candidate((std::vector<long>({15,\
    \ 42, 87, 32, 11, 0}))) == (std::vector<long>({0, 11, 15, 32, 42, 87})));\n  \
    \  assert(candidate((std::vector<long>({21, 14, 23, 11}))) == (std::vector<long>({23,\
    \ 21, 14, 11})));\n}\n"
  stdout: ''
  stderr: "tmpm5q11l8u: /tmp/tmpm5q11l8u.cpp:29: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// * sort_array([]) => []\n// * sort_array([5]) => [5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6])\
    \ => [6, 5, 4, 3, 2, 1, 0]\nstd::vector<long> sort_array(std::vector<long> array)\
    \ {\n    long sum = 0;\n    for (long i : array) {\n        sum += i;\n    }\n\
    \    if (sum % 2 == 1) {\n        std::sort(array.begin(), array.end());\n   \
    \ } else {\n        std::sort(array.rbegin(), array.rend());\n    }\n    return\
    \ array;\n}\nint main() {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({5}))) ==\
    \ (std::vector<long>({5})));\n    assert(candidate((std::vector<long>({2, 4, 3,\
    \ 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5})));\n    assert(candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5, 6}))) == (std::vector<long>({6, 5, 4, 3, 2, 1, 0})));\n    assert(candidate((std::vector<long>({2,\
    \ 1}))) == (std::vector<long>({1, 2})));\n    assert(candidate((std::vector<long>({15,\
    \ 42, 87, 32, 11, 0}))) == (std::vector<long>({0, 11, 15, 32, 42, 87})));\n  \
    \  assert(candidate((std::vector<long>({21, 14, 23, 11}))) == (std::vector<long>({23,\
    \ 21, 14, 11})));\n}\n"
  stdout: ''
  stderr: "tmpxkbbx87_: /tmp/tmpxkbbx87_.cpp:30: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5, 6}))) == (std::vector<long>({6, 5, 4, 3, 2, 1, 0}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// * sort_array([]) => []\n// * sort_array([5]) => [5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6])\
    \ => [6, 5, 4, 3, 2, 1, 0]\nstd::vector<long> sort_array(std::vector<long> array)\
    \ {\n    long long sum = 0;\n    for (long long i = 0; i < array.size(); i++)\
    \ {\n        sum += array[i];\n    }\n    if (sum % 2 == 0) {\n        std::sort(array.begin(),\
    \ array.end());\n    } else {\n        std::sort(array.rbegin(), array.rend());\n\
    \    }\n    return array;\n}\nint main() {\n    auto candidate = sort_array;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({5})))\
    \ == (std::vector<long>({5})));\n    assert(candidate((std::vector<long>({2, 4,\
    \ 3, 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5})));\n    assert(candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5, 6}))) == (std::vector<long>({6, 5, 4, 3, 2, 1, 0})));\n    assert(candidate((std::vector<long>({2,\
    \ 1}))) == (std::vector<long>({1, 2})));\n    assert(candidate((std::vector<long>({15,\
    \ 42, 87, 32, 11, 0}))) == (std::vector<long>({0, 11, 15, 32, 42, 87})));\n  \
    \  assert(candidate((std::vector<long>({21, 14, 23, 11}))) == (std::vector<long>({23,\
    \ 21, 14, 11})));\n}\n"
  stdout: ''
  stderr: "tmpg8lb7q74: /tmp/tmpg8lb7q74.cpp:29: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// * sort_array([]) => []\n// * sort_array([5]) => [5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6])\
    \ => [6, 5, 4, 3, 2, 1, 0]\nstd::vector<long> sort_array(std::vector<long> array)\
    \ {\n    // write your code here\n    long sum = 0;\n    for (long i : array)\
    \ {\n        sum += i;\n    }\n    if (sum % 2 == 0) {\n        std::sort(array.begin(),\
    \ array.end());\n    } else {\n        std::sort(array.rbegin(), array.rend());\n\
    \    }\n    return array;\n}\nint main() {\n    auto candidate = sort_array;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({5})))\
    \ == (std::vector<long>({5})));\n    assert(candidate((std::vector<long>({2, 4,\
    \ 3, 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5})));\n    assert(candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5, 6}))) == (std::vector<long>({6, 5, 4, 3, 2, 1, 0})));\n    assert(candidate((std::vector<long>({2,\
    \ 1}))) == (std::vector<long>({1, 2})));\n    assert(candidate((std::vector<long>({15,\
    \ 42, 87, 32, 11, 0}))) == (std::vector<long>({0, 11, 15, 32, 42, 87})));\n  \
    \  assert(candidate((std::vector<long>({21, 14, 23, 11}))) == (std::vector<long>({23,\
    \ 21, 14, 11})));\n}\n"
  stdout: ''
  stderr: "tmpyci7brlk: /tmp/tmpyci7brlk.cpp:30: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// * sort_array([]) => []\n// * sort_array([5]) => [5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6])\
    \ => [6, 5, 4, 3, 2, 1, 0]\nstd::vector<long> sort_array(std::vector<long> array)\
    \ {\n    long sum = 0;\n    for (long i : array) {\n        sum += i;\n    }\n\
    \    if (sum % 2 == 0) {\n        std::sort(array.begin(), array.end());\n   \
    \ } else {\n        std::sort(array.rbegin(), array.rend());\n    }\n    return\
    \ array;\n}\nint main() {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({5}))) ==\
    \ (std::vector<long>({5})));\n    assert(candidate((std::vector<long>({2, 4, 3,\
    \ 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5})));\n    assert(candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5, 6}))) == (std::vector<long>({6, 5, 4, 3, 2, 1, 0})));\n    assert(candidate((std::vector<long>({2,\
    \ 1}))) == (std::vector<long>({1, 2})));\n    assert(candidate((std::vector<long>({15,\
    \ 42, 87, 32, 11, 0}))) == (std::vector<long>({0, 11, 15, 32, 42, 87})));\n  \
    \  assert(candidate((std::vector<long>({21, 14, 23, 11}))) == (std::vector<long>({23,\
    \ 21, 14, 11})));\n}\n"
  stdout: ''
  stderr: "tmpq9bxjadq: /tmp/tmpq9bxjadq.cpp:29: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// * sort_array([]) => []\n// * sort_array([5]) => [5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6])\
    \ => [6, 5, 4, 3, 2, 1, 0]\nstd::vector<long> sort_array(std::vector<long> array)\
    \ {\n    // Your code here\n    long sum = 0;\n    for (long i : array) {\n  \
    \      sum += i;\n    }\n    if (sum % 2 == 0) {\n        std::sort(array.begin(),\
    \ array.end());\n    } else {\n        std::sort(array.rbegin(), array.rend());\n\
    \    }\n    return array;\n}\nint main() {\n    auto candidate = sort_array;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({5})))\
    \ == (std::vector<long>({5})));\n    assert(candidate((std::vector<long>({2, 4,\
    \ 3, 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5})));\n    assert(candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5, 6}))) == (std::vector<long>({6, 5, 4, 3, 2, 1, 0})));\n    assert(candidate((std::vector<long>({2,\
    \ 1}))) == (std::vector<long>({1, 2})));\n    assert(candidate((std::vector<long>({15,\
    \ 42, 87, 32, 11, 0}))) == (std::vector<long>({0, 11, 15, 32, 42, 87})));\n  \
    \  assert(candidate((std::vector<long>({21, 14, 23, 11}))) == (std::vector<long>({23,\
    \ 21, 14, 11})));\n}\n"
  stdout: ''
  stderr: "tmp9g2k36yv: /tmp/tmp9g2k36yv.cpp:30: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// * sort_array([]) => []\n// * sort_array([5]) => [5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6])\
    \ => [6, 5, 4, 3, 2, 1, 0]\nstd::vector<long> sort_array(std::vector<long> array)\
    \ {\n    long sum = 0;\n    for (auto i : array) {\n        sum += i;\n    }\n\
    \    if (sum % 2 == 0) {\n        std::sort(array.begin(), array.end());\n   \
    \     return array;\n    } else {\n        std::sort(array.rbegin(), array.rend());\n\
    \        return array;\n    }\n}\nint main() {\n    auto candidate = sort_array;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({5})))\
    \ == (std::vector<long>({5})));\n    assert(candidate((std::vector<long>({2, 4,\
    \ 3, 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5})));\n    assert(candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5, 6}))) == (std::vector<long>({6, 5, 4, 3, 2, 1, 0})));\n    assert(candidate((std::vector<long>({2,\
    \ 1}))) == (std::vector<long>({1, 2})));\n    assert(candidate((std::vector<long>({15,\
    \ 42, 87, 32, 11, 0}))) == (std::vector<long>({0, 11, 15, 32, 42, 87})));\n  \
    \  assert(candidate((std::vector<long>({21, 14, 23, 11}))) == (std::vector<long>({23,\
    \ 21, 14, 11})));\n}\n"
  stdout: ''
  stderr: "tmpffqkgyeh: /tmp/tmpffqkgyeh.cpp:30: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// * sort_array([]) => []\n// * sort_array([5]) => [5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6])\
    \ => [6, 5, 4, 3, 2, 1, 0]\nstd::vector<long> sort_array(std::vector<long> array)\
    \ {\n    // Your code here\n    long long sum = 0;\n    for (long i = 0; i < array.size();\
    \ i++) {\n        sum += array[i];\n    }\n    if (sum % 2 == 0) {\n        std::sort(array.begin(),\
    \ array.end());\n    } else {\n        std::sort(array.rbegin(), array.rend());\n\
    \    }\n    return array;\n}\nint main() {\n    auto candidate = sort_array;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({5})))\
    \ == (std::vector<long>({5})));\n    assert(candidate((std::vector<long>({2, 4,\
    \ 3, 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5})));\n    assert(candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5, 6}))) == (std::vector<long>({6, 5, 4, 3, 2, 1, 0})));\n    assert(candidate((std::vector<long>({2,\
    \ 1}))) == (std::vector<long>({1, 2})));\n    assert(candidate((std::vector<long>({15,\
    \ 42, 87, 32, 11, 0}))) == (std::vector<long>({0, 11, 15, 32, 42, 87})));\n  \
    \  assert(candidate((std::vector<long>({21, 14, 23, 11}))) == (std::vector<long>({23,\
    \ 21, 14, 11})));\n}\n"
  stdout: ''
  stderr: "tmpntor5hfj: /tmp/tmpntor5hfj.cpp:30: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// * sort_array([]) => []\n// * sort_array([5]) => [5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6])\
    \ => [6, 5, 4, 3, 2, 1, 0]\nstd::vector<long> sort_array(std::vector<long> array)\
    \ {\n    long sum = 0;\n    for (long i : array) {\n        sum += i;\n    }\n\
    \    if (sum % 2 == 0) {\n        std::sort(array.begin(), array.end());\n   \
    \ } else {\n        std::sort(array.rbegin(), array.rend());\n    }\n    return\
    \ array;\n}\nint main() {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({5}))) ==\
    \ (std::vector<long>({5})));\n    assert(candidate((std::vector<long>({2, 4, 3,\
    \ 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5})));\n    assert(candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5, 6}))) == (std::vector<long>({6, 5, 4, 3, 2, 1, 0})));\n    assert(candidate((std::vector<long>({2,\
    \ 1}))) == (std::vector<long>({1, 2})));\n    assert(candidate((std::vector<long>({15,\
    \ 42, 87, 32, 11, 0}))) == (std::vector<long>({0, 11, 15, 32, 42, 87})));\n  \
    \  assert(candidate((std::vector<long>({21, 14, 23, 11}))) == (std::vector<long>({23,\
    \ 21, 14, 11})));\n}\n"
  stdout: ''
  stderr: "tmpo537u0z6: /tmp/tmpo537u0z6.cpp:29: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// * sort_array([]) => []\n// * sort_array([5]) => [5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6])\
    \ => [6, 5, 4, 3, 2, 1, 0]\nstd::vector<long> sort_array(std::vector<long> array)\
    \ {\n    long long sum = 0;\n    for (long long i = 0; i < array.size(); i++)\
    \ {\n        sum += array[i];\n    }\n    if (sum % 2 == 0) {\n        std::sort(array.begin(),\
    \ array.end());\n        return array;\n    } else {\n        std::sort(array.rbegin(),\
    \ array.rend());\n        return array;\n    }\n}\nint main() {\n    auto candidate\
    \ = sort_array;\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({5}))) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({2, 4, 3, 0, 1, 5}))) == (std::vector<long>({0,\
    \ 1, 2, 3, 4, 5})));\n    assert(candidate((std::vector<long>({2, 4, 3, 0, 1,\
    \ 5, 6}))) == (std::vector<long>({6, 5, 4, 3, 2, 1, 0})));\n    assert(candidate((std::vector<long>({2,\
    \ 1}))) == (std::vector<long>({1, 2})));\n    assert(candidate((std::vector<long>({15,\
    \ 42, 87, 32, 11, 0}))) == (std::vector<long>({0, 11, 15, 32, 42, 87})));\n  \
    \  assert(candidate((std::vector<long>({21, 14, 23, 11}))) == (std::vector<long>({23,\
    \ 21, 14, 11})));\n}\n"
  stdout: ''
  stderr: "tmpnz2iyrw9: /tmp/tmpnz2iyrw9.cpp:30: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// * sort_array([]) => []\n// * sort_array([5]) => [5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6])\
    \ => [6, 5, 4, 3, 2, 1, 0]\nstd::vector<long> sort_array(std::vector<long> array)\
    \ {\n    long sum = 0;\n    for (long i : array) {\n        sum += i;\n    }\n\
    \    if (sum % 2 == 0) {\n        std::sort(array.begin(), array.end());\n   \
    \ } else {\n        std::sort(array.rbegin(), array.rend());\n    }\n    return\
    \ array;\n}\nint main() {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({5}))) ==\
    \ (std::vector<long>({5})));\n    assert(candidate((std::vector<long>({2, 4, 3,\
    \ 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5})));\n    assert(candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5, 6}))) == (std::vector<long>({6, 5, 4, 3, 2, 1, 0})));\n    assert(candidate((std::vector<long>({2,\
    \ 1}))) == (std::vector<long>({1, 2})));\n    assert(candidate((std::vector<long>({15,\
    \ 42, 87, 32, 11, 0}))) == (std::vector<long>({0, 11, 15, 32, 42, 87})));\n  \
    \  assert(candidate((std::vector<long>({21, 14, 23, 11}))) == (std::vector<long>({23,\
    \ 21, 14, 11})));\n}\n"
  stdout: ''
  stderr: "tmpr1w8ehu4: /tmp/tmpr1w8ehu4.cpp:29: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// * sort_array([]) => []\n// * sort_array([5]) => [5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6])\
    \ => [6, 5, 4, 3, 2, 1, 0]\nstd::vector<long> sort_array(std::vector<long> array)\
    \ {\n    long long sum = 0;\n    for (long long i = 0; i < array.size(); i++)\
    \ {\n        sum += array[i];\n    }\n    if (sum % 2 == 0) {\n        std::sort(array.begin(),\
    \ array.end());\n        return array;\n    } else {\n        std::sort(array.rbegin(),\
    \ array.rend());\n        return array;\n    }\n}\nint main() {\n    auto candidate\
    \ = sort_array;\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({5}))) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({2, 4, 3, 0, 1, 5}))) == (std::vector<long>({0,\
    \ 1, 2, 3, 4, 5})));\n    assert(candidate((std::vector<long>({2, 4, 3, 0, 1,\
    \ 5, 6}))) == (std::vector<long>({6, 5, 4, 3, 2, 1, 0})));\n    assert(candidate((std::vector<long>({2,\
    \ 1}))) == (std::vector<long>({1, 2})));\n    assert(candidate((std::vector<long>({15,\
    \ 42, 87, 32, 11, 0}))) == (std::vector<long>({0, 11, 15, 32, 42, 87})));\n  \
    \  assert(candidate((std::vector<long>({21, 14, 23, 11}))) == (std::vector<long>({23,\
    \ 21, 14, 11})));\n}\n"
  stdout: ''
  stderr: "tmpzlg9plzg: /tmp/tmpzlg9plzg.cpp:30: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// * sort_array([]) => []\n// * sort_array([5]) => [5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6])\
    \ => [6, 5, 4, 3, 2, 1, 0]\nstd::vector<long> sort_array(std::vector<long> array)\
    \ {\n    // write your code here\n    long sum = 0;\n    for (long i : array)\
    \ {\n        sum += i;\n    }\n    if (sum % 2 == 1) {\n        std::sort(array.begin(),\
    \ array.end());\n    } else {\n        std::sort(array.rbegin(), array.rend());\n\
    \    }\n    return array;\n}\nint main() {\n    auto candidate = sort_array;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({5})))\
    \ == (std::vector<long>({5})));\n    assert(candidate((std::vector<long>({2, 4,\
    \ 3, 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5})));\n    assert(candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5, 6}))) == (std::vector<long>({6, 5, 4, 3, 2, 1, 0})));\n    assert(candidate((std::vector<long>({2,\
    \ 1}))) == (std::vector<long>({1, 2})));\n    assert(candidate((std::vector<long>({15,\
    \ 42, 87, 32, 11, 0}))) == (std::vector<long>({0, 11, 15, 32, 42, 87})));\n  \
    \  assert(candidate((std::vector<long>({21, 14, 23, 11}))) == (std::vector<long>({23,\
    \ 21, 14, 11})));\n}\n"
  stdout: ''
  stderr: "tmpjbwovi3y: /tmp/tmpjbwovi3y.cpp:31: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5, 6}))) == (std::vector<long>({6, 5, 4, 3, 2, 1, 0}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// * sort_array([]) => []\n// * sort_array([5]) => [5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6])\
    \ => [6, 5, 4, 3, 2, 1, 0]\nstd::vector<long> sort_array(std::vector<long> array)\
    \ {\n    // write your code here\n    long long sum = 0;\n    for (long i = 0;\
    \ i < array.size(); i++) {\n        sum += array[i];\n    }\n    if (sum % 2 ==\
    \ 1) {\n        std::sort(array.begin(), array.end());\n    } else {\n       \
    \ std::sort(array.rbegin(), array.rend());\n    }\n    return array;\n}\nint main()\
    \ {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({5}))) ==\
    \ (std::vector<long>({5})));\n    assert(candidate((std::vector<long>({2, 4, 3,\
    \ 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5})));\n    assert(candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5, 6}))) == (std::vector<long>({6, 5, 4, 3, 2, 1, 0})));\n    assert(candidate((std::vector<long>({2,\
    \ 1}))) == (std::vector<long>({1, 2})));\n    assert(candidate((std::vector<long>({15,\
    \ 42, 87, 32, 11, 0}))) == (std::vector<long>({0, 11, 15, 32, 42, 87})));\n  \
    \  assert(candidate((std::vector<long>({21, 14, 23, 11}))) == (std::vector<long>({23,\
    \ 21, 14, 11})));\n}\n"
  stdout: ''
  stderr: "tmpfdnn9l1h: /tmp/tmpfdnn9l1h.cpp:31: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5, 6}))) == (std::vector<long>({6, 5, 4, 3, 2, 1, 0}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// * sort_array([]) => []\n// * sort_array([5]) => [5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6])\
    \ => [6, 5, 4, 3, 2, 1, 0]\nstd::vector<long> sort_array(std::vector<long> array)\
    \ {\n    // write your code here\n    long long sum = 0;\n    for (long i = 0;\
    \ i < array.size(); i++) {\n        sum += array[i];\n    }\n    if (sum % 2 ==\
    \ 1) {\n        std::sort(array.begin(), array.end());\n    } else {\n       \
    \ std::sort(array.rbegin(), array.rend());\n    }\n    return array;\n}\nint main()\
    \ {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({5}))) ==\
    \ (std::vector<long>({5})));\n    assert(candidate((std::vector<long>({2, 4, 3,\
    \ 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5})));\n    assert(candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5, 6}))) == (std::vector<long>({6, 5, 4, 3, 2, 1, 0})));\n    assert(candidate((std::vector<long>({2,\
    \ 1}))) == (std::vector<long>({1, 2})));\n    assert(candidate((std::vector<long>({15,\
    \ 42, 87, 32, 11, 0}))) == (std::vector<long>({0, 11, 15, 32, 42, 87})));\n  \
    \  assert(candidate((std::vector<long>({21, 14, 23, 11}))) == (std::vector<long>({23,\
    \ 21, 14, 11})));\n}\n"
  stdout: ''
  stderr: "tmpfsyzc4w3: /tmp/tmpfsyzc4w3.cpp:31: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5, 6}))) == (std::vector<long>({6, 5, 4, 3, 2, 1, 0}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// * sort_array([]) => []\n// * sort_array([5]) => [5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6])\
    \ => [6, 5, 4, 3, 2, 1, 0]\nstd::vector<long> sort_array(std::vector<long> array)\
    \ {\n    long long sum = 0;\n    for (long long i = 0; i < array.size(); i++)\
    \ {\n        sum += array[i];\n    }\n    if (sum % 2 == 0) {\n        std::sort(array.begin(),\
    \ array.end());\n    } else {\n        std::sort(array.rbegin(), array.rend());\n\
    \    }\n    return array;\n}\nint main() {\n    auto candidate = sort_array;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({5})))\
    \ == (std::vector<long>({5})));\n    assert(candidate((std::vector<long>({2, 4,\
    \ 3, 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5})));\n    assert(candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5, 6}))) == (std::vector<long>({6, 5, 4, 3, 2, 1, 0})));\n    assert(candidate((std::vector<long>({2,\
    \ 1}))) == (std::vector<long>({1, 2})));\n    assert(candidate((std::vector<long>({15,\
    \ 42, 87, 32, 11, 0}))) == (std::vector<long>({0, 11, 15, 32, 42, 87})));\n  \
    \  assert(candidate((std::vector<long>({21, 14, 23, 11}))) == (std::vector<long>({23,\
    \ 21, 14, 11})));\n}\n"
  stdout: ''
  stderr: "tmps9gky2g6: /tmp/tmps9gky2g6.cpp:29: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// * sort_array([]) => []\n// * sort_array([5]) => [5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6])\
    \ => [6, 5, 4, 3, 2, 1, 0]\nstd::vector<long> sort_array(std::vector<long> array)\
    \ {\n    long sum = 0;\n    for (long i : array) {\n        sum += i;\n    }\n\
    \    if (sum % 2 == 0) {\n        std::sort(array.begin(), array.end());\n   \
    \ } else {\n        std::sort(array.rbegin(), array.rend());\n    }\n    return\
    \ array;\n}\nint main() {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({5}))) ==\
    \ (std::vector<long>({5})));\n    assert(candidate((std::vector<long>({2, 4, 3,\
    \ 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5})));\n    assert(candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5, 6}))) == (std::vector<long>({6, 5, 4, 3, 2, 1, 0})));\n    assert(candidate((std::vector<long>({2,\
    \ 1}))) == (std::vector<long>({1, 2})));\n    assert(candidate((std::vector<long>({15,\
    \ 42, 87, 32, 11, 0}))) == (std::vector<long>({0, 11, 15, 32, 42, 87})));\n  \
    \  assert(candidate((std::vector<long>({21, 14, 23, 11}))) == (std::vector<long>({23,\
    \ 21, 14, 11})));\n}\n"
  stdout: ''
  stderr: "tmp6s5m8jn1: /tmp/tmp6s5m8jn1.cpp:29: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// * sort_array([]) => []\n// * sort_array([5]) => [5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6])\
    \ => [6, 5, 4, 3, 2, 1, 0]\nstd::vector<long> sort_array(std::vector<long> array)\
    \ {\n    // Your code here\n    long sum = 0;\n    for (long i : array) {\n  \
    \      sum += i;\n    }\n    if (sum % 2 == 0) {\n        std::sort(array.begin(),\
    \ array.end());\n    } else {\n        std::sort(array.rbegin(), array.rend());\n\
    \    }\n    return array;\n}\nint main() {\n    auto candidate = sort_array;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({5})))\
    \ == (std::vector<long>({5})));\n    assert(candidate((std::vector<long>({2, 4,\
    \ 3, 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5})));\n    assert(candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5, 6}))) == (std::vector<long>({6, 5, 4, 3, 2, 1, 0})));\n    assert(candidate((std::vector<long>({2,\
    \ 1}))) == (std::vector<long>({1, 2})));\n    assert(candidate((std::vector<long>({15,\
    \ 42, 87, 32, 11, 0}))) == (std::vector<long>({0, 11, 15, 32, 42, 87})));\n  \
    \  assert(candidate((std::vector<long>({21, 14, 23, 11}))) == (std::vector<long>({23,\
    \ 21, 14, 11})));\n}\n"
  stdout: ''
  stderr: "tmptowkveyk: /tmp/tmptowkveyk.cpp:30: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// * sort_array([]) => []\n// * sort_array([5]) => [5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6])\
    \ => [6, 5, 4, 3, 2, 1, 0]\nstd::vector<long> sort_array(std::vector<long> array)\
    \ {\n    long long sum = 0;\n    for (long i = 0; i < array.size(); i++) {\n \
    \       sum += array[i];\n    }\n    if (sum % 2 == 0) {\n        std::sort(array.begin(),\
    \ array.end());\n    } else {\n        std::sort(array.rbegin(), array.rend());\n\
    \    }\n    return array;\n}\nint main() {\n    auto candidate = sort_array;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({5})))\
    \ == (std::vector<long>({5})));\n    assert(candidate((std::vector<long>({2, 4,\
    \ 3, 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5})));\n    assert(candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5, 6}))) == (std::vector<long>({6, 5, 4, 3, 2, 1, 0})));\n    assert(candidate((std::vector<long>({2,\
    \ 1}))) == (std::vector<long>({1, 2})));\n    assert(candidate((std::vector<long>({15,\
    \ 42, 87, 32, 11, 0}))) == (std::vector<long>({0, 11, 15, 32, 42, 87})));\n  \
    \  assert(candidate((std::vector<long>({21, 14, 23, 11}))) == (std::vector<long>({23,\
    \ 21, 14, 11})));\n}\n"
  stdout: ''
  stderr: "tmp0t0lyj84: /tmp/tmp0t0lyj84.cpp:29: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// * sort_array([]) => []\n// * sort_array([5]) => [5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6])\
    \ => [6, 5, 4, 3, 2, 1, 0]\nstd::vector<long> sort_array(std::vector<long> array)\
    \ {\n    // write your code here\n    long long sum = 0;\n    for (long long i\
    \ = 0; i < array.size(); i++) {\n        sum += array[i];\n    }\n    if (sum\
    \ % 2 == 0) {\n        std::sort(array.begin(), array.end());\n    } else {\n\
    \        std::sort(array.rbegin(), array.rend());\n    }\n    return array;\n\
    }\nint main() {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({5}))) ==\
    \ (std::vector<long>({5})));\n    assert(candidate((std::vector<long>({2, 4, 3,\
    \ 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5})));\n    assert(candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5, 6}))) == (std::vector<long>({6, 5, 4, 3, 2, 1, 0})));\n    assert(candidate((std::vector<long>({2,\
    \ 1}))) == (std::vector<long>({1, 2})));\n    assert(candidate((std::vector<long>({15,\
    \ 42, 87, 32, 11, 0}))) == (std::vector<long>({0, 11, 15, 32, 42, 87})));\n  \
    \  assert(candidate((std::vector<long>({21, 14, 23, 11}))) == (std::vector<long>({23,\
    \ 21, 14, 11})));\n}\n"
  stdout: ''
  stderr: "tmp0kivkn7x: /tmp/tmp0kivkn7x.cpp:30: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// * sort_array([]) => []\n// * sort_array([5]) => [5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6])\
    \ => [6, 5, 4, 3, 2, 1, 0]\nstd::vector<long> sort_array(std::vector<long> array)\
    \ {\n    long long sum = 0;\n    for (long long i = 0; i < array.size(); i++)\
    \ {\n        sum += array[i];\n    }\n    if (sum % 2 == 0) {\n        std::sort(array.begin(),\
    \ array.end());\n    } else {\n        std::sort(array.rbegin(), array.rend());\n\
    \    }\n    return array;\n}\nint main() {\n    auto candidate = sort_array;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({5})))\
    \ == (std::vector<long>({5})));\n    assert(candidate((std::vector<long>({2, 4,\
    \ 3, 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5})));\n    assert(candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5, 6}))) == (std::vector<long>({6, 5, 4, 3, 2, 1, 0})));\n    assert(candidate((std::vector<long>({2,\
    \ 1}))) == (std::vector<long>({1, 2})));\n    assert(candidate((std::vector<long>({15,\
    \ 42, 87, 32, 11, 0}))) == (std::vector<long>({0, 11, 15, 32, 42, 87})));\n  \
    \  assert(candidate((std::vector<long>({21, 14, 23, 11}))) == (std::vector<long>({23,\
    \ 21, 14, 11})));\n}\n"
  stdout: ''
  stderr: "tmpoq2dy4n2: /tmp/tmpoq2dy4n2.cpp:29: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// * sort_array([]) => []\n// * sort_array([5]) => [5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6])\
    \ => [6, 5, 4, 3, 2, 1, 0]\nstd::vector<long> sort_array(std::vector<long> array)\
    \ {\n    long long sum = 0;\n    for (long long i : array) {\n        sum += i;\n\
    \    }\n    if (sum % 2 == 0) {\n        std::sort(array.begin(), array.end());\n\
    \    } else {\n        std::sort(array.rbegin(), array.rend());\n    }\n    return\
    \ array;\n}\nint main() {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({5}))) ==\
    \ (std::vector<long>({5})));\n    assert(candidate((std::vector<long>({2, 4, 3,\
    \ 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5})));\n    assert(candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5, 6}))) == (std::vector<long>({6, 5, 4, 3, 2, 1, 0})));\n    assert(candidate((std::vector<long>({2,\
    \ 1}))) == (std::vector<long>({1, 2})));\n    assert(candidate((std::vector<long>({15,\
    \ 42, 87, 32, 11, 0}))) == (std::vector<long>({0, 11, 15, 32, 42, 87})));\n  \
    \  assert(candidate((std::vector<long>({21, 14, 23, 11}))) == (std::vector<long>({23,\
    \ 21, 14, 11})));\n}\n"
  stdout: ''
  stderr: "tmpougs79tu: /tmp/tmpougs79tu.cpp:29: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// * sort_array([]) => []\n// * sort_array([5]) => [5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6])\
    \ => [6, 5, 4, 3, 2, 1, 0]\nstd::vector<long> sort_array(std::vector<long> array)\
    \ {\n    long long sum = 0;\n    for (long long i : array) {\n        sum += i;\n\
    \    }\n    if (sum % 2 == 0) {\n        std::sort(array.begin(), array.end());\n\
    \    } else {\n        std::sort(array.rbegin(), array.rend());\n    }\n    return\
    \ array;\n}\nint main() {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({5}))) ==\
    \ (std::vector<long>({5})));\n    assert(candidate((std::vector<long>({2, 4, 3,\
    \ 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5})));\n    assert(candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5, 6}))) == (std::vector<long>({6, 5, 4, 3, 2, 1, 0})));\n    assert(candidate((std::vector<long>({2,\
    \ 1}))) == (std::vector<long>({1, 2})));\n    assert(candidate((std::vector<long>({15,\
    \ 42, 87, 32, 11, 0}))) == (std::vector<long>({0, 11, 15, 32, 42, 87})));\n  \
    \  assert(candidate((std::vector<long>({21, 14, 23, 11}))) == (std::vector<long>({23,\
    \ 21, 14, 11})));\n}\n"
  stdout: ''
  stderr: "tmpac003mtf: /tmp/tmpac003mtf.cpp:29: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// * sort_array([]) => []\n// * sort_array([5]) => [5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6])\
    \ => [6, 5, 4, 3, 2, 1, 0]\nstd::vector<long> sort_array(std::vector<long> array)\
    \ {\n    // write your code here\n    long sum = 0;\n    for (long i = 0; i <\
    \ array.size(); i++) {\n        sum += array[i];\n    }\n    if (sum % 2 == 0)\
    \ {\n        std::sort(array.begin(), array.end());\n    } else {\n        std::sort(array.rbegin(),\
    \ array.rend());\n    }\n    return array;\n}\nint main() {\n    auto candidate\
    \ = sort_array;\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({5}))) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({2, 4, 3, 0, 1, 5}))) == (std::vector<long>({0,\
    \ 1, 2, 3, 4, 5})));\n    assert(candidate((std::vector<long>({2, 4, 3, 0, 1,\
    \ 5, 6}))) == (std::vector<long>({6, 5, 4, 3, 2, 1, 0})));\n    assert(candidate((std::vector<long>({2,\
    \ 1}))) == (std::vector<long>({1, 2})));\n    assert(candidate((std::vector<long>({15,\
    \ 42, 87, 32, 11, 0}))) == (std::vector<long>({0, 11, 15, 32, 42, 87})));\n  \
    \  assert(candidate((std::vector<long>({21, 14, 23, 11}))) == (std::vector<long>({23,\
    \ 21, 14, 11})));\n}\n"
  stdout: ''
  stderr: "tmphmxu00l2: /tmp/tmphmxu00l2.cpp:30: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// * sort_array([]) => []\n// * sort_array([5]) => [5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6])\
    \ => [6, 5, 4, 3, 2, 1, 0]\nstd::vector<long> sort_array(std::vector<long> array)\
    \ {\n    long long sum = 0;\n    for (long long i = 0; i < array.size(); i++)\
    \ {\n        sum += array[i];\n    }\n    if (sum % 2 == 1) {\n        std::sort(array.begin(),\
    \ array.end());\n    } else {\n        std::sort(array.rbegin(), array.rend());\n\
    \    }\n    return array;\n}\nint main() {\n    auto candidate = sort_array;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({5})))\
    \ == (std::vector<long>({5})));\n    assert(candidate((std::vector<long>({2, 4,\
    \ 3, 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5})));\n    assert(candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5, 6}))) == (std::vector<long>({6, 5, 4, 3, 2, 1, 0})));\n    assert(candidate((std::vector<long>({2,\
    \ 1}))) == (std::vector<long>({1, 2})));\n    assert(candidate((std::vector<long>({15,\
    \ 42, 87, 32, 11, 0}))) == (std::vector<long>({0, 11, 15, 32, 42, 87})));\n  \
    \  assert(candidate((std::vector<long>({21, 14, 23, 11}))) == (std::vector<long>({23,\
    \ 21, 14, 11})));\n}\n"
  stdout: ''
  stderr: "tmpxycem23i: /tmp/tmpxycem23i.cpp:30: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5, 6}))) == (std::vector<long>({6, 5, 4, 3, 2, 1, 0}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// * sort_array([]) => []\n// * sort_array([5]) => [5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6])\
    \ => [6, 5, 4, 3, 2, 1, 0]\nstd::vector<long> sort_array(std::vector<long> array)\
    \ {\n    // write your code here\n    long sum = 0;\n    for (long i : array)\
    \ {\n        sum += i;\n    }\n    if (sum % 2 == 0) {\n        std::sort(array.begin(),\
    \ array.end());\n    } else {\n        std::sort(array.rbegin(), array.rend());\n\
    \    }\n    return array;\n}\nint main() {\n    auto candidate = sort_array;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({5})))\
    \ == (std::vector<long>({5})));\n    assert(candidate((std::vector<long>({2, 4,\
    \ 3, 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5})));\n    assert(candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5, 6}))) == (std::vector<long>({6, 5, 4, 3, 2, 1, 0})));\n    assert(candidate((std::vector<long>({2,\
    \ 1}))) == (std::vector<long>({1, 2})));\n    assert(candidate((std::vector<long>({15,\
    \ 42, 87, 32, 11, 0}))) == (std::vector<long>({0, 11, 15, 32, 42, 87})));\n  \
    \  assert(candidate((std::vector<long>({21, 14, 23, 11}))) == (std::vector<long>({23,\
    \ 21, 14, 11})));\n}\n"
  stdout: ''
  stderr: "tmp6re_fbcq: /tmp/tmp6re_fbcq.cpp:30: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// * sort_array([]) => []\n// * sort_array([5]) => [5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6])\
    \ => [6, 5, 4, 3, 2, 1, 0]\nstd::vector<long> sort_array(std::vector<long> array)\
    \ {\n    // write your code here\n    long sum = 0;\n    for (long i = 0; i <\
    \ array.size(); i++) {\n        sum += array[i];\n    }\n    if (sum % 2 == 1)\
    \ {\n        std::sort(array.begin(), array.end());\n    } else {\n        std::sort(array.rbegin(),\
    \ array.rend());\n    }\n    return array;\n}\nint main() {\n    auto candidate\
    \ = sort_array;\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({5}))) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({2, 4, 3, 0, 1, 5}))) == (std::vector<long>({0,\
    \ 1, 2, 3, 4, 5})));\n    assert(candidate((std::vector<long>({2, 4, 3, 0, 1,\
    \ 5, 6}))) == (std::vector<long>({6, 5, 4, 3, 2, 1, 0})));\n    assert(candidate((std::vector<long>({2,\
    \ 1}))) == (std::vector<long>({1, 2})));\n    assert(candidate((std::vector<long>({15,\
    \ 42, 87, 32, 11, 0}))) == (std::vector<long>({0, 11, 15, 32, 42, 87})));\n  \
    \  assert(candidate((std::vector<long>({21, 14, 23, 11}))) == (std::vector<long>({23,\
    \ 21, 14, 11})));\n}\n"
  stdout: ''
  stderr: "tmpqarkr46m: /tmp/tmpqarkr46m.cpp:31: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5, 6}))) == (std::vector<long>({6, 5, 4, 3, 2, 1, 0}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// * sort_array([]) => []\n// * sort_array([5]) => [5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6])\
    \ => [6, 5, 4, 3, 2, 1, 0]\nstd::vector<long> sort_array(std::vector<long> array)\
    \ {\n    long long sum = 0;\n    for (long i = 0; i < array.size(); i++) {\n \
    \       sum += array[i];\n    }\n    if (sum % 2 == 0) {\n        std::sort(array.begin(),\
    \ array.end());\n    } else {\n        std::sort(array.rbegin(), array.rend());\n\
    \    }\n    return array;\n}\nint main() {\n    auto candidate = sort_array;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({5})))\
    \ == (std::vector<long>({5})));\n    assert(candidate((std::vector<long>({2, 4,\
    \ 3, 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5})));\n    assert(candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5, 6}))) == (std::vector<long>({6, 5, 4, 3, 2, 1, 0})));\n    assert(candidate((std::vector<long>({2,\
    \ 1}))) == (std::vector<long>({1, 2})));\n    assert(candidate((std::vector<long>({15,\
    \ 42, 87, 32, 11, 0}))) == (std::vector<long>({0, 11, 15, 32, 42, 87})));\n  \
    \  assert(candidate((std::vector<long>({21, 14, 23, 11}))) == (std::vector<long>({23,\
    \ 21, 14, 11})));\n}\n"
  stdout: ''
  stderr: "tmp_8_f24pn: /tmp/tmp_8_f24pn.cpp:29: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// * sort_array([]) => []\n// * sort_array([5]) => [5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6])\
    \ => [6, 5, 4, 3, 2, 1, 0]\nstd::vector<long> sort_array(std::vector<long> array)\
    \ {\n    // Your code here\n    long long sum = 0;\n    for (long i = 0; i < array.size();\
    \ i++) {\n        sum += array[i];\n    }\n    if (sum % 2 == 0) {\n        std::sort(array.begin(),\
    \ array.end());\n    } else {\n        std::sort(array.rbegin(), array.rend());\n\
    \    }\n    return array;\n}\nint main() {\n    auto candidate = sort_array;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({5})))\
    \ == (std::vector<long>({5})));\n    assert(candidate((std::vector<long>({2, 4,\
    \ 3, 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5})));\n    assert(candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5, 6}))) == (std::vector<long>({6, 5, 4, 3, 2, 1, 0})));\n    assert(candidate((std::vector<long>({2,\
    \ 1}))) == (std::vector<long>({1, 2})));\n    assert(candidate((std::vector<long>({15,\
    \ 42, 87, 32, 11, 0}))) == (std::vector<long>({0, 11, 15, 32, 42, 87})));\n  \
    \  assert(candidate((std::vector<long>({21, 14, 23, 11}))) == (std::vector<long>({23,\
    \ 21, 14, 11})));\n}\n"
  stdout: ''
  stderr: "tmpl956dl7h: /tmp/tmpl956dl7h.cpp:30: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// * sort_array([]) => []\n// * sort_array([5]) => [5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6])\
    \ => [6, 5, 4, 3, 2, 1, 0]\nstd::vector<long> sort_array(std::vector<long> array)\
    \ {\n    // Your code here\n    long long sum = 0;\n    for (long i = 0; i < array.size();\
    \ i++) {\n        sum += array[i];\n    }\n    if (sum % 2 == 0) {\n        std::sort(array.begin(),\
    \ array.end());\n    } else {\n        std::sort(array.rbegin(), array.rend());\n\
    \    }\n    return array;\n}\nint main() {\n    auto candidate = sort_array;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({5})))\
    \ == (std::vector<long>({5})));\n    assert(candidate((std::vector<long>({2, 4,\
    \ 3, 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5})));\n    assert(candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5, 6}))) == (std::vector<long>({6, 5, 4, 3, 2, 1, 0})));\n    assert(candidate((std::vector<long>({2,\
    \ 1}))) == (std::vector<long>({1, 2})));\n    assert(candidate((std::vector<long>({15,\
    \ 42, 87, 32, 11, 0}))) == (std::vector<long>({0, 11, 15, 32, 42, 87})));\n  \
    \  assert(candidate((std::vector<long>({21, 14, 23, 11}))) == (std::vector<long>({23,\
    \ 21, 14, 11})));\n}\n"
  stdout: ''
  stderr: "tmplv8dcsee: /tmp/tmplv8dcsee.cpp:30: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// * sort_array([]) => []\n// * sort_array([5]) => [5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6])\
    \ => [6, 5, 4, 3, 2, 1, 0]\nstd::vector<long> sort_array(std::vector<long> array)\
    \ {\n    // write your code here\n    long long sum = 0;\n    for (long i = 0;\
    \ i < array.size(); i++) {\n        sum += array[i];\n    }\n    if (sum % 2 ==\
    \ 0) {\n        std::sort(array.begin(), array.end());\n    } else {\n       \
    \ std::sort(array.rbegin(), array.rend());\n    }\n    return array;\n}\nint main()\
    \ {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({5}))) ==\
    \ (std::vector<long>({5})));\n    assert(candidate((std::vector<long>({2, 4, 3,\
    \ 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5})));\n    assert(candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5, 6}))) == (std::vector<long>({6, 5, 4, 3, 2, 1, 0})));\n    assert(candidate((std::vector<long>({2,\
    \ 1}))) == (std::vector<long>({1, 2})));\n    assert(candidate((std::vector<long>({15,\
    \ 42, 87, 32, 11, 0}))) == (std::vector<long>({0, 11, 15, 32, 42, 87})));\n  \
    \  assert(candidate((std::vector<long>({21, 14, 23, 11}))) == (std::vector<long>({23,\
    \ 21, 14, 11})));\n}\n"
  stdout: ''
  stderr: "tmpt1jei6fb: /tmp/tmpt1jei6fb.cpp:30: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// * sort_array([]) => []\n// * sort_array([5]) => [5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6])\
    \ => [6, 5, 4, 3, 2, 1, 0]\nstd::vector<long> sort_array(std::vector<long> array)\
    \ {\n    long long sum = 0;\n    for (long long i = 0; i < array.size(); i++)\
    \ {\n        sum += array[i];\n    }\n    if (sum % 2 == 0) {\n        std::sort(array.begin(),\
    \ array.end());\n    } else {\n        std::sort(array.rbegin(), array.rend());\n\
    \    }\n    return array;\n}\nint main() {\n    auto candidate = sort_array;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({5})))\
    \ == (std::vector<long>({5})));\n    assert(candidate((std::vector<long>({2, 4,\
    \ 3, 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5})));\n    assert(candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5, 6}))) == (std::vector<long>({6, 5, 4, 3, 2, 1, 0})));\n    assert(candidate((std::vector<long>({2,\
    \ 1}))) == (std::vector<long>({1, 2})));\n    assert(candidate((std::vector<long>({15,\
    \ 42, 87, 32, 11, 0}))) == (std::vector<long>({0, 11, 15, 32, 42, 87})));\n  \
    \  assert(candidate((std::vector<long>({21, 14, 23, 11}))) == (std::vector<long>({23,\
    \ 21, 14, 11})));\n}\n"
  stdout: ''
  stderr: "tmp8y5cvug1: /tmp/tmp8y5cvug1.cpp:29: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// * sort_array([]) => []\n// * sort_array([5]) => [5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6])\
    \ => [6, 5, 4, 3, 2, 1, 0]\nstd::vector<long> sort_array(std::vector<long> array)\
    \ {\n    long long sum = 0;\n    for (long long i = 0; i < array.size(); i++)\
    \ {\n        sum += array[i];\n    }\n    if (sum % 2 == 0) {\n        std::sort(array.begin(),\
    \ array.end());\n    } else {\n        std::sort(array.rbegin(), array.rend());\n\
    \    }\n    return array;\n}\nint main() {\n    auto candidate = sort_array;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({5})))\
    \ == (std::vector<long>({5})));\n    assert(candidate((std::vector<long>({2, 4,\
    \ 3, 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5})));\n    assert(candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5, 6}))) == (std::vector<long>({6, 5, 4, 3, 2, 1, 0})));\n    assert(candidate((std::vector<long>({2,\
    \ 1}))) == (std::vector<long>({1, 2})));\n    assert(candidate((std::vector<long>({15,\
    \ 42, 87, 32, 11, 0}))) == (std::vector<long>({0, 11, 15, 32, 42, 87})));\n  \
    \  assert(candidate((std::vector<long>({21, 14, 23, 11}))) == (std::vector<long>({23,\
    \ 21, 14, 11})));\n}\n"
  stdout: ''
  stderr: "tmp7vizq0pp: /tmp/tmp7vizq0pp.cpp:29: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// * sort_array([]) => []\n// * sort_array([5]) => [5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6])\
    \ => [6, 5, 4, 3, 2, 1, 0]\nstd::vector<long> sort_array(std::vector<long> array)\
    \ {\n    // Your code here\n    long sum = 0;\n    for (long i : array) {\n  \
    \      sum += i;\n    }\n    if (sum % 2 == 0) {\n        std::sort(array.begin(),\
    \ array.end());\n    } else {\n        std::sort(array.rbegin(), array.rend());\n\
    \    }\n    return array;\n}\nint main() {\n    auto candidate = sort_array;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({5})))\
    \ == (std::vector<long>({5})));\n    assert(candidate((std::vector<long>({2, 4,\
    \ 3, 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5})));\n    assert(candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5, 6}))) == (std::vector<long>({6, 5, 4, 3, 2, 1, 0})));\n    assert(candidate((std::vector<long>({2,\
    \ 1}))) == (std::vector<long>({1, 2})));\n    assert(candidate((std::vector<long>({15,\
    \ 42, 87, 32, 11, 0}))) == (std::vector<long>({0, 11, 15, 32, 42, 87})));\n  \
    \  assert(candidate((std::vector<long>({21, 14, 23, 11}))) == (std::vector<long>({23,\
    \ 21, 14, 11})));\n}\n"
  stdout: ''
  stderr: "tmp2k9mh62k: /tmp/tmp2k9mh62k.cpp:30: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// * sort_array([]) => []\n// * sort_array([5]) => [5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6])\
    \ => [6, 5, 4, 3, 2, 1, 0]\nstd::vector<long> sort_array(std::vector<long> array)\
    \ {\n    // write your code here\n    long long sum = 0;\n    for (long i = 0;\
    \ i < array.size(); i++) {\n        sum += array[i];\n    }\n    if (sum % 2 ==\
    \ 1) {\n        std::sort(array.begin(), array.end());\n    } else {\n       \
    \ std::sort(array.rbegin(), array.rend());\n    }\n    return array;\n}\nint main()\
    \ {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({5}))) ==\
    \ (std::vector<long>({5})));\n    assert(candidate((std::vector<long>({2, 4, 3,\
    \ 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5})));\n    assert(candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5, 6}))) == (std::vector<long>({6, 5, 4, 3, 2, 1, 0})));\n    assert(candidate((std::vector<long>({2,\
    \ 1}))) == (std::vector<long>({1, 2})));\n    assert(candidate((std::vector<long>({15,\
    \ 42, 87, 32, 11, 0}))) == (std::vector<long>({0, 11, 15, 32, 42, 87})));\n  \
    \  assert(candidate((std::vector<long>({21, 14, 23, 11}))) == (std::vector<long>({23,\
    \ 21, 14, 11})));\n}\n"
  stdout: ''
  stderr: "tmp1qq3mq0i: /tmp/tmp1qq3mq0i.cpp:31: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5, 6}))) == (std::vector<long>({6, 5, 4, 3, 2, 1, 0}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// * sort_array([]) => []\n// * sort_array([5]) => [5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6])\
    \ => [6, 5, 4, 3, 2, 1, 0]\nstd::vector<long> sort_array(std::vector<long> array)\
    \ {\n    long long sum = 0;\n    for (auto i : array) {\n        sum += i;\n \
    \   }\n    if (sum % 2 == 0) {\n        std::sort(array.begin(), array.end());\n\
    \    } else {\n        std::sort(array.rbegin(), array.rend());\n    }\n    return\
    \ array;\n}\nint main() {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({5}))) ==\
    \ (std::vector<long>({5})));\n    assert(candidate((std::vector<long>({2, 4, 3,\
    \ 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5})));\n    assert(candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5, 6}))) == (std::vector<long>({6, 5, 4, 3, 2, 1, 0})));\n    assert(candidate((std::vector<long>({2,\
    \ 1}))) == (std::vector<long>({1, 2})));\n    assert(candidate((std::vector<long>({15,\
    \ 42, 87, 32, 11, 0}))) == (std::vector<long>({0, 11, 15, 32, 42, 87})));\n  \
    \  assert(candidate((std::vector<long>({21, 14, 23, 11}))) == (std::vector<long>({23,\
    \ 21, 14, 11})));\n}\n"
  stdout: ''
  stderr: "tmpld86hv5q: /tmp/tmpld86hv5q.cpp:29: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// * sort_array([]) => []\n// * sort_array([5]) => [5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6])\
    \ => [6, 5, 4, 3, 2, 1, 0]\nstd::vector<long> sort_array(std::vector<long> array)\
    \ {\n    // write your code here\n    long long sum = 0;\n    for (long i = 0;\
    \ i < array.size(); i++) {\n        sum += array[i];\n    }\n    if (sum % 2 ==\
    \ 0) {\n        std::sort(array.begin(), array.end());\n    } else {\n       \
    \ std::sort(array.rbegin(), array.rend());\n    }\n    return array;\n}\nint main()\
    \ {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({5}))) ==\
    \ (std::vector<long>({5})));\n    assert(candidate((std::vector<long>({2, 4, 3,\
    \ 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5})));\n    assert(candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5, 6}))) == (std::vector<long>({6, 5, 4, 3, 2, 1, 0})));\n    assert(candidate((std::vector<long>({2,\
    \ 1}))) == (std::vector<long>({1, 2})));\n    assert(candidate((std::vector<long>({15,\
    \ 42, 87, 32, 11, 0}))) == (std::vector<long>({0, 11, 15, 32, 42, 87})));\n  \
    \  assert(candidate((std::vector<long>({21, 14, 23, 11}))) == (std::vector<long>({23,\
    \ 21, 14, 11})));\n}\n"
  stdout: ''
  stderr: "tmpgbu3y5u6: /tmp/tmpgbu3y5u6.cpp:30: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// * sort_array([]) => []\n// * sort_array([5]) => [5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6])\
    \ => [6, 5, 4, 3, 2, 1, 0]\nstd::vector<long> sort_array(std::vector<long> array)\
    \ {\n    // write your code here\n    long sum = 0;\n    for (long i : array)\
    \ {\n        sum += i;\n    }\n    if (sum % 2 == 0) {\n        std::sort(array.begin(),\
    \ array.end());\n    } else {\n        std::sort(array.rbegin(), array.rend());\n\
    \    }\n    return array;\n}\nint main() {\n    auto candidate = sort_array;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({5})))\
    \ == (std::vector<long>({5})));\n    assert(candidate((std::vector<long>({2, 4,\
    \ 3, 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5})));\n    assert(candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5, 6}))) == (std::vector<long>({6, 5, 4, 3, 2, 1, 0})));\n    assert(candidate((std::vector<long>({2,\
    \ 1}))) == (std::vector<long>({1, 2})));\n    assert(candidate((std::vector<long>({15,\
    \ 42, 87, 32, 11, 0}))) == (std::vector<long>({0, 11, 15, 32, 42, 87})));\n  \
    \  assert(candidate((std::vector<long>({21, 14, 23, 11}))) == (std::vector<long>({23,\
    \ 21, 14, 11})));\n}\n"
  stdout: ''
  stderr: "tmpknsospz9: /tmp/tmpknsospz9.cpp:30: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// * sort_array([]) => []\n// * sort_array([5]) => [5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6])\
    \ => [6, 5, 4, 3, 2, 1, 0]\nstd::vector<long> sort_array(std::vector<long> array)\
    \ {\n    // Your code here\n    long sum = 0;\n    for (long i : array) {\n  \
    \      sum += i;\n    }\n    if (sum % 2 == 0) {\n        std::sort(array.begin(),\
    \ array.end());\n    } else {\n        std::sort(array.rbegin(), array.rend());\n\
    \    }\n    return array;\n}\nint main() {\n    auto candidate = sort_array;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({5})))\
    \ == (std::vector<long>({5})));\n    assert(candidate((std::vector<long>({2, 4,\
    \ 3, 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5})));\n    assert(candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5, 6}))) == (std::vector<long>({6, 5, 4, 3, 2, 1, 0})));\n    assert(candidate((std::vector<long>({2,\
    \ 1}))) == (std::vector<long>({1, 2})));\n    assert(candidate((std::vector<long>({15,\
    \ 42, 87, 32, 11, 0}))) == (std::vector<long>({0, 11, 15, 32, 42, 87})));\n  \
    \  assert(candidate((std::vector<long>({21, 14, 23, 11}))) == (std::vector<long>({23,\
    \ 21, 14, 11})));\n}\n"
  stdout: ''
  stderr: "tmp5nma32_1: /tmp/tmp5nma32_1.cpp:30: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// * sort_array([]) => []\n// * sort_array([5]) => [5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6])\
    \ => [6, 5, 4, 3, 2, 1, 0]\nstd::vector<long> sort_array(std::vector<long> array)\
    \ {\n    // write your code here\n    long sum = 0;\n    long temp = 0;\n    long\
    \ sum1 = 0;\n    long temp1 = 0;\n    long sum2 = 0;\n    long temp2 = 0;\n  \
    \  long sum3 = 0;\n    long temp3 = 0;\n    long sum4 = 0;\n    long temp4 = 0;\n\
    \    long sum5 = 0;\n    long temp5 = 0;\n    long sum6 = 0;\n    long temp6 =\
    \ 0;\n    long sum7 = 0;\n    long temp7 = 0;\n    long sum8 = 0;\n    long temp8\
    \ = 0;\n    long sum9 = 0;\n    long temp9 = 0;\n    long sum10 = 0;\n    long\
    \ temp10 = 0;\n    long sum11 = 0;\n    long temp11 = 0;\n    long sum12 = 0;\n\
    \    long temp12 = 0;\n    long sum13 = 0;\n    long temp13 = 0;\n    long sum14\
    \ = 0;\n    long temp14 = 0;\n    long sum15 = 0;\n    long temp15 = 0;\n    long\
    \ sum16 = 0;\n    long temp16 = 0;\n    long sum17 = 0;\n    long temp17 = 0;\n\
    \    long sum18 = 0;\n    long temp18 = 0;\n    long sum19 = 0;\n    long temp19\
    \ = 0;\n    long sum20 = 0;\n    long temp20 = 0;\n    long sum21 = 0;\n    long\
    \ temp21 = 0;\n    long sum22 = 0;\n    long temp22 = 0;\n    long sum23 = 0;\n\
    \    long temp23 = 0;\n    long sum24 = 0;\n    long temp24 = 0;\n    long sum25\
    \ = 0;\n    long temp25 = 0;\n    long sum26 = 0;\n    long temp26 = 0;\n    long\
    \ sum27 = 0;\n    long temp27 = 0;\n    long sum28 = 0;\n    long temp28 = 0;\n\
    \    long sum29 = 0;\n    long temp29 = 0;\n    long sum30 = 0;\n    long temp30\
    \ = 0;\n    long sum31 = 0;\n    long temp31 = 0;\n    long sum32 = 0;\n    long\
    \ temp32 = 0;\n    long sum33 = 0;\n    long temp33 = 0;\n    long sum34 = 0;\n\
    \    long temp34 = 0;\n    long sum35 = 0;\n    long temp35 = 0;\n    long sum36\
    \ = 0;\n    long temp36 = 0;\n    long sum37 = 0;\n    long temp37 = 0;\n    long\
    \ sum38 = 0;\n    long temp38 = 0;\n    long sum39 = 0;\n    long temp39 = 0;\n\
    \    long sum40 = 0;\n    long temp40 = 0;\n    long sum41 = 0;\n    long temp41\
    \ = 0;\n    long sum42 = 0;\n    long temp42 = 0;\n    long sum\n}\nint main()\
    \ {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({5}))) ==\
    \ (std::vector<long>({5})));\n    assert(candidate((std::vector<long>({2, 4, 3,\
    \ 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5})));\n    assert(candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5, 6}))) == (std::vector<long>({6, 5, 4, 3, 2, 1, 0})));\n    assert(candidate((std::vector<long>({2,\
    \ 1}))) == (std::vector<long>({1, 2})));\n    assert(candidate((std::vector<long>({15,\
    \ 42, 87, 32, 11, 0}))) == (std::vector<long>({0, 11, 15, 32, 42, 87})));\n  \
    \  assert(candidate((std::vector<long>({21, 14, 23, 11}))) == (std::vector<long>({23,\
    \ 21, 14, 11})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpyvdmgjc7.cpp: In function \u2018std::vector<long int> sort_array(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpyvdmgjc7.cpp:102:1: error: expected initializer before\
    \ \u2018}\u2019 token\n  102 | }\n      | ^\n/tmp/tmpyvdmgjc7.cpp:102:1: warning:\
    \ no return statement in function returning non-void [-Wreturn-type]\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// * sort_array([]) => []\n// * sort_array([5]) => [5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6])\
    \ => [6, 5, 4, 3, 2, 1, 0]\nstd::vector<long> sort_array(std::vector<long> array)\
    \ {\n    long long sum = 0;\n    for (long long i : array) {\n        sum += i;\n\
    \    }\n    if (sum % 2 == 0) {\n        std::sort(array.begin(), array.end());\n\
    \        return array;\n    } else {\n        std::sort(array.rbegin(), array.rend());\n\
    \        return array;\n    }\n}\nint main() {\n    auto candidate = sort_array;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({5})))\
    \ == (std::vector<long>({5})));\n    assert(candidate((std::vector<long>({2, 4,\
    \ 3, 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5})));\n    assert(candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5, 6}))) == (std::vector<long>({6, 5, 4, 3, 2, 1, 0})));\n    assert(candidate((std::vector<long>({2,\
    \ 1}))) == (std::vector<long>({1, 2})));\n    assert(candidate((std::vector<long>({15,\
    \ 42, 87, 32, 11, 0}))) == (std::vector<long>({0, 11, 15, 32, 42, 87})));\n  \
    \  assert(candidate((std::vector<long>({21, 14, 23, 11}))) == (std::vector<long>({23,\
    \ 21, 14, 11})));\n}\n"
  stdout: ''
  stderr: "tmpkjun_fw7: /tmp/tmpkjun_fw7.cpp:30: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// * sort_array([]) => []\n// * sort_array([5]) => [5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6])\
    \ => [6, 5, 4, 3, 2, 1, 0]\nstd::vector<long> sort_array(std::vector<long> array)\
    \ {\n    long long sum = 0;\n    for (long long i = 0; i < array.size(); i++)\
    \ {\n        sum += array[i];\n    }\n    if (sum % 2 == 0) {\n        std::sort(array.begin(),\
    \ array.end());\n    } else {\n        std::sort(array.rbegin(), array.rend());\n\
    \    }\n    return array;\n}\nint main() {\n    auto candidate = sort_array;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({5})))\
    \ == (std::vector<long>({5})));\n    assert(candidate((std::vector<long>({2, 4,\
    \ 3, 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5})));\n    assert(candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5, 6}))) == (std::vector<long>({6, 5, 4, 3, 2, 1, 0})));\n    assert(candidate((std::vector<long>({2,\
    \ 1}))) == (std::vector<long>({1, 2})));\n    assert(candidate((std::vector<long>({15,\
    \ 42, 87, 32, 11, 0}))) == (std::vector<long>({0, 11, 15, 32, 42, 87})));\n  \
    \  assert(candidate((std::vector<long>({21, 14, 23, 11}))) == (std::vector<long>({23,\
    \ 21, 14, 11})));\n}\n"
  stdout: ''
  stderr: "tmpfpe231f7: /tmp/tmpfpe231f7.cpp:29: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// * sort_array([]) => []\n// * sort_array([5]) => [5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6])\
    \ => [6, 5, 4, 3, 2, 1, 0]\nstd::vector<long> sort_array(std::vector<long> array)\
    \ {\n    // write your code here\n    long long sum = 0;\n    for (long i = 0;\
    \ i < array.size(); i++) {\n        sum += array[i];\n    }\n    if (sum % 2 ==\
    \ 0) {\n        std::sort(array.begin(), array.end());\n    } else {\n       \
    \ std::sort(array.rbegin(), array.rend());\n    }\n    return array;\n}\nint main()\
    \ {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({5}))) ==\
    \ (std::vector<long>({5})));\n    assert(candidate((std::vector<long>({2, 4, 3,\
    \ 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5})));\n    assert(candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5, 6}))) == (std::vector<long>({6, 5, 4, 3, 2, 1, 0})));\n    assert(candidate((std::vector<long>({2,\
    \ 1}))) == (std::vector<long>({1, 2})));\n    assert(candidate((std::vector<long>({15,\
    \ 42, 87, 32, 11, 0}))) == (std::vector<long>({0, 11, 15, 32, 42, 87})));\n  \
    \  assert(candidate((std::vector<long>({21, 14, 23, 11}))) == (std::vector<long>({23,\
    \ 21, 14, 11})));\n}\n"
  stdout: ''
  stderr: "tmpu_68qywo: /tmp/tmpu_68qywo.cpp:30: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// * sort_array([]) => []\n// * sort_array([5]) => [5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6])\
    \ => [6, 5, 4, 3, 2, 1, 0]\nstd::vector<long> sort_array(std::vector<long> array)\
    \ {\n    // write your code here\n    long sum = 0;\n    long temp = 0;\n    long\
    \ temp2 = 0;\n    long temp3 = 0;\n    long temp4 = 0;\n    long temp5 = 0;\n\
    \    long temp6 = 0;\n    long temp7 = 0;\n    long temp8 = 0;\n    long temp9\
    \ = 0;\n    long temp10 = 0;\n    long temp11 = 0;\n    long temp12 = 0;\n   \
    \ long temp13 = 0;\n    long temp14 = 0;\n    long temp15 = 0;\n    long temp16\
    \ = 0;\n    long temp17 = 0;\n    long temp18 = 0;\n    long temp19 = 0;\n   \
    \ long temp20 = 0;\n    long temp21 = 0;\n    long temp22 = 0;\n    long temp23\
    \ = 0;\n    long temp24 = 0;\n    long temp25 = 0;\n    long temp26 = 0;\n   \
    \ long temp27 = 0;\n    long temp28 = 0;\n    long temp29 = 0;\n    long temp30\
    \ = 0;\n    long temp31 = 0;\n    long temp32 = 0;\n    long temp33 = 0;\n   \
    \ long temp34 = 0;\n    long temp35 = 0;\n    long temp36 = 0;\n    long temp37\
    \ = 0;\n    long temp38 = 0;\n    long temp39 = 0;\n    long temp40 = 0;\n   \
    \ long temp41 = 0;\n    long temp42 = 0;\n    long temp43 = 0;\n    long temp44\
    \ = 0;\n    long temp45 = 0;\n    long temp46 = 0;\n    long temp47 = 0;\n   \
    \ long temp48 = 0;\n    long temp49 = 0;\n    long temp50 = 0;\n    long temp51\
    \ = 0;\n    long temp52 = 0;\n    long temp53 = 0;\n    long temp54 = 0;\n   \
    \ long temp55 = 0;\n    long temp56 = 0;\n    long temp57 = 0;\n    long temp58\
    \ = 0;\n    long temp59 = 0;\n    long temp60 = 0;\n    long temp61 = 0;\n   \
    \ long temp62 = 0;\n    long temp63 = 0;\n    long temp64 = 0;\n    long temp65\
    \ = 0;\n    long temp66 = 0;\n    long temp67 = 0;\n    long temp68 = 0;\n   \
    \ long temp69 = 0;\n    long temp70 = 0;\n    long temp71 = 0;\n    long temp72\
    \ = 0;\n    long temp73 = 0;\n    long temp74 = 0;\n    long temp75 = 0;\n   \
    \ long temp76 = 0;\n    long temp77 = 0;\n    long temp78 = 0;\n    long temp79\
    \ = 0;\n    long temp80 = 0;\n    long temp81 = 0;\n    long temp82 = 0;\n   \
    \ long temp83 = 0;\n    long temp84 = 0;\n    long temp\n}\nint main() {\n   \
    \ auto candidate = sort_array;\n    assert(candidate((std::vector<long>())) ==\
    \ (std::vector<long>()));\n    assert(candidate((std::vector<long>({5}))) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({2, 4, 3, 0, 1, 5}))) == (std::vector<long>({0,\
    \ 1, 2, 3, 4, 5})));\n    assert(candidate((std::vector<long>({2, 4, 3, 0, 1,\
    \ 5, 6}))) == (std::vector<long>({6, 5, 4, 3, 2, 1, 0})));\n    assert(candidate((std::vector<long>({2,\
    \ 1}))) == (std::vector<long>({1, 2})));\n    assert(candidate((std::vector<long>({15,\
    \ 42, 87, 32, 11, 0}))) == (std::vector<long>({0, 11, 15, 32, 42, 87})));\n  \
    \  assert(candidate((std::vector<long>({21, 14, 23, 11}))) == (std::vector<long>({23,\
    \ 21, 14, 11})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpytalmmkr.cpp: In function \u2018std::vector<long int> sort_array(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpytalmmkr.cpp:101:1: error: expected initializer before\
    \ \u2018}\u2019 token\n  101 | }\n      | ^\n/tmp/tmpytalmmkr.cpp:101:1: warning:\
    \ no return statement in function returning non-void [-Wreturn-type]\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// * sort_array([]) => []\n// * sort_array([5]) => [5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6])\
    \ => [6, 5, 4, 3, 2, 1, 0]\nstd::vector<long> sort_array(std::vector<long> array)\
    \ {\n    long sum = 0;\n    for (long i : array) {\n        sum += i;\n    }\n\
    \    if (sum % 2 == 0) {\n        std::sort(array.begin(), array.end());\n   \
    \ } else {\n        std::sort(array.rbegin(), array.rend());\n    }\n    return\
    \ array;\n}\nint main() {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({5}))) ==\
    \ (std::vector<long>({5})));\n    assert(candidate((std::vector<long>({2, 4, 3,\
    \ 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5})));\n    assert(candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5, 6}))) == (std::vector<long>({6, 5, 4, 3, 2, 1, 0})));\n    assert(candidate((std::vector<long>({2,\
    \ 1}))) == (std::vector<long>({1, 2})));\n    assert(candidate((std::vector<long>({15,\
    \ 42, 87, 32, 11, 0}))) == (std::vector<long>({0, 11, 15, 32, 42, 87})));\n  \
    \  assert(candidate((std::vector<long>({21, 14, 23, 11}))) == (std::vector<long>({23,\
    \ 21, 14, 11})));\n}\n"
  stdout: ''
  stderr: "tmps6n2p0bg: /tmp/tmps6n2p0bg.cpp:29: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// * sort_array([]) => []\n// * sort_array([5]) => [5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6])\
    \ => [6, 5, 4, 3, 2, 1, 0]\nstd::vector<long> sort_array(std::vector<long> array)\
    \ {\n    // write your code here\n    long long sum = 0;\n    for (long i = 0;\
    \ i < array.size(); i++) {\n        sum += array[i];\n    }\n    if (sum % 2 ==\
    \ 0) {\n        std::sort(array.begin(), array.end());\n    } else {\n       \
    \ std::sort(array.rbegin(), array.rend());\n    }\n    return array;\n}\nint main()\
    \ {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({5}))) ==\
    \ (std::vector<long>({5})));\n    assert(candidate((std::vector<long>({2, 4, 3,\
    \ 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5})));\n    assert(candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5, 6}))) == (std::vector<long>({6, 5, 4, 3, 2, 1, 0})));\n    assert(candidate((std::vector<long>({2,\
    \ 1}))) == (std::vector<long>({1, 2})));\n    assert(candidate((std::vector<long>({15,\
    \ 42, 87, 32, 11, 0}))) == (std::vector<long>({0, 11, 15, 32, 42, 87})));\n  \
    \  assert(candidate((std::vector<long>({21, 14, 23, 11}))) == (std::vector<long>({23,\
    \ 21, 14, 11})));\n}\n"
  stdout: ''
  stderr: "tmpklxhfhc5: /tmp/tmpklxhfhc5.cpp:30: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// * sort_array([]) => []\n// * sort_array([5]) => [5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6])\
    \ => [6, 5, 4, 3, 2, 1, 0]\nstd::vector<long> sort_array(std::vector<long> array)\
    \ {\n    // write your code here\n    long long sum = 0;\n    for (long i = 0;\
    \ i < array.size(); i++) {\n        sum += array[i];\n    }\n    if (sum % 2 ==\
    \ 0) {\n        std::sort(array.begin(), array.end());\n    } else {\n       \
    \ std::sort(array.rbegin(), array.rend());\n    }\n    return array;\n}\nint main()\
    \ {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({5}))) ==\
    \ (std::vector<long>({5})));\n    assert(candidate((std::vector<long>({2, 4, 3,\
    \ 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5})));\n    assert(candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5, 6}))) == (std::vector<long>({6, 5, 4, 3, 2, 1, 0})));\n    assert(candidate((std::vector<long>({2,\
    \ 1}))) == (std::vector<long>({1, 2})));\n    assert(candidate((std::vector<long>({15,\
    \ 42, 87, 32, 11, 0}))) == (std::vector<long>({0, 11, 15, 32, 42, 87})));\n  \
    \  assert(candidate((std::vector<long>({21, 14, 23, 11}))) == (std::vector<long>({23,\
    \ 21, 14, 11})));\n}\n"
  stdout: ''
  stderr: "tmp90w8t2k3: /tmp/tmp90w8t2k3.cpp:30: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// * sort_array([]) => []\n// * sort_array([5]) => [5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6])\
    \ => [6, 5, 4, 3, 2, 1, 0]\nstd::vector<long> sort_array(std::vector<long> array)\
    \ {\n    // Your code here\n    long sum = 0;\n    for (long i : array) {\n  \
    \      sum += i;\n    }\n    if (sum % 2 == 0) {\n        std::sort(array.begin(),\
    \ array.end());\n    } else {\n        std::sort(array.rbegin(), array.rend());\n\
    \    }\n    return array;\n}\nint main() {\n    auto candidate = sort_array;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({5})))\
    \ == (std::vector<long>({5})));\n    assert(candidate((std::vector<long>({2, 4,\
    \ 3, 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5})));\n    assert(candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5, 6}))) == (std::vector<long>({6, 5, 4, 3, 2, 1, 0})));\n    assert(candidate((std::vector<long>({2,\
    \ 1}))) == (std::vector<long>({1, 2})));\n    assert(candidate((std::vector<long>({15,\
    \ 42, 87, 32, 11, 0}))) == (std::vector<long>({0, 11, 15, 32, 42, 87})));\n  \
    \  assert(candidate((std::vector<long>({21, 14, 23, 11}))) == (std::vector<long>({23,\
    \ 21, 14, 11})));\n}\n"
  stdout: ''
  stderr: "tmp4djp7f17: /tmp/tmp4djp7f17.cpp:30: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// * sort_array([]) => []\n// * sort_array([5]) => [5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6])\
    \ => [6, 5, 4, 3, 2, 1, 0]\nstd::vector<long> sort_array(std::vector<long> array)\
    \ {\n    // write your code here\n    long sum = 0;\n    for (long i = 0; i <\
    \ array.size(); i++) {\n        sum += array[i];\n    }\n    if (sum % 2 == 0)\
    \ {\n        std::sort(array.begin(), array.end());\n    } else {\n        std::sort(array.rbegin(),\
    \ array.rend());\n    }\n    return array;\n}\nint main() {\n    auto candidate\
    \ = sort_array;\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({5}))) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({2, 4, 3, 0, 1, 5}))) == (std::vector<long>({0,\
    \ 1, 2, 3, 4, 5})));\n    assert(candidate((std::vector<long>({2, 4, 3, 0, 1,\
    \ 5, 6}))) == (std::vector<long>({6, 5, 4, 3, 2, 1, 0})));\n    assert(candidate((std::vector<long>({2,\
    \ 1}))) == (std::vector<long>({1, 2})));\n    assert(candidate((std::vector<long>({15,\
    \ 42, 87, 32, 11, 0}))) == (std::vector<long>({0, 11, 15, 32, 42, 87})));\n  \
    \  assert(candidate((std::vector<long>({21, 14, 23, 11}))) == (std::vector<long>({23,\
    \ 21, 14, 11})));\n}\n"
  stdout: ''
  stderr: "tmp1xqlo58y: /tmp/tmp1xqlo58y.cpp:30: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// * sort_array([]) => []\n// * sort_array([5]) => [5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6])\
    \ => [6, 5, 4, 3, 2, 1, 0]\nstd::vector<long> sort_array(std::vector<long> array)\
    \ {\n    // Your code here\n    long long sum = 0;\n    for (long i = 0; i < array.size();\
    \ i++) {\n        sum += array[i];\n    }\n    if (sum % 2 == 0) {\n        std::sort(array.begin(),\
    \ array.end());\n    } else {\n        std::sort(array.rbegin(), array.rend());\n\
    \    }\n    return array;\n}\nint main() {\n    auto candidate = sort_array;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({5})))\
    \ == (std::vector<long>({5})));\n    assert(candidate((std::vector<long>({2, 4,\
    \ 3, 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5})));\n    assert(candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5, 6}))) == (std::vector<long>({6, 5, 4, 3, 2, 1, 0})));\n    assert(candidate((std::vector<long>({2,\
    \ 1}))) == (std::vector<long>({1, 2})));\n    assert(candidate((std::vector<long>({15,\
    \ 42, 87, 32, 11, 0}))) == (std::vector<long>({0, 11, 15, 32, 42, 87})));\n  \
    \  assert(candidate((std::vector<long>({21, 14, 23, 11}))) == (std::vector<long>({23,\
    \ 21, 14, 11})));\n}\n"
  stdout: ''
  stderr: "tmp1685hcti: /tmp/tmp1685hcti.cpp:30: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// * sort_array([]) => []\n// * sort_array([5]) => [5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6])\
    \ => [6, 5, 4, 3, 2, 1, 0]\nstd::vector<long> sort_array(std::vector<long> array)\
    \ {\n    // write your code here\n    long sum = 0;\n    for (long i : array)\
    \ {\n        sum += i;\n    }\n    if (sum % 2 == 0) {\n        std::sort(array.begin(),\
    \ array.end());\n    } else {\n        std::sort(array.rbegin(), array.rend());\n\
    \    }\n    return array;\n}\nint main() {\n    auto candidate = sort_array;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({5})))\
    \ == (std::vector<long>({5})));\n    assert(candidate((std::vector<long>({2, 4,\
    \ 3, 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5})));\n    assert(candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5, 6}))) == (std::vector<long>({6, 5, 4, 3, 2, 1, 0})));\n    assert(candidate((std::vector<long>({2,\
    \ 1}))) == (std::vector<long>({1, 2})));\n    assert(candidate((std::vector<long>({15,\
    \ 42, 87, 32, 11, 0}))) == (std::vector<long>({0, 11, 15, 32, 42, 87})));\n  \
    \  assert(candidate((std::vector<long>({21, 14, 23, 11}))) == (std::vector<long>({23,\
    \ 21, 14, 11})));\n}\n"
  stdout: ''
  stderr: "tmpifa_modx: /tmp/tmpifa_modx.cpp:30: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// * sort_array([]) => []\n// * sort_array([5]) => [5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6])\
    \ => [6, 5, 4, 3, 2, 1, 0]\nstd::vector<long> sort_array(std::vector<long> array)\
    \ {\n    long long sum = 0;\n    for (long long i : array) {\n        sum += i;\n\
    \    }\n    if (sum % 2 == 1) {\n        std::sort(array.begin(), array.end());\n\
    \    } else {\n        std::sort(array.rbegin(), array.rend());\n    }\n    return\
    \ array;\n}\nint main() {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({5}))) ==\
    \ (std::vector<long>({5})));\n    assert(candidate((std::vector<long>({2, 4, 3,\
    \ 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5})));\n    assert(candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5, 6}))) == (std::vector<long>({6, 5, 4, 3, 2, 1, 0})));\n    assert(candidate((std::vector<long>({2,\
    \ 1}))) == (std::vector<long>({1, 2})));\n    assert(candidate((std::vector<long>({15,\
    \ 42, 87, 32, 11, 0}))) == (std::vector<long>({0, 11, 15, 32, 42, 87})));\n  \
    \  assert(candidate((std::vector<long>({21, 14, 23, 11}))) == (std::vector<long>({23,\
    \ 21, 14, 11})));\n}\n"
  stdout: ''
  stderr: "tmpghq2lgaw: /tmp/tmpghq2lgaw.cpp:30: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5, 6}))) == (std::vector<long>({6, 5, 4, 3, 2, 1, 0}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// * sort_array([]) => []\n// * sort_array([5]) => [5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6])\
    \ => [6, 5, 4, 3, 2, 1, 0]\nstd::vector<long> sort_array(std::vector<long> array)\
    \ {\n    long long sum = 0;\n    for (long long i = 0; i < array.size(); i++)\
    \ {\n        sum += array[i];\n    }\n    if (sum % 2 == 0) {\n        std::sort(array.begin(),\
    \ array.end());\n    } else {\n        std::sort(array.rbegin(), array.rend());\n\
    \    }\n    return array;\n}\nint main() {\n    auto candidate = sort_array;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({5})))\
    \ == (std::vector<long>({5})));\n    assert(candidate((std::vector<long>({2, 4,\
    \ 3, 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5})));\n    assert(candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5, 6}))) == (std::vector<long>({6, 5, 4, 3, 2, 1, 0})));\n    assert(candidate((std::vector<long>({2,\
    \ 1}))) == (std::vector<long>({1, 2})));\n    assert(candidate((std::vector<long>({15,\
    \ 42, 87, 32, 11, 0}))) == (std::vector<long>({0, 11, 15, 32, 42, 87})));\n  \
    \  assert(candidate((std::vector<long>({21, 14, 23, 11}))) == (std::vector<long>({23,\
    \ 21, 14, 11})));\n}\n"
  stdout: ''
  stderr: "tmpkf13xghr: /tmp/tmpkf13xghr.cpp:29: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// * sort_array([]) => []\n// * sort_array([5]) => [5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6])\
    \ => [6, 5, 4, 3, 2, 1, 0]\nstd::vector<long> sort_array(std::vector<long> array)\
    \ {\n    long long sum = 0;\n    for (long long i = 0; i < array.size(); i++)\
    \ {\n        sum += array[i];\n    }\n    if (sum % 2 == 0) {\n        std::sort(array.begin(),\
    \ array.end());\n    } else {\n        std::sort(array.rbegin(), array.rend());\n\
    \    }\n    return array;\n}\nint main() {\n    auto candidate = sort_array;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({5})))\
    \ == (std::vector<long>({5})));\n    assert(candidate((std::vector<long>({2, 4,\
    \ 3, 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5})));\n    assert(candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5, 6}))) == (std::vector<long>({6, 5, 4, 3, 2, 1, 0})));\n    assert(candidate((std::vector<long>({2,\
    \ 1}))) == (std::vector<long>({1, 2})));\n    assert(candidate((std::vector<long>({15,\
    \ 42, 87, 32, 11, 0}))) == (std::vector<long>({0, 11, 15, 32, 42, 87})));\n  \
    \  assert(candidate((std::vector<long>({21, 14, 23, 11}))) == (std::vector<long>({23,\
    \ 21, 14, 11})));\n}\n"
  stdout: ''
  stderr: "tmp8yl38cia: /tmp/tmp8yl38cia.cpp:29: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// * sort_array([]) => []\n// * sort_array([5]) => [5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6])\
    \ => [6, 5, 4, 3, 2, 1, 0]\nstd::vector<long> sort_array(std::vector<long> array)\
    \ {\n    // Your code here\n    long long sum = 0;\n    for (long i = 0; i < array.size();\
    \ i++) {\n        sum += array[i];\n    }\n    if (sum % 2 == 0) {\n        std::sort(array.begin(),\
    \ array.end());\n    } else {\n        std::sort(array.rbegin(), array.rend());\n\
    \    }\n    return array;\n}\nint main() {\n    auto candidate = sort_array;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({5})))\
    \ == (std::vector<long>({5})));\n    assert(candidate((std::vector<long>({2, 4,\
    \ 3, 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5})));\n    assert(candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5, 6}))) == (std::vector<long>({6, 5, 4, 3, 2, 1, 0})));\n    assert(candidate((std::vector<long>({2,\
    \ 1}))) == (std::vector<long>({1, 2})));\n    assert(candidate((std::vector<long>({15,\
    \ 42, 87, 32, 11, 0}))) == (std::vector<long>({0, 11, 15, 32, 42, 87})));\n  \
    \  assert(candidate((std::vector<long>({21, 14, 23, 11}))) == (std::vector<long>({23,\
    \ 21, 14, 11})));\n}\n"
  stdout: ''
  stderr: "tmpub97enxk: /tmp/tmpub97enxk.cpp:30: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// * sort_array([]) => []\n// * sort_array([5]) => [5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6])\
    \ => [6, 5, 4, 3, 2, 1, 0]\nstd::vector<long> sort_array(std::vector<long> array)\
    \ {\n    // write your code here\n    long long sum = 0;\n    for (long i = 0;\
    \ i < array.size(); i++) {\n        sum += array[i];\n    }\n    if (sum % 2 ==\
    \ 1) {\n        std::reverse(array.begin(), array.end());\n    }\n    return array;\n\
    }\nint main() {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({5}))) ==\
    \ (std::vector<long>({5})));\n    assert(candidate((std::vector<long>({2, 4, 3,\
    \ 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5})));\n    assert(candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5, 6}))) == (std::vector<long>({6, 5, 4, 3, 2, 1, 0})));\n    assert(candidate((std::vector<long>({2,\
    \ 1}))) == (std::vector<long>({1, 2})));\n    assert(candidate((std::vector<long>({15,\
    \ 42, 87, 32, 11, 0}))) == (std::vector<long>({0, 11, 15, 32, 42, 87})));\n  \
    \  assert(candidate((std::vector<long>({21, 14, 23, 11}))) == (std::vector<long>({23,\
    \ 21, 14, 11})));\n}\n"
  stdout: ''
  stderr: "tmp7mpnodjm: /tmp/tmp7mpnodjm.cpp:28: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// * sort_array([]) => []\n// * sort_array([5]) => [5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6])\
    \ => [6, 5, 4, 3, 2, 1, 0]\nstd::vector<long> sort_array(std::vector<long> array)\
    \ {\n    long sum = 0;\n    for (long i : array) {\n        sum += i;\n    }\n\
    \    if (sum % 2 == 0) {\n        std::sort(array.begin(), array.end());\n   \
    \ } else {\n        std::sort(array.rbegin(), array.rend());\n    }\n    return\
    \ array;\n}\nint main() {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({5}))) ==\
    \ (std::vector<long>({5})));\n    assert(candidate((std::vector<long>({2, 4, 3,\
    \ 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5})));\n    assert(candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5, 6}))) == (std::vector<long>({6, 5, 4, 3, 2, 1, 0})));\n    assert(candidate((std::vector<long>({2,\
    \ 1}))) == (std::vector<long>({1, 2})));\n    assert(candidate((std::vector<long>({15,\
    \ 42, 87, 32, 11, 0}))) == (std::vector<long>({0, 11, 15, 32, 42, 87})));\n  \
    \  assert(candidate((std::vector<long>({21, 14, 23, 11}))) == (std::vector<long>({23,\
    \ 21, 14, 11})));\n}\n"
  stdout: ''
  stderr: "tmpuakw_5zp: /tmp/tmpuakw_5zp.cpp:29: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// * sort_array([]) => []\n// * sort_array([5]) => [5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6])\
    \ => [6, 5, 4, 3, 2, 1, 0]\nstd::vector<long> sort_array(std::vector<long> array)\
    \ {\n    long long sum = 0;\n    for (long i = 0; i < array.size(); i++) {\n \
    \       sum += array[i];\n    }\n    if (sum % 2 == 0) {\n        std::sort(array.begin(),\
    \ array.end());\n    } else {\n        std::sort(array.rbegin(), array.rend());\n\
    \    }\n    return array;\n}\nint main() {\n    auto candidate = sort_array;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({5})))\
    \ == (std::vector<long>({5})));\n    assert(candidate((std::vector<long>({2, 4,\
    \ 3, 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5})));\n    assert(candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5, 6}))) == (std::vector<long>({6, 5, 4, 3, 2, 1, 0})));\n    assert(candidate((std::vector<long>({2,\
    \ 1}))) == (std::vector<long>({1, 2})));\n    assert(candidate((std::vector<long>({15,\
    \ 42, 87, 32, 11, 0}))) == (std::vector<long>({0, 11, 15, 32, 42, 87})));\n  \
    \  assert(candidate((std::vector<long>({21, 14, 23, 11}))) == (std::vector<long>({23,\
    \ 21, 14, 11})));\n}\n"
  stdout: ''
  stderr: "tmpy1mkuckg: /tmp/tmpy1mkuckg.cpp:29: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// * sort_array([]) => []\n// * sort_array([5]) => [5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6])\
    \ => [6, 5, 4, 3, 2, 1, 0]\nstd::vector<long> sort_array(std::vector<long> array)\
    \ {\n    // write your code here\n    long sum = 0;\n    long temp = 0;\n    long\
    \ sum1 = 0;\n    long temp1 = 0;\n    long sum2 = 0;\n    long temp2 = 0;\n  \
    \  long sum3 = 0;\n    long temp3 = 0;\n    long sum4 = 0;\n    long temp4 = 0;\n\
    \    long sum5 = 0;\n    long temp5 = 0;\n    long sum6 = 0;\n    long temp6 =\
    \ 0;\n    long sum7 = 0;\n    long temp7 = 0;\n    long sum8 = 0;\n    long temp8\
    \ = 0;\n    long sum9 = 0;\n    long temp9 = 0;\n    long sum10 = 0;\n    long\
    \ temp10 = 0;\n    long sum11 = 0;\n    long temp11 = 0;\n    long sum12 = 0;\n\
    \    long temp12 = 0;\n    long sum13 = 0;\n    long temp13 = 0;\n    long sum14\
    \ = 0;\n    long temp14 = 0;\n    long sum15 = 0;\n    long temp15 = 0;\n    long\
    \ sum16 = 0;\n    long temp16 = 0;\n    long sum17 = 0;\n    long temp17 = 0;\n\
    \    long sum18 = 0;\n    long temp18 = 0;\n    long sum19 = 0;\n    long temp19\
    \ = 0;\n    long sum20 = 0;\n    long temp20 = 0;\n    long sum21 = 0;\n    long\
    \ temp21 = 0;\n    long sum22 = 0;\n    long temp22 = 0;\n    long sum23 = 0;\n\
    \    long temp23 = 0;\n    long sum24 = 0;\n    long temp24 = 0;\n    long sum25\
    \ = 0;\n    long temp25 = 0;\n    long sum26 = 0;\n    long temp26 = 0;\n    long\
    \ sum27 = 0;\n    long temp27 = 0;\n    long sum28 = 0;\n    long temp28 = 0;\n\
    \    long sum29 = 0;\n    long temp29 = 0;\n    long sum30 = 0;\n    long temp30\
    \ = 0;\n    long sum31 = 0;\n    long temp31 = 0;\n    long sum32 = 0;\n    long\
    \ temp32 = 0;\n    long sum33 = 0;\n    long temp33 = 0;\n    long sum34 = 0;\n\
    \    long temp34 = 0;\n    long sum35 = 0;\n    long temp35 = 0;\n    long sum36\
    \ = 0;\n    long temp36 = 0;\n    long sum37 = 0;\n    long temp37 = 0;\n    long\
    \ sum38 = 0;\n    long temp38 = 0;\n    long sum39 = 0;\n    long temp39 = 0;\n\
    \    long sum40 = 0;\n    long temp40 = 0;\n    long sum41 = 0;\n    long temp41\
    \ = 0;\n    long sum42 = 0;\n    long temp42 = 0;\n    long sum\n}\nint main()\
    \ {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({5}))) ==\
    \ (std::vector<long>({5})));\n    assert(candidate((std::vector<long>({2, 4, 3,\
    \ 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5})));\n    assert(candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5, 6}))) == (std::vector<long>({6, 5, 4, 3, 2, 1, 0})));\n    assert(candidate((std::vector<long>({2,\
    \ 1}))) == (std::vector<long>({1, 2})));\n    assert(candidate((std::vector<long>({15,\
    \ 42, 87, 32, 11, 0}))) == (std::vector<long>({0, 11, 15, 32, 42, 87})));\n  \
    \  assert(candidate((std::vector<long>({21, 14, 23, 11}))) == (std::vector<long>({23,\
    \ 21, 14, 11})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmphj917itu.cpp: In function \u2018std::vector<long int> sort_array(std::vector<long\
    \ int>)\u2019:\n/tmp/tmphj917itu.cpp:102:1: error: expected initializer before\
    \ \u2018}\u2019 token\n  102 | }\n      | ^\n/tmp/tmphj917itu.cpp:102:1: warning:\
    \ no return statement in function returning non-void [-Wreturn-type]\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// * sort_array([]) => []\n// * sort_array([5]) => [5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6])\
    \ => [6, 5, 4, 3, 2, 1, 0]\nstd::vector<long> sort_array(std::vector<long> array)\
    \ {\n    long long sum = 0;\n    for (auto i : array) {\n        sum += i;\n \
    \   }\n    if (sum % 2 == 0) {\n        std::sort(array.begin(), array.end());\n\
    \    } else {\n        std::sort(array.rbegin(), array.rend());\n    }\n    return\
    \ array;\n}\nint main() {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({5}))) ==\
    \ (std::vector<long>({5})));\n    assert(candidate((std::vector<long>({2, 4, 3,\
    \ 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5})));\n    assert(candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5, 6}))) == (std::vector<long>({6, 5, 4, 3, 2, 1, 0})));\n    assert(candidate((std::vector<long>({2,\
    \ 1}))) == (std::vector<long>({1, 2})));\n    assert(candidate((std::vector<long>({15,\
    \ 42, 87, 32, 11, 0}))) == (std::vector<long>({0, 11, 15, 32, 42, 87})));\n  \
    \  assert(candidate((std::vector<long>({21, 14, 23, 11}))) == (std::vector<long>({23,\
    \ 21, 14, 11})));\n}\n"
  stdout: ''
  stderr: "tmpdwcmdv12: /tmp/tmpdwcmdv12.cpp:29: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// * sort_array([]) => []\n// * sort_array([5]) => [5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6])\
    \ => [6, 5, 4, 3, 2, 1, 0]\nstd::vector<long> sort_array(std::vector<long> array)\
    \ {\n    // write your code here\n    long sum = 0;\n    for (long i : array)\
    \ {\n        sum += i;\n    }\n    if (sum % 2 == 1) {\n        std::sort(array.begin(),\
    \ array.end());\n    } else {\n        std::sort(array.rbegin(), array.rend());\n\
    \    }\n    return array;\n}\nint main() {\n    auto candidate = sort_array;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({5})))\
    \ == (std::vector<long>({5})));\n    assert(candidate((std::vector<long>({2, 4,\
    \ 3, 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5})));\n    assert(candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5, 6}))) == (std::vector<long>({6, 5, 4, 3, 2, 1, 0})));\n    assert(candidate((std::vector<long>({2,\
    \ 1}))) == (std::vector<long>({1, 2})));\n    assert(candidate((std::vector<long>({15,\
    \ 42, 87, 32, 11, 0}))) == (std::vector<long>({0, 11, 15, 32, 42, 87})));\n  \
    \  assert(candidate((std::vector<long>({21, 14, 23, 11}))) == (std::vector<long>({23,\
    \ 21, 14, 11})));\n}\n"
  stdout: ''
  stderr: "tmph544pj1y: /tmp/tmph544pj1y.cpp:31: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5, 6}))) == (std::vector<long>({6, 5, 4, 3, 2, 1, 0}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array of non-negative\
    \ integers, return a copy of the given array after sorting,\n// you will sort\
    \ the given array in ascending order if the sum( first index value, last index\
    \ value) is odd,\n// or sort it in descending order if the sum( first index value,\
    \ last index value) is even.\n// Note:\n// * don't change the given array.\n//\
    \ Examples:\n// * sort_array([]) => []\n// * sort_array([5]) => [5]\n// * sort_array([2,\
    \ 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6])\
    \ => [6, 5, 4, 3, 2, 1, 0]\nstd::vector<long> sort_array(std::vector<long> array)\
    \ {\n    // Your code here\n    long long sum = 0;\n    for (long i = 0; i < array.size();\
    \ i++) {\n        sum += array[i];\n    }\n    if (sum % 2 == 0) {\n        std::sort(array.begin(),\
    \ array.end());\n    } else {\n        std::sort(array.rbegin(), array.rend());\n\
    \    }\n    return array;\n}\nint main() {\n    auto candidate = sort_array;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({5})))\
    \ == (std::vector<long>({5})));\n    assert(candidate((std::vector<long>({2, 4,\
    \ 3, 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5})));\n    assert(candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5, 6}))) == (std::vector<long>({6, 5, 4, 3, 2, 1, 0})));\n    assert(candidate((std::vector<long>({2,\
    \ 1}))) == (std::vector<long>({1, 2})));\n    assert(candidate((std::vector<long>({15,\
    \ 42, 87, 32, 11, 0}))) == (std::vector<long>({0, 11, 15, 32, 42, 87})));\n  \
    \  assert(candidate((std::vector<long>({21, 14, 23, 11}))) == (std::vector<long>({23,\
    \ 21, 14, 11})));\n}\n"
  stdout: ''
  stderr: "tmpwz3uzyfs: /tmp/tmpwz3uzyfs.cpp:30: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 4, 3, 0, 1, 5}))) == (std::vector<long>({0, 1, 2, 3, 4, 5}))' failed.\n"
  exit_code: -6
  status: Exception
