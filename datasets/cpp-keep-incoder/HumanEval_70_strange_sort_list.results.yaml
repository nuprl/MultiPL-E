name: HumanEval_70_strange_sort_list
language: cpp
results:
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    std::vector<long>\
    \ res;\n    res.reserve(lst.size());\n    for (long i : lst) {\n        res.push_back(i);\n\
    \    }\n    std::sort(res.begin(), res.end());\n    return res;\n}\nint main()\
    \ {\n    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9}))) == (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  stdout: ''
  stderr: "tmpeunib7u5: /tmp/tmpeunib7u5.cpp:21: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    // Write\
    \ your code here.\n    std::vector<long> result;\n    long min = lst.front();\n\
    \    long max = lst.back();\n    for (long i : lst) {\n        if (i < min) {\n\
    \            min = i;\n        }\n        if (i > max) {\n            max = i;\n\
    \        }\n    }\n    for (long i : lst) {\n        if (i < min) {\n        \
    \    result.push_back(min);\n            min = i;\n        } else if (i > max)\
    \ {\n            result.push_back(max);\n            max = i;\n        } else\
    \ {\n            result.push_back(i);\n        }\n    }\n    if (min != max) {\n\
    \        result.push_back(max);\n        result.push_back(min);\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9}))) == (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  stdout: ''
  stderr: "tmp28w4gql9: /tmp/tmp28w4gql9.cpp:42: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    std::vector<long>\
    \ result;\n    long min = lst.front();\n    long max = lst.back();\n    for (long\
    \ i : lst) {\n        if (i < min) {\n            min = i;\n        }\n      \
    \  if (i > max) {\n            max = i;\n        }\n    }\n    for (long i : lst)\
    \ {\n        if (i == min) {\n            result.push_back(min);\n        } else\
    \ if (i == max) {\n            result.push_back(max);\n        } else {\n    \
    \        result.push_back(i);\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9}))) == (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  stdout: ''
  stderr: "tmp419ju6ea: /tmp/tmp419ju6ea.cpp:35: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    std::vector<long>\
    \ lst2;\n    long min = lst.front();\n    long max = lst.back();\n    for (long\
    \ i : lst) {\n        if (i < min) {\n            min = i;\n        }\n      \
    \  if (i > max) {\n            max = i;\n        }\n    }\n    for (long i : lst)\
    \ {\n        if (i == min) {\n            lst2.push_back(min);\n        }\n  \
    \      if (i == max) {\n            lst2.push_back(max);\n        }\n        lst2.push_back(i);\n\
    \    }\n    return lst2;\n}\nint main() {\n    auto candidate = strange_sort_list;\n\
    \    assert(candidate((std::vector<long>({1, 2, 3, 4}))) == (std::vector<long>({1,\
    \ 4, 2, 3})));\n    assert(candidate((std::vector<long>({5, 6, 7, 8, 9}))) ==\
    \ (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  stdout: ''
  stderr: "tmptsllia3u: /tmp/tmptsllia3u.cpp:35: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    // Write\
    \ your code here.\n    std::vector<long> res;\n    long min = lst.front();\n \
    \   long max = lst.back();\n    for (long i : lst) {\n        if (i < min) {\n\
    \            min = i;\n        }\n        if (i > max) {\n            max = i;\n\
    \        }\n    }\n    res.push_back(min);\n    res.push_back(max);\n    for (long\
    \ i : lst) {\n        if (i < min) {\n            min = i;\n        }\n      \
    \  if (i > max) {\n            max = i;\n        }\n    }\n    res.push_back(min);\n\
    \    res.push_back(max);\n    return res;\n}\nint main() {\n    auto candidate\
    \ = strange_sort_list;\n    assert(candidate((std::vector<long>({1, 2, 3, 4})))\
    \ == (std::vector<long>({1, 4, 2, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9}))) == (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  stdout: ''
  stderr: "tmpzhysnh17: /tmp/tmpzhysnh17.cpp:39: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    // Your\
    \ code here\n    std::vector<long> result;\n    long min = lst.front();\n    long\
    \ max = lst.back();\n    for (long i : lst) {\n        if (i < min) {\n      \
    \      min = i;\n        }\n        if (i > max) {\n            max = i;\n   \
    \     }\n    }\n    for (long i : lst) {\n        if (i < min) {\n           \
    \ result.push_back(min);\n            min = i;\n        } else if (i > max) {\n\
    \            result.push_back(max);\n            max = i;\n        } else {\n\
    \            result.push_back(i);\n        }\n    }\n    if (min != max) {\n \
    \       result.push_back(min);\n        result.push_back(max);\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9}))) == (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  stdout: ''
  stderr: "tmp09uqavld: /tmp/tmp09uqavld.cpp:42: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    // Write\
    \ your code here\n    std::vector<long> result;\n    long min = lst.front();\n\
    \    long max = lst.back();\n    for (long i : lst) {\n        if (i < min) {\n\
    \            min = i;\n        }\n        if (i > max) {\n            max = i;\n\
    \        }\n    }\n    for (long i : lst) {\n        if (i < min) {\n        \
    \    result.push_back(min);\n            min = i;\n        }\n        if (i >\
    \ max) {\n            result.push_back(max);\n            max = i;\n        }\n\
    \    }\n    if (min != max) {\n        result.push_back(min);\n        result.push_back(max);\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = strange_sort_list;\n\
    \    assert(candidate((std::vector<long>({1, 2, 3, 4}))) == (std::vector<long>({1,\
    \ 4, 2, 3})));\n    assert(candidate((std::vector<long>({5, 6, 7, 8, 9}))) ==\
    \ (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  stdout: ''
  stderr: "tmp8shr7rm6: /tmp/tmp8shr7rm6.cpp:41: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    std::vector<long>\
    \ res;\n    long min = lst.front();\n    long max = lst.back();\n    for (long\
    \ i : lst) {\n        if (i < min) {\n            min = i;\n        } else if\
    \ (i > max) {\n            max = i;\n        }\n    }\n    res.push_back(min);\n\
    \    res.push_back(max);\n    for (long i : lst) {\n        if (i < min) {\n \
    \           long temp = min;\n            min = i;\n            while (temp !=\
    \ i) {\n                res.push_back(temp);\n                temp = temp + 1;\n\
    \            }\n        } else if (i > max) {\n            long temp = max;\n\
    \            max = i;\n            while (temp != i) {\n                res.push_back(temp);\n\
    \                temp = temp - 1;\n            }\n        }\n    }\n    res.push_back(min);\n\
    \    res.push_back(max);\n    return res;\n}\nint main() {\n    auto candidate\
    \ = strange_sort_list;\n    assert(candidate((std::vector<long>({1, 2, 3, 4})))\
    \ == (std::vector<long>({1, 4, 2, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9}))) == (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  stdout: ''
  stderr: "tmpxuxvo2vq: /tmp/tmpxuxvo2vq.cpp:46: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    std::vector<long>\
    \ res;\n    res.reserve(lst.size());\n    for (long i : lst) {\n        res.push_back(i);\n\
    \    }\n    std::sort(res.begin(), res.end());\n    return res;\n}\nint main()\
    \ {\n    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9}))) == (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  stdout: ''
  stderr: "tmp1_uijzac: /tmp/tmp1_uijzac.cpp:21: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    // Your\
    \ code here\n    std::vector<long> res;\n    res.reserve(lst.size());\n    long\
    \ min = *std::min_element(lst.begin(), lst.end());\n    long max = *std::max_element(lst.begin(),\
    \ lst.end());\n    long mid = min + (max - min) / 2;\n    long mid2 = mid / 2;\n\
    \    long mid3 = mid / 3;\n    long mid4 = mid / 4;\n    long mid5 = mid / 5;\n\
    \    long mid6 = mid / 6;\n    long mid7 = mid / 7;\n    long mid8 = mid / 8;\n\
    \    long mid9 = mid / 9;\n    long mid10 = mid / 10;\n    long mid11 = mid /\
    \ 11;\n    long mid12 = mid / 12;\n    long mid13 = mid / 13;\n    long mid14\
    \ = mid / 14;\n    long mid15 = mid / 15;\n    long mid16 = mid / 16;\n    long\
    \ mid17 = mid / 17;\n    long mid18 = mid / 18;\n    long mid19 = mid / 19;\n\
    \    long mid20 = mid / 20;\n    long mid21 = mid / 21;\n    long mid22 = mid\
    \ / 22;\n    long mid23 = mid / 23;\n    long mid24 = mid / 24;\n    long mid25\
    \ = mid / 25;\n    long mid26 = mid / 26;\n    long mid27 = mid / 27;\n    long\
    \ mid28 = mid / 28;\n    long mid29 = mid / 29;\n    long mid30 = mid / 30;\n\
    \    long mid31 = mid / 31;\n    long mid32 = mid / 32;\n    long mid33 = mid\
    \ / 33;\n    long mid34 = mid / 34;\n    long mid35 = mid / 35;\n    long mid36\
    \ = mid / 36;\n    long mid37 = mid / 37;\n    long mid38 = mid / 38;\n    long\
    \ mid39 = mid / 39;\n    long mid40 = mid / 40;\n    long mid41 = mid / 41;\n\
    \    long mid42 = mid / 42;\n    long mid43 = mid / 43;\n    long mid44 = mid\
    \ / 44;\n    long mid45 = mid / 45;\n    long mid46 = mid / 46;\n    long mid47\
    \ = mid / 47;\n    long \n}\nint main() {\n    auto candidate = strange_sort_list;\n\
    \    assert(candidate((std::vector<long>({1, 2, 3, 4}))) == (std::vector<long>({1,\
    \ 4, 2, 3})));\n    assert(candidate((std::vector<long>({5, 6, 7, 8, 9}))) ==\
    \ (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  stdout: ''
  stderr: "/tmp/tmpunf81b5k.cpp: In function \u2018std::vector<long int> strange_sort_list(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpunf81b5k.cpp:64:1: error: expected unqualified-id before\
    \ \u2018}\u2019 token\n   64 | }\n      | ^\n/tmp/tmpunf81b5k.cpp:64:1: warning:\
    \ no return statement in function returning non-void [-Wreturn-type]\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    // Write\
    \ your code here\n    std::vector<long> res;\n    res.reserve(lst.size());\n \
    \   long min = *std::min_element(lst.begin(), lst.end());\n    long max = *std::max_element(lst.begin(),\
    \ lst.end());\n    long mid = min + (max - min) / 2;\n    long mid2 = mid + (max\
    \ - min) / 2;\n    long mid3 = mid2 + (max - min) / 2;\n    long mid4 = mid3 +\
    \ (max - min) / 2;\n    long mid5 = mid4 + (max - min) / 2;\n    long mid6 = mid5\
    \ + (max - min) / 2;\n    long mid7 = mid6 + (max - min) / 2;\n    long mid8 =\
    \ mid7 + (max - min) / 2;\n    long mid9 = mid8 + (max - min) / 2;\n    long mid10\
    \ = mid9 + (max - min) / 2;\n    long mid11 = mid10 + (max - min) / 2;\n    long\
    \ mid12 = mid11 + (max - min) / 2;\n    long mid13 = mid12 + (max - min) / 2;\n\
    \    long mid14 = mid13 + (max - min) / 2;\n    long mid15 = mid14 + (max - min)\
    \ / 2;\n    long mid16 = mid15 + (max - min) / 2;\n    long mid17 = mid16 + (max\
    \ - min) / 2;\n    long mid18 = mid17 + (max - min) / 2;\n    long mid19 = mid18\
    \ + (max - min) / 2;\n    long mid20 = mid19 + (max - min) / 2;\n    long mid21\
    \ = mid20 + (max - min) / 2;\n    long mid22 = mid21 + (max - min) / 2;\n    long\
    \ mid23 = mid22 + (max - min) / 2;\n    long mid24 = mid23 + (max - min) / 2;\n\
    \    long mid25 = mid24 + (max - min) / 2;\n    long mid26 = mid25 + (max - min)\
    \ / 2;\n    long mid27 = mid26 + (max - min) / 2;\n    long mid28 = mid27 + (max\
    \ - min) / 2;\n    long mid29 = mid28 + (max - min) / 2;\n    long mid30 = mid29\
    \ + (max - min) / 2;\n    long mid31 = mid30 + (max - min) / 2;\n    long mid32\
    \ = mid31 + (max - min) / 2;\n    long mid33 = mid32 + (max - min) / 2;\n    long\
    \ mid34 = mid33 + (max - min) / 2;\n    long mid35 = mid34 + (max - min) / 2;\n\
    \    long mid36 = mid35 + (max - min) / 2;\n    long mid37 = mid36\n}\nint main()\
    \ {\n    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9}))) == (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  stdout: ''
  stderr: "/tmp/tmpmwi3omq9.cpp: In function \u2018std::vector<long int> strange_sort_list(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpmwi3omq9.cpp:53:1: error: expected \u2018,\u2019 or \u2018\
    ;\u2019 before \u2018}\u2019 token\n   53 | }\n      | ^\n/tmp/tmpmwi3omq9.cpp:53:1:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    std::vector<long>\
    \ res;\n    res.reserve(lst.size());\n    for (long i : lst) {\n        res.push_back(i);\n\
    \    }\n    std::sort(res.begin(), res.end());\n    return res;\n}\nint main()\
    \ {\n    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9}))) == (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  stdout: ''
  stderr: "tmp2tglinwt: /tmp/tmp2tglinwt.cpp:21: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    std::vector<long>\
    \ res;\n    long min = lst.front();\n    long max = lst.back();\n    for (long\
    \ i : lst) {\n        if (i < min) {\n            min = i;\n        }\n      \
    \  if (i > max) {\n            max = i;\n        }\n    }\n    res.push_back(min);\n\
    \    res.push_back(max);\n    for (long i : lst) {\n        if (i < min) {\n \
    \           min = i;\n        }\n        if (i > max) {\n            max = i;\n\
    \        }\n    }\n    res.push_back(min);\n    res.push_back(max);\n    return\
    \ res;\n}\nint main() {\n    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9}))) == (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  stdout: ''
  stderr: "tmptw4ruil2: /tmp/tmptw4ruil2.cpp:38: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    std::vector<long>\
    \ lst2;\n    long min = lst.front();\n    long max = lst.back();\n    for (long\
    \ i : lst) {\n        if (i < min) {\n            min = i;\n        }\n      \
    \  if (i > max) {\n            max = i;\n        }\n    }\n    long mid = min\
    \ + (max - min) / 2;\n    lst2.push_back(min);\n    lst2.push_back(mid);\n   \
    \ lst2.push_back(max);\n    return lst2;\n}\nint main() {\n    auto candidate\
    \ = strange_sort_list;\n    assert(candidate((std::vector<long>({1, 2, 3, 4})))\
    \ == (std::vector<long>({1, 4, 2, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9}))) == (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  stdout: ''
  stderr: "tmp3u0lyt0w: /tmp/tmp3u0lyt0w.cpp:30: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    std::vector<long>\
    \ res;\n    if (lst.size() == 0) {\n        return res;\n    }\n    long min =\
    \ lst[0];\n    long max = lst[0];\n    for (long i : lst) {\n        if (i < min)\
    \ {\n            min = i;\n        }\n        if (i > max) {\n            max\
    \ = i;\n        }\n    }\n    long mid = min + (max - min) / 2;\n    res.push_back(min);\n\
    \    res.push_back(mid);\n    res.push_back(max);\n    return res;\n}\nint main()\
    \ {\n    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9}))) == (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  stdout: ''
  stderr: "tmpv92w23c0: /tmp/tmpv92w23c0.cpp:33: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    // Your\
    \ code here\n    std::vector<long> result;\n    long min = lst.front();\n    long\
    \ max = lst.back();\n    for (long i : lst) {\n        if (i < min) {\n      \
    \      min = i;\n        }\n        if (i > max) {\n            max = i;\n   \
    \     }\n    }\n    for (long i : lst) {\n        if (i == min) {\n          \
    \  result.push_back(min);\n        } else if (i == max) {\n            result.push_back(max);\n\
    \        } else {\n            result.push_back(i);\n        }\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9}))) == (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  stdout: ''
  stderr: "tmp7witwcym: /tmp/tmp7witwcym.cpp:36: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    std::vector<long>\
    \ res;\n    res.reserve(lst.size());\n    for (long i : lst) {\n        res.push_back(i);\n\
    \    }\n    std::sort(res.begin(), res.end());\n    return res;\n}\nint main()\
    \ {\n    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9}))) == (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  stdout: ''
  stderr: "tmpn30qy120: /tmp/tmpn30qy120.cpp:21: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    // Your\
    \ code here\n    std::vector<long> res;\n    res.reserve(lst.size());\n    for\
    \ (long i : lst) {\n        res.push_back(i);\n    }\n    std::sort(res.begin(),\
    \ res.end());\n    return res;\n}\nint main() {\n    auto candidate = strange_sort_list;\n\
    \    assert(candidate((std::vector<long>({1, 2, 3, 4}))) == (std::vector<long>({1,\
    \ 4, 2, 3})));\n    assert(candidate((std::vector<long>({5, 6, 7, 8, 9}))) ==\
    \ (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  stdout: ''
  stderr: "tmpp06rbdsv: /tmp/tmpp06rbdsv.cpp:22: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    // Write\
    \ your code here\n    std::vector<long> result;\n    long min = lst.front();\n\
    \    long max = lst.back();\n    for (long i : lst) {\n        if (i < min) {\n\
    \            min = i;\n        }\n        if (i > max) {\n            max = i;\n\
    \        }\n    }\n    for (long i : lst) {\n        if (i < min) {\n        \
    \    result.push_back(min);\n            min = i;\n        } else if (i > max)\
    \ {\n            result.push_back(max);\n            max = i;\n        } else\
    \ {\n            result.push_back(i);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9}))) == (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  stdout: ''
  stderr: "tmpppi13i39: /tmp/tmpppi13i39.cpp:38: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    // Your\
    \ code here\n    std::vector<long> result;\n    long min = lst.front();\n    long\
    \ max = lst.back();\n    for (long i : lst) {\n        if (i < min) {\n      \
    \      min = i;\n        }\n        if (i > max) {\n            max = i;\n   \
    \     }\n    }\n    for (long i : lst) {\n        if (i < min) {\n           \
    \ result.push_back(min);\n        } else if (i > max) {\n            result.push_back(max);\n\
    \        } else {\n            result.push_back(i);\n        }\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9}))) == (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  stdout: ''
  stderr: "tmpo87ar0d2: /tmp/tmpo87ar0d2.cpp:36: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    // Write\
    \ your code here\n    std::vector<long> ans;\n    long min = lst.front();\n  \
    \  long max = lst.back();\n    for (long i : lst) {\n        if (i < min) {\n\
    \            min = i;\n        }\n        if (i > max) {\n            max = i;\n\
    \        }\n    }\n    for (long i : lst) {\n        if (i == min) {\n       \
    \     ans.push_back(min);\n        } else if (i == max) {\n            ans.push_back(max);\n\
    \        } else {\n            ans.push_back(i);\n        }\n    }\n    return\
    \ ans;\n}\nint main() {\n    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9}))) == (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  stdout: ''
  stderr: "tmp_k9adspt: /tmp/tmp_k9adspt.cpp:36: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    std::vector<long>\
    \ res;\n    res.reserve(lst.size());\n    for (long i : lst) {\n        res.push_back(i);\n\
    \    }\n    std::sort(res.begin(), res.end());\n    return res;\n}\nint main()\
    \ {\n    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9}))) == (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  stdout: ''
  stderr: "tmp84t4psm9: /tmp/tmp84t4psm9.cpp:21: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    std::vector<long>\
    \ result;\n    long min = *std::min_element(lst.begin(), lst.end());\n    long\
    \ max = *std::max_element(lst.begin(), lst.end());\n    long mid = min + (max\
    \ - min) / 2;\n    long mid2 = mid + (max - min) / 2;\n    long mid3 = mid2 +\
    \ (max - min) / 2;\n    long mid4 = mid3 + (max - min) / 2;\n    long mid5 = mid4\
    \ + (max - min) / 2;\n    long mid6 = mid5 + (max - min) / 2;\n    long mid7 =\
    \ mid6 + (max - min) / 2;\n    long mid8 = mid7 + (max - min) / 2;\n    long mid9\
    \ = mid8 + (max - min) / 2;\n    long mid10 = mid9 + (max - min) / 2;\n    long\
    \ mid11 = mid10 + (max - min) / 2;\n    long mid12 = mid11 + (max - min) / 2;\n\
    \    long mid13 = mid12 + (max - min) / 2;\n    long mid14 = mid13 + (max - min)\
    \ / 2;\n    long mid15 = mid14 + (max - min) / 2;\n    long mid16 = mid15 + (max\
    \ - min) / 2;\n    long mid17 = mid16 + (max - min) / 2;\n    long mid18 = mid17\
    \ + (max - min) / 2;\n    long mid19 = mid18 + (max - min) / 2;\n    long mid20\
    \ = mid19 + (max - min) / 2;\n    long mid21 = mid20 + (max - min) / 2;\n    long\
    \ mid22 = mid21 + (max - min) / 2;\n    long mid23 = mid22 + (max - min) / 2;\n\
    \    long mid24 = mid23 + (max - min) / 2;\n    long mid25 = mid24 + (max - min)\
    \ / 2;\n    long mid26 = mid25 + (max - min) / 2;\n    long mid27 = mid26 + (max\
    \ - min) / 2;\n    long mid28 = mid27 + (max - min) / 2;\n    long mid29 = mid28\
    \ + (max - min) / 2;\n    long mid30 = mid29 + (max - min) / 2;\n    long mid31\
    \ = mid30 + (max - min) / 2;\n    long mid32 = mid31 + (max - min) / 2;\n    long\
    \ mid33 = mid32 + (max - min) / 2;\n    long mid34 = mid33 + (max - min) / 2;\n\
    \    long mid35 = mid34 + (max - min) / 2;\n    long mid36 = mid35 + (max - min)\
    \ / 2;\n    long mid37 = mid36 + (max - min) / 2;\n    long mid38 = mid37\n}\n\
    int main() {\n    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9}))) == (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  stdout: ''
  stderr: "/tmp/tmp__hkl3la.cpp: In function \u2018std::vector<long int> strange_sort_list(std::vector<long\
    \ int>)\u2019:\n/tmp/tmp__hkl3la.cpp:52:1: error: expected \u2018,\u2019 or \u2018\
    ;\u2019 before \u2018}\u2019 token\n   52 | }\n      | ^\n/tmp/tmp__hkl3la.cpp:52:1:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    // Write\
    \ your code here\n    std::vector<long> lst2;\n    long minval = lst.front();\n\
    \    long maxval = lst.back();\n    long midval;\n    long mid;\n    for (long\
    \ i = 0; i < lst.size(); i++) {\n        midval = lst[i];\n        mid = minval;\n\
    \        minval = midval;\n        for (long j = i + 1; j < lst.size(); j++) {\n\
    \            if (midval > lst[j]) {\n                mid = midval;\n         \
    \       midval = lst[j];\n            }\n        }\n        lst2.push_back(mid);\n\
    \    }\n    return lst2;\n}\nint main() {\n    auto candidate = strange_sort_list;\n\
    \    assert(candidate((std::vector<long>({1, 2, 3, 4}))) == (std::vector<long>({1,\
    \ 4, 2, 3})));\n    assert(candidate((std::vector<long>({5, 6, 7, 8, 9}))) ==\
    \ (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  stdout: ''
  stderr: "tmpsnhctjj2: /tmp/tmpsnhctjj2.cpp:33: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    // Write\
    \ your code here.\n    std::vector<long> result;\n    long minValue = std::numeric_limits<long>::min();\n\
    \    long maxValue = std::numeric_limits<long>::max();\n    for (long i : lst)\
    \ {\n        if (i < minValue) {\n            result.push_back(minValue);\n  \
    \          minValue = i;\n        } else if (i > maxValue) {\n            result.push_back(maxValue);\n\
    \            maxValue = i;\n        } else {\n            result.push_back(i);\n\
    \        }\n    }\n    if (minValue != maxValue) {\n        result.push_back(minValue);\n\
    \        result.push_back(maxValue);\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9}))) == (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  stdout: ''
  stderr: "tmpa3hqm2dx: /tmp/tmpa3hqm2dx.cpp:34: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    std::vector<long>\
    \ ans;\n    long min = std::numeric_limits<long>::min();\n    long max = std::numeric_limits<long>::max();\n\
    \    long mid = 0;\n    for (long i : lst) {\n        if (i < min) {\n       \
    \     mid = min;\n            min = i;\n        } else if (i > max) {\n      \
    \      mid = max;\n            max = i;\n        } else {\n            mid = i;\n\
    \        }\n        ans.push_back(mid);\n    }\n    return ans;\n}\nint main()\
    \ {\n    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9}))) == (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  stdout: ''
  stderr: "tmpavga8a4q: /tmp/tmpavga8a4q.cpp:31: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    std::vector<long>\
    \ result;\n    for (long i : lst) {\n        result.push_back(i);\n    }\n   \
    \ std::sort(result.begin(), result.end());\n    return result;\n}\nint main()\
    \ {\n    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9}))) == (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  stdout: ''
  stderr: "tmp9lc_qehl: /tmp/tmp9lc_qehl.cpp:20: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    // Write\
    \ your code here.\n    std::vector<long> result;\n    long minValue = lst[0];\n\
    \    long maxValue = lst[0];\n    for (long i : lst) {\n        if (i < minValue)\
    \ {\n            minValue = i;\n        }\n        if (i > maxValue) {\n     \
    \       maxValue = i;\n        }\n    }\n    for (long i : lst) {\n        if\
    \ (i == minValue) {\n            result.push_back(minValue);\n        } else if\
    \ (i == maxValue) {\n            result.push_back(maxValue);\n        } else {\n\
    \            result.push_back(i);\n        }\n    }\n    return result;\n}\nint\
    \ main() {\n    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9}))) == (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  stdout: ''
  stderr: "tmpq95r64tj: /tmp/tmpq95r64tj.cpp:36: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    std::vector<long>\
    \ res;\n    long min = lst.front();\n    long max = lst.back();\n    for (long\
    \ i : lst) {\n        if (i < min) {\n            min = i;\n        } else if\
    \ (i > max) {\n            max = i;\n        }\n    }\n    res.push_back(min);\n\
    \    res.push_back(max);\n    for (long i : lst) {\n        if (i < min) {\n \
    \           min = i;\n        } else if (i > max) {\n            max = i;\n  \
    \      }\n    }\n    res.push_back(min);\n    res.push_back(max);\n    return\
    \ res;\n}\nint main() {\n    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9}))) == (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  stdout: ''
  stderr: "tmpu0yayzjl: /tmp/tmpu0yayzjl.cpp:36: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    // Your\
    \ code here\n    std::vector<long> sorted_lst;\n    long min = lst.front();\n\
    \    long max = lst.back();\n    for (long i : lst) {\n        if (i < min) {\n\
    \            min = i;\n        }\n        if (i > max) {\n            max = i;\n\
    \        }\n    }\n    for (long i : lst) {\n        if (i == min) {\n       \
    \     sorted_lst.push_back(min);\n        } else if (i == max) {\n           \
    \ sorted_lst.push_back(max);\n        } else {\n            sorted_lst.push_back(i);\n\
    \        }\n    }\n    return sorted_lst;\n}\nint main() {\n    auto candidate\
    \ = strange_sort_list;\n    assert(candidate((std::vector<long>({1, 2, 3, 4})))\
    \ == (std::vector<long>({1, 4, 2, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9}))) == (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  stdout: ''
  stderr: "tmpyu5_axa4: /tmp/tmpyu5_axa4.cpp:36: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    // Write\
    \ your code here\n    std::vector<long> lst2;\n    for(long i=0;i<lst.size();i++){\n\
    \        for(long j=i+1;j<lst.size();j++){\n            if(lst[i]>lst[j]){\n \
    \               long temp = lst[i];\n                lst[i] = lst[j];\n      \
    \          lst[j] = temp;\n            }\n        }\n    }\n    return lst2;\n\
    }\nint main() {\n    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9}))) == (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  stdout: ''
  stderr: "tmpdeop04rg: /tmp/tmpdeop04rg.cpp:26: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    std::vector<long>\
    \ lst2(lst.size());\n    for (long i = 0; i < lst.size(); i++) {\n        long\
    \ min_val = std::numeric_limits<long>::min();\n        long max_val = std::numeric_limits<long>::max();\n\
    \        for (long j = 0; j < lst.size(); j++) {\n            if (lst[j] < min_val)\
    \ {\n                min_val = lst[j];\n            }\n            if (lst[j]\
    \ > max_val) {\n                max_val = lst[j];\n            }\n        }\n\
    \        lst2[i] = min_val;\n        lst2[i] = max_val;\n    }\n    return lst2;\n\
    }\nint main() {\n    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9}))) == (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  stdout: ''
  stderr: "tmp8uj488wa: /tmp/tmp8uj488wa.cpp:30: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    std::vector<long>\
    \ res;\n    res.reserve(lst.size());\n    for (long i : lst) {\n        res.push_back(i);\n\
    \    }\n    std::sort(res.begin(), res.end());\n    return res;\n}\nint main()\
    \ {\n    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9}))) == (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  stdout: ''
  stderr: "tmpdbvk785l: /tmp/tmpdbvk785l.cpp:21: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    // Write\
    \ your code here.\n    std::vector<long> result;\n    long min = lst.front();\n\
    \    long max = lst.back();\n    for(long i : lst)\n    {\n        if(i<min)\n\
    \        {\n            min=i;\n        }\n        if(i>max)\n        {\n    \
    \        max=i;\n        }\n    }\n    for(long i=min;i<=max;i++)\n    {\n   \
    \     result.push_back(i);\n    }\n    for(long i=max;i>min;i--)\n    {\n    \
    \    result.push_back(i);\n    }\n    return result;\n}\nint main() {\n    auto\
    \ candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9}))) == (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  stdout: ''
  stderr: "tmpthutuqn9: /tmp/tmpthutuqn9.cpp:38: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    // Write\
    \ your code here.\n    std::vector<long> res;\n    long min = lst.front();\n \
    \   long max = lst.back();\n    for (long i : lst) {\n        if (i < min) {\n\
    \            min = i;\n        }\n        if (i > max) {\n            max = i;\n\
    \        }\n    }\n    res.push_back(min);\n    res.push_back(max);\n    for (long\
    \ i : lst) {\n        if (i < min) {\n            min = i;\n        }\n      \
    \  if (i > max) {\n            max = i;\n        }\n    }\n    res.push_back(min);\n\
    \    res.push_back(max);\n    return res;\n}\nint main() {\n    auto candidate\
    \ = strange_sort_list;\n    assert(candidate((std::vector<long>({1, 2, 3, 4})))\
    \ == (std::vector<long>({1, 4, 2, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9}))) == (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  stdout: ''
  stderr: "tmpb_d4fxhk: /tmp/tmpb_d4fxhk.cpp:39: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    std::vector<long>\
    \ result;\n    long min = lst.front();\n    long max = lst.back();\n    for (long\
    \ i : lst) {\n        if (i < min) {\n            min = i;\n        }\n      \
    \  if (i > max) {\n            max = i;\n        }\n    }\n    for (long i : lst)\
    \ {\n        if (i == min) {\n            result.push_back(min);\n        } else\
    \ if (i == max) {\n            result.push_back(max);\n        } else {\n    \
    \        result.push_back(i);\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9}))) == (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  stdout: ''
  stderr: "tmpj3xu8xeq: /tmp/tmpj3xu8xeq.cpp:35: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    // Your\
    \ code here\n    std::vector<long> result;\n    long min = lst.front();\n    long\
    \ max = lst.back();\n    for (long i : lst) {\n        if (i < min) {\n      \
    \      min = i;\n        }\n        if (i > max) {\n            max = i;\n   \
    \     }\n    }\n    for (long i : lst) {\n        if (i == min) {\n          \
    \  result.push_back(min);\n        } else if (i == max) {\n            result.push_back(max);\n\
    \        } else {\n            result.push_back(i);\n        }\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9}))) == (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  stdout: ''
  stderr: "tmpqg4752sb: /tmp/tmpqg4752sb.cpp:36: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    std::vector<long>\
    \ lst2;\n    long min = std::numeric_limits<long>::min();\n    long max = std::numeric_limits<long>::max();\n\
    \    for (long i : lst) {\n        if (i < min) {\n            lst2.push_back(min);\n\
    \            min = i;\n        } else if (i > max) {\n            lst2.push_back(max);\n\
    \            max = i;\n        } else {\n            lst2.push_back(i);\n    \
    \    }\n    }\n    return lst2;\n}\nint main() {\n    auto candidate = strange_sort_list;\n\
    \    assert(candidate((std::vector<long>({1, 2, 3, 4}))) == (std::vector<long>({1,\
    \ 4, 2, 3})));\n    assert(candidate((std::vector<long>({5, 6, 7, 8, 9}))) ==\
    \ (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  stdout: ''
  stderr: "tmpqp35s37e: /tmp/tmpqp35s37e.cpp:29: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    std::vector<long>\
    \ res;\n    res.reserve(lst.size());\n    for (long i : lst) {\n        res.push_back(i);\n\
    \    }\n    std::sort(res.begin(), res.end());\n    return res;\n}\nint main()\
    \ {\n    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9}))) == (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  stdout: ''
  stderr: "tmp7f5ii11z: /tmp/tmp7f5ii11z.cpp:21: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    std::vector<long>\
    \ res;\n    res.reserve(lst.size());\n    for (long i : lst) {\n        res.push_back(i);\n\
    \    }\n    std::sort(res.begin(), res.end());\n    return res;\n}\nint main()\
    \ {\n    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9}))) == (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  stdout: ''
  stderr: "tmpjb8hqgu3: /tmp/tmpjb8hqgu3.cpp:21: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    // Write\
    \ your code here\n    std::vector<long> result;\n    long min = lst.front();\n\
    \    long max = lst.back();\n    for (long i : lst) {\n        if (i < min) {\n\
    \            min = i;\n        }\n        if (i > max) {\n            max = i;\n\
    \        }\n    }\n    long mid = min + (max - min) / 2;\n    for (long i : lst)\
    \ {\n        if (i < mid) {\n            result.push_back(i);\n        }\n   \
    \     if (i > mid) {\n            result.push_back(mid);\n        }\n    }\n \
    \   for (long i : result) {\n        result.push_back(i);\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9}))) == (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  stdout: ''
  stderr: "tmpslicwsxn: /tmp/tmpslicwsxn.cpp:39: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    // Write\
    \ your code here.\n    std::vector<long> res;\n    res.reserve(lst.size());\n\
    \    long min = lst[0];\n    long max = lst[0];\n    for (long i : lst) {\n  \
    \      if (i < min) {\n            min = i;\n        }\n        if (i > max) {\n\
    \            max = i;\n        }\n    }\n    for (long i : lst) {\n        if\
    \ (i == min) {\n            res.push_back(min);\n        } else if (i == max)\
    \ {\n            res.push_back(max);\n        } else {\n            res.push_back(i);\n\
    \        }\n    }\n    return res;\n}\nint main() {\n    auto candidate = strange_sort_list;\n\
    \    assert(candidate((std::vector<long>({1, 2, 3, 4}))) == (std::vector<long>({1,\
    \ 4, 2, 3})));\n    assert(candidate((std::vector<long>({5, 6, 7, 8, 9}))) ==\
    \ (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  stdout: ''
  stderr: "tmp39em8k_k: /tmp/tmp39em8k_k.cpp:37: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    // Write\
    \ your code here.\n    std::vector<long> lst2;\n    long min;\n    long max;\n\
    \    long mid;\n    for(long i = 0; i < lst.size(); i++){\n        min = lst[i];\n\
    \        max = lst[i];\n        for(long j = i + 1; j < lst.size(); j++){\n  \
    \          if(lst[j] < min){\n                min = lst[j];\n            }\n \
    \           if(lst[j] > max){\n                max = lst[j];\n            }\n\
    \        }\n        mid = (min + max) / 2;\n        lst2.push_back(mid);\n   \
    \ }\n    return lst2;\n}\nint main() {\n    auto candidate = strange_sort_list;\n\
    \    assert(candidate((std::vector<long>({1, 2, 3, 4}))) == (std::vector<long>({1,\
    \ 4, 2, 3})));\n    assert(candidate((std::vector<long>({5, 6, 7, 8, 9}))) ==\
    \ (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  stdout: ''
  stderr: "tmph574vpqo: /tmp/tmph574vpqo.cpp:34: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    std::vector<long>\
    \ result;\n    long min = lst.front();\n    long max = lst.back();\n    for (long\
    \ i : lst) {\n        if (i < min) {\n            min = i;\n        } else if\
    \ (i > max) {\n            max = i;\n        }\n    }\n    for (long i : lst)\
    \ {\n        if (i == min) {\n            result.push_back(min);\n        } else\
    \ if (i == max) {\n            result.push_back(max);\n        } else {\n    \
    \        result.push_back(i);\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9}))) == (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  stdout: ''
  stderr: "tmpddr8ogbw: /tmp/tmpddr8ogbw.cpp:34: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    std::vector<long>\
    \ res;\n    res.reserve(lst.size());\n    for (long i : lst) {\n        res.push_back(i);\n\
    \    }\n    std::sort(res.begin(), res.end());\n    return res;\n}\nint main()\
    \ {\n    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9}))) == (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  stdout: ''
  stderr: "tmp2aoze2ny: /tmp/tmp2aoze2ny.cpp:21: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    std::vector<long>\
    \ ans;\n    long min = lst.front();\n    long max = lst.back();\n    for (long\
    \ i : lst) {\n        if (i < min) {\n            min = i;\n        }\n      \
    \  if (i > max) {\n            max = i;\n        }\n    }\n    for (long i : lst)\
    \ {\n        if (i == min) {\n            ans.push_back(min);\n        } else\
    \ if (i == max) {\n            ans.push_back(max);\n        } else {\n       \
    \     ans.push_back(i);\n        }\n    }\n    return ans;\n}\nint main() {\n\
    \    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9}))) == (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  stdout: ''
  stderr: "tmpulmkiu5q: /tmp/tmpulmkiu5q.cpp:35: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    // Write\
    \ your code here.\n    std::vector<long> sorted_lst;\n    long min = lst.front();\n\
    \    long max = lst.back();\n    for (long i : lst) {\n        if (i < min) {\n\
    \            min = i;\n        }\n        if (i > max) {\n            max = i;\n\
    \        }\n    }\n    for (long i : lst) {\n        if (i == min) {\n       \
    \     sorted_lst.push_back(min);\n        } else if (i == max) {\n           \
    \ sorted_lst.push_back(max);\n        } else {\n            sorted_lst.push_back(i);\n\
    \        }\n    }\n    return sorted_lst;\n}\nint main() {\n    auto candidate\
    \ = strange_sort_list;\n    assert(candidate((std::vector<long>({1, 2, 3, 4})))\
    \ == (std::vector<long>({1, 4, 2, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9}))) == (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  stdout: ''
  stderr: "tmp20iry9u5: /tmp/tmp20iry9u5.cpp:36: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    std::vector<long>\
    \ res;\n    long min = lst.front();\n    long max = lst.back();\n    for (long\
    \ i : lst) {\n        if (i < min) {\n            min = i;\n        } else if\
    \ (i > max) {\n            max = i;\n        }\n    }\n    res.push_back(min);\n\
    \    res.push_back(max);\n    for (long i : lst) {\n        if (i < min) {\n \
    \           min = i;\n        } else if (i > max) {\n            max = i;\n  \
    \      }\n    }\n    res.push_back(min);\n    res.push_back(max);\n    return\
    \ res;\n}\nint main() {\n    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9}))) == (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  stdout: ''
  stderr: "tmpf4bvlppd: /tmp/tmpf4bvlppd.cpp:36: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    // Your\
    \ code here\n    std::vector<long> res;\n    res.reserve(lst.size());\n    for\
    \ (long i : lst) {\n        res.push_back(i);\n    }\n    std::sort(res.begin(),\
    \ res.end());\n    return res;\n}\nint main() {\n    auto candidate = strange_sort_list;\n\
    \    assert(candidate((std::vector<long>({1, 2, 3, 4}))) == (std::vector<long>({1,\
    \ 4, 2, 3})));\n    assert(candidate((std::vector<long>({5, 6, 7, 8, 9}))) ==\
    \ (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  stdout: ''
  stderr: "tmpkqetyep0: /tmp/tmpkqetyep0.cpp:22: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    std::vector<long>\
    \ res;\n    res.reserve(lst.size());\n    for (long i : lst) {\n        res.push_back(i);\n\
    \    }\n    std::sort(res.begin(), res.end());\n    return res;\n}\nint main()\
    \ {\n    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9}))) == (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  stdout: ''
  stderr: "tmp6axtleb1: /tmp/tmp6axtleb1.cpp:21: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    // Write\
    \ your code here\n    std::vector<long> result;\n    long minValue = *std::min_element(lst.begin(),\
    \ lst.end());\n    long maxValue = *std::max_element(lst.begin(), lst.end());\n\
    \    long midValue = minValue + (maxValue - minValue) / 2;\n    long midIndex\
    \ = 0;\n    long minIndex = 0;\n    long maxIndex = 0;\n    for (long i = 0; i\
    \ < lst.size(); i++) {\n        if (lst[i] < midValue) {\n            result.push_back(lst[i]);\n\
    \            minIndex = i;\n        } else if (lst[i] > midValue) {\n        \
    \    result.push_back(lst[i]);\n            maxIndex = i;\n        } else {\n\
    \            result.push_back(midValue);\n            midIndex++;\n        }\n\
    \    }\n    for (long i = 0; i < midIndex; i++) {\n        result.push_back(midValue);\n\
    \    }\n    for (long i = minIndex; i < maxIndex; i++) {\n        result.push_back(lst[i]);\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = strange_sort_list;\n\
    \    assert(candidate((std::vector<long>({1, 2, 3, 4}))) == (std::vector<long>({1,\
    \ 4, 2, 3})));\n    assert(candidate((std::vector<long>({5, 6, 7, 8, 9}))) ==\
    \ (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  stdout: ''
  stderr: "tmpibe__xui: /tmp/tmpibe__xui.cpp:41: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    // Write\
    \ your code here\n    std::vector<long> lst2;\n    long minval = lst[0];\n   \
    \ long maxval = lst[0];\n    for (long i : lst) {\n        if (i < minval) {\n\
    \            minval = i;\n        }\n        if (i > maxval) {\n            maxval\
    \ = i;\n        }\n    }\n    long midval = (minval + maxval) / 2;\n    long midpos\
    \ = 0;\n    for (long i : lst) {\n        if (i == midval) {\n            midpos\
    \ = i;\n        }\n    }\n    long midpos = 0;\n    for (long i : lst) {\n   \
    \     if (i == midval) {\n            midpos = i;\n        }\n    }\n    long\
    \ midpos = 0;\n    for (long i : lst) {\n        if (i == midval) {\n        \
    \    midpos = i;\n        }\n    }\n    long midpos = 0;\n    for (long i : lst)\
    \ {\n        if (i == midval) {\n            midpos = i;\n        }\n    }\n \
    \   long midpos = 0;\n    for (long i : lst) {\n        if (i == midval) {\n \
    \           midpos = i;\n        }\n    }\n    long midpos = 0;\n    for (long\
    \ i : lst) {\n        if (i == midval) {\n            midpos = i;\n        }\n\
    \    }\n    long midpos = 0;\n    for (long i : lst) {\n        if (i == midval)\
    \ {\n            midpos = i;\n        }\n    }\n    long midpos = 0;\n    for\
    \ (long i : lst) {\n        if (i == midval) {\n            midpos = i;\n    \
    \    }\n    }\n    long midpos = 0;\n    for (long i : lst) {\n        if (i ==\
    \ midval) {\n            midpos = i;\n        }\n    }\n    long midpos = 0;\n\
    \    for (long i : lst) {\n        if (i == midval) {\n            midpos = i;\n\
    \        }\n    }\n    long midpos = 0;\n    for (long i : lst) {\n        if\
    \ (i == midval) {\n            midpos = i;\n        }\n    }\n    long midpos\
    \ = 0;\n    for (long i : lst) {\n        if (i == midval) {\n            midpos\
    \ = i;\n        }\n    }\n    long midpos = 0;\n    for (long i : lst) {\n   \
    \     if (i == midval) {\n            midpos = i;\n        }\n    }\n    long\
    \ midpos = 0;\n    for (long i : lst) {\n        if (i == midval) {\n        \
    \    midpos = i;\n        }\n    }\n    long midpos = 0;\n    for (long i : lst)\
    \ {\n        if (i == midval) {\n            midpos = i;\n        }\n    }\n \
    \   long midpos = 0;\n    for (long i : lst) {\n        if (i == midval) {\n \
    \           midpos = i;\n        }\n    }\n    long midpos = 0;\n    for (long\
    \ i \n}\nint main() {\n    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9}))) == (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  stdout: ''
  stderr: "/tmp/tmpjhy8hli6.cpp: In function \u2018std::vector<long int> strange_sort_list(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpjhy8hli6.cpp:30:10: error: redeclaration of \u2018long\
    \ int midpos\u2019\n   30 |     long midpos = 0;\n      |          ^~~~~~\n/tmp/tmpjhy8hli6.cpp:24:10:\
    \ note: \u2018long int midpos\u2019 previously declared here\n   24 |     long\
    \ midpos = 0;\n      |          ^~~~~~\n/tmp/tmpjhy8hli6.cpp:36:10: error: redeclaration\
    \ of \u2018long int midpos\u2019\n   36 |     long midpos = 0;\n      |      \
    \    ^~~~~~\n/tmp/tmpjhy8hli6.cpp:24:10: note: \u2018long int midpos\u2019 previously\
    \ declared here\n   24 |     long midpos = 0;\n      |          ^~~~~~\n/tmp/tmpjhy8hli6.cpp:42:10:\
    \ error: redeclaration of \u2018long int midpos\u2019\n   42 |     long midpos\
    \ = 0;\n      |          ^~~~~~\n/tmp/tmpjhy8hli6.cpp:24:10: note: \u2018long\
    \ int midpos\u2019 previously declared here\n   24 |     long midpos = 0;\n  \
    \    |          ^~~~~~\n/tmp/tmpjhy8hli6.cpp:48:10: error: redeclaration of \u2018\
    long int midpos\u2019\n   48 |     long midpos = 0;\n      |          ^~~~~~\n\
    /tmp/tmpjhy8hli6.cpp:24:10: note: \u2018long int midpos\u2019 previously declared\
    \ here\n   24 |     long midpos = 0;\n      |          ^~~~~~\n/tmp/tmpjhy8hli6.cpp:54:10:\
    \ error: redeclaration of \u2018long int midpos\u2019\n   54 |     long midpos\
    \ = 0;\n      |          ^~~~~~\n/tmp/tmpjhy8hli6.cpp:24:10: note: \u2018long\
    \ int midpos\u2019 previously declared here\n   24 |     long midpos = 0;\n  \
    \    |          ^~~~~~\n/tmp/tmpjhy8hli6.cpp:60:10: error: redeclaration of \u2018\
    long int midpos\u2019\n   60 |     long midpos = 0;\n      |          ^~~~~~\n\
    /tmp/tmpjhy8hli6.cpp:24:10: note: \u2018long int midpos\u2019 previously declared\
    \ here\n   24 |     long midpos = 0;\n      |          ^~~~~~\n/tmp/tmpjhy8hli6.cpp:66:10:\
    \ error: redeclaration of \u2018long int midpos\u2019\n   66 |     long midpos\
    \ = 0;\n      |          ^~~~~~\n/tmp/tmpjhy8hli6.cpp:24:10: note: \u2018long\
    \ int midpos\u2019 previously declared here\n   24 |     long midpos = 0;\n  \
    \    |          ^~~~~~\n/tmp/tmpjhy8hli6.cpp:72:10: error: redeclaration of \u2018\
    long int midpos\u2019\n   72 |     long midpos = 0;\n      |          ^~~~~~\n\
    /tmp/tmpjhy8hli6.cpp:24:10: note: \u2018long int midpos\u2019 previously declared\
    \ here\n   24 |     long midpos = 0;\n      |          ^~~~~~\n/tmp/tmpjhy8hli6.cpp:78:10:\
    \ error: redeclaration of \u2018long int midpos\u2019\n   78 |     long midpos\
    \ = 0;\n      |          ^~~~~~\n/tmp/tmpjhy8hli6.cpp:24:10: note: \u2018long\
    \ int midpos\u2019 previously declared here\n   24 |     long midpos = 0;\n  \
    \    |          ^~~~~~\n/tmp/tmpjhy8hli6.cpp:84:10: error: redeclaration of \u2018\
    long int midpos\u2019\n   84 |     long midpos = 0;\n      |          ^~~~~~\n\
    /tmp/tmpjhy8hli6.cpp:24:10: note: \u2018long int midpos\u2019 previously declared\
    \ here\n   24 |     long midpos = 0;\n      |          ^~~~~~\n/tmp/tmpjhy8hli6.cpp:90:10:\
    \ error: redeclaration of \u2018long int midpos\u2019\n   90 |     long midpos\
    \ = 0;\n      |          ^~~~~~\n/tmp/tmpjhy8hli6.cpp:24:10: note: \u2018long\
    \ int midpos\u2019 previously declared here\n   24 |     long midpos = 0;\n  \
    \    |          ^~~~~~\n/tmp/tmpjhy8hli6.cpp:96:10: error: redeclaration of \u2018\
    long int midpos\u2019\n   96 |     long midpos = 0;\n      |          ^~~~~~\n\
    /tmp/tmpjhy8hli6.cpp:24:10: note: \u2018long int midpos\u2019 previously declared\
    \ here\n   24 |     long midpos = 0;\n      |          ^~~~~~\n/tmp/tmpjhy8hli6.cpp:102:10:\
    \ error: redeclaration of \u2018long int midpos\u2019\n  102 |     long midpos\
    \ = 0;\n      |          ^~~~~~\n/tmp/tmpjhy8hli6.cpp:24:10: note: \u2018long\
    \ int midpos\u2019 previously declared here\n   24 |     long midpos = 0;\n  \
    \    |          ^~~~~~\n/tmp/tmpjhy8hli6.cpp:108:10: error: redeclaration of \u2018\
    long int midpos\u2019\n  108 |     long midpos = 0;\n      |          ^~~~~~\n\
    /tmp/tmpjhy8hli6.cpp:24:10: note: \u2018long int midpos\u2019 previously declared\
    \ here\n   24 |     long midpos = 0;\n      |          ^~~~~~\n/tmp/tmpjhy8hli6.cpp:114:10:\
    \ error: redeclaration of \u2018long int midpos\u2019\n  114 |     long midpos\
    \ = 0;\n      |          ^~~~~~\n/tmp/tmpjhy8hli6.cpp:24:10: note: \u2018long\
    \ int midpos\u2019 previously declared here\n   24 |     long midpos = 0;\n  \
    \    |          ^~~~~~\n/tmp/tmpjhy8hli6.cpp:120:10: error: redeclaration of \u2018\
    long int midpos\u2019\n  120 |     long midpos = 0;\n      |          ^~~~~~\n\
    /tmp/tmpjhy8hli6.cpp:24:10: note: \u2018long int midpos\u2019 previously declared\
    \ here\n   24 |     long midpos = 0;\n      |          ^~~~~~\n/tmp/tmpjhy8hli6.cpp:121:16:\
    \ error: expected \u2018;\u2019 before \u2018}\u2019 token\n  121 |     for (long\
    \ i\n      |                ^\n      |                ;\n  122 | }\n      | ~\
    \               \n/tmp/tmpjhy8hli6.cpp:122:1: error: expected primary-expression\
    \ before \u2018}\u2019 token\n  122 | }\n      | ^\n/tmp/tmpjhy8hli6.cpp:121:16:\
    \ error: expected \u2018;\u2019 before \u2018}\u2019 token\n  121 |     for (long\
    \ i\n      |                ^\n      |                ;\n  122 | }\n      | ~\
    \               \n/tmp/tmpjhy8hli6.cpp:122:1: error: expected primary-expression\
    \ before \u2018}\u2019 token\n  122 | }\n      | ^\n/tmp/tmpjhy8hli6.cpp:121:16:\
    \ error: expected \u2018)\u2019 before \u2018}\u2019 token\n  121 |     for (long\
    \ i\n      |         ~      ^\n      |                )\n  122 | }\n      | ~\
    \               \n/tmp/tmpjhy8hli6.cpp:122:1: error: expected primary-expression\
    \ before \u2018}\u2019 token\n  122 | }\n      | ^\n/tmp/tmpjhy8hli6.cpp:122:1:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    std::vector<long>\
    \ result;\n    long min = lst.front();\n    long max = lst.back();\n    for (long\
    \ i : lst) {\n        if (i < min) {\n            min = i;\n        }\n      \
    \  if (i > max) {\n            max = i;\n        }\n    }\n    for (long i : lst)\
    \ {\n        if (i == min) {\n            result.push_back(min);\n        } else\
    \ if (i == max) {\n            result.push_back(max);\n        } else {\n    \
    \        result.push_back(i);\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9}))) == (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  stdout: ''
  stderr: "tmpgec6x0_z: /tmp/tmpgec6x0_z.cpp:35: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    std::vector<long>\
    \ res;\n    if (lst.size() == 0) {\n        return res;\n    }\n    long min =\
    \ lst[0];\n    long max = lst[0];\n    for (long i : lst) {\n        if (i < min)\
    \ {\n            min = i;\n        }\n        if (i > max) {\n            max\
    \ = i;\n        }\n    }\n    res.push_back(min);\n    res.push_back(max);\n \
    \   for (long i : lst) {\n        if (i < min) {\n            long temp = min;\n\
    \            min = i;\n            while (min != temp) {\n                res.push_back(temp);\n\
    \                temp = temp + 1;\n            }\n        }\n        if (i > max)\
    \ {\n            long temp = max;\n            max = i;\n            while (max\
    \ != temp) {\n                res.push_back(temp);\n                temp = temp\
    \ + 1;\n            }\n        }\n    }\n    res.push_back(min);\n    return res;\n\
    }\nint main() {\n    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9}))) == (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  stdout: ''
  stderr: "tmp3lwjfju5: /tmp/tmp3lwjfju5.cpp:50: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    // Write\
    \ your code here\n    std::vector<long> result;\n    long min = lst.front();\n\
    \    long max = lst.back();\n    long mid = min + (max - min) / 2;\n    for (long\
    \ i : lst) {\n        if (i < mid) {\n            result.push_back(i);\n     \
    \   } else if (i > mid) {\n            result.push_back(mid);\n        } else\
    \ {\n            result.push_back(mid);\n            result.push_back(i);\n  \
    \      }\n    }\n    return result;\n}\nint main() {\n    auto candidate = strange_sort_list;\n\
    \    assert(candidate((std::vector<long>({1, 2, 3, 4}))) == (std::vector<long>({1,\
    \ 4, 2, 3})));\n    assert(candidate((std::vector<long>({5, 6, 7, 8, 9}))) ==\
    \ (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  stdout: ''
  stderr: "tmpda0gc_fd: /tmp/tmpda0gc_fd.cpp:30: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    std::vector<long>\
    \ res;\n    if (lst.size() == 0) {\n        return res;\n    }\n    long min =\
    \ lst[0];\n    long max = lst[0];\n    for (long i : lst) {\n        if (i < min)\
    \ {\n            min = i;\n        } else if (i > max) {\n            max = i;\n\
    \        }\n    }\n    res.push_back(min);\n    res.push_back(max);\n    for (long\
    \ i : lst) {\n        if (i == min) {\n            res.push_back(i);\n       \
    \ } else if (i == max) {\n            res.push_back(i);\n        } else {\n  \
    \          res.push_back(i);\n            res.push_back(max);\n            res.push_back(min);\n\
    \        }\n    }\n    return res;\n}\nint main() {\n    auto candidate = strange_sort_list;\n\
    \    assert(candidate((std::vector<long>({1, 2, 3, 4}))) == (std::vector<long>({1,\
    \ 4, 2, 3})));\n    assert(candidate((std::vector<long>({5, 6, 7, 8, 9}))) ==\
    \ (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  stdout: ''
  stderr: "tmpj9njpxhc: /tmp/tmpj9njpxhc.cpp:41: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    std::vector<long>\
    \ res;\n    if (lst.size() == 0) {\n        return res;\n    }\n    long min =\
    \ lst[0];\n    long max = lst[0];\n    for (long i : lst) {\n        if (i < min)\
    \ {\n            min = i;\n        }\n        if (i > max) {\n            max\
    \ = i;\n        }\n    }\n    res.push_back(min);\n    res.push_back(max);\n \
    \   for (long i : lst) {\n        if (i == max) {\n            long j = max -\
    \ 1;\n            while (j > 0 && lst[j] == i) {\n                res.push_back(lst[j--]);\n\
    \            }\n        } else if (i == min) {\n            long j = min + 1;\n\
    \            while (j < lst.size() && lst[j] == i) {\n                res.push_back(lst[j++]);\n\
    \            }\n        } else {\n            long j = min + 1;\n            while\
    \ (j < lst.size() && lst[j] == i) {\n                res.push_back(lst[j++]);\n\
    \            }\n            j = max - 1;\n            while (j > 0 && lst[j] ==\
    \ i) {\n                res.push_back(lst[j--]);\n            }\n        }\n \
    \   }\n    return res;\n}\nint main() {\n    auto candidate = strange_sort_list;\n\
    \    assert(candidate((std::vector<long>({1, 2, 3, 4}))) == (std::vector<long>({1,\
    \ 4, 2, 3})));\n    assert(candidate((std::vector<long>({5, 6, 7, 8, 9}))) ==\
    \ (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  stdout: ''
  stderr: "tmpn3zqen_v: /tmp/tmpn3zqen_v.cpp:53: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    std::vector<long>\
    \ result;\n    long min = lst.front();\n    long max = lst.back();\n    for (long\
    \ i : lst) {\n        if (i < min) {\n            min = i;\n        }\n      \
    \  if (i > max) {\n            max = i;\n        }\n    }\n    for (long i : lst)\
    \ {\n        if (i == min) {\n            result.push_back(min);\n        } else\
    \ if (i == max) {\n            result.push_back(max);\n        } else {\n    \
    \        result.push_back(i);\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9}))) == (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  stdout: ''
  stderr: "tmp42m7amat: /tmp/tmp42m7amat.cpp:35: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    std::vector<long>\
    \ res;\n    for (long i : lst) {\n        res.push_back(i);\n    }\n    std::sort(res.begin(),\
    \ res.end());\n    return res;\n}\nint main() {\n    auto candidate = strange_sort_list;\n\
    \    assert(candidate((std::vector<long>({1, 2, 3, 4}))) == (std::vector<long>({1,\
    \ 4, 2, 3})));\n    assert(candidate((std::vector<long>({5, 6, 7, 8, 9}))) ==\
    \ (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  stdout: ''
  stderr: "tmprzubs72w: /tmp/tmprzubs72w.cpp:20: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    std::vector<long>\
    \ res;\n    res.reserve(lst.size());\n    for (long i : lst) {\n        res.push_back(i);\n\
    \    }\n    std::sort(res.begin(), res.end());\n    return res;\n}\nint main()\
    \ {\n    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9}))) == (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  stdout: ''
  stderr: "tmp0vm5olsg: /tmp/tmp0vm5olsg.cpp:21: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    // Write\
    \ your code here\n    std::vector<long> result;\n    long min = lst.front();\n\
    \    long max = lst.back();\n    long mid = 0;\n    for (long i : lst) {\n   \
    \     if (i < min) {\n            min = i;\n        } else if (i > max) {\n  \
    \          max = i;\n        }\n    }\n    mid = (min + max) / 2;\n    for (long\
    \ i : lst) {\n        if (i < mid) {\n            result.push_back(i);\n     \
    \   } else if (i > mid) {\n            result.push_back(mid);\n        } else\
    \ {\n            result.push_back(mid);\n            result.push_back(i);\n  \
    \      }\n    }\n    return result;\n}\nint main() {\n    auto candidate = strange_sort_list;\n\
    \    assert(candidate((std::vector<long>({1, 2, 3, 4}))) == (std::vector<long>({1,\
    \ 4, 2, 3})));\n    assert(candidate((std::vector<long>({5, 6, 7, 8, 9}))) ==\
    \ (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  stdout: ''
  stderr: "tmp_8rw6wjs: /tmp/tmp_8rw6wjs.cpp:38: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    // Write\
    \ your code here.\n    std::vector<long> result;\n    long min = lst.front();\n\
    \    long max = lst.back();\n    for (long i : lst) {\n        if (i < min) {\n\
    \            min = i;\n        }\n        if (i > max) {\n            max = i;\n\
    \        }\n    }\n    for (long i : lst) {\n        if (i == min) {\n       \
    \     result.push_back(min);\n        } else if (i == max) {\n            result.push_back(max);\n\
    \        } else {\n            result.push_back(i);\n        }\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9}))) == (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  stdout: ''
  stderr: "tmpg0glia97: /tmp/tmpg0glia97.cpp:36: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    std::vector<long>\
    \ result;\n    long minval = std::numeric_limits<long>::min();\n    long maxval\
    \ = std::numeric_limits<long>::max();\n    for (long i : lst) {\n        if (i\
    \ < minval) {\n            result.push_back(minval);\n            minval = i;\n\
    \        } else if (i > maxval) {\n            result.push_back(maxval);\n   \
    \         maxval = i;\n        } else {\n            result.push_back(i);\n  \
    \      }\n    }\n    return result;\n}\nint main() {\n    auto candidate = strange_sort_list;\n\
    \    assert(candidate((std::vector<long>({1, 2, 3, 4}))) == (std::vector<long>({1,\
    \ 4, 2, 3})));\n    assert(candidate((std::vector<long>({5, 6, 7, 8, 9}))) ==\
    \ (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  stdout: ''
  stderr: "tmp7tadqmb7: /tmp/tmp7tadqmb7.cpp:29: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    std::vector<long>\
    \ res;\n    long min = lst.front();\n    long max = lst.back();\n    for (long\
    \ i : lst) {\n        if (i < min) {\n            min = i;\n        }\n      \
    \  if (i > max) {\n            max = i;\n        }\n    }\n    res.push_back(min);\n\
    \    res.push_back(max);\n    for (long i : lst) {\n        if (i < min) {\n \
    \           min = i;\n        }\n        if (i > max) {\n            max = i;\n\
    \        }\n    }\n    res.push_back(min);\n    res.push_back(max);\n    return\
    \ res;\n}\nint main() {\n    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9}))) == (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  stdout: ''
  stderr: "tmpk_4tvcbk: /tmp/tmpk_4tvcbk.cpp:38: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    std::vector<long>\
    \ result;\n    for (long i : lst) {\n        result.push_back(i);\n    }\n   \
    \ std::sort(result.begin(), result.end());\n    return result;\n}\nint main()\
    \ {\n    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9}))) == (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  stdout: ''
  stderr: "tmp0ljf_dva: /tmp/tmp0ljf_dva.cpp:20: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    // Your\
    \ code here\n    std::vector<long> ans;\n    long min = lst.front();\n    long\
    \ max = lst.back();\n    for (long i : lst) {\n        if (i < min) {\n      \
    \      min = i;\n        }\n        if (i > max) {\n            max = i;\n   \
    \     }\n    }\n    long mid = min + (max - min) / 2;\n    for (long i : lst)\
    \ {\n        if (i < mid) {\n            ans.push_back(i);\n        }\n    }\n\
    \    for (long i : lst) {\n        if (i > mid) {\n            ans.push_back(i);\n\
    \        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate = strange_sort_list;\n\
    \    assert(candidate((std::vector<long>({1, 2, 3, 4}))) == (std::vector<long>({1,\
    \ 4, 2, 3})));\n    assert(candidate((std::vector<long>({5, 6, 7, 8, 9}))) ==\
    \ (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  stdout: ''
  stderr: "tmpuaht23x1: /tmp/tmpuaht23x1.cpp:38: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    std::vector<long>\
    \ res;\n    res.reserve(lst.size());\n    for (long i : lst) {\n        res.push_back(i);\n\
    \    }\n    std::sort(res.begin(), res.end());\n    return res;\n}\nint main()\
    \ {\n    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9}))) == (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  stdout: ''
  stderr: "tmpb83xodzt: /tmp/tmpb83xodzt.cpp:21: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    std::vector<long>\
    \ res;\n    res.reserve(lst.size());\n    for (long i : lst) {\n        res.push_back(i);\n\
    \    }\n    std::sort(res.begin(), res.end());\n    return res;\n}\nint main()\
    \ {\n    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9}))) == (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  stdout: ''
  stderr: "tmp219j_ghk: /tmp/tmp219j_ghk.cpp:21: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    // Your\
    \ code here\n    std::vector<long> result;\n    long min = lst.front();\n    long\
    \ max = lst.back();\n    for (long i : lst) {\n        if (i < min) {\n      \
    \      min = i;\n        }\n        if (i > max) {\n            max = i;\n   \
    \     }\n    }\n    for (long i : lst) {\n        if (i < min) {\n           \
    \ result.push_back(min);\n            min = i;\n        } else if (i > max) {\n\
    \            result.push_back(max);\n            max = i;\n        } else {\n\
    \            result.push_back(i);\n        }\n    }\n    return result;\n}\nint\
    \ main() {\n    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9}))) == (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  stdout: ''
  stderr: "tmpi9esw7tl: /tmp/tmpi9esw7tl.cpp:38: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    std::vector<long>\
    \ lst2;\n    long minval = *std::min_element(lst.begin(), lst.end());\n    long\
    \ maxval = *std::max_element(lst.begin(), lst.end());\n    long midval = minval\
    \ + maxval / 2;\n    long midval2 = minval + maxval / 2;\n    long midval3 = minval\
    \ + maxval / 2;\n    long midval4 = minval + maxval / 2;\n    long midval5 = minval\
    \ + maxval / 2;\n    long midval6 = minval + maxval / 2;\n    long midval7 = minval\
    \ + maxval / 2;\n    long midval8 = minval + maxval / 2;\n    long midval9 = minval\
    \ + maxval / 2;\n    long midval10 = minval + maxval / 2;\n    long midval11 =\
    \ minval + maxval / 2;\n    long midval12 = minval + maxval / 2;\n    long midval13\
    \ = minval + maxval / 2;\n    long midval14 = minval + maxval / 2;\n    long midval15\
    \ = minval + maxval / 2;\n    long midval16 = minval + maxval / 2;\n    long midval17\
    \ = minval + maxval / 2;\n    long midval18 = minval + maxval / 2;\n    long midval19\
    \ = minval + maxval / 2;\n    long midval20 = minval + maxval / 2;\n    long midval21\
    \ = minval + maxval / 2;\n    long midval22 = minval + maxval / 2;\n    long midval23\
    \ = minval + maxval / 2;\n    long midval24 = minval + maxval / 2;\n    long midval25\
    \ = minval + maxval / 2;\n    long midval26 = minval + maxval / 2;\n    long midval27\
    \ = minval + maxval / 2;\n    long midval28 = minval + maxval / 2;\n    long midval29\
    \ = minval + maxval / 2;\n    long midval30 = minval + maxval / 2;\n    long midval31\
    \ = minval + maxval / 2;\n    long midval32 = minval + maxval / 2;\n    long midval33\
    \ = minval + maxval / 2;\n    long midval34 = minval + maxval / 2;\n    long midval35\
    \ = minval\n}\nint main() {\n    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9}))) == (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  stdout: ''
  stderr: "/tmp/tmpb24y_vhq.cpp: In function \u2018std::vector<long int> strange_sort_list(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpb24y_vhq.cpp:49:1: error: expected \u2018,\u2019 or \u2018\
    ;\u2019 before \u2018}\u2019 token\n   49 | }\n      | ^\n/tmp/tmpb24y_vhq.cpp:49:1:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    // Write\
    \ your code here\n    std::vector<long> result;\n    long min = lst.front();\n\
    \    long max = lst.back();\n    for (long i : lst) {\n        if (i < min) {\n\
    \            min = i;\n        }\n        if (i > max) {\n            max = i;\n\
    \        }\n    }\n    for (long i : lst) {\n        if (i == min) {\n       \
    \     result.push_back(min);\n        } else if (i == max) {\n            result.push_back(max);\n\
    \        } else {\n            result.push_back(i);\n        }\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9}))) == (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  stdout: ''
  stderr: "tmpbsi_i15x: /tmp/tmpbsi_i15x.cpp:36: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    // Write\
    \ your code here\n    std::vector<long> ans;\n    long min = lst.front();\n  \
    \  long max = lst.back();\n    for (long i : lst) {\n        if (i < min) {\n\
    \            min = i;\n        }\n        if (i > max) {\n            max = i;\n\
    \        }\n    }\n    long mid = min + (max - min) / 2;\n    long left = mid;\n\
    \    long right = mid;\n    for (long i : lst) {\n        if (i < mid) {\n   \
    \         left = i;\n        }\n        if (i > mid) {\n            right = i;\n\
    \        }\n    }\n    ans.push_back(left);\n    ans.push_back(right);\n    ans.push_back(min);\n\
    \    return ans;\n}\nint main() {\n    auto candidate = strange_sort_list;\n \
    \   assert(candidate((std::vector<long>({1, 2, 3, 4}))) == (std::vector<long>({1,\
    \ 4, 2, 3})));\n    assert(candidate((std::vector<long>({5, 6, 7, 8, 9}))) ==\
    \ (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  stdout: ''
  stderr: "tmp9nxabocv: /tmp/tmp9nxabocv.cpp:41: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    // Write\
    \ your code here\n    std::vector<long> ans;\n    long minVal = *std::min_element(lst.begin(),\
    \ lst.end());\n    long maxVal = *std::max_element(lst.begin(), lst.end());\n\
    \    long midVal = (minVal + maxVal) / 2;\n    long midVal2 = minVal;\n    for\
    \ (long i = 0; i < lst.size(); i++) {\n        if (lst[i] < midVal) {\n      \
    \      ans.push_back(midVal2);\n            midVal2 = midVal;\n            midVal\
    \ = lst[i];\n        } else if (lst[i] > midVal) {\n            midVal2 = midVal;\n\
    \            midVal = lst[i];\n        } else {\n            midVal2 = lst[i];\n\
    \        }\n    }\n    ans.push_back(midVal2);\n    return ans;\n}\nint main()\
    \ {\n    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9}))) == (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  stdout: ''
  stderr: "tmpl0rrafjn: /tmp/tmpl0rrafjn.cpp:34: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    std::vector<long>\
    \ lst2;\n    long min = lst.front();\n    long max = lst.back();\n    for (long\
    \ i : lst) {\n        if (i < min) {\n            min = i;\n        }\n      \
    \  if (i > max) {\n            max = i;\n        }\n    }\n    lst2.push_back(min);\n\
    \    lst2.push_back(max);\n    for (long i : lst) {\n        if (i < min) {\n\
    \            lst2.push_back(i);\n        }\n        if (i > max) {\n         \
    \   lst2.push_back(i);\n        }\n    }\n    return lst2;\n}\nint main() {\n\
    \    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9}))) == (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  stdout: ''
  stderr: "tmpv_d_0nte: /tmp/tmpv_d_0nte.cpp:36: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    // Your\
    \ code here\n    std::vector<long> result;\n    long min = lst.front();\n    long\
    \ max = lst.back();\n    for (long i : lst) {\n        if (i < min) {\n      \
    \      min = i;\n        }\n        if (i > max) {\n            max = i;\n   \
    \     }\n    }\n    for (long i : lst) {\n        if (i == min) {\n          \
    \  result.push_back(min);\n        } else if (i == max) {\n            result.push_back(max);\n\
    \        } else {\n            result.push_back(i);\n        }\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9}))) == (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  stdout: ''
  stderr: "tmp52978ah4: /tmp/tmp52978ah4.cpp:36: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    // Write\
    \ your code here\n    std::vector<long> res;\n    long min = lst.front();\n  \
    \  long max = lst.back();\n    for(long i : lst){\n        if(i<min){\n      \
    \      min=i;\n        }\n        if(i>max){\n            max=i;\n        }\n\
    \    }\n    for(long i : lst){\n        if(i<min){\n            min=i;\n     \
    \   }\n        if(i>max){\n            max=i;\n        }\n    }\n    for(long\
    \ i : lst){\n        if(i<min){\n            min=i;\n        }\n        if(i>max){\n\
    \            max=i;\n        }\n    }\n    for(long i : lst){\n        if(i<min){\n\
    \            min=i;\n        }\n        if(i>max){\n            max=i;\n     \
    \   }\n    }\n    for(long i : lst){\n        if(i<min){\n            min=i;\n\
    \        }\n        if(i>max){\n            max=i;\n        }\n    }\n    for(long\
    \ i : lst){\n        if(i<min){\n            min=i;\n        }\n        if(i>max){\n\
    \            max=i;\n        }\n    }\n    for(long i : lst){\n        if(i<min){\n\
    \            min=i;\n        }\n        if(i>max){\n            max=i;\n     \
    \   }\n    }\n    for(long i : lst){\n        if(i<min){\n            min=i;\n\
    \        }\n        if(i>max){\n            max=i;\n        }\n    }\n    for(long\
    \ i : lst){\n        if(i<min){\n            min=i;\n        }\n        if(i>max){\n\
    \            max=i;\n        }\n    }\n    for(long i : lst){\n        if(i<min){\n\
    \            min=i;\n        }\n        if(i>max){\n            max=i;\n     \
    \   }\n    }\n    for(long i : lst){\n        if(i<min){\n            min=i;\n\
    \        }\n        if(i>max){\n            max=i;\n        }\n    }\n    for(long\
    \ i : lst){\n        if(i<min){\n            min=i;\n        }\n        if(i>max){\n\
    \            max=i;\n        }\n    }\n    for(long i : lst){\n        if(i<min){\n\
    \            min=i;\n        }\n        if(i>max){\n            max=i;\n     \
    \   }\n    }\n    for(long i : lst){\n        if(i<min){\n            min=i;\n\
    \        }\n        if(i>max){\n            max=i;\n        }\n    }\n    for(long\
    \ i : lst){\n        if\n}\nint main() {\n    auto candidate = strange_sort_list;\n\
    \    assert(candidate((std::vector<long>({1, 2, 3, 4}))) == (std::vector<long>({1,\
    \ 4, 2, 3})));\n    assert(candidate((std::vector<long>({5, 6, 7, 8, 9}))) ==\
    \ (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  stdout: ''
  stderr: "/tmp/tmp_47qdqdj.cpp: In function \u2018std::vector<long int> strange_sort_list(std::vector<long\
    \ int>)\u2019:\n/tmp/tmp_47qdqdj.cpp:129:1: error: expected \u2018(\u2019 before\
    \ \u2018}\u2019 token\n  129 | }\n      | ^\n      | (\n/tmp/tmp_47qdqdj.cpp:130:12:\
    \ error: a function-definition is not allowed here before \u2018{\u2019 token\n\
    \  130 | int main() {\n      |            ^\n/tmp/tmp_47qdqdj.cpp:141:1: error:\
    \ expected \u2018}\u2019 at end of input\n  141 | }\n      | ^\n/tmp/tmp_47qdqdj.cpp:10:60:\
    \ note: to match this \u2018{\u2019\n   10 | std::vector<long> strange_sort_list(std::vector<long>\
    \ lst) {\n      |                                                            ^\n\
    /tmp/tmp_47qdqdj.cpp:141:1: warning: no return statement in function returning\
    \ non-void [-Wreturn-type]\n  141 | }\n      | ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    // Your\
    \ code here\n    std::vector<long> ans;\n    long min = lst.front();\n    long\
    \ max = lst.back();\n    for (long i : lst) {\n        if (i < min) {\n      \
    \      min = i;\n        }\n        if (i > max) {\n            max = i;\n   \
    \     }\n    }\n    long mid = (min + max) / 2;\n    for (long i : lst) {\n  \
    \      if (i < mid) {\n            ans.push_back(i);\n        }\n        if (i\
    \ > mid) {\n            ans.push_back(mid);\n        }\n    }\n    ans.push_back(mid);\n\
    \    return ans;\n}\nint main() {\n    auto candidate = strange_sort_list;\n \
    \   assert(candidate((std::vector<long>({1, 2, 3, 4}))) == (std::vector<long>({1,\
    \ 4, 2, 3})));\n    assert(candidate((std::vector<long>({5, 6, 7, 8, 9}))) ==\
    \ (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  stdout: ''
  stderr: "tmpk511ls_q: /tmp/tmpk511ls_q.cpp:37: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    std::vector<long>\
    \ res;\n    res.reserve(lst.size());\n    for (long i : lst) {\n        res.push_back(i);\n\
    \    }\n    std::sort(res.begin(), res.end());\n    return res;\n}\nint main()\
    \ {\n    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9}))) == (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  stdout: ''
  stderr: "tmp72yz936c: /tmp/tmp72yz936c.cpp:21: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    // Your\
    \ code here\n    std::vector<long> res;\n    res.reserve(lst.size());\n    long\
    \ min = lst.front();\n    long max = lst.back();\n    for (long i : lst) {\n \
    \       if (i < min) {\n            min = i;\n        } else if (i > max) {\n\
    \            max = i;\n        }\n    }\n    for (long i : lst) {\n        if\
    \ (i == min) {\n            res.push_back(min);\n        } else if (i == max)\
    \ {\n            res.push_back(max);\n        } else {\n            res.push_back(i);\n\
    \        }\n    }\n    return res;\n}\nint main() {\n    auto candidate = strange_sort_list;\n\
    \    assert(candidate((std::vector<long>({1, 2, 3, 4}))) == (std::vector<long>({1,\
    \ 4, 2, 3})));\n    assert(candidate((std::vector<long>({5, 6, 7, 8, 9}))) ==\
    \ (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  stdout: ''
  stderr: "tmpl02wd5nn: /tmp/tmpl02wd5nn.cpp:36: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    std::vector<long>\
    \ res;\n    long min = *std::min_element(lst.begin(), lst.end());\n    long max\
    \ = *std::max_element(lst.begin(), lst.end());\n    long mid = min + (max - min)\
    \ / 2;\n    long mid2 = mid + (max - min) / 2;\n    long mid3 = mid2 + (max -\
    \ min) / 2;\n    long mid4 = mid3 + (max - min) / 2;\n    long mid5 = mid4 + (max\
    \ - min) / 2;\n    long mid6 = mid5 + (max - min) / 2;\n    long mid7 = mid6 +\
    \ (max - min) / 2;\n    long mid8 = mid7 + (max - min) / 2;\n    long mid9 = mid8\
    \ + (max - min) / 2;\n    long mid10 = mid9 + (max - min) / 2;\n    long mid11\
    \ = mid10 + (max - min) / 2;\n    long mid12 = mid11 + (max - min) / 2;\n    long\
    \ mid13 = mid12 + (max - min) / 2;\n    long mid14 = mid13 + (max - min) / 2;\n\
    \    long mid15 = mid14 + (max - min) / 2;\n    long mid16 = mid15 + (max - min)\
    \ / 2;\n    long mid17 = mid16 + (max - min) / 2;\n    long mid18 = mid17 + (max\
    \ - min) / 2;\n    long mid19 = mid18 + (max - min) / 2;\n    long mid20 = mid19\
    \ + (max - min) / 2;\n    long mid21 = mid20 + (max - min) / 2;\n    long mid22\
    \ = mid21 + (max - min) / 2;\n    long mid23 = mid22 + (max - min) / 2;\n    long\
    \ mid24 = mid23 + (max - min) / 2;\n    long mid25 = mid24 + (max - min) / 2;\n\
    \    long mid26 = mid25 + (max - min) / 2;\n    long mid27 = mid26 + (max - min)\
    \ / 2;\n    long mid28 = mid27 + (max - min) / 2;\n    long mid29 = mid28 + (max\
    \ - min) / 2;\n    long mid30 = mid29 + (max - min) / 2;\n    long mid31 = mid30\
    \ + (max - min) / 2;\n    long mid32 = mid31 + (max - min) / 2;\n    long mid33\
    \ = mid32 + (max - min) / 2;\n    long mid34 = mid33 + (max - min) / 2;\n    long\
    \ mid35 = mid34 + (max - min) / 2;\n    long mid36 = mid35 + (max - min) / 2;\n\
    \    long mid37 = mid36 + (max - min) / 2;\n    long mid38 = mid37\n}\nint main()\
    \ {\n    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9}))) == (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  stdout: ''
  stderr: "/tmp/tmpd6fnjq6i.cpp: In function \u2018std::vector<long int> strange_sort_list(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpd6fnjq6i.cpp:52:1: error: expected \u2018,\u2019 or \u2018\
    ;\u2019 before \u2018}\u2019 token\n   52 | }\n      | ^\n/tmp/tmpd6fnjq6i.cpp:52:1:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    std::vector<long>\
    \ res;\n    res.reserve(lst.size());\n    for (long i : lst) {\n        res.push_back(i);\n\
    \    }\n    std::sort(res.begin(), res.end());\n    return res;\n}\nint main()\
    \ {\n    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9}))) == (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  stdout: ''
  stderr: "tmpf457ar8j: /tmp/tmpf457ar8j.cpp:21: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    std::vector<long>\
    \ result;\n    long min = std::numeric_limits<long>::min();\n    long max = std::numeric_limits<long>::max();\n\
    \    for (long i : lst) {\n        if (i < min) {\n            min = i;\n    \
    \    }\n        if (i > max) {\n            max = i;\n        }\n    }\n    for\
    \ (long i : lst) {\n        if (i < min) {\n            result.push_back(min);\n\
    \            min = i;\n        } else if (i > max) {\n            result.push_back(max);\n\
    \            max = i;\n        } else {\n            result.push_back(i);\n  \
    \      }\n    }\n    return result;\n}\nint main() {\n    auto candidate = strange_sort_list;\n\
    \    assert(candidate((std::vector<long>({1, 2, 3, 4}))) == (std::vector<long>({1,\
    \ 4, 2, 3})));\n    assert(candidate((std::vector<long>({5, 6, 7, 8, 9}))) ==\
    \ (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  stdout: ''
  stderr: "tmpokuenfd7: /tmp/tmpokuenfd7.cpp:37: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    // Write\
    \ your code here.\n    std::vector<long> result;\n    long min = lst.front();\n\
    \    long max = lst.back();\n    for (long i : lst) {\n        if (i < min) {\n\
    \            min = i;\n        }\n        if (i > max) {\n            max = i;\n\
    \        }\n    }\n    for (long i : lst) {\n        if (i == min) {\n       \
    \     result.push_back(min);\n        } else if (i == max) {\n            result.push_back(max);\n\
    \        } else {\n            result.push_back(i);\n        }\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9}))) == (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  stdout: ''
  stderr: "tmpfq0tz6mx: /tmp/tmpfq0tz6mx.cpp:36: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    std::vector<long>\
    \ res;\n    res.reserve(lst.size());\n    for (long i : lst) {\n        res.push_back(i);\n\
    \    }\n    std::sort(res.begin(), res.end());\n    return res;\n}\nint main()\
    \ {\n    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9}))) == (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  stdout: ''
  stderr: "tmpb5r0l75i: /tmp/tmpb5r0l75i.cpp:21: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    std::vector<long>\
    \ res;\n    res.reserve(lst.size());\n    for (long i : lst) {\n        res.push_back(i);\n\
    \    }\n    std::sort(res.begin(), res.end());\n    return res;\n}\nint main()\
    \ {\n    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9}))) == (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  stdout: ''
  stderr: "tmplbx_l4ni: /tmp/tmplbx_l4ni.cpp:21: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    // Your\
    \ code here\n    std::vector<long> res;\n    long min = lst.front();\n    long\
    \ max = lst.back();\n    for (long i : lst) {\n        if (i < min) {\n      \
    \      min = i;\n        }\n        if (i > max) {\n            max = i;\n   \
    \     }\n    }\n    res.push_back(min);\n    res.push_back(max);\n    for (long\
    \ i : lst) {\n        if (i < min) {\n            min = i;\n        }\n      \
    \  if (i > max) {\n            max = i;\n        }\n    }\n    res.push_back(min);\n\
    \    res.push_back(max);\n    return res;\n}\nint main() {\n    auto candidate\
    \ = strange_sort_list;\n    assert(candidate((std::vector<long>({1, 2, 3, 4})))\
    \ == (std::vector<long>({1, 4, 2, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9}))) == (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  stdout: ''
  stderr: "tmp6e8kxh06: /tmp/tmp6e8kxh06.cpp:39: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    std::vector<long>\
    \ sorted_lst;\n    long min_val = std::numeric_limits<long>::min();\n    long\
    \ max_val = std::numeric_limits<long>::max();\n    for (long i : lst) {\n    \
    \    if (i < min_val) {\n            sorted_lst.push_back(i);\n        } else\
    \ if (i > max_val) {\n            sorted_lst.push_back(max_val);\n        } else\
    \ {\n            sorted_lst.push_back(min_val);\n            sorted_lst.push_back(i);\n\
    \        }\n    }\n    return sorted_lst;\n}\nint main() {\n    auto candidate\
    \ = strange_sort_list;\n    assert(candidate((std::vector<long>({1, 2, 3, 4})))\
    \ == (std::vector<long>({1, 4, 2, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9}))) == (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  stdout: ''
  stderr: "tmp6h7mmeqx: /tmp/tmp6h7mmeqx.cpp:28: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    // Write\
    \ your code here\n    std::vector<long> res;\n    long min = lst.front();\n  \
    \  long max = lst.back();\n    long mid;\n    for (long i : lst) {\n        if\
    \ (i < min) {\n            min = i;\n        }\n        if (i > max) {\n     \
    \       max = i;\n        }\n    }\n    mid = (min + max) / 2;\n    res.push_back(min);\n\
    \    res.push_back(mid);\n    res.push_back(max);\n    return res;\n}\nint main()\
    \ {\n    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9}))) == (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  stdout: ''
  stderr: "tmpgvklp7fl: /tmp/tmpgvklp7fl.cpp:32: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    std::vector<long>\
    \ res;\n    long minv = std::numeric_limits<long>::min();\n    long maxv = std::numeric_limits<long>::max();\n\
    \    for (long i : lst) {\n        if (i < minv) {\n            minv = i;\n  \
    \      } else if (i > maxv) {\n            maxv = i;\n        }\n    }\n    for\
    \ (long i = minv; i <= maxv; i++) {\n        res.push_back(i);\n    }\n    for\
    \ (long i = maxv; i >= minv; i--) {\n        res.push_back(i);\n    }\n    return\
    \ res;\n}\nint main() {\n    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9}))) == (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    // Your\
    \ code here\n    std::vector<long> res;\n    long min = lst.front();\n    long\
    \ max = lst.back();\n    for (long i : lst) {\n        if (i < min) {\n      \
    \      min = i;\n        }\n        if (i > max) {\n            max = i;\n   \
    \     }\n    }\n    for (long i : lst) {\n        if (i == min) {\n          \
    \  res.push_back(min);\n        } else if (i == max) {\n            res.push_back(max);\n\
    \        } else {\n            res.push_back(i);\n        }\n    }\n    return\
    \ res;\n}\nint main() {\n    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9}))) == (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  stdout: ''
  stderr: "tmpuhm0rhgx: /tmp/tmpuhm0rhgx.cpp:36: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    std::vector<long>\
    \ res;\n    long min = lst.front();\n    long max = lst.back();\n    for (long\
    \ i : lst) {\n        if (i < min) {\n            min = i;\n        }\n      \
    \  if (i > max) {\n            max = i;\n        }\n    }\n    for (long i : lst)\
    \ {\n        if (i == min) {\n            res.push_back(min);\n        } else\
    \ if (i == max) {\n            res.push_back(max);\n        } else {\n       \
    \     res.push_back(i);\n        }\n    }\n    return res;\n}\nint main() {\n\
    \    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9}))) == (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  stdout: ''
  stderr: "tmpxg0b3awb: /tmp/tmpxg0b3awb.cpp:35: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    // Write\
    \ your code here\n    std::vector<long> ans;\n    long min = lst.front();\n  \
    \  long max = lst.back();\n    long mid = 0;\n    for (long i : lst) {\n     \
    \   if (i < min) {\n            ans.push_back(min);\n            min = i;\n  \
    \      } else if (i > max) {\n            ans.push_back(max);\n            max\
    \ = i;\n        } else {\n            mid = i;\n        }\n    }\n    ans.push_back(min);\n\
    \    ans.push_back(max);\n    ans.push_back(mid);\n    return ans;\n}\nint main()\
    \ {\n    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9}))) == (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  stdout: ''
  stderr: "tmpjbh9v_x9: /tmp/tmpjbh9v_x9.cpp:34: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    // Write\
    \ your code here.\n    std::vector<long> res;\n    long min = lst.front();\n \
    \   long max = lst.back();\n    for (long i : lst) {\n        if (i < min) {\n\
    \            min = i;\n        }\n        if (i > max) {\n            max = i;\n\
    \        }\n    }\n    res.push_back(min);\n    res.push_back(max);\n    for (long\
    \ i : lst) {\n        if (i < min) {\n            long temp = min;\n         \
    \   min = i;\n            while (temp != i) {\n                res.push_back(temp);\n\
    \                temp = temp + 1;\n            }\n        }\n        if (i > max)\
    \ {\n            long temp = max;\n            max = i;\n            while (temp\
    \ != i) {\n                res.push_back(temp);\n                temp = temp -\
    \ 1;\n            }\n        }\n    }\n    res.push_back(min);\n    res.push_back(max);\n\
    \    return res;\n}\nint main() {\n    auto candidate = strange_sort_list;\n \
    \   assert(candidate((std::vector<long>({1, 2, 3, 4}))) == (std::vector<long>({1,\
    \ 4, 2, 3})));\n    assert(candidate((std::vector<long>({5, 6, 7, 8, 9}))) ==\
    \ (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  stdout: ''
  stderr: "tmpvvwppou1: /tmp/tmpvvwppou1.cpp:49: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    // Write\
    \ your code here.\n    std::vector<long> ans;\n    long min = lst.front();\n \
    \   long max = lst.back();\n    for (long i : lst) {\n        if (i < min) {\n\
    \            min = i;\n        }\n        if (i > max) {\n            max = i;\n\
    \        }\n    }\n    for (long i : lst) {\n        if (i < min) {\n        \
    \    ans.push_back(min);\n            min = i;\n        }\n        if (i > max)\
    \ {\n            ans.push_back(max);\n            max = i;\n        }\n    }\n\
    \    ans.push_back(min);\n    ans.push_back(max);\n    return ans;\n}\nint main()\
    \ {\n    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9}))) == (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  stdout: ''
  stderr: "tmpwdpiv4cm: /tmp/tmpwdpiv4cm.cpp:39: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    // Your\
    \ code here\n    std::vector<long> res;\n    res.reserve(lst.size());\n    for\
    \ (long i : lst) {\n        res.push_back(i);\n    }\n    std::sort(res.begin(),\
    \ res.end());\n    return res;\n}\nint main() {\n    auto candidate = strange_sort_list;\n\
    \    assert(candidate((std::vector<long>({1, 2, 3, 4}))) == (std::vector<long>({1,\
    \ 4, 2, 3})));\n    assert(candidate((std::vector<long>({5, 6, 7, 8, 9}))) ==\
    \ (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  stdout: ''
  stderr: "tmpnurv4t4z: /tmp/tmpnurv4t4z.cpp:22: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    std::vector<long>\
    \ lst2;\n    long minval = *std::min_element(lst.begin(), lst.end());\n    long\
    \ maxval = *std::max_element(lst.begin(), lst.end());\n    long midval = minval\
    \ + maxval / 2;\n    long midval2 = minval + maxval / 2;\n    long midval3 = minval\
    \ + maxval / 2;\n    long midval4 = minval + maxval / 2;\n    long midval5 = minval\
    \ + maxval / 2;\n    long midval6 = minval + maxval / 2;\n    long midval7 = minval\
    \ + maxval / 2;\n    long midval8 = minval + maxval / 2;\n    long midval9 = minval\
    \ + maxval / 2;\n    long midval10 = minval + maxval / 2;\n    long midval11 =\
    \ minval + maxval / 2;\n    long midval12 = minval + maxval / 2;\n    long midval13\
    \ = minval + maxval / 2;\n    long midval14 = minval + maxval / 2;\n    long midval15\
    \ = minval + maxval / 2;\n    long midval16 = minval + maxval / 2;\n    long midval17\
    \ = minval + maxval / 2;\n    long midval18 = minval + maxval / 2;\n    long midval19\
    \ = minval + maxval / 2;\n    long midval20 = minval + maxval / 2;\n    long midval21\
    \ = minval + maxval / 2;\n    long midval22 = minval + maxval / 2;\n    long midval23\
    \ = minval + maxval / 2;\n    long midval24 = minval + maxval / 2;\n    long midval25\
    \ = minval + maxval / 2;\n    long midval26 = minval + maxval / 2;\n    long midval27\
    \ = minval + maxval / 2;\n    long midval28 = minval + maxval / 2;\n    long midval29\
    \ = minval + maxval / 2;\n    long midval30 = minval + maxval / 2;\n    long midval31\
    \ = minval + maxval / 2;\n    long midval32 = minval + maxval / 2;\n    long midval33\
    \ = minval + maxval / 2;\n    long midval34 = minval + maxval / 2;\n    long midval35\
    \ = minval\n}\nint main() {\n    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9}))) == (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  stdout: ''
  stderr: "/tmp/tmph_2v67zr.cpp: In function \u2018std::vector<long int> strange_sort_list(std::vector<long\
    \ int>)\u2019:\n/tmp/tmph_2v67zr.cpp:49:1: error: expected \u2018,\u2019 or \u2018\
    ;\u2019 before \u2018}\u2019 token\n   49 | }\n      | ^\n/tmp/tmph_2v67zr.cpp:49:1:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    std::vector<long>\
    \ res;\n    long min = lst.front();\n    long max = lst.back();\n    for (long\
    \ i : lst) {\n        if (i < min) {\n            min = i;\n        } else if\
    \ (i > max) {\n            max = i;\n        }\n    }\n    res.push_back(min);\n\
    \    res.push_back(max);\n    for (long i : lst) {\n        if (i < min) {\n \
    \           res.push_back(i);\n        } else if (i > max) {\n            res.push_back(max\
    \ - i);\n        }\n    }\n    res.push_back(min);\n    return res;\n}\nint main()\
    \ {\n    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9}))) == (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  stdout: ''
  stderr: "tmp0_uvm6r0: /tmp/tmp0_uvm6r0.cpp:35: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    std::vector<long>\
    \ result;\n    long min = std::numeric_limits<long>::min();\n    long max = std::numeric_limits<long>::max();\n\
    \    for (long i : lst) {\n        if (i < min) {\n            min = i;\n    \
    \    }\n        if (i > max) {\n            max = i;\n        }\n    }\n    for\
    \ (long i : lst) {\n        if (i == min) {\n            result.push_back(min);\n\
    \        } else if (i == max) {\n            result.push_back(max);\n        }\
    \ else {\n            result.push_back(i);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9}))) == (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  stdout: ''
  stderr: "tmpf8d8w8z3: /tmp/tmpf8d8w8z3.cpp:35: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    std::vector<long>\
    \ lst2;\n    long min = std::numeric_limits<long>::min();\n    long max = std::numeric_limits<long>::max();\n\
    \    long mid = 0;\n    for (long i : lst) {\n        if (i < min) {\n       \
    \     min = i;\n        } else if (i > max) {\n            max = i;\n        }\n\
    \    }\n    mid = (min + max) / 2;\n    for (long i : lst) {\n        if (i <\
    \ mid) {\n            lst2.push_back(i);\n        } else if (i > mid) {\n    \
    \        lst2.push_back(max - i);\n        } else {\n            lst2.push_back(min\
    \ - i);\n        }\n    }\n    return lst2;\n}\nint main() {\n    auto candidate\
    \ = strange_sort_list;\n    assert(candidate((std::vector<long>({1, 2, 3, 4})))\
    \ == (std::vector<long>({1, 4, 2, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9}))) == (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  stdout: ''
  stderr: "tmpq4tdn0da: /tmp/tmpq4tdn0da.cpp:36: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    std::vector<long>\
    \ res;\n    res.reserve(lst.size());\n    for (long i : lst) {\n        res.push_back(i);\n\
    \    }\n    std::sort(res.begin(), res.end());\n    return res;\n}\nint main()\
    \ {\n    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9}))) == (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  stdout: ''
  stderr: "tmp9ybd4wxg: /tmp/tmp9ybd4wxg.cpp:21: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    std::vector<long>\
    \ result;\n    long min = lst.front();\n    long max = lst.back();\n    for (long\
    \ i : lst) {\n        if (i < min) {\n            min = i;\n        }\n      \
    \  if (i > max) {\n            max = i;\n        }\n    }\n    long mid = min\
    \ + (max - min) / 2;\n    long left = min;\n    long right = max;\n    while (left\
    \ < right) {\n        while (left < right && lst[left] < mid) {\n            left++;\n\
    \        }\n        while (left < right && lst[right] > mid) {\n            right--;\n\
    \        }\n        if (left < right) {\n            result.push_back(lst[left]);\n\
    \            left++;\n            right--;\n        }\n    }\n    for (long i\
    \ : result) {\n        lst.push_back(i);\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9}))) == (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  stdout: ''
  stderr: "tmp7rnbvz4q: /tmp/tmp7rnbvz4q.cpp:45: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    std::vector<long>\
    \ result;\n    long min = lst.front();\n    long max = lst.back();\n    for (long\
    \ i : lst) {\n        if (i < min) {\n            min = i;\n        }\n      \
    \  if (i > max) {\n            max = i;\n        }\n    }\n    long mid = min\
    \ + (max - min) / 2;\n    long temp;\n    for (long i : lst) {\n        if (i\
    \ < mid) {\n            temp = i;\n        } else {\n            temp = mid;\n\
    \        }\n        result.push_back(temp);\n    }\n    return result;\n}\nint\
    \ main() {\n    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9}))) == (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  stdout: ''
  stderr: "tmp1p2c6286: /tmp/tmp1p2c6286.cpp:36: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    std::vector<long>\
    \ ans;\n    long min = std::numeric_limits<long>::max();\n    long max = std::numeric_limits<long>::min();\n\
    \    for (long i : lst) {\n        min = std::min(min, i);\n        max = std::max(max,\
    \ i);\n    }\n    for (long i : lst) {\n        ans.push_back(i);\n    }\n   \
    \ for (long i = min; i <= max; i++) {\n        std::swap(ans.back(), ans.back()\
    \ + ans.size());\n        ans.push_back(i);\n    }\n    return ans;\n}\nint main()\
    \ {\n    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9}))) == (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  stdout: ''
  stderr: "/tmp/tmp9j4739n9.cpp: In function \u2018std::vector<long int> strange_sort_list(std::vector<long\
    \ int>)\u2019:\n/tmp/tmp9j4739n9.cpp:22:54: error: no matching function for call\
    \ to \u2018swap(__gnu_cxx::__alloc_traits<std::allocator<long int>, long int>::value_type&,\
    \ long unsigned int)\u2019\n   22 |         std::swap(ans.back(), ans.back() +\
    \ ans.size());\n      |                                                      ^\n\
    In file included from /usr/include/c++/9/bits/nested_exception.h:40,\n       \
    \          from /usr/include/c++/9/exception:144,\n                 from /usr/include/c++/9/ios:39,\n\
    \                 from /usr/include/c++/9/istream:38,\n                 from /usr/include/c++/9/sstream:38,\n\
    \                 from /usr/include/c++/9/complex:45,\n                 from /usr/include/c++/9/ccomplex:39,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n\
    \                 from /tmp/tmp9j4739n9.cpp:2:\n/usr/include/c++/9/bits/move.h:182:5:\
    \ note: candidate: \u2018template<class _Tp> typename std::enable_if<std::__and_<std::__not_<std::__is_tuple_like<_Tp>\
    \ >, std::is_move_constructible<_Tp>, std::is_move_assignable<_Tp> >::value>::type\
    \ std::swap(_Tp&, _Tp&)\u2019\n  182 |     swap(_Tp& __a, _Tp& __b)\n      | \
    \    ^~~~\n/usr/include/c++/9/bits/move.h:182:5: note:   template argument deduction/substitution\
    \ failed:\n/tmp/tmp9j4739n9.cpp:22:54: note:   deduced conflicting types for parameter\
    \ \u2018_Tp\u2019 (\u2018long int\u2019 and \u2018long unsigned int\u2019)\n \
    \  22 |         std::swap(ans.back(), ans.back() + ans.size());\n      |     \
    \                                                 ^\nIn file included from /usr/include/c++/9/bits/nested_exception.h:40,\n\
    \                 from /usr/include/c++/9/exception:144,\n                 from\
    \ /usr/include/c++/9/ios:39,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmp9j4739n9.cpp:2:\n/usr/include/c++/9/bits/move.h:205:5: note: candidate:\
    \ \u2018template<class _Tp, long unsigned int _Nm> typename std::enable_if<std::__is_swappable<_Tp>::value>::type\
    \ std::swap(_Tp (&)[_Nm], _Tp (&)[_Nm])\u2019\n  205 |     swap(_Tp (&__a)[_Nm],\
    \ _Tp (&__b)[_Nm])\n      |     ^~~~\n/usr/include/c++/9/bits/move.h:205:5: note:\
    \   template argument deduction/substitution failed:\n/tmp/tmp9j4739n9.cpp:22:54:\
    \ note:   mismatched types \u2018_Tp [_Nm]\u2019 and \u2018__gnu_cxx::__alloc_traits<std::allocator<long\
    \ int>, long int>::value_type\u2019 {aka \u2018long int\u2019}\n   22 |      \
    \   std::swap(ans.back(), ans.back() + ans.size());\n      |                 \
    \                                     ^\nIn file included from /usr/include/c++/9/bits/stl_algobase.h:64,\n\
    \                 from /usr/include/c++/9/bits/char_traits.h:39,\n           \
    \      from /usr/include/c++/9/ios:40,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmp9j4739n9.cpp:2:\n/usr/include/c++/9/bits/stl_pair.h:495:5: note: candidate:\
    \ \u2018template<class _T1, class _T2> typename std::enable_if<std::__and_<std::__is_swappable<_T1>,\
    \ std::__is_swappable<_T2> >::value>::type std::swap(std::pair<_T1, _T2>&, std::pair<_T1,\
    \ _T2>&)\u2019\n  495 |     swap(pair<_T1, _T2>& __x, pair<_T1, _T2>& __y)\n \
    \     |     ^~~~\n/usr/include/c++/9/bits/stl_pair.h:495:5: note:   template argument\
    \ deduction/substitution failed:\n/tmp/tmp9j4739n9.cpp:22:54: note:   mismatched\
    \ types \u2018std::pair<_T1, _T2>\u2019 and \u2018__gnu_cxx::__alloc_traits<std::allocator<long\
    \ int>, long int>::value_type\u2019 {aka \u2018long int\u2019}\n   22 |      \
    \   std::swap(ans.back(), ans.back() + ans.size());\n      |                 \
    \                                     ^\nIn file included from /usr/include/c++/9/bits/stl_algobase.h:64,\n\
    \                 from /usr/include/c++/9/bits/char_traits.h:39,\n           \
    \      from /usr/include/c++/9/ios:40,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmp9j4739n9.cpp:2:\n/usr/include/c++/9/bits/stl_pair.h:503:5: note: candidate:\
    \ \u2018template<class _T1, class _T2> typename std::enable_if<(! std::__and_<std::__is_swappable<_T1>,\
    \ std::__is_swappable<_T2> >::value)>::type std::swap(std::pair<_T1, _T2>&, std::pair<_T1,\
    \ _T2>&)\u2019 <deleted>\n  503 |     swap(pair<_T1, _T2>&, pair<_T1, _T2>&) =\
    \ delete;\n      |     ^~~~\n/usr/include/c++/9/bits/stl_pair.h:503:5: note: \
    \  template argument deduction/substitution failed:\n/tmp/tmp9j4739n9.cpp:22:54:\
    \ note:   mismatched types \u2018std::pair<_T1, _T2>\u2019 and \u2018__gnu_cxx::__alloc_traits<std::allocator<long\
    \ int>, long int>::value_type\u2019 {aka \u2018long int\u2019}\n   22 |      \
    \   std::swap(ans.back(), ans.back() + ans.size());\n      |                 \
    \                                     ^\nIn file included from /usr/include/c++/9/string:55,\n\
    \                 from /usr/include/c++/9/bits/locale_classes.h:40,\n        \
    \         from /usr/include/c++/9/bits/ios_base.h:41,\n                 from /usr/include/c++/9/ios:42,\n\
    \                 from /usr/include/c++/9/istream:38,\n                 from /usr/include/c++/9/sstream:38,\n\
    \                 from /usr/include/c++/9/complex:45,\n                 from /usr/include/c++/9/ccomplex:39,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n\
    \                 from /tmp/tmp9j4739n9.cpp:2:\n/usr/include/c++/9/bits/basic_string.h:6381:5:\
    \ note: candidate: \u2018template<class _CharT, class _Traits, class _Alloc> void\
    \ std::swap(std::__cxx11::basic_string<_CharT, _Traits, _Alloc>&, std::__cxx11::basic_string<_CharT,\
    \ _Traits, _Alloc>&)\u2019\n 6381 |     swap(basic_string<_CharT, _Traits, _Alloc>&\
    \ __lhs,\n      |     ^~~~\n/usr/include/c++/9/bits/basic_string.h:6381:5: note:\
    \   template argument deduction/substitution failed:\n/tmp/tmp9j4739n9.cpp:22:54:\
    \ note:   mismatched types \u2018std::__cxx11::basic_string<_CharT, _Traits, _Alloc>\u2019\
    \ and \u2018__gnu_cxx::__alloc_traits<std::allocator<long int>, long int>::value_type\u2019\
    \ {aka \u2018long int\u2019}\n   22 |         std::swap(ans.back(), ans.back()\
    \ + ans.size());\n      |                                                    \
    \  ^\nIn file included from /usr/include/c++/9/deque:67,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:68,\n                 from\
    \ /tmp/tmp9j4739n9.cpp:2:\n/usr/include/c++/9/bits/stl_deque.h:2366:5: note: candidate:\
    \ \u2018template<class _Tp, class _Alloc> void std::swap(std::deque<_Tp, _Alloc>&,\
    \ std::deque<_Tp, _Alloc>&)\u2019\n 2366 |     swap(deque<_Tp,_Alloc>& __x, deque<_Tp,_Alloc>&\
    \ __y)\n      |     ^~~~\n/usr/include/c++/9/bits/stl_deque.h:2366:5: note:  \
    \ template argument deduction/substitution failed:\n/tmp/tmp9j4739n9.cpp:22:54:\
    \ note:   mismatched types \u2018std::deque<_Tp, _Alloc>\u2019 and \u2018__gnu_cxx::__alloc_traits<std::allocator<long\
    \ int>, long int>::value_type\u2019 {aka \u2018long int\u2019}\n   22 |      \
    \   std::swap(ans.back(), ans.back() + ans.size());\n      |                 \
    \                                     ^\nIn file included from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:70,\n\
    \                 from /tmp/tmp9j4739n9.cpp:2:\n/usr/include/c++/9/fstream:1264:5:\
    \ note: candidate: \u2018template<class _CharT, class _Traits> void std::swap(std::basic_filebuf<_CharT,\
    \ _Traits>&, std::basic_filebuf<_CharT, _Traits>&)\u2019\n 1264 |     swap(basic_filebuf<_CharT,\
    \ _Traits>& __x,\n      |     ^~~~\n/usr/include/c++/9/fstream:1264:5: note: \
    \  template argument deduction/substitution failed:\n/tmp/tmp9j4739n9.cpp:22:54:\
    \ note:   mismatched types \u2018std::basic_filebuf<_CharT, _Traits>\u2019 and\
    \ \u2018__gnu_cxx::__alloc_traits<std::allocator<long int>, long int>::value_type\u2019\
    \ {aka \u2018long int\u2019}\n   22 |         std::swap(ans.back(), ans.back()\
    \ + ans.size());\n      |                                                    \
    \  ^\nIn file included from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:70,\n\
    \                 from /tmp/tmp9j4739n9.cpp:2:\n/usr/include/c++/9/fstream:1271:5:\
    \ note: candidate: \u2018template<class _CharT, class _Traits> void std::swap(std::basic_ifstream<_CharT,\
    \ _Traits>&, std::basic_ifstream<_CharT, _Traits>&)\u2019\n 1271 |     swap(basic_ifstream<_CharT,\
    \ _Traits>& __x,\n      |     ^~~~\n/usr/include/c++/9/fstream:1271:5: note: \
    \  template argument deduction/substitution failed:\n/tmp/tmp9j4739n9.cpp:22:54:\
    \ note:   mismatched types \u2018std::basic_ifstream<_CharT, _Traits>\u2019 and\
    \ \u2018__gnu_cxx::__alloc_traits<std::allocator<long int>, long int>::value_type\u2019\
    \ {aka \u2018long int\u2019}\n   22 |         std::swap(ans.back(), ans.back()\
    \ + ans.size());\n      |                                                    \
    \  ^\nIn file included from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:70,\n\
    \                 from /tmp/tmp9j4739n9.cpp:2:\n/usr/include/c++/9/fstream:1278:5:\
    \ note: candidate: \u2018template<class _CharT, class _Traits> void std::swap(std::basic_ofstream<_CharT,\
    \ _Traits>&, std::basic_ofstream<_CharT, _Traits>&)\u2019\n 1278 |     swap(basic_ofstream<_CharT,\
    \ _Traits>& __x,\n      |     ^~~~\n/usr/include/c++/9/fstream:1278:5: note: \
    \  template argument deduction/substitution failed:\n/tmp/tmp9j4739n9.cpp:22:54:\
    \ note:   mismatched types \u2018std::basic_ofstream<_CharT, _Traits>\u2019 and\
    \ \u2018__gnu_cxx::__alloc_traits<std::allocator<long int>, long int>::value_type\u2019\
    \ {aka \u2018long int\u2019}\n   22 |         std::swap(ans.back(), ans.back()\
    \ + ans.size());\n      |                                                    \
    \  ^\nIn file included from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:70,\n\
    \                 from /tmp/tmp9j4739n9.cpp:2:\n/usr/include/c++/9/fstream:1285:5:\
    \ note: candidate: \u2018template<class _CharT, class _Traits> void std::swap(std::basic_fstream<_CharT,\
    \ _Traits>&, std::basic_fstream<_CharT, _Traits>&)\u2019\n 1285 |     swap(basic_fstream<_CharT,\
    \ _Traits>& __x,\n      |     ^~~~\n/usr/include/c++/9/fstream:1285:5: note: \
    \  template argument deduction/substitution failed:\n/tmp/tmp9j4739n9.cpp:22:54:\
    \ note:   mismatched types \u2018std::basic_fstream<_CharT, _Traits>\u2019 and\
    \ \u2018__gnu_cxx::__alloc_traits<std::allocator<long int>, long int>::value_type\u2019\
    \ {aka \u2018long int\u2019}\n   22 |         std::swap(ans.back(), ans.back()\
    \ + ans.size());\n      |                                                    \
    \  ^\nIn file included from /usr/include/c++/9/tuple:39,\n                 from\
    \ /usr/include/c++/9/functional:54,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:71,\n\
    \                 from /tmp/tmp9j4739n9.cpp:2:\n/usr/include/c++/9/array:294:5:\
    \ note: candidate: \u2018template<class _Tp, long unsigned int _Nm> typename std::enable_if<typename\
    \ std::__array_traits<_Tp, _Nm>::_Is_swappable::value>::type std::swap(std::array<_Tp,\
    \ _Nm>&, std::array<_Tp, _Nm>&)\u2019\n  294 |     swap(array<_Tp, _Nm>& __one,\
    \ array<_Tp, _Nm>& __two)\n      |     ^~~~\n/usr/include/c++/9/array:294:5: note:\
    \   template argument deduction/substitution failed:\n/tmp/tmp9j4739n9.cpp:22:54:\
    \ note:   mismatched types \u2018std::array<_Tp, _Nm>\u2019 and \u2018__gnu_cxx::__alloc_traits<std::allocator<long\
    \ int>, long int>::value_type\u2019 {aka \u2018long int\u2019}\n   22 |      \
    \   std::swap(ans.back(), ans.back() + ans.size());\n      |                 \
    \                                     ^\nIn file included from /usr/include/c++/9/tuple:39,\n\
    \                 from /usr/include/c++/9/functional:54,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:71,\n                 from\
    \ /tmp/tmp9j4739n9.cpp:2:\n/usr/include/c++/9/array:302:5: note: candidate: \u2018\
    template<class _Tp, long unsigned int _Nm> typename std::enable_if<(! typename\
    \ std::__array_traits<_Tp, _Nm>::_Is_swappable::value)>::type std::swap(std::array<_Tp,\
    \ _Nm>&, std::array<_Tp, _Nm>&)\u2019 <deleted>\n  302 |     swap(array<_Tp, _Nm>&,\
    \ array<_Tp, _Nm>&) = delete;\n      |     ^~~~\n/usr/include/c++/9/array:302:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmp9j4739n9.cpp:22:54:\
    \ note:   mismatched types \u2018std::array<_Tp, _Nm>\u2019 and \u2018__gnu_cxx::__alloc_traits<std::allocator<long\
    \ int>, long int>::value_type\u2019 {aka \u2018long int\u2019}\n   22 |      \
    \   std::swap(ans.back(), ans.back() + ans.size());\n      |                 \
    \                                     ^\nIn file included from /usr/include/c++/9/functional:54,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:71,\n\
    \                 from /tmp/tmp9j4739n9.cpp:2:\n/usr/include/c++/9/tuple:1624:5:\
    \ note: candidate: \u2018template<class ... _Elements> typename std::enable_if<std::__and_<std::__is_swappable<_Elements>...>::value>::type\
    \ std::swap(std::tuple<_Tps ...>&, std::tuple<_Tps ...>&)\u2019\n 1624 |     swap(tuple<_Elements...>&\
    \ __x, tuple<_Elements...>& __y)\n      |     ^~~~\n/usr/include/c++/9/tuple:1624:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmp9j4739n9.cpp:22:54:\
    \ note:   mismatched types \u2018std::tuple<_Tps ...>\u2019 and \u2018__gnu_cxx::__alloc_traits<std::allocator<long\
    \ int>, long int>::value_type\u2019 {aka \u2018long int\u2019}\n   22 |      \
    \   std::swap(ans.back(), ans.back() + ans.size());\n      |                 \
    \                                     ^\nIn file included from /usr/include/c++/9/functional:54,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:71,\n\
    \                 from /tmp/tmp9j4739n9.cpp:2:\n/usr/include/c++/9/tuple:1631:5:\
    \ note: candidate: \u2018template<class ... _Elements> typename std::enable_if<(!\
    \ std::__and_<std::__is_swappable<_Elements>...>::value)>::type std::swap(std::tuple<_Tps\
    \ ...>&, std::tuple<_Tps ...>&)\u2019 <deleted>\n 1631 |     swap(tuple<_Elements...>&,\
    \ tuple<_Elements...>&) = delete;\n      |     ^~~~\n/usr/include/c++/9/tuple:1631:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmp9j4739n9.cpp:22:54:\
    \ note:   mismatched types \u2018std::tuple<_Tps ...>\u2019 and \u2018__gnu_cxx::__alloc_traits<std::allocator<long\
    \ int>, long int>::value_type\u2019 {aka \u2018long int\u2019}\n   22 |      \
    \   std::swap(ans.back(), ans.back() + ans.size());\n      |                 \
    \                                     ^\nIn file included from /usr/include/c++/9/functional:59,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:71,\n\
    \                 from /tmp/tmp9j4739n9.cpp:2:\n/usr/include/c++/9/bits/std_function.h:785:5:\
    \ note: candidate: \u2018template<class _Res, class ... _Args> void std::swap(std::function<_Res(_ArgTypes\
    \ ...)>&, std::function<_Res(_ArgTypes ...)>&)\u2019\n  785 |     swap(function<_Res(_Args...)>&\
    \ __x, function<_Res(_Args...)>& __y) noexcept\n      |     ^~~~\n/usr/include/c++/9/bits/std_function.h:785:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmp9j4739n9.cpp:22:54:\
    \ note:   mismatched types \u2018std::function<_Res(_ArgTypes ...)>\u2019 and\
    \ \u2018__gnu_cxx::__alloc_traits<std::allocator<long int>, long int>::value_type\u2019\
    \ {aka \u2018long int\u2019}\n   22 |         std::swap(ans.back(), ans.back()\
    \ + ans.size());\n      |                                                    \
    \  ^\nIn file included from /usr/include/c++/9/bits/locale_conv.h:41,\n      \
    \           from /usr/include/c++/9/locale:43,\n                 from /usr/include/c++/9/iomanip:43,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:72,\n\
    \                 from /tmp/tmp9j4739n9.cpp:2:\n/usr/include/c++/9/bits/unique_ptr.h:701:5:\
    \ note: candidate: \u2018template<class _Tp, class _Dp> typename std::enable_if<std::__is_swappable<_T2>::value>::type\
    \ std::swap(std::unique_ptr<_Tp, _Dp>&, std::unique_ptr<_Tp, _Dp>&)\u2019\n  701\
    \ |     swap(unique_ptr<_Tp, _Dp>& __x,\n      |     ^~~~\n/usr/include/c++/9/bits/unique_ptr.h:701:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmp9j4739n9.cpp:22:54:\
    \ note:   mismatched types \u2018std::unique_ptr<_Tp, _Dp>\u2019 and \u2018__gnu_cxx::__alloc_traits<std::allocator<long\
    \ int>, long int>::value_type\u2019 {aka \u2018long int\u2019}\n   22 |      \
    \   std::swap(ans.back(), ans.back() + ans.size());\n      |                 \
    \                                     ^\nIn file included from /usr/include/c++/9/bits/locale_conv.h:41,\n\
    \                 from /usr/include/c++/9/locale:43,\n                 from /usr/include/c++/9/iomanip:43,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:72,\n\
    \                 from /tmp/tmp9j4739n9.cpp:2:\n/usr/include/c++/9/bits/unique_ptr.h:708:5:\
    \ note: candidate: \u2018template<class _Tp, class _Dp> typename std::enable_if<(!\
    \ std::__is_swappable<_T2>::value)>::type std::swap(std::unique_ptr<_Tp, _Dp>&,\
    \ std::unique_ptr<_Tp, _Dp>&)\u2019 <deleted>\n  708 |     swap(unique_ptr<_Tp,\
    \ _Dp>&,\n      |     ^~~~\n/usr/include/c++/9/bits/unique_ptr.h:708:5: note:\
    \   template argument deduction/substitution failed:\n/tmp/tmp9j4739n9.cpp:22:54:\
    \ note:   mismatched types \u2018std::unique_ptr<_Tp, _Dp>\u2019 and \u2018__gnu_cxx::__alloc_traits<std::allocator<long\
    \ int>, long int>::value_type\u2019 {aka \u2018long int\u2019}\n   22 |      \
    \   std::swap(ans.back(), ans.back() + ans.size());\n      |                 \
    \                                     ^\nIn file included from /usr/include/c++/9/list:63,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:79,\n\
    \                 from /tmp/tmp9j4739n9.cpp:2:\n/usr/include/c++/9/bits/stl_list.h:2056:5:\
    \ note: candidate: \u2018template<class _Tp, class _Alloc> void std::swap(std::__cxx11::list<_Tp,\
    \ _Alloc>&, std::__cxx11::list<_Tp, _Alloc>&)\u2019\n 2056 |     swap(list<_Tp,\
    \ _Alloc>& __x, list<_Tp, _Alloc>& __y)\n      |     ^~~~\n/usr/include/c++/9/bits/stl_list.h:2056:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmp9j4739n9.cpp:22:54:\
    \ note:   mismatched types \u2018std::__cxx11::list<_Tp, _Alloc>\u2019 and \u2018\
    __gnu_cxx::__alloc_traits<std::allocator<long int>, long int>::value_type\u2019\
    \ {aka \u2018long int\u2019}\n   22 |         std::swap(ans.back(), ans.back()\
    \ + ans.size());\n      |                                                    \
    \  ^\nIn file included from /usr/include/c++/9/map:60,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:81,\n                 from\
    \ /tmp/tmp9j4739n9.cpp:2:\n/usr/include/c++/9/bits/stl_tree.h:1654:5: note: candidate:\
    \ \u2018template<class _Key, class _Val, class _KeyOfValue, class _Compare, class\
    \ _Alloc> void std::swap(std::_Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>&,\
    \ std::_Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>&)\u2019\n 1654 |  \
    \   swap(_Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>& __x,\n      |  \
    \   ^~~~\n/usr/include/c++/9/bits/stl_tree.h:1654:5: note:   template argument\
    \ deduction/substitution failed:\n/tmp/tmp9j4739n9.cpp:22:54: note:   mismatched\
    \ types \u2018std::_Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>\u2019 and\
    \ \u2018__gnu_cxx::__alloc_traits<std::allocator<long int>, long int>::value_type\u2019\
    \ {aka \u2018long int\u2019}\n   22 |         std::swap(ans.back(), ans.back()\
    \ + ans.size());\n      |                                                    \
    \  ^\nIn file included from /usr/include/c++/9/map:61,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:81,\n                 from\
    \ /tmp/tmp9j4739n9.cpp:2:\n/usr/include/c++/9/bits/stl_map.h:1507:5: note: candidate:\
    \ \u2018template<class _Key, class _Tp, class _Compare, class _Alloc> void std::swap(std::map<_Key,\
    \ _Tp, _Compare, _Alloc>&, std::map<_Key, _Tp, _Compare, _Alloc>&)\u2019\n 1507\
    \ |     swap(map<_Key, _Tp, _Compare, _Alloc>& __x,\n      |     ^~~~\n/usr/include/c++/9/bits/stl_map.h:1507:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmp9j4739n9.cpp:22:54:\
    \ note:   mismatched types \u2018std::map<_Key, _Tp, _Compare, _Alloc>\u2019 and\
    \ \u2018__gnu_cxx::__alloc_traits<std::allocator<long int>, long int>::value_type\u2019\
    \ {aka \u2018long int\u2019}\n   22 |         std::swap(ans.back(), ans.back()\
    \ + ans.size());\n      |                                                    \
    \  ^\nIn file included from /usr/include/c++/9/map:62,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:81,\n                 from\
    \ /tmp/tmp9j4739n9.cpp:2:\n/usr/include/c++/9/bits/stl_multimap.h:1171:5: note:\
    \ candidate: \u2018template<class _Key, class _Tp, class _Compare, class _Alloc>\
    \ void std::swap(std::multimap<_Key, _Tp, _Compare, _Alloc>&, std::multimap<_Key,\
    \ _Tp, _Compare, _Alloc>&)\u2019\n 1171 |     swap(multimap<_Key, _Tp, _Compare,\
    \ _Alloc>& __x,\n      |     ^~~~\n/usr/include/c++/9/bits/stl_multimap.h:1171:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmp9j4739n9.cpp:22:54:\
    \ note:   mismatched types \u2018std::multimap<_Key, _Tp, _Compare, _Alloc>\u2019\
    \ and \u2018__gnu_cxx::__alloc_traits<std::allocator<long int>, long int>::value_type\u2019\
    \ {aka \u2018long int\u2019}\n   22 |         std::swap(ans.back(), ans.back()\
    \ + ans.size());\n      |                                                    \
    \  ^\nIn file included from /usr/include/c++/9/bits/shared_ptr.h:52,\n       \
    \          from /usr/include/c++/9/memory:81,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:82,\n\
    \                 from /tmp/tmp9j4739n9.cpp:2:\n/usr/include/c++/9/bits/shared_ptr_base.h:1520:5:\
    \ note: candidate: \u2018template<class _Tp, __gnu_cxx::_Lock_policy _Lp> void\
    \ std::swap(std::__shared_ptr<_Tp, _Lp>&, std::__shared_ptr<_Tp, _Lp>&)\u2019\n\
    \ 1520 |     swap(__shared_ptr<_Tp, _Lp>& __a, __shared_ptr<_Tp, _Lp>& __b) noexcept\n\
    \      |     ^~~~\n/usr/include/c++/9/bits/shared_ptr_base.h:1520:5: note:   template\
    \ argument deduction/substitution failed:\n/tmp/tmp9j4739n9.cpp:22:54: note: \
    \  mismatched types \u2018std::__shared_ptr<_Tp, _Lp>\u2019 and \u2018__gnu_cxx::__alloc_traits<std::allocator<long\
    \ int>, long int>::value_type\u2019 {aka \u2018long int\u2019}\n   22 |      \
    \   std::swap(ans.back(), ans.back() + ans.size());\n      |                 \
    \                                     ^\nIn file included from /usr/include/c++/9/bits/shared_ptr.h:52,\n\
    \                 from /usr/include/c++/9/memory:81,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:82,\n\
    \                 from /tmp/tmp9j4739n9.cpp:2:\n/usr/include/c++/9/bits/shared_ptr_base.h:1728:5:\
    \ note: candidate: \u2018template<class _Tp, __gnu_cxx::_Lock_policy _Lp> void\
    \ std::swap(std::__weak_ptr<_Tp, _Lp>&, std::__weak_ptr<_Tp, _Lp>&)\u2019\n 1728\
    \ |     swap(__weak_ptr<_Tp, _Lp>& __a, __weak_ptr<_Tp, _Lp>& __b) noexcept\n\
    \      |     ^~~~\n/usr/include/c++/9/bits/shared_ptr_base.h:1728:5: note:   template\
    \ argument deduction/substitution failed:\n/tmp/tmp9j4739n9.cpp:22:54: note: \
    \  mismatched types \u2018std::__weak_ptr<_Tp, _Lp>\u2019 and \u2018__gnu_cxx::__alloc_traits<std::allocator<long\
    \ int>, long int>::value_type\u2019 {aka \u2018long int\u2019}\n   22 |      \
    \   std::swap(ans.back(), ans.back() + ans.size());\n      |                 \
    \                                     ^\nIn file included from /usr/include/c++/9/memory:81,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:82,\n\
    \                 from /tmp/tmp9j4739n9.cpp:2:\n/usr/include/c++/9/bits/shared_ptr.h:485:5:\
    \ note: candidate: \u2018template<class _Tp> void std::swap(std::shared_ptr<_Tp>&,\
    \ std::shared_ptr<_Tp>&)\u2019\n  485 |     swap(shared_ptr<_Tp>& __a, shared_ptr<_Tp>&\
    \ __b) noexcept\n      |     ^~~~\n/usr/include/c++/9/bits/shared_ptr.h:485:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmp9j4739n9.cpp:22:54:\
    \ note:   mismatched types \u2018std::shared_ptr<_Tp>\u2019 and \u2018__gnu_cxx::__alloc_traits<std::allocator<long\
    \ int>, long int>::value_type\u2019 {aka \u2018long int\u2019}\n   22 |      \
    \   std::swap(ans.back(), ans.back() + ans.size());\n      |                 \
    \                                     ^\nIn file included from /usr/include/c++/9/memory:81,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:82,\n\
    \                 from /tmp/tmp9j4739n9.cpp:2:\n/usr/include/c++/9/bits/shared_ptr.h:606:5:\
    \ note: candidate: \u2018template<class _Tp> void std::swap(std::weak_ptr<_Tp>&,\
    \ std::weak_ptr<_Tp>&)\u2019\n  606 |     swap(weak_ptr<_Tp>& __a, weak_ptr<_Tp>&\
    \ __b) noexcept\n      |     ^~~~\n/usr/include/c++/9/bits/shared_ptr.h:606:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmp9j4739n9.cpp:22:54:\
    \ note:   mismatched types \u2018std::weak_ptr<_Tp>\u2019 and \u2018__gnu_cxx::__alloc_traits<std::allocator<long\
    \ int>, long int>::value_type\u2019 {aka \u2018long int\u2019}\n   22 |      \
    \   std::swap(ans.back(), ans.back() + ans.size());\n      |                 \
    \                                     ^\nIn file included from /usr/include/c++/9/vector:67,\n\
    \                 from /usr/include/c++/9/queue:61,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:86,\n\
    \                 from /tmp/tmp9j4739n9.cpp:2:\n/usr/include/c++/9/bits/stl_vector.h:1936:5:\
    \ note: candidate: \u2018template<class _Tp, class _Alloc> void std::swap(std::vector<_Tp,\
    \ _Alloc>&, std::vector<_Tp, _Alloc>&)\u2019\n 1936 |     swap(vector<_Tp, _Alloc>&\
    \ __x, vector<_Tp, _Alloc>& __y)\n      |     ^~~~\n/usr/include/c++/9/bits/stl_vector.h:1936:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmp9j4739n9.cpp:22:54:\
    \ note:   mismatched types \u2018std::vector<_Tp, _Alloc>\u2019 and \u2018__gnu_cxx::__alloc_traits<std::allocator<long\
    \ int>, long int>::value_type\u2019 {aka \u2018long int\u2019}\n   22 |      \
    \   std::swap(ans.back(), ans.back() + ans.size());\n      |                 \
    \                                     ^\nIn file included from /usr/include/c++/9/vector:68,\n\
    \                 from /usr/include/c++/9/queue:61,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:86,\n\
    \                 from /tmp/tmp9j4739n9.cpp:2:\n/usr/include/c++/9/bits/stl_bvector.h:118:3:\
    \ note: candidate: \u2018void std::swap(std::_Bit_reference, std::_Bit_reference)\u2019\
    \n  118 |   swap(_Bit_reference __x, _Bit_reference __y) noexcept\n      |   ^~~~\n\
    /usr/include/c++/9/bits/stl_bvector.h:118:23: note:   no known conversion for\
    \ argument 1 from \u2018__gnu_cxx::__alloc_traits<std::allocator<long int>, long\
    \ int>::value_type\u2019 {aka \u2018long int\u2019} to \u2018std::_Bit_reference\u2019\
    \n  118 |   swap(_Bit_reference __x, _Bit_reference __y) noexcept\n      |   \
    \     ~~~~~~~~~~~~~~~^~~\n/usr/include/c++/9/bits/stl_bvector.h:126:3: note: candidate:\
    \ \u2018void std::swap(std::_Bit_reference, bool&)\u2019\n  126 |   swap(_Bit_reference\
    \ __x, bool& __y) noexcept\n      |   ^~~~\n/usr/include/c++/9/bits/stl_bvector.h:126:23:\
    \ note:   no known conversion for argument 1 from \u2018__gnu_cxx::__alloc_traits<std::allocator<long\
    \ int>, long int>::value_type\u2019 {aka \u2018long int\u2019} to \u2018std::_Bit_reference\u2019\
    \n  126 |   swap(_Bit_reference __x, bool& __y) noexcept\n      |        ~~~~~~~~~~~~~~~^~~\n\
    /usr/include/c++/9/bits/stl_bvector.h:134:3: note: candidate: \u2018void std::swap(bool&,\
    \ std::_Bit_reference)\u2019\n  134 |   swap(bool& __x, _Bit_reference __y) noexcept\n\
    \      |   ^~~~\n/usr/include/c++/9/bits/stl_bvector.h:134:34: note:   no known\
    \ conversion for argument 2 from \u2018long unsigned int\u2019 to \u2018std::_Bit_reference\u2019\
    \n  134 |   swap(bool& __x, _Bit_reference __y) noexcept\n      |            \
    \       ~~~~~~~~~~~~~~~^~~\nIn file included from /usr/include/c++/9/queue:64,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:86,\n\
    \                 from /tmp/tmp9j4739n9.cpp:2:\n/usr/include/c++/9/bits/stl_queue.h:392:5:\
    \ note: candidate: \u2018template<class _Tp, class _Seq> typename std::enable_if<std::__is_swappable<_T2>::value>::type\
    \ std::swap(std::queue<_Tp, _Seq>&, std::queue<_Tp, _Seq>&)\u2019\n  392 |   \
    \  swap(queue<_Tp, _Seq>& __x, queue<_Tp, _Seq>& __y)\n      |     ^~~~\n/usr/include/c++/9/bits/stl_queue.h:392:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmp9j4739n9.cpp:22:54:\
    \ note:   mismatched types \u2018std::queue<_Tp, _Seq>\u2019 and \u2018__gnu_cxx::__alloc_traits<std::allocator<long\
    \ int>, long int>::value_type\u2019 {aka \u2018long int\u2019}\n   22 |      \
    \   std::swap(ans.back(), ans.back() + ans.size());\n      |                 \
    \                                     ^\nIn file included from /usr/include/c++/9/queue:64,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:86,\n\
    \                 from /tmp/tmp9j4739n9.cpp:2:\n/usr/include/c++/9/bits/stl_queue.h:726:5:\
    \ note: candidate: \u2018template<class _Tp, class _Sequence, class _Compare>\
    \ typename std::enable_if<std::__and_<std::__is_swappable<_T2>, std::__is_swappable<_Compare>\
    \ >::value>::type std::swap(std::priority_queue<_Tp, _Sequence, _Compare>&, std::priority_queue<_Tp,\
    \ _Sequence, _Compare>&)\u2019\n  726 |     swap(priority_queue<_Tp, _Sequence,\
    \ _Compare>& __x,\n      |     ^~~~\n/usr/include/c++/9/bits/stl_queue.h:726:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmp9j4739n9.cpp:22:54:\
    \ note:   mismatched types \u2018std::priority_queue<_Tp, _Sequence, _Compare>\u2019\
    \ and \u2018__gnu_cxx::__alloc_traits<std::allocator<long int>, long int>::value_type\u2019\
    \ {aka \u2018long int\u2019}\n   22 |         std::swap(ans.back(), ans.back()\
    \ + ans.size());\n      |                                                    \
    \  ^\nIn file included from /usr/include/c++/9/set:61,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:87,\n                 from\
    \ /tmp/tmp9j4739n9.cpp:2:\n/usr/include/c++/9/bits/stl_set.h:1031:5: note: candidate:\
    \ \u2018template<class _Key, class _Compare, class _Alloc> void std::swap(std::set<_Key,\
    \ _Compare, _Alloc>&, std::set<_Key, _Compare, _Alloc>&)\u2019\n 1031 |     swap(set<_Key,\
    \ _Compare, _Alloc>& __x, set<_Key, _Compare, _Alloc>& __y)\n      |     ^~~~\n\
    /usr/include/c++/9/bits/stl_set.h:1031:5: note:   template argument deduction/substitution\
    \ failed:\n/tmp/tmp9j4739n9.cpp:22:54: note:   mismatched types \u2018std::set<_Key,\
    \ _Compare, _Alloc>\u2019 and \u2018__gnu_cxx::__alloc_traits<std::allocator<long\
    \ int>, long int>::value_type\u2019 {aka \u2018long int\u2019}\n   22 |      \
    \   std::swap(ans.back(), ans.back() + ans.size());\n      |                 \
    \                                     ^\nIn file included from /usr/include/c++/9/set:62,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:87,\n\
    \                 from /tmp/tmp9j4739n9.cpp:2:\n/usr/include/c++/9/bits/stl_multiset.h:1016:5:\
    \ note: candidate: \u2018template<class _Key, class _Compare, class _Alloc> void\
    \ std::swap(std::multiset<_Key, _Compare, _Alloc>&, std::multiset<_Key, _Compare,\
    \ _Alloc>&)\u2019\n 1016 |     swap(multiset<_Key, _Compare, _Alloc>& __x,\n \
    \     |     ^~~~\n/usr/include/c++/9/bits/stl_multiset.h:1016:5: note:   template\
    \ argument deduction/substitution failed:\n/tmp/tmp9j4739n9.cpp:22:54: note: \
    \  mismatched types \u2018std::multiset<_Key, _Compare, _Alloc>\u2019 and \u2018\
    __gnu_cxx::__alloc_traits<std::allocator<long int>, long int>::value_type\u2019\
    \ {aka \u2018long int\u2019}\n   22 |         std::swap(ans.back(), ans.back()\
    \ + ans.size());\n      |                                                    \
    \  ^\nIn file included from /usr/include/c++/9/stack:61,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:89,\n                 from\
    \ /tmp/tmp9j4739n9.cpp:2:\n/usr/include/c++/9/bits/stl_stack.h:367:5: note: candidate:\
    \ \u2018template<class _Tp, class _Seq> typename std::enable_if<std::__is_swappable<_T2>::value>::type\
    \ std::swap(std::stack<_Tp, _Seq>&, std::stack<_Tp, _Seq>&)\u2019\n  367 |   \
    \  swap(stack<_Tp, _Seq>& __x, stack<_Tp, _Seq>& __y)\n      |     ^~~~\n/usr/include/c++/9/bits/stl_stack.h:367:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmp9j4739n9.cpp:22:54:\
    \ note:   mismatched types \u2018std::stack<_Tp, _Seq>\u2019 and \u2018__gnu_cxx::__alloc_traits<std::allocator<long\
    \ int>, long int>::value_type\u2019 {aka \u2018long int\u2019}\n   22 |      \
    \   std::swap(ans.back(), ans.back() + ans.size());\n      |                 \
    \                                     ^\nIn file included from /usr/include/c++/9/condition_variable:40,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:103,\n\
    \                 from /tmp/tmp9j4739n9.cpp:2:\n/usr/include/c++/9/bits/unique_lock.h:237:5:\
    \ note: candidate: \u2018template<class _Mutex> void std::swap(std::unique_lock<_Mutex>&,\
    \ std::unique_lock<_Mutex>&)\u2019\n  237 |     swap(unique_lock<_Mutex>& __x,\
    \ unique_lock<_Mutex>& __y) noexcept\n      |     ^~~~\n/usr/include/c++/9/bits/unique_lock.h:237:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmp9j4739n9.cpp:22:54:\
    \ note:   mismatched types \u2018std::unique_lock<_Mutex>\u2019 and \u2018__gnu_cxx::__alloc_traits<std::allocator<long\
    \ int>, long int>::value_type\u2019 {aka \u2018long int\u2019}\n   22 |      \
    \   std::swap(ans.back(), ans.back() + ans.size());\n      |                 \
    \                                     ^\nIn file included from /usr/include/c++/9/forward_list:38,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:104,\n\
    \                 from /tmp/tmp9j4739n9.cpp:2:\n/usr/include/c++/9/bits/forward_list.h:1479:5:\
    \ note: candidate: \u2018template<class _Tp, class _Alloc> void std::swap(std::forward_list<_Tp,\
    \ _Alloc>&, std::forward_list<_Tp, _Alloc>&)\u2019\n 1479 |     swap(forward_list<_Tp,\
    \ _Alloc>& __lx,\n      |     ^~~~\n/usr/include/c++/9/bits/forward_list.h:1479:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmp9j4739n9.cpp:22:54:\
    \ note:   mismatched types \u2018std::forward_list<_Tp, _Alloc>\u2019 and \u2018\
    __gnu_cxx::__alloc_traits<std::allocator<long int>, long int>::value_type\u2019\
    \ {aka \u2018long int\u2019}\n   22 |         std::swap(ans.back(), ans.back()\
    \ + ans.size());\n      |                                                    \
    \  ^\nIn file included from /usr/include/c++/9/future:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:105,\n                 from\
    \ /tmp/tmp9j4739n9.cpp:2:\n/usr/include/c++/9/thread:272:3: note: candidate: \u2018\
    void std::swap(std::thread&, std::thread&)\u2019\n  272 |   swap(thread& __x,\
    \ thread& __y) noexcept\n      |   ^~~~\n/usr/include/c++/9/thread:272:16: note:\
    \   no known conversion for argument 1 from \u2018__gnu_cxx::__alloc_traits<std::allocator<long\
    \ int>, long int>::value_type\u2019 {aka \u2018long int\u2019} to \u2018std::thread&\u2019\
    \n  272 |   swap(thread& __x, thread& __y) noexcept\n      |        ~~~~~~~~^~~\n\
    In file included from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:105,\n\
    \                 from /tmp/tmp9j4739n9.cpp:2:\n/usr/include/c++/9/future:1144:5:\
    \ note: candidate: \u2018template<class _Res> void std::swap(std::promise<_Res>&,\
    \ std::promise<_Res>&)\u2019\n 1144 |     swap(promise<_Res>& __x, promise<_Res>&\
    \ __y) noexcept\n      |     ^~~~\n/usr/include/c++/9/future:1144:5: note:   template\
    \ argument deduction/substitution failed:\n/tmp/tmp9j4739n9.cpp:22:54: note: \
    \  mismatched types \u2018std::promise<_Res>\u2019 and \u2018__gnu_cxx::__alloc_traits<std::allocator<long\
    \ int>, long int>::value_type\u2019 {aka \u2018long int\u2019}\n   22 |      \
    \   std::swap(ans.back(), ans.back() + ans.size());\n      |                 \
    \                                     ^\nIn file included from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:105,\n\
    \                 from /tmp/tmp9j4739n9.cpp:2:\n/usr/include/c++/9/future:1574:5:\
    \ note: candidate: \u2018template<class _Res, class ... _ArgTypes> void std::swap(std::packaged_task<_Res(_ArgTypes\
    \ ...)>&, std::packaged_task<_Res(_ArgTypes ...)>&)\u2019\n 1574 |     swap(packaged_task<_Res(_ArgTypes...)>&\
    \ __x,\n      |     ^~~~\n/usr/include/c++/9/future:1574:5: note:   template argument\
    \ deduction/substitution failed:\n/tmp/tmp9j4739n9.cpp:22:54: note:   mismatched\
    \ types \u2018std::packaged_task<_Res(_ArgTypes ...)>\u2019 and \u2018__gnu_cxx::__alloc_traits<std::allocator<long\
    \ int>, long int>::value_type\u2019 {aka \u2018long int\u2019}\n   22 |      \
    \   std::swap(ans.back(), ans.back() + ans.size());\n      |                 \
    \                                     ^\nIn file included from /usr/include/c++/9/unordered_map:47,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:117,\n\
    \                 from /tmp/tmp9j4739n9.cpp:2:\n/usr/include/c++/9/bits/unordered_map.h:2079:5:\
    \ note: candidate: \u2018template<class _Key, class _Tp, class _Hash, class _Pred,\
    \ class _Alloc> void std::swap(std::unordered_map<_Key, _Tp, _Hash, _Pred, _Alloc>&,\
    \ std::unordered_map<_Key, _Tp, _Hash, _Pred, _Alloc>&)\u2019\n 2079 |     swap(unordered_map<_Key,\
    \ _Tp, _Hash, _Pred, _Alloc>& __x,\n      |     ^~~~\n/usr/include/c++/9/bits/unordered_map.h:2079:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmp9j4739n9.cpp:22:54:\
    \ note:   mismatched types \u2018std::unordered_map<_Key, _Tp, _Hash, _Pred, _Alloc>\u2019\
    \ and \u2018__gnu_cxx::__alloc_traits<std::allocator<long int>, long int>::value_type\u2019\
    \ {aka \u2018long int\u2019}\n   22 |         std::swap(ans.back(), ans.back()\
    \ + ans.size());\n      |                                                    \
    \  ^\nIn file included from /usr/include/c++/9/unordered_map:47,\n           \
    \      from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:117,\n         \
    \        from /tmp/tmp9j4739n9.cpp:2:\n/usr/include/c++/9/bits/unordered_map.h:2086:5:\
    \ note: candidate: \u2018template<class _Key, class _Tp, class _Hash, class _Pred,\
    \ class _Alloc> void std::swap(std::unordered_multimap<_Key, _Tp, _Hash, _Pred,\
    \ _Alloc>&, std::unordered_multimap<_Key, _Tp, _Hash, _Pred, _Alloc>&)\u2019\n\
    \ 2086 |     swap(unordered_multimap<_Key, _Tp, _Hash, _Pred, _Alloc>& __x,\n\
    \      |     ^~~~\n/usr/include/c++/9/bits/unordered_map.h:2086:5: note:   template\
    \ argument deduction/substitution failed:\n/tmp/tmp9j4739n9.cpp:22:54: note: \
    \  mismatched types \u2018std::unordered_multimap<_Key, _Tp, _Hash, _Pred, _Alloc>\u2019\
    \ and \u2018__gnu_cxx::__alloc_traits<std::allocator<long int>, long int>::value_type\u2019\
    \ {aka \u2018long int\u2019}\n   22 |         std::swap(ans.back(), ans.back()\
    \ + ans.size());\n      |                                                    \
    \  ^\nIn file included from /usr/include/c++/9/unordered_set:47,\n           \
    \      from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:118,\n         \
    \        from /tmp/tmp9j4739n9.cpp:2:\n/usr/include/c++/9/bits/unordered_set.h:1691:5:\
    \ note: candidate: \u2018template<class _Value, class _Hash, class _Pred, class\
    \ _Alloc> void std::swap(std::unordered_set<_Value, _Hash, _Pred, _Alloc>&, std::unordered_set<_Value,\
    \ _Hash, _Pred, _Alloc>&)\u2019\n 1691 |     swap(unordered_set<_Value, _Hash,\
    \ _Pred, _Alloc>& __x,\n      |     ^~~~\n/usr/include/c++/9/bits/unordered_set.h:1691:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmp9j4739n9.cpp:22:54:\
    \ note:   mismatched types \u2018std::unordered_set<_Value, _Hash, _Pred, _Alloc>\u2019\
    \ and \u2018__gnu_cxx::__alloc_traits<std::allocator<long int>, long int>::value_type\u2019\
    \ {aka \u2018long int\u2019}\n   22 |         std::swap(ans.back(), ans.back()\
    \ + ans.size());\n      |                                                    \
    \  ^\nIn file included from /usr/include/c++/9/unordered_set:47,\n           \
    \      from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:118,\n         \
    \        from /tmp/tmp9j4739n9.cpp:2:\n/usr/include/c++/9/bits/unordered_set.h:1698:5:\
    \ note: candidate: \u2018template<class _Value, class _Hash, class _Pred, class\
    \ _Alloc> void std::swap(std::unordered_multiset<_Value, _Hash, _Pred, _Alloc>&,\
    \ std::unordered_multiset<_Value, _Hash, _Pred, _Alloc>&)\u2019\n 1698 |     swap(unordered_multiset<_Value,\
    \ _Hash, _Pred, _Alloc>& __x,\n      |     ^~~~\n/usr/include/c++/9/bits/unordered_set.h:1698:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmp9j4739n9.cpp:22:54:\
    \ note:   mismatched types \u2018std::unordered_multiset<_Value, _Hash, _Pred,\
    \ _Alloc>\u2019 and \u2018__gnu_cxx::__alloc_traits<std::allocator<long int>,\
    \ long int>::value_type\u2019 {aka \u2018long int\u2019}\n   22 |         std::swap(ans.back(),\
    \ ans.back() + ans.size());\n      |                                         \
    \             ^\nIn file included from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:122,\n\
    \                 from /tmp/tmp9j4739n9.cpp:2:\n/usr/include/c++/9/shared_mutex:759:5:\
    \ note: candidate: \u2018template<class _Mutex> void std::swap(std::shared_lock<_Mutex>&,\
    \ std::shared_lock<_Mutex>&)\u2019\n  759 |     swap(shared_lock<_Mutex>& __x,\
    \ shared_lock<_Mutex>& __y) noexcept\n      |     ^~~~\n/usr/include/c++/9/shared_mutex:759:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmp9j4739n9.cpp:22:54:\
    \ note:   mismatched types \u2018std::shared_lock<_Mutex>\u2019 and \u2018__gnu_cxx::__alloc_traits<std::allocator<long\
    \ int>, long int>::value_type\u2019 {aka \u2018long int\u2019}\n   22 |      \
    \   std::swap(ans.back(), ans.back() + ans.size());\n      |                 \
    \                                     ^\nIn file included from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmp9j4739n9.cpp:2:\n/usr/include/c++/9/sstream:849:5: note: candidate:\
    \ \u2018template<class _CharT, class _Traits, class _Allocator> void std::__cxx11::swap(std::__cxx11::basic_stringbuf<_CharT,\
    \ _Traits, _Alloc>&, std::__cxx11::basic_stringbuf<_CharT, _Traits, _Alloc>&)\u2019\
    \n  849 |     swap(basic_stringbuf<_CharT, _Traits, _Allocator>& __x,\n      |\
    \     ^~~~\n/usr/include/c++/9/sstream:849:5: note:   template argument deduction/substitution\
    \ failed:\n/tmp/tmp9j4739n9.cpp:22:54: note:   mismatched types \u2018std::__cxx11::basic_stringbuf<_CharT,\
    \ _Traits, _Alloc>\u2019 and \u2018__gnu_cxx::__alloc_traits<std::allocator<long\
    \ int>, long int>::value_type\u2019 {aka \u2018long int\u2019}\n   22 |      \
    \   std::swap(ans.back(), ans.back() + ans.size());\n      |                 \
    \                                     ^\nIn file included from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmp9j4739n9.cpp:2:\n/usr/include/c++/9/sstream:856:5: note: candidate:\
    \ \u2018template<class _CharT, class _Traits, class _Allocator> void std::__cxx11::swap(std::__cxx11::basic_istringstream<_CharT,\
    \ _Traits, _Allocator>&, std::__cxx11::basic_istringstream<_CharT, _Traits, _Allocator>&)\u2019\
    \n  856 |     swap(basic_istringstream<_CharT, _Traits, _Allocator>& __x,\n  \
    \    |     ^~~~\n/usr/include/c++/9/sstream:856:5: note:   template argument deduction/substitution\
    \ failed:\n/tmp/tmp9j4739n9.cpp:22:54: note:   mismatched types \u2018std::__cxx11::basic_istringstream<_CharT,\
    \ _Traits, _Allocator>\u2019 and \u2018__gnu_cxx::__alloc_traits<std::allocator<long\
    \ int>, long int>::value_type\u2019 {aka \u2018long int\u2019}\n   22 |      \
    \   std::swap(ans.back(), ans.back() + ans.size());\n      |                 \
    \                                     ^\nIn file included from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmp9j4739n9.cpp:2:\n/usr/include/c++/9/sstream:863:5: note: candidate:\
    \ \u2018template<class _CharT, class _Traits, class _Allocator> void std::__cxx11::swap(std::__cxx11::basic_ostringstream<_CharT,\
    \ _Traits, _Allocator>&, std::__cxx11::basic_ostringstream<_CharT, _Traits, _Allocator>&)\u2019\
    \n  863 |     swap(basic_ostringstream<_CharT, _Traits, _Allocator>& __x,\n  \
    \    |     ^~~~\n/usr/include/c++/9/sstream:863:5: note:   template argument deduction/substitution\
    \ failed:\n/tmp/tmp9j4739n9.cpp:22:54: note:   mismatched types \u2018std::__cxx11::basic_ostringstream<_CharT,\
    \ _Traits, _Allocator>\u2019 and \u2018__gnu_cxx::__alloc_traits<std::allocator<long\
    \ int>, long int>::value_type\u2019 {aka \u2018long int\u2019}\n   22 |      \
    \   std::swap(ans.back(), ans.back() + ans.size());\n      |                 \
    \                                     ^\nIn file included from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmp9j4739n9.cpp:2:\n/usr/include/c++/9/sstream:870:5: note: candidate:\
    \ \u2018template<class _CharT, class _Traits, class _Allocator> void std::__cxx11::swap(std::__cxx11::basic_stringstream<_CharT,\
    \ _Traits, _Allocator>&, std::__cxx11::basic_stringstream<_CharT, _Traits, _Allocator>&)\u2019\
    \n  870 |     swap(basic_stringstream<_CharT, _Traits, _Allocator>& __x,\n   \
    \   |     ^~~~\n/usr/include/c++/9/sstream:870:5: note:   template argument deduction/substitution\
    \ failed:\n/tmp/tmp9j4739n9.cpp:22:54: note:   mismatched types \u2018std::__cxx11::basic_stringstream<_CharT,\
    \ _Traits, _Allocator>\u2019 and \u2018__gnu_cxx::__alloc_traits<std::allocator<long\
    \ int>, long int>::value_type\u2019 {aka \u2018long int\u2019}\n   22 |      \
    \   std::swap(ans.back(), ans.back() + ans.size());\n      |                 \
    \                                     ^\nIn file included from /usr/include/c++/9/regex:62,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:110,\n\
    \                 from /tmp/tmp9j4739n9.cpp:2:\n/usr/include/c++/9/bits/regex.h:844:5:\
    \ note: candidate: \u2018template<class _Ch_type, class _Rx_traits> void std::__cxx11::swap(std::__cxx11::basic_regex<_Ch_type,\
    \ _Rx_traits>&, std::__cxx11::basic_regex<_Ch_type, _Rx_traits>&)\u2019\n  844\
    \ |     swap(basic_regex<_Ch_type, _Rx_traits>& __lhs,\n      |     ^~~~\n/usr/include/c++/9/bits/regex.h:844:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmp9j4739n9.cpp:22:54:\
    \ note:   mismatched types \u2018std::__cxx11::basic_regex<_Ch_type, _Rx_traits>\u2019\
    \ and \u2018__gnu_cxx::__alloc_traits<std::allocator<long int>, long int>::value_type\u2019\
    \ {aka \u2018long int\u2019}\n   22 |         std::swap(ans.back(), ans.back()\
    \ + ans.size());\n      |                                                    \
    \  ^\nIn file included from /usr/include/c++/9/regex:62,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:110,\n                 from\
    \ /tmp/tmp9j4739n9.cpp:2:\n/usr/include/c++/9/bits/regex.h:2029:5: note: candidate:\
    \ \u2018template<class _Bi_iter, class _Alloc> void std::__cxx11::swap(std::__cxx11::match_results<_BiIter,\
    \ _Alloc>&, std::__cxx11::match_results<_BiIter, _Alloc>&)\u2019\n 2029 |    \
    \ swap(match_results<_Bi_iter, _Alloc>& __lhs,\n      |     ^~~~\n/usr/include/c++/9/bits/regex.h:2029:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmp9j4739n9.cpp:22:54:\
    \ note:   mismatched types \u2018std::__cxx11::match_results<_BiIter, _Alloc>\u2019\
    \ and \u2018__gnu_cxx::__alloc_traits<std::allocator<long int>, long int>::value_type\u2019\
    \ {aka \u2018long int\u2019}\n   22 |         std::swap(ans.back(), ans.back()\
    \ + ans.size());\n      |                                                    \
    \  ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    // Write\
    \ your code here\n    std::vector<long> result;\n    long minValue = *std::min_element(lst.begin(),\
    \ lst.end());\n    long maxValue = *std::max_element(lst.begin(), lst.end());\n\
    \    long middleValue = maxValue - minValue;\n    long middleIndex = lst.size()\
    \ / 2;\n    long middle = lst[middleIndex];\n    long temp;\n    for (long i =\
    \ 0; i < lst.size(); i++) {\n        if (lst[i] < middle) {\n            temp\
    \ = lst[i];\n            lst[i] = middleValue;\n            middleValue = temp;\n\
    \        }\n    }\n    for (long i = 0; i < lst.size(); i++) {\n        if (lst[i]\
    \ > middle) {\n            temp = lst[i];\n            lst[i] = middleValue;\n\
    \            middleValue = temp;\n        }\n    }\n    for (long i = 0; i < lst.size();\
    \ i++) {\n        if (lst[i] < middleValue) {\n            temp = lst[i];\n  \
    \          lst[i] = minValue;\n            minValue = temp;\n        }\n    }\n\
    \    for (long i = 0; i < lst.size(); i++) {\n        if (lst[i] > middleValue)\
    \ {\n            temp = lst[i];\n            lst[i] = minValue;\n            minValue\
    \ = temp;\n        }\n    }\n    for (long i = 0; i < lst.size(); i++) {\n   \
    \     if (lst[i] < minValue) {\n            temp = lst[i];\n            lst[i]\
    \ = minValue;\n            minValue = temp;\n        }\n    }\n    for (long i\
    \ = 0; i < lst.size(); i++) {\n        if (lst[i] > minValue) {\n            temp\
    \ = lst[i];\n            lst[i] = minValue;\n            minValue = temp;\n  \
    \      }\n    }\n    for (long i = 0; i < lst.size(); i++) {\n        if (lst[i]\
    \ < maxValue) {\n            temp = lst[i];\n            lst[i] = maxValue;\n\
    \            maxValue = temp;\n        }\n    }\n    for (long i = 0; i < lst.size();\
    \ i++) {\n        if (lst[i] > maxValue) {\n            temp = lst[i];\n     \
    \       lst[i] = maxValue;\n            maxValue = temp;\n        }\n    }\n \
    \   for (long i = 0; i < lst.size(); i++) {\n        if (lst[i] < middleValue)\
    \ {\n            temp = lst[i];\n            lst[i] = middleValue;\n         \
    \   middleValue = temp;\n        }\n    }\n    for (long i = 0; i < lst.size();\
    \ i++) {\n        if (lst[i] > middleValue) {\n            temp = lst[i];\n  \
    \          lst[i] = middleValue;\n            middleValue = temp;\n        }\n\
    \    }\n    for (long i = 0; i < lst.size(); i++) {\n        if (lst[i] < middleValue)\
    \ {\n            temp = lst[i];\n            lst[i] = minValue;\n            minValue\
    \ = temp;\n        }\n    }\n    for (long i = 0; i < lst.size(); i++) {\n   \
    \     if (lst[i] > middleValue) {\n            temp = lst[i];\n            lst[i]\
    \ = minValue;\n            minValue = temp;\n        }\n    }\n    for (long \n\
    }\nint main() {\n    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9}))) == (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  stdout: ''
  stderr: "/tmp/tmpgpmoy2k5.cpp: In function \u2018std::vector<long int> strange_sort_list(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpgpmoy2k5.cpp:104:1: error: expected unqualified-id before\
    \ \u2018}\u2019 token\n  104 | }\n      | ^\n/tmp/tmpgpmoy2k5.cpp:103:14: error:\
    \ expected \u2018;\u2019 before \u2018}\u2019 token\n  103 |     for (long\n \
    \     |              ^\n      |              ;\n  104 | }\n      | ~         \
    \    \n/tmp/tmpgpmoy2k5.cpp:104:1: error: expected primary-expression before \u2018\
    }\u2019 token\n  104 | }\n      | ^\n/tmp/tmpgpmoy2k5.cpp:103:14: error: expected\
    \ \u2018;\u2019 before \u2018}\u2019 token\n  103 |     for (long\n      |   \
    \           ^\n      |              ;\n  104 | }\n      | ~             \n/tmp/tmpgpmoy2k5.cpp:104:1:\
    \ error: expected primary-expression before \u2018}\u2019 token\n  104 | }\n \
    \     | ^\n/tmp/tmpgpmoy2k5.cpp:103:14: error: expected \u2018)\u2019 before \u2018\
    }\u2019 token\n  103 |     for (long\n      |         ~    ^\n      |        \
    \      )\n  104 | }\n      | ~             \n/tmp/tmpgpmoy2k5.cpp:104:1: error:\
    \ expected primary-expression before \u2018}\u2019 token\n  104 | }\n      | ^\n\
    /tmp/tmpgpmoy2k5.cpp:104:1: warning: no return statement in function returning\
    \ non-void [-Wreturn-type]\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    std::vector<long>\
    \ result;\n    long min = lst.front();\n    long max = lst.back();\n    for (long\
    \ i : lst) {\n        if (i < min) {\n            min = i;\n        }\n      \
    \  if (i > max) {\n            max = i;\n        }\n    }\n    for (long i : lst)\
    \ {\n        if (i == min) {\n            result.push_back(min);\n        } else\
    \ if (i == max) {\n            result.push_back(max);\n        } else {\n    \
    \        result.push_back(i);\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9}))) == (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  stdout: ''
  stderr: "tmpxz__7mbt: /tmp/tmpxz__7mbt.cpp:35: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    // Write\
    \ your code here\n    std::vector<long> ans;\n    long min = lst.front();\n  \
    \  long max = lst.back();\n    for (long i : lst) {\n        if (i < min) {\n\
    \            min = i;\n        }\n        if (i > max) {\n            max = i;\n\
    \        }\n    }\n    for (long i : lst) {\n        if (i < min) {\n        \
    \    ans.push_back(min);\n            min = i;\n        }\n        if (i > max)\
    \ {\n            ans.push_back(max);\n            max = i;\n        }\n    }\n\
    \    ans.push_back(min);\n    ans.push_back(max);\n    return ans;\n}\nint main()\
    \ {\n    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9}))) == (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  stdout: ''
  stderr: "tmph0os89bq: /tmp/tmph0os89bq.cpp:39: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    // Your\
    \ code here\n    std::vector<long> result;\n    long min;\n    long max;\n   \
    \ long temp;\n    for(long i = 0; i < lst.size(); i++){\n        min = max = lst[i];\n\
    \        for(long j = i + 1; j < lst.size(); j++){\n            if(lst[j] < min){\n\
    \                min = lst[j];\n            }\n            if(lst[j] > max){\n\
    \                max = lst[j];\n            }\n        }\n        temp = min;\n\
    \        min = max;\n        max = temp;\n        result.push_back(min);\n   \
    \     result.push_back(max);\n    }\n    return result;\n}\nint main() {\n   \
    \ auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9}))) == (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  stdout: ''
  stderr: "tmpypbbf46z: /tmp/tmpypbbf46z.cpp:36: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    std::vector<long>\
    \ res;\n    long min = std::numeric_limits<long>::max();\n    long max = std::numeric_limits<long>::min();\n\
    \    for (long i : lst) {\n        if (i < min) {\n            min = i;\n    \
    \    }\n        if (i > max) {\n            max = i;\n        }\n    }\n    for\
    \ (long i : lst) {\n        if (i < min) {\n            min = i;\n        }\n\
    \        if (i > max) {\n            max = i;\n        }\n    }\n    for (long\
    \ i : lst) {\n        if (i < min) {\n            min = i;\n        }\n      \
    \  if (i > max) {\n            max = i;\n        }\n    }\n    for (long i : lst)\
    \ {\n        if (i < min) {\n            min = i;\n        }\n        if (i >\
    \ max) {\n            max = i;\n        }\n    }\n    for (long i : lst) {\n \
    \       if (i < min) {\n            min = i;\n        }\n        if (i > max)\
    \ {\n            max = i;\n        }\n    }\n    for (long i : lst) {\n      \
    \  if (i < min) {\n            min = i;\n        }\n        if (i > max) {\n \
    \           max = i;\n        }\n    }\n    for (long i : lst) {\n        if (i\
    \ < min) {\n            min = i;\n        }\n        if (i > max) {\n        \
    \    max = i;\n        }\n    }\n    for (long i : lst) {\n        if (i < min)\
    \ {\n            min = i;\n        }\n        if (i > max) {\n            max\
    \ = i;\n        }\n    }\n    for (long i : lst) {\n        if (i < min) {\n \
    \           min = i;\n        }\n        if (i > max) {\n            max = i;\n\
    \        }\n    }\n    for (long i : lst) {\n        if (i < min) {\n        \
    \    min = i;\n        }\n        if (i > max) {\n            max = i;\n     \
    \   }\n    }\n    for (long i : lst) {\n        if (i < min) {\n            min\
    \ = i;\n        }\n        if (i > max) {\n            max = i;\n        }\n \
    \   }\n    for (long i : lst) {\n        if (i < min) {\n            min = i;\n\
    \        }\n        if (i > max) {\n            max = i;\n        }\n    }\n \
    \   for (long i : lst) {\n        if (i < min) {\n            min = i;\n     \
    \   }\n        if (i > max) {\n            max = i;\n        }\n    }\n    for\
    \ (long i : lst) {\n        if (i < min) {\n            min = i;\n        }\n\
    \        if (i > max) {\n            max = i;\n        }\n    }\n    for (long\
    \ i : lst) {\n        if (i < min) {\n            min = i;\n        }\n      \
    \  if (i > max) {\n            max = i;\n        }\n    }\n    for (long i : lst)\
    \ {\n        if (i < min) {\n            min = i;\n        }\n}\nint main() {\n\
    \    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9}))) == (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  stdout: ''
  stderr: "/tmp/tmpqys7vczp.cpp: In function \u2018std::vector<long int> strange_sort_list(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpqys7vczp.cpp:139:12: error: a function-definition is not\
    \ allowed here before \u2018{\u2019 token\n  139 | int main() {\n      |     \
    \       ^\n/tmp/tmpqys7vczp.cpp:150:1: error: expected \u2018}\u2019 at end of\
    \ input\n  150 | }\n      | ^\n/tmp/tmpqys7vczp.cpp:10:60: note: to match this\
    \ \u2018{\u2019\n   10 | std::vector<long> strange_sort_list(std::vector<long>\
    \ lst) {\n      |                                                            ^\n\
    /tmp/tmpqys7vczp.cpp:150:1: warning: no return statement in function returning\
    \ non-void [-Wreturn-type]\n  150 | }\n      | ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    std::vector<long>\
    \ res;\n    res.reserve(lst.size());\n    for (long i : lst) {\n        res.push_back(i);\n\
    \    }\n    std::sort(res.begin(), res.end());\n    return res;\n}\nint main()\
    \ {\n    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9}))) == (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  stdout: ''
  stderr: "tmp2yrd59mv: /tmp/tmp2yrd59mv.cpp:21: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    // Write\
    \ your code here.\n    std::vector<long> result;\n    long min = lst.front();\n\
    \    long max = lst.back();\n    for (long i : lst) {\n        if (i < min) {\n\
    \            min = i;\n        }\n        if (i > max) {\n            max = i;\n\
    \        }\n    }\n    for (long i : lst) {\n        if (i == min) {\n       \
    \     result.push_back(min);\n        } else if (i == max) {\n            result.push_back(max);\n\
    \        } else {\n            result.push_back(i);\n        }\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9}))) == (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  stdout: ''
  stderr: "tmpyrwqi5fc: /tmp/tmpyrwqi5fc.cpp:36: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    std::vector<long>\
    \ result;\n    long min = lst.front();\n    long max = lst.back();\n    for (long\
    \ i : lst) {\n        if (i < min) {\n            min = i;\n        } else if\
    \ (i > max) {\n            max = i;\n        }\n    }\n    for (long i : lst)\
    \ {\n        if (i < min) {\n            result.push_back(min);\n            min\
    \ = i;\n        } else if (i > max) {\n            result.push_back(max);\n  \
    \          max = i;\n        } else {\n            result.push_back(i);\n    \
    \    }\n    }\n    return result;\n}\nint main() {\n    auto candidate = strange_sort_list;\n\
    \    assert(candidate((std::vector<long>({1, 2, 3, 4}))) == (std::vector<long>({1,\
    \ 4, 2, 3})));\n    assert(candidate((std::vector<long>({5, 6, 7, 8, 9}))) ==\
    \ (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  stdout: ''
  stderr: "tmpht2eqmsh: /tmp/tmpht2eqmsh.cpp:36: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    std::vector<long>\
    \ res;\n    res.reserve(lst.size());\n    for (long i : lst) {\n        res.push_back(i);\n\
    \    }\n    std::sort(res.begin(), res.end());\n    return res;\n}\nint main()\
    \ {\n    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9}))) == (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  stdout: ''
  stderr: "tmplpv784vf: /tmp/tmplpv784vf.cpp:21: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    // Write\
    \ your code here.\n    std::vector<long> result;\n    long min = lst.front();\n\
    \    long max = lst.back();\n    for(long i : lst) {\n        if(i<min) {\n  \
    \          min=i;\n        }\n        if(i>max) {\n            max=i;\n      \
    \  }\n    }\n    for(long i : lst) {\n        if(i<min) {\n            result.push_back(min);\n\
    \            min=i;\n        }\n        if(i>max) {\n            result.push_back(max);\n\
    \            max=i;\n        }\n    }\n    result.push_back(min);\n    result.push_back(max);\n\
    \    return result;\n}\nint main() {\n    auto candidate = strange_sort_list;\n\
    \    assert(candidate((std::vector<long>({1, 2, 3, 4}))) == (std::vector<long>({1,\
    \ 4, 2, 3})));\n    assert(candidate((std::vector<long>({5, 6, 7, 8, 9}))) ==\
    \ (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  stdout: ''
  stderr: "tmplj3azj3i: /tmp/tmplj3azj3i.cpp:39: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    std::vector<long>\
    \ result;\n    for (long i : lst) {\n        result.push_back(i);\n    }\n   \
    \ std::sort(result.begin(), result.end());\n    return result;\n}\nint main()\
    \ {\n    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9}))) == (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  stdout: ''
  stderr: "tmp50ga9abo: /tmp/tmp50ga9abo.cpp:20: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    std::vector<long>\
    \ res;\n    res.reserve(lst.size());\n    for (long i : lst) {\n        res.push_back(i);\n\
    \    }\n    std::sort(res.begin(), res.end());\n    return res;\n}\nint main()\
    \ {\n    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9}))) == (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  stdout: ''
  stderr: "tmpbi5unbgi: /tmp/tmpbi5unbgi.cpp:21: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    // Your\
    \ code here\n    std::vector<long> result;\n    long min = lst.front();\n    long\
    \ max = lst.back();\n    long mid;\n    for (long i = 0; i < lst.size(); i++)\
    \ {\n        mid = (min + max) / 2;\n        if (lst[i] < mid) {\n           \
    \ min = mid;\n        } else {\n            max = mid;\n        }\n    }\n   \
    \ for (long i = 0; i < lst.size(); i++) {\n        mid = (min + max) / 2;\n  \
    \      if (lst[i] < mid) {\n            result.push_back(mid);\n            min\
    \ = mid;\n        } else {\n            result.push_back(mid);\n            max\
    \ = mid;\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate\
    \ = strange_sort_list;\n    assert(candidate((std::vector<long>({1, 2, 3, 4})))\
    \ == (std::vector<long>({1, 4, 2, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9}))) == (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  stdout: ''
  stderr: "tmpwozl2pw_: /tmp/tmpwozl2pw_.cpp:38: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    std::vector<long>\
    \ sorted_lst;\n    long min_val = *std::min_element(lst.begin(), lst.end());\n\
    \    long max_val = *std::max_element(lst.begin(), lst.end());\n    long min_val_2\
    \ = *std::min_element(lst.begin() + 1, lst.end());\n    long max_val_2 = *std::max_element(lst.begin()\
    \ + 1, lst.end());\n    long min_val_3 = *std::min_element(lst.begin() + 2, lst.end());\n\
    \    long max_val_3 = *std::max_element(lst.begin() + 2, lst.end());\n    long\
    \ min_val_4 = *std::min_element(lst.begin() + 3, lst.end());\n    long max_val_4\
    \ = *std::max_element(lst.begin() + 3, lst.end());\n    long min_val_5 = *std::min_element(lst.begin()\
    \ + 4, lst.end());\n    long max_val_5 = *std::max_element(lst.begin() + 4, lst.end());\n\
    \    long min_val_6 = *std::min_element(lst.begin() + 5, lst.end());\n    long\
    \ max_val_6 = *std::max_element(lst.begin() + 5, lst.end());\n    long min_val_7\
    \ = *std::min_element(lst.begin() + 6, lst.end());\n    long max_val_7 = *std::max_element(lst.begin()\
    \ + 6, lst.end());\n    long min_val_8 = *std::min_element(lst.begin() + 7, lst.end());\n\
    \    long max_val_8 = *std::max_element(lst.begin() + 7, lst.end());\n    long\
    \ min_val_9 = *std::min_element(lst.begin() + 8, lst.end());\n    long max_val_9\
    \ = *std::max_element(lst.begin() + 8, lst.end());\n    long min_val_10 = *std::min_element(lst.begin()\
    \ + 9, lst.end());\n    long max_val_10 = *std::max_element(lst.begin() + 9, lst.end());\n\
    \    long min_val_11 = *std::min_element(lst.begin() + 10, lst.end());\n    long\
    \ max_val_11 = *std::max_element(lst.begin() + 10, lst.end());\n    long min_val_12\
    \ = *std::min_element(lst.begin() + 11, lst.end());\n    long max_val_12 = *std::max_element(lst.begin()\
    \ + 11, lst.end());\n    long min_val_13 = *std::min_element(lst.begin() + 12,\
    \ lst.end());\n    long max_val_13 = *std::max_element(lst.begin() + 12, lst.end());\n\
    \    long min_val_14 = *std::min_element(lst.\n}\nint main() {\n    auto candidate\
    \ = strange_sort_list;\n    assert(candidate((std::vector<long>({1, 2, 3, 4})))\
    \ == (std::vector<long>({1, 4, 2, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9}))) == (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  stdout: ''
  stderr: "/tmp/tmp93_v90os.cpp: In function \u2018std::vector<long int> strange_sort_list(std::vector<long\
    \ int>)\u2019:\n/tmp/tmp93_v90os.cpp:39:1: error: expected unqualified-id before\
    \ \u2018}\u2019 token\n   39 | }\n      | ^\n/tmp/tmp93_v90os.cpp:39:1: warning:\
    \ no return statement in function returning non-void [-Wreturn-type]\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    // Write\
    \ your code here\n    std::vector<long> res;\n    long minv = *std::min_element(lst.begin(),\
    \ lst.end());\n    long maxv = *std::max_element(lst.begin(), lst.end());\n  \
    \  for (long i : lst) {\n        if (i < minv) res.push_back(minv);\n        else\
    \ if (i > maxv) res.push_back(maxv);\n        else if (i == minv) res.push_back(minv);\n\
    \        else if (i == maxv) res.push_back(maxv);\n        else res.push_back(i);\n\
    \    }\n    return res;\n}\nint main() {\n    auto candidate = strange_sort_list;\n\
    \    assert(candidate((std::vector<long>({1, 2, 3, 4}))) == (std::vector<long>({1,\
    \ 4, 2, 3})));\n    assert(candidate((std::vector<long>({5, 6, 7, 8, 9}))) ==\
    \ (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  stdout: ''
  stderr: "tmpu3w2dfza: /tmp/tmpu3w2dfza.cpp:26: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    std::vector<long>\
    \ res;\n    res.reserve(lst.size());\n    for (long i : lst) {\n        res.push_back(i);\n\
    \    }\n    std::sort(res.begin(), res.end());\n    return res;\n}\nint main()\
    \ {\n    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9}))) == (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  stdout: ''
  stderr: "tmpxffdsxll: /tmp/tmpxffdsxll.cpp:21: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    std::vector<long>\
    \ result;\n    long min = lst.front();\n    long max = lst.back();\n    for (long\
    \ i : lst) {\n        if (i < min) {\n            min = i;\n        }\n      \
    \  if (i > max) {\n            max = i;\n        }\n    }\n    for (long i : lst)\
    \ {\n        if (i == min) {\n            result.push_back(min);\n        } else\
    \ if (i == max) {\n            result.push_back(max);\n        } else {\n    \
    \        result.push_back(i);\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9}))) == (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  stdout: ''
  stderr: "tmplclsb9cf: /tmp/tmplclsb9cf.cpp:35: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    std::vector<long>\
    \ res;\n    long min = std::numeric_limits<long>::min();\n    long max = std::numeric_limits<long>::max();\n\
    \    long mid = 0;\n    for (auto i : lst) {\n        mid = (min + max) / 2;\n\
    \        if (i < mid) {\n            min = mid;\n        } else if (i > mid) {\n\
    \            max = mid;\n        } else {\n            res.push_back(i);\n   \
    \     }\n    }\n    return res;\n}\nint main() {\n    auto candidate = strange_sort_list;\n\
    \    assert(candidate((std::vector<long>({1, 2, 3, 4}))) == (std::vector<long>({1,\
    \ 4, 2, 3})));\n    assert(candidate((std::vector<long>({5, 6, 7, 8, 9}))) ==\
    \ (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  stdout: ''
  stderr: "tmpn82vrsuh: /tmp/tmpn82vrsuh.cpp:29: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    std::vector<long>\
    \ res;\n    for (long i : lst) {\n        res.push_back(i);\n    }\n    std::sort(res.begin(),\
    \ res.end());\n    return res;\n}\nint main() {\n    auto candidate = strange_sort_list;\n\
    \    assert(candidate((std::vector<long>({1, 2, 3, 4}))) == (std::vector<long>({1,\
    \ 4, 2, 3})));\n    assert(candidate((std::vector<long>({5, 6, 7, 8, 9}))) ==\
    \ (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  stdout: ''
  stderr: "tmpgolil2lp: /tmp/tmpgolil2lp.cpp:20: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    std::vector<long>\
    \ res;\n    res.reserve(lst.size());\n    for (long i : lst) {\n        res.push_back(i);\n\
    \    }\n    std::sort(res.begin(), res.end());\n    return res;\n}\nint main()\
    \ {\n    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9}))) == (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  stdout: ''
  stderr: "tmpifj2o1ac: /tmp/tmpifj2o1ac.cpp:21: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    // Write\
    \ your code here\n    std::vector<long> res;\n    long min = lst.front();\n  \
    \  long max = lst.back();\n    for(long i : lst){\n        if(i<min){\n      \
    \      min=i;\n        }\n        if(i>max){\n            max=i;\n        }\n\
    \    }\n    long mid = min+max/2;\n    for(long i : lst){\n        if(i<mid){\n\
    \            res.push_back(i);\n        }\n    }\n    for(long i : lst){\n   \
    \     if(i>mid){\n            res.push_back(i);\n        }\n    }\n    return\
    \ res;\n}\nint main() {\n    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9}))) == (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  stdout: ''
  stderr: "tmpdfkh6nuz: /tmp/tmpdfkh6nuz.cpp:38: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    std::vector<long>\
    \ res;\n    long min = std::numeric_limits<long>::min();\n    long max = std::numeric_limits<long>::max();\n\
    \    for (long i : lst) {\n        if (i < min) {\n            min = i;\n    \
    \    }\n        if (i > max) {\n            max = i;\n        }\n    }\n    for\
    \ (long i : lst) {\n        if (i == min) {\n            res.push_back(min);\n\
    \        } else if (i == max) {\n            res.push_back(max);\n        } else\
    \ {\n            res.push_back(i);\n        }\n    }\n    return res;\n}\nint\
    \ main() {\n    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9}))) == (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  stdout: ''
  stderr: "tmpxslzu4ce: /tmp/tmpxslzu4ce.cpp:35: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    // Your\
    \ code goes here\n    std::vector<long> res;\n    res.reserve(lst.size());\n \
    \   for (long i : lst) {\n        res.push_back(i);\n    }\n    std::sort(res.begin(),\
    \ res.end());\n    return res;\n}\nint main() {\n    auto candidate = strange_sort_list;\n\
    \    assert(candidate((std::vector<long>({1, 2, 3, 4}))) == (std::vector<long>({1,\
    \ 4, 2, 3})));\n    assert(candidate((std::vector<long>({5, 6, 7, 8, 9}))) ==\
    \ (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  stdout: ''
  stderr: "tmpsbmk2qy5: /tmp/tmpsbmk2qy5.cpp:22: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    std::vector<long>\
    \ res;\n    res.reserve(lst.size());\n    for (long i : lst) {\n        res.push_back(i);\n\
    \    }\n    std::sort(res.begin(), res.end());\n    return res;\n}\nint main()\
    \ {\n    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9}))) == (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  stdout: ''
  stderr: "tmpzesi_1tt: /tmp/tmpzesi_1tt.cpp:21: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    // Your\
    \ code here\n    std::vector<long> sorted_lst;\n    long min_val = lst[0];\n \
    \   long max_val = lst[0];\n    for (long i : lst) {\n        if (i < min_val)\
    \ {\n            min_val = i;\n        }\n        if (i > max_val) {\n       \
    \     max_val = i;\n        }\n    }\n    long mid = min_val + max_val / 2;\n\
    \    for (long i : lst) {\n        if (i < mid) {\n            sorted_lst.push_back(i);\n\
    \        } else if (i > mid) {\n            sorted_lst.push_back(mid);\n     \
    \       sorted_lst.push_back(i);\n        } else {\n            sorted_lst.push_back(i);\n\
    \        }\n    }\n    return sorted_lst;\n}\nint main() {\n    auto candidate\
    \ = strange_sort_list;\n    assert(candidate((std::vector<long>({1, 2, 3, 4})))\
    \ == (std::vector<long>({1, 4, 2, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9}))) == (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  stdout: ''
  stderr: "tmph7552b1z: /tmp/tmph7552b1z.cpp:38: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    // Write\
    \ your code here.\n    std::vector<long> result;\n    long min = lst.front();\n\
    \    long max = lst.back();\n    for (long i : lst) {\n        if (i < min) {\n\
    \            min = i;\n        }\n        if (i > max) {\n            max = i;\n\
    \        }\n    }\n    for (long i : lst) {\n        if (i == min) {\n       \
    \     result.push_back(min);\n        } else if (i == max) {\n            result.push_back(max);\n\
    \        } else {\n            result.push_back(i);\n        }\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9}))) == (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  stdout: ''
  stderr: "tmp1075oaxq: /tmp/tmp1075oaxq.cpp:36: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    std::vector<long>\
    \ sorted_lst;\n    long min = lst.front();\n    long max = lst.back();\n    for\
    \ (long i : lst) {\n        if (i < min) {\n            min = i;\n        }\n\
    \        if (i > max) {\n            max = i;\n        }\n    }\n    for (long\
    \ i : lst) {\n        if (i == min) {\n            sorted_lst.push_back(min);\n\
    \        } else if (i == max) {\n            sorted_lst.push_back(max);\n    \
    \    } else {\n            sorted_lst.push_back(i);\n        }\n    }\n    return\
    \ sorted_lst;\n}\nint main() {\n    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9}))) == (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  stdout: ''
  stderr: "tmppa6p__i1: /tmp/tmppa6p__i1.cpp:35: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    // Write\
    \ your code here.\n    std::vector<long> result;\n    long min = lst.front();\n\
    \    long max = lst.back();\n    for (long i : lst) {\n        if (i < min) {\n\
    \            min = i;\n        }\n        if (i > max) {\n            max = i;\n\
    \        }\n    }\n    for (long i : lst) {\n        if (i < min) {\n        \
    \    result.push_back(min);\n            min = i;\n        }\n        if (i >\
    \ max) {\n            result.push_back(max);\n            max = i;\n        }\n\
    \    }\n    if (min < max) {\n        result.push_back(min);\n        result.push_back(max);\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = strange_sort_list;\n\
    \    assert(candidate((std::vector<long>({1, 2, 3, 4}))) == (std::vector<long>({1,\
    \ 4, 2, 3})));\n    assert(candidate((std::vector<long>({5, 6, 7, 8, 9}))) ==\
    \ (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  stdout: ''
  stderr: "tmpz7yxok62: /tmp/tmpz7yxok62.cpp:41: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    // Write\
    \ your code here.\n    std::vector<long> result;\n    long minValue = *std::min_element(lst.begin(),\
    \ lst.end());\n    long maxValue = *std::max_element(lst.begin(), lst.end());\n\
    \    long middleValue = minValue + maxValue / 2;\n    long middleIndex = lst.size()\
    \ / 2;\n    long middle = middleValue;\n    long temp;\n    for (long i = 0; i\
    \ < lst.size(); i++) {\n        if (i == middleIndex) {\n            temp = middleValue;\n\
    \            middleValue = middleIndex;\n            middleIndex = i;\n      \
    \      middle = temp;\n        }\n        if (lst[i] < middle) {\n           \
    \ result.push_back(lst[i]);\n        }\n    }\n    result.push_back(middleValue);\n\
    \    return result;\n}\nint main() {\n    auto candidate = strange_sort_list;\n\
    \    assert(candidate((std::vector<long>({1, 2, 3, 4}))) == (std::vector<long>({1,\
    \ 4, 2, 3})));\n    assert(candidate((std::vector<long>({5, 6, 7, 8, 9}))) ==\
    \ (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  stdout: ''
  stderr: "tmprqiniilj: /tmp/tmprqiniilj.cpp:35: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    std::vector<long>\
    \ res;\n    res.reserve(lst.size());\n    for (long i : lst) {\n        res.push_back(i);\n\
    \    }\n    std::sort(res.begin(), res.end());\n    return res;\n}\nint main()\
    \ {\n    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9}))) == (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  stdout: ''
  stderr: "tmps73jh7wo: /tmp/tmps73jh7wo.cpp:21: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    // Write\
    \ your code here\n    std::vector<long> sorted_lst;\n    sorted_lst.push_back(lst[0]);\n\
    \    sorted_lst.push_back(lst[1]);\n    sorted_lst.push_back(lst[2]);\n    sorted_lst.push_back(lst[3]);\n\
    \    sorted_lst.push_back(lst[4]);\n    sorted_lst.push_back(lst[5]);\n    sorted_lst.push_back(lst[6]);\n\
    \    sorted_lst.push_back(lst[7]);\n    sorted_lst.push_back(lst[8]);\n    sorted_lst.push_back(lst[9]);\n\
    \    sorted_lst.push_back(lst[10]);\n    sorted_lst.push_back(lst[11]);\n    sorted_lst.push_back(lst[12]);\n\
    \    sorted_lst.push_back(lst[13]);\n    sorted_lst.push_back(lst[14]);\n    sorted_lst.push_back(lst[15]);\n\
    \    sorted_lst.push_back(lst[16]);\n    sorted_lst.push_back(lst[17]);\n    sorted_lst.push_back(lst[18]);\n\
    \    sorted_lst.push_back(lst[19]);\n    sorted_lst.push_back(lst[20]);\n    sorted_lst.push_back(lst[21]);\n\
    \    sorted_lst.push_back(lst[22]);\n    sorted_lst.push_back(lst[23]);\n    sorted_lst.push_back(lst[24]);\n\
    \    sorted_lst.push_back(lst[25]);\n    sorted_lst.push_back(lst[26]);\n    sorted_lst.push_back(lst[27]);\n\
    \    sorted_lst.push_back(lst[28]);\n    sorted_lst.push_back(lst[29]);\n    sorted_lst.push_back(lst[30]);\n\
    \    sorted_lst.push_back(lst[31]);\n    sorted_lst.push_back(lst[32]);\n    sorted_lst.push_back(lst[33]);\n\
    \    sorted_lst.push_back(lst[34]);\n    sorted_lst.push_back(lst[35]);\n    sorted_lst.push_back(lst[36]);\n\
    \    sorted_lst.push_back(lst[37]);\n    sorted_lst.push_back(lst[38]);\n    sorted_lst.push_back(lst[39]);\n\
    \    sorted_lst.push_back(lst[40]);\n    sorted_lst.push_back(lst[41]);\n    sorted_lst.push_back(lst[42]);\n\
    \    sorted_lst.push_back(lst[43]);\n    sorted_lst.push_back(lst[44]);\n    sorted_lst.push_back(lst[45]);\n\
    \    sorted_lst.push_back(lst[46]);\n    sorted_lst.push_back(lst[47]);\n    sorted_lst.push_back(lst[48]);\n\
    \    sorted_lst.push_back(lst[49]);\n    sorted_lst.push_back(lst[50]);\n    sorted_l\n\
    }\nint main() {\n    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9}))) == (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  stdout: ''
  stderr: "/tmp/tmpzjqdfii9.cpp: In function \u2018std::vector<long int> strange_sort_list(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpzjqdfii9.cpp:64:5: error: \u2018sorted_l\u2019 was not\
    \ declared in this scope; did you mean \u2018sorted_lst\u2019?\n   64 |     sorted_l\n\
    \      |     ^~~~~~~~\n      |     sorted_lst\n/tmp/tmpzjqdfii9.cpp:65:1: warning:\
    \ no return statement in function returning non-void [-Wreturn-type]\n   65 |\
    \ }\n      | ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    std::vector<long>\
    \ result;\n    long min = lst.front();\n    long max = lst.back();\n    for (long\
    \ i : lst) {\n        if (i < min) {\n            min = i;\n        }\n      \
    \  if (i > max) {\n            max = i;\n        }\n    }\n    for (long i : lst)\
    \ {\n        if (i == min) {\n            result.push_back(min);\n        } else\
    \ if (i == max) {\n            result.push_back(max);\n        } else {\n    \
    \        result.push_back(i);\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9}))) == (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  stdout: ''
  stderr: "tmph8wlgrb8: /tmp/tmph8wlgrb8.cpp:35: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    std::vector<long>\
    \ lst2;\n    long min;\n    long max;\n    long temp;\n    for (long i = 0; i\
    \ < lst.size(); i++) {\n        min = lst[i];\n        max = lst[i];\n       \
    \ for (long j = i + 1; j < lst.size(); j++) {\n            if (lst[j] < min) {\n\
    \                min = lst[j];\n            }\n            if (lst[j] > max) {\n\
    \                max = lst[j];\n            }\n        }\n        temp = min;\n\
    \        min = max;\n        max = temp;\n        lst2.push_back(min);\n     \
    \   lst2.push_back(max);\n    }\n    return lst2;\n}\nint main() {\n    auto candidate\
    \ = strange_sort_list;\n    assert(candidate((std::vector<long>({1, 2, 3, 4})))\
    \ == (std::vector<long>({1, 4, 2, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9}))) == (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  stdout: ''
  stderr: "tmpft1d_f6k: /tmp/tmpft1d_f6k.cpp:36: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    // Write\
    \ your code here\n    std::vector<long> result;\n    long min = lst.front();\n\
    \    long max = lst.back();\n    for (long i : lst) {\n        if (i < min) {\n\
    \            min = i;\n        }\n        if (i > max) {\n            max = i;\n\
    \        }\n    }\n    for (long i : lst) {\n        if (i == min) {\n       \
    \     result.push_back(min);\n        } else if (i == max) {\n            result.push_back(max);\n\
    \        } else {\n            result.push_back(i);\n        }\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9}))) == (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  stdout: ''
  stderr: "tmp4i0udsuz: /tmp/tmp4i0udsuz.cpp:36: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    // Your\
    \ code here\n    std::vector<long> result;\n    long min = lst.front();\n    long\
    \ max = lst.back();\n    for (long i : lst) {\n        if (i < min) {\n      \
    \      min = i;\n        }\n        if (i > max) {\n            max = i;\n   \
    \     }\n    }\n    for (long i : lst) {\n        if (i < min) {\n           \
    \ result.push_back(min);\n            min = i;\n        } else if (i > max) {\n\
    \            result.push_back(max);\n            max = i;\n        } else {\n\
    \            result.push_back(i);\n        }\n    }\n    return result;\n}\nint\
    \ main() {\n    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9}))) == (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  stdout: ''
  stderr: "tmpbykjfhn9: /tmp/tmpbykjfhn9.cpp:38: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    std::vector<long>\
    \ res;\n    res.reserve(lst.size());\n    for (long i : lst) {\n        res.push_back(i);\n\
    \    }\n    std::sort(res.begin(), res.end());\n    return res;\n}\nint main()\
    \ {\n    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9}))) == (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  stdout: ''
  stderr: "tmpyjy5jig6: /tmp/tmpyjy5jig6.cpp:21: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    std::vector<long>\
    \ result;\n    long min = lst.front();\n    long max = lst.back();\n    for (long\
    \ i : lst) {\n        if (i < min) {\n            min = i;\n        } else if\
    \ (i > max) {\n            max = i;\n        }\n    }\n    for (long i : lst)\
    \ {\n        if (i < min) {\n            result.push_back(min);\n            min\
    \ = i;\n        } else if (i > max) {\n            result.push_back(max);\n  \
    \          max = i;\n        } else {\n            result.push_back(i);\n    \
    \    }\n    }\n    return result;\n}\nint main() {\n    auto candidate = strange_sort_list;\n\
    \    assert(candidate((std::vector<long>({1, 2, 3, 4}))) == (std::vector<long>({1,\
    \ 4, 2, 3})));\n    assert(candidate((std::vector<long>({5, 6, 7, 8, 9}))) ==\
    \ (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  stdout: ''
  stderr: "tmp6bep9yko: /tmp/tmp6bep9yko.cpp:36: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    std::vector<long>\
    \ res;\n    res.reserve(lst.size());\n    for (long i : lst) {\n        res.push_back(i);\n\
    \    }\n    std::sort(res.begin(), res.end());\n    return res;\n}\nint main()\
    \ {\n    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9}))) == (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  stdout: ''
  stderr: "tmpp3f2mnb6: /tmp/tmpp3f2mnb6.cpp:21: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    std::vector<long>\
    \ res;\n    long minv = std::numeric_limits<long>::min();\n    long maxv = std::numeric_limits<long>::max();\n\
    \    for (long i : lst) {\n        if (i < minv) {\n            minv = i;\n  \
    \      } else if (i > maxv) {\n            maxv = i;\n        }\n    }\n    res.push_back(minv);\n\
    \    res.push_back(maxv);\n    for (long i : lst) {\n        if (i < minv) {\n\
    \            minv = i;\n        } else if (i > maxv) {\n            maxv = i;\n\
    \        }\n    }\n    res.push_back(minv);\n    res.push_back(maxv);\n    return\
    \ res;\n}\nint main() {\n    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9}))) == (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  stdout: ''
  stderr: "tmpbrgyu45_: /tmp/tmpbrgyu45_.cpp:36: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    std::vector<long>\
    \ res;\n    res.reserve(lst.size());\n    for (long i : lst) {\n        res.push_back(i);\n\
    \    }\n    std::sort(res.begin(), res.end());\n    return res;\n}\nint main()\
    \ {\n    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9}))) == (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  stdout: ''
  stderr: "tmp14zbx4t6: /tmp/tmp14zbx4t6.cpp:21: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    std::vector<long>\
    \ ans;\n    long minval = std::numeric_limits<long>::max();\n    long maxval =\
    \ std::numeric_limits<long>::min();\n    for (long i : lst) {\n        minval\
    \ = std::min(minval, i);\n        maxval = std::max(maxval, i);\n    }\n    long\
    \ mid = minval + maxval / 2;\n    long midval = minval + maxval / 2;\n    long\
    \ midval2 = minval + maxval / 2;\n    long midval3 = minval + maxval / 2;\n  \
    \  long midval4 = minval + maxval / 2;\n    long midval5 = minval + maxval / 2;\n\
    \    long midval6 = minval + maxval / 2;\n    long midval7 = minval + maxval /\
    \ 2;\n    long midval8 = minval + maxval / 2;\n    long midval9 = minval + maxval\
    \ / 2;\n    long midval10 = minval + maxval / 2;\n    long midval11 = minval +\
    \ maxval / 2;\n    long midval12 = minval + maxval / 2;\n    long midval13 = minval\
    \ + maxval / 2;\n    long midval14 = minval + maxval / 2;\n    long midval15 =\
    \ minval + maxval / 2;\n    long midval16 = minval + maxval / 2;\n    long midval17\
    \ = minval + maxval / 2;\n    long midval18 = minval + maxval / 2;\n    long midval19\
    \ = minval + maxval / 2;\n    long midval20 = minval + maxval / 2;\n    long midval21\
    \ = minval + maxval / 2;\n    long midval22 = minval + maxval / 2;\n    long midval23\
    \ = minval + maxval / 2;\n    long midval24 = minval + maxval / 2;\n    long midval25\
    \ = minval + maxval / 2;\n    long midval26 = minval + maxval / 2;\n    long midval27\
    \ = minval + maxval / 2;\n    long midval28 = minval + maxval / 2;\n    long midval29\
    \ = minval + maxval / 2;\n    long midval30 = minval + maxval / 2;\n    long midval31\
    \ = minval + maxval / 2;\n    long midval32 = minval + maxval / 2;\n    long midval33\
    \ = min\n}\nint main() {\n    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9}))) == (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  stdout: ''
  stderr: "/tmp/tmp0ts1cbnf.cpp: In function \u2018std::vector<long int> strange_sort_list(std::vector<long\
    \ int>)\u2019:\n/tmp/tmp0ts1cbnf.cpp:51:21: error: \u2018min\u2019 was not declared\
    \ in this scope; did you mean \u2018std::min\u2019?\n   51 |     long midval33\
    \ = min\n      |                     ^~~\n      |                     std::min\n\
    In file included from /usr/include/c++/9/algorithm:62,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n                 from\
    \ /tmp/tmp0ts1cbnf.cpp:2:\n/usr/include/c++/9/bits/stl_algo.h:3456:5: note: \u2018\
    std::min\u2019 declared here\n 3456 |     min(initializer_list<_Tp> __l, _Compare\
    \ __comp)\n      |     ^~~\n/tmp/tmp0ts1cbnf.cpp:52:1: warning: no return statement\
    \ in function returning non-void [-Wreturn-type]\n   52 | }\n      | ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    std::vector<long>\
    \ res;\n    if (lst.empty()) {\n        return res;\n    }\n    long min = lst[0];\n\
    \    long max = lst[0];\n    for (long i : lst) {\n        if (i < min) {\n  \
    \          min = i;\n        } else if (i > max) {\n            max = i;\n   \
    \     }\n    }\n    res.push_back(min);\n    res.push_back(max);\n    for (long\
    \ i : lst) {\n        if (i == min) {\n            res.push_back(i);\n       \
    \ } else if (i == max) {\n            res.push_back(i);\n        } else {\n  \
    \          res.push_back(i);\n            res.push_back(max);\n        }\n   \
    \ }\n    return res;\n}\nint main() {\n    auto candidate = strange_sort_list;\n\
    \    assert(candidate((std::vector<long>({1, 2, 3, 4}))) == (std::vector<long>({1,\
    \ 4, 2, 3})));\n    assert(candidate((std::vector<long>({5, 6, 7, 8, 9}))) ==\
    \ (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  stdout: ''
  stderr: "tmpb3en2n4u: /tmp/tmpb3en2n4u.cpp:40: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    std::vector<long>\
    \ res;\n    if (lst.size() == 0) {\n        return res;\n    }\n    long min =\
    \ lst[0];\n    long max = lst[0];\n    for (long i : lst) {\n        if (i < min)\
    \ {\n            min = i;\n        }\n        if (i > max) {\n            max\
    \ = i;\n        }\n    }\n    res.push_back(min);\n    res.push_back(max);\n \
    \   for (long i : lst) {\n        if (i == min) {\n            i = max;\n    \
    \    }\n        if (i == max) {\n            i = min;\n        }\n        res.push_back(i);\n\
    \    }\n    return res;\n}\nint main() {\n    auto candidate = strange_sort_list;\n\
    \    assert(candidate((std::vector<long>({1, 2, 3, 4}))) == (std::vector<long>({1,\
    \ 4, 2, 3})));\n    assert(candidate((std::vector<long>({5, 6, 7, 8, 9}))) ==\
    \ (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  stdout: ''
  stderr: "tmp3xty5bqu: /tmp/tmp3xty5bqu.cpp:40: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    std::vector<long>\
    \ res;\n    res.reserve(lst.size());\n    for (long i : lst) {\n        res.push_back(i);\n\
    \    }\n    std::sort(res.begin(), res.end());\n    return res;\n}\nint main()\
    \ {\n    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9}))) == (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  stdout: ''
  stderr: "tmparujkyyg: /tmp/tmparujkyyg.cpp:21: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    std::vector<long>\
    \ res;\n    res.reserve(lst.size());\n    for (long i : lst) {\n        res.push_back(i);\n\
    \    }\n    std::sort(res.begin(), res.end());\n    return res;\n}\nint main()\
    \ {\n    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9}))) == (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  stdout: ''
  stderr: "tmpdkj4ltxk: /tmp/tmpdkj4ltxk.cpp:21: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    std::vector<long>\
    \ res;\n    res.reserve(lst.size());\n    for (long i : lst) {\n        res.push_back(i);\n\
    \    }\n    std::sort(res.begin(), res.end());\n    return res;\n}\nint main()\
    \ {\n    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9}))) == (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  stdout: ''
  stderr: "tmpa30y4scg: /tmp/tmpa30y4scg.cpp:21: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    // Write\
    \ your code here\n    std::vector<long> result;\n    long min = lst.front();\n\
    \    long max = lst.back();\n    for (long i : lst) {\n        if (i < min) {\n\
    \            min = i;\n        }\n        if (i > max) {\n            max = i;\n\
    \        }\n    }\n    for (long i : lst) {\n        if (i == min) {\n       \
    \     result.push_back(min);\n        } else if (i == max) {\n            result.push_back(max);\n\
    \        } else {\n            result.push_back(i);\n        }\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9}))) == (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  stdout: ''
  stderr: "tmpqd9_86rh: /tmp/tmpqd9_86rh.cpp:36: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    // Your\
    \ code here\n    std::vector<long> result;\n    long min = lst.front();\n    long\
    \ max = lst.back();\n    for (long i : lst) {\n        if (i < min) {\n      \
    \      min = i;\n        }\n        if (i > max) {\n            max = i;\n   \
    \     }\n    }\n    for (long i : lst) {\n        if (i == min) {\n          \
    \  result.push_back(min);\n        } else if (i == max) {\n            result.push_back(max);\n\
    \        } else {\n            result.push_back(i);\n        }\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9}))) == (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  stdout: ''
  stderr: "tmp96ut8cs1: /tmp/tmp96ut8cs1.cpp:36: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    // Write\
    \ your code here\n    std::vector<long> result;\n    long min = lst.front();\n\
    \    long max = lst.back();\n    for (long i : lst) {\n        if (i < min) {\n\
    \            min = i;\n        }\n        if (i > max) {\n            max = i;\n\
    \        }\n    }\n    for (long i : lst) {\n        if (i < min) {\n        \
    \    result.push_back(min);\n            min = i;\n        }\n        if (i >\
    \ max) {\n            result.push_back(max);\n            max = i;\n        }\n\
    \    }\n    if (min != max) {\n        result.push_back(min);\n        result.push_back(max);\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = strange_sort_list;\n\
    \    assert(candidate((std::vector<long>({1, 2, 3, 4}))) == (std::vector<long>({1,\
    \ 4, 2, 3})));\n    assert(candidate((std::vector<long>({5, 6, 7, 8, 9}))) ==\
    \ (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  stdout: ''
  stderr: "tmpq2wqwh9_: /tmp/tmpq2wqwh9_.cpp:41: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    // Write\
    \ your code here\n    std::vector<long> result;\n    long min = lst.front();\n\
    \    long max = lst.back();\n    long mid;\n    for (long i : lst) {\n       \
    \ if (i < min) {\n            min = i;\n        }\n        if (i > max) {\n  \
    \          max = i;\n        }\n    }\n    mid = (min + max) / 2;\n    for (long\
    \ i : lst) {\n        if (i < mid) {\n            result.push_back(i);\n     \
    \   }\n        if (i > mid) {\n            result.push_back(mid);\n        }\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = strange_sort_list;\n\
    \    assert(candidate((std::vector<long>({1, 2, 3, 4}))) == (std::vector<long>({1,\
    \ 4, 2, 3})));\n    assert(candidate((std::vector<long>({5, 6, 7, 8, 9}))) ==\
    \ (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  stdout: ''
  stderr: "tmpi9ylifuf: /tmp/tmpi9ylifuf.cpp:37: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    std::vector<long>\
    \ result;\n    long min = std::numeric_limits<long>::max();\n    long max = std::numeric_limits<long>::min();\n\
    \    for (long i : lst) {\n        min = std::min(min, i);\n        max = std::max(max,\
    \ i);\n    }\n    for (long i : lst) {\n        if (i < min) {\n            result.push_back(min);\n\
    \        } else if (i > max) {\n            result.push_back(max);\n        }\
    \ else {\n            result.push_back(i);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9}))) == (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  stdout: ''
  stderr: "tmpjiyd4slt: /tmp/tmpjiyd4slt.cpp:31: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    std::vector<long>\
    \ res;\n    long min = lst.front();\n    long max = lst.back();\n    for (long\
    \ i : lst) {\n        if (i < min) {\n            min = i;\n        } else if\
    \ (i > max) {\n            max = i;\n        }\n    }\n    res.push_back(min);\n\
    \    res.push_back(max);\n    for (long i : lst) {\n        if (i < min) {\n \
    \           res.push_back(i);\n        } else if (i > max) {\n            res.push_back(i);\n\
    \        }\n    }\n    return res;\n}\nint main() {\n    auto candidate = strange_sort_list;\n\
    \    assert(candidate((std::vector<long>({1, 2, 3, 4}))) == (std::vector<long>({1,\
    \ 4, 2, 3})));\n    assert(candidate((std::vector<long>({5, 6, 7, 8, 9}))) ==\
    \ (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  stdout: ''
  stderr: "tmpmjerm2nj: /tmp/tmpmjerm2nj.cpp:34: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    std::vector<long>\
    \ lst2;\n    long minval = lst[0];\n    long maxval = lst[0];\n    for (long i\
    \ : lst) {\n        if (i < minval) {\n            minval = i;\n        }\n  \
    \      if (i > maxval) {\n            maxval = i;\n        }\n    }\n    long\
    \ midval = minval;\n    while (midval < maxval) {\n        long midval2 = midval;\n\
    \        long midval3 = midval;\n        long midval4 = midval;\n        long\
    \ midval5 = midval;\n        long midval6 = midval;\n        long midval7 = midval;\n\
    \        long midval8 = midval;\n        long midval9 = midval;\n        long\
    \ midval10 = midval;\n        long midval11 = midval;\n        long midval12 =\
    \ midval;\n        long midval13 = midval;\n        long midval14 = midval;\n\
    \        long midval15 = midval;\n        long midval16 = midval;\n        long\
    \ midval17 = midval;\n        long midval18 = midval;\n        long midval19 =\
    \ midval;\n        long midval20 = midval;\n        long midval21 = midval;\n\
    \        long midval22 = midval;\n        long midval23 = midval;\n        long\
    \ midval24 = midval;\n        long midval25 = midval;\n        long midval26 =\
    \ midval;\n        long midval27 = midval;\n        long midval28 = midval;\n\
    \        long midval29 = midval;\n        long midval30 = midval;\n        long\
    \ midval31 = midval;\n        long midval32 = midval;\n        long midval33 =\
    \ midval;\n        long midval34 = midval;\n        long midval35 = midval;\n\
    \        long midval36 = midval;\n        long midval37 = midval;\n        long\
    \ midval38 = midval;\n        long midval39 = midval;\n        long midval40 =\
    \ midval;\n        long midval41 = midval;\n        long midval42 = midval;\n\
    \        long midval43 = midval;\n        long midval44 = midval;\n        long\
    \ midval45 = midval;\n        long midval46 = midval;\n        long midval47 =\
    \ midval;\n        long midval48 = midval;\n        long midval49 = midval;\n\
    \        long midval50 = midval;\n        long midval51 = midval;\n        long\
    \ midval52 = \n}\nint main() {\n    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9}))) == (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  stdout: ''
  stderr: "/tmp/tmp2v0qzt2l.cpp: In function \u2018std::vector<long int> strange_sort_list(std::vector<long\
    \ int>)\u2019:\n/tmp/tmp2v0qzt2l.cpp:75:1: error: expected primary-expression\
    \ before \u2018}\u2019 token\n   75 | }\n      | ^\n/tmp/tmp2v0qzt2l.cpp:76:12:\
    \ error: a function-definition is not allowed here before \u2018{\u2019 token\n\
    \   76 | int main() {\n      |            ^\n/tmp/tmp2v0qzt2l.cpp:87:1: error:\
    \ expected \u2018}\u2019 at end of input\n   87 | }\n      | ^\n/tmp/tmp2v0qzt2l.cpp:10:60:\
    \ note: to match this \u2018{\u2019\n   10 | std::vector<long> strange_sort_list(std::vector<long>\
    \ lst) {\n      |                                                            ^\n\
    /tmp/tmp2v0qzt2l.cpp:87:1: warning: no return statement in function returning\
    \ non-void [-Wreturn-type]\n   87 | }\n      | ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    // Write\
    \ your code here\n    std::vector<long> sorted_lst;\n    long min_val = lst[0];\n\
    \    long max_val = lst[0];\n    for (long i : lst) {\n        if (i < min_val)\
    \ {\n            min_val = i;\n        }\n        if (i > max_val) {\n       \
    \     max_val = i;\n        }\n    }\n    long mid = (min_val + max_val) / 2;\n\
    \    for (long i : lst) {\n        if (i < mid) {\n            sorted_lst.push_back(i);\n\
    \        } else if (i > mid) {\n            sorted_lst.push_back(max_val);\n \
    \       } else {\n            sorted_lst.push_back(min_val);\n        }\n    }\n\
    \    return sorted_lst;\n}\nint main() {\n    auto candidate = strange_sort_list;\n\
    \    assert(candidate((std::vector<long>({1, 2, 3, 4}))) == (std::vector<long>({1,\
    \ 4, 2, 3})));\n    assert(candidate((std::vector<long>({5, 6, 7, 8, 9}))) ==\
    \ (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  stdout: ''
  stderr: "tmpnn50vj3m: /tmp/tmpnn50vj3m.cpp:37: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    std::vector<long>\
    \ res;\n    res.reserve(lst.size());\n    for (long i : lst) {\n        res.push_back(i);\n\
    \    }\n    std::sort(res.begin(), res.end());\n    return res;\n}\nint main()\
    \ {\n    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9}))) == (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  stdout: ''
  stderr: "tmpay72gt8h: /tmp/tmpay72gt8h.cpp:21: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    std::vector<long>\
    \ res;\n    res.reserve(lst.size());\n    for (long i : lst) {\n        res.push_back(i);\n\
    \    }\n    std::sort(res.begin(), res.end());\n    return res;\n}\nint main()\
    \ {\n    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9}))) == (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  stdout: ''
  stderr: "tmp59gj5a4i: /tmp/tmp59gj5a4i.cpp:21: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    std::vector<long>\
    \ result;\n    long min = lst.front();\n    long max = lst.back();\n    for (long\
    \ i : lst) {\n        if (i < min) {\n            min = i;\n        } else if\
    \ (i > max) {\n            max = i;\n        }\n    }\n    for (long i : lst)\
    \ {\n        if (i == min) {\n            result.push_back(min);\n        } else\
    \ if (i == max) {\n            result.push_back(max);\n        } else {\n    \
    \        result.push_back(i);\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9}))) == (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  stdout: ''
  stderr: "tmpjqiidz1s: /tmp/tmpjqiidz1s.cpp:34: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    // Write\
    \ your code here\n    std::vector<long> result;\n    long min = lst.front();\n\
    \    long max = lst.back();\n    for (long i : lst) {\n        if (i < min) {\n\
    \            min = i;\n        } else if (i > max) {\n            max = i;\n \
    \       }\n    }\n    for (long i : lst) {\n        if (i < min) {\n         \
    \   result.push_back(min);\n            min = i;\n        } else if (i > max)\
    \ {\n            result.push_back(max);\n            max = i;\n        } else\
    \ {\n            result.push_back(i);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9}))) == (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  stdout: ''
  stderr: "tmp9pxrmsyn: /tmp/tmp9pxrmsyn.cpp:37: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    // Write\
    \ your code here\n    std::vector<long> result;\n    long min = lst.front();\n\
    \    long max = lst.back();\n    for (long i : lst) {\n        if (i < min) {\n\
    \            min = i;\n        }\n        if (i > max) {\n            max = i;\n\
    \        }\n    }\n    for (long i : lst) {\n        if (i == min) {\n       \
    \     result.push_back(min);\n        } else if (i == max) {\n            result.push_back(max);\n\
    \        } else {\n            result.push_back(i);\n        }\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9}))) == (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  stdout: ''
  stderr: "tmpg0ugmj1d: /tmp/tmpg0ugmj1d.cpp:36: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    std::vector<long>\
    \ res;\n    res.reserve(lst.size());\n    for (long i : lst) {\n        res.push_back(i);\n\
    \    }\n    std::sort(res.begin(), res.end());\n    return res;\n}\nint main()\
    \ {\n    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9}))) == (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  stdout: ''
  stderr: "tmp3wmiaqnr: /tmp/tmp3wmiaqnr.cpp:21: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    // Write\
    \ your code here\n    std::vector<long> result;\n    long minValue = lst[0];\n\
    \    long maxValue = lst[0];\n    for (long i : lst) {\n        if (i < minValue)\
    \ {\n            minValue = i;\n        }\n        if (i > maxValue) {\n     \
    \       maxValue = i;\n        }\n    }\n    long midValue = minValue + maxValue\
    \ / 2;\n    long leftValue = minValue;\n    long rightValue = maxValue;\n    while\
    \ (leftValue < rightValue) {\n        while (leftValue < midValue && rightValue\
    \ > midValue) {\n            result.push_back(leftValue);\n            leftValue++;\n\
    \        }\n        while (leftValue < midValue && rightValue < midValue) {\n\
    \            result.push_back(rightValue);\n            rightValue--;\n      \
    \  }\n        while (leftValue > midValue && rightValue > midValue) {\n      \
    \      result.push_back(leftValue);\n            leftValue--;\n        }\n   \
    \     while (leftValue > midValue && rightValue < midValue) {\n            result.push_back(rightValue);\n\
    \            rightValue++;\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9}))) == (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    // Your\
    \ code here\n    std::vector<long> res;\n    res.reserve(lst.size());\n    for\
    \ (long i : lst) {\n        res.push_back(i);\n    }\n    std::sort(res.begin(),\
    \ res.end());\n    return res;\n}\nint main() {\n    auto candidate = strange_sort_list;\n\
    \    assert(candidate((std::vector<long>({1, 2, 3, 4}))) == (std::vector<long>({1,\
    \ 4, 2, 3})));\n    assert(candidate((std::vector<long>({5, 6, 7, 8, 9}))) ==\
    \ (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  stdout: ''
  stderr: "tmpynz29bb0: /tmp/tmpynz29bb0.cpp:22: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    // Write\
    \ your code here\n    std::vector<long> res;\n    res.reserve(lst.size());\n \
    \   long min = lst[0];\n    long max = lst[0];\n    for (long i : lst) {\n   \
    \     if (i < min) {\n            min = i;\n        }\n        if (i > max) {\n\
    \            max = i;\n        }\n    }\n    for (long i : lst) {\n        if\
    \ (i == min) {\n            res.push_back(min);\n        } else if (i == max)\
    \ {\n            res.push_back(max);\n        } else {\n            res.push_back(i);\n\
    \        }\n    }\n    return res;\n}\nint main() {\n    auto candidate = strange_sort_list;\n\
    \    assert(candidate((std::vector<long>({1, 2, 3, 4}))) == (std::vector<long>({1,\
    \ 4, 2, 3})));\n    assert(candidate((std::vector<long>({5, 6, 7, 8, 9}))) ==\
    \ (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  stdout: ''
  stderr: "tmp1jtr4oxc: /tmp/tmp1jtr4oxc.cpp:37: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    std::vector<long>\
    \ res;\n    res.reserve(lst.size());\n    for (long i : lst) {\n        res.push_back(i);\n\
    \    }\n    std::sort(res.begin(), res.end());\n    return res;\n}\nint main()\
    \ {\n    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9}))) == (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  stdout: ''
  stderr: "tmpmne8o0q6: /tmp/tmpmne8o0q6.cpp:21: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    std::vector<long>\
    \ result;\n    long min = std::numeric_limits<long>::min();\n    long max = std::numeric_limits<long>::max();\n\
    \    for (long i : lst) {\n        if (i < min) {\n            min = i;\n    \
    \    }\n        if (i > max) {\n            max = i;\n        }\n    }\n    for\
    \ (long i : lst) {\n        if (i < min) {\n            result.push_back(min);\n\
    \            min = i;\n        } else if (i > max) {\n            result.push_back(max);\n\
    \            max = i;\n        } else {\n            result.push_back(i);\n  \
    \      }\n    }\n    return result;\n}\nint main() {\n    auto candidate = strange_sort_list;\n\
    \    assert(candidate((std::vector<long>({1, 2, 3, 4}))) == (std::vector<long>({1,\
    \ 4, 2, 3})));\n    assert(candidate((std::vector<long>({5, 6, 7, 8, 9}))) ==\
    \ (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  stdout: ''
  stderr: "tmp0it80pe0: /tmp/tmp0it80pe0.cpp:37: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    std::vector<long>\
    \ ans;\n    long min = std::numeric_limits<long>::min();\n    long max = std::numeric_limits<long>::max();\n\
    \    long mid = 0;\n    for (long i : lst) {\n        mid = (min + max) / 2;\n\
    \        if (i < mid) {\n            min = mid;\n        } else {\n          \
    \  max = mid;\n        }\n        ans.push_back(i);\n    }\n    return ans;\n\
    }\nint main() {\n    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9}))) == (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  stdout: ''
  stderr: "tmpla277joc: /tmp/tmpla277joc.cpp:28: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    std::vector<long>\
    \ res;\n    long min = lst.front();\n    long max = lst.back();\n    for (long\
    \ i : lst) {\n        if (i < min) {\n            min = i;\n        }\n      \
    \  if (i > max) {\n            max = i;\n        }\n    }\n    res.push_back(min);\n\
    \    res.push_back(max);\n    for (long i : lst) {\n        if (i < min) {\n \
    \           long temp = min;\n            min = i;\n            while (min !=\
    \ temp) {\n                res.push_back(temp);\n                temp = temp -\
    \ 1;\n            }\n        }\n        if (i > max) {\n            long temp\
    \ = max;\n            max = i;\n            while (max != temp) {\n          \
    \      res.push_back(temp);\n                temp = temp + 1;\n            }\n\
    \        }\n    }\n    res.push_back(min);\n    return res;\n}\nint main() {\n\
    \    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9}))) == (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  stdout: ''
  stderr: "tmpmpg1rx8o: /tmp/tmpmpg1rx8o.cpp:47: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    std::vector<long>\
    \ lst2(lst.size());\n    for (long i = 0; i < lst.size(); i++) {\n        long\
    \ min_val = i;\n        long max_val = i;\n        for (long j = i + 1; j < lst.size();\
    \ j++) {\n            if (lst[j] < lst[min_val]) {\n                min_val =\
    \ j;\n            }\n            if (lst[j] > lst[max_val]) {\n              \
    \  max_val = j;\n            }\n        }\n        lst2[i] = lst[min_val];\n \
    \       lst2[i] = lst[max_val];\n    }\n    return lst2;\n}\nint main() {\n  \
    \  auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9}))) == (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  stdout: ''
  stderr: "tmp51l6hftf: /tmp/tmp51l6hftf.cpp:30: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    std::vector<long>\
    \ res;\n    res.reserve(lst.size());\n    for (long i : lst) {\n        res.push_back(i);\n\
    \    }\n    std::sort(res.begin(), res.end());\n    return res;\n}\nint main()\
    \ {\n    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9}))) == (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  stdout: ''
  stderr: "tmp1gdbpp29: /tmp/tmp1gdbpp29.cpp:21: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    // Write\
    \ your code here.\n    std::vector<long> result;\n    long min = lst.front();\n\
    \    long max = lst.back();\n    for (long i : lst) {\n        if (i < min) {\n\
    \            min = i;\n        }\n        if (i > max) {\n            max = i;\n\
    \        }\n    }\n    for (long i : lst) {\n        if (i == min) {\n       \
    \     result.push_back(min);\n        } else if (i == max) {\n            result.push_back(max);\n\
    \        } else {\n            result.push_back(i);\n        }\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9}))) == (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  stdout: ''
  stderr: "tmpqweevesw: /tmp/tmpqweevesw.cpp:36: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    std::vector<long>\
    \ result;\n    long min = lst.front();\n    long max = lst.back();\n    for (long\
    \ i : lst) {\n        if (i < min) {\n            min = i;\n        }\n      \
    \  if (i > max) {\n            max = i;\n        }\n    }\n    for (long i : lst)\
    \ {\n        if (i == min) {\n            result.push_back(min);\n        } else\
    \ if (i == max) {\n            result.push_back(max);\n        } else {\n    \
    \        result.push_back(i);\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9}))) == (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  stdout: ''
  stderr: "tmpem5e18xt: /tmp/tmpem5e18xt.cpp:35: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    std::vector<long>\
    \ res;\n    res.reserve(lst.size());\n    for (long i : lst) {\n        res.push_back(i);\n\
    \    }\n    std::sort(res.begin(), res.end());\n    return res;\n}\nint main()\
    \ {\n    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9}))) == (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  stdout: ''
  stderr: "tmpg8zfigx_: /tmp/tmpg8zfigx_.cpp:21: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    // Write\
    \ your code here.\n    std::vector<long> result;\n    long min = lst.front();\n\
    \    long max = lst.back();\n    for (long i : lst) {\n        if (i < min) {\n\
    \            min = i;\n        }\n        if (i > max) {\n            max = i;\n\
    \        }\n    }\n    for (long i : lst) {\n        if (i == min) {\n       \
    \     result.push_back(min);\n        } else if (i == max) {\n            result.push_back(max);\n\
    \        } else {\n            result.push_back(i);\n        }\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9}))) == (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  stdout: ''
  stderr: "tmp_b_2l408: /tmp/tmp_b_2l408.cpp:36: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    std::vector<long>\
    \ res;\n    long minval = *std::min_element(lst.begin(), lst.end());\n    long\
    \ maxval = *std::max_element(lst.begin(), lst.end());\n    long midval = minval\
    \ + maxval / 2;\n    long midval2 = minval + maxval / 2;\n    long midval3 = minval\
    \ + maxval / 2;\n    long midval4 = minval + maxval / 2;\n    long midval5 = minval\
    \ + maxval / 2;\n    long midval6 = minval + maxval / 2;\n    long midval7 = minval\
    \ + maxval / 2;\n    long midval8 = minval + maxval / 2;\n    long midval9 = minval\
    \ + maxval / 2;\n    long midval10 = minval + maxval / 2;\n    long midval11 =\
    \ minval + maxval / 2;\n    long midval12 = minval + maxval / 2;\n    long midval13\
    \ = minval + maxval / 2;\n    long midval14 = minval + maxval / 2;\n    long midval15\
    \ = minval + maxval / 2;\n    long midval16 = minval + maxval / 2;\n    long midval17\
    \ = minval + maxval / 2;\n    long midval18 = minval + maxval / 2;\n    long midval19\
    \ = minval + maxval / 2;\n    long midval20 = minval + maxval / 2;\n    long midval21\
    \ = minval + maxval / 2;\n    long midval22 = minval + maxval / 2;\n    long midval23\
    \ = minval + maxval / 2;\n    long midval24 = minval + maxval / 2;\n    long midval25\
    \ = minval + maxval / 2;\n    long midval26 = minval + maxval / 2;\n    long midval27\
    \ = minval + maxval / 2;\n    long midval28 = minval + maxval / 2;\n    long midval29\
    \ = minval + maxval / 2;\n    long midval30 = minval + maxval / 2;\n    long midval31\
    \ = minval + maxval / 2;\n    long midval32 = minval + maxval / 2;\n    long midval33\
    \ = minval + maxval / 2;\n    long midval34 = minval + maxval / 2;\n    long midval35\
    \ = minval + \n}\nint main() {\n    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9}))) == (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  stdout: ''
  stderr: "/tmp/tmp69i6r5y_.cpp: In function \u2018std::vector<long int> strange_sort_list(std::vector<long\
    \ int>)\u2019:\n/tmp/tmp69i6r5y_.cpp:49:1: error: expected primary-expression\
    \ before \u2018}\u2019 token\n   49 | }\n      | ^\n/tmp/tmp69i6r5y_.cpp:49:1:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    std::vector<long>\
    \ res;\n    res.reserve(lst.size());\n    for (long i : lst) {\n        res.push_back(i);\n\
    \    }\n    std::sort(res.begin(), res.end());\n    return res;\n}\nint main()\
    \ {\n    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9}))) == (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  stdout: ''
  stderr: "tmp4r6u8yyd: /tmp/tmp4r6u8yyd.cpp:21: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    std::vector<long>\
    \ lst2;\n    long min = lst.front();\n    long max = lst.back();\n    for (long\
    \ i : lst) {\n        if (i < min) {\n            min = i;\n        }\n      \
    \  if (i > max) {\n            max = i;\n        }\n    }\n    for (long i : lst)\
    \ {\n        if (i == min) {\n            lst2.push_back(min);\n        } else\
    \ if (i == max) {\n            lst2.push_back(max);\n        } else {\n      \
    \      lst2.push_back(i);\n        }\n    }\n    return lst2;\n}\nint main() {\n\
    \    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9}))) == (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  stdout: ''
  stderr: "tmphcbofy0d: /tmp/tmphcbofy0d.cpp:35: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    std::vector<long>\
    \ result;\n    long min = lst.front();\n    long max = lst.back();\n    for (long\
    \ i : lst) {\n        if (i < min) {\n            min = i;\n        } else if\
    \ (i > max) {\n            max = i;\n        }\n    }\n    for (long i : lst)\
    \ {\n        if (i < min) {\n            result.push_back(min);\n            min\
    \ = i;\n        } else if (i > max) {\n            result.push_back(max);\n  \
    \          max = i;\n        } else {\n            result.push_back(i);\n    \
    \    }\n    }\n    return result;\n}\nint main() {\n    auto candidate = strange_sort_list;\n\
    \    assert(candidate((std::vector<long>({1, 2, 3, 4}))) == (std::vector<long>({1,\
    \ 4, 2, 3})));\n    assert(candidate((std::vector<long>({5, 6, 7, 8, 9}))) ==\
    \ (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  stdout: ''
  stderr: "tmpals7ktil: /tmp/tmpals7ktil.cpp:36: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    std::vector<long>\
    \ result;\n    long min = lst.front();\n    long max = lst.back();\n    for (long\
    \ i : lst) {\n        if (i < min) {\n            min = i;\n        }\n      \
    \  if (i > max) {\n            max = i;\n        }\n    }\n    long mid = min\
    \ + (max - min) / 2;\n    for (long i : lst) {\n        if (i < mid) {\n     \
    \       result.push_back(i);\n        }\n        if (i > mid) {\n            result.push_back(mid);\n\
    \        }\n        mid = min + (max - min) / 2;\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9}))) == (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  stdout: ''
  stderr: "tmpes9qnc6d: /tmp/tmpes9qnc6d.cpp:36: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    std::vector<long>\
    \ res;\n    long min = lst.front();\n    long max = lst.back();\n    for (long\
    \ i : lst) {\n        if (i < min) {\n            min = i;\n        }\n      \
    \  if (i > max) {\n            max = i;\n        }\n    }\n    res.push_back(min);\n\
    \    res.push_back(max);\n    for (long i : lst) {\n        if (i < min) {\n \
    \           min = i;\n        }\n        if (i > max) {\n            max = i;\n\
    \        }\n    }\n    res.push_back(min);\n    res.push_back(max);\n    return\
    \ res;\n}\nint main() {\n    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9}))) == (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  stdout: ''
  stderr: "tmp8b1yhkru: /tmp/tmp8b1yhkru.cpp:38: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    std::vector<long>\
    \ res;\n    long min = *std::min_element(lst.begin(), lst.end());\n    long max\
    \ = *std::max_element(lst.begin(), lst.end());\n    long mid = min + (max - min)\
    \ / 2;\n    for (long i : lst) {\n        if (i < mid) {\n            res.push_back(i);\n\
    \        } else if (i > mid) {\n            res.push_back(mid);\n        } else\
    \ {\n            res.push_back(i);\n        }\n    }\n    return res;\n}\nint\
    \ main() {\n    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9}))) == (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  stdout: ''
  stderr: "tmpldbbu1br: /tmp/tmpldbbu1br.cpp:28: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    std::vector<long>\
    \ result;\n    long min = std::numeric_limits<long>::min();\n    long max = std::numeric_limits<long>::max();\n\
    \    for (long i : lst) {\n        if (i < min) {\n            min = i;\n    \
    \    } else if (i > max) {\n            max = i;\n        }\n    }\n    for (long\
    \ i : lst) {\n        if (i < min) {\n            result.push_back(min);\n   \
    \         min = i;\n        } else if (i > max) {\n            result.push_back(max);\n\
    \            max = i;\n        } else {\n            result.push_back(i);\n  \
    \      }\n    }\n    return result;\n}\nint main() {\n    auto candidate = strange_sort_list;\n\
    \    assert(candidate((std::vector<long>({1, 2, 3, 4}))) == (std::vector<long>({1,\
    \ 4, 2, 3})));\n    assert(candidate((std::vector<long>({5, 6, 7, 8, 9}))) ==\
    \ (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  stdout: ''
  stderr: "tmpwbdda8gk: /tmp/tmpwbdda8gk.cpp:36: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    std::vector<long>\
    \ res;\n    res.reserve(lst.size());\n    for (long i : lst) {\n        res.push_back(i);\n\
    \    }\n    std::sort(res.begin(), res.end());\n    return res;\n}\nint main()\
    \ {\n    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9}))) == (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  stdout: ''
  stderr: "tmp81tsp13y: /tmp/tmp81tsp13y.cpp:21: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    std::vector<long>\
    \ result;\n    long min = std::numeric_limits<long>::min();\n    long max = std::numeric_limits<long>::max();\n\
    \    for (long i : lst) {\n        if (i < min) {\n            min = i;\n    \
    \    }\n        if (i > max) {\n            max = i;\n        }\n    }\n    for\
    \ (long i : lst) {\n        if (i == min) {\n            result.push_back(min);\n\
    \        } else if (i == max) {\n            result.push_back(max);\n        }\
    \ else {\n            result.push_back(i);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9}))) == (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  stdout: ''
  stderr: "tmpe5p9a30k: /tmp/tmpe5p9a30k.cpp:35: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    std::vector<long>\
    \ res;\n    long min = std::numeric_limits<long>::min();\n    long max = std::numeric_limits<long>::max();\n\
    \    for (long i : lst) {\n        if (i < min) {\n            min = i;\n    \
    \    }\n        if (i > max) {\n            max = i;\n        }\n    }\n    for\
    \ (long i : lst) {\n        if (i < min) {\n            min = i;\n        }\n\
    \        if (i > max) {\n            max = i;\n        }\n    }\n    for (long\
    \ i : lst) {\n        if (i < min) {\n            min = i;\n        }\n      \
    \  if (i > max) {\n            max = i;\n        }\n    }\n    for (long i : lst)\
    \ {\n        if (i < min) {\n            min = i;\n        }\n        if (i >\
    \ max) {\n            max = i;\n        }\n    }\n    for (long i : lst) {\n \
    \       if (i < min) {\n            min = i;\n        }\n        if (i > max)\
    \ {\n            max = i;\n        }\n    }\n    for (long i : lst) {\n      \
    \  if (i < min) {\n            min = i;\n        }\n        if (i > max) {\n \
    \           max = i;\n        }\n    }\n    for (long i : lst) {\n        if (i\
    \ < min) {\n            min = i;\n        }\n        if (i > max) {\n        \
    \    max = i;\n        }\n    }\n    for (long i : lst) {\n        if (i < min)\
    \ {\n            min = i;\n        }\n        if (i > max) {\n            max\
    \ = i;\n        }\n    }\n    for (long i : lst) {\n        if (i < min) {\n \
    \           min = i;\n        }\n        if (i > max) {\n            max = i;\n\
    \        }\n    }\n    for (long i : lst) {\n        if (i < min) {\n        \
    \    min = i;\n        }\n        if (i > max) {\n            max = i;\n     \
    \   }\n    }\n    for (long i : lst) {\n        if (i < min) {\n            min\
    \ = i;\n        }\n        if (i > max) {\n            max = i;\n        }\n \
    \   }\n    for (long i : lst) {\n        if (i < min) {\n            min = i;\n\
    \        }\n        if (i > max) {\n            max = i;\n        }\n    }\n \
    \   for (long i : lst) {\n        if (i < min) {\n            min = i;\n     \
    \   }\n        if (i > max) {\n            max = i;\n        }\n    }\n    for\
    \ (long i : lst) {\n        if (i < min) {\n            min = i;\n        }\n\
    \        if (i > max) {\n            max = i;\n        }\n    }\n    for (long\
    \ i : lst) {\n        if (i < min) {\n            min = i;\n        }\n      \
    \  if (i > max) {\n            max = i;\n        }\n    }\n    for (long i : lst)\
    \ {\n        if (i < min) {\n            min = i;\n        }\n}\nint main() {\n\
    \    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9}))) == (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  stdout: ''
  stderr: "/tmp/tmps_as8vzw.cpp: In function \u2018std::vector<long int> strange_sort_list(std::vector<long\
    \ int>)\u2019:\n/tmp/tmps_as8vzw.cpp:139:12: error: a function-definition is not\
    \ allowed here before \u2018{\u2019 token\n  139 | int main() {\n      |     \
    \       ^\n/tmp/tmps_as8vzw.cpp:150:1: error: expected \u2018}\u2019 at end of\
    \ input\n  150 | }\n      | ^\n/tmp/tmps_as8vzw.cpp:10:60: note: to match this\
    \ \u2018{\u2019\n   10 | std::vector<long> strange_sort_list(std::vector<long>\
    \ lst) {\n      |                                                            ^\n\
    /tmp/tmps_as8vzw.cpp:150:1: warning: no return statement in function returning\
    \ non-void [-Wreturn-type]\n  150 | }\n      | ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    std::vector<long>\
    \ res;\n    res.reserve(lst.size());\n    for (long i : lst) {\n        res.push_back(i);\n\
    \    }\n    std::sort(res.begin(), res.end());\n    return res;\n}\nint main()\
    \ {\n    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9}))) == (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  stdout: ''
  stderr: "tmpbcgrw145: /tmp/tmpbcgrw145.cpp:21: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    std::vector<long>\
    \ res;\n    res.reserve(lst.size());\n    for (long i : lst) {\n        res.push_back(i);\n\
    \    }\n    std::sort(res.begin(), res.end());\n    return res;\n}\nint main()\
    \ {\n    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9}))) == (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  stdout: ''
  stderr: "tmp7mwwhh3k: /tmp/tmp7mwwhh3k.cpp:21: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    std::vector<long>\
    \ lst2;\n    long min = lst.front();\n    long max = lst.back();\n    for (long\
    \ i : lst) {\n        if (i < min) {\n            min = i;\n        } else if\
    \ (i > max) {\n            max = i;\n        }\n    }\n    long mid = min + (max\
    \ - min) / 2;\n    lst2.push_back(min);\n    lst2.push_back(mid);\n    lst2.push_back(max);\n\
    \    return lst2;\n}\nint main() {\n    auto candidate = strange_sort_list;\n\
    \    assert(candidate((std::vector<long>({1, 2, 3, 4}))) == (std::vector<long>({1,\
    \ 4, 2, 3})));\n    assert(candidate((std::vector<long>({5, 6, 7, 8, 9}))) ==\
    \ (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  stdout: ''
  stderr: "tmpft934ui7: /tmp/tmpft934ui7.cpp:29: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    // Write\
    \ your code here\n    std::vector<long> result;\n    long min = lst.front();\n\
    \    long max = lst.back();\n    for (long i : lst) {\n        if (i < min) {\n\
    \            min = i;\n        }\n        if (i > max) {\n            max = i;\n\
    \        }\n    }\n    for (long i : lst) {\n        if (i == min) {\n       \
    \     result.push_back(min);\n        } else if (i == max) {\n            result.push_back(max);\n\
    \        } else {\n            result.push_back(i);\n        }\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9}))) == (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  stdout: ''
  stderr: "tmphuakoh7l: /tmp/tmphuakoh7l.cpp:36: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    std::vector<long>\
    \ lst1;\n    std::vector<long> lst2;\n    std::vector<long> lst3;\n    std::vector<long>\
    \ lst4;\n    std::vector<long> lst5;\n    std::vector<long> lst6;\n    std::vector<long>\
    \ lst7;\n    std::vector<long> lst8;\n    std::vector<long> lst9;\n    std::vector<long>\
    \ lst10;\n    std::vector<long> lst11;\n    std::vector<long> lst12;\n    std::vector<long>\
    \ lst13;\n    std::vector<long> lst14;\n    std::vector<long> lst15;\n    std::vector<long>\
    \ lst16;\n    std::vector<long> lst17;\n    std::vector<long> lst18;\n    std::vector<long>\
    \ lst19;\n    std::vector<long> lst20;\n    std::vector<long> lst21;\n    std::vector<long>\
    \ lst22;\n    std::vector<long> lst23;\n    std::vector<long> lst24;\n    std::vector<long>\
    \ lst25;\n    std::vector<long> lst26;\n    std::vector<long> lst27;\n    std::vector<long>\
    \ lst28;\n    std::vector<long> lst29;\n    std::vector<long> lst30;\n    std::vector<long>\
    \ lst31;\n    std::vector<long> lst32;\n    std::vector<long> lst33;\n    std::vector<long>\
    \ lst34;\n    std::vector<long> lst35;\n    std::vector<long> lst36;\n    std::vector<long>\
    \ lst37;\n    std::vector<long> lst38;\n    std::vector<long> lst39;\n    std::vector<long>\
    \ lst40;\n    std::vector<long> lst41;\n    std::vector<long> lst42;\n    std::vector<long>\
    \ lst43;\n    std::vector<long> lst44;\n    std::vector<long> lst45;\n    std::vector<long>\
    \ lst46;\n    std::vector<long> lst47;\n    std::vector<long> lst48;\n    std::vector<long>\
    \ lst49;\n    std::vector<long> lst50;\n    std::vector<long> lst51;\n    std::vector<long>\
    \ lst52;\n    std::vector<long> lst53;\n    std::vector<long> lst54;\n    std::vector<long>\
    \ lst55;\n    std::vector<long> lst56;\n    std::vector<long> lst57;\n    std::vector<long>\
    \ lst58;\n    std::vector<long> lst59;\n    std::vector<long> lst60;\n    std::vector<long>\
    \ lst61;\n    std::vector<long> lst62;\n    std::vector<long> lst63;\n    std::vector<long>\
    \ lst64;\n    std::vector<long> lst65;\n    std::vector<long> lst66;\n    std::vector<long>\
    \ \n}\nint main() {\n    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9}))) == (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  stdout: ''
  stderr: "/tmp/tmp_15pzc5o.cpp: In function \u2018std::vector<long int> strange_sort_list(std::vector<long\
    \ int>)\u2019:\n/tmp/tmp_15pzc5o.cpp:78:1: error: expected unqualified-id before\
    \ \u2018}\u2019 token\n   78 | }\n      | ^\n/tmp/tmp_15pzc5o.cpp:78:1: warning:\
    \ no return statement in function returning non-void [-Wreturn-type]\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    std::vector<long>\
    \ res;\n    long min = lst.front();\n    long max = lst.back();\n    for (long\
    \ i : lst) {\n        if (i < min) {\n            min = i;\n        } else if\
    \ (i > max) {\n            max = i;\n        }\n    }\n    res.push_back(min);\n\
    \    res.push_back(max);\n    for (long i : lst) {\n        if (i == min) {\n\
    \            res.push_back(i);\n        } else if (i == max) {\n            res.push_back(i);\n\
    \        } else {\n            res.push_back(i);\n            res.push_back(min\
    \ + 1);\n            res.push_back(max - 1);\n        }\n    }\n    return res;\n\
    }\nint main() {\n    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9}))) == (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  stdout: ''
  stderr: "tmp3f6jk99z: /tmp/tmp3f6jk99z.cpp:38: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    std::vector<long>\
    \ res;\n    res.reserve(lst.size());\n    for (long i : lst) {\n        res.push_back(i);\n\
    \    }\n    std::sort(res.begin(), res.end());\n    return res;\n}\nint main()\
    \ {\n    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9}))) == (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  stdout: ''
  stderr: "tmp595wuv2x: /tmp/tmp595wuv2x.cpp:21: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    // Your\
    \ code here\n    std::vector<long> res;\n    res.reserve(lst.size());\n    long\
    \ min = *std::min_element(lst.begin(), lst.end());\n    long max = *std::max_element(lst.begin(),\
    \ lst.end());\n    for (long i : lst) {\n        if (i < min) {\n            min\
    \ = i;\n        }\n        if (i > max) {\n            max = i;\n        }\n \
    \   }\n    for (long i : lst) {\n        if (i == min) {\n            res.push_back(min);\n\
    \        } else if (i == max) {\n            res.push_back(max);\n        } else\
    \ {\n            res.push_back(i);\n        }\n    }\n    return res;\n}\nint\
    \ main() {\n    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9}))) == (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  stdout: ''
  stderr: "tmpx9d13fsx: /tmp/tmpx9d13fsx.cpp:37: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    std::vector<long>\
    \ res;\n    res.reserve(lst.size());\n    for (long i : lst) {\n        res.push_back(i);\n\
    \    }\n    std::sort(res.begin(), res.end());\n    return res;\n}\nint main()\
    \ {\n    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9}))) == (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  stdout: ''
  stderr: "tmp82mg4mmd: /tmp/tmp82mg4mmd.cpp:21: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    // Write\
    \ your code here.\n    std::vector<long> result;\n    long min = lst.front();\n\
    \    long max = lst.back();\n    long mid = 0;\n    for (long i : lst) {\n   \
    \     if (i < min) {\n            min = i;\n        } else if (i > max) {\n  \
    \          max = i;\n        }\n    }\n    mid = (min + max) / 2;\n    for (long\
    \ i : lst) {\n        if (i < mid) {\n            result.push_back(i);\n     \
    \   } else if (i > mid) {\n            result.push_back(mid);\n        } else\
    \ {\n            result.push_back(mid);\n            result.push_back(i);\n  \
    \      }\n    }\n    return result;\n}\nint main() {\n    auto candidate = strange_sort_list;\n\
    \    assert(candidate((std::vector<long>({1, 2, 3, 4}))) == (std::vector<long>({1,\
    \ 4, 2, 3})));\n    assert(candidate((std::vector<long>({5, 6, 7, 8, 9}))) ==\
    \ (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  stdout: ''
  stderr: "tmpqzdnj9zi: /tmp/tmpqzdnj9zi.cpp:38: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    std::vector<long>\
    \ result;\n    long min = lst.front();\n    long max = lst.back();\n    for (long\
    \ i : lst) {\n        if (i < min) {\n            min = i;\n        } else if\
    \ (i > max) {\n            max = i;\n        }\n    }\n    long mid = min + (max\
    \ - min) / 2;\n    long temp = min;\n    while (min <= max) {\n        if (mid\
    \ < lst[temp]) {\n            result.push_back(temp);\n            mid = mid +\
    \ 1;\n            temp++;\n        } else {\n            result.push_back(temp);\n\
    \            mid = mid - 1;\n            temp--;\n        }\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9}))) == (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    // Your\
    \ code here\n    std::vector<long> res;\n    res.reserve(lst.size());\n    for\
    \ (long i : lst) {\n        res.push_back(i);\n    }\n    std::sort(res.begin(),\
    \ res.end());\n    return res;\n}\nint main() {\n    auto candidate = strange_sort_list;\n\
    \    assert(candidate((std::vector<long>({1, 2, 3, 4}))) == (std::vector<long>({1,\
    \ 4, 2, 3})));\n    assert(candidate((std::vector<long>({5, 6, 7, 8, 9}))) ==\
    \ (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  stdout: ''
  stderr: "tmp15txgwgl: /tmp/tmp15txgwgl.cpp:22: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of integers,\
    \ return list in strange order.\n// Strange sorting, is when you start with the\
    \ minimum value,\n// then maximum of the remaining integers, then minimum and\
    \ so on.\n// Examples:\n// strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n//\
    \ strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n// strange_sort_list([]) ==\
    \ []\nstd::vector<long> strange_sort_list(std::vector<long> lst) {\n    std::vector<long>\
    \ res;\n    res.reserve(lst.size());\n    for (long i : lst) {\n        res.push_back(i);\n\
    \    }\n    std::sort(res.begin(), res.end());\n    return res;\n}\nint main()\
    \ {\n    auto candidate = strange_sort_list;\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9}))) == (std::vector<long>({5, 9, 6, 8, 7})));\n    assert(candidate((std::vector<long>({1,\
    \ 2, 3, 4, 5}))) == (std::vector<long>({1, 5, 2, 4, 3})));\n    assert(candidate((std::vector<long>({5,\
    \ 6, 7, 8, 9, 1}))) == (std::vector<long>({1, 9, 5, 8, 6, 7})));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5}))) == (std::vector<long>({5, 5, 5, 5})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({1, 2, 3,\
    \ 4, 5, 6, 7, 8}))) == (std::vector<long>({1, 8, 2, 7, 3, 6, 4, 5})));\n    assert(candidate((std::vector<long>({0,\
    \ 2, 2, 2, 5, 5, -5, -5}))) == (std::vector<long>({-5, 5, -5, 5, 0, 2, 2, 2})));\n\
    \    assert(candidate((std::vector<long>({111111}))) == (std::vector<long>({111111})));\n\
    }\n"
  stdout: ''
  stderr: "tmpojpfvn2_: /tmp/tmpojpfvn2_.cpp:21: int main(): Assertion `candidate((std::vector<long>({1,\
    \ 2, 3, 4}))) == (std::vector<long>({1, 4, 2, 3}))' failed.\n"
  exit_code: -6
  status: Exception
