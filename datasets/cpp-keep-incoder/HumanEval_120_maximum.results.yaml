name: HumanEval_120_maximum
language: cpp
results:
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n    // Your code here\n    std::vector<long> result;\n    long\
    \ max_val = arr[0];\n    long max_idx = -1;\n    for (long i = 1; i < arr.size();\
    \ i++) {\n        if (arr[i] > max_val) {\n            max_val = arr[i];\n   \
    \         max_idx = i;\n        }\n    }\n    result.push_back(max_val);\n   \
    \ result.push_back(arr[max_idx]);\n    return result;\n}\nint main() {\n    auto\
    \ candidate = maximum;\n    assert(candidate((std::vector<long>({-3, -4, 5})),\
    \ (3)) == (std::vector<long>({-4, -3, 5})));\n    assert(candidate((std::vector<long>({4,\
    \ -4, 4})), (2)) == (std::vector<long>({4, 4})));\n    assert(candidate((std::vector<long>({-3,\
    \ 2, 1, 2, -1, -2, 1})), (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmpszfrvf4j: /tmp/tmpszfrvf4j.cpp:35: int main(): Assertion `candidate((std::vector<long>({-3,\
    \ -4, 5})), (3)) == (std::vector<long>({-4, -3, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n    // code here\n    std::vector<long> max;\n    max.reserve(k);\n\
    \    long max_val = arr[0];\n    for(long i = 1; i < k; i++) {\n        if(arr[i]\
    \ > max_val) {\n            max_val = arr[i];\n        }\n    }\n    for(long\
    \ i = 0; i < k; i++) {\n        if(arr[i] > max_val) {\n            max.push_back(arr[i]);\n\
    \        }\n    }\n    return max;\n}\nint main() {\n    auto candidate = maximum;\n\
    \    assert(candidate((std::vector<long>({-3, -4, 5})), (3)) == (std::vector<long>({-4,\
    \ -3, 5})));\n    assert(candidate((std::vector<long>({4, -4, 4})), (2)) == (std::vector<long>({4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-3, 2, 1, 2, -1, -2, 1})),\
    \ (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmpgzn6nesk: /tmp/tmpgzn6nesk.cpp:37: int main(): Assertion `candidate((std::vector<long>({-3,\
    \ -4, 5})), (3)) == (std::vector<long>({-4, -3, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n    std::vector<long> ans;\n    long max = 0;\n    for (long\
    \ i = 0; i < arr.size(); i++) {\n        if (arr[i] > max) {\n            max\
    \ = arr[i];\n        }\n    }\n    for (long i = 0; i < arr.size(); i++) {\n \
    \       if (arr[i] == max) {\n            ans.push_back(arr[i]);\n        }\n\
    \    }\n    return ans;\n}\nint main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({-3,\
    \ -4, 5})), (3)) == (std::vector<long>({-4, -3, 5})));\n    assert(candidate((std::vector<long>({4,\
    \ -4, 4})), (2)) == (std::vector<long>({4, 4})));\n    assert(candidate((std::vector<long>({-3,\
    \ 2, 1, 2, -1, -2, 1})), (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmp6v_8dbo3: /tmp/tmp6v_8dbo3.cpp:35: int main(): Assertion `candidate((std::vector<long>({-3,\
    \ -4, 5})), (3)) == (std::vector<long>({-4, -3, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n    std::vector<long> ans;\n    long max_val = arr[0];\n   \
    \ long max_idx = -1;\n    for (long i = 1; i < arr.size(); i++) {\n        if\
    \ (arr[i] > max_val) {\n            max_val = arr[i];\n            max_idx = i;\n\
    \        }\n    }\n    ans.push_back(max_val);\n    for (long i = max_idx + 1;\
    \ i < arr.size(); i++) {\n        if (arr[i] > max_val) {\n            ans.push_back(arr[i]);\n\
    \        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate = maximum;\n\
    \    assert(candidate((std::vector<long>({-3, -4, 5})), (3)) == (std::vector<long>({-4,\
    \ -3, 5})));\n    assert(candidate((std::vector<long>({4, -4, 4})), (2)) == (std::vector<long>({4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-3, 2, 1, 2, -1, -2, 1})),\
    \ (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmpr036n0og: /tmp/tmpr036n0og.cpp:38: int main(): Assertion `candidate((std::vector<long>({-3,\
    \ -4, 5})), (3)) == (std::vector<long>({-4, -3, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n    long n = arr.size();\n    std::vector<long> ans;\n    long\
    \ max_val = arr[0];\n    long max_idx = -1;\n    for(long i = 1; i < n; i++) {\n\
    \        if(arr[i] > max_val) {\n            max_val = arr[i];\n            max_idx\
    \ = i;\n        }\n    }\n    ans.push_back(max_val);\n    for(long i = max_idx\
    \ + 1; i < n; i++) {\n        if(arr[i] > max_val) {\n            ans.push_back(arr[i]);\n\
    \        }\n    }\n    for(long i = max_idx; i >= 0; i--) {\n        if(arr[i]\
    \ > max_val) {\n            ans.push_back(arr[i]);\n        }\n    }\n    return\
    \ ans;\n}\nint main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({-3,\
    \ -4, 5})), (3)) == (std::vector<long>({-4, -3, 5})));\n    assert(candidate((std::vector<long>({4,\
    \ -4, 4})), (2)) == (std::vector<long>({4, 4})));\n    assert(candidate((std::vector<long>({-3,\
    \ 2, 1, 2, -1, -2, 1})), (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmpsrbbj3n0: /tmp/tmpsrbbj3n0.cpp:44: int main(): Assertion `candidate((std::vector<long>({-3,\
    \ -4, 5})), (3)) == (std::vector<long>({-4, -3, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n    long long int max_so_far = arr[0];\n    std::vector<long>\
    \ max_ending_here;\n    max_ending_here.push_back(max_so_far);\n    for(long long\
    \ int i = 1; i < arr.size(); i++) {\n        if(arr[i] > max_so_far) {\n     \
    \       max_so_far = arr[i];\n        }\n        if(max_so_far >= arr[i]) {\n\
    \            max_ending_here.push_back(max_so_far);\n            max_so_far =\
    \ arr[i];\n        }\n    }\n    if(max_so_far >= arr[k]) {\n        max_ending_here.push_back(max_so_far);\n\
    \    }\n    return max_ending_here;\n}\nint main() {\n    auto candidate = maximum;\n\
    \    assert(candidate((std::vector<long>({-3, -4, 5})), (3)) == (std::vector<long>({-4,\
    \ -3, 5})));\n    assert(candidate((std::vector<long>({4, -4, 4})), (2)) == (std::vector<long>({4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-3, 2, 1, 2, -1, -2, 1})),\
    \ (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmp6n1_yhqn: /tmp/tmp6n1_yhqn.cpp:38: int main(): Assertion `candidate((std::vector<long>({-3,\
    \ -4, 5})), (3)) == (std::vector<long>({-4, -3, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n    std::vector<long> ans;\n    long max = 0;\n    long i =\
    \ 0;\n    long j = 0;\n    long n = arr.size();\n    long mid = n / 2;\n    while\
    \ (i < n) {\n        if (arr[i] > max) {\n            max = arr[i];\n        \
    \    ans.clear();\n            ans.push_back(i);\n        }\n        else if (arr[i]\
    \ == max) {\n            ans.push_back(arr[i]);\n        }\n        else if (arr[i]\
    \ < max) {\n            j = i;\n            while (j < n && arr[j] < max) {\n\
    \                j++;\n            }\n            ans.push_back(arr[j]);\n   \
    \         i = j;\n        }\n        i++;\n    }\n    if (k > ans.size()) {\n\
    \        k = ans.size();\n    }\n    ans.resize(k);\n    return ans;\n}\nint main()\
    \ {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({-3,\
    \ -4, 5})), (3)) == (std::vector<long>({-4, -3, 5})));\n    assert(candidate((std::vector<long>({4,\
    \ -4, 4})), (2)) == (std::vector<long>({4, 4})));\n    assert(candidate((std::vector<long>({-3,\
    \ 2, 1, 2, -1, -2, 1})), (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmpahhlids4: /tmp/tmpahhlids4.cpp:52: int main(): Assertion `candidate((std::vector<long>({-3,\
    \ -4, 5})), (3)) == (std::vector<long>({-4, -3, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n    std::vector<long> res;\n    long max = 0;\n    long i =\
    \ 0;\n    long j = 0;\n    long n = arr.size();\n    long mid = n / 2;\n    while\
    \ (i < n) {\n        if (arr[i] > max) {\n            max = arr[i];\n        }\n\
    \        i++;\n    }\n    while (j < k) {\n        if (max < arr[j]) {\n     \
    \       max = arr[j];\n        }\n        j++;\n    }\n    while (i < n) {\n \
    \       if (arr[i] > max) {\n            max = arr[i];\n        }\n        i++;\n\
    \    }\n    while (j < k) {\n        if (max < arr[j]) {\n            max = arr[j];\n\
    \        }\n        j++;\n    }\n    while (i < n) {\n        if (arr[i] > max)\
    \ {\n            max = arr[i];\n        }\n        i++;\n    }\n    while (j <\
    \ k) {\n        if (max < arr[j]) {\n            max = arr[j];\n        }\n  \
    \      j++;\n    }\n    while (i < n) {\n        if (arr[i] > max) {\n       \
    \     max = arr[i];\n        }\n        i++;\n    }\n    while (j < k) {\n   \
    \     if (max < arr[j]) {\n            max = arr[j];\n        }\n        j++;\n\
    \    }\n    while (i < n) {\n        if (arr[i] > max) {\n            max = arr[i];\n\
    \        }\n        i++;\n    }\n    while (j < k) {\n        if (max < arr[j])\
    \ {\n            max = arr[j];\n        }\n        j++;\n    }\n    while (i <\
    \ n) {\n        if (arr[i] > max) {\n            max = arr[i];\n        }\n  \
    \      i++;\n    }\n    while (j < k) {\n        if (max < arr[j]) {\n       \
    \     max = arr[j];\n        }\n        j++;\n    }\n    while (i < n) {\n   \
    \     if (arr[i] > max) {\n            max = arr[i];\n        }\n        i++;\n\
    \    }\n    while (j < k) {\n        if (max < arr[j]) {\n            max = arr[j];\n\
    \        }\n        j++;\n    }\n    while (i < n) {\n        if (arr[i] > max)\
    \ {\n            max = arr[i];\n        }\n        i++;\n    }\n    while (j <\
    \ k) {\n        if (max < arr[j]) {\n            max = arr[j];\n        }\n  \
    \      j++;\n    }\n    while (i < n) {\n        if (arr[i] > max) {\n       \
    \     max = arr[i];\n        }\n        i++;\n    }\n    while (j < k) {\n   \
    \     if (max < arr[j]) {\n            max = arr[j];\n        }\n        j++;\n\
    \    }\n    while (i < n) {\n        if (arr[i] > max) {\n            max = arr[i];\n\
    \        }\n        i++;\n    }\n    while (j < k) {\n        if (max < arr[j])\
    \ {\n\n}\nint main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({-3,\
    \ -4, 5})), (3)) == (std::vector<long>({-4, -3, 5})));\n    assert(candidate((std::vector<long>({4,\
    \ -4, 4})), (2)) == (std::vector<long>({4, 4})));\n    assert(candidate((std::vector<long>({-3,\
    \ 2, 1, 2, -1, -2, 1})), (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp5irul_fi.cpp: In function \u2018std::vector<long int> maximum(std::vector<long\
    \ int>, long int)\u2019:\n/tmp/tmp5irul_fi.cpp:143:12: error: a function-definition\
    \ is not allowed here before \u2018{\u2019 token\n  143 | int main() {\n     \
    \ |            ^\n/tmp/tmp5irul_fi.cpp:156:1: error: expected \u2018}\u2019 at\
    \ end of input\n  156 | }\n      | ^\n/tmp/tmp5irul_fi.cpp:139:19: note: to match\
    \ this \u2018{\u2019\n  139 |     while (j < k) {\n      |                   ^\n\
    /tmp/tmp5irul_fi.cpp:156:1: error: expected \u2018}\u2019 at end of input\n  156\
    \ | }\n      | ^\n/tmp/tmp5irul_fi.cpp:18:58: note: to match this \u2018{\u2019\
    \n   18 | std::vector<long> maximum(std::vector<long> arr, long k) {\n      |\
    \                                                          ^\n/tmp/tmp5irul_fi.cpp:156:1:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n\
    \  156 | }\n      | ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n    std::vector<long> max_arr(k);\n    long max_num = arr[0];\n\
    \    long index = 0;\n    for (long i = 1; i < k; i++) {\n        if (arr[i] >\
    \ max_num) {\n            max_num = arr[i];\n        }\n    }\n    for (long i\
    \ = 0; i < k; i++) {\n        if (arr[i] > max_num) {\n            max_arr[i]\
    \ = arr[i];\n        }\n    }\n    return max_arr;\n}\nint main() {\n    auto\
    \ candidate = maximum;\n    assert(candidate((std::vector<long>({-3, -4, 5})),\
    \ (3)) == (std::vector<long>({-4, -3, 5})));\n    assert(candidate((std::vector<long>({4,\
    \ -4, 4})), (2)) == (std::vector<long>({4, 4})));\n    assert(candidate((std::vector<long>({-3,\
    \ 2, 1, 2, -1, -2, 1})), (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmptnk7on61: /tmp/tmptnk7on61.cpp:36: int main(): Assertion `candidate((std::vector<long>({-3,\
    \ -4, 5})), (3)) == (std::vector<long>({-4, -3, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n    std::vector<long> ans;\n    long max_val = arr[0];\n   \
    \ long max_idx = -1;\n    for (long i = 1; i < arr.size(); i++) {\n        if\
    \ (arr[i] > max_val) {\n            max_val = arr[i];\n            max_idx = i;\n\
    \        }\n    }\n    ans.push_back(max_val);\n    for (long i = max_idx + 1;\
    \ i < arr.size(); i++) {\n        if (arr[i] > max_val) {\n            ans.push_back(arr[i]);\n\
    \        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate = maximum;\n\
    \    assert(candidate((std::vector<long>({-3, -4, 5})), (3)) == (std::vector<long>({-4,\
    \ -3, 5})));\n    assert(candidate((std::vector<long>({4, -4, 4})), (2)) == (std::vector<long>({4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-3, 2, 1, 2, -1, -2, 1})),\
    \ (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmppck06u6z: /tmp/tmppck06u6z.cpp:38: int main(): Assertion `candidate((std::vector<long>({-3,\
    \ -4, 5})), (3)) == (std::vector<long>({-4, -3, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n    std::vector<long> ans;\n    long max = 0;\n    long i =\
    \ 0;\n    long j = 0;\n    long size = arr.size();\n    long mid = size / 2;\n\
    \    while (i < size) {\n        if (arr[i] > max) {\n            max = arr[i];\n\
    \            ans.clear();\n        }\n        if (arr[i] == max) {\n         \
    \   ans.push_back(arr[i]);\n        }\n        i++;\n    }\n    while (j < k)\
    \ {\n        if (max < arr[j]) {\n            max = arr[j];\n            ans.clear();\n\
    \        }\n        if (arr[j] == max) {\n            ans.push_back(arr[j]);\n\
    \        }\n        j++;\n    }\n    return ans;\n}\nint main() {\n    auto candidate\
    \ = maximum;\n    assert(candidate((std::vector<long>({-3, -4, 5})), (3)) == (std::vector<long>({-4,\
    \ -3, 5})));\n    assert(candidate((std::vector<long>({4, -4, 4})), (2)) == (std::vector<long>({4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-3, 2, 1, 2, -1, -2, 1})),\
    \ (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmpczmtkkgc: /tmp/tmpczmtkkgc.cpp:49: int main(): Assertion `candidate((std::vector<long>({-3,\
    \ -4, 5})), (3)) == (std::vector<long>({-4, -3, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n    std::vector<long> ans;\n    long max_val = arr[0];\n   \
    \ long max_idx = -1;\n    for(long i = 1; i < arr.size(); i++) {\n        if(arr[i]\
    \ > max_val) {\n            max_val = arr[i];\n            max_idx = i;\n    \
    \    }\n    }\n    ans.push_back(max_val);\n    while(max_idx != -1) {\n     \
    \   ans.push_back(arr[max_idx]);\n        max_idx = max_idx > 0 ? max_idx - 1\
    \ : 0;\n    }\n    return ans;\n}\nint main() {\n    auto candidate = maximum;\n\
    \    assert(candidate((std::vector<long>({-3, -4, 5})), (3)) == (std::vector<long>({-4,\
    \ -3, 5})));\n    assert(candidate((std::vector<long>({4, -4, 4})), (2)) == (std::vector<long>({4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-3, 2, 1, 2, -1, -2, 1})),\
    \ (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n    std::vector<long> ans;\n    long max_val = arr[0];\n   \
    \ long max_idx = -1;\n    for (long i = 1; i < arr.size(); i++) {\n        if\
    \ (arr[i] > max_val) {\n            max_val = arr[i];\n            max_idx = i;\n\
    \        }\n    }\n    ans.push_back(max_val);\n    ans.push_back(arr[max_idx]);\n\
    \    for (long i = max_idx + 1; i < arr.size(); i++) {\n        if (arr[i] > max_val)\
    \ {\n            ans.push_back(arr[i]);\n        }\n    }\n    return ans;\n}\n\
    int main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({-3,\
    \ -4, 5})), (3)) == (std::vector<long>({-4, -3, 5})));\n    assert(candidate((std::vector<long>({4,\
    \ -4, 4})), (2)) == (std::vector<long>({4, 4})));\n    assert(candidate((std::vector<long>({-3,\
    \ 2, 1, 2, -1, -2, 1})), (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmpekxzg_6j: /tmp/tmpekxzg_6j.cpp:39: int main(): Assertion `candidate((std::vector<long>({-3,\
    \ -4, 5})), (3)) == (std::vector<long>({-4, -3, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n    // write your code here\n    long n = arr.size();\n    long\
    \ max_size = n;\n    std::vector<long> max_arr;\n    long max_num = arr[0];\n\
    \    long max_pos = 0;\n    for(long i = 1; i < n; i++) {\n        if(arr[i] >\
    \ max_num) {\n            max_num = arr[i];\n            max_pos = i;\n      \
    \  }\n    }\n    max_arr.push_back(max_num);\n    for(long i = max_pos; i < n;\
    \ i++) {\n        if(arr[i] > max_num) {\n            max_num = arr[i];\n    \
    \        max_pos = i;\n        }\n    }\n    max_arr.push_back(max_num);\n   \
    \ for(long i = max_pos; i < n; i++) {\n        if(arr[i] > max_num) {\n      \
    \      max_num = arr[i];\n            max_pos = i;\n        }\n    }\n    max_arr.push_back(max_num);\n\
    \    for(long i = max_pos; i < n; i++) {\n        if(arr[i] > max_num) {\n   \
    \         max_num = arr[i];\n            max_pos = i;\n        }\n    }\n    max_arr.push_back(max_num);\n\
    \    for(long i = max_pos; i < n; i++) {\n        if(arr[i] > max_num) {\n   \
    \         max_num = arr[i];\n            max_pos = i;\n        }\n    }\n    max_arr.push_back(max_num);\n\
    \    for(long i = max_pos; i < n; i++) {\n        if(arr[i] > max_num) {\n   \
    \         max_num = arr[i];\n            max_pos = i;\n        }\n    }\n    max_arr.push_back(max_num);\n\
    \    for(long i = max_pos; i < n; i++) {\n        if(arr[i] > max_num) {\n   \
    \         max_num = arr[i];\n            max_pos = i;\n        }\n    }\n    max_arr.push_back(max_num);\n\
    \    for(long i = max_pos; i < n; i++) {\n        if(arr[i] > max_num) {\n   \
    \         max_num = arr[i];\n            max_pos = i;\n        }\n    }\n    max_arr.push_back(max_num);\n\
    \    for(long i = max_pos; i < n; i++) {\n        if(arr[i] > max_num) {\n   \
    \         max_num = arr[i];\n            max_pos = i;\n        }\n    }\n    max_arr.push_back(max_num);\n\
    \    for(long i = max_pos; i < n; i++) {\n        if(arr[i] > max_num) {\n   \
    \         max_num = arr[i];\n            max_pos = i;\n        }\n    }\n    max_arr.push_back(max_num);\n\
    \    for(long i = max_pos; i < n; i++) {\n        if(arr[i] > max_num) {\n   \
    \         max_num = arr[i];\n            max_pos = i;\n        }\n    }\n    max_arr.push_back(max_num);\n\
    \    for(long i = max_pos; i < n; i++) {\n        if(arr[i] > max_num) {\n   \
    \         max_num = arr[i];\n            max_pos = i;\n        }\n    }\n    max_arr.push_back(max_num);\n\
    \    for(long i = max_pos; i < n; i++) {\n        if(arr[i] > max_num) {\n\n}\n\
    int main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({-3,\
    \ -4, 5})), (3)) == (std::vector<long>({-4, -3, 5})));\n    assert(candidate((std::vector<long>({4,\
    \ -4, 4})), (2)) == (std::vector<long>({4, 4})));\n    assert(candidate((std::vector<long>({-3,\
    \ 2, 1, 2, -1, -2, 1})), (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpql_kztb6.cpp: In function \u2018std::vector<long int> maximum(std::vector<long\
    \ int>, long int)\u2019:\n/tmp/tmpql_kztb6.cpp:113:12: error: a function-definition\
    \ is not allowed here before \u2018{\u2019 token\n  113 | int main() {\n     \
    \ |            ^\n/tmp/tmpql_kztb6.cpp:126:1: error: expected \u2018}\u2019 at\
    \ end of input\n  126 | }\n      | ^\n/tmp/tmpql_kztb6.cpp:109:39: note: to match\
    \ this \u2018{\u2019\n  109 |     for(long i = max_pos; i < n; i++) {\n      |\
    \                                       ^\n/tmp/tmpql_kztb6.cpp:126:1: error:\
    \ expected \u2018}\u2019 at end of input\n  126 | }\n      | ^\n/tmp/tmpql_kztb6.cpp:18:58:\
    \ note: to match this \u2018{\u2019\n   18 | std::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n      |                                                    \
    \      ^\n/tmp/tmpql_kztb6.cpp:126:1: warning: no return statement in function\
    \ returning non-void [-Wreturn-type]\n  126 | }\n      | ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n    long n = arr.size();\n    std::vector<long> ans;\n    long\
    \ max_val = arr[0];\n    long max_idx = -1;\n    for (long i = 1; i < n; i++)\
    \ {\n        if (arr[i] > max_val) {\n            max_val = arr[i];\n        \
    \    max_idx = i;\n        }\n    }\n    ans.push_back(max_val);\n    long cur_idx\
    \ = max_idx;\n    for (long i = max_idx + 1; i < n; i++) {\n        if (arr[i]\
    \ > arr[cur_idx]) {\n            ans.push_back(arr[i]);\n            cur_idx =\
    \ i;\n        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate =\
    \ maximum;\n    assert(candidate((std::vector<long>({-3, -4, 5})), (3)) == (std::vector<long>({-4,\
    \ -3, 5})));\n    assert(candidate((std::vector<long>({4, -4, 4})), (2)) == (std::vector<long>({4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-3, 2, 1, 2, -1, -2, 1})),\
    \ (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmp7jo4kv7p: /tmp/tmp7jo4kv7p.cpp:41: int main(): Assertion `candidate((std::vector<long>({-3,\
    \ -4, 5})), (3)) == (std::vector<long>({-4, -3, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n    std::vector<long> ans;\n    long max = 0;\n    long index\
    \ = 0;\n    for(long i = 0; i < arr.size(); i++) {\n        if(arr[i] > max) {\n\
    \            max = arr[i];\n            index = i;\n        }\n    }\n    ans.push_back(max);\n\
    \    while(index < arr.size() && k > 0) {\n        if(arr[index] > max) {\n  \
    \          max = arr[index];\n            ans.push_back(max);\n        }\n   \
    \     index++;\n        k--;\n    }\n    return ans;\n}\nint main() {\n    auto\
    \ candidate = maximum;\n    assert(candidate((std::vector<long>({-3, -4, 5})),\
    \ (3)) == (std::vector<long>({-4, -3, 5})));\n    assert(candidate((std::vector<long>({4,\
    \ -4, 4})), (2)) == (std::vector<long>({4, 4})));\n    assert(candidate((std::vector<long>({-3,\
    \ 2, 1, 2, -1, -2, 1})), (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmpgkpgaaro: /tmp/tmpgkpgaaro.cpp:41: int main(): Assertion `candidate((std::vector<long>({-3,\
    \ -4, 5})), (3)) == (std::vector<long>({-4, -3, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n    // Your code here\n    std::vector<long> max;\n    max.reserve(k);\n\
    \    long maxVal = arr[0];\n    for(long i = 1; i < k; i++) {\n        if(arr[i]\
    \ > maxVal) {\n            maxVal = arr[i];\n        }\n    }\n    for(long i\
    \ = 0; i < k; i++) {\n        if(arr[i] > maxVal) {\n            max.push_back(arr[i]);\n\
    \        }\n    }\n    return max;\n}\nint main() {\n    auto candidate = maximum;\n\
    \    assert(candidate((std::vector<long>({-3, -4, 5})), (3)) == (std::vector<long>({-4,\
    \ -3, 5})));\n    assert(candidate((std::vector<long>({4, -4, 4})), (2)) == (std::vector<long>({4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-3, 2, 1, 2, -1, -2, 1})),\
    \ (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmppdv6v7kx: /tmp/tmppdv6v7kx.cpp:37: int main(): Assertion `candidate((std::vector<long>({-3,\
    \ -4, 5})), (3)) == (std::vector<long>({-4, -3, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n    std::vector<long> result;\n    long max_val = arr[0];\n\
    \    long max_idx = -1;\n    for (size_t i = 0; i < arr.size(); i++) {\n     \
    \   if (arr[i] > max_val) {\n            max_val = arr[i];\n            max_idx\
    \ = i;\n        }\n    }\n    for (size_t i = 0; i < k; i++) {\n        result.push_back(arr[max_idx]);\n\
    \        max_idx--;\n    }\n    return result;\n}\nint main() {\n    auto candidate\
    \ = maximum;\n    assert(candidate((std::vector<long>({-3, -4, 5})), (3)) == (std::vector<long>({-4,\
    \ -3, 5})));\n    assert(candidate((std::vector<long>({4, -4, 4})), (2)) == (std::vector<long>({4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-3, 2, 1, 2, -1, -2, 1})),\
    \ (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmpn6rsx8k2: /tmp/tmpn6rsx8k2.cpp:36: int main(): Assertion `candidate((std::vector<long>({-3,\
    \ -4, 5})), (3)) == (std::vector<long>({-4, -3, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n    std::vector<long> max_arr(k);\n    long max_num = arr[0];\n\
    \    for(long i = 1; i < k; i++) {\n        if(arr[i] > max_num) {\n         \
    \   max_num = arr[i];\n        }\n    }\n    for(long i = 0; i < k; i++) {\n \
    \       if(arr[i] > max_num) {\n            max_arr[i] = arr[i];\n        }\n\
    \    }\n    return max_arr;\n}\nint main() {\n    auto candidate = maximum;\n\
    \    assert(candidate((std::vector<long>({-3, -4, 5})), (3)) == (std::vector<long>({-4,\
    \ -3, 5})));\n    assert(candidate((std::vector<long>({4, -4, 4})), (2)) == (std::vector<long>({4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-3, 2, 1, 2, -1, -2, 1})),\
    \ (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmpx4bs1h0l: /tmp/tmpx4bs1h0l.cpp:35: int main(): Assertion `candidate((std::vector<long>({-3,\
    \ -4, 5})), (3)) == (std::vector<long>({-4, -3, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n    long n = arr.size();\n    std::vector<long> ans;\n    ans.reserve(k);\n\
    \    long max_val = arr[0];\n    long max_idx = -1;\n    for (long i = 1; i <\
    \ n; i++) {\n        if (arr[i] > max_val) {\n            max_val = arr[i];\n\
    \            max_idx = i;\n        }\n    }\n    for (long i = 0; i < k; i++)\
    \ {\n        ans.push_back(arr[max_idx]);\n        max_idx--;\n    }\n    return\
    \ ans;\n}\nint main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({-3,\
    \ -4, 5})), (3)) == (std::vector<long>({-4, -3, 5})));\n    assert(candidate((std::vector<long>({4,\
    \ -4, 4})), (2)) == (std::vector<long>({4, 4})));\n    assert(candidate((std::vector<long>({-3,\
    \ 2, 1, 2, -1, -2, 1})), (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmpruaq4alo: /tmp/tmpruaq4alo.cpp:38: int main(): Assertion `candidate((std::vector<long>({-3,\
    \ -4, 5})), (3)) == (std::vector<long>({-4, -3, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n    std::vector<long> ans;\n    long max_val = arr[0];\n   \
    \ long max_idx = -1;\n    for (long i = 1; i < arr.size(); i++) {\n        if\
    \ (arr[i] > max_val) {\n            max_val = arr[i];\n            max_idx = i;\n\
    \        }\n    }\n    ans.push_back(max_val);\n    for (long i = max_idx; i >=\
    \ 0; i--) {\n        if (i >= k) {\n            break;\n        }\n        ans.push_back(arr[i]);\n\
    \    }\n    return ans;\n}\nint main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({-3,\
    \ -4, 5})), (3)) == (std::vector<long>({-4, -3, 5})));\n    assert(candidate((std::vector<long>({4,\
    \ -4, 4})), (2)) == (std::vector<long>({4, 4})));\n    assert(candidate((std::vector<long>({-3,\
    \ 2, 1, 2, -1, -2, 1})), (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmpoquq8xsi: /tmp/tmpoquq8xsi.cpp:39: int main(): Assertion `candidate((std::vector<long>({-3,\
    \ -4, 5})), (3)) == (std::vector<long>({-4, -3, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n    std::vector<long> max_arr;\n    long max_num = arr[0];\n\
    \    for(long i = 0; i < arr.size(); i++) {\n        if(arr[i] > max_num) {\n\
    \            max_num = arr[i];\n        }\n    }\n    for(long i = 0; i < arr.size();\
    \ i++) {\n        if(arr[i] > max_num) {\n            max_arr.push_back(max_num);\n\
    \        }\n    }\n    for(long i = 0; i < arr.size(); i++) {\n        if(arr[i]\
    \ > max_num) {\n            max_arr.push_back(arr[i]);\n        }\n    }\n   \
    \ return max_arr;\n}\nint main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({-3,\
    \ -4, 5})), (3)) == (std::vector<long>({-4, -3, 5})));\n    assert(candidate((std::vector<long>({4,\
    \ -4, 4})), (2)) == (std::vector<long>({4, 4})));\n    assert(candidate((std::vector<long>({-3,\
    \ 2, 1, 2, -1, -2, 1})), (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmppukxubwa: /tmp/tmppukxubwa.cpp:40: int main(): Assertion `candidate((std::vector<long>({-3,\
    \ -4, 5})), (3)) == (std::vector<long>({-4, -3, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n    long long ans = arr[0];\n    long long max_val = arr[0];\n\
    \    long long max_idx = 1;\n    for(long long i = 1; i < arr.size(); i++) {\n\
    \        if(arr[i] > max_val) {\n            max_val = arr[i];\n            max_idx\
    \ = i;\n        }\n    }\n    std::vector<long> ans_list;\n    for(long long i\
    \ = max_idx; i < k; i++) {\n        ans_list.push_back(arr[i]);\n    }\n    ans_list.push_back(ans);\n\
    \    return ans_list;\n}\nint main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({-3,\
    \ -4, 5})), (3)) == (std::vector<long>({-4, -3, 5})));\n    assert(candidate((std::vector<long>({4,\
    \ -4, 4})), (2)) == (std::vector<long>({4, 4})));\n    assert(candidate((std::vector<long>({-3,\
    \ 2, 1, 2, -1, -2, 1})), (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmpjdqpsby1: /tmp/tmpjdqpsby1.cpp:37: int main(): Assertion `candidate((std::vector<long>({-3,\
    \ -4, 5})), (3)) == (std::vector<long>({-4, -3, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n    std::vector<long> ans;\n    long max_val = arr[0];\n   \
    \ long max_idx = -1;\n    for (size_t i = 0; i < arr.size(); i++) {\n        if\
    \ (arr[i] > max_val) {\n            max_val = arr[i];\n            max_idx = i;\n\
    \        }\n    }\n    for (size_t i = 0; i < arr.size(); i++) {\n        if (i\
    \ == max_idx) {\n            ans.push_back(max_val);\n        } else {\n     \
    \       ans.push_back(arr[i]);\n        }\n    }\n    return ans;\n}\nint main()\
    \ {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({-3,\
    \ -4, 5})), (3)) == (std::vector<long>({-4, -3, 5})));\n    assert(candidate((std::vector<long>({4,\
    \ -4, 4})), (2)) == (std::vector<long>({4, 4})));\n    assert(candidate((std::vector<long>({-3,\
    \ 2, 1, 2, -1, -2, 1})), (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmplydet7ge: /tmp/tmplydet7ge.cpp:39: int main(): Assertion `candidate((std::vector<long>({-3,\
    \ -4, 5})), (3)) == (std::vector<long>({-4, -3, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n    // Your code here\n    std::vector<long> max;\n    long\
    \ maxVal = arr[0];\n    for(long i = 1; i < arr.size(); i++) {\n        if(arr[i]\
    \ > maxVal) {\n            maxVal = arr[i];\n        }\n    }\n    for(long i\
    \ = 0; i < k; i++) {\n        max.push_back(maxVal);\n    }\n    return max;\n\
    }\nint main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({-3,\
    \ -4, 5})), (3)) == (std::vector<long>({-4, -3, 5})));\n    assert(candidate((std::vector<long>({4,\
    \ -4, 4})), (2)) == (std::vector<long>({4, 4})));\n    assert(candidate((std::vector<long>({-3,\
    \ 2, 1, 2, -1, -2, 1})), (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmppqspq92d: /tmp/tmppqspq92d.cpp:34: int main(): Assertion `candidate((std::vector<long>({-3,\
    \ -4, 5})), (3)) == (std::vector<long>({-4, -3, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n    std::vector<long> ans;\n    long max_val = arr[0];\n   \
    \ long max_idx = -1;\n    for (long i = 1; i < arr.size(); i++) {\n        if\
    \ (arr[i] > max_val) {\n            max_val = arr[i];\n            max_idx = i;\n\
    \        }\n    }\n    ans.push_back(max_val);\n    ans.push_back(arr[max_idx]);\n\
    \    for (long i = max_idx + 1; i < arr.size(); i++) {\n        if (arr[i] > max_val)\
    \ {\n            ans.push_back(arr[i]);\n        }\n    }\n    return ans;\n}\n\
    int main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({-3,\
    \ -4, 5})), (3)) == (std::vector<long>({-4, -3, 5})));\n    assert(candidate((std::vector<long>({4,\
    \ -4, 4})), (2)) == (std::vector<long>({4, 4})));\n    assert(candidate((std::vector<long>({-3,\
    \ 2, 1, 2, -1, -2, 1})), (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmpkqa7dfbt: /tmp/tmpkqa7dfbt.cpp:39: int main(): Assertion `candidate((std::vector<long>({-3,\
    \ -4, 5})), (3)) == (std::vector<long>({-4, -3, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n    std::vector<long> result;\n    long max = 0;\n    for (long\
    \ i = 0; i < arr.size(); i++) {\n        if (arr[i] > max) {\n            max\
    \ = arr[i];\n        }\n    }\n    for (long i = 0; i < arr.size(); i++) {\n \
    \       if (arr[i] > max && arr[i] != max) {\n            result.push_back(max);\n\
    \            max = arr[i];\n        }\n    }\n    for (long i = 0; i < k; i++)\
    \ {\n        result.push_back(max);\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({-3,\
    \ -4, 5})), (3)) == (std::vector<long>({-4, -3, 5})));\n    assert(candidate((std::vector<long>({4,\
    \ -4, 4})), (2)) == (std::vector<long>({4, 4})));\n    assert(candidate((std::vector<long>({-3,\
    \ 2, 1, 2, -1, -2, 1})), (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmpy1e6x8cj: /tmp/tmpy1e6x8cj.cpp:39: int main(): Assertion `candidate((std::vector<long>({-3,\
    \ -4, 5})), (3)) == (std::vector<long>({-4, -3, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n    long n = arr.size();\n    std::vector<long> ans;\n    long\
    \ max_val = arr[0];\n    long max_idx = -1;\n    \n    for (long i = 1; i < n;\
    \ i++) {\n        if (arr[i] > max_val) {\n            max_val = arr[i];\n   \
    \         max_idx = i;\n        }\n    }\n    \n    ans.push_back(max_val);\n\
    \    \n    for (long i = max_idx + 1; i < n; i++) {\n        if (arr[i] > arr[i-max_idx])\
    \ {\n            ans.push_back(arr[i]);\n        }\n    }\n    \n    return ans;\n\
    }\nint main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({-3,\
    \ -4, 5})), (3)) == (std::vector<long>({-4, -3, 5})));\n    assert(candidate((std::vector<long>({4,\
    \ -4, 4})), (2)) == (std::vector<long>({4, 4})));\n    assert(candidate((std::vector<long>({-3,\
    \ 2, 1, 2, -1, -2, 1})), (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmpl14osz0y: /tmp/tmpl14osz0y.cpp:43: int main(): Assertion `candidate((std::vector<long>({-3,\
    \ -4, 5})), (3)) == (std::vector<long>({-4, -3, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n    // Your code here\n    std::vector<long> ans;\n    long\
    \ max_val = arr[0];\n    long max_idx = -1;\n    for(long i = 1; i < arr.size();\
    \ i++) {\n        if(arr[i] > max_val) {\n            max_val = arr[i];\n    \
    \        max_idx = i;\n        }\n    }\n    ans.push_back(max_val);\n    for(long\
    \ i = max_idx + 1; i < arr.size(); i++) {\n        if(arr[i] > max_val) {\n  \
    \          ans.push_back(arr[i]);\n        }\n    }\n    return ans;\n}\nint main()\
    \ {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({-3,\
    \ -4, 5})), (3)) == (std::vector<long>({-4, -3, 5})));\n    assert(candidate((std::vector<long>({4,\
    \ -4, 4})), (2)) == (std::vector<long>({4, 4})));\n    assert(candidate((std::vector<long>({-3,\
    \ 2, 1, 2, -1, -2, 1})), (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmpzwjdbpwu: /tmp/tmpzwjdbpwu.cpp:39: int main(): Assertion `candidate((std::vector<long>({-3,\
    \ -4, 5})), (3)) == (std::vector<long>({-4, -3, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n    // code here\n    std::vector<long> ans;\n    long max_val\
    \ = arr[0];\n    long max_idx = -1;\n    for(long i = 1; i < arr.size(); i++)\
    \ {\n        if(arr[i] > max_val) {\n            max_val = arr[i];\n         \
    \   max_idx = i;\n        }\n    }\n    ans.push_back(max_val);\n    while(max_idx\
    \ != -1) {\n        ans.push_back(arr[max_idx]);\n        max_idx = max_idx >\
    \ 0 ? max_idx - 1 : 0;\n    }\n    ans.push_back(arr[0]);\n    return ans;\n}\n\
    int main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({-3,\
    \ -4, 5})), (3)) == (std::vector<long>({-4, -3, 5})));\n    assert(candidate((std::vector<long>({4,\
    \ -4, 4})), (2)) == (std::vector<long>({4, 4})));\n    assert(candidate((std::vector<long>({-3,\
    \ 2, 1, 2, -1, -2, 1})), (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n    std::vector<long> ans;\n    long max_val = arr[0];\n   \
    \ long max_idx = -1;\n    for(long i = 1; i < arr.size(); i++) {\n        if(arr[i]\
    \ > max_val) {\n            max_val = arr[i];\n            max_idx = i;\n    \
    \    }\n    }\n    ans.push_back(max_val);\n    while(max_idx != -1) {\n     \
    \   ans.push_back(arr[max_idx]);\n        max_idx = max_idx > 0 ? max_idx - 1\
    \ : 0;\n    }\n    ans.push_back(arr[0]);\n    return ans;\n}\nint main() {\n\
    \    auto candidate = maximum;\n    assert(candidate((std::vector<long>({-3, -4,\
    \ 5})), (3)) == (std::vector<long>({-4, -3, 5})));\n    assert(candidate((std::vector<long>({4,\
    \ -4, 4})), (2)) == (std::vector<long>({4, 4})));\n    assert(candidate((std::vector<long>({-3,\
    \ 2, 1, 2, -1, -2, 1})), (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n    std::vector<long> ans;\n    long max = 0;\n    long cur\
    \ = 0;\n    for (long i = 0; i < arr.size(); i++) {\n        if (arr[i] > max)\
    \ {\n            max = arr[i];\n            cur = i;\n        }\n    }\n    for\
    \ (long i = 0; i < arr.size(); i++) {\n        if (arr[i] == max) {\n        \
    \    ans.push_back(arr[cur]);\n        }\n    }\n    return ans;\n}\nint main()\
    \ {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({-3,\
    \ -4, 5})), (3)) == (std::vector<long>({-4, -3, 5})));\n    assert(candidate((std::vector<long>({4,\
    \ -4, 4})), (2)) == (std::vector<long>({4, 4})));\n    assert(candidate((std::vector<long>({-3,\
    \ 2, 1, 2, -1, -2, 1})), (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmp42b6v8xl: /tmp/tmp42b6v8xl.cpp:37: int main(): Assertion `candidate((std::vector<long>({-3,\
    \ -4, 5})), (3)) == (std::vector<long>({-4, -3, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n    // Your code here\n    std::vector<long> ans;\n    long\
    \ max_val = arr[0];\n    long max_idx = -1;\n    for(long i = 1; i < arr.size();\
    \ i++) {\n        if(arr[i] > max_val) {\n            max_val = arr[i];\n    \
    \        max_idx = i;\n        }\n    }\n    ans.push_back(max_val);\n    for(long\
    \ i = max_idx + 1; i < arr.size(); i++) {\n        if(arr[i] > max_val) {\n  \
    \          ans.push_back(arr[i]);\n        }\n    }\n    return ans;\n}\nint main()\
    \ {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({-3,\
    \ -4, 5})), (3)) == (std::vector<long>({-4, -3, 5})));\n    assert(candidate((std::vector<long>({4,\
    \ -4, 4})), (2)) == (std::vector<long>({4, 4})));\n    assert(candidate((std::vector<long>({-3,\
    \ 2, 1, 2, -1, -2, 1})), (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmp9s5y_152: /tmp/tmp9s5y_152.cpp:39: int main(): Assertion `candidate((std::vector<long>({-3,\
    \ -4, 5})), (3)) == (std::vector<long>({-4, -3, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n    std::vector<long> ans;\n    long max_val = arr[0];\n   \
    \ long max_idx = -1;\n    for (long i = 1; i < arr.size(); i++) {\n        if\
    \ (arr[i] > max_val) {\n            max_val = arr[i];\n            max_idx = i;\n\
    \        }\n    }\n    ans.push_back(max_val);\n    long curr_idx = max_idx;\n\
    \    for (long i = max_idx + 1; i < arr.size(); i++) {\n        if (arr[i] > arr[curr_idx])\
    \ {\n            ans.push_back(arr[i]);\n            curr_idx = i;\n        }\n\
    \    }\n    return ans;\n}\nint main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({-3,\
    \ -4, 5})), (3)) == (std::vector<long>({-4, -3, 5})));\n    assert(candidate((std::vector<long>({4,\
    \ -4, 4})), (2)) == (std::vector<long>({4, 4})));\n    assert(candidate((std::vector<long>({-3,\
    \ 2, 1, 2, -1, -2, 1})), (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmpki8pfh4v: /tmp/tmpki8pfh4v.cpp:40: int main(): Assertion `candidate((std::vector<long>({-3,\
    \ -4, 5})), (3)) == (std::vector<long>({-4, -3, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n    std::vector<long> ans;\n    long max_val = arr[0];\n   \
    \ long max_idx = -1;\n    for (long i = 1; i < arr.size(); i++) {\n        if\
    \ (arr[i] > max_val) {\n            max_val = arr[i];\n            max_idx = i;\n\
    \        }\n    }\n    ans.push_back(max_val);\n    long idx = max_idx;\n    for\
    \ (long i = max_idx + 1; i < arr.size(); i++) {\n        if (arr[i] > arr[idx])\
    \ {\n            ans.push_back(arr[i]);\n            idx = i;\n        }\n   \
    \ }\n    return ans;\n}\nint main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({-3,\
    \ -4, 5})), (3)) == (std::vector<long>({-4, -3, 5})));\n    assert(candidate((std::vector<long>({4,\
    \ -4, 4})), (2)) == (std::vector<long>({4, 4})));\n    assert(candidate((std::vector<long>({-3,\
    \ 2, 1, 2, -1, -2, 1})), (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmp_xjq_439: /tmp/tmp_xjq_439.cpp:40: int main(): Assertion `candidate((std::vector<long>({-3,\
    \ -4, 5})), (3)) == (std::vector<long>({-4, -3, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n    std::vector<long> ans;\n    long max_val = arr[0];\n   \
    \ long max_idx = -1;\n    for (size_t i = 0; i < arr.size(); i++) {\n        if\
    \ (arr[i] > max_val) {\n            max_val = arr[i];\n            max_idx = i;\n\
    \        }\n    }\n    for (size_t i = 0; i < k; i++) {\n        ans.push_back(arr[max_idx]);\n\
    \        max_idx--;\n    }\n    return ans;\n}\nint main() {\n    auto candidate\
    \ = maximum;\n    assert(candidate((std::vector<long>({-3, -4, 5})), (3)) == (std::vector<long>({-4,\
    \ -3, 5})));\n    assert(candidate((std::vector<long>({4, -4, 4})), (2)) == (std::vector<long>({4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-3, 2, 1, 2, -1, -2, 1})),\
    \ (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmppzyrhfh7: /tmp/tmppzyrhfh7.cpp:36: int main(): Assertion `candidate((std::vector<long>({-3,\
    \ -4, 5})), (3)) == (std::vector<long>({-4, -3, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n    std::vector<long> ans;\n    long max_val = arr[0];\n   \
    \ long max_idx = -1;\n    for (long i = 1; i < arr.size(); i++) {\n        if\
    \ (arr[i] > max_val) {\n            max_val = arr[i];\n            max_idx = i;\n\
    \        }\n    }\n    ans.push_back(max_val);\n    long max_idx = max_idx;\n\
    \    for (long i = max_idx + 1; i < arr.size(); i++) {\n        if (arr[i] > max_val)\
    \ {\n            max_val = arr[i];\n            max_idx = i;\n        }\n    }\n\
    \    ans.push_back(max_val);\n    ans.push_back(arr[max_idx]);\n    return ans;\n\
    }\nint main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({-3,\
    \ -4, 5})), (3)) == (std::vector<long>({-4, -3, 5})));\n    assert(candidate((std::vector<long>({4,\
    \ -4, 4})), (2)) == (std::vector<long>({4, 4})));\n    assert(candidate((std::vector<long>({-3,\
    \ 2, 1, 2, -1, -2, 1})), (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp968yxkwm.cpp: In function \u2018std::vector<long int> maximum(std::vector<long\
    \ int>, long int)\u2019:\n/tmp/tmp968yxkwm.cpp:29:10: error: redeclaration of\
    \ \u2018long int max_idx\u2019\n   29 |     long max_idx = max_idx;\n      | \
    \         ^~~~~~~\n/tmp/tmp968yxkwm.cpp:21:10: note: \u2018long int max_idx\u2019\
    \ previously declared here\n   21 |     long max_idx = -1;\n      |          ^~~~~~~\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n    long n = arr.size();\n    std::vector<long> ans;\n    long\
    \ max_val = arr[0];\n    long max_idx = -1;\n    long idx = 0;\n    for (long\
    \ i = 1; i < n; i++) {\n        if (arr[i] > max_val) {\n            max_val =\
    \ arr[i];\n            max_idx = i;\n        }\n    }\n    ans.push_back(max_val);\n\
    \    ans.push_back(arr[max_idx]);\n    for (long i = max_idx + 1; i < n; i++)\
    \ {\n        if (arr[i] > max_val) {\n            ans.push_back(arr[i]);\n   \
    \     }\n    }\n    return ans;\n}\nint main() {\n    auto candidate = maximum;\n\
    \    assert(candidate((std::vector<long>({-3, -4, 5})), (3)) == (std::vector<long>({-4,\
    \ -3, 5})));\n    assert(candidate((std::vector<long>({4, -4, 4})), (2)) == (std::vector<long>({4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-3, 2, 1, 2, -1, -2, 1})),\
    \ (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmpecnpotxe: /tmp/tmpecnpotxe.cpp:41: int main(): Assertion `candidate((std::vector<long>({-3,\
    \ -4, 5})), (3)) == (std::vector<long>({-4, -3, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n    std::vector<long> ans;\n    long max = 0;\n    long i =\
    \ 0;\n    long j = 0;\n    long count = 0;\n    while(i < arr.size() && j < k)\
    \ {\n        if(arr[i] > max) {\n            max = arr[i];\n            ans.clear();\n\
    \            count = 0;\n        }\n        else if(arr[i] == max) {\n       \
    \     count++;\n        }\n        else {\n            ans.push_back(max);\n \
    \           max = arr[i];\n            count = 0;\n        }\n        i++;\n \
    \       j++;\n    }\n    while(i < arr.size() && j < k) {\n        if(arr[i] >\
    \ max) {\n            max = arr[i];\n            ans.clear();\n            count\
    \ = 0;\n        }\n        else if(arr[i] == max) {\n            count++;\n  \
    \      }\n        else {\n            ans.push_back(max);\n            max = arr[i];\n\
    \            count = 0;\n        }\n        i++;\n        j++;\n    }\n    while(i\
    \ < arr.size() && count < k) {\n        if(arr[i] > max) {\n            max =\
    \ arr[i];\n            ans.clear();\n            count = 0;\n        }\n     \
    \   else if(arr[i] == max) {\n            count++;\n        }\n        else {\n\
    \            ans.push_back(max);\n            max = arr[i];\n            count\
    \ = 0;\n        }\n        i++;\n    }\n    return ans;\n}\nint main() {\n   \
    \ auto candidate = maximum;\n    assert(candidate((std::vector<long>({-3, -4,\
    \ 5})), (3)) == (std::vector<long>({-4, -3, 5})));\n    assert(candidate((std::vector<long>({4,\
    \ -4, 4})), (2)) == (std::vector<long>({4, 4})));\n    assert(candidate((std::vector<long>({-3,\
    \ 2, 1, 2, -1, -2, 1})), (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmplm6bd9h9: /tmp/tmplm6bd9h9.cpp:78: int main(): Assertion `candidate((std::vector<long>({-3,\
    \ -4, 5})), (3)) == (std::vector<long>({-4, -3, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n    long n = arr.size();\n    std::vector<long> ans;\n    long\
    \ max_val = arr[0];\n    long max_idx = -1;\n    for (long i = 0; i < n; i++)\
    \ {\n        if (arr[i] > max_val) {\n            max_val = arr[i];\n        \
    \    max_idx = i;\n        }\n    }\n    ans.push_back(max_val);\n    for (long\
    \ i = max_idx + 1; i < n; i++) {\n        if (arr[i] > max_val) {\n          \
    \  ans.push_back(arr[i]);\n        }\n    }\n    return ans;\n}\nint main() {\n\
    \    auto candidate = maximum;\n    assert(candidate((std::vector<long>({-3, -4,\
    \ 5})), (3)) == (std::vector<long>({-4, -3, 5})));\n    assert(candidate((std::vector<long>({4,\
    \ -4, 4})), (2)) == (std::vector<long>({4, 4})));\n    assert(candidate((std::vector<long>({-3,\
    \ 2, 1, 2, -1, -2, 1})), (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmpzk6sns__: /tmp/tmpzk6sns__.cpp:39: int main(): Assertion `candidate((std::vector<long>({-3,\
    \ -4, 5})), (3)) == (std::vector<long>({-4, -3, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n    // code here\n    std::vector<long> ans;\n    long max =\
    \ 0;\n    long cur = 0;\n    for (long i = 0; i < arr.size(); i++) {\n       \
    \ if (arr[i] > max) {\n            max = arr[i];\n            cur = i;\n     \
    \   }\n    }\n    ans.push_back(max);\n    for (long i = cur; i < arr.size();\
    \ i++) {\n        if (arr[i] > max) {\n            max = arr[i];\n           \
    \ ans.push_back(i);\n        }\n    }\n    return ans;\n}\nint main() {\n    auto\
    \ candidate = maximum;\n    assert(candidate((std::vector<long>({-3, -4, 5})),\
    \ (3)) == (std::vector<long>({-4, -3, 5})));\n    assert(candidate((std::vector<long>({4,\
    \ -4, 4})), (2)) == (std::vector<long>({4, 4})));\n    assert(candidate((std::vector<long>({-3,\
    \ 2, 1, 2, -1, -2, 1})), (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmp8cqn4aon: /tmp/tmp8cqn4aon.cpp:40: int main(): Assertion `candidate((std::vector<long>({-3,\
    \ -4, 5})), (3)) == (std::vector<long>({-4, -3, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n    // Your code here\n    std::vector<long> max;\n    max.reserve(k);\n\
    \    long maxVal = arr[0];\n    for(long i = 1; i < k; i++) {\n        if(arr[i]\
    \ > maxVal) {\n            max.push_back(maxVal);\n            maxVal = arr[i];\n\
    \        }\n        else {\n            max.push_back(arr[i]);\n        }\n  \
    \  }\n    max.push_back(maxVal);\n    return max;\n}\nint main() {\n    auto candidate\
    \ = maximum;\n    assert(candidate((std::vector<long>({-3, -4, 5})), (3)) == (std::vector<long>({-4,\
    \ -3, 5})));\n    assert(candidate((std::vector<long>({4, -4, 4})), (2)) == (std::vector<long>({4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-3, 2, 1, 2, -1, -2, 1})),\
    \ (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmp_xq3duij: /tmp/tmp_xq3duij.cpp:38: int main(): Assertion `candidate((std::vector<long>({4,\
    \ -4, 4})), (2)) == (std::vector<long>({4, 4}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n    std::vector<long> ans;\n    long max = 0;\n    long i =\
    \ 0;\n    long j = 0;\n    long n = arr.size();\n    long mid = n / 2;\n    while\
    \ (i < n) {\n        if (arr[i] > max) {\n            max = arr[i];\n        \
    \    ans.clear();\n        }\n        if (arr[i] == max) {\n            ans.push_back(arr[i]);\n\
    \        }\n        i++;\n    }\n    while (j < k) {\n        if (max < arr[j])\
    \ {\n            max = arr[j];\n            ans.clear();\n        }\n        if\
    \ (arr[j] == max) {\n            ans.push_back(arr[j]);\n        }\n        j++;\n\
    \    }\n    return ans;\n}\nint main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({-3,\
    \ -4, 5})), (3)) == (std::vector<long>({-4, -3, 5})));\n    assert(candidate((std::vector<long>({4,\
    \ -4, 4})), (2)) == (std::vector<long>({4, 4})));\n    assert(candidate((std::vector<long>({-3,\
    \ 2, 1, 2, -1, -2, 1})), (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmppw1il2vn: /tmp/tmppw1il2vn.cpp:49: int main(): Assertion `candidate((std::vector<long>({-3,\
    \ -4, 5})), (3)) == (std::vector<long>({-4, -3, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n    std::vector<long> ans;\n    long max_val = arr[0];\n   \
    \ long max_idx = -1;\n    for(long i = 1; i < arr.size(); i++) {\n        if(arr[i]\
    \ > max_val) {\n            max_val = arr[i];\n            max_idx = i;\n    \
    \    }\n    }\n    ans.push_back(max_val);\n    while(max_idx != -1) {\n     \
    \   ans.push_back(arr[max_idx]);\n        max_idx = max_idx > 0 ? max_idx - 1\
    \ : 0;\n    }\n    return ans;\n}\nint main() {\n    auto candidate = maximum;\n\
    \    assert(candidate((std::vector<long>({-3, -4, 5})), (3)) == (std::vector<long>({-4,\
    \ -3, 5})));\n    assert(candidate((std::vector<long>({4, -4, 4})), (2)) == (std::vector<long>({4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-3, 2, 1, 2, -1, -2, 1})),\
    \ (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n    std::vector<long> ans;\n    long max = 0;\n    for (long\
    \ i = 0; i < arr.size(); i++) {\n        if (arr[i] > max) {\n            max\
    \ = arr[i];\n        }\n    }\n    long cur = 0;\n    for (long i = 0; i < arr.size();\
    \ i++) {\n        if (arr[i] > max) {\n            ans.push_back(arr[cur]);\n\
    \            cur++;\n        }\n    }\n    ans.push_back(arr[cur]);\n    return\
    \ ans;\n}\nint main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({-3,\
    \ -4, 5})), (3)) == (std::vector<long>({-4, -3, 5})));\n    assert(candidate((std::vector<long>({4,\
    \ -4, 4})), (2)) == (std::vector<long>({4, 4})));\n    assert(candidate((std::vector<long>({-3,\
    \ 2, 1, 2, -1, -2, 1})), (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmp02tyy34b: /tmp/tmp02tyy34b.cpp:38: int main(): Assertion `candidate((std::vector<long>({-3,\
    \ -4, 5})), (3)) == (std::vector<long>({-4, -3, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n    std::vector<long> res;\n    long max = 0;\n    long index\
    \ = 0;\n    for(long i = 0; i < arr.size(); i++) {\n        if(arr[i] > max) {\n\
    \            max = arr[i];\n            index = i;\n        }\n    }\n    for(long\
    \ i = 0; i < arr.size(); i++) {\n        if(arr[i] == max) {\n            res.push_back(arr[i]);\n\
    \        }\n    }\n    for(long i = 0; i < k; i++) {\n        res.push_back(arr[index]);\n\
    \        index++;\n    }\n    return res;\n}\nint main() {\n    auto candidate\
    \ = maximum;\n    assert(candidate((std::vector<long>({-3, -4, 5})), (3)) == (std::vector<long>({-4,\
    \ -3, 5})));\n    assert(candidate((std::vector<long>({4, -4, 4})), (2)) == (std::vector<long>({4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-3, 2, 1, 2, -1, -2, 1})),\
    \ (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmpieuc9cfw: /tmp/tmpieuc9cfw.cpp:41: int main(): Assertion `candidate((std::vector<long>({-3,\
    \ -4, 5})), (3)) == (std::vector<long>({-4, -3, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n    std::vector<long> ans;\n    long max = 0;\n    long index\
    \ = 0;\n    for (auto i : arr) {\n        if (i > max) {\n            max = i;\n\
    \            index = i;\n        }\n    }\n    ans.push_back(max);\n    for (auto\
    \ i : arr) {\n        if (i == max) {\n            ans.push_back(i);\n       \
    \ }\n    }\n    ans.push_back(arr[index]);\n    return ans;\n}\nint main() {\n\
    \    auto candidate = maximum;\n    assert(candidate((std::vector<long>({-3, -4,\
    \ 5})), (3)) == (std::vector<long>({-4, -3, 5})));\n    assert(candidate((std::vector<long>({4,\
    \ -4, 4})), (2)) == (std::vector<long>({4, 4})));\n    assert(candidate((std::vector<long>({-3,\
    \ 2, 1, 2, -1, -2, 1})), (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmp0wmdetx5: /tmp/tmp0wmdetx5.cpp:39: int main(): Assertion `candidate((std::vector<long>({-3,\
    \ -4, 5})), (3)) == (std::vector<long>({-4, -3, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n    std::vector<long> ans;\n    long max = 0;\n    long i =\
    \ 0;\n    long j = 0;\n    long mid = 0;\n    long cnt = 0;\n    long n = arr.size();\n\
    \    long m = n;\n    long cur = 0;\n    long cnt2 = 0;\n    long cnt3 = 0;\n\
    \    long cnt4 = 0;\n    long cnt5 = 0;\n    long cnt6 = 0;\n    long cnt7 = 0;\n\
    \    long cnt8 = 0;\n    long cnt9 = 0;\n    long cnt10 = 0;\n    long cnt11 =\
    \ 0;\n    long cnt12 = 0;\n    long cnt13 = 0;\n    long cnt14 = 0;\n    long\
    \ cnt15 = 0;\n    long cnt16 = 0;\n    long cnt17 = 0;\n    long cnt18 = 0;\n\
    \    long cnt19 = 0;\n    long cnt20 = 0;\n    long cnt21 = 0;\n    long cnt22\
    \ = 0;\n    long cnt23 = 0;\n    long cnt24 = 0;\n    long cnt25 = 0;\n    long\
    \ cnt26 = 0;\n    long cnt27 = 0;\n    long cnt28 = 0;\n    long cnt29 = 0;\n\
    \    long cnt30 = 0;\n    long cnt31 = 0;\n    long cnt32 = 0;\n    long cnt33\
    \ = 0;\n    long cnt34 = 0;\n    long cnt35 = 0;\n    long cnt36 = 0;\n    long\
    \ cnt37 = 0;\n    long cnt38 = 0;\n    long cnt39 = 0;\n    long cnt40 = 0;\n\
    \    long cnt41 = 0;\n    long cnt42 = 0;\n    long cnt43 = 0;\n    long cnt44\
    \ = 0;\n    long cnt45 = 0;\n    long cnt46 = 0;\n    long cnt47 = 0;\n    long\
    \ cnt48 = 0;\n    long cnt49 = 0;\n    long cnt50 = 0;\n    long cnt51 = 0;\n\
    \    long cnt52 = 0;\n    long cnt53 = 0;\n    long cnt54 = 0;\n    long cnt55\
    \ = 0;\n    long cnt56 = 0;\n    long cnt57 = 0;\n    long cnt58 = 0;\n    long\
    \ cnt59 = 0;\n    long cnt60 = 0;\n    long cnt61 = 0;\n    long cnt62 = 0;\n\
    \    long cnt63 = 0;\n    long cnt64 = 0;\n    long cnt65 = 0;\n    long cnt66\
    \ = 0;\n    long cnt67 = 0;\n    long cnt68 = 0;\n    long cnt69 = 0;\n    long\
    \ cnt70 = 0;\n    long cnt71 = 0;\n    long cnt72 = 0;\n    long cnt73 = 0;\n\
    \    long cnt74 = 0;\n    long cnt75 = 0;\n    long cnt76 = 0;\n    long cnt77\
    \ = 0;\n    long cnt78 = 0;\n    long cnt79 = 0;\n\n}\nint main() {\n    auto\
    \ candidate = maximum;\n    assert(candidate((std::vector<long>({-3, -4, 5})),\
    \ (3)) == (std::vector<long>({-4, -3, 5})));\n    assert(candidate((std::vector<long>({4,\
    \ -4, 4})), (2)) == (std::vector<long>({4, 4})));\n    assert(candidate((std::vector<long>({-3,\
    \ 2, 1, 2, -1, -2, 1})), (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmpi9bnlnby: /tmp/tmpi9bnlnby.cpp:110: int main(): Assertion `candidate((std::vector<long>({-3,\
    \ -4, 5})), (3)) == (std::vector<long>({-4, -3, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n    std::vector<long> ans;\n    long max = 0;\n    long i =\
    \ 0;\n    long j = 0;\n    long mid = 0;\n    while (i < arr.size() && j < k)\
    \ {\n        if (arr[i] > max) {\n            max = arr[i];\n            mid =\
    \ i;\n        }\n        i++;\n    }\n    while (j < k) {\n        if (arr[j]\
    \ > max) {\n            max = arr[j];\n            mid = j;\n        }\n     \
    \   j++;\n    }\n    ans.push_back(max);\n    while (i < arr.size()) {\n     \
    \   if (arr[i] > max) {\n            max = arr[i];\n            mid = i;\n   \
    \     }\n        i++;\n    }\n    while (j < k) {\n        if (arr[j] > max) {\n\
    \            max = arr[j];\n            mid = j;\n        }\n        j++;\n  \
    \  }\n    ans.push_back(max);\n    while (i < arr.size()) {\n        if (arr[i]\
    \ > max) {\n            max = arr[i];\n            mid = i;\n        }\n     \
    \   i++;\n    }\n    while (j < k) {\n        if (arr[j] > max) {\n          \
    \  max = arr[j];\n            mid = j;\n        }\n        j++;\n    }\n    ans.push_back(max);\n\
    \    while (i < arr.size()) {\n        if (arr[i] > max) {\n            max =\
    \ arr[i];\n            mid = i;\n        }\n        i++;\n    }\n    while (j\
    \ < k) {\n        if (arr[j] > max) {\n            max = arr[j];\n           \
    \ mid = j;\n        }\n        j++;\n    }\n    ans.push_back(max);\n    while\
    \ (i < arr.size()) {\n        if (arr[i] > max) {\n            max = arr[i];\n\
    \            mid = i;\n        }\n        i++;\n    }\n    while (j < k) {\n \
    \       if (arr[j] > max) {\n            max = arr[j];\n            mid = j;\n\
    \        }\n        j++;\n    }\n    ans.push_back(max);\n    while (i < arr.size())\
    \ {\n        if (arr[i] > max) {\n            max = arr[i];\n            mid =\
    \ i;\n        }\n        i++;\n    }\n    while (j < k) {\n        if (arr[j]\
    \ > max) {\n            max = arr[j];\n            mid = j;\n        }\n     \
    \   j++;\n    }\n    ans.push_back(max);\n    while (i < arr.size()) {\n     \
    \   if (arr[i] > max) {\n            max = arr[i];\n            mid = i;\n   \
    \     }\n        i++;\n    }\n    while (j < k) {\n        if (arr[j] > max) {\n\
    \            max = arr[j];\n            mid = j;\n        }\n        j++;\n  \
    \  }\n    ans.push_back(max);\n\n}\nint main() {\n    auto candidate = maximum;\n\
    \    assert(candidate((std::vector<long>({-3, -4, 5})), (3)) == (std::vector<long>({-4,\
    \ -3, 5})));\n    assert(candidate((std::vector<long>({4, -4, 4})), (2)) == (std::vector<long>({4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-3, 2, 1, 2, -1, -2, 1})),\
    \ (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmp_493exrj: /tmp/tmp_493exrj.cpp:133: int main(): Assertion `candidate((std::vector<long>({-3,\
    \ -4, 5})), (3)) == (std::vector<long>({-4, -3, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n    std::vector<long> result;\n    long max_val = arr[0];\n\
    \    long max_idx = -1;\n    for (long i = 1; i < arr.size(); i++) {\n       \
    \ if (arr[i] > max_val) {\n            max_val = arr[i];\n            max_idx\
    \ = i;\n        }\n    }\n    result.push_back(max_val);\n    result.push_back(arr[max_idx]);\n\
    \    for (long i = max_idx + 1; i < arr.size(); i++) {\n        if (arr[i] > max_val)\
    \ {\n            result.push_back(arr[i]);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({-3,\
    \ -4, 5})), (3)) == (std::vector<long>({-4, -3, 5})));\n    assert(candidate((std::vector<long>({4,\
    \ -4, 4})), (2)) == (std::vector<long>({4, 4})));\n    assert(candidate((std::vector<long>({-3,\
    \ 2, 1, 2, -1, -2, 1})), (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmpndjzs2mm: /tmp/tmpndjzs2mm.cpp:39: int main(): Assertion `candidate((std::vector<long>({-3,\
    \ -4, 5})), (3)) == (std::vector<long>({-4, -3, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n    std::vector<long> ans;\n    long max = 0;\n    long i =\
    \ 0;\n    long j = 0;\n    long mid = 0;\n    while (i < arr.size() && j < k)\
    \ {\n        if (arr[i] > max) {\n            max = arr[i];\n            mid =\
    \ i;\n        }\n        i++;\n    }\n    while (j < k) {\n        if (arr[j]\
    \ > max) {\n            max = arr[j];\n            mid = j;\n        }\n     \
    \   j++;\n    }\n    while (i < arr.size()) {\n        if (arr[i] > max) {\n \
    \           max = arr[i];\n            mid = i;\n        }\n        i++;\n   \
    \ }\n    while (j < k) {\n        if (arr[j] > max) {\n            max = arr[j];\n\
    \            mid = j;\n        }\n        j++;\n    }\n    ans.push_back(max);\n\
    \    ans.push_back(arr[mid]);\n    return ans;\n}\nint main() {\n    auto candidate\
    \ = maximum;\n    assert(candidate((std::vector<long>({-3, -4, 5})), (3)) == (std::vector<long>({-4,\
    \ -3, 5})));\n    assert(candidate((std::vector<long>({4, -4, 4})), (2)) == (std::vector<long>({4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-3, 2, 1, 2, -1, -2, 1})),\
    \ (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmp57s1nrg_: /tmp/tmp57s1nrg_.cpp:58: int main(): Assertion `candidate((std::vector<long>({-3,\
    \ -4, 5})), (3)) == (std::vector<long>({-4, -3, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n    std::vector<long> result;\n    long max_val = arr[0];\n\
    \    long max_idx = -1;\n    for (long i = 1; i < arr.size(); i++) {\n       \
    \ if (arr[i] > max_val) {\n            max_val = arr[i];\n            max_idx\
    \ = i;\n        }\n    }\n    for (long i = 0; i < k; i++) {\n        result.push_back(arr[max_idx]);\n\
    \        max_idx--;\n    }\n    return result;\n}\nint main() {\n    auto candidate\
    \ = maximum;\n    assert(candidate((std::vector<long>({-3, -4, 5})), (3)) == (std::vector<long>({-4,\
    \ -3, 5})));\n    assert(candidate((std::vector<long>({4, -4, 4})), (2)) == (std::vector<long>({4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-3, 2, 1, 2, -1, -2, 1})),\
    \ (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmpn1fk9a0u: /tmp/tmpn1fk9a0u.cpp:36: int main(): Assertion `candidate((std::vector<long>({-3,\
    \ -4, 5})), (3)) == (std::vector<long>({-4, -3, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n    std::vector<long> ans;\n    long max_val = arr[0];\n   \
    \ long max_idx = -1;\n    for (long i = 1; i < arr.size(); i++) {\n        if\
    \ (arr[i] > max_val) {\n            max_val = arr[i];\n            max_idx = i;\n\
    \        }\n    }\n    ans.push_back(max_val);\n    ans.push_back(arr[max_idx]);\n\
    \    \n    long cnt = 0;\n    for (long i = 0; i < arr.size(); i++) {\n      \
    \  if (arr[i] > max_val) {\n            ans.push_back(arr[i]);\n            cnt++;\n\
    \        }\n    }\n    ans.push_back(cnt);\n    \n    sort(ans.begin(), ans.end());\n\
    \    \n    return ans;\n}\nint main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({-3,\
    \ -4, 5})), (3)) == (std::vector<long>({-4, -3, 5})));\n    assert(candidate((std::vector<long>({4,\
    \ -4, 4})), (2)) == (std::vector<long>({4, 4})));\n    assert(candidate((std::vector<long>({-3,\
    \ 2, 1, 2, -1, -2, 1})), (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmpct5a1ygm: /tmp/tmpct5a1ygm.cpp:46: int main(): Assertion `candidate((std::vector<long>({-3,\
    \ -4, 5})), (3)) == (std::vector<long>({-4, -3, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n    std::vector<long> result;\n    long max = 0;\n    long index\
    \ = 0;\n    for (auto i : arr) {\n        if (index == k) {\n            result.push_back(max);\n\
    \            max = i;\n            index = 0;\n        } else {\n            if\
    \ (i > max) {\n                max = i;\n                index++;\n          \
    \  }\n        }\n    }\n    if (index != 0) {\n        result.push_back(max);\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = maximum;\n \
    \   assert(candidate((std::vector<long>({-3, -4, 5})), (3)) == (std::vector<long>({-4,\
    \ -3, 5})));\n    assert(candidate((std::vector<long>({4, -4, 4})), (2)) == (std::vector<long>({4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-3, 2, 1, 2, -1, -2, 1})),\
    \ (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmpiefzrp3v: /tmp/tmpiefzrp3v.cpp:41: int main(): Assertion `candidate((std::vector<long>({-3,\
    \ -4, 5})), (3)) == (std::vector<long>({-4, -3, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n    std::vector<long> res;\n    long max = 0;\n    for (long\
    \ i = 0; i < arr.size(); i++) {\n        if (arr[i] > max) {\n            max\
    \ = arr[i];\n        }\n    }\n    long start = 0;\n    long end = arr.size()\
    \ - 1;\n    while (start < end) {\n        long mid = (start + end) / 2;\n   \
    \     if (arr[mid] > max) {\n            end = mid - 1;\n        } else {\n  \
    \          start = mid + 1;\n        }\n    }\n    for (long i = start; i <= end;\
    \ i++) {\n        if (arr[i] > max) {\n            max = arr[i];\n        }\n\
    \    }\n    for (long i = start; i <= end; i++) {\n        if (arr[i] > max) {\n\
    \            res.push_back(arr[i]);\n        }\n    }\n    return res;\n}\nint\
    \ main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({-3,\
    \ -4, 5})), (3)) == (std::vector<long>({-4, -3, 5})));\n    assert(candidate((std::vector<long>({4,\
    \ -4, 4})), (2)) == (std::vector<long>({4, 4})));\n    assert(candidate((std::vector<long>({-3,\
    \ 2, 1, 2, -1, -2, 1})), (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmpmx71hu3p: /tmp/tmpmx71hu3p.cpp:50: int main(): Assertion `candidate((std::vector<long>({-3,\
    \ -4, 5})), (3)) == (std::vector<long>({-4, -3, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n    std::vector<long> ans;\n    long max = 0;\n    long index\
    \ = 0;\n    for (long i = 0; i < arr.size(); i++) {\n        if (arr[i] > max)\
    \ {\n            max = arr[i];\n            index = i;\n        }\n    }\n   \
    \ ans.push_back(max);\n    for (long i = index; i < arr.size(); i++) {\n     \
    \   if (arr[i] > max) {\n            ans.push_back(arr[i]);\n        }\n    }\n\
    \    return ans;\n}\nint main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({-3,\
    \ -4, 5})), (3)) == (std::vector<long>({-4, -3, 5})));\n    assert(candidate((std::vector<long>({4,\
    \ -4, 4})), (2)) == (std::vector<long>({4, 4})));\n    assert(candidate((std::vector<long>({-3,\
    \ 2, 1, 2, -1, -2, 1})), (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmp6yywhb4s: /tmp/tmp6yywhb4s.cpp:38: int main(): Assertion `candidate((std::vector<long>({-3,\
    \ -4, 5})), (3)) == (std::vector<long>({-4, -3, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n    std::vector<long> ans;\n    long max_val = arr[0];\n   \
    \ long max_idx = -1;\n    for(long i = 1; i < arr.size(); i++) {\n        if(arr[i]\
    \ > max_val) {\n            max_val = arr[i];\n            max_idx = i;\n    \
    \    }\n    }\n    ans.push_back(max_val);\n    for(long i = max_idx + 1; i <\
    \ arr.size(); i++) {\n        if(arr[i] > max_val) {\n            ans.push_back(arr[i]);\n\
    \        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate = maximum;\n\
    \    assert(candidate((std::vector<long>({-3, -4, 5})), (3)) == (std::vector<long>({-4,\
    \ -3, 5})));\n    assert(candidate((std::vector<long>({4, -4, 4})), (2)) == (std::vector<long>({4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-3, 2, 1, 2, -1, -2, 1})),\
    \ (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmpx3m5fwff: /tmp/tmpx3m5fwff.cpp:38: int main(): Assertion `candidate((std::vector<long>({-3,\
    \ -4, 5})), (3)) == (std::vector<long>({-4, -3, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n    std::vector<long> ans;\n    long max_val = arr[0];\n   \
    \ long max_idx = -1;\n    for(long i = 1; i < arr.size(); i++) {\n        if(arr[i]\
    \ > max_val) {\n            max_val = arr[i];\n            max_idx = i;\n    \
    \    }\n    }\n    ans.push_back(max_val);\n    for(long i = max_idx + 1; i <\
    \ arr.size(); i++) {\n        if(arr[i] > max_val) {\n            ans.push_back(arr[i]);\n\
    \        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate = maximum;\n\
    \    assert(candidate((std::vector<long>({-3, -4, 5})), (3)) == (std::vector<long>({-4,\
    \ -3, 5})));\n    assert(candidate((std::vector<long>({4, -4, 4})), (2)) == (std::vector<long>({4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-3, 2, 1, 2, -1, -2, 1})),\
    \ (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmpbgw3lgkq: /tmp/tmpbgw3lgkq.cpp:38: int main(): Assertion `candidate((std::vector<long>({-3,\
    \ -4, 5})), (3)) == (std::vector<long>({-4, -3, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n    // Your code here\n    std::vector<long> ans;\n    long\
    \ max = 0;\n    long min = 0;\n    long sum = 0;\n    long count = 0;\n    for(long\
    \ i = 0; i < arr.size(); i++) {\n        if(arr[i] > max) {\n            max =\
    \ arr[i];\n        }\n        if(arr[i] < min) {\n            min = arr[i];\n\
    \        }\n        sum += arr[i];\n        count++;\n    }\n    long mid = sum\
    \ / count;\n    for(long i = 0; i < arr.size(); i++) {\n        if(arr[i] > mid)\
    \ {\n            ans.push_back(max);\n            max = max * -1;\n        }\n\
    \        if(arr[i] < mid) {\n            ans.push_back(min);\n            min\
    \ = min * -1;\n        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate\
    \ = maximum;\n    assert(candidate((std::vector<long>({-3, -4, 5})), (3)) == (std::vector<long>({-4,\
    \ -3, 5})));\n    assert(candidate((std::vector<long>({4, -4, 4})), (2)) == (std::vector<long>({4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-3, 2, 1, 2, -1, -2, 1})),\
    \ (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmpisel7wio: /tmp/tmpisel7wio.cpp:50: int main(): Assertion `candidate((std::vector<long>({-3,\
    \ -4, 5})), (3)) == (std::vector<long>({-4, -3, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n    std::vector<long> ans;\n    long max_val = arr[0];\n   \
    \ long max_idx = -1;\n    for (long i = 1; i < arr.size(); i++) {\n        if\
    \ (arr[i] > max_val) {\n            max_val = arr[i];\n            max_idx = i;\n\
    \        }\n    }\n    ans.push_back(max_val);\n    for (long i = max_idx + 1;\
    \ i < arr.size(); i++) {\n        if (arr[i] > max_val) {\n            ans.push_back(arr[i]);\n\
    \        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate = maximum;\n\
    \    assert(candidate((std::vector<long>({-3, -4, 5})), (3)) == (std::vector<long>({-4,\
    \ -3, 5})));\n    assert(candidate((std::vector<long>({4, -4, 4})), (2)) == (std::vector<long>({4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-3, 2, 1, 2, -1, -2, 1})),\
    \ (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmpgw4lbbjx: /tmp/tmpgw4lbbjx.cpp:38: int main(): Assertion `candidate((std::vector<long>({-3,\
    \ -4, 5})), (3)) == (std::vector<long>({-4, -3, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n    std::vector<long> ans;\n    long max = 0;\n    long i =\
    \ 0;\n    long j = 0;\n    long n = arr.size();\n    long mid = n / 2;\n    while\
    \ (i < n) {\n        if (arr[i] > max) {\n            max = arr[i];\n        }\n\
    \        i++;\n    }\n    while (j < n) {\n        if (arr[j] > max) {\n     \
    \       max = arr[j];\n        }\n        j++;\n    }\n    while (i < n) {\n \
    \       if (arr[i] > max) {\n            ans.push_back(arr[i]);\n            i++;\n\
    \        }\n    }\n    while (j < n) {\n        if (arr[j] > max) {\n        \
    \    ans.push_back(arr[j]);\n            j++;\n        }\n    }\n    return ans;\n\
    }\nint main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({-3,\
    \ -4, 5})), (3)) == (std::vector<long>({-4, -3, 5})));\n    assert(candidate((std::vector<long>({4,\
    \ -4, 4})), (2)) == (std::vector<long>({4, 4})));\n    assert(candidate((std::vector<long>({-3,\
    \ 2, 1, 2, -1, -2, 1})), (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmpuvb7sr08: /tmp/tmpuvb7sr08.cpp:53: int main(): Assertion `candidate((std::vector<long>({-3,\
    \ -4, 5})), (3)) == (std::vector<long>({-4, -3, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n    std::vector<long> res;\n    long max = 0;\n    long i =\
    \ 0;\n    long j = 0;\n    long mid = 0;\n    long n = arr.size();\n    long count\
    \ = 0;\n    long temp = 0;\n    while(i < n) {\n        mid = (i + j)/2;\n   \
    \     if(arr[mid] > max) {\n            max = arr[mid];\n            j = mid;\n\
    \        } else {\n            i = mid + 1;\n        }\n    }\n    while(j < n)\
    \ {\n        mid = (i + j)/2;\n        if(arr[mid] > max) {\n            max =\
    \ arr[mid];\n            i = mid + 1;\n        } else {\n            j = mid +\
    \ 1;\n        }\n    }\n    while(j < n) {\n        mid = (i + j)/2;\n       \
    \ if(arr[mid] > max) {\n            max = arr[mid];\n            i = mid + 1;\n\
    \        } else {\n            j = mid + 1;\n        }\n    }\n    while(j < n)\
    \ {\n        mid = (i + j)/2;\n        if(arr[mid] > max) {\n            max =\
    \ arr[mid];\n            i = mid + 1;\n        } else {\n            j = mid +\
    \ 1;\n        }\n    }\n    while(j < n) {\n        mid = (i + j)/2;\n       \
    \ if(arr[mid] > max) {\n            max = arr[mid];\n            i = mid + 1;\n\
    \        } else {\n            j = mid + 1;\n        }\n    }\n    while(j < n)\
    \ {\n        mid = (i + j)/2;\n        if(arr[mid] > max) {\n            max =\
    \ arr[mid];\n            i = mid + 1;\n        } else {\n            j = mid +\
    \ 1;\n        }\n    }\n    while(j < n) {\n        mid = (i + j)/2;\n       \
    \ if(arr[mid] > max) {\n            max = arr[mid];\n            i = mid + 1;\n\
    \        } else {\n            j = mid + 1;\n        }\n    }\n    while(j < n)\
    \ {\n        mid = (i + j)/2;\n        if(arr[mid] > max) {\n            max =\
    \ arr[mid];\n            i = mid + 1;\n        } else {\n            j = mid +\
    \ 1;\n        }\n    }\n    while(j < n) {\n        mid = (i + j)/2;\n       \
    \ if(arr[mid] > max) {\n            max = arr[mid];\n            i = mid + 1;\n\
    \        } else {\n            j = mid + 1;\n        }\n    }\n    while(j < n)\
    \ {\n        mid = (i + j)/2;\n        if(arr[mid] > max) {\n            max =\
    \ arr[mid];\n            i = mid + 1;\n        } else {\n            j = mid +\
    \ 1;\n        }\n    }\n    while(j < n) {\n        mid = (i + j)/2;\n       \
    \ if(arr[mid] > max) {\n            max = arr[mid];\n            i = mid + 1;\n\
    \n}\nint main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({-3,\
    \ -4, 5})), (3)) == (std::vector<long>({-4, -3, 5})));\n    assert(candidate((std::vector<long>({4,\
    \ -4, 4})), (2)) == (std::vector<long>({4, 4})));\n    assert(candidate((std::vector<long>({-3,\
    \ 2, 1, 2, -1, -2, 1})), (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpk0exqybd.cpp: In function \u2018std::vector<long int> maximum(std::vector<long\
    \ int>, long int)\u2019:\n/tmp/tmpk0exqybd.cpp:124:12: error: a function-definition\
    \ is not allowed here before \u2018{\u2019 token\n  124 | int main() {\n     \
    \ |            ^\n/tmp/tmpk0exqybd.cpp:137:1: error: expected \u2018}\u2019 at\
    \ end of input\n  137 | }\n      | ^\n/tmp/tmpk0exqybd.cpp:117:18: note: to match\
    \ this \u2018{\u2019\n  117 |     while(j < n) {\n      |                  ^\n\
    /tmp/tmpk0exqybd.cpp:137:1: error: expected \u2018}\u2019 at end of input\n  137\
    \ | }\n      | ^\n/tmp/tmpk0exqybd.cpp:18:58: note: to match this \u2018{\u2019\
    \n   18 | std::vector<long> maximum(std::vector<long> arr, long k) {\n      |\
    \                                                          ^\n/tmp/tmpk0exqybd.cpp:137:1:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n\
    \  137 | }\n      | ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n    std::vector<long> ans;\n    long max = 0;\n    long curr\
    \ = 0;\n    long i = 0;\n    long j = 0;\n    long size = arr.size();\n    while(i\
    \ < size) {\n        max = arr[i];\n        while(j < size && arr[j] > max) {\n\
    \            max = arr[j];\n            j++;\n        }\n        if(max > curr)\
    \ {\n            ans.push_back(max);\n            curr = max;\n        }\n   \
    \     i++;\n    }\n    return ans;\n}\nint main() {\n    auto candidate = maximum;\n\
    \    assert(candidate((std::vector<long>({-3, -4, 5})), (3)) == (std::vector<long>({-4,\
    \ -3, 5})));\n    assert(candidate((std::vector<long>({4, -4, 4})), (2)) == (std::vector<long>({4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-3, 2, 1, 2, -1, -2, 1})),\
    \ (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmp7eavewm_: /tmp/tmp7eavewm_.cpp:41: int main(): Assertion `candidate((std::vector<long>({-3,\
    \ -4, 5})), (3)) == (std::vector<long>({-4, -3, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n    std::vector<long> ans;\n    long max = 0;\n    long i =\
    \ 0;\n    long j = 0;\n    long mid = 0;\n    long size = arr.size();\n    while(i\
    \ < size) {\n        mid = (i + j) / 2;\n        if(arr[mid] > max) {\n      \
    \      max = arr[mid];\n            j = mid;\n        } else {\n            i\
    \ = mid + 1;\n        }\n    }\n    while(j < size) {\n        mid = (i + j) /\
    \ 2;\n        if(arr[mid] > max) {\n            max = arr[mid];\n            i\
    \ = mid + 1;\n        } else {\n            j = mid + 1;\n        }\n    }\n \
    \   while(i < size) {\n        mid = (i + j) / 2;\n        if(arr[mid] > max)\
    \ {\n            max = arr[mid];\n            i = mid + 1;\n        } else {\n\
    \            j = mid + 1;\n        }\n    }\n    while(j < size) {\n        mid\
    \ = (i + j) / 2;\n        if(arr[mid] > max) {\n            max = arr[mid];\n\
    \            j = mid + 1;\n        } else {\n            i = mid + 1;\n      \
    \  }\n    }\n    while(j < size) {\n        mid = (i + j) / 2;\n        if(arr[mid]\
    \ > max) {\n            max = arr[mid];\n            j = mid + 1;\n        } else\
    \ {\n            i = mid + 1;\n        }\n    }\n    while(j < size) {\n     \
    \   mid = (i + j) / 2;\n        if(arr[mid] > max) {\n            max = arr[mid];\n\
    \            j = mid + 1;\n        } else {\n            i = mid + 1;\n      \
    \  }\n    }\n    while(j < size) {\n        mid = (i + j) / 2;\n        if(arr[mid]\
    \ > max) {\n            max = arr[mid];\n            j = mid + 1;\n        } else\
    \ {\n            i = mid + 1;\n        }\n    }\n    while(j < size) {\n     \
    \   mid = (i + j) / 2;\n        if(arr[mid] > max) {\n            max = arr[mid];\n\
    \            j = mid + 1;\n        } else {\n            i = mid + 1;\n      \
    \  }\n    }\n    while(j < size) {\n        mid = (i + j) / 2;\n        if(arr[mid]\
    \ > max) {\n            max = arr[mid];\n            j = mid + 1;\n        } else\
    \ {\n            i = mid + 1;\n        }\n    }\n    while(j < size) {\n     \
    \   mid = (i + j) / 2;\n        if(arr[mid] > max) {\n            max = arr[mid];\n\
    \            j = mid + 1;\n        } else {\n            i = mid + 1;\n      \
    \  }\n    }\n    while(j < size) {\n        mid = (i + j) / 2;\n        if(arr[mid]\
    \ > max) {\n            max = arr[mid];\n            j = mid + 1;\n        } else\
    \ {\n            i = mid + 1;\n\n}\nint main() {\n    auto candidate = maximum;\n\
    \    assert(candidate((std::vector<long>({-3, -4, 5})), (3)) == (std::vector<long>({-4,\
    \ -3, 5})));\n    assert(candidate((std::vector<long>({4, -4, 4})), (2)) == (std::vector<long>({4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-3, 2, 1, 2, -1, -2, 1})),\
    \ (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpio0n0s_p.cpp: In function \u2018std::vector<long int> maximum(std::vector<long\
    \ int>, long int)\u2019:\n/tmp/tmpio0n0s_p.cpp:124:12: error: a function-definition\
    \ is not allowed here before \u2018{\u2019 token\n  124 | int main() {\n     \
    \ |            ^\n/tmp/tmpio0n0s_p.cpp:137:1: error: expected \u2018}\u2019 at\
    \ end of input\n  137 | }\n      | ^\n/tmp/tmpio0n0s_p.cpp:115:21: note: to match\
    \ this \u2018{\u2019\n  115 |     while(j < size) {\n      |                 \
    \    ^\n/tmp/tmpio0n0s_p.cpp:137:1: error: expected \u2018}\u2019 at end of input\n\
    \  137 | }\n      | ^\n/tmp/tmpio0n0s_p.cpp:18:58: note: to match this \u2018\
    {\u2019\n   18 | std::vector<long> maximum(std::vector<long> arr, long k) {\n\
    \      |                                                          ^\n/tmp/tmpio0n0s_p.cpp:137:1:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n\
    \  137 | }\n      | ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n    // write your code here\n    std::vector<long> result;\n\
    \    long max = 0;\n    long index = 0;\n    for(long i = 0; i < arr.size(); i++)\
    \ {\n        if(arr[i] > max) {\n            max = arr[i];\n            index\
    \ = i;\n        }\n    }\n    result.push_back(max);\n    for(long i = index;\
    \ i < arr.size(); i++) {\n        if(arr[i] > max) {\n            max = arr[i];\n\
    \        }\n    }\n    result.push_back(max);\n    for(long i = index; i < arr.size();\
    \ i++) {\n        if(arr[i] > max) {\n            max = arr[i];\n        }\n \
    \   }\n    result.push_back(max);\n    for(long i = index; i < arr.size(); i++)\
    \ {\n        if(arr[i] > max) {\n            max = arr[i];\n        }\n    }\n\
    \    result.push_back(max);\n    for(long i = index; i < arr.size(); i++) {\n\
    \        if(arr[i] > max) {\n            max = arr[i];\n        }\n    }\n   \
    \ result.push_back(max);\n    for(long i = index; i < arr.size(); i++) {\n   \
    \     if(arr[i] > max) {\n            max = arr[i];\n        }\n    }\n    result.push_back(max);\n\
    \    for(long i = index; i < arr.size(); i++) {\n        if(arr[i] > max) {\n\
    \            max = arr[i];\n        }\n    }\n    result.push_back(max);\n   \
    \ for(long i = index; i < arr.size(); i++) {\n        if(arr[i] > max) {\n   \
    \         max = arr[i];\n        }\n    }\n    result.push_back(max);\n    for(long\
    \ i = index; i < arr.size(); i++) {\n        if(arr[i] > max) {\n            max\
    \ = arr[i];\n        }\n    }\n    result.push_back(max);\n    for(long i = index;\
    \ i < arr.size(); i++) {\n        if(arr[i] > max) {\n            max = arr[i];\n\
    \        }\n    }\n    result.push_back(max);\n    for(long i = index; i < arr.size();\
    \ i++) {\n        if(arr[i] > max) {\n            max = arr[i];\n        }\n \
    \   }\n    result.push_back(max);\n    for(long i = index; i < arr.size(); i++)\
    \ {\n        if(arr[i] > max) {\n            max = arr[i];\n        }\n    }\n\
    \    result.push_back(max);\n    for(long i = index; i < arr.size(); i++) {\n\
    \        if(arr[i] > max) {\n            max = arr[i];\n        }\n    }\n   \
    \ result.push_back(max);\n    for(long i = index; i < arr.size(); i++) {\n   \
    \     if(arr[i] > max) {\n            max = arr[i];\n        }\n    }\n    result.push_back(max);\n\
    \    for(long i = index; i < arr.size(); i++) {\n        if(arr[i] > max) {\n\
    \            max = arr[i];\n        }\n    }\n    result.push_back(max);\n   \
    \ for(long i = index; i < arr.size(); i++) {\n}\nint main() {\n    auto candidate\
    \ = maximum;\n    assert(candidate((std::vector<long>({-3, -4, 5})), (3)) == (std::vector<long>({-4,\
    \ -3, 5})));\n    assert(candidate((std::vector<long>({4, -4, 4})), (2)) == (std::vector<long>({4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-3, 2, 1, 2, -1, -2, 1})),\
    \ (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpqvi7zipp.cpp: In function \u2018std::vector<long int> maximum(std::vector<long\
    \ int>, long int)\u2019:\n/tmp/tmpqvi7zipp.cpp:116:12: error: a function-definition\
    \ is not allowed here before \u2018{\u2019 token\n  116 | int main() {\n     \
    \ |            ^\n/tmp/tmpqvi7zipp.cpp:129:1: error: expected \u2018}\u2019 at\
    \ end of input\n  129 | }\n      | ^\n/tmp/tmpqvi7zipp.cpp:18:58: note: to match\
    \ this \u2018{\u2019\n   18 | std::vector<long> maximum(std::vector<long> arr,\
    \ long k) {\n      |                                                         \
    \ ^\n/tmp/tmpqvi7zipp.cpp:129:1: warning: no return statement in function returning\
    \ non-void [-Wreturn-type]\n  129 | }\n      | ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n    // Your code here\n    std::vector<long> ans;\n    long\
    \ max = 0;\n    long sum = 0;\n    for(long i = 0; i < arr.size(); i++){\n   \
    \     sum += arr[i];\n        if(sum > max){\n            max = sum;\n       \
    \ }\n    }\n    for(long i = 0; i < arr.size(); i++){\n        if(arr[i] > max){\n\
    \            ans.push_back(arr[i]);\n        }\n    }\n    ans.push_back(max);\n\
    \    return ans;\n}\nint main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({-3,\
    \ -4, 5})), (3)) == (std::vector<long>({-4, -3, 5})));\n    assert(candidate((std::vector<long>({4,\
    \ -4, 4})), (2)) == (std::vector<long>({4, 4})));\n    assert(candidate((std::vector<long>({-3,\
    \ 2, 1, 2, -1, -2, 1})), (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmptuus7sy_: /tmp/tmptuus7sy_.cpp:39: int main(): Assertion `candidate((std::vector<long>({-3,\
    \ -4, 5})), (3)) == (std::vector<long>({-4, -3, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n    // Your code here\n    std::vector<long> ans;\n    long\
    \ max = 0;\n    long min = 0;\n    long sum = 0;\n    for (long i = 0; i < arr.size();\
    \ i++) {\n        sum += arr[i];\n        if (sum > max) {\n            max =\
    \ sum;\n        }\n        if (sum < min) {\n            min = sum;\n        }\n\
    \    }\n    long mid = sum / 2;\n    for (long i = 0; i < arr.size(); i++) {\n\
    \        if (arr[i] > mid) {\n            ans.push_back(arr[i]);\n        }\n\
    \    }\n    ans.push_back(max);\n    ans.push_back(min);\n    return ans;\n}\n\
    int main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({-3,\
    \ -4, 5})), (3)) == (std::vector<long>({-4, -3, 5})));\n    assert(candidate((std::vector<long>({4,\
    \ -4, 4})), (2)) == (std::vector<long>({4, 4})));\n    assert(candidate((std::vector<long>({-3,\
    \ 2, 1, 2, -1, -2, 1})), (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmpadvt4ni8: /tmp/tmpadvt4ni8.cpp:45: int main(): Assertion `candidate((std::vector<long>({-3,\
    \ -4, 5})), (3)) == (std::vector<long>({-4, -3, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n    // Your code here\n    std::vector<long> max;\n    max.reserve(k);\n\
    \    long maxVal = arr[0];\n    for(long i = 1; i < k; i++) {\n        if(arr[i]\
    \ > maxVal) {\n            maxVal = arr[i];\n        }\n    }\n    for(long i\
    \ = 0; i < k; i++) {\n        if(arr[i] > maxVal) {\n            max.push_back(arr[i]);\n\
    \        }\n    }\n    return max;\n}\nint main() {\n    auto candidate = maximum;\n\
    \    assert(candidate((std::vector<long>({-3, -4, 5})), (3)) == (std::vector<long>({-4,\
    \ -3, 5})));\n    assert(candidate((std::vector<long>({4, -4, 4})), (2)) == (std::vector<long>({4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-3, 2, 1, 2, -1, -2, 1})),\
    \ (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmpvcvlrt4f: /tmp/tmpvcvlrt4f.cpp:37: int main(): Assertion `candidate((std::vector<long>({-3,\
    \ -4, 5})), (3)) == (std::vector<long>({-4, -3, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n    std::vector<long> ans;\n    long max_val = arr[0];\n   \
    \ long max_idx = -1;\n    for (long i = 1; i < arr.size(); i++) {\n        if\
    \ (arr[i] > max_val) {\n            max_val = arr[i];\n            max_idx = i;\n\
    \        }\n    }\n    ans.push_back(max_val);\n    for (long i = max_idx + 1;\
    \ i < arr.size(); i++) {\n        if (arr[i] > max_val) {\n            ans.push_back(arr[i]);\n\
    \        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate = maximum;\n\
    \    assert(candidate((std::vector<long>({-3, -4, 5})), (3)) == (std::vector<long>({-4,\
    \ -3, 5})));\n    assert(candidate((std::vector<long>({4, -4, 4})), (2)) == (std::vector<long>({4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-3, 2, 1, 2, -1, -2, 1})),\
    \ (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmphzemj5td: /tmp/tmphzemj5td.cpp:38: int main(): Assertion `candidate((std::vector<long>({-3,\
    \ -4, 5})), (3)) == (std::vector<long>({-4, -3, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n    std::vector<long> ans;\n    long max_val = arr[0];\n   \
    \ long max_idx = -1;\n    for (long i = 1; i < arr.size(); i++) {\n        if\
    \ (arr[i] > max_val) {\n            max_val = arr[i];\n            max_idx = i;\n\
    \        }\n    }\n    ans.push_back(max_val);\n    ans.push_back(arr[max_idx]);\n\
    \    for (long i = max_idx + 1; i < arr.size(); i++) {\n        if (arr[i] > max_val)\
    \ {\n            ans.push_back(arr[i]);\n        }\n    }\n    return ans;\n}\n\
    int main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({-3,\
    \ -4, 5})), (3)) == (std::vector<long>({-4, -3, 5})));\n    assert(candidate((std::vector<long>({4,\
    \ -4, 4})), (2)) == (std::vector<long>({4, 4})));\n    assert(candidate((std::vector<long>({-3,\
    \ 2, 1, 2, -1, -2, 1})), (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmp2bzv9vlu: /tmp/tmp2bzv9vlu.cpp:39: int main(): Assertion `candidate((std::vector<long>({-3,\
    \ -4, 5})), (3)) == (std::vector<long>({-4, -3, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n    // Your code here\n    long long max = 0;\n    std::vector<long>\
    \ ans;\n    for(long i = 0; i < arr.size(); i++) {\n        if(arr[i] > max) {\n\
    \            max = arr[i];\n        }\n    }\n    for(long i = 0; i < arr.size();\
    \ i++) {\n        if(arr[i] > max) {\n            ans.push_back(max);\n      \
    \      max = arr[i];\n        }\n    }\n    ans.push_back(max);\n    return ans;\n\
    }\nint main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({-3,\
    \ -4, 5})), (3)) == (std::vector<long>({-4, -3, 5})));\n    assert(candidate((std::vector<long>({4,\
    \ -4, 4})), (2)) == (std::vector<long>({4, 4})));\n    assert(candidate((std::vector<long>({-3,\
    \ 2, 1, 2, -1, -2, 1})), (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmpultk111o: /tmp/tmpultk111o.cpp:38: int main(): Assertion `candidate((std::vector<long>({-3,\
    \ -4, 5})), (3)) == (std::vector<long>({-4, -3, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n    std::vector<long> max_arr(k);\n    long max_val = arr[0];\n\
    \    long index = 0;\n    for (long i = 1; i < k; i++) {\n        if (arr[i] >\
    \ max_val) {\n            max_val = arr[i];\n        }\n    }\n    max_arr[0]\
    \ = max_val;\n    for (long i = 1; i < k; i++) {\n        if (arr[i] > max_val)\
    \ {\n            max_arr[i] = arr[i];\n        }\n    }\n    return max_arr;\n\
    }\nint main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({-3,\
    \ -4, 5})), (3)) == (std::vector<long>({-4, -3, 5})));\n    assert(candidate((std::vector<long>({4,\
    \ -4, 4})), (2)) == (std::vector<long>({4, 4})));\n    assert(candidate((std::vector<long>({-3,\
    \ 2, 1, 2, -1, -2, 1})), (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmpdk6lnvdz: /tmp/tmpdk6lnvdz.cpp:37: int main(): Assertion `candidate((std::vector<long>({-3,\
    \ -4, 5})), (3)) == (std::vector<long>({-4, -3, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n    std::vector<long> ans;\n    long max = 0;\n    long cur\
    \ = 0;\n    for (long i = 0; i < arr.size(); i++) {\n        if (arr[i] > max)\
    \ {\n            max = arr[i];\n            cur = i;\n        }\n    }\n    ans.push_back(max);\n\
    \    for (long i = cur + 1; i < arr.size(); i++) {\n        if (arr[i] > max)\
    \ {\n            max = arr[i];\n            ans.push_back(max);\n        }\n \
    \   }\n    return ans;\n}\nint main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({-3,\
    \ -4, 5})), (3)) == (std::vector<long>({-4, -3, 5})));\n    assert(candidate((std::vector<long>({4,\
    \ -4, 4})), (2)) == (std::vector<long>({4, 4})));\n    assert(candidate((std::vector<long>({-3,\
    \ 2, 1, 2, -1, -2, 1})), (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmpzgsdjbl9: /tmp/tmpzgsdjbl9.cpp:39: int main(): Assertion `candidate((std::vector<long>({-3,\
    \ -4, 5})), (3)) == (std::vector<long>({-4, -3, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n    std::vector<long> ans;\n    long max = 0;\n    long index\
    \ = 0;\n    for (auto i : arr) {\n        if (i > max) {\n            max = i;\n\
    \            index = i;\n        }\n    }\n    for (auto i : arr) {\n        if\
    \ (i == max) {\n            ans.push_back(index);\n        }\n    }\n    return\
    \ ans;\n}\nint main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({-3,\
    \ -4, 5})), (3)) == (std::vector<long>({-4, -3, 5})));\n    assert(candidate((std::vector<long>({4,\
    \ -4, 4})), (2)) == (std::vector<long>({4, 4})));\n    assert(candidate((std::vector<long>({-3,\
    \ 2, 1, 2, -1, -2, 1})), (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmp2tyw_w99: /tmp/tmp2tyw_w99.cpp:37: int main(): Assertion `candidate((std::vector<long>({-3,\
    \ -4, 5})), (3)) == (std::vector<long>({-4, -3, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n    std::vector<long> ans;\n    long max_val = arr[0];\n   \
    \ long max_pos = 0;\n    for (long i = 1; i < arr.size(); i++) {\n        if (arr[i]\
    \ > max_val) {\n            max_val = arr[i];\n            max_pos = i;\n    \
    \    }\n    }\n    ans.push_back(max_val);\n    long max_pos2 = max_pos;\n   \
    \ for (long i = max_pos + 1; i < arr.size(); i++) {\n        if (arr[i] > max_val)\
    \ {\n            max_val = arr[i];\n            max_pos2 = i;\n        }\n   \
    \ }\n    ans.push_back(max_val);\n    long max_pos3 = max_pos2;\n    for (long\
    \ i = max_pos2 + 1; i < arr.size(); i++) {\n        if (arr[i] > max_val) {\n\
    \            max_val = arr[i];\n            max_pos3 = i;\n        }\n    }\n\
    \    ans.push_back(max_val);\n    long max_pos4 = max_pos3;\n    for (long i =\
    \ max_pos3 + 1; i < arr.size(); i++) {\n        if (arr[i] > max_val) {\n    \
    \        max_val = arr[i];\n            max_pos4 = i;\n        }\n    }\n    ans.push_back(max_val);\n\
    \    long max_pos5 = max_pos4;\n    for (long i = max_pos4 + 1; i < arr.size();\
    \ i++) {\n        if (arr[i] > max_val) {\n            max_val = arr[i];\n   \
    \         max_pos5 = i;\n        }\n    }\n    ans.push_back(max_val);\n    long\
    \ max_pos6 = max_pos5;\n    for (long i = max_pos5 + 1; i < arr.size(); i++) {\n\
    \        if (arr[i] > max_val) {\n            max_val = arr[i];\n            max_pos6\
    \ = i;\n        }\n    }\n    ans.push_back(max_val);\n    long max_pos7 = max_pos6;\n\
    \    for (long i = max_pos6 + 1; i < arr.size(); i++) {\n        if (arr[i] >\
    \ max_val) {\n            max_val = arr[i];\n            max_pos7 = i;\n     \
    \   }\n    }\n    ans.push_back(max_val);\n    long max_pos8 = max_pos7;\n   \
    \ for (long i = max_pos7 + 1; i < arr.size(); i++) {\n        if (arr[i] > max_val)\
    \ {\n            max_val = arr[i];\n            max_pos8 = i;\n        }\n   \
    \ }\n    ans.push_back(max_val);\n    long max_pos9 = max_pos8;\n    for (long\
    \ i = max_pos8 + 1; i < arr.size(); i++) {\n        if (arr[i] > max_val) {\n\
    \            max_val = arr[i];\n            max_pos9 = i;\n        }\n    }\n\
    \    ans.push_back(max_val);\n    long max_pos10 = max_pos9;\n    for (long i\
    \ = max_pos9 + 1; i < arr.size(); i++) {\n        if (arr[i] > max_val) {\n  \
    \          max_val = arr[i];\n            max_pos10 = i;\n        }\n    }\n \
    \   ans.push_back(max_val);\n    long max_pos11 = max_pos10;\n    for (long i\
    \ = max_pos10 + 1\n}\nint main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({-3,\
    \ -4, 5})), (3)) == (std::vector<long>({-4, -3, 5})));\n    assert(candidate((std::vector<long>({4,\
    \ -4, 4})), (2)) == (std::vector<long>({4, 4})));\n    assert(candidate((std::vector<long>({-3,\
    \ 2, 1, 2, -1, -2, 1})), (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "/tmp/tmplej1mmhd.cpp: In function \u2018std::vector<long int> maximum(std::vector<long\
    \ int>, long int)\u2019:\n/tmp/tmplej1mmhd.cpp:102:32: error: expected \u2018\
    ;\u2019 before \u2018}\u2019 token\n  102 |     for (long i = max_pos10 + 1\n\
    \      |                                ^\n      |                           \
    \     ;\n  103 | }\n      | ~                               \n/tmp/tmplej1mmhd.cpp:103:1:\
    \ error: expected primary-expression before \u2018}\u2019 token\n  103 | }\n \
    \     | ^\n/tmp/tmplej1mmhd.cpp:102:32: error: expected \u2018;\u2019 before \u2018\
    }\u2019 token\n  102 |     for (long i = max_pos10 + 1\n      |              \
    \                  ^\n      |                                ;\n  103 | }\n  \
    \    | ~                               \n/tmp/tmplej1mmhd.cpp:103:1: error: expected\
    \ primary-expression before \u2018}\u2019 token\n  103 | }\n      | ^\n/tmp/tmplej1mmhd.cpp:102:32:\
    \ error: expected \u2018)\u2019 before \u2018}\u2019 token\n  102 |     for (long\
    \ i = max_pos10 + 1\n      |         ~                      ^\n      |       \
    \                         )\n  103 | }\n      | ~                            \
    \   \n/tmp/tmplej1mmhd.cpp:103:1: error: expected primary-expression before \u2018\
    }\u2019 token\n  103 | }\n      | ^\n/tmp/tmplej1mmhd.cpp:103:1: warning: no return\
    \ statement in function returning non-void [-Wreturn-type]\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n    long n = arr.size();\n    std::vector<long> ans;\n    long\
    \ max_val = arr[0];\n    long max_idx = -1;\n    \n    for (long i = 1; i < n;\
    \ i++) {\n        if (arr[i] > max_val) {\n            max_val = arr[i];\n   \
    \         max_idx = i;\n        }\n    }\n    \n    for (long i = 0; i < k; i++)\
    \ {\n        ans.push_back(arr[max_idx]);\n        max_idx--;\n    }\n    \n \
    \   return ans;\n}\nint main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({-3,\
    \ -4, 5})), (3)) == (std::vector<long>({-4, -3, 5})));\n    assert(candidate((std::vector<long>({4,\
    \ -4, 4})), (2)) == (std::vector<long>({4, 4})));\n    assert(candidate((std::vector<long>({-3,\
    \ 2, 1, 2, -1, -2, 1})), (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmp443yyj4e: /tmp/tmp443yyj4e.cpp:40: int main(): Assertion `candidate((std::vector<long>({-3,\
    \ -4, 5})), (3)) == (std::vector<long>({-4, -3, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n    std::vector<long> result;\n    long max = 0;\n    long index\
    \ = 0;\n    for (auto i : arr) {\n        if (i > max) {\n            max = i;\n\
    \            index = i;\n        }\n    }\n    for (auto i : arr) {\n        if\
    \ (i == max) {\n            result.push_back(index);\n        }\n    }\n    if\
    \ (result.size() < k) {\n        for (auto i : arr) {\n            if (i == max)\
    \ {\n                result.push_back(i);\n            }\n        }\n    }\n \
    \   return result;\n}\nint main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({-3,\
    \ -4, 5})), (3)) == (std::vector<long>({-4, -3, 5})));\n    assert(candidate((std::vector<long>({4,\
    \ -4, 4})), (2)) == (std::vector<long>({4, 4})));\n    assert(candidate((std::vector<long>({-3,\
    \ 2, 1, 2, -1, -2, 1})), (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmpkaerzgke: /tmp/tmpkaerzgke.cpp:44: int main(): Assertion `candidate((std::vector<long>({-3,\
    \ -4, 5})), (3)) == (std::vector<long>({-4, -3, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n    // code here\n    std::vector<long> result;\n    long max_val\
    \ = arr[0];\n    long max_idx = -1;\n    for (long i = 1; i < arr.size(); i++)\
    \ {\n        if (arr[i] > max_val) {\n            max_val = arr[i];\n        \
    \    max_idx = i;\n        }\n    }\n    for (long i = 0; i < k; i++) {\n    \
    \    result.push_back(arr[max_idx]);\n        max_idx--;\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({-3,\
    \ -4, 5})), (3)) == (std::vector<long>({-4, -3, 5})));\n    assert(candidate((std::vector<long>({4,\
    \ -4, 4})), (2)) == (std::vector<long>({4, 4})));\n    assert(candidate((std::vector<long>({-3,\
    \ 2, 1, 2, -1, -2, 1})), (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmplmrb5h4l: /tmp/tmplmrb5h4l.cpp:37: int main(): Assertion `candidate((std::vector<long>({-3,\
    \ -4, 5})), (3)) == (std::vector<long>({-4, -3, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n    long long max = 0;\n    std::vector<long> ans;\n    for(long\
    \ i = 0; i < k; i++) {\n        max = std::max(max, arr[i]);\n        ans.push_back(max);\n\
    \    }\n    return ans;\n}\nint main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({-3,\
    \ -4, 5})), (3)) == (std::vector<long>({-4, -3, 5})));\n    assert(candidate((std::vector<long>({4,\
    \ -4, 4})), (2)) == (std::vector<long>({4, 4})));\n    assert(candidate((std::vector<long>({-3,\
    \ 2, 1, 2, -1, -2, 1})), (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpttqb7q1_.cpp: In function \u2018std::vector<long int> maximum(std::vector<long\
    \ int>, long int)\u2019:\n/tmp/tmpttqb7q1_.cpp:22:35: error: no matching function\
    \ for call to \u2018max(long long int&, __gnu_cxx::__alloc_traits<std::allocator<long\
    \ int>, long int>::value_type&)\u2019\n   22 |         max = std::max(max, arr[i]);\n\
    \      |                                   ^\nIn file included from /usr/include/c++/9/bits/char_traits.h:39,\n\
    \                 from /usr/include/c++/9/ios:40,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmpttqb7q1_.cpp:2:\n/usr/include/c++/9/bits/stl_algobase.h:222:5: note:\
    \ candidate: \u2018template<class _Tp> constexpr const _Tp& std::max(const _Tp&,\
    \ const _Tp&)\u2019\n  222 |     max(const _Tp& __a, const _Tp& __b)\n      |\
    \     ^~~\n/usr/include/c++/9/bits/stl_algobase.h:222:5: note:   template argument\
    \ deduction/substitution failed:\n/tmp/tmpttqb7q1_.cpp:22:35: note:   deduced\
    \ conflicting types for parameter \u2018const _Tp\u2019 (\u2018long long int\u2019\
    \ and \u2018__gnu_cxx::__alloc_traits<std::allocator<long int>, long int>::value_type\u2019\
    \ {aka \u2018long int\u2019})\n   22 |         max = std::max(max, arr[i]);\n\
    \      |                                   ^\nIn file included from /usr/include/c++/9/bits/char_traits.h:39,\n\
    \                 from /usr/include/c++/9/ios:40,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmpttqb7q1_.cpp:2:\n/usr/include/c++/9/bits/stl_algobase.h:268:5: note:\
    \ candidate: \u2018template<class _Tp, class _Compare> constexpr const _Tp& std::max(const\
    \ _Tp&, const _Tp&, _Compare)\u2019\n  268 |     max(const _Tp& __a, const _Tp&\
    \ __b, _Compare __comp)\n      |     ^~~\n/usr/include/c++/9/bits/stl_algobase.h:268:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmpttqb7q1_.cpp:22:35:\
    \ note:   deduced conflicting types for parameter \u2018const _Tp\u2019 (\u2018\
    long long int\u2019 and \u2018__gnu_cxx::__alloc_traits<std::allocator<long int>,\
    \ long int>::value_type\u2019 {aka \u2018long int\u2019})\n   22 |         max\
    \ = std::max(max, arr[i]);\n      |                                   ^\nIn file\
    \ included from /usr/include/c++/9/algorithm:62,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpttqb7q1_.cpp:2:\n/usr/include/c++/9/bits/stl_algo.h:3462:5:\
    \ note: candidate: \u2018template<class _Tp> constexpr _Tp std::max(std::initializer_list<_Tp>)\u2019\
    \n 3462 |     max(initializer_list<_Tp> __l)\n      |     ^~~\n/usr/include/c++/9/bits/stl_algo.h:3462:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmpttqb7q1_.cpp:22:35:\
    \ note:   mismatched types \u2018std::initializer_list<_Tp>\u2019 and \u2018long\
    \ long int\u2019\n   22 |         max = std::max(max, arr[i]);\n      |      \
    \                             ^\nIn file included from /usr/include/c++/9/algorithm:62,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpttqb7q1_.cpp:2:\n/usr/include/c++/9/bits/stl_algo.h:3468:5:\
    \ note: candidate: \u2018template<class _Tp, class _Compare> constexpr _Tp std::max(std::initializer_list<_Tp>,\
    \ _Compare)\u2019\n 3468 |     max(initializer_list<_Tp> __l, _Compare __comp)\n\
    \      |     ^~~\n/usr/include/c++/9/bits/stl_algo.h:3468:5: note:   template\
    \ argument deduction/substitution failed:\n/tmp/tmpttqb7q1_.cpp:22:35: note: \
    \  mismatched types \u2018std::initializer_list<_Tp>\u2019 and \u2018long long\
    \ int\u2019\n   22 |         max = std::max(max, arr[i]);\n      |           \
    \                        ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n    long n = arr.size();\n    std::vector<long> ans;\n    long\
    \ max_val = arr[0];\n    long max_idx = -1;\n    for (long i = 1; i < n; i++)\
    \ {\n        if (arr[i] > max_val) {\n            max_val = arr[i];\n        \
    \    max_idx = i;\n        }\n    }\n    ans.push_back(max_val);\n    long max_idx\
    \ = max_idx;\n    for (long i = max_idx + 1; i < n; i++) {\n        if (arr[i]\
    \ > max_val) {\n            max_val = arr[i];\n            max_idx = i;\n    \
    \    }\n    }\n    ans.push_back(max_val);\n    return ans;\n}\nint main() {\n\
    \    auto candidate = maximum;\n    assert(candidate((std::vector<long>({-3, -4,\
    \ 5})), (3)) == (std::vector<long>({-4, -3, 5})));\n    assert(candidate((std::vector<long>({4,\
    \ -4, 4})), (2)) == (std::vector<long>({4, 4})));\n    assert(candidate((std::vector<long>({-3,\
    \ 2, 1, 2, -1, -2, 1})), (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpid3qctik.cpp: In function \u2018std::vector<long int> maximum(std::vector<long\
    \ int>, long int)\u2019:\n/tmp/tmpid3qctik.cpp:30:10: error: redeclaration of\
    \ \u2018long int max_idx\u2019\n   30 |     long max_idx = max_idx;\n      | \
    \         ^~~~~~~\n/tmp/tmpid3qctik.cpp:22:10: note: \u2018long int max_idx\u2019\
    \ previously declared here\n   22 |     long max_idx = -1;\n      |          ^~~~~~~\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n    std::vector<long> ans;\n    long max_val = arr[0];\n   \
    \ long max_idx = -1;\n    for (long i = 1; i < arr.size(); i++) {\n        if\
    \ (arr[i] > max_val) {\n            max_val = arr[i];\n            max_idx = i;\n\
    \        }\n    }\n    ans.push_back(max_val);\n    for (long i = max_idx + 1;\
    \ i < arr.size(); i++) {\n        if (arr[i] > max_val) {\n            ans.push_back(arr[i]);\n\
    \        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate = maximum;\n\
    \    assert(candidate((std::vector<long>({-3, -4, 5})), (3)) == (std::vector<long>({-4,\
    \ -3, 5})));\n    assert(candidate((std::vector<long>({4, -4, 4})), (2)) == (std::vector<long>({4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-3, 2, 1, 2, -1, -2, 1})),\
    \ (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmpmkfgrkq9: /tmp/tmpmkfgrkq9.cpp:38: int main(): Assertion `candidate((std::vector<long>({-3,\
    \ -4, 5})), (3)) == (std::vector<long>({-4, -3, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n    long n = arr.size();\n    std::vector<long> ans;\n    long\
    \ max_val = arr[0];\n    long max_idx = -1;\n    for(long i = 1; i < n; i++) {\n\
    \        if(arr[i] > max_val) {\n            max_val = arr[i];\n            max_idx\
    \ = i;\n        }\n    }\n    ans.push_back(max_val);\n    for(long i = max_idx\
    \ + 1; i < n; i++) {\n        if(arr[i] > max_val) {\n            ans.push_back(arr[i]);\n\
    \        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate = maximum;\n\
    \    assert(candidate((std::vector<long>({-3, -4, 5})), (3)) == (std::vector<long>({-4,\
    \ -3, 5})));\n    assert(candidate((std::vector<long>({4, -4, 4})), (2)) == (std::vector<long>({4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-3, 2, 1, 2, -1, -2, 1})),\
    \ (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmpqfxs7wuq: /tmp/tmpqfxs7wuq.cpp:39: int main(): Assertion `candidate((std::vector<long>({-3,\
    \ -4, 5})), (3)) == (std::vector<long>({-4, -3, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n    long n = arr.size();\n    std::vector<long> ans;\n    long\
    \ max_val = arr[0];\n    long max_idx = -1;\n    for(long i = 1; i < n; i++) {\n\
    \        if(arr[i] > max_val) {\n            max_val = arr[i];\n            max_idx\
    \ = i;\n        }\n    }\n    ans.push_back(max_val);\n    for(long i = max_idx;\
    \ i < k; i++) {\n        ans.push_back(arr[i]);\n    }\n    return ans;\n}\nint\
    \ main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({-3,\
    \ -4, 5})), (3)) == (std::vector<long>({-4, -3, 5})));\n    assert(candidate((std::vector<long>({4,\
    \ -4, 4})), (2)) == (std::vector<long>({4, 4})));\n    assert(candidate((std::vector<long>({-3,\
    \ 2, 1, 2, -1, -2, 1})), (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmpjr7o3m4c: /tmp/tmpjr7o3m4c.cpp:37: int main(): Assertion `candidate((std::vector<long>({-3,\
    \ -4, 5})), (3)) == (std::vector<long>({-4, -3, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n    std::vector<long> ans;\n    long max = 0;\n    long curr\
    \ = 0;\n    for (long i = 0; i < arr.size(); i++) {\n        if (arr[i] > max)\
    \ {\n            max = arr[i];\n        }\n    }\n    long curr2 = 0;\n    for\
    \ (long i = 0; i < arr.size(); i++) {\n        if (arr[i] > max) {\n         \
    \   ans.push_back(max);\n            curr2 = max;\n            max = arr[i];\n\
    \        } else if (arr[i] == max) {\n            curr2 = max;\n            max\
    \ = arr[i];\n        }\n    }\n    ans.push_back(max);\n    ans.push_back(curr2);\n\
    \    return ans;\n}\nint main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({-3,\
    \ -4, 5})), (3)) == (std::vector<long>({-4, -3, 5})));\n    assert(candidate((std::vector<long>({4,\
    \ -4, 4})), (2)) == (std::vector<long>({4, 4})));\n    assert(candidate((std::vector<long>({-3,\
    \ 2, 1, 2, -1, -2, 1})), (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmpa6cirax7: /tmp/tmpa6cirax7.cpp:44: int main(): Assertion `candidate((std::vector<long>({-3,\
    \ -4, 5})), (3)) == (std::vector<long>({-4, -3, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n    std::vector<long> ans;\n    long max_val = arr[0];\n   \
    \ long max_idx = -1;\n    for (long i = 1; i < arr.size(); i++) {\n        if\
    \ (arr[i] > max_val) {\n            max_val = arr[i];\n            max_idx = i;\n\
    \        }\n    }\n    ans.push_back(max_val);\n    ans.push_back(arr[max_idx]);\n\
    \    return ans;\n}\nint main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({-3,\
    \ -4, 5})), (3)) == (std::vector<long>({-4, -3, 5})));\n    assert(candidate((std::vector<long>({4,\
    \ -4, 4})), (2)) == (std::vector<long>({4, 4})));\n    assert(candidate((std::vector<long>({-3,\
    \ 2, 1, 2, -1, -2, 1})), (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmpbjz6eexf: /tmp/tmpbjz6eexf.cpp:34: int main(): Assertion `candidate((std::vector<long>({-3,\
    \ -4, 5})), (3)) == (std::vector<long>({-4, -3, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n    std::vector<long> max_arr(k);\n    long max_num = arr[0];\n\
    \    for(long i = 1; i < k; i++) {\n        if(arr[i] > max_num) {\n         \
    \   max_num = arr[i];\n        }\n    }\n    for(long i = 0; i < k; i++) {\n \
    \       if(arr[i] > max_num) {\n            max_arr[i] = arr[i];\n        }\n\
    \    }\n    return max_arr;\n}\nint main() {\n    auto candidate = maximum;\n\
    \    assert(candidate((std::vector<long>({-3, -4, 5})), (3)) == (std::vector<long>({-4,\
    \ -3, 5})));\n    assert(candidate((std::vector<long>({4, -4, 4})), (2)) == (std::vector<long>({4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-3, 2, 1, 2, -1, -2, 1})),\
    \ (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmprobvcsyb: /tmp/tmprobvcsyb.cpp:35: int main(): Assertion `candidate((std::vector<long>({-3,\
    \ -4, 5})), (3)) == (std::vector<long>({-4, -3, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n    std::vector<long> ans;\n    long max_val = arr[0];\n   \
    \ long max_idx = -1;\n    for (long i = 1; i < arr.size(); i++) {\n        if\
    \ (arr[i] > max_val) {\n            max_val = arr[i];\n            max_idx = i;\n\
    \        }\n    }\n    ans.push_back(max_val);\n    ans.push_back(arr[max_idx]);\n\
    \    \n    long max_val_2 = arr[0];\n    long max_idx_2 = -1;\n    for (long i\
    \ = 1; i < arr.size(); i++) {\n        if (arr[i] > max_val_2) {\n           \
    \ max_val_2 = arr[i];\n            max_idx_2 = i;\n        }\n    }\n    ans.push_back(max_val_2);\n\
    \    ans.push_back(arr[max_idx_2]);\n    \n    long max_val_3 = arr[0];\n    long\
    \ max_idx_3 = -1;\n    for (long i = 1; i < arr.size(); i++) {\n        if (arr[i]\
    \ > max_val_3) {\n            max_val_3 = arr[i];\n            max_idx_3 = i;\n\
    \        }\n    }\n    ans.push_back(max_val_3);\n    ans.push_back(arr[max_idx_3]);\n\
    \    \n    long max_val_4 = arr[0];\n    long max_idx_4 = -1;\n    for (long i\
    \ = 1; i < arr.size(); i++) {\n        if (arr[i] > max_val_4) {\n           \
    \ max_val_4 = arr[i];\n            max_idx_4 = i;\n        }\n    }\n    ans.push_back(max_val_4);\n\
    \    ans.push_back(arr[max_idx_4]);\n    \n    long max_val_5 = arr[0];\n    long\
    \ max_idx_5 = -1;\n    for (long i = 1; i < arr.size(); i++) {\n        if (arr[i]\
    \ > max_val_5) {\n            max_val_5 = arr[i];\n            max_idx_5 = i;\n\
    \        }\n    }\n    ans.push_back(max_val_5);\n    ans.push_back(arr[max_idx_5]);\n\
    \    \n    long max_val_6 = arr[0];\n    long max_idx_6 = -1;\n    for (long i\
    \ = 1; i < arr.size(); i++) {\n        if (arr[i] > max_val_6) {\n           \
    \ max_val_6 = arr[i];\n            max_idx_6 = i;\n        }\n    }\n    ans.push_back(max_val_6);\n\
    \    ans.push_back(arr[max_idx_6]);\n    \n    long max_val_7 = arr[0];\n    long\
    \ max_idx_7 = -1;\n    for (long i = 1; i < arr.size(); i++) {\n        if (arr[i]\
    \ > max_val_7) {\n            max_val_7 = arr[i];\n            max_idx_7 = i;\n\
    \        }\n    }\n    ans.push_back(max_val_7);\n    ans.push_back(arr[max_idx_7]);\n\
    \    \n    long max_val_8 = arr[0];\n    long max_idx_8 = -1;\n    for (long i\
    \ = 1; i < arr.size(); i++) {\n        if (arr[i] > max_val_8) {\n           \
    \ max_val_8 = arr[i];\n\n}\nint main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({-3,\
    \ -4, 5})), (3)) == (std::vector<long>({-4, -3, 5})));\n    assert(candidate((std::vector<long>({4,\
    \ -4, 4})), (2)) == (std::vector<long>({4, 4})));\n    assert(candidate((std::vector<long>({-3,\
    \ 2, 1, 2, -1, -2, 1})), (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpug8684mv.cpp: In function \u2018std::vector<long int> maximum(std::vector<long\
    \ int>, long int)\u2019:\n/tmp/tmpug8684mv.cpp:104:12: error: a function-definition\
    \ is not allowed here before \u2018{\u2019 token\n  104 | int main() {\n     \
    \ |            ^\n/tmp/tmpug8684mv.cpp:117:1: error: expected \u2018}\u2019 at\
    \ end of input\n  117 | }\n      | ^\n/tmp/tmpug8684mv.cpp:99:43: note: to match\
    \ this \u2018{\u2019\n   99 |     for (long i = 1; i < arr.size(); i++) {\n  \
    \    |                                           ^\n/tmp/tmpug8684mv.cpp:117:1:\
    \ error: expected \u2018}\u2019 at end of input\n  117 | }\n      | ^\n/tmp/tmpug8684mv.cpp:18:58:\
    \ note: to match this \u2018{\u2019\n   18 | std::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n      |                                                    \
    \      ^\n/tmp/tmpug8684mv.cpp:117:1: warning: no return statement in function\
    \ returning non-void [-Wreturn-type]\n  117 | }\n      | ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n    // code here\n    std::vector<long> max_arr;\n    long max_num\
    \ = arr[0];\n    for(long i = 1; i < arr.size(); i++) {\n        if(arr[i] > max_num)\
    \ {\n            max_num = arr[i];\n        }\n    }\n    for(long i = 0; i <\
    \ arr.size(); i++) {\n        if(arr[i] > max_num) {\n            max_arr.push_back(arr[i]);\n\
    \        }\n    }\n    for(long i = 0; i < k; i++) {\n        max_arr.push_back(max_num);\n\
    \    }\n    return max_arr;\n}\nint main() {\n    auto candidate = maximum;\n\
    \    assert(candidate((std::vector<long>({-3, -4, 5})), (3)) == (std::vector<long>({-4,\
    \ -3, 5})));\n    assert(candidate((std::vector<long>({4, -4, 4})), (2)) == (std::vector<long>({4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-3, 2, 1, 2, -1, -2, 1})),\
    \ (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmpo4e3lwaf: /tmp/tmpo4e3lwaf.cpp:39: int main(): Assertion `candidate((std::vector<long>({-3,\
    \ -4, 5})), (3)) == (std::vector<long>({-4, -3, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n    long n = arr.size();\n    std::vector<long> ans;\n    long\
    \ max_val = arr[0];\n    long max_idx = -1;\n    for (long i = 1; i < n; i++)\
    \ {\n        if (arr[i] > max_val) {\n            max_val = arr[i];\n        \
    \    max_idx = i;\n        }\n    }\n    ans.push_back(max_val);\n    for (long\
    \ i = max_idx + 1; i < n; i++) {\n        if (arr[i] > max_val) {\n          \
    \  ans.push_back(arr[i]);\n        }\n    }\n    return ans;\n}\nint main() {\n\
    \    auto candidate = maximum;\n    assert(candidate((std::vector<long>({-3, -4,\
    \ 5})), (3)) == (std::vector<long>({-4, -3, 5})));\n    assert(candidate((std::vector<long>({4,\
    \ -4, 4})), (2)) == (std::vector<long>({4, 4})));\n    assert(candidate((std::vector<long>({-3,\
    \ 2, 1, 2, -1, -2, 1})), (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmpoxajev61: /tmp/tmpoxajev61.cpp:39: int main(): Assertion `candidate((std::vector<long>({-3,\
    \ -4, 5})), (3)) == (std::vector<long>({-4, -3, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n    long n = arr.size();\n    std::vector<long> ans;\n    long\
    \ max_val = arr[0];\n    long max_idx = -1;\n    for (long i = 1; i < n; i++)\
    \ {\n        if (arr[i] > max_val) {\n            max_val = arr[i];\n        \
    \    max_idx = i;\n        }\n    }\n    ans.push_back(max_val);\n    for (long\
    \ i = max_idx + 1; i < n; i++) {\n        if (arr[i] > max_val) {\n          \
    \  ans.push_back(arr[i]);\n        }\n    }\n    return ans;\n}\nint main() {\n\
    \    auto candidate = maximum;\n    assert(candidate((std::vector<long>({-3, -4,\
    \ 5})), (3)) == (std::vector<long>({-4, -3, 5})));\n    assert(candidate((std::vector<long>({4,\
    \ -4, 4})), (2)) == (std::vector<long>({4, 4})));\n    assert(candidate((std::vector<long>({-3,\
    \ 2, 1, 2, -1, -2, 1})), (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmp21j10x1o: /tmp/tmp21j10x1o.cpp:39: int main(): Assertion `candidate((std::vector<long>({-3,\
    \ -4, 5})), (3)) == (std::vector<long>({-4, -3, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n    std::vector<long> ans;\n    long max = 0;\n    long i =\
    \ 0;\n    long j = 0;\n    long n = arr.size();\n    while(i < n && j < k) {\n\
    \        if(arr[i] > arr[j]) {\n            max = arr[i];\n            i++;\n\
    \        } else {\n            max = arr[j];\n            j++;\n        }\n  \
    \  }\n    while(i < n) {\n        max = arr[i];\n        ans.push_back(max);\n\
    \        i++;\n    }\n    while(j < k) {\n        max = arr[j];\n        ans.push_back(max);\n\
    \        j++;\n    }\n    return ans;\n}\nint main() {\n    auto candidate = maximum;\n\
    \    assert(candidate((std::vector<long>({-3, -4, 5})), (3)) == (std::vector<long>({-4,\
    \ -3, 5})));\n    assert(candidate((std::vector<long>({4, -4, 4})), (2)) == (std::vector<long>({4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-3, 2, 1, 2, -1, -2, 1})),\
    \ (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmp5rof1k3n: /tmp/tmp5rof1k3n.cpp:47: int main(): Assertion `candidate((std::vector<long>({-3,\
    \ -4, 5})), (3)) == (std::vector<long>({-4, -3, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n    // Your code here\n    long long max = 0;\n    std::vector<long>\
    \ arr1;\n    for(long i = 0; i < arr.size(); i++) {\n        if(arr[i] > max)\
    \ {\n            max = arr[i];\n        }\n    }\n    for(long i = 0; i < arr.size();\
    \ i++) {\n        if(arr[i] > max) {\n            arr1.push_back(max);\n     \
    \       max = arr[i];\n        }\n    }\n    for(long i = 0; i < arr.size(); i++)\
    \ {\n        if(arr[i] > max) {\n            arr1.push_back(arr[i]);\n       \
    \ }\n    }\n    return arr1;\n}\nint main() {\n    auto candidate = maximum;\n\
    \    assert(candidate((std::vector<long>({-3, -4, 5})), (3)) == (std::vector<long>({-4,\
    \ -3, 5})));\n    assert(candidate((std::vector<long>({4, -4, 4})), (2)) == (std::vector<long>({4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-3, 2, 1, 2, -1, -2, 1})),\
    \ (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmp2_mtjp9p: /tmp/tmp2_mtjp9p.cpp:42: int main(): Assertion `candidate((std::vector<long>({-3,\
    \ -4, 5})), (3)) == (std::vector<long>({-4, -3, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n    long n = arr.size();\n    std::vector<long> ans;\n    ans.reserve(n);\n\
    \    long max_val = arr[0];\n    long max_idx = -1;\n    for (long i = 1; i <\
    \ n; i++) {\n        if (arr[i] > max_val) {\n            max_val = arr[i];\n\
    \            max_idx = i;\n        }\n    }\n    for (long i = 0; i < n; i++)\
    \ {\n        if (max_idx != i) {\n            ans.push_back(arr[i]);\n       \
    \ }\n    }\n    ans.push_back(max_val);\n    return ans;\n}\nint main() {\n  \
    \  auto candidate = maximum;\n    assert(candidate((std::vector<long>({-3, -4,\
    \ 5})), (3)) == (std::vector<long>({-4, -3, 5})));\n    assert(candidate((std::vector<long>({4,\
    \ -4, 4})), (2)) == (std::vector<long>({4, 4})));\n    assert(candidate((std::vector<long>({-3,\
    \ 2, 1, 2, -1, -2, 1})), (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmpclh_8dbr: /tmp/tmpclh_8dbr.cpp:40: int main(): Assertion `candidate((std::vector<long>({-3,\
    \ -4, 5})), (3)) == (std::vector<long>({-4, -3, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n    long n = arr.size();\n    std::vector<long> ans;\n    long\
    \ max_val = arr[0];\n    long max_idx = -1;\n    for(long i = 1; i < n; i++) {\n\
    \        if(arr[i] > max_val) {\n            max_val = arr[i];\n            max_idx\
    \ = i;\n        }\n    }\n    ans.push_back(max_val);\n    for(long i = max_idx\
    \ + 1; i < k; i++) {\n        long val = arr[i];\n        long idx = i;\n    \
    \    for(long j = i; j < n; j++) {\n            if(arr[j] > val) {\n         \
    \       val = arr[j];\n                idx = j;\n            }\n        }\n  \
    \      ans.push_back(val);\n    }\n    return ans;\n}\nint main() {\n    auto\
    \ candidate = maximum;\n    assert(candidate((std::vector<long>({-3, -4, 5})),\
    \ (3)) == (std::vector<long>({-4, -3, 5})));\n    assert(candidate((std::vector<long>({4,\
    \ -4, 4})), (2)) == (std::vector<long>({4, 4})));\n    assert(candidate((std::vector<long>({-3,\
    \ 2, 1, 2, -1, -2, 1})), (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmpn0sci319: /tmp/tmpn0sci319.cpp:45: int main(): Assertion `candidate((std::vector<long>({-3,\
    \ -4, 5})), (3)) == (std::vector<long>({-4, -3, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n    // code here\n    std::vector<long> result;\n    long max\
    \ = 0;\n    long temp = 0;\n    for (long i = 0; i < arr.size(); i++) {\n    \
    \    if (arr[i] > max) {\n            max = arr[i];\n        }\n    }\n    for\
    \ (long i = 0; i < arr.size(); i++) {\n        if (arr[i] == max) {\n        \
    \    temp = arr[i];\n        }\n    }\n    for (long i = 0; i < arr.size(); i++)\
    \ {\n        if (arr[i] > temp) {\n            result.push_back(arr[i]);\n   \
    \     }\n    }\n    for (long i = 0; i < result.size(); i++) {\n        if (result[i]\
    \ > k) {\n            result.erase(result.begin() + i);\n        }\n    }\n  \
    \  return result;\n}\nint main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({-3,\
    \ -4, 5})), (3)) == (std::vector<long>({-4, -3, 5})));\n    assert(candidate((std::vector<long>({4,\
    \ -4, 4})), (2)) == (std::vector<long>({4, 4})));\n    assert(candidate((std::vector<long>({-3,\
    \ 2, 1, 2, -1, -2, 1})), (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmpf8h5pmib: /tmp/tmpf8h5pmib.cpp:47: int main(): Assertion `candidate((std::vector<long>({-3,\
    \ -4, 5})), (3)) == (std::vector<long>({-4, -3, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n    // Your code here\n    std::vector<long> max;\n    long\
    \ maxVal = arr[0];\n    for(long i = 1; i < arr.size(); i++) {\n        if(arr[i]\
    \ > maxVal) {\n            maxVal = arr[i];\n        }\n    }\n    for(long i\
    \ = 0; i < arr.size(); i++) {\n        if(arr[i] > maxVal) {\n            max.push_back(arr[i]);\n\
    \        }\n    }\n    for(long i = 0; i < k; i++) {\n        max.push_back(maxVal);\n\
    \    }\n    return max;\n}\nint main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({-3,\
    \ -4, 5})), (3)) == (std::vector<long>({-4, -3, 5})));\n    assert(candidate((std::vector<long>({4,\
    \ -4, 4})), (2)) == (std::vector<long>({4, 4})));\n    assert(candidate((std::vector<long>({-3,\
    \ 2, 1, 2, -1, -2, 1})), (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmpi2vp3a2o: /tmp/tmpi2vp3a2o.cpp:39: int main(): Assertion `candidate((std::vector<long>({-3,\
    \ -4, 5})), (3)) == (std::vector<long>({-4, -3, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n    std::vector<long> ans;\n    long max_val = arr[0];\n   \
    \ long max_idx = -1;\n    for (size_t i = 0; i < arr.size(); i++) {\n        if\
    \ (arr[i] > max_val) {\n            max_val = arr[i];\n            max_idx = i;\n\
    \        }\n    }\n    ans.push_back(max_val);\n    for (size_t i = max_idx +\
    \ 1; i < arr.size(); i++) {\n        long val = arr[i];\n        long idx = i;\n\
    \        while (idx > 0 && arr[idx - 1] > val) {\n            ans.push_back(val);\n\
    \            idx--;\n        }\n    }\n    return ans;\n}\nint main() {\n    auto\
    \ candidate = maximum;\n    assert(candidate((std::vector<long>({-3, -4, 5})),\
    \ (3)) == (std::vector<long>({-4, -3, 5})));\n    assert(candidate((std::vector<long>({4,\
    \ -4, 4})), (2)) == (std::vector<long>({4, 4})));\n    assert(candidate((std::vector<long>({-3,\
    \ 2, 1, 2, -1, -2, 1})), (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmpfu5q_vuu: /tmp/tmpfu5q_vuu.cpp:41: int main(): Assertion `candidate((std::vector<long>({-3,\
    \ -4, 5})), (3)) == (std::vector<long>({-4, -3, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n    // Your code here\n    std::vector<long> ans;\n    long\
    \ max = 0;\n    long cur = 0;\n    for(long i = 0; i < arr.size(); i++) {\n  \
    \      if(arr[i] > max) {\n            max = arr[i];\n            cur = i;\n \
    \       }\n    }\n    ans.push_back(max);\n    for(long i = 0; i < arr.size();\
    \ i++) {\n        if(arr[i] == max) {\n            ans.push_back(arr[cur]);\n\
    \        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate = maximum;\n\
    \    assert(candidate((std::vector<long>({-3, -4, 5})), (3)) == (std::vector<long>({-4,\
    \ -3, 5})));\n    assert(candidate((std::vector<long>({4, -4, 4})), (2)) == (std::vector<long>({4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-3, 2, 1, 2, -1, -2, 1})),\
    \ (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmpgt9ron9y: /tmp/tmpgt9ron9y.cpp:39: int main(): Assertion `candidate((std::vector<long>({-3,\
    \ -4, 5})), (3)) == (std::vector<long>({-4, -3, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n    std::vector<long> res;\n    long max = 0;\n    long cur\
    \ = 0;\n    for(long i = 0; i < arr.size(); i++) {\n        if(arr[i] > max) {\n\
    \            max = arr[i];\n            cur = i;\n        }\n    }\n    for(long\
    \ i = 0; i < arr.size(); i++) {\n        if(arr[i] == max) {\n            res.push_back(arr[cur]);\n\
    \        }\n    }\n    return res;\n}\nint main() {\n    auto candidate = maximum;\n\
    \    assert(candidate((std::vector<long>({-3, -4, 5})), (3)) == (std::vector<long>({-4,\
    \ -3, 5})));\n    assert(candidate((std::vector<long>({4, -4, 4})), (2)) == (std::vector<long>({4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-3, 2, 1, 2, -1, -2, 1})),\
    \ (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmp73h6lepa: /tmp/tmp73h6lepa.cpp:37: int main(): Assertion `candidate((std::vector<long>({-3,\
    \ -4, 5})), (3)) == (std::vector<long>({-4, -3, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n    std::vector<long> ans;\n    long max_val = arr[0];\n   \
    \ long max_idx = -1;\n    for(long i = 1; i < arr.size(); i++) {\n        if(arr[i]\
    \ > max_val) {\n            max_val = arr[i];\n            max_idx = i;\n    \
    \    }\n    }\n    ans.push_back(max_val);\n    for(long i = max_idx + 1; i <\
    \ arr.size(); i++) {\n        if(arr[i] > max_val) {\n            ans.push_back(arr[i]);\n\
    \        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate = maximum;\n\
    \    assert(candidate((std::vector<long>({-3, -4, 5})), (3)) == (std::vector<long>({-4,\
    \ -3, 5})));\n    assert(candidate((std::vector<long>({4, -4, 4})), (2)) == (std::vector<long>({4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-3, 2, 1, 2, -1, -2, 1})),\
    \ (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmp9jp_2h5u: /tmp/tmp9jp_2h5u.cpp:38: int main(): Assertion `candidate((std::vector<long>({-3,\
    \ -4, 5})), (3)) == (std::vector<long>({-4, -3, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n    std::vector<long> ans;\n    long max_val = arr[0];\n   \
    \ long max_idx = -1;\n    for (size_t i = 0; i < arr.size(); i++) {\n        if\
    \ (arr[i] > max_val) {\n            max_val = arr[i];\n            max_idx = i;\n\
    \        }\n    }\n    ans.push_back(max_val);\n    for (size_t i = max_idx +\
    \ 1; i < arr.size(); i++) {\n        if (arr[i] > max_val) {\n            ans.push_back(arr[i]);\n\
    \        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate = maximum;\n\
    \    assert(candidate((std::vector<long>({-3, -4, 5})), (3)) == (std::vector<long>({-4,\
    \ -3, 5})));\n    assert(candidate((std::vector<long>({4, -4, 4})), (2)) == (std::vector<long>({4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-3, 2, 1, 2, -1, -2, 1})),\
    \ (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmpv_l990fe: /tmp/tmpv_l990fe.cpp:38: int main(): Assertion `candidate((std::vector<long>({-3,\
    \ -4, 5})), (3)) == (std::vector<long>({-4, -3, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n    long n = arr.size();\n    std::vector<long> max_arr(n);\n\
    \    long max_num = arr[0];\n    long max_idx = 0;\n    for(long i = 1; i < n;\
    \ i++) {\n        if(arr[i] > max_num) {\n            max_num = arr[i];\n    \
    \        max_idx = i;\n        }\n    }\n    for(long i = 0; i < n; i++) {\n \
    \       if(arr[i] > max_num) {\n            max_arr[max_idx] = arr[i];\n     \
    \       max_idx++;\n        }\n    }\n    return max_arr;\n}\nint main() {\n \
    \   auto candidate = maximum;\n    assert(candidate((std::vector<long>({-3, -4,\
    \ 5})), (3)) == (std::vector<long>({-4, -3, 5})));\n    assert(candidate((std::vector<long>({4,\
    \ -4, 4})), (2)) == (std::vector<long>({4, 4})));\n    assert(candidate((std::vector<long>({-3,\
    \ 2, 1, 2, -1, -2, 1})), (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmpdbcu8gy0: /tmp/tmpdbcu8gy0.cpp:39: int main(): Assertion `candidate((std::vector<long>({-3,\
    \ -4, 5})), (3)) == (std::vector<long>({-4, -3, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n    std::vector<long> ans;\n    long max_val = arr[0];\n   \
    \ long max_idx = -1;\n    for (long i = 1; i < arr.size(); i++) {\n        if\
    \ (arr[i] > max_val) {\n            max_val = arr[i];\n            max_idx = i;\n\
    \        }\n    }\n    ans.push_back(max_val);\n    long idx = max_idx;\n    for\
    \ (long i = max_idx + 1; i < arr.size(); i++) {\n        if (arr[i] > arr[idx])\
    \ {\n            ans.push_back(arr[i]);\n            idx = i;\n        }\n   \
    \ }\n    return ans;\n}\nint main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({-3,\
    \ -4, 5})), (3)) == (std::vector<long>({-4, -3, 5})));\n    assert(candidate((std::vector<long>({4,\
    \ -4, 4})), (2)) == (std::vector<long>({4, 4})));\n    assert(candidate((std::vector<long>({-3,\
    \ 2, 1, 2, -1, -2, 1})), (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmpyk1vm0n6: /tmp/tmpyk1vm0n6.cpp:40: int main(): Assertion `candidate((std::vector<long>({-3,\
    \ -4, 5})), (3)) == (std::vector<long>({-4, -3, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n    std::vector<long> max_arr(k);\n    long max_val = arr[0];\n\
    \    long max_index = 0;\n    for (long i = 1; i < k; i++) {\n        if (arr[i]\
    \ > max_val) {\n            max_val = arr[i];\n            max_index = i;\n  \
    \      }\n    }\n    max_arr[max_index] = max_val;\n    for (long i = 1; i < k;\
    \ i++) {\n        if (arr[i] > max_val) {\n            max_arr[i] = arr[i];\n\
    \        }\n    }\n    return max_arr;\n}\nint main() {\n    auto candidate =\
    \ maximum;\n    assert(candidate((std::vector<long>({-3, -4, 5})), (3)) == (std::vector<long>({-4,\
    \ -3, 5})));\n    assert(candidate((std::vector<long>({4, -4, 4})), (2)) == (std::vector<long>({4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-3, 2, 1, 2, -1, -2, 1})),\
    \ (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmpatq4f_uc: /tmp/tmpatq4f_uc.cpp:38: int main(): Assertion `candidate((std::vector<long>({-3,\
    \ -4, 5})), (3)) == (std::vector<long>({-4, -3, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n    std::vector<long> ans;\n    long max_val = arr[0];\n   \
    \ long max_idx = -1;\n    for (size_t i = 0; i < arr.size(); i++) {\n        if\
    \ (arr[i] > max_val) {\n            max_val = arr[i];\n            max_idx = i;\n\
    \        }\n    }\n    ans.push_back(max_val);\n    for (size_t i = 0; i < arr.size();\
    \ i++) {\n        if (i != max_idx) {\n            ans.push_back(arr[i]);\n  \
    \      }\n    }\n    return ans;\n}\nint main() {\n    auto candidate = maximum;\n\
    \    assert(candidate((std::vector<long>({-3, -4, 5})), (3)) == (std::vector<long>({-4,\
    \ -3, 5})));\n    assert(candidate((std::vector<long>({4, -4, 4})), (2)) == (std::vector<long>({4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-3, 2, 1, 2, -1, -2, 1})),\
    \ (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmpcp57woy0: /tmp/tmpcp57woy0.cpp:38: int main(): Assertion `candidate((std::vector<long>({-3,\
    \ -4, 5})), (3)) == (std::vector<long>({-4, -3, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n    // Your code here\n    std::vector<long> ans;\n    long\
    \ max = 0;\n    long i = 0;\n    long j = 0;\n    long mid = 0;\n    long count\
    \ = 0;\n    while(i < arr.size() && j < k) {\n        if(arr[i] > max) {\n   \
    \         max = arr[i];\n            mid = i;\n        }\n        i++;\n    }\n\
    \    while(j < k) {\n        if(arr[j] > max) {\n            max = arr[j];\n \
    \           mid = j;\n        }\n        j++;\n    }\n    while(i < arr.size())\
    \ {\n        if(arr[i] > max) {\n            max = arr[i];\n            mid =\
    \ i;\n        }\n        i++;\n    }\n    while(j < k) {\n        if(arr[j] >\
    \ max) {\n            max = arr[j];\n            mid = j;\n        }\n       \
    \ j++;\n    }\n    while(i < arr.size() && j < k) {\n        if(arr[i] > max)\
    \ {\n            max = arr[i];\n            mid = i;\n        }\n        i++;\n\
    \        j++;\n    }\n    while(j < k) {\n        if(arr[j] > max) {\n       \
    \     max = arr[j];\n            mid = j;\n        }\n        j++;\n    }\n  \
    \  while(i < arr.size() && j < k) {\n        if(arr[i] > max) {\n            max\
    \ = arr[i];\n            mid = i;\n        }\n        i++;\n        j++;\n   \
    \ }\n    while(j < k) {\n        if(arr[j] > max) {\n            max = arr[j];\n\
    \            mid = j;\n        }\n        j++;\n    }\n    while(i < arr.size()\
    \ && j < k) {\n        if(arr[i] > max) {\n            max = arr[i];\n       \
    \     mid = i;\n        }\n        i++;\n        j++;\n    }\n    while(j < k)\
    \ {\n        if(arr[j] > max) {\n            max = arr[j];\n            mid =\
    \ j;\n        }\n        j++;\n    }\n    while(i < arr.size() && j < k) {\n \
    \       if(arr[i] > max) {\n            max = arr[i];\n            mid = i;\n\
    \        }\n        i++;\n        j++;\n    }\n    while(j < k) {\n        if(arr[j]\
    \ > max) {\n            max = arr[j];\n            mid = j;\n        }\n     \
    \   j++;\n    }\n    while(i < arr.size() && j < k) {\n        if(arr[i] > max)\
    \ {\n            max = arr[i];\n            mid = i;\n        }\n        i++;\n\
    \        j++;\n    }\n    while(j < k) {\n        if(arr[j] > max) {\n       \
    \     max = arr[j];\n            mid = j;\n        }\n        j\n}\nint main()\
    \ {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({-3,\
    \ -4, 5})), (3)) == (std::vector<long>({-4, -3, 5})));\n    assert(candidate((std::vector<long>({4,\
    \ -4, 4})), (2)) == (std::vector<long>({4, 4})));\n    assert(candidate((std::vector<long>({-3,\
    \ 2, 1, 2, -1, -2, 1})), (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpdvpn9s_9.cpp: In function \u2018std::vector<long int> maximum(std::vector<long\
    \ int>, long int)\u2019:\n/tmp/tmpdvpn9s_9.cpp:127:10: error: expected \u2018\
    ;\u2019 before \u2018}\u2019 token\n  127 |         j\n      |          ^\n  \
    \    |          ;\n  128 | }\n      | ~         \n/tmp/tmpdvpn9s_9.cpp:129:12:\
    \ error: a function-definition is not allowed here before \u2018{\u2019 token\n\
    \  129 | int main() {\n      |            ^\n/tmp/tmpdvpn9s_9.cpp:142:1: error:\
    \ expected \u2018}\u2019 at end of input\n  142 | }\n      | ^\n/tmp/tmpdvpn9s_9.cpp:18:58:\
    \ note: to match this \u2018{\u2019\n   18 | std::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n      |                                                    \
    \      ^\n/tmp/tmpdvpn9s_9.cpp:142:1: warning: no return statement in function\
    \ returning non-void [-Wreturn-type]\n  142 | }\n      | ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n    // Your code here\n    std::vector<long> max;\n    long\
    \ max_val = arr[0];\n    for(long i = 1; i < arr.size(); i++){\n        if(arr[i]\
    \ > max_val){\n            max_val = arr[i];\n        }\n    }\n    for(long i\
    \ = 0; i < k; i++){\n        max.push_back(max_val);\n    }\n    return max;\n\
    }\nint main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({-3,\
    \ -4, 5})), (3)) == (std::vector<long>({-4, -3, 5})));\n    assert(candidate((std::vector<long>({4,\
    \ -4, 4})), (2)) == (std::vector<long>({4, 4})));\n    assert(candidate((std::vector<long>({-3,\
    \ 2, 1, 2, -1, -2, 1})), (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmpufr4we4s: /tmp/tmpufr4we4s.cpp:34: int main(): Assertion `candidate((std::vector<long>({-3,\
    \ -4, 5})), (3)) == (std::vector<long>({-4, -3, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n    std::vector<long> result;\n    long max_val = arr[0];\n\
    \    long max_idx = -1;\n    for (size_t i = 0; i < arr.size(); i++) {\n     \
    \   if (arr[i] > max_val) {\n            max_val = arr[i];\n            max_idx\
    \ = i;\n        }\n    }\n    result.push_back(max_val);\n    for (size_t i =\
    \ max_idx + 1; i < arr.size(); i++) {\n        if (arr[i] > max_val) {\n     \
    \       result.push_back(arr[i]);\n        }\n    }\n    if (result.size() > k)\
    \ {\n        result.resize(k);\n    }\n    return result;\n}\nint main() {\n \
    \   auto candidate = maximum;\n    assert(candidate((std::vector<long>({-3, -4,\
    \ 5})), (3)) == (std::vector<long>({-4, -3, 5})));\n    assert(candidate((std::vector<long>({4,\
    \ -4, 4})), (2)) == (std::vector<long>({4, 4})));\n    assert(candidate((std::vector<long>({-3,\
    \ 2, 1, 2, -1, -2, 1})), (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmpx_lb_84w: /tmp/tmpx_lb_84w.cpp:41: int main(): Assertion `candidate((std::vector<long>({-3,\
    \ -4, 5})), (3)) == (std::vector<long>({-4, -3, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n    std::vector<long> max_arr(k);\n    long max_num = arr[0];\n\
    \    long index = 0;\n    for (long i = 1; i < k; i++) {\n        if (arr[i] >\
    \ max_num) {\n            max_num = arr[i];\n        }\n    }\n    for (long i\
    \ = 0; i < k; i++) {\n        if (arr[i] > max_num) {\n            max_arr[i]\
    \ = arr[i];\n        }\n    }\n    return max_arr;\n}\nint main() {\n    auto\
    \ candidate = maximum;\n    assert(candidate((std::vector<long>({-3, -4, 5})),\
    \ (3)) == (std::vector<long>({-4, -3, 5})));\n    assert(candidate((std::vector<long>({4,\
    \ -4, 4})), (2)) == (std::vector<long>({4, 4})));\n    assert(candidate((std::vector<long>({-3,\
    \ 2, 1, 2, -1, -2, 1})), (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmpfxlq3ty7: /tmp/tmpfxlq3ty7.cpp:36: int main(): Assertion `candidate((std::vector<long>({-3,\
    \ -4, 5})), (3)) == (std::vector<long>({-4, -3, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n    std::vector<long> max_arr;\n    long max_num = arr[0];\n\
    \    for(long i = 1; i < arr.size(); i++) {\n        if(arr[i] > max_num) {\n\
    \            max_num = arr[i];\n        }\n    }\n    for(long i = 0; i < k; i++)\
    \ {\n        max_arr.push_back(max_num);\n    }\n    return max_arr;\n}\nint main()\
    \ {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({-3,\
    \ -4, 5})), (3)) == (std::vector<long>({-4, -3, 5})));\n    assert(candidate((std::vector<long>({4,\
    \ -4, 4})), (2)) == (std::vector<long>({4, 4})));\n    assert(candidate((std::vector<long>({-3,\
    \ 2, 1, 2, -1, -2, 1})), (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmp1_13gls_: /tmp/tmp1_13gls_.cpp:33: int main(): Assertion `candidate((std::vector<long>({-3,\
    \ -4, 5})), (3)) == (std::vector<long>({-4, -3, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n    std::vector<long> ans;\n    long max_val = arr[0];\n   \
    \ long max_idx = -1;\n    for (long i = 1; i < arr.size(); i++) {\n        if\
    \ (arr[i] > max_val) {\n            max_val = arr[i];\n            max_idx = i;\n\
    \        }\n    }\n    ans.push_back(max_val);\n    long curr_idx = max_idx;\n\
    \    for (long i = max_idx + 1; i < arr.size(); i++) {\n        if (arr[i] > arr[curr_idx])\
    \ {\n            ans.push_back(arr[i]);\n            curr_idx = i;\n        }\n\
    \    }\n    return ans;\n}\nint main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({-3,\
    \ -4, 5})), (3)) == (std::vector<long>({-4, -3, 5})));\n    assert(candidate((std::vector<long>({4,\
    \ -4, 4})), (2)) == (std::vector<long>({4, 4})));\n    assert(candidate((std::vector<long>({-3,\
    \ 2, 1, 2, -1, -2, 1})), (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmpw01bj06e: /tmp/tmpw01bj06e.cpp:40: int main(): Assertion `candidate((std::vector<long>({-3,\
    \ -4, 5})), (3)) == (std::vector<long>({-4, -3, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n    // code here\n    long long max = 0;\n    std::vector<long>\
    \ ans;\n    for(long i = 0; i < arr.size(); i++) {\n        if(arr[i] > max) {\n\
    \            max = arr[i];\n        }\n    }\n    for(long i = 0; i < arr.size();\
    \ i++) {\n        if(arr[i] == max) {\n            ans.push_back(max);\n     \
    \   }\n    }\n    return ans;\n}\nint main() {\n    auto candidate = maximum;\n\
    \    assert(candidate((std::vector<long>({-3, -4, 5})), (3)) == (std::vector<long>({-4,\
    \ -3, 5})));\n    assert(candidate((std::vector<long>({4, -4, 4})), (2)) == (std::vector<long>({4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-3, 2, 1, 2, -1, -2, 1})),\
    \ (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmp84is21qp: /tmp/tmp84is21qp.cpp:36: int main(): Assertion `candidate((std::vector<long>({-3,\
    \ -4, 5})), (3)) == (std::vector<long>({-4, -3, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n    std::vector<long> ans;\n    long max_val = arr[0];\n   \
    \ long max_idx = -1;\n    for(long i = 1; i < arr.size(); i++) {\n        if(arr[i]\
    \ > max_val) {\n            max_val = arr[i];\n            max_idx = i;\n    \
    \    }\n    }\n    ans.push_back(max_val);\n    for(long i = max_idx + 1; i <\
    \ arr.size(); i++) {\n        if(arr[i] > max_val) {\n            ans.push_back(arr[i]);\n\
    \        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate = maximum;\n\
    \    assert(candidate((std::vector<long>({-3, -4, 5})), (3)) == (std::vector<long>({-4,\
    \ -3, 5})));\n    assert(candidate((std::vector<long>({4, -4, 4})), (2)) == (std::vector<long>({4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-3, 2, 1, 2, -1, -2, 1})),\
    \ (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmpip2z26xw: /tmp/tmpip2z26xw.cpp:38: int main(): Assertion `candidate((std::vector<long>({-3,\
    \ -4, 5})), (3)) == (std::vector<long>({-4, -3, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n    std::vector<long> ans;\n    long max_val = arr[0];\n   \
    \ long max_idx = -1;\n    for (long i = 1; i < arr.size(); i++) {\n        if\
    \ (arr[i] > max_val) {\n            max_val = arr[i];\n            max_idx = i;\n\
    \        }\n    }\n    ans.push_back(max_val);\n    for (long i = max_idx + 1;\
    \ i < arr.size(); i++) {\n        if (arr[i] > max_val) {\n            ans.push_back(arr[i]);\n\
    \        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate = maximum;\n\
    \    assert(candidate((std::vector<long>({-3, -4, 5})), (3)) == (std::vector<long>({-4,\
    \ -3, 5})));\n    assert(candidate((std::vector<long>({4, -4, 4})), (2)) == (std::vector<long>({4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-3, 2, 1, 2, -1, -2, 1})),\
    \ (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmpzwacuz86: /tmp/tmpzwacuz86.cpp:38: int main(): Assertion `candidate((std::vector<long>({-3,\
    \ -4, 5})), (3)) == (std::vector<long>({-4, -3, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n    // Your code here\n    long n = arr.size();\n    long max_element\
    \ = 0;\n    std::vector<long> max_elements(k, 0);\n    for(long i = 0; i < n;\
    \ i++) {\n        if(arr[i] > max_element) {\n            max_element = arr[i];\n\
    \        }\n        if(max_elements[max_elements - 1] < arr[i]) {\n          \
    \  max_elements[max_elements - 1] = arr[i];\n        }\n    }\n    return max_elements;\n\
    }\nint main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({-3,\
    \ -4, 5})), (3)) == (std::vector<long>({-4, -3, 5})));\n    assert(candidate((std::vector<long>({4,\
    \ -4, 4})), (2)) == (std::vector<long>({4, 4})));\n    assert(candidate((std::vector<long>({-3,\
    \ 2, 1, 2, -1, -2, 1})), (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpdkcuxhzb.cpp: In function \u2018std::vector<long int> maximum(std::vector<long\
    \ int>, long int)\u2019:\n/tmp/tmpdkcuxhzb.cpp:27:38: error: no match for \u2018\
    operator-\u2019 (operand types are \u2018std::vector<long int>\u2019 and \u2018\
    int\u2019)\n   27 |         if(max_elements[max_elements - 1] < arr[i]) {\n  \
    \    |                         ~~~~~~~~~~~~ ^ ~\n      |                     \
    \    |              |\n      |                         |              int\n  \
    \    |                         std::vector<long int>\nIn file included from /usr/include/c++/9/bits/stl_algobase.h:67,\n\
    \                 from /usr/include/c++/9/bits/char_traits.h:39,\n           \
    \      from /usr/include/c++/9/ios:40,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmpdkcuxhzb.cpp:2:\n/usr/include/c++/9/bits/stl_iterator.h:415:5: note:\
    \ candidate: \u2018template<class _IteratorL, class _IteratorR> decltype ((__y.base()\
    \ - __x.base())) std::operator-(const std::reverse_iterator<_Iterator>&, const\
    \ std::reverse_iterator<_IteratorR>&)\u2019\n  415 |     operator-(const reverse_iterator<_IteratorL>&\
    \ __x,\n      |     ^~~~~~~~\n/usr/include/c++/9/bits/stl_iterator.h:415:5: note:\
    \   template argument deduction/substitution failed:\n/tmp/tmpdkcuxhzb.cpp:27:40:\
    \ note:   \u2018std::vector<long int>\u2019 is not derived from \u2018const std::reverse_iterator<_Iterator>\u2019\
    \n   27 |         if(max_elements[max_elements - 1] < arr[i]) {\n      |     \
    \                                   ^\nIn file included from /usr/include/c++/9/bits/stl_algobase.h:67,\n\
    \                 from /usr/include/c++/9/bits/char_traits.h:39,\n           \
    \      from /usr/include/c++/9/ios:40,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmpdkcuxhzb.cpp:2:\n/usr/include/c++/9/bits/stl_iterator.h:1209:5: note:\
    \ candidate: \u2018template<class _IteratorL, class _IteratorR> decltype ((__x.base()\
    \ - __y.base())) std::operator-(const std::move_iterator<_IteratorL>&, const std::move_iterator<_IteratorR>&)\u2019\
    \n 1209 |     operator-(const move_iterator<_IteratorL>& __x,\n      |     ^~~~~~~~\n\
    /usr/include/c++/9/bits/stl_iterator.h:1209:5: note:   template argument deduction/substitution\
    \ failed:\n/tmp/tmpdkcuxhzb.cpp:27:40: note:   \u2018std::vector<long int>\u2019\
    \ is not derived from \u2018const std::move_iterator<_IteratorL>\u2019\n   27\
    \ |         if(max_elements[max_elements - 1] < arr[i]) {\n      |           \
    \                             ^\nIn file included from /usr/include/c++/9/ccomplex:39,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n\
    \                 from /tmp/tmpdkcuxhzb.cpp:2:\n/usr/include/c++/9/complex:361:5:\
    \ note: candidate: \u2018template<class _Tp> std::complex<_Tp> std::operator-(const\
    \ std::complex<_Tp>&, const std::complex<_Tp>&)\u2019\n  361 |     operator-(const\
    \ complex<_Tp>& __x, const complex<_Tp>& __y)\n      |     ^~~~~~~~\n/usr/include/c++/9/complex:361:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmpdkcuxhzb.cpp:27:40:\
    \ note:   \u2018std::vector<long int>\u2019 is not derived from \u2018const std::complex<_Tp>\u2019\
    \n   27 |         if(max_elements[max_elements - 1] < arr[i]) {\n      |     \
    \                                   ^\nIn file included from /usr/include/c++/9/ccomplex:39,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n\
    \                 from /tmp/tmpdkcuxhzb.cpp:2:\n/usr/include/c++/9/complex:370:5:\
    \ note: candidate: \u2018template<class _Tp> std::complex<_Tp> std::operator-(const\
    \ std::complex<_Tp>&, const _Tp&)\u2019\n  370 |     operator-(const complex<_Tp>&\
    \ __x, const _Tp& __y)\n      |     ^~~~~~~~\n/usr/include/c++/9/complex:370:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmpdkcuxhzb.cpp:27:40:\
    \ note:   \u2018std::vector<long int>\u2019 is not derived from \u2018const std::complex<_Tp>\u2019\
    \n   27 |         if(max_elements[max_elements - 1] < arr[i]) {\n      |     \
    \                                   ^\nIn file included from /usr/include/c++/9/ccomplex:39,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n\
    \                 from /tmp/tmpdkcuxhzb.cpp:2:\n/usr/include/c++/9/complex:379:5:\
    \ note: candidate: \u2018template<class _Tp> std::complex<_Tp> std::operator-(const\
    \ _Tp&, const std::complex<_Tp>&)\u2019\n  379 |     operator-(const _Tp& __x,\
    \ const complex<_Tp>& __y)\n      |     ^~~~~~~~\n/usr/include/c++/9/complex:379:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmpdkcuxhzb.cpp:27:40:\
    \ note:   mismatched types \u2018const std::complex<_Tp>\u2019 and \u2018int\u2019\
    \n   27 |         if(max_elements[max_elements - 1] < arr[i]) {\n      |     \
    \                                   ^\nIn file included from /usr/include/c++/9/ccomplex:39,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n\
    \                 from /tmp/tmpdkcuxhzb.cpp:2:\n/usr/include/c++/9/complex:456:5:\
    \ note: candidate: \u2018template<class _Tp> std::complex<_Tp> std::operator-(const\
    \ std::complex<_Tp>&)\u2019\n  456 |     operator-(const complex<_Tp>& __x)\n\
    \      |     ^~~~~~~~\n/usr/include/c++/9/complex:456:5: note:   template argument\
    \ deduction/substitution failed:\n/tmp/tmpdkcuxhzb.cpp:27:40: note:   \u2018std::vector<long\
    \ int>\u2019 is not derived from \u2018const std::complex<_Tp>\u2019\n   27 |\
    \         if(max_elements[max_elements - 1] < arr[i]) {\n      |             \
    \                           ^\nIn file included from /usr/include/c++/9/deque:67,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:68,\n\
    \                 from /tmp/tmpdkcuxhzb.cpp:2:\n/usr/include/c++/9/bits/stl_deque.h:370:5:\
    \ note: candidate: \u2018template<class _Tp, class _Ref, class _Ptr> typename\
    \ std::_Deque_iterator<_Tp, _Ref, _Ptr>::difference_type std::operator-(const\
    \ std::_Deque_iterator<_Tp, _Ref, _Ptr>&, const std::_Deque_iterator<_Tp, _Ref,\
    \ _Ptr>&)\u2019\n  370 |     operator-(const _Deque_iterator<_Tp, _Ref, _Ptr>&\
    \ __x,\n      |     ^~~~~~~~\n/usr/include/c++/9/bits/stl_deque.h:370:5: note:\
    \   template argument deduction/substitution failed:\n/tmp/tmpdkcuxhzb.cpp:27:40:\
    \ note:   \u2018std::vector<long int>\u2019 is not derived from \u2018const std::_Deque_iterator<_Tp,\
    \ _Ref, _Ptr>\u2019\n   27 |         if(max_elements[max_elements - 1] < arr[i])\
    \ {\n      |                                        ^\nIn file included from /usr/include/c++/9/deque:67,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:68,\n\
    \                 from /tmp/tmpdkcuxhzb.cpp:2:\n/usr/include/c++/9/bits/stl_deque.h:382:5:\
    \ note: candidate: \u2018template<class _Tp, class _RefL, class _PtrL, class _RefR,\
    \ class _PtrR> typename std::_Deque_iterator<_Tp, _Ref, _Ptr>::difference_type\
    \ std::operator-(const std::_Deque_iterator<_Tp, _Ref, _Ptr>&, const std::_Deque_iterator<_Tp,\
    \ _RefR, _PtrR>&)\u2019\n  382 |     operator-(const _Deque_iterator<_Tp, _RefL,\
    \ _PtrL>& __x,\n      |     ^~~~~~~~\n/usr/include/c++/9/bits/stl_deque.h:382:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmpdkcuxhzb.cpp:27:40:\
    \ note:   \u2018std::vector<long int>\u2019 is not derived from \u2018const std::_Deque_iterator<_Tp,\
    \ _Ref, _Ptr>\u2019\n   27 |         if(max_elements[max_elements - 1] < arr[i])\
    \ {\n      |                                        ^\nIn file included from /usr/include/c++/9/vector:68,\n\
    \                 from /usr/include/c++/9/queue:61,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:86,\n\
    \                 from /tmp/tmpdkcuxhzb.cpp:2:\n/usr/include/c++/9/bits/stl_bvector.h:214:3:\
    \ note: candidate: \u2018std::ptrdiff_t std::operator-(const std::_Bit_iterator_base&,\
    \ const std::_Bit_iterator_base&)\u2019\n  214 |   operator-(const _Bit_iterator_base&\
    \ __x, const _Bit_iterator_base& __y)\n      |   ^~~~~~~~\n/usr/include/c++/9/bits/stl_bvector.h:214:39:\
    \ note:   no known conversion for argument 1 from \u2018std::vector<long int>\u2019\
    \ to \u2018const std::_Bit_iterator_base&\u2019\n  214 |   operator-(const _Bit_iterator_base&\
    \ __x, const _Bit_iterator_base& __y)\n      |             ~~~~~~~~~~~~~~~~~~~~~~~~~~^~~\n\
    In file included from /usr/include/c++/9/valarray:603,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:95,\n                 from\
    \ /tmp/tmpdkcuxhzb.cpp:2:\n/usr/include/c++/9/bits/valarray_after.h:406:5: note:\
    \ candidate: \u2018template<class _Dom1, class _Dom2> std::_Expr<std::__detail::_BinClos<std::__minus,\
    \ std::_Expr, std::_Expr, _Dom1, _Dom2>, typename std::__fun<std::__minus, typename\
    \ _Dom1::value_type>::result_type> std::operator-(const std::_Expr<_Dom1, typename\
    \ _Dom1::value_type>&, const std::_Expr<_Dom2, typename _Dom2::value_type>&)\u2019\
    \n  406 |     _DEFINE_EXPR_BINARY_OPERATOR(-, __minus)\n      |     ^~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /usr/include/c++/9/bits/valarray_after.h:406:5: note:   template argument deduction/substitution\
    \ failed:\n/tmp/tmpdkcuxhzb.cpp:27:40: note:   \u2018std::vector<long int>\u2019\
    \ is not derived from \u2018const std::_Expr<_Dom1, typename _Dom1::value_type>\u2019\
    \n   27 |         if(max_elements[max_elements - 1] < arr[i]) {\n      |     \
    \                                   ^\nIn file included from /usr/include/c++/9/valarray:603,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:95,\n\
    \                 from /tmp/tmpdkcuxhzb.cpp:2:\n/usr/include/c++/9/bits/valarray_after.h:406:5:\
    \ note: candidate: \u2018template<class _Dom> std::_Expr<std::__detail::_BinClos<std::__minus,\
    \ std::_Expr, std::_Constant, _Dom, typename _Dom::value_type>, typename std::__fun<std::__minus,\
    \ typename _Dom1::value_type>::result_type> std::operator-(const std::_Expr<_Dom1,\
    \ typename _Dom1::value_type>&, const typename _Dom::value_type&)\u2019\n  406\
    \ |     _DEFINE_EXPR_BINARY_OPERATOR(-, __minus)\n      |     ^~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /usr/include/c++/9/bits/valarray_after.h:406:5: note:   template argument deduction/substitution\
    \ failed:\n/tmp/tmpdkcuxhzb.cpp:27:40: note:   \u2018std::vector<long int>\u2019\
    \ is not derived from \u2018const std::_Expr<_Dom1, typename _Dom1::value_type>\u2019\
    \n   27 |         if(max_elements[max_elements - 1] < arr[i]) {\n      |     \
    \                                   ^\nIn file included from /usr/include/c++/9/valarray:603,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:95,\n\
    \                 from /tmp/tmpdkcuxhzb.cpp:2:\n/usr/include/c++/9/bits/valarray_after.h:406:5:\
    \ note: candidate: \u2018template<class _Dom> std::_Expr<std::__detail::_BinClos<std::__minus,\
    \ std::_Constant, std::_Expr, typename _Dom::value_type, _Dom>, typename std::__fun<std::__minus,\
    \ typename _Dom1::value_type>::result_type> std::operator-(const typename _Dom::value_type&,\
    \ const std::_Expr<_Dom1, typename _Dom1::value_type>&)\u2019\n  406 |     _DEFINE_EXPR_BINARY_OPERATOR(-,\
    \ __minus)\n      |     ^~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/usr/include/c++/9/bits/valarray_after.h:406:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmpdkcuxhzb.cpp:27:40:\
    \ note:   mismatched types \u2018const std::_Expr<_Dom1, typename _Dom1::value_type>\u2019\
    \ and \u2018int\u2019\n   27 |         if(max_elements[max_elements - 1] < arr[i])\
    \ {\n      |                                        ^\nIn file included from /usr/include/c++/9/valarray:603,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:95,\n\
    \                 from /tmp/tmpdkcuxhzb.cpp:2:\n/usr/include/c++/9/bits/valarray_after.h:406:5:\
    \ note: candidate: \u2018template<class _Dom> std::_Expr<std::__detail::_BinClos<std::__minus,\
    \ std::_Expr, std::_ValArray, _Dom, typename _Dom::value_type>, typename std::__fun<std::__minus,\
    \ typename _Dom1::value_type>::result_type> std::operator-(const std::_Expr<_Dom1,\
    \ typename _Dom1::value_type>&, const std::valarray<typename _Dom::value_type>&)\u2019\
    \n  406 |     _DEFINE_EXPR_BINARY_OPERATOR(-, __minus)\n      |     ^~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /usr/include/c++/9/bits/valarray_after.h:406:5: note:   template argument deduction/substitution\
    \ failed:\n/tmp/tmpdkcuxhzb.cpp:27:40: note:   \u2018std::vector<long int>\u2019\
    \ is not derived from \u2018const std::_Expr<_Dom1, typename _Dom1::value_type>\u2019\
    \n   27 |         if(max_elements[max_elements - 1] < arr[i]) {\n      |     \
    \                                   ^\nIn file included from /usr/include/c++/9/valarray:603,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:95,\n\
    \                 from /tmp/tmpdkcuxhzb.cpp:2:\n/usr/include/c++/9/bits/valarray_after.h:406:5:\
    \ note: candidate: \u2018template<class _Dom> std::_Expr<std::__detail::_BinClos<std::__minus,\
    \ std::_ValArray, std::_Expr, typename _Dom::value_type, _Dom>, typename std::__fun<std::__minus,\
    \ typename _Dom1::value_type>::result_type> std::operator-(const std::valarray<typename\
    \ _Dom::value_type>&, const std::_Expr<_Dom1, typename _Dom1::value_type>&)\u2019\
    \n  406 |     _DEFINE_EXPR_BINARY_OPERATOR(-, __minus)\n      |     ^~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /usr/include/c++/9/bits/valarray_after.h:406:5: note:   template argument deduction/substitution\
    \ failed:\n/tmp/tmpdkcuxhzb.cpp:27:40: note:   mismatched types \u2018const std::_Expr<_Dom1,\
    \ typename _Dom1::value_type>\u2019 and \u2018int\u2019\n   27 |         if(max_elements[max_elements\
    \ - 1] < arr[i]) {\n      |                                        ^\nIn file\
    \ included from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:95,\n      \
    \           from /tmp/tmpdkcuxhzb.cpp:2:\n/usr/include/c++/9/valarray:1186:1:\
    \ note: candidate: \u2018template<class _Tp> std::_Expr<std::__detail::_BinClos<std::__minus,\
    \ std::_ValArray, std::_ValArray, _Tp, _Tp>, typename std::__fun<std::__minus,\
    \ _Tp>::result_type> std::operator-(const std::valarray<_Tp>&, const std::valarray<_Tp>&)\u2019\
    \n 1186 | _DEFINE_BINARY_OPERATOR(-, __minus)\n      | ^~~~~~~~~~~~~~~~~~~~~~~\n\
    /usr/include/c++/9/valarray:1186:1: note:   template argument deduction/substitution\
    \ failed:\n/tmp/tmpdkcuxhzb.cpp:27:40: note:   \u2018std::vector<long int>\u2019\
    \ is not derived from \u2018const std::valarray<_Tp>\u2019\n   27 |         if(max_elements[max_elements\
    \ - 1] < arr[i]) {\n      |                                        ^\nIn file\
    \ included from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:95,\n      \
    \           from /tmp/tmpdkcuxhzb.cpp:2:\n/usr/include/c++/9/valarray:1186:1:\
    \ note: candidate: \u2018template<class _Tp> std::_Expr<std::__detail::_BinClos<std::__minus,\
    \ std::_ValArray, std::_Constant, _Tp, _Tp>, typename std::__fun<std::__minus,\
    \ _Tp>::result_type> std::operator-(const std::valarray<_Tp>&, const typename\
    \ std::valarray<_Tp>::value_type&)\u2019\n 1186 | _DEFINE_BINARY_OPERATOR(-, __minus)\n\
    \      | ^~~~~~~~~~~~~~~~~~~~~~~\n/usr/include/c++/9/valarray:1186:1: note:  \
    \ template argument deduction/substitution failed:\n/tmp/tmpdkcuxhzb.cpp:27:40:\
    \ note:   \u2018std::vector<long int>\u2019 is not derived from \u2018const std::valarray<_Tp>\u2019\
    \n   27 |         if(max_elements[max_elements - 1] < arr[i]) {\n      |     \
    \                                   ^\nIn file included from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:95,\n\
    \                 from /tmp/tmpdkcuxhzb.cpp:2:\n/usr/include/c++/9/valarray:1186:1:\
    \ note: candidate: \u2018template<class _Tp> std::_Expr<std::__detail::_BinClos<std::__minus,\
    \ std::_Constant, std::_ValArray, _Tp, _Tp>, typename std::__fun<std::__minus,\
    \ _Tp>::result_type> std::operator-(const typename std::valarray<_Tp>::value_type&,\
    \ const std::valarray<_Tp>&)\u2019\n 1186 | _DEFINE_BINARY_OPERATOR(-, __minus)\n\
    \      | ^~~~~~~~~~~~~~~~~~~~~~~\n/usr/include/c++/9/valarray:1186:1: note:  \
    \ template argument deduction/substitution failed:\n/tmp/tmpdkcuxhzb.cpp:27:40:\
    \ note:   mismatched types \u2018const std::valarray<_Tp>\u2019 and \u2018int\u2019\
    \n   27 |         if(max_elements[max_elements - 1] < arr[i]) {\n      |     \
    \                                   ^\nIn file included from /usr/include/c++/9/bits/stl_algobase.h:67,\n\
    \                 from /usr/include/c++/9/bits/char_traits.h:39,\n           \
    \      from /usr/include/c++/9/ios:40,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmpdkcuxhzb.cpp:2:\n/usr/include/c++/9/bits/stl_iterator.h:974:5: note:\
    \ candidate: \u2018template<class _IteratorL, class _IteratorR, class _Container>\
    \ decltype ((__lhs.base() - __rhs.base())) __gnu_cxx::operator-(const __gnu_cxx::__normal_iterator<_IteratorL,\
    \ _Container>&, const __gnu_cxx::__normal_iterator<_IteratorR, _Container>&)\u2019\
    \n  974 |     operator-(const __normal_iterator<_IteratorL, _Container>& __lhs,\n\
    \      |     ^~~~~~~~\n/usr/include/c++/9/bits/stl_iterator.h:974:5: note:   template\
    \ argument deduction/substitution failed:\n/tmp/tmpdkcuxhzb.cpp:27:40: note: \
    \  \u2018std::vector<long int>\u2019 is not derived from \u2018const __gnu_cxx::__normal_iterator<_IteratorL,\
    \ _Container>\u2019\n   27 |         if(max_elements[max_elements - 1] < arr[i])\
    \ {\n      |                                        ^\nIn file included from /usr/include/c++/9/bits/stl_algobase.h:67,\n\
    \                 from /usr/include/c++/9/bits/char_traits.h:39,\n           \
    \      from /usr/include/c++/9/ios:40,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmpdkcuxhzb.cpp:2:\n/usr/include/c++/9/bits/stl_iterator.h:986:5: note:\
    \ candidate: \u2018template<class _Iterator, class _Container> typename __gnu_cxx::__normal_iterator<_Iterator,\
    \ _Container>::difference_type __gnu_cxx::operator-(const __gnu_cxx::__normal_iterator<_Iterator,\
    \ _Container>&, const __gnu_cxx::__normal_iterator<_Iterator, _Container>&)\u2019\
    \n  986 |     operator-(const __normal_iterator<_Iterator, _Container>& __lhs,\n\
    \      |     ^~~~~~~~\n/usr/include/c++/9/bits/stl_iterator.h:986:5: note:   template\
    \ argument deduction/substitution failed:\n/tmp/tmpdkcuxhzb.cpp:27:40: note: \
    \  \u2018std::vector<long int>\u2019 is not derived from \u2018const __gnu_cxx::__normal_iterator<_Iterator,\
    \ _Container>\u2019\n   27 |         if(max_elements[max_elements - 1] < arr[i])\
    \ {\n      |                                        ^\n/tmp/tmpdkcuxhzb.cpp:28:39:\
    \ error: no match for \u2018operator-\u2019 (operand types are \u2018std::vector<long\
    \ int>\u2019 and \u2018int\u2019)\n   28 |             max_elements[max_elements\
    \ - 1] = arr[i];\n      |                          ~~~~~~~~~~~~ ^ ~\n      | \
    \                         |              |\n      |                          |\
    \              int\n      |                          std::vector<long int>\nIn\
    \ file included from /usr/include/c++/9/bits/stl_algobase.h:67,\n            \
    \     from /usr/include/c++/9/bits/char_traits.h:39,\n                 from /usr/include/c++/9/ios:40,\n\
    \                 from /usr/include/c++/9/istream:38,\n                 from /usr/include/c++/9/sstream:38,\n\
    \                 from /usr/include/c++/9/complex:45,\n                 from /usr/include/c++/9/ccomplex:39,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n\
    \                 from /tmp/tmpdkcuxhzb.cpp:2:\n/usr/include/c++/9/bits/stl_iterator.h:415:5:\
    \ note: candidate: \u2018template<class _IteratorL, class _IteratorR> decltype\
    \ ((__y.base() - __x.base())) std::operator-(const std::reverse_iterator<_Iterator>&,\
    \ const std::reverse_iterator<_IteratorR>&)\u2019\n  415 |     operator-(const\
    \ reverse_iterator<_IteratorL>& __x,\n      |     ^~~~~~~~\n/usr/include/c++/9/bits/stl_iterator.h:415:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmpdkcuxhzb.cpp:28:41:\
    \ note:   \u2018std::vector<long int>\u2019 is not derived from \u2018const std::reverse_iterator<_Iterator>\u2019\
    \n   28 |             max_elements[max_elements - 1] = arr[i];\n      |      \
    \                                   ^\nIn file included from /usr/include/c++/9/bits/stl_algobase.h:67,\n\
    \                 from /usr/include/c++/9/bits/char_traits.h:39,\n           \
    \      from /usr/include/c++/9/ios:40,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmpdkcuxhzb.cpp:2:\n/usr/include/c++/9/bits/stl_iterator.h:1209:5: note:\
    \ candidate: \u2018template<class _IteratorL, class _IteratorR> decltype ((__x.base()\
    \ - __y.base())) std::operator-(const std::move_iterator<_IteratorL>&, const std::move_iterator<_IteratorR>&)\u2019\
    \n 1209 |     operator-(const move_iterator<_IteratorL>& __x,\n      |     ^~~~~~~~\n\
    /usr/include/c++/9/bits/stl_iterator.h:1209:5: note:   template argument deduction/substitution\
    \ failed:\n/tmp/tmpdkcuxhzb.cpp:28:41: note:   \u2018std::vector<long int>\u2019\
    \ is not derived from \u2018const std::move_iterator<_IteratorL>\u2019\n   28\
    \ |             max_elements[max_elements - 1] = arr[i];\n      |            \
    \                             ^\nIn file included from /usr/include/c++/9/ccomplex:39,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n\
    \                 from /tmp/tmpdkcuxhzb.cpp:2:\n/usr/include/c++/9/complex:361:5:\
    \ note: candidate: \u2018template<class _Tp> std::complex<_Tp> std::operator-(const\
    \ std::complex<_Tp>&, const std::complex<_Tp>&)\u2019\n  361 |     operator-(const\
    \ complex<_Tp>& __x, const complex<_Tp>& __y)\n      |     ^~~~~~~~\n/usr/include/c++/9/complex:361:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmpdkcuxhzb.cpp:28:41:\
    \ note:   \u2018std::vector<long int>\u2019 is not derived from \u2018const std::complex<_Tp>\u2019\
    \n   28 |             max_elements[max_elements - 1] = arr[i];\n      |      \
    \                                   ^\nIn file included from /usr/include/c++/9/ccomplex:39,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n\
    \                 from /tmp/tmpdkcuxhzb.cpp:2:\n/usr/include/c++/9/complex:370:5:\
    \ note: candidate: \u2018template<class _Tp> std::complex<_Tp> std::operator-(const\
    \ std::complex<_Tp>&, const _Tp&)\u2019\n  370 |     operator-(const complex<_Tp>&\
    \ __x, const _Tp& __y)\n      |     ^~~~~~~~\n/usr/include/c++/9/complex:370:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmpdkcuxhzb.cpp:28:41:\
    \ note:   \u2018std::vector<long int>\u2019 is not derived from \u2018const std::complex<_Tp>\u2019\
    \n   28 |             max_elements[max_elements - 1] = arr[i];\n      |      \
    \                                   ^\nIn file included from /usr/include/c++/9/ccomplex:39,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n\
    \                 from /tmp/tmpdkcuxhzb.cpp:2:\n/usr/include/c++/9/complex:379:5:\
    \ note: candidate: \u2018template<class _Tp> std::complex<_Tp> std::operator-(const\
    \ _Tp&, const std::complex<_Tp>&)\u2019\n  379 |     operator-(const _Tp& __x,\
    \ const complex<_Tp>& __y)\n      |     ^~~~~~~~\n/usr/include/c++/9/complex:379:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmpdkcuxhzb.cpp:28:41:\
    \ note:   mismatched types \u2018const std::complex<_Tp>\u2019 and \u2018int\u2019\
    \n   28 |             max_elements[max_elements - 1] = arr[i];\n      |      \
    \                                   ^\nIn file included from /usr/include/c++/9/ccomplex:39,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n\
    \                 from /tmp/tmpdkcuxhzb.cpp:2:\n/usr/include/c++/9/complex:456:5:\
    \ note: candidate: \u2018template<class _Tp> std::complex<_Tp> std::operator-(const\
    \ std::complex<_Tp>&)\u2019\n  456 |     operator-(const complex<_Tp>& __x)\n\
    \      |     ^~~~~~~~\n/usr/include/c++/9/complex:456:5: note:   template argument\
    \ deduction/substitution failed:\n/tmp/tmpdkcuxhzb.cpp:28:41: note:   \u2018std::vector<long\
    \ int>\u2019 is not derived from \u2018const std::complex<_Tp>\u2019\n   28 |\
    \             max_elements[max_elements - 1] = arr[i];\n      |              \
    \                           ^\nIn file included from /usr/include/c++/9/deque:67,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:68,\n\
    \                 from /tmp/tmpdkcuxhzb.cpp:2:\n/usr/include/c++/9/bits/stl_deque.h:370:5:\
    \ note: candidate: \u2018template<class _Tp, class _Ref, class _Ptr> typename\
    \ std::_Deque_iterator<_Tp, _Ref, _Ptr>::difference_type std::operator-(const\
    \ std::_Deque_iterator<_Tp, _Ref, _Ptr>&, const std::_Deque_iterator<_Tp, _Ref,\
    \ _Ptr>&)\u2019\n  370 |     operator-(const _Deque_iterator<_Tp, _Ref, _Ptr>&\
    \ __x,\n      |     ^~~~~~~~\n/usr/include/c++/9/bits/stl_deque.h:370:5: note:\
    \   template argument deduction/substitution failed:\n/tmp/tmpdkcuxhzb.cpp:28:41:\
    \ note:   \u2018std::vector<long int>\u2019 is not derived from \u2018const std::_Deque_iterator<_Tp,\
    \ _Ref, _Ptr>\u2019\n   28 |             max_elements[max_elements - 1] = arr[i];\n\
    \      |                                         ^\nIn file included from /usr/include/c++/9/deque:67,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:68,\n\
    \                 from /tmp/tmpdkcuxhzb.cpp:2:\n/usr/include/c++/9/bits/stl_deque.h:382:5:\
    \ note: candidate: \u2018template<class _Tp, class _RefL, class _PtrL, class _RefR,\
    \ class _PtrR> typename std::_Deque_iterator<_Tp, _Ref, _Ptr>::difference_type\
    \ std::operator-(const std::_Deque_iterator<_Tp, _Ref, _Ptr>&, const std::_Deque_iterator<_Tp,\
    \ _RefR, _PtrR>&)\u2019\n  382 |     operator-(const _Deque_iterator<_Tp, _RefL,\
    \ _PtrL>& __x,\n      |     ^~~~~~~~\n/usr/include/c++/9/bits/stl_deque.h:382:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmpdkcuxhzb.cpp:28:41:\
    \ note:   \u2018std::vector<long int>\u2019 is not derived from \u2018const std::_Deque_iterator<_Tp,\
    \ _Ref, _Ptr>\u2019\n   28 |             max_elements[max_elements - 1] = arr[i];\n\
    \      |                                         ^\nIn file included from /usr/include/c++/9/vector:68,\n\
    \                 from /usr/include/c++/9/queue:61,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:86,\n\
    \                 from /tmp/tmpdkcuxhzb.cpp:2:\n/usr/include/c++/9/bits/stl_bvector.h:214:3:\
    \ note: candidate: \u2018std::ptrdiff_t std::operator-(const std::_Bit_iterator_base&,\
    \ const std::_Bit_iterator_base&)\u2019\n  214 |   operator-(const _Bit_iterator_base&\
    \ __x, const _Bit_iterator_base& __y)\n      |   ^~~~~~~~\n/usr/include/c++/9/bits/stl_bvector.h:214:39:\
    \ note:   no known conversion for argument 1 from \u2018std::vector<long int>\u2019\
    \ to \u2018const std::_Bit_iterator_base&\u2019\n  214 |   operator-(const _Bit_iterator_base&\
    \ __x, const _Bit_iterator_base& __y)\n      |             ~~~~~~~~~~~~~~~~~~~~~~~~~~^~~\n\
    In file included from /usr/include/c++/9/valarray:603,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:95,\n                 from\
    \ /tmp/tmpdkcuxhzb.cpp:2:\n/usr/include/c++/9/bits/valarray_after.h:406:5: note:\
    \ candidate: \u2018template<class _Dom1, class _Dom2> std::_Expr<std::__detail::_BinClos<std::__minus,\
    \ std::_Expr, std::_Expr, _Dom1, _Dom2>, typename std::__fun<std::__minus, typename\
    \ _Dom1::value_type>::result_type> std::operator-(const std::_Expr<_Dom1, typename\
    \ _Dom1::value_type>&, const std::_Expr<_Dom2, typename _Dom2::value_type>&)\u2019\
    \n  406 |     _DEFINE_EXPR_BINARY_OPERATOR(-, __minus)\n      |     ^~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /usr/include/c++/9/bits/valarray_after.h:406:5: note:   template argument deduction/substitution\
    \ failed:\n/tmp/tmpdkcuxhzb.cpp:28:41: note:   \u2018std::vector<long int>\u2019\
    \ is not derived from \u2018const std::_Expr<_Dom1, typename _Dom1::value_type>\u2019\
    \n   28 |             max_elements[max_elements - 1] = arr[i];\n      |      \
    \                                   ^\nIn file included from /usr/include/c++/9/valarray:603,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:95,\n\
    \                 from /tmp/tmpdkcuxhzb.cpp:2:\n/usr/include/c++/9/bits/valarray_after.h:406:5:\
    \ note: candidate: \u2018template<class _Dom> std::_Expr<std::__detail::_BinClos<std::__minus,\
    \ std::_Expr, std::_Constant, _Dom, typename _Dom::value_type>, typename std::__fun<std::__minus,\
    \ typename _Dom1::value_type>::result_type> std::operator-(const std::_Expr<_Dom1,\
    \ typename _Dom1::value_type>&, const typename _Dom::value_type&)\u2019\n  406\
    \ |     _DEFINE_EXPR_BINARY_OPERATOR(-, __minus)\n      |     ^~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /usr/include/c++/9/bits/valarray_after.h:406:5: note:   template argument deduction/substitution\
    \ failed:\n/tmp/tmpdkcuxhzb.cpp:28:41: note:   \u2018std::vector<long int>\u2019\
    \ is not derived from \u2018const std::_Expr<_Dom1, typename _Dom1::value_type>\u2019\
    \n   28 |             max_elements[max_elements - 1] = arr[i];\n      |      \
    \                                   ^\nIn file included from /usr/include/c++/9/valarray:603,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:95,\n\
    \                 from /tmp/tmpdkcuxhzb.cpp:2:\n/usr/include/c++/9/bits/valarray_after.h:406:5:\
    \ note: candidate: \u2018template<class _Dom> std::_Expr<std::__detail::_BinClos<std::__minus,\
    \ std::_Constant, std::_Expr, typename _Dom::value_type, _Dom>, typename std::__fun<std::__minus,\
    \ typename _Dom1::value_type>::result_type> std::operator-(const typename _Dom::value_type&,\
    \ const std::_Expr<_Dom1, typename _Dom1::value_type>&)\u2019\n  406 |     _DEFINE_EXPR_BINARY_OPERATOR(-,\
    \ __minus)\n      |     ^~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/usr/include/c++/9/bits/valarray_after.h:406:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmpdkcuxhzb.cpp:28:41:\
    \ note:   mismatched types \u2018const std::_Expr<_Dom1, typename _Dom1::value_type>\u2019\
    \ and \u2018int\u2019\n   28 |             max_elements[max_elements - 1] = arr[i];\n\
    \      |                                         ^\nIn file included from /usr/include/c++/9/valarray:603,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:95,\n\
    \                 from /tmp/tmpdkcuxhzb.cpp:2:\n/usr/include/c++/9/bits/valarray_after.h:406:5:\
    \ note: candidate: \u2018template<class _Dom> std::_Expr<std::__detail::_BinClos<std::__minus,\
    \ std::_Expr, std::_ValArray, _Dom, typename _Dom::value_type>, typename std::__fun<std::__minus,\
    \ typename _Dom1::value_type>::result_type> std::operator-(const std::_Expr<_Dom1,\
    \ typename _Dom1::value_type>&, const std::valarray<typename _Dom::value_type>&)\u2019\
    \n  406 |     _DEFINE_EXPR_BINARY_OPERATOR(-, __minus)\n      |     ^~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /usr/include/c++/9/bits/valarray_after.h:406:5: note:   template argument deduction/substitution\
    \ failed:\n/tmp/tmpdkcuxhzb.cpp:28:41: note:   \u2018std::vector<long int>\u2019\
    \ is not derived from \u2018const std::_Expr<_Dom1, typename _Dom1::value_type>\u2019\
    \n   28 |             max_elements[max_elements - 1] = arr[i];\n      |      \
    \                                   ^\nIn file included from /usr/include/c++/9/valarray:603,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:95,\n\
    \                 from /tmp/tmpdkcuxhzb.cpp:2:\n/usr/include/c++/9/bits/valarray_after.h:406:5:\
    \ note: candidate: \u2018template<class _Dom> std::_Expr<std::__detail::_BinClos<std::__minus,\
    \ std::_ValArray, std::_Expr, typename _Dom::value_type, _Dom>, typename std::__fun<std::__minus,\
    \ typename _Dom1::value_type>::result_type> std::operator-(const std::valarray<typename\
    \ _Dom::value_type>&, const std::_Expr<_Dom1, typename _Dom1::value_type>&)\u2019\
    \n  406 |     _DEFINE_EXPR_BINARY_OPERATOR(-, __minus)\n      |     ^~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /usr/include/c++/9/bits/valarray_after.h:406:5: note:   template argument deduction/substitution\
    \ failed:\n/tmp/tmpdkcuxhzb.cpp:28:41: note:   mismatched types \u2018const std::_Expr<_Dom1,\
    \ typename _Dom1::value_type>\u2019 and \u2018int\u2019\n   28 |             max_elements[max_elements\
    \ - 1] = arr[i];\n      |                                         ^\nIn file included\
    \ from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:95,\n               \
    \  from /tmp/tmpdkcuxhzb.cpp:2:\n/usr/include/c++/9/valarray:1186:1: note: candidate:\
    \ \u2018template<class _Tp> std::_Expr<std::__detail::_BinClos<std::__minus, std::_ValArray,\
    \ std::_ValArray, _Tp, _Tp>, typename std::__fun<std::__minus, _Tp>::result_type>\
    \ std::operator-(const std::valarray<_Tp>&, const std::valarray<_Tp>&)\u2019\n\
    \ 1186 | _DEFINE_BINARY_OPERATOR(-, __minus)\n      | ^~~~~~~~~~~~~~~~~~~~~~~\n\
    /usr/include/c++/9/valarray:1186:1: note:   template argument deduction/substitution\
    \ failed:\n/tmp/tmpdkcuxhzb.cpp:28:41: note:   \u2018std::vector<long int>\u2019\
    \ is not derived from \u2018const std::valarray<_Tp>\u2019\n   28 |          \
    \   max_elements[max_elements - 1] = arr[i];\n      |                        \
    \                 ^\nIn file included from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:95,\n\
    \                 from /tmp/tmpdkcuxhzb.cpp:2:\n/usr/include/c++/9/valarray:1186:1:\
    \ note: candidate: \u2018template<class _Tp> std::_Expr<std::__detail::_BinClos<std::__minus,\
    \ std::_ValArray, std::_Constant, _Tp, _Tp>, typename std::__fun<std::__minus,\
    \ _Tp>::result_type> std::operator-(const std::valarray<_Tp>&, const typename\
    \ std::valarray<_Tp>::value_type&)\u2019\n 1186 | _DEFINE_BINARY_OPERATOR(-, __minus)\n\
    \      | ^~~~~~~~~~~~~~~~~~~~~~~\n/usr/include/c++/9/valarray:1186:1: note:  \
    \ template argument deduction/substitution failed:\n/tmp/tmpdkcuxhzb.cpp:28:41:\
    \ note:   \u2018std::vector<long int>\u2019 is not derived from \u2018const std::valarray<_Tp>\u2019\
    \n   28 |             max_elements[max_elements - 1] = arr[i];\n      |      \
    \                                   ^\nIn file included from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:95,\n\
    \                 from /tmp/tmpdkcuxhzb.cpp:2:\n/usr/include/c++/9/valarray:1186:1:\
    \ note: candidate: \u2018template<class _Tp> std::_Expr<std::__detail::_BinClos<std::__minus,\
    \ std::_Constant, std::_ValArray, _Tp, _Tp>, typename std::__fun<std::__minus,\
    \ _Tp>::result_type> std::operator-(const typename std::valarray<_Tp>::value_type&,\
    \ const std::valarray<_Tp>&)\u2019\n 1186 | _DEFINE_BINARY_OPERATOR(-, __minus)\n\
    \      | ^~~~~~~~~~~~~~~~~~~~~~~\n/usr/include/c++/9/valarray:1186:1: note:  \
    \ template argument deduction/substitution failed:\n/tmp/tmpdkcuxhzb.cpp:28:41:\
    \ note:   mismatched types \u2018const std::valarray<_Tp>\u2019 and \u2018int\u2019\
    \n   28 |             max_elements[max_elements - 1] = arr[i];\n      |      \
    \                                   ^\nIn file included from /usr/include/c++/9/bits/stl_algobase.h:67,\n\
    \                 from /usr/include/c++/9/bits/char_traits.h:39,\n           \
    \      from /usr/include/c++/9/ios:40,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmpdkcuxhzb.cpp:2:\n/usr/include/c++/9/bits/stl_iterator.h:974:5: note:\
    \ candidate: \u2018template<class _IteratorL, class _IteratorR, class _Container>\
    \ decltype ((__lhs.base() - __rhs.base())) __gnu_cxx::operator-(const __gnu_cxx::__normal_iterator<_IteratorL,\
    \ _Container>&, const __gnu_cxx::__normal_iterator<_IteratorR, _Container>&)\u2019\
    \n  974 |     operator-(const __normal_iterator<_IteratorL, _Container>& __lhs,\n\
    \      |     ^~~~~~~~\n/usr/include/c++/9/bits/stl_iterator.h:974:5: note:   template\
    \ argument deduction/substitution failed:\n/tmp/tmpdkcuxhzb.cpp:28:41: note: \
    \  \u2018std::vector<long int>\u2019 is not derived from \u2018const __gnu_cxx::__normal_iterator<_IteratorL,\
    \ _Container>\u2019\n   28 |             max_elements[max_elements - 1] = arr[i];\n\
    \      |                                         ^\nIn file included from /usr/include/c++/9/bits/stl_algobase.h:67,\n\
    \                 from /usr/include/c++/9/bits/char_traits.h:39,\n           \
    \      from /usr/include/c++/9/ios:40,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmpdkcuxhzb.cpp:2:\n/usr/include/c++/9/bits/stl_iterator.h:986:5: note:\
    \ candidate: \u2018template<class _Iterator, class _Container> typename __gnu_cxx::__normal_iterator<_Iterator,\
    \ _Container>::difference_type __gnu_cxx::operator-(const __gnu_cxx::__normal_iterator<_Iterator,\
    \ _Container>&, const __gnu_cxx::__normal_iterator<_Iterator, _Container>&)\u2019\
    \n  986 |     operator-(const __normal_iterator<_Iterator, _Container>& __lhs,\n\
    \      |     ^~~~~~~~\n/usr/include/c++/9/bits/stl_iterator.h:986:5: note:   template\
    \ argument deduction/substitution failed:\n/tmp/tmpdkcuxhzb.cpp:28:41: note: \
    \  \u2018std::vector<long int>\u2019 is not derived from \u2018const __gnu_cxx::__normal_iterator<_Iterator,\
    \ _Container>\u2019\n   28 |             max_elements[max_elements - 1] = arr[i];\n\
    \      |                                         ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n    std::vector<long> ans;\n    long max = 0;\n    long min\
    \ = 0;\n    long sum = 0;\n    long count = 0;\n    for (long i = 0; i < arr.size();\
    \ i++) {\n        sum += arr[i];\n        if (sum > max) {\n            max =\
    \ sum;\n            ans.clear();\n            ans.push_back(i);\n        } else\
    \ if (sum < min) {\n            min = sum;\n            ans.clear();\n       \
    \     ans.push_back(i);\n        } else if (sum == max) {\n            ans.push_back(i);\n\
    \        }\n    }\n    if (k == ans.size()) {\n        return ans;\n    }\n  \
    \  long mid = ans.size() / 2;\n    ans.erase(ans.begin() + mid);\n    ans.insert(ans.begin(),\
    \ ans.begin() + mid);\n    ans.insert(ans.begin() + mid, ans.begin() + k);\n \
    \   return ans;\n}\nint main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({-3,\
    \ -4, 5})), (3)) == (std::vector<long>({-4, -3, 5})));\n    assert(candidate((std::vector<long>({4,\
    \ -4, 4})), (2)) == (std::vector<long>({4, 4})));\n    assert(candidate((std::vector<long>({-3,\
    \ 2, 1, 2, -1, -2, 1})), (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpenqwv6kf.cpp: In function \u2018std::vector<long int> maximum(std::vector<long\
    \ int>, long int)\u2019:\n/tmp/tmpenqwv6kf.cpp:43:46: error: no matching function\
    \ for call to \u2018std::vector<long int>::insert(std::vector<long int>::iterator,\
    \ __gnu_cxx::__normal_iterator<long int*, std::vector<long int> >)\u2019\n   43\
    \ |     ans.insert(ans.begin(), ans.begin() + mid);\n      |                 \
    \                             ^\nIn file included from /usr/include/c++/9/vector:72,\n\
    \                 from /usr/include/c++/9/queue:61,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:86,\n\
    \                 from /tmp/tmpenqwv6kf.cpp:2:\n/usr/include/c++/9/bits/vector.tcc:130:5:\
    \ note: candidate: \u2018std::vector<_Tp, _Alloc>::iterator std::vector<_Tp, _Alloc>::insert(std::vector<_Tp,\
    \ _Alloc>::const_iterator, const value_type&) [with _Tp = long int; _Alloc = std::allocator<long\
    \ int>; std::vector<_Tp, _Alloc>::iterator = __gnu_cxx::__normal_iterator<long\
    \ int*, std::vector<long int> >; typename std::_Vector_base<_Tp, _Alloc>::pointer\
    \ = long int*; std::vector<_Tp, _Alloc>::const_iterator = __gnu_cxx::__normal_iterator<const\
    \ long int*, std::vector<long int> >; typename __gnu_cxx::__alloc_traits<typename\
    \ std::_Vector_base<_Tp, _Alloc>::_Tp_alloc_type>::const_pointer = const long\
    \ int*; std::vector<_Tp, _Alloc>::value_type = long int]\u2019\n  130 |     vector<_Tp,\
    \ _Alloc>::\n      |     ^~~~~~~~~~~~~~~~~~~\n/usr/include/c++/9/bits/vector.tcc:132:57:\
    \ note:   no known conversion for argument 2 from \u2018__gnu_cxx::__normal_iterator<long\
    \ int*, std::vector<long int> >\u2019 to \u2018const value_type&\u2019 {aka \u2018\
    const long int&\u2019}\n  132 |     insert(const_iterator __position, const value_type&\
    \ __x)\n      |                                       ~~~~~~~~~~~~~~~~~~^~~\n\
    In file included from /usr/include/c++/9/vector:67,\n                 from /usr/include/c++/9/queue:61,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:86,\n\
    \                 from /tmp/tmpenqwv6kf.cpp:2:\n/usr/include/c++/9/bits/stl_vector.h:1290:7:\
    \ note: candidate: \u2018std::vector<_Tp, _Alloc>::iterator std::vector<_Tp, _Alloc>::insert(std::vector<_Tp,\
    \ _Alloc>::const_iterator, std::vector<_Tp, _Alloc>::value_type&&) [with _Tp =\
    \ long int; _Alloc = std::allocator<long int>; std::vector<_Tp, _Alloc>::iterator\
    \ = __gnu_cxx::__normal_iterator<long int*, std::vector<long int> >; typename\
    \ std::_Vector_base<_Tp, _Alloc>::pointer = long int*; std::vector<_Tp, _Alloc>::const_iterator\
    \ = __gnu_cxx::__normal_iterator<const long int*, std::vector<long int> >; typename\
    \ __gnu_cxx::__alloc_traits<typename std::_Vector_base<_Tp, _Alloc>::_Tp_alloc_type>::const_pointer\
    \ = const long int*; std::vector<_Tp, _Alloc>::value_type = long int]\u2019\n\
    \ 1290 |       insert(const_iterator __position, value_type&& __x)\n      |  \
    \     ^~~~~~\n/usr/include/c++/9/bits/stl_vector.h:1290:54: note:   no known conversion\
    \ for argument 2 from \u2018__gnu_cxx::__normal_iterator<long int*, std::vector<long\
    \ int> >\u2019 to \u2018std::vector<long int>::value_type&&\u2019 {aka \u2018\
    long int&&\u2019}\n 1290 |       insert(const_iterator __position, value_type&&\
    \ __x)\n      |                                         ~~~~~~~~~~~~~^~~\n/usr/include/c++/9/bits/stl_vector.h:1307:7:\
    \ note: candidate: \u2018std::vector<_Tp, _Alloc>::iterator std::vector<_Tp, _Alloc>::insert(std::vector<_Tp,\
    \ _Alloc>::const_iterator, std::initializer_list<_Tp>) [with _Tp = long int; _Alloc\
    \ = std::allocator<long int>; std::vector<_Tp, _Alloc>::iterator = __gnu_cxx::__normal_iterator<long\
    \ int*, std::vector<long int> >; typename std::_Vector_base<_Tp, _Alloc>::pointer\
    \ = long int*; std::vector<_Tp, _Alloc>::const_iterator = __gnu_cxx::__normal_iterator<const\
    \ long int*, std::vector<long int> >; typename __gnu_cxx::__alloc_traits<typename\
    \ std::_Vector_base<_Tp, _Alloc>::_Tp_alloc_type>::const_pointer = const long\
    \ int*]\u2019\n 1307 |       insert(const_iterator __position, initializer_list<value_type>\
    \ __l)\n      |       ^~~~~~\n/usr/include/c++/9/bits/stl_vector.h:1307:70: note:\
    \   no known conversion for argument 2 from \u2018__gnu_cxx::__normal_iterator<long\
    \ int*, std::vector<long int> >\u2019 to \u2018std::initializer_list<long int>\u2019\
    \n 1307 |       insert(const_iterator __position, initializer_list<value_type>\
    \ __l)\n      |                                         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~\n\
    /usr/include/c++/9/bits/stl_vector.h:1332:7: note: candidate: \u2018std::vector<_Tp,\
    \ _Alloc>::iterator std::vector<_Tp, _Alloc>::insert(std::vector<_Tp, _Alloc>::const_iterator,\
    \ std::vector<_Tp, _Alloc>::size_type, const value_type&) [with _Tp = long int;\
    \ _Alloc = std::allocator<long int>; std::vector<_Tp, _Alloc>::iterator = __gnu_cxx::__normal_iterator<long\
    \ int*, std::vector<long int> >; typename std::_Vector_base<_Tp, _Alloc>::pointer\
    \ = long int*; std::vector<_Tp, _Alloc>::const_iterator = __gnu_cxx::__normal_iterator<const\
    \ long int*, std::vector<long int> >; typename __gnu_cxx::__alloc_traits<typename\
    \ std::_Vector_base<_Tp, _Alloc>::_Tp_alloc_type>::const_pointer = const long\
    \ int*; std::vector<_Tp, _Alloc>::size_type = long unsigned int; std::vector<_Tp,\
    \ _Alloc>::value_type = long int]\u2019\n 1332 |       insert(const_iterator __position,\
    \ size_type __n, const value_type& __x)\n      |       ^~~~~~\n/usr/include/c++/9/bits/stl_vector.h:1332:7:\
    \ note:   candidate expects 3 arguments, 2 provided\n/usr/include/c++/9/bits/stl_vector.h:1376:2:\
    \ note: candidate: \u2018template<class _InputIterator, class> std::vector<_Tp,\
    \ _Alloc>::iterator std::vector<_Tp, _Alloc>::insert(std::vector<_Tp, _Alloc>::const_iterator,\
    \ _InputIterator, _InputIterator) [with _InputIterator = _InputIterator; <template-parameter-2-2>\
    \ = <template-parameter-1-2>; _Tp = long int; _Alloc = std::allocator<long int>]\u2019\
    \n 1376 |  insert(const_iterator __position, _InputIterator __first,\n      |\
    \  ^~~~~~\n/usr/include/c++/9/bits/stl_vector.h:1376:2: note:   template argument\
    \ deduction/substitution failed:\n/tmp/tmpenqwv6kf.cpp:43:46: note:   candidate\
    \ expects 3 arguments, 2 provided\n   43 |     ans.insert(ans.begin(), ans.begin()\
    \ + mid);\n      |                                              ^\n/tmp/tmpenqwv6kf.cpp:44:50:\
    \ error: no matching function for call to \u2018std::vector<long int>::insert(__gnu_cxx::__normal_iterator<long\
    \ int*, std::vector<long int> >, __gnu_cxx::__normal_iterator<long int*, std::vector<long\
    \ int> >)\u2019\n   44 |     ans.insert(ans.begin() + mid, ans.begin() + k);\n\
    \      |                                                  ^\nIn file included\
    \ from /usr/include/c++/9/vector:72,\n                 from /usr/include/c++/9/queue:61,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:86,\n\
    \                 from /tmp/tmpenqwv6kf.cpp:2:\n/usr/include/c++/9/bits/vector.tcc:130:5:\
    \ note: candidate: \u2018std::vector<_Tp, _Alloc>::iterator std::vector<_Tp, _Alloc>::insert(std::vector<_Tp,\
    \ _Alloc>::const_iterator, const value_type&) [with _Tp = long int; _Alloc = std::allocator<long\
    \ int>; std::vector<_Tp, _Alloc>::iterator = __gnu_cxx::__normal_iterator<long\
    \ int*, std::vector<long int> >; typename std::_Vector_base<_Tp, _Alloc>::pointer\
    \ = long int*; std::vector<_Tp, _Alloc>::const_iterator = __gnu_cxx::__normal_iterator<const\
    \ long int*, std::vector<long int> >; typename __gnu_cxx::__alloc_traits<typename\
    \ std::_Vector_base<_Tp, _Alloc>::_Tp_alloc_type>::const_pointer = const long\
    \ int*; std::vector<_Tp, _Alloc>::value_type = long int]\u2019\n  130 |     vector<_Tp,\
    \ _Alloc>::\n      |     ^~~~~~~~~~~~~~~~~~~\n/usr/include/c++/9/bits/vector.tcc:132:57:\
    \ note:   no known conversion for argument 2 from \u2018__gnu_cxx::__normal_iterator<long\
    \ int*, std::vector<long int> >\u2019 to \u2018const value_type&\u2019 {aka \u2018\
    const long int&\u2019}\n  132 |     insert(const_iterator __position, const value_type&\
    \ __x)\n      |                                       ~~~~~~~~~~~~~~~~~~^~~\n\
    In file included from /usr/include/c++/9/vector:67,\n                 from /usr/include/c++/9/queue:61,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:86,\n\
    \                 from /tmp/tmpenqwv6kf.cpp:2:\n/usr/include/c++/9/bits/stl_vector.h:1290:7:\
    \ note: candidate: \u2018std::vector<_Tp, _Alloc>::iterator std::vector<_Tp, _Alloc>::insert(std::vector<_Tp,\
    \ _Alloc>::const_iterator, std::vector<_Tp, _Alloc>::value_type&&) [with _Tp =\
    \ long int; _Alloc = std::allocator<long int>; std::vector<_Tp, _Alloc>::iterator\
    \ = __gnu_cxx::__normal_iterator<long int*, std::vector<long int> >; typename\
    \ std::_Vector_base<_Tp, _Alloc>::pointer = long int*; std::vector<_Tp, _Alloc>::const_iterator\
    \ = __gnu_cxx::__normal_iterator<const long int*, std::vector<long int> >; typename\
    \ __gnu_cxx::__alloc_traits<typename std::_Vector_base<_Tp, _Alloc>::_Tp_alloc_type>::const_pointer\
    \ = const long int*; std::vector<_Tp, _Alloc>::value_type = long int]\u2019\n\
    \ 1290 |       insert(const_iterator __position, value_type&& __x)\n      |  \
    \     ^~~~~~\n/usr/include/c++/9/bits/stl_vector.h:1290:54: note:   no known conversion\
    \ for argument 2 from \u2018__gnu_cxx::__normal_iterator<long int*, std::vector<long\
    \ int> >\u2019 to \u2018std::vector<long int>::value_type&&\u2019 {aka \u2018\
    long int&&\u2019}\n 1290 |       insert(const_iterator __position, value_type&&\
    \ __x)\n      |                                         ~~~~~~~~~~~~~^~~\n/usr/include/c++/9/bits/stl_vector.h:1307:7:\
    \ note: candidate: \u2018std::vector<_Tp, _Alloc>::iterator std::vector<_Tp, _Alloc>::insert(std::vector<_Tp,\
    \ _Alloc>::const_iterator, std::initializer_list<_Tp>) [with _Tp = long int; _Alloc\
    \ = std::allocator<long int>; std::vector<_Tp, _Alloc>::iterator = __gnu_cxx::__normal_iterator<long\
    \ int*, std::vector<long int> >; typename std::_Vector_base<_Tp, _Alloc>::pointer\
    \ = long int*; std::vector<_Tp, _Alloc>::const_iterator = __gnu_cxx::__normal_iterator<const\
    \ long int*, std::vector<long int> >; typename __gnu_cxx::__alloc_traits<typename\
    \ std::_Vector_base<_Tp, _Alloc>::_Tp_alloc_type>::const_pointer = const long\
    \ int*]\u2019\n 1307 |       insert(const_iterator __position, initializer_list<value_type>\
    \ __l)\n      |       ^~~~~~\n/usr/include/c++/9/bits/stl_vector.h:1307:70: note:\
    \   no known conversion for argument 2 from \u2018__gnu_cxx::__normal_iterator<long\
    \ int*, std::vector<long int> >\u2019 to \u2018std::initializer_list<long int>\u2019\
    \n 1307 |       insert(const_iterator __position, initializer_list<value_type>\
    \ __l)\n      |                                         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~\n\
    /usr/include/c++/9/bits/stl_vector.h:1332:7: note: candidate: \u2018std::vector<_Tp,\
    \ _Alloc>::iterator std::vector<_Tp, _Alloc>::insert(std::vector<_Tp, _Alloc>::const_iterator,\
    \ std::vector<_Tp, _Alloc>::size_type, const value_type&) [with _Tp = long int;\
    \ _Alloc = std::allocator<long int>; std::vector<_Tp, _Alloc>::iterator = __gnu_cxx::__normal_iterator<long\
    \ int*, std::vector<long int> >; typename std::_Vector_base<_Tp, _Alloc>::pointer\
    \ = long int*; std::vector<_Tp, _Alloc>::const_iterator = __gnu_cxx::__normal_iterator<const\
    \ long int*, std::vector<long int> >; typename __gnu_cxx::__alloc_traits<typename\
    \ std::_Vector_base<_Tp, _Alloc>::_Tp_alloc_type>::const_pointer = const long\
    \ int*; std::vector<_Tp, _Alloc>::size_type = long unsigned int; std::vector<_Tp,\
    \ _Alloc>::value_type = long int]\u2019\n 1332 |       insert(const_iterator __position,\
    \ size_type __n, const value_type& __x)\n      |       ^~~~~~\n/usr/include/c++/9/bits/stl_vector.h:1332:7:\
    \ note:   candidate expects 3 arguments, 2 provided\n/usr/include/c++/9/bits/stl_vector.h:1376:2:\
    \ note: candidate: \u2018template<class _InputIterator, class> std::vector<_Tp,\
    \ _Alloc>::iterator std::vector<_Tp, _Alloc>::insert(std::vector<_Tp, _Alloc>::const_iterator,\
    \ _InputIterator, _InputIterator) [with _InputIterator = _InputIterator; <template-parameter-2-2>\
    \ = <template-parameter-1-2>; _Tp = long int; _Alloc = std::allocator<long int>]\u2019\
    \n 1376 |  insert(const_iterator __position, _InputIterator __first,\n      |\
    \  ^~~~~~\n/usr/include/c++/9/bits/stl_vector.h:1376:2: note:   template argument\
    \ deduction/substitution failed:\n/tmp/tmpenqwv6kf.cpp:44:50: note:   candidate\
    \ expects 3 arguments, 2 provided\n   44 |     ans.insert(ans.begin() + mid, ans.begin()\
    \ + k);\n      |                                                  ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n    // Your code here\n    std::vector<long> ans;\n    long\
    \ max = 0;\n    long min = 0;\n    long mid = 0;\n    for(long i = 0; i < arr.size();\
    \ i++){\n        if(arr[i] > max){\n            max = arr[i];\n            mid\
    \ = i;\n        }\n        if(arr[i] < min){\n            min = arr[i];\n    \
    \        mid = i;\n        }\n    }\n    for(long i = 0; i < arr.size(); i++){\n\
    \        if(arr[i] == max && i != mid){\n            ans.push_back(max);\n   \
    \         max = arr[i];\n        }\n        if(arr[i] == min && i != mid){\n \
    \           ans.push_back(min);\n            min = arr[i];\n        }\n    }\n\
    \    ans.push_back(max);\n    return ans;\n}\nint main() {\n    auto candidate\
    \ = maximum;\n    assert(candidate((std::vector<long>({-3, -4, 5})), (3)) == (std::vector<long>({-4,\
    \ -3, 5})));\n    assert(candidate((std::vector<long>({4, -4, 4})), (2)) == (std::vector<long>({4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-3, 2, 1, 2, -1, -2, 1})),\
    \ (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmpamd7uv8o: /tmp/tmpamd7uv8o.cpp:49: int main(): Assertion `candidate((std::vector<long>({-3,\
    \ -4, 5})), (3)) == (std::vector<long>({-4, -3, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n    // Your code here\n    std::vector<long> ans;\n    long\
    \ max = 0;\n    long index = 0;\n    for (auto i : arr) {\n        if (i > max)\
    \ {\n            max = i;\n            index = i;\n        }\n    }\n    ans.push_back(max);\n\
    \    for (auto i : arr) {\n        if (i == max) {\n            ans.push_back(i);\n\
    \        }\n    }\n    ans.push_back(arr[index]);\n    return ans;\n}\nint main()\
    \ {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({-3,\
    \ -4, 5})), (3)) == (std::vector<long>({-4, -3, 5})));\n    assert(candidate((std::vector<long>({4,\
    \ -4, 4})), (2)) == (std::vector<long>({4, 4})));\n    assert(candidate((std::vector<long>({-3,\
    \ 2, 1, 2, -1, -2, 1})), (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmpufnxc5oq: /tmp/tmpufnxc5oq.cpp:40: int main(): Assertion `candidate((std::vector<long>({-3,\
    \ -4, 5})), (3)) == (std::vector<long>({-4, -3, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n    std::vector<long> ans;\n    long max_val = arr[0];\n   \
    \ long max_idx = -1;\n    for(long i = 1; i < arr.size(); i++) {\n        if(arr[i]\
    \ > max_val) {\n            max_val = arr[i];\n            max_idx = i;\n    \
    \    }\n    }\n    ans.push_back(max_val);\n    for(long i = max_idx + 1; i <\
    \ arr.size(); i++) {\n        if(arr[i] > max_val) {\n            ans.push_back(arr[i]);\n\
    \        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate = maximum;\n\
    \    assert(candidate((std::vector<long>({-3, -4, 5})), (3)) == (std::vector<long>({-4,\
    \ -3, 5})));\n    assert(candidate((std::vector<long>({4, -4, 4})), (2)) == (std::vector<long>({4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-3, 2, 1, 2, -1, -2, 1})),\
    \ (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmpypmr1ij5: /tmp/tmpypmr1ij5.cpp:38: int main(): Assertion `candidate((std::vector<long>({-3,\
    \ -4, 5})), (3)) == (std::vector<long>({-4, -3, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n    std::vector<long> ans;\n    long max = 0;\n    long cur\
    \ = 0;\n    for(long i = 0; i < arr.size(); i++) {\n        if(arr[i] > max) {\n\
    \            max = arr[i];\n            cur = i;\n        }\n    }\n    ans.push_back(max);\n\
    \    for(long i = 0; i < arr.size(); i++) {\n        if(arr[i] == max) {\n   \
    \         ans.push_back(arr[cur]);\n        }\n    }\n    return ans;\n}\nint\
    \ main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({-3,\
    \ -4, 5})), (3)) == (std::vector<long>({-4, -3, 5})));\n    assert(candidate((std::vector<long>({4,\
    \ -4, 4})), (2)) == (std::vector<long>({4, 4})));\n    assert(candidate((std::vector<long>({-3,\
    \ 2, 1, 2, -1, -2, 1})), (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmpp55inxy4: /tmp/tmpp55inxy4.cpp:38: int main(): Assertion `candidate((std::vector<long>({-3,\
    \ -4, 5})), (3)) == (std::vector<long>({-4, -3, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n    // write your code here\n    std::vector<long> max_arr(k);\n\
    \    long max_val = arr[0];\n    for(long i = 1; i < k; i++) {\n        if(arr[i]\
    \ > max_val) {\n            max_val = arr[i];\n        }\n    }\n    for(long\
    \ i = 0; i < k; i++) {\n        if(arr[i] > max_val) {\n            max_arr[i]\
    \ = arr[i];\n        }\n    }\n    return max_arr;\n}\nint main() {\n    auto\
    \ candidate = maximum;\n    assert(candidate((std::vector<long>({-3, -4, 5})),\
    \ (3)) == (std::vector<long>({-4, -3, 5})));\n    assert(candidate((std::vector<long>({4,\
    \ -4, 4})), (2)) == (std::vector<long>({4, 4})));\n    assert(candidate((std::vector<long>({-3,\
    \ 2, 1, 2, -1, -2, 1})), (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmpmjqj_e4b: /tmp/tmpmjqj_e4b.cpp:36: int main(): Assertion `candidate((std::vector<long>({-3,\
    \ -4, 5})), (3)) == (std::vector<long>({-4, -3, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n    std::vector<long> ans;\n    long max = 0;\n    long i =\
    \ 0;\n    long j = 0;\n    while(i < arr.size() && j < k) {\n        if(arr[i]\
    \ > arr[j]) {\n            max = arr[i];\n            i++;\n        } else {\n\
    \            max = arr[j];\n            j++;\n        }\n    }\n    while(i <\
    \ arr.size()) {\n        max = arr[i];\n        i++;\n        ans.push_back(max);\n\
    \    }\n    while(j < k) {\n        max = arr[j];\n        j++;\n        ans.push_back(max);\n\
    \    }\n    return ans;\n}\nint main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({-3,\
    \ -4, 5})), (3)) == (std::vector<long>({-4, -3, 5})));\n    assert(candidate((std::vector<long>({4,\
    \ -4, 4})), (2)) == (std::vector<long>({4, 4})));\n    assert(candidate((std::vector<long>({-3,\
    \ 2, 1, 2, -1, -2, 1})), (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmpkj0nxsis: /tmp/tmpkj0nxsis.cpp:46: int main(): Assertion `candidate((std::vector<long>({-3,\
    \ -4, 5})), (3)) == (std::vector<long>({-4, -3, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n    // Your code here\n    std::vector<long> result;\n    long\
    \ max_val = arr[0];\n    long max_idx = -1;\n    for(long i = 1; i < arr.size();\
    \ i++) {\n        if(arr[i] > max_val) {\n            max_val = arr[i];\n    \
    \        max_idx = i;\n        }\n    }\n    result.push_back(max_val);\n    result.push_back(arr[max_idx]);\n\
    \    return result;\n}\nint main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({-3,\
    \ -4, 5})), (3)) == (std::vector<long>({-4, -3, 5})));\n    assert(candidate((std::vector<long>({4,\
    \ -4, 4})), (2)) == (std::vector<long>({4, 4})));\n    assert(candidate((std::vector<long>({-3,\
    \ 2, 1, 2, -1, -2, 1})), (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmpvwvodrrw: /tmp/tmpvwvodrrw.cpp:35: int main(): Assertion `candidate((std::vector<long>({-3,\
    \ -4, 5})), (3)) == (std::vector<long>({-4, -3, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n    std::vector<long> ans;\n    long max = 0;\n    long i =\
    \ 0;\n    long j = 0;\n    long n = arr.size();\n    while(i < n && j < k) {\n\
    \        if(arr[i] > arr[j]) {\n            max = arr[i];\n            i++;\n\
    \        } else {\n            max = arr[j];\n            j++;\n        }\n  \
    \      ans.push_back(max);\n    }\n    return ans;\n}\nint main() {\n    auto\
    \ candidate = maximum;\n    assert(candidate((std::vector<long>({-3, -4, 5})),\
    \ (3)) == (std::vector<long>({-4, -3, 5})));\n    assert(candidate((std::vector<long>({4,\
    \ -4, 4})), (2)) == (std::vector<long>({4, 4})));\n    assert(candidate((std::vector<long>({-3,\
    \ 2, 1, 2, -1, -2, 1})), (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmpxl0byxss: /tmp/tmpxl0byxss.cpp:38: int main(): Assertion `candidate((std::vector<long>({-3,\
    \ -4, 5})), (3)) == (std::vector<long>({-4, -3, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n    std::vector<long> max_arr(k);\n    long max_val = arr[0];\n\
    \    for(long i = 1; i < k; i++) {\n        if(arr[i] > max_val) {\n         \
    \   max_val = arr[i];\n        }\n    }\n    for(long i = 0; i < k; i++) {\n \
    \       if(arr[i] > max_val) {\n            max_arr[i] = arr[i];\n        }\n\
    \    }\n    return max_arr;\n}\nint main() {\n    auto candidate = maximum;\n\
    \    assert(candidate((std::vector<long>({-3, -4, 5})), (3)) == (std::vector<long>({-4,\
    \ -3, 5})));\n    assert(candidate((std::vector<long>({4, -4, 4})), (2)) == (std::vector<long>({4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-3, 2, 1, 2, -1, -2, 1})),\
    \ (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmp0p2q_22n: /tmp/tmp0p2q_22n.cpp:35: int main(): Assertion `candidate((std::vector<long>({-3,\
    \ -4, 5})), (3)) == (std::vector<long>({-4, -3, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n    // Your code here\n    std::vector<long> arr1(arr.begin(),\
    \ arr.end());\n    std::sort(arr1.begin(), arr1.end());\n    std::vector<long>\
    \ arr2(arr1.begin(), arr1.begin() + k);\n    return arr2;\n}\nint main() {\n \
    \   auto candidate = maximum;\n    assert(candidate((std::vector<long>({-3, -4,\
    \ 5})), (3)) == (std::vector<long>({-4, -3, 5})));\n    assert(candidate((std::vector<long>({4,\
    \ -4, 4})), (2)) == (std::vector<long>({4, 4})));\n    assert(candidate((std::vector<long>({-3,\
    \ 2, 1, 2, -1, -2, 1})), (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmpg7mlls7d: /tmp/tmpg7mlls7d.cpp:28: int main(): Assertion `candidate((std::vector<long>({4,\
    \ -4, 4})), (2)) == (std::vector<long>({4, 4}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n    std::vector<long> result;\n    long max_val = arr[0];\n\
    \    for (long i = 0; i < arr.size(); i++) {\n        if (arr[i] > max_val) {\n\
    \            max_val = arr[i];\n        }\n    }\n    for (long i = 0; i < arr.size();\
    \ i++) {\n        if (arr[i] > max_val) {\n            result.push_back(max_val);\n\
    \            max_val = arr[i];\n        }\n    }\n    for (long i = 0; i < arr.size();\
    \ i++) {\n        if (arr[i] > max_val) {\n            result.push_back(arr[i]);\n\
    \        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = maximum;\n\
    \    assert(candidate((std::vector<long>({-3, -4, 5})), (3)) == (std::vector<long>({-4,\
    \ -3, 5})));\n    assert(candidate((std::vector<long>({4, -4, 4})), (2)) == (std::vector<long>({4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-3, 2, 1, 2, -1, -2, 1})),\
    \ (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmp2nb1sw2a: /tmp/tmp2nb1sw2a.cpp:41: int main(): Assertion `candidate((std::vector<long>({-3,\
    \ -4, 5})), (3)) == (std::vector<long>({-4, -3, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n    std::vector<long> ans;\n    long max = 0;\n    for (long\
    \ i = 0; i < arr.size(); i++) {\n        if (arr[i] > max) {\n            max\
    \ = arr[i];\n        }\n    }\n    ans.push_back(max);\n    for (long i = 0; i\
    \ < arr.size() - k + 1; i++) {\n        long cur = max;\n        for (long j =\
    \ 0; j < k; j++) {\n            if (arr[i + j] > cur) {\n                cur =\
    \ arr[i + j];\n            }\n        }\n        ans.push_back(cur);\n    }\n\
    \    return ans;\n}\nint main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({-3,\
    \ -4, 5})), (3)) == (std::vector<long>({-4, -3, 5})));\n    assert(candidate((std::vector<long>({4,\
    \ -4, 4})), (2)) == (std::vector<long>({4, 4})));\n    assert(candidate((std::vector<long>({-3,\
    \ 2, 1, 2, -1, -2, 1})), (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmpd6l7slt7: /tmp/tmpd6l7slt7.cpp:40: int main(): Assertion `candidate((std::vector<long>({-3,\
    \ -4, 5})), (3)) == (std::vector<long>({-4, -3, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n    std::vector<long> ans;\n    long max_val = arr[0];\n   \
    \ long max_idx = -1;\n    for (long i = 1; i < arr.size(); i++) {\n        if\
    \ (arr[i] > max_val) {\n            max_val = arr[i];\n            max_idx = i;\n\
    \        }\n    }\n    ans.push_back(max_val);\n    long max_idx = max_idx;\n\
    \    for (long i = max_idx + 1; i < arr.size(); i++) {\n        if (arr[i] > max_val)\
    \ {\n            max_val = arr[i];\n            max_idx = i;\n        }\n    }\n\
    \    ans.push_back(max_val);\n    long max_idx = max_idx;\n    for (long i = max_idx\
    \ + 1; i < arr.size(); i++) {\n        if (arr[i] > max_val) {\n            max_val\
    \ = arr[i];\n            max_idx = i;\n        }\n    }\n    ans.push_back(max_val);\n\
    \    return ans;\n}\nint main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({-3,\
    \ -4, 5})), (3)) == (std::vector<long>({-4, -3, 5})));\n    assert(candidate((std::vector<long>({4,\
    \ -4, 4})), (2)) == (std::vector<long>({4, 4})));\n    assert(candidate((std::vector<long>({-3,\
    \ 2, 1, 2, -1, -2, 1})), (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpj7vmk5is.cpp: In function \u2018std::vector<long int> maximum(std::vector<long\
    \ int>, long int)\u2019:\n/tmp/tmpj7vmk5is.cpp:29:10: error: redeclaration of\
    \ \u2018long int max_idx\u2019\n   29 |     long max_idx = max_idx;\n      | \
    \         ^~~~~~~\n/tmp/tmpj7vmk5is.cpp:21:10: note: \u2018long int max_idx\u2019\
    \ previously declared here\n   21 |     long max_idx = -1;\n      |          ^~~~~~~\n\
    /tmp/tmpj7vmk5is.cpp:37:10: error: redeclaration of \u2018long int max_idx\u2019\
    \n   37 |     long max_idx = max_idx;\n      |          ^~~~~~~\n/tmp/tmpj7vmk5is.cpp:21:10:\
    \ note: \u2018long int max_idx\u2019 previously declared here\n   21 |     long\
    \ max_idx = -1;\n      |          ^~~~~~~\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n    // write your code here\n    std::vector<long> ans;\n  \
    \  long max_val = arr[0];\n    long max_idx = -1;\n    for(long i = 1; i < arr.size();\
    \ i++){\n        if(arr[i] > max_val){\n            max_val = arr[i];\n      \
    \      max_idx = i;\n        }\n    }\n    ans.push_back(max_val);\n    for(long\
    \ i = max_idx; i < k; i++){\n        ans.push_back(arr[i]);\n    }\n    return\
    \ ans;\n}\nint main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({-3,\
    \ -4, 5})), (3)) == (std::vector<long>({-4, -3, 5})));\n    assert(candidate((std::vector<long>({4,\
    \ -4, 4})), (2)) == (std::vector<long>({4, 4})));\n    assert(candidate((std::vector<long>({-3,\
    \ 2, 1, 2, -1, -2, 1})), (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmpjn_x9d_m: /tmp/tmpjn_x9d_m.cpp:37: int main(): Assertion `candidate((std::vector<long>({-3,\
    \ -4, 5})), (3)) == (std::vector<long>({-4, -3, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n    std::vector<long> ans;\n    long max_val = arr[0];\n   \
    \ long max_idx = -1;\n    for (size_t i = 0; i < arr.size(); i++) {\n        if\
    \ (arr[i] > max_val) {\n            max_val = arr[i];\n            max_idx = i;\n\
    \        }\n    }\n    ans.push_back(max_val);\n    for (size_t i = max_idx +\
    \ 1; i < arr.size(); i++) {\n        long val = arr[i];\n        long idx = i;\n\
    \        while (idx > 0 && arr[idx - 1] > val) {\n            ans.push_back(arr[idx\
    \ - 1]);\n            idx--;\n        }\n        ans.push_back(val);\n    }\n\
    \    return ans;\n}\nint main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({-3,\
    \ -4, 5})), (3)) == (std::vector<long>({-4, -3, 5})));\n    assert(candidate((std::vector<long>({4,\
    \ -4, 4})), (2)) == (std::vector<long>({4, 4})));\n    assert(candidate((std::vector<long>({-3,\
    \ 2, 1, 2, -1, -2, 1})), (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmpjtzhdadn: /tmp/tmpjtzhdadn.cpp:42: int main(): Assertion `candidate((std::vector<long>({-3,\
    \ -4, 5})), (3)) == (std::vector<long>({-4, -3, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n    std::vector<long> result;\n    long max_val = arr[0];\n\
    \    long max_idx = -1;\n    for (long i = 1; i < arr.size(); i++) {\n       \
    \ if (arr[i] > max_val) {\n            max_val = arr[i];\n            max_idx\
    \ = i;\n        }\n    }\n    result.push_back(max_val);\n    result.push_back(arr[max_idx]);\n\
    \    return result;\n}\nint main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({-3,\
    \ -4, 5})), (3)) == (std::vector<long>({-4, -3, 5})));\n    assert(candidate((std::vector<long>({4,\
    \ -4, 4})), (2)) == (std::vector<long>({4, 4})));\n    assert(candidate((std::vector<long>({-3,\
    \ 2, 1, 2, -1, -2, 1})), (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmp4p8g4yw4: /tmp/tmp4p8g4yw4.cpp:34: int main(): Assertion `candidate((std::vector<long>({-3,\
    \ -4, 5})), (3)) == (std::vector<long>({-4, -3, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n    std::vector<long> ans;\n    long max_val = arr[0];\n   \
    \ long max_idx = -1;\n    for (size_t i = 0; i < arr.size(); i++) {\n        if\
    \ (arr[i] > max_val) {\n            max_val = arr[i];\n            max_idx = i;\n\
    \        }\n    }\n    ans.push_back(max_val);\n    for (size_t i = max_idx +\
    \ 1; i < arr.size(); i++) {\n        if (arr[i] > max_val) {\n            ans.push_back(arr[i]);\n\
    \        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate = maximum;\n\
    \    assert(candidate((std::vector<long>({-3, -4, 5})), (3)) == (std::vector<long>({-4,\
    \ -3, 5})));\n    assert(candidate((std::vector<long>({4, -4, 4})), (2)) == (std::vector<long>({4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-3, 2, 1, 2, -1, -2, 1})),\
    \ (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmp13_dmwzv: /tmp/tmp13_dmwzv.cpp:38: int main(): Assertion `candidate((std::vector<long>({-3,\
    \ -4, 5})), (3)) == (std::vector<long>({-4, -3, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n    long n = arr.size();\n    std::vector<long> ans;\n    long\
    \ max = 0;\n    long min = 0;\n    long mid = 0;\n    long cnt = 0;\n    long\
    \ cur = 0;\n    long temp = 0;\n    long i = 0;\n    long j = 0;\n    long cnt2\
    \ = 0;\n    long cnt3 = 0;\n    long cnt4 = 0;\n    long cnt5 = 0;\n    long cnt6\
    \ = 0;\n    long cnt7 = 0;\n    long cnt8 = 0;\n    long cnt9 = 0;\n    long cnt10\
    \ = 0;\n    long cnt11 = 0;\n    long cnt12 = 0;\n    long cnt13 = 0;\n    long\
    \ cnt14 = 0;\n    long cnt15 = 0;\n    long cnt16 = 0;\n    long cnt17 = 0;\n\
    \    long cnt18 = 0;\n    long cnt19 = 0;\n    long cnt20 = 0;\n    long cnt21\
    \ = 0;\n    long cnt22 = 0;\n    long cnt23 = 0;\n    long cnt24 = 0;\n    long\
    \ cnt25 = 0;\n    long cnt26 = 0;\n    long cnt27 = 0;\n    long cnt28 = 0;\n\
    \    long cnt29 = 0;\n    long cnt30 = 0;\n    long cnt31 = 0;\n    long cnt32\
    \ = 0;\n    long cnt33 = 0;\n    long cnt34 = 0;\n    long cnt35 = 0;\n    long\
    \ cnt36 = 0;\n    long cnt37 = 0;\n    long cnt38 = 0;\n    long cnt39 = 0;\n\
    \    long cnt40 = 0;\n    long cnt41 = 0;\n    long cnt42 = 0;\n    long cnt43\
    \ = 0;\n    long cnt44 = 0;\n    long cnt45 = 0;\n    long cnt46 = 0;\n    long\
    \ cnt47 = 0;\n    long cnt48 = 0;\n    long cnt49 = 0;\n    long cnt50 = 0;\n\
    \    long cnt51 = 0;\n    long cnt52 = 0;\n    long cnt53 = 0;\n    long cnt54\
    \ = 0;\n    long cnt55 = 0;\n    long cnt56 = 0;\n    long cnt57 = 0;\n    long\
    \ cnt58 = 0;\n    long cnt59 = 0;\n    long cnt60 = 0;\n    long cnt61 = 0;\n\
    \    long cnt62 = 0;\n    long cnt63 = 0;\n    long cnt64 = 0;\n    long cnt65\
    \ = 0;\n    long cnt66 = 0;\n    long cnt67 = 0;\n    long cnt68 = 0;\n    long\
    \ cnt69 = 0;\n    long cnt70 = 0;\n    long cnt71 = 0;\n    long cnt72 = 0;\n\
    \    long cnt73 = 0;\n    long cnt74 = 0;\n    long cnt75 = 0;\n    long cnt76\
    \ = 0;\n    long cnt77 = 0;\n    long cnt78 = 0;\n    \n}\nint main() {\n    auto\
    \ candidate = maximum;\n    assert(candidate((std::vector<long>({-3, -4, 5})),\
    \ (3)) == (std::vector<long>({-4, -3, 5})));\n    assert(candidate((std::vector<long>({4,\
    \ -4, 4})), (2)) == (std::vector<long>({4, 4})));\n    assert(candidate((std::vector<long>({-3,\
    \ 2, 1, 2, -1, -2, 1})), (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmpebwvg10f: /tmp/tmpebwvg10f.cpp:110: int main(): Assertion `candidate((std::vector<long>({-3,\
    \ -4, 5})), (3)) == (std::vector<long>({-4, -3, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n    // code here\n    std::vector<long> ans;\n    long max =\
    \ 0;\n    long temp = 0;\n    for(long i = 0; i < arr.size(); i++) {\n       \
    \ if(arr[i] > max) {\n            max = arr[i];\n        }\n    }\n    for(long\
    \ i = 0; i < arr.size(); i++) {\n        if(arr[i] > max) {\n            temp\
    \ = max;\n            max = arr[i];\n        }\n    }\n    for(long i = 0; i <\
    \ arr.size(); i++) {\n        if(arr[i] > temp) {\n            ans.push_back(max);\n\
    \            max = temp;\n        }\n    }\n    return ans;\n}\nint main() {\n\
    \    auto candidate = maximum;\n    assert(candidate((std::vector<long>({-3, -4,\
    \ 5})), (3)) == (std::vector<long>({-4, -3, 5})));\n    assert(candidate((std::vector<long>({4,\
    \ -4, 4})), (2)) == (std::vector<long>({4, 4})));\n    assert(candidate((std::vector<long>({-3,\
    \ 2, 1, 2, -1, -2, 1})), (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmp3zkqh70_: /tmp/tmp3zkqh70_.cpp:44: int main(): Assertion `candidate((std::vector<long>({-3,\
    \ -4, 5})), (3)) == (std::vector<long>({-4, -3, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n    long n = arr.size();\n    std::vector<long> arr2(k);\n \
    \   long max = 0;\n    long i = 0;\n    long j = 0;\n    long k1 = 0;\n    long\
    \ k2 = 0;\n    long k3 = 0;\n    long k4 = 0;\n    long k5 = 0;\n    long k6 =\
    \ 0;\n    long k7 = 0;\n    long k8 = 0;\n    long k9 = 0;\n    long k10 = 0;\n\
    \    long k11 = 0;\n    long k12 = 0;\n    long k13 = 0;\n    long k14 = 0;\n\
    \    long k15 = 0;\n    long k16 = 0;\n    long k17 = 0;\n    long k18 = 0;\n\
    \    long k19 = 0;\n    long k20 = 0;\n    long k21 = 0;\n    long k22 = 0;\n\
    \    long k23 = 0;\n    long k24 = 0;\n    long k25 = 0;\n    long k26 = 0;\n\
    \    long k27 = 0;\n    long k28 = 0;\n    long k29 = 0;\n    long k30 = 0;\n\
    \    long k31 = 0;\n    long k32 = 0;\n    long k33 = 0;\n    long k34 = 0;\n\
    \    long k35 = 0;\n    long k36 = 0;\n    long k37 = 0;\n    long k38 = 0;\n\
    \    long k39 = 0;\n    long k40 = 0;\n    long k41 = 0;\n    long k42 = 0;\n\
    \    long k43 = 0;\n    long k44 = 0;\n    long k45 = 0;\n    long k46 = 0;\n\
    \    long k47 = 0;\n    long k48 = 0;\n    long k49 = 0;\n    long k50 = 0;\n\
    \    long k51 = 0;\n    long k52 = 0;\n    long k53 = 0;\n    long k54 = 0;\n\
    \    long k55 = 0;\n    long k56 = 0;\n    long k57 = 0;\n    long k58 = 0;\n\
    \    long k59 = 0;\n    long k60 = 0;\n    long k61 = 0;\n    long k62 = 0;\n\
    \    long k63 = 0;\n    long k64 = 0;\n    long k65 = 0;\n    long k66 = 0;\n\
    \    long k67 = 0;\n    long k68 = 0;\n    long k69 = 0;\n    long k70 = 0;\n\
    \    long k71 = 0;\n    long k72 = 0;\n    long k73 = 0;\n    long k74 = 0;\n\
    \    long k75 = 0;\n    long k76 = 0;\n    long k77 = 0;\n    long k78 = 0;\n\
    \    long k79 = 0;\n    long k80 = 0;\n    long k81 = 0;\n    long \n}\nint main()\
    \ {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({-3,\
    \ -4, 5})), (3)) == (std::vector<long>({-4, -3, 5})));\n    assert(candidate((std::vector<long>({4,\
    \ -4, 4})), (2)) == (std::vector<long>({4, 4})));\n    assert(candidate((std::vector<long>({-3,\
    \ 2, 1, 2, -1, -2, 1})), (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpki3n143d.cpp: In function \u2018std::vector<long int> maximum(std::vector<long\
    \ int>, long int)\u2019:\n/tmp/tmpki3n143d.cpp:106:1: error: expected unqualified-id\
    \ before \u2018}\u2019 token\n  106 | }\n      | ^\n/tmp/tmpki3n143d.cpp:106:1:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n    std::vector<long> result;\n    long max = 0;\n    for (long\
    \ i = 0; i < k; i++) {\n        if (arr[i] > max) {\n            max = arr[i];\n\
    \        }\n    }\n    for (long i = 0; i < k; i++) {\n        if (arr[i] > max)\
    \ {\n            result.push_back(max);\n            max = arr[i];\n        }\n\
    \    }\n    for (long i = 0; i < k; i++) {\n        if (arr[i] > max) {\n    \
    \        result.push_back(arr[i]);\n        }\n    }\n    return result;\n}\n\
    int main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({-3,\
    \ -4, 5})), (3)) == (std::vector<long>({-4, -3, 5})));\n    assert(candidate((std::vector<long>({4,\
    \ -4, 4})), (2)) == (std::vector<long>({4, 4})));\n    assert(candidate((std::vector<long>({-3,\
    \ 2, 1, 2, -1, -2, 1})), (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmps8ijshlg: /tmp/tmps8ijshlg.cpp:41: int main(): Assertion `candidate((std::vector<long>({-3,\
    \ -4, 5})), (3)) == (std::vector<long>({-4, -3, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n    // write your code here\n    std::vector<long> ans;\n  \
    \  long max = 0;\n    long index = 0;\n    for (long i = 0; i < arr.size(); i++)\
    \ {\n        if (arr[i] > max) {\n            max = arr[i];\n            index\
    \ = i;\n        }\n    }\n    ans.push_back(max);\n    for (long i = 0; i < arr.size();\
    \ i++) {\n        if (arr[i] == max) {\n            ans.push_back(arr[index]);\n\
    \        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate = maximum;\n\
    \    assert(candidate((std::vector<long>({-3, -4, 5})), (3)) == (std::vector<long>({-4,\
    \ -3, 5})));\n    assert(candidate((std::vector<long>({4, -4, 4})), (2)) == (std::vector<long>({4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-3, 2, 1, 2, -1, -2, 1})),\
    \ (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmp8ba5g8co: /tmp/tmp8ba5g8co.cpp:39: int main(): Assertion `candidate((std::vector<long>({-3,\
    \ -4, 5})), (3)) == (std::vector<long>({-4, -3, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n    std::vector<long> ans;\n    long max_val = arr[0];\n   \
    \ long max_idx = -1;\n    for (long i = 1; i < arr.size(); i++) {\n        if\
    \ (arr[i] > max_val) {\n            max_val = arr[i];\n            max_idx = i;\n\
    \        }\n    }\n    ans.push_back(max_val);\n    for (long i = max_idx + 1;\
    \ i < arr.size(); i++) {\n        if (arr[i] > max_val) {\n            ans.push_back(arr[i]);\n\
    \        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate = maximum;\n\
    \    assert(candidate((std::vector<long>({-3, -4, 5})), (3)) == (std::vector<long>({-4,\
    \ -3, 5})));\n    assert(candidate((std::vector<long>({4, -4, 4})), (2)) == (std::vector<long>({4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-3, 2, 1, 2, -1, -2, 1})),\
    \ (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmpg5legtoa: /tmp/tmpg5legtoa.cpp:38: int main(): Assertion `candidate((std::vector<long>({-3,\
    \ -4, 5})), (3)) == (std::vector<long>({-4, -3, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n    std::vector<long> ans;\n    long max_val = arr[0];\n   \
    \ long max_idx = -1;\n    for (size_t i = 0; i < arr.size(); i++) {\n        if\
    \ (arr[i] > max_val) {\n            max_val = arr[i];\n            max_idx = i;\n\
    \        }\n    }\n    for (size_t i = 0; i < arr.size(); i++) {\n        if (i\
    \ == max_idx) {\n            ans.push_back(arr[i]);\n        }\n    }\n    return\
    \ ans;\n}\nint main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({-3,\
    \ -4, 5})), (3)) == (std::vector<long>({-4, -3, 5})));\n    assert(candidate((std::vector<long>({4,\
    \ -4, 4})), (2)) == (std::vector<long>({4, 4})));\n    assert(candidate((std::vector<long>({-3,\
    \ 2, 1, 2, -1, -2, 1})), (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmpx8slqcic: /tmp/tmpx8slqcic.cpp:37: int main(): Assertion `candidate((std::vector<long>({-3,\
    \ -4, 5})), (3)) == (std::vector<long>({-4, -3, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n    std::vector<long> ans;\n    long max = 0;\n    long index\
    \ = 0;\n    for(long i = 0; i < arr.size(); i++) {\n        if(arr[i] > max) {\n\
    \            max = arr[i];\n            index = i;\n        }\n    }\n    ans.push_back(max);\n\
    \    for(long i = index; i < arr.size(); i++) {\n        if(arr[i] > max) {\n\
    \            max = arr[i];\n        }\n    }\n    while(ans.size() < k) {\n  \
    \      ans.push_back(max);\n    }\n    return ans;\n}\nint main() {\n    auto\
    \ candidate = maximum;\n    assert(candidate((std::vector<long>({-3, -4, 5})),\
    \ (3)) == (std::vector<long>({-4, -3, 5})));\n    assert(candidate((std::vector<long>({4,\
    \ -4, 4})), (2)) == (std::vector<long>({4, 4})));\n    assert(candidate((std::vector<long>({-3,\
    \ 2, 1, 2, -1, -2, 1})), (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmpiwebcy2q: /tmp/tmpiwebcy2q.cpp:41: int main(): Assertion `candidate((std::vector<long>({-3,\
    \ -4, 5})), (3)) == (std::vector<long>({-4, -3, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n    // Your code here\n    std::vector<long> ans;\n    long\
    \ max = 0;\n    long i = 0;\n    long j = 0;\n    long n = arr.size();\n    long\
    \ mid = n / 2;\n    while (i < n) {\n        if (arr[i] > max) {\n           \
    \ max = arr[i];\n        }\n        i++;\n    }\n    while (j < k) {\n       \
    \ if (max < arr[j]) {\n            ans.push_back(max);\n            max = arr[j];\n\
    \        }\n        j++;\n    }\n    return ans;\n}\nint main() {\n    auto candidate\
    \ = maximum;\n    assert(candidate((std::vector<long>({-3, -4, 5})), (3)) == (std::vector<long>({-4,\
    \ -3, 5})));\n    assert(candidate((std::vector<long>({4, -4, 4})), (2)) == (std::vector<long>({4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-3, 2, 1, 2, -1, -2, 1})),\
    \ (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmptzy4qkbh: /tmp/tmptzy4qkbh.cpp:43: int main(): Assertion `candidate((std::vector<long>({-3,\
    \ -4, 5})), (3)) == (std::vector<long>({-4, -3, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n    std::vector<long> ans;\n    long max_val = arr[0];\n   \
    \ long max_idx = -1;\n    for (long i = 1; i < arr.size(); i++) {\n        if\
    \ (arr[i] > max_val) {\n            max_val = arr[i];\n            max_idx = i;\n\
    \        }\n    }\n    ans.push_back(max_val);\n    ans.push_back(arr[max_idx]);\n\
    \    for (long i = max_idx + 1; i < arr.size(); i++) {\n        long val = arr[i];\n\
    \        long idx = i;\n        while (idx > 0 && arr[idx - 1] > val) {\n    \
    \        ans.push_back(val);\n            idx--;\n        }\n        ans.push_back(val);\n\
    \    }\n    return ans;\n}\nint main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({-3,\
    \ -4, 5})), (3)) == (std::vector<long>({-4, -3, 5})));\n    assert(candidate((std::vector<long>({4,\
    \ -4, 4})), (2)) == (std::vector<long>({4, 4})));\n    assert(candidate((std::vector<long>({-3,\
    \ 2, 1, 2, -1, -2, 1})), (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmpavapmi3d: /tmp/tmpavapmi3d.cpp:43: int main(): Assertion `candidate((std::vector<long>({-3,\
    \ -4, 5})), (3)) == (std::vector<long>({-4, -3, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n    // Your code here\n    std::vector<long> arr2(arr.size());\n\
    \    long max = 0;\n    long i = 0;\n    long j = 0;\n    long k1 = 0;\n    long\
    \ k2 = 0;\n    long k3 = 0;\n    long k4 = 0;\n    long k5 = 0;\n    long k6 =\
    \ 0;\n    long k7 = 0;\n    long k8 = 0;\n    long k9 = 0;\n    long k10 = 0;\n\
    \    long k11 = 0;\n    long k12 = 0;\n    long k13 = 0;\n    long k14 = 0;\n\
    \    long k15 = 0;\n    long k16 = 0;\n    long k17 = 0;\n    long k18 = 0;\n\
    \    long k19 = 0;\n    long k20 = 0;\n    long k21 = 0;\n    long k22 = 0;\n\
    \    long k23 = 0;\n    long k24 = 0;\n    long k25 = 0;\n    long k26 = 0;\n\
    \    long k27 = 0;\n    long k28 = 0;\n    long k29 = 0;\n    long k30 = 0;\n\
    \    long k31 = 0;\n    long k32 = 0;\n    long k33 = 0;\n    long k34 = 0;\n\
    \    long k35 = 0;\n    long k36 = 0;\n    long k37 = 0;\n    long k38 = 0;\n\
    \    long k39 = 0;\n    long k40 = 0;\n    long k41 = 0;\n    long k42 = 0;\n\
    \    long k43 = 0;\n    long k44 = 0;\n    long k45 = 0;\n    long k46 = 0;\n\
    \    long k47 = 0;\n    long k48 = 0;\n    long k49 = 0;\n    long k50 = 0;\n\
    \    long k51 = 0;\n    long k52 = 0;\n    long k53 = 0;\n    long k54 = 0;\n\
    \    long k55 = 0;\n    long k56 = 0;\n    long k57 = 0;\n    long k58 = 0;\n\
    \    long k59 = 0;\n    long k60 = 0;\n    long k61 = 0;\n    long k62 = 0;\n\
    \    long k63 = 0;\n    long k64 = 0;\n    long k65 = 0;\n    long k66 = 0;\n\
    \    long k67 = 0;\n    long k68 = 0;\n    long k69 = 0;\n    long k70 = 0;\n\
    \    long k71 = 0;\n    long k72 = 0;\n    long k73 = 0;\n    long k74 = 0;\n\
    \    long k75 = 0;\n    long k76 = 0;\n    long k77 = 0;\n    long k78 = 0;\n\
    \    long k79 = 0;\n    long k80 = 0;\n    long k81 = 0;\n    long k\n}\nint main()\
    \ {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({-3,\
    \ -4, 5})), (3)) == (std::vector<long>({-4, -3, 5})));\n    assert(candidate((std::vector<long>({4,\
    \ -4, 4})), (2)) == (std::vector<long>({4, 4})));\n    assert(candidate((std::vector<long>({-3,\
    \ 2, 1, 2, -1, -2, 1})), (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpcs66imfv.cpp: In function \u2018std::vector<long int> maximum(std::vector<long\
    \ int>, long int)\u2019:\n/tmp/tmpcs66imfv.cpp:106:1: error: expected initializer\
    \ before \u2018}\u2019 token\n  106 | }\n      | ^\n/tmp/tmpcs66imfv.cpp:106:1:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n    // code here\n    std::vector<long> max;\n    max.reserve(k);\n\
    \    for(long i = 0; i < arr.size(); i++) {\n        if(max.size() == k) {\n \
    \           break;\n        }\n        if(arr[i] > max[k-1]) {\n            max.resize(k);\n\
    \            max[k-1] = arr[i];\n        }\n    }\n    return max;\n}\nint main()\
    \ {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({-3,\
    \ -4, 5})), (3)) == (std::vector<long>({-4, -3, 5})));\n    assert(candidate((std::vector<long>({4,\
    \ -4, 4})), (2)) == (std::vector<long>({4, 4})));\n    assert(candidate((std::vector<long>({-3,\
    \ 2, 1, 2, -1, -2, 1})), (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmp9xv44tf4: /tmp/tmp9xv44tf4.cpp:35: int main(): Assertion `candidate((std::vector<long>({-3,\
    \ -4, 5})), (3)) == (std::vector<long>({-4, -3, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n    // write your code here\n    std::vector<long> ans;\n  \
    \  long max = 0;\n    long i = 0;\n    long j = 0;\n    long mid = 0;\n    while(i\
    \ < arr.size() && j < k) {\n        if(arr[i] > arr[j]) {\n            mid = arr[i];\n\
    \            arr[i] = arr[j];\n            arr[j] = mid;\n        }\n        i++;\n\
    \        j++;\n    }\n    while(i < arr.size()) {\n        mid = arr[i];\n   \
    \     ans.push_back(mid);\n        i++;\n    }\n    while(j < k) {\n        mid\
    \ = arr[j];\n        ans.push_back(mid);\n        j++;\n    }\n    return ans;\n\
    }\nint main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({-3,\
    \ -4, 5})), (3)) == (std::vector<long>({-4, -3, 5})));\n    assert(candidate((std::vector<long>({4,\
    \ -4, 4})), (2)) == (std::vector<long>({4, 4})));\n    assert(candidate((std::vector<long>({-3,\
    \ 2, 1, 2, -1, -2, 1})), (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmpvqovrjt9: /tmp/tmpvqovrjt9.cpp:48: int main(): Assertion `candidate((std::vector<long>({-3,\
    \ -4, 5})), (3)) == (std::vector<long>({-4, -3, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n    long n = arr.size();\n    std::vector<long> ans;\n    long\
    \ max_val = arr[0];\n    long max_idx = -1;\n    for(long i = 1; i < n; i++) {\n\
    \        if(arr[i] > max_val) {\n            max_val = arr[i];\n            max_idx\
    \ = i;\n        }\n    }\n    ans.push_back(max_val);\n    for(long i = max_idx\
    \ + 1; i < n; i++) {\n        if(arr[i] > max_val) {\n            ans.push_back(arr[i]);\n\
    \        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate = maximum;\n\
    \    assert(candidate((std::vector<long>({-3, -4, 5})), (3)) == (std::vector<long>({-4,\
    \ -3, 5})));\n    assert(candidate((std::vector<long>({4, -4, 4})), (2)) == (std::vector<long>({4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-3, 2, 1, 2, -1, -2, 1})),\
    \ (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmpqcmha1iy: /tmp/tmpqcmha1iy.cpp:39: int main(): Assertion `candidate((std::vector<long>({-3,\
    \ -4, 5})), (3)) == (std::vector<long>({-4, -3, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n    // write your code here\n    std::vector<long> result;\n\
    \    long max_val = arr[0];\n    long max_idx = -1;\n    for (long i = 1; i <\
    \ arr.size(); i++) {\n        if (arr[i] > max_val) {\n            max_val = arr[i];\n\
    \            max_idx = i;\n        }\n    }\n    result.push_back(max_val);\n\
    \    for (long i = max_idx + 1; i < arr.size(); i++) {\n        if (arr[i] > max_val)\
    \ {\n            result.push_back(arr[i]);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({-3,\
    \ -4, 5})), (3)) == (std::vector<long>({-4, -3, 5})));\n    assert(candidate((std::vector<long>({4,\
    \ -4, 4})), (2)) == (std::vector<long>({4, 4})));\n    assert(candidate((std::vector<long>({-3,\
    \ 2, 1, 2, -1, -2, 1})), (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmpbu2177t7: /tmp/tmpbu2177t7.cpp:39: int main(): Assertion `candidate((std::vector<long>({-3,\
    \ -4, 5})), (3)) == (std::vector<long>({-4, -3, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n    std::vector<long> ans;\n    long max_val = arr[0];\n   \
    \ long max_idx = -1;\n    for (long i = 1; i < arr.size(); i++) {\n        if\
    \ (arr[i] > max_val) {\n            max_val = arr[i];\n            max_idx = i;\n\
    \        }\n    }\n    ans.push_back(max_val);\n    long cnt = 0;\n    for (long\
    \ i = max_idx + 1; i < arr.size(); i++) {\n        if (arr[i] > max_val) {\n \
    \           ans.push_back(arr[i]);\n            cnt++;\n        }\n    }\n   \
    \ ans.push_back(cnt);\n    return ans;\n}\nint main() {\n    auto candidate =\
    \ maximum;\n    assert(candidate((std::vector<long>({-3, -4, 5})), (3)) == (std::vector<long>({-4,\
    \ -3, 5})));\n    assert(candidate((std::vector<long>({4, -4, 4})), (2)) == (std::vector<long>({4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-3, 2, 1, 2, -1, -2, 1})),\
    \ (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmpdp69h65z: /tmp/tmpdp69h65z.cpp:41: int main(): Assertion `candidate((std::vector<long>({-3,\
    \ -4, 5})), (3)) == (std::vector<long>({-4, -3, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n    // code here\n    std::vector<long> max;\n    max.reserve(k);\n\
    \    long max_val = arr[0];\n    for(long i = 1; i < k; i++) {\n        if(arr[i]\
    \ > max_val) {\n            max_val = arr[i];\n        }\n    }\n    for(long\
    \ i = 0; i < k; i++) {\n        if(arr[i] > max_val) {\n            max.push_back(arr[i]);\n\
    \        }\n    }\n    return max;\n}\nint main() {\n    auto candidate = maximum;\n\
    \    assert(candidate((std::vector<long>({-3, -4, 5})), (3)) == (std::vector<long>({-4,\
    \ -3, 5})));\n    assert(candidate((std::vector<long>({4, -4, 4})), (2)) == (std::vector<long>({4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-3, 2, 1, 2, -1, -2, 1})),\
    \ (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmpfgtcohzt: /tmp/tmpfgtcohzt.cpp:37: int main(): Assertion `candidate((std::vector<long>({-3,\
    \ -4, 5})), (3)) == (std::vector<long>({-4, -3, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n    // Your code here\n    std::vector<long> max;\n    max.reserve(k);\n\
    \    long max_val = arr[0];\n    for (long i = 0; i < arr.size(); i++) {\n   \
    \     if (arr[i] > max_val) {\n            max_val = arr[i];\n        }\n    }\n\
    \    for (long i = 0; i < arr.size(); i++) {\n        if (arr[i] == max_val) {\n\
    \            max.push_back(arr[i]);\n        }\n    }\n    return max;\n}\nint\
    \ main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({-3,\
    \ -4, 5})), (3)) == (std::vector<long>({-4, -3, 5})));\n    assert(candidate((std::vector<long>({4,\
    \ -4, 4})), (2)) == (std::vector<long>({4, 4})));\n    assert(candidate((std::vector<long>({-3,\
    \ 2, 1, 2, -1, -2, 1})), (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmpcph7zm0z: /tmp/tmpcph7zm0z.cpp:37: int main(): Assertion `candidate((std::vector<long>({-3,\
    \ -4, 5})), (3)) == (std::vector<long>({-4, -3, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n    std::vector<long> ans;\n    long max_val = arr[0];\n   \
    \ long max_idx = -1;\n    for (long i = 0; i < arr.size(); i++) {\n        if\
    \ (arr[i] > max_val) {\n            max_val = arr[i];\n            max_idx = i;\n\
    \        }\n    }\n    ans.push_back(max_val);\n    long cur_idx = max_idx;\n\
    \    for (long i = max_idx + 1; i < arr.size(); i++) {\n        if (arr[i] > arr[cur_idx])\
    \ {\n            ans.push_back(arr[i]);\n            cur_idx = i;\n        }\n\
    \    }\n    ans.push_back(arr[cur_idx]);\n    return ans;\n}\nint main() {\n \
    \   auto candidate = maximum;\n    assert(candidate((std::vector<long>({-3, -4,\
    \ 5})), (3)) == (std::vector<long>({-4, -3, 5})));\n    assert(candidate((std::vector<long>({4,\
    \ -4, 4})), (2)) == (std::vector<long>({4, 4})));\n    assert(candidate((std::vector<long>({-3,\
    \ 2, 1, 2, -1, -2, 1})), (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmpe5zanm5m: /tmp/tmpe5zanm5m.cpp:41: int main(): Assertion `candidate((std::vector<long>({-3,\
    \ -4, 5})), (3)) == (std::vector<long>({-4, -3, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n    long n = arr.size();\n    std::vector<long> ans;\n    long\
    \ max_val = arr[0];\n    long max_idx = 1;\n    long idx = 0;\n    \n    // Find\
    \ max element and it's index\n    for (long i = 1; i < n; i++) {\n        if (arr[i]\
    \ > max_val) {\n            max_val = arr[i];\n            max_idx = i;\n    \
    \    }\n    }\n    \n    // If k is greater than max element then return max element\
    \ and it's index\n    if (k > max_val) {\n        ans.push_back(max_val);\n  \
    \      ans.push_back(max_idx);\n        return ans;\n    }\n    \n    // If k\
    \ is less than max element then find max element and it's index\n    if (k < max_val)\
    \ {\n        ans.push_back(max_val);\n        ans.push_back(max_idx);\n      \
    \  return ans;\n    }\n    \n    // If k is equal to max element then find max\
    \ element and it's index\n    for (long i = 1; i < n; i++) {\n        if (arr[i]\
    \ > max_val) {\n            max_val = arr[i];\n            max_idx = i;\n    \
    \    }\n    }\n    \n    // If k is greater than max element then return max element\
    \ and it's index\n    if (k > max_val) {\n        ans.push_back(max_val);\n  \
    \      ans.push_back(max_idx);\n        return ans;\n    }\n    \n    // If k\
    \ is less than max element then find max element and it's index\n    if (k < max_val)\
    \ {\n        ans.push_back(max_val);\n        ans.push_back(max_idx);\n      \
    \  return ans;\n    }\n    \n    // If k is equal to max element then find max\
    \ element and it's index\n    for (long i = 1; i < n; i++) {\n        if (arr[i]\
    \ > max_val) {\n            max_val = arr[i];\n            max_idx = i;\n    \
    \    }\n    }\n    \n    // If k is greater than max element then return max element\
    \ and it's index\n    if (k > max_val) {\n        ans.push_back(max_val);\n  \
    \      ans.push_back(max_idx);\n        return ans;\n    }\n    \n    // If k\
    \ is less than max element then find max element and it's index\n    if (k < max_val)\
    \ {\n        ans.push_back(max_val);\n        ans.push_back(max_idx);\n      \
    \  return ans;\n    }\n    \n    // If k is equal to max element then find max\
    \ element and it's index\n    for (long i = 1; i < n; i++) {\n        if (arr[i]\
    \ > max_val) {\n            max_val = arr[i];\n            max_idx = i;\n    \
    \    }\n    }\n    \n    // If k is greater than max element then return max element\
    \ and it's index\n    if (k > max_val) {\n        ans.push_back(max_val);\n  \
    \      ans.push_back(max_idx);\n        return ans;\n    }\n    \n\n}\nint main()\
    \ {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({-3,\
    \ -4, 5})), (3)) == (std::vector<long>({-4, -3, 5})));\n    assert(candidate((std::vector<long>({4,\
    \ -4, 4})), (2)) == (std::vector<long>({4, 4})));\n    assert(candidate((std::vector<long>({-3,\
    \ 2, 1, 2, -1, -2, 1})), (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmpgihmubes: /tmp/tmpgihmubes.cpp:110: int main(): Assertion `candidate((std::vector<long>({-3,\
    \ -4, 5})), (3)) == (std::vector<long>({-4, -3, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n    std::vector<long> ans;\n    long max_val = arr[0];\n   \
    \ long max_idx = -1;\n    for (long i = 1; i < arr.size(); i++) {\n        if\
    \ (arr[i] > max_val) {\n            max_val = arr[i];\n            max_idx = i;\n\
    \        }\n    }\n    ans.push_back(max_val);\n    for (long i = max_idx + 1;\
    \ i < arr.size(); i++) {\n        if (arr[i] > max_val) {\n            ans.push_back(arr[i]);\n\
    \        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate = maximum;\n\
    \    assert(candidate((std::vector<long>({-3, -4, 5})), (3)) == (std::vector<long>({-4,\
    \ -3, 5})));\n    assert(candidate((std::vector<long>({4, -4, 4})), (2)) == (std::vector<long>({4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-3, 2, 1, 2, -1, -2, 1})),\
    \ (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmphmxah5r3: /tmp/tmphmxah5r3.cpp:38: int main(): Assertion `candidate((std::vector<long>({-3,\
    \ -4, 5})), (3)) == (std::vector<long>({-4, -3, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n    std::vector<long> max_arr(k);\n    long max_num = arr[0];\n\
    \    for(long i = 1; i < k; i++) {\n        if(arr[i] > max_num) {\n         \
    \   max_num = arr[i];\n        }\n    }\n    for(long i = 0; i < k; i++) {\n \
    \       if(arr[i] > max_num) {\n            max_arr[i] = arr[i];\n        }\n\
    \    }\n    return max_arr;\n}\nint main() {\n    auto candidate = maximum;\n\
    \    assert(candidate((std::vector<long>({-3, -4, 5})), (3)) == (std::vector<long>({-4,\
    \ -3, 5})));\n    assert(candidate((std::vector<long>({4, -4, 4})), (2)) == (std::vector<long>({4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-3, 2, 1, 2, -1, -2, 1})),\
    \ (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmp8ir51npf: /tmp/tmp8ir51npf.cpp:35: int main(): Assertion `candidate((std::vector<long>({-3,\
    \ -4, 5})), (3)) == (std::vector<long>({-4, -3, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n    // Your code here\n    std::vector<long> max;\n    long\
    \ max_val = arr[0];\n    for(long i = 1; i < arr.size(); i++) {\n        if(arr[i]\
    \ > max_val) {\n            max_val = arr[i];\n        }\n    }\n    for(long\
    \ i = 0; i < k; i++) {\n        max.push_back(max_val);\n    }\n    return max;\n\
    }\nint main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({-3,\
    \ -4, 5})), (3)) == (std::vector<long>({-4, -3, 5})));\n    assert(candidate((std::vector<long>({4,\
    \ -4, 4})), (2)) == (std::vector<long>({4, 4})));\n    assert(candidate((std::vector<long>({-3,\
    \ 2, 1, 2, -1, -2, 1})), (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmpp8otf_cx: /tmp/tmpp8otf_cx.cpp:34: int main(): Assertion `candidate((std::vector<long>({-3,\
    \ -4, 5})), (3)) == (std::vector<long>({-4, -3, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n    // Your code here\n    std::vector<long> ans;\n    long\
    \ max_val = arr[0];\n    long max_idx = -1;\n    for(int i = 1; i < arr.size();\
    \ i++) {\n        if(arr[i] > max_val) {\n            max_val = arr[i];\n    \
    \        max_idx = i;\n        }\n    }\n    ans.push_back(max_val);\n    while(max_idx\
    \ != -1) {\n        ans.push_back(arr[max_idx]);\n        max_idx = max_idx >\
    \ 0 ? max_idx - 1 : 0;\n    }\n    ans.push_back(arr[0]);\n    return ans;\n}\n\
    int main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({-3,\
    \ -4, 5})), (3)) == (std::vector<long>({-4, -3, 5})));\n    assert(candidate((std::vector<long>({4,\
    \ -4, 4})), (2)) == (std::vector<long>({4, 4})));\n    assert(candidate((std::vector<long>({-3,\
    \ 2, 1, 2, -1, -2, 1})), (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n    std::vector<long> max_arr(k);\n    long max_val = arr[0];\n\
    \    for (long i = 1; i < k; i++) {\n        if (arr[i] > max_val) {\n       \
    \     max_val = arr[i];\n        }\n    }\n    for (long i = 0; i < k; i++) {\n\
    \        max_arr[i] = max_val;\n    }\n    return max_arr;\n}\nint main() {\n\
    \    auto candidate = maximum;\n    assert(candidate((std::vector<long>({-3, -4,\
    \ 5})), (3)) == (std::vector<long>({-4, -3, 5})));\n    assert(candidate((std::vector<long>({4,\
    \ -4, 4})), (2)) == (std::vector<long>({4, 4})));\n    assert(candidate((std::vector<long>({-3,\
    \ 2, 1, 2, -1, -2, 1})), (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmpp3fja7av: /tmp/tmpp3fja7av.cpp:33: int main(): Assertion `candidate((std::vector<long>({-3,\
    \ -4, 5})), (3)) == (std::vector<long>({-4, -3, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n    // Your code here\n    std::vector<long> ans;\n    long\
    \ max_val = arr[0];\n    long max_idx = -1;\n    for (long i = 1; i < arr.size();\
    \ i++) {\n        if (arr[i] > max_val) {\n            max_val = arr[i];\n   \
    \         max_idx = i;\n        }\n    }\n    ans.push_back(max_val);\n    ans.push_back(arr[max_idx]);\n\
    \    return ans;\n}\nint main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({-3,\
    \ -4, 5})), (3)) == (std::vector<long>({-4, -3, 5})));\n    assert(candidate((std::vector<long>({4,\
    \ -4, 4})), (2)) == (std::vector<long>({4, 4})));\n    assert(candidate((std::vector<long>({-3,\
    \ 2, 1, 2, -1, -2, 1})), (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmp7vhwftcc: /tmp/tmp7vhwftcc.cpp:35: int main(): Assertion `candidate((std::vector<long>({-3,\
    \ -4, 5})), (3)) == (std::vector<long>({-4, -3, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n    std::vector<long> ans;\n    long max_val = arr[0];\n   \
    \ long max_idx = -1;\n    for (long i = 1; i < arr.size(); i++) {\n        if\
    \ (arr[i] > max_val) {\n            max_val = arr[i];\n            max_idx = i;\n\
    \        }\n    }\n    ans.push_back(max_val);\n    long curr_idx = max_idx;\n\
    \    while (curr_idx > 0 && curr_idx - k >= 0) {\n        ans.push_back(arr[curr_idx\
    \ - k]);\n        curr_idx = curr_idx - k;\n    }\n    return ans;\n}\nint main()\
    \ {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({-3,\
    \ -4, 5})), (3)) == (std::vector<long>({-4, -3, 5})));\n    assert(candidate((std::vector<long>({4,\
    \ -4, 4})), (2)) == (std::vector<long>({4, 4})));\n    assert(candidate((std::vector<long>({-3,\
    \ 2, 1, 2, -1, -2, 1})), (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmpxi47dk9d: /tmp/tmpxi47dk9d.cpp:38: int main(): Assertion `candidate((std::vector<long>({-3,\
    \ -4, 5})), (3)) == (std::vector<long>({-4, -3, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n    std::vector<long> ans;\n    long max_val = arr[0];\n   \
    \ long max_idx = -1;\n    for (size_t i = 0; i < arr.size(); i++) {\n        if\
    \ (arr[i] > max_val) {\n            max_val = arr[i];\n            max_idx = i;\n\
    \        }\n    }\n    ans.push_back(max_val);\n    ans.push_back(arr[max_idx]);\n\
    \    for (size_t i = max_idx + 1; i < arr.size(); i++) {\n        if (arr[i] >\
    \ max_val) {\n            ans.push_back(arr[i]);\n        }\n    }\n    return\
    \ ans;\n}\nint main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({-3,\
    \ -4, 5})), (3)) == (std::vector<long>({-4, -3, 5})));\n    assert(candidate((std::vector<long>({4,\
    \ -4, 4})), (2)) == (std::vector<long>({4, 4})));\n    assert(candidate((std::vector<long>({-3,\
    \ 2, 1, 2, -1, -2, 1})), (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmp2pis80fq: /tmp/tmp2pis80fq.cpp:39: int main(): Assertion `candidate((std::vector<long>({-3,\
    \ -4, 5})), (3)) == (std::vector<long>({-4, -3, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n    // code here\n    std::vector<long> ans;\n    long max_val\
    \ = arr[0];\n    long max_idx = -1;\n    for (long i = 1; i < arr.size(); i++)\
    \ {\n        if (arr[i] > max_val) {\n            max_val = arr[i];\n        \
    \    max_idx = i;\n        }\n    }\n    ans.push_back(max_val);\n    long idx\
    \ = max_idx;\n    for (long i = max_idx + 1; i < arr.size(); i++) {\n        if\
    \ (arr[i] > arr[idx]) {\n            ans.push_back(arr[i]);\n            idx =\
    \ i;\n        }\n    }\n    ans.push_back(arr[idx]);\n    return ans;\n}\nint\
    \ main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({-3,\
    \ -4, 5})), (3)) == (std::vector<long>({-4, -3, 5})));\n    assert(candidate((std::vector<long>({4,\
    \ -4, 4})), (2)) == (std::vector<long>({4, 4})));\n    assert(candidate((std::vector<long>({-3,\
    \ 2, 1, 2, -1, -2, 1})), (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmp6djfguaq: /tmp/tmp6djfguaq.cpp:42: int main(): Assertion `candidate((std::vector<long>({-3,\
    \ -4, 5})), (3)) == (std::vector<long>({-4, -3, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n    std::vector<long> ans;\n    long max_val = arr[0];\n   \
    \ long max_idx = -1;\n    for (size_t i = 0; i < arr.size(); i++) {\n        if\
    \ (arr[i] > max_val) {\n            max_val = arr[i];\n            max_idx = i;\n\
    \        }\n    }\n    ans.push_back(max_val);\n    for (size_t i = 0; i < arr.size()\
    \ - k + 1; i++) {\n        long curr = arr[i];\n        for (size_t j = i + 1;\
    \ j < arr.size() && j < i + k; j++) {\n            if (arr[j] > curr) {\n    \
    \            curr = arr[j];\n            }\n        }\n        ans.push_back(curr);\n\
    \    }\n    return ans;\n}\nint main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({-3,\
    \ -4, 5})), (3)) == (std::vector<long>({-4, -3, 5})));\n    assert(candidate((std::vector<long>({4,\
    \ -4, 4})), (2)) == (std::vector<long>({4, 4})));\n    assert(candidate((std::vector<long>({-3,\
    \ 2, 1, 2, -1, -2, 1})), (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmpxtdmx05p: /tmp/tmpxtdmx05p.cpp:42: int main(): Assertion `candidate((std::vector<long>({-3,\
    \ -4, 5})), (3)) == (std::vector<long>({-4, -3, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n    std::vector<long> ans;\n    long max_val = arr[0];\n   \
    \ long max_idx = -1;\n    for(long i = 1; i < arr.size(); i++) {\n        if(arr[i]\
    \ > max_val) {\n            max_val = arr[i];\n            max_idx = i;\n    \
    \    }\n    }\n    ans.push_back(max_val);\n    while(max_idx != -1) {\n     \
    \   ans.push_back(arr[max_idx]);\n        max_idx = max_idx > 0 ? max_idx - 1\
    \ : 0;\n    }\n    ans.push_back(arr[0]);\n    return ans;\n}\nint main() {\n\
    \    auto candidate = maximum;\n    assert(candidate((std::vector<long>({-3, -4,\
    \ 5})), (3)) == (std::vector<long>({-4, -3, 5})));\n    assert(candidate((std::vector<long>({4,\
    \ -4, 4})), (2)) == (std::vector<long>({4, 4})));\n    assert(candidate((std::vector<long>({-3,\
    \ 2, 1, 2, -1, -2, 1})), (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n    // code here\n    std::vector<long> arr2(arr.size());\n\
    \    long max = 0;\n    long i = 0;\n    long j = 0;\n    long k1 = 0;\n    long\
    \ k2 = 0;\n    long k3 = 0;\n    long k4 = 0;\n    long k5 = 0;\n    long k6 =\
    \ 0;\n    long k7 = 0;\n    long k8 = 0;\n    long k9 = 0;\n    long k10 = 0;\n\
    \    long k11 = 0;\n    long k12 = 0;\n    long k13 = 0;\n    long k14 = 0;\n\
    \    long k15 = 0;\n    long k16 = 0;\n    long k17 = 0;\n    long k18 = 0;\n\
    \    long k19 = 0;\n    long k20 = 0;\n    long k21 = 0;\n    long k22 = 0;\n\
    \    long k23 = 0;\n    long k24 = 0;\n    long k25 = 0;\n    long k26 = 0;\n\
    \    long k27 = 0;\n    long k28 = 0;\n    long k29 = 0;\n    long k30 = 0;\n\
    \    long k31 = 0;\n    long k32 = 0;\n    long k33 = 0;\n    long k34 = 0;\n\
    \    long k35 = 0;\n    long k36 = 0;\n    long k37 = 0;\n    long k38 = 0;\n\
    \    long k39 = 0;\n    long k40 = 0;\n    long k41 = 0;\n    long k42 = 0;\n\
    \    long k43 = 0;\n    long k44 = 0;\n    long k45 = 0;\n    long k46 = 0;\n\
    \    long k47 = 0;\n    long k48 = 0;\n    long k49 = 0;\n    long k50 = 0;\n\
    \    long k51 = 0;\n    long k52 = 0;\n    long k53 = 0;\n    long k54 = 0;\n\
    \    long k55 = 0;\n    long k56 = 0;\n    long k57 = 0;\n    long k58 = 0;\n\
    \    long k59 = 0;\n    long k60 = 0;\n    long k61 = 0;\n    long k62 = 0;\n\
    \    long k63 = 0;\n    long k64 = 0;\n    long k65 = 0;\n    long k66 = 0;\n\
    \    long k67 = 0;\n    long k68 = 0;\n    long k69 = 0;\n    long k70 = 0;\n\
    \    long k71 = 0;\n    long k72 = 0;\n    long k73 = 0;\n    long k74 = 0;\n\
    \    long k75 = 0;\n    long k76 = 0;\n    long k77 = 0;\n    long k78 = 0;\n\
    \    long k79 = 0;\n    long k80 = 0;\n    long k81 = 0;\n    long k82\n}\nint\
    \ main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({-3,\
    \ -4, 5})), (3)) == (std::vector<long>({-4, -3, 5})));\n    assert(candidate((std::vector<long>({4,\
    \ -4, 4})), (2)) == (std::vector<long>({4, 4})));\n    assert(candidate((std::vector<long>({-3,\
    \ 2, 1, 2, -1, -2, 1})), (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpsgz43jtw.cpp: In function \u2018std::vector<long int> maximum(std::vector<long\
    \ int>, long int)\u2019:\n/tmp/tmpsgz43jtw.cpp:106:1: error: expected initializer\
    \ before \u2018}\u2019 token\n  106 | }\n      | ^\n/tmp/tmpsgz43jtw.cpp:106:1:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n    std::vector<long> ans;\n    long max_val = arr[0];\n   \
    \ long max_idx = -1;\n    for (long i = 1; i < arr.size(); i++) {\n        if\
    \ (arr[i] > max_val) {\n            max_val = arr[i];\n            max_idx = i;\n\
    \        }\n    }\n    ans.push_back(max_val);\n    long curr_idx = max_idx;\n\
    \    for (long i = max_idx + 1; i < arr.size(); i++) {\n        if (arr[i] > arr[curr_idx])\
    \ {\n            ans.push_back(arr[i]);\n            curr_idx = i;\n        }\n\
    \    }\n    ans.push_back(arr[curr_idx]);\n    return ans;\n}\nint main() {\n\
    \    auto candidate = maximum;\n    assert(candidate((std::vector<long>({-3, -4,\
    \ 5})), (3)) == (std::vector<long>({-4, -3, 5})));\n    assert(candidate((std::vector<long>({4,\
    \ -4, 4})), (2)) == (std::vector<long>({4, 4})));\n    assert(candidate((std::vector<long>({-3,\
    \ 2, 1, 2, -1, -2, 1})), (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmpqmu5_4fp: /tmp/tmpqmu5_4fp.cpp:41: int main(): Assertion `candidate((std::vector<long>({-3,\
    \ -4, 5})), (3)) == (std::vector<long>({-4, -3, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n    // Your code here\n    std::vector<long> ans;\n    long\
    \ max_val = arr[0];\n    long max_idx = -1;\n    for (long i = 1; i < arr.size();\
    \ i++) {\n        if (arr[i] > max_val) {\n            max_val = arr[i];\n   \
    \         max_idx = i;\n        }\n    }\n    ans.push_back(max_val);\n    long\
    \ cur_idx = max_idx;\n    for (long i = max_idx + 1; i < arr.size(); i++) {\n\
    \        if (arr[i] > arr[cur_idx]) {\n            ans.push_back(arr[i]);\n  \
    \          cur_idx = i;\n        }\n    }\n    ans.push_back(arr[cur_idx]);\n\
    \    return ans;\n}\nint main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({-3,\
    \ -4, 5})), (3)) == (std::vector<long>({-4, -3, 5})));\n    assert(candidate((std::vector<long>({4,\
    \ -4, 4})), (2)) == (std::vector<long>({4, 4})));\n    assert(candidate((std::vector<long>({-3,\
    \ 2, 1, 2, -1, -2, 1})), (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmpq7aqw7j9: /tmp/tmpq7aqw7j9.cpp:42: int main(): Assertion `candidate((std::vector<long>({-3,\
    \ -4, 5})), (3)) == (std::vector<long>({-4, -3, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n    std::vector<long> ans;\n    long max = 0;\n    long i =\
    \ 0;\n    long j = 0;\n    long mid = 0;\n    long cnt = 0;\n    while (i < arr.size())\
    \ {\n        mid = (i + j) / 2;\n        if (arr[mid] > max) {\n            max\
    \ = arr[mid];\n            j = mid;\n        } else {\n            i = mid + 1;\n\
    \        }\n    }\n    mid = (i + j) / 2;\n    ans.push_back(max);\n    while\
    \ (j < arr.size()) {\n        mid = (i + j) / 2;\n        if (arr[mid] > max)\
    \ {\n            max = arr[mid];\n            j = mid;\n        } else {\n   \
    \         i = mid + 1;\n        }\n    }\n    ans.push_back(max);\n    while (j\
    \ < arr.size()) {\n        mid = (i + j) / 2;\n        if (arr[mid] > max) {\n\
    \            max = arr[mid];\n            j = mid;\n        } else {\n       \
    \     i = mid + 1;\n        }\n    }\n    ans.push_back(max);\n    while (j <\
    \ arr.size()) {\n        mid = (i + j) / 2;\n        if (arr[mid] > max) {\n \
    \           max = arr[mid];\n            j = mid;\n        } else {\n        \
    \    i = mid + 1;\n        }\n    }\n    ans.push_back(max);\n    while (j < arr.size())\
    \ {\n        mid = (i + j) / 2;\n        if (arr[mid] > max) {\n            max\
    \ = arr[mid];\n            j = mid;\n        } else {\n            i = mid + 1;\n\
    \        }\n    }\n    ans.push_back(max);\n    while (j < arr.size()) {\n   \
    \     mid = (i + j) / 2;\n        if (arr[mid] > max) {\n            max = arr[mid];\n\
    \            j = mid;\n        } else {\n            i = mid + 1;\n        }\n\
    \    }\n    ans.push_back(max);\n    while (j < arr.size()) {\n        mid = (i\
    \ + j) / 2;\n        if (arr[mid] > max) {\n            max = arr[mid];\n    \
    \        j = mid;\n        } else {\n            i = mid + 1;\n        }\n   \
    \ }\n    ans.push_back(max);\n    while (j < arr.size()) {\n        mid = (i +\
    \ j) / 2;\n        if (arr[mid] > max) {\n            max = arr[mid];\n      \
    \      j = mid;\n        } else {\n            i = mid + 1;\n        }\n    }\n\
    \    ans.push_back(max);\n    while (j < arr.size()) {\n        mid = (i + j)\
    \ / 2;\n        if (arr[mid] > max) {\n            max = arr[mid];\n         \
    \   j = mid;\n        } else {\n            i = mid + 1;\n        }\n    }\n \
    \   ans.push_back(max);\n    while (j < arr.size()) {\n        mid = (i + j) /\
    \ 2;\n\n}\nint main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({-3,\
    \ -4, 5})), (3)) == (std::vector<long>({-4, -3, 5})));\n    assert(candidate((std::vector<long>({4,\
    \ -4, 4})), (2)) == (std::vector<long>({4, 4})));\n    assert(candidate((std::vector<long>({-3,\
    \ 2, 1, 2, -1, -2, 1})), (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpvbn3wn7l.cpp: In function \u2018std::vector<long int> maximum(std::vector<long\
    \ int>, long int)\u2019:\n/tmp/tmpvbn3wn7l.cpp:120:12: error: a function-definition\
    \ is not allowed here before \u2018{\u2019 token\n  120 | int main() {\n     \
    \ |            ^\n/tmp/tmpvbn3wn7l.cpp:133:1: error: expected \u2018}\u2019 at\
    \ end of input\n  133 | }\n      | ^\n/tmp/tmpvbn3wn7l.cpp:18:58: note: to match\
    \ this \u2018{\u2019\n   18 | std::vector<long> maximum(std::vector<long> arr,\
    \ long k) {\n      |                                                         \
    \ ^\n/tmp/tmpvbn3wn7l.cpp:133:1: warning: no return statement in function returning\
    \ non-void [-Wreturn-type]\n  133 | }\n      | ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n    // code here\n    std::vector<long> max_arr(k);\n    long\
    \ max_num = arr[0];\n    for(long i = 1; i < k; i++) {\n        if(arr[i] > max_num)\
    \ {\n            max_num = arr[i];\n        }\n    }\n    for(long i = 0; i <\
    \ k; i++) {\n        if(arr[i] > max_num) {\n            max_arr[i] = arr[i];\n\
    \        }\n    }\n    return max_arr;\n}\nint main() {\n    auto candidate =\
    \ maximum;\n    assert(candidate((std::vector<long>({-3, -4, 5})), (3)) == (std::vector<long>({-4,\
    \ -3, 5})));\n    assert(candidate((std::vector<long>({4, -4, 4})), (2)) == (std::vector<long>({4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-3, 2, 1, 2, -1, -2, 1})),\
    \ (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmplyjck45e: /tmp/tmplyjck45e.cpp:36: int main(): Assertion `candidate((std::vector<long>({-3,\
    \ -4, 5})), (3)) == (std::vector<long>({-4, -3, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n    std::vector<long> res;\n    long max_val = arr[0];\n   \
    \ long max_idx = -1;\n    for (long i = 0; i < arr.size(); i++) {\n        if\
    \ (arr[i] > max_val) {\n            max_val = arr[i];\n            max_idx = i;\n\
    \        }\n    }\n    res.push_back(max_val);\n    res.push_back(arr[max_idx]);\n\
    \    for (long i = max_idx + 1; i < arr.size(); i++) {\n        if (arr[i] > max_val)\
    \ {\n            res.push_back(arr[i]);\n        }\n    }\n    return res;\n}\n\
    int main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({-3,\
    \ -4, 5})), (3)) == (std::vector<long>({-4, -3, 5})));\n    assert(candidate((std::vector<long>({4,\
    \ -4, 4})), (2)) == (std::vector<long>({4, 4})));\n    assert(candidate((std::vector<long>({-3,\
    \ 2, 1, 2, -1, -2, 1})), (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmpk9v1_n15: /tmp/tmpk9v1_n15.cpp:39: int main(): Assertion `candidate((std::vector<long>({-3,\
    \ -4, 5})), (3)) == (std::vector<long>({-4, -3, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n    // Your code here\n    std::vector<long> ans;\n    long\
    \ max = 0;\n    long min = 0;\n    for(long i = 0; i < arr.size(); i++){\n   \
    \     if(arr[i] > max){\n            max = arr[i];\n        }\n        if(arr[i]\
    \ < min){\n            min = arr[i];\n        }\n    }\n    long mid = max;\n\
    \    long count = 0;\n    for(long i = 0; i < arr.size(); i++){\n        if(arr[i]\
    \ == max){\n            count++;\n        }\n    }\n    while(count < k){\n  \
    \      ans.push_back(mid);\n        mid = mid*2;\n        if(mid > max){\n   \
    \         mid = max;\n        }\n        if(mid < min){\n            mid = min;\n\
    \        }\n        count = 0;\n        for(long i = 0; i < arr.size(); i++){\n\
    \            if(arr[i] == mid){\n                count++;\n            }\n   \
    \     }\n    }\n    return ans;\n}\nint main() {\n    auto candidate = maximum;\n\
    \    assert(candidate((std::vector<long>({-3, -4, 5})), (3)) == (std::vector<long>({-4,\
    \ -3, 5})));\n    assert(candidate((std::vector<long>({4, -4, 4})), (2)) == (std::vector<long>({4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-3, 2, 1, 2, -1, -2, 1})),\
    \ (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n    long n = arr.size();\n    std::vector<long> max_arr(n);\n\
    \    long max_index = 0;\n    long max_val = arr[0];\n    for(long i = 1; i <\
    \ n; i++) {\n        if(arr[i] > max_val) {\n            max_val = arr[i];\n \
    \           max_index = i;\n        }\n    }\n    for(long i = 0; i < k; i++)\
    \ {\n        max_arr[max_index] = arr[i];\n        max_index++;\n    }\n    return\
    \ max_arr;\n}\nint main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({-3,\
    \ -4, 5})), (3)) == (std::vector<long>({-4, -3, 5})));\n    assert(candidate((std::vector<long>({4,\
    \ -4, 4})), (2)) == (std::vector<long>({4, 4})));\n    assert(candidate((std::vector<long>({-3,\
    \ 2, 1, 2, -1, -2, 1})), (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "malloc(): corrupted top size\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n    std::vector<long> ans;\n    long max = 0;\n    long min\
    \ = 0;\n    long mid = 0;\n    long count = 0;\n    for (long i = 0; i < arr.size();\
    \ i++) {\n        if (arr[i] > max) {\n            max = arr[i];\n           \
    \ mid = i;\n        }\n        if (arr[i] < min) {\n            min = arr[i];\n\
    \            mid = i;\n        }\n    }\n    for (long i = 0; i < arr.size();\
    \ i++) {\n        if (arr[i] == max) {\n            ans.push_back(arr[mid]);\n\
    \            count++;\n        }\n        if (arr[i] == min) {\n            ans.push_back(arr[mid]);\n\
    \            count++;\n        }\n    }\n    if (count > k) {\n        ans.push_back(arr[mid]);\n\
    \    }\n    return ans;\n}\nint main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({-3,\
    \ -4, 5})), (3)) == (std::vector<long>({-4, -3, 5})));\n    assert(candidate((std::vector<long>({4,\
    \ -4, 4})), (2)) == (std::vector<long>({4, 4})));\n    assert(candidate((std::vector<long>({-3,\
    \ 2, 1, 2, -1, -2, 1})), (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmpio956itb: /tmp/tmpio956itb.cpp:51: int main(): Assertion `candidate((std::vector<long>({-3,\
    \ -4, 5})), (3)) == (std::vector<long>({-4, -3, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n    std::vector<long> ans;\n    long max = 0;\n    long i =\
    \ 0;\n    long j = 0;\n    long n = arr.size();\n    long m = n;\n    while(i\
    \ < n && j < k) {\n        if(arr[i] > arr[j]) {\n            max = arr[i];\n\
    \            i++;\n        } else {\n            max = arr[j];\n            j++;\n\
    \        }\n    }\n    while(i < n) {\n        max = arr[i];\n        i++;\n \
    \       ans.push_back(max);\n    }\n    while(j < k) {\n        max = arr[j];\n\
    \        j++;\n        ans.push_back(max);\n    }\n    return ans;\n}\nint main()\
    \ {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({-3,\
    \ -4, 5})), (3)) == (std::vector<long>({-4, -3, 5})));\n    assert(candidate((std::vector<long>({4,\
    \ -4, 4})), (2)) == (std::vector<long>({4, 4})));\n    assert(candidate((std::vector<long>({-3,\
    \ 2, 1, 2, -1, -2, 1})), (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmpo_9sfh64: /tmp/tmpo_9sfh64.cpp:48: int main(): Assertion `candidate((std::vector<long>({-3,\
    \ -4, 5})), (3)) == (std::vector<long>({-4, -3, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n    long n = arr.size();\n    std::vector<long> max(n);\n  \
    \  long max_val = arr[0];\n    long max_idx = 1;\n    for(long i = 1; i < n; i++)\
    \ {\n        if(arr[i] > max_val) {\n            max_val = arr[i];\n         \
    \   max_idx = i;\n        }\n    }\n    for(long i = 0; i < k; i++) {\n      \
    \  max[max_idx] = arr[i];\n        max_idx++;\n    }\n    return max;\n}\nint\
    \ main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({-3,\
    \ -4, 5})), (3)) == (std::vector<long>({-4, -3, 5})));\n    assert(candidate((std::vector<long>({4,\
    \ -4, 4})), (2)) == (std::vector<long>({4, 4})));\n    assert(candidate((std::vector<long>({-3,\
    \ 2, 1, 2, -1, -2, 1})), (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "malloc(): corrupted top size\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n    std::vector<long> ans;\n    long max = 0;\n    long cur\
    \ = 0;\n    for (long i = 0; i < arr.size(); i++) {\n        if (arr[i] > max)\
    \ {\n            max = arr[i];\n            cur = i;\n        }\n    }\n    ans.push_back(max);\n\
    \    for (long i = cur + 1; i < arr.size(); i++) {\n        if (arr[i] > max)\
    \ {\n            max = arr[i];\n        }\n        ans.push_back(max);\n    }\n\
    \    return ans;\n}\nint main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({-3,\
    \ -4, 5})), (3)) == (std::vector<long>({-4, -3, 5})));\n    assert(candidate((std::vector<long>({4,\
    \ -4, 4})), (2)) == (std::vector<long>({4, 4})));\n    assert(candidate((std::vector<long>({-3,\
    \ 2, 1, 2, -1, -2, 1})), (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmpccrblnvf: /tmp/tmpccrblnvf.cpp:39: int main(): Assertion `candidate((std::vector<long>({-3,\
    \ -4, 5})), (3)) == (std::vector<long>({-4, -3, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n    // Your code here\n    std::vector<long> ans;\n    long\
    \ max = 0;\n    long min = 0;\n    long mid = 0;\n    for (long i = 0; i < arr.size();\
    \ i++) {\n        if (arr[i] > max) {\n            max = arr[i];\n           \
    \ mid = i;\n        }\n        if (arr[i] < min) {\n            min = arr[i];\n\
    \            mid = i;\n        }\n    }\n    long mid1 = mid - k;\n    long mid2\
    \ = mid + k;\n    long mid3 = mid - 1;\n    long mid4 = mid + 1;\n    long mid5\
    \ = mid - 2;\n    long mid6 = mid + 2;\n    long mid7 = mid - 3;\n    long mid8\
    \ = mid + 3;\n    long mid9 = mid - 4;\n    long mid10 = mid + 4;\n    long mid11\
    \ = mid - 5;\n    long mid12 = mid + 5;\n    long mid13 = mid - 6;\n    long mid14\
    \ = mid + 6;\n    long mid15 = mid - 7;\n    long mid16 = mid + 7;\n    long mid17\
    \ = mid - 8;\n    long mid18 = mid + 8;\n    long mid19 = mid - 9;\n    long mid20\
    \ = mid + 9;\n    long mid21 = mid - 10;\n    long mid22 = mid + 10;\n    long\
    \ mid23 = mid - 11;\n    long mid24 = mid + 11;\n    long mid25 = mid - 12;\n\
    \    long mid26 = mid + 12;\n    long mid27 = mid - 13;\n    long mid28 = mid\
    \ + 13;\n    long mid29 = mid - 14;\n    long mid30 = mid + 14;\n    long mid31\
    \ = mid - 15;\n    long mid32 = mid + 15;\n    long mid33 = mid - 16;\n    long\
    \ mid34 = mid + 16;\n    long mid35 = mid - 17;\n    long mid36 = mid + 17;\n\
    \    long mid37 = mid - 18;\n    long mid38 = mid + 18;\n    long mid39 = mid\
    \ - 19;\n    long mid40 = mid + 19;\n    long mid41 = mid - 20;\n    long mid42\
    \ = mid + 20;\n    long mid43 = mid - 21;\n    long mid44 = mid + 21;\n    long\
    \ mid45 = mid - 22;\n    long mid46 = mid + 22;\n    long mid47 = mid - 23;\n\
    \    long mid48 = mid + 23;\n    long mid49 = mid - 24;\n    long \n}\nint main()\
    \ {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({-3,\
    \ -4, 5})), (3)) == (std::vector<long>({-4, -3, 5})));\n    assert(candidate((std::vector<long>({4,\
    \ -4, 4})), (2)) == (std::vector<long>({4, 4})));\n    assert(candidate((std::vector<long>({-3,\
    \ 2, 1, 2, -1, -2, 1})), (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpxy3q4d4y.cpp: In function \u2018std::vector<long int> maximum(std::vector<long\
    \ int>, long int)\u2019:\n/tmp/tmpxy3q4d4y.cpp:84:1: error: expected unqualified-id\
    \ before \u2018}\u2019 token\n   84 | }\n      | ^\n/tmp/tmpxy3q4d4y.cpp:84:1:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n    std::vector<long> res;\n    long max = 0;\n    for (long\
    \ i = 0; i < arr.size(); i++) {\n        if (arr[i] > max) {\n            max\
    \ = arr[i];\n        }\n    }\n    long count = 0;\n    for (long i = 0; i < arr.size();\
    \ i++) {\n        if (arr[i] == max) {\n            count++;\n        }\n    }\n\
    \    if (count == k) {\n        for (long i = 0; i < arr.size(); i++) {\n    \
    \        if (arr[i] == max) {\n                res.push_back(max);\n         \
    \   }\n        }\n    }\n    return res;\n}\nint main() {\n    auto candidate\
    \ = maximum;\n    assert(candidate((std::vector<long>({-3, -4, 5})), (3)) == (std::vector<long>({-4,\
    \ -3, 5})));\n    assert(candidate((std::vector<long>({4, -4, 4})), (2)) == (std::vector<long>({4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-3, 2, 1, 2, -1, -2, 1})),\
    \ (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmpk7ans6q2: /tmp/tmpk7ans6q2.cpp:43: int main(): Assertion `candidate((std::vector<long>({-3,\
    \ -4, 5})), (3)) == (std::vector<long>({-4, -3, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n    std::vector<long> ans;\n    long max_val = arr[0];\n   \
    \ long max_idx = -1;\n    for (long i = 1; i < arr.size(); i++) {\n        if\
    \ (arr[i] > max_val) {\n            max_val = arr[i];\n            max_idx = i;\n\
    \        }\n    }\n    ans.push_back(max_val);\n    long cur_idx = max_idx;\n\
    \    for (long i = max_idx + 1; i < arr.size(); i++) {\n        if (arr[i] > arr[cur_idx])\
    \ {\n            ans.push_back(arr[i]);\n            cur_idx = i;\n        }\n\
    \    }\n    ans.push_back(arr[cur_idx]);\n    return ans;\n}\nint main() {\n \
    \   auto candidate = maximum;\n    assert(candidate((std::vector<long>({-3, -4,\
    \ 5})), (3)) == (std::vector<long>({-4, -3, 5})));\n    assert(candidate((std::vector<long>({4,\
    \ -4, 4})), (2)) == (std::vector<long>({4, 4})));\n    assert(candidate((std::vector<long>({-3,\
    \ 2, 1, 2, -1, -2, 1})), (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmp4qd2oi3m: /tmp/tmp4qd2oi3m.cpp:41: int main(): Assertion `candidate((std::vector<long>({-3,\
    \ -4, 5})), (3)) == (std::vector<long>({-4, -3, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n    std::vector<long> ans;\n    long max = 0;\n    long index\
    \ = 0;\n    for (long i = 0; i < arr.size(); i++) {\n        if (arr[i] > max)\
    \ {\n            max = arr[i];\n            index = i;\n        }\n    }\n   \
    \ ans.push_back(max);\n    long left = 0;\n    long right = arr.size() - 1;\n\
    \    while (left < right) {\n        long mid = (left + right) / 2;\n        if\
    \ (arr[mid] > max) {\n            ans.push_back(arr[mid]);\n            right\
    \ = mid;\n        } else {\n            left = mid;\n        }\n    }\n    if\
    \ (k > ans.size()) {\n        ans.resize(ans.size() + k);\n    }\n    return ans;\n\
    }\nint main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({-3,\
    \ -4, 5})), (3)) == (std::vector<long>({-4, -3, 5})));\n    assert(candidate((std::vector<long>({4,\
    \ -4, 4})), (2)) == (std::vector<long>({4, 4})));\n    assert(candidate((std::vector<long>({-3,\
    \ 2, 1, 2, -1, -2, 1})), (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n    std::vector<long> ans;\n    long max_val = arr[0];\n   \
    \ long max_idx = -1;\n    for (size_t i = 0; i < arr.size(); i++) {\n        if\
    \ (arr[i] > max_val) {\n            max_val = arr[i];\n            max_idx = i;\n\
    \        }\n    }\n    ans.push_back(max_val);\n    for (size_t i = max_idx; i\
    \ < arr.size(); i++) {\n        ans.push_back(arr[i]);\n    }\n    std::sort(ans.begin(),\
    \ ans.end());\n    return ans;\n}\nint main() {\n    auto candidate = maximum;\n\
    \    assert(candidate((std::vector<long>({-3, -4, 5})), (3)) == (std::vector<long>({-4,\
    \ -3, 5})));\n    assert(candidate((std::vector<long>({4, -4, 4})), (2)) == (std::vector<long>({4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-3, 2, 1, 2, -1, -2, 1})),\
    \ (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmp2r92u3dz: /tmp/tmp2r92u3dz.cpp:37: int main(): Assertion `candidate((std::vector<long>({-3,\
    \ -4, 5})), (3)) == (std::vector<long>({-4, -3, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n    std::vector<long> ans;\n    long max = 0;\n    long i =\
    \ 0;\n    long j = 0;\n    long mid = 0;\n    long size = arr.size();\n    while(i\
    \ < size) {\n        mid = i + (size - i) / 2;\n        if(arr[mid] > max) {\n\
    \            max = arr[mid];\n            j = mid;\n        }\n        else if(arr[mid]\
    \ == max) {\n            if(j == mid) {\n                ans.push_back(max);\n\
    \                j++;\n            }\n            else {\n                ans.push_back(max);\n\
    \                j = mid;\n            }\n        }\n        else {\n        \
    \    i = mid + 1;\n        }\n    }\n    return ans;\n}\nint main() {\n    auto\
    \ candidate = maximum;\n    assert(candidate((std::vector<long>({-3, -4, 5})),\
    \ (3)) == (std::vector<long>({-4, -3, 5})));\n    assert(candidate((std::vector<long>({4,\
    \ -4, 4})), (2)) == (std::vector<long>({4, 4})));\n    assert(candidate((std::vector<long>({-3,\
    \ 2, 1, 2, -1, -2, 1})), (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n    std::vector<long> ans;\n    long max = 0;\n    long i =\
    \ 0;\n    long j = 0;\n    long n = arr.size();\n    long mid = n / 2;\n    long\
    \ mid2 = n / 2;\n    while (i < n) {\n        if (arr[i] > max) {\n          \
    \  max = arr[i];\n        }\n        i++;\n    }\n    while (j < n) {\n      \
    \  if (arr[j] > max) {\n            max = arr[j];\n        }\n        j++;\n \
    \   }\n    while (i < n) {\n        if (arr[i] > max) {\n            max = arr[i];\n\
    \        }\n        i++;\n    }\n    while (j < n) {\n        if (arr[j] > max)\
    \ {\n            max = arr[j];\n        }\n        j++;\n    }\n    while (i <\
    \ n) {\n        if (arr[i] > max) {\n            max = arr[i];\n        }\n  \
    \      i++;\n    }\n    while (j < n) {\n        if (arr[j] > max) {\n       \
    \     max = arr[j];\n        }\n        j++;\n    }\n    while (i < n) {\n   \
    \     if (arr[i] > max) {\n            max = arr[i];\n        }\n        i++;\n\
    \    }\n    while (j < n) {\n        if (arr[j] > max) {\n            max = arr[j];\n\
    \        }\n        j++;\n    }\n    while (i < n) {\n        if (arr[i] > max)\
    \ {\n            max = arr[i];\n        }\n        i++;\n    }\n    while (j <\
    \ n) {\n        if (arr[j] > max) {\n            max = arr[j];\n        }\n  \
    \      j++;\n    }\n    while (i < n) {\n        if (arr[i] > max) {\n       \
    \     max = arr[i];\n        }\n        i++;\n    }\n    while (j < n) {\n   \
    \     if (arr[j] > max) {\n            max = arr[j];\n        }\n        j++;\n\
    \    }\n    while (i < n) {\n        if (arr[i] > max) {\n            max = arr[i];\n\
    \        }\n        i++;\n    }\n    while (j < n) {\n        if (arr[j] > max)\
    \ {\n            max = arr[j];\n        }\n        j++;\n    }\n    while (i <\
    \ n) {\n        if (arr[i] > max) {\n            max = arr[i];\n        }\n  \
    \      i++;\n    }\n    while (j < n) {\n        if (arr[j] > max) {\n       \
    \     max = arr[j];\n        }\n        j++;\n    }\n    while (i < n) {\n   \
    \     if (arr[i] > max) {\n            max = arr[i];\n        }\n        i++;\n\
    \    }\n    while (j < n) {\n        if (arr[j] > max) {\n            max = arr[j];\n\
    \        }\n        j++;\n    }\n    while (i < n) {\n        if (arr[i] > max)\
    \ {\n            max = arr[i];\n        }\n        i++;\n    }\n    while (j <\
    \ n) {\n        if (arr[j] > max) {\n            \n}\nint main() {\n    auto candidate\
    \ = maximum;\n    assert(candidate((std::vector<long>({-3, -4, 5})), (3)) == (std::vector<long>({-4,\
    \ -3, 5})));\n    assert(candidate((std::vector<long>({4, -4, 4})), (2)) == (std::vector<long>({4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-3, 2, 1, 2, -1, -2, 1})),\
    \ (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpfmny0aqx.cpp: In function \u2018std::vector<long int> maximum(std::vector<long\
    \ int>, long int)\u2019:\n/tmp/tmpfmny0aqx.cpp:144:12: error: a function-definition\
    \ is not allowed here before \u2018{\u2019 token\n  144 | int main() {\n     \
    \ |            ^\n/tmp/tmpfmny0aqx.cpp:157:1: error: expected \u2018}\u2019 at\
    \ end of input\n  157 | }\n      | ^\n/tmp/tmpfmny0aqx.cpp:140:19: note: to match\
    \ this \u2018{\u2019\n  140 |     while (j < n) {\n      |                   ^\n\
    /tmp/tmpfmny0aqx.cpp:157:1: error: expected \u2018}\u2019 at end of input\n  157\
    \ | }\n      | ^\n/tmp/tmpfmny0aqx.cpp:18:58: note: to match this \u2018{\u2019\
    \n   18 | std::vector<long> maximum(std::vector<long> arr, long k) {\n      |\
    \                                                          ^\n/tmp/tmpfmny0aqx.cpp:157:1:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n\
    \  157 | }\n      | ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n    std::vector<long> ans;\n    long max_val = arr[0];\n   \
    \ long max_idx = -1;\n    for (long i = 1; i < arr.size(); i++) {\n        if\
    \ (arr[i] > max_val) {\n            max_val = arr[i];\n            max_idx = i;\n\
    \        }\n    }\n    ans.push_back(max_val);\n    long idx = max_idx;\n    for\
    \ (long i = max_idx + 1; i < arr.size(); i++) {\n        if (arr[i] > arr[idx])\
    \ {\n            ans.push_back(arr[i]);\n            idx = i;\n        }\n   \
    \ }\n    ans.push_back(arr[idx]);\n    return ans;\n}\nint main() {\n    auto\
    \ candidate = maximum;\n    assert(candidate((std::vector<long>({-3, -4, 5})),\
    \ (3)) == (std::vector<long>({-4, -3, 5})));\n    assert(candidate((std::vector<long>({4,\
    \ -4, 4})), (2)) == (std::vector<long>({4, 4})));\n    assert(candidate((std::vector<long>({-3,\
    \ 2, 1, 2, -1, -2, 1})), (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmpkvwqzgf6: /tmp/tmpkvwqzgf6.cpp:41: int main(): Assertion `candidate((std::vector<long>({-3,\
    \ -4, 5})), (3)) == (std::vector<long>({-4, -3, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n    std::vector<long> res;\n    long max = 0;\n    long index\
    \ = 0;\n    for (long i = 0; i < arr.size(); i++) {\n        if (arr[i] > max)\
    \ {\n            max = arr[i];\n            index = i;\n        }\n    }\n   \
    \ res.push_back(max);\n    for (long i = index; i < arr.size(); i++) {\n     \
    \   if (arr[i] > max) {\n            max = arr[i];\n        }\n    }\n    res.push_back(max);\n\
    \    return res;\n}\nint main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({-3,\
    \ -4, 5})), (3)) == (std::vector<long>({-4, -3, 5})));\n    assert(candidate((std::vector<long>({4,\
    \ -4, 4})), (2)) == (std::vector<long>({4, 4})));\n    assert(candidate((std::vector<long>({-3,\
    \ 2, 1, 2, -1, -2, 1})), (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmp42aswd6u: /tmp/tmp42aswd6u.cpp:39: int main(): Assertion `candidate((std::vector<long>({-3,\
    \ -4, 5})), (3)) == (std::vector<long>({-4, -3, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n    std::vector<long> ans;\n    long max_val = arr[0];\n   \
    \ long max_idx = -1;\n    for (long i = 1; i < arr.size(); i++) {\n        if\
    \ (arr[i] > max_val) {\n            max_val = arr[i];\n            max_idx = i;\n\
    \        }\n    }\n    ans.push_back(max_val);\n    for (long i = max_idx + 1;\
    \ i < arr.size(); i++) {\n        if (arr[i] > max_val) {\n            ans.push_back(arr[i]);\n\
    \        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate = maximum;\n\
    \    assert(candidate((std::vector<long>({-3, -4, 5})), (3)) == (std::vector<long>({-4,\
    \ -3, 5})));\n    assert(candidate((std::vector<long>({4, -4, 4})), (2)) == (std::vector<long>({4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-3, 2, 1, 2, -1, -2, 1})),\
    \ (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmpdfjf4xjk: /tmp/tmpdfjf4xjk.cpp:38: int main(): Assertion `candidate((std::vector<long>({-3,\
    \ -4, 5})), (3)) == (std::vector<long>({-4, -3, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n    std::vector<long> ans;\n    long max_val = arr[0];\n   \
    \ long max_idx = -1;\n    for (long i = 1; i < arr.size(); i++) {\n        if\
    \ (arr[i] > max_val) {\n            max_val = arr[i];\n            max_idx = i;\n\
    \        }\n    }\n    ans.push_back(max_val);\n    long max_idx = max_idx;\n\
    \    for (long i = max_idx + 1; i < arr.size(); i++) {\n        if (arr[i] > max_val)\
    \ {\n            max_val = arr[i];\n            max_idx = i;\n        }\n    }\n\
    \    ans.push_back(max_val);\n    return ans;\n}\nint main() {\n    auto candidate\
    \ = maximum;\n    assert(candidate((std::vector<long>({-3, -4, 5})), (3)) == (std::vector<long>({-4,\
    \ -3, 5})));\n    assert(candidate((std::vector<long>({4, -4, 4})), (2)) == (std::vector<long>({4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-3, 2, 1, 2, -1, -2, 1})),\
    \ (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpe1prdf22.cpp: In function \u2018std::vector<long int> maximum(std::vector<long\
    \ int>, long int)\u2019:\n/tmp/tmpe1prdf22.cpp:29:10: error: redeclaration of\
    \ \u2018long int max_idx\u2019\n   29 |     long max_idx = max_idx;\n      | \
    \         ^~~~~~~\n/tmp/tmpe1prdf22.cpp:21:10: note: \u2018long int max_idx\u2019\
    \ previously declared here\n   21 |     long max_idx = -1;\n      |          ^~~~~~~\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n    // Your code here\n    std::vector<long> max;\n    long\
    \ maxNum = arr[0];\n    for(long i = 1; i < arr.size(); i++) {\n        if(maxNum\
    \ < arr[i]) {\n            maxNum = arr[i];\n        }\n    }\n    max.push_back(maxNum);\n\
    \    for(long i = 1; i < arr.size(); i++) {\n        if(maxNum < arr[i]) {\n \
    \           max.push_back(arr[i]);\n        }\n    }\n    return max;\n}\nint\
    \ main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({-3,\
    \ -4, 5})), (3)) == (std::vector<long>({-4, -3, 5})));\n    assert(candidate((std::vector<long>({4,\
    \ -4, 4})), (2)) == (std::vector<long>({4, 4})));\n    assert(candidate((std::vector<long>({-3,\
    \ 2, 1, 2, -1, -2, 1})), (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmpuw81xbu9: /tmp/tmpuw81xbu9.cpp:37: int main(): Assertion `candidate((std::vector<long>({-3,\
    \ -4, 5})), (3)) == (std::vector<long>({-4, -3, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n    std::vector<long> ans;\n    long max_val = arr[0];\n   \
    \ long max_idx = -1;\n    for (long i = 0; i < arr.size(); i++) {\n        if\
    \ (arr[i] > max_val) {\n            max_val = arr[i];\n            max_idx = i;\n\
    \        }\n    }\n    ans.push_back(max_val);\n    for (long i = max_idx + 1;\
    \ i < arr.size(); i++) {\n        if (arr[i] > max_val) {\n            ans.push_back(arr[i]);\n\
    \        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate = maximum;\n\
    \    assert(candidate((std::vector<long>({-3, -4, 5})), (3)) == (std::vector<long>({-4,\
    \ -3, 5})));\n    assert(candidate((std::vector<long>({4, -4, 4})), (2)) == (std::vector<long>({4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-3, 2, 1, 2, -1, -2, 1})),\
    \ (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmp738y_fhy: /tmp/tmp738y_fhy.cpp:38: int main(): Assertion `candidate((std::vector<long>({-3,\
    \ -4, 5})), (3)) == (std::vector<long>({-4, -3, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n    long n = arr.size();\n    std::vector<long> ans;\n    long\
    \ max_val = arr[0];\n    long max_idx = -1;\n    for (long i = 1; i < n; i++)\
    \ {\n        if (arr[i] > max_val) {\n            max_val = arr[i];\n        \
    \    max_idx = i;\n        }\n    }\n    ans.push_back(max_val);\n    for (long\
    \ i = max_idx + 1; i < n; i++) {\n        if (arr[i] > max_val) {\n          \
    \  ans.push_back(arr[i]);\n        }\n    }\n    return ans;\n}\nint main() {\n\
    \    auto candidate = maximum;\n    assert(candidate((std::vector<long>({-3, -4,\
    \ 5})), (3)) == (std::vector<long>({-4, -3, 5})));\n    assert(candidate((std::vector<long>({4,\
    \ -4, 4})), (2)) == (std::vector<long>({4, 4})));\n    assert(candidate((std::vector<long>({-3,\
    \ 2, 1, 2, -1, -2, 1})), (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmpfavg2ym4: /tmp/tmpfavg2ym4.cpp:39: int main(): Assertion `candidate((std::vector<long>({-3,\
    \ -4, 5})), (3)) == (std::vector<long>({-4, -3, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n    // Your code here\n    std::vector<long> max;\n    long\
    \ maxNum = arr[0];\n    for(long i = 1; i < arr.size(); i++){\n        if(arr[i]\
    \ > maxNum){\n            maxNum = arr[i];\n        }\n    }\n    for(long i =\
    \ 0; i < k; i++){\n        max.push_back(maxNum);\n    }\n    return max;\n}\n\
    int main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({-3,\
    \ -4, 5})), (3)) == (std::vector<long>({-4, -3, 5})));\n    assert(candidate((std::vector<long>({4,\
    \ -4, 4})), (2)) == (std::vector<long>({4, 4})));\n    assert(candidate((std::vector<long>({-3,\
    \ 2, 1, 2, -1, -2, 1})), (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmpykebx22n: /tmp/tmpykebx22n.cpp:34: int main(): Assertion `candidate((std::vector<long>({-3,\
    \ -4, 5})), (3)) == (std::vector<long>({-4, -3, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n    // Your code here\n    std::vector<long> ans;\n    long\
    \ max = 0;\n    long min = 0;\n    long count = 0;\n    for(long i = 0; i < arr.size();\
    \ i++) {\n        if(arr[i] > max) {\n            max = arr[i];\n            ans.clear();\n\
    \            ans.push_back(max);\n            count++;\n        }\n        if(arr[i]\
    \ < min) {\n            min = arr[i];\n            ans.clear();\n            ans.push_back(min);\n\
    \            count++;\n        }\n        if(arr[i] == max) {\n            ans.push_back(max);\n\
    \            count++;\n        }\n        if(arr[i] == min) {\n            ans.push_back(min);\n\
    \            count++;\n        }\n    }\n    if(count == k) {\n        ans.push_back(max);\n\
    \        ans.push_back(min);\n    }\n    return ans;\n}\nint main() {\n    auto\
    \ candidate = maximum;\n    assert(candidate((std::vector<long>({-3, -4, 5})),\
    \ (3)) == (std::vector<long>({-4, -3, 5})));\n    assert(candidate((std::vector<long>({4,\
    \ -4, 4})), (2)) == (std::vector<long>({4, 4})));\n    assert(candidate((std::vector<long>({-3,\
    \ 2, 1, 2, -1, -2, 1})), (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmppcprtsjg: /tmp/tmppcprtsjg.cpp:54: int main(): Assertion `candidate((std::vector<long>({-3,\
    \ -4, 5})), (3)) == (std::vector<long>({-4, -3, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n    // Your code here\n    std::vector<long> max;\n    long\
    \ maxNum = arr[0];\n    for(long i = 1; i < arr.size(); i++){\n        if(arr[i]\
    \ > maxNum){\n            maxNum = arr[i];\n        }\n    }\n    max.push_back(maxNum);\n\
    \    for(long i = 1; i < arr.size(); i++){\n        if(arr[i] > maxNum){\n   \
    \         max.push_back(arr[i]);\n        }\n    }\n    return max;\n}\nint main()\
    \ {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({-3,\
    \ -4, 5})), (3)) == (std::vector<long>({-4, -3, 5})));\n    assert(candidate((std::vector<long>({4,\
    \ -4, 4})), (2)) == (std::vector<long>({4, 4})));\n    assert(candidate((std::vector<long>({-3,\
    \ 2, 1, 2, -1, -2, 1})), (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmpv9gx0e69: /tmp/tmpv9gx0e69.cpp:37: int main(): Assertion `candidate((std::vector<long>({-3,\
    \ -4, 5})), (3)) == (std::vector<long>({-4, -3, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n    long long max = 0;\n    std::vector<long> ans;\n    for(long\
    \ i = 0; i < k; i++) {\n        max = std::max(max, arr[i]);\n        ans.push_back(max);\n\
    \    }\n    return ans;\n}\nint main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({-3,\
    \ -4, 5})), (3)) == (std::vector<long>({-4, -3, 5})));\n    assert(candidate((std::vector<long>({4,\
    \ -4, 4})), (2)) == (std::vector<long>({4, 4})));\n    assert(candidate((std::vector<long>({-3,\
    \ 2, 1, 2, -1, -2, 1})), (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpo780j602.cpp: In function \u2018std::vector<long int> maximum(std::vector<long\
    \ int>, long int)\u2019:\n/tmp/tmpo780j602.cpp:22:35: error: no matching function\
    \ for call to \u2018max(long long int&, __gnu_cxx::__alloc_traits<std::allocator<long\
    \ int>, long int>::value_type&)\u2019\n   22 |         max = std::max(max, arr[i]);\n\
    \      |                                   ^\nIn file included from /usr/include/c++/9/bits/char_traits.h:39,\n\
    \                 from /usr/include/c++/9/ios:40,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmpo780j602.cpp:2:\n/usr/include/c++/9/bits/stl_algobase.h:222:5: note:\
    \ candidate: \u2018template<class _Tp> constexpr const _Tp& std::max(const _Tp&,\
    \ const _Tp&)\u2019\n  222 |     max(const _Tp& __a, const _Tp& __b)\n      |\
    \     ^~~\n/usr/include/c++/9/bits/stl_algobase.h:222:5: note:   template argument\
    \ deduction/substitution failed:\n/tmp/tmpo780j602.cpp:22:35: note:   deduced\
    \ conflicting types for parameter \u2018const _Tp\u2019 (\u2018long long int\u2019\
    \ and \u2018__gnu_cxx::__alloc_traits<std::allocator<long int>, long int>::value_type\u2019\
    \ {aka \u2018long int\u2019})\n   22 |         max = std::max(max, arr[i]);\n\
    \      |                                   ^\nIn file included from /usr/include/c++/9/bits/char_traits.h:39,\n\
    \                 from /usr/include/c++/9/ios:40,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmpo780j602.cpp:2:\n/usr/include/c++/9/bits/stl_algobase.h:268:5: note:\
    \ candidate: \u2018template<class _Tp, class _Compare> constexpr const _Tp& std::max(const\
    \ _Tp&, const _Tp&, _Compare)\u2019\n  268 |     max(const _Tp& __a, const _Tp&\
    \ __b, _Compare __comp)\n      |     ^~~\n/usr/include/c++/9/bits/stl_algobase.h:268:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmpo780j602.cpp:22:35:\
    \ note:   deduced conflicting types for parameter \u2018const _Tp\u2019 (\u2018\
    long long int\u2019 and \u2018__gnu_cxx::__alloc_traits<std::allocator<long int>,\
    \ long int>::value_type\u2019 {aka \u2018long int\u2019})\n   22 |         max\
    \ = std::max(max, arr[i]);\n      |                                   ^\nIn file\
    \ included from /usr/include/c++/9/algorithm:62,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpo780j602.cpp:2:\n/usr/include/c++/9/bits/stl_algo.h:3462:5:\
    \ note: candidate: \u2018template<class _Tp> constexpr _Tp std::max(std::initializer_list<_Tp>)\u2019\
    \n 3462 |     max(initializer_list<_Tp> __l)\n      |     ^~~\n/usr/include/c++/9/bits/stl_algo.h:3462:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmpo780j602.cpp:22:35:\
    \ note:   mismatched types \u2018std::initializer_list<_Tp>\u2019 and \u2018long\
    \ long int\u2019\n   22 |         max = std::max(max, arr[i]);\n      |      \
    \                             ^\nIn file included from /usr/include/c++/9/algorithm:62,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpo780j602.cpp:2:\n/usr/include/c++/9/bits/stl_algo.h:3468:5:\
    \ note: candidate: \u2018template<class _Tp, class _Compare> constexpr _Tp std::max(std::initializer_list<_Tp>,\
    \ _Compare)\u2019\n 3468 |     max(initializer_list<_Tp> __l, _Compare __comp)\n\
    \      |     ^~~\n/usr/include/c++/9/bits/stl_algo.h:3468:5: note:   template\
    \ argument deduction/substitution failed:\n/tmp/tmpo780j602.cpp:22:35: note: \
    \  mismatched types \u2018std::initializer_list<_Tp>\u2019 and \u2018long long\
    \ int\u2019\n   22 |         max = std::max(max, arr[i]);\n      |           \
    \                        ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n    // Your code here\n    std::vector<long> ans;\n    long\
    \ max = 0;\n    long min = 0;\n    long sum = 0;\n    for(long i = 0; i < arr.size();\
    \ i++) {\n        sum += arr[i];\n        if(sum > max) {\n            max = sum;\n\
    \        }\n        if(sum < min) {\n            min = sum;\n        }\n    }\n\
    \    for(long i = 0; i < arr.size(); i++) {\n        sum += arr[i];\n        if(sum\
    \ > max) {\n            max = sum;\n        }\n        if(sum < min) {\n     \
    \       min = sum;\n        }\n    }\n    for(long i = 0; i < arr.size(); i++)\
    \ {\n        sum += arr[i];\n        if(sum > max) {\n            max = sum;\n\
    \        }\n        if(sum < min) {\n            min = sum;\n        }\n    }\n\
    \    for(long i = 0; i < arr.size(); i++) {\n        sum += arr[i];\n        if(sum\
    \ > max) {\n            max = sum;\n        }\n        if(sum < min) {\n     \
    \       min = sum;\n        }\n    }\n    for(long i = 0; i < arr.size(); i++)\
    \ {\n        sum += arr[i];\n        if(sum > max) {\n            max = sum;\n\
    \        }\n        if(sum < min) {\n            min = sum;\n        }\n    }\n\
    \    for(long i = 0; i < arr.size(); i++) {\n        sum += arr[i];\n        if(sum\
    \ > max) {\n            max = sum;\n        }\n        if(sum < min) {\n     \
    \       min = sum;\n        }\n    }\n    for(long i = 0; i < arr.size(); i++)\
    \ {\n        sum += arr[i];\n        if(sum > max) {\n            max = sum;\n\
    \        }\n        if(sum < min) {\n            min = sum;\n        }\n    }\n\
    \    for(long i = 0; i < arr.size(); i++) {\n        sum += arr[i];\n        if(sum\
    \ > max) {\n            max = sum;\n        }\n        if(sum < min) {\n     \
    \       min = sum;\n        }\n    }\n    for(long i = 0; i < arr.size(); i++)\
    \ {\n        sum += arr[i];\n        if(sum > max) {\n            max = sum;\n\
    \        }\n        if(sum < min) {\n            min = sum;\n        }\n    }\n\
    \    for(long i = 0; i < arr.size(); i++) {\n        sum += arr[i];\n        if(sum\
    \ > max) {\n            max = sum;\n        }\n        if(sum < min) {\n     \
    \       min = sum;\n        }\n    }\n    for(long i = 0; i < arr.size(); i++)\
    \ {\n        sum += arr[i];\n        if(sum > max) {\n            max = sum;\n\
    \        }\n        if(sum < min) {\n            min = sum;\n        }\n    }\n\
    \    for(long i = 0; i < arr.size(); i++) {\n        sum += arr[i];\n        if(sum\
    \ > max) {\n            max = sum;\n        }\n        if(sum < min) {\n     \
    \       min = \n}\nint main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({-3,\
    \ -4, 5})), (3)) == (std::vector<long>({-4, -3, 5})));\n    assert(candidate((std::vector<long>({4,\
    \ -4, 4})), (2)) == (std::vector<long>({4, 4})));\n    assert(candidate((std::vector<long>({-3,\
    \ 2, 1, 2, -1, -2, 1})), (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp_1_rh9u5.cpp: In function \u2018std::vector<long int> maximum(std::vector<long\
    \ int>, long int)\u2019:\n/tmp/tmp_1_rh9u5.cpp:130:1: error: expected primary-expression\
    \ before \u2018}\u2019 token\n  130 | }\n      | ^\n/tmp/tmp_1_rh9u5.cpp:131:12:\
    \ error: a function-definition is not allowed here before \u2018{\u2019 token\n\
    \  131 | int main() {\n      |            ^\n/tmp/tmp_1_rh9u5.cpp:144:1: error:\
    \ expected \u2018}\u2019 at end of input\n  144 | }\n      | ^\n/tmp/tmp_1_rh9u5.cpp:123:42:\
    \ note: to match this \u2018{\u2019\n  123 |     for(long i = 0; i < arr.size();\
    \ i++) {\n      |                                          ^\n/tmp/tmp_1_rh9u5.cpp:144:1:\
    \ error: expected \u2018}\u2019 at end of input\n  144 | }\n      | ^\n/tmp/tmp_1_rh9u5.cpp:18:58:\
    \ note: to match this \u2018{\u2019\n   18 | std::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n      |                                                    \
    \      ^\n/tmp/tmp_1_rh9u5.cpp:144:1: warning: no return statement in function\
    \ returning non-void [-Wreturn-type]\n  144 | }\n      | ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n    std::vector<long> ans;\n    long max_val = arr[0];\n   \
    \ long max_idx = -1;\n    for(long i = 1; i < arr.size(); i++) {\n        if(arr[i]\
    \ > max_val) {\n            max_val = arr[i];\n            max_idx = i;\n    \
    \    }\n    }\n    ans.push_back(max_val);\n    for(long i = max_idx + 1; i <\
    \ arr.size(); i++) {\n        if(arr[i] > max_val) {\n            ans.push_back(arr[i]);\n\
    \        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate = maximum;\n\
    \    assert(candidate((std::vector<long>({-3, -4, 5})), (3)) == (std::vector<long>({-4,\
    \ -3, 5})));\n    assert(candidate((std::vector<long>({4, -4, 4})), (2)) == (std::vector<long>({4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-3, 2, 1, 2, -1, -2, 1})),\
    \ (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmp8gc72q7b: /tmp/tmp8gc72q7b.cpp:38: int main(): Assertion `candidate((std::vector<long>({-3,\
    \ -4, 5})), (3)) == (std::vector<long>({-4, -3, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n    long n = arr.size();\n    std::vector<long> ans;\n    long\
    \ max_val = arr[0];\n    long max_idx = -1;\n    for (long i = 1; i < n; i++)\
    \ {\n        if (arr[i] > max_val) {\n            max_val = arr[i];\n        \
    \    max_idx = i;\n        }\n    }\n    ans.push_back(max_val);\n    for (long\
    \ i = max_idx + 1; i < n; i++) {\n        if (arr[i] > max_val) {\n          \
    \  ans.push_back(arr[i]);\n        }\n    }\n    return ans;\n}\nint main() {\n\
    \    auto candidate = maximum;\n    assert(candidate((std::vector<long>({-3, -4,\
    \ 5})), (3)) == (std::vector<long>({-4, -3, 5})));\n    assert(candidate((std::vector<long>({4,\
    \ -4, 4})), (2)) == (std::vector<long>({4, 4})));\n    assert(candidate((std::vector<long>({-3,\
    \ 2, 1, 2, -1, -2, 1})), (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmpvkevc0oa: /tmp/tmpvkevc0oa.cpp:39: int main(): Assertion `candidate((std::vector<long>({-3,\
    \ -4, 5})), (3)) == (std::vector<long>({-4, -3, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n    std::vector<long> ans;\n    long max = 0;\n    long curr\
    \ = 0;\n    for (long i = 0; i < arr.size(); i++) {\n        if (arr[i] > max)\
    \ {\n            max = arr[i];\n        }\n    }\n    for (long i = 0; i < arr.size();\
    \ i++) {\n        if (arr[i] > max) {\n            ans.push_back(max);\n     \
    \       max = arr[i];\n        }\n    }\n    return ans;\n}\nint main() {\n  \
    \  auto candidate = maximum;\n    assert(candidate((std::vector<long>({-3, -4,\
    \ 5})), (3)) == (std::vector<long>({-4, -3, 5})));\n    assert(candidate((std::vector<long>({4,\
    \ -4, 4})), (2)) == (std::vector<long>({4, 4})));\n    assert(candidate((std::vector<long>({-3,\
    \ 2, 1, 2, -1, -2, 1})), (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmp6iw96ebt: /tmp/tmp6iw96ebt.cpp:37: int main(): Assertion `candidate((std::vector<long>({-3,\
    \ -4, 5})), (3)) == (std::vector<long>({-4, -3, 5}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n    std::vector<long> ans;\n    long max_val = arr[0];\n   \
    \ long max_idx = -1;\n    for(long i = 1; i < arr.size(); i++) {\n        if(arr[i]\
    \ > max_val) {\n            max_val = arr[i];\n            max_idx = i;\n    \
    \    }\n    }\n    ans.push_back(max_val);\n    while(max_idx != -1) {\n     \
    \   ans.push_back(arr[max_idx]);\n        max_idx = max_idx > 0 ? max_idx - 1\
    \ : 0;\n    }\n    ans.push_back(arr[0]);\n    return ans;\n}\nint main() {\n\
    \    auto candidate = maximum;\n    assert(candidate((std::vector<long>({-3, -4,\
    \ 5})), (3)) == (std::vector<long>({-4, -3, 5})));\n    assert(candidate((std::vector<long>({4,\
    \ -4, 4})), (2)) == (std::vector<long>({4, 4})));\n    assert(candidate((std::vector<long>({-3,\
    \ 2, 1, 2, -1, -2, 1})), (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// Input: arr = [-3, -4, 5], k\
    \ = 3\n// Output: [-4, -3, 5]\n// Example 2:\n// Input: arr = [4, -4, 4], k =\
    \ 2\n// Output: [4, 4]\n// Example 3:\n// Input: arr = [-3, 2, 1, 2, -1, -2, 1],\
    \ k = 1\n// Output: [2]\n// Note:\n// 1. The length of the array will be in the\
    \ range of [1, 1000].\n// 2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n// 3. 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long>\
    \ arr, long k) {\n    std::vector<long> ans;\n    long max_val = arr[0];\n   \
    \ long max_idx = -1;\n    for(long i = 1; i < arr.size(); i++) {\n        if(arr[i]\
    \ > max_val) {\n            max_val = arr[i];\n            max_idx = i;\n    \
    \    }\n    }\n    ans.push_back(max_val);\n    for(long i = max_idx + 1; i <\
    \ arr.size(); i++) {\n        if(arr[i] > max_val) {\n            ans.push_back(arr[i]);\n\
    \        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate = maximum;\n\
    \    assert(candidate((std::vector<long>({-3, -4, 5})), (3)) == (std::vector<long>({-4,\
    \ -3, 5})));\n    assert(candidate((std::vector<long>({4, -4, 4})), (2)) == (std::vector<long>({4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-3, 2, 1, 2, -1, -2, 1})),\
    \ (1)) == (std::vector<long>({2})));\n    assert(candidate((std::vector<long>({123,\
    \ -123, 20, 0, 1, 2, -3})), (3)) == (std::vector<long>({2, 20, 123})));\n    assert(candidate((std::vector<long>({-123,\
    \ 20, 0, 1, 2, -3})), (4)) == (std::vector<long>({0, 1, 2, 20})));\n    assert(candidate((std::vector<long>({5,\
    \ 15, 0, 3, -13, -8, 0})), (7)) == (std::vector<long>({-13, -8, 0, 0, 3, 5, 15})));\n\
    \    assert(candidate((std::vector<long>({-1, 0, 2, 5, 3, -10})), (2)) == (std::vector<long>({3,\
    \ 5})));\n    assert(candidate((std::vector<long>({1, 0, 5, -7})), (1)) == (std::vector<long>({5})));\n\
    \    assert(candidate((std::vector<long>({4, -4})), (2)) == (std::vector<long>({-4,\
    \ 4})));\n    assert(candidate((std::vector<long>({-10, 10})), (2)) == (std::vector<long>({-10,\
    \ 10})));\n    assert(candidate((std::vector<long>({1, 2, 3, -23, 243, -400, 0})),\
    \ (0)) == (std::vector<long>()));\n}\n"
  stdout: ''
  stderr: "tmpzsi17zdd: /tmp/tmpzsi17zdd.cpp:38: int main(): Assertion `candidate((std::vector<long>({-3,\
    \ -4, 5})), (3)) == (std::vector<long>({-4, -3, 5}))' failed.\n"
  exit_code: -6
  status: Exception
