name: HumanEval_69_search
language: cpp
results:
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the list.\n// If no such a value exist, return -1.\n// Examples:\n// search([4,\
    \ 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n// search([5,\
    \ 5, 4, 4, 4]) == -1\nlong search(std::vector<long> lst) {\n    long ans = -1;\n\
    \    long freq[100];\n    long i = 0;\n    for (auto it : lst) {\n        freq[i++]\
    \ = it;\n    }\n    for (long j = 0; j < i; j++) {\n        if (freq[j] >= ans)\
    \ {\n            ans = freq[j];\n        }\n    }\n    return ans;\n}\nint main()\
    \ {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5, 1}))) == (1));\n    assert(candidate((std::vector<long>({4, 1, 4, 1,\
    \ 4, 4}))) == (4));\n    assert(candidate((std::vector<long>({3, 3}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({8, 8, 8, 8, 8, 8, 8, 8}))) == (8));\n\
    \    assert(candidate((std::vector<long>({2, 3, 3, 2, 2}))) == (2));\n    assert(candidate((std::vector<long>({2,\
    \ 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 2, 8, 2}))) == (2));\n    assert(candidate((std::vector<long>({6,\
    \ 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}))) == (1));\n    assert(candidate((std::vector<long>({8,\
    \ 8, 3, 6, 5, 6, 4}))) == (-1));\n    assert(candidate((std::vector<long>({6,\
    \ 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9})))\
    \ == (1));\n    assert(candidate((std::vector<long>({1, 9, 10, 1, 3}))) == (1));\n\
    \    assert(candidate((std::vector<long>({6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10,\
    \ 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}))) == (5));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({8, 8, 10, 6, 4, 3, 5, 8,\
    \ 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}))) == (4));\n    assert(candidate((std::vector<long>({2,\
    \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}))) == (2));\n    assert(candidate((std::vector<long>({1,\
    \ 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}))) == (1));\n    assert(candidate((std::vector<long>({9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}))) == (4));\n    assert(candidate((std::vector<long>({2, 6, 4,\
    \ 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}))) == (4));\n\
    \    assert(candidate((std::vector<long>({9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10,\
    \ 3, 8, 2, 6, 2, 3, 1}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({10}))) == (-1));\n    assert(candidate((std::vector<long>({9,\
    \ 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}))) == (1));\n    assert(candidate((std::vector<long>({7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 10, 10, 9, 2}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmp1gmwxz1n: /tmp/tmp1gmwxz1n.cpp:27: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 5, 5, 5, 1}))) == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the list.\n// If no such a value exist, return -1.\n// Examples:\n// search([4,\
    \ 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n// search([5,\
    \ 5, 4, 4, 4]) == -1\nlong search(std::vector<long> lst) {\n    long ans = -1;\n\
    \    long freq = 0;\n    for (long i : lst) {\n        freq += i;\n        if\
    \ (freq >= i) {\n            ans = i;\n            break;\n        }\n    }\n\
    \    return ans;\n}\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5, 1}))) == (1));\n    assert(candidate((std::vector<long>({4, 1, 4, 1,\
    \ 4, 4}))) == (4));\n    assert(candidate((std::vector<long>({3, 3}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({8, 8, 8, 8, 8, 8, 8, 8}))) == (8));\n\
    \    assert(candidate((std::vector<long>({2, 3, 3, 2, 2}))) == (2));\n    assert(candidate((std::vector<long>({2,\
    \ 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 2, 8, 2}))) == (2));\n    assert(candidate((std::vector<long>({6,\
    \ 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}))) == (1));\n    assert(candidate((std::vector<long>({8,\
    \ 8, 3, 6, 5, 6, 4}))) == (-1));\n    assert(candidate((std::vector<long>({6,\
    \ 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9})))\
    \ == (1));\n    assert(candidate((std::vector<long>({1, 9, 10, 1, 3}))) == (1));\n\
    \    assert(candidate((std::vector<long>({6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10,\
    \ 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}))) == (5));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({8, 8, 10, 6, 4, 3, 5, 8,\
    \ 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}))) == (4));\n    assert(candidate((std::vector<long>({2,\
    \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}))) == (2));\n    assert(candidate((std::vector<long>({1,\
    \ 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}))) == (1));\n    assert(candidate((std::vector<long>({9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}))) == (4));\n    assert(candidate((std::vector<long>({2, 6, 4,\
    \ 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}))) == (4));\n\
    \    assert(candidate((std::vector<long>({9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10,\
    \ 3, 8, 2, 6, 2, 3, 1}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({10}))) == (-1));\n    assert(candidate((std::vector<long>({9,\
    \ 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}))) == (1));\n    assert(candidate((std::vector<long>({7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 10, 10, 9, 2}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmphfc0u228: /tmp/tmphfc0u228.cpp:25: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 5, 5, 5, 1}))) == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the list.\n// If no such a value exist, return -1.\n// Examples:\n// search([4,\
    \ 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n// search([5,\
    \ 5, 4, 4, 4]) == -1\nlong search(std::vector<long> lst) {\n    long ans = -1;\n\
    \    long freq[1000];\n    for (long i : lst) {\n        freq[i] = freq[i] + 1;\n\
    \    }\n    for (long i : lst) {\n        if (freq[i] >= i) {\n            ans\
    \ = i;\n            break;\n        }\n    }\n    return ans;\n}\nint main() {\n\
    \    auto candidate = search;\n    assert(candidate((std::vector<long>({5, 5,\
    \ 5, 5, 1}))) == (1));\n    assert(candidate((std::vector<long>({4, 1, 4, 1, 4,\
    \ 4}))) == (4));\n    assert(candidate((std::vector<long>({3, 3}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({8, 8, 8, 8, 8, 8, 8, 8}))) == (8));\n\
    \    assert(candidate((std::vector<long>({2, 3, 3, 2, 2}))) == (2));\n    assert(candidate((std::vector<long>({2,\
    \ 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 2, 8, 2}))) == (2));\n    assert(candidate((std::vector<long>({6,\
    \ 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}))) == (1));\n    assert(candidate((std::vector<long>({8,\
    \ 8, 3, 6, 5, 6, 4}))) == (-1));\n    assert(candidate((std::vector<long>({6,\
    \ 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9})))\
    \ == (1));\n    assert(candidate((std::vector<long>({1, 9, 10, 1, 3}))) == (1));\n\
    \    assert(candidate((std::vector<long>({6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10,\
    \ 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}))) == (5));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({8, 8, 10, 6, 4, 3, 5, 8,\
    \ 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}))) == (4));\n    assert(candidate((std::vector<long>({2,\
    \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}))) == (2));\n    assert(candidate((std::vector<long>({1,\
    \ 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}))) == (1));\n    assert(candidate((std::vector<long>({9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}))) == (4));\n    assert(candidate((std::vector<long>({2, 6, 4,\
    \ 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}))) == (4));\n\
    \    assert(candidate((std::vector<long>({9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10,\
    \ 3, 8, 2, 6, 2, 3, 1}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({10}))) == (-1));\n    assert(candidate((std::vector<long>({9,\
    \ 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}))) == (1));\n    assert(candidate((std::vector<long>({7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 10, 10, 9, 2}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmpvhmt4ioa: /tmp/tmpvhmt4ioa.cpp:32: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}))) == (1)'\
    \ failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the list.\n// If no such a value exist, return -1.\n// Examples:\n// search([4,\
    \ 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n// search([5,\
    \ 5, 4, 4, 4]) == -1\nlong search(std::vector<long> lst) {\n    long ans = -1;\n\
    \    long freq[100] = {0};\n    for (long i : lst) {\n        freq[i]++;\n   \
    \ }\n    for (long i : lst) {\n        if (freq[i] > ans) {\n            ans =\
    \ freq[i];\n        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate\
    \ = search;\n    assert(candidate((std::vector<long>({5, 5, 5, 5, 1}))) == (1));\n\
    \    assert(candidate((std::vector<long>({4, 1, 4, 1, 4, 4}))) == (4));\n    assert(candidate((std::vector<long>({3,\
    \ 3}))) == (-1));\n    assert(candidate((std::vector<long>({8, 8, 8, 8, 8, 8,\
    \ 8, 8}))) == (8));\n    assert(candidate((std::vector<long>({2, 3, 3, 2, 2})))\
    \ == (2));\n    assert(candidate((std::vector<long>({2, 7, 8, 8, 4, 8, 7, 3, 9,\
    \ 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}))) == (1));\n    assert(candidate((std::vector<long>({3,\
    \ 2, 8, 2}))) == (2));\n    assert(candidate((std::vector<long>({6, 7, 1, 8, 8,\
    \ 10, 5, 8, 5, 3, 10}))) == (1));\n    assert(candidate((std::vector<long>({8,\
    \ 8, 3, 6, 5, 6, 4}))) == (-1));\n    assert(candidate((std::vector<long>({6,\
    \ 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9})))\
    \ == (1));\n    assert(candidate((std::vector<long>({1, 9, 10, 1, 3}))) == (1));\n\
    \    assert(candidate((std::vector<long>({6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10,\
    \ 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}))) == (5));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({8, 8, 10, 6, 4, 3, 5, 8,\
    \ 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}))) == (4));\n    assert(candidate((std::vector<long>({2,\
    \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}))) == (2));\n    assert(candidate((std::vector<long>({1,\
    \ 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}))) == (1));\n    assert(candidate((std::vector<long>({9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}))) == (4));\n    assert(candidate((std::vector<long>({2, 6, 4,\
    \ 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}))) == (4));\n\
    \    assert(candidate((std::vector<long>({9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10,\
    \ 3, 8, 2, 6, 2, 3, 1}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({10}))) == (-1));\n    assert(candidate((std::vector<long>({9,\
    \ 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}))) == (1));\n    assert(candidate((std::vector<long>({7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 10, 10, 9, 2}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmpjhq35eei: /tmp/tmpjhq35eei.cpp:26: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 5, 5, 5, 1}))) == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the list.\n// If no such a value exist, return -1.\n// Examples:\n// search([4,\
    \ 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n// search([5,\
    \ 5, 4, 4, 4]) == -1\nlong search(std::vector<long> lst) {\n    long maxVal =\
    \ lst[0];\n    long maxFreq = lst[0];\n    for (long i : lst) {\n        if (i\
    \ > maxVal) {\n            maxVal = i;\n            maxFreq = i;\n        } else\
    \ if (i == maxVal) {\n            maxFreq++;\n        }\n    }\n    return maxVal\
    \ >= 0 ? maxVal : -1;\n}\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5, 1}))) == (1));\n    assert(candidate((std::vector<long>({4, 1, 4, 1,\
    \ 4, 4}))) == (4));\n    assert(candidate((std::vector<long>({3, 3}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({8, 8, 8, 8, 8, 8, 8, 8}))) == (8));\n\
    \    assert(candidate((std::vector<long>({2, 3, 3, 2, 2}))) == (2));\n    assert(candidate((std::vector<long>({2,\
    \ 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 2, 8, 2}))) == (2));\n    assert(candidate((std::vector<long>({6,\
    \ 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}))) == (1));\n    assert(candidate((std::vector<long>({8,\
    \ 8, 3, 6, 5, 6, 4}))) == (-1));\n    assert(candidate((std::vector<long>({6,\
    \ 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9})))\
    \ == (1));\n    assert(candidate((std::vector<long>({1, 9, 10, 1, 3}))) == (1));\n\
    \    assert(candidate((std::vector<long>({6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10,\
    \ 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}))) == (5));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({8, 8, 10, 6, 4, 3, 5, 8,\
    \ 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}))) == (4));\n    assert(candidate((std::vector<long>({2,\
    \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}))) == (2));\n    assert(candidate((std::vector<long>({1,\
    \ 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}))) == (1));\n    assert(candidate((std::vector<long>({9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}))) == (4));\n    assert(candidate((std::vector<long>({2, 6, 4,\
    \ 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}))) == (4));\n\
    \    assert(candidate((std::vector<long>({9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10,\
    \ 3, 8, 2, 6, 2, 3, 1}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({10}))) == (-1));\n    assert(candidate((std::vector<long>({9,\
    \ 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}))) == (1));\n    assert(candidate((std::vector<long>({7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 10, 10, 9, 2}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmptay0g0f5: /tmp/tmptay0g0f5.cpp:26: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 5, 5, 5, 1}))) == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the list.\n// If no such a value exist, return -1.\n// Examples:\n// search([4,\
    \ 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n// search([5,\
    \ 5, 4, 4, 4]) == -1\nlong search(std::vector<long> lst) {\n    long maxVal =\
    \ lst[0];\n    long freq = lst[0];\n    for (long i : lst) {\n        if (freq\
    \ >= i) {\n            freq = i;\n            maxVal = i;\n        }\n    }\n\
    \    return maxVal;\n}\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5, 1}))) == (1));\n    assert(candidate((std::vector<long>({4, 1, 4, 1,\
    \ 4, 4}))) == (4));\n    assert(candidate((std::vector<long>({3, 3}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({8, 8, 8, 8, 8, 8, 8, 8}))) == (8));\n\
    \    assert(candidate((std::vector<long>({2, 3, 3, 2, 2}))) == (2));\n    assert(candidate((std::vector<long>({2,\
    \ 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 2, 8, 2}))) == (2));\n    assert(candidate((std::vector<long>({6,\
    \ 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}))) == (1));\n    assert(candidate((std::vector<long>({8,\
    \ 8, 3, 6, 5, 6, 4}))) == (-1));\n    assert(candidate((std::vector<long>({6,\
    \ 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9})))\
    \ == (1));\n    assert(candidate((std::vector<long>({1, 9, 10, 1, 3}))) == (1));\n\
    \    assert(candidate((std::vector<long>({6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10,\
    \ 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}))) == (5));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({8, 8, 10, 6, 4, 3, 5, 8,\
    \ 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}))) == (4));\n    assert(candidate((std::vector<long>({2,\
    \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}))) == (2));\n    assert(candidate((std::vector<long>({1,\
    \ 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}))) == (1));\n    assert(candidate((std::vector<long>({9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}))) == (4));\n    assert(candidate((std::vector<long>({2, 6, 4,\
    \ 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}))) == (4));\n\
    \    assert(candidate((std::vector<long>({9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10,\
    \ 3, 8, 2, 6, 2, 3, 1}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({10}))) == (-1));\n    assert(candidate((std::vector<long>({9,\
    \ 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}))) == (1));\n    assert(candidate((std::vector<long>({7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 10, 10, 9, 2}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmppy81a5i7: /tmp/tmppy81a5i7.cpp:25: int main(): Assertion `candidate((std::vector<long>({4,\
    \ 1, 4, 1, 4, 4}))) == (4)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the list.\n// If no such a value exist, return -1.\n// Examples:\n// search([4,\
    \ 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n// search([5,\
    \ 5, 4, 4, 4]) == -1\nlong search(std::vector<long> lst) {\n    // Write your\
    \ code here\n    long ans = -1;\n    long freq[1000];\n    for (long i = 0; i\
    \ < lst.size(); i++) {\n        freq[lst[i]]++;\n    }\n    for (long i = 0; i\
    \ < 1000; i++) {\n        if (freq[i] >= lst.size()) {\n            break;\n \
    \       }\n        if (freq[i] > ans) {\n            ans = freq[i];\n        }\n\
    \    }\n    return ans;\n}\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5, 1}))) == (1));\n    assert(candidate((std::vector<long>({4, 1, 4, 1,\
    \ 4, 4}))) == (4));\n    assert(candidate((std::vector<long>({3, 3}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({8, 8, 8, 8, 8, 8, 8, 8}))) == (8));\n\
    \    assert(candidate((std::vector<long>({2, 3, 3, 2, 2}))) == (2));\n    assert(candidate((std::vector<long>({2,\
    \ 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 2, 8, 2}))) == (2));\n    assert(candidate((std::vector<long>({6,\
    \ 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}))) == (1));\n    assert(candidate((std::vector<long>({8,\
    \ 8, 3, 6, 5, 6, 4}))) == (-1));\n    assert(candidate((std::vector<long>({6,\
    \ 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9})))\
    \ == (1));\n    assert(candidate((std::vector<long>({1, 9, 10, 1, 3}))) == (1));\n\
    \    assert(candidate((std::vector<long>({6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10,\
    \ 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}))) == (5));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({8, 8, 10, 6, 4, 3, 5, 8,\
    \ 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}))) == (4));\n    assert(candidate((std::vector<long>({2,\
    \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}))) == (2));\n    assert(candidate((std::vector<long>({1,\
    \ 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}))) == (1));\n    assert(candidate((std::vector<long>({9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}))) == (4));\n    assert(candidate((std::vector<long>({2, 6, 4,\
    \ 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}))) == (4));\n\
    \    assert(candidate((std::vector<long>({9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10,\
    \ 3, 8, 2, 6, 2, 3, 1}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({10}))) == (-1));\n    assert(candidate((std::vector<long>({9,\
    \ 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}))) == (1));\n    assert(candidate((std::vector<long>({7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 10, 10, 9, 2}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmpltpetkvf: /tmp/tmpltpetkvf.cpp:30: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 5, 5, 5, 1}))) == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the list.\n// If no such a value exist, return -1.\n// Examples:\n// search([4,\
    \ 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n// search([5,\
    \ 5, 4, 4, 4]) == -1\nlong search(std::vector<long> lst) {\n    long ans = -1;\n\
    \    long freq = 0;\n    for (long i : lst) {\n        freq += i;\n        if\
    \ (freq >= i) {\n            ans = i;\n            break;\n        }\n    }\n\
    \    return ans;\n}\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5, 1}))) == (1));\n    assert(candidate((std::vector<long>({4, 1, 4, 1,\
    \ 4, 4}))) == (4));\n    assert(candidate((std::vector<long>({3, 3}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({8, 8, 8, 8, 8, 8, 8, 8}))) == (8));\n\
    \    assert(candidate((std::vector<long>({2, 3, 3, 2, 2}))) == (2));\n    assert(candidate((std::vector<long>({2,\
    \ 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 2, 8, 2}))) == (2));\n    assert(candidate((std::vector<long>({6,\
    \ 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}))) == (1));\n    assert(candidate((std::vector<long>({8,\
    \ 8, 3, 6, 5, 6, 4}))) == (-1));\n    assert(candidate((std::vector<long>({6,\
    \ 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9})))\
    \ == (1));\n    assert(candidate((std::vector<long>({1, 9, 10, 1, 3}))) == (1));\n\
    \    assert(candidate((std::vector<long>({6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10,\
    \ 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}))) == (5));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({8, 8, 10, 6, 4, 3, 5, 8,\
    \ 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}))) == (4));\n    assert(candidate((std::vector<long>({2,\
    \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}))) == (2));\n    assert(candidate((std::vector<long>({1,\
    \ 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}))) == (1));\n    assert(candidate((std::vector<long>({9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}))) == (4));\n    assert(candidate((std::vector<long>({2, 6, 4,\
    \ 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}))) == (4));\n\
    \    assert(candidate((std::vector<long>({9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10,\
    \ 3, 8, 2, 6, 2, 3, 1}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({10}))) == (-1));\n    assert(candidate((std::vector<long>({9,\
    \ 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}))) == (1));\n    assert(candidate((std::vector<long>({7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 10, 10, 9, 2}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmp45mqzsss: /tmp/tmp45mqzsss.cpp:25: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 5, 5, 5, 1}))) == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the list.\n// If no such a value exist, return -1.\n// Examples:\n// search([4,\
    \ 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n// search([5,\
    \ 5, 4, 4, 4]) == -1\nlong search(std::vector<long> lst) {\n    long maxVal =\
    \ -1;\n    long maxFreq = -1;\n    for(long i = 0; i < lst.size(); i++) {\n  \
    \      if(lst[i] > maxVal) {\n            maxVal = lst[i];\n            maxFreq\
    \ = i;\n        }\n    }\n    if(maxFreq >= 0) {\n        for(long i = 0; i <\
    \ lst.size(); i++) {\n            if(lst[i] == maxVal) {\n                if(lst[i]\
    \ > maxFreq) {\n                    maxFreq = lst[i];\n                }\n   \
    \         }\n        }\n    }\n    return maxVal;\n}\nint main() {\n    auto candidate\
    \ = search;\n    assert(candidate((std::vector<long>({5, 5, 5, 5, 1}))) == (1));\n\
    \    assert(candidate((std::vector<long>({4, 1, 4, 1, 4, 4}))) == (4));\n    assert(candidate((std::vector<long>({3,\
    \ 3}))) == (-1));\n    assert(candidate((std::vector<long>({8, 8, 8, 8, 8, 8,\
    \ 8, 8}))) == (8));\n    assert(candidate((std::vector<long>({2, 3, 3, 2, 2})))\
    \ == (2));\n    assert(candidate((std::vector<long>({2, 7, 8, 8, 4, 8, 7, 3, 9,\
    \ 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}))) == (1));\n    assert(candidate((std::vector<long>({3,\
    \ 2, 8, 2}))) == (2));\n    assert(candidate((std::vector<long>({6, 7, 1, 8, 8,\
    \ 10, 5, 8, 5, 3, 10}))) == (1));\n    assert(candidate((std::vector<long>({8,\
    \ 8, 3, 6, 5, 6, 4}))) == (-1));\n    assert(candidate((std::vector<long>({6,\
    \ 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9})))\
    \ == (1));\n    assert(candidate((std::vector<long>({1, 9, 10, 1, 3}))) == (1));\n\
    \    assert(candidate((std::vector<long>({6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10,\
    \ 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}))) == (5));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({8, 8, 10, 6, 4, 3, 5, 8,\
    \ 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}))) == (4));\n    assert(candidate((std::vector<long>({2,\
    \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}))) == (2));\n    assert(candidate((std::vector<long>({1,\
    \ 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}))) == (1));\n    assert(candidate((std::vector<long>({9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}))) == (4));\n    assert(candidate((std::vector<long>({2, 6, 4,\
    \ 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}))) == (4));\n\
    \    assert(candidate((std::vector<long>({9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10,\
    \ 3, 8, 2, 6, 2, 3, 1}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({10}))) == (-1));\n    assert(candidate((std::vector<long>({9,\
    \ 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}))) == (1));\n    assert(candidate((std::vector<long>({7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 10, 10, 9, 2}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmp519j7nlw: /tmp/tmp519j7nlw.cpp:33: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 5, 5, 5, 1}))) == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the list.\n// If no such a value exist, return -1.\n// Examples:\n// search([4,\
    \ 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n// search([5,\
    \ 5, 4, 4, 4]) == -1\nlong search(std::vector<long> lst) {\n    long ans = -1;\n\
    \    long freq[10000];\n    for(long i = 0; i < lst.size(); i++) {\n        freq[lst[i]]++;\n\
    \    }\n    for(long i = 0; i < 10000; i++) {\n        if(freq[i] >= lst.size())\
    \ {\n            ans = i;\n            break;\n        }\n    }\n    return ans;\n\
    }\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5, 1}))) == (1));\n    assert(candidate((std::vector<long>({4, 1, 4, 1,\
    \ 4, 4}))) == (4));\n    assert(candidate((std::vector<long>({3, 3}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({8, 8, 8, 8, 8, 8, 8, 8}))) == (8));\n\
    \    assert(candidate((std::vector<long>({2, 3, 3, 2, 2}))) == (2));\n    assert(candidate((std::vector<long>({2,\
    \ 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 2, 8, 2}))) == (2));\n    assert(candidate((std::vector<long>({6,\
    \ 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}))) == (1));\n    assert(candidate((std::vector<long>({8,\
    \ 8, 3, 6, 5, 6, 4}))) == (-1));\n    assert(candidate((std::vector<long>({6,\
    \ 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9})))\
    \ == (1));\n    assert(candidate((std::vector<long>({1, 9, 10, 1, 3}))) == (1));\n\
    \    assert(candidate((std::vector<long>({6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10,\
    \ 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}))) == (5));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({8, 8, 10, 6, 4, 3, 5, 8,\
    \ 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}))) == (4));\n    assert(candidate((std::vector<long>({2,\
    \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}))) == (2));\n    assert(candidate((std::vector<long>({1,\
    \ 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}))) == (1));\n    assert(candidate((std::vector<long>({9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}))) == (4));\n    assert(candidate((std::vector<long>({2, 6, 4,\
    \ 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}))) == (4));\n\
    \    assert(candidate((std::vector<long>({9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10,\
    \ 3, 8, 2, 6, 2, 3, 1}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({10}))) == (-1));\n    assert(candidate((std::vector<long>({9,\
    \ 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}))) == (1));\n    assert(candidate((std::vector<long>({7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 10, 10, 9, 2}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmpwip77gcf: /tmp/tmpwip77gcf.cpp:27: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 5, 5, 5, 1}))) == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the list.\n// If no such a value exist, return -1.\n// Examples:\n// search([4,\
    \ 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n// search([5,\
    \ 5, 4, 4, 4]) == -1\nlong search(std::vector<long> lst) {\n    long ans = -1;\n\
    \    long freq[100];\n    for (long i = 0; i < lst.size(); i++) {\n        freq[lst[i]]++;\n\
    \    }\n    for (long i = 0; i < 100; i++) {\n        if (freq[i] >= lst.size())\
    \ {\n            ans = i;\n            break;\n        }\n    }\n    return ans;\n\
    }\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5, 1}))) == (1));\n    assert(candidate((std::vector<long>({4, 1, 4, 1,\
    \ 4, 4}))) == (4));\n    assert(candidate((std::vector<long>({3, 3}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({8, 8, 8, 8, 8, 8, 8, 8}))) == (8));\n\
    \    assert(candidate((std::vector<long>({2, 3, 3, 2, 2}))) == (2));\n    assert(candidate((std::vector<long>({2,\
    \ 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 2, 8, 2}))) == (2));\n    assert(candidate((std::vector<long>({6,\
    \ 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}))) == (1));\n    assert(candidate((std::vector<long>({8,\
    \ 8, 3, 6, 5, 6, 4}))) == (-1));\n    assert(candidate((std::vector<long>({6,\
    \ 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9})))\
    \ == (1));\n    assert(candidate((std::vector<long>({1, 9, 10, 1, 3}))) == (1));\n\
    \    assert(candidate((std::vector<long>({6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10,\
    \ 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}))) == (5));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({8, 8, 10, 6, 4, 3, 5, 8,\
    \ 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}))) == (4));\n    assert(candidate((std::vector<long>({2,\
    \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}))) == (2));\n    assert(candidate((std::vector<long>({1,\
    \ 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}))) == (1));\n    assert(candidate((std::vector<long>({9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}))) == (4));\n    assert(candidate((std::vector<long>({2, 6, 4,\
    \ 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}))) == (4));\n\
    \    assert(candidate((std::vector<long>({9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10,\
    \ 3, 8, 2, 6, 2, 3, 1}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({10}))) == (-1));\n    assert(candidate((std::vector<long>({9,\
    \ 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}))) == (1));\n    assert(candidate((std::vector<long>({7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 10, 10, 9, 2}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmp1ump7d5u: /tmp/tmp1ump7d5u.cpp:27: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 5, 5, 5, 1}))) == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the list.\n// If no such a value exist, return -1.\n// Examples:\n// search([4,\
    \ 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n// search([5,\
    \ 5, 4, 4, 4]) == -1\nlong search(std::vector<long> lst) {\n    // Write your\
    \ code here\n    long ans = -1;\n    long freq[100] = {0};\n    for (long i :\
    \ lst) {\n        freq[i] = freq[i] + 1;\n    }\n    for (long i : lst) {\n  \
    \      if (freq[i] > 0 && freq[i] >= i) {\n            ans = i;\n            break;\n\
    \        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate = search;\n\
    \    assert(candidate((std::vector<long>({5, 5, 5, 5, 1}))) == (1));\n    assert(candidate((std::vector<long>({4,\
    \ 1, 4, 1, 4, 4}))) == (4));\n    assert(candidate((std::vector<long>({3, 3})))\
    \ == (-1));\n    assert(candidate((std::vector<long>({8, 8, 8, 8, 8, 8, 8, 8})))\
    \ == (8));\n    assert(candidate((std::vector<long>({2, 3, 3, 2, 2}))) == (2));\n\
    \    assert(candidate((std::vector<long>({2, 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10,\
    \ 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}))) == (1));\n    assert(candidate((std::vector<long>({3,\
    \ 2, 8, 2}))) == (2));\n    assert(candidate((std::vector<long>({6, 7, 1, 8, 8,\
    \ 10, 5, 8, 5, 3, 10}))) == (1));\n    assert(candidate((std::vector<long>({8,\
    \ 8, 3, 6, 5, 6, 4}))) == (-1));\n    assert(candidate((std::vector<long>({6,\
    \ 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9})))\
    \ == (1));\n    assert(candidate((std::vector<long>({1, 9, 10, 1, 3}))) == (1));\n\
    \    assert(candidate((std::vector<long>({6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10,\
    \ 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}))) == (5));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({8, 8, 10, 6, 4, 3, 5, 8,\
    \ 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}))) == (4));\n    assert(candidate((std::vector<long>({2,\
    \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}))) == (2));\n    assert(candidate((std::vector<long>({1,\
    \ 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}))) == (1));\n    assert(candidate((std::vector<long>({9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}))) == (4));\n    assert(candidate((std::vector<long>({2, 6, 4,\
    \ 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}))) == (4));\n\
    \    assert(candidate((std::vector<long>({9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10,\
    \ 3, 8, 2, 6, 2, 3, 1}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({10}))) == (-1));\n    assert(candidate((std::vector<long>({9,\
    \ 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}))) == (1));\n    assert(candidate((std::vector<long>({7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 10, 10, 9, 2}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmpx_u1vudh: /tmp/tmpx_u1vudh.cpp:44: int main(): Assertion `candidate((std::vector<long>({9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}))) == (4)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the list.\n// If no such a value exist, return -1.\n// Examples:\n// search([4,\
    \ 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n// search([5,\
    \ 5, 4, 4, 4]) == -1\nlong search(std::vector<long> lst) {\n    long maxVal =\
    \ lst[0];\n    long maxCount = 0;\n    for (long i = 0; i < lst.size(); i++) {\n\
    \        if (lst[i] == maxVal) {\n            maxCount++;\n            if (maxCount\
    \ >= lst[i]) {\n                return maxVal;\n            }\n        }\n   \
    \     else {\n            maxVal = lst[i];\n            maxCount = 1;\n      \
    \  }\n    }\n    return -1;\n}\nint main() {\n    auto candidate = search;\n \
    \   assert(candidate((std::vector<long>({5, 5, 5, 5, 1}))) == (1));\n    assert(candidate((std::vector<long>({4,\
    \ 1, 4, 1, 4, 4}))) == (4));\n    assert(candidate((std::vector<long>({3, 3})))\
    \ == (-1));\n    assert(candidate((std::vector<long>({8, 8, 8, 8, 8, 8, 8, 8})))\
    \ == (8));\n    assert(candidate((std::vector<long>({2, 3, 3, 2, 2}))) == (2));\n\
    \    assert(candidate((std::vector<long>({2, 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10,\
    \ 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}))) == (1));\n    assert(candidate((std::vector<long>({3,\
    \ 2, 8, 2}))) == (2));\n    assert(candidate((std::vector<long>({6, 7, 1, 8, 8,\
    \ 10, 5, 8, 5, 3, 10}))) == (1));\n    assert(candidate((std::vector<long>({8,\
    \ 8, 3, 6, 5, 6, 4}))) == (-1));\n    assert(candidate((std::vector<long>({6,\
    \ 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9})))\
    \ == (1));\n    assert(candidate((std::vector<long>({1, 9, 10, 1, 3}))) == (1));\n\
    \    assert(candidate((std::vector<long>({6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10,\
    \ 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}))) == (5));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({8, 8, 10, 6, 4, 3, 5, 8,\
    \ 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}))) == (4));\n    assert(candidate((std::vector<long>({2,\
    \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}))) == (2));\n    assert(candidate((std::vector<long>({1,\
    \ 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}))) == (1));\n    assert(candidate((std::vector<long>({9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}))) == (4));\n    assert(candidate((std::vector<long>({2, 6, 4,\
    \ 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}))) == (4));\n\
    \    assert(candidate((std::vector<long>({9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10,\
    \ 3, 8, 2, 6, 2, 3, 1}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({10}))) == (-1));\n    assert(candidate((std::vector<long>({9,\
    \ 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}))) == (1));\n    assert(candidate((std::vector<long>({7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 10, 10, 9, 2}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmp7b44mk4a: /tmp/tmp7b44mk4a.cpp:30: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 5, 5, 5, 1}))) == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the list.\n// If no such a value exist, return -1.\n// Examples:\n// search([4,\
    \ 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n// search([5,\
    \ 5, 4, 4, 4]) == -1\nlong search(std::vector<long> lst) {\n    long ans = -1;\n\
    \    long freq = 0;\n    for(long i : lst) {\n        freq++;\n        if(freq\
    \ > i) {\n            freq = i;\n            ans = i;\n        }\n    }\n    return\
    \ ans;\n}\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5, 1}))) == (1));\n    assert(candidate((std::vector<long>({4, 1, 4, 1,\
    \ 4, 4}))) == (4));\n    assert(candidate((std::vector<long>({3, 3}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({8, 8, 8, 8, 8, 8, 8, 8}))) == (8));\n\
    \    assert(candidate((std::vector<long>({2, 3, 3, 2, 2}))) == (2));\n    assert(candidate((std::vector<long>({2,\
    \ 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 2, 8, 2}))) == (2));\n    assert(candidate((std::vector<long>({6,\
    \ 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}))) == (1));\n    assert(candidate((std::vector<long>({8,\
    \ 8, 3, 6, 5, 6, 4}))) == (-1));\n    assert(candidate((std::vector<long>({6,\
    \ 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9})))\
    \ == (1));\n    assert(candidate((std::vector<long>({1, 9, 10, 1, 3}))) == (1));\n\
    \    assert(candidate((std::vector<long>({6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10,\
    \ 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}))) == (5));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({8, 8, 10, 6, 4, 3, 5, 8,\
    \ 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}))) == (4));\n    assert(candidate((std::vector<long>({2,\
    \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}))) == (2));\n    assert(candidate((std::vector<long>({1,\
    \ 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}))) == (1));\n    assert(candidate((std::vector<long>({9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}))) == (4));\n    assert(candidate((std::vector<long>({2, 6, 4,\
    \ 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}))) == (4));\n\
    \    assert(candidate((std::vector<long>({9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10,\
    \ 3, 8, 2, 6, 2, 3, 1}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({10}))) == (-1));\n    assert(candidate((std::vector<long>({9,\
    \ 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}))) == (1));\n    assert(candidate((std::vector<long>({7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 10, 10, 9, 2}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmpnsnt86yf: /tmp/tmpnsnt86yf.cpp:26: int main(): Assertion `candidate((std::vector<long>({4,\
    \ 1, 4, 1, 4, 4}))) == (4)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the list.\n// If no such a value exist, return -1.\n// Examples:\n// search([4,\
    \ 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n// search([5,\
    \ 5, 4, 4, 4]) == -1\nlong search(std::vector<long> lst) {\n    long ans = -1;\n\
    \    long freq[100];\n    for (long i = 0; i < lst.size(); i++) {\n        freq[lst[i]]++;\n\
    \    }\n    for (long i = 0; i < lst.size(); i++) {\n        if (freq[lst[i]]\
    \ >= lst[i]) {\n            ans = lst[i];\n            break;\n        }\n   \
    \ }\n    return ans;\n}\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5, 1}))) == (1));\n    assert(candidate((std::vector<long>({4, 1, 4, 1,\
    \ 4, 4}))) == (4));\n    assert(candidate((std::vector<long>({3, 3}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({8, 8, 8, 8, 8, 8, 8, 8}))) == (8));\n\
    \    assert(candidate((std::vector<long>({2, 3, 3, 2, 2}))) == (2));\n    assert(candidate((std::vector<long>({2,\
    \ 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 2, 8, 2}))) == (2));\n    assert(candidate((std::vector<long>({6,\
    \ 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}))) == (1));\n    assert(candidate((std::vector<long>({8,\
    \ 8, 3, 6, 5, 6, 4}))) == (-1));\n    assert(candidate((std::vector<long>({6,\
    \ 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9})))\
    \ == (1));\n    assert(candidate((std::vector<long>({1, 9, 10, 1, 3}))) == (1));\n\
    \    assert(candidate((std::vector<long>({6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10,\
    \ 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}))) == (5));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({8, 8, 10, 6, 4, 3, 5, 8,\
    \ 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}))) == (4));\n    assert(candidate((std::vector<long>({2,\
    \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}))) == (2));\n    assert(candidate((std::vector<long>({1,\
    \ 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}))) == (1));\n    assert(candidate((std::vector<long>({9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}))) == (4));\n    assert(candidate((std::vector<long>({2, 6, 4,\
    \ 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}))) == (4));\n\
    \    assert(candidate((std::vector<long>({9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10,\
    \ 3, 8, 2, 6, 2, 3, 1}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({10}))) == (-1));\n    assert(candidate((std::vector<long>({9,\
    \ 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}))) == (1));\n    assert(candidate((std::vector<long>({7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 10, 10, 9, 2}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmpeh12rmfk: /tmp/tmpeh12rmfk.cpp:27: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 5, 5, 5, 1}))) == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the list.\n// If no such a value exist, return -1.\n// Examples:\n// search([4,\
    \ 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n// search([5,\
    \ 5, 4, 4, 4]) == -1\nlong search(std::vector<long> lst) {\n    long ans = -1;\n\
    \    long freq[10000];\n    for (long i : lst) {\n        freq[i] = freq[i] +\
    \ 1;\n    }\n    for (long i : lst) {\n        if (freq[i] >= i) {\n         \
    \   ans = i;\n            break;\n        }\n    }\n    return ans;\n}\nint main()\
    \ {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5, 1}))) == (1));\n    assert(candidate((std::vector<long>({4, 1, 4, 1,\
    \ 4, 4}))) == (4));\n    assert(candidate((std::vector<long>({3, 3}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({8, 8, 8, 8, 8, 8, 8, 8}))) == (8));\n\
    \    assert(candidate((std::vector<long>({2, 3, 3, 2, 2}))) == (2));\n    assert(candidate((std::vector<long>({2,\
    \ 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 2, 8, 2}))) == (2));\n    assert(candidate((std::vector<long>({6,\
    \ 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}))) == (1));\n    assert(candidate((std::vector<long>({8,\
    \ 8, 3, 6, 5, 6, 4}))) == (-1));\n    assert(candidate((std::vector<long>({6,\
    \ 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9})))\
    \ == (1));\n    assert(candidate((std::vector<long>({1, 9, 10, 1, 3}))) == (1));\n\
    \    assert(candidate((std::vector<long>({6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10,\
    \ 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}))) == (5));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({8, 8, 10, 6, 4, 3, 5, 8,\
    \ 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}))) == (4));\n    assert(candidate((std::vector<long>({2,\
    \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}))) == (2));\n    assert(candidate((std::vector<long>({1,\
    \ 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}))) == (1));\n    assert(candidate((std::vector<long>({9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}))) == (4));\n    assert(candidate((std::vector<long>({2, 6, 4,\
    \ 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}))) == (4));\n\
    \    assert(candidate((std::vector<long>({9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10,\
    \ 3, 8, 2, 6, 2, 3, 1}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({10}))) == (-1));\n    assert(candidate((std::vector<long>({9,\
    \ 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}))) == (1));\n    assert(candidate((std::vector<long>({7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 10, 10, 9, 2}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmpxghjaklv: /tmp/tmpxghjaklv.cpp:32: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}))) == (1)'\
    \ failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the list.\n// If no such a value exist, return -1.\n// Examples:\n// search([4,\
    \ 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n// search([5,\
    \ 5, 4, 4, 4]) == -1\nlong search(std::vector<long> lst) {\n    long ans = -1;\n\
    \    long freq[10000];\n    for (long i : lst) {\n        freq[i] = freq[i] +\
    \ 1;\n    }\n    for (long i : lst) {\n        if (freq[i] >= i) {\n         \
    \   freq[i] = freq[i] - 1;\n            ans = i;\n        }\n    }\n    return\
    \ ans;\n}\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5, 1}))) == (1));\n    assert(candidate((std::vector<long>({4, 1, 4, 1,\
    \ 4, 4}))) == (4));\n    assert(candidate((std::vector<long>({3, 3}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({8, 8, 8, 8, 8, 8, 8, 8}))) == (8));\n\
    \    assert(candidate((std::vector<long>({2, 3, 3, 2, 2}))) == (2));\n    assert(candidate((std::vector<long>({2,\
    \ 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 2, 8, 2}))) == (2));\n    assert(candidate((std::vector<long>({6,\
    \ 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}))) == (1));\n    assert(candidate((std::vector<long>({8,\
    \ 8, 3, 6, 5, 6, 4}))) == (-1));\n    assert(candidate((std::vector<long>({6,\
    \ 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9})))\
    \ == (1));\n    assert(candidate((std::vector<long>({1, 9, 10, 1, 3}))) == (1));\n\
    \    assert(candidate((std::vector<long>({6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10,\
    \ 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}))) == (5));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({8, 8, 10, 6, 4, 3, 5, 8,\
    \ 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}))) == (4));\n    assert(candidate((std::vector<long>({2,\
    \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}))) == (2));\n    assert(candidate((std::vector<long>({1,\
    \ 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}))) == (1));\n    assert(candidate((std::vector<long>({9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}))) == (4));\n    assert(candidate((std::vector<long>({2, 6, 4,\
    \ 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}))) == (4));\n\
    \    assert(candidate((std::vector<long>({9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10,\
    \ 3, 8, 2, 6, 2, 3, 1}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({10}))) == (-1));\n    assert(candidate((std::vector<long>({9,\
    \ 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}))) == (1));\n    assert(candidate((std::vector<long>({7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 10, 10, 9, 2}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmpk_o4jpcj: /tmp/tmpk_o4jpcj.cpp:28: int main(): Assertion `candidate((std::vector<long>({4,\
    \ 1, 4, 1, 4, 4}))) == (4)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the list.\n// If no such a value exist, return -1.\n// Examples:\n// search([4,\
    \ 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n// search([5,\
    \ 5, 4, 4, 4]) == -1\nlong search(std::vector<long> lst) {\n    long ans = -1;\n\
    \    long freq[1000];\n    for(long i = 0; i < lst.size(); i++){\n        freq[lst[i]]++;\n\
    \    }\n    for(long i = 0; i < 1000; i++){\n        if(freq[i] >= lst.size()){\n\
    \            return -1;\n        }\n        if(freq[i] > 0){\n            ans\
    \ = i;\n            break;\n        }\n    }\n    return ans;\n}\nint main() {\n\
    \    auto candidate = search;\n    assert(candidate((std::vector<long>({5, 5,\
    \ 5, 5, 1}))) == (1));\n    assert(candidate((std::vector<long>({4, 1, 4, 1, 4,\
    \ 4}))) == (4));\n    assert(candidate((std::vector<long>({3, 3}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({8, 8, 8, 8, 8, 8, 8, 8}))) == (8));\n\
    \    assert(candidate((std::vector<long>({2, 3, 3, 2, 2}))) == (2));\n    assert(candidate((std::vector<long>({2,\
    \ 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 2, 8, 2}))) == (2));\n    assert(candidate((std::vector<long>({6,\
    \ 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}))) == (1));\n    assert(candidate((std::vector<long>({8,\
    \ 8, 3, 6, 5, 6, 4}))) == (-1));\n    assert(candidate((std::vector<long>({6,\
    \ 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9})))\
    \ == (1));\n    assert(candidate((std::vector<long>({1, 9, 10, 1, 3}))) == (1));\n\
    \    assert(candidate((std::vector<long>({6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10,\
    \ 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}))) == (5));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({8, 8, 10, 6, 4, 3, 5, 8,\
    \ 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}))) == (4));\n    assert(candidate((std::vector<long>({2,\
    \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}))) == (2));\n    assert(candidate((std::vector<long>({1,\
    \ 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}))) == (1));\n    assert(candidate((std::vector<long>({9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}))) == (4));\n    assert(candidate((std::vector<long>({2, 6, 4,\
    \ 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}))) == (4));\n\
    \    assert(candidate((std::vector<long>({9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10,\
    \ 3, 8, 2, 6, 2, 3, 1}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({10}))) == (-1));\n    assert(candidate((std::vector<long>({9,\
    \ 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}))) == (1));\n    assert(candidate((std::vector<long>({7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 10, 10, 9, 2}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmpmha6ha4p: /tmp/tmpmha6ha4p.cpp:31: int main(): Assertion `candidate((std::vector<long>({4,\
    \ 1, 4, 1, 4, 4}))) == (4)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the list.\n// If no such a value exist, return -1.\n// Examples:\n// search([4,\
    \ 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n// search([5,\
    \ 5, 4, 4, 4]) == -1\nlong search(std::vector<long> lst) {\n    long ans = -1;\n\
    \    long freq[100];\n    for (long i : lst) {\n        freq[i] = freq[i] + 1;\n\
    \    }\n    for (long i : lst) {\n        if (freq[i] > ans) {\n            ans\
    \ = freq[i];\n        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate\
    \ = search;\n    assert(candidate((std::vector<long>({5, 5, 5, 5, 1}))) == (1));\n\
    \    assert(candidate((std::vector<long>({4, 1, 4, 1, 4, 4}))) == (4));\n    assert(candidate((std::vector<long>({3,\
    \ 3}))) == (-1));\n    assert(candidate((std::vector<long>({8, 8, 8, 8, 8, 8,\
    \ 8, 8}))) == (8));\n    assert(candidate((std::vector<long>({2, 3, 3, 2, 2})))\
    \ == (2));\n    assert(candidate((std::vector<long>({2, 7, 8, 8, 4, 8, 7, 3, 9,\
    \ 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}))) == (1));\n    assert(candidate((std::vector<long>({3,\
    \ 2, 8, 2}))) == (2));\n    assert(candidate((std::vector<long>({6, 7, 1, 8, 8,\
    \ 10, 5, 8, 5, 3, 10}))) == (1));\n    assert(candidate((std::vector<long>({8,\
    \ 8, 3, 6, 5, 6, 4}))) == (-1));\n    assert(candidate((std::vector<long>({6,\
    \ 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9})))\
    \ == (1));\n    assert(candidate((std::vector<long>({1, 9, 10, 1, 3}))) == (1));\n\
    \    assert(candidate((std::vector<long>({6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10,\
    \ 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}))) == (5));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({8, 8, 10, 6, 4, 3, 5, 8,\
    \ 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}))) == (4));\n    assert(candidate((std::vector<long>({2,\
    \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}))) == (2));\n    assert(candidate((std::vector<long>({1,\
    \ 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}))) == (1));\n    assert(candidate((std::vector<long>({9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}))) == (4));\n    assert(candidate((std::vector<long>({2, 6, 4,\
    \ 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}))) == (4));\n\
    \    assert(candidate((std::vector<long>({9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10,\
    \ 3, 8, 2, 6, 2, 3, 1}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({10}))) == (-1));\n    assert(candidate((std::vector<long>({9,\
    \ 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}))) == (1));\n    assert(candidate((std::vector<long>({7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 10, 10, 9, 2}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmphox3wnvu: /tmp/tmphox3wnvu.cpp:26: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 5, 5, 5, 1}))) == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the list.\n// If no such a value exist, return -1.\n// Examples:\n// search([4,\
    \ 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n// search([5,\
    \ 5, 4, 4, 4]) == -1\nlong search(std::vector<long> lst) {\n    long ans = -1;\n\
    \    long freq = 0;\n    for (long i : lst) {\n        freq += i;\n        if\
    \ (freq > ans) {\n            ans = freq;\n        }\n    }\n    return ans;\n\
    }\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5, 1}))) == (1));\n    assert(candidate((std::vector<long>({4, 1, 4, 1,\
    \ 4, 4}))) == (4));\n    assert(candidate((std::vector<long>({3, 3}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({8, 8, 8, 8, 8, 8, 8, 8}))) == (8));\n\
    \    assert(candidate((std::vector<long>({2, 3, 3, 2, 2}))) == (2));\n    assert(candidate((std::vector<long>({2,\
    \ 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 2, 8, 2}))) == (2));\n    assert(candidate((std::vector<long>({6,\
    \ 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}))) == (1));\n    assert(candidate((std::vector<long>({8,\
    \ 8, 3, 6, 5, 6, 4}))) == (-1));\n    assert(candidate((std::vector<long>({6,\
    \ 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9})))\
    \ == (1));\n    assert(candidate((std::vector<long>({1, 9, 10, 1, 3}))) == (1));\n\
    \    assert(candidate((std::vector<long>({6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10,\
    \ 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}))) == (5));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({8, 8, 10, 6, 4, 3, 5, 8,\
    \ 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}))) == (4));\n    assert(candidate((std::vector<long>({2,\
    \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}))) == (2));\n    assert(candidate((std::vector<long>({1,\
    \ 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}))) == (1));\n    assert(candidate((std::vector<long>({9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}))) == (4));\n    assert(candidate((std::vector<long>({2, 6, 4,\
    \ 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}))) == (4));\n\
    \    assert(candidate((std::vector<long>({9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10,\
    \ 3, 8, 2, 6, 2, 3, 1}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({10}))) == (-1));\n    assert(candidate((std::vector<long>({9,\
    \ 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}))) == (1));\n    assert(candidate((std::vector<long>({7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 10, 10, 9, 2}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmpz28_6b56: /tmp/tmpz28_6b56.cpp:24: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 5, 5, 5, 1}))) == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the list.\n// If no such a value exist, return -1.\n// Examples:\n// search([4,\
    \ 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n// search([5,\
    \ 5, 4, 4, 4]) == -1\nlong search(std::vector<long> lst) {\n    long ans = -1;\n\
    \    long freq[100];\n    for (long i : lst) {\n        freq[i] = freq[i] + 1;\n\
    \    }\n    for (long i : lst) {\n        if (freq[i] >= i) {\n            ans\
    \ = i;\n            break;\n        }\n    }\n    return ans;\n}\nint main() {\n\
    \    auto candidate = search;\n    assert(candidate((std::vector<long>({5, 5,\
    \ 5, 5, 1}))) == (1));\n    assert(candidate((std::vector<long>({4, 1, 4, 1, 4,\
    \ 4}))) == (4));\n    assert(candidate((std::vector<long>({3, 3}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({8, 8, 8, 8, 8, 8, 8, 8}))) == (8));\n\
    \    assert(candidate((std::vector<long>({2, 3, 3, 2, 2}))) == (2));\n    assert(candidate((std::vector<long>({2,\
    \ 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 2, 8, 2}))) == (2));\n    assert(candidate((std::vector<long>({6,\
    \ 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}))) == (1));\n    assert(candidate((std::vector<long>({8,\
    \ 8, 3, 6, 5, 6, 4}))) == (-1));\n    assert(candidate((std::vector<long>({6,\
    \ 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9})))\
    \ == (1));\n    assert(candidate((std::vector<long>({1, 9, 10, 1, 3}))) == (1));\n\
    \    assert(candidate((std::vector<long>({6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10,\
    \ 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}))) == (5));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({8, 8, 10, 6, 4, 3, 5, 8,\
    \ 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}))) == (4));\n    assert(candidate((std::vector<long>({2,\
    \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}))) == (2));\n    assert(candidate((std::vector<long>({1,\
    \ 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}))) == (1));\n    assert(candidate((std::vector<long>({9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}))) == (4));\n    assert(candidate((std::vector<long>({2, 6, 4,\
    \ 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}))) == (4));\n\
    \    assert(candidate((std::vector<long>({9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10,\
    \ 3, 8, 2, 6, 2, 3, 1}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({10}))) == (-1));\n    assert(candidate((std::vector<long>({9,\
    \ 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}))) == (1));\n    assert(candidate((std::vector<long>({7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 10, 10, 9, 2}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmpbulv7b0t: /tmp/tmpbulv7b0t.cpp:27: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 5, 5, 5, 1}))) == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the list.\n// If no such a value exist, return -1.\n// Examples:\n// search([4,\
    \ 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n// search([5,\
    \ 5, 4, 4, 4]) == -1\nlong search(std::vector<long> lst) {\n    long ans = -1;\n\
    \    long freq = 0;\n    for(long i : lst) {\n        freq += i;\n        if(freq\
    \ >= i) {\n            ans = i;\n            break;\n        }\n    }\n    return\
    \ ans;\n}\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5, 1}))) == (1));\n    assert(candidate((std::vector<long>({4, 1, 4, 1,\
    \ 4, 4}))) == (4));\n    assert(candidate((std::vector<long>({3, 3}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({8, 8, 8, 8, 8, 8, 8, 8}))) == (8));\n\
    \    assert(candidate((std::vector<long>({2, 3, 3, 2, 2}))) == (2));\n    assert(candidate((std::vector<long>({2,\
    \ 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 2, 8, 2}))) == (2));\n    assert(candidate((std::vector<long>({6,\
    \ 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}))) == (1));\n    assert(candidate((std::vector<long>({8,\
    \ 8, 3, 6, 5, 6, 4}))) == (-1));\n    assert(candidate((std::vector<long>({6,\
    \ 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9})))\
    \ == (1));\n    assert(candidate((std::vector<long>({1, 9, 10, 1, 3}))) == (1));\n\
    \    assert(candidate((std::vector<long>({6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10,\
    \ 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}))) == (5));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({8, 8, 10, 6, 4, 3, 5, 8,\
    \ 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}))) == (4));\n    assert(candidate((std::vector<long>({2,\
    \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}))) == (2));\n    assert(candidate((std::vector<long>({1,\
    \ 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}))) == (1));\n    assert(candidate((std::vector<long>({9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}))) == (4));\n    assert(candidate((std::vector<long>({2, 6, 4,\
    \ 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}))) == (4));\n\
    \    assert(candidate((std::vector<long>({9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10,\
    \ 3, 8, 2, 6, 2, 3, 1}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({10}))) == (-1));\n    assert(candidate((std::vector<long>({9,\
    \ 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}))) == (1));\n    assert(candidate((std::vector<long>({7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 10, 10, 9, 2}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmp_659dfyc: /tmp/tmp_659dfyc.cpp:25: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 5, 5, 5, 1}))) == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the list.\n// If no such a value exist, return -1.\n// Examples:\n// search([4,\
    \ 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n// search([5,\
    \ 5, 4, 4, 4]) == -1\nlong search(std::vector<long> lst) {\n    // Your code here\n\
    \    long max = 0;\n    long freq = 0;\n    for(long i = 0; i < lst.size(); i++){\n\
    \        if(lst[i] > 0){\n            freq++;\n            if(lst[i] == max){\n\
    \                freq++;\n            }\n            if(lst[i] > max){\n     \
    \           max = lst[i];\n            }\n        }\n    }\n    return freq >\
    \ max ? freq : max;\n}\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5, 1}))) == (1));\n    assert(candidate((std::vector<long>({4, 1, 4, 1,\
    \ 4, 4}))) == (4));\n    assert(candidate((std::vector<long>({3, 3}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({8, 8, 8, 8, 8, 8, 8, 8}))) == (8));\n\
    \    assert(candidate((std::vector<long>({2, 3, 3, 2, 2}))) == (2));\n    assert(candidate((std::vector<long>({2,\
    \ 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 2, 8, 2}))) == (2));\n    assert(candidate((std::vector<long>({6,\
    \ 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}))) == (1));\n    assert(candidate((std::vector<long>({8,\
    \ 8, 3, 6, 5, 6, 4}))) == (-1));\n    assert(candidate((std::vector<long>({6,\
    \ 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9})))\
    \ == (1));\n    assert(candidate((std::vector<long>({1, 9, 10, 1, 3}))) == (1));\n\
    \    assert(candidate((std::vector<long>({6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10,\
    \ 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}))) == (5));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({8, 8, 10, 6, 4, 3, 5, 8,\
    \ 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}))) == (4));\n    assert(candidate((std::vector<long>({2,\
    \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}))) == (2));\n    assert(candidate((std::vector<long>({1,\
    \ 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}))) == (1));\n    assert(candidate((std::vector<long>({9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}))) == (4));\n    assert(candidate((std::vector<long>({2, 6, 4,\
    \ 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}))) == (4));\n\
    \    assert(candidate((std::vector<long>({9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10,\
    \ 3, 8, 2, 6, 2, 3, 1}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({10}))) == (-1));\n    assert(candidate((std::vector<long>({9,\
    \ 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}))) == (1));\n    assert(candidate((std::vector<long>({7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 10, 10, 9, 2}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmpv9z45mnk: /tmp/tmpv9z45mnk.cpp:30: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 5, 5, 5, 1}))) == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the list.\n// If no such a value exist, return -1.\n// Examples:\n// search([4,\
    \ 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n// search([5,\
    \ 5, 4, 4, 4]) == -1\nlong search(std::vector<long> lst) {\n    long ans = -1;\n\
    \    long freq[1000];\n    for(long i = 0; i < lst.size(); i++) {\n        freq[lst[i]]++;\n\
    \    }\n    for(long i = 0; i < 1000; i++) {\n        if(freq[i] >= lst.size())\
    \ {\n            ans = i;\n            break;\n        }\n    }\n    return ans;\n\
    }\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5, 1}))) == (1));\n    assert(candidate((std::vector<long>({4, 1, 4, 1,\
    \ 4, 4}))) == (4));\n    assert(candidate((std::vector<long>({3, 3}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({8, 8, 8, 8, 8, 8, 8, 8}))) == (8));\n\
    \    assert(candidate((std::vector<long>({2, 3, 3, 2, 2}))) == (2));\n    assert(candidate((std::vector<long>({2,\
    \ 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 2, 8, 2}))) == (2));\n    assert(candidate((std::vector<long>({6,\
    \ 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}))) == (1));\n    assert(candidate((std::vector<long>({8,\
    \ 8, 3, 6, 5, 6, 4}))) == (-1));\n    assert(candidate((std::vector<long>({6,\
    \ 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9})))\
    \ == (1));\n    assert(candidate((std::vector<long>({1, 9, 10, 1, 3}))) == (1));\n\
    \    assert(candidate((std::vector<long>({6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10,\
    \ 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}))) == (5));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({8, 8, 10, 6, 4, 3, 5, 8,\
    \ 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}))) == (4));\n    assert(candidate((std::vector<long>({2,\
    \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}))) == (2));\n    assert(candidate((std::vector<long>({1,\
    \ 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}))) == (1));\n    assert(candidate((std::vector<long>({9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}))) == (4));\n    assert(candidate((std::vector<long>({2, 6, 4,\
    \ 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}))) == (4));\n\
    \    assert(candidate((std::vector<long>({9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10,\
    \ 3, 8, 2, 6, 2, 3, 1}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({10}))) == (-1));\n    assert(candidate((std::vector<long>({9,\
    \ 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}))) == (1));\n    assert(candidate((std::vector<long>({7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 10, 10, 9, 2}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmpwg8y5cvx: /tmp/tmpwg8y5cvx.cpp:27: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 5, 5, 5, 1}))) == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the list.\n// If no such a value exist, return -1.\n// Examples:\n// search([4,\
    \ 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n// search([5,\
    \ 5, 4, 4, 4]) == -1\nlong search(std::vector<long> lst) {\n    long maxVal =\
    \ lst[0];\n    long freq = lst[0];\n    for (long i = 1; i < lst.size(); i++)\
    \ {\n        if (lst[i] > maxVal) {\n            maxVal = lst[i];\n          \
    \  freq = lst[i];\n        } else if (lst[i] == maxVal) {\n            freq++;\n\
    \        }\n    }\n    if (freq > maxVal) {\n        return -1;\n    } else {\n\
    \        return maxVal;\n    }\n}\nint main() {\n    auto candidate = search;\n\
    \    assert(candidate((std::vector<long>({5, 5, 5, 5, 1}))) == (1));\n    assert(candidate((std::vector<long>({4,\
    \ 1, 4, 1, 4, 4}))) == (4));\n    assert(candidate((std::vector<long>({3, 3})))\
    \ == (-1));\n    assert(candidate((std::vector<long>({8, 8, 8, 8, 8, 8, 8, 8})))\
    \ == (8));\n    assert(candidate((std::vector<long>({2, 3, 3, 2, 2}))) == (2));\n\
    \    assert(candidate((std::vector<long>({2, 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10,\
    \ 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}))) == (1));\n    assert(candidate((std::vector<long>({3,\
    \ 2, 8, 2}))) == (2));\n    assert(candidate((std::vector<long>({6, 7, 1, 8, 8,\
    \ 10, 5, 8, 5, 3, 10}))) == (1));\n    assert(candidate((std::vector<long>({8,\
    \ 8, 3, 6, 5, 6, 4}))) == (-1));\n    assert(candidate((std::vector<long>({6,\
    \ 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9})))\
    \ == (1));\n    assert(candidate((std::vector<long>({1, 9, 10, 1, 3}))) == (1));\n\
    \    assert(candidate((std::vector<long>({6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10,\
    \ 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}))) == (5));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({8, 8, 10, 6, 4, 3, 5, 8,\
    \ 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}))) == (4));\n    assert(candidate((std::vector<long>({2,\
    \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}))) == (2));\n    assert(candidate((std::vector<long>({1,\
    \ 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}))) == (1));\n    assert(candidate((std::vector<long>({9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}))) == (4));\n    assert(candidate((std::vector<long>({2, 6, 4,\
    \ 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}))) == (4));\n\
    \    assert(candidate((std::vector<long>({9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10,\
    \ 3, 8, 2, 6, 2, 3, 1}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({10}))) == (-1));\n    assert(candidate((std::vector<long>({9,\
    \ 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}))) == (1));\n    assert(candidate((std::vector<long>({7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 10, 10, 9, 2}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmpx4v2p_ou: /tmp/tmpx4v2p_ou.cpp:30: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 5, 5, 5, 1}))) == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the list.\n// If no such a value exist, return -1.\n// Examples:\n// search([4,\
    \ 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n// search([5,\
    \ 5, 4, 4, 4]) == -1\nlong search(std::vector<long> lst) {\n    long ans = -1;\n\
    \    long freq[1000];\n    long i = 0;\n    for(auto &x: lst) {\n        freq[x]\
    \ = freq[x] + 1;\n    }\n    for(i = 0; i < 1000; i++) {\n        if(freq[i] >=\
    \ lst[0]) {\n            ans = i;\n            break;\n        }\n    }\n    return\
    \ ans;\n}\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5, 1}))) == (1));\n    assert(candidate((std::vector<long>({4, 1, 4, 1,\
    \ 4, 4}))) == (4));\n    assert(candidate((std::vector<long>({3, 3}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({8, 8, 8, 8, 8, 8, 8, 8}))) == (8));\n\
    \    assert(candidate((std::vector<long>({2, 3, 3, 2, 2}))) == (2));\n    assert(candidate((std::vector<long>({2,\
    \ 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 2, 8, 2}))) == (2));\n    assert(candidate((std::vector<long>({6,\
    \ 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}))) == (1));\n    assert(candidate((std::vector<long>({8,\
    \ 8, 3, 6, 5, 6, 4}))) == (-1));\n    assert(candidate((std::vector<long>({6,\
    \ 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9})))\
    \ == (1));\n    assert(candidate((std::vector<long>({1, 9, 10, 1, 3}))) == (1));\n\
    \    assert(candidate((std::vector<long>({6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10,\
    \ 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}))) == (5));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({8, 8, 10, 6, 4, 3, 5, 8,\
    \ 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}))) == (4));\n    assert(candidate((std::vector<long>({2,\
    \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}))) == (2));\n    assert(candidate((std::vector<long>({1,\
    \ 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}))) == (1));\n    assert(candidate((std::vector<long>({9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}))) == (4));\n    assert(candidate((std::vector<long>({2, 6, 4,\
    \ 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}))) == (4));\n\
    \    assert(candidate((std::vector<long>({9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10,\
    \ 3, 8, 2, 6, 2, 3, 1}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({10}))) == (-1));\n    assert(candidate((std::vector<long>({9,\
    \ 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}))) == (1));\n    assert(candidate((std::vector<long>({7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 10, 10, 9, 2}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmprl7yszi0: /tmp/tmprl7yszi0.cpp:28: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 5, 5, 5, 1}))) == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the list.\n// If no such a value exist, return -1.\n// Examples:\n// search([4,\
    \ 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n// search([5,\
    \ 5, 4, 4, 4]) == -1\nlong search(std::vector<long> lst) {\n    long ans = -1;\n\
    \    long freq[100];\n    for (long i : lst) {\n        freq[i] = freq[i] + 1;\n\
    \    }\n    for (long i = 1; i <= 100; i++) {\n        if (freq[i] >= i) {\n \
    \           ans = i;\n            break;\n        }\n    }\n    return ans;\n\
    }\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5, 1}))) == (1));\n    assert(candidate((std::vector<long>({4, 1, 4, 1,\
    \ 4, 4}))) == (4));\n    assert(candidate((std::vector<long>({3, 3}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({8, 8, 8, 8, 8, 8, 8, 8}))) == (8));\n\
    \    assert(candidate((std::vector<long>({2, 3, 3, 2, 2}))) == (2));\n    assert(candidate((std::vector<long>({2,\
    \ 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 2, 8, 2}))) == (2));\n    assert(candidate((std::vector<long>({6,\
    \ 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}))) == (1));\n    assert(candidate((std::vector<long>({8,\
    \ 8, 3, 6, 5, 6, 4}))) == (-1));\n    assert(candidate((std::vector<long>({6,\
    \ 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9})))\
    \ == (1));\n    assert(candidate((std::vector<long>({1, 9, 10, 1, 3}))) == (1));\n\
    \    assert(candidate((std::vector<long>({6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10,\
    \ 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}))) == (5));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({8, 8, 10, 6, 4, 3, 5, 8,\
    \ 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}))) == (4));\n    assert(candidate((std::vector<long>({2,\
    \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}))) == (2));\n    assert(candidate((std::vector<long>({1,\
    \ 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}))) == (1));\n    assert(candidate((std::vector<long>({9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}))) == (4));\n    assert(candidate((std::vector<long>({2, 6, 4,\
    \ 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}))) == (4));\n\
    \    assert(candidate((std::vector<long>({9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10,\
    \ 3, 8, 2, 6, 2, 3, 1}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({10}))) == (-1));\n    assert(candidate((std::vector<long>({9,\
    \ 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}))) == (1));\n    assert(candidate((std::vector<long>({7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 10, 10, 9, 2}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmpdpka9c1j: /tmp/tmpdpka9c1j.cpp:28: int main(): Assertion `candidate((std::vector<long>({4,\
    \ 1, 4, 1, 4, 4}))) == (4)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the list.\n// If no such a value exist, return -1.\n// Examples:\n// search([4,\
    \ 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n// search([5,\
    \ 5, 4, 4, 4]) == -1\nlong search(std::vector<long> lst) {\n    long maxVal =\
    \ lst[0];\n    long freq = lst[0];\n    for (long i : lst) {\n        if (freq\
    \ > i) {\n            freq = i;\n            maxVal = i;\n        }\n    }\n \
    \   return maxVal;\n}\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5, 1}))) == (1));\n    assert(candidate((std::vector<long>({4, 1, 4, 1,\
    \ 4, 4}))) == (4));\n    assert(candidate((std::vector<long>({3, 3}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({8, 8, 8, 8, 8, 8, 8, 8}))) == (8));\n\
    \    assert(candidate((std::vector<long>({2, 3, 3, 2, 2}))) == (2));\n    assert(candidate((std::vector<long>({2,\
    \ 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 2, 8, 2}))) == (2));\n    assert(candidate((std::vector<long>({6,\
    \ 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}))) == (1));\n    assert(candidate((std::vector<long>({8,\
    \ 8, 3, 6, 5, 6, 4}))) == (-1));\n    assert(candidate((std::vector<long>({6,\
    \ 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9})))\
    \ == (1));\n    assert(candidate((std::vector<long>({1, 9, 10, 1, 3}))) == (1));\n\
    \    assert(candidate((std::vector<long>({6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10,\
    \ 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}))) == (5));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({8, 8, 10, 6, 4, 3, 5, 8,\
    \ 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}))) == (4));\n    assert(candidate((std::vector<long>({2,\
    \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}))) == (2));\n    assert(candidate((std::vector<long>({1,\
    \ 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}))) == (1));\n    assert(candidate((std::vector<long>({9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}))) == (4));\n    assert(candidate((std::vector<long>({2, 6, 4,\
    \ 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}))) == (4));\n\
    \    assert(candidate((std::vector<long>({9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10,\
    \ 3, 8, 2, 6, 2, 3, 1}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({10}))) == (-1));\n    assert(candidate((std::vector<long>({9,\
    \ 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}))) == (1));\n    assert(candidate((std::vector<long>({7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 10, 10, 9, 2}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmprkoreq01: /tmp/tmprkoreq01.cpp:25: int main(): Assertion `candidate((std::vector<long>({4,\
    \ 1, 4, 1, 4, 4}))) == (4)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the list.\n// If no such a value exist, return -1.\n// Examples:\n// search([4,\
    \ 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n// search([5,\
    \ 5, 4, 4, 4]) == -1\nlong search(std::vector<long> lst) {\n    // Your code here\n\
    \    long ans = -1;\n    long freq = 0;\n    for (long i : lst) {\n        freq\
    \ += i;\n        if (freq >= i) {\n            ans = i;\n            break;\n\
    \        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate = search;\n\
    \    assert(candidate((std::vector<long>({5, 5, 5, 5, 1}))) == (1));\n    assert(candidate((std::vector<long>({4,\
    \ 1, 4, 1, 4, 4}))) == (4));\n    assert(candidate((std::vector<long>({3, 3})))\
    \ == (-1));\n    assert(candidate((std::vector<long>({8, 8, 8, 8, 8, 8, 8, 8})))\
    \ == (8));\n    assert(candidate((std::vector<long>({2, 3, 3, 2, 2}))) == (2));\n\
    \    assert(candidate((std::vector<long>({2, 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10,\
    \ 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}))) == (1));\n    assert(candidate((std::vector<long>({3,\
    \ 2, 8, 2}))) == (2));\n    assert(candidate((std::vector<long>({6, 7, 1, 8, 8,\
    \ 10, 5, 8, 5, 3, 10}))) == (1));\n    assert(candidate((std::vector<long>({8,\
    \ 8, 3, 6, 5, 6, 4}))) == (-1));\n    assert(candidate((std::vector<long>({6,\
    \ 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9})))\
    \ == (1));\n    assert(candidate((std::vector<long>({1, 9, 10, 1, 3}))) == (1));\n\
    \    assert(candidate((std::vector<long>({6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10,\
    \ 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}))) == (5));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({8, 8, 10, 6, 4, 3, 5, 8,\
    \ 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}))) == (4));\n    assert(candidate((std::vector<long>({2,\
    \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}))) == (2));\n    assert(candidate((std::vector<long>({1,\
    \ 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}))) == (1));\n    assert(candidate((std::vector<long>({9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}))) == (4));\n    assert(candidate((std::vector<long>({2, 6, 4,\
    \ 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}))) == (4));\n\
    \    assert(candidate((std::vector<long>({9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10,\
    \ 3, 8, 2, 6, 2, 3, 1}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({10}))) == (-1));\n    assert(candidate((std::vector<long>({9,\
    \ 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}))) == (1));\n    assert(candidate((std::vector<long>({7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 10, 10, 9, 2}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmpix_1x93j: /tmp/tmpix_1x93j.cpp:26: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 5, 5, 5, 1}))) == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the list.\n// If no such a value exist, return -1.\n// Examples:\n// search([4,\
    \ 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n// search([5,\
    \ 5, 4, 4, 4]) == -1\nlong search(std::vector<long> lst) {\n    long ans = -1;\n\
    \    long freq[100000];\n    for (long i : lst) {\n        freq[i] = freq[i] +\
    \ 1;\n    }\n    for (long i : lst) {\n        if (freq[i] >= i) {\n         \
    \   ans = i;\n            break;\n        }\n    }\n    return ans;\n}\nint main()\
    \ {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5, 1}))) == (1));\n    assert(candidate((std::vector<long>({4, 1, 4, 1,\
    \ 4, 4}))) == (4));\n    assert(candidate((std::vector<long>({3, 3}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({8, 8, 8, 8, 8, 8, 8, 8}))) == (8));\n\
    \    assert(candidate((std::vector<long>({2, 3, 3, 2, 2}))) == (2));\n    assert(candidate((std::vector<long>({2,\
    \ 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 2, 8, 2}))) == (2));\n    assert(candidate((std::vector<long>({6,\
    \ 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}))) == (1));\n    assert(candidate((std::vector<long>({8,\
    \ 8, 3, 6, 5, 6, 4}))) == (-1));\n    assert(candidate((std::vector<long>({6,\
    \ 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9})))\
    \ == (1));\n    assert(candidate((std::vector<long>({1, 9, 10, 1, 3}))) == (1));\n\
    \    assert(candidate((std::vector<long>({6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10,\
    \ 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}))) == (5));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({8, 8, 10, 6, 4, 3, 5, 8,\
    \ 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}))) == (4));\n    assert(candidate((std::vector<long>({2,\
    \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}))) == (2));\n    assert(candidate((std::vector<long>({1,\
    \ 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}))) == (1));\n    assert(candidate((std::vector<long>({9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}))) == (4));\n    assert(candidate((std::vector<long>({2, 6, 4,\
    \ 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}))) == (4));\n\
    \    assert(candidate((std::vector<long>({9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10,\
    \ 3, 8, 2, 6, 2, 3, 1}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({10}))) == (-1));\n    assert(candidate((std::vector<long>({9,\
    \ 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}))) == (1));\n    assert(candidate((std::vector<long>({7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 10, 10, 9, 2}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmpuqafblec: /tmp/tmpuqafblec.cpp:32: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}))) == (1)'\
    \ failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the list.\n// If no such a value exist, return -1.\n// Examples:\n// search([4,\
    \ 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n// search([5,\
    \ 5, 4, 4, 4]) == -1\nlong search(std::vector<long> lst) {\n    // Your code here\n\
    \    long ans = -1;\n    long freq = 0;\n    for (long i : lst) {\n        freq\
    \ += i;\n        if (freq > ans) {\n            ans = freq;\n        }\n    }\n\
    \    return ans;\n}\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5, 1}))) == (1));\n    assert(candidate((std::vector<long>({4, 1, 4, 1,\
    \ 4, 4}))) == (4));\n    assert(candidate((std::vector<long>({3, 3}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({8, 8, 8, 8, 8, 8, 8, 8}))) == (8));\n\
    \    assert(candidate((std::vector<long>({2, 3, 3, 2, 2}))) == (2));\n    assert(candidate((std::vector<long>({2,\
    \ 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 2, 8, 2}))) == (2));\n    assert(candidate((std::vector<long>({6,\
    \ 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}))) == (1));\n    assert(candidate((std::vector<long>({8,\
    \ 8, 3, 6, 5, 6, 4}))) == (-1));\n    assert(candidate((std::vector<long>({6,\
    \ 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9})))\
    \ == (1));\n    assert(candidate((std::vector<long>({1, 9, 10, 1, 3}))) == (1));\n\
    \    assert(candidate((std::vector<long>({6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10,\
    \ 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}))) == (5));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({8, 8, 10, 6, 4, 3, 5, 8,\
    \ 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}))) == (4));\n    assert(candidate((std::vector<long>({2,\
    \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}))) == (2));\n    assert(candidate((std::vector<long>({1,\
    \ 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}))) == (1));\n    assert(candidate((std::vector<long>({9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}))) == (4));\n    assert(candidate((std::vector<long>({2, 6, 4,\
    \ 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}))) == (4));\n\
    \    assert(candidate((std::vector<long>({9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10,\
    \ 3, 8, 2, 6, 2, 3, 1}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({10}))) == (-1));\n    assert(candidate((std::vector<long>({9,\
    \ 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}))) == (1));\n    assert(candidate((std::vector<long>({7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 10, 10, 9, 2}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmpthxdfkjg: /tmp/tmpthxdfkjg.cpp:25: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 5, 5, 5, 1}))) == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the list.\n// If no such a value exist, return -1.\n// Examples:\n// search([4,\
    \ 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n// search([5,\
    \ 5, 4, 4, 4]) == -1\nlong search(std::vector<long> lst) {\n    long ans = -1;\n\
    \    long freq[100] = {0};\n    for (long i : lst) {\n        freq[i]++;\n   \
    \ }\n    for (long i : lst) {\n        if (freq[i] >= i) {\n            ans =\
    \ i;\n            break;\n        }\n    }\n    return ans;\n}\nint main() {\n\
    \    auto candidate = search;\n    assert(candidate((std::vector<long>({5, 5,\
    \ 5, 5, 1}))) == (1));\n    assert(candidate((std::vector<long>({4, 1, 4, 1, 4,\
    \ 4}))) == (4));\n    assert(candidate((std::vector<long>({3, 3}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({8, 8, 8, 8, 8, 8, 8, 8}))) == (8));\n\
    \    assert(candidate((std::vector<long>({2, 3, 3, 2, 2}))) == (2));\n    assert(candidate((std::vector<long>({2,\
    \ 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 2, 8, 2}))) == (2));\n    assert(candidate((std::vector<long>({6,\
    \ 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}))) == (1));\n    assert(candidate((std::vector<long>({8,\
    \ 8, 3, 6, 5, 6, 4}))) == (-1));\n    assert(candidate((std::vector<long>({6,\
    \ 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9})))\
    \ == (1));\n    assert(candidate((std::vector<long>({1, 9, 10, 1, 3}))) == (1));\n\
    \    assert(candidate((std::vector<long>({6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10,\
    \ 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}))) == (5));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({8, 8, 10, 6, 4, 3, 5, 8,\
    \ 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}))) == (4));\n    assert(candidate((std::vector<long>({2,\
    \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}))) == (2));\n    assert(candidate((std::vector<long>({1,\
    \ 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}))) == (1));\n    assert(candidate((std::vector<long>({9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}))) == (4));\n    assert(candidate((std::vector<long>({2, 6, 4,\
    \ 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}))) == (4));\n\
    \    assert(candidate((std::vector<long>({9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10,\
    \ 3, 8, 2, 6, 2, 3, 1}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({10}))) == (-1));\n    assert(candidate((std::vector<long>({9,\
    \ 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}))) == (1));\n    assert(candidate((std::vector<long>({7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 10, 10, 9, 2}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmphijp50jq: /tmp/tmphijp50jq.cpp:43: int main(): Assertion `candidate((std::vector<long>({9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}))) == (4)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the list.\n// If no such a value exist, return -1.\n// Examples:\n// search([4,\
    \ 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n// search([5,\
    \ 5, 4, 4, 4]) == -1\nlong search(std::vector<long> lst) {\n    long ans = -1;\n\
    \    long freq[100];\n    for (long i = 0; i < lst.size(); i++) {\n        freq[lst[i]]++;\n\
    \    }\n    for (long i = 0; i < lst.size(); i++) {\n        if (freq[lst[i]]\
    \ >= lst[i]) {\n            ans = lst[i];\n            break;\n        }\n   \
    \ }\n    return ans;\n}\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5, 1}))) == (1));\n    assert(candidate((std::vector<long>({4, 1, 4, 1,\
    \ 4, 4}))) == (4));\n    assert(candidate((std::vector<long>({3, 3}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({8, 8, 8, 8, 8, 8, 8, 8}))) == (8));\n\
    \    assert(candidate((std::vector<long>({2, 3, 3, 2, 2}))) == (2));\n    assert(candidate((std::vector<long>({2,\
    \ 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 2, 8, 2}))) == (2));\n    assert(candidate((std::vector<long>({6,\
    \ 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}))) == (1));\n    assert(candidate((std::vector<long>({8,\
    \ 8, 3, 6, 5, 6, 4}))) == (-1));\n    assert(candidate((std::vector<long>({6,\
    \ 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9})))\
    \ == (1));\n    assert(candidate((std::vector<long>({1, 9, 10, 1, 3}))) == (1));\n\
    \    assert(candidate((std::vector<long>({6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10,\
    \ 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}))) == (5));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({8, 8, 10, 6, 4, 3, 5, 8,\
    \ 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}))) == (4));\n    assert(candidate((std::vector<long>({2,\
    \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}))) == (2));\n    assert(candidate((std::vector<long>({1,\
    \ 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}))) == (1));\n    assert(candidate((std::vector<long>({9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}))) == (4));\n    assert(candidate((std::vector<long>({2, 6, 4,\
    \ 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}))) == (4));\n\
    \    assert(candidate((std::vector<long>({9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10,\
    \ 3, 8, 2, 6, 2, 3, 1}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({10}))) == (-1));\n    assert(candidate((std::vector<long>({9,\
    \ 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}))) == (1));\n    assert(candidate((std::vector<long>({7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 10, 10, 9, 2}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmp8c18h8l2: /tmp/tmp8c18h8l2.cpp:27: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 5, 5, 5, 1}))) == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the list.\n// If no such a value exist, return -1.\n// Examples:\n// search([4,\
    \ 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n// search([5,\
    \ 5, 4, 4, 4]) == -1\nlong search(std::vector<long> lst) {\n    long ans = -1;\n\
    \    long freq = 0;\n    for (long i : lst) {\n        freq += i;\n        if\
    \ (freq >= i) {\n            ans = i;\n            freq -= i;\n        }\n   \
    \ }\n    return ans;\n}\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5, 1}))) == (1));\n    assert(candidate((std::vector<long>({4, 1, 4, 1,\
    \ 4, 4}))) == (4));\n    assert(candidate((std::vector<long>({3, 3}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({8, 8, 8, 8, 8, 8, 8, 8}))) == (8));\n\
    \    assert(candidate((std::vector<long>({2, 3, 3, 2, 2}))) == (2));\n    assert(candidate((std::vector<long>({2,\
    \ 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 2, 8, 2}))) == (2));\n    assert(candidate((std::vector<long>({6,\
    \ 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}))) == (1));\n    assert(candidate((std::vector<long>({8,\
    \ 8, 3, 6, 5, 6, 4}))) == (-1));\n    assert(candidate((std::vector<long>({6,\
    \ 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9})))\
    \ == (1));\n    assert(candidate((std::vector<long>({1, 9, 10, 1, 3}))) == (1));\n\
    \    assert(candidate((std::vector<long>({6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10,\
    \ 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}))) == (5));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({8, 8, 10, 6, 4, 3, 5, 8,\
    \ 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}))) == (4));\n    assert(candidate((std::vector<long>({2,\
    \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}))) == (2));\n    assert(candidate((std::vector<long>({1,\
    \ 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}))) == (1));\n    assert(candidate((std::vector<long>({9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}))) == (4));\n    assert(candidate((std::vector<long>({2, 6, 4,\
    \ 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}))) == (4));\n\
    \    assert(candidate((std::vector<long>({9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10,\
    \ 3, 8, 2, 6, 2, 3, 1}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({10}))) == (-1));\n    assert(candidate((std::vector<long>({9,\
    \ 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}))) == (1));\n    assert(candidate((std::vector<long>({7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 10, 10, 9, 2}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmp5nc9uwf2: /tmp/tmp5nc9uwf2.cpp:27: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 3}))) == (-1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the list.\n// If no such a value exist, return -1.\n// Examples:\n// search([4,\
    \ 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n// search([5,\
    \ 5, 4, 4, 4]) == -1\nlong search(std::vector<long> lst) {\n    long ans = -1;\n\
    \    long freq[100000] = {0};\n    for (long i : lst) {\n        freq[i]++;\n\
    \    }\n    for (long i = 1; i < 100000; i++) {\n        if (freq[i] > freq[i\
    \ - 1]) {\n            ans = i;\n            break;\n        }\n    }\n    return\
    \ ans;\n}\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5, 1}))) == (1));\n    assert(candidate((std::vector<long>({4, 1, 4, 1,\
    \ 4, 4}))) == (4));\n    assert(candidate((std::vector<long>({3, 3}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({8, 8, 8, 8, 8, 8, 8, 8}))) == (8));\n\
    \    assert(candidate((std::vector<long>({2, 3, 3, 2, 2}))) == (2));\n    assert(candidate((std::vector<long>({2,\
    \ 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 2, 8, 2}))) == (2));\n    assert(candidate((std::vector<long>({6,\
    \ 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}))) == (1));\n    assert(candidate((std::vector<long>({8,\
    \ 8, 3, 6, 5, 6, 4}))) == (-1));\n    assert(candidate((std::vector<long>({6,\
    \ 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9})))\
    \ == (1));\n    assert(candidate((std::vector<long>({1, 9, 10, 1, 3}))) == (1));\n\
    \    assert(candidate((std::vector<long>({6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10,\
    \ 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}))) == (5));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({8, 8, 10, 6, 4, 3, 5, 8,\
    \ 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}))) == (4));\n    assert(candidate((std::vector<long>({2,\
    \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}))) == (2));\n    assert(candidate((std::vector<long>({1,\
    \ 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}))) == (1));\n    assert(candidate((std::vector<long>({9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}))) == (4));\n    assert(candidate((std::vector<long>({2, 6, 4,\
    \ 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}))) == (4));\n\
    \    assert(candidate((std::vector<long>({9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10,\
    \ 3, 8, 2, 6, 2, 3, 1}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({10}))) == (-1));\n    assert(candidate((std::vector<long>({9,\
    \ 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}))) == (1));\n    assert(candidate((std::vector<long>({7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 10, 10, 9, 2}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmplzjtfc2s: /tmp/tmplzjtfc2s.cpp:28: int main(): Assertion `candidate((std::vector<long>({4,\
    \ 1, 4, 1, 4, 4}))) == (4)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the list.\n// If no such a value exist, return -1.\n// Examples:\n// search([4,\
    \ 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n// search([5,\
    \ 5, 4, 4, 4]) == -1\nlong search(std::vector<long> lst) {\n    long ans = -1;\n\
    \    long freq[10000];\n    for (long i = 0; i < lst.size(); i++) {\n        freq[lst[i]]++;\n\
    \    }\n    for (long i = 1; i < 10000; i++) {\n        if (freq[i] > freq[i -\
    \ 1]) {\n            ans = i;\n            break;\n        }\n    }\n    return\
    \ ans;\n}\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5, 1}))) == (1));\n    assert(candidate((std::vector<long>({4, 1, 4, 1,\
    \ 4, 4}))) == (4));\n    assert(candidate((std::vector<long>({3, 3}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({8, 8, 8, 8, 8, 8, 8, 8}))) == (8));\n\
    \    assert(candidate((std::vector<long>({2, 3, 3, 2, 2}))) == (2));\n    assert(candidate((std::vector<long>({2,\
    \ 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 2, 8, 2}))) == (2));\n    assert(candidate((std::vector<long>({6,\
    \ 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}))) == (1));\n    assert(candidate((std::vector<long>({8,\
    \ 8, 3, 6, 5, 6, 4}))) == (-1));\n    assert(candidate((std::vector<long>({6,\
    \ 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9})))\
    \ == (1));\n    assert(candidate((std::vector<long>({1, 9, 10, 1, 3}))) == (1));\n\
    \    assert(candidate((std::vector<long>({6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10,\
    \ 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}))) == (5));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({8, 8, 10, 6, 4, 3, 5, 8,\
    \ 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}))) == (4));\n    assert(candidate((std::vector<long>({2,\
    \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}))) == (2));\n    assert(candidate((std::vector<long>({1,\
    \ 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}))) == (1));\n    assert(candidate((std::vector<long>({9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}))) == (4));\n    assert(candidate((std::vector<long>({2, 6, 4,\
    \ 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}))) == (4));\n\
    \    assert(candidate((std::vector<long>({9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10,\
    \ 3, 8, 2, 6, 2, 3, 1}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({10}))) == (-1));\n    assert(candidate((std::vector<long>({9,\
    \ 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}))) == (1));\n    assert(candidate((std::vector<long>({7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 10, 10, 9, 2}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmp9_sw9kqw: /tmp/tmp9_sw9kqw.cpp:28: int main(): Assertion `candidate((std::vector<long>({4,\
    \ 1, 4, 1, 4, 4}))) == (4)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the list.\n// If no such a value exist, return -1.\n// Examples:\n// search([4,\
    \ 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n// search([5,\
    \ 5, 4, 4, 4]) == -1\nlong search(std::vector<long> lst) {\n    long ans = -1;\n\
    \    long freq = 0;\n    for(long i : lst) {\n        freq += i;\n        if(freq\
    \ > ans) {\n            ans = freq;\n        }\n    }\n    return ans;\n}\nint\
    \ main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5, 1}))) == (1));\n    assert(candidate((std::vector<long>({4, 1, 4, 1,\
    \ 4, 4}))) == (4));\n    assert(candidate((std::vector<long>({3, 3}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({8, 8, 8, 8, 8, 8, 8, 8}))) == (8));\n\
    \    assert(candidate((std::vector<long>({2, 3, 3, 2, 2}))) == (2));\n    assert(candidate((std::vector<long>({2,\
    \ 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 2, 8, 2}))) == (2));\n    assert(candidate((std::vector<long>({6,\
    \ 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}))) == (1));\n    assert(candidate((std::vector<long>({8,\
    \ 8, 3, 6, 5, 6, 4}))) == (-1));\n    assert(candidate((std::vector<long>({6,\
    \ 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9})))\
    \ == (1));\n    assert(candidate((std::vector<long>({1, 9, 10, 1, 3}))) == (1));\n\
    \    assert(candidate((std::vector<long>({6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10,\
    \ 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}))) == (5));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({8, 8, 10, 6, 4, 3, 5, 8,\
    \ 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}))) == (4));\n    assert(candidate((std::vector<long>({2,\
    \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}))) == (2));\n    assert(candidate((std::vector<long>({1,\
    \ 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}))) == (1));\n    assert(candidate((std::vector<long>({9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}))) == (4));\n    assert(candidate((std::vector<long>({2, 6, 4,\
    \ 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}))) == (4));\n\
    \    assert(candidate((std::vector<long>({9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10,\
    \ 3, 8, 2, 6, 2, 3, 1}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({10}))) == (-1));\n    assert(candidate((std::vector<long>({9,\
    \ 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}))) == (1));\n    assert(candidate((std::vector<long>({7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 10, 10, 9, 2}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmp5im3571i: /tmp/tmp5im3571i.cpp:24: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 5, 5, 5, 1}))) == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the list.\n// If no such a value exist, return -1.\n// Examples:\n// search([4,\
    \ 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n// search([5,\
    \ 5, 4, 4, 4]) == -1\nlong search(std::vector<long> lst) {\n    // Your code here\n\
    \    long ans = -1;\n    long freq = 0;\n    for (long i : lst) {\n        freq\
    \ += i;\n        if (freq >= i) {\n            ans = i;\n            break;\n\
    \        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate = search;\n\
    \    assert(candidate((std::vector<long>({5, 5, 5, 5, 1}))) == (1));\n    assert(candidate((std::vector<long>({4,\
    \ 1, 4, 1, 4, 4}))) == (4));\n    assert(candidate((std::vector<long>({3, 3})))\
    \ == (-1));\n    assert(candidate((std::vector<long>({8, 8, 8, 8, 8, 8, 8, 8})))\
    \ == (8));\n    assert(candidate((std::vector<long>({2, 3, 3, 2, 2}))) == (2));\n\
    \    assert(candidate((std::vector<long>({2, 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10,\
    \ 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}))) == (1));\n    assert(candidate((std::vector<long>({3,\
    \ 2, 8, 2}))) == (2));\n    assert(candidate((std::vector<long>({6, 7, 1, 8, 8,\
    \ 10, 5, 8, 5, 3, 10}))) == (1));\n    assert(candidate((std::vector<long>({8,\
    \ 8, 3, 6, 5, 6, 4}))) == (-1));\n    assert(candidate((std::vector<long>({6,\
    \ 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9})))\
    \ == (1));\n    assert(candidate((std::vector<long>({1, 9, 10, 1, 3}))) == (1));\n\
    \    assert(candidate((std::vector<long>({6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10,\
    \ 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}))) == (5));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({8, 8, 10, 6, 4, 3, 5, 8,\
    \ 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}))) == (4));\n    assert(candidate((std::vector<long>({2,\
    \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}))) == (2));\n    assert(candidate((std::vector<long>({1,\
    \ 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}))) == (1));\n    assert(candidate((std::vector<long>({9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}))) == (4));\n    assert(candidate((std::vector<long>({2, 6, 4,\
    \ 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}))) == (4));\n\
    \    assert(candidate((std::vector<long>({9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10,\
    \ 3, 8, 2, 6, 2, 3, 1}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({10}))) == (-1));\n    assert(candidate((std::vector<long>({9,\
    \ 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}))) == (1));\n    assert(candidate((std::vector<long>({7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 10, 10, 9, 2}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmp9kg4cpcg: /tmp/tmp9kg4cpcg.cpp:26: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 5, 5, 5, 1}))) == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the list.\n// If no such a value exist, return -1.\n// Examples:\n// search([4,\
    \ 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n// search([5,\
    \ 5, 4, 4, 4]) == -1\nlong search(std::vector<long> lst) {\n    long ans = -1;\n\
    \    long freq = 0;\n    for(long i : lst) {\n        freq += i;\n        if(freq\
    \ >= i) {\n            ans = i;\n            break;\n        }\n    }\n    return\
    \ ans;\n}\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5, 1}))) == (1));\n    assert(candidate((std::vector<long>({4, 1, 4, 1,\
    \ 4, 4}))) == (4));\n    assert(candidate((std::vector<long>({3, 3}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({8, 8, 8, 8, 8, 8, 8, 8}))) == (8));\n\
    \    assert(candidate((std::vector<long>({2, 3, 3, 2, 2}))) == (2));\n    assert(candidate((std::vector<long>({2,\
    \ 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 2, 8, 2}))) == (2));\n    assert(candidate((std::vector<long>({6,\
    \ 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}))) == (1));\n    assert(candidate((std::vector<long>({8,\
    \ 8, 3, 6, 5, 6, 4}))) == (-1));\n    assert(candidate((std::vector<long>({6,\
    \ 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9})))\
    \ == (1));\n    assert(candidate((std::vector<long>({1, 9, 10, 1, 3}))) == (1));\n\
    \    assert(candidate((std::vector<long>({6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10,\
    \ 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}))) == (5));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({8, 8, 10, 6, 4, 3, 5, 8,\
    \ 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}))) == (4));\n    assert(candidate((std::vector<long>({2,\
    \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}))) == (2));\n    assert(candidate((std::vector<long>({1,\
    \ 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}))) == (1));\n    assert(candidate((std::vector<long>({9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}))) == (4));\n    assert(candidate((std::vector<long>({2, 6, 4,\
    \ 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}))) == (4));\n\
    \    assert(candidate((std::vector<long>({9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10,\
    \ 3, 8, 2, 6, 2, 3, 1}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({10}))) == (-1));\n    assert(candidate((std::vector<long>({9,\
    \ 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}))) == (1));\n    assert(candidate((std::vector<long>({7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 10, 10, 9, 2}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmp89u4z8fe: /tmp/tmp89u4z8fe.cpp:25: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 5, 5, 5, 1}))) == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the list.\n// If no such a value exist, return -1.\n// Examples:\n// search([4,\
    \ 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n// search([5,\
    \ 5, 4, 4, 4]) == -1\nlong search(std::vector<long> lst) {\n    long ans = -1;\n\
    \    long freq = 0;\n    for (long i : lst) {\n        freq += i;\n        if\
    \ (freq > ans) {\n            ans = freq;\n        }\n    }\n    return ans;\n\
    }\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5, 1}))) == (1));\n    assert(candidate((std::vector<long>({4, 1, 4, 1,\
    \ 4, 4}))) == (4));\n    assert(candidate((std::vector<long>({3, 3}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({8, 8, 8, 8, 8, 8, 8, 8}))) == (8));\n\
    \    assert(candidate((std::vector<long>({2, 3, 3, 2, 2}))) == (2));\n    assert(candidate((std::vector<long>({2,\
    \ 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 2, 8, 2}))) == (2));\n    assert(candidate((std::vector<long>({6,\
    \ 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}))) == (1));\n    assert(candidate((std::vector<long>({8,\
    \ 8, 3, 6, 5, 6, 4}))) == (-1));\n    assert(candidate((std::vector<long>({6,\
    \ 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9})))\
    \ == (1));\n    assert(candidate((std::vector<long>({1, 9, 10, 1, 3}))) == (1));\n\
    \    assert(candidate((std::vector<long>({6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10,\
    \ 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}))) == (5));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({8, 8, 10, 6, 4, 3, 5, 8,\
    \ 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}))) == (4));\n    assert(candidate((std::vector<long>({2,\
    \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}))) == (2));\n    assert(candidate((std::vector<long>({1,\
    \ 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}))) == (1));\n    assert(candidate((std::vector<long>({9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}))) == (4));\n    assert(candidate((std::vector<long>({2, 6, 4,\
    \ 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}))) == (4));\n\
    \    assert(candidate((std::vector<long>({9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10,\
    \ 3, 8, 2, 6, 2, 3, 1}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({10}))) == (-1));\n    assert(candidate((std::vector<long>({9,\
    \ 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}))) == (1));\n    assert(candidate((std::vector<long>({7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 10, 10, 9, 2}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmp2c_8lhrs: /tmp/tmp2c_8lhrs.cpp:24: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 5, 5, 5, 1}))) == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the list.\n// If no such a value exist, return -1.\n// Examples:\n// search([4,\
    \ 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n// search([5,\
    \ 5, 4, 4, 4]) == -1\nlong search(std::vector<long> lst) {\n    long maxVal =\
    \ lst[0];\n    long freq = lst[0];\n    for (long i = 1; i < lst.size(); i++)\
    \ {\n        if (lst[i] > maxVal) {\n            maxVal = lst[i];\n          \
    \  freq = lst[i];\n        } else if (lst[i] == maxVal) {\n            freq++;\n\
    \        }\n    }\n    if (freq > lst[0]) {\n        return -1;\n    } else {\n\
    \        return maxVal;\n    }\n}\nint main() {\n    auto candidate = search;\n\
    \    assert(candidate((std::vector<long>({5, 5, 5, 5, 1}))) == (1));\n    assert(candidate((std::vector<long>({4,\
    \ 1, 4, 1, 4, 4}))) == (4));\n    assert(candidate((std::vector<long>({3, 3})))\
    \ == (-1));\n    assert(candidate((std::vector<long>({8, 8, 8, 8, 8, 8, 8, 8})))\
    \ == (8));\n    assert(candidate((std::vector<long>({2, 3, 3, 2, 2}))) == (2));\n\
    \    assert(candidate((std::vector<long>({2, 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10,\
    \ 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}))) == (1));\n    assert(candidate((std::vector<long>({3,\
    \ 2, 8, 2}))) == (2));\n    assert(candidate((std::vector<long>({6, 7, 1, 8, 8,\
    \ 10, 5, 8, 5, 3, 10}))) == (1));\n    assert(candidate((std::vector<long>({8,\
    \ 8, 3, 6, 5, 6, 4}))) == (-1));\n    assert(candidate((std::vector<long>({6,\
    \ 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9})))\
    \ == (1));\n    assert(candidate((std::vector<long>({1, 9, 10, 1, 3}))) == (1));\n\
    \    assert(candidate((std::vector<long>({6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10,\
    \ 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}))) == (5));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({8, 8, 10, 6, 4, 3, 5, 8,\
    \ 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}))) == (4));\n    assert(candidate((std::vector<long>({2,\
    \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}))) == (2));\n    assert(candidate((std::vector<long>({1,\
    \ 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}))) == (1));\n    assert(candidate((std::vector<long>({9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}))) == (4));\n    assert(candidate((std::vector<long>({2, 6, 4,\
    \ 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}))) == (4));\n\
    \    assert(candidate((std::vector<long>({9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10,\
    \ 3, 8, 2, 6, 2, 3, 1}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({10}))) == (-1));\n    assert(candidate((std::vector<long>({9,\
    \ 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}))) == (1));\n    assert(candidate((std::vector<long>({7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 10, 10, 9, 2}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmpnyuu5f2b: /tmp/tmpnyuu5f2b.cpp:30: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 5, 5, 5, 1}))) == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the list.\n// If no such a value exist, return -1.\n// Examples:\n// search([4,\
    \ 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n// search([5,\
    \ 5, 4, 4, 4]) == -1\nlong search(std::vector<long> lst) {\n    long ans = -1;\n\
    \    long freq[100];\n    for (long i : lst) {\n        freq[i] = freq[i] + 1;\n\
    \    }\n    for (long i : lst) {\n        if (freq[i] > ans) {\n            ans\
    \ = freq[i];\n        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate\
    \ = search;\n    assert(candidate((std::vector<long>({5, 5, 5, 5, 1}))) == (1));\n\
    \    assert(candidate((std::vector<long>({4, 1, 4, 1, 4, 4}))) == (4));\n    assert(candidate((std::vector<long>({3,\
    \ 3}))) == (-1));\n    assert(candidate((std::vector<long>({8, 8, 8, 8, 8, 8,\
    \ 8, 8}))) == (8));\n    assert(candidate((std::vector<long>({2, 3, 3, 2, 2})))\
    \ == (2));\n    assert(candidate((std::vector<long>({2, 7, 8, 8, 4, 8, 7, 3, 9,\
    \ 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}))) == (1));\n    assert(candidate((std::vector<long>({3,\
    \ 2, 8, 2}))) == (2));\n    assert(candidate((std::vector<long>({6, 7, 1, 8, 8,\
    \ 10, 5, 8, 5, 3, 10}))) == (1));\n    assert(candidate((std::vector<long>({8,\
    \ 8, 3, 6, 5, 6, 4}))) == (-1));\n    assert(candidate((std::vector<long>({6,\
    \ 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9})))\
    \ == (1));\n    assert(candidate((std::vector<long>({1, 9, 10, 1, 3}))) == (1));\n\
    \    assert(candidate((std::vector<long>({6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10,\
    \ 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}))) == (5));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({8, 8, 10, 6, 4, 3, 5, 8,\
    \ 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}))) == (4));\n    assert(candidate((std::vector<long>({2,\
    \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}))) == (2));\n    assert(candidate((std::vector<long>({1,\
    \ 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}))) == (1));\n    assert(candidate((std::vector<long>({9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}))) == (4));\n    assert(candidate((std::vector<long>({2, 6, 4,\
    \ 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}))) == (4));\n\
    \    assert(candidate((std::vector<long>({9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10,\
    \ 3, 8, 2, 6, 2, 3, 1}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({10}))) == (-1));\n    assert(candidate((std::vector<long>({9,\
    \ 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}))) == (1));\n    assert(candidate((std::vector<long>({7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 10, 10, 9, 2}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmpwt1vxyd9: /tmp/tmpwt1vxyd9.cpp:26: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 5, 5, 5, 1}))) == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the list.\n// If no such a value exist, return -1.\n// Examples:\n// search([4,\
    \ 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n// search([5,\
    \ 5, 4, 4, 4]) == -1\nlong search(std::vector<long> lst) {\n    long ans = -1;\n\
    \    long freq = 0;\n    for (long i : lst) {\n        freq += i;\n        if\
    \ (freq >= i) {\n            ans = i;\n            freq -= i;\n        }\n   \
    \ }\n    return ans;\n}\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5, 1}))) == (1));\n    assert(candidate((std::vector<long>({4, 1, 4, 1,\
    \ 4, 4}))) == (4));\n    assert(candidate((std::vector<long>({3, 3}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({8, 8, 8, 8, 8, 8, 8, 8}))) == (8));\n\
    \    assert(candidate((std::vector<long>({2, 3, 3, 2, 2}))) == (2));\n    assert(candidate((std::vector<long>({2,\
    \ 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 2, 8, 2}))) == (2));\n    assert(candidate((std::vector<long>({6,\
    \ 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}))) == (1));\n    assert(candidate((std::vector<long>({8,\
    \ 8, 3, 6, 5, 6, 4}))) == (-1));\n    assert(candidate((std::vector<long>({6,\
    \ 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9})))\
    \ == (1));\n    assert(candidate((std::vector<long>({1, 9, 10, 1, 3}))) == (1));\n\
    \    assert(candidate((std::vector<long>({6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10,\
    \ 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}))) == (5));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({8, 8, 10, 6, 4, 3, 5, 8,\
    \ 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}))) == (4));\n    assert(candidate((std::vector<long>({2,\
    \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}))) == (2));\n    assert(candidate((std::vector<long>({1,\
    \ 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}))) == (1));\n    assert(candidate((std::vector<long>({9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}))) == (4));\n    assert(candidate((std::vector<long>({2, 6, 4,\
    \ 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}))) == (4));\n\
    \    assert(candidate((std::vector<long>({9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10,\
    \ 3, 8, 2, 6, 2, 3, 1}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({10}))) == (-1));\n    assert(candidate((std::vector<long>({9,\
    \ 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}))) == (1));\n    assert(candidate((std::vector<long>({7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 10, 10, 9, 2}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmpeggon_c7: /tmp/tmpeggon_c7.cpp:27: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 3}))) == (-1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the list.\n// If no such a value exist, return -1.\n// Examples:\n// search([4,\
    \ 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n// search([5,\
    \ 5, 4, 4, 4]) == -1\nlong search(std::vector<long> lst) {\n    long ans = -1;\n\
    \    long freq[1000];\n    for(long i = 0; i < lst.size(); i++) {\n        freq[lst[i]]++;\n\
    \    }\n    for(long i = 0; i < 1000; i++) {\n        if(freq[i] >= lst.size())\
    \ {\n            ans = i;\n            break;\n        }\n    }\n    return ans;\n\
    }\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5, 1}))) == (1));\n    assert(candidate((std::vector<long>({4, 1, 4, 1,\
    \ 4, 4}))) == (4));\n    assert(candidate((std::vector<long>({3, 3}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({8, 8, 8, 8, 8, 8, 8, 8}))) == (8));\n\
    \    assert(candidate((std::vector<long>({2, 3, 3, 2, 2}))) == (2));\n    assert(candidate((std::vector<long>({2,\
    \ 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 2, 8, 2}))) == (2));\n    assert(candidate((std::vector<long>({6,\
    \ 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}))) == (1));\n    assert(candidate((std::vector<long>({8,\
    \ 8, 3, 6, 5, 6, 4}))) == (-1));\n    assert(candidate((std::vector<long>({6,\
    \ 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9})))\
    \ == (1));\n    assert(candidate((std::vector<long>({1, 9, 10, 1, 3}))) == (1));\n\
    \    assert(candidate((std::vector<long>({6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10,\
    \ 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}))) == (5));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({8, 8, 10, 6, 4, 3, 5, 8,\
    \ 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}))) == (4));\n    assert(candidate((std::vector<long>({2,\
    \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}))) == (2));\n    assert(candidate((std::vector<long>({1,\
    \ 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}))) == (1));\n    assert(candidate((std::vector<long>({9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}))) == (4));\n    assert(candidate((std::vector<long>({2, 6, 4,\
    \ 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}))) == (4));\n\
    \    assert(candidate((std::vector<long>({9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10,\
    \ 3, 8, 2, 6, 2, 3, 1}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({10}))) == (-1));\n    assert(candidate((std::vector<long>({9,\
    \ 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}))) == (1));\n    assert(candidate((std::vector<long>({7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 10, 10, 9, 2}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmp17kh88nu: /tmp/tmp17kh88nu.cpp:27: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 5, 5, 5, 1}))) == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the list.\n// If no such a value exist, return -1.\n// Examples:\n// search([4,\
    \ 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n// search([5,\
    \ 5, 4, 4, 4]) == -1\nlong search(std::vector<long> lst) {\n    long ans = -1;\n\
    \    long freq = 0;\n    for (long i : lst) {\n        freq += i;\n        if\
    \ (freq > ans) {\n            ans = freq;\n        }\n    }\n    return ans;\n\
    }\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5, 1}))) == (1));\n    assert(candidate((std::vector<long>({4, 1, 4, 1,\
    \ 4, 4}))) == (4));\n    assert(candidate((std::vector<long>({3, 3}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({8, 8, 8, 8, 8, 8, 8, 8}))) == (8));\n\
    \    assert(candidate((std::vector<long>({2, 3, 3, 2, 2}))) == (2));\n    assert(candidate((std::vector<long>({2,\
    \ 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 2, 8, 2}))) == (2));\n    assert(candidate((std::vector<long>({6,\
    \ 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}))) == (1));\n    assert(candidate((std::vector<long>({8,\
    \ 8, 3, 6, 5, 6, 4}))) == (-1));\n    assert(candidate((std::vector<long>({6,\
    \ 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9})))\
    \ == (1));\n    assert(candidate((std::vector<long>({1, 9, 10, 1, 3}))) == (1));\n\
    \    assert(candidate((std::vector<long>({6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10,\
    \ 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}))) == (5));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({8, 8, 10, 6, 4, 3, 5, 8,\
    \ 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}))) == (4));\n    assert(candidate((std::vector<long>({2,\
    \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}))) == (2));\n    assert(candidate((std::vector<long>({1,\
    \ 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}))) == (1));\n    assert(candidate((std::vector<long>({9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}))) == (4));\n    assert(candidate((std::vector<long>({2, 6, 4,\
    \ 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}))) == (4));\n\
    \    assert(candidate((std::vector<long>({9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10,\
    \ 3, 8, 2, 6, 2, 3, 1}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({10}))) == (-1));\n    assert(candidate((std::vector<long>({9,\
    \ 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}))) == (1));\n    assert(candidate((std::vector<long>({7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 10, 10, 9, 2}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmp83qom8wh: /tmp/tmp83qom8wh.cpp:24: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 5, 5, 5, 1}))) == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the list.\n// If no such a value exist, return -1.\n// Examples:\n// search([4,\
    \ 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n// search([5,\
    \ 5, 4, 4, 4]) == -1\nlong search(std::vector<long> lst) {\n    long ans = -1;\n\
    \    long freq = 0;\n    for (long i : lst) {\n        freq++;\n        if (freq\
    \ > i) {\n            freq = i;\n            ans = i;\n        }\n    }\n    return\
    \ ans;\n}\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5, 1}))) == (1));\n    assert(candidate((std::vector<long>({4, 1, 4, 1,\
    \ 4, 4}))) == (4));\n    assert(candidate((std::vector<long>({3, 3}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({8, 8, 8, 8, 8, 8, 8, 8}))) == (8));\n\
    \    assert(candidate((std::vector<long>({2, 3, 3, 2, 2}))) == (2));\n    assert(candidate((std::vector<long>({2,\
    \ 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 2, 8, 2}))) == (2));\n    assert(candidate((std::vector<long>({6,\
    \ 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}))) == (1));\n    assert(candidate((std::vector<long>({8,\
    \ 8, 3, 6, 5, 6, 4}))) == (-1));\n    assert(candidate((std::vector<long>({6,\
    \ 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9})))\
    \ == (1));\n    assert(candidate((std::vector<long>({1, 9, 10, 1, 3}))) == (1));\n\
    \    assert(candidate((std::vector<long>({6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10,\
    \ 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}))) == (5));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({8, 8, 10, 6, 4, 3, 5, 8,\
    \ 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}))) == (4));\n    assert(candidate((std::vector<long>({2,\
    \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}))) == (2));\n    assert(candidate((std::vector<long>({1,\
    \ 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}))) == (1));\n    assert(candidate((std::vector<long>({9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}))) == (4));\n    assert(candidate((std::vector<long>({2, 6, 4,\
    \ 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}))) == (4));\n\
    \    assert(candidate((std::vector<long>({9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10,\
    \ 3, 8, 2, 6, 2, 3, 1}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({10}))) == (-1));\n    assert(candidate((std::vector<long>({9,\
    \ 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}))) == (1));\n    assert(candidate((std::vector<long>({7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 10, 10, 9, 2}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmp5_zd29kp: /tmp/tmp5_zd29kp.cpp:26: int main(): Assertion `candidate((std::vector<long>({4,\
    \ 1, 4, 1, 4, 4}))) == (4)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the list.\n// If no such a value exist, return -1.\n// Examples:\n// search([4,\
    \ 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n// search([5,\
    \ 5, 4, 4, 4]) == -1\nlong search(std::vector<long> lst) {\n    long ans = -1;\n\
    \    long freq[100];\n    for (long i : lst) {\n        freq[i] = freq[i] + 1;\n\
    \    }\n    for (long i : lst) {\n        if (freq[i] > ans) {\n            ans\
    \ = freq[i];\n        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate\
    \ = search;\n    assert(candidate((std::vector<long>({5, 5, 5, 5, 1}))) == (1));\n\
    \    assert(candidate((std::vector<long>({4, 1, 4, 1, 4, 4}))) == (4));\n    assert(candidate((std::vector<long>({3,\
    \ 3}))) == (-1));\n    assert(candidate((std::vector<long>({8, 8, 8, 8, 8, 8,\
    \ 8, 8}))) == (8));\n    assert(candidate((std::vector<long>({2, 3, 3, 2, 2})))\
    \ == (2));\n    assert(candidate((std::vector<long>({2, 7, 8, 8, 4, 8, 7, 3, 9,\
    \ 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}))) == (1));\n    assert(candidate((std::vector<long>({3,\
    \ 2, 8, 2}))) == (2));\n    assert(candidate((std::vector<long>({6, 7, 1, 8, 8,\
    \ 10, 5, 8, 5, 3, 10}))) == (1));\n    assert(candidate((std::vector<long>({8,\
    \ 8, 3, 6, 5, 6, 4}))) == (-1));\n    assert(candidate((std::vector<long>({6,\
    \ 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9})))\
    \ == (1));\n    assert(candidate((std::vector<long>({1, 9, 10, 1, 3}))) == (1));\n\
    \    assert(candidate((std::vector<long>({6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10,\
    \ 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}))) == (5));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({8, 8, 10, 6, 4, 3, 5, 8,\
    \ 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}))) == (4));\n    assert(candidate((std::vector<long>({2,\
    \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}))) == (2));\n    assert(candidate((std::vector<long>({1,\
    \ 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}))) == (1));\n    assert(candidate((std::vector<long>({9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}))) == (4));\n    assert(candidate((std::vector<long>({2, 6, 4,\
    \ 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}))) == (4));\n\
    \    assert(candidate((std::vector<long>({9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10,\
    \ 3, 8, 2, 6, 2, 3, 1}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({10}))) == (-1));\n    assert(candidate((std::vector<long>({9,\
    \ 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}))) == (1));\n    assert(candidate((std::vector<long>({7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 10, 10, 9, 2}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmpo_ohwftk: /tmp/tmpo_ohwftk.cpp:26: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 5, 5, 5, 1}))) == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the list.\n// If no such a value exist, return -1.\n// Examples:\n// search([4,\
    \ 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n// search([5,\
    \ 5, 4, 4, 4]) == -1\nlong search(std::vector<long> lst) {\n    long ans = -1;\n\
    \    long freq[100];\n    for (long i : lst) {\n        freq[i] = freq[i] + 1;\n\
    \    }\n    for (long i = 0; i < 100; i++) {\n        if (freq[i] > ans) {\n \
    \           ans = freq[i];\n        }\n    }\n    return ans;\n}\nint main() {\n\
    \    auto candidate = search;\n    assert(candidate((std::vector<long>({5, 5,\
    \ 5, 5, 1}))) == (1));\n    assert(candidate((std::vector<long>({4, 1, 4, 1, 4,\
    \ 4}))) == (4));\n    assert(candidate((std::vector<long>({3, 3}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({8, 8, 8, 8, 8, 8, 8, 8}))) == (8));\n\
    \    assert(candidate((std::vector<long>({2, 3, 3, 2, 2}))) == (2));\n    assert(candidate((std::vector<long>({2,\
    \ 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 2, 8, 2}))) == (2));\n    assert(candidate((std::vector<long>({6,\
    \ 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}))) == (1));\n    assert(candidate((std::vector<long>({8,\
    \ 8, 3, 6, 5, 6, 4}))) == (-1));\n    assert(candidate((std::vector<long>({6,\
    \ 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9})))\
    \ == (1));\n    assert(candidate((std::vector<long>({1, 9, 10, 1, 3}))) == (1));\n\
    \    assert(candidate((std::vector<long>({6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10,\
    \ 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}))) == (5));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({8, 8, 10, 6, 4, 3, 5, 8,\
    \ 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}))) == (4));\n    assert(candidate((std::vector<long>({2,\
    \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}))) == (2));\n    assert(candidate((std::vector<long>({1,\
    \ 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}))) == (1));\n    assert(candidate((std::vector<long>({9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}))) == (4));\n    assert(candidate((std::vector<long>({2, 6, 4,\
    \ 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}))) == (4));\n\
    \    assert(candidate((std::vector<long>({9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10,\
    \ 3, 8, 2, 6, 2, 3, 1}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({10}))) == (-1));\n    assert(candidate((std::vector<long>({9,\
    \ 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}))) == (1));\n    assert(candidate((std::vector<long>({7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 10, 10, 9, 2}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmpeo0p0npl: /tmp/tmpeo0p0npl.cpp:26: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 5, 5, 5, 1}))) == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the list.\n// If no such a value exist, return -1.\n// Examples:\n// search([4,\
    \ 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n// search([5,\
    \ 5, 4, 4, 4]) == -1\nlong search(std::vector<long> lst) {\n    // Your code here\n\
    \    long ans = -1;\n    long freq[100000];\n    for (long i = 0; i < lst.size();\
    \ i++) {\n        freq[lst[i]]++;\n    }\n    for (long i = 0; i < 100000; i++)\
    \ {\n        if (freq[i] >= lst.size()) {\n            ans = i;\n            break;\n\
    \        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate = search;\n\
    \    assert(candidate((std::vector<long>({5, 5, 5, 5, 1}))) == (1));\n    assert(candidate((std::vector<long>({4,\
    \ 1, 4, 1, 4, 4}))) == (4));\n    assert(candidate((std::vector<long>({3, 3})))\
    \ == (-1));\n    assert(candidate((std::vector<long>({8, 8, 8, 8, 8, 8, 8, 8})))\
    \ == (8));\n    assert(candidate((std::vector<long>({2, 3, 3, 2, 2}))) == (2));\n\
    \    assert(candidate((std::vector<long>({2, 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10,\
    \ 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}))) == (1));\n    assert(candidate((std::vector<long>({3,\
    \ 2, 8, 2}))) == (2));\n    assert(candidate((std::vector<long>({6, 7, 1, 8, 8,\
    \ 10, 5, 8, 5, 3, 10}))) == (1));\n    assert(candidate((std::vector<long>({8,\
    \ 8, 3, 6, 5, 6, 4}))) == (-1));\n    assert(candidate((std::vector<long>({6,\
    \ 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9})))\
    \ == (1));\n    assert(candidate((std::vector<long>({1, 9, 10, 1, 3}))) == (1));\n\
    \    assert(candidate((std::vector<long>({6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10,\
    \ 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}))) == (5));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({8, 8, 10, 6, 4, 3, 5, 8,\
    \ 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}))) == (4));\n    assert(candidate((std::vector<long>({2,\
    \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}))) == (2));\n    assert(candidate((std::vector<long>({1,\
    \ 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}))) == (1));\n    assert(candidate((std::vector<long>({9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}))) == (4));\n    assert(candidate((std::vector<long>({2, 6, 4,\
    \ 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}))) == (4));\n\
    \    assert(candidate((std::vector<long>({9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10,\
    \ 3, 8, 2, 6, 2, 3, 1}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({10}))) == (-1));\n    assert(candidate((std::vector<long>({9,\
    \ 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}))) == (1));\n    assert(candidate((std::vector<long>({7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 10, 10, 9, 2}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmp5a1evhbi: /tmp/tmp5a1evhbi.cpp:28: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 5, 5, 5, 1}))) == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the list.\n// If no such a value exist, return -1.\n// Examples:\n// search([4,\
    \ 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n// search([5,\
    \ 5, 4, 4, 4]) == -1\nlong search(std::vector<long> lst) {\n    long ans = -1;\n\
    \    long freq[1000];\n    for (long i : lst) {\n        freq[i] = freq[i] + 1;\n\
    \    }\n    for (long i = 0; i < 1000; i++) {\n        if (freq[i] >= lst[0])\
    \ {\n            ans = i;\n            break;\n        }\n    }\n    return ans;\n\
    }\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5, 1}))) == (1));\n    assert(candidate((std::vector<long>({4, 1, 4, 1,\
    \ 4, 4}))) == (4));\n    assert(candidate((std::vector<long>({3, 3}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({8, 8, 8, 8, 8, 8, 8, 8}))) == (8));\n\
    \    assert(candidate((std::vector<long>({2, 3, 3, 2, 2}))) == (2));\n    assert(candidate((std::vector<long>({2,\
    \ 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 2, 8, 2}))) == (2));\n    assert(candidate((std::vector<long>({6,\
    \ 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}))) == (1));\n    assert(candidate((std::vector<long>({8,\
    \ 8, 3, 6, 5, 6, 4}))) == (-1));\n    assert(candidate((std::vector<long>({6,\
    \ 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9})))\
    \ == (1));\n    assert(candidate((std::vector<long>({1, 9, 10, 1, 3}))) == (1));\n\
    \    assert(candidate((std::vector<long>({6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10,\
    \ 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}))) == (5));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({8, 8, 10, 6, 4, 3, 5, 8,\
    \ 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}))) == (4));\n    assert(candidate((std::vector<long>({2,\
    \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}))) == (2));\n    assert(candidate((std::vector<long>({1,\
    \ 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}))) == (1));\n    assert(candidate((std::vector<long>({9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}))) == (4));\n    assert(candidate((std::vector<long>({2, 6, 4,\
    \ 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}))) == (4));\n\
    \    assert(candidate((std::vector<long>({9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10,\
    \ 3, 8, 2, 6, 2, 3, 1}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({10}))) == (-1));\n    assert(candidate((std::vector<long>({9,\
    \ 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}))) == (1));\n    assert(candidate((std::vector<long>({7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 10, 10, 9, 2}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmpoyx4joy1: /tmp/tmpoyx4joy1.cpp:27: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 5, 5, 5, 1}))) == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the list.\n// If no such a value exist, return -1.\n// Examples:\n// search([4,\
    \ 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n// search([5,\
    \ 5, 4, 4, 4]) == -1\nlong search(std::vector<long> lst) {\n    long maxVal =\
    \ lst[0];\n    long freq = lst[0];\n    for (long i = 1; i < lst.size(); i++)\
    \ {\n        if (lst[i] > maxVal) {\n            maxVal = lst[i];\n          \
    \  freq = lst[i];\n        } else if (lst[i] == maxVal) {\n            freq++;\n\
    \        }\n    }\n    if (freq >= maxVal) {\n        return -1;\n    }\n    return\
    \ maxVal;\n}\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5, 1}))) == (1));\n    assert(candidate((std::vector<long>({4, 1, 4, 1,\
    \ 4, 4}))) == (4));\n    assert(candidate((std::vector<long>({3, 3}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({8, 8, 8, 8, 8, 8, 8, 8}))) == (8));\n\
    \    assert(candidate((std::vector<long>({2, 3, 3, 2, 2}))) == (2));\n    assert(candidate((std::vector<long>({2,\
    \ 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 2, 8, 2}))) == (2));\n    assert(candidate((std::vector<long>({6,\
    \ 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}))) == (1));\n    assert(candidate((std::vector<long>({8,\
    \ 8, 3, 6, 5, 6, 4}))) == (-1));\n    assert(candidate((std::vector<long>({6,\
    \ 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9})))\
    \ == (1));\n    assert(candidate((std::vector<long>({1, 9, 10, 1, 3}))) == (1));\n\
    \    assert(candidate((std::vector<long>({6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10,\
    \ 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}))) == (5));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({8, 8, 10, 6, 4, 3, 5, 8,\
    \ 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}))) == (4));\n    assert(candidate((std::vector<long>({2,\
    \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}))) == (2));\n    assert(candidate((std::vector<long>({1,\
    \ 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}))) == (1));\n    assert(candidate((std::vector<long>({9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}))) == (4));\n    assert(candidate((std::vector<long>({2, 6, 4,\
    \ 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}))) == (4));\n\
    \    assert(candidate((std::vector<long>({9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10,\
    \ 3, 8, 2, 6, 2, 3, 1}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({10}))) == (-1));\n    assert(candidate((std::vector<long>({9,\
    \ 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}))) == (1));\n    assert(candidate((std::vector<long>({7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 10, 10, 9, 2}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmptzxp5k1o: /tmp/tmptzxp5k1o.cpp:29: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 5, 5, 5, 1}))) == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the list.\n// If no such a value exist, return -1.\n// Examples:\n// search([4,\
    \ 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n// search([5,\
    \ 5, 4, 4, 4]) == -1\nlong search(std::vector<long> lst) {\n    long ans = -1;\n\
    \    long freq[100000];\n    for (long i = 0; i < lst.size(); i++) {\n       \
    \ freq[lst[i]]++;\n    }\n    for (long i = 0; i < 100001; i++) {\n        if\
    \ (freq[i] >= lst.size()) {\n            ans = i;\n            break;\n      \
    \  }\n    }\n    return ans;\n}\nint main() {\n    auto candidate = search;\n\
    \    assert(candidate((std::vector<long>({5, 5, 5, 5, 1}))) == (1));\n    assert(candidate((std::vector<long>({4,\
    \ 1, 4, 1, 4, 4}))) == (4));\n    assert(candidate((std::vector<long>({3, 3})))\
    \ == (-1));\n    assert(candidate((std::vector<long>({8, 8, 8, 8, 8, 8, 8, 8})))\
    \ == (8));\n    assert(candidate((std::vector<long>({2, 3, 3, 2, 2}))) == (2));\n\
    \    assert(candidate((std::vector<long>({2, 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10,\
    \ 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}))) == (1));\n    assert(candidate((std::vector<long>({3,\
    \ 2, 8, 2}))) == (2));\n    assert(candidate((std::vector<long>({6, 7, 1, 8, 8,\
    \ 10, 5, 8, 5, 3, 10}))) == (1));\n    assert(candidate((std::vector<long>({8,\
    \ 8, 3, 6, 5, 6, 4}))) == (-1));\n    assert(candidate((std::vector<long>({6,\
    \ 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9})))\
    \ == (1));\n    assert(candidate((std::vector<long>({1, 9, 10, 1, 3}))) == (1));\n\
    \    assert(candidate((std::vector<long>({6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10,\
    \ 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}))) == (5));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({8, 8, 10, 6, 4, 3, 5, 8,\
    \ 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}))) == (4));\n    assert(candidate((std::vector<long>({2,\
    \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}))) == (2));\n    assert(candidate((std::vector<long>({1,\
    \ 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}))) == (1));\n    assert(candidate((std::vector<long>({9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}))) == (4));\n    assert(candidate((std::vector<long>({2, 6, 4,\
    \ 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}))) == (4));\n\
    \    assert(candidate((std::vector<long>({9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10,\
    \ 3, 8, 2, 6, 2, 3, 1}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({10}))) == (-1));\n    assert(candidate((std::vector<long>({9,\
    \ 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}))) == (1));\n    assert(candidate((std::vector<long>({7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 10, 10, 9, 2}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmpqanan4t_: /tmp/tmpqanan4t_.cpp:27: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 5, 5, 5, 1}))) == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the list.\n// If no such a value exist, return -1.\n// Examples:\n// search([4,\
    \ 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n// search([5,\
    \ 5, 4, 4, 4]) == -1\nlong search(std::vector<long> lst) {\n    // Your code here\n\
    \    long ans = -1;\n    long freq[100];\n    for (long i = 0; i < lst.size();\
    \ i++) {\n        freq[lst[i]]++;\n    }\n    for (long i = 0; i < 100; i++) {\n\
    \        if (freq[i] >= lst.size()) {\n            ans = i;\n            break;\n\
    \        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate = search;\n\
    \    assert(candidate((std::vector<long>({5, 5, 5, 5, 1}))) == (1));\n    assert(candidate((std::vector<long>({4,\
    \ 1, 4, 1, 4, 4}))) == (4));\n    assert(candidate((std::vector<long>({3, 3})))\
    \ == (-1));\n    assert(candidate((std::vector<long>({8, 8, 8, 8, 8, 8, 8, 8})))\
    \ == (8));\n    assert(candidate((std::vector<long>({2, 3, 3, 2, 2}))) == (2));\n\
    \    assert(candidate((std::vector<long>({2, 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10,\
    \ 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}))) == (1));\n    assert(candidate((std::vector<long>({3,\
    \ 2, 8, 2}))) == (2));\n    assert(candidate((std::vector<long>({6, 7, 1, 8, 8,\
    \ 10, 5, 8, 5, 3, 10}))) == (1));\n    assert(candidate((std::vector<long>({8,\
    \ 8, 3, 6, 5, 6, 4}))) == (-1));\n    assert(candidate((std::vector<long>({6,\
    \ 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9})))\
    \ == (1));\n    assert(candidate((std::vector<long>({1, 9, 10, 1, 3}))) == (1));\n\
    \    assert(candidate((std::vector<long>({6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10,\
    \ 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}))) == (5));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({8, 8, 10, 6, 4, 3, 5, 8,\
    \ 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}))) == (4));\n    assert(candidate((std::vector<long>({2,\
    \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}))) == (2));\n    assert(candidate((std::vector<long>({1,\
    \ 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}))) == (1));\n    assert(candidate((std::vector<long>({9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}))) == (4));\n    assert(candidate((std::vector<long>({2, 6, 4,\
    \ 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}))) == (4));\n\
    \    assert(candidate((std::vector<long>({9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10,\
    \ 3, 8, 2, 6, 2, 3, 1}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({10}))) == (-1));\n    assert(candidate((std::vector<long>({9,\
    \ 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}))) == (1));\n    assert(candidate((std::vector<long>({7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 10, 10, 9, 2}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmpbbrun8ah: /tmp/tmpbbrun8ah.cpp:28: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 5, 5, 5, 1}))) == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the list.\n// If no such a value exist, return -1.\n// Examples:\n// search([4,\
    \ 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n// search([5,\
    \ 5, 4, 4, 4]) == -1\nlong search(std::vector<long> lst) {\n    // Your code here\n\
    \    long ans = -1;\n    long freq[100000];\n    for (long i : lst) {\n      \
    \  freq[i] = freq[i] + 1;\n    }\n    for (long i : lst) {\n        if (freq[i]\
    \ >= i) {\n            ans = i;\n            break;\n        }\n    }\n    return\
    \ ans;\n}\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5, 1}))) == (1));\n    assert(candidate((std::vector<long>({4, 1, 4, 1,\
    \ 4, 4}))) == (4));\n    assert(candidate((std::vector<long>({3, 3}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({8, 8, 8, 8, 8, 8, 8, 8}))) == (8));\n\
    \    assert(candidate((std::vector<long>({2, 3, 3, 2, 2}))) == (2));\n    assert(candidate((std::vector<long>({2,\
    \ 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 2, 8, 2}))) == (2));\n    assert(candidate((std::vector<long>({6,\
    \ 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}))) == (1));\n    assert(candidate((std::vector<long>({8,\
    \ 8, 3, 6, 5, 6, 4}))) == (-1));\n    assert(candidate((std::vector<long>({6,\
    \ 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9})))\
    \ == (1));\n    assert(candidate((std::vector<long>({1, 9, 10, 1, 3}))) == (1));\n\
    \    assert(candidate((std::vector<long>({6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10,\
    \ 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}))) == (5));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({8, 8, 10, 6, 4, 3, 5, 8,\
    \ 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}))) == (4));\n    assert(candidate((std::vector<long>({2,\
    \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}))) == (2));\n    assert(candidate((std::vector<long>({1,\
    \ 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}))) == (1));\n    assert(candidate((std::vector<long>({9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}))) == (4));\n    assert(candidate((std::vector<long>({2, 6, 4,\
    \ 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}))) == (4));\n\
    \    assert(candidate((std::vector<long>({9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10,\
    \ 3, 8, 2, 6, 2, 3, 1}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({10}))) == (-1));\n    assert(candidate((std::vector<long>({9,\
    \ 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}))) == (1));\n    assert(candidate((std::vector<long>({7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 10, 10, 9, 2}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmpx6yohrai: /tmp/tmpx6yohrai.cpp:33: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}))) == (1)'\
    \ failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the list.\n// If no such a value exist, return -1.\n// Examples:\n// search([4,\
    \ 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n// search([5,\
    \ 5, 4, 4, 4]) == -1\nlong search(std::vector<long> lst) {\n    long ans = -1;\n\
    \    long freq = 0;\n    for (long i : lst) {\n        freq += i;\n        if\
    \ (freq >= i) {\n            ans = i;\n            freq -= i;\n        }\n   \
    \ }\n    return ans;\n}\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5, 1}))) == (1));\n    assert(candidate((std::vector<long>({4, 1, 4, 1,\
    \ 4, 4}))) == (4));\n    assert(candidate((std::vector<long>({3, 3}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({8, 8, 8, 8, 8, 8, 8, 8}))) == (8));\n\
    \    assert(candidate((std::vector<long>({2, 3, 3, 2, 2}))) == (2));\n    assert(candidate((std::vector<long>({2,\
    \ 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 2, 8, 2}))) == (2));\n    assert(candidate((std::vector<long>({6,\
    \ 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}))) == (1));\n    assert(candidate((std::vector<long>({8,\
    \ 8, 3, 6, 5, 6, 4}))) == (-1));\n    assert(candidate((std::vector<long>({6,\
    \ 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9})))\
    \ == (1));\n    assert(candidate((std::vector<long>({1, 9, 10, 1, 3}))) == (1));\n\
    \    assert(candidate((std::vector<long>({6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10,\
    \ 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}))) == (5));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({8, 8, 10, 6, 4, 3, 5, 8,\
    \ 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}))) == (4));\n    assert(candidate((std::vector<long>({2,\
    \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}))) == (2));\n    assert(candidate((std::vector<long>({1,\
    \ 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}))) == (1));\n    assert(candidate((std::vector<long>({9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}))) == (4));\n    assert(candidate((std::vector<long>({2, 6, 4,\
    \ 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}))) == (4));\n\
    \    assert(candidate((std::vector<long>({9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10,\
    \ 3, 8, 2, 6, 2, 3, 1}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({10}))) == (-1));\n    assert(candidate((std::vector<long>({9,\
    \ 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}))) == (1));\n    assert(candidate((std::vector<long>({7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 10, 10, 9, 2}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmpbw66zct4: /tmp/tmpbw66zct4.cpp:27: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 3}))) == (-1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the list.\n// If no such a value exist, return -1.\n// Examples:\n// search([4,\
    \ 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n// search([5,\
    \ 5, 4, 4, 4]) == -1\nlong search(std::vector<long> lst) {\n    long ans = -1;\n\
    \    long freq[100];\n    for (long i = 0; i < lst.size(); i++) {\n        freq[lst[i]]++;\n\
    \    }\n    for (long i = 0; i < lst.size(); i++) {\n        if (freq[lst[i]]\
    \ >= lst[i]) {\n            ans = lst[i];\n            break;\n        }\n   \
    \ }\n    return ans;\n}\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5, 1}))) == (1));\n    assert(candidate((std::vector<long>({4, 1, 4, 1,\
    \ 4, 4}))) == (4));\n    assert(candidate((std::vector<long>({3, 3}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({8, 8, 8, 8, 8, 8, 8, 8}))) == (8));\n\
    \    assert(candidate((std::vector<long>({2, 3, 3, 2, 2}))) == (2));\n    assert(candidate((std::vector<long>({2,\
    \ 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 2, 8, 2}))) == (2));\n    assert(candidate((std::vector<long>({6,\
    \ 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}))) == (1));\n    assert(candidate((std::vector<long>({8,\
    \ 8, 3, 6, 5, 6, 4}))) == (-1));\n    assert(candidate((std::vector<long>({6,\
    \ 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9})))\
    \ == (1));\n    assert(candidate((std::vector<long>({1, 9, 10, 1, 3}))) == (1));\n\
    \    assert(candidate((std::vector<long>({6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10,\
    \ 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}))) == (5));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({8, 8, 10, 6, 4, 3, 5, 8,\
    \ 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}))) == (4));\n    assert(candidate((std::vector<long>({2,\
    \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}))) == (2));\n    assert(candidate((std::vector<long>({1,\
    \ 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}))) == (1));\n    assert(candidate((std::vector<long>({9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}))) == (4));\n    assert(candidate((std::vector<long>({2, 6, 4,\
    \ 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}))) == (4));\n\
    \    assert(candidate((std::vector<long>({9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10,\
    \ 3, 8, 2, 6, 2, 3, 1}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({10}))) == (-1));\n    assert(candidate((std::vector<long>({9,\
    \ 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}))) == (1));\n    assert(candidate((std::vector<long>({7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 10, 10, 9, 2}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmptku_gv_s: /tmp/tmptku_gv_s.cpp:27: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 5, 5, 5, 1}))) == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the list.\n// If no such a value exist, return -1.\n// Examples:\n// search([4,\
    \ 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n// search([5,\
    \ 5, 4, 4, 4]) == -1\nlong search(std::vector<long> lst) {\n    long ans = -1;\n\
    \    long freq[100] = {0};\n    for (long i : lst) {\n        freq[i]++;\n   \
    \ }\n    for (long i : lst) {\n        if (freq[i] >= i) {\n            ans =\
    \ i;\n            break;\n        }\n    }\n    return ans;\n}\nint main() {\n\
    \    auto candidate = search;\n    assert(candidate((std::vector<long>({5, 5,\
    \ 5, 5, 1}))) == (1));\n    assert(candidate((std::vector<long>({4, 1, 4, 1, 4,\
    \ 4}))) == (4));\n    assert(candidate((std::vector<long>({3, 3}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({8, 8, 8, 8, 8, 8, 8, 8}))) == (8));\n\
    \    assert(candidate((std::vector<long>({2, 3, 3, 2, 2}))) == (2));\n    assert(candidate((std::vector<long>({2,\
    \ 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 2, 8, 2}))) == (2));\n    assert(candidate((std::vector<long>({6,\
    \ 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}))) == (1));\n    assert(candidate((std::vector<long>({8,\
    \ 8, 3, 6, 5, 6, 4}))) == (-1));\n    assert(candidate((std::vector<long>({6,\
    \ 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9})))\
    \ == (1));\n    assert(candidate((std::vector<long>({1, 9, 10, 1, 3}))) == (1));\n\
    \    assert(candidate((std::vector<long>({6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10,\
    \ 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}))) == (5));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({8, 8, 10, 6, 4, 3, 5, 8,\
    \ 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}))) == (4));\n    assert(candidate((std::vector<long>({2,\
    \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}))) == (2));\n    assert(candidate((std::vector<long>({1,\
    \ 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}))) == (1));\n    assert(candidate((std::vector<long>({9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}))) == (4));\n    assert(candidate((std::vector<long>({2, 6, 4,\
    \ 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}))) == (4));\n\
    \    assert(candidate((std::vector<long>({9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10,\
    \ 3, 8, 2, 6, 2, 3, 1}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({10}))) == (-1));\n    assert(candidate((std::vector<long>({9,\
    \ 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}))) == (1));\n    assert(candidate((std::vector<long>({7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 10, 10, 9, 2}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmp7nw_awjx: /tmp/tmp7nw_awjx.cpp:43: int main(): Assertion `candidate((std::vector<long>({9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}))) == (4)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the list.\n// If no such a value exist, return -1.\n// Examples:\n// search([4,\
    \ 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n// search([5,\
    \ 5, 4, 4, 4]) == -1\nlong search(std::vector<long> lst) {\n    long ans = -1;\n\
    \    long freq[100];\n    for(long i = 0; i < lst.size(); i++) {\n        freq[lst[i]]++;\n\
    \    }\n    for(long i = 0; i < 100; i++) {\n        if(freq[i] >= lst.size())\
    \ {\n            break;\n        }\n        ans = i;\n    }\n    return ans;\n\
    }\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5, 1}))) == (1));\n    assert(candidate((std::vector<long>({4, 1, 4, 1,\
    \ 4, 4}))) == (4));\n    assert(candidate((std::vector<long>({3, 3}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({8, 8, 8, 8, 8, 8, 8, 8}))) == (8));\n\
    \    assert(candidate((std::vector<long>({2, 3, 3, 2, 2}))) == (2));\n    assert(candidate((std::vector<long>({2,\
    \ 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 2, 8, 2}))) == (2));\n    assert(candidate((std::vector<long>({6,\
    \ 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}))) == (1));\n    assert(candidate((std::vector<long>({8,\
    \ 8, 3, 6, 5, 6, 4}))) == (-1));\n    assert(candidate((std::vector<long>({6,\
    \ 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9})))\
    \ == (1));\n    assert(candidate((std::vector<long>({1, 9, 10, 1, 3}))) == (1));\n\
    \    assert(candidate((std::vector<long>({6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10,\
    \ 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}))) == (5));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({8, 8, 10, 6, 4, 3, 5, 8,\
    \ 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}))) == (4));\n    assert(candidate((std::vector<long>({2,\
    \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}))) == (2));\n    assert(candidate((std::vector<long>({1,\
    \ 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}))) == (1));\n    assert(candidate((std::vector<long>({9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}))) == (4));\n    assert(candidate((std::vector<long>({2, 6, 4,\
    \ 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}))) == (4));\n\
    \    assert(candidate((std::vector<long>({9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10,\
    \ 3, 8, 2, 6, 2, 3, 1}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({10}))) == (-1));\n    assert(candidate((std::vector<long>({9,\
    \ 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}))) == (1));\n    assert(candidate((std::vector<long>({7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 10, 10, 9, 2}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmp149gj_11: /tmp/tmp149gj_11.cpp:28: int main(): Assertion `candidate((std::vector<long>({4,\
    \ 1, 4, 1, 4, 4}))) == (4)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the list.\n// If no such a value exist, return -1.\n// Examples:\n// search([4,\
    \ 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n// search([5,\
    \ 5, 4, 4, 4]) == -1\nlong search(std::vector<long> lst) {\n    // Your code here\n\
    \    long ans = -1;\n    long freq = 0;\n    for (long i : lst) {\n        freq\
    \ += i;\n        if (freq > ans) {\n            ans = freq;\n        }\n    }\n\
    \    return ans;\n}\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5, 1}))) == (1));\n    assert(candidate((std::vector<long>({4, 1, 4, 1,\
    \ 4, 4}))) == (4));\n    assert(candidate((std::vector<long>({3, 3}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({8, 8, 8, 8, 8, 8, 8, 8}))) == (8));\n\
    \    assert(candidate((std::vector<long>({2, 3, 3, 2, 2}))) == (2));\n    assert(candidate((std::vector<long>({2,\
    \ 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 2, 8, 2}))) == (2));\n    assert(candidate((std::vector<long>({6,\
    \ 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}))) == (1));\n    assert(candidate((std::vector<long>({8,\
    \ 8, 3, 6, 5, 6, 4}))) == (-1));\n    assert(candidate((std::vector<long>({6,\
    \ 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9})))\
    \ == (1));\n    assert(candidate((std::vector<long>({1, 9, 10, 1, 3}))) == (1));\n\
    \    assert(candidate((std::vector<long>({6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10,\
    \ 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}))) == (5));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({8, 8, 10, 6, 4, 3, 5, 8,\
    \ 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}))) == (4));\n    assert(candidate((std::vector<long>({2,\
    \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}))) == (2));\n    assert(candidate((std::vector<long>({1,\
    \ 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}))) == (1));\n    assert(candidate((std::vector<long>({9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}))) == (4));\n    assert(candidate((std::vector<long>({2, 6, 4,\
    \ 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}))) == (4));\n\
    \    assert(candidate((std::vector<long>({9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10,\
    \ 3, 8, 2, 6, 2, 3, 1}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({10}))) == (-1));\n    assert(candidate((std::vector<long>({9,\
    \ 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}))) == (1));\n    assert(candidate((std::vector<long>({7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 10, 10, 9, 2}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmp8yg_wpov: /tmp/tmp8yg_wpov.cpp:25: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 5, 5, 5, 1}))) == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the list.\n// If no such a value exist, return -1.\n// Examples:\n// search([4,\
    \ 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n// search([5,\
    \ 5, 4, 4, 4]) == -1\nlong search(std::vector<long> lst) {\n    long ans = -1;\n\
    \    long freq[10000];\n    for(long i = 0; i < lst.size(); i++){\n        freq[lst[i]]++;\n\
    \    }\n    for(long i = 0; i < 10000; i++){\n        if(freq[i] >= lst.size()){\n\
    \            ans = i;\n            break;\n        }\n    }\n    return ans;\n\
    }\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5, 1}))) == (1));\n    assert(candidate((std::vector<long>({4, 1, 4, 1,\
    \ 4, 4}))) == (4));\n    assert(candidate((std::vector<long>({3, 3}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({8, 8, 8, 8, 8, 8, 8, 8}))) == (8));\n\
    \    assert(candidate((std::vector<long>({2, 3, 3, 2, 2}))) == (2));\n    assert(candidate((std::vector<long>({2,\
    \ 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 2, 8, 2}))) == (2));\n    assert(candidate((std::vector<long>({6,\
    \ 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}))) == (1));\n    assert(candidate((std::vector<long>({8,\
    \ 8, 3, 6, 5, 6, 4}))) == (-1));\n    assert(candidate((std::vector<long>({6,\
    \ 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9})))\
    \ == (1));\n    assert(candidate((std::vector<long>({1, 9, 10, 1, 3}))) == (1));\n\
    \    assert(candidate((std::vector<long>({6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10,\
    \ 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}))) == (5));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({8, 8, 10, 6, 4, 3, 5, 8,\
    \ 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}))) == (4));\n    assert(candidate((std::vector<long>({2,\
    \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}))) == (2));\n    assert(candidate((std::vector<long>({1,\
    \ 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}))) == (1));\n    assert(candidate((std::vector<long>({9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}))) == (4));\n    assert(candidate((std::vector<long>({2, 6, 4,\
    \ 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}))) == (4));\n\
    \    assert(candidate((std::vector<long>({9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10,\
    \ 3, 8, 2, 6, 2, 3, 1}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({10}))) == (-1));\n    assert(candidate((std::vector<long>({9,\
    \ 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}))) == (1));\n    assert(candidate((std::vector<long>({7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 10, 10, 9, 2}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmpezctpq05: /tmp/tmpezctpq05.cpp:27: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 5, 5, 5, 1}))) == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the list.\n// If no such a value exist, return -1.\n// Examples:\n// search([4,\
    \ 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n// search([5,\
    \ 5, 4, 4, 4]) == -1\nlong search(std::vector<long> lst) {\n    long maxVal =\
    \ -1, maxFreq = -1;\n    for(long i = 0; i < lst.size(); i++) {\n        if(lst[i]\
    \ > maxVal) {\n            maxVal = lst[i];\n            maxFreq = i;\n      \
    \  }\n    }\n    return maxFreq;\n}\nint main() {\n    auto candidate = search;\n\
    \    assert(candidate((std::vector<long>({5, 5, 5, 5, 1}))) == (1));\n    assert(candidate((std::vector<long>({4,\
    \ 1, 4, 1, 4, 4}))) == (4));\n    assert(candidate((std::vector<long>({3, 3})))\
    \ == (-1));\n    assert(candidate((std::vector<long>({8, 8, 8, 8, 8, 8, 8, 8})))\
    \ == (8));\n    assert(candidate((std::vector<long>({2, 3, 3, 2, 2}))) == (2));\n\
    \    assert(candidate((std::vector<long>({2, 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10,\
    \ 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}))) == (1));\n    assert(candidate((std::vector<long>({3,\
    \ 2, 8, 2}))) == (2));\n    assert(candidate((std::vector<long>({6, 7, 1, 8, 8,\
    \ 10, 5, 8, 5, 3, 10}))) == (1));\n    assert(candidate((std::vector<long>({8,\
    \ 8, 3, 6, 5, 6, 4}))) == (-1));\n    assert(candidate((std::vector<long>({6,\
    \ 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9})))\
    \ == (1));\n    assert(candidate((std::vector<long>({1, 9, 10, 1, 3}))) == (1));\n\
    \    assert(candidate((std::vector<long>({6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10,\
    \ 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}))) == (5));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({8, 8, 10, 6, 4, 3, 5, 8,\
    \ 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}))) == (4));\n    assert(candidate((std::vector<long>({2,\
    \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}))) == (2));\n    assert(candidate((std::vector<long>({1,\
    \ 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}))) == (1));\n    assert(candidate((std::vector<long>({9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}))) == (4));\n    assert(candidate((std::vector<long>({2, 6, 4,\
    \ 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}))) == (4));\n\
    \    assert(candidate((std::vector<long>({9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10,\
    \ 3, 8, 2, 6, 2, 3, 1}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({10}))) == (-1));\n    assert(candidate((std::vector<long>({9,\
    \ 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}))) == (1));\n    assert(candidate((std::vector<long>({7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 10, 10, 9, 2}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmpxbq3pl5t: /tmp/tmpxbq3pl5t.cpp:23: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 5, 5, 5, 1}))) == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the list.\n// If no such a value exist, return -1.\n// Examples:\n// search([4,\
    \ 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n// search([5,\
    \ 5, 4, 4, 4]) == -1\nlong search(std::vector<long> lst) {\n    long ans = -1;\n\
    \    long freq = 0;\n    for (long i : lst) {\n        freq += i;\n        if\
    \ (freq > ans) {\n            ans = freq;\n        }\n    }\n    return ans;\n\
    }\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5, 1}))) == (1));\n    assert(candidate((std::vector<long>({4, 1, 4, 1,\
    \ 4, 4}))) == (4));\n    assert(candidate((std::vector<long>({3, 3}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({8, 8, 8, 8, 8, 8, 8, 8}))) == (8));\n\
    \    assert(candidate((std::vector<long>({2, 3, 3, 2, 2}))) == (2));\n    assert(candidate((std::vector<long>({2,\
    \ 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 2, 8, 2}))) == (2));\n    assert(candidate((std::vector<long>({6,\
    \ 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}))) == (1));\n    assert(candidate((std::vector<long>({8,\
    \ 8, 3, 6, 5, 6, 4}))) == (-1));\n    assert(candidate((std::vector<long>({6,\
    \ 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9})))\
    \ == (1));\n    assert(candidate((std::vector<long>({1, 9, 10, 1, 3}))) == (1));\n\
    \    assert(candidate((std::vector<long>({6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10,\
    \ 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}))) == (5));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({8, 8, 10, 6, 4, 3, 5, 8,\
    \ 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}))) == (4));\n    assert(candidate((std::vector<long>({2,\
    \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}))) == (2));\n    assert(candidate((std::vector<long>({1,\
    \ 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}))) == (1));\n    assert(candidate((std::vector<long>({9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}))) == (4));\n    assert(candidate((std::vector<long>({2, 6, 4,\
    \ 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}))) == (4));\n\
    \    assert(candidate((std::vector<long>({9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10,\
    \ 3, 8, 2, 6, 2, 3, 1}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({10}))) == (-1));\n    assert(candidate((std::vector<long>({9,\
    \ 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}))) == (1));\n    assert(candidate((std::vector<long>({7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 10, 10, 9, 2}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmpc0ku_k64: /tmp/tmpc0ku_k64.cpp:24: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 5, 5, 5, 1}))) == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the list.\n// If no such a value exist, return -1.\n// Examples:\n// search([4,\
    \ 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n// search([5,\
    \ 5, 4, 4, 4]) == -1\nlong search(std::vector<long> lst) {\n    long ans = -1;\n\
    \    long freq = 0;\n    for (long i : lst) {\n        freq += i;\n        if\
    \ (freq > ans) {\n            ans = freq;\n        }\n    }\n    return ans;\n\
    }\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5, 1}))) == (1));\n    assert(candidate((std::vector<long>({4, 1, 4, 1,\
    \ 4, 4}))) == (4));\n    assert(candidate((std::vector<long>({3, 3}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({8, 8, 8, 8, 8, 8, 8, 8}))) == (8));\n\
    \    assert(candidate((std::vector<long>({2, 3, 3, 2, 2}))) == (2));\n    assert(candidate((std::vector<long>({2,\
    \ 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 2, 8, 2}))) == (2));\n    assert(candidate((std::vector<long>({6,\
    \ 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}))) == (1));\n    assert(candidate((std::vector<long>({8,\
    \ 8, 3, 6, 5, 6, 4}))) == (-1));\n    assert(candidate((std::vector<long>({6,\
    \ 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9})))\
    \ == (1));\n    assert(candidate((std::vector<long>({1, 9, 10, 1, 3}))) == (1));\n\
    \    assert(candidate((std::vector<long>({6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10,\
    \ 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}))) == (5));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({8, 8, 10, 6, 4, 3, 5, 8,\
    \ 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}))) == (4));\n    assert(candidate((std::vector<long>({2,\
    \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}))) == (2));\n    assert(candidate((std::vector<long>({1,\
    \ 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}))) == (1));\n    assert(candidate((std::vector<long>({9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}))) == (4));\n    assert(candidate((std::vector<long>({2, 6, 4,\
    \ 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}))) == (4));\n\
    \    assert(candidate((std::vector<long>({9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10,\
    \ 3, 8, 2, 6, 2, 3, 1}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({10}))) == (-1));\n    assert(candidate((std::vector<long>({9,\
    \ 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}))) == (1));\n    assert(candidate((std::vector<long>({7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 10, 10, 9, 2}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmpndhdhuz_: /tmp/tmpndhdhuz_.cpp:24: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 5, 5, 5, 1}))) == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the list.\n// If no such a value exist, return -1.\n// Examples:\n// search([4,\
    \ 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n// search([5,\
    \ 5, 4, 4, 4]) == -1\nlong search(std::vector<long> lst) {\n    long ans = -1;\n\
    \    long freq = 0;\n    for (long i : lst) {\n        freq += i;\n        if\
    \ (freq >= i) {\n            ans = i;\n            freq -= i;\n        }\n   \
    \ }\n    return ans;\n}\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5, 1}))) == (1));\n    assert(candidate((std::vector<long>({4, 1, 4, 1,\
    \ 4, 4}))) == (4));\n    assert(candidate((std::vector<long>({3, 3}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({8, 8, 8, 8, 8, 8, 8, 8}))) == (8));\n\
    \    assert(candidate((std::vector<long>({2, 3, 3, 2, 2}))) == (2));\n    assert(candidate((std::vector<long>({2,\
    \ 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 2, 8, 2}))) == (2));\n    assert(candidate((std::vector<long>({6,\
    \ 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}))) == (1));\n    assert(candidate((std::vector<long>({8,\
    \ 8, 3, 6, 5, 6, 4}))) == (-1));\n    assert(candidate((std::vector<long>({6,\
    \ 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9})))\
    \ == (1));\n    assert(candidate((std::vector<long>({1, 9, 10, 1, 3}))) == (1));\n\
    \    assert(candidate((std::vector<long>({6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10,\
    \ 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}))) == (5));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({8, 8, 10, 6, 4, 3, 5, 8,\
    \ 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}))) == (4));\n    assert(candidate((std::vector<long>({2,\
    \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}))) == (2));\n    assert(candidate((std::vector<long>({1,\
    \ 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}))) == (1));\n    assert(candidate((std::vector<long>({9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}))) == (4));\n    assert(candidate((std::vector<long>({2, 6, 4,\
    \ 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}))) == (4));\n\
    \    assert(candidate((std::vector<long>({9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10,\
    \ 3, 8, 2, 6, 2, 3, 1}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({10}))) == (-1));\n    assert(candidate((std::vector<long>({9,\
    \ 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}))) == (1));\n    assert(candidate((std::vector<long>({7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 10, 10, 9, 2}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmpwsv2ga9n: /tmp/tmpwsv2ga9n.cpp:27: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 3}))) == (-1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the list.\n// If no such a value exist, return -1.\n// Examples:\n// search([4,\
    \ 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n// search([5,\
    \ 5, 4, 4, 4]) == -1\nlong search(std::vector<long> lst) {\n    long ans = -1;\n\
    \    long freq = 0;\n    for(long i : lst) {\n        freq += i;\n        if(freq\
    \ >= i) {\n            ans = i;\n            break;\n        }\n    }\n    return\
    \ ans;\n}\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5, 1}))) == (1));\n    assert(candidate((std::vector<long>({4, 1, 4, 1,\
    \ 4, 4}))) == (4));\n    assert(candidate((std::vector<long>({3, 3}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({8, 8, 8, 8, 8, 8, 8, 8}))) == (8));\n\
    \    assert(candidate((std::vector<long>({2, 3, 3, 2, 2}))) == (2));\n    assert(candidate((std::vector<long>({2,\
    \ 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 2, 8, 2}))) == (2));\n    assert(candidate((std::vector<long>({6,\
    \ 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}))) == (1));\n    assert(candidate((std::vector<long>({8,\
    \ 8, 3, 6, 5, 6, 4}))) == (-1));\n    assert(candidate((std::vector<long>({6,\
    \ 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9})))\
    \ == (1));\n    assert(candidate((std::vector<long>({1, 9, 10, 1, 3}))) == (1));\n\
    \    assert(candidate((std::vector<long>({6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10,\
    \ 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}))) == (5));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({8, 8, 10, 6, 4, 3, 5, 8,\
    \ 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}))) == (4));\n    assert(candidate((std::vector<long>({2,\
    \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}))) == (2));\n    assert(candidate((std::vector<long>({1,\
    \ 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}))) == (1));\n    assert(candidate((std::vector<long>({9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}))) == (4));\n    assert(candidate((std::vector<long>({2, 6, 4,\
    \ 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}))) == (4));\n\
    \    assert(candidate((std::vector<long>({9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10,\
    \ 3, 8, 2, 6, 2, 3, 1}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({10}))) == (-1));\n    assert(candidate((std::vector<long>({9,\
    \ 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}))) == (1));\n    assert(candidate((std::vector<long>({7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 10, 10, 9, 2}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmpujdog40o: /tmp/tmpujdog40o.cpp:25: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 5, 5, 5, 1}))) == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the list.\n// If no such a value exist, return -1.\n// Examples:\n// search([4,\
    \ 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n// search([5,\
    \ 5, 4, 4, 4]) == -1\nlong search(std::vector<long> lst) {\n    long ans = -1;\n\
    \    long freq[1000];\n    for (long i : lst) {\n        freq[i] = freq[i] + 1;\n\
    \    }\n    for (long i : lst) {\n        if (freq[i] >= i) {\n            ans\
    \ = i;\n            break;\n        }\n    }\n    return ans;\n}\nint main() {\n\
    \    auto candidate = search;\n    assert(candidate((std::vector<long>({5, 5,\
    \ 5, 5, 1}))) == (1));\n    assert(candidate((std::vector<long>({4, 1, 4, 1, 4,\
    \ 4}))) == (4));\n    assert(candidate((std::vector<long>({3, 3}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({8, 8, 8, 8, 8, 8, 8, 8}))) == (8));\n\
    \    assert(candidate((std::vector<long>({2, 3, 3, 2, 2}))) == (2));\n    assert(candidate((std::vector<long>({2,\
    \ 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 2, 8, 2}))) == (2));\n    assert(candidate((std::vector<long>({6,\
    \ 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}))) == (1));\n    assert(candidate((std::vector<long>({8,\
    \ 8, 3, 6, 5, 6, 4}))) == (-1));\n    assert(candidate((std::vector<long>({6,\
    \ 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9})))\
    \ == (1));\n    assert(candidate((std::vector<long>({1, 9, 10, 1, 3}))) == (1));\n\
    \    assert(candidate((std::vector<long>({6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10,\
    \ 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}))) == (5));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({8, 8, 10, 6, 4, 3, 5, 8,\
    \ 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}))) == (4));\n    assert(candidate((std::vector<long>({2,\
    \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}))) == (2));\n    assert(candidate((std::vector<long>({1,\
    \ 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}))) == (1));\n    assert(candidate((std::vector<long>({9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}))) == (4));\n    assert(candidate((std::vector<long>({2, 6, 4,\
    \ 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}))) == (4));\n\
    \    assert(candidate((std::vector<long>({9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10,\
    \ 3, 8, 2, 6, 2, 3, 1}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({10}))) == (-1));\n    assert(candidate((std::vector<long>({9,\
    \ 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}))) == (1));\n    assert(candidate((std::vector<long>({7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 10, 10, 9, 2}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmprr0n9ls_: /tmp/tmprr0n9ls_.cpp:32: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}))) == (1)'\
    \ failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the list.\n// If no such a value exist, return -1.\n// Examples:\n// search([4,\
    \ 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n// search([5,\
    \ 5, 4, 4, 4]) == -1\nlong search(std::vector<long> lst) {\n    long ans = -1;\n\
    \    long freq = 0;\n    for (long i : lst) {\n        freq += i;\n        if\
    \ (freq > ans) {\n            ans = freq;\n        }\n    }\n    return ans;\n\
    }\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5, 1}))) == (1));\n    assert(candidate((std::vector<long>({4, 1, 4, 1,\
    \ 4, 4}))) == (4));\n    assert(candidate((std::vector<long>({3, 3}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({8, 8, 8, 8, 8, 8, 8, 8}))) == (8));\n\
    \    assert(candidate((std::vector<long>({2, 3, 3, 2, 2}))) == (2));\n    assert(candidate((std::vector<long>({2,\
    \ 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 2, 8, 2}))) == (2));\n    assert(candidate((std::vector<long>({6,\
    \ 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}))) == (1));\n    assert(candidate((std::vector<long>({8,\
    \ 8, 3, 6, 5, 6, 4}))) == (-1));\n    assert(candidate((std::vector<long>({6,\
    \ 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9})))\
    \ == (1));\n    assert(candidate((std::vector<long>({1, 9, 10, 1, 3}))) == (1));\n\
    \    assert(candidate((std::vector<long>({6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10,\
    \ 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}))) == (5));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({8, 8, 10, 6, 4, 3, 5, 8,\
    \ 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}))) == (4));\n    assert(candidate((std::vector<long>({2,\
    \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}))) == (2));\n    assert(candidate((std::vector<long>({1,\
    \ 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}))) == (1));\n    assert(candidate((std::vector<long>({9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}))) == (4));\n    assert(candidate((std::vector<long>({2, 6, 4,\
    \ 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}))) == (4));\n\
    \    assert(candidate((std::vector<long>({9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10,\
    \ 3, 8, 2, 6, 2, 3, 1}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({10}))) == (-1));\n    assert(candidate((std::vector<long>({9,\
    \ 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}))) == (1));\n    assert(candidate((std::vector<long>({7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 10, 10, 9, 2}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmppsesjvhg: /tmp/tmppsesjvhg.cpp:24: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 5, 5, 5, 1}))) == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the list.\n// If no such a value exist, return -1.\n// Examples:\n// search([4,\
    \ 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n// search([5,\
    \ 5, 4, 4, 4]) == -1\nlong search(std::vector<long> lst) {\n    long maxVal =\
    \ -1;\n    long maxFreq = -1;\n    for (long i = 0; i < lst.size(); i++) {\n \
    \       if (lst[i] > maxVal) {\n            maxVal = lst[i];\n            maxFreq\
    \ = lst[i];\n        } else if (lst[i] == maxVal) {\n            maxFreq++;\n\
    \        }\n    }\n    return maxFreq > maxVal ? maxVal : -1;\n}\nint main() {\n\
    \    auto candidate = search;\n    assert(candidate((std::vector<long>({5, 5,\
    \ 5, 5, 1}))) == (1));\n    assert(candidate((std::vector<long>({4, 1, 4, 1, 4,\
    \ 4}))) == (4));\n    assert(candidate((std::vector<long>({3, 3}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({8, 8, 8, 8, 8, 8, 8, 8}))) == (8));\n\
    \    assert(candidate((std::vector<long>({2, 3, 3, 2, 2}))) == (2));\n    assert(candidate((std::vector<long>({2,\
    \ 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 2, 8, 2}))) == (2));\n    assert(candidate((std::vector<long>({6,\
    \ 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}))) == (1));\n    assert(candidate((std::vector<long>({8,\
    \ 8, 3, 6, 5, 6, 4}))) == (-1));\n    assert(candidate((std::vector<long>({6,\
    \ 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9})))\
    \ == (1));\n    assert(candidate((std::vector<long>({1, 9, 10, 1, 3}))) == (1));\n\
    \    assert(candidate((std::vector<long>({6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10,\
    \ 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}))) == (5));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({8, 8, 10, 6, 4, 3, 5, 8,\
    \ 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}))) == (4));\n    assert(candidate((std::vector<long>({2,\
    \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}))) == (2));\n    assert(candidate((std::vector<long>({1,\
    \ 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}))) == (1));\n    assert(candidate((std::vector<long>({9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}))) == (4));\n    assert(candidate((std::vector<long>({2, 6, 4,\
    \ 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}))) == (4));\n\
    \    assert(candidate((std::vector<long>({9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10,\
    \ 3, 8, 2, 6, 2, 3, 1}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({10}))) == (-1));\n    assert(candidate((std::vector<long>({9,\
    \ 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}))) == (1));\n    assert(candidate((std::vector<long>({7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 10, 10, 9, 2}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmpv5100x5n: /tmp/tmpv5100x5n.cpp:26: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 5, 5, 5, 1}))) == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the list.\n// If no such a value exist, return -1.\n// Examples:\n// search([4,\
    \ 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n// search([5,\
    \ 5, 4, 4, 4]) == -1\nlong search(std::vector<long> lst) {\n    long ans = -1;\n\
    \    long freq = 0;\n    for (long i : lst) {\n        freq += i;\n        if\
    \ (freq >= i) {\n            ans = i;\n            break;\n        }\n    }\n\
    \    return ans;\n}\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5, 1}))) == (1));\n    assert(candidate((std::vector<long>({4, 1, 4, 1,\
    \ 4, 4}))) == (4));\n    assert(candidate((std::vector<long>({3, 3}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({8, 8, 8, 8, 8, 8, 8, 8}))) == (8));\n\
    \    assert(candidate((std::vector<long>({2, 3, 3, 2, 2}))) == (2));\n    assert(candidate((std::vector<long>({2,\
    \ 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 2, 8, 2}))) == (2));\n    assert(candidate((std::vector<long>({6,\
    \ 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}))) == (1));\n    assert(candidate((std::vector<long>({8,\
    \ 8, 3, 6, 5, 6, 4}))) == (-1));\n    assert(candidate((std::vector<long>({6,\
    \ 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9})))\
    \ == (1));\n    assert(candidate((std::vector<long>({1, 9, 10, 1, 3}))) == (1));\n\
    \    assert(candidate((std::vector<long>({6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10,\
    \ 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}))) == (5));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({8, 8, 10, 6, 4, 3, 5, 8,\
    \ 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}))) == (4));\n    assert(candidate((std::vector<long>({2,\
    \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}))) == (2));\n    assert(candidate((std::vector<long>({1,\
    \ 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}))) == (1));\n    assert(candidate((std::vector<long>({9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}))) == (4));\n    assert(candidate((std::vector<long>({2, 6, 4,\
    \ 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}))) == (4));\n\
    \    assert(candidate((std::vector<long>({9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10,\
    \ 3, 8, 2, 6, 2, 3, 1}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({10}))) == (-1));\n    assert(candidate((std::vector<long>({9,\
    \ 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}))) == (1));\n    assert(candidate((std::vector<long>({7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 10, 10, 9, 2}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmp8ys76ry_: /tmp/tmp8ys76ry_.cpp:25: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 5, 5, 5, 1}))) == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the list.\n// If no such a value exist, return -1.\n// Examples:\n// search([4,\
    \ 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n// search([5,\
    \ 5, 4, 4, 4]) == -1\nlong search(std::vector<long> lst) {\n    long ans = -1;\n\
    \    long freq = 0;\n    for (long i : lst) {\n        freq += i;\n        if\
    \ (freq > ans) {\n            ans = freq;\n        }\n    }\n    return ans;\n\
    }\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5, 1}))) == (1));\n    assert(candidate((std::vector<long>({4, 1, 4, 1,\
    \ 4, 4}))) == (4));\n    assert(candidate((std::vector<long>({3, 3}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({8, 8, 8, 8, 8, 8, 8, 8}))) == (8));\n\
    \    assert(candidate((std::vector<long>({2, 3, 3, 2, 2}))) == (2));\n    assert(candidate((std::vector<long>({2,\
    \ 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 2, 8, 2}))) == (2));\n    assert(candidate((std::vector<long>({6,\
    \ 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}))) == (1));\n    assert(candidate((std::vector<long>({8,\
    \ 8, 3, 6, 5, 6, 4}))) == (-1));\n    assert(candidate((std::vector<long>({6,\
    \ 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9})))\
    \ == (1));\n    assert(candidate((std::vector<long>({1, 9, 10, 1, 3}))) == (1));\n\
    \    assert(candidate((std::vector<long>({6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10,\
    \ 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}))) == (5));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({8, 8, 10, 6, 4, 3, 5, 8,\
    \ 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}))) == (4));\n    assert(candidate((std::vector<long>({2,\
    \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}))) == (2));\n    assert(candidate((std::vector<long>({1,\
    \ 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}))) == (1));\n    assert(candidate((std::vector<long>({9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}))) == (4));\n    assert(candidate((std::vector<long>({2, 6, 4,\
    \ 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}))) == (4));\n\
    \    assert(candidate((std::vector<long>({9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10,\
    \ 3, 8, 2, 6, 2, 3, 1}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({10}))) == (-1));\n    assert(candidate((std::vector<long>({9,\
    \ 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}))) == (1));\n    assert(candidate((std::vector<long>({7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 10, 10, 9, 2}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmp1sd_xf8j: /tmp/tmp1sd_xf8j.cpp:24: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 5, 5, 5, 1}))) == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the list.\n// If no such a value exist, return -1.\n// Examples:\n// search([4,\
    \ 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n// search([5,\
    \ 5, 4, 4, 4]) == -1\nlong search(std::vector<long> lst) {\n    long ans = -1;\n\
    \    long freq[100];\n    for (long i : lst) {\n        freq[i] = freq[i] + 1;\n\
    \    }\n    for (long i : lst) {\n        if (freq[i] > ans) {\n            ans\
    \ = freq[i];\n        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate\
    \ = search;\n    assert(candidate((std::vector<long>({5, 5, 5, 5, 1}))) == (1));\n\
    \    assert(candidate((std::vector<long>({4, 1, 4, 1, 4, 4}))) == (4));\n    assert(candidate((std::vector<long>({3,\
    \ 3}))) == (-1));\n    assert(candidate((std::vector<long>({8, 8, 8, 8, 8, 8,\
    \ 8, 8}))) == (8));\n    assert(candidate((std::vector<long>({2, 3, 3, 2, 2})))\
    \ == (2));\n    assert(candidate((std::vector<long>({2, 7, 8, 8, 4, 8, 7, 3, 9,\
    \ 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}))) == (1));\n    assert(candidate((std::vector<long>({3,\
    \ 2, 8, 2}))) == (2));\n    assert(candidate((std::vector<long>({6, 7, 1, 8, 8,\
    \ 10, 5, 8, 5, 3, 10}))) == (1));\n    assert(candidate((std::vector<long>({8,\
    \ 8, 3, 6, 5, 6, 4}))) == (-1));\n    assert(candidate((std::vector<long>({6,\
    \ 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9})))\
    \ == (1));\n    assert(candidate((std::vector<long>({1, 9, 10, 1, 3}))) == (1));\n\
    \    assert(candidate((std::vector<long>({6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10,\
    \ 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}))) == (5));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({8, 8, 10, 6, 4, 3, 5, 8,\
    \ 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}))) == (4));\n    assert(candidate((std::vector<long>({2,\
    \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}))) == (2));\n    assert(candidate((std::vector<long>({1,\
    \ 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}))) == (1));\n    assert(candidate((std::vector<long>({9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}))) == (4));\n    assert(candidate((std::vector<long>({2, 6, 4,\
    \ 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}))) == (4));\n\
    \    assert(candidate((std::vector<long>({9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10,\
    \ 3, 8, 2, 6, 2, 3, 1}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({10}))) == (-1));\n    assert(candidate((std::vector<long>({9,\
    \ 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}))) == (1));\n    assert(candidate((std::vector<long>({7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 10, 10, 9, 2}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmpzsd2alcs: /tmp/tmpzsd2alcs.cpp:26: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 5, 5, 5, 1}))) == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the list.\n// If no such a value exist, return -1.\n// Examples:\n// search([4,\
    \ 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n// search([5,\
    \ 5, 4, 4, 4]) == -1\nlong search(std::vector<long> lst) {\n    long ans = -1;\n\
    \    long freq[100];\n    for (long i : lst) {\n        freq[i] = freq[i] + 1;\n\
    \    }\n    for (long i : lst) {\n        if (freq[i] >= i) {\n            ans\
    \ = i;\n            break;\n        }\n    }\n    return ans;\n}\nint main() {\n\
    \    auto candidate = search;\n    assert(candidate((std::vector<long>({5, 5,\
    \ 5, 5, 1}))) == (1));\n    assert(candidate((std::vector<long>({4, 1, 4, 1, 4,\
    \ 4}))) == (4));\n    assert(candidate((std::vector<long>({3, 3}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({8, 8, 8, 8, 8, 8, 8, 8}))) == (8));\n\
    \    assert(candidate((std::vector<long>({2, 3, 3, 2, 2}))) == (2));\n    assert(candidate((std::vector<long>({2,\
    \ 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 2, 8, 2}))) == (2));\n    assert(candidate((std::vector<long>({6,\
    \ 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}))) == (1));\n    assert(candidate((std::vector<long>({8,\
    \ 8, 3, 6, 5, 6, 4}))) == (-1));\n    assert(candidate((std::vector<long>({6,\
    \ 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9})))\
    \ == (1));\n    assert(candidate((std::vector<long>({1, 9, 10, 1, 3}))) == (1));\n\
    \    assert(candidate((std::vector<long>({6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10,\
    \ 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}))) == (5));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({8, 8, 10, 6, 4, 3, 5, 8,\
    \ 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}))) == (4));\n    assert(candidate((std::vector<long>({2,\
    \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}))) == (2));\n    assert(candidate((std::vector<long>({1,\
    \ 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}))) == (1));\n    assert(candidate((std::vector<long>({9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}))) == (4));\n    assert(candidate((std::vector<long>({2, 6, 4,\
    \ 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}))) == (4));\n\
    \    assert(candidate((std::vector<long>({9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10,\
    \ 3, 8, 2, 6, 2, 3, 1}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({10}))) == (-1));\n    assert(candidate((std::vector<long>({9,\
    \ 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}))) == (1));\n    assert(candidate((std::vector<long>({7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 10, 10, 9, 2}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmpapql5afu: /tmp/tmpapql5afu.cpp:27: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 5, 5, 5, 1}))) == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the list.\n// If no such a value exist, return -1.\n// Examples:\n// search([4,\
    \ 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n// search([5,\
    \ 5, 4, 4, 4]) == -1\nlong search(std::vector<long> lst) {\n    long ans = -1;\n\
    \    long freq = 0;\n    for(long i : lst) {\n        freq += i;\n        if(freq\
    \ > ans) {\n            ans = freq;\n        }\n    }\n    return ans;\n}\nint\
    \ main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5, 1}))) == (1));\n    assert(candidate((std::vector<long>({4, 1, 4, 1,\
    \ 4, 4}))) == (4));\n    assert(candidate((std::vector<long>({3, 3}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({8, 8, 8, 8, 8, 8, 8, 8}))) == (8));\n\
    \    assert(candidate((std::vector<long>({2, 3, 3, 2, 2}))) == (2));\n    assert(candidate((std::vector<long>({2,\
    \ 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 2, 8, 2}))) == (2));\n    assert(candidate((std::vector<long>({6,\
    \ 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}))) == (1));\n    assert(candidate((std::vector<long>({8,\
    \ 8, 3, 6, 5, 6, 4}))) == (-1));\n    assert(candidate((std::vector<long>({6,\
    \ 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9})))\
    \ == (1));\n    assert(candidate((std::vector<long>({1, 9, 10, 1, 3}))) == (1));\n\
    \    assert(candidate((std::vector<long>({6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10,\
    \ 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}))) == (5));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({8, 8, 10, 6, 4, 3, 5, 8,\
    \ 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}))) == (4));\n    assert(candidate((std::vector<long>({2,\
    \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}))) == (2));\n    assert(candidate((std::vector<long>({1,\
    \ 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}))) == (1));\n    assert(candidate((std::vector<long>({9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}))) == (4));\n    assert(candidate((std::vector<long>({2, 6, 4,\
    \ 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}))) == (4));\n\
    \    assert(candidate((std::vector<long>({9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10,\
    \ 3, 8, 2, 6, 2, 3, 1}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({10}))) == (-1));\n    assert(candidate((std::vector<long>({9,\
    \ 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}))) == (1));\n    assert(candidate((std::vector<long>({7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 10, 10, 9, 2}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmpbz5ve3ly: /tmp/tmpbz5ve3ly.cpp:24: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 5, 5, 5, 1}))) == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the list.\n// If no such a value exist, return -1.\n// Examples:\n// search([4,\
    \ 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n// search([5,\
    \ 5, 4, 4, 4]) == -1\nlong search(std::vector<long> lst) {\n    // Write your\
    \ code here\n    long ans = -1;\n    long freq[100000];\n    for (long i : lst)\
    \ {\n        freq[i] = freq[i] + 1;\n    }\n    for (long i : lst) {\n       \
    \ if (freq[i] >= i) {\n            ans = i;\n            break;\n        }\n \
    \   }\n    return ans;\n}\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5, 1}))) == (1));\n    assert(candidate((std::vector<long>({4, 1, 4, 1,\
    \ 4, 4}))) == (4));\n    assert(candidate((std::vector<long>({3, 3}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({8, 8, 8, 8, 8, 8, 8, 8}))) == (8));\n\
    \    assert(candidate((std::vector<long>({2, 3, 3, 2, 2}))) == (2));\n    assert(candidate((std::vector<long>({2,\
    \ 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 2, 8, 2}))) == (2));\n    assert(candidate((std::vector<long>({6,\
    \ 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}))) == (1));\n    assert(candidate((std::vector<long>({8,\
    \ 8, 3, 6, 5, 6, 4}))) == (-1));\n    assert(candidate((std::vector<long>({6,\
    \ 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9})))\
    \ == (1));\n    assert(candidate((std::vector<long>({1, 9, 10, 1, 3}))) == (1));\n\
    \    assert(candidate((std::vector<long>({6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10,\
    \ 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}))) == (5));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({8, 8, 10, 6, 4, 3, 5, 8,\
    \ 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}))) == (4));\n    assert(candidate((std::vector<long>({2,\
    \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}))) == (2));\n    assert(candidate((std::vector<long>({1,\
    \ 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}))) == (1));\n    assert(candidate((std::vector<long>({9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}))) == (4));\n    assert(candidate((std::vector<long>({2, 6, 4,\
    \ 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}))) == (4));\n\
    \    assert(candidate((std::vector<long>({9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10,\
    \ 3, 8, 2, 6, 2, 3, 1}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({10}))) == (-1));\n    assert(candidate((std::vector<long>({9,\
    \ 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}))) == (1));\n    assert(candidate((std::vector<long>({7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 10, 10, 9, 2}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmp2gwu10mv: /tmp/tmp2gwu10mv.cpp:33: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}))) == (1)'\
    \ failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the list.\n// If no such a value exist, return -1.\n// Examples:\n// search([4,\
    \ 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n// search([5,\
    \ 5, 4, 4, 4]) == -1\nlong search(std::vector<long> lst) {\n    long ans = -1;\n\
    \    long freq[100];\n    for (long i : lst) {\n        freq[i] = freq[i] + 1;\n\
    \    }\n    for (long i = 1; i <= 100; i++) {\n        if (freq[i] >= i) {\n \
    \           ans = i;\n            break;\n        }\n    }\n    return ans;\n\
    }\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5, 1}))) == (1));\n    assert(candidate((std::vector<long>({4, 1, 4, 1,\
    \ 4, 4}))) == (4));\n    assert(candidate((std::vector<long>({3, 3}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({8, 8, 8, 8, 8, 8, 8, 8}))) == (8));\n\
    \    assert(candidate((std::vector<long>({2, 3, 3, 2, 2}))) == (2));\n    assert(candidate((std::vector<long>({2,\
    \ 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 2, 8, 2}))) == (2));\n    assert(candidate((std::vector<long>({6,\
    \ 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}))) == (1));\n    assert(candidate((std::vector<long>({8,\
    \ 8, 3, 6, 5, 6, 4}))) == (-1));\n    assert(candidate((std::vector<long>({6,\
    \ 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9})))\
    \ == (1));\n    assert(candidate((std::vector<long>({1, 9, 10, 1, 3}))) == (1));\n\
    \    assert(candidate((std::vector<long>({6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10,\
    \ 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}))) == (5));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({8, 8, 10, 6, 4, 3, 5, 8,\
    \ 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}))) == (4));\n    assert(candidate((std::vector<long>({2,\
    \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}))) == (2));\n    assert(candidate((std::vector<long>({1,\
    \ 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}))) == (1));\n    assert(candidate((std::vector<long>({9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}))) == (4));\n    assert(candidate((std::vector<long>({2, 6, 4,\
    \ 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}))) == (4));\n\
    \    assert(candidate((std::vector<long>({9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10,\
    \ 3, 8, 2, 6, 2, 3, 1}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({10}))) == (-1));\n    assert(candidate((std::vector<long>({9,\
    \ 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}))) == (1));\n    assert(candidate((std::vector<long>({7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 10, 10, 9, 2}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmpzcaexpx3: /tmp/tmpzcaexpx3.cpp:28: int main(): Assertion `candidate((std::vector<long>({4,\
    \ 1, 4, 1, 4, 4}))) == (4)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the list.\n// If no such a value exist, return -1.\n// Examples:\n// search([4,\
    \ 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n// search([5,\
    \ 5, 4, 4, 4]) == -1\nlong search(std::vector<long> lst) {\n    long ans = -1;\n\
    \    long freq[100];\n    for (long i : lst) {\n        freq[i] = freq[i] + 1;\n\
    \    }\n    for (long i = 1; i <= 100; i++) {\n        if (freq[i] >= i) {\n \
    \           ans = i;\n            break;\n        }\n    }\n    return ans;\n\
    }\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5, 1}))) == (1));\n    assert(candidate((std::vector<long>({4, 1, 4, 1,\
    \ 4, 4}))) == (4));\n    assert(candidate((std::vector<long>({3, 3}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({8, 8, 8, 8, 8, 8, 8, 8}))) == (8));\n\
    \    assert(candidate((std::vector<long>({2, 3, 3, 2, 2}))) == (2));\n    assert(candidate((std::vector<long>({2,\
    \ 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 2, 8, 2}))) == (2));\n    assert(candidate((std::vector<long>({6,\
    \ 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}))) == (1));\n    assert(candidate((std::vector<long>({8,\
    \ 8, 3, 6, 5, 6, 4}))) == (-1));\n    assert(candidate((std::vector<long>({6,\
    \ 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9})))\
    \ == (1));\n    assert(candidate((std::vector<long>({1, 9, 10, 1, 3}))) == (1));\n\
    \    assert(candidate((std::vector<long>({6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10,\
    \ 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}))) == (5));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({8, 8, 10, 6, 4, 3, 5, 8,\
    \ 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}))) == (4));\n    assert(candidate((std::vector<long>({2,\
    \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}))) == (2));\n    assert(candidate((std::vector<long>({1,\
    \ 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}))) == (1));\n    assert(candidate((std::vector<long>({9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}))) == (4));\n    assert(candidate((std::vector<long>({2, 6, 4,\
    \ 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}))) == (4));\n\
    \    assert(candidate((std::vector<long>({9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10,\
    \ 3, 8, 2, 6, 2, 3, 1}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({10}))) == (-1));\n    assert(candidate((std::vector<long>({9,\
    \ 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}))) == (1));\n    assert(candidate((std::vector<long>({7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 10, 10, 9, 2}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmpz8nnccv1: /tmp/tmpz8nnccv1.cpp:28: int main(): Assertion `candidate((std::vector<long>({4,\
    \ 1, 4, 1, 4, 4}))) == (4)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the list.\n// If no such a value exist, return -1.\n// Examples:\n// search([4,\
    \ 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n// search([5,\
    \ 5, 4, 4, 4]) == -1\nlong search(std::vector<long> lst) {\n    long ans = -1;\n\
    \    long freq = 0;\n    for (long i : lst) {\n        freq += i;\n        if\
    \ (freq >= i) {\n            ans = i;\n            break;\n        }\n    }\n\
    \    return ans;\n}\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5, 1}))) == (1));\n    assert(candidate((std::vector<long>({4, 1, 4, 1,\
    \ 4, 4}))) == (4));\n    assert(candidate((std::vector<long>({3, 3}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({8, 8, 8, 8, 8, 8, 8, 8}))) == (8));\n\
    \    assert(candidate((std::vector<long>({2, 3, 3, 2, 2}))) == (2));\n    assert(candidate((std::vector<long>({2,\
    \ 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 2, 8, 2}))) == (2));\n    assert(candidate((std::vector<long>({6,\
    \ 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}))) == (1));\n    assert(candidate((std::vector<long>({8,\
    \ 8, 3, 6, 5, 6, 4}))) == (-1));\n    assert(candidate((std::vector<long>({6,\
    \ 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9})))\
    \ == (1));\n    assert(candidate((std::vector<long>({1, 9, 10, 1, 3}))) == (1));\n\
    \    assert(candidate((std::vector<long>({6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10,\
    \ 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}))) == (5));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({8, 8, 10, 6, 4, 3, 5, 8,\
    \ 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}))) == (4));\n    assert(candidate((std::vector<long>({2,\
    \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}))) == (2));\n    assert(candidate((std::vector<long>({1,\
    \ 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}))) == (1));\n    assert(candidate((std::vector<long>({9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}))) == (4));\n    assert(candidate((std::vector<long>({2, 6, 4,\
    \ 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}))) == (4));\n\
    \    assert(candidate((std::vector<long>({9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10,\
    \ 3, 8, 2, 6, 2, 3, 1}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({10}))) == (-1));\n    assert(candidate((std::vector<long>({9,\
    \ 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}))) == (1));\n    assert(candidate((std::vector<long>({7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 10, 10, 9, 2}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmp_gbv6gmo: /tmp/tmp_gbv6gmo.cpp:25: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 5, 5, 5, 1}))) == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the list.\n// If no such a value exist, return -1.\n// Examples:\n// search([4,\
    \ 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n// search([5,\
    \ 5, 4, 4, 4]) == -1\nlong search(std::vector<long> lst) {\n    long maxVal =\
    \ lst[0];\n    long maxCount = 0;\n    for (long i : lst) {\n        if (i > maxVal)\
    \ {\n            maxVal = i;\n            maxCount = 1;\n        } else if (i\
    \ == maxVal) {\n            maxCount++;\n        }\n    }\n    if (maxCount >=\
    \ maxVal) {\n        return maxVal;\n    } else {\n        return -1;\n    }\n\
    }\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5, 1}))) == (1));\n    assert(candidate((std::vector<long>({4, 1, 4, 1,\
    \ 4, 4}))) == (4));\n    assert(candidate((std::vector<long>({3, 3}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({8, 8, 8, 8, 8, 8, 8, 8}))) == (8));\n\
    \    assert(candidate((std::vector<long>({2, 3, 3, 2, 2}))) == (2));\n    assert(candidate((std::vector<long>({2,\
    \ 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 2, 8, 2}))) == (2));\n    assert(candidate((std::vector<long>({6,\
    \ 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}))) == (1));\n    assert(candidate((std::vector<long>({8,\
    \ 8, 3, 6, 5, 6, 4}))) == (-1));\n    assert(candidate((std::vector<long>({6,\
    \ 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9})))\
    \ == (1));\n    assert(candidate((std::vector<long>({1, 9, 10, 1, 3}))) == (1));\n\
    \    assert(candidate((std::vector<long>({6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10,\
    \ 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}))) == (5));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({8, 8, 10, 6, 4, 3, 5, 8,\
    \ 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}))) == (4));\n    assert(candidate((std::vector<long>({2,\
    \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}))) == (2));\n    assert(candidate((std::vector<long>({1,\
    \ 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}))) == (1));\n    assert(candidate((std::vector<long>({9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}))) == (4));\n    assert(candidate((std::vector<long>({2, 6, 4,\
    \ 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}))) == (4));\n\
    \    assert(candidate((std::vector<long>({9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10,\
    \ 3, 8, 2, 6, 2, 3, 1}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({10}))) == (-1));\n    assert(candidate((std::vector<long>({9,\
    \ 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}))) == (1));\n    assert(candidate((std::vector<long>({7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 10, 10, 9, 2}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmpx1py8e2h: /tmp/tmpx1py8e2h.cpp:30: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 5, 5, 5, 1}))) == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the list.\n// If no such a value exist, return -1.\n// Examples:\n// search([4,\
    \ 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n// search([5,\
    \ 5, 4, 4, 4]) == -1\nlong search(std::vector<long> lst) {\n    long ans = -1;\n\
    \    long freq = 0;\n    for (long i : lst) {\n        freq += i;\n        if\
    \ (freq > ans) {\n            ans = freq;\n        }\n    }\n    return ans;\n\
    }\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5, 1}))) == (1));\n    assert(candidate((std::vector<long>({4, 1, 4, 1,\
    \ 4, 4}))) == (4));\n    assert(candidate((std::vector<long>({3, 3}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({8, 8, 8, 8, 8, 8, 8, 8}))) == (8));\n\
    \    assert(candidate((std::vector<long>({2, 3, 3, 2, 2}))) == (2));\n    assert(candidate((std::vector<long>({2,\
    \ 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 2, 8, 2}))) == (2));\n    assert(candidate((std::vector<long>({6,\
    \ 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}))) == (1));\n    assert(candidate((std::vector<long>({8,\
    \ 8, 3, 6, 5, 6, 4}))) == (-1));\n    assert(candidate((std::vector<long>({6,\
    \ 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9})))\
    \ == (1));\n    assert(candidate((std::vector<long>({1, 9, 10, 1, 3}))) == (1));\n\
    \    assert(candidate((std::vector<long>({6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10,\
    \ 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}))) == (5));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({8, 8, 10, 6, 4, 3, 5, 8,\
    \ 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}))) == (4));\n    assert(candidate((std::vector<long>({2,\
    \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}))) == (2));\n    assert(candidate((std::vector<long>({1,\
    \ 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}))) == (1));\n    assert(candidate((std::vector<long>({9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}))) == (4));\n    assert(candidate((std::vector<long>({2, 6, 4,\
    \ 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}))) == (4));\n\
    \    assert(candidate((std::vector<long>({9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10,\
    \ 3, 8, 2, 6, 2, 3, 1}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({10}))) == (-1));\n    assert(candidate((std::vector<long>({9,\
    \ 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}))) == (1));\n    assert(candidate((std::vector<long>({7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 10, 10, 9, 2}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmpyzzylhyt: /tmp/tmpyzzylhyt.cpp:24: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 5, 5, 5, 1}))) == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the list.\n// If no such a value exist, return -1.\n// Examples:\n// search([4,\
    \ 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n// search([5,\
    \ 5, 4, 4, 4]) == -1\nlong search(std::vector<long> lst) {\n    long ans = -1;\n\
    \    long freq[100];\n    for (long i : lst) {\n        freq[i] = freq[i] + 1;\n\
    \    }\n    for (long i : lst) {\n        if (freq[i] >= i) {\n            ans\
    \ = i;\n            break;\n        }\n    }\n    return ans;\n}\nint main() {\n\
    \    auto candidate = search;\n    assert(candidate((std::vector<long>({5, 5,\
    \ 5, 5, 1}))) == (1));\n    assert(candidate((std::vector<long>({4, 1, 4, 1, 4,\
    \ 4}))) == (4));\n    assert(candidate((std::vector<long>({3, 3}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({8, 8, 8, 8, 8, 8, 8, 8}))) == (8));\n\
    \    assert(candidate((std::vector<long>({2, 3, 3, 2, 2}))) == (2));\n    assert(candidate((std::vector<long>({2,\
    \ 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 2, 8, 2}))) == (2));\n    assert(candidate((std::vector<long>({6,\
    \ 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}))) == (1));\n    assert(candidate((std::vector<long>({8,\
    \ 8, 3, 6, 5, 6, 4}))) == (-1));\n    assert(candidate((std::vector<long>({6,\
    \ 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9})))\
    \ == (1));\n    assert(candidate((std::vector<long>({1, 9, 10, 1, 3}))) == (1));\n\
    \    assert(candidate((std::vector<long>({6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10,\
    \ 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}))) == (5));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({8, 8, 10, 6, 4, 3, 5, 8,\
    \ 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}))) == (4));\n    assert(candidate((std::vector<long>({2,\
    \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}))) == (2));\n    assert(candidate((std::vector<long>({1,\
    \ 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}))) == (1));\n    assert(candidate((std::vector<long>({9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}))) == (4));\n    assert(candidate((std::vector<long>({2, 6, 4,\
    \ 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}))) == (4));\n\
    \    assert(candidate((std::vector<long>({9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10,\
    \ 3, 8, 2, 6, 2, 3, 1}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({10}))) == (-1));\n    assert(candidate((std::vector<long>({9,\
    \ 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}))) == (1));\n    assert(candidate((std::vector<long>({7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 10, 10, 9, 2}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmpelrqot24: /tmp/tmpelrqot24.cpp:27: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 5, 5, 5, 1}))) == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the list.\n// If no such a value exist, return -1.\n// Examples:\n// search([4,\
    \ 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n// search([5,\
    \ 5, 4, 4, 4]) == -1\nlong search(std::vector<long> lst) {\n    long ans = -1;\n\
    \    long freq[100];\n    for (long i = 0; i < lst.size(); i++) {\n        freq[lst[i]]++;\n\
    \    }\n    for (long i = 0; i < lst.size(); i++) {\n        if (freq[lst[i]]\
    \ >= lst[i]) {\n            ans = lst[i];\n            break;\n        }\n   \
    \ }\n    return ans;\n}\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5, 1}))) == (1));\n    assert(candidate((std::vector<long>({4, 1, 4, 1,\
    \ 4, 4}))) == (4));\n    assert(candidate((std::vector<long>({3, 3}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({8, 8, 8, 8, 8, 8, 8, 8}))) == (8));\n\
    \    assert(candidate((std::vector<long>({2, 3, 3, 2, 2}))) == (2));\n    assert(candidate((std::vector<long>({2,\
    \ 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 2, 8, 2}))) == (2));\n    assert(candidate((std::vector<long>({6,\
    \ 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}))) == (1));\n    assert(candidate((std::vector<long>({8,\
    \ 8, 3, 6, 5, 6, 4}))) == (-1));\n    assert(candidate((std::vector<long>({6,\
    \ 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9})))\
    \ == (1));\n    assert(candidate((std::vector<long>({1, 9, 10, 1, 3}))) == (1));\n\
    \    assert(candidate((std::vector<long>({6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10,\
    \ 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}))) == (5));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({8, 8, 10, 6, 4, 3, 5, 8,\
    \ 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}))) == (4));\n    assert(candidate((std::vector<long>({2,\
    \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}))) == (2));\n    assert(candidate((std::vector<long>({1,\
    \ 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}))) == (1));\n    assert(candidate((std::vector<long>({9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}))) == (4));\n    assert(candidate((std::vector<long>({2, 6, 4,\
    \ 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}))) == (4));\n\
    \    assert(candidate((std::vector<long>({9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10,\
    \ 3, 8, 2, 6, 2, 3, 1}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({10}))) == (-1));\n    assert(candidate((std::vector<long>({9,\
    \ 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}))) == (1));\n    assert(candidate((std::vector<long>({7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 10, 10, 9, 2}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmp30qwv7fc: /tmp/tmp30qwv7fc.cpp:27: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 5, 5, 5, 1}))) == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the list.\n// If no such a value exist, return -1.\n// Examples:\n// search([4,\
    \ 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n// search([5,\
    \ 5, 4, 4, 4]) == -1\nlong search(std::vector<long> lst) {\n    long ans = -1;\n\
    \    long freq[100] = {0};\n    for (long i : lst) {\n        freq[i]++;\n   \
    \ }\n    for (long i : lst) {\n        if (freq[i] > ans) {\n            ans =\
    \ freq[i];\n        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate\
    \ = search;\n    assert(candidate((std::vector<long>({5, 5, 5, 5, 1}))) == (1));\n\
    \    assert(candidate((std::vector<long>({4, 1, 4, 1, 4, 4}))) == (4));\n    assert(candidate((std::vector<long>({3,\
    \ 3}))) == (-1));\n    assert(candidate((std::vector<long>({8, 8, 8, 8, 8, 8,\
    \ 8, 8}))) == (8));\n    assert(candidate((std::vector<long>({2, 3, 3, 2, 2})))\
    \ == (2));\n    assert(candidate((std::vector<long>({2, 7, 8, 8, 4, 8, 7, 3, 9,\
    \ 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}))) == (1));\n    assert(candidate((std::vector<long>({3,\
    \ 2, 8, 2}))) == (2));\n    assert(candidate((std::vector<long>({6, 7, 1, 8, 8,\
    \ 10, 5, 8, 5, 3, 10}))) == (1));\n    assert(candidate((std::vector<long>({8,\
    \ 8, 3, 6, 5, 6, 4}))) == (-1));\n    assert(candidate((std::vector<long>({6,\
    \ 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9})))\
    \ == (1));\n    assert(candidate((std::vector<long>({1, 9, 10, 1, 3}))) == (1));\n\
    \    assert(candidate((std::vector<long>({6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10,\
    \ 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}))) == (5));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({8, 8, 10, 6, 4, 3, 5, 8,\
    \ 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}))) == (4));\n    assert(candidate((std::vector<long>({2,\
    \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}))) == (2));\n    assert(candidate((std::vector<long>({1,\
    \ 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}))) == (1));\n    assert(candidate((std::vector<long>({9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}))) == (4));\n    assert(candidate((std::vector<long>({2, 6, 4,\
    \ 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}))) == (4));\n\
    \    assert(candidate((std::vector<long>({9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10,\
    \ 3, 8, 2, 6, 2, 3, 1}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({10}))) == (-1));\n    assert(candidate((std::vector<long>({9,\
    \ 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}))) == (1));\n    assert(candidate((std::vector<long>({7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 10, 10, 9, 2}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmpq6mp62zj: /tmp/tmpq6mp62zj.cpp:26: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 5, 5, 5, 1}))) == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the list.\n// If no such a value exist, return -1.\n// Examples:\n// search([4,\
    \ 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n// search([5,\
    \ 5, 4, 4, 4]) == -1\nlong search(std::vector<long> lst) {\n    long ans = -1;\n\
    \    long freq = 0;\n    for (long i : lst) {\n        freq += i;\n        if\
    \ (freq >= i) {\n            ans = i;\n            freq -= i;\n        }\n   \
    \ }\n    return ans;\n}\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5, 1}))) == (1));\n    assert(candidate((std::vector<long>({4, 1, 4, 1,\
    \ 4, 4}))) == (4));\n    assert(candidate((std::vector<long>({3, 3}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({8, 8, 8, 8, 8, 8, 8, 8}))) == (8));\n\
    \    assert(candidate((std::vector<long>({2, 3, 3, 2, 2}))) == (2));\n    assert(candidate((std::vector<long>({2,\
    \ 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 2, 8, 2}))) == (2));\n    assert(candidate((std::vector<long>({6,\
    \ 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}))) == (1));\n    assert(candidate((std::vector<long>({8,\
    \ 8, 3, 6, 5, 6, 4}))) == (-1));\n    assert(candidate((std::vector<long>({6,\
    \ 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9})))\
    \ == (1));\n    assert(candidate((std::vector<long>({1, 9, 10, 1, 3}))) == (1));\n\
    \    assert(candidate((std::vector<long>({6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10,\
    \ 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}))) == (5));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({8, 8, 10, 6, 4, 3, 5, 8,\
    \ 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}))) == (4));\n    assert(candidate((std::vector<long>({2,\
    \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}))) == (2));\n    assert(candidate((std::vector<long>({1,\
    \ 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}))) == (1));\n    assert(candidate((std::vector<long>({9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}))) == (4));\n    assert(candidate((std::vector<long>({2, 6, 4,\
    \ 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}))) == (4));\n\
    \    assert(candidate((std::vector<long>({9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10,\
    \ 3, 8, 2, 6, 2, 3, 1}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({10}))) == (-1));\n    assert(candidate((std::vector<long>({9,\
    \ 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}))) == (1));\n    assert(candidate((std::vector<long>({7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 10, 10, 9, 2}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmp2aws_z58: /tmp/tmp2aws_z58.cpp:27: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 3}))) == (-1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the list.\n// If no such a value exist, return -1.\n// Examples:\n// search([4,\
    \ 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n// search([5,\
    \ 5, 4, 4, 4]) == -1\nlong search(std::vector<long> lst) {\n    long ans = -1;\n\
    \    long freq[100];\n    for (long i = 0; i < lst.size(); i++) {\n        freq[lst[i]]++;\n\
    \    }\n    for (long i = 0; i < 100; i++) {\n        if (freq[i] >= lst.size())\
    \ {\n            ans = i;\n            break;\n        }\n    }\n    return ans;\n\
    }\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5, 1}))) == (1));\n    assert(candidate((std::vector<long>({4, 1, 4, 1,\
    \ 4, 4}))) == (4));\n    assert(candidate((std::vector<long>({3, 3}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({8, 8, 8, 8, 8, 8, 8, 8}))) == (8));\n\
    \    assert(candidate((std::vector<long>({2, 3, 3, 2, 2}))) == (2));\n    assert(candidate((std::vector<long>({2,\
    \ 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 2, 8, 2}))) == (2));\n    assert(candidate((std::vector<long>({6,\
    \ 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}))) == (1));\n    assert(candidate((std::vector<long>({8,\
    \ 8, 3, 6, 5, 6, 4}))) == (-1));\n    assert(candidate((std::vector<long>({6,\
    \ 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9})))\
    \ == (1));\n    assert(candidate((std::vector<long>({1, 9, 10, 1, 3}))) == (1));\n\
    \    assert(candidate((std::vector<long>({6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10,\
    \ 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}))) == (5));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({8, 8, 10, 6, 4, 3, 5, 8,\
    \ 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}))) == (4));\n    assert(candidate((std::vector<long>({2,\
    \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}))) == (2));\n    assert(candidate((std::vector<long>({1,\
    \ 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}))) == (1));\n    assert(candidate((std::vector<long>({9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}))) == (4));\n    assert(candidate((std::vector<long>({2, 6, 4,\
    \ 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}))) == (4));\n\
    \    assert(candidate((std::vector<long>({9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10,\
    \ 3, 8, 2, 6, 2, 3, 1}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({10}))) == (-1));\n    assert(candidate((std::vector<long>({9,\
    \ 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}))) == (1));\n    assert(candidate((std::vector<long>({7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 10, 10, 9, 2}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmp7q4jtvp2: /tmp/tmp7q4jtvp2.cpp:27: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 5, 5, 5, 1}))) == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the list.\n// If no such a value exist, return -1.\n// Examples:\n// search([4,\
    \ 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n// search([5,\
    \ 5, 4, 4, 4]) == -1\nlong search(std::vector<long> lst) {\n    // Your code here\n\
    \    long ans = -1;\n    long freq[10000];\n    for (long i : lst) {\n       \
    \ freq[i] = freq[i] + 1;\n    }\n    for (long i = 0; i < 10000; i++) {\n    \
    \    if (freq[i] >= lst[0]) {\n            ans = i;\n            break;\n    \
    \    }\n    }\n    return ans;\n}\nint main() {\n    auto candidate = search;\n\
    \    assert(candidate((std::vector<long>({5, 5, 5, 5, 1}))) == (1));\n    assert(candidate((std::vector<long>({4,\
    \ 1, 4, 1, 4, 4}))) == (4));\n    assert(candidate((std::vector<long>({3, 3})))\
    \ == (-1));\n    assert(candidate((std::vector<long>({8, 8, 8, 8, 8, 8, 8, 8})))\
    \ == (8));\n    assert(candidate((std::vector<long>({2, 3, 3, 2, 2}))) == (2));\n\
    \    assert(candidate((std::vector<long>({2, 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10,\
    \ 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}))) == (1));\n    assert(candidate((std::vector<long>({3,\
    \ 2, 8, 2}))) == (2));\n    assert(candidate((std::vector<long>({6, 7, 1, 8, 8,\
    \ 10, 5, 8, 5, 3, 10}))) == (1));\n    assert(candidate((std::vector<long>({8,\
    \ 8, 3, 6, 5, 6, 4}))) == (-1));\n    assert(candidate((std::vector<long>({6,\
    \ 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9})))\
    \ == (1));\n    assert(candidate((std::vector<long>({1, 9, 10, 1, 3}))) == (1));\n\
    \    assert(candidate((std::vector<long>({6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10,\
    \ 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}))) == (5));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({8, 8, 10, 6, 4, 3, 5, 8,\
    \ 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}))) == (4));\n    assert(candidate((std::vector<long>({2,\
    \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}))) == (2));\n    assert(candidate((std::vector<long>({1,\
    \ 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}))) == (1));\n    assert(candidate((std::vector<long>({9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}))) == (4));\n    assert(candidate((std::vector<long>({2, 6, 4,\
    \ 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}))) == (4));\n\
    \    assert(candidate((std::vector<long>({9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10,\
    \ 3, 8, 2, 6, 2, 3, 1}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({10}))) == (-1));\n    assert(candidate((std::vector<long>({9,\
    \ 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}))) == (1));\n    assert(candidate((std::vector<long>({7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 10, 10, 9, 2}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmp8tk_d86y: /tmp/tmp8tk_d86y.cpp:28: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 5, 5, 5, 1}))) == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the list.\n// If no such a value exist, return -1.\n// Examples:\n// search([4,\
    \ 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n// search([5,\
    \ 5, 4, 4, 4]) == -1\nlong search(std::vector<long> lst) {\n    long ans = -1;\n\
    \    long freq = 0;\n    for (long i : lst) {\n        freq += i;\n        if\
    \ (freq >= i) {\n            ans = i;\n            freq -= i;\n        }\n   \
    \ }\n    return ans;\n}\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5, 1}))) == (1));\n    assert(candidate((std::vector<long>({4, 1, 4, 1,\
    \ 4, 4}))) == (4));\n    assert(candidate((std::vector<long>({3, 3}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({8, 8, 8, 8, 8, 8, 8, 8}))) == (8));\n\
    \    assert(candidate((std::vector<long>({2, 3, 3, 2, 2}))) == (2));\n    assert(candidate((std::vector<long>({2,\
    \ 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 2, 8, 2}))) == (2));\n    assert(candidate((std::vector<long>({6,\
    \ 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}))) == (1));\n    assert(candidate((std::vector<long>({8,\
    \ 8, 3, 6, 5, 6, 4}))) == (-1));\n    assert(candidate((std::vector<long>({6,\
    \ 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9})))\
    \ == (1));\n    assert(candidate((std::vector<long>({1, 9, 10, 1, 3}))) == (1));\n\
    \    assert(candidate((std::vector<long>({6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10,\
    \ 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}))) == (5));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({8, 8, 10, 6, 4, 3, 5, 8,\
    \ 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}))) == (4));\n    assert(candidate((std::vector<long>({2,\
    \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}))) == (2));\n    assert(candidate((std::vector<long>({1,\
    \ 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}))) == (1));\n    assert(candidate((std::vector<long>({9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}))) == (4));\n    assert(candidate((std::vector<long>({2, 6, 4,\
    \ 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}))) == (4));\n\
    \    assert(candidate((std::vector<long>({9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10,\
    \ 3, 8, 2, 6, 2, 3, 1}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({10}))) == (-1));\n    assert(candidate((std::vector<long>({9,\
    \ 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}))) == (1));\n    assert(candidate((std::vector<long>({7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 10, 10, 9, 2}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmp6dgu8p8g: /tmp/tmp6dgu8p8g.cpp:27: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 3}))) == (-1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the list.\n// If no such a value exist, return -1.\n// Examples:\n// search([4,\
    \ 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n// search([5,\
    \ 5, 4, 4, 4]) == -1\nlong search(std::vector<long> lst) {\n    long maxVal =\
    \ lst[0];\n    long freq = lst[0];\n    for (long i = 1; i < lst.size(); i++)\
    \ {\n        if (lst[i] > maxVal) {\n            maxVal = lst[i];\n          \
    \  freq = lst[i];\n        } else if (lst[i] == maxVal) {\n            freq++;\n\
    \        }\n    }\n    if (freq > maxVal) {\n        return -1;\n    } else {\n\
    \        return maxVal;\n    }\n}\nint main() {\n    auto candidate = search;\n\
    \    assert(candidate((std::vector<long>({5, 5, 5, 5, 1}))) == (1));\n    assert(candidate((std::vector<long>({4,\
    \ 1, 4, 1, 4, 4}))) == (4));\n    assert(candidate((std::vector<long>({3, 3})))\
    \ == (-1));\n    assert(candidate((std::vector<long>({8, 8, 8, 8, 8, 8, 8, 8})))\
    \ == (8));\n    assert(candidate((std::vector<long>({2, 3, 3, 2, 2}))) == (2));\n\
    \    assert(candidate((std::vector<long>({2, 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10,\
    \ 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}))) == (1));\n    assert(candidate((std::vector<long>({3,\
    \ 2, 8, 2}))) == (2));\n    assert(candidate((std::vector<long>({6, 7, 1, 8, 8,\
    \ 10, 5, 8, 5, 3, 10}))) == (1));\n    assert(candidate((std::vector<long>({8,\
    \ 8, 3, 6, 5, 6, 4}))) == (-1));\n    assert(candidate((std::vector<long>({6,\
    \ 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9})))\
    \ == (1));\n    assert(candidate((std::vector<long>({1, 9, 10, 1, 3}))) == (1));\n\
    \    assert(candidate((std::vector<long>({6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10,\
    \ 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}))) == (5));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({8, 8, 10, 6, 4, 3, 5, 8,\
    \ 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}))) == (4));\n    assert(candidate((std::vector<long>({2,\
    \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}))) == (2));\n    assert(candidate((std::vector<long>({1,\
    \ 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}))) == (1));\n    assert(candidate((std::vector<long>({9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}))) == (4));\n    assert(candidate((std::vector<long>({2, 6, 4,\
    \ 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}))) == (4));\n\
    \    assert(candidate((std::vector<long>({9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10,\
    \ 3, 8, 2, 6, 2, 3, 1}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({10}))) == (-1));\n    assert(candidate((std::vector<long>({9,\
    \ 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}))) == (1));\n    assert(candidate((std::vector<long>({7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 10, 10, 9, 2}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmpbjbxaq88: /tmp/tmpbjbxaq88.cpp:30: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 5, 5, 5, 1}))) == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the list.\n// If no such a value exist, return -1.\n// Examples:\n// search([4,\
    \ 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n// search([5,\
    \ 5, 4, 4, 4]) == -1\nlong search(std::vector<long> lst) {\n    long maxVal =\
    \ -1;\n    long maxFreq = -1;\n    long currVal = lst[0];\n    long currFreq =\
    \ lst[0];\n    for (long i = 1; i < lst.size(); i++) {\n        if (lst[i] > currVal)\
    \ {\n            currVal = lst[i];\n            currFreq = lst[i];\n        }\
    \ else if (lst[i] == currVal) {\n            currFreq++;\n        }\n        if\
    \ (currFreq > maxFreq) {\n            maxFreq = currFreq;\n            maxVal\
    \ = currVal;\n        }\n    }\n    return maxVal;\n}\nint main() {\n    auto\
    \ candidate = search;\n    assert(candidate((std::vector<long>({5, 5, 5, 5, 1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({4, 1, 4, 1, 4, 4}))) == (4));\n\
    \    assert(candidate((std::vector<long>({3, 3}))) == (-1));\n    assert(candidate((std::vector<long>({8,\
    \ 8, 8, 8, 8, 8, 8, 8}))) == (8));\n    assert(candidate((std::vector<long>({2,\
    \ 3, 3, 2, 2}))) == (2));\n    assert(candidate((std::vector<long>({2, 7, 8, 8,\
    \ 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}))) == (1));\n    assert(candidate((std::vector<long>({3,\
    \ 2, 8, 2}))) == (2));\n    assert(candidate((std::vector<long>({6, 7, 1, 8, 8,\
    \ 10, 5, 8, 5, 3, 10}))) == (1));\n    assert(candidate((std::vector<long>({8,\
    \ 8, 3, 6, 5, 6, 4}))) == (-1));\n    assert(candidate((std::vector<long>({6,\
    \ 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9})))\
    \ == (1));\n    assert(candidate((std::vector<long>({1, 9, 10, 1, 3}))) == (1));\n\
    \    assert(candidate((std::vector<long>({6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10,\
    \ 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}))) == (5));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({8, 8, 10, 6, 4, 3, 5, 8,\
    \ 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}))) == (4));\n    assert(candidate((std::vector<long>({2,\
    \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}))) == (2));\n    assert(candidate((std::vector<long>({1,\
    \ 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}))) == (1));\n    assert(candidate((std::vector<long>({9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}))) == (4));\n    assert(candidate((std::vector<long>({2, 6, 4,\
    \ 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}))) == (4));\n\
    \    assert(candidate((std::vector<long>({9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10,\
    \ 3, 8, 2, 6, 2, 3, 1}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({10}))) == (-1));\n    assert(candidate((std::vector<long>({9,\
    \ 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}))) == (1));\n    assert(candidate((std::vector<long>({7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 10, 10, 9, 2}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmpouc8ebba: /tmp/tmpouc8ebba.cpp:32: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 5, 5, 5, 1}))) == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the list.\n// If no such a value exist, return -1.\n// Examples:\n// search([4,\
    \ 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n// search([5,\
    \ 5, 4, 4, 4]) == -1\nlong search(std::vector<long> lst) {\n    long ans = -1;\n\
    \    long freq = 0;\n    for(long i : lst) {\n        freq += i;\n        if(freq\
    \ >= i) {\n            ans = i;\n            break;\n        }\n    }\n    return\
    \ ans;\n}\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5, 1}))) == (1));\n    assert(candidate((std::vector<long>({4, 1, 4, 1,\
    \ 4, 4}))) == (4));\n    assert(candidate((std::vector<long>({3, 3}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({8, 8, 8, 8, 8, 8, 8, 8}))) == (8));\n\
    \    assert(candidate((std::vector<long>({2, 3, 3, 2, 2}))) == (2));\n    assert(candidate((std::vector<long>({2,\
    \ 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 2, 8, 2}))) == (2));\n    assert(candidate((std::vector<long>({6,\
    \ 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}))) == (1));\n    assert(candidate((std::vector<long>({8,\
    \ 8, 3, 6, 5, 6, 4}))) == (-1));\n    assert(candidate((std::vector<long>({6,\
    \ 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9})))\
    \ == (1));\n    assert(candidate((std::vector<long>({1, 9, 10, 1, 3}))) == (1));\n\
    \    assert(candidate((std::vector<long>({6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10,\
    \ 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}))) == (5));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({8, 8, 10, 6, 4, 3, 5, 8,\
    \ 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}))) == (4));\n    assert(candidate((std::vector<long>({2,\
    \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}))) == (2));\n    assert(candidate((std::vector<long>({1,\
    \ 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}))) == (1));\n    assert(candidate((std::vector<long>({9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}))) == (4));\n    assert(candidate((std::vector<long>({2, 6, 4,\
    \ 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}))) == (4));\n\
    \    assert(candidate((std::vector<long>({9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10,\
    \ 3, 8, 2, 6, 2, 3, 1}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({10}))) == (-1));\n    assert(candidate((std::vector<long>({9,\
    \ 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}))) == (1));\n    assert(candidate((std::vector<long>({7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 10, 10, 9, 2}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmpyen_r_p7: /tmp/tmpyen_r_p7.cpp:25: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 5, 5, 5, 1}))) == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the list.\n// If no such a value exist, return -1.\n// Examples:\n// search([4,\
    \ 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n// search([5,\
    \ 5, 4, 4, 4]) == -1\nlong search(std::vector<long> lst) {\n    long ans = -1;\n\
    \    long freq = 0;\n    for(long i : lst) {\n        freq += i;\n        if(freq\
    \ >= i) {\n            ans = i;\n            break;\n        }\n    }\n    return\
    \ ans;\n}\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5, 1}))) == (1));\n    assert(candidate((std::vector<long>({4, 1, 4, 1,\
    \ 4, 4}))) == (4));\n    assert(candidate((std::vector<long>({3, 3}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({8, 8, 8, 8, 8, 8, 8, 8}))) == (8));\n\
    \    assert(candidate((std::vector<long>({2, 3, 3, 2, 2}))) == (2));\n    assert(candidate((std::vector<long>({2,\
    \ 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 2, 8, 2}))) == (2));\n    assert(candidate((std::vector<long>({6,\
    \ 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}))) == (1));\n    assert(candidate((std::vector<long>({8,\
    \ 8, 3, 6, 5, 6, 4}))) == (-1));\n    assert(candidate((std::vector<long>({6,\
    \ 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9})))\
    \ == (1));\n    assert(candidate((std::vector<long>({1, 9, 10, 1, 3}))) == (1));\n\
    \    assert(candidate((std::vector<long>({6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10,\
    \ 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}))) == (5));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({8, 8, 10, 6, 4, 3, 5, 8,\
    \ 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}))) == (4));\n    assert(candidate((std::vector<long>({2,\
    \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}))) == (2));\n    assert(candidate((std::vector<long>({1,\
    \ 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}))) == (1));\n    assert(candidate((std::vector<long>({9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}))) == (4));\n    assert(candidate((std::vector<long>({2, 6, 4,\
    \ 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}))) == (4));\n\
    \    assert(candidate((std::vector<long>({9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10,\
    \ 3, 8, 2, 6, 2, 3, 1}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({10}))) == (-1));\n    assert(candidate((std::vector<long>({9,\
    \ 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}))) == (1));\n    assert(candidate((std::vector<long>({7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 10, 10, 9, 2}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmpjhlvlzje: /tmp/tmpjhlvlzje.cpp:25: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 5, 5, 5, 1}))) == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the list.\n// If no such a value exist, return -1.\n// Examples:\n// search([4,\
    \ 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n// search([5,\
    \ 5, 4, 4, 4]) == -1\nlong search(std::vector<long> lst) {\n    // Your code here\n\
    \    long ans = -1;\n    long freq = 0;\n    for (long i : lst) {\n        freq\
    \ += i;\n        if (freq > ans) {\n            ans = freq;\n        }\n    }\n\
    \    return ans;\n}\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5, 1}))) == (1));\n    assert(candidate((std::vector<long>({4, 1, 4, 1,\
    \ 4, 4}))) == (4));\n    assert(candidate((std::vector<long>({3, 3}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({8, 8, 8, 8, 8, 8, 8, 8}))) == (8));\n\
    \    assert(candidate((std::vector<long>({2, 3, 3, 2, 2}))) == (2));\n    assert(candidate((std::vector<long>({2,\
    \ 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 2, 8, 2}))) == (2));\n    assert(candidate((std::vector<long>({6,\
    \ 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}))) == (1));\n    assert(candidate((std::vector<long>({8,\
    \ 8, 3, 6, 5, 6, 4}))) == (-1));\n    assert(candidate((std::vector<long>({6,\
    \ 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9})))\
    \ == (1));\n    assert(candidate((std::vector<long>({1, 9, 10, 1, 3}))) == (1));\n\
    \    assert(candidate((std::vector<long>({6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10,\
    \ 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}))) == (5));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({8, 8, 10, 6, 4, 3, 5, 8,\
    \ 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}))) == (4));\n    assert(candidate((std::vector<long>({2,\
    \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}))) == (2));\n    assert(candidate((std::vector<long>({1,\
    \ 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}))) == (1));\n    assert(candidate((std::vector<long>({9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}))) == (4));\n    assert(candidate((std::vector<long>({2, 6, 4,\
    \ 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}))) == (4));\n\
    \    assert(candidate((std::vector<long>({9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10,\
    \ 3, 8, 2, 6, 2, 3, 1}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({10}))) == (-1));\n    assert(candidate((std::vector<long>({9,\
    \ 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}))) == (1));\n    assert(candidate((std::vector<long>({7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 10, 10, 9, 2}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmp9fgdnkki: /tmp/tmp9fgdnkki.cpp:25: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 5, 5, 5, 1}))) == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the list.\n// If no such a value exist, return -1.\n// Examples:\n// search([4,\
    \ 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n// search([5,\
    \ 5, 4, 4, 4]) == -1\nlong search(std::vector<long> lst) {\n    long ans = -1;\n\
    \    long freq[10000];\n    for (long i : lst) {\n        freq[i] = freq[i] +\
    \ 1;\n    }\n    for (long i : lst) {\n        if (freq[i] > ans) {\n        \
    \    ans = freq[i];\n        }\n    }\n    return ans;\n}\nint main() {\n    auto\
    \ candidate = search;\n    assert(candidate((std::vector<long>({5, 5, 5, 5, 1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({4, 1, 4, 1, 4, 4}))) == (4));\n\
    \    assert(candidate((std::vector<long>({3, 3}))) == (-1));\n    assert(candidate((std::vector<long>({8,\
    \ 8, 8, 8, 8, 8, 8, 8}))) == (8));\n    assert(candidate((std::vector<long>({2,\
    \ 3, 3, 2, 2}))) == (2));\n    assert(candidate((std::vector<long>({2, 7, 8, 8,\
    \ 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}))) == (1));\n    assert(candidate((std::vector<long>({3,\
    \ 2, 8, 2}))) == (2));\n    assert(candidate((std::vector<long>({6, 7, 1, 8, 8,\
    \ 10, 5, 8, 5, 3, 10}))) == (1));\n    assert(candidate((std::vector<long>({8,\
    \ 8, 3, 6, 5, 6, 4}))) == (-1));\n    assert(candidate((std::vector<long>({6,\
    \ 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9})))\
    \ == (1));\n    assert(candidate((std::vector<long>({1, 9, 10, 1, 3}))) == (1));\n\
    \    assert(candidate((std::vector<long>({6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10,\
    \ 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}))) == (5));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({8, 8, 10, 6, 4, 3, 5, 8,\
    \ 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}))) == (4));\n    assert(candidate((std::vector<long>({2,\
    \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}))) == (2));\n    assert(candidate((std::vector<long>({1,\
    \ 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}))) == (1));\n    assert(candidate((std::vector<long>({9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}))) == (4));\n    assert(candidate((std::vector<long>({2, 6, 4,\
    \ 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}))) == (4));\n\
    \    assert(candidate((std::vector<long>({9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10,\
    \ 3, 8, 2, 6, 2, 3, 1}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({10}))) == (-1));\n    assert(candidate((std::vector<long>({9,\
    \ 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}))) == (1));\n    assert(candidate((std::vector<long>({7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 10, 10, 9, 2}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmpepdszzxb: /tmp/tmpepdszzxb.cpp:26: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 5, 5, 5, 1}))) == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the list.\n// If no such a value exist, return -1.\n// Examples:\n// search([4,\
    \ 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n// search([5,\
    \ 5, 4, 4, 4]) == -1\nlong search(std::vector<long> lst) {\n    // Write your\
    \ code here\n    long ans = -1;\n    long freq = 0;\n    for (long i : lst) {\n\
    \        freq += i;\n        if (freq >= i) {\n            ans = i;\n        \
    \    break;\n        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate\
    \ = search;\n    assert(candidate((std::vector<long>({5, 5, 5, 5, 1}))) == (1));\n\
    \    assert(candidate((std::vector<long>({4, 1, 4, 1, 4, 4}))) == (4));\n    assert(candidate((std::vector<long>({3,\
    \ 3}))) == (-1));\n    assert(candidate((std::vector<long>({8, 8, 8, 8, 8, 8,\
    \ 8, 8}))) == (8));\n    assert(candidate((std::vector<long>({2, 3, 3, 2, 2})))\
    \ == (2));\n    assert(candidate((std::vector<long>({2, 7, 8, 8, 4, 8, 7, 3, 9,\
    \ 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}))) == (1));\n    assert(candidate((std::vector<long>({3,\
    \ 2, 8, 2}))) == (2));\n    assert(candidate((std::vector<long>({6, 7, 1, 8, 8,\
    \ 10, 5, 8, 5, 3, 10}))) == (1));\n    assert(candidate((std::vector<long>({8,\
    \ 8, 3, 6, 5, 6, 4}))) == (-1));\n    assert(candidate((std::vector<long>({6,\
    \ 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9})))\
    \ == (1));\n    assert(candidate((std::vector<long>({1, 9, 10, 1, 3}))) == (1));\n\
    \    assert(candidate((std::vector<long>({6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10,\
    \ 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}))) == (5));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({8, 8, 10, 6, 4, 3, 5, 8,\
    \ 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}))) == (4));\n    assert(candidate((std::vector<long>({2,\
    \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}))) == (2));\n    assert(candidate((std::vector<long>({1,\
    \ 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}))) == (1));\n    assert(candidate((std::vector<long>({9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}))) == (4));\n    assert(candidate((std::vector<long>({2, 6, 4,\
    \ 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}))) == (4));\n\
    \    assert(candidate((std::vector<long>({9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10,\
    \ 3, 8, 2, 6, 2, 3, 1}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({10}))) == (-1));\n    assert(candidate((std::vector<long>({9,\
    \ 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}))) == (1));\n    assert(candidate((std::vector<long>({7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 10, 10, 9, 2}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmpfvqs3nxy: /tmp/tmpfvqs3nxy.cpp:26: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 5, 5, 5, 1}))) == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the list.\n// If no such a value exist, return -1.\n// Examples:\n// search([4,\
    \ 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n// search([5,\
    \ 5, 4, 4, 4]) == -1\nlong search(std::vector<long> lst) {\n    long ans = -1;\n\
    \    long freq[1000];\n    for (long i : lst) {\n        freq[i] = freq[i] + 1;\n\
    \    }\n    for (long i = 0; i < 1000; i++) {\n        if (freq[i] >= lst[0])\
    \ {\n            ans = i;\n            break;\n        }\n    }\n    return ans;\n\
    }\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5, 1}))) == (1));\n    assert(candidate((std::vector<long>({4, 1, 4, 1,\
    \ 4, 4}))) == (4));\n    assert(candidate((std::vector<long>({3, 3}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({8, 8, 8, 8, 8, 8, 8, 8}))) == (8));\n\
    \    assert(candidate((std::vector<long>({2, 3, 3, 2, 2}))) == (2));\n    assert(candidate((std::vector<long>({2,\
    \ 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 2, 8, 2}))) == (2));\n    assert(candidate((std::vector<long>({6,\
    \ 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}))) == (1));\n    assert(candidate((std::vector<long>({8,\
    \ 8, 3, 6, 5, 6, 4}))) == (-1));\n    assert(candidate((std::vector<long>({6,\
    \ 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9})))\
    \ == (1));\n    assert(candidate((std::vector<long>({1, 9, 10, 1, 3}))) == (1));\n\
    \    assert(candidate((std::vector<long>({6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10,\
    \ 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}))) == (5));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({8, 8, 10, 6, 4, 3, 5, 8,\
    \ 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}))) == (4));\n    assert(candidate((std::vector<long>({2,\
    \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}))) == (2));\n    assert(candidate((std::vector<long>({1,\
    \ 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}))) == (1));\n    assert(candidate((std::vector<long>({9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}))) == (4));\n    assert(candidate((std::vector<long>({2, 6, 4,\
    \ 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}))) == (4));\n\
    \    assert(candidate((std::vector<long>({9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10,\
    \ 3, 8, 2, 6, 2, 3, 1}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({10}))) == (-1));\n    assert(candidate((std::vector<long>({9,\
    \ 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}))) == (1));\n    assert(candidate((std::vector<long>({7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 10, 10, 9, 2}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmpi3_4p5el: /tmp/tmpi3_4p5el.cpp:27: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 5, 5, 5, 1}))) == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the list.\n// If no such a value exist, return -1.\n// Examples:\n// search([4,\
    \ 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n// search([5,\
    \ 5, 4, 4, 4]) == -1\nlong search(std::vector<long> lst) {\n    // Write your\
    \ code here\n    long ans = -1;\n    long freq = 0;\n    for (long i : lst) {\n\
    \        freq += i;\n    }\n    if (freq > 0) {\n        long max = 0;\n     \
    \   for (long i : lst) {\n            if (freq > i) {\n                freq -=\
    \ i;\n                max = i;\n            }\n        }\n        if (max > 0)\
    \ {\n            ans = max;\n        }\n    }\n    return ans;\n}\nint main()\
    \ {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5, 1}))) == (1));\n    assert(candidate((std::vector<long>({4, 1, 4, 1,\
    \ 4, 4}))) == (4));\n    assert(candidate((std::vector<long>({3, 3}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({8, 8, 8, 8, 8, 8, 8, 8}))) == (8));\n\
    \    assert(candidate((std::vector<long>({2, 3, 3, 2, 2}))) == (2));\n    assert(candidate((std::vector<long>({2,\
    \ 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 2, 8, 2}))) == (2));\n    assert(candidate((std::vector<long>({6,\
    \ 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}))) == (1));\n    assert(candidate((std::vector<long>({8,\
    \ 8, 3, 6, 5, 6, 4}))) == (-1));\n    assert(candidate((std::vector<long>({6,\
    \ 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9})))\
    \ == (1));\n    assert(candidate((std::vector<long>({1, 9, 10, 1, 3}))) == (1));\n\
    \    assert(candidate((std::vector<long>({6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10,\
    \ 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}))) == (5));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({8, 8, 10, 6, 4, 3, 5, 8,\
    \ 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}))) == (4));\n    assert(candidate((std::vector<long>({2,\
    \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}))) == (2));\n    assert(candidate((std::vector<long>({1,\
    \ 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}))) == (1));\n    assert(candidate((std::vector<long>({9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}))) == (4));\n    assert(candidate((std::vector<long>({2, 6, 4,\
    \ 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}))) == (4));\n\
    \    assert(candidate((std::vector<long>({9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10,\
    \ 3, 8, 2, 6, 2, 3, 1}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({10}))) == (-1));\n    assert(candidate((std::vector<long>({9,\
    \ 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}))) == (1));\n    assert(candidate((std::vector<long>({7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 10, 10, 9, 2}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmpbecyekjz: /tmp/tmpbecyekjz.cpp:34: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 5, 5, 5, 1}))) == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the list.\n// If no such a value exist, return -1.\n// Examples:\n// search([4,\
    \ 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n// search([5,\
    \ 5, 4, 4, 4]) == -1\nlong search(std::vector<long> lst) {\n    long ans = -1;\n\
    \    long freq[100];\n    long maxFreq = -1;\n    for(long i = 0; i < lst.size();\
    \ i++) {\n        freq[lst[i]]++;\n    }\n    for(long i = 0; i < 100; i++) {\n\
    \        if(freq[i] > maxFreq) {\n            maxFreq = freq[i];\n           \
    \ ans = i;\n        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate\
    \ = search;\n    assert(candidate((std::vector<long>({5, 5, 5, 5, 1}))) == (1));\n\
    \    assert(candidate((std::vector<long>({4, 1, 4, 1, 4, 4}))) == (4));\n    assert(candidate((std::vector<long>({3,\
    \ 3}))) == (-1));\n    assert(candidate((std::vector<long>({8, 8, 8, 8, 8, 8,\
    \ 8, 8}))) == (8));\n    assert(candidate((std::vector<long>({2, 3, 3, 2, 2})))\
    \ == (2));\n    assert(candidate((std::vector<long>({2, 7, 8, 8, 4, 8, 7, 3, 9,\
    \ 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}))) == (1));\n    assert(candidate((std::vector<long>({3,\
    \ 2, 8, 2}))) == (2));\n    assert(candidate((std::vector<long>({6, 7, 1, 8, 8,\
    \ 10, 5, 8, 5, 3, 10}))) == (1));\n    assert(candidate((std::vector<long>({8,\
    \ 8, 3, 6, 5, 6, 4}))) == (-1));\n    assert(candidate((std::vector<long>({6,\
    \ 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9})))\
    \ == (1));\n    assert(candidate((std::vector<long>({1, 9, 10, 1, 3}))) == (1));\n\
    \    assert(candidate((std::vector<long>({6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10,\
    \ 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}))) == (5));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({8, 8, 10, 6, 4, 3, 5, 8,\
    \ 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}))) == (4));\n    assert(candidate((std::vector<long>({2,\
    \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}))) == (2));\n    assert(candidate((std::vector<long>({1,\
    \ 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}))) == (1));\n    assert(candidate((std::vector<long>({9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}))) == (4));\n    assert(candidate((std::vector<long>({2, 6, 4,\
    \ 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}))) == (4));\n\
    \    assert(candidate((std::vector<long>({9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10,\
    \ 3, 8, 2, 6, 2, 3, 1}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({10}))) == (-1));\n    assert(candidate((std::vector<long>({9,\
    \ 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}))) == (1));\n    assert(candidate((std::vector<long>({7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 10, 10, 9, 2}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmpz2gt6zec: /tmp/tmpz2gt6zec.cpp:28: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 5, 5, 5, 1}))) == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the list.\n// If no such a value exist, return -1.\n// Examples:\n// search([4,\
    \ 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n// search([5,\
    \ 5, 4, 4, 4]) == -1\nlong search(std::vector<long> lst) {\n    // Write your\
    \ code here\n    long ans = -1;\n    long freq = 0;\n    for (long i : lst) {\n\
    \        freq += i;\n        if (freq > ans) {\n            ans = freq;\n    \
    \    }\n    }\n    return ans;\n}\nint main() {\n    auto candidate = search;\n\
    \    assert(candidate((std::vector<long>({5, 5, 5, 5, 1}))) == (1));\n    assert(candidate((std::vector<long>({4,\
    \ 1, 4, 1, 4, 4}))) == (4));\n    assert(candidate((std::vector<long>({3, 3})))\
    \ == (-1));\n    assert(candidate((std::vector<long>({8, 8, 8, 8, 8, 8, 8, 8})))\
    \ == (8));\n    assert(candidate((std::vector<long>({2, 3, 3, 2, 2}))) == (2));\n\
    \    assert(candidate((std::vector<long>({2, 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10,\
    \ 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}))) == (1));\n    assert(candidate((std::vector<long>({3,\
    \ 2, 8, 2}))) == (2));\n    assert(candidate((std::vector<long>({6, 7, 1, 8, 8,\
    \ 10, 5, 8, 5, 3, 10}))) == (1));\n    assert(candidate((std::vector<long>({8,\
    \ 8, 3, 6, 5, 6, 4}))) == (-1));\n    assert(candidate((std::vector<long>({6,\
    \ 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9})))\
    \ == (1));\n    assert(candidate((std::vector<long>({1, 9, 10, 1, 3}))) == (1));\n\
    \    assert(candidate((std::vector<long>({6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10,\
    \ 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}))) == (5));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({8, 8, 10, 6, 4, 3, 5, 8,\
    \ 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}))) == (4));\n    assert(candidate((std::vector<long>({2,\
    \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}))) == (2));\n    assert(candidate((std::vector<long>({1,\
    \ 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}))) == (1));\n    assert(candidate((std::vector<long>({9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}))) == (4));\n    assert(candidate((std::vector<long>({2, 6, 4,\
    \ 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}))) == (4));\n\
    \    assert(candidate((std::vector<long>({9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10,\
    \ 3, 8, 2, 6, 2, 3, 1}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({10}))) == (-1));\n    assert(candidate((std::vector<long>({9,\
    \ 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}))) == (1));\n    assert(candidate((std::vector<long>({7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 10, 10, 9, 2}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmptpy4kenf: /tmp/tmptpy4kenf.cpp:25: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 5, 5, 5, 1}))) == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the list.\n// If no such a value exist, return -1.\n// Examples:\n// search([4,\
    \ 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n// search([5,\
    \ 5, 4, 4, 4]) == -1\nlong search(std::vector<long> lst) {\n    long ans = -1;\n\
    \    long freq[100] = {0};\n    for (long i : lst) {\n        freq[i]++;\n   \
    \ }\n    for (long i : lst) {\n        if (freq[i] >= i) {\n            ans =\
    \ i;\n            break;\n        }\n    }\n    return ans;\n}\nint main() {\n\
    \    auto candidate = search;\n    assert(candidate((std::vector<long>({5, 5,\
    \ 5, 5, 1}))) == (1));\n    assert(candidate((std::vector<long>({4, 1, 4, 1, 4,\
    \ 4}))) == (4));\n    assert(candidate((std::vector<long>({3, 3}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({8, 8, 8, 8, 8, 8, 8, 8}))) == (8));\n\
    \    assert(candidate((std::vector<long>({2, 3, 3, 2, 2}))) == (2));\n    assert(candidate((std::vector<long>({2,\
    \ 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 2, 8, 2}))) == (2));\n    assert(candidate((std::vector<long>({6,\
    \ 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}))) == (1));\n    assert(candidate((std::vector<long>({8,\
    \ 8, 3, 6, 5, 6, 4}))) == (-1));\n    assert(candidate((std::vector<long>({6,\
    \ 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9})))\
    \ == (1));\n    assert(candidate((std::vector<long>({1, 9, 10, 1, 3}))) == (1));\n\
    \    assert(candidate((std::vector<long>({6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10,\
    \ 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}))) == (5));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({8, 8, 10, 6, 4, 3, 5, 8,\
    \ 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}))) == (4));\n    assert(candidate((std::vector<long>({2,\
    \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}))) == (2));\n    assert(candidate((std::vector<long>({1,\
    \ 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}))) == (1));\n    assert(candidate((std::vector<long>({9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}))) == (4));\n    assert(candidate((std::vector<long>({2, 6, 4,\
    \ 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}))) == (4));\n\
    \    assert(candidate((std::vector<long>({9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10,\
    \ 3, 8, 2, 6, 2, 3, 1}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({10}))) == (-1));\n    assert(candidate((std::vector<long>({9,\
    \ 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}))) == (1));\n    assert(candidate((std::vector<long>({7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 10, 10, 9, 2}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmpsou80q35: /tmp/tmpsou80q35.cpp:43: int main(): Assertion `candidate((std::vector<long>({9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}))) == (4)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the list.\n// If no such a value exist, return -1.\n// Examples:\n// search([4,\
    \ 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n// search([5,\
    \ 5, 4, 4, 4]) == -1\nlong search(std::vector<long> lst) {\n    long ans = -1;\n\
    \    long freq[100000];\n    for (long i : lst) {\n        freq[i] = freq[i] +\
    \ 1;\n    }\n    for (long i = 0; i < 100000; i++) {\n        if (freq[i] > 0\
    \ && freq[i] >= lst[0]) {\n            ans = i;\n            break;\n        }\n\
    \    }\n    return ans;\n}\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5, 1}))) == (1));\n    assert(candidate((std::vector<long>({4, 1, 4, 1,\
    \ 4, 4}))) == (4));\n    assert(candidate((std::vector<long>({3, 3}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({8, 8, 8, 8, 8, 8, 8, 8}))) == (8));\n\
    \    assert(candidate((std::vector<long>({2, 3, 3, 2, 2}))) == (2));\n    assert(candidate((std::vector<long>({2,\
    \ 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 2, 8, 2}))) == (2));\n    assert(candidate((std::vector<long>({6,\
    \ 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}))) == (1));\n    assert(candidate((std::vector<long>({8,\
    \ 8, 3, 6, 5, 6, 4}))) == (-1));\n    assert(candidate((std::vector<long>({6,\
    \ 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9})))\
    \ == (1));\n    assert(candidate((std::vector<long>({1, 9, 10, 1, 3}))) == (1));\n\
    \    assert(candidate((std::vector<long>({6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10,\
    \ 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}))) == (5));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({8, 8, 10, 6, 4, 3, 5, 8,\
    \ 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}))) == (4));\n    assert(candidate((std::vector<long>({2,\
    \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}))) == (2));\n    assert(candidate((std::vector<long>({1,\
    \ 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}))) == (1));\n    assert(candidate((std::vector<long>({9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}))) == (4));\n    assert(candidate((std::vector<long>({2, 6, 4,\
    \ 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}))) == (4));\n\
    \    assert(candidate((std::vector<long>({9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10,\
    \ 3, 8, 2, 6, 2, 3, 1}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({10}))) == (-1));\n    assert(candidate((std::vector<long>({9,\
    \ 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}))) == (1));\n    assert(candidate((std::vector<long>({7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 10, 10, 9, 2}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmp00nfjjj_: /tmp/tmp00nfjjj_.cpp:27: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 5, 5, 5, 1}))) == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the list.\n// If no such a value exist, return -1.\n// Examples:\n// search([4,\
    \ 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n// search([5,\
    \ 5, 4, 4, 4]) == -1\nlong search(std::vector<long> lst) {\n    long ans = -1;\n\
    \    long freq[100000];\n    for (long i : lst) {\n        freq[i] = freq[i] +\
    \ 1;\n    }\n    for (long i : lst) {\n        if (freq[i] > ans) {\n        \
    \    ans = freq[i];\n        }\n    }\n    return ans;\n}\nint main() {\n    auto\
    \ candidate = search;\n    assert(candidate((std::vector<long>({5, 5, 5, 5, 1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({4, 1, 4, 1, 4, 4}))) == (4));\n\
    \    assert(candidate((std::vector<long>({3, 3}))) == (-1));\n    assert(candidate((std::vector<long>({8,\
    \ 8, 8, 8, 8, 8, 8, 8}))) == (8));\n    assert(candidate((std::vector<long>({2,\
    \ 3, 3, 2, 2}))) == (2));\n    assert(candidate((std::vector<long>({2, 7, 8, 8,\
    \ 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}))) == (1));\n    assert(candidate((std::vector<long>({3,\
    \ 2, 8, 2}))) == (2));\n    assert(candidate((std::vector<long>({6, 7, 1, 8, 8,\
    \ 10, 5, 8, 5, 3, 10}))) == (1));\n    assert(candidate((std::vector<long>({8,\
    \ 8, 3, 6, 5, 6, 4}))) == (-1));\n    assert(candidate((std::vector<long>({6,\
    \ 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9})))\
    \ == (1));\n    assert(candidate((std::vector<long>({1, 9, 10, 1, 3}))) == (1));\n\
    \    assert(candidate((std::vector<long>({6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10,\
    \ 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}))) == (5));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({8, 8, 10, 6, 4, 3, 5, 8,\
    \ 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}))) == (4));\n    assert(candidate((std::vector<long>({2,\
    \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}))) == (2));\n    assert(candidate((std::vector<long>({1,\
    \ 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}))) == (1));\n    assert(candidate((std::vector<long>({9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}))) == (4));\n    assert(candidate((std::vector<long>({2, 6, 4,\
    \ 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}))) == (4));\n\
    \    assert(candidate((std::vector<long>({9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10,\
    \ 3, 8, 2, 6, 2, 3, 1}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({10}))) == (-1));\n    assert(candidate((std::vector<long>({9,\
    \ 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}))) == (1));\n    assert(candidate((std::vector<long>({7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 10, 10, 9, 2}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmpiqzuorge: /tmp/tmpiqzuorge.cpp:26: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 5, 5, 5, 1}))) == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the list.\n// If no such a value exist, return -1.\n// Examples:\n// search([4,\
    \ 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n// search([5,\
    \ 5, 4, 4, 4]) == -1\nlong search(std::vector<long> lst) {\n    long ans = -1;\n\
    \    long freq[1000];\n    for (long i : lst) {\n        freq[i] = freq[i] + 1;\n\
    \    }\n    for (long i : lst) {\n        if (freq[i] > ans) {\n            ans\
    \ = freq[i];\n        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate\
    \ = search;\n    assert(candidate((std::vector<long>({5, 5, 5, 5, 1}))) == (1));\n\
    \    assert(candidate((std::vector<long>({4, 1, 4, 1, 4, 4}))) == (4));\n    assert(candidate((std::vector<long>({3,\
    \ 3}))) == (-1));\n    assert(candidate((std::vector<long>({8, 8, 8, 8, 8, 8,\
    \ 8, 8}))) == (8));\n    assert(candidate((std::vector<long>({2, 3, 3, 2, 2})))\
    \ == (2));\n    assert(candidate((std::vector<long>({2, 7, 8, 8, 4, 8, 7, 3, 9,\
    \ 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}))) == (1));\n    assert(candidate((std::vector<long>({3,\
    \ 2, 8, 2}))) == (2));\n    assert(candidate((std::vector<long>({6, 7, 1, 8, 8,\
    \ 10, 5, 8, 5, 3, 10}))) == (1));\n    assert(candidate((std::vector<long>({8,\
    \ 8, 3, 6, 5, 6, 4}))) == (-1));\n    assert(candidate((std::vector<long>({6,\
    \ 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9})))\
    \ == (1));\n    assert(candidate((std::vector<long>({1, 9, 10, 1, 3}))) == (1));\n\
    \    assert(candidate((std::vector<long>({6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10,\
    \ 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}))) == (5));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({8, 8, 10, 6, 4, 3, 5, 8,\
    \ 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}))) == (4));\n    assert(candidate((std::vector<long>({2,\
    \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}))) == (2));\n    assert(candidate((std::vector<long>({1,\
    \ 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}))) == (1));\n    assert(candidate((std::vector<long>({9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}))) == (4));\n    assert(candidate((std::vector<long>({2, 6, 4,\
    \ 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}))) == (4));\n\
    \    assert(candidate((std::vector<long>({9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10,\
    \ 3, 8, 2, 6, 2, 3, 1}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({10}))) == (-1));\n    assert(candidate((std::vector<long>({9,\
    \ 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}))) == (1));\n    assert(candidate((std::vector<long>({7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 10, 10, 9, 2}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmpimquj8sx: /tmp/tmpimquj8sx.cpp:26: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 5, 5, 5, 1}))) == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the list.\n// If no such a value exist, return -1.\n// Examples:\n// search([4,\
    \ 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n// search([5,\
    \ 5, 4, 4, 4]) == -1\nlong search(std::vector<long> lst) {\n    long ans = -1;\n\
    \    long freq = 0;\n    for (long i : lst) {\n        freq += i;\n        if\
    \ (freq > ans) {\n            ans = freq;\n        }\n    }\n    return ans;\n\
    }\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5, 1}))) == (1));\n    assert(candidate((std::vector<long>({4, 1, 4, 1,\
    \ 4, 4}))) == (4));\n    assert(candidate((std::vector<long>({3, 3}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({8, 8, 8, 8, 8, 8, 8, 8}))) == (8));\n\
    \    assert(candidate((std::vector<long>({2, 3, 3, 2, 2}))) == (2));\n    assert(candidate((std::vector<long>({2,\
    \ 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 2, 8, 2}))) == (2));\n    assert(candidate((std::vector<long>({6,\
    \ 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}))) == (1));\n    assert(candidate((std::vector<long>({8,\
    \ 8, 3, 6, 5, 6, 4}))) == (-1));\n    assert(candidate((std::vector<long>({6,\
    \ 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9})))\
    \ == (1));\n    assert(candidate((std::vector<long>({1, 9, 10, 1, 3}))) == (1));\n\
    \    assert(candidate((std::vector<long>({6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10,\
    \ 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}))) == (5));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({8, 8, 10, 6, 4, 3, 5, 8,\
    \ 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}))) == (4));\n    assert(candidate((std::vector<long>({2,\
    \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}))) == (2));\n    assert(candidate((std::vector<long>({1,\
    \ 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}))) == (1));\n    assert(candidate((std::vector<long>({9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}))) == (4));\n    assert(candidate((std::vector<long>({2, 6, 4,\
    \ 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}))) == (4));\n\
    \    assert(candidate((std::vector<long>({9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10,\
    \ 3, 8, 2, 6, 2, 3, 1}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({10}))) == (-1));\n    assert(candidate((std::vector<long>({9,\
    \ 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}))) == (1));\n    assert(candidate((std::vector<long>({7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 10, 10, 9, 2}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmpzdortt1h: /tmp/tmpzdortt1h.cpp:24: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 5, 5, 5, 1}))) == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the list.\n// If no such a value exist, return -1.\n// Examples:\n// search([4,\
    \ 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n// search([5,\
    \ 5, 4, 4, 4]) == -1\nlong search(std::vector<long> lst) {\n    long ans = -1;\n\
    \    long freq = 0;\n    for(long i = 0; i < lst.size(); i++) {\n        if(lst[i]\
    \ > 0 && freq >= lst[i]) {\n            freq = freq - lst[i];\n            ans\
    \ = lst[i];\n        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate\
    \ = search;\n    assert(candidate((std::vector<long>({5, 5, 5, 5, 1}))) == (1));\n\
    \    assert(candidate((std::vector<long>({4, 1, 4, 1, 4, 4}))) == (4));\n    assert(candidate((std::vector<long>({3,\
    \ 3}))) == (-1));\n    assert(candidate((std::vector<long>({8, 8, 8, 8, 8, 8,\
    \ 8, 8}))) == (8));\n    assert(candidate((std::vector<long>({2, 3, 3, 2, 2})))\
    \ == (2));\n    assert(candidate((std::vector<long>({2, 7, 8, 8, 4, 8, 7, 3, 9,\
    \ 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}))) == (1));\n    assert(candidate((std::vector<long>({3,\
    \ 2, 8, 2}))) == (2));\n    assert(candidate((std::vector<long>({6, 7, 1, 8, 8,\
    \ 10, 5, 8, 5, 3, 10}))) == (1));\n    assert(candidate((std::vector<long>({8,\
    \ 8, 3, 6, 5, 6, 4}))) == (-1));\n    assert(candidate((std::vector<long>({6,\
    \ 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9})))\
    \ == (1));\n    assert(candidate((std::vector<long>({1, 9, 10, 1, 3}))) == (1));\n\
    \    assert(candidate((std::vector<long>({6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10,\
    \ 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}))) == (5));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({8, 8, 10, 6, 4, 3, 5, 8,\
    \ 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}))) == (4));\n    assert(candidate((std::vector<long>({2,\
    \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}))) == (2));\n    assert(candidate((std::vector<long>({1,\
    \ 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}))) == (1));\n    assert(candidate((std::vector<long>({9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}))) == (4));\n    assert(candidate((std::vector<long>({2, 6, 4,\
    \ 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}))) == (4));\n\
    \    assert(candidate((std::vector<long>({9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10,\
    \ 3, 8, 2, 6, 2, 3, 1}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({10}))) == (-1));\n    assert(candidate((std::vector<long>({9,\
    \ 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}))) == (1));\n    assert(candidate((std::vector<long>({7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 10, 10, 9, 2}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmp11i9v5j5: /tmp/tmp11i9v5j5.cpp:24: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 5, 5, 5, 1}))) == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the list.\n// If no such a value exist, return -1.\n// Examples:\n// search([4,\
    \ 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n// search([5,\
    \ 5, 4, 4, 4]) == -1\nlong search(std::vector<long> lst) {\n    long ans = -1;\n\
    \    long freq = 0;\n    for (long i : lst) {\n        freq += i;\n        if\
    \ (freq >= i) {\n            ans = i;\n            freq -= i;\n        }\n   \
    \ }\n    return ans;\n}\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5, 1}))) == (1));\n    assert(candidate((std::vector<long>({4, 1, 4, 1,\
    \ 4, 4}))) == (4));\n    assert(candidate((std::vector<long>({3, 3}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({8, 8, 8, 8, 8, 8, 8, 8}))) == (8));\n\
    \    assert(candidate((std::vector<long>({2, 3, 3, 2, 2}))) == (2));\n    assert(candidate((std::vector<long>({2,\
    \ 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 2, 8, 2}))) == (2));\n    assert(candidate((std::vector<long>({6,\
    \ 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}))) == (1));\n    assert(candidate((std::vector<long>({8,\
    \ 8, 3, 6, 5, 6, 4}))) == (-1));\n    assert(candidate((std::vector<long>({6,\
    \ 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9})))\
    \ == (1));\n    assert(candidate((std::vector<long>({1, 9, 10, 1, 3}))) == (1));\n\
    \    assert(candidate((std::vector<long>({6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10,\
    \ 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}))) == (5));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({8, 8, 10, 6, 4, 3, 5, 8,\
    \ 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}))) == (4));\n    assert(candidate((std::vector<long>({2,\
    \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}))) == (2));\n    assert(candidate((std::vector<long>({1,\
    \ 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}))) == (1));\n    assert(candidate((std::vector<long>({9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}))) == (4));\n    assert(candidate((std::vector<long>({2, 6, 4,\
    \ 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}))) == (4));\n\
    \    assert(candidate((std::vector<long>({9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10,\
    \ 3, 8, 2, 6, 2, 3, 1}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({10}))) == (-1));\n    assert(candidate((std::vector<long>({9,\
    \ 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}))) == (1));\n    assert(candidate((std::vector<long>({7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 10, 10, 9, 2}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmpk85vcr8f: /tmp/tmpk85vcr8f.cpp:27: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 3}))) == (-1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the list.\n// If no such a value exist, return -1.\n// Examples:\n// search([4,\
    \ 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n// search([5,\
    \ 5, 4, 4, 4]) == -1\nlong search(std::vector<long> lst) {\n    // Your code here\n\
    \    long ans = -1;\n    long freq = 0;\n    for (long i : lst) {\n        freq++;\n\
    \        if (freq > i) {\n            freq = i;\n            ans = i;\n      \
    \  }\n    }\n    return ans;\n}\nint main() {\n    auto candidate = search;\n\
    \    assert(candidate((std::vector<long>({5, 5, 5, 5, 1}))) == (1));\n    assert(candidate((std::vector<long>({4,\
    \ 1, 4, 1, 4, 4}))) == (4));\n    assert(candidate((std::vector<long>({3, 3})))\
    \ == (-1));\n    assert(candidate((std::vector<long>({8, 8, 8, 8, 8, 8, 8, 8})))\
    \ == (8));\n    assert(candidate((std::vector<long>({2, 3, 3, 2, 2}))) == (2));\n\
    \    assert(candidate((std::vector<long>({2, 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10,\
    \ 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}))) == (1));\n    assert(candidate((std::vector<long>({3,\
    \ 2, 8, 2}))) == (2));\n    assert(candidate((std::vector<long>({6, 7, 1, 8, 8,\
    \ 10, 5, 8, 5, 3, 10}))) == (1));\n    assert(candidate((std::vector<long>({8,\
    \ 8, 3, 6, 5, 6, 4}))) == (-1));\n    assert(candidate((std::vector<long>({6,\
    \ 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9})))\
    \ == (1));\n    assert(candidate((std::vector<long>({1, 9, 10, 1, 3}))) == (1));\n\
    \    assert(candidate((std::vector<long>({6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10,\
    \ 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}))) == (5));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({8, 8, 10, 6, 4, 3, 5, 8,\
    \ 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}))) == (4));\n    assert(candidate((std::vector<long>({2,\
    \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}))) == (2));\n    assert(candidate((std::vector<long>({1,\
    \ 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}))) == (1));\n    assert(candidate((std::vector<long>({9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}))) == (4));\n    assert(candidate((std::vector<long>({2, 6, 4,\
    \ 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}))) == (4));\n\
    \    assert(candidate((std::vector<long>({9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10,\
    \ 3, 8, 2, 6, 2, 3, 1}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({10}))) == (-1));\n    assert(candidate((std::vector<long>({9,\
    \ 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}))) == (1));\n    assert(candidate((std::vector<long>({7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 10, 10, 9, 2}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmpzcu5mq55: /tmp/tmpzcu5mq55.cpp:27: int main(): Assertion `candidate((std::vector<long>({4,\
    \ 1, 4, 1, 4, 4}))) == (4)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the list.\n// If no such a value exist, return -1.\n// Examples:\n// search([4,\
    \ 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n// search([5,\
    \ 5, 4, 4, 4]) == -1\nlong search(std::vector<long> lst) {\n    long ans = -1;\n\
    \    long freq[100];\n    for (long i : lst) {\n        freq[i] = freq[i] + 1;\n\
    \    }\n    for (long i : lst) {\n        if (freq[i] > ans) {\n            ans\
    \ = freq[i];\n        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate\
    \ = search;\n    assert(candidate((std::vector<long>({5, 5, 5, 5, 1}))) == (1));\n\
    \    assert(candidate((std::vector<long>({4, 1, 4, 1, 4, 4}))) == (4));\n    assert(candidate((std::vector<long>({3,\
    \ 3}))) == (-1));\n    assert(candidate((std::vector<long>({8, 8, 8, 8, 8, 8,\
    \ 8, 8}))) == (8));\n    assert(candidate((std::vector<long>({2, 3, 3, 2, 2})))\
    \ == (2));\n    assert(candidate((std::vector<long>({2, 7, 8, 8, 4, 8, 7, 3, 9,\
    \ 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}))) == (1));\n    assert(candidate((std::vector<long>({3,\
    \ 2, 8, 2}))) == (2));\n    assert(candidate((std::vector<long>({6, 7, 1, 8, 8,\
    \ 10, 5, 8, 5, 3, 10}))) == (1));\n    assert(candidate((std::vector<long>({8,\
    \ 8, 3, 6, 5, 6, 4}))) == (-1));\n    assert(candidate((std::vector<long>({6,\
    \ 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9})))\
    \ == (1));\n    assert(candidate((std::vector<long>({1, 9, 10, 1, 3}))) == (1));\n\
    \    assert(candidate((std::vector<long>({6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10,\
    \ 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}))) == (5));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({8, 8, 10, 6, 4, 3, 5, 8,\
    \ 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}))) == (4));\n    assert(candidate((std::vector<long>({2,\
    \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}))) == (2));\n    assert(candidate((std::vector<long>({1,\
    \ 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}))) == (1));\n    assert(candidate((std::vector<long>({9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}))) == (4));\n    assert(candidate((std::vector<long>({2, 6, 4,\
    \ 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}))) == (4));\n\
    \    assert(candidate((std::vector<long>({9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10,\
    \ 3, 8, 2, 6, 2, 3, 1}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({10}))) == (-1));\n    assert(candidate((std::vector<long>({9,\
    \ 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}))) == (1));\n    assert(candidate((std::vector<long>({7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 10, 10, 9, 2}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmpa2arwncb: /tmp/tmpa2arwncb.cpp:26: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 5, 5, 5, 1}))) == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the list.\n// If no such a value exist, return -1.\n// Examples:\n// search([4,\
    \ 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n// search([5,\
    \ 5, 4, 4, 4]) == -1\nlong search(std::vector<long> lst) {\n    long ans = -1;\n\
    \    long freq[100];\n    for (long i : lst) {\n        freq[i] = freq[i] + 1;\n\
    \    }\n    for (long i : lst) {\n        if (freq[i] >= i) {\n            ans\
    \ = i;\n            break;\n        }\n    }\n    return ans;\n}\nint main() {\n\
    \    auto candidate = search;\n    assert(candidate((std::vector<long>({5, 5,\
    \ 5, 5, 1}))) == (1));\n    assert(candidate((std::vector<long>({4, 1, 4, 1, 4,\
    \ 4}))) == (4));\n    assert(candidate((std::vector<long>({3, 3}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({8, 8, 8, 8, 8, 8, 8, 8}))) == (8));\n\
    \    assert(candidate((std::vector<long>({2, 3, 3, 2, 2}))) == (2));\n    assert(candidate((std::vector<long>({2,\
    \ 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 2, 8, 2}))) == (2));\n    assert(candidate((std::vector<long>({6,\
    \ 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}))) == (1));\n    assert(candidate((std::vector<long>({8,\
    \ 8, 3, 6, 5, 6, 4}))) == (-1));\n    assert(candidate((std::vector<long>({6,\
    \ 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9})))\
    \ == (1));\n    assert(candidate((std::vector<long>({1, 9, 10, 1, 3}))) == (1));\n\
    \    assert(candidate((std::vector<long>({6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10,\
    \ 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}))) == (5));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({8, 8, 10, 6, 4, 3, 5, 8,\
    \ 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}))) == (4));\n    assert(candidate((std::vector<long>({2,\
    \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}))) == (2));\n    assert(candidate((std::vector<long>({1,\
    \ 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}))) == (1));\n    assert(candidate((std::vector<long>({9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}))) == (4));\n    assert(candidate((std::vector<long>({2, 6, 4,\
    \ 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}))) == (4));\n\
    \    assert(candidate((std::vector<long>({9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10,\
    \ 3, 8, 2, 6, 2, 3, 1}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({10}))) == (-1));\n    assert(candidate((std::vector<long>({9,\
    \ 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}))) == (1));\n    assert(candidate((std::vector<long>({7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 10, 10, 9, 2}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmpukmoo5b3: /tmp/tmpukmoo5b3.cpp:27: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 5, 5, 5, 1}))) == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the list.\n// If no such a value exist, return -1.\n// Examples:\n// search([4,\
    \ 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n// search([5,\
    \ 5, 4, 4, 4]) == -1\nlong search(std::vector<long> lst) {\n    long ans = -1;\n\
    \    long freq[100];\n    for(long i = 0; i < lst.size(); i++) {\n        freq[lst[i]]++;\n\
    \    }\n    for(long i = 0; i < 100; i++) {\n        if(freq[i] >= lst.size())\
    \ {\n            ans = i;\n            break;\n        }\n    }\n    return ans;\n\
    }\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5, 1}))) == (1));\n    assert(candidate((std::vector<long>({4, 1, 4, 1,\
    \ 4, 4}))) == (4));\n    assert(candidate((std::vector<long>({3, 3}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({8, 8, 8, 8, 8, 8, 8, 8}))) == (8));\n\
    \    assert(candidate((std::vector<long>({2, 3, 3, 2, 2}))) == (2));\n    assert(candidate((std::vector<long>({2,\
    \ 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 2, 8, 2}))) == (2));\n    assert(candidate((std::vector<long>({6,\
    \ 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}))) == (1));\n    assert(candidate((std::vector<long>({8,\
    \ 8, 3, 6, 5, 6, 4}))) == (-1));\n    assert(candidate((std::vector<long>({6,\
    \ 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9})))\
    \ == (1));\n    assert(candidate((std::vector<long>({1, 9, 10, 1, 3}))) == (1));\n\
    \    assert(candidate((std::vector<long>({6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10,\
    \ 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}))) == (5));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({8, 8, 10, 6, 4, 3, 5, 8,\
    \ 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}))) == (4));\n    assert(candidate((std::vector<long>({2,\
    \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}))) == (2));\n    assert(candidate((std::vector<long>({1,\
    \ 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}))) == (1));\n    assert(candidate((std::vector<long>({9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}))) == (4));\n    assert(candidate((std::vector<long>({2, 6, 4,\
    \ 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}))) == (4));\n\
    \    assert(candidate((std::vector<long>({9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10,\
    \ 3, 8, 2, 6, 2, 3, 1}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({10}))) == (-1));\n    assert(candidate((std::vector<long>({9,\
    \ 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}))) == (1));\n    assert(candidate((std::vector<long>({7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 10, 10, 9, 2}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmpth1vhvxq: /tmp/tmpth1vhvxq.cpp:27: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 5, 5, 5, 1}))) == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the list.\n// If no such a value exist, return -1.\n// Examples:\n// search([4,\
    \ 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n// search([5,\
    \ 5, 4, 4, 4]) == -1\nlong search(std::vector<long> lst) {\n    long ans = -1;\n\
    \    long freq = 0;\n    for(long i : lst) {\n        freq += i;\n        if(freq\
    \ > ans) {\n            ans = freq;\n        }\n    }\n    return ans;\n}\nint\
    \ main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5, 1}))) == (1));\n    assert(candidate((std::vector<long>({4, 1, 4, 1,\
    \ 4, 4}))) == (4));\n    assert(candidate((std::vector<long>({3, 3}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({8, 8, 8, 8, 8, 8, 8, 8}))) == (8));\n\
    \    assert(candidate((std::vector<long>({2, 3, 3, 2, 2}))) == (2));\n    assert(candidate((std::vector<long>({2,\
    \ 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 2, 8, 2}))) == (2));\n    assert(candidate((std::vector<long>({6,\
    \ 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}))) == (1));\n    assert(candidate((std::vector<long>({8,\
    \ 8, 3, 6, 5, 6, 4}))) == (-1));\n    assert(candidate((std::vector<long>({6,\
    \ 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9})))\
    \ == (1));\n    assert(candidate((std::vector<long>({1, 9, 10, 1, 3}))) == (1));\n\
    \    assert(candidate((std::vector<long>({6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10,\
    \ 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}))) == (5));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({8, 8, 10, 6, 4, 3, 5, 8,\
    \ 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}))) == (4));\n    assert(candidate((std::vector<long>({2,\
    \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}))) == (2));\n    assert(candidate((std::vector<long>({1,\
    \ 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}))) == (1));\n    assert(candidate((std::vector<long>({9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}))) == (4));\n    assert(candidate((std::vector<long>({2, 6, 4,\
    \ 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}))) == (4));\n\
    \    assert(candidate((std::vector<long>({9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10,\
    \ 3, 8, 2, 6, 2, 3, 1}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({10}))) == (-1));\n    assert(candidate((std::vector<long>({9,\
    \ 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}))) == (1));\n    assert(candidate((std::vector<long>({7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 10, 10, 9, 2}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmpunfzrhnl: /tmp/tmpunfzrhnl.cpp:24: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 5, 5, 5, 1}))) == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the list.\n// If no such a value exist, return -1.\n// Examples:\n// search([4,\
    \ 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n// search([5,\
    \ 5, 4, 4, 4]) == -1\nlong search(std::vector<long> lst) {\n    long ans = -1;\n\
    \    long freq[100];\n    for (long i = 0; i < lst.size(); i++) {\n        freq[lst[i]]++;\n\
    \    }\n    for (long i = 0; i < 100; i++) {\n        if (freq[i] >= lst.size())\
    \ {\n            ans = i;\n            break;\n        }\n    }\n    return ans;\n\
    }\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5, 1}))) == (1));\n    assert(candidate((std::vector<long>({4, 1, 4, 1,\
    \ 4, 4}))) == (4));\n    assert(candidate((std::vector<long>({3, 3}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({8, 8, 8, 8, 8, 8, 8, 8}))) == (8));\n\
    \    assert(candidate((std::vector<long>({2, 3, 3, 2, 2}))) == (2));\n    assert(candidate((std::vector<long>({2,\
    \ 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 2, 8, 2}))) == (2));\n    assert(candidate((std::vector<long>({6,\
    \ 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}))) == (1));\n    assert(candidate((std::vector<long>({8,\
    \ 8, 3, 6, 5, 6, 4}))) == (-1));\n    assert(candidate((std::vector<long>({6,\
    \ 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9})))\
    \ == (1));\n    assert(candidate((std::vector<long>({1, 9, 10, 1, 3}))) == (1));\n\
    \    assert(candidate((std::vector<long>({6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10,\
    \ 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}))) == (5));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({8, 8, 10, 6, 4, 3, 5, 8,\
    \ 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}))) == (4));\n    assert(candidate((std::vector<long>({2,\
    \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}))) == (2));\n    assert(candidate((std::vector<long>({1,\
    \ 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}))) == (1));\n    assert(candidate((std::vector<long>({9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}))) == (4));\n    assert(candidate((std::vector<long>({2, 6, 4,\
    \ 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}))) == (4));\n\
    \    assert(candidate((std::vector<long>({9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10,\
    \ 3, 8, 2, 6, 2, 3, 1}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({10}))) == (-1));\n    assert(candidate((std::vector<long>({9,\
    \ 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}))) == (1));\n    assert(candidate((std::vector<long>({7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 10, 10, 9, 2}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmpeprql61d: /tmp/tmpeprql61d.cpp:27: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 5, 5, 5, 1}))) == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the list.\n// If no such a value exist, return -1.\n// Examples:\n// search([4,\
    \ 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n// search([5,\
    \ 5, 4, 4, 4]) == -1\nlong search(std::vector<long> lst) {\n    long maxVal =\
    \ -1, freq = 0;\n    for (long i : lst) {\n        freq++;\n        if (freq >\
    \ maxVal) {\n            maxVal = freq;\n        }\n    }\n    if (maxVal >= 0)\
    \ {\n        return maxVal;\n    }\n    return -1;\n}\nint main() {\n    auto\
    \ candidate = search;\n    assert(candidate((std::vector<long>({5, 5, 5, 5, 1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({4, 1, 4, 1, 4, 4}))) == (4));\n\
    \    assert(candidate((std::vector<long>({3, 3}))) == (-1));\n    assert(candidate((std::vector<long>({8,\
    \ 8, 8, 8, 8, 8, 8, 8}))) == (8));\n    assert(candidate((std::vector<long>({2,\
    \ 3, 3, 2, 2}))) == (2));\n    assert(candidate((std::vector<long>({2, 7, 8, 8,\
    \ 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}))) == (1));\n    assert(candidate((std::vector<long>({3,\
    \ 2, 8, 2}))) == (2));\n    assert(candidate((std::vector<long>({6, 7, 1, 8, 8,\
    \ 10, 5, 8, 5, 3, 10}))) == (1));\n    assert(candidate((std::vector<long>({8,\
    \ 8, 3, 6, 5, 6, 4}))) == (-1));\n    assert(candidate((std::vector<long>({6,\
    \ 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9})))\
    \ == (1));\n    assert(candidate((std::vector<long>({1, 9, 10, 1, 3}))) == (1));\n\
    \    assert(candidate((std::vector<long>({6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10,\
    \ 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}))) == (5));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({8, 8, 10, 6, 4, 3, 5, 8,\
    \ 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}))) == (4));\n    assert(candidate((std::vector<long>({2,\
    \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}))) == (2));\n    assert(candidate((std::vector<long>({1,\
    \ 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}))) == (1));\n    assert(candidate((std::vector<long>({9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}))) == (4));\n    assert(candidate((std::vector<long>({2, 6, 4,\
    \ 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}))) == (4));\n\
    \    assert(candidate((std::vector<long>({9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10,\
    \ 3, 8, 2, 6, 2, 3, 1}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({10}))) == (-1));\n    assert(candidate((std::vector<long>({9,\
    \ 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}))) == (1));\n    assert(candidate((std::vector<long>({7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 10, 10, 9, 2}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmpceomsq_6: /tmp/tmpceomsq_6.cpp:26: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 5, 5, 5, 1}))) == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the list.\n// If no such a value exist, return -1.\n// Examples:\n// search([4,\
    \ 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n// search([5,\
    \ 5, 4, 4, 4]) == -1\nlong search(std::vector<long> lst) {\n    long maxVal =\
    \ lst[0];\n    long freq = lst[0];\n    for (long i = 1; i < lst.size(); i++)\
    \ {\n        if (lst[i] > maxVal) {\n            maxVal = lst[i];\n          \
    \  freq = lst[i];\n        } else if (lst[i] == maxVal) {\n            freq++;\n\
    \        }\n    }\n    if (freq >= maxVal) {\n        return -1;\n    }\n    return\
    \ maxVal;\n}\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5, 1}))) == (1));\n    assert(candidate((std::vector<long>({4, 1, 4, 1,\
    \ 4, 4}))) == (4));\n    assert(candidate((std::vector<long>({3, 3}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({8, 8, 8, 8, 8, 8, 8, 8}))) == (8));\n\
    \    assert(candidate((std::vector<long>({2, 3, 3, 2, 2}))) == (2));\n    assert(candidate((std::vector<long>({2,\
    \ 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 2, 8, 2}))) == (2));\n    assert(candidate((std::vector<long>({6,\
    \ 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}))) == (1));\n    assert(candidate((std::vector<long>({8,\
    \ 8, 3, 6, 5, 6, 4}))) == (-1));\n    assert(candidate((std::vector<long>({6,\
    \ 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9})))\
    \ == (1));\n    assert(candidate((std::vector<long>({1, 9, 10, 1, 3}))) == (1));\n\
    \    assert(candidate((std::vector<long>({6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10,\
    \ 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}))) == (5));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({8, 8, 10, 6, 4, 3, 5, 8,\
    \ 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}))) == (4));\n    assert(candidate((std::vector<long>({2,\
    \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}))) == (2));\n    assert(candidate((std::vector<long>({1,\
    \ 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}))) == (1));\n    assert(candidate((std::vector<long>({9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}))) == (4));\n    assert(candidate((std::vector<long>({2, 6, 4,\
    \ 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}))) == (4));\n\
    \    assert(candidate((std::vector<long>({9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10,\
    \ 3, 8, 2, 6, 2, 3, 1}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({10}))) == (-1));\n    assert(candidate((std::vector<long>({9,\
    \ 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}))) == (1));\n    assert(candidate((std::vector<long>({7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 10, 10, 9, 2}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmp2kue_jdp: /tmp/tmp2kue_jdp.cpp:29: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 5, 5, 5, 1}))) == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the list.\n// If no such a value exist, return -1.\n// Examples:\n// search([4,\
    \ 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n// search([5,\
    \ 5, 4, 4, 4]) == -1\nlong search(std::vector<long> lst) {\n    long ans = -1;\n\
    \    long freq = 0;\n    for (long i : lst) {\n        freq += i;\n        if\
    \ (freq > ans) {\n            ans = freq;\n        }\n    }\n    return ans;\n\
    }\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5, 1}))) == (1));\n    assert(candidate((std::vector<long>({4, 1, 4, 1,\
    \ 4, 4}))) == (4));\n    assert(candidate((std::vector<long>({3, 3}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({8, 8, 8, 8, 8, 8, 8, 8}))) == (8));\n\
    \    assert(candidate((std::vector<long>({2, 3, 3, 2, 2}))) == (2));\n    assert(candidate((std::vector<long>({2,\
    \ 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 2, 8, 2}))) == (2));\n    assert(candidate((std::vector<long>({6,\
    \ 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}))) == (1));\n    assert(candidate((std::vector<long>({8,\
    \ 8, 3, 6, 5, 6, 4}))) == (-1));\n    assert(candidate((std::vector<long>({6,\
    \ 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9})))\
    \ == (1));\n    assert(candidate((std::vector<long>({1, 9, 10, 1, 3}))) == (1));\n\
    \    assert(candidate((std::vector<long>({6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10,\
    \ 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}))) == (5));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({8, 8, 10, 6, 4, 3, 5, 8,\
    \ 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}))) == (4));\n    assert(candidate((std::vector<long>({2,\
    \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}))) == (2));\n    assert(candidate((std::vector<long>({1,\
    \ 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}))) == (1));\n    assert(candidate((std::vector<long>({9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}))) == (4));\n    assert(candidate((std::vector<long>({2, 6, 4,\
    \ 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}))) == (4));\n\
    \    assert(candidate((std::vector<long>({9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10,\
    \ 3, 8, 2, 6, 2, 3, 1}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({10}))) == (-1));\n    assert(candidate((std::vector<long>({9,\
    \ 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}))) == (1));\n    assert(candidate((std::vector<long>({7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 10, 10, 9, 2}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmpkxmdshqc: /tmp/tmpkxmdshqc.cpp:24: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 5, 5, 5, 1}))) == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the list.\n// If no such a value exist, return -1.\n// Examples:\n// search([4,\
    \ 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n// search([5,\
    \ 5, 4, 4, 4]) == -1\nlong search(std::vector<long> lst) {\n    long ans = -1;\n\
    \    long freq = 0;\n    for (long i : lst) {\n        freq += i;\n        if\
    \ (freq >= i) {\n            ans = i;\n            break;\n        }\n    }\n\
    \    return ans;\n}\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5, 1}))) == (1));\n    assert(candidate((std::vector<long>({4, 1, 4, 1,\
    \ 4, 4}))) == (4));\n    assert(candidate((std::vector<long>({3, 3}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({8, 8, 8, 8, 8, 8, 8, 8}))) == (8));\n\
    \    assert(candidate((std::vector<long>({2, 3, 3, 2, 2}))) == (2));\n    assert(candidate((std::vector<long>({2,\
    \ 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 2, 8, 2}))) == (2));\n    assert(candidate((std::vector<long>({6,\
    \ 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}))) == (1));\n    assert(candidate((std::vector<long>({8,\
    \ 8, 3, 6, 5, 6, 4}))) == (-1));\n    assert(candidate((std::vector<long>({6,\
    \ 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9})))\
    \ == (1));\n    assert(candidate((std::vector<long>({1, 9, 10, 1, 3}))) == (1));\n\
    \    assert(candidate((std::vector<long>({6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10,\
    \ 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}))) == (5));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({8, 8, 10, 6, 4, 3, 5, 8,\
    \ 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}))) == (4));\n    assert(candidate((std::vector<long>({2,\
    \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}))) == (2));\n    assert(candidate((std::vector<long>({1,\
    \ 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}))) == (1));\n    assert(candidate((std::vector<long>({9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}))) == (4));\n    assert(candidate((std::vector<long>({2, 6, 4,\
    \ 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}))) == (4));\n\
    \    assert(candidate((std::vector<long>({9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10,\
    \ 3, 8, 2, 6, 2, 3, 1}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({10}))) == (-1));\n    assert(candidate((std::vector<long>({9,\
    \ 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}))) == (1));\n    assert(candidate((std::vector<long>({7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 10, 10, 9, 2}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmpw6gnuan4: /tmp/tmpw6gnuan4.cpp:25: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 5, 5, 5, 1}))) == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the list.\n// If no such a value exist, return -1.\n// Examples:\n// search([4,\
    \ 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n// search([5,\
    \ 5, 4, 4, 4]) == -1\nlong search(std::vector<long> lst) {\n    long ans = -1;\n\
    \    long freq[100];\n    for (long i = 0; i < lst.size(); i++) {\n        freq[lst[i]]++;\n\
    \    }\n    for (long i = 0; i < 100; i++) {\n        if (freq[i] >= lst.size())\
    \ {\n            return -1;\n        }\n    }\n    for (long i = 0; i < lst.size();\
    \ i++) {\n        if (freq[lst[i]] >= lst.size()) {\n            ans = lst[i];\n\
    \        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate = search;\n\
    \    assert(candidate((std::vector<long>({5, 5, 5, 5, 1}))) == (1));\n    assert(candidate((std::vector<long>({4,\
    \ 1, 4, 1, 4, 4}))) == (4));\n    assert(candidate((std::vector<long>({3, 3})))\
    \ == (-1));\n    assert(candidate((std::vector<long>({8, 8, 8, 8, 8, 8, 8, 8})))\
    \ == (8));\n    assert(candidate((std::vector<long>({2, 3, 3, 2, 2}))) == (2));\n\
    \    assert(candidate((std::vector<long>({2, 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10,\
    \ 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}))) == (1));\n    assert(candidate((std::vector<long>({3,\
    \ 2, 8, 2}))) == (2));\n    assert(candidate((std::vector<long>({6, 7, 1, 8, 8,\
    \ 10, 5, 8, 5, 3, 10}))) == (1));\n    assert(candidate((std::vector<long>({8,\
    \ 8, 3, 6, 5, 6, 4}))) == (-1));\n    assert(candidate((std::vector<long>({6,\
    \ 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9})))\
    \ == (1));\n    assert(candidate((std::vector<long>({1, 9, 10, 1, 3}))) == (1));\n\
    \    assert(candidate((std::vector<long>({6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10,\
    \ 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}))) == (5));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({8, 8, 10, 6, 4, 3, 5, 8,\
    \ 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}))) == (4));\n    assert(candidate((std::vector<long>({2,\
    \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}))) == (2));\n    assert(candidate((std::vector<long>({1,\
    \ 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}))) == (1));\n    assert(candidate((std::vector<long>({9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}))) == (4));\n    assert(candidate((std::vector<long>({2, 6, 4,\
    \ 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}))) == (4));\n\
    \    assert(candidate((std::vector<long>({9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10,\
    \ 3, 8, 2, 6, 2, 3, 1}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({10}))) == (-1));\n    assert(candidate((std::vector<long>({9,\
    \ 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}))) == (1));\n    assert(candidate((std::vector<long>({7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 10, 10, 9, 2}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmpa2nc9h9d: /tmp/tmpa2nc9h9d.cpp:31: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 5, 5, 5, 1}))) == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the list.\n// If no such a value exist, return -1.\n// Examples:\n// search([4,\
    \ 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n// search([5,\
    \ 5, 4, 4, 4]) == -1\nlong search(std::vector<long> lst) {\n    long ans = -1;\n\
    \    long freq = 0;\n    for (long i : lst) {\n        freq += i;\n        if\
    \ (freq > ans) {\n            ans = freq;\n        }\n    }\n    return ans;\n\
    }\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5, 1}))) == (1));\n    assert(candidate((std::vector<long>({4, 1, 4, 1,\
    \ 4, 4}))) == (4));\n    assert(candidate((std::vector<long>({3, 3}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({8, 8, 8, 8, 8, 8, 8, 8}))) == (8));\n\
    \    assert(candidate((std::vector<long>({2, 3, 3, 2, 2}))) == (2));\n    assert(candidate((std::vector<long>({2,\
    \ 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 2, 8, 2}))) == (2));\n    assert(candidate((std::vector<long>({6,\
    \ 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}))) == (1));\n    assert(candidate((std::vector<long>({8,\
    \ 8, 3, 6, 5, 6, 4}))) == (-1));\n    assert(candidate((std::vector<long>({6,\
    \ 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9})))\
    \ == (1));\n    assert(candidate((std::vector<long>({1, 9, 10, 1, 3}))) == (1));\n\
    \    assert(candidate((std::vector<long>({6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10,\
    \ 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}))) == (5));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({8, 8, 10, 6, 4, 3, 5, 8,\
    \ 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}))) == (4));\n    assert(candidate((std::vector<long>({2,\
    \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}))) == (2));\n    assert(candidate((std::vector<long>({1,\
    \ 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}))) == (1));\n    assert(candidate((std::vector<long>({9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}))) == (4));\n    assert(candidate((std::vector<long>({2, 6, 4,\
    \ 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}))) == (4));\n\
    \    assert(candidate((std::vector<long>({9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10,\
    \ 3, 8, 2, 6, 2, 3, 1}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({10}))) == (-1));\n    assert(candidate((std::vector<long>({9,\
    \ 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}))) == (1));\n    assert(candidate((std::vector<long>({7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 10, 10, 9, 2}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmpltg8egf4: /tmp/tmpltg8egf4.cpp:24: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 5, 5, 5, 1}))) == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the list.\n// If no such a value exist, return -1.\n// Examples:\n// search([4,\
    \ 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n// search([5,\
    \ 5, 4, 4, 4]) == -1\nlong search(std::vector<long> lst) {\n    long ans = -1;\n\
    \    long freq[100] = {0};\n    for (long i : lst) {\n        freq[i]++;\n   \
    \ }\n    for (long i : lst) {\n        if (freq[i] >= i) {\n            ans =\
    \ i;\n            break;\n        }\n    }\n    return ans;\n}\nint main() {\n\
    \    auto candidate = search;\n    assert(candidate((std::vector<long>({5, 5,\
    \ 5, 5, 1}))) == (1));\n    assert(candidate((std::vector<long>({4, 1, 4, 1, 4,\
    \ 4}))) == (4));\n    assert(candidate((std::vector<long>({3, 3}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({8, 8, 8, 8, 8, 8, 8, 8}))) == (8));\n\
    \    assert(candidate((std::vector<long>({2, 3, 3, 2, 2}))) == (2));\n    assert(candidate((std::vector<long>({2,\
    \ 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 2, 8, 2}))) == (2));\n    assert(candidate((std::vector<long>({6,\
    \ 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}))) == (1));\n    assert(candidate((std::vector<long>({8,\
    \ 8, 3, 6, 5, 6, 4}))) == (-1));\n    assert(candidate((std::vector<long>({6,\
    \ 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9})))\
    \ == (1));\n    assert(candidate((std::vector<long>({1, 9, 10, 1, 3}))) == (1));\n\
    \    assert(candidate((std::vector<long>({6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10,\
    \ 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}))) == (5));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({8, 8, 10, 6, 4, 3, 5, 8,\
    \ 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}))) == (4));\n    assert(candidate((std::vector<long>({2,\
    \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}))) == (2));\n    assert(candidate((std::vector<long>({1,\
    \ 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}))) == (1));\n    assert(candidate((std::vector<long>({9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}))) == (4));\n    assert(candidate((std::vector<long>({2, 6, 4,\
    \ 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}))) == (4));\n\
    \    assert(candidate((std::vector<long>({9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10,\
    \ 3, 8, 2, 6, 2, 3, 1}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({10}))) == (-1));\n    assert(candidate((std::vector<long>({9,\
    \ 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}))) == (1));\n    assert(candidate((std::vector<long>({7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 10, 10, 9, 2}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmprk75yo3i: /tmp/tmprk75yo3i.cpp:43: int main(): Assertion `candidate((std::vector<long>({9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}))) == (4)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the list.\n// If no such a value exist, return -1.\n// Examples:\n// search([4,\
    \ 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n// search([5,\
    \ 5, 4, 4, 4]) == -1\nlong search(std::vector<long> lst) {\n    long ans = -1;\n\
    \    long freq[10000];\n    for (long i : lst) {\n        freq[i] = freq[i] +\
    \ 1;\n    }\n    for (long i : lst) {\n        if (freq[i] >= i) {\n         \
    \   ans = i;\n            break;\n        }\n    }\n    return ans;\n}\nint main()\
    \ {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5, 1}))) == (1));\n    assert(candidate((std::vector<long>({4, 1, 4, 1,\
    \ 4, 4}))) == (4));\n    assert(candidate((std::vector<long>({3, 3}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({8, 8, 8, 8, 8, 8, 8, 8}))) == (8));\n\
    \    assert(candidate((std::vector<long>({2, 3, 3, 2, 2}))) == (2));\n    assert(candidate((std::vector<long>({2,\
    \ 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 2, 8, 2}))) == (2));\n    assert(candidate((std::vector<long>({6,\
    \ 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}))) == (1));\n    assert(candidate((std::vector<long>({8,\
    \ 8, 3, 6, 5, 6, 4}))) == (-1));\n    assert(candidate((std::vector<long>({6,\
    \ 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9})))\
    \ == (1));\n    assert(candidate((std::vector<long>({1, 9, 10, 1, 3}))) == (1));\n\
    \    assert(candidate((std::vector<long>({6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10,\
    \ 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}))) == (5));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({8, 8, 10, 6, 4, 3, 5, 8,\
    \ 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}))) == (4));\n    assert(candidate((std::vector<long>({2,\
    \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}))) == (2));\n    assert(candidate((std::vector<long>({1,\
    \ 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}))) == (1));\n    assert(candidate((std::vector<long>({9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}))) == (4));\n    assert(candidate((std::vector<long>({2, 6, 4,\
    \ 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}))) == (4));\n\
    \    assert(candidate((std::vector<long>({9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10,\
    \ 3, 8, 2, 6, 2, 3, 1}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({10}))) == (-1));\n    assert(candidate((std::vector<long>({9,\
    \ 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}))) == (1));\n    assert(candidate((std::vector<long>({7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 10, 10, 9, 2}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmpn7acqse_: /tmp/tmpn7acqse_.cpp:32: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}))) == (1)'\
    \ failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the list.\n// If no such a value exist, return -1.\n// Examples:\n// search([4,\
    \ 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n// search([5,\
    \ 5, 4, 4, 4]) == -1\nlong search(std::vector<long> lst) {\n    long ans = -1;\n\
    \    long freq[1000];\n    for (long i : lst) {\n        freq[i] = freq[i] + 1;\n\
    \    }\n    for (long i : lst) {\n        if (freq[i] >= i) {\n            ans\
    \ = i;\n            break;\n        }\n    }\n    return ans;\n}\nint main() {\n\
    \    auto candidate = search;\n    assert(candidate((std::vector<long>({5, 5,\
    \ 5, 5, 1}))) == (1));\n    assert(candidate((std::vector<long>({4, 1, 4, 1, 4,\
    \ 4}))) == (4));\n    assert(candidate((std::vector<long>({3, 3}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({8, 8, 8, 8, 8, 8, 8, 8}))) == (8));\n\
    \    assert(candidate((std::vector<long>({2, 3, 3, 2, 2}))) == (2));\n    assert(candidate((std::vector<long>({2,\
    \ 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 2, 8, 2}))) == (2));\n    assert(candidate((std::vector<long>({6,\
    \ 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}))) == (1));\n    assert(candidate((std::vector<long>({8,\
    \ 8, 3, 6, 5, 6, 4}))) == (-1));\n    assert(candidate((std::vector<long>({6,\
    \ 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9})))\
    \ == (1));\n    assert(candidate((std::vector<long>({1, 9, 10, 1, 3}))) == (1));\n\
    \    assert(candidate((std::vector<long>({6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10,\
    \ 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}))) == (5));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({8, 8, 10, 6, 4, 3, 5, 8,\
    \ 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}))) == (4));\n    assert(candidate((std::vector<long>({2,\
    \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}))) == (2));\n    assert(candidate((std::vector<long>({1,\
    \ 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}))) == (1));\n    assert(candidate((std::vector<long>({9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}))) == (4));\n    assert(candidate((std::vector<long>({2, 6, 4,\
    \ 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}))) == (4));\n\
    \    assert(candidate((std::vector<long>({9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10,\
    \ 3, 8, 2, 6, 2, 3, 1}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({10}))) == (-1));\n    assert(candidate((std::vector<long>({9,\
    \ 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}))) == (1));\n    assert(candidate((std::vector<long>({7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 10, 10, 9, 2}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmpkdbn9odd: /tmp/tmpkdbn9odd.cpp:32: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}))) == (1)'\
    \ failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the list.\n// If no such a value exist, return -1.\n// Examples:\n// search([4,\
    \ 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n// search([5,\
    \ 5, 4, 4, 4]) == -1\nlong search(std::vector<long> lst) {\n    long ans = -1;\n\
    \    long freq = 0;\n    for(long i : lst) {\n        freq++;\n        if(freq\
    \ > i) {\n            freq = i;\n            ans = i;\n        }\n    }\n    return\
    \ ans;\n}\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5, 1}))) == (1));\n    assert(candidate((std::vector<long>({4, 1, 4, 1,\
    \ 4, 4}))) == (4));\n    assert(candidate((std::vector<long>({3, 3}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({8, 8, 8, 8, 8, 8, 8, 8}))) == (8));\n\
    \    assert(candidate((std::vector<long>({2, 3, 3, 2, 2}))) == (2));\n    assert(candidate((std::vector<long>({2,\
    \ 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 2, 8, 2}))) == (2));\n    assert(candidate((std::vector<long>({6,\
    \ 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}))) == (1));\n    assert(candidate((std::vector<long>({8,\
    \ 8, 3, 6, 5, 6, 4}))) == (-1));\n    assert(candidate((std::vector<long>({6,\
    \ 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9})))\
    \ == (1));\n    assert(candidate((std::vector<long>({1, 9, 10, 1, 3}))) == (1));\n\
    \    assert(candidate((std::vector<long>({6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10,\
    \ 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}))) == (5));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({8, 8, 10, 6, 4, 3, 5, 8,\
    \ 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}))) == (4));\n    assert(candidate((std::vector<long>({2,\
    \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}))) == (2));\n    assert(candidate((std::vector<long>({1,\
    \ 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}))) == (1));\n    assert(candidate((std::vector<long>({9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}))) == (4));\n    assert(candidate((std::vector<long>({2, 6, 4,\
    \ 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}))) == (4));\n\
    \    assert(candidate((std::vector<long>({9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10,\
    \ 3, 8, 2, 6, 2, 3, 1}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({10}))) == (-1));\n    assert(candidate((std::vector<long>({9,\
    \ 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}))) == (1));\n    assert(candidate((std::vector<long>({7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 10, 10, 9, 2}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmpc5nhkm7p: /tmp/tmpc5nhkm7p.cpp:26: int main(): Assertion `candidate((std::vector<long>({4,\
    \ 1, 4, 1, 4, 4}))) == (4)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the list.\n// If no such a value exist, return -1.\n// Examples:\n// search([4,\
    \ 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n// search([5,\
    \ 5, 4, 4, 4]) == -1\nlong search(std::vector<long> lst) {\n    long ans = -1;\n\
    \    long freq = 0;\n    for(long i : lst) {\n        freq++;\n        if(freq\
    \ >= i) {\n            freq -= i;\n            ans = i;\n        }\n    }\n  \
    \  return ans;\n}\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5, 1}))) == (1));\n    assert(candidate((std::vector<long>({4, 1, 4, 1,\
    \ 4, 4}))) == (4));\n    assert(candidate((std::vector<long>({3, 3}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({8, 8, 8, 8, 8, 8, 8, 8}))) == (8));\n\
    \    assert(candidate((std::vector<long>({2, 3, 3, 2, 2}))) == (2));\n    assert(candidate((std::vector<long>({2,\
    \ 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 2, 8, 2}))) == (2));\n    assert(candidate((std::vector<long>({6,\
    \ 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}))) == (1));\n    assert(candidate((std::vector<long>({8,\
    \ 8, 3, 6, 5, 6, 4}))) == (-1));\n    assert(candidate((std::vector<long>({6,\
    \ 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9})))\
    \ == (1));\n    assert(candidate((std::vector<long>({1, 9, 10, 1, 3}))) == (1));\n\
    \    assert(candidate((std::vector<long>({6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10,\
    \ 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}))) == (5));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({8, 8, 10, 6, 4, 3, 5, 8,\
    \ 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}))) == (4));\n    assert(candidate((std::vector<long>({2,\
    \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}))) == (2));\n    assert(candidate((std::vector<long>({1,\
    \ 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}))) == (1));\n    assert(candidate((std::vector<long>({9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}))) == (4));\n    assert(candidate((std::vector<long>({2, 6, 4,\
    \ 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}))) == (4));\n\
    \    assert(candidate((std::vector<long>({9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10,\
    \ 3, 8, 2, 6, 2, 3, 1}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({10}))) == (-1));\n    assert(candidate((std::vector<long>({9,\
    \ 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}))) == (1));\n    assert(candidate((std::vector<long>({7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 10, 10, 9, 2}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmpuhirv1_p: /tmp/tmpuhirv1_p.cpp:32: int main(): Assertion `candidate((std::vector<long>({6,\
    \ 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}))) == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the list.\n// If no such a value exist, return -1.\n// Examples:\n// search([4,\
    \ 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n// search([5,\
    \ 5, 4, 4, 4]) == -1\nlong search(std::vector<long> lst) {\n    // Your code here\n\
    \    long maxVal = lst[0];\n    long freq = lst[0];\n    for (long i = 1; i <\
    \ lst.size(); i++) {\n        if (lst[i] > maxVal) {\n            maxVal = lst[i];\n\
    \            freq = lst[i];\n        } else if (lst[i] == maxVal) {\n        \
    \    freq++;\n        }\n    }\n    if (freq >= maxVal) {\n        return -1;\n\
    \    } else {\n        return maxVal;\n    }\n}\nint main() {\n    auto candidate\
    \ = search;\n    assert(candidate((std::vector<long>({5, 5, 5, 5, 1}))) == (1));\n\
    \    assert(candidate((std::vector<long>({4, 1, 4, 1, 4, 4}))) == (4));\n    assert(candidate((std::vector<long>({3,\
    \ 3}))) == (-1));\n    assert(candidate((std::vector<long>({8, 8, 8, 8, 8, 8,\
    \ 8, 8}))) == (8));\n    assert(candidate((std::vector<long>({2, 3, 3, 2, 2})))\
    \ == (2));\n    assert(candidate((std::vector<long>({2, 7, 8, 8, 4, 8, 7, 3, 9,\
    \ 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}))) == (1));\n    assert(candidate((std::vector<long>({3,\
    \ 2, 8, 2}))) == (2));\n    assert(candidate((std::vector<long>({6, 7, 1, 8, 8,\
    \ 10, 5, 8, 5, 3, 10}))) == (1));\n    assert(candidate((std::vector<long>({8,\
    \ 8, 3, 6, 5, 6, 4}))) == (-1));\n    assert(candidate((std::vector<long>({6,\
    \ 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9})))\
    \ == (1));\n    assert(candidate((std::vector<long>({1, 9, 10, 1, 3}))) == (1));\n\
    \    assert(candidate((std::vector<long>({6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10,\
    \ 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}))) == (5));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({8, 8, 10, 6, 4, 3, 5, 8,\
    \ 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}))) == (4));\n    assert(candidate((std::vector<long>({2,\
    \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}))) == (2));\n    assert(candidate((std::vector<long>({1,\
    \ 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}))) == (1));\n    assert(candidate((std::vector<long>({9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}))) == (4));\n    assert(candidate((std::vector<long>({2, 6, 4,\
    \ 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}))) == (4));\n\
    \    assert(candidate((std::vector<long>({9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10,\
    \ 3, 8, 2, 6, 2, 3, 1}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({10}))) == (-1));\n    assert(candidate((std::vector<long>({9,\
    \ 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}))) == (1));\n    assert(candidate((std::vector<long>({7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 10, 10, 9, 2}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmpd7jy1p6r: /tmp/tmpd7jy1p6r.cpp:31: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 5, 5, 5, 1}))) == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the list.\n// If no such a value exist, return -1.\n// Examples:\n// search([4,\
    \ 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n// search([5,\
    \ 5, 4, 4, 4]) == -1\nlong search(std::vector<long> lst) {\n    long ans = -1;\n\
    \    long freq[100] = {0};\n    for (long i : lst) {\n        freq[i]++;\n   \
    \ }\n    for (long i : lst) {\n        if (freq[i] > ans) {\n            ans =\
    \ freq[i];\n        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate\
    \ = search;\n    assert(candidate((std::vector<long>({5, 5, 5, 5, 1}))) == (1));\n\
    \    assert(candidate((std::vector<long>({4, 1, 4, 1, 4, 4}))) == (4));\n    assert(candidate((std::vector<long>({3,\
    \ 3}))) == (-1));\n    assert(candidate((std::vector<long>({8, 8, 8, 8, 8, 8,\
    \ 8, 8}))) == (8));\n    assert(candidate((std::vector<long>({2, 3, 3, 2, 2})))\
    \ == (2));\n    assert(candidate((std::vector<long>({2, 7, 8, 8, 4, 8, 7, 3, 9,\
    \ 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}))) == (1));\n    assert(candidate((std::vector<long>({3,\
    \ 2, 8, 2}))) == (2));\n    assert(candidate((std::vector<long>({6, 7, 1, 8, 8,\
    \ 10, 5, 8, 5, 3, 10}))) == (1));\n    assert(candidate((std::vector<long>({8,\
    \ 8, 3, 6, 5, 6, 4}))) == (-1));\n    assert(candidate((std::vector<long>({6,\
    \ 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9})))\
    \ == (1));\n    assert(candidate((std::vector<long>({1, 9, 10, 1, 3}))) == (1));\n\
    \    assert(candidate((std::vector<long>({6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10,\
    \ 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}))) == (5));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({8, 8, 10, 6, 4, 3, 5, 8,\
    \ 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}))) == (4));\n    assert(candidate((std::vector<long>({2,\
    \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}))) == (2));\n    assert(candidate((std::vector<long>({1,\
    \ 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}))) == (1));\n    assert(candidate((std::vector<long>({9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}))) == (4));\n    assert(candidate((std::vector<long>({2, 6, 4,\
    \ 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}))) == (4));\n\
    \    assert(candidate((std::vector<long>({9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10,\
    \ 3, 8, 2, 6, 2, 3, 1}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({10}))) == (-1));\n    assert(candidate((std::vector<long>({9,\
    \ 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}))) == (1));\n    assert(candidate((std::vector<long>({7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 10, 10, 9, 2}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmpfkz3tfon: /tmp/tmpfkz3tfon.cpp:26: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 5, 5, 5, 1}))) == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the list.\n// If no such a value exist, return -1.\n// Examples:\n// search([4,\
    \ 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n// search([5,\
    \ 5, 4, 4, 4]) == -1\nlong search(std::vector<long> lst) {\n    long ans = -1;\n\
    \    long freq = 0;\n    for (long i : lst) {\n        freq += i;\n        if\
    \ (freq > ans) {\n            ans = freq;\n        }\n    }\n    return ans;\n\
    }\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5, 1}))) == (1));\n    assert(candidate((std::vector<long>({4, 1, 4, 1,\
    \ 4, 4}))) == (4));\n    assert(candidate((std::vector<long>({3, 3}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({8, 8, 8, 8, 8, 8, 8, 8}))) == (8));\n\
    \    assert(candidate((std::vector<long>({2, 3, 3, 2, 2}))) == (2));\n    assert(candidate((std::vector<long>({2,\
    \ 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 2, 8, 2}))) == (2));\n    assert(candidate((std::vector<long>({6,\
    \ 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}))) == (1));\n    assert(candidate((std::vector<long>({8,\
    \ 8, 3, 6, 5, 6, 4}))) == (-1));\n    assert(candidate((std::vector<long>({6,\
    \ 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9})))\
    \ == (1));\n    assert(candidate((std::vector<long>({1, 9, 10, 1, 3}))) == (1));\n\
    \    assert(candidate((std::vector<long>({6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10,\
    \ 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}))) == (5));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({8, 8, 10, 6, 4, 3, 5, 8,\
    \ 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}))) == (4));\n    assert(candidate((std::vector<long>({2,\
    \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}))) == (2));\n    assert(candidate((std::vector<long>({1,\
    \ 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}))) == (1));\n    assert(candidate((std::vector<long>({9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}))) == (4));\n    assert(candidate((std::vector<long>({2, 6, 4,\
    \ 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}))) == (4));\n\
    \    assert(candidate((std::vector<long>({9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10,\
    \ 3, 8, 2, 6, 2, 3, 1}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({10}))) == (-1));\n    assert(candidate((std::vector<long>({9,\
    \ 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}))) == (1));\n    assert(candidate((std::vector<long>({7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 10, 10, 9, 2}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmpmwayy611: /tmp/tmpmwayy611.cpp:24: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 5, 5, 5, 1}))) == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the list.\n// If no such a value exist, return -1.\n// Examples:\n// search([4,\
    \ 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n// search([5,\
    \ 5, 4, 4, 4]) == -1\nlong search(std::vector<long> lst) {\n    long ans = -1;\n\
    \    long freq[100] = {0};\n    for (long i : lst) {\n        freq[i]++;\n   \
    \ }\n    for (long i = 1; i < 100; i++) {\n        if (freq[i] >= i) {\n     \
    \       ans = i;\n            break;\n        }\n    }\n    return ans;\n}\nint\
    \ main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5, 1}))) == (1));\n    assert(candidate((std::vector<long>({4, 1, 4, 1,\
    \ 4, 4}))) == (4));\n    assert(candidate((std::vector<long>({3, 3}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({8, 8, 8, 8, 8, 8, 8, 8}))) == (8));\n\
    \    assert(candidate((std::vector<long>({2, 3, 3, 2, 2}))) == (2));\n    assert(candidate((std::vector<long>({2,\
    \ 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 2, 8, 2}))) == (2));\n    assert(candidate((std::vector<long>({6,\
    \ 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}))) == (1));\n    assert(candidate((std::vector<long>({8,\
    \ 8, 3, 6, 5, 6, 4}))) == (-1));\n    assert(candidate((std::vector<long>({6,\
    \ 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9})))\
    \ == (1));\n    assert(candidate((std::vector<long>({1, 9, 10, 1, 3}))) == (1));\n\
    \    assert(candidate((std::vector<long>({6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10,\
    \ 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}))) == (5));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({8, 8, 10, 6, 4, 3, 5, 8,\
    \ 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}))) == (4));\n    assert(candidate((std::vector<long>({2,\
    \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}))) == (2));\n    assert(candidate((std::vector<long>({1,\
    \ 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}))) == (1));\n    assert(candidate((std::vector<long>({9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}))) == (4));\n    assert(candidate((std::vector<long>({2, 6, 4,\
    \ 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}))) == (4));\n\
    \    assert(candidate((std::vector<long>({9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10,\
    \ 3, 8, 2, 6, 2, 3, 1}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({10}))) == (-1));\n    assert(candidate((std::vector<long>({9,\
    \ 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}))) == (1));\n    assert(candidate((std::vector<long>({7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 10, 10, 9, 2}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmp8gcli4qn: /tmp/tmp8gcli4qn.cpp:28: int main(): Assertion `candidate((std::vector<long>({4,\
    \ 1, 4, 1, 4, 4}))) == (4)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the list.\n// If no such a value exist, return -1.\n// Examples:\n// search([4,\
    \ 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n// search([5,\
    \ 5, 4, 4, 4]) == -1\nlong search(std::vector<long> lst) {\n    long ans = -1;\n\
    \    long freq = 0;\n    for (long i : lst) {\n        freq++;\n        if (freq\
    \ >= i) {\n            ans = i;\n            break;\n        }\n    }\n    return\
    \ ans;\n}\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5, 1}))) == (1));\n    assert(candidate((std::vector<long>({4, 1, 4, 1,\
    \ 4, 4}))) == (4));\n    assert(candidate((std::vector<long>({3, 3}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({8, 8, 8, 8, 8, 8, 8, 8}))) == (8));\n\
    \    assert(candidate((std::vector<long>({2, 3, 3, 2, 2}))) == (2));\n    assert(candidate((std::vector<long>({2,\
    \ 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 2, 8, 2}))) == (2));\n    assert(candidate((std::vector<long>({6,\
    \ 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}))) == (1));\n    assert(candidate((std::vector<long>({8,\
    \ 8, 3, 6, 5, 6, 4}))) == (-1));\n    assert(candidate((std::vector<long>({6,\
    \ 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9})))\
    \ == (1));\n    assert(candidate((std::vector<long>({1, 9, 10, 1, 3}))) == (1));\n\
    \    assert(candidate((std::vector<long>({6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10,\
    \ 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}))) == (5));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({8, 8, 10, 6, 4, 3, 5, 8,\
    \ 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}))) == (4));\n    assert(candidate((std::vector<long>({2,\
    \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}))) == (2));\n    assert(candidate((std::vector<long>({1,\
    \ 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}))) == (1));\n    assert(candidate((std::vector<long>({9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}))) == (4));\n    assert(candidate((std::vector<long>({2, 6, 4,\
    \ 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}))) == (4));\n\
    \    assert(candidate((std::vector<long>({9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10,\
    \ 3, 8, 2, 6, 2, 3, 1}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({10}))) == (-1));\n    assert(candidate((std::vector<long>({9,\
    \ 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}))) == (1));\n    assert(candidate((std::vector<long>({7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 10, 10, 9, 2}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmp8jw55p04: /tmp/tmp8jw55p04.cpp:26: int main(): Assertion `candidate((std::vector<long>({4,\
    \ 1, 4, 1, 4, 4}))) == (4)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the list.\n// If no such a value exist, return -1.\n// Examples:\n// search([4,\
    \ 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n// search([5,\
    \ 5, 4, 4, 4]) == -1\nlong search(std::vector<long> lst) {\n    long ans = -1;\n\
    \    long freq[1000];\n    for (long i : lst) {\n        freq[i] = freq[i] + 1;\n\
    \    }\n    for (long i : lst) {\n        if (freq[i] >= i) {\n            ans\
    \ = i;\n            break;\n        }\n    }\n    return ans;\n}\nint main() {\n\
    \    auto candidate = search;\n    assert(candidate((std::vector<long>({5, 5,\
    \ 5, 5, 1}))) == (1));\n    assert(candidate((std::vector<long>({4, 1, 4, 1, 4,\
    \ 4}))) == (4));\n    assert(candidate((std::vector<long>({3, 3}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({8, 8, 8, 8, 8, 8, 8, 8}))) == (8));\n\
    \    assert(candidate((std::vector<long>({2, 3, 3, 2, 2}))) == (2));\n    assert(candidate((std::vector<long>({2,\
    \ 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 2, 8, 2}))) == (2));\n    assert(candidate((std::vector<long>({6,\
    \ 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}))) == (1));\n    assert(candidate((std::vector<long>({8,\
    \ 8, 3, 6, 5, 6, 4}))) == (-1));\n    assert(candidate((std::vector<long>({6,\
    \ 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9})))\
    \ == (1));\n    assert(candidate((std::vector<long>({1, 9, 10, 1, 3}))) == (1));\n\
    \    assert(candidate((std::vector<long>({6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10,\
    \ 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}))) == (5));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({8, 8, 10, 6, 4, 3, 5, 8,\
    \ 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}))) == (4));\n    assert(candidate((std::vector<long>({2,\
    \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}))) == (2));\n    assert(candidate((std::vector<long>({1,\
    \ 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}))) == (1));\n    assert(candidate((std::vector<long>({9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}))) == (4));\n    assert(candidate((std::vector<long>({2, 6, 4,\
    \ 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}))) == (4));\n\
    \    assert(candidate((std::vector<long>({9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10,\
    \ 3, 8, 2, 6, 2, 3, 1}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({10}))) == (-1));\n    assert(candidate((std::vector<long>({9,\
    \ 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}))) == (1));\n    assert(candidate((std::vector<long>({7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 10, 10, 9, 2}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmpyl3tuiat: /tmp/tmpyl3tuiat.cpp:32: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}))) == (1)'\
    \ failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the list.\n// If no such a value exist, return -1.\n// Examples:\n// search([4,\
    \ 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n// search([5,\
    \ 5, 4, 4, 4]) == -1\nlong search(std::vector<long> lst) {\n    long ans = -1;\n\
    \    long freq = 0;\n    for (long i : lst) {\n        freq++;\n        if (freq\
    \ > i) {\n            freq = i;\n            ans = i;\n        }\n    }\n    return\
    \ ans;\n}\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5, 1}))) == (1));\n    assert(candidate((std::vector<long>({4, 1, 4, 1,\
    \ 4, 4}))) == (4));\n    assert(candidate((std::vector<long>({3, 3}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({8, 8, 8, 8, 8, 8, 8, 8}))) == (8));\n\
    \    assert(candidate((std::vector<long>({2, 3, 3, 2, 2}))) == (2));\n    assert(candidate((std::vector<long>({2,\
    \ 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 2, 8, 2}))) == (2));\n    assert(candidate((std::vector<long>({6,\
    \ 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}))) == (1));\n    assert(candidate((std::vector<long>({8,\
    \ 8, 3, 6, 5, 6, 4}))) == (-1));\n    assert(candidate((std::vector<long>({6,\
    \ 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9})))\
    \ == (1));\n    assert(candidate((std::vector<long>({1, 9, 10, 1, 3}))) == (1));\n\
    \    assert(candidate((std::vector<long>({6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10,\
    \ 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}))) == (5));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({8, 8, 10, 6, 4, 3, 5, 8,\
    \ 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}))) == (4));\n    assert(candidate((std::vector<long>({2,\
    \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}))) == (2));\n    assert(candidate((std::vector<long>({1,\
    \ 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}))) == (1));\n    assert(candidate((std::vector<long>({9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}))) == (4));\n    assert(candidate((std::vector<long>({2, 6, 4,\
    \ 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}))) == (4));\n\
    \    assert(candidate((std::vector<long>({9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10,\
    \ 3, 8, 2, 6, 2, 3, 1}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({10}))) == (-1));\n    assert(candidate((std::vector<long>({9,\
    \ 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}))) == (1));\n    assert(candidate((std::vector<long>({7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 10, 10, 9, 2}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmpn67rob6k: /tmp/tmpn67rob6k.cpp:26: int main(): Assertion `candidate((std::vector<long>({4,\
    \ 1, 4, 1, 4, 4}))) == (4)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the list.\n// If no such a value exist, return -1.\n// Examples:\n// search([4,\
    \ 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n// search([5,\
    \ 5, 4, 4, 4]) == -1\nlong search(std::vector<long> lst) {\n    // Your code here\n\
    \    long ans = -1;\n    long freq = 0;\n    for(long i : lst) {\n        freq\
    \ += i;\n        if(freq > ans) {\n            ans = freq;\n        }\n    }\n\
    \    return ans;\n}\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5, 1}))) == (1));\n    assert(candidate((std::vector<long>({4, 1, 4, 1,\
    \ 4, 4}))) == (4));\n    assert(candidate((std::vector<long>({3, 3}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({8, 8, 8, 8, 8, 8, 8, 8}))) == (8));\n\
    \    assert(candidate((std::vector<long>({2, 3, 3, 2, 2}))) == (2));\n    assert(candidate((std::vector<long>({2,\
    \ 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 2, 8, 2}))) == (2));\n    assert(candidate((std::vector<long>({6,\
    \ 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}))) == (1));\n    assert(candidate((std::vector<long>({8,\
    \ 8, 3, 6, 5, 6, 4}))) == (-1));\n    assert(candidate((std::vector<long>({6,\
    \ 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9})))\
    \ == (1));\n    assert(candidate((std::vector<long>({1, 9, 10, 1, 3}))) == (1));\n\
    \    assert(candidate((std::vector<long>({6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10,\
    \ 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}))) == (5));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({8, 8, 10, 6, 4, 3, 5, 8,\
    \ 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}))) == (4));\n    assert(candidate((std::vector<long>({2,\
    \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}))) == (2));\n    assert(candidate((std::vector<long>({1,\
    \ 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}))) == (1));\n    assert(candidate((std::vector<long>({9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}))) == (4));\n    assert(candidate((std::vector<long>({2, 6, 4,\
    \ 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}))) == (4));\n\
    \    assert(candidate((std::vector<long>({9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10,\
    \ 3, 8, 2, 6, 2, 3, 1}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({10}))) == (-1));\n    assert(candidate((std::vector<long>({9,\
    \ 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}))) == (1));\n    assert(candidate((std::vector<long>({7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 10, 10, 9, 2}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmp63ijceji: /tmp/tmp63ijceji.cpp:25: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 5, 5, 5, 1}))) == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the list.\n// If no such a value exist, return -1.\n// Examples:\n// search([4,\
    \ 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n// search([5,\
    \ 5, 4, 4, 4]) == -1\nlong search(std::vector<long> lst) {\n    long ans = -1;\n\
    \    long freq[1000];\n    for (long i : lst) {\n        freq[i] = freq[i] + 1;\n\
    \    }\n    for (long i : lst) {\n        if (freq[i] >= i) {\n            freq[i]\
    \ = freq[i] - 1;\n            ans = i;\n        }\n    }\n    return ans;\n}\n\
    int main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5, 1}))) == (1));\n    assert(candidate((std::vector<long>({4, 1, 4, 1,\
    \ 4, 4}))) == (4));\n    assert(candidate((std::vector<long>({3, 3}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({8, 8, 8, 8, 8, 8, 8, 8}))) == (8));\n\
    \    assert(candidate((std::vector<long>({2, 3, 3, 2, 2}))) == (2));\n    assert(candidate((std::vector<long>({2,\
    \ 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 2, 8, 2}))) == (2));\n    assert(candidate((std::vector<long>({6,\
    \ 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}))) == (1));\n    assert(candidate((std::vector<long>({8,\
    \ 8, 3, 6, 5, 6, 4}))) == (-1));\n    assert(candidate((std::vector<long>({6,\
    \ 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9})))\
    \ == (1));\n    assert(candidate((std::vector<long>({1, 9, 10, 1, 3}))) == (1));\n\
    \    assert(candidate((std::vector<long>({6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10,\
    \ 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}))) == (5));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({8, 8, 10, 6, 4, 3, 5, 8,\
    \ 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}))) == (4));\n    assert(candidate((std::vector<long>({2,\
    \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}))) == (2));\n    assert(candidate((std::vector<long>({1,\
    \ 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}))) == (1));\n    assert(candidate((std::vector<long>({9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}))) == (4));\n    assert(candidate((std::vector<long>({2, 6, 4,\
    \ 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}))) == (4));\n\
    \    assert(candidate((std::vector<long>({9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10,\
    \ 3, 8, 2, 6, 2, 3, 1}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({10}))) == (-1));\n    assert(candidate((std::vector<long>({9,\
    \ 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}))) == (1));\n    assert(candidate((std::vector<long>({7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 10, 10, 9, 2}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmppyd0zc10: /tmp/tmppyd0zc10.cpp:28: int main(): Assertion `candidate((std::vector<long>({4,\
    \ 1, 4, 1, 4, 4}))) == (4)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the list.\n// If no such a value exist, return -1.\n// Examples:\n// search([4,\
    \ 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n// search([5,\
    \ 5, 4, 4, 4]) == -1\nlong search(std::vector<long> lst) {\n    long ans = -1;\n\
    \    long freq = 0;\n    for(long i : lst) {\n        freq = freq + i;\n     \
    \   if(freq >= i) {\n            ans = i;\n            break;\n        }\n   \
    \ }\n    return ans;\n}\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5, 1}))) == (1));\n    assert(candidate((std::vector<long>({4, 1, 4, 1,\
    \ 4, 4}))) == (4));\n    assert(candidate((std::vector<long>({3, 3}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({8, 8, 8, 8, 8, 8, 8, 8}))) == (8));\n\
    \    assert(candidate((std::vector<long>({2, 3, 3, 2, 2}))) == (2));\n    assert(candidate((std::vector<long>({2,\
    \ 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 2, 8, 2}))) == (2));\n    assert(candidate((std::vector<long>({6,\
    \ 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}))) == (1));\n    assert(candidate((std::vector<long>({8,\
    \ 8, 3, 6, 5, 6, 4}))) == (-1));\n    assert(candidate((std::vector<long>({6,\
    \ 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9})))\
    \ == (1));\n    assert(candidate((std::vector<long>({1, 9, 10, 1, 3}))) == (1));\n\
    \    assert(candidate((std::vector<long>({6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10,\
    \ 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}))) == (5));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({8, 8, 10, 6, 4, 3, 5, 8,\
    \ 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}))) == (4));\n    assert(candidate((std::vector<long>({2,\
    \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}))) == (2));\n    assert(candidate((std::vector<long>({1,\
    \ 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}))) == (1));\n    assert(candidate((std::vector<long>({9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}))) == (4));\n    assert(candidate((std::vector<long>({2, 6, 4,\
    \ 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}))) == (4));\n\
    \    assert(candidate((std::vector<long>({9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10,\
    \ 3, 8, 2, 6, 2, 3, 1}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({10}))) == (-1));\n    assert(candidate((std::vector<long>({9,\
    \ 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}))) == (1));\n    assert(candidate((std::vector<long>({7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 10, 10, 9, 2}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmp_4331rig: /tmp/tmp_4331rig.cpp:25: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 5, 5, 5, 1}))) == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the list.\n// If no such a value exist, return -1.\n// Examples:\n// search([4,\
    \ 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n// search([5,\
    \ 5, 4, 4, 4]) == -1\nlong search(std::vector<long> lst) {\n    long ans = -1;\n\
    \    long freq[100];\n    for (long i : lst) {\n        freq[i] = freq[i] + 1;\n\
    \    }\n    for (long i : lst) {\n        if (freq[i] >= i) {\n            ans\
    \ = i;\n            break;\n        }\n    }\n    return ans;\n}\nint main() {\n\
    \    auto candidate = search;\n    assert(candidate((std::vector<long>({5, 5,\
    \ 5, 5, 1}))) == (1));\n    assert(candidate((std::vector<long>({4, 1, 4, 1, 4,\
    \ 4}))) == (4));\n    assert(candidate((std::vector<long>({3, 3}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({8, 8, 8, 8, 8, 8, 8, 8}))) == (8));\n\
    \    assert(candidate((std::vector<long>({2, 3, 3, 2, 2}))) == (2));\n    assert(candidate((std::vector<long>({2,\
    \ 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 2, 8, 2}))) == (2));\n    assert(candidate((std::vector<long>({6,\
    \ 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}))) == (1));\n    assert(candidate((std::vector<long>({8,\
    \ 8, 3, 6, 5, 6, 4}))) == (-1));\n    assert(candidate((std::vector<long>({6,\
    \ 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9})))\
    \ == (1));\n    assert(candidate((std::vector<long>({1, 9, 10, 1, 3}))) == (1));\n\
    \    assert(candidate((std::vector<long>({6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10,\
    \ 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}))) == (5));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({8, 8, 10, 6, 4, 3, 5, 8,\
    \ 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}))) == (4));\n    assert(candidate((std::vector<long>({2,\
    \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}))) == (2));\n    assert(candidate((std::vector<long>({1,\
    \ 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}))) == (1));\n    assert(candidate((std::vector<long>({9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}))) == (4));\n    assert(candidate((std::vector<long>({2, 6, 4,\
    \ 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}))) == (4));\n\
    \    assert(candidate((std::vector<long>({9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10,\
    \ 3, 8, 2, 6, 2, 3, 1}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({10}))) == (-1));\n    assert(candidate((std::vector<long>({9,\
    \ 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}))) == (1));\n    assert(candidate((std::vector<long>({7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 10, 10, 9, 2}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmpik430sa3: /tmp/tmpik430sa3.cpp:27: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 5, 5, 5, 1}))) == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the list.\n// If no such a value exist, return -1.\n// Examples:\n// search([4,\
    \ 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n// search([5,\
    \ 5, 4, 4, 4]) == -1\nlong search(std::vector<long> lst) {\n    long ans = -1;\n\
    \    long freq = 0;\n    for (long i : lst) {\n        freq += i;\n        if\
    \ (freq > ans) {\n            ans = freq;\n        }\n    }\n    return ans;\n\
    }\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5, 1}))) == (1));\n    assert(candidate((std::vector<long>({4, 1, 4, 1,\
    \ 4, 4}))) == (4));\n    assert(candidate((std::vector<long>({3, 3}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({8, 8, 8, 8, 8, 8, 8, 8}))) == (8));\n\
    \    assert(candidate((std::vector<long>({2, 3, 3, 2, 2}))) == (2));\n    assert(candidate((std::vector<long>({2,\
    \ 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 2, 8, 2}))) == (2));\n    assert(candidate((std::vector<long>({6,\
    \ 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}))) == (1));\n    assert(candidate((std::vector<long>({8,\
    \ 8, 3, 6, 5, 6, 4}))) == (-1));\n    assert(candidate((std::vector<long>({6,\
    \ 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9})))\
    \ == (1));\n    assert(candidate((std::vector<long>({1, 9, 10, 1, 3}))) == (1));\n\
    \    assert(candidate((std::vector<long>({6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10,\
    \ 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}))) == (5));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({8, 8, 10, 6, 4, 3, 5, 8,\
    \ 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}))) == (4));\n    assert(candidate((std::vector<long>({2,\
    \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}))) == (2));\n    assert(candidate((std::vector<long>({1,\
    \ 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}))) == (1));\n    assert(candidate((std::vector<long>({9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}))) == (4));\n    assert(candidate((std::vector<long>({2, 6, 4,\
    \ 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}))) == (4));\n\
    \    assert(candidate((std::vector<long>({9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10,\
    \ 3, 8, 2, 6, 2, 3, 1}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({10}))) == (-1));\n    assert(candidate((std::vector<long>({9,\
    \ 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}))) == (1));\n    assert(candidate((std::vector<long>({7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 10, 10, 9, 2}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmpp4pz95b5: /tmp/tmpp4pz95b5.cpp:24: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 5, 5, 5, 1}))) == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the list.\n// If no such a value exist, return -1.\n// Examples:\n// search([4,\
    \ 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n// search([5,\
    \ 5, 4, 4, 4]) == -1\nlong search(std::vector<long> lst) {\n    long ans = -1;\n\
    \    long freq[1000];\n    for(long i = 0; i < lst.size(); i++) {\n        freq[lst[i]]++;\n\
    \    }\n    for(long i = 0; i < 1000; i++) {\n        if(freq[i] >= lst.size())\
    \ {\n            ans = i;\n            break;\n        }\n    }\n    return ans;\n\
    }\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5, 1}))) == (1));\n    assert(candidate((std::vector<long>({4, 1, 4, 1,\
    \ 4, 4}))) == (4));\n    assert(candidate((std::vector<long>({3, 3}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({8, 8, 8, 8, 8, 8, 8, 8}))) == (8));\n\
    \    assert(candidate((std::vector<long>({2, 3, 3, 2, 2}))) == (2));\n    assert(candidate((std::vector<long>({2,\
    \ 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 2, 8, 2}))) == (2));\n    assert(candidate((std::vector<long>({6,\
    \ 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}))) == (1));\n    assert(candidate((std::vector<long>({8,\
    \ 8, 3, 6, 5, 6, 4}))) == (-1));\n    assert(candidate((std::vector<long>({6,\
    \ 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9})))\
    \ == (1));\n    assert(candidate((std::vector<long>({1, 9, 10, 1, 3}))) == (1));\n\
    \    assert(candidate((std::vector<long>({6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10,\
    \ 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}))) == (5));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({8, 8, 10, 6, 4, 3, 5, 8,\
    \ 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}))) == (4));\n    assert(candidate((std::vector<long>({2,\
    \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}))) == (2));\n    assert(candidate((std::vector<long>({1,\
    \ 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}))) == (1));\n    assert(candidate((std::vector<long>({9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}))) == (4));\n    assert(candidate((std::vector<long>({2, 6, 4,\
    \ 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}))) == (4));\n\
    \    assert(candidate((std::vector<long>({9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10,\
    \ 3, 8, 2, 6, 2, 3, 1}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({10}))) == (-1));\n    assert(candidate((std::vector<long>({9,\
    \ 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}))) == (1));\n    assert(candidate((std::vector<long>({7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 10, 10, 9, 2}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmpyrssg3a_: /tmp/tmpyrssg3a_.cpp:27: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 5, 5, 5, 1}))) == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the list.\n// If no such a value exist, return -1.\n// Examples:\n// search([4,\
    \ 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n// search([5,\
    \ 5, 4, 4, 4]) == -1\nlong search(std::vector<long> lst) {\n    long ans = -1;\n\
    \    long freq = 0;\n    for (long i : lst) {\n        freq += i;\n        if\
    \ (freq > ans) {\n            ans = freq;\n        }\n    }\n    return ans;\n\
    }\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5, 1}))) == (1));\n    assert(candidate((std::vector<long>({4, 1, 4, 1,\
    \ 4, 4}))) == (4));\n    assert(candidate((std::vector<long>({3, 3}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({8, 8, 8, 8, 8, 8, 8, 8}))) == (8));\n\
    \    assert(candidate((std::vector<long>({2, 3, 3, 2, 2}))) == (2));\n    assert(candidate((std::vector<long>({2,\
    \ 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 2, 8, 2}))) == (2));\n    assert(candidate((std::vector<long>({6,\
    \ 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}))) == (1));\n    assert(candidate((std::vector<long>({8,\
    \ 8, 3, 6, 5, 6, 4}))) == (-1));\n    assert(candidate((std::vector<long>({6,\
    \ 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9})))\
    \ == (1));\n    assert(candidate((std::vector<long>({1, 9, 10, 1, 3}))) == (1));\n\
    \    assert(candidate((std::vector<long>({6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10,\
    \ 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}))) == (5));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({8, 8, 10, 6, 4, 3, 5, 8,\
    \ 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}))) == (4));\n    assert(candidate((std::vector<long>({2,\
    \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}))) == (2));\n    assert(candidate((std::vector<long>({1,\
    \ 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}))) == (1));\n    assert(candidate((std::vector<long>({9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}))) == (4));\n    assert(candidate((std::vector<long>({2, 6, 4,\
    \ 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}))) == (4));\n\
    \    assert(candidate((std::vector<long>({9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10,\
    \ 3, 8, 2, 6, 2, 3, 1}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({10}))) == (-1));\n    assert(candidate((std::vector<long>({9,\
    \ 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}))) == (1));\n    assert(candidate((std::vector<long>({7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 10, 10, 9, 2}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmppa5awhao: /tmp/tmppa5awhao.cpp:24: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 5, 5, 5, 1}))) == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the list.\n// If no such a value exist, return -1.\n// Examples:\n// search([4,\
    \ 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n// search([5,\
    \ 5, 4, 4, 4]) == -1\nlong search(std::vector<long> lst) {\n    long ans = -1;\n\
    \    long freq = 0;\n    for (long i : lst) {\n        freq += i;\n        if\
    \ (freq >= i) {\n            ans = i;\n            freq -= i;\n        }\n   \
    \ }\n    return ans;\n}\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5, 1}))) == (1));\n    assert(candidate((std::vector<long>({4, 1, 4, 1,\
    \ 4, 4}))) == (4));\n    assert(candidate((std::vector<long>({3, 3}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({8, 8, 8, 8, 8, 8, 8, 8}))) == (8));\n\
    \    assert(candidate((std::vector<long>({2, 3, 3, 2, 2}))) == (2));\n    assert(candidate((std::vector<long>({2,\
    \ 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 2, 8, 2}))) == (2));\n    assert(candidate((std::vector<long>({6,\
    \ 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}))) == (1));\n    assert(candidate((std::vector<long>({8,\
    \ 8, 3, 6, 5, 6, 4}))) == (-1));\n    assert(candidate((std::vector<long>({6,\
    \ 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9})))\
    \ == (1));\n    assert(candidate((std::vector<long>({1, 9, 10, 1, 3}))) == (1));\n\
    \    assert(candidate((std::vector<long>({6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10,\
    \ 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}))) == (5));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({8, 8, 10, 6, 4, 3, 5, 8,\
    \ 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}))) == (4));\n    assert(candidate((std::vector<long>({2,\
    \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}))) == (2));\n    assert(candidate((std::vector<long>({1,\
    \ 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}))) == (1));\n    assert(candidate((std::vector<long>({9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}))) == (4));\n    assert(candidate((std::vector<long>({2, 6, 4,\
    \ 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}))) == (4));\n\
    \    assert(candidate((std::vector<long>({9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10,\
    \ 3, 8, 2, 6, 2, 3, 1}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({10}))) == (-1));\n    assert(candidate((std::vector<long>({9,\
    \ 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}))) == (1));\n    assert(candidate((std::vector<long>({7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 10, 10, 9, 2}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmpnjq9s_5e: /tmp/tmpnjq9s_5e.cpp:27: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 3}))) == (-1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the list.\n// If no such a value exist, return -1.\n// Examples:\n// search([4,\
    \ 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n// search([5,\
    \ 5, 4, 4, 4]) == -1\nlong search(std::vector<long> lst) {\n    long ans = -1;\n\
    \    long freq[1000];\n    for (long i : lst) {\n        freq[i] = freq[i] + 1;\n\
    \    }\n    for (long i = 0; i < 1000; i++) {\n        if (freq[i] >= lst[0])\
    \ {\n            ans = i;\n            break;\n        }\n    }\n    return ans;\n\
    }\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5, 1}))) == (1));\n    assert(candidate((std::vector<long>({4, 1, 4, 1,\
    \ 4, 4}))) == (4));\n    assert(candidate((std::vector<long>({3, 3}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({8, 8, 8, 8, 8, 8, 8, 8}))) == (8));\n\
    \    assert(candidate((std::vector<long>({2, 3, 3, 2, 2}))) == (2));\n    assert(candidate((std::vector<long>({2,\
    \ 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 2, 8, 2}))) == (2));\n    assert(candidate((std::vector<long>({6,\
    \ 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}))) == (1));\n    assert(candidate((std::vector<long>({8,\
    \ 8, 3, 6, 5, 6, 4}))) == (-1));\n    assert(candidate((std::vector<long>({6,\
    \ 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9})))\
    \ == (1));\n    assert(candidate((std::vector<long>({1, 9, 10, 1, 3}))) == (1));\n\
    \    assert(candidate((std::vector<long>({6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10,\
    \ 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}))) == (5));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({8, 8, 10, 6, 4, 3, 5, 8,\
    \ 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}))) == (4));\n    assert(candidate((std::vector<long>({2,\
    \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}))) == (2));\n    assert(candidate((std::vector<long>({1,\
    \ 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}))) == (1));\n    assert(candidate((std::vector<long>({9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}))) == (4));\n    assert(candidate((std::vector<long>({2, 6, 4,\
    \ 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}))) == (4));\n\
    \    assert(candidate((std::vector<long>({9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10,\
    \ 3, 8, 2, 6, 2, 3, 1}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({10}))) == (-1));\n    assert(candidate((std::vector<long>({9,\
    \ 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}))) == (1));\n    assert(candidate((std::vector<long>({7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 10, 10, 9, 2}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmp8rgrcqb6: /tmp/tmp8rgrcqb6.cpp:27: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 5, 5, 5, 1}))) == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the list.\n// If no such a value exist, return -1.\n// Examples:\n// search([4,\
    \ 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n// search([5,\
    \ 5, 4, 4, 4]) == -1\nlong search(std::vector<long> lst) {\n    // Your code here\n\
    \    long ans = -1;\n    long freq = 0;\n    for (long i : lst) {\n        freq++;\n\
    \        if (freq >= i) {\n            ans = i;\n            break;\n        }\n\
    \    }\n    return ans;\n}\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5, 1}))) == (1));\n    assert(candidate((std::vector<long>({4, 1, 4, 1,\
    \ 4, 4}))) == (4));\n    assert(candidate((std::vector<long>({3, 3}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({8, 8, 8, 8, 8, 8, 8, 8}))) == (8));\n\
    \    assert(candidate((std::vector<long>({2, 3, 3, 2, 2}))) == (2));\n    assert(candidate((std::vector<long>({2,\
    \ 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 2, 8, 2}))) == (2));\n    assert(candidate((std::vector<long>({6,\
    \ 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}))) == (1));\n    assert(candidate((std::vector<long>({8,\
    \ 8, 3, 6, 5, 6, 4}))) == (-1));\n    assert(candidate((std::vector<long>({6,\
    \ 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9})))\
    \ == (1));\n    assert(candidate((std::vector<long>({1, 9, 10, 1, 3}))) == (1));\n\
    \    assert(candidate((std::vector<long>({6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10,\
    \ 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}))) == (5));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({8, 8, 10, 6, 4, 3, 5, 8,\
    \ 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}))) == (4));\n    assert(candidate((std::vector<long>({2,\
    \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}))) == (2));\n    assert(candidate((std::vector<long>({1,\
    \ 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}))) == (1));\n    assert(candidate((std::vector<long>({9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}))) == (4));\n    assert(candidate((std::vector<long>({2, 6, 4,\
    \ 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}))) == (4));\n\
    \    assert(candidate((std::vector<long>({9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10,\
    \ 3, 8, 2, 6, 2, 3, 1}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({10}))) == (-1));\n    assert(candidate((std::vector<long>({9,\
    \ 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}))) == (1));\n    assert(candidate((std::vector<long>({7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 10, 10, 9, 2}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmplddayyro: /tmp/tmplddayyro.cpp:27: int main(): Assertion `candidate((std::vector<long>({4,\
    \ 1, 4, 1, 4, 4}))) == (4)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the list.\n// If no such a value exist, return -1.\n// Examples:\n// search([4,\
    \ 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n// search([5,\
    \ 5, 4, 4, 4]) == -1\nlong search(std::vector<long> lst) {\n    long ans = -1;\n\
    \    long freq[100];\n    for (long i : lst) {\n        freq[i] = freq[i] + 1;\n\
    \    }\n    for (long i : lst) {\n        if (freq[i] >= i) {\n            ans\
    \ = i;\n            break;\n        }\n    }\n    return ans;\n}\nint main() {\n\
    \    auto candidate = search;\n    assert(candidate((std::vector<long>({5, 5,\
    \ 5, 5, 1}))) == (1));\n    assert(candidate((std::vector<long>({4, 1, 4, 1, 4,\
    \ 4}))) == (4));\n    assert(candidate((std::vector<long>({3, 3}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({8, 8, 8, 8, 8, 8, 8, 8}))) == (8));\n\
    \    assert(candidate((std::vector<long>({2, 3, 3, 2, 2}))) == (2));\n    assert(candidate((std::vector<long>({2,\
    \ 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 2, 8, 2}))) == (2));\n    assert(candidate((std::vector<long>({6,\
    \ 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}))) == (1));\n    assert(candidate((std::vector<long>({8,\
    \ 8, 3, 6, 5, 6, 4}))) == (-1));\n    assert(candidate((std::vector<long>({6,\
    \ 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9})))\
    \ == (1));\n    assert(candidate((std::vector<long>({1, 9, 10, 1, 3}))) == (1));\n\
    \    assert(candidate((std::vector<long>({6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10,\
    \ 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}))) == (5));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({8, 8, 10, 6, 4, 3, 5, 8,\
    \ 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}))) == (4));\n    assert(candidate((std::vector<long>({2,\
    \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}))) == (2));\n    assert(candidate((std::vector<long>({1,\
    \ 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}))) == (1));\n    assert(candidate((std::vector<long>({9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}))) == (4));\n    assert(candidate((std::vector<long>({2, 6, 4,\
    \ 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}))) == (4));\n\
    \    assert(candidate((std::vector<long>({9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10,\
    \ 3, 8, 2, 6, 2, 3, 1}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({10}))) == (-1));\n    assert(candidate((std::vector<long>({9,\
    \ 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}))) == (1));\n    assert(candidate((std::vector<long>({7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 10, 10, 9, 2}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmpq65m6y5s: /tmp/tmpq65m6y5s.cpp:27: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 5, 5, 5, 1}))) == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the list.\n// If no such a value exist, return -1.\n// Examples:\n// search([4,\
    \ 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n// search([5,\
    \ 5, 4, 4, 4]) == -1\nlong search(std::vector<long> lst) {\n    long ans = -1;\n\
    \    long freq = 0;\n    for (long i : lst) {\n        freq += i;\n        if\
    \ (freq >= i) {\n            ans = i;\n            freq -= i;\n        }\n   \
    \ }\n    return ans;\n}\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5, 1}))) == (1));\n    assert(candidate((std::vector<long>({4, 1, 4, 1,\
    \ 4, 4}))) == (4));\n    assert(candidate((std::vector<long>({3, 3}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({8, 8, 8, 8, 8, 8, 8, 8}))) == (8));\n\
    \    assert(candidate((std::vector<long>({2, 3, 3, 2, 2}))) == (2));\n    assert(candidate((std::vector<long>({2,\
    \ 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 2, 8, 2}))) == (2));\n    assert(candidate((std::vector<long>({6,\
    \ 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}))) == (1));\n    assert(candidate((std::vector<long>({8,\
    \ 8, 3, 6, 5, 6, 4}))) == (-1));\n    assert(candidate((std::vector<long>({6,\
    \ 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9})))\
    \ == (1));\n    assert(candidate((std::vector<long>({1, 9, 10, 1, 3}))) == (1));\n\
    \    assert(candidate((std::vector<long>({6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10,\
    \ 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}))) == (5));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({8, 8, 10, 6, 4, 3, 5, 8,\
    \ 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}))) == (4));\n    assert(candidate((std::vector<long>({2,\
    \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}))) == (2));\n    assert(candidate((std::vector<long>({1,\
    \ 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}))) == (1));\n    assert(candidate((std::vector<long>({9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}))) == (4));\n    assert(candidate((std::vector<long>({2, 6, 4,\
    \ 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}))) == (4));\n\
    \    assert(candidate((std::vector<long>({9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10,\
    \ 3, 8, 2, 6, 2, 3, 1}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({10}))) == (-1));\n    assert(candidate((std::vector<long>({9,\
    \ 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}))) == (1));\n    assert(candidate((std::vector<long>({7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 10, 10, 9, 2}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmpck_q33sa: /tmp/tmpck_q33sa.cpp:27: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 3}))) == (-1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the list.\n// If no such a value exist, return -1.\n// Examples:\n// search([4,\
    \ 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n// search([5,\
    \ 5, 4, 4, 4]) == -1\nlong search(std::vector<long> lst) {\n    long ans = -1;\n\
    \    long freq[100];\n    for (long i = 0; i < lst.size(); i++) {\n        freq[lst[i]]++;\n\
    \    }\n    for (long i = 0; i < 100; i++) {\n        if (freq[i] >= lst.size())\
    \ {\n            break;\n        }\n        if (freq[i] >= lst.size()) {\n   \
    \         ans = i;\n            break;\n        }\n    }\n    return ans;\n}\n\
    int main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5, 1}))) == (1));\n    assert(candidate((std::vector<long>({4, 1, 4, 1,\
    \ 4, 4}))) == (4));\n    assert(candidate((std::vector<long>({3, 3}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({8, 8, 8, 8, 8, 8, 8, 8}))) == (8));\n\
    \    assert(candidate((std::vector<long>({2, 3, 3, 2, 2}))) == (2));\n    assert(candidate((std::vector<long>({2,\
    \ 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 2, 8, 2}))) == (2));\n    assert(candidate((std::vector<long>({6,\
    \ 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}))) == (1));\n    assert(candidate((std::vector<long>({8,\
    \ 8, 3, 6, 5, 6, 4}))) == (-1));\n    assert(candidate((std::vector<long>({6,\
    \ 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9})))\
    \ == (1));\n    assert(candidate((std::vector<long>({1, 9, 10, 1, 3}))) == (1));\n\
    \    assert(candidate((std::vector<long>({6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10,\
    \ 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}))) == (5));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({8, 8, 10, 6, 4, 3, 5, 8,\
    \ 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}))) == (4));\n    assert(candidate((std::vector<long>({2,\
    \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}))) == (2));\n    assert(candidate((std::vector<long>({1,\
    \ 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}))) == (1));\n    assert(candidate((std::vector<long>({9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}))) == (4));\n    assert(candidate((std::vector<long>({2, 6, 4,\
    \ 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}))) == (4));\n\
    \    assert(candidate((std::vector<long>({9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10,\
    \ 3, 8, 2, 6, 2, 3, 1}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({10}))) == (-1));\n    assert(candidate((std::vector<long>({9,\
    \ 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}))) == (1));\n    assert(candidate((std::vector<long>({7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 10, 10, 9, 2}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmpklkdjztu: /tmp/tmpklkdjztu.cpp:30: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 5, 5, 5, 1}))) == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the list.\n// If no such a value exist, return -1.\n// Examples:\n// search([4,\
    \ 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n// search([5,\
    \ 5, 4, 4, 4]) == -1\nlong search(std::vector<long> lst) {\n    long ans = -1;\n\
    \    long freq[100] = {0};\n    for (long i : lst) {\n        freq[i]++;\n   \
    \ }\n    for (long i = 1; i <= 100; i++) {\n        if (freq[i] >= i) {\n    \
    \        ans = i;\n            break;\n        }\n    }\n    return ans;\n}\n\
    int main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5, 1}))) == (1));\n    assert(candidate((std::vector<long>({4, 1, 4, 1,\
    \ 4, 4}))) == (4));\n    assert(candidate((std::vector<long>({3, 3}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({8, 8, 8, 8, 8, 8, 8, 8}))) == (8));\n\
    \    assert(candidate((std::vector<long>({2, 3, 3, 2, 2}))) == (2));\n    assert(candidate((std::vector<long>({2,\
    \ 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 2, 8, 2}))) == (2));\n    assert(candidate((std::vector<long>({6,\
    \ 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}))) == (1));\n    assert(candidate((std::vector<long>({8,\
    \ 8, 3, 6, 5, 6, 4}))) == (-1));\n    assert(candidate((std::vector<long>({6,\
    \ 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9})))\
    \ == (1));\n    assert(candidate((std::vector<long>({1, 9, 10, 1, 3}))) == (1));\n\
    \    assert(candidate((std::vector<long>({6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10,\
    \ 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}))) == (5));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({8, 8, 10, 6, 4, 3, 5, 8,\
    \ 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}))) == (4));\n    assert(candidate((std::vector<long>({2,\
    \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}))) == (2));\n    assert(candidate((std::vector<long>({1,\
    \ 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}))) == (1));\n    assert(candidate((std::vector<long>({9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}))) == (4));\n    assert(candidate((std::vector<long>({2, 6, 4,\
    \ 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}))) == (4));\n\
    \    assert(candidate((std::vector<long>({9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10,\
    \ 3, 8, 2, 6, 2, 3, 1}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({10}))) == (-1));\n    assert(candidate((std::vector<long>({9,\
    \ 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}))) == (1));\n    assert(candidate((std::vector<long>({7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 10, 10, 9, 2}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmpyuzomsdf: /tmp/tmpyuzomsdf.cpp:28: int main(): Assertion `candidate((std::vector<long>({4,\
    \ 1, 4, 1, 4, 4}))) == (4)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the list.\n// If no such a value exist, return -1.\n// Examples:\n// search([4,\
    \ 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n// search([5,\
    \ 5, 4, 4, 4]) == -1\nlong search(std::vector<long> lst) {\n    long ans = -1;\n\
    \    long freq = 0;\n    for (long i : lst) {\n        freq += i;\n        if\
    \ (freq >= i) {\n            ans = i;\n            freq -= i;\n        }\n   \
    \ }\n    return ans;\n}\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5, 1}))) == (1));\n    assert(candidate((std::vector<long>({4, 1, 4, 1,\
    \ 4, 4}))) == (4));\n    assert(candidate((std::vector<long>({3, 3}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({8, 8, 8, 8, 8, 8, 8, 8}))) == (8));\n\
    \    assert(candidate((std::vector<long>({2, 3, 3, 2, 2}))) == (2));\n    assert(candidate((std::vector<long>({2,\
    \ 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 2, 8, 2}))) == (2));\n    assert(candidate((std::vector<long>({6,\
    \ 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}))) == (1));\n    assert(candidate((std::vector<long>({8,\
    \ 8, 3, 6, 5, 6, 4}))) == (-1));\n    assert(candidate((std::vector<long>({6,\
    \ 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9})))\
    \ == (1));\n    assert(candidate((std::vector<long>({1, 9, 10, 1, 3}))) == (1));\n\
    \    assert(candidate((std::vector<long>({6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10,\
    \ 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}))) == (5));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({8, 8, 10, 6, 4, 3, 5, 8,\
    \ 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}))) == (4));\n    assert(candidate((std::vector<long>({2,\
    \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}))) == (2));\n    assert(candidate((std::vector<long>({1,\
    \ 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}))) == (1));\n    assert(candidate((std::vector<long>({9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}))) == (4));\n    assert(candidate((std::vector<long>({2, 6, 4,\
    \ 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}))) == (4));\n\
    \    assert(candidate((std::vector<long>({9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10,\
    \ 3, 8, 2, 6, 2, 3, 1}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({10}))) == (-1));\n    assert(candidate((std::vector<long>({9,\
    \ 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}))) == (1));\n    assert(candidate((std::vector<long>({7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 10, 10, 9, 2}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmpynpj6ab0: /tmp/tmpynpj6ab0.cpp:27: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 3}))) == (-1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the list.\n// If no such a value exist, return -1.\n// Examples:\n// search([4,\
    \ 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n// search([5,\
    \ 5, 4, 4, 4]) == -1\nlong search(std::vector<long> lst) {\n    long ans = -1;\n\
    \    long freq[1000];\n    for (long i : lst) {\n        freq[i] = freq[i] + 1;\n\
    \    }\n    for (long i : lst) {\n        if (freq[i] >= i) {\n            ans\
    \ = i;\n            break;\n        }\n    }\n    return ans;\n}\nint main() {\n\
    \    auto candidate = search;\n    assert(candidate((std::vector<long>({5, 5,\
    \ 5, 5, 1}))) == (1));\n    assert(candidate((std::vector<long>({4, 1, 4, 1, 4,\
    \ 4}))) == (4));\n    assert(candidate((std::vector<long>({3, 3}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({8, 8, 8, 8, 8, 8, 8, 8}))) == (8));\n\
    \    assert(candidate((std::vector<long>({2, 3, 3, 2, 2}))) == (2));\n    assert(candidate((std::vector<long>({2,\
    \ 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 2, 8, 2}))) == (2));\n    assert(candidate((std::vector<long>({6,\
    \ 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}))) == (1));\n    assert(candidate((std::vector<long>({8,\
    \ 8, 3, 6, 5, 6, 4}))) == (-1));\n    assert(candidate((std::vector<long>({6,\
    \ 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9})))\
    \ == (1));\n    assert(candidate((std::vector<long>({1, 9, 10, 1, 3}))) == (1));\n\
    \    assert(candidate((std::vector<long>({6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10,\
    \ 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}))) == (5));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({8, 8, 10, 6, 4, 3, 5, 8,\
    \ 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}))) == (4));\n    assert(candidate((std::vector<long>({2,\
    \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}))) == (2));\n    assert(candidate((std::vector<long>({1,\
    \ 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}))) == (1));\n    assert(candidate((std::vector<long>({9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}))) == (4));\n    assert(candidate((std::vector<long>({2, 6, 4,\
    \ 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}))) == (4));\n\
    \    assert(candidate((std::vector<long>({9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10,\
    \ 3, 8, 2, 6, 2, 3, 1}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({10}))) == (-1));\n    assert(candidate((std::vector<long>({9,\
    \ 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}))) == (1));\n    assert(candidate((std::vector<long>({7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 10, 10, 9, 2}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmp7mna8qv0: /tmp/tmp7mna8qv0.cpp:32: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}))) == (1)'\
    \ failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the list.\n// If no such a value exist, return -1.\n// Examples:\n// search([4,\
    \ 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n// search([5,\
    \ 5, 4, 4, 4]) == -1\nlong search(std::vector<long> lst) {\n    long ans = -1;\n\
    \    long freq[100] = {0};\n    for (long i : lst) {\n        freq[i]++;\n   \
    \ }\n    for (long i = 1; i < 100; i++) {\n        if (freq[i] > freq[i - 1])\
    \ {\n            ans = i;\n            break;\n        }\n    }\n    return ans;\n\
    }\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5, 1}))) == (1));\n    assert(candidate((std::vector<long>({4, 1, 4, 1,\
    \ 4, 4}))) == (4));\n    assert(candidate((std::vector<long>({3, 3}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({8, 8, 8, 8, 8, 8, 8, 8}))) == (8));\n\
    \    assert(candidate((std::vector<long>({2, 3, 3, 2, 2}))) == (2));\n    assert(candidate((std::vector<long>({2,\
    \ 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 2, 8, 2}))) == (2));\n    assert(candidate((std::vector<long>({6,\
    \ 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}))) == (1));\n    assert(candidate((std::vector<long>({8,\
    \ 8, 3, 6, 5, 6, 4}))) == (-1));\n    assert(candidate((std::vector<long>({6,\
    \ 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9})))\
    \ == (1));\n    assert(candidate((std::vector<long>({1, 9, 10, 1, 3}))) == (1));\n\
    \    assert(candidate((std::vector<long>({6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10,\
    \ 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}))) == (5));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({8, 8, 10, 6, 4, 3, 5, 8,\
    \ 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}))) == (4));\n    assert(candidate((std::vector<long>({2,\
    \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}))) == (2));\n    assert(candidate((std::vector<long>({1,\
    \ 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}))) == (1));\n    assert(candidate((std::vector<long>({9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}))) == (4));\n    assert(candidate((std::vector<long>({2, 6, 4,\
    \ 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}))) == (4));\n\
    \    assert(candidate((std::vector<long>({9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10,\
    \ 3, 8, 2, 6, 2, 3, 1}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({10}))) == (-1));\n    assert(candidate((std::vector<long>({9,\
    \ 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}))) == (1));\n    assert(candidate((std::vector<long>({7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 10, 10, 9, 2}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmp3vtx3m9h: /tmp/tmp3vtx3m9h.cpp:28: int main(): Assertion `candidate((std::vector<long>({4,\
    \ 1, 4, 1, 4, 4}))) == (4)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the list.\n// If no such a value exist, return -1.\n// Examples:\n// search([4,\
    \ 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n// search([5,\
    \ 5, 4, 4, 4]) == -1\nlong search(std::vector<long> lst) {\n    long ans = -1;\n\
    \    long freq[1000];\n    for(long i = 0; i < lst.size(); i++) {\n        freq[lst[i]]++;\n\
    \    }\n    for(long i = 0; i < 1000; i++) {\n        if(freq[i] >= lst.size())\
    \ {\n            ans = i;\n            break;\n        }\n    }\n    return ans;\n\
    }\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5, 1}))) == (1));\n    assert(candidate((std::vector<long>({4, 1, 4, 1,\
    \ 4, 4}))) == (4));\n    assert(candidate((std::vector<long>({3, 3}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({8, 8, 8, 8, 8, 8, 8, 8}))) == (8));\n\
    \    assert(candidate((std::vector<long>({2, 3, 3, 2, 2}))) == (2));\n    assert(candidate((std::vector<long>({2,\
    \ 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 2, 8, 2}))) == (2));\n    assert(candidate((std::vector<long>({6,\
    \ 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}))) == (1));\n    assert(candidate((std::vector<long>({8,\
    \ 8, 3, 6, 5, 6, 4}))) == (-1));\n    assert(candidate((std::vector<long>({6,\
    \ 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9})))\
    \ == (1));\n    assert(candidate((std::vector<long>({1, 9, 10, 1, 3}))) == (1));\n\
    \    assert(candidate((std::vector<long>({6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10,\
    \ 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}))) == (5));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({8, 8, 10, 6, 4, 3, 5, 8,\
    \ 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}))) == (4));\n    assert(candidate((std::vector<long>({2,\
    \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}))) == (2));\n    assert(candidate((std::vector<long>({1,\
    \ 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}))) == (1));\n    assert(candidate((std::vector<long>({9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}))) == (4));\n    assert(candidate((std::vector<long>({2, 6, 4,\
    \ 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}))) == (4));\n\
    \    assert(candidate((std::vector<long>({9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10,\
    \ 3, 8, 2, 6, 2, 3, 1}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({10}))) == (-1));\n    assert(candidate((std::vector<long>({9,\
    \ 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}))) == (1));\n    assert(candidate((std::vector<long>({7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 10, 10, 9, 2}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmpkmoa15hi: /tmp/tmpkmoa15hi.cpp:27: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 5, 5, 5, 1}))) == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the list.\n// If no such a value exist, return -1.\n// Examples:\n// search([4,\
    \ 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n// search([5,\
    \ 5, 4, 4, 4]) == -1\nlong search(std::vector<long> lst) {\n    long ans = -1;\n\
    \    long freq[100000];\n    long maxFreq = -1;\n    for (long i : lst) {\n  \
    \      freq[i] = freq[i] + 1;\n        if (freq[i] > maxFreq) {\n            maxFreq\
    \ = freq[i];\n            ans = i;\n        }\n    }\n    return ans;\n}\nint\
    \ main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5, 1}))) == (1));\n    assert(candidate((std::vector<long>({4, 1, 4, 1,\
    \ 4, 4}))) == (4));\n    assert(candidate((std::vector<long>({3, 3}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({8, 8, 8, 8, 8, 8, 8, 8}))) == (8));\n\
    \    assert(candidate((std::vector<long>({2, 3, 3, 2, 2}))) == (2));\n    assert(candidate((std::vector<long>({2,\
    \ 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 2, 8, 2}))) == (2));\n    assert(candidate((std::vector<long>({6,\
    \ 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}))) == (1));\n    assert(candidate((std::vector<long>({8,\
    \ 8, 3, 6, 5, 6, 4}))) == (-1));\n    assert(candidate((std::vector<long>({6,\
    \ 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9})))\
    \ == (1));\n    assert(candidate((std::vector<long>({1, 9, 10, 1, 3}))) == (1));\n\
    \    assert(candidate((std::vector<long>({6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10,\
    \ 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}))) == (5));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({8, 8, 10, 6, 4, 3, 5, 8,\
    \ 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}))) == (4));\n    assert(candidate((std::vector<long>({2,\
    \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}))) == (2));\n    assert(candidate((std::vector<long>({1,\
    \ 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}))) == (1));\n    assert(candidate((std::vector<long>({9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}))) == (4));\n    assert(candidate((std::vector<long>({2, 6, 4,\
    \ 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}))) == (4));\n\
    \    assert(candidate((std::vector<long>({9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10,\
    \ 3, 8, 2, 6, 2, 3, 1}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({10}))) == (-1));\n    assert(candidate((std::vector<long>({9,\
    \ 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}))) == (1));\n    assert(candidate((std::vector<long>({7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 10, 10, 9, 2}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmpqinarjzc: /tmp/tmpqinarjzc.cpp:26: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 5, 5, 5, 1}))) == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the list.\n// If no such a value exist, return -1.\n// Examples:\n// search([4,\
    \ 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n// search([5,\
    \ 5, 4, 4, 4]) == -1\nlong search(std::vector<long> lst) {\n    long ans = -1;\n\
    \    long freq = 0;\n    for (long i : lst) {\n        freq += i;\n        if\
    \ (freq >= i) {\n            ans = i;\n            break;\n        }\n    }\n\
    \    return ans;\n}\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5, 1}))) == (1));\n    assert(candidate((std::vector<long>({4, 1, 4, 1,\
    \ 4, 4}))) == (4));\n    assert(candidate((std::vector<long>({3, 3}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({8, 8, 8, 8, 8, 8, 8, 8}))) == (8));\n\
    \    assert(candidate((std::vector<long>({2, 3, 3, 2, 2}))) == (2));\n    assert(candidate((std::vector<long>({2,\
    \ 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 2, 8, 2}))) == (2));\n    assert(candidate((std::vector<long>({6,\
    \ 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}))) == (1));\n    assert(candidate((std::vector<long>({8,\
    \ 8, 3, 6, 5, 6, 4}))) == (-1));\n    assert(candidate((std::vector<long>({6,\
    \ 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9})))\
    \ == (1));\n    assert(candidate((std::vector<long>({1, 9, 10, 1, 3}))) == (1));\n\
    \    assert(candidate((std::vector<long>({6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10,\
    \ 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}))) == (5));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({8, 8, 10, 6, 4, 3, 5, 8,\
    \ 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}))) == (4));\n    assert(candidate((std::vector<long>({2,\
    \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}))) == (2));\n    assert(candidate((std::vector<long>({1,\
    \ 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}))) == (1));\n    assert(candidate((std::vector<long>({9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}))) == (4));\n    assert(candidate((std::vector<long>({2, 6, 4,\
    \ 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}))) == (4));\n\
    \    assert(candidate((std::vector<long>({9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10,\
    \ 3, 8, 2, 6, 2, 3, 1}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({10}))) == (-1));\n    assert(candidate((std::vector<long>({9,\
    \ 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}))) == (1));\n    assert(candidate((std::vector<long>({7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 10, 10, 9, 2}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmpm3wfiy_7: /tmp/tmpm3wfiy_7.cpp:25: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 5, 5, 5, 1}))) == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the list.\n// If no such a value exist, return -1.\n// Examples:\n// search([4,\
    \ 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n// search([5,\
    \ 5, 4, 4, 4]) == -1\nlong search(std::vector<long> lst) {\n    // Your code here\n\
    \    long ans = -1;\n    long freq = 0;\n    for (long i : lst) {\n        freq\
    \ += i;\n        if (freq >= i) {\n            ans = i;\n            break;\n\
    \        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate = search;\n\
    \    assert(candidate((std::vector<long>({5, 5, 5, 5, 1}))) == (1));\n    assert(candidate((std::vector<long>({4,\
    \ 1, 4, 1, 4, 4}))) == (4));\n    assert(candidate((std::vector<long>({3, 3})))\
    \ == (-1));\n    assert(candidate((std::vector<long>({8, 8, 8, 8, 8, 8, 8, 8})))\
    \ == (8));\n    assert(candidate((std::vector<long>({2, 3, 3, 2, 2}))) == (2));\n\
    \    assert(candidate((std::vector<long>({2, 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10,\
    \ 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}))) == (1));\n    assert(candidate((std::vector<long>({3,\
    \ 2, 8, 2}))) == (2));\n    assert(candidate((std::vector<long>({6, 7, 1, 8, 8,\
    \ 10, 5, 8, 5, 3, 10}))) == (1));\n    assert(candidate((std::vector<long>({8,\
    \ 8, 3, 6, 5, 6, 4}))) == (-1));\n    assert(candidate((std::vector<long>({6,\
    \ 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9})))\
    \ == (1));\n    assert(candidate((std::vector<long>({1, 9, 10, 1, 3}))) == (1));\n\
    \    assert(candidate((std::vector<long>({6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10,\
    \ 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}))) == (5));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({8, 8, 10, 6, 4, 3, 5, 8,\
    \ 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}))) == (4));\n    assert(candidate((std::vector<long>({2,\
    \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}))) == (2));\n    assert(candidate((std::vector<long>({1,\
    \ 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}))) == (1));\n    assert(candidate((std::vector<long>({9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}))) == (4));\n    assert(candidate((std::vector<long>({2, 6, 4,\
    \ 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}))) == (4));\n\
    \    assert(candidate((std::vector<long>({9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10,\
    \ 3, 8, 2, 6, 2, 3, 1}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({10}))) == (-1));\n    assert(candidate((std::vector<long>({9,\
    \ 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}))) == (1));\n    assert(candidate((std::vector<long>({7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 10, 10, 9, 2}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmpptvd1eji: /tmp/tmpptvd1eji.cpp:26: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 5, 5, 5, 1}))) == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the list.\n// If no such a value exist, return -1.\n// Examples:\n// search([4,\
    \ 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n// search([5,\
    \ 5, 4, 4, 4]) == -1\nlong search(std::vector<long> lst) {\n    long maxVal =\
    \ lst[0];\n    long maxFreq = lst[0];\n    for (long i : lst) {\n        if (i\
    \ > maxVal) {\n            maxVal = i;\n            maxFreq = i;\n        } else\
    \ if (i == maxVal) {\n            maxFreq++;\n        }\n    }\n    return maxFreq\
    \ > lst.size() ? -1 : maxVal;\n}\nint main() {\n    auto candidate = search;\n\
    \    assert(candidate((std::vector<long>({5, 5, 5, 5, 1}))) == (1));\n    assert(candidate((std::vector<long>({4,\
    \ 1, 4, 1, 4, 4}))) == (4));\n    assert(candidate((std::vector<long>({3, 3})))\
    \ == (-1));\n    assert(candidate((std::vector<long>({8, 8, 8, 8, 8, 8, 8, 8})))\
    \ == (8));\n    assert(candidate((std::vector<long>({2, 3, 3, 2, 2}))) == (2));\n\
    \    assert(candidate((std::vector<long>({2, 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10,\
    \ 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}))) == (1));\n    assert(candidate((std::vector<long>({3,\
    \ 2, 8, 2}))) == (2));\n    assert(candidate((std::vector<long>({6, 7, 1, 8, 8,\
    \ 10, 5, 8, 5, 3, 10}))) == (1));\n    assert(candidate((std::vector<long>({8,\
    \ 8, 3, 6, 5, 6, 4}))) == (-1));\n    assert(candidate((std::vector<long>({6,\
    \ 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9})))\
    \ == (1));\n    assert(candidate((std::vector<long>({1, 9, 10, 1, 3}))) == (1));\n\
    \    assert(candidate((std::vector<long>({6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10,\
    \ 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}))) == (5));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({8, 8, 10, 6, 4, 3, 5, 8,\
    \ 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}))) == (4));\n    assert(candidate((std::vector<long>({2,\
    \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}))) == (2));\n    assert(candidate((std::vector<long>({1,\
    \ 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}))) == (1));\n    assert(candidate((std::vector<long>({9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}))) == (4));\n    assert(candidate((std::vector<long>({2, 6, 4,\
    \ 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}))) == (4));\n\
    \    assert(candidate((std::vector<long>({9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10,\
    \ 3, 8, 2, 6, 2, 3, 1}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({10}))) == (-1));\n    assert(candidate((std::vector<long>({9,\
    \ 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}))) == (1));\n    assert(candidate((std::vector<long>({7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 10, 10, 9, 2}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmp3di2wtnu: /tmp/tmp3di2wtnu.cpp:26: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 5, 5, 5, 1}))) == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the list.\n// If no such a value exist, return -1.\n// Examples:\n// search([4,\
    \ 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n// search([5,\
    \ 5, 4, 4, 4]) == -1\nlong search(std::vector<long> lst) {\n    long ans = -1;\n\
    \    long freq[100000];\n    for (long i = 0; i < lst.size(); i++) {\n       \
    \ freq[lst[i]]++;\n    }\n    for (long i = 1; i <= 100000; i++) {\n        if\
    \ (freq[i] >= i) {\n            ans = i;\n            break;\n        }\n    }\n\
    \    return ans;\n}\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5, 1}))) == (1));\n    assert(candidate((std::vector<long>({4, 1, 4, 1,\
    \ 4, 4}))) == (4));\n    assert(candidate((std::vector<long>({3, 3}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({8, 8, 8, 8, 8, 8, 8, 8}))) == (8));\n\
    \    assert(candidate((std::vector<long>({2, 3, 3, 2, 2}))) == (2));\n    assert(candidate((std::vector<long>({2,\
    \ 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 2, 8, 2}))) == (2));\n    assert(candidate((std::vector<long>({6,\
    \ 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}))) == (1));\n    assert(candidate((std::vector<long>({8,\
    \ 8, 3, 6, 5, 6, 4}))) == (-1));\n    assert(candidate((std::vector<long>({6,\
    \ 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9})))\
    \ == (1));\n    assert(candidate((std::vector<long>({1, 9, 10, 1, 3}))) == (1));\n\
    \    assert(candidate((std::vector<long>({6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10,\
    \ 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}))) == (5));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({8, 8, 10, 6, 4, 3, 5, 8,\
    \ 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}))) == (4));\n    assert(candidate((std::vector<long>({2,\
    \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}))) == (2));\n    assert(candidate((std::vector<long>({1,\
    \ 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}))) == (1));\n    assert(candidate((std::vector<long>({9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}))) == (4));\n    assert(candidate((std::vector<long>({2, 6, 4,\
    \ 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}))) == (4));\n\
    \    assert(candidate((std::vector<long>({9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10,\
    \ 3, 8, 2, 6, 2, 3, 1}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({10}))) == (-1));\n    assert(candidate((std::vector<long>({9,\
    \ 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}))) == (1));\n    assert(candidate((std::vector<long>({7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 10, 10, 9, 2}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmpcycgxolm: /tmp/tmpcycgxolm.cpp:28: int main(): Assertion `candidate((std::vector<long>({4,\
    \ 1, 4, 1, 4, 4}))) == (4)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the list.\n// If no such a value exist, return -1.\n// Examples:\n// search([4,\
    \ 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n// search([5,\
    \ 5, 4, 4, 4]) == -1\nlong search(std::vector<long> lst) {\n    long ans = -1;\n\
    \    long freq[100];\n    for (long i = 0; i < lst.size(); i++) {\n        freq[lst[i]]++;\n\
    \    }\n    for (long i = 0; i < 100; i++) {\n        if (freq[i] >= lst.size())\
    \ {\n            ans = i;\n            break;\n        }\n    }\n    return ans;\n\
    }\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5, 1}))) == (1));\n    assert(candidate((std::vector<long>({4, 1, 4, 1,\
    \ 4, 4}))) == (4));\n    assert(candidate((std::vector<long>({3, 3}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({8, 8, 8, 8, 8, 8, 8, 8}))) == (8));\n\
    \    assert(candidate((std::vector<long>({2, 3, 3, 2, 2}))) == (2));\n    assert(candidate((std::vector<long>({2,\
    \ 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 2, 8, 2}))) == (2));\n    assert(candidate((std::vector<long>({6,\
    \ 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}))) == (1));\n    assert(candidate((std::vector<long>({8,\
    \ 8, 3, 6, 5, 6, 4}))) == (-1));\n    assert(candidate((std::vector<long>({6,\
    \ 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9})))\
    \ == (1));\n    assert(candidate((std::vector<long>({1, 9, 10, 1, 3}))) == (1));\n\
    \    assert(candidate((std::vector<long>({6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10,\
    \ 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}))) == (5));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({8, 8, 10, 6, 4, 3, 5, 8,\
    \ 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}))) == (4));\n    assert(candidate((std::vector<long>({2,\
    \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}))) == (2));\n    assert(candidate((std::vector<long>({1,\
    \ 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}))) == (1));\n    assert(candidate((std::vector<long>({9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}))) == (4));\n    assert(candidate((std::vector<long>({2, 6, 4,\
    \ 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}))) == (4));\n\
    \    assert(candidate((std::vector<long>({9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10,\
    \ 3, 8, 2, 6, 2, 3, 1}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({10}))) == (-1));\n    assert(candidate((std::vector<long>({9,\
    \ 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}))) == (1));\n    assert(candidate((std::vector<long>({7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 10, 10, 9, 2}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmpeqy65t_l: /tmp/tmpeqy65t_l.cpp:27: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 5, 5, 5, 1}))) == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the list.\n// If no such a value exist, return -1.\n// Examples:\n// search([4,\
    \ 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n// search([5,\
    \ 5, 4, 4, 4]) == -1\nlong search(std::vector<long> lst) {\n    long ans = -1;\n\
    \    long freq = 0;\n    for (long i : lst) {\n        freq++;\n        if (freq\
    \ > i) {\n            freq = i;\n            ans = i;\n        }\n    }\n    return\
    \ ans;\n}\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5, 1}))) == (1));\n    assert(candidate((std::vector<long>({4, 1, 4, 1,\
    \ 4, 4}))) == (4));\n    assert(candidate((std::vector<long>({3, 3}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({8, 8, 8, 8, 8, 8, 8, 8}))) == (8));\n\
    \    assert(candidate((std::vector<long>({2, 3, 3, 2, 2}))) == (2));\n    assert(candidate((std::vector<long>({2,\
    \ 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 2, 8, 2}))) == (2));\n    assert(candidate((std::vector<long>({6,\
    \ 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}))) == (1));\n    assert(candidate((std::vector<long>({8,\
    \ 8, 3, 6, 5, 6, 4}))) == (-1));\n    assert(candidate((std::vector<long>({6,\
    \ 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9})))\
    \ == (1));\n    assert(candidate((std::vector<long>({1, 9, 10, 1, 3}))) == (1));\n\
    \    assert(candidate((std::vector<long>({6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10,\
    \ 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}))) == (5));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({8, 8, 10, 6, 4, 3, 5, 8,\
    \ 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}))) == (4));\n    assert(candidate((std::vector<long>({2,\
    \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}))) == (2));\n    assert(candidate((std::vector<long>({1,\
    \ 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}))) == (1));\n    assert(candidate((std::vector<long>({9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}))) == (4));\n    assert(candidate((std::vector<long>({2, 6, 4,\
    \ 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}))) == (4));\n\
    \    assert(candidate((std::vector<long>({9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10,\
    \ 3, 8, 2, 6, 2, 3, 1}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({10}))) == (-1));\n    assert(candidate((std::vector<long>({9,\
    \ 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}))) == (1));\n    assert(candidate((std::vector<long>({7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 10, 10, 9, 2}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmpjtarvad9: /tmp/tmpjtarvad9.cpp:26: int main(): Assertion `candidate((std::vector<long>({4,\
    \ 1, 4, 1, 4, 4}))) == (4)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the list.\n// If no such a value exist, return -1.\n// Examples:\n// search([4,\
    \ 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n// search([5,\
    \ 5, 4, 4, 4]) == -1\nlong search(std::vector<long> lst) {\n    long ans = -1;\n\
    \    long freq[100];\n    for(long i = 0; i < lst.size(); i++) {\n        freq[lst[i]]++;\n\
    \    }\n    for(long i = 0; i < 100; i++) {\n        if(freq[i] >= lst.size())\
    \ {\n            break;\n        }\n        if(freq[i] > ans) {\n            ans\
    \ = freq[i];\n        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate\
    \ = search;\n    assert(candidate((std::vector<long>({5, 5, 5, 5, 1}))) == (1));\n\
    \    assert(candidate((std::vector<long>({4, 1, 4, 1, 4, 4}))) == (4));\n    assert(candidate((std::vector<long>({3,\
    \ 3}))) == (-1));\n    assert(candidate((std::vector<long>({8, 8, 8, 8, 8, 8,\
    \ 8, 8}))) == (8));\n    assert(candidate((std::vector<long>({2, 3, 3, 2, 2})))\
    \ == (2));\n    assert(candidate((std::vector<long>({2, 7, 8, 8, 4, 8, 7, 3, 9,\
    \ 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}))) == (1));\n    assert(candidate((std::vector<long>({3,\
    \ 2, 8, 2}))) == (2));\n    assert(candidate((std::vector<long>({6, 7, 1, 8, 8,\
    \ 10, 5, 8, 5, 3, 10}))) == (1));\n    assert(candidate((std::vector<long>({8,\
    \ 8, 3, 6, 5, 6, 4}))) == (-1));\n    assert(candidate((std::vector<long>({6,\
    \ 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9})))\
    \ == (1));\n    assert(candidate((std::vector<long>({1, 9, 10, 1, 3}))) == (1));\n\
    \    assert(candidate((std::vector<long>({6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10,\
    \ 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}))) == (5));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({8, 8, 10, 6, 4, 3, 5, 8,\
    \ 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}))) == (4));\n    assert(candidate((std::vector<long>({2,\
    \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}))) == (2));\n    assert(candidate((std::vector<long>({1,\
    \ 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}))) == (1));\n    assert(candidate((std::vector<long>({9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}))) == (4));\n    assert(candidate((std::vector<long>({2, 6, 4,\
    \ 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}))) == (4));\n\
    \    assert(candidate((std::vector<long>({9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10,\
    \ 3, 8, 2, 6, 2, 3, 1}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({10}))) == (-1));\n    assert(candidate((std::vector<long>({9,\
    \ 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}))) == (1));\n    assert(candidate((std::vector<long>({7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 10, 10, 9, 2}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmpgy98xf2j: /tmp/tmpgy98xf2j.cpp:30: int main(): Assertion `candidate((std::vector<long>({4,\
    \ 1, 4, 1, 4, 4}))) == (4)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the list.\n// If no such a value exist, return -1.\n// Examples:\n// search([4,\
    \ 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n// search([5,\
    \ 5, 4, 4, 4]) == -1\nlong search(std::vector<long> lst) {\n    long ans = -1;\n\
    \    long freq = 0;\n    for (long i : lst) {\n        freq += i;\n        if\
    \ (freq >= i) {\n            ans = i;\n            break;\n        }\n    }\n\
    \    return ans;\n}\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5, 1}))) == (1));\n    assert(candidate((std::vector<long>({4, 1, 4, 1,\
    \ 4, 4}))) == (4));\n    assert(candidate((std::vector<long>({3, 3}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({8, 8, 8, 8, 8, 8, 8, 8}))) == (8));\n\
    \    assert(candidate((std::vector<long>({2, 3, 3, 2, 2}))) == (2));\n    assert(candidate((std::vector<long>({2,\
    \ 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 2, 8, 2}))) == (2));\n    assert(candidate((std::vector<long>({6,\
    \ 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}))) == (1));\n    assert(candidate((std::vector<long>({8,\
    \ 8, 3, 6, 5, 6, 4}))) == (-1));\n    assert(candidate((std::vector<long>({6,\
    \ 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9})))\
    \ == (1));\n    assert(candidate((std::vector<long>({1, 9, 10, 1, 3}))) == (1));\n\
    \    assert(candidate((std::vector<long>({6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10,\
    \ 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}))) == (5));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({8, 8, 10, 6, 4, 3, 5, 8,\
    \ 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}))) == (4));\n    assert(candidate((std::vector<long>({2,\
    \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}))) == (2));\n    assert(candidate((std::vector<long>({1,\
    \ 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}))) == (1));\n    assert(candidate((std::vector<long>({9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}))) == (4));\n    assert(candidate((std::vector<long>({2, 6, 4,\
    \ 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}))) == (4));\n\
    \    assert(candidate((std::vector<long>({9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10,\
    \ 3, 8, 2, 6, 2, 3, 1}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({10}))) == (-1));\n    assert(candidate((std::vector<long>({9,\
    \ 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}))) == (1));\n    assert(candidate((std::vector<long>({7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 10, 10, 9, 2}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmp4e4sg3qo: /tmp/tmp4e4sg3qo.cpp:25: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 5, 5, 5, 1}))) == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the list.\n// If no such a value exist, return -1.\n// Examples:\n// search([4,\
    \ 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n// search([5,\
    \ 5, 4, 4, 4]) == -1\nlong search(std::vector<long> lst) {\n    long ans = -1;\n\
    \    long freq[10000];\n    for (long i : lst) {\n        freq[i] = freq[i] +\
    \ 1;\n    }\n    for (long i : lst) {\n        if (freq[i] >= i) {\n         \
    \   ans = i;\n            break;\n        }\n    }\n    return ans;\n}\nint main()\
    \ {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5, 1}))) == (1));\n    assert(candidate((std::vector<long>({4, 1, 4, 1,\
    \ 4, 4}))) == (4));\n    assert(candidate((std::vector<long>({3, 3}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({8, 8, 8, 8, 8, 8, 8, 8}))) == (8));\n\
    \    assert(candidate((std::vector<long>({2, 3, 3, 2, 2}))) == (2));\n    assert(candidate((std::vector<long>({2,\
    \ 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 2, 8, 2}))) == (2));\n    assert(candidate((std::vector<long>({6,\
    \ 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}))) == (1));\n    assert(candidate((std::vector<long>({8,\
    \ 8, 3, 6, 5, 6, 4}))) == (-1));\n    assert(candidate((std::vector<long>({6,\
    \ 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9})))\
    \ == (1));\n    assert(candidate((std::vector<long>({1, 9, 10, 1, 3}))) == (1));\n\
    \    assert(candidate((std::vector<long>({6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10,\
    \ 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}))) == (5));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({8, 8, 10, 6, 4, 3, 5, 8,\
    \ 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}))) == (4));\n    assert(candidate((std::vector<long>({2,\
    \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}))) == (2));\n    assert(candidate((std::vector<long>({1,\
    \ 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}))) == (1));\n    assert(candidate((std::vector<long>({9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}))) == (4));\n    assert(candidate((std::vector<long>({2, 6, 4,\
    \ 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}))) == (4));\n\
    \    assert(candidate((std::vector<long>({9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10,\
    \ 3, 8, 2, 6, 2, 3, 1}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({10}))) == (-1));\n    assert(candidate((std::vector<long>({9,\
    \ 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}))) == (1));\n    assert(candidate((std::vector<long>({7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 10, 10, 9, 2}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmpmm8_k63i: /tmp/tmpmm8_k63i.cpp:32: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}))) == (1)'\
    \ failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the list.\n// If no such a value exist, return -1.\n// Examples:\n// search([4,\
    \ 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n// search([5,\
    \ 5, 4, 4, 4]) == -1\nlong search(std::vector<long> lst) {\n    long ans = -1;\n\
    \    long freq[100000];\n    for(long i = 0; i < lst.size(); i++) {\n        freq[lst[i]]++;\n\
    \    }\n    for(long i = 0; i < 100000; i++) {\n        if(freq[i] >= lst.size())\
    \ {\n            ans = i;\n            break;\n        }\n    }\n    return ans;\n\
    }\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5, 1}))) == (1));\n    assert(candidate((std::vector<long>({4, 1, 4, 1,\
    \ 4, 4}))) == (4));\n    assert(candidate((std::vector<long>({3, 3}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({8, 8, 8, 8, 8, 8, 8, 8}))) == (8));\n\
    \    assert(candidate((std::vector<long>({2, 3, 3, 2, 2}))) == (2));\n    assert(candidate((std::vector<long>({2,\
    \ 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 2, 8, 2}))) == (2));\n    assert(candidate((std::vector<long>({6,\
    \ 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}))) == (1));\n    assert(candidate((std::vector<long>({8,\
    \ 8, 3, 6, 5, 6, 4}))) == (-1));\n    assert(candidate((std::vector<long>({6,\
    \ 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9})))\
    \ == (1));\n    assert(candidate((std::vector<long>({1, 9, 10, 1, 3}))) == (1));\n\
    \    assert(candidate((std::vector<long>({6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10,\
    \ 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}))) == (5));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({8, 8, 10, 6, 4, 3, 5, 8,\
    \ 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}))) == (4));\n    assert(candidate((std::vector<long>({2,\
    \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}))) == (2));\n    assert(candidate((std::vector<long>({1,\
    \ 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}))) == (1));\n    assert(candidate((std::vector<long>({9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}))) == (4));\n    assert(candidate((std::vector<long>({2, 6, 4,\
    \ 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}))) == (4));\n\
    \    assert(candidate((std::vector<long>({9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10,\
    \ 3, 8, 2, 6, 2, 3, 1}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({10}))) == (-1));\n    assert(candidate((std::vector<long>({9,\
    \ 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}))) == (1));\n    assert(candidate((std::vector<long>({7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 10, 10, 9, 2}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmpfda6qvrt: /tmp/tmpfda6qvrt.cpp:27: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 5, 5, 5, 1}))) == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the list.\n// If no such a value exist, return -1.\n// Examples:\n// search([4,\
    \ 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n// search([5,\
    \ 5, 4, 4, 4]) == -1\nlong search(std::vector<long> lst) {\n    long ans = -1;\n\
    \    long freq[100];\n    for (long i : lst) {\n        freq[i] = freq[i] + 1;\n\
    \    }\n    for (long i = 0; i < 100; i++) {\n        if (freq[i] > ans) {\n \
    \           ans = freq[i];\n        }\n    }\n    return ans;\n}\nint main() {\n\
    \    auto candidate = search;\n    assert(candidate((std::vector<long>({5, 5,\
    \ 5, 5, 1}))) == (1));\n    assert(candidate((std::vector<long>({4, 1, 4, 1, 4,\
    \ 4}))) == (4));\n    assert(candidate((std::vector<long>({3, 3}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({8, 8, 8, 8, 8, 8, 8, 8}))) == (8));\n\
    \    assert(candidate((std::vector<long>({2, 3, 3, 2, 2}))) == (2));\n    assert(candidate((std::vector<long>({2,\
    \ 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 2, 8, 2}))) == (2));\n    assert(candidate((std::vector<long>({6,\
    \ 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}))) == (1));\n    assert(candidate((std::vector<long>({8,\
    \ 8, 3, 6, 5, 6, 4}))) == (-1));\n    assert(candidate((std::vector<long>({6,\
    \ 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9})))\
    \ == (1));\n    assert(candidate((std::vector<long>({1, 9, 10, 1, 3}))) == (1));\n\
    \    assert(candidate((std::vector<long>({6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10,\
    \ 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}))) == (5));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({8, 8, 10, 6, 4, 3, 5, 8,\
    \ 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}))) == (4));\n    assert(candidate((std::vector<long>({2,\
    \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}))) == (2));\n    assert(candidate((std::vector<long>({1,\
    \ 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}))) == (1));\n    assert(candidate((std::vector<long>({9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}))) == (4));\n    assert(candidate((std::vector<long>({2, 6, 4,\
    \ 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}))) == (4));\n\
    \    assert(candidate((std::vector<long>({9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10,\
    \ 3, 8, 2, 6, 2, 3, 1}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({10}))) == (-1));\n    assert(candidate((std::vector<long>({9,\
    \ 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}))) == (1));\n    assert(candidate((std::vector<long>({7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 10, 10, 9, 2}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmpha2hbjks: /tmp/tmpha2hbjks.cpp:26: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 5, 5, 5, 1}))) == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the list.\n// If no such a value exist, return -1.\n// Examples:\n// search([4,\
    \ 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n// search([5,\
    \ 5, 4, 4, 4]) == -1\nlong search(std::vector<long> lst) {\n    // Your code here\n\
    \    long ans = -1;\n    long freq[1000];\n    for (long i = 0; i < lst.size();\
    \ i++) {\n        freq[lst[i]]++;\n    }\n    for (long i = 0; i < 1000; i++)\
    \ {\n        if (freq[i] >= lst.size()) {\n            ans = i;\n            break;\n\
    \        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate = search;\n\
    \    assert(candidate((std::vector<long>({5, 5, 5, 5, 1}))) == (1));\n    assert(candidate((std::vector<long>({4,\
    \ 1, 4, 1, 4, 4}))) == (4));\n    assert(candidate((std::vector<long>({3, 3})))\
    \ == (-1));\n    assert(candidate((std::vector<long>({8, 8, 8, 8, 8, 8, 8, 8})))\
    \ == (8));\n    assert(candidate((std::vector<long>({2, 3, 3, 2, 2}))) == (2));\n\
    \    assert(candidate((std::vector<long>({2, 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10,\
    \ 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}))) == (1));\n    assert(candidate((std::vector<long>({3,\
    \ 2, 8, 2}))) == (2));\n    assert(candidate((std::vector<long>({6, 7, 1, 8, 8,\
    \ 10, 5, 8, 5, 3, 10}))) == (1));\n    assert(candidate((std::vector<long>({8,\
    \ 8, 3, 6, 5, 6, 4}))) == (-1));\n    assert(candidate((std::vector<long>({6,\
    \ 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9})))\
    \ == (1));\n    assert(candidate((std::vector<long>({1, 9, 10, 1, 3}))) == (1));\n\
    \    assert(candidate((std::vector<long>({6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10,\
    \ 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}))) == (5));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({8, 8, 10, 6, 4, 3, 5, 8,\
    \ 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}))) == (4));\n    assert(candidate((std::vector<long>({2,\
    \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}))) == (2));\n    assert(candidate((std::vector<long>({1,\
    \ 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}))) == (1));\n    assert(candidate((std::vector<long>({9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}))) == (4));\n    assert(candidate((std::vector<long>({2, 6, 4,\
    \ 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}))) == (4));\n\
    \    assert(candidate((std::vector<long>({9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10,\
    \ 3, 8, 2, 6, 2, 3, 1}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({10}))) == (-1));\n    assert(candidate((std::vector<long>({9,\
    \ 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}))) == (1));\n    assert(candidate((std::vector<long>({7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 10, 10, 9, 2}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmpsipyem09: /tmp/tmpsipyem09.cpp:28: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 5, 5, 5, 1}))) == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the list.\n// If no such a value exist, return -1.\n// Examples:\n// search([4,\
    \ 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n// search([5,\
    \ 5, 4, 4, 4]) == -1\nlong search(std::vector<long> lst) {\n    // Your code here\n\
    \    long ans = -1;\n    long freq[100000];\n    long max = 0;\n    for (long\
    \ i : lst) {\n        freq[i] = freq[i] + 1;\n        if (freq[i] > max) {\n \
    \           max = freq[i];\n            ans = i;\n        }\n    }\n    return\
    \ ans;\n}\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5, 1}))) == (1));\n    assert(candidate((std::vector<long>({4, 1, 4, 1,\
    \ 4, 4}))) == (4));\n    assert(candidate((std::vector<long>({3, 3}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({8, 8, 8, 8, 8, 8, 8, 8}))) == (8));\n\
    \    assert(candidate((std::vector<long>({2, 3, 3, 2, 2}))) == (2));\n    assert(candidate((std::vector<long>({2,\
    \ 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 2, 8, 2}))) == (2));\n    assert(candidate((std::vector<long>({6,\
    \ 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}))) == (1));\n    assert(candidate((std::vector<long>({8,\
    \ 8, 3, 6, 5, 6, 4}))) == (-1));\n    assert(candidate((std::vector<long>({6,\
    \ 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9})))\
    \ == (1));\n    assert(candidate((std::vector<long>({1, 9, 10, 1, 3}))) == (1));\n\
    \    assert(candidate((std::vector<long>({6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10,\
    \ 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}))) == (5));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({8, 8, 10, 6, 4, 3, 5, 8,\
    \ 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}))) == (4));\n    assert(candidate((std::vector<long>({2,\
    \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}))) == (2));\n    assert(candidate((std::vector<long>({1,\
    \ 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}))) == (1));\n    assert(candidate((std::vector<long>({9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}))) == (4));\n    assert(candidate((std::vector<long>({2, 6, 4,\
    \ 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}))) == (4));\n\
    \    assert(candidate((std::vector<long>({9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10,\
    \ 3, 8, 2, 6, 2, 3, 1}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({10}))) == (-1));\n    assert(candidate((std::vector<long>({9,\
    \ 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}))) == (1));\n    assert(candidate((std::vector<long>({7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 10, 10, 9, 2}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmpdpqgolm8: /tmp/tmpdpqgolm8.cpp:27: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 5, 5, 5, 1}))) == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the list.\n// If no such a value exist, return -1.\n// Examples:\n// search([4,\
    \ 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n// search([5,\
    \ 5, 4, 4, 4]) == -1\nlong search(std::vector<long> lst) {\n    long ans = -1;\n\
    \    long freq[100];\n    for(long i = 0; i < lst.size(); i++) {\n        freq[lst[i]]++;\n\
    \    }\n    for(long i = 0; i < lst.size(); i++) {\n        if(freq[lst[i]] >=\
    \ lst[i]) {\n            ans = lst[i];\n            break;\n        }\n    }\n\
    \    return ans;\n}\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5, 1}))) == (1));\n    assert(candidate((std::vector<long>({4, 1, 4, 1,\
    \ 4, 4}))) == (4));\n    assert(candidate((std::vector<long>({3, 3}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({8, 8, 8, 8, 8, 8, 8, 8}))) == (8));\n\
    \    assert(candidate((std::vector<long>({2, 3, 3, 2, 2}))) == (2));\n    assert(candidate((std::vector<long>({2,\
    \ 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 2, 8, 2}))) == (2));\n    assert(candidate((std::vector<long>({6,\
    \ 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}))) == (1));\n    assert(candidate((std::vector<long>({8,\
    \ 8, 3, 6, 5, 6, 4}))) == (-1));\n    assert(candidate((std::vector<long>({6,\
    \ 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9})))\
    \ == (1));\n    assert(candidate((std::vector<long>({1, 9, 10, 1, 3}))) == (1));\n\
    \    assert(candidate((std::vector<long>({6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10,\
    \ 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}))) == (5));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({8, 8, 10, 6, 4, 3, 5, 8,\
    \ 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}))) == (4));\n    assert(candidate((std::vector<long>({2,\
    \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}))) == (2));\n    assert(candidate((std::vector<long>({1,\
    \ 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}))) == (1));\n    assert(candidate((std::vector<long>({9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}))) == (4));\n    assert(candidate((std::vector<long>({2, 6, 4,\
    \ 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}))) == (4));\n\
    \    assert(candidate((std::vector<long>({9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10,\
    \ 3, 8, 2, 6, 2, 3, 1}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({10}))) == (-1));\n    assert(candidate((std::vector<long>({9,\
    \ 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}))) == (1));\n    assert(candidate((std::vector<long>({7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 10, 10, 9, 2}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmp5c7li05_: /tmp/tmp5c7li05_.cpp:32: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}))) == (1)'\
    \ failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the list.\n// If no such a value exist, return -1.\n// Examples:\n// search([4,\
    \ 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n// search([5,\
    \ 5, 4, 4, 4]) == -1\nlong search(std::vector<long> lst) {\n    long ans = -1;\n\
    \    long freq = 0;\n    for (long i : lst) {\n        freq += i;\n        if\
    \ (freq >= i) {\n            ans = i;\n            freq -= i;\n        }\n   \
    \ }\n    return ans;\n}\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5, 1}))) == (1));\n    assert(candidate((std::vector<long>({4, 1, 4, 1,\
    \ 4, 4}))) == (4));\n    assert(candidate((std::vector<long>({3, 3}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({8, 8, 8, 8, 8, 8, 8, 8}))) == (8));\n\
    \    assert(candidate((std::vector<long>({2, 3, 3, 2, 2}))) == (2));\n    assert(candidate((std::vector<long>({2,\
    \ 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 2, 8, 2}))) == (2));\n    assert(candidate((std::vector<long>({6,\
    \ 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}))) == (1));\n    assert(candidate((std::vector<long>({8,\
    \ 8, 3, 6, 5, 6, 4}))) == (-1));\n    assert(candidate((std::vector<long>({6,\
    \ 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9})))\
    \ == (1));\n    assert(candidate((std::vector<long>({1, 9, 10, 1, 3}))) == (1));\n\
    \    assert(candidate((std::vector<long>({6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10,\
    \ 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}))) == (5));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({8, 8, 10, 6, 4, 3, 5, 8,\
    \ 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}))) == (4));\n    assert(candidate((std::vector<long>({2,\
    \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}))) == (2));\n    assert(candidate((std::vector<long>({1,\
    \ 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}))) == (1));\n    assert(candidate((std::vector<long>({9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}))) == (4));\n    assert(candidate((std::vector<long>({2, 6, 4,\
    \ 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}))) == (4));\n\
    \    assert(candidate((std::vector<long>({9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10,\
    \ 3, 8, 2, 6, 2, 3, 1}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({10}))) == (-1));\n    assert(candidate((std::vector<long>({9,\
    \ 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}))) == (1));\n    assert(candidate((std::vector<long>({7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 10, 10, 9, 2}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmpduwq4o_c: /tmp/tmpduwq4o_c.cpp:27: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 3}))) == (-1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the list.\n// If no such a value exist, return -1.\n// Examples:\n// search([4,\
    \ 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n// search([5,\
    \ 5, 4, 4, 4]) == -1\nlong search(std::vector<long> lst) {\n    long ans = -1;\n\
    \    long freq[100];\n    for (long i : lst) {\n        freq[i] = freq[i] + 1;\n\
    \    }\n    for (long i = 0; i < 100; i++) {\n        if (freq[i] >= lst[0]) {\n\
    \            ans = i;\n            break;\n        }\n    }\n    return ans;\n\
    }\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5, 1}))) == (1));\n    assert(candidate((std::vector<long>({4, 1, 4, 1,\
    \ 4, 4}))) == (4));\n    assert(candidate((std::vector<long>({3, 3}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({8, 8, 8, 8, 8, 8, 8, 8}))) == (8));\n\
    \    assert(candidate((std::vector<long>({2, 3, 3, 2, 2}))) == (2));\n    assert(candidate((std::vector<long>({2,\
    \ 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 2, 8, 2}))) == (2));\n    assert(candidate((std::vector<long>({6,\
    \ 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}))) == (1));\n    assert(candidate((std::vector<long>({8,\
    \ 8, 3, 6, 5, 6, 4}))) == (-1));\n    assert(candidate((std::vector<long>({6,\
    \ 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9})))\
    \ == (1));\n    assert(candidate((std::vector<long>({1, 9, 10, 1, 3}))) == (1));\n\
    \    assert(candidate((std::vector<long>({6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10,\
    \ 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}))) == (5));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({8, 8, 10, 6, 4, 3, 5, 8,\
    \ 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}))) == (4));\n    assert(candidate((std::vector<long>({2,\
    \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}))) == (2));\n    assert(candidate((std::vector<long>({1,\
    \ 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}))) == (1));\n    assert(candidate((std::vector<long>({9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}))) == (4));\n    assert(candidate((std::vector<long>({2, 6, 4,\
    \ 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}))) == (4));\n\
    \    assert(candidate((std::vector<long>({9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10,\
    \ 3, 8, 2, 6, 2, 3, 1}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({10}))) == (-1));\n    assert(candidate((std::vector<long>({9,\
    \ 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}))) == (1));\n    assert(candidate((std::vector<long>({7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 10, 10, 9, 2}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmp3yul8l49: /tmp/tmp3yul8l49.cpp:27: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 5, 5, 5, 1}))) == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the list.\n// If no such a value exist, return -1.\n// Examples:\n// search([4,\
    \ 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n// search([5,\
    \ 5, 4, 4, 4]) == -1\nlong search(std::vector<long> lst) {\n    long ans = -1;\n\
    \    long freq = 0;\n    for (long i : lst) {\n        freq += i;\n        if\
    \ (freq > ans) {\n            ans = freq;\n        }\n    }\n    return ans;\n\
    }\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5, 1}))) == (1));\n    assert(candidate((std::vector<long>({4, 1, 4, 1,\
    \ 4, 4}))) == (4));\n    assert(candidate((std::vector<long>({3, 3}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({8, 8, 8, 8, 8, 8, 8, 8}))) == (8));\n\
    \    assert(candidate((std::vector<long>({2, 3, 3, 2, 2}))) == (2));\n    assert(candidate((std::vector<long>({2,\
    \ 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 2, 8, 2}))) == (2));\n    assert(candidate((std::vector<long>({6,\
    \ 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}))) == (1));\n    assert(candidate((std::vector<long>({8,\
    \ 8, 3, 6, 5, 6, 4}))) == (-1));\n    assert(candidate((std::vector<long>({6,\
    \ 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9})))\
    \ == (1));\n    assert(candidate((std::vector<long>({1, 9, 10, 1, 3}))) == (1));\n\
    \    assert(candidate((std::vector<long>({6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10,\
    \ 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}))) == (5));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({8, 8, 10, 6, 4, 3, 5, 8,\
    \ 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}))) == (4));\n    assert(candidate((std::vector<long>({2,\
    \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}))) == (2));\n    assert(candidate((std::vector<long>({1,\
    \ 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}))) == (1));\n    assert(candidate((std::vector<long>({9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}))) == (4));\n    assert(candidate((std::vector<long>({2, 6, 4,\
    \ 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}))) == (4));\n\
    \    assert(candidate((std::vector<long>({9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10,\
    \ 3, 8, 2, 6, 2, 3, 1}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({10}))) == (-1));\n    assert(candidate((std::vector<long>({9,\
    \ 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}))) == (1));\n    assert(candidate((std::vector<long>({7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 10, 10, 9, 2}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmp2awmtivu: /tmp/tmp2awmtivu.cpp:24: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 5, 5, 5, 1}))) == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the list.\n// If no such a value exist, return -1.\n// Examples:\n// search([4,\
    \ 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n// search([5,\
    \ 5, 4, 4, 4]) == -1\nlong search(std::vector<long> lst) {\n    // Write your\
    \ code here\n    long ans = -1;\n    long freq[1000];\n    for(long i = 0; i <\
    \ lst.size(); i++){\n        freq[lst[i]]++;\n    }\n    for(long i = 0; i < 1000;\
    \ i++){\n        if(freq[i] > 0){\n            if(freq[i] >= ans){\n         \
    \       ans = freq[i];\n            }\n        }\n    }\n    return ans;\n}\n\
    int main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5, 1}))) == (1));\n    assert(candidate((std::vector<long>({4, 1, 4, 1,\
    \ 4, 4}))) == (4));\n    assert(candidate((std::vector<long>({3, 3}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({8, 8, 8, 8, 8, 8, 8, 8}))) == (8));\n\
    \    assert(candidate((std::vector<long>({2, 3, 3, 2, 2}))) == (2));\n    assert(candidate((std::vector<long>({2,\
    \ 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 2, 8, 2}))) == (2));\n    assert(candidate((std::vector<long>({6,\
    \ 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}))) == (1));\n    assert(candidate((std::vector<long>({8,\
    \ 8, 3, 6, 5, 6, 4}))) == (-1));\n    assert(candidate((std::vector<long>({6,\
    \ 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9})))\
    \ == (1));\n    assert(candidate((std::vector<long>({1, 9, 10, 1, 3}))) == (1));\n\
    \    assert(candidate((std::vector<long>({6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10,\
    \ 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}))) == (5));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({8, 8, 10, 6, 4, 3, 5, 8,\
    \ 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}))) == (4));\n    assert(candidate((std::vector<long>({2,\
    \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}))) == (2));\n    assert(candidate((std::vector<long>({1,\
    \ 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}))) == (1));\n    assert(candidate((std::vector<long>({9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}))) == (4));\n    assert(candidate((std::vector<long>({2, 6, 4,\
    \ 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}))) == (4));\n\
    \    assert(candidate((std::vector<long>({9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10,\
    \ 3, 8, 2, 6, 2, 3, 1}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({10}))) == (-1));\n    assert(candidate((std::vector<long>({9,\
    \ 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}))) == (1));\n    assert(candidate((std::vector<long>({7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 10, 10, 9, 2}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmpvs80kmkd: /tmp/tmpvs80kmkd.cpp:29: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 5, 5, 5, 1}))) == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the list.\n// If no such a value exist, return -1.\n// Examples:\n// search([4,\
    \ 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n// search([5,\
    \ 5, 4, 4, 4]) == -1\nlong search(std::vector<long> lst) {\n    long ans = -1;\n\
    \    long freq[1000];\n    for (long i : lst) {\n        freq[i] = freq[i] + 1;\n\
    \    }\n    for (long i : lst) {\n        if (freq[i] >= i) {\n            ans\
    \ = i;\n            break;\n        }\n    }\n    return ans;\n}\nint main() {\n\
    \    auto candidate = search;\n    assert(candidate((std::vector<long>({5, 5,\
    \ 5, 5, 1}))) == (1));\n    assert(candidate((std::vector<long>({4, 1, 4, 1, 4,\
    \ 4}))) == (4));\n    assert(candidate((std::vector<long>({3, 3}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({8, 8, 8, 8, 8, 8, 8, 8}))) == (8));\n\
    \    assert(candidate((std::vector<long>({2, 3, 3, 2, 2}))) == (2));\n    assert(candidate((std::vector<long>({2,\
    \ 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 2, 8, 2}))) == (2));\n    assert(candidate((std::vector<long>({6,\
    \ 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}))) == (1));\n    assert(candidate((std::vector<long>({8,\
    \ 8, 3, 6, 5, 6, 4}))) == (-1));\n    assert(candidate((std::vector<long>({6,\
    \ 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9})))\
    \ == (1));\n    assert(candidate((std::vector<long>({1, 9, 10, 1, 3}))) == (1));\n\
    \    assert(candidate((std::vector<long>({6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10,\
    \ 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}))) == (5));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({8, 8, 10, 6, 4, 3, 5, 8,\
    \ 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}))) == (4));\n    assert(candidate((std::vector<long>({2,\
    \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}))) == (2));\n    assert(candidate((std::vector<long>({1,\
    \ 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}))) == (1));\n    assert(candidate((std::vector<long>({9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}))) == (4));\n    assert(candidate((std::vector<long>({2, 6, 4,\
    \ 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}))) == (4));\n\
    \    assert(candidate((std::vector<long>({9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10,\
    \ 3, 8, 2, 6, 2, 3, 1}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({10}))) == (-1));\n    assert(candidate((std::vector<long>({9,\
    \ 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}))) == (1));\n    assert(candidate((std::vector<long>({7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 10, 10, 9, 2}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmpau3v96r3: /tmp/tmpau3v96r3.cpp:32: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}))) == (1)'\
    \ failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the list.\n// If no such a value exist, return -1.\n// Examples:\n// search([4,\
    \ 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n// search([5,\
    \ 5, 4, 4, 4]) == -1\nlong search(std::vector<long> lst) {\n    long ans = -1;\n\
    \    long freq[1000];\n    for(long i = 0; i < lst.size(); i++) {\n        freq[lst[i]]++;\n\
    \    }\n    for(long i = 1; i < 1000; i++) {\n        if(freq[i] >= freq[ans])\
    \ {\n            ans = i;\n        }\n    }\n    return ans;\n}\nint main() {\n\
    \    auto candidate = search;\n    assert(candidate((std::vector<long>({5, 5,\
    \ 5, 5, 1}))) == (1));\n    assert(candidate((std::vector<long>({4, 1, 4, 1, 4,\
    \ 4}))) == (4));\n    assert(candidate((std::vector<long>({3, 3}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({8, 8, 8, 8, 8, 8, 8, 8}))) == (8));\n\
    \    assert(candidate((std::vector<long>({2, 3, 3, 2, 2}))) == (2));\n    assert(candidate((std::vector<long>({2,\
    \ 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 2, 8, 2}))) == (2));\n    assert(candidate((std::vector<long>({6,\
    \ 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}))) == (1));\n    assert(candidate((std::vector<long>({8,\
    \ 8, 3, 6, 5, 6, 4}))) == (-1));\n    assert(candidate((std::vector<long>({6,\
    \ 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9})))\
    \ == (1));\n    assert(candidate((std::vector<long>({1, 9, 10, 1, 3}))) == (1));\n\
    \    assert(candidate((std::vector<long>({6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10,\
    \ 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}))) == (5));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({8, 8, 10, 6, 4, 3, 5, 8,\
    \ 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}))) == (4));\n    assert(candidate((std::vector<long>({2,\
    \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}))) == (2));\n    assert(candidate((std::vector<long>({1,\
    \ 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}))) == (1));\n    assert(candidate((std::vector<long>({9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}))) == (4));\n    assert(candidate((std::vector<long>({2, 6, 4,\
    \ 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}))) == (4));\n\
    \    assert(candidate((std::vector<long>({9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10,\
    \ 3, 8, 2, 6, 2, 3, 1}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({10}))) == (-1));\n    assert(candidate((std::vector<long>({9,\
    \ 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}))) == (1));\n    assert(candidate((std::vector<long>({7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 10, 10, 9, 2}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmp71krhrj0: /tmp/tmp71krhrj0.cpp:26: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 5, 5, 5, 1}))) == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the list.\n// If no such a value exist, return -1.\n// Examples:\n// search([4,\
    \ 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n// search([5,\
    \ 5, 4, 4, 4]) == -1\nlong search(std::vector<long> lst) {\n    long ans = -1;\n\
    \    long freq[100];\n    for (long i : lst) {\n        freq[i] = freq[i] + 1;\n\
    \    }\n    for (long i = 0; i < 100; i++) {\n        if (freq[i] >= lst[0]) {\n\
    \            ans = i;\n            break;\n        }\n    }\n    return ans;\n\
    }\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5, 1}))) == (1));\n    assert(candidate((std::vector<long>({4, 1, 4, 1,\
    \ 4, 4}))) == (4));\n    assert(candidate((std::vector<long>({3, 3}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({8, 8, 8, 8, 8, 8, 8, 8}))) == (8));\n\
    \    assert(candidate((std::vector<long>({2, 3, 3, 2, 2}))) == (2));\n    assert(candidate((std::vector<long>({2,\
    \ 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 2, 8, 2}))) == (2));\n    assert(candidate((std::vector<long>({6,\
    \ 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}))) == (1));\n    assert(candidate((std::vector<long>({8,\
    \ 8, 3, 6, 5, 6, 4}))) == (-1));\n    assert(candidate((std::vector<long>({6,\
    \ 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9})))\
    \ == (1));\n    assert(candidate((std::vector<long>({1, 9, 10, 1, 3}))) == (1));\n\
    \    assert(candidate((std::vector<long>({6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10,\
    \ 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}))) == (5));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({8, 8, 10, 6, 4, 3, 5, 8,\
    \ 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}))) == (4));\n    assert(candidate((std::vector<long>({2,\
    \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}))) == (2));\n    assert(candidate((std::vector<long>({1,\
    \ 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}))) == (1));\n    assert(candidate((std::vector<long>({9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}))) == (4));\n    assert(candidate((std::vector<long>({2, 6, 4,\
    \ 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}))) == (4));\n\
    \    assert(candidate((std::vector<long>({9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10,\
    \ 3, 8, 2, 6, 2, 3, 1}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({10}))) == (-1));\n    assert(candidate((std::vector<long>({9,\
    \ 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}))) == (1));\n    assert(candidate((std::vector<long>({7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 10, 10, 9, 2}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmpyswr4fqm: /tmp/tmpyswr4fqm.cpp:27: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 5, 5, 5, 1}))) == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the list.\n// If no such a value exist, return -1.\n// Examples:\n// search([4,\
    \ 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n// search([5,\
    \ 5, 4, 4, 4]) == -1\nlong search(std::vector<long> lst) {\n    long ans = -1;\n\
    \    long freq[100];\n    for(long &i : lst) {\n        freq[i] = freq[i] + 1;\n\
    \    }\n    for(long &i : freq) {\n        if(freq[i] > ans) {\n            ans\
    \ = freq[i];\n        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate\
    \ = search;\n    assert(candidate((std::vector<long>({5, 5, 5, 5, 1}))) == (1));\n\
    \    assert(candidate((std::vector<long>({4, 1, 4, 1, 4, 4}))) == (4));\n    assert(candidate((std::vector<long>({3,\
    \ 3}))) == (-1));\n    assert(candidate((std::vector<long>({8, 8, 8, 8, 8, 8,\
    \ 8, 8}))) == (8));\n    assert(candidate((std::vector<long>({2, 3, 3, 2, 2})))\
    \ == (2));\n    assert(candidate((std::vector<long>({2, 7, 8, 8, 4, 8, 7, 3, 9,\
    \ 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}))) == (1));\n    assert(candidate((std::vector<long>({3,\
    \ 2, 8, 2}))) == (2));\n    assert(candidate((std::vector<long>({6, 7, 1, 8, 8,\
    \ 10, 5, 8, 5, 3, 10}))) == (1));\n    assert(candidate((std::vector<long>({8,\
    \ 8, 3, 6, 5, 6, 4}))) == (-1));\n    assert(candidate((std::vector<long>({6,\
    \ 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9})))\
    \ == (1));\n    assert(candidate((std::vector<long>({1, 9, 10, 1, 3}))) == (1));\n\
    \    assert(candidate((std::vector<long>({6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10,\
    \ 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}))) == (5));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({8, 8, 10, 6, 4, 3, 5, 8,\
    \ 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}))) == (4));\n    assert(candidate((std::vector<long>({2,\
    \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}))) == (2));\n    assert(candidate((std::vector<long>({1,\
    \ 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}))) == (1));\n    assert(candidate((std::vector<long>({9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}))) == (4));\n    assert(candidate((std::vector<long>({2, 6, 4,\
    \ 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}))) == (4));\n\
    \    assert(candidate((std::vector<long>({9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10,\
    \ 3, 8, 2, 6, 2, 3, 1}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({10}))) == (-1));\n    assert(candidate((std::vector<long>({9,\
    \ 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}))) == (1));\n    assert(candidate((std::vector<long>({7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 10, 10, 9, 2}))) == (-1));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -7
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the list.\n// If no such a value exist, return -1.\n// Examples:\n// search([4,\
    \ 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n// search([5,\
    \ 5, 4, 4, 4]) == -1\nlong search(std::vector<long> lst) {\n    long ans = -1;\n\
    \    long freq = 0;\n    for(long i : lst) {\n        freq += i;\n        if(freq\
    \ >= i) {\n            ans = i;\n            break;\n        }\n    }\n    return\
    \ ans;\n}\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5, 1}))) == (1));\n    assert(candidate((std::vector<long>({4, 1, 4, 1,\
    \ 4, 4}))) == (4));\n    assert(candidate((std::vector<long>({3, 3}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({8, 8, 8, 8, 8, 8, 8, 8}))) == (8));\n\
    \    assert(candidate((std::vector<long>({2, 3, 3, 2, 2}))) == (2));\n    assert(candidate((std::vector<long>({2,\
    \ 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 2, 8, 2}))) == (2));\n    assert(candidate((std::vector<long>({6,\
    \ 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}))) == (1));\n    assert(candidate((std::vector<long>({8,\
    \ 8, 3, 6, 5, 6, 4}))) == (-1));\n    assert(candidate((std::vector<long>({6,\
    \ 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9})))\
    \ == (1));\n    assert(candidate((std::vector<long>({1, 9, 10, 1, 3}))) == (1));\n\
    \    assert(candidate((std::vector<long>({6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10,\
    \ 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}))) == (5));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({8, 8, 10, 6, 4, 3, 5, 8,\
    \ 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}))) == (4));\n    assert(candidate((std::vector<long>({2,\
    \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}))) == (2));\n    assert(candidate((std::vector<long>({1,\
    \ 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}))) == (1));\n    assert(candidate((std::vector<long>({9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}))) == (4));\n    assert(candidate((std::vector<long>({2, 6, 4,\
    \ 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}))) == (4));\n\
    \    assert(candidate((std::vector<long>({9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10,\
    \ 3, 8, 2, 6, 2, 3, 1}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({10}))) == (-1));\n    assert(candidate((std::vector<long>({9,\
    \ 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}))) == (1));\n    assert(candidate((std::vector<long>({7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 10, 10, 9, 2}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmpsd_gofv0: /tmp/tmpsd_gofv0.cpp:25: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 5, 5, 5, 1}))) == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the list.\n// If no such a value exist, return -1.\n// Examples:\n// search([4,\
    \ 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n// search([5,\
    \ 5, 4, 4, 4]) == -1\nlong search(std::vector<long> lst) {\n    long ans = -1;\n\
    \    long freq = 0;\n    for (long i : lst) {\n        freq += i;\n        if\
    \ (freq >= i) {\n            ans = i;\n            freq -= i;\n        }\n   \
    \ }\n    return ans;\n}\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5, 1}))) == (1));\n    assert(candidate((std::vector<long>({4, 1, 4, 1,\
    \ 4, 4}))) == (4));\n    assert(candidate((std::vector<long>({3, 3}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({8, 8, 8, 8, 8, 8, 8, 8}))) == (8));\n\
    \    assert(candidate((std::vector<long>({2, 3, 3, 2, 2}))) == (2));\n    assert(candidate((std::vector<long>({2,\
    \ 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 2, 8, 2}))) == (2));\n    assert(candidate((std::vector<long>({6,\
    \ 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}))) == (1));\n    assert(candidate((std::vector<long>({8,\
    \ 8, 3, 6, 5, 6, 4}))) == (-1));\n    assert(candidate((std::vector<long>({6,\
    \ 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9})))\
    \ == (1));\n    assert(candidate((std::vector<long>({1, 9, 10, 1, 3}))) == (1));\n\
    \    assert(candidate((std::vector<long>({6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10,\
    \ 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}))) == (5));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({8, 8, 10, 6, 4, 3, 5, 8,\
    \ 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}))) == (4));\n    assert(candidate((std::vector<long>({2,\
    \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}))) == (2));\n    assert(candidate((std::vector<long>({1,\
    \ 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}))) == (1));\n    assert(candidate((std::vector<long>({9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}))) == (4));\n    assert(candidate((std::vector<long>({2, 6, 4,\
    \ 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}))) == (4));\n\
    \    assert(candidate((std::vector<long>({9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10,\
    \ 3, 8, 2, 6, 2, 3, 1}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({10}))) == (-1));\n    assert(candidate((std::vector<long>({9,\
    \ 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}))) == (1));\n    assert(candidate((std::vector<long>({7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 10, 10, 9, 2}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmpxb8ajfkb: /tmp/tmpxb8ajfkb.cpp:27: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 3}))) == (-1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the list.\n// If no such a value exist, return -1.\n// Examples:\n// search([4,\
    \ 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n// search([5,\
    \ 5, 4, 4, 4]) == -1\nlong search(std::vector<long> lst) {\n    long ans = -1;\n\
    \    long freq[100];\n    for (long i = 0; i < lst.size(); i++) {\n        freq[lst[i]]++;\n\
    \    }\n    for (long i = 0; i < 100; i++) {\n        if (freq[i] >= lst.size())\
    \ {\n            ans = i;\n            break;\n        }\n    }\n    return ans;\n\
    }\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5, 1}))) == (1));\n    assert(candidate((std::vector<long>({4, 1, 4, 1,\
    \ 4, 4}))) == (4));\n    assert(candidate((std::vector<long>({3, 3}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({8, 8, 8, 8, 8, 8, 8, 8}))) == (8));\n\
    \    assert(candidate((std::vector<long>({2, 3, 3, 2, 2}))) == (2));\n    assert(candidate((std::vector<long>({2,\
    \ 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 2, 8, 2}))) == (2));\n    assert(candidate((std::vector<long>({6,\
    \ 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}))) == (1));\n    assert(candidate((std::vector<long>({8,\
    \ 8, 3, 6, 5, 6, 4}))) == (-1));\n    assert(candidate((std::vector<long>({6,\
    \ 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9})))\
    \ == (1));\n    assert(candidate((std::vector<long>({1, 9, 10, 1, 3}))) == (1));\n\
    \    assert(candidate((std::vector<long>({6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10,\
    \ 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}))) == (5));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({8, 8, 10, 6, 4, 3, 5, 8,\
    \ 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}))) == (4));\n    assert(candidate((std::vector<long>({2,\
    \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}))) == (2));\n    assert(candidate((std::vector<long>({1,\
    \ 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}))) == (1));\n    assert(candidate((std::vector<long>({9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}))) == (4));\n    assert(candidate((std::vector<long>({2, 6, 4,\
    \ 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}))) == (4));\n\
    \    assert(candidate((std::vector<long>({9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10,\
    \ 3, 8, 2, 6, 2, 3, 1}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({10}))) == (-1));\n    assert(candidate((std::vector<long>({9,\
    \ 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}))) == (1));\n    assert(candidate((std::vector<long>({7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 10, 10, 9, 2}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmpfd5_qzxq: /tmp/tmpfd5_qzxq.cpp:27: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 5, 5, 5, 1}))) == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the list.\n// If no such a value exist, return -1.\n// Examples:\n// search([4,\
    \ 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n// search([5,\
    \ 5, 4, 4, 4]) == -1\nlong search(std::vector<long> lst) {\n    long maxVal =\
    \ -1;\n    long maxFreq = -1;\n    for (long i = 0; i < lst.size(); i++) {\n \
    \       if (lst[i] > maxVal) {\n            maxVal = lst[i];\n            maxFreq\
    \ = i;\n        }\n    }\n    return maxVal;\n}\nint main() {\n    auto candidate\
    \ = search;\n    assert(candidate((std::vector<long>({5, 5, 5, 5, 1}))) == (1));\n\
    \    assert(candidate((std::vector<long>({4, 1, 4, 1, 4, 4}))) == (4));\n    assert(candidate((std::vector<long>({3,\
    \ 3}))) == (-1));\n    assert(candidate((std::vector<long>({8, 8, 8, 8, 8, 8,\
    \ 8, 8}))) == (8));\n    assert(candidate((std::vector<long>({2, 3, 3, 2, 2})))\
    \ == (2));\n    assert(candidate((std::vector<long>({2, 7, 8, 8, 4, 8, 7, 3, 9,\
    \ 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}))) == (1));\n    assert(candidate((std::vector<long>({3,\
    \ 2, 8, 2}))) == (2));\n    assert(candidate((std::vector<long>({6, 7, 1, 8, 8,\
    \ 10, 5, 8, 5, 3, 10}))) == (1));\n    assert(candidate((std::vector<long>({8,\
    \ 8, 3, 6, 5, 6, 4}))) == (-1));\n    assert(candidate((std::vector<long>({6,\
    \ 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9})))\
    \ == (1));\n    assert(candidate((std::vector<long>({1, 9, 10, 1, 3}))) == (1));\n\
    \    assert(candidate((std::vector<long>({6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10,\
    \ 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}))) == (5));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({8, 8, 10, 6, 4, 3, 5, 8,\
    \ 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}))) == (4));\n    assert(candidate((std::vector<long>({2,\
    \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}))) == (2));\n    assert(candidate((std::vector<long>({1,\
    \ 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}))) == (1));\n    assert(candidate((std::vector<long>({9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}))) == (4));\n    assert(candidate((std::vector<long>({2, 6, 4,\
    \ 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}))) == (4));\n\
    \    assert(candidate((std::vector<long>({9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10,\
    \ 3, 8, 2, 6, 2, 3, 1}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({10}))) == (-1));\n    assert(candidate((std::vector<long>({9,\
    \ 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}))) == (1));\n    assert(candidate((std::vector<long>({7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 10, 10, 9, 2}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmpl1ycwfgj: /tmp/tmpl1ycwfgj.cpp:24: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 5, 5, 5, 1}))) == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the list.\n// If no such a value exist, return -1.\n// Examples:\n// search([4,\
    \ 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n// search([5,\
    \ 5, 4, 4, 4]) == -1\nlong search(std::vector<long> lst) {\n    long ans = -1;\n\
    \    long freq[10000];\n    for (long i = 0; i < lst.size(); i++) {\n        freq[lst[i]]++;\n\
    \    }\n    for (long i = 0; i < 10000; i++) {\n        if (freq[i] >= lst.size())\
    \ {\n            ans = i;\n            break;\n        }\n    }\n    return ans;\n\
    }\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5, 1}))) == (1));\n    assert(candidate((std::vector<long>({4, 1, 4, 1,\
    \ 4, 4}))) == (4));\n    assert(candidate((std::vector<long>({3, 3}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({8, 8, 8, 8, 8, 8, 8, 8}))) == (8));\n\
    \    assert(candidate((std::vector<long>({2, 3, 3, 2, 2}))) == (2));\n    assert(candidate((std::vector<long>({2,\
    \ 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 2, 8, 2}))) == (2));\n    assert(candidate((std::vector<long>({6,\
    \ 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}))) == (1));\n    assert(candidate((std::vector<long>({8,\
    \ 8, 3, 6, 5, 6, 4}))) == (-1));\n    assert(candidate((std::vector<long>({6,\
    \ 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9})))\
    \ == (1));\n    assert(candidate((std::vector<long>({1, 9, 10, 1, 3}))) == (1));\n\
    \    assert(candidate((std::vector<long>({6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10,\
    \ 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}))) == (5));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({8, 8, 10, 6, 4, 3, 5, 8,\
    \ 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}))) == (4));\n    assert(candidate((std::vector<long>({2,\
    \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}))) == (2));\n    assert(candidate((std::vector<long>({1,\
    \ 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}))) == (1));\n    assert(candidate((std::vector<long>({9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}))) == (4));\n    assert(candidate((std::vector<long>({2, 6, 4,\
    \ 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}))) == (4));\n\
    \    assert(candidate((std::vector<long>({9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10,\
    \ 3, 8, 2, 6, 2, 3, 1}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({10}))) == (-1));\n    assert(candidate((std::vector<long>({9,\
    \ 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}))) == (1));\n    assert(candidate((std::vector<long>({7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 10, 10, 9, 2}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmp12agqw8l: /tmp/tmp12agqw8l.cpp:27: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 5, 5, 5, 1}))) == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the list.\n// If no such a value exist, return -1.\n// Examples:\n// search([4,\
    \ 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n// search([5,\
    \ 5, 4, 4, 4]) == -1\nlong search(std::vector<long> lst) {\n    long maxVal =\
    \ lst[0];\n    long freq = lst[0];\n    for (long i = 1; i < lst.size(); i++)\
    \ {\n        if (lst[i] > maxVal) {\n            maxVal = lst[i];\n          \
    \  freq = lst[i];\n        } else if (lst[i] == maxVal) {\n            freq++;\n\
    \        }\n    }\n    if (freq >= maxVal) {\n        return -1;\n    }\n    return\
    \ maxVal;\n}\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5, 1}))) == (1));\n    assert(candidate((std::vector<long>({4, 1, 4, 1,\
    \ 4, 4}))) == (4));\n    assert(candidate((std::vector<long>({3, 3}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({8, 8, 8, 8, 8, 8, 8, 8}))) == (8));\n\
    \    assert(candidate((std::vector<long>({2, 3, 3, 2, 2}))) == (2));\n    assert(candidate((std::vector<long>({2,\
    \ 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 2, 8, 2}))) == (2));\n    assert(candidate((std::vector<long>({6,\
    \ 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}))) == (1));\n    assert(candidate((std::vector<long>({8,\
    \ 8, 3, 6, 5, 6, 4}))) == (-1));\n    assert(candidate((std::vector<long>({6,\
    \ 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9})))\
    \ == (1));\n    assert(candidate((std::vector<long>({1, 9, 10, 1, 3}))) == (1));\n\
    \    assert(candidate((std::vector<long>({6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10,\
    \ 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}))) == (5));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({8, 8, 10, 6, 4, 3, 5, 8,\
    \ 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}))) == (4));\n    assert(candidate((std::vector<long>({2,\
    \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}))) == (2));\n    assert(candidate((std::vector<long>({1,\
    \ 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}))) == (1));\n    assert(candidate((std::vector<long>({9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}))) == (4));\n    assert(candidate((std::vector<long>({2, 6, 4,\
    \ 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}))) == (4));\n\
    \    assert(candidate((std::vector<long>({9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10,\
    \ 3, 8, 2, 6, 2, 3, 1}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({10}))) == (-1));\n    assert(candidate((std::vector<long>({9,\
    \ 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}))) == (1));\n    assert(candidate((std::vector<long>({7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 10, 10, 9, 2}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmp6h1akhoa: /tmp/tmp6h1akhoa.cpp:29: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 5, 5, 5, 1}))) == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the list.\n// If no such a value exist, return -1.\n// Examples:\n// search([4,\
    \ 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n// search([5,\
    \ 5, 4, 4, 4]) == -1\nlong search(std::vector<long> lst) {\n    long ans = -1;\n\
    \    long freq = 0;\n    for(long i : lst) {\n        freq += i;\n        if(freq\
    \ >= i) {\n            ans = i;\n            break;\n        }\n    }\n    return\
    \ ans;\n}\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5, 1}))) == (1));\n    assert(candidate((std::vector<long>({4, 1, 4, 1,\
    \ 4, 4}))) == (4));\n    assert(candidate((std::vector<long>({3, 3}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({8, 8, 8, 8, 8, 8, 8, 8}))) == (8));\n\
    \    assert(candidate((std::vector<long>({2, 3, 3, 2, 2}))) == (2));\n    assert(candidate((std::vector<long>({2,\
    \ 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 2, 8, 2}))) == (2));\n    assert(candidate((std::vector<long>({6,\
    \ 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}))) == (1));\n    assert(candidate((std::vector<long>({8,\
    \ 8, 3, 6, 5, 6, 4}))) == (-1));\n    assert(candidate((std::vector<long>({6,\
    \ 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9})))\
    \ == (1));\n    assert(candidate((std::vector<long>({1, 9, 10, 1, 3}))) == (1));\n\
    \    assert(candidate((std::vector<long>({6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10,\
    \ 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}))) == (5));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({8, 8, 10, 6, 4, 3, 5, 8,\
    \ 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}))) == (4));\n    assert(candidate((std::vector<long>({2,\
    \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}))) == (2));\n    assert(candidate((std::vector<long>({1,\
    \ 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}))) == (1));\n    assert(candidate((std::vector<long>({9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}))) == (4));\n    assert(candidate((std::vector<long>({2, 6, 4,\
    \ 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}))) == (4));\n\
    \    assert(candidate((std::vector<long>({9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10,\
    \ 3, 8, 2, 6, 2, 3, 1}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({10}))) == (-1));\n    assert(candidate((std::vector<long>({9,\
    \ 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}))) == (1));\n    assert(candidate((std::vector<long>({7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 10, 10, 9, 2}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmpjdc5_vtx: /tmp/tmpjdc5_vtx.cpp:25: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 5, 5, 5, 1}))) == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the list.\n// If no such a value exist, return -1.\n// Examples:\n// search([4,\
    \ 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n// search([5,\
    \ 5, 4, 4, 4]) == -1\nlong search(std::vector<long> lst) {\n    // Write your\
    \ code here\n    long ans = -1;\n    long freq[100];\n    long maxFreq = -1;\n\
    \    for (long i : lst) {\n        freq[i] = freq[i] + 1;\n        if (freq[i]\
    \ > maxFreq) {\n            maxFreq = freq[i];\n            ans = i;\n       \
    \ }\n    }\n    return ans;\n}\nint main() {\n    auto candidate = search;\n \
    \   assert(candidate((std::vector<long>({5, 5, 5, 5, 1}))) == (1));\n    assert(candidate((std::vector<long>({4,\
    \ 1, 4, 1, 4, 4}))) == (4));\n    assert(candidate((std::vector<long>({3, 3})))\
    \ == (-1));\n    assert(candidate((std::vector<long>({8, 8, 8, 8, 8, 8, 8, 8})))\
    \ == (8));\n    assert(candidate((std::vector<long>({2, 3, 3, 2, 2}))) == (2));\n\
    \    assert(candidate((std::vector<long>({2, 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10,\
    \ 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}))) == (1));\n    assert(candidate((std::vector<long>({3,\
    \ 2, 8, 2}))) == (2));\n    assert(candidate((std::vector<long>({6, 7, 1, 8, 8,\
    \ 10, 5, 8, 5, 3, 10}))) == (1));\n    assert(candidate((std::vector<long>({8,\
    \ 8, 3, 6, 5, 6, 4}))) == (-1));\n    assert(candidate((std::vector<long>({6,\
    \ 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9})))\
    \ == (1));\n    assert(candidate((std::vector<long>({1, 9, 10, 1, 3}))) == (1));\n\
    \    assert(candidate((std::vector<long>({6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10,\
    \ 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}))) == (5));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({8, 8, 10, 6, 4, 3, 5, 8,\
    \ 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}))) == (4));\n    assert(candidate((std::vector<long>({2,\
    \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}))) == (2));\n    assert(candidate((std::vector<long>({1,\
    \ 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}))) == (1));\n    assert(candidate((std::vector<long>({9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}))) == (4));\n    assert(candidate((std::vector<long>({2, 6, 4,\
    \ 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}))) == (4));\n\
    \    assert(candidate((std::vector<long>({9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10,\
    \ 3, 8, 2, 6, 2, 3, 1}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({10}))) == (-1));\n    assert(candidate((std::vector<long>({9,\
    \ 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}))) == (1));\n    assert(candidate((std::vector<long>({7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 10, 10, 9, 2}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmpzu_21fb7: /tmp/tmpzu_21fb7.cpp:27: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 5, 5, 5, 1}))) == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the list.\n// If no such a value exist, return -1.\n// Examples:\n// search([4,\
    \ 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n// search([5,\
    \ 5, 4, 4, 4]) == -1\nlong search(std::vector<long> lst) {\n    long ans = -1;\n\
    \    long freq[100000];\n    for (long i : lst) {\n        freq[i] = freq[i] +\
    \ 1;\n    }\n    for (long i : lst) {\n        if (freq[i] > ans) {\n        \
    \    ans = freq[i];\n        }\n    }\n    return ans;\n}\nint main() {\n    auto\
    \ candidate = search;\n    assert(candidate((std::vector<long>({5, 5, 5, 5, 1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({4, 1, 4, 1, 4, 4}))) == (4));\n\
    \    assert(candidate((std::vector<long>({3, 3}))) == (-1));\n    assert(candidate((std::vector<long>({8,\
    \ 8, 8, 8, 8, 8, 8, 8}))) == (8));\n    assert(candidate((std::vector<long>({2,\
    \ 3, 3, 2, 2}))) == (2));\n    assert(candidate((std::vector<long>({2, 7, 8, 8,\
    \ 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}))) == (1));\n    assert(candidate((std::vector<long>({3,\
    \ 2, 8, 2}))) == (2));\n    assert(candidate((std::vector<long>({6, 7, 1, 8, 8,\
    \ 10, 5, 8, 5, 3, 10}))) == (1));\n    assert(candidate((std::vector<long>({8,\
    \ 8, 3, 6, 5, 6, 4}))) == (-1));\n    assert(candidate((std::vector<long>({6,\
    \ 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9})))\
    \ == (1));\n    assert(candidate((std::vector<long>({1, 9, 10, 1, 3}))) == (1));\n\
    \    assert(candidate((std::vector<long>({6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10,\
    \ 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}))) == (5));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({8, 8, 10, 6, 4, 3, 5, 8,\
    \ 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}))) == (4));\n    assert(candidate((std::vector<long>({2,\
    \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}))) == (2));\n    assert(candidate((std::vector<long>({1,\
    \ 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}))) == (1));\n    assert(candidate((std::vector<long>({9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}))) == (4));\n    assert(candidate((std::vector<long>({2, 6, 4,\
    \ 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}))) == (4));\n\
    \    assert(candidate((std::vector<long>({9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10,\
    \ 3, 8, 2, 6, 2, 3, 1}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({10}))) == (-1));\n    assert(candidate((std::vector<long>({9,\
    \ 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}))) == (1));\n    assert(candidate((std::vector<long>({7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 10, 10, 9, 2}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmp1ty6evd_: /tmp/tmp1ty6evd_.cpp:26: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 5, 5, 5, 1}))) == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the list.\n// If no such a value exist, return -1.\n// Examples:\n// search([4,\
    \ 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n// search([5,\
    \ 5, 4, 4, 4]) == -1\nlong search(std::vector<long> lst) {\n    long ans = -1;\n\
    \    long freq[1000];\n    for (long i : lst) {\n        freq[i] = freq[i] + 1;\n\
    \    }\n    for (long i : lst) {\n        if (freq[i] >= i) {\n            ans\
    \ = i;\n            break;\n        }\n    }\n    return ans;\n}\nint main() {\n\
    \    auto candidate = search;\n    assert(candidate((std::vector<long>({5, 5,\
    \ 5, 5, 1}))) == (1));\n    assert(candidate((std::vector<long>({4, 1, 4, 1, 4,\
    \ 4}))) == (4));\n    assert(candidate((std::vector<long>({3, 3}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({8, 8, 8, 8, 8, 8, 8, 8}))) == (8));\n\
    \    assert(candidate((std::vector<long>({2, 3, 3, 2, 2}))) == (2));\n    assert(candidate((std::vector<long>({2,\
    \ 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 2, 8, 2}))) == (2));\n    assert(candidate((std::vector<long>({6,\
    \ 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}))) == (1));\n    assert(candidate((std::vector<long>({8,\
    \ 8, 3, 6, 5, 6, 4}))) == (-1));\n    assert(candidate((std::vector<long>({6,\
    \ 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9})))\
    \ == (1));\n    assert(candidate((std::vector<long>({1, 9, 10, 1, 3}))) == (1));\n\
    \    assert(candidate((std::vector<long>({6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10,\
    \ 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}))) == (5));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({8, 8, 10, 6, 4, 3, 5, 8,\
    \ 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}))) == (4));\n    assert(candidate((std::vector<long>({2,\
    \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}))) == (2));\n    assert(candidate((std::vector<long>({1,\
    \ 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}))) == (1));\n    assert(candidate((std::vector<long>({9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}))) == (4));\n    assert(candidate((std::vector<long>({2, 6, 4,\
    \ 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}))) == (4));\n\
    \    assert(candidate((std::vector<long>({9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10,\
    \ 3, 8, 2, 6, 2, 3, 1}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({10}))) == (-1));\n    assert(candidate((std::vector<long>({9,\
    \ 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}))) == (1));\n    assert(candidate((std::vector<long>({7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 10, 10, 9, 2}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmpjzpte15u: /tmp/tmpjzpte15u.cpp:32: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}))) == (1)'\
    \ failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the list.\n// If no such a value exist, return -1.\n// Examples:\n// search([4,\
    \ 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n// search([5,\
    \ 5, 4, 4, 4]) == -1\nlong search(std::vector<long> lst) {\n    long ans = -1;\n\
    \    long freq = 0;\n    for(long i : lst) {\n        freq = freq + i;\n     \
    \   if(freq > ans) {\n            ans = freq;\n        }\n    }\n    return ans;\n\
    }\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5, 1}))) == (1));\n    assert(candidate((std::vector<long>({4, 1, 4, 1,\
    \ 4, 4}))) == (4));\n    assert(candidate((std::vector<long>({3, 3}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({8, 8, 8, 8, 8, 8, 8, 8}))) == (8));\n\
    \    assert(candidate((std::vector<long>({2, 3, 3, 2, 2}))) == (2));\n    assert(candidate((std::vector<long>({2,\
    \ 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 2, 8, 2}))) == (2));\n    assert(candidate((std::vector<long>({6,\
    \ 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}))) == (1));\n    assert(candidate((std::vector<long>({8,\
    \ 8, 3, 6, 5, 6, 4}))) == (-1));\n    assert(candidate((std::vector<long>({6,\
    \ 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9})))\
    \ == (1));\n    assert(candidate((std::vector<long>({1, 9, 10, 1, 3}))) == (1));\n\
    \    assert(candidate((std::vector<long>({6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10,\
    \ 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}))) == (5));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({8, 8, 10, 6, 4, 3, 5, 8,\
    \ 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}))) == (4));\n    assert(candidate((std::vector<long>({2,\
    \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}))) == (2));\n    assert(candidate((std::vector<long>({1,\
    \ 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}))) == (1));\n    assert(candidate((std::vector<long>({9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}))) == (4));\n    assert(candidate((std::vector<long>({2, 6, 4,\
    \ 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}))) == (4));\n\
    \    assert(candidate((std::vector<long>({9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10,\
    \ 3, 8, 2, 6, 2, 3, 1}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({10}))) == (-1));\n    assert(candidate((std::vector<long>({9,\
    \ 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}))) == (1));\n    assert(candidate((std::vector<long>({7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 10, 10, 9, 2}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmpg7cs5bpx: /tmp/tmpg7cs5bpx.cpp:24: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 5, 5, 5, 1}))) == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the list.\n// If no such a value exist, return -1.\n// Examples:\n// search([4,\
    \ 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n// search([5,\
    \ 5, 4, 4, 4]) == -1\nlong search(std::vector<long> lst) {\n    long ans = -1;\n\
    \    long freq = 0;\n    for (long i : lst) {\n        freq += i;\n        if\
    \ (freq >= i) {\n            ans = i;\n            freq -= i;\n        }\n   \
    \ }\n    return ans;\n}\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5, 1}))) == (1));\n    assert(candidate((std::vector<long>({4, 1, 4, 1,\
    \ 4, 4}))) == (4));\n    assert(candidate((std::vector<long>({3, 3}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({8, 8, 8, 8, 8, 8, 8, 8}))) == (8));\n\
    \    assert(candidate((std::vector<long>({2, 3, 3, 2, 2}))) == (2));\n    assert(candidate((std::vector<long>({2,\
    \ 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 2, 8, 2}))) == (2));\n    assert(candidate((std::vector<long>({6,\
    \ 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}))) == (1));\n    assert(candidate((std::vector<long>({8,\
    \ 8, 3, 6, 5, 6, 4}))) == (-1));\n    assert(candidate((std::vector<long>({6,\
    \ 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9})))\
    \ == (1));\n    assert(candidate((std::vector<long>({1, 9, 10, 1, 3}))) == (1));\n\
    \    assert(candidate((std::vector<long>({6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10,\
    \ 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}))) == (5));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({8, 8, 10, 6, 4, 3, 5, 8,\
    \ 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}))) == (4));\n    assert(candidate((std::vector<long>({2,\
    \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}))) == (2));\n    assert(candidate((std::vector<long>({1,\
    \ 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}))) == (1));\n    assert(candidate((std::vector<long>({9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}))) == (4));\n    assert(candidate((std::vector<long>({2, 6, 4,\
    \ 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}))) == (4));\n\
    \    assert(candidate((std::vector<long>({9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10,\
    \ 3, 8, 2, 6, 2, 3, 1}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({10}))) == (-1));\n    assert(candidate((std::vector<long>({9,\
    \ 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}))) == (1));\n    assert(candidate((std::vector<long>({7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 10, 10, 9, 2}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmp03n81gr0: /tmp/tmp03n81gr0.cpp:27: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 3}))) == (-1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the list.\n// If no such a value exist, return -1.\n// Examples:\n// search([4,\
    \ 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n// search([5,\
    \ 5, 4, 4, 4]) == -1\nlong search(std::vector<long> lst) {\n    long ans = -1;\n\
    \    long freq = 0;\n    for (long i : lst) {\n        freq += i;\n        if\
    \ (freq >= i) {\n            ans = i;\n            freq -= i;\n        }\n   \
    \ }\n    return ans;\n}\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5, 1}))) == (1));\n    assert(candidate((std::vector<long>({4, 1, 4, 1,\
    \ 4, 4}))) == (4));\n    assert(candidate((std::vector<long>({3, 3}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({8, 8, 8, 8, 8, 8, 8, 8}))) == (8));\n\
    \    assert(candidate((std::vector<long>({2, 3, 3, 2, 2}))) == (2));\n    assert(candidate((std::vector<long>({2,\
    \ 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 2, 8, 2}))) == (2));\n    assert(candidate((std::vector<long>({6,\
    \ 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}))) == (1));\n    assert(candidate((std::vector<long>({8,\
    \ 8, 3, 6, 5, 6, 4}))) == (-1));\n    assert(candidate((std::vector<long>({6,\
    \ 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9})))\
    \ == (1));\n    assert(candidate((std::vector<long>({1, 9, 10, 1, 3}))) == (1));\n\
    \    assert(candidate((std::vector<long>({6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10,\
    \ 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}))) == (5));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({8, 8, 10, 6, 4, 3, 5, 8,\
    \ 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}))) == (4));\n    assert(candidate((std::vector<long>({2,\
    \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}))) == (2));\n    assert(candidate((std::vector<long>({1,\
    \ 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}))) == (1));\n    assert(candidate((std::vector<long>({9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}))) == (4));\n    assert(candidate((std::vector<long>({2, 6, 4,\
    \ 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}))) == (4));\n\
    \    assert(candidate((std::vector<long>({9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10,\
    \ 3, 8, 2, 6, 2, 3, 1}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({10}))) == (-1));\n    assert(candidate((std::vector<long>({9,\
    \ 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}))) == (1));\n    assert(candidate((std::vector<long>({7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 10, 10, 9, 2}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmpozicj13s: /tmp/tmpozicj13s.cpp:27: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 3}))) == (-1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the list.\n// If no such a value exist, return -1.\n// Examples:\n// search([4,\
    \ 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n// search([5,\
    \ 5, 4, 4, 4]) == -1\nlong search(std::vector<long> lst) {\n    long ans = -1;\n\
    \    long freq = 0;\n    for (long i : lst) {\n        freq += i;\n        if\
    \ (freq > ans) {\n            ans = freq;\n        }\n    }\n    return ans;\n\
    }\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5, 1}))) == (1));\n    assert(candidate((std::vector<long>({4, 1, 4, 1,\
    \ 4, 4}))) == (4));\n    assert(candidate((std::vector<long>({3, 3}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({8, 8, 8, 8, 8, 8, 8, 8}))) == (8));\n\
    \    assert(candidate((std::vector<long>({2, 3, 3, 2, 2}))) == (2));\n    assert(candidate((std::vector<long>({2,\
    \ 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 2, 8, 2}))) == (2));\n    assert(candidate((std::vector<long>({6,\
    \ 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}))) == (1));\n    assert(candidate((std::vector<long>({8,\
    \ 8, 3, 6, 5, 6, 4}))) == (-1));\n    assert(candidate((std::vector<long>({6,\
    \ 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9})))\
    \ == (1));\n    assert(candidate((std::vector<long>({1, 9, 10, 1, 3}))) == (1));\n\
    \    assert(candidate((std::vector<long>({6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10,\
    \ 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}))) == (5));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({8, 8, 10, 6, 4, 3, 5, 8,\
    \ 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}))) == (4));\n    assert(candidate((std::vector<long>({2,\
    \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}))) == (2));\n    assert(candidate((std::vector<long>({1,\
    \ 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}))) == (1));\n    assert(candidate((std::vector<long>({9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}))) == (4));\n    assert(candidate((std::vector<long>({2, 6, 4,\
    \ 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}))) == (4));\n\
    \    assert(candidate((std::vector<long>({9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10,\
    \ 3, 8, 2, 6, 2, 3, 1}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({10}))) == (-1));\n    assert(candidate((std::vector<long>({9,\
    \ 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}))) == (1));\n    assert(candidate((std::vector<long>({7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 10, 10, 9, 2}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmpwvef9a_s: /tmp/tmpwvef9a_s.cpp:24: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 5, 5, 5, 1}))) == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the list.\n// If no such a value exist, return -1.\n// Examples:\n// search([4,\
    \ 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n// search([5,\
    \ 5, 4, 4, 4]) == -1\nlong search(std::vector<long> lst) {\n    // Your code here\n\
    \    long ans = -1;\n    long freq = 0;\n    for (long i : lst) {\n        freq++;\n\
    \        if (freq >= i) {\n            ans = i;\n            break;\n        }\n\
    \    }\n    return ans;\n}\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5, 1}))) == (1));\n    assert(candidate((std::vector<long>({4, 1, 4, 1,\
    \ 4, 4}))) == (4));\n    assert(candidate((std::vector<long>({3, 3}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({8, 8, 8, 8, 8, 8, 8, 8}))) == (8));\n\
    \    assert(candidate((std::vector<long>({2, 3, 3, 2, 2}))) == (2));\n    assert(candidate((std::vector<long>({2,\
    \ 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 2, 8, 2}))) == (2));\n    assert(candidate((std::vector<long>({6,\
    \ 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}))) == (1));\n    assert(candidate((std::vector<long>({8,\
    \ 8, 3, 6, 5, 6, 4}))) == (-1));\n    assert(candidate((std::vector<long>({6,\
    \ 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9})))\
    \ == (1));\n    assert(candidate((std::vector<long>({1, 9, 10, 1, 3}))) == (1));\n\
    \    assert(candidate((std::vector<long>({6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10,\
    \ 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}))) == (5));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({8, 8, 10, 6, 4, 3, 5, 8,\
    \ 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}))) == (4));\n    assert(candidate((std::vector<long>({2,\
    \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}))) == (2));\n    assert(candidate((std::vector<long>({1,\
    \ 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}))) == (1));\n    assert(candidate((std::vector<long>({9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}))) == (4));\n    assert(candidate((std::vector<long>({2, 6, 4,\
    \ 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}))) == (4));\n\
    \    assert(candidate((std::vector<long>({9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10,\
    \ 3, 8, 2, 6, 2, 3, 1}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({10}))) == (-1));\n    assert(candidate((std::vector<long>({9,\
    \ 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}))) == (1));\n    assert(candidate((std::vector<long>({7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 10, 10, 9, 2}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmpku582_sj: /tmp/tmpku582_sj.cpp:27: int main(): Assertion `candidate((std::vector<long>({4,\
    \ 1, 4, 1, 4, 4}))) == (4)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the list.\n// If no such a value exist, return -1.\n// Examples:\n// search([4,\
    \ 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n// search([5,\
    \ 5, 4, 4, 4]) == -1\nlong search(std::vector<long> lst) {\n    long ans = -1;\n\
    \    long freq[1000];\n    for(long i : lst) {\n        freq[i] = freq[i] + 1;\n\
    \    }\n    for(long i : lst) {\n        if(freq[i] >= i) {\n            ans =\
    \ i;\n            break;\n        }\n    }\n    return ans;\n}\nint main() {\n\
    \    auto candidate = search;\n    assert(candidate((std::vector<long>({5, 5,\
    \ 5, 5, 1}))) == (1));\n    assert(candidate((std::vector<long>({4, 1, 4, 1, 4,\
    \ 4}))) == (4));\n    assert(candidate((std::vector<long>({3, 3}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({8, 8, 8, 8, 8, 8, 8, 8}))) == (8));\n\
    \    assert(candidate((std::vector<long>({2, 3, 3, 2, 2}))) == (2));\n    assert(candidate((std::vector<long>({2,\
    \ 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 2, 8, 2}))) == (2));\n    assert(candidate((std::vector<long>({6,\
    \ 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}))) == (1));\n    assert(candidate((std::vector<long>({8,\
    \ 8, 3, 6, 5, 6, 4}))) == (-1));\n    assert(candidate((std::vector<long>({6,\
    \ 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9})))\
    \ == (1));\n    assert(candidate((std::vector<long>({1, 9, 10, 1, 3}))) == (1));\n\
    \    assert(candidate((std::vector<long>({6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10,\
    \ 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}))) == (5));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({8, 8, 10, 6, 4, 3, 5, 8,\
    \ 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}))) == (4));\n    assert(candidate((std::vector<long>({2,\
    \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}))) == (2));\n    assert(candidate((std::vector<long>({1,\
    \ 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}))) == (1));\n    assert(candidate((std::vector<long>({9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}))) == (4));\n    assert(candidate((std::vector<long>({2, 6, 4,\
    \ 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}))) == (4));\n\
    \    assert(candidate((std::vector<long>({9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10,\
    \ 3, 8, 2, 6, 2, 3, 1}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({10}))) == (-1));\n    assert(candidate((std::vector<long>({9,\
    \ 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}))) == (1));\n    assert(candidate((std::vector<long>({7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 10, 10, 9, 2}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmp46npvg4k: /tmp/tmp46npvg4k.cpp:32: int main(): Assertion `candidate((std::vector<long>({2,\
    \ 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}))) == (1)'\
    \ failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the list.\n// If no such a value exist, return -1.\n// Examples:\n// search([4,\
    \ 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n// search([5,\
    \ 5, 4, 4, 4]) == -1\nlong search(std::vector<long> lst) {\n    // Your code here\n\
    \    long ans = -1;\n    long freq = 0;\n    for (long i : lst) {\n        freq\
    \ += i;\n        if (freq > ans) {\n            ans = freq;\n        }\n    }\n\
    \    return ans;\n}\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5, 1}))) == (1));\n    assert(candidate((std::vector<long>({4, 1, 4, 1,\
    \ 4, 4}))) == (4));\n    assert(candidate((std::vector<long>({3, 3}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({8, 8, 8, 8, 8, 8, 8, 8}))) == (8));\n\
    \    assert(candidate((std::vector<long>({2, 3, 3, 2, 2}))) == (2));\n    assert(candidate((std::vector<long>({2,\
    \ 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 2, 8, 2}))) == (2));\n    assert(candidate((std::vector<long>({6,\
    \ 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}))) == (1));\n    assert(candidate((std::vector<long>({8,\
    \ 8, 3, 6, 5, 6, 4}))) == (-1));\n    assert(candidate((std::vector<long>({6,\
    \ 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9})))\
    \ == (1));\n    assert(candidate((std::vector<long>({1, 9, 10, 1, 3}))) == (1));\n\
    \    assert(candidate((std::vector<long>({6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10,\
    \ 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}))) == (5));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({8, 8, 10, 6, 4, 3, 5, 8,\
    \ 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}))) == (4));\n    assert(candidate((std::vector<long>({2,\
    \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}))) == (2));\n    assert(candidate((std::vector<long>({1,\
    \ 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}))) == (1));\n    assert(candidate((std::vector<long>({9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}))) == (4));\n    assert(candidate((std::vector<long>({2, 6, 4,\
    \ 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}))) == (4));\n\
    \    assert(candidate((std::vector<long>({9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10,\
    \ 3, 8, 2, 6, 2, 3, 1}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({10}))) == (-1));\n    assert(candidate((std::vector<long>({9,\
    \ 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}))) == (1));\n    assert(candidate((std::vector<long>({7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 10, 10, 9, 2}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmpda3u8pm8: /tmp/tmpda3u8pm8.cpp:25: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 5, 5, 5, 1}))) == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the list.\n// If no such a value exist, return -1.\n// Examples:\n// search([4,\
    \ 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n// search([5,\
    \ 5, 4, 4, 4]) == -1\nlong search(std::vector<long> lst) {\n    long ans = -1;\n\
    \    long freq[1000];\n    for (long i : lst) {\n        freq[i] = freq[i] + 1;\n\
    \    }\n    for (long i : lst) {\n        if (freq[i] > ans) {\n            ans\
    \ = freq[i];\n        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate\
    \ = search;\n    assert(candidate((std::vector<long>({5, 5, 5, 5, 1}))) == (1));\n\
    \    assert(candidate((std::vector<long>({4, 1, 4, 1, 4, 4}))) == (4));\n    assert(candidate((std::vector<long>({3,\
    \ 3}))) == (-1));\n    assert(candidate((std::vector<long>({8, 8, 8, 8, 8, 8,\
    \ 8, 8}))) == (8));\n    assert(candidate((std::vector<long>({2, 3, 3, 2, 2})))\
    \ == (2));\n    assert(candidate((std::vector<long>({2, 7, 8, 8, 4, 8, 7, 3, 9,\
    \ 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}))) == (1));\n    assert(candidate((std::vector<long>({3,\
    \ 2, 8, 2}))) == (2));\n    assert(candidate((std::vector<long>({6, 7, 1, 8, 8,\
    \ 10, 5, 8, 5, 3, 10}))) == (1));\n    assert(candidate((std::vector<long>({8,\
    \ 8, 3, 6, 5, 6, 4}))) == (-1));\n    assert(candidate((std::vector<long>({6,\
    \ 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9})))\
    \ == (1));\n    assert(candidate((std::vector<long>({1, 9, 10, 1, 3}))) == (1));\n\
    \    assert(candidate((std::vector<long>({6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10,\
    \ 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}))) == (5));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({8, 8, 10, 6, 4, 3, 5, 8,\
    \ 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}))) == (4));\n    assert(candidate((std::vector<long>({2,\
    \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}))) == (2));\n    assert(candidate((std::vector<long>({1,\
    \ 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}))) == (1));\n    assert(candidate((std::vector<long>({9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}))) == (4));\n    assert(candidate((std::vector<long>({2, 6, 4,\
    \ 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}))) == (4));\n\
    \    assert(candidate((std::vector<long>({9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10,\
    \ 3, 8, 2, 6, 2, 3, 1}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({10}))) == (-1));\n    assert(candidate((std::vector<long>({9,\
    \ 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}))) == (1));\n    assert(candidate((std::vector<long>({7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 10, 10, 9, 2}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmp9kndcr4f: /tmp/tmp9kndcr4f.cpp:26: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 5, 5, 5, 1}))) == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the list.\n// If no such a value exist, return -1.\n// Examples:\n// search([4,\
    \ 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n// search([5,\
    \ 5, 4, 4, 4]) == -1\nlong search(std::vector<long> lst) {\n    long ans = -1;\n\
    \    long freq[100];\n    for (long i : lst) {\n        freq[i] = freq[i] + 1;\n\
    \    }\n    for (long i : lst) {\n        if (freq[i] > ans) {\n            ans\
    \ = freq[i];\n        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate\
    \ = search;\n    assert(candidate((std::vector<long>({5, 5, 5, 5, 1}))) == (1));\n\
    \    assert(candidate((std::vector<long>({4, 1, 4, 1, 4, 4}))) == (4));\n    assert(candidate((std::vector<long>({3,\
    \ 3}))) == (-1));\n    assert(candidate((std::vector<long>({8, 8, 8, 8, 8, 8,\
    \ 8, 8}))) == (8));\n    assert(candidate((std::vector<long>({2, 3, 3, 2, 2})))\
    \ == (2));\n    assert(candidate((std::vector<long>({2, 7, 8, 8, 4, 8, 7, 3, 9,\
    \ 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}))) == (1));\n    assert(candidate((std::vector<long>({3,\
    \ 2, 8, 2}))) == (2));\n    assert(candidate((std::vector<long>({6, 7, 1, 8, 8,\
    \ 10, 5, 8, 5, 3, 10}))) == (1));\n    assert(candidate((std::vector<long>({8,\
    \ 8, 3, 6, 5, 6, 4}))) == (-1));\n    assert(candidate((std::vector<long>({6,\
    \ 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9})))\
    \ == (1));\n    assert(candidate((std::vector<long>({1, 9, 10, 1, 3}))) == (1));\n\
    \    assert(candidate((std::vector<long>({6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10,\
    \ 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}))) == (5));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({8, 8, 10, 6, 4, 3, 5, 8,\
    \ 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}))) == (4));\n    assert(candidate((std::vector<long>({2,\
    \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}))) == (2));\n    assert(candidate((std::vector<long>({1,\
    \ 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}))) == (1));\n    assert(candidate((std::vector<long>({9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}))) == (4));\n    assert(candidate((std::vector<long>({2, 6, 4,\
    \ 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}))) == (4));\n\
    \    assert(candidate((std::vector<long>({9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10,\
    \ 3, 8, 2, 6, 2, 3, 1}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({10}))) == (-1));\n    assert(candidate((std::vector<long>({9,\
    \ 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}))) == (1));\n    assert(candidate((std::vector<long>({7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 10, 10, 9, 2}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmpv9_kect8: /tmp/tmpv9_kect8.cpp:26: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 5, 5, 5, 1}))) == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the list.\n// If no such a value exist, return -1.\n// Examples:\n// search([4,\
    \ 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n// search([5,\
    \ 5, 4, 4, 4]) == -1\nlong search(std::vector<long> lst) {\n    long ans = -1;\n\
    \    long freq[1000];\n    for (long i : lst) {\n        freq[i] = freq[i] + 1;\n\
    \    }\n    for (long i : lst) {\n        if (freq[i] > ans) {\n            ans\
    \ = freq[i];\n        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate\
    \ = search;\n    assert(candidate((std::vector<long>({5, 5, 5, 5, 1}))) == (1));\n\
    \    assert(candidate((std::vector<long>({4, 1, 4, 1, 4, 4}))) == (4));\n    assert(candidate((std::vector<long>({3,\
    \ 3}))) == (-1));\n    assert(candidate((std::vector<long>({8, 8, 8, 8, 8, 8,\
    \ 8, 8}))) == (8));\n    assert(candidate((std::vector<long>({2, 3, 3, 2, 2})))\
    \ == (2));\n    assert(candidate((std::vector<long>({2, 7, 8, 8, 4, 8, 7, 3, 9,\
    \ 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}))) == (1));\n    assert(candidate((std::vector<long>({3,\
    \ 2, 8, 2}))) == (2));\n    assert(candidate((std::vector<long>({6, 7, 1, 8, 8,\
    \ 10, 5, 8, 5, 3, 10}))) == (1));\n    assert(candidate((std::vector<long>({8,\
    \ 8, 3, 6, 5, 6, 4}))) == (-1));\n    assert(candidate((std::vector<long>({6,\
    \ 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9})))\
    \ == (1));\n    assert(candidate((std::vector<long>({1, 9, 10, 1, 3}))) == (1));\n\
    \    assert(candidate((std::vector<long>({6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10,\
    \ 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}))) == (5));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({8, 8, 10, 6, 4, 3, 5, 8,\
    \ 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}))) == (4));\n    assert(candidate((std::vector<long>({2,\
    \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}))) == (2));\n    assert(candidate((std::vector<long>({1,\
    \ 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}))) == (1));\n    assert(candidate((std::vector<long>({9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}))) == (4));\n    assert(candidate((std::vector<long>({2, 6, 4,\
    \ 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}))) == (4));\n\
    \    assert(candidate((std::vector<long>({9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10,\
    \ 3, 8, 2, 6, 2, 3, 1}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({10}))) == (-1));\n    assert(candidate((std::vector<long>({9,\
    \ 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}))) == (1));\n    assert(candidate((std::vector<long>({7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 10, 10, 9, 2}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmpb8087gkv: /tmp/tmpb8087gkv.cpp:26: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 5, 5, 5, 1}))) == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the list.\n// If no such a value exist, return -1.\n// Examples:\n// search([4,\
    \ 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n// search([5,\
    \ 5, 4, 4, 4]) == -1\nlong search(std::vector<long> lst) {\n    long ans = -1;\n\
    \    long freq = 0;\n    for (long i : lst) {\n        freq += i;\n        if\
    \ (freq > ans) {\n            ans = freq;\n        }\n    }\n    return ans;\n\
    }\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5, 1}))) == (1));\n    assert(candidate((std::vector<long>({4, 1, 4, 1,\
    \ 4, 4}))) == (4));\n    assert(candidate((std::vector<long>({3, 3}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({8, 8, 8, 8, 8, 8, 8, 8}))) == (8));\n\
    \    assert(candidate((std::vector<long>({2, 3, 3, 2, 2}))) == (2));\n    assert(candidate((std::vector<long>({2,\
    \ 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 2, 8, 2}))) == (2));\n    assert(candidate((std::vector<long>({6,\
    \ 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}))) == (1));\n    assert(candidate((std::vector<long>({8,\
    \ 8, 3, 6, 5, 6, 4}))) == (-1));\n    assert(candidate((std::vector<long>({6,\
    \ 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9})))\
    \ == (1));\n    assert(candidate((std::vector<long>({1, 9, 10, 1, 3}))) == (1));\n\
    \    assert(candidate((std::vector<long>({6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10,\
    \ 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}))) == (5));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({8, 8, 10, 6, 4, 3, 5, 8,\
    \ 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}))) == (4));\n    assert(candidate((std::vector<long>({2,\
    \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}))) == (2));\n    assert(candidate((std::vector<long>({1,\
    \ 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}))) == (1));\n    assert(candidate((std::vector<long>({9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}))) == (4));\n    assert(candidate((std::vector<long>({2, 6, 4,\
    \ 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}))) == (4));\n\
    \    assert(candidate((std::vector<long>({9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10,\
    \ 3, 8, 2, 6, 2, 3, 1}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({10}))) == (-1));\n    assert(candidate((std::vector<long>({9,\
    \ 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}))) == (1));\n    assert(candidate((std::vector<long>({7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 10, 10, 9, 2}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmpsefbm6ur: /tmp/tmpsefbm6ur.cpp:24: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 5, 5, 5, 1}))) == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the list.\n// If no such a value exist, return -1.\n// Examples:\n// search([4,\
    \ 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n// search([5,\
    \ 5, 4, 4, 4]) == -1\nlong search(std::vector<long> lst) {\n    long ans = -1;\n\
    \    long freq[100];\n    for (long i : lst) {\n        freq[i] = freq[i] + 1;\n\
    \    }\n    for (long i : lst) {\n        if (freq[i] > ans) {\n            ans\
    \ = freq[i];\n        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate\
    \ = search;\n    assert(candidate((std::vector<long>({5, 5, 5, 5, 1}))) == (1));\n\
    \    assert(candidate((std::vector<long>({4, 1, 4, 1, 4, 4}))) == (4));\n    assert(candidate((std::vector<long>({3,\
    \ 3}))) == (-1));\n    assert(candidate((std::vector<long>({8, 8, 8, 8, 8, 8,\
    \ 8, 8}))) == (8));\n    assert(candidate((std::vector<long>({2, 3, 3, 2, 2})))\
    \ == (2));\n    assert(candidate((std::vector<long>({2, 7, 8, 8, 4, 8, 7, 3, 9,\
    \ 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}))) == (1));\n    assert(candidate((std::vector<long>({3,\
    \ 2, 8, 2}))) == (2));\n    assert(candidate((std::vector<long>({6, 7, 1, 8, 8,\
    \ 10, 5, 8, 5, 3, 10}))) == (1));\n    assert(candidate((std::vector<long>({8,\
    \ 8, 3, 6, 5, 6, 4}))) == (-1));\n    assert(candidate((std::vector<long>({6,\
    \ 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9})))\
    \ == (1));\n    assert(candidate((std::vector<long>({1, 9, 10, 1, 3}))) == (1));\n\
    \    assert(candidate((std::vector<long>({6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10,\
    \ 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}))) == (5));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({8, 8, 10, 6, 4, 3, 5, 8,\
    \ 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}))) == (4));\n    assert(candidate((std::vector<long>({2,\
    \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}))) == (2));\n    assert(candidate((std::vector<long>({1,\
    \ 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}))) == (1));\n    assert(candidate((std::vector<long>({9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}))) == (4));\n    assert(candidate((std::vector<long>({2, 6, 4,\
    \ 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}))) == (4));\n\
    \    assert(candidate((std::vector<long>({9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10,\
    \ 3, 8, 2, 6, 2, 3, 1}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({10}))) == (-1));\n    assert(candidate((std::vector<long>({9,\
    \ 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}))) == (1));\n    assert(candidate((std::vector<long>({7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 10, 10, 9, 2}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmphfgkj5r4: /tmp/tmphfgkj5r4.cpp:26: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 5, 5, 5, 1}))) == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the list.\n// If no such a value exist, return -1.\n// Examples:\n// search([4,\
    \ 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n// search([5,\
    \ 5, 4, 4, 4]) == -1\nlong search(std::vector<long> lst) {\n    // Write your\
    \ code here\n    long ans = -1;\n    long freq = 0;\n    for (long i : lst) {\n\
    \        freq += i;\n        if (freq > ans) {\n            ans = freq;\n    \
    \    }\n    }\n    return ans;\n}\nint main() {\n    auto candidate = search;\n\
    \    assert(candidate((std::vector<long>({5, 5, 5, 5, 1}))) == (1));\n    assert(candidate((std::vector<long>({4,\
    \ 1, 4, 1, 4, 4}))) == (4));\n    assert(candidate((std::vector<long>({3, 3})))\
    \ == (-1));\n    assert(candidate((std::vector<long>({8, 8, 8, 8, 8, 8, 8, 8})))\
    \ == (8));\n    assert(candidate((std::vector<long>({2, 3, 3, 2, 2}))) == (2));\n\
    \    assert(candidate((std::vector<long>({2, 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10,\
    \ 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}))) == (1));\n    assert(candidate((std::vector<long>({3,\
    \ 2, 8, 2}))) == (2));\n    assert(candidate((std::vector<long>({6, 7, 1, 8, 8,\
    \ 10, 5, 8, 5, 3, 10}))) == (1));\n    assert(candidate((std::vector<long>({8,\
    \ 8, 3, 6, 5, 6, 4}))) == (-1));\n    assert(candidate((std::vector<long>({6,\
    \ 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9})))\
    \ == (1));\n    assert(candidate((std::vector<long>({1, 9, 10, 1, 3}))) == (1));\n\
    \    assert(candidate((std::vector<long>({6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10,\
    \ 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}))) == (5));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({8, 8, 10, 6, 4, 3, 5, 8,\
    \ 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}))) == (4));\n    assert(candidate((std::vector<long>({2,\
    \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}))) == (2));\n    assert(candidate((std::vector<long>({1,\
    \ 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}))) == (1));\n    assert(candidate((std::vector<long>({9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}))) == (4));\n    assert(candidate((std::vector<long>({2, 6, 4,\
    \ 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}))) == (4));\n\
    \    assert(candidate((std::vector<long>({9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10,\
    \ 3, 8, 2, 6, 2, 3, 1}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({10}))) == (-1));\n    assert(candidate((std::vector<long>({9,\
    \ 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}))) == (1));\n    assert(candidate((std::vector<long>({7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 10, 10, 9, 2}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmpgmxckzgg: /tmp/tmpgmxckzgg.cpp:25: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 5, 5, 5, 1}))) == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the list.\n// If no such a value exist, return -1.\n// Examples:\n// search([4,\
    \ 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n// search([5,\
    \ 5, 4, 4, 4]) == -1\nlong search(std::vector<long> lst) {\n    long ans = -1;\n\
    \    long freq[100];\n    for (long i : lst) {\n        freq[i] = freq[i] + 1;\n\
    \    }\n    for (long i = 0; i < 100; i++) {\n        if (freq[i] >= lst[0]) {\n\
    \            ans = i;\n            break;\n        }\n    }\n    return ans;\n\
    }\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5, 1}))) == (1));\n    assert(candidate((std::vector<long>({4, 1, 4, 1,\
    \ 4, 4}))) == (4));\n    assert(candidate((std::vector<long>({3, 3}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({8, 8, 8, 8, 8, 8, 8, 8}))) == (8));\n\
    \    assert(candidate((std::vector<long>({2, 3, 3, 2, 2}))) == (2));\n    assert(candidate((std::vector<long>({2,\
    \ 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 2, 8, 2}))) == (2));\n    assert(candidate((std::vector<long>({6,\
    \ 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}))) == (1));\n    assert(candidate((std::vector<long>({8,\
    \ 8, 3, 6, 5, 6, 4}))) == (-1));\n    assert(candidate((std::vector<long>({6,\
    \ 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9})))\
    \ == (1));\n    assert(candidate((std::vector<long>({1, 9, 10, 1, 3}))) == (1));\n\
    \    assert(candidate((std::vector<long>({6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10,\
    \ 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}))) == (5));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({8, 8, 10, 6, 4, 3, 5, 8,\
    \ 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}))) == (4));\n    assert(candidate((std::vector<long>({2,\
    \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}))) == (2));\n    assert(candidate((std::vector<long>({1,\
    \ 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}))) == (1));\n    assert(candidate((std::vector<long>({9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}))) == (4));\n    assert(candidate((std::vector<long>({2, 6, 4,\
    \ 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}))) == (4));\n\
    \    assert(candidate((std::vector<long>({9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10,\
    \ 3, 8, 2, 6, 2, 3, 1}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({10}))) == (-1));\n    assert(candidate((std::vector<long>({9,\
    \ 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}))) == (1));\n    assert(candidate((std::vector<long>({7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 10, 10, 9, 2}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmpuhqgi1q0: /tmp/tmpuhqgi1q0.cpp:27: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 5, 5, 5, 1}))) == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the list.\n// If no such a value exist, return -1.\n// Examples:\n// search([4,\
    \ 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n// search([5,\
    \ 5, 4, 4, 4]) == -1\nlong search(std::vector<long> lst) {\n    long maxVal =\
    \ -1;\n    long maxFreq = -1;\n    for (long i : lst) {\n        if (maxVal <\
    \ 0 || maxVal > i) {\n            maxVal = i;\n            maxFreq = i;\n    \
    \    } else if (maxFreq < i) {\n            maxFreq = i;\n        }\n    }\n \
    \   return maxVal;\n}\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5, 1}))) == (1));\n    assert(candidate((std::vector<long>({4, 1, 4, 1,\
    \ 4, 4}))) == (4));\n    assert(candidate((std::vector<long>({3, 3}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({8, 8, 8, 8, 8, 8, 8, 8}))) == (8));\n\
    \    assert(candidate((std::vector<long>({2, 3, 3, 2, 2}))) == (2));\n    assert(candidate((std::vector<long>({2,\
    \ 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 2, 8, 2}))) == (2));\n    assert(candidate((std::vector<long>({6,\
    \ 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}))) == (1));\n    assert(candidate((std::vector<long>({8,\
    \ 8, 3, 6, 5, 6, 4}))) == (-1));\n    assert(candidate((std::vector<long>({6,\
    \ 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9})))\
    \ == (1));\n    assert(candidate((std::vector<long>({1, 9, 10, 1, 3}))) == (1));\n\
    \    assert(candidate((std::vector<long>({6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10,\
    \ 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}))) == (5));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({8, 8, 10, 6, 4, 3, 5, 8,\
    \ 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}))) == (4));\n    assert(candidate((std::vector<long>({2,\
    \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}))) == (2));\n    assert(candidate((std::vector<long>({1,\
    \ 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}))) == (1));\n    assert(candidate((std::vector<long>({9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}))) == (4));\n    assert(candidate((std::vector<long>({2, 6, 4,\
    \ 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}))) == (4));\n\
    \    assert(candidate((std::vector<long>({9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10,\
    \ 3, 8, 2, 6, 2, 3, 1}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({10}))) == (-1));\n    assert(candidate((std::vector<long>({9,\
    \ 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}))) == (1));\n    assert(candidate((std::vector<long>({7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 10, 10, 9, 2}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmpy1luiw61: /tmp/tmpy1luiw61.cpp:27: int main(): Assertion `candidate((std::vector<long>({4,\
    \ 1, 4, 1, 4, 4}))) == (4)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the list.\n// If no such a value exist, return -1.\n// Examples:\n// search([4,\
    \ 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n// search([5,\
    \ 5, 4, 4, 4]) == -1\nlong search(std::vector<long> lst) {\n    long maxVal =\
    \ lst[0];\n    long freq = lst[0];\n    for (long i : lst) {\n        if (freq\
    \ > i) {\n            freq = i;\n            maxVal = i;\n        }\n    }\n \
    \   return maxVal;\n}\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5, 1}))) == (1));\n    assert(candidate((std::vector<long>({4, 1, 4, 1,\
    \ 4, 4}))) == (4));\n    assert(candidate((std::vector<long>({3, 3}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({8, 8, 8, 8, 8, 8, 8, 8}))) == (8));\n\
    \    assert(candidate((std::vector<long>({2, 3, 3, 2, 2}))) == (2));\n    assert(candidate((std::vector<long>({2,\
    \ 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 2, 8, 2}))) == (2));\n    assert(candidate((std::vector<long>({6,\
    \ 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}))) == (1));\n    assert(candidate((std::vector<long>({8,\
    \ 8, 3, 6, 5, 6, 4}))) == (-1));\n    assert(candidate((std::vector<long>({6,\
    \ 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9})))\
    \ == (1));\n    assert(candidate((std::vector<long>({1, 9, 10, 1, 3}))) == (1));\n\
    \    assert(candidate((std::vector<long>({6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10,\
    \ 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}))) == (5));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({8, 8, 10, 6, 4, 3, 5, 8,\
    \ 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}))) == (4));\n    assert(candidate((std::vector<long>({2,\
    \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}))) == (2));\n    assert(candidate((std::vector<long>({1,\
    \ 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}))) == (1));\n    assert(candidate((std::vector<long>({9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}))) == (4));\n    assert(candidate((std::vector<long>({2, 6, 4,\
    \ 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}))) == (4));\n\
    \    assert(candidate((std::vector<long>({9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10,\
    \ 3, 8, 2, 6, 2, 3, 1}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({10}))) == (-1));\n    assert(candidate((std::vector<long>({9,\
    \ 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}))) == (1));\n    assert(candidate((std::vector<long>({7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 10, 10, 9, 2}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmp2p8wbmuu: /tmp/tmp2p8wbmuu.cpp:25: int main(): Assertion `candidate((std::vector<long>({4,\
    \ 1, 4, 1, 4, 4}))) == (4)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the list.\n// If no such a value exist, return -1.\n// Examples:\n// search([4,\
    \ 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n// search([5,\
    \ 5, 4, 4, 4]) == -1\nlong search(std::vector<long> lst) {\n    long ans = -1;\n\
    \    long freq[100];\n    for (long i : lst) {\n        freq[i] = freq[i] + 1;\n\
    \    }\n    for (long i : lst) {\n        if (freq[i] >= i) {\n            ans\
    \ = i;\n            break;\n        }\n    }\n    return ans;\n}\nint main() {\n\
    \    auto candidate = search;\n    assert(candidate((std::vector<long>({5, 5,\
    \ 5, 5, 1}))) == (1));\n    assert(candidate((std::vector<long>({4, 1, 4, 1, 4,\
    \ 4}))) == (4));\n    assert(candidate((std::vector<long>({3, 3}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({8, 8, 8, 8, 8, 8, 8, 8}))) == (8));\n\
    \    assert(candidate((std::vector<long>({2, 3, 3, 2, 2}))) == (2));\n    assert(candidate((std::vector<long>({2,\
    \ 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 2, 8, 2}))) == (2));\n    assert(candidate((std::vector<long>({6,\
    \ 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}))) == (1));\n    assert(candidate((std::vector<long>({8,\
    \ 8, 3, 6, 5, 6, 4}))) == (-1));\n    assert(candidate((std::vector<long>({6,\
    \ 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9})))\
    \ == (1));\n    assert(candidate((std::vector<long>({1, 9, 10, 1, 3}))) == (1));\n\
    \    assert(candidate((std::vector<long>({6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10,\
    \ 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}))) == (5));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({8, 8, 10, 6, 4, 3, 5, 8,\
    \ 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}))) == (4));\n    assert(candidate((std::vector<long>({2,\
    \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}))) == (2));\n    assert(candidate((std::vector<long>({1,\
    \ 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}))) == (1));\n    assert(candidate((std::vector<long>({9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}))) == (4));\n    assert(candidate((std::vector<long>({2, 6, 4,\
    \ 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}))) == (4));\n\
    \    assert(candidate((std::vector<long>({9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10,\
    \ 3, 8, 2, 6, 2, 3, 1}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({10}))) == (-1));\n    assert(candidate((std::vector<long>({9,\
    \ 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}))) == (1));\n    assert(candidate((std::vector<long>({7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 10, 10, 9, 2}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmpr7kedhg6: /tmp/tmpr7kedhg6.cpp:27: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 5, 5, 5, 1}))) == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the list.\n// If no such a value exist, return -1.\n// Examples:\n// search([4,\
    \ 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n// search([5,\
    \ 5, 4, 4, 4]) == -1\nlong search(std::vector<long> lst) {\n    // Your code here\n\
    \    long ans = -1;\n    long freq = 0;\n    for (long i : lst) {\n        freq\
    \ += i;\n        if (freq >= i) {\n            ans = i;\n            break;\n\
    \        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate = search;\n\
    \    assert(candidate((std::vector<long>({5, 5, 5, 5, 1}))) == (1));\n    assert(candidate((std::vector<long>({4,\
    \ 1, 4, 1, 4, 4}))) == (4));\n    assert(candidate((std::vector<long>({3, 3})))\
    \ == (-1));\n    assert(candidate((std::vector<long>({8, 8, 8, 8, 8, 8, 8, 8})))\
    \ == (8));\n    assert(candidate((std::vector<long>({2, 3, 3, 2, 2}))) == (2));\n\
    \    assert(candidate((std::vector<long>({2, 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10,\
    \ 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}))) == (1));\n    assert(candidate((std::vector<long>({3,\
    \ 2, 8, 2}))) == (2));\n    assert(candidate((std::vector<long>({6, 7, 1, 8, 8,\
    \ 10, 5, 8, 5, 3, 10}))) == (1));\n    assert(candidate((std::vector<long>({8,\
    \ 8, 3, 6, 5, 6, 4}))) == (-1));\n    assert(candidate((std::vector<long>({6,\
    \ 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9})))\
    \ == (1));\n    assert(candidate((std::vector<long>({1, 9, 10, 1, 3}))) == (1));\n\
    \    assert(candidate((std::vector<long>({6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10,\
    \ 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}))) == (5));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({8, 8, 10, 6, 4, 3, 5, 8,\
    \ 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}))) == (4));\n    assert(candidate((std::vector<long>({2,\
    \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}))) == (2));\n    assert(candidate((std::vector<long>({1,\
    \ 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}))) == (1));\n    assert(candidate((std::vector<long>({9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}))) == (4));\n    assert(candidate((std::vector<long>({2, 6, 4,\
    \ 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}))) == (4));\n\
    \    assert(candidate((std::vector<long>({9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10,\
    \ 3, 8, 2, 6, 2, 3, 1}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({10}))) == (-1));\n    assert(candidate((std::vector<long>({9,\
    \ 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}))) == (1));\n    assert(candidate((std::vector<long>({7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 10, 10, 9, 2}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmp39eef79y: /tmp/tmp39eef79y.cpp:26: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 5, 5, 5, 1}))) == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the list.\n// If no such a value exist, return -1.\n// Examples:\n// search([4,\
    \ 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n// search([5,\
    \ 5, 4, 4, 4]) == -1\nlong search(std::vector<long> lst) {\n    long maxVal =\
    \ lst[0];\n    long maxFreq = lst[0];\n    for (long i = 1; i < lst.size(); i++)\
    \ {\n        if (lst[i] > maxVal) {\n            maxVal = lst[i];\n          \
    \  maxFreq = lst[i];\n        } else if (lst[i] == maxVal) {\n            maxFreq++;\n\
    \        }\n    }\n    if (maxFreq >= maxVal) {\n        return maxVal;\n    }\
    \ else {\n        return -1;\n    }\n}\nint main() {\n    auto candidate = search;\n\
    \    assert(candidate((std::vector<long>({5, 5, 5, 5, 1}))) == (1));\n    assert(candidate((std::vector<long>({4,\
    \ 1, 4, 1, 4, 4}))) == (4));\n    assert(candidate((std::vector<long>({3, 3})))\
    \ == (-1));\n    assert(candidate((std::vector<long>({8, 8, 8, 8, 8, 8, 8, 8})))\
    \ == (8));\n    assert(candidate((std::vector<long>({2, 3, 3, 2, 2}))) == (2));\n\
    \    assert(candidate((std::vector<long>({2, 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10,\
    \ 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}))) == (1));\n    assert(candidate((std::vector<long>({3,\
    \ 2, 8, 2}))) == (2));\n    assert(candidate((std::vector<long>({6, 7, 1, 8, 8,\
    \ 10, 5, 8, 5, 3, 10}))) == (1));\n    assert(candidate((std::vector<long>({8,\
    \ 8, 3, 6, 5, 6, 4}))) == (-1));\n    assert(candidate((std::vector<long>({6,\
    \ 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9})))\
    \ == (1));\n    assert(candidate((std::vector<long>({1, 9, 10, 1, 3}))) == (1));\n\
    \    assert(candidate((std::vector<long>({6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10,\
    \ 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}))) == (5));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({8, 8, 10, 6, 4, 3, 5, 8,\
    \ 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}))) == (4));\n    assert(candidate((std::vector<long>({2,\
    \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}))) == (2));\n    assert(candidate((std::vector<long>({1,\
    \ 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}))) == (1));\n    assert(candidate((std::vector<long>({9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}))) == (4));\n    assert(candidate((std::vector<long>({2, 6, 4,\
    \ 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}))) == (4));\n\
    \    assert(candidate((std::vector<long>({9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10,\
    \ 3, 8, 2, 6, 2, 3, 1}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({10}))) == (-1));\n    assert(candidate((std::vector<long>({9,\
    \ 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}))) == (1));\n    assert(candidate((std::vector<long>({7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 10, 10, 9, 2}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmpkq5pg26u: /tmp/tmpkq5pg26u.cpp:30: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 5, 5, 5, 1}))) == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the list.\n// If no such a value exist, return -1.\n// Examples:\n// search([4,\
    \ 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n// search([5,\
    \ 5, 4, 4, 4]) == -1\nlong search(std::vector<long> lst) {\n    long ans = -1;\n\
    \    long freq = 0;\n    for (long i : lst) {\n        freq += i;\n        if\
    \ (freq >= i) {\n            ans = i;\n            break;\n        }\n    }\n\
    \    return ans;\n}\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5, 1}))) == (1));\n    assert(candidate((std::vector<long>({4, 1, 4, 1,\
    \ 4, 4}))) == (4));\n    assert(candidate((std::vector<long>({3, 3}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({8, 8, 8, 8, 8, 8, 8, 8}))) == (8));\n\
    \    assert(candidate((std::vector<long>({2, 3, 3, 2, 2}))) == (2));\n    assert(candidate((std::vector<long>({2,\
    \ 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 2, 8, 2}))) == (2));\n    assert(candidate((std::vector<long>({6,\
    \ 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}))) == (1));\n    assert(candidate((std::vector<long>({8,\
    \ 8, 3, 6, 5, 6, 4}))) == (-1));\n    assert(candidate((std::vector<long>({6,\
    \ 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9})))\
    \ == (1));\n    assert(candidate((std::vector<long>({1, 9, 10, 1, 3}))) == (1));\n\
    \    assert(candidate((std::vector<long>({6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10,\
    \ 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}))) == (5));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({8, 8, 10, 6, 4, 3, 5, 8,\
    \ 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}))) == (4));\n    assert(candidate((std::vector<long>({2,\
    \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}))) == (2));\n    assert(candidate((std::vector<long>({1,\
    \ 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}))) == (1));\n    assert(candidate((std::vector<long>({9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}))) == (4));\n    assert(candidate((std::vector<long>({2, 6, 4,\
    \ 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}))) == (4));\n\
    \    assert(candidate((std::vector<long>({9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10,\
    \ 3, 8, 2, 6, 2, 3, 1}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({10}))) == (-1));\n    assert(candidate((std::vector<long>({9,\
    \ 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}))) == (1));\n    assert(candidate((std::vector<long>({7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 10, 10, 9, 2}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmp0if6sfav: /tmp/tmp0if6sfav.cpp:25: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 5, 5, 5, 1}))) == (1)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the list.\n// If no such a value exist, return -1.\n// Examples:\n// search([4,\
    \ 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n// search([5,\
    \ 5, 4, 4, 4]) == -1\nlong search(std::vector<long> lst) {\n    long maxVal =\
    \ lst[0];\n    long maxFreq = lst[0];\n    for (long i = 1; i < lst.size(); i++)\
    \ {\n        if (lst[i] > maxVal) {\n            maxVal = lst[i];\n          \
    \  maxFreq = lst[i];\n        } else if (lst[i] == maxVal) {\n            maxFreq++;\n\
    \        }\n    }\n    return maxVal > 0 ? maxVal : -1;\n}\nint main() {\n   \
    \ auto candidate = search;\n    assert(candidate((std::vector<long>({5, 5, 5,\
    \ 5, 1}))) == (1));\n    assert(candidate((std::vector<long>({4, 1, 4, 1, 4, 4})))\
    \ == (4));\n    assert(candidate((std::vector<long>({3, 3}))) == (-1));\n    assert(candidate((std::vector<long>({8,\
    \ 8, 8, 8, 8, 8, 8, 8}))) == (8));\n    assert(candidate((std::vector<long>({2,\
    \ 3, 3, 2, 2}))) == (2));\n    assert(candidate((std::vector<long>({2, 7, 8, 8,\
    \ 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}))) == (1));\n    assert(candidate((std::vector<long>({3,\
    \ 2, 8, 2}))) == (2));\n    assert(candidate((std::vector<long>({6, 7, 1, 8, 8,\
    \ 10, 5, 8, 5, 3, 10}))) == (1));\n    assert(candidate((std::vector<long>({8,\
    \ 8, 3, 6, 5, 6, 4}))) == (-1));\n    assert(candidate((std::vector<long>({6,\
    \ 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9})))\
    \ == (1));\n    assert(candidate((std::vector<long>({1, 9, 10, 1, 3}))) == (1));\n\
    \    assert(candidate((std::vector<long>({6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10,\
    \ 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}))) == (5));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({8, 8, 10, 6, 4, 3, 5, 8,\
    \ 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}))) == (4));\n    assert(candidate((std::vector<long>({2,\
    \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}))) == (2));\n    assert(candidate((std::vector<long>({1,\
    \ 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}))) == (1));\n    assert(candidate((std::vector<long>({9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}))) == (4));\n    assert(candidate((std::vector<long>({2, 6, 4,\
    \ 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}))) == (4));\n\
    \    assert(candidate((std::vector<long>({9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10,\
    \ 3, 8, 2, 6, 2, 3, 1}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({10}))) == (-1));\n    assert(candidate((std::vector<long>({9,\
    \ 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}))) == (1));\n    assert(candidate((std::vector<long>({7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 10, 10, 9, 2}))) == (-1));\n}\n"
  stdout: ''
  stderr: "tmp07bahzbg: /tmp/tmp07bahzbg.cpp:26: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 5, 5, 5, 1}))) == (1)' failed.\n"
  exit_code: -6
  status: Exception
