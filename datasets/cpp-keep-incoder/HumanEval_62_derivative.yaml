name: HumanEval_62_derivative
language: cpp
prompt: "#include<assert.h>\n#include<bits/stdc++.h>\n// xs represent coefficients\
  \ of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative\
  \ of this polynomial in the same form.\n// >>> derivative([3, 1, 2, 4, 5])\n// [1,\
  \ 4, 12, 20]\n// >>> derivative([1, 2, 3])\n// [2, 6]\nstd::vector<long> derivative(std::vector<long>\
  \ xs) {\n"
tests: "}\nint main() {\n    auto candidate = derivative;\n    assert(candidate((std::vector<long>({3,\
  \ 1, 2, 4, 5}))) == (std::vector<long>({1, 4, 12, 20})));\n    assert(candidate((std::vector<long>({1,\
  \ 2, 3}))) == (std::vector<long>({2, 6})));\n    assert(candidate((std::vector<long>({3,\
  \ 2, 1}))) == (std::vector<long>({2, 2})));\n    assert(candidate((std::vector<long>({3,\
  \ 2, 1, 0, 4}))) == (std::vector<long>({2, 2, 0, 16})));\n    assert(candidate((std::vector<long>({1})))\
  \ == (std::vector<long>()));\n}\n"
completions: ["    assert(xs.size() > 1);\n    std::vector<long> derivative(xs.size()\
    \ - 1);\n    long power = 1;\n    for (long i = xs.size() - 2; i >= 0; i--) {\n\
    \        derivative[i] = power * xs[i];\n        power *= xs[i + 1];\n    }\n\
    \    return derivative;", "    std::vector<long> derivative(xs.size());\n    long\
    \ d = 0;\n    for (long i = 0; i < xs.size(); i++) {\n        d += xs[i] * xs[i];\n\
    \        derivative[i] = d;\n    }\n    return derivative;", "    assert(xs.size()\
    \ > 1);\n    std::vector<long> derivative(xs.size() - 1);\n    long power = 1;\n\
    \    for (long i = xs.size() - 2; i >= 0; i--) {\n        derivative[i] = power\
    \ * xs[i];\n        power *= xs[i + 1];\n    }\n    return derivative;", "   \
    \ std::vector<long> derivative;\n    derivative.reserve(xs.size());\n    for (long\
    \ i = 0; i < xs.size(); i++) {\n        derivative.push_back(xs[i]);\n    }\n\
    \    derivative.push_back(0);\n    return derivative;", "    std::vector<long>\
    \ derivative;\n    long pow = 1;\n    long sum = 0;\n    for (long i = 0; i <\
    \ xs.size(); i++) {\n        sum += pow * xs[i];\n        derivative.push_back(pow);\n\
    \        pow *= xs[i];\n    }\n    derivative.push_back(pow);\n    return derivative;",
  "    assert(xs.size() > 1);\n    std::vector<long> derivative(xs.size());\n    derivative[0]\
    \ = xs[0];\n    derivative[1] = xs[1];\n    for (int i = 2; i < xs.size(); i++)\
    \ {\n        derivative[i] = derivative[i - 1] * xs[i];\n    }\n    return derivative;",
  "    assert(xs.size() > 1);\n    std::vector<long> derivative(xs.size());\n    long\
    \ d = 1;\n    for (long i = 0; i < xs.size(); i++) {\n        derivative[i] =\
    \ d;\n        d *= xs[i];\n    }\n    return derivative;", "    std::vector<long>\
    \ derivative;\n    derivative.resize(xs.size());\n    long a = 1;\n    long b\
    \ = 1;\n    long c = 1;\n    long d = 1;\n    long e = 1;\n    long f = 0;\n \
    \   long g = 1;\n    long h = 1;\n    long i = 0;\n    long j = 0;\n    long k\
    \ = 0;\n    long l = 0;\n    long m = 1;\n    long n = 1;\n    long o = 1;\n \
    \   long p = 0;\n    long q = 1;\n    long r = 1;\n    long s = 1;\n    long t\
    \ = 1;\n    long u = 1;\n    long v = 1;\n    long w = 1;\n    long x = 1;\n \
    \   long y = 1;\n    long z = 1;\n    long A = 1;\n    long B = 1;\n    long C\
    \ = 1;\n    long D = 1;\n    long E = 1;\n    long F = 0;\n    long G = 1;\n \
    \   long H = 1;\n    long I = 1;\n    long J = 1;\n    long K = 1;\n    long L\
    \ = 1;\n    long M = 1;\n    long N = 1;\n    long O = 1;\n    long P = 0;\n \
    \   long Q = 1;\n    long R = 1;\n    long S = 1;\n    long T = 1;\n    long U\
    \ = 1;\n    long V = 1;\n    long W = 1;\n    long X = 1;\n    long Y = 1;\n \
    \   long Z = 1;\n    long A1 = 1;\n    long B1 = 1;\n    long C1 = 1;\n    long\
    \ D1 = 1;\n    long E1 = 1;\n    long F1 = 0;\n    long G1 = 1;\n    long H1 =\
    \ 1;\n    long I1 = 1;\n    long J1 = 1;\n    long K1 = 1;\n    long L1 = 1;\n\
    \    long M1 = 1;\n    long N1 = 1;\n    long O1 = 1;\n    long P1 = 1;\n    long\
    \ Q1 = 1;\n    long R1 = 1;\n    long S1 = 1;\n    long T1 = 1;\n    long U1 =\
    \ 1;\n    long V1 = 1;\n    long W1 = 1;\n    long X1 = 1;\n    long Y1 = 1;\n\
    \    long Z1 = 1;\n    long A2 = 1;\n    long B2 = 1;\n    long C2 = 1;\n    long\
    \ D2 = 1;\n    long E2 = 1;\n    long F2 = 1;\n    long G2 = 1;\n    long H2 =\
    \ 1;\n    long I2 = 1;\n    long J2 = 1;\n    long K2 = 1;\n    long L2 = 1;\n\
    \    long M2 = 1;\n    long N2 = 1;\n    long O2 = 1;\n    long P2 = 1;\n    long\
    \ Q2 = 1;\n    long R2 = 1;\n", "    std::vector<long> derivative(xs.size());\n\
    \    long long a = 1;\n    long long b = 1;\n    long long c = 1;\n    for (long\
    \ long i = 0; i < xs.size(); i++) {\n        derivative[i] = xs[i];\n    }\n \
    \   for (long long i = 1; i < xs.size(); i++) {\n        derivative[i] = derivative[i\
    \ - 1] * xs[i];\n    }\n    return derivative;", "    std::vector<long> derivative;\n\
    \    derivative.reserve(xs.size());\n    long a = 1;\n    for (long i = 0; i <\
    \ xs.size(); i++) {\n        derivative += xs[i] * a;\n        a *= xs[i];\n \
    \   }\n    return derivative;", "    std::vector<long> derivative(xs.size());\n\
    \    long a = 1;\n    long b = 1;\n    long c = 1;\n    long d = 1;\n    for (long\
    \ i = 0; i < xs.size(); i++) {\n        derivative[i] = b;\n        b += xs[i]\
    \ * c;\n        c *= xs[i];\n    }\n    return derivative;", "    std::vector<long>\
    \ derivative;\n    long a = 1;\n    long b = 1;\n    long c = 1;\n    for (long\
    \ i = 0; i < xs.size(); i++) {\n        derivative.push_back(b);\n        b +=\
    \ xs[i] * c;\n        c *= xs[i];\n    }\n    return derivative;", "    assert(xs.size()\
    \ > 1);\n    std::vector<long> derivative(xs.size());\n    long a = 1;\n    long\
    \ b = 1;\n    long c = 1;\n    long d = 1;\n    long e = 1;\n    long f = 1;\n\
    \    long g = 1;\n    long h = 1;\n    long i = 1;\n    long j = 1;\n    long\
    \ k = 1;\n    long l = 1;\n    long m = 1;\n    long n = 1;\n    long o = 1;\n\
    \    long p = 1;\n    long q = 1;\n    long r = 1;\n    long s = 1;\n    long\
    \ t = 1;\n    long u = 1;\n    long v = 1;\n    long w = 1;\n    long x = 1;\n\
    \    long y = 1;\n    long z = 1;\n    long a = 1;\n    long b = 1;\n    long\
    \ c = 1;\n    long d = 1;\n    long e = 1;\n    long f = 1;\n    long g = 1;\n\
    \    long h = 1;\n    long i = 1;\n    long j = 1;\n    long k = 1;\n    long\
    \ l = 1;\n    long m = 1;\n    long n = 1;\n    long o = 1;\n    long p = 1;\n\
    \    long q = 1;\n    long r = 1;\n    long s = 1;\n    long t = 1;\n    long\
    \ u = 1;\n    long v = 1;\n    long w = 1;\n    long x = 1;\n    long y = 1;\n\
    \    long z = 1;\n    long a = 1;\n    long b = 1;\n    long c = 1;\n    long\
    \ d = 1;\n    long e = 1;\n    long f = 1;\n    long g = 1;\n    long h = 1;\n\
    \    long i = 1;\n    long j = 1;\n    long k = 1;\n    long l = 1;\n    long\
    \ m = 1;\n    long n = 1;\n    long o = 1;\n    long p = 1;\n    long q = 1;\n\
    \    long r = 1;\n    long s = 1;\n    long t = 1;\n    long u = 1;\n    long\
    \ v = 1;\n    long w = 1;\n    long x = 1;\n    long y = 1;\n    long z = 1;\n\
    \    long a = 1;\n    long b = 1;\n    long c = 1;\n    long d = 1;\n    long\
    \ e = 1;\n    long f = 1;\n    long g = 1;\n    long h = 1;\n    long i = 1;\n\
    \    long j = 1;\n    long k = 1;\n    long l = 1;\n    long m = 1;\n    long\
    \ n = 1;\n    long o = 1;\n    long p = 1;\n    long q = 1;\n    long r = 1;\n\
    \    long s = 1;\n    long t = 1;\n    long u = 1;\n    long ", "    std::vector<long>\
    \ derivative;\n    derivative.resize(xs.size());\n    long a = 1;\n    long b\
    \ = 1;\n    long c = 1;\n    for (int i = 0; i < xs.size(); i++) {\n        derivative[i]\
    \ = xs[i];\n        long d = 1;\n        for (int j = i + 1; j < xs.size(); j++)\
    \ {\n            derivative[i] = derivative[i] * xs[j];\n            d = d * xs[j];\n\
    \        }\n        derivative[i] = derivative[i] * a + b;\n        b = derivative[i];\n\
    \        a = derivative[i];\n    }\n    return derivative;", "    assert(xs.size()\
    \ > 1);\n    std::vector<long> derivative;\n    long a = xs[0];\n    long b =\
    \ xs[1];\n    for (long i = 2; i < xs.size(); i++) {\n        derivative += xs[i]\
    \ * pow(b, i);\n    }\n    return derivative;", "    std::vector<long> derivative;\n\
    \    derivative.reserve(xs.size());\n    long pow = 1;\n    for (long i = 0; i\
    \ < xs.size(); i++) {\n        derivative.push_back(pow);\n        pow *= xs[i];\n\
    \    }\n    return derivative;", "    std::vector<long> derivative;\n    derivative.resize(xs.size());\n\
    \    derivative[0] = xs[0];\n    for (int i = 1; i < xs.size(); i++) {\n     \
    \   derivative[i] = derivative[i - 1] * xs[i];\n    }\n    return derivative;",
  "    assert(xs.size() > 1);\n    std::vector<long> derivative(xs.size());\n    long\
    \ a = 1;\n    long b = 1;\n    long c = 1;\n    long d = 1;\n    long e = 1;\n\
    \    long f = 1;\n    long g = 1;\n    long h = 1;\n    long i = 1;\n    long\
    \ j = 1;\n    long k = 1;\n    long l = 1;\n    long m = 1;\n    long n = 1;\n\
    \    long o = 1;\n    long p = 1;\n    long q = 1;\n    long r = 1;\n    long\
    \ s = 1;\n    long t = 1;\n    long u = 1;\n    long v = 1;\n    long w = 1;\n\
    \    long x = 1;\n    long y = 1;\n    long z = 1;\n    long a = 1;\n    long\
    \ b = 1;\n    long c = 1;\n    long d = 1;\n    long e = 1;\n    long f = 1;\n\
    \    long g = 1;\n    long h = 1;\n    long i = 1;\n    long j = 1;\n    long\
    \ k = 1;\n    long l = 1;\n    long m = 1;\n    long n = 1;\n    long o = 1;\n\
    \    long p = 1;\n    long q = 1;\n    long r = 1;\n    long s = 1;\n    long\
    \ t = 1;\n    long u = 1;\n    long v = 1;\n    long w = 1;\n    long x = 1;\n\
    \    long y = 1;\n    long z = 1;\n    long a = 1;\n    long b = 1;\n    long\
    \ c = 1;\n    long d = 1;\n    long e = 1;\n    long f = 1;\n    long g = 1;\n\
    \    long h = 1;\n    long i = 1;\n    long j = 1;\n    long k = 1;\n    long\
    \ l = 1;\n    long m = 1;\n    long n = 1;\n    long o = 1;\n    long p = 1;\n\
    \    long q = 1;\n    long r = 1;\n    long s = 1;\n    long t = 1;\n    long\
    \ u = 1;\n    long v = 1;\n    long w = 1;\n    long x = 1;\n    long y = 1;\n\
    \    long z = 1;\n    long a = 1;\n    long b = 1;\n    long c = 1;\n    long\
    \ d = 1;\n    long e = 1;\n    long f = 1;\n    long g = 1;\n    long h = 1;\n\
    \    long i = 1;\n    long j = 1;\n    long k = 1;\n    long l = 1;\n    long\
    \ m = 1;\n    long n = 1;\n    long o = 1;\n    long p = 1;\n    long q = 1;\n\
    \    long r = 1;\n    long s = 1;\n    long t = 1;\n    long u = 1;\n    long ",
  "    std::vector<long> derivative;\n    derivative.resize(xs.size());\n    long\
    \ power = 1;\n    for (long i = 0; i < xs.size(); i++) {\n        derivative[i]\
    \ = power;\n        power *= xs[i];\n    }\n    return derivative;", "    std::vector<long>\
    \ derivative;\n    derivative.reserve(xs.size());\n    long pow = 1;\n    for\
    \ (long i = 0; i < xs.size(); i++) {\n        derivative.push_back(pow);\n   \
    \     pow *= xs[i];\n    }\n    return derivative;", "    std::vector<long> derivative;\n\
    \    long n = xs.size();\n    long d = 1;\n    for (long i = 0; i < n - 1; i++)\
    \ {\n        derivative += xs[i] * d;\n        d *= xs[i + 1];\n    }\n    derivative\
    \ += xs[n - 1];\n    return derivative;", "    assert(xs.size() >= 2);\n    std::vector<long>\
    \ derivative(xs.size());\n    derivative[0] = xs[1];\n    for (int i = 2; i <\
    \ xs.size(); i++) {\n        derivative[i] = xs[i] - derivative[i - 1];\n    }\n\
    \    return derivative;", "    std::vector<long> derivative;\n    derivative.reserve(xs.size());\n\
    \    for (long i = 0; i < xs.size(); i++) {\n        derivative.push_back(xs[i]);\n\
    \    }\n    derivative.push_back(1);\n    return derivative;", "    assert(xs.size()\
    \ > 1);\n    std::vector<long> derivative(xs.size());\n    long a = 1;\n    long\
    \ b = 1;\n    for (long i = 0; i < xs.size() - 1; i++) {\n        derivative[i]\
    \ = b;\n        b *= xs[i];\n    }\n    derivative[xs.size() - 1] = 0;\n    return\
    \ derivative;", "    std::vector<long> derivative;\n    derivative.push_back(xs[0]);\n\
    \    for (long i = 1; i < xs.size(); i++) {\n        derivative.push_back(xs[i]\
    \ + derivative[i - 1] * xs[i - 1]);\n    }\n    return derivative;", "    assert(xs.size()\
    \ > 1);\n    std::vector<long> derivative(xs.size() - 1);\n    for (long i = 1;\
    \ i < xs.size(); i++) {\n        derivative[i - 1] = xs[i] - xs[i - 1];\n    }\n\
    \    return derivative;", "    std::vector<long> derivative;\n    derivative.resize(xs.size());\n\
    \    long a = xs[0];\n    long b = 1;\n    long c = 1;\n    for (int i = 1; i\
    \ < xs.size(); i++) {\n        derivative[i] = b;\n        b *= xs[i];\n     \
    \   c += xs[i] * b;\n    }\n    derivative[0] = c;\n    return derivative;", " \
    \   std::vector<long> derivative(xs.size());\n    long power = 1;\n    long sum\
    \ = 0;\n    for (long i = 0; i < xs.size(); i++) {\n        sum += pow(xs[i],\
    \ power);\n        derivative[i] = sum;\n        power *= xs[i];\n    }\n    return\
    \ derivative;", "    std::vector<long> derivative;\n    derivative.push_back(xs[0]);\n\
    \    long d = 1;\n    for (long i = 2; i < xs.size(); i++) {\n        derivative.push_back(xs[i]\
    \ * d);\n        d *= xs[i];\n    }\n    return derivative;", "    std::vector<long>\
    \ derivative;\n    long n = xs.size();\n    long m = 1;\n    long k = 0;\n   \
    \ long i = 0;\n    long j = 0;\n    long k = 0;\n    long sum = 0;\n    long temp\
    \ = 0;\n    long temp2 = 0;\n    long temp3 = 0;\n    long temp4 = 0;\n    long\
    \ temp5 = 0;\n    long temp6 = 0;\n    long temp7 = 0;\n    long temp8 = 0;\n\
    \    long temp9 = 0;\n    long temp10 = 0;\n    long temp11 = 0;\n    long temp12\
    \ = 0;\n    long temp13 = 0;\n    long temp14 = 0;\n    long temp15 = 0;\n   \
    \ long temp16 = 0;\n    long temp17 = 0;\n    long temp18 = 0;\n    long temp19\
    \ = 0;\n    long temp20 = 0;\n    long temp21 = 0;\n    long temp22 = 0;\n   \
    \ long temp23 = 0;\n    long temp24 = 0;\n    long temp25 = 0;\n    long temp26\
    \ = 0;\n    long temp27 = 0;\n    long temp28 = 0;\n    long temp29 = 0;\n   \
    \ long temp30 = 0;\n    long temp31 = 0;\n    long temp32 = 0;\n    long temp33\
    \ = 0;\n    long temp34 = 0;\n    long temp35 = 0;\n    long temp36 = 0;\n   \
    \ long temp37 = 0;\n    long temp38 = 0;\n    long temp39 = 0;\n    long temp40\
    \ = 0;\n    long temp41 = 0;\n    long temp42 = 0;\n    long temp43 = 0;\n   \
    \ long temp44 = 0;\n    long temp45 = 0;\n    long temp46 = 0;\n    long temp47\
    \ = 0;\n    long temp48 = 0;\n    long temp49 = 0;\n    long temp50 = 0;\n   \
    \ long temp51 = 0;\n    long temp52 = 0;\n    long temp53 = 0;\n    long temp54\
    \ = 0;\n    long temp55 = 0;\n    long temp56 = 0;\n    long temp57 = 0;\n   \
    \ long temp58 = 0;\n    long temp59 = 0;\n    long temp60 = 0;\n    long temp61\
    \ = 0;\n    long temp62 = 0;\n    long temp63 = 0;\n    long temp64 = 0;\n   \
    \ long temp65 = 0;\n    long temp66 = 0;\n    long temp67 = 0;\n    long temp68\
    \ = 0;\n    long temp69 = 0;\n    long temp70 = 0;\n    long temp71 = 0;\n   \
    \ long temp72 = 0;\n    long temp73 = 0;\n    long temp74 = 0;\n    long temp75\
    \ = 0;\n    long temp76 = 0;\n    long temp77 = 0;\n    long temp78 = 0;\n   \
    \ long temp79 = 0;\n", "    assert(xs.size() > 1);\n    std::vector<long> derivative(xs.size()\
    \ - 1);\n    for (long i = 1; i < xs.size(); i++) {\n        derivative[i - 1]\
    \ = xs[i] - xs[i - 1];\n    }\n    return derivative;", "    std::vector<long>\
    \ derivative(xs.size());\n    long power = 1;\n    long sum = 0;\n    for (long\
    \ i = 0; i < xs.size(); i++) {\n        sum += xs[i] * power;\n        derivative[i]\
    \ = sum;\n        power *= xs[i];\n    }\n    return derivative;", "    assert(xs.size()\
    \ > 1);\n    std::vector<long> derivative(xs.size());\n    long a = 1;\n    long\
    \ b = 1;\n    long c = 1;\n    long d = 1;\n    long e = 1;\n    long f = 0;\n\
    \    long g = 1;\n    long h = 1;\n    long i = 1;\n    long j = 1;\n    long\
    \ k = 1;\n    long l = 1;\n    long m = 1;\n    long n = 1;\n    long o = 1;\n\
    \    long p = 1;\n    long q = 1;\n    long r = 1;\n    long s = 1;\n    long\
    \ t = 1;\n    long u = 1;\n    long v = 1;\n    long w = 1;\n    long x = 1;\n\
    \    long y = 1;\n    long z = 1;\n    long a = 1;\n    long b = 1;\n    long\
    \ c = 1;\n    long d = 1;\n    long e = 1;\n    long f = 0;\n    long g = 1;\n\
    \    long h = 1;\n    long i = 1;\n    long j = 1;\n    long k = 1;\n    long\
    \ l = 1;\n    long m = 1;\n    long n = 1;\n    long o = 1;\n    long p = 1;\n\
    \    long q = 1;\n    long r = 1;\n    long s = 1;\n    long t = 1;\n    long\
    \ u = 1;\n    long v = 1;\n    long w = 1;\n    long x = 1;\n    long y = 1;\n\
    \    long z = 1;\n    long a = 1;\n    long b = 1;\n    long c = 1;\n    long\
    \ d = 1;\n    long e = 1;\n    long f = 0;\n    long g = 1;\n    long h = 1;\n\
    \    long i = 1;\n    long j = 1;\n    long k = 1;\n    long l = 1;\n    long\
    \ m = 1;\n    long n = 1;\n    long o = 1;\n    long p = 1;\n    long q = 1;\n\
    \    long r = 1;\n    long s = 1;\n    long t = 1;\n    long u = 1;\n    long\
    \ v = 1;\n    long w = 1;\n    long x = 1;\n    long y = 1;\n    long z = 1;\n\
    \    long a = 1;\n    long b = 1;\n    long c = 1;\n    long d = 1;\n    long\
    \ e = 1;\n    long f = 0;\n    long g = 1;\n    long h = 1;\n    long i = 1;\n\
    \    long j = 1;\n    long k = 1;\n    long l = 1;\n    long m = 1;\n    long\
    \ n = 1;\n    long o = 1;\n    long p = 1;\n    long q = 1;\n    long r = 1;\n\
    \    long s = 1;\n    long t = 1;\n    long u = 1;\n    long ", "    assert(xs.size()\
    \ >= 2);\n    std::vector<long> derivative(xs.size());\n    derivative[0] = xs[1];\n\
    \    derivative[1] = xs[0] * xs[1];\n    for (size_t i = 2; i < xs.size(); i++)\
    \ {\n        derivative[i] = xs[i] * derivative[i - 1];\n    }\n    return derivative;",
  "    std::vector<long> derivative(xs.size());\n    long sum = 0;\n    for (long\
    \ i = 0; i < xs.size(); i++) {\n        sum += xs[i];\n        derivative[i] =\
    \ sum;\n    }\n    return derivative;", "    std::vector<long> derivative(xs.size());\n\
    \    long pow = 1;\n    for (long i = 0; i < xs.size(); i++) {\n        derivative[i]\
    \ = pow;\n        pow *= xs[i];\n    }\n    return derivative;", "    std::vector<long>\
    \ derivative;\n    derivative.reserve(xs.size());\n    for (long i = 1; i < xs.size();\
    \ i++) {\n        derivative.push_back(xs[i] - xs[i - 1]);\n    }\n    return\
    \ derivative;", "    std::vector<long> derivative;\n    derivative.push_back(0);\n\
    \    for (long i = 1; i < xs.size(); i++) {\n        derivative.push_back(xs[i]\
    \ - xs[i - 1]);\n    }\n    return derivative;", "    std::vector<long> derivative(xs.size());\n\
    \    derivative[0] = xs[0];\n    derivative[1] = xs[1];\n    for (size_t i = 2;\
    \ i < derivative.size(); i++) {\n        derivative[i] = derivative[i - 1] * xs[i];\n\
    \    }\n    return derivative;", "    std::vector<long> derivative;\n    derivative.resize(xs.size());\n\
    \    long power = 1;\n    for (long i = 0; i < xs.size(); i++) {\n        derivative[i]\
    \ = power;\n        power *= xs[i];\n    }\n    return derivative;", "    std::vector<long>\
    \ derivative;\n    derivative.resize(xs.size());\n    for (long i = 0; i < xs.size();\
    \ i++) {\n        derivative[i] = xs[i] - xs[i - 1];\n    }\n    return derivative;",
  "    assert(xs.size() > 1);\n    std::vector<long> derivative(xs.size());\n    long\
    \ power = 1;\n    for (long i = 0; i < xs.size(); i++) {\n        derivative[i]\
    \ = power;\n        power *= xs[i];\n    }\n    return derivative;", "    std::vector<long>\
    \ derivative;\n    derivative.resize(xs.size());\n    long pow = 1;\n    for (long\
    \ i = 0; i < xs.size(); i++) {\n        derivative[i] = pow;\n        pow *= xs[i];\n\
    \    }\n    return derivative;", "    std::vector<long> derivative;\n    derivative.push_back(xs[0]);\n\
    \    for (long i = 2; i < xs.size(); i++) {\n        derivative.push_back(xs[i]\
    \ * derivative[i - 1]);\n    }\n    return derivative;", "    std::vector<long>\
    \ derivative(xs.size());\n    derivative[0] = xs[0];\n    for (int i = 1; i <\
    \ xs.size(); i++) {\n        derivative[i] = xs[i] - derivative[i - 1];\n    }\n\
    \    return derivative;", "    std::vector<long> derivative(xs.size());\n    long\
    \ a = 1;\n    long b = 1;\n    long c = 1;\n    long d = 1;\n    long e = 1;\n\
    \    long f = 0;\n    long g = 1;\n    long h = 1;\n    long i = 1;\n    long\
    \ j = 1;\n    long k = 1;\n    long l = 1;\n    long m = 1;\n    long n = 1;\n\
    \    long o = 1;\n    long p = 1;\n    long q = 1;\n    long r = 1;\n    long\
    \ s = 1;\n    long t = 1;\n    long u = 1;\n    long v = 1;\n    long w = 1;\n\
    \    long x = 1;\n    long y = 1;\n    long z = 1;\n    long a = 1;\n    long\
    \ b = 1;\n    long c = 1;\n    long d = 1;\n    long e = 1;\n    long f = 0;\n\
    \    long g = 1;\n    long h = 1;\n    long i = 1;\n    long j = 1;\n    long\
    \ k = 1;\n    long l = 1;\n    long m = 1;\n    long n = 1;\n    long o = 1;\n\
    \    long p = 1;\n    long q = 1;\n    long r = 1;\n    long s = 1;\n    long\
    \ t = 1;\n    long u = 1;\n    long v = 1;\n    long w = 1;\n    long x = 1;\n\
    \    long y = 1;\n    long z = 1;\n    long a = 1;\n    long b = 1;\n    long\
    \ c = 1;\n    long d = 1;\n    long e = 1;\n    long f = 0;\n    long g = 1;\n\
    \    long h = 1;\n    long i = 1;\n    long j = 1;\n    long k = 1;\n    long\
    \ l = 1;\n    long m = 1;\n    long n = 1;\n    long o = 1;\n    long p = 1;\n\
    \    long q = 1;\n    long r = 1;\n    long s = 1;\n    long t = 1;\n    long\
    \ u = 1;\n    long v = 1;\n    long w = 1;\n    long x = 1;\n    long y = 1;\n\
    \    long z = 1;\n    long a = 1;\n    long b = 1;\n    long c = 1;\n    long\
    \ d = 1;\n    long e = 1;\n    long f = 0;\n    long g = 1;\n    long h = 1;\n\
    \    long i = 1;\n    long j = 1;\n    long k = 1;\n    long l = 1;\n    long\
    \ m = 1;\n    long n = 1;\n    long o = 1;\n    long p = 1;\n    long q = 1;\n\
    \    long r = 1;\n    long s = 1;\n    long t = 1;\n    long u = 1;\n    long\
    \ v = 1;\n    long w", "    std::vector<long> derivative;\n    derivative.reserve(xs.size());\n\
    \    long long a = 1;\n    long long b = 1;\n    long long c = 1;\n    for (long\
    \ long i = 0; i < xs.size(); i++) {\n        derivative += xs[i] * pow(a, i);\n\
    \        b *= xs[i];\n        c *= i;\n    }\n    derivative /= b;\n    return\
    \ derivative;", "    std::vector<long> derivative;\n    derivative.reserve(xs.size());\n\
    \    for (long i = 0; i < xs.size(); i++) {\n        derivative.push_back(xs[i]\
    \ * i);\n    }\n    return derivative;", "    std::vector<long> derivative;\n\
    \    derivative.reserve(xs.size());\n    for (long i = 1; i < xs.size(); i++)\
    \ {\n        derivative.push_back(xs[i] * i);\n    }\n    return derivative;",
  "    std::vector<long> derivative;\n    long a = xs[0];\n    long b = xs[1];\n \
    \   long c = xs[2];\n    long d = 1;\n    long e = 1;\n    long f = 1;\n    long\
    \ g = xs[3];\n    long h = 1;\n    long i = 1;\n    long j = 1;\n    long k =\
    \ 1;\n    long l = 1;\n    long m = 1;\n    long n = 1;\n    long o = 1;\n   \
    \ long p = 1;\n    long q = 1;\n    long r = 1;\n    long s = 1;\n    long t =\
    \ 1;\n    long u = 1;\n    long v = 1;\n    long w = 1;\n    long x = 1;\n   \
    \ long y = 1;\n    long z = 1;\n    long A = 1;\n    long B = 1;\n    long C =\
    \ 1;\n    long D = 1;\n    long E = 1;\n    long F = 1;\n    long G = 1;\n   \
    \ long H = 1;\n    long I = 1;\n    long J = 1;\n    long K = 1;\n    long L =\
    \ 1;\n    long M = 1;\n    long N = 1;\n    long O = 1;\n    long P = 1;\n   \
    \ long Q = 1;\n    long R = 1;\n    long S = 1;\n    long T = 1;\n    long U =\
    \ 1;\n    long V = 1;\n    long W = 1;\n    long X = 1;\n    long Y = 1;\n   \
    \ long Z = 1;\n    long A1 = 1;\n    long B1 = 1;\n    long C1 = 1;\n    long\
    \ D1 = 1;\n    long E1 = 1;\n    long F1 = 1;\n    long G1 = 1;\n    long H1 =\
    \ 1;\n    long I1 = 1;\n    long J1 = 1;\n    long K1 = 1;\n    long L1 = 1;\n\
    \    long M1 = 1;\n    long N1 = 1;\n    long O1 = 1;\n    long P1 = 1;\n    long\
    \ Q1 = 1;\n    long R1 = 1;\n    long S1 = 1;\n    long T1 = 1;\n    long U1 =\
    \ 1;\n    long V1 = 1;\n    long W1 = 1;\n    long X1 = 1;\n    long Y1 = 1;\n\
    \    long Z1 = 1;\n    long A2 = 1;\n    long B2 = 1;\n    long C2 = 1;\n    long\
    \ D2 = 1;\n    long E2 = 1;\n    long F2 = 1;\n    long G2 = 1;\n    long H2 =\
    \ 1;\n    long I2 = 1;\n    long J2 = 1;\n    long K2 = 1;\n    long L2 = 1;\n\
    \    long M2 = 1;\n    long N2 = 1;\n    long O2 = 1;\n    long P2 = 1;\n    long\
    \ Q2 = 1;\n    long R2 = 1;\n", "    assert(xs.size() > 1);\n    std::vector<long>\
    \ derivative(xs.size());\n    long a = 1;\n    for (long i = 0; i < xs.size();\
    \ i++) {\n        derivative[i] = a;\n        a = a * xs[i] + derivative[i];\n\
    \    }\n    return derivative;", "    std::vector<long> derivative;\n    derivative.reserve(xs.size());\n\
    \    long power = 1;\n    for (long i = 0; i < xs.size(); i++) {\n        derivative.push_back(power);\n\
    \        power *= xs[i];\n    }\n    return derivative;", "    assert(xs.size()\
    \ >= 2);\n    std::vector<long> derivative(xs.size() - 1);\n    derivative[0]\
    \ = xs[1];\n    for (int i = 1; i < xs.size() - 1; i++) {\n        derivative[i]\
    \ = derivative[i - 1] * xs[i + 1];\n    }\n    return derivative;", "    std::vector<long>\
    \ derivative;\n    derivative.resize(xs.size());\n    for (long i = 0; i < xs.size();\
    \ i++) {\n        derivative[i] = xs[i + 1];\n    }\n    return derivative;",
  "    std::vector<long> derivative;\n    derivative.reserve(xs.size());\n    long\
    \ x = xs[0];\n    long d = 1;\n    long n = xs.size();\n    for (long i = 1; i\
    \ < n; i++) {\n        derivative += d * xs[i];\n        d *= x;\n    }\n    return\
    \ derivative;", "    std::vector<long> derivative(xs.size());\n    long power\
    \ = 1;\n    long sum = 0;\n    for (long i = 0; i < xs.size(); i++) {\n      \
    \  sum += pow(xs[i], power);\n        derivative[i] = sum;\n        power *= xs[i];\n\
    \    }\n    return derivative;", "    std::vector<long> derivative;\n    long\
    \ a = xs[0];\n    long b = xs[1];\n    long c = xs[2];\n    long d = xs[3];\n\
    \    long e = xs[4];\n    long f = xs[5];\n    long g = xs[6];\n    long h = xs[7];\n\
    \    long i = xs[8];\n    long j = xs[9];\n    long k = xs[10];\n    long l =\
    \ xs[11];\n    long m = xs[12];\n    long n = xs[13];\n    long o = xs[14];\n\
    \    long p = xs[15];\n    long q = xs[16];\n    long r = xs[17];\n    long s\
    \ = xs[18];\n    long t = xs[19];\n    long u = xs[20];\n    long v = xs[21];\n\
    \    long w = xs[22];\n    long x = xs[23];\n    long y = xs[24];\n    long z\
    \ = xs[25];\n    long a = xs[26];\n    long b = xs[27];\n    long c = xs[28];\n\
    \    long d = xs[29];\n    long e = xs[30];\n    long f = xs[31];\n    long g\
    \ = xs[32];\n    long h = xs[33];\n    long i = xs[34];\n    long j = xs[35];\n\
    \    long k = xs[36];\n    long l = xs[37];\n    long m = xs[38];\n    long n\
    \ = xs[39];\n    long o = xs[40];\n    long p = xs[41];\n    long q = xs[42];\n\
    \    long r = xs[43];\n    long s = xs[44];\n    long t = xs[45];\n    long u\
    \ = xs[46];\n    long v = xs[47];\n    long w = xs[48];\n    long x = xs[49];\n\
    \    long y = xs[50];\n    long z = xs[51];\n    long a = xs[52];\n    long b\
    \ = xs[53];\n    long c = xs[54];\n    long d = xs[55];\n    long e = xs[56];\n\
    \    long f = xs[57];\n    long g = xs[58];\n    long h = xs[59];\n    long i\
    \ = xs[60];\n    long j = xs[61];\n    long k = xs[62];\n    long l = x", "  \
    \  std::vector<long> derivative(xs.size());\n    long a = 1;\n    long b = 1;\n\
    \    long c = 1;\n    long d = 1;\n    long e = 1;\n    long f = 0;\n    long\
    \ g = 1;\n    long h = 1;\n    long i = 1;\n    long j = 1;\n    long k = 1;\n\
    \    long l = 1;\n    long m = 1;\n    long n = 1;\n    long o = 1;\n    long\
    \ p = 1;\n    long q = 1;\n    long r = 1;\n    long s = 1;\n    long t = 1;\n\
    \    long u = 1;\n    long v = 1;\n    long w = 1;\n    long x = 1;\n    long\
    \ y = 1;\n    long z = 1;\n    long A = 1;\n    long B = 1;\n    long C = 1;\n\
    \    long D = 1;\n    long E = 1;\n    long F = 0;\n    long G = 1;\n    long\
    \ H = 1;\n    long I = 1;\n    long J = 1;\n    long K = 1;\n    long L = 1;\n\
    \    long M = 1;\n    long N = 1;\n    long O = 1;\n    long P = 1;\n    long\
    \ Q = 1;\n    long R = 1;\n    long S = 1;\n    long T = 1;\n    long U = 1;\n\
    \    long V = 1;\n    long W = 1;\n    long X = 1;\n    long Y = 1;\n    long\
    \ Z = 1;\n    long A1 = 1;\n    long B1 = 1;\n    long C1 = 1;\n    long D1 =\
    \ 1;\n    long E1 = 1;\n    long F1 = 1;\n    long G1 = 1;\n    long H1 = 1;\n\
    \    long I1 = 1;\n    long J1 = 1;\n    long K1 = 1;\n    long L1 = 1;\n    long\
    \ M1 = 1;\n    long N1 = 1;\n    long O1 = 1;\n    long P1 = 1;\n    long Q1 =\
    \ 1;\n    long R1 = 1;\n    long S1 = 1;\n    long T1 = 1;\n    long U1 = 1;\n\
    \    long V1 = 1;\n    long W1 = 1;\n    long X1 = 1;\n    long Y1 = 1;\n    long\
    \ Z1 = 1;\n    long A2 = 1;\n    long B2 = 1;\n    long C2 = 1;\n    long D2 =\
    \ 1;\n    long E2 = 1;\n    long F2 = 1;\n    long G2 = 1;\n    long H2 = 1;\n\
    \    long I2 = 1;\n    long J2 = 1;\n    long K2 = 1;\n    long L2 = 1;\n    long\
    \ M2 = 1;\n    long N2 = 1;\n    long O2 = 1;\n    long P2 = 1;\n    long Q2 =\
    \ 1;\n    long R2 = 1;\n    long S2 = 1;", "    assert(xs.size() >= 2);\n    std::vector<long>\
    \ derivative(xs.size());\n    long a = xs[0];\n    long b = xs[1];\n    long c\
    \ = xs[2];\n    long d = 1;\n    long e = 1;\n    long f = 0;\n    long g = xs.size();\n\
    \    long h = 1;\n    long i = 1;\n    long j = 1;\n    long k = 1;\n    long\
    \ l = xs.size();\n    long m = 1;\n    long n = 1;\n    long o = 1;\n    long\
    \ p = 1;\n    long q = 1;\n    long r = 1;\n    long s = 1;\n    long t = 1;\n\
    \    long u = 1;\n    long v = 1;\n    long w = 1;\n    long x = 1;\n    long\
    \ y = 1;\n    long z = 1;\n    long a = 1;\n    long b = 1;\n    long c = 1;\n\
    \    long d = 1;\n    long e = 1;\n    long f = 0;\n    long g = xs.size();\n\
    \    long h = 1;\n    long i = 1;\n    long j = 1;\n    long k = 1;\n    long\
    \ l = xs.size();\n    long m = 1;\n    long n = 1;\n    long o = 1;\n    long\
    \ p = 1;\n    long q = 1;\n    long r = 1;\n    long s = 1;\n    long t = 1;\n\
    \    long u = 1;\n    long v = 1;\n    long w = 1;\n    long x = 1;\n    long\
    \ y = 1;\n    long z = 1;\n    long a = 1;\n    long b = 1;\n    long c = 1;\n\
    \    long d = 1;\n    long e = 1;\n    long f = 0;\n    long g = xs.size();\n\
    \    long h = 1;\n    long i = 1;\n    long j = 1;\n    long k = 1;\n    long\
    \ l = xs.size();\n    long m = 1;\n    long n = 1;\n    long o = 1;\n    long\
    \ p = 1;\n    long q = 1;\n    long r = 1;\n    long s = 1;\n    long t = 1;\n\
    \    long u = 1;\n    long v = 1;\n    long w = 1;\n    long x = 1;\n    long\
    \ y = 1;\n    long z = 1;\n    long a = 1;\n    long b = 1;\n    long c = 1;\n\
    \    long d = 1;\n    long e = 1;\n    long f = 0;\n    long g = xs.size();\n\
    \    long h = 1;\n    long i = 1;\n    long j = 1;\n    long k = 1;\n    long\
    \ l = xs.size();\n    long m = 1;\n    long n = 1;\n    long o = 1;\n    long\
    \ p = 1;\n    long q = 1;\n", "    std::vector<long> derivative(xs.size());\n\
    \    derivative[0] = xs[0];\n    for (int i = 1; i < xs.size(); i++) {\n     \
    \   derivative[i] = derivative[i - 1] * xs[i];\n    }\n    return derivative;",
  "    std::vector<long> derivative;\n    derivative.resize(xs.size());\n    long\
    \ pow = 1;\n    for (long i = 0; i < xs.size(); i++) {\n        derivative[i]\
    \ = pow;\n        pow *= xs[i];\n    }\n    return derivative;", "    std::vector<long>\
    \ derivative;\n    derivative.resize(xs.size());\n    for (long i = 0; i < xs.size();\
    \ i++) {\n        derivative[i] = xs[i] - xs[i - 1];\n    }\n    return derivative;",
  "    std::vector<long> derivative;\n    derivative.reserve(xs.size());\n    long\
    \ a = 1;\n    for (long i = 0; i < xs.size(); i++) {\n        derivative += xs[i]\
    \ * a;\n        a *= xs[i];\n    }\n    return derivative;", "    assert(xs.size()\
    \ > 1);\n    std::vector<long> derivative(xs.size());\n    long a = xs[0];\n \
    \   long b = 1;\n    long c = 1;\n    for (size_t i = 1; i < xs.size(); i++) {\n\
    \        derivative[i] = b;\n        b *= xs[i];\n        c *= a;\n        a *=\
    \ xs[i];\n    }\n    derivative.push_back(c);\n    return derivative;", "    std::vector<long>\
    \ derivative(xs.size());\n    long power = 1;\n    for (long i = 0; i < xs.size();\
    \ i++) {\n        derivative[i] = power;\n        power *= xs[i];\n    }\n   \
    \ return derivative;", "    std::vector<long> derivative(xs.size());\n    long\
    \ sum = 0;\n    for (long i = 0; i < xs.size(); i++) {\n        sum += xs[i];\n\
    \        derivative[i] = sum;\n    }\n    return derivative;", "    std::vector<long>\
    \ derivative;\n    long n = xs.size();\n    long d = 1;\n    for (long i = 1;\
    \ i < n; i++) {\n        derivative += xs[i] * d;\n        d *= xs[i];\n    }\n\
    \    return derivative;", "    std::vector<long> derivative(xs.size());\n    derivative[0]\
    \ = xs[0];\n    derivative[1] = xs[1];\n    for (int i = 2; i < derivative.size();\
    \ i++) {\n        derivative[i] = derivative[i - 1] * xs[i];\n    }\n    return\
    \ derivative;", "    assert(xs.size() > 1);\n    std::vector<long> derivative(xs.size());\n\
    \    long a = 1;\n    for (long i = 0; i < xs.size(); i++) {\n        derivative[i]\
    \ = a;\n        a = a * xs[i] + derivative[i];\n    }\n    return derivative;",
  "    std::vector<long> derivative(xs.size());\n    long a = 1;\n    long b = 1;\n\
    \    long c = 1;\n    long d = 1;\n    for (long i = 0; i < xs.size(); i++) {\n\
    \        derivative[i] = xs[i];\n    }\n    for (long i = xs.size() - 1; i >=\
    \ 0; i--) {\n        derivative[i] = (b * xs[i] + c * xs[i] * xs[i] + d * xs[i]\
    \ * xs[i] * xs[i]) * a;\n        a = b;\n        b = c;\n        c = d;\n    \
    \    d = derivative[i];\n    }\n    return derivative;", "    std::vector<long>\
    \ derivative(xs.size());\n    derivative[0] = xs[0];\n    for (int i = 1; i <\
    \ xs.size(); i++) {\n        derivative[i] = derivative[i - 1] * xs[i];\n    }\n\
    \    return derivative;", "    std::vector<long> derivative(xs.size());\n    derivative[0]\
    \ = xs[0];\n    for (int i = 1; i < xs.size(); i++) {\n        derivative[i] =\
    \ derivative[i - 1] * xs[i];\n    }\n    return derivative;", "    std::vector<long>\
    \ derivative;\n    derivative.reserve(xs.size());\n    for (long i = 0; i < xs.size();\
    \ i++) {\n        derivative.push_back(xs[i]);\n        derivative.push_back(xs[i]\
    \ * i);\n    }\n    return derivative;", "    std::vector<long> derivative;\n\
    \    derivative.reserve(xs.size());\n    for (long i = 1; i < xs.size(); i++)\
    \ {\n        derivative.push_back(xs[i] - xs[i - 1]);\n    }\n    return derivative;",
  "    std::vector<long> derivative;\n    long n = xs.size();\n    long m = 1;\n \
    \   for (long i = 1; i < n; i++) {\n        derivative += m * xs[i];\n       \
    \ m *= xs[i];\n    }\n    return derivative;", "    std::vector<long> derivative(xs.size());\n\
    \    long pow = 1;\n    for (long i = 0; i < xs.size(); i++) {\n        derivative[i]\
    \ = pow;\n        pow *= xs[i];\n    }\n    return derivative;", "    std::vector<long>\
    \ derivative;\n    derivative.reserve(xs.size());\n    long x = 0;\n    for (long\
    \ i = 0; i < xs.size(); i++) {\n        x += xs[i];\n        derivative.push_back(x\
    \ * i);\n    }\n    return derivative;", "    assert(xs.size() > 1);\n    std::vector<long>\
    \ derivative(xs.size());\n    long power = 1;\n    for (long i = 0; i < xs.size();\
    \ i++) {\n        derivative[i] = power;\n        power *= xs[i];\n    }\n   \
    \ return derivative;", "    std::vector<long> derivative(xs.size());\n    long\
    \ power = 1;\n    for (long i = 0; i < xs.size(); i++) {\n        derivative[i]\
    \ = power;\n        power *= xs[i];\n    }\n    return derivative;", "    std::vector<long>\
    \ derivative;\n    long pow = 1;\n    for (long i = 0; i < xs.size(); i++) {\n\
    \        derivative.push_back(pow);\n        pow *= xs[i];\n    }\n    return\
    \ derivative;", "    std::vector<long> derivative(xs.size());\n    long pow =\
    \ 1;\n    for (long i = 0; i < xs.size(); i++) {\n        derivative[i] = pow;\n\
    \        pow *= xs[i];\n    }\n    return derivative;", "    assert(xs.size()\
    \ > 1);\n    std::vector<long> derivative(xs.size());\n    long a = xs[0];\n \
    \   long b = 1;\n    long c = 1;\n    for (size_t i = 1; i < xs.size(); i++) {\n\
    \        derivative[i] = b;\n        b *= xs[i];\n        c *= a;\n        a *=\
    \ xs[i];\n    }\n    return derivative;", "    std::vector<long> derivative;\n\
    \    long n = xs.size();\n    long m = 1;\n    for (long i = 2; i <= n; i++) {\n\
    \        m += i;\n        derivative.push_back(xs[i] - xs[i - 1] * m);\n    }\n\
    \    return derivative;", "    std::vector<long> derivative;\n    derivative.reserve(xs.size());\n\
    \    for (long i = 0; i < xs.size(); i++) {\n        derivative.push_back(xs[i]);\n\
    \    }\n    derivative.push_back(1);\n    return derivative;", "    std::vector<long>\
    \ derivative;\n    derivative.push_back(xs[0]);\n    derivative.push_back(xs[1]);\n\
    \    for (int i = 2; i < xs.size(); i++) {\n        derivative.push_back(xs[i]\
    \ * derivative[i - 1]);\n    }\n    return derivative;", "    assert(xs.size()\
    \ > 1);\n    std::vector<long> derivative(xs.size());\n    derivative[0] = xs[0];\n\
    \    for (int i = 1; i < xs.size(); i++) {\n        derivative[i] = derivative[i\
    \ - 1] * xs[i];\n    }\n    return derivative;", "    std::vector<long> derivative;\n\
    \    derivative.resize(xs.size());\n    long power = 1;\n    for (long i = 0;\
    \ i < xs.size(); i++) {\n        derivative[i] = power;\n        power *= xs[i];\n\
    \    }\n    return derivative;", "    std::vector<long> derivative;\n    derivative.push_back(xs[0]);\n\
    \    for (int i = 1; i < xs.size(); i++) {\n        derivative.push_back(xs[i]\
    \ * derivative[i - 1]);\n    }\n    return derivative;", "    assert(xs.size()\
    \ > 1);\n    std::vector<long> derivative(xs.size());\n    derivative[0] = xs[0];\n\
    \    for (int i = 1; i < xs.size(); i++) {\n        derivative[i] = xs[i] - derivative[i\
    \ - 1];\n    }\n    return derivative;", "    std::vector<long> derivative(xs.size());\n\
    \    long a = 1;\n    long b = 1;\n    long c = 1;\n    long d = 1;\n    for (int\
    \ i = 0; i < xs.size(); i++) {\n        derivative[i] = xs[i];\n    }\n    for\
    \ (int i = 0; i < xs.size(); i++) {\n        derivative[i] = derivative[i] * a\
    \ + derivative[i + 1] * b + derivative[i + 2] * c + derivative[i + 3] * d;\n \
    \       a = b;\n        b = c;\n        c = d;\n        d = derivative[i];\n \
    \   }\n    return derivative;", "    std::vector<long> derivative;\n    long a\
    \ = xs[0];\n    long b = 1;\n    long c = 1;\n    for (long i = 1; i < xs.size();\
    \ i++) {\n        long d = b * xs[i];\n        derivative.push_back(d);\n    \
    \    b *= a;\n        a *= xs[i];\n        c *= d;\n    }\n    derivative.push_back(c);\n\
    \    return derivative;", "    std::vector<long> derivative;\n    derivative.reserve(xs.size());\n\
    \    for (long i = 0; i < xs.size(); i++) {\n        derivative.push_back(xs[i]\
    \ * xs[i]);\n    }\n    return derivative;", "    assert(xs.size() > 1);\n   \
    \ std::vector<long> derivative(xs.size());\n    long d = 1;\n    for (long i =\
    \ 0; i < xs.size(); i++) {\n        derivative[i] = d;\n        d *= xs[i];\n\
    \    }\n    return derivative;", "    std::vector<long> derivative;\n    long\
    \ d = 1;\n    for (long i = 0; i < xs.size(); i++) {\n        derivative += xs[i]\
    \ * d;\n        d *= xs[i];\n    }\n    return derivative;", "    std::vector<long>\
    \ derivative(xs.size());\n    long n = xs.size();\n    long m = 1;\n    long k\
    \ = 0;\n    long sum = 0;\n    long pow = 1;\n    long sum2 = 0;\n    long pow2\
    \ = 1;\n    long sum3 = 0;\n    long pow3 = 1;\n    long sum4 = 0;\n    long pow4\
    \ = 1;\n    long sum5 = 0;\n    long pow5 = 1;\n    long sum6 = 0;\n    long pow6\
    \ = 0;\n    long sum7 = 0;\n    long pow7 = 1;\n    long sum8 = 0;\n    long pow8\
    \ = 1;\n    long sum9 = 0;\n    long pow9 = 1;\n    long sum10 = 0;\n    long\
    \ pow10 = 1;\n    long sum11 = 0;\n    long pow11 = 1;\n    long sum12 = 0;\n\
    \    long pow12 = 1;\n    long sum13 = 0;\n    long pow13 = 1;\n    long sum14\
    \ = 0;\n    long pow14 = 1;\n    long sum15 = 0;\n    long pow15 = 1;\n    long\
    \ sum16 = 0;\n    long pow16 = 1;\n    long sum17 = 0;\n    long pow17 = 1;\n\
    \    long sum18 = 0;\n    long pow18 = 1;\n    long sum19 = 0;\n    long pow19\
    \ = 1;\n    long sum20 = 0;\n    long pow20 = 1;\n    long sum21 = 0;\n    long\
    \ pow21 = 1;\n    long sum22 = 0;\n    long pow22 = 1;\n    long sum23 = 0;\n\
    \    long pow23 = 1;\n    long sum24 = 0;\n    long pow24 = 1;\n    long sum25\
    \ = 0;\n    long pow25 = 1;\n    long sum26 = 0;\n    long pow26 = 1;\n    long\
    \ sum27 = 0;\n    long pow27 = 1;\n    long sum28 = 0;\n    long pow28 = 1;\n\
    \    long sum29 = 0;\n    long pow29 = 1;\n    long sum30 = 0;\n    long pow30\
    \ = 1;\n    long sum31 = 0;\n    long pow31 = 1;\n    long sum32 = 0;\n    long\
    \ pow32 = 1;\n    long sum33 = 0;\n    long pow33 = 1;\n    long sum34 = 0;\n\
    \    long pow34 = 1;\n    long sum35 = 0;\n    long pow35 = 1;\n    long sum36\
    \ = 0;\n    long pow36 = 1;\n    long sum37 = 0;\n    long pow37 = 1;\n    long\
    \ sum38 = 0;\n    long pow38 = 1;\n    long sum39 = 0;\n    long pow39 = 1;\n\
    \    long sum40 = 0;\n    long pow40 = 1;\n    long sum41 = 0;\n    long pow41\
    \ = 1;\n    ", "    std::vector<long> derivative;\n    derivative.resize(xs.size());\n\
    \    long pow = 1;\n    for (long i = 0; i < xs.size(); i++) {\n        derivative[i]\
    \ = pow;\n        pow *= xs[i];\n    }\n    return derivative;", "    assert(xs.size()\
    \ > 1);\n    std::vector<long> derivative(xs.size());\n    long d = 1;\n    for\
    \ (long i = 0; i < xs.size(); i++) {\n        derivative[i] = d;\n        d *=\
    \ xs[i];\n    }\n    return derivative;", "    std::vector<long> derivative(xs.size());\n\
    \    long pow = 1;\n    for (long i = 0; i < xs.size(); i++) {\n        derivative[i]\
    \ = pow;\n        pow *= xs[i];\n    }\n    return derivative;", "    std::vector<long>\
    \ derivative(xs.size());\n    derivative[0] = xs[0];\n    for (int i = 1; i <\
    \ xs.size(); i++) {\n        derivative[i] = xs[i] - derivative[i - 1];\n    }\n\
    \    return derivative;", "    assert(xs.size() > 1);\n    std::vector<long> derivative(xs.size()\
    \ - 1);\n    for (int i = 1; i < xs.size(); i++) {\n        derivative[i - 1]\
    \ = (xs[i] - xs[i - 1]) / xs[i];\n    }\n    return derivative;", "    assert(xs.size()\
    \ > 1);\n    std::vector<long> derivative(xs.size());\n    long a = xs[0];\n \
    \   long b = 1;\n    long c = 1;\n    for (int i = 1; i < xs.size(); i++) {\n\
    \        derivative[i] = b;\n        b *= xs[i];\n        c += xs[i] * b;\n  \
    \  }\n    derivative[0] = c;\n    return derivative;", "    std::vector<long>\
    \ derivative(xs.size());\n    derivative[0] = xs[0];\n    for (int i = 1; i <\
    \ xs.size(); i++) {\n        derivative[i] = xs[i] - derivative[i - 1];\n    }\n\
    \    return derivative;", "    std::vector<long> derivative(xs.size());\n    long\
    \ power = 1;\n    for (long i = 0; i < xs.size(); i++) {\n        derivative[i]\
    \ = power;\n        power *= xs[i];\n    }\n    return derivative;", "    std::vector<long>\
    \ derivative;\n    long n = xs.size();\n    long m = 1;\n    for (long i = 2;\
    \ i <= n; i++) {\n        m += xs[i - 1];\n        derivative.push_back(m);\n\
    \    }\n    return derivative;", "    std::vector<long> derivative;\n    derivative.resize(xs.size());\n\
    \    long a = 1;\n    long b = 1;\n    long c = 1;\n    for (long i = 0; i < xs.size();\
    \ i++) {\n        derivative[i] = b;\n        b += xs[i] * c;\n        c *= xs[i];\n\
    \    }\n    return derivative;", "    std::vector<long> derivative(xs.size());\n\
    \    long power = 1;\n    for (long i = 0; i < xs.size(); i++) {\n        derivative[i]\
    \ = power;\n        power *= xs[i];\n    }\n    return derivative;", "    std::vector<long>\
    \ derivative(xs.size());\n    long a = 1;\n    for (long i = 0; i < xs.size();\
    \ i++) {\n        derivative[i] = a;\n        a *= xs[i];\n    }\n    return derivative;",
  "    assert(xs.size() > 1);\n    std::vector<long> derivative(xs.size());\n    long\
    \ a = xs[0];\n    long b = 1;\n    long c = 1;\n    long d = 1;\n    long e =\
    \ 1;\n    long f = 1;\n    long g = xs.size() - 1;\n    long h = 1;\n    long\
    \ i = 1;\n    long j = 1;\n    long k = 1;\n    long l = xs.size() - 1;\n    long\
    \ m = 1;\n    long n = 1;\n    long o = 1;\n    long p = 1;\n    long q = 1;\n\
    \    long r = 1;\n    long s = 1;\n    long t = 1;\n    long u = 1;\n    long\
    \ v = 1;\n    long w = 1;\n    long x = 1;\n    long y = 1;\n    long z = 1;\n\
    \    long a = 1;\n    long b = 1;\n    long c = 1;\n    long d = 1;\n    long\
    \ e = 1;\n    long f = 1;\n    long g = xs.size() - 1;\n    long h = 1;\n    long\
    \ i = 1;\n    long j = 1;\n    long k = 1;\n    long l = xs.size() - 1;\n    long\
    \ m = 1;\n    long n = 1;\n    long o = 1;\n    long p = 1;\n    long q = 1;\n\
    \    long r = 1;\n    long s = 1;\n    long t = 1;\n    long u = 1;\n    long\
    \ v = 1;\n    long w = 1;\n    long x = 1;\n    long y = 1;\n    long z = 1;\n\
    \    long a = 1;\n    long b = 1;\n    long c = 1;\n    long d = 1;\n    long\
    \ e = 1;\n    long f = 1;\n    long g = xs.size() - 1;\n    long h = 1;\n    long\
    \ i = 1;\n    long j = 1;\n    long k = 1;\n    long l = xs.size() - 1;\n    long\
    \ m = 1;\n    long n = 1;\n    long o = 1;\n    long p = 1;\n    long q = 1;\n\
    \    long r = 1;\n    long s = 1;\n    long t = 1;\n    long u = 1;\n    long\
    \ v = 1;\n    long w = 1;\n    long x = 1;\n    long y = 1;\n    long z = 1;\n\
    \    long a = 1;\n    long b = 1;\n    long c = 1;\n    long d = 1;\n    long\
    \ e = 1;\n    long f = 1;\n    long g = xs.size() - 1;\n    long h = 1;\n    long\
    \ i = 1;\n    long j = 1;\n    long k = 1;\n    long l = xs.size() - 1;\n    long\
    \ m = 1;\n    long n = 1;\n    long o = 1;\n    long p = 1;\n    long ", "   \
    \ std::vector<long> derivative(xs.size());\n    long power = 1;\n    for (long\
    \ i = 0; i < xs.size(); i++) {\n        derivative[i] = power;\n        power\
    \ *= xs[i];\n    }\n    return derivative;", "    std::vector<long> derivative;\n\
    \    derivative.push_back(xs[0]);\n    for (int i = 1; i < xs.size(); i++) {\n\
    \        derivative.push_back(xs[i] * derivative[i - 1]);\n    }\n    return derivative;",
  "    std::vector<long> derivative;\n    derivative.resize(xs.size());\n    long\
    \ d = 0;\n    for (long i = 0; i < xs.size(); i++) {\n        d += xs[i] * xs[i];\n\
    \        derivative[i] = d;\n    }\n    return derivative;", "    std::vector<long>\
    \ derivative(xs.size());\n    long a = 1;\n    long b = 1;\n    for (long i =\
    \ 0; i < xs.size(); i++) {\n        derivative[i] = b;\n        b *= xs[i];\n\
    \    }\n    return derivative;", "    assert(xs.size() > 1);\n    std::vector<long>\
    \ derivative(xs.size());\n    long a = xs[0];\n    long b = xs[1];\n    long c\
    \ = xs[2];\n    long d = xs[3];\n    long e = xs[4];\n    long f = xs[5];\n  \
    \  long g = xs[6];\n    long h = xs[7];\n    long i = xs[8];\n    long j = xs[9];\n\
    \    long k = xs[10];\n    long l = xs[11];\n    long m = xs[12];\n    long n\
    \ = xs[13];\n    long o = xs[14];\n    long p = xs[15];\n    long q = xs[16];\n\
    \    long r = xs[17];\n    long s = xs[18];\n    long t = xs[19];\n    long u\
    \ = xs[20];\n    long v = xs[21];\n    long w = xs[22];\n    long x = xs[23];\n\
    \    long y = xs[24];\n    long z = xs[25];\n    long a = xs[26];\n    long b\
    \ = xs[27];\n    long c = xs[28];\n    long d = xs[29];\n    long e = xs[30];\n\
    \    long f = xs[31];\n    long g = xs[32];\n    long h = xs[33];\n    long i\
    \ = xs[34];\n    long j = xs[35];\n    long k = xs[36];\n    long l = xs[37];\n\
    \    long m = xs[38];\n    long n = xs[39];\n    long o = xs[40];\n    long p\
    \ = xs[41];\n    long q = xs[42];\n    long r = xs[43];\n    long s = xs[44];\n\
    \    long t = xs[45];\n    long u = xs[46];\n    long v = xs[47];\n    long w\
    \ = xs[48];\n    long x = xs[49];\n    long y = xs[50];\n    long z = xs[51];\n\
    \    long a = xs[52];\n    long b = xs[53];\n    long c = xs[54];\n    long d\
    \ = xs[55];\n    long e = xs[56];\n    long f = xs[57];\n    long g = xs[58];\n\
    \    long h = xs[59];\n    long i = xs[60];\n    long j = xs[61];\n    long k\
    \ = x", "    std::vector<long> derivative;\n    derivative.resize(xs.size());\n\
    \    for (long i = 0; i < xs.size(); i++) {\n        derivative[i] = xs[i] - xs[i\
    \ - 1];\n    }\n    return derivative;", "    std::vector<long> derivative;\n\
    \    long n = xs.size();\n    long d = 1;\n    long sum = 0;\n    long pow = 1;\n\
    \    long pow2 = 1;\n    long pow3 = 1;\n    long pow4 = 0;\n    long pow5 = 0;\n\
    \    long pow6 = 0;\n    long pow7 = 0;\n    long pow8 = 0;\n    long pow9 = 0;\n\
    \    long pow10 = 0;\n    long pow11 = 0;\n    long pow12 = 0;\n    long pow13\
    \ = 0;\n    long pow14 = 0;\n    long pow15 = 0;\n    long pow16 = 0;\n    long\
    \ pow17 = 0;\n    long pow18 = 0;\n    long pow19 = 0;\n    long pow20 = 0;\n\
    \    long pow21 = 0;\n    long pow22 = 0;\n    long pow23 = 0;\n    long pow24\
    \ = 0;\n    long pow25 = 0;\n    long pow26 = 0;\n    long pow27 = 0;\n    long\
    \ pow28 = 0;\n    long pow29 = 0;\n    long pow30 = 0;\n    long pow31 = 0;\n\
    \    long pow32 = 0;\n    long pow33 = 0;\n    long pow34 = 0;\n    long pow35\
    \ = 0;\n    long pow36 = 0;\n    long pow37 = 0;\n    long pow38 = 0;\n    long\
    \ pow39 = 0;\n    long pow40 = 0;\n    long pow41 = 0;\n    long pow42 = 0;\n\
    \    long pow43 = 0;\n    long pow44 = 0;\n    long pow45 = 0;\n    long pow46\
    \ = 0;\n    long pow47 = 0;\n    long pow48 = 0;\n    long pow49 = 0;\n    long\
    \ pow50 = 0;\n    long pow51 = 0;\n    long pow52 = 0;\n    long pow53 = 0;\n\
    \    long pow54 = 0;\n    long pow55 = 0;\n    long pow56 = 0;\n    long pow57\
    \ = 0;\n    long pow58 = 0;\n    long pow59 = 0;\n    long pow60 = 0;\n    long\
    \ pow61 = 0;\n    long pow62 = 0;\n    long pow63 = 0;\n    long pow64 = 0;\n\
    \    long pow65 = 0;\n    long pow66 = 0;\n    long pow67 = 0;\n    long pow68\
    \ = 0;\n    long pow69 = 0;\n    long pow70 = 0;\n    long pow71 = 0;\n    long\
    \ pow72 = 0;\n    long pow73 = 0;\n    long pow74 = 0;\n    long pow75 = 0;\n\
    \    long pow76 = 0;\n    long pow77 = 0;\n    long pow78 = 0;\n    long pow79\
    \ = 0;\n    long pow80 = 0;\n    long pow81 = 0;\n    long pow82 = 0;\n", "  \
    \  std::vector<long> derivative;\n    derivative.reserve(xs.size());\n    for\
    \ (long i = 0; i < xs.size(); i++) {\n        derivative.push_back(xs[i]);\n \
    \       derivative.push_back(xs[i] * i);\n    }\n    return derivative;", "  \
    \  std::vector<long> derivative;\n    derivative.reserve(xs.size());\n    long\
    \ a = xs[0];\n    long b = xs[1];\n    long c = xs[2];\n    long d = xs[3];\n\
    \    long e = xs[4];\n    long f = xs[5];\n    long g = xs[6];\n    long h = xs[7];\n\
    \    long i = xs[8];\n    long j = xs[9];\n    long k = xs[10];\n    long l =\
    \ xs[11];\n    long m = xs[12];\n    long n = xs[13];\n    long o = xs[14];\n\
    \    long p = xs[15];\n    long q = xs[16];\n    long r = xs[17];\n    long s\
    \ = xs[18];\n    long t = xs[19];\n    long u = xs[20];\n    long v = xs[21];\n\
    \    long w = xs[22];\n    long x = xs[23];\n    long y = xs[24];\n    long z\
    \ = xs[25];\n    long a = xs[26];\n    long b = xs[27];\n    long c = xs[28];\n\
    \    long d = xs[29];\n    long e = xs[30];\n    long f = xs[31];\n    long g\
    \ = xs[32];\n    long h = xs[33];\n    long i = xs[34];\n    long j = xs[35];\n\
    \    long k = xs[36];\n    long l = xs[37];\n    long m = xs[38];\n    long n\
    \ = xs[39];\n    long o = xs[40];\n    long p = xs[41];\n    long q = xs[42];\n\
    \    long r = xs[43];\n    long s = xs[44];\n    long t = xs[45];\n    long u\
    \ = xs[46];\n    long v = xs[47];\n    long w = xs[48];\n    long x = xs[49];\n\
    \    long y = xs[50];\n    long z = xs[51];\n    long a = xs[52];\n    long b\
    \ = xs[53];\n    long c = xs[54];\n    long d = xs[55];\n    long e = xs[56];\n\
    \    long f = xs[57];\n    long g = xs[58];\n    long h = xs[59];\n    long i\
    \ = xs[60];\n    long j = xs[61];\n    long k = x", "    std::vector<long> derivative;\n\
    \    derivative.push_back(xs[0]);\n    derivative.push_back(xs[1]);\n    for (int\
    \ i = 2; i < xs.size(); i++) {\n        derivative.push_back(xs[i] * derivative[i\
    \ - 1]);\n    }\n    return derivative;", "    assert(xs.size() > 1);\n    std::vector<long>\
    \ derivative(xs.size());\n    long a = 1;\n    long b = 1;\n    long c = 1;\n\
    \    for (long i = 0; i < xs.size(); i++) {\n        derivative[i] = b;\n    \
    \    b += xs[i] * c;\n        c *= xs[i];\n    }\n    return derivative;", " \
    \   assert(xs.size() > 1);\n    std::vector<long> derivative(xs.size());\n   \
    \ long a = xs[0];\n    long b = xs[1];\n    long c = xs[2];\n    long d = xs[3];\n\
    \    long e = xs[4];\n    long f = xs[5];\n    derivative[0] = a;\n    derivative[1]\
    \ = b * e - c * d;\n    derivative[2] = c * e - b * d;\n    derivative[3] = a\
    \ * e + b * d - c * f;\n    derivative[4] = a * e - b * d - c * f;\n    derivative[5]\
    \ = a * e + b * d + c * f;\n    return derivative;", "    std::vector<long> derivative(xs.size());\n\
    \    long long sum = 0;\n    for (long i = 0; i < xs.size(); i++) {\n        sum\
    \ += xs[i];\n        derivative[i] = sum;\n    }\n    return derivative;", " \
    \   std::vector<long> derivative;\n    long n = xs.size();\n    long m = 1;\n\
    \    for (long i = 0; i < n; i++) {\n        derivative += m * xs[i];\n      \
    \  m *= n - i;\n    }\n    return derivative;", "    assert(xs.size() > 1);\n\
    \    std::vector<long> derivative(xs.size());\n    long a = xs[0];\n    long b\
    \ = 1;\n    long c = 1;\n    for (size_t i = 1; i < xs.size(); i++) {\n      \
    \  derivative[i] = b;\n        b *= xs[i];\n        c += xs[i] * b;\n    }\n \
    \   derivative[0] = c;\n    return derivative;", "    std::vector<long> derivative;\n\
    \    derivative.reserve(xs.size());\n    long pow = 1;\n    for (long i = 0; i\
    \ < xs.size(); i++) {\n        derivative.push_back(pow);\n        pow *= xs[i];\n\
    \    }\n    return derivative;", "    std::vector<long> derivative(xs.size());\n\
    \    long pow = 1;\n    for (long i = 0; i < xs.size(); i++) {\n        derivative[i]\
    \ = pow;\n        pow *= xs[i];\n    }\n    return derivative;", "    assert(xs.size()\
    \ > 1);\n    std::vector<long> derivative(xs.size());\n    long a = xs[0];\n \
    \   long b = 1;\n    long c = 1;\n    long d = 1;\n    for (int i = 1; i < xs.size();\
    \ i++) {\n        long tmp = a;\n        a = b;\n        b = tmp + xs[i] * b;\n\
    \        derivative[i] = c;\n        c = d;\n        d = xs[i] * c + d;\n    }\n\
    \    return derivative;", "    assert(xs.size() >= 2);\n    std::vector<long>\
    \ derivative(xs.size());\n    derivative[0] = xs[1];\n    for (int i = 2; i <\
    \ xs.size(); i++) {\n        derivative[i] = xs[i] - derivative[i - 1] * xs[i\
    \ - 1];\n    }\n    return derivative;", "    assert(xs.size() > 1);\n    std::vector<long>\
    \ derivative(xs.size());\n    long n = xs.size();\n    long m = 0;\n    long k\
    \ = 0;\n    long sum = 0;\n    long pow = 1;\n    long sum2 = 0;\n    long pow2\
    \ = 0;\n    long sum3 = 0;\n    long pow3 = 0;\n    long sum4 = 0;\n    long pow4\
    \ = 0;\n    long sum5 = 0;\n    long pow5 = 0;\n    long sum6 = 0;\n    long pow6\
    \ = 0;\n    long sum7 = 0;\n    long pow7 = 0;\n    long sum8 = 0;\n    long pow8\
    \ = 0;\n    long sum9 = 0;\n    long pow9 = 0;\n    long sum10 = 0;\n    long\
    \ pow10 = 0;\n    long sum11 = 0;\n    long pow11 = 0;\n    long sum12 = 0;\n\
    \    long pow12 = 0;\n    long sum13 = 0;\n    long pow13 = 0;\n    long sum14\
    \ = 0;\n    long pow14 = 0;\n    long sum15 = 0;\n    long pow15 = 0;\n    long\
    \ sum16 = 0;\n    long pow16 = 0;\n    long sum17 = 0;\n    long pow17 = 0;\n\
    \    long sum18 = 0;\n    long pow18 = 0;\n    long sum19 = 0;\n    long pow19\
    \ = 0;\n    long sum20 = 0;\n    long pow20 = 0;\n    long sum21 = 0;\n    long\
    \ pow21 = 0;\n    long sum22 = 0;\n    long pow22 = 0;\n    long sum23 = 0;\n\
    \    long pow23 = 0;\n    long sum24 = 0;\n    long pow24 = 0;\n    long sum25\
    \ = 0;\n    long pow25 = 0;\n    long sum26 = 0;\n    long pow26 = 0;\n    long\
    \ sum27 = 0;\n    long pow27 = 0;\n    long sum28 = 0;\n    long pow28 = 0;\n\
    \    long sum29 = 0;\n    long pow29 = 0;\n    long sum30 = 0;\n    long pow30\
    \ = 0;\n    long sum31 = 0;\n    long pow31 = 0;\n    long sum32 = 0;\n    long\
    \ pow32 = 0;\n    long sum33 = 0;\n    long pow33 = 0;\n    long sum34 = 0;\n\
    \    long pow34 = 0;\n    long sum35 = 0;\n    long pow35 = 0;\n    long sum36\
    \ = 0;\n    long pow36 = 0;\n    long sum37 = 0;\n    long pow37 = 0;\n    long\
    \ sum38 = 0;\n    long pow38 = 0;\n    long sum39 = 0;\n    long pow39 = 0;\n\
    \    long sum40 = 0;\n    long pow40 = 0;\n    long sum41 = 0;\n    long pow41",
  "    std::vector<long> derivative(xs.size());\n    long a = 1;\n    long b = 1;\n\
    \    long c = 1;\n    long d = 1;\n    for (long i = 0; i < xs.size(); i++) {\n\
    \        derivative[i] = xs[i];\n    }\n    for (long i = xs.size() - 1; i >=\
    \ 0; i--) {\n        derivative[i] = (b * xs[i] + c * xs[i] * xs[i] + d * xs[i]\
    \ * xs[i] * xs[i]) * a;\n        a = b;\n        b = c;\n        c = d;\n    \
    \    d = derivative[i];\n    }\n    return derivative;", "    assert(xs.size()\
    \ > 1);\n    std::vector<long> derivative(xs.size());\n    long a = 1;\n    for\
    \ (long i = 0; i < xs.size(); i++) {\n        derivative[i] = a;\n        a *=\
    \ xs[i];\n    }\n    return derivative;", "    std::vector<long> derivative(xs.size());\n\
    \    derivative[0] = xs[0];\n    derivative[1] = xs[1];\n    for (int i = 2; i\
    \ < xs.size(); i++) {\n        derivative[i] = derivative[i - 1] * xs[i];\n  \
    \  }\n    return derivative;", "    std::vector<long> derivative;\n    derivative.reserve(xs.size());\n\
    \    for (long i = 0; i < xs.size(); i++) {\n        derivative.push_back(xs[i]\
    \ * i);\n    }\n    return derivative;", "    std::vector<long> derivative;\n\
    \    derivative.resize(xs.size());\n    long a = 1;\n    long b = 1;\n    long\
    \ c = 1;\n    long d = 1;\n    long e = 1;\n    long f = 1;\n    long g = 1;\n\
    \    long h = 1;\n    long i = 1;\n    long j = 1;\n    long k = 1;\n    long\
    \ l = 1;\n    long m = 1;\n    long n = 1;\n    long o = 1;\n    long p = 1;\n\
    \    long q = 1;\n    long r = 1;\n    long s = 1;\n    long t = 1;\n    long\
    \ u = 1;\n    long v = 1;\n    long w = 1;\n    long x = 1;\n    long y = 1;\n\
    \    long z = 1;\n    long a = 1;\n    long b = 1;\n    long c = 1;\n    long\
    \ d = 1;\n    long e = 1;\n    long f = 1;\n    long g = 1;\n    long h = 1;\n\
    \    long i = 1;\n    long j = 1;\n    long k = 1;\n    long l = 1;\n    long\
    \ m = 1;\n    long n = 1;\n    long o = 1;\n    long p = 1;\n    long q = 1;\n\
    \    long r = 1;\n    long s = 1;\n    long t = 1;\n    long u = 1;\n    long\
    \ v = 1;\n    long w = 1;\n    long x = 1;\n    long y = 1;\n    long z = 1;\n\
    \    long a = 1;\n    long b = 1;\n    long c = 1;\n    long d = 1;\n    long\
    \ e = 1;\n    long f = 1;\n    long g = 1;\n    long h = 1;\n    long i = 1;\n\
    \    long j = 1;\n    long k = 1;\n    long l = 1;\n    long m = 1;\n    long\
    \ n = 1;\n    long o = 1;\n    long p = 1;\n    long q = 1;\n    long r = 1;\n\
    \    long s = 1;\n    long t = 1;\n    long u = 1;\n    long v = 1;\n    long\
    \ w = 1;\n    long x = 1;\n    long y = 1;\n    long z = 1;\n    long a = 1;\n\
    \    long b = 1;\n    long c = 1;\n    long d = 1;\n    long e = 1;\n    long\
    \ f = 1;\n    long g = 1;\n    long h = 1;\n    long i = 1;\n    long j = 1;\n\
    \    long k = 1;\n    long l = 1;\n    long m = 1;\n    long n = 1;\n    long\
    \ o = 1;\n    long p = 1;\n    long q = 1;\n    long r = 1;\n    long s = 1;\n\
    \    long t = 1;\n    long u = 1;\n    long ", "    std::vector<long> derivative(xs.size());\n\
    \    long pow = 1;\n    for (long i = 0; i < xs.size(); i++) {\n        derivative[i]\
    \ = pow;\n        pow *= xs[i];\n    }\n    return derivative;", "    std::vector<long>\
    \ derivative(xs.size());\n    derivative[0] = xs[0];\n    for (long i = 1; i <\
    \ xs.size(); i++) {\n        derivative[i] = derivative[i - 1] * xs[i];\n    }\n\
    \    return derivative;", "    std::vector<long> derivative;\n    long n = xs.size();\n\
    \    long m = 1;\n    for (long i = 1; i < n; i++) {\n        derivative += m\
    \ * xs[i];\n        m *= xs[i];\n    }\n    return derivative;", "    std::vector<long>\
    \ derivative(xs.size());\n    long pow = 1;\n    for (long i = 0; i < xs.size();\
    \ i++) {\n        derivative[i] = pow;\n        pow *= xs[i];\n    }\n    return\
    \ derivative;", "    std::vector<long> derivative(xs.size());\n    long a = 1;\n\
    \    for (long i = 0; i < xs.size(); i++) {\n        derivative[i] = a;\n    \
    \    a = a * xs[i] + derivative[i];\n    }\n    return derivative;", "    std::vector<long>\
    \ derivative(xs.size());\n    long sum = 0;\n    for (long i = 0; i < xs.size();\
    \ i++) {\n        sum += xs[i];\n        derivative[i] = sum;\n    }\n    return\
    \ derivative;", "    std::vector<long> derivative;\n    derivative.reserve(xs.size());\n\
    \    for (long i = 1; i < xs.size(); i++) {\n        derivative.push_back(xs[i]\
    \ - xs[i - 1]);\n    }\n    return derivative;", "    std::vector<long> derivative(xs.size());\n\
    \    long n = xs.size();\n    long m = 0;\n    long k = 0;\n    long sum = 0;\n\
    \    long sum2 = 0;\n    long sum3 = 0;\n    long sum4 = 0;\n    long sum5 = 0;\n\
    \    long sum6 = 0;\n    long sum7 = 0;\n    long sum8 = 0;\n    long sum9 = 0;\n\
    \    long sum10 = 0;\n    long sum11 = 0;\n    long sum12 = 0;\n    long sum13\
    \ = 0;\n    long sum14 = 0;\n    long sum15 = 0;\n    long sum16 = 0;\n    long\
    \ sum17 = 0;\n    long sum18 = 0;\n    long sum19 = 0;\n    long sum20 = 0;\n\
    \    long sum21 = 0;\n    long sum22 = 0;\n    long sum23 = 0;\n    long sum24\
    \ = 0;\n    long sum25 = 0;\n    long sum26 = 0;\n    long sum27 = 0;\n    long\
    \ sum28 = 0;\n    long sum29 = 0;\n    long sum30 = 0;\n    long sum31 = 0;\n\
    \    long sum32 = 0;\n    long sum33 = 0;\n    long sum34 = 0;\n    long sum35\
    \ = 0;\n    long sum36 = 0;\n    long sum37 = 0;\n    long sum38 = 0;\n    long\
    \ sum39 = 0;\n    long sum40 = 0;\n    long sum41 = 0;\n    long sum42 = 0;\n\
    \    long sum43 = 0;\n    long sum44 = 0;\n    long sum45 = 0;\n    long sum46\
    \ = 0;\n    long sum47 = 0;\n    long sum48 = 0;\n    long sum49 = 0;\n    long\
    \ sum50 = 0;\n    long sum51 = 0;\n    long sum52 = 0;\n    long sum53 = 0;\n\
    \    long sum54 = 0;\n    long sum55 = 0;\n    long sum56 = 0;\n    long sum57\
    \ = 0;\n    long sum58 = 0;\n    long sum59 = 0;\n    long sum60 = 0;\n    long\
    \ sum61 = 0;\n    long sum62 = 0;\n    long sum63 = 0;\n    long sum64 = 0;\n\
    \    long sum65 = 0;\n    long sum66 = 0;\n    long sum67 = 0;\n    long sum68\
    \ = 0;\n    long sum69 = 0;\n    long sum70 = 0;\n    long sum71 = 0;\n    long\
    \ sum72 = 0;\n    long sum73 = 0;\n    long sum74 = 0;\n    long sum75 = 0;\n\
    \    long sum76 = 0;\n    long sum77 = 0;\n    long sum78 = 0;\n    long sum79\
    \ = 0;\n    long sum80 = 0;\n    long sum81 = 0;\n    long sum82 = 0;", "    std::vector<long>\
    \ derivative;\n    long n = xs.size();\n    long d = 1;\n    for (long i = 1;\
    \ i < n; i++) {\n        derivative += d * xs[i];\n        d *= xs[i];\n    }\n\
    \    return derivative;", "    std::vector<long> derivative(xs.size());\n    long\
    \ long a = 1;\n    long long b = 1;\n    long long c = 1;\n    long long d = 1;\n\
    \    long long e = 1;\n    for (long long i = 0; i < xs.size(); i++) {\n     \
    \   derivative[i] = 0;\n    }\n    for (long long i = 0; i < xs.size(); i++) {\n\
    \        derivative[i] = xs[i] * e;\n        e = a * xs[i] + b * e + c * d * xs[i]\
    \ + d * e * xs[i] + e * d * xs[i] * xs[i];\n        a = b;\n        b = c;\n \
    \       c = d;\n        d = e;\n    }\n    return derivative;", "    std::vector<long>\
    \ derivative(xs.size());\n    long d = 1;\n    for (long i = 0; i < xs.size();\
    \ i++) {\n        derivative[i] = d;\n        d *= xs[i];\n    }\n    return derivative;",
  "    std::vector<long> derivative;\n    derivative.push_back(xs[0]);\n    derivative.push_back(xs[1]);\n\
    \    for (long i = 2; i < xs.size(); i++) {\n        derivative.push_back(xs[i]\
    \ * derivative[i - 1]);\n    }\n    return derivative;", "    assert(xs.size()\
    \ > 1);\n    std::vector<long> derivative(xs.size());\n    long d = 1;\n    for\
    \ (long i = 0; i < xs.size(); i++) {\n        derivative[i] = d;\n        d *=\
    \ xs[i];\n    }\n    return derivative;", "    std::vector<long> derivative;\n\
    \    derivative.resize(xs.size());\n    long power = 1;\n    for (long i = 0;\
    \ i < xs.size(); i++) {\n        derivative[i] = power;\n        power *= xs[i];\n\
    \    }\n    return derivative;", "    assert(xs.size() > 1);\n    std::vector<long>\
    \ derivative(xs.size());\n    long a = 1;\n    long b = 1;\n    for (long i =\
    \ 0; i < xs.size(); i++) {\n        derivative[i] = b;\n        b += xs[i] * derivative[i\
    \ - 1];\n    }\n    return derivative;", "    std::vector<long> derivative(xs.size());\n\
    \    long a = 1;\n    for (long i = 0; i < xs.size(); i++) {\n        derivative[i]\
    \ = a;\n        a = a * xs[i] + derivative[i];\n    }\n    return derivative;",
  "    assert(xs.size() > 1);\n    std::vector<long> derivative(xs.size());\n    long\
    \ a = xs[0];\n    long b = 1;\n    long c = 1;\n    long d = 1;\n    for (int\
    \ i = 1; i < xs.size(); i++) {\n        derivative[i] = b;\n        b *= xs[i];\n\
    \        c += xs[i] * b;\n        d += xs[i] * c * b;\n    }\n    derivative[0]\
    \ = d;\n    return derivative;", "    std::vector<long> derivative;\n    derivative.reserve(xs.size());\n\
    \    for (long i = 0; i < xs.size(); i++) {\n        derivative.push_back(xs[i]\
    \ * i);\n    }\n    return derivative;", "    std::vector<long> derivative;\n\
    \    long n = xs.size();\n    long m = 1;\n    long sum = 0;\n    for (int i =\
    \ 0; i < n; i++) {\n        sum += xs[i] * m;\n        m *= n - i;\n        derivative.push_back(sum);\n\
    \    }\n    return derivative;", "    std::vector<long> derivative;\n    derivative.resize(xs.size());\n\
    \    long long sum = 0;\n    for (long i = 0; i < xs.size(); i++) {\n        sum\
    \ += xs[i];\n        derivative[i] = sum;\n    }\n    return derivative;", " \
    \   std::vector<long> derivative(xs.size());\n    long power = 1;\n    for (int\
    \ i = 0; i < xs.size(); i++) {\n        derivative[i] = power;\n        power\
    \ *= xs[i];\n    }\n    return derivative;", "    std::vector<long> derivative;\n\
    \    long a = xs[0];\n    long b = xs[1];\n    long c = xs[2];\n    long d = xs[3];\n\
    \    long e = xs[4];\n    long f = xs[5];\n    long g = xs[6];\n    long h = xs[7];\n\
    \    long i = xs[8];\n    long j = xs[9];\n    long k = xs[10];\n    long l =\
    \ xs[11];\n    long m = xs[12];\n    long n = xs[13];\n    long o = xs[14];\n\
    \    long p = xs[15];\n    long q = xs[16];\n    long r = xs[17];\n    long s\
    \ = xs[18];\n    long t = xs[19];\n    long u = xs[20];\n    long v = xs[21];\n\
    \    long w = xs[22];\n    long x = xs[23];\n    long y = xs[24];\n    long z\
    \ = xs[25];\n    long a = b * x + c;\n    long b = a * x + d;\n    long c = b\
    \ * x + e;\n    long d = a * x + f;\n    long e = c * x + g;\n    long f = d *\
    \ x + h;\n    long g = e * x + i;\n    long h = f * x + j;\n    long i = g * x\
    \ + k;\n    long j = h * x + l;\n    long k = i * x + m;\n    long l = j * x +\
    \ n;\n    long m = k * x + o;\n    long n = l * x + p;\n    long o = m * x + q;\n\
    \    long p = n * x + r;\n    long q = o * x + s;\n    long r = p * x + t;\n \
    \   long s = q * x + u;\n    long t = r * x + v;\n    long u = s * x + w;\n  \
    \  long v = t * x + x;\n    long w = u * x + y;\n    long x = v * x + z;\n   \
    \ long y = w * x + a;\n    long z = x * x + b;\n    derivative.push_back(y);\n\
    \    derivative.push_back(z);\n    return derivative;", "    assert(xs.size()\
    \ > 1);\n    std::vector<long> derivative(xs.size());\n    long a = xs[0];\n \
    \   long b = 1;\n    long c = 1;\n    long d = 1;\n    for (int i = 1; i < xs.size();\
    \ i++) {\n        derivative[i] = b;\n        b *= xs[i];\n        c += xs[i]\
    \ * b;\n        d += xs[i] * c * b;\n    }\n    derivative[0] = d;\n    return\
    \ derivative;", "    std::vector<long> derivative(xs.size());\n    long a = 1;\n\
    \    long b = 1;\n    long c = 1;\n    long d = 1;\n    long e = 1;\n    long\
    \ f = 1;\n    long g = 1;\n    long h = 1;\n    long i = 1;\n    long j = 1;\n\
    \    long k = 1;\n    long l = 1;\n    long m = 1;\n    long n = 1;\n    long\
    \ o = 1;\n    long p = 1;\n    long q = 1;\n    long r = 1;\n    long s = 1;\n\
    \    long t = 1;\n    long u = 1;\n    long v = 1;\n    long w = 1;\n    long\
    \ x = 1;\n    long y = 1;\n    long z = 1;\n    long a = 1;\n    long b = 1;\n\
    \    long c = 1;\n    long d = 1;\n    long e = 1;\n    long f = 1;\n    long\
    \ g = 1;\n    long h = 1;\n    long i = 1;\n    long j = 1;\n    long k = 1;\n\
    \    long l = 1;\n    long m = 1;\n    long n = 1;\n    long o = 1;\n    long\
    \ p = 1;\n    long q = 1;\n    long r = 1;\n    long s = 1;\n    long t = 1;\n\
    \    long u = 1;\n    long v = 1;\n    long w = 1;\n    long x = 1;\n    long\
    \ y = 1;\n    long z = 1;\n    long a = 1;\n    long b = 1;\n    long c = 1;\n\
    \    long d = 1;\n    long e = 1;\n    long f = 1;\n    long g = 1;\n    long\
    \ h = 1;\n    long i = 1;\n    long j = 1;\n    long k = 1;\n    long l = 1;\n\
    \    long m = 1;\n    long n = 1;\n    long o = 1;\n    long p = 1;\n    long\
    \ q = 1;\n    long r = 1;\n    long s = 1;\n    long t = 1;\n    long u = 1;\n\
    \    long v = 1;\n    long w = 1;\n    long x = 1;\n    long y = 1;\n    long\
    \ z = 1;\n    long a = 1;\n    long b = 1;\n    long c = 1;\n    long d = 1;\n\
    \    long e = 1;\n    long f = 1;\n    long g = 1;\n    long h = 1;\n    long\
    \ i = 1;\n    long j = 1;\n    long k = 1;\n    long l = 1;\n    long m = 1;\n\
    \    long n = 1;\n    long o = 1;\n    long p = 1;\n    long q = 1;\n    long\
    \ r = 1;\n    long s = 1;\n    long t = 1;\n    long u = 1;\n    long v = 1;\n\
    \    long w", "    std::vector<long> derivative;\n    derivative.resize(xs.size());\n\
    \    long power = 1;\n    long sum = 0;\n    for (long i = 0; i < xs.size(); i++)\
    \ {\n        sum += power * xs[i];\n        derivative[i] = sum;\n        power\
    \ *= xs[i];\n    }\n    return derivative;", "    std::vector<long> derivative(xs.size());\n\
    \    long a = 1;\n    long b = 1;\n    long c = 1;\n    long d = 1;\n    for (long\
    \ i = 0; i < xs.size(); i++) {\n        derivative[i] = b;\n        b += xs[i]\
    \ * c;\n        c *= xs[i];\n    }\n    return derivative;", "    std::vector<long>\
    \ derivative(xs.size());\n    long a = 1;\n    long b = 1;\n    long c = 1;\n\
    \    long d = 1;\n    long e = 1;\n    long f = 1;\n    long g = 1;\n    long\
    \ h = 1;\n    long i = 1;\n    long j = 1;\n    long k = 1;\n    long l = 1;\n\
    \    long m = 1;\n    long n = 1;\n    long o = 1;\n    long p = 1;\n    long\
    \ q = 1;\n    long r = 1;\n    long s = 1;\n    long t = 1;\n    long u = 1;\n\
    \    long v = 1;\n    long w = 1;\n    long x = 1;\n    long y = 1;\n    long\
    \ z = 1;\n    long a = 1;\n    long b = 1;\n    long c = 1;\n    long d = 1;\n\
    \    long e = 1;\n    long f = 1;\n    long g = 1;\n    long h = 1;\n    long\
    \ i = 1;\n    long j = 1;\n    long k = 1;\n    long l = 1;\n    long m = 1;\n\
    \    long n = 1;\n    long o = 1;\n    long p = 1;\n    long q = 1;\n    long\
    \ r = 1;\n    long s = 1;\n    long t = 1;\n    long u = 1;\n    long v = 1;\n\
    \    long w = 1;\n    long x = 1;\n    long y = 1;\n    long z = 1;\n    long\
    \ a = 1;\n    long b = 1;\n    long c = 1;\n    long d = 1;\n    long e = 1;\n\
    \    long f = 1;\n    long g = 1;\n    long h = 1;\n    long i = 1;\n    long\
    \ j = 1;\n    long k = 1;\n    long l = 1;\n    long m = 1;\n    long n = 1;\n\
    \    long o = 1;\n    long p = 1;\n    long q = 1;\n    long r = 1;\n    long\
    \ s = 1;\n    long t = 1;\n    long u = 1;\n    long v = 1;\n    long w = 1;\n\
    \    long x = 1;\n    long y = 1;\n    long z = 1;\n    long a = 1;\n    long\
    \ b = 1;\n    long c = 1;\n    long d = 1;\n    long e = 1;\n    long f = 1;\n\
    \    long g = 1;\n    long h = 1;\n    long i = 1;\n    long j = 1;\n    long\
    \ k = 1;\n    long l = 1;\n    long m = 1;\n    long n = 1;\n    long o = 1;\n\
    \    long p = 1;\n    long q = 1;\n    long r = 1;\n    long s = 1;\n    long\
    \ t = 1;\n    long u = 1;\n    long v = 1;\n    long w", "    std::vector<long>\
    \ derivative(xs.size());\n    long long a = 1;\n    long long b = 1;\n    long\
    \ long c = 1;\n    for (long long i = 0; i < xs.size(); i++) {\n        derivative[i]\
    \ = xs[i] * b;\n        b += xs[i];\n    }\n    for (long long i = xs.size() -\
    \ 1; i >= 0; i--) {\n        derivative[i] = derivative[i] + xs[i] * c;\n    \
    \    c += xs[i];\n    }\n    return derivative;", "    std::vector<long> derivative(xs.size());\n\
    \    long power = 1;\n    for (long i = 0; i < xs.size(); i++) {\n        derivative[i]\
    \ = power;\n        power *= xs[i];\n    }\n    return derivative;", "    std::vector<long>\
    \ derivative;\n    derivative.reserve(xs.size());\n    long sum = 0;\n    for\
    \ (long i = 0; i < xs.size(); i++) {\n        sum += xs[i];\n        derivative.push_back(sum);\n\
    \    }\n    return derivative;", "    std::vector<long> derivative;\n    derivative.reserve(xs.size());\n\
    \    long a = xs[0];\n    long b = 1;\n    long c = 1;\n    long d = 1;\n    long\
    \ e = 1;\n    long f = 1;\n    long g = 1;\n    long h = 1;\n    long i = 1;\n\
    \    long j = 1;\n    long k = 1;\n    long l = 1;\n    long m = 1;\n    long\
    \ n = 1;\n    long o = 1;\n    long p = 1;\n    long q = 1;\n    long r = 1;\n\
    \    long s = 1;\n    long t = 1;\n    long u = 1;\n    long v = 1;\n    long\
    \ w = 1;\n    long x = 1;\n    long y = 1;\n    long z = 1;\n    long a = 1;\n\
    \    long b = 1;\n    long c = 1;\n    long d = 1;\n    long e = 1;\n    long\
    \ f = 1;\n    long g = 1;\n    long h = 1;\n    long i = 1;\n    long j = 1;\n\
    \    long k = 1;\n    long l = 1;\n    long m = 1;\n    long n = 1;\n    long\
    \ o = 1;\n    long p = 1;\n    long q = 1;\n    long r = 1;\n    long s = 1;\n\
    \    long t = 1;\n    long u = 1;\n    long v = 1;\n    long w = 1;\n    long\
    \ x = 1;\n    long y = 1;\n    long z = 1;\n    long a = 1;\n    long b = 1;\n\
    \    long c = 1;\n    long d = 1;\n    long e = 1;\n    long f = 1;\n    long\
    \ g = 1;\n    long h = 1;\n    long i = 1;\n    long j = 1;\n    long k = 1;\n\
    \    long l = 1;\n    long m = 1;\n    long n = 1;\n    long o = 1;\n    long\
    \ p = 1;\n    long q = 1;\n    long r = 1;\n    long s = 1;\n    long t = 1;\n\
    \    long u = 1;\n    long v = 1;\n    long w = 1;\n    long x = 1;\n    long\
    \ y = 1;\n    long z = 1;\n    long a = 1;\n    long b = 1;\n    long c = 1;\n\
    \    long d = 1;\n    long e = 1;\n    long f = 1;\n    long g = 1;\n    long\
    \ h = 1;\n    long i = 1;\n    long j = 1;\n    long k = 1;\n    long l = 1;\n\
    \    long m = 1;\n    long n = 1;\n    long o = 1;\n    long p = 1;\n    long\
    \ q = 1;\n    long r = 1;\n    long s = 1;\n    long t = 1;\n    long u = 1;\n\
    \    ", "    assert(xs.size() > 1);\n    std::vector<long> derivative(xs.size());\n\
    \    long d = 1;\n    for (long i = 0; i < xs.size() - 1; i++) {\n        derivative[i]\
    \ = d;\n        d *= xs[i + 1];\n    }\n    return derivative;", "    std::vector<long>\
    \ derivative(xs.size());\n    long a = 1;\n    long b = 1;\n    long c = 1;\n\
    \    for (long i = 0; i < xs.size(); i++) {\n        derivative[i] = xs[i] * b;\n\
    \        b *= xs[i];\n    }\n    for (long i = xs.size(); i < derivative.size();\
    \ i++) {\n        derivative[i] = 0;\n    }\n    for (long i = xs.size(); i <\
    \ derivative.size(); i++) {\n        derivative[i] = derivative[i] - a;\n    \
    \    a *= xs[i];\n    }\n    return derivative;", "    std::vector<long> derivative;\n\
    \    long n = xs.size();\n    long d = 1;\n    for (int i = 0; i < n; i++) {\n\
    \        derivative += xs[i] * d;\n        d *= xs[i];\n    }\n    return derivative;",
  "    std::vector<long> derivative(xs.size());\n    derivative[0] = xs[0];\n    derivative[1]\
    \ = xs[1];\n    for (int i = 2; i < derivative.size(); i++) {\n        derivative[i]\
    \ = derivative[i - 1] * xs[i];\n    }\n    return derivative;", "    std::vector<long>\
    \ derivative;\n    derivative.resize(xs.size());\n    derivative[0] = xs[0];\n\
    \    for (int i = 1; i < xs.size(); i++) {\n        derivative[i] = derivative[i\
    \ - 1] * xs[i];\n    }\n    return derivative;", "    std::vector<long> derivative(xs.size());\n\
    \    derivative[0] = xs[0];\n    for (int i = 1; i < xs.size(); i++) {\n     \
    \   derivative[i] = xs[i] - derivative[i - 1];\n    }\n    return derivative;",
  "    std::vector<long> derivative(xs.size());\n    long a = 1;\n    for (long i\
    \ = 0; i < xs.size(); i++) {\n        derivative[i] = a;\n        a *= xs[i];\n\
    \    }\n    return derivative;", "    std::vector<long> derivative;\n    long\
    \ n = xs.size();\n    long m = 1;\n    for (long i = 0; i < n; i++) {\n      \
    \  derivative += m * xs[i];\n        m *= n - i;\n    }\n    return derivative;",
  "    std::vector<long> derivative;\n    derivative.reserve(xs.size());\n    long\
    \ power = 1;\n    for (long i = 0; i < xs.size(); i++) {\n        derivative.push_back(power);\n\
    \        power *= xs[i];\n    }\n    return derivative;", "    std::vector<long>\
    \ derivative(xs.size());\n    long power = 1;\n    for (long i = 0; i < xs.size();\
    \ i++) {\n        derivative[i] = power;\n        power *= xs[i];\n    }\n   \
    \ return derivative;", "    std::vector<long> derivative;\n    long n = xs.size();\n\
    \    long m = 1;\n    for (long i = 0; i < n; i++) {\n        derivative += xs[i]\
    \ * m;\n        m *= xs[i];\n    }\n    return derivative;", "    std::vector<long>\
    \ derivative;\n    derivative.resize(xs.size());\n    derivative[0] = xs[0];\n\
    \    for (int i = 1; i < xs.size(); i++) {\n        derivative[i] = derivative[i\
    \ - 1] * xs[i];\n    }\n    return derivative;", "    std::vector<long> derivative(xs.size());\n\
    \    long pow = 1;\n    for (long i = 0; i < xs.size(); i++) {\n        derivative[i]\
    \ = pow;\n        pow *= xs[i];\n    }\n    return derivative;", "    std::vector<long>\
    \ derivative;\n    derivative.resize(xs.size());\n    long power = 1;\n    for\
    \ (long i = 0; i < xs.size(); i++) {\n        derivative[i] = power;\n       \
    \ power *= xs[i];\n    }\n    return derivative;", "    std::vector<long> derivative;\n\
    \    long d = 1;\n    for (long i = 0; i < xs.size(); i++) {\n        derivative\
    \ += xs[i] * d;\n        d *= xs[i];\n    }\n    return derivative;", "    std::vector<long>\
    \ derivative(xs.size());\n    derivative[0] = xs[0];\n    derivative[1] = xs[1];\n\
    \    for (int i = 2; i < derivative.size(); i++) {\n        derivative[i] = derivative[i\
    \ - 1] * xs[i];\n    }\n    return derivative;", "    std::vector<long> derivative(xs.size());\n\
    \    long n = xs.size();\n    long m = 1;\n    for (int i = 1; i < n; i++) {\n\
    \        derivative[i] = m * xs[i];\n        m *= xs[i];\n    }\n    return derivative;",
  "    std::vector<long> derivative(xs.size());\n    long d = 1;\n    for (long i\
    \ = 0; i < xs.size(); i++) {\n        derivative[i] = d;\n        d *= xs[i];\n\
    \    }\n    return derivative;", "    assert(xs.size() > 1);\n    std::vector<long>\
    \ derivative(xs.size());\n    long a = 1;\n    long b = 1;\n    long c = 1;\n\
    \    long d = 1;\n    long e = 1;\n    long f = 0;\n    long g = 0;\n    long\
    \ h = 1;\n    long i = 1;\n    long j = 1;\n    long k = 1;\n    long l = 1;\n\
    \    long m = 1;\n    long n = 1;\n    long o = 1;\n    long p = 1;\n    long\
    \ q = 1;\n    long r = 1;\n    long s = 1;\n    long t = 1;\n    long u = 1;\n\
    \    long v = 1;\n    long w = 1;\n    long x = 1;\n    long y = 1;\n    long\
    \ z = 1;\n    long a = 1;\n    long b = 1;\n    long c = 1;\n    long d = 1;\n\
    \    long e = 1;\n    long f = 0;\n    long g = 0;\n    long h = 1;\n    long\
    \ i = 1;\n    long j = 1;\n    long k = 1;\n    long l = 1;\n    long m = 1;\n\
    \    long n = 1;\n    long o = 1;\n    long p = 1;\n    long q = 1;\n    long\
    \ r = 1;\n    long s = 1;\n    long t = 1;\n    long u = 1;\n    long v = 1;\n\
    \    long w = 1;\n    long x = 1;\n    long y = 1;\n    long z = 1;\n    long\
    \ a = 1;\n    long b = 1;\n    long c = 1;\n    long d = 1;\n    long e = 1;\n\
    \    long f = 0;\n    long g = 0;\n    long h = 1;\n    long i = 1;\n    long\
    \ j = 1;\n    long k = 1;\n    long l = 1;\n    long m = 1;\n    long n = 1;\n\
    \    long o = 1;\n    long p = 1;\n    long q = 1;\n    long r = 1;\n    long\
    \ s = 1;\n    long t = 1;\n    long u = 1;\n    long v = 1;\n    long w = 1;\n\
    \    long x = 1;\n    long y = 1;\n    long z = 1;\n    long a = 1;\n    long\
    \ b = 1;\n    long c = 1;\n    long d = 1;\n    long e = 1;\n    long f = 0;\n\
    \    long g = 0;\n    long h = 1;\n    long i = 1;\n    long j = 1;\n    long\
    \ k = 1;\n    long l = 1;\n    long m = 1;\n    long n = 1;\n    long o = 1;\n\
    \    long p = 1;\n    long q = 1;\n    long r = 1;\n    long s = 1;\n    long\
    \ t = 1;\n    long u = 1;\n    long ", "    std::vector<long> derivative;\n  \
    \  derivative.reserve(xs.size());\n    for (long i = 0; i < xs.size(); i++) {\n\
    \        derivative.push_back(xs[i] * i);\n    }\n    return derivative;", " \
    \   std::vector<long> derivative;\n    long a = xs[0];\n    long b = xs[1];\n\
    \    long c = xs[2];\n    long d = xs[3];\n    long e = xs[4];\n    long f = xs[5];\n\
    \    long g = xs[6];\n    long h = xs[7];\n    long i = xs[8];\n    long j = xs[9];\n\
    \    long k = xs[10];\n    long l = xs[11];\n    long m = xs[12];\n    long n\
    \ = xs[13];\n    long o = xs[14];\n    long p = xs[15];\n    long q = xs[16];\n\
    \    long r = xs[17];\n    long s = xs[18];\n    long t = xs[19];\n    long u\
    \ = xs[20];\n    long v = xs[21];\n    long w = xs[22];\n    long x = xs[23];\n\
    \    long y = xs[24];\n    long z = xs[25];\n    long a = xs[26];\n    long b\
    \ = xs[27];\n    long c = xs[28];\n    long d = xs[29];\n    long e = xs[30];\n\
    \    long f = xs[31];\n    long g = xs[32];\n    long h = xs[33];\n    long i\
    \ = xs[34];\n    long j = xs[35];\n    long k = xs[36];\n    long l = xs[37];\n\
    \    long m = xs[38];\n    long n = xs[39];\n    long o = xs[40];\n    long p\
    \ = xs[41];\n    long q = xs[42];\n    long r = xs[43];\n    long s = xs[44];\n\
    \    long t = xs[45];\n    long u = xs[46];\n    long v = xs[47];\n    long w\
    \ = xs[48];\n    long x = xs[49];\n    long y = xs[50];\n    long z = xs[51];\n\
    \    long a = xs[52];\n    long b = xs[53];\n    long c = xs[54];\n    long d\
    \ = xs[55];\n    long e = xs[56];\n    long f = xs[57];\n    long g = xs[58];\n\
    \    long h = xs[59];\n    long i = xs[60];\n    long j = xs[61];\n    long k\
    \ = xs[62];\n    long l = x", "    assert(xs.size() > 1);\n    std::vector<long>\
    \ derivative(xs.size());\n    long a = 1;\n    long b = 1;\n    long c = 1;\n\
    \    long d = 1;\n    long e = 1;\n    long f = 1;\n    long g = 1;\n    long\
    \ h = 1;\n    long i = 1;\n    long j = 1;\n    long k = 1;\n    long l = 1;\n\
    \    long m = 1;\n    long n = 1;\n    long o = 1;\n    long p = 1;\n    long\
    \ q = 1;\n    long r = 1;\n    long s = 1;\n    long t = 1;\n    long u = 1;\n\
    \    long v = 1;\n    long w = 1;\n    long x = 1;\n    long y = 1;\n    long\
    \ z = 1;\n    long a = 1;\n    long b = 1;\n    long c = 1;\n    long d = 1;\n\
    \    long e = 1;\n    long f = 1;\n    long g = 1;\n    long h = 1;\n    long\
    \ i = 1;\n    long j = 1;\n    long k = 1;\n    long l = 1;\n    long m = 1;\n\
    \    long n = 1;\n    long o = 1;\n    long p = 1;\n    long q = 1;\n    long\
    \ r = 1;\n    long s = 1;\n    long t = 1;\n    long u = 1;\n    long v = 1;\n\
    \    long w = 1;\n    long x = 1;\n    long y = 1;\n    long z = 1;\n    long\
    \ a = 1;\n    long b = 1;\n    long c = 1;\n    long d = 1;\n    long e = 1;\n\
    \    long f = 1;\n    long g = 1;\n    long h = 1;\n    long i = 1;\n    long\
    \ j = 1;\n    long k = 1;\n    long l = 1;\n    long m = 1;\n    long n = 1;\n\
    \    long o = 1;\n    long p = 1;\n    long q = 1;\n    long r = 1;\n    long\
    \ s = 1;\n    long t = 1;\n    long u = 1;\n    long v = 1;\n    long w = 1;\n\
    \    long x = 1;\n    long y = 1;\n    long z = 1;\n    long a = 1;\n    long\
    \ b = 1;\n    long c = 1;\n    long d = 1;\n    long e = 1;\n    long f = 1;\n\
    \    long g = 1;\n    long h = 1;\n    long i = 1;\n    long j = 1;\n    long\
    \ k = 1;\n    long l = 1;\n    long m = 1;\n    long n = 1;\n    long o = 1;\n\
    \    long p = 1;\n    long q = 1;\n    long r = 1;\n    long s = 1;\n    long\
    \ t = 1;\n    long u = 1;\n    long ", "    std::vector<long> derivative(xs.size());\n\
    \    long pow = 1;\n    for (long i = 0; i < xs.size(); i++) {\n        derivative[i]\
    \ = pow;\n        pow *= xs[i];\n    }\n    return derivative;", "    assert(xs.size()\
    \ >= 2);\n    std::vector<long> derivative(xs.size());\n    derivative[0] = xs[1];\n\
    \    for (int i = 2; i < xs.size(); i++) {\n        derivative[i] = xs[i] - derivative[i\
    \ - 1] * xs[i - 1];\n    }\n    return derivative;", "    std::vector<long> derivative;\n\
    \    derivative.resize(xs.size());\n    long pow = 1;\n    for (long i = 0; i\
    \ < xs.size(); i++) {\n        derivative[i] = pow;\n        pow *= xs[i];\n \
    \   }\n    return derivative;", "    std::vector<long> derivative;\n    derivative.resize(xs.size());\n\
    \    long pow = 1;\n    for (long i = 0; i < xs.size(); i++) {\n        derivative[i]\
    \ = pow;\n        pow *= xs[i];\n    }\n    return derivative;", "    std::vector<long>\
    \ derivative;\n    derivative.reserve(xs.size());\n    for (long i = 0; i < xs.size();\
    \ i++) {\n        derivative.push_back(xs[i]);\n        derivative.push_back(xs[i]\
    \ * i);\n    }\n    return derivative;", "    std::vector<long> derivative;\n\
    \    derivative.reserve(xs.size());\n    long sum = 0;\n    for (long i = 0; i\
    \ < xs.size(); i++) {\n        sum += xs[i] * xs[i];\n        derivative.push_back(sum);\n\
    \    }\n    return derivative;", "    std::vector<long> derivative;\n    long\
    \ n = xs.size();\n    long m = 1;\n    long sum = 0;\n    long pow = 1;\n    long\
    \ sum2 = 0;\n    long pow2 = 1;\n    long sum3 = 0;\n    long pow3 = 1;\n    long\
    \ sum4 = 0;\n    long pow4 = 1;\n    long sum5 = 0;\n    long pow5 = 1;\n    long\
    \ sum6 = 0;\n    long pow6 = 0;\n    long sum7 = 0;\n    long pow7 = 1;\n    long\
    \ sum8 = 0;\n    long pow8 = 1;\n    long sum9 = 0;\n    long pow9 = 1;\n    long\
    \ sum10 = 0;\n    long pow10 = 1;\n    long sum11 = 0;\n    long pow11 = 1;\n\
    \    long sum12 = 0;\n    long pow12 = 1;\n    long sum13 = 0;\n    long pow13\
    \ = 1;\n    long sum14 = 0;\n    long pow14 = 1;\n    long sum15 = 0;\n    long\
    \ pow15 = 1;\n    long sum16 = 0;\n    long pow16 = 1;\n    long sum17 = 0;\n\
    \    long pow17 = 1;\n    long sum18 = 0;\n    long pow18 = 1;\n    long sum19\
    \ = 0;\n    long pow19 = 1;\n    long sum20 = 0;\n    long pow20 = 1;\n    long\
    \ sum21 = 0;\n    long pow21 = 1;\n    long sum22 = 0;\n    long pow22 = 1;\n\
    \    long sum23 = 0;\n    long pow23 = 1;\n    long sum24 = 0;\n    long pow24\
    \ = 1;\n    long sum25 = 0;\n    long pow25 = 1;\n    long sum26 = 0;\n    long\
    \ pow26 = 1;\n    long sum27 = 0;\n    long pow27 = 1;\n    long sum28 = 0;\n\
    \    long pow28 = 1;\n    long sum29 = 0;\n    long pow29 = 1;\n    long sum30\
    \ = 0;\n    long pow30 = 1;\n    long sum31 = 0;\n    long pow31 = 1;\n    long\
    \ sum32 = 0;\n    long pow32 = 1;\n    long sum33 = 0;\n    long pow33 = 1;\n\
    \    long sum34 = 0;\n    long pow34 = 1;\n    long sum35 = 0;\n    long pow35\
    \ = 1;\n    long sum36 = 0;\n    long pow36 = 1;\n    long sum37 = 0;\n    long\
    \ pow37 = 1;\n    long sum38 = 0;\n    long pow38 = 1;\n    long sum39 = 0;\n\
    \    long pow39 = 1;\n    long sum40 = 0;\n    long pow40 = 1;\n    long sum41\
    \ = 0;\n    long pow41 = 1;\n    long sum42 = 0;\n    long ", "    assert(xs.size()\
    \ > 1);\n    std::vector<long> derivative(xs.size() - 1);\n    long pow = 1;\n\
    \    for (long i = xs.size() - 2; i >= 0; i--) {\n        derivative[i] = pow;\n\
    \        pow *= xs[i];\n    }\n    return derivative;", "    std::vector<long>\
    \ derivative(xs.size());\n    long pow = 1;\n    long sum = 0;\n    for (long\
    \ i = 0; i < xs.size(); i++) {\n        sum += pow;\n        derivative[i] = sum;\n\
    \        pow *= xs[i];\n    }\n    return derivative;", "    std::vector<long>\
    \ derivative;\n    derivative.reserve(xs.size());\n    for (long i = 1; i < xs.size();\
    \ i++) {\n        derivative.push_back(xs[i] - xs[i - 1]);\n    }\n    return\
    \ derivative;", "    std::vector<long> derivative;\n    derivative.resize(xs.size());\n\
    \    long a = 1;\n    long b = 1;\n    for (long i = 0; i < xs.size(); i++) {\n\
    \        derivative[i] = b;\n        b += xs[i] * a;\n        a *= xs[i];\n  \
    \  }\n    return derivative;", "    std::vector<long> derivative;\n    derivative.resize(xs.size());\n\
    \    long power = 1;\n    for (long i = 0; i < xs.size(); i++) {\n        derivative[i]\
    \ = power;\n        power *= xs[i];\n    }\n    return derivative;", "    std::vector<long>\
    \ derivative;\n    long a = xs[0];\n    long b = 1;\n    long c = 1;\n    for\
    \ (long i = 1; i < xs.size(); i++) {\n        long d = xs[i] - a;\n        derivative\
    \ += b * d;\n        b *= c;\n        a *= xs[i];\n        c *= xs[i];\n    }\n\
    \    return derivative;", "    assert(xs.size() > 1);\n    std::vector<long> derivative(xs.size());\n\
    \    long a = xs[0];\n    long b = xs[1];\n    long c = xs[2];\n    long d = xs[3];\n\
    \    long e = xs[4];\n    long f = xs[5];\n    long g = xs[6];\n    long h = xs[7];\n\
    \    derivative[0] = a;\n    derivative[1] = b;\n    derivative[2] = c;\n    derivative[3]\
    \ = d;\n    derivative[4] = e;\n    derivative[5] = f;\n    derivative[6] = g;\n\
    \    derivative[7] = h;\n    return derivative;"]
stop_tokens:
- "\n}"
