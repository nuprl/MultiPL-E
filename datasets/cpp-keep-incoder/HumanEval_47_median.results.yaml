name: HumanEval_47_median
language: cpp
results:
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    long long\
    \ int n = l.size();\n    if (n <= 1) return l[0];\n    long long int mid = n /\
    \ 2;\n    float midval = l[mid];\n    float leftval = l[mid];\n    float rightval\
    \ = l[n - 1];\n    for (long long int i = mid; i < n; i++) {\n        if (l[i]\
    \ < leftval) leftval = l[i];\n        if (l[i] > rightval) rightval = l[i];\n\
    \    }\n    return (leftval + rightval) / 2;\n}\nint main() {\n    auto candidate\
    \ = median;\n    assert(candidate((std::vector<long>({3, 1, 2, 4, 5}))) == (float(3)));\n\
    \    assert(candidate((std::vector<long>({-10, 4, 6, 1000, 10, 20}))) == (8.0));\n\
    \    assert(candidate((std::vector<long>({5}))) == (float(5)));\n    assert(candidate((std::vector<long>({6,\
    \ 5}))) == (5.5));\n    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2,\
    \ 7}))) == (float(7)));\n}\n"
  stdout: ''
  stderr: "tmpz8qhp6ff: /tmp/tmpz8qhp6ff.cpp:23: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    long long\
    \ int n = l.size();\n    if (n % 2 == 0) {\n        return l[n / 2];\n    }\n\
    \    float median = l[n / 2];\n    float leftMedian = median;\n    float rightMedian\
    \ = median;\n    for (long long int i = n / 2; i > 0; i /= 2) {\n        if (l[i]\
    \ < leftMedian) {\n            leftMedian = l[i];\n        }\n        if (l[i]\
    \ > rightMedian) {\n            rightMedian = l[i];\n        }\n    }\n    return\
    \ leftMedian + rightMedian;\n}\nint main() {\n    auto candidate = median;\n \
    \   assert(candidate((std::vector<long>({3, 1, 2, 4, 5}))) == (float(3)));\n \
    \   assert(candidate((std::vector<long>({-10, 4, 6, 1000, 10, 20}))) == (8.0));\n\
    \    assert(candidate((std::vector<long>({5}))) == (float(5)));\n    assert(candidate((std::vector<long>({6,\
    \ 5}))) == (5.5));\n    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2,\
    \ 7}))) == (float(7)));\n}\n"
  stdout: ''
  stderr: "tmp7u_9ydnv: /tmp/tmp7u_9ydnv.cpp:29: int main(): Assertion `candidate((std::vector<long>({-10,\
    \ 4, 6, 1000, 10, 20}))) == (8.0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    long long\
    \ int n = l.size();\n    if (n <= 1) return l[0];\n    float mid = l[n / 2];\n\
    \    float leftMedian = median(l.sublist(0, n / 2));\n    float rightMedian =\
    \ median(l.sublist(n / 2, n));\n    return std::max(leftMedian, rightMedian);\n\
    }\nint main() {\n    auto candidate = median;\n    assert(candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3)));\n    assert(candidate((std::vector<long>({-10,\
    \ 4, 6, 1000, 10, 20}))) == (8.0));\n    assert(candidate((std::vector<long>({5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({6, 5}))) == (5.5));\n\
    \    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2, 7}))) == (float(7)));\n\
    }\n"
  stdout: ''
  stderr: "/tmp/tmphj7qj5k2.cpp: In function \u2018float median(std::vector<long int>)\u2019\
    :\n/tmp/tmphj7qj5k2.cpp:12:33: error: \u2018class std::vector<long int>\u2019\
    \ has no member named \u2018sublist\u2019\n   12 |     float leftMedian = median(l.sublist(0,\
    \ n / 2));\n      |                                 ^~~~~~~\n/tmp/tmphj7qj5k2.cpp:13:34:\
    \ error: \u2018class std::vector<long int>\u2019 has no member named \u2018sublist\u2019\
    \n   13 |     float rightMedian = median(l.sublist(n / 2, n));\n      |      \
    \                            ^~~~~~~\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    long long\
    \ mid = l.size() / 2;\n    if (l.size() % 2 == 0) {\n        return l[mid];\n\
    \    }\n    return (float) l[mid] + (float) l[mid + 1];\n}\nint main() {\n   \
    \ auto candidate = median;\n    assert(candidate((std::vector<long>({3, 1, 2,\
    \ 4, 5}))) == (float(3)));\n    assert(candidate((std::vector<long>({-10, 4, 6,\
    \ 1000, 10, 20}))) == (8.0));\n    assert(candidate((std::vector<long>({5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({6, 5}))) == (5.5));\n\
    \    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2, 7}))) == (float(7)));\n\
    }\n"
  stdout: ''
  stderr: "tmpj628z7at: /tmp/tmpj628z7at.cpp:17: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    long long\
    \ int n = l.size();\n    if (n <= 1) return l[0];\n    long long int mid = n /\
    \ 2;\n    long long int left = l[mid];\n    long long int right = l[n - 1];\n\
    \    if (left > right) return median(l);\n    if (n == 2) return left;\n    if\
    \ (n == 1) return right;\n    if (left == right) return left;\n    if (left >\
    \ right) return median(l);\n    return right;\n}\nint main() {\n    auto candidate\
    \ = median;\n    assert(candidate((std::vector<long>({3, 1, 2, 4, 5}))) == (float(3)));\n\
    \    assert(candidate((std::vector<long>({-10, 4, 6, 1000, 10, 20}))) == (8.0));\n\
    \    assert(candidate((std::vector<long>({5}))) == (float(5)));\n    assert(candidate((std::vector<long>({6,\
    \ 5}))) == (5.5));\n    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2,\
    \ 7}))) == (float(7)));\n}\n"
  stdout: ''
  stderr: "tmp53cn_6dj: /tmp/tmp53cn_6dj.cpp:23: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    long long\
    \ mid = l.size() / 2;\n    float median;\n    if (l.size() % 2 == 0) {\n     \
    \   median = l[mid];\n    } else {\n        median = (l[mid] + l[mid-1]) / 2.0;\n\
    \    }\n    return median;\n}\nint main() {\n    auto candidate = median;\n  \
    \  assert(candidate((std::vector<long>({3, 1, 2, 4, 5}))) == (float(3)));\n  \
    \  assert(candidate((std::vector<long>({-10, 4, 6, 1000, 10, 20}))) == (8.0));\n\
    \    assert(candidate((std::vector<long>({5}))) == (float(5)));\n    assert(candidate((std::vector<long>({6,\
    \ 5}))) == (5.5));\n    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2,\
    \ 7}))) == (float(7)));\n}\n"
  stdout: ''
  stderr: "tmpen5snxfu: /tmp/tmpen5snxfu.cpp:20: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    long long\
    \ int n = l.size();\n    assert(n % 2 == 0);\n    long long int mid = n / 2;\n\
    \    long long int l1 = 0, l2 = 0, l3 = 0;\n    for (long long int i = 0; i <\
    \ n; i++) {\n        if (i == mid) {\n            l3 = l[i];\n        } else {\n\
    \            if (l[i] > l1) {\n                l2 = l[i];\n                l1\
    \ = l1;\n            } else {\n                l3 = l[i];\n            }\n   \
    \     }\n    }\n    return l1 + l2 + l3;\n}\nint main() {\n    auto candidate\
    \ = median;\n    assert(candidate((std::vector<long>({3, 1, 2, 4, 5}))) == (float(3)));\n\
    \    assert(candidate((std::vector<long>({-10, 4, 6, 1000, 10, 20}))) == (8.0));\n\
    \    assert(candidate((std::vector<long>({5}))) == (float(5)));\n    assert(candidate((std::vector<long>({6,\
    \ 5}))) == (5.5));\n    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2,\
    \ 7}))) == (float(7)));\n}\n"
  stdout: ''
  stderr: "tmpnl69e6kq: /tmp/tmpnl69e6kq.cpp:10: float median(std::vector<long int>):\
    \ Assertion `n % 2 == 0' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    long long\
    \ int n = l.size();\n    if (n <= 1) return l[0];\n    long long int mid = n /\
    \ 2;\n    float a = l[mid];\n    float b = l[n - 1];\n    return a < b ? b : a;\n\
    }\nint main() {\n    auto candidate = median;\n    assert(candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3)));\n    assert(candidate((std::vector<long>({-10,\
    \ 4, 6, 1000, 10, 20}))) == (8.0));\n    assert(candidate((std::vector<long>({5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({6, 5}))) == (5.5));\n\
    \    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2, 7}))) == (float(7)));\n\
    }\n"
  stdout: ''
  stderr: "tmp65oa7u9x: /tmp/tmp65oa7u9x.cpp:18: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    long long\
    \ int n = l.size();\n    if (n % 2 == 0) {\n        return l[n / 2];\n    }\n\
    \    long long int mid = n / 2;\n    float leftMedian = median(l.sublist(0, mid));\n\
    \    float rightMedian = median(l.sublist(mid, n - 1));\n    return 0.5 * (leftMedian\
    \ + rightMedian);\n}\nint main() {\n    auto candidate = median;\n    assert(candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3)));\n    assert(candidate((std::vector<long>({-10,\
    \ 4, 6, 1000, 10, 20}))) == (8.0));\n    assert(candidate((std::vector<long>({5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({6, 5}))) == (5.5));\n\
    \    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2, 7}))) == (float(7)));\n\
    }\n"
  stdout: ''
  stderr: "/tmp/tmp4ax0tn8a.cpp: In function \u2018float median(std::vector<long int>)\u2019\
    :\n/tmp/tmp4ax0tn8a.cpp:14:33: error: \u2018class std::vector<long int>\u2019\
    \ has no member named \u2018sublist\u2019\n   14 |     float leftMedian = median(l.sublist(0,\
    \ mid));\n      |                                 ^~~~~~~\n/tmp/tmp4ax0tn8a.cpp:15:34:\
    \ error: \u2018class std::vector<long int>\u2019 has no member named \u2018sublist\u2019\
    \n   15 |     float rightMedian = median(l.sublist(mid, n - 1));\n      |    \
    \                              ^~~~~~~\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    long long\
    \ int n = l.size();\n    if (n <= 1) return l[0];\n    float mid = l[n / 2];\n\
    \    float leftMedian = median(l.sublist(0, n / 2));\n    float rightMedian =\
    \ median(l.sublist(n / 2 + 1, n));\n    return mid + ((leftMedian + rightMedian)\
    \ / 2);\n}\nint main() {\n    auto candidate = median;\n    assert(candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3)));\n    assert(candidate((std::vector<long>({-10,\
    \ 4, 6, 1000, 10, 20}))) == (8.0));\n    assert(candidate((std::vector<long>({5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({6, 5}))) == (5.5));\n\
    \    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2, 7}))) == (float(7)));\n\
    }\n"
  stdout: ''
  stderr: "/tmp/tmp9gerq91n.cpp: In function \u2018float median(std::vector<long int>)\u2019\
    :\n/tmp/tmp9gerq91n.cpp:12:33: error: \u2018class std::vector<long int>\u2019\
    \ has no member named \u2018sublist\u2019\n   12 |     float leftMedian = median(l.sublist(0,\
    \ n / 2));\n      |                                 ^~~~~~~\n/tmp/tmp9gerq91n.cpp:13:34:\
    \ error: \u2018class std::vector<long int>\u2019 has no member named \u2018sublist\u2019\
    \n   13 |     float rightMedian = median(l.sublist(n / 2 + 1, n));\n      |  \
    \                                ^~~~~~~\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    long long\
    \ int mid = l.size() / 2;\n    if (l.size() % 2 == 1) {\n        return l[mid];\n\
    \    }\n    float leftMedian = median(l.sublist(0, mid));\n    float rightMedian\
    \ = median(l.sublist(mid, l.size()));\n    return (leftMedian + rightMedian) /\
    \ 2;\n}\nint main() {\n    auto candidate = median;\n    assert(candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3)));\n    assert(candidate((std::vector<long>({-10,\
    \ 4, 6, 1000, 10, 20}))) == (8.0));\n    assert(candidate((std::vector<long>({5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({6, 5}))) == (5.5));\n\
    \    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2, 7}))) == (float(7)));\n\
    }\n"
  stdout: ''
  stderr: "/tmp/tmpzpbs5j6h.cpp: In function \u2018float median(std::vector<long int>)\u2019\
    :\n/tmp/tmpzpbs5j6h.cpp:13:33: error: \u2018class std::vector<long int>\u2019\
    \ has no member named \u2018sublist\u2019\n   13 |     float leftMedian = median(l.sublist(0,\
    \ mid));\n      |                                 ^~~~~~~\n/tmp/tmpzpbs5j6h.cpp:14:34:\
    \ error: \u2018class std::vector<long int>\u2019 has no member named \u2018sublist\u2019\
    \n   14 |     float rightMedian = median(l.sublist(mid, l.size()));\n      | \
    \                                 ^~~~~~~\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    long long\
    \ mid = l.size() / 2;\n    float median = 0;\n    if (l.size() % 2 == 0) {\n \
    \       median = l[mid];\n    } else {\n        median = (l[mid] + l[mid-1]) /\
    \ 2;\n    }\n    return median;\n}\nint main() {\n    auto candidate = median;\n\
    \    assert(candidate((std::vector<long>({3, 1, 2, 4, 5}))) == (float(3)));\n\
    \    assert(candidate((std::vector<long>({-10, 4, 6, 1000, 10, 20}))) == (8.0));\n\
    \    assert(candidate((std::vector<long>({5}))) == (float(5)));\n    assert(candidate((std::vector<long>({6,\
    \ 5}))) == (5.5));\n    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2,\
    \ 7}))) == (float(7)));\n}\n"
  stdout: ''
  stderr: "tmp9ufevah4: /tmp/tmp9ufevah4.cpp:20: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    long long\
    \ mid = l.size() / 2;\n    float median = l[mid];\n    for (long long i = mid;\
    \ i < l.size(); i++) {\n        median = (median < l[i]) ? l[i] : median;\n  \
    \  }\n    return median;\n}\nint main() {\n    auto candidate = median;\n    assert(candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3)));\n    assert(candidate((std::vector<long>({-10,\
    \ 4, 6, 1000, 10, 20}))) == (8.0));\n    assert(candidate((std::vector<long>({5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({6, 5}))) == (5.5));\n\
    \    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2, 7}))) == (float(7)));\n\
    }\n"
  stdout: ''
  stderr: "tmpmnvzeg76: /tmp/tmpmnvzeg76.cpp:18: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    long long\
    \ mid = l.size() / 2;\n    long long left = l[mid];\n    long long right = l[mid+1];\n\
    \    if (left > right) {\n        std::swap(left, right);\n    }\n    return left\
    \ + (right - left) / 2;\n}\nint main() {\n    auto candidate = median;\n    assert(candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3)));\n    assert(candidate((std::vector<long>({-10,\
    \ 4, 6, 1000, 10, 20}))) == (8.0));\n    assert(candidate((std::vector<long>({5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({6, 5}))) == (5.5));\n\
    \    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2, 7}))) == (float(7)));\n\
    }\n"
  stdout: ''
  stderr: "tmp5ckenk55: /tmp/tmp5ckenk55.cpp:20: int main(): Assertion `candidate((std::vector<long>({-10,\
    \ 4, 6, 1000, 10, 20}))) == (8.0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    long long\
    \ int n = l.size();\n    if (n < 2) return l[0];\n    long long int mid = n /\
    \ 2;\n    float midval = l[mid];\n    float leftval = l[mid];\n    float rightval\
    \ = l[n - 1];\n    for (long long int i = 0; i < mid; i++) {\n        if (l[i]\
    \ < leftval) leftval = l[i];\n        if (l[i] > rightval) rightval = l[i];\n\
    \    }\n    if (leftval == rightval) return midval;\n    if (leftval < rightval)\
    \ return leftval;\n    return rightval;\n}\nint main() {\n    auto candidate =\
    \ median;\n    assert(candidate((std::vector<long>({3, 1, 2, 4, 5}))) == (float(3)));\n\
    \    assert(candidate((std::vector<long>({-10, 4, 6, 1000, 10, 20}))) == (8.0));\n\
    \    assert(candidate((std::vector<long>({5}))) == (float(5)));\n    assert(candidate((std::vector<long>({6,\
    \ 5}))) == (5.5));\n    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2,\
    \ 7}))) == (float(7)));\n}\n"
  stdout: ''
  stderr: "tmppfw2_qw8: /tmp/tmppfw2_qw8.cpp:25: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    long long\
    \ mid = l.size() / 2;\n    if (l.size() % 2 == 0) {\n        return l[mid];\n\
    \    }\n    else {\n        return (l[mid] + l[mid-1]) / 2.0;\n    }\n}\nint main()\
    \ {\n    auto candidate = median;\n    assert(candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3)));\n    assert(candidate((std::vector<long>({-10,\
    \ 4, 6, 1000, 10, 20}))) == (8.0));\n    assert(candidate((std::vector<long>({5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({6, 5}))) == (5.5));\n\
    \    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2, 7}))) == (float(7)));\n\
    }\n"
  stdout: ''
  stderr: "tmpfec3282d: /tmp/tmpfec3282d.cpp:19: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    long long\
    \ int mid = l.size() / 2;\n    float midval = l[mid];\n    float leftval = l[mid-1];\n\
    \    float rightval = l[mid+1];\n    if (leftval > rightval) {\n        return\
    \ leftval;\n    }\n    return rightval;\n}\nint main() {\n    auto candidate =\
    \ median;\n    assert(candidate((std::vector<long>({3, 1, 2, 4, 5}))) == (float(3)));\n\
    \    assert(candidate((std::vector<long>({-10, 4, 6, 1000, 10, 20}))) == (8.0));\n\
    \    assert(candidate((std::vector<long>({5}))) == (float(5)));\n    assert(candidate((std::vector<long>({6,\
    \ 5}))) == (5.5));\n    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2,\
    \ 7}))) == (float(7)));\n}\n"
  stdout: ''
  stderr: "tmp6i0cm7ki: /tmp/tmp6i0cm7ki.cpp:20: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    long long\
    \ mid = l.size() / 2;\n    if (l.size() % 2 == 0) {\n        return l[mid];\n\
    \    }\n    else {\n        return (l[mid] + l[mid-1]) / 2.0;\n    }\n}\nint main()\
    \ {\n    auto candidate = median;\n    assert(candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3)));\n    assert(candidate((std::vector<long>({-10,\
    \ 4, 6, 1000, 10, 20}))) == (8.0));\n    assert(candidate((std::vector<long>({5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({6, 5}))) == (5.5));\n\
    \    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2, 7}))) == (float(7)));\n\
    }\n"
  stdout: ''
  stderr: "tmp1d2vrnp9: /tmp/tmp1d2vrnp9.cpp:19: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    long long\
    \ int n = l.size();\n    if (n < 2) return l[0];\n    long long int mid = n /\
    \ 2;\n    float midval = l[mid];\n    float leftval = l[mid-1];\n    float rightval\
    \ = l[mid+1];\n    if (midval < leftval) return midval;\n    if (midval > rightval)\
    \ return midval;\n    if (leftval < rightval) return leftval;\n    return rightval;\n\
    }\nint main() {\n    auto candidate = median;\n    assert(candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3)));\n    assert(candidate((std::vector<long>({-10,\
    \ 4, 6, 1000, 10, 20}))) == (8.0));\n    assert(candidate((std::vector<long>({5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({6, 5}))) == (5.5));\n\
    \    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2, 7}))) == (float(7)));\n\
    }\n"
  stdout: ''
  stderr: "tmpucbr672n: /tmp/tmpucbr672n.cpp:22: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    long long\
    \ n = l.size();\n    float mid = n / 2.0f;\n    float sum = 0;\n    for (long\
    \ i = 0; i < n; i++) {\n        sum += l[i];\n    }\n    if (n % 2 == 0) {\n \
    \       return sum / 2.0f;\n    } else {\n        return sum / 2.0f + mid;\n \
    \   }\n}\nint main() {\n    auto candidate = median;\n    assert(candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3)));\n    assert(candidate((std::vector<long>({-10,\
    \ 4, 6, 1000, 10, 20}))) == (8.0));\n    assert(candidate((std::vector<long>({5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({6, 5}))) == (5.5));\n\
    \    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2, 7}))) == (float(7)));\n\
    }\n"
  stdout: ''
  stderr: "tmpp1knkfmd: /tmp/tmpp1knkfmd.cpp:23: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    long long\
    \ int n = l.size();\n    long long int mid = n / 2;\n    float x = l[mid];\n \
    \   float y = l[n - 1];\n    if (x > y) {\n        return y;\n    } else {\n \
    \       return x;\n    }\n}\nint main() {\n    auto candidate = median;\n    assert(candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3)));\n    assert(candidate((std::vector<long>({-10,\
    \ 4, 6, 1000, 10, 20}))) == (8.0));\n    assert(candidate((std::vector<long>({5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({6, 5}))) == (5.5));\n\
    \    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2, 7}))) == (float(7)));\n\
    }\n"
  stdout: ''
  stderr: "tmpf_6k396c: /tmp/tmpf_6k396c.cpp:21: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    long long\
    \ int n = l.size();\n    if (n % 2 == 0)\n        return l[n/2];\n    else return\
    \ (float(l[n/2]) + float(l[n/2+1]))/2;\n}\nint main() {\n    auto candidate =\
    \ median;\n    assert(candidate((std::vector<long>({3, 1, 2, 4, 5}))) == (float(3)));\n\
    \    assert(candidate((std::vector<long>({-10, 4, 6, 1000, 10, 20}))) == (8.0));\n\
    \    assert(candidate((std::vector<long>({5}))) == (float(5)));\n    assert(candidate((std::vector<long>({6,\
    \ 5}))) == (5.5));\n    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2,\
    \ 7}))) == (float(7)));\n}\n"
  stdout: ''
  stderr: "tmp8wqdnnxt: /tmp/tmp8wqdnnxt.cpp:17: int main(): Assertion `candidate((std::vector<long>({-10,\
    \ 4, 6, 1000, 10, 20}))) == (8.0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    long long\
    \ int mid = l.size() / 2;\n    float midValue = l[mid];\n    float leftMedian\
    \ = median(l.begin(), l.begin() + mid);\n    float rightMedian = median(l.begin()\
    \ + mid + 1, l.end());\n    return midValue + ((leftMedian + rightMedian) / 2);\n\
    }\nint main() {\n    auto candidate = median;\n    assert(candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3)));\n    assert(candidate((std::vector<long>({-10,\
    \ 4, 6, 1000, 10, 20}))) == (8.0));\n    assert(candidate((std::vector<long>({5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({6, 5}))) == (5.5));\n\
    \    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2, 7}))) == (float(7)));\n\
    }\n"
  stdout: ''
  stderr: "/tmp/tmp67s542e6.cpp: In function \u2018float median(std::vector<long int>)\u2019\
    :\n/tmp/tmp67s542e6.cpp:11:38: error: could not convert \u2018l.std::vector<long\
    \ int>::begin()\u2019 from \u2018std::vector<long int>::iterator\u2019 {aka \u2018\
    __gnu_cxx::__normal_iterator<long int*, std::vector<long int> >\u2019} to \u2018\
    std::vector<long int>\u2019\n   11 |     float leftMedian = median(l.begin(),\
    \ l.begin() + mid);\n      |                               ~~~~~~~^~\n      |\
    \                                      |\n      |                            \
    \          std::vector<long int>::iterator {aka __gnu_cxx::__normal_iterator<long\
    \ int*, std::vector<long int> >}\n/tmp/tmp67s542e6.cpp:12:48: error: could not\
    \ convert \u2018l.std::vector<long int>::begin().__gnu_cxx::__normal_iterator<long\
    \ int*, std::vector<long int> >::operator+(((__gnu_cxx::__normal_iterator<long\
    \ int*, std::vector<long int> >::difference_type)mid)).__gnu_cxx::__normal_iterator<long\
    \ int*, std::vector<long int> >::operator+(1)\u2019 from \u2018__gnu_cxx::__normal_iterator<long\
    \ int*, std::vector<long int> >\u2019 to \u2018std::vector<long int>\u2019\n \
    \  12 |     float rightMedian = median(l.begin() + mid + 1, l.end());\n      |\
    \                                ~~~~~~~~~~~~~~~~^~~\n      |                \
    \                                |\n      |                                  \
    \              __gnu_cxx::__normal_iterator<long int*, std::vector<long int> >\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    long long\
    \ int mid = l.size() / 2;\n    long long int left = l[mid];\n    long long int\
    \ right = l[mid+1];\n    if (left > right) {\n        return left;\n    }\n  \
    \  return right;\n}\nint main() {\n    auto candidate = median;\n    assert(candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3)));\n    assert(candidate((std::vector<long>({-10,\
    \ 4, 6, 1000, 10, 20}))) == (8.0));\n    assert(candidate((std::vector<long>({5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({6, 5}))) == (5.5));\n\
    \    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2, 7}))) == (float(7)));\n\
    }\n"
  stdout: ''
  stderr: "tmpu9jwhz30: /tmp/tmpu9jwhz30.cpp:19: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    long long\
    \ n = l.size();\n    if (n < 2) return 0;\n    long long mid = n / 2;\n    long\
    \ long l1 = mid;\n    long long l2 = n - mid;\n    float l3 = l[mid];\n    float\
    \ l4 = l[n - 1];\n    if (l2 < l1) return l2;\n    if (l3 < l1) return l3;\n \
    \   if (l4 < l1) return l4;\n    if (l2 < l3) return l2;\n    if (l3 < l4) return\
    \ l3;\n    if (l4 < l3) return l4;\n    return l2;\n}\nint main() {\n    auto\
    \ candidate = median;\n    assert(candidate((std::vector<long>({3, 1, 2, 4, 5})))\
    \ == (float(3)));\n    assert(candidate((std::vector<long>({-10, 4, 6, 1000, 10,\
    \ 20}))) == (8.0));\n    assert(candidate((std::vector<long>({5}))) == (float(5)));\n\
    \    assert(candidate((std::vector<long>({6, 5}))) == (5.5));\n    assert(candidate((std::vector<long>({8,\
    \ 1, 3, 9, 9, 2, 7}))) == (float(7)));\n}\n"
  stdout: ''
  stderr: "tmp3puvpvhh: /tmp/tmp3puvpvhh.cpp:26: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    long long\
    \ int n = l.size();\n    if (n % 2 == 0) {\n        long long int mid = n / 2;\n\
    \        float a = l[mid];\n        float b = l[mid-1];\n        return ((a +\
    \ b) / 2);\n    } else {\n        long long int mid = n / 2;\n        float a\
    \ = l[mid];\n        float b = l[mid+1];\n        return ((a + b) / 2);\n    }\n\
    }\nint main() {\n    auto candidate = median;\n    assert(candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3)));\n    assert(candidate((std::vector<long>({-10,\
    \ 4, 6, 1000, 10, 20}))) == (8.0));\n    assert(candidate((std::vector<long>({5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({6, 5}))) == (5.5));\n\
    \    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2, 7}))) == (float(7)));\n\
    }\n"
  stdout: ''
  stderr: "tmp506erffr: /tmp/tmp506erffr.cpp:25: int main(): Assertion `candidate((std::vector<long>({-10,\
    \ 4, 6, 1000, 10, 20}))) == (8.0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    long long\
    \ int mid = l.size() / 2;\n    long long int left = l[mid];\n    long long int\
    \ right = l[mid+1];\n    if (left > right) {\n        return left;\n    }\n  \
    \  return right;\n}\nint main() {\n    auto candidate = median;\n    assert(candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3)));\n    assert(candidate((std::vector<long>({-10,\
    \ 4, 6, 1000, 10, 20}))) == (8.0));\n    assert(candidate((std::vector<long>({5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({6, 5}))) == (5.5));\n\
    \    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2, 7}))) == (float(7)));\n\
    }\n"
  stdout: ''
  stderr: "tmpk8jqphyz: /tmp/tmpk8jqphyz.cpp:19: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    long long\
    \ ll = l.size();\n    if (ll % 2 == 0) {\n        return l[ll / 2 - 1] + l[ll\
    \ / 2];\n    }\n    return l[ll / 2];\n}\nint main() {\n    auto candidate = median;\n\
    \    assert(candidate((std::vector<long>({3, 1, 2, 4, 5}))) == (float(3)));\n\
    \    assert(candidate((std::vector<long>({-10, 4, 6, 1000, 10, 20}))) == (8.0));\n\
    \    assert(candidate((std::vector<long>({5}))) == (float(5)));\n    assert(candidate((std::vector<long>({6,\
    \ 5}))) == (5.5));\n    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2,\
    \ 7}))) == (float(7)));\n}\n"
  stdout: ''
  stderr: "tmpr22xqm6g: /tmp/tmpr22xqm6g.cpp:17: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    long long\
    \ int mid = l.size() / 2;\n    long long int left = l[mid];\n    long long int\
    \ right = l[mid+1];\n    if (left > right) {\n        return left;\n    }\n  \
    \  return right;\n}\nint main() {\n    auto candidate = median;\n    assert(candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3)));\n    assert(candidate((std::vector<long>({-10,\
    \ 4, 6, 1000, 10, 20}))) == (8.0));\n    assert(candidate((std::vector<long>({5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({6, 5}))) == (5.5));\n\
    \    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2, 7}))) == (float(7)));\n\
    }\n"
  stdout: ''
  stderr: "tmp4otfoesy: /tmp/tmp4otfoesy.cpp:19: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    long mid\
    \ = l.size() / 2;\n    if (l.size() % 2 == 0) {\n        return l[mid];\n    }\
    \ else {\n        return (l[mid] + l[mid]) / 2;\n    }\n}\nint main() {\n    auto\
    \ candidate = median;\n    assert(candidate((std::vector<long>({3, 1, 2, 4, 5})))\
    \ == (float(3)));\n    assert(candidate((std::vector<long>({-10, 4, 6, 1000, 10,\
    \ 20}))) == (8.0));\n    assert(candidate((std::vector<long>({5}))) == (float(5)));\n\
    \    assert(candidate((std::vector<long>({6, 5}))) == (5.5));\n    assert(candidate((std::vector<long>({8,\
    \ 1, 3, 9, 9, 2, 7}))) == (float(7)));\n}\n"
  stdout: ''
  stderr: "tmpn8sei6ue: /tmp/tmpn8sei6ue.cpp:18: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    long long\
    \ n = l.size();\n    if (n % 2 == 0) {\n        long long mid = n / 2;\n     \
    \   long long left = l[mid];\n        long long right = l[n - 1];\n        if\
    \ (left > right) {\n            return left;\n        } else {\n            return\
    \ right;\n        }\n    } else {\n        long long mid = n / 2;\n        long\
    \ long left = l[mid];\n        long long right = l[n - 1];\n        if (left <\
    \ right) {\n            return left;\n        } else {\n            return right;\n\
    \        }\n    }\n}\nint main() {\n    auto candidate = median;\n    assert(candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3)));\n    assert(candidate((std::vector<long>({-10,\
    \ 4, 6, 1000, 10, 20}))) == (8.0));\n    assert(candidate((std::vector<long>({5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({6, 5}))) == (5.5));\n\
    \    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2, 7}))) == (float(7)));\n\
    }\n"
  stdout: ''
  stderr: "tmpntsbc21f: /tmp/tmpntsbc21f.cpp:32: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    long long\
    \ int n = l.size();\n    long long int m = n / 2;\n    if (n % 2 == 0) {\n   \
    \     return l[m];\n    } else {\n        return (l[m] + l[n - 1]) / 2;\n    }\n\
    }\nint main() {\n    auto candidate = median;\n    assert(candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3)));\n    assert(candidate((std::vector<long>({-10,\
    \ 4, 6, 1000, 10, 20}))) == (8.0));\n    assert(candidate((std::vector<long>({5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({6, 5}))) == (5.5));\n\
    \    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2, 7}))) == (float(7)));\n\
    }\n"
  stdout: ''
  stderr: "tmpc6zan2kt: /tmp/tmpc6zan2kt.cpp:20: int main(): Assertion `candidate((std::vector<long>({-10,\
    \ 4, 6, 1000, 10, 20}))) == (8.0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    long long\
    \ int mid = l.size() / 2;\n    float median = l[mid];\n    for (long long int\
    \ i = mid; i < l.size(); i++) {\n        if (l[i] < median) {\n            median\
    \ = l[i];\n        }\n    }\n    return median;\n}\nint main() {\n    auto candidate\
    \ = median;\n    assert(candidate((std::vector<long>({3, 1, 2, 4, 5}))) == (float(3)));\n\
    \    assert(candidate((std::vector<long>({-10, 4, 6, 1000, 10, 20}))) == (8.0));\n\
    \    assert(candidate((std::vector<long>({5}))) == (float(5)));\n    assert(candidate((std::vector<long>({6,\
    \ 5}))) == (5.5));\n    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2,\
    \ 7}))) == (float(7)));\n}\n"
  stdout: ''
  stderr: "tmp9a0q0vzb: /tmp/tmp9a0q0vzb.cpp:20: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    long long\
    \ n = l.size();\n    if (n <= 1) return l[0];\n    float m = l[n / 2];\n    for\
    \ (long long i = 2; i < n; i++) {\n        if (l[i] < m) m = l[i];\n    }\n  \
    \  return m;\n}\nint main() {\n    auto candidate = median;\n    assert(candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3)));\n    assert(candidate((std::vector<long>({-10,\
    \ 4, 6, 1000, 10, 20}))) == (8.0));\n    assert(candidate((std::vector<long>({5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({6, 5}))) == (5.5));\n\
    \    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2, 7}))) == (float(7)));\n\
    }\n"
  stdout: ''
  stderr: "tmpmqjgneuq: /tmp/tmpmqjgneuq.cpp:19: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    long long\
    \ mid = l.size() / 2;\n    if (l.size() % 2 == 1) {\n        return l[mid];\n\
    \    }\n    float leftMedian = median(l.begin(), l.begin() + mid);\n    float\
    \ rightMedian = median(l.begin() + mid, l.end());\n    return 0.5 * (leftMedian\
    \ + rightMedian);\n}\nint main() {\n    auto candidate = median;\n    assert(candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3)));\n    assert(candidate((std::vector<long>({-10,\
    \ 4, 6, 1000, 10, 20}))) == (8.0));\n    assert(candidate((std::vector<long>({5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({6, 5}))) == (5.5));\n\
    \    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2, 7}))) == (float(7)));\n\
    }\n"
  stdout: ''
  stderr: "/tmp/tmp2g8c79rw.cpp: In function \u2018float median(std::vector<long int>)\u2019\
    :\n/tmp/tmp2g8c79rw.cpp:13:38: error: could not convert \u2018l.std::vector<long\
    \ int>::begin()\u2019 from \u2018std::vector<long int>::iterator\u2019 {aka \u2018\
    __gnu_cxx::__normal_iterator<long int*, std::vector<long int> >\u2019} to \u2018\
    std::vector<long int>\u2019\n   13 |     float leftMedian = median(l.begin(),\
    \ l.begin() + mid);\n      |                               ~~~~~~~^~\n      |\
    \                                      |\n      |                            \
    \          std::vector<long int>::iterator {aka __gnu_cxx::__normal_iterator<long\
    \ int*, std::vector<long int> >}\n/tmp/tmp2g8c79rw.cpp:14:42: error: could not\
    \ convert \u2018l.std::vector<long int>::begin().__gnu_cxx::__normal_iterator<long\
    \ int*, std::vector<long int> >::operator+(((__gnu_cxx::__normal_iterator<long\
    \ int*, std::vector<long int> >::difference_type)mid))\u2019 from \u2018__gnu_cxx::__normal_iterator<long\
    \ int*, std::vector<long int> >\u2019 to \u2018std::vector<long int>\u2019\n \
    \  14 |     float rightMedian = median(l.begin() + mid, l.end());\n      |   \
    \                             ~~~~~~~~~~^~~~~\n      |                       \
    \                   |\n      |                                          __gnu_cxx::__normal_iterator<long\
    \ int*, std::vector<long int> >\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    long long\
    \ int mid = l.size() / 2;\n    float midval = l[mid];\n    float leftval = l[mid-1];\n\
    \    float rightval = l[mid+1];\n    if (leftval > rightval)\n        return midval;\n\
    \    else\n        return rightval;\n}\nint main() {\n    auto candidate = median;\n\
    \    assert(candidate((std::vector<long>({3, 1, 2, 4, 5}))) == (float(3)));\n\
    \    assert(candidate((std::vector<long>({-10, 4, 6, 1000, 10, 20}))) == (8.0));\n\
    \    assert(candidate((std::vector<long>({5}))) == (float(5)));\n    assert(candidate((std::vector<long>({6,\
    \ 5}))) == (5.5));\n    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2,\
    \ 7}))) == (float(7)));\n}\n"
  stdout: ''
  stderr: "tmp3mzbj9oe: /tmp/tmp3mzbj9oe.cpp:20: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    long long\
    \ int n = l.size();\n    if (n <= 1) return l[0];\n    long long int mid = n /\
    \ 2;\n    float a = l[mid];\n    float b = l[n - 1];\n    if (a > b) return median(l);\n\
    \    return median(l, mid + 1, n - 1);\n}\nint main() {\n    auto candidate =\
    \ median;\n    assert(candidate((std::vector<long>({3, 1, 2, 4, 5}))) == (float(3)));\n\
    \    assert(candidate((std::vector<long>({-10, 4, 6, 1000, 10, 20}))) == (8.0));\n\
    \    assert(candidate((std::vector<long>({5}))) == (float(5)));\n    assert(candidate((std::vector<long>({6,\
    \ 5}))) == (5.5));\n    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2,\
    \ 7}))) == (float(7)));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpf5nhg7qx.cpp: In function \u2018float median(std::vector<long int>)\u2019\
    :\n/tmp/tmpf5nhg7qx.cpp:15:36: error: too many arguments to function \u2018float\
    \ median(std::vector<long int>)\u2019\n   15 |     return median(l, mid + 1, n\
    \ - 1);\n      |                                    ^\n/tmp/tmpf5nhg7qx.cpp:8:7:\
    \ note: declared here\n    8 | float median(std::vector<long> l) {\n      |  \
    \     ^~~~~~\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    long long\
    \ int n = l.size();\n    long long int mid = n / 2;\n    long long int left =\
    \ 0, right = mid;\n    float midVal = l[mid];\n    while(left < right) {\n   \
    \     long long int midValLeft = l[left];\n        long long int midValRight =\
    \ l[right];\n        if(midValLeft < midValRight) {\n            left++;\n   \
    \     } else {\n            right--;\n        }\n    }\n    return midVal;\n}\n\
    int main() {\n    auto candidate = median;\n    assert(candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3)));\n    assert(candidate((std::vector<long>({-10,\
    \ 4, 6, 1000, 10, 20}))) == (8.0));\n    assert(candidate((std::vector<long>({5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({6, 5}))) == (5.5));\n\
    \    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2, 7}))) == (float(7)));\n\
    }\n"
  stdout: ''
  stderr: "tmp2vba6xqj: /tmp/tmp2vba6xqj.cpp:26: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    long long\
    \ int mid = l.size() / 2;\n    float midVal = l[mid];\n    float leftMedian =\
    \ median(l.begin(), l.begin() + mid);\n    float rightMedian = median(l.begin()\
    \ + mid + 1,\n                               l.end());\n    return midVal + ((leftMedian\
    \ + rightMedian) / 2);\n}\nint main() {\n    auto candidate = median;\n    assert(candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3)));\n    assert(candidate((std::vector<long>({-10,\
    \ 4, 6, 1000, 10, 20}))) == (8.0));\n    assert(candidate((std::vector<long>({5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({6, 5}))) == (5.5));\n\
    \    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2, 7}))) == (float(7)));\n\
    }\n"
  stdout: ''
  stderr: "/tmp/tmpqp3y7zfz.cpp: In function \u2018float median(std::vector<long int>)\u2019\
    :\n/tmp/tmpqp3y7zfz.cpp:11:38: error: could not convert \u2018l.std::vector<long\
    \ int>::begin()\u2019 from \u2018std::vector<long int>::iterator\u2019 {aka \u2018\
    __gnu_cxx::__normal_iterator<long int*, std::vector<long int> >\u2019} to \u2018\
    std::vector<long int>\u2019\n   11 |     float leftMedian = median(l.begin(),\
    \ l.begin() + mid);\n      |                               ~~~~~~~^~\n      |\
    \                                      |\n      |                            \
    \          std::vector<long int>::iterator {aka __gnu_cxx::__normal_iterator<long\
    \ int*, std::vector<long int> >}\n/tmp/tmpqp3y7zfz.cpp:12:48: error: could not\
    \ convert \u2018l.std::vector<long int>::begin().__gnu_cxx::__normal_iterator<long\
    \ int*, std::vector<long int> >::operator+(((__gnu_cxx::__normal_iterator<long\
    \ int*, std::vector<long int> >::difference_type)mid)).__gnu_cxx::__normal_iterator<long\
    \ int*, std::vector<long int> >::operator+(1)\u2019 from \u2018__gnu_cxx::__normal_iterator<long\
    \ int*, std::vector<long int> >\u2019 to \u2018std::vector<long int>\u2019\n \
    \  12 |     float rightMedian = median(l.begin() + mid + 1,\n      |         \
    \                       ~~~~~~~~~~~~~~~~^~~\n      |                         \
    \                       |\n      |                                           \
    \     __gnu_cxx::__normal_iterator<long int*, std::vector<long int> >\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    long long\
    \ int mid = l.size() / 2;\n    if (l.size() % 2 == 0) {\n        return l[mid];\n\
    \    } else {\n        return (l[mid] + l[mid-1]) / 2.0;\n    }\n}\nint main()\
    \ {\n    auto candidate = median;\n    assert(candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3)));\n    assert(candidate((std::vector<long>({-10,\
    \ 4, 6, 1000, 10, 20}))) == (8.0));\n    assert(candidate((std::vector<long>({5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({6, 5}))) == (5.5));\n\
    \    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2, 7}))) == (float(7)));\n\
    }\n"
  stdout: ''
  stderr: "tmpoguu268e: /tmp/tmpoguu268e.cpp:18: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    long long\
    \ int mid = l.size() / 2;\n    float median = l[mid];\n    if (l.size() % 2 ==\
    \ 0) {\n        median = (l[mid] + l[mid-1]) / 2;\n    }\n    return median;\n\
    }\nint main() {\n    auto candidate = median;\n    assert(candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3)));\n    assert(candidate((std::vector<long>({-10,\
    \ 4, 6, 1000, 10, 20}))) == (8.0));\n    assert(candidate((std::vector<long>({5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({6, 5}))) == (5.5));\n\
    \    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2, 7}))) == (float(7)));\n\
    }\n"
  stdout: ''
  stderr: "tmpbt4mz5uo: /tmp/tmpbt4mz5uo.cpp:18: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    long long\
    \ mid = l.size() / 2;\n    if (l.size() % 2 == 0) {\n        return l[mid];\n\
    \    }\n    else {\n        return (l[mid] + l[mid-1]) / 2.0;\n    }\n}\nint main()\
    \ {\n    auto candidate = median;\n    assert(candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3)));\n    assert(candidate((std::vector<long>({-10,\
    \ 4, 6, 1000, 10, 20}))) == (8.0));\n    assert(candidate((std::vector<long>({5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({6, 5}))) == (5.5));\n\
    \    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2, 7}))) == (float(7)));\n\
    }\n"
  stdout: ''
  stderr: "tmp94wvq957: /tmp/tmp94wvq957.cpp:19: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    long long\
    \ n = l.size();\n    if (n <= 1) return l[0];\n    float mid = l[n / 2];\n   \
    \ float left = 0;\n    float right = n;\n    while (left < right) {\n        mid\
    \ = (left + right) / 2;\n        if (l[mid] <= mid) left = mid + 1;\n        else\
    \ right = mid - 1;\n    }\n    return mid;\n}\nint main() {\n    auto candidate\
    \ = median;\n    assert(candidate((std::vector<long>({3, 1, 2, 4, 5}))) == (float(3)));\n\
    \    assert(candidate((std::vector<long>({-10, 4, 6, 1000, 10, 20}))) == (8.0));\n\
    \    assert(candidate((std::vector<long>({5}))) == (float(5)));\n    assert(candidate((std::vector<long>({6,\
    \ 5}))) == (5.5));\n    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2,\
    \ 7}))) == (float(7)));\n}\n"
  stdout: ''
  stderr: "tmpcn1lt4ar: /tmp/tmpcn1lt4ar.cpp:23: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    long long\
    \ int mid = l.size() / 2;\n    if (l.size() % 2 == 1) {\n        return l[mid];\n\
    \    }\n    float a = l[mid];\n    float b = l[mid+1];\n    return (a+b)/2.0;\n\
    }\nint main() {\n    auto candidate = median;\n    assert(candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3)));\n    assert(candidate((std::vector<long>({-10,\
    \ 4, 6, 1000, 10, 20}))) == (8.0));\n    assert(candidate((std::vector<long>({5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({6, 5}))) == (5.5));\n\
    \    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2, 7}))) == (float(7)));\n\
    }\n"
  stdout: ''
  stderr: "tmpvaqht7r5: /tmp/tmpvaqht7r5.cpp:19: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    long long\
    \ mid = l.size() / 2;\n    if (l.size() % 2 == 1) {\n        return l[mid];\n\
    \    } else {\n        return (l[mid] + l[mid]) / 2;\n    }\n}\nint main() {\n\
    \    auto candidate = median;\n    assert(candidate((std::vector<long>({3, 1,\
    \ 2, 4, 5}))) == (float(3)));\n    assert(candidate((std::vector<long>({-10, 4,\
    \ 6, 1000, 10, 20}))) == (8.0));\n    assert(candidate((std::vector<long>({5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({6, 5}))) == (5.5));\n\
    \    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2, 7}))) == (float(7)));\n\
    }\n"
  stdout: ''
  stderr: "tmpa7wtppcg: /tmp/tmpa7wtppcg.cpp:18: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    long long\
    \ int n = l.size();\n    if (n <= 1) return l[0];\n    long long int mid = n /\
    \ 2;\n    float leftMedian = median(l.subvec(0, mid));\n    float rightMedian\
    \ = median(l.subvec(mid, n - 1));\n    return 0.5 * (leftMedian + rightMedian);\n\
    }\nint main() {\n    auto candidate = median;\n    assert(candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3)));\n    assert(candidate((std::vector<long>({-10,\
    \ 4, 6, 1000, 10, 20}))) == (8.0));\n    assert(candidate((std::vector<long>({5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({6, 5}))) == (5.5));\n\
    \    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2, 7}))) == (float(7)));\n\
    }\n"
  stdout: ''
  stderr: "/tmp/tmp_ydbdiz2.cpp: In function \u2018float median(std::vector<long int>)\u2019\
    :\n/tmp/tmp_ydbdiz2.cpp:12:33: error: \u2018class std::vector<long int>\u2019\
    \ has no member named \u2018subvec\u2019\n   12 |     float leftMedian = median(l.subvec(0,\
    \ mid));\n      |                                 ^~~~~~\n/tmp/tmp_ydbdiz2.cpp:13:34:\
    \ error: \u2018class std::vector<long int>\u2019 has no member named \u2018subvec\u2019\
    \n   13 |     float rightMedian = median(l.subvec(mid, n - 1));\n      |     \
    \                             ^~~~~~\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    long long\
    \ int n = l.size();\n    if (n <= 1) return l[0];\n    long long int mid = n /\
    \ 2;\n    float leftMedian = median(l.sublist(0, mid));\n    float rightMedian\
    \ = median(l.sublist(mid, n - 1));\n    return 0.5 * (leftMedian + rightMedian);\n\
    }\nint main() {\n    auto candidate = median;\n    assert(candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3)));\n    assert(candidate((std::vector<long>({-10,\
    \ 4, 6, 1000, 10, 20}))) == (8.0));\n    assert(candidate((std::vector<long>({5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({6, 5}))) == (5.5));\n\
    \    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2, 7}))) == (float(7)));\n\
    }\n"
  stdout: ''
  stderr: "/tmp/tmpzmxlln3p.cpp: In function \u2018float median(std::vector<long int>)\u2019\
    :\n/tmp/tmpzmxlln3p.cpp:12:33: error: \u2018class std::vector<long int>\u2019\
    \ has no member named \u2018sublist\u2019\n   12 |     float leftMedian = median(l.sublist(0,\
    \ mid));\n      |                                 ^~~~~~~\n/tmp/tmpzmxlln3p.cpp:13:34:\
    \ error: \u2018class std::vector<long int>\u2019 has no member named \u2018sublist\u2019\
    \n   13 |     float rightMedian = median(l.sublist(mid, n - 1));\n      |    \
    \                              ^~~~~~~\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    long long\
    \ mid = l.size() / 2;\n    if (l.size() % 2 == 0) {\n        return l[mid];\n\
    \    } else {\n        return (l[mid] + l[mid-1]) / 2.0;\n    }\n}\nint main()\
    \ {\n    auto candidate = median;\n    assert(candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3)));\n    assert(candidate((std::vector<long>({-10,\
    \ 4, 6, 1000, 10, 20}))) == (8.0));\n    assert(candidate((std::vector<long>({5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({6, 5}))) == (5.5));\n\
    \    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2, 7}))) == (float(7)));\n\
    }\n"
  stdout: ''
  stderr: "tmp7va6kzx2: /tmp/tmp7va6kzx2.cpp:18: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    long long\
    \ mid = l.size() / 2;\n    long long left = l[mid];\n    long long right = l[mid+1];\n\
    \    if (left < right) {\n        return left;\n    } else {\n        return right;\n\
    \    }\n}\nint main() {\n    auto candidate = median;\n    assert(candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3)));\n    assert(candidate((std::vector<long>({-10,\
    \ 4, 6, 1000, 10, 20}))) == (8.0));\n    assert(candidate((std::vector<long>({5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({6, 5}))) == (5.5));\n\
    \    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2, 7}))) == (float(7)));\n\
    }\n"
  stdout: ''
  stderr: "tmplp6mc6is: /tmp/tmplp6mc6is.cpp:20: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    long long\
    \ ll = l.size();\n    if (ll % 2 == 0) {\n        return l[ll / 2 - 1] + (l[ll\
    \ / 2] + l[ll / 2 - 1]) / 2.0;\n    } else {\n        return l[ll / 2];\n    }\n\
    }\nint main() {\n    auto candidate = median;\n    assert(candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3)));\n    assert(candidate((std::vector<long>({-10,\
    \ 4, 6, 1000, 10, 20}))) == (8.0));\n    assert(candidate((std::vector<long>({5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({6, 5}))) == (5.5));\n\
    \    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2, 7}))) == (float(7)));\n\
    }\n"
  stdout: ''
  stderr: "tmpd42utzmf: /tmp/tmpd42utzmf.cpp:18: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    long long\
    \ mid = l.size() / 2;\n    float median = l[mid];\n    long long left = 0;\n \
    \   long long right = mid;\n    while (left < right) {\n        long long mid\
    \ = (left + right) / 2;\n        if (l[mid] < median) {\n            left = mid\
    \ + 1;\n        } else {\n            right = mid;\n        }\n    }\n    return\
    \ median;\n}\nint main() {\n    auto candidate = median;\n    assert(candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3)));\n    assert(candidate((std::vector<long>({-10,\
    \ 4, 6, 1000, 10, 20}))) == (8.0));\n    assert(candidate((std::vector<long>({5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({6, 5}))) == (5.5));\n\
    \    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2, 7}))) == (float(7)));\n\
    }\n"
  stdout: ''
  stderr: "tmpl80z4zes: /tmp/tmpl80z4zes.cpp:25: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    long long\
    \ mid = l.size() / 2;\n    if (l.size() % 2 == 1) {\n        return l[mid];\n\
    \    }\n    float leftMedian = median(l.begin() + mid, l.begin() + mid + 1);\n\
    \    float rightMedian = median(l.begin() + mid + 1, l.end());\n    return 0.5\
    \ * (leftMedian + rightMedian);\n}\nint main() {\n    auto candidate = median;\n\
    \    assert(candidate((std::vector<long>({3, 1, 2, 4, 5}))) == (float(3)));\n\
    \    assert(candidate((std::vector<long>({-10, 4, 6, 1000, 10, 20}))) == (8.0));\n\
    \    assert(candidate((std::vector<long>({5}))) == (float(5)));\n    assert(candidate((std::vector<long>({6,\
    \ 5}))) == (5.5));\n    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2,\
    \ 7}))) == (float(7)));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp69uuaeut.cpp: In function \u2018float median(std::vector<long int>)\u2019\
    :\n/tmp/tmp69uuaeut.cpp:13:41: error: could not convert \u2018l.std::vector<long\
    \ int>::begin().__gnu_cxx::__normal_iterator<long int*, std::vector<long int>\
    \ >::operator+(((__gnu_cxx::__normal_iterator<long int*, std::vector<long int>\
    \ >::difference_type)mid))\u2019 from \u2018__gnu_cxx::__normal_iterator<long\
    \ int*, std::vector<long int> >\u2019 to \u2018std::vector<long int>\u2019\n \
    \  13 |     float leftMedian = median(l.begin() + mid, l.begin() + mid + 1);\n\
    \      |                               ~~~~~~~~~~^~~~~\n      |              \
    \                           |\n      |                                       \
    \  __gnu_cxx::__normal_iterator<long int*, std::vector<long int> >\n/tmp/tmp69uuaeut.cpp:14:48:\
    \ error: could not convert \u2018l.std::vector<long int>::begin().__gnu_cxx::__normal_iterator<long\
    \ int*, std::vector<long int> >::operator+(((__gnu_cxx::__normal_iterator<long\
    \ int*, std::vector<long int> >::difference_type)mid)).__gnu_cxx::__normal_iterator<long\
    \ int*, std::vector<long int> >::operator+(1)\u2019 from \u2018__gnu_cxx::__normal_iterator<long\
    \ int*, std::vector<long int> >\u2019 to \u2018std::vector<long int>\u2019\n \
    \  14 |     float rightMedian = median(l.begin() + mid + 1, l.end());\n      |\
    \                                ~~~~~~~~~~~~~~~~^~~\n      |                \
    \                                |\n      |                                  \
    \              __gnu_cxx::__normal_iterator<long int*, std::vector<long int> >\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    long long\
    \ int n = l.size();\n    long long int m = n / 2;\n    if (n % 2 == 0) {\n   \
    \     return l[m];\n    } else {\n        return (l[m] + l[n - 1]) / 2;\n    }\n\
    }\nint main() {\n    auto candidate = median;\n    assert(candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3)));\n    assert(candidate((std::vector<long>({-10,\
    \ 4, 6, 1000, 10, 20}))) == (8.0));\n    assert(candidate((std::vector<long>({5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({6, 5}))) == (5.5));\n\
    \    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2, 7}))) == (float(7)));\n\
    }\n"
  stdout: ''
  stderr: "tmp5_uglb_w: /tmp/tmp5_uglb_w.cpp:20: int main(): Assertion `candidate((std::vector<long>({-10,\
    \ 4, 6, 1000, 10, 20}))) == (8.0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    long long\
    \ mid = l.size() / 2;\n    if (l.size() % 2 == 0) {\n        return l[mid];\n\
    \    } else {\n        return (l[mid] + l[mid]) / 2;\n    }\n}\nint main() {\n\
    \    auto candidate = median;\n    assert(candidate((std::vector<long>({3, 1,\
    \ 2, 4, 5}))) == (float(3)));\n    assert(candidate((std::vector<long>({-10, 4,\
    \ 6, 1000, 10, 20}))) == (8.0));\n    assert(candidate((std::vector<long>({5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({6, 5}))) == (5.5));\n\
    \    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2, 7}))) == (float(7)));\n\
    }\n"
  stdout: ''
  stderr: "tmprzlp8wwo: /tmp/tmprzlp8wwo.cpp:18: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    long long\
    \ int mid = l.size() / 2;\n    long long int l1 = l[mid];\n    long long int l2\
    \ = l[mid+1];\n    if (l1 < l2) {\n        return l1;\n    }\n    return l2;\n\
    }\nint main() {\n    auto candidate = median;\n    assert(candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3)));\n    assert(candidate((std::vector<long>({-10,\
    \ 4, 6, 1000, 10, 20}))) == (8.0));\n    assert(candidate((std::vector<long>({5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({6, 5}))) == (5.5));\n\
    \    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2, 7}))) == (float(7)));\n\
    }\n"
  stdout: ''
  stderr: "tmpw1r8dt72: /tmp/tmpw1r8dt72.cpp:19: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    long long\
    \ int n = l.size();\n    if (n % 2 == 0) {\n        return l[n / 2];\n    } else\
    \ {\n        return (l[n / 2] + l[n / 2 - 1]) / 2;\n    }\n}\nint main() {\n \
    \   auto candidate = median;\n    assert(candidate((std::vector<long>({3, 1, 2,\
    \ 4, 5}))) == (float(3)));\n    assert(candidate((std::vector<long>({-10, 4, 6,\
    \ 1000, 10, 20}))) == (8.0));\n    assert(candidate((std::vector<long>({5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({6, 5}))) == (5.5));\n\
    \    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2, 7}))) == (float(7)));\n\
    }\n"
  stdout: ''
  stderr: "tmplv9jafh1: /tmp/tmplv9jafh1.cpp:18: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    long long\
    \ int n = l.size();\n    long long int mid = n / 2;\n    float midval = l[mid];\n\
    \    float leftval = l[mid-1];\n    float rightval = l[mid+1];\n    if (n == 0\
    \ || midval < leftval || midval > rightval) {\n        return midval;\n    }\n\
    \    if (midval < leftval) {\n        return median(l);\n    }\n    return median(l,\
    \ mid+1, n);\n}\nint main() {\n    auto candidate = median;\n    assert(candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3)));\n    assert(candidate((std::vector<long>({-10,\
    \ 4, 6, 1000, 10, 20}))) == (8.0));\n    assert(candidate((std::vector<long>({5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({6, 5}))) == (5.5));\n\
    \    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2, 7}))) == (float(7)));\n\
    }\n"
  stdout: ''
  stderr: "/tmp/tmpzeoq_3q3.cpp: In function \u2018float median(std::vector<long int>)\u2019\
    :\n/tmp/tmpzeoq_3q3.cpp:20:30: error: too many arguments to function \u2018float\
    \ median(std::vector<long int>)\u2019\n   20 |     return median(l, mid+1, n);\n\
    \      |                              ^\n/tmp/tmpzeoq_3q3.cpp:8:7: note: declared\
    \ here\n    8 | float median(std::vector<long> l) {\n      |       ^~~~~~\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    long long\
    \ ll = l.size();\n    if (ll % 2 == 0) {\n        return l[ll / 2 - 1] + (l[ll\
    \ / 2] + l[ll / 2 - 1]) / 2;\n    } else {\n        return l[ll / 2];\n    }\n\
    }\nint main() {\n    auto candidate = median;\n    assert(candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3)));\n    assert(candidate((std::vector<long>({-10,\
    \ 4, 6, 1000, 10, 20}))) == (8.0));\n    assert(candidate((std::vector<long>({5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({6, 5}))) == (5.5));\n\
    \    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2, 7}))) == (float(7)));\n\
    }\n"
  stdout: ''
  stderr: "tmp7h_c_0zd: /tmp/tmp7h_c_0zd.cpp:18: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    long long\
    \ int mid = l.size() / 2;\n    float midval = l[mid];\n    float leftval = l[mid-1];\n\
    \    float rightval = l[mid+1];\n    if (leftval > rightval) {\n        return\
    \ leftval;\n    }\n    return rightval;\n}\nint main() {\n    auto candidate =\
    \ median;\n    assert(candidate((std::vector<long>({3, 1, 2, 4, 5}))) == (float(3)));\n\
    \    assert(candidate((std::vector<long>({-10, 4, 6, 1000, 10, 20}))) == (8.0));\n\
    \    assert(candidate((std::vector<long>({5}))) == (float(5)));\n    assert(candidate((std::vector<long>({6,\
    \ 5}))) == (5.5));\n    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2,\
    \ 7}))) == (float(7)));\n}\n"
  stdout: ''
  stderr: "tmpx5wovasz: /tmp/tmpx5wovasz.cpp:20: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    long long\
    \ int mid = l.size() / 2;\n    float median = l[mid];\n    for (long long int\
    \ i = mid; i < l.size(); i++) {\n        if (l[i] < median) {\n            median\
    \ = l[i];\n        }\n    }\n    return median;\n}\nint main() {\n    auto candidate\
    \ = median;\n    assert(candidate((std::vector<long>({3, 1, 2, 4, 5}))) == (float(3)));\n\
    \    assert(candidate((std::vector<long>({-10, 4, 6, 1000, 10, 20}))) == (8.0));\n\
    \    assert(candidate((std::vector<long>({5}))) == (float(5)));\n    assert(candidate((std::vector<long>({6,\
    \ 5}))) == (5.5));\n    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2,\
    \ 7}))) == (float(7)));\n}\n"
  stdout: ''
  stderr: "tmpe1xpd2o8: /tmp/tmpe1xpd2o8.cpp:20: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    long long\
    \ mid = l.size() / 2;\n    if (l.size() % 2 == 0) {\n        return l[mid];\n\
    \    } else {\n        return (l[mid] + l[mid-1]) / 2.0;\n    }\n}\nint main()\
    \ {\n    auto candidate = median;\n    assert(candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3)));\n    assert(candidate((std::vector<long>({-10,\
    \ 4, 6, 1000, 10, 20}))) == (8.0));\n    assert(candidate((std::vector<long>({5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({6, 5}))) == (5.5));\n\
    \    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2, 7}))) == (float(7)));\n\
    }\n"
  stdout: ''
  stderr: "tmpzrahh2r5: /tmp/tmpzrahh2r5.cpp:18: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    long long\
    \ mid = l.size() / 2;\n    float midval = l[mid];\n    float leftval = l[mid-1];\n\
    \    float rightval = l[mid+1];\n    if (leftval < rightval) {\n        return\
    \ midval;\n    }\n    return rightval;\n}\nint main() {\n    auto candidate =\
    \ median;\n    assert(candidate((std::vector<long>({3, 1, 2, 4, 5}))) == (float(3)));\n\
    \    assert(candidate((std::vector<long>({-10, 4, 6, 1000, 10, 20}))) == (8.0));\n\
    \    assert(candidate((std::vector<long>({5}))) == (float(5)));\n    assert(candidate((std::vector<long>({6,\
    \ 5}))) == (5.5));\n    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2,\
    \ 7}))) == (float(7)));\n}\n"
  stdout: ''
  stderr: "tmp8o2msut_: /tmp/tmp8o2msut_.cpp:20: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    long long\
    \ n = l.size();\n    assert(n >= 2);\n    float mid = l[n / 2];\n    float left\
    \ = 0;\n    float right = n;\n    while (left < right) {\n        mid = (left\
    \ + right) / 2;\n        if (mid < 0)\n            left = mid + 1;\n        else\
    \ if (mid > n)\n            right = mid - 1;\n        else\n            return\
    \ mid;\n    }\n    return mid;\n}\nint main() {\n    auto candidate = median;\n\
    \    assert(candidate((std::vector<long>({3, 1, 2, 4, 5}))) == (float(3)));\n\
    \    assert(candidate((std::vector<long>({-10, 4, 6, 1000, 10, 20}))) == (8.0));\n\
    \    assert(candidate((std::vector<long>({5}))) == (float(5)));\n    assert(candidate((std::vector<long>({6,\
    \ 5}))) == (5.5));\n    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2,\
    \ 7}))) == (float(7)));\n}\n"
  stdout: ''
  stderr: "tmpp18xnrh7: /tmp/tmpp18xnrh7.cpp:27: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    long long\
    \ int mid = l.size() / 2;\n    float midValue = l[mid];\n    float leftMedian\
    \ = median(l.begin(), l.begin() + mid);\n    float rightMedian = median(l.begin()\
    \ + mid + 1, l.end());\n    return midValue + (leftMedian + rightMedian) / 2;\n\
    }\nint main() {\n    auto candidate = median;\n    assert(candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3)));\n    assert(candidate((std::vector<long>({-10,\
    \ 4, 6, 1000, 10, 20}))) == (8.0));\n    assert(candidate((std::vector<long>({5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({6, 5}))) == (5.5));\n\
    \    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2, 7}))) == (float(7)));\n\
    }\n"
  stdout: ''
  stderr: "/tmp/tmpyeb33amh.cpp: In function \u2018float median(std::vector<long int>)\u2019\
    :\n/tmp/tmpyeb33amh.cpp:11:38: error: could not convert \u2018l.std::vector<long\
    \ int>::begin()\u2019 from \u2018std::vector<long int>::iterator\u2019 {aka \u2018\
    __gnu_cxx::__normal_iterator<long int*, std::vector<long int> >\u2019} to \u2018\
    std::vector<long int>\u2019\n   11 |     float leftMedian = median(l.begin(),\
    \ l.begin() + mid);\n      |                               ~~~~~~~^~\n      |\
    \                                      |\n      |                            \
    \          std::vector<long int>::iterator {aka __gnu_cxx::__normal_iterator<long\
    \ int*, std::vector<long int> >}\n/tmp/tmpyeb33amh.cpp:12:48: error: could not\
    \ convert \u2018l.std::vector<long int>::begin().__gnu_cxx::__normal_iterator<long\
    \ int*, std::vector<long int> >::operator+(((__gnu_cxx::__normal_iterator<long\
    \ int*, std::vector<long int> >::difference_type)mid)).__gnu_cxx::__normal_iterator<long\
    \ int*, std::vector<long int> >::operator+(1)\u2019 from \u2018__gnu_cxx::__normal_iterator<long\
    \ int*, std::vector<long int> >\u2019 to \u2018std::vector<long int>\u2019\n \
    \  12 |     float rightMedian = median(l.begin() + mid + 1, l.end());\n      |\
    \                                ~~~~~~~~~~~~~~~~^~~\n      |                \
    \                                |\n      |                                  \
    \              __gnu_cxx::__normal_iterator<long int*, std::vector<long int> >\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    long long\
    \ int mid = l.size() / 2;\n    if (l.size() % 2 == 0) {\n        return l[mid];\n\
    \    } else {\n        return (l[mid] + l[mid-1]) / 2.0;\n    }\n}\nint main()\
    \ {\n    auto candidate = median;\n    assert(candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3)));\n    assert(candidate((std::vector<long>({-10,\
    \ 4, 6, 1000, 10, 20}))) == (8.0));\n    assert(candidate((std::vector<long>({5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({6, 5}))) == (5.5));\n\
    \    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2, 7}))) == (float(7)));\n\
    }\n"
  stdout: ''
  stderr: "tmpy64cey9y: /tmp/tmpy64cey9y.cpp:18: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    long mid\
    \ = l.size() / 2;\n    long left = l[mid];\n    long right = l[mid+1];\n    if\
    \ (left > right) {\n        std::swap(left, right);\n    }\n    return left +\
    \ (right - left) / 2;\n}\nint main() {\n    auto candidate = median;\n    assert(candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3)));\n    assert(candidate((std::vector<long>({-10,\
    \ 4, 6, 1000, 10, 20}))) == (8.0));\n    assert(candidate((std::vector<long>({5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({6, 5}))) == (5.5));\n\
    \    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2, 7}))) == (float(7)));\n\
    }\n"
  stdout: ''
  stderr: "tmp5fzgjkhe: /tmp/tmp5fzgjkhe.cpp:20: int main(): Assertion `candidate((std::vector<long>({-10,\
    \ 4, 6, 1000, 10, 20}))) == (8.0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    long long\
    \ mid = l.size() / 2;\n    if (l.size() % 2 == 1) {\n        return l[mid];\n\
    \    }\n    float midVal = l[mid];\n    float leftMedian = median(l.substr(0,\
    \ mid));\n    float rightMedian = median(l.substr(mid + 1, l.size() - mid));\n\
    \    return (midVal + leftMedian) / 2.0;\n}\nint main() {\n    auto candidate\
    \ = median;\n    assert(candidate((std::vector<long>({3, 1, 2, 4, 5}))) == (float(3)));\n\
    \    assert(candidate((std::vector<long>({-10, 4, 6, 1000, 10, 20}))) == (8.0));\n\
    \    assert(candidate((std::vector<long>({5}))) == (float(5)));\n    assert(candidate((std::vector<long>({6,\
    \ 5}))) == (5.5));\n    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2,\
    \ 7}))) == (float(7)));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpqxubem1b.cpp: In function \u2018float median(std::vector<long int>)\u2019\
    :\n/tmp/tmpqxubem1b.cpp:14:33: error: \u2018class std::vector<long int>\u2019\
    \ has no member named \u2018substr\u2019\n   14 |     float leftMedian = median(l.substr(0,\
    \ mid));\n      |                                 ^~~~~~\n/tmp/tmpqxubem1b.cpp:15:34:\
    \ error: \u2018class std::vector<long int>\u2019 has no member named \u2018substr\u2019\
    \n   15 |     float rightMedian = median(l.substr(mid + 1, l.size() - mid));\n\
    \      |                                  ^~~~~~\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    long long\
    \ int mid = l.size() / 2;\n    float median = l[mid];\n    for (long long int\
    \ i = mid; i < l.size(); i++) {\n        median = (median > l[i]) ? median : l[i];\n\
    \    }\n    return median;\n}\nint main() {\n    auto candidate = median;\n  \
    \  assert(candidate((std::vector<long>({3, 1, 2, 4, 5}))) == (float(3)));\n  \
    \  assert(candidate((std::vector<long>({-10, 4, 6, 1000, 10, 20}))) == (8.0));\n\
    \    assert(candidate((std::vector<long>({5}))) == (float(5)));\n    assert(candidate((std::vector<long>({6,\
    \ 5}))) == (5.5));\n    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2,\
    \ 7}))) == (float(7)));\n}\n"
  stdout: ''
  stderr: "tmpbzkn23cb: /tmp/tmpbzkn23cb.cpp:18: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    long long\
    \ mid = l.size() / 2;\n    if (l.size() % 2 == 1) {\n        return l[mid];\n\
    \    }\n    float a = l[mid];\n    float b = l[mid-1];\n    return ((a + b) /\
    \ 2.0);\n}\nint main() {\n    auto candidate = median;\n    assert(candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3)));\n    assert(candidate((std::vector<long>({-10,\
    \ 4, 6, 1000, 10, 20}))) == (8.0));\n    assert(candidate((std::vector<long>({5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({6, 5}))) == (5.5));\n\
    \    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2, 7}))) == (float(7)));\n\
    }\n"
  stdout: ''
  stderr: "tmpeugf73ot: /tmp/tmpeugf73ot.cpp:19: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    long long\
    \ int n = l.size();\n    if (n <= 1) return l[0];\n    long long int mid = n /\
    \ 2;\n    float median = l[mid];\n    for (long long int i = 1; i < n; i++) {\n\
    \        if (l[i] < median) median = l[i];\n    }\n    return median;\n}\nint\
    \ main() {\n    auto candidate = median;\n    assert(candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3)));\n    assert(candidate((std::vector<long>({-10,\
    \ 4, 6, 1000, 10, 20}))) == (8.0));\n    assert(candidate((std::vector<long>({5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({6, 5}))) == (5.5));\n\
    \    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2, 7}))) == (float(7)));\n\
    }\n"
  stdout: ''
  stderr: "tmph7z5tc52: /tmp/tmph7z5tc52.cpp:20: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    long long\
    \ mid = l.size() / 2;\n    if (l.size() % 2 == 0) {\n        return l[mid];\n\
    \    }\n    else {\n        return (l[mid] + l[mid-1]) / 2.0;\n    }\n}\nint main()\
    \ {\n    auto candidate = median;\n    assert(candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3)));\n    assert(candidate((std::vector<long>({-10,\
    \ 4, 6, 1000, 10, 20}))) == (8.0));\n    assert(candidate((std::vector<long>({5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({6, 5}))) == (5.5));\n\
    \    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2, 7}))) == (float(7)));\n\
    }\n"
  stdout: ''
  stderr: "tmpnbuh9czx: /tmp/tmpnbuh9czx.cpp:19: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    long long\
    \ mid = l.size() / 2;\n    if (l.size() % 2 == 0) {\n        return l[mid];\n\
    \    } else {\n        return (l[mid] + l[mid]) / 2;\n    }\n}\nint main() {\n\
    \    auto candidate = median;\n    assert(candidate((std::vector<long>({3, 1,\
    \ 2, 4, 5}))) == (float(3)));\n    assert(candidate((std::vector<long>({-10, 4,\
    \ 6, 1000, 10, 20}))) == (8.0));\n    assert(candidate((std::vector<long>({5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({6, 5}))) == (5.5));\n\
    \    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2, 7}))) == (float(7)));\n\
    }\n"
  stdout: ''
  stderr: "tmpytxeiqch: /tmp/tmpytxeiqch.cpp:18: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    long long\
    \ mid = l.size() / 2;\n    float midval = l[mid];\n    float leftval = l[mid-1];\n\
    \    float rightval = l[mid+1];\n    if (leftval > rightval)\n        return midval;\n\
    \    else\n        return rightval;\n}\nint main() {\n    auto candidate = median;\n\
    \    assert(candidate((std::vector<long>({3, 1, 2, 4, 5}))) == (float(3)));\n\
    \    assert(candidate((std::vector<long>({-10, 4, 6, 1000, 10, 20}))) == (8.0));\n\
    \    assert(candidate((std::vector<long>({5}))) == (float(5)));\n    assert(candidate((std::vector<long>({6,\
    \ 5}))) == (5.5));\n    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2,\
    \ 7}))) == (float(7)));\n}\n"
  stdout: ''
  stderr: "tmpc9qvox2v: /tmp/tmpc9qvox2v.cpp:20: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    long long\
    \ int n = l.size();\n    if (n % 2 == 0) {\n        return l[n/2];\n    }\n  \
    \  else {\n        return (l[n/2] + l[n/2-1])/2;\n    }\n}\nint main() {\n   \
    \ auto candidate = median;\n    assert(candidate((std::vector<long>({3, 1, 2,\
    \ 4, 5}))) == (float(3)));\n    assert(candidate((std::vector<long>({-10, 4, 6,\
    \ 1000, 10, 20}))) == (8.0));\n    assert(candidate((std::vector<long>({5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({6, 5}))) == (5.5));\n\
    \    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2, 7}))) == (float(7)));\n\
    }\n"
  stdout: ''
  stderr: "tmpvmnc8oq3: /tmp/tmpvmnc8oq3.cpp:19: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    long long\
    \ int mid = l.size() / 2;\n    float midval = l[mid];\n    float leftval = l[mid-1];\n\
    \    float rightval = l[mid+1];\n    if (leftval > rightval) {\n        return\
    \ midval;\n    } else {\n        return rightval;\n    }\n}\nint main() {\n  \
    \  auto candidate = median;\n    assert(candidate((std::vector<long>({3, 1, 2,\
    \ 4, 5}))) == (float(3)));\n    assert(candidate((std::vector<long>({-10, 4, 6,\
    \ 1000, 10, 20}))) == (8.0));\n    assert(candidate((std::vector<long>({5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({6, 5}))) == (5.5));\n\
    \    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2, 7}))) == (float(7)));\n\
    }\n"
  stdout: ''
  stderr: "tmp4kvvgu1m: /tmp/tmp4kvvgu1m.cpp:21: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    long long\
    \ int n = l.size();\n    if (n <= 1) return l[0];\n    long long int mid = n /\
    \ 2;\n    float left = (l[mid] - l[mid-1]) / 2;\n    float right = (l[mid+1] -\
    \ l[mid]) / 2;\n    if (left > right) return median(l);\n    return l[mid];\n\
    }\nint main() {\n    auto candidate = median;\n    assert(candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3)));\n    assert(candidate((std::vector<long>({-10,\
    \ 4, 6, 1000, 10, 20}))) == (8.0));\n    assert(candidate((std::vector<long>({5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({6, 5}))) == (5.5));\n\
    \    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2, 7}))) == (float(7)));\n\
    }\n"
  stdout: ''
  stderr: "tmprr10l04s: /tmp/tmprr10l04s.cpp:19: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    long long\
    \ int mid = l.size() / 2;\n    float median = l[mid];\n    for (long long int\
    \ i = mid; i < l.size(); i++) {\n        if (l[i] < median) {\n            median\
    \ = l[i];\n        }\n    }\n    return median;\n}\nint main() {\n    auto candidate\
    \ = median;\n    assert(candidate((std::vector<long>({3, 1, 2, 4, 5}))) == (float(3)));\n\
    \    assert(candidate((std::vector<long>({-10, 4, 6, 1000, 10, 20}))) == (8.0));\n\
    \    assert(candidate((std::vector<long>({5}))) == (float(5)));\n    assert(candidate((std::vector<long>({6,\
    \ 5}))) == (5.5));\n    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2,\
    \ 7}))) == (float(7)));\n}\n"
  stdout: ''
  stderr: "tmpt2t6zkf1: /tmp/tmpt2t6zkf1.cpp:20: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    long long\
    \ int mid = l.size() / 2;\n    float midVal = l[mid];\n    float leftMedian =\
    \ median(l.begin(), l.begin() + mid);\n    float rightMedian = median(l.begin()\
    \ + mid + 1,\n                               l.end());\n    return midVal + (leftMedian\
    \ + rightMedian) / 2;\n}\nint main() {\n    auto candidate = median;\n    assert(candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3)));\n    assert(candidate((std::vector<long>({-10,\
    \ 4, 6, 1000, 10, 20}))) == (8.0));\n    assert(candidate((std::vector<long>({5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({6, 5}))) == (5.5));\n\
    \    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2, 7}))) == (float(7)));\n\
    }\n"
  stdout: ''
  stderr: "/tmp/tmp97jqn_x7.cpp: In function \u2018float median(std::vector<long int>)\u2019\
    :\n/tmp/tmp97jqn_x7.cpp:11:38: error: could not convert \u2018l.std::vector<long\
    \ int>::begin()\u2019 from \u2018std::vector<long int>::iterator\u2019 {aka \u2018\
    __gnu_cxx::__normal_iterator<long int*, std::vector<long int> >\u2019} to \u2018\
    std::vector<long int>\u2019\n   11 |     float leftMedian = median(l.begin(),\
    \ l.begin() + mid);\n      |                               ~~~~~~~^~\n      |\
    \                                      |\n      |                            \
    \          std::vector<long int>::iterator {aka __gnu_cxx::__normal_iterator<long\
    \ int*, std::vector<long int> >}\n/tmp/tmp97jqn_x7.cpp:12:48: error: could not\
    \ convert \u2018l.std::vector<long int>::begin().__gnu_cxx::__normal_iterator<long\
    \ int*, std::vector<long int> >::operator+(((__gnu_cxx::__normal_iterator<long\
    \ int*, std::vector<long int> >::difference_type)mid)).__gnu_cxx::__normal_iterator<long\
    \ int*, std::vector<long int> >::operator+(1)\u2019 from \u2018__gnu_cxx::__normal_iterator<long\
    \ int*, std::vector<long int> >\u2019 to \u2018std::vector<long int>\u2019\n \
    \  12 |     float rightMedian = median(l.begin() + mid + 1,\n      |         \
    \                       ~~~~~~~~~~~~~~~~^~~\n      |                         \
    \                       |\n      |                                           \
    \     __gnu_cxx::__normal_iterator<long int*, std::vector<long int> >\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    long long\
    \ mid = l.size() / 2;\n    if (l.size() % 2 == 0) {\n        return l[mid];\n\
    \    } else {\n        return (l[mid] + l[mid-1]) / 2.0;\n    }\n}\nint main()\
    \ {\n    auto candidate = median;\n    assert(candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3)));\n    assert(candidate((std::vector<long>({-10,\
    \ 4, 6, 1000, 10, 20}))) == (8.0));\n    assert(candidate((std::vector<long>({5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({6, 5}))) == (5.5));\n\
    \    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2, 7}))) == (float(7)));\n\
    }\n"
  stdout: ''
  stderr: "tmpemass6ni: /tmp/tmpemass6ni.cpp:18: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    long long\
    \ mid = l.size() / 2;\n    if (l.size() % 2 == 1) {\n        return l[mid];\n\
    \    }\n    float a = l[mid];\n    float b = l[mid+1];\n    return ((a + b) /\
    \ 2.0);\n}\nint main() {\n    auto candidate = median;\n    assert(candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3)));\n    assert(candidate((std::vector<long>({-10,\
    \ 4, 6, 1000, 10, 20}))) == (8.0));\n    assert(candidate((std::vector<long>({5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({6, 5}))) == (5.5));\n\
    \    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2, 7}))) == (float(7)));\n\
    }\n"
  stdout: ''
  stderr: "tmpn50a3s65: /tmp/tmpn50a3s65.cpp:19: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    long long\
    \ mid = l.size() / 2;\n    float midVal = l[mid];\n    float leftMedian = median(l.begin(),\
    \ l.begin() + mid);\n    float rightMedian = median(l.begin() + mid + 1,\n   \
    \                            l.end());\n    return midVal + (leftMedian + rightMedian)\
    \ / 2;\n}\nint main() {\n    auto candidate = median;\n    assert(candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3)));\n    assert(candidate((std::vector<long>({-10,\
    \ 4, 6, 1000, 10, 20}))) == (8.0));\n    assert(candidate((std::vector<long>({5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({6, 5}))) == (5.5));\n\
    \    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2, 7}))) == (float(7)));\n\
    }\n"
  stdout: ''
  stderr: "/tmp/tmpajrhqcsp.cpp: In function \u2018float median(std::vector<long int>)\u2019\
    :\n/tmp/tmpajrhqcsp.cpp:11:38: error: could not convert \u2018l.std::vector<long\
    \ int>::begin()\u2019 from \u2018std::vector<long int>::iterator\u2019 {aka \u2018\
    __gnu_cxx::__normal_iterator<long int*, std::vector<long int> >\u2019} to \u2018\
    std::vector<long int>\u2019\n   11 |     float leftMedian = median(l.begin(),\
    \ l.begin() + mid);\n      |                               ~~~~~~~^~\n      |\
    \                                      |\n      |                            \
    \          std::vector<long int>::iterator {aka __gnu_cxx::__normal_iterator<long\
    \ int*, std::vector<long int> >}\n/tmp/tmpajrhqcsp.cpp:12:48: error: could not\
    \ convert \u2018l.std::vector<long int>::begin().__gnu_cxx::__normal_iterator<long\
    \ int*, std::vector<long int> >::operator+(((__gnu_cxx::__normal_iterator<long\
    \ int*, std::vector<long int> >::difference_type)mid)).__gnu_cxx::__normal_iterator<long\
    \ int*, std::vector<long int> >::operator+(1)\u2019 from \u2018__gnu_cxx::__normal_iterator<long\
    \ int*, std::vector<long int> >\u2019 to \u2018std::vector<long int>\u2019\n \
    \  12 |     float rightMedian = median(l.begin() + mid + 1,\n      |         \
    \                       ~~~~~~~~~~~~~~~~^~~\n      |                         \
    \                       |\n      |                                           \
    \     __gnu_cxx::__normal_iterator<long int*, std::vector<long int> >\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    long long\
    \ mid = l.size() / 2;\n    long long left = l[mid];\n    long long right = l[mid+1];\n\
    \    if (left > right) {\n        return left;\n    }\n    return right;\n}\n\
    int main() {\n    auto candidate = median;\n    assert(candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3)));\n    assert(candidate((std::vector<long>({-10,\
    \ 4, 6, 1000, 10, 20}))) == (8.0));\n    assert(candidate((std::vector<long>({5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({6, 5}))) == (5.5));\n\
    \    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2, 7}))) == (float(7)));\n\
    }\n"
  stdout: ''
  stderr: "tmpvsywposz: /tmp/tmpvsywposz.cpp:19: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    long long\
    \ int mid = l.size() / 2;\n    long long int left = l[mid];\n    long long int\
    \ right = l[mid+1];\n    if (left > right) {\n        return left;\n    }\n  \
    \  return right;\n}\nint main() {\n    auto candidate = median;\n    assert(candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3)));\n    assert(candidate((std::vector<long>({-10,\
    \ 4, 6, 1000, 10, 20}))) == (8.0));\n    assert(candidate((std::vector<long>({5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({6, 5}))) == (5.5));\n\
    \    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2, 7}))) == (float(7)));\n\
    }\n"
  stdout: ''
  stderr: "tmpkqonro6a: /tmp/tmpkqonro6a.cpp:19: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    long mid\
    \ = l.size() / 2;\n    if (l.size() % 2 == 0) {\n        return l[mid];\n    }\
    \ else {\n        return (l[mid] + l[mid-1]) / 2.0;\n    }\n}\nint main() {\n\
    \    auto candidate = median;\n    assert(candidate((std::vector<long>({3, 1,\
    \ 2, 4, 5}))) == (float(3)));\n    assert(candidate((std::vector<long>({-10, 4,\
    \ 6, 1000, 10, 20}))) == (8.0));\n    assert(candidate((std::vector<long>({5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({6, 5}))) == (5.5));\n\
    \    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2, 7}))) == (float(7)));\n\
    }\n"
  stdout: ''
  stderr: "tmpt1yfraoq: /tmp/tmpt1yfraoq.cpp:18: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    long long\
    \ int mid = l.size() / 2;\n    float midVal = l[mid];\n    float leftMedian =\
    \ median(l.begin(), l.begin() + mid);\n    float rightMedian = median(l.begin()\
    \ + mid + 1, l.end());\n    return midVal + (leftMedian + rightMedian) / 2;\n\
    }\nint main() {\n    auto candidate = median;\n    assert(candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3)));\n    assert(candidate((std::vector<long>({-10,\
    \ 4, 6, 1000, 10, 20}))) == (8.0));\n    assert(candidate((std::vector<long>({5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({6, 5}))) == (5.5));\n\
    \    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2, 7}))) == (float(7)));\n\
    }\n"
  stdout: ''
  stderr: "/tmp/tmpg893aw76.cpp: In function \u2018float median(std::vector<long int>)\u2019\
    :\n/tmp/tmpg893aw76.cpp:11:38: error: could not convert \u2018l.std::vector<long\
    \ int>::begin()\u2019 from \u2018std::vector<long int>::iterator\u2019 {aka \u2018\
    __gnu_cxx::__normal_iterator<long int*, std::vector<long int> >\u2019} to \u2018\
    std::vector<long int>\u2019\n   11 |     float leftMedian = median(l.begin(),\
    \ l.begin() + mid);\n      |                               ~~~~~~~^~\n      |\
    \                                      |\n      |                            \
    \          std::vector<long int>::iterator {aka __gnu_cxx::__normal_iterator<long\
    \ int*, std::vector<long int> >}\n/tmp/tmpg893aw76.cpp:12:48: error: could not\
    \ convert \u2018l.std::vector<long int>::begin().__gnu_cxx::__normal_iterator<long\
    \ int*, std::vector<long int> >::operator+(((__gnu_cxx::__normal_iterator<long\
    \ int*, std::vector<long int> >::difference_type)mid)).__gnu_cxx::__normal_iterator<long\
    \ int*, std::vector<long int> >::operator+(1)\u2019 from \u2018__gnu_cxx::__normal_iterator<long\
    \ int*, std::vector<long int> >\u2019 to \u2018std::vector<long int>\u2019\n \
    \  12 |     float rightMedian = median(l.begin() + mid + 1, l.end());\n      |\
    \                                ~~~~~~~~~~~~~~~~^~~\n      |                \
    \                                |\n      |                                  \
    \              __gnu_cxx::__normal_iterator<long int*, std::vector<long int> >\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    long long\
    \ int mid = l.size() / 2;\n    if (l.size() % 2 == 0) {\n        return l[mid];\n\
    \    }\n    else {\n        return (l[mid] + l[mid-1]) / 2;\n    }\n}\nint main()\
    \ {\n    auto candidate = median;\n    assert(candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3)));\n    assert(candidate((std::vector<long>({-10,\
    \ 4, 6, 1000, 10, 20}))) == (8.0));\n    assert(candidate((std::vector<long>({5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({6, 5}))) == (5.5));\n\
    \    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2, 7}))) == (float(7)));\n\
    }\n"
  stdout: ''
  stderr: "tmp5i2fbm5u: /tmp/tmp5i2fbm5u.cpp:19: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    long long\
    \ int mid = l.size() / 2;\n    float midVal = l[mid];\n    float leftMedian =\
    \ median(l.begin(), l.begin() + mid);\n    float rightMedian = median(l.begin()\
    \ + mid + 1, l.end());\n    return midVal + (leftMedian + rightMedian) / 2;\n\
    }\nint main() {\n    auto candidate = median;\n    assert(candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3)));\n    assert(candidate((std::vector<long>({-10,\
    \ 4, 6, 1000, 10, 20}))) == (8.0));\n    assert(candidate((std::vector<long>({5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({6, 5}))) == (5.5));\n\
    \    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2, 7}))) == (float(7)));\n\
    }\n"
  stdout: ''
  stderr: "/tmp/tmp94qs94s7.cpp: In function \u2018float median(std::vector<long int>)\u2019\
    :\n/tmp/tmp94qs94s7.cpp:11:38: error: could not convert \u2018l.std::vector<long\
    \ int>::begin()\u2019 from \u2018std::vector<long int>::iterator\u2019 {aka \u2018\
    __gnu_cxx::__normal_iterator<long int*, std::vector<long int> >\u2019} to \u2018\
    std::vector<long int>\u2019\n   11 |     float leftMedian = median(l.begin(),\
    \ l.begin() + mid);\n      |                               ~~~~~~~^~\n      |\
    \                                      |\n      |                            \
    \          std::vector<long int>::iterator {aka __gnu_cxx::__normal_iterator<long\
    \ int*, std::vector<long int> >}\n/tmp/tmp94qs94s7.cpp:12:48: error: could not\
    \ convert \u2018l.std::vector<long int>::begin().__gnu_cxx::__normal_iterator<long\
    \ int*, std::vector<long int> >::operator+(((__gnu_cxx::__normal_iterator<long\
    \ int*, std::vector<long int> >::difference_type)mid)).__gnu_cxx::__normal_iterator<long\
    \ int*, std::vector<long int> >::operator+(1)\u2019 from \u2018__gnu_cxx::__normal_iterator<long\
    \ int*, std::vector<long int> >\u2019 to \u2018std::vector<long int>\u2019\n \
    \  12 |     float rightMedian = median(l.begin() + mid + 1, l.end());\n      |\
    \                                ~~~~~~~~~~~~~~~~^~~\n      |                \
    \                                |\n      |                                  \
    \              __gnu_cxx::__normal_iterator<long int*, std::vector<long int> >\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    long mid\
    \ = l.size() / 2;\n    if (l.size() % 2 == 0) {\n        return l[mid];\n    }\n\
    \    return (float) l[mid] + (float) l[mid+1];\n}\nint main() {\n    auto candidate\
    \ = median;\n    assert(candidate((std::vector<long>({3, 1, 2, 4, 5}))) == (float(3)));\n\
    \    assert(candidate((std::vector<long>({-10, 4, 6, 1000, 10, 20}))) == (8.0));\n\
    \    assert(candidate((std::vector<long>({5}))) == (float(5)));\n    assert(candidate((std::vector<long>({6,\
    \ 5}))) == (5.5));\n    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2,\
    \ 7}))) == (float(7)));\n}\n"
  stdout: ''
  stderr: "tmpvemmmvbc: /tmp/tmpvemmmvbc.cpp:17: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    long long\
    \ int n = l.size();\n    assert(n >= 1);\n    long long int mid = n / 2;\n   \
    \ float m1 = l[mid];\n    float m2 = l[n - 1];\n    if (m1 < m2)\n        return\
    \ m1;\n    return m2;\n}\nint main() {\n    auto candidate = median;\n    assert(candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3)));\n    assert(candidate((std::vector<long>({-10,\
    \ 4, 6, 1000, 10, 20}))) == (8.0));\n    assert(candidate((std::vector<long>({5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({6, 5}))) == (5.5));\n\
    \    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2, 7}))) == (float(7)));\n\
    }\n"
  stdout: ''
  stderr: "tmpkoti8_xb: /tmp/tmpkoti8_xb.cpp:20: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    long long\
    \ mid = l.size() / 2;\n    if (l.size() % 2 == 0) {\n        return l[mid];\n\
    \    }\n    float a = l[mid];\n    float b = l[mid+1];\n    return (b - a) / 2.0;\n\
    }\nint main() {\n    auto candidate = median;\n    assert(candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3)));\n    assert(candidate((std::vector<long>({-10,\
    \ 4, 6, 1000, 10, 20}))) == (8.0));\n    assert(candidate((std::vector<long>({5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({6, 5}))) == (5.5));\n\
    \    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2, 7}))) == (float(7)));\n\
    }\n"
  stdout: ''
  stderr: "tmpg9ffoqdr: /tmp/tmpg9ffoqdr.cpp:19: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    long long\
    \ int mid = l.size() / 2;\n    float midval = l[mid];\n    float leftval = l[mid-1];\n\
    \    float rightval = l[mid+1];\n    if (leftval > rightval)\n        return midval;\n\
    \    else\n        return rightval;\n}\nint main() {\n    auto candidate = median;\n\
    \    assert(candidate((std::vector<long>({3, 1, 2, 4, 5}))) == (float(3)));\n\
    \    assert(candidate((std::vector<long>({-10, 4, 6, 1000, 10, 20}))) == (8.0));\n\
    \    assert(candidate((std::vector<long>({5}))) == (float(5)));\n    assert(candidate((std::vector<long>({6,\
    \ 5}))) == (5.5));\n    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2,\
    \ 7}))) == (float(7)));\n}\n"
  stdout: ''
  stderr: "tmpilabm7qf: /tmp/tmpilabm7qf.cpp:20: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    long long\
    \ ll = l.size();\n    if (ll % 2 == 0) {\n        return l[ll / 2 - 1] + (l[ll\
    \ / 2] + l[ll / 2 - 1]) / 2;\n    } else {\n        return l[ll / 2];\n    }\n\
    }\nint main() {\n    auto candidate = median;\n    assert(candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3)));\n    assert(candidate((std::vector<long>({-10,\
    \ 4, 6, 1000, 10, 20}))) == (8.0));\n    assert(candidate((std::vector<long>({5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({6, 5}))) == (5.5));\n\
    \    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2, 7}))) == (float(7)));\n\
    }\n"
  stdout: ''
  stderr: "tmp0buc7iix: /tmp/tmp0buc7iix.cpp:18: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    long long\
    \ int n = l.size();\n    if (n <= 1) return l[0];\n    long long int mid = n /\
    \ 2;\n    float midVal = l[mid];\n    float leftMedian = median(l.sublist(0, mid));\n\
    \    float rightMedian = median(l.sublist(mid, n - 1));\n    return midVal + (leftMedian\
    \ + rightMedian) / 2;\n}\nint main() {\n    auto candidate = median;\n    assert(candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3)));\n    assert(candidate((std::vector<long>({-10,\
    \ 4, 6, 1000, 10, 20}))) == (8.0));\n    assert(candidate((std::vector<long>({5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({6, 5}))) == (5.5));\n\
    \    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2, 7}))) == (float(7)));\n\
    }\n"
  stdout: ''
  stderr: "/tmp/tmp991lp7qa.cpp: In function \u2018float median(std::vector<long int>)\u2019\
    :\n/tmp/tmp991lp7qa.cpp:13:33: error: \u2018class std::vector<long int>\u2019\
    \ has no member named \u2018sublist\u2019\n   13 |     float leftMedian = median(l.sublist(0,\
    \ mid));\n      |                                 ^~~~~~~\n/tmp/tmp991lp7qa.cpp:14:34:\
    \ error: \u2018class std::vector<long int>\u2019 has no member named \u2018sublist\u2019\
    \n   14 |     float rightMedian = median(l.sublist(mid, n - 1));\n      |    \
    \                              ^~~~~~~\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    long long\
    \ int mid = l.size() / 2;\n    if (l.size() % 2 == 0) {\n        return l[mid];\n\
    \    }\n    else {\n        return (l[mid] + l[mid-1]) / 2.0;\n    }\n}\nint main()\
    \ {\n    auto candidate = median;\n    assert(candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3)));\n    assert(candidate((std::vector<long>({-10,\
    \ 4, 6, 1000, 10, 20}))) == (8.0));\n    assert(candidate((std::vector<long>({5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({6, 5}))) == (5.5));\n\
    \    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2, 7}))) == (float(7)));\n\
    }\n"
  stdout: ''
  stderr: "tmp05w980lt: /tmp/tmp05w980lt.cpp:19: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    long long\
    \ mid = l.size() / 2;\n    float median = l[mid];\n    for (long long i = mid;\
    \ i < l.size(); i++) {\n        median = (median > l[i]) ? median : l[i];\n  \
    \  }\n    return median;\n}\nint main() {\n    auto candidate = median;\n    assert(candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3)));\n    assert(candidate((std::vector<long>({-10,\
    \ 4, 6, 1000, 10, 20}))) == (8.0));\n    assert(candidate((std::vector<long>({5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({6, 5}))) == (5.5));\n\
    \    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2, 7}))) == (float(7)));\n\
    }\n"
  stdout: ''
  stderr: "tmpvodgz12e: /tmp/tmpvodgz12e.cpp:18: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    long long\
    \ int mid = l.size() / 2;\n    float midVal = l[mid];\n    float leftMedian =\
    \ median(l.begin(), l.begin() + mid);\n    float rightMedian = median(l.begin()\
    \ + mid + 1, l.end());\n    return midVal + (leftMedian + rightMedian) / 2;\n\
    }\nint main() {\n    auto candidate = median;\n    assert(candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3)));\n    assert(candidate((std::vector<long>({-10,\
    \ 4, 6, 1000, 10, 20}))) == (8.0));\n    assert(candidate((std::vector<long>({5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({6, 5}))) == (5.5));\n\
    \    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2, 7}))) == (float(7)));\n\
    }\n"
  stdout: ''
  stderr: "/tmp/tmp_5na9zqs.cpp: In function \u2018float median(std::vector<long int>)\u2019\
    :\n/tmp/tmp_5na9zqs.cpp:11:38: error: could not convert \u2018l.std::vector<long\
    \ int>::begin()\u2019 from \u2018std::vector<long int>::iterator\u2019 {aka \u2018\
    __gnu_cxx::__normal_iterator<long int*, std::vector<long int> >\u2019} to \u2018\
    std::vector<long int>\u2019\n   11 |     float leftMedian = median(l.begin(),\
    \ l.begin() + mid);\n      |                               ~~~~~~~^~\n      |\
    \                                      |\n      |                            \
    \          std::vector<long int>::iterator {aka __gnu_cxx::__normal_iterator<long\
    \ int*, std::vector<long int> >}\n/tmp/tmp_5na9zqs.cpp:12:48: error: could not\
    \ convert \u2018l.std::vector<long int>::begin().__gnu_cxx::__normal_iterator<long\
    \ int*, std::vector<long int> >::operator+(((__gnu_cxx::__normal_iterator<long\
    \ int*, std::vector<long int> >::difference_type)mid)).__gnu_cxx::__normal_iterator<long\
    \ int*, std::vector<long int> >::operator+(1)\u2019 from \u2018__gnu_cxx::__normal_iterator<long\
    \ int*, std::vector<long int> >\u2019 to \u2018std::vector<long int>\u2019\n \
    \  12 |     float rightMedian = median(l.begin() + mid + 1, l.end());\n      |\
    \                                ~~~~~~~~~~~~~~~~^~~\n      |                \
    \                                |\n      |                                  \
    \              __gnu_cxx::__normal_iterator<long int*, std::vector<long int> >\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    long long\
    \ int mid = l.size() / 2;\n    float median = l[mid];\n    long long int left\
    \ = 0, right = mid;\n    while (left < right) {\n        long long int mid = (left\
    \ + right) / 2;\n        if (l[mid] < median) {\n            left = mid + 1;\n\
    \        } else {\n            right = mid;\n        }\n    }\n    return median;\n\
    }\nint main() {\n    auto candidate = median;\n    assert(candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3)));\n    assert(candidate((std::vector<long>({-10,\
    \ 4, 6, 1000, 10, 20}))) == (8.0));\n    assert(candidate((std::vector<long>({5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({6, 5}))) == (5.5));\n\
    \    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2, 7}))) == (float(7)));\n\
    }\n"
  stdout: ''
  stderr: "tmpkkc13d5n: /tmp/tmpkkc13d5n.cpp:24: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    long long\
    \ int mid = l.size() / 2;\n    if (l.size() % 2 == 0) {\n        return l[mid];\n\
    \    } else {\n        return 0.5 * (l[mid] + l[mid-1]);\n    }\n}\nint main()\
    \ {\n    auto candidate = median;\n    assert(candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3)));\n    assert(candidate((std::vector<long>({-10,\
    \ 4, 6, 1000, 10, 20}))) == (8.0));\n    assert(candidate((std::vector<long>({5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({6, 5}))) == (5.5));\n\
    \    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2, 7}))) == (float(7)));\n\
    }\n"
  stdout: ''
  stderr: "tmpf4s7ubq3: /tmp/tmpf4s7ubq3.cpp:18: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    long mid\
    \ = l.size() / 2;\n    if (l.size() % 2 == 1) {\n        return l[mid];\n    }\n\
    \    float a = l[mid];\n    float b = l[mid+1];\n    return a > b ? b : a;\n}\n\
    int main() {\n    auto candidate = median;\n    assert(candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3)));\n    assert(candidate((std::vector<long>({-10,\
    \ 4, 6, 1000, 10, 20}))) == (8.0));\n    assert(candidate((std::vector<long>({5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({6, 5}))) == (5.5));\n\
    \    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2, 7}))) == (float(7)));\n\
    }\n"
  stdout: ''
  stderr: "tmpx56anm7i: /tmp/tmpx56anm7i.cpp:19: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    long long\
    \ int mid = l.size() / 2;\n    float midval = l[mid];\n    float leftval = l[mid-1];\n\
    \    float rightval = l[mid+1];\n    if (leftval > rightval)\n        return leftval;\n\
    \    return rightval;\n}\nint main() {\n    auto candidate = median;\n    assert(candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3)));\n    assert(candidate((std::vector<long>({-10,\
    \ 4, 6, 1000, 10, 20}))) == (8.0));\n    assert(candidate((std::vector<long>({5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({6, 5}))) == (5.5));\n\
    \    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2, 7}))) == (float(7)));\n\
    }\n"
  stdout: ''
  stderr: "tmpcvms5ray: /tmp/tmpcvms5ray.cpp:19: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    long long\
    \ int n = l.size();\n    if (n % 2 == 0) {\n        return l[n / 2];\n    }\n\
    \    else {\n        return (l[n / 2] + l[n / 2 - 1]) / 2;\n    }\n}\nint main()\
    \ {\n    auto candidate = median;\n    assert(candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3)));\n    assert(candidate((std::vector<long>({-10,\
    \ 4, 6, 1000, 10, 20}))) == (8.0));\n    assert(candidate((std::vector<long>({5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({6, 5}))) == (5.5));\n\
    \    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2, 7}))) == (float(7)));\n\
    }\n"
  stdout: ''
  stderr: "tmp20x91wne: /tmp/tmp20x91wne.cpp:19: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    long long\
    \ int n = l.size();\n    if (n % 2 == 0) {\n        return l[n / 2];\n    }\n\
    \    float median = (l[n / 2] + l[n / 2 - 1]) / 2;\n    return median;\n}\nint\
    \ main() {\n    auto candidate = median;\n    assert(candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3)));\n    assert(candidate((std::vector<long>({-10,\
    \ 4, 6, 1000, 10, 20}))) == (8.0));\n    assert(candidate((std::vector<long>({5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({6, 5}))) == (5.5));\n\
    \    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2, 7}))) == (float(7)));\n\
    }\n"
  stdout: ''
  stderr: "tmp68g2_ycz: /tmp/tmp68g2_ycz.cpp:18: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    long long\
    \ mid = l.size() / 2;\n    if (l.size() % 2 == 0) {\n        return l[mid];\n\
    \    } else {\n        return (l[mid] + l[mid-1]) / 2;\n    }\n}\nint main() {\n\
    \    auto candidate = median;\n    assert(candidate((std::vector<long>({3, 1,\
    \ 2, 4, 5}))) == (float(3)));\n    assert(candidate((std::vector<long>({-10, 4,\
    \ 6, 1000, 10, 20}))) == (8.0));\n    assert(candidate((std::vector<long>({5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({6, 5}))) == (5.5));\n\
    \    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2, 7}))) == (float(7)));\n\
    }\n"
  stdout: ''
  stderr: "tmp9lblbba3: /tmp/tmp9lblbba3.cpp:18: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    long long\
    \ int mid = l.size() / 2;\n    if (l.size() % 2 == 0) {\n        return l[mid];\n\
    \    } else {\n        return (l[mid] + l[mid-1]) / 2;\n    }\n}\nint main() {\n\
    \    auto candidate = median;\n    assert(candidate((std::vector<long>({3, 1,\
    \ 2, 4, 5}))) == (float(3)));\n    assert(candidate((std::vector<long>({-10, 4,\
    \ 6, 1000, 10, 20}))) == (8.0));\n    assert(candidate((std::vector<long>({5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({6, 5}))) == (5.5));\n\
    \    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2, 7}))) == (float(7)));\n\
    }\n"
  stdout: ''
  stderr: "tmphyp_hs11: /tmp/tmphyp_hs11.cpp:18: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    long long\
    \ mid = l.size() / 2;\n    if (l.size() % 2 == 0) {\n        return l[mid];\n\
    \    } else {\n        return (l[mid] + l[mid]) / 2;\n    }\n}\nint main() {\n\
    \    auto candidate = median;\n    assert(candidate((std::vector<long>({3, 1,\
    \ 2, 4, 5}))) == (float(3)));\n    assert(candidate((std::vector<long>({-10, 4,\
    \ 6, 1000, 10, 20}))) == (8.0));\n    assert(candidate((std::vector<long>({5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({6, 5}))) == (5.5));\n\
    \    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2, 7}))) == (float(7)));\n\
    }\n"
  stdout: ''
  stderr: "tmps6yaohj4: /tmp/tmps6yaohj4.cpp:18: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    long long\
    \ int mid = l.size() / 2;\n    float midVal = l[mid];\n    float leftMedian =\
    \ median(l.begin(), l.begin() + mid);\n    float rightMedian = median(l.begin()\
    \ + mid + 1, l.end());\n    return midVal + (leftMedian + rightMedian) / 2;\n\
    }\nint main() {\n    auto candidate = median;\n    assert(candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3)));\n    assert(candidate((std::vector<long>({-10,\
    \ 4, 6, 1000, 10, 20}))) == (8.0));\n    assert(candidate((std::vector<long>({5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({6, 5}))) == (5.5));\n\
    \    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2, 7}))) == (float(7)));\n\
    }\n"
  stdout: ''
  stderr: "/tmp/tmpiwvuucnh.cpp: In function \u2018float median(std::vector<long int>)\u2019\
    :\n/tmp/tmpiwvuucnh.cpp:11:38: error: could not convert \u2018l.std::vector<long\
    \ int>::begin()\u2019 from \u2018std::vector<long int>::iterator\u2019 {aka \u2018\
    __gnu_cxx::__normal_iterator<long int*, std::vector<long int> >\u2019} to \u2018\
    std::vector<long int>\u2019\n   11 |     float leftMedian = median(l.begin(),\
    \ l.begin() + mid);\n      |                               ~~~~~~~^~\n      |\
    \                                      |\n      |                            \
    \          std::vector<long int>::iterator {aka __gnu_cxx::__normal_iterator<long\
    \ int*, std::vector<long int> >}\n/tmp/tmpiwvuucnh.cpp:12:48: error: could not\
    \ convert \u2018l.std::vector<long int>::begin().__gnu_cxx::__normal_iterator<long\
    \ int*, std::vector<long int> >::operator+(((__gnu_cxx::__normal_iterator<long\
    \ int*, std::vector<long int> >::difference_type)mid)).__gnu_cxx::__normal_iterator<long\
    \ int*, std::vector<long int> >::operator+(1)\u2019 from \u2018__gnu_cxx::__normal_iterator<long\
    \ int*, std::vector<long int> >\u2019 to \u2018std::vector<long int>\u2019\n \
    \  12 |     float rightMedian = median(l.begin() + mid + 1, l.end());\n      |\
    \                                ~~~~~~~~~~~~~~~~^~~\n      |                \
    \                                |\n      |                                  \
    \              __gnu_cxx::__normal_iterator<long int*, std::vector<long int> >\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    long long\
    \ mid = l.size() / 2;\n    float midVal = l[mid];\n    float leftMedian = median(l.begin(),\
    \ l.begin() + mid);\n    float rightMedian = median(l.begin() + mid + 1, l.end());\n\
    \    return midVal + (leftMedian + rightMedian) / 2;\n}\nint main() {\n    auto\
    \ candidate = median;\n    assert(candidate((std::vector<long>({3, 1, 2, 4, 5})))\
    \ == (float(3)));\n    assert(candidate((std::vector<long>({-10, 4, 6, 1000, 10,\
    \ 20}))) == (8.0));\n    assert(candidate((std::vector<long>({5}))) == (float(5)));\n\
    \    assert(candidate((std::vector<long>({6, 5}))) == (5.5));\n    assert(candidate((std::vector<long>({8,\
    \ 1, 3, 9, 9, 2, 7}))) == (float(7)));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp1c17n3f6.cpp: In function \u2018float median(std::vector<long int>)\u2019\
    :\n/tmp/tmp1c17n3f6.cpp:11:38: error: could not convert \u2018l.std::vector<long\
    \ int>::begin()\u2019 from \u2018std::vector<long int>::iterator\u2019 {aka \u2018\
    __gnu_cxx::__normal_iterator<long int*, std::vector<long int> >\u2019} to \u2018\
    std::vector<long int>\u2019\n   11 |     float leftMedian = median(l.begin(),\
    \ l.begin() + mid);\n      |                               ~~~~~~~^~\n      |\
    \                                      |\n      |                            \
    \          std::vector<long int>::iterator {aka __gnu_cxx::__normal_iterator<long\
    \ int*, std::vector<long int> >}\n/tmp/tmp1c17n3f6.cpp:12:48: error: could not\
    \ convert \u2018l.std::vector<long int>::begin().__gnu_cxx::__normal_iterator<long\
    \ int*, std::vector<long int> >::operator+(((__gnu_cxx::__normal_iterator<long\
    \ int*, std::vector<long int> >::difference_type)mid)).__gnu_cxx::__normal_iterator<long\
    \ int*, std::vector<long int> >::operator+(1)\u2019 from \u2018__gnu_cxx::__normal_iterator<long\
    \ int*, std::vector<long int> >\u2019 to \u2018std::vector<long int>\u2019\n \
    \  12 |     float rightMedian = median(l.begin() + mid + 1, l.end());\n      |\
    \                                ~~~~~~~~~~~~~~~~^~~\n      |                \
    \                                |\n      |                                  \
    \              __gnu_cxx::__normal_iterator<long int*, std::vector<long int> >\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    long long\
    \ int mid = l.size() / 2;\n    float median = (l[mid] + l[mid-1]) / 2;\n    return\
    \ median;\n}\nint main() {\n    auto candidate = median;\n    assert(candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3)));\n    assert(candidate((std::vector<long>({-10,\
    \ 4, 6, 1000, 10, 20}))) == (8.0));\n    assert(candidate((std::vector<long>({5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({6, 5}))) == (5.5));\n\
    \    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2, 7}))) == (float(7)));\n\
    }\n"
  stdout: ''
  stderr: "tmpdh26bv48: /tmp/tmpdh26bv48.cpp:15: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    long long\
    \ int mid = l.size() / 2;\n    float median = l[mid];\n    for (long long int\
    \ i = mid; i < l.size(); i++) {\n        if (l[i] < median) {\n            median\
    \ = l[i];\n        }\n    }\n    return median;\n}\nint main() {\n    auto candidate\
    \ = median;\n    assert(candidate((std::vector<long>({3, 1, 2, 4, 5}))) == (float(3)));\n\
    \    assert(candidate((std::vector<long>({-10, 4, 6, 1000, 10, 20}))) == (8.0));\n\
    \    assert(candidate((std::vector<long>({5}))) == (float(5)));\n    assert(candidate((std::vector<long>({6,\
    \ 5}))) == (5.5));\n    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2,\
    \ 7}))) == (float(7)));\n}\n"
  stdout: ''
  stderr: "tmp0p3tg2xq: /tmp/tmp0p3tg2xq.cpp:20: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    long long\
    \ int mid = l.size() / 2;\n    if (l.size() % 2 == 0) {\n        return l[mid];\n\
    \    } else {\n        return (l[mid] + l[mid-1]) / 2;\n    }\n}\nint main() {\n\
    \    auto candidate = median;\n    assert(candidate((std::vector<long>({3, 1,\
    \ 2, 4, 5}))) == (float(3)));\n    assert(candidate((std::vector<long>({-10, 4,\
    \ 6, 1000, 10, 20}))) == (8.0));\n    assert(candidate((std::vector<long>({5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({6, 5}))) == (5.5));\n\
    \    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2, 7}))) == (float(7)));\n\
    }\n"
  stdout: ''
  stderr: "tmp5rgn2fp2: /tmp/tmp5rgn2fp2.cpp:18: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    long long\
    \ int mid = l.size() / 2;\n    if (l.size() % 2 == 0) {\n        return l[mid];\n\
    \    } else {\n        return (l[mid] + l[mid]) / 2;\n    }\n}\nint main() {\n\
    \    auto candidate = median;\n    assert(candidate((std::vector<long>({3, 1,\
    \ 2, 4, 5}))) == (float(3)));\n    assert(candidate((std::vector<long>({-10, 4,\
    \ 6, 1000, 10, 20}))) == (8.0));\n    assert(candidate((std::vector<long>({5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({6, 5}))) == (5.5));\n\
    \    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2, 7}))) == (float(7)));\n\
    }\n"
  stdout: ''
  stderr: "tmpusf05348: /tmp/tmpusf05348.cpp:18: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    long long\
    \ ll = l.size();\n    if (ll % 2 == 0) {\n        return (l[ll/2 - 1] + l[ll/2])\
    \ / 2.0;\n    }\n    else {\n        return (l[ll/2] + l[ll/2 - 1]) / 2.0;\n \
    \   }\n}\nint main() {\n    auto candidate = median;\n    assert(candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3)));\n    assert(candidate((std::vector<long>({-10,\
    \ 4, 6, 1000, 10, 20}))) == (8.0));\n    assert(candidate((std::vector<long>({5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({6, 5}))) == (5.5));\n\
    \    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2, 7}))) == (float(7)));\n\
    }\n"
  stdout: ''
  stderr: "tmp9019uqzw: /tmp/tmp9019uqzw.cpp:19: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    long long\
    \ mid = l.size() / 2;\n    if (l.size() % 2 == 1) {\n        return l[mid];\n\
    \    } else {\n        return (l[mid] + l[mid-1]) / 2.0;\n    }\n}\nint main()\
    \ {\n    auto candidate = median;\n    assert(candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3)));\n    assert(candidate((std::vector<long>({-10,\
    \ 4, 6, 1000, 10, 20}))) == (8.0));\n    assert(candidate((std::vector<long>({5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({6, 5}))) == (5.5));\n\
    \    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2, 7}))) == (float(7)));\n\
    }\n"
  stdout: ''
  stderr: "tmpd80u8n0b: /tmp/tmpd80u8n0b.cpp:18: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    long long\
    \ int n = l.size();\n    if (n % 2 == 0) {\n        return l[n/2];\n    } else\
    \ {\n        return (l[n/2] + l[n/2-1])/2.0;\n    }\n}\nint main() {\n    auto\
    \ candidate = median;\n    assert(candidate((std::vector<long>({3, 1, 2, 4, 5})))\
    \ == (float(3)));\n    assert(candidate((std::vector<long>({-10, 4, 6, 1000, 10,\
    \ 20}))) == (8.0));\n    assert(candidate((std::vector<long>({5}))) == (float(5)));\n\
    \    assert(candidate((std::vector<long>({6, 5}))) == (5.5));\n    assert(candidate((std::vector<long>({8,\
    \ 1, 3, 9, 9, 2, 7}))) == (float(7)));\n}\n"
  stdout: ''
  stderr: "tmpzxmd8yph: /tmp/tmpzxmd8yph.cpp:18: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    long long\
    \ n = l.size();\n    if (n % 2 == 0) {\n        return l[n / 2];\n    }\n    float\
    \ m = (l[n / 2] + l[n / 2 - 1]) / 2;\n    return m;\n}\nint main() {\n    auto\
    \ candidate = median;\n    assert(candidate((std::vector<long>({3, 1, 2, 4, 5})))\
    \ == (float(3)));\n    assert(candidate((std::vector<long>({-10, 4, 6, 1000, 10,\
    \ 20}))) == (8.0));\n    assert(candidate((std::vector<long>({5}))) == (float(5)));\n\
    \    assert(candidate((std::vector<long>({6, 5}))) == (5.5));\n    assert(candidate((std::vector<long>({8,\
    \ 1, 3, 9, 9, 2, 7}))) == (float(7)));\n}\n"
  stdout: ''
  stderr: "tmpcx8y1ebq: /tmp/tmpcx8y1ebq.cpp:18: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    long long\
    \ ll = l.size();\n    if (ll % 2 == 0) {\n        return l[ll / 2 - 1] + (l[ll\
    \ / 2] + l[ll / 2 - 1]) / 2.0;\n    } else {\n        return l[ll / 2];\n    }\n\
    }\nint main() {\n    auto candidate = median;\n    assert(candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3)));\n    assert(candidate((std::vector<long>({-10,\
    \ 4, 6, 1000, 10, 20}))) == (8.0));\n    assert(candidate((std::vector<long>({5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({6, 5}))) == (5.5));\n\
    \    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2, 7}))) == (float(7)));\n\
    }\n"
  stdout: ''
  stderr: "tmp4acyiy_4: /tmp/tmp4acyiy_4.cpp:18: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    long long\
    \ mid = l.size() / 2;\n    if (l.size() % 2 == 0) {\n        return l[mid];\n\
    \    } else {\n        return (l[mid] + l[mid-1]) / 2.0;\n    }\n}\nint main()\
    \ {\n    auto candidate = median;\n    assert(candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3)));\n    assert(candidate((std::vector<long>({-10,\
    \ 4, 6, 1000, 10, 20}))) == (8.0));\n    assert(candidate((std::vector<long>({5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({6, 5}))) == (5.5));\n\
    \    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2, 7}))) == (float(7)));\n\
    }\n"
  stdout: ''
  stderr: "tmpuaspsx8n: /tmp/tmpuaspsx8n.cpp:18: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    long long\
    \ mid = l.size() / 2;\n    if (l.size() % 2 == 1) {\n        return l[mid];\n\
    \    }\n    float leftMedian = median(l.begin(), l.begin() + mid);\n    float\
    \ rightMedian = median(l.begin() + mid, l.end());\n    return (leftMedian + rightMedian)\
    \ / 2;\n}\nint main() {\n    auto candidate = median;\n    assert(candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3)));\n    assert(candidate((std::vector<long>({-10,\
    \ 4, 6, 1000, 10, 20}))) == (8.0));\n    assert(candidate((std::vector<long>({5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({6, 5}))) == (5.5));\n\
    \    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2, 7}))) == (float(7)));\n\
    }\n"
  stdout: ''
  stderr: "/tmp/tmprvff8jld.cpp: In function \u2018float median(std::vector<long int>)\u2019\
    :\n/tmp/tmprvff8jld.cpp:13:38: error: could not convert \u2018l.std::vector<long\
    \ int>::begin()\u2019 from \u2018std::vector<long int>::iterator\u2019 {aka \u2018\
    __gnu_cxx::__normal_iterator<long int*, std::vector<long int> >\u2019} to \u2018\
    std::vector<long int>\u2019\n   13 |     float leftMedian = median(l.begin(),\
    \ l.begin() + mid);\n      |                               ~~~~~~~^~\n      |\
    \                                      |\n      |                            \
    \          std::vector<long int>::iterator {aka __gnu_cxx::__normal_iterator<long\
    \ int*, std::vector<long int> >}\n/tmp/tmprvff8jld.cpp:14:42: error: could not\
    \ convert \u2018l.std::vector<long int>::begin().__gnu_cxx::__normal_iterator<long\
    \ int*, std::vector<long int> >::operator+(((__gnu_cxx::__normal_iterator<long\
    \ int*, std::vector<long int> >::difference_type)mid))\u2019 from \u2018__gnu_cxx::__normal_iterator<long\
    \ int*, std::vector<long int> >\u2019 to \u2018std::vector<long int>\u2019\n \
    \  14 |     float rightMedian = median(l.begin() + mid, l.end());\n      |   \
    \                             ~~~~~~~~~~^~~~~\n      |                       \
    \                   |\n      |                                          __gnu_cxx::__normal_iterator<long\
    \ int*, std::vector<long int> >\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    long long\
    \ int mid = l.size() / 2;\n    if (l.size() % 2 == 0) {\n        return l[mid];\n\
    \    }\n    else {\n        return (l[mid] + l[mid-1]) / 2;\n    }\n}\nint main()\
    \ {\n    auto candidate = median;\n    assert(candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3)));\n    assert(candidate((std::vector<long>({-10,\
    \ 4, 6, 1000, 10, 20}))) == (8.0));\n    assert(candidate((std::vector<long>({5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({6, 5}))) == (5.5));\n\
    \    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2, 7}))) == (float(7)));\n\
    }\n"
  stdout: ''
  stderr: "tmpbd3b1ffj: /tmp/tmpbd3b1ffj.cpp:19: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    long long\
    \ int n = l.size();\n    if (n % 2 == 0) {\n        return l[n / 2];\n    }\n\
    \    float mid = l[n / 2];\n    float leftMedian = median(l.sublist(0, n / 2));\n\
    \    float rightMedian = median(l.sublist((n / 2) + 1, n));\n    return std::max(leftMedian,\
    \ rightMedian);\n}\nint main() {\n    auto candidate = median;\n    assert(candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3)));\n    assert(candidate((std::vector<long>({-10,\
    \ 4, 6, 1000, 10, 20}))) == (8.0));\n    assert(candidate((std::vector<long>({5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({6, 5}))) == (5.5));\n\
    \    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2, 7}))) == (float(7)));\n\
    }\n"
  stdout: ''
  stderr: "/tmp/tmp61ki56vy.cpp: In function \u2018float median(std::vector<long int>)\u2019\
    :\n/tmp/tmp61ki56vy.cpp:14:33: error: \u2018class std::vector<long int>\u2019\
    \ has no member named \u2018sublist\u2019\n   14 |     float leftMedian = median(l.sublist(0,\
    \ n / 2));\n      |                                 ^~~~~~~\n/tmp/tmp61ki56vy.cpp:15:34:\
    \ error: \u2018class std::vector<long int>\u2019 has no member named \u2018sublist\u2019\
    \n   15 |     float rightMedian = median(l.sublist((n / 2) + 1, n));\n      |\
    \                                  ^~~~~~~\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    long long\
    \ ll = l.size();\n    if (ll % 2 == 0) {\n        return l[ll / 2 - 1] + (l[ll\
    \ / 2] + l[ll / 2 - 1]) / 2;\n    } else {\n        return l[ll / 2];\n    }\n\
    }\nint main() {\n    auto candidate = median;\n    assert(candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3)));\n    assert(candidate((std::vector<long>({-10,\
    \ 4, 6, 1000, 10, 20}))) == (8.0));\n    assert(candidate((std::vector<long>({5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({6, 5}))) == (5.5));\n\
    \    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2, 7}))) == (float(7)));\n\
    }\n"
  stdout: ''
  stderr: "tmp20xsuhk9: /tmp/tmp20xsuhk9.cpp:18: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    long long\
    \ int mid = l.size() / 2;\n    float median = l[mid];\n    for (long long int\
    \ i = mid; i < l.size(); i++) {\n        median = (median > l[i]) ? median : l[i];\n\
    \    }\n    return median;\n}\nint main() {\n    auto candidate = median;\n  \
    \  assert(candidate((std::vector<long>({3, 1, 2, 4, 5}))) == (float(3)));\n  \
    \  assert(candidate((std::vector<long>({-10, 4, 6, 1000, 10, 20}))) == (8.0));\n\
    \    assert(candidate((std::vector<long>({5}))) == (float(5)));\n    assert(candidate((std::vector<long>({6,\
    \ 5}))) == (5.5));\n    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2,\
    \ 7}))) == (float(7)));\n}\n"
  stdout: ''
  stderr: "tmpqhzqw0v6: /tmp/tmpqhzqw0v6.cpp:18: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    long long\
    \ mid = l.size() / 2;\n    float midVal = l[mid];\n    float leftMedian = median(l.begin()\
    \ + mid + 1, l.begin() + mid);\n    float rightMedian = median(l.begin(), l.begin()\
    \ + mid);\n    return (midVal + rightMedian) / 2.0;\n}\nint main() {\n    auto\
    \ candidate = median;\n    assert(candidate((std::vector<long>({3, 1, 2, 4, 5})))\
    \ == (float(3)));\n    assert(candidate((std::vector<long>({-10, 4, 6, 1000, 10,\
    \ 20}))) == (8.0));\n    assert(candidate((std::vector<long>({5}))) == (float(5)));\n\
    \    assert(candidate((std::vector<long>({6, 5}))) == (5.5));\n    assert(candidate((std::vector<long>({8,\
    \ 1, 3, 9, 9, 2, 7}))) == (float(7)));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp5087rn1v.cpp: In function \u2018float median(std::vector<long int>)\u2019\
    :\n/tmp/tmp5087rn1v.cpp:11:47: error: could not convert \u2018l.std::vector<long\
    \ int>::begin().__gnu_cxx::__normal_iterator<long int*, std::vector<long int>\
    \ >::operator+(((__gnu_cxx::__normal_iterator<long int*, std::vector<long int>\
    \ >::difference_type)mid)).__gnu_cxx::__normal_iterator<long int*, std::vector<long\
    \ int> >::operator+(1)\u2019 from \u2018__gnu_cxx::__normal_iterator<long int*,\
    \ std::vector<long int> >\u2019 to \u2018std::vector<long int>\u2019\n   11 |\
    \     float leftMedian = median(l.begin() + mid + 1, l.begin() + mid);\n     \
    \ |                               ~~~~~~~~~~~~~~~~^~~\n      |               \
    \                                |\n      |                                  \
    \             __gnu_cxx::__normal_iterator<long int*, std::vector<long int> >\n\
    /tmp/tmp5087rn1v.cpp:12:39: error: could not convert \u2018l.std::vector<long\
    \ int>::begin()\u2019 from \u2018std::vector<long int>::iterator\u2019 {aka \u2018\
    __gnu_cxx::__normal_iterator<long int*, std::vector<long int> >\u2019} to \u2018\
    std::vector<long int>\u2019\n   12 |     float rightMedian = median(l.begin(),\
    \ l.begin() + mid);\n      |                                ~~~~~~~^~\n      |\
    \                                       |\n      |                           \
    \            std::vector<long int>::iterator {aka __gnu_cxx::__normal_iterator<long\
    \ int*, std::vector<long int> >}\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    long long\
    \ int n = l.size();\n    if (n < 2) return l[0];\n    long long int mid = n /\
    \ 2;\n    float left = (l[mid] - l[mid-1]) / 2.0;\n    float right = (l[mid+1]\
    \ - l[mid]) / 2.0;\n    if (left > right) return median(l);\n    return l[mid];\n\
    }\nint main() {\n    auto candidate = median;\n    assert(candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3)));\n    assert(candidate((std::vector<long>({-10,\
    \ 4, 6, 1000, 10, 20}))) == (8.0));\n    assert(candidate((std::vector<long>({5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({6, 5}))) == (5.5));\n\
    \    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2, 7}))) == (float(7)));\n\
    }\n"
  stdout: ''
  stderr: "tmpo4rqs5h2: /tmp/tmpo4rqs5h2.cpp:19: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    long long\
    \ mid = l.size() / 2;\n    long long left = l[mid];\n    long long right = l[mid+1];\n\
    \    if (left > right) {\n        return left;\n    }\n    return right;\n}\n\
    int main() {\n    auto candidate = median;\n    assert(candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3)));\n    assert(candidate((std::vector<long>({-10,\
    \ 4, 6, 1000, 10, 20}))) == (8.0));\n    assert(candidate((std::vector<long>({5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({6, 5}))) == (5.5));\n\
    \    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2, 7}))) == (float(7)));\n\
    }\n"
  stdout: ''
  stderr: "tmp8ll__lmi: /tmp/tmp8ll__lmi.cpp:19: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    long mid\
    \ = l.size() / 2;\n    if (l.size() % 2 == 0) {\n        return l[mid];\n    }\
    \ else {\n        return (l[mid] + l[mid]) / 2.0;\n    }\n}\nint main() {\n  \
    \  auto candidate = median;\n    assert(candidate((std::vector<long>({3, 1, 2,\
    \ 4, 5}))) == (float(3)));\n    assert(candidate((std::vector<long>({-10, 4, 6,\
    \ 1000, 10, 20}))) == (8.0));\n    assert(candidate((std::vector<long>({5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({6, 5}))) == (5.5));\n\
    \    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2, 7}))) == (float(7)));\n\
    }\n"
  stdout: ''
  stderr: "tmpxvy8cgfj: /tmp/tmpxvy8cgfj.cpp:18: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    long long\
    \ ll = l.size();\n    if (ll % 2 == 0) {\n        return l[ll/2 - 1] + l[ll/2];\n\
    \    }\n    return l[ll/2];\n}\nint main() {\n    auto candidate = median;\n \
    \   assert(candidate((std::vector<long>({3, 1, 2, 4, 5}))) == (float(3)));\n \
    \   assert(candidate((std::vector<long>({-10, 4, 6, 1000, 10, 20}))) == (8.0));\n\
    \    assert(candidate((std::vector<long>({5}))) == (float(5)));\n    assert(candidate((std::vector<long>({6,\
    \ 5}))) == (5.5));\n    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2,\
    \ 7}))) == (float(7)));\n}\n"
  stdout: ''
  stderr: "tmpuvjaf0u6: /tmp/tmpuvjaf0u6.cpp:17: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    long long\
    \ int n = l.size();\n    assert(n >= 1);\n    long long int mid = n / 2;\n   \
    \ float median = l[mid];\n    long long int left = 0, right = mid;\n    while\
    \ (left < right) {\n        long long int mid = (left + right) / 2;\n        if\
    \ (l[mid] < median) {\n            left = mid + 1;\n        } else {\n       \
    \     right = mid;\n        }\n    }\n    if (left == right) {\n        return\
    \ median;\n    }\n    return l[left];\n}\nint main() {\n    auto candidate = median;\n\
    \    assert(candidate((std::vector<long>({3, 1, 2, 4, 5}))) == (float(3)));\n\
    \    assert(candidate((std::vector<long>({-10, 4, 6, 1000, 10, 20}))) == (8.0));\n\
    \    assert(candidate((std::vector<long>({5}))) == (float(5)));\n    assert(candidate((std::vector<long>({6,\
    \ 5}))) == (5.5));\n    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2,\
    \ 7}))) == (float(7)));\n}\n"
  stdout: ''
  stderr: "tmps24v_3q4: /tmp/tmps24v_3q4.cpp:29: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    long long\
    \ n = l.size();\n    long long mid = n / 2;\n    long long left = 0, right = n;\n\
    \    float midval = l[mid];\n    while (left < right) {\n        while (left <\
    \ right && l[left] < midval) {\n            left++;\n        }\n        while\
    \ (left < right && l[right] > midval) {\n            right--;\n        }\n   \
    \     if (left < right) {\n            long long temp = l[left];\n           \
    \ l[left] = l[right];\n            l[right] = temp;\n            left++;\n   \
    \         right--;\n        }\n    }\n    return midval;\n}\nint main() {\n  \
    \  auto candidate = median;\n    assert(candidate((std::vector<long>({3, 1, 2,\
    \ 4, 5}))) == (float(3)));\n    assert(candidate((std::vector<long>({-10, 4, 6,\
    \ 1000, 10, 20}))) == (8.0));\n    assert(candidate((std::vector<long>({5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({6, 5}))) == (5.5));\n\
    \    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2, 7}))) == (float(7)));\n\
    }\n"
  stdout: ''
  stderr: "tmp4i3rgvxk: /tmp/tmp4i3rgvxk.cpp:32: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    long long\
    \ int mid = l.size() / 2;\n    float midval = l[mid];\n    float leftval = l[mid-1];\n\
    \    float rightval = l[mid+1];\n    if (leftval > rightval)\n        return midval;\n\
    \    else\n        return rightval;\n}\nint main() {\n    auto candidate = median;\n\
    \    assert(candidate((std::vector<long>({3, 1, 2, 4, 5}))) == (float(3)));\n\
    \    assert(candidate((std::vector<long>({-10, 4, 6, 1000, 10, 20}))) == (8.0));\n\
    \    assert(candidate((std::vector<long>({5}))) == (float(5)));\n    assert(candidate((std::vector<long>({6,\
    \ 5}))) == (5.5));\n    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2,\
    \ 7}))) == (float(7)));\n}\n"
  stdout: ''
  stderr: "tmpwlsr5ts2: /tmp/tmpwlsr5ts2.cpp:20: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    long long\
    \ int n = l.size();\n    if (n % 2 == 0) {\n        return l[n/2];\n    }\n  \
    \  else {\n        return (l[n/2] + l[n/2-1])/2.0;\n    }\n}\nint main() {\n \
    \   auto candidate = median;\n    assert(candidate((std::vector<long>({3, 1, 2,\
    \ 4, 5}))) == (float(3)));\n    assert(candidate((std::vector<long>({-10, 4, 6,\
    \ 1000, 10, 20}))) == (8.0));\n    assert(candidate((std::vector<long>({5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({6, 5}))) == (5.5));\n\
    \    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2, 7}))) == (float(7)));\n\
    }\n"
  stdout: ''
  stderr: "tmpu26mvb3_: /tmp/tmpu26mvb3_.cpp:19: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    long long\
    \ ll = l.size();\n    if (ll % 2 == 0) {\n        return l[ll / 2 - 1] + (l[ll\
    \ / 2] + l[ll / 2 - 1]) / 2;\n    } else {\n        return l[ll / 2];\n    }\n\
    }\nint main() {\n    auto candidate = median;\n    assert(candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3)));\n    assert(candidate((std::vector<long>({-10,\
    \ 4, 6, 1000, 10, 20}))) == (8.0));\n    assert(candidate((std::vector<long>({5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({6, 5}))) == (5.5));\n\
    \    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2, 7}))) == (float(7)));\n\
    }\n"
  stdout: ''
  stderr: "tmppp25v95b: /tmp/tmppp25v95b.cpp:18: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    long long\
    \ int mid = l.size() / 2;\n    float midVal = l[mid];\n    float leftMedian =\
    \ median(l.begin(), l.begin() + mid);\n    float rightMedian = median(l.begin()\
    \ + mid + 1, l.end());\n    return midVal + (leftMedian + rightMedian) / 2;\n\
    }\nint main() {\n    auto candidate = median;\n    assert(candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3)));\n    assert(candidate((std::vector<long>({-10,\
    \ 4, 6, 1000, 10, 20}))) == (8.0));\n    assert(candidate((std::vector<long>({5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({6, 5}))) == (5.5));\n\
    \    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2, 7}))) == (float(7)));\n\
    }\n"
  stdout: ''
  stderr: "/tmp/tmplw_hqxls.cpp: In function \u2018float median(std::vector<long int>)\u2019\
    :\n/tmp/tmplw_hqxls.cpp:11:38: error: could not convert \u2018l.std::vector<long\
    \ int>::begin()\u2019 from \u2018std::vector<long int>::iterator\u2019 {aka \u2018\
    __gnu_cxx::__normal_iterator<long int*, std::vector<long int> >\u2019} to \u2018\
    std::vector<long int>\u2019\n   11 |     float leftMedian = median(l.begin(),\
    \ l.begin() + mid);\n      |                               ~~~~~~~^~\n      |\
    \                                      |\n      |                            \
    \          std::vector<long int>::iterator {aka __gnu_cxx::__normal_iterator<long\
    \ int*, std::vector<long int> >}\n/tmp/tmplw_hqxls.cpp:12:48: error: could not\
    \ convert \u2018l.std::vector<long int>::begin().__gnu_cxx::__normal_iterator<long\
    \ int*, std::vector<long int> >::operator+(((__gnu_cxx::__normal_iterator<long\
    \ int*, std::vector<long int> >::difference_type)mid)).__gnu_cxx::__normal_iterator<long\
    \ int*, std::vector<long int> >::operator+(1)\u2019 from \u2018__gnu_cxx::__normal_iterator<long\
    \ int*, std::vector<long int> >\u2019 to \u2018std::vector<long int>\u2019\n \
    \  12 |     float rightMedian = median(l.begin() + mid + 1, l.end());\n      |\
    \                                ~~~~~~~~~~~~~~~~^~~\n      |                \
    \                                |\n      |                                  \
    \              __gnu_cxx::__normal_iterator<long int*, std::vector<long int> >\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    long long\
    \ int n = l.size();\n    if (n % 2 == 0) {\n        return l[n/2];\n    }\n  \
    \  float m = (l[n/2] + l[n/2-1])/2;\n    return m;\n}\nint main() {\n    auto\
    \ candidate = median;\n    assert(candidate((std::vector<long>({3, 1, 2, 4, 5})))\
    \ == (float(3)));\n    assert(candidate((std::vector<long>({-10, 4, 6, 1000, 10,\
    \ 20}))) == (8.0));\n    assert(candidate((std::vector<long>({5}))) == (float(5)));\n\
    \    assert(candidate((std::vector<long>({6, 5}))) == (5.5));\n    assert(candidate((std::vector<long>({8,\
    \ 1, 3, 9, 9, 2, 7}))) == (float(7)));\n}\n"
  stdout: ''
  stderr: "tmpbdur1d19: /tmp/tmpbdur1d19.cpp:18: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    long long\
    \ int n = l.size();\n    assert(n >= 1);\n    long long int mid = n / 2;\n   \
    \ long long int left = 0, right = mid;\n    float midVal = l[mid];\n    while\
    \ (left < right) {\n        long long int midValLeft = l[left];\n        long\
    \ long int midValRight = l[right];\n        if (midValLeft < midValRight) {\n\
    \            left++;\n        } else if (midValLeft > midValRight) {\n       \
    \     right--;\n        } else {\n            return midVal;\n        }\n    }\n\
    \    return midVal;\n}\nint main() {\n    auto candidate = median;\n    assert(candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3)));\n    assert(candidate((std::vector<long>({-10,\
    \ 4, 6, 1000, 10, 20}))) == (8.0));\n    assert(candidate((std::vector<long>({5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({6, 5}))) == (5.5));\n\
    \    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2, 7}))) == (float(7)));\n\
    }\n"
  stdout: ''
  stderr: "tmp8db5f5s8: /tmp/tmp8db5f5s8.cpp:29: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    long mid\
    \ = l.size() / 2;\n    if (l.size() % 2 == 1) {\n        return l[mid];\n    }\
    \ else {\n        return (l[mid] + l[mid]) / 2.0;\n    }\n}\nint main() {\n  \
    \  auto candidate = median;\n    assert(candidate((std::vector<long>({3, 1, 2,\
    \ 4, 5}))) == (float(3)));\n    assert(candidate((std::vector<long>({-10, 4, 6,\
    \ 1000, 10, 20}))) == (8.0));\n    assert(candidate((std::vector<long>({5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({6, 5}))) == (5.5));\n\
    \    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2, 7}))) == (float(7)));\n\
    }\n"
  stdout: ''
  stderr: "tmp97g6l8im: /tmp/tmp97g6l8im.cpp:18: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    long long\
    \ int n = l.size();\n    if (n < 2) return l[0];\n    float mid = l[n / 2];\n\
    \    float leftMedian = median(l.sublist(0, n / 2));\n    float rightMedian =\
    \ median(l.sublist(n / 2, n));\n    return std::max(leftMedian, rightMedian);\n\
    }\nint main() {\n    auto candidate = median;\n    assert(candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3)));\n    assert(candidate((std::vector<long>({-10,\
    \ 4, 6, 1000, 10, 20}))) == (8.0));\n    assert(candidate((std::vector<long>({5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({6, 5}))) == (5.5));\n\
    \    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2, 7}))) == (float(7)));\n\
    }\n"
  stdout: ''
  stderr: "/tmp/tmppp77kkdq.cpp: In function \u2018float median(std::vector<long int>)\u2019\
    :\n/tmp/tmppp77kkdq.cpp:12:33: error: \u2018class std::vector<long int>\u2019\
    \ has no member named \u2018sublist\u2019\n   12 |     float leftMedian = median(l.sublist(0,\
    \ n / 2));\n      |                                 ^~~~~~~\n/tmp/tmppp77kkdq.cpp:13:34:\
    \ error: \u2018class std::vector<long int>\u2019 has no member named \u2018sublist\u2019\
    \n   13 |     float rightMedian = median(l.sublist(n / 2, n));\n      |      \
    \                            ^~~~~~~\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    long long\
    \ int n = l.size();\n    if (n <= 1)\n        return l[0];\n    long long int\
    \ mid = n / 2;\n    float leftMedian = median(l.sublist(0, mid));\n    float rightMedian\
    \ = median(l.sublist(mid, n - 1));\n    return 0.5 * (leftMedian + rightMedian);\n\
    }\nint main() {\n    auto candidate = median;\n    assert(candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3)));\n    assert(candidate((std::vector<long>({-10,\
    \ 4, 6, 1000, 10, 20}))) == (8.0));\n    assert(candidate((std::vector<long>({5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({6, 5}))) == (5.5));\n\
    \    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2, 7}))) == (float(7)));\n\
    }\n"
  stdout: ''
  stderr: "/tmp/tmpyltzhng2.cpp: In function \u2018float median(std::vector<long int>)\u2019\
    :\n/tmp/tmpyltzhng2.cpp:13:33: error: \u2018class std::vector<long int>\u2019\
    \ has no member named \u2018sublist\u2019\n   13 |     float leftMedian = median(l.sublist(0,\
    \ mid));\n      |                                 ^~~~~~~\n/tmp/tmpyltzhng2.cpp:14:34:\
    \ error: \u2018class std::vector<long int>\u2019 has no member named \u2018sublist\u2019\
    \n   14 |     float rightMedian = median(l.sublist(mid, n - 1));\n      |    \
    \                              ^~~~~~~\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    long long\
    \ ll = l.size();\n    if (ll % 2 == 0)\n        return l[ll/2 - 1] + l[ll/2];\n\
    \    return l[ll/2];\n}\nint main() {\n    auto candidate = median;\n    assert(candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3)));\n    assert(candidate((std::vector<long>({-10,\
    \ 4, 6, 1000, 10, 20}))) == (8.0));\n    assert(candidate((std::vector<long>({5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({6, 5}))) == (5.5));\n\
    \    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2, 7}))) == (float(7)));\n\
    }\n"
  stdout: ''
  stderr: "tmpibgcvm27: /tmp/tmpibgcvm27.cpp:16: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    long long\
    \ int mid = l.size() / 2;\n    float median = l[mid];\n    for (long long int\
    \ i = mid; i < l.size(); i++) {\n        if (l[i] < median) {\n            median\
    \ = l[i];\n        }\n    }\n    return median;\n}\nint main() {\n    auto candidate\
    \ = median;\n    assert(candidate((std::vector<long>({3, 1, 2, 4, 5}))) == (float(3)));\n\
    \    assert(candidate((std::vector<long>({-10, 4, 6, 1000, 10, 20}))) == (8.0));\n\
    \    assert(candidate((std::vector<long>({5}))) == (float(5)));\n    assert(candidate((std::vector<long>({6,\
    \ 5}))) == (5.5));\n    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2,\
    \ 7}))) == (float(7)));\n}\n"
  stdout: ''
  stderr: "tmpe2nu4jb1: /tmp/tmpe2nu4jb1.cpp:20: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    long mid\
    \ = l.size() / 2;\n    if (l.size() % 2 == 1) {\n        return l[mid];\n    }\
    \ else {\n        return (l[mid] + l[mid-1]) / 2.0;\n    }\n}\nint main() {\n\
    \    auto candidate = median;\n    assert(candidate((std::vector<long>({3, 1,\
    \ 2, 4, 5}))) == (float(3)));\n    assert(candidate((std::vector<long>({-10, 4,\
    \ 6, 1000, 10, 20}))) == (8.0));\n    assert(candidate((std::vector<long>({5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({6, 5}))) == (5.5));\n\
    \    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2, 7}))) == (float(7)));\n\
    }\n"
  stdout: ''
  stderr: "tmp_qijce2n: /tmp/tmp_qijce2n.cpp:18: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    long long\
    \ int n = l.size();\n    if (n % 2 == 0) {\n        return l[n/2];\n    }\n  \
    \  else {\n        return (l[n/2] + l[n/2-1])/2;\n    }\n}\nint main() {\n   \
    \ auto candidate = median;\n    assert(candidate((std::vector<long>({3, 1, 2,\
    \ 4, 5}))) == (float(3)));\n    assert(candidate((std::vector<long>({-10, 4, 6,\
    \ 1000, 10, 20}))) == (8.0));\n    assert(candidate((std::vector<long>({5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({6, 5}))) == (5.5));\n\
    \    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2, 7}))) == (float(7)));\n\
    }\n"
  stdout: ''
  stderr: "tmpm1daj6l0: /tmp/tmpm1daj6l0.cpp:19: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    long long\
    \ int mid = l.size() / 2;\n    if (l.size() % 2 == 0) {\n        return l[mid];\n\
    \    } else {\n        return (l[mid] + l[mid-1]) / 2;\n    }\n}\nint main() {\n\
    \    auto candidate = median;\n    assert(candidate((std::vector<long>({3, 1,\
    \ 2, 4, 5}))) == (float(3)));\n    assert(candidate((std::vector<long>({-10, 4,\
    \ 6, 1000, 10, 20}))) == (8.0));\n    assert(candidate((std::vector<long>({5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({6, 5}))) == (5.5));\n\
    \    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2, 7}))) == (float(7)));\n\
    }\n"
  stdout: ''
  stderr: "tmpcjpr1l1w: /tmp/tmpcjpr1l1w.cpp:18: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    long long\
    \ int mid = l.size() / 2;\n    float midValue = l[mid];\n    float leftMedian\
    \ = median(l.begin(), l.begin() + mid);\n    float rightMedian = median(l.begin()\
    \ + mid + 1, l.end());\n    if (leftMedian > rightMedian) {\n        return leftMedian;\n\
    \    } else {\n        return rightMedian;\n    }\n}\nint main() {\n    auto candidate\
    \ = median;\n    assert(candidate((std::vector<long>({3, 1, 2, 4, 5}))) == (float(3)));\n\
    \    assert(candidate((std::vector<long>({-10, 4, 6, 1000, 10, 20}))) == (8.0));\n\
    \    assert(candidate((std::vector<long>({5}))) == (float(5)));\n    assert(candidate((std::vector<long>({6,\
    \ 5}))) == (5.5));\n    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2,\
    \ 7}))) == (float(7)));\n}\n"
  stdout: ''
  stderr: "/tmp/tmppi40inht.cpp: In function \u2018float median(std::vector<long int>)\u2019\
    :\n/tmp/tmppi40inht.cpp:11:38: error: could not convert \u2018l.std::vector<long\
    \ int>::begin()\u2019 from \u2018std::vector<long int>::iterator\u2019 {aka \u2018\
    __gnu_cxx::__normal_iterator<long int*, std::vector<long int> >\u2019} to \u2018\
    std::vector<long int>\u2019\n   11 |     float leftMedian = median(l.begin(),\
    \ l.begin() + mid);\n      |                               ~~~~~~~^~\n      |\
    \                                      |\n      |                            \
    \          std::vector<long int>::iterator {aka __gnu_cxx::__normal_iterator<long\
    \ int*, std::vector<long int> >}\n/tmp/tmppi40inht.cpp:12:48: error: could not\
    \ convert \u2018l.std::vector<long int>::begin().__gnu_cxx::__normal_iterator<long\
    \ int*, std::vector<long int> >::operator+(((__gnu_cxx::__normal_iterator<long\
    \ int*, std::vector<long int> >::difference_type)mid)).__gnu_cxx::__normal_iterator<long\
    \ int*, std::vector<long int> >::operator+(1)\u2019 from \u2018__gnu_cxx::__normal_iterator<long\
    \ int*, std::vector<long int> >\u2019 to \u2018std::vector<long int>\u2019\n \
    \  12 |     float rightMedian = median(l.begin() + mid + 1, l.end());\n      |\
    \                                ~~~~~~~~~~~~~~~~^~~\n      |                \
    \                                |\n      |                                  \
    \              __gnu_cxx::__normal_iterator<long int*, std::vector<long int> >\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    long long\
    \ mid = l.size() / 2;\n    if (l.size() % 2 == 0) {\n        return l[mid];\n\
    \    }\n    float a = l[mid];\n    float b = l[mid+1];\n    return ((a + b) /\
    \ 2.0);\n}\nint main() {\n    auto candidate = median;\n    assert(candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3)));\n    assert(candidate((std::vector<long>({-10,\
    \ 4, 6, 1000, 10, 20}))) == (8.0));\n    assert(candidate((std::vector<long>({5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({6, 5}))) == (5.5));\n\
    \    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2, 7}))) == (float(7)));\n\
    }\n"
  stdout: ''
  stderr: "tmp5pz333n0: /tmp/tmp5pz333n0.cpp:20: int main(): Assertion `candidate((std::vector<long>({-10,\
    \ 4, 6, 1000, 10, 20}))) == (8.0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    long long\
    \ int mid = l.size() / 2;\n    float median = l[mid];\n    for (long long int\
    \ i = mid; i < l.size(); i++) {\n        median = (median > l[i]) ? median : l[i];\n\
    \    }\n    return median;\n}\nint main() {\n    auto candidate = median;\n  \
    \  assert(candidate((std::vector<long>({3, 1, 2, 4, 5}))) == (float(3)));\n  \
    \  assert(candidate((std::vector<long>({-10, 4, 6, 1000, 10, 20}))) == (8.0));\n\
    \    assert(candidate((std::vector<long>({5}))) == (float(5)));\n    assert(candidate((std::vector<long>({6,\
    \ 5}))) == (5.5));\n    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2,\
    \ 7}))) == (float(7)));\n}\n"
  stdout: ''
  stderr: "tmpya8vo08m: /tmp/tmpya8vo08m.cpp:18: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    long long\
    \ int n = l.size();\n    if (n <= 1) return l[0];\n    long long int mid = n /\
    \ 2;\n    float pivot = l[mid];\n    float leftMedian = median(l.sublist(0, mid));\n\
    \    float rightMedian = median(l.sublist(mid, n - 1));\n    return pivot + ((leftMedian\
    \ + rightMedian) / 2);\n}\nint main() {\n    auto candidate = median;\n    assert(candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3)));\n    assert(candidate((std::vector<long>({-10,\
    \ 4, 6, 1000, 10, 20}))) == (8.0));\n    assert(candidate((std::vector<long>({5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({6, 5}))) == (5.5));\n\
    \    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2, 7}))) == (float(7)));\n\
    }\n"
  stdout: ''
  stderr: "/tmp/tmph8b7sfzi.cpp: In function \u2018float median(std::vector<long int>)\u2019\
    :\n/tmp/tmph8b7sfzi.cpp:13:33: error: \u2018class std::vector<long int>\u2019\
    \ has no member named \u2018sublist\u2019\n   13 |     float leftMedian = median(l.sublist(0,\
    \ mid));\n      |                                 ^~~~~~~\n/tmp/tmph8b7sfzi.cpp:14:34:\
    \ error: \u2018class std::vector<long int>\u2019 has no member named \u2018sublist\u2019\
    \n   14 |     float rightMedian = median(l.sublist(mid, n - 1));\n      |    \
    \                              ^~~~~~~\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    long long\
    \ int mid = l.size() / 2;\n    if (l.size() % 2 == 0) {\n        return l[mid];\n\
    \    } else {\n        return (l[mid] + l[mid]) / 2.0;\n    }\n}\nint main() {\n\
    \    auto candidate = median;\n    assert(candidate((std::vector<long>({3, 1,\
    \ 2, 4, 5}))) == (float(3)));\n    assert(candidate((std::vector<long>({-10, 4,\
    \ 6, 1000, 10, 20}))) == (8.0));\n    assert(candidate((std::vector<long>({5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({6, 5}))) == (5.5));\n\
    \    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2, 7}))) == (float(7)));\n\
    }\n"
  stdout: ''
  stderr: "tmpyfos0ap4: /tmp/tmpyfos0ap4.cpp:18: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    long long\
    \ int mid = l.size() / 2;\n    float median = l[mid];\n    long long int left\
    \ = 0, right = mid;\n    while (left < right) {\n        while (left < right &&\
    \ l[left] < median) {\n            left++;\n        }\n        while (left < right\
    \ && l[right] > median) {\n            right--;\n        }\n        if (left <\
    \ right) {\n            std::swap(l[left], l[right]);\n        }\n    }\n    return\
    \ median;\n}\nint main() {\n    auto candidate = median;\n    assert(candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3)));\n    assert(candidate((std::vector<long>({-10,\
    \ 4, 6, 1000, 10, 20}))) == (8.0));\n    assert(candidate((std::vector<long>({5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({6, 5}))) == (5.5));\n\
    \    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2, 7}))) == (float(7)));\n\
    }\n"
  stdout: ''
  stderr: "tmp1chip13s: /tmp/tmp1chip13s.cpp:27: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    long long\
    \ int n = l.size();\n    if (n % 2 == 0) {\n        return l[n / 2];\n    }\n\
    \    float mid = n / 2.0;\n    float leftMedian = median(l.sublist(0, mid));\n\
    \    float rightMedian = median(l.sublist(mid, n - 1));\n    return 0.5 * (leftMedian\
    \ + rightMedian);\n}\nint main() {\n    auto candidate = median;\n    assert(candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3)));\n    assert(candidate((std::vector<long>({-10,\
    \ 4, 6, 1000, 10, 20}))) == (8.0));\n    assert(candidate((std::vector<long>({5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({6, 5}))) == (5.5));\n\
    \    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2, 7}))) == (float(7)));\n\
    }\n"
  stdout: ''
  stderr: "/tmp/tmpprlceiko.cpp: In function \u2018float median(std::vector<long int>)\u2019\
    :\n/tmp/tmpprlceiko.cpp:14:33: error: \u2018class std::vector<long int>\u2019\
    \ has no member named \u2018sublist\u2019\n   14 |     float leftMedian = median(l.sublist(0,\
    \ mid));\n      |                                 ^~~~~~~\n/tmp/tmpprlceiko.cpp:15:34:\
    \ error: \u2018class std::vector<long int>\u2019 has no member named \u2018sublist\u2019\
    \n   15 |     float rightMedian = median(l.sublist(mid, n - 1));\n      |    \
    \                              ^~~~~~~\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    long long\
    \ int mid = l.size() / 2;\n    float a = l[mid];\n    float b = l[mid+1];\n  \
    \  return a > b ? a : b;\n}\nint main() {\n    auto candidate = median;\n    assert(candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3)));\n    assert(candidate((std::vector<long>({-10,\
    \ 4, 6, 1000, 10, 20}))) == (8.0));\n    assert(candidate((std::vector<long>({5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({6, 5}))) == (5.5));\n\
    \    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2, 7}))) == (float(7)));\n\
    }\n"
  stdout: ''
  stderr: "tmpg2l1264x: /tmp/tmpg2l1264x.cpp:16: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    long long\
    \ int n = l.size();\n    if (n % 2 == 0) {\n        return l[n / 2];\n    } else\
    \ {\n        return (l[n / 2] + l[n / 2 - 1]) / 2;\n    }\n}\nint main() {\n \
    \   auto candidate = median;\n    assert(candidate((std::vector<long>({3, 1, 2,\
    \ 4, 5}))) == (float(3)));\n    assert(candidate((std::vector<long>({-10, 4, 6,\
    \ 1000, 10, 20}))) == (8.0));\n    assert(candidate((std::vector<long>({5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({6, 5}))) == (5.5));\n\
    \    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2, 7}))) == (float(7)));\n\
    }\n"
  stdout: ''
  stderr: "tmp0k8k_t0t: /tmp/tmp0k8k_t0t.cpp:18: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    long long\
    \ int n = l.size();\n    if (n <= 1)\n        return l[0];\n    long long int\
    \ mid = n / 2;\n    float midval = l[mid];\n    float leftval = l[mid];\n    float\
    \ rightval = l[n - 1];\n    for (long long int i = mid; i < n; i++) {\n      \
    \  if (l[i] < leftval)\n            leftval = l[i];\n        else if (l[i] > rightval)\n\
    \            rightval = l[i];\n    }\n    return midval;\n}\nint main() {\n  \
    \  auto candidate = median;\n    assert(candidate((std::vector<long>({3, 1, 2,\
    \ 4, 5}))) == (float(3)));\n    assert(candidate((std::vector<long>({-10, 4, 6,\
    \ 1000, 10, 20}))) == (8.0));\n    assert(candidate((std::vector<long>({5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({6, 5}))) == (5.5));\n\
    \    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2, 7}))) == (float(7)));\n\
    }\n"
  stdout: ''
  stderr: "tmpcquimkzm: /tmp/tmpcquimkzm.cpp:26: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    long long\
    \ int mid = l.size() / 2;\n    if (l.size() % 2 == 0) {\n        return l[mid];\n\
    \    } else {\n        return (l[mid] + l[mid-1]) / 2.0;\n    }\n}\nint main()\
    \ {\n    auto candidate = median;\n    assert(candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3)));\n    assert(candidate((std::vector<long>({-10,\
    \ 4, 6, 1000, 10, 20}))) == (8.0));\n    assert(candidate((std::vector<long>({5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({6, 5}))) == (5.5));\n\
    \    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2, 7}))) == (float(7)));\n\
    }\n"
  stdout: ''
  stderr: "tmp9xgao92m: /tmp/tmp9xgao92m.cpp:18: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    long long\
    \ int n = l.size();\n    if (n <= 1) return l[0];\n    long long int mid = n /\
    \ 2;\n    float leftMedian = median(l.subvec(0, mid));\n    float rightMedian\
    \ = median(l.subvec(mid, n - 1));\n    return 0.5 * (leftMedian + rightMedian);\n\
    }\nint main() {\n    auto candidate = median;\n    assert(candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3)));\n    assert(candidate((std::vector<long>({-10,\
    \ 4, 6, 1000, 10, 20}))) == (8.0));\n    assert(candidate((std::vector<long>({5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({6, 5}))) == (5.5));\n\
    \    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2, 7}))) == (float(7)));\n\
    }\n"
  stdout: ''
  stderr: "/tmp/tmpx8kayov_.cpp: In function \u2018float median(std::vector<long int>)\u2019\
    :\n/tmp/tmpx8kayov_.cpp:12:33: error: \u2018class std::vector<long int>\u2019\
    \ has no member named \u2018subvec\u2019\n   12 |     float leftMedian = median(l.subvec(0,\
    \ mid));\n      |                                 ^~~~~~\n/tmp/tmpx8kayov_.cpp:13:34:\
    \ error: \u2018class std::vector<long int>\u2019 has no member named \u2018subvec\u2019\
    \n   13 |     float rightMedian = median(l.subvec(mid, n - 1));\n      |     \
    \                             ^~~~~~\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    long long\
    \ int mid = l.size() / 2;\n    float midVal = l[mid];\n    float leftMedian =\
    \ median(l.begin() + mid + 1, l.begin() + mid);\n    float rightMedian = median(l.begin(),\
    \ l.begin() + mid + 1);\n    return midVal + (leftMedian + rightMedian) / 2;\n\
    }\nint main() {\n    auto candidate = median;\n    assert(candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3)));\n    assert(candidate((std::vector<long>({-10,\
    \ 4, 6, 1000, 10, 20}))) == (8.0));\n    assert(candidate((std::vector<long>({5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({6, 5}))) == (5.5));\n\
    \    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2, 7}))) == (float(7)));\n\
    }\n"
  stdout: ''
  stderr: "/tmp/tmpfp649sbb.cpp: In function \u2018float median(std::vector<long int>)\u2019\
    :\n/tmp/tmpfp649sbb.cpp:11:47: error: could not convert \u2018l.std::vector<long\
    \ int>::begin().__gnu_cxx::__normal_iterator<long int*, std::vector<long int>\
    \ >::operator+(((__gnu_cxx::__normal_iterator<long int*, std::vector<long int>\
    \ >::difference_type)mid)).__gnu_cxx::__normal_iterator<long int*, std::vector<long\
    \ int> >::operator+(1)\u2019 from \u2018__gnu_cxx::__normal_iterator<long int*,\
    \ std::vector<long int> >\u2019 to \u2018std::vector<long int>\u2019\n   11 |\
    \     float leftMedian = median(l.begin() + mid + 1, l.begin() + mid);\n     \
    \ |                               ~~~~~~~~~~~~~~~~^~~\n      |               \
    \                                |\n      |                                  \
    \             __gnu_cxx::__normal_iterator<long int*, std::vector<long int> >\n\
    /tmp/tmpfp649sbb.cpp:12:39: error: could not convert \u2018l.std::vector<long\
    \ int>::begin()\u2019 from \u2018std::vector<long int>::iterator\u2019 {aka \u2018\
    __gnu_cxx::__normal_iterator<long int*, std::vector<long int> >\u2019} to \u2018\
    std::vector<long int>\u2019\n   12 |     float rightMedian = median(l.begin(),\
    \ l.begin() + mid + 1);\n      |                                ~~~~~~~^~\n  \
    \    |                                       |\n      |                      \
    \                 std::vector<long int>::iterator {aka __gnu_cxx::__normal_iterator<long\
    \ int*, std::vector<long int> >}\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    long long\
    \ int n = l.size();\n    if (n <= 1) return l[0];\n    long long int mid = n /\
    \ 2;\n    float median = l[mid];\n    for (long long int i = mid; i < n; i++)\
    \ {\n        if (l[i] < median) median = l[i];\n    }\n    return median;\n}\n\
    int main() {\n    auto candidate = median;\n    assert(candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3)));\n    assert(candidate((std::vector<long>({-10,\
    \ 4, 6, 1000, 10, 20}))) == (8.0));\n    assert(candidate((std::vector<long>({5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({6, 5}))) == (5.5));\n\
    \    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2, 7}))) == (float(7)));\n\
    }\n"
  stdout: ''
  stderr: "tmptuq5ge3_: /tmp/tmptuq5ge3_.cpp:20: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    long long\
    \ int mid = l.size() / 2;\n    if (l.size() % 2 == 0) {\n        return l[mid];\n\
    \    } else {\n        return (l[mid] + l[mid-1]) / 2.0;\n    }\n}\nint main()\
    \ {\n    auto candidate = median;\n    assert(candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3)));\n    assert(candidate((std::vector<long>({-10,\
    \ 4, 6, 1000, 10, 20}))) == (8.0));\n    assert(candidate((std::vector<long>({5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({6, 5}))) == (5.5));\n\
    \    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2, 7}))) == (float(7)));\n\
    }\n"
  stdout: ''
  stderr: "tmpyrgrpayl: /tmp/tmpyrgrpayl.cpp:18: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    long long\
    \ mid = l.size() / 2;\n    if (l.size() % 2 == 1) {\n        return l[mid];\n\
    \    }\n    float leftMedian = median(l.begin() + mid, l.begin() + l.size() -\
    \ 1);\n    float rightMedian = median(l.begin(), l.begin() + mid);\n    return\
    \ (leftMedian + rightMedian) / 2;\n}\nint main() {\n    auto candidate = median;\n\
    \    assert(candidate((std::vector<long>({3, 1, 2, 4, 5}))) == (float(3)));\n\
    \    assert(candidate((std::vector<long>({-10, 4, 6, 1000, 10, 20}))) == (8.0));\n\
    \    assert(candidate((std::vector<long>({5}))) == (float(5)));\n    assert(candidate((std::vector<long>({6,\
    \ 5}))) == (5.5));\n    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2,\
    \ 7}))) == (float(7)));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp_cb84f3c.cpp: In function \u2018float median(std::vector<long int>)\u2019\
    :\n/tmp/tmp_cb84f3c.cpp:13:41: error: could not convert \u2018l.std::vector<long\
    \ int>::begin().__gnu_cxx::__normal_iterator<long int*, std::vector<long int>\
    \ >::operator+(((__gnu_cxx::__normal_iterator<long int*, std::vector<long int>\
    \ >::difference_type)mid))\u2019 from \u2018__gnu_cxx::__normal_iterator<long\
    \ int*, std::vector<long int> >\u2019 to \u2018std::vector<long int>\u2019\n \
    \  13 |     float leftMedian = median(l.begin() + mid, l.begin() + l.size() -\
    \ 1);\n      |                               ~~~~~~~~~~^~~~~\n      |        \
    \                                 |\n      |                                 \
    \        __gnu_cxx::__normal_iterator<long int*, std::vector<long int> >\n/tmp/tmp_cb84f3c.cpp:14:39:\
    \ error: could not convert \u2018l.std::vector<long int>::begin()\u2019 from \u2018\
    std::vector<long int>::iterator\u2019 {aka \u2018__gnu_cxx::__normal_iterator<long\
    \ int*, std::vector<long int> >\u2019} to \u2018std::vector<long int>\u2019\n\
    \   14 |     float rightMedian = median(l.begin(), l.begin() + mid);\n      |\
    \                                ~~~~~~~^~\n      |                          \
    \             |\n      |                                       std::vector<long\
    \ int>::iterator {aka __gnu_cxx::__normal_iterator<long int*, std::vector<long\
    \ int> >}\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    long long\
    \ int n = l.size();\n    if (n < 2) return l[0];\n    long long int mid = n /\
    \ 2;\n    float midval = l[mid];\n    float leftval = l[mid-1];\n    float rightval\
    \ = l[mid+1];\n    if (leftval > rightval) return median(l);\n    if (leftval\
    \ == rightval) return midval;\n    return leftval < midval ? median(l) : rightval;\n\
    }\nint main() {\n    auto candidate = median;\n    assert(candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3)));\n    assert(candidate((std::vector<long>({-10,\
    \ 4, 6, 1000, 10, 20}))) == (8.0));\n    assert(candidate((std::vector<long>({5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({6, 5}))) == (5.5));\n\
    \    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2, 7}))) == (float(7)));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    long long\
    \ mid = l.size() / 2;\n    float a = l[mid];\n    float b = l[mid+1];\n    return\
    \ ((a + b) / 2.0);\n}\nint main() {\n    auto candidate = median;\n    assert(candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3)));\n    assert(candidate((std::vector<long>({-10,\
    \ 4, 6, 1000, 10, 20}))) == (8.0));\n    assert(candidate((std::vector<long>({5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({6, 5}))) == (5.5));\n\
    \    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2, 7}))) == (float(7)));\n\
    }\n"
  stdout: ''
  stderr: "tmp0exdvvrs: /tmp/tmp0exdvvrs.cpp:17: int main(): Assertion `candidate((std::vector<long>({-10,\
    \ 4, 6, 1000, 10, 20}))) == (8.0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    long long\
    \ int mid = l.size() / 2;\n    if (l.size() % 2 == 0) {\n        return l[mid];\n\
    \    } else {\n        return (l[mid] + l[mid]) / 2;\n    }\n}\nint main() {\n\
    \    auto candidate = median;\n    assert(candidate((std::vector<long>({3, 1,\
    \ 2, 4, 5}))) == (float(3)));\n    assert(candidate((std::vector<long>({-10, 4,\
    \ 6, 1000, 10, 20}))) == (8.0));\n    assert(candidate((std::vector<long>({5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({6, 5}))) == (5.5));\n\
    \    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2, 7}))) == (float(7)));\n\
    }\n"
  stdout: ''
  stderr: "tmp3wwgps0f: /tmp/tmp3wwgps0f.cpp:18: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    long long\
    \ mid = l.size() / 2;\n    if (l.size() % 2 == 0) {\n        return l[mid];\n\
    \    } else {\n        return (l[mid] + l[mid-1]) / 2.0;\n    }\n}\nint main()\
    \ {\n    auto candidate = median;\n    assert(candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3)));\n    assert(candidate((std::vector<long>({-10,\
    \ 4, 6, 1000, 10, 20}))) == (8.0));\n    assert(candidate((std::vector<long>({5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({6, 5}))) == (5.5));\n\
    \    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2, 7}))) == (float(7)));\n\
    }\n"
  stdout: ''
  stderr: "tmprbvwu88u: /tmp/tmprbvwu88u.cpp:18: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    long mid\
    \ = l.size() / 2;\n    float midval = l[mid];\n    float leftval = l[mid-1];\n\
    \    float rightval = l[mid+1];\n    if (leftval > rightval)\n        return leftval;\n\
    \    else\n        return rightval;\n}\nint main() {\n    auto candidate = median;\n\
    \    assert(candidate((std::vector<long>({3, 1, 2, 4, 5}))) == (float(3)));\n\
    \    assert(candidate((std::vector<long>({-10, 4, 6, 1000, 10, 20}))) == (8.0));\n\
    \    assert(candidate((std::vector<long>({5}))) == (float(5)));\n    assert(candidate((std::vector<long>({6,\
    \ 5}))) == (5.5));\n    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2,\
    \ 7}))) == (float(7)));\n}\n"
  stdout: ''
  stderr: "tmpnp7ubos8: /tmp/tmpnp7ubos8.cpp:20: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    long long\
    \ int mid = l.size() / 2;\n    if (l.size() % 2 == 0) {\n        return l[mid];\n\
    \    }\n    float leftMedian = median(l.substr(0, mid));\n    float rightMedian\
    \ = median(l.substr(mid));\n    return 0.5 * (leftMedian + rightMedian);\n}\n\
    int main() {\n    auto candidate = median;\n    assert(candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3)));\n    assert(candidate((std::vector<long>({-10,\
    \ 4, 6, 1000, 10, 20}))) == (8.0));\n    assert(candidate((std::vector<long>({5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({6, 5}))) == (5.5));\n\
    \    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2, 7}))) == (float(7)));\n\
    }\n"
  stdout: ''
  stderr: "/tmp/tmp0uxwfnuy.cpp: In function \u2018float median(std::vector<long int>)\u2019\
    :\n/tmp/tmp0uxwfnuy.cpp:13:33: error: \u2018class std::vector<long int>\u2019\
    \ has no member named \u2018substr\u2019\n   13 |     float leftMedian = median(l.substr(0,\
    \ mid));\n      |                                 ^~~~~~\n/tmp/tmp0uxwfnuy.cpp:14:34:\
    \ error: \u2018class std::vector<long int>\u2019 has no member named \u2018substr\u2019\
    \n   14 |     float rightMedian = median(l.substr(mid));\n      |            \
    \                      ^~~~~~\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    long long\
    \ int n = l.size();\n    assert(n >= 1);\n    long long int mid = n / 2;\n   \
    \ if (n % 2 == 0) {\n        return l[mid];\n    } else {\n        return (l[mid]\
    \ + l[mid-1]) / 2;\n    }\n}\nint main() {\n    auto candidate = median;\n   \
    \ assert(candidate((std::vector<long>({3, 1, 2, 4, 5}))) == (float(3)));\n   \
    \ assert(candidate((std::vector<long>({-10, 4, 6, 1000, 10, 20}))) == (8.0));\n\
    \    assert(candidate((std::vector<long>({5}))) == (float(5)));\n    assert(candidate((std::vector<long>({6,\
    \ 5}))) == (5.5));\n    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2,\
    \ 7}))) == (float(7)));\n}\n"
  stdout: ''
  stderr: "tmpbliuda6n: /tmp/tmpbliuda6n.cpp:20: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    long long\
    \ n = l.size();\n    if (n < 2) return l[0];\n    long long mid = n / 2;\n   \
    \ float a = l[mid];\n    float b = l[n - 1];\n    float c = 0.5 * (a + b);\n \
    \   return c;\n}\nint main() {\n    auto candidate = median;\n    assert(candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3)));\n    assert(candidate((std::vector<long>({-10,\
    \ 4, 6, 1000, 10, 20}))) == (8.0));\n    assert(candidate((std::vector<long>({5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({6, 5}))) == (5.5));\n\
    \    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2, 7}))) == (float(7)));\n\
    }\n"
  stdout: ''
  stderr: "tmpkvzc_89z: /tmp/tmpkvzc_89z.cpp:19: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    long long\
    \ int n = l.size();\n    assert(n >= 2);\n    long long int mid = n / 2;\n   \
    \ float left = (float)l[mid];\n    float right = (float)l[n - 1];\n    if (left\
    \ > right) {\n        return left;\n    } else {\n        return right;\n    }\n\
    }\nint main() {\n    auto candidate = median;\n    assert(candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3)));\n    assert(candidate((std::vector<long>({-10,\
    \ 4, 6, 1000, 10, 20}))) == (8.0));\n    assert(candidate((std::vector<long>({5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({6, 5}))) == (5.5));\n\
    \    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2, 7}))) == (float(7)));\n\
    }\n"
  stdout: ''
  stderr: "tmpvifyusds: /tmp/tmpvifyusds.cpp:22: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    long long\
    \ int n = l.size();\n    if (n % 2 == 1) {\n        return l[n / 2];\n    }\n\
    \    float mid = l[n / 2];\n    float leftMedian = median(l.sublist(0, n / 2));\n\
    \    float rightMedian = median(l.sublist((n / 2) + 1, n));\n    return mid +\
    \ ((leftMedian + rightMedian) / 2);\n}\nint main() {\n    auto candidate = median;\n\
    \    assert(candidate((std::vector<long>({3, 1, 2, 4, 5}))) == (float(3)));\n\
    \    assert(candidate((std::vector<long>({-10, 4, 6, 1000, 10, 20}))) == (8.0));\n\
    \    assert(candidate((std::vector<long>({5}))) == (float(5)));\n    assert(candidate((std::vector<long>({6,\
    \ 5}))) == (5.5));\n    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2,\
    \ 7}))) == (float(7)));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp022653oz.cpp: In function \u2018float median(std::vector<long int>)\u2019\
    :\n/tmp/tmp022653oz.cpp:14:33: error: \u2018class std::vector<long int>\u2019\
    \ has no member named \u2018sublist\u2019\n   14 |     float leftMedian = median(l.sublist(0,\
    \ n / 2));\n      |                                 ^~~~~~~\n/tmp/tmp022653oz.cpp:15:34:\
    \ error: \u2018class std::vector<long int>\u2019 has no member named \u2018sublist\u2019\
    \n   15 |     float rightMedian = median(l.sublist((n / 2) + 1, n));\n      |\
    \                                  ^~~~~~~\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    long long\
    \ n = l.size();\n    if (n < 2) return l[0];\n    long long mid = n / 2;\n   \
    \ float a = l[mid];\n    float b = l[n - 1];\n    return a > b ? b : a;\n}\nint\
    \ main() {\n    auto candidate = median;\n    assert(candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3)));\n    assert(candidate((std::vector<long>({-10,\
    \ 4, 6, 1000, 10, 20}))) == (8.0));\n    assert(candidate((std::vector<long>({5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({6, 5}))) == (5.5));\n\
    \    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2, 7}))) == (float(7)));\n\
    }\n"
  stdout: ''
  stderr: "tmpt_0lenp1: /tmp/tmpt_0lenp1.cpp:18: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    long long\
    \ int mid = l.size() / 2;\n    long long int left = l[mid];\n    long long int\
    \ right = l[mid+1];\n    if (left > right) {\n        std::swap(left, right);\n\
    \    }\n    return left + right / 2;\n}\nint main() {\n    auto candidate = median;\n\
    \    assert(candidate((std::vector<long>({3, 1, 2, 4, 5}))) == (float(3)));\n\
    \    assert(candidate((std::vector<long>({-10, 4, 6, 1000, 10, 20}))) == (8.0));\n\
    \    assert(candidate((std::vector<long>({5}))) == (float(5)));\n    assert(candidate((std::vector<long>({6,\
    \ 5}))) == (5.5));\n    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2,\
    \ 7}))) == (float(7)));\n}\n"
  stdout: ''
  stderr: "tmpcnzt0006: /tmp/tmpcnzt0006.cpp:19: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    long long\
    \ int n = l.size();\n    if (n < 2) return 0;\n    long long int mid = n / 2;\n\
    \    long long int left = l[mid];\n    long long int right = l[n - 1];\n    if\
    \ (left > right) return left;\n    return right;\n}\nint main() {\n    auto candidate\
    \ = median;\n    assert(candidate((std::vector<long>({3, 1, 2, 4, 5}))) == (float(3)));\n\
    \    assert(candidate((std::vector<long>({-10, 4, 6, 1000, 10, 20}))) == (8.0));\n\
    \    assert(candidate((std::vector<long>({5}))) == (float(5)));\n    assert(candidate((std::vector<long>({6,\
    \ 5}))) == (5.5));\n    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2,\
    \ 7}))) == (float(7)));\n}\n"
  stdout: ''
  stderr: "tmpk3f5zs5p: /tmp/tmpk3f5zs5p.cpp:19: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    long long\
    \ int n = l.size();\n    long long int mid = n / 2;\n    if (n % 2 == 0) {\n \
    \       return l[mid];\n    }\n    else {\n        long long int m1 = mid - 1;\n\
    \        long long int m2 = mid + 1;\n        return ((l[m1] + l[m2])/2);\n  \
    \  }\n}\nint main() {\n    auto candidate = median;\n    assert(candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3)));\n    assert(candidate((std::vector<long>({-10,\
    \ 4, 6, 1000, 10, 20}))) == (8.0));\n    assert(candidate((std::vector<long>({5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({6, 5}))) == (5.5));\n\
    \    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2, 7}))) == (float(7)));\n\
    }\n"
  stdout: ''
  stderr: "tmpoftnv_ch: /tmp/tmpoftnv_ch.cpp:22: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    long long\
    \ mid = l.size() / 2;\n    if (l.size() % 2 == 0) {\n        return l[mid];\n\
    \    } else {\n        return (l[mid] + l[mid-1]) / 2.0;\n    }\n}\nint main()\
    \ {\n    auto candidate = median;\n    assert(candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3)));\n    assert(candidate((std::vector<long>({-10,\
    \ 4, 6, 1000, 10, 20}))) == (8.0));\n    assert(candidate((std::vector<long>({5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({6, 5}))) == (5.5));\n\
    \    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2, 7}))) == (float(7)));\n\
    }\n"
  stdout: ''
  stderr: "tmpk2w86s2j: /tmp/tmpk2w86s2j.cpp:18: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    long long\
    \ mid = l.size() / 2;\n    float median = l[mid];\n    for(long long i = mid;\
    \ i < l.size(); i++) {\n        if(l[i] < median) {\n            median = l[i];\n\
    \        }\n    }\n    return median;\n}\nint main() {\n    auto candidate = median;\n\
    \    assert(candidate((std::vector<long>({3, 1, 2, 4, 5}))) == (float(3)));\n\
    \    assert(candidate((std::vector<long>({-10, 4, 6, 1000, 10, 20}))) == (8.0));\n\
    \    assert(candidate((std::vector<long>({5}))) == (float(5)));\n    assert(candidate((std::vector<long>({6,\
    \ 5}))) == (5.5));\n    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2,\
    \ 7}))) == (float(7)));\n}\n"
  stdout: ''
  stderr: "tmp8wug6b6s: /tmp/tmp8wug6b6s.cpp:20: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    long long\
    \ int n = l.size();\n    if (n <= 1) return l[0];\n    float m = l[0];\n    for\
    \ (long long int i = 1; i < n; i++) {\n        if (l[i] < m) m = l[i];\n    }\n\
    \    return m;\n}\nint main() {\n    auto candidate = median;\n    assert(candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3)));\n    assert(candidate((std::vector<long>({-10,\
    \ 4, 6, 1000, 10, 20}))) == (8.0));\n    assert(candidate((std::vector<long>({5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({6, 5}))) == (5.5));\n\
    \    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2, 7}))) == (float(7)));\n\
    }\n"
  stdout: ''
  stderr: "tmpc2ej4fns: /tmp/tmpc2ej4fns.cpp:19: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    long long\
    \ int n = l.size();\n    if (n <= 1)\n        return l[0];\n    long long int\
    \ mid = n / 2;\n    long long int left = l[mid];\n    long long int right = l[n\
    \ - 1];\n    if (left > right)\n        return median(l);\n    return left;\n\
    }\nint main() {\n    auto candidate = median;\n    assert(candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3)));\n    assert(candidate((std::vector<long>({-10,\
    \ 4, 6, 1000, 10, 20}))) == (8.0));\n    assert(candidate((std::vector<long>({5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({6, 5}))) == (5.5));\n\
    \    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2, 7}))) == (float(7)));\n\
    }\n"
  stdout: ''
  stderr: "tmpxvr0rbt8: /tmp/tmpxvr0rbt8.cpp:21: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    long long\
    \ int mid = l.size() / 2;\n    float median;\n    if (l.size() % 2 == 0) {\n \
    \       median = l[mid];\n    } else {\n        median = (l[mid] + l[mid-1]) /\
    \ 2;\n    }\n    return median;\n}\nint main() {\n    auto candidate = median;\n\
    \    assert(candidate((std::vector<long>({3, 1, 2, 4, 5}))) == (float(3)));\n\
    \    assert(candidate((std::vector<long>({-10, 4, 6, 1000, 10, 20}))) == (8.0));\n\
    \    assert(candidate((std::vector<long>({5}))) == (float(5)));\n    assert(candidate((std::vector<long>({6,\
    \ 5}))) == (5.5));\n    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2,\
    \ 7}))) == (float(7)));\n}\n"
  stdout: ''
  stderr: "tmpci5j96_3: /tmp/tmpci5j96_3.cpp:20: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    long long\
    \ mid = l.size() / 2;\n    float midval = l[mid];\n    float leftval = l[mid-1];\n\
    \    float rightval = l[mid+1];\n    if (leftval > rightval) return midval;\n\
    \    else return (midval + rightval) / 2.0;\n}\nint main() {\n    auto candidate\
    \ = median;\n    assert(candidate((std::vector<long>({3, 1, 2, 4, 5}))) == (float(3)));\n\
    \    assert(candidate((std::vector<long>({-10, 4, 6, 1000, 10, 20}))) == (8.0));\n\
    \    assert(candidate((std::vector<long>({5}))) == (float(5)));\n    assert(candidate((std::vector<long>({6,\
    \ 5}))) == (5.5));\n    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2,\
    \ 7}))) == (float(7)));\n}\n"
  stdout: ''
  stderr: "tmp8flz604q: /tmp/tmp8flz604q.cpp:19: int main(): Assertion `candidate((std::vector<long>({-10,\
    \ 4, 6, 1000, 10, 20}))) == (8.0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    long long\
    \ mid = l.size() / 2;\n    float median = (l[mid] + l[mid-1]) / 2.0;\n    return\
    \ median;\n}\nint main() {\n    auto candidate = median;\n    assert(candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3)));\n    assert(candidate((std::vector<long>({-10,\
    \ 4, 6, 1000, 10, 20}))) == (8.0));\n    assert(candidate((std::vector<long>({5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({6, 5}))) == (5.5));\n\
    \    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2, 7}))) == (float(7)));\n\
    }\n"
  stdout: ''
  stderr: "tmpujs7y07j: /tmp/tmpujs7y07j.cpp:15: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    long long\
    \ mid = l.size() / 2;\n    long long left = l[mid];\n    long long right = l[mid+1];\n\
    \    if (left > right) {\n        std::swap(left, right);\n    }\n    return left\
    \ + (right - left) / 2;\n}\nint main() {\n    auto candidate = median;\n    assert(candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3)));\n    assert(candidate((std::vector<long>({-10,\
    \ 4, 6, 1000, 10, 20}))) == (8.0));\n    assert(candidate((std::vector<long>({5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({6, 5}))) == (5.5));\n\
    \    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2, 7}))) == (float(7)));\n\
    }\n"
  stdout: ''
  stderr: "tmpu0j8043n: /tmp/tmpu0j8043n.cpp:20: int main(): Assertion `candidate((std::vector<long>({-10,\
    \ 4, 6, 1000, 10, 20}))) == (8.0)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    long long\
    \ int mid = l.size() / 2;\n    long long int left = l[mid];\n    long long int\
    \ right = l[mid+1];\n    if (left > right) {\n        return left;\n    } else\
    \ {\n        return right;\n    }\n}\nint main() {\n    auto candidate = median;\n\
    \    assert(candidate((std::vector<long>({3, 1, 2, 4, 5}))) == (float(3)));\n\
    \    assert(candidate((std::vector<long>({-10, 4, 6, 1000, 10, 20}))) == (8.0));\n\
    \    assert(candidate((std::vector<long>({5}))) == (float(5)));\n    assert(candidate((std::vector<long>({6,\
    \ 5}))) == (5.5));\n    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2,\
    \ 7}))) == (float(7)));\n}\n"
  stdout: ''
  stderr: "tmpsrthp_na: /tmp/tmpsrthp_na.cpp:20: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    long long\
    \ int mid = l.size() / 2;\n    float median = l[mid];\n    for (long long int\
    \ i = mid; i < l.size(); i++) {\n        if (l[i] < median) {\n            median\
    \ = l[i];\n        }\n    }\n    return median;\n}\nint main() {\n    auto candidate\
    \ = median;\n    assert(candidate((std::vector<long>({3, 1, 2, 4, 5}))) == (float(3)));\n\
    \    assert(candidate((std::vector<long>({-10, 4, 6, 1000, 10, 20}))) == (8.0));\n\
    \    assert(candidate((std::vector<long>({5}))) == (float(5)));\n    assert(candidate((std::vector<long>({6,\
    \ 5}))) == (5.5));\n    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2,\
    \ 7}))) == (float(7)));\n}\n"
  stdout: ''
  stderr: "tmptmgtz7im: /tmp/tmptmgtz7im.cpp:20: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    long long\
    \ int mid = l.size() / 2;\n    float median = l[mid];\n    for (long long int\
    \ i = mid; i < l.size(); i++) {\n        median = (median < l[i]) ? l[i] : median;\n\
    \    }\n    return median;\n}\nint main() {\n    auto candidate = median;\n  \
    \  assert(candidate((std::vector<long>({3, 1, 2, 4, 5}))) == (float(3)));\n  \
    \  assert(candidate((std::vector<long>({-10, 4, 6, 1000, 10, 20}))) == (8.0));\n\
    \    assert(candidate((std::vector<long>({5}))) == (float(5)));\n    assert(candidate((std::vector<long>({6,\
    \ 5}))) == (5.5));\n    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2,\
    \ 7}))) == (float(7)));\n}\n"
  stdout: ''
  stderr: "tmpycdy7rfx: /tmp/tmpycdy7rfx.cpp:18: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    long long\
    \ mid = l.size() / 2;\n    if (l.size() % 2 == 0) {\n        return l[mid];\n\
    \    } else {\n        return (l[mid] + l[mid]) / 2;\n    }\n}\nint main() {\n\
    \    auto candidate = median;\n    assert(candidate((std::vector<long>({3, 1,\
    \ 2, 4, 5}))) == (float(3)));\n    assert(candidate((std::vector<long>({-10, 4,\
    \ 6, 1000, 10, 20}))) == (8.0));\n    assert(candidate((std::vector<long>({5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({6, 5}))) == (5.5));\n\
    \    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2, 7}))) == (float(7)));\n\
    }\n"
  stdout: ''
  stderr: "tmpzp9j3hhy: /tmp/tmpzp9j3hhy.cpp:18: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    long long\
    \ mid = l.size() / 2;\n    if (l.size() % 2 == 0) {\n        return l[mid];\n\
    \    } else {\n        return (l[mid] + l[mid]) / 2;\n    }\n}\nint main() {\n\
    \    auto candidate = median;\n    assert(candidate((std::vector<long>({3, 1,\
    \ 2, 4, 5}))) == (float(3)));\n    assert(candidate((std::vector<long>({-10, 4,\
    \ 6, 1000, 10, 20}))) == (8.0));\n    assert(candidate((std::vector<long>({5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({6, 5}))) == (5.5));\n\
    \    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2, 7}))) == (float(7)));\n\
    }\n"
  stdout: ''
  stderr: "tmp3122ywt6: /tmp/tmp3122ywt6.cpp:18: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    long long\
    \ mid = l.size() / 2;\n    if (l.size() % 2 == 1) {\n        return l[mid];\n\
    \    }\n    float a = l[mid];\n    float b = l[mid+1];\n    return a > b ? b :\
    \ a;\n}\nint main() {\n    auto candidate = median;\n    assert(candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3)));\n    assert(candidate((std::vector<long>({-10,\
    \ 4, 6, 1000, 10, 20}))) == (8.0));\n    assert(candidate((std::vector<long>({5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({6, 5}))) == (5.5));\n\
    \    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2, 7}))) == (float(7)));\n\
    }\n"
  stdout: ''
  stderr: "tmprq7tf8ek: /tmp/tmprq7tf8ek.cpp:19: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    long long\
    \ mid = l.size() / 2;\n    if (l.size() % 2 == 0) {\n        return l[mid];\n\
    \    } else {\n        return (l[mid] + l[mid-1]) / 2;\n    }\n}\nint main() {\n\
    \    auto candidate = median;\n    assert(candidate((std::vector<long>({3, 1,\
    \ 2, 4, 5}))) == (float(3)));\n    assert(candidate((std::vector<long>({-10, 4,\
    \ 6, 1000, 10, 20}))) == (8.0));\n    assert(candidate((std::vector<long>({5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({6, 5}))) == (5.5));\n\
    \    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2, 7}))) == (float(7)));\n\
    }\n"
  stdout: ''
  stderr: "tmp2uy380zb: /tmp/tmp2uy380zb.cpp:18: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    long long\
    \ n = l.size();\n    if (n % 2 == 0) {\n        return l[n / 2];\n    }\n    float\
    \ mid = n / 2;\n    float leftMedian = median(l.sublist(0, mid));\n    float rightMedian\
    \ = median(l.sublist(mid, n - 1));\n    return 0.5 * (leftMedian + rightMedian);\n\
    }\nint main() {\n    auto candidate = median;\n    assert(candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3)));\n    assert(candidate((std::vector<long>({-10,\
    \ 4, 6, 1000, 10, 20}))) == (8.0));\n    assert(candidate((std::vector<long>({5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({6, 5}))) == (5.5));\n\
    \    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2, 7}))) == (float(7)));\n\
    }\n"
  stdout: ''
  stderr: "/tmp/tmp_6__ry18.cpp: In function \u2018float median(std::vector<long int>)\u2019\
    :\n/tmp/tmp_6__ry18.cpp:14:33: error: \u2018class std::vector<long int>\u2019\
    \ has no member named \u2018sublist\u2019\n   14 |     float leftMedian = median(l.sublist(0,\
    \ mid));\n      |                                 ^~~~~~~\n/tmp/tmp_6__ry18.cpp:15:34:\
    \ error: \u2018class std::vector<long int>\u2019 has no member named \u2018sublist\u2019\
    \n   15 |     float rightMedian = median(l.sublist(mid, n - 1));\n      |    \
    \                              ^~~~~~~\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    long long\
    \ int n = l.size();\n    if (n <= 1) return l[0];\n    long long int mid = n /\
    \ 2;\n    float median = l[mid];\n    float leftMedian = median(l);\n    float\
    \ rightMedian = median(l.rbegin(), l.rend());\n    if (leftMedian < rightMedian)\
    \ return leftMedian;\n    return rightMedian;\n}\nint main() {\n    auto candidate\
    \ = median;\n    assert(candidate((std::vector<long>({3, 1, 2, 4, 5}))) == (float(3)));\n\
    \    assert(candidate((std::vector<long>({-10, 4, 6, 1000, 10, 20}))) == (8.0));\n\
    \    assert(candidate((std::vector<long>({5}))) == (float(5)));\n    assert(candidate((std::vector<long>({6,\
    \ 5}))) == (5.5));\n    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2,\
    \ 7}))) == (float(7)));\n}\n"
  stdout: ''
  stderr: "/tmp/tmps0y081c4.cpp: In function \u2018float median(std::vector<long int>)\u2019\
    :\n/tmp/tmps0y081c4.cpp:13:32: error: \u2018median\u2019 cannot be used as a function\n\
    \   13 |     float leftMedian = median(l);\n      |                          \
    \      ^\n/tmp/tmps0y081c4.cpp:14:52: error: \u2018median\u2019 cannot be used\
    \ as a function\n   14 |     float rightMedian = median(l.rbegin(), l.rend());\n\
    \      |                                                    ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    long long\
    \ int n = l.size();\n    if (n < 2) return 0;\n    long long int mid = n / 2;\n\
    \    float midVal = l[mid];\n    float leftMedian = median(l.sublist(0,mid));\n\
    \    float rightMedian = median(l.sublist(mid+1,n));\n    return midVal + (leftMedian\
    \ + rightMedian) / 2;\n}\nint main() {\n    auto candidate = median;\n    assert(candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3)));\n    assert(candidate((std::vector<long>({-10,\
    \ 4, 6, 1000, 10, 20}))) == (8.0));\n    assert(candidate((std::vector<long>({5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({6, 5}))) == (5.5));\n\
    \    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2, 7}))) == (float(7)));\n\
    }\n"
  stdout: ''
  stderr: "/tmp/tmpvc6fwabj.cpp: In function \u2018float median(std::vector<long int>)\u2019\
    :\n/tmp/tmpvc6fwabj.cpp:13:33: error: \u2018class std::vector<long int>\u2019\
    \ has no member named \u2018sublist\u2019\n   13 |     float leftMedian = median(l.sublist(0,mid));\n\
    \      |                                 ^~~~~~~\n/tmp/tmpvc6fwabj.cpp:14:34:\
    \ error: \u2018class std::vector<long int>\u2019 has no member named \u2018sublist\u2019\
    \n   14 |     float rightMedian = median(l.sublist(mid+1,n));\n      |       \
    \                           ^~~~~~~\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    long long\
    \ int n = l.size();\n    if (n % 2 == 0) {\n        return l[n/2];\n    } else\
    \ {\n        return (l[n/2] + l[n/2-1])/2.0;\n    }\n}\nint main() {\n    auto\
    \ candidate = median;\n    assert(candidate((std::vector<long>({3, 1, 2, 4, 5})))\
    \ == (float(3)));\n    assert(candidate((std::vector<long>({-10, 4, 6, 1000, 10,\
    \ 20}))) == (8.0));\n    assert(candidate((std::vector<long>({5}))) == (float(5)));\n\
    \    assert(candidate((std::vector<long>({6, 5}))) == (5.5));\n    assert(candidate((std::vector<long>({8,\
    \ 1, 3, 9, 9, 2, 7}))) == (float(7)));\n}\n"
  stdout: ''
  stderr: "tmpcqsc8_w6: /tmp/tmpcqsc8_w6.cpp:18: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    long long\
    \ mid = l.size() / 2;\n    if (l.size() % 2 == 0) {\n        return l[mid];\n\
    \    } else {\n        return (l[mid] + l[mid-1]) / 2.0;\n    }\n}\nint main()\
    \ {\n    auto candidate = median;\n    assert(candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3)));\n    assert(candidate((std::vector<long>({-10,\
    \ 4, 6, 1000, 10, 20}))) == (8.0));\n    assert(candidate((std::vector<long>({5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({6, 5}))) == (5.5));\n\
    \    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2, 7}))) == (float(7)));\n\
    }\n"
  stdout: ''
  stderr: "tmpq_k9jlmw: /tmp/tmpq_k9jlmw.cpp:18: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    long long\
    \ int n = l.size();\n    long long int mid = n / 2;\n    float midVal = l[mid];\n\
    \    float leftMedian = median(l.sublist(0,mid));\n    float rightMedian = median(l.sublist(mid+1,n));\n\
    \    return midVal + ((leftMedian + rightMedian) / 2);\n}\nint main() {\n    auto\
    \ candidate = median;\n    assert(candidate((std::vector<long>({3, 1, 2, 4, 5})))\
    \ == (float(3)));\n    assert(candidate((std::vector<long>({-10, 4, 6, 1000, 10,\
    \ 20}))) == (8.0));\n    assert(candidate((std::vector<long>({5}))) == (float(5)));\n\
    \    assert(candidate((std::vector<long>({6, 5}))) == (5.5));\n    assert(candidate((std::vector<long>({8,\
    \ 1, 3, 9, 9, 2, 7}))) == (float(7)));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpidbghifn.cpp: In function \u2018float median(std::vector<long int>)\u2019\
    :\n/tmp/tmpidbghifn.cpp:12:33: error: \u2018class std::vector<long int>\u2019\
    \ has no member named \u2018sublist\u2019\n   12 |     float leftMedian = median(l.sublist(0,mid));\n\
    \      |                                 ^~~~~~~\n/tmp/tmpidbghifn.cpp:13:34:\
    \ error: \u2018class std::vector<long int>\u2019 has no member named \u2018sublist\u2019\
    \n   13 |     float rightMedian = median(l.sublist(mid+1,n));\n      |       \
    \                           ^~~~~~~\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    long long\
    \ int n = l.size();\n    if (n < 2)\n        return 0;\n    long long int mid\
    \ = n / 2;\n    float midVal = l[mid];\n    float leftMedian = median(l.sublist(0,\
    \ mid));\n    float rightMedian = median(l.sublist(mid+1, n));\n    return midVal\
    \ + (leftMedian + rightMedian) / 2;\n}\nint main() {\n    auto candidate = median;\n\
    \    assert(candidate((std::vector<long>({3, 1, 2, 4, 5}))) == (float(3)));\n\
    \    assert(candidate((std::vector<long>({-10, 4, 6, 1000, 10, 20}))) == (8.0));\n\
    \    assert(candidate((std::vector<long>({5}))) == (float(5)));\n    assert(candidate((std::vector<long>({6,\
    \ 5}))) == (5.5));\n    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2,\
    \ 7}))) == (float(7)));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpxiwgjix7.cpp: In function \u2018float median(std::vector<long int>)\u2019\
    :\n/tmp/tmpxiwgjix7.cpp:14:33: error: \u2018class std::vector<long int>\u2019\
    \ has no member named \u2018sublist\u2019\n   14 |     float leftMedian = median(l.sublist(0,\
    \ mid));\n      |                                 ^~~~~~~\n/tmp/tmpxiwgjix7.cpp:15:34:\
    \ error: \u2018class std::vector<long int>\u2019 has no member named \u2018sublist\u2019\
    \n   15 |     float rightMedian = median(l.sublist(mid+1, n));\n      |      \
    \                            ^~~~~~~\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    long long\
    \ int mid = l.size() / 2;\n    float midVal = l[mid];\n    float leftMedian =\
    \ median(l.begin(), l.begin() + mid);\n    float rightMedian = median(l.begin()\
    \ + mid + 1, l.end());\n    return midVal + (leftMedian + rightMedian) / 2;\n\
    }\nint main() {\n    auto candidate = median;\n    assert(candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3)));\n    assert(candidate((std::vector<long>({-10,\
    \ 4, 6, 1000, 10, 20}))) == (8.0));\n    assert(candidate((std::vector<long>({5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({6, 5}))) == (5.5));\n\
    \    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2, 7}))) == (float(7)));\n\
    }\n"
  stdout: ''
  stderr: "/tmp/tmpvt7zvcd4.cpp: In function \u2018float median(std::vector<long int>)\u2019\
    :\n/tmp/tmpvt7zvcd4.cpp:11:38: error: could not convert \u2018l.std::vector<long\
    \ int>::begin()\u2019 from \u2018std::vector<long int>::iterator\u2019 {aka \u2018\
    __gnu_cxx::__normal_iterator<long int*, std::vector<long int> >\u2019} to \u2018\
    std::vector<long int>\u2019\n   11 |     float leftMedian = median(l.begin(),\
    \ l.begin() + mid);\n      |                               ~~~~~~~^~\n      |\
    \                                      |\n      |                            \
    \          std::vector<long int>::iterator {aka __gnu_cxx::__normal_iterator<long\
    \ int*, std::vector<long int> >}\n/tmp/tmpvt7zvcd4.cpp:12:48: error: could not\
    \ convert \u2018l.std::vector<long int>::begin().__gnu_cxx::__normal_iterator<long\
    \ int*, std::vector<long int> >::operator+(((__gnu_cxx::__normal_iterator<long\
    \ int*, std::vector<long int> >::difference_type)mid)).__gnu_cxx::__normal_iterator<long\
    \ int*, std::vector<long int> >::operator+(1)\u2019 from \u2018__gnu_cxx::__normal_iterator<long\
    \ int*, std::vector<long int> >\u2019 to \u2018std::vector<long int>\u2019\n \
    \  12 |     float rightMedian = median(l.begin() + mid + 1, l.end());\n      |\
    \                                ~~~~~~~~~~~~~~~~^~~\n      |                \
    \                                |\n      |                                  \
    \              __gnu_cxx::__normal_iterator<long int*, std::vector<long int> >\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    long long\
    \ mid = l.size() / 2;\n    if (l.size() % 2 == 0) {\n        return l[mid];\n\
    \    } else {\n        return (l[mid] + l[mid-1]) / 2;\n    }\n}\nint main() {\n\
    \    auto candidate = median;\n    assert(candidate((std::vector<long>({3, 1,\
    \ 2, 4, 5}))) == (float(3)));\n    assert(candidate((std::vector<long>({-10, 4,\
    \ 6, 1000, 10, 20}))) == (8.0));\n    assert(candidate((std::vector<long>({5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({6, 5}))) == (5.5));\n\
    \    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2, 7}))) == (float(7)));\n\
    }\n"
  stdout: ''
  stderr: "tmpyqk9fweu: /tmp/tmpyqk9fweu.cpp:18: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    long long\
    \ mid = l.size() / 2;\n    float median;\n    if (l.size() % 2 == 0) {\n     \
    \   median = l[mid];\n    } else {\n        median = (l[mid] + l[mid-1]) / 2.0;\n\
    \    }\n    return median;\n}\nint main() {\n    auto candidate = median;\n  \
    \  assert(candidate((std::vector<long>({3, 1, 2, 4, 5}))) == (float(3)));\n  \
    \  assert(candidate((std::vector<long>({-10, 4, 6, 1000, 10, 20}))) == (8.0));\n\
    \    assert(candidate((std::vector<long>({5}))) == (float(5)));\n    assert(candidate((std::vector<long>({6,\
    \ 5}))) == (5.5));\n    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2,\
    \ 7}))) == (float(7)));\n}\n"
  stdout: ''
  stderr: "tmpfb191inf: /tmp/tmpfb191inf.cpp:20: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    long long\
    \ int mid = l.size() / 2;\n    float median = l[mid];\n    for (long long int\
    \ i = mid; i < l.size(); i++) {\n        median = (median > l[i]) ? median : l[i];\n\
    \    }\n    return median;\n}\nint main() {\n    auto candidate = median;\n  \
    \  assert(candidate((std::vector<long>({3, 1, 2, 4, 5}))) == (float(3)));\n  \
    \  assert(candidate((std::vector<long>({-10, 4, 6, 1000, 10, 20}))) == (8.0));\n\
    \    assert(candidate((std::vector<long>({5}))) == (float(5)));\n    assert(candidate((std::vector<long>({6,\
    \ 5}))) == (5.5));\n    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2,\
    \ 7}))) == (float(7)));\n}\n"
  stdout: ''
  stderr: "tmpkwmd59zf: /tmp/tmpkwmd59zf.cpp:18: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
    \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4,\
    \ 6, 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n    long long\
    \ ll = l.size();\n    if (ll % 2 == 0) {\n        return l[ll / 2 - 1] + (l[ll\
    \ / 2] + l[ll / 2 - 1]) / 2;\n    } else {\n        return l[ll / 2];\n    }\n\
    }\nint main() {\n    auto candidate = median;\n    assert(candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3)));\n    assert(candidate((std::vector<long>({-10,\
    \ 4, 6, 1000, 10, 20}))) == (8.0));\n    assert(candidate((std::vector<long>({5})))\
    \ == (float(5)));\n    assert(candidate((std::vector<long>({6, 5}))) == (5.5));\n\
    \    assert(candidate((std::vector<long>({8, 1, 3, 9, 9, 2, 7}))) == (float(7)));\n\
    }\n"
  stdout: ''
  stderr: "tmpwlnkv92n: /tmp/tmpwlnkv92n.cpp:18: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 1, 2, 4, 5}))) == (float(3))' failed.\n"
  exit_code: -6
  status: Exception
