name: HumanEval_117_select_words
language: cpp
prompt: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a natural\
  \ number n, you have been tasked to implement \n// a function that returns a list\
  \ of all words from string s that contain exactly \n// n consonants, in order these\
  \ words appear in the string s.\n// If the string s is empty then the function should\
  \ return an empty list.\n// Note: you may assume the input string contains only\
  \ letters and spaces.\n// Examples:\n// select_words(\"Mary had a little lamb\"\
  , 4) ==> [\"little\"]\n// select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\"\
  , \"lamb\"]\n// select_words(\"simple white space\", 2) ==> []\n// select_words(\"\
  Hello world\", 4) ==> [\"world\"]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"\
  ]\nstd::vector<std::string> select_words(std::string s, long n) {\n"
tests: "}\nint main() {\n    auto candidate = select_words;\n    assert(candidate((\"\
  Mary had a little lamb\"), (4)) == (std::vector<std::string>({\"little\"})));\n\
  \    assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({\"\
  Mary\", \"lamb\"})));\n    assert(candidate((\"simple white space\"), (2)) == (std::vector<std::string>()));\n\
  \    assert(candidate((\"Hello world\"), (4)) == (std::vector<std::string>({\"world\"\
  })));\n    assert(candidate((\"Uncle sam\"), (3)) == (std::vector<std::string>({\"\
  Uncle\"})));\n    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n\
  \    assert(candidate((\"a b c d e f\"), (1)) == (std::vector<std::string>({\"b\"\
  , \"c\", \"d\", \"f\"})));\n}\n"
completions: ["    std::vector<std::string> v;\n    \n    // Write your code here\n\
    \    \n    return v;", "    std::vector<std::string> result;\n    \n    if (s.empty())\
    \ {\n        return result;\n    }\n    \n    std::string word = \"\";\n    \n\
    \    for (auto c : s) {\n        if (c == ' ') {\n            if (word.length()\
    \ > 0) {\n                result.push_back(word);\n                word = \"\"\
    ;\n            }\n        } else {\n            word += c;\n        }\n    }\n\
    \    \n    if (word.length() > 0) {\n        result.push_back(word);\n    }\n\
    \    \n    return result;", "    std::vector<std::string> res;\n    \n    // Write\
    \ your code here\n    \n    return res;", "    std::vector<std::string> v;\n \
    \   \n    // Write your code here\n    \n    return v;", "    std::vector<std::string>\
    \ res;\n    \n    // Write your code here\n    \n    return res;", "    std::vector<std::string>\
    \ v;\n    \n    // Write your code here\n    \n    return v;", "    std::vector<std::string>\
    \ v;\n    std::string word = \"\";\n    long count = 0;\n    for(char c : s) {\n\
    \        if(c == ' ') {\n            v.push_back(word);\n            word = \"\
    \";\n            count = 0;\n            continue;\n        }\n        if(c ==\
    \ 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u') {\n            word +=\
    \ c;\n            count++;\n        }\n        if(count == n) {\n            v.push_back(word);\n\
    \            count = 0;\n            word = \"\";\n        }\n    }\n    if(word\
    \ != \"\") {\n        v.push_back(word);\n    }\n    return v;", "    std::vector<std::string>\
    \ res;\n    if(s.empty())\n        return res;\n    \n    std::vector<std::string>\
    \ temp;\n    \n    for(auto &c: s)\n        if(c == 'a' || c == 'e' || c == 'i'\
    \ || c == 'o' || c == 'u')\n            temp.push_back(c);\n    \n    for(auto\
    \ &c: temp)\n        if(c == ' ')\n            continue;\n        \n        for(auto\
    \ &c: temp)\n            if(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c\
    \ == 'u')\n                temp.push_back(c);\n    \n    for(auto &c: temp)\n\
    \        if(c == ' ')\n            continue;\n        \n        for(auto &c: temp)\n\
    \            if(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n  \
    \              temp.push_back(c);\n    \n    for(auto &c: temp)\n        if(c\
    \ == ' ')\n            continue;\n        \n        for(auto &c: temp)\n     \
    \       if(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n       \
    \         temp.push_back(c);\n    \n    for(auto &c: temp)\n        if(c == '\
    \ ')\n            continue;\n        \n        for(auto &c: temp)\n          \
    \  if(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n            \
    \    temp.push_back(c);\n    \n    for(auto &c: temp)\n        if(c == ' ')\n\
    \            continue;\n        \n        for(auto &c: temp)\n            if(c\
    \ == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n                temp.push_back(c);\n\
    \    \n    for(auto &c: temp)\n        if(c == ' ')\n            continue;\n \
    \       \n        for(auto &c: temp)\n            if(c == 'a' || c == 'e' || c\
    \ == 'i' || c == 'o' || c == 'u')\n                temp.push_back(c);\n    \n\
    \    for(auto &c: temp)\n        if(c == ' ')\n            continue;\n       \
    \ \n        for(auto &c: temp)\n            if(c == 'a' || c == 'e' || c == 'i'\
    \ || c == 'o' || c == 'u')\n                temp.push_back(c);\n    \n    for(auto\
    \ &c: temp)\n        if(c == ' ')\n            continue;\n        \n        for(auto\
    \ &c: temp)\n            if(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c\
    \ == 'u')\n                temp.push_back(c);\n    \n    for(auto &c: temp)\n\
    \        if(c == ' ')\n            continue;\n        \n        for(auto &", " \
    \   std::vector<std::string> res;\n    \n    // Write your code here\n    \n \
    \   return res;", "    std::vector<std::string> v;\n    std::string word = \"\"\
    ;\n    for(char c : s) {\n        if(c == 'a' || c == 'e' || c == 'i' || c ==\
    \ 'o' || c == 'u' || c == 'y') {\n            word += c;\n        }\n        else\
    \ {\n            v.push_back(word);\n            word = \"\";\n        }\n   \
    \ }\n    if(word != \"\") {\n        v.push_back(word);\n    }\n    return v;",
  "    std::vector<std::string> v;\n    \n    // Write your code here\n    \n    return\
    \ v;", "    std::vector<std::string> v;\n    v.push_back(\"\");\n    v.push_back(\"\
    a\");\n    v.push_back(\"b\");\n    v.push_back(\"c\");\n    v.push_back(\"d\"\
    );\n    v.push_back(\"e\");\n    v.push_back(\"f\");\n    v.push_back(\"g\");\n\
    \    v.push_back(\"h\");\n    v.push_back(\"i\");\n    v.push_back(\"j\");\n \
    \   v.push_back(\"k\");\n    v.push_back(\"l\");\n    v.push_back(\"m\");\n  \
    \  v.push_back(\"n\");\n    v.push_back(\"o\");\n    v.push_back(\"p\");\n   \
    \ v.push_back(\"q\");\n    v.push_back(\"r\");\n    v.push_back(\"s\");\n    v.push_back(\"\
    t\");\n    v.push_back(\"u\");\n    v.push_back(\"v\");\n    v.push_back(\"w\"\
    );\n    v.push_back(\"x\");\n    v.push_back(\"y\");\n    v.push_back(\"z\");\n\
    \    v.push_back(\"A\");\n    v.push_back(\"B\");\n    v.push_back(\"C\");\n \
    \   v.push_back(\"D\");\n    v.push_back(\"E\");\n    v.push_back(\"F\");\n  \
    \  v.push_back(\"G\");\n    v.push_back(\"H\");\n    v.push_back(\"I\");\n   \
    \ v.push_back(\"J\");\n    v.push_back(\"K\");\n    v.push_back(\"L\");\n    v.push_back(\"\
    M\");\n    v.push_back(\"N\");\n    v.push_back(\"O\");\n    v.push_back(\"P\"\
    );\n    v.push_back(\"Q\");\n    v.push_back(\"R\");\n    v.push_back(\"S\");\n\
    \    v.push_back(\"T\");\n    v.push_back(\"U\");\n    v.push_back(\"V\");\n \
    \   v.push_back(\"W\");\n    v.push_back(\"X\");\n    v.push_back(\"Y\");\n  \
    \  v.push_back(\"Z\");\n    v.push_back(\"0\");\n    v.push_back(\"1\");\n   \
    \ v.push_back(\"2\");\n    v.push_back(\"3\");\n    v.push_back(\"4\");\n    v.push_back(\"\
    5\");\n    v.push_back(\"6\");\n    v.push_back(\"7\");\n    v.push_back(\"8\"\
    );\n    v.push_back(\"9\");\n    v.push_back(\"!\");\n    v.push_back(\"?\");\n\
    \    v.push_back(\",\");\n    v.push_back(\";\");\n    v.push_back(\":\");\n \
    \   v.push_back(\"(\");\n    v.push_back(\")\");\n    v.push_back(\"'\");\n  \
    \  v.push_back(\"!\");\n    v.push_back(\"?\");\n    v.", "    // Write your code\
    \ here\n    std::vector<std::string> v;\n    std::string temp;\n    for(long i\
    \ = 0; i < s.length(); i++) {\n        if(s[i] == 'a' || s[i] == 'e' || s[i] ==\
    \ 'i' || s[i] == 'o' || s[i] == 'u' || s[i] == 'y') {\n            v.push_back(s.substr(i,\
    \ 1));\n        }\n    }\n    return v;", "    std::vector<std::string> v;\n \
    \   \n    // Write your code here\n    \n    return v;", "    std::vector<std::string>\
    \ v;\n    for(long i = 0; i < s.length(); i++) {\n        if(s[i] == 'a' || s[i]\
    \ == 'e' || s[i] == 'i' || s[i] == 'o' || s[i] == 'u' || s[i] == 'y') {\n    \
    \        v.push_back(s.substr(i, 1));\n        }\n    }\n    return v;", "   \
    \ std::vector<std::string> v;\n    v.push_back(s);\n    return v;", "    std::vector<std::string>\
    \ v;\n    for(auto &c : s) {\n        if(isalpha(c)) {\n            v.push_back(std::to_string(c));\n\
    \        }\n    }\n    return v;", "    std::vector<std::string> res;\n    \n\
    \    if (s.empty())\n        return res;\n    \n    std::string word;\n    \n\
    \    for (auto &c: s) {\n        if (c == 'a' || c == 'e' || c == 'i' || c ==\
    \ 'o' || c == 'u' || c == 'y') {\n            word += c;\n        }\n        else\
    \ if (c == 'n') {\n            if (word.size() == n) {\n                res.push_back(word);\n\
    \                word.clear();\n            }\n        }\n        else if (c ==\
    \ 's') {\n            if (word.size() == n) {\n                res.push_back(word);\n\
    \                word.clear();\n            }\n        }\n        else if (c ==\
    \ 't') {\n            if (word.size() == n) {\n                res.push_back(word);\n\
    \                word.clear();\n            }\n        }\n        else if (c ==\
    \ 'h') {\n            if (word.size() == n) {\n                res.push_back(word);\n\
    \                word.clear();\n            }\n        }\n        else if (c ==\
    \ 'l') {\n            if (word.size() == n) {\n                res.push_back(word);\n\
    \                word.clear();\n            }\n        }\n        else if (c ==\
    \ 'r') {\n            if (word.size() == n) {\n                res.push_back(word);\n\
    \                word.clear();\n            }\n        }\n        else if (c ==\
    \ 'd') {\n            if (word.size() == n) {\n                res.push_back(word);\n\
    \                word.clear();\n            }\n        }\n        else if (c ==\
    \ 'c') {\n            if (word.size() == n) {\n                res.push_back(word);\n\
    \                word.clear();\n            }\n        }\n        else if (c ==\
    \ 'm') {\n            if (word.size() == n) {\n                res.push_back(word);\n\
    \                word.clear();\n            }\n        }\n        else if (c ==\
    \ 'f') {\n            if (word.size() == n) {\n                res.push_back(word);\n\
    \                word.clear();\n            }\n        }\n        else if (c ==\
    \ 'v') {\n            if (word.size() == n) {\n                res.push_back(word);\n\
    \                word.clear();\n            }\n        }\n        else if (c ==\
    \ 'b') {\n            if (word.size() == n) {\n                res.push_back(word);\n\
    \                word.clear();\n            }\n        }\n        else if (c ==\
    \ 'k') {\n            if (word.size() == n) {\n                res.push_back(word);\n\
    \                word.clear();\n            }\n        }\n        else if (c ==\
    \ 'p') {\n            if (word.size() == n) {\n                res.push_back(word);\n\
    \                word.clear();\n            }\n        }\n        else if (c ==\
    \ 'f') {\n            if (word.size() == n) {\n                res.push_back(word);\n\
    \                word.clear();\n            }\n        }\n        else if (c ==\
    \ 'v') {\n            if (word.size() == n) {\n                res.push_back(word);\n\
    \                word.clear();\n            }\n        }\n        else if (c ==\
    \ 'b') {\n            if (word.size() == n) {\n                res.push_back(word);\n\
    \                word.clear();\n            }\n        }\n        else if (c ==\
    \ 'k') {\n            if (", "    std::vector<std::string> v;\n    \n    // Write\
    \ your code here\n    \n    return v;", "    std::vector<std::string> v;\n   \
    \ \n    // Write your code here\n    \n    return v;", "    std::vector<std::string>\
    \ v;\n    \n    // Write your code here\n    \n    return v;", "    std::vector<std::string>\
    \ res;\n    \n    if(s.empty())\n        return res;\n    \n    std::string word\
    \ = \"\";\n    \n    for(char c: s) {\n        if(c == ' ')\n            word\
    \ += c;\n        else if(c == '.' || c == '!' || c == '?' || c == '-' || c ==\
    \ '_' || c == '(' || c == ')' || c == '[' || c == ']' || c == '{' || c == '}'\
    \ || c == ':' || c == ';' || c == '<' || c == '>' || c == '/' || c == '\\\\' ||\
    \ c == '|' || c == '&' || c == '%' || c == '+' || c == '=' || c == '^' || c ==\
    \ '~' || c == '*' || c == '?' || c == '!' || c == '#' || c == '$' || c == '%'\
    \ || c == '&' || c == '(' || c == ')' || c == '[' || c == ']' || c == '{' || c\
    \ == '}' || c == ':' || c == ';' || c == '<' || c == '>' || c == '/' || c == '\\\
    \\' || c == '|' || c == '&' || c == '%' || c == '+' || c == '=' || c == '^' ||\
    \ c == '~' || c == '*' || c == '?' || c == '!' || c == '#' || c == '$' || c ==\
    \ '%' || c == '&' || c == '(' || c == ')' || c == '[' || c == ']' || c == '{'\
    \ || c == '}' || c == ':' || c == ';' || c == '<' || c == '>' || c == '/' || c\
    \ == '\\\\' || c == '|' || c == '&' || c == '%' || c == '+' || c == '=' || c ==\
    \ '^' || c == '~' || c == '*' || c == '?' || c == '!' || c == '#' || c == '$'\
    \ || c == '%' || c == '&' || c == '(' || c == ')' || c == '[' || c == ']' || c\
    \ == '{' || c == '}' || c == ':' || c == ';' || c == '<' || c == '>' || c == '/'\
    \ || c == '\\\\' || c == '|' || c == '&' || c == '%' || c == '+' || c == '=' ||\
    \ c == '^' || c == '~' || c == '*' || c == '?' || c == '!' || c == '#' || c ==\
    \ '$' || c == '%' || c == '&' || c == '(' || c == ')' || c == '[' || c == ']'\
    \ || c == '{' || c == '}' || c == ':' || c == ';' || c == '<' || c == '>' || c\
    \ == '/' || c == '\\\\' || c == '|' || c == '", "    std::vector<std::string>\
    \ v;\n    std::string word = \"\";\n    long count = 0;\n    for (char c : s)\
    \ {\n        if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u') {\n\
    \            word += c;\n            count++;\n        }\n        if (count ==\
    \ n) {\n            v.push_back(word);\n            count = 0;\n            word\
    \ = \"\";\n        }\n    }\n    if (word != \"\") {\n        v.push_back(word);\n\
    \    }\n    return v;", "    // code here\n    std::vector<std::string> v;\n \
    \   for(auto &c: s)\n    {\n        if(isalpha(c))\n        {\n            v.push_back(c.c_str());\n\
    \        }\n    }\n    return v;", "    std::vector<std::string> res;\n    if\
    \ (s.empty()) {\n        return res;\n    }\n    std::string word = \"\";\n  \
    \  long count = 0;\n    for (char c : s) {\n        if (c == ' ') {\n        \
    \    word = \"\";\n            count = 0;\n        } else if (c != ' ') {\n  \
    \          word += c;\n            count++;\n        }\n        if (count == n)\
    \ {\n            res.push_back(word);\n            count = 0;\n        }\n   \
    \ }\n    return res;", "    std::vector<std::string> res;\n    \n    // Write\
    \ your code here\n    \n    return res;", "    std::vector<std::string> res;\n\
    \    \n    // Write your code here\n    \n    return res;", "    std::vector<std::string>\
    \ v;\n    std::string word = \"\";\n    for(char c : s) {\n        if(c == 'a'\
    \ || c == 'e' || c == 'i' || c == 'o' || c == 'u') {\n            word += c;\n\
    \        }\n        else if(c == 'y' || c == 'a' || c == 'e' || c == 'i' || c\
    \ == 'o' || c == 'u') {\n            v.push_back(word);\n            word = \"\
    \";\n        }\n        else if(c == ' ') {\n            v.push_back(word);\n\
    \            word = \"\";\n        }\n    }\n    if(word != \"\") {\n        v.push_back(word);\n\
    \    }\n    return v;", "    std::vector<std::string> v;\n    \n    // Write your\
    \ code here\n    \n    return v;", "    std::vector<std::string> res;\n    if(s.empty())\n\
    \        return res;\n    \n    std::string word = \"\";\n    for(char c : s)\n\
    \        if(c == ' ')\n            word += c;\n        else\n            word\
    \ += c;\n    \n    for(auto &w : select_words(word, n))\n        res.push_back(w);\n\
    \    \n    return res;", "    std::vector<std::string> res;\n    \n    // Write\
    \ your code here\n    \n    return res;", "    // code here\n    std::vector<std::string>\
    \ v;\n    std::string temp;\n    for(size_t i = 0; i < s.size(); i++) {\n    \
    \    if(s[i] == 'a' || s[i] == 'e' || s[i] == 'i' || s[i] == 'o' || s[i] == 'u'\
    \ || s[i] == 'y') {\n            v.push_back(s[i]);\n        }\n    }\n    return\
    \ v;", "    std::vector<std::string> v;\n    std::string temp;\n    long count\
    \ = 0;\n    for(long i = 0; i < s.length(); i++) {\n        if(s[i] == 'a' ||\
    \ s[i] == 'e' || s[i] == 'i' || s[i] == 'o' || s[i] == 'u' || s[i] == 'y') {\n\
    \            count++;\n        }\n    }\n    for(long i = 0; i < s.length(); i++)\
    \ {\n        if(s[i] == 'a' || s[i] == 'e' || s[i] == 'i' || s[i] == 'o' || s[i]\
    \ == 'u' || s[i] == 'y') {\n            count++;\n        }\n    }\n    for(long\
    \ i = 0; i < s.length(); i++) {\n        if(s[i] == 'a' || s[i] == 'e' || s[i]\
    \ == 'i' || s[i] == 'o' || s[i] == 'u' || s[i] == 'y') {\n            count++;\n\
    \        }\n    }\n    for(long i = 0; i < s.length(); i++) {\n        if(s[i]\
    \ == 'a' || s[i] == 'e' || s[i] == 'i' || s[i] == 'o' || s[i] == 'u' || s[i] ==\
    \ 'y') {\n            count++;\n        }\n    }\n    for(long i = 0; i < s.length();\
    \ i++) {\n        if(s[i] == 'a' || s[i] == 'e' || s[i] == 'i' || s[i] == 'o'\
    \ || s[i] == 'u' || s[i] == 'y') {\n            count++;\n        }\n    }\n \
    \   for(long i = 0; i < s.length(); i++) {\n        if(s[i] == 'a' || s[i] ==\
    \ 'e' || s[i] == 'i' || s[i] == 'o' || s[i] == 'u' || s[i] == 'y') {\n       \
    \     count++;\n        }\n    }\n    for(long i = 0; i < s.length(); i++) {\n\
    \        if(s[i] == 'a' || s[i] == 'e' || s[i] == 'i' || s[i] == 'o' || s[i] ==\
    \ 'u' || s[i] == 'y') {\n            count++;\n        }\n    }\n    for(long\
    \ i = 0; i < s.length(); i++) {\n        if(s[i] == 'a' || s[i] == 'e' || s[i]\
    \ == 'i' || s[i] == 'o' || s[i] == 'u' || s[i] == 'y') {\n            count++;\n\
    \        }\n    }\n    for(long i = 0; i < s.length(); i++) {\n        if(s[i]\
    \ == 'a' || s[i] == 'e' || s[i] == 'i' || s[i] == 'o' || s[i] == 'u' || s[i] ==\
    \ 'y') {\n            count++;\n        }\n    }\n    for(long i = 0; i < s.length();\
    \ i++) {\n        if(s[i] == 'a' || s[i] == 'e' || s[i] == 'i' || s[i] == 'o'\
    \ || s[i] == 'u' || s[i] == 'y') {\n            count++;\n        }\n    }\n \
    \   for(long i = 0; i < s.length(); i++) {\n        if(s[i] == 'a' || s[i] ==\
    \ 'e' || s[i] == 'i' || s[i] == 'o' || s[i] == 'u' || s[i] == 'y') {\n       \
    \     count++;\n        }\n    }\n    for(long i = 0; i < s.length(); i++) {\n\
    \        if(s[i] == 'a' || s[i] == 'e' || s[i] == 'i' || s[i] == 'o' || s[i] ==\
    \ 'u' || s[i] == 'y') {\n            count", "    std::vector<std::string> v;\n\
    \    \n    // Write your code here\n    \n    return v;", "    std::vector<std::string>\
    \ res;\n    \n    // Write your code here\n    \n    return res;", "    std::vector<std::string>\
    \ v;\n    std::string word = \"\";\n    for(long i = 0; i < s.length(); i++) {\n\
    \        if(s[i] == ' ') {\n            v.push_back(word);\n            word =\
    \ \"\";\n        } else {\n            word += s[i];\n        }\n    }\n    v.push_back(word);\n\
    \    return v;", "    std::vector<std::string> v;\n    \n    // Write your code\
    \ here\n    \n    return v;", "    std::vector<std::string> res;\n    \n    if(s.empty())\n\
    \        return res;\n    \n    for(auto &c: s) {\n        if(c == 'a' || c ==\
    \ 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'y') {\n            if(n ==\
    \ 1)\n                res.push_back(s);\n            else\n                res.push_back(s.substr(0,\
    \ s.size() - 1));\n        }\n    }\n    \n    return res;", "    std::vector<std::string>\
    \ v;\n    if (s.empty()) {\n        return v;\n    }\n    \n    std::string word\
    \ = \"\";\n    \n    for (char c : s) {\n        if (c == ' ') {\n           \
    \ v.push_back(word);\n            word = \"\";\n        } else {\n           \
    \ word += c;\n        }\n    }\n    \n    v.push_back(word);\n    \n    std::vector<std::string>\
    \ ans;\n    \n    for (auto &w : v) {\n        if (w.size() == n) {\n        \
    \    ans.push_back(w);\n        }\n    }\n    \n    return ans;", "    std::vector<std::string>\
    \ v;\n    std::string word = \"\";\n    long count = 0;\n    for (auto c : s)\
    \ {\n        if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u') {\n\
    \            word += c;\n            count++;\n            if (count == n) {\n\
    \                v.push_back(word);\n                count = 0;\n            \
    \    word = \"\";\n            }\n        } else {\n            word += c;\n \
    \       }\n    }\n    if (word != \"\") {\n        v.push_back(word);\n    }\n\
    \    return v;", "    std::vector<std::string> v;\n    std::string word = \"\"\
    ;\n    std::string temp = \"\";\n    for (char c : s) {\n        if (c == ' '\
    \ || c == '.' || c == '!' || c == '?' || c == '-' || c == '_' || c == '/' || c\
    \ == '\\\\' || c == '(' || c == ')' || c == '{' || c == '}' || c == '[' || c ==\
    \ ']' || c == '<' || c == '>' || c == '|' || c == '~') {\n            v.push_back(word);\n\
    \            word = \"\";\n        } else {\n            word += c;\n        }\n\
    \    }\n    v.push_back(word);\n    return v;", "    std::vector<std::string>\
    \ v;\n    std::string temp;\n    long count = 0;\n    for(auto &i : s) {\n   \
    \     if(i == 'a' || i == 'e' || i == 'i' || i == 'o' || i == 'u' || i == 'y')\
    \ {\n            count++;\n        }\n    }\n    for(auto &i : s) {\n        if(i\
    \ == 'a' || i == 'e' || i == 'i' || i == 'o' || i == 'u' || i == 'y') {\n    \
    \        count++;\n        }\n    }\n    for(auto &i : s) {\n        if(i == 'a'\
    \ || i == 'e' || i == 'i' || i == 'o' || i == 'u' || i == 'y') {\n           \
    \ count++;\n        }\n    }\n    for(auto &i : s) {\n        if(i == 'a' || i\
    \ == 'e' || i == 'i' || i == 'o' || i == 'u' || i == 'y') {\n            count++;\n\
    \        }\n    }\n    for(auto &i : s) {\n        if(i == 'a' || i == 'e' ||\
    \ i == 'i' || i == 'o' || i == 'u' || i == 'y') {\n            count++;\n    \
    \    }\n    }\n    for(auto &i : s) {\n        if(i == 'a' || i == 'e' || i ==\
    \ 'i' || i == 'o' || i == 'u' || i == 'y') {\n            count++;\n        }\n\
    \    }\n    for(auto &i : s) {\n        if(i == 'a' || i == 'e' || i == 'i' ||\
    \ i == 'o' || i == 'u' || i == 'y') {\n            count++;\n        }\n    }\n\
    \    for(auto &i : s) {\n        if(i == 'a' || i == 'e' || i == 'i' || i == 'o'\
    \ || i == 'u' || i == 'y') {\n            count++;\n        }\n    }\n    for(auto\
    \ &i : s) {\n        if(i == 'a' || i == 'e' || i == 'i' || i == 'o' || i == 'u'\
    \ || i == 'y') {\n            count++;\n        }\n    }\n    for(auto &i : s)\
    \ {\n        if(i == 'a' || i == 'e' || i == 'i' || i == 'o' || i == 'u' || i\
    \ == 'y') {\n            count++;\n        }\n    }\n    for(auto &i : s) {\n\
    \        if(i == 'a' || i == 'e' || i == 'i' || i == 'o' || i == 'u' || i == 'y')\
    \ {\n            count++;\n        }\n    }\n    for(auto &i : s) {\n        if(i\
    \ == 'a' || i == 'e' || i == 'i' || i == 'o' || i == 'u' || i == 'y') {\n    \
    \        count", "    std::vector<std::string> v;\n    v.push_back(\"\");\n  \
    \  v.push_back(\"a\");\n    v.push_back(\"b\");\n    v.push_back(\"c\");\n   \
    \ v.push_back(\"d\");\n    v.push_back(\"e\");\n    v.push_back(\"f\");\n    v.push_back(\"\
    g\");\n    v.push_back(\"h\");\n    v.push_back(\"i\");\n    v.push_back(\"j\"\
    );\n    v.push_back(\"k\");\n    v.push_back(\"l\");\n    v.push_back(\"m\");\n\
    \    v.push_back(\"n\");\n    v.push_back(\"o\");\n    v.push_back(\"p\");\n \
    \   v.push_back(\"q\");\n    v.push_back(\"r\");\n    v.push_back(\"s\");\n  \
    \  v.push_back(\"t\");\n    v.push_back(\"u\");\n    v.push_back(\"v\");\n   \
    \ v.push_back(\"w\");\n    v.push_back(\"x\");\n    v.push_back(\"y\");\n    v.push_back(\"\
    z\");\n    v.push_back(\"A\");\n    v.push_back(\"B\");\n    v.push_back(\"C\"\
    );\n    v.push_back(\"D\");\n    v.push_back(\"E\");\n    v.push_back(\"F\");\n\
    \    v.push_back(\"G\");\n    v.push_back(\"H\");\n    v.push_back(\"I\");\n \
    \   v.push_back(\"J\");\n    v.push_back(\"K\");\n    v.push_back(\"L\");\n  \
    \  v.push_back(\"M\");\n    v.push_back(\"N\");\n    v.push_back(\"O\");\n   \
    \ v.push_back(\"P\");\n    v.push_back(\"Q\");\n    v.push_back(\"R\");\n    v.push_back(\"\
    S\");\n    v.push_back(\"T\");\n    v.push_back(\"U\");\n    v.push_back(\"V\"\
    );\n    v.push_back(\"W\");\n    v.push_back(\"X\");\n    v.push_back(\"Y\");\n\
    \    v.push_back(\"Z\");\n    v.push_back(\"0\");\n    v.push_back(\"1\");\n \
    \   v.push_back(\"2\");\n    v.push_back(\"3\");\n    v.push_back(\"4\");\n  \
    \  v.push_back(\"5\");\n    v.push_back(\"6\");\n    v.push_back(\"7\");\n   \
    \ v.push_back(\"8\");\n    v.push_back(\"9\");\n    v.push_back(\"a\");\n    v.push_back(\"\
    b\");\n    v.push_back(\"c\");\n    v.push_back(\"d\");\n    v.push_back(\"e\"\
    );\n    v.push_back(\"f\");\n    v.push_back(\"g\");\n    v.push_back(\"h\");\n\
    \    v.push_back(\"i\");\n    v.push_back(\"j\");\n    v.push_back", "    std::vector<std::string>\
    \ res;\n    \n    // Write your code here\n    \n    return res;", "    std::vector<std::string>\
    \ v;\n    std::string word = \"\";\n    for(long i = 0; i < s.length(); i++) {\n\
    \        if(s[i] == ' ') {\n            v.push_back(word);\n            word =\
    \ \"\";\n        } else {\n            word += s[i];\n        }\n    }\n    v.push_back(word);\n\
    \    return v;", "    std::vector<std::string> v;\n    for(auto &c: s) {\n   \
    \     if(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u') {\n       \
    \     v.push_back(s);\n        }\n    }\n    return v;", "    std::vector<std::string>\
    \ res;\n    \n    // Write your code here\n    \n    return res;", "    std::vector<std::string>\
    \ v;\n    \n    // Write your code here\n    \n    return v;", "    std::vector<std::string>\
    \ v;\n    \n    // Write your code here\n    \n    return v;", "    std::vector<std::string>\
    \ v;\n    \n    // Write your code here\n    \n    return v;", "    std::vector<std::string>\
    \ res;\n    \n    if (s.empty()) {\n        return res;\n    }\n    \n    std::string\
    \ word;\n    \n    for (auto &c : s) {\n        if (c == 'a' || c == 'e' || c\
    \ == 'i' || c == 'o' || c == 'u') {\n            word += c;\n        }\n    }\n\
    \    \n    long count = 0;\n    \n    for (auto &c : word) {\n        if (c ==\
    \ 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u') {\n            count++;\n\
    \        }\n    }\n    \n    if (count == n) {\n        res.push_back(word);\n\
    \    }\n    \n    for (auto &c : word) {\n        if (c == 'a' || c == 'e' ||\
    \ c == 'i' || c == 'o' || c == 'u') {\n            count--;\n        }\n    }\n\
    \    \n    if (count == 0) {\n        res.push_back(word);\n    }\n    \n    return\
    \ res;", "    std::vector<std::string> v;\n    v.push_back(\"\");\n    v.push_back(s);\n\
    \    v.push_back(\"\");\n    v.push_back(\"\");\n    v.push_back(\"\");\n    v.push_back(\"\
    \");\n    v.push_back(\"\");\n    v.push_back(\"\");\n    v.push_back(\"\");\n\
    \    v.push_back(\"\");\n    v.push_back(\"\");\n    v.push_back(\"\");\n    v.push_back(\"\
    \");\n    v.push_back(\"\");\n    v.push_back(\"\");\n    v.push_back(\"\");\n\
    \    v.push_back(\"\");\n    v.push_back(\"\");\n    v.push_back(\"\");\n    v.push_back(\"\
    \");\n    v.push_back(\"\");\n    v.push_back(\"\");\n    v.push_back(\"\");\n\
    \    v.push_back(\"\");\n    v.push_back(\"\");\n    v.push_back(\"\");\n    v.push_back(\"\
    \");\n    v.push_back(\"\");\n    v.push_back(\"\");\n    v.push_back(\"\");\n\
    \    v.push_back(\"\");\n    v.push_back(\"\");\n    v.push_back(\"\");\n    v.push_back(\"\
    \");\n    v.push_back(\"\");\n    v.push_back(\"\");\n    v.push_back(\"\");\n\
    \    v.push_back(\"\");\n    v.push_back(\"\");\n    v.push_back(\"\");\n    v.push_back(\"\
    \");\n    v.push_back(\"\");\n    v.push_back(\"\");\n    v.push_back(\"\");\n\
    \    v.push_back(\"\");\n    v.push_back(\"\");\n    v.push_back(\"\");\n    v.push_back(\"\
    \");\n    v.push_back(\"\");\n    v.push_back(\"\");\n    v.push_back(\"\");\n\
    \    v.push_back(\"\");\n    v.push_back(\"\");\n    v.push_back(\"\");\n    v.push_back(\"\
    \");\n    v.push_back(\"\");\n    v.push_back(\"\");\n    v.push_back(\"\");\n\
    \    v.push_back(\"\");\n    v.push_back(\"\");\n    v.push_back(\"\");\n    v.push_back(\"\
    \");\n    v.push_back(\"\");\n    v.push_back(\"\");\n    v.push_back(\"\");\n\
    \    v.push_back(\"\");\n    v.push_back(\"\");\n    v.push_back(\"\");\n    v.push_back(\"\
    \");\n    v.push_back(\"\");\n    v.push_back(\"\");\n    v.push_back(\"\");\n\
    \    v.push_back(\"\");\n    v.push_back(\"\");\n    v.push_back(\"\");\n    v.push_back(\"\
    \");\n    v.push_back(\"\");\n    v.push_back(\"\");\n    v.push_back(\"\");\n\
    \    v.push_back(\"\");\n    v.push_back(\"\");\n    v.push_back(\"\");\n    v.push_back(\"\
    \");\n    v.push_back(\"\");\n    v.push_back(\"\");\n    v.push_back(\"\");\n\
    \    v.push_back(\"\");\n    v.push_back(\"\");\n    v.push_back(\"\");\n    v.push_back(\"\
    \");\n    v.push_back(\"\");\n    v.push_back(\"\");\n    v.push_back(\"\");\n\
    \    v.push_back(\"\");\n    v.push_back(\"\");\n    v.push_back(\"\");\n    v.push_back(\"\
    \");\n    v.push_back(\"\");\n    v.push_back(\"\");\n    v.push_back(\"\");\n\
    \    v.push_back(\"\");\n    v.", "    std::vector<std::string> v;\n    std::string\
    \ temp;\n    for(long i=0; i<s.length(); i++) {\n        if(s[i] == 'a' || s[i]\
    \ == 'e' || s[i] == 'i' || s[i] == 'o' || s[i] == 'u' || s[i] == 'y') {\n    \
    \        v.push_back(s.substr(i, 1));\n        }\n    }\n    return v;", "   \
    \ std::vector<std::string> res;\n    \n    // Write your code here\n    \n   \
    \ return res;", "    std::vector<std::string> res;\n    std::string word = \"\"\
    ;\n    std::string temp = \"\";\n    long count = 0;\n    for (auto c : s) {\n\
    \        if (c == ' ' || c == '.' || c == '!' || c == '?' || c == '-' || c ==\
    \ '_' || c == '/' || c == '\\\\' || c == '(' || c == ')' || c == '[' || c == ']'\
    \ || c == '{' || c == '}' || c == '<' || c == '>' || c == '|' || c == '~' || c\
    \ == '@' || c == '#' || c == '$' || c == '%' || c == '^' || c == '&' || c == '*'\
    \ || c == '(' || c == ')' || c == '-' || c == '_' || c == '+' || c == '=' || c\
    \ == '[' || c == ']' || c == '{' || c == '}' || c == '<' || c == '>' || c == '|'\
    \ || c == '~' || c == '@' || c == '#' || c == '$' || c == '%' || c == '^' || c\
    \ == '&' || c == '*' || c == '(' || c == ')' || c == '-' || c == '_' || c == '+'\
    \ || c == '=' || c == '[' || c == ']' || c == '{' || c == '}' || c == '<' || c\
    \ == '>' || c == '|' || c == '~' || c == '@' || c == '#' || c == '$' || c == '%'\
    \ || c == '^' || c == '&' || c == '*' || c == '(' || c == ')' || c == '-' || c\
    \ == '_' || c == '+' || c == '=' || c == '[' || c == ']' || c == '{' || c == '}'\
    \ || c == '<' || c == '>' || c == '|' || c == '~' || c == '@' || c == '#' || c\
    \ == '$' || c == '%' || c == '^' || c == '&' || c == '*' || c == '(' || c == ')'\
    \ || c == '-' || c == '_' || c == '+' || c == '=' || c == '[' || c == ']' || c\
    \ == '{' || c == '}' || c == '<' || c == '>' || c == '|' || c == '~' || c == '@'\
    \ || c == '#' || c == '$' || c == '%' || c == '^' || c == '&' || c == '*' || c\
    \ == '(' || c == ')' || c == '-' || c == '_' || c == '+' || c == '=' || c == '['\
    \ || c == ']' || c == '{' || c == '}' || c == '<' || c == '>' || c == '|' || c\
    \ == '~' || c == '@' || c == '", "    std::vector<std::string> res;\n    \n  \
    \  // Write your code here\n    \n    return res;", "    std::vector<std::string>\
    \ v;\n    std::string temp;\n    for(long i = 0; i < s.length(); i++) {\n    \
    \    if(s[i] == ' ') {\n            v.push_back(temp);\n            temp.clear();\n\
    \        }\n        else {\n            temp += s[i];\n        }\n    }\n    if(temp\
    \ != \"\") {\n        v.push_back(temp);\n    }\n    return v;", "    std::vector<std::string>\
    \ v;\n    \n    // Write your code here\n    \n    return v;", "    std::vector<std::string>\
    \ v;\n    if (s.empty())\n        return v;\n    \n    std::string word = \"\"\
    ;\n    \n    for (char c : s) {\n        if (c == 'a' || c == 'e' || c == 'i'\
    \ || c == 'o' || c == 'u') {\n            word += c;\n        }\n        else\
    \ if (c == 'n') {\n            if (word.length() >= n) {\n                v.push_back(word);\n\
    \                word = \"\";\n            }\n        }\n        else if (c ==\
    \ 't' || c == 'h' || c == 'e' || c == 'l' || c == 'l' || c == 'o' || c == 'd')\
    \ {\n            if (word.length() >= n) {\n                v.push_back(word);\n\
    \                word = \"\";\n            }\n        }\n        else if (c ==\
    \ 's') {\n            if (word.length() >= n) {\n                v.push_back(word);\n\
    \                word = \"\";\n            }\n        }\n        else if (c ==\
    \ 'w') {\n            if (word.length() >= n) {\n                v.push_back(word);\n\
    \                word = \"\";\n            }\n        }\n        else if (c ==\
    \ 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u') {\n            if (word.length()\
    \ >= n) {\n                v.push_back(word);\n                word = \"\";\n\
    \            }\n        }\n        else if (c == 'n') {\n            if (word.length()\
    \ >= n) {\n                v.push_back(word);\n                word = \"\";\n\
    \            }\n        }\n        else if (c == 't' || c == 'h' || c == 'e' ||\
    \ c == 'l' || c == 'l' || c == 'o' || c == 'd') {\n            if (word.length()\
    \ >= n) {\n                v.push_back(word);\n                word = \"\";\n\
    \            }\n        }\n        else if (c == 's') {\n            if (word.length()\
    \ >= n) {\n                v.push_back(word);\n                word = \"\";\n\
    \            }\n        }\n        else if (c == 'w') {\n            if (word.length()\
    \ >= n) {\n                v.push_back(word);\n                word = \"\";\n\
    \            }\n        }\n    }\n    \n    if (word.length() >= n) {\n      \
    \  v.push_back(word);\n    }\n    \n    return v;", "    std::vector<std::string>\
    \ res;\n    \n    if (s.empty()) {\n        return res;\n    }\n    \n    std::string\
    \ word;\n    \n    for (size_t i = 0; i < s.size(); i++) {\n        word = s.substr(i,\
    \ 1);\n        \n        if (word.find_first_of(\"aeiou\") == std::string::npos)\
    \ {\n            res.push_back(word);\n        }\n    }\n    \n    return res;",
  "    std::vector<std::string> v;\n    \n    // Write your code here\n    \n    return\
    \ v;", "    std::vector<std::string> res;\n    if (s.empty()) {\n        return\
    \ res;\n    }\n    \n    // Your code here\n    \n    return res;", "    std::vector<std::string>\
    \ res;\n    std::string temp;\n    long count = 0;\n    for (auto &c : s) {\n\
    \        if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u') {\n   \
    \         count++;\n        }\n    }\n    if (count == n) {\n        for (auto\
    \ &c : s) {\n            if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c\
    \ == 'u') {\n                res.push_back(temp);\n                temp = \"\"\
    ;\n            }\n            else {\n                temp += c;\n           \
    \ }\n        }\n        res.push_back(temp);\n    }\n    return res;", "    std::vector<std::string>\
    \ res;\n    \n    if(s.empty())\n        return res;\n    \n    for(auto &c: s)\n\
    \        if(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n      \
    \      if(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n        \
    \        res.push_back(c);\n            else\n                res.push_back('\
    \ ');\n    \n    for(auto &c: s)\n        if(c == 'a' || c == 'e' || c == 'i'\
    \ || c == 'o' || c == 'u')\n            if(c == 'a' || c == 'e' || c == 'i' ||\
    \ c == 'o' || c == 'u')\n                res.push_back(c);\n            else\n\
    \                res.push_back(' ');\n    \n    for(auto &c: s)\n        if(c\
    \ == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n            if(c ==\
    \ 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n                res.push_back(c);\n\
    \            else\n                res.push_back(' ');\n    \n    for(auto &c:\
    \ s)\n        if(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n \
    \           if(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n   \
    \             res.push_back(c);\n            else\n                res.push_back('\
    \ ');\n    \n    for(auto &c: s)\n        if(c == 'a' || c == 'e' || c == 'i'\
    \ || c == 'o' || c == 'u')\n            if(c == 'a' || c == 'e' || c == 'i' ||\
    \ c == 'o' || c == 'u')\n                res.push_back(c);\n            else\n\
    \                res.push_back(' ');\n    \n    for(auto &c: s)\n        if(c\
    \ == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n            if(c ==\
    \ 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n                res.push_back(c);\n\
    \            else\n                res.push_back(' ');\n    \n    for(auto &c:\
    \ s)\n        if(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n \
    \           if(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n   \
    \             res.push_back(c);\n            else\n                res.push_back('\
    \ ');\n    \n    for(auto &c: s)\n        if(c == 'a' || ", "    std::vector<std::string>\
    \ res;\n    \n    // Write your code here\n    \n    return res;", "    std::vector<std::string>\
    \ v;\n    for(long i = 0; i < s.length(); i++) {\n        for(long j = 0; j <\
    \ n; j++) {\n            if(s[i] == ' ') {\n                v.push_back(s.substr(i,\
    \ 1));\n                break;\n            }\n            else if(s[i] == 'a'\
    \ || s[i] == 'e' || s[i] == 'i' || s[i] == 'o' || s[i] == 'u' || s[i] == 'y')\
    \ {\n                v.push_back(s.substr(i, 1));\n                break;\n  \
    \          }\n        }\n    }\n    return v;", "    std::vector<std::string>\
    \ res;\n    std::string word = \"\";\n    long count = 0;\n    for(char c: s)\
    \ {\n        if(c == ' ') {\n            if(!word.empty()) {\n               \
    \ res.push_back(word);\n                word = \"\";\n            }\n        \
    \    count++;\n        }\n        else if(c == '.' || c == '!' || c == '?' ||\
    \ c == '-' || c == '_' || c == '~' || c == '<' || c == '>' || c == '/' || c ==\
    \ '\\\\' || c == '|' || c == '@' || c == '$' || c == '%' || c == '^' || c == '&'\
    \ || c == '*' || c == '(' || c == ')' || c == '{' || c == '}' || c == ':' || c\
    \ == '[' || c == ']' || c == '|' || c == '~' || c == '?' || c == '.' || c == '!'\
    \ || c == '?' || c == '-' || c == '_' || c == '~' || c == '<' || c == '>' || c\
    \ == '/' || c == '\\\\' || c == '|' || c == '@' || c == '$' || c == '%' || c ==\
    \ '^' || c == '&' || c == '*' || c == '(' || c == ')' || c == '{' || c == '}'\
    \ || c == ':' || c == '[' || c == ']' || c == '|' || c == '~' || c == '?' || c\
    \ == '.' || c == '!' || c == '?' || c == '-' || c == '_' || c == '~' || c == '<'\
    \ || c == '>' || c == '/' || c == '\\\\' || c == '|' || c == '@' || c == '$' ||\
    \ c == '%' || c == '^' || c == '&' || c == '*' || c == '(' || c == ')' || c ==\
    \ '{' || c == '}' || c == ':' || c == '[' || c == ']' || c == '|' || c == '~'\
    \ || c == '?' || c == '.' || c == '!' || c == '?' || c == '-' || c == '_' || c\
    \ == '~' || c == '<' || c == '>' || c == '/' || c == '\\\\' || c == '|' || c ==\
    \ '@' || c == '$' || c == '%' || c == '^' || c == '&' || c == '*' || c == '('\
    \ || c == ')' || c == '{' || c == '}' || c == ':' || c == '[' || c == ']' || c\
    \ == '|' || c == '~' || c == '?' || c == '.' || c == '!' || c == '?' || c == '-'\
    \ || c == '_' || c == '~' || c == '<' || c == '>' || c == '/' || c == '\\\\' || ",
  "    std::vector<std::string> v;\n    if (s.empty()) {\n        return v;\n    }\n\
    \    \n    std::string word = \"\";\n    \n    for (auto c : s) {\n        if\
    \ (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u') {\n            word\
    \ += c;\n        }\n    }\n    \n    v.push_back(word);\n    \n    for (long i\
    \ = 0; i < n; i++) {\n        std::string word = \"\";\n        for (auto c :\
    \ s) {\n            if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\
    \ {\n                word += c;\n            }\n        }\n        \n        v.push_back(word);\n\
    \    }\n    \n    return v;", "    std::vector<std::string> res;\n    \n    for(auto\
    \ &c: s) {\n        if(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\
    \ {\n            res.push_back(c);\n        }\n    }\n    \n    return res;",
  "    std::vector<std::string> v;\n    \n    // Write your code here\n    \n    return\
    \ v;", "    std::vector<std::string> v;\n    v.push_back(\"\");\n    v.push_back(s);\n\
    \    for(long i = 0; i < s.size(); i++) {\n        if(s[i] == ' ') {\n       \
    \     v.push_back(\"\");\n        } else {\n            v.push_back(s.substr(0,\
    \ i));\n        }\n    }\n    for(long i = 0; i < v.size(); i++) {\n        for(long\
    \ j = 0; j < n; j++) {\n            std::string temp = v[i];\n            for(long\
    \ k = 0; k < temp.size(); k++) {\n                if(temp[k] == ' ') {\n     \
    \               temp.erase(temp.begin() + k);\n                }\n           \
    \ }\n            v.erase(v.begin() + i);\n            v.push_back(temp);\n   \
    \     }\n    }\n    return v;", "    std::vector<std::string> v;\n    \n    //\
    \ Write your code here\n    \n    return v;", "    std::vector<std::string> res;\n\
    \    \n    // Write your code here\n    \n    return res;", "    std::vector<std::string>\
    \ v;\n    std::string word = \"\";\n    for(char c : s) {\n        if(c == 'a'\
    \ || c == 'e' || c == 'i' || c == 'o' || c == 'u') {\n            word += c;\n\
    \        }\n        else {\n            if(!word.empty()) {\n                if(word.size()\
    \ == n) {\n                    v.push_back(word);\n                    word =\
    \ \"\";\n                }\n                else {\n                    v.push_back(word);\n\
    \                    word = \"\";\n                }\n            }\n        }\n\
    \    }\n    if(!word.empty()) {\n        if(word.size() == n) {\n            v.push_back(word);\n\
    \        }\n    }\n    return v;", "    // code here\n    std::vector<std::string>\
    \ v;\n    std::string word;\n    for(auto &c: s) {\n        if(c == 'a' || c ==\
    \ 'e' || c == 'i' || c == 'o' || c == 'u') {\n            v.push_back(word);\n\
    \            word = \"\";\n        }\n        else {\n            word += c;\n\
    \        }\n    }\n    v.push_back(word);\n    return v;", "    std::vector<std::string>\
    \ v;\n    for(auto &c: s) {\n        if(isalpha(c)) {\n            v.push_back(c.c_str());\n\
    \        }\n    }\n    return v;", "    std::vector<std::string> v;\n    \n  \
    \  // Write your code here\n    \n    return v;", "    std::vector<std::string>\
    \ res;\n    \n    // Write your code here\n    \n    return res;", "    std::vector<std::string>\
    \ result;\n    \n    // Write your code here\n    \n    return result;", "   \
    \ std::vector<std::string> res;\n    \n    // Write your code here\n    \n   \
    \ return res;", "    std::vector<std::string> v;\n    std::string word = \"\"\
    ;\n    for(char c : s) {\n        if(c == 'a' || c == 'e' || c == 'i' || c ==\
    \ 'o' || c == 'u') {\n            word += c;\n        }\n        else {\n    \
    \        v.push_back(word);\n            word = \"\";\n        }\n    }\n    if(word\
    \ != \"\") {\n        v.push_back(word);\n    }\n    return v;", "    std::vector<std::string>\
    \ v;\n    \n    // Write your code here\n    \n    return v;", "    std::vector<std::string>\
    \ res;\n    if(s.empty())\n        return res;\n    \n    for(auto &c: s)\n  \
    \      if(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n        \
    \    if(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n          \
    \      res.push_back(c);\n            else\n                res.push_back(' ');\n\
    \    \n    for(auto &c: s)\n        if(c == 'a' || c == 'e' || c == 'i' || c ==\
    \ 'o' || c == 'u')\n            if(c == 'a' || c == 'e' || c == 'i' || c == 'o'\
    \ || c == 'u')\n                res.push_back(c);\n            else\n        \
    \        res.push_back(' ');\n    \n    for(auto &c: s)\n        if(c == 'a' ||\
    \ c == 'e' || c == 'i' || c == 'o' || c == 'u')\n            if(c == 'a' || c\
    \ == 'e' || c == 'i' || c == 'o' || c == 'u')\n                res.push_back(c);\n\
    \            else\n                res.push_back(' ');\n    \n    for(auto &c:\
    \ s)\n        if(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n \
    \           if(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n   \
    \             res.push_back(c);\n            else\n                res.push_back('\
    \ ');\n    \n    for(auto &c: s)\n        if(c == 'a' || c == 'e' || c == 'i'\
    \ || c == 'o' || c == 'u')\n            if(c == 'a' || c == 'e' || c == 'i' ||\
    \ c == 'o' || c == 'u')\n                res.push_back(c);\n            else\n\
    \                res.push_back(' ');\n    \n    for(auto &c: s)\n        if(c\
    \ == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n            if(c ==\
    \ 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n                res.push_back(c);\n\
    \            else\n                res.push_back(' ');\n    \n    for(auto &c:\
    \ s)\n        if(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n \
    \           if(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n   \
    \             res.push_back(c);\n            else\n                res.push_back('\
    \ ');\n    \n    for(auto &c: s)\n        if(c == 'a' || c == '", "    std::vector<std::string>\
    \ v;\n    for(auto &i : s) {\n        for(auto &j : i) {\n            if(j ==\
    \ 'a' || j == 'e' || j == 'i' || j == 'o' || j == 'u') {\n                v.push_back(j);\n\
    \            }\n        }\n    }\n    return v;", "    std::vector<std::string>\
    \ v;\n    v.push_back(\"\");\n    v.push_back(s);\n    for(long i=0;i<s.size();i++)\
    \ {\n        if(s[i]==' ') {\n            v.push_back(\"\");\n        } else {\n\
    \            v.push_back(s.substr(0,i));\n            v.push_back(s.substr(i+1,s.size()));\n\
    \        }\n    }\n    for(long i=0;i<v.size();i++) {\n        for(long j=0;j<v[i].size();j++)\
    \ {\n            if(!isalpha(v[i][j])) {\n                v.erase(v.begin()+i);\n\
    \                v.erase(v.begin()+i);\n                break;\n            }\n\
    \        }\n    }\n    for(long i=0;i<v.size();i++) {\n        for(long j=0;j<v[i].size();j++)\
    \ {\n            if(!isalpha(v[i][j])) {\n                v.erase(v.begin()+i);\n\
    \                v.erase(v.begin()+i);\n                break;\n            }\n\
    \        }\n    }\n    for(long i=0;i<v.size();i++) {\n        for(long j=0;j<v[i].size();j++)\
    \ {\n            if(!isalpha(v[i][j])) {\n                v.erase(v.begin()+i);\n\
    \                v.erase(v.begin()+i);\n                break;\n            }\n\
    \        }\n    }\n    for(long i=0;i<v.size();i++) {\n        for(long j=0;j<v[i].size();j++)\
    \ {\n            if(!isalpha(v[i][j])) {\n                v.erase(v.begin()+i);\n\
    \                v.erase(v.begin()+i);\n                break;\n            }\n\
    \        }\n    }\n    for(long i=0;i<v.size();i++) {\n        for(long j=0;j<v[i].size();j++)\
    \ {\n            if(!isalpha(v[i][j])) {\n                v.erase(v.begin()+i);\n\
    \                v.erase(v.begin()+i);\n                break;\n            }\n\
    \        }\n    }\n    for(long i=0;i<v.size();i++) {\n        for(long j=0;j<v[i].size();j++)\
    \ {\n            if(!isalpha(v[i][j])) {\n                v.erase(v.begin()+i);\n\
    \                v.erase(v.begin()+i);\n                break;\n            }\n\
    \        }\n    }\n    for(long i=0;i<v.size();i++) {\n        for(long j=0;j<v[i].size();j++)\
    \ {\n            if(!isalpha(v[i][j])) {\n                v.erase(v.begin()+i);\n\
    \                v.erase(v.begin()+i);\n                break;\n            }\n\
    \        }\n    }\n    for(long i=0;i<v.size();i++) {\n        for(long j=0;j<v[i].size();j++)\
    \ {", "    std::vector<std::string> res;\n    \n    // Write your code here\n\
    \    \n    return res;", "    std::vector<std::string> res;\n    if(s.empty())\n\
    \        return res;\n    \n    std::string word = \"\";\n    \n    for(char c:\
    \ s) {\n        if(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' ||\
    \ c == 'y') {\n            word += c;\n        }\n    }\n    \n    for(char c:\
    \ word) {\n        if(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u'\
    \ || c == 'y') {\n            res.push_back(word);\n            word = \"\";\n\
    \        }\n    }\n    \n    for(char c: word) {\n        if(c == 'a' || c ==\
    \ 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'y') {\n            word +=\
    \ c;\n        }\n    }\n    \n    for(char c: word) {\n        if(c == 'a' ||\
    \ c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'y') {\n            res.push_back(word);\n\
    \            word = \"\";\n        }\n    }\n    \n    for(char c: word) {\n \
    \       if(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'y')\
    \ {\n            word += c;\n        }\n    }\n    \n    for(char c: word) {\n\
    \        if(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'y')\
    \ {\n            res.push_back(word);\n            word = \"\";\n        }\n \
    \   }\n    \n    for(char c: word) {\n        if(c == 'a' || c == 'e' || c ==\
    \ 'i' || c == 'o' || c == 'u' || c == 'y') {\n            word += c;\n       \
    \ }\n    }\n    \n    for(char c: word) {\n        if(c == 'a' || c == 'e' ||\
    \ c == 'i' || c == 'o' || c == 'u' || c == 'y') {\n            res.push_back(word);\n\
    \            word = \"\";\n        }\n    }\n    \n    for(char c: word) {\n \
    \       if(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'y')\
    \ {\n            word += c;\n        }\n    }\n    \n    for(char c: word) {\n\
    \        if(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'y')\
    \ {\n            res.push_back(word);\n            word = \"\";\n        }\n \
    \   }\n    \n    for(char c: word) {\n        if(c == 'a' || c == 'e' || c ==\
    \ 'i' || c == 'o' || c == '", "    std::vector<std::string> v;\n    v.push_back(\"\
    \");\n    v.push_back(s);\n    v.push_back(\"\");\n    v.push_back(\"\");\n  \
    \  v.push_back(\"\");\n    v.push_back(\"\");\n    v.push_back(\"\");\n    v.push_back(\"\
    \");\n    v.push_back(\"\");\n    v.push_back(\"\");\n    v.push_back(\"\");\n\
    \    v.push_back(\"\");\n    v.push_back(\"\");\n    v.push_back(\"\");\n    v.push_back(\"\
    \");\n    v.push_back(\"\");\n    v.push_back(\"\");\n    v.push_back(\"\");\n\
    \    v.push_back(\"\");\n    v.push_back(\"\");\n    v.push_back(\"\");\n    v.push_back(\"\
    \");\n    v.push_back(\"\");\n    v.push_back(\"\");\n    v.push_back(\"\");\n\
    \    v.push_back(\"\");\n    v.push_back(\"\");\n    v.push_back(\"\");\n    v.push_back(\"\
    \");\n    v.push_back(\"\");\n    v.push_back(\"\");\n    v.push_back(\"\");\n\
    \    v.push_back(\"\");\n    v.push_back(\"\");\n    v.push_back(\"\");\n    v.push_back(\"\
    \");\n    v.push_back(\"\");\n    v.push_back(\"\");\n    v.push_back(\"\");\n\
    \    v.push_back(\"\");\n    v.push_back(\"\");\n    v.push_back(\"\");\n    v.push_back(\"\
    \");\n    v.push_back(\"\");\n    v.push_back(\"\");\n    v.push_back(\"\");\n\
    \    v.push_back(\"\");\n    v.push_back(\"\");\n    v.push_back(\"\");\n    v.push_back(\"\
    \");\n    v.push_back(\"\");\n    v.push_back(\"\");\n    v.push_back(\"\");\n\
    \    v.push_back(\"\");\n    v.push_back(\"\");\n    v.push_back(\"\");\n    v.push_back(\"\
    \");\n    v.push_back(\"\");\n    v.push_back(\"\");\n    v.push_back(\"\");\n\
    \    v.push_back(\"\");\n    v.push_back(\"\");\n    v.push_back(\"\");\n    v.push_back(\"\
    \");\n    v.push_back(\"\");\n    v.push_back(\"\");\n    v.push_back(\"\");\n\
    \    v.push_back(\"\");\n    v.push_back(\"\");\n    v.push_back(\"\");\n    v.push_back(\"\
    \");\n    v.push_back(\"\");\n    v.push_back(\"\");\n    v.push_back(\"\");\n\
    \    v.push_back(\"\");\n    v.push_back(\"\");\n    v.push_back(\"\");\n    v.push_back(\"\
    \");\n    v.push_back(\"\");\n    v.push_back(\"\");\n    v.push_back(\"\");\n\
    \    v.push_back(\"\");\n    v.push_back(\"\");\n    v.push_back(\"\");\n    v.push_back(\"\
    \");\n    v.push_back(\"\");\n    v.push_back(\"\");\n    v.push_back(\"\");\n\
    \    v.push_back(\"\");\n    v.push_back(\"\");\n    v.push_back(\"\");\n    v.push_back(\"\
    \");\n    v.push_back(\"\");\n    v.push_back(\"\");\n    v.push_back(\"\");\n\
    \    v.push_back(\"\");\n    v.push_back(\"\");\n    v.push_back(\"\");\n    v.push_back(\"\
    \");\n    v.push_back(\"\");\n    v.push_back(\"\");\n    v.", "    std::vector<std::string>\
    \ res;\n    \n    if (s.empty())\n        return res;\n    \n    std::string word\
    \ = \"\";\n    \n    for (char c : s) {\n        if (c == 'a' || c == 'e' || c\
    \ == 'i' || c == 'o' || c == 'u' || c == 'y') {\n            word += c;\n    \
    \    }\n        else if (c == 'n') {\n            if (word.size() == n) {\n  \
    \              res.push_back(word);\n                word = \"\";\n          \
    \  }\n        }\n        else if (c == 's') {\n            if (word.size() ==\
    \ n) {\n                res.push_back(word);\n                word = \"\";\n \
    \           }\n        }\n        else if (c == 't') {\n            if (word.size()\
    \ == n) {\n                res.push_back(word);\n                word = \"\";\n\
    \            }\n        }\n        else if (c == 'h') {\n            if (word.size()\
    \ == n) {\n                res.push_back(word);\n                word = \"\";\n\
    \            }\n        }\n        else if (c == 'l') {\n            if (word.size()\
    \ == n) {\n                res.push_back(word);\n                word = \"\";\n\
    \            }\n        }\n        else if (c == 'r') {\n            if (word.size()\
    \ == n) {\n                res.push_back(word);\n                word = \"\";\n\
    \            }\n        }\n        else if (c == 'd') {\n            if (word.size()\
    \ == n) {\n                res.push_back(word);\n                word = \"\";\n\
    \            }\n        }\n        else if (c == 'c') {\n            if (word.size()\
    \ == n) {\n                res.push_back(word);\n                word = \"\";\n\
    \            }\n        }\n        else if (c == 'm') {\n            if (word.size()\
    \ == n) {\n                res.push_back(word);\n                word = \"\";\n\
    \            }\n        }\n        else if (c == 'f') {\n            if (word.size()\
    \ == n) {\n                res.push_back(word);\n                word = \"\";\n\
    \            }\n        }\n        else if (c == 'v') {\n            if (word.size()\
    \ == n) {\n                res.push_back(word);\n                word = \"\";\n\
    \            }\n        }\n        else if (c == 'b') {\n            if (word.size()\
    \ == n) {\n                res.push_back(word);\n                word = \"\";\n\
    \            }\n        }\n        else if (c == 'k') {\n            if (word.size()\
    \ == n) {\n                res.push_back(word);\n                word = \"\";\n\
    \            }\n        }\n        else if (c == 'p') {\n            if (word.size()\
    \ == n) {\n                res.push_back(word);\n                word = \"\";\n\
    \            }\n        }\n        else if (c == 'f') {\n            if (word.size()\
    \ == n) {\n                res.push_back(word);\n                word = \"\";\n\
    \            }\n        }\n        else if (c == 'w') {\n            if (word.size()\
    \ == n) {\n                res.push_back(word);\n                word = \"\";\n\
    \            }\n        }\n        else if (c == 'e') {\n            if (word.size()\
    \ == n) {\n                res.push_back(word);\n                word = \"\";\n\
    \            }\n        }\n        else if (c == 't') {\n            if (", " \
    \   std::vector<std::string> v;\n    \n    // Write your code here\n    \n   \
    \ return v;", "    std::vector<std::string> v;\n    std::string word = \"\";\n\
    \    for(char c: s) {\n        if(c == 'a' || c == 'e' || c == 'i' || c == 'o'\
    \ || c == 'u') {\n            word += c;\n        }\n        else if(c == 'n')\
    \ {\n            v.push_back(word);\n            word = \"\";\n        }\n   \
    \     else {\n            word += c;\n        }\n    }\n    if(word != \"\") {\n\
    \        v.push_back(word);\n    }\n    return v;", "    std::vector<std::string>\
    \ v;\n    v.push_back(\"\");\n    v.push_back(s);\n    for(long i = 0; i < s.size();\
    \ i++) {\n        for(long j = i; j < s.size(); j++) {\n            if(s[i] ==\
    \ s[j]) {\n                v.push_back(s.substr(i, j));\n                v.push_back(s.substr(j,\
    \ s.size()));\n                break;\n            }\n        }\n    }\n    return\
    \ v;", "    std::vector<std::string> res;\n    if(s.empty())\n        return res;\n\
    \    \n    for(auto &c: s)\n        if(c == 'a' || c == 'e' || c == 'i' || c ==\
    \ 'o' || c == 'u')\n            if(c == 'a' || c == 'e' || c == 'i' || c == 'o'\
    \ || c == 'u')\n                res.push_back(c);\n            else\n        \
    \        res.push_back(' ');\n    \n    for(auto &c: s)\n        if(c == 'a' ||\
    \ c == 'e' || c == 'i' || c == 'o' || c == 'u')\n            if(c == 'a' || c\
    \ == 'e' || c == 'i' || c == 'o' || c == 'u')\n                res.push_back(c);\n\
    \            else\n                res.push_back(' ');\n    \n    for(auto &c:\
    \ s)\n        if(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n \
    \           if(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n   \
    \             res.push_back(c);\n            else\n                res.push_back('\
    \ ');\n    \n    for(auto &c: s)\n        if(c == 'a' || c == 'e' || c == 'i'\
    \ || c == 'o' || c == 'u')\n            if(c == 'a' || c == 'e' || c == 'i' ||\
    \ c == 'o' || c == 'u')\n                res.push_back(c);\n            else\n\
    \                res.push_back(' ');\n    \n    for(auto &c: s)\n        if(c\
    \ == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n            if(c ==\
    \ 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n                res.push_back(c);\n\
    \            else\n                res.push_back(' ');\n    \n    for(auto &c:\
    \ s)\n        if(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n \
    \           if(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n   \
    \             res.push_back(c);\n            else\n                res.push_back('\
    \ ');\n    \n    for(auto &c: s)\n        if(c == 'a' || c == 'e' || c == 'i'\
    \ || c == 'o' || c == 'u')\n            if(c == 'a' || c == 'e' || c == 'i' ||\
    \ c == 'o' || c == 'u')\n                res.push_back(c);\n            else\n\
    \                res.push_back(' ');\n    \n    for(auto &c: s)\n        if(c\
    \ == 'a' || c == '", "    std::vector<std::string> v;\n    std::string word =\
    \ \"\";\n    for(char c : s) {\n        if(c == 'a' || c == 'e' || c == 'i' ||\
    \ c == 'o' || c == 'u') {\n            word += c;\n        }\n        else {\n\
    \            word += c;\n            v.push_back(word);\n            word = \"\
    \";\n        }\n    }\n    if(word != \"\") {\n        v.push_back(word);\n  \
    \  }\n    return v;", "    std::vector<std::string> res;\n    std::string temp;\n\
    \    long count = 0;\n    for(long i = 0; i < s.length(); i++) {\n        if(s[i]\
    \ == ' ') {\n            temp.clear();\n            count = 0;\n            for(long\
    \ j = i; j < s.length(); j++) {\n                if(s[j] == ' ') {\n         \
    \           temp.push_back(s[j]);\n                    count++;\n            \
    \    }\n                else if(s[j] == s[i]) {\n                    temp.push_back(s[j]);\n\
    \                    count++;\n                }\n            }\n            if(count\
    \ == n) {\n                res.push_back(temp);\n            }\n        }\n  \
    \  }\n    return res;", "    std::vector<std::string> result;\n    \n    // Write\
    \ your code here\n    \n    return result;", "    std::vector<std::string> v;\n\
    \    if (s.empty()) {\n        return v;\n    }\n    std::string word = \"\";\n\
    \    for (auto c : s) {\n        if (c == 'a' || c == 'e' || c == 'i' || c ==\
    \ 'o' || c == 'u') {\n            word += c;\n        }\n        else if (c ==\
    \ 'n') {\n            if (word.size() == n) {\n                v.push_back(word);\n\
    \                word = \"\";\n            }\n        }\n    }\n    if (word.size()\
    \ > 0) {\n        v.push_back(word);\n    }\n    return v;", "    std::vector<std::string>\
    \ v;\n    \n    // Write your code here\n    \n    return v;", "    std::vector<std::string>\
    \ v;\n    v.push_back(\"\");\n    v.push_back(s);\n    \n    long count = 0;\n\
    \    \n    for(long i = 0; i < v.size(); i++) {\n        for(long j = 0; j < v[i].size();\
    \ j++) {\n            if(v[i][j] == ' ') {\n                count++;\n       \
    \     }\n        }\n        \n        if(count == n) {\n            v.erase(v.begin()\
    \ + i);\n            v.erase(v.begin() + i);\n            v.erase(v.begin() +\
    \ i);\n            v.erase(v.begin() + i);\n            v.erase(v.begin() + i);\n\
    \            v.erase(v.begin() + i);\n            v.erase(v.begin() + i);\n  \
    \          v.erase(v.begin() + i);\n            v.erase(v.begin() + i);\n    \
    \        v.erase(v.begin() + i);\n            v.erase(v.begin() + i);\n      \
    \      v.erase(v.begin() + i);\n            v.erase(v.begin() + i);\n        \
    \    v.erase(v.begin() + i);\n            v.erase(v.begin() + i);\n          \
    \  v.erase(v.begin() + i);\n            v.erase(v.begin() + i);\n            v.erase(v.begin()\
    \ + i);\n            v.erase(v.begin() + i);\n            v.erase(v.begin() +\
    \ i);\n            v.erase(v.begin() + i);\n            v.erase(v.begin() + i);\n\
    \            v.erase(v.begin() + i);\n            v.erase(v.begin() + i);\n  \
    \          v.erase(v.begin() + i);\n            v.erase(v.begin() + i);\n    \
    \        v.erase(v.begin() + i);\n            v.erase(v.begin() + i);\n      \
    \      v.erase(v.begin() + i);\n            v.erase(v.begin() + i);\n        \
    \    v.erase(v.begin() + i);\n            v.erase(v.begin() + i);\n          \
    \  v.erase(v.begin() + i);\n            v.erase(v.begin() + i);\n            v.erase(v.begin()\
    \ + i);\n            v.erase(v.begin() + i);\n            v.erase(v.begin() +\
    \ i);\n            v.erase(v.begin() + i);\n            v.erase(v.begin() + i);\n\
    \            v.erase(v.begin() + i);\n            v.erase(v.begin() + i);\n  \
    \          v.erase(v.begin() + i);\n            v.erase(v.begin() + i);\n    \
    \        v.erase(v.begin() + i);\n            v.erase(v.begin() + i);\n      \
    \      v.erase(v.begin() + i);\n            v.erase(v.begin() + i);\n        \
    \    v.erase(v.begin() + i);\n            v.erase(v.begin() + i);\n          \
    \  v.erase(v.begin() + i);\n            ", "    std::vector<std::string> v;\n\
    \    for(auto &c: s) {\n        if(c != ' ') {\n            v.push_back(c);\n\
    \        }\n    }\n    sort(v.begin(), v.end());\n    v.erase(unique(v.begin(),\
    \ v.end()), v.end());\n    for(auto &c: v) {\n        if(c != ' ') {\n       \
    \     if(count(v.begin(), v.end(), c) == n) {\n                v.erase(find(v.begin(),\
    \ v.end(), c), v.end());\n            }\n        }\n    }\n    return v;", " \
    \   std::vector<std::string> res;\n    \n    // Write your code here\n    \n \
    \   return res;", "    std::vector<std::string> v;\n    \n    // Write your code\
    \ here\n    \n    return v;", "    std::vector<std::string> v;\n    std::string\
    \ word = \"\";\n    for(long i = 0; i < s.length(); i++) {\n        if(s[i] ==\
    \ ' ') {\n            v.push_back(word);\n            word = \"\";\n        }\
    \ else {\n            word += s[i];\n        }\n    }\n    v.push_back(word);\n\
    \    return v;", "    std::vector<std::string> res;\n    \n    // Write your code\
    \ here\n    \n    return res;", "    std::vector<std::string> res;\n    \n   \
    \ // Write your code here\n    \n    return res;", "    std::vector<std::string>\
    \ res;\n    long start = 0;\n    long end = 0;\n    long count = 0;\n    while(end\
    \ < s.size()) {\n        while(s[end] != '\\0' && s[end] != ' ') {\n         \
    \   end++;\n        }\n        while(s[start] != '\\0' && s[start] != ' ') {\n\
    \            start++;\n        }\n        if(end >= start) {\n            std::string\
    \ word = s.substr(start, end - start);\n            while(word.size() > n) {\n\
    \                word = word.substr(0, word.size() - 1);\n            }\n    \
    \        if(res.find(word) == res.end()) {\n                res.push_back(word);\n\
    \                count++;\n            }\n        }\n        end++;\n    }\n \
    \   return res;", "    std::vector<std::string> res;\n    std::string word = \"\
    \";\n    long count = 0;\n    for (char c : s) {\n        if (c == ' ') {\n  \
    \          if (count >= n) {\n                res.push_back(word);\n         \
    \       word = \"\";\n                count = 0;\n            }\n        } else\
    \ {\n            word += c;\n            count++;\n        }\n    }\n    if (count\
    \ >= n) {\n        res.push_back(word);\n    }\n    return res;", "    std::vector<std::string>\
    \ v;\n    std::string word = \"\";\n    for(long i = 0; i < s.length(); i++) {\n\
    \        char c = s[i];\n        if(c == ' ') {\n            v.push_back(word);\n\
    \            word = \"\";\n        } else {\n            word += c;\n        }\n\
    \    }\n    v.push_back(word);\n    return v;", "    std::vector<std::string>\
    \ v;\n    for(auto &c: s) {\n        if(isalpha(c)) {\n            v.push_back(std::to_string(c));\n\
    \        }\n    }\n    return v;", "    std::vector<std::string> res;\n    std::string\
    \ word = \"\";\n    long count = 0;\n    for(int i = 0; i < s.length(); i++) {\n\
    \        if(s[i] == ' ') {\n            word = word + s[i];\n            count\
    \ = 0;\n        } else {\n            word = word + s[i];\n            count++;\n\
    \            if(count == n) {\n                res.push_back(word);\n        \
    \        word = \"\";\n                count = 0;\n            }\n        }\n\
    \    }\n    if(word != \"\") {\n        res.push_back(word);\n    }\n    return\
    \ res;", "    std::vector<std::string> res;\n    if (s.empty()) {\n        return\
    \ res;\n    }\n    \n    std::string word = \"\";\n    \n    for (char c : s)\
    \ {\n        if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u') {\n\
    \            word += c;\n        }\n    }\n    \n    long count = 0;\n    \n \
    \   for (char c : word) {\n        if (c == 'a' || c == 'e' || c == 'i' || c ==\
    \ 'o' || c == 'u') {\n            count++;\n        }\n    }\n    \n    if (count\
    \ == n) {\n        res.push_back(word);\n    }\n    \n    return res;", "    std::vector<std::string>\
    \ v;\n    std::string temp;\n    long count = 0;\n    for (auto &i : s) {\n  \
    \      if (i == 'a' || i == 'e' || i == 'i' || i == 'o' || i == 'u') {\n     \
    \       v.push_back(temp);\n            temp.clear();\n            count++;\n\
    \        }\n        temp += i;\n    }\n    if (count != n) {\n        v.push_back(temp);\n\
    \    }\n    return v;", "    std::vector<std::string> res;\n    \n    // Write\
    \ your code here\n    \n    return res;", "    std::vector<std::string> res;\n\
    \    if (s.empty()) {\n        return res;\n    }\n    \n    std::string word;\n\
    \    \n    for (auto &c: s) {\n        if (c == 'a' || c == 'e' || c == 'i' ||\
    \ c == 'o' || c == 'u') {\n            word += c;\n        }\n    }\n    \n  \
    \  std::vector<std::string> words;\n    \n    for (auto &c: word) {\n        if\
    \ (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u') {\n            words.push_back(word);\n\
    \            word = \"\";\n        }\n        else {\n            word += c;\n\
    \        }\n    }\n    \n    \n    for (auto &c: words) {\n        if (words.size()\
    \ == n) {\n            res.push_back(c);\n        }\n    }\n    \n    return res;",
  "    std::vector<std::string> res;\n    if (s.empty()) {\n        return res;\n\
    \    }\n    \n    std::vector<std::string> words;\n    \n    for (auto &c: s)\
    \ {\n        if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u') {\n\
    \            words.push_back(c);\n        }\n    }\n    \n    sort(words.begin(),\
    \ words.end());\n    \n    for (auto &c: words) {\n        if (count(words.begin(),\
    \ words.end(), c) == n) {\n            res.push_back(c);\n        }\n    }\n \
    \   \n    return res;", "    std::vector<std::string> v;\n    \n    for(auto &i\
    \ : s) {\n        if(i == 'a' || i == 'e' || i == 'i' || i == 'o' || i == 'u'\
    \ || i == 'y') {\n            v.push_back(i);\n        }\n    }\n    \n    return\
    \ v;", "    std::vector<std::string> v;\n    std::string temp;\n    for(long i\
    \ = 0; i < s.length(); i++) {\n        temp = s.substr(i, 1);\n        if(temp.find_first_not_of(\"\
    aeiou\") == std::string::npos) {\n            v.push_back(temp);\n        }\n\
    \    }\n    return v;", "    std::vector<std::string> v;\n    std::string temp;\n\
    \    long count = 0;\n    for(long i = 0; i < s.length(); i++) {\n        if(s[i]\
    \ == ' ') {\n            v.push_back(temp);\n            temp.clear();\n     \
    \       count++;\n        } else {\n            temp += s[i];\n        }\n   \
    \     if(count == n) {\n            v.push_back(temp);\n            temp.clear();\n\
    \            count = 0;\n        }\n    }\n    return v;", "    std::vector<std::string>\
    \ v;\n    std::string word = \"\";\n    for(char c : s) {\n        if(c == 'a'\
    \ || c == 'e' || c == 'i' || c == 'o' || c == 'u') {\n            word += c;\n\
    \        }\n        else if(c == 'n') {\n            v.push_back(word);\n    \
    \        word = \"\";\n        }\n        else {\n            word += c;\n   \
    \     }\n    }\n    if(word != \"\") {\n        v.push_back(word);\n    }\n  \
    \  return v;", "    std::vector<std::string> v;\n    if (s.empty())\n        return\
    \ v;\n    \n    long start = 0;\n    long end = 0;\n    long count = 0;\n    \n\
    \    for (long i = 0; i < s.length(); i++) {\n        if (s[i] == 'a' || s[i]\
    \ == 'e' || s[i] == 'i' || s[i] == 'o' || s[i] == 'u' || s[i] == 'y') {\n    \
    \        count++;\n            if (count == n) {\n                v.push_back(s.substr(start,\
    \ i - start));\n                start = i + 1;\n                count = 0;\n \
    \           }\n        }\n    }\n    v.push_back(s.substr(start, s.length() -\
    \ start));\n    return v;", "    std::vector<std::string> res;\n    if (s.empty())\
    \ {\n        return res;\n    }\n    std::string word = \"\";\n    long count\
    \ = 0;\n    for (auto c : s) {\n        if (c == 'a' || c == 'e' || c == 'i' ||\
    \ c == 'o' || c == 'u') {\n            word += c;\n            count++;\n    \
    \        if (count == n) {\n                res.push_back(word);\n           \
    \     count = 0;\n                word = \"\";\n            }\n        }\n   \
    \ }\n    return res;", "    std::vector<std::string> v;\n    std::string word\
    \ = \"\";\n    for(char c : s) {\n        if(c == 'a' || c == 'e' || c == 'i'\
    \ || c == 'o' || c == 'u') {\n            word += c;\n        }\n        else\
    \ {\n            v.push_back(word);\n            word = \"\";\n        }\n   \
    \ }\n    if(word != \"\") {\n        v.push_back(word);\n    }\n    return v;",
  '    // code here', "    std::vector<std::string> v;\n    if (s.empty()) {\n   \
    \     return v;\n    }\n    std::string word = \"\";\n    long count = 0;\n  \
    \  for (char c : s) {\n        if (c == 'a' || c == 'e' || c == 'i' || c == 'o'\
    \ || c == 'u') {\n            word += c;\n            count++;\n            if\
    \ (count == n) {\n                v.push_back(word);\n                count =\
    \ 0;\n                word = \"\";\n            }\n        }\n    }\n    return\
    \ v;", "    std::vector<std::string> v;\n    if (s.empty()) return v;\n    \n\
    \    std::string word;\n    \n    for (size_t i = 0; i < s.size(); i++) {\n  \
    \      word = s.substr(i, 1);\n        \n        if (word.find_first_not_of(\"\
    aeiou\") == std::string::npos) {\n            v.push_back(word);\n        }\n\
    \    }\n    \n    return v;", "    std::vector<std::string> v;\n    std::string\
    \ word = \"\";\n    long count = 0;\n    for (char c : s) {\n        if (c ==\
    \ ' ') {\n            v.push_back(word);\n            word = \"\";\n         \
    \   count = 0;\n        } else if (c != ' ') {\n            word += c;\n     \
    \       count++;\n        }\n    }\n    if (word != \"\") {\n        v.push_back(word);\n\
    \    }\n    return v;", "    std::vector<std::string> v;\n    for(auto &c: s)\
    \ {\n        if(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u') {\n\
    \            v.push_back(c);\n        }\n    }\n    return v;", "    std::vector<std::string>\
    \ v;\n    for(auto &c: s) {\n        if(isalpha(c)) {\n            v.push_back(std::to_string(c));\n\
    \        }\n    }\n    return v;", "    std::vector<std::string> v;\n    \n  \
    \  // Write your code here\n    \n    return v;", "    std::vector<std::string>\
    \ res;\n    \n    // Write your code here\n    \n    return res;", "    std::vector<std::string>\
    \ res;\n    \n    // Write your code here\n    \n    return res;", "    std::vector<std::string>\
    \ result;\n    \n    // Write your code here\n    \n    return result;", "   \
    \ std::vector<std::string> v;\n    for(auto &c: s) {\n        if(c == 'a' || c\
    \ == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'y') {\n            v.push_back(c);\n\
    \        }\n    }\n    return v;", "    std::vector<std::string> res;\n    \n\
    \    // Write your code here\n    \n    return res;", "    std::vector<std::string>\
    \ v;\n    std::string temp;\n    long count = 0;\n    for(long i = 0; i < s.size();\
    \ i++) {\n        if(s[i] == 'a' || s[i] == 'e' || s[i] == 'i' || s[i] == 'o'\
    \ || s[i] == 'u' || s[i] == 'y') {\n            count++;\n        }\n    }\n \
    \   for(long i = 0; i < s.size(); i++) {\n        if(s[i] == 'a' || s[i] == 'e'\
    \ || s[i] == 'i' || s[i] == 'o' || s[i] == 'u' || s[i] == 'y') {\n           \
    \ count++;\n        }\n    }\n    for(long i = 0; i < s.size(); i++) {\n     \
    \   if(s[i] == 'a' || s[i] == 'e' || s[i] == 'i' || s[i] == 'o' || s[i] == 'u'\
    \ || s[i] == 'y') {\n            count++;\n        }\n    }\n    for(long i =\
    \ 0; i < s.size(); i++) {\n        if(s[i] == 'a' || s[i] == 'e' || s[i] == 'i'\
    \ || s[i] == 'o' || s[i] == 'u' || s[i] == 'y') {\n            count++;\n    \
    \    }\n    }\n    for(long i = 0; i < s.size(); i++) {\n        if(s[i] == 'a'\
    \ || s[i] == 'e' || s[i] == 'i' || s[i] == 'o' || s[i] == 'u' || s[i] == 'y')\
    \ {\n            count++;\n        }\n    }\n    for(long i = 0; i < s.size();\
    \ i++) {\n        if(s[i] == 'a' || s[i] == 'e' || s[i] == 'i' || s[i] == 'o'\
    \ || s[i] == 'u' || s[i] == 'y') {\n            count++;\n        }\n    }\n \
    \   for(long i = 0; i < s.size(); i++) {\n        if(s[i] == 'a' || s[i] == 'e'\
    \ || s[i] == 'i' || s[i] == 'o' || s[i] == 'u' || s[i] == 'y') {\n           \
    \ count++;\n        }\n    }\n    for(long i = 0; i < s.size(); i++) {\n     \
    \   if(s[i] == 'a' || s[i] == 'e' || s[i] == 'i' || s[i] == 'o' || s[i] == 'u'\
    \ || s[i] == 'y') {\n            count++;\n        }\n    }\n    for(long i =\
    \ 0; i < s.size(); i++) {\n        if(s[i] == 'a' || s[i] == 'e' || s[i] == 'i'\
    \ || s[i] == 'o' || s[i] == 'u' || s[i] == 'y') {\n            count++;\n    \
    \    }\n    }\n    for(long i = 0; i < s.size(); i++) {\n        if(s[i] == 'a'\
    \ || s[i] == 'e' || s[i] == 'i' || s[i] == 'o' || s[i] == 'u' || s[i] == 'y')\
    \ {\n            count++;\n        }\n    }\n    for(long i = 0; i < s.size();\
    \ i++) {\n        if(s[i] == 'a' || s[i] == 'e' || s[i] == 'i' || s[i] == 'o'\
    \ || s[i] == 'u' || s[i] == 'y') {\n            count++;\n        }\n    }\n \
    \   for(long i = 0; i < s.size(); i++) {\n        if(s[i] == 'a' || s[i] == 'e'\
    \ || s[i] == 'i' || s[i] == 'o' || s[i] == 'u' || s[i] == 'y') {\n           \
    \ count++;\n        }\n    }\n    for(long i = 0; i < s.size(); i++) {", "   \
    \ std::vector<std::string> v;\n    \n    // Write your code here\n    \n    return\
    \ v;", "    std::vector<std::string> v;\n    std::string word = \"\";\n    for(long\
    \ i = 0; i < s.length(); i++) {\n        if(s[i] == ' ') {\n            v.push_back(word);\n\
    \            word = \"\";\n        } else {\n            word += s[i];\n     \
    \   }\n    }\n    v.push_back(word);\n    return v;", "    std::vector<std::string>\
    \ result;\n    \n    // Write your code here\n    \n    return result;", "   \
    \ std::vector<std::string> v;\n    \n    // Write your code here\n    \n    return\
    \ v;", "    std::vector<std::string> v;\n    std::string word = \"\";\n    for(long\
    \ i = 0; i < s.length(); i++) {\n        if(s[i] == ' ') {\n            v.push_back(word);\n\
    \            word = \"\";\n        } else {\n            word += s[i];\n     \
    \   }\n    }\n    v.push_back(word);\n    return v;", "    std::vector<std::string>\
    \ v;\n    std::string word;\n    for (size_t i = 0; i < s.size(); i++) {\n   \
    \     word = s.substr(i, 1);\n        if (word.size() == n) {\n            v.push_back(word);\n\
    \        }\n    }\n    return v;", "    std::vector<std::string> result;\n   \
    \ \n    // Write your code here\n    \n    return result;", "    std::vector<std::string>\
    \ res;\n    std::string word = \"\";\n    for(char c : s) {\n        if(c == '\
    \ ' || c == '\\t' || c == '\\n' || c == '\\r') {\n            if(!word.empty())\
    \ {\n                res.push_back(word);\n                word = \"\";\n    \
    \        }\n        } else {\n            word += c;\n        }\n    }\n    if(!word.empty())\
    \ {\n        res.push_back(word);\n    }\n    return res;", "    std::vector<std::string>\
    \ v;\n    std::string word;\n    for(long i = 0; i < s.size(); i++) {\n      \
    \  if(s[i] == ' ') {\n            v.push_back(word);\n            word.clear();\n\
    \        } else {\n            word += s[i];\n        }\n    }\n    v.push_back(word);\n\
    \    return v;", "    std::vector<std::string> v;\n    for(long i=0; i<s.length();\
    \ i++) {\n        for(long j=0; j<s.length(); j++) {\n            if(s[i]==s[j]\
    \ && s[i]!=' ') {\n                v.push_back(s.substr(i, j));\n            \
    \    i = j;\n            }\n        }\n    }\n    return v;", "    std::vector<std::string>\
    \ res;\n    \n    // Write your code here\n    \n    return res;", "    std::vector<std::string>\
    \ res;\n    \n    for(auto &c: s) {\n        if(c == 'a' || c == 'e' || c == 'i'\
    \ || c == 'o' || c == 'u') {\n            res.push_back(c);\n        }\n    }\n\
    \    \n    return res;", "    std::vector<std::string> res;\n    \n    if(s.empty())\n\
    \        return res;\n    \n    for(auto &c: s)\n        if(c == 'a' || c == 'e'\
    \ || c == 'i' || c == 'o' || c == 'u')\n            if(n == 1)\n             \
    \   res.push_back(c);\n            else\n                res.push_back(\"a\" +\
    \ c);\n        else if(c == 'b')\n            if(n == 1)\n                res.push_back(c);\n\
    \            else\n                res.push_back(\"b\" + c);\n        else if(c\
    \ == 'c')\n            if(n == 1)\n                res.push_back(c);\n       \
    \     else\n                res.push_back(\"c\" + c);\n        else if(c == 'd')\n\
    \            if(n == 1)\n                res.push_back(c);\n            else\n\
    \                res.push_back(\"d\" + c);\n        else if(c == 'f')\n      \
    \      if(n == 1)\n                res.push_back(c);\n            else\n     \
    \           res.push_back(\"f\" + c);\n        else if(c == 'g')\n           \
    \ if(n == 1)\n                res.push_back(c);\n            else\n          \
    \      res.push_back(\"g\" + c);\n        else if(c == 'h')\n            if(n\
    \ == 1)\n                res.push_back(c);\n            else\n               \
    \ res.push_back(\"h\" + c);\n        else if(c == 'j')\n            if(n == 1)\n\
    \                res.push_back(c);\n            else\n                res.push_back(\"\
    j\" + c);\n        else if(c == 'k')\n            if(n == 1)\n               \
    \ res.push_back(c);\n            else\n                res.push_back(\"k\" + c);\n\
    \        else if(c == 'l')\n            if(n == 1)\n                res.push_back(c);\n\
    \            else\n                res.push_back(\"l\" + c);\n        else if(c\
    \ == 'm')\n            if(n == 1)\n                res.push_back(c);\n       \
    \     else\n                res.push_back(\"m\" + c);\n        else if(c == 'n')\n\
    \            if(n == 1)\n                res.push_back(c);\n            else\n\
    \                res.push_back(\"n\" + c);\n        else if(c == 'p')\n      \
    \      if(n == 1)\n                res.push_back(c);\n            else\n     \
    \           res.push_back(\"p\" + c);\n        else if(c == 'q')\n           \
    \ if(n == 1)\n                res.push_back(c);\n            else\n          \
    \      res.push_back(\"q\" + c);\n        else if(c == 'r')\n            if(n\
    \ == 1)\n                res.push_back(c);\n            else\n               \
    \ res.push_back(\"r\" + c);\n        else if(c == 's')\n            if(n == 1)\n\
    \                res.push_back(c);\n            else\n                res.push_back(\"\
    s\" + c);\n        else if(c == 't')\n            if(n == 1)\n               \
    \ res.", "    std::vector<std::string> v;\n    \n    // Write your code here\n\
    \    \n    return v;", "    std::vector<std::string> res;\n    \n    // Write\
    \ your code here\n    \n    return res;", "    std::vector<std::string> v;\n \
    \   \n    // Write your code here\n    \n    return v;", "    std::vector<std::string>\
    \ v;\n    std::string temp;\n    long count = 0;\n    for(long i = 0; i < s.length();\
    \ i++) {\n        if(s[i] == ' ') {\n            v.push_back(temp);\n        \
    \    temp.clear();\n            count = 0;\n        } else {\n            temp\
    \ += s[i];\n            count++;\n            if(count == n) {\n             \
    \   v.push_back(temp);\n                temp.clear();\n                count =\
    \ 0;\n            }\n        }\n    }\n    v.push_back(temp);\n    return v;",
  "    // Write your code here\n    std::vector<std::string> v;\n    for(auto &i :\
    \ s)\n    {\n        if(i == 'a' || i == 'e' || i == 'i' || i == 'o' || i == 'u')\n\
    \        {\n            v.push_back(i);\n        }\n    }\n    return v;", " \
    \   std::vector<std::string> v;\n    std::string word = \"\";\n    long count\
    \ = 0;\n    for (char c : s) {\n        if (c == 'a' || c == 'e' || c == 'i' ||\
    \ c == 'o' || c == 'u') {\n            word += c;\n            count++;\n    \
    \        if (count == n) {\n                v.push_back(word);\n             \
    \   count = 0;\n                word = \"\";\n            }\n        }\n    }\n\
    \    return v;", "    std::vector<std::string> v;\n    std::string word;\n   \
    \ for(long i=0; i<s.length(); i++) {\n        word = s.substr(i, 1);\n       \
    \ if(word.length() == n) {\n            v.push_back(word);\n        }\n    }\n\
    \    return v;", "    std::vector<std::string> res;\n    std::string word = \"\
    \";\n    for(char c: s) {\n        if(c == 'a' || c == 'e' || c == 'i' || c ==\
    \ 'o' || c == 'u') {\n            word += c;\n        }\n        else {\n    \
    \        if(word.size() == n) {\n                res.push_back(word);\n      \
    \          word = \"\";\n            }\n            else {\n                word\
    \ = \"\";\n            }\n        }\n    }\n    if(word.size() > 0) {\n      \
    \  res.push_back(word);\n    }\n    return res;", "    std::vector<std::string>\
    \ v;\n    \n    for(auto &c: s) {\n        if(isalpha(c)) {\n            v.push_back(std::to_string(c));\n\
    \        }\n    }\n    \n    for(auto &c: v) {\n        if(n == 1) {\n       \
    \     v.erase(std::remove(v.begin(), v.end(), c), v.end());\n        }\n     \
    \   \n        for(auto &c: v) {\n            if(isalpha(c)) {\n              \
    \  v.erase(std::remove(v.begin(), v.end(), c), v.end());\n            }\n    \
    \    }\n    }\n    \n    return v;", "    std::vector<std::string> v;\n    std::string\
    \ word = \"\";\n    for(char c: s) {\n        if(c == 'a' || c == 'e' || c ==\
    \ 'i' || c == 'o' || c == 'u') {\n            word += c;\n        }\n        else\
    \ {\n            if(word.size() == n) {\n                v.push_back(word);\n\
    \                word = \"\";\n            }\n            else {\n           \
    \     word += c;\n            }\n        }\n    }\n    if(word.size() > 0) {\n\
    \        v.push_back(word);\n    }\n    return v;", "    std::vector<std::string>\
    \ v;\n    std::string word = \"\";\n    for(char c : s) {\n        if(c == 'a'\
    \ || c == 'e' || c == 'i' || c == 'o' || c == 'u') {\n            word += c;\n\
    \        }\n        else {\n            if(!word.empty()) {\n                v.push_back(word);\n\
    \                word = \"\";\n            }\n            if(c == ' ') {\n   \
    \             v.push_back(word);\n                word = \"\";\n            }\n\
    \        }\n    }\n    if(!word.empty()) {\n        v.push_back(word);\n    }\n\
    \    return v;", "    std::vector<std::string> res;\n    \n    if (s.empty())\
    \ {\n        return res;\n    }\n    \n    std::vector<std::string> words;\n \
    \   \n    for (auto &c : s) {\n        if (c == 'a' || c == 'e' || c == 'i' ||\
    \ c == 'o' || c == 'u') {\n            words.push_back(c);\n        }\n    }\n\
    \    \n    for (auto &w : words) {\n        if (w.size() == n) {\n           \
    \ res.push_back(w);\n        }\n    }\n    \n    return res;", "    std::vector<std::string>\
    \ res;\n    std::string temp;\n    long count = 0;\n    for(int i = 0; i < s.size();\
    \ i++) {\n        if(s[i] == ' ') {\n            temp.clear();\n            count\
    \ = 0;\n            for(int j = i; j < s.size(); j++) {\n                if(s[j]\
    \ == ' ') {\n                    temp.push_back(s[j]);\n                    count++;\n\
    \                }\n            }\n            if(count == n) {\n            \
    \    res.push_back(temp);\n            }\n        }\n    }\n    return res;",
  "    std::vector<std::string> v;\n    std::string word = \"\";\n    for (char c\
    \ : s) {\n        if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\
    \ {\n            word += c;\n        }\n        else if (c == 'n') {\n       \
    \     v.push_back(word);\n            word = \"\";\n        }\n    }\n    if (word\
    \ != \"\") {\n        v.push_back(word);\n    }\n    return v;", "    std::vector<std::string>\
    \ v;\n    v.push_back(\"\");\n    v.push_back(s);\n    \n    for(long i = 0; i\
    \ < s.size(); i++) {\n        if(s[i] == ' ') {\n            v.push_back(\"\"\
    );\n        } else {\n            v.push_back(s[i]);\n        }\n    }\n    \n\
    \    for(long i = 0; i < v.size(); i++) {\n        for(long j = i + 1; j < v.size();\
    \ j++) {\n            for(long k = 0; k < n; k++) {\n                if(v[i] ==\
    \ v[j] && v[i] != \"\") {\n                    v.erase(v.begin() + j);\n     \
    \           }\n            }\n        }\n    }\n    \n    return v;", "    std::vector<std::string>\
    \ v;\n    std::string word;\n    for(long i = 0; i < s.length(); i++) {\n    \
    \    word = s.substr(i, 1);\n        if(word.find_first_not_of(\"aeiou\") == std::string::npos)\
    \ {\n            v.push_back(word);\n        }\n    }\n    return v;", "    std::vector<std::string>\
    \ v;\n    \n    // Write your code here\n    \n    return v;", "    std::vector<std::string>\
    \ v;\n    for(long i=0; i<s.length(); i++) {\n        for(long j=0; j<s.length();\
    \ j++) {\n            if(s[i]==s[j] && s[i]!=' ') {\n                v.push_back(s.substr(i,\
    \ j+1));\n                i = j+1;\n            }\n        }\n    }\n    return\
    \ v;", "    std::vector<std::string> res;\n    \n    // Write your code here\n\
    \    \n    return res;", "    std::vector<std::string> v;\n    if (s.empty())\
    \ {\n        return v;\n    }\n    \n    std::string word = \"\";\n    \n    for\
    \ (auto c : s) {\n        if (c == 'a' || c == 'e' || c == 'i' || c == 'o' ||\
    \ c == 'u') {\n            word += c;\n        }\n        else if (c == 'y') {\n\
    \            word += c;\n        }\n        else if (c == 'n') {\n           \
    \ word += c;\n        }\n        else if (c == 't') {\n            word += c;\n\
    \        }\n        else if (c == 'h') {\n            word += c;\n        }\n\
    \        else if (c == 'l') {\n            word += c;\n        }\n        else\
    \ if (c == 's') {\n            word += c;\n        }\n        else if (c == 'd')\
    \ {\n            word += c;\n        }\n        else if (c == 'r') {\n       \
    \     word += c;\n        }\n        else if (c == 'p') {\n            word +=\
    \ c;\n        }\n        else if (c == 'f') {\n            word += c;\n      \
    \  }\n        else if (c == 'w') {\n            word += c;\n        }\n      \
    \  else if (c == 'c') {\n            word += c;\n        }\n        else if (c\
    \ == 'm') {\n            word += c;\n        }\n        else if (c == 'a') {\n\
    \            word += c;\n        }\n        else if (c == 'b') {\n           \
    \ word += c;\n        }\n        else if (c == 'k') {\n            word += c;\n\
    \        }\n        else if (c == 'j') {\n            word += c;\n        }\n\
    \        else if (c == 'v') {\n            word += c;\n        }\n        else\
    \ if (c == 'z') {\n            word += c;\n        }\n        else if (c == 'n')\
    \ {\n            word += c;\n        }\n        else if (c == 'm') {\n       \
    \     word += c;\n        }\n        else if (c == 'y') {\n            word +=\
    \ c;\n        }\n        else if (c == 't') {\n            word += c;\n      \
    \  }\n        else if (c == 'l') {\n            word += c;\n        }\n      \
    \  else if (c == 'k') {\n            word += c;\n        }\n        else if (c\
    \ == 'h') {\n            word += c;\n        }\n        else if (c == 'r') {\n\
    \            word += c;\n        }\n        else if (c == 'p') {\n           \
    \ word += c;\n        }\n        else if (c == 'f') {\n            word += c;\n\
    \        }\n        else if (c == 'w') {\n            word += c;\n        }\n\
    \        else if (c == 'c') {\n            word += c;\n        }\n        else\
    \ if (c == 'a') {\n            word += c;\n        }\n        else if (c == 'b')\
    \ {\n            word += c;\n        }\n        else if (c == 'k') {\n       \
    \     word += c;\n        }\n        else if (c == 'j') {\n            word +=\
    \ c;\n", "    std::vector<std::string> res;\n    \n    // Write your code here\n\
    \    \n    return res;", "    // code here\n    std::vector<std::string> v;\n\
    \    \n    for(auto &c: s)\n    {\n        if(isalpha(c))\n        {\n       \
    \     v.push_back(c);\n        }\n    }\n    \n    return v;", "    std::vector<std::string>\
    \ v;\n    std::string word = \"\";\n    for(char c : s) {\n        if(c == 'a'\
    \ || c == 'e' || c == 'i' || c == 'o' || c == 'u') {\n            word += c;\n\
    \        }\n        else if(c == 'n') {\n            v.push_back(word);\n    \
    \        word = \"\";\n        }\n    }\n    if(word != \"\") {\n        v.push_back(word);\n\
    \    }\n    return v;", "    std::vector<std::string> v;\n    for(auto &i : s)\
    \ {\n        if(i == 'a' || i == 'e' || i == 'i' || i == 'o' || i == 'u') {\n\
    \            v.push_back(i);\n        }\n    }\n    return v;", "    std::vector<std::string>\
    \ v;\n    v.push_back(\"\");\n    v.push_back(s);\n    \n    long start = 0;\n\
    \    long end = s.size();\n    long count = 0;\n    \n    while(start < end) {\n\
    \        while(count < n && s[start] != 'a' && s[start] != 'e' && s[start] !=\
    \ 'i' && s[start] != 'o' && s[start] != 'u' && s[start] != 'y' && s[start] !=\
    \ 'A' && s[start] != 'E' && s[start] != 'I' && s[start] != 'O' && s[start] !=\
    \ 'U' && s[start] != 'Y' && s[start] != 'a' && s[start] != 'e' && s[start] !=\
    \ 'i' && s[start] != 'o' && s[start] != 'u' && s[start] != 'y' && s[start] !=\
    \ 'A' && s[start] != 'E' && s[start] != 'I' && s[start] != 'O' && s[start] !=\
    \ 'U' && s[start] != 'Y') {\n            ++count;\n            ++start;\n    \
    \    }\n        \n        while(count < n && s[end] != 'a' && s[end] != 'e' &&\
    \ s[end] != 'i' && s[end] != 'o' && s[end] != 'u' && s[end] != 'y' && s[end] !=\
    \ 'A' && s[end] != 'E' && s[end] != 'I' && s[end] != 'O' && s[end] != 'U' && s[end]\
    \ != 'Y' && s[end] != 'a' && s[end] != 'e' && s[end] != 'i' && s[end] != 'o' &&\
    \ s[end] != 'u' && s[end] != 'y' && s[end] != 'A' && s[end] != 'E' && s[end] !=\
    \ 'I' && s[end] != 'O' && s[end] != 'U' && s[end] != 'Y') {\n            --end;\n\
    \            --count;\n        }\n        \n        if(count >= n) {\n       \
    \     v.push_back(s.substr(start, end - start));\n            start = end;\n \
    \           end = s.size();\n            count = 0;\n        }\n    }\n    \n\
    \    return v;", "    std::vector<std::string> v;\n    std::string temp;\n   \
    \ long count = 0;\n    for(char c: s) {\n        if(c == 'a' || c == 'e' || c\
    \ == 'i' || c == 'o' || c == 'u') {\n            v.push_back(temp);\n        \
    \    temp.clear();\n            count++;\n        }\n        else {\n        \
    \    temp += c;\n        }\n    }\n    if(temp != \"\") {\n        v.push_back(temp);\n\
    \    }\n    for(auto it: v) {\n        if(count >= n) {\n            v.erase(std::remove(v.begin(),\
    \ v.end(), it), v.end());\n        }\n    }\n    return v;", "    std::vector<std::string>\
    \ v;\n    \n    // Write your code here\n    \n    return v;", "    std::vector<std::string>\
    \ v;\n    std::string word = \"\";\n    for(long i = 0; i < s.length(); i++) {\n\
    \        if(s[i] == 'a' || s[i] == 'e' || s[i] == 'i' || s[i] == 'o' || s[i] ==\
    \ 'u' || s[i] == 'y') {\n            word += s[i];\n        }\n        else if(s[i]\
    \ == ' ') {\n            v.push_back(word);\n            word = \"\";\n      \
    \  }\n        else if(s[i] == 'n') {\n            v.push_back(word);\n       \
    \     word = \"\";\n        }\n        else if(s[i] == 'h') {\n            v.push_back(word);\n\
    \            word = \"\";\n        }\n        else if(s[i] == 'l') {\n       \
    \     v.push_back(word);\n            word = \"\";\n        }\n        else if(s[i]\
    \ == 'l') {\n            v.push_back(word);\n            word = \"\";\n      \
    \  }\n        else if(s[i] == 'e') {\n            v.push_back(word);\n       \
    \     word = \"\";\n        }\n        else if(s[i] == 'd') {\n            v.push_back(word);\n\
    \            word = \"\";\n        }\n        else if(s[i] == 's') {\n       \
    \     v.push_back(word);\n            word = \"\";\n        }\n        else if(s[i]\
    \ == 't') {\n            v.push_back(word);\n            word = \"\";\n      \
    \  }\n        else if(s[i] == 'a') {\n            v.push_back(word);\n       \
    \     word = \"\";\n        }\n        else if(s[i] == 'm') {\n            v.push_back(word);\n\
    \            word = \"\";\n        }\n        else if(s[i] == 'y') {\n       \
    \     v.push_back(word);\n            word = \"\";\n        }\n        else if(s[i]\
    \ == 's') {\n            v.push_back(word);\n            word = \"\";\n      \
    \  }\n        else if(s[i] == 'a') {\n            v.push_back(word);\n       \
    \     word = \"\";\n        }\n        else if(s[i] == 'm') {\n            v.push_back(word);\n\
    \            word = \"\";\n        }\n        else if(s[i] == 'y') {\n       \
    \     v.push_back(word);\n            word = \"\";\n        }\n        else if(s[i]\
    \ == 'a') {\n            v.push_back(word);\n            word = \"\";\n      \
    \  }\n        else if(s[i] == 'm') {\n            v.push_back(word);\n       \
    \     word = \"\";\n        }\n        else if(s[i] == 'y') {\n            v.push_back(word);\n\
    \            word = \"\";\n        }\n        else if(s[i] == 'a') {\n       \
    \     v.push_back(word);\n            word = \"\";\n        }\n        else if(s[i]\
    \ == 'm') {\n            v.push_back(word);\n            word = \"\";\n      \
    \  }\n        else if(s[i] == 'y') {\n            v.push_back(word);\n       \
    \     word = \"\";\n        }\n        else if(s[i] == 'a') {\n            v.push_back(word);\n\
    \            word = \"\";\n        }\n        else if(s[i] == 'm') {\n       \
    \     v.push_back(word);\n            word = \"\";\n        }\n        else if(s[i]\
    \ == 'y", "    std::vector<std::string> res;\n    if (s.empty()) {\n        return\
    \ res;\n    }\n    \n    std::string word;\n    \n    for (auto &c : s) {\n  \
    \      if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u') {\n     \
    \       word += c;\n        }\n    }\n    \n    for (auto &c : word) {\n     \
    \   if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u') {\n        \
    \    res.push_back(word);\n        }\n    }\n    \n    return res;", "    std::vector<std::string>\
    \ v;\n    if (s.empty()) {\n        return v;\n    }\n    \n    long l = 0;\n\
    \    for (auto c : s) {\n        if (c == 'a' || c == 'e' || c == 'i' || c ==\
    \ 'o' || c == 'u') {\n            l += 1;\n        }\n    }\n    \n    if (l ==\
    \ n) {\n        v.push_back(s);\n    }\n    \n    for (auto c : s) {\n       \
    \ if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u') {\n          \
    \  v.push_back(s);\n        }\n    }\n    \n    return v;", "    std::vector<std::string>\
    \ v;\n    \n    // Write your code here\n    \n    return v;", "    std::vector<std::string>\
    \ v;\n    std::string word = \"\";\n    for(char c: s) {\n        if(c == ' '\
    \ || c == '\\t' || c == '\\n' || c == '\\r') {\n            v.push_back(word);\n\
    \            word = \"\";\n        } else {\n            word += c;\n        }\n\
    \    }\n    if(word != \"\") {\n        v.push_back(word);\n    }\n    return\
    \ v;", "    std::vector<std::string> res;\n    \n    // Write your code here\n\
    \    \n    return res;", "    std::vector<std::string> v;\n    \n    // Write\
    \ your code here\n    \n    return v;", "    std::vector<std::string> v;\n   \
    \ if (s.empty())\n        return v;\n    \n    std::string word = \"\";\n    \n\
    \    for (auto &c : s) {\n        if (c == 'a' || c == 'e' || c == 'i' || c ==\
    \ 'o' || c == 'u') {\n            word += c;\n        }\n        else if (c ==\
    \ 'y') {\n            v.push_back(word);\n            word = \"\";\n        }\n\
    \        else if (c == 'n') {\n            v.push_back(word);\n            word\
    \ = \"\";\n        }\n        else if (c == 't' || c == 'h') {\n            v.push_back(word);\n\
    \            word = \"\";\n        }\n        else if (c == 'r' || c == 'l' ||\
    \ c == 'd') {\n            v.push_back(word);\n            word = \"\";\n    \
    \    }\n        else if (c == 'c' || c == 'm' || c == 's' || c == 'k') {\n   \
    \         v.push_back(word);\n            word = \"\";\n        }\n        else\
    \ if (c == 'p' || c == 'f' || c == 'v' || c == 'b') {\n            v.push_back(word);\n\
    \            word = \"\";\n        }\n        else if (c == 'a' || c == 'e' ||\
    \ c == 'i' || c == 'o' || c == 'u') {\n            word += c;\n        }\n   \
    \     else if (c == 'y') {\n            v.push_back(word);\n            word =\
    \ \"\";\n        }\n        else if (c == 'n') {\n            v.push_back(word);\n\
    \            word = \"\";\n        }\n        else if (c == 't' || c == 'h') {\n\
    \            v.push_back(word);\n            word = \"\";\n        }\n       \
    \ else if (c == 'r' || c == 'l' || c == 'd') {\n            v.push_back(word);\n\
    \            word = \"\";\n        }\n        else if (c == 'c' || c == 'm' ||\
    \ c == 's' || c == 'k') {\n            v.push_back(word);\n            word =\
    \ \"\";\n        }\n        else if (c == 'p' || c == 'f' || c == 'v' || c ==\
    \ 'b') {\n            v.push_back(word);\n            word = \"\";\n        }\n\
    \        else if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u') {\n\
    \            word += c;\n        }\n        else if (c == 'y') {\n           \
    \ v.push_back(word);\n            word = \"\";\n        }\n        else if (c\
    \ == 'n') {\n            v.push_back(word);\n            word = \"\";\n      \
    \  }\n        else if (c == 't' || c == 'h') {\n            v.push_back(word);\n\
    \            word = \"\";\n        }\n        else if (c == 'r' || c == 'l' ||\
    \ c == 'd') {\n            v.push_back(word);\n            word = \"\";\n    \
    \    }\n        else if (c == 'c' || c == 'm' || c == 's' || c == 'k') {\n   \
    \         v.push_back(word);\n", "    std::vector<std::string> res;\n    if(s.empty())\n\
    \        return res;\n    \n    for(auto &c: s)\n        if(c == 'a' || c == 'e'\
    \ || c == 'i' || c == 'o' || c == 'u')\n            if(c == 'a' || c == 'e' ||\
    \ c == 'i' || c == 'o' || c == 'u')\n                res.push_back(c);\n    \n\
    \    for(auto &c: s)\n        if(c == 'a' || c == 'e' || c == 'i' || c == 'o'\
    \ || c == 'u')\n            if(c == 'a' || c == 'e' || c == 'i' || c == 'o' ||\
    \ c == 'u')\n                res.push_back(c);\n    \n    for(auto &c: s)\n  \
    \      if(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n        \
    \    if(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n          \
    \      res.push_back(c);\n    \n    for(auto &c: s)\n        if(c == 'a' || c\
    \ == 'e' || c == 'i' || c == 'o' || c == 'u')\n            if(c == 'a' || c ==\
    \ 'e' || c == 'i' || c == 'o' || c == 'u')\n                res.push_back(c);\n\
    \    \n    for(auto &c: s)\n        if(c == 'a' || c == 'e' || c == 'i' || c ==\
    \ 'o' || c == 'u')\n            if(c == 'a' || c == 'e' || c == 'i' || c == 'o'\
    \ || c == 'u')\n                res.push_back(c);\n    \n    for(auto &c: s)\n\
    \        if(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n      \
    \      if(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n        \
    \        res.push_back(c);\n    \n    for(auto &c: s)\n        if(c == 'a' ||\
    \ c == 'e' || c == 'i' || c == 'o' || c == 'u')\n            if(c == 'a' || c\
    \ == 'e' || c == 'i' || c == 'o' || c == 'u')\n                res.push_back(c);\n\
    \    \n    for(auto &c: s)\n        if(c == 'a' || c == 'e' || c == 'i' || c ==\
    \ 'o' || c == 'u')\n            if(c == 'a' || c == 'e' || c == 'i' || c == 'o'\
    \ || c == 'u')\n                res.push_back(c);\n    \n    for(auto &c: s)\n\
    \        if(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c", "    std::vector<std::string>\
    \ v;\n    \n    // Write your code here\n    \n    return v;", "    std::vector<std::string>\
    \ v;\n    \n    // Write your code here\n    \n    return v;", "    std::vector<std::string>\
    \ v;\n    \n    // Write your code here\n    \n    return v;", "    std::vector<std::string>\
    \ res;\n    if (s.empty()) {\n        return res;\n    }\n    std::string word\
    \ = \"\";\n    for (char c : s) {\n        if (c == 'a' || c == 'e' || c == 'i'\
    \ || c == 'o' || c == 'u') {\n            word += c;\n        }\n    }\n    std::vector<std::string>\
    \ temp;\n    temp.push_back(word);\n    long count = 0;\n    for (char c : s)\
    \ {\n        if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u') {\n\
    \            temp.push_back(word);\n            temp.push_back(word);\n      \
    \      temp.push_back(word);\n            temp.push_back(word);\n            temp.push_back(word);\n\
    \            temp.push_back(word);\n            temp.push_back(word);\n      \
    \      temp.push_back(word);\n            temp.push_back(word);\n            temp.push_back(word);\n\
    \            temp.push_back(word);\n            temp.push_back(word);\n      \
    \      temp.push_back(word);\n            temp.push_back(word);\n            temp.push_back(word);\n\
    \            temp.push_back(word);\n            temp.push_back(word);\n      \
    \      temp.push_back(word);\n            temp.push_back(word);\n            temp.push_back(word);\n\
    \            temp.push_back(word);\n            temp.push_back(word);\n      \
    \      temp.push_back(word);\n            temp.push_back(word);\n            temp.push_back(word);\n\
    \            temp.push_back(word);\n            temp.push_back(word);\n      \
    \      temp.push_back(word);\n            temp.push_back(word);\n            temp.push_back(word);\n\
    \            temp.push_back(word);\n            temp.push_back(word);\n      \
    \      temp.push_back(word);\n            temp.push_back(word);\n            temp.push_back(word);\n\
    \            temp.push_back(word);\n            temp.push_back(word);\n      \
    \      temp.push_back(word);\n            temp.push_back(word);\n            temp.push_back(word);\n\
    \            temp.push_back(word);\n            temp.push_back(word);\n      \
    \      temp.push_back(word);\n            temp.push_back(word);\n            temp.push_back(word);\n\
    \            temp.push_back(word);\n            temp.push_back(word);\n      \
    \      temp.push_back(word);\n            temp.push_back(word);\n            temp.push_back(word);\n\
    \            temp.push_back(word);\n            temp.push_back(word);\n      \
    \      temp.push_back(word);\n            temp.push_back(word);\n            temp.push_back(word);\n\
    \            temp.push_back(word);\n            temp.push_back(word);\n      \
    \      temp.push_back(word);\n            temp.push_back(word);\n            temp.push_back(word);\n\
    \            temp.push_back(word);\n            temp.push_back(word);\n      \
    \      temp.push_back(word);\n            temp.push_back(word);\n            temp.push_back(word);\n\
    \            temp.push_back(word);\n            temp.push_back(word);\n      \
    \      temp.push_back(word);\n            temp.push_back(", "    std::vector<std::string>\
    \ v;\n    std::string word = \"\";\n    for(char c: s) {\n        if(c == 'a'\
    \ || c == 'e' || c == 'i' || c == 'o' || c == 'u') {\n            word += c;\n\
    \        }\n        else {\n            if(!word.empty()) {\n                if(word.size()\
    \ == n) {\n                    v.push_back(word);\n                    word =\
    \ \"\";\n                }\n                else {\n                    v.push_back(word);\n\
    \                    word = \"\";\n                }\n            }\n        }\n\
    \    }\n    if(!word.empty()) {\n        if(word.size() == n) {\n            v.push_back(word);\n\
    \        }\n    }\n    return v;", "    std::vector<std::string> v;\n    \n  \
    \  // Write your code here\n    \n    return v;", "    std::vector<std::string>\
    \ v;\n    \n    // Write your code here\n    \n    return v;", "    std::vector<std::string>\
    \ v;\n    std::string word;\n    for(auto &c: s) {\n        if(c == 'a' || c ==\
    \ 'e' || c == 'i' || c == 'o' || c == 'u') {\n            v.push_back(word);\n\
    \            word = \"\";\n        }\n        word += c;\n    }\n    if(word.length()\
    \ > 0) {\n        v.push_back(word);\n    }\n    return v;", "    // code here\n\
    \    std::vector<std::string> v;\n    for(auto &i : s)\n    {\n        if(isalpha(i))\n\
    \        {\n            v.push_back(i);\n        }\n    }\n    return v;", " \
    \   std::vector<std::string> v;\n    \n    // Write your code here\n    \n   \
    \ return v;", "    std::vector<std::string> v;\n    \n    // Write your code here\n\
    \    \n    return v;", "    std::vector<std::string> v;\n    \n    // Write your\
    \ code here\n    \n    return v;", "    std::vector<std::string> v;\n    std::string\
    \ temp;\n    long count = 0;\n    for(long i = 0; i < s.length(); i++) {\n   \
    \     if(s[i] == ' ') {\n            v.push_back(temp);\n            temp.clear();\n\
    \            count = 0;\n        } else {\n            temp.push_back(s[i]);\n\
    \            count++;\n            if(count == n) {\n                v.push_back(temp);\n\
    \                temp.clear();\n                count = 0;\n            }\n  \
    \      }\n    }\n    if(temp != \"\") {\n        v.push_back(temp);\n    }\n \
    \   return v;", "    std::vector<std::string> res;\n    if (s.empty()) {\n   \
    \     return res;\n    }\n    \n    std::string word;\n    \n    for (size_t i\
    \ = 0; i < s.size(); i++) {\n        word = s.substr(i, 1);\n        if (word.find_first_of(\"\
    aeiou\") != std::string::npos) {\n            res.push_back(word);\n        }\n\
    \    }\n    \n    return res;", "    std::vector<std::string> v;\n    \n    //\
    \ Write your code here\n    \n    return v;", "    std::vector<std::string> v;\n\
    \    if (s.empty())\n        return v;\n    \n    std::string word = \"\";\n \
    \   \n    for (char c : s) {\n        if (c == 'a' || c == 'e' || c == 'i' ||\
    \ c == 'o' || c == 'u' || c == 'y') {\n            word += c;\n        }\n   \
    \ }\n    \n    v.push_back(word);\n    \n    for (long i = 0; i < n; i++) {\n\
    \        std::string word = \"\";\n        for (char c : s) {\n            if\
    \ (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'y') {\n \
    \               word += c;\n            }\n        }\n        \n        v.push_back(word);\n\
    \    }\n    \n    return v;"]
stop_tokens:
- "\n}"
