name: HumanEval_161_solve
language: racket
prompt: "#lang racket\n\n;; You are given a string s.\n;; if s[i] is a letter, reverse\
  \ its case from lower to upper or vise versa, \n;; otherwise keep it as it is.\n\
  ;; If the string contains no letters, reverse the string.\n;; The function should\
  \ return the resulted string.\n;; Examples\n;; solve(\"1234\") = \"4321\"\n;; solve(\"\
  ab\") = \"AB\"\n;; solve(\"#a@C\") = \"#A@c\"\n(define (solve s)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate solve))\n\
  \    (check-equal? (candidate \"AsDf\") \"aSdF\")\n    (check-equal? (candidate\
  \ \"1234\") \"4321\")\n    (check-equal? (candidate \"ab\") \"AB\")\n    (check-equal?\
  \ (candidate \"#a@C\") \"#A@c\")\n    (check-equal? (candidate \"#AsdfW^45\") \"\
  #aSDFw^45\")\n    (check-equal? (candidate \"#6@2\") \"2@6#\")\n    (check-equal?\
  \ (candidate \"#$a^D\") \"#$A^d\")\n    (check-equal? (candidate \"#ccc\") \"#CCC\"\
  )\n))\n\n(test-humaneval)"
completions: ["  (if (string-contains? s #\\a)\n      (string-map (lambda (c)\n  \
    \                  (if (char-alphabetic? c)\n                        (if (char-lower-case?\
    \ c)\n                            (char-upcase c)\n                          \
    \  (char-downcase c))\n                        c))\n                  s)\n   \
    \   (string-reverse s)))\n", "  (if (string-contains? s #\\a)\n      (string-map\
    \ (lambda (c)\n                    (if (char-alphabetic? c)\n                \
    \        (char-upcase c)\n                        (char-downcase c)))\n      \
    \            s)\n      (string-reverse s)))\n</code>\n", "  (if (string-contains?\
    \ s #\\a)\n      (string-map (lambda (c)\n                    (if (char-alphabetic?\
    \ c)\n                        (if (char-lower-case? c)\n                     \
    \       (char-upcase c)\n                            (char-downcase c))\n    \
    \                    c))\n                  s)\n      (string-reverse s)))\n",
  "  (if (string-contains? s #\\a)\n      (string-map (lambda (c)\n              \
    \      (if (char-alphabetic? c)\n                        (char-upcase c)\n   \
    \                     (char-downcase c)))\n                  s)\n      (string-reverse\
    \ s)))\n", "  (if (string-contains-ci? s #\\a)\n      (string-map (lambda (c)\n\
    \                    (if (char-alphabetic? c)\n                        (if (char-lower-case?\
    \ c)\n                            (char-upcase c)\n                          \
    \  (char-downcase c))\n                        c))\n                  s)\n   \
    \   (string-reverse s)))\n", "  (cond\n    [(empty? s) \"\"]\n    [(char-alphabetic?\
    \ (string-ref s 0)) (string-append (string-upcase (string-ref s 0)) (solve (substring\
    \ s 1)))]\n    [(char-numeric? (string-ref s 0)) (string-append (string-ref s\
    \ 0) (solve (substring s 1)))]\n    [else (string-append (string-downcase (string-ref\
    \ s 0)) (solve (substring s 1)))]))\n", "  (cond\n    [(empty? s) \"\"]\n    [(char-alphabetic?\
    \ (string-ref s 0))\n     (string-append\n      (string-upcase (string-ref s 0))\n\
    \      (solve (substring s 1)))]\n    [(char-numeric? (string-ref s 0))\n    \
    \ (string-append\n      (string-ref s 0)\n      (solve (substring s 1)))]\n  \
    \  [else\n     (string-append\n      (string-downcase (string-ref s 0))\n    \
    \  (solve (substring s 1)))]))\n", "  (cond\n    [(empty? s) \"\"]\n    [(char-alphabetic?\
    \ (string-ref s 0))\n     (string-append (string-upcase (string-ref s 0)) (solve\
    \ (substring s 1)))]\n    [(char-numeric? (string-ref s 0))\n     (string-append\
    \ (string-ref s 0) (solve (substring s 1)))]\n    [else (string-append (string-downcase\
    \ (string-ref s 0)) (solve (substring s 1)))]))\n", "  (if (string-contains? s\
    \ #\\a)\n      (string-map\n       (lambda (c)\n         (if (char-alphabetic?\
    \ c)\n             (char-upcase c)\n             (char-downcase c)))\n       s)\n\
    \      (string-reverse s)))\n", "  (if (string-contains-ci? s #\\a)\n      (string-map\
    \ (lambda (c) (if (char-alphabetic? c)\n                                  (char-upcase\
    \ c)\n                                  (char-downcase c)))\n                \
    \  s)\n      (string-reverse s)))\n", "  (if (string-empty? s)\n      s\n    \
    \  (string-append (if (char-alphabetic? (string-ref s 0))\n                  \
    \       (if (char-lower-case? (string-ref s 0))\n                            \
    \ (string-upcase (string-ref s 0))\n                             (string-downcase\
    \ (string-ref s 0)))\n                         (string-ref s 0))\n           \
    \          (solve (substring s 1)))))\n", "  (cond\n    [(empty? s) \"\"]\n  \
    \  [(char-alphabetic? (string-ref s 0))\n     (string-append (string-upcase (string-ref\
    \ s 0)) (solve (substring s 1)))]\n    [(char-numeric? (string-ref s 0))\n   \
    \  (string-append (string-ref s 0) (solve (substring s 1)))]\n    [else\n    \
    \ (string-append (string-downcase (string-ref s 0)) (solve (substring s 1)))]))\n",
  "  (cond\n    [(empty? s) \"\"]\n    [(char-alphabetic? (string-ref s 0))\n    \
    \ (string-append\n      (string-append\n       (string-append\n        (string-append\n\
    \         (string-append\n          (string-append\n           (string-append\n\
    \            (string-append\n             (string-append\n              (string-append\n\
    \               (string-append\n                (string-append\n             \
    \    (string-append\n                  (string-append\n                   (string-append\n\
    \                    (string-append\n                     (string-append\n   \
    \                   (string-append\n                       (string-append\n  \
    \                      (string-append\n                         (string-append\n\
    \                          (string-append\n                           (string-append\n\
    \                            (string-append\n                             (string-append\n\
    \                              (string-append\n                              \
    \ (string-append\n                                (string-append\n           \
    \                      (string-append\n                                  (string-append\n\
    \                                   (string-append\n                         \
    \           (string-append\n                                     (string-append\n\
    \                                      (string-append\n                      \
    \                 (string-append\n                                        (string-append\n\
    \                                         (string-append\n                   \
    \                       (string-append\n                                     \
    \      (string-append\n                                            (string-append\n\
    \                                             (string-append\n               \
    \                               (string-append\n                             \
    \                  (string-append\n                                          \
    \      (string-append\n                                                 (string-append\n\
    \                                                  (string-append\n          \
    \                                         (string-append\n                   \
    \                                 (string-append\n                           \
    \                          (string-append\n                                  \
    \                    (string-append\n                                        \
    \               (string-append\n                                             \
    \           (string-append\n                                                 \
    \        (string-append\n                                                    \
    \      (string-append\n                                                      \
    \     (string-append\n                                                       \
    \     (string-append\n                                                       \
    \      (string-append\n                                                      \
    \        (string-append\n                                                    \
    \           (string-append\n                                                 \
    \               (string-append\n                                             \
    \                    (string-append\n                                        \
    \                          (string-append\n                                  \
    \                                 (string-append\n                           \
    \                                         (string-append\n                   \
    \                                                  (string-append\n          \
    \                                                            (string-append\n",
  "  (if (string-contains? s #\\a)\n      (string-map (lambda (c)\n              \
    \      (if (char-alphabetic? c)\n                        (if (char-lower-case?\
    \ c)\n                            (char-upcase c)\n                          \
    \  (char-downcase c))\n                        c))\n                  s)\n   \
    \   (string-reverse s)))\n", "  (if (string-contains? s #\\a)\n      (string-map\
    \ (lambda (x) (if (char-alphabetic? x) (char-downcase x) (char-upcase x))) s)\n\
    \      (string-reverse s)))\n", "  (if (string-contains? s #\\a)\n      (string-map\
    \ (lambda (c)\n                    (if (char-alphabetic? c)\n                \
    \        (if (char-lower-case? c)\n                            (char-upcase c)\n\
    \                            (char-downcase c))\n                        c))\n\
    \                  s)\n      (string-reverse s)))\n", "  (cond\n    [(empty? s)\
    \ \"\"]\n    [(char-alphabetic? (string-ref s 0))\n     (string-append (string-upcase\
    \ (string-ref s 0)) (solve (substring s 1)))]\n    [(char-numeric? (string-ref\
    \ s 0))\n     (string-append (string-ref s 0) (solve (substring s 1)))]\n    [else\n\
    \     (string-append (string-downcase (string-ref s 0)) (solve (substring s 1)))]))\n",
  "  (cond\n    [(empty? s) s]\n    [(char-alphabetic? (string-ref s 0))\n     (string-append\
    \ (string-upcase (string-ref s 0)) (solve (substring s 1)))]\n    [(char-numeric?\
    \ (string-ref s 0))\n     (string-append (string-ref s 0) (solve (substring s\
    \ 1)))]\n    [else\n     (string-append (string-downcase (string-ref s 0)) (solve\
    \ (substring s 1)))]))\n</code>\n", "  (if (string-contains? s #\\a)\n      (string-map\
    \ (lambda (c)\n                    (if (char-alphabetic? c)\n                \
    \        (if (char-lower-case? c)\n                            (char-upcase c)\n\
    \                            (char-downcase c))\n                        c))\n\
    \                  s)\n      (string-reverse s)))\n", "  (if (string-contains?\
    \ s #\\a)\n      (string-map (lambda (c) (if (char-alphabetic? c) (char-upcase\
    \ c) (char-downcase c))) s)\n      (string-reverse s)))\n", "  (if (string-empty?\
    \ s)\n      \"\"\n      (let* ([c (string-ref s 0)]\n             [c (if (char-alphabetic?\
    \ c)\n                    (if (char-lower-case? c)\n                        (char-upcase\
    \ c)\n                        (char-downcase c))\n                    c)])\n \
    \       (string-append (string c) (solve (substring s 1))))))\n", "  (if (string-empty?\
    \ s)\n      \"\"\n      (string-append (solve (substring s 1))\n             \
    \        (if (char-alphabetic? (string-ref s 0))\n                         (if\
    \ (char-lower-case? (string-ref s 0))\n                             (string-upcase\
    \ (string-ref s 0))\n                             (string-downcase (string-ref\
    \ s 0)))\n                         (string-ref s 0)))))\n", "  (if (string-contains?\
    \ s #\\a)\n      (string-map (lambda (c)\n                    (if (char-alphabetic?\
    \ c)\n                        (char-upcase c)\n                        (char-downcase\
    \ c)))\n                  s)\n      (string-reverse s)))\n", "  (cond\n    [(empty?\
    \ s) \"\"]\n    [(char-alphabetic? (string-ref s 0))\n     (string-append (string-upcase\
    \ (string-ref s 0)) (solve (substring s 1)))]\n    [(char-numeric? (string-ref\
    \ s 0))\n     (string-append (string-ref s 0) (solve (substring s 1)))]\n    [else\n\
    \     (string-append (string-downcase (string-ref s 0)) (solve (substring s 1)))]))\n",
  "  (if (string-contains? s #\\a)\n      (string-map (lambda (c)\n              \
    \      (if (char-alphabetic? c)\n                        (char-upcase c)\n   \
    \                     (char-downcase c)))\n                  s)\n      (string-reverse\
    \ s)))\n", "  (define (is-letter? c)\n    (and (char-alphabetic? c)\n        \
    \ (not (char-numeric? c))))\n  (define (reverse-case c)\n    (if (char-lower-case?\
    \ c)\n        (char-upcase c)\n        (char-downcase c)))\n  (define (reverse-string\
    \ s)\n    (string-append (reverse (string->list s))))\n  (define (reverse-case-string\
    \ s)\n    (string-append (map reverse-case (string->list s))))\n  (define (has-letters?\
    \ s)\n    (for/or ([c (in-string s)])\n      (is-letter? c)))\n  (cond\n    [(has-letters?\
    \ s) (reverse-case-string s)]\n    [else (reverse-string s)]))\n", "  (if (string-contains?\
    \ s #\\a)\n      (string-map (lambda (c)\n                    (if (char-alphabetic?\
    \ c)\n                        (if (char-lower-case? c)\n                     \
    \       (char-upcase c)\n                            (char-downcase c))\n    \
    \                    c))\n                  s)\n      (string-reverse s)))\n",
  "  (string-join\n   (reverse\n    (map\n     (lambda (c)\n       (if (char-alphabetic?\
    \ c)\n           (if (char-lower-case? c)\n               (char-upcase c)\n  \
    \             (char-downcase c))\n           c))\n     (string->list s)))))\n",
  "  (cond\n    [(empty? s) \"\"]\n    [(char-alphabetic? (first s))\n     (string-append\n\
    \      (if (char-lower-case? (first s))\n          (string-upcase (string (first\
    \ s)))\n          (string-downcase (string (first s))))\n      (solve (rest s)))]\n\
    \    [else\n     (string-append (string (first s)) (solve (rest s)))]))\n", " \
    \ (cond\n    [(empty? s) \"\"]\n    [(char-alphabetic? (string-ref s 0))\n   \
    \  (string-append (string-downcase (string-ref s 0)) (solve (substring s 1)))]\n\
    \    [(char-numeric? (string-ref s 0))\n     (string-append (string-ref s 0) (solve\
    \ (substring s 1)))]\n    [else (string-append (string-upcase (string-ref s 0))\
    \ (solve (substring s 1)))]))\n", "  (string-join\n   (reverse\n    (map\n   \
    \  (lambda (c)\n       (if (char-alphabetic? c)\n           (if (char-lower-case?\
    \ c)\n               (char-upcase c)\n               (char-downcase c))\n    \
    \       c))\n     (string->list s)))))\n", "  (if (string-contains? s #\\a)\n\
    \      (string-map (lambda (c)\n                    (if (char-alphabetic? c)\n\
    \                        (if (char-lower-case? c)\n                          \
    \  (char-upcase c)\n                            (char-downcase c))\n         \
    \               c))\n                  s)\n      (string-reverse s)))\n", "  (cond\n\
    \    [(empty? s) \"\"]\n    [(char-alphabetic? (string-ref s 0))\n     (string-append\n\
    \      (string-append\n       (string (char-downcase (string-ref s 0)))\n    \
    \   (substring s 1 (sub1 (string-length s))))\n      (solve (substring s 1 (sub1\
    \ (string-length s)))))]\n    [else\n     (string-append\n      (string (char-upcase\
    \ (string-ref s 0)))\n      (substring s 1 (sub1 (string-length s))))]))\n", " \
    \ (cond\n    [(empty? s) \"\"]\n    [(char-alphabetic? (string-ref s 0))\n   \
    \  (string-append\n      (string-append\n       (string (char-upcase (string-ref\
    \ s 0)))\n       (solve (substring s 1)))\n      (string (char-downcase (string-ref\
    \ s 0))))]\n    [else (string-append (string-ref s 0) (solve (substring s 1)))]))\n",
  "  (cond\n    [(empty? s) \"\"]\n    [(char-alphabetic? (string-ref s 0))\n    \
    \ (string-append (string-upcase (string-ref s 0)) (solve (substring s 1)))]\n\
    \    [(char-numeric? (string-ref s 0))\n     (string-append (string-ref s 0) (solve\
    \ (substring s 1)))]\n    [else\n     (string-append (string-downcase (string-ref\
    \ s 0)) (solve (substring s 1)))]))\n", "  (if (string-empty? s)\n      \"\"\n\
    \      (string-append (solve (substring s 1))\n                     (if (char-alphabetic?\
    \ (string-ref s 0))\n                         (if (char-lower-case? (string-ref\
    \ s 0))\n                             (string-upcase (string-ref s 0))\n     \
    \                        (string-downcase (string-ref s 0)))\n               \
    \          (string-ref s 0)))))\n", "  (cond\n    [(empty? s) s]\n    [(char-alphabetic?\
    \ (string-ref s 0))\n     (string-append (string-upcase (string-ref s 0)) (solve\
    \ (substring s 1)))]\n    [(char-numeric? (string-ref s 0))\n     (string-append\
    \ (string-ref s 0) (solve (substring s 1)))]\n    [else\n     (string-append (string-downcase\
    \ (string-ref s 0)) (solve (substring s 1)))]))\n</code>\n", "  (if (string-contains?\
    \ s #\\a)\n      (string-map (lambda (c) (if (char-alphabetic? c)\n          \
    \                        (char-upcase c)\n                                  (char-downcase\
    \ c)))\n                  s)\n      (string-reverse s)))\n", "  (if (string-contains?\
    \ s #\\a)\n      (string-map (lambda (c)\n                    (if (char-alphabetic?\
    \ c)\n                        (char-upcase c)\n                        (char-downcase\
    \ c)))\n                  s)\n      (string-reverse s)))\n", "  (if (string-contains?\
    \ s #\\a)\n      (string-map (lambda (c)\n                    (if (char-alphabetic?\
    \ c)\n                        (char-downcase c)\n                        (char-upcase\
    \ c)))\n                  s)\n      (string-reverse s)))\n", "  (if (string-contains?\
    \ s #\\a)\n      (string-map (lambda (c)\n                    (if (char-alphabetic?\
    \ c)\n                        (if (char-lower-case? c)\n                     \
    \       (char-upcase c)\n                            (char-downcase c))\n    \
    \                    c))\n                  s)\n      (string-reverse s)))\n",
  "  (if (string-empty? s)\n      s\n      (string-append (string-reverse (string-map\
    \ (lambda (c)\n                                                   (if (char-alphabetic?\
    \ c)\n                                                       (if (char-lower-case?\
    \ c)\n                                                           (char-upcase\
    \ c)\n                                                           (char-downcase\
    \ c))\n                                                       c))\n          \
    \                                       s))\n                     (solve (substring\
    \ s 1)))))\n</code>\n", "  (if (string-contains-ci? s #\\a)\n      (string-map\
    \ (lambda (c) (if (char-alphabetic? c) (char-upcase c) (char-downcase c))) s)\n\
    \      (string-reverse s)))\n", "  (cond\n    [(empty? s) \"\"]\n    [(char-alphabetic?\
    \ (first s))\n     (string-append\n      (if (char-lower-case? (first s))\n  \
    \        (string-upcase (string (first s)))\n          (string-downcase (string\
    \ (first s))))\n      (solve (rest s)))]\n    [else\n     (string-append (string\
    \ (first s)) (solve (rest s)))]))\n", "  (cond\n    [(empty? s) \"\"]\n    [(char-alphabetic?\
    \ (string-ref s 0))\n     (string-append (string-downcase (string-ref s 0)) (solve\
    \ (substring s 1)))]\n    [(char-numeric? (string-ref s 0))\n     (string-append\
    \ (string-ref s 0) (solve (substring s 1)))]\n    [else\n     (string-append (string-upcase\
    \ (string-ref s 0)) (solve (substring s 1)))]))\n", "  (if (string-contains? s\
    \ #\\a)\n      (string-map (lambda (c)\n                    (if (char-alphabetic?\
    \ c)\n                        (if (char-lower-case? c)\n                     \
    \       (char-upcase c)\n                            (char-downcase c))\n    \
    \                    c))\n                  s)\n      (string-reverse s)))\n",
  "  (cond\n    [(empty? s) \"\"]\n    [(char-alphabetic? (first s))\n     (string-append\n\
    \      (string-upcase (first s))\n      (solve (rest s)))]\n    [(char-numeric?\
    \ (first s))\n     (string-append\n      (string (first s))\n      (solve (rest\
    \ s)))]\n    [else\n     (string-append\n      (string-downcase (first s))\n \
    \     (solve (rest s)))]))\n", "  (if (string-contains? s #\\a)\n      (string-map\
    \ (lambda (c)\n                    (if (char-alphabetic? c)\n                \
    \        (if (char-lower-case? c)\n                            (char-upcase c)\n\
    \                            (char-downcase c))\n                        c))\n\
    \                  s)\n      (string-reverse s)))\n", "  (if (string-contains-ci?\
    \ s #\\a)\n      (for/fold ([res \"\"]\n                 [i (in-naturals)])\n\
    \          ([c (in-string s)])\n        (string-append res (if (char-alphabetic?\
    \ c)\n                               (char-upcase c)\n                       \
    \        (char-downcase c))))\n      (string-reverse s)))\n", "  (if (string-contains?\
    \ s #\\a)\n      (string-map (lambda (c)\n                    (if (char-alphabetic?\
    \ c)\n                        (if (char-lower-case? c)\n                     \
    \       (char-upcase c)\n                            (char-downcase c))\n    \
    \                    c))\n                  s)\n      (string-reverse s)))\n",
  "  (if (string-contains? s #\\a)\n      (string-map (lambda (c)\n              \
    \      (if (char-alphabetic? c)\n                        (char-upcase c)\n   \
    \                     (char-downcase c)))\n                  s)\n      (string-reverse\
    \ s)))\n", "  (cond\n    [(empty? s) \"\"]\n    [(char-alphabetic? (string-ref\
    \ s 0))\n     (string-append (string-upcase (string (string-ref s 0))) (solve\
    \ (substring s 1)))]\n    [(char-numeric? (string-ref s 0))\n     (string-append\
    \ (string (string-ref s 0)) (solve (substring s 1)))]\n    [else\n     (string-append\
    \ (string-downcase (string (string-ref s 0))) (solve (substring s 1)))]))\n",
  "  (cond\n    [(empty? s) \"\"]\n    [(char-alphabetic? (first s))\n     (string-append\
    \ (string-upcase (first s)) (solve (rest s)))]\n    [(char-numeric? (first s))\n\
    \     (string-append (first s) (solve (rest s)))]\n    [else (string-append (string-downcase\
    \ (first s)) (solve (rest s)))]))\n", "  (if (string-contains? s #\\a)\n     \
    \ (string-map (lambda (c)\n                    (if (char-alphabetic? c)\n    \
    \                    (char-upcase c)\n                        (char-downcase c)))\n\
    \                  s)\n      (string-reverse s)))\n", "  (cond\n    [(empty? s)\
    \ \"\"]\n    [(char-alphabetic? (string-ref s 0))\n     (string-append\n     \
    \ (string (char-upcase (string-ref s 0)))\n      (solve (substring s 1)))]\n \
    \   [(char-numeric? (string-ref s 0))\n     (string-append\n      (string (char-downcase\
    \ (string-ref s 0)))\n      (solve (substring s 1)))]\n    [else\n     (string-append\n\
    \      (string (string-ref s 0))\n      (solve (substring s 1)))]))\n", "  (cond\n\
    \    [(empty? s) \"\"]\n    [(char-alphabetic? (first s))\n     (string-append\n\
    \      (string (char-upcase (first s)))\n      (solve (rest s)))]\n    [(char-numeric?\
    \ (first s))\n     (string-append\n      (string (first s))\n      (solve (rest\
    \ s)))]\n    [else\n     (string-append\n      (string (char-downcase (first s)))\n\
    \      (solve (rest s)))]))\n", "  (if (string-contains? s #\\a)\n      (string-map\
    \ (lambda (c) (if (char-alphabetic? c) (char-upcase c) (char-downcase c))) s)\n\
    \      (string-reverse s)))\n", "  (if (string-contains? s #\\a)\n      (string-map\
    \ (lambda (c) (if (char-alphabetic? c)\n                                  (if\
    \ (char-lower-case? c)\n                                      (char-upcase c)\n\
    \                                      (char-downcase c))\n                  \
    \                c)) s)\n      (string-reverse s)))\n", "  (if (string-empty?\
    \ s)\n      \"\"\n      (string-append (solve (substring s 1))\n             \
    \        (if (char-alphabetic? (string-ref s 0))\n                         (string-downcase\
    \ (string-upcase (string-ref s 0)))\n                         (string-ref s 0)))))\n",
  "  (if (string-contains? s #\\a)\n      (string-map (lambda (c) (if (char-alphabetic?\
    \ c)\n                                  (char-upcase c)\n                    \
    \              (char-downcase c)))\n                  s)\n      (string-reverse\
    \ s)))\n", "  (cond\n    [(empty? s) \"\"]\n    [(char-alphabetic? (first s))\n\
    \     (string-append\n      (string-upcase (first s))\n      (solve (rest s)))]\n\
    \    [(char-numeric? (first s))\n     (string-append\n      (string (first s))\n\
    \      (solve (rest s)))]\n    [else\n     (string-append\n      (string-downcase\
    \ (first s))\n      (solve (rest s)))]))\n", "  (if (string-contains-ci? s #\\\
    a)\n      (string-map (lambda (c)\n                    (if (char-alphabetic? c)\n\
    \                        (if (char-lower-case? c)\n                          \
    \  (char-upcase c)\n                            (char-downcase c))\n         \
    \               c))\n                  s)\n      (string-reverse s)))\n", "  (if\
    \ (string-contains? s #\\a)\n      (string-map (lambda (c)\n                 \
    \   (if (char-alphabetic? c)\n                        (char-upcase c)\n      \
    \                  (char-downcase c)))\n                  s)\n      (string-reverse\
    \ s)))\n", "  (if (string-contains-ci? s #\\a)\n      (string-map (lambda (c)\n\
    \                    (if (char-alphabetic? c)\n                        (if (char-lower-case?\
    \ c)\n                            (char-upcase c)\n                          \
    \  (char-downcase c))\n                        c))\n                  s)\n   \
    \   (string-reverse s)))\n", "  (if (string-contains? s #\\a)\n      (string-map\
    \ (lambda (x) (if (char-alphabetic? x)\n                                  (char-downcase\
    \ x)\n                                  (char-upcase x))) s)\n      (reverse s)))\n",
  "  (if (string-contains-letter? s)\n      (string-reverse-case s)\n      (string-reverse\
    \ s)))\n", "  (cond\n    [(empty? s) \"\"]\n    [(char-alphabetic? (string-ref\
    \ s 0))\n     (string-append (string-upcase (string-ref s 0)) (solve (substring\
    \ s 1)))]\n    [(char-numeric? (string-ref s 0))\n     (string-append (string-ref\
    \ s 0) (solve (substring s 1)))]\n    [else\n     (string-append (string-downcase\
    \ (string-ref s 0)) (solve (substring s 1)))]))\n", "  (cond\n    [(empty? s)\
    \ \"\"]\n    [(char-alphabetic? (string-ref s 0))\n     (string-append\n     \
    \ (string-append\n       (string-append\n        (string-append\n         (string-append\n\
    \          (string-append\n           (string-append\n            (string-append\n\
    \             (string-append\n              (string-append\n               (string-append\n\
    \                (string-append\n                 (string-append\n           \
    \       (string-append\n                   (string-append\n                  \
    \  (string-append\n                     (string-append\n                     \
    \ (string-append\n                       (string-append\n                    \
    \    (string-append\n                         (string-append\n               \
    \           (string-append\n                           (string-append\n      \
    \                      (string-append\n                             (string-append\n\
    \                              (string-append\n                              \
    \ (string-append\n                                (string-append\n           \
    \                      (string-append\n                                  (string-append\n\
    \                                   (string-append\n                         \
    \           (string-append\n                                     (string-append\n\
    \                                      (string-append\n                      \
    \                 (string-append\n                                        (string-append\n\
    \                                         (string-append\n                   \
    \                       (string-append\n                                     \
    \      (string-append\n                                            (string-append\n\
    \                                             (string-append\n               \
    \                               (string-append\n                             \
    \                  (string-append\n                                          \
    \      (string-append\n                                                 (string-append\n\
    \                                                  (string-append\n          \
    \                                         (string-append\n                   \
    \                                 (string-append\n                           \
    \                          (string-append\n                                  \
    \                    (string-append\n                                        \
    \               (string-append\n                                             \
    \           (string-append\n                                                 \
    \        (string-append\n                                                    \
    \      (string-append\n                                                      \
    \     (string-append\n                                                       \
    \     (string-append\n                                                       \
    \      (string-append\n                                                      \
    \        (string-append\n                                                    \
    \           (string-append\n                                                 \
    \               (string-append\n                                             \
    \                    (string-append\n                                        \
    \                          (string-append\n                                  \
    \                                 (string-append\n                           \
    \                                         (string-append\n                   \
    \                                                  (string-append\n          \
    \                                                            (string-append\n",
  "  (if (string-contains? s #\\a)\n      (string-map (lambda (c)\n              \
    \      (if (char-alphabetic? c)\n                        (char-upcase c)\n   \
    \                     (char-downcase c)))\n                  s)\n      (string-reverse\
    \ s)))\n", "  (if (string-contains-letter? s)\n      (reverse-case s)\n      (reverse\
    \ s)))\n", "  (cond\n    [(empty? s) (string)]\n    [(char-alphabetic? (string-ref\
    \ s 0))\n     (string-append\n      (string-upcase (string-ref s 0))\n      (solve\
    \ (substring s 1)))]\n    [(char-numeric? (string-ref s 0))\n     (string-append\n\
    \      (string-ref s 0)\n      (solve (substring s 1)))]\n    [else\n     (string-append\n\
    \      (string-downcase (string-ref s 0))\n      (solve (substring s 1)))]))\n",
  "  (cond\n    [(empty? s) \"\"]\n    [(char-alphabetic? (string-ref s 0))\n    \
    \ (string-append (string-downcase (string-ref s 0)) (solve (substring s 1)))]\n\
    \    [(char-numeric? (string-ref s 0))\n     (string-append (string-ref s 0) (solve\
    \ (substring s 1)))]\n    [else\n     (string-append (string-upcase (string-ref\
    \ s 0)) (solve (substring s 1)))]))\n", "  (if (string-contains-letter? s)\n \
    \     (string-reverse-case s)\n      (string-reverse s)))\n", "  (if (string-contains?\
    \ s #\\a)\n      (string-map (lambda (c)\n                    (if (char-alphabetic?\
    \ c)\n                        (char-upcase c)\n                        (char-downcase\
    \ c)))\n                  s)\n      (string-reverse s)))\n", "  (cond\n    [(empty?\
    \ s) \"\"]\n    [(char-alphabetic? (string-ref s 0))\n     (string-append\n  \
    \    (string-append\n       (string-append\n        (string-append\n         (string-append\n\
    \          (string-append\n           (string-append\n            (string-append\n\
    \             (string-append\n              (string-append\n               (string-append\n\
    \                (string-append\n                 (string-append\n           \
    \       (string-append\n                   (string-append\n                  \
    \  (string-append\n                     (string-append\n                     \
    \ (string-append\n                       (string-append\n                    \
    \    (string-append\n                         (string-append\n               \
    \           (string-append\n                           (string-append\n      \
    \                      (string-append\n                             (string-append\n\
    \                              (string-append\n                              \
    \ (string-append\n                                (string-append\n           \
    \                      (string-append\n                                  (string-append\n\
    \                                   (string-append\n                         \
    \           (string-append\n                                     (string-append\n\
    \                                      (string-append\n                      \
    \                 (string-append\n                                        (string-append\n\
    \                                         (string-append\n                   \
    \                       (string-append\n                                     \
    \      (string-append\n                                            (string-append\n\
    \                                             (string-append\n               \
    \                               (string-append\n                             \
    \                  (string-append\n                                          \
    \      (string-append\n                                                 (string-append\n\
    \                                                  (string-append\n          \
    \                                         (string-append\n                   \
    \                                 (string-append\n                           \
    \                          (string-append\n                                  \
    \                    (string-append\n                                        \
    \               (string-append\n                                             \
    \           (string-append\n                                                 \
    \        (string-append\n                                                    \
    \      (string-append\n                                                      \
    \     (string-append\n                                                       \
    \     (string-append\n                                                       \
    \      (string-append\n                                                      \
    \        (string-append\n                                                    \
    \           (string-append\n                                                 \
    \               (string-append\n                                             \
    \                    (string-append\n                                        \
    \                          (string-append\n                                  \
    \                                 (string-append\n                           \
    \                                         (string-append\n                   \
    \                                                  (string-append\n          \
    \                                                            (string-append\n",
  "  (if (string-contains-letter? s)\n      (reverse-case s)\n      (reverse s)))\n",
  "  (string-join\n   (reverse\n    (map\n     (lambda (x)\n       (if (char-alphabetic?\
    \ x)\n           (if (char-lower-case? x)\n               (char-upcase x)\n  \
    \             (char-downcase x))\n           x))\n     (string->list s)))))\n",
  "  (if (string-contains? s #\\a)\n      (string-map (lambda (c) (if (char-alphabetic?\
    \ c)\n                                  (char-upcase c)\n                    \
    \              (char-downcase c)))\n                  s)\n      (string-reverse\
    \ s)))\n", "  (if (string-contains? s #\\a)\n      (string-map (lambda (c)\n \
    \                   (if (char-alphabetic? c)\n                        (if (char-lower-case?\
    \ c)\n                            (char-upcase c)\n                          \
    \  (char-downcase c))\n                        c))\n                  s)\n   \
    \   (string-reverse s)))\n", "  (if (string-contains? s #\\a)\n      (string-map\n\
    \       (lambda (c)\n         (if (char-alphabetic? c)\n             (char-upcase\
    \ c)\n             (char-downcase c)))\n       s)\n      (string-reverse s)))\n",
  "  (if (empty? s)\n      \"\"\n      (if (char-alphabetic? (string-ref s 0))\n \
    \         (string-append (string-upcase (string-ref s 0)) (solve (substring s\
    \ 1)))\n          (string-append (string-downcase (string-ref s 0)) (solve (substring\
    \ s 1))))))\n", "  (cond\n    [(empty? s) \"\"]\n    [(char-alphabetic? (string-ref\
    \ s 0))\n     (string-append\n      (string-upcase (string-ref s 0))\n      (solve\
    \ (substring s 1)))]\n    [(char-numeric? (string-ref s 0))\n     (string-append\n\
    \      (string-ref s 0)\n      (solve (substring s 1)))]\n    [else\n     (string-append\n\
    \      (string-downcase (string-ref s 0))\n      (solve (substring s 1)))]))\n",
  "  (cond\n    [(empty? s) \"\"]\n    [(char-alphabetic? (first s))\n     (string-append\
    \ (string-upcase (first s)) (solve (rest s)))]\n    [(char-numeric? (first s))\n\
    \     (string-append (first s) (solve (rest s)))]\n    [else\n     (string-append\
    \ (string-downcase (first s)) (solve (rest s)))]))\n", "  (if (string-contains?\
    \ s #\\a)\n      (string-map (lambda (c)\n                    (if (char-alphabetic?\
    \ c)\n                        (if (char-lower-case? c)\n                     \
    \       (char-upcase c)\n                            (char-downcase c))\n    \
    \                    c))\n                  s)\n      (string-reverse s)))\n",
  "  (cond\n    [(empty? s) \"\"]\n    [(char-alphabetic? (string-ref s 0))\n    \
    \ (string-append\n      (string (char-upcase (string-ref s 0)))\n      (solve\
    \ (substring s 1)))]\n    [(char-numeric? (string-ref s 0))\n     (string-append\n\
    \      (string (char-downcase (string-ref s 0)))\n      (solve (substring s 1)))]\n\
    \    [else (string-append (string (string-ref s 0)) (solve (substring s 1)))]))\n\
    </code>\n", "  (if (string-contains? s #\\a)\n      (string-map (lambda (x) (if\
    \ (char-alphabetic? x)\n                                  (if (char-lower-case?\
    \ x)\n                                      (char-upcase x)\n                \
    \                      (char-downcase x))\n                                  x))\
    \ s)\n      (string-reverse s)))\n", "  (cond\n    [(empty? s) \"\"]\n    [(char-alphabetic?\
    \ (first s))\n     (string-append (string-upcase (string (first s))) (solve (rest\
    \ s)))]\n    [(char-numeric? (first s))\n     (string-append (string (first s))\
    \ (solve (rest s)))]\n    [else\n     (string-append (string-downcase (string\
    \ (first s))) (solve (rest s)))]))\n", "  (cond\n    [(empty? s) \"\"]\n    [(char-alphabetic?\
    \ (string-ref s 0))\n     (string-append\n      (string-append\n       (string-append\n\
    \        (string-append\n         (string-append\n          (string-append\n \
    \          (string-append\n            (string-append\n             (string-append\n\
    \              (string-append\n               (string-append\n               \
    \ (string-append\n                 (string-append\n                  (string-append\n\
    \                   (string-append\n                    (string-append\n     \
    \                (string-append\n                      (string-append\n      \
    \                 (string-append\n                        (string-append\n   \
    \                      (string-append\n                          (string-append\n\
    \                           (string-append\n                            (string-append\n\
    \                             (string-append\n                              (string-append\n\
    \                               (string-append\n                             \
    \   (string-append\n                                 (string-append\n        \
    \                          (string-append\n                                  \
    \ (string-append\n                                    (string-append\n       \
    \                              (string-append\n                              \
    \        (string-append\n                                       (string-append\n\
    \                                        (string-append\n                    \
    \                     (string-append\n                                       \
    \   (string-append\n                                           (string-append\n\
    \                                            (string-append\n                \
    \                             (string-append\n                               \
    \               (string-append\n                                             \
    \  (string-append\n                                                (string-append\n\
    \                                                 (string-append\n           \
    \                                       (string-append\n                     \
    \                              (string-append\n                              \
    \                      (string-append\n                                      \
    \               (string-append\n                                             \
    \         (string-append\n                                                   \
    \    (string-append\n                                                        (string-append\n\
    \                                                         (string-append\n   \
    \                                                       (string-append\n     \
    \                                                      (string-append\n      \
    \                                                      (string-append\n      \
    \                                                       (string-append\n     \
    \                                                         (string-append\n   \
    \                                                            (string-append\n\
    \                                                                (string-append\n\
    \                                                                 (string-append\n\
    \                                                                  (string-append\n\
    \                                                                   (string-append\n\
    \                                                                    (string-append\n\
    \                                                                     (string-append\n\
    \                                                                      (string-append\n",
  "  (if (string-contains? s #\\a)\n      (string-map (lambda (x) (if (char-alphabetic?\
    \ x) (char-downcase x) (char-upcase x))) s)\n      (string-reverse s)))\n", " \
    \ (if (string-contains-letter? s)\n      (string-reverse-case s)\n      (string-reverse\
    \ s)))\n", "  (cond\n    [(empty? s) empty]\n    [(char-alphabetic? (first s))\n\
    \     (string-append (string-downcase (first s)) (solve (rest s)))]\n    [(char-numeric?\
    \ (first s))\n     (string-append (first s) (solve (rest s)))]\n    [else\n  \
    \   (string-append (string-upcase (first s)) (solve (rest s)))]))\n", "  (cond\n\
    \    [(empty? s) \"\"]\n    [(char-alphabetic? (string-ref s 0))\n     (string-append\n\
    \      (string-append\n       (string-append\n        (string-append\n       \
    \  (string-append\n          (string-append\n           (string-append\n     \
    \       (string-append\n             (string-append\n              (string-append\n\
    \               (string-append\n                (string-append\n             \
    \    (string-append\n                  (string-append\n                   (string-append\n\
    \                    (string-append\n                     (string-append\n   \
    \                   (string-append\n                       (string-append\n  \
    \                      (string-append\n                         (string-append\n\
    \                          (string-append\n                           (string-append\n\
    \                            (string-append\n                             (string-append\n\
    \                              (string-append\n                              \
    \ (string-append\n                                (string-append\n           \
    \                      (string-append\n                                  (string-append\n\
    \                                   (string-append\n                         \
    \           (string-append\n                                     (string-append\n\
    \                                      (string-append\n                      \
    \                 (string-append\n                                        (string-append\n\
    \                                         (string-append\n                   \
    \                       (string-append\n                                     \
    \      (string-append\n                                            (string-append\n\
    \                                             (string-append\n               \
    \                               (string-append\n                             \
    \                  (string-append\n                                          \
    \      (string-append\n                                                 (string-append\n\
    \                                                  (string-append\n          \
    \                                         (string-append\n                   \
    \                                 (string-append\n                           \
    \                          (string-append\n                                  \
    \                    (string-append\n                                        \
    \               (string-append\n                                             \
    \           (string-append\n                                                 \
    \        (string-append\n                                                    \
    \      (string-append\n                                                      \
    \     (string-append\n                                                       \
    \     (string-append\n                                                       \
    \      (string-append\n                                                      \
    \        (string-append\n                                                    \
    \           (string-append\n                                                 \
    \               (string-append\n                                             \
    \                    (string-append\n                                        \
    \                          (string-append\n                                  \
    \                                 (string-append\n                           \
    \                                         (string-append\n                   \
    \                                                  (string-append\n          \
    \                                                            (string-append\n",
  "  (if (string-contains? s #\\a)\n      (string-map (lambda (c)\n              \
    \      (if (char-alphabetic? c)\n                        (if (char-lower-case?\
    \ c)\n                            (char-upcase c)\n                          \
    \  (char-downcase c))\n                        c))\n                  s)\n   \
    \   (string-reverse s)))\n", "  (cond\n    [(empty? s) \"\"]\n    [(char-alphabetic?\
    \ (string-ref s 0))\n     (string-append\n      (string-upcase (string-ref s 0))\n\
    \      (solve (substring s 1)))]\n    [(char-numeric? (string-ref s 0))\n    \
    \ (string-append\n      (string-ref s 0)\n      (solve (substring s 1)))]\n  \
    \  [else\n     (string-append\n      (string-downcase (string-ref s 0))\n    \
    \  (solve (substring s 1)))]))\n", "  (cond [(empty? s) s]\n        [(char-alphabetic?\
    \ (string-ref s 0))\n         (string-append (string-upcase (string-ref s 0))\n\
    \                        (solve (substring s 1)))]\n        [(char-numeric? (string-ref\
    \ s 0))\n         (string-append (string-ref s 0)\n                        (solve\
    \ (substring s 1)))]\n        [else\n         (string-append (string-downcase\
    \ (string-ref s 0))\n                        (solve (substring s 1)))]))\n", " \
    \ (if (string-contains? s #\\a)\n      (string-map (lambda (c)\n             \
    \       (if (char-alphabetic? c)\n                        (if (char-lower-case?\
    \ c)\n                            (char-upcase c)\n                          \
    \  (char-downcase c))\n                        c))\n                  s)\n   \
    \   (string-reverse s)))\n", "  (cond\n    [(empty? s) \"\"]\n    [(char-alphabetic?\
    \ (string-ref s 0))\n     (string-append\n      (string-upcase (string-ref s 0))\n\
    \      (solve (substring s 1)))]\n    [(char-numeric? (string-ref s 0))\n    \
    \ (string-append\n      (string-ref s 0)\n      (solve (substring s 1)))]\n  \
    \  [else\n     (string-append\n      (string-downcase (string-ref s 0))\n    \
    \  (solve (substring s 1)))]))\n", "  (if (string-contains-letter? s)\n      (string-reverse-case\
    \ s)\n      (string-reverse s)))\n", "  (if (string-contains? s #\\a)\n      (string-map\
    \ (lambda (c)\n                    (if (char-alphabetic? c)\n                \
    \        (if (char-lower-case? c)\n                            (char-upcase c)\n\
    \                            (char-downcase c))\n                        c))\n\
    \                  s)\n      (string-reverse s)))\n", "  (if (string-contains?\
    \ s #\\a)\n      (string-map (lambda (c)\n                    (if (char-alphabetic?\
    \ c)\n                        (char-upcase c)\n                        (char-downcase\
    \ c)))\n                  s)\n      (string-reverse s)))\n", "  (if (string-contains?\
    \ s #\\a)\n      (string-map (lambda (c)\n                    (if (char-alphabetic?\
    \ c)\n                        (if (char-lower-case? c)\n                     \
    \       (char-upcase c)\n                            (char-downcase c))\n    \
    \                    c))\n                  s)\n      (reverse s)))\n", "  (cond\n\
    \    [(empty? s) s]\n    [(char-alphabetic? (string-ref s 0))\n     (string-append\
    \ (string-upcase (string-ref s 0)) (solve (substring s 1)))]\n    [(char-numeric?\
    \ (string-ref s 0))\n     (string-append (string-ref s 0) (solve (substring s\
    \ 1)))]\n    [else\n     (string-append (string-downcase (string-ref s 0)) (solve\
    \ (substring s 1)))]))\n", "  (if (string-contains? s #\\a)\n      (string-map\
    \ (lambda (c)\n                    (if (char-alphabetic? c)\n                \
    \        (char-upcase c)\n                        (char-downcase c)))\n      \
    \            s)\n      (string-reverse s)))\n", "  (if (string-contains-ci? s\
    \ #\\a)\n      (string-map (lambda (c)\n                    (if (char-alphabetic?\
    \ c)\n                        (if (char-lower-case? c)\n                     \
    \       (char-upcase c)\n                            (char-downcase c))\n    \
    \                    c))\n                  s)\n      (string-reverse s)))\n",
  "  (if (string-contains-letter? s)\n      (reverse-case s)\n      (string-reverse\
    \ s)))\n", "  (if (string-contains? s #\\a)\n      (string-map\n       (lambda\
    \ (c)\n         (if (char-alphabetic? c)\n             (if (char-lower-case? c)\n\
    \                 (char-upcase c)\n                 (char-downcase c))\n     \
    \        c))\n       s)\n      (string-reverse s)))\n", "  (cond\n    [(empty?\
    \ s) \"\"]\n    [(char-alphabetic? (string-ref s 0))\n     (string-append\n  \
    \    (string-append\n       (string-append\n        (string-append\n         (string-append\n\
    \          (string-append\n           (string-append\n            (string-append\n\
    \             (string-append\n              (string-append\n               (string-append\n\
    \                (string-append\n                 (string-append\n           \
    \       (string-append\n                   (string-append\n                  \
    \  (string-append\n                     (string-append\n                     \
    \ (string-append\n                       (string-append\n                    \
    \    (string-append\n                         (string-append\n               \
    \           (string-append\n                           (string-append\n      \
    \                      (string-append\n                             (string-append\n\
    \                              (string-append\n                              \
    \ (string-append\n                                (string-append\n           \
    \                      (string-append\n                                  (string-append\n\
    \                                   (string-append\n                         \
    \           (string-append\n                                     (string-append\n\
    \                                      (string-append\n                      \
    \                 (string-append\n                                        (string-append\n\
    \                                         (string-append\n                   \
    \                       (string-append\n                                     \
    \      (string-append\n                                            (string-append\n\
    \                                             (string-append\n               \
    \                               (string-append\n                             \
    \                  (string-append\n                                          \
    \      (string-append\n                                                 (string-append\n\
    \                                                  (string-append\n          \
    \                                         (string-append\n                   \
    \                                 (string-append\n                           \
    \                          (string-append\n                                  \
    \                    (string-append\n                                        \
    \               (string-append\n                                             \
    \           (string-append\n                                                 \
    \        (string-append\n                                                    \
    \      (string-append\n                                                      \
    \     (string-append\n                                                       \
    \     (string-append\n                                                       \
    \      (string-append\n                                                      \
    \        (string-append\n                                                    \
    \           (string-append\n                                                 \
    \               (string-append\n                                             \
    \                    (string-append\n                                        \
    \                          (string-append\n                                  \
    \                                 (string-append\n                           \
    \                                         (string-append\n                   \
    \                                                  (string-append\n          \
    \                                                            (string-append\n",
  "  (cond\n    [(empty? s) \"\"]\n    [(char-alphabetic? (string-ref s 0))\n    \
    \ (string-append\n      (string-upcase (string-ref s 0))\n      (solve (substring\
    \ s 1)))]\n    [(char-numeric? (string-ref s 0))\n     (string-append\n      (string-ref\
    \ s 0)\n      (solve (substring s 1)))]\n    [else\n     (string-append\n    \
    \  (string-downcase (string-ref s 0))\n      (solve (substring s 1)))]))\n", " \
    \ (cond\n    [(empty? s) \"\"]\n    [(char-alphabetic? (string-ref s 0))\n   \
    \  (string-append (string-upcase (string (string-ref s 0)))\n                \
    \    (solve (substring s 1)))]\n    [(char-numeric? (string-ref s 0))\n     (string-append\
    \ (string (string-ref s 0))\n                    (solve (substring s 1)))]\n \
    \   [else\n     (string-append (string-downcase (string (string-ref s 0)))\n \
    \                   (solve (substring s 1)))]))\n", "  (cond\n    [(empty? s)\
    \ \"\"]\n    [(char-alphabetic? (first s))\n     (string-append\n      (if (char-lower-case?\
    \ (first s))\n          (string-upcase (string (first s)))\n          (string-downcase\
    \ (string (first s))))\n      (solve (rest s)))]\n    [else\n     (string-append\
    \ (string (first s)) (solve (rest s)))]))\n", "  (if (string-contains? s #\\a)\n\
    \      (string-map (lambda (c)\n                    (if (char-alphabetic? c)\n\
    \                        (char-upcase c)\n                        (char-downcase\
    \ c)))\n                  s)\n      (string-reverse s)))\n", "  (cond\n    [(empty?\
    \ s) \"\"]\n    [(char-alphabetic? (string-ref s 0))\n     (string-append\n  \
    \    (string-upcase (string-ref s 0))\n      (solve (substring s 1)))]\n    [(char-numeric?\
    \ (string-ref s 0))\n     (string-append\n      (string-ref s 0)\n      (solve\
    \ (substring s 1)))]\n    [else\n     (string-append\n      (string-downcase (string-ref\
    \ s 0))\n      (solve (substring s 1)))]))\n", "  (if (string-contains? s #\\\
    a)\n      (string-map (lambda (c)\n                    (if (char-alphabetic? c)\n\
    \                        (if (char-lower-case? c)\n                          \
    \  (char-upcase c)\n                            (char-downcase c))\n         \
    \               c))\n                  s)\n      (string-reverse s)))\n", "  (cond\n\
    \    [(empty? s) \"\"]\n    [(char-alphabetic? (string-ref s 0))\n     (string-append\n\
    \      (string-append\n       (string-append\n        (string-append\n       \
    \  (string-append\n          (string-append\n           (string-append\n     \
    \       (string-append\n             (string-append\n              (string-append\n\
    \               (string-append\n                (string-append\n             \
    \    (string-append\n                  (string-append\n                   (string-append\n\
    \                    (string-append\n                     (string-append\n   \
    \                   (string-append\n                       (string-append\n  \
    \                      (string-append\n                         (string-append\n\
    \                          (string-append\n                           (string-append\n\
    \                            (string-append\n                             (string-append\n\
    \                              (string-append\n                              \
    \ (string-append\n                                (string-append\n           \
    \                      (string-append\n                                  (string-append\n\
    \                                   (string-append\n                         \
    \           (string-append\n                                     (string-append\n\
    \                                      (string-append\n                      \
    \                 (string-append\n                                        (string-append\n\
    \                                         (string-append\n                   \
    \                       (string-append\n                                     \
    \      (string-append\n                                            (string-append\n\
    \                                             (string-append\n               \
    \                               (string-append\n                             \
    \                  (string-append\n                                          \
    \      (string-append\n                                                 (string-append\n\
    \                                                  (string-append\n          \
    \                                         (string-append\n                   \
    \                                 (string-append\n                           \
    \                          (string-append\n                                  \
    \                    (string-append\n                                        \
    \               (string-append\n                                             \
    \           (string-append\n                                                 \
    \        (string-append\n                                                    \
    \      (string-append\n                                                      \
    \     (string-append\n                                                       \
    \     (string-append\n                                                       \
    \      (string-append\n                                                      \
    \        (string-append\n                                                    \
    \           (string-append\n                                                 \
    \               (string-append\n                                             \
    \                    (string-append\n                                        \
    \                          (string-append\n                                  \
    \                                 (string-append\n                           \
    \                                         (string-append\n                   \
    \                                                  (string-append\n          \
    \                                                            (string-append\n",
  "  (if (string-contains? s #\\a)\n      (string-map\n       (lambda (c)\n      \
    \   (if (char-alphabetic? c)\n             (if (char-lower-case? c)\n        \
    \         (char-upcase c)\n                 (char-downcase c))\n             c))\n\
    \       s)\n      (string-reverse s)))\n", "  (if (string-contains? s #\\a)\n\
    \      (string-map (lambda (c)\n                    (if (char-alphabetic? c)\n\
    \                        (char-upcase c)\n                        (char-downcase\
    \ c)))\n                  s)\n      (string-reverse s)))\n", "  (if (string-contains?\
    \ s #\\a)\n      (string-map (lambda (c)\n                    (if (char-alphabetic?\
    \ c)\n                        (if (char-lower-case? c)\n                     \
    \       (char-upcase c)\n                            (char-downcase c))\n    \
    \                    c))\n                  s)\n      (string-reverse s)))\n",
  "  (if (string-contains? s (regexp \"[a-zA-Z]\"))\n      (string-map (lambda (c)\n\
    \                    (if (char-alphabetic? c)\n                        (if (char-lower-case?\
    \ c)\n                            (char-upcase c)\n                          \
    \  (char-downcase c))\n                        c))\n                  s)\n   \
    \   (string-reverse s)))\n", "  (cond\n    [(empty? s) \"\"]\n    [(char-alphabetic?\
    \ (string-ref s 0))\n     (string-append\n      (string-upcase (string-ref s 0))\n\
    \      (solve (substring s 1)))]\n    [(char-numeric? (string-ref s 0))\n    \
    \ (string-append\n      (string-ref s 0)\n      (solve (substring s 1)))]\n  \
    \  [else\n     (string-append\n      (string-downcase (string-ref s 0))\n    \
    \  (solve (substring s 1)))]))\n", "  (if (string-contains? s #\\a)\n      (string-map\
    \ (lambda (c)\n                    (if (char-alphabetic? c)\n                \
    \        (char-upcase c)\n                        (char-downcase c)))\n      \
    \            s)\n      (string-reverse s)))\n", "  (if (string-contains? s #\\\
    a)\n      (string-map (lambda (c)\n                    (if (char-alphabetic? c)\n\
    \                        (if (char-lower-case? c)\n                          \
    \  (char-upcase c)\n                            (char-downcase c))\n         \
    \               c))\n                  s)\n      (string-reverse s)))\n", "  (if\
    \ (string-contains? s #\\a)\n      (string-map (lambda (c)\n                 \
    \   (if (char-alphabetic? c)\n                        (if (char-lower-case? c)\n\
    \                            (char-upcase c)\n                            (char-downcase\
    \ c))\n                        c))\n                  s)\n      (string-reverse\
    \ s)))\n", "  (if (string-contains? s #\\a)\n      (string-map (lambda (c)\n \
    \                   (if (char-alphabetic? c)\n                        (if (char-lower-case?\
    \ c)\n                            (char-upcase c)\n                          \
    \  (char-downcase c))\n                        c))\n                  s)\n   \
    \   (string-reverse s)))\n", "  (cond\n    [(empty? s) \"\"]\n    [(char-alphabetic?\
    \ (string-ref s 0))\n     (string-append (string-upcase (string-ref s 0)) (solve\
    \ (substring s 1)))]\n    [(char-numeric? (string-ref s 0))\n     (string-append\
    \ (string-ref s 0) (solve (substring s 1)))]\n    [else\n     (string-append (string-downcase\
    \ (string-ref s 0)) (solve (substring s 1)))]))\n", "  (if (string-contains? s\
    \ #\\a)\n      (string-map (lambda (c)\n                    (if (char-alphabetic?\
    \ c)\n                        (if (char-lower-case? c)\n                     \
    \       (char-upcase c)\n                            (char-downcase c))\n    \
    \                    c))\n                  s)\n      (string-reverse s)))\n",
  "  (if (string-contains? s #\\a)\n      (string-map (lambda (c)\n              \
    \      (if (char-alphabetic? c)\n                        (if (char-lower-case?\
    \ c)\n                            (char-upcase c)\n                          \
    \  (char-downcase c))\n                        c))\n                  s)\n   \
    \   (string-reverse s)))\n", "  (cond\n    [(string=? s \"\") \"\"]\n    [(string-contains?\
    \ s #\\a) (string-upcase s)]\n    [(string-contains? s #\\A) (string-downcase\
    \ s)]\n    [else (string-reverse s)]))\n", "  (if (string-contains? s #\\a)\n\
    \      (string-map (lambda (c)\n                    (if (char-alphabetic? c)\n\
    \                        (if (char-lower-case? c)\n                          \
    \  (char-upcase c)\n                            (char-downcase c))\n         \
    \               c))\n                  s)\n      (string-reverse s)))\n", "  (if\
    \ (string-contains-letter? s)\n      (reverse-case s)\n      (reverse s)))\n",
  "  (if (string-contains? s #\\a)\n      (string-map (lambda (c) (if (char-alphabetic?\
    \ c) (char-downcase c) (char-upcase c))) s)\n      (string-reverse s)))\n", " \
    \ (if (string-contains? s #\\a)\n      (string-map (lambda (c)\n             \
    \       (if (char-alphabetic? c)\n                        (if (char-lower-case?\
    \ c)\n                            (char-upcase c)\n                          \
    \  (char-downcase c))\n                        c))\n                  s)\n   \
    \   (string-reverse s)))\n", "  (if (empty? s)\n      \"\"\n      (if (char-alphabetic?\
    \ (string-ref s 0))\n          (string-append (string-upcase (string-ref s 0))\
    \ (solve (substring s 1)))\n          (string-append (string-downcase (string-ref\
    \ s 0)) (solve (substring s 1))))))\n</code>\n", "  (if (string-contains? s #\\\
    a)\n      (string-map (lambda (x) (if (char-alphabetic? x) (char-downcase x) (char-upcase\
    \ x))) s)\n      (string-reverse s)))\n", "  (cond\n    [(empty? s) \"\"]\n  \
    \  [(char-alphabetic? (string-ref s 0))\n     (string-append\n      (string-upcase\
    \ (string-ref s 0))\n      (solve (substring s 1)))]\n    [(char-numeric? (string-ref\
    \ s 0))\n     (string-append\n      (string-ref s 0)\n      (solve (substring\
    \ s 1)))]\n    [else\n     (string-append\n      (string-downcase (string-ref\
    \ s 0))\n      (solve (substring s 1)))]))\n", "  (cond\n    [(empty? s) \"\"\
    ]\n    [(char-alphabetic? (first s))\n     (string-append\n      (string-upcase\
    \ (string (first s)))\n      (solve (rest s)))]\n    [(char-numeric? (first s))\n\
    \     (string-append\n      (string (first s))\n      (solve (rest s)))]\n   \
    \ [else\n     (string-append\n      (string (first s))\n      (solve (rest s)))]))\n",
  "  (if (string-contains-letter? s)\n      (reverse-case s)\n      (reverse s)))\n",
  "  (cond\n    [(empty? s) \"\"]\n    [(char-alphabetic? (string-ref s 0))\n    \
    \ (string-append (string-upcase (string-ref s 0)) (solve (substring s 1)))]\n\
    \    [(char-numeric? (string-ref s 0))\n     (string-append (string-ref s 0) (solve\
    \ (substring s 1)))]\n    [else (string-append (string-downcase (string-ref s\
    \ 0)) (solve (substring s 1)))]))\n", "  (if (string-contains? s #\\a)\n     \
    \ (string-map\n       (lambda (c)\n         (if (char-alphabetic? c)\n       \
    \      (if (char-lower-case? c)\n                 (char-upcase c)\n          \
    \       (char-downcase c))\n             c))\n       s)\n      (string-reverse\
    \ s)))\n", "  (if (string-contains? s #\\a)\n      (string-map (lambda (c) (if\
    \ (char-alphabetic? c)\n                                  (char-upcase c)\n  \
    \                                (char-downcase c)))\n                  s)\n \
    \     (string-reverse s)))\n", "  (if (string-contains? s #\\a)\n      (string-map\
    \ (lambda (c) (if (char-alphabetic? c)\n                                  (char-upcase\
    \ c)\n                                  (char-downcase c)))\n                \
    \  s)\n      (string-reverse s)))\n", "  (if (string-contains? s #\\a)\n     \
    \ (string-map (lambda (c)\n                    (if (char-alphabetic? c)\n    \
    \                    (if (char-lower-case? c)\n                            (char-upcase\
    \ c)\n                            (char-downcase c))\n                       \
    \ c))\n                  s)\n      (string-reverse s)))\n", "  (if (string-empty?\
    \ s)\n      \"\"\n      (if (char-alphabetic? (string-ref s 0))\n          (string-append\
    \ (string-upcase (string-ref s 0)) (solve (substring s 1)))\n          (string-append\
    \ (string-downcase (string-ref s 0)) (solve (substring s 1))))))\n", "  (if (empty?\
    \ s)\n      \"\"\n      (if (char-alphabetic? (string-ref s 0))\n          (string-append\
    \ (string-downcase (string-ref s 0)) (solve (substring s 1)))\n          (string-append\
    \ (string-upcase (string-ref s 0)) (solve (substring s 1))))))\n</code>\nI'm not\
    \ sure if I'm doing it right. I'm not sure if I'm using the right functions.\n\
    \n\nA:\n\nI think you're on the right track.  You're using the right functions,\
    \ but you're using them in a way that's not quite right.  Here's a hint:\n<code>(define\
    \ (solve s)\n  (if (empty? s)\n      \"\"\n      (string-append (string-downcase\
    \ (string-ref s 0)) (solve (substring s 1)))))\n</code>\nThis will work, but it's\
    \ not quite right.  It will always convert the first character to lowercase. \
    \ You want to convert it to lowercase if it's uppercase, and vice versa.  How\
    \ can you do that?\n", "  (if (string-contains? s #\\a)\n      (string-map (lambda\
    \ (c)\n                    (if (char-alphabetic? c)\n                        (if\
    \ (char-lower-case? c)\n                            (char-upcase c)\n        \
    \                    (char-downcase c))\n                        c))\n       \
    \           s)\n      (string-reverse s)))\n", "  (if (string-contains? s #\\\
    a)\n      (string-map (lambda (c)\n                    (if (char-alphabetic? c)\n\
    \                        (char-upcase c)\n                        (char-downcase\
    \ c)))\n                  s)\n      (string-reverse s)))\n", "  (define (is-letter?\
    \ c)\n    (and (char-alphabetic? c) (not (char-numeric? c))))\n  (define (reverse-case\
    \ c)\n    (if (char-lower-case? c)\n        (char-upcase c)\n        (char-downcase\
    \ c)))\n  (define (reverse-string s)\n    (string-reverse s))\n  (define (has-letter?\
    \ s)\n    (regexp-match? #rx\"[a-zA-Z]\" s))\n  (if (has-letter? s)\n      (string-map\
    \ reverse-case s)\n      (reverse-string s)))\n", "  (cond\n    [(empty? s) s]\n\
    \    [(char-alphabetic? (string-ref s 0))\n     (string-append (string-upcase\
    \ (string-ref s 0)) (solve (substring s 1)))]\n    [(char-numeric? (string-ref\
    \ s 0))\n     (string-append (string-ref s 0) (solve (substring s 1)))]\n    [else\
    \ (string-append (string-downcase (string-ref s 0)) (solve (substring s 1)))]))\n",
  "  (cond\n    [(empty? s) \"\"]\n    [(char-alphabetic? (string-ref s 0)) (string-append\
    \ (string-upcase (string-ref s 0)) (solve (substring s 1)))]\n    [(char-numeric?\
    \ (string-ref s 0)) (string-append (string-ref s 0) (solve (substring s 1)))]\n\
    \    [else (string-append (string-downcase (string-ref s 0)) (solve (substring\
    \ s 1)))]))\n", "  (cond\n    [(empty? s) \"\"]\n    [(char-alphabetic? (string-ref\
    \ s 0))\n     (string-append\n      (string-upcase (string-ref s 0))\n      (solve\
    \ (substring s 1)))]\n    [(char-numeric? (string-ref s 0))\n     (string-append\n\
    \      (string-ref s 0)\n      (solve (substring s 1)))]\n    [else\n     (string-append\n\
    \      (string-downcase (string-ref s 0))\n      (solve (substring s 1)))]))\n",
  "  (if (string-contains-letter? s)\n      (string-reverse-case s)\n      (string-reverse\
    \ s)))\n", "  (if (string-contains? s (regexp \"[a-zA-Z]\"))\n      (string-join\
    \ (map (lambda (c)\n                          (if (char-alphabetic? c)\n     \
    \                         (char-downcase c)\n                              (char-upcase\
    \ c)))\n                        (string->list s)))\n      (string-reverse s)))\n",
  "  (if (string-contains-ci? s #\\a)\n      (string-map (lambda (c)\n           \
    \         (if (char-alphabetic? c)\n                        (if (char-lower-case?\
    \ c)\n                            (char-upcase c)\n                          \
    \  (char-downcase c))\n                        c))\n                  s)\n   \
    \   (string-reverse s)))\n", "  (if (string-contains? s #\\a)\n      (string-map\
    \ (lambda (c)\n                    (if (char-alphabetic? c)\n                \
    \        (char-upcase c)\n                        (char-downcase c)))\n      \
    \            s)\n      (string-reverse s)))\n", "  (if (string-contains-ci? s\
    \ #\\a)\n      (string-map (lambda (c)\n                    (if (char-alphabetic?\
    \ c)\n                        (if (char-lower-case? c)\n                     \
    \       (char-upcase c)\n                            (char-downcase c))\n    \
    \                    c))\n                  s)\n      (string-reverse s)))\n",
  "  (if (string-contains? s #\\a)\n      (string-map (lambda (c) (if (char-alphabetic?\
    \ c) (char-downcase c) (char-upcase c))) s)\n      (string-reverse s)))\n", " \
    \ (cond\n    [(empty? s) \"\"]\n    [(char-alphabetic? (first s))\n     (string-append\
    \ (string-upcase (first s)) (solve (rest s)))]\n    [(char-numeric? (first s))\n\
    \     (string-append (first s) (solve (rest s)))]\n    [else (string-append (string-downcase\
    \ (first s)) (solve (rest s)))]))\n", "  (if (string-contains-any? s (string->list\
    \ \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\"))\n      (string-join\
    \ (map (lambda (x) (if (char-alphabetic? x) (char-upcase x) (char-downcase x)))\
    \ (string->list s)))\n      (string-reverse s)))\n", "  (if (string-empty? s)\n\
    \      \"\"\n      (if (char-alphabetic? (string-ref s 0))\n          (string-append\
    \ (string-upcase (string-ref s 0)) (solve (substring s 1)))\n          (string-append\
    \ (string-downcase (string-ref s 0)) (solve (substring s 1))))))\n", "  (if (string-contains?\
    \ s #\\a)\n      (string-map (lambda (c)\n                    (if (char-alphabetic?\
    \ c)\n                        (char-upcase c)\n                        (char-downcase\
    \ c)))\n                  s)\n      (string-reverse s)))\n", "  (if (string-contains-letter?\
    \ s)\n      (string-reverse-case s)\n      (string-reverse s)))\n", "  (if (string-contains?\
    \ s #\\a)\n      (string-map (lambda (c)\n                    (if (char-alphabetic?\
    \ c)\n                        (char-upcase c)\n                        (char-downcase\
    \ c)))\n                  s)\n      (string-reverse s)))\n", "  (cond\n    [(empty?\
    \ s) \"\"]\n    [(char-alphabetic? (string-ref s 0))\n     (string-append\n  \
    \    (string-append\n       (string-upcase (string (string-ref s 0)))\n      \
    \ (substring s 1 (- (string-length s) 1)))\n      (string-downcase (string (string-ref\
    \ s (- (string-length s) 1)))))\n    ]\n    [else\n     (string-append\n     \
    \ (substring s 0 (- (string-length s) 1))\n      (string-reverse (string (string-ref\
    \ s (- (string-length s) 1)))))\n     ]\n    )\n  )\n</code>\nI am getting the\
    \ following error:\n<code>string-append: expects type &lt;string&gt; as 1st argument,\
    \ given: #\\A; other arguments were: #\\c\n</code>\nI don't understand why this\
    \ is happening.\nAny help would be appreciated.\n\n\nA:\n\nYou're trying to concatenate\
    \ a string and a character.\n<code>(string-append\n (string-append\n  (string-upcase\
    \ (string (string-ref s 0)))\n  (substring s 1 (- (string-length s) 1)))\n (string-downcase\
    \ (string (string-ref s (- (string-length s) 1)))))\n</code>\nThe first <code>string-append</code>\
    \ is fine, but the second one is not.\n<code>(string-downcase (string (string-ref\
    \ s (- (string-length s) 1))))\n</code>\nThis expression evaluates to a character,\
    \ not a string.\n<code>(string-downcase (string (string-ref s (- (string-length\
    \ s) 1))))\n=&gt; #\\c\n</code>\nYou can fix this by wrapping the character in\
    \ a string:\n<code>(string-append\n (string-append\n  (string-upcase (string (string-ref\
    \ s 0)))\n  (substring s 1 (- (string-length s) 1)))\n (string (string-downcase\
    \ (string (string-ref s (- (string-length s) 1))))))\n</code>\n", "  (if (string-contains-letter?\
    \ s)\n      (string-reverse-case s)\n      (string-reverse s)))\n", "  (cond\n\
    \    [(empty? s) \"\"]\n    [(char-alphabetic? (string-ref s 0))\n     (string-append\
    \ (string-upcase (string-ref s 0)) (solve (substring s 1)))]\n    [(char-numeric?\
    \ (string-ref s 0))\n     (string-append (string-ref s 0) (solve (substring s\
    \ 1)))]\n    [else (string-append (string-downcase (string-ref s 0)) (solve (substring\
    \ s 1)))]))\n", "  (if (string-contains? s #\\a)\n      (string-map (lambda (c)\n\
    \                    (if (char-alphabetic? c)\n                        (char-upcase\
    \ c)\n                        (char-downcase c)))\n                  s)\n    \
    \  (string-reverse s)))\n", "  (if (string-contains? s #\\a)\n      (string-map\
    \ (lambda (c)\n                    (if (char-alphabetic? c)\n                \
    \        (char-upcase c)\n                        (char-downcase c)))\n      \
    \            s)\n      (string-reverse s)))\n</code>\n", "  (if (string-contains-letter?\
    \ s)\n      (string-reverse-case s)\n      (string-reverse s)))\n", "  (if (string-contains-ci?\
    \ s #\\a)\n      (string-map (lambda (c) (if (char-alphabetic? c)\n          \
    \                        (char-upcase c)\n                                  (char-downcase\
    \ c)))\n                  s)\n      (string-reverse s)))\n", "  (if (string-contains?\
    \ s #\\a)\n      (string-map (lambda (x) (if (char-alphabetic? x) (char-downcase\
    \ x) (char-upcase x))) s)\n      (string-reverse s)))\n", "  (cond\n    [(empty?\
    \ s) \"\"]\n    [(char-alphabetic? (string-ref s 0))\n     (string-append\n  \
    \    (string-append\n       (string-append\n        (string-append\n         (string-append\n\
    \          (string-append\n           (string-append\n            (string-append\n\
    \             (string-append\n              (string-append\n               (string-append\n\
    \                (string-append\n                 (string-append\n           \
    \       (string-append\n                   (string-append\n                  \
    \  (string-append\n                     (string-append\n                     \
    \ (string-append\n                       (string-append\n                    \
    \    (string-append\n                         (string-append\n               \
    \           (string-append\n                           (string-append\n      \
    \                      (string-append\n                             (string-append\n\
    \                              (string-append\n                              \
    \ (string-append\n                                (string-append\n           \
    \                      (string-append\n                                  (string-append\n\
    \                                   (string-append\n                         \
    \           (string-append\n                                     (string-append\n\
    \                                      (string-append\n                      \
    \                 (string-append\n                                        (string-append\n\
    \                                         (string-append\n                   \
    \                       (string-append\n                                     \
    \      (string-append\n                                            (string-append\n\
    \                                             (string-append\n               \
    \                               (string-append\n                             \
    \                  (string-append\n                                          \
    \      (string-append\n                                                 (string-append\n\
    \                                                  (string-append\n          \
    \                                         (string-append\n                   \
    \                                 (string-append\n                           \
    \                          (string-append\n                                  \
    \                    (string-append\n                                        \
    \               (string-append\n                                             \
    \           (string-append\n                                                 \
    \        (string-append\n                                                    \
    \      (string-append\n                                                      \
    \     (string-append\n                                                       \
    \     (string-append\n                                                       \
    \      (string-append\n                                                      \
    \        (string-append\n                                                    \
    \           (string-append\n                                                 \
    \               (string-append\n                                             \
    \                    (string-append\n                                        \
    \                          (string-append\n                                  \
    \                                 (string-append\n                           \
    \                                         (string-append\n                   \
    \                                                  (string-append\n          \
    \                                                            (string-append\n",
  "  (cond [(empty? s) s]\n        [(char-alphabetic? (string-ref s 0))\n        \
    \ (string-append (string-upcase (string-ref s 0))\n                        (solve\
    \ (substring s 1)))]\n        [(char-numeric? (string-ref s 0))\n         (string-append\
    \ (string-ref s 0)\n                        (solve (substring s 1)))]\n      \
    \  [else (string-append (string-downcase (string-ref s 0))\n                 \
    \            (solve (substring s 1)))]))\n", "  (cond\n    [(empty? s) \"\"]\n\
    \    [(char-alphabetic? (string-ref s 0))\n     (string-append\n      (string\
    \ (char-upcase (string-ref s 0)))\n      (solve (substring s 1)))]\n    [(char-numeric?\
    \ (string-ref s 0))\n     (string-append\n      (string (char-downcase (string-ref\
    \ s 0)))\n      (solve (substring s 1)))]\n    [else\n     (string-append\n  \
    \    (string (string-ref s 0))\n      (solve (substring s 1)))]))\n", "  (if (string-contains-letter?\
    \ s)\n      (string-reverse-case s)\n      (string-reverse s)))\n", "  (if (string-contains?\
    \ s #\\a)\n      (string-map (lambda (c)\n                    (if (char-alphabetic?\
    \ c)\n                        (char-upcase c)\n                        (char-downcase\
    \ c)))\n                  s)\n      (string-reverse s)))\n", "  (if (string-contains?\
    \ s #\\a)\n      (string-map (lambda (x) (if (char-alphabetic? x)\n          \
    \                        (if (char-lower-case? x)\n                          \
    \            (char-upcase x)\n                                      (char-downcase\
    \ x))\n                                  x)) s)\n      (string-reverse s)))\n",
  "  (cond\n    [(empty? s) empty]\n    [(char-alphabetic? (first s))\n     (string-append\
    \ (string-downcase (first s)) (solve (rest s)))]\n    [(char-numeric? (first s))\n\
    \     (string-append (first s) (solve (rest s)))]\n    [else\n     (string-append\
    \ (string-upcase (first s)) (solve (rest s)))]))\n", "  (if (string-empty? s)\n\
    \      \"\"\n      (string-append (string (if (char-alphabetic? (string-ref s\
    \ 0))\n                                 (if (char-lower-case? (string-ref s 0))\n\
    \                                     (char-upcase (string-ref s 0))\n       \
    \                              (char-downcase (string-ref s 0)))\n           \
    \                      (string-ref s 0)))\n                      (solve (substring\
    \ s 1)))))\n", "  (cond\n    [(empty? s) \"\"]\n    [(char-alphabetic? (string-ref\
    \ s 0))\n     (string-append\n      (string-append\n       (string-append\n  \
    \      (string-append\n         (string-append\n          (string-append\n   \
    \        (string-append\n            (string-append\n             (string-append\n\
    \              (string-append\n               (string-append\n               \
    \ (string-append\n                 (string-append\n                  (string-append\n\
    \                   (string-append\n                    (string-append\n     \
    \                (string-append\n                      (string-append\n      \
    \                 (string-append\n                        (string-append\n   \
    \                      (string-append\n                          (string-append\n\
    \                           (string-append\n                            (string-append\n\
    \                             (string-append\n                              (string-append\n\
    \                               (string-append\n                             \
    \   (string-append\n                                 (string-append\n        \
    \                          (string-append\n                                  \
    \ (string-append\n                                    (string-append\n       \
    \                              (string-append\n                              \
    \        (string-append\n                                       (string-append\n\
    \                                        (string-append\n                    \
    \                     (string-append\n                                       \
    \   (string-append\n                                           (string-append\n\
    \                                            (string-append\n                \
    \                             (string-append\n                               \
    \               (string-append\n                                             \
    \  (string-append\n                                                (string-append\n\
    \                                                 (string-append\n           \
    \                                       (string-append\n                     \
    \                              (string-append\n                              \
    \                      (string-append\n                                      \
    \               (string-append\n                                             \
    \         (string-append\n                                                   \
    \    (string-append\n                                                        (string-append\n\
    \                                                         (string-append\n   \
    \                                                       (string-append\n     \
    \                                                      (string-append\n      \
    \                                                      (string-append\n      \
    \                                                       (string-append\n     \
    \                                                         (string-append\n   \
    \                                                            (string-append\n\
    \                                                                (string-append\n\
    \                                                                 (string-append\n\
    \                                                                  (string-append\n\
    \                                                                   (string-append\n\
    \                                                                    (string-append\n\
    \                                                                     (string-append\n\
    \                                                                      (string-append\n",
  "  (if (string-contains? s #\\a)\n      (string-map (lambda (c)\n              \
    \      (if (char-alphabetic? c)\n                        (if (char-lower-case?\
    \ c)\n                            (char-upcase c)\n                          \
    \  (char-downcase c))\n                        c))\n                  s)\n   \
    \   (string-reverse s)))\n", "  (if (string-contains-letter? s)\n      (reverse-case\
    \ s)\n      (reverse s)))\n", "  (if (string-contains? s #\\a)\n      (string-map\
    \ (lambda (c)\n                    (if (char-alphabetic? c)\n                \
    \        (char-upcase c)\n                        (char-downcase c)))\n      \
    \            s)\n      (string-reverse s)))\n", "  (if (string-contains? s #\\\
    a)\n      (string-map (lambda (c)\n                    (if (char-alphabetic? c)\n\
    \                        (char-upcase c)\n                        (char-downcase\
    \ c)))\n                  s)\n      (string-reverse s)))\n", "  (if (string-contains?\
    \ s #\\a)\n      (string-map (lambda (c) (if (char-alphabetic? c) (char-upcase\
    \ c) (char-downcase c))) s)\n      (string-reverse s)))\n", "  (string-join (reverse\
    \ (map (lambda (c)\n                               (if (char-alphabetic? c)\n\
    \                                   (if (char-lower-case? c)\n               \
    \                        (char-upcase c)\n                                   \
    \    (char-downcase c))\n                                   c))\n            \
    \                 (string->list s)))))\n", "  (if (string-contains-letter? s)\n\
    \      (string-reverse-case s)\n      (string-reverse s)))\n", "  (if (string-contains-ci?\
    \ s #\\a)\n      (string-map (lambda (c)\n                    (if (char-alphabetic?\
    \ c)\n                        (if (char-lower-case? c)\n                     \
    \       (char-upcase c)\n                            (char-downcase c))\n    \
    \                    c))\n                  s)\n      (string-reverse s)))\n",
  "  (if (string-contains? s #\\a)\n      (string-map (lambda (c) (if (char-alphabetic?\
    \ c)\n                                  (char-upcase c)\n                    \
    \              (char-downcase c)))\n                  s)\n      (string-reverse\
    \ s)))\n", "  (cond\n    [(empty? s) \"\"]\n    [(char-alphabetic? (string-ref\
    \ s 0))\n     (string-append\n      (string-append\n       (string-upcase (string\
    \ (string-ref s 0)))\n       (string-downcase (substring s 1)))\n      (solve\
    \ (substring s 1)))]\n    [else\n     (string-append\n      (string (string-ref\
    \ s 0))\n      (solve (substring s 1)))]))\n", "  (if (string-contains? s #\\\
    a)\n      (string-map (lambda (x) (if (char-alphabetic? x)\n                 \
    \                 (char-upcase x)\n                                  (char-downcase\
    \ x))) s)\n      (string-reverse s)))\n", "  (cond\n    [(empty? s) \"\"]\n  \
    \  [(char-alphabetic? (first s))\n     (string-append\n      (string-upcase (first\
    \ s))\n      (solve (rest s)))]\n    [(char-numeric? (first s))\n     (string-append\n\
    \      (first s)\n      (solve (rest s)))]\n    [else\n     (string-append\n \
    \     (string-downcase (first s))\n      (solve (rest s)))]))\n", "  (if (string-contains-ci?\
    \ s #\\a)\n      (string-map (lambda (x) (if (char-alphabetic? x) (char-upcase\
    \ x) (char-downcase x))) s)\n      (string-reverse s)))\n", "  (if (string-contains?\
    \ s #\\a)\n      (string-map (lambda (c)\n                    (if (char-alphabetic?\
    \ c)\n                        (if (char-lower-case? c)\n                     \
    \       (char-upcase c)\n                            (char-downcase c))\n    \
    \                    c))\n                  s)\n      (string-reverse s)))\n",
  "  (if (string-contains? s #\\a)\n      (string-map (lambda (c)\n              \
    \      (if (char-alphabetic? c)\n                        (char-upcase c)\n   \
    \                     (char-downcase c)))\n                  s)\n      (string-reverse\
    \ s)))\n", "  (define (is-letter? c)\n    (and (char-alphabetic? c)\n        \
    \ (not (char-numeric? c))))\n  (define (reverse-case c)\n    (if (char-lower-case?\
    \ c)\n        (char-upcase c)\n        (char-downcase c)))\n  (define (reverse-case-string\
    \ s)\n    (string-map reverse-case s))\n  (define (has-letters? s)\n    (for/or\
    \ ([c (in-string s)])\n      (is-letter? c)))\n  (if (has-letters? s)\n      (reverse-case-string\
    \ s)\n      (string-reverse s)))\n", "  (if (string-contains? s #\\a)\n      (string-map\
    \ (lambda (c) (if (char-alphabetic? c)\n                                  (char-upcase\
    \ c)\n                                  (char-downcase c)))\n                \
    \  s)\n      (string-reverse s)))\n", "  (if (string-contains-letter? s)\n   \
    \   (string-reverse-case s)\n      (string-reverse s)))\n", "  (if (string-contains?\
    \ s #\\a)\n      (string-map (lambda (c)\n                    (if (char-alphabetic?\
    \ c)\n                        (if (char-lower-case? c)\n                     \
    \       (char-upcase c)\n                            (char-downcase c))\n    \
    \                    c))\n                  s)\n      (string-reverse s)))\n",
  "  (cond\n    [(empty? s) \"\"]\n    [(char-alphabetic? (string-ref s 0))\n    \
    \ (string-append\n      (string-append\n       (string-append\n        (string-append\n\
    \         (string-append\n          (string-append\n           (string-append\n\
    \            (string-append\n             (string-append\n              (string-append\n\
    \               (string-append\n                (string-append\n             \
    \    (string-append\n                  (string-append\n                   (string-append\n\
    \                    (string-append\n                     (string-append\n   \
    \                   (string-append\n                       (string-append\n  \
    \                      (string-append\n                         (string-append\n\
    \                          (string-append\n                           (string-append\n\
    \                            (string-append\n                             (string-append\n\
    \                              (string-append\n                              \
    \ (string-append\n                                (string-append\n           \
    \                      (string-append\n                                  (string-append\n\
    \                                   (string-append\n                         \
    \           (string-append\n                                     (string-append\n\
    \                                      (string-append\n                      \
    \                 (string-append\n                                        (string-append\n\
    \                                         (string-append\n                   \
    \                       (string-append\n                                     \
    \      (string-append\n                                            (string-append\n\
    \                                             (string-append\n               \
    \                               (string-append\n                             \
    \                  (string-append\n                                          \
    \      (string-append\n                                                 (string-append\n\
    \                                                  (string-append\n          \
    \                                         (string-append\n                   \
    \                                 (string-append\n                           \
    \                          (string-append\n                                  \
    \                    (string-append\n                                        \
    \               (string-append\n                                             \
    \           (string-append\n                                                 \
    \        (string-append\n                                                    \
    \      (string-append\n                                                      \
    \     (string-append\n                                                       \
    \     (string-append\n                                                       \
    \      (string-append\n                                                      \
    \        (string-append\n                                                    \
    \           (string-append\n                                                 \
    \               (string-append\n                                             \
    \                    (string-append\n                                        \
    \                          (string-append\n                                  \
    \                                 (string-append\n                           \
    \                                         (string-append\n                   \
    \                                                  (string-append\n          \
    \                                                            (string-append\n",
  "  (if (string-contains? s #\\a)\n      (string-map (lambda (x) (if (char-alphabetic?\
    \ x) (char-downcase x) (char-upcase x))) s)\n      (string-reverse s)))\n", " \
    \ (if (string-contains? s #\\a)\n      (string-map (lambda (c) (if (char-alphabetic?\
    \ c) (char-upcase c) (char-downcase c))) s)\n      (string-reverse s)))\n"]
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
