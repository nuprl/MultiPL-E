name: HumanEval_11_string_xor
language: racket
prompt: "#lang racket\n\n;; Input are two strings a and b consisting only of 1s and\
  \ 0s.\n;; Perform binary XOR on these inputs and return result also as a string.\n\
  ;; >>> string_xor('010', '110')\n;; '100'\n(define (string_xor a b)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate string_xor))\n\
  \    (check-equal? (candidate \"111000\" \"101010\") \"010010\")\n    (check-equal?\
  \ (candidate \"1\" \"1\") \"0\")\n    (check-equal? (candidate \"0101\" \"0000\"\
  ) \"0101\")\n))\n\n(test-humaneval)"
completions: ["  (string-join (map (lambda (x) (number->string (bitwise-xor (string->number\
    \ (string-ref x 0)) (string->number (string-ref x 1))))) (map (lambda (x) (list\
    \ (string-ref a x) (string-ref b x))) (iota (string-length a))))))\n", "  (define\
    \ (xor-char a b)\n    (if (and (char=? a #\\1) (char=? b #\\0))\n        #\\1\n\
    \        (if (and (char=? a #\\0) (char=? b #\\1))\n            #\\1\n       \
    \     #\\0)))\n  (define (xor-string a b)\n    (if (or (string=? a \"\") (string=?\
    \ b \"\"))\n        \"\"\n        (string-append (string (xor-char (string-ref\
    \ a 0) (string-ref b 0)))\n                       (xor-string (substring a 1)\
    \ (substring b 1)))))\n  (xor-string a b))\n", "  (define (xor-char a b)\n   \
    \ (cond ((and (char=? a #\\0) (char=? b #\\0)) #\\0)\n          ((and (char=?\
    \ a #\\1) (char=? b #\\1)) #\\0)\n          (else #\\1)))\n  (define (xor-string\
    \ a b)\n    (if (or (string=? a \"\") (string=? b \"\"))\n        \"\"\n     \
    \   (string-append (string (xor-char (string-ref a 0) (string-ref b 0)))\n   \
    \                    (xor-string (substring a 1) (substring b 1)))))\n  (xor-string\
    \ a b))\n", "  (define (xor-char a b)\n    (cond\n      [(char=? a b) #\\0]\n\
    \      [else #\\1]))\n  (apply string (map xor-char a b)))\n", "  (define (xor-char\
    \ a b)\n    (cond ((and (char=? a #\\0) (char=? b #\\0)) #\\0)\n          ((and\
    \ (char=? a #\\1) (char=? b #\\1)) #\\0)\n          (else #\\1)))\n  (apply string\
    \ (map xor-char (string->list a) (string->list b))))\n", "  (cond\n    [(empty?\
    \ a) b]\n    [(empty? b) a]\n    [else\n     (string-append\n      (string (bitwise-xor\
    \ (string-&gt;number (string-ref a 0))\n                           (string-&gt;number\
    \ (string-ref b 0))))\n      (string_xor (substring a 1) (substring b 1)))]))\n",
  "  (cond\n    [(empty? a) b]\n    [(empty? b) a]\n    [else (string (bitwise-xor\
    \ (string-&gt;number (string-ref a 0))\n                               (string-&gt;number\
    \ (string-ref b 0))))\n          (string_xor (substring a 1) (substring b 1))]))\n\
    </code>\n", "  (string-join (map (lambda (x) (number->string (bitwise-xor (string->number\
    \ (string-ref x 0)) (string->number (string-ref x 1))))) (zip (string-&gt;list\
    \ a) (string-&gt;list b))) \"\"))\n", "  (define (xor-char a b)\n    (if (equal?\
    \ a b)\n        #\\0\n        #\\1))\n  (define (xor-string a b)\n    (if (equal?\
    \ (string-length a) 0)\n        \"\"\n        (string-append (string (xor-char\
    \ (string-ref a 0) (string-ref b 0)))\n                       (xor-string (substring\
    \ a 1) (substring b 1)))))\n  (xor-string a b))\n", "  (define (xor-char a b)\n\
    \    (cond ((and (char=? a #\\0) (char=? b #\\0)) #\\0)\n          ((and (char=?\
    \ a #\\1) (char=? b #\\1)) #\\0)\n          (else #\\1)))\n  (define (xor-string\
    \ a b)\n    (if (string=? a \"\")\n        \"\"\n        (string-append (list\
    \ (xor-char (string-ref a 0) (string-ref b 0)))\n                       (xor-string\
    \ (substring a 1) (substring b 1)))))\n  (xor-string a b))\n", "  (define (xor-char\
    \ a b)\n    (if (equal? a b)\n        #\\0\n        #\\1))\n  (string-map xor-char\
    \ a b))\n", "  (string-join (map (lambda (x) (number->string (bitwise-xor (string->number\
    \ (string-ref x 0)) (string->number (string-ref x 1))))) (zip (string-&gt;list\
    \ a) (string-&gt;list b))) \"\"))\n", "  (define (xor-char a b)\n    (if (equal?\
    \ a b)\n        #\\0\n        #\\1))\n  (define (xor-string a b)\n    (if (equal?\
    \ (string-length a) 0)\n        \"\"\n        (string-append (list (xor-char (string-ref\
    \ a 0) (string-ref b 0)))\n                       (xor-string (substring a 1)\
    \ (substring b 1)))))\n  (xor-string a b))\n", "  (define (xor-char a b)\n   \
    \ (cond ((and (char=? a #\\0) (char=? b #\\0)) #\\0)\n          ((and (char=?\
    \ a #\\1) (char=? b #\\1)) #\\0)\n          (else #\\1)))\n  (define (xor-string\
    \ a b)\n    (if (or (string-null? a) (string-null? b))\n        \"\"\n       \
    \ (string-append (string (xor-char (string-ref a 0) (string-ref b 0)))\n     \
    \                  (xor-string (substring a 1) (substring b 1)))))\n  (xor-string\
    \ a b))\n", "  (string-join (map (lambda (x) (number->string (bitwise-xor (string->number\
    \ (string-ref x 0)) (string->number (string-ref x 1))))) (map list (string->list\
    \ a) (string->list b))) \"\"))\n", "  (define (xor-char a b)\n    (if (equal?\
    \ a b)\n        #\\0\n        #\\1))\n  (define (xor-string a b)\n    (if (or\
    \ (equal? a \"\") (equal? b \"\"))\n        \"\"\n        (string-append (string\
    \ (xor-char (string-ref a 0) (string-ref b 0)))\n                       (xor-string\
    \ (substring a 1) (substring b 1)))))\n  (xor-string a b))\n", "  (define (xor\
    \ a b)\n    (cond ((and (= a 0) (= b 0)) 0)\n          ((and (= a 1) (= b 1))\
    \ 0)\n          (else 1)))\n  (string-join (map (lambda (x) (number->string (xor\
    \ (string-&gt;number (string-ref a (car x))) (string-&gt;number (string-ref b\
    \ (car x)))))) (enumerate (string-length a))) \"\"))\n", "  (define (xor-char\
    \ a b)\n    (if (equal? a b)\n        #\\0\n        #\\1))\n  (define (xor-string\
    \ a b)\n    (if (equal? (string-length a) 0)\n        \"\"\n        (string-append\
    \ (string (xor-char (string-ref a 0) (string-ref b 0)))\n                    \
    \   (xor-string (substring a 1) (substring b 1)))))\n  (xor-string a b))\n", " \
    \ (define (xor-char a b)\n    (cond\n      [(char=? a b) #\\0]\n      [else #\\\
    1]))\n  (define (xor-string a b)\n    (if (string=? a \"\")\n        \"\"\n  \
    \      (string-append (list (xor-char (string-ref a 0) (string-ref b 0)))\n  \
    \                     (xor-string (substring a 1) (substring b 1)))))\n  (xor-string\
    \ a b))\n", "  (string-join (map (lambda (x) (number->string (xor (string-&gt;number\
    \ (string-ref x 0)) (string-&gt;number (string-ref x 1))))) (zip (string-&gt;list\
    \ a) (string-&gt;list b))) \"\"))\n", "  (define (xor-char a b)\n    (if (or (and\
    \ (char=? a #\\1) (char=? b #\\0))\n            (and (char=? a #\\0) (char=? b\
    \ #\\1)))\n        #\\1\n        #\\0))\n  (define (xor-string a b)\n    (if (or\
    \ (string=? a \"\") (string=? b \"\"))\n        \"\"\n        (string-append (string\
    \ (xor-char (string-ref a 0) (string-ref b 0)))\n                       (xor-string\
    \ (substring a 1) (substring b 1)))))\n  (xor-string a b))\n", "  (string-join\n\
    \   (map (\u03BB (x)\n          (if (equal? (car x) (cadr x))\n              \"\
    0\"\n              \"1\"))\n        (list-tabulate (string-length a) (\u03BB (i)\
    \ (list (string-ref a i) (string-ref b i)))))\n   \"\"))\n", "  (define (xor-char\
    \ a b)\n    (cond\n      [(char=? a b) #\\0]\n      [else #\\1]))\n  (define (xor-string\
    \ a b)\n    (string-append\n      (string (xor-char (string-ref a 0) (string-ref\
    \ b 0)))\n      (xor-string (substring a 1) (substring b 1))))\n  (if (string=?\
    \ a \"\")\n      b\n      (if (string=? b \"\")\n          a\n          (xor-string\
    \ a b))))\n", "  (define (xor-char a b)\n    (if (or (and (char=? a #\\1) (char=?\
    \ b #\\0))\n            (and (char=? a #\\0) (char=? b #\\1)))\n        #\\1\n\
    \        #\\0))\n  (define (xor-string a b)\n    (if (or (string=? a \"\") (string=?\
    \ b \"\"))\n        \"\"\n        (string-append (string (xor-char (string-ref\
    \ a 0) (string-ref b 0)))\n                       (xor-string (substring a 1)\
    \ (substring b 1)))))\n  (xor-string a b))\n", "  (define (xor-char a b)\n   \
    \ (if (equal? a b)\n        #\\0\n        #\\1))\n  (define (xor-string a b)\n\
    \    (if (or (equal? a \"\") (equal? b \"\"))\n        \"\"\n        (string-append\
    \ (string (xor-char (string-ref a 0) (string-ref b 0)))\n                    \
    \   (xor-string (substring a 1) (substring b 1)))))\n  (xor-string a b))\n", " \
    \ (define (xor-char a b)\n    (cond ((and (char=? a #\\0) (char=? b #\\0)) #\\\
    0)\n          ((and (char=? a #\\1) (char=? b #\\1)) #\\0)\n          (else #\\\
    1)))\n  (string-join (map (lambda (x) (xor-char (car x) (cadr x))) (zip (string->list\
    \ a) (string->list b)))))\n", "  (string-join\n   (map (lambda (x) (number->string\
    \ (bitwise-xor (string->number (string-ref x 0)) (string->number (string-ref x\
    \ 1)))))\n        (map (lambda (x) (string (char-upcase x)))\n             (string-split\
    \ (string-append a b) \"\")))\n   \"\"))\n", "  (string-join\n   (map (lambda\
    \ (x) (number->string (bitwise-xor (string->number (string x) 2) (string->number\
    \ (string (cdr x)) 2))))\n        (zip (string-&gt;list a) (string-&gt;list b)))\n\
    \   \"\"))\n</code>\n", "  (string-join (map (lambda (x) (number->string (xor\
    \ (string-&gt;number (string-ref x 0)) (string-&gt;number (string-ref x 1)))))\
    \ (zip (string-&gt;list a) (string-&gt;list b))) \"\"))\n</code>\n", "  (define\
    \ (xor-char a b)\n    (if (equal? a b)\n        #\\0\n        #\\1))\n  (define\
    \ (xor-string a b)\n    (if (or (equal? a \"\") (equal? b \"\"))\n        \"\"\
    \n        (string-append (string (xor-char (string-ref a 0) (string-ref b 0)))\n\
    \                       (xor-string (substring a 1) (substring b 1)))))\n  (xor-string\
    \ a b))\n", "  (define (xor-char a b)\n    (cond\n      [(char=? a b) #\\0]\n\
    \      [else #\\1]))\n  (string-map xor-char a b))\n", "  (define (xor-char a\
    \ b)\n    (if (equal? a b)\n        #\\0\n        #\\1))\n  (define (xor-string\
    \ a b)\n    (if (equal? (string-length a) (string-length b))\n        (string-append\
    \ (list (xor-char (string-ref a 0) (string-ref b 0)))\n                      \
    \ (xor-string (substring a 1) (substring b 1)))\n        (error \"Strings are\
    \ not of equal length\")))\n  (xor-string a b))\n", "  (define (xor-char a b)\n\
    \    (if (equal? a b)\n        #\\0\n        #\\1))\n  (string-join (map (lambda\
    \ (x) (xor-char (car x) (cadr x))) (zip (string->list a) (string->list b)))))\n",
  "  (string-join\n   (map (lambda (x) (number->string (bitwise-xor (string->number\
    \ (string-ref x 0)) (string->number (string-ref x 1)))))\n        (map string\
    \ (zip (string-&gt;list a) (string-&gt;list b))))))\n", "  (string-join (map (lambda\
    \ (x) (number->string (bitwise-xor (string->number (string-ref x 0)) (string->number\
    \ (string-ref x 1))))) (map list (string->list a) (string->list b))) \"\"))\n",
  "  (string-join\n   (map (lambda (x) (if (equal? (car x) (cadr x)) \"0\" \"1\"))\n\
    \        (map list (string->list a) (string->list b)))\n   \"\"))\n", "  (define\
    \ (xor-char a b)\n    (if (char=? a b)\n        #\\0\n        #\\1))\n  (apply\
    \ string (map xor-char a b)))\n", "  (string-join\n   (map (\u03BB (x) (number->string\
    \ (bitwise-xor (string->number (string-ref x 0)) (string->number (string-ref x\
    \ 1)))))\n        (map list (string->list a) (string->list b)))\n   \"\"))\n",
  "  (define (xor-char a b)\n    (string (if (equal? (string-&gt;number a) (string-&gt;number\
    \ b)) #\\0 #\\1)))\n  (apply string (map xor-char (string-&gt;list a) (string-&gt;list\
    \ b))))\n", "  (define (xor-char a b)\n    (if (equal? a b)\n        #\\0\n  \
    \      #\\1))\n  (string-map xor-char a b))\n", "  (define (xor-char a b)\n  \
    \  (if (or (and (equal? a #\\1) (equal? b #\\0))\n            (and (equal? a #\\\
    0) (equal? b #\\1)))\n        #\\1\n        #\\0))\n  (string-join (map (lambda\
    \ (x) (xor-char (car x) (cadr x)))\n                    (zip (string->list a)\
    \ (string->list b)))\n              \"\"))\n", "  (define (xor-char a b)\n   \
    \ (if (equal? a b)\n        #\\0\n        #\\1))\n  (define (xor-string a b)\n\
    \    (if (or (equal? a \"\") (equal? b \"\"))\n        \"\"\n        (string-append\
    \ (string (xor-char (string-ref a 0) (string-ref b 0)))\n                    \
    \   (xor-string (substring a 1) (substring b 1)))))\n  (xor-string a b))\n", " \
    \ (define (xor-char a b)\n    (if (equal? a b)\n        #\\0\n        #\\1))\n\
    \  (define (xor-string a b)\n    (if (equal? (string-length a) 0)\n        \"\"\
    \n        (string-append (string (xor-char (string-ref a 0) (string-ref b 0)))\n\
    \                       (xor-string (substring a 1) (substring b 1)))))\n  (xor-string\
    \ a b))\n", "  (define (xor-char a b)\n    (if (or (and (char=? a #\\1) (char=?\
    \ b #\\0))\n            (and (char=? a #\\0) (char=? b #\\1)))\n        #\\1\n\
    \        #\\0))\n  (apply string (map (lambda (a b) (xor-char a b))\n        \
    \             (string->list a)\n                     (string->list b))))\n```\n\
    \n## [Problem 2](https://www.codewars.com/kata/5b0d67c1cb35dfa10b0022c7)\n\n```racket\n\
    #lang racket\n", "  (define (xor-char a b)\n    (if (equal? a b)\n        #\\\
    0\n        #\\1))\n  (define (xor-string a b)\n    (if (equal? (string-length\
    \ a) 0)\n        \"\"\n        (string-append (list (xor-char (string-ref a 0)\
    \ (string-ref b 0)))\n                       (xor-string (substring a 1) (substring\
    \ b 1)))))\n  (xor-string a b))\n", "  (define (xor-char a b)\n    (if (equal?\
    \ a b)\n        #\\0\n        #\\1))\n  (string-join\n   (map (\u03BB (x) (xor-char\
    \ (car x) (cadr x)))\n        (zip (string->list a) (string->list b)))\n   \"\"\
    ))\n", "  (apply string (map (lambda (x y) (if (equal? x y) #\\0 #\\1)) a b)))\n",
  "  (string-join (map (lambda (x) (number->string (bitwise-xor (string->number (string-ref\
    \ x 0)) (string->number (string-ref x 1))))) (zip (string-&gt;list a) (string-&gt;list\
    \ b))) \"\"))\n", "  (define (xor-char a b)\n    (if (eq? a b)\n        #\\0\n\
    \        #\\1))\n  (define (xor-string a b)\n    (if (eq? (string-length a) 0)\n\
    \        \"\"\n        (string-append (list (xor-char (string-ref a 0) (string-ref\
    \ b 0)))\n                       (xor-string (substring a 1) (substring b 1)))))\n\
    \  (xor-string a b))\n", "  (string-join (map (lambda (x) (number->string (bitwise-xor\
    \ (string->number (string-ref x 0)) (string->number (string-ref x 1))))) (string-split\
    \ (string-append a b) \"\")) \"\"))\n", "  (define (xor-char a b)\n    (if (char=?\
    \ a b)\n        #\\0\n        #\\1))\n  (define (xor-string a b)\n    (if (string=?\
    \ a \"\")\n        \"\"\n        (string-append (string (xor-char (string-ref\
    \ a 0) (string-ref b 0)))\n                       (xor-string (substring a 1)\
    \ (substring b 1)))))\n  (xor-string a b))\n", "  (string-join (map (lambda (x)\
    \ (number->string (bitwise-xor (string->number (string-ref x 0)) (string->number\
    \ (string-ref x 1))))) (zip (string-&gt;list a) (string-&gt;list b))) \"\"))\n\
    </code>\n", "  (define (xor-char a b)\n    (cond\n      [(char=? a b) #\\0]\n\
    \      [else #\\1]))\n  (string-join (map (lambda (x) (xor-char (car x) (cadr\
    \ x))) (zip (string->list a) (string->list b))) \"\"))\n", "  (string-join\n \
    \  (map (lambda (x) (number->string (bitwise-xor (string->number (string-ref x\
    \ 0)) (string->number (string-ref x 1)))))\n        (map (lambda (x) (list (string-ref\
    \ a x) (string-ref b x)))\n             (build-list (string-length a) (lambda\
    \ (x) x))))\n   \"\"))\n", "  (define (xor-char a b)\n    (if (char=? a b)\n \
    \       #\\0\n        #\\1))\n  (define (xor-string a b)\n    (if (string=? a\
    \ \"\")\n        \"\"\n        (string-append (string (xor-char (string-ref a\
    \ 0) (string-ref b 0)))\n                       (xor-string (substring a 1) (substring\
    \ b 1)))))\n  (xor-string a b))\n", "  (define (xor-char a b)\n    (cond ((and\
    \ (char=? a #\\0) (char=? b #\\0)) #\\0)\n          ((and (char=? a #\\1) (char=?\
    \ b #\\1)) #\\0)\n          (else #\\1)))\n  (define (xor-string a b)\n    (if\
    \ (or (empty? a) (empty? b))\n        (string)\n        (string-append (xor-string\
    \ (rest a) (rest b))\n                       (string (xor-char (first a) (first\
    \ b))))))\n  (xor-string (string-&gt;list a) (string-&gt;list b)))\n", "  (cond\n\
    \    [(empty? a) b]\n    [(empty? b) a]\n    [else\n     (string-append\n    \
    \  (string-append\n       (if (equal? (first a) (first b)) \"0\" \"1\")\n    \
    \   (string_xor (rest a) (rest b)))\n      \"\")]))\n", "  (string-join (map (lambda\
    \ (x) (number->string (bitwise-xor (string->number (string-ref x 0)) (string->number\
    \ (string-ref x 1))))) (zip (string-&gt;list a) (string-&gt;list b))) \"\"))\n\
    </code>\n", "  (string-join (map (lambda (x) (number->string (bitwise-xor (string->number\
    \ (string-ref x 0)) (string->number (string-ref x 1))))) (zip (string-&gt;list\
    \ a) (string-&gt;list b))) \"\"))\n", "  (string-join\n   (map (lambda (x) (number->string\
    \ (bitwise-xor (string->number (string-ref x 0)) (string->number (string-ref x\
    \ 1)))))\n        (map (lambda (x) (string (car x) (cadr x)))\n             (zip\
    \ (string->list a) (string->list b))))))\n", "  (define (xor-char a b)\n    (if\
    \ (equal? a b)\n        #\\0\n        #\\1))\n  (string-join (map (lambda (x)\
    \ (xor-char (car x) (cadr x))) (zip (string->list a) (string->list b)))))\n",
  "  (define (xor-char a b)\n    (if (equal? a b)\n        #\\0\n        #\\1))\n\
    \  (string-map xor-char a b))\n", "  (string-join (map (\u03BB (x) (number->string\
    \ (bitwise-xor (string->number (string-ref x 0)) (string->number (string-ref x\
    \ 1))))) (string-split (string-append a b) \"\")) \"\"))\n", "  (define (string-&gt;list\
    \ s)\n    (map (lambda (c) (string-&gt;number (string c))) (string-&gt;list s)))\n\
    \  (define (list-&gt;string l)\n    (list-&gt;string (map number-&gt;string l)))\n\
    \  (list-&gt;string (map (lambda (x y) (xor x y)) (string-&gt;list a) (string-&gt;list\
    \ b))))\n</code>\nThis is my first attempt at writing a function in Racket. I\
    \ am not sure if this is idiomatic Racket. I am also not sure if I am using the\
    \ right functions. I am not sure if I am using the right data structures.\nI am\
    \ also not sure if I am using the right functions to convert between strings and\
    \ lists.\nI am also not sure if I am using the right functions to convert between\
    \ numbers and strings.\nI am also not sure if I am using the right functions to\
    \ convert between characters and strings.\nI am also not sure if I am using the\
    \ right functions to convert between characters and numbers.\nI am also not sure\
    \ if I am using the right functions to convert between numbers and characters.\n\
    I am also not sure if I am using the right functions to convert between strings\
    \ and characters.\nI am also not sure if I am using the right functions to convert\
    \ between lists and strings.\nI am also not sure if I am using the right functions\
    \ to convert between lists and numbers.\nI am also not sure if I am using the\
    \ right functions to convert between lists and characters.\nI am also not sure\
    \ if I am using the right functions to convert between characters and lists.\n\
    I am also not sure if I am using the right functions to convert between numbers\
    \ and lists.\nI am also not sure if I am using the right functions to convert\
    \ between strings and lists.\nI am also not sure if I am using the right functions\
    \ to convert between strings and numbers.\nI am also not sure if I am using the\
    \ right functions to convert between strings and characters.\nI am also not sure\
    \ if I am using the right functions to convert between numbers and strings.\n\
    I am also not sure if I am using the right functions to convert between numbers\
    \ and characters.\nI am also not sure if I am using the right functions to convert\
    \ between characters and numbers.\n", "  (define (xor-char a b)\n    (if (equal?\
    \ a b)\n        #\\0\n        #\\1))\n  (define (xor-string a b)\n    (if (or\
    \ (empty? a) (empty? b))\n        \"\"\n        (string-append (list (xor-char\
    \ (string-ref a 0) (string-ref b 0)))\n                       (xor-string (substring\
    \ a 1) (substring b 1)))))\n  (xor-string a b))\n", "  (string-join (map (lambda\
    \ (x) (number->string (bitwise-xor (string->number (string-ref x 0)) (string->number\
    \ (string-ref x 1))))) (zip (string-&gt;list a) (string-&gt;list b))) \"\"))\n\
    </code>\n", "  (string-join\n   (map (lambda (x) (number->string (bitwise-xor\
    \ (string->number (car x)) (string->number (cadr x)))))\n        (zip (string-&gt;list\
    \ a) (string-&gt;list b)))\n   \"\"))\n", "  (cond\n    [(empty? a) b]\n    [(empty?\
    \ b) a]\n    [else (string-append (string (bitwise-xor (string-&gt;number (string-ref\
    \ a 0)) (string-&gt;number (string-ref b 0)))) (string_xor (substring a 1) (substring\
    \ b 1)))]))\n", "  (string-join\n   (map (lambda (x) (number->string (bitwise-xor\
    \ (string->number (string-ref x 0)) (string->number (string-ref x 1)))))\n   \
    \     (map list (string->list a) (string->list b)))\n   \"\"))\n", "  (define\
    \ (xor-char a b)\n    (cond ((and (char=? a #\\0) (char=? b #\\0)) #\\0)\n   \
    \       ((and (char=? a #\\1) (char=? b #\\1)) #\\0)\n          (else #\\1)))\n\
    \  (define (xor-string a b)\n    (cond ((string=? a \"\") b)\n          ((string=?\
    \ b \"\") a)\n          (else (string-append (string (xor-char (string-ref a 0)\
    \ (string-ref b 0)))\n                               (xor-string (substring a\
    \ 1) (substring b 1))))))\n  (xor-string a b))\n", "  (string-join (map (lambda\
    \ (x) (number->string (bitwise-xor (string->number (string-ref x 0)) (string->number\
    \ (string-ref x 1))))) (zip (string-&gt;list a) (string-&gt;list b))) \"\"))\n",
  "  (define (xor-char a b)\n    (if (or (and (char=? a #\\1) (char=? b #\\0))\n \
    \           (and (char=? a #\\0) (char=? b #\\1)))\n        #\\1\n        #\\\
    0))\n  (define (xor-string a b)\n    (if (or (string=? a \"\") (string=? b \"\"\
    ))\n        \"\"\n        (string-append (xor-char (string-ref a 0) (string-ref\
    \ b 0))\n                       (xor-string (substring a 1) (substring b 1)))))\n\
    \  (xor-string a b))\n", "  (string-join\n   (map\n    (lambda (x)\n      (number->string\
    \ (bitwise-xor (string->number (string-ref x 0))\n                           \
    \        (string->number (string-ref x 1)))))\n    (string-split (string-append\
    \ a b) \"\"))\n   \"\"))\n", "  (define (xor-char a b)\n    (if (equal? a b)\n\
    \        #\\0\n        #\\1))\n  (string-join\n   (map (lambda (x) (xor-char (car\
    \ x) (cadr x)))\n        (zip (string->list a) (string->list b)))\n   \"\"))\n",
  "  (string-append\n   (if (equal? (string-ref a 0) #\\0)\n       (string-append\
    \ \"0\")\n       (string-append \"1\"))\n   (if (equal? (string-ref a 1) #\\0)\n\
    \       (string-append \"0\")\n       (string-append \"1\"))\n   (if (equal? (string-ref\
    \ a 2) #\\0)\n       (string-append \"0\")\n       (string-append \"1\"))))\n",
  "  (define (xor-char a b)\n    (cond ((and (char=? a #\\0) (char=? b #\\0)) #\\\
    0)\n          ((and (char=? a #\\1) (char=? b #\\1)) #\\0)\n          (else #\\\
    1)))\n  (define (xor-string a b)\n    (cond ((string=? a \"\") b)\n          ((string=?\
    \ b \"\") a)\n          (else (string-append (string (xor-char (string-ref a 0)\
    \ (string-ref b 0)))\n                               (xor-string (substring a\
    \ 1) (substring b 1))))))\n  (xor-string a b))\n", "  (define (xor-char a b)\n\
    \    (if (eq? a b)\n        #\\0\n        #\\1))\n  (string-join (map (lambda\
    \ (x) (xor-char (car x) (cadr x))) (zip (string->list a) (string->list b)))))\n",
  "  (define (xor-char a b)\n    (if (equal? a b)\n        #\\0\n        #\\1))\n\
    \  (string-join (map (lambda (x) (xor-char (car x) (cadr x))) (zip (string->list\
    \ a) (string->list b)))))\n", "  (string-join\n   (map\n    (lambda (x)\n    \
    \  (number->string\n       (bitwise-xor (string->number (string-ref x 0))\n  \
    \                  (string->number (string-ref x 1)))))\n    (map (lambda (x)\
    \ (string x)) (string-split a #\\space)))))\n", "  (string-join (map (lambda (x)\
    \ (number->string (bitwise-xor (string->number (string-ref x 0)) (string->number\
    \ (string-ref x 1))))) (map list (string->list a) (string->list b))) \"\"))\n",
  "  (if (string=? a \"\")\n      b\n      (if (string=? b \"\")\n          a\n  \
    \        (string-append (string (bitwise-xor (string->number (string-take a 1))\
    \ (string->number (string-take b 1))))\n                        (string_xor (string-drop\
    \ a 1) (string-drop b 1))))))\n", "  (string-join (map (lambda (x) (number->string\
    \ (bitwise-xor (string->number (string-ref x 0)) (string->number (string-ref x\
    \ 1))))) (zip (string-&gt;list a) (string-&gt;list b))) \"\"))\n", "  (define\
    \ (xor-char a b)\n    (if (or (and (char=? a #\\1) (char=? b #\\0))\n        \
    \    (and (char=? a #\\0) (char=? b #\\1)))\n        #\\1\n        #\\0))\n  (define\
    \ (xor-string a b)\n    (if (or (string=? a \"\") (string=? b \"\"))\n       \
    \ \"\"\n        (string-append (xor-char (string-ref a 0) (string-ref b 0))\n\
    \                       (xor-string (substring a 1) (substring b 1)))))\n  (xor-string\
    \ a b))\n", "  (string-join (map (lambda (x) (number->string (bitwise-xor (string->number\
    \ (string-ref x 0)) (string->number (string-ref x 1))))) (zip (string-&gt;list\
    \ a) (string-&gt;list b))) \"\"))\n</code>\n", "  (define (xor-char a b)\n   \
    \ (string-&gt;number (number-&gt;string (bitwise-xor (string-&gt;number a) (string-&gt;number\
    \ b)) 2)))\n  (string-join (map xor-char (string-&gt;list a) (string-&gt;list\
    \ b))))\n", "  (define (xor-char a b)\n    (if (equal? a b)\n        #\\0\n  \
    \      #\\1))\n  (define (xor-string a b)\n    (if (equal? (string-length a) 0)\n\
    \        \"\"\n        (string-append (list (xor-char (string-ref a 0) (string-ref\
    \ b 0)))\n                       (xor-string (substring a 1) (substring b 1)))))\n\
    \  (xor-string a b))\n", "  (string-join\n   (map (lambda (x) (number->string\
    \ (bitwise-xor (string->number (string x) 2) (string->number (string (cdr x))\
    \ 2))))\n        (zip (string-&gt;list a) (string-&gt;list b)))\n   \"\"))\n",
  "  (string-join (map (lambda (x) (number->string (bitwise-xor (string->number (string-ref\
    \ x 0)) (string->number (string-ref x 1))))) (map list (string->list a) (string->list\
    \ b))) \"\"))\n", "  (string-join (map (lambda (x) (number->string (bitwise-xor\
    \ (string->number (string x) 2) (string->number (string (cdr x)) 2)))) (zip (string-&gt;list\
    \ a) (string-&gt;list b))) \"\"))\n", "  (define (xor-char a b)\n    (string-&gt;number\
    \ (number-&gt;string (bitwise-xor (string-&gt;number a) (string-&gt;number b))\
    \ 2)))\n  (map (lambda (x) (xor-char (car x) (cadr x))) (zip (string-&gt;list\
    \ a) (string-&gt;list b))))\n", "  (define (xor-char a b)\n    (cond ((and (char=?\
    \ a #\\0) (char=? b #\\0)) #\\0)\n          ((and (char=? a #\\1) (char=? b #\\\
    1)) #\\0)\n          (else #\\1)))\n  (define (xor-string a b)\n    (string-append\
    \ (list (xor-char (string-ref a 0) (string-ref b 0)))\n                   (xor-string\
    \ (substring a 1) (substring b 1))))\n  (if (or (string-null? a) (string-null?\
    \ b))\n      \"\"\n      (xor-string a b)))\n", "  (define (xor-char a b)\n  \
    \  (if (eq? a b)\n        #\\0\n        #\\1))\n  (define (xor-string a b)\n \
    \   (if (or (eq? a #f) (eq? b #f))\n        #f\n        (string-append (string\
    \ (xor-char (string-ref a 0) (string-ref b 0)))\n                       (xor-string\
    \ (substring a 1) (substring b 1)))))\n  (xor-string a b))\n", "  (cond\n    [(empty?\
    \ a) b]\n    [(empty? b) a]\n    [else\n     (string-append\n      (string-append\n\
    \       (string-append\n        (string-append\n         (string-append\n    \
    \      (string-append\n           (string-append\n            (string-append\n\
    \             (string-append\n              (string-append\n               (string-append\n\
    \                (string-append\n                 (string-append\n           \
    \       (string-append\n                   (string-append\n                  \
    \  (string-append\n                     (string-append\n                     \
    \ (string-append\n                       (string-append\n                    \
    \    (string-append\n                         (string-append\n               \
    \           (string-append\n                           (string-append\n      \
    \                      (string-append\n                             (string-append\n\
    \                              (string-append\n                              \
    \ (string-append\n                                (string-append\n           \
    \                      (string-append\n                                  (string-append\n\
    \                                   (string-append\n                         \
    \           (string-append\n                                     (string-append\n\
    \                                      (string-append\n                      \
    \                 (string-append\n                                        (string-append\n\
    \                                         (string-append\n                   \
    \                       (string-append\n                                     \
    \      (string-append\n                                            (string-append\n\
    \                                             (string-append\n               \
    \                               (string-append\n                             \
    \                  (string-append\n                                          \
    \      (string-append\n                                                 (string-append\n\
    \                                                  (string-append\n          \
    \                                         (string-append\n                   \
    \                                 (string-append\n                           \
    \                          (string-append\n                                  \
    \                    (string-append\n                                        \
    \               (string-append\n                                             \
    \           (string-append\n                                                 \
    \        (string-append\n                                                    \
    \      (string-append\n                                                      \
    \     (string-append\n                                                       \
    \     (string-append\n                                                       \
    \      (string-append\n                                                      \
    \        (string-append\n                                                    \
    \           (string-append\n                                                 \
    \               (string-append\n                                             \
    \                    (string-append\n                                        \
    \                          (string-append\n                                  \
    \                                 (string-append\n                           \
    \                                         (string-append\n                   \
    \                                                  (string-append\n          \
    \                                                            (string-append\n\
    \                                ", "  (string-join (map (lambda (x) (if (equal?\
    \ (car x) (cadr x)) \"0\" \"1\")) (zip (string->list a) (string->list b))) \"\"\
    ))\n", "  (define (xor-char a b)\n    (cond\n      [(char=? a #\\0) b]\n     \
    \ [(char=? a #\\1) (if (char=? b #\\0) #\\1 #\\0)]))\n  (apply string (map xor-char\
    \ (string->list a) (string->list b))))\n", "  (define (xor-char a b)\n    (if\
    \ (char=? a b)\n        #\\0\n        #\\1))\n  (define (xor-string a b)\n   \
    \ (if (string=? a \"\")\n        \"\"\n        (string-append (string (xor-char\
    \ (string-ref a 0) (string-ref b 0)))\n                       (xor-string (substring\
    \ a 1) (substring b 1)))))\n  (xor-string a b))\n", "  (define (xor-char a b)\n\
    \    (cond\n      [(char=? a b) #\\0]\n      [else #\\1]))\n  (string-join (map\
    \ (lambda (x) (xor-char (car x) (cadr x))) (zip (string->list a) (string->list\
    \ b))) \"\"))\n", "  (string-join\n   (map\n    (lambda (x)\n      (if (equal?\
    \ (car x) (cadr x))\n          \"0\"\n          \"1\"))\n    (list-ecart a b))\n\
    \   \"\"))\n", "  (string-join (map (lambda (x) (number->string (bitwise-xor (string->number\
    \ (string-ref x 0)) (string->number (string-ref x 1))))) (map list (string->list\
    \ a) (string->list b))) \"\"))\n", "  (string-join\n   (map (lambda (x) (number->string\
    \ (xor (string-&gt;number (string-ref x 0))\n                                \
    \         (string-&gt;number (string-ref x 1)))))\n        (map (lambda (x) (list\
    \ (string-ref a x) (string-ref b x)))\n             (build-list (string-length\
    \ a) (lambda (x) x))))))\n", "  (define (xor-char a b)\n    (if (equal? a b)\n\
    \        #\\0\n        #\\1))\n  (apply string (map xor-char a b)))\n", "  (define\
    \ (xor-char a b)\n    (cond\n      [(char=? a b) #\\0]\n      [else #\\1]))\n\
    \  (string-join (map (lambda (c) (xor-char (car c) (cadr c))) (zip (string->list\
    \ a) (string->list b)))))\n", "  (define (xor-char a b)\n    (cond\n      [(char=?\
    \ a #\\0) (if (char=? b #\\0) #\\0 #\\1)]\n      [(char=? a #\\1) (if (char=?\
    \ b #\\1) #\\0 #\\1)]))\n  (define (xor-string a b)\n    (if (string=? a \"\"\
    )\n        \"\"\n        (string-append (string (xor-char (string-ref a 0) (string-ref\
    \ b 0)))\n                       (xor-string (substring a 1) (substring b 1)))))\n\
    \  (xor-string a b))\n", "  (string-join\n   (map (lambda (x) (number->string\
    \ (bitwise-xor (string->number (string x) 2) (string->number (string (list-ref\
    \ b (string-index x a))) 2))))\n        (string-&gt;list a))\n   \"\"))\n</code>\n",
  "  (define (xor-char a b)\n    (cond ((and (char=? a #\\0) (char=? b #\\0)) #\\\
    0)\n          ((and (char=? a #\\1) (char=? b #\\1)) #\\0)\n          (else #\\\
    1)))\n  (string-map xor-char a b))\n", "  (define (xor-char a b)\n    (cond\n\
    \      [(char=? a #\\0) b]\n      [(char=? a #\\1) (if (char=? b #\\0) #\\1 #\\\
    0)]))\n  (define (xor-chars a b)\n    (if (string-empty? a)\n        \"\"\n  \
    \      (string-append (xor-char (string-ref a 0) (string-ref b 0))\n         \
    \              (xor-chars (string-drop a 1) (string-drop b 1)))))\n  (xor-chars\
    \ a b))\n", "  (string-join\n   (map (lambda (x) (number->string (bitwise-xor\
    \ (string->number (string x) 2) (string->number (string (cdr x)) 2))))\n     \
    \   (zip (string-&gt;list a) (string-&gt;list b)))\n   \"\"))\n", "  (define (xor-char\
    \ a b)\n    (cond\n      [(char=? a #\\0) (if (char=? b #\\0) #\\0 #\\1)]\n  \
    \    [(char=? a #\\1) (if (char=? b #\\1) #\\0 #\\1)]))\n  (define (xor-string\
    \ a b)\n    (if (string=? a \"\") \"\"\n        (string-append (string (xor-char\
    \ (string-ref a 0) (string-ref b 0)))\n                       (xor-string (substring\
    \ a 1) (substring b 1)))))\n  (xor-string a b))\n", "  (define (xor-char a b)\n\
    \    (cond ((and (char=? a #\\0) (char=? b #\\0)) #\\0)\n          ((and (char=?\
    \ a #\\1) (char=? b #\\1)) #\\0)\n          (else #\\1)))\n  (define (xor-string\
    \ a b)\n    (string-append (list (xor-char (string-ref a 0) (string-ref b 0)))\n\
    \                   (xor-string (substring a 1) (substring b 1))))\n  (define\
    \ (xor-string-helper a b)\n    (cond ((string=? a \"\") \"\")\n          ((string=?\
    \ b \"\") \"\")\n          (else (xor-string a b))))\n  (xor-string-helper a b))\n",
  "  (string-join (map (lambda (x) (number->string (bitwise-xor (string->number (string-ref\
    \ x 0)) (string->number (string-ref x 1))))) (map list (string->list a) (string->list\
    \ b))) \"\"))\n", "  (string-join (map (lambda (x) (number->string (logxor (string->number\
    \ (string-ref x 0)) (string-ref x 1)))) (zip (string-&gt;list a) (string-&gt;list\
    \ b))) \"\"))\n", "  (define (xor-char a b)\n    (cond ((and (char=? a #\\0) (char=?\
    \ b #\\0)) #\\0)\n          ((and (char=? a #\\1) (char=? b #\\1)) #\\0)\n   \
    \       (else #\\1)))\n  (string-join (map (lambda (x) (xor-char (car x) (cadr\
    \ x))) (zip (string->list a) (string->list b)))))\n", "  (string-join\n   (map\
    \ (lambda (x) (number->string (bitwise-xor (string->number (string-ref x 0)) (string->number\
    \ (string-ref x 1)))))\n        (map (lambda (x) (list (string-ref a x) (string-ref\
    \ b x)))\n             (build-list (string-length a) (lambda (x) x))))\n   \"\"\
    ))\n", "  (define (xor-char a b)\n    (cond ((and (char=? a #\\0) (char=? b #\\\
    0)) #\\0)\n          ((and (char=? a #\\1) (char=? b #\\1)) #\\0)\n          (else\
    \ #\\1)))\n  (define (xor-string a b)\n    (if (string=? \"\" a)\n        \"\"\
    \n        (string-append (string (xor-char (string-ref a 0) (string-ref b 0)))\n\
    \                       (xor-string (substring a 1) (substring b 1)))))\n  (xor-string\
    \ a b))\n", "  (string-join (map (\u03BB (x) (number->string (bitwise-xor (string->number\
    \ (string-ref x 0)) (string->number (string-ref x 1))))) (zip (string-&gt;list\
    \ a) (string-&gt;list b))) \"\"))\n", "  (cond\n    [(empty? a) b]\n    [(empty?\
    \ b) a]\n    [else (string-append (string (bitwise-xor (string-&gt;number (string-ref\
    \ a 0)) (string-&gt;number (string-ref b 0)))) (string_xor (substring a 1) (substring\
    \ b 1)))]))\n", "  (define (xor-char a b)\n    (if (equal? a b)\n        #\\0\n\
    \        #\\1))\n  (define (xor-string a b)\n    (string-append (list (xor-char\
    \ (string-ref a 0) (string-ref b 0)))\n                   (xor-string (substring\
    \ a 1) (substring b 1))))\n  (if (or (equal? a \"\") (equal? b \"\"))\n      \"\
    \"\n      (xor-string a b)))\n", "  (string-join (map (lambda (x)\n          \
    \            (if (equal? (car x) (cadr x))\n                          \"0\"\n\
    \                          \"1\"))\n                    (list-zip (string->list\
    \ a) (string->list b)))\n               \"\"))\n", "  (string-join\n   (map (lambda\
    \ (x) (number->string (bitwise-xor (string->number (string x) 2) (string->number\
    \ (string (cdr x)) 2))))\n        (zip (string-&gt;list a) (string-&gt;list b)))\n\
    \   \"\"))\n</code>\n", "  (string-join (map (\u03BB (x) (number->string (xor\
    \ (string-&gt;number (string-ref x 0)) (string-&gt;number (string-ref x 1)))))\
    \ (zip (string-&gt;list a) (string-&gt;list b))) \"\"))\n</code>\n", "  (string-join\
    \ (map (lambda (x) (number->string (xor (string-&gt;number (string-ref x 0)) (string-&gt;number\
    \ (string-ref x 1))))) (zip (string-&gt;list a) (string-&gt;list b))) \"\"))\n",
  "  (cond\n    [(empty? a) b]\n    [(empty? b) a]\n    [else\n     (string-append\n\
    \      (string (bitwise-xor (string-&gt;number (string-ref a 0))\n           \
    \                (string-&gt;number (string-ref b 0))))\n      (string_xor (substring\
    \ a 1) (substring b 1)))]))\n", "  (string-append (map (lambda (x) (if (equal?\
    \ (car x) (cadr x)) \"0\" \"1\")) (zip (string->list a) (string->list b)))))\n",
  "  (define (xor-char a b)\n    (if (equal? a b)\n        #\\0\n        #\\1))\n\
    \  (define (xor-string a b)\n    (if (equal? (string-length a) 0)\n        \"\"\
    \n        (string-append (list (xor-char (string-ref a 0) (string-ref b 0)))\n\
    \                       (xor-string (substring a 1) (substring b 1)))))\n  (xor-string\
    \ a b))\n", "  (define (xor-char a b)\n    (if (equal? a b)\n        #\\0\n  \
    \      #\\1))\n  (define (xor-string a b)\n    (if (equal? (string-length a) 0)\n\
    \        \"\"\n        (string-append (list (xor-char (string-ref a 0) (string-ref\
    \ b 0)))\n                       (xor-string (substring a 1) (substring b 1)))))\n\
    \  (xor-string a b))\n", "  (define (xor-char a b)\n    (cond ((and (char=? a\
    \ #\\0) (char=? b #\\0)) #\\0)\n          ((and (char=? a #\\1) (char=? b #\\\
    1)) #\\0)\n          (else #\\1)))\n  (define (xor-string a b)\n    (if (string=?\
    \ a \"\")\n        \"\"\n        (string-append (string (xor-char (string-ref\
    \ a 0) (string-ref b 0)))\n                       (xor-string (substring a 1)\
    \ (substring b 1)))))\n  (xor-string a b))\n", "  (define (xor-char a b)\n   \
    \ (cond ((and (char=? a #\\0) (char=? b #\\0)) #\\0)\n          ((and (char=?\
    \ a #\\1) (char=? b #\\1)) #\\0)\n          (else #\\1)))\n  (string-join (map\
    \ (lambda (x) (xor-char (car x) (cadr x))) (zip (string->list a) (string->list\
    \ b)))))\n", "  (define (xor-char a b)\n    (cond ((and (char=? a #\\0) (char=?\
    \ b #\\0)) #\\0)\n          ((and (char=? a #\\1) (char=? b #\\1)) #\\0)\n   \
    \       (else #\\1)))\n  (define (xor-string a b)\n    (if (string=? a \"\")\n\
    \        \"\"\n        (string-append (string (xor-char (string-ref a 0) (string-ref\
    \ b 0)))\n                       (xor-string (substring a 1) (substring b 1)))))\n\
    \  (xor-string a b))\n", "  (string-append\n   (if (char=? (string-ref a 0) #\\\
    0)\n       (string-append \"0\")\n       (string-append \"1\"))\n   (if (char=?\
    \ (string-ref a 1) #\\0)\n       (string-append \"0\")\n       (string-append\
    \ \"1\"))\n   (if (char=? (string-ref a 2) #\\0)\n       (string-append \"0\"\
    )\n       (string-append \"1\"))))\n", "  (define (xor-char a b)\n    (if (equal?\
    \ a b)\n        #\\0\n        #\\1))\n  (define (xor-string a b)\n    (if (equal?\
    \ (string-length a) 0)\n        \"\"\n        (string-append (string (xor-char\
    \ (string-ref a 0) (string-ref b 0)))\n                       (xor-string (substring\
    \ a 1) (substring b 1)))))\n  (xor-string a b))\n", "  (cond\n    [(empty? a)\
    \ b]\n    [(empty? b) a]\n    [else (string-append (string (bitwise-xor (string-&gt;number\
    \ (string-ref a 0)) (string-&gt;number (string-ref b 0)))) (string_xor (substring\
    \ a 1) (substring b 1)))]))\n</code>\n", "  (string-join\n   (map (lambda (x)\
    \ (number->string (xor (string-&gt;number (string-ref x 0))\n                \
    \                         (string-&gt;number (string-ref x 1)))))\n        (zip\
    \ (string-&gt;list a) (string-&gt;list b)))\n   \"\"))\n</code>\n", "  (string-join\
    \ (map (lambda (x) (number->string (bitwise-xor (string->number (string-ref x\
    \ 0)) (string->number (string-ref x 1))))) (zip (string-&gt;list a) (string-&gt;list\
    \ b))) \"\"))\n", "  (define (xor-char a b)\n    (if (equal? a b)\n        #\\\
    0\n        #\\1))\n  (define (xor-string a b)\n    (if (or (equal? a \"\") (equal?\
    \ b \"\"))\n        \"\"\n        (string-append (list (xor-char (string-ref a\
    \ 0) (string-ref b 0)))\n                      (xor-string (substring a 1) (substring\
    \ b 1)))))\n  (xor-string a b))\n", "  (define (xor-char a b)\n    (if (equal?\
    \ a b)\n        #\\0\n        #\\1))\n  (string-map xor-char a b))\n", "  (define\
    \ (xor-char a b)\n    (if (equal? a b)\n        #\\0\n        #\\1))\n  (string-map\
    \ xor-char a b))\n", "  (define (xor-char a b)\n    (cond ((and (char=? a #\\\
    0) (char=? b #\\0)) #\\0)\n          ((and (char=? a #\\1) (char=? b #\\1)) #\\\
    0)\n          (else #\\1)))\n  (define (xor-string a b)\n    (cond ((string=?\
    \ a \"\") \"\")\n          ((string=? b \"\") \"\")\n          (else (string-append\
    \ (string (xor-char (string-ref a 0) (string-ref b 0)))\n                    \
    \           (xor-string (substring a 1) (substring b 1))))))\n  (xor-string a\
    \ b))\n", "  (define (xor-char a b)\n    (cond ((and (char=? a #\\0) (char=? b\
    \ #\\0)) #\\0)\n          ((and (char=? a #\\1) (char=? b #\\1)) #\\0)\n     \
    \     (else #\\1)))\n  (define (xor-string a b)\n    (if (string=? a \"\")\n \
    \       \"\"\n        (string-append (string (xor-char (string-ref a 0) (string-ref\
    \ b 0)))\n                       (xor-string (substring a 1) (substring b 1)))))\n\
    \  (xor-string a b))\n", "  (define (xor-char c1 c2)\n    (if (char=? c1 c2)\n\
    \        #\\0\n        #\\1))\n  (define (xor-string s1 s2)\n    (if (or (string=?\
    \ s1 \"\") (string=? s2 \"\"))\n        \"\"\n        (string-append (string (xor-char\
    \ (string-ref s1 0) (string-ref s2 0)))\n                      (xor-string (substring\
    \ s1 1) (substring s2 1)))))\n  (xor-string a b))\n", "  (define (xor-char a b)\n\
    \    (cond ((and (char=? a #\\0) (char=? b #\\0)) #\\0)\n          ((and (char=?\
    \ a #\\1) (char=? b #\\1)) #\\0)\n          (else #\\1)))\n  (define (xor-string\
    \ a b)\n    (cond ((and (string=? a \"\") (string=? b \"\")) \"\")\n         \
    \ (else (string-append (string (xor-char (string-ref a 0) (string-ref b 0)))\n\
    \                               (xor-string (substring a 1) (substring b 1))))))\n\
    \  (xor-string a b))\n", "  (define (xor-char a b)\n    (if (equal? a b)\n   \
    \     #\\0\n        #\\1))\n  (define (xor-string a b)\n    (if (equal? (string-length\
    \ a) 0)\n        \"\"\n        (string-append (string (xor-char (string-ref a\
    \ 0) (string-ref b 0)))\n                       (xor-string (substring a 1) (substring\
    \ b 1)))))\n  (xor-string a b))\n", "  (string-join (map (lambda (x) (number->string\
    \ (xor (string-&gt;number (string-ref x 0)) (string-&gt;number (string-ref x 1)))))\
    \ (zip (string-&gt;list a) (string-&gt;list b))) \"\"))\n</code>\n", "  (cond\
    \ [(string=? a \"\") b]\n        [(string=? b \"\") a]\n        [else (string-append\
    \ (string_xor (substring a 1) (substring b 1))\n                             (string\
    \ (bitwise-xor (string-&gt;number (substring a 0 1))\n                       \
    \                           (string-&gt;number (substring b 0 1)))))]))\n</code>\n",
  "  (string-join\n   (map (lambda (x) (number->string (logxor (string->number (string\
    \ x) 2)\n                                           (string->number (string (cdr\
    \ x)) 2))))\n        (zip (string-&gt;list a) (string-&gt;list b)))\n   \"\"))\n",
  "  (define (xor-char a b)\n    (if (equal? a b)\n        #\\0\n        #\\1))\n\
    \  (define (xor-string a b)\n    (if (or (equal? (string-length a) 0)\n      \
    \      (equal? (string-length b) 0))\n        \"\"\n        (string-append (string\
    \ (xor-char (string-ref a 0) (string-ref b 0)))\n                       (xor-string\
    \ (substring a 1) (substring b 1)))))\n  (xor-string a b))\n", "  (define (xor-char\
    \ a b)\n    (cond\n      [(char=? a #\\0) b]\n      [(char=? a #\\1) (if (char=?\
    \ b #\\0) #\\1 #\\0)]))\n  (string-join (map (lambda (a b) (xor-char a b)) (string->list\
    \ a) (string->list b))))\n", "  (cond\n    [(empty? a) b]\n    [(empty? b) a]\n\
    \    [else (string-append (string (bitwise-xor (string-&gt;number (string-ref\
    \ a 0)) (string-&gt;number (string-ref b 0)))) (string_xor (substring a 1) (substring\
    \ b 1)))]))\n", "  (define (xor-char a b)\n    (cond [(char=? a #\\0) b]\n   \
    \       [(char=? a #\\1) (if (char=? b #\\0) #\\1 #\\0)]\n          [(char=? b\
    \ #\\0) a]\n          [(char=? b #\\1) (if (char=? a #\\0) #\\1 #\\0)]))\n  (define\
    \ (xor-string a b)\n    (if (string=? a \"\")\n        b\n        (if (string=?\
    \ b \"\")\n            a\n            (string-append (string (xor-char (string-ref\
    \ a 0) (string-ref b 0)))\n                           (xor-string (substring a\
    \ 1) (substring b 1))))))\n  (xor-string a b))\n", "  (string-join\n   (map (lambda\
    \ (x) (number->string (bitwise-xor (string->number (string x) 2) (string->number\
    \ (string (cdr x)) 2))))\n        (zip (string-&gt;list a) (string-&gt;list b)))\n\
    \   \"\"))\n", "  (apply string (map (lambda (x y) (if (equal? x y) #\\0 #\\1))\
    \ a b)))\n", "  (string-join (map (lambda (x) (number->string (bitwise-xor (string->number\
    \ (string-ref x 0)) (string->number (string-ref x 1))))) (zip (string-&gt;list\
    \ a) (string-&gt;list b))) \"\"))\n</code>\n", "  (cond\n    [(empty? a) b]\n\
    \    [(empty? b) a]\n    [else (string-append (string (bitwise-xor (string-&gt;number\
    \ (string-ref a 0)) (string-&gt;number (string-ref b 0)))) (string_xor (substring\
    \ a 1) (substring b 1)))]))\n</code>\n", "  (if (or (string=? a \"\") (string=?\
    \ b \"\"))\n      \"\"\n      (string-append\n       (string (bitwise-xor (string-&gt;number\
    \ (string-take a 1))\n                            (string-&gt;number (string-take\
    \ b 1))))\n       (string_xor (string-drop a 1) (string-drop b 1)))))\n</code>\n",
  "  (define (xor-char a b)\n    (if (equal? a b)\n        #\\0\n        #\\1))\n\
    \  (define (xor-string a b)\n    (if (or (equal? #f a) (equal? #f b))\n      \
    \  \"\"\n        (string-append (string (xor-char (string-ref a 0) (string-ref\
    \ b 0)))\n                       (xor-string (substring a 1) (substring b 1)))))\n\
    \  (xor-string a b))\n", "  (define (xor-char a b)\n    (if (char=? a b)\n   \
    \     #\\0\n        #\\1))\n  (define (xor-string a b)\n    (string-append (string\
    \ (xor-char (string-ref a 0) (string-ref b 0)))\n                   (xor-string\
    \ (substring a 1) (substring b 1))))\n  (if (string=? a \"\")\n      b\n     \
    \ (xor-string a b)))\n", "  (string-join (map (lambda (x) (number->string (bitwise-xor\
    \ (string->number (string-ref x 0)) (string->number (string-ref x 1))))) (zip\
    \ (string-&gt;list a) (string-&gt;list b))) \"\"))\n</code>\n", "  (define (xor-char\
    \ a b)\n    (if (char=? a b)\n        #\\0\n        #\\1))\n  (define (xor-chars\
    \ a b)\n    (if (or (string-null? a) (string-null? b))\n        \"\"\n       \
    \ (string-append (string (xor-char (string-ref a 0) (string-ref b 0)))\n     \
    \                  (xor-chars (substring a 1) (substring b 1)))))\n  (xor-chars\
    \ a b))\n", "  (let ([a (string->list a)]\n        [b (string->list b)])\n   \
    \ (string-join (map (lambda (x y) (if (equal? x y) #\\0 #\\1)) a b))))\n", " \
    \ (define (xor-char a b)\n    (if (equal? a b)\n        #\\0\n        #\\1))\n\
    \  (string-map xor-char a b))\n", "  (define (xor-char a b)\n    (if (eq? a b)\n\
    \        #\\0\n        #\\1))\n  (define (xor-string a b)\n    (if (or (eq? a\
    \ \"\") (eq? b \"\"))\n        \"\"\n        (string-append (string (xor-char\
    \ (string-ref a 0) (string-ref b 0)))\n                       (xor-string (substring\
    \ a 1) (substring b 1)))))\n  (xor-string a b))\n", "  (define (xor-char a b)\n\
    \    (if (equal? a b)\n        #\\0\n        #\\1))\n  (define (xor-string a b)\n\
    \    (if (or (empty? a) (empty? b))\n        \"\"\n        (string-append (list\
    \ (xor-char (string-ref a 0) (string-ref b 0)))\n                       (xor-string\
    \ (substring a 1) (substring b 1)))))\n  (xor-string a b))\n", "  (define (xor-chars\
    \ a b)\n    (if (or (char=? a #\\0) (char=? b #\\0))\n        (if (or (char=?\
    \ a #\\1) (char=? b #\\1))\n            #\\1\n            #\\0)\n        (if (or\
    \ (char=? a #\\1) (char=? b #\\1))\n            #\\0\n            #\\1)))\n  (define\
    \ (xor-strings a b)\n    (if (string=? a \"\")\n        \"\"\n        (string-append\
    \ (string (xor-chars (string-ref a 0) (string-ref b 0)))\n                   \
    \    (xor-strings (substring a 1) (substring b 1)))))\n  (xor-strings a b))\n",
  "  (string-join (map (lambda (x) (if (equal? (car x) (cadr x)) \"0\" \"1\")) (zip\
    \ (string->list a) (string->list b))) \"\"))\n", "  (string-join (map (\u03BB\
    \ (x) (if (equal? (car x) (cadr x)) \"0\" \"1\")) (zip (string->list a) (string->list\
    \ b))) \"\"))\n", "  (string-join (map (lambda (x) (number->string (bitwise-xor\
    \ (string->number (string-ref x 0)) (string->number (string-ref x 1))))) (map\
    \ list (string->list a) (string->list b))) \"\"))\n", "  (string-join\n   (map\
    \ (lambda (x) (number->string (bitwise-xor (string->number (string x) 2) (string->number\
    \ (string x) 2))))\n        (string-&gt;list a))\n   \"\"))\n</code>\n", "  (define\
    \ (xor-char a b)\n    (if (equal? a b)\n        #\\0\n        #\\1))\n  (define\
    \ (xor-string a b)\n    (if (equal? (string-length a) 0)\n        \"\"\n     \
    \   (string-append (list (xor-char (string-ref a 0) (string-ref b 0)))\n     \
    \                  (xor-string (substring a 1) (substring b 1)))))\n  (xor-string\
    \ a b))\n", "  (string-join (map (lambda (x) (if (equal? (car x) (cadr x)) \"\
    0\" \"1\")) (zip (string->list a) (string->list b))) \"\"))\n", "  (string-join\
    \ (map (lambda (x) (if (equal? (car x) (cadr x)) \"0\" \"1\")) (zip (string->list\
    \ a) (string->list b))) \"\"))\n", "  (cond [(string=? a \"\") b]\n        [(string=?\
    \ b \"\") a]\n        [else (string-append (string_xor (substring a 1) (substring\
    \ b 1))\n                             (number->string (modulo (+ (string-&gt;number\
    \ (substring a 0 1))\n                                                       \
    \  (string-&gt;number (substring b 0 1)))\n                                  \
    \                     2)))]))\n", "  (define (xor-char a b)\n    (cond ((and (char=?\
    \ a #\\0) (char=? b #\\0)) #\\0)\n          ((and (char=? a #\\1) (char=? b #\\\
    1)) #\\0)\n          (else #\\1)))\n  (define (xor-string a b)\n    (if (string=?\
    \ a \"\")\n        \"\"\n        (string-append (list (xor-char (string-ref a\
    \ 0) (string-ref b 0)))\n                       (xor-string (substring a 1) (substring\
    \ b 1)))))\n  (xor-string a b))\n", "  (string-join (map (lambda (x) (number->string\
    \ (xor (string-&gt;number (string-ref x 0)) (string-&gt;number (string-ref x 1)))))\
    \ (zip (string-&gt;list a) (string-&gt;list b))) \"\"))\n", "  (define (xor-char\
    \ a b)\n    (if (or (and (char=? a #\\1) (char=? b #\\0))\n            (and (char=?\
    \ a #\\0) (char=? b #\\1)))\n        #\\1\n        #\\0))\n  (define (xor-string\
    \ a b)\n    (if (string=? a \"\")\n        \"\"\n        (string-append (string\
    \ (xor-char (string-ref a 0) (string-ref b 0)))\n                       (xor-string\
    \ (substring a 1) (substring b 1)))))\n  (xor-string a b))\n", "  (define (xor-char\
    \ a b)\n    (cond\n      [(char=? a b) #\\0]\n      [else #\\1]))\n  (define (xor-string\
    \ a b)\n    (string-append (string (xor-char (string-ref a 0) (string-ref b 0)))\n\
    \                   (xor-string (substring a 1) (substring b 1))))\n  (if (string=?\
    \ a \"\")\n      b\n      (xor-string a b)))\n", "  (define (xor-char a b)\n \
    \   (cond\n      [(char=? a b) \"0\"]\n      [else \"1\"]))\n  (apply string (map\
    \ xor-char a b)))\n", "  (cond\n    [(empty? a) b]\n    [(empty? b) a]\n    [else\n\
    \     (string-append\n      (string-append\n       (string-append\n        (string-append\n\
    \         (string-append\n          (string-append\n           (string-append\n\
    \            (string-append\n             (string-append\n              (string-append\n\
    \               (string-append\n                (string-append\n             \
    \    (string-append\n                  (string-append\n                   (string-append\n\
    \                    (string-append\n                     (string-append\n   \
    \                   (string-append\n                       (string-append\n  \
    \                      (string-append\n                         (string-append\n\
    \                          (string-append\n                           (string-append\n\
    \                            (string-append\n                             (string-append\n\
    \                              (string-append\n                              \
    \ (string-append\n                                (string-append\n           \
    \                      (string-append\n                                  (string-append\n\
    \                                   (string-append\n                         \
    \           (string-append\n                                     (string-append\n\
    \                                      (string-append\n                      \
    \                 (string-append\n                                        (string-append\n\
    \                                         (string-append\n                   \
    \                       (string-append\n                                     \
    \      (string-append\n                                            (string-append\n\
    \                                             (string-append\n               \
    \                               (string-append\n                             \
    \                  (string-append\n                                          \
    \      (string-append\n                                                 (string-append\n\
    \                                                  (string-append\n          \
    \                                         (string-append\n                   \
    \                                 (string-append\n                           \
    \                          (string-append\n                                  \
    \                    (string-append\n                                        \
    \               (string-append\n                                             \
    \           (string-append\n                                                 \
    \        (string-append\n                                                    \
    \      (string-append\n                                                      \
    \     (string-append\n                                                       \
    \     (string-append\n                                                       \
    \      (string-append\n                                                      \
    \        (string-append\n                                                    \
    \           (string-append\n                                                 \
    \               (string-append\n                                             \
    \                    (string-append\n                                        \
    \                          (string-append\n                                  \
    \                                 (string-append\n                           \
    \                                         (string-append\n                   \
    \                                                  (string-append\n          \
    \                                                            (string-append\n\
    \                                ", "  (define (xor-char a b)\n    (if (equal?\
    \ a b)\n        #\\0\n        #\\1))\n  (define (xor-string a b)\n    (if (equal?\
    \ (string-length a) 0)\n        \"\"\n        (string-append (string (xor-char\
    \ (string-ref a 0) (string-ref b 0)))\n                       (xor-string (substring\
    \ a 1) (substring b 1)))))\n  (xor-string a b))\n", "  (define (xor-char a b)\n\
    \    (if (equal? a b)\n        #\\0\n        #\\1))\n  (string-join (map (lambda\
    \ (x) (xor-char (car x) (cadr x))) (zip (string->list a) (string->list b)))))\n",
  "  (define (xor-char a b)\n    (if (or (and (char=? a #\\1) (char=? b #\\0))\n \
    \           (and (char=? a #\\0) (char=? b #\\1)))\n        #\\1\n        #\\\
    0))\n  (define (xor-string a b)\n    (if (or (string=? a \"\") (string=? b \"\"\
    ))\n        \"\"\n        (string-append (string (xor-char (string-ref a 0) (string-ref\
    \ b 0)))\n                       (xor-string (substring a 1) (substring b 1)))))\n\
    \  (xor-string a b))\n", "  (define (xor-char a b)\n    (if (or (and (char=? a\
    \ #\\1) (char=? b #\\0))\n            (and (char=? a #\\0) (char=? b #\\1)))\n\
    \        #\\1\n        #\\0))\n  (define (xor-string a b)\n    (if (or (string=?\
    \ a \"\") (string=? b \"\"))\n        \"\"\n        (string-append (string (xor-char\
    \ (string-ref a 0) (string-ref b 0)))\n                       (xor-string (substring\
    \ a 1) (substring b 1)))))\n  (xor-string a b))\n", "  (define (xor-char a b)\n\
    \    (if (eq? a b)\n        #\\0\n        #\\1))\n  (string-map xor-char a b))\n",
  "  (define (xor-char a b)\n    (cond ((and (char=? a #\\0) (char=? b #\\0)) #\\\
    0)\n          ((and (char=? a #\\1) (char=? b #\\1)) #\\0)\n          (else #\\\
    1)))\n  (define (xor-string a b)\n    (if (string=? a \"\")\n        \"\"\n  \
    \      (string-append (string (xor-char (string-ref a 0) (string-ref b 0)))\n\
    \                       (xor-string (substring a 1) (substring b 1)))))\n  (xor-string\
    \ a b))\n", "  (define (xor a b)\n    (if (and a b)\n        #f\n        (or a\
    \ b)))\n  (define (xor-string a b)\n    (if (and (not (null? a)) (not (null? b)))\n\
    \        (cons (xor (car a) (car b)) (xor-string (cdr a) (cdr b)))\n        '()))\n\
    \  (string-&gt;list (list-&gt;string (xor-string (string-&gt;list a) (string-&gt;list\
    \ b)))))\n</code>\n", "  (define (xor-char a b)\n    (if (char=? a b)\n      \
    \  #\\0\n        #\\1))\n  (define (xor-string a b)\n    (if (string=? a \"\"\
    )\n        \"\"\n        (string-append (string (xor-char (string-ref a 0) (string-ref\
    \ b 0)))\n                       (xor-string (substring a 1) (substring b 1)))))\n\
    \  (xor-string a b))\n", "  (define (xor-char a b)\n    (cond ((and (char=? a\
    \ #\\0) (char=? b #\\0)) #\\0)\n          ((and (char=? a #\\1) (char=? b #\\\
    1)) #\\0)\n          (else #\\1)))\n  (define (xor-string a b)\n    (if (or (string=?\
    \ a \"\") (string=? b \"\"))\n        \"\"\n        (string-append (string (xor-char\
    \ (string-ref a 0) (string-ref b 0)))\n                       (xor-string (substring\
    \ a 1) (substring b 1)))))\n  (xor-string a b))\n", "  (define (xor-char a b)\n\
    \    (if (and (char=? a #\\1) (char=? b #\\0))\n        #\\1\n        (if (and\
    \ (char=? a #\\0) (char=? b #\\1))\n            #\\1\n            #\\0)))\n  (if\
    \ (or (string=? a \"\") (string=? b \"\"))\n      \"\"\n      (string-append (string\
    \ (xor-char (string-ref a 0) (string-ref b 0)))\n                     (string_xor\
    \ (substring a 1) (substring b 1)))))\n", "  (string-join\n   (map (\u03BB (x)\
    \ (number->string (bitwise-xor (string->number (string x) 2)\n               \
    \                             (string->number (string (cdr x)) 2))))\n       \
    \ (zip (string-&gt;list a) (string-&gt;list b)))\n   \"\"))\n", "  (string-join\
    \ (map (\u03BB (x) (number->string (xor (string-&gt;number (string-ref x 0)) (string-&gt;number\
    \ (string-ref x 1))))) (map list (string-&gt;list a) (string-&gt;list b))) \"\"\
    ))\n</code>\n", "  (cond\n    [(empty? a) b]\n    [(empty? b) a]\n    [else\n\
    \     (string-append\n      (string-append\n       (string-append\n        (string-append\n\
    \         (string-append\n          (string-append\n           (string-append\n\
    \            (string-append\n             (string-append\n              (string-append\n\
    \               (string-append\n                (string-append\n             \
    \    (string-append\n                  (string-append\n                   (string-append\n\
    \                    (string-append\n                     (string-append\n   \
    \                   (string-append\n                       (string-append\n  \
    \                      (string-append\n                         (string-append\n\
    \                          (string-append\n                           (string-append\n\
    \                            (string-append\n                             (string-append\n\
    \                              (string-append\n                              \
    \ (string-append\n                                (string-append\n           \
    \                      (string-append\n                                  (string-append\n\
    \                                   (string-append\n                         \
    \           (string-append\n                                     (string-append\n\
    \                                      (string-append\n                      \
    \                 (string-append\n                                        (string-append\n\
    \                                         (string-append\n                   \
    \                       (string-append\n                                     \
    \      (string-append\n                                            (string-append\n\
    \                                             (string-append\n               \
    \                               (string-append\n                             \
    \                  (string-append\n                                          \
    \      (string-append\n                                                 (string-append\n\
    \                                                  (string-append\n          \
    \                                         (string-append\n                   \
    \                                 (string-append\n                           \
    \                          (string-append\n                                  \
    \                    (string-append\n                                        \
    \               (string-append\n                                             \
    \           (string-append\n                                                 \
    \        (string-append\n                                                    \
    \      (string-append\n                                                      \
    \     (string-append\n                                                       \
    \     (string-append\n                                                       \
    \      (string-append\n                                                      \
    \        (string-append\n                                                    \
    \           (string-append\n                                                 \
    \               (string-append\n                                             \
    \                    (string-append\n                                        \
    \                          (string-append\n                                  \
    \                                 (string-append\n                           \
    \                                         (string-append\n                   \
    \                                                  (string-append\n          \
    \                                                            (string-append\n\
    \                                ", "  (string-join (map (\u03BB (x) (number->string\
    \ (bitwise-xor (string->number (string x) 2) (string->number (string (cdr x))\
    \ 2)))) (zip (string-&gt;list a) (string-&gt;list b))) \"\"))\n", "  (string-join\
    \ (map (lambda (x) (number->string (xor (string-&gt;number (string-ref x 0)) (string-&gt;number\
    \ (string-ref x 1))))) (zip (string-&gt;list a) (string-&gt;list b))) \"\"))\n\
    </code>\n", "  (define (xor-char a b)\n    (cond ((and (char=? a #\\0) (char=?\
    \ b #\\0)) #\\0)\n          ((and (char=? a #\\1) (char=? b #\\1)) #\\0)\n   \
    \       (else #\\1)))\n  (define (xor-string a b)\n    (if (or (string-null? a)\
    \ (string-null? b))\n        \"\"\n        (string-append (string (xor-char (string-ref\
    \ a 0) (string-ref b 0)))\n                       (xor-string (substring a 1)\
    \ (substring b 1)))))\n  (xor-string a b))\n", "  (define (xor-char a b)\n   \
    \ (if (equal? a b)\n        #\\0\n        #\\1))\n  (define (xor-string a b)\n\
    \    (if (empty? a)\n        \"\"\n        (string-append (list (xor-char (string-ref\
    \ a 0) (string-ref b 0)))\n                       (xor-string (substring a 1)\
    \ (substring b 1)))))\n  (xor-string a b))\n", "  (let loop ([a (string->list\
    \ a)]\n             [b (string->list b)]\n             [result '()])\n    (cond\
    \ [(empty? a) (list->string (reverse result))]\n          [(empty? b) (list->string\
    \ (reverse result))]\n          [else\n           (let ([x (car a)]\n        \
    \         [y (car b)])\n             (cond [(equal? x y)\n                   \
    \ (loop (cdr a) (cdr b) (cons #\\0 result))]\n                   [else\n     \
    \               (loop (cdr a) (cdr b) (cons #\\1 result))]))])))\n", "  (define\
    \ (xor-char a b)\n    (if (equal? a b) \"0\" \"1\"))\n  (string-join (map (curryr\
    \ xor-char) a b)))\n", "  (string-join (map (lambda (x) (number->string (bitwise-xor\
    \ (string->number (string-ref x 0)) (string->number (string-ref x 1))))) (map\
    \ list (string->list a) (string->list b))) \"\"))\n", "  (define (xor-char a b)\n\
    \    (if (or (and (equal? a #\\1) (equal? b #\\0))\n            (and (equal? a\
    \ #\\0) (equal? b #\\1)))\n        #\\1\n        #\\0))\n  (define (xor-string\
    \ a b)\n    (if (and (not (empty? a)) (not (empty? b)))\n        (cons (xor-char\
    \ (first a) (first b))\n              (xor-string (rest a) (rest b)))\n      \
    \  '()))\n  (string-&gt;list (xor-string (string-&gt;list a) (string-&gt;list\
    \ b))))\n", "  (string-join (map (lambda (x) (number->string (bitwise-xor (string->number\
    \ (string-ref x 0)) (string->number (string-ref x 1))))) (zip (string-&gt;list\
    \ a) (string-&gt;list b))) \"\"))\n", "  (string-join (map (lambda (x) (number->string\
    \ (bitwise-xor (string->number (string-ref x 0)) (string->number (string-ref x\
    \ 1))))) (zip (string-&gt;list a) (string-&gt;list b))) \"\"))\n</code>\n", " \
    \ (string-join\n   (map (lambda (x) (number->string (bitwise-xor (string->number\
    \ (string x) 2) (string->number (string (cdr x)) 2))))\n        (zip (string-&gt;list\
    \ a) (string-&gt;list b)))\n   \"\"))\n</code>\n"]
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
