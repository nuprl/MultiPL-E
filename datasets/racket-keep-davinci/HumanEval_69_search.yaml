name: HumanEval_69_search
language: racket
prompt: "#lang racket\n\n;; You are given a non-empty list of positive integers. Return\
  \ the greatest integer that is greater than \n;; zero, and has a frequency greater\
  \ than or equal to the value of the integer itself. \n;; The frequency of an integer\
  \ is the number of times it appears in the list.\n;; If no such a value exist, return\
  \ -1.\n;; Examples:\n;; search([4, 1, 2, 2, 3, 1]) == 2\n;; search([1, 2, 2, 3,\
  \ 3, 3, 4, 4, 4]) == 3\n;; search([5, 5, 4, 4, 4]) == -1\n(define (search lst)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate search))\n\
  \    (check-equal? (candidate (list 5 5 5 5 1)) 1)\n    (check-equal? (candidate\
  \ (list 4 1 4 1 4 4)) 4)\n    (check-equal? (candidate (list 3 3)) -1)\n    (check-equal?\
  \ (candidate (list 8 8 8 8 8 8 8 8)) 8)\n    (check-equal? (candidate (list 2 3\
  \ 3 2 2)) 2)\n    (check-equal? (candidate (list 2 7 8 8 4 8 7 3 9 6 5 10 4 3 6\
  \ 7 1 7 4 10 8 1)) 1)\n    (check-equal? (candidate (list 3 2 8 2)) 2)\n    (check-equal?\
  \ (candidate (list 6 7 1 8 8 10 5 8 5 3 10)) 1)\n    (check-equal? (candidate (list\
  \ 8 8 3 6 5 6 4)) -1)\n    (check-equal? (candidate (list 6 9 6 7 1 4 7 1 8 8 9\
  \ 8 10 10 8 4 10 4 10 1 2 9 5 7 9)) 1)\n    (check-equal? (candidate (list 1 9 10\
  \ 1 3)) 1)\n    (check-equal? (candidate (list 6 9 7 5 8 7 5 3 7 5 10 10 3 6 10\
  \ 2 8 6 5 4 9 5 3 10)) 5)\n    (check-equal? (candidate (list 1)) 1)\n    (check-equal?\
  \ (candidate (list 8 8 10 6 4 3 5 8 2 4 2 8 4 6 10 4 2 1 10 2 1 1 5)) 4)\n    (check-equal?\
  \ (candidate (list 2 10 4 8 2 10 5 1 2 9 5 5 6 3 8 6 4 10)) 2)\n    (check-equal?\
  \ (candidate (list 1 6 10 1 6 9 10 8 6 8 7 3)) 1)\n    (check-equal? (candidate\
  \ (list 9 2 4 1 5 1 5 2 5 7 7 7 3 10 1 5 4 2 8 4 1 9 10 7 10 2 8 10 9 4)) 4)\n \
  \   (check-equal? (candidate (list 2 6 4 2 8 7 5 6 4 10 4 6 3 7 8 8 3 1 4 2 2 10\
  \ 7)) 4)\n    (check-equal? (candidate (list 9 8 6 10 2 6 10 2 7 8 10 3 8 2 6 2\
  \ 3 1)) 2)\n    (check-equal? (candidate (list 5 5 3 9 5 6 3 2 8 5 6 10 10 6 8 4\
  \ 10 7 7 10 8)) -1)\n    (check-equal? (candidate (list 10)) -1)\n    (check-equal?\
  \ (candidate (list 9 7 7 2 4 7 2 10 9 7 5 7 2)) 2)\n    (check-equal? (candidate\
  \ (list 5 4 10 2 1 1 10 3 6 1 8)) 1)\n    (check-equal? (candidate (list 7 9 9 9\
  \ 3 4 1 5 9 1 2 1 1 10 7 5 6 7 6 7 7 6)) 1)\n    (check-equal? (candidate (list\
  \ 3 10 10 9 2)) -1)\n))\n\n(test-humaneval)"
completions: ["  (let ([max (apply max lst)])\n    (for/first ([i (in-range 1 (add1\
    \ max))])\n      (and (>= (count i lst) i) i))))\n", "  (let ([freq (make-hash)])\n\
    \    (for ([x lst])\n      (hash-update! freq x add1 0))\n    (let ([max-freq\
    \ (apply max (hash-values freq))])\n      (for/first ([x lst]\n              \
    \    #:when (>= (hash-ref freq x 0) x)\n                  #:when (> x max-freq))\n\
    \        x))))\n", "  (define (greatest-freq lst)\n    (define (greatest-freq-helper\
    \ lst acc)\n      (cond [(empty? lst) acc]\n            [(>= (length (filter (lambda\
    \ (x) (= x (first lst))) lst)) (first lst))\n             (greatest-freq-helper\
    \ (rest lst) (first lst))]\n            [else (greatest-freq-helper (rest lst)\
    \ acc)]))\n    (greatest-freq-helper lst -1))\n  (greatest-freq lst))\n", "  (define\
    \ (freq x lst)\n    (cond\n      [(empty? lst) 0]\n      [(= x (first lst)) (+\
    \ 1 (freq x (rest lst)))]\n      [else (freq x (rest lst))]))\n  (define (greatest-freq\
    \ lst)\n    (cond\n      [(empty? lst) 0]\n      [(> (freq (first lst) lst) (first\
    \ lst)) (first lst)]\n      [else (greatest-freq (rest lst))]))\n  (define (greatest-freq-2\
    \ lst)\n    (cond\n      [(empty? lst) 0]\n      [(> (freq (first lst) lst) (first\
    \ lst)) (first lst)]\n      [(= (freq (first lst) lst) (first lst)) (first lst)]\n\
    \      [else (greatest-freq-2 (rest lst))]))\n  (cond\n    [(= (greatest-freq\
    \ lst) 0) -1]\n    [(= (greatest-freq-2 lst) 0) -1]\n    [else (greatest-freq-2\
    \ lst)]))\n</code>\nI have two functions, <code>greatest-freq</code> and <code>greatest-freq-2</code>.\
    \ The first one returns the greatest integer that is greater than zero, and has\
    \ a frequency greater than the value of the integer itself. The second one returns\
    \ the greatest integer that is greater than zero, and has a frequency greater\
    \ than or equal to the value of the integer itself.\nI have a third function,\
    \ <code>search</code>, which calls <code>greatest-freq</code> and <code>greatest-freq-2</code>.\
    \ If <code>greatest-freq</code> returns 0, then <code>search</code> returns -1.\
    \ If <code>greatest-freq-2</code> returns 0, then <code>search</code> returns\
    \ -1. Otherwise, <code>search</code> returns the value returned by <code>greatest-freq-2</code>.\n\
    I am new to Racket and functional programming.", "  (define (search-helper lst)\n\
    \    (cond [(empty? lst) -1]\n          [(>= (count (first lst) lst) (first lst))\
    \ (first lst)]\n          [else (search-helper (rest lst))]))\n  (search-helper\
    \ (sort > lst)))\n", "  (define (freq x lst)\n    (cond\n      [(empty? lst) 0]\n\
    \      [(= x (first lst)) (+ 1 (freq x (rest lst)))]\n      [else (freq x (rest\
    \ lst))]))\n  (define (search-helper lst)\n    (cond\n      [(empty? lst) -1]\n\
    \      [(>= (freq (first lst) lst) (first lst)) (first lst)]\n      [else (search-helper\
    \ (rest lst))]))\n  (search-helper (sort lst <)))\n", "  (let ([freq (make-hash)])\n\
    \    (for ([x lst])\n      (hash-update! freq x add1 0))\n    (let ([max-freq\
    \ (apply max (hash-values freq))])\n      (for ([x lst])\n        (when (and (>\
    \ x 0) (= (hash-ref freq x 0) x))\n          (return x)))\n      (for ([x lst])\n\
    \        (when (and (> x 0) (>= (hash-ref freq x 0) x) (<= (hash-ref freq x 0)\
    \ max-freq))\n          (return x)))\n      -1)))\n", "  (let ([freq (make-hash)])\n\
    \    (for ([x lst])\n      (hash-set! freq x (+ 1 (hash-ref freq x 0))))\n   \
    \ (let ([max-freq 0]\n          [max-freq-val -1])\n      (for ([x lst])\n   \
    \     (let ([f (hash-ref freq x 0)])\n          (when (and (>= f x)\n        \
    \             (> f max-freq))\n            (set! max-freq f)\n            (set!\
    \ max-freq-val x))))\n      max-freq-val)))\n</code>\n", "  (let ([max-freq (apply\
    \ max (map (lambda (x) (length (filter (lambda (y) (= x y)) lst))) lst))])\n \
    \   (if (= max-freq 1)\n        -1\n        (apply max (filter (lambda (x) (=\
    \ (length (filter (lambda (y) (= x y)) lst)) x)) lst)))))\n", "  (let ([freq (make-hash)])\n\
    \    (for ([i lst])\n      (hash-set! freq i (add1 (hash-ref freq i 0))))\n  \
    \  (let ([max-freq (apply max (hash-values freq))])\n      (for ([i (in-list lst)])\n\
    \        (when (and (> i 0) (>= (hash-ref freq i 0) i) (= (hash-ref freq i 0)\
    \ max-freq))\n          (return i))))\n    -1))\n", "  (let ([max-freq (apply\
    \ max (map (lambda (x) (length (filter (lambda (y) (= x y)) lst))) lst))])\n \
    \   (if (= max-freq 0)\n        -1\n        (apply max (filter (lambda (x) (and\
    \ (> x 0) (>= (length (filter (lambda (y) (= x y)) lst)) x))) lst)))))\n", " \
    \ (define (freq x lst)\n    (cond\n      [(empty? lst) 0]\n      [(= x (first\
    \ lst)) (+ 1 (freq x (rest lst)))]\n      [else (freq x (rest lst))]))\n  (define\
    \ (search-helper lst)\n    (cond\n      [(empty? lst) -1]\n      [(>= (freq (first\
    \ lst) lst) (first lst)) (first lst)]\n      [else (search-helper (rest lst))]))\n\
    \  (search-helper (sort > lst)))\n", "  (let ([max-freq (apply max (map (lambda\
    \ (x) (length (filter (lambda (y) (= x y)) lst))) lst))])\n    (if (= max-freq\
    \ 1)\n        -1\n        (apply max (filter (lambda (x) (and (> x 0) (>= (length\
    \ (filter (lambda (y) (= x y)) lst)) x))) lst)))))\n", "  (let ([freq (sort (map\
    \ (lambda (x) (list x (count x lst))) lst)\n                    (lambda (x y)\
    \ (< (cadr x) (cadr y))))])\n    (if (null? freq)\n        -1\n        (let ([max\
    \ (car (last freq))])\n          (if (>= (cadr max) (car max))\n             \
    \ (car max)\n              -1)))))\n", "  (let ([freq (sort (map (lambda (x) (list\
    \ x (count x lst))) (remove-duplicates lst))\n                     (lambda (x\
    \ y) (< (cadr x) (cadr y))))])\n    (cond [(empty? freq) -1]\n          [(>= (cadr\
    \ (first freq)) (car (first freq))) (car (first freq))]\n          [else -1])))\n",
  "  (let ([max (apply max lst)])\n    (for/first ([i (in-range 1 (add1 max))])\n\
    \      (and (>= (count i lst) i) i))))\n", "  (let ([max (apply max lst)])\n \
    \   (for/first ([i (in-range 1 (add1 max))])\n      (and (>= (count i lst) i)\
    \ i))))\n", "  (define (search-helper lst)\n    (cond\n      [(empty? lst) -1]\n\
    \      [(>= (length (filter (lambda (x) (= x (first lst))) lst)) (first lst))\
    \ (first lst)]\n      [else (search-helper (rest lst))]))\n  (search-helper (sort\
    \ lst >)))\n", "  (define (search-helper lst)\n    (cond [(empty? lst) -1]\n \
    \         [(>= (count (first lst) lst) (first lst)) (first lst)]\n          [else\
    \ (search-helper (rest lst))]))\n  (search-helper (sort lst <)))\n", "  (let ([freq\
    \ (sort (map (lambda (x) (list x (count x lst))) lst)\n                    (lambda\
    \ (x y) (< (car x) (car y))))])\n    (for/first ([x freq] #:when (>= (car x) (cadr\
    \ x)))\n      (car x))))\n", "  (define (count x lst)\n    (cond\n      [(empty?\
    \ lst) 0]\n      [(= x (first lst)) (+ 1 (count x (rest lst)))]\n      [else (count\
    \ x (rest lst))]))\n  (define (search-helper lst)\n    (cond\n      [(empty? lst)\
    \ -1]\n      [(>= (count (first lst) lst) (first lst)) (first lst)]\n      [else\
    \ (search-helper (rest lst))]))\n  (search-helper (sort lst <)))\n", "  (let ([max\
    \ (apply max lst)])\n    (for/first ([i (in-range 1 max)])\n      (and (>= (count\
    \ i lst) i) i))))\n", "  (let ([freq (sort (map (\u03BB (x) (list x (count x lst)))\
    \ lst) #:key cadr #:descending #t)])\n    (for/first ([x freq] #:when (and (not\
    \ (zero? (car x))) (>= (cadr x) (car x))))\n      (car x))))\n", "  (define (search-helper\
    \ lst)\n    (define (count-occurences lst n)\n      (cond\n        [(empty? lst)\
    \ 0]\n        [(= (first lst) n) (+ 1 (count-occurences (rest lst) n))]\n    \
    \    [else (count-occurences (rest lst) n)]))\n    (cond\n      [(empty? lst)\
    \ -1]\n      [(>= (count-occurences lst (first lst)) (first lst)) (first lst)]\n\
    \      [else (search-helper (rest lst))]))\n  (search-helper (sort lst <)))\n",
  "  (define (search-helper lst)\n    (cond [(empty? lst) -1]\n          [(>= (length\
    \ (filter (lambda (x) (= x (first lst))) lst)) (first lst)) (first lst)]\n   \
    \       [else (search-helper (rest lst))]))\n  (search-helper (sort lst >)))\n",
  "  (let ([freq (map (lambda (x) (list x (count x lst))) (remove-duplicates lst))])\n\
    \    (for/first ([x freq] #:when (and (> (car x) 0) (>= (car x) (cadr x))))\n\
    \      (car x))))\n", "  (define (freq x lst)\n    (cond [(empty? lst) 0]\n  \
    \        [(= x (first lst)) (+ 1 (freq x (rest lst)))]\n          [else (freq\
    \ x (rest lst))]))\n  (define (search-helper lst)\n    (cond [(empty? lst) -1]\n\
    \          [(>= (freq (first lst) lst) (first lst)) (first lst)]\n          [else\
    \ (search-helper (rest lst))]))\n  (search-helper (sort lst <)))\n", "  (define\
    \ (freq x lst)\n    (cond\n      [(empty? lst) 0]\n      [(= x (first lst)) (+\
    \ 1 (freq x (rest lst)))]\n      [else (freq x (rest lst))]))\n  (define (search-helper\
    \ lst)\n    (cond\n      [(empty? lst) -1]\n      [(>= (freq (first lst) lst)\
    \ (first lst)) (first lst)]\n      [else (search-helper (rest lst))]))\n  (search-helper\
    \ (sort lst <)))\n", "  (define (search-helper lst max-freq max-val)\n    (cond\
    \ [(empty? lst) max-val]\n          [(>= (count (first lst) lst) (first lst))\n\
    \           (search-helper (rest lst) (count (first lst) lst) (first lst))]\n\
    \          [else (search-helper (rest lst) max-freq max-val)]))\n  (search-helper\
    \ lst 0 0))\n", "  (let ([freq (make-hash)])\n    (for ([i lst])\n      (hash-update!\
    \ freq i add1 0))\n    (let loop ([lst lst])\n      (cond [(empty? lst) -1]\n\
    \            [(>= (hash-ref freq (first lst) 0) (first lst)) (first lst)]\n  \
    \          [else (loop (rest lst))]))))\n", "  (define (greatest-freq lst)\n \
    \   (define (greatest-freq-helper lst)\n      (cond\n        [(empty? lst) 0]\n\
    \        [(> (length (filter (lambda (x) (= x (first lst))) lst)) (first lst))\
    \ (first lst)]\n        [else (greatest-freq-helper (rest lst))]))\n    (greatest-freq-helper\
    \ (sort lst <)))\n  (if (= (greatest-freq lst) 0) -1 (greatest-freq lst)))\n",
  "  (let ([freq (sort (map (lambda (x) (list x (count x lst))) lst)\n           \
    \         (lambda (x y) (< (cadr x) (cadr y))))])\n    (cond [(empty? freq) -1]\n\
    \          [(>= (cadr (first freq)) (car (first freq))) (car (first freq))]\n\
    \          [else -1])))\n", "  (define (search-helper lst max)\n    (cond\n  \
    \    [(empty? lst) max]\n      [(>= (count (first lst) lst) (first lst)) (search-helper\
    \ (rest lst) (first lst))]\n      [else (search-helper (rest lst) max)]))\n  (search-helper\
    \ lst -1))\n", "  (let ([freq (sort (map (lambda (x) (list x (count x lst))) lst)\n\
    \                    (lambda (x y) (< (cadr x) (cadr y))))])\n    (for/first ([x\
    \ freq] #:when (> (car x) (cadr x)))\n      (car x))))\n", "  (let ([freq (map\
    \ (lambda (x) (list x (count x lst))) lst)])\n    (for/first ([x freq] #:when\
    \ (and (> (car x) 0) (>= (car x) (cadr x))))\n      (car x))))\n", "  (let ([freq\
    \ (map (\u03BB (x) (list x (count x lst))) (remove-duplicates lst))])\n    (for/first\
    \ ([x freq] #:when (and (> (car x) (cadr x)) (>= (car x) (cadr x))))\n      (car\
    \ x))))\n", "  (let ([max (apply max lst)])\n    (for/first ([i (in-range 1 (add1\
    \ max))])\n      (and (>= (count i lst) i) i))))\n", "  (define (search-helper\
    \ lst)\n    (cond\n      [(empty? lst) -1]\n      [(>= (length (filter (lambda\
    \ (x) (= x (first lst))) lst)) (first lst)) (first lst)]\n      [else (search-helper\
    \ (rest lst))]))\n  (search-helper (sort lst <)))\n", "  (define (count x lst)\n\
    \    (if (null? lst)\n        0\n        (+ (if (= x (car lst)) 1 0)\n       \
    \    (count x (cdr lst)))))\n  (define (search-helper lst)\n    (if (null? lst)\n\
    \        -1\n        (let ((x (car lst)))\n          (if (>= (count x lst) x)\n\
    \              x\n              (search-helper (cdr lst))))))\n  (search-helper\
    \ (sort lst <)))\n", "  (define (count-occurrences lst n)\n    (cond\n      [(empty?\
    \ lst) 0]\n      [(= (first lst) n) (+ 1 (count-occurrences (rest lst) n))]\n\
    \      [else (count-occurrences (rest lst) n)]))\n  (define (search-helper lst)\n\
    \    (cond\n      [(empty? lst) -1]\n      [(and (> (first lst) 0) (>= (count-occurrences\
    \ lst (first lst)) (first lst))) (first lst)]\n      [else (search-helper (rest\
    \ lst))]))\n  (search-helper lst))\n", "  (let loop ([lst lst] [max-freq 0] [max-val\
    \ 0])\n    (cond [(empty? lst) max-val]\n          [(>= (count (first lst) lst)\
    \ (first lst))\n           (loop (rest lst) (count (first lst) lst) (first lst))]\n\
    \          [else (loop (rest lst) max-freq max-val)])))\n", "  (define (freq x\
    \ lst)\n    (if (null? lst)\n        0\n        (+ (if (= x (car lst)) 1 0) (freq\
    \ x (cdr lst)))))\n  (define (greatest-freq lst)\n    (if (null? lst)\n      \
    \  0\n        (max (freq (car lst) lst) (greatest-freq (cdr lst)))))\n  (define\
    \ (greatest-freq-value lst)\n    (if (null? lst)\n        0\n        (if (= (freq\
    \ (car lst) lst) (greatest-freq lst))\n            (car lst)\n            (greatest-freq-value\
    \ (cdr lst)))))\n  (define (greatest-freq-value-greater-than-itself lst)\n   \
    \ (if (null? lst)\n        -1\n        (if (= (greatest-freq-value lst) (car lst))\n\
    \            (car lst)\n            (greatest-freq-value-greater-than-itself (cdr\
    \ lst)))))\n  (greatest-freq-value-greater-than-itself lst))\n", "  (let ([freq\
    \ (make-hash)])\n    (for ([i lst])\n      (hash-update! freq i add1 0))\n   \
    \ (let ([max-freq 0])\n      (for ([i lst])\n        (when (>= (hash-ref freq\
    \ i 0) i)\n          (set! max-freq i)))\n      (if (= max-freq 0) -1 max-freq))))\n",
  "  (let ([max-freq (apply max (map (lambda (x) (length (filter (lambda (y) (= x\
    \ y)) lst))) lst))])\n    (if (= max-freq 1)\n        -1\n        (apply max (filter\
    \ (lambda (x) (= (length (filter (lambda (y) (= x y)) lst)) x)) lst)))))\n", " \
    \ (let ([freq (sort (map (lambda (x) (list x (count x lst))) lst)\n          \
    \          (lambda (x y) (> (cadr x) (cadr y))))])\n    (for/first ([x freq]\n\
    \                #:when (>= (cadr x) (car x)))\n      (car x))))\n", "  (define\
    \ (search-helper lst)\n    (cond [(empty? lst) empty]\n          [(member (first\
    \ lst) (rest lst)) (cons (first lst) (search-helper (rest lst)))]\n          [else\
    \ (search-helper (rest lst))]))\n  (define (count-helper lst)\n    (cond [(empty?\
    \ lst) empty]\n          [(member (first lst) (rest lst)) (cons (first lst) (count-helper\
    \ (rest lst)))]\n          [else (count-helper (rest lst))]))\n  (define (count-helper2\
    \ lst)\n    (cond [(empty? lst) empty]\n          [(member (first lst) (rest lst))\
    \ (cons (first lst) (count-helper2 (rest lst)))]\n          [else (count-helper2\
    \ (rest lst))]))\n  (define (count-helper3 lst)\n    (cond [(empty? lst) empty]\n\
    \          [(member (first lst) (rest lst)) (cons (first lst) (count-helper3 (rest\
    \ lst)))]\n          [else (count-helper3 (rest lst))]))\n  (define (count-helper4\
    \ lst)\n    (cond [(empty? lst) empty]\n          [(member (first lst) (rest lst))\
    \ (cons (first lst) (count-helper4 (rest lst)))]\n          [else (count-helper4\
    \ (rest lst))]))\n  (define (count-helper5 lst)\n    (cond [(empty? lst) empty]\n\
    \          [(member (first lst) (rest lst)) (cons (first lst) (count-helper5 (rest\
    \ lst)))]\n          [else (count-helper5 (rest lst))]))\n  (define (count-helper6\
    \ lst)\n    (cond [(empty? lst) empty]\n          [(member (first lst) (rest lst))\
    \ (cons (first lst) (count-helper6 (rest lst)))]\n          [else (count-helper6",
  "  (define (search-helper lst)\n    (if (null? lst)\n        -1\n        (let* ([x\
    \ (car lst)]\n               [xs (cdr lst)]\n               [count (count-occurrences\
    \ x xs)])\n          (if (>= count x)\n              x\n              (search-helper\
    \ xs)))))\n  (search-helper (sort lst <)))\n", "  (let ([counts (map (lambda (x)\
    \ (list x (count x lst))) lst)])\n    (for/first ([(x n) counts]\n           \
    \     #:when (>= n x))\n      x)))\n", "  (define (count x lst)\n    (if (null?\
    \ lst)\n        0\n        (+ (if (= x (car lst)) 1 0) (count x (cdr lst)))))\n\
    \  (define (search-helper lst)\n    (if (null? lst)\n        -1\n        (let\
    \ ([x (car lst)])\n          (if (>= (count x lst) x)\n              x\n     \
    \         (search-helper (cdr lst))))))\n  (search-helper (sort lst <)))\n", " \
    \ (define (count-occurrences lst n)\n    (cond\n      [(empty? lst) 0]\n     \
    \ [(= (first lst) n) (+ 1 (count-occurrences (rest lst) n))]\n      [else (count-occurrences\
    \ (rest lst) n)]))\n  (define (search-helper lst)\n    (cond\n      [(empty? lst)\
    \ -1]\n      [(>= (count-occurrences lst (first lst)) (first lst)) (first lst)]\n\
    \      [else (search-helper (rest lst))]))\n  (search-helper (sort lst <)))\n",
  "  (define (search-helper lst)\n    (define (count-occurrences n lst)\n      (cond\n\
    \        [(empty? lst) 0]\n        [(= n (first lst)) (+ 1 (count-occurrences\
    \ n (rest lst)))]\n        [else (count-occurrences n (rest lst))]))\n    (cond\n\
    \      [(empty? lst) -1]\n      [(>= (count-occurrences (first lst) lst) (first\
    \ lst)) (first lst)]\n      [else (search-helper (rest lst))]))\n  (search-helper\
    \ (sort lst <)))\n", "  (define (count x lst)\n    (cond\n      [(empty? lst)\
    \ 0]\n      [(= x (first lst)) (+ 1 (count x (rest lst)))]\n      [else (count\
    \ x (rest lst))]))\n  (define (greatest lst)\n    (cond\n      [(empty? lst) 0]\n\
    \      [(> (first lst) (greatest (rest lst))) (first lst)]\n      [else (greatest\
    \ (rest lst))]))\n  (define (search-helper lst)\n    (cond\n      [(empty? lst)\
    \ -1]\n      [(and (> (first lst) 0) (>= (count (first lst) lst) (first lst)))\
    \ (first lst)]\n      [else (search-helper (rest lst))]))\n  (search-helper (sort\
    \ lst >)))\n", "  (define (count-occurrences lst)\n    (define (count-occurrences-iter\
    \ lst acc)\n      (cond [(empty? lst) acc]\n            [(assoc (first lst) acc)\
    \ (count-occurrences-iter (rest lst) acc)]\n            [else (count-occurrences-iter\
    \ (rest lst) (cons (cons (first lst) 1) acc))]))\n    (count-occurrences-iter\
    \ lst '()))\n  (define (count-occurrences-iter lst acc)\n    (cond [(empty? lst)\
    \ acc]\n          [(assoc (first lst) acc) (count-occurrences-iter (rest lst)\
    \ acc)]\n          [else (count-occurrences-iter (rest lst) (cons (cons (first\
    \ lst) 1) acc))]))\n  (define (count-occurrences lst)\n    (count-occurrences-iter\
    \ lst '()))\n  (define (count-occurrences-iter lst acc)\n    (cond [(empty? lst)\
    \ acc]\n          [(assoc (first lst) acc) (count-occurrences-iter (rest lst)\
    \ acc)]\n          [else (count-occurrences-iter (rest lst) (cons (cons (first\
    \ lst) 1) acc))]))\n  (define (count-occurrences lst)\n    (count-occurrences-iter\
    \ lst '()))\n  (define (count-occurrences-iter lst acc)\n    (cond [(empty? lst)\
    \ acc]\n          [(assoc (first lst) acc) (count-occurrences-iter (rest lst)\
    \ acc)]\n          [else (count-occurrences-iter (rest lst) (cons (cons (first\
    \ lst) 1) acc))]))\n  (define (count-occurrences lst)\n    (count-occurrences-iter\
    \ lst '()))\n  (define (count-occurrences-iter lst acc)\n    (cond [(empty? lst)\
    \ acc]\n          [(assoc (first lst) acc) (count-occurrences-iter (rest lst",
  "  (define (search-helper lst)\n    (cond [(empty? lst) -1]\n          [(>= (count\
    \ (first lst) lst) (first lst)) (first lst)]\n          [else (search-helper (rest\
    \ lst))]))\n  (search-helper (sort lst >)))\n", "  (define (search-helper lst)\n\
    \    (cond [(empty? lst) -1]\n          [(>= (count (first lst) lst) (first lst))\
    \ (first lst)]\n          [else (search-helper (rest lst))]))\n  (search-helper\
    \ (sort lst <)))\n", "  (define (count x lst)\n    (if (null? lst)\n        0\n\
    \        (+ (if (= x (car lst)) 1 0)\n           (count x (cdr lst)))))\n  (define\
    \ (search-helper lst)\n    (if (null? lst)\n        -1\n        (let ([x (car\
    \ lst)])\n          (if (>= (count x lst) x)\n              x\n              (search-helper\
    \ (cdr lst))))))\n  (search-helper (sort lst <)))\n", "  (let ([freq (map (lambda\
    \ (x) (list x (count x lst))) (remove-duplicates lst))])\n    (for/first ([x freq]\
    \ #:when (and (> (car x) 0) (>= (car x) (cadr x))))\n      (car x))))\n", "  (let\
    \ ([freq (map (lambda (x) (list x (count x lst))) lst)])\n    (for/first ([x (in-list\
    \ freq)]\n                #:when (and (> (car x) 0) (>= (car x) (cadr x))))\n\
    \      (car x))))\n", "  (define (count x lst)\n    (cond\n      [(empty? lst)\
    \ 0]\n      [(= x (first lst)) (+ 1 (count x (rest lst)))]\n      [else (count\
    \ x (rest lst))]))\n  (define (search-helper lst)\n    (cond\n      [(empty? lst)\
    \ -1]\n      [(and (> (first lst) 0)\n            (>= (count (first lst) lst)\
    \ (first lst))) (first lst)]\n      [else (search-helper (rest lst))]))\n  (search-helper\
    \ lst))\n", "  (let ([freq (make-hash)])\n    (for ([x lst])\n      (hash-update!\
    \ freq x add1 0))\n    (for/fold ([max -1]) ([x lst])\n      (let ([f (hash-ref\
    \ freq x 0)])\n        (if (and (> f x) (> f max))\n            f\n          \
    \  max)))))\n", "  (define (search-helper lst)\n    (if (null? lst)\n        -1\n\
    \        (let* ([x (car lst)]\n               [xs (cdr lst)]\n               [freq\
    \ (length (filter (lambda (y) (= x y)) xs))])\n          (if (>= freq x)\n   \
    \           x\n              (search-helper xs)))))\n  (search-helper (sort lst\
    \ <)))\n", "  (define (search-helper lst)\n    (cond\n      [(empty? lst) -1]\n\
    \      [(>= (length (filter (lambda (x) (= x (first lst))) lst)) (first lst))\
    \ (first lst)]\n      [else (search-helper (rest lst))]))\n  (search-helper (sort\
    \ lst <)))\n", "  (define (freq x lst)\n    (cond\n      [(empty? lst) 0]\n  \
    \    [(= x (first lst)) (+ 1 (freq x (rest lst)))]\n      [else (freq x (rest\
    \ lst))]))\n  (define (search-helper lst)\n    (cond\n      [(empty? lst) -1]\n\
    \      [(>= (freq (first lst) lst) (first lst)) (first lst)]\n      [else (search-helper\
    \ (rest lst))]))\n  (search-helper (sort > lst)))\n", "  (let ([max (apply max\
    \ lst)])\n    (for/first ([i (in-range 1 max)])\n      (if (>= (count i lst) i)\n\
    \          i\n          -1))))\n", "  (define (count x lst)\n    (cond ((null?\
    \ lst) 0)\n          ((= x (car lst)) (+ 1 (count x (cdr lst))))\n          (else\
    \ (count x (cdr lst)))))\n  (define (greatest lst)\n    (cond ((null? lst) -1)\n\
    \          ((= (count (car lst) lst) (car lst)) (car lst))\n          (else (greatest\
    \ (cdr lst)))))\n  (greatest (sort lst <)))\n", "  (define (freq x lst)\n    (if\
    \ (null? lst)\n        0\n        (+ (if (= x (car lst)) 1 0) (freq x (cdr lst)))))\n\
    \  (define (greatest-freq lst)\n    (if (null? lst)\n        -1\n        (let\
    \ ([x (car lst)])\n          (if (>= (freq x lst) x)\n              x\n      \
    \        (greatest-freq (cdr lst))))))\n  (greatest-freq lst))\n", "  (define\
    \ (search-helper lst)\n    (cond [(empty? lst) -1]\n          [(>= (length (filter\
    \ (lambda (x) (= x (first lst))) lst)) (first lst)) (first lst)]\n          [else\
    \ (search-helper (rest lst))]))\n  (search-helper (sort lst (lambda (x y) (< x\
    \ y)))))\n", "  (define (search-helper lst)\n    (define (count-occurences lst\
    \ n)\n      (cond\n        [(empty? lst) 0]\n        [(= (first lst) n) (+ 1 (count-occurences\
    \ (rest lst) n))]\n        [else (count-occurences (rest lst) n)]))\n    (cond\n\
    \      [(empty? lst) -1]\n      [(>= (count-occurences lst (first lst)) (first\
    \ lst)) (first lst)]\n      [else (search-helper (rest lst))]))\n  (search-helper\
    \ (sort lst <)))\n", "  (define (search-helper lst)\n    (cond\n      [(null?\
    \ lst) -1]\n      [(>= (count (car lst) lst) (car lst)) (car lst)]\n      [else\
    \ (search-helper (cdr lst))]))\n  (search-helper (sort lst >)))\n", "  (let ([freq\
    \ (map (lambda (x) (list x (count x lst))) lst)])\n    (for/first ([f freq]\n\
    \                #:when (and (> (car f) 0)\n                            (>= (car\
    \ f) (cadr f))))\n      (car f))))\n", "  (let ([max-freq (apply max (map (lambda\
    \ (x) (length (filter (lambda (y) (= x y)) lst))) lst))])\n    (if (= max-freq\
    \ 1)\n        -1\n        (apply max (filter (lambda (x) (and (> x 0) (= (length\
    \ (filter (lambda (y) (= x y)) lst)) x))) lst)))))\n", "  (define (search-helper\
    \ lst)\n    (cond\n      [(null? lst) -1]\n      [(>= (count (car lst) lst) (car\
    \ lst)) (car lst)]\n      [else (search-helper (cdr lst))]))\n  (search-helper\
    \ (sort lst >)))\n", "  (let ([freq (make-hash)])\n    (for ([i lst])\n      (hash-update!\
    \ freq i add1 0))\n    (let ([max-freq 0])\n      (for ([i lst])\n        (when\
    \ (>= (hash-ref freq i 0) i)\n          (set! max-freq i)))\n      (if (= max-freq\
    \ 0) -1 max-freq))))\n", "  (define (search-helper lst)\n    (cond ((empty? lst)\
    \ -1)\n          ((>= (count (first lst) lst) (first lst)) (first lst))\n    \
    \      (else (search-helper (rest lst)))))\n  (search-helper (sort lst <)))\n",
  "  (let ([freq (make-hash)])\n    (for ([x lst])\n      (hash-update! freq x add1\
    \ 0))\n    (let ([max -1])\n      (for ([x lst])\n        (when (>= (hash-ref\
    \ freq x 0) x)\n          (set! max (max max x))))\n      max)))\n</code>\n",
  "  (define (search-helper lst)\n    (cond\n      [(empty? lst) -1]\n      [(>= (length\
    \ (filter (lambda (x) (= x (first lst))) lst)) (first lst)) (first lst)]\n   \
    \   [else (search-helper (rest lst))]))\n  (search-helper (sort lst <)))\n", " \
    \ (let ([lst (sort lst <)])\n    (for/first ([i (in-list lst)]\n             \
    \   [j (in-list lst)])\n      (and (> i 0)\n           (= (count i lst) i)\n \
    \          i))))\n", "  (define (count x lst)\n    (cond [(empty? lst) 0]\n  \
    \        [(= x (first lst)) (+ 1 (count x (rest lst)))]\n          [else (count\
    \ x (rest lst))]))\n  (define (find-max lst)\n    (cond [(empty? lst) -1]\n  \
    \        [(= (count (first lst) lst) (first lst)) (first lst)]\n          [else\
    \ (find-max (rest lst))]))\n  (find-max lst))\n", "  (let ([freq (make-hash)])\n\
    \    (for ([x lst])\n      (hash-update! freq x add1 0))\n    (let ([max-freq\
    \ (apply max (hash-values freq))])\n      (for ([x lst])\n        (when (and (>\
    \ x 0)\n                   (= max-freq (hash-ref freq x 0)))\n          (return\
    \ x))))\n    -1))\n</code>\n", "  (let ([freq (sort (map (lambda (x) (list x (count\
    \ x lst))) lst)\n                    (lambda (x y) (< (cadr x) (cadr y))))])\n\
    \    (cond [(empty? freq) -1]\n          [(>= (car (car freq)) (cadr (car freq)))\
    \ (car (car freq))]\n          [else -1])))\n", "  (define (frequency x lst)\n\
    \    (cond\n      [(empty? lst) 0]\n      [(= x (first lst)) (+ 1 (frequency x\
    \ (rest lst)))]\n      [else (frequency x (rest lst))]))\n  (define (greatest-frequency\
    \ lst)\n    (cond\n      [(empty? lst) -1]\n      [(>= (frequency (first lst)\
    \ lst) (first lst)) (first lst)]\n      [else (greatest-frequency (rest lst))]))\n\
    \  (greatest-frequency lst))\n", "  (define (search-helper lst)\n    (cond [(empty?\
    \ lst) -1]\n          [(>= (count (first lst) lst) (first lst)) (first lst)]\n\
    \          [else (search-helper (rest lst))]))\n  (search-helper (sort lst <)))\n",
  "  (define (freq n lst)\n    (cond [(empty? lst) 0]\n          [(= n (first lst))\
    \ (+ 1 (freq n (rest lst)))]\n          [else (freq n (rest lst))]))\n  (define\
    \ (greatest-freq lst)\n    (cond [(empty? lst) -1]\n          [(>= (freq (first\
    \ lst) lst) (first lst)) (first lst)]\n          [else (greatest-freq (rest lst))]))\n\
    \  (greatest-freq lst))\n", "  (define (search-helper lst)\n    (define (count-occurrences\
    \ lst n)\n      (cond\n        [(empty? lst) 0]\n        [(= (first lst) n) (+\
    \ 1 (count-occurrences (rest lst) n))]\n        [else (count-occurrences (rest\
    \ lst) n)]))\n    (cond\n      [(empty? lst) -1]\n      [(>= (count-occurrences\
    \ lst (first lst)) (first lst)) (first lst)]\n      [else (search-helper (rest\
    \ lst))]))\n  (search-helper (sort lst <)))\n", "  (define (count x lst)\n   \
    \ (cond\n      [(empty? lst) 0]\n      [(= x (first lst)) (+ 1 (count x (rest\
    \ lst)))]\n      [else (count x (rest lst))]))\n  (define (search-helper lst)\n\
    \    (cond\n      [(empty? lst) -1]\n      [(>= (count (first lst) lst) (first\
    \ lst)) (first lst)]\n      [else (search-helper (rest lst))]))\n  (search-helper\
    \ (sort lst <)))\n", "  (define (search-helper lst)\n    (if (null? lst)\n   \
    \     -1\n        (let ([curr (car lst)])\n          (if (>= (count curr lst)\
    \ curr)\n              curr\n              (search-helper (cdr lst))))))\n  (search-helper\
    \ (sort lst <)))\n", "  (let ([freq (make-hash)])\n    (for ([x lst])\n      (hash-update!\
    \ freq x add1 0))\n    (let ([max-freq (apply max (hash-values freq))])\n    \
    \  (for ([x lst])\n        (when (and (> x 0) (= (hash-ref freq x 0) x))\n   \
    \       (return x))))\n    -1))\n", "  (let ([freq (sort (map (lambda (x) (list\
    \ x (count x lst))) lst)\n                    (lambda (x y) (&gt; (cadr x) (cadr\
    \ y))))])\n    (for/first ([x freq]\n                #:when (&gt;= (cadr x) (car\
    \ x)))\n      (car x))))\n</code>\n", "  (let ([freq (make-hash)])\n    (for ([i\
    \ lst])\n      (hash-update! freq i add1 0))\n    (for/fold ([max -1]) ([i lst])\n\
    \      (let ([f (hash-ref freq i 0)])\n        (if (and (> i 0) (>= f i) (> f\
    \ max))\n            i\n            max)))))\n", "  (let ([max-freq (apply max\
    \ (map (lambda (x) (count x lst)) lst))])\n    (if (equal? max-freq 1)\n     \
    \   -1\n        (apply max (filter (lambda (x) (and (> x 0) (>= x (count x lst))))\
    \ lst)))))\n", "  (define (helper lst)\n    (if (null? lst)\n        '()\n   \
    \     (cons (list (car lst) (count (car lst) lst)) (helper (cdr lst)))))\n  (define\
    \ (count n lst)\n    (if (null? lst)\n        0\n        (+ (if (= n (car lst))\
    \ 1 0) (count n (cdr lst)))))\n  (define (max-freq lst)\n    (if (null? lst)\n\
    \        -1\n        (let ((max (car lst)))\n          (for ([x (cdr lst)])\n\
    \            (if (> (cadr x) (cadr max))\n                (set! max x)))\n   \
    \       (if (>= (car max) (cadr max))\n              (car max)\n             \
    \ (max-freq (cdr lst))))))\n  (max-freq (helper lst)))\n", "  (let ([freq (make-hash)])\n\
    \    (for ([i lst])\n      (hash-update! freq i add1 0))\n    (let ([max-freq\
    \ (hash-ref freq (apply max lst))])\n      (for ([i lst])\n        (when (>= (hash-ref\
    \ freq i) i)\n          (when (> i max-freq)\n            (set! max-freq i))))\n\
    \      (if (= max-freq 0) -1 max-freq))))\n", "  (let ([max-freq (apply max (map\
    \ (lambda (x) (length (filter (lambda (y) (= x y)) lst))) lst))])\n    (if (=\
    \ max-freq 0)\n        -1\n        (apply max (filter (lambda (x) (and (> x 0)\
    \ (>= (length (filter (lambda (y) (= x y)) lst)) x))) lst)))))\n", "  (let ([freq\
    \ (make-hash)])\n    (for ([i lst])\n      (hash-update! freq i add1 0))\n   \
    \ (let ([max (apply max (hash-values freq))])\n      (for ([i lst])\n        (when\
    \ (and (> i 0) (>= (hash-ref freq i 0) i) (> i max))\n          (set! max i)))\n\
    \      (if (= max 0) -1 max))))\n", "  (let ([max (apply max lst)])\n    (for/first\
    \ ([i (in-range 1 (add1 max))])\n      (if (>= (count i lst) i)\n          i\n\
    \          -1))))\n", "  (define (search-helper lst)\n    (cond [(empty? lst)\
    \ -1]\n          [(>= (length (filter (lambda (x) (= x (first lst))) lst)) (first\
    \ lst)) (first lst)]\n          [else (search-helper (rest lst))]))\n  (search-helper\
    \ (sort lst <)))\n", "  (define (search-helper lst)\n    (cond\n      [(empty?\
    \ lst) -1]\n      [(>= (length (filter (lambda (x) (= x (first lst))) lst)) (first\
    \ lst)) (first lst)]\n      [else (search-helper (rest lst))]))\n  (search-helper\
    \ (sort lst <)))\n", "  (let ([freq (make-hash)])\n    (for ([x lst])\n      (hash-update!\
    \ freq x add1 0))\n    (let ([max-freq (apply max (hash-values freq))])\n    \
    \  (for ([x lst])\n        (when (and (> x 0) (= (hash-ref freq x 0) x))\n   \
    \       (return x)))\n      (for ([x lst])\n        (when (and (> x 0) (>= (hash-ref\
    \ freq x 0) x) (<= (hash-ref freq x 0) max-freq))\n          (return x)))\n  \
    \    -1)))\n", "  (define (helper lst)\n    (if (empty? lst)\n        empty\n\
    \        (cons (list (car lst) (count (car lst) lst)) (helper (cdr lst)))))\n\
    \  (define (count n lst)\n    (if (empty? lst)\n        0\n        (+ (if (= n\
    \ (car lst)) 1 0) (count n (cdr lst)))))\n  (define (greatest lst)\n    (if (empty?\
    \ lst)\n        empty\n        (if (and (> (car (car lst)) 0) (>= (car (car lst))\
    \ (cadr (car lst))))\n            (cons (car (car lst)) (greatest (cdr lst)))\n\
    \            (greatest (cdr lst)))))\n  (if (empty? (greatest (helper lst)))\n\
    \      -1\n      (car (greatest (helper lst)))))\n", "  (define (freq x lst)\n\
    \    (cond [(empty? lst) 0]\n          [(= x (first lst)) (+ 1 (freq x (rest lst)))]\n\
    \          [else (freq x (rest lst))]))\n  (define (search-helper lst)\n    (cond\
    \ [(empty? lst) -1]\n          [(>= (freq (first lst) lst) (first lst)) (first\
    \ lst)]\n          [else (search-helper (rest lst))]))\n  (search-helper (sort\
    \ lst <)))\n", "  (let ([freq (map (lambda (x) (list x (count x lst))) lst)])\n\
    \    (for/first ([x freq] #:when (and (> (car x) 0) (>= (car x) (cadr x))))\n\
    \      (car x))))\n", "  (let ([freq (for/fold ([freq-lst '()]) ([x lst])\n  \
    \              (let ([freq (for/fold ([count 0]) ([y lst])\n                 \
    \             (if (= x y) (add1 count) count))])\n                  (if (>= freq\
    \ x) (cons freq freq-lst) freq-lst)))])\n    (if (null? freq) -1 (apply max freq))))\n",
  "  (let ([freq (make-hash)])\n    (for ([x lst])\n      (hash-update! freq x add1\
    \ 0))\n    (let ([max-freq 0])\n      (for ([x lst])\n        (when (>= (hash-ref\
    \ freq x 0) x)\n          (set! max-freq x)))\n      (if (= max-freq 0) -1 max-freq))))\n",
  "  (define (search-helper lst)\n    (cond [(empty? lst) -1]\n          [(>= (count\
    \ (first lst) lst) (first lst)) (first lst)]\n          [else (search-helper (rest\
    \ lst))]))\n  (search-helper (sort > lst)))\n", "  (let ([max-freq (apply max\
    \ (map (lambda (x) (length (filter (lambda (y) (= x y)) lst))) lst))])\n    (if\
    \ (= max-freq 1)\n        -1\n        (apply max (filter (lambda (x) (= (length\
    \ (filter (lambda (y) (= x y)) lst)) x)) lst)))))\n", "  (let ([lst (sort lst\
    \ <)])\n    (for/first ([i (in-list lst)]\n                #:when (>= (count i\
    \ lst) i))\n      i)))\n", "  (let ([freq (make-hash)])\n    (for ([x lst])\n\
    \      (hash-update! freq x add1 0))\n    (let ([max-freq (apply max (hash-values\
    \ freq))])\n      (for ([x lst])\n        (when (and (> x 0) (>= (hash-ref freq\
    \ x 0) x) (> x max-freq))\n          (set! max-freq x)))\n      (if (= max-freq\
    \ 0) -1 max-freq))))\n", "  (let ([max-freq (apply max (map (\u03BB (x) (length\
    \ (filter (\u03BB (y) (= x y)) lst))) lst))])\n    (if (= max-freq 1)\n      \
    \  -1\n        (apply max (filter (\u03BB (x) (and (> x 0) (= max-freq (length\
    \ (filter (\u03BB (y) (= x y)) lst))))) lst)))))\n", "  (define (search-helper\
    \ lst)\n    (cond [(empty? lst) -1]\n          [(>= (count (first lst) lst) (first\
    \ lst)) (first lst)]\n          [else (search-helper (rest lst))]))\n  (search-helper\
    \ (sort lst <)))\n", "  (let ([freq (map (lambda (x) (list x (count x lst))) (remove-duplicates\
    \ lst))])\n    (let ([greatest (apply max (map first freq))])\n      (if (and\
    \ (not (null? (filter (lambda (x) (= (second x) greatest)) freq)))\n         \
    \      (= greatest (second (first (filter (lambda (x) (= (second x) greatest))\
    \ freq)))))\n          greatest\n          -1))))\n</code>\n", "  (let ([max-freq\
    \ (apply max (map (lambda (x) (length (filter (lambda (y) (= x y)) lst))) lst))])\n\
    \    (if (= max-freq 1)\n        -1\n        (apply max (filter (lambda (x) (=\
    \ (length (filter (lambda (y) (= x y)) lst)) x)) lst)))))\n</code>\n", "  (define\
    \ (search-helper lst max-val)\n    (cond\n      [(empty? lst) max-val]\n     \
    \ [(>= (count (first lst) lst) (first lst))\n       (search-helper (rest lst)\
    \ (first lst))]\n      [else (search-helper (rest lst) max-val)]))\n  (search-helper\
    \ lst -1))\n", "  (let ([max (- (apply max lst) 1)])\n    (for/first ([i (in-range\
    \ 1 max)])\n      (and (>= (count i lst) i) i))))\n", "  (define (count x lst)\n\
    \    (cond\n      [(empty? lst) 0]\n      [(= x (first lst)) (+ 1 (count x (rest\
    \ lst)))]\n      [else (count x (rest lst))]))\n  (define (search-helper lst)\n\
    \    (cond\n      [(empty? lst) -1]\n      [(>= (count (first lst) lst) (first\
    \ lst)) (first lst)]\n      [else (search-helper (rest lst))]))\n  (search-helper\
    \ (sort lst >)))\n", "  (let ([freq (make-hash)])\n    (for ([i lst])\n      (hash-update!\
    \ freq i add1 0))\n    (let ([max-freq (apply max (hash-values freq))])\n    \
    \  (for ([i lst])\n        (when (and (<= (hash-ref freq i 0) i)\n           \
    \        (= (hash-ref freq i 0) max-freq))\n          (return i)))\n      -1)))\n",
  "  (let ([freq (make-hash)])\n    (for ([i lst])\n      (hash-update! freq i add1\
    \ 0))\n    (let ([max-freq (apply max (hash-values freq))])\n      (for ([i lst])\n\
    \        (when (and (<= (hash-ref freq i 0) i)\n                   (> i (hash-ref\
    \ freq max-freq -1)))\n          (set! max-freq i)))\n      max-freq)))\n", " \
    \ (let ([max-freq (apply max (map length (group-by identity lst)))]\n        [max-val\
    \ (apply max lst)])\n    (if (and (< max-val max-freq) (> max-val 0))\n      \
    \  max-val\n        -1)))\n", "  (let ([freq (sort (map (lambda (x) (list x (count\
    \ x lst))) lst)\n                    (lambda (x y) (< (car x) (car y))))])\n \
    \   (for/first ([x freq]\n                #:when (and (> (car x) 0)\n        \
    \                    (>= (car x) (cadr x))))\n      (car x))))\n", "  (define\
    \ (search-helper lst)\n    (cond\n      [(empty? lst) #f]\n      [(>= (length\
    \ (filter (lambda (x) (= x (first lst))) lst)) (first lst)) (first lst)]\n   \
    \   [else (search-helper (rest lst))]))\n  (cond\n    [(search-helper lst) (search-helper\
    \ lst)]\n    [else -1]))\n", "  (let ([freq (sort (map (lambda (x) (list x (count\
    \ x lst))) (remove-duplicates lst)) (lambda (x y) (&gt; (cadr x) (cadr y))))])\n\
    \    (if (null? freq) -1\n        (let ([max (car (car freq))])\n          (if\
    \ (&gt;= max (cadr (car freq))) max -1)))))\n</code>\n", "  (define (search-helper\
    \ lst)\n    (cond\n      [(empty? lst) -1]\n      [(>= (length (filter (lambda\
    \ (x) (= x (first lst))) lst)) (first lst)) (first lst)]\n      [else (search-helper\
    \ (rest lst))]))\n  (search-helper (sort lst >)))\n", "  (define (search-helper\
    \ lst max)\n    (cond [(empty? lst) max]\n          [(>= (count (first lst) lst)\
    \ (first lst)) (search-helper (rest lst) (first lst))]\n          [else (search-helper\
    \ (rest lst) max)]))\n  (search-helper lst -1))\n", "  (let ([freq (map (lambda\
    \ (x) (list x (count x lst))) lst)])\n    (for/first ([x (in-list freq)]\n   \
    \             #:when (and (> (cadr x) 0) (>= (cadr x) (car x))))\n      (car x))))\n",
  "  (define (count x lst)\n    (cond\n      [(empty? lst) 0]\n      [(= x (first\
    \ lst)) (+ 1 (count x (rest lst)))]\n      [else (count x (rest lst))]))\n  (define\
    \ (max-count lst)\n    (cond\n      [(empty? lst) 0]\n      [(> (count (first\
    \ lst) lst) (max-count (rest lst))) (count (first lst) lst)]\n      [else (max-count\
    \ (rest lst))]))\n  (define (max-count-num lst)\n    (cond\n      [(empty? lst)\
    \ 0]\n      [(= (count (first lst) lst) (max-count lst)) (first lst)]\n      [else\
    \ (max-count-num (rest lst))]))\n  (cond\n    [(= (max-count lst) 0) -1]\n   \
    \ [(>= (max-count lst) (max-count-num lst)) (max-count-num lst)]\n    [else -1]))\n",
  "  (define (search-helper lst)\n    (cond [(empty? lst) -1]\n          [(>= (count\
    \ (first lst) lst) (first lst)) (first lst)]\n          [else (search-helper (rest\
    \ lst))]))\n  (search-helper (sort lst <)))\n", "  (cond [(empty? lst) -1]\n \
    \       [(>= (count (first lst) lst) (first lst)) (first lst)]\n        [else\
    \ (search (rest lst))]))\n", "  (define (search-helper lst)\n    (define (count-occurences\
    \ lst n)\n      (cond\n        [(empty? lst) 0]\n        [(= (first lst) n) (+\
    \ 1 (count-occurences (rest lst) n))]\n        [else (count-occurences (rest lst)\
    \ n)]))\n    (cond\n      [(empty? lst) -1]\n      [(>= (count-occurences lst\
    \ (first lst)) (first lst)) (first lst)]\n      [else (search-helper (rest lst))]))\n\
    \  (search-helper (sort lst <)))\n", "  (let ([max (apply max lst)])\n    (for/first\
    \ ([i (in-range 1 (add1 max))])\n      (and (>= (count i lst) i) i))))\n", " \
    \ (define (search-helper lst)\n    (cond [(empty? lst) -1]\n          [(>= (count\
    \ (first lst) lst) (first lst)) (first lst)]\n          [else (search-helper (rest\
    \ lst))]))\n  (search-helper (sort > lst)))\n", "  (let ([freq (make-hash)])\n\
    \    (for ([x lst])\n      (hash-update! freq x add1 0))\n    (let ([max-val -1])\n\
    \      (for ([x lst])\n        (when (>= (hash-ref freq x 0) x)\n          (set!\
    \ max-val (max max-val x))))\n      max-val)))\n", "  (define (helper lst)\n \
    \   (cond [(empty? lst) (list)]\n          [(member (first lst) (rest lst)) (cons\
    \ (first lst) (helper (rest lst)))]\n          [else (helper (rest lst))]))\n\
    \  (define (frequency lst)\n    (cond [(empty? lst) (list)]\n          [(member\
    \ (first lst) (rest lst)) (cons (first lst) (frequency (remove (first lst) (rest\
    \ lst))))]\n          [else (cons (first lst) (frequency (rest lst)))]))\n  (define\
    \ (count lst)\n    (cond [(empty? lst) (list)]\n          [(member (first lst)\
    \ (rest lst)) (cons (first lst) (count (remove (first lst) (rest lst))))]\n  \
    \        [else (cons (first lst) (count (rest lst)))]))\n  (define (count-occurence\
    \ lst)\n    (cond [(empty? lst) (list)]\n          [(member (first lst) (rest\
    \ lst)) (cons (first lst) (count-occurence (remove (first lst) (rest lst))))]\n\
    \          [else (cons (first lst) (count-occurence (rest lst)))]))\n  (define\
    \ (count-occurence-value lst)\n    (cond [(empty? lst) (list)]\n          [(member\
    \ (first lst) (rest lst)) (cons (first lst) (count-occurence-value (remove (first\
    \ lst) (rest lst))))]\n          [else (cons (first lst) (count-occurence-value\
    \ (rest lst)))]))\n  (define (count-occurence-value-greater-than-zero lst)\n \
    \   (cond [(empty? lst) (list)]\n          [(member (first lst) (rest lst)) (cons\
    \ (first lst) (count-occurence-value-greater-than-zero (remove (first lst) (rest\
    \ lst))))]\n          [else (cons (first lst) (count-occurence-value", "  (define\
    \ (count x lst)\n    (cond\n      [(empty? lst) 0]\n      [(= x (first lst)) (+\
    \ 1 (count x (rest lst)))]\n      [else (count x (rest lst))]))\n  (define (search-helper\
    \ lst)\n    (cond\n      [(empty? lst) -1]\n      [(>= (count (first lst) lst)\
    \ (first lst)) (first lst)]\n      [else (search-helper (rest lst))]))\n  (search-helper\
    \ (sort lst <)))\n", "  (define (count-occurences n lst)\n    (cond\n      [(empty?\
    \ lst) 0]\n      [(= n (first lst)) (+ 1 (count-occurences n (rest lst)))]\n \
    \     [else (count-occurences n (rest lst))]))\n  (define (search-helper lst)\n\
    \    (cond\n      [(empty? lst) -1]\n      [(>= (count-occurences (first lst)\
    \ lst) (first lst)) (first lst)]\n      [else (search-helper (rest lst))]))\n\
    \  (search-helper (sort lst <)))\n", "  (let ([freq (map (\u03BB (x) (list x (count\
    \ x lst))) (remove-duplicates lst))])\n    (for/first ([f freq] #:when (and (>\
    \ (car f) (cadr f)) (>= (car f) (cadr f))))\n      (car f))))\n", "  (let ([freq\
    \ (map (lambda (x) (list x (count x lst))) (remove-duplicates lst))])\n    (for/first\
    \ ([x freq] #:when (and (> (car x) 0) (>= (car x) (cadr x))))\n      (car x))))\n",
  "  (define (freq x lst)\n    (cond\n      [(empty? lst) 0]\n      [(= x (first lst))\
    \ (+ 1 (freq x (rest lst)))]\n      [else (freq x (rest lst))]))\n  (define (search-helper\
    \ lst)\n    (cond\n      [(empty? lst) -1]\n      [(>= (freq (first lst) lst)\
    \ (first lst)) (first lst)]\n      [else (search-helper (rest lst))]))\n  (search-helper\
    \ (sort lst <)))\n", "  (let ([max-freq (apply max (map (lambda (x) (length (filter\
    \ (lambda (y) (= x y)) lst))) lst))])\n    (if (= max-freq 1) -1\n        (apply\
    \ max (filter (lambda (x) (= (length (filter (lambda (y) (= x y)) lst)) x)) lst)))))\n",
  "  (define (helper lst)\n    (if (empty? lst)\n        (list -1 0)\n        (let*\
    \ ([curr (car lst)]\n               [rest (cdr lst)]\n               [rec (helper\
    \ rest)]\n               [max (car rec)]\n               [max-freq (cadr rec)]\n\
    \               [curr-freq (length (filter (lambda (x) (= x curr)) lst))])\n \
    \         (if (and (> curr 0)\n                   (>= curr-freq curr)\n      \
    \             (or (= max -1)\n                       (> curr max)))\n        \
    \      (list curr curr-freq)\n              rec))))\n  (car (helper lst)))\n",
  "  (define (search-helper lst)\n    (cond\n      [(empty? lst) -1]\n      [(>= (length\
    \ (filter (lambda (x) (= x (first lst))) lst)) (first lst)) (first lst)]\n   \
    \   [else (search-helper (rest lst))]))\n  (search-helper (sort lst >)))\n", " \
    \ (define (search-helper lst)\n    (cond\n      [(empty? lst) -1]\n      [(>=\
    \ (length (filter (lambda (x) (= x (first lst))) lst)) (first lst)) (first lst)]\n\
    \      [else (search-helper (rest lst))]))\n  (search-helper (sort lst <)))\n",
  "  (let ([max-freq (apply max (map (lambda (x) (count x lst)) lst))])\n    (if (and\
    \ (not (zero? max-freq))\n             (not (zero? (count max-freq lst))))\n \
    \       max-freq\n        -1)))\n", "  (define (search-helper lst)\n    (cond\
    \ [(empty? lst) -1]\n          [(>= (count (first lst) lst) (first lst)) (first\
    \ lst)]\n          [else (search-helper (rest lst))]))\n  (search-helper (sort\
    \ > lst)))\n", "  (let ([freq (sort (map (lambda (x) (list x (count x lst))) lst)\n\
    \                    (lambda (x y) (< (cadr x) (cadr y))))])\n    (for/first ([x\
    \ freq] #:when (> (car x) (cadr x)))\n      (car x))))\n", "  (define (search-helper\
    \ lst)\n    (cond [(empty? lst) -1]\n          [(>= (length (filter (lambda (x)\
    \ (= x (first lst))) lst)) (first lst)) (first lst)]\n          [else (search-helper\
    \ (rest lst))]))\n  (search-helper (sort lst <)))\n", "  (let ([freq (sort (map\
    \ (lambda (x) (list x (count x lst))) (remove-duplicates lst)) (lambda (x y) (&gt;\
    \ (cadr x) (cadr y))))])\n    (if (null? freq) -1\n        (let ([f (cadr (car\
    \ freq))])\n          (if (&gt;= f (caar freq)) (caar freq) -1)))))\n</code>\n",
  "  (let ([freq (make-hash)])\n    (for ([x lst])\n      (hash-update! freq x add1\
    \ 0))\n    (let ([max-freq (apply max (hash-values freq))])\n      (for ([x lst])\n\
    \        (when (and (> x 0) (= (hash-ref freq x 0) x))\n          (return x)))\n\
    \      (for ([x lst])\n        (when (and (> x 0) (>= (hash-ref freq x 0) x) (>\
    \ (hash-ref freq x 0) max-freq))\n          (return x)))\n      -1)))\n", "  (define\
    \ (search-helper lst)\n    (cond [(empty? lst) -1]\n          [(>= (length (filter\
    \ (lambda (x) (= x (first lst))) lst)) (first lst)) (first lst)]\n          [else\
    \ (search-helper (rest lst))]))\n  (search-helper (sort lst >)))\n", "  (let*\
    \ ([freq (make-hash)]\n         [max-freq 0])\n    (for ([i lst])\n      (hash-set!\
    \ freq i (+ 1 (hash-ref freq i 0))))\n    (for ([i lst])\n      (when (>= (hash-ref\
    \ freq i 0) i)\n        (set! max-freq (max max-freq i))))\n    (if (= max-freq\
    \ 0) -1 max-freq)))\n", "  (let ([freq (sort (map (lambda (x) (list x (count x\
    \ lst))) lst) (lambda (x y) (&gt; (cadr x) (cadr y))))])\n    (for/first ([x freq]\
    \ #:when (and (&gt; (car x) 0) (&gt;= (cadr x) (car x))))\n      (car x))))\n\
    </code>\n", "  (define (search-helper lst)\n    (cond [(empty? lst) #f]\n    \
    \      [(>= (length (filter (lambda (x) (= x (first lst))) lst)) (first lst))\
    \ (first lst)]\n          [else (search-helper (rest lst))]))\n  (if (search-helper\
    \ lst) (search-helper lst) -1))\n", "  (define (search-helper lst)\n    (cond\n\
    \      [(empty? lst) -1]\n      [(>= (length (filter (lambda (x) (= x (first lst)))\
    \ lst)) (first lst)) (first lst)]\n      [else (search-helper (rest lst))]))\n\
    \  (search-helper (sort lst >)))\n", "  (let ([max (apply max lst)])\n    (for/first\
    \ ([i (in-range 1 (add1 max))])\n      (and (>= (count i lst) i) i))))\n", " \
    \ (define (search-helper lst)\n    (cond\n      [(empty? lst) -1]\n      [(>=\
    \ (length (filter (lambda (x) (= x (first lst))) lst)) (first lst)) (first lst)]\n\
    \      [else (search-helper (rest lst))]))\n  (search-helper (sort lst >)))\n",
  "  (let ([freq (make-hash)])\n    (for ([x lst])\n      (hash-set! freq x (+ 1 (hash-ref\
    \ freq x 0))))\n    (let ([max-freq (apply max (hash-values freq))])\n      (for\
    \ ([x lst])\n        (when (= (hash-ref freq x 0) max-freq)\n          (when (>=\
    \ x max-freq)\n            (return x))))\n      -1)))\n", "  (let ([freq (make-hash)])\n\
    \    (for ([x lst])\n      (hash-update! freq x add1 0))\n    (let ([max-freq\
    \ (apply max (hash-values freq))])\n      (for ([x lst])\n        (when (and (>\
    \ x 0) (= (hash-ref freq x 0) x))\n          (return x)))\n      (for ([x lst])\n\
    \        (when (and (> x 0) (>= (hash-ref freq x 0) x) (> (hash-ref freq x 0)\
    \ max-freq))\n          (return x)))\n      -1)))\n", "  (define (helper lst)\n\
    \    (if (null? lst)\n        '()\n        (cons (list (car lst) (count (car lst)\
    \ lst)) (helper (cdr lst)))))\n  (define (count n lst)\n    (if (null? lst)\n\
    \        0\n        (+ (if (= n (car lst)) 1 0) (count n (cdr lst)))))\n  (define\
    \ (max-freq lst)\n    (if (null? lst)\n        -1\n        (let ((max (car lst)))\n\
    \          (for ((i lst))\n            (if (and (> (car i) (car max)) (>= (car\
    \ i) (cadr i)))\n                (set! max i)))\n          (if (= (cadr max) -1)\n\
    \              -1\n              (car max)))))\n  (max-freq (helper lst)))\n",
  "  (let ([freq (make-hash)])\n    (for ([x lst])\n      (hash-update! freq x add1\
    \ 0))\n    (let ([max-freq (apply max (hash-values freq))])\n      (for ([x lst])\n\
    \        (when (and (> x 0)\n                   (= (hash-ref freq x 0) x)\n  \
    \                 (<= x max-freq))\n          (return x))))\n    -1))\n", "  (let\
    \ ([freq (make-hash)])\n    (for ([x lst])\n      (hash-update! freq x add1 0))\n\
    \    (for/fold ([max -1]) ([x lst])\n      (let ([f (hash-ref freq x 0)])\n  \
    \      (if (and (> f x) (> f max))\n            f\n            max)))))\n</code>\n",
  "  (let ([freq (make-hash)])\n    (for ([x lst])\n      (hash-update! freq x add1\
    \ 0))\n    (let ([max-freq 0])\n      (for ([x lst])\n        (when (>= (hash-ref\
    \ freq x 0) x)\n          (set! max-freq (max max-freq x))))\n      (if (= max-freq\
    \ 0) -1 max-freq))))\n", "  (define (search-helper lst)\n    (cond\n      [(empty?\
    \ lst) -1]\n      [(>= (length (filter (lambda (x) (= x (first lst))) lst)) (first\
    \ lst)) (first lst)]\n      [else (search-helper (rest lst))]))\n  (search-helper\
    \ (sort lst <)))\n", "  (let ([freq (sort (map (\u03BB (x) (list x (count x lst)))\
    \ (remove (\u03BB (x) (= x 0)) lst)) (\u03BB (x y) (> (cadr x) (cadr y))))])\n\
    \    (for/first ([x freq] #:when (>= (cadr x) (car x))) (car x))))\n", "  (define\
    \ (search-helper lst)\n    (cond\n      [(empty? lst) -1]\n      [(>= (count (first\
    \ lst) lst) (first lst)) (first lst)]\n      [else (search-helper (rest lst))]))\n\
    \  (search-helper (sort lst <)))\n", "  (let ([freq (make-hash)])\n    (for ([x\
    \ lst])\n      (hash-update! freq x add1 0))\n    (for/fold ([max -1]) ([x lst])\n\
    \      (let ([f (hash-ref freq x 0)])\n        (if (and (> x 0) (>= f x) (> f\
    \ max))\n            x\n            max)))))\n</code>\n", "  (define (search-helper\
    \ lst freq)\n    (cond\n      [(empty? lst) -1]\n      [(>= (count (first lst)\
    \ lst) (first lst)) (first lst)]\n      [else (search-helper (rest lst) freq)]))\n\
    \  (search-helper lst (count-frequency lst)))\n", "  (define (search-helper lst)\n\
    \    (cond\n      [(empty? lst) -1]\n      [(>= (length (filter (lambda (x) (=\
    \ x (first lst))) lst)) (first lst)) (first lst)]\n      [else (search-helper\
    \ (rest lst))]))\n  (search-helper (sort lst <)))\n", "  (define (freq x lst)\n\
    \    (cond\n      [(empty? lst) 0]\n      [(= x (first lst)) (+ 1 (freq x (rest\
    \ lst)))]\n      [else (freq x (rest lst))]))\n  (define (search-helper lst)\n\
    \    (cond\n      [(empty? lst) -1]\n      [(>= (freq (first lst) lst) (first\
    \ lst)) (first lst)]\n      [else (search-helper (rest lst))]))\n  (search-helper\
    \ (sort > lst)))\n", "  (define (search-helper lst)\n    (cond\n      [(empty?\
    \ lst) -1]\n      [(>= (length (filter (lambda (x) (= x (first lst))) lst)) (first\
    \ lst)) (first lst)]\n      [else (search-helper (rest lst))]))\n  (search-helper\
    \ (sort lst >)))\n", "  (let ([freq (map (lambda (x) (list x (count x lst))) (remove-duplicates\
    \ lst))])\n    (cond [(empty? freq) -1]\n          [(>= (first (first freq)) (second\
    \ (first freq))) (first (first freq))]\n          [else (search (rest freq))])))\n",
  "  (define (search-aux lst)\n    (cond [(empty? lst) -1]\n          [(>= (count\
    \ (first lst) lst) (first lst)) (first lst)]\n          [else (search-aux (rest\
    \ lst))]))\n  (search-aux (sort lst >)))\n", "  (let ([freq (make-hash)])\n  \
    \  (for ([i lst])\n      (hash-update! freq i add1 0))\n    (let ([max-freq (apply\
    \ max (hash-values freq))])\n      (for ([i lst])\n        (when (and (> i 0)\
    \ (= (hash-ref freq i 0) i))\n          (return i)))\n      (for ([i lst])\n \
    \       (when (and (> i 0) (= (hash-ref freq i 0) max-freq))\n          (return\
    \ i)))\n      -1)))\n", "  (let ([freq (map (lambda (x) (list x (count x lst)))\
    \ lst)])\n    (for/first ([x (in-list freq)] #:when (and (> (car x) 0) (>= (car\
    \ x) (cadr x))))\n      (car x))))\n", "  (let ([max-freq (apply max (map (lambda\
    \ (x) (count x lst)) lst))])\n    (if (and (positive? max-freq)\n            \
    \ (member max-freq lst))\n        max-freq\n        -1)))\n</code>\n", "  (define\
    \ (freq x lst)\n    (cond [(empty? lst) 0]\n          [(= x (first lst)) (+ 1\
    \ (freq x (rest lst)))]\n          [else (freq x (rest lst))]))\n  (define (search-helper\
    \ lst)\n    (cond [(empty? lst) -1]\n          [(>= (freq (first lst) lst) (first\
    \ lst)) (first lst)]\n          [else (search-helper (rest lst))]))\n  (search-helper\
    \ (sort lst <)))\n", "  (let ([freq (sort (map (\u03BB (x) (list x (count x lst)))\
    \ lst) (\u03BB (x y) (&gt; (cadr x) (cadr y))))])\n    (if (null? freq) -1\n \
    \       (let ([f (cadr (car freq))])\n          (if (&gt;= f (car (car freq)))\
    \ (car (car freq)) -1)))))\n</code>\n", "  (let ([freq (map (lambda (x) (list\
    \ x (count x lst))) lst)])\n    (for/first ([x (in-list freq)]\n             \
    \   #:when (and (> (car x) 0)\n                            (>= (car x) (cadr x))))\n\
    \      (car x))))\n", "  (let ([max (apply max lst)])\n    (for/first ([i (in-range\
    \ 1 (add1 max))])\n      (if (>= (count i lst) i)\n          i\n          -1))))\n",
  "  (let ([max (apply max lst)])\n    (for/first ([i (in-range 1 (add1 max))])\n\
    \      (if (>= (count i lst) i)\n          i\n          -1))))\n", "  (let ([max-freq\
    \ (apply max (map (\u03BB (x) (length (filter (\u03BB (y) (= x y)) lst))) lst))])\n\
    \    (if (= max-freq 0)\n        -1\n        (apply max (filter (\u03BB (x) (and\
    \ (> x 0) (= (length (filter (\u03BB (y) (= x y)) lst)) x))) lst)))))\n", "  (define\
    \ (freq n lst)\n    (cond [(empty? lst) 0]\n          [(= n (first lst)) (+ 1\
    \ (freq n (rest lst)))]\n          [else (freq n (rest lst))]))\n  (define (search-helper\
    \ lst)\n    (cond [(empty? lst) -1]\n          [(>= (freq (first lst) lst) (first\
    \ lst)) (first lst)]\n          [else (search-helper (rest lst))]))\n  (search-helper\
    \ (sort lst >)))\n", "  (define (search-helper lst)\n    (cond\n      [(empty?\
    \ lst) -1]\n      [(>= (length (filter (lambda (x) (= x (first lst))) lst)) (first\
    \ lst)) (first lst)]\n      [else (search-helper (rest lst))]))\n  (search-helper\
    \ (sort lst >)))\n", "  (let ([lst (sort lst <)])\n    (let loop ([lst lst] [count\
    \ 1])\n      (cond [(null? lst) -1]\n            [(= count (car lst)) (car lst)]\n\
    \            [else (loop (cdr lst) (add1 count))]))))\n", "  (let ([freq (map\
    \ (\u03BB (x) (list x (count x lst))) (remove-duplicates lst))])\n    (for/first\
    \ ([x freq] #:when (and (> (car x) (cadr x)) (>= (car x) (cadr x))))\n      (car\
    \ x))))\n", "  (define (search-helper lst)\n    (cond [(empty? lst) -1]\n    \
    \      [(>= (length (filter (lambda (x) (= x (first lst))) lst)) (first lst))\
    \ (first lst)]\n          [else (search-helper (rest lst))]))\n  (search-helper\
    \ (sort lst >)))\n", "  (define (count x lst)\n    (cond ((null? lst) 0)\n   \
    \       ((= x (car lst)) (+ 1 (count x (cdr lst))))\n          (else (count x\
    \ (cdr lst)))))\n  (define (search-helper lst)\n    (cond ((null? lst) -1)\n \
    \         ((= (count (car lst) lst) (car lst)) (car lst))\n          (else (search-helper\
    \ (cdr lst)))))\n  (search-helper (sort lst <)))\n", "  (define (search-helper\
    \ lst)\n    (if (null? lst)\n        -1\n        (let* ([x (car lst)]\n      \
    \         [xs (cdr lst)]\n               [count (length (filter (lambda (y) (=\
    \ x y)) xs))])\n          (if (and (> x 0) (>= x (+ count 1)))\n             \
    \ x\n              (search-helper xs)))))\n  (search-helper lst))\n", "  (define\
    \ (frequency n lst)\n    (cond [(empty? lst) 0]\n          [(= n (first lst))\
    \ (+ 1 (frequency n (rest lst)))]\n          [else (frequency n (rest lst))]))\n\
    \  (define (search-helper lst)\n    (cond [(empty? lst) -1]\n          [(>= (frequency\
    \ (first lst) lst) (first lst)) (first lst)]\n          [else (search-helper (rest\
    \ lst))]))\n  (search-helper (sort lst <)))\n", "  (let ([max (apply max lst)])\n\
    \    (for/first ([i (in-range 1 (add1 max))])\n      (and (>= (count i lst) i)\
    \ i))))\n", "  (define (search-helper lst freq)\n    (if (null? lst)\n       \
    \ -1\n        (let ([curr (car lst)])\n          (if (and (> curr 0) (>= curr\
    \ freq))\n              curr\n              (search-helper (cdr lst) (if (= curr\
    \ (car lst)) (+ freq 1) 1))))))\n  (search-helper lst 1))\n", "  (let ([max (apply\
    \ max lst)])\n    (for/first ([i (in-range 1 (add1 max))])\n      (and (member\
    \ i lst)\n           (>= (count i lst) i)\n           i))))\n", "  (define (search-helper\
    \ lst)\n    (cond\n      [(empty? lst) -1]\n      [(>= (length (filter (lambda\
    \ (x) (= x (first lst))) lst)) (first lst)) (first lst)]\n      [else (search-helper\
    \ (rest lst))]))\n  (search-helper (sort lst >)))\n", "  (let ([max (apply max\
    \ lst)])\n    (for/first ([i (in-range 1 (add1 max))])\n      (if (>= (count i\
    \ lst) i)\n          i\n          -1))))\n", "  (define (search-helper lst)\n\
    \    (cond [(empty? lst) -1]\n          [(>= (count (first lst) lst) (first lst))\
    \ (first lst)]\n          [else (search-helper (rest lst))]))\n  (search-helper\
    \ (sort lst <)))\n", "  (let ([freq (sort (map (lambda (x) (list x (count x lst)))\
    \ lst)\n                    (lambda (x y) (or (&gt; (car x) (car y))\n       \
    \                               (&gt; (cadr x) (cadr y)))))]\n        [max (car\
    \ (last freq))])\n    (if (&gt;= (cadr max) (car max))\n        (car max)\n  \
    \      -1)))\n", "  (define (search-helper lst)\n    (cond [(empty? lst) -1]\n\
    \          [(>= (length (filter (lambda (x) (= x (first lst))) lst)) (first lst))\
    \ (first lst)]\n          [else (search-helper (rest lst))]))\n  (search-helper\
    \ (sort lst <)))\n", "  (let ([max-freq (apply max (map (lambda (x) (length (filter\
    \ (lambda (y) (= x y)) lst))) lst))])\n    (if (= max-freq 1)\n        -1\n  \
    \      (apply max (filter (lambda (x) (and (> x 0) (= (length (filter (lambda\
    \ (y) (= x y)) lst)) x))) lst)))))\n", "  (let ([freq (map (lambda (x) (list x\
    \ (count x lst))) lst)])\n    (apply max (filter (lambda (x) (and (> x 0) (>=\
    \ x (cadr x)))) (map car freq)))))\n", "  (define (search-helper lst)\n    (define\
    \ (count-occurences x lst)\n      (cond\n        [(empty? lst) 0]\n        [(equal?\
    \ x (first lst)) (+ 1 (count-occurences x (rest lst)))]\n        [else (count-occurences\
    \ x (rest lst))]))\n    (cond\n      [(empty? lst) -1]\n      [(>= (count-occurences\
    \ (first lst) lst) (first lst)) (first lst)]\n      [else (search-helper (rest\
    \ lst))]))\n  (search-helper (sort lst >)))\n", "  (let ([max-freq (apply max\
    \ (map (lambda (x) (length (filter (lambda (y) (= x y)) lst))) lst))])\n    (if\
    \ (= max-freq 1)\n        -1\n        (apply max (filter (lambda (x) (= (length\
    \ (filter (lambda (y) (= x y)) lst)) x)) lst)))))\n", "  (let ([freq (make-hash)])\n\
    \    (for ([x lst])\n      (hash-set! freq x (+ 1 (hash-ref freq x 0))))\n   \
    \ (let ([max-freq (apply max (hash-values freq))])\n      (for ([x lst])\n   \
    \     (when (and (hash-ref freq x 0)\n                   (>= (hash-ref freq x\
    \ 0) x)\n                   (>= (hash-ref freq x 0) max-freq))\n          (set!\
    \ max-freq (hash-ref freq x 0))))\n      (if (= max-freq 0) -1 max-freq))))\n",
  "  (let ([frequencies (map (lambda (x) (count x lst)) lst)])\n    (for/first ([(x\
    \ y) (zip lst frequencies)]\n                #:when (and (> x 0) (>= x y)))\n\
    \      x)))\n"]
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
