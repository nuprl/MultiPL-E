name: HumanEval_9_rolling_max
language: racket
prompt: "#lang racket\n\n;; From a given list of integers, generate a list of rolling\
  \ maximum element found until given moment\n;; in the sequence.\n;; >>> rolling_max([1,\
  \ 2, 3, 2, 3, 4, 2])\n;; [1, 2, 3, 3, 3, 4, 4]\n(define (rolling_max numbers)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate rolling_max))\n\
  \    (check-equal? (candidate (list )) (list ))\n    (check-equal? (candidate (list\
  \ 1 2 3 4)) (list 1 2 3 4))\n    (check-equal? (candidate (list 4 3 2 1)) (list\
  \ 4 4 4 4))\n    (check-equal? (candidate (list 3 2 3 100 3)) (list 3 3 3 100 100))\n\
  ))\n\n(test-humaneval)"
completions: ["  (define (rolling-max-helper numbers max-so-far)\n    (if (null? numbers)\n\
    \        '()\n        (cons (max (car numbers) max-so-far)\n              (rolling-max-helper\
    \ (cdr numbers) (max (car numbers) max-so-far)))))\n  (rolling-max-helper numbers\
    \ 0))\n", "  (define (rolling-max-iter numbers max-so-far)\n    (if (null? numbers)\n\
    \        '()\n        (cons max-so-far (rolling-max-iter (cdr numbers) (max max-so-far\
    \ (car numbers))))))\n  (rolling-max-iter numbers (car numbers)))\n", "  (define\
    \ (rolling-max-helper numbers max-so-far)\n    (if (null? numbers)\n        '()\n\
    \        (cons max-so-far (rolling-max-helper (cdr numbers) (max max-so-far (car\
    \ numbers))))))\n  (rolling-max-helper numbers (car numbers)))\n", "  (if (null?\
    \ numbers)\n      '()\n      (cons (apply max numbers)\n            (rolling_max\
    \ (cdr numbers)))))\n", "  (define (rolling-max-iter numbers max-so-far)\n   \
    \ (if (null? numbers)\n        '()\n        (cons max-so-far (rolling-max-iter\
    \ (cdr numbers) (max max-so-far (car numbers))))))\n  (rolling-max-iter numbers\
    \ (car numbers)))\n", "  (define (rolling-max-helper numbers max-so-far)\n   \
    \ (cond\n      [(empty? numbers) '()]\n      [(> (first numbers) max-so-far)\n\
    \       (cons (first numbers) (rolling-max-helper (rest numbers) (first numbers)))]\n\
    \      [else\n       (cons max-so-far (rolling-max-helper (rest numbers) max-so-far))]))\n\
    \  (rolling-max-helper numbers (first numbers)))\n", "  (define (rolling-max-iter\
    \ numbers max-so-far)\n    (cond\n      [(empty? numbers) '()]\n      [(> (first\
    \ numbers) max-so-far)\n       (cons (first numbers) (rolling-max-iter (rest numbers)\
    \ (first numbers)))]\n      [else\n       (cons max-so-far (rolling-max-iter (rest\
    \ numbers) max-so-far))]))\n  (rolling-max-iter numbers (first numbers)))\n",
  "  (define (rolling-max-helper numbers max-so-far)\n    (cond ((null? numbers) '())\n\
    \          ((> (car numbers) max-so-far)\n           (cons (car numbers) (rolling-max-helper\
    \ (cdr numbers) (car numbers))))\n          (else (cons max-so-far (rolling-max-helper\
    \ (cdr numbers) max-so-far)))))\n  (rolling-max-helper numbers (car numbers)))\n",
  "  (define (rolling-max-helper numbers max-so-far)\n    (cond\n      [(empty? numbers)\
    \ '()]\n      [(> (first numbers) max-so-far)\n       (cons (first numbers) (rolling-max-helper\
    \ (rest numbers) (first numbers)))]\n      [else\n       (cons max-so-far (rolling-max-helper\
    \ (rest numbers) max-so-far))]))\n  (rolling-max-helper numbers (first numbers)))\n",
  "  (let loop ([numbers numbers]\n             [max-so-far (car numbers)]\n     \
    \        [result (list max-so-far)])\n    (if (null? (cdr numbers))\n        result\n\
    \        (loop (cdr numbers)\n              (max max-so-far (cadr numbers))\n\
    \              (cons (max max-so-far (cadr numbers)) result)))))\n", "  (let loop\
    \ ([numbers numbers]\n             [max-so-far (car numbers)]\n             [result\
    \ (list max-so-far)])\n    (if (null? (cdr numbers))\n        result\n       \
    \ (loop (cdr numbers)\n              (max max-so-far (cadr numbers))\n       \
    \       (cons (max max-so-far (cadr numbers)) result)))))\n", "  (define (rolling-max-helper\
    \ numbers max-so-far)\n    (if (null? numbers)\n        '()\n        (cons (max\
    \ (car numbers) max-so-far)\n              (rolling-max-helper (cdr numbers) (max\
    \ (car numbers) max-so-far)))))\n  (rolling-max-helper numbers (car numbers)))\n",
  "  (if (null? numbers)\n      '()\n      (cons (max (car numbers) (car (rolling_max\
    \ (cdr numbers))))\n            (rolling_max (cdr numbers)))))\n", "  (define\
    \ (rolling-max-helper numbers max-so-far)\n    (if (null? numbers)\n        '()\n\
    \        (cons (max (car numbers) max-so-far)\n              (rolling-max-helper\
    \ (cdr numbers) (max (car numbers) max-so-far)))))\n  (rolling-max-helper numbers\
    \ 0))\n", "  (let loop ([numbers numbers]\n             [max-so-far (first numbers)]\n\
    \             [result (list max-so-far)])\n    (if (null? (rest numbers))\n  \
    \      result\n        (loop (rest numbers)\n              (if (&gt; (first numbers)\
    \ max-so-far)\n                  (first numbers)\n                  max-so-far)\n\
    \              (cons (if (&gt; (first numbers) max-so-far)\n                 \
    \       (first numbers)\n                        max-so-far)\n               \
    \     result)))))\n", "  (let loop ([numbers numbers]\n             [max-so-far\
    \ (car numbers)]\n             [accumulator (list max-so-far)])\n    (if (null?\
    \ numbers)\n        accumulator\n        (loop (cdr numbers)\n              (if\
    \ (&gt; (car numbers) max-so-far)\n                  (car numbers)\n         \
    \         max-so-far)\n              (cons max-so-far accumulator)))))\n", " \
    \ (define (rolling-max-helper numbers max-so-far)\n    (if (null? numbers)\n \
    \       '()\n        (cons (max (car numbers) max-so-far)\n              (rolling-max-helper\
    \ (cdr numbers) (max (car numbers) max-so-far)))))\n  (rolling-max-helper numbers\
    \ 0))\n", "  (define (rolling-max-helper numbers max-so-far)\n    (if (null? numbers)\n\
    \        '()\n        (cons (max (car numbers) max-so-far)\n              (rolling-max-helper\
    \ (cdr numbers) (max (car numbers) max-so-far)))))\n  (rolling-max-helper numbers\
    \ (car numbers)))\n", "  (define (rolling-max-helper numbers max-so-far)\n   \
    \ (if (null? numbers)\n        '()\n        (cons (max (car numbers) max-so-far)\n\
    \              (rolling-max-helper (cdr numbers) (max (car numbers) max-so-far)))))\n\
    \  (rolling-max-helper numbers 0))\n", "  (let loop ([numbers numbers]\n     \
    \        [acc '()])\n    (cond\n      [(empty? numbers) (reverse acc)]\n     \
    \ [(empty? acc) (loop (rest numbers) (list (first numbers)))]\n      [else (loop\
    \ (rest numbers) (cons (max (first numbers) (first acc)) acc))])))\n", "  (let\
    \ loop ([numbers numbers]\n             [max-so-far -1]\n             [result\
    \ '()])\n    (cond [(empty? numbers) (reverse result)]\n          [(> (first numbers)\
    \ max-so-far)\n           (loop (rest numbers)\n                 (first numbers)\n\
    \                 (cons (first numbers) result))]\n          [else\n         \
    \  (loop (rest numbers)\n                 max-so-far\n                 (cons max-so-far\
    \ result))])))\n", "  (define (rolling-max-helper numbers max-so-far)\n    (if\
    \ (null? numbers)\n        '()\n        (cons (max (car numbers) max-so-far)\n\
    \              (rolling-max-helper (cdr numbers) (max (car numbers) max-so-far)))))\n\
    \  (rolling-max-helper numbers 0))\n", "  (let loop ([numbers numbers]\n     \
    \        [max-so-far 0]\n             [result '()])\n    (cond [(empty? numbers)\
    \ (reverse result)]\n          [else (let ([n (first numbers)])\n            \
    \      (loop (rest numbers)\n                        (if (&gt; n max-so-far) n\
    \ max-so-far)\n                        (cons (if (&gt; n max-so-far) n max-so-far)\
    \ result)))])))\n", "  (define (rolling-max-helper numbers max-so-far)\n    (if\
    \ (null? numbers)\n        '()\n        (cons (max (car numbers) max-so-far)\n\
    \              (rolling-max-helper (cdr numbers) (max (car numbers) max-so-far)))))\n\
    \  (rolling-max-helper numbers 0))\n", "  (define (iter numbers maxes)\n    (if\
    \ (null? numbers)\n        (reverse maxes)\n        (let ([n (car numbers)])\n\
    \          (iter (cdr numbers) (cons (if (&gt; n (car maxes)) n (car maxes)) maxes)))))\n\
    \  (iter numbers (list (car numbers))))\n", "  (define (rolling-max-helper numbers\
    \ max-so-far)\n    (if (null? numbers)\n        '()\n        (cons (max (car numbers)\
    \ max-so-far)\n              (rolling-max-helper (cdr numbers) (max (car numbers)\
    \ max-so-far)))))\n  (rolling-max-helper numbers 0))\n", "  (define (rolling-max-helper\
    \ numbers max-so-far)\n    (cond ((null? numbers) '())\n          ((> (car numbers)\
    \ max-so-far)\n           (cons (car numbers) (rolling-max-helper (cdr numbers)\
    \ (car numbers))))\n          (else (cons max-so-far (rolling-max-helper (cdr\
    \ numbers) max-so-far)))))\n  (rolling-max-helper numbers (car numbers)))\n",
  "  (define (rolling-max-helper numbers max-so-far)\n    (cond\n      [(empty? numbers)\
    \ empty]\n      [(> (first numbers) max-so-far)\n       (cons (first numbers)\
    \ (rolling-max-helper (rest numbers) (first numbers)))]\n      [else\n       (cons\
    \ max-so-far (rolling-max-helper (rest numbers) max-so-far))]))\n  (rolling-max-helper\
    \ numbers (first numbers)))\n", "  (let loop ([numbers numbers]\n            \
    \ [max-so-far (first numbers)]\n             [result (list max-so-far)])\n   \
    \ (if (null? (rest numbers))\n        result\n        (loop (rest numbers)\n \
    \             (if (&gt; (first numbers) max-so-far)\n                  (first\
    \ numbers)\n                  max-so-far)\n              (cons (if (&gt; (first\
    \ numbers) max-so-far)\n                        (first numbers)\n            \
    \            max-so-far)\n                    result)))))\n", "  (define (iter\
    \ maxes nums)\n    (if (null? nums)\n        maxes\n        (iter (cons (max (car\
    \ nums) (car maxes)) maxes) (cdr nums))))\n  (reverse (iter (list (car numbers))\
    \ (cdr numbers))))\n", "  (define (rolling-max-helper numbers max-so-far)\n  \
    \  (if (null? numbers)\n        '()\n        (cons (max (car numbers) max-so-far)\n\
    \              (rolling-max-helper (cdr numbers) (max (car numbers) max-so-far)))))\n\
    \  (rolling-max-helper numbers 0))\n", "  (define (rolling-max-helper numbers\
    \ max-so-far)\n    (if (null? numbers)\n        '()\n        (cons (max (car numbers)\
    \ max-so-far)\n              (rolling-max-helper (cdr numbers) (max (car numbers)\
    \ max-so-far)))))\n  (rolling-max-helper numbers 0))\n", "  (let loop ([numbers\
    \ numbers]\n             [acc '()])\n    (if (null? numbers)\n        (reverse\
    \ acc)\n        (loop (cdr numbers)\n              (cons (max (car numbers) (car\
    \ acc)) acc)))))\n", "  (define (rolling_max_iter numbers maxes)\n    (if (null?\
    \ numbers)\n        maxes\n        (rolling_max_iter (cdr numbers) (cons (max\
    \ (car numbers) (car maxes)) maxes))))\n  (reverse (rolling_max_iter numbers (list\
    \ (car numbers)))))\n", "  (define (rolling_max_helper numbers max-so-far)\n \
    \   (cond\n      [(empty? numbers) '()]\n      [(> (first numbers) max-so-far)\n\
    \       (cons (first numbers) (rolling_max_helper (rest numbers) (first numbers)))]\n\
    \      [else\n       (cons max-so-far (rolling_max_helper (rest numbers) max-so-far))]))\n\
    \  (rolling_max_helper numbers (first numbers)))\n", "  (define (rolling_max_iter\
    \ numbers max-so-far)\n    (cond\n      [(empty? numbers) '()]\n      [(> (first\
    \ numbers) max-so-far)\n       (cons (first numbers) (rolling_max_iter (rest numbers)\
    \ (first numbers)))]\n      [else\n       (cons max-so-far (rolling_max_iter (rest\
    \ numbers) max-so-far))]))\n  (rolling_max_iter numbers (first numbers)))\n",
  "  (define (rolling_max_iter numbers maxes)\n    (if (null? numbers)\n        maxes\n\
    \        (rolling_max_iter (cdr numbers) (cons (max (car numbers) (car maxes))\
    \ maxes))))\n  (reverse (rolling_max_iter numbers (list (car numbers)))))\n",
  "  (if (empty? numbers)\n      '()\n      (cons (apply max numbers)\n          \
    \  (rolling_max (rest numbers)))))\n", "  (let loop ([numbers numbers]\n     \
    \        [max-so-far (first numbers)]\n             [result (list max-so-far)])\n\
    \    (if (null? (rest numbers))\n        result\n        (loop (rest numbers)\n\
    \              (if (&gt; (first numbers) max-so-far)\n                  (first\
    \ numbers)\n                  max-so-far)\n              (cons (if (&gt; (first\
    \ numbers) max-so-far)\n                        (first numbers)\n            \
    \            max-so-far)\n                    result)))))\n", "  (let loop ([numbers\
    \ numbers]\n             [acc '()])\n    (cond [(empty? numbers) (reverse acc)]\n\
    \          [else (let ([max (max (first numbers) (if (empty? acc) (first numbers)\
    \ (first acc)))])\n                  (loop (rest numbers) (cons max acc)))])))\n",
  "  (define (rolling_max_helper numbers max-so-far)\n    (if (null? numbers)\n  \
    \      '()\n        (cons (max (car numbers) max-so-far)\n              (rolling_max_helper\
    \ (cdr numbers) (max (car numbers) max-so-far)))))\n  (rolling_max_helper numbers\
    \ 0))\n", "  (define (rolling_max_iter numbers maxes)\n    (cond\n      [(empty?\
    \ numbers) (reverse maxes)]\n      [(empty? maxes) (rolling_max_iter (rest numbers)\
    \ (list (first numbers)))]\n      [else (rolling_max_iter (rest numbers) (cons\
    \ (max (first numbers) (first maxes)) maxes))]))\n  (rolling_max_iter numbers\
    \ '()))\n", "  (if (null? numbers)\n      '()\n      (cons (apply max numbers)\n\
    \            (rolling_max (cdr numbers)))))\n", "  (define (rolling_max_iter numbers\
    \ max-so-far)\n    (if (null? numbers)\n        '()\n        (cons max-so-far\
    \ (rolling_max_iter (cdr numbers) (max max-so-far (car numbers))))))\n  (rolling_max_iter\
    \ numbers (car numbers)))\n", "  (define (rolling_max_iter numbers max-so-far)\n\
    \    (if (null? numbers)\n        '()\n        (cons (max (car numbers) max-so-far)\n\
    \              (rolling_max_iter (cdr numbers) (max (car numbers) max-so-far)))))\n\
    \  (rolling_max_iter numbers (car numbers)))\n", "  (define (rolling_max_iter\
    \ numbers max-so-far)\n    (cond\n      [(empty? numbers) '()]\n      [(> (first\
    \ numbers) max-so-far)\n       (cons (first numbers) (rolling_max_iter (rest numbers)\
    \ (first numbers)))]\n      [else\n       (cons max-so-far (rolling_max_iter (rest\
    \ numbers) max-so-far))]))\n  (rolling_max_iter numbers (first numbers)))\n",
  "  (if (null? numbers)\n      '()\n      (cons (apply max numbers)\n           \
    \ (rolling_max (cdr numbers)))))\n", "  (define (rolling_max_iter numbers max-so-far)\n\
    \    (cond\n      [(empty? numbers) '()]\n      [(> (first numbers) max-so-far)\n\
    \       (cons (first numbers) (rolling_max_iter (rest numbers) (first numbers)))]\n\
    \      [else\n       (cons max-so-far (rolling_max_iter (rest numbers) max-so-far))]))\n\
    \  (rolling_max_iter numbers (first numbers)))\n", "  (define (rolling_max_iter\
    \ numbers max-so-far)\n    (if (null? numbers)\n        '()\n        (cons max-so-far\
    \ (rolling_max_iter (cdr numbers) (max max-so-far (car numbers))))))\n  (rolling_max_iter\
    \ numbers (car numbers)))\n", "  (define (rolling_max-iter numbers max-so-far)\n\
    \    (if (null? numbers)\n        '()\n        (cons max-so-far (rolling_max-iter\
    \ (cdr numbers) (max max-so-far (car numbers))))))\n  (rolling_max-iter numbers\
    \ (car numbers)))\n", "  (if (null? numbers)\n      '()\n      (cons (apply max\
    \ numbers)\n            (rolling_max (cdr numbers)))))\n", "  (define (rolling_max_helper\
    \ numbers max-so-far)\n    (if (null? numbers)\n        '()\n        (cons (max\
    \ (car numbers) max-so-far)\n              (rolling_max_helper (cdr numbers) (max\
    \ (car numbers) max-so-far)))))\n  (rolling_max_helper numbers (car numbers)))\n",
  "  (if (null? numbers)\n      '()\n      (cons (apply max numbers)\n           \
    \ (rolling_max (cdr numbers)))))\n", "  (define (rolling_max_iter maxes numbers)\n\
    \    (cond\n      [(empty? numbers) (reverse maxes)]\n      [else\n       (define\
    \ current-max (first numbers))\n       (define maxes (cons current-max maxes))\n\
    \       (define numbers (rest numbers))\n       (rolling_max_iter maxes numbers)]))\n\
    \  (rolling_max_iter (list (first numbers)) (rest numbers)))\n", "  (let loop\
    \ ([numbers numbers]\n             [max-so-far (first numbers)]\n            \
    \ [result (list max-so-far)])\n    (if (null? (rest numbers))\n        result\n\
    \        (loop (rest numbers)\n              (if (&gt; (first numbers) max-so-far)\n\
    \                  (first numbers)\n                  max-so-far)\n          \
    \    (cons (if (&gt; (first numbers) max-so-far)\n                        (first\
    \ numbers)\n                        max-so-far)\n                    result)))))\n",
  "  (if (empty? numbers)\n      '()\n      (cons (apply max numbers)\n          \
    \  (rolling_max (rest numbers)))))\n", "  (let loop ([numbers numbers]\n     \
    \        [max-so-far (car numbers)]\n             [result (list max-so-far)])\n\
    \    (if (null? (cdr numbers))\n        result\n        (loop (cdr numbers)\n\
    \              (max max-so-far (cadr numbers))\n              (cons (max max-so-far\
    \ (cadr numbers)) result)))))\n", "  (let loop ([numbers numbers]\n          \
    \   [max-so-far (car numbers)]\n             [result (list max-so-far)])\n   \
    \ (if (null? (cdr numbers))\n        result\n        (loop (cdr numbers)\n   \
    \           (max max-so-far (cadr numbers))\n              (cons (max max-so-far\
    \ (cadr numbers)) result)))))\n", "  (define (rolling_max_iter numbers max-so-far)\n\
    \    (if (null? numbers)\n        '()\n        (cons max-so-far (rolling_max_iter\
    \ (cdr numbers) (max max-so-far (car numbers))))))\n  (rolling_max_iter numbers\
    \ (car numbers)))\n", "  (define (rolling_max_iter numbers max-so-far)\n    (cond\n\
    \      [(empty? numbers) '()]\n      [(> (first numbers) max-so-far)\n       (cons\
    \ (first numbers) (rolling_max_iter (rest numbers) (first numbers)))]\n      [else\n\
    \       (cons max-so-far (rolling_max_iter (rest numbers) max-so-far))]))\n  (rolling_max_iter\
    \ numbers (first numbers)))\n", "  (let loop ([numbers numbers]\n            \
    \ [max-numbers '()])\n    (if (null? numbers)\n        (reverse max-numbers)\n\
    \        (let ([max (apply max numbers)])\n          (loop (cdr numbers)\n   \
    \             (cons max max-numbers))))))\n", "  (define (rolling_max_iter numbers\
    \ max-so-far)\n    (if (null? numbers)\n        '()\n        (let ([next-max (max\
    \ (car numbers) max-so-far)])\n          (cons next-max (rolling_max_iter (cdr\
    \ numbers) next-max)))))\n  (rolling_max_iter numbers (car numbers)))\n", "  (let\
    \ loop ([numbers numbers]\n             [max-so-far (car numbers)]\n         \
    \    [result (list max-so-far)])\n    (if (null? (cdr numbers))\n        result\n\
    \        (loop (cdr numbers)\n              (max max-so-far (cadr numbers))\n\
    \              (cons (max max-so-far (cadr numbers)) result)))))\n", "  (let loop\
    \ ([numbers numbers]\n             [max-so-far (first numbers)]\n            \
    \ [result (list max-so-far)])\n    (if (null? (rest numbers))\n        result\n\
    \        (loop (rest numbers)\n              (if (&gt; (first numbers) max-so-far)\n\
    \                  (first numbers)\n                  max-so-far)\n          \
    \    (cons (if (&gt; (first numbers) max-so-far)\n                        (first\
    \ numbers)\n                        max-so-far)\n                    result)))))\n",
  "  (let loop ([numbers numbers]\n             [acc '()])\n    (cond [(empty? numbers)\
    \ (reverse acc)]\n          [else (let ([max (apply max numbers)])\n         \
    \         (loop (rest numbers) (cons max acc)))])))\n", "  (define (rolling_max_iter\
    \ numbers maxes)\n    (if (null? numbers)\n        maxes\n        (rolling_max_iter\
    \ (cdr numbers) (cons (max (car numbers) (car maxes)) maxes))))\n  (reverse (rolling_max_iter\
    \ numbers (list (car numbers)))))\n", "  (if (null? numbers)\n      '()\n    \
    \  (cons (apply max numbers)\n            (rolling_max (cdr numbers)))))\n", " \
    \ (let loop ([numbers numbers]\n             [max-so-far 0]\n             [accumulator\
    \ '()])\n    (cond\n      [(empty? numbers) (reverse accumulator)]\n      [(>\
    \ (first numbers) max-so-far)\n       (loop (rest numbers)\n             (first\
    \ numbers)\n             (cons (first numbers) accumulator))]\n      [else\n \
    \      (loop (rest numbers)\n             max-so-far\n             (cons max-so-far\
    \ accumulator))])))\n", "  (define (rolling_max_iter numbers max-so-far)\n   \
    \ (if (null? numbers)\n        '()\n        (cons max-so-far (rolling_max_iter\
    \ (cdr numbers) (max max-so-far (car numbers))))))\n  (rolling_max_iter numbers\
    \ (car numbers)))\n", "  (if (null? numbers)\n      '()\n      (cons (max (car\
    \ numbers) (car (rolling_max (cdr numbers))))\n            (rolling_max (cdr numbers)))))\n",
  "  (define (rolling_max_iter numbers max-so-far)\n    (cond\n      [(empty? numbers)\
    \ '()]\n      [(> (first numbers) max-so-far)\n       (cons (first numbers) (rolling_max_iter\
    \ (rest numbers) (first numbers)))]\n      [else\n       (cons max-so-far (rolling_max_iter\
    \ (rest numbers) max-so-far))]))\n  (rolling_max_iter numbers (first numbers)))\n",
  "  (let loop ([numbers numbers]\n             [max-so-far (car numbers)]\n     \
    \        [result (list max-so-far)])\n    (if (null? (cdr numbers))\n        result\n\
    \        (loop (cdr numbers)\n              (max max-so-far (cadr numbers))\n\
    \              (cons (max max-so-far (cadr numbers)) result)))))\n", "  (define\
    \ (rolling_max_iter numbers max-so-far)\n    (cond\n      [(empty? numbers) '()]\n\
    \      [(> (first numbers) max-so-far)\n       (cons (first numbers) (rolling_max_iter\
    \ (rest numbers) (first numbers)))]\n      [else\n       (cons max-so-far (rolling_max_iter\
    \ (rest numbers) max-so-far))]))\n  (rolling_max_iter numbers (first numbers)))\n",
  "  (let loop ([numbers numbers]\n             [max-so-far 0]\n             [result\
    \ '()])\n    (if (null? numbers)\n        (reverse result)\n        (let ([current-max\
    \ (max (car numbers) max-so-far)])\n          (loop (cdr numbers)\n          \
    \      current-max\n                (cons current-max result))))))\n", "  (define\
    \ (rolling_max_iter numbers maxes)\n    (if (null? numbers)\n        maxes\n \
    \       (rolling_max_iter (cdr numbers) (cons (max (car numbers) (car maxes))\
    \ maxes))))\n  (reverse (rolling_max_iter numbers (list (car numbers)))))\n",
  "  (define (rolling_max_iter numbers max-so-far)\n    (if (null? numbers)\n    \
    \    '()\n        (cons (if (&gt; (car numbers) max-so-far)\n                \
    \  (car numbers)\n                  max-so-far)\n              (rolling_max_iter\
    \ (cdr numbers)\n                                (if (&gt; (car numbers) max-so-far)\n\
    \                                    (car numbers)\n                         \
    \           max-so-far)))))\n  (rolling_max_iter numbers (car numbers)))\n", " \
    \ (define (rolling_max_iter numbers max-so-far)\n    (if (null? numbers)\n   \
    \     '()\n        (cons max-so-far (rolling_max_iter (cdr numbers) (max max-so-far\
    \ (car numbers))))))\n  (rolling_max_iter numbers (car numbers)))\n", "  (if (null?\
    \ numbers)\n      '()\n      (cons (apply max numbers)\n            (rolling_max\
    \ (cdr numbers)))))\n", "  (let loop ([numbers numbers]\n             [max-so-far\
    \ (car numbers)]\n             [accumulator (list max-so-far)])\n    (if (null?\
    \ numbers)\n        accumulator\n        (loop (cdr numbers)\n              (if\
    \ (&gt; (car numbers) max-so-far)\n                  (car numbers)\n         \
    \         max-so-far)\n              (cons max-so-far accumulator)))))\n", " \
    \ (define (rolling_max_iter numbers maxes)\n    (if (null? numbers)\n        maxes\n\
    \        (rolling_max_iter (cdr numbers)\n                          (cons (max\
    \ (car numbers) (car maxes)) maxes))))\n  (reverse (rolling_max_iter numbers (list\
    \ (car numbers)))))\n", "  (define (rolling_max_iter numbers maxes)\n    (cond\n\
    \      [(empty? numbers) maxes]\n      [(empty? maxes) (rolling_max_iter (rest\
    \ numbers) (list (first numbers)))]\n      [else (rolling_max_iter (rest numbers)\
    \ (append maxes (list (max (first numbers) (first maxes)))))]))\n  (rolling_max_iter\
    \ numbers '()))\n", "  (let loop ([numbers numbers]\n             [max-so-far\
    \ (first numbers)]\n             [result (list max-so-far)])\n    (if (null? (rest\
    \ numbers))\n        result\n        (loop (rest numbers)\n              (if (max?\
    \ (first numbers) max-so-far)\n                  (first numbers)\n           \
    \       max-so-far)\n              (cons (if (max? (first numbers) max-so-far)\n\
    \                        (first numbers)\n                        max-so-far)\n\
    \                    result)))))\n", "  (let loop ([numbers numbers]\n       \
    \      [max-so-far -inf.0]\n             [accumulator '()])\n    (cond [(empty?\
    \ numbers) (reverse accumulator)]\n          [(> (first numbers) max-so-far)\n\
    \           (loop (rest numbers)\n                 (first numbers)\n         \
    \        (cons (first numbers) accumulator))]\n          [else\n           (loop\
    \ (rest numbers)\n                 max-so-far\n                 (cons max-so-far\
    \ accumulator))])))\n", "  (define (rolling_max-iter numbers max-so-far)\n   \
    \ (if (null? numbers)\n        '()\n        (let ([max-so-far (max (car numbers)\
    \ max-so-far)])\n          (cons max-so-far (rolling_max-iter (cdr numbers) max-so-far)))))\n\
    \  (rolling_max-iter numbers (car numbers)))\n", "  (define (rolling_max_iter\
    \ numbers maxes)\n    (if (null? numbers)\n        maxes\n        (rolling_max_iter\
    \ (cdr numbers) (cons (max (car numbers) (car maxes)) maxes))))\n  (reverse (rolling_max_iter\
    \ numbers (list (car numbers)))))\n", "  (define (rolling_max_iter max-so-far\
    \ numbers)\n    (cond\n      [(empty? numbers) empty]\n      [(> (first numbers)\
    \ max-so-far)\n       (cons (first numbers) (rolling_max_iter (first numbers)\
    \ (rest numbers)))]\n      [else\n       (cons max-so-far (rolling_max_iter max-so-far\
    \ (rest numbers)))]))\n  (rolling_max_iter (first numbers) (rest numbers)))\n",
  "  (define (rolling_max_iter numbers max-so-far)\n    (if (null? numbers)\n    \
    \    '()\n        (cons (max (car numbers) max-so-far)\n              (rolling_max_iter\
    \ (cdr numbers) (max (car numbers) max-so-far)))))\n  (rolling_max_iter numbers\
    \ 0))\n", "  (define (rolling_max_iter numbers max)\n    (cond\n      [(empty?\
    \ numbers) empty]\n      [(> (first numbers) max) (cons (first numbers) (rolling_max_iter\
    \ (rest numbers) (first numbers)))]\n      [else (cons max (rolling_max_iter (rest\
    \ numbers) max))]))\n  (rolling_max_iter numbers (first numbers)))\n", "  (define\
    \ (rolling_max-iter numbers max-so-far)\n    (if (null? numbers)\n        '()\n\
    \        (cons max-so-far (rolling_max-iter (cdr numbers) (max max-so-far (car\
    \ numbers))))))\n  (rolling_max-iter numbers (car numbers)))\n", "  (let loop\
    \ ([numbers numbers]\n             [max-so-far (car numbers)]\n             [result\
    \ (list max-so-far)])\n    (cond [(empty? numbers) (reverse result)]\n       \
    \   [(> (car numbers) max-so-far)\n           (loop (cdr numbers)\n          \
    \       (car numbers)\n                 (cons (car numbers) result))]\n      \
    \    [else\n           (loop (cdr numbers)\n                 max-so-far\n    \
    \             (cons max-so-far result))])))\n", "  (if (null? numbers)\n     \
    \ '()\n      (cons (apply max numbers)\n            (rolling_max (cdr numbers)))))\n",
  "  (define (rolling_max_iter numbers max-so-far)\n    (cond\n      [(empty? numbers)\
    \ '()]\n      [(> (first numbers) max-so-far)\n       (cons (first numbers) (rolling_max_iter\
    \ (rest numbers) (first numbers)))]\n      [else\n       (cons max-so-far (rolling_max_iter\
    \ (rest numbers) max-so-far))]))\n  (rolling_max_iter numbers (first numbers)))\n",
  "  (define (rolling_max_iter numbers max-so-far)\n    (if (null? numbers)\n    \
    \    '()\n        (cons (max (car numbers) max-so-far)\n              (rolling_max_iter\
    \ (cdr numbers) (max (car numbers) max-so-far)))))\n  (rolling_max_iter numbers\
    \ 0))\n", "  (if (null? numbers)\n      '()\n      (cons (apply max numbers)\n\
    \            (rolling_max (cdr numbers)))))\n", "  (define (rolling_max_iter max-so-far\
    \ numbers)\n    (cond\n      [(empty? numbers) '()]\n      [(> (first numbers)\
    \ max-so-far)\n       (cons (first numbers) (rolling_max_iter (first numbers)\
    \ (rest numbers)))]\n      [else\n       (cons max-so-far (rolling_max_iter max-so-far\
    \ (rest numbers)))]))\n  (rolling_max_iter (first numbers) (rest numbers)))\n",
  "  (define (rolling_max_iter numbers max-so-far)\n    (if (null? numbers)\n    \
    \    '()\n        (cons (max (car numbers) max-so-far)\n              (rolling_max_iter\
    \ (cdr numbers) (max (car numbers) max-so-far)))))\n  (rolling_max_iter numbers\
    \ (car numbers)))\n", "  (define (rolling_max_iter numbers max-so-far)\n    (cond\n\
    \      [(empty? numbers) '()]\n      [(> (first numbers) max-so-far)\n       (cons\
    \ (first numbers) (rolling_max_iter (rest numbers) (first numbers)))]\n      [else\n\
    \       (cons max-so-far (rolling_max_iter (rest numbers) max-so-far))]))\n  (rolling_max_iter\
    \ numbers (first numbers)))\n", "  (define (rolling_max_iter numbers max-so-far)\n\
    \    (if (null? numbers)\n        '()\n        (cons (if (&gt; (car numbers) max-so-far)\n\
    \                  (car numbers)\n                  max-so-far)\n            \
    \  (rolling_max_iter (cdr numbers) (if (&gt; (car numbers) max-so-far)\n     \
    \                                             (car numbers)\n                \
    \                                  max-so-far)))))\n  (rolling_max_iter numbers\
    \ (car numbers)))\n", "  (let loop ([numbers numbers]\n             [accumulator\
    \ '()])\n    (cond [(empty? numbers) (reverse accumulator)]\n          [else (let\
    \ ([max (apply max (cons (first numbers) accumulator))])\n                  (loop\
    \ (rest numbers) (cons max accumulator)))])))\n", "  (define (rolling_max_iter\
    \ numbers max-so-far)\n    (cond\n      [(empty? numbers) '()]\n      [(> (first\
    \ numbers) max-so-far)\n       (cons (first numbers) (rolling_max_iter (rest numbers)\
    \ (first numbers)))]\n      [else\n       (cons max-so-far (rolling_max_iter (rest\
    \ numbers) max-so-far))]))\n  (rolling_max_iter numbers (first numbers)))\n",
  "  (if (null? numbers)\n      '()\n      (cons (apply max numbers)\n           \
    \ (rolling_max (cdr numbers)))))\n", "  (define (rolling_max_iter numbers max-so-far)\n\
    \    (cond\n      [(empty? numbers) '()]\n      [(> (first numbers) max-so-far)\n\
    \       (cons (first numbers) (rolling_max_iter (rest numbers) (first numbers)))]\n\
    \      [else\n       (cons max-so-far (rolling_max_iter (rest numbers) max-so-far))]))\n\
    \  (rolling_max_iter numbers (first numbers)))\n", "  (define (rolling_max-iter\
    \ numbers max-so-far)\n    (if (null? numbers)\n        '()\n        (cons (max\
    \ (car numbers) max-so-far)\n              (rolling_max-iter (cdr numbers) (max\
    \ (car numbers) max-so-far)))))\n  (rolling_max-iter numbers 0))\n", "  (let loop\
    \ ([numbers numbers]\n             [max-so-far (car numbers)]\n             [accumulator\
    \ (list max-so-far)])\n    (if (null? numbers)\n        accumulator\n        (loop\
    \ (cdr numbers)\n              (if (&gt; (car numbers) max-so-far)\n         \
    \         (car numbers)\n                  max-so-far)\n              (cons max-so-far\
    \ accumulator)))))\n", "  (define (rolling_max_iter numbers max-so-far)\n    (cond\n\
    \      [(empty? numbers) '()]\n      [(> (first numbers) max-so-far)\n       (cons\
    \ (first numbers) (rolling_max_iter (rest numbers) (first numbers)))]\n      [else\n\
    \       (cons max-so-far (rolling_max_iter (rest numbers) max-so-far))]))\n  (rolling_max_iter\
    \ numbers (first numbers)))\n", "  (define (rolling_max_iter numbers max-so-far)\n\
    \    (cond\n      [(empty? numbers) '()]\n      [(> (first numbers) max-so-far)\n\
    \       (cons (first numbers) (rolling_max_iter (rest numbers) (first numbers)))]\n\
    \      [else\n       (cons max-so-far (rolling_max_iter (rest numbers) max-so-far))]))\n\
    \  (rolling_max_iter numbers (first numbers)))\n", "  (if (null? numbers)\n  \
    \    '()\n      (cons (apply max numbers)\n            (rolling_max (cdr numbers)))))\n",
  "  (define (rolling_max_iter numbers max-so-far)\n    (if (null? numbers)\n    \
    \    '()\n        (cons (max (car numbers) max-so-far)\n              (rolling_max_iter\
    \ (cdr numbers) (max (car numbers) max-so-far)))))\n  (rolling_max_iter numbers\
    \ 0))\n", "  (define (rolling_max_helper numbers max-so-far)\n    (cond\n    \
    \  [(empty? numbers) empty]\n      [(> (first numbers) max-so-far)\n       (cons\
    \ (first numbers) (rolling_max_helper (rest numbers) (first numbers)))]\n    \
    \  [else\n       (cons max-so-far (rolling_max_helper (rest numbers) max-so-far))]))\n\
    \  (rolling_max_helper numbers (first numbers)))\n", "  (define (rolling_max_iter\
    \ numbers max-so-far)\n    (if (null? numbers)\n        '()\n        (cons max-so-far\
    \ (rolling_max_iter (cdr numbers) (max max-so-far (car numbers))))))\n  (rolling_max_iter\
    \ numbers (car numbers)))\n", "  (if (null? numbers)\n      '()\n      (cons (apply\
    \ max numbers)\n            (rolling_max (cdr numbers)))))\n", "  (define (rolling_max_iter\
    \ numbers max-so-far)\n    (if (null? numbers)\n        '()\n        (cons max-so-far\
    \ (rolling_max_iter (cdr numbers) (max max-so-far (car numbers))))))\n  (rolling_max_iter\
    \ numbers (car numbers)))\n", "  (if (empty? numbers)\n      '()\n      (cons\
    \ (apply max numbers)\n            (rolling_max (rest numbers)))))\n", "  (let\
    \ loop ([numbers numbers]\n             [maxes '()])\n    (cond [(empty? numbers)\
    \ (reverse maxes)]\n          [else (let ([max (max (first numbers) (or (first\
    \ maxes) 0))])\n                  (loop (rest numbers) (cons max maxes)))])))\n",
  "  (if (null? numbers)\n      '()\n      (cons (max (car numbers) (car (rolling_max\
    \ (cdr numbers))))\n            (rolling_max (cdr numbers)))))\n", "  (define\
    \ (rolling_max_iter numbers maxes)\n    (if (null? numbers)\n        maxes\n \
    \       (rolling_max_iter (cdr numbers) (cons (max (car numbers) (car maxes))\
    \ maxes))))\n  (reverse (rolling_max_iter numbers (list (car numbers)))))\n",
  "  (let loop ([numbers numbers]\n             [max-so-far (first numbers)]\n   \
    \          [accumulator (list max-so-far)])\n    (if (null? numbers)\n       \
    \ accumulator\n        (loop (rest numbers)\n              (if (&gt; (first numbers)\
    \ max-so-far)\n                  (first numbers)\n                  max-so-far)\n\
    \              (cons (if (&gt; (first numbers) max-so-far)\n                 \
    \       (first numbers)\n                        max-so-far)\n               \
    \     accumulator)))))\n", "  (if (null? numbers)\n      '()\n      (cons (apply\
    \ max numbers)\n            (rolling_max (cdr numbers)))))\n", "  (let loop ([numbers\
    \ numbers]\n             [acc '()])\n    (if (null? numbers)\n        (reverse\
    \ acc)\n        (loop (cdr numbers)\n              (cons (max (car numbers) (car\
    \ acc)) acc)))))\n", "  (define (rolling_max_iter numbers maxes)\n    (cond [(empty?\
    \ numbers) (reverse maxes)]\n          [else (rolling_max_iter (rest numbers)\n\
    \                                  (cons (max (first numbers) (first maxes)) maxes))]))\n\
    \  (rolling_max_iter (rest numbers) (list (first numbers))))\n", "  (define (rolling_max_iter\
    \ numbers max-so-far)\n    (if (null? numbers)\n        '()\n        (cons max-so-far\
    \ (rolling_max_iter (cdr numbers) (max max-so-far (car numbers))))))\n  (rolling_max_iter\
    \ numbers (car numbers)))\n", "  (define (rolling_max_iter numbers maxes)\n  \
    \  (if (null? numbers)\n        (reverse maxes)\n        (rolling_max_iter (cdr\
    \ numbers) (cons (max (car numbers) (car maxes)) maxes))))\n  (rolling_max_iter\
    \ (cdr numbers) (list (car numbers))))\n", "  (define (rolling_max_iter numbers\
    \ max-so-far)\n    (if (null? numbers)\n        '()\n        (cons (max (car numbers)\
    \ max-so-far)\n              (rolling_max_iter (cdr numbers) (max (car numbers)\
    \ max-so-far)))))\n  (rolling_max_iter numbers 0))\n", "  (define (rolling_max-iter\
    \ numbers max-so-far)\n    (if (null? numbers)\n        '()\n        (cons max-so-far\
    \ (rolling_max-iter (cdr numbers) (max max-so-far (car numbers))))))\n  (rolling_max-iter\
    \ numbers (car numbers)))\n", "  (let loop ([numbers numbers]\n             [maxs\
    \ '()])\n    (cond [(empty? numbers) (reverse maxs)]\n          [(empty? maxs)\
    \ (loop (rest numbers) (list (first numbers)))]\n          [else (loop (rest numbers)\
    \ (cons (max (first numbers) (first maxs)) maxs))])))\n", "  (define (rolling_max_iter\
    \ max-so-far numbers)\n    (if (null? numbers)\n        '()\n        (cons max-so-far\
    \ (rolling_max_iter (max max-so-far (car numbers)) (cdr numbers)))))\n  (rolling_max_iter\
    \ (car numbers) (cdr numbers)))\n", "  (let loop ([numbers numbers]\n        \
    \     [max-so-far 0]\n             [result '()])\n    (if (null? numbers)\n  \
    \      (reverse result)\n        (let ([current-max (max (car numbers) max-so-far)])\n\
    \          (loop (cdr numbers)\n                current-max\n                (cons\
    \ current-max result))))))\n", "  (define (rolling_max_iter numbers max-so-far)\n\
    \    (if (null? numbers)\n        '()\n        (cons max-so-far (rolling_max_iter\
    \ (cdr numbers) (max max-so-far (car numbers))))))\n  (rolling_max_iter numbers\
    \ (car numbers)))\n", "  (define (rolling-max-iter numbers max-so-far)\n    (if\
    \ (null? numbers)\n        '()\n        (cons max-so-far (rolling-max-iter (cdr\
    \ numbers) (max max-so-far (car numbers))))))\n  (rolling-max-iter numbers (car\
    \ numbers)))\n", "  (let loop ([numbers numbers]\n             [max-so-far -1]\n\
    \             [result '()])\n    (cond\n      [(empty? numbers) (reverse result)]\n\
    \      [(> (first numbers) max-so-far)\n       (loop (rest numbers)\n        \
    \     (first numbers)\n             (cons (first numbers) result))]\n      [else\n\
    \       (loop (rest numbers)\n             max-so-far\n             (cons max-so-far\
    \ result))])))\n", "  (define (rolling-max-helper numbers max-so-far)\n    (if\
    \ (null? numbers)\n        '()\n        (cons (max (car numbers) max-so-far)\n\
    \              (rolling-max-helper (cdr numbers) (max (car numbers) max-so-far)))))\n\
    \  (rolling-max-helper numbers 0))\n", "  (let loop ([numbers numbers]\n     \
    \        [max-so-far (first numbers)]\n             [result (list max-so-far)])\n\
    \    (if (null? (rest numbers))\n        result\n        (loop (rest numbers)\n\
    \              (max max-so-far (first (rest numbers)))\n              (append\
    \ result (list (max max-so-far (first (rest numbers)))))))))\n", "  (define (rolling-max-helper\
    \ numbers max-so-far)\n    (if (null? numbers)\n        '()\n        (cons (max\
    \ (car numbers) max-so-far)\n              (rolling-max-helper (cdr numbers) (max\
    \ (car numbers) max-so-far)))))\n  (rolling-max-helper numbers 0))\n", "  (let\
    \ loop ([numbers numbers]\n             [max-so-far (car numbers)]\n         \
    \    [result (list max-so-far)])\n    (if (null? (cdr numbers))\n        result\n\
    \        (loop (cdr numbers)\n              (max max-so-far (cadr numbers))\n\
    \              (cons (max max-so-far (cadr numbers)) result)))))\n", "  (let loop\
    \ ([numbers numbers]\n             [max-so-far (car numbers)]\n             [result\
    \ (list max-so-far)])\n    (if (null? (cdr numbers))\n        result\n       \
    \ (loop (cdr numbers)\n              (max max-so-far (cadr numbers))\n       \
    \       (cons (max max-so-far (cadr numbers)) result)))))\n", "  (let loop ([numbers\
    \ numbers]\n             [acc '()])\n    (if (null? numbers)\n        (reverse\
    \ acc)\n        (loop (cdr numbers)\n              (cons (max (car numbers) (car\
    \ acc)) acc)))))\n", "  (if (null? numbers)\n      '()\n      (cons (apply max\
    \ numbers)\n            (rolling_max (cdr numbers)))))\n", "  (define (rolling-max-helper\
    \ numbers max-so-far)\n    (cond\n      [(empty? numbers) '()]\n      [(> (first\
    \ numbers) max-so-far)\n       (cons (first numbers) (rolling-max-helper (rest\
    \ numbers) (first numbers)))]\n      [else\n       (cons max-so-far (rolling-max-helper\
    \ (rest numbers) max-so-far))]))\n  (rolling-max-helper numbers (first numbers)))\n",
  "  (let loop ([numbers numbers]\n             [max-so-far (first numbers)]\n   \
    \          [result (list max-so-far)])\n    (if (null? (rest numbers))\n     \
    \   result\n        (loop (rest numbers)\n              (if (&gt; (first numbers)\
    \ max-so-far)\n                  (first numbers)\n                  max-so-far)\n\
    \              (cons (if (&gt; (first numbers) max-so-far)\n                 \
    \       (first numbers)\n                        max-so-far)\n               \
    \     result)))))\n", "  (define (rolling-max-helper numbers max-so-far)\n   \
    \ (if (null? numbers)\n        '()\n        (cons (max (car numbers) max-so-far)\n\
    \              (rolling-max-helper (cdr numbers) (max (car numbers) max-so-far)))))\n\
    \  (rolling-max-helper numbers 0))\n", "  (let loop ([numbers numbers]\n     \
    \        [max-so-far (car numbers)]\n             [result (list max-so-far)])\n\
    \    (if (null? (cdr numbers))\n        result\n        (loop (cdr numbers)\n\
    \              (max max-so-far (cadr numbers))\n              (cons (max max-so-far\
    \ (cadr numbers)) result)))))\n", "  (define (rolling-max-helper numbers max-so-far)\n\
    \    (if (null? numbers)\n        '()\n        (cons (max (car numbers) max-so-far)\n\
    \              (rolling-max-helper (cdr numbers) (max (car numbers) max-so-far)))))\n\
    \  (rolling-max-helper numbers 0))\n", "  (if (null? numbers)\n      '()\n   \
    \   (cons (apply max numbers)\n            (rolling_max (cdr numbers)))))\n",
  "  (define (rolling-max-helper numbers max-so-far)\n    (if (null? numbers)\n  \
    \      '()\n        (cons (max (car numbers) max-so-far)\n              (rolling-max-helper\
    \ (cdr numbers) (max (car numbers) max-so-far)))))\n  (rolling-max-helper numbers\
    \ 0))\n", "  (let loop ([numbers numbers]\n             [max-so-far (first numbers)]\n\
    \             [result (list max-so-far)])\n    (if (null? (rest numbers))\n  \
    \      result\n        (loop (rest numbers)\n              (if (&gt; (first numbers)\
    \ max-so-far)\n                  (first numbers)\n                  max-so-far)\n\
    \              (cons (if (&gt; (first numbers) max-so-far)\n                 \
    \       (first numbers)\n                        max-so-far)\n               \
    \     result)))))\n", "  (define (rolling-max-iter max-so-far numbers)\n    (cond\n\
    \      [(empty? numbers) empty]\n      [(> (first numbers) max-so-far)\n     \
    \  (cons (first numbers) (rolling-max-iter (first numbers) (rest numbers)))]\n\
    \      [else\n       (cons max-so-far (rolling-max-iter max-so-far (rest numbers)))]))\n\
    \  (rolling-max-iter (first numbers) (rest numbers)))\n", "  (define (rolling-max-iter\
    \ numbers max-so-far)\n    (if (null? numbers)\n        '()\n        (cons max-so-far\
    \ (rolling-max-iter (cdr numbers) (max max-so-far (car numbers))))))\n  (rolling-max-iter\
    \ numbers (car numbers)))\n", "  (define (rolling-max-helper numbers max-so-far)\n\
    \    (if (null? numbers)\n        '()\n        (cons (max (car numbers) max-so-far)\n\
    \              (rolling-max-helper (cdr numbers) (max (car numbers) max-so-far)))))\n\
    \  (rolling-max-helper numbers 0))\n", "  (define (rolling-max-helper numbers\
    \ max-so-far)\n    (if (null? numbers)\n        '()\n        (cons (max (car numbers)\
    \ max-so-far)\n              (rolling-max-helper (cdr numbers) (max (car numbers)\
    \ max-so-far)))))\n  (rolling-max-helper numbers 0))\n", "  (define (rolling-max-iter\
    \ numbers max-so-far)\n    (cond\n      [(empty? numbers) '()]\n      [(> (first\
    \ numbers) max-so-far)\n       (cons (first numbers) (rolling-max-iter (rest numbers)\
    \ (first numbers)))]\n      [else\n       (cons max-so-far (rolling-max-iter (rest\
    \ numbers) max-so-far))]))\n  (rolling-max-iter numbers (first numbers)))\n",
  "  (define (rolling-max-helper numbers max-so-far)\n    (if (null? numbers)\n  \
    \      '()\n        (cons (max (car numbers) max-so-far)\n              (rolling-max-helper\
    \ (cdr numbers) (max (car numbers) max-so-far)))))\n  (rolling-max-helper numbers\
    \ (car numbers)))\n", "  (if (null? numbers)\n      '()\n      (cons (apply max\
    \ numbers)\n            (rolling_max (cdr numbers)))))\n", "  (define (rolling-max-helper\
    \ numbers max-so-far)\n    (if (null? numbers)\n        '()\n        (cons (max\
    \ (car numbers) max-so-far)\n              (rolling-max-helper (cdr numbers) (max\
    \ (car numbers) max-so-far)))))\n  (rolling-max-helper numbers 0))\n", "  (if\
    \ (null? numbers)\n      '()\n      (cons (apply max numbers)\n            (rolling_max\
    \ (cdr numbers)))))\n", "  (let loop ([numbers numbers]\n             [max-so-far\
    \ (car numbers)]\n             [result (list max-so-far)])\n    (if (null? (cdr\
    \ numbers))\n        result\n        (loop (cdr numbers)\n              (max max-so-far\
    \ (cadr numbers))\n              (cons (max max-so-far (cadr numbers)) result)))))\n",
  "  (define (rolling-max-helper numbers max-so-far)\n    (if (null? numbers)\n  \
    \      '()\n        (cons (max (car numbers) max-so-far)\n              (rolling-max-helper\
    \ (cdr numbers) (max (car numbers) max-so-far)))))\n  (rolling-max-helper numbers\
    \ 0))\n", "  (if (null? numbers)\n      '()\n      (cons (apply max numbers)\n\
    \            (rolling_max (cdr numbers)))))\n", "  (define (rolling-max-helper\
    \ numbers max-so-far)\n    (if (null? numbers)\n        '()\n        (cons (max\
    \ (car numbers) max-so-far)\n              (rolling-max-helper (cdr numbers) (max\
    \ (car numbers) max-so-far)))))\n  (rolling-max-helper numbers 0))\n", "  (define\
    \ (rolling-max-iter numbers max-so-far)\n    (cond\n      [(empty? numbers) '()]\n\
    \      [(> (first numbers) max-so-far)\n       (cons (first numbers) (rolling-max-iter\
    \ (rest numbers) (first numbers)))]\n      [else\n       (cons max-so-far (rolling-max-iter\
    \ (rest numbers) max-so-far))]))\n  (rolling-max-iter numbers (first numbers)))\n",
  "  (define (iter max-so-far numbers)\n    (if (null? numbers)\n        '()\n   \
    \     (cons (max max-so-far (car numbers))\n              (iter (max max-so-far\
    \ (car numbers)) (cdr numbers)))))\n  (iter -1 numbers))\n", "  (if (null? numbers)\n\
    \      '()\n      (cons (apply max numbers)\n            (rolling_max (cdr numbers)))))\n",
  "  (let loop ([numbers numbers]\n             [acc '()])\n    (cond [(empty? numbers)\
    \ (reverse acc)]\n          [else (loop (rest numbers)\n                     \
    \ (cons (max (first numbers) (or (first acc) (first numbers)))\n             \
    \               acc))])))\n", "  (if (null? numbers)\n      '()\n      (cons (apply\
    \ max numbers)\n            (rolling_max (cdr numbers)))))\n", "  (define (rolling_max_iter\
    \ numbers max-so-far)\n    (cond\n      [(empty? numbers) max-so-far]\n      [(>\
    \ (first numbers) (first max-so-far))\n       (rolling_max_iter (rest numbers)\
    \ (cons (first numbers) max-so-far))]\n      [else\n       (rolling_max_iter (rest\
    \ numbers) (cons (first max-so-far) max-so-far))]))\n  (reverse (rolling_max_iter\
    \ numbers (list (first numbers)))))\n", "  (let loop ([numbers numbers]\n    \
    \         [max-so-far 0]\n             [result '()])\n    (if (null? numbers)\n\
    \        (reverse result)\n        (let ([n (car numbers)])\n          (if (&gt;\
    \ n max-so-far)\n              (loop (cdr numbers) n (cons n result))\n      \
    \        (loop (cdr numbers) max-so-far (cons max-so-far result)))))))\n", " \
    \ (let loop ([numbers numbers]\n             [max-so-far (car numbers)]\n    \
    \         [result (list max-so-far)])\n    (if (null? (cdr numbers))\n       \
    \ result\n        (loop (cdr numbers)\n              (max max-so-far (cadr numbers))\n\
    \              (cons (max max-so-far (cadr numbers)) result)))))\n", "  (define\
    \ (rolling_max_iter numbers max-so-far)\n    (cond\n      [(empty? numbers) '()]\n\
    \      [(> (first numbers) max-so-far)\n       (cons (first numbers) (rolling_max_iter\
    \ (rest numbers) (first numbers)))]\n      [else\n       (cons max-so-far (rolling_max_iter\
    \ (rest numbers) max-so-far))]))\n  (rolling_max_iter numbers (first numbers)))\n",
  "  (define (rolling_max_iter numbers max-so-far)\n    (cond\n      [(empty? numbers)\
    \ max-so-far]\n      [(> (first numbers) (first max-so-far))\n       (rolling_max_iter\
    \ (rest numbers) (cons (first numbers) max-so-far))]\n      [else\n       (rolling_max_iter\
    \ (rest numbers) (cons (first max-so-far) max-so-far))]))\n  (reverse (rolling_max_iter\
    \ numbers (list (first numbers)))))\n", "  (if (null? numbers)\n      '()\n  \
    \    (cons (apply max numbers)\n            (rolling_max (cdr numbers)))))\n",
  "  (for/fold ([acc '()])\n            ([n numbers])\n            (cons (max n (car\
    \ acc)) acc)))\n", "  (let loop ([numbers numbers]\n             [max-so-far (car\
    \ numbers)]\n             [result (list max-so-far)])\n    (if (null? (cdr numbers))\n\
    \        result\n        (let ([next-max (max max-so-far (cadr numbers))])\n \
    \         (loop (cdr numbers) next-max (cons next-max result))))))\n", "  (let\
    \ loop ([numbers numbers]\n             [max-so-far 0]\n             [result '()])\n\
    \    (if (null? numbers)\n        (reverse result)\n        (let ([max-so-far\
    \ (max (car numbers) max-so-far)])\n          (loop (cdr numbers)\n          \
    \      max-so-far\n                (cons max-so-far result))))))\n", "  (let loop\
    \ ([numbers numbers]\n             [max-so-far (first numbers)]\n            \
    \ [result '()])\n    (if (null? numbers)\n        (reverse result)\n        (loop\
    \ (rest numbers)\n              (if (&gt; (first numbers) max-so-far)\n      \
    \            (first numbers)\n                  max-so-far)\n              (cons\
    \ max-so-far result)))))\n", "  (define (rolling_max_helper numbers max-so-far)\n\
    \    (if (null? numbers)\n        '()\n        (cons (max (car numbers) max-so-far)\n\
    \              (rolling_max_helper (cdr numbers) (max (car numbers) max-so-far)))))\n\
    \  (rolling_max_helper numbers (car numbers)))\n", "  (let loop ([numbers numbers]\n\
    \             [max-so-far (car numbers)]\n             [result (list max-so-far)])\n\
    \    (if (null? (cdr numbers))\n        result\n        (loop (cdr numbers)\n\
    \              (max max-so-far (cadr numbers))\n              (cons (max max-so-far\
    \ (cadr numbers)) result)))))\n", "  (let loop ([numbers numbers]\n          \
    \   [max-so-far -1]\n             [acc '()])\n    (cond [(empty? numbers) (reverse\
    \ acc)]\n          [(> (first numbers) max-so-far)\n           (loop (rest numbers)\n\
    \                 (first numbers)\n                 (cons (first numbers) acc))]\n\
    \          [else\n           (loop (rest numbers)\n                 max-so-far\n\
    \                 (cons max-so-far acc))])))\n", "  (define (rolling_max_iter\
    \ numbers max-so-far)\n    (if (null? numbers)\n        '()\n        (cons (max\
    \ (car numbers) max-so-far)\n              (rolling_max_iter (cdr numbers) (max\
    \ (car numbers) max-so-far)))))\n  (rolling_max_iter numbers 0))\n", "  (let loop\
    \ ([numbers numbers]\n             [max-so-far -1]\n             [acc '()])\n\
    \    (cond [(empty? numbers) (reverse acc)]\n          [(> (first numbers) max-so-far)\n\
    \           (loop (rest numbers)\n                 (first numbers)\n         \
    \        (cons (first numbers) acc))]\n          [else\n           (loop (rest\
    \ numbers)\n                 max-so-far\n                 (cons max-so-far acc))])))\n",
  "  (if (null? numbers)\n      '()\n      (cons (apply max numbers)\n           \
    \ (rolling_max (cdr numbers)))))\n", "  (define (rolling_max_iter numbers max-so-far)\n\
    \    (cond\n      [(empty? numbers) '()]\n      [(> (first numbers) max-so-far)\n\
    \       (cons (first numbers) (rolling_max_iter (rest numbers) (first numbers)))]\n\
    \      [else\n       (cons max-so-far (rolling_max_iter (rest numbers) max-so-far))]))\n\
    \  (rolling_max_iter numbers (first numbers)))\n", "  (let loop ([numbers numbers]\n\
    \             [max-so-far (car numbers)]\n             [result (list max-so-far)])\n\
    \    (if (null? (cdr numbers))\n        result\n        (loop (cdr numbers)\n\
    \              (max max-so-far (cadr numbers))\n              (cons (max max-so-far\
    \ (cadr numbers)) result)))))\n", "  (define (rolling_max_helper numbers max-so-far)\n\
    \    (if (null? numbers)\n        '()\n        (let ([max-so-far (if (&gt; (car\
    \ numbers) max-so-far)\n                              (car numbers)\n        \
    \                      max-so-far)])\n          (cons max-so-far (rolling_max_helper\
    \ (cdr numbers) max-so-far)))))\n  (rolling_max_helper numbers (car numbers)))\n",
  "  (if (null? numbers)\n      '()\n      (cons (apply max numbers)\n           \
    \ (rolling_max (cdr numbers)))))\n", "  (define (iter max-so-far numbers)\n  \
    \  (cond\n      [(empty? numbers) '()]\n      [(> (first numbers) max-so-far)\n\
    \       (cons (first numbers) (iter (first numbers) (rest numbers)))]\n      [else\n\
    \       (cons max-so-far (iter max-so-far (rest numbers)))]))\n  (iter -1 numbers))\n",
  "  (define (rolling_max_iter numbers max-so-far)\n    (cond\n      [(empty? numbers)\
    \ '()]\n      [(> (first numbers) max-so-far)\n       (cons (first numbers) (rolling_max_iter\
    \ (rest numbers) (first numbers)))]\n      [else\n       (cons max-so-far (rolling_max_iter\
    \ (rest numbers) max-so-far))]))\n  (rolling_max_iter numbers (first numbers)))\n",
  "  (define (rolling_max_iter numbers max-so-far)\n    (cond\n      [(empty? numbers)\
    \ '()]\n      [(> (first numbers) max-so-far)\n       (cons (first numbers) (rolling_max_iter\
    \ (rest numbers) (first numbers)))]\n      [else\n       (cons max-so-far (rolling_max_iter\
    \ (rest numbers) max-so-far))]))\n  (rolling_max_iter numbers (first numbers)))\n",
  "  (define (rolling_max_iter numbers max)\n    (if (null? numbers)\n        '()\n\
    \        (cons max (rolling_max_iter (cdr numbers) (max (car numbers) max)))))\n\
    \  (rolling_max_iter numbers (car numbers)))\n", "  (let loop ([numbers numbers]\n\
    \             [max-so-far -1/0]\n             [accum '()])\n    (cond [(empty?\
    \ numbers) (reverse accum)]\n          [(> (first numbers) max-so-far)\n     \
    \      (loop (rest numbers) (first numbers) (cons (first numbers) accum))]\n \
    \         [else\n           (loop (rest numbers) max-so-far (cons max-so-far accum))])))\n",
  "  (if (null? numbers)\n      '()\n      (cons (apply max numbers)\n           \
    \ (rolling_max (cdr numbers)))))\n", "  (define (rolling_max-iter numbers max-so-far)\n\
    \    (cond\n      [(empty? numbers) '()]\n      [(> (first numbers) max-so-far)\n\
    \       (cons (first numbers) (rolling_max-iter (rest numbers) (first numbers)))]\n\
    \      [else\n       (cons max-so-far (rolling_max-iter (rest numbers) max-so-far))]))\n\
    \  (rolling_max-iter numbers (first numbers)))\n", "  (define (rolling_max_iter\
    \ numbers max-so-far)\n    (cond\n      [(empty? numbers) '()]\n      [(> (first\
    \ numbers) max-so-far)\n       (cons (first numbers) (rolling_max_iter (rest numbers)\
    \ (first numbers)))]\n      [else\n       (cons max-so-far (rolling_max_iter (rest\
    \ numbers) max-so-far))]))\n  (rolling_max_iter numbers (first numbers)))\n",
  "  (define (rolling_max_iter numbers max-so-far)\n    (if (null? numbers)\n    \
    \    '()\n        (cons max-so-far (rolling_max_iter (cdr numbers) (max max-so-far\
    \ (car numbers))))))\n  (rolling_max_iter numbers (car numbers)))\n", "  (define\
    \ (rolling_max_helper numbers max-so-far)\n    (if (null? numbers)\n        '()\n\
    \        (cons (max (car numbers) max-so-far)\n              (rolling_max_helper\
    \ (cdr numbers) (max (car numbers) max-so-far)))))\n  (rolling_max_helper numbers\
    \ 0))\n", "  (if (null? numbers)\n      '()\n      (cons (apply max numbers)\n\
    \            (rolling_max (cdr numbers)))))\n", "  (let loop ([numbers numbers]\n\
    \             [max-so-far -1]\n             [result '()])\n    (cond [(empty?\
    \ numbers) (reverse result)]\n          [(> (first numbers) max-so-far)\n    \
    \       (loop (rest numbers)\n                 (first numbers)\n             \
    \    (cons (first numbers) result))]\n          [else\n           (loop (rest\
    \ numbers)\n                 max-so-far\n                 (cons max-so-far result))])))\n",
  "  (if (null? numbers)\n      '()\n      (cons (apply max numbers)\n           \
    \ (rolling_max (cdr numbers)))))\n", "  (define (rolling_max_iter numbers max-so-far)\n\
    \    (if (null? numbers)\n        '()\n        (cons max-so-far (rolling_max_iter\
    \ (cdr numbers) (max max-so-far (car numbers))))))\n  (rolling_max_iter numbers\
    \ (car numbers)))\n", "  (define (rolling_max_iter numbers max-so-far)\n    (if\
    \ (null? numbers)\n        '()\n        (cons (max (car numbers) max-so-far)\n\
    \              (rolling_max_iter (cdr numbers) (max (car numbers) max-so-far)))))\n\
    \  (rolling_max_iter numbers (car numbers)))\n", "  (let loop ([numbers numbers]\n\
    \             [max-so-far 0]\n             [result '()])\n    (if (null? numbers)\n\
    \        (reverse result)\n        (let ([next-max (max (car numbers) max-so-far)])\n\
    \          (loop (cdr numbers)\n                next-max\n                (cons\
    \ next-max result))))))\n", "  (define (rolling_max_iter numbers max-so-far)\n\
    \    (cond\n      [(empty? numbers) '()]\n      [(> (first numbers) max-so-far)\n\
    \       (cons (first numbers) (rolling_max_iter (rest numbers) (first numbers)))]\n\
    \      [else\n       (cons max-so-far (rolling_max_iter (rest numbers) max-so-far))]))\n\
    \  (rolling_max_iter numbers (first numbers)))\n"]
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
