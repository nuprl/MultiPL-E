name: HumanEval_141_file_name_check
language: racket
prompt: "#lang racket\n\n;; Create a function which takes a string representing a\
  \ file's name, and returns\n;; 'Yes' if the the file's name is valid, and returns\
  \ 'No' otherwise.\n;; A file's name is considered to be valid if and only if all\
  \ the following conditions \n;; are met:\n;; - There should not be more than three\
  \ digits ('0'-'9') in the file's name.\n;; - The file's name contains exactly one\
  \ dot '.'\n;; - The substring before the dot should not be empty, and it starts\
  \ with a letter from \n;; the latin alphapet ('a'-'z' and 'A'-'Z').\n;; - The substring\
  \ after the dot should be one of these: ['txt', 'exe', 'dll']\n;; Examples:\n;;\
  \ file_name_check(\"example.txt\") # => 'Yes'\n;; file_name_check(\"1example.dll\"\
  ) # => 'No' (the name should start with a latin alphapet letter)\n(define (file_name_check\
  \ file_name)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate file_name_check))\n\
  \    (check-equal? (candidate \"example.txt\") \"Yes\")\n    (check-equal? (candidate\
  \ \"1example.dll\") \"No\")\n    (check-equal? (candidate \"s1sdf3.asd\") \"No\"\
  )\n    (check-equal? (candidate \"K.dll\") \"Yes\")\n    (check-equal? (candidate\
  \ \"MY16FILE3.exe\") \"Yes\")\n    (check-equal? (candidate \"His12FILE94.exe\"\
  ) \"No\")\n    (check-equal? (candidate \"_Y.txt\") \"No\")\n    (check-equal? (candidate\
  \ \"?aREYA.exe\") \"No\")\n    (check-equal? (candidate \"/this_is_valid.dll\")\
  \ \"No\")\n    (check-equal? (candidate \"this_is_valid.wow\") \"No\")\n    (check-equal?\
  \ (candidate \"this_is_valid.txt\") \"Yes\")\n    (check-equal? (candidate \"this_is_valid.txtexe\"\
  ) \"No\")\n    (check-equal? (candidate \"#this2_i4s_5valid.ten\") \"No\")\n   \
  \ (check-equal? (candidate \"@this1_is6_valid.exe\") \"No\")\n    (check-equal?\
  \ (candidate \"this_is_12valid.6exe4.txt\") \"No\")\n    (check-equal? (candidate\
  \ \"all.exe.txt\") \"No\")\n    (check-equal? (candidate \"I563_No.exe\") \"Yes\"\
  )\n    (check-equal? (candidate \"Is3youfault.txt\") \"Yes\")\n    (check-equal?\
  \ (candidate \"no_one#knows.dll\") \"Yes\")\n    (check-equal? (candidate \"1I563_Yes3.exe\"\
  ) \"No\")\n    (check-equal? (candidate \"I563_Yes3.txtt\") \"No\")\n    (check-equal?\
  \ (candidate \"final..txt\") \"No\")\n    (check-equal? (candidate \"final132\"\
  ) \"No\")\n    (check-equal? (candidate \"_f4indsartal132.\") \"No\")\n    (check-equal?\
  \ (candidate \".txt\") \"No\")\n    (check-equal? (candidate \"s.\") \"No\")\n))\n\
  \n(test-humaneval)"
completions: ["  (cond\n    [(regexp-match #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\\.txt$\"\
    \ file_name) 'Yes]\n    [(regexp-match #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\\.exe$\"\
    \ file_name) 'Yes]\n    [(regexp-match #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\\.dll$\"\
    \ file_name) 'Yes]\n    [else 'No]))\n", "  (define (is_valid_extension extension)\n\
    \    (cond\n      [(equal? extension \"txt\") #t]\n      [(equal? extension \"\
    exe\") #t]\n      [(equal? extension \"dll\") #t]\n      [else #f]))\n  (define\
    \ (is_valid_name name)\n    (define (has_more_than_three_digits name)\n      (if\
    \ (equal? (string-length (regexp-match #rx\"[0-9]\" name)) 4)\n          #t\n\
    \          #f))\n    (define (has_exactly_one_dot name)\n      (if (equal? (string-length\
    \ (regexp-match #rx\"\\.\" name)) 1)\n          #t\n          #f))\n    (define\
    \ (starts_with_letter name)\n      (if (equal? (string-length (regexp-match #rx\"\
    [a-zA-Z]\" name)) 1)\n          #t\n          #f))\n    (and (not (has_more_than_three_digits\
    \ name))\n         (has_exactly_one_dot name)\n         (starts_with_letter name)))\n\
    \  (define (get_extension file_name)\n    (regexp-match #rx\"\\.[a-zA-Z]+\" file_name))\n\
    \  (define (get_name file_name)\n    (regexp-match #rx\"[a-zA-Z]+\" file_name))\n\
    \  (cond\n    [(is_valid_name (get_name file_name))\n     (if (is_valid_extension\
    \ (get_extension file_name))\n         \"Yes\"\n         \"No\")]\n    [else \"\
    No\"]))\n", "  (define (is_valid_extension? extension)\n    (cond\n      [(equal?\
    \ extension \"txt\") #t]\n      [(equal? extension \"exe\") #t]\n      [(equal?\
    \ extension \"dll\") #t]\n      [else #f]))\n  (define (is_valid_name? name)\n\
    \    (cond\n      [(regexp-match #rx\"^[a-zA-Z][a-zA-Z0-9]*$\" name) #t]\n   \
    \   [else #f]))\n  (define (is_valid_file_name? file_name)\n    (cond\n      [(regexp-match\
    \ #rx\"^[a-zA-Z][a-zA-Z0-9]*\\\\.[a-zA-Z]+$\" file_name) #t]\n      [else #f]))\n\
    \  (define (is_valid_number_of_digits? file_name)\n    (cond\n      [(regexp-match\
    \ #rx\"[0-9]{4}\" file_name) #f]\n      [else #t]))\n  (define (is_valid_file_name_with_extension?\
    \ file_name)\n    (cond\n      [(and (is_valid_file_name? file_name) (is_valid_number_of_digits?\
    \ file_name)) #t]\n      [else #f]))\n  (define (is_valid_file_name_with_extension_and_extension?\
    \ file_name)\n    (cond\n      [(and (is_valid_file_name_with_extension? file_name)\
    \ (is_valid_extension? (substring file_name (string-index file_name #\\.)))) #t]\n\
    \      [else #f]))\n  (cond\n    [(is_valid_file_name_with_extension_and_extension?\
    \ file_name) \"Yes\"]\n    [else \"No\"]))\n", "  (cond\n    [(and\n      (regexp-match?\
    \ #rx\"^[a-zA-Z]+[0-9]{0,3}\\\\.txt$\" file_name)\n      (regexp-match? #rx\"\
    ^[a-zA-Z]+[0-9]{0,3}\\\\.exe$\" file_name)\n      (regexp-match? #rx\"^[a-zA-Z]+[0-9]{0,3}\\\
    \\.dll$\" file_name))\n     \"Yes\"]\n    [else \"No\"]))\n", "  (cond\n    [(regexp-match?\
    \ #rx\"^[a-zA-Z]+[0-9]{0,3}\\\\.txt$\" file_name) \"Yes\"]\n    [(regexp-match?\
    \ #rx\"^[a-zA-Z]+[0-9]{0,3}\\\\.exe$\" file_name) \"Yes\"]\n    [(regexp-match?\
    \ #rx\"^[a-zA-Z]+[0-9]{0,3}\\\\.dll$\" file_name) \"Yes\"]\n    [else \"No\"]))\n",
  "  (cond\n    [(regexp-match #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\\.txt$\" file_name)\
    \ 'Yes]\n    [(regexp-match #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\\.exe$\" file_name)\
    \ 'Yes]\n    [(regexp-match #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\\.dll$\" file_name)\
    \ 'Yes]\n    [else 'No]))\n", "  (define (check-extension file_name)\n    (cond\n\
    \      [(string=? (substring file_name (add1 (string-length file_name)) (string-length\
    \ file_name)) \"txt\") 'Yes]\n      [(string=? (substring file_name (add1 (string-length\
    \ file_name)) (string-length file_name)) \"exe\") 'Yes]\n      [(string=? (substring\
    \ file_name (add1 (string-length file_name)) (string-length file_name)) \"dll\"\
    ) 'Yes]\n      [else 'No]))\n  (define (check-name file_name)\n    (cond\n   \
    \   [(string=? (substring file_name 0 1) \"0\") 'No]\n      [(string=? (substring\
    \ file_name 0 1) \"1\") 'No]\n      [(string=? (substring file_name 0 1) \"2\"\
    ) 'No]\n      [(string=? (substring file_name 0 1) \"3\") 'No]\n      [(string=?\
    \ (substring file_name 0 1) \"4\") 'No]\n      [(string=? (substring file_name\
    \ 0 1) \"5\") 'No]\n      [(string=? (substring file_name 0 1) \"6\") 'No]\n \
    \     [(string=? (substring file_name 0 1) \"7\") 'No]\n      [(string=? (substring\
    \ file_name 0 1) \"8\") 'No]\n      [(string=? (substring file_name 0 1) \"9\"\
    ) 'No]\n      [(string=? (substring file_name 0 1) \"a\") 'Yes]\n      [(string=?\
    \ (substring file_name 0 1) \"b\") 'Yes]\n      [(string=? (substring file_name\
    \ 0 1) \"c\") 'Yes]\n      [(string=? (substring file_name 0 1) \"d\") 'Yes]\n\
    \      [(string=? (substring file_name 0 1) \"e\") 'Yes]\n      [(string=? (substring\
    \ file_name 0 1) \"f\") 'Yes]\n      [(string=? (substring file_name 0 1) \"g\"\
    ) 'Yes]\n      [(", "  (cond\n    [(regexp-match #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\
    \\.[a-zA-Z]{3}$\" file_name) 'Yes]\n    [else 'No]))\n", "  (cond\n    [(regexp-match\
    \ #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\\.[a-zA-Z]{3}$\" file_name) 'Yes]\n    [else\
    \ 'No]))\n", "  (cond\n    [(regexp-match #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\\.[a-zA-Z]{3}$\"\
    \ file_name) 'Yes]\n    [else 'No]))\n", "  (define (check-extension extension)\n\
    \    (cond\n      [(string=? extension \"txt\") #t]\n      [(string=? extension\
    \ \"exe\") #t]\n      [(string=? extension \"dll\") #t]\n      [else #f]))\n \
    \ (define (check-name name)\n    (cond\n      [(string-empty? name) #f]\n    \
    \  [(char-alphabetic? (string-ref name 0)) #t]\n      [else #f]))\n  (define (check-digits\
    \ digits)\n    (cond\n      [(> digits 3) #f]\n      [else #t]))\n  (define (check-dot\
    \ dot)\n    (cond\n      [(string=? dot \".\") #t]\n      [else #f]))\n  (define\
    \ (check-file-name file_name)\n    (cond\n      [(string-empty? file_name) #f]\n\
    \      [(check-extension (substring file_name (+ (string-index file_name \".\"\
    ) 1))) #t]\n      [else #f]))\n  (cond\n    [(check-file-name file_name) #t]\n\
    \    [else #f]))\n", "  (cond\n    [(regexp-match #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\
    \\.txt$\" file_name) 'Yes]\n    [(regexp-match #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\
    \\.exe$\" file_name) 'Yes]\n    [(regexp-match #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\
    \\.dll$\" file_name) 'Yes]\n    [else 'No]))\n", "  (if (and (regexp-match #rx\"\
    ^[a-zA-Z][a-zA-Z0-9]*\\\\.txt$\" file_name)\n          (not (regexp-match #rx\"\
    \\\\d{4}\" file_name)))\n      \"Yes\"\n      \"No\"))\n", "  (if (and (regexp-match?\
    \ #rx\"^[a-zA-Z][a-zA-Z0-9]*\\.[a-zA-Z]{3}$\" file_name)\n          (not (regexp-match?\
    \ #rx\"[0-9]{4}\" file_name))\n          (regexp-match? #rx\"\\.[a-zA-Z]{3}$\"\
    \ file_name))\n      \"Yes\"\n      \"No\"))\n", "  (cond\n    [(regexp-match\
    \ #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\\.txt$\" file_name) 'Yes]\n    [(regexp-match\
    \ #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\\.exe$\" file_name) 'Yes]\n    [(regexp-match\
    \ #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\\.dll$\" file_name) 'Yes]\n    [else 'No]))\n",
  "  (define (check-extension ext)\n    (cond\n      [(equal? ext \"txt\") #t]\n \
    \     [(equal? ext \"exe\") #t]\n      [(equal? ext \"dll\") #t]\n      [else\
    \ #f]))\n  (define (check-name name)\n    (cond\n      [(regexp-match #rx\"^[a-zA-Z][a-zA-Z0-9]*$\"\
    \ name) #t]\n      [else #f]))\n  (define (check-digits digits)\n    (cond\n \
    \     [(> (string-length digits) 3) #f]\n      [else #t]))\n  (define (check-file-name\
    \ file-name)\n    (let ([parts (string-split file-name \"\\\\.\")])\n      (cond\n\
    \        [(equal? (length parts) 2)\n         (and (check-name (first parts))\n\
    \              (check-extension (second parts)))]\n        [else #f])))\n  (cond\n\
    \    [(check-file-name file_name) \"Yes\"]\n    [else \"No\"]))\n", "  (cond\n\
    \    [(regexp-match #rx\"^[a-zA-Z]+[0-9]{0,3}\\\\.txt$\" file_name) 'Yes]\n  \
    \  [(regexp-match #rx\"^[a-zA-Z]+[0-9]{0,3}\\\\.exe$\" file_name) 'Yes]\n    [(regexp-match\
    \ #rx\"^[a-zA-Z]+[0-9]{0,3}\\\\.dll$\" file_name) 'Yes]\n    [else 'No]))\n",
  "  (cond\n    [(regexp-match? #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\\.[a-zA-Z]{3}$\"\
    \ file_name) 'Yes]\n    [else 'No]))\n", "  (cond\n    [(and (regexp-match? #rx\"\
    ^[a-zA-Z]+[0-9]{0,3}\\\\.txt$\" file_name)\n          (regexp-match? #rx\"^[a-zA-Z]+[0-9]{0,3}\\\
    \\.exe$\" file_name)\n          (regexp-match? #rx\"^[a-zA-Z]+[0-9]{0,3}\\\\.dll$\"\
    \ file_name))\n     \"Yes\"]\n    [else \"No\"]))\n", "  (define (is_valid_extension?\
    \ extension)\n    (or (equal? extension \"txt\")\n        (equal? extension \"\
    exe\")\n        (equal? extension \"dll\")))\n  (define (is_valid_name? name)\n\
    \    (and (not (empty? name))\n         (regexp-match #rx\"[a-zA-Z]\" name)))\n\
    \  (define (is_valid_file_name? file_name)\n    (let* ([parts (regexp-split #rx\"\
    \\.\" file_name)]\n           [extension (last parts)]\n           [name (string-join\
    \ (butlast parts) \".\")])\n      (and (is_valid_extension? extension)\n     \
    \      (is_valid_name? name)\n           (not (regexp-match #rx\"[0-9]{4,}\" name)))))\n\
    \  (if (is_valid_file_name? file_name)\n      \"Yes\"\n      \"No\"))\n", "  (define\
    \ (is_valid_extension? ext)\n    (cond ((equal? ext \"txt\") #t)\n          ((equal?\
    \ ext \"exe\") #t)\n          ((equal? ext \"dll\") #t)\n          (else #f)))\n\
    \  (define (is_valid_name? name)\n    (cond ((regexp-match #rx\"^[a-zA-Z]+[0-9]{0,3}$\"\
    \ name) #t)\n          (else #f)))\n  (define (is_valid_file_name? file_name)\n\
    \    (cond ((equal? (length (regexp-match #rx\"\\.\" file_name)) 1) #t)\n    \
    \      (else #f)))\n  (define (is_valid_file_name_with_extension? file_name)\n\
    \    (cond ((and (is_valid_file_name? file_name)\n                (is_valid_name?\
    \ (car (regexp-match #rx\"^[a-zA-Z]+[0-9]{0,3}\" file_name)))\n              \
    \  (is_valid_extension? (car (regexp-match #rx\"\\.[a-zA-Z]+$\" file_name))))\
    \ #t)\n          (else #f)))\n  (cond ((is_valid_file_name_with_extension? file_name)\
    \ \"Yes\")\n        (else \"No\")))\n", "  (cond\n    [(regexp-match #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\
    \\.txt$\" file_name) 'Yes]\n    [(regexp-match #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\
    \\.exe$\" file_name) 'Yes]\n    [(regexp-match #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\
    \\.dll$\" file_name) 'Yes]\n    [else 'No]))\n", "  (cond\n    [(regexp-match\
    \ #rx\"^[a-zA-Z]+[0-9]{0,3}\\\\.txt$\" file_name) 'Yes]\n    [(regexp-match #rx\"\
    ^[a-zA-Z]+[0-9]{0,3}\\\\.exe$\" file_name) 'Yes]\n    [(regexp-match #rx\"^[a-zA-Z]+[0-9]{0,3}\\\
    \\.dll$\" file_name) 'Yes]\n    [else 'No]))\n", "  (cond\n    [(regexp-match\
    \ #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\\.[a-zA-Z]{3}$\" file_name) 'Yes]\n    [else\
    \ 'No]))\n", "  (cond\n    [(and (regexp-match #rx\"^[a-zA-Z]+[0-9]{0,3}\\\\.txt$\"\
    \ file_name)\n          (regexp-match #rx\"^[a-zA-Z]+[0-9]{0,3}\\\\.exe$\" file_name)\n\
    \          (regexp-match #rx\"^[a-zA-Z]+[0-9]{0,3}\\\\.dll$\" file_name))\n  \
    \   \"Yes\"]\n    [else \"No\"]))\n", "  (cond\n    [(regexp-match #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\
    \\.[a-zA-Z]{3}$\" file_name) 'Yes]\n    [else 'No]))\n", "  (cond\n    [(regexp-match\
    \ #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\\.txt$\" file_name) 'Yes]\n    [(regexp-match\
    \ #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\\.exe$\" file_name) 'Yes]\n    [(regexp-match\
    \ #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\\.dll$\" file_name) 'Yes]\n    [else 'No]))\n",
  "  (cond\n    [(regexp-match #rx\"^[a-zA-Z]+[0-9]{0,3}\\\\.txt$\" file_name) 'Yes]\n\
    \    [(regexp-match #rx\"^[a-zA-Z]+[0-9]{0,3}\\\\.exe$\" file_name) 'Yes]\n  \
    \  [(regexp-match #rx\"^[a-zA-Z]+[0-9]{0,3}\\\\.dll$\" file_name) 'Yes]\n    [else\
    \ 'No]))\n", "  (cond\n    [(regexp-match #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\\.[a-zA-Z]{3}$\"\
    \ file_name) 'Yes]\n    [else 'No]))\n", "  (cond\n    [(regexp-match #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\
    \\.txt$\" file_name) 'Yes]\n    [(regexp-match #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\
    \\.exe$\" file_name) 'Yes]\n    [(regexp-match #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\
    \\.dll$\" file_name) 'Yes]\n    [else 'No]))\n", "  (cond\n    [(regexp-match\
    \ #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\\.txt$\" file_name) 'Yes]\n    [(regexp-match\
    \ #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\\.exe$\" file_name) 'Yes]\n    [(regexp-match\
    \ #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\\.dll$\" file_name) 'Yes]\n    [else 'No]))\n",
  "  (cond\n    [(regexp-match #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\\.[a-zA-Z]{3}$\" file_name)\
    \ 'Yes]\n    [else 'No]))\n", "  (define (is_valid_extension? extension)\n   \
    \ (cond\n      [(string=? extension \"txt\") #t]\n      [(string=? extension \"\
    exe\") #t]\n      [(string=? extension \"dll\") #t]\n      [else #f]))\n  (define\
    \ (is_valid_name? name)\n    (let ([name-length (string-length name)])\n     \
    \ (and (not (string-empty? name))\n           (char-alphabetic? (string-ref name\
    \ 0))\n           (string-contains name \".\")\n           (string-contains name\
    \ \".\")\n           (let ([dot-index (string-index name \".\")])\n          \
    \   (and (is_valid_extension? (substring name (+ dot-index 1) name-length))\n\
    \                  (string-contains name \".\")\n                  (let ([digit-count\
    \ (count (lambda (c) (char-numeric? c)) name)])\n                    (<= digit-count\
    \ 3)))))))\n  (cond\n    [(is_valid_name? file_name) \"Yes\"]\n    [else \"No\"\
    ]))\n", "  (define (check_extension extension)\n    (cond\n      [(equal? extension\
    \ \"txt\") 'Yes]\n      [(equal? extension \"exe\") 'Yes]\n      [(equal? extension\
    \ \"dll\") 'Yes]\n      [else 'No]))\n  (define (check_name name)\n    (cond\n\
    \      [(regexp-match #rx\"^[a-zA-Z]+$\" name) 'Yes]\n      [else 'No]))\n  (define\
    \ (check_digits digits)\n    (cond\n      [(> (string-length digits) 3) 'No]\n\
    \      [else 'Yes]))\n  (define (check_dot dot)\n    (cond\n      [(equal? dot\
    \ \".\") 'Yes]\n      [else 'No]))\n  (define (check_file_name file_name)\n  \
    \  (define (split_file_name file_name)\n      (define (split_file_name_helper\
    \ file_name)\n        (cond\n          [(empty? file_name) empty]\n          [(equal?\
    \ (first file_name) #\\.) (cons (first file_name) empty)]\n          [else (cons\
    \ (first file_name) (split_file_name_helper (rest file_name)))]))\n      (split_file_name_helper\
    \ file_name))\n    (define (check_file_name_helper file_name)\n      (cond\n \
    \       [(empty? file_name) empty]\n        [(equal? (first file_name) #\\.) (cons\
    \ (first file_name) empty)]\n        [else (cons (first file_name) (check_file_name_helper\
    \ (rest file_name)))]))\n    (check_file_name_helper file_name))\n  (define (check_file_name_helper\
    \ file_name)\n    (cond\n      [(empty? file_name) empty]\n      [(equal? (first\
    \ file_name) #\\.) (cons (first file_name) empty)]\n      [else (cons (first file_name)\
    \ (check_file_name_helper (rest file_name)))]))\n  (define (split_file_name file_name)\n\
    \    (define (split", "  (define (check-extension file_name)\n    (cond\n    \
    \  [(string=? (substring file_name (sub1 (string-length file_name)) (string-length\
    \ file_name)) \"txt\") 'Yes]\n      [(string=? (substring file_name (sub1 (string-length\
    \ file_name)) (string-length file_name)) \"exe\") 'Yes]\n      [(string=? (substring\
    \ file_name (sub1 (string-length file_name)) (string-length file_name)) \"dll\"\
    ) 'Yes]\n      [else 'No]))\n  (define (check-name file_name)\n    (cond\n   \
    \   [(string=? (substring file_name 0 1) \"0\") 'No]\n      [(string=? (substring\
    \ file_name 0 1) \"1\") 'No]\n      [(string=? (substring file_name 0 1) \"2\"\
    ) 'No]\n      [(string=? (substring file_name 0 1) \"3\") 'No]\n      [(string=?\
    \ (substring file_name 0 1) \"4\") 'No]\n      [(string=? (substring file_name\
    \ 0 1) \"5\") 'No]\n      [(string=? (substring file_name 0 1) \"6\") 'No]\n \
    \     [(string=? (substring file_name 0 1) \"7\") 'No]\n      [(string=? (substring\
    \ file_name 0 1) \"8\") 'No]\n      [(string=? (substring file_name 0 1) \"9\"\
    ) 'No]\n      [(string=? (substring file_name 0 1) \"a\") 'Yes]\n      [(string=?\
    \ (substring file_name 0 1) \"b\") 'Yes]\n      [(string=? (substring file_name\
    \ 0 1) \"c\") 'Yes]\n      [(string=? (substring file_name 0 1) \"d\") 'Yes]\n\
    \      [(string=? (substring file_name 0 1) \"e\") 'Yes]\n      [(string=? (substring\
    \ file_name 0 1) \"f\") 'Yes]\n      [(string=? (substring file_name 0 1) \"g\"\
    ) 'Yes]\n      [(", "  (define (is_valid_extension? extension)\n    (or (equal?\
    \ extension \"txt\")\n        (equal? extension \"exe\")\n        (equal? extension\
    \ \"dll\")))\n  (define (is_valid_name? name)\n    (and (not (empty? name))\n\
    \         (regexp-match #rx\"^[a-zA-Z]\" name)))\n  (define (is_valid_file_name?\
    \ file_name)\n    (define (count-digits file_name)\n      (length (regexp-match\
    \ #rx\"[0-9]\" file_name)))\n    (define (count-dots file_name)\n      (length\
    \ (regexp-match #rx\"\\.\" file_name)))\n    (and (equal? (count-dots file_name)\
    \ 1)\n         (equal? (count-digits file_name) 3)\n         (is_valid_name? (substring\
    \ file_name 0 (string-index file_name \".\")))\n         (is_valid_extension?\
    \ (substring file_name (+ 1 (string-index file_name \".\"))))))\n  (if (is_valid_file_name?\
    \ file_name)\n      \"Yes\"\n      \"No\"))\n", "  (define (is_valid_name? name)\n\
    \    (and (regexp-match? #rx\"^[a-zA-Z]+$\" name)\n         (not (regexp-match?\
    \ #rx\"[0-9]{4,}\" name))))\n  (define (is_valid_extension? extension)\n    (member\
    \ extension '(\"txt\" \"exe\" \"dll\")))\n  (define (is_valid_file_name? file_name)\n\
    \    (let ([parts (regexp-split #rx\"\\.\" file_name)])\n      (and (= (length\
    \ parts) 2)\n           (is_valid_name? (first parts))\n           (is_valid_extension?\
    \ (second parts)))))\n  (if (is_valid_file_name? file_name)\n      \"Yes\"\n \
    \     \"No\"))\n", "  (cond\n    [(regexp-match #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\
    \\.txt$\" file_name) \"Yes\"]\n    [(regexp-match #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\
    \\.exe$\" file_name) \"Yes\"]\n    [(regexp-match #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\
    \\.dll$\" file_name) \"Yes\"]\n    [else \"No\"]))\n", "  (define (is_valid_extension?\
    \ extension)\n    (cond ((equal? extension \"txt\") #t)\n          ((equal? extension\
    \ \"exe\") #t)\n          ((equal? extension \"dll\") #t)\n          (else #f)))\n\
    \  (define (is_valid_name? name)\n    (cond ((regexp-match #rx\"^[a-zA-Z]+[0-9]{0,3}$\"\
    \ name) #t)\n          (else #f)))\n  (define (is_valid_file_name? file_name)\n\
    \    (cond ((regexp-match #rx\"^[a-zA-Z]+[0-9]{0,3}\\\\.[a-zA-Z]+$\" file_name)\
    \ #t)\n          (else #f)))\n  (define (get_extension file_name)\n    (regexp-match\
    \ #rx\"\\.[a-zA-Z]+$\" file_name))\n  (define (get_name file_name)\n    (regexp-match\
    \ #rx\"^[a-zA-Z]+[0-9]{0,3}\" file_name))\n  (cond ((is_valid_file_name? file_name)\n\
    \         (cond ((is_valid_name? (get_name file_name))\n                (cond\
    \ ((is_valid_extension? (get_extension file_name))\n                       \"\
    Yes\")\n                      (else \"No\")))\n               (else \"No\")))\n\
    \        (else \"No\")))\n", "  (cond\n    [(regexp-match #rx\"^[a-zA-Z]+[0-9]{0,3}\\\
    \\.txt$\" file_name) 'Yes]\n    [(regexp-match #rx\"^[a-zA-Z]+[0-9]{0,3}\\\\.exe$\"\
    \ file_name) 'Yes]\n    [(regexp-match #rx\"^[a-zA-Z]+[0-9]{0,3}\\\\.dll$\" file_name)\
    \ 'Yes]\n    [else 'No]))\n", "  (cond\n    [(regexp-match #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\
    \\.[a-zA-Z]{3}$\" file_name) 'Yes]\n    [else 'No]))\n", "  (cond\n    [(regexp-match\
    \ #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\\.txt$\" file_name) 'Yes]\n    [(regexp-match\
    \ #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\\.exe$\" file_name) 'Yes]\n    [(regexp-match\
    \ #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\\.dll$\" file_name) 'Yes]\n    [else 'No]))\n",
  "  (cond\n    [(regexp-match #rx\"^[a-zA-Z]+[0-9]{0,3}\\\\.txt$\" file_name) \"\
    Yes\"]\n    [(regexp-match #rx\"^[a-zA-Z]+[0-9]{0,3}\\\\.exe$\" file_name) \"\
    Yes\"]\n    [(regexp-match #rx\"^[a-zA-Z]+[0-9]{0,3}\\\\.dll$\" file_name) \"\
    Yes\"]\n    [else \"No\"]))\n", "  (cond\n    [(regexp-match #rx\"^[a-zA-Z]+[0-9]{0,3}\\\
    \\.txt$\" file_name) \"Yes\"]\n    [(regexp-match #rx\"^[a-zA-Z]+[0-9]{0,3}\\\\\
    .exe$\" file_name) \"Yes\"]\n    [(regexp-match #rx\"^[a-zA-Z]+[0-9]{0,3}\\\\\
    .dll$\" file_name) \"Yes\"]\n    [else \"No\"]))\n", "  (cond\n    [(regexp-match\
    \ #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\\.[a-zA-Z]{3}$\" file_name) 'Yes]\n    [else\
    \ 'No]))\n", "  (let ([digits (regexp-match #rx\"[0-9]\" file_name)]\n       \
    \ [dot (regexp-match #rx\"\\.\" file_name)]\n        [before-dot (substring file_name\
    \ 0 (car dot))]\n        [after-dot (substring file_name (+ (car dot) 1) (string-length\
    \ file_name))])\n    (cond [(> (length digits) 3) \"No\"]\n          [(not (equal?\
    \ (length dot) 1)) \"No\"]\n          [(not (regexp-match #rx\"[a-zA-Z]\" before-dot))\
    \ \"No\"]\n          [(not (regexp-match #rx\"txt|exe|dll\" after-dot)) \"No\"\
    ]\n          [else \"Yes\"])))\n", "  (cond\n    [(regexp-match? #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\
    \\.[a-zA-Z]{3}$\" file_name) 'Yes]\n    [else 'No]))\n", "  (cond\n    [(regexp-match\
    \ #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\\.txt$\" file_name) 'Yes]\n    [(regexp-match\
    \ #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\\.exe$\" file_name) 'Yes]\n    [(regexp-match\
    \ #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\\.dll$\" file_name) 'Yes]\n    [else 'No]))\n",
  "  (if (and (regexp-match? #rx\"^[a-zA-Z][a-zA-Z0-9]*\\.[a-zA-Z]{3}$\" file_name)\n\
    \          (not (regexp-match? #rx\"[0-9]{4}\" file_name))\n          (regexp-match?\
    \ #rx\"\\.[a-zA-Z]{3}$\" file_name))\n      \"Yes\"\n      \"No\"))\n", "  (cond\n\
    \    [(regexp-match? #rx\"^[a-zA-Z]+[0-9]{0,3}\\\\.txt$\" file_name) 'Yes]\n \
    \   [(regexp-match? #rx\"^[a-zA-Z]+[0-9]{0,3}\\\\.exe$\" file_name) 'Yes]\n  \
    \  [(regexp-match? #rx\"^[a-zA-Z]+[0-9]{0,3}\\\\.dll$\" file_name) 'Yes]\n   \
    \ [else 'No]))\n", "  (cond\n    [(regexp-match #rx\"^[a-zA-Z]+[0-9]{0,3}\\\\\
    .txt$\" file_name) 'Yes]\n    [(regexp-match #rx\"^[a-zA-Z]+[0-9]{0,3}\\\\.exe$\"\
    \ file_name) 'Yes]\n    [(regexp-match #rx\"^[a-zA-Z]+[0-9]{0,3}\\\\.dll$\" file_name)\
    \ 'Yes]\n    [else 'No]))\n", "  (cond\n    [(regexp-match #rx\"^[a-zA-Z]+[0-9]{0,3}\\\
    \\.txt$\" file_name) 'Yes]\n    [(regexp-match #rx\"^[a-zA-Z]+[0-9]{0,3}\\\\.exe$\"\
    \ file_name) 'Yes]\n    [(regexp-match #rx\"^[a-zA-Z]+[0-9]{0,3}\\\\.dll$\" file_name)\
    \ 'Yes]\n    [else 'No]))\n", "  (cond\n    [(regexp-match? #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\
    \\.[a-zA-Z]{3}$\" file_name) 'Yes]\n    [else 'No]))\n", "  (define (is_valid_extension?\
    \ extension)\n    (cond\n      [(string=? extension \"txt\") #t]\n      [(string=?\
    \ extension \"exe\") #t]\n      [(string=? extension \"dll\") #t]\n      [else\
    \ #f]))\n  (define (is_valid_name? name)\n    (cond\n      [(regexp-match #rx\"\
    ^[a-zA-Z]+$\" name) #t]\n      [else #f]))\n  (define (is_valid_file_name? file_name)\n\
    \    (define (is_valid_file_name_helper? file_name)\n      (cond\n        [(regexp-match\
    \ #rx\"^[a-zA-Z]+[0-9]{0,3}\\\\.[a-zA-Z]+$\" file_name) #t]\n        [else #f]))\n\
    \  (define (is_valid_file_name_helper2? file_name)\n    (cond\n      [(regexp-match\
    \ #rx\"^[a-zA-Z]+[0-9]{0,3}\\\\.[a-zA-Z]+$\" file_name) #t]\n      [else #f]))\n\
    \  (define (is_valid_file_name_helper3? file_name)\n    (cond\n      [(regexp-match\
    \ #rx\"^[a-zA-Z]+[0-9]{0,3}\\\\.[a-zA-Z]+$\" file_name) #t]\n      [else #f]))\n\
    \  (define (is_valid_file_name_helper4? file_name)\n    (cond\n      [(regexp-match\
    \ #rx\"^[a-zA-Z]+[0-9]{0,3}\\\\.[a-zA-Z]+$\" file_name) #t]\n      [else #f]))\n\
    \  (define (is_valid_file_name_helper5? file_name)\n    (cond\n      [(regexp-match\
    \ #rx\"^[a-zA-Z]+[0-9]{0,3}", "  (cond\n    [(regexp-match #rx\"^[a-zA-Z]+[0-9]{0,3}\\\
    \\.txt$\" file_name) 'Yes]\n    [(regexp-match #rx\"^[a-zA-Z]+[0-9]{0,3}\\\\.exe$\"\
    \ file_name) 'Yes]\n    [(regexp-match #rx\"^[a-zA-Z]+[0-9]{0,3}\\\\.dll$\" file_name)\
    \ 'Yes]\n    [else 'No]))\n", "  (cond\n    [(regexp-match #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\
    \\.txt$\" file_name) 'Yes]\n    [(regexp-match #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\
    \\.exe$\" file_name) 'Yes]\n    [(regexp-match #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\
    \\.dll$\" file_name) 'Yes]\n    [else 'No]))\n", "  (cond\n    [(and (regexp-match?\
    \ #rx\"^[a-zA-Z]+[0-9]{0,3}\\\\.txt$\" file_name)\n          (regexp-match? #rx\"\
    ^[a-zA-Z]+[0-9]{0,3}\\\\.exe$\" file_name)\n          (regexp-match? #rx\"^[a-zA-Z]+[0-9]{0,3}\\\
    \\.dll$\" file_name))\n     \"Yes\"]\n    [else \"No\"]))\n", "  (cond\n    [(regexp-match\
    \ #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\\.txt$\" file_name) 'Yes]\n    [(regexp-match\
    \ #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\\.exe$\" file_name) 'Yes]\n    [(regexp-match\
    \ #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\\.dll$\" file_name) 'Yes]\n    [else 'No]))\n",
  "  (cond\n    [(regexp-match #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\\.txt$\" file_name)\
    \ 'Yes]\n    [(regexp-match #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\\.exe$\" file_name)\
    \ 'Yes]\n    [(regexp-match #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\\.dll$\" file_name)\
    \ 'Yes]\n    [else 'No]))\n", "  (define (is_valid_file_name file_name)\n    (define\
    \ (is_valid_extension extension)\n      (cond ((equal? extension \"txt\") #t)\n\
    \            ((equal? extension \"exe\") #t)\n            ((equal? extension \"\
    dll\") #t)\n            (else #f)))\n    (define (is_valid_name name)\n      (define\
    \ (is_valid_first_char c)\n        (cond ((char-alphabetic? c) #t)\n         \
    \     (else #f)))\n      (define (is_valid_digit_count n)\n        (cond ((> n\
    \ 3) #f)\n              (else #t)))\n      (define (is_valid_char c)\n       \
    \ (cond ((char-alphabetic? c) #t)\n              ((char-numeric? c) #t)\n    \
    \          (else #f)))\n      (define (is_valid_name_helper name)\n        (cond\
    \ ((null? name) #t)\n              ((not (is_valid_char (car name))) #f)\n   \
    \           (else (is_valid_name_helper (cdr name)))))\n      (and (not (null?\
    \ name))\n           (is_valid_first_char (car name))\n           (is_valid_digit_count\
    \ (string-count name #\\0 #\\9))\n           (is_valid_name_helper (cdr name))))\n\
    \    (define (get_name file_name)\n      (define (get_name_helper file_name)\n\
    \        (cond ((null? file_name) '())\n              ((equal? (car file_name)\
    \ #\\.) '())\n              (else (cons (car file_name) (get_name_helper (cdr\
    \ file_name))))))\n      (get_name_helper file_name))\n    (define (get_extension\
    \ file_name)\n      (define (get_extension_helper file_name)\n        (cond ((null?\
    \ file_name) '())\n              ((equal? (car file_name) #\\.) (cdr file_name))\n\
    \              (else (get_extension_helper (cdr file_name)))))\n      (get_",
  "  (cond\n    [(regexp-match #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\\.[a-zA-Z]{3}$\" file_name)\
    \ 'Yes]\n    [else 'No]))\n", "  (define (count-digits str)\n    (if (empty? str)\n\
    \        0\n        (+ (if (char-numeric? (first str)) 1 0)\n           (count-digits\
    \ (rest str)))))\n  (define (count-dots str)\n    (if (empty? str)\n        0\n\
    \        (+ (if (char=? (first str) #\\.) 1 0)\n           (count-dots (rest str)))))\n\
    \  (define (is-valid-extension str)\n    (or (string=? str \"txt\")\n        (string=?\
    \ str \"exe\")\n        (string=? str \"dll\")))\n  (define (is-valid-name str)\n\
    \    (and (not (empty? str))\n         (char-alphabetic? (first str))\n      \
    \   (not (char-numeric? (first str)))))\n  (define (is-valid-file-name str)\n\
    \    (let ((parts (string-split str #\\.)))\n      (and (= (count-digits str)\
    \ 3)\n           (= (count-dots str) 1)\n           (is-valid-name (first parts))\n\
    \           (is-valid-extension (second parts)))))\n  (if (is-valid-file-name\
    \ file_name)\n      \"Yes\"\n      \"No\"))\n", "  (define (is_valid_extension?\
    \ extension)\n    (or (= extension \"txt\")\n        (= extension \"exe\")\n \
    \       (= extension \"dll\")))\n  (define (is_valid_name? name)\n    (and (not\
    \ (empty? name))\n         (regexp-match? #rx\"^[a-zA-Z]\" name)))\n  (define\
    \ (is_valid_file_name? file_name)\n    (define (count-digits file_name)\n    \
    \  (length (regexp-match #rx\"[0-9]\" file_name)))\n    (define (count-dots file_name)\n\
    \      (length (regexp-match #rx\"\\.\" file_name)))\n    (and (= (count-dots\
    \ file_name) 1)\n         (<= (count-digits file_name) 3)\n         (is_valid_name?\
    \ (regexp-replace #rx\"\\..*\" file_name \"\"))\n         (is_valid_extension?\
    \ (regexp-replace #rx\".*\\.\" file_name \"\"))))\n  (if (is_valid_file_name?\
    \ file_name)\n      \"Yes\"\n      \"No\"))\n", "  (cond\n    [(regexp-match #rx\"\
    ^[a-zA-Z][a-zA-Z0-9]{0,2}\\\\.[a-zA-Z]{3}$\" file_name) 'Yes]\n    [else 'No]))\n",
  "  (cond\n    [(regexp-match? #rx\"^[a-zA-Z]+[0-9]{0,3}\\\\.txt$\" file_name) 'Yes]\n\
    \    [(regexp-match? #rx\"^[a-zA-Z]+[0-9]{0,3}\\\\.exe$\" file_name) 'Yes]\n \
    \   [(regexp-match? #rx\"^[a-zA-Z]+[0-9]{0,3}\\\\.dll$\" file_name) 'Yes]\n  \
    \  [else 'No]))\n", "  (cond\n    [(regexp-match? #rx\"^[a-zA-Z]+[0-9]{0,3}\\\\\
    .txt$\" file_name) 'Yes]\n    [(regexp-match? #rx\"^[a-zA-Z]+[0-9]{0,3}\\\\.exe$\"\
    \ file_name) 'Yes]\n    [(regexp-match? #rx\"^[a-zA-Z]+[0-9]{0,3}\\\\.dll$\" file_name)\
    \ 'Yes]\n    [else 'No]))\n", "  (cond\n    [(regexp-match #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\
    \\.[a-zA-Z]{3}$\" file_name) 'Yes]\n    [else 'No]))\n", "  (define (is_valid_file_name?\
    \ file_name)\n    (define (is_valid_file_name_before_dot? file_name)\n      (and\
    \ (not (empty? file_name))\n           (or (char-alphabetic? (string-ref file_name\
    \ 0))\n               (char-numeric? (string-ref file_name 0)))))\n    (define\
    \ (is_valid_file_name_after_dot? file_name)\n      (and (not (empty? file_name))\n\
    \           (or (string=? file_name \"txt\")\n               (string=? file_name\
    \ \"exe\")\n               (string=? file_name \"dll\"))))\n    (define (is_valid_file_name_extension?\
    \ file_name)\n      (and (not (empty? file_name))\n           (is_valid_file_name_after_dot?\
    \ (string-take-right file_name 3))))\n    (define (is_valid_file_name_before_extension?\
    \ file_name)\n      (and (not (empty? file_name))\n           (is_valid_file_name_before_dot?\
    \ (string-take file_name (- (string-length file_name) 4)))))\n    (define (is_valid_file_name_dot?\
    \ file_name)\n      (and (not (empty? file_name))\n           (string=? (string-take-right\
    \ file_name 1) \".\")))\n    (define (is_valid_file_name_digits? file_name)\n\
    \      (and (not (empty? file_name))\n           (<= (count (lambda (c) (char-numeric?\
    \ c)) file_name) 3)))\n    (and (is_valid_file_name_before_extension? file_name)\n\
    \         (is_valid_file_name_extension? file_name)\n         (is_valid_file_name_dot?\
    \ file_name)\n         (is_valid_file_name_digits? file_name)))\n  (if (is_valid_file_name?\
    \ file_name)\n      \"Yes\"\n      \"No\"))\n", "  (define (is_valid_extension?\
    \ ext)\n    (or (equal? ext \"txt\") (equal? ext \"exe\") (equal? ext \"dll\"\
    )))\n  (define (is_valid_name? name)\n    (and (not (empty? name))\n         (regexp-match?\
    \ #rx\"^[a-zA-Z]\" name)\n         (not (regexp-match? #rx\"[0-9]{4,}\" name))))\n\
    \  (define (is_valid_file_name? file_name)\n    (define (split-file-name file_name)\n\
    \      (regexp-split #rx\"\\.\" file_name))\n    (define (split-file-name-helper\
    \ file_name)\n      (cond [(empty? file_name) '()]\n            [else (cons (first\
    \ file_name) (split-file-name-helper (rest file_name)))]))\n    (define (split-file-name\
    \ file_name)\n      (split-file-name-helper (regexp-split #rx\"\\.\" file_name)))\n\
    \    (define (is_valid_file_name? file_name)\n      (and (equal? (length (split-file-name\
    \ file_name)) 2)\n           (is_valid_name? (first (split-file-name file_name)))\n\
    \           (is_valid_extension? (second (split-file-name file_name)))))\n   \
    \ (if (is_valid_file_name? file_name)\n        \"Yes\"\n        \"No\"))\n  (is_valid_file_name?\
    \ file_name))\n", "  (cond\n    [(regexp-match #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\
    \\.txt$\" file_name) 'Yes]\n    [(regexp-match #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\
    \\.exe$\" file_name) 'Yes]\n    [(regexp-match #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\
    \\.dll$\" file_name) 'Yes]\n    [else 'No]))\n", "  (cond\n    [(regexp-match\
    \ #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\\.txt$\" file_name) 'Yes]\n    [(regexp-match\
    \ #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\\.exe$\" file_name) 'Yes]\n    [(regexp-match\
    \ #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\\.dll$\" file_name) 'Yes]\n    [else 'No]))\n",
  "  (let ([file_name (string-split file_name \".\")])\n    (cond\n      [(and (string-match\
    \ #rx\"[a-zA-Z]\" (car file_name))\n            (string-match #rx\"[a-zA-Z]\"\
    \ (cadr file_name))\n            (string-match #rx\"[a-zA-Z]\" (caddr file_name))\n\
    \            (string-match #rx\"[a-zA-Z]\" (cadddr file_name)))\n       \"No\"\
    ]\n      [(and (string-match #rx\"[0-9]\" (car file_name))\n            (string-match\
    \ #rx\"[0-9]\" (cadr file_name))\n            (string-match #rx\"[0-9]\" (caddr\
    \ file_name))\n            (string-match #rx\"[0-9]\" (cadddr file_name)))\n \
    \      \"No\"]\n      [(and (string-match #rx\"[a-zA-Z]\" (car file_name))\n \
    \           (string-match #rx\"[0-9]\" (cadr file_name))\n            (string-match\
    \ #rx\"[0-9]\" (caddr file_name))\n            (string-match #rx\"[0-9]\" (cadddr\
    \ file_name)))\n       \"No\"]\n      [(and (string-match #rx\"[0-9]\" (car file_name))\n\
    \            (string-match #rx\"[a-zA-Z]\" (cadr file_name))\n            (string-match\
    \ #rx\"[0-9]\" (caddr file_name))\n            (string-match #rx\"[0-9]\" (cadddr\
    \ file_name)))\n       \"No\"]\n      [(and (string-match #rx\"[0-9]\" (car file_name))\n\
    \            (string-match #rx\"[0-9]\" (cadr file_name))\n            (string-match\
    \ #rx\"[a-zA-Z]\" (caddr file_name))\n            (string-match #rx\"[0-9]\" (cadddr\
    \ file_name)))\n       \"No\"]\n      [(and (string-match #rx\"[0-9]\" (car file_name))\n\
    \            (string-match #rx", "  (define (check-extension file_name)\n    (cond\n\
    \      [(equal? (substring file_name (sub1 (string-length file_name)) (string-length\
    \ file_name)) \".txt\") 'Yes]\n      [(equal? (substring file_name (sub1 (string-length\
    \ file_name)) (string-length file_name)) \".exe\") 'Yes]\n      [(equal? (substring\
    \ file_name (sub1 (string-length file_name)) (string-length file_name)) \".dll\"\
    ) 'Yes]\n      [else 'No]))\n  (define (check-name file_name)\n    (cond\n   \
    \   [(regexp-match #rx\"^[a-zA-Z]+[0-9]{0,3}$\" file_name) 'Yes]\n      [else\
    \ 'No]))\n  (define (check-dot file_name)\n    (cond\n      [(regexp-match #rx\"\
    ^[a-zA-Z]+[0-9]{0,3}[.]$\" file_name) 'No]\n      [(regexp-match #rx\"^[a-zA-Z]+[0-9]{0,3}[.][a-zA-Z]+$\"\
    \ file_name) 'Yes]\n      [else 'No]))\n  (cond\n    [(check-dot file_name) (check-extension\
    \ file_name)]\n    [(check-name file_name) 'No]\n    [else 'No]))\n", "  (define\
    \ (is_valid_file_name file_name)\n    (define (is_valid_extension file_name)\n\
    \      (define (is_valid_extension-helper file_name)\n        (cond\n        \
    \  [(string=? file_name \"txt\") #t]\n          [(string=? file_name \"exe\")\
    \ #t]\n          [(string=? file_name \"dll\") #t]\n          [else #f]))\n  \
    \    (is_valid_extension-helper (substring file_name (+ (string-index file_name\
    \ #\\.) 1))))\n    (define (is_valid_name file_name)\n      (define (is_valid_name-helper\
    \ file_name)\n        (cond\n          [(string=? file_name \"\") #f]\n      \
    \    [(char-alphabetic? (string-ref file_name 0)) #t]\n          [else #f]))\n\
    \      (is_valid_name-helper (substring file_name 0 (string-index file_name #\\\
    .))))\n    (define (is_valid_digits file_name)\n      (define (is_valid_digits-helper\
    \ file_name)\n        (cond\n          [(string=? file_name \"\") #t]\n      \
    \    [(char-numeric? (string-ref file_name 0)) (is_valid_digits-helper (substring\
    \ file_name 1))]\n          [else #f]))\n      (is_valid_digits-helper (substring\
    \ file_name 0 (string-index file_name #\\.))))\n    (and (is_valid_extension file_name)\
    \ (is_valid_name file_name) (is_valid_digits file_name)))\n  (if (is_valid_file_name\
    \ file_name) \"Yes\" \"No\"))\n", "  (define (check-file-name-valid? file-name)\n\
    \    (and (regexp-match? #rx\"^[a-zA-Z]+[0-9]{0,3}\\\\.[a-zA-Z]{3}$\" file-name)\n\
    \         (regexp-match? #rx\"^[a-zA-Z]+[0-9]{0,3}\\\\.(txt|exe|dll)$\" file-name)))\n\
    \  (if (check-file-name-valid? file_name)\n      \"Yes\"\n      \"No\"))\n", " \
    \ (cond\n    [(regexp-match #rx\"^[a-zA-Z]+[0-9]{0,3}\\\\.txt$\" file_name) 'Yes]\n\
    \    [(regexp-match #rx\"^[a-zA-Z]+[0-9]{0,3}\\\\.exe$\" file_name) 'Yes]\n  \
    \  [(regexp-match #rx\"^[a-zA-Z]+[0-9]{0,3}\\\\.dll$\" file_name) 'Yes]\n    [else\
    \ 'No]))\n", "  (cond\n    [(regexp-match? #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\\\
    .txt$\" file_name) 'Yes]\n    [(regexp-match? #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\
    \\.exe$\" file_name) 'Yes]\n    [(regexp-match? #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\
    \\.dll$\" file_name) 'Yes]\n    [else 'No]))\n", "  (cond\n    [(regexp-match\
    \ #rx\"^[a-zA-Z]+[0-9]{0,3}\\\\.txt$\" file_name) 'Yes]\n    [(regexp-match #rx\"\
    ^[a-zA-Z]+[0-9]{0,3}\\\\.exe$\" file_name) 'Yes]\n    [(regexp-match #rx\"^[a-zA-Z]+[0-9]{0,3}\\\
    \\.dll$\" file_name) 'Yes]\n    [else 'No]))\n", "  (cond\n    [(regexp-match\
    \ #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\\.txt$\" file_name) 'Yes]\n    [(regexp-match\
    \ #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\\.exe$\" file_name) 'Yes]\n    [(regexp-match\
    \ #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\\.dll$\" file_name) 'Yes]\n    [else 'No]))\n",
  "  (let ([digits (regexp-match #rx\"[0-9]\" file_name)]\n        [dot (regexp-match\
    \ #rx\"\\.\" file_name)]\n        [before-dot (regexp-match #rx\"[a-zA-Z]\" (substring\
    \ file_name 0 (car dot)))]\n        [after-dot (regexp-match #rx\"(txt|exe|dll)\"\
    \ (substring file_name (+ (car dot) 1) (string-length file_name)))])\n    (cond\
    \ [(and (not (null? dot))\n                (not (null? before-dot))\n        \
    \        (not (null? after-dot))\n                (not (> (length digits) 3)))\n\
    \           \"Yes\"]\n          [else\n           \"No\"])))\n", "  (cond\n  \
    \  [(regexp-match #rx\"^[a-zA-Z]+[0-9]{0,3}\\\\.txt$\" file_name) 'Yes]\n    [(regexp-match\
    \ #rx\"^[a-zA-Z]+[0-9]{0,3}\\\\.exe$\" file_name) 'Yes]\n    [(regexp-match #rx\"\
    ^[a-zA-Z]+[0-9]{0,3}\\\\.dll$\" file_name) 'Yes]\n    [else 'No]))\n", "  (cond\n\
    \    [(regexp-match #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\\.txt$\" file_name) 'Yes]\n\
    \    [(regexp-match #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\\.exe$\" file_name) 'Yes]\n\
    \    [(regexp-match #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\\.dll$\" file_name) 'Yes]\n\
    \    [else 'No]))\n", "  (cond\n    [(regexp-match #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\
    \\.[a-zA-Z]{3}$\" file_name) 'Yes]\n    [else 'No]))\n", "  (define (is_valid_extension?\
    \ ext)\n    (cond\n      [(equal? ext \"txt\") #t]\n      [(equal? ext \"exe\"\
    ) #t]\n      [(equal? ext \"dll\") #t]\n      [else #f]))\n  (define (is_valid_name?\
    \ name)\n    (cond\n      [(regexp-match #rx\"^[a-zA-Z][a-zA-Z0-9]*$\" name) #t]\n\
    \      [else #f]))\n  (define (is_valid_file_name? file_name)\n    (let* ([parts\
    \ (regexp-split #rx\"\\.\" file_name)]\n           [name (first parts)]\n    \
    \       [ext (second parts)])\n      (and (is_valid_name? name)\n           (is_valid_extension?\
    \ ext))))\n  (cond\n    [(is_valid_file_name? file_name) \"Yes\"]\n    [else \"\
    No\"]))\n", "  (define (is_valid_extension? extension)\n    (member extension\
    \ '(\"txt\" \"exe\" \"dll\")))\n  (define (is_valid_name? name)\n    (and (regexp-match\
    \ #rx\"^[a-zA-Z]+$\" name)\n         (not (regexp-match #rx\"[0-9]{4,}\" name))))\n\
    \  (define (is_valid_file_name? file_name)\n    (define (split-file-name file_name)\n\
    \      (regexp-match #rx\"^([a-zA-Z]+)(\\\\.[a-zA-Z]+)$\" file_name))\n    (let*\
    \ ([split (split-file-name file_name)]\n           [name (cadr split)]\n     \
    \      [extension (caddr split)])\n      (and (is_valid_name? name)\n        \
    \   (is_valid_extension? extension))))\n  (if (is_valid_file_name? file_name)\n\
    \      \"Yes\"\n      \"No\"))\n", "  (define (is_valid_file_name file_name)\n\
    \    (define (is_valid_extension file_name)\n      (cond ((string=? (substring\
    \ file_name (string-index file_name \".\") +1) \"txt\") #t)\n            ((string=?\
    \ (substring file_name (string-index file_name \".\") +1) \"exe\") #t)\n     \
    \       ((string=? (substring file_name (string-index file_name \".\") +1) \"\
    dll\") #t)\n            (else #f)))\n    (define (is_valid_name file_name)\n \
    \     (cond ((string-index file_name \".\") #t)\n            (else #f)))\n   \
    \ (define (is_valid_number file_name)\n      (cond ((> (string-length (regexp-replace*\
    \ #rx\"[^0-9]\" file_name \"\")) 3) #f)\n            (else #t)))\n    (cond ((and\
    \ (is_valid_number file_name) (is_valid_name file_name) (is_valid_extension file_name))\
    \ #t)\n          (else #f)))\n  (cond ((is_valid_file_name file_name) \"Yes\"\
    )\n        (else \"No\")))\n", "  (cond\n    [(regexp-match? #rx\"^[a-zA-Z]+[0-9]{0,3}\\\
    \\.txt$\" file_name) 'Yes]\n    [(regexp-match? #rx\"^[a-zA-Z]+[0-9]{0,3}\\\\\
    .exe$\" file_name) 'Yes]\n    [(regexp-match? #rx\"^[a-zA-Z]+[0-9]{0,3}\\\\.dll$\"\
    \ file_name) 'Yes]\n    [else 'No]))\n", "  (cond\n    [(regexp-match #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\
    \\.txt$\" file_name) 'Yes]\n    [(regexp-match #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\
    \\.exe$\" file_name) 'Yes]\n    [(regexp-match #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\
    \\.dll$\" file_name) 'Yes]\n    [else 'No]))\n", "  (define (is_valid_extension?\
    \ extension)\n    (or (equal? extension \"txt\")\n        (equal? extension \"\
    exe\")\n        (equal? extension \"dll\")))\n  (define (is_valid_name? name)\n\
    \    (and (not (empty? name))\n         (regexp-match #rx\"[a-zA-Z]\" name)))\n\
    \  (define (is_valid_file_name? file_name)\n    (define (count-digits file_name)\n\
    \      (regexp-match #rx\"[0-9]\" file_name))\n    (define (count-dots file_name)\n\
    \      (regexp-match #rx\"\\.\" file_name))\n    (and (<= (count-digits file_name)\
    \ 3)\n         (= (count-dots file_name) 1)\n         (is_valid_name? (substring\
    \ file_name 0 (string-index file_name \".\")))\n         (is_valid_extension?\
    \ (substring file_name (+ 1 (string-index file_name \".\"))))))\n  (if (is_valid_file_name?\
    \ file_name)\n      \"Yes\"\n      \"No\"))\n", "  (define (check-extension extension)\n\
    \    (cond\n      [(string=? extension \"txt\") 'Yes]\n      [(string=? extension\
    \ \"exe\") 'Yes]\n      [(string=? extension \"dll\") 'Yes]\n      [else 'No]))\n\
    \  (define (check-name name)\n    (cond\n      [(string-empty? name) 'No]\n  \
    \    [(string-contains name #\\.) 'No]\n      [(string-contains name #\\0) 'No]\n\
    \      [(string-contains name #\\1) 'No]\n      [(string-contains name #\\2) 'No]\n\
    \      [(string-contains name #\\3) 'No]\n      [(string-contains name #\\4) 'No]\n\
    \      [(string-contains name #\\5) 'No]\n      [(string-contains name #\\6) 'No]\n\
    \      [(string-contains name #\\7) 'No]\n      [(string-contains name #\\8) 'No]\n\
    \      [(string-contains name #\\9) 'No]\n      [else 'Yes]))\n  (define (check-dot\
    \ file_name)\n    (cond\n      [(string-contains file_name #\\.) 'Yes]\n     \
    \ [else 'No]))\n  (define (get-extension file_name)\n    (string-split file_name\
    \ #\\.)\n    (cadr (string-split file_name #\\.)))\n  (define (get-name file_name)\n\
    \    (string-split file_name #\\.)\n    (car (string-split file_name #\\.)))\n\
    \  (cond\n    [(string=? (check-dot file_name) 'No) 'No]\n    [(string=? (check-name\
    \ (get-name file_name)) 'No) 'No]\n    [(string=? (check-extension (get-extension\
    \ file_name)) 'No) 'No]\n    [else 'Yes]))\n", "  (cond\n    [(regexp-match? #rx\"\
    ^[a-zA-Z]+[0-9]{0,3}\\\\.txt$\" file_name) 'Yes]\n    [(regexp-match? #rx\"^[a-zA-Z]+[0-9]{0,3}\\\
    \\.exe$\" file_name) 'Yes]\n    [(regexp-match? #rx\"^[a-zA-Z]+[0-9]{0,3}\\\\\
    .dll$\" file_name) 'Yes]\n    [else 'No]))\n", "  (cond\n    [(regexp-match #rx\"\
    ^[a-zA-Z][a-zA-Z0-9]{0,2}\\\\.txt$\" file_name) 'Yes]\n    [(regexp-match #rx\"\
    ^[a-zA-Z][a-zA-Z0-9]{0,2}\\\\.exe$\" file_name) 'Yes]\n    [(regexp-match #rx\"\
    ^[a-zA-Z][a-zA-Z0-9]{0,2}\\\\.dll$\" file_name) 'Yes]\n    [else 'No]))\n", " \
    \ (cond\n    [(regexp-match #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\\.[a-zA-Z]{3}$\"\
    \ file_name) 'Yes]\n    [else 'No]))\n", "  (define (is_valid_extension? extension)\n\
    \    (or (equal? extension \"txt\") (equal? extension \"exe\") (equal? extension\
    \ \"dll\")))\n  (define (count-digits str)\n    (define (count-digits-iter count\
    \ str)\n      (cond ((null? str) count)\n            ((char-numeric? (car str))\
    \ (count-digits-iter (+ count 1) (cdr str)))\n            (else (count-digits-iter\
    \ count (cdr str)))))\n    (count-digits-iter 0 str))\n  (define (is_valid_name?\
    \ name)\n    (and (not (empty? name)) (char-alphabetic? (car name))))\n  (define\
    \ (split-name str)\n    (define (split-name-iter str)\n      (cond ((null? str)\
    \ '())\n            ((equal? (car str) #\\.) (cons (list->string (reverse (cdr\
    \ str))) (list->string (reverse (cdr (cdr str))))))\n            (else (split-name-iter\
    \ (cdr str)))))\n    (split-name-iter (string->list str)))\n  (define (is_valid_file_name?\
    \ file_name)\n    (let* ((split-name (split-name file_name))\n           (name\
    \ (car split-name))\n           (extension (cadr split-name)))\n      (and (is_valid_name?\
    \ name) (is_valid_extension? extension) (<= (count-digits name) 3))))\n  (if (is_valid_file_name?\
    \ file_name) \"Yes\" \"No\"))\n", "  (cond\n    [(regexp-match #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\
    \\.txt$\" file_name) 'Yes]\n    [(regexp-match #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\
    \\.exe$\" file_name) 'Yes]\n    [(regexp-match #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\
    \\.dll$\" file_name) 'Yes]\n    [else 'No]))\n", "  (define (is_valid_file_name\
    \ file_name)\n    (define (is_valid_extension extension)\n      (or (= extension\
    \ \"txt\")\n          (= extension \"exe\")\n          (= extension \"dll\")))\n\
    \    (define (is_valid_file_name_part file_name_part)\n      (and (not (empty?\
    \ file_name_part))\n           (char-alphabetic? (string-ref file_name_part 0))\n\
    \           (not (> (count (lambda (c) (char-numeric? c)) file_name_part) 3))))\n\
    \    (define (split_file_name file_name)\n      (define (split_file_name_helper\
    \ file_name result)\n        (if (empty? file_name)\n            result\n    \
    \        (split_file_name_helper (rest file_name) (cons (first file_name) result))))\n\
    \      (split_file_name_helper file_name '()))\n    (define (count_dots file_name)\n\
    \      (count (lambda (c) (= c #\\.)) file_name))\n    (define (split_file_name_parts\
    \ file_name)\n      (define (split_file_name_parts_helper file_name result)\n\
    \        (if (empty? file_name)\n            result\n            (split_file_name_parts_helper\
    \ (rest file_name) (cons (first file_name) result))))\n      (split_file_name_parts_helper\
    \ file_name '()))\n    (define (split_file_name_parts_by_dot file_name)\n    \
    \  (define (split_file_name_parts_by_dot_helper file_name result)\n        (if\
    \ (empty? file_name)\n            result\n            (split_file_name_parts_by_dot_helper\
    \ (rest file_name) (cons (first file_name) result))))\n      (split_file_name_parts_by_dot_helper\
    \ file_name '()))\n    (define (split_file_name_parts_by_dot_helper file_name\
    \ result)\n      (if (empty? file_name)\n          result\n          (split_",
  "  (cond\n    [(regexp-match #rx\"^[a-zA-Z]+[0-9]{0,3}\\\\.txt$\" file_name) 'Yes]\n\
    \    [(regexp-match #rx\"^[a-zA-Z]+[0-9]{0,3}\\\\.exe$\" file_name) 'Yes]\n  \
    \  [(regexp-match #rx\"^[a-zA-Z]+[0-9]{0,3}\\\\.dll$\" file_name) 'Yes]\n    [else\
    \ 'No]))\n", "  (cond\n    [(regexp-match #rx\"^[a-zA-Z]+[0-9]{0,3}\\\\.txt$\"\
    \ file_name) 'Yes]\n    [(regexp-match #rx\"^[a-zA-Z]+[0-9]{0,3}\\\\.exe$\" file_name)\
    \ 'Yes]\n    [(regexp-match #rx\"^[a-zA-Z]+[0-9]{0,3}\\\\.dll$\" file_name) 'Yes]\n\
    \    [else 'No]))\n", "  (cond\n    [(regexp-match #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\
    \\.txt$\" file_name) 'Yes]\n    [(regexp-match #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\
    \\.exe$\" file_name) 'Yes]\n    [(regexp-match #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\
    \\.dll$\" file_name) 'Yes]\n    [else 'No]))\n", "  (cond\n    [(regexp-match\
    \ #rx\"^[a-zA-Z]+[0-9]{0,3}\\\\.[txt|exe|dll]$\" file_name) 'Yes]\n    [else 'No]))\n",
  "  (cond\n    [(regexp-match #rx\"^[a-zA-Z]+[0-9]{0,3}\\\\.txt$\" file_name) 'Yes]\n\
    \    [(regexp-match #rx\"^[a-zA-Z]+[0-9]{0,3}\\\\.exe$\" file_name) 'Yes]\n  \
    \  [(regexp-match #rx\"^[a-zA-Z]+[0-9]{0,3}\\\\.dll$\" file_name) 'Yes]\n    [else\
    \ 'No]))\n", "  (define (is_valid_extension? extension)\n    (member extension\
    \ '(\"txt\" \"exe\" \"dll\")))\n  (define (is_valid_name? name)\n    (and (not\
    \ (empty? name))\n         (regexp-match? #rx\"^[a-zA-Z]\" name)))\n  (define\
    \ (is_valid_file_name? file_name)\n    (let ([parts (string-split file_name #\\\
    .)])\n      (and (= (length parts) 2)\n           (is_valid_name? (first parts))\n\
    \           (is_valid_extension? (second parts)))))\n  (cond\n    [(is_valid_file_name?\
    \ file_name) \"Yes\"]\n    [else \"No\"]))\n", "  (cond\n    [(regexp-match #rx\"\
    ^[a-zA-Z][a-zA-Z0-9]{0,2}\\\\.[a-zA-Z]{3}$\" file_name) 'Yes]\n    [else 'No]))\n",
  "  (define (is_valid_extension? extension)\n    (cond\n      [(equal? extension\
    \ \"txt\") #t]\n      [(equal? extension \"exe\") #t]\n      [(equal? extension\
    \ \"dll\") #t]\n      [else #f]))\n  (define (is_valid_name? name)\n    (and\n\
    \      (not (empty? name))\n      (char-alphabetic? (string-ref name 0))\n   \
    \   (not (string-contains name #\\0))\n      (not (string-contains name #\\1))\n\
    \      (not (string-contains name #\\2))\n      (not (string-contains name #\\\
    3))\n      (not (string-contains name #\\4))\n      (not (string-contains name\
    \ #\\5))\n      (not (string-contains name #\\6))\n      (not (string-contains\
    \ name #\\7))\n      (not (string-contains name #\\8))\n      (not (string-contains\
    \ name #\\9))))\n  (define (count_dots str)\n    (cond\n      [(empty? str) 0]\n\
    \      [(equal? (first str) #\\.) (+ 1 (count_dots (rest str)))]\n      [else\
    \ (count_dots (rest str))]))\n  (define (split_file_name str)\n    (cond\n   \
    \   [(empty? str) (list \"\" \"\")]\n      [(equal? (first str) #\\.) (list (rest\
    \ str) \"\")]\n      [else (cons (string-append (first str) (first (split_file_name\
    \ (rest str)))) (second (split_file_name (rest str))))]))\n  (cond\n    [(equal?\
    \ (count_dots file_name) 1) (and (is_valid_name? (first (split_file_name file_name)))\
    \ (is_valid_extension? (second (split_file_name file_name))))]\n    [else #f]))\n",
  "  (cond\n    [(regexp-match #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\\.txt$\" file_name)\
    \ 'Yes]\n    [(regexp-match #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\\.exe$\" file_name)\
    \ 'Yes]\n    [(regexp-match #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\\.dll$\" file_name)\
    \ 'Yes]\n    [else 'No]))\n", "  (define (is_valid_extension? ext)\n    (or (equal?\
    \ ext \"txt\")\n        (equal? ext \"exe\")\n        (equal? ext \"dll\")))\n\
    \  (define (is_valid_name? name)\n    (and (not (empty? name))\n         (not\
    \ (regexp-match #rx\"^[0-9]+$\" name))\n         (regexp-match #rx\"^[a-zA-Z]+$\"\
    \ name)))\n  (define (is_valid_file_name? file_name)\n    (let ([parts (regexp-split\
    \ #rx\"\\.\" file_name)])\n      (and (= (length parts) 2)\n           (is_valid_name?\
    \ (first parts))\n           (is_valid_extension? (second parts)))))\n  (if (is_valid_file_name?\
    \ file_name)\n      \"Yes\"\n      \"No\"))\n", "  (cond\n    [(regexp-match #rx\"\
    ^[a-zA-Z][a-zA-Z0-9]{0,2}\\\\.txt$\" file_name) 'Yes]\n    [(regexp-match #rx\"\
    ^[a-zA-Z][a-zA-Z0-9]{0,2}\\\\.exe$\" file_name) 'Yes]\n    [(regexp-match #rx\"\
    ^[a-zA-Z][a-zA-Z0-9]{0,2}\\\\.dll$\" file_name) 'Yes]\n    [else 'No]))\n", " \
    \ (cond\n    [(regexp-match #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\\.txt$\" file_name)\
    \ 'Yes]\n    [(regexp-match #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\\.exe$\" file_name)\
    \ 'Yes]\n    [(regexp-match #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\\.dll$\" file_name)\
    \ 'Yes]\n    [else 'No]))\n", "  (cond\n    [(regexp-match #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\
    \\.txt$\" file_name) 'Yes]\n    [(regexp-match #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\
    \\.exe$\" file_name) 'Yes]\n    [(regexp-match #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\
    \\.dll$\" file_name) 'Yes]\n    [else 'No]))\n", "  (cond\n    [(regexp-match\
    \ #rx\"^[a-zA-Z][^0-9]*[0-9]{0,3}\\\\.[a-zA-Z]{3}$\" file_name) 'Yes]\n    [else\
    \ 'No]))\n", "  (define (is_valid_extension ext)\n    (cond\n      [(equal? ext\
    \ \"txt\") #t]\n      [(equal? ext \"exe\") #t]\n      [(equal? ext \"dll\") #t]\n\
    \      [else #f]))\n  (define (is_valid_name name)\n    (define (is_valid_name_helper\
    \ name)\n      (cond\n        [(empty? name) #t]\n        [(char-alphabetic? (first\
    \ name)) (is_valid_name_helper (rest name))]\n        [(char-numeric? (first name))\
    \ (is_valid_name_helper (rest name))]\n        [else #f]))\n    (and (not (empty?\
    \ name)) (is_valid_name_helper name)))\n  (define (is_valid_file_name file_name)\n\
    \    (let ([name (first (string-split file_name \".\"))]\n          [ext (second\
    \ (string-split file_name \".\"))])\n      (and (is_valid_name name)\n       \
    \    (is_valid_extension ext))))\n  (cond\n    [(is_valid_file_name file_name)\
    \ \"Yes\"]\n    [else \"No\"]))\n", "  (define (check_extension file_name)\n \
    \   (cond ((string=? (substring file_name (string-length file_name) (- (string-length\
    \ file_name) 3)) \"txt\") 'Yes)\n          ((string=? (substring file_name (string-length\
    \ file_name) (- (string-length file_name) 3)) \"exe\") 'Yes)\n          ((string=?\
    \ (substring file_name (string-length file_name) (- (string-length file_name)\
    \ 3)) \"dll\") 'Yes)\n          (else 'No)))\n  (define (check_name file_name)\n\
    \    (cond ((and (char-alphabetic? (string-ref file_name 0))\n               \
    \ (not (string-contains file_name #\\.))\n                (not (string-contains\
    \ file_name #\\_))) 'Yes)\n          (else 'No)))\n  (define (check_digits file_name)\n\
    \    (cond ((> (string-length (regexp-replace* #rx\"[^0-9]\" file_name \"\"))\
    \ 3) 'No)\n          (else 'Yes)))\n  (cond ((and (check_name file_name) (check_extension\
    \ file_name) (check_digits file_name)) 'Yes)\n        (else 'No)))\n", "  (define\
    \ (is_valid_extension? extension)\n    (cond\n      [(equal? extension \"txt\"\
    ) #t]\n      [(equal? extension \"exe\") #t]\n      [(equal? extension \"dll\"\
    ) #t]\n      [else #f]))\n  (define (is_valid_name? name)\n    (define (is_valid_char?\
    \ c)\n      (cond\n        [(char-alphabetic? c) #t]\n        [(char-numeric?\
    \ c) #t]\n        [else #f]))\n    (define (is_valid_name_char? c)\n      (cond\n\
    \        [(char-alphabetic? c) #t]\n        [else #f]))\n    (define (is_valid_name_digit?\
    \ c)\n      (cond\n        [(char-numeric? c) #t]\n        [else #f]))\n    (define\
    \ (is_valid_name_char? c)\n      (cond\n        [(char-alphabetic? c) #t]\n  \
    \      [else #f]))\n    (define (is_valid_name_char? c)\n      (cond\n       \
    \ [(char-alphabetic? c) #t]\n        [else #f]))\n    (define (is_valid_name_char?\
    \ c)\n      (cond\n        [(char-alphabetic? c) #t]\n        [else #f]))\n  \
    \  (define (is_valid_name_char? c)\n      (cond\n        [(char-alphabetic? c)\
    \ #t]\n        [else #f]))\n    (define (is_valid_name_char? c)\n      (cond\n\
    \        [(char-alphabetic? c) #t]\n        [else #f]))\n    (define (is_valid_name_char?\
    \ c)\n      (cond\n        [(char-alphabetic? c) #t]\n        [else #f]))\n  \
    \  (define (is_valid_name_char? c)\n      (cond\n        [(char-alphabetic? c)\
    \ #t]\n        [else #f]))\n    (define (is_valid_name_char? c)\n      (cond\n\
    \        [(char-alphabetic", "  (if (and (regexp-match? #rx\"^[a-zA-Z]+[0-9]{0,3}\\\
    \\.txt$\" file_name)\n          (regexp-match? #rx\"^[a-zA-Z]+[0-9]{0,3}\\\\.exe$\"\
    \ file_name)\n          (regexp-match? #rx\"^[a-zA-Z]+[0-9]{0,3}\\\\.dll$\" file_name))\n\
    \      \"Yes\"\n      \"No\"))\n", "  (cond\n    [(regexp-match? #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\
    \\.[a-zA-Z]{3}$\" file_name) \"Yes\"]\n    [else \"No\"]))\n", "  (let ([file_name\
    \ (string-split file_name \".\")])\n    (cond\n      [(and (= (length file_name)\
    \ 2)\n            (regexp-match? #rx\"^[a-zA-Z]+$\" (car file_name))\n       \
    \     (regexp-match? #rx\"^[0-9]{0,3}$\" (car file_name))\n            (member\
    \ (cadr file_name) '(\"txt\" \"exe\" \"dll\")))]\n      [else \"No\"])))\n", " \
    \ (cond\n    [(regexp-match #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\\.txt$\" file_name)\
    \ 'Yes]\n    [(regexp-match #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\\.exe$\" file_name)\
    \ 'Yes]\n    [(regexp-match #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\\.dll$\" file_name)\
    \ 'Yes]\n    [else 'No]))\n", "  (cond\n    [(regexp-match #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\
    \\.txt$\" file_name) 'Yes]\n    [(regexp-match #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\
    \\.exe$\" file_name) 'Yes]\n    [(regexp-match #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\
    \\.dll$\" file_name) 'Yes]\n    [else 'No]))\n", "  (define (is_valid_extension?\
    \ extension)\n    (cond [(string=? extension \"txt\") #t]\n          [(string=?\
    \ extension \"exe\") #t]\n          [(string=? extension \"dll\") #t]\n      \
    \    [else #f]))\n  (define (is_valid_name? name)\n    (and (regexp-match? #rx\"\
    ^[a-zA-Z]\" name)\n         (not (regexp-match? #rx\"[0-9]{4,}\" name))))\n  (define\
    \ (is_valid_file_name? file_name)\n    (define (split_file_name file_name)\n \
    \     (string-split file_name #\\.))\n    (define (get_extension file_name)\n\
    \      (last (split_file_name file_name)))\n    (define (get_name file_name)\n\
    \      (first (split_file_name file_name)))\n    (and (is_valid_extension? (get_extension\
    \ file_name))\n         (is_valid_name? (get_name file_name))))\n  (cond [(is_valid_file_name?\
    \ file_name) \"Yes\"]\n        [else \"No\"]))\n", "  (define (is_valid_extension?\
    \ extension)\n    (or (equal? extension \"txt\")\n        (equal? extension \"\
    exe\")\n        (equal? extension \"dll\")))\n  (define (is_valid_name? name)\n\
    \    (and (not (empty? name))\n         (char-alphabetic? (string-ref name 0))))\n\
    \  (define (is_valid_file_name? file_name)\n    (define (count_digits file_name)\n\
    \      (define (count_digits_iter file_name count)\n        (cond ((empty? file_name)\
    \ count)\n              ((char-numeric? (string-ref file_name 0)) (count_digits_iter\
    \ (string-drop file_name 1) (+ count 1)))\n              (else (count_digits_iter\
    \ (string-drop file_name 1) count))))\n      (count_digits_iter file_name 0))\n\
    \    (define (count_dots file_name)\n      (define (count_dots_iter file_name\
    \ count)\n        (cond ((empty? file_name) count)\n              ((equal? (string-ref\
    \ file_name 0) #\\.) (count_dots_iter (string-drop file_name 1) (+ count 1)))\n\
    \              (else (count_dots_iter (string-drop file_name 1) count))))\n  \
    \    (count_dots_iter file_name 0))\n    (define (split_file_name file_name)\n\
    \      (define (split_file_name_iter file_name name extension)\n        (cond\
    \ ((empty? file_name) (values name extension))\n              ((equal? (string-ref\
    \ file_name 0) #\\.) (split_file_name_iter (string-drop file_name 1) name (string-append\
    \ extension (string (string-ref file_name 0)))))\n              (else (split_file_name_iter\
    \ (string-drop file_name 1) (string-append name (string (string-ref file_name\
    \ 0))) extension))))\n      (split_file_name_iter file_name \"\" \"\"))\n    (define\
    \ (is_valid_file_name_iter file_name)\n      (let ([name (string-", "  (define\
    \ (is_valid_extension? extension)\n    (or (equal? extension \"txt\")\n      \
    \  (equal? extension \"exe\")\n        (equal? extension \"dll\")))\n  (define\
    \ (is_valid_name? name)\n    (and (not (empty? name))\n         (not (regexp-match\
    \ #rx\"[^a-zA-Z0-9]\" name))\n         (not (regexp-match #rx\"[0-9]{4,}\" name))))\n\
    \  (define (is_valid_file_name? file_name)\n    (let ([name (string-split file_name\
    \ \"\\\\.\")])\n      (and (= (length name) 2)\n           (is_valid_name? (first\
    \ name))\n           (is_valid_extension? (second name)))))\n  (if (is_valid_file_name?\
    \ file_name)\n      \"Yes\"\n      \"No\"))\n", "  (define (is_valid_extension\
    \ extension)\n    (cond\n      [(string=? extension \"txt\") #t]\n      [(string=?\
    \ extension \"exe\") #t]\n      [(string=? extension \"dll\") #t]\n      [else\
    \ #f]))\n  (define (is_valid_name name)\n    (define (count_digits name)\n   \
    \   (cond\n        [(empty? name) 0]\n        [(char-numeric? (first name)) (+\
    \ 1 (count_digits (rest name)))]\n        [else (count_digits (rest name))]))\n\
    \    (define (is_valid_first_char? char)\n      (or (char-alphabetic? char) (char-numeric?\
    \ char)))\n    (and (not (empty? name))\n         (is_valid_first_char? (first\
    \ name))\n         (<= (count_digits name) 3)))\n  (define (is_valid_file_name\
    \ file_name)\n    (define (split_file_name file_name)\n      (define (split_file_name_helper\
    \ file_name acc)\n        (cond\n          [(empty? file_name) acc]\n        \
    \  [(char=? (first file_name) #\\.) (split_file_name_helper (rest file_name) (cons\
    \ (reverse acc) (list (rest file_name))))]\n          [else (split_file_name_helper\
    \ (rest file_name) (cons (first file_name) acc))]))\n      (split_file_name_helper\
    \ file_name '()))\n    (define (split_file_name_result file_name)\n      (split_file_name\
    \ file_name))\n    (define (split_file_name_name file_name)\n      (first (split_file_name_result\
    \ file_name)))\n    (define (split_file_name_extension file_name)\n      (second\
    \ (split_file_name_result file_name)))\n    (and (is_valid_name (split_file_name_name\
    \ file_name))\n         (is_valid_extension (split_file_name_extension file_name))))\n\
    \  (cond\n   ", "  (define (is_valid_extension? extension)\n    (cond [(string=?\
    \ extension \"txt\") #t]\n          [(string=? extension \"exe\") #t]\n      \
    \    [(string=? extension \"dll\") #t]\n          [else #f]))\n  (define (is_valid_name?\
    \ name)\n    (define (is_valid_char? c)\n      (or (char-numeric? c) (char-alphabetic?\
    \ c)))\n    (define (is_valid_name_char? c)\n      (or (char-numeric? c) (char-alphabetic?\
    \ c) (char=? c #\\_)))\n    (define (is_valid_name_chars? name)\n      (and (not\
    \ (empty? name))\n           (is_valid_name_char? (car name))\n           (is_valid_name_chars?\
    \ (cdr name))))\n    (and (not (empty? name))\n         (is_valid_char? (car name))\n\
    \         (is_valid_name_chars? (cdr name))))\n  (define (is_valid_file_name?\
    \ file_name)\n    (define (is_valid_file_name_chars? file_name)\n      (cond [(empty?\
    \ file_name) #t]\n            [(char=? (car file_name) #\\.) #f]\n           \
    \ [(char-numeric? (car file_name)) (is_valid_file_name_chars? (cdr file_name))]\n\
    \            [else #t]))\n    (and (is_valid_name? file_name)\n         (is_valid_file_name_chars?\
    \ file_name)))\n  (define (is_valid_file_name_extension? file_name)\n    (define\
    \ (is_valid_file_name_extension_chars? file_name)\n      (cond [(empty? file_name)\
    \ #t]\n            [(char=? (car file_name) #\\.) #f]\n            [(char-numeric?\
    \ (car file_name)) (is_valid_file_name_extension_chars? (cdr file_name))]\n  \
    \          [", "  (if (and (regexp-match #rx\"^[a-zA-Z]+[0-9]{0,3}\\\\.txt$\"\
    \ file_name)\n          (regexp-match #rx\"^[a-zA-Z]+[0-9]{0,3}\\\\.exe$\" file_name)\n\
    \          (regexp-match #rx\"^[a-zA-Z]+[0-9]{0,3}\\\\.dll$\" file_name))\n  \
    \    \"Yes\"\n      \"No\"))\n", "  (define (is_valid_extension? extension)\n\
    \    (cond\n      [(equal? extension \"txt\") #t]\n      [(equal? extension \"\
    exe\") #t]\n      [(equal? extension \"dll\") #t]\n      [else #f]))\n  (define\
    \ (is_valid_name? name)\n    (define (is_valid_char? c)\n      (or (char-alphabetic?\
    \ c) (char-numeric? c)))\n    (define (is_valid_name-part? name-part)\n      (and\
    \ (not (empty? name-part))\n           (char-alphabetic? (string-ref name-part\
    \ 0))\n           (for/and ([c (in-string name-part)])\n             (is_valid_char?\
    \ c))))\n    (define (count-digits name-part)\n      (for/sum ([c (in-string name-part)])\n\
    \        (if (char-numeric? c) 1 0)))\n    (define (split-name name)\n      (regexp-match*\
    \ #rx\"^([^.]+)\\.([^.]+)$\" name))\n    (define (name-parts name)\n      (match\
    \ (split-name name)\n        [(list _ (list name-part1 name-part2))\n        \
    \ (list name-part1 name-part2)]))\n    (define (name-parts-valid? name)\n    \
    \  (let ([name-parts (name-parts name)])\n        (and (not (empty? name-parts))\n\
    \             (is_valid_name-part? (first name-parts))\n             (is_valid_name-part?\
    \ (second name-parts)))))\n    (define (name-parts-count-digits name)\n      (let\
    \ ([name-parts (name-parts name)])\n        (list (count-digits (first name-parts))\n\
    \              (count-digits (second name-parts)))))\n    (and (name-parts-valid?\
    \ name)\n         (let ([name-parts-count-digits (name-parts-count-digits name)])\n\
    \           (and (<= (first name-parts-count-digits) 3)\n                (<= (",
  "  (cond\n    [(regexp-match #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\\.txt$\" file_name)\
    \ 'Yes]\n    [(regexp-match #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\\.exe$\" file_name)\
    \ 'Yes]\n    [(regexp-match #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\\.dll$\" file_name)\
    \ 'Yes]\n    [else 'No]))\n", "  (define (is_valid_extension? extension)\n   \
    \ (cond [(equal? extension \"txt\") #t]\n          [(equal? extension \"exe\"\
    ) #t]\n          [(equal? extension \"dll\") #t]\n          [else #f]))\n  (define\
    \ (is_valid_name? name)\n    (and (regexp-match? #rx\"^[a-zA-Z]\" name)\n    \
    \     (regexp-match? #rx\"[0-9]{0,3}\" name)))\n  (define (is_valid_file_name?\
    \ file_name)\n    (let ([name (car (string-split file_name \"\\\\.\"))]\n    \
    \      [extension (cadr (string-split file_name \"\\\\.\"))])\n      (and (is_valid_name?\
    \ name)\n           (is_valid_extension? extension))))\n  (cond [(is_valid_file_name?\
    \ file_name) \"Yes\"]\n        [else \"No\"]))\n", "  (cond\n    [(regexp-match\
    \ #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\\.[a-zA-Z]{3}$\" file_name) 'Yes]\n    [else\
    \ 'No]))\n", "  (cond\n    [(regexp-match? #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\\\
    .txt$\" file_name) 'Yes]\n    [(regexp-match? #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\
    \\.exe$\" file_name) 'Yes]\n    [(regexp-match? #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\
    \\.dll$\" file_name) 'Yes]\n    [else 'No]))\n", "  (define (is_valid_extension?\
    \ extension)\n    (cond\n      [(equal? extension \"txt\") #t]\n      [(equal?\
    \ extension \"exe\") #t]\n      [(equal? extension \"dll\") #t]\n      [else #f]))\n\
    \  (define (is_valid_name? name)\n    (cond\n      [(regexp-match #rx\"^[a-zA-Z][a-zA-Z0-9]*$\"\
    \ name) #t]\n      [else #f]))\n  (define (is_valid_file_name? file_name)\n  \
    \  (cond\n      [(regexp-match #rx\"^[a-zA-Z][a-zA-Z0-9]*\\.[a-zA-Z]+$\" file_name)\
    \ #t]\n      [else #f]))\n  (define (is_valid_file_name_with_extension? file_name)\n\
    \    (cond\n      [(and (is_valid_file_name? file_name)\n            (is_valid_extension?\
    \ (substring file_name (string-index file_name #\\.)))) #t]\n      [else #f]))\n\
    \  (define (is_valid_file_name_with_name? file_name)\n    (cond\n      [(and (is_valid_file_name?\
    \ file_name)\n            (is_valid_name? (substring file_name 0 (string-index\
    \ file_name #\\.)))) #t]\n      [else #f]))\n  (cond\n    [(is_valid_file_name_with_extension?\
    \ file_name)\n     (cond\n       [(is_valid_file_name_with_name? file_name) \"\
    Yes\"]\n       [else \"No\"])]\n    [else \"No\"]))\n", "  (if (and (regexp-match\
    \ #rx\"^[a-zA-Z]+[0-9]{0,3}\\\\.[txt|exe|dll]$\" file_name)\n          (not (regexp-match\
    \ #rx\"^[0-9]+\" file_name)))\n      \"Yes\"\n      \"No\"))\n", "  (cond\n  \
    \  [(regexp-match #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\\.[a-zA-Z]{3}$\" file_name)\
    \ 'Yes]\n    [else 'No]))\n", "  (define (is_valid_extension? extension)\n   \
    \ (or (equal? extension \"txt\")\n        (equal? extension \"exe\")\n       \
    \ (equal? extension \"dll\")))\n  (define (is_valid_name? name)\n    (and (not\
    \ (empty? name))\n         (char-alphabetic? (string-ref name 0))))\n  (define\
    \ (is_valid_file_name? file_name)\n    (let ((parts (string-split file_name \"\
    \\\\.\")))\n      (and (= (length parts) 2)\n           (is_valid_name? (first\
    \ parts))\n           (is_valid_extension? (second parts)))))\n  (define (is_valid_digits?\
    \ digits)\n    (and (not (empty? digits))\n         (not (char-numeric? (string-ref\
    \ digits 0)))\n         (not (char-numeric? (string-ref digits 1)))\n        \
    \ (not (char-numeric? (string-ref digits 2)))))\n  (define (is_valid_file_name_with_digits?\
    \ file_name)\n    (let ((parts (string-split file_name \"\\\\.\")))\n      (and\
    \ (= (length parts) 2)\n           (is_valid_digits? (first parts))\n        \
    \   (is_valid_extension? (second parts)))))\n  (cond ((is_valid_file_name? file_name)\
    \ 'Yes)\n        ((is_valid_file_name_with_digits? file_name) 'Yes)\n        (else\
    \ 'No)))\n", "  (cond\n    [(regexp-match #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\\.txt$\"\
    \ file_name) 'Yes]\n    [(regexp-match #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\\.exe$\"\
    \ file_name) 'Yes]\n    [(regexp-match #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\\.dll$\"\
    \ file_name) 'Yes]\n    [else 'No]))\n", "  (cond\n    [(regexp-match #rx\"^[a-zA-Z]+[0-9]{0,3}\\\
    \\.txt$\" file_name) 'Yes]\n    [(regexp-match #rx\"^[a-zA-Z]+[0-9]{0,3}\\\\.exe$\"\
    \ file_name) 'Yes]\n    [(regexp-match #rx\"^[a-zA-Z]+[0-9]{0,3}\\\\.dll$\" file_name)\
    \ 'Yes]\n    [else 'No]))\n", "  (define (is_valid_extension? extension)\n   \
    \ (or (equal? extension \"txt\")\n        (equal? extension \"exe\")\n       \
    \ (equal? extension \"dll\")))\n  (define (is_valid_name? name)\n    (and (not\
    \ (empty? name))\n         (regexp-match? #rx\"[a-zA-Z]\" name)))\n  (define (is_valid_file_name?\
    \ file_name)\n    (define (count-digits file_name)\n      (length (regexp-match-all\
    \ #rx\"[0-9]\" file_name)))\n    (define (count-dots file_name)\n      (length\
    \ (regexp-match-all #rx\"\\.\" file_name)))\n    (and (not (> (count-digits file_name)\
    \ 3))\n         (= (count-dots file_name) 1)\n         (is_valid_name? (substring\
    \ file_name 0 (regexp-index-of #rx\"\\.\" file_name)))\n         (is_valid_extension?\
    \ (substring file_name (+ 1 (regexp-index-of #rx\"\\.\" file_name))))))\n  (if\
    \ (is_valid_file_name? file_name)\n      \"Yes\"\n      \"No\"))\n", "  (cond\n\
    \    [(regexp-match? #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\\.txt$\" file_name) \"Yes\"\
    ]\n    [(regexp-match? #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\\.exe$\" file_name) \"\
    Yes\"]\n    [(regexp-match? #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\\.dll$\" file_name)\
    \ \"Yes\"]\n    [else \"No\"]))\n", "  (define (is_valid_file_name file_name)\n\
    \    (define (is_valid_extension ext)\n      (member ext '(\"txt\" \"exe\" \"\
    dll\")))\n    (define (is_valid_name name)\n      (and (not (empty? name))\n \
    \          (char-alphabetic? (string-ref name 0))\n           (not (regexp-match\
    \ #rx\"[0-9]\" name))))\n    (define (is_valid_file_name_parts parts)\n      (and\
    \ (not (empty? parts))\n           (is_valid_name (car parts))\n           (is_valid_extension\
    \ (cadr parts))))\n    (define (is_valid_file_name_parts_count parts)\n      (and\
    \ (not (empty? parts))\n           (not (> (length parts) 3))))\n    (and (is_valid_file_name_parts_count\
    \ (string-split file_name #rx\"\\.\"))\n         (is_valid_file_name_parts (string-split\
    \ file_name #rx\"\\.\"))))\n  (if (is_valid_file_name file_name)\n      \"Yes\"\
    \n      \"No\"))\n", "  (cond\n    [(regexp-match #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\
    \\.txt$\" file_name) 'Yes]\n    [(regexp-match #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\
    \\.exe$\" file_name) 'Yes]\n    [(regexp-match #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\
    \\.dll$\" file_name) 'Yes]\n    [else 'No]))\n", "  (define (is_valid_extension?\
    \ ext)\n    (cond\n      [(string=? ext \"txt\") #t]\n      [(string=? ext \"\
    exe\") #t]\n      [(string=? ext \"dll\") #t]\n      [else #f]))\n  (define (is_valid_name?\
    \ name)\n    (cond\n      [(regexp-match #rx\"[a-zA-Z]+\" name) #t]\n      [else\
    \ #f]))\n  (define (is_valid_digits? digits)\n    (cond\n      [(> (string-length\
    \ digits) 3) #f]\n      [else #t]))\n  (define (is_valid_file_name? file_name)\n\
    \    (let* ([parts (string-split file_name \"\\\\.\")]\n           [name (first\
    \ parts)]\n           [ext (second parts)])\n      (and (is_valid_extension? ext)\n\
    \           (is_valid_name? name)\n           (is_valid_digits? name))))\n  (cond\n\
    \    [(is_valid_file_name? file_name) \"Yes\"]\n    [else \"No\"]))\n", "  (cond\n\
    \    [(regexp-match #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\\.[a-zA-Z]{3}$\" file_name)\
    \ 'Yes]\n    [else 'No]))\n", "  (define (check_extension extension)\n    (cond\n\
    \      [(string=? extension \"txt\") #t]\n      [(string=? extension \"exe\")\
    \ #t]\n      [(string=? extension \"dll\") #t]\n      [else #f]))\n  (define (check_name\
    \ name)\n    (cond\n      [(regexp-match #rx\"^[a-zA-Z][a-zA-Z0-9]*$\" name) #t]\n\
    \      [else #f]))\n  (define (check_digits digits)\n    (cond\n      [(> digits\
    \ 3) #f]\n      [else #t]))\n  (define (count_digits str)\n    (define (count_digits_iter\
    \ str count)\n      (cond\n        [(empty? str) count]\n        [(char-numeric?\
    \ (first str)) (count_digits_iter (rest str) (+ count 1))]\n        [else (count_digits_iter\
    \ (rest str) count)]))\n    (count_digits_iter str 0))\n  (cond\n    [(regexp-match\
    \ #rx\"^[a-zA-Z][a-zA-Z0-9]*\\.[a-zA-Z]{3}$\" file_name)\n     (let ([name (substring\
    \ file_name 0 (string-index file_name \".\"))]\n           [extension (substring\
    \ file_name (+ (string-index file_name \".\") 1) (string-length file_name))])\n\
    \       (cond\n         [(and (check_name name) (check_extension extension) (check_digits\
    \ (count_digits name))) \"Yes\"]\n         [else \"No\"]))]\n    [else \"No\"\
    ]))\n", "  (define (check-extension extension)\n    (cond ((equal? extension \"\
    txt\") #t)\n          ((equal? extension \"exe\") #t)\n          ((equal? extension\
    \ \"dll\") #t)\n          (else #f)))\n  (define (check-name name)\n    (cond\
    \ ((and (not (empty? name)) (char-alphabetic? (string-ref name 0))) #t)\n    \
    \      (else #f)))\n  (define (check-digits digits)\n    (cond ((> digits 3) #f)\n\
    \          (else #t)))\n  (define (check-dot dot)\n    (cond ((equal? dot 1) #t)\n\
    \          (else #f)))\n  (define (check-file-name file_name)\n    (let ((dot-index\
    \ (string-index file_name \".\"))\n          (digits-count (count-digits file_name)))\n\
    \      (and (check-extension (substring file_name (+ dot-index 1)))\n        \
    \   (check-name (substring file_name 0 dot-index))\n           (check-digits digits-count)\n\
    \           (check-dot dot-index))))\n  (cond ((check-file-name file_name) \"\
    Yes\")\n        (else \"No\")))\n", "  (cond\n    [(regexp-match #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\
    \\.[a-zA-Z]{3}$\" file_name) 'Yes]\n    [else 'No]))\n", "  (cond\n    [(regexp-match\
    \ #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\\.[a-zA-Z]{3}$\" file_name) 'Yes]\n    [else\
    \ 'No]))\n", "  (cond\n    [(regexp-match? #rx\"^[a-zA-Z]+[0-9]{0,3}\\\\.txt$\"\
    \ file_name) 'Yes]\n    [(regexp-match? #rx\"^[a-zA-Z]+[0-9]{0,3}\\\\.exe$\" file_name)\
    \ 'Yes]\n    [(regexp-match? #rx\"^[a-zA-Z]+[0-9]{0,3}\\\\.dll$\" file_name) 'Yes]\n\
    \    [else 'No]))\n", "  (define (is_valid_extension ext)\n    (cond\n      [(equal?\
    \ ext \"txt\") #t]\n      [(equal? ext \"exe\") #t]\n      [(equal? ext \"dll\"\
    ) #t]\n      [else #f]))\n  (define (is_valid_name name)\n    (and (regexp-match?\
    \ #rx\"^[a-zA-Z]+$\" name)\n         (not (regexp-match? #rx\"[0-9]{4,}\" name))))\n\
    \  (define (is_valid_file_name file_name)\n    (define (split_file_name file_name)\n\
    \      (string-split file_name #\\.))\n    (define (get_extension file_name)\n\
    \      (last (split_file_name file_name)))\n    (define (get_name file_name)\n\
    \      (first (split_file_name file_name)))\n    (and (is_valid_extension (get_extension\
    \ file_name))\n         (is_valid_name (get_name file_name))))\n  (cond\n    [(is_valid_file_name\
    \ file_name) \"Yes\"]\n    [else \"No\"]))\n", "  (cond\n    [(regexp-match #rx\"\
    ^[a-zA-Z][a-zA-Z0-9]{0,2}\\\\.[a-zA-Z]{3}$\" file_name) 'Yes]\n    [else 'No]))\n",
  "  (cond\n    [(regexp-match #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\\.txt$\" file_name)\
    \ 'Yes]\n    [(regexp-match #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\\.exe$\" file_name)\
    \ 'Yes]\n    [(regexp-match #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\\.dll$\" file_name)\
    \ 'Yes]\n    [else 'No]))\n", "  (define (is_valid_extension? extension)\n   \
    \ (member extension '(\"txt\" \"exe\" \"dll\")))\n  (define (is_valid_name? name)\n\
    \    (and (not (empty? name))\n         (regexp-match? #rx\"^[a-zA-Z]\" name)))\n\
    \  (define (is_valid_file_name? file_name)\n    (define (count-digits file_name)\n\
    \      (define (count-digits-iter file_name count)\n        (cond\n          [(empty?\
    \ file_name) count]\n          [(char-numeric? (first file_name)) (count-digits-iter\
    \ (rest file_name) (+ count 1))]\n          [else (count-digits-iter (rest file_name)\
    \ count)]))\n      (count-digits-iter file_name 0))\n    (define (count-dots file_name)\n\
    \      (define (count-dots-iter file_name count)\n        (cond\n          [(empty?\
    \ file_name) count]\n          [(char=? (first file_name) #\\.) (count-dots-iter\
    \ (rest file_name) (+ count 1))]\n          [else (count-dots-iter (rest file_name)\
    \ count)]))\n      (count-dots-iter file_name 0))\n    (and (not (> (count-digits\
    \ file_name) 3))\n         (= (count-dots file_name) 1)\n         (is_valid_name?\
    \ (substring file_name 0 (string-index file_name #\\.)))\n         (is_valid_extension?\
    \ (substring file_name (+ (string-index file_name #\\.) 1) (string-length file_name)))))\n\
    \  (cond\n    [(is_valid_file_name? file_name) \"Yes\"]\n    [else \"No\"]))\n",
  "  (cond\n    [(regexp-match #rx\"^[a-zA-Z]+[0-9]{0,3}\\\\.txt$\" file_name) 'Yes]\n\
    \    [(regexp-match #rx\"^[a-zA-Z]+[0-9]{0,3}\\\\.exe$\" file_name) 'Yes]\n  \
    \  [(regexp-match #rx\"^[a-zA-Z]+[0-9]{0,3}\\\\.dll$\" file_name) 'Yes]\n    [else\
    \ 'No]))\n", "  (cond\n    [(regexp-match? #rx\"^[a-zA-Z]+[0-9]{0,3}\\\\.txt$\"\
    \ file_name) 'Yes]\n    [(regexp-match? #rx\"^[a-zA-Z]+[0-9]{0,3}\\\\.exe$\" file_name)\
    \ 'Yes]\n    [(regexp-match? #rx\"^[a-zA-Z]+[0-9]{0,3}\\\\.dll$\" file_name) 'Yes]\n\
    \    [else 'No]))\n", "  (define (is_valid_extension? extension)\n    (member\
    \ extension '(\"txt\" \"exe\" \"dll\")))\n  (define (is_valid_name? name)\n  \
    \  (and (regexp-match? #rx\"^[a-zA-Z]\" name)\n         (not (regexp-match? #rx\"\
    [0-9]{4,}\" name))))\n  (define (is_valid_file_name? file_name)\n    (let ([parts\
    \ (string-split file_name \"\\\\.\")])\n      (and (= (length parts) 2)\n    \
    \       (is_valid_name? (first parts))\n           (is_valid_extension? (second\
    \ parts)))))\n  (if (is_valid_file_name? file_name)\n      \"Yes\"\n      \"No\"\
    ))\n", "  (cond\n    [(regexp-match #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\\.[a-zA-Z]{3}$\"\
    \ file_name) 'Yes]\n    [else 'No]))\n", "  (define (is_valid_extension? extension)\n\
    \    (member extension '(\"txt\" \"exe\" \"dll\")))\n  (define (is_valid_name?\
    \ name)\n    (and (not (empty? name))\n         (regexp-match? #rx\"^[a-zA-Z]+$\"\
    \ name)))\n  (define (is_valid_file_name? file_name)\n    (and (regexp-match?\
    \ #rx\"^[a-zA-Z]+[0-9]{0,3}\\\\.[a-zA-Z]+$\" file_name)\n         (is_valid_name?\
    \ (substring file_name 0 (string-index file_name #\\.)))\n         (is_valid_extension?\
    \ (substring file_name (+ 1 (string-index file_name #\\.))))))\n  (if (is_valid_file_name?\
    \ file_name)\n      \"Yes\"\n      \"No\"))\n", "  (let ([file-name-regexp (regexp\
    \ \"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\\.[a-zA-Z]{3}$\")])\n    (if (regexp-match file-name-regexp\
    \ file_name)\n        \"Yes\"\n        \"No\")))\n", "  (define (is_valid_extension?\
    \ ext)\n    (cond\n      [(string=? ext \"txt\") #t]\n      [(string=? ext \"\
    exe\") #t]\n      [(string=? ext \"dll\") #t]\n      [else #f]))\n  (define (is_valid_name?\
    \ name)\n    (and\n      (regexp-match? #rx\"^[a-zA-Z]\" name)\n      (not (regexp-match?\
    \ #rx\"[0-9]{4,}\" name))))\n  (define (is_valid_file_name? file_name)\n    (let*\
    \ ([parts (string-split file_name #\\.)]\n           [name (first parts)]\n  \
    \         [ext (second parts)])\n      (and\n        (is_valid_name? name)\n \
    \       (is_valid_extension? ext))))\n  (cond\n    [(is_valid_file_name? file_name)\
    \ \"Yes\"]\n    [else \"No\"]))\n", "  (define (is_valid_extension? extension)\n\
    \    (cond ((equal? extension \"txt\") #t)\n          ((equal? extension \"exe\"\
    ) #t)\n          ((equal? extension \"dll\") #t)\n          (else #f)))\n  (define\
    \ (is_valid_name? name)\n    (cond ((regexp-match #rx\"^[a-zA-Z]+$\" name) #t)\n\
    \          (else #f)))\n  (define (is_valid_number? number)\n    (cond ((regexp-match\
    \ #rx\"^[0-9]{1,3}$\" number) #t)\n          (else #f)))\n  (define (is_valid_file_name?\
    \ file_name)\n    (let* ([parts (regexp-split #rx\"\\.\" file_name)]\n       \
    \    [name (first parts)]\n           [extension (second parts)])\n      (and\
    \ (is_valid_name? name)\n           (is_valid_extension? extension)\n        \
    \   (is_valid_number? name))))\n  (cond ((is_valid_file_name? file_name) \"Yes\"\
    )\n        (else \"No\")))\n", "  (cond\n    [(regexp-match? #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\
    \\.txt$\" file_name) \"Yes\"]\n    [(regexp-match? #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\
    \\.exe$\" file_name) \"Yes\"]\n    [(regexp-match? #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\
    \\.dll$\" file_name) \"Yes\"]\n    [else \"No\"]))\n", "  (define (is_valid_extension\
    \ ext)\n    (or (string=? ext \"txt\")\n        (string=? ext \"exe\")\n     \
    \   (string=? ext \"dll\")))\n  (define (is_valid_name name)\n    (and (regexp-match?\
    \ #rx\"^[a-zA-Z]+$\" name)\n         (not (regexp-match? #rx\"[0-9]{4,}\" name))))\n\
    \  (define (is_valid_file_name file_name)\n    (let* ([parts (string-split file_name\
    \ #\"\\.\")]\n           [name (first parts)]\n           [ext (second parts)])\n\
    \      (and (= (length parts) 2)\n           (is_valid_name name)\n          \
    \ (is_valid_extension ext))))\n  (if (is_valid_file_name file_name)\n      \"\
    Yes\"\n      \"No\"))\n", "  (define (is_valid_file_name? file_name)\n    (define\
    \ (is_valid_file_name_helper? file_name)\n      (cond ((string=? file_name \"\"\
    ) #t)\n            ((string-contains file_name \".\") #f)\n            ((string-contains\
    \ file_name \"..\") #f)\n            ((string-contains file_name \"...\") #f)\n\
    \            ((string-contains file_name \"....\") #f)\n            ((string-contains\
    \ file_name \".....\") #f)\n            ((string-contains file_name \"0\") #f)\n\
    \            ((string-contains file_name \"1\") #f)\n            ((string-contains\
    \ file_name \"2\") #f)\n            ((string-contains file_name \"3\") #f)\n \
    \           ((string-contains file_name \"4\") #f)\n            ((string-contains\
    \ file_name \"5\") #f)\n            ((string-contains file_name \"6\") #f)\n \
    \           ((string-contains file_name \"7\") #f)\n            ((string-contains\
    \ file_name \"8\") #f)\n            ((string-contains file_name \"9\") #f)\n \
    \           ((string-contains file_name \"txt\") #t)\n            ((string-contains\
    \ file_name \"exe\") #t)\n            ((string-contains file_name \"dll\") #t)\n\
    \            (else #f)))\n    (and (is_valid_file_name_helper? file_name)\n  \
    \       (string-contains file_name \".\")\n         (not (string=? (substring\
    \ file_name 0 1) \"\"))\n         (string-contains (substring file_name 0 1) \"\
    abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\")))\n  (if (is_valid_file_name?\
    \ file_name)\n      \"Yes\"\n      \"No\"))\n", "  (cond\n    [(regexp-match #rx\"\
    ^[a-zA-Z][a-zA-Z0-9]{0,2}\\\\.[a-zA-Z]{3}$\" file_name) 'Yes]\n    [else 'No]))\n",
  "  (define (count-digits str)\n    (if (empty? str)\n        0\n        (+ (if (char-numeric?\
    \ (first str)) 1 0)\n           (count-digits (rest str)))))\n  (define (count-dots\
    \ str)\n    (if (empty? str)\n        0\n        (+ (if (char=? (first str) #\\\
    .) 1 0)\n           (count-dots (rest str)))))\n  (define (is-valid-extension\
    \ str)\n    (or (string=? str \"txt\")\n        (string=? str \"exe\")\n     \
    \   (string=? str \"dll\")))\n  (define (is-valid-name str)\n    (and (not (empty?\
    \ str))\n         (char-alphabetic? (first str))\n         (not (char-numeric?\
    \ (first str)))))\n  (define (is-valid-file-name str)\n    (let ((dot-index (string-index\
    \ str #\\.))\n          (name (substring str 0 dot-index))\n          (extension\
    \ (substring str (+ dot-index 1))))\n      (and (= (count-digits str) 0)\n   \
    \        (= (count-dots str) 1)\n           (is-valid-name name)\n           (is-valid-extension\
    \ extension))))\n  (if (is-valid-file-name file_name)\n      \"Yes\"\n      \"\
    No\"))\n", "  (cond\n    [(regexp-match #rx\"^[a-zA-Z]+[0-9]{0,3}\\\\.txt$\" file_name)\
    \ 'Yes]\n    [(regexp-match #rx\"^[a-zA-Z]+[0-9]{0,3}\\\\.exe$\" file_name) 'Yes]\n\
    \    [(regexp-match #rx\"^[a-zA-Z]+[0-9]{0,3}\\\\.dll$\" file_name) 'Yes]\n  \
    \  [else 'No]))\n", "  (cond\n    [(regexp-match #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\
    \\.[txt|exe|dll]$\" file_name) 'Yes]\n    [else 'No]))\n", "  (cond\n    [(regexp-match\
    \ #rx\"^[a-zA-Z]+[0-9]{0,3}\\\\.txt$\" file_name) 'Yes]\n    [(regexp-match #rx\"\
    ^[a-zA-Z]+[0-9]{0,3}\\\\.exe$\" file_name) 'Yes]\n    [(regexp-match #rx\"^[a-zA-Z]+[0-9]{0,3}\\\
    \\.dll$\" file_name) 'Yes]\n    [else 'No]))\n", "  (cond\n    [(regexp-match?\
    \ #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\\.txt$\" file_name) 'Yes]\n    [(regexp-match?\
    \ #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\\.exe$\" file_name) 'Yes]\n    [(regexp-match?\
    \ #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\\.dll$\" file_name) 'Yes]\n    [else 'No]))\n",
  "  (cond\n    [(regexp-match #rx\"^[a-zA-Z]+[0-9]{0,3}\\\\.txt$\" file_name) \"\
    Yes\"]\n    [(regexp-match #rx\"^[a-zA-Z]+[0-9]{0,3}\\\\.exe$\" file_name) \"\
    Yes\"]\n    [(regexp-match #rx\"^[a-zA-Z]+[0-9]{0,3}\\\\.dll$\" file_name) \"\
    Yes\"]\n    [else \"No\"]))\n", "  (define (is_valid_extension? extension)\n \
    \   (cond\n      [(equal? extension \"txt\") #t]\n      [(equal? extension \"\
    exe\") #t]\n      [(equal? extension \"dll\") #t]\n      [else #f]))\n  (define\
    \ (is_valid_name? name)\n    (and\n      (regexp-match? #rx\"^[a-zA-Z]+$\" name)\n\
    \      (not (regexp-match? #rx\"[0-9]{4,}\" name))))\n  (define (is_valid_file_name?\
    \ file_name)\n    (define (split-file-name file_name)\n      (regexp-split #rx\"\
    \\.\" file_name))\n    (define (get-extension file_name)\n      (last (split-file-name\
    \ file_name)))\n    (define (get-name file_name)\n      (first (split-file-name\
    \ file_name)))\n    (and\n      (is_valid_extension? (get-extension file_name))\n\
    \      (is_valid_name? (get-name file_name))))\n  (cond\n    [(is_valid_file_name?\
    \ file_name) \"Yes\"]\n    [else \"No\"]))\n", "  (let ([name (string-split file_name\
    \ \"\\\\.\")])\n    (cond\n      [(and (equal? (length name) 2)\n            (regexp-match?\
    \ #rx\"^[a-zA-Z]\\\\w*$\" (car name))\n            (regexp-match? #rx\"^\\\\d{0,3}$\"\
    \ (car name))\n            (member (cadr name) '(\"txt\" \"exe\" \"dll\")))\n\
    \       \"Yes\"]\n      [else \"No\"])))\n", "  (cond\n    [(regexp-match #rx\"\
    ^[a-zA-Z][a-zA-Z0-9]{0,2}\\\\.[a-zA-Z]{3}$\" file_name) 'Yes]\n    [else 'No]))\n",
  "  (cond\n    [(regexp-match #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\\.txt$\" file_name)\
    \ 'Yes]\n    [(regexp-match #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\\.exe$\" file_name)\
    \ 'Yes]\n    [(regexp-match #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\\.dll$\" file_name)\
    \ 'Yes]\n    [else 'No]))\n", "  (cond\n    [(string=? file_name \"\") 'No]\n\
    \    [(string=? file_name \".\") 'No]\n    [(string=? file_name \"..\") 'No]\n\
    \    [(string=? file_name \"...\") 'No]\n    [(string=? file_name \"....\") 'No]\n\
    \    [(string=? file_name \".....\") 'No]\n    [(string=? file_name \"......\"\
    ) 'No]\n    [(string=? file_name \".......\") 'No]\n    [(string=? file_name \"\
    ........\") 'No]\n    [(string=? file_name \".........\") 'No]\n    [(string=?\
    \ file_name \"..........\") 'No]\n    [(string=? file_name \"...........\") 'No]\n\
    \    [(string=? file_name \"............\") 'No]\n    [(string=? file_name \"\
    .............\") 'No]\n    [(string=? file_name \"..............\") 'No]\n   \
    \ [(string=? file_name \"...............\") 'No]\n    [(string=? file_name \"\
    ................\") 'No]\n    [(string=? file_name \".................\") 'No]\n\
    \    [(string=? file_name \"..................\") 'No]\n    [(string=? file_name\
    \ \"...................\") 'No]\n    [(string=? file_name \"....................\"\
    ) 'No]\n    [(string=? file_name \".....................\") 'No]\n    [(string=?\
    \ file_name \"......................\") 'No]\n    [(string=? file_name \".......................\"\
    ) 'No]\n    [(string=? file_name \"........................\") 'No]\n    [(string=?\
    \ file_name \".........................\") 'No]\n    [(string=? file_name \".........................0\"\
    ) 'No]\n    [(string=? file_name \".........................1\") 'No]\n    [(string=?\
    \ file_name \".........................2\") 'No]\n    [(string=? file_name \"\
    .........................3\") 'No]\n    [(string=? file_name \".........................4\"\
    ) 'No]\n    [(string=? file_name \".........................5\") 'No]\n    [(string",
  "  (cond\n    [(regexp-match #rx\"^[a-zA-Z]+[0-9]{0,3}\\\\.txt$\" file_name) 'Yes]\n\
    \    [(regexp-match #rx\"^[a-zA-Z]+[0-9]{0,3}\\\\.exe$\" file_name) 'Yes]\n  \
    \  [(regexp-match #rx\"^[a-zA-Z]+[0-9]{0,3}\\\\.dll$\" file_name) 'Yes]\n    [else\
    \ 'No]))\n", "  (define (is_valid_extension? ext)\n    (cond\n      [(equal? ext\
    \ \"txt\") #t]\n      [(equal? ext \"exe\") #t]\n      [(equal? ext \"dll\") #t]\n\
    \      [else #f]))\n  (define (is_valid_name? name)\n    (and\n      (regexp-match?\
    \ #rx\"^[a-zA-Z]\" name)\n      (not (regexp-match? #rx\"[0-9]{4,}\" name))))\n\
    \  (define (is_valid_file_name? file_name)\n    (cond\n      [(regexp-match? #rx\"\
    ^[a-zA-Z]+[.][a-zA-Z]+$\" file_name) #t]\n      [else #f]))\n  (define (get_extension\
    \ file_name)\n    (regexp-match #rx\"[.][a-zA-Z]+$\" file_name))\n  (define (get_name\
    \ file_name)\n    (regexp-match #rx\"^[a-zA-Z]+\" file_name))\n  (cond\n    [(is_valid_file_name?\
    \ file_name)\n     (let ([name (get_name file_name)]\n           [ext (get_extension\
    \ file_name)])\n       (cond\n         [(and (is_valid_name? name) (is_valid_extension?\
    \ ext)) \"Yes\"]\n         [else \"No\"]))]\n    [else \"No\"]))\n", "  (cond\n\
    \    [(regexp-match #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\\.txt$\" file_name) 'Yes]\n\
    \    [(regexp-match #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\\.exe$\" file_name) 'Yes]\n\
    \    [(regexp-match #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\\.dll$\" file_name) 'Yes]\n\
    \    [else 'No]))\n", "  (cond\n    [(regexp-match #rx\"^[a-zA-Z]+[0-9]{0,3}\\\
    \\.txt$\" file_name) 'Yes]\n    [(regexp-match #rx\"^[a-zA-Z]+[0-9]{0,3}\\\\.exe$\"\
    \ file_name) 'Yes]\n    [(regexp-match #rx\"^[a-zA-Z]+[0-9]{0,3}\\\\.dll$\" file_name)\
    \ 'Yes]\n    [else 'No]))\n", "  (cond\n    [(regexp-match #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\
    \\.txt$\" file_name) 'Yes]\n    [(regexp-match #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\
    \\.exe$\" file_name) 'Yes]\n    [(regexp-match #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\
    \\.dll$\" file_name) 'Yes]\n    [else 'No]))\n", "  (cond\n    [(regexp-match\
    \ #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\\.txt$\" file_name) 'Yes]\n    [(regexp-match\
    \ #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\\.exe$\" file_name) 'Yes]\n    [(regexp-match\
    \ #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\\.dll$\" file_name) 'Yes]\n    [else 'No]))\n",
  "  (cond\n    [(regexp-match #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\\.[a-zA-Z]{3}$\" file_name)\
    \ 'Yes]\n    [else 'No]))\n", "  (define (is_valid_extension? extension)\n   \
    \ (cond\n      [(equal? extension \"txt\") #t]\n      [(equal? extension \"exe\"\
    ) #t]\n      [(equal? extension \"dll\") #t]\n      [else #f]))\n  (define (is_valid_name?\
    \ name)\n    (cond\n      [(regexp-match #rx\"^[a-zA-Z]+$\" name) #t]\n      [else\
    \ #f]))\n  (define (is_valid_file_name? file_name)\n    (define (is_valid_file_name_helper?\
    \ file_name)\n      (cond\n        [(regexp-match #rx\"^[a-zA-Z]+[0-9]{0,3}\\\\\
    .[a-zA-Z]+$\" file_name) #t]\n        [else #f]))\n    (define (is_valid_file_name_helper2?\
    \ file_name)\n      (cond\n        [(regexp-match #rx\"^[a-zA-Z]+[0-9]{0,3}\\\\\
    .[a-zA-Z]+$\" file_name) #t]\n        [else #f]))\n    (cond\n      [(is_valid_file_name_helper?\
    \ file_name) #t]\n      [(is_valid_file_name_helper2? file_name) #t]\n      [else\
    \ #f]))\n  (define (is_valid_file_name_helper? file_name)\n    (cond\n      [(regexp-match\
    \ #rx\"^[a-zA-Z]+[0-9]{0,3}\\\\.[a-zA-Z]+$\" file_name) #t]\n      [else #f]))\n\
    \  (define (is_valid_file_name_helper2? file_name)\n    (cond\n      [(regexp-match\
    \ #rx\"^[a-zA-Z]+[0-9]{0,3}\\\\.[a-zA-Z]+$\" file_name) #t]\n      [else #f]))\n\
    \  (cond", "  (cond\n    [(regexp-match #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\\.txt$\"\
    \ file_name) 'Yes]\n    [(regexp-match #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\\.exe$\"\
    \ file_name) 'Yes]\n    [(regexp-match #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\\.dll$\"\
    \ file_name) 'Yes]\n    [else 'No]))\n", "  (define (is_valid_extension? extension)\n\
    \    (cond\n      [(equal? extension \"txt\") #t]\n      [(equal? extension \"\
    exe\") #t]\n      [(equal? extension \"dll\") #t]\n      [else #f]))\n  (define\
    \ (is_valid_name? name)\n    (define (is_valid_char? c)\n      (cond\n       \
    \ [(char-alphabetic? c) #t]\n        [(char-numeric? c) #t]\n        [else #f]))\n\
    \    (define (is_valid_name-helper name)\n      (cond\n        [(empty? name)\
    \ #t]\n        [(is_valid_char? (first name)) (is_valid_name-helper (rest name))]\n\
    \        [else #f]))\n    (cond\n      [(is_valid_name-helper name) #t]\n    \
    \  [else #f]))\n  (define (is_valid_file_name? file_name)\n    (define (is_valid_file_name-helper\
    \ file_name)\n      (cond\n        [(empty? file_name) #t]\n        [(char-numeric?\
    \ (first file_name)) (is_valid_file_name-helper (rest file_name))]\n        [else\
    \ #f]))\n    (cond\n      [(is_valid_file_name-helper file_name) #f]\n      [else\
    \ #t]))\n  (define (is_valid_file_name-helper2 file_name)\n    (cond\n      [(empty?\
    \ file_name) #t]\n      [(char-numeric? (first file_name)) (is_valid_file_name-helper2\
    \ (rest file_name))]\n      [else #f]))\n  (define (is_valid_file_name? file_name)\n\
    \    (cond\n      [(is_valid_file_name-helper2 file_name) #f]\n      [else #t]))\n\
    \  (define (is_valid_file_name-helper3 file_name)\n    (cond\n      [(empty? file_name)\
    \ #t]\n      [(char-numeric", "  (cond\n    [(regexp-match? #rx\"^[a-zA-Z]\\\\\
    w{0,2}\\\\.txt$\" file_name) 'Yes]\n    [(regexp-match? #rx\"^[a-zA-Z]\\\\w{0,2}\\\
    \\.exe$\" file_name) 'Yes]\n    [(regexp-match? #rx\"^[a-zA-Z]\\\\w{0,2}\\\\.dll$\"\
    \ file_name) 'Yes]\n    [else 'No]))\n", "  (define (check-extension extension)\n\
    \    (cond ((equal? extension \"txt\") #t)\n          ((equal? extension \"exe\"\
    ) #t)\n          ((equal? extension \"dll\") #t)\n          (else #f)))\n  (define\
    \ (check-name name)\n    (cond ((regexp-match? #rx\"^[a-zA-Z][a-zA-Z0-9]*$\" name)\
    \ #t)\n          (else #f)))\n  (define (check-digits digits)\n    (cond ((> digits\
    \ 3) #f)\n          (else #t)))\n  (define (check-dot dot)\n    (cond ((equal?\
    \ dot 1) #t)\n          (else #f)))\n  (define (check-file-name file-name)\n \
    \   (let* ([parts (regexp-split #rx\"\\.\" file-name)]\n           [name (first\
    \ parts)]\n           [extension (second parts)])\n      (and (check-name name)\n\
    \           (check-dot (length parts))\n           (check-extension extension)\n\
    \           (check-digits (string-length (regexp-replace* #rx\"[a-zA-Z]\" name\
    \ \"\"))))))\n  (cond ((check-file-name file_name) \"Yes\")\n        (else \"\
    No\")))\n", "  (cond\n    [(regexp-match? #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\\.txt$\"\
    \ file_name) 'Yes]\n    [(regexp-match? #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\\.exe$\"\
    \ file_name) 'Yes]\n    [(regexp-match? #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\\.dll$\"\
    \ file_name) 'Yes]\n    [else 'No]))\n", "  (cond\n    [(regexp-match #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\
    \\.[a-zA-Z]{3}$\" file_name) 'Yes]\n    [else 'No]))\n", "  (cond\n    [(regexp-match\
    \ #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\\.txt$\" file_name) 'Yes]\n    [(regexp-match\
    \ #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\\.exe$\" file_name) 'Yes]\n    [(regexp-match\
    \ #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\\.dll$\" file_name) 'Yes]\n    [else 'No]))\n",
  "  (cond\n    [(regexp-match? #rx\"^[a-zA-Z]+[0-9]{0,3}\\\\.txt$\" file_name) 'Yes]\n\
    \    [(regexp-match? #rx\"^[a-zA-Z]+[0-9]{0,3}\\\\.exe$\" file_name) 'Yes]\n \
    \   [(regexp-match? #rx\"^[a-zA-Z]+[0-9]{0,3}\\\\.dll$\" file_name) 'Yes]\n  \
    \  [else 'No]))\n", "  (cond\n    [(regexp-match #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\
    \\.txt$\" file_name) 'Yes]\n    [(regexp-match #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\
    \\.exe$\" file_name) 'Yes]\n    [(regexp-match #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\
    \\.dll$\" file_name) 'Yes]\n    [else 'No]))\n", "  (cond\n    [(regexp-match\
    \ #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\\.[a-zA-Z]{3}$\" file_name) 'Yes]\n    [else\
    \ 'No]))\n", "  (define (check_extension extension)\n    (cond [(string=? extension\
    \ \"txt\") #t]\n          [(string=? extension \"exe\") #t]\n          [(string=?\
    \ extension \"dll\") #t]\n          [else #f]))\n  (define (check_name name)\n\
    \    (cond [(regexp-match #rx\"^[a-zA-Z]+$\" name) #t]\n          [else #f]))\n\
    \  (define (check_digits digits)\n    (cond [(<= (string-length digits) 3) #t]\n\
    \          [else #f]))\n  (define (check_file_name file_name)\n    (let ([name\
    \ (string-split file_name \"\\\\.\")]\n          [extension (last name)])\n  \
    \    (cond [(and (check_extension extension)\n                  (check_name (first\
    \ name))\n                  (check_digits (first name))) #t]\n            [else\
    \ #f])))\n  (cond [(check_file_name file_name) \"Yes\"]\n        [else \"No\"\
    ]))\n", "  (define (count-digits file_name)\n    (define (count-digits-iter file_name\
    \ count)\n      (cond\n        [(empty? file_name) count]\n        [(char-numeric?\
    \ (first file_name)) (count-digits-iter (rest file_name) (+ count 1))]\n     \
    \   [else (count-digits-iter (rest file_name) count)]))\n    (count-digits-iter\
    \ file_name 0))\n  (define (count-dots file_name)\n    (define (count-dots-iter\
    \ file_name count)\n      (cond\n        [(empty? file_name) count]\n        [(char=?\
    \ (first file_name) #\\.) (count-dots-iter (rest file_name) (+ count 1))]\n  \
    \      [else (count-dots-iter (rest file_name) count)]))\n    (count-dots-iter\
    \ file_name 0))\n  (define (valid-extension? file_name)\n    (define (valid-extension-iter\
    \ file_name)\n      (cond\n        [(empty? file_name) #f]\n        [(char=? (first\
    \ file_name) #\\.) (valid-extension-iter (rest file_name))]\n        [(char=?\
    \ (first file_name) #\\t) (valid-extension-iter (rest file_name))]\n        [(char=?\
    \ (first file_name) #\\x) (valid-extension-iter (rest file_name))]\n        [(char=?\
    \ (first file_name) #\\e) (valid-extension-iter (rest file_name))]\n        [(char=?\
    \ (first file_name) #\\d) (valid-extension-iter (rest file_name))]\n        [(char=?\
    \ (first file_name) #\\l) (valid-extension-iter (rest file_name))]\n        [else\
    \ #f]))\n    (valid-extension-iter file_name))\n  (define (valid-name? file_name)\n\
    \    (define (valid-name-iter file_name)\n      (cond\n        [(empty? file_name)\
    \ #f]\n        [(", "  (cond\n    [(regexp-match #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\
    \\.txt$\" file_name) 'Yes]\n    [(regexp-match #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\
    \\.exe$\" file_name) 'Yes]\n    [(regexp-match #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\
    \\.dll$\" file_name) 'Yes]\n    [else 'No]))\n", "  (define (check-extension extension)\n\
    \    (cond [(string=? extension \"txt\") #t]\n          [(string=? extension \"\
    exe\") #t]\n          [(string=? extension \"dll\") #t]\n          [else #f]))\n\
    \  (define (check-name name)\n    (define (check-digits digits)\n      (cond [(>\
    \ digits 3) #f]\n            [else #t]))\n    (define (check-first-letter letter)\n\
    \      (cond [(char-alphabetic? letter) #t]\n            [else #f]))\n    (define\
    \ (check-name-helper name digits)\n      (cond [(empty? name) #t]\n          \
    \  [(char-numeric? (first name)) (check-name-helper (rest name) (+ digits 1))]\n\
    \            [(char-alphabetic? (first name)) (check-name-helper (rest name) digits)]\n\
    \            [else #f]))\n    (and (check-digits digits)\n         (check-first-letter\
    \ (first name))\n         (check-name-helper (rest name) 0)))\n  (define (check-dot\
    \ dot)\n    (cond [(string=? dot \".\") #t]\n          [else #f]))\n  (define\
    \ (check-file-name file_name)\n    (define (check-file-name-helper file_name dot)\n\
    \      (cond [(empty? file_name) (check-dot dot)]\n            [(string=? (first\
    \ file_name) \".\") (check-file-name-helper (rest file_name) (string-append dot\
    \ (first file_name))) ]\n            [else (check-file-name-helper (rest file_name)\
    \ dot)]))\n    (check-file-name-helper file_name \"\"))\n  (define (check-file-name-helper\
    \ file_name dot)\n    (cond [(empty? file_name) (check-dot dot)]\n           \
    \ [(string=? (first file_name) \".\") (check-file-name-helper (rest file_name)\
    \ (string-append dot (first file_name))) ]\n            [else (check-file-name-helper\
    \ (rest", "  (cond\n    [(regexp-match #rx\"^[a-zA-Z]+[0-9]{0,3}\\\\.txt$\" file_name)\
    \ 'Yes]\n    [(regexp-match #rx\"^[a-zA-Z]+[0-9]{0,3}\\\\.exe$\" file_name) 'Yes]\n\
    \    [(regexp-match #rx\"^[a-zA-Z]+[0-9]{0,3}\\\\.dll$\" file_name) 'Yes]\n  \
    \  [else 'No]))\n", "  (cond\n    [(regexp-match #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\
    \\.[a-zA-Z]{3}$\" file_name) 'Yes]\n    [else 'No]))\n", "  (cond\n    [(regexp-match\
    \ #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\\.[a-zA-Z]{3}$\" file_name) 'Yes]\n    [else\
    \ 'No]))\n", "  (cond\n    [(regexp-match #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\\.txt$\"\
    \ file_name) 'Yes]\n    [(regexp-match #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\\.exe$\"\
    \ file_name) 'Yes]\n    [(regexp-match #rx\"^[a-zA-Z][a-zA-Z0-9]{0,2}\\\\.dll$\"\
    \ file_name) 'Yes]\n    [else 'No]))\n", "  (let ([dot-index (string-index file_name\
    \ \".\")])\n    (cond\n      [(not dot-index) 'No]\n      [(> (string-length file_name)\
    \ dot-index)\n       (let ([extension (substring file_name (+ dot-index 1))])\n\
    \         (cond\n           [(or (string=? extension \"txt\") (string=? extension\
    \ \"exe\") (string=? extension \"dll\"))\n            (let ([name (substring file_name\
    \ 0 dot-index)])\n              (cond\n                [(string-empty? name) 'No]\n\
    \                [(not (char-alphabetic? (string-ref name 0))) 'No]\n        \
    \        [(> (string-length (regexp-replace* #rx\"[^0-9]\" name \"\")) 3) 'No]\n\
    \                [else 'Yes]))]\n           [else 'No]))]\n      [else 'No])))\n"]
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
