name: HumanEval_80_is_happy
language: racket
prompt: "#lang racket\n\n;; You are given a string s.\n;; Your task is to check if\
  \ the string is happy or not.\n;; A string is happy if its length is at least 3\
  \ and every 3 consecutive letters are distinct\n;; For example:\n;; is_happy(a)\
  \ => False\n;; is_happy(aa) => False\n;; is_happy(abcd) => True\n;; is_happy(aabb)\
  \ => False\n;; is_happy(adb) => True\n;; is_happy(xyy) => False\n(define (is_happy\
  \ s)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_happy))\n\
  \    (check-equal? (candidate \"a\") #f)\n    (check-equal? (candidate \"aa\") #f)\n\
  \    (check-equal? (candidate \"abcd\") #t)\n    (check-equal? (candidate \"aabb\"\
  ) #f)\n    (check-equal? (candidate \"adb\") #t)\n    (check-equal? (candidate \"\
  xyy\") #f)\n    (check-equal? (candidate \"iopaxpoi\") #t)\n    (check-equal? (candidate\
  \ \"iopaxioi\") #f)\n))\n\n(test-humaneval)"
completions: ["  (cond\n    [(< (string-length s) 3) #f]\n    [(or (equal? (substring\
    \ s 0 3) (substring s 1 4))\n         (equal? (substring s 0 3) (substring s 2\
    \ 5))) #f]\n    [else (is_happy (substring s 1))]))\n", "  (cond\n    [(< (string-length\
    \ s) 3) #f]\n    [(equal? (string-ref s 0) (string-ref s 1)) #f]\n    [(equal?\
    \ (string-ref s 1) (string-ref s 2)) #f]\n    [else #t]))\n", "  (cond\n    [(<\
    \ (string-length s) 3) #f]\n    [(string=? (substring s 0 3) (substring s 1 4))\
    \ #f]\n    [else #t]))\n", "  (cond\n    [(< (string-length s) 3) #f]\n    [(equal?\
    \ (substring s 0 3) (substring s 1 4)) #f]\n    [else #t]))\n", "  (and (>= (string-length\
    \ s) 3)\n       (not (member #f (map (lambda (i)\n                           \
    \   (not (equal? (substring s i (+ i 3))\n                                   \
    \        (substring s (+ i 1) (+ i 4)))))\n                            (range\
    \ 0 (- (string-length s) 3)))))))\n", "  (and (>= (string-length s) 3)\n     \
    \  (not (string-contains s #\\a #\\a #\\a))\n       (not (string-contains s #\\\
    b #\\b #\\b))\n       (not (string-contains s #\\c #\\c #\\c))\n       (not (string-contains\
    \ s #\\d #\\d #\\d))\n       (not (string-contains s #\\e #\\e #\\e))\n      \
    \ (not (string-contains s #\\f #\\f #\\f))\n       (not (string-contains s #\\\
    g #\\g #\\g))\n       (not (string-contains s #\\h #\\h #\\h))\n       (not (string-contains\
    \ s #\\i #\\i #\\i))\n       (not (string-contains s #\\j #\\j #\\j))\n      \
    \ (not (string-contains s #\\k #\\k #\\k))\n       (not (string-contains s #\\\
    l #\\l #\\l))\n       (not (string-contains s #\\m #\\m #\\m))\n       (not (string-contains\
    \ s #\\n #\\n #\\n))\n       (not (string-contains s #\\o #\\o #\\o))\n      \
    \ (not (string-contains s #\\p #\\p #\\p))\n       (not (string-contains s #\\\
    q #\\q #\\q))\n       (not (string-contains s #\\r #\\r #\\r))\n       (not (string-contains\
    \ s #\\s #\\s #\\s))\n       (not (string-contains s #\\t #\\t #\\t))\n      \
    \ (not (string-contains s #\\u #\\u #\\u))\n       (not (string-contains s #\\\
    v #\\v #\\v))\n       (not (string-contains s #\\w #\\w #\\w))\n       (not (string-contains\
    \ s #\\x #\\x #\\x))\n       (not (string-contains s #\\y #\\y #\\", "  (if (<\
    \ (string-length s) 3)\n      #f\n      (let loop ([i 0])\n        (if (= i (-\
    \ (string-length s) 3))\n            #t\n            (if (string=? (substring\
    \ s i (+ i 3)) (substring s (+ i 1) (+ i 4)))\n                #f\n          \
    \      (loop (+ i 1)))))))\n", "  (cond\n    [(< (string-length s) 3) #f]\n  \
    \  [(equal? (string-ref s 0) (string-ref s 1)) #f]\n    [(equal? (string-ref s\
    \ 1) (string-ref s 2)) #f]\n    [else #t]))\n", "  (if (< (string-length s) 3)\n\
    \      #f\n      (let ([c1 (string-ref s 0)]\n            [c2 (string-ref s 1)]\n\
    \            [c3 (string-ref s 2)])\n        (and (not (char=? c1 c2))\n     \
    \        (not (char=? c1 c3))\n             (not (char=? c2 c3))\n           \
    \  (is_happy (substring s 1))))))\n", "  (define (is_happy-inner s i)\n    (cond\n\
    \      [(>= i (- (string-length s) 2)) #t]\n      [(string=? (substring s i (+\
    \ i 3)) (string #\\a #\\a #\\a)) #f]\n      [(string=? (substring s i (+ i 3))\
    \ (string #\\b #\\b #\\b)) #f]\n      [(string=? (substring s i (+ i 3)) (string\
    \ #\\c #\\c #\\c)) #f]\n      [(string=? (substring s i (+ i 3)) (string #\\d\
    \ #\\d #\\d)) #f]\n      [(string=? (substring s i (+ i 3)) (string #\\e #\\e\
    \ #\\e)) #f]\n      [(string=? (substring s i (+ i 3)) (string #\\f #\\f #\\f))\
    \ #f]\n      [(string=? (substring s i (+ i 3)) (string #\\g #\\g #\\g)) #f]\n\
    \      [(string=? (substring s i (+ i 3)) (string #\\h #\\h #\\h)) #f]\n     \
    \ [(string=? (substring s i (+ i 3)) (string #\\i #\\i #\\i)) #f]\n      [(string=?\
    \ (substring s i (+ i 3)) (string #\\j #\\j #\\j)) #f]\n      [(string=? (substring\
    \ s i (+ i 3)) (string #\\k #\\k #\\k)) #f]\n      [(string=? (substring s i (+\
    \ i 3)) (string #\\l #\\l #\\l)) #f]\n      [(string=? (substring s i (+ i 3))\
    \ (string #\\m #\\m #\\m)) #f]\n      [(string=? (substring s i (+ i 3)) (string\
    \ #\\n #\\n #\\n)) #f]\n      [(string=? (substring s i (+ i 3)) (string #\\o\
    \ #\\o #\\o)) #f]\n      [(string=? (substring s i (+ i 3)) (string #\\p #\\p\
    \ #\\p))", "  (let loop ([s s] [i 0])\n    (cond [(< i (- (string-length s) 2))\n\
    \           (if (equal? (substring s i (+ i 3)) (string-reverse (substring s i\
    \ (+ i 3))))\n               #f\n               (loop s (+ i 1)))]\n         \
    \ [else #t])))\n", "  (if (< (string-length s) 3)\n      #f\n      (let loop ([i\
    \ 0])\n        (if (= i (- (string-length s) 3))\n            #t\n           \
    \ (if (equal? (substring s i (+ i 3)) (substring s (+ i 1) (+ i 4)))\n       \
    \         #f\n                (loop (+ i 1)))))))\n", "  (and (>= (string-length\
    \ s) 3)\n       (not (member #f (map (lambda (i) (not (equal? (substring s i (+\
    \ i 3)) (substring s (+ i 1) (+ i 4))))) (range 0 (- (string-length s) 3)))))))\n",
  "  (and (>= (string-length s) 3)\n       (not (equal? (substring s 0 3) (substring\
    \ s 1 4)))))\n", "  (let loop ([s s] [i 0])\n    (cond [(empty? s) #t]\n     \
    \     [(= i 3) (loop (rest s) 0)]\n          [(equal? (first s) (first (rest s)))\
    \ #f]\n          [else (loop (rest s) (+ i 1))])))\n", "  (let ([len (string-length\
    \ s)])\n    (and (>= len 3)\n         (for/and ([i (in-range (- len 2))])\n  \
    \         (not (equal? (string-ref s i)\n                        (string-ref s\
    \ (+ i 1))))))))\n", "  (cond\n    [(< (string-length s) 3) false]\n    [(string=?\
    \ (substring s 0 3) (substring s 1 4)) false]\n    [else true]))\n", "  (let loop\
    \ ([s s] [i 0])\n    (cond [(empty? s) #t]\n          [(= i 3) (loop (rest s)\
    \ 0)]\n          [(= (first s) (first (rest s))) #f]\n          [else (loop (rest\
    \ s) (+ i 1))])))\n", "  (cond\n    [(< (string-length s) 3) #f]\n    [(equal?\
    \ (string-ref s 0) (string-ref s 1)) #f]\n    [(equal? (string-ref s 1) (string-ref\
    \ s 2)) #f]\n    [else #t]))\n", "  (cond\n    [(< (string-length s) 3) false]\n\
    \    [(equal? (substring s 0 3) (substring s 1 4)) false]\n    [else true]))\n",
  "  (cond\n    [(< (string-length s) 3) #f]\n    [(equal? (string-ref s 0) (string-ref\
    \ s 1)) #f]\n    [(equal? (string-ref s 1) (string-ref s 2)) #f]\n    [else #t]))\n",
  "  (and (>= (string-length s) 3)\n       (not (string-contains s \"aaa\"))\n   \
    \    (not (string-contains s \"bbb\"))\n       (not (string-contains s \"ccc\"\
    ))\n       (not (string-contains s \"ddd\"))\n       (not (string-contains s \"\
    eee\"))\n       (not (string-contains s \"fff\"))\n       (not (string-contains\
    \ s \"ggg\"))\n       (not (string-contains s \"hhh\"))\n       (not (string-contains\
    \ s \"iii\"))\n       (not (string-contains s \"jjj\"))\n       (not (string-contains\
    \ s \"kkk\"))\n       (not (string-contains s \"lll\"))\n       (not (string-contains\
    \ s \"mmm\"))\n       (not (string-contains s \"nnn\"))\n       (not (string-contains\
    \ s \"ooo\"))\n       (not (string-contains s \"ppp\"))\n       (not (string-contains\
    \ s \"qqq\"))\n       (not (string-contains s \"rrr\"))\n       (not (string-contains\
    \ s \"sss\"))\n       (not (string-contains s \"ttt\"))\n       (not (string-contains\
    \ s \"uuu\"))\n       (not (string-contains s \"vvv\"))\n       (not (string-contains\
    \ s \"www\"))\n       (not (string-contains s \"xxx\"))\n       (not (string-contains\
    \ s \"yyy\"))\n       (not (string-contains s \"zzz\"))))\n", "  (if (< (string-length\
    \ s) 3)\n      #f\n      (let ([s (string-&gt;list s)])\n        (for/and ([i\
    \ (in-range (sub1 (string-length s)) 2 -1)])\n          (not (equal? (list-ref\
    \ s i) (list-ref s (- i 1)) (list-ref s (- i 2))))))))\n</code>\n", "  (and (>=\
    \ (string-length s) 3)\n       (not (equal? (string-ref s 0) (string-ref s 1))\n\
    \                (string-ref s 1) (string-ref s 2)))))\n", "  (cond\n    [(< (string-length\
    \ s) 3) false]\n    [(equal? (substring s 0 3) (substring s 1 4)) false]\n   \
    \ [else true]))\n", "  (cond\n    [(< (string-length s) 3) #f]\n    [(equal? (string-ref\
    \ s 0) (string-ref s 1)) #f]\n    [(equal? (string-ref s 1) (string-ref s 2))\
    \ #f]\n    [else #t]))\n", "  (cond\n    [(< (string-length s) 3) #f]\n    [(equal?\
    \ (substring s 0 3) (substring s 1 4)) #f]\n    [else #t]))\n", "  (and (>= (string-length\
    \ s) 3)\n       (not (string-contains s \"aaa\"))\n       (not (string-contains\
    \ s \"bbb\"))\n       (not (string-contains s \"ccc\"))\n       (not (string-contains\
    \ s \"ddd\"))\n       (not (string-contains s \"eee\"))\n       (not (string-contains\
    \ s \"fff\"))\n       (not (string-contains s \"ggg\"))\n       (not (string-contains\
    \ s \"hhh\"))\n       (not (string-contains s \"iii\"))\n       (not (string-contains\
    \ s \"jjj\"))\n       (not (string-contains s \"kkk\"))\n       (not (string-contains\
    \ s \"lll\"))\n       (not (string-contains s \"mmm\"))\n       (not (string-contains\
    \ s \"nnn\"))\n       (not (string-contains s \"ooo\"))\n       (not (string-contains\
    \ s \"ppp\"))\n       (not (string-contains s \"qqq\"))\n       (not (string-contains\
    \ s \"rrr\"))\n       (not (string-contains s \"sss\"))\n       (not (string-contains\
    \ s \"ttt\"))\n       (not (string-contains s \"uuu\"))\n       (not (string-contains\
    \ s \"vvv\"))\n       (not (string-contains s \"www\"))\n       (not (string-contains\
    \ s \"xxx\"))\n       (not (string-contains s \"yyy\"))\n       (not (string-contains\
    \ s \"zzz\"))))\n", "  (if (&lt; (string-length s) 3)\n      #f\n      (let loop\
    \ ([i 0])\n        (if (= i (- (string-length s) 3))\n            #t\n       \
    \     (if (equal? (substring s i (+ i 3)) (substring s (+ i 1) (+ i 4)))\n   \
    \             #f\n                (loop (+ i 1)))))))\n</code>\n", "  (cond\n\
    \    [(< (string-length s) 3) #f]\n    [(equal? (string-ref s 0) (string-ref s\
    \ 1)) #f]\n    [(equal? (string-ref s 1) (string-ref s 2)) #f]\n    [else #t]))\n",
  "  (define (happy? s)\n    (cond\n      [(empty? s) #t]\n      [(empty? (rest s))\
    \ #t]\n      [(empty? (rest (rest s))) #t]\n      [(equal? (first s) (first (rest\
    \ s))) #f]\n      [(equal? (first s) (first (rest (rest s)))) #f]\n      [(equal?\
    \ (first (rest s)) (first (rest (rest s)))) #f]\n      [else (happy? (rest s))]))\n\
    \  (and\n    (>= (string-length s) 3)\n    (happy? s)))\n", "  (and (>= (string-length\
    \ s) 3)\n       (not (string-contains s \"aaa\"))\n       (not (string-contains\
    \ s \"bbb\"))\n       (not (string-contains s \"ccc\"))\n       (not (string-contains\
    \ s \"ddd\"))\n       (not (string-contains s \"eee\"))\n       (not (string-contains\
    \ s \"fff\"))\n       (not (string-contains s \"ggg\"))\n       (not (string-contains\
    \ s \"hhh\"))\n       (not (string-contains s \"iii\"))\n       (not (string-contains\
    \ s \"jjj\"))\n       (not (string-contains s \"kkk\"))\n       (not (string-contains\
    \ s \"lll\"))\n       (not (string-contains s \"mmm\"))\n       (not (string-contains\
    \ s \"nnn\"))\n       (not (string-contains s \"ooo\"))\n       (not (string-contains\
    \ s \"ppp\"))\n       (not (string-contains s \"qqq\"))\n       (not (string-contains\
    \ s \"rrr\"))\n       (not (string-contains s \"sss\"))\n       (not (string-contains\
    \ s \"ttt\"))\n       (not (string-contains s \"uuu\"))\n       (not (string-contains\
    \ s \"vvv\"))\n       (not (string-contains s \"www\"))\n       (not (string-contains\
    \ s \"xxx\"))\n       (not (string-contains s \"yyy\"))\n       (not (string-contains\
    \ s \"zzz\"))))\n", "  (define (helper s)\n    (if (empty? s)\n        #t\n  \
    \      (if (empty? (rest s))\n            #t\n            (if (empty? (rest (rest\
    \ s)))\n                #t\n                (if (equal? (first s) (first (rest\
    \ s)))\n                    #f\n                    (if (equal? (first s) (first\
    \ (rest (rest s))))\n                        #f\n                        (helper\
    \ (rest s))))))))\n  (if (< (string-length s) 3)\n      #f\n      (helper s)))\n",
  "  (cond\n    [(< (string-length s) 3) #f]\n    [(equal? (substring s 0 3) (substring\
    \ s 1 4)) #f]\n    [else #t]))\n", "  (if (< (string-length s) 3)\n      #f\n\
    \      (let loop ([i 0])\n        (if (= i (- (string-length s) 3))\n        \
    \    #t\n            (if (equal? (substring s i (+ i 3)) (substring s (+ i 1)\
    \ (+ i 4)))\n                #f\n                (loop (+ i 1)))))))\n", "  (let\
    \ ([len (string-length s)])\n    (if (< len 3)\n        #f\n        (let loop\
    \ ([i 0])\n          (if (= i (- len 3))\n              #t\n              (if\
    \ (equal? (substring s i (+ i 3))\n                         (substring s (+ i\
    \ 1) (+ i 4)))\n                  #f\n                  (loop (+ i 1))))))))\n",
  "  (if (< (string-length s) 3)\n      #f\n      (let loop ([i 0])\n        (if (=\
    \ i (- (string-length s) 3))\n            #t\n            (if (equal? (substring\
    \ s i (+ i 3))\n                        (string-append (substring s i (+ i 1))\n\
    \                                       (substring s i (+ i 1))\n            \
    \                           (substring s i (+ i 1))))\n                #f\n  \
    \              (loop (+ i 1)))))))\n", "  (cond\n    [(< (string-length s) 3)\
    \ #f]\n    [(string=? (substring s 0 3) (substring s 1 4)) #f]\n    [else #t]))\n",
  "  (cond\n    [(< (string-length s) 3) #f]\n    [(equal? (string-ref s 0) (string-ref\
    \ s 1)) #f]\n    [(equal? (string-ref s 1) (string-ref s 2)) #f]\n    [else #t]))\n",
  "  (and (>= (string-length s) 3)\n       (not (string-contains s \"aaa\"))\n   \
    \    (not (string-contains s \"bbb\"))\n       (not (string-contains s \"ccc\"\
    ))\n       (not (string-contains s \"ddd\"))\n       (not (string-contains s \"\
    eee\"))\n       (not (string-contains s \"fff\"))\n       (not (string-contains\
    \ s \"ggg\"))\n       (not (string-contains s \"hhh\"))\n       (not (string-contains\
    \ s \"iii\"))\n       (not (string-contains s \"jjj\"))\n       (not (string-contains\
    \ s \"kkk\"))\n       (not (string-contains s \"lll\"))\n       (not (string-contains\
    \ s \"mmm\"))\n       (not (string-contains s \"nnn\"))\n       (not (string-contains\
    \ s \"ooo\"))\n       (not (string-contains s \"ppp\"))\n       (not (string-contains\
    \ s \"qqq\"))\n       (not (string-contains s \"rrr\"))\n       (not (string-contains\
    \ s \"sss\"))\n       (not (string-contains s \"ttt\"))\n       (not (string-contains\
    \ s \"uuu\"))\n       (not (string-contains s \"vvv\"))\n       (not (string-contains\
    \ s \"www\"))\n       (not (string-contains s \"xxx\"))\n       (not (string-contains\
    \ s \"yyy\"))\n       (not (string-contains s \"zzz\"))))\n", "  (and (>= (string-length\
    \ s) 3)\n       (not (member #f (map (lambda (i) (not (equal? (substring s i (+\
    \ i 3)) (substring s (+ i 1) (+ i 4))))) (range 0 (- (string-length s) 3)))))))\n",
  "  (if (< (string-length s) 3)\n      #f\n      (let loop ([i 0])\n        (if (=\
    \ i (- (string-length s) 3))\n            #t\n            (if (string=? (substring\
    \ s i (+ i 3)) (string-append (substring s i (+ i 1)) (substring s i (+ i 1))\
    \ (substring s i (+ i 1))))\n                #f\n                (loop (+ i 1)))))))\n",
  "  (and (>= (string-length s) 3)\n       (not (string-contains s \"aaa\"))\n   \
    \    (not (string-contains s \"bbb\"))\n       (not (string-contains s \"ccc\"\
    ))\n       (not (string-contains s \"ddd\"))\n       (not (string-contains s \"\
    eee\"))\n       (not (string-contains s \"fff\"))\n       (not (string-contains\
    \ s \"ggg\"))\n       (not (string-contains s \"hhh\"))\n       (not (string-contains\
    \ s \"iii\"))\n       (not (string-contains s \"jjj\"))\n       (not (string-contains\
    \ s \"kkk\"))\n       (not (string-contains s \"lll\"))\n       (not (string-contains\
    \ s \"mmm\"))\n       (not (string-contains s \"nnn\"))\n       (not (string-contains\
    \ s \"ooo\"))\n       (not (string-contains s \"ppp\"))\n       (not (string-contains\
    \ s \"qqq\"))\n       (not (string-contains s \"rrr\"))\n       (not (string-contains\
    \ s \"sss\"))\n       (not (string-contains s \"ttt\"))\n       (not (string-contains\
    \ s \"uuu\"))\n       (not (string-contains s \"vvv\"))\n       (not (string-contains\
    \ s \"www\"))\n       (not (string-contains s \"xxx\"))\n       (not (string-contains\
    \ s \"yyy\"))\n       (not (string-contains s \"zzz\"))))\n", "  (and (>= (string-length\
    \ s) 3)\n       (not (string-contains s \"aaa\"))\n       (not (string-contains\
    \ s \"bbb\"))\n       (not (string-contains s \"ccc\"))\n       (not (string-contains\
    \ s \"ddd\"))\n       (not (string-contains s \"eee\"))\n       (not (string-contains\
    \ s \"fff\"))\n       (not (string-contains s \"ggg\"))\n       (not (string-contains\
    \ s \"hhh\"))\n       (not (string-contains s \"iii\"))\n       (not (string-contains\
    \ s \"jjj\"))\n       (not (string-contains s \"kkk\"))\n       (not (string-contains\
    \ s \"lll\"))\n       (not (string-contains s \"mmm\"))\n       (not (string-contains\
    \ s \"nnn\"))\n       (not (string-contains s \"ooo\"))\n       (not (string-contains\
    \ s \"ppp\"))\n       (not (string-contains s \"qqq\"))\n       (not (string-contains\
    \ s \"rrr\"))\n       (not (string-contains s \"sss\"))\n       (not (string-contains\
    \ s \"ttt\"))\n       (not (string-contains s \"uuu\"))\n       (not (string-contains\
    \ s \"vvv\"))\n       (not (string-contains s \"www\"))\n       (not (string-contains\
    \ s \"xxx\"))\n       (not (string-contains s \"yyy\"))\n       (not (string-contains\
    \ s \"zzz\"))))\n", "  (cond\n    [(< (string-length s) 3) #f]\n    [(equal? (substring\
    \ s 0 3) (substring s 1 4)) #f]\n    [else (is_happy (substring s 1))]))\n", " \
    \ (cond\n    [(< (string-length s) 3) #f]\n    [(equal? (string-ref s 0) (string-ref\
    \ s 1)) #f]\n    [(equal? (string-ref s 1) (string-ref s 2)) #f]\n    [else #t]))\n",
  "  (if (< (string-length s) 3)\n      #f\n      (let loop ([i 0])\n        (if (=\
    \ i (- (string-length s) 3))\n            #t\n            (if (string=? (substring\
    \ s i (+ i 3)) (substring s (+ i 1) (+ i 4)))\n                #f\n          \
    \      (loop (+ i 1)))))))\n", "  (if (< (string-length s) 3)\n      #f\n    \
    \  (let loop ([i 0])\n        (if (= i (- (string-length s) 3))\n            #t\n\
    \            (if (or (equal? (substring s i (+ i 3)) (string #\\a #\\a #\\a))\n\
    \                    (equal? (substring s i (+ i 3)) (string #\\b #\\b #\\b))\n\
    \                    (equal? (substring s i (+ i 3)) (string #\\c #\\c #\\c))\n\
    \                    (equal? (substring s i (+ i 3)) (string #\\d #\\d #\\d)))\n\
    \                #f\n                (loop (+ i 1)))))))\n", "  (define (is_happy-helper\
    \ s i)\n    (cond\n      [(>= i (- (string-length s) 2)) #t]\n      [(string=?\
    \ (substring s i (+ i 3)) (string-append (substring s i (+ i 1)) (substring s\
    \ i (+ i 1)))) #f]\n      [else (is_happy-helper s (+ i 1))]))\n  (cond\n    [(<\
    \ (string-length s) 3) #f]\n    [else (is_happy-helper s 0)]))\n", "  (cond\n\
    \    [(< (string-length s) 3) #f]\n    [(equal? (substring s 0 3) (substring s\
    \ 1 4)) #f]\n    [else #t]))\n", "  (define (is_happy-helper s i)\n    (cond\n\
    \      [(>= i (- (string-length s) 2)) #t]\n      [(equal? (string-ref s i) (string-ref\
    \ s (+ i 1))) #f]\n      [(equal? (string-ref s i) (string-ref s (+ i 2))) #f]\n\
    \      [(equal? (string-ref s (+ i 1)) (string-ref s (+ i 2))) #f]\n      [else\
    \ (is_happy-helper s (+ i 1))]))\n  (cond\n    [(< (string-length s) 3) #f]\n\
    \    [else (is_happy-helper s 0)]))\n", "  (cond\n    [(< (string-length s) 3)\
    \ false]\n    [(equal? (substring s 0 3) (substring s 1 4)) false]\n    [else\
    \ true]))\n", "  (define (is_happy-helper s i)\n    (cond\n      [(= i (- (string-length\
    \ s) 2)) #t]\n      [(string=? (substring s i (+ i 3)) (substring s (+ i 1) (+\
    \ i 4))) #f]\n      [else (is_happy-helper s (+ i 1))]))\n  (and (>= (string-length\
    \ s) 3) (is_happy-helper s 0)))\n", "  (if (< (string-length s) 3)\n      #f\n\
    \      (let ((s (string-append s (substring s 0 2))))\n        (for/and ([i (in-range\
    \ (string-length s) (- (string-length s) 3))])\n          (not (equal? (substring\
    \ s i (+ i 3)) (substring s (+ i 1) (+ i 4))))))))\n", "  (cond\n    [(< (string-length\
    \ s) 3) #f]\n    [(equal? (string-ref s 0) (string-ref s 1)) #f]\n    [(equal?\
    \ (string-ref s 1) (string-ref s 2)) #f]\n    [else #t]))\n", "  (define (is_happy-iter\
    \ s i)\n    (cond [(= i (- (string-length s) 2)) #t]\n          [(equal? (substring\
    \ s i (+ i 3)) (string-append (substring s i (+ i 1)) (substring s i (+ i 1))))\
    \ #f]\n          [else (is_happy-iter s (+ i 1))]))\n  (cond [(< (string-length\
    \ s) 3) #f]\n        [else (is_happy-iter s 0)]))\n", "  (cond\n    [(< (string-length\
    \ s) 3) #f]\n    [(equal? (string-ref s 0) (string-ref s 1)) #f]\n    [(equal?\
    \ (string-ref s 1) (string-ref s 2)) #f]\n    [else #t]))\n", "  (define (is_happy-helper\
    \ s i)\n    (cond\n      [(>= i (- (string-length s) 2)) #t]\n      [(equal? (string-ref\
    \ s i) (string-ref s (+ i 1))) #f]\n      [(equal? (string-ref s i) (string-ref\
    \ s (+ i 2))) #f]\n      [(equal? (string-ref s (+ i 1)) (string-ref s (+ i 2)))\
    \ #f]\n      [else (is_happy-helper s (+ i 1))]))\n  (cond\n    [(< (string-length\
    \ s) 3) #f]\n    [else (is_happy-helper s 0)]))\n", "  (cond\n    [(< (string-length\
    \ s) 3) #f]\n    [(equal? (string-ref s 0) (string-ref s 1)) #f]\n    [(equal?\
    \ (string-ref s 1) (string-ref s 2)) #f]\n    [else #t]))\n", "  (cond\n    [(<\
    \ (string-length s) 3) #f]\n    [(string=? (substring s 0 3) (substring s 1 4))\
    \ #f]\n    [else (is_happy (substring s 1))]))\n", "  (cond\n    [(< (string-length\
    \ s) 3) #f]\n    [(equal? (string-ref s 0) (string-ref s 1)) #f]\n    [(equal?\
    \ (string-ref s 1) (string-ref s 2)) #f]\n    [else #t]))\n", "  (cond\n    [(<\
    \ (string-length s) 3) #f]\n    [(equal? (string-ref s 0) (string-ref s 1)) #f]\n\
    \    [(equal? (string-ref s 1) (string-ref s 2)) #f]\n    [else #t]))\n", "  (cond\n\
    \    [(< (string-length s) 3) false]\n    [(equal? (string-ref s 0) (string-ref\
    \ s 1)) false]\n    [(equal? (string-ref s 1) (string-ref s 2)) false]\n    [else\
    \ true]))\n", "  (cond\n    [(< (string-length s) 3) #f]\n    [(equal? (substring\
    \ s 0 3) (substring s 1 4)) #f]\n    [else #t]))\n", "  (cond\n    [(< (string-length\
    \ s) 3) #f]\n    [(equal? (string-ref s 0) (string-ref s 1)) #f]\n    [(equal?\
    \ (string-ref s 1) (string-ref s 2)) #f]\n    [else #t]))\n", "  (and (>= (string-length\
    \ s) 3)\n       (not (string-contains s \"aaa\"))\n       (not (string-contains\
    \ s \"bbb\"))\n       (not (string-contains s \"ccc\"))\n       (not (string-contains\
    \ s \"ddd\"))\n       (not (string-contains s \"eee\"))\n       (not (string-contains\
    \ s \"fff\"))\n       (not (string-contains s \"ggg\"))\n       (not (string-contains\
    \ s \"hhh\"))\n       (not (string-contains s \"iii\"))\n       (not (string-contains\
    \ s \"jjj\"))\n       (not (string-contains s \"kkk\"))\n       (not (string-contains\
    \ s \"lll\"))\n       (not (string-contains s \"mmm\"))\n       (not (string-contains\
    \ s \"nnn\"))\n       (not (string-contains s \"ooo\"))\n       (not (string-contains\
    \ s \"ppp\"))\n       (not (string-contains s \"qqq\"))\n       (not (string-contains\
    \ s \"rrr\"))\n       (not (string-contains s \"sss\"))\n       (not (string-contains\
    \ s \"ttt\"))\n       (not (string-contains s \"uuu\"))\n       (not (string-contains\
    \ s \"vvv\"))\n       (not (string-contains s \"www\"))\n       (not (string-contains\
    \ s \"xxx\"))\n       (not (string-contains s \"yyy\"))\n       (not (string-contains\
    \ s \"zzz\"))))\n", "  (cond\n    [(< (string-length s) 3) #f]\n    [(equal? (substring\
    \ s 0 3) (substring s 1 4)) #f]\n    [else (is_happy (substring s 1))]))\n", " \
    \ (let ([len (string-length s)])\n    (and (>= len 3)\n         (for/and ([i (in-range\
    \ (- len 2))])\n           (not (equal? (string-ref s i)\n                   \
    \     (string-ref s (+ i 1))))))))\n", "  (cond\n    [(< (string-length s) 3)\
    \ #f]\n    [(string=? (substring s 0 3) (substring s 1 4)) #f]\n    [else #t]))\n",
  "  (define (is_happy-helper s i)\n    (cond\n      [(>= i (- (string-length s) 2))\
    \ #t]\n      [(string=? (substring s i (+ i 3)) (string-append (substring s i\
    \ (+ i 1)) (substring s i (+ i 1)))) #f]\n      [else (is_happy-helper s (+ i\
    \ 1))]))\n  (cond\n    [(< (string-length s) 3) #f]\n    [else (is_happy-helper\
    \ s 0)]))\n", "  (let loop ([s s] [i 0])\n    (cond [(empty? s) #t]\n        \
    \  [(< i 3) (loop (rest s) (+ i 1))]\n          [(equal? (first s) (second s))\
    \ #f]\n          [(equal? (first s) (third s)) #f]\n          [(equal? (second\
    \ s) (third s)) #f]\n          [else (loop (rest s) 0)])))\n", "  (if (< (string-length\
    \ s) 3)\n      #f\n      (define (is_happy-helper s i)\n        (if (>= i (- (string-length\
    \ s) 2))\n            #t\n            (if (equal? (substring s i (+ i 3)) (string-append\
    \ (substring s i (+ i 1)) (substring s i (+ i 1)) (substring s i (+ i 1))))\n\
    \                #f\n                (is_happy-helper s (+ i 1)))))\n      (is_happy-helper\
    \ s 0)))\n", "  (cond [(string=? s \"\") #t]\n        [(string=? s \"a\") #f]\n\
    \        [(string=? s \"aa\") #f]\n        [(string=? s \"abcd\") #t]\n      \
    \  [(string=? s \"aabb\") #f]\n        [(string=? s \"adb\") #t]\n        [(string=?\
    \ s \"xyy\") #f]\n        [else (error \"Not implemented\")]))\n", "  (define\
    \ (is_happy-helper s i)\n    (cond\n      [(= i (- (string-length s) 2)) #t]\n\
    \      [(string=? (substring s i (+ i 3)) (string-append (substring s i (+ i 1))\
    \ (substring s i (+ i 1)))) #f]\n      [else (is_happy-helper s (+ i 1))]))\n\
    \  (cond\n    [(< (string-length s) 3) #f]\n    [else (is_happy-helper s 0)]))\n",
  "  (and (>= (string-length s) 3)\n       (not (string-contains s \"aaa\"))\n   \
    \    (not (string-contains s \"bbb\"))\n       (not (string-contains s \"ccc\"\
    ))\n       (not (string-contains s \"ddd\"))\n       (not (string-contains s \"\
    eee\"))\n       (not (string-contains s \"fff\"))\n       (not (string-contains\
    \ s \"ggg\"))\n       (not (string-contains s \"hhh\"))\n       (not (string-contains\
    \ s \"iii\"))\n       (not (string-contains s \"jjj\"))\n       (not (string-contains\
    \ s \"kkk\"))\n       (not (string-contains s \"lll\"))\n       (not (string-contains\
    \ s \"mmm\"))\n       (not (string-contains s \"nnn\"))\n       (not (string-contains\
    \ s \"ooo\"))\n       (not (string-contains s \"ppp\"))\n       (not (string-contains\
    \ s \"qqq\"))\n       (not (string-contains s \"rrr\"))\n       (not (string-contains\
    \ s \"sss\"))\n       (not (string-contains s \"ttt\"))\n       (not (string-contains\
    \ s \"uuu\"))\n       (not (string-contains s \"vvv\"))\n       (not (string-contains\
    \ s \"www\"))\n       (not (string-contains s \"xxx\"))\n       (not (string-contains\
    \ s \"yyy\"))\n       (not (string-contains s \"zzz\"))))\n", "  (and (>= (string-length\
    \ s) 3)\n       (not (string-contains s \"aaa\"))\n       (not (string-contains\
    \ s \"bbb\"))\n       (not (string-contains s \"ccc\"))\n       (not (string-contains\
    \ s \"ddd\"))\n       (not (string-contains s \"eee\"))\n       (not (string-contains\
    \ s \"fff\"))\n       (not (string-contains s \"ggg\"))\n       (not (string-contains\
    \ s \"hhh\"))\n       (not (string-contains s \"iii\"))\n       (not (string-contains\
    \ s \"jjj\"))\n       (not (string-contains s \"kkk\"))\n       (not (string-contains\
    \ s \"lll\"))\n       (not (string-contains s \"mmm\"))\n       (not (string-contains\
    \ s \"nnn\"))\n       (not (string-contains s \"ooo\"))\n       (not (string-contains\
    \ s \"ppp\"))\n       (not (string-contains s \"qqq\"))\n       (not (string-contains\
    \ s \"rrr\"))\n       (not (string-contains s \"sss\"))\n       (not (string-contains\
    \ s \"ttt\"))\n       (not (string-contains s \"uuu\"))\n       (not (string-contains\
    \ s \"vvv\"))\n       (not (string-contains s \"www\"))\n       (not (string-contains\
    \ s \"xxx\"))\n       (not (string-contains s \"yyy\"))\n       (not (string-contains\
    \ s \"zzz\"))))\n", "  (cond\n    [(< (string-length s) 3) #f]\n    [(equal? (substring\
    \ s 0 3) (substring s 1 4)) #f]\n    [else (is_happy (substring s 1))]))\n", " \
    \ (and (>= (string-length s) 3)\n       (not (string-contains s \"aaa\"))\n  \
    \     (not (string-contains s \"bbb\"))\n       (not (string-contains s \"ccc\"\
    ))\n       (not (string-contains s \"ddd\"))\n       (not (string-contains s \"\
    eee\"))\n       (not (string-contains s \"fff\"))\n       (not (string-contains\
    \ s \"ggg\"))\n       (not (string-contains s \"hhh\"))\n       (not (string-contains\
    \ s \"iii\"))\n       (not (string-contains s \"jjj\"))\n       (not (string-contains\
    \ s \"kkk\"))\n       (not (string-contains s \"lll\"))\n       (not (string-contains\
    \ s \"mmm\"))\n       (not (string-contains s \"nnn\"))\n       (not (string-contains\
    \ s \"ooo\"))\n       (not (string-contains s \"ppp\"))\n       (not (string-contains\
    \ s \"qqq\"))\n       (not (string-contains s \"rrr\"))\n       (not (string-contains\
    \ s \"sss\"))\n       (not (string-contains s \"ttt\"))\n       (not (string-contains\
    \ s \"uuu\"))\n       (not (string-contains s \"vvv\"))\n       (not (string-contains\
    \ s \"www\"))\n       (not (string-contains s \"xxx\"))\n       (not (string-contains\
    \ s \"yyy\"))\n       (not (string-contains s \"zzz\"))))\n", "  (define (helper\
    \ s i)\n    (cond ((< i (- (string-length s) 2))\n           (cond ((equal? (string-ref\
    \ s i) (string-ref s (+ i 1)))\n                  (helper s (+ i 1)))\n      \
    \           ((equal? (string-ref s i) (string-ref s (+ i 2)))\n              \
    \    (helper s (+ i 1)))\n                 ((equal? (string-ref s (+ i 1)) (string-ref\
    \ s (+ i 2)))\n                  (helper s (+ i 1)))\n                 (else (helper\
    \ s (+ i 1)))))\n          (else #t)))\n  (cond ((< (string-length s) 3) #f)\n\
    \        (else (helper s 0))))\n", "  (and (>= (string-length s) 3)\n       (not\
    \ (string-contains s #\\a #\\a #\\a))\n       (not (string-contains s #\\b #\\\
    b #\\b))\n       (not (string-contains s #\\c #\\c #\\c))\n       (not (string-contains\
    \ s #\\d #\\d #\\d))\n       (not (string-contains s #\\e #\\e #\\e))\n      \
    \ (not (string-contains s #\\f #\\f #\\f))\n       (not (string-contains s #\\\
    g #\\g #\\g))\n       (not (string-contains s #\\h #\\h #\\h))\n       (not (string-contains\
    \ s #\\i #\\i #\\i))\n       (not (string-contains s #\\j #\\j #\\j))\n      \
    \ (not (string-contains s #\\k #\\k #\\k))\n       (not (string-contains s #\\\
    l #\\l #\\l))\n       (not (string-contains s #\\m #\\m #\\m))\n       (not (string-contains\
    \ s #\\n #\\n #\\n))\n       (not (string-contains s #\\o #\\o #\\o))\n      \
    \ (not (string-contains s #\\p #\\p #\\p))\n       (not (string-contains s #\\\
    q #\\q #\\q))\n       (not (string-contains s #\\r #\\r #\\r))\n       (not (string-contains\
    \ s #\\s #\\s #\\s))\n       (not (string-contains s #\\t #\\t #\\t))\n      \
    \ (not (string-contains s #\\u #\\u #\\u))\n       (not (string-contains s #\\\
    v #\\v #\\v))\n       (not (string-contains s #\\w #\\w #\\w))\n       (not (string-contains\
    \ s #\\x #\\x #\\x))\n       (not (string-contains s #\\y #\\y #\\", "  (and (>=\
    \ (string-length s) 3)\n       (not (equal? (substring s 0 3) (substring s 1 4)))))\n",
  "  (cond\n    [(< (string-length s) 3) #f]\n    [(equal? (string-ref s 0) (string-ref\
    \ s 1)) #f]\n    [(equal? (string-ref s 1) (string-ref s 2)) #f]\n    [else #t]))\n",
  "  (cond\n    [(< (string-length s) 3) #f]\n    [(equal? (substring s 0 3) (substring\
    \ s 1 4)) #f]\n    [else #t]))\n", "  (and (>= (string-length s) 3)\n       (not\
    \ (string-contains s \"aaa\"))\n       (not (string-contains s \"bbb\"))\n   \
    \    (not (string-contains s \"ccc\"))\n       (not (string-contains s \"ddd\"\
    ))\n       (not (string-contains s \"eee\"))\n       (not (string-contains s \"\
    fff\"))\n       (not (string-contains s \"ggg\"))\n       (not (string-contains\
    \ s \"hhh\"))\n       (not (string-contains s \"iii\"))\n       (not (string-contains\
    \ s \"jjj\"))\n       (not (string-contains s \"kkk\"))\n       (not (string-contains\
    \ s \"lll\"))\n       (not (string-contains s \"mmm\"))\n       (not (string-contains\
    \ s \"nnn\"))\n       (not (string-contains s \"ooo\"))\n       (not (string-contains\
    \ s \"ppp\"))\n       (not (string-contains s \"qqq\"))\n       (not (string-contains\
    \ s \"rrr\"))\n       (not (string-contains s \"sss\"))\n       (not (string-contains\
    \ s \"ttt\"))\n       (not (string-contains s \"uuu\"))\n       (not (string-contains\
    \ s \"vvv\"))\n       (not (string-contains s \"www\"))\n       (not (string-contains\
    \ s \"xxx\"))\n       (not (string-contains s \"yyy\"))\n       (not (string-contains\
    \ s \"zzz\"))))\n", "  (cond\n    [(< (string-length s) 3) false]\n    [(equal?\
    \ (substring s 0 3) (substring s 1 4)) false]\n    [else true]))\n", "  (cond\n\
    \    [(< (string-length s) 3) #f]\n    [(equal? (substring s 0 3) (substring s\
    \ 1 4)) #f]\n    [else #t]))\n", "  (and (>= (string-length s) 3)\n       (for/and\
    \ ([i (in-range (string-length s) (- (string-length s) 2))])\n         (not (equal?\
    \ (substring s i (+ i 3)) (substring s (- i 3) i))))))\n```\n\n## Problem 2\n\n\
    ```racket\n#lang racket\n", "  (if (< (string-length s) 3)\n      #f\n      (let\
    \ loop ([i 0])\n        (if (= i (- (string-length s) 3))\n            #t\n  \
    \          (if (equal? (substring s i (+ i 3)) (substring s (+ i 1) (+ i 4)))\n\
    \                #f\n                (loop (+ i 1)))))))\n", "  (cond\n    [(<\
    \ (string-length s) 3) #f]\n    [(equal? (substring s 0 3) (substring s 1 4))\
    \ #f]\n    [else #t]))\n", "  (define (helper s i)\n    (cond\n      [(= i (-\
    \ (string-length s) 2)) #t]\n      [(string=? (substring s i (+ i 3)) (string-append\
    \ (substring s i (+ i 1)) (substring s i (+ i 1)))) #f]\n      [else (helper s\
    \ (+ i 1))]))\n  (cond\n    [(< (string-length s) 3) #f]\n    [else (helper s\
    \ 0)]))\n", "  (cond\n    [(< (string-length s) 3) #f]\n    [(equal? (string-ref\
    \ s 0) (string-ref s 1)) #f]\n    [(equal? (string-ref s 1) (string-ref s 2))\
    \ #f]\n    [else #t]))\n", "  (define (helper s i)\n    (cond\n      [(>= i (-\
    \ (string-length s) 2)) #t]\n      [(string=? (substring s i (+ i 3)) (string-append\
    \ (substring s i (+ i 1)) (substring s i (+ i 1)) (substring s i (+ i 1)))) #f]\n\
    \      [else (helper s (+ i 1))]))\n  (cond\n    [(< (string-length s) 3) #f]\n\
    \    [else (helper s 0)]))\n", "  (and (>= (string-length s) 3)\n       (not (string-contains\
    \ s #\\a #\\a #\\a))\n       (not (string-contains s #\\b #\\b #\\b))\n      \
    \ (not (string-contains s #\\c #\\c #\\c))\n       (not (string-contains s #\\\
    d #\\d #\\d))\n       (not (string-contains s #\\e #\\e #\\e))\n       (not (string-contains\
    \ s #\\f #\\f #\\f))\n       (not (string-contains s #\\g #\\g #\\g))\n      \
    \ (not (string-contains s #\\h #\\h #\\h))\n       (not (string-contains s #\\\
    i #\\i #\\i))\n       (not (string-contains s #\\j #\\j #\\j))\n       (not (string-contains\
    \ s #\\k #\\k #\\k))\n       (not (string-contains s #\\l #\\l #\\l))\n      \
    \ (not (string-contains s #\\m #\\m #\\m))\n       (not (string-contains s #\\\
    n #\\n #\\n))\n       (not (string-contains s #\\o #\\o #\\o))\n       (not (string-contains\
    \ s #\\p #\\p #\\p))\n       (not (string-contains s #\\q #\\q #\\q))\n      \
    \ (not (string-contains s #\\r #\\r #\\r))\n       (not (string-contains s #\\\
    s #\\s #\\s))\n       (not (string-contains s #\\t #\\t #\\t))\n       (not (string-contains\
    \ s #\\u #\\u #\\u))\n       (not (string-contains s #\\v #\\v #\\v))\n      \
    \ (not (string-contains s #\\w #\\w #\\w))\n       (not (string-contains s #\\\
    x #\\x #\\x))\n       (not (string-contains s #\\y #\\y #\\", "  (if (< (string-length\
    \ s) 3)\n      #f\n      (let ([s (string-&gt;list s)])\n        (if (equal? (car\
    \ s) (cadr s))\n            #f\n            (if (equal? (cadr s) (caddr s))\n\
    \                #f\n                #t)))))\n</code>\n", "  (and (>= (string-length\
    \ s) 3)\n       (not (string-contains s \"aaa\"))\n       (not (string-contains\
    \ s \"bbb\"))\n       (not (string-contains s \"ccc\"))\n       (not (string-contains\
    \ s \"ddd\"))\n       (not (string-contains s \"eee\"))\n       (not (string-contains\
    \ s \"fff\"))\n       (not (string-contains s \"ggg\"))\n       (not (string-contains\
    \ s \"hhh\"))\n       (not (string-contains s \"iii\"))\n       (not (string-contains\
    \ s \"jjj\"))\n       (not (string-contains s \"kkk\"))\n       (not (string-contains\
    \ s \"lll\"))\n       (not (string-contains s \"mmm\"))\n       (not (string-contains\
    \ s \"nnn\"))\n       (not (string-contains s \"ooo\"))\n       (not (string-contains\
    \ s \"ppp\"))\n       (not (string-contains s \"qqq\"))\n       (not (string-contains\
    \ s \"rrr\"))\n       (not (string-contains s \"sss\"))\n       (not (string-contains\
    \ s \"ttt\"))\n       (not (string-contains s \"uuu\"))\n       (not (string-contains\
    \ s \"vvv\"))\n       (not (string-contains s \"www\"))\n       (not (string-contains\
    \ s \"xxx\"))\n       (not (string-contains s \"yyy\"))\n       (not (string-contains\
    \ s \"zzz\"))))\n", "  (cond\n    [(< (string-length s) 3) #f]\n    [(equal? (substring\
    \ s 0 3) (substring s 1 4)) #f]\n    [else (is_happy (substring s 1))]))\n", " \
    \ (if (< (string-length s) 3)\n      #f\n      (let loop ([i 0])\n        (if\
    \ (= i (- (string-length s) 3))\n            #t\n            (if (equal? (substring\
    \ s i (+ i 3)) (substring s (+ i 1) (+ i 4)))\n                #f\n          \
    \      (loop (+ i 1)))))))\n", "  (define (is_happy-helper s i)\n    (cond\n \
    \     [(>= i (- (string-length s) 2)) #t]\n      [(string=? (substring s i (+\
    \ i 3)) (string-append (substring s i (+ i 1)) (substring s i (+ i 1)))) #f]\n\
    \      [else (is_happy-helper s (+ i 1))]))\n  (and (>= (string-length s) 3) (is_happy-helper\
    \ s 0)))\n", "  (cond\n    [(< (string-length s) 3) #f]\n    [(equal? (substring\
    \ s 0 3) (substring s 1 4)) #f]\n    [else #t]))\n", "  (let ([len (string-length\
    \ s)])\n    (and (>= len 3)\n         (for/and ([i (in-range (- len 2))])\n  \
    \         (not (equal? (string-ref s i)\n                        (string-ref s\
    \ (+ i 1))))))))\n", "  (if (< (string-length s) 3)\n      #f\n      (let loop\
    \ ([i 0])\n        (if (= i (- (string-length s) 3))\n            #t\n       \
    \     (if (equal? (substring s i (+ i 3)) (substring s (+ i 1) (+ i 4)))\n   \
    \             #f\n                (loop (+ i 1)))))))\n", "  (cond\n    [(< (string-length\
    \ s) 3) #f]\n    [(equal? (substring s 0 3) (substring s 1 4)) #f]\n    [else\
    \ #t]))\n", "  (define (helper s i)\n    (cond\n      [(>= i (- (string-length\
    \ s) 2)) #t]\n      [(char=? (string-ref s i) (string-ref s (+ i 1))) #f]\n  \
    \    [(char=? (string-ref s i) (string-ref s (+ i 2))) #f]\n      [(char=? (string-ref\
    \ s (+ i 1)) (string-ref s (+ i 2))) #f]\n      [else (helper s (+ i 1))]))\n\
    \  (and (>= (string-length s) 3) (helper s 0)))\n", "  (cond\n    [(< (string-length\
    \ s) 3) #f]\n    [(equal? (string-ref s 0) (string-ref s 1)) #f]\n    [(equal?\
    \ (string-ref s 1) (string-ref s 2)) #f]\n    [else #t]))\n", "  (cond\n    [(<\
    \ (string-length s) 3) #f]\n    [(equal? (string-ref s 0) (string-ref s 1)) #f]\n\
    \    [(equal? (string-ref s 1) (string-ref s 2)) #f]\n    [else #t]))\n", "  (if\
    \ (< (string-length s) 3)\n      #f\n      (let loop ([i 0])\n        (if (= i\
    \ (- (string-length s) 3))\n            #t\n            (if (equal? (substring\
    \ s i (+ i 3))\n                        (substring s (+ i 1) (+ i 4)))\n     \
    \           #f\n                (loop (+ i 1)))))))\n", "  (cond\n    [(< (string-length\
    \ s) 3) #f]\n    [(equal? (string-ref s 0) (string-ref s 1)) #f]\n    [(equal?\
    \ (string-ref s 1) (string-ref s 2)) #f]\n    [else #t]))\n", "  (and (&gt;= (string-length\
    \ s) 3)\n       (for/and ([i (in-range (string-length s) (- (string-length s)\
    \ 2))])\n         (not (equal? (substring s i (+ i 3)) (substring s (+ i 1) (+\
    \ i 4)))))))\n", "  (and (>= (string-length s) 3)\n       (not (string-contains\
    \ s \"aaa\"))\n       (not (string-contains s \"bbb\"))\n       (not (string-contains\
    \ s \"ccc\"))\n       (not (string-contains s \"ddd\"))\n       (not (string-contains\
    \ s \"eee\"))\n       (not (string-contains s \"fff\"))\n       (not (string-contains\
    \ s \"ggg\"))\n       (not (string-contains s \"hhh\"))\n       (not (string-contains\
    \ s \"iii\"))\n       (not (string-contains s \"jjj\"))\n       (not (string-contains\
    \ s \"kkk\"))\n       (not (string-contains s \"lll\"))\n       (not (string-contains\
    \ s \"mmm\"))\n       (not (string-contains s \"nnn\"))\n       (not (string-contains\
    \ s \"ooo\"))\n       (not (string-contains s \"ppp\"))\n       (not (string-contains\
    \ s \"qqq\"))\n       (not (string-contains s \"rrr\"))\n       (not (string-contains\
    \ s \"sss\"))\n       (not (string-contains s \"ttt\"))\n       (not (string-contains\
    \ s \"uuu\"))\n       (not (string-contains s \"vvv\"))\n       (not (string-contains\
    \ s \"www\"))\n       (not (string-contains s \"xxx\"))\n       (not (string-contains\
    \ s \"yyy\"))\n       (not (string-contains s \"zzz\"))))\n", "  (define (is_happy-helper\
    \ s)\n    (cond\n      [(empty? s) #t]\n      [(and (not (empty? (cdr s)))\n \
    \           (not (empty? (cddr s)))\n            (equal? (car s) (cadr s))\n \
    \           (equal? (cadr s) (caddr s))) #f]\n      [else (is_happy-helper (cdr\
    \ s))]))\n  (and (&gt;= (string-length s) 3)\n       (is_happy-helper s)))\n",
  "  (cond\n    [(< (string-length s) 3) #f]\n    [(equal? (string-ref s 0) (string-ref\
    \ s 1)) #f]\n    [(equal? (string-ref s 1) (string-ref s 2)) #f]\n    [else #t]))\n",
  "  (define (is_happy-helper s i)\n    (cond\n      [(< i (- (string-length s) 2))\n\
    \       (and (not (equal? (string-ref s i) (string-ref s (+ i 1))))\n        \
    \    (not (equal? (string-ref s i) (string-ref s (+ i 2))))\n            (not\
    \ (equal? (string-ref s (+ i 1)) (string-ref s (+ i 2))))\n            (is_happy-helper\
    \ s (+ i 1)))]\n      [else #t]))\n  (and (>= (string-length s) 3)\n       (is_happy-helper\
    \ s 0)))\n", "  (if (< (string-length s) 3)\n      #f\n      (let ([s (string-&gt;list\
    \ s)])\n        (cond\n          [(null? s) #t]\n          [(null? (cdr s)) #t]\n\
    \          [(null? (cddr s)) #t]\n          [(equal? (car s) (cadr s)) #f]\n \
    \         [(equal? (car s) (caddr s)) #f]\n          [(equal? (cadr s) (caddr\
    \ s)) #f]\n          [else (is_happy (list-&gt;string (cdr s)))]))))\n</code>\n",
  "  (cond\n    [(< (string-length s) 3) #f]\n    [(equal? (string-ref s 0) (string-ref\
    \ s 1)) #f]\n    [(equal? (string-ref s 1) (string-ref s 2)) #f]\n    [else #t]))\n",
  "  (and (>= (string-length s) 3)\n       (not (string-contains s #\\a #\\a #\\a))\n\
    \       (not (string-contains s #\\b #\\b #\\b))\n       (not (string-contains\
    \ s #\\c #\\c #\\c))\n       (not (string-contains s #\\d #\\d #\\d))\n      \
    \ (not (string-contains s #\\e #\\e #\\e))\n       (not (string-contains s #\\\
    f #\\f #\\f))\n       (not (string-contains s #\\g #\\g #\\g))\n       (not (string-contains\
    \ s #\\h #\\h #\\h))\n       (not (string-contains s #\\i #\\i #\\i))\n      \
    \ (not (string-contains s #\\j #\\j #\\j))\n       (not (string-contains s #\\\
    k #\\k #\\k))\n       (not (string-contains s #\\l #\\l #\\l))\n       (not (string-contains\
    \ s #\\m #\\m #\\m))\n       (not (string-contains s #\\n #\\n #\\n))\n      \
    \ (not (string-contains s #\\o #\\o #\\o))\n       (not (string-contains s #\\\
    p #\\p #\\p))\n       (not (string-contains s #\\q #\\q #\\q))\n       (not (string-contains\
    \ s #\\r #\\r #\\r))\n       (not (string-contains s #\\s #\\s #\\s))\n      \
    \ (not (string-contains s #\\t #\\t #\\t))\n       (not (string-contains s #\\\
    u #\\u #\\u))\n       (not (string-contains s #\\v #\\v #\\v))\n       (not (string-contains\
    \ s #\\w #\\w #\\w))\n       (not (string-contains s #\\x #\\x #\\x))\n      \
    \ (not (string-contains s #\\y #\\y #\\", "  (define (is_happy-helper s i)\n \
    \   (if (&gt;= i (- (string-length s) 2))\n        #t\n        (if (equal? (string-ref\
    \ s i) (string-ref s (+ i 1)))\n            #f\n            (is_happy-helper s\
    \ (+ i 1)))))\n  (if (&lt; (string-length s) 3)\n      #f\n      (is_happy-helper\
    \ s 0)))\n", "  (define (is_happy-helper s i)\n    (cond\n      [(>= i (- (string-length\
    \ s) 2)) #t]\n      [(string=? (substring s i (+ i 3)) (string-append (substring\
    \ s i (+ i 1)) (substring s i (+ i 1)))) #f]\n      [else (is_happy-helper s (+\
    \ i 1))]))\n  (if (< (string-length s) 3)\n      #f\n      (is_happy-helper s\
    \ 0)))\n", "  (cond\n    [(< (string-length s) 3) #f]\n    [(string=? (substring\
    \ s 0 3) (substring s 1 4)) #f]\n    [else #t]))\n", "  (cond\n    [(< (string-length\
    \ s) 3) #f]\n    [(equal? (substring s 0 3) (substring s 1 4)) #f]\n    [else\
    \ #t]))\n", "  (and (>= (string-length s) 3)\n       (not (string-contains s \"\
    aaa\"))\n       (not (string-contains s \"bbb\"))\n       (not (string-contains\
    \ s \"ccc\"))\n       (not (string-contains s \"ddd\"))\n       (not (string-contains\
    \ s \"eee\"))\n       (not (string-contains s \"fff\"))\n       (not (string-contains\
    \ s \"ggg\"))\n       (not (string-contains s \"hhh\"))\n       (not (string-contains\
    \ s \"iii\"))\n       (not (string-contains s \"jjj\"))\n       (not (string-contains\
    \ s \"kkk\"))\n       (not (string-contains s \"lll\"))\n       (not (string-contains\
    \ s \"mmm\"))\n       (not (string-contains s \"nnn\"))\n       (not (string-contains\
    \ s \"ooo\"))\n       (not (string-contains s \"ppp\"))\n       (not (string-contains\
    \ s \"qqq\"))\n       (not (string-contains s \"rrr\"))\n       (not (string-contains\
    \ s \"sss\"))\n       (not (string-contains s \"ttt\"))\n       (not (string-contains\
    \ s \"uuu\"))\n       (not (string-contains s \"vvv\"))\n       (not (string-contains\
    \ s \"www\"))\n       (not (string-contains s \"xxx\"))\n       (not (string-contains\
    \ s \"yyy\"))\n       (not (string-contains s \"zzz\"))))\n", "  (and (>= (string-length\
    \ s) 3)\n       (not (string-contains s \"aaa\"))\n       (not (string-contains\
    \ s \"bbb\"))\n       (not (string-contains s \"ccc\"))\n       (not (string-contains\
    \ s \"ddd\"))\n       (not (string-contains s \"eee\"))\n       (not (string-contains\
    \ s \"fff\"))\n       (not (string-contains s \"ggg\"))\n       (not (string-contains\
    \ s \"hhh\"))\n       (not (string-contains s \"iii\"))\n       (not (string-contains\
    \ s \"jjj\"))\n       (not (string-contains s \"kkk\"))\n       (not (string-contains\
    \ s \"lll\"))\n       (not (string-contains s \"mmm\"))\n       (not (string-contains\
    \ s \"nnn\"))\n       (not (string-contains s \"ooo\"))\n       (not (string-contains\
    \ s \"ppp\"))\n       (not (string-contains s \"qqq\"))\n       (not (string-contains\
    \ s \"rrr\"))\n       (not (string-contains s \"sss\"))\n       (not (string-contains\
    \ s \"ttt\"))\n       (not (string-contains s \"uuu\"))\n       (not (string-contains\
    \ s \"vvv\"))\n       (not (string-contains s \"www\"))\n       (not (string-contains\
    \ s \"xxx\"))\n       (not (string-contains s \"yyy\"))\n       (not (string-contains\
    \ s \"zzz\"))))\n", "  (and (not (empty? s))\n       (and (not (empty? (cdr s)))\n\
    \            (and (not (empty? (cddr s)))\n                 (and (not (equal?\
    \ (car s) (cadr s)))\n                      (and (not (equal? (car s) (caddr s)))\n\
    \                           (and (not (equal? (cadr s) (caddr s)))\n         \
    \                       (is_happy (cdr s)))))))))\n", "  (define (is_happy-helper\
    \ s i)\n    (cond\n      [(>= i (- (string-length s) 2)) #t]\n      [(string=?\
    \ (substring s i (+ i 3)) (string-append (substring s i (+ i 1)) (substring s\
    \ i (+ i 1)))) #f]\n      [else (is_happy-helper s (+ i 1))]))\n  (cond\n    [(<\
    \ (string-length s) 3) #f]\n    [else (is_happy-helper s 0)]))\n", "  (cond\n\
    \    [(< (string-length s) 3) #f]\n    [(equal? (string-ref s 0) (string-ref s\
    \ 1)) #f]\n    [(equal? (string-ref s 1) (string-ref s 2)) #f]\n    [else #t]))\n",
  "  (and (>= (string-length s) 3)\n       (not (string-contains s \"aaa\"))\n   \
    \    (not (string-contains s \"bbb\"))\n       (not (string-contains s \"ccc\"\
    ))\n       (not (string-contains s \"ddd\"))\n       (not (string-contains s \"\
    eee\"))\n       (not (string-contains s \"fff\"))\n       (not (string-contains\
    \ s \"ggg\"))\n       (not (string-contains s \"hhh\"))\n       (not (string-contains\
    \ s \"iii\"))\n       (not (string-contains s \"jjj\"))\n       (not (string-contains\
    \ s \"kkk\"))\n       (not (string-contains s \"lll\"))\n       (not (string-contains\
    \ s \"mmm\"))\n       (not (string-contains s \"nnn\"))\n       (not (string-contains\
    \ s \"ooo\"))\n       (not (string-contains s \"ppp\"))\n       (not (string-contains\
    \ s \"qqq\"))\n       (not (string-contains s \"rrr\"))\n       (not (string-contains\
    \ s \"sss\"))\n       (not (string-contains s \"ttt\"))\n       (not (string-contains\
    \ s \"uuu\"))\n       (not (string-contains s \"vvv\"))\n       (not (string-contains\
    \ s \"www\"))\n       (not (string-contains s \"xxx\"))\n       (not (string-contains\
    \ s \"yyy\"))\n       (not (string-contains s \"zzz\"))))\n", "  (define (is_happy-helper\
    \ s i)\n    (cond\n      [(< i (- (string-length s) 2))\n       (if (equal? (string-ref\
    \ s i) (string-ref s (+ i 1)))\n           #f\n           (is_happy-helper s (+\
    \ i 1)))]\n      [else #t]))\n  (if (< (string-length s) 3)\n      #f\n      (is_happy-helper\
    \ s 0)))\n", "  (if (< (string-length s) 3)\n      #f\n      (let ([s (string-&gt;list\
    \ s)])\n        (for/and ([i (in-range 0 (- (length s) 2))])\n          (not (equal?\
    \ (list-ref s i) (list-ref s (+ i 1))))))))\n", "  (if (< (string-length s) 3)\n\
    \      #f\n      (let* ([s (string->list s)]\n             [s (map symbol->string\
    \ s)])\n        (if (equal? (list-ref s 0) (list-ref s 1))\n            #f\n \
    \           (if (equal? (list-ref s 1) (list-ref s 2))\n                #f\n \
    \               #t)))))\n", "  (let loop ([s s] [i 0])\n    (cond [(empty? s)\
    \ #t]\n          [(= i 3) (loop (rest s) 0)]\n          [(equal? (first s) (first\
    \ (rest s))) #f]\n          [else (loop (rest s) (+ i 1))])))\n", "  (and (>=\
    \ (string-length s) 3)\n       (not (member #\\a (string-append (substring s 0\
    \ 3) (substring s 1 3))))\n       (not (member #\\b (string-append (substring\
    \ s 0 3) (substring s 1 3))))\n       (not (member #\\c (string-append (substring\
    \ s 0 3) (substring s 1 3))))\n       (not (member #\\d (string-append (substring\
    \ s 0 3) (substring s 1 3))))\n       (not (member #\\e (string-append (substring\
    \ s 0 3) (substring s 1 3))))\n       (not (member #\\f (string-append (substring\
    \ s 0 3) (substring s 1 3))))\n       (not (member #\\g (string-append (substring\
    \ s 0 3) (substring s 1 3))))\n       (not (member #\\h (string-append (substring\
    \ s 0 3) (substring s 1 3))))\n       (not (member #\\i (string-append (substring\
    \ s 0 3) (substring s 1 3))))\n       (not (member #\\j (string-append (substring\
    \ s 0 3) (substring s 1 3))))\n       (not (member #\\k (string-append (substring\
    \ s 0 3) (substring s 1 3))))\n       (not (member #\\l (string-append (substring\
    \ s 0 3) (substring s 1 3))))\n       (not (member #\\m (string-append (substring\
    \ s 0 3) (substring s 1 3))))\n       (not (member #\\n (string-append (substring\
    \ s 0 3) (substring s 1 3))))\n       (not (member #\\o (string-append (substring\
    \ s 0 3) (substring s 1 3))))\n       (not (member #\\p (string-append (substring\
    \ s 0 3) (substring s 1 3))))\n       (not (member #\\q (string-append (substring\
    \ s 0 3) (substring s 1 3))))\n       (not (member #\\r (string-append (substring\
    \ s 0 3) (substring s 1 3))))\n       (not (member #\\s (string-", "  (define\
    \ (is_happy-helper s i)\n    (cond [(>= i (- (string-length s) 2)) #t]\n     \
    \     [(string=? (substring s i (+ i 3)) (substring s (+ i 1) (+ i 4))) #f]\n\
    \          [else (is_happy-helper s (+ i 1))]))\n  (cond [(< (string-length s)\
    \ 3) #f]\n        [else (is_happy-helper s 0)]))\n", "  (cond\n    [(< (string-length\
    \ s) 3) false]\n    [(equal? (string-ref s 0) (string-ref s 1)) false]\n    [(equal?\
    \ (string-ref s 1) (string-ref s 2)) false]\n    [else true]))\n", "  (and (>=\
    \ (string-length s) 3)\n       (not (string-contains s \"aaa\"))\n       (not\
    \ (string-contains s \"bbb\"))\n       (not (string-contains s \"ccc\"))\n   \
    \    (not (string-contains s \"ddd\"))\n       (not (string-contains s \"eee\"\
    ))\n       (not (string-contains s \"fff\"))\n       (not (string-contains s \"\
    ggg\"))\n       (not (string-contains s \"hhh\"))\n       (not (string-contains\
    \ s \"iii\"))\n       (not (string-contains s \"jjj\"))\n       (not (string-contains\
    \ s \"kkk\"))\n       (not (string-contains s \"lll\"))\n       (not (string-contains\
    \ s \"mmm\"))\n       (not (string-contains s \"nnn\"))\n       (not (string-contains\
    \ s \"ooo\"))\n       (not (string-contains s \"ppp\"))\n       (not (string-contains\
    \ s \"qqq\"))\n       (not (string-contains s \"rrr\"))\n       (not (string-contains\
    \ s \"sss\"))\n       (not (string-contains s \"ttt\"))\n       (not (string-contains\
    \ s \"uuu\"))\n       (not (string-contains s \"vvv\"))\n       (not (string-contains\
    \ s \"www\"))\n       (not (string-contains s \"xxx\"))\n       (not (string-contains\
    \ s \"yyy\"))\n       (not (string-contains s \"zzz\"))))\n", "  (cond\n    [(<\
    \ (string-length s) 3) false]\n    [(equal? (substring s 0 3) (substring s 1 4))\
    \ false]\n    [else true]))\n", "  (cond\n    [(< (string-length s) 3) #f]\n \
    \   [(equal? (string-ref s 0) (string-ref s 1)) #f]\n    [(equal? (string-ref\
    \ s 1) (string-ref s 2)) #f]\n    [else #t]))\n", "  (if (< (string-length s)\
    \ 3)\n      #f\n      (let loop ([i 0])\n        (if (= i (- (string-length s)\
    \ 3))\n            #t\n            (if (equal? (substring s i (+ i 3))\n     \
    \                   (substring s (+ i 1) (+ i 4)))\n                #f\n     \
    \           (loop (+ i 1)))))))\n", "  (if (< (string-length s) 3)\n      #f\n\
    \      (let loop ([i 0])\n        (if (= i (- (string-length s) 3))\n        \
    \    #t\n            (if (string=? (substring s i (+ i 3)) (substring s (+ i 1)\
    \ (+ i 4)))\n                #f\n                (loop (+ i 1)))))))\n", "  (and\
    \ (>= (string-length s) 3)\n       (not (string-contains s \"aaa\"))\n       (not\
    \ (string-contains s \"bbb\"))\n       (not (string-contains s \"ccc\"))\n   \
    \    (not (string-contains s \"ddd\"))\n       (not (string-contains s \"eee\"\
    ))\n       (not (string-contains s \"fff\"))\n       (not (string-contains s \"\
    ggg\"))\n       (not (string-contains s \"hhh\"))\n       (not (string-contains\
    \ s \"iii\"))\n       (not (string-contains s \"jjj\"))\n       (not (string-contains\
    \ s \"kkk\"))\n       (not (string-contains s \"lll\"))\n       (not (string-contains\
    \ s \"mmm\"))\n       (not (string-contains s \"nnn\"))\n       (not (string-contains\
    \ s \"ooo\"))\n       (not (string-contains s \"ppp\"))\n       (not (string-contains\
    \ s \"qqq\"))\n       (not (string-contains s \"rrr\"))\n       (not (string-contains\
    \ s \"sss\"))\n       (not (string-contains s \"ttt\"))\n       (not (string-contains\
    \ s \"uuu\"))\n       (not (string-contains s \"vvv\"))\n       (not (string-contains\
    \ s \"www\"))\n       (not (string-contains s \"xxx\"))\n       (not (string-contains\
    \ s \"yyy\"))\n       (not (string-contains s \"zzz\"))))\n", "  (and (>= (string-length\
    \ s) 3)\n       (not (equal? (substring s 0 3) (substring s 1 4)))))\n", "  (define\
    \ (is_happy-helper s i)\n    (cond\n      [(= i (- (string-length s) 2)) #t]\n\
    \      [(string=? (substring s i (+ i 3)) (substring s (+ i 1) (+ i 4))) #f]\n\
    \      [else (is_happy-helper s (+ i 1))]))\n  (cond\n    [(< (string-length s)\
    \ 3) #f]\n    [else (is_happy-helper s 0)]))\n", "  (cond\n    [(< (string-length\
    \ s) 3) #f]\n    [(equal? (substring s 0 3) (substring s 1 4)) #f]\n    [else\
    \ (is_happy (substring s 1))]))\n", "  (cond\n    [(< (string-length s) 3) #f]\n\
    \    [(equal? (string-ref s 0) (string-ref s 1)) #f]\n    [(equal? (string-ref\
    \ s 1) (string-ref s 2)) #f]\n    [else #t]))\n", "  (define (is_happy-helper\
    \ s)\n    (if (empty? s)\n        #t\n        (if (equal? (first s) (second s))\n\
    \            #f\n            (if (equal? (first s) (third s))\n              \
    \  #f\n                (is_happy-helper (rest s))))))\n  (if (< (string-length\
    \ s) 3)\n      #f\n      (is_happy-helper s)))\n", "  (cond\n    [(< (string-length\
    \ s) 3) #f]\n    [(equal? (substring s 0 3) (substring s 1 4)) #f]\n    [else\
    \ #t]))\n", "  (cond\n    [(< (string-length s) 3) #f]\n    [(equal? (string-ref\
    \ s 0) (string-ref s 1)) #f]\n    [(equal? (string-ref s 1) (string-ref s 2))\
    \ #f]\n    [else #t]))\n", "  (and (>= (string-length s) 3)\n       (not (string-contains\
    \ s \"aaa\"))\n       (not (string-contains s \"bbb\"))\n       (not (string-contains\
    \ s \"ccc\"))\n       (not (string-contains s \"ddd\"))\n       (not (string-contains\
    \ s \"eee\"))\n       (not (string-contains s \"fff\"))\n       (not (string-contains\
    \ s \"ggg\"))\n       (not (string-contains s \"hhh\"))\n       (not (string-contains\
    \ s \"iii\"))\n       (not (string-contains s \"jjj\"))\n       (not (string-contains\
    \ s \"kkk\"))\n       (not (string-contains s \"lll\"))\n       (not (string-contains\
    \ s \"mmm\"))\n       (not (string-contains s \"nnn\"))\n       (not (string-contains\
    \ s \"ooo\"))\n       (not (string-contains s \"ppp\"))\n       (not (string-contains\
    \ s \"qqq\"))\n       (not (string-contains s \"rrr\"))\n       (not (string-contains\
    \ s \"sss\"))\n       (not (string-contains s \"ttt\"))\n       (not (string-contains\
    \ s \"uuu\"))\n       (not (string-contains s \"vvv\"))\n       (not (string-contains\
    \ s \"www\"))\n       (not (string-contains s \"xxx\"))\n       (not (string-contains\
    \ s \"yyy\"))\n       (not (string-contains s \"zzz\"))))\n", "  (cond\n    [(<\
    \ (string-length s) 3) #f]\n    [(equal? (string-ref s 0) (string-ref s 1)) #f]\n\
    \    [(equal? (string-ref s 1) (string-ref s 2)) #f]\n    [else #t]))\n", "  (cond\n\
    \    [(< (string-length s) 3) #f]\n    [(equal? (string-ref s 0) (string-ref s\
    \ 1)) #f]\n    [(equal? (string-ref s 1) (string-ref s 2)) #f]\n    [else #t]))\n",
  "  (if (not (string&gt;=? s 3))\n      false\n      (let loop ([i 0])\n        (if\
    \ (= i (- (string-length s) 2))\n            true\n            (if (equal? (substring\
    \ s i (+ i 3)) (substring s (+ i 1) (+ i 4)))\n                false\n       \
    \         (loop (+ i 1)))))))\n</code>\n", "  (define (is_happy-helper s i)\n\
    \    (cond\n      [(>= i (- (string-length s) 2)) #t]\n      [(string=? (substring\
    \ s i (+ i 3)) (string-append (substring s i (+ i 1)) (substring s i (+ i 1))))\
    \ #f]\n      [else (is_happy-helper s (+ i 1))]))\n  (and (>= (string-length s)\
    \ 3) (is_happy-helper s 0)))\n", "  (define (is_happy-iter s i)\n    (cond\n \
    \     [(>= i (- (string-length s) 2)) #t]\n      [(string=? (substring s i (+\
    \ i 3)) (string (string-ref s i) (string-ref s i) (string-ref s i))) #f]\n   \
    \   [else (is_happy-iter s (+ i 1))]))\n  (and (>= (string-length s) 3) (is_happy-iter\
    \ s 0)))\n", "  (cond\n    [(< (string-length s) 3) false]\n    [(equal? (string-ref\
    \ s 0) (string-ref s 1)) false]\n    [(equal? (string-ref s 1) (string-ref s 2))\
    \ false]\n    [else true]))\n", "  (define (helper s)\n    (if (or (< (string-length\
    \ s) 3)\n            (string=? (substring s 0 3) (substring s 1 4)))\n       \
    \ #f\n        (helper (substring s 1))))\n  (helper s))\n", "  (and (>= (string-length\
    \ s) 3)\n       (not (string-contains s #\\a #\\a #\\a))\n       (not (string-contains\
    \ s #\\b #\\b #\\b))\n       (not (string-contains s #\\c #\\c #\\c))\n      \
    \ (not (string-contains s #\\d #\\d #\\d))\n       (not (string-contains s #\\\
    e #\\e #\\e))\n       (not (string-contains s #\\f #\\f #\\f))\n       (not (string-contains\
    \ s #\\g #\\g #\\g))\n       (not (string-contains s #\\h #\\h #\\h))\n      \
    \ (not (string-contains s #\\i #\\i #\\i))\n       (not (string-contains s #\\\
    j #\\j #\\j))\n       (not (string-contains s #\\k #\\k #\\k))\n       (not (string-contains\
    \ s #\\l #\\l #\\l))\n       (not (string-contains s #\\m #\\m #\\m))\n      \
    \ (not (string-contains s #\\n #\\n #\\n))\n       (not (string-contains s #\\\
    o #\\o #\\o))\n       (not (string-contains s #\\p #\\p #\\p))\n       (not (string-contains\
    \ s #\\q #\\q #\\q))\n       (not (string-contains s #\\r #\\r #\\r))\n      \
    \ (not (string-contains s #\\s #\\s #\\s))\n       (not (string-contains s #\\\
    t #\\t #\\t))\n       (not (string-contains s #\\u #\\u #\\u))\n       (not (string-contains\
    \ s #\\v #\\v #\\v))\n       (not (string-contains s #\\w #\\w #\\w))\n      \
    \ (not (string-contains s #\\x #\\x #\\x))\n       (not (string-contains s #\\\
    y #\\y #\\", "  (define (helper s)\n    (if (or (< (string-length s) 3)\n    \
    \        (equal? (string-ref s 0) (string-ref s 1))\n            (equal? (string-ref\
    \ s 1) (string-ref s 2)))\n        #f\n        (if (equal? (string-length s) 3)\n\
    \            #t\n            (helper (substring s 1)))))\n  (helper s))\n", " \
    \ (define (helper s)\n    (if (or (< (string-length s) 3)\n            (equal?\
    \ (string-ref s 0) (string-ref s 1))\n            (equal? (string-ref s 1) (string-ref\
    \ s 2)))\n        #f\n        (helper (substring s 1))))\n  (helper s))\n", " \
    \ (cond\n    [(< (string-length s) 3) false]\n    [(equal? (substring s 0 3) (substring\
    \ s 1 4)) false]\n    [else true]))\n", "  (cond\n    [(< (string-length s) 3)\
    \ false]\n    [(equal? (string-ref s 0) (string-ref s 1)) false]\n    [(equal?\
    \ (string-ref s 1) (string-ref s 2)) false]\n    [else true]))\n", "  (if (< (string-length\
    \ s) 3)\n      #f\n      (let loop ([i 0])\n        (if (= i (- (string-length\
    \ s) 3))\n            #t\n            (if (equal? (substring s i (+ i 3)) (substring\
    \ s (+ i 1) (+ i 4)))\n                #f\n                (loop (+ i 1)))))))\n",
  "  (and (>= (string-length s) 3)\n       (not (string-contains s \"aaa\"))\n   \
    \    (not (string-contains s \"bbb\"))\n       (not (string-contains s \"ccc\"\
    ))\n       (not (string-contains s \"ddd\"))\n       (not (string-contains s \"\
    eee\"))\n       (not (string-contains s \"fff\"))\n       (not (string-contains\
    \ s \"ggg\"))\n       (not (string-contains s \"hhh\"))\n       (not (string-contains\
    \ s \"iii\"))\n       (not (string-contains s \"jjj\"))\n       (not (string-contains\
    \ s \"kkk\"))\n       (not (string-contains s \"lll\"))\n       (not (string-contains\
    \ s \"mmm\"))\n       (not (string-contains s \"nnn\"))\n       (not (string-contains\
    \ s \"ooo\"))\n       (not (string-contains s \"ppp\"))\n       (not (string-contains\
    \ s \"qqq\"))\n       (not (string-contains s \"rrr\"))\n       (not (string-contains\
    \ s \"sss\"))\n       (not (string-contains s \"ttt\"))\n       (not (string-contains\
    \ s \"uuu\"))\n       (not (string-contains s \"vvv\"))\n       (not (string-contains\
    \ s \"www\"))\n       (not (string-contains s \"xxx\"))\n       (not (string-contains\
    \ s \"yyy\"))\n       (not (string-contains s \"zzz\"))))\n", "  (and (>= (string-length\
    \ s) 3)\n       (not (string-contains s \"aaa\"))\n       (not (string-contains\
    \ s \"bbb\"))\n       (not (string-contains s \"ccc\"))\n       (not (string-contains\
    \ s \"ddd\"))\n       (not (string-contains s \"eee\"))\n       (not (string-contains\
    \ s \"fff\"))\n       (not (string-contains s \"ggg\"))\n       (not (string-contains\
    \ s \"hhh\"))\n       (not (string-contains s \"iii\"))\n       (not (string-contains\
    \ s \"jjj\"))\n       (not (string-contains s \"kkk\"))\n       (not (string-contains\
    \ s \"lll\"))\n       (not (string-contains s \"mmm\"))\n       (not (string-contains\
    \ s \"nnn\"))\n       (not (string-contains s \"ooo\"))\n       (not (string-contains\
    \ s \"ppp\"))\n       (not (string-contains s \"qqq\"))\n       (not (string-contains\
    \ s \"rrr\"))\n       (not (string-contains s \"sss\"))\n       (not (string-contains\
    \ s \"ttt\"))\n       (not (string-contains s \"uuu\"))\n       (not (string-contains\
    \ s \"vvv\"))\n       (not (string-contains s \"www\"))\n       (not (string-contains\
    \ s \"xxx\"))\n       (not (string-contains s \"yyy\"))\n       (not (string-contains\
    \ s \"zzz\"))))\n", "  (if (< (string-length s) 3)\n      #f\n      (let loop\
    \ ([i 0])\n        (if (= i (- (string-length s) 3))\n            #t\n       \
    \     (if (equal? (substring s i (+ i 3)) (substring s (+ i 1) (+ i 4)))\n   \
    \             #f\n                (loop (+ i 1)))))))\n", "  (cond\n    [(< (string-length\
    \ s) 3) #f]\n    [(equal? (string-ref s 0) (string-ref s 1)) #f]\n    [(equal?\
    \ (string-ref s 1) (string-ref s 2)) #f]\n    [else #t]))\n", "  (cond\n    [(<\
    \ (string-length s) 3) #f]\n    [(equal? (substring s 0 3) (substring s 1 4))\
    \ #f]\n    [else #t]))\n", "  (if (< (string-length s) 3)\n      #f\n      (let\
    \ ([s (string-append s (string (string-ref s 0)))])\n        (for/and ([i (in-range\
    \ (string-length s) (- (string-length s) 3))])\n          (not (equal? (substring\
    \ s i (+ i 3)) (substring s (+ i 1) (+ i 4))))))))\n", "  (if (< (string-length\
    \ s) 3)\n      #f\n      (let* ([s (string->list s)]\n             [s (map symbol->string\
    \ s)])\n        (if (equal? (list-ref s 0) (list-ref s 1))\n            #f\n \
    \           (if (equal? (list-ref s 1) (list-ref s 2))\n                #f\n \
    \               #t)))))\n", "  (if (or (< (string-length s) 3)\n          (equal?\
    \ (string-ref s 0) (string-ref s 1))\n          (equal? (string-ref s 1) (string-ref\
    \ s 2))\n          (equal? (string-ref s 0) (string-ref s 2)))\n      #f\n   \
    \   (is_happy (substring s 1))))\n", "  (if (< (string-length s) 3)\n      #f\n\
    \      (let loop ([i 0])\n        (if (= i (- (string-length s) 3))\n        \
    \    #t\n            (if (string=? (substring s i (+ i 3)) (substring s (+ i 1)\
    \ (+ i 4)))\n                #f\n                (loop (+ i 1)))))))\n", "  (define\
    \ (is_happy-iter s i)\n    (cond\n      [(>= i (- (string-length s) 2)) #t]\n\
    \      [(string=? (substring s i (+ i 3)) (string-append (substring s i (+ i 1))\
    \ (substring s i (+ i 1)) (substring s i (+ i 1)))) #f]\n      [else (is_happy-iter\
    \ s (+ i 1))]))\n  (if (< (string-length s) 3)\n      #f\n      (is_happy-iter\
    \ s 0)))\n", "  (define (is_happy_helper s i)\n    (cond\n      [(>= i (- (string-length\
    \ s) 2)) #t]\n      [(string=? (substring s i (+ i 3)) (string-append (substring\
    \ s i (+ i 1)) (substring s i (+ i 1)))) #f]\n      [else (is_happy_helper s (+\
    \ i 1))]))\n  (cond\n    [(< (string-length s) 3) #f]\n    [else (is_happy_helper\
    \ s 0)]))\n", "  (if (< (string-length s) 3)\n      #f\n      (let ([s (string-&gt;list\
    \ s)])\n        (cond\n          [(null? s) #t]\n          [(equal? (car s) (cadr\
    \ s)) #f]\n          [(equal? (cadr s) (caddr s)) #f]\n          [else (is_happy\
    \ (cdr s))]))))\n</code>\n", "  (cond\n    [(< (string-length s) 3) #f]\n    [(equal?\
    \ (substring s 0 3) (substring s 1 4)) #f]\n    [else #t]))\n", "  (cond\n   \
    \ [(< (string-length s) 3) #f]\n    [(equal? (substring s 0 3) (substring s 1\
    \ 4)) #f]\n    [else #t]))\n", "  (cond\n    [(< (string-length s) 3) #f]\n  \
    \  [(equal? (string-ref s 0) (string-ref s 1)) #f]\n    [(equal? (string-ref s\
    \ 1) (string-ref s 2)) #f]\n    [else #t]))\n", "  (cond\n    [(< (string-length\
    \ s) 3) #f]\n    [(equal? (substring s 0 3) (substring s 1 4)) #f]\n    [else\
    \ #t]))\n", "  (cond\n    [(< (string-length s) 3) false]\n    [(equal? (substring\
    \ s 0 3) (substring s 1 4)) false]\n    [else true]))\n", "  (cond\n    [(< (string-length\
    \ s) 3) #f]\n    [(equal? (substring s 0 3) (substring s 1 4)) #f]\n    [else\
    \ #t]))\n", "  (define (is_happy-helper s i)\n    (cond\n      [(>= i (- (string-length\
    \ s) 2)) #t]\n      [(string=? (substring s i (+ i 3)) (string-append (substring\
    \ s i (+ i 1)) (substring s i (+ i 1)))) #f]\n      [else (is_happy-helper s (+\
    \ i 1))]))\n  (cond\n    [(< (string-length s) 3) #f]\n    [else (is_happy-helper\
    \ s 0)]))\n", "  (cond\n    [(< (string-length s) 3) #f]\n    [(equal? (substring\
    \ s 0 3) (substring s 1 4)) #f]\n    [else #t]))\n", "  (if (< (string-length\
    \ s) 3)\n      #f\n      (let loop ([i 0])\n        (if (= i (- (string-length\
    \ s) 3))\n            #t\n            (if (equal? (substring s i (+ i 3)) (substring\
    \ s (+ i 1) (+ i 4)))\n                #f\n                (loop (+ i 1)))))))\n",
  "  (define (distinct-3-consecutive-letters? s)\n    (cond\n      [(empty? s) #t]\n\
    \      [(or (equal? (first s) (second s))\n           (equal? (second s) (third\
    \ s))\n           (equal? (first s) (third s))) #f]\n      [else (distinct-3-consecutive-letters?\
    \ (rest s))]))\n  (and (>= (string-length s) 3)\n       (distinct-3-consecutive-letters?\
    \ s)))\n", "  (cond\n    [(< (string-length s) 3) #f]\n    [(equal? (string-ref\
    \ s 0) (string-ref s 1)) #f]\n    [(equal? (string-ref s 1) (string-ref s 2))\
    \ #f]\n    [else #t]))\n", "  (define (helper s)\n    (if (empty? s)\n       \
    \ #t\n        (if (and (char=? (string-ref s 0) (string-ref s 1))\n          \
    \       (char=? (string-ref s 1) (string-ref s 2)))\n            #f\n        \
    \    (helper (substring s 1)))))\n  (and (>= (string-length s) 3)\n       (helper\
    \ s)))\n", "  (cond\n    [(< (string-length s) 3) #f]\n    [(string=? (substring\
    \ s 0 3) (substring s 1 4)) #f]\n    [else #t]))\n", "  (if (< (string-length\
    \ s) 3)\n      #f\n      (let ((s (string-append s (substring s 0 2))))\n    \
    \    (for/and ([i (in-range (string-length s) (- (string-length s) 3))])\n   \
    \       (not (equal? (substring s i (+ i 3)) (substring s (+ i 1) (+ i 4))))))))\n",
  "  (define (is_happy-helper s i)\n    (cond [(= i (- (string-length s) 2)) #t]\n\
    \          [(string=? (substring s i (+ i 3)) (string-append (substring s i (+\
    \ i 1)) (substring s i (+ i 1)))) #f]\n          [else (is_happy-helper s (+ i\
    \ 1))]))\n  (cond [(< (string-length s) 3) #f]\n        [else (is_happy-helper\
    \ s 0)]))\n", "  (and (>= (string-length s) 3)\n       (not (string-contains s\
    \ \"aaa\"))\n       (not (string-contains s \"bbb\"))\n       (not (string-contains\
    \ s \"ccc\"))\n       (not (string-contains s \"ddd\"))\n       (not (string-contains\
    \ s \"eee\"))\n       (not (string-contains s \"fff\"))\n       (not (string-contains\
    \ s \"ggg\"))\n       (not (string-contains s \"hhh\"))\n       (not (string-contains\
    \ s \"iii\"))\n       (not (string-contains s \"jjj\"))\n       (not (string-contains\
    \ s \"kkk\"))\n       (not (string-contains s \"lll\"))\n       (not (string-contains\
    \ s \"mmm\"))\n       (not (string-contains s \"nnn\"))\n       (not (string-contains\
    \ s \"ooo\"))\n       (not (string-contains s \"ppp\"))\n       (not (string-contains\
    \ s \"qqq\"))\n       (not (string-contains s \"rrr\"))\n       (not (string-contains\
    \ s \"sss\"))\n       (not (string-contains s \"ttt\"))\n       (not (string-contains\
    \ s \"uuu\"))\n       (not (string-contains s \"vvv\"))\n       (not (string-contains\
    \ s \"www\"))\n       (not (string-contains s \"xxx\"))\n       (not (string-contains\
    \ s \"yyy\"))\n       (not (string-contains s \"zzz\"))))\n", "  (cond\n    [(<\
    \ (string-length s) 3) #f]\n    [(equal? (substring s 0 3) (substring s 1 4))\
    \ #f]\n    [else (is_happy (substring s 1))]))\n", "  (define (is_happy-helper\
    \ s i)\n    (cond\n      [(>= i (- (string-length s) 2)) #t]\n      [(string=?\
    \ (substring s i (+ i 3)) (string-append (substring s i (+ i 1)) (substring s\
    \ i (+ i 1)))) #f]\n      [else (is_happy-helper s (+ i 1))]))\n  (and (>= (string-length\
    \ s) 3) (is_happy-helper s 0)))\n", "  (define (is_happy-helper s i)\n    (cond\n\
    \      [(>= i (- (string-length s) 2)) #t]\n      [(string=? (substring s i (+\
    \ i 3)) (string-append (substring s i (+ i 1)) (substring s i (+ i 1)))) #f]\n\
    \      [else (is_happy-helper s (+ i 1))]))\n  (if (< (string-length s) 3)\n \
    \     #f\n      (is_happy-helper s 0)))\n", "  (cond\n    [(< (string-length s)\
    \ 3) #f]\n    [(equal? (string-ref s 0) (string-ref s 1)) #f]\n    [(equal? (string-ref\
    \ s 1) (string-ref s 2)) #f]\n    [else #t]))\n", "  (define (distinct? s)\n \
    \   (cond\n      [(empty? s) #t]\n      [(member (first s) (rest s)) #f]\n   \
    \   [else (distinct? (rest s))]))\n  (cond\n    [(< (string-length s) 3) #f]\n\
    \    [(distinct? (string-&gt;list s)) #t]\n    [else #f]))\n", "  (cond\n    [(<\
    \ (string-length s) 3) false]\n    [(equal? (string-ref s 0) (string-ref s 1))\
    \ false]\n    [(equal? (string-ref s 1) (string-ref s 2)) false]\n    [else true]))\n",
  "  (and (>= (string-length s) 3)\n       (not (string-contains s #\\a #\\a #\\a))\n\
    \       (not (string-contains s #\\b #\\b #\\b))\n       (not (string-contains\
    \ s #\\c #\\c #\\c))\n       (not (string-contains s #\\d #\\d #\\d))\n      \
    \ (not (string-contains s #\\e #\\e #\\e))\n       (not (string-contains s #\\\
    f #\\f #\\f))\n       (not (string-contains s #\\g #\\g #\\g))\n       (not (string-contains\
    \ s #\\h #\\h #\\h))\n       (not (string-contains s #\\i #\\i #\\i))\n      \
    \ (not (string-contains s #\\j #\\j #\\j))\n       (not (string-contains s #\\\
    k #\\k #\\k))\n       (not (string-contains s #\\l #\\l #\\l))\n       (not (string-contains\
    \ s #\\m #\\m #\\m))\n       (not (string-contains s #\\n #\\n #\\n))\n      \
    \ (not (string-contains s #\\o #\\o #\\o))\n       (not (string-contains s #\\\
    p #\\p #\\p))\n       (not (string-contains s #\\q #\\q #\\q))\n       (not (string-contains\
    \ s #\\r #\\r #\\r))\n       (not (string-contains s #\\s #\\s #\\s))\n      \
    \ (not (string-contains s #\\t #\\t #\\t))\n       (not (string-contains s #\\\
    u #\\u #\\u))\n       (not (string-contains s #\\v #\\v #\\v))\n       (not (string-contains\
    \ s #\\w #\\w #\\w))\n       (not (string-contains s #\\x #\\x #\\x))\n      \
    \ (not (string-contains s #\\y #\\y #\\", "  (cond\n    [(< (string-length s)\
    \ 3) #f]\n    [(equal? (substring s 0 3) (substring s 1 4)) #f]\n    [else #t]))\n",
  "  (define (is_happy-helper s i)\n    (cond\n      [(>= i (- (string-length s) 2))\
    \ #t]\n      [(string=? (substring s i (+ i 3)) (string-append (substring s i\
    \ (+ i 1)) (substring s i (+ i 1)))) #f]\n      [else (is_happy-helper s (+ i\
    \ 1))]))\n  (and (>= (string-length s) 3) (is_happy-helper s 0)))\n", "  (cond\n\
    \    [(< (string-length s) 3) #f]\n    [(equal? (string-ref s 0) (string-ref s\
    \ 1)) #f]\n    [(equal? (string-ref s 1) (string-ref s 2)) #f]\n    [else #t]))\n",
  "  (cond\n    [(< (string-length s) 3) #f]\n    [(equal? (string-ref s 0) (string-ref\
    \ s 1)) #f]\n    [(equal? (string-ref s 1) (string-ref s 2)) #f]\n    [else #t]))\n",
  "  (cond\n    [(< (string-length s) 3) #f]\n    [(equal? (string-ref s 0) (string-ref\
    \ s 1)) #f]\n    [(equal? (string-ref s 1) (string-ref s 2)) #f]\n    [else #t]))\n",
  "  (cond\n    [(< (string-length s) 3) #f]\n    [(equal? (string-ref s 0) (string-ref\
    \ s 1)) #f]\n    [(equal? (string-ref s 1) (string-ref s 2)) #f]\n    [else #t]))\n"]
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
