name: HumanEval_162_string_to_md5
language: racket
prompt: "#lang racket\n\n;; Given a string 'text', return its md5 hash equivalent\
  \ string.\n;; If 'text' is an empty string, return None.\n;; >>> string_to_md5('Hello\
  \ world') == '3e25960a79dbc69b674cd4ec67a72c62'\n(define (string_to_md5 text)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate string_to_md5))\n\
  \    (check-equal? (candidate \"Hello world\") \"3e25960a79dbc69b674cd4ec67a72c62\"\
  )\n    (check-equal? (candidate \"\") #f)\n    (check-equal? (candidate \"A B C\"\
  ) \"0ef78513b0cb8cef12743f5aeb35f888\")\n    (check-equal? (candidate \"password\"\
  ) \"5f4dcc3b5aa765d61d8327deb882cf99\")\n))\n\n(test-humaneval)"
completions: ["  (if (string=? text \"\")\n      #f\n      (md5 (string->bytes/utf-8\
    \ text))))\n", "  (cond\n    [(string=? text \"\")\n     #f]\n    [else\n    \
    \ (md5 text)]))\n", "  (if (string=? text \"\")\n      #f\n      (md5 (string->bytes/utf-8\
    \ text))))\n", "  (if (string=? text \"\")\n      #f\n      (md5 text)))\n", " \
    \ (cond\n    [(string=? text \"\") (error \"Empty string\")]\n    [else (hash-ref\
    \ (md5 text) 'digest)]))\n", "  (if (string=? text \"\")\n      #f\n      (md5\
    \ text)))\n", "  (if (string=? text \"\")\n      #f\n      (md5 (string->bytes/utf-8\
    \ text))))\n", "  (if (string=? text \"\")\n      #f\n      (md5 (string->bytes/utf-8\
    \ text))))\n", "  (if (equal? text \"\")\n      #f\n      (md5 (string->bytes/utf-8\
    \ text))))\n", "  (cond\n    [(string=? text \"\") #f]\n    [else (hash-ref (hash\
    \ \"md5\" text) \"md5\")]))\n", "  (if (equal? text \"\")\n      #f\n      (md5\
    \ (string->bytes/utf-8 text))))\n", "  (if (string=? text \"\")\n      #f\n  \
    \    (md5 text)))\n", "  (if (string=? text \"\")\n      #f\n      (md5 (string->bytes/utf-8\
    \ text))))\n", "  (if (string=? text \"\")\n      #f\n      (md5 text)))\n", " \
    \ (if (string=? text \"\")\n      #f\n      (md5 text)))\n", "  (if (string=?\
    \ text \"\")\n      #f\n      (md5 text)))\n", "  (if (string=? text \"\")\n \
    \     #f\n      (md5 (string->bytes/utf-8 text))))\n", "  (if (string=? text \"\
    \")\n      #f\n      (md5 (string->bytes/utf-8 text))))\n", "  (if (string=? text\
    \ \"\")\n      #f\n      (hash-ref (md5 text) 'digest)))\n", "  (if (string=?\
    \ text \"\")\n      #f\n      (md5 text)))\n", "  (if (string=? text \"\")\n \
    \     #f\n      (md5 text)))\n", "  (if (string=? text \"\")\n      #f\n     \
    \ (md5 (string->bytes/utf-8 text))))\n", "  (if (string=? text \"\")\n      #f\n\
    \      (md5 text)))\n", "  (if (string=? text \"\")\n      #f\n      (md5 text)))\n",
  "  (if (string=? text \"\")\n      #f\n      (hash-ref (md5 text) 'digest)))\n",
  "  (if (string=? text \"\")\n      #f\n      (md5 (string->bytes/utf-8 text))))\n",
  "  (if (string=? text \"\")\n      #f\n      (hash-ref (md5 text) 'digest)))\n",
  "  (if (equal? text \"\")\n      #f\n      (md5 text)))\n", "  (if (string=? text\
    \ \"\")\n      #f\n      (hash-ref (md5 (string->bytes/utf-8 text)) 'digest)))\n",
  "  (if (string=? text \"\")\n      #f\n      (md5 (string->bytes/utf-8 text))))\n",
  "  (if (string=? text \"\")\n      #f\n      (hash-ref (md5 text) 'digest)))\n",
  "  (if (string=? text \"\")\n      #f\n      (hash-ref (md5 text) 'digest)))\n",
  "  (if (string=? text \"\")\n      #f\n      (md5 (string->bytes/utf-8 text))))\n",
  "  (cond\n    [(empty? text) #f]\n    [else (hash-ref (hash-ref (hash 'md5 (hash\
    \ 'text text)) 'md5) 'hexdigest)]))\n", "  (cond\n    [(string=? text \"\") #f]\n\
    \    [else (hash-ref (md5 text) 'digest)]))\n", "  (define (hex-string->bytes\
    \ hex-string)\n    (define (hex-char->byte hex-char)\n      (cond\n        [(char=?\
    \ #\\0 hex-char) 0]\n        [(char=? #\\1 hex-char) 1]\n        [(char=? #\\\
    2 hex-char) 2]\n        [(char=? #\\3 hex-char) 3]\n        [(char=? #\\4 hex-char)\
    \ 4]\n        [(char=? #\\5 hex-char) 5]\n        [(char=? #\\6 hex-char) 6]\n\
    \        [(char=? #\\7 hex-char) 7]\n        [(char=? #\\8 hex-char) 8]\n    \
    \    [(char=? #\\9 hex-char) 9]\n        [(char=? #\\a hex-char) 10]\n       \
    \ [(char=? #\\b hex-char) 11]\n        [(char=? #\\c hex-char) 12]\n        [(char=?\
    \ #\\d hex-char) 13]\n        [(char=? #\\e hex-char) 14]\n        [(char=? #\\\
    f hex-char) 15]\n        [else (error 'hex-char->byte \"invalid hex char\")]))\n\
    \    (define (hex-pair->byte hex-pair)\n      (let ([first (car hex-pair)]\n \
    \           [second (cadr hex-pair)])\n        (+ (* (hex-char->byte first) 16)\n\
    \           (hex-char->byte second))))\n    (map hex-pair->byte (partition 2 hex-string)))\n\
    \  (define (bytes->hex-string bytes)\n    (define (byte->hex-char byte)\n    \
    \  (cond\n        [(= byte 0) #\\0]\n        [(= byte 1) #\\1]\n        [(= byte\
    \ 2) #\\2]\n        [(= byte 3) #\\3]\n        [(= byte 4) #\\4]\n        [(=\
    \ byte 5) #\\5]\n        [(= byte 6) #\\6]\n        [(= byte 7) #\\7]\n      \
    \  [(= byte 8) #\\8]\n        [(= byte 9) #\\9]\n        [(", "  (if (string=?\
    \ text \"\")\n      #f\n      (md5 text)))\n", "  (if (string=? text \"\")\n \
    \     #f\n      (md5 (string->bytes/utf-8 text))))\n", "  (if (string=? text \"\
    \")\n      #f\n      (md5 text)))\n", "  (if (string=? text \"\")\n      #f\n\
    \      (hash-ref (md5 text) 'digest)))\n", "  (if (string=? text \"\")\n     \
    \ #f\n      (md5 (string->bytes/utf-8 text))))\n", "  (if (string=? text \"\"\
    )\n      #f\n      (hash-ref (md5 text) 'digest)))\n", "  (if (string=? text \"\
    \")\n      #f\n      (md5 (string->bytes/utf-8 text))))\n", "  (if (string=? text\
    \ \"\")\n      #f\n      (md5 (string->bytes/utf-8 text))))\n", "  (if (string=?\
    \ text \"\")\n      #f\n      (md5 text)))\n", "  (if (string=? text \"\")\n \
    \     #f\n      (hash-ref (md5 text) 'digest)))\n", "  (define (hex-string->bytes\
    \ hex-string)\n    (map (\u03BB (c) (string->number (string c) 16)) (string->list\
    \ hex-string)))\n  (define (bytes->hex-string bytes)\n    (list->string (map (\u03BB\
    \ (b) (number->string b 16)) bytes)))\n  (define (md5-hash text)\n    (bytes->hex-string\
    \ (md5 (string->bytes/utf-8 text))))\n  (if (string=? text \"\")\n      #f\n \
    \     (md5-hash text)))\n", "  (if (string=? text \"\")\n      #f\n      (md5\
    \ (string->bytes/utf-8 text))))\n", "  (cond\n    [(string=? text \"\") #f]\n\
    \    [else (hash-ref (md5 text) 'digest)]))\n", "  (if (string=? text \"\")\n\
    \      #f\n      (hash-ref (md5 text) 'digest)))\n", "  (if (string=? text \"\"\
    )\n      #f\n      (md5 text)))\n", "  (if (string=? text \"\")\n      #f\n  \
    \    (hash-ref (md5 text) 'digest)))\n", "  (define (hex-to-string hex)\n    (let\
    \ ([hex-string (number->string hex 16)])\n      (if (= (string-length hex-string)\
    \ 1)\n          (string-append \"0\" hex-string)\n          hex-string)))\n  (define\
    \ (hex-to-byte hex)\n    (string->number hex 16))\n  (define (byte-to-hex byte)\n\
    \    (hex-to-string byte))\n  (define (md5-to-string md5)\n    (string-append\
    \ (byte-to-hex (md5-byte-ref md5 0))\n                   (byte-to-hex (md5-byte-ref\
    \ md5 1))\n                   (byte-to-hex (md5-byte-ref md5 2))\n           \
    \        (byte-to-hex (md5-byte-ref md5 3))\n                   (byte-to-hex (md5-byte-ref\
    \ md5 4))\n                   (byte-to-hex (md5-byte-ref md5 5))\n           \
    \        (byte-to-hex (md5-byte-ref md5 6))\n                   (byte-to-hex (md5-byte-ref\
    \ md5 7))\n                   (byte-to-hex (md5-byte-ref md5 8))\n           \
    \        (byte-to-hex (md5-byte-ref md5 9))\n                   (byte-to-hex (md5-byte-ref\
    \ md5 10))\n                   (byte-to-hex (md5-byte-ref md5 11))\n         \
    \          (byte-to-hex (md5-byte-ref md5 12))\n                   (byte-to-hex\
    \ (md5-byte-ref md5 13))\n                   (byte-to-hex (md5-byte-ref md5 14))\n\
    \                   (byte-to-hex (md5-byte-ref md5 15))))\n  (define (string-to-md5-byte-array\
    \ text)\n    (let ([byte-array (make-bytes (* (string-length text) 2))])\n   \
    \   (for ([i (in-range (string-length text))])\n        (bytes-set! byte-array\
    \ (* i 2) (string-ref text i)))\n      byte-array))\n ", "  (if (string=? text\
    \ \"\")\n      #f\n      (hash-ref (md5 text) 'digest)))\n", "  (if (string=?\
    \ text \"\")\n      #f\n      (hash-ref (md5 text) 'digest)))\n", "  (if (string=?\
    \ text \"\")\n      #f\n      (hash-ref (md5 text) 'digest)))\n", "  (if (string=?\
    \ text \"\")\n      #f\n      (md5 text)))\n", "  (if (string=? text \"\")\n \
    \     #f\n      (md5 text)))\n", "  (cond\n    [(string=? text \"\") #f]\n   \
    \ [else (hash-ref (md5 text) 'digest)]))\n", "  (if (string=? text \"\")\n   \
    \   #f\n      (md5 text)))\n", "  (if (string=? text \"\")\n      #f\n      (md5\
    \ (string->bytes/utf-8 text))))\n", "  (if (string=? text \"\")\n      #f\n  \
    \    (md5 (string->bytes/utf-8 text))))\n", "  (if (string=? text \"\")\n    \
    \  #f\n      (md5 (string->bytes/utf-8 text))))\n", "  (if (string=? text \"\"\
    )\n      #f\n      (hash-ref (md5 text) 'digest)))\n", "  (if (string=? text \"\
    \")\n      #f\n      (hash-ref (md5 text) 'string)))\n", "  (if (string=? text\
    \ \"\")\n      #f\n      (md5 text)))\n", "  (define (hex-string->bytes hex-string)\n\
    \    (for/list ([hex-byte (in-string hex-string 2)]\n               #:when (not\
    \ (string=? hex-byte \"\")))\n      (string->number hex-byte 16)))\n  (define\
    \ (bytes->hex-string bytes)\n    (for/list ([byte bytes])\n      (number->string\
    \ byte 16 2)))\n  (define (md5-bytes->hex-string bytes)\n    (bytes->hex-string\
    \ (md5 bytes)))\n  (define (string->md5-hex-string text)\n    (md5-bytes->hex-string\
    \ (string->bytes/utf-8 text)))\n  (string->md5-hex-string text))\n", "  (cond\n\
    \    [(string=? text \"\") #f]\n    [else (hash-ref (md5 text) 'digest)]))\n",
  "  (if (string=? text \"\")\n      #f\n      (hash-ref (md5 text) 'digest)))\n",
  "  (if (string=? text \"\")\n      #f\n      (md5 (string->bytes/utf-8 text))))\n",
  "  (if (string=? text \"\")\n      #f\n      (hash-ref (md5 text) 'digest)))\n",
  "  (if (string=? text \"\")\n      #f\n      (md5 text)))\n", "  (if (eq? text \"\
    \")\n      #f\n      (hash-ref (md5 text) 'digest)))\n", "  (if (string=? text\
    \ \"\")\n      #f\n      (md5 text)))\n", "  (if (string=? text \"\")\n      #f\n\
    \      (md5 text)))\n", "  (if (string=? text \"\")\n      #f\n      (hash-ref\
    \ (md5 text) 'digest)))\n", "  (if (string=? text \"\")\n      #f\n      (hash-ref\
    \ (md5 text) 'digest)))\n", "  (if (string=? text \"\")\n      #f\n      (hash-ref\
    \ (string->bytes/utf-8 text) 'md5)))\n", "  (if (string=? text \"\")\n      #f\n\
    \      (md5 text)))\n", "  (if (string=? text \"\")\n      #f\n      (md5 (string->bytes/utf-8\
    \ text))))\n", "  (cond\n    [(string=? text \"\") #f]\n    [else (hash-ref (string->bytes/utf-8\
    \ text) 'md5)]))\n", "  (if (string=? text \"\")\n      #f\n      (md5 text)))\n",
  "  (if (string=? text \"\")\n      #f\n      (md5 text)))\n", "  (define (hex-string->bytes\
    \ hex-string)\n    (for/list ([hex-byte (in-string hex-string 2)]\n          \
    \     #:when (not (string=? hex-byte \"\")))\n      (string->number hex-byte 16)))\n\
    \  (define (bytes->hex-string bytes)\n    (for/list ([byte bytes])\n      (number->string\
    \ byte 16 2)))\n  (define (md5-hash text)\n    (define (md5-hash-bytes bytes)\n\
    \      (define (rotate-left n x)\n        (bitwise-arithmetic-shift x n))\n  \
    \    (define (f n k s i)\n        (cond\n          [(= n 0) (bitwise-and (bitwise-xor\
    \ (bitwise-and x y) (bitwise-and (bitwise-not x) z)) 4294967295)]\n          [(=\
    \ n 1) (bitwise-and (bitwise-xor (bitwise-and x z) (bitwise-and y (bitwise-not\
    \ z))) 4294967295)]\n          [(= n 2) (bitwise-and (bitwise-xor x y z) 4294967295)]\n\
    \          [(= n 3) (bitwise-and (bitwise-xor y (bitwise-or x (bitwise-not z)))\
    \ 4294967295)]))\n      (define (g n)\n        (cond\n          [(= n 0) (bitwise-and\
    \ 7 4278255360)]\n          [(= n 1) (bitwise-and 12 16515072)]\n          [(=\
    \ n 2) (bitwise-and 17 65535)]\n          [(= n 3) (bitwise-and 22 252645135)]))\n\
    \      (define (h n)\n        (cond\n          [(= n 0) (bitwise-and 5 32768)]\n\
    \          [(= n 1) (bitwise-and 9 8388608)]\n          [(= n 2) (bitwise-and\
    \ 14 16581375)]\n          [(= n 3) (bitwise-and 20 2415919104)]))\n      (define\
    \ (i n)\n        (cond\n          [(= n 0) (bitwise-and 4 128)]\n          [(=\
    \ n 1) (bit", "  (if (string=? text \"\")\n      #f\n      (md5 (string->bytes/utf-8\
    \ text))))\n", "  (if (string=? text \"\")\n      #f\n      (md5 (string->bytes/utf-8\
    \ text))))\n", "  (if (string=? text \"\")\n      #f\n      (md5 (string->bytes/utf-8\
    \ text))))\n", "  (if (string=? text \"\")\n      #f\n      (md5 text)))\n", " \
    \ (if (string=? text \"\")\n      #f\n      (hash-ref (md5 text) 'digest)))\n",
  "  (cond\n    [(string=? text \"\") #f]\n    [else (hash-ref (md5 text) 'digest)]))\n",
  "  (if (string=? text \"\")\n      #f\n      (md5 text)))\n", "  (if (string=? text\
    \ \"\")\n      #f\n      (hash-ref (md5 text) 'digest)))\n", "  (if (string=?\
    \ text \"\")\n      #f\n      (md5 (string->bytes/utf-8 text))))\n", "  (if (string=?\
    \ text \"\")\n      #f\n      (hash-ref (md5 text) 'digest)))\n", "  (if (string=?\
    \ text \"\")\n      #f\n      (md5 (string->bytes/utf-8 text))))\n", "  (cond\n\
    \    [(string=? text \"\")\n     #f]\n    [else\n     (hash-ref (md5 text) 'digest)]))\n",
  "  (if (string=? text \"\")\n      #f\n      (md5 (string->bytes/utf-8 text))))\n",
  "  (if (string=? text \"\")\n      #f\n      (hash-ref (md5 text) 'digest)))\n",
  "  (if (string=? text \"\")\n      'None\n      (md5 (string->bytes/utf-8 text))))\n",
  "  (if (string=? text \"\")\n      #f\n      (md5 (string->bytes/utf-8 text))))\n",
  "  (if (string=? text \"\")\n      #f\n      (hash-ref (md5 text) 'digest)))\n",
  "  (if (string=? text \"\")\n      #f\n      (md5 (string->bytes/utf-8 text))))\n",
  "  (if (string=? text \"\")\n      #f\n      (md5 (string->bytes/utf-8 text))))\n",
  "  (if (string=? text \"\")\n      #f\n      (md5 text)))\n", "  (if (string=? text\
    \ \"\")\n      #f\n      (md5 (string->bytes/utf-8 text))))\n", "  (if (string=?\
    \ text \"\")\n      #f\n      (md5 (string->bytes/utf-8 text))))\n", "  (if (string=?\
    \ text \"\")\n      #f\n      (hash-ref (md5 text) 'digest)))\n", "  (if (string=?\
    \ text \"\")\n      #f\n      (hash-ref (md5 text) 'digest)))\n", "  (if (string=?\
    \ text \"\")\n      #f\n      (hash-ref (md5 text) 'digest)))\n", "  (if (string=?\
    \ text \"\")\n      #f\n      (hash-ref (md5 text) 'digest)))\n", "  (if (string=?\
    \ text \"\")\n      #f\n      (md5 text)))\n", "  (if (string=? text \"\")\n \
    \     #f\n      (hash-ref (md5 text) 'digest)))\n", "  (if (string=? text \"\"\
    )\n      #f\n      (md5 (string->bytes/utf-8 text))))\n", "  (if (string=? text\
    \ \"\")\n      #f\n      (md5 (string->bytes/utf-8 text))))\n", "  (if (string=?\
    \ text \"\")\n      #f\n      (hash-ref (string->bytes/utf-8 text) 'md5)))\n",
  "  (if (string=? text \"\")\n      #f\n      (md5 (string->bytes/utf-8 text))))\n",
  "  (if (string=? text \"\")\n      #f\n      (hash-ref (md5 text) 'digest)))\n",
  "  (if (string=? text \"\")\n      #f\n      (bytes->hex-string (md5 (string->bytes/utf-8\
    \ text)))))\n", "  (if (string=? text \"\")\n      #f\n      (md5 (string->bytes/utf-8\
    \ text))))\n", "  (if (string=? text \"\")\n      #f\n      (md5 (string->bytes/utf-8\
    \ text))))\n", "  (if (string=? text \"\")\n      #f\n      (hash-ref (md5 text)\
    \ 'digest)))\n", "  (if (string=? text \"\")\n      #f\n      (md5 text)))\n",
  "  (if (string=? text \"\")\n      #f\n      (hash-ref (md5 text) 'digest)))\n",
  "  (define (string-to-md5-helper text)\n    (define (hex-to-md5-helper hex)\n  \
    \    (cond\n        [(string=? hex \"\") \"\"]\n        [(string=? hex \"0\")\
    \ \"0\"]\n        [(string=? hex \"1\") \"1\"]\n        [(string=? hex \"2\")\
    \ \"2\"]\n        [(string=? hex \"3\") \"3\"]\n        [(string=? hex \"4\")\
    \ \"4\"]\n        [(string=? hex \"5\") \"5\"]\n        [(string=? hex \"6\")\
    \ \"6\"]\n        [(string=? hex \"7\") \"7\"]\n        [(string=? hex \"8\")\
    \ \"8\"]\n        [(string=? hex \"9\") \"9\"]\n        [(string=? hex \"a\")\
    \ \"a\"]\n        [(string=? hex \"b\") \"b\"]\n        [(string=? hex \"c\")\
    \ \"c\"]\n        [(string=? hex \"d\") \"d\"]\n        [(string=? hex \"e\")\
    \ \"e\"]\n        [(string=? hex \"f\") \"f\"]\n        [else \"\"]))\n    (cond\n\
    \      [(string=? text \"\") \"\"]\n      [else (string-append (hex-to-md5-helper\
    \ (substring text 0 1))\n                           (string-to-md5-helper (substring\
    \ text 1)))]))\n  (string-to-md5-helper (md5 text)))\n", "  (if (string=? text\
    \ \"\")\n      #f\n      (md5 (string->bytes/utf-8 text))))\n", "  (if (string=?\
    \ text \"\")\n      #f\n      (hash-ref (md5 text) 'digest)))\n", "  (if (string=?\
    \ text \"\")\n      #f\n      (md5 (string->bytes/utf-8 text))))\n", "  (if (string=?\
    \ text \"\")\n      #f\n      (md5 text)))\n", "  (define (hex-string->bytes hex-string)\n\
    \    (map (lambda (hex-char) (string->number (string hex-char) 16))\n        \
    \ (string-&gt;list hex-string)))\n  (define (bytes->hex-string bytes)\n    (list-&gt;string\
    \ (map (lambda (byte) (number-&gt;string byte 16)) bytes)))\n  (define (md5-bytes-&gt;hex-string\
    \ bytes)\n    (bytes->hex-string (md5 bytes)))\n  (define (string-&gt;md5-hex-string\
    \ text)\n    (md5-bytes-&gt;hex-string (string-&gt;bytes/utf-8 text)))\n  (string-&gt;md5-hex-string\
    \ text))\n", "  (if (string=? text \"\")\n      #f\n      (bytes->string/utf-8\
    \ (md5 (string->bytes/utf-8 text)))))\n", "  (if (string=? text \"\")\n      #f\n\
    \      (md5 text)))\n", "  (if (string=? text \"\")\n      #f\n      (hash-ref\
    \ (md5 text) 'digest)))\n", "  (if (string=? text \"\")\n      #f\n      (md5\
    \ text)))\n", "  (if (string=? text \"\")\n      #f\n      (md5 text)))\n", " \
    \ (define (md5-bytes bytes)\n    (define (hex-string->bytes hex-string)\n    \
    \  (map (lambda (c) (string->number (string c) 16)) (string->list hex-string)))\n\
    \    (define (bytes->hex-string bytes)\n      (list->string (map (lambda (b) (number->string\
    \ b 16)) bytes)))\n    (define (md5-bytes-iter bytes)\n      (let* ([a (bytes-ref\
    \ bytes 0)]\n             [b (bytes-ref bytes 1)]\n             [c (bytes-ref\
    \ bytes 2)]\n             [d (bytes-ref bytes 3)]\n             [a-prime (modulo\
    \ (+ a (bytes-ref bytes 12)) 256)]\n             [b-prime (modulo (+ b (bytes-ref\
    \ bytes 13)) 256)]\n             [c-prime (modulo (+ c (bytes-ref bytes 14)) 256)]\n\
    \             [d-prime (modulo (+ d (bytes-ref bytes 15)) 256)])\n        (bytes->hex-string\
    \ (list a-prime b-prime c-prime d-prime))))\n    (md5-bytes-iter (hex-string->bytes\
    \ (md5 bytes))))\n  (if (string=? text \"\")\n      #f\n      (md5-bytes (string->bytes/utf-8\
    \ text))))\n", "  (if (string=? text \"\")\n      #f\n      (md5 (string->bytes/utf-8\
    \ text))))\n", "  (if (string=? text \"\")\n      #f\n      (hash-ref (md5 text)\
    \ 'digest)))\n", "  (if (string=? text \"\")\n      #f\n      (md5 (string->bytes/utf-8\
    \ text))))\n", "  (if (string=? text \"\")\n      #f\n      (md5 text)))\n", " \
    \ (cond ((string=? text \"\") #f)\n        (else (md5 text))))\n", "  (if (string=?\
    \ text \"\")\n      #f\n      (md5 text)))\n", "  (define (hex-string->bytes hex-string)\n\
    \    (for/list ([hex-char (in-string hex-string)])\n      (string->number (string\
    \ hex-char) 16)))\n  (define (bytes->hex-string bytes)\n    (for/list ([byte bytes])\n\
    \      (number->string byte 16)))\n  (define (md5-hash text)\n    (define (md5-hash-bytes\
    \ bytes)\n      (define (md5-hash-bytes-iter bytes)\n        (define (md5-hash-bytes-iter-iter\
    \ bytes)\n          (define (md5-hash-bytes-iter-iter-iter bytes)\n          \
    \  (define (md5-hash-bytes-iter-iter-iter-iter bytes)\n              (define (md5-hash-bytes-iter-iter-iter-iter-iter\
    \ bytes)\n                (define (md5-hash-bytes-iter-iter-iter-iter-iter-iter\
    \ bytes)\n                  (define (md5-hash-bytes-iter-iter-iter-iter-iter-iter-iter\
    \ bytes)\n                    (define (md5-hash-bytes-iter-iter-iter-iter-iter-iter-iter-iter\
    \ bytes)\n                      (define (md5-hash-bytes-iter-iter-iter-iter-iter-iter-iter-iter-iter\
    \ bytes)\n                        (define (md5-hash-bytes-iter-iter-iter-iter-iter-iter-iter-iter-iter-iter\
    \ bytes)\n                          (define (md5-hash-bytes-iter-iter-iter-iter-iter-iter-iter-iter-iter-iter-iter\
    \ bytes)\n                            (define (md5-hash-bytes-iter-iter-iter-iter-iter-iter-iter-iter-iter-iter-iter-iter\
    \ bytes)\n                              (define (md5-hash-bytes-iter-iter-iter-iter-iter-iter-iter-iter-iter-iter-iter-iter-iter\
    \ bytes)\n                                (define (md5-hash-bytes-iter-iter-iter-iter-iter-iter-iter-iter-iter-iter-iter-iter-iter-iter\
    \ bytes)\n                                  (define (md5-hash-bytes-iter", " \
    \ (if (string=? text \"\")\n      #f\n      (md5 text)))\n", "  (if (string=?\
    \ text \"\")\n      #f\n      (hash-ref (md5 text) 'digest)))\n", "  (if (string=?\
    \ text \"\")\n      #f\n      (md5 (string->bytes/utf-8 text))))\n", "  (if (string=?\
    \ text \"\")\n      #f\n      (md5 text)))\n", "  (if (string=? text \"\")\n \
    \     #f\n      (md5 (string->bytes/utf-8 text))))\n", "  (if (string=? text \"\
    \")\n      #f\n      (md5 (string->bytes/utf-8 text))))\n", "  (if (string=? text\
    \ \"\")\n      #f\n      (md5 (string->bytes/utf-8 text))))\n", "  (if (string=?\
    \ text \"\")\n      #f\n      (hash-ref (md5 text) 'digest)))\n", "  (cond\n \
    \   [(string=? text \"\") #f]\n    [else (hash-ref (md5 text) 'digest)]))\n",
  "  (if (string=? text \"\")\n      #f\n      (hash-ref (md5 text) 'digest)))\n",
  "  (if (string=? text \"\")\n      #f\n      (md5 (string->bytes/utf-8 text))))\n",
  "  (if (string=? text \"\")\n      #f\n      (md5 (string->bytes/utf-8 text))))\n",
  "  (if (string=? text \"\")\n      #f\n      (md5 (string->bytes/utf-8 text))))\n",
  "  (cond\n    [(string=? text \"\") #f]\n    [else (hash-ref (md5 text) 'digest)]))\n",
  "  (if (string=? text \"\")\n      #f\n      (hash-ref (md5 text) 'digest)))\n",
  "  (if (string=? text \"\")\n      #f\n      (hash-ref (md5 text) 'digest)))\n",
  "  (if (string=? text \"\")\n      #f\n      (md5 text)))\n", "  (if (string=? text\
    \ \"\")\n      #f\n      (hash-ref (md5 text) 'digest)))\n", "  (if (string=?\
    \ text \"\")\n      #f\n      (hash-ref (md5 (string->bytes/utf-8 text)) 'digest)))\n",
  "  (if (string=? text \"\")\n      #f\n      (hash-ref (md5 text) 'digest)))\n",
  "  (if (string=? text \"\")\n      #f\n      (md5 (string->bytes/utf-8 text))))\n",
  "  (cond\n    [(string=? text \"\") #f]\n    [else (md5 text)]))\n", "  (if (string=?\
    \ text \"\")\n      #f\n      (md5 text)))\n", "  (if (string=? text \"\")\n \
    \     #f\n      (md5 text)))\n", "  (if (string=? text \"\")\n      #f\n     \
    \ (hash-ref (md5 text) 'digest)))\n", "  (if (string=? text \"\")\n      #f\n\
    \      (md5 (string->bytes/utf-8 text))))\n", "  (cond\n    [(string=? text \"\
    \") #f]\n    [else (md5 text)]))\n", "  (cond\n    [(string=? text \"\") #f]\n\
    \    [else (md5 text)]))\n", "  (if (equal? text \"\")\n      #f\n      (md5 (string->bytes/utf-8\
    \ text))))\n", "  (if (string=? text \"\")\n      #f\n      (hash-ref (md5 text)\
    \ 'digest)))\n", "  (if (string=? text \"\")\n      #f\n      (hash-ref (md5 text)\
    \ 'digest)))\n", "  (if (string=? text \"\")\n      #f\n      (md5 (string->bytes/utf-8\
    \ text))))\n", "  (if (string=? text \"\")\n      #f\n      (hash-ref (md5 text)\
    \ 'digest)))\n", "  (cond\n    [(string=? text \"\") #f]\n    [else (hash-ref\
    \ (md5 text) 'digest)]))\n", "  (if (string=? text \"\")\n      #f\n      (md5\
    \ (string->bytes/utf-8 text))))\n", "  (if (string=? text \"\")\n      #f\n  \
    \    (hash-ref (md5 text) 'digest)))\n", "  (if (string=? text \"\")\n      #f\n\
    \      (md5 text)))\n", "  (if (string=? text \"\")\n      #f\n      (hash-ref\
    \ (md5 text) 'digest)))\n", "  (if (string=? text \"\")\n      #f\n      (md5\
    \ (string->bytes/utf-8 text))))\n", "  (if (string=? text \"\")\n      #f\n  \
    \    (hash-ref (md5 text) 'digest)))\n", "  (if (string=? text \"\")\n      #f\n\
    \      (hash-ref (md5 text) 'digest)))\n", "  (if (string=? text \"\")\n     \
    \ #f\n      (hash-ref (md5 text) 'digest)))\n", "  (if (string=? text \"\")\n\
    \      #f\n      (md5 (string->bytes/utf-8 text))))\n", "  (if (string=? text\
    \ \"\")\n      #f\n      (hash-ref (md5 text) 'digest)))\n", "  (cond\n    [(empty?\
    \ text) #f]\n    [else (hash-ref (md5 text) 'digest)]))\n", "  (if (string=? text\
    \ \"\")\n      #f\n      (md5 (string->bytes/utf-8 text))))\n", "  (if (string=?\
    \ text \"\")\n      #f\n      (hash-ref (md5 text) 'digest)))\n", "  (if (string=?\
    \ text \"\")\n      #f\n      (hash-ref (md5 text) 'digest)))\n", "  (if (string=?\
    \ text \"\")\n      #f\n      (md5 text)))\n", "  (if (string=? text \"\")\n \
    \     #f\n      (hash-ref (md5 text) 'digest)))\n", "  (if (string=? text \"\"\
    )\n      #f\n      (hash-ref (md5 text) 'digest)))\n", "  (define (md5-bytes bytes)\n\
    \    (define (md5-bytes-iter bytes)\n      (define (md5-bytes-iter-iter bytes)\n\
    \        (define (md5-bytes-iter-iter-iter bytes)\n          (define (md5-bytes-iter-iter-iter-iter\
    \ bytes)\n            (define (md5-bytes-iter-iter-iter-iter-iter bytes)\n   \
    \           (define (md5-bytes-iter-iter-iter-iter-iter-iter bytes)\n        \
    \        (define (md5-bytes-iter-iter-iter-iter-iter-iter-iter bytes)\n      \
    \            (define (md5-bytes-iter-iter-iter-iter-iter-iter-iter-iter bytes)\n\
    \                    (define (md5-bytes-iter-iter-iter-iter-iter-iter-iter-iter-iter\
    \ bytes)\n                      (define (md5-bytes-iter-iter-iter-iter-iter-iter-iter-iter-iter-iter\
    \ bytes)\n                        (define (md5-bytes-iter-iter-iter-iter-iter-iter-iter-iter-iter-iter-iter\
    \ bytes)\n                          (define (md5-bytes-iter-iter-iter-iter-iter-iter-iter-iter-iter-iter-iter-iter\
    \ bytes)\n                            (define (md5-bytes-iter-iter-iter-iter-iter-iter-iter-iter-iter-iter-iter-iter-iter\
    \ bytes)\n                              (define (md5-bytes-iter-iter-iter-iter-iter-iter-iter-iter-iter-iter-iter-iter-iter-iter\
    \ bytes)\n                                (define (md5-bytes-iter-iter-iter-iter-iter-iter-iter-iter-iter-iter-iter-iter-iter-iter-iter\
    \ bytes)\n                                  (define (md5-bytes-iter-iter-iter-iter-iter-iter-iter-iter-iter-iter-iter-iter-iter-iter-iter-iter\
    \ bytes)\n                                    (define (md5-bytes-iter-iter-iter-iter-iter-iter-iter-iter-iter-iter-iter-iter-iter-iter-iter-iter-iter\
    \ bytes)\n                ", "  (if (string=? text \"\")\n      #f\n      (md5\
    \ text)))\n", "  (if (string=? text \"\")\n      #f\n      (md5 text)))\n", " \
    \ (if (string=? text \"\")\n      #f\n      (md5 (string->bytes/utf-8 text))))\n",
  "  (if (string=? text \"\")\n      #f\n      (md5 text)))\n", "  (cond\n    [(string=?\
    \ text \"\") #f]\n    [else (hash-ref (md5 text) 'digest)]))\n", "  (if (string=?\
    \ text \"\")\n      #f\n      (md5 text)))\n"]
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
