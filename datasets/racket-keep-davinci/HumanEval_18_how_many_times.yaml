name: HumanEval_18_how_many_times
language: racket
prompt: "#lang racket\n\n;; Find how many times a given substring can be found in\
  \ the original string. Count overlaping cases.\n;; >>> how_many_times('', 'a')\n\
  ;; 0\n;; >>> how_many_times('aaa', 'a')\n;; 3\n;; >>> how_many_times('aaaa', 'aa')\n\
  ;; 3\n(define (how_many_times string substring)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate how_many_times))\n\
  \    (check-equal? (candidate \"\" \"x\") 0)\n    (check-equal? (candidate \"xyxyxyx\"\
  \ \"x\") 4)\n    (check-equal? (candidate \"cacacacac\" \"cac\") 4)\n    (check-equal?\
  \ (candidate \"john doe\" \"john\") 1)\n))\n\n(test-humaneval)"
completions: ["  (define (how_many_times-iter string substring count)\n    (cond\n\
    \      [(empty? string) count]\n      [(empty? substring) count]\n      [(string=?\
    \ (substring string 0 (string-length substring)) substring)\n       (how_many_times-iter\
    \ (substring string 1) substring (+ count 1))]\n      [else (how_many_times-iter\
    \ (substring string 1) substring count)]))\n  (how_many_times-iter string substring\
    \ 0))\n", "  (cond\n    [(empty? string) 0]\n    [(empty? substring) 0]\n    [(string=?\
    \ (substring string 0 (string-length substring)) substring)\n     (+ 1 (how_many_times\
    \ (substring string 1) substring))]\n    [else (how_many_times (substring string\
    \ 1) substring)]))\n", "  (if (string-contains string substring)\n      (+ 1 (how_many_times\
    \ (substring string (+ 1 (string-index substring string))) substring))\n     \
    \ 0))\n", "  (define (how_many_times-iter string substring count)\n    (cond ((string-contains\
    \ string substring)\n           (how_many_times-iter (substring string 1) substring\
    \ (+ count 1)))\n          (else count)))\n  (how_many_times-iter string substring\
    \ 0))\n", "  (if (string-contains string substring)\n      (+ 1 (how_many_times\
    \ (substring string 1) substring))\n      0))\n", "  (if (string-contains string\
    \ substring)\n      (+ 1 (how_many_times (substring string (+ 1 (string-index\
    \ substring string))) substring))\n      0))\n", "  (if (string-contains string\
    \ substring)\n      (+ 1 (how_many_times (substring string (+ 1 (string-index\
    \ substring string))) substring))\n      0))\n", "  (define (count-substring string\
    \ substring)\n    (if (string-contains string substring)\n        (+ 1 (count-substring\
    \ (substring string (+ 1 (string-index string substring))) substring))\n     \
    \   0))\n  (count-substring string substring))\n", "  (define (how_many_times_iter\
    \ string substring count)\n    (cond\n      [(empty? string) count]\n      [(empty?\
    \ substring) count]\n      [(string=? (substring string 0 (string-length substring))\
    \ substring)\n       (how_many_times_iter (substring string 1) substring (+ count\
    \ 1))]\n      [else (how_many_times_iter (substring string 1) substring count)]))\n\
    \  (how_many_times_iter string substring 0))\n", "  (define (how_many_times-iter\
    \ string substring count)\n    (cond\n      [(empty? string) count]\n      [(empty?\
    \ substring) count]\n      [(equal? (first string) (first substring))\n      \
    \ (how_many_times-iter (rest string) (rest substring) (+ count 1))]\n      [else\
    \ (how_many_times-iter (rest string) substring count)]))\n  (how_many_times-iter\
    \ string substring 0))\n", "  (define (count-substring string substring count)\n\
    \    (cond\n      [(empty? string) count]\n      [(substring=? (substring string\
    \ 0 (string-length substring)) substring)\n       (count-substring (substring\
    \ string 1) substring (+ count 1))]\n      [else (count-substring (substring string\
    \ 1) substring count)]))\n  (count-substring string substring 0))\n", "  (define\
    \ (count-substring string substring)\n    (cond\n      [(empty? string) 0]\n \
    \     [(empty? substring) 0]\n      [(equal? (first string) (first substring))\n\
    \       (+ 1 (count-substring (rest string) (rest substring)))]\n      [else (count-substring\
    \ (rest string) substring)]))\n  (count-substring string substring))\n", "  (cond\n\
    \    [(empty? string) 0]\n    [(empty? substring) 0]\n    [(string=? (substring\
    \ string 0 (string-length substring)) substring)\n     (+ 1 (how_many_times (substring\
    \ string 1) substring))]\n    [else (how_many_times (substring string 1) substring)]))\n",
  "  (if (string-contains string substring)\n      (+ 1 (how_many_times (substring\
    \ string (+ 1 (string-index substring string))) substring))\n      0))\n", " \
    \ (cond\n    [(empty? string) 0]\n    [(empty? substring) 0]\n    [(string=? string\
    \ substring) 1]\n    [else\n     (+ (if (string-contains string substring) 1 0)\n\
    \        (how_many_times (substring string 1) substring))]))\n", "  (define (how_many_times-iter\
    \ string substring count)\n    (cond ((string-empty? string) count)\n        \
    \  ((string-prefix? substring string) (how_many_times-iter (substring string (string-length\
    \ substring)) substring (+ count 1)))\n          (else (how_many_times-iter (substring\
    \ string 1) substring count))))\n  (how_many_times-iter string substring 0))\n",
  "  (if (string-contains string substring)\n      (+ 1 (how_many_times (substring\
    \ string (+ 1 (string-index substring string))) substring))\n      0))\n", " \
    \ (if (string-contains string substring)\n      (+ 1 (how_many_times (substring\
    \ string (+ 1 (string-index substring string))) substring))\n      0))\n", " \
    \ (define (how_many_times-iter string substring count)\n    (if (string-contains\
    \ string substring)\n        (how_many_times-iter (substring string (+ 1 (string-index\
    \ string substring))) substring (+ 1 count))\n        count))\n  (how_many_times-iter\
    \ string substring 0))\n", "  (if (string-contains string substring)\n      (+\
    \ 1 (how_many_times (substring string (+ 1 (string-index substring string))) substring))\n\
    \      0))\n", "  (define (count-substring string substring)\n    (define (count-substring-iter\
    \ string substring count)\n      (cond ((string-length string) count)\n      \
    \      ((string-contains string substring) (count-substring-iter (substring string\
    \ 1) substring (+ count 1)))\n            (else count)))\n    (count-substring-iter\
    \ string substring 0))\n  (count-substring string substring))\n", "  (if (string-contains\
    \ string substring)\n      (+ 1 (how_many_times (substring string (+ 1 (string-index\
    \ substring string))) substring))\n      0))\n", "  (define (how_many_times-iter\
    \ string substring count)\n    (cond\n      [(empty? string) count]\n      [(string-contains\
    \ string substring) (how_many_times-iter (substring string 1) substring (+ count\
    \ 1))]\n      [else (how_many_times-iter (substring string 1) substring count)]))\n\
    \  (how_many_times-iter string substring 0))\n", "  (if (string-contains string\
    \ substring)\n      (+ 1 (how_many_times (substring string (+ 1 (string-index\
    \ substring string))) substring))\n      0))\n", "  (if (string-contains string\
    \ substring)\n      (+ 1 (how_many_times (substring string (string-index string\
    \ substring) (string-length string)) substring))\n      0))\n", "  (if (string-contains\
    \ string substring)\n      (+ 1 (how_many_times (substring string (+ 1 (string-index\
    \ substring string))) substring))\n      0))\n", "  (define (count-substring string\
    \ substring)\n    (cond ((string=? string \"\") 0)\n          ((string=? (substring\
    \ string 0 (string-length substring)) substring)\n           (+ 1 (count-substring\
    \ (substring string 1) substring)))\n          (else (count-substring (substring\
    \ string 1) substring))))\n  (count-substring string substring))\n", "  (define\
    \ (how_many_times-iter string substring count)\n    (if (string-contains string\
    \ substring)\n        (how_many_times-iter (string-drop string 1) substring (+\
    \ count 1))\n        count))\n  (how_many_times-iter string substring 0))\n",
  "  (if (string-contains string substring)\n      (+ 1 (how_many_times (substring\
    \ string (+ 1 (string-index substring string))) substring))\n      0))\n", " \
    \ (if (string-contains string substring)\n      (+ 1 (how_many_times (substring\
    \ string (+ 1 (string-index substring string))) substring))\n      0))\n", " \
    \ (define (how_many_times-iter string substring count)\n    (if (string-contains\
    \ string substring)\n        (how_many_times-iter (substring string 1) substring\
    \ (+ count 1))\n        count))\n  (how_many_times-iter string substring 0))\n",
  "  (define (how_many_times-iter string substring count)\n    (cond\n      [(empty?\
    \ string) count]\n      [(string-contains string substring) (how_many_times-iter\
    \ (substring string 1) substring (+ count 1))]\n      [else (how_many_times-iter\
    \ (substring string 1) substring count)]))\n  (how_many_times-iter string substring\
    \ 0))\n", "  (define (count-substring string substring)\n    (define (count-substring-helper\
    \ string substring count)\n      (cond ((string-length string) count)\n      \
    \      ((string-contains string substring)\n             (count-substring-helper\
    \ (substring string 1) substring (+ count 1)))\n            (else count)))\n \
    \   (count-substring-helper string substring 0))\n  (count-substring string substring))\n",
  "  (define (count-substring string substring)\n    (cond ((string=? substring \"\
    \") 0)\n          ((string=? string \"\") 0)\n          ((string-contains string\
    \ substring) (+ 1 (count-substring (substring string 1) substring)))\n       \
    \   (else 0)))\n  (count-substring string substring))\n", "  (let loop ([string\
    \ string] [substring substring] [count 0])\n    (cond [(empty? string) count]\n\
    \          [(empty? substring) count]\n          [(equal? (first string) (first\
    \ substring))\n           (loop (rest string) (rest substring) (+ count 1))]\n\
    \          [else (loop (rest string) substring count)])))\n", "  (define (count-substring\
    \ string substring)\n    (if (empty? string)\n        0\n        (if (string-contains\
    \ string substring)\n            (+ 1 (count-substring (substring string 1) substring))\n\
    \            (count-substring (substring string 1) substring))))\n  (count-substring\
    \ string substring))\n", "  (define (how_many_times-iter string substring count)\n\
    \    (cond\n      [(empty? string) count]\n      [(empty? substring) count]\n\
    \      [(string=? (substring string 0 (string-length substring)) substring)\n\
    \       (how_many_times-iter (substring string 1) substring (+ count 1))]\n  \
    \    [else (how_many_times-iter (substring string 1) substring count)]))\n  (how_many_times-iter\
    \ string substring 0))\n", "  (define (how_many_times-iter string substring count)\n\
    \    (cond\n      [(empty? string) count]\n      [(string-contains string substring)\
    \ (how_many_times-iter (string-drop string 1) substring (+ count 1))]\n      [else\
    \ (how_many_times-iter (string-drop string 1) substring count)]))\n  (how_many_times-iter\
    \ string substring 0))\n", "  (if (string-contains string substring)\n      (+\
    \ 1 (how_many_times (substring string (+ 1 (string-index substring string))) substring))\n\
    \      0))\n", "  (define (how_many_times-iter string substring count)\n    (if\
    \ (string-contains string substring)\n        (how_many_times-iter (string-replace\
    \ string substring \"\") substring (+ count 1))\n        count))\n  (how_many_times-iter\
    \ string substring 0))\n", "  (define (how_many_times-iter string substring count)\n\
    \    (cond\n      [(empty? string) count]\n      [(string-contains string substring)\n\
    \       (how_many_times-iter (substring string 1) substring (+ count 1))]\n  \
    \    [else (how_many_times-iter (substring string 1) substring count)]))\n  (how_many_times-iter\
    \ string substring 0))\n", "  (define (count-substring string substring)\n   \
    \ (cond ((string=? string \"\") 0)\n          ((string=? (substring string 0 (string-length\
    \ substring)) substring)\n           (+ 1 (count-substring (substring string 1)\
    \ substring)))\n          (else (count-substring (substring string 1) substring))))\n\
    \  (count-substring string substring))\n", "  (if (string-contains string substring)\n\
    \      (+ 1 (how_many_times (substring string (string-index string substring)\
    \ (string-length string)) substring))\n      0))\n", "  (define (how_many_times-iter\
    \ string substring count)\n    (if (string-contains string substring)\n      \
    \  (how_many_times-iter (substring string (+ 1 (string-index string substring)))\
    \ substring (+ 1 count))\n        count))\n  (how_many_times-iter string substring\
    \ 0))\n", "  (if (string-contains string substring)\n      (+ 1 (how_many_times\
    \ (substring string (+ 1 (string-length substring))) substring))\n      0))\n",
  "  (define (count-substring string substring)\n    (if (string-contains string substring)\n\
    \        (+ 1 (count-substring (substring string 1) substring))\n        0))\n\
    \  (count-substring string substring))\n", "  (if (string-contains string substring)\n\
    \      (+ 1 (how_many_times (substring string (string-index string substring)\
    \ (string-length string)) substring))\n      0))\n", "  (define (count-substring\
    \ string substring)\n    (if (string-contains string substring)\n        (+ 1\
    \ (count-substring (substring string (+ 1 (string-index string substring))) substring))\n\
    \        0))\n  (count-substring string substring))\n", "  (if (string-contains\
    \ string substring)\n      (+ 1 (how_many_times (substring string (+ 1 (string-index\
    \ substring string))) substring))\n      0))\n", "  (define (how_many_times-iter\
    \ string substring count)\n    (if (string-contains string substring)\n      \
    \  (how_many_times-iter (string-drop string 1) substring (+ count 1))\n      \
    \  count))\n  (how_many_times-iter string substring 0))\n", "  (define (how_many_times-iter\
    \ string substring count)\n    (if (string-contains string substring)\n      \
    \  (how_many_times-iter (string-drop string 1) substring (+ count 1))\n      \
    \  count))\n  (how_many_times-iter string substring 0))\n", "  (define (how_many_times-iter\
    \ string substring count)\n    (cond ((string-length string) count)\n        \
    \  ((string-contains string substring) (how_many_times-iter (substring string\
    \ 1) substring (+ count 1)))\n          (else count)))\n  (how_many_times-iter\
    \ string substring 0))\n", "  (define (how_many_times-iter string substring count)\n\
    \    (if (string-contains string substring)\n        (how_many_times-iter (substring\
    \ string (+ 1 (string-index string substring))) substring (+ 1 count))\n     \
    \   count))\n  (how_many_times-iter string substring 0))\n", "  (define (how_many_times-iter\
    \ string substring count)\n    (if (string-contains string substring)\n      \
    \  (how_many_times-iter (string-drop string 1) substring (+ count 1))\n      \
    \  count))\n  (how_many_times-iter string substring 0))\n", "  (define (helper\
    \ string substring count)\n    (if (string-contains string substring)\n      \
    \  (helper (substring string (+ 1 (string-index string substring))) substring\
    \ (+ 1 count))\n        count))\n  (helper string substring 0))\n", "  (define\
    \ (helper string substring count)\n    (if (string-contains string substring)\n\
    \        (helper (substring string (+ 1 (string-index string substring))) substring\
    \ (+ 1 count))\n        count))\n  (helper string substring 0))\n", "  (if (string-contains\
    \ string substring)\n      (+ 1 (how_many_times (substring string (+ 1 (string-index\
    \ substring string))) substring))\n      0))\n", "  (define (how_many_times-iter\
    \ string substring count)\n    (cond\n      [(empty? string) count]\n      [(empty?\
    \ substring) count]\n      [(string=? (substring string 0 (string-length substring))\
    \ substring)\n       (how_many_times-iter (substring string 1) substring (+ count\
    \ 1))]\n      [else (how_many_times-iter (substring string 1) substring count)]))\n\
    \  (how_many_times-iter string substring 0))\n", "  (define (how_many_times-iter\
    \ string substring count)\n    (if (string-contains string substring)\n      \
    \  (how_many_times-iter (string-drop string 1) substring (+ count 1))\n      \
    \  count))\n  (how_many_times-iter string substring 0))\n", "  (if (string-contains\
    \ string substring)\n      (+ 1 (how_many_times (substring string (string-index\
    \ string substring) (string-length string)) substring))\n      0))\n", "  (define\
    \ (count-substring string substring)\n    (cond\n      [(empty? string) 0]\n \
    \     [(empty? substring) 0]\n      [(equal? (first string) (first substring))\n\
    \       (+ 1 (count-substring (rest string) (rest substring)))]\n      [else (count-substring\
    \ (rest string) substring)]))\n  (cond\n    [(empty? string) 0]\n    [(empty?\
    \ substring) 0]\n    [else (+ (count-substring string substring)\n           \
    \  (how_many_times (rest string) substring))]))\n", "  (define (how_many_times-iter\
    \ string substring count)\n    (cond\n      [(empty? string) count]\n      [(string-contains\
    \ string substring) (how_many_times-iter (string-drop string 1) substring (+ count\
    \ 1))]\n      [else (how_many_times-iter (string-drop string 1) substring count)]))\n\
    \  (how_many_times-iter string substring 0))\n", "  (if (string-contains string\
    \ substring)\n      (+ 1 (how_many_times (substring string (+ 1 (string-index\
    \ substring string))) substring))\n      0))\n", "  (define (how_many_times-iter\
    \ string substring count)\n    (if (string-contains string substring)\n      \
    \  (how_many_times-iter (substring string 1) substring (+ count 1))\n        count))\n\
    \  (how_many_times-iter string substring 0))\n", "  (define (count-substring string\
    \ substring)\n    (if (string-contains string substring)\n        (+ 1 (count-substring\
    \ (substring string (+ 1 (string-index string substring))) substring))\n     \
    \   0))\n  (count-substring string substring))\n", "  (define (how_many_times-iter\
    \ string substring count)\n    (cond ((string-contains string substring)\n   \
    \        (how_many_times-iter (string-drop-right string 1) substring (+ count\
    \ 1)))\n          (else count)))\n  (how_many_times-iter string substring 0))\n",
  "  (if (empty? string)\n      0\n      (if (string-contains string substring)\n\
    \          (+ 1 (how_many_times (substring string 1) substring))\n          0)))\n",
  "  (define (how_many_times-iter string substring count)\n    (if (string-contains\
    \ string substring)\n        (how_many_times-iter (string-drop string 1) substring\
    \ (+ count 1))\n        count))\n  (how_many_times-iter string substring 0))\n",
  "  (define (count-substring string substring)\n    (cond ((string=? string \"\"\
    ) 0)\n          ((string=? (substring string 0 (string-length substring)) substring)\
    \ (+ 1 (count-substring (substring string 1) substring)))\n          (else (count-substring\
    \ (substring string 1) substring))))\n  (count-substring string substring))\n",
  "  (define (how_many_times-iter string substring count)\n    (if (string-contains\
    \ string substring)\n        (how_many_times-iter (substring string (+ 1 (string-index\
    \ string substring))) substring (+ 1 count))\n        count))\n  (how_many_times-iter\
    \ string substring 0))\n", "  (if (string-contains string substring)\n      (+\
    \ 1 (how_many_times (substring string (+ 1 (string-index substring string))) substring))\n\
    \      0))\n", "  (define (how_many_times-iter string substring count)\n    (cond\
    \ ((string-length string) 0)\n          ((string-contains substring string) (how_many_times-iter\
    \ (substring string 1) substring (+ count 1)))\n          (else count)))\n  (how_many_times-iter\
    \ string substring 0))\n", "  (define (how_many_times-iter string substring count)\n\
    \    (cond\n      [(empty? string) count]\n      [(empty? substring) count]\n\
    \      [(and (string=? (first string) (first substring))\n            (string=?\
    \ (rest string) (rest substring)))\n       (how_many_times-iter (rest string)\
    \ substring (+ count 1))]\n      [else (how_many_times-iter (rest string) substring\
    \ count)]))\n  (how_many_times-iter string substring 0))\n", "  (define (count-substring\
    \ string substring)\n    (if (string-contains string substring)\n        (+ 1\
    \ (count-substring (substring string (+ 1 (string-index string substring))) substring))\n\
    \        0))\n  (count-substring string substring))\n", "  (define (how_many_times-iter\
    \ string substring count)\n    (if (string-contains string substring)\n      \
    \  (how_many_times-iter (string-drop string 1) substring (+ count 1))\n      \
    \  count))\n  (how_many_times-iter string substring 0))\n", "  (if (string-contains\
    \ string substring)\n      (+ 1 (how_many_times (substring string (string-index\
    \ string substring) (string-length string)) substring))\n      0))\n", "  (define\
    \ (how_many_times-iter string substring count)\n    (cond\n      [(empty? string)\
    \ count]\n      [(empty? substring) count]\n      [(string=? (first string) (first\
    \ substring))\n       (how_many_times-iter (rest string) (rest substring) (+ count\
    \ 1))]\n      [else (how_many_times-iter (rest string) substring count)]))\n \
    \ (how_many_times-iter string substring 0))\n", "  (define (how_many_times-iter\
    \ string substring count)\n    (cond\n      [(empty? string) count]\n      [(empty?\
    \ substring) count]\n      [(equal? (first string) (first substring))\n      \
    \ (how_many_times-iter (rest string) (rest substring) (+ count 1))]\n      [else\
    \ (how_many_times-iter (rest string) substring count)]))\n  (how_many_times-iter\
    \ string substring 0))\n", "  (define (how_many_times-iter string substring count)\n\
    \    (cond ((string-length string) count)\n          ((string-contains string\
    \ substring) (how_many_times-iter (substring string 1) substring (+ count 1)))\n\
    \          (else count)))\n  (how_many_times-iter string substring 0))\n", " \
    \ (if (string-contains string substring)\n      (+ 1 (how_many_times (substring\
    \ string (+ 1 (string-index substring string))) substring))\n      0))\n", " \
    \ (define (helper string substring count)\n    (cond ((string-length string) count)\n\
    \          ((string-contains string substring) (helper (substring string 1) substring\
    \ (+ count 1)))\n          (else count)))\n  (helper string substring 0))\n",
  "  (define (how_many_times-iter string substring count)\n    (cond\n      [(empty?\
    \ string) count]\n      [(empty? substring) count]\n      [(string=? (take substring\
    \ string) substring)\n       (how_many_times-iter (drop substring string) substring\
    \ (+ count 1))]\n      [else (how_many_times-iter (drop substring string) substring\
    \ count)]))\n  (how_many_times-iter string substring 0))\n", "  (define (how_many_times-iter\
    \ string substring count)\n    (cond\n      [(empty? string) count]\n      [(empty?\
    \ substring) count]\n      [(string=? (substring string 0 (string-length substring))\
    \ substring)\n       (how_many_times-iter (substring string 1) substring (+ count\
    \ 1))]\n      [else (how_many_times-iter (substring string 1) substring count)]))\n\
    \  (how_many_times-iter string substring 0))\n", "  (define (how_many_times-iter\
    \ string substring count)\n    (cond [(empty? string) count]\n          [(empty?\
    \ substring) count]\n          [(string=? (substring string 0 (string-length substring))\
    \ substring)\n           (how_many_times-iter (substring string 1) substring (+\
    \ count 1))]\n          [else (how_many_times-iter (substring string 1) substring\
    \ count)]))\n  (how_many_times-iter string substring 0))\n", "  (define (how_many_times-iter\
    \ string substring count)\n    (cond\n      [(empty? string) count]\n      [(empty?\
    \ substring) count]\n      [(string=? (substring string 0 (string-length substring))\
    \ substring)\n       (how_many_times-iter (substring string 1) substring (+ count\
    \ 1))]\n      [else (how_many_times-iter (substring string 1) substring count)]))\n\
    \  (how_many_times-iter string substring 0))\n", "  (define (how_many_times-iter\
    \ string substring count)\n    (cond\n      [(empty? string) count]\n      [(string-contains?\
    \ string substring)\n       (how_many_times-iter (string-drop string 1) substring\
    \ (+ count 1))]\n      [else (how_many_times-iter (string-drop string 1) substring\
    \ count)]))\n  (how_many_times-iter string substring 0))\n", "  (define (how_many_times-helper\
    \ string substring count)\n    (cond\n      [(empty? string) count]\n      [(empty?\
    \ substring) count]\n      [(string=? (substring string 0 (string-length substring))\
    \ substring)\n       (how_many_times-helper (substring string 1) substring (+\
    \ count 1))]\n      [else (how_many_times-helper (substring string 1) substring\
    \ count)]))\n  (how_many_times-helper string substring 0))\n", "  (define (how_many_times-iter\
    \ string substring count)\n    (cond\n      [(empty? string) count]\n      [(empty?\
    \ substring) count]\n      [(string=? (substring string 0 (string-length substring))\
    \ substring)\n       (how_many_times-iter (substring string 1) substring (+ count\
    \ 1))]\n      [else (how_many_times-iter (substring string 1) substring count)]))\n\
    \  (how_many_times-iter string substring 0))\n", "  (define (how_many_times-iter\
    \ string substring count)\n    (cond\n      [(empty? string) count]\n      [(string-contains\
    \ string substring) (how_many_times-iter (string-drop string 1) substring (+ count\
    \ 1))]\n      [else (how_many_times-iter (string-drop string 1) substring count)]))\n\
    \  (how_many_times-iter string substring 0))\n", "  (if (string-contains string\
    \ substring)\n      (+ 1 (how_many_times (substring string (add 1 (string-length\
    \ substring))) substring))\n      0))\n", "  (if (string-contains string substring)\n\
    \      (+ 1 (how_many_times (substring string (+ 1 (string-index substring string)))\
    \ substring))\n      0))\n", "  (define (how_many_times-iter string substring\
    \ count)\n    (cond\n      [(empty? string) count]\n      [(empty? substring)\
    \ count]\n      [(string=? (substring string 0 (string-length substring)) substring)\n\
    \       (how_many_times-iter (substring string 1) substring (+ count 1))]\n  \
    \    [else (how_many_times-iter (substring string 1) substring count)]))\n  (how_many_times-iter\
    \ string substring 0))\n", "  (define (how_many_times-iter string substring count)\n\
    \    (if (string-contains string substring)\n        (how_many_times-iter (string-drop\
    \ string 1) substring (+ count 1))\n        count))\n  (how_many_times-iter string\
    \ substring 0))\n", "  (define (how_many_times-iter string substring count)\n\
    \    (cond\n      [(empty? string) count]\n      [(empty? substring) count]\n\
    \      [(string=? (substring string 0 (string-length substring)) substring)\n\
    \       (how_many_times-iter (substring string 1) substring (+ count 1))]\n  \
    \    [else (how_many_times-iter (substring string 1) substring count)]))\n  (how_many_times-iter\
    \ string substring 0))\n", "  (define (how_many_times-iter string substring count)\n\
    \    (cond\n      [(empty? string) count]\n      [(empty? substring) count]\n\
    \      [(string=? (substring string 0 (string-length substring)) substring) (how_many_times-iter\
    \ (substring string 1) substring (+ count 1))]\n      [else (how_many_times-iter\
    \ (substring string 1) substring count)]))\n  (how_many_times-iter string substring\
    \ 0))\n", "  (if (string-contains string substring)\n      (+ 1 (how_many_times\
    \ (substring string (+ 1 (string-index substring string))) substring))\n     \
    \ 0))\n", "  (if (string-length substring)\n      (let ([substring-length (string-length\
    \ substring)])\n        (let loop ([i 0] [count 0])\n          (if (= i (- (string-length\
    \ string) substring-length))\n              count\n              (if (string=?\
    \ (substring string i (+ i substring-length)) substring)\n                  (loop\
    \ (+ i 1) (+ count 1))\n                  (loop (+ i 1) count)))))\n      0))\n",
  "  (define (how_many_times-iter string substring count)\n    (if (string-contains\
    \ string substring)\n        (how_many_times-iter (substring string (+ 1 (string-index\
    \ string substring))) substring (+ 1 count))\n        count))\n  (how_many_times-iter\
    \ string substring 0))\n", "  (define (count-substring string substring)\n   \
    \ (cond\n      [(empty? string) 0]\n      [(empty? substring) 0]\n      [(and\
    \ (not (empty? string)) (not (empty? substring)) (equal? (first string) (first\
    \ substring)))\n       (+ 1 (count-substring (rest string) (rest substring)))]\n\
    \      [else (count-substring (rest string) substring)]))\n  (define (count-substring-overlapping\
    \ string substring)\n    (cond\n      [(empty? string) 0]\n      [(empty? substring)\
    \ 0]\n      [(and (not (empty? string)) (not (empty? substring)) (equal? (first\
    \ string) (first substring)))\n       (+ 1 (count-substring-overlapping (rest\
    \ string) (rest substring)))]\n      [else (count-substring-overlapping (rest\
    \ string) substring)]))\n  (count-substring-overlapping string substring))\n",
  "  (define (how_many_times-iter string substring count)\n    (cond ((string-contains\
    \ string substring)\n           (how_many_times-iter (string-drop string 1) substring\
    \ (+ count 1)))\n          (else count)))\n  (how_many_times-iter string substring\
    \ 0))\n", "  (define (how_many_times-iter string substring count)\n    (if (string-contains\
    \ string substring)\n        (how_many_times-iter (string-drop string 1) substring\
    \ (+ count 1))\n        count))\n  (how_many_times-iter string substring 0))\n",
  "  (define (count-substring string substring count)\n    (cond ((string-length string)\
    \ count)\n          ((string-contains string substring)\n           (count-substring\
    \ (substring string (add1 (string-length substring))) substring (add1 count)))\n\
    \          (else (count-substring (substring string 1) substring count))))\n \
    \ (count-substring string substring 0))\n", "  (define (count-substring string\
    \ substring)\n    (cond ((string=? string \"\") 0)\n          ((string=? substring\
    \ \"\") 0)\n          ((string-contains string substring) (+ 1 (count-substring\
    \ (substring string 1) substring)))\n          (else 0)))\n  (count-substring\
    \ string substring))\n", "  (define (count-substring string substring)\n    (if\
    \ (string-contains string substring)\n        (+ 1 (count-substring (substring\
    \ string (+ 1 (string-index string substring))) substring))\n        0))\n  (count-substring\
    \ string substring))\n", "  (cond\n    [(empty? string) 0]\n    [(empty? substring)\
    \ 0]\n    [(string=? (substring string 0 (string-length substring)) substring)\n\
    \     (+ 1 (how_many_times (substring string 1) substring))]\n    [else (how_many_times\
    \ (substring string 1) substring)]))\n", "  (define (how_many_times-iter string\
    \ substring count)\n    (cond\n      [(empty? string) count]\n      [(empty? substring)\
    \ count]\n      [(string=? (substring string 0 (string-length substring)) substring)\n\
    \       (how_many_times-iter (substring string 1) substring (+ count 1))]\n  \
    \    [else (how_many_times-iter (substring string 1) substring count)]))\n  (how_many_times-iter\
    \ string substring 0))\n", "  (define (how_many_times-iter string substring count)\n\
    \    (cond\n      [(empty? string) count]\n      [(empty? substring) count]\n\
    \      [(equal? (first string) (first substring)) (how_many_times-iter (rest string)\
    \ (rest substring) (+ count 1))]\n      [else (how_many_times-iter (rest string)\
    \ substring count)]))\n  (how_many_times-iter string substring 0))\n", "  (define\
    \ (helper string substring count)\n    (cond\n      [(empty? string) count]\n\
    \      [(empty? substring) count]\n      [(string=? (substring string 0 (string-length\
    \ substring)) substring) (helper (substring string 1) substring (+ count 1))]\n\
    \      [else (helper (substring string 1) substring count)]))\n  (helper string\
    \ substring 0))\n", "  (if (string-contains string substring)\n      (+ 1 (how_many_times\
    \ (substring string (+ 1 (string-index substring string))) substring))\n     \
    \ 0))\n", "  (define (how_many_times-iter string substring count)\n    (cond\n\
    \      [(empty? string) count]\n      [(string-contains string substring)\n  \
    \     (how_many_times-iter (string-drop string 1) substring (+ count 1))]\n  \
    \    [else (how_many_times-iter (string-drop string 1) substring count)]))\n \
    \ (how_many_times-iter string substring 0))\n", "  (define (how_many_times-iter\
    \ string substring count)\n    (if (empty? string)\n        count\n        (if\
    \ (string-contains string substring)\n            (how_many_times-iter (substring\
    \ string 1) substring (+ count 1))\n            count)))\n  (how_many_times-iter\
    \ string substring 0))\n", "  (define (how_many_times-iter string substring count)\n\
    \    (if (string-contains string substring)\n        (how_many_times-iter (substring\
    \ string 1) substring (+ count 1))\n        count))\n  (how_many_times-iter string\
    \ substring 0))\n", "  (define (how_many_times-iter string substring count)\n\
    \    (cond\n      [(empty? string) count]\n      [(empty? substring) count]\n\
    \      [(equal? (first string) (first substring))\n       (how_many_times-iter\
    \ (rest string) (rest substring) (+ count 1))]\n      [else (how_many_times-iter\
    \ (rest string) substring count)]))\n  (how_many_times-iter string substring 0))\n",
  "  (if (string-contains string substring)\n      (+ 1 (how_many_times (substring\
    \ string (+ 1 (string-index substring string))) substring))\n      0))\n", " \
    \ (define (how_many_times-iter string substring count)\n    (cond ((string-contains\
    \ string substring)\n           (how_many_times-iter (substring string 1) substring\
    \ (+ count 1)))\n          (else count)))\n  (how_many_times-iter string substring\
    \ 0))\n", "  (if (string-empty? string)\n      0\n      (if (string-contains string\
    \ substring)\n          (+ 1 (how_many_times (string-drop string 1) substring))\n\
    \          (how_many_times (string-drop string 1) substring))))\n", "  (if (string-contains\
    \ string substring)\n      (+ 1 (how_many_times (substring string (string-index\
    \ string substring) (string-length string)) substring))\n      0))\n", "  (define\
    \ (helper string substring count)\n    (if (string-contains string substring)\n\
    \        (helper (substring string (+ 1 (string-index string substring))) substring\
    \ (+ 1 count))\n        count))\n  (helper string substring 0))\n", "  (define\
    \ (count-substring string substring)\n    (if (string-contains string substring)\n\
    \        (+ 1 (count-substring (substring string (add1 (string-index string substring)))\
    \ substring))\n        0))\n  (count-substring string substring))\n", "  (define\
    \ (helper string substring count)\n    (if (string-contains string substring)\n\
    \        (helper (substring string (add1 (string-index string substring))) substring\
    \ (add1 count))\n        count))\n  (helper string substring 0))\n", "  (define\
    \ (how_many_times-iter string substring count)\n    (if (string-contains string\
    \ substring)\n        (how_many_times-iter (substring string (+ 1 (string-index\
    \ string substring))) substring (+ 1 count))\n        count))\n  (how_many_times-iter\
    \ string substring 0))\n", "  (define (count-substring string substring)\n   \
    \ (cond\n      [(empty? string) 0]\n      [(empty? substring) 0]\n      [(equal?\
    \ (first string) (first substring))\n       (+ 1 (count-substring (rest string)\
    \ (rest substring)))]\n      [else (count-substring (rest string) substring)]))\n\
    \  (count-substring string substring))\n", "  (define (how_many_times-iter string\
    \ substring count)\n    (cond\n      [(empty? string) count]\n      [(empty? substring)\
    \ count]\n      [(string=? string substring) (+ count 1)]\n      [else (how_many_times-iter\
    \ (substring string 1) substring (if (string=? (substring string 0 1) (substring\
    \ substring 0 1)) (how_many_times-iter (substring string 1) (substring substring\
    \ 1) count) count))]))\n  (how_many_times-iter string substring 0))\n", "  (let\
    \ loop ([string string] [substring substring] [count 0])\n    (cond [(empty? string)\
    \ count]\n          [(empty? substring) count]\n          [(equal? (first string)\
    \ (first substring))\n           (loop (rest string) (rest substring) (+ count\
    \ 1))]\n          [else (loop (rest string) substring count)])))\n", "  (define\
    \ (how_many_times-iter string substring count)\n    (cond ((string-contains string\
    \ substring)\n           (how_many_times-iter (string-drop-right string 1) substring\
    \ (+ count 1)))\n          (else count)))\n  (how_many_times-iter string substring\
    \ 0))\n", "  (define (how_many_times-iter string substring count)\n    (cond ((string-contains\
    \ string substring)\n           (how_many_times-iter (string-drop-right string\
    \ 1) substring (+ count 1)))\n          (else count)))\n  (how_many_times-iter\
    \ string substring 0))\n", "  (define (count-substring string substring)\n   \
    \ (define (count-substring-iter string substring count)\n      (cond ((string-length\
    \ string) count)\n            ((string-contains string substring) (count-substring-iter\
    \ (substring string 1) substring (+ count 1)))\n            (else count)))\n \
    \   (count-substring-iter string substring 0))\n  (count-substring string substring))\n",
  "  (define (how_many_times-iter string substring count)\n    (if (string-contains\
    \ string substring)\n        (how_many_times-iter (substring string 1) substring\
    \ (+ count 1))\n        count))\n  (how_many_times-iter string substring 0))\n",
  "  (define (count-substring string substring)\n    (cond ((string=? string \"\"\
    ) 0)\n          ((string=? substring \"\") 0)\n          ((string-contains string\
    \ substring) (+ 1 (count-substring (substring string 1) substring)))\n       \
    \   (else 0)))\n  (count-substring string substring))\n", "  (define (how_many_times-iter\
    \ string substring count)\n    (cond\n      [(empty? string) count]\n      [(empty?\
    \ substring) count]\n      [(equal? (first string) (first substring)) (how_many_times-iter\
    \ (rest string) (rest substring) (+ count 1))]\n      [else (how_many_times-iter\
    \ (rest string) substring count)]))\n  (how_many_times-iter string substring 0))\n",
  "  (define (how_many_times-iter string substring count)\n    (cond\n      [(empty?\
    \ string) count]\n      [(empty? substring) count]\n      [(equal? (first string)\
    \ (first substring))\n       (how_many_times-iter (rest string) (rest substring)\
    \ (+ count 1))]\n      [else (how_many_times-iter (rest string) substring count)]))\n\
    \  (how_many_times-iter string substring 0))\n", "  (define (how_many_times-iter\
    \ string substring count)\n    (cond ((string-length string) 0)\n          ((string-contains\
    \ string substring)\n           (how_many_times-iter (substring string 1) substring\
    \ (+ count 1)))\n          (else count)))\n  (how_many_times-iter string substring\
    \ 0))\n", "  (if (string-contains string substring)\n      (+ 1 (how_many_times\
    \ (substring string (+ 1 (string-index substring string))) substring))\n     \
    \ 0))\n", "  (if (string-contains string substring)\n      (+ 1 (how_many_times\
    \ (substring string (+ 1 (string-index substring string))) substring))\n     \
    \ 0))\n", "  (cond\n    [(empty? string) 0]\n    [(empty? substring) 0]\n    [(string=?\
    \ (substring string 0 (string-length substring)) substring)\n     (+ 1 (how_many_times\
    \ (substring string 1) substring))]\n    [else (how_many_times (substring string\
    \ 1) substring)]))\n", "  (if (string-contains string substring)\n      (+ 1 (how_many_times\
    \ (substring string (+ 1 (string-index substring string))) substring))\n     \
    \ 0))\n", "  (define (count-substring string substring)\n    (cond\n      [(empty?\
    \ string) 0]\n      [(string-contains string substring) (+ 1 (count-substring\
    \ (substring string 1) substring))]\n      [else (count-substring (substring string\
    \ 1) substring)]))\n  (count-substring string substring))\n", "  (if (string-contains\
    \ string substring)\n      (+ 1 (how_many_times (substring string (+ 1 (string-index\
    \ substring string))) substring))\n      0))\n", "  (define (how_many_times-iter\
    \ string substring count)\n    (cond\n      [(empty? string) count]\n      [(empty?\
    \ substring) count]\n      [(string=? (substring string 0 (string-length substring))\
    \ substring)\n       (how_many_times-iter (substring string 1) substring (+ count\
    \ 1))]\n      [else (how_many_times-iter (substring string 1) substring count)]))\n\
    \  (how_many_times-iter string substring 0))\n", "  (define (how_many_times-iter\
    \ string substring count)\n    (cond ((string-length string) 0)\n          ((string-prefix?\
    \ substring string)\n           (how_many_times-iter (substring string 1) substring\
    \ (+ count 1)))\n          (else (how_many_times-iter (substring string 1) substring\
    \ count))))\n  (how_many_times-iter string substring 0))\n", "  (define (how_many_times-iter\
    \ string substring index count)\n    (cond\n      [(empty? string) count]\n  \
    \    [(empty? substring) count]\n      [(equal? (substring string index (+ index\
    \ (string-length substring))) substring)\n       (how_many_times-iter string substring\
    \ (+ index 1) (+ count 1))]\n      [else (how_many_times-iter string substring\
    \ (+ index 1) count)]))\n  (how_many_times-iter string substring 0 0))\n", " \
    \ (define (how_many_times-iter string substring count)\n    (cond ((string=? string\
    \ \"\") count)\n          ((string=? substring \"\") count)\n          ((string-contains\
    \ string substring)\n           (how_many_times-iter (substring string (+ (string-length\
    \ substring) 1)) substring (+ count 1)))\n          (else count)))\n  (how_many_times-iter\
    \ string substring 0))\n", "  (if (empty? string)\n      0\n      (if (string-contains\
    \ string substring)\n          (+ 1 (how_many_times (substring string (+ 1 (string-length\
    \ substring))) substring))\n          0)))\n", "  (cond\n    [(empty? string)\
    \ 0]\n    [(empty? substring) 0]\n    [(string=? string substring) 1]\n    [else\n\
    \     (+ (if (string-contains string substring) 1 0)\n        (how_many_times\
    \ (substring string 1) substring))]))\n", "  (let loop ((string string) (substring\
    \ substring) (count 0))\n    (if (string-contains string substring)\n        (loop\
    \ (substring string (+ (string-length substring) 1)) substring (+ count 1))\n\
    \        count)))\n", "  (if (string-contains string substring)\n      (+ 1 (how_many_times\
    \ (substring string (+ 1 (string-index substring string))) substring))\n     \
    \ 0))\n", "  (let loop ((string string) (substring substring) (count 0))\n   \
    \ (if (string-contains string substring)\n        (loop (substring string (+ (string-length\
    \ substring) 1)) substring (+ count 1))\n        count)))\n", "  (define (how_many_times-iter\
    \ string substring count)\n    (if (string-contains string substring)\n      \
    \  (how_many_times-iter (string-drop string 1) substring (+ count 1))\n      \
    \  count))\n  (how_many_times-iter string substring 0))\n", "  (define (count-substring\
    \ string substring)\n    (cond\n      [(empty? string) 0]\n      [(empty? substring)\
    \ 0]\n      [(and (equal? (first string) (first substring))\n            (equal?\
    \ (rest string) (rest substring))) 1]\n      [else (+ (count-substring (rest string)\
    \ substring)\n               (count-substring (rest string) (rest substring)))]))\n\
    \  (count-substring string substring))\n", "  (define (count-substring string\
    \ substring)\n    (if (string-contains string substring)\n        (+ 1 (count-substring\
    \ (substring string (+ 1 (string-index string substring))) substring))\n     \
    \   0))\n  (count-substring string substring))\n", "  (define (how_many_times-iter\
    \ string substring count)\n    (if (string-contains string substring)\n      \
    \  (how_many_times-iter (string-drop string 1) substring (+ count 1))\n      \
    \  count))\n  (how_many_times-iter string substring 0))\n", "  (define (how_many_times-iter\
    \ string substring count)\n    (cond\n      [(empty? string) count]\n      [(string-contains\
    \ string substring) (how_many_times-iter (substring string 1) substring (+ count\
    \ 1))]\n      [else (how_many_times-iter (substring string 1) substring count)]))\n\
    \  (how_many_times-iter string substring 0))\n", "  (if (string-contains string\
    \ substring)\n      (+ 1 (how_many_times (substring string (+ 1 (string-length\
    \ substring))) substring))\n      0))\n", "  (if (string-contains string substring)\n\
    \      (+ 1 (how_many_times (substring string (+ 1 (string-length substring)))\
    \ substring))\n      0))\n", "  (define (how_many_times-iter string substring\
    \ count)\n    (if (string-contains string substring)\n        (how_many_times-iter\
    \ (substring string (+ 1 (string-index string substring))) substring (+ 1 count))\n\
    \        count))\n  (how_many_times-iter string substring 0))\n", "  (define (helper\
    \ string substring count)\n    (if (string-contains string substring)\n      \
    \  (helper (substring string (+ 1 (string-index string substring))) substring\
    \ (+ 1 count))\n        count))\n  (helper string substring 0))\n", "  (if (string-contains\
    \ string substring)\n      (+ 1 (how_many_times (substring string (+ 1 (string-index\
    \ substring string))) substring))\n      0))\n", "  (if (string-contains string\
    \ substring)\n      (+ 1 (how_many_times (substring string (string-index string\
    \ substring) (string-length string)) substring))\n      0))\n", "  (define (how_many_times-iter\
    \ string substring count)\n    (cond\n      [(empty? string) count]\n      [(empty?\
    \ substring) count]\n      [(string=? (first string) (first substring)) (how_many_times-iter\
    \ (rest string) (rest substring) (+ count 1))]\n      [else (how_many_times-iter\
    \ (rest string) substring count)]))\n  (how_many_times-iter string substring 0))\n",
  "  (define (how_many_times-iter string substring count)\n    (cond\n      [(empty?\
    \ string) count]\n      [(empty? substring) count]\n      [(and (string=? (substring\
    \ string 0 (string-length substring)) substring)\n            (string=? (substring\
    \ string (string-length substring)) (substring string 0 (string-length substring))))\n\
    \       (how_many_times-iter (substring string (string-length substring)) substring\
    \ (+ count 1))]\n      [(string=? (substring string 0 (string-length substring))\
    \ substring)\n       (how_many_times-iter (substring string 1) substring (+ count\
    \ 1))]\n      [else (how_many_times-iter (substring string 1) substring count)]))\n\
    \  (how_many_times-iter string substring 0))\n", "  (define (count-substring string\
    \ substring)\n    (cond\n      [(empty? string) 0]\n      [(string-contains string\
    \ substring) (+ 1 (count-substring (substring string 1) substring))]\n      [else\
    \ (count-substring (substring string 1) substring)]))\n  (count-substring string\
    \ substring))\n", "  (define (how_many_times-iter string substring count)\n  \
    \  (if (string-contains string substring)\n        (how_many_times-iter (string-replace\
    \ string substring \"\") substring (+ count 1))\n        count))\n  (how_many_times-iter\
    \ string substring 0))\n", "  (if (empty? string)\n      0\n      (if (string-contains\
    \ string substring)\n          (+ 1 (how_many_times (substring string (+ 1 (string-length\
    \ substring))) substring))\n          0)))\n", "  (define (helper string substring\
    \ count)\n    (if (string-contains string substring)\n        (helper (substring\
    \ string (+ 1 (string-index string substring))) substring (+ 1 count))\n     \
    \   count))\n  (helper string substring 0))\n", "  (if (string-contains string\
    \ substring)\n      (+ 1 (how_many_times (substring string (+ 1 (string-index\
    \ substring string))) substring))\n      0))\n", "  (define (how_many_times-iter\
    \ string substring count)\n    (cond [(empty? string) count]\n          [(empty?\
    \ substring) count]\n          [(and (not (empty? substring)) (not (empty? string))\
    \ (equal? (first string) (first substring)))\n           (how_many_times-iter\
    \ (rest string) (rest substring) (+ count 1))]\n          [else (how_many_times-iter\
    \ (rest string) substring count)]))\n  (how_many_times-iter string substring 0))\n",
  "  (define (how_many_times-iter string substring count)\n    (cond ((string-contains?\
    \ string substring)\n           (how_many_times-iter (string-drop string 1) substring\
    \ (+ count 1)))\n          (else count)))\n  (how_many_times-iter string substring\
    \ 0))\n", "  (if (string-contains string substring)\n      (+ 1 (how_many_times\
    \ (substring string (+ 1 (string-length substring))) substring))\n      0))\n",
  "  (define (how_many_times-iter string substring count)\n    (cond\n      [(empty?\
    \ string) count]\n      [(empty? substring) count]\n      [(string=? (substring\
    \ string 0 (string-length substring)) substring)\n       (how_many_times-iter\
    \ (substring string 1) substring (+ count 1))]\n      [else (how_many_times-iter\
    \ (substring string 1) substring count)]))\n  (how_many_times-iter string substring\
    \ 0))\n", "  (define (how_many_times-iter string substring count)\n    (if (string-contains\
    \ string substring)\n        (how_many_times-iter (string-drop string 1) substring\
    \ (+ count 1))\n        count))\n  (how_many_times-iter string substring 0))\n",
  "  (define (how_many_times-iter string substring count)\n    (if (string-contains\
    \ string substring)\n        (how_many_times-iter (substring string (+ 1 (string-index\
    \ string substring))) substring (+ 1 count))\n        count))\n  (how_many_times-iter\
    \ string substring 0))\n", "  (define (how_many_times-iter string substring count)\n\
    \    (if (string-contains string substring)\n        (how_many_times-iter (substring\
    \ string (+ 1 (string-index string substring))) substring (+ 1 count))\n     \
    \   count))\n  (how_many_times-iter string substring 0))\n", "  (define (how_many_times-iter\
    \ string substring count)\n    (cond\n      [(empty? string) count]\n      [(equal?\
    \ (substring string 0 (string-length substring)) substring)\n       (how_many_times-iter\
    \ (substring string 1) substring (+ count 1))]\n      [else (how_many_times-iter\
    \ (substring string 1) substring count)]))\n  (how_many_times-iter string substring\
    \ 0))\n", "  (define (how_many_times-iter string substring count)\n    (cond\n\
    \      [(empty? string) count]\n      [(string-contains string substring) (how_many_times-iter\
    \ (substring string 1) substring (+ count 1))]\n      [else (how_many_times-iter\
    \ (substring string 1) substring count)]))\n  (how_many_times-iter string substring\
    \ 0))\n", "  (let loop ((string string) (substring substring) (count 0))\n   \
    \ (cond ((string=? string \"\") count)\n          ((string=? substring \"\") count)\n\
    \          ((string-index string substring)\n           (loop (substring string\
    \ (+ (string-length substring) (string-index string substring)))\n           \
    \      substring\n                 (+ count 1)))\n          (else count))))\n",
  "  (define (how_many_times-iter string substring count)\n    (if (string-contains\
    \ string substring)\n        (how_many_times-iter (substring string (+ 1 (string-index\
    \ string substring))) substring (+ 1 count))\n        count))\n  (how_many_times-iter\
    \ string substring 0))\n", "  (define (count-substring string substring count)\n\
    \    (if (string-contains string substring)\n        (count-substring (substring\
    \ string (+ 1 (string-index string substring))) substring (+ 1 count))\n     \
    \   count))\n  (count-substring string substring 0))\n", "  (cond [(empty? string)\
    \ 0]\n        [(empty? substring) 0]\n        [(string=? (substring string 0 (string-length\
    \ substring)) substring)\n         (+ 1 (how_many_times (substring string 1) substring))]\n\
    \        [else (how_many_times (substring string 1) substring)]))\n", "  (define\
    \ (how_many_times-iter string substring count)\n    (if (string-contains string\
    \ substring)\n        (how_many_times-iter (substring string (+ 1 (string-index\
    \ string substring))) substring (+ 1 count))\n        count))\n  (how_many_times-iter\
    \ string substring 0))\n", "  (if (string-contains string substring)\n      (+\
    \ 1 (how_many_times (substring string (+ 1 (string-index substring string))) substring))\n\
    \      0))\n", "  (define (how_many_times-iter string substring count)\n    (if\
    \ (string-contains string substring)\n        (how_many_times-iter (substring\
    \ string 1) substring (+ count 1))\n        count))\n  (how_many_times-iter string\
    \ substring 0))\n", "  (define (how_many_times-iter string substring count)\n\
    \    (cond [(empty? string) count]\n          [(empty? substring) count]\n   \
    \       [(and (equal? (first string) (first substring))\n                (equal?\
    \ (rest string) (rest substring)))\n           (how_many_times-iter (rest string)\
    \ substring (+ count 1))]\n          [else (how_many_times-iter (rest string)\
    \ substring count)]))\n  (how_many_times-iter string substring 0))\n", "  (if\
    \ (string-contains string substring)\n      (+ 1 (how_many_times (substring string\
    \ (+ 1 (string-index substring string))) substring))\n      0))\n", "  (cond\n\
    \    [(empty? string) 0]\n    [(empty? substring) 0]\n    [(string=? (substring\
    \ string 0 (string-length substring)) substring)\n     (+ 1 (how_many_times (substring\
    \ string 1) substring))]\n    [else (how_many_times (substring string 1) substring)]))\n",
  "  (define (count-substring string substring)\n    (cond ((string=? string \"\"\
    ) 0)\n          ((string=? substring \"\") 0)\n          ((string-prefix? substring\
    \ string) (+ 1 (count-substring (substring string (string-length substring)) substring)))\n\
    \          (else (count-substring (substring string 1) substring))))\n  (count-substring\
    \ string substring))\n", "  (define (count-substrings string substring)\n    (cond\
    \ ((string=? substring \"\") 0)\n          ((string=? string \"\") 0)\n      \
    \    ((string-contains string substring) (+ 1 (count-substrings (substring string\
    \ 1) substring)))\n          (else (count-substrings (substring string 1) substring))))\n\
    \  (count-substrings string substring))\n", "  (define (count-substring string\
    \ substring)\n    (cond ((string=? string \"\") 0)\n          ((string=? (substring\
    \ string 0 (string-length substring)) substring)\n           (+ 1 (count-substring\
    \ (substring string 1) substring)))\n          (else (count-substring (substring\
    \ string 1) substring))))\n  (count-substring string substring))\n", "  (define\
    \ (how_many_times-iter string substring count)\n    (cond\n      [(empty? string)\
    \ count]\n      [(empty? substring) count]\n      [(string=? (substring string\
    \ 0 (string-length substring)) substring)\n       (how_many_times-iter (substring\
    \ string 1) substring (+ count 1))]\n      [else (how_many_times-iter (substring\
    \ string 1) substring count)]))\n  (how_many_times-iter string substring 0))\n",
  "  (define (count-substring string substring)\n    (if (string-contains string substring)\n\
    \        (+ 1 (count-substring (substring string (+ 1 (string-index string substring)))\
    \ substring))\n        0))\n  (count-substring string substring))\n", "  (define\
    \ (how_many_times-iter string substring count)\n    (if (string-contains string\
    \ substring)\n        (how_many_times-iter (string-drop string 1) substring (+\
    \ count 1))\n        count))\n  (how_many_times-iter string substring 0))\n",
  "  (define (count-substring string substring)\n    (cond\n      [(empty? string)\
    \ 0]\n      [(empty? substring) 0]\n      [(string=? (first string) (first substring))\n\
    \       (+ 1 (count-substring (rest string) (rest substring)))]\n      [else (count-substring\
    \ (rest string) substring)]))\n  (define (count-substring-in-string string substring)\n\
    \    (cond\n      [(empty? string) 0]\n      [else (+ (count-substring string\
    \ substring)\n               (count-substring-in-string (rest string) substring))]))\n\
    \  (count-substring-in-string string substring))\n", "  (define (how_many_times-iter\
    \ string substring count)\n    (cond ((string-contains string substring)\n   \
    \        (how_many_times-iter (substring string 1) substring (+ count 1)))\n \
    \         (else count)))\n  (how_many_times-iter string substring 0))\n", "  (define\
    \ (how_many_times-iter string substring count)\n    (cond\n      [(empty? string)\
    \ count]\n      [(empty? substring) count]\n      [(equal? (first string) (first\
    \ substring))\n       (how_many_times-iter (rest string) (rest substring) (+ count\
    \ 1))]\n      [else (how_many_times-iter (rest string) substring count)]))\n \
    \ (how_many_times-iter string substring 0))\n", "  (cond\n    [(empty? string)\
    \ 0]\n    [(empty? substring) 0]\n    [(equal? (substring string 0 (string-length\
    \ substring)) substring)\n     (+ 1 (how_many_times (substring string 1) substring))]\n\
    \    [else (how_many_times (substring string 1) substring)]))\n", "  (define (how_many_times-iter\
    \ string substring count)\n    (cond\n      [(empty? string) count]\n      [(empty?\
    \ substring) count]\n      [(string=? (substring string 0 (string-length substring))\
    \ substring)\n       (how_many_times-iter (substring string 1) substring (+ count\
    \ 1))]\n      [else (how_many_times-iter (substring string 1) substring count)]))\n\
    \  (how_many_times-iter string substring 0))\n", "  (define (how_many_times-iter\
    \ string substring count)\n    (cond\n      [(empty? string) count]\n      [(empty?\
    \ substring) count]\n      [(equal? (first string) (first substring)) (how_many_times-iter\
    \ (rest string) (rest substring) (+ count 1))]\n      [else (how_many_times-iter\
    \ (rest string) substring count)]))\n  (how_many_times-iter string substring 0))\n",
  "  (if (string-contains string substring)\n      (+ 1 (how_many_times (substring\
    \ string (+ 1 (string-index substring string))) substring))\n      0))\n", " \
    \ (define (count-substring string substring)\n    (define (count-substring-iter\
    \ string substring count)\n      (cond ((string-contains string substring)\n \
    \            (count-substring-iter (substring string 1) substring (+ count 1)))\n\
    \            (else count)))\n    (count-substring-iter string substring 0))\n\
    \  (count-substring string substring))\n", "  (cond\n    [(empty? string) 0]\n\
    \    [(empty? substring) 0]\n    [(equal? (substring string 0 (string-length substring))\
    \ substring)\n     (+ 1 (how_many_times (substring string 1) substring))]\n  \
    \  [else (how_many_times (substring string 1) substring)]))\n", "  (define (count-substring\
    \ string substring)\n    (cond ((string=? substring \"\") 0)\n          ((string=?\
    \ string \"\") 0)\n          ((string-prefix? substring string) (+ 1 (count-substring\
    \ (substring string 1) substring)))\n          (else (count-substring (substring\
    \ string 1) substring))))\n  (count-substring string substring))\n"]
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
