name: HumanEval_157_right_angle_triangle
language: racket
prompt: "#lang racket\n\n;; Given the lengths of the three sides of a triangle. Return\
  \ True if the three\n;; sides form a right-angled triangle, False otherwise.\n;;\
  \ A right-angled triangle is a triangle in which one angle is right angle or \n\
  ;; 90 degree.\n;; Example:\n;; right_angle_triangle(3, 4, 5) == True\n;; right_angle_triangle(1,\
  \ 2, 3) == False\n(define (right_angle_triangle a b c)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate right_angle_triangle))\n\
  \    (check-equal? (candidate 3 4 5) #t)\n    (check-equal? (candidate 1 2 3) #f)\n\
  \    (check-equal? (candidate 10 6 8) #t)\n    (check-equal? (candidate 2 2 2) #f)\n\
  \    (check-equal? (candidate 7 24 25) #t)\n    (check-equal? (candidate 10 5 7)\
  \ #f)\n    (check-equal? (candidate 5 12 13) #t)\n    (check-equal? (candidate 15\
  \ 8 17) #t)\n    (check-equal? (candidate 48 55 73) #t)\n    (check-equal? (candidate\
  \ 1 1 1) #f)\n    (check-equal? (candidate 2 2 10) #f)\n))\n\n(test-humaneval)"
completions: ["  (and (or (= a (sqrt (+ (* b b) (* c c))))\n           (= b (sqrt\
    \ (+ (* a a) (* c c))))\n           (= c (sqrt (+ (* a a) (* b b)))))\n      \
    \ (or (= a b) (= a c) (= b c))))\n", "  (and (and (&lt; a (+ b c)) (&lt; b (+\
    \ a c)) (&lt; c (+ a b)))\n       (= (expt a 2) (+ (expt b 2) (expt c 2)))))\n",
  "  (and (or (= a (sqrt (+ (* b b) (* c c))))\n           (= b (sqrt (+ (* a a) (*\
    \ c c))))\n           (= c (sqrt (+ (* a a) (* b b)))))\n       (or (= a b) (=\
    \ a c) (= b c))))\n", "  (and (or (= a (sqrt (+ (* b b) (* c c))))\n         \
    \  (= b (sqrt (+ (* a a) (* c c))))\n           (= c (sqrt (+ (* a a) (* b b)))))\n\
    \       (or (= a b) (= a c) (= b c))))\n", "  (and (and (<= a b) (<= b c))\n \
    \      (or (= (expt a 2) (+ (expt b 2) (expt c 2)))\n           (= (expt b 2)\
    \ (+ (expt a 2) (expt c 2)))\n           (= (expt c 2) (+ (expt a 2) (expt b 2))))))\n",
  "  (and (or (= a (sqrt (+ (* b b) (* c c))))\n           (= b (sqrt (+ (* a a) (*\
    \ c c))))\n           (= c (sqrt (+ (* a a) (* b b)))))\n       (and (or (= a\
    \ b) (= a c) (= b c))\n            (or (= a b) (= a c) (= b c)))))\n", "  (and\
    \ (or (= a (sqrt (+ (* b b) (* c c))))\n           (= b (sqrt (+ (* a a) (* c\
    \ c))))\n           (= c (sqrt (+ (* a a) (* b b)))))\n       (and (> a 0) (>\
    \ b 0) (> c 0))))\n", "  (and (or (= a (sqrt (+ (* b b) (* c c))))\n         \
    \  (= b (sqrt (+ (* a a) (* c c))))\n           (= c (sqrt (+ (* a a) (* b b)))))\n\
    \       (or (= a b) (= a c) (= b c))))\n", "  (cond\n    [(or (= a 0) (= b 0)\
    \ (= c 0)) #f]\n    [(and (= (expt a 2) (+ (expt b 2) (expt c 2)))\n         \
    \ (= (expt b 2) (+ (expt a 2) (expt c 2)))\n          (= (expt c 2) (+ (expt a\
    \ 2) (expt b 2)))) #t]\n    [else #f]))\n", "  (and (or (= a (sqrt (+ (* b b)\
    \ (* c c))))\n           (= b (sqrt (+ (* a a) (* c c))))\n           (= c (sqrt\
    \ (+ (* a a) (* b b)))))\n       (and (> a 0) (> b 0) (> c 0))))\n", "  (let ([max\
    \ (max a b c)])\n    (and (= (sqrt (+ (* (- max a) (- max a)) (* (- max b) (-\
    \ max b)))) max)\n         (= (sqrt (+ (* (- max a) (- max a)) (* (- max c) (-\
    \ max c)))) max)\n         (= (sqrt (+ (* (- max b) (- max b)) (* (- max c) (-\
    \ max c)))) max))))\n", "  (define (square x) (* x x))\n  (define (hypotenuse\
    \ x y) (sqrt (+ (square x) (square y))))\n  (define (is-right-angle-triangle x\
    \ y z)\n    (or (and (= (hypotenuse x y) z) (= (hypotenuse x z) y) (= (hypotenuse\
    \ y z) x))\n        (and (= (hypotenuse x y) z) (= (hypotenuse x z) y) (= (hypotenuse\
    \ y z) x))\n        (and (= (hypotenuse x y) z) (= (hypotenuse x z) y) (= (hypotenuse\
    \ y z) x))))\n  (is-right-angle-triangle a b c))\n", "  (and (and (&lt;= a b)\
    \ (&lt;= b c))\n       (or (= (+ (* a a) (* b b)) (* c c))\n           (= (+ (*\
    \ a a) (* c c)) (* b b))\n           (= (+ (* b b) (* c c)) (* a a)))))\n</code>\n",
  "  (and (and (< a (+ b c))\n            (< b (+ a c))\n            (< c (+ a b)))\n\
    \       (or (and (= a (sqrt (+ (* b b) (* c c))))\n                (= b (sqrt\
    \ (+ (* a a) (* c c))))\n                (= c (sqrt (+ (* a a) (* b b)))))\n \
    \          (and (= a (sqrt (+ (* b b) (* c c))))\n                (= b (sqrt (+\
    \ (* a a) (* c c))))\n                (= c (sqrt (+ (* a a) (* b b)))))\n    \
    \       (and (= a (sqrt (+ (* b b) (* c c))))\n                (= b (sqrt (+ (*\
    \ a a) (* c c))))\n                (= c (sqrt (+ (* a a) (* b b))))))))\n", " \
    \ (and (and (<= a b) (<= b c))\n       (= (expt a 2) (+ (expt b 2) (expt c 2)))))\n",
  "  (and (or (= a (sqrt (+ (* b b) (* c c))))\n           (= b (sqrt (+ (* a a) (*\
    \ c c))))\n           (= c (sqrt (+ (* a a) (* b b)))))\n       (and (> a 0) (>\
    \ b 0) (> c 0))))\n", "  (and (or (= a (sqrt (+ (* b b) (* c c))))\n         \
    \  (= b (sqrt (+ (* a a) (* c c))))\n           (= c (sqrt (+ (* a a) (* b b)))))\n\
    \       (or (= a b) (= a c) (= b c))))\n", "  (and (or (= a (sqrt (+ (* b b) (*\
    \ c c))))\n           (= b (sqrt (+ (* a a) (* c c))))\n           (= c (sqrt\
    \ (+ (* a a) (* b b)))))\n       (and (or (= a b) (= a c) (= b c)))))\n", "  (and\
    \ (or (= a (sqrt (+ (* b b) (* c c))))\n           (= b (sqrt (+ (* a a) (* c\
    \ c))))\n           (= c (sqrt (+ (* a a) (* b b)))))\n       (or (= a b) (= a\
    \ c) (= b c))))\n", "  (and (or (= a (sqrt (+ (* b b) (* c c))))\n           (=\
    \ b (sqrt (+ (* a a) (* c c))))\n           (= c (sqrt (+ (* a a) (* b b)))))\n\
    \       (and (< a b) (< b c))))\n", "  (define (square x) (* x x))\n  (define\
    \ (hypotenuse x y)\n    (sqrt (+ (square x) (square y))))\n  (define (is-right-angle-triangle\
    \ x y z)\n    (and (= (hypotenuse x y) z)\n         (= (hypotenuse x z) y)\n \
    \        (= (hypotenuse y z) x)))\n  (cond\n    [(and (= a b) (= b c)) (is-right-angle-triangle\
    \ a b c)]\n    [(and (= a c) (= b c)) (is-right-angle-triangle a c b)]\n    [(and\
    \ (= a b) (= a c)) (is-right-angle-triangle b a c)]\n    [(and (= a b) (= a c))\
    \ (is-right-angle-triangle b c a)]\n    [(and (= a c) (= b c)) (is-right-angle-triangle\
    \ c a b)]\n    [(and (= a c) (= b c)) (is-right-angle-triangle c b a)]\n    [else\
    \ #f]))\n", "  (define (square x) (* x x))\n  (define (hypotenuse x y) (sqrt (+\
    \ (square x) (square y))))\n  (define (is-right-angle x y z)\n    (and (= (hypotenuse\
    \ x y) z)\n         (= (hypotenuse x z) y)\n         (= (hypotenuse y z) x)))\n\
    \  (cond\n    [(is-right-angle a b c) #t]\n    [(is-right-angle a c b) #t]\n \
    \   [(is-right-angle b a c) #t]\n    [(is-right-angle b c a) #t]\n    [(is-right-angle\
    \ c a b) #t]\n    [(is-right-angle c b a) #t]\n    [else #f]))\n", "  (define\
    \ (square x) (* x x))\n  (define (max-of-three x y z)\n    (cond\n      [(> x\
    \ y) (max-of-two x z)]\n      [(> y z) (max-of-two y z)]\n      [else (max-of-two\
    \ x y)]))\n  (define (max-of-two x y)\n    (if (> x y) x y))\n  (define (min-of-three\
    \ x y z)\n    (cond\n      [(< x y) (min-of-two x z)]\n      [(< y z) (min-of-two\
    \ y z)]\n      [else (min-of-two x y)]))\n  (define (min-of-two x y)\n    (if\
    \ (< x y) x y))\n  (define (sum-of-two x y)\n    (+ x y))\n  (define (sum-of-three\
    \ x y z)\n    (+ x y z))\n  (define (is-right-angle-triangle a b c)\n    (= (square\
    \ (max-of-three a b c))\n       (sum-of-two (square (min-of-three a b c))\n  \
    \                 (square (sum-of-three a b c)))))\n  (is-right-angle-triangle\
    \ a b c))\n", "  (define (square x) (* x x))\n  (define (hypotenuse x y)\n   \
    \ (sqrt (+ (square x) (square y))))\n  (define (is-right-angle-triangle x y z)\n\
    \    (and (= (hypotenuse x y) z)\n         (or (= (hypotenuse x z) y)\n      \
    \       (= (hypotenuse y z) x))))\n  (is-right-angle-triangle a b c))\n", "  (and\
    \ (or (= a (sqrt (+ (* b b) (* c c))))\n           (= b (sqrt (+ (* a a) (* c\
    \ c))))\n           (= c (sqrt (+ (* a a) (* b b)))))\n       (and (<= a b) (<=\
    \ b c))))\n", "  (define (square x) (* x x))\n  (define (is-right-triangle a b\
    \ c)\n    (and (= (square a) (+ (square b) (square c)))\n         (= (square b)\
    \ (+ (square a) (square c)))\n         (= (square c) (+ (square a) (square b)))))\n\
    \  (is-right-triangle a b c))\n", "  (and (or (= a (sqrt (+ (* b b) (* c c))))\n\
    \           (= b (sqrt (+ (* a a) (* c c))))\n           (= c (sqrt (+ (* a a)\
    \ (* b b)))))\n       (and (> a 0) (> b 0) (> c 0))))\n", "  (and (or (= a (sqrt\
    \ (+ (* b b) (* c c))))\n           (= b (sqrt (+ (* a a) (* c c))))\n       \
    \    (= c (sqrt (+ (* a a) (* b b)))))\n       (and (> a 0) (> b 0) (> c 0))))\n",
  "  (and (or (= a (sqrt (+ (* b b) (* c c))))\n           (= b (sqrt (+ (* a a) (*\
    \ c c))))\n           (= c (sqrt (+ (* a a) (* b b)))))\n       (or (= a b) (=\
    \ a c) (= b c))))\n", "  (define (square x) (* x x))\n  (define (max-of-three\
    \ x y z)\n    (cond ((> x y) (max-of-two x z))\n          ((> y z) (max-of-two\
    \ y x))\n          (else (max-of-two z x))))\n  (define (max-of-two x y)\n   \
    \ (if (> x y) x y))\n  (define (min-of-three x y z)\n    (cond ((< x y) (min-of-two\
    \ x z))\n          ((< y z) (min-of-two y x))\n          (else (min-of-two z x))))\n\
    \  (define (min-of-two x y)\n    (if (< x y) x y))\n  (define (hypotenuse x y)\n\
    \    (sqrt (+ (square x) (square y))))\n  (define (is-right-angle? x y z)\n  \
    \  (and (= (hypotenuse x y) z)\n         (= (hypotenuse x z) y)\n         (= (hypotenuse\
    \ y z) x)))\n  (define (is-right-angle-triangle? x y z)\n    (and (is-right-angle?\
    \ x y z)\n         (is-right-angle? x z y)\n         (is-right-angle? y z x)))\n\
    \  (define (is-right-angle-triangle-with-max-side? x y z)\n    (and (is-right-angle?\
    \ x y z)\n         (is-right-angle? x z y)))\n  (define (is-right-angle-triangle-with-min-side?\
    \ x y z)\n    (and (is-right-angle? y z x)\n         (is-right-angle? x z y)))\n\
    \  (define (is-right-angle-triangle-with-middle-side? x y z)\n    (and (is-right-angle?\
    \ x y z)\n         (is-right-angle? y z x)))\n  (define (is-right-angle-triangle-with-max-side-and-min-side?\
    \ x y z)\n    (", "  (and (or (= a (sqrt (+ (* b b) (* c c))))\n           (=\
    \ b (sqrt (+ (* a a) (* c c))))\n           (= c (sqrt (+ (* a a) (* b b)))))\n\
    \       (and (> a 0) (> b 0) (> c 0))))\n", "  (define (square x) (* x x))\n \
    \ (define (hypotenuse x y) (sqrt (+ (square x) (square y))))\n  (define (is-right-angle?\
    \ x y z)\n    (= (hypotenuse x y) z))\n  (cond\n    [(is-right-angle? a b c) #t]\n\
    \    [(is-right-angle? a c b) #t]\n    [(is-right-angle? b c a) #t]\n    [else\
    \ #f]))\n", "  (and (and (<= a b) (<= b c))\n       (or (and (= a (sqrt (+ (*\
    \ b b) (* c c))))\n                (= b (sqrt (+ (* a a) (* c c))))\n        \
    \        (= c (sqrt (+ (* a a) (* b b)))))\n           (and (= b (sqrt (+ (* a\
    \ a) (* c c))))\n                (= c (sqrt (+ (* a a) (* b b))))\n          \
    \      (= a (sqrt (+ (* b b) (* c c)))))\n           (and (= c (sqrt (+ (* a a)\
    \ (* b b))))\n                (= a (sqrt (+ (* b b) (* c c))))\n             \
    \   (= b (sqrt (+ (* a a) (* c c))))))))\n", "  (and (or (= a (sqrt (+ (* b b)\
    \ (* c c))))\n           (= b (sqrt (+ (* a a) (* c c))))\n           (= c (sqrt\
    \ (+ (* a a) (* b b)))))\n       (and (or (= a b) (= a c) (= b c)))))\n", "  (define\
    \ (square x) (* x x))\n  (define (max x y) (if (&gt; x y) x y))\n  (define (min\
    \ x y) (if (&lt; x y) x y))\n  (define (hypotenuse x y) (max x y))\n  (define\
    \ (cathetus x y) (min x y))\n  (define (is-right-angle-triangle a b c)\n    (and\
    \ (or (= (square a) (+ (square b) (square c)))\n             (= (square b) (+\
    \ (square a) (square c)))\n             (= (square c) (+ (square a) (square b))))\n\
    \         (and (&gt; a 0) (&gt; b 0) (&gt; c 0))))\n  (is-right-angle-triangle\
    \ (hypotenuse a b) (cathetus a b) (cathetus a c)))\n</code>\n", "  (cond\n   \
    \ [(and (= (expt a 2) (+ (expt b 2) (expt c 2)))\n          (= (expt b 2) (+ (expt\
    \ a 2) (expt c 2)))\n          (= (expt c 2) (+ (expt a 2) (expt b 2))))\n   \
    \  #t]\n    [else #f]))\n", "  (and (and (<= a b) (<= b c))\n       (or (= (+\
    \ (* a a) (* b b)) (* c c))\n           (= (+ (* a a) (* c c)) (* b b))\n    \
    \       (= (+ (* b b) (* c c)) (* a a)))))\n", "  (and (or (= a (sqrt (+ (* b\
    \ b) (* c c))))\n           (= b (sqrt (+ (* a a) (* c c))))\n           (= c\
    \ (sqrt (+ (* a a) (* b b)))))\n       (and (or (= a b) (= a c) (= b c)))))\n",
  "  (and (or (= a (sqrt (+ (* b b) (* c c))))\n           (= b (sqrt (+ (* a a) (*\
    \ c c))))\n           (= c (sqrt (+ (* a a) (* b b)))))\n       (or (= a b) (=\
    \ a c) (= b c))))\n", "  (and (or (= a (sqrt (+ (* b b) (* c c))))\n         \
    \  (= b (sqrt (+ (* a a) (* c c))))\n           (= c (sqrt (+ (* a a) (* b b)))))\n\
    \       (and (> a 0) (> b 0) (> c 0))))\n", "  (and (and (<= a b) (<= b c))\n\
    \       (or (= (+ (* a a) (* b b)) (* c c))\n           (= (+ (* a a) (* c c))\
    \ (* b b))\n           (= (+ (* b b) (* c c)) (* a a)))))\n", "  (and (and (<=\
    \ a b) (<= b c))\n       (or (= (+ (* a a) (* b b)) (* c c))\n           (= (+\
    \ (* a a) (* c c)) (* b b))\n           (= (+ (* b b) (* c c)) (* a a)))))\n",
  "  (cond\n    [(and (= a (sqrt (+ (* b b) (* c c))))\n          (= b (sqrt (+ (*\
    \ a a) (* c c))))\n          (= c (sqrt (+ (* a a) (* b b))))) #t]\n    [else\
    \ #f]))\n", "  (and (or (= a (sqrt (+ (* b b) (* c c))))\n           (= b (sqrt\
    \ (+ (* a a) (* c c))))\n           (= c (sqrt (+ (* a a) (* b b)))))\n      \
    \ (and (> a 0) (> b 0) (> c 0))))\n", "  (and (or (= a (sqrt (+ (* b b) (* c c))))\n\
    \           (= b (sqrt (+ (* a a) (* c c))))\n           (= c (sqrt (+ (* a a)\
    \ (* b b)))))\n       (or (= a b) (= a c) (= b c))))\n", "  (and (or (= a (sqrt\
    \ (+ (* b b) (* c c))))\n           (= b (sqrt (+ (* a a) (* c c))))\n       \
    \    (= c (sqrt (+ (* a a) (* b b)))))\n       (and (or (= a b) (= a c) (= b c)))))\n",
  "  (and (or (= a (sqrt (+ (* b b) (* c c))))\n           (= b (sqrt (+ (* a a) (*\
    \ c c))))\n           (= c (sqrt (+ (* a a) (* b b)))))\n       (or (= a b) (=\
    \ a c) (= b c))))\n", "  (and (or (= a (sqrt (+ (* b b) (* c c))))\n         \
    \  (= b (sqrt (+ (* a a) (* c c))))\n           (= c (sqrt (+ (* a a) (* b b)))))\n\
    \       (and (> a 0) (> b 0) (> c 0))))\n", "  (and (or (= a (sqrt (+ (* b b)\
    \ (* c c))))\n           (= b (sqrt (+ (* a a) (* c c))))\n           (= c (sqrt\
    \ (+ (* a a) (* b b)))))\n       (and (or (= a b) (= a c) (= b c))\n         \
    \   (and (> a 0) (> b 0) (> c 0)))))\n", "  (and (or (= a (sqrt (+ (* b b) (*\
    \ c c))))\n           (= b (sqrt (+ (* a a) (* c c))))\n           (= c (sqrt\
    \ (+ (* a a) (* b b)))))\n       (and (not (= a 0))\n            (not (= b 0))\n\
    \            (not (= c 0)))))\n", "  (and (and (< a (+ b c)) (< b (+ a c)) (<\
    \ c (+ a b)))\n       (or (= (expt a 2) (+ (expt b 2) (expt c 2)))\n         \
    \  (= (expt b 2) (+ (expt a 2) (expt c 2)))\n           (= (expt c 2) (+ (expt\
    \ a 2) (expt b 2))))))\n", "  (and (or (= a (sqrt (+ (* b b) (* c c))))\n    \
    \       (= b (sqrt (+ (* a a) (* c c))))\n           (= c (sqrt (+ (* a a) (*\
    \ b b)))))\n       (and (> a 0) (> b 0) (> c 0))))\n", "  (and (and (<= a b) (<=\
    \ b c))\n       (or (= (+ (* a a) (* b b)) (* c c))\n           (= (+ (* a a)\
    \ (* c c)) (* b b))\n           (= (+ (* b b) (* c c)) (* a a)))))\n", "  (and\
    \ (or (= a (sqrt (+ (* b b) (* c c))))\n           (= b (sqrt (+ (* a a) (* c\
    \ c))))\n           (= c (sqrt (+ (* a a) (* b b)))))\n       (and (or (= a b)\
    \ (= a c) (= b c)))))\n", "  (and (or (= a (sqrt (+ (* b b) (* c c))))\n     \
    \      (= b (sqrt (+ (* a a) (* c c))))\n           (= c (sqrt (+ (* a a) (* b\
    \ b)))))\n       (and (or (= a b) (= a c) (= b c)))))\n", "  (and (and (&lt;=\
    \ a b) (&lt;= b c))\n       (or (= (+ (* a a) (* b b)) (* c c))\n           (=\
    \ (+ (* a a) (* c c)) (* b b))\n           (= (+ (* b b) (* c c)) (* a a)))))\n\
    </code>\n", "  (and (or (= a (sqrt (+ (* b b) (* c c))))\n           (= b (sqrt\
    \ (+ (* a a) (* c c))))\n           (= c (sqrt (+ (* a a) (* b b)))))\n      \
    \ (and (&gt; a 0) (&gt; b 0) (&gt; c 0))))\n", "  (cond\n    [(and (= (expt a\
    \ 2) (+ (expt b 2) (expt c 2)))\n          (= (expt b 2) (+ (expt a 2) (expt c\
    \ 2)))\n          (= (expt c 2) (+ (expt a 2) (expt b 2)))) #t]\n    [else #f]))\n",
  "  (and (or (= a (sqrt (+ (* b b) (* c c))))\n           (= b (sqrt (+ (* a a) (*\
    \ c c))))\n           (= c (sqrt (+ (* a a) (* b b)))))\n       (or (= a b) (=\
    \ a c) (= b c))))\n", "  (and (and (>= a b) (>= a c))\n       (and (<= (+ (* a\
    \ a) (* b b)) (* c c))\n            (<= (+ (* a a) (* c c)) (* b b))\n       \
    \     (<= (+ (* b b) (* c c)) (* a a)))))\n", "  (and (and (<= a b) (<= b c))\n\
    \       (or (= (expt a 2) (+ (expt b 2) (expt c 2)))\n           (= (expt b 2)\
    \ (+ (expt a 2) (expt c 2)))\n           (= (expt c 2) (+ (expt a 2) (expt b 2))))))\n",
  "  (cond\n    [(and (= (expt a 2) (+ (expt b 2) (expt c 2)))\n          (= (expt\
    \ b 2) (+ (expt a 2) (expt c 2)))\n          (= (expt c 2) (+ (expt a 2) (expt\
    \ b 2)))) #t]\n    [else #f]))\n", "  (cond\n    [(= a (sqrt (+ (sqr b) (sqr c))))\
    \ true]\n    [(= b (sqrt (+ (sqr a) (sqr c)))) true]\n    [(= c (sqrt (+ (sqr\
    \ a) (sqr b)))) true]\n    [else false]))\n", "  (and (or (= a (sqrt (+ (* b b)\
    \ (* c c))))\n           (= b (sqrt (+ (* a a) (* c c))))\n           (= c (sqrt\
    \ (+ (* a a) (* b b)))))\n       (and (not (= a 0))\n            (not (= b 0))\n\
    \            (not (= c 0)))))\n", "  (and (or (= a (sqrt (+ (* b b) (* c c))))\n\
    \           (= b (sqrt (+ (* a a) (* c c))))\n           (= c (sqrt (+ (* a a)\
    \ (* b b)))))\n       (and (> a 0) (> b 0) (> c 0))))\n", "  (and (or (= a (sqrt\
    \ (+ (* b b) (* c c))))\n           (= b (sqrt (+ (* a a) (* c c))))\n       \
    \    (= c (sqrt (+ (* a a) (* b b)))))\n       (and (or (= a (sqrt (+ (* b b)\
    \ (* c c))))\n                (= b (sqrt (+ (* a a) (* c c))))\n             \
    \   (= c (sqrt (+ (* a a) (* b b))))))))\n", "  (define (square x) (* x x))\n\
    \  (define (hypotenuse x y)\n    (sqrt (+ (square x) (square y))))\n  (define\
    \ (pythagorean-triple x y z)\n    (and (= (hypotenuse x y) z)\n         (= (hypotenuse\
    \ x z) y)\n         (= (hypotenuse y z) x)))\n  (pythagorean-triple a b c))\n",
  "  (and (and (<= a b) (<= b c))\n       (and (<= a (+ b c))\n            (<= b (+\
    \ a c))\n            (<= c (+ a b)))))\n", "  (and (or (= a (sqrt (+ (* b b) (*\
    \ c c))))\n           (= b (sqrt (+ (* a a) (* c c))))\n           (= c (sqrt\
    \ (+ (* a a) (* b b)))))\n       (or (= a b) (= a c) (= b c))))\n", "  (and (or\
    \ (= a (sqrt (+ (* b b) (* c c))))\n           (= b (sqrt (+ (* a a) (* c c))))\n\
    \           (= c (sqrt (+ (* a a) (* b b)))))\n       (and (> a 0) (> b 0) (>\
    \ c 0))))\n", "  (and (or (= a (sqrt (+ (* b b) (* c c))))\n           (= b (sqrt\
    \ (+ (* a a) (* c c))))\n           (= c (sqrt (+ (* a a) (* b b)))))\n      \
    \ (or (= a b) (= a c) (= b c))))\n", "  (and (or (= a (sqrt (+ (* b b) (* c c))))\n\
    \           (= b (sqrt (+ (* a a) (* c c))))\n           (= c (sqrt (+ (* a a)\
    \ (* b b)))))\n       (and (> a 0) (> b 0) (> c 0))))\n", "  (and (or (= a (sqrt\
    \ (+ (* b b) (* c c))))\n           (= b (sqrt (+ (* a a) (* c c))))\n       \
    \    (= c (sqrt (+ (* a a) (* b b)))))\n       (or (= a b) (= a c) (= b c))))\n",
  "  (and (or (= a (sqrt (+ (* b b) (* c c))))\n           (= b (sqrt (+ (* a a) (*\
    \ c c))))\n           (= c (sqrt (+ (* a a) (* b b)))))\n       (or (= a b) (=\
    \ a c) (= b c))))\n", "  (and (or (= a (sqrt (+ (* b b) (* c c))))\n         \
    \  (= b (sqrt (+ (* a a) (* c c))))\n           (= c (sqrt (+ (* a a) (* b b)))))\n\
    \       (and (> a 0) (> b 0) (> c 0))))\n", "  (and (and (<= a b) (<= b c))\n\
    \       (or (= (expt a 2) (+ (expt b 2) (expt c 2)))\n           (= (expt b 2)\
    \ (+ (expt a 2) (expt c 2)))\n           (= (expt c 2) (+ (expt a 2) (expt b 2))))))\n",
  "  (and (or (= a (sqrt (+ (* b b) (* c c))))\n           (= b (sqrt (+ (* a a) (*\
    \ c c))))\n           (= c (sqrt (+ (* a a) (* b b)))))\n       (or (= a b) (=\
    \ a c) (= b c))))\n", "  (and (or (= a (sqrt (+ (* b b) (* c c))))\n         \
    \  (= b (sqrt (+ (* a a) (* c c))))\n           (= c (sqrt (+ (* a a) (* b b)))))\n\
    \       (and (> a 0) (> b 0) (> c 0))))\n", "  (cond\n    [(and (= (sqr a) (+\
    \ (sqr b) (sqr c)))\n          (= (sqr b) (+ (sqr a) (sqr c)))\n          (= (sqr\
    \ c) (+ (sqr a) (sqr b))))\n     #t]\n    [else #f]))\n", "  (and (or (= a (sqrt\
    \ (+ (* b b) (* c c))))\n           (= b (sqrt (+ (* a a) (* c c))))\n       \
    \    (= c (sqrt (+ (* a a) (* b b)))))\n       (or (= a b) (= a c) (= b c))))\n",
  "  (and (or (= a (sqrt (+ (* b b) (* c c))))\n           (= b (sqrt (+ (* a a) (*\
    \ c c))))\n           (= c (sqrt (+ (* a a) (* b b)))))\n       (or (= a b) (=\
    \ a c) (= b c))))\n", "  (define (square x) (* x x))\n  (define (hypotenuse a\
    \ b)\n    (sqrt (+ (square a) (square b))))\n  (define (is-right-angle a b c)\n\
    \    (and (= c (hypotenuse a b))\n         (<= a b c)))\n  (or (is-right-angle\
    \ a b c)\n      (is-right-angle a c b)\n      (is-right-angle b c a)))\n", " \
    \ (and\n   (or (= a (sqrt (+ (* b b) (* c c))))\n       (= b (sqrt (+ (* a a)\
    \ (* c c))))\n       (= c (sqrt (+ (* a a) (* b b)))))\n   (and\n    (or (= a\
    \ b) (= a c) (= b c))\n    (or (= a b) (= a c) (= b c)))))\n</code>\nI don't know\
    \ how to make it work for the case when the sides are equal.\nI tried to use <code>and</code>\
    \ and <code>or</code> but it doesn't work.\n\n\nA:\n\nYou can use <code>sort</code>\
    \ to sort the sides in ascending order and then check if the square of the largest\
    \ side is equal to the sum of the squares of the other two sides.\n<code>(define\
    \ (right-angle-triangle a b c)\n  (let* ([sides (sort (list a b c) &lt;)]\n  \
    \       [a (car sides)]\n         [b (cadr sides)]\n         [c (caddr sides)])\n\
    \    (= (* c c) (+ (* a a) (* b b)))))\n</code>\n", "  (and (or (= a (sqrt (+\
    \ (* b b) (* c c))))\n           (= b (sqrt (+ (* a a) (* c c))))\n          \
    \ (= c (sqrt (+ (* a a) (* b b)))))\n       (and (> a 0) (> b 0) (> c 0))))\n",
  "  (cond\n    [(and (= (expt a 2) (+ (expt b 2) (expt c 2)))\n          (= (expt\
    \ b 2) (+ (expt a 2) (expt c 2)))\n          (= (expt c 2) (+ (expt a 2) (expt\
    \ b 2))))\n     #t]\n    [else #f]))\n", "  (and (and (> a 0) (> b 0) (> c 0))\n\
    \       (or (and (= a (sqrt (+ (* b b) (* c c))))\n                (= b (sqrt\
    \ (+ (* a a) (* c c))))\n                (= c (sqrt (+ (* a a) (* b b)))))\n \
    \          (and (= a (sqrt (+ (* b b) (* c c))))\n                (= b (sqrt (+\
    \ (* a a) (* c c))))\n                (= c (sqrt (+ (* a a) (* b b)))))\n    \
    \       (and (= a (sqrt (+ (* b b) (* c c))))\n                (= b (sqrt (+ (*\
    \ a a) (* c c))))\n                (= c (sqrt (+ (* a a) (* b b))))))))\n", " \
    \ (and (or (= a (sqrt (+ (* b b) (* c c))))\n           (= b (sqrt (+ (* a a)\
    \ (* c c))))\n           (= c (sqrt (+ (* a a) (* b b)))))\n       (and (or (=\
    \ a b) (= a c) (= b c)))))\n", "  (define (is_right_angle a b c)\n    (and (or\
    \ (= a (sqrt (+ (* b b) (* c c))))\n             (= b (sqrt (+ (* a a) (* c c))))\n\
    \             (= c (sqrt (+ (* a a) (* b b)))))\n         #t))\n  (cond ((and\
    \ (or (= a 0) (= b 0) (= c 0)) #f)\n         ((and (or (< a 0) (< b 0) (< c 0))\
    \ #f)\n         ((and (or (> a (+ b c)) (> b (+ a c)) (> c (+ a b))) #f)\n   \
    \      (is_right_angle a b c)))))\n", "  (and (or (= a (sqrt (+ (* b b) (* c c))))\n\
    \           (= b (sqrt (+ (* a a) (* c c))))\n           (= c (sqrt (+ (* a a)\
    \ (* b b)))))\n       (and (or (= a b) (= a c) (= b c)))))\n", "  (or (and (=\
    \ a (sqrt (+ (* b b) (* c c))))\n           (= b (sqrt (+ (* a a) (* c c))))\n\
    \           (= c (sqrt (+ (* a a) (* b b)))))\n      (and (= b (sqrt (+ (* a a)\
    \ (* c c))))\n           (= c (sqrt (+ (* a a) (* b b))))\n           (= a (sqrt\
    \ (+ (* b b) (* c c)))))\n      (and (= c (sqrt (+ (* a a) (* b b))))\n      \
    \     (= a (sqrt (+ (* b b) (* c c))))\n           (= b (sqrt (+ (* a a) (* c\
    \ c)))))))\n", "  (and (and (<= a b) (<= b c))\n       (or (= (+ (* a a) (* b\
    \ b)) (* c c))\n           (= (+ (* a a) (* c c)) (* b b))\n           (= (+ (*\
    \ b b) (* c c)) (* a a)))))\n", "  (and (> a 0) (> b 0) (> c 0)\n       (or (=\
    \ (expt a 2) (+ (expt b 2) (expt c 2)))\n           (= (expt b 2) (+ (expt a 2)\
    \ (expt c 2)))\n           (= (expt c 2) (+ (expt a 2) (expt b 2))))))\n", " \
    \ (cond\n    [(and (= (expt a 2) (+ (expt b 2) (expt c 2)))\n          (= (expt\
    \ b 2) (+ (expt a 2) (expt c 2)))\n          (= (expt c 2) (+ (expt a 2) (expt\
    \ b 2)))) #t]\n    [else #f]))\n", "  (and (or (= a (sqrt (+ (* b b) (* c c))))\n\
    \           (= b (sqrt (+ (* a a) (* c c))))\n           (= c (sqrt (+ (* a a)\
    \ (* b b)))))\n       (and (< a b) (< b c))))\n", "  (and (or (= a (sqrt (+ (*\
    \ b b) (* c c))))\n           (= b (sqrt (+ (* a a) (* c c))))\n           (=\
    \ c (sqrt (+ (* a a) (* b b)))))\n       (and (> a 0) (> b 0) (> c 0))))\n", " \
    \ (and (or (= a (sqrt (+ (* b b) (* c c))))\n           (= b (sqrt (+ (* a a)\
    \ (* c c))))\n           (= c (sqrt (+ (* a a) (* b b)))))\n       (and (> a 0)\
    \ (> b 0) (> c 0))))\n", "  (and (and (<= a b) (<= b c))\n       (or (= (expt\
    \ a 2) (+ (expt b 2) (expt c 2)))\n           (= (expt b 2) (+ (expt a 2) (expt\
    \ c 2)))\n           (= (expt c 2) (+ (expt a 2) (expt b 2))))))\n", "  (and (or\
    \ (= a (sqrt (+ (* b b) (* c c))))\n           (= b (sqrt (+ (* a a) (* c c))))\n\
    \           (= c (sqrt (+ (* a a) (* b b)))))\n       (and (> a 0) (> b 0) (>\
    \ c 0))))\n", "  (and (or (= a (sqrt (+ (* b b) (* c c))))\n           (= b (sqrt\
    \ (+ (* a a) (* c c))))\n           (= c (sqrt (+ (* a a) (* b b)))))\n      \
    \ (and (> a 0) (> b 0) (> c 0))))\n", "  (and (or (= a (sqrt (+ (* b b) (* c c))))\n\
    \           (= b (sqrt (+ (* a a) (* c c))))\n           (= c (sqrt (+ (* a a)\
    \ (* b b)))))\n       (and (or (= a b) (= a c) (= b c)))))\n", "  (and (and (>=\
    \ a b) (>= a c))\n       (and (>= b a) (>= b c))\n       (and (>= c a) (>= c b))\n\
    \       (and (= (expt a 2) (+ (expt b 2) (expt c 2)))\n            (= (expt b\
    \ 2) (+ (expt a 2) (expt c 2)))\n            (= (expt c 2) (+ (expt a 2) (expt\
    \ b 2))))))\n", "  (and (or (= a (sqrt (+ (* b b) (* c c))))\n           (= b\
    \ (sqrt (+ (* a a) (* c c))))\n           (= c (sqrt (+ (* a a) (* b b)))))\n\
    \       (and (> a 0) (> b 0) (> c 0))))\n", "  (and (or (= a (sqrt (+ (* b b)\
    \ (* c c))))\n           (= b (sqrt (+ (* a a) (* c c))))\n           (= c (sqrt\
    \ (+ (* a a) (* b b)))))\n       (and (> a 0) (> b 0) (> c 0))))\n", "  (define\
    \ (square x) (* x x))\n  (define (max-of-three a b c)\n    (cond ((> a b) (max-of-two\
    \ a c))\n          ((> b c) (max-of-two b a))\n          (else (max-of-two c b))))\n\
    \  (define (max-of-two a b)\n    (if (> a b) a b))\n  (define (min-of-three a\
    \ b c)\n    (cond ((< a b) (min-of-two a c))\n          ((< b c) (min-of-two b\
    \ a))\n          (else (min-of-two c b))))\n  (define (min-of-two a b)\n    (if\
    \ (< a b) a b))\n  (define (is-right-angle-triangle a b c)\n    (let ((max (max-of-three\
    \ a b c))\n          (min (min-of-three a b c)))\n      (= (square max) (+ (square\
    \ min) (square (- max min))))))\n  (is-right-angle-triangle a b c))\n", "  (and\
    \ (or (= a (sqrt (+ (* b b) (* c c))))\n           (= b (sqrt (+ (* a a) (* c\
    \ c))))\n           (= c (sqrt (+ (* a a) (* b b)))))\n       (or (= a b) (= a\
    \ c) (= b c))))\n", "  (and (or (= a (sqrt (+ (* b b) (* c c))))\n           (=\
    \ b (sqrt (+ (* a a) (* c c))))\n           (= c (sqrt (+ (* a a) (* b b)))))\n\
    \       (and (or (= a b) (= a c) (= b c)))))\n", "  (and (or (= a (sqrt (+ (*\
    \ b b) (* c c))))\n           (= b (sqrt (+ (* a a) (* c c))))\n           (=\
    \ c (sqrt (+ (* a a) (* b b)))))\n       (and (or (= a b) (= a c) (= b c)))))\n",
  "  (and (and (<= a b) (<= b c))\n       (or (= (+ (* a a) (* b b)) (* c c))\n  \
    \         (= (+ (* a a) (* c c)) (* b b))\n           (= (+ (* b b) (* c c)) (*\
    \ a a)))))\n", "  (let ([max (max a b c)])\n    (and (= (* max max) (+ (* a a)\
    \ (* b b) (* c c)))\n         (or (= max a) (= max b) (= max c)))))\n", "  (and\
    \ (or (= a (sqrt (+ (* b b) (* c c))))\n           (= b (sqrt (+ (* a a) (* c\
    \ c))))\n           (= c (sqrt (+ (* a a) (* b b)))))\n       (and (or (= a b)\
    \ (= a c) (= b c)))))\n", "  (cond\n    [(and (> a 0) (> b 0) (> c 0))\n     (let\
    \ ([max (max a b c)])\n       (cond\n         [(= max a) (= (expt b 2) (+ (expt\
    \ c 2) (expt a 2)))]\n         [(= max b) (= (expt a 2) (+ (expt c 2) (expt b\
    \ 2)))]\n         [(= max c) (= (expt a 2) (+ (expt b 2) (expt c 2)))]))]\n  \
    \  [else #f]))\n", "  (let ([max (max a b c)])\n    (and (= (sqrt (+ (* (- max\
    \ a) (- max a)) (* (- max b) (- max b)))) max)\n         (= (sqrt (+ (* (- max\
    \ a) (- max a)) (* (- max c) (- max c)))) max)\n         (= (sqrt (+ (* (- max\
    \ b) (- max b)) (* (- max c) (- max c)))) max))))\n", "  (and (and (<= a b) (<=\
    \ b c))\n       (or (= (expt a 2) (+ (expt b 2) (expt c 2)))\n           (= (expt\
    \ b 2) (+ (expt a 2) (expt c 2)))\n           (= (expt c 2) (+ (expt a 2) (expt\
    \ b 2))))))\n", "  (cond\n    [(and (= (expt a 2) (+ (expt b 2) (expt c 2)))\n\
    \          (= (expt b 2) (+ (expt a 2) (expt c 2)))\n          (= (expt c 2) (+\
    \ (expt a 2) (expt b 2)))) #t]\n    [else #f]))\n", "  (and (or (= a (sqrt (+\
    \ (* b b) (* c c))))\n           (= b (sqrt (+ (* a a) (* c c))))\n          \
    \ (= c (sqrt (+ (* a a) (* b b)))))\n       (and (> a 0) (> b 0) (> c 0))))\n",
  "  (and (and (<= a b) (<= b c))\n       (and (<= (* a a) (+ (* b b) (* c c)))\n\
    \            (<= (+ (* b b) (* c c)) (* a a)))))\n", "  (and (or (= a (sqrt (+\
    \ (* b b) (* c c))))\n           (= b (sqrt (+ (* a a) (* c c))))\n          \
    \ (= c (sqrt (+ (* a a) (* b b)))))\n       (and (or (= a b) (= a c) (= b c)))))\n",
  "  (and (and (<= a b) (<= b c))\n       (or (= (expt a 2) (+ (expt b 2) (expt c\
    \ 2)))\n           (= (expt b 2) (+ (expt a 2) (expt c 2)))\n           (= (expt\
    \ c 2) (+ (expt a 2) (expt b 2))))))\n", "  (and (or (= a (sqrt (+ (* b b) (*\
    \ c c))))\n           (= b (sqrt (+ (* a a) (* c c))))\n           (= c (sqrt\
    \ (+ (* a a) (* b b)))))\n       (and (or (= a b) (= a c) (= b c)))))\n", "  (and\
    \ (or (= a (sqrt (+ (* b b) (* c c))))\n           (= b (sqrt (+ (* a a) (* c\
    \ c))))\n           (= c (sqrt (+ (* a a) (* b b)))))\n       (and (> a 0) (>\
    \ b 0) (> c 0))))\n", "  (and (or (= a (sqrt (+ (* b b) (* c c))))\n         \
    \  (= b (sqrt (+ (* a a) (* c c))))\n           (= c (sqrt (+ (* a a) (* b b)))))\n\
    \       (and (or (= a b) (= a c) (= b c)))))\n", "  (and (or (= a (sqrt (+ (*\
    \ b b) (* c c))))\n           (= b (sqrt (+ (* a a) (* c c))))\n           (=\
    \ c (sqrt (+ (* a a) (* b b)))))\n       (or (= a (sqrt (- (* b b) (* c c))))\n\
    \           (= b (sqrt (- (* a a) (* c c))))\n           (= c (sqrt (- (* a a)\
    \ (* b b)))))))\n", "  (define (square x) (* x x))\n  (define (max x y) (if (&gt;\
    \ x y) x y))\n  (define (min x y) (if (&lt; x y) x y))\n  (define (hypotenuse\
    \ x y) (max x y))\n  (define (adjacent x y) (min x y))\n  (define (opposite x\
    \ y) (sqrt (- (square x) (square y))))\n  (define (is-right-angle? x y) (= (square\
    \ x) (+ (square y) (square (opposite x y)))))\n  (is-right-angle? (hypotenuse\
    \ a b) (adjacent a b)))\n", "  (cond\n    [(and (= (expt a 2) (+ (expt b 2) (expt\
    \ c 2)))\n          (= (expt b 2) (+ (expt a 2) (expt c 2)))\n          (= (expt\
    \ c 2) (+ (expt a 2) (expt b 2)))) #t]\n    [else #f]))\n", "  (and (or (= a (sqrt\
    \ (+ (* b b) (* c c))))\n           (= b (sqrt (+ (* a a) (* c c))))\n       \
    \    (= c (sqrt (+ (* a a) (* b b)))))\n       (and (> a 0) (> b 0) (> c 0))))\n",
  "  (and (or (= a (sqrt (+ (* b b) (* c c))))\n           (= b (sqrt (+ (* a a) (*\
    \ c c))))\n           (= c (sqrt (+ (* a a) (* b b)))))\n       (and (or (= a\
    \ b) (= a c) (= b c)))))\n", "  (and (or (= a (sqrt (+ (* b b) (* c c))))\n  \
    \         (= b (sqrt (+ (* a a) (* c c))))\n           (= c (sqrt (+ (* a a) (*\
    \ b b)))))\n       (and (or (= a b) (= a c) (= b c)))))\n", "  (and (and (< a\
    \ (+ b c))\n            (< b (+ a c))\n            (< c (+ a b)))\n       (or\
    \ (= (expt a 2) (+ (expt b 2) (expt c 2)))\n           (= (expt b 2) (+ (expt\
    \ a 2) (expt c 2)))\n           (= (expt c 2) (+ (expt a 2) (expt b 2))))))\n",
  "  (cond\n    [(= a (sqrt (+ (sqr b) (sqr c)))) #t]\n    [(= b (sqrt (+ (sqr a)\
    \ (sqr c)))) #t]\n    [(= c (sqrt (+ (sqr a) (sqr b)))) #t]\n    [else #f]))\n",
  "  (and (or (= a (sqrt (+ (* b b) (* c c))))\n           (= b (sqrt (+ (* a a) (*\
    \ c c))))\n           (= c (sqrt (+ (* a a) (* b b)))))\n       (and (or (= a\
    \ b) (= a c) (= b c)))))\n", "  (and (or (= a (sqrt (+ (* b b) (* c c))))\n  \
    \         (= b (sqrt (+ (* a a) (* c c))))\n           (= c (sqrt (+ (* a a) (*\
    \ b b)))))\n       (and (or (= a b) (= a c) (= b c)))))\n", "  (and (or (= a (sqrt\
    \ (+ (* b b) (* c c))))\n           (= b (sqrt (+ (* a a) (* c c))))\n       \
    \    (= c (sqrt (+ (* a a) (* b b)))))\n       (and (or (= a b) (= a c) (= b c)))))\n",
  "  (define (square x) (* x x))\n  (define (hypotenuse a b)\n    (sqrt (+ (square\
    \ a) (square b))))\n  (define (is-right-angle? a b c)\n    (and (or (= (hypotenuse\
    \ a b) c)\n             (= (hypotenuse a c) b)\n             (= (hypotenuse b\
    \ c) a))\n         (or (= a 90) (= b 90) (= c 90))))\n  (is-right-angle? a b c))\n",
  "  (define (square n) (* n n))\n  (define (is-right-angle-triangle a b c)\n    (and\
    \ (= (square a) (+ (square b) (square c)))\n         (= (square b) (+ (square\
    \ a) (square c)))\n         (= (square c) (+ (square a) (square b)))))\n  (is-right-angle-triangle\
    \ a b c))\n", "  (and (or (= a (sqrt (+ (* b b) (* c c))))\n           (= b (sqrt\
    \ (+ (* a a) (* c c))))\n           (= c (sqrt (+ (* a a) (* b b)))))\n      \
    \ (or (= a b) (= a c) (= b c))))\n", "  (cond\n    [(and (= a (sqrt (+ (* b b)\
    \ (* c c))))\n          (= b (sqrt (+ (* a a) (* c c))))\n          (= c (sqrt\
    \ (+ (* a a) (* b b))))) #t]\n    [else #f]))\n", "  (and (and (<= a b) (<= b\
    \ c))\n       (and (<= (+ (* a a) (* b b)) (* c c))\n            (<= (* c c) (+\
    \ (* a a) (* b b))))))\n", "  (cond\n    [(= a (sqrt (+ (* b b) (* c c)))) #t]\n\
    \    [(= b (sqrt (+ (* a a) (* c c)))) #t]\n    [(= c (sqrt (+ (* a a) (* b b))))\
    \ #t]\n    [else #f]))\n", "  (and (or (= a (sqrt (+ (* b b) (* c c))))\n    \
    \       (= b (sqrt (+ (* a a) (* c c))))\n           (= c (sqrt (+ (* a a) (*\
    \ b b)))))\n       (or (= a b) (= a c) (= b c))))\n", "  (and\n   (and (<= a b)\
    \ (<= b c))\n   (and (<= a b) (<= a c))\n   (and (<= b a) (<= b c))\n   (and (<=\
    \ b a) (<= c a))\n   (and (<= c a) (<= c b))\n   (and (<= c a) (<= b a))))\n",
  "  (cond\n    [(and (= (expt a 2) (+ (expt b 2) (expt c 2)))\n          (= (expt\
    \ b 2) (+ (expt a 2) (expt c 2)))\n          (= (expt c 2) (+ (expt a 2) (expt\
    \ b 2)))) #t]\n    [else #f]))\n", "  (and (or (= a (sqrt (+ (* b b) (* c c))))\n\
    \           (= b (sqrt (+ (* a a) (* c c))))\n           (= c (sqrt (+ (* a a)\
    \ (* b b)))))\n       (and (or (= a b) (= a c) (= b c)))))\n", "  (and (and (&lt;=\
    \ a b) (&lt;= b c))\n       (or (= (+ (* a a) (* b b)) (* c c))\n           (=\
    \ (+ (* a a) (* c c)) (* b b))\n           (= (+ (* b b) (* c c)) (* a a)))))\n\
    </code>\n", "  (and (or (= a (sqrt (+ (* b b) (* c c))))\n           (= b (sqrt\
    \ (+ (* a a) (* c c))))\n           (= c (sqrt (+ (* a a) (* b b)))))\n      \
    \ (and (or (= a b) (= a c) (= b c)))))\n", "  (cond\n    [(and (= (sqr a) (+ (sqr\
    \ b) (sqr c))) (= (sqr b) (+ (sqr a) (sqr c))) (= (sqr c) (+ (sqr a) (sqr b))))\
    \ #t]\n    [else #f]))\n", "  (cond\n    [(and (= (expt a 2) (+ (expt b 2) (expt\
    \ c 2)))\n          (= (expt b 2) (+ (expt a 2) (expt c 2)))\n          (= (expt\
    \ c 2) (+ (expt a 2) (expt b 2))))\n     #t]\n    [else #f]))\n", "  (and (or\
    \ (= a (sqrt (+ (* b b) (* c c))))\n           (= b (sqrt (+ (* a a) (* c c))))\n\
    \           (= c (sqrt (+ (* a a) (* b b)))))\n       (and (or (= a b) (= a c)\
    \ (= b c)))))\n", "  (define (square x) (* x x))\n  (define (sum-of-squares x\
    \ y) (+ (square x) (square y)))\n  (define (is-right-angle? x y z)\n    (cond\n\
    \      [(= (sum-of-squares x y) (square z)) #t]\n      [(= (sum-of-squares x z)\
    \ (square y)) #t]\n      [(= (sum-of-squares y z) (square x)) #t]\n      [else\
    \ #f]))\n  (is-right-angle? a b c))\n", "  (or (and (= a (sqrt (+ (* b b) (* c\
    \ c))))\n           (= b (sqrt (+ (* a a) (* c c))))\n           (= c (sqrt (+\
    \ (* a a) (* b b)))))\n      (and (= a (sqrt (+ (* b b) (* c c))))\n         \
    \  (= b (sqrt (+ (* a a) (* c c))))\n           (= c (sqrt (+ (* a a) (* b b)))))\n\
    \      (and (= a (sqrt (+ (* b b) (* c c))))\n           (= b (sqrt (+ (* a a)\
    \ (* c c))))\n           (= c (sqrt (+ (* a a) (* b b)))))))\n", "  (and (or (=\
    \ a (sqrt (+ (* b b) (* c c))))\n           (= b (sqrt (+ (* a a) (* c c))))\n\
    \           (= c (sqrt (+ (* a a) (* b b)))))\n       (or (= a b) (= a c) (= b\
    \ c))))\n", "  (and (or (= a (sqrt (+ (* b b) (* c c))))\n           (= b (sqrt\
    \ (+ (* a a) (* c c))))\n           (= c (sqrt (+ (* a a) (* b b)))))\n      \
    \ (and (or (= a b) (= a c) (= b c)))))\n", "  (and\n   (or (= a (sqrt (+ (* b\
    \ b) (* c c))))\n       (= b (sqrt (+ (* a a) (* c c))))\n       (= c (sqrt (+\
    \ (* a a) (* b b)))))\n   (and (> a 0) (> b 0) (> c 0))))\n", "  (and (or (= a\
    \ (sqrt (+ (* b b) (* c c))))\n           (= b (sqrt (+ (* a a) (* c c))))\n \
    \          (= c (sqrt (+ (* a a) (* b b)))))\n       (and (or (= a b) (= a c)\
    \ (= b c)))))\n", "  (and (or (= a (sqrt (+ (* b b) (* c c))))\n           (=\
    \ b (sqrt (+ (* a a) (* c c))))\n           (= c (sqrt (+ (* a a) (* b b)))))\n\
    \       (and (> a 0) (> b 0) (> c 0))))\n", "  (and (and (&lt;= a b) (&lt;= b\
    \ c))\n       (or (and (= a (sqrt (+ (* b b) (* c c))))\n                (= b\
    \ (sqrt (+ (* a a) (* c c))))\n                (= c (sqrt (+ (* a a) (* b b)))))\n\
    \           (and (= a (sqrt (+ (* b b) (* c c))))\n                (= b (sqrt\
    \ (+ (* a a) (* c c))))\n                (= c (sqrt (+ (* a a) (* b b)))))\n \
    \          (and (= a (sqrt (+ (* b b) (* c c))))\n                (= b (sqrt (+\
    \ (* a a) (* c c))))\n                (= c (sqrt (+ (* a a) (* b b))))))))\n",
  "  (and (and (< a (+ b c)) (< b (+ a c)) (< c (+ a b)))\n       (or (= (expt a 2)\
    \ (+ (expt b 2) (expt c 2)))\n           (= (expt b 2) (+ (expt a 2) (expt c 2)))\n\
    \           (= (expt c 2) (+ (expt a 2) (expt b 2))))))\n", "  (define (square\
    \ x) (* x x))\n  (define (hypotenuse x y)\n    (sqrt (+ (square x) (square y))))\n\
    \  (define (is-right-angle x y z)\n    (and (= z (hypotenuse x y))\n         (or\
    \ (= x (hypotenuse y z))\n             (= y (hypotenuse x z)))))\n  (cond\n  \
    \  [(and (is-right-angle a b c)\n          (is-right-angle b c a)\n          (is-right-angle\
    \ c a b)) #t]\n    [else #f]))\n", "  (and (or (= a (sqrt (+ (* b b) (* c c))))\n\
    \           (= b (sqrt (+ (* a a) (* c c))))\n           (= c (sqrt (+ (* a a)\
    \ (* b b)))))\n       (or (= a b) (= a c) (= b c))))\n", "  (and (or (= a (sqrt\
    \ (+ (* b b) (* c c))))\n           (= b (sqrt (+ (* a a) (* c c))))\n       \
    \    (= c (sqrt (+ (* a a) (* b b)))))\n       (and (> a 0) (> b 0) (> c 0))))\n",
  "  (and (or (= a (sqrt (+ (* b b) (* c c))))\n           (= b (sqrt (+ (* a a) (*\
    \ c c))))\n           (= c (sqrt (+ (* a a) (* b b)))))\n       (and (or (= a\
    \ b) (= a c) (= b c)))))\n", "  (and (and (<= a b) (<= b c))\n       (= (expt\
    \ a 2) (+ (expt b 2) (expt c 2)))))\n", "  (define (square x) (* x x))\n  (define\
    \ (hypotenuse x y) (sqrt (+ (square x) (square y))))\n  (define (is-right-angle?\
    \ x y z)\n    (and (= (hypotenuse x y) z)\n         (= (hypotenuse x z) y)\n \
    \        (= (hypotenuse y z) x)))\n  (is-right-angle? a b c))\n", "  (define (square\
    \ x) (* x x))\n  (define (is_right_angle_triangle a b c)\n    (and (or (= (square\
    \ a) (+ (square b) (square c)))\n             (= (square b) (+ (square a) (square\
    \ c)))\n             (= (square c) (+ (square a) (square b))))\n         (and\
    \ (> a 0) (> b 0) (> c 0))))\n  (is_right_angle_triangle a b c))\n", "  (define\
    \ (square x) (* x x))\n  (and (and (&lt;= a b) (&lt;= b c))\n       (= (+ (square\
    \ a) (square b)) (square c))))\n", "  (and (or (= a (sqrt (+ (* b b) (* c c))))\n\
    \           (= b (sqrt (+ (* a a) (* c c))))\n           (= c (sqrt (+ (* a a)\
    \ (* b b)))))\n       (and (> a 0) (> b 0) (> c 0))))\n", "  (and (= (expt a 2)\
    \ (+ (expt b 2) (expt c 2)))\n       (or (= a b) (= b c) (= a c))))\n", "  (and\
    \ (and (<= a b) (<= b c))\n       (and (<= (* a a) (+ (* b b) (* c c)))\n    \
    \        (<= (+ (* b b) (* c c)) (* a a)))))\n", "  (and (or (= a (sqrt (+ (*\
    \ b b) (* c c))))\n           (= b (sqrt (+ (* a a) (* c c))))\n           (=\
    \ c (sqrt (+ (* a a) (* b b)))))\n       (or (= a b) (= a c) (= b c))))\n", " \
    \ (and (or (= a (sqrt (+ (* b b) (* c c))))\n           (= b (sqrt (+ (* a a)\
    \ (* c c))))\n           (= c (sqrt (+ (* a a) (* b b)))))\n       (and (> a 0)\
    \ (> b 0) (> c 0))))\n", "  (and (or (= a (sqrt (+ (* b b) (* c c))))\n      \
    \     (= b (sqrt (+ (* a a) (* c c))))\n           (= c (sqrt (+ (* a a) (* b\
    \ b)))))\n       (or (= a b) (= a c) (= b c))))\n", "  (and (or (= a (sqrt (+\
    \ (* b b) (* c c))))\n           (= b (sqrt (+ (* a a) (* c c))))\n          \
    \ (= c (sqrt (+ (* a a) (* b b)))))\n       (or (= a b) (= a c) (= b c))))\n",
  "  (and (or (= a (sqrt (+ (* b b) (* c c))))\n           (= b (sqrt (+ (* a a) (*\
    \ c c))))\n           (= c (sqrt (+ (* a a) (* b b)))))\n       (and (or (= a\
    \ b) (= a c) (= b c)))))\n", "  (and (or (= a (sqrt (+ (* b b) (* c c))))\n  \
    \         (= b (sqrt (+ (* a a) (* c c))))\n           (= c (sqrt (+ (* a a) (*\
    \ b b)))))\n       (and (or (= a b) (= a c) (= b c)))))\n", "  (and (or (= a (sqrt\
    \ (+ (* b b) (* c c))))\n           (= b (sqrt (+ (* a a) (* c c))))\n       \
    \    (= c (sqrt (+ (* a a) (* b b)))))\n       (and (> a 0) (> b 0) (> c 0))))\n",
  "  (and (or (= a (sqrt (+ (* b b) (* c c))))\n           (= b (sqrt (+ (* a a) (*\
    \ c c))))\n           (= c (sqrt (+ (* a a) (* b b)))))\n       (and (> a 0) (>\
    \ b 0) (> c 0))))\n", "  (and (or (= a (sqrt (+ (* b b) (* c c))))\n         \
    \  (= b (sqrt (+ (* a a) (* c c))))\n           (= c (sqrt (+ (* a a) (* b b)))))\n\
    \       (and (> a 0) (> b 0) (> c 0))))\n", "  (and (or (= a (sqrt (+ (* b b)\
    \ (* c c))))\n           (= b (sqrt (+ (* a a) (* c c))))\n           (= c (sqrt\
    \ (+ (* a a) (* b b)))))\n       (and (or (= a b) (= a c) (= b c)))))\n", "  (and\
    \ (or (= a (sqrt (+ (* b b) (* c c))))\n           (= b (sqrt (+ (* a a) (* c\
    \ c))))\n           (= c (sqrt (+ (* a a) (* b b)))))\n       (and (< a (+ b c))\n\
    \            (< b (+ a c))\n            (< c (+ a b)))))\n", "  (and (or (= a\
    \ (sqrt (+ (* b b) (* c c))))\n           (= b (sqrt (+ (* a a) (* c c))))\n \
    \          (= c (sqrt (+ (* a a) (* b b)))))\n       (or (= a b) (= a c) (= b\
    \ c))))\n", "  (cond\n    [(and (= (sqr a) (+ (sqr b) (sqr c))) (= (sqr b) (+\
    \ (sqr a) (sqr c))) (= (sqr c) (+ (sqr a) (sqr b)))) #t]\n    [else #f]))\n",
  "  (define (is_right_angle_triangle a b c)\n    (and (or (= a (sqrt (+ (* b b) (*\
    \ c c))))\n             (= b (sqrt (+ (* a a) (* c c))))\n             (= c (sqrt\
    \ (+ (* a a) (* b b)))))\n         #t))\n  (cond ((and (and (and (<= a b) (<=\
    \ b c))\n                  (<= a c))\n             (is_right_angle_triangle a\
    \ b c))\n         #t)\n        ((and (and (and (<= a b) (<= b c))\n          \
    \        (<= a c))\n             (not (is_right_angle_triangle a b c)))\n    \
    \     #f)\n        ((and (and (and (<= a c) (<= c b))\n                  (<= a\
    \ b))\n             (is_right_angle_triangle a c b))\n         #t)\n        ((and\
    \ (and (and (<= a c) (<= c b))\n                  (<= a b))\n             (not\
    \ (is_right_angle_triangle a c b)))\n         #f)\n        ((and (and (and (<=\
    \ b a) (<= a c))\n                  (<= b c))\n             (is_right_angle_triangle\
    \ b a c))\n         #t)\n        ((and (and (and (<= b a) (<= a c))\n        \
    \          (<= b c))\n             (not (is_right_angle_triangle b a c)))\n  \
    \       #f)\n        ((and (and (and (<= b c) (<= c a))\n                  (<=\
    \ b a))\n             (is_right_angle_triangle b c a))\n         #t)\n       \
    \ ((and (and (and (<= b c) (<= c a))\n                  (<= b a))\n          \
    \   (not (is_right_angle_triangle b c a)))\n         #f)\n        ((and (and (and\
    \ (<= c a) (<= a b))\n                  (<= c b))\n             (is_right_angle_triangle\
    \ c a b))\n         #t)\n        ((and (and (and (<= c a) (<= a b))\n        \
    \          (<=", "  (and (or (= a (sqrt (+ (* b b) (* c c))))\n           (= b\
    \ (sqrt (+ (* a a) (* c c))))\n           (= c (sqrt (+ (* a a) (* b b)))))\n\
    \       (and (or (= a b) (= a c) (= b c)))))\n", "  (and (= (sqrt (+ (* a a) (*\
    \ b b))) c)\n       (= (sqrt (+ (* a a) (* c c))) b)\n       (= (sqrt (+ (* b\
    \ b) (* c c))) a)))\n", "  (and (or (= a (sqrt (+ (* b b) (* c c))))\n       \
    \    (= b (sqrt (+ (* a a) (* c c))))\n           (= c (sqrt (+ (* a a) (* b b)))))\n\
    \       (and (or (= a b) (= a c) (= b c)))))\n", "  (cond\n    [(and (= (expt\
    \ a 2) (+ (expt b 2) (expt c 2)))\n          (= (expt b 2) (+ (expt a 2) (expt\
    \ c 2)))\n          (= (expt c 2) (+ (expt a 2) (expt b 2))))\n     #t]\n    [else\
    \ #f]))\n", "  (and (or (= a (sqrt (+ (* b b) (* c c))))\n           (= b (sqrt\
    \ (+ (* a a) (* c c))))\n           (= c (sqrt (+ (* a a) (* b b)))))\n      \
    \ (and (or (= a b) (= a c) (= b c)))))\n", "  (cond\n    [(or (= a 0) (= b 0)\
    \ (= c 0)) #f]\n    [(and (= (square a) (+ (square b) (square c)))\n         \
    \ (= (square b) (+ (square a) (square c)))\n          (= (square c) (+ (square\
    \ a) (square b)))) #t]\n    [else #f]))\n", "  (and (or (= a (sqrt (+ (* b b)\
    \ (* c c))))\n           (= b (sqrt (+ (* a a) (* c c))))\n           (= c (sqrt\
    \ (+ (* a a) (* b b)))))\n       (or (= a b) (= a c) (= b c))))\n", "  (and (or\
    \ (= a (sqrt (+ (* b b) (* c c))))\n           (= b (sqrt (+ (* a a) (* c c))))\n\
    \           (= c (sqrt (+ (* a a) (* b b)))))\n       (and (or (= a b) (= a c)\
    \ (= b c)))))\n", "  (and (and (> a 0) (> b 0) (> c 0))\n       (or (and (= a\
    \ (sqrt (+ (* b b) (* c c))))\n                (= b (sqrt (+ (* a a) (* c c))))\n\
    \                (= c (sqrt (+ (* a a) (* b b)))))\n           (and (= a (sqrt\
    \ (+ (* b b) (* c c))))\n                (= b (sqrt (+ (* a a) (* c c))))\n  \
    \              (= c (sqrt (+ (* a a) (* b b)))))\n           (and (= a (sqrt (+\
    \ (* b b) (* c c))))\n                (= b (sqrt (+ (* a a) (* c c))))\n     \
    \           (= c (sqrt (+ (* a a) (* b b))))))))\n", "  (cond\n    [(and (= a\
    \ (sqrt (+ (* b b) (* c c))))\n          (= b (sqrt (+ (* a a) (* c c))))\n  \
    \        (= c (sqrt (+ (* a a) (* b b))))) #t]\n    [else #f]))\n", "  (define\
    \ (square x) (* x x))\n  (define (max3 x y z)\n    (cond\n      [(> x y) (max3\
    \ x z y)]\n      [(> x z) (max3 y x z)]\n      [else (max3 y z x)]))\n  (define\
    \ (min3 x y z)\n    (cond\n      [(< x y) (min3 x z y)]\n      [(< x z) (min3\
    \ y x z)]\n      [else (min3 y z x)]))\n  (define (mid3 x y z)\n    (cond\n  \
    \    [(and (> x y) (< x z)) x]\n      [(and (> y x) (< y z)) y]\n      [(and (>\
    \ z x) (< z y)) z]\n      [else 0]))\n  (define (is-right-triangle a b c)\n  \
    \  (and (= (square a) (+ (square b) (square c)))\n         (= (square b) (+ (square\
    \ a) (square c)))\n         (= (square c) (+ (square a) (square b)))))\n  (is-right-triangle\
    \ (max3 a b c) (mid3 a b c) (min3 a b c)))\n", "  (cond\n    [(and (= (sqr a)\
    \ (+ (sqr b) (sqr c))) (= (sqr b) (+ (sqr a) (sqr c))) (= (sqr c) (+ (sqr a) (sqr\
    \ b)))) #t]\n    [else #f]))\n", "  (and (and (> a 0) (> b 0) (> c 0))\n     \
    \  (or (and (= a (sqrt (+ (* b b) (* c c))))\n                (= b (sqrt (+ (*\
    \ a a) (* c c))))\n                (= c (sqrt (+ (* a a) (* b b)))))\n       \
    \    (and (= a (sqrt (+ (* b b) (* c c))))\n                (= b (sqrt (+ (* a\
    \ a) (* c c))))\n                (= c (sqrt (+ (* a a) (* b b)))))\n         \
    \  (and (= a (sqrt (+ (* b b) (* c c))))\n                (= b (sqrt (+ (* a a)\
    \ (* c c))))\n                (= c (sqrt (+ (* a a) (* b b))))))))\n", "  (and\
    \ (and (<= a b) (<= b c))\n       (and (<= (* a a) (+ (* b b) (* c c)))\n    \
    \        (<= (+ (* b b) (* c c)) (* a a)))))\n", "  (and (and (>= a b) (>= a c))\n\
    \       (or (= (+ (* a a) (* b b)) (* c c))\n           (= (+ (* a a) (* c c))\
    \ (* b b))\n           (= (+ (* b b) (* c c)) (* a a)))))\n", "  (and (and (<=\
    \ a b) (<= b c))\n       (and (>= a (+ b c))\n            (>= b (+ a c))\n   \
    \         (>= c (+ a b)))))\n", "  (define (square x) (* x x))\n  (define (max-of-three\
    \ x y z)\n    (cond ((> x y) (max-of-two x z))\n          ((> y z) (max-of-two\
    \ y x))\n          (else (max-of-two z x))))\n  (define (max-of-two x y)\n   \
    \ (if (> x y) x y))\n  (define (min-of-three x y z)\n    (cond ((< x y) (min-of-two\
    \ x z))\n          ((< y z) (min-of-two y x))\n          (else (min-of-two z x))))\n\
    \  (define (min-of-two x y)\n    (if (< x y) x y))\n  (define (hypotenuse x y)\n\
    \    (sqrt (+ (square x) (square y))))\n  (define (is-right-angle-triangle x y\
    \ z)\n    (define (is-right-angle-triangle-helper x y z)\n      (cond ((= (square\
    \ x) (+ (square y) (square z))) #t)\n            ((= (square y) (+ (square x)\
    \ (square z))) #t)\n            ((= (square z) (+ (square x) (square y))) #t)\n\
    \            (else #f)))\n    (is-right-angle-triangle-helper (max-of-three x\
    \ y z)\n                                    (min-of-three x y z)\n           \
    \                         (hypotenuse (min-of-three x y z)\n                 \
    \                               (max-of-three x y z))))\n  (is-right-angle-triangle\
    \ a b c))\n", "  (and (and (<= a b) (<= b c))\n       (or (= (expt a 2) (+ (expt\
    \ b 2) (expt c 2)))\n           (= (expt b 2) (+ (expt a 2) (expt c 2)))\n   \
    \        (= (expt c 2) (+ (expt a 2) (expt b 2))))))\n", "  (and (or (= a (sqrt\
    \ (+ (* b b) (* c c))))\n           (= b (sqrt (+ (* a a) (* c c))))\n       \
    \    (= c (sqrt (+ (* a a) (* b b)))))\n       (and (> a 0) (> b 0) (> c 0))))\n"]
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
