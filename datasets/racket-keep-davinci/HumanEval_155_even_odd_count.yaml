name: HumanEval_155_even_odd_count
language: racket
prompt: "#lang racket\n\n;; Given an integer. return a tuple that has the number of\
  \ even and odd digits respectively.\n;; Example:\n;; even_odd_count(-12) ==> (1,\
  \ 1)\n;; even_odd_count(123) ==> (1, 2)\n(define (even_odd_count num)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate even_odd_count))\n\
  \    (check-equal? (candidate 7) (list 0 1))\n    (check-equal? (candidate -78)\
  \ (list 1 1))\n    (check-equal? (candidate 3452) (list 2 2))\n    (check-equal?\
  \ (candidate 346211) (list 3 3))\n    (check-equal? (candidate -345821) (list 3\
  \ 3))\n    (check-equal? (candidate -2) (list 1 0))\n    (check-equal? (candidate\
  \ -45347) (list 2 3))\n    (check-equal? (candidate 0) (list 1 0))\n))\n\n(test-humaneval)"
completions: ["  (define (even_odd_count_helper num even odd)\n    (cond\n      [(zero?\
    \ num) (values even odd)]\n      [(even? (remainder num 10)) (even_odd_count_helper\
    \ (quotient num 10) (+ even 1) odd)]\n      [else (even_odd_count_helper (quotient\
    \ num 10) even (+ odd 1))]))\n  (even_odd_count_helper num 0 0))\n", "  (define\
    \ (even? n)\n    (and (not (zero? n))\n         (zero? (modulo n 2))))\n  (define\
    \ (odd? n)\n    (not (even? n)))\n  (define (even-odd-count-helper n even odd)\n\
    \    (cond\n      [(zero? n) (values even odd)]\n      [(even? n) (even-odd-count-helper\
    \ (quotient n 10) (+ even 1) odd)]\n      [(odd? n) (even-odd-count-helper (quotient\
    \ n 10) even (+ odd 1))]))\n  (even-odd-count-helper num 0 0))\n", "  (define\
    \ (even_odd_count-helper num even-count odd-count)\n    (cond [(zero? num) (values\
    \ even-count odd-count)]\n          [(even? (remainder num 10))\n           (even_odd_count-helper\
    \ (quotient num 10) (+ even-count 1) odd-count)]\n          [else\n          \
    \ (even_odd_count-helper (quotient num 10) even-count (+ odd-count 1))]))\n  (even_odd_count-helper\
    \ num 0 0))\n", "  (define (even_odd_count-helper num even-count odd-count)\n\
    \    (cond\n      [(zero? num) (values even-count odd-count)]\n      [(even? (remainder\
    \ num 10)) (even_odd_count-helper (quotient num 10) (+ even-count 1) odd-count)]\n\
    \      [else (even_odd_count-helper (quotient num 10) even-count (+ odd-count\
    \ 1))]))\n  (even_odd_count-helper num 0 0))\n", "  (define (even_odd_count_iter\
    \ num even odd)\n    (cond [(zero? num) (values even odd)]\n          [(even?\
    \ (remainder num 10)) (even_odd_count_iter (quotient num 10) (+ even 1) odd)]\n\
    \          [else (even_odd_count_iter (quotient num 10) even (+ odd 1))]))\n \
    \ (even_odd_count_iter num 0 0))\n", "  (define (even? n)\n    (if (zero? (remainder\
    \ n 2))\n        #t\n        #f))\n  (define (odd? n)\n    (if (zero? (remainder\
    \ n 2))\n        #f\n        #t))\n  (define (count-even-odd num)\n    (cond ((zero?\
    \ num) '(0 0))\n          ((even? num) (cons (car (count-even-odd (quotient num\
    \ 10))) (cdr (count-even-odd (quotient num 10)))))\n          ((odd? num) (cons\
    \ (cdr (count-even-odd (quotient num 10))) (cons (+ 1 (car (count-even-odd (quotient\
    \ num 10)))) (cdr (cdr (count-even-odd (quotient num 10)))))))))\n  (count-even-odd\
    \ num))\n", "  (define (even-odd-count-iter num even-count odd-count)\n    (cond\n\
    \      [(zero? num) (values even-count odd-count)]\n      [(even? (remainder num\
    \ 10)) (even-odd-count-iter (quotient num 10) (+ even-count 1) odd-count)]\n \
    \     [else (even-odd-count-iter (quotient num 10) even-count (+ odd-count 1))]))\n\
    \  (even-odd-count-iter num 0 0))\n", "  (define (even_odd_count-helper num even\
    \ odd)\n    (if (zero? num)\n        (values even odd)\n        (if (even? (remainder\
    \ num 10))\n            (even_odd_count-helper (quotient num 10) (+ even 1) odd)\n\
    \            (even_odd_count-helper (quotient num 10) even (+ odd 1)))))\n  (even_odd_count-helper\
    \ num 0 0))\n", "  (define (helper num even odd)\n    (cond [(zero? num) (values\
    \ even odd)]\n          [(even? (remainder num 10)) (helper (quotient num 10)\
    \ (+ even 1) odd)]\n          [else (helper (quotient num 10) even (+ odd 1))]))\n\
    \  (helper num 0 0))\n", "  (define (helper num even odd)\n    (cond [(zero? num)\
    \ (values even odd)]\n          [(even? (remainder num 10)) (helper (quotient\
    \ num 10) (+ even 1) odd)]\n          [else (helper (quotient num 10) even (+\
    \ odd 1))]))\n  (helper num 0 0))\n", "  (let loop ([num num] [even 0] [odd 0])\n\
    \    (cond\n      [(zero? num) (values even odd)]\n      [(even? (remainder num\
    \ 10)) (loop (quotient num 10) (+ even 1) odd)]\n      [else (loop (quotient num\
    \ 10) even (+ odd 1))])))\n", "  (define (even_odd_count_helper num even_count\
    \ odd_count)\n    (cond\n      [(zero? num) (values even_count odd_count)]\n \
    \     [(even? (remainder num 10)) (even_odd_count_helper (quotient num 10) (+\
    \ even_count 1) odd_count)]\n      [else (even_odd_count_helper (quotient num\
    \ 10) even_count (+ odd_count 1))]))\n  (even_odd_count_helper num 0 0))\n", " \
    \ (define (even_odd_count_helper num even odd)\n    (cond\n      [(zero? num)\
    \ (values even odd)]\n      [(even? (remainder num 10)) (even_odd_count_helper\
    \ (quotient num 10) (+ even 1) odd)]\n      [else (even_odd_count_helper (quotient\
    \ num 10) even (+ odd 1))]))\n  (even_odd_count_helper num 0 0))\n", "  (cond\n\
    \    [(zero? num) (values 0 0)]\n    [(even? (abs num)) (let-values ([(evens odds)\
    \ (even_odd_count (quotient num 10))])\n                         (values (+ evens\
    \ 1) odds))]\n    [else (let-values ([(evens odds) (even_odd_count (quotient num\
    \ 10))])\n            (values evens (+ odds 1)))]))\n", "  (define (even_odd_count_helper\
    \ num even odd)\n    (if (zero? num)\n        (values even odd)\n        (if (even?\
    \ (remainder num 10))\n            (even_odd_count_helper (quotient num 10) (+\
    \ even 1) odd)\n            (even_odd_count_helper (quotient num 10) even (+ odd\
    \ 1)))))\n  (even_odd_count_helper num 0 0))\n", "  (define (even_odd_count_helper\
    \ num even odd)\n    (cond\n      [(zero? num) (values even odd)]\n      [(even?\
    \ (remainder num 10)) (even_odd_count_helper (quotient num 10) (+ even 1) odd)]\n\
    \      [else (even_odd_count_helper (quotient num 10) even (+ odd 1))]))\n  (even_odd_count_helper\
    \ num 0 0))\n", "  (define (even_odd_count_helper num even odd)\n    (cond [(=\
    \ num 0) (cons even odd)]\n          [(even? (remainder num 10)) (even_odd_count_helper\
    \ (quotient num 10) (+ even 1) odd)]\n          [else (even_odd_count_helper (quotient\
    \ num 10) even (+ odd 1))]))\n  (even_odd_count_helper num 0 0))\n", "  (define\
    \ (even-odd-count-helper num even-count odd-count)\n    (cond\n      [(zero? num)\
    \ (values even-count odd-count)]\n      [(even? (remainder num 10)) (even-odd-count-helper\
    \ (quotient num 10) (+ even-count 1) odd-count)]\n      [else (even-odd-count-helper\
    \ (quotient num 10) even-count (+ odd-count 1))]))\n  (even-odd-count-helper num\
    \ 0 0))\n", "  (define (even? num)\n    (if (zero? (modulo num 2))\n        #t\n\
    \        #f))\n  (define (odd? num)\n    (if (zero? (modulo num 2))\n        #f\n\
    \        #t))\n  (define (count-even-odd num)\n    (if (zero? num)\n        (values\
    \ 0 0)\n        (let* ([digit (modulo num 10)]\n               [even? (even? digit)]\n\
    \               [odd? (odd? digit)]\n               [even-count (if even? 1 0)]\n\
    \               [odd-count (if odd? 1 0)])\n          (let-values ([(even-count\
    \ odd-count) (count-even-odd (quotient num 10))])\n            (values (+ even-count\
    \ even-count) (+ odd-count odd-count))))))\n  (count-even-odd num))\n", "  (define\
    \ (even? n)\n    (zero? (modulo n 2)))\n  (define (odd? n)\n    (not (even? n)))\n\
    \  (define (count-even-odd n)\n    (cond [(zero? n) (values 0 0)]\n          [(even?\
    \ n) (let-values ([(even odd) (count-even-odd (quotient n 10))])\n           \
    \             (values (+ even 1) odd))]\n          [(odd? n) (let-values ([(even\
    \ odd) (count-even-odd (quotient n 10))])\n                       (values even\
    \ (+ odd 1)))]))\n  (count-even-odd num))\n", "  (define (even? n)\n    (zero?\
    \ (modulo n 2)))\n  (define (count-even-odd num)\n    (cond\n      [(zero? num)\
    \ (values 0 0)]\n      [else (let ([(even-count odd-count) (count-even-odd (quotient\
    \ num 10))])\n              (if (even? (remainder num 10))\n                 \
    \ (values (+ even-count 1) odd-count)\n                  (values even-count (+\
    \ odd-count 1))))]))\n  (count-even-odd num))\n", "  (let loop ([num num] [even\
    \ 0] [odd 0])\n    (cond [(zero? num) (values even odd)]\n          [(even? (remainder\
    \ num 10)) (loop (quotient num 10) (+ even 1) odd)]\n          [else (loop (quotient\
    \ num 10) even (+ odd 1))])))\n", "  (define (even_odd_count_iter num even odd)\n\
    \    (cond\n      [(zero? num) (values even odd)]\n      [(even? (remainder num\
    \ 10)) (even_odd_count_iter (quotient num 10) (+ even 1) odd)]\n      [else (even_odd_count_iter\
    \ (quotient num 10) even (+ odd 1))]))\n  (even_odd_count_iter num 0 0))\n", " \
    \ (define (even? n)\n    (zero? (modulo n 2)))\n  (define (odd? n)\n    (not (even?\
    \ n)))\n  (define (count-even-odd num)\n    (cond\n      [(zero? num) (values\
    \ 0 0)]\n      [(even? num) (values (+ 1 (car (count-even-odd (quotient num 10))))\
    \ (cadr (count-even-odd (quotient num 10))))]\n      [(odd? num) (values (car\
    \ (count-even-odd (quotient num 10))) (+ 1 (cadr (count-even-odd (quotient num\
    \ 10)))))]))\n  (count-even-odd num))\n", "  (define (even? n)\n    (zero? (modulo\
    \ n 2)))\n  (define (odd? n)\n    (not (even? n)))\n  (define (count-even-odds\
    \ lst)\n    (cond\n      [(empty? lst) (values 0 0)]\n      [(even? (first lst))\
    \ (let-values ([(evens odds) (count-even-odds (rest lst))])\n                \
    \            (values (+ evens 1) odds))]\n      [else (let-values ([(evens odds)\
    \ (count-even-odds (rest lst))])\n              (values evens (+ odds 1)))]))\n\
    \  (count-even-odds (string->list (number->string num))))\n", "  (define (even_odd_count_helper\
    \ num even odd)\n    (cond [(zero? num) (values even odd)]\n          [(even?\
    \ (remainder num 10)) (even_odd_count_helper (quotient num 10) (+ even 1) odd)]\n\
    \          [else (even_odd_count_helper (quotient num 10) even (+ odd 1))]))\n\
    \  (even_odd_count_helper num 0 0))\n", "  (define (even? n)\n    (zero? (modulo\
    \ n 2)))\n  (define (count-even-odds num)\n    (cond\n      [(zero? num) (values\
    \ 0 0)]\n      [else (let* ([d (remainder num 10)]\n                   [even-odds\
    \ (count-even-odds (quotient num 10))])\n              (values (if (even? d) (+\
    \ (first even-odds) 1) (first even-odds))\n                      (if (even? d)\
    \ (second even-odds) (+ (second even-odds) 1))))]))\n  (count-even-odds num))\n",
  "  (let loop ([num num] [even 0] [odd 0])\n    (cond [(zero? num) (values even odd)]\n\
    \          [(even? (remainder num 10)) (loop (quotient num 10) (+ even 1) odd)]\n\
    \          [else (loop (quotient num 10) even (+ odd 1))])))\n", "  (let ([evens\
    \ 0]\n        [odds 0])\n    (for ([digit (in-list (string->list (number->string\
    \ num)))]\n          #:when (even? (string->number digit)))\n      (set! evens\
    \ (+ evens 1)))\n    (for ([digit (in-list (string->list (number->string num)))]\n\
    \          #:when (odd? (string->number digit)))\n      (set! odds (+ odds 1)))\n\
    \    (values evens odds)))\n", "  (let ([evens (count-evens num)]\n        [odds\
    \ (count-odds num)])\n    (values evens odds)))\n", "  (define (even_odd_count_iter\
    \ num even odd)\n    (cond [(zero? num) (values even odd)]\n          [(even?\
    \ (remainder num 10)) (even_odd_count_iter (quotient num 10) (+ even 1) odd)]\n\
    \          [else (even_odd_count_iter (quotient num 10) even (+ odd 1))]))\n \
    \ (even_odd_count_iter num 0 0))\n", "  (define (helper num even odd)\n    (cond\
    \ [(zero? num) (values even odd)]\n          [(even? (remainder num 10)) (helper\
    \ (quotient num 10) (+ even 1) odd)]\n          [else (helper (quotient num 10)\
    \ even (+ odd 1))]))\n  (helper num 0 0))\n", "  (define (even-odd-count-iter\
    \ num even-count odd-count)\n    (if (zero? num)\n        (values even-count odd-count)\n\
    \        (if (even? (remainder num 10))\n            (even-odd-count-iter (quotient\
    \ num 10) (+ even-count 1) odd-count)\n            (even-odd-count-iter (quotient\
    \ num 10) even-count (+ odd-count 1)))))\n  (even-odd-count-iter num 0 0))\n",
  "  (define (helper num even odd)\n    (cond\n      [(= num 0) (values even odd)]\n\
    \      [(even? (remainder num 10)) (helper (quotient num 10) (+ even 1) odd)]\n\
    \      [else (helper (quotient num 10) even (+ odd 1))]))\n  (helper num 0 0))\n",
  "  (define (even? n)\n    (zero? (modulo n 2)))\n  (define (even-odd-count-helper\
    \ num even-count odd-count)\n    (cond\n      [(zero? num) (values even-count\
    \ odd-count)]\n      [(even? num) (even-odd-count-helper (quotient num 10) (+\
    \ even-count 1) odd-count)]\n      [else (even-odd-count-helper (quotient num\
    \ 10) even-count (+ odd-count 1))]))\n  (even-odd-count-helper num 0 0))\n", " \
    \ (define (even_odd_count-helper num even odd)\n    (cond\n      [(zero? num)\
    \ (values even odd)]\n      [(even? (remainder num 10)) (even_odd_count-helper\
    \ (quotient num 10) (+ even 1) odd)]\n      [else (even_odd_count-helper (quotient\
    \ num 10) even (+ odd 1))]))\n  (even_odd_count-helper num 0 0))\n", "  (define\
    \ (even_odd_count_iter num even odd)\n    (cond\n      [(zero? num) (values even\
    \ odd)]\n      [(even? (remainder num 10)) (even_odd_count_iter (quotient num\
    \ 10) (+ even 1) odd)]\n      [else (even_odd_count_iter (quotient num 10) even\
    \ (+ odd 1))]))\n  (even_odd_count_iter num 0 0))\n", "  (let loop ([num num]\
    \ [even 0] [odd 0])\n    (cond [(zero? num) (values even odd)]\n          [(even?\
    \ (remainder num 10)) (loop (quotient num 10) (+ even 1) odd)]\n          [else\
    \ (loop (quotient num 10) even (+ odd 1))])))\n", "  (define (even_odd_count_helper\
    \ num even odd)\n    (cond [(zero? num) (values even odd)]\n          [(even?\
    \ (remainder num 10)) (even_odd_count_helper (quotient num 10) (+ even 1) odd)]\n\
    \          [else (even_odd_count_helper (quotient num 10) even (+ odd 1))]))\n\
    \  (even_odd_count_helper num 0 0))\n", "  (define (even-odd-count-iter num even-count\
    \ odd-count)\n    (if (zero? num)\n        (values even-count odd-count)\n   \
    \     (if (even? (remainder num 10))\n            (even-odd-count-iter (quotient\
    \ num 10) (+ even-count 1) odd-count)\n            (even-odd-count-iter (quotient\
    \ num 10) even-count (+ odd-count 1)))))\n  (even-odd-count-iter num 0 0))\n",
  "  (let loop ([num num] [even 0] [odd 0])\n    (cond\n      [(zero? num) (values\
    \ even odd)]\n      [(even? (remainder num 10)) (loop (quotient num 10) (+ even\
    \ 1) odd)]\n      [else (loop (quotient num 10) even (+ odd 1))])))\n", "  (define\
    \ (even-odd-count-helper num even-count odd-count)\n    (if (zero? num)\n    \
    \    (values even-count odd-count)\n        (if (even? (remainder num 10))\n \
    \           (even-odd-count-helper (quotient num 10) (+ even-count 1) odd-count)\n\
    \            (even-odd-count-helper (quotient num 10) even-count (+ odd-count\
    \ 1)))))\n  (even-odd-count-helper num 0 0))\n", "  (define (even? n)\n    (zero?\
    \ (modulo n 2)))\n  (define (odd? n)\n    (not (even? n)))\n  (define (count-even-odd\
    \ n)\n    (cond\n      [(zero? n) (values 0 0)]\n      [(even? n) (let-values\
    \ ([(even odd) (count-even-odd (quotient n 10))])\n                    (values\
    \ (+ even 1) odd))]\n      [(odd? n) (let-values ([(even odd) (count-even-odd\
    \ (quotient n 10))])\n                   (values even (+ odd 1)))]))\n  (count-even-odd\
    \ num))\n", "  (define (even_odd_count_helper num even odd)\n    (if (zero? num)\n\
    \        (values even odd)\n        (if (even? (remainder num 10))\n         \
    \   (even_odd_count_helper (quotient num 10) (+ even 1) odd)\n            (even_odd_count_helper\
    \ (quotient num 10) even (+ odd 1)))))\n  (even_odd_count_helper num 0 0))\n",
  "  (cond\n    [(negative? num) (even_odd_count (- num))]\n    [(zero? num) (values\
    \ 0 0)]\n    [else\n     (let* ([remainder (modulo num 10)]\n            [rest\
    \ (quotient num 10)]\n            [even-count (even_odd_count rest)]\n       \
    \     [odd-count (even_odd_count rest)])\n       (if (even? remainder)\n     \
    \      (values (+ (first even-count) 1) (second odd-count))\n           (values\
    \ (first even-count) (+ (second odd-count) 1))))]))\n", "  (define (even? n)\n\
    \    (zero? (modulo n 2)))\n  (define (odd? n)\n    (not (even? n)))\n  (define\
    \ (count-even-odd num)\n    (if (zero? num)\n        (values 0 0)\n        (let*\
    \ ([n (abs num)]\n               [d (modulo n 10)]\n               [r (quotient\
    \ n 10)]\n               [even (if (even? d) 1 0)]\n               [odd (if (odd?\
    \ d) 1 0)])\n          (let-values ([(even-count odd-count) (count-even-odd r)])\n\
    \            (values (+ even even-count) (+ odd odd-count))))))\n  (count-even-odd\
    \ num))\n", "  (define (helper num even odd)\n    (cond [(zero? num) (values even\
    \ odd)]\n          [(even? (remainder num 10)) (helper (quotient num 10) (+ even\
    \ 1) odd)]\n          [else (helper (quotient num 10) even (+ odd 1))]))\n  (helper\
    \ num 0 0))\n", "  (define (even_odd_count_iter num even odd)\n    (cond\n   \
    \   [(zero? num) (values even odd)]\n      [(even? (remainder num 10)) (even_odd_count_iter\
    \ (quotient num 10) (+ even 1) odd)]\n      [else (even_odd_count_iter (quotient\
    \ num 10) even (+ odd 1))]))\n  (even_odd_count_iter num 0 0))\n", "  (define\
    \ (helper num even odd)\n    (cond\n      [(zero? num) (values even odd)]\n  \
    \    [(even? (remainder num 10)) (helper (quotient num 10) (+ even 1) odd)]\n\
    \      [else (helper (quotient num 10) even (+ odd 1))]))\n  (helper num 0 0))\n",
  "  (define (even_odd_count_iter num even odd)\n    (cond\n      [(zero? num) (values\
    \ even odd)]\n      [(even? (remainder num 10)) (even_odd_count_iter (quotient\
    \ num 10) (+ even 1) odd)]\n      [else (even_odd_count_iter (quotient num 10)\
    \ even (+ odd 1))]))\n  (even_odd_count_iter num 0 0))\n", "  (define (even-odd-count-iter\
    \ num even odd)\n    (cond [(= num 0) (values even odd)]\n          [(even? (remainder\
    \ num 10)) (even-odd-count-iter (quotient num 10) (+ even 1) odd)]\n         \
    \ [else (even-odd-count-iter (quotient num 10) even (+ odd 1))]))\n  (even-odd-count-iter\
    \ num 0 0))\n", "  (define (even? n)\n    (zero? (modulo n 2)))\n  (define (odd?\
    \ n)\n    (not (even? n)))\n  (define (count-even-odd num)\n    (cond [(zero?\
    \ num) (values 0 0)]\n          [(even? num) (let-values ([(even-count odd-count)\
    \ (count-even-odd (quotient num 10))])\n                         (values (+ even-count\
    \ 1) odd-count))]\n          [(odd? num) (let-values ([(even-count odd-count)\
    \ (count-even-odd (quotient num 10))])\n                        (values even-count\
    \ (+ odd-count 1)))]))\n  (count-even-odd num))\n", "  (define (helper num even\
    \ odd)\n    (cond\n      [(zero? num) (values even odd)]\n      [(even? (remainder\
    \ num 10)) (helper (quotient num 10) (+ even 1) odd)]\n      [else (helper (quotient\
    \ num 10) even (+ odd 1))]))\n  (helper num 0 0))\n", "  (define (even-odd-count-helper\
    \ num even odd)\n    (cond\n      [(zero? num) (values even odd)]\n      [(even?\
    \ (remainder num 10)) (even-odd-count-helper (quotient num 10) (+ even 1) odd)]\n\
    \      [else (even-odd-count-helper (quotient num 10) even (+ odd 1))]))\n  (even-odd-count-helper\
    \ num 0 0))\n", "  (define (helper n even odd)\n    (cond\n      [(zero? n) (values\
    \ even odd)]\n      [(even? (remainder n 10)) (helper (quotient n 10) (+ even\
    \ 1) odd)]\n      [else (helper (quotient n 10) even (+ odd 1))]))\n  (helper\
    \ num 0 0))\n", "  (define (even-odd-count-iter num even-count odd-count)\n  \
    \  (cond\n      [(zero? num) (values even-count odd-count)]\n      [(even? (remainder\
    \ num 10)) (even-odd-count-iter (quotient num 10) (+ even-count 1) odd-count)]\n\
    \      [else (even-odd-count-iter (quotient num 10) even-count (+ odd-count 1))]))\n\
    \  (even-odd-count-iter num 0 0))\n", "  (define (even_odd_count_helper num even_count\
    \ odd_count)\n    (if (zero? num)\n        (values even_count odd_count)\n   \
    \     (if (even? (remainder num 10))\n            (even_odd_count_helper (quotient\
    \ num 10) (+ even_count 1) odd_count)\n            (even_odd_count_helper (quotient\
    \ num 10) even_count (+ odd_count 1)))))\n  (even_odd_count_helper num 0 0))\n",
  "  (define (even_odd_count_helper num even odd)\n    (cond\n      [(zero? num) (values\
    \ even odd)]\n      [(even? (remainder num 10)) (even_odd_count_helper (quotient\
    \ num 10) (+ even 1) odd)]\n      [else (even_odd_count_helper (quotient num 10)\
    \ even (+ odd 1))]))\n  (even_odd_count_helper num 0 0))\n", "  (define (even-odd-count-iter\
    \ num even-count odd-count)\n    (cond [(zero? num) (values even-count odd-count)]\n\
    \          [(even? (remainder num 10))\n           (even-odd-count-iter (quotient\
    \ num 10) (+ even-count 1) odd-count)]\n          [else (even-odd-count-iter (quotient\
    \ num 10) even-count (+ odd-count 1))]))\n  (even-odd-count-iter num 0 0))\n",
  "  (define (helper num even odd)\n    (if (zero? num)\n        (values even odd)\n\
    \        (if (even? (remainder num 10))\n            (helper (quotient num 10)\
    \ (+ even 1) odd)\n            (helper (quotient num 10) even (+ odd 1)))))\n\
    \  (helper num 0 0))\n", "  (let ([even-count 0]\n        [odd-count 0])\n   \
    \ (for ([digit (in-list (string->list (number->string num)))]\n          #:when\
    \ (not (zero? (modulo digit 2))))\n      (set! odd-count (+ odd-count 1)))\n \
    \   (set! even-count (- (string-length (number->string num)) odd-count))\n   \
    \ (values even-count odd-count)))\n", "  (define (even_odd_count_helper num even\
    \ odd)\n    (cond\n      [(zero? num) (values even odd)]\n      [(even? (remainder\
    \ num 10)) (even_odd_count_helper (quotient num 10) (+ even 1) odd)]\n      [else\
    \ (even_odd_count_helper (quotient num 10) even (+ odd 1))]))\n  (even_odd_count_helper\
    \ num 0 0))\n", "  (let ([evens 0]\n        [odds 0])\n    (for ([i (in-range\
    \ (abs num))])\n      (let ([digit (modulo (abs num) (expt 10 i))])\n        (if\
    \ (even? digit)\n            (set! evens (+ evens 1))\n            (set! odds\
    \ (+ odds 1)))))\n    (values evens odds)))\n", "  (let loop ((num num) (even\
    \ 0) (odd 0))\n    (cond\n      [(zero? num) (values even odd)]\n      [(even?\
    \ (remainder num 10)) (loop (quotient num 10) (+ even 1) odd)]\n      [else (loop\
    \ (quotient num 10) even (+ odd 1))])))\n", "  (let loop ([num num] [even 0] [odd\
    \ 0])\n    (cond [(zero? num) (values even odd)]\n          [(even? (remainder\
    \ num 10)) (loop (quotient num 10) (+ even 1) odd)]\n          [else (loop (quotient\
    \ num 10) even (+ odd 1))])))\n", "  (define (even? n)\n    (even? n))\n  (define\
    \ (odd? n)\n    (odd? n))\n  (define (count-even-odd num)\n    (cond\n      [(zero?\
    \ num) (values 0 0)]\n      [(even? num) (let-values ([(even-count odd-count)\
    \ (count-even-odd (quotient num 10))])\n                     (values (+ even-count\
    \ 1) odd-count))]\n      [(odd? num) (let-values ([(even-count odd-count) (count-even-odd\
    \ (quotient num 10))])\n                    (values even-count (+ odd-count 1)))]))\n\
    \  (count-even-odd num))\n", "  (let loop ((num num) (even 0) (odd 0))\n    (cond\n\
    \      [(zero? num) (values even odd)]\n      [(even? (remainder num 10)) (loop\
    \ (quotient num 10) (+ even 1) odd)]\n      [else (loop (quotient num 10) even\
    \ (+ odd 1))])))\n", "  (define (even? n)\n    (zero? (modulo n 2)))\n  (define\
    \ (odd? n)\n    (not (even? n)))\n  (define (count-even-odd num)\n    (cond [(zero?\
    \ num) (values 0 0)]\n          [(even? num) (values (+ 1 (car (count-even-odd\
    \ (quotient num 10))))\n                                (cadr (count-even-odd\
    \ (quotient num 10))))]\n          [(odd? num) (values (car (count-even-odd (quotient\
    \ num 10)))\n                              (+ 1 (cadr (count-even-odd (quotient\
    \ num 10)))))]))\n  (count-even-odd num))\n", "  (let loop ([num num] [even 0]\
    \ [odd 0])\n    (cond [(zero? num) (values even odd)]\n          [(even? (remainder\
    \ num 10)) (loop (quotient num 10) (+ even 1) odd)]\n          [else (loop (quotient\
    \ num 10) even (+ odd 1))])))\n", "  (define (even? n)\n    (even? n))\n  (define\
    \ (odd? n)\n    (odd? n))\n  (define (count-even-odd num)\n    (cond ((zero? num)\
    \ (values 0 0))\n          ((even? num) (let-values ([(even odd) (count-even-odd\
    \ (quotient num 10))])\n                          (values (+ even 1) odd)))\n\
    \          ((odd? num) (let-values ([(even odd) (count-even-odd (quotient num\
    \ 10))])\n                          (values even (+ odd 1))))))\n  (count-even-odd\
    \ num))\n", "  (define (even? n)\n    (zero? (modulo n 2)))\n  (define (even-odd-count-helper\
    \ n even odd)\n    (cond [(zero? n) (values even odd)]\n          [(even? n) (even-odd-count-helper\
    \ (quotient n 10) (+ even 1) odd)]\n          [else (even-odd-count-helper (quotient\
    \ n 10) even (+ odd 1))]))\n  (even-odd-count-helper num 0 0))\n", "  (define\
    \ (even? n)\n    (zero? (modulo n 2)))\n  (define (odd? n)\n    (not (even? n)))\n\
    \  (define (count-even-odd n)\n    (cond\n      [(zero? n) (values 0 0)]\n   \
    \   [(even? n) (values (add1 (first (count-even-odd (quotient n 10)))) (second\
    \ (count-even-odd (quotient n 10))))]\n      [(odd? n) (values (first (count-even-odd\
    \ (quotient n 10))) (add1 (second (count-even-odd (quotient n 10)))))]))\n  (count-even-odd\
    \ num))\n", "  (define (even? n)\n    (zero? (modulo n 2)))\n  (define (count-even-odd\
    \ num)\n    (cond [(zero? num) (values 0 0)]\n          [(even? num) (let-values\
    \ ([(even odd) (count-even-odd (quotient num 10))])\n                        \
    \ (values (+ even 1) odd))]\n          [else (let-values ([(even odd) (count-even-odd\
    \ (quotient num 10))])\n                  (values even (+ odd 1)))]))\n  (count-even-odd\
    \ num))\n", "  (define (even_odd_count_helper num even odd)\n    (cond [(zero?\
    \ num) (values even odd)]\n          [(even? (remainder num 10)) (even_odd_count_helper\
    \ (quotient num 10) (+ even 1) odd)]\n          [else (even_odd_count_helper (quotient\
    \ num 10) even (+ odd 1))]))\n  (even_odd_count_helper num 0 0))\n", "  (define\
    \ (even-odd-count-helper num even-count odd-count)\n    (cond\n      [(zero? num)\
    \ (values even-count odd-count)]\n      [(even? (remainder num 10)) (even-odd-count-helper\
    \ (quotient num 10) (+ even-count 1) odd-count)]\n      [else (even-odd-count-helper\
    \ (quotient num 10) even-count (+ odd-count 1))]))\n  (even-odd-count-helper num\
    \ 0 0))\n", "  (cond\n    [(negative? num) (even_odd_count (- num))]\n    [(zero?\
    \ num) (values 0 0)]\n    [else\n     (let* ([digit (modulo num 10)]\n       \
    \     [rest (quotient num 10)]\n            [even-count (if (even? digit) 1 0)]\n\
    \            [odd-count (if (odd? digit) 1 0)])\n       (let-values ([(even-rest\
    \ odd-rest) (even_odd_count rest)])\n         (values (+ even-count even-rest)\
    \ (+ odd-count odd-rest))))]))\n", "  (define (even_odd_count_helper num even\
    \ odd)\n    (cond [(zero? num) (values even odd)]\n          [(even? (remainder\
    \ num 10)) (even_odd_count_helper (quotient num 10) (+ even 1) odd)]\n       \
    \   [else (even_odd_count_helper (quotient num 10) even (+ odd 1))]))\n  (even_odd_count_helper\
    \ num 0 0))\n", "  (define (even? n)\n    (even? n))\n  (define (odd? n)\n   \
    \ (odd? n))\n  (define (even-odd-count-helper num even-count odd-count)\n    (cond\n\
    \      [(zero? num) (values even-count odd-count)]\n      [(even? num) (even-odd-count-helper\
    \ (quotient num 10) (+ even-count 1) odd-count)]\n      [(odd? num) (even-odd-count-helper\
    \ (quotient num 10) even-count (+ odd-count 1))]))\n  (even-odd-count-helper num\
    \ 0 0))\n", "  (define (even? n)\n    (zero? (modulo n 2)))\n  (define (odd? n)\n\
    \    (not (even? n)))\n  (define (count-even-odd num)\n    (cond\n      [(zero?\
    \ num) (values 0 0)]\n      [(even? num) (values (+ 1 (car (count-even-odd (quotient\
    \ num 10)))) (cadr (count-even-odd (quotient num 10))))]\n      [(odd? num) (values\
    \ (car (count-even-odd (quotient num 10))) (+ 1 (cadr (count-even-odd (quotient\
    \ num 10)))))]))\n  (count-even-odd num))\n", "  (let loop ([num num] [even 0]\
    \ [odd 0])\n    (cond\n      [(zero? num) (values even odd)]\n      [(even? (remainder\
    \ num 10)) (loop (quotient num 10) (+ even 1) odd)]\n      [else (loop (quotient\
    \ num 10) even (+ odd 1))])))\n", "  (define (even? num)\n    (zero? (modulo num\
    \ 2)))\n  (define (even-odd-count-iter num even-count odd-count)\n    (cond [(zero?\
    \ num) (values even-count odd-count)]\n          [(even? num) (even-odd-count-iter\
    \ (quotient num 10) (+ even-count 1) odd-count)]\n          [else (even-odd-count-iter\
    \ (quotient num 10) even-count (+ odd-count 1))]))\n  (even-odd-count-iter num\
    \ 0 0))\n", "  (define (even? n)\n    (even? n))\n  (define (odd? n)\n    (odd?\
    \ n))\n  (define (count-even-odd num)\n    (cond [(zero? num) (values 0 0)]\n\
    \          [(even? num) (values (add1 (car (count-even-odd (quotient num 10))))\
    \ (cadr (count-even-odd (quotient num 10))))]\n          [(odd? num) (values (car\
    \ (count-even-odd (quotient num 10))) (add1 (cadr (count-even-odd (quotient num\
    \ 10)))))]))\n  (count-even-odd num))\n", "  (cond\n    [(= num 0) (cons 0 0)]\n\
    \    [(even? (abs num)) (cons (+ 1 (car (even_odd_count (quotient num 10)))) (cdr\
    \ (even_odd_count (quotient num 10))))]\n    [else (cons (car (even_odd_count\
    \ (quotient num 10))) (+ 1 (cdr (even_odd_count (quotient num 10)))))]))\n", " \
    \ (define (even? n)\n    (zero? (modulo n 2)))\n  (define (odd? n)\n    (not (even?\
    \ n)))\n  (define (count-even-odd num)\n    (cond\n      [(zero? num) (values\
    \ 0 0)]\n      [(even? num) (let-values ([(even-count odd-count) (count-even-odd\
    \ (quotient num 10))])\n                     (values (+ even-count 1) odd-count))]\n\
    \      [(odd? num) (let-values ([(even-count odd-count) (count-even-odd (quotient\
    \ num 10))])\n                    (values even-count (+ odd-count 1)))]))\n  (count-even-odd\
    \ num))\n", "  (define (even? n)\n    (zero? (modulo n 2)))\n  (define (odd? n)\n\
    \    (not (even? n)))\n  (define (count-even-odd num)\n    (cond [(zero? num)\
    \ (values 0 0)]\n          [(even? num) (let-values ([(even odd) (count-even-odd\
    \ (quotient num 10))])\n                         (values (+ even 1) odd))]\n \
    \         [(odd? num) (let-values ([(even odd) (count-even-odd (quotient num 10))])\n\
    \                        (values even (+ odd 1)))]))\n  (count-even-odd num))\n",
  "  (define (helper num even odd)\n    (cond [(zero? num) (values even odd)]\n  \
    \        [(even? (remainder num 10)) (helper (quotient num 10) (+ even 1) odd)]\n\
    \          [else (helper (quotient num 10) even (+ odd 1))]))\n  (helper num 0\
    \ 0))\n", "  (let loop ([num num] [even 0] [odd 0])\n    (cond\n      [(zero?\
    \ num) (values even odd)]\n      [(even? (remainder num 10)) (loop (quotient num\
    \ 10) (+ even 1) odd)]\n      [else (loop (quotient num 10) even (+ odd 1))])))\n",
  "  (define (even? n)\n    (zero? (modulo n 2)))\n  (define (odd? n)\n    (not (even?\
    \ n)))\n  (define (count-even-odd n)\n    (cond\n      [(zero? n) (values 0 0)]\n\
    \      [(even? n) (let* ([(even-count odd-count) (count-even-odd (quotient n 10))])\n\
    \                    (values (+ even-count 1) odd-count))]\n      [(odd? n) (let*\
    \ ([(even-count odd-count) (count-even-odd (quotient n 10))])\n              \
    \     (values even-count (+ odd-count 1)))]))\n  (count-even-odd num))\n", " \
    \ (define (even? num)\n    (zero? (modulo num 2)))\n  (define (even-odd-count-helper\
    \ num even-count odd-count)\n    (cond\n      [(zero? num) (values even-count\
    \ odd-count)]\n      [(even? num) (even-odd-count-helper (quotient num 10) (+\
    \ even-count 1) odd-count)]\n      [else (even-odd-count-helper (quotient num\
    \ 10) even-count (+ odd-count 1))]))\n  (even-odd-count-helper num 0 0))\n", " \
    \ (define (even_odd_count_iter num even odd)\n    (cond [(zero? num) (values even\
    \ odd)]\n          [(even? (remainder num 10)) (even_odd_count_iter (quotient\
    \ num 10) (+ even 1) odd)]\n          [else (even_odd_count_iter (quotient num\
    \ 10) even (+ odd 1))]))\n  (even_odd_count_iter num 0 0))\n", "  (define (even_odd_count_helper\
    \ num even odd)\n    (cond\n      [(zero? num) (values even odd)]\n      [(even?\
    \ (remainder num 10)) (even_odd_count_helper (quotient num 10) (+ even 1) odd)]\n\
    \      [else (even_odd_count_helper (quotient num 10) even (+ odd 1))]))\n  (even_odd_count_helper\
    \ num 0 0))\n", "  (let loop ((num num) (even 0) (odd 0))\n    (cond ((zero? num)\
    \ (values even odd))\n          ((even? (remainder num 10)) (loop (quotient num\
    \ 10) (+ even 1) odd))\n          (else (loop (quotient num 10) even (+ odd 1))))))\n",
  "  (define (even_odd_count-helper num even odd)\n    (cond\n      [(zero? num) (values\
    \ even odd)]\n      [(even? (remainder num 10)) (even_odd_count-helper (quotient\
    \ num 10) (+ even 1) odd)]\n      [else (even_odd_count-helper (quotient num 10)\
    \ even (+ odd 1))]))\n  (even_odd_count-helper num 0 0))\n", "  (define (even_odd_count_iter\
    \ num even odd)\n    (cond\n      [(zero? num) (values even odd)]\n      [(even?\
    \ (remainder num 10)) (even_odd_count_iter (quotient num 10) (+ even 1) odd)]\n\
    \      [else (even_odd_count_iter (quotient num 10) even (+ odd 1))]))\n  (even_odd_count_iter\
    \ num 0 0))\n", "  (define (even_odd_count_helper num even odd)\n    (cond [(zero?\
    \ num) (values even odd)]\n          [(even? (remainder num 10)) (even_odd_count_helper\
    \ (quotient num 10) (+ even 1) odd)]\n          [else (even_odd_count_helper (quotient\
    \ num 10) even (+ odd 1))]))\n  (even_odd_count_helper num 0 0))\n", "  (define\
    \ (even-odd-count-helper num even-count odd-count)\n    (cond [(= num 0) (values\
    \ even-count odd-count)]\n          [(even? (remainder num 10)) (even-odd-count-helper\
    \ (quotient num 10) (+ even-count 1) odd-count)]\n          [else (even-odd-count-helper\
    \ (quotient num 10) even-count (+ odd-count 1))]))\n  (even-odd-count-helper num\
    \ 0 0))\n", "  (define (helper num even odd)\n    (if (zero? num)\n        (values\
    \ even odd)\n        (if (even? (remainder num 10))\n            (helper (quotient\
    \ num 10) (+ even 1) odd)\n            (helper (quotient num 10) even (+ odd 1)))))\n\
    \  (helper num 0 0))\n", "  (let loop ([num num] [even 0] [odd 0])\n    (cond\
    \ [(zero? num) (values even odd)]\n          [(even? (remainder num 10)) (loop\
    \ (quotient num 10) (+ even 1) odd)]\n          [else (loop (quotient num 10)\
    \ even (+ odd 1))])))\n", "  (define (even? n)\n    (zero? (modulo n 2)))\n  (define\
    \ (count-even-odd-digits num even-count odd-count)\n    (cond\n      [(zero? num)\
    \ (values even-count odd-count)]\n      [(even? (remainder num 10)) (count-even-odd-digits\
    \ (quotient num 10) (+ even-count 1) odd-count)]\n      [else (count-even-odd-digits\
    \ (quotient num 10) even-count (+ odd-count 1))]))\n  (count-even-odd-digits num\
    \ 0 0))\n", "  (define (even-odd-count-iter num even-count odd-count)\n    (cond\
    \ [(zero? num) (values even-count odd-count)]\n          [(even? (remainder num\
    \ 10)) (even-odd-count-iter (quotient num 10) (+ even-count 1) odd-count)]\n \
    \         [else (even-odd-count-iter (quotient num 10) even-count (+ odd-count\
    \ 1))]))\n  (even-odd-count-iter num 0 0))\n", "  (define (even_odd_count_helper\
    \ num even odd)\n    (cond\n      [(zero? num) (values even odd)]\n      [(even?\
    \ (remainder num 10)) (even_odd_count_helper (quotient num 10) (+ even 1) odd)]\n\
    \      [else (even_odd_count_helper (quotient num 10) even (+ odd 1))]))\n  (even_odd_count_helper\
    \ num 0 0))\n", "  (define (even_odd_count-helper num even odd)\n    (cond\n \
    \     [(zero? num) (values even odd)]\n      [(even? (remainder num 10)) (even_odd_count-helper\
    \ (quotient num 10) (+ even 1) odd)]\n      [else (even_odd_count-helper (quotient\
    \ num 10) even (+ odd 1))]))\n  (even_odd_count-helper num 0 0))\n", "  (define\
    \ (even_odd_count-helper num even odd)\n    (cond [(zero? num) (values even odd)]\n\
    \          [(even? num) (even_odd_count-helper (quotient num 10) (+ even 1) odd)]\n\
    \          [else (even_odd_count-helper (quotient num 10) even (+ odd 1))]))\n\
    \  (even_odd_count-helper num 0 0))\n", "  (define (even_odd_count_iter num even\
    \ odd)\n    (cond\n      [(zero? num) (values even odd)]\n      [(even? (remainder\
    \ num 10)) (even_odd_count_iter (quotient num 10) (+ even 1) odd)]\n      [else\
    \ (even_odd_count_iter (quotient num 10) even (+ odd 1))]))\n  (even_odd_count_iter\
    \ num 0 0))\n", "  (define (even_odd_count_iter num even odd)\n    (cond\n   \
    \   [(zero? num) (values even odd)]\n      [(even? (remainder num 10)) (even_odd_count_iter\
    \ (quotient num 10) (+ even 1) odd)]\n      [else (even_odd_count_iter (quotient\
    \ num 10) even (+ odd 1))]))\n  (even_odd_count_iter num 0 0))\n", "  (define\
    \ (even_odd_count_iter num even odd)\n    (cond\n      [(zero? num) (values even\
    \ odd)]\n      [(even? (remainder num 10)) (even_odd_count_iter (quotient num\
    \ 10) (+ even 1) odd)]\n      [else (even_odd_count_iter (quotient num 10) even\
    \ (+ odd 1))]))\n  (even_odd_count_iter num 0 0))\n", "  (define (even_odd_count_iter\
    \ num even odd)\n    (cond\n      [(zero? num) (values even odd)]\n      [(even?\
    \ (remainder num 10)) (even_odd_count_iter (quotient num 10) (+ even 1) odd)]\n\
    \      [else (even_odd_count_iter (quotient num 10) even (+ odd 1))]))\n  (even_odd_count_iter\
    \ num 0 0))\n", "  (let loop ([num num] [even 0] [odd 0])\n    (cond [(zero? num)\
    \ (values even odd)]\n          [(even? (remainder num 10)) (loop (quotient num\
    \ 10) (+ even 1) odd)]\n          [else (loop (quotient num 10) even (+ odd 1))])))\n",
  "  (let loop ((num num) (even 0) (odd 0))\n    (cond\n      [(zero? num) (values\
    \ even odd)]\n      [(even? (remainder num 10)) (loop (quotient num 10) (+ even\
    \ 1) odd)]\n      [else (loop (quotient num 10) even (+ odd 1))])))\n", "  (define\
    \ (even? num)\n    (zero? (modulo num 2)))\n  (define (count-even-odd num even\
    \ odd)\n    (cond [(zero? num) (values even odd)]\n          [(even? num) (count-even-odd\
    \ (quotient num 10) (+ even 1) odd)]\n          [else (count-even-odd (quotient\
    \ num 10) even (+ odd 1))]))\n  (count-even-odd num 0 0))\n", "  (define (even_odd_count_helper\
    \ num even odd)\n    (cond\n      [(zero? num) (values even odd)]\n      [(even?\
    \ (remainder num 10)) (even_odd_count_helper (quotient num 10) (+ even 1) odd)]\n\
    \      [else (even_odd_count_helper (quotient num 10) even (+ odd 1))]))\n  (even_odd_count_helper\
    \ num 0 0))\n", "  (define (even? n) (= (remainder n 2) 0))\n  (define (odd? n)\
    \ (not (even? n)))\n  (define (count-even-odds num)\n    (cond [(zero? num) (values\
    \ 0 0)]\n          [(even? num) (values (+ 1 (car (count-even-odds (quotient num\
    \ 10)))) (cadr (count-even-odds (quotient num 10))))]\n          [(odd? num) (values\
    \ (car (count-even-odds (quotient num 10))) (+ 1 (cadr (count-even-odds (quotient\
    \ num 10)))))]))\n  (count-even-odds num))\n", "  (define (helper num even odd)\n\
    \    (cond\n      [(zero? num) (values even odd)]\n      [(even? (remainder num\
    \ 10)) (helper (quotient num 10) (+ even 1) odd)]\n      [else (helper (quotient\
    \ num 10) even (+ odd 1))]))\n  (helper num 0 0))\n", "  (define (even_odd_count_iter\
    \ num even odd)\n    (cond [(zero? num) (values even odd)]\n          [(even?\
    \ (remainder num 10)) (even_odd_count_iter (quotient num 10) (+ even 1) odd)]\n\
    \          [else (even_odd_count_iter (quotient num 10) even (+ odd 1))]))\n \
    \ (even_odd_count_iter num 0 0))\n", "  (define (even_odd_count-iter num even-count\
    \ odd-count)\n    (cond [(zero? num) (values even-count odd-count)]\n        \
    \  [(even? (remainder num 10)) (even_odd_count-iter (quotient num 10) (+ even-count\
    \ 1) odd-count)]\n          [else (even_odd_count-iter (quotient num 10) even-count\
    \ (+ odd-count 1))]))\n  (even_odd_count-iter num 0 0))\n", "  (define (even?\
    \ n)\n    (zero? (modulo n 2)))\n  (define (even-odd-count-helper num even odd)\n\
    \    (cond [(zero? num) (values even odd)]\n          [(even? num) (even-odd-count-helper\
    \ (quotient num 10) (+ even 1) odd)]\n          [else (even-odd-count-helper (quotient\
    \ num 10) even (+ odd 1))]))\n  (even-odd-count-helper num 0 0))\n", "  (define\
    \ (even? x)\n    (zero? (modulo x 2)))\n  (define (odd? x)\n    (not (even? x)))\n\
    \  (define (count-even-odd num)\n    (cond [(zero? num) (values 0 0)]\n      \
    \    [(even? num) (let-values ([(even odd) (count-even-odd (quotient num 10))])\n\
    \                          (values (+ even 1) odd))]\n          [(odd? num) (let-values\
    \ ([(even odd) (count-even-odd (quotient num 10))])\n                        \
    \  (values even (+ odd 1)))]))\n  (count-even-odd num))\n", "  (define (even_odd_count_iter\
    \ num even odd)\n    (cond [(zero? num) (values even odd)]\n          [(even?\
    \ (remainder num 10)) (even_odd_count_iter (quotient num 10) (+ even 1) odd)]\n\
    \          [else (even_odd_count_iter (quotient num 10) even (+ odd 1))]))\n \
    \ (even_odd_count_iter num 0 0))\n", "  (define (even? n)\n    (zero? (modulo\
    \ n 2)))\n  (define (odd? n)\n    (not (even? n)))\n  (define (even-odd-count-helper\
    \ n even-count odd-count)\n    (cond\n      [(zero? n) (values even-count odd-count)]\n\
    \      [(even? n) (even-odd-count-helper (quotient n 10) (+ even-count 1) odd-count)]\n\
    \      [(odd? n) (even-odd-count-helper (quotient n 10) even-count (+ odd-count\
    \ 1))]))\n  (even-odd-count-helper num 0 0))\n", "  (cond\n    [(zero? num) (values\
    \ 0 0)]\n    [(even? (abs num)) (let-values ([(even odd) (even_odd_count (quotient\
    \ num 10))])\n                        (values (+ even 1) odd))]\n    [else (let-values\
    \ ([(even odd) (even_odd_count (quotient num 10))])\n            (values even\
    \ (+ odd 1)))]))\n", "  (define (helper num even odd)\n    (if (zero? num)\n \
    \       (values even odd)\n        (if (even? (remainder num 10))\n          \
    \  (helper (quotient num 10) (+ even 1) odd)\n            (helper (quotient num\
    \ 10) even (+ odd 1)))))\n  (helper num 0 0))\n", "  (define (even? num)\n   \
    \ (zero? (modulo num 2)))\n  (define (odd? num)\n    (not (even? num)))\n  (define\
    \ (count-even-odd num)\n    (cond\n      [(zero? num) (values 0 0)]\n      [(even?\
    \ num) (let-values ([(even odd) (count-even-odd (quotient num 10))])\n       \
    \               (values (+ even 1) odd))]\n      [(odd? num) (let-values ([(even\
    \ odd) (count-even-odd (quotient num 10))])\n                      (values even\
    \ (+ odd 1)))]))\n  (count-even-odd num))\n", "  (define (even? n)\n    (and (integer?\
    \ n)\n         (even? n)))\n  (define (odd? n)\n    (and (integer? n)\n      \
    \   (odd? n)))\n  (define (count-even-odd num)\n    (cond [(zero? num) (values\
    \ 0 0)]\n          [(even? num) (let-values ([(even odd) (count-even-odd (quotient\
    \ num 10))])\n                         (values (+ even 1) odd))]\n          [(odd?\
    \ num) (let-values ([(even odd) (count-even-odd (quotient num 10))])\n       \
    \                 (values even (+ odd 1)))]))\n  (count-even-odd num))\n", " \
    \ (define (even_odd_count_iter num even odd)\n    (cond\n      [(zero? num) (values\
    \ even odd)]\n      [(even? (remainder num 10)) (even_odd_count_iter (quotient\
    \ num 10) (+ even 1) odd)]\n      [else (even_odd_count_iter (quotient num 10)\
    \ even (+ odd 1))]))\n  (even_odd_count_iter num 0 0))\n", "  (define (helper\
    \ num even odd)\n    (cond\n      [(zero? num) (values even odd)]\n      [(even?\
    \ (remainder num 10)) (helper (quotient num 10) (+ even 1) odd)]\n      [else\
    \ (helper (quotient num 10) even (+ odd 1))]))\n  (helper num 0 0))\n", "  (define\
    \ (even? n)\n    (zero? (modulo n 2)))\n  (define (odd? n)\n    (not (even? n)))\n\
    \  (define (count-even-odd num)\n    (cond\n      [(zero? num) (values 0 0)]\n\
    \      [(even? num) (let-values ([(even odd) (count-even-odd (quotient num 10))])\n\
    \                     (values (+ even 1) odd))]\n      [(odd? num) (let-values\
    \ ([(even odd) (count-even-odd (quotient num 10))])\n                    (values\
    \ even (+ odd 1)))]))\n  (count-even-odd num))\n", "  (define (helper num even\
    \ odd)\n    (cond\n      [(= num 0) (values even odd)]\n      [(even? (remainder\
    \ num 10)) (helper (quotient num 10) (+ even 1) odd)]\n      [else (helper (quotient\
    \ num 10) even (+ odd 1))]))\n  (helper num 0 0))\n", "  (define (even? num)\n\
    \    (even? num))\n  (define (odd? num)\n    (odd? num))\n  (define (count-even\
    \ num)\n    (cond\n      [(zero? num) 0]\n      [(even? num) (+ 1 (count-even\
    \ (quotient num 10)))]\n      [else (count-even (quotient num 10))]))\n  (define\
    \ (count-odd num)\n    (cond\n      [(zero? num) 0]\n      [(odd? num) (+ 1 (count-odd\
    \ (quotient num 10)))]\n      [else (count-odd (quotient num 10))]))\n  (list\
    \ (count-even num) (count-odd num)))\n", "  (define (even_odd_count_helper num\
    \ even odd)\n    (cond [(zero? num) (values even odd)]\n          [(even? (remainder\
    \ num 10)) (even_odd_count_helper (quotient num 10) (+ even 1) odd)]\n       \
    \   [else (even_odd_count_helper (quotient num 10) even (+ odd 1))]))\n  (even_odd_count_helper\
    \ num 0 0))\n", "  (let loop ([num num] [even 0] [odd 0])\n    (cond [(zero? num)\
    \ (values even odd)]\n          [(even? (remainder num 10)) (loop (quotient num\
    \ 10) (+ even 1) odd)]\n          [else (loop (quotient num 10) even (+ odd 1))])))\n",
  "  (define (even_odd_count_helper num even_count odd_count)\n    (cond\n      [(zero?\
    \ num) (values even_count odd_count)]\n      [(even? (remainder num 10)) (even_odd_count_helper\
    \ (quotient num 10) (+ even_count 1) odd_count)]\n      [else (even_odd_count_helper\
    \ (quotient num 10) even_count (+ odd_count 1))]))\n  (even_odd_count_helper num\
    \ 0 0))\n", "  (define (even? num)\n    (even? num))\n  (define (odd? num)\n \
    \   (odd? num))\n  (define (count-even-odd num)\n    (cond\n      [(zero? num)\
    \ (values 0 0)]\n      [(even? num) (let-values ([(even-count odd-count) (count-even-odd\
    \ (quotient num 10))])\n                      (values (+ even-count 1) odd-count))]\n\
    \      [(odd? num) (let-values ([(even-count odd-count) (count-even-odd (quotient\
    \ num 10))])\n                      (values even-count (+ odd-count 1)))]))\n\
    \  (count-even-odd num))\n", "  (define (helper num even odd)\n    (cond\n   \
    \   [(zero? num) (values even odd)]\n      [(even? (remainder num 10)) (helper\
    \ (quotient num 10) (+ even 1) odd)]\n      [else (helper (quotient num 10) even\
    \ (+ odd 1))]))\n  (helper num 0 0))\n", "  (define (even? n)\n    (zero? (modulo\
    \ n 2)))\n  (define (odd? n)\n    (not (even? n)))\n  (define (count-even-odd\
    \ n)\n    (cond\n      [(zero? n) (values 0 0)]\n      [(even? n) (let-values\
    \ ([(even odd) (count-even-odd (quotient n 10))])\n                    (values\
    \ (+ even 1) odd))]\n      [(odd? n) (let-values ([(even odd) (count-even-odd\
    \ (quotient n 10))])\n                    (values even (+ odd 1)))]))\n  (count-even-odd\
    \ num))\n", "  (define (helper num even odd)\n    (if (zero? num)\n        (values\
    \ even odd)\n        (if (even? (remainder num 10))\n            (helper (quotient\
    \ num 10) (+ even 1) odd)\n            (helper (quotient num 10) even (+ odd 1)))))\n\
    \  (helper num 0 0))\n", "  (define (even? n)\n    (zero? (modulo n 2)))\n  (define\
    \ (odd? n)\n    (not (even? n)))\n  (define (count-even-odd num)\n    (cond [(zero?\
    \ num) (values 0 0)]\n          [(even? num) (let-values ([(even odd) (count-even-odd\
    \ (quotient num 10))])\n                         (values (+ even 1) odd))]\n \
    \         [(odd? num) (let-values ([(even odd) (count-even-odd (quotient num 10))])\n\
    \                        (values even (+ odd 1)))]))\n  (count-even-odd num))\n",
  "  (define (helper num even odd)\n    (cond\n      [(zero? num) (values even odd)]\n\
    \      [(even? (remainder num 10)) (helper (quotient num 10) (+ even 1) odd)]\n\
    \      [else (helper (quotient num 10) even (+ odd 1))]))\n  (helper num 0 0))\n",
  "  (define (even_odd_count_iter num even odd)\n    (cond\n      [(zero? num) (values\
    \ even odd)]\n      [(even? (remainder num 10)) (even_odd_count_iter (quotient\
    \ num 10) (+ even 1) odd)]\n      [else (even_odd_count_iter (quotient num 10)\
    \ even (+ odd 1))]))\n  (even_odd_count_iter num 0 0))\n", "  (let loop ([num\
    \ num] [even 0] [odd 0])\n    (cond [(zero? num) (values even odd)]\n        \
    \  [(even? (remainder num 10)) (loop (quotient num 10) (+ even 1) odd)]\n    \
    \      [else (loop (quotient num 10) even (+ odd 1))])))\n", "  (define (even_odd_count_helper\
    \ num even odd)\n    (cond\n      [(zero? num) (values even odd)]\n      [(even?\
    \ (remainder num 10)) (even_odd_count_helper (quotient num 10) (+ even 1) odd)]\n\
    \      [else (even_odd_count_helper (quotient num 10) even (+ odd 1))]))\n  (even_odd_count_helper\
    \ num 0 0))\n", "  (define (even_odd_count_iter num even odd)\n    (cond [(= num\
    \ 0) (values even odd)]\n          [(even? (remainder num 10)) (even_odd_count_iter\
    \ (quotient num 10) (+ even 1) odd)]\n          [else (even_odd_count_iter (quotient\
    \ num 10) even (+ odd 1))]))\n  (even_odd_count_iter num 0 0))\n", "  (let loop\
    \ ([num num] [even 0] [odd 0])\n    (cond [(zero? num) (values even odd)]\n  \
    \        [(even? (remainder num 10)) (loop (quotient num 10) (+ even 1) odd)]\n\
    \          [else (loop (quotient num 10) even (+ odd 1))])))\n", "  (define (even?\
    \ num)\n    (even? num))\n  (define (odd? num)\n    (odd? num))\n  (define (count-evens\
    \ nums)\n    (cond [(empty? nums) 0]\n          [(even? (first nums)) (+ 1 (count-evens\
    \ (rest nums)))]\n          [else (count-evens (rest nums))]))\n  (define (count-odds\
    \ nums)\n    (cond [(empty? nums) 0]\n          [(odd? (first nums)) (+ 1 (count-odds\
    \ (rest nums)))]\n          [else (count-odds (rest nums))]))\n  (tuple (count-evens\
    \ (string->list (number->string num)))\n         (count-odds (string->list (number->string\
    \ num)))))\n", "  (define (even_odd_count-helper num even odd)\n    (cond\n  \
    \    [(zero? num) (values even odd)]\n      [(even? (remainder num 10)) (even_odd_count-helper\
    \ (quotient num 10) (+ even 1) odd)]\n      [else (even_odd_count-helper (quotient\
    \ num 10) even (+ odd 1))]))\n  (even_odd_count-helper num 0 0))\n", "  (define\
    \ (even-odd-count-iter num even odd)\n    (cond [(zero? num) (values even odd)]\n\
    \          [(even? (remainder num 10)) (even-odd-count-iter (quotient num 10)\
    \ (+ even 1) odd)]\n          [else (even-odd-count-iter (quotient num 10) even\
    \ (+ odd 1))]))\n  (even-odd-count-iter num 0 0))\n", "  (define (even_odd_count_helper\
    \ num even odd)\n    (if (zero? num)\n        (values even odd)\n        (if (even?\
    \ (remainder num 10))\n            (even_odd_count_helper (quotient num 10) (+\
    \ even 1) odd)\n            (even_odd_count_helper (quotient num 10) even (+ odd\
    \ 1)))))\n  (even_odd_count_helper num 0 0))\n", "  (define (even_odd_count_helper\
    \ num even odd)\n    (if (zero? num)\n        (values even odd)\n        (if (even?\
    \ (remainder num 10))\n            (even_odd_count_helper (quotient num 10) (+\
    \ even 1) odd)\n            (even_odd_count_helper (quotient num 10) even (+ odd\
    \ 1)))))\n  (even_odd_count_helper num 0 0))\n", "  (define (even-odd-count-helper\
    \ num even odd)\n    (if (zero? num)\n        (values even odd)\n        (if (even?\
    \ (remainder num 10))\n            (even-odd-count-helper (quotient num 10) (+\
    \ even 1) odd)\n            (even-odd-count-helper (quotient num 10) even (+ odd\
    \ 1)))))\n  (even-odd-count-helper num 0 0))\n", "  (define (even_odd_count-helper\
    \ num even odd)\n    (cond\n      [(zero? num) (values even odd)]\n      [(even?\
    \ (remainder num 10)) (even_odd_count-helper (quotient num 10) (+ even 1) odd)]\n\
    \      [else (even_odd_count-helper (quotient num 10) even (+ odd 1))]))\n  (even_odd_count-helper\
    \ num 0 0))\n", "  (define (helper num even odd)\n    (cond\n      [(zero? num)\
    \ (values even odd)]\n      [(even? (remainder num 10)) (helper (quotient num\
    \ 10) (+ even 1) odd)]\n      [else (helper (quotient num 10) even (+ odd 1))]))\n\
    \  (helper num 0 0))\n", "  (let loop ([num num] [even 0] [odd 0])\n    (cond\
    \ [(zero? num) (values even odd)]\n          [(even? (remainder num 10)) (loop\
    \ (quotient num 10) (+ even 1) odd)]\n          [else (loop (quotient num 10)\
    \ even (+ odd 1))])))\n", "  (define (even_odd_count_helper num even odd)\n  \
    \  (cond [(zero? num) (values even odd)]\n          [(even? (remainder num 10))\
    \ (even_odd_count_helper (quotient num 10) (+ even 1) odd)]\n          [else (even_odd_count_helper\
    \ (quotient num 10) even (+ odd 1))]))\n  (even_odd_count_helper num 0 0))\n",
  "  (cond\n    [(zero? num) (values 0 0)]\n    [(even? (abs num)) (let ([even (first\
    \ (even_odd_count (quotient num 10)))])\n                        (values (+ even\
    \ 1) (second (even_odd_count (quotient num 10))))) ]\n    [else (let ([odd (second\
    \ (even_odd_count (quotient num 10)))])\n            (values (first (even_odd_count\
    \ (quotient num 10))) (+ odd 1)))]))\n", "  (define (even? n)\n    (if (zero?\
    \ (remainder n 2))\n        #t\n        #f))\n  (define (odd? n)\n    (if (zero?\
    \ (remainder n 2))\n        #f\n        #t))\n  (define (even-odd-count-helper\
    \ num even odd)\n    (if (zero? num)\n        (values even odd)\n        (if (even?\
    \ (remainder num 10))\n            (even-odd-count-helper (quotient num 10) (+\
    \ even 1) odd)\n            (even-odd-count-helper (quotient num 10) even (+ odd\
    \ 1)))))\n  (even-odd-count-helper num 0 0))\n", "  (define (helper num even odd)\n\
    \    (cond [(zero? num) (values even odd)]\n          [(even? (remainder num 10))\
    \ (helper (quotient num 10) (+ even 1) odd)]\n          [else (helper (quotient\
    \ num 10) even (+ odd 1))]))\n  (helper num 0 0))\n", "  (define (even? n) (=\
    \ (remainder n 2) 0))\n  (define (odd? n) (not (even? n)))\n  (define (count-even-odd\
    \ n)\n    (cond\n      [(zero? n) (values 0 0)]\n      [(even? n) (let-values\
    \ ([(even odd) (count-even-odd (quotient n 10))])\n                    (values\
    \ (+ even 1) odd))]\n      [(odd? n) (let-values ([(even odd) (count-even-odd\
    \ (quotient n 10))])\n                    (values even (+ odd 1)))]))\n  (count-even-odd\
    \ num))\n", "  (let loop ([num num] [even 0] [odd 0])\n    (cond [(zero? num)\
    \ (values even odd)]\n          [(even? (remainder num 10)) (loop (quotient num\
    \ 10) (+ even 1) odd)]\n          [else (loop (quotient num 10) even (+ odd 1))])))\n",
  "  (cond\n    [(zero? num) (values 0 0)]\n    [(even? (remainder num 10))\n    \
    \ (let ([even (first (even_odd_count (quotient num 10)))])\n       (values (+\
    \ even 1) (second (even_odd_count (quotient num 10)))))\n     ]\n    [else\n \
    \    (let ([odd (second (even_odd_count (quotient num 10)))])\n       (values\
    \ (first (even_odd_count (quotient num 10))) (+ odd 1)))]))\n", "  (let loop ((num\
    \ num) (even 0) (odd 0))\n    (cond\n      [(zero? num) (values even odd)]\n \
    \     [(even? (remainder num 10)) (loop (quotient num 10) (+ even 1) odd)]\n \
    \     [else (loop (quotient num 10) even (+ odd 1))])))\n", "  (cond\n    [(zero?\
    \ num) (cons 0 0)]\n    [(even? (remainder num 10)) (cons (+ 1 (car (even_odd_count\
    \ (quotient num 10)))) (cdr (even_odd_count (quotient num 10))))]\n    [else (cons\
    \ (car (even_odd_count (quotient num 10))) (+ 1 (cdr (even_odd_count (quotient\
    \ num 10)))))]))\n", "  (define (even-odd-count-helper num even-count odd-count)\n\
    \    (cond [(zero? num) (values even-count odd-count)]\n          [(even? (remainder\
    \ num 10)) (even-odd-count-helper (quotient num 10) (+ even-count 1) odd-count)]\n\
    \          [else (even-odd-count-helper (quotient num 10) even-count (+ odd-count\
    \ 1))]))\n  (even-odd-count-helper num 0 0))\n", "  (define (even? num)\n    (zero?\
    \ (modulo num 2)))\n  (define (odd? num)\n    (not (even? num)))\n  (define (count-even-odd\
    \ num)\n    (cond [(zero? num) (values 0 0)]\n          [(even? num) (values (+\
    \ 1 (cadr (count-even-odd (quotient num 10)))) (caddr (count-even-odd (quotient\
    \ num 10))))]\n          [(odd? num) (values (cadr (count-even-odd (quotient num\
    \ 10))) (+ 1 (caddr (count-even-odd (quotient num 10)))))]))\n  (count-even-odd\
    \ num))\n", "  (define (even? n)\n    (zero? (modulo n 2)))\n  (define (odd? n)\n\
    \    (not (even? n)))\n  (define (count-even-odd n even-count odd-count)\n   \
    \ (cond [(zero? n) (values even-count odd-count)]\n          [(even? n) (count-even-odd\
    \ (quotient n 10) (+ even-count 1) odd-count)]\n          [(odd? n) (count-even-odd\
    \ (quotient n 10) even-count (+ odd-count 1))]))\n  (count-even-odd num 0 0))\n",
  "  (define (is_even? n)\n    (even? n))\n  (define (is_odd? n)\n    (odd? n))\n\
    \  (define (count_even_odd num)\n    (cond\n      [(zero? num) (values 0 0)]\n\
    \      [(is_even? num) (values (+ 1 (car (count_even_odd (quotient num 10))))\
    \ (cadr (count_even_odd (quotient num 10))))]\n      [(is_odd? num) (values (car\
    \ (count_even_odd (quotient num 10))) (+ 1 (cadr (count_even_odd (quotient num\
    \ 10)))))]))\n  (count_even_odd num))\n", "  (define (even-odd-count-iter num\
    \ even odd)\n    (cond\n      [(zero? num) (values even odd)]\n      [(even? (remainder\
    \ num 10)) (even-odd-count-iter (quotient num 10) (+ even 1) odd)]\n      [else\
    \ (even-odd-count-iter (quotient num 10) even (+ odd 1))]))\n  (even-odd-count-iter\
    \ num 0 0))\n", "  (define (helper num even odd)\n    (cond\n      [(zero? num)\
    \ (values even odd)]\n      [(even? (remainder num 10)) (helper (quotient num\
    \ 10) (+ even 1) odd)]\n      [else (helper (quotient num 10) even (+ odd 1))]))\n\
    \  (helper num 0 0))\n", "  (let loop ([num num] [even 0] [odd 0])\n    (cond\
    \ [(zero? num) (values even odd)]\n          [(even? (remainder num 10)) (loop\
    \ (quotient num 10) (+ even 1) odd)]\n          [else (loop (quotient num 10)\
    \ even (+ odd 1))])))\n", "  (define (even? num)\n    (even? num))\n  (define\
    \ (odd? num)\n    (odd? num))\n  (define (even-odd-count-helper num even-count\
    \ odd-count)\n    (cond\n      [(zero? num) (values even-count odd-count)]\n \
    \     [(even? num) (even-odd-count-helper (quotient num 10) (+ even-count 1) odd-count)]\n\
    \      [(odd? num) (even-odd-count-helper (quotient num 10) even-count (+ odd-count\
    \ 1))]))\n  (even-odd-count-helper num 0 0))\n", "  (define (even? n)\n    (zero?\
    \ (modulo n 2)))\n  (define (count-even-odd n)\n    (cond\n      [(zero? n) (values\
    \ 0 0)]\n      [else (let* ([d (remainder n 10)]\n                   [even-odd\
    \ (count-even-odd (quotient n 10))])\n               (values (if (even? d) (+\
    \ 1 (car even-odd)) (car even-odd))\n                       (if (even? d) (cdr\
    \ even-odd) (+ 1 (cdr even-odd)))))]))\n  (count-even-odd num))\n", "  (define\
    \ (even? n)\n    (even? n))\n  (define (odd? n)\n    (odd? n))\n  (define (count-even-odd\
    \ num)\n    (cond\n      [(zero? num) (values 0 0)]\n      [(even? num) (let-values\
    \ ([(even odd) (count-even-odd (quotient num 10))])\n                      (values\
    \ (+ even 1) odd))]\n      [(odd? num) (let-values ([(even odd) (count-even-odd\
    \ (quotient num 10))])\n                      (values even (+ odd 1)))]))\n  (count-even-odd\
    \ num))\n", "  (letrec ([even-count (lambda (num)\n                         (if\
    \ (zero? num)\n                             0\n                             (if\
    \ (even? (remainder num 10))\n                                 (+ 1 (even-count\
    \ (quotient num 10)))\n                                 (even-count (quotient\
    \ num 10)))))])\n    (values (even-count num) (- (count-digits num) (even-count\
    \ num)))))\n", "  (let ([even-count 0]\n        [odd-count 0])\n    (for ([digit\
    \ (in-list (string->list (number->string num)))]\n          #:when (not (zero?\
    \ (modulo digit 2))))\n      (set! odd-count (+ odd-count 1)))\n    (for ([digit\
    \ (in-list (string->list (number->string num)))]\n          #:when (zero? (modulo\
    \ digit 2)))\n      (set! even-count (+ even-count 1)))\n    (values even-count\
    \ odd-count)))\n", "  (define (even? num)\n    (zero? (modulo num 2)))\n  (define\
    \ (odd? num)\n    (not (even? num)))\n  (define (count-even-odds num)\n    (cond\n\
    \      [(zero? num) (values 0 0)]\n      [(even? num) (let-values ([(evens odds)\
    \ (count-even-odds (quotient num 10))])\n                      (values (+ evens\
    \ 1) odds))]\n      [(odd? num) (let-values ([(evens odds) (count-even-odds (quotient\
    \ num 10))])\n                     (values evens (+ odds 1)))]))\n  (count-even-odds\
    \ num))\n", "  (let ([evens 0]\n        [odds 0])\n    (for ([i (in-range (abs\
    \ num))])\n      (if (even? (modulo (abs num) 10))\n          (set! evens (+ evens\
    \ 1))\n          (set! odds (+ odds 1)))\n      (set! num (quotient num 10)))\n\
    \    (values evens odds)))\n", "  (define (even_odd_count_iter num even odd)\n\
    \    (cond\n      [(zero? num) (values even odd)]\n      [(even? (remainder num\
    \ 10)) (even_odd_count_iter (quotient num 10) (+ even 1) odd)]\n      [else (even_odd_count_iter\
    \ (quotient num 10) even (+ odd 1))]))\n  (even_odd_count_iter num 0 0))\n", " \
    \ (define (even? n)\n    (zero? (modulo n 2)))\n  (define (odd? n)\n    (not (even?\
    \ n)))\n  (define (count-even-odd num)\n    (cond [(zero? num) (values 0 0)]\n\
    \          [(even? num) (let-values ([(even odd) (count-even-odd (quotient num\
    \ 10))])\n                         (values (+ even 1) odd))]\n          [(odd?\
    \ num) (let-values ([(even odd) (count-even-odd (quotient num 10))])\n       \
    \                 (values even (+ odd 1)))]))\n  (count-even-odd num))\n", " \
    \ (define (even-odd-count-iter num even-count odd-count)\n    (cond\n      [(zero?\
    \ num) (values even-count odd-count)]\n      [(even? (remainder num 10)) (even-odd-count-iter\
    \ (quotient num 10) (+ even-count 1) odd-count)]\n      [else (even-odd-count-iter\
    \ (quotient num 10) even-count (+ odd-count 1))]))\n  (even-odd-count-iter num\
    \ 0 0))\n", "  (letrec ([even-count (lambda (num) (if (zero? num) 0 (+ (if (even?\
    \ (remainder num 10)) 1 0) (even-count (quotient num 10)))))]\n           [odd-count\
    \ (lambda (num) (if (zero? num) 0 (+ (if (odd? (remainder num 10)) 1 0) (odd-count\
    \ (quotient num 10)))))]\n           [count (lambda (num) (values (even-count\
    \ num) (odd-count num)))])\n    (count num)))\n", "  (define (even? n)\n    (zero?\
    \ (modulo n 2)))\n  (define (count-even-odd num)\n    (cond [(zero? num) (values\
    \ 0 0)]\n          [(even? num) (let-values ([(even odd) (count-even-odd (quotient\
    \ num 10))])\n                         (values (+ even 1) odd))]\n          [else\
    \ (let-values ([(even odd) (count-even-odd (quotient num 10))])\n            \
    \      (values even (+ odd 1)))]))\n  (count-even-odd num))\n", "  (define (even_odd_count-helper\
    \ num even odd)\n    (cond\n      [(zero? num) (values even odd)]\n      [(even?\
    \ (remainder num 10)) (even_odd_count-helper (quotient num 10) (+ even 1) odd)]\n\
    \      [else (even_odd_count-helper (quotient num 10) even (+ odd 1))]))\n  (even_odd_count-helper\
    \ num 0 0))\n", "  (let* ([str (number->string num)]\n         [even-count (count-even-digits\
    \ str)]\n         [odd-count (count-odd-digits str)])\n    (values even-count\
    \ odd-count)))\n", "  (define (helper num even odd)\n    (cond\n      [(zero?\
    \ num) (values even odd)]\n      [(even? (remainder num 10)) (helper (quotient\
    \ num 10) (+ even 1) odd)]\n      [else (helper (quotient num 10) even (+ odd\
    \ 1))]))\n  (helper num 0 0))\n", "  (define (even? n)\n    (zero? (modulo n 2)))\n\
    \  (define (odd? n)\n    (not (even? n)))\n  (define (count-even-odd num)\n  \
    \  (if (zero? num)\n        (values 0 0)\n        (let* ([d (modulo num 10)]\n\
    \               [r (quotient num 10)]\n               [even-count (if (even? d)\
    \ 1 0)]\n               [odd-count (if (odd? d) 1 0)])\n          (let-values\
    \ ([(e o) (count-even-odd r)])\n            (values (+ even-count e) (+ odd-count\
    \ o))))))\n  (count-even-odd num))\n", "  (define (even_odd_count-helper num even\
    \ odd)\n    (if (zero? num)\n        (values even odd)\n        (if (even? (remainder\
    \ num 10))\n            (even_odd_count-helper (quotient num 10) (+ even 1) odd)\n\
    \            (even_odd_count-helper (quotient num 10) even (+ odd 1)))))\n  (even_odd_count-helper\
    \ num 0 0))\n", "  (define (even-odd-count-helper num even-count odd-count)\n\
    \    (cond [(zero? num) (values even-count odd-count)]\n          [(even? (remainder\
    \ num 10))\n           (even-odd-count-helper (quotient num 10) (+ even-count\
    \ 1) odd-count)]\n          [else (even-odd-count-helper (quotient num 10) even-count\
    \ (+ odd-count 1))]))\n  (even-odd-count-helper num 0 0))\n", "  (define (even-odd-count-helper\
    \ num even-count odd-count)\n    (cond\n      [(zero? num) (values even-count\
    \ odd-count)]\n      [(even? (remainder num 10)) (even-odd-count-helper (quotient\
    \ num 10) (+ even-count 1) odd-count)]\n      [else (even-odd-count-helper (quotient\
    \ num 10) even-count (+ odd-count 1))]))\n  (even-odd-count-helper num 0 0))\n",
  "  (let loop ((num num) (even 0) (odd 0))\n    (cond ((= num 0) (values even odd))\n\
    \          ((even? (remainder num 10)) (loop (quotient num 10) (+ even 1) odd))\n\
    \          (else (loop (quotient num 10) even (+ odd 1))))))\n", "  (define (even_odd_count_iter\
    \ num even odd)\n    (cond\n      [(zero? num) (values even odd)]\n      [(even?\
    \ (remainder num 10)) (even_odd_count_iter (quotient num 10) (+ even 1) odd)]\n\
    \      [else (even_odd_count_iter (quotient num 10) even (+ odd 1))]))\n  (even_odd_count_iter\
    \ num 0 0))\n", "  (cond\n    [(zero? num) (values 0 0)]\n    [(even? (remainder\
    \ num 10))\n     (let-values ([(evens odds) (even_odd_count (quotient num 10))])\n\
    \       (values (+ evens 1) odds))]\n    [else\n     (let-values ([(evens odds)\
    \ (even_odd_count (quotient num 10))])\n       (values evens (+ odds 1)))]))\n",
  "  (define (even_odd_count_iter num even odd)\n    (cond [(zero? num) (values even\
    \ odd)]\n          [(even? (remainder num 10)) (even_odd_count_iter (quotient\
    \ num 10) (+ even 1) odd)]\n          [else (even_odd_count_iter (quotient num\
    \ 10) even (+ odd 1))]))\n  (even_odd_count_iter num 0 0))\n", "  (define (even?\
    \ n)\n    (even? n))\n  (define (odd? n)\n    (odd? n))\n  (define (count-even-odd\
    \ num)\n    (cond\n      [(zero? num) (values 0 0)]\n      [(even? num) (let-values\
    \ ([(even-count odd-count) (count-even-odd (quotient num 10))])\n            \
    \         (values (+ even-count 1) odd-count))]\n      [(odd? num) (let-values\
    \ ([(even-count odd-count) (count-even-odd (quotient num 10))])\n            \
    \        (values even-count (+ odd-count 1)))]))\n  (count-even-odd num))\n",
  "  (define (even-odd-count-iter num even-count odd-count)\n    (cond\n      [(zero?\
    \ num) (values even-count odd-count)]\n      [(even? (remainder num 10)) (even-odd-count-iter\
    \ (quotient num 10) (+ even-count 1) odd-count)]\n      [else (even-odd-count-iter\
    \ (quotient num 10) even-count (+ odd-count 1))]))\n  (even-odd-count-iter num\
    \ 0 0))\n", "  (define (even_odd_count_iter num even odd)\n    (cond\n      [(zero?\
    \ num) (values even odd)]\n      [(even? (remainder num 10)) (even_odd_count_iter\
    \ (quotient num 10) (+ even 1) odd)]\n      [else (even_odd_count_iter (quotient\
    \ num 10) even (+ odd 1))]))\n  (even_odd_count_iter num 0 0))\n", "  (define\
    \ (even_odd_count_helper num even odd)\n    (cond\n      [(zero? num) (values\
    \ even odd)]\n      [(even? (remainder num 10)) (even_odd_count_helper (quotient\
    \ num 10) (+ even 1) odd)]\n      [else (even_odd_count_helper (quotient num 10)\
    \ even (+ odd 1))]))\n  (even_odd_count_helper num 0 0))\n", "  (let loop ([num\
    \ num] [even 0] [odd 0])\n    (cond\n      [(zero? num) (values even odd)]\n \
    \     [(even? (remainder num 10)) (loop (quotient num 10) (+ even 1) odd)]\n \
    \     [else (loop (quotient num 10) even (+ odd 1))])))\n", "  (let loop ([num\
    \ num] [even 0] [odd 0])\n    (cond [(zero? num) (values even odd)]\n        \
    \  [(even? (remainder num 10)) (loop (quotient num 10) (+ even 1) odd)]\n    \
    \      [else (loop (quotient num 10) even (+ odd 1))])))\n", "  (define (even_odd_count-helper\
    \ num even odd)\n    (cond\n      [(zero? num) (values even odd)]\n      [(even?\
    \ (remainder num 10)) (even_odd_count-helper (quotient num 10) (+ even 1) odd)]\n\
    \      [else (even_odd_count-helper (quotient num 10) even (+ odd 1))]))\n  (even_odd_count-helper\
    \ num 0 0))\n", "  (define (even_odd_count_helper num even odd)\n    (cond\n \
    \     [(zero? num) (values even odd)]\n      [(even? (remainder num 10)) (even_odd_count_helper\
    \ (quotient num 10) (+ even 1) odd)]\n      [else (even_odd_count_helper (quotient\
    \ num 10) even (+ odd 1))]))\n  (even_odd_count_helper num 0 0))\n", "  (define\
    \ (even? n) (= (remainder n 2) 0))\n  (define (odd? n) (not (even? n)))\n  (define\
    \ (count-even-odd n)\n    (cond\n      [(zero? n) (values 0 0)]\n      [(even?\
    \ n) (values (+ 1 (car (count-even-odd (quotient n 10)))) (cadr (count-even-odd\
    \ (quotient n 10))))]\n      [(odd? n) (values (car (count-even-odd (quotient\
    \ n 10))) (+ 1 (cadr (count-even-odd (quotient n 10)))))]))\n  (count-even-odd\
    \ num))\n", "  (define (even-odd-count-helper num even-count odd-count)\n    (cond\n\
    \      [(zero? num) (values even-count odd-count)]\n      [(even? (remainder num\
    \ 10)) (even-odd-count-helper (quotient num 10) (+ even-count 1) odd-count)]\n\
    \      [else (even-odd-count-helper (quotient num 10) even-count (+ odd-count\
    \ 1))]))\n  (even-odd-count-helper num 0 0))\n"]
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
