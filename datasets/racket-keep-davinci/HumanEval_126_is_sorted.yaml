name: HumanEval_126_is_sorted
language: racket
prompt: "#lang racket\n\n;; Given a list of numbers, return whether or not they are\
  \ sorted\n;; in ascending order. If list has more than 1 duplicate of the same\n\
  ;; number, return False. Assume no negative numbers and only integers.\n;; Examples\n\
  ;; is_sorted([5]) \u279E True\n;; is_sorted([1, 2, 3, 4, 5]) \u279E True\n;; is_sorted([1,\
  \ 3, 2, 4, 5]) \u279E False\n;; is_sorted([1, 2, 3, 4, 5, 6]) \u279E True\n;; is_sorted([1,\
  \ 2, 3, 4, 5, 6, 7]) \u279E True\n;; is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279E False\n\
  ;; is_sorted([1, 2, 2, 3, 3, 4]) \u279E True\n;; is_sorted([1, 2, 2, 2, 3, 4]) \u279E\
  \ False\n(define (is_sorted lst)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_sorted))\n\
  \    (check-equal? (candidate (list 5)) #t)\n    (check-equal? (candidate (list\
  \ 1 2 3 4 5)) #t)\n    (check-equal? (candidate (list 1 3 2 4 5)) #f)\n    (check-equal?\
  \ (candidate (list 1 2 3 4 5 6)) #t)\n    (check-equal? (candidate (list 1 2 3 4\
  \ 5 6 7)) #t)\n    (check-equal? (candidate (list 1 3 2 4 5 6 7)) #f)\n    (check-equal?\
  \ (candidate (list )) #t)\n    (check-equal? (candidate (list 1)) #t)\n    (check-equal?\
  \ (candidate (list 3 2 1)) #f)\n    (check-equal? (candidate (list 1 2 2 2 3 4))\
  \ #f)\n    (check-equal? (candidate (list 1 2 3 3 3 4)) #f)\n    (check-equal? (candidate\
  \ (list 1 2 2 3 3 4)) #t)\n    (check-equal? (candidate (list 1 2 3 4)) #t)\n))\n\
  \n(test-humaneval)"
completions: ["  (cond\n    [(empty? lst) #t]\n    [(empty? (rest lst)) #t]\n    [(<\
    \ (first lst) (second lst)) (is_sorted (rest lst))]\n    [else #f]))\n", "  (cond\n\
    \    [(empty? lst) #t]\n    [(empty? (rest lst)) #t]\n    [(< (first lst) (second\
    \ lst)) (is_sorted (rest lst))]\n    [else #f]))\n", "  (cond\n    [(null? lst)\
    \ #t]\n    [(null? (cdr lst)) #t]\n    [(< (car lst) (cadr lst)) (is_sorted (cdr\
    \ lst))]\n    [else #f]))\n", "  (cond\n    [(empty? lst) #t]\n    [(empty? (rest\
    \ lst)) #t]\n    [(< (first lst) (second lst)) (is_sorted (rest lst))]\n    [else\
    \ #f]))\n", "  (cond\n    [(empty? lst) #t]\n    [(empty? (rest lst)) #t]\n  \
    \  [(< (first lst) (second lst)) (is_sorted (rest lst))]\n    [else #f]))\n",
  "  (cond\n    [(empty? lst) #t]\n    [(empty? (rest lst)) #t]\n    [(< (first lst)\
    \ (second lst)) (is_sorted (rest lst))]\n    [else #f]))\n", "  (cond\n    [(empty?\
    \ lst) #t]\n    [(empty? (rest lst)) #t]\n    [(< (first lst) (second lst)) (is_sorted\
    \ (rest lst))]\n    [else #f]))\n", "  (cond\n    [(null? lst) #t]\n    [(null?\
    \ (cdr lst)) #t]\n    [(and (not (null? (cdr lst)))\n          (not (null? (cddr\
    \ lst)))\n          (not (null? (cdddr lst)))\n          (not (null? (cddddr lst)))\n\
    \          (not (null? (cdddddr lst)))\n          (not (null? (cddddddr lst)))\n\
    \          (not (null? (cdddddddr lst)))\n          (not (null? (cddddddddr lst)))\n\
    \          (not (null? (cdddddddddr lst)))\n          (not (null? (cddddddddddr\
    \ lst)))\n          (not (null? (cdddddddddddr lst)))\n          (not (null? (cddddddddddddr\
    \ lst)))\n          (not (null? (cdddddddddddddr lst)))\n          (not (null?\
    \ (cddddddddddddddr lst)))\n          (not (null? (cdddddddddddddddr lst)))\n\
    \          (not (null? (cddddddddddddddddr lst)))\n          (not (null? (cdddddddddddddddddr\
    \ lst)))\n          (not (null? (cddddddddddddddddddr lst)))\n          (not (null?\
    \ (cdddddddddddddddddddr lst)))\n          (not (null? (cddddddddddddddddddddr\
    \ lst)))\n          (not (null? (cdddddddddddddddddddddr lst)))\n          (not\
    \ (null? (cddddddddddddddddddddddr lst)))\n          (not (null? (cdddddddddddddddddddddddr\
    \ lst)))\n          (not (null? (cddddddddddddddddddddddddr lst)))\n         \
    \ (not (null? (cdddddddddddddddddddddddddr lst)))", "  (cond\n    [(empty? lst)\
    \ #t]\n    [(empty? (rest lst)) #t]\n    [(< (first lst) (second lst)) (is_sorted\
    \ (rest lst))]\n    [else #f]))\n", "  (cond\n    [(empty? lst) #t]\n    [(empty?\
    \ (rest lst)) #t]\n    [(< (first lst) (second lst)) (is_sorted (rest lst))]\n\
    \    [else #f]))\n", "  (cond [(empty? lst) #t]\n        [(empty? (rest lst))\
    \ #t]\n        [(and (= (first lst) (second lst))\n              (is_sorted (rest\
    \ lst))) #f]\n        [(and (< (first lst) (second lst))\n              (is_sorted\
    \ (rest lst))) #t]\n        [else #f]))\n", "  (cond\n    [(empty? lst) #t]\n\
    \    [(empty? (rest lst)) #t]\n    [(< (first lst) (second lst)) (is_sorted (rest\
    \ lst))]\n    [else #f]))\n", "  (cond\n    [(empty? lst) #t]\n    [(empty? (rest\
    \ lst)) #t]\n    [(< (first lst) (second lst)) (is_sorted (rest lst))]\n    [else\
    \ #f]))\n", "  (cond\n    [(empty? lst) #t]\n    [(empty? (rest lst)) #t]\n  \
    \  [(> (first lst) (second lst)) #f]\n    [else (is_sorted (rest lst))]))\n",
  "  (cond\n    [(empty? lst) #t]\n    [(empty? (rest lst)) #t]\n    [(< (first lst)\
    \ (second lst)) (is_sorted (rest lst))]\n    [else #f]))\n", "  (cond\n    [(empty?\
    \ lst) #t]\n    [(empty? (rest lst)) #t]\n    [(< (first lst) (second lst)) (is_sorted\
    \ (rest lst))]\n    [else #f]))\n", "  (cond\n    [(null? lst) #t]\n    [(null?\
    \ (cdr lst)) #t]\n    [(< (car lst) (cadr lst)) (is_sorted (cdr lst))]\n    [else\
    \ #f]))\n", "  (cond\n    [(empty? lst) #t]\n    [(empty? (rest lst)) #t]\n  \
    \  [(> (first lst) (second lst)) #f]\n    [else (is_sorted (rest lst))]))\n",
  "  (cond\n    [(empty? lst) #t]\n    [(empty? (rest lst)) #t]\n    [(< (first lst)\
    \ (second lst)) (is_sorted (rest lst))]\n    [else #f]))\n", "  (cond\n    [(empty?\
    \ lst) #t]\n    [(empty? (rest lst)) #t]\n    [(< (first lst) (second lst)) (is_sorted\
    \ (rest lst))]\n    [else #f]))\n", "  (cond\n    [(empty? lst) #t]\n    [(empty?\
    \ (rest lst)) #t]\n    [(< (first lst) (second lst)) (is_sorted (rest lst))]\n\
    \    [else #f]))\n", "  (cond\n    [(empty? lst) #t]\n    [(empty? (rest lst))\
    \ #t]\n    [(< (first lst) (second lst)) (is_sorted (rest lst))]\n    [else #f]))\n",
  "  (cond\n    [(empty? lst) #t]\n    [(empty? (rest lst)) #t]\n    [(and (not (empty?\
    \ lst)) (not (empty? (rest lst))))\n     (and (<= (first lst) (second lst)) (is_sorted\
    \ (rest lst)))]))\n", "  (cond\n    [(empty? lst) #t]\n    [(empty? (rest lst))\
    \ #t]\n    [(and (not (empty? lst))\n          (not (empty? (rest lst)))\n   \
    \       (not (empty? (rest (rest lst))))\n          (and (<= (first lst) (second\
    \ lst))\n               (<= (second lst) (third lst))))\n     (is_sorted (rest\
    \ lst))]\n    [else #f]))\n", "  (cond\n    [(empty? lst) #t]\n    [(empty? (rest\
    \ lst)) #t]\n    [(< (first lst) (second lst)) (is_sorted (rest lst))]\n    [else\
    \ #f]))\n", "  (cond\n    [(empty? lst) #t]\n    [(empty? (rest lst)) #t]\n  \
    \  [(< (first lst) (second lst)) (is_sorted (rest lst))]\n    [else #f]))\n",
  "  (cond\n    [(empty? lst) #t]\n    [(empty? (rest lst)) #t]\n    [(< (first lst)\
    \ (second lst)) (is_sorted (rest lst))]\n    [else #f]))\n", "  (cond\n    [(empty?\
    \ lst) #t]\n    [(empty? (rest lst)) #t]\n    [(< (first lst) (second lst)) (is_sorted\
    \ (rest lst))]\n    [else #f]))\n", "  (cond\n    [(empty? lst) #t]\n    [(empty?\
    \ (rest lst)) #t]\n    [(< (first lst) (second lst)) (is_sorted (rest lst))]\n\
    \    [else #f]))\n", "  (cond [(empty? lst) #t]\n        [(empty? (rest lst))\
    \ #t]\n        [(and (not (empty? (rest lst)))\n              (not (empty? (rest\
    \ (rest lst))))\n              (and (= (first lst) (second lst))\n           \
    \        (= (second lst) (third lst)))) #f]\n        [(and (not (empty? (rest\
    \ lst)))\n              (not (empty? (rest (rest lst)))))\n         (and (<= (first\
    \ lst) (second lst))\n              (is_sorted (rest lst)))]))\n", "  (cond\n\
    \    [(empty? lst) #t]\n    [(empty? (rest lst)) #t]\n    [(< (first lst) (second\
    \ lst)) (is_sorted (rest lst))]\n    [else #f]))\n", "  (cond [(empty? lst) #t]\n\
    \        [(empty? (rest lst)) #t]\n        [(< (first lst) (second lst)) (is_sorted\
    \ (rest lst))]\n        [else #f]))\n", "  (cond\n    [(empty? lst) #t]\n    [(empty?\
    \ (rest lst)) #t]\n    [(< (first lst) (second lst)) (is_sorted (rest lst))]\n\
    \    [else #f]))\n", "  (cond\n    [(empty? lst) #t]\n    [(empty? (rest lst))\
    \ #t]\n    [(< (first lst) (second lst)) (is_sorted (rest lst))]\n    [else #f]))\n",
  "  (cond\n    [(empty? lst) #t]\n    [(empty? (rest lst)) #t]\n    [(< (first lst)\
    \ (second lst)) (is_sorted (rest lst))]\n    [else #f]))\n", "  (cond\n    [(empty?\
    \ lst) #t]\n    [(empty? (rest lst)) #t]\n    [(< (first lst) (second lst)) (is_sorted\
    \ (rest lst))]\n    [else #f]))\n", "  (cond\n    [(empty? lst) true]\n    [(empty?\
    \ (rest lst)) true]\n    [(< (first lst) (second lst)) (is_sorted (rest lst))]\n\
    \    [else false]))\n", "  (cond\n    [(empty? lst) #t]\n    [(empty? (rest lst))\
    \ #t]\n    [(< (first lst) (second lst)) (is_sorted (rest lst))]\n    [else #f]))\n",
  "  (cond [(empty? lst) #t]\n        [(empty? (rest lst)) #t]\n        [(< (first\
    \ lst) (second lst)) (is_sorted (rest lst))]\n        [else #f]))\n", "  (cond\
    \ [(empty? lst) true]\n        [(empty? (rest lst)) true]\n        [(< (first\
    \ lst) (second lst)) (is_sorted (rest lst))]\n        [else false]))\n", "  (cond\n\
    \    [(empty? lst) #t]\n    [(empty? (rest lst)) #t]\n    [(< (first lst) (second\
    \ lst)) (is_sorted (rest lst))]\n    [else #f]))\n", "  (cond\n    [(empty? lst)\
    \ #t]\n    [(empty? (rest lst)) #t]\n    [(< (first lst) (second lst)) (is_sorted\
    \ (rest lst))]\n    [else #f]))\n", "  (cond\n    [(empty? lst) #t]\n    [(empty?\
    \ (rest lst)) #t]\n    [(< (first lst) (second lst)) (is_sorted (rest lst))]\n\
    \    [else #f]))\n", "  (cond\n    [(empty? lst) #t]\n    [(empty? (rest lst))\
    \ #t]\n    [(< (first lst) (second lst)) (is_sorted (rest lst))]\n    [else #f]))\n",
  "  (cond\n    [(empty? lst) #t]\n    [(empty? (rest lst)) #t]\n    [(< (first lst)\
    \ (second lst)) (is_sorted (rest lst))]\n    [else #f]))\n", "  (cond\n    [(empty?\
    \ lst) true]\n    [(empty? (rest lst)) true]\n    [(< (first lst) (second lst))\
    \ (is_sorted (rest lst))]\n    [else false]))\n", "  (cond\n    [(empty? lst)\
    \ #t]\n    [(empty? (rest lst)) #t]\n    [(> (first lst) (second lst)) #f]\n \
    \   [else (is_sorted (rest lst))]))\n", "  (cond\n    [(empty? lst) #t]\n    [(empty?\
    \ (rest lst)) #t]\n    [(< (first lst) (second lst)) (is_sorted (rest lst))]\n\
    \    [else #f]))\n", "  (cond\n    [(empty? lst) #t]\n    [(empty? (rest lst))\
    \ #t]\n    [(> (first lst) (second lst)) #f]\n    [else (is_sorted (rest lst))]))\n",
  "  (cond [(empty? lst) true]\n        [(empty? (rest lst)) true]\n        [(> (first\
    \ lst) (second lst)) false]\n        [else (is_sorted (rest lst))]))\n", "  (cond\
    \ [(empty? lst) #t]\n        [(empty? (rest lst)) #t]\n        [(> (first lst)\
    \ (second lst)) #f]\n        [else (is_sorted (rest lst))]))\n", "  (cond\n  \
    \  [(empty? lst) #t]\n    [(empty? (rest lst)) #t]\n    [(< (first lst) (second\
    \ lst)) (is_sorted (rest lst))]\n    [else #f]))\n", "  (cond\n    [(empty? lst)\
    \ #t]\n    [(empty? (rest lst)) #t]\n    [(> (first lst) (second lst)) #f]\n \
    \   [else (is_sorted (rest lst))]))\n", "  (cond\n    [(empty? lst) true]\n  \
    \  [(empty? (rest lst)) true]\n    [(< (first lst) (second lst)) (is_sorted (rest\
    \ lst))]\n    [else false]))\n", "  (cond\n    [(empty? lst) #t]\n    [(empty?\
    \ (rest lst)) #t]\n    [(< (first lst) (second lst)) (is_sorted (rest lst))]\n\
    \    [else #f]))\n", "  (cond\n    [(empty? lst) #t]\n    [(empty? (rest lst))\
    \ #t]\n    [(< (first lst) (second lst)) (is_sorted (rest lst))]\n    [else #f]))\n",
  "  (cond\n    [(empty? lst) #t]\n    [(empty? (rest lst)) #t]\n    [(< (first lst)\
    \ (second lst)) (is_sorted (rest lst))]\n    [else #f]))\n", "  (cond\n    [(empty?\
    \ lst) true]\n    [(empty? (rest lst)) true]\n    [(> (first lst) (second lst))\
    \ false]\n    [else (is_sorted (rest lst))]))\n", "  (cond\n    [(empty? lst)\
    \ #t]\n    [(empty? (rest lst)) #t]\n    [(> (first lst) (second lst)) #f]\n \
    \   [else (is_sorted (rest lst))]))\n", "  (cond\n    [(empty? lst) #t]\n    [(empty?\
    \ (rest lst)) #t]\n    [(< (first lst) (second lst)) (is_sorted (rest lst))]\n\
    \    [else #f]))\n", "  (cond\n    [(null? lst) #t]\n    [(null? (cdr lst)) #t]\n\
    \    [(and (equal? (car lst) (cadr lst))\n          (not (null? (cddr lst))))\
    \ #f]\n    [(and (< (car lst) (cadr lst))\n          (is_sorted (cdr lst))) #t]\n\
    \    [else #f]))\n", "  (cond\n    [(empty? lst) #t]\n    [(empty? (rest lst))\
    \ #t]\n    [(and (not (empty? lst)) (not (empty? (rest lst))))\n     (and (<=\
    \ (first lst) (second lst)) (is_sorted (rest lst)))]))\n", "  (cond\n    [(null?\
    \ lst) #t]\n    [(null? (cdr lst)) #t]\n    [(null? (cddr lst))\n     (if (<=\
    \ (car lst) (cadr lst))\n         #t\n         #f)]\n    [else\n     (if (<= (car\
    \ lst) (cadr lst))\n         (is_sorted (cdr lst))\n         #f)]))\n", "  (cond\n\
    \    [(empty? lst) #t]\n    [(empty? (rest lst)) #t]\n    [(> (first lst) (second\
    \ lst)) #f]\n    [else (is_sorted (rest lst))]))\n", "  (cond\n    [(empty? lst)\
    \ #t]\n    [(empty? (rest lst)) #t]\n    [(< (first lst) (second lst)) (is_sorted\
    \ (rest lst))]\n    [else #f]))\n", "  (cond\n    [(empty? lst) #t]\n    [(empty?\
    \ (rest lst)) #t]\n    [(< (first lst) (second lst)) (is_sorted (rest lst))]\n\
    \    [else #f]))\n", "  (cond\n    [(null? lst) #t]\n    [(null? (cdr lst)) #t]\n\
    \    [(and (equal? (car lst) (cadr lst)) (not (null? (cddr lst)))) #f]\n    [(and\
    \ (< (car lst) (cadr lst)) (is_sorted (cdr lst))) #t]\n    [else #f]))\n", " \
    \ (cond\n    [(empty? lst) true]\n    [(empty? (rest lst)) true]\n    [(and (not\
    \ (empty? lst)) (not (empty? (rest lst))))\n     (and (<= (first lst) (second\
    \ lst)) (is_sorted (rest lst)))]))\n", "  (cond\n    [(empty? lst) #t]\n    [(empty?\
    \ (rest lst)) #t]\n    [(< (first lst) (second lst)) (is_sorted (rest lst))]\n\
    \    [else #f]))\n", "  (cond\n    [(empty? lst) #t]\n    [(empty? (rest lst))\
    \ #t]\n    [(> (first lst) (second lst)) #f]\n    [else (is_sorted (rest lst))]))\n",
  "  (cond\n    [(empty? lst) #t]\n    [(empty? (rest lst)) #t]\n    [(< (first lst)\
    \ (second lst)) (is_sorted (rest lst))]\n    [else #f]))\n", "  (cond\n    [(empty?\
    \ lst) #t]\n    [(empty? (rest lst)) #t]\n    [(< (first lst) (second lst)) (is_sorted\
    \ (rest lst))]\n    [else #f]))\n", "  (cond [(empty? lst) #t]\n        [(empty?\
    \ (rest lst)) #t]\n        [(< (first lst) (second lst)) (is_sorted (rest lst))]\n\
    \        [else #f]))\n", "  (cond\n    [(empty? lst) #t]\n    [(empty? (rest lst))\
    \ #t]\n    [(< (first lst) (second lst)) (is_sorted (rest lst))]\n    [else #f]))\n",
  "  (cond\n    [(empty? lst) true]\n    [(empty? (rest lst)) true]\n    [(< (first\
    \ lst) (second lst)) (is_sorted (rest lst))]\n    [else false]))\n", "  (cond\
    \ [(empty? lst) #t]\n        [(empty? (rest lst)) #t]\n        [(< (first lst)\
    \ (second lst)) (is_sorted (rest lst))]\n        [else #f]))\n", "  (cond\n  \
    \  [(empty? lst) #t]\n    [(empty? (rest lst)) #t]\n    [(< (first lst) (second\
    \ lst)) (is_sorted (rest lst))]\n    [else #f]))\n", "  (cond\n    [(empty? lst)\
    \ #t]\n    [(empty? (rest lst)) #t]\n    [(and (empty? (rest (rest lst)))\n  \
    \        (and (<= (first lst) (second lst))\n               (<= (second lst) (first\
    \ lst)))) #t]\n    [(and (<= (first lst) (second lst))\n          (<= (second\
    \ lst) (third lst)))\n     (is_sorted (rest lst))]\n    [else #f]))\n", "  (cond\n\
    \    [(empty? lst) #t]\n    [(empty? (rest lst)) #t]\n    [(< (first lst) (second\
    \ lst)) (is_sorted (rest lst))]\n    [else #f]))\n", "  (cond\n    [(empty? lst)\
    \ #t]\n    [(empty? (rest lst)) #t]\n    [(< (first lst) (second lst)) (is_sorted\
    \ (rest lst))]\n    [else #f]))\n", "  (cond [(empty? lst) true]\n        [(empty?\
    \ (rest lst)) true]\n        [(and (not (empty? (rest lst)))\n              (not\
    \ (empty? (rest (rest lst))))\n              (and (<= (first lst) (first (rest\
    \ lst)))\n                   (<= (first (rest lst)) (first (rest (rest lst)))))\n\
    \              (is_sorted (rest (rest lst))))]\n        [else false]))\n", " \
    \ (cond [(empty? lst) true]\n        [(empty? (rest lst)) true]\n        [(and\
    \ (equal? (first lst) (second lst))\n              (not (empty? (rest (rest lst)))))\
    \ false]\n        [(and (< (first lst) (second lst))\n              (is_sorted\
    \ (rest lst))) true]\n        [else false]))\n", "  (cond\n    [(empty? lst) #t]\n\
    \    [(empty? (rest lst)) #t]\n    [(< (first lst) (second lst)) (is_sorted (rest\
    \ lst))]\n    [else #f]))\n", "  (cond [(empty? lst) true]\n        [(empty? (rest\
    \ lst)) true]\n        [(< (first lst) (second lst)) (is_sorted (rest lst))]\n\
    \        [else false]))\n", "  (cond\n    [(empty? lst) #t]\n    [(empty? (rest\
    \ lst)) #t]\n    [(< (first lst) (second lst)) (is_sorted (rest lst))]\n    [else\
    \ #f]))\n", "  (cond\n    [(empty? lst) #t]\n    [(empty? (rest lst)) #t]\n  \
    \  [(< (first lst) (second lst)) (is_sorted (rest lst))]\n    [else #f]))\n",
  "  (cond\n    [(empty? lst) #t]\n    [(empty? (rest lst)) #t]\n    [(< (first lst)\
    \ (second lst)) (is_sorted (rest lst))]\n    [else #f]))\n", "  (cond\n    [(empty?\
    \ lst) #t]\n    [(empty? (rest lst)) #t]\n    [(< (first lst) (second lst)) (is_sorted\
    \ (rest lst))]\n    [else #f]))\n", "  (cond\n    [(empty? lst) #t]\n    [(empty?\
    \ (rest lst)) #t]\n    [(> (first lst) (second lst)) #f]\n    [else (is_sorted\
    \ (rest lst))]))\n", "  (cond\n    [(empty? lst) #t]\n    [(empty? (rest lst))\
    \ #t]\n    [(< (first lst) (second lst)) (is_sorted (rest lst))]\n    [else #f]))\n",
  "  (cond\n    [(empty? lst) true]\n    [(empty? (rest lst)) true]\n    [(< (first\
    \ lst) (second lst)) (is_sorted (rest lst))]\n    [else false]))\n", "  (cond\n\
    \    [(empty? lst) #t]\n    [(empty? (rest lst)) #t]\n    [(< (first lst) (second\
    \ lst)) (is_sorted (rest lst))]\n    [else #f]))\n", "  (cond\n    [(null? lst)\
    \ #t]\n    [(null? (cdr lst)) #t]\n    [(> (car lst) (cadr lst)) #f]\n    [else\
    \ (is_sorted (cdr lst))]))\n", "  (cond\n    [(empty? lst) #t]\n    [(empty? (rest\
    \ lst)) #t]\n    [(< (first lst) (second lst)) (is_sorted (rest lst))]\n    [else\
    \ #f]))\n", "  (cond\n    [(empty? lst) #t]\n    [(empty? (rest lst)) #t]\n  \
    \  [(< (first lst) (second lst)) (is_sorted (rest lst))]\n    [else #f]))\n",
  "  (andmap (lambda (x y) (<= x y)) lst (cdr lst)))\n", "  (cond [(empty? lst) true]\n\
    \        [(empty? (rest lst)) true]\n        [(< (first lst) (second lst)) (is_sorted\
    \ (rest lst))]\n        [else false]))\n", "  (cond\n    [(empty? lst) #t]\n \
    \   [(empty? (rest lst)) #t]\n    [(< (first lst) (second lst)) (is_sorted (rest\
    \ lst))]\n    [else #f]))\n", "  (cond [(empty? lst) #t]\n        [(empty? (rest\
    \ lst)) #t]\n        [(< (first lst) (second lst)) (is_sorted (rest lst))]\n \
    \       [else #f]))\n", "  (cond\n    [(empty? lst) true]\n    [(empty? (rest\
    \ lst)) true]\n    [(and (not (empty? lst)) (not (empty? (rest lst))))\n     (and\
    \ (<= (first lst) (second lst)) (is_sorted (rest lst)))]))\n", "  (cond\n    [(empty?\
    \ lst) #t]\n    [(empty? (rest lst)) #t]\n    [(> (first lst) (second lst)) #f]\n\
    \    [else (is_sorted (rest lst))]))\n", "  (cond\n    [(empty? lst) #t]\n   \
    \ [(empty? (rest lst)) #t]\n    [(> (first lst) (second lst)) #f]\n    [else (is_sorted\
    \ (rest lst))]))\n", "  (cond\n    [(empty? lst) #t]\n    [(empty? (rest lst))\
    \ #t]\n    [(< (first lst) (second lst)) (is_sorted (rest lst))]\n    [else #f]))\n",
  "  (cond\n    [(empty? lst) #t]\n    [(empty? (rest lst)) #t]\n    [(< (first lst)\
    \ (second lst)) (is_sorted (rest lst))]\n    [else #f]))\n", "  (cond\n    [(empty?\
    \ lst) #t]\n    [(empty? (rest lst)) #t]\n    [(< (first lst) (second lst)) (is_sorted\
    \ (rest lst))]\n    [else #f]))\n", "  (cond\n    [(empty? lst) #t]\n    [(empty?\
    \ (rest lst)) #t]\n    [(> (first lst) (second lst)) #f]\n    [else (is_sorted\
    \ (rest lst))]))\n", "  (cond\n    [(empty? lst) #t]\n    [(empty? (rest lst))\
    \ #t]\n    [(< (first lst) (second lst)) (is_sorted (rest lst))]\n    [else #f]))\n",
  "  (cond\n    [(empty? lst) #t]\n    [(empty? (rest lst)) #t]\n    [(< (first lst)\
    \ (second lst)) (is_sorted (rest lst))]\n    [else #f]))\n", "  (cond\n    [(empty?\
    \ lst) #t]\n    [(empty? (rest lst)) #t]\n    [(< (first lst) (second lst)) (is_sorted\
    \ (rest lst))]\n    [else #f]))\n", "  (cond [(empty? lst) #t]\n        [(empty?\
    \ (rest lst)) #t]\n        [(< (first lst) (second lst)) (is_sorted (rest lst))]\n\
    \        [else #f]))\n", "  (cond\n    [(empty? lst) true]\n    [(empty? (rest\
    \ lst)) true]\n    [(> (first lst) (second lst)) false]\n    [else (is_sorted\
    \ (rest lst))]))\n", "  (cond\n    [(empty? lst) #t]\n    [(empty? (rest lst))\
    \ #t]\n    [(< (first lst) (second lst)) (is_sorted (rest lst))]\n    [else #f]))\n",
  "  (cond\n    [(empty? lst) #t]\n    [(empty? (rest lst)) #t]\n    [(< (first lst)\
    \ (second lst)) (is_sorted (rest lst))]\n    [else #f]))\n", "  (cond\n    [(null?\
    \ lst) #t]\n    [(null? (cdr lst)) #t]\n    [(< (car lst) (cadr lst)) (is_sorted\
    \ (cdr lst))]\n    [else #f]))\n", "  (cond\n    [(empty? lst) #t]\n    [(empty?\
    \ (rest lst)) #t]\n    [(and (not (empty? lst)) (not (empty? (rest lst))))\n \
    \    (if (< (first lst) (second lst))\n         (is_sorted (rest lst))\n     \
    \    #f)]))\n", "  (cond [(empty? lst) #t]\n        [(empty? (rest lst)) #t]\n\
    \        [(> (first lst) (second lst)) #f]\n        [else (is_sorted (rest lst))]))\n",
  "  (cond\n    [(empty? lst) #t]\n    [(empty? (rest lst)) #t]\n    [(< (first lst)\
    \ (second lst)) (is_sorted (rest lst))]\n    [else #f]))\n", "  (cond\n    [(empty?\
    \ lst) true]\n    [(empty? (rest lst)) true]\n    [(< (first lst) (second lst))\
    \ (is_sorted (rest lst))]\n    [else false]))\n", "  (cond\n    [(empty? lst)\
    \ #t]\n    [(empty? (rest lst)) #t]\n    [(and (not (empty? lst)) (not (empty?\
    \ (rest lst))))\n     (and (<= (first lst) (second lst)) (is_sorted (rest lst)))]))\n",
  "  (cond\n    [(empty? lst) #t]\n    [(empty? (rest lst)) #t]\n    [(and (not (empty?\
    \ lst))\n          (not (empty? (rest lst)))\n          (not (empty? (rest (rest\
    \ lst))))\n          (and (<= (first lst) (first (rest lst)))\n              \
    \ (<= (first (rest lst)) (first (rest (rest lst)))))\n          (is_sorted (rest\
    \ (rest lst))))]\n    [else #f]))\n", "  (cond [(empty? lst) true]\n        [(empty?\
    \ (rest lst)) true]\n        [(< (first lst) (second lst)) (is_sorted (rest lst))]\n\
    \        [else false]))\n", "  (cond\n    [(empty? lst) true]\n    [(empty? (rest\
    \ lst)) true]\n    [(< (first lst) (second lst)) (is_sorted (rest lst))]\n   \
    \ [else false]))\n", "  (cond\n    [(empty? lst) true]\n    [(empty? (rest lst))\
    \ true]\n    [(> (first lst) (second lst)) false]\n    [else (is_sorted (rest\
    \ lst))]))\n", "  (cond\n    [(empty? lst) #t]\n    [(empty? (rest lst)) #t]\n\
    \    [(< (first lst) (second lst)) (is_sorted (rest lst))]\n    [else #f]))\n",
  "  (cond\n    [(empty? lst) #t]\n    [(empty? (rest lst)) #t]\n    [(> (first lst)\
    \ (second lst)) #f]\n    [else (is_sorted (rest lst))]))\n", "  (cond\n    [(empty?\
    \ lst) #t]\n    [(empty? (rest lst)) #t]\n    [(> (first lst) (second lst)) #f]\n\
    \    [else (is_sorted (rest lst))]))\n", "  (cond\n    [(empty? lst) #t]\n   \
    \ [(empty? (rest lst)) #t]\n    [(> (first lst) (second lst)) #f]\n    [else (is_sorted\
    \ (rest lst))]))\n", "  (cond\n    [(empty? lst) #t]\n    [(empty? (rest lst))\
    \ #t]\n    [(< (first lst) (second lst)) (is_sorted (rest lst))]\n    [else #f]))\n",
  "  (cond\n    [(empty? lst) #t]\n    [(empty? (rest lst)) #t]\n    [(< (first lst)\
    \ (second lst)) (is_sorted (rest lst))]\n    [else #f]))\n", "  (cond\n    [(empty?\
    \ lst) true]\n    [(empty? (rest lst)) true]\n    [(< (first lst) (second lst))\
    \ (is_sorted (rest lst))]\n    [else false]))\n", "  (cond\n    [(empty? lst)\
    \ #t]\n    [(empty? (rest lst)) #t]\n    [(< (first lst) (second lst)) (is_sorted\
    \ (rest lst))]\n    [else #f]))\n", "  (cond\n    [(empty? lst) #t]\n    [(empty?\
    \ (rest lst)) #t]\n    [(> (first lst) (second lst)) #f]\n    [else (is_sorted\
    \ (rest lst))]))\n", "  (cond\n    [(empty? lst) #t]\n    [(empty? (rest lst))\
    \ #t]\n    [(< (first lst) (second lst)) (is_sorted (rest lst))]\n    [else #f]))\n",
  "  (cond\n    [(null? lst) #t]\n    [(null? (cdr lst)) #t]\n    [(< (car lst) (cadr\
    \ lst)) (is_sorted (cdr lst))]\n    [else #f]))\n", "  (cond\n    [(empty? lst)\
    \ #t]\n    [(empty? (rest lst)) #t]\n    [(< (first lst) (second lst)) (is_sorted\
    \ (rest lst))]\n    [else #f]))\n", "  (cond\n    [(empty? lst) #t]\n    [(empty?\
    \ (rest lst)) #t]\n    [(< (first lst) (second lst)) (is_sorted (rest lst))]\n\
    \    [else #f]))\n", "  (cond [(empty? lst) #t]\n        [(empty? (rest lst))\
    \ #t]\n        [(> (first lst) (second lst)) #f]\n        [else (is_sorted (rest\
    \ lst))]))\n", "  (cond\n    [(empty? lst) #t]\n    [(empty? (rest lst)) #t]\n\
    \    [(> (first lst) (second lst)) #f]\n    [else (is_sorted (rest lst))]))\n",
  "  (cond\n    [(empty? lst) #t]\n    [(empty? (rest lst)) #t]\n    [(< (first lst)\
    \ (second lst)) (is_sorted (rest lst))]\n    [else #f]))\n", "  (cond\n    [(empty?\
    \ lst) #t]\n    [(empty? (rest lst)) #t]\n    [(< (first lst) (second lst)) (is_sorted\
    \ (rest lst))]\n    [else #f]))\n", "  (cond\n    [(empty? lst) #t]\n    [(empty?\
    \ (rest lst)) #t]\n    [(< (first lst) (second lst)) (is_sorted (rest lst))]\n\
    \    [else #f]))\n", "  (cond\n    [(empty? lst) #t]\n    [(empty? (rest lst))\
    \ #t]\n    [(< (first lst) (second lst)) (is_sorted (rest lst))]\n    [else #f]))\n",
  "  (cond\n    [(empty? lst) #t]\n    [(empty? (rest lst)) #t]\n    [(< (first lst)\
    \ (second lst)) (is_sorted (rest lst))]\n    [else #f]))\n", "  (cond\n    [(empty?\
    \ lst) #t]\n    [(empty? (rest lst)) #t]\n    [(< (first lst) (second lst)) (is_sorted\
    \ (rest lst))]\n    [else #f]))\n", "  (cond\n    [(null? lst) #t]\n    [(null?\
    \ (cdr lst)) #t]\n    [(< (car lst) (cadr lst)) (is_sorted (cdr lst))]\n    [else\
    \ #f]))\n", "  (if (null? lst)\n      #t\n      (if (null? (cdr lst))\n      \
    \    #t\n          (if (< (car lst) (cadr lst))\n              (is_sorted (cdr\
    \ lst))\n              #f))))\n", "  (cond [(null? lst) #t]\n        [(null? (cdr\
    \ lst)) #t]\n        [(< (car lst) (cadr lst)) (is_sorted (cdr lst))]\n      \
    \  [else #f]))\n", "  (cond\n    [(empty? lst) #t]\n    [(empty? (rest lst)) #t]\n\
    \    [(< (first lst) (second lst)) (is_sorted (rest lst))]\n    [else #f]))\n",
  "  (cond\n    [(empty? lst) #t]\n    [(empty? (rest lst)) #t]\n    [(< (first lst)\
    \ (second lst)) (is_sorted (rest lst))]\n    [else #f]))\n", "  (cond\n    [(empty?\
    \ lst) #t]\n    [(empty? (rest lst)) #t]\n    [(< (first lst) (second lst)) (is_sorted\
    \ (rest lst))]\n    [else #f]))\n", "  (cond\n    [(empty? lst) #t]\n    [(empty?\
    \ (rest lst)) #t]\n    [(< (first lst) (second lst)) (is_sorted (rest lst))]\n\
    \    [else #f]))\n", "  (cond\n    [(empty? lst) #t]\n    [(empty? (rest lst))\
    \ #t]\n    [(< (first lst) (second lst)) (is_sorted (rest lst))]\n    [else #f]))\n",
  "  (cond\n    [(empty? lst) #t]\n    [(empty? (rest lst)) #t]\n    [(< (first lst)\
    \ (second lst)) (is_sorted (rest lst))]\n    [else #f]))\n", "  (cond\n    [(empty?\
    \ lst) true]\n    [(empty? (rest lst)) true]\n    [(< (first lst) (second lst))\
    \ (is_sorted (rest lst))]\n    [else false]))\n", "  (cond [(empty? lst) true]\n\
    \        [(empty? (rest lst)) true]\n        [(and (not (empty? (rest lst)))\n\
    \              (not (empty? (rest (rest lst))))\n              (and (= (first\
    \ lst) (second lst))\n                   (= (second lst) (third lst)))) false]\n\
    \        [(and (<= (first lst) (second lst))\n              (is_sorted (rest lst)))\
    \ true]\n        [else false]))\n", "  (cond\n    [(empty? lst) #t]\n    [(empty?\
    \ (rest lst)) #t]\n    [(and (not (empty? lst)) (not (empty? (rest lst))))\n \
    \    (and\n      (not (member (first lst) (rest lst)))\n      (is_sorted (rest\
    \ lst)))]))\n", "  (cond [(empty? lst) #t]\n        [(empty? (rest lst)) #t]\n\
    \        [(< (first lst) (second lst)) (is_sorted (rest lst))]\n        [else\
    \ #f]))\n", "  (cond\n    [(empty? lst) #t]\n    [(empty? (rest lst)) #t]\n  \
    \  [(< (first lst) (second lst)) (is_sorted (rest lst))]\n    [else #f]))\n",
  "  (cond\n    [(empty? lst) true]\n    [(empty? (rest lst)) true]\n    [(< (first\
    \ lst) (second lst)) (is_sorted (rest lst))]\n    [else false]))\n", "  (if (null?\
    \ lst)\n      #t\n      (if (null? (cdr lst))\n          #t\n          (if (and\
    \ (not (null? (cdr (cdr lst))))\n                   (or (= (car lst) (cadr lst))\n\
    \                       (= (cadr lst) (caddr lst))))\n              #f\n     \
    \         (is_sorted (cdr lst))))))\n", "  (cond [(empty? lst) true]\n       \
    \ [(empty? (rest lst)) true]\n        [(and (= (first lst) (second lst))\n   \
    \           (is_sorted (rest lst))) false]\n        [(< (first lst) (second lst))\n\
    \         (is_sorted (rest lst))]\n        [else false]))\n", "  (cond\n    [(empty?\
    \ lst) #t]\n    [(empty? (rest lst)) #t]\n    [(< (first lst) (second lst)) (is_sorted\
    \ (rest lst))]\n    [else #f]))\n", "  (cond\n    [(empty? lst) true]\n    [(empty?\
    \ (rest lst)) true]\n    [(< (first lst) (second lst)) (is_sorted (rest lst))]\n\
    \    [else false]))\n", "  (cond\n    [(empty? lst) #t]\n    [(empty? (rest lst))\
    \ #t]\n    [(< (first lst) (second lst)) (is_sorted (rest lst))]\n    [else #f]))\n",
  "  (cond\n    [(empty? lst) #t]\n    [(empty? (rest lst)) #t]\n    [(< (first lst)\
    \ (second lst)) (is_sorted (rest lst))]\n    [else #f]))\n", "  (cond\n    [(empty?\
    \ lst) #t]\n    [(empty? (rest lst)) #t]\n    [(< (first lst) (second lst)) (is_sorted\
    \ (rest lst))]\n    [else #f]))\n", "  (cond\n    [(empty? lst) #t]\n    [(empty?\
    \ (rest lst)) #t]\n    [(< (first lst) (second lst)) (is_sorted (rest lst))]\n\
    \    [else #f]))\n", "  (cond\n    [(empty? lst) #t]\n    [(empty? (rest lst))\
    \ #t]\n    [(< (first lst) (second lst)) (is_sorted (rest lst))]\n    [else #f]))\n",
  "  (cond\n    [(empty? lst) #t]\n    [(empty? (rest lst)) #t]\n    [(< (first lst)\
    \ (second lst)) (is_sorted (rest lst))]\n    [else #f]))\n", "  (cond\n    [(empty?\
    \ lst) #t]\n    [(empty? (rest lst)) #t]\n    [(< (first lst) (second lst)) (is_sorted\
    \ (rest lst))]\n    [else #f]))\n", "  (cond\n    [(empty? lst) #t]\n    [(empty?\
    \ (rest lst)) #t]\n    [(< (first lst) (second lst)) (is_sorted (rest lst))]\n\
    \    [else #f]))\n", "  (cond\n    [(empty? lst) true]\n    [(empty? (rest lst))\
    \ true]\n    [(< (first lst) (second lst)) (is_sorted (rest lst))]\n    [else\
    \ false]))\n", "  (cond\n    [(empty? lst) #t]\n    [(empty? (rest lst)) #t]\n\
    \    [(< (first lst) (second lst)) (is_sorted (rest lst))]\n    [else #f]))\n",
  "  (cond\n    [(empty? lst) true]\n    [(empty? (rest lst)) true]\n    [(< (first\
    \ lst) (second lst)) (is_sorted (rest lst))]\n    [else false]))\n", "  (cond\n\
    \    [(empty? lst) #t]\n    [(empty? (rest lst)) #t]\n    [(< (first lst) (second\
    \ lst)) (is_sorted (rest lst))]\n    [else #f]))\n", "  (cond\n    [(empty? lst)\
    \ #t]\n    [(empty? (rest lst)) #t]\n    [(< (first lst) (second lst)) (is_sorted\
    \ (rest lst))]\n    [else #f]))\n", "  (cond\n    [(null? lst) #t]\n    [(null?\
    \ (cdr lst)) #t]\n    [(> (car lst) (cadr lst)) #f]\n    [else (is_sorted (cdr\
    \ lst))]))\n", "  (cond\n    [(empty? lst) #t]\n    [(empty? (rest lst)) #t]\n\
    \    [(< (first lst) (second lst)) (is_sorted (rest lst))]\n    [else #f]))\n",
  "  (cond\n    [(null? lst) #t]\n    [(null? (cdr lst)) #t]\n    [(< (car lst) (cadr\
    \ lst)) (is_sorted (cdr lst))]\n    [else #f]))\n", "  (cond\n    [(empty? lst)\
    \ #t]\n    [(empty? (rest lst)) #t]\n    [(< (first lst) (second lst)) (is_sorted\
    \ (rest lst))]\n    [else #f]))\n", "  (cond\n    [(empty? lst) #t]\n    [(empty?\
    \ (rest lst)) #t]\n    [(< (first lst) (second lst)) (is_sorted (rest lst))]\n\
    \    [else #f]))\n", "  (cond\n    [(empty? lst) #t]\n    [(empty? (rest lst))\
    \ #t]\n    [(< (first lst) (second lst)) (is_sorted (rest lst))]\n    [else #f]))\n",
  "  (cond\n    [(empty? lst) #t]\n    [(empty? (rest lst)) #t]\n    [(and (not (empty?\
    \ lst)) (not (empty? (rest lst))))\n     (and (<= (first lst) (second lst)) (is_sorted\
    \ (rest lst)))]))\n", "  (cond\n    [(empty? lst) #t]\n    [(empty? (rest lst))\
    \ #t]\n    [(< (first lst) (second lst)) (is_sorted (rest lst))]\n    [else #f]))\n",
  "  (cond\n    [(empty? lst) #t]\n    [(empty? (rest lst)) #t]\n    [(< (first lst)\
    \ (second lst)) (is_sorted (rest lst))]\n    [else #f]))\n", "  (cond\n    [(empty?\
    \ lst) #t]\n    [(empty? (rest lst)) #t]\n    [(< (first lst) (second lst)) (is_sorted\
    \ (rest lst))]\n    [else #f]))\n", "  (cond\n    [(empty? lst) #t]\n    [(empty?\
    \ (rest lst)) #t]\n    [(< (first lst) (second lst)) (is_sorted (rest lst))]\n\
    \    [else #f]))\n", "  (cond\n    [(empty? lst) #t]\n    [(empty? (rest lst))\
    \ #t]\n    [(< (first lst) (second lst)) (is_sorted (rest lst))]\n    [else #f]))\n",
  "  (cond\n    [(empty? lst) true]\n    [(empty? (rest lst)) true]\n    [(< (first\
    \ lst) (second lst)) (is_sorted (rest lst))]\n    [else false]))\n", "  (cond\n\
    \    [(empty? lst) true]\n    [(empty? (rest lst)) true]\n    [(< (first lst)\
    \ (second lst)) (is_sorted (rest lst))]\n    [else false]))\n", "  (cond [(empty?\
    \ lst) true]\n        [(empty? (rest lst)) true]\n        [(> (first lst) (second\
    \ lst)) false]\n        [else (is_sorted (rest lst))]))\n", "  (cond\n    [(empty?\
    \ lst) #t]\n    [(empty? (rest lst)) #t]\n    [(< (first lst) (second lst)) (is_sorted\
    \ (rest lst))]\n    [else #f]))\n", "  (cond\n    [(empty? lst) #t]\n    [(empty?\
    \ (rest lst)) #t]\n    [(< (first lst) (second lst)) (is_sorted (rest lst))]\n\
    \    [else #f]))\n", "  (cond\n    [(empty? lst) #t]\n    [(empty? (rest lst))\
    \ #t]\n    [(< (first lst) (second lst)) (is_sorted (rest lst))]\n    [else #f]))\n",
  "  (cond\n    [(empty? lst) true]\n    [(empty? (rest lst)) true]\n    [(< (first\
    \ lst) (second lst)) (is_sorted (rest lst))]\n    [else false]))\n", "  (cond\n\
    \    [(empty? lst) #t]\n    [(empty? (rest lst)) #t]\n    [(< (first lst) (second\
    \ lst)) (is_sorted (rest lst))]\n    [else #f]))\n", "  (define (is-sorted-helper\
    \ lst prev)\n    (cond\n      [(empty? lst) true]\n      [(= (first lst) prev)\
    \ false]\n      [else (is-sorted-helper (rest lst) (first lst))]))\n  (is-sorted-helper\
    \ (rest lst) (first lst)))\n", "  (cond\n    [(empty? lst) #t]\n    [(empty? (rest\
    \ lst)) #t]\n    [(< (first lst) (second lst)) (is_sorted (rest lst))]\n    [else\
    \ #f]))\n", "  (cond [(empty? lst) #t]\n        [(empty? (rest lst)) #t]\n   \
    \     [(< (first lst) (second lst)) (is_sorted (rest lst))]\n        [else #f]))\n",
  "  (cond\n    [(empty? lst) true]\n    [(empty? (rest lst)) true]\n    [(< (first\
    \ lst) (second lst)) (is_sorted (rest lst))]\n    [else false]))\n"]
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
