name: HumanEval_17_parse_music
language: racket
prompt: "#lang racket\n\n;; Input to this function is a string representing musical\
  \ notes in a special ASCII format.\n;; Your task is to parse this string and return\
  \ list of integers corresponding to how many beats does each\n;; not last.\n;; Here\
  \ is a legend:\n;; 'o' - whole note, lasts four beats\n;; 'o|' - half note, lasts\
  \ two beats\n;; '.|' - quater note, lasts one beat\n;; >>> parse_music('o o| .|\
  \ o| o| .| .| .| .| o o')\n;; [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n(define (parse_music\
  \ music_string)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate parse_music))\n\
  \    (check-equal? (candidate \"\") (list ))\n    (check-equal? (candidate \"o o\
  \ o o\") (list 4 4 4 4))\n    (check-equal? (candidate \".| .| .| .|\") (list 1\
  \ 1 1 1))\n    (check-equal? (candidate \"o| o| .| .| o o o o\") (list 2 2 1 1 4\
  \ 4 4 4))\n    (check-equal? (candidate \"o| .| o| .| o o| o o|\") (list 2 1 2 1\
  \ 4 2 4 2))\n))\n\n(test-humaneval)"
completions: ["  (if (string=? music_string \"\")\n      '()\n      (cons (if (string=?\
    \ (substring music_string 0 1) \"o\")\n                4\n                (if\
    \ (string=? (substring music_string 0 1) \".\")\n                    1\n     \
    \               2))\n            (parse_music (substring music_string 2)))))\n",
  "  (define (parse_music_helper music_string acc)\n    (cond\n      [(empty? music_string)\
    \ (reverse acc)]\n      [(equal? (first music_string) #\\o) (parse_music_helper\
    \ (rest music_string) (cons 4 acc))]\n      [(equal? (first music_string) #\\\
    .) (parse_music_helper (rest music_string) (cons 1 acc))]\n      [(equal? (first\
    \ music_string) #\\|) (parse_music_helper (rest music_string) (cons 2 acc))]\n\
    \      [else (parse_music_helper (rest music_string) acc)]))\n  (parse_music_helper\
    \ music_string '()))\n", "  (map (lambda (x)\n         (cond\n           [(equal?\
    \ x \"o\") 4]\n           [(equal? x \"o|\") 2]\n           [(equal? x \".|\"\
    ) 1]))\n       (regexp-split #rx\" \" music_string)))\n", "  (cond\n    [(empty?\
    \ music_string) empty]\n    [(string=? (substring music_string 0 1) \"o\") (cons\
    \ 4 (parse_music (substring music_string 1)))]\n    [(string=? (substring music_string\
    \ 0 2) \"o|\") (cons 2 (parse_music (substring music_string 2)))]\n    [(string=?\
    \ (substring music_string 0 2) \".|\") (cons 1 (parse_music (substring music_string\
    \ 2)))]\n    [else (cons 0 (parse_music (substring music_string 1)))]))\n", " \
    \ (define (parse-music-helper music-string acc)\n    (cond\n      [(empty? music-string)\
    \ (reverse acc)]\n      [(char=? (first music-string) #\\o) (parse-music-helper\
    \ (rest music-string) (cons 4 acc))]\n      [(char=? (first music-string) #\\\
    o) (parse-music-helper (rest music-string) (cons 2 acc))]\n      [(char=? (first\
    \ music-string) #\\.) (parse-music-helper (rest music-string) (cons 1 acc))]))\n\
    \  (parse-music-helper music-string '()))\n", "  (define (parse_music_helper music_string\
    \ acc)\n    (cond\n      [(empty? music_string) (reverse acc)]\n      [(string=?\
    \ (substring music_string 0 2) \"o|\") (parse_music_helper (substring music_string\
    \ 2) (cons 2 acc))]\n      [(string=? (substring music_string 0 2) \".|\") (parse_music_helper\
    \ (substring music_string 2) (cons 1 acc))]\n      [(string=? (substring music_string\
    \ 0 1) \"o\") (parse_music_helper (substring music_string 1) (cons 4 acc))]))\n\
    \  (parse_music_helper music_string '()))\n", "  (define (parse-music-helper music_string\
    \ acc)\n    (cond ((null? music_string) acc)\n          ((string=? (car music_string)\
    \ \"o\") (parse-music-helper (cdr music_string) (cons 4 acc)))\n          ((string=?\
    \ (car music_string) \"o|\") (parse-music-helper (cdr music_string) (cons 2 acc)))\n\
    \          ((string=? (car music_string) \".|\") (parse-music-helper (cdr music_string)\
    \ (cons 1 acc)))\n          (else (parse-music-helper (cdr music_string) acc))))\n\
    \  (reverse (parse-music-helper (string-split music_string #\\space) '())))\n",
  "  (define (parse_music_helper music_string result)\n    (if (empty? music_string)\n\
    \        result\n        (if (equal? (first music_string) #\\o)\n            (parse_music_helper\
    \ (rest music_string) (append result (list 4)))\n            (if (equal? (first\
    \ music_string) #\\.)\n                (parse_music_helper (rest music_string)\
    \ (append result (list 1)))\n                (parse_music_helper (rest music_string)\
    \ (append result (list 2)))))))\n  (parse_music_helper music_string '()))\n",
  "  (cond\n    [(empty? music_string) empty]\n    [(string=? (substring music_string\
    \ 0 1) \"o\") (cons 4 (parse_music (substring music_string 1)))]\n    [(string=?\
    \ (substring music_string 0 2) \"o|\") (cons 2 (parse_music (substring music_string\
    \ 2)))]\n    [(string=? (substring music_string 0 2) \".|\") (cons 1 (parse_music\
    \ (substring music_string 2)))]\n    [else (parse_music (substring music_string\
    \ 1))]))\n", "  (cond\n    [(empty? music_string) empty]\n    [(equal? (first\
    \ music_string) #\\o) (cons 4 (parse_music (rest music_string)))]\n    [(equal?\
    \ (first music_string) #\\.) (cons 1 (parse_music (rest music_string)))]\n   \
    \ [(equal? (first music_string) #\\|) (cons 2 (parse_music (rest music_string)))]\n\
    \    [else (parse_music (rest music_string))]))\n", "  (cond\n    [(empty? music_string)\
    \ '()]\n    [(equal? (first music_string) #\\o) (cons 4 (parse_music (rest music_string)))]\n\
    \    [(equal? (first music_string) #\\.) (cons 1 (parse_music (rest music_string)))]\n\
    \    [(equal? (first music_string) #\\|) (cons 2 (parse_music (rest music_string)))]\n\
    \    [else (parse_music (rest music_string))]))\n", "  (map (lambda (x) (cond\
    \ ((equal? x 'o) 4)\n                         ((equal? x 'o|) 2)\n           \
    \              ((equal? x '.|) 1)))\n       (string->list music_string)))\n",
  "  (cond\n    [(empty? music_string) empty]\n    [(string=? (substring music_string\
    \ 0 1) \"o\")\n     (cons 4 (parse_music (substring music_string 1)))]\n    [(string=?\
    \ (substring music_string 0 2) \"o|\")\n     (cons 2 (parse_music (substring music_string\
    \ 2)))]\n    [(string=? (substring music_string 0 2) \".|\")\n     (cons 1 (parse_music\
    \ (substring music_string 2)))]))\n", "  (cond\n    [(empty? music_string) empty]\n\
    \    [(equal? (first music_string) #\\o) (cons 4 (parse_music (rest music_string)))]\n\
    \    [(equal? (first music_string) #\\.) (cons 1 (parse_music (rest music_string)))]\n\
    \    [(equal? (first music_string) #\\|) (cons 2 (parse_music (rest music_string)))]\n\
    \    [else (parse_music (rest music_string))]))\n", "  (cond\n    [(empty? music_string)\
    \ empty]\n    [(equal? (first music_string) #\\o) (cons 4 (parse_music (rest music_string)))]\n\
    \    [(equal? (first music_string) #\\.) (cons 1 (parse_music (rest music_string)))]\n\
    \    [(equal? (first music_string) #\\|) (cons 2 (parse_music (rest music_string)))]\n\
    \    [else (parse_music (rest music_string))]))\n", "  (cond\n    [(empty? music_string)\
    \ empty]\n    [(equal? (first music_string) #\\o) (cons 4 (parse_music (rest music_string)))]\n\
    \    [(equal? (first music_string) #\\.) (cons 1 (parse_music (rest music_string)))]\n\
    \    [(equal? (first music_string) #\\|) (cons 2 (parse_music (rest music_string)))]\n\
    \    [else (parse_music (rest music_string))]))\n", "  (let ([notes (string-split\
    \ music_string #\\space)])\n    (map (lambda (note)\n           (cond\n      \
    \       [(string=? note \"o\") 4]\n             [(string=? note \"o|\") 2]\n \
    \            [(string=? note \".|\") 1]))\n         notes)))\n", "  (cond\n  \
    \  [(empty? music_string) empty]\n    [(equal? (first music_string) #\\o) (cons\
    \ 4 (parse_music (rest music_string)))]\n    [(equal? (first music_string) #\\\
    .) (cons 1 (parse_music (rest music_string)))]\n    [(equal? (first music_string)\
    \ #\\|) (cons 2 (parse_music (rest music_string)))]\n    [else (parse_music (rest\
    \ music_string))]))\n", "  (cond\n    [(empty? music_string) empty]\n    [(string=?\
    \ (substring music_string 0 1) \"o\")\n     (cons 4 (parse_music (substring music_string\
    \ 1)))]\n    [(string=? (substring music_string 0 2) \"o|\")\n     (cons 2 (parse_music\
    \ (substring music_string 2)))]\n    [(string=? (substring music_string 0 2) \"\
    .|\")\n     (cons 1 (parse_music (substring music_string 2)))]))\n", "  (cond\n\
    \    [(empty? music_string) empty]\n    [(string=? (substring music_string 0 1)\
    \ \"o\")\n     (cons 4 (parse_music (substring music_string 1)))]\n    [(string=?\
    \ (substring music_string 0 2) \"o|\")\n     (cons 2 (parse_music (substring music_string\
    \ 2)))]\n    [(string=? (substring music_string 0 2) \".|\")\n     (cons 1 (parse_music\
    \ (substring music_string 2)))]))\n", "  (map (lambda (x)\n         (cond\n  \
    \         [(equal? x \"o\") 4]\n           [(equal? x \"o|\") 2]\n           [(equal?\
    \ x \".|\") 1]))\n       (regexp-split #rx\" \" music_string)))\n", "  (cond\n\
    \    [(empty? music_string) '()]\n    [(equal? (first music_string) #\\o) (cons\
    \ 4 (parse_music (rest music_string)))]\n    [(equal? (first music_string) #\\\
    .) (cons 1 (parse_music (rest music_string)))]\n    [(equal? (first music_string)\
    \ #\\|) (cons 2 (parse_music (rest music_string)))]\n    [else (parse_music (rest\
    \ music_string))]))\n", "  (cond [(empty? music_string) empty]\n        [(equal?\
    \ (first music_string) #\\o) (cons 4 (parse_music (rest music_string)))]\n   \
    \     [(equal? (first music_string) #\\.) (cons 1 (parse_music (rest music_string)))]\n\
    \        [(equal? (first music_string) #\\|) (parse_music (rest music_string))]\n\
    \        [else (parse_music (rest music_string))]))\n", "  (cond\n    [(empty?\
    \ music_string) empty]\n    [(equal? (first music_string) #\\o) (cons 4 (parse_music\
    \ (rest music_string)))]\n    [(equal? (first music_string) #\\.) (cons 1 (parse_music\
    \ (rest music_string)))]\n    [(equal? (first music_string) #\\|) (cons 2 (parse_music\
    \ (rest music_string)))]\n    [else (parse_music (rest music_string))]))\n", " \
    \ (cond\n    [(empty? music_string) empty]\n    [(string=? (substring music_string\
    \ 0 1) \"o\") (cons 4 (parse_music (substring music_string 1)))]\n    [(string=?\
    \ (substring music_string 0 2) \"o|\") (cons 2 (parse_music (substring music_string\
    \ 2)))]\n    [(string=? (substring music_string 0 2) \".|\") (cons 1 (parse_music\
    \ (substring music_string 2)))]\n    [else (parse_music (substring music_string\
    \ 1))]))\n", "  (cond\n    [(empty? music_string) empty]\n    [(string=? (substring\
    \ music_string 0 1) \"o\") (cons 4 (parse_music (substring music_string 1)))]\n\
    \    [(string=? (substring music_string 0 2) \"o|\") (cons 2 (parse_music (substring\
    \ music_string 2)))]\n    [(string=? (substring music_string 0 2) \".|\") (cons\
    \ 1 (parse_music (substring music_string 2)))]\n    [else (parse_music (substring\
    \ music_string 1))]))\n", "  (map (lambda (x)\n         (cond\n           [(equal?\
    \ x \"o\") 4]\n           [(equal? x \"o|\") 2]\n           [(equal? x \".|\"\
    ) 1]))\n       (regexp-split #rx\" \" music_string)))\n", "  (define (parse-music-helper\
    \ music-string-list)\n    (if (null? music-string-list)\n        '()\n       \
    \ (cons (cond\n               ((equal? (car music-string-list) 'o) 4)\n      \
    \         ((equal? (car music-string-list) 'o|) 2)\n               ((equal? (car\
    \ music-string-list) '.|) 1))\n              (parse-music-helper (cdr music-string-list)))))\n\
    \  (parse-music-helper (string->list music-string)))\n", "  (cond\n    [(empty?\
    \ music_string) empty]\n    [(string=? (substring music_string 0 1) \"o\")\n \
    \    (cons 4 (parse_music (substring music_string 1)))]\n    [(string=? (substring\
    \ music_string 0 2) \"o|\")\n     (cons 2 (parse_music (substring music_string\
    \ 2)))]\n    [(string=? (substring music_string 0 2) \".|\")\n     (cons 1 (parse_music\
    \ (substring music_string 2)))]))\n", "  (cond\n    [(empty? music_string) empty]\n\
    \    [(equal? (first music_string) #\\o) (cons 4 (parse_music (rest music_string)))]\n\
    \    [(equal? (first music_string) #\\.) (cons 1 (parse_music (rest music_string)))]\n\
    \    [(equal? (first music_string) #\\|) (cons 2 (parse_music (rest music_string)))]\n\
    \    [else (parse_music (rest music_string))]))\n", "  (cond\n    [(empty? music_string)\
    \ empty]\n    [(equal? (first music_string) #\\o) (cons 4 (parse_music (rest music_string)))]\n\
    \    [(equal? (first music_string) #\\.) (cons 1 (parse_music (rest music_string)))]\n\
    \    [(equal? (first music_string) #\\|) (parse_music (rest music_string))]\n\
    \    [else (parse_music (rest music_string))]))\n", "  (cond\n    [(empty? music_string)\
    \ empty]\n    [(equal? (first music_string) #\\o) (cons 4 (parse_music (rest music_string)))]\n\
    \    [(equal? (first music_string) #\\.) (cons 1 (parse_music (rest music_string)))]\n\
    \    [(equal? (first music_string) #\\|) (cons 2 (parse_music (rest music_string)))]\n\
    \    [else (parse_music (rest music_string))]))\n", "  (cond\n    [(empty? music_string)\
    \ '()]\n    [(equal? (first music_string) #\\o) (cons 4 (parse_music (rest music_string)))]\n\
    \    [(equal? (first music_string) #\\.) (cons 1 (parse_music (rest music_string)))]\n\
    \    [(equal? (first music_string) #\\|) (cons 2 (parse_music (rest music_string)))]\n\
    \    [else (parse_music (rest music_string))]))\n", "  (cond\n    [(empty? music_string)\
    \ empty]\n    [(equal? (first music_string) #\\o) (cons 4 (parse_music (rest music_string)))]\n\
    \    [(equal? (first music_string) #\\.) (cons 1 (parse_music (rest music_string)))]\n\
    \    [(equal? (first music_string) #\\|) (parse_music (rest music_string))]\n\
    \    [else (parse_music (rest music_string))]))\n", "  (cond\n    [(empty? music_string)\
    \ empty]\n    [(equal? (first music_string) #\\o) (cons 4 (parse_music (rest music_string)))]\n\
    \    [(equal? (first music_string) #\\.) (cons 1 (parse_music (rest music_string)))]\n\
    \    [(equal? (first music_string) #\\|) (cons 2 (parse_music (rest music_string)))]\n\
    \    [else (parse_music (rest music_string))]))\n", "  (define (parse-music-helper\
    \ music-string acc)\n    (cond\n      [(empty? music-string) (reverse acc)]\n\
    \      [(equal? (first music-string) #\\o) (parse-music-helper (rest music-string)\
    \ (cons 4 acc))]\n      [(equal? (first music-string) #\\.) (parse-music-helper\
    \ (rest music-string) (cons 1 acc))]\n      [(equal? (first music-string) #\\\
    |) (parse-music-helper (rest music-string) (cons 2 acc))]\n      [else (parse-music-helper\
    \ (rest music-string) acc)]))\n  (parse-music-helper music-string '()))\n", " \
    \ (cond [(empty? music_string) empty]\n        [(equal? (first music_string) #\\\
    o) (cons 4 (parse_music (rest music_string)))]\n        [(equal? (first music_string)\
    \ #\\.) (cons 1 (parse_music (rest music_string)))]\n        [(equal? (first music_string)\
    \ #\\|) (parse_music (rest music_string))]\n        [else (parse_music (rest music_string))]))\n",
  "  (cond\n    [(empty? music_string) empty]\n    [(string=? (substring music_string\
    \ 0 1) \"o\")\n     (cons 4 (parse_music (substring music_string 1)))]\n    [(string=?\
    \ (substring music_string 0 2) \"o|\")\n     (cons 2 (parse_music (substring music_string\
    \ 2)))]\n    [(string=? (substring music_string 0 2) \".|\")\n     (cons 1 (parse_music\
    \ (substring music_string 2)))]))\n", "  (map (lambda (x)\n         (cond\n  \
    \         [(equal? x \"o\") 4]\n           [(equal? x \"o|\") 2]\n           [(equal?\
    \ x \".|\") 1]))\n       (regexp-split #rx\" \" music_string)))\n", "  (define\
    \ (parse-music-helper music-string result)\n    (cond ((null? music-string) result)\n\
    \          ((string=? (car music-string) \"o\") (parse-music-helper (cdr music-string)\
    \ (append result '(4))))\n          ((string=? (car music-string) \"o|\") (parse-music-helper\
    \ (cdr music-string) (append result '(2))))\n          ((string=? (car music-string)\
    \ \".|\") (parse-music-helper (cdr music-string) (append result '(1))))\n    \
    \      (else (parse-music-helper (cdr music-string) result))))\n  (parse-music-helper\
    \ (string-split music_string) '()))\n", "  (cond\n    [(empty? music_string) empty]\n\
    \    [(equal? (first music_string) #\\o) (cons 4 (parse_music (rest music_string)))]\n\
    \    [(equal? (first music_string) #\\.) (cons 1 (parse_music (rest music_string)))]\n\
    \    [(equal? (first music_string) #\\|) (cons 2 (parse_music (rest music_string)))]\n\
    \    [else (parse_music (rest music_string))]))\n", "  (cond\n    [(empty? music_string)\
    \ empty]\n    [(equal? (first music_string) #\\o) (cons 4 (parse_music (rest music_string)))]\n\
    \    [(equal? (first music_string) #\\.) (cons 1 (parse_music (rest music_string)))]\n\
    \    [(equal? (first music_string) #\\|) (parse_music (rest music_string))]\n\
    \    [else (parse_music (rest music_string))]))\n", "  (cond\n    [(empty? music_string)\
    \ empty]\n    [(equal? (first music_string) #\\o) (cons 4 (parse_music (rest music_string)))]\n\
    \    [(equal? (first music_string) #\\.) (cons 1 (parse_music (rest music_string)))]\n\
    \    [(equal? (first music_string) #\\|) (cons 2 (parse_music (rest music_string)))]\n\
    \    [else (parse_music (rest music_string))]))\n", "  (cond\n    [(empty? music_string)\
    \ empty]\n    [(equal? (first music_string) #\\o) (cons 4 (parse_music (rest music_string)))]\n\
    \    [(equal? (first music_string) #\\.) (cons 1 (parse_music (rest music_string)))]\n\
    \    [(equal? (first music_string) #\\|) (cons 2 (parse_music (rest music_string)))]\n\
    \    [else (parse_music (rest music_string))]))\n", "  (define (parse-music-helper\
    \ music-string acc)\n    (cond\n      [(empty? music-string) acc]\n      [(equal?\
    \ (first music-string) #\\o) (parse-music-helper (rest music-string) (append acc\
    \ (list 4)))]\n      [(equal? (first music-string) #\\.) (parse-music-helper (rest\
    \ music-string) (append acc (list 1)))]\n      [(equal? (first music-string) #\\\
    |) (parse-music-helper (rest music-string) (append acc (list 2)))]\n      [else\
    \ (parse-music-helper (rest music-string) acc)]))\n  (parse-music-helper music-string\
    \ '()))\n", "  (cond\n    [(empty? music_string) empty]\n    [(string=? (substring\
    \ music_string 0 1) \"o\") (cons 4 (parse_music (substring music_string 1)))]\n\
    \    [(string=? (substring music_string 0 2) \"o|\") (cons 2 (parse_music (substring\
    \ music_string 2)))]\n    [(string=? (substring music_string 0 2) \".|\") (cons\
    \ 1 (parse_music (substring music_string 2)))]\n    [else (parse_music (substring\
    \ music_string 1))]))\n", "  (cond\n    [(empty? music_string) empty]\n    [(string=?\
    \ (substring music_string 0 1) \"o\")\n     (cons 4 (parse_music (substring music_string\
    \ 1)))]\n    [(string=? (substring music_string 0 2) \"o|\")\n     (cons 2 (parse_music\
    \ (substring music_string 2)))]\n    [(string=? (substring music_string 0 2) \"\
    .|\")\n     (cons 1 (parse_music (substring music_string 2)))]))\n", "  (cond\n\
    \    [(empty? music_string) empty]\n    [(equal? (first music_string) #\\o) (cons\
    \ 4 (parse_music (rest music_string)))]\n    [(equal? (first music_string) #\\\
    .) (cons 1 (parse_music (rest music_string)))]\n    [(equal? (first music_string)\
    \ #\\|) (cons 2 (parse_music (rest music_string)))]\n    [else (parse_music (rest\
    \ music_string))]))\n", "  (cond\n    [(empty? music_string) empty]\n    [(string=?\
    \ (substring music_string 0 1) \"o\")\n     (cons 4 (parse_music (substring music_string\
    \ 1)))]\n    [(string=? (substring music_string 0 2) \"o|\")\n     (cons 2 (parse_music\
    \ (substring music_string 2)))]\n    [(string=? (substring music_string 0 2) \"\
    .|\")\n     (cons 1 (parse_music (substring music_string 2)))]))\n", "  (cond\n\
    \    [(empty? music_string) empty]\n    [(equal? (first music_string) #\\o) (cons\
    \ 4 (parse_music (rest music_string)))]\n    [(equal? (first music_string) #\\\
    .) (cons 1 (parse_music (rest music_string)))]\n    [(equal? (first music_string)\
    \ #\\|) (cons 2 (parse_music (rest music_string)))]\n    [else (parse_music (rest\
    \ music_string))]))\n", "  (map (lambda (x)\n         (cond\n           [(equal?\
    \ x \"o\") 4]\n           [(equal? x \"o|\") 2]\n           [(equal? x \".|\"\
    ) 1]))\n       (regexp-split #rx\" \" music_string)))\n", "  (map (lambda (x)\n\
    \         (cond\n           [(equal? x \"o\") 4]\n           [(equal? x \"o|\"\
    ) 2]\n           [(equal? x \".|\") 1]))\n       (regexp-split #rx\" \" music_string)))\n",
  "  (cond\n    [(empty? music_string) empty]\n    [(equal? (first music_string) #\\\
    o) (cons 4 (parse_music (rest music_string)))]\n    [(equal? (first music_string)\
    \ #\\.) (cons 1 (parse_music (rest music_string)))]\n    [(equal? (first music_string)\
    \ #\\|) (parse_music (rest music_string))]\n    [else (parse_music (rest music_string))]))\n",
  "  (map (lambda (x)\n         (cond\n           [(equal? x \"o\") 4]\n         \
    \  [(equal? x \"o|\") 2]\n           [(equal? x \".|\") 1]))\n       (regexp-split\
    \ #rx\" \" music_string)))\n", "  (cond\n    [(empty? music_string) empty]\n \
    \   [(string=? (substring music_string 0 1) \"o\")\n     (cons 4 (parse_music\
    \ (substring music_string 1)))]\n    [(string=? (substring music_string 0 2) \"\
    o|\")\n     (cons 2 (parse_music (substring music_string 2)))]\n    [(string=?\
    \ (substring music_string 0 2) \".|\")\n     (cons 1 (parse_music (substring music_string\
    \ 2)))]))\n", "  (map (lambda (x)\n         (cond\n           [(equal? x \"o\"\
    ) 4]\n           [(equal? x \"o|\") 2]\n           [(equal? x \".|\") 1]))\n \
    \      (regexp-split #rx\" \" music_string)))\n", "  (define (parse-music-helper\
    \ music-string acc)\n    (cond\n      [(empty? music-string) (reverse acc)]\n\
    \      [(string=? (first music-string) #\\o) (parse-music-helper (rest music-string)\
    \ (cons 4 acc))]\n      [(string=? (first music-string) #\\.) (parse-music-helper\
    \ (rest music-string) (cons 1 acc))]\n      [(string=? (first music-string) #\\\
    |) (parse-music-helper (rest music-string) (cons 2 acc))]\n      [else (parse-music-helper\
    \ (rest music-string) acc)]))\n  (parse-music-helper music-string '()))\n", " \
    \ (for/list ([ch (in-string music_string)])\n    (cond\n      [(char=? ch #\\\
    o) 4]\n      [(char=? ch #\\.) 1]\n      [(char=? ch #\\|) 2]\n      [else 0])))\n",
  "  (map (lambda (x)\n         (cond\n           [(equal? x \"o\") 4]\n         \
    \  [(equal? x \"o|\") 2]\n           [(equal? x \".|\") 1]))\n       (regexp-split\
    \ #rx\" \" music_string)))\n", "  (let loop ([music_string music_string]\n   \
    \          [result '()])\n    (cond [(empty? music_string) (reverse result)]\n\
    \          [(equal? (first music_string) #\\o)\n           (loop (rest music_string)\
    \ (cons 4 result))]\n          [(equal? (first music_string) #\\.)\n         \
    \  (loop (rest music_string) (cons 1 result))]\n          [else (loop (rest music_string)\
    \ result)])))\n", "  (cond\n    [(empty? music_string) empty]\n    [(equal? (first\
    \ music_string) #\\o) (cons 4 (parse_music (rest music_string)))]\n    [(equal?\
    \ (first music_string) #\\.) (cons 1 (parse_music (rest music_string)))]\n   \
    \ [(equal? (first music_string) #\\|) (cons 2 (parse_music (rest music_string)))]\n\
    \    [else (parse_music (rest music_string))]))\n", "  (define (parse_music_helper\
    \ music_string acc)\n    (cond\n      [(empty? music_string) acc]\n      [(equal?\
    \ (first music_string) #\\o) (parse_music_helper (rest music_string) (append acc\
    \ '(4)))]\n      [(equal? (first music_string) #\\.) (parse_music_helper (rest\
    \ music_string) (append acc '(1)))]\n      [(equal? (first music_string) #\\|)\
    \ (parse_music_helper (rest music_string) (append acc '(2)))]\n      [else (parse_music_helper\
    \ (rest music_string) acc)]))\n  (parse_music_helper music_string '()))\n", " \
    \ (cond\n    [(empty? music_string) empty]\n    [(equal? (first music_string)\
    \ #\\o) (cons 4 (parse_music (rest music_string)))]\n    [(equal? (first music_string)\
    \ #\\.) (cons 1 (parse_music (rest music_string)))]\n    [(equal? (first music_string)\
    \ #\\|) (cons 2 (parse_music (rest music_string)))]\n    [else (parse_music (rest\
    \ music_string))]))\n", "  (define (parse-helper music-string)\n    (cond\n  \
    \    [(empty? music-string) empty]\n      [(equal? (first music-string) #\\o)\n\
    \       (cons 4 (parse-helper (rest music-string)))]\n      [(equal? (first music-string)\
    \ #\\.)\n       (cons 1 (parse-helper (rest music-string)))]\n      [(equal? (first\
    \ music-string) #\\|)\n       (parse-helper (rest music-string))]\n      [else\
    \ (parse-helper (rest music-string))]))\n  (parse-helper (string->list music_string)))\n",
  "  (map (lambda (x)\n         (cond ((equal? x \"o\") 4)\n               ((equal?\
    \ x \"o|\") 2)\n               ((equal? x \".|\") 1)))\n       (regexp-split #rx\"\
    \ \" music_string)))\n", "  (map (lambda (x) (cond ((equal? x \"o\") 4)\n    \
    \                     ((equal? x \"o|\") 2)\n                         ((equal?\
    \ x \".|\") 1)))\n       (string-split music_string)))\n", "  (map (lambda (x)\n\
    \         (cond\n           [(equal? x \"o\") 4]\n           [(equal? x \"o|\"\
    ) 2]\n           [(equal? x \".|\") 1]))\n       (regexp-split #rx\" \" music_string)))\n",
  "  (map (lambda (x)\n         (cond\n           [(equal? x \"o\") 4]\n         \
    \  [(equal? x \"o|\") 2]\n           [(equal? x \".|\") 1]))\n       (regexp-split\
    \ #rx\" \" music_string)))\n", "  (map (lambda (note)\n         (cond ((string=?\
    \ note \"o\") 4)\n               ((string=? note \"o|\") 2)\n               ((string=?\
    \ note \".|\") 1)))\n       (regexp-split #rx\" \" music_string)))\n", "  (define\
    \ (parse_music_helper music_string acc)\n    (cond\n      [(empty? music_string)\
    \ (reverse acc)]\n      [(equal? (first music_string) #\\o) (parse_music_helper\
    \ (rest music_string) (cons 4 acc))]\n      [(equal? (first music_string) #\\\
    .) (parse_music_helper (rest music_string) (cons 1 acc))]\n      [(equal? (first\
    \ music_string) #\\|) (parse_music_helper (rest music_string) (cons 2 acc))]\n\
    \      [else (parse_music_helper (rest music_string) acc)]))\n  (parse_music_helper\
    \ music_string '()))\n", "  (define (parse_music_helper music_string result)\n\
    \    (if (empty? music_string)\n        result\n        (parse_music_helper (rest\
    \ music_string) (append result (list (parse_note (first music_string)))))))\n\
    \  (parse_music_helper music_string '()))\n", "  (cond\n    [(empty? music_string)\
    \ empty]\n    [(equal? (first music_string) #\\o) (cons 4 (parse_music (rest music_string)))]\n\
    \    [(equal? (first music_string) #\\.) (cons 1 (parse_music (rest music_string)))]\n\
    \    [(equal? (first music_string) #\\|) (cons 2 (parse_music (rest music_string)))]\n\
    \    [else (parse_music (rest music_string))]))\n", "  (cond\n    [(empty? music_string)\
    \ empty]\n    [(equal? (first music_string) #\\o) (cons 4 (parse_music (rest music_string)))]\n\
    \    [(equal? (first music_string) #\\.) (cons 1 (parse_music (rest music_string)))]\n\
    \    [(equal? (first music_string) #\\|) (parse_music (rest music_string))]\n\
    \    [else (parse_music (rest music_string))]))\n", "  (cond\n    [(empty? music_string)\
    \ empty]\n    [(equal? (first music_string) #\\o) (cons 4 (parse_music (rest music_string)))]\n\
    \    [(equal? (first music_string) #\\.) (cons 1 (parse_music (rest music_string)))]\n\
    \    [(equal? (first music_string) #\\|) (cons 2 (parse_music (rest music_string)))]\n\
    \    [else (parse_music (rest music_string))]))\n", "  (cond\n    [(empty? music_string)\
    \ empty]\n    [(string=? (substring music_string 0 1) \"o\")\n     (cons 4 (parse_music\
    \ (substring music_string 1)))]\n    [(string=? (substring music_string 0 2) \"\
    o|\")\n     (cons 2 (parse_music (substring music_string 2)))]\n    [(string=?\
    \ (substring music_string 0 2) \".|\")\n     (cons 1 (parse_music (substring music_string\
    \ 2)))]))\n", "  (cond\n    [(string=? music_string \"\") '()]\n    [(string=?\
    \ (substring music_string 0 1) \"o\") (cons 4 (parse_music (substring music_string\
    \ 1)))]\n    [(string=? (substring music_string 0 2) \"o|\") (cons 2 (parse_music\
    \ (substring music_string 2)))]\n    [(string=? (substring music_string 0 2) \"\
    .|\") (cons 1 (parse_music (substring music_string 2)))]\n    [else (cons 0 (parse_music\
    \ (substring music_string 1)))]))\n", "  (cond\n    [(empty? music_string) empty]\n\
    \    [(equal? (first music_string) #\\o) (cons 4 (parse_music (rest music_string)))]\n\
    \    [(equal? (first music_string) #\\.) (cons 1 (parse_music (rest music_string)))]\n\
    \    [(equal? (first music_string) #\\|) (cons 2 (parse_music (rest music_string)))]\n\
    \    [else (parse_music (rest music_string))]))\n", "  (map (lambda (x)\n    \
    \     (cond ((equal? x \"o\") 4)\n               ((equal? x \"o|\") 2)\n     \
    \          ((equal? x \".|\") 1)))\n       (regexp-split #rx\" \" music_string)))\n",
  "  (cond\n    [(empty? music_string) empty]\n    [(string=? (substring music_string\
    \ 0 1) \"o\")\n     (cons 4 (parse_music (substring music_string 1)))]\n    [(string=?\
    \ (substring music_string 0 2) \"o|\")\n     (cons 2 (parse_music (substring music_string\
    \ 2)))]\n    [(string=? (substring music_string 0 2) \".|\")\n     (cons 1 (parse_music\
    \ (substring music_string 2)))]))\n", "  (cond\n    [(empty? music_string) empty]\n\
    \    [(string=? (substring music_string 0 1) \"o\")\n     (cons 4 (parse_music\
    \ (substring music_string 1)))]\n    [(string=? (substring music_string 0 2) \"\
    o|\")\n     (cons 2 (parse_music (substring music_string 2)))]\n    [(string=?\
    \ (substring music_string 0 2) \".|\")\n     (cons 1 (parse_music (substring music_string\
    \ 2)))]))\n", "  (define (parse-music-helper music-string result)\n    (cond\n\
    \      [(empty? music-string) result]\n      [(equal? (first music-string) #\\\
    o) (parse-music-helper (rest music-string) (append result '(4)))]\n      [(equal?\
    \ (first music-string) #\\.) (parse-music-helper (rest music-string) (append result\
    \ '(1)))]\n      [(equal? (first music-string) #\\|) (parse-music-helper (rest\
    \ music-string) (append result '(2)))]\n      [else (parse-music-helper (rest\
    \ music-string) result)]))\n  (parse-music-helper (string->list music_string)\
    \ '()))\n", "  (cond\n    [(empty? music_string) empty]\n    [(string=? (substring\
    \ music_string 0 1) \"o\")\n     (cons 4 (parse_music (substring music_string\
    \ 1)))]\n    [(string=? (substring music_string 0 2) \"o|\")\n     (cons 2 (parse_music\
    \ (substring music_string 2)))]\n    [(string=? (substring music_string 0 2) \"\
    .|\")\n     (cons 1 (parse_music (substring music_string 2)))]))\n", "  (define\
    \ (parse_music_helper music_string acc)\n    (cond [(empty? music_string) (reverse\
    \ acc)]\n          [(string=? (substring music_string 0 1) \"o\")\n          \
    \ (parse_music_helper (substring music_string 1) (cons 4 acc))]\n          [(string=?\
    \ (substring music_string 0 2) \"o|\")\n           (parse_music_helper (substring\
    \ music_string 2) (cons 2 acc))]\n          [(string=? (substring music_string\
    \ 0 2) \".|\")\n           (parse_music_helper (substring music_string 2) (cons\
    \ 1 acc))]\n          [else (parse_music_helper (substring music_string 1) acc)]))\n\
    \  (parse_music_helper music_string '()))\n", "  (define (parse_music_helper music_string\
    \ acc)\n    (cond\n      [(empty? music_string) (reverse acc)]\n      [(equal?\
    \ (first music_string) #\\o) (parse_music_helper (rest music_string) (cons 4 acc))]\n\
    \      [(equal? (first music_string) #\\.) (parse_music_helper (rest music_string)\
    \ (cons 1 acc))]\n      [(equal? (first music_string) #\\|) (parse_music_helper\
    \ (rest music_string) (cons 2 acc))]\n      [else (parse_music_helper (rest music_string)\
    \ acc)]))\n  (parse_music_helper music_string '()))\n", "  (define (parse_music-helper\
    \ music_string acc)\n    (if (empty? music_string)\n        acc\n        (parse_music-helper\
    \ (cdr music_string) (cons (cond\n                                           \
    \           ((eq? (car music_string) #\\o) 4)\n                              \
    \                        ((eq? (car music_string) #\\.) 1)\n                 \
    \                                     ((eq? (car music_string) #\\|) 2)) acc))))\n\
    \  (parse_music-helper music_string '()))\n", "  (cond\n    [(empty? music_string)\
    \ empty]\n    [(equal? (first music_string) #\\o) (cons 4 (parse_music (rest music_string)))]\n\
    \    [(equal? (first music_string) #\\.) (cons 1 (parse_music (rest music_string)))]\n\
    \    [(equal? (first music_string) #\\|) (parse_music (rest music_string))]\n\
    \    [else (parse_music (rest music_string))]))\n", "  (cond\n    [(empty? music_string)\
    \ '()]\n    [(equal? (first music_string) #\\o) (cons 4 (parse_music (rest music_string)))]\n\
    \    [(equal? (first music_string) #\\.) (cons 1 (parse_music (rest music_string)))]\n\
    \    [(equal? (first music_string) #\\|) (cons 2 (parse_music (rest music_string)))]\n\
    \    [else (parse_music (rest music_string))]))\n", "  (cond\n    [(empty? music_string)\
    \ empty]\n    [(equal? (first music_string) #\\o) (cons 4 (parse_music (rest music_string)))]\n\
    \    [(equal? (first music_string) #\\.) (cons 1 (parse_music (rest music_string)))]\n\
    \    [(equal? (first music_string) #\\|) (cons 2 (parse_music (rest music_string)))]\n\
    \    [else (parse_music (rest music_string))]))\n", "  (cond\n    [(empty? music_string)\
    \ empty]\n    [(string=? (substring music_string 0 1) \"o\")\n     (cons 4 (parse_music\
    \ (substring music_string 1)))]\n    [(string=? (substring music_string 0 2) \"\
    o|\")\n     (cons 2 (parse_music (substring music_string 2)))]\n    [(string=?\
    \ (substring music_string 0 2) \".|\")\n     (cons 1 (parse_music (substring music_string\
    \ 2)))]))\n", "  (define (parse_music-helper music_string acc)\n    (cond\n  \
    \    [(empty? music_string) (reverse acc)]\n      [(string=? (first music_string)\
    \ \"o\") (parse_music-helper (rest music_string) (cons 4 acc))]\n      [(string=?\
    \ (first music_string) \"o|\") (parse_music-helper (rest music_string) (cons 2\
    \ acc))]\n      [(string=? (first music_string) \".|\") (parse_music-helper (rest\
    \ music_string) (cons 1 acc))]\n      [else (parse_music-helper (rest music_string)\
    \ acc)]))\n  (parse_music-helper music_string '()))\n", "  (map (lambda (x)\n\
    \         (cond\n           [(equal? x \"o\") 4]\n           [(equal? x \"o|\"\
    ) 2]\n           [(equal? x \".|\") 1]))\n       (regexp-split #rx\" \" music_string)))\n",
  "  (define (parse_music_helper music_string acc)\n    (cond\n      [(empty? music_string)\
    \ acc]\n      [(equal? (first music_string) #\\o) (parse_music_helper (rest music_string)\
    \ (append acc (list 4)))]\n      [(equal? (first music_string) #\\.) (parse_music_helper\
    \ (rest music_string) (append acc (list 1)))]\n      [(equal? (first music_string)\
    \ #\\|) (parse_music_helper (rest music_string) (append acc (list 2)))]\n    \
    \  [else (parse_music_helper (rest music_string) acc)]))\n  (parse_music_helper\
    \ music_string '()))\n", "  (cond\n    [(empty? music_string) empty]\n    [(equal?\
    \ (first music_string) #\\o) (cons 4 (parse_music (rest music_string)))]\n   \
    \ [(equal? (first music_string) #\\.) (cons 1 (parse_music (rest music_string)))]\n\
    \    [(equal? (first music_string) #\\|) (cons 2 (parse_music (rest music_string)))]\n\
    \    [else (parse_music (rest music_string))]))\n", "  (cond\n    [(empty? music_string)\
    \ empty]\n    [(equal? (first music_string) #\\o) (cons 4 (parse_music (rest music_string)))]\n\
    \    [(equal? (first music_string) #\\.) (cons 1 (parse_music (rest music_string)))]\n\
    \    [(equal? (first music_string) #\\|) (cons 2 (parse_music (rest music_string)))]\n\
    \    [else (parse_music (rest music_string))]))\n", "  (define (parse_music-helper\
    \ music_string acc)\n    (cond\n      [(empty? music_string) (reverse acc)]\n\
    \      [(equal? (first music_string) #\\o) (parse_music-helper (rest music_string)\
    \ (cons 4 acc))]\n      [(equal? (first music_string) #\\.) (parse_music-helper\
    \ (rest music_string) (cons 1 acc))]\n      [(equal? (first music_string) #\\\
    |) (parse_music-helper (rest music_string) (cons 2 acc))]\n      [else (parse_music-helper\
    \ (rest music_string) acc)]))\n  (parse_music-helper music_string '()))\n", " \
    \ (cond\n    [(empty? music_string) empty]\n    [(equal? (first music_string)\
    \ #\\o) (cons 4 (parse_music (rest music_string)))]\n    [(equal? (first music_string)\
    \ #\\.) (cons 1 (parse_music (rest music_string)))]\n    [(equal? (first music_string)\
    \ #\\|) (parse_music (rest music_string))]\n    [else (parse_music (rest music_string))]))\n",
  "  (cond\n    [(empty? music_string) empty]\n    [(equal? (first music_string) #\\\
    o) (cons 4 (parse_music (rest music_string)))]\n    [(equal? (first music_string)\
    \ #\\.) (cons 1 (parse_music (rest music_string)))]\n    [(equal? (first music_string)\
    \ #\\|) (parse_music (rest music_string))]\n    [else (parse_music (rest music_string))]))\n",
  "  (define (parse-music-helper music-string)\n    (cond\n      [(empty? music-string)\
    \ empty]\n      [(string=? (first music-string) \"o\")\n       (cons 4 (parse-music-helper\
    \ (rest music-string)))]\n      [(string=? (first music-string) \"o|\")\n    \
    \   (cons 2 (parse-music-helper (rest music-string)))]\n      [(string=? (first\
    \ music-string) \".|\")\n       (cons 1 (parse-music-helper (rest music-string)))]\n\
    \      [else (parse-music-helper (rest music-string))]))\n  (parse-music-helper\
    \ (string-split music_string)))\n", "  (cond\n    [(empty? music_string) empty]\n\
    \    [(equal? (first music_string) #\\o) (cons 4 (parse_music (rest music_string)))]\n\
    \    [(equal? (first music_string) #\\.) (cons 1 (parse_music (rest music_string)))]\n\
    \    [(equal? (first music_string) #\\|) (cons 2 (parse_music (rest music_string)))]\n\
    \    [else (parse_music (rest music_string))]))\n", "  (cond\n    [(empty? music_string)\
    \ empty]\n    [(equal? (first music_string) #\\o) (cons 4 (parse_music (rest music_string)))]\n\
    \    [(equal? (first music_string) #\\.) (cons 1 (parse_music (rest music_string)))]\n\
    \    [(equal? (first music_string) #\\|) (parse_music (rest music_string))]\n\
    \    [else (parse_music (rest music_string))]))\n", "  (define (parse_music_helper\
    \ music_string acc)\n    (cond\n      [(empty? music_string) (reverse acc)]\n\
    \      [(equal? (first music_string) #\\o) (parse_music_helper (rest music_string)\
    \ (cons 4 acc))]\n      [(equal? (first music_string) #\\.) (parse_music_helper\
    \ (rest music_string) (cons 1 acc))]\n      [(equal? (first music_string) #\\\
    |) (parse_music_helper (rest music_string) (cons 2 acc))]\n      [else (parse_music_helper\
    \ (rest music_string) acc)]))\n  (parse_music_helper music_string '()))\n", " \
    \ (define (parse_music_helper music_string)\n    (cond\n      [(empty? music_string)\
    \ empty]\n      [(string=? (substring music_string 0 1) \"o\")\n       (cons 4\
    \ (parse_music_helper (substring music_string 1)))]\n      [(string=? (substring\
    \ music_string 0 2) \"o|\")\n       (cons 2 (parse_music_helper (substring music_string\
    \ 2)))]\n      [(string=? (substring music_string 0 2) \".|\")\n       (cons 1\
    \ (parse_music_helper (substring music_string 2)))]))\n  (parse_music_helper music_string))\n",
  "  (map (lambda (x)\n         (cond [(equal? x \"o\") 4]\n               [(equal?\
    \ x \"o|\") 2]\n               [(equal? x \".|\") 1]))\n       (regexp-split #rx\"\
    \ \" music_string)))\n", "  (define (helper music_string)\n    (cond\n      [(empty?\
    \ music_string) empty]\n      [(string=? (substring music_string 0 2) \"o|\")\
    \ (cons 2 (helper (substring music_string 2)))]\n      [(string=? (substring music_string\
    \ 0 2) \".|\") (cons 1 (helper (substring music_string 2)))]\n      [(string=?\
    \ (substring music_string 0 1) \"o\") (cons 4 (helper (substring music_string\
    \ 1)))]\n      [else (helper (substring music_string 1))]))\n  (helper music_string))\n",
  "  (cond\n    [(empty? music_string) empty]\n    [(string=? (first music_string)\
    \ \"o\")\n     (cons 4 (parse_music (rest music_string)))]\n    [(string=? (first\
    \ music_string) \"o|\")\n     (cons 2 (parse_music (rest music_string)))]\n  \
    \  [(string=? (first music_string) \".|\")\n     (cons 1 (parse_music (rest music_string)))]\n\
    \    [else (parse_music (rest music_string))]))\n", "  (cond\n    [(empty? music_string)\
    \ empty]\n    [(string=? (first music_string) #\\o) (cons 4 (parse_music (rest\
    \ music_string)))]\n    [(string=? (first music_string) #\\.) (cons 1 (parse_music\
    \ (rest music_string)))]\n    [(string=? (first music_string) #\\|) (cons 2 (parse_music\
    \ (rest music_string)))]\n    [else (parse_music (rest music_string))]))\n", " \
    \ (map (lambda (x)\n         (cond\n           [(equal? x 'o) 4]\n           [(equal?\
    \ x 'o|) 2]\n           [(equal? x '.|) 1]))\n       (regexp-match* #rx\"[o|.]\"\
    \ music_string)))\n", "  (cond\n    [(empty? music_string) empty]\n    [(equal?\
    \ (first music_string) #\\o) (cons 4 (parse_music (rest music_string)))]\n   \
    \ [(equal? (first music_string) #\\.) (cons 1 (parse_music (rest music_string)))]\n\
    \    [(equal? (first music_string) #\\|) (cons 2 (parse_music (rest music_string)))]\n\
    \    [else (parse_music (rest music_string))]))\n", "  (cond\n    [(empty? music_string)\
    \ empty]\n    [(string=? (substring music_string 0 1) \"o\")\n     (cons 4 (parse_music\
    \ (substring music_string 1)))]\n    [(string=? (substring music_string 0 2) \"\
    o|\")\n     (cons 2 (parse_music (substring music_string 2)))]\n    [(string=?\
    \ (substring music_string 0 2) \".|\")\n     (cons 1 (parse_music (substring music_string\
    \ 2)))]))\n", "  (cond\n    [(empty? music_string) empty]\n    [(equal? (first\
    \ music_string) #\\o) (cons 4 (parse_music (rest music_string)))]\n    [(equal?\
    \ (first music_string) #\\.) (cons 1 (parse_music (rest music_string)))]\n   \
    \ [(equal? (first music_string) #\\|) (cons 2 (parse_music (rest music_string)))]\n\
    \    [else (parse_music (rest music_string))]))\n", "  (define (parse-music-helper\
    \ music-string)\n    (if (empty? music-string)\n        '()\n        (cons (cond\
    \ [(string=? (first music-string) \"o\") 4]\n                    [(string=? (first\
    \ music-string) \"o|\") 2]\n                    [(string=? (first music-string)\
    \ \".|\") 1])\n              (parse-music-helper (rest music-string)))))\n  (parse-music-helper\
    \ (string-split music_string)))\n", "  (map (lambda (x) (cond ((string=? x \"\
    o\") 4)\n                         ((string=? x \"o|\") 2)\n                  \
    \       ((string=? x \".|\") 1)))\n       (regexp-split #rx\" \" music_string)))\n",
  "  (cond\n    [(empty? music_string) empty]\n    [(string=? (substring music_string\
    \ 0 1) \"o\")\n     (cons 4 (parse_music (substring music_string 1)))]\n    [(string=?\
    \ (substring music_string 0 2) \"o|\")\n     (cons 2 (parse_music (substring music_string\
    \ 2)))]\n    [(string=? (substring music_string 0 2) \".|\")\n     (cons 1 (parse_music\
    \ (substring music_string 2)))]))\n", "  (map (lambda (x)\n         (cond ((equal?\
    \ x \"o\") 4)\n               ((equal? x \"o|\") 2)\n               ((equal? x\
    \ \".|\") 1)))\n       (regexp-split #rx\" \" music_string)))\n", "  (cond\n \
    \   [(empty? music_string) empty]\n    [(equal? (first music_string) #\\o) (cons\
    \ 4 (parse_music (rest music_string)))]\n    [(equal? (first music_string) #\\\
    .) (cons 1 (parse_music (rest music_string)))]\n    [(equal? (first music_string)\
    \ #\\|) (cons 2 (parse_music (rest music_string)))]\n    [else (parse_music (rest\
    \ music_string))]))\n", "  (cond\n    [(empty? music_string) empty]\n    [(string=?\
    \ (first music_string) #\\o) (cons 4 (parse_music (rest music_string)))]\n   \
    \ [(string=? (first music_string) #\\.) (cons 1 (parse_music (rest music_string)))]\n\
    \    [(string=? (first music_string) #\\|) (cons 2 (parse_music (rest music_string)))]\n\
    \    [else (parse_music (rest music_string))]))\n", "  (cond\n    [(empty? music_string)\
    \ empty]\n    [(equal? (first music_string) #\\o) (cons 4 (parse_music (rest music_string)))]\n\
    \    [(equal? (first music_string) #\\.) (cons 1 (parse_music (rest music_string)))]\n\
    \    [(equal? (first music_string) #\\|) (cons 2 (parse_music (rest music_string)))]\n\
    \    [else (parse_music (rest music_string))]))\n", "  (cond\n    [(empty? music_string)\
    \ empty]\n    [(equal? (first music_string) #\\o) (cons 4 (parse_music (rest music_string)))]\n\
    \    [(equal? (first music_string) #\\.) (cons 1 (parse_music (rest music_string)))]\n\
    \    [(equal? (first music_string) #\\|) (parse_music (rest music_string))]\n\
    \    [else (parse_music (rest music_string))]))\n", "  (map (lambda (x) (cond\
    \ ((equal? x \"o\") 4)\n                         ((equal? x \"o|\") 2)\n     \
    \                    ((equal? x \".|\") 1)))\n       (regexp-split #rx\" \" music_string)))\n",
  "  (define (parse-music-helper music-string acc)\n    (cond\n      [(empty? music-string)\
    \ (reverse acc)]\n      [(equal? (first music-string) #\\o) (parse-music-helper\
    \ (rest music-string) (cons 4 acc))]\n      [(equal? (first music-string) #\\\
    .) (parse-music-helper (rest music-string) (cons 1 acc))]\n      [(equal? (first\
    \ music-string) #\\|) (parse-music-helper (rest music-string) (cons 2 acc))]\n\
    \      [else (parse-music-helper (rest music-string) acc)]))\n  (parse-music-helper\
    \ music-string '()))\n", "  (cond\n    [(empty? music_string) empty]\n    [(string=?\
    \ (substring music_string 0 1) \"o\")\n     (cons 4 (parse_music (substring music_string\
    \ 1)))]\n    [(string=? (substring music_string 0 2) \"o|\")\n     (cons 2 (parse_music\
    \ (substring music_string 2)))]\n    [(string=? (substring music_string 0 2) \"\
    .|\")\n     (cons 1 (parse_music (substring music_string 2)))]))\n", "  (map (lambda\
    \ (x)\n         (cond\n           [(equal? x \"o\") 4]\n           [(equal? x\
    \ \"o|\") 2]\n           [(equal? x \".|\") 1]))\n       (regexp-split #rx\" \"\
    \ music_string)))\n", "  (map (lambda (x)\n         (cond\n           [(equal?\
    \ x \"o\") 4]\n           [(equal? x \"o|\") 2]\n           [(equal? x \".|\"\
    ) 1]))\n       (regexp-split #rx\" \" music_string)))\n", "  (cond\n    [(empty?\
    \ music_string) empty]\n    [(string=? (substring music_string 0 1) \"o\")\n \
    \    (cons 4 (parse_music (substring music_string 1)))]\n    [(string=? (substring\
    \ music_string 0 2) \"o|\")\n     (cons 2 (parse_music (substring music_string\
    \ 2)))]\n    [(string=? (substring music_string 0 2) \".|\")\n     (cons 1 (parse_music\
    \ (substring music_string 2)))]))\n", "  (define (parse_music_helper music_string\
    \ acc)\n    (cond\n      [(empty? music_string) (reverse acc)]\n      [(string=?\
    \ (first music_string) #\\o) (parse_music_helper (rest music_string) (cons 4 acc))]\n\
    \      [(string=? (first music_string) #\\.) (parse_music_helper (rest music_string)\
    \ (cons 1 acc))]\n      [(string=? (first music_string) #\\|) (parse_music_helper\
    \ (rest music_string) (cons 2 acc))]\n      [else (parse_music_helper (rest music_string)\
    \ acc)]))\n  (parse_music_helper music_string '()))\n", "  (define (parse-helper\
    \ music-string acc)\n    (cond\n      [(empty? music-string) (reverse acc)]\n\
    \      [(equal? (first music-string) #\\o) (parse-helper (rest music-string) (cons\
    \ 4 acc))]\n      [(equal? (first music-string) #\\.) (parse-helper (rest music-string)\
    \ (cons 1 acc))]\n      [(equal? (first music-string) #\\|) (parse-helper (rest\
    \ music-string) (cons 2 acc))]\n      [else (parse-helper (rest music-string)\
    \ acc)]))\n  (parse-helper music-string '()))\n", "  (cond\n    [(empty? music_string)\
    \ '()]\n    [(string=? (substring music_string 0 1) \"o\") (cons 4 (parse_music\
    \ (substring music_string 1)))]\n    [(string=? (substring music_string 0 2) \"\
    o|\") (cons 2 (parse_music (substring music_string 2)))]\n    [(string=? (substring\
    \ music_string 0 2) \".|\") (cons 1 (parse_music (substring music_string 2)))]\n\
    \    [else (parse_music (substring music_string 1))]))\n", "  (cond\n    [(empty?\
    \ music_string) empty]\n    [(equal? (first music_string) #\\o) (cons 4 (parse_music\
    \ (rest music_string)))]\n    [(equal? (first music_string) #\\.) (cons 1 (parse_music\
    \ (rest music_string)))]\n    [(equal? (first music_string) #\\|) (parse_music\
    \ (rest music_string))]\n    [else (parse_music (rest music_string))]))\n", " \
    \ (define (parse_music_helper music_string result)\n    (if (empty? music_string)\n\
    \        result\n        (parse_music_helper (rest music_string)\n           \
    \                 (append result\n                                    (list (cond\n\
    \                                           ((equal? (first music_string) #\\\
    o) 4)\n                                           ((equal? (first music_string)\
    \ #\\.) 1)\n                                           (else 2)))))))\n  (parse_music_helper\
    \ music_string '()))\n", "  (cond\n    [(empty? music_string) empty]\n    [(equal?\
    \ (first music_string) #\\o) (cons 4 (parse_music (rest music_string)))]\n   \
    \ [(equal? (first music_string) #\\.) (cons 1 (parse_music (rest music_string)))]\n\
    \    [(equal? (first music_string) #\\|) (cons 2 (parse_music (rest music_string)))]\n\
    \    [else (parse_music (rest music_string))]))\n", "  (cond\n    [(empty? music_string)\
    \ empty]\n    [(equal? (first music_string) #\\o) (cons 4 (parse_music (rest music_string)))]\n\
    \    [(equal? (first music_string) #\\.) (cons 1 (parse_music (rest music_string)))]\n\
    \    [(equal? (first music_string) #\\|) (cons 2 (parse_music (rest music_string)))]\n\
    \    [else (parse_music (rest music_string))]))\n", "  (cond\n    [(empty? music_string)\
    \ empty]\n    [(equal? (first music_string) #\\o) (cons 4 (parse_music (rest music_string)))]\n\
    \    [(equal? (first music_string) #\\.) (cons 1 (parse_music (rest music_string)))]\n\
    \    [(equal? (first music_string) #\\|) (cons 2 (parse_music (rest music_string)))]\n\
    \    [else (parse_music (rest music_string))]))\n", "  (cond\n    [(empty? music_string)\
    \ empty]\n    [(equal? (first music_string) #\\o) (cons 4 (parse_music (rest music_string)))]\n\
    \    [(equal? (first music_string) #\\.) (cons 1 (parse_music (rest music_string)))]\n\
    \    [(equal? (first music_string) #\\|) (cons 2 (parse_music (rest music_string)))]\n\
    \    [else (parse_music (rest music_string))]))\n", "  (cond\n    [(empty? music_string)\
    \ empty]\n    [(equal? (first music_string) #\\o) (cons 4 (parse_music (rest music_string)))]\n\
    \    [(equal? (first music_string) #\\.) (cons 1 (parse_music (rest music_string)))]\n\
    \    [(equal? (first music_string) #\\|) (parse_music (rest music_string))]\n\
    \    [else (parse_music (rest music_string))]))\n", "  (let ([notes (string-split\
    \ music_string \" \")])\n    (for/list ([note notes])\n      (cond\n        [(string=?\
    \ note \"o\") 4]\n        [(string=? note \"o|\") 2]\n        [(string=? note\
    \ \".|\") 1]))))\n", "  (define (parse_music_helper music_string)\n    (cond ((null?\
    \ music_string) '())\n          ((equal? (car music_string) #\\o) (cons 4 (parse_music_helper\
    \ (cdr music_string))))\n          ((equal? (car music_string) #\\o) (cons 4 (parse_music_helper\
    \ (cdr music_string))))\n          ((equal? (car music_string) #\\.) (cons 1 (parse_music_helper\
    \ (cdr music_string))))\n          ((equal? (car music_string) #\\|) (parse_music_helper\
    \ (cdr music_string)))))\n  (parse_music_helper (string->list music_string)))\n",
  "  (cond\n    [(empty? music_string) empty]\n    [(equal? (first music_string) #\\\
    o) (cons 4 (parse_music (rest music_string)))]\n    [(equal? (first music_string)\
    \ #\\.) (cons 1 (parse_music (rest music_string)))]\n    [(equal? (first music_string)\
    \ #\\|) (parse_music (rest music_string))]\n    [else (parse_music (rest music_string))]))\n",
  "  (cond\n    [(empty? music_string) empty]\n    [(string=? (substring music_string\
    \ 0 1) \"o\")\n     (cons 4 (parse_music (substring music_string 1)))]\n    [(string=?\
    \ (substring music_string 0 2) \"o|\")\n     (cons 2 (parse_music (substring music_string\
    \ 2)))]\n    [(string=? (substring music_string 0 2) \".|\")\n     (cons 1 (parse_music\
    \ (substring music_string 2)))]))\n", "  (define (parse_music_helper music_string\
    \ acc)\n    (cond\n      [(empty? music_string) (reverse acc)]\n      [(string=?\
    \ (substring music_string 0 1) \"o\") (parse_music_helper (substring music_string\
    \ 1) (cons 4 acc))]\n      [(string=? (substring music_string 0 2) \"o|\") (parse_music_helper\
    \ (substring music_string 2) (cons 2 acc))]\n      [(string=? (substring music_string\
    \ 0 2) \".|\") (parse_music_helper (substring music_string 2) (cons 1 acc))]\n\
    \      [else (error \"Invalid input\")]))\n  (parse_music_helper music_string\
    \ '()))\n", "  (cond\n    [(empty? music_string) empty]\n    [(equal? (first music_string)\
    \ #\\o) (cons 4 (parse_music (rest music_string)))]\n    [(equal? (first music_string)\
    \ #\\.) (cons 1 (parse_music (rest music_string)))]\n    [(equal? (first music_string)\
    \ #\\|) (parse_music (rest music_string))]\n    [else (parse_music (rest music_string))]))\n",
  "  (let loop ([music_string music_string]\n             [result '()])\n    (cond\
    \ [(empty? music_string) (reverse result)]\n          [(string=? (substring music_string\
    \ 0 1) \"o\")\n           (loop (substring music_string 1) (cons 4 result))]\n\
    \          [(string=? (substring music_string 0 2) \"o|\")\n           (loop (substring\
    \ music_string 2) (cons 2 result))]\n          [(string=? (substring music_string\
    \ 0 2) \".|\")\n           (loop (substring music_string 2) (cons 1 result))]\n\
    \          [else (loop (substring music_string 1) result)])))\n", "  (cond\n \
    \   [(empty? music_string) empty]\n    [(string=? (substring music_string 0 1)\
    \ \"o\")\n     (cons 4 (parse_music (substring music_string 1)))]\n    [(string=?\
    \ (substring music_string 0 2) \"o|\")\n     (cons 2 (parse_music (substring music_string\
    \ 2)))]\n    [(string=? (substring music_string 0 2) \".|\")\n     (cons 1 (parse_music\
    \ (substring music_string 2)))]))\n", "  (map (lambda (x)\n         (cond\n  \
    \         [(string=? x \"o\") 4]\n           [(string=? x \"o|\") 2]\n       \
    \    [(string=? x \".|\") 1]))\n       (regexp-split #rx\" \" music_string)))\n",
  "  (map (lambda (x)\n         (cond\n           [(equal? x \"o\") 4]\n         \
    \  [(equal? x \"o|\") 2]\n           [(equal? x \".|\") 1]))\n       (regexp-split\
    \ #rx\" \" music_string)))\n", "  (map (lambda (x) (cond [(string=? x \"o\") 4]\
    \ [(string=? x \"o|\") 2] [(string=? x \".|\") 1])) (string-split music_string)))\n",
  "  (define (parse_music-helper music_string result)\n    (cond\n      [(empty? music_string)\
    \ (reverse result)]\n      [(string=? (substring music_string 0 1) \"o\")\n  \
    \     (parse_music-helper (substring music_string 1) (cons 4 result))]\n     \
    \ [(string=? (substring music_string 0 2) \"o|\")\n       (parse_music-helper\
    \ (substring music_string 2) (cons 2 result))]\n      [(string=? (substring music_string\
    \ 0 2) \".|\")\n       (parse_music-helper (substring music_string 2) (cons 1\
    \ result))]\n      [else (error \"Invalid music string\")]))\n  (parse_music-helper\
    \ music_string '()))\n", "  (define (parse_music_helper music_string acc)\n  \
    \  (cond [(empty? music_string) (reverse acc)]\n          [(equal? (first music_string)\
    \ #\\o) (parse_music_helper (rest music_string) (cons 4 acc))]\n          [(equal?\
    \ (first music_string) #\\.) (parse_music_helper (rest music_string) (cons 1 acc))]\n\
    \          [(equal? (first music_string) #\\|) (parse_music_helper (rest music_string)\
    \ (cons 2 acc))]\n          [else (parse_music_helper (rest music_string) acc)]))\n\
    \  (parse_music_helper music_string '()))\n", "  (define (parse_music-helper music_string\
    \ result)\n    (cond\n      [(empty? music_string) (reverse result)]\n      [(equal?\
    \ (first music_string) #\\o)\n       (parse_music-helper (rest music_string) (cons\
    \ 4 result))]\n      [(equal? (first music_string) #\\.)\n       (parse_music-helper\
    \ (rest music_string) (cons 1 result))]\n      [(equal? (first music_string) #\\\
    |)\n       (parse_music-helper (rest music_string) (cons 2 result))]\n      [else\
    \ (parse_music-helper (rest music_string) result)]))\n  (parse_music-helper music_string\
    \ '()))\n", "  (cond\n    [(empty? music_string) empty]\n    [(equal? (first music_string)\
    \ #\\o) (cons 4 (parse_music (rest music_string)))]\n    [(equal? (first music_string)\
    \ #\\.) (cons 1 (parse_music (rest music_string)))]\n    [(equal? (first music_string)\
    \ #\\|) (cons 2 (parse_music (rest music_string)))]\n    [else (parse_music (rest\
    \ music_string))]))\n", "  (cond [(empty? music_string) empty]\n        [(equal?\
    \ (first music_string) #\\o) (cons 4 (parse_music (rest music_string)))]\n   \
    \     [(equal? (first music_string) #\\.) (cons 1 (parse_music (rest music_string)))]\n\
    \        [(equal? (first music_string) #\\|) (cons 2 (parse_music (rest music_string)))]\n\
    \        [else (parse_music (rest music_string))]))\n", "  (cond\n    [(empty?\
    \ music_string) empty]\n    [(equal? (first music_string) #\\o) (cons 4 (parse_music\
    \ (rest music_string)))]\n    [(equal? (first music_string) #\\.) (cons 1 (parse_music\
    \ (rest music_string)))]\n    [(equal? (first music_string) #\\|) (parse_music\
    \ (rest music_string))]\n    [else (parse_music (rest music_string))]))\n", " \
    \ (define (parse_music_helper music_string result)\n    (cond ((null? music_string)\
    \ (reverse result))\n          ((equal? (car music_string) #\\o) (parse_music_helper\
    \ (cdr music_string) (cons 4 result)))\n          ((equal? (car music_string)\
    \ #\\.) (parse_music_helper (cdr music_string) (cons 1 result)))\n          ((equal?\
    \ (car music_string) #\\|) (parse_music_helper (cdr music_string) (cons 2 result)))\n\
    \          (else (parse_music_helper (cdr music_string) result))))\n  (parse_music_helper\
    \ (string->list music_string) '()))\n", "  (define (parse_music_helper music_string\
    \ result)\n    (cond\n      [(empty? music_string) result]\n      [(string=? (first\
    \ music_string) \"o\") (parse_music_helper (rest music_string) (append result\
    \ '(4)))]\n      [(string=? (first music_string) \"o|\") (parse_music_helper (rest\
    \ music_string) (append result '(2)))]\n      [(string=? (first music_string)\
    \ \".|\") (parse_music_helper (rest music_string) (append result '(1)))]\n   \
    \   [else (parse_music_helper (rest music_string) result)]))\n  (parse_music_helper\
    \ music_string '()))\n", "  (cond [(empty? music_string) empty]\n        [(equal?\
    \ (first music_string) #\\o) (cons 4 (parse_music (rest music_string)))]\n   \
    \     [(equal? (first music_string) #\\.) (cons 1 (parse_music (rest music_string)))]\n\
    \        [(equal? (first music_string) #\\|) (parse_music (rest music_string))]\n\
    \        [else (parse_music (rest music_string))]))\n", "  (cond\n    [(empty?\
    \ music_string) empty]\n    [(equal? (first music_string) #\\o) (cons 4 (parse_music\
    \ (rest music_string)))]\n    [(equal? (first music_string) #\\.) (cons 1 (parse_music\
    \ (rest music_string)))]\n    [(equal? (first music_string) #\\|) (parse_music\
    \ (rest music_string))]\n    [else (parse_music (rest music_string))]))\n", " \
    \ (cond\n    [(empty? music_string) empty]\n    [(equal? (first music_string)\
    \ #\\o) (cons 4 (parse_music (rest music_string)))]\n    [(equal? (first music_string)\
    \ #\\.) (cons 1 (parse_music (rest music_string)))]\n    [(equal? (first music_string)\
    \ #\\|) (parse_music (rest music_string))]\n    [else (parse_music (rest music_string))]))\n",
  "  (cond\n    [(empty? music_string) empty]\n    [(string=? (substring music_string\
    \ 0 1) \"o\")\n     (cons 4 (parse_music (substring music_string 1)))]\n    [(string=?\
    \ (substring music_string 0 2) \"o|\")\n     (cons 2 (parse_music (substring music_string\
    \ 2)))]\n    [(string=? (substring music_string 0 2) \".|\")\n     (cons 1 (parse_music\
    \ (substring music_string 2)))]))\n", "  (cond\n    [(empty? music_string) empty]\n\
    \    [(equal? (first music_string) #\\o) (cons 4 (parse_music (rest music_string)))]\n\
    \    [(equal? (first music_string) #\\.) (cons 1 (parse_music (rest music_string)))]\n\
    \    [(equal? (first music_string) #\\|) (parse_music (rest music_string))]\n\
    \    [else (parse_music (rest music_string))]))\n", "  (map (lambda (x)\n    \
    \     (cond\n           [(equal? x \"o\") 4]\n           [(equal? x \"o|\") 2]\n\
    \           [(equal? x \".|\") 1]))\n       (regexp-split #rx\" \" music_string)))\n",
  "  (define (parse-music-helper music-string acc)\n    (cond\n      [(empty? music-string)\
    \ (reverse acc)]\n      [(string=? (first music-string) \"o\") (parse-music-helper\
    \ (rest music-string) (cons 4 acc))]\n      [(string=? (first music-string) \"\
    o|\") (parse-music-helper (rest music-string) (cons 2 acc))]\n      [(string=?\
    \ (first music-string) \".|\") (parse-music-helper (rest music-string) (cons 1\
    \ acc))]\n      [else (parse-music-helper (rest music-string) acc)]))\n  (parse-music-helper\
    \ music-string '()))\n", "  (cond\n    [(empty? music_string) empty]\n    [(equal?\
    \ (first music_string) #\\o) (cons 4 (parse_music (rest music_string)))]\n   \
    \ [(equal? (first music_string) #\\.) (cons 1 (parse_music (rest music_string)))]\n\
    \    [(equal? (first music_string) #\\|) (cons 2 (parse_music (rest music_string)))]\n\
    \    [else (parse_music (rest music_string))]))\n", "  (map (lambda (x)\n    \
    \     (cond\n           [(equal? x \"o\") 4]\n           [(equal? x \"o|\") 2]\n\
    \           [(equal? x \".|\") 1]))\n       (regexp-split #rx\"\\s+\" music_string)))\n",
  "  (define (parse-music-helper music_string acc)\n    (cond\n      [(empty? music_string)\
    \ (reverse acc)]\n      [(equal? (first music_string) #\\o) (parse-music-helper\
    \ (rest music_string) (cons 4 acc))]\n      [(equal? (first music_string) #\\\
    .) (parse-music-helper (rest music_string) (cons 1 acc))]\n      [(equal? (first\
    \ music_string) #\\|) (parse-music-helper (rest music_string) (cons 2 acc))]\n\
    \      [else (parse-music-helper (rest music_string) acc)]))\n  (parse-music-helper\
    \ music_string '()))\n", "  (cond\n    [(empty? music_string) empty]\n    [(equal?\
    \ (first music_string) #\\o) (cons 4 (parse_music (rest music_string)))]\n   \
    \ [(equal? (first music_string) #\\.) (cons 1 (parse_music (rest music_string)))]\n\
    \    [(equal? (first music_string) #\\|) (cons 2 (parse_music (rest music_string)))]\n\
    \    [else (parse_music (rest music_string))]))\n", "  (define (parse_music_helper\
    \ music_string result)\n    (cond\n      [(empty? music_string) (reverse result)]\n\
    \      [(string=? (substring music_string 0 1) \"o\") (parse_music_helper (substring\
    \ music_string 1) (cons 4 result))]\n      [(string=? (substring music_string\
    \ 0 2) \"o|\") (parse_music_helper (substring music_string 2) (cons 2 result))]\n\
    \      [(string=? (substring music_string 0 2) \".|\") (parse_music_helper (substring\
    \ music_string 2) (cons 1 result))]\n      [else (parse_music_helper (substring\
    \ music_string 1) result)]))\n  (parse_music_helper music_string '()))\n", " \
    \ (cond\n    [(empty? music_string) empty]\n    [(string=? (substring music_string\
    \ 0 1) \"o\") (cons 4 (parse_music (substring music_string 1)))]\n    [(string=?\
    \ (substring music_string 0 2) \"o|\") (cons 2 (parse_music (substring music_string\
    \ 2)))]\n    [(string=? (substring music_string 0 2) \".|\") (cons 1 (parse_music\
    \ (substring music_string 2)))]\n    [else (parse_music (substring music_string\
    \ 1))]))\n", "  (cond\n    [(empty? music_string) '()]\n    [(string=? (substring\
    \ music_string 0 1) \"o\") (cons 4 (parse_music (substring music_string 1)))]\n\
    \    [(string=? (substring music_string 0 2) \"o|\") (cons 2 (parse_music (substring\
    \ music_string 2)))]\n    [(string=? (substring music_string 0 2) \".|\") (cons\
    \ 1 (parse_music (substring music_string 2)))]\n    [else (parse_music (substring\
    \ music_string 1))]))\n", "  (define (parse_music-helper music_string result)\n\
    \    (cond\n      [(empty? music_string) result]\n      [(equal? (first music_string)\
    \ #\\o) (parse_music-helper (rest music_string) (append result '(4)))]\n     \
    \ [(equal? (first music_string) #\\.) (parse_music-helper (rest music_string)\
    \ (append result '(1)))]\n      [(equal? (first music_string) #\\|) (parse_music-helper\
    \ (rest music_string) (append result '(2)))]\n      [else (parse_music-helper\
    \ (rest music_string) result)]))\n  (parse_music-helper music_string '()))\n",
  "  (map (lambda (x)\n         (cond\n           [(equal? x \"o\") 4]\n         \
    \  [(equal? x \"o|\") 2]\n           [(equal? x \".|\") 1]))\n       (regexp-split\
    \ #rx\" \" music_string)))\n", "  (cond\n    [(empty? music_string) empty]\n \
    \   [(string=? (substring music_string 0 1) \"o\")\n     (cons 4 (parse_music\
    \ (substring music_string 1)))]\n    [(string=? (substring music_string 0 2) \"\
    o|\")\n     (cons 2 (parse_music (substring music_string 2)))]\n    [(string=?\
    \ (substring music_string 0 2) \".|\")\n     (cons 1 (parse_music (substring music_string\
    \ 2)))]))\n", "  (cond\n    [(empty? music_string) empty]\n    [(equal? (first\
    \ music_string) #\\o) (cons 4 (parse_music (rest music_string)))]\n    [(equal?\
    \ (first music_string) #\\.) (cons 1 (parse_music (rest music_string)))]\n   \
    \ [(equal? (first music_string) #\\|) (cons 2 (parse_music (rest music_string)))]\n\
    \    [else (parse_music (rest music_string))]))\n", "  (map (lambda (x) (cond\
    \ ((equal? x \"o\") 4)\n                         ((equal? x \"o|\") 2)\n     \
    \                    ((equal? x \".|\") 1)))\n       (regexp-split #rx\" \" music_string)))\n",
  "  (cond\n    [(empty? music_string) empty]\n    [(string=? (substring music_string\
    \ 0 1) \"o\") (cons 4 (parse_music (substring music_string 1)))]\n    [(string=?\
    \ (substring music_string 0 2) \"o|\") (cons 2 (parse_music (substring music_string\
    \ 2)))]\n    [(string=? (substring music_string 0 2) \".|\") (cons 1 (parse_music\
    \ (substring music_string 2)))]\n    [else (parse_music (substring music_string\
    \ 1))]))\n", "  (cond\n    [(empty? music_string) empty]\n    [(string=? (substring\
    \ music_string 0 1) \"o\")\n     (cons 4 (parse_music (substring music_string\
    \ 1)))]\n    [(string=? (substring music_string 0 2) \"o|\")\n     (cons 2 (parse_music\
    \ (substring music_string 2)))]\n    [(string=? (substring music_string 0 2) \"\
    .|\")\n     (cons 1 (parse_music (substring music_string 2)))]))\n", "  (if (string=?\
    \ music_string \"\")\n      '()\n      (cons (cond\n             ((string=? (substring\
    \ music_string 0 1) \"o\") 4)\n             ((string=? (substring music_string\
    \ 0 2) \"o|\") 2)\n             ((string=? (substring music_string 0 2) \".|\"\
    ) 1))\n            (parse_music (substring music_string (add 1 (string-length\
    \ (substring music_string 0 2))))))))\n", "  (cond\n    [(empty? music_string)\
    \ empty]\n    [(equal? (first music_string) #\\o) (cons 4 (parse_music (rest music_string)))]\n\
    \    [(equal? (first music_string) #\\.) (cons 1 (parse_music (rest music_string)))]\n\
    \    [(equal? (first music_string) #\\|) (cons 2 (parse_music (rest music_string)))]\n\
    \    [else (parse_music (rest music_string))]))\n", "  (define (parse_music_helper\
    \ music_string acc)\n    (cond\n      [(empty? music_string) (reverse acc)]\n\
    \      [(equal? (first music_string) #\\o) (parse_music_helper (rest music_string)\
    \ (cons 4 acc))]\n      [(equal? (first music_string) #\\.) (parse_music_helper\
    \ (rest music_string) (cons 1 acc))]\n      [(equal? (first music_string) #\\\
    |) (parse_music_helper (rest music_string) (cons 2 acc))]\n      [else (parse_music_helper\
    \ (rest music_string) acc)]))\n  (parse_music_helper music_string '()))\n", " \
    \ (cond\n    [(empty? music_string) empty]\n    [(equal? (first music_string)\
    \ #\\o) (cons 4 (parse_music (rest music_string)))]\n    [(equal? (first music_string)\
    \ #\\.) (cons 1 (parse_music (rest music_string)))]\n    [(equal? (first music_string)\
    \ #\\|) (cons 2 (parse_music (rest music_string)))]\n    [else (parse_music (rest\
    \ music_string))]))\n", "  (cond\n    [(empty? music_string) empty]\n    [(equal?\
    \ (first music_string) #\\o) (cons 4 (parse_music (rest music_string)))]\n   \
    \ [(equal? (first music_string) #\\.) (cons 1 (parse_music (rest music_string)))]\n\
    \    [(equal? (first music_string) #\\|) (cons 2 (parse_music (rest music_string)))]\n\
    \    [else (parse_music (rest music_string))]))\n", "  (cond\n    [(empty? music_string)\
    \ empty]\n    [(equal? (first music_string) #\\o) (cons 4 (parse_music (rest music_string)))]\n\
    \    [(equal? (first music_string) #\\.) (cons 1 (parse_music (rest music_string)))]\n\
    \    [(equal? (first music_string) #\\|) (parse_music (rest music_string))]\n\
    \    [else (parse_music (rest music_string))]))\n", "  (cond\n    [(empty? music_string)\
    \ empty]\n    [(equal? (first music_string) #\\o) (cons 4 (parse_music (rest music_string)))]\n\
    \    [(equal? (first music_string) #\\.) (cons 1 (parse_music (rest music_string)))]\n\
    \    [(equal? (first music_string) #\\|) (parse_music (rest music_string))]\n\
    \    [else (parse_music (rest music_string))]))\n", "  (define (parse-helper music_string)\n\
    \    (cond\n      [(empty? music_string) empty]\n      [(string=? (first music_string)\
    \ \"o\") (cons 4 (parse-helper (rest music_string)))]\n      [(string=? (first\
    \ music_string) \"o|\") (cons 2 (parse-helper (rest music_string)))]\n      [(string=?\
    \ (first music_string) \".|\") (cons 1 (parse-helper (rest music_string)))]\n\
    \      [else (parse-helper (rest music_string))]))\n  (parse-helper (string-split\
    \ music_string \" \")))\n", "  (cond\n    [(empty? music_string) empty]\n    [(string=?\
    \ (substring music_string 0 1) \"o\") (cons 4 (parse_music (substring music_string\
    \ 1)))]\n    [(string=? (substring music_string 0 2) \"o|\") (cons 2 (parse_music\
    \ (substring music_string 2)))]\n    [(string=? (substring music_string 0 2) \"\
    .|\") (cons 1 (parse_music (substring music_string 2)))]\n    [else (parse_music\
    \ (substring music_string 1))]))\n", "  (map (lambda (x)\n         (cond\n   \
    \        [(equal? x 'o) 4]\n           [(equal? x 'o|) 2]\n           [(equal?\
    \ x '.|) 1]))\n       (string->list music_string)))\n", "  (cond\n    [(empty?\
    \ music_string) empty]\n    [(equal? (first music_string) #\\o) (cons 4 (parse_music\
    \ (rest music_string)))]\n    [(equal? (first music_string) #\\.) (cons 1 (parse_music\
    \ (rest music_string)))]\n    [(equal? (first music_string) #\\|) (parse_music\
    \ (rest music_string))]\n    [else (parse_music (rest music_string))]))\n", " \
    \ (define (parse-music-helper music-string acc)\n    (cond\n      [(empty? music-string)\
    \ (reverse acc)]\n      [(string=? (first music-string) \"o\") (parse-music-helper\
    \ (rest music-string) (cons 4 acc))]\n      [(string=? (first music-string) \"\
    o|\") (parse-music-helper (rest music-string) (cons 2 acc))]\n      [(string=?\
    \ (first music-string) \".|\") (parse-music-helper (rest music-string) (cons 1\
    \ acc))]\n      [else (parse-music-helper (rest music-string) acc)]))\n  (parse-music-helper\
    \ (string-split music_string) '()))\n", "  (map (lambda (x) (cond [(string=? x\
    \ \"o\") 4] [(string=? x \"o|\") 2] [(string=? x \".|\") 1])) (string-split music_string)))\n",
  "  (define (parse_music-helper music_string acc)\n    (cond\n      [(empty? music_string)\
    \ (reverse acc)]\n      [(string=? (first music_string) \"o\") (parse_music-helper\
    \ (rest music_string) (cons 4 acc))]\n      [(string=? (first music_string) \"\
    o|\") (parse_music-helper (rest music_string) (cons 2 acc))]\n      [(string=?\
    \ (first music_string) \".|\") (parse_music-helper (rest music_string) (cons 1\
    \ acc))]\n      [else (parse_music-helper (rest music_string) acc)]))\n  (parse_music-helper\
    \ music_string '()))\n", "  (cond\n    [(empty? music_string) empty]\n    [(equal?\
    \ (first music_string) #\\o) (cons 4 (parse_music (rest music_string)))]\n   \
    \ [(equal? (first music_string) #\\.) (cons 1 (parse_music (rest music_string)))]\n\
    \    [(equal? (first music_string) #\\|) (cons 2 (parse_music (rest music_string)))]\n\
    \    [else (parse_music (rest music_string))]))\n", "  (cond\n    [(empty? music_string)\
    \ empty]\n    [(equal? (first music_string) #\\o) (cons 4 (parse_music (rest music_string)))]\n\
    \    [(equal? (first music_string) #\\.) (cons 1 (parse_music (rest music_string)))]\n\
    \    [(equal? (first music_string) #\\|) (cons 2 (parse_music (rest music_string)))]\n\
    \    [else (parse_music (rest music_string))]))\n", "  (map (lambda (x)\n    \
    \     (cond\n           [(equal? x \"o\") 4]\n           [(equal? x \"o|\") 2]\n\
    \           [(equal? x \".|\") 1]))\n       (regexp-split #rx\" \" music_string)))\n",
  "  (map (lambda (x)\n         (cond\n           [(equal? x \"o\") 4]\n         \
    \  [(equal? x \"o|\") 2]\n           [(equal? x \".|\") 1]))\n       (regexp-split\
    \ #rx\" \" music_string)))\n", "  (define (parse-music-helper music_string acc)\n\
    \    (cond\n      [(empty? music_string) (reverse acc)]\n      [(string=? (first\
    \ music_string) \"o\") (parse-music-helper (rest music_string) (cons 4 acc))]\n\
    \      [(string=? (first music_string) \"o|\") (parse-music-helper (rest music_string)\
    \ (cons 2 acc))]\n      [(string=? (first music_string) \".|\") (parse-music-helper\
    \ (rest music_string) (cons 1 acc))]\n      [else (parse-music-helper (rest music_string)\
    \ acc)]))\n  (parse-music-helper music_string '()))\n", "  (cond\n    [(empty?\
    \ music_string) empty]\n    [(equal? (first music_string) #\\o) (cons 4 (parse_music\
    \ (rest music_string)))]\n    [(equal? (first music_string) #\\.) (cons 1 (parse_music\
    \ (rest music_string)))]\n    [(equal? (first music_string) #\\|) (cons 2 (parse_music\
    \ (rest music_string)))]\n    [else (parse_music (rest music_string))]))\n", " \
    \ (cond\n    [(empty? music_string) empty]\n    [(equal? (first music_string)\
    \ #\\o) (cons 4 (parse_music (rest music_string)))]\n    [(equal? (first music_string)\
    \ #\\.) (cons 1 (parse_music (rest music_string)))]\n    [(equal? (first music_string)\
    \ #\\|) (parse_music (rest music_string))]\n    [else (parse_music (rest music_string))]))\n",
  "  (define (parse_music_helper music_string acc)\n    (if (empty? music_string)\n\
    \        acc\n        (cond\n         ((equal? (first music_string) #\\o)\n  \
    \        (parse_music_helper (rest music_string) (cons 4 acc)))\n         ((equal?\
    \ (first music_string) #\\.)\n          (parse_music_helper (rest music_string)\
    \ (cons 1 acc)))\n         (else\n          (parse_music_helper (rest music_string)\
    \ acc)))))\n  (reverse (parse_music_helper music_string '())))\n", "  (cond\n\
    \    [(empty? music_string) empty]\n    [(equal? (first music_string) #\\o) (cons\
    \ 4 (parse_music (rest music_string)))]\n    [(equal? (first music_string) #\\\
    .) (cons 1 (parse_music (rest music_string)))]\n    [(equal? (first music_string)\
    \ #\\|) (cons 2 (parse_music (rest music_string)))]\n    [else (parse_music (rest\
    \ music_string))]))\n", "  (cond\n    [(empty? music_string) empty]\n    [(string=?\
    \ (substring music_string 0 1) \"o\")\n     (cons 4 (parse_music (substring music_string\
    \ 1)))]\n    [(string=? (substring music_string 0 2) \"o|\")\n     (cons 2 (parse_music\
    \ (substring music_string 2)))]\n    [(string=? (substring music_string 0 2) \"\
    .|\")\n     (cons 1 (parse_music (substring music_string 2)))]))\n", "  (cond\
    \ ((null? music_string) '())\n        ((equal? (car music_string) #\\o)\n    \
    \     (cons 4 (parse_music (cdr music_string))))\n        ((equal? (car music_string)\
    \ #\\.)\n         (cons 1 (parse_music (cdr music_string))))\n        ((equal?\
    \ (car music_string) #\\|)\n         (parse_music (cdr music_string)))))\n", " \
    \ (map (lambda (x) (cond ((equal? x \"o\") 4)\n                         ((equal?\
    \ x \"o|\") 2)\n                         ((equal? x \".|\") 1)))\n       (regexp-split\
    \ #rx\" \" music_string)))\n"]
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
