name: HumanEval_36_fizz_buzz
language: racket
prompt: "#lang racket\n\n;; Return the number of times the digit 7 appears in integers\
  \ less than n which are divisible by 11 or 13.\n;; >>> fizz_buzz(50)\n;; 0\n;; >>>\
  \ fizz_buzz(78)\n;; 2\n;; >>> fizz_buzz(79)\n;; 3\n(define (fizz_buzz n)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate fizz_buzz))\n\
  \    (check-equal? (candidate 50) 0)\n    (check-equal? (candidate 78) 2)\n    (check-equal?\
  \ (candidate 79) 3)\n    (check-equal? (candidate 100) 3)\n    (check-equal? (candidate\
  \ 200) 6)\n    (check-equal? (candidate 4000) 192)\n    (check-equal? (candidate\
  \ 10000) 639)\n    (check-equal? (candidate 100000) 8026)\n))\n\n(test-humaneval)"
completions: ["  (define (fizz_buzz_helper n acc)\n    (cond\n      [(= n 0) acc]\n\
    \      [(and (or (= (modulo n 11) 0) (= (modulo n 13) 0)) (= (modulo n 10) 7))\
    \ (fizz_buzz_helper (- n 1) (+ acc 1))]\n      [else (fizz_buzz_helper (- n 1)\
    \ acc)]))\n  (fizz_buzz_helper n 0))\n", "  (define (fizz_buzz_helper n acc)\n\
    \    (cond ((= n 0) acc)\n          ((and (or (= (modulo n 11) 0) (= (modulo n\
    \ 13) 0)) (= (modulo n 10) 7))\n           (fizz_buzz_helper (- n 1) (+ acc 1)))\n\
    \          (else (fizz_buzz_helper (- n 1) acc))))\n  (fizz_buzz_helper n 0))\n",
  "  (define (fizz_buzz_helper n acc)\n    (cond\n      [(= n 0) acc]\n      [(or\
    \ (= (modulo n 11) 0) (= (modulo n 13) 0)) (fizz_buzz_helper (- n 1) (+ acc (count-7\
    \ n)))]\n      [else (fizz_buzz_helper (- n 1) acc)]))\n  (fizz_buzz_helper n\
    \ 0))\n", "  (define (fizz_buzz_helper n acc)\n    (cond\n      [(= n 0) acc]\n\
    \      [(or (= (modulo n 11) 0) (= (modulo n 13) 0)) (fizz_buzz_helper (- n 1)\
    \ (+ acc (count-digits n 7)))]\n      [else (fizz_buzz_helper (- n 1) acc)]))\n\
    \  (fizz_buzz_helper n 0))\n", "  (define (fizz_buzz_helper n acc)\n    (cond\
    \ [(= n 0) acc]\n          [(or (= (modulo n 11) 0) (= (modulo n 13) 0))\n   \
    \        (fizz_buzz_helper (- n 1) (+ acc (count-7s n)))]\n          [else (fizz_buzz_helper\
    \ (- n 1) acc)]))\n  (fizz_buzz_helper n 0))\n", "  (cond\n    [(= n 0) 0]\n \
    \   [(or (= (modulo n 11) 0) (= (modulo n 13) 0)) (+ (fizz_buzz (- n 1)) (count-7\
    \ n))]\n    [else (fizz_buzz (- n 1))]))\n", "  (let loop ([i 1] [count 0])\n\
    \    (cond\n      [(= i n) count]\n      [(or (= (modulo i 11) 0) (= (modulo i\
    \ 13) 0))\n       (loop (+ i 1) (+ count (count-7 i)))]\n      [else (loop (+\
    \ i 1) count)])))\n", "  (define (fizz_buzz_helper n count)\n    (cond\n     \
    \ [(= n 0) count]\n      [(or (= (modulo n 11) 0) (= (modulo n 13) 0)) (fizz_buzz_helper\
    \ (- n 1) (+ count (count-7s n)))]\n      [else (fizz_buzz_helper (- n 1) count)]))\n\
    \  (fizz_buzz_helper n 0))\n", "  (define (fizz_buzz_iter n count)\n    (cond\
    \ ((= n 0) count)\n          ((or (= (modulo n 11) 0) (= (modulo n 13) 0)) (fizz_buzz_iter\
    \ (- n 1) (+ count (count-7 n))))\n          (else (fizz_buzz_iter (- n 1) count))))\n\
    \  (fizz_buzz_iter n 0))\n", "  (define (fizz_buzz_helper n count)\n    (cond\n\
    \      [(= n 0) count]\n      [(or (= (modulo n 11) 0) (= (modulo n 13) 0)) (fizz_buzz_helper\
    \ (- n 1) (+ count (count-7 (number->string n))))]\n      [else (fizz_buzz_helper\
    \ (- n 1) count)]))\n  (fizz_buzz_helper n 0))\n", "  (define (fizz_buzz_helper\
    \ n acc)\n    (cond\n      [(= n 0) acc]\n      [(or (= (modulo n 11) 0) (= (modulo\
    \ n 13) 0)) (fizz_buzz_helper (- n 1) (+ acc (count-7 n)))]\n      [else (fizz_buzz_helper\
    \ (- n 1) acc)]))\n  (fizz_buzz_helper n 0))\n", "  (cond\n    [(= n 0) 0]\n \
    \   [(= (modulo n 11) 0) (+ 1 (fizz_buzz (- n 1)))]\n    [(= (modulo n 13) 0)\
    \ (+ 1 (fizz_buzz (- n 1)))]\n    [else (fizz_buzz (- n 1))]))\n", "  (define\
    \ (fizz_buzz_helper n acc)\n    (cond\n      [(= n 0) acc]\n      [(= (modulo\
    \ n 11) 0) (fizz_buzz_helper (- n 1) (+ acc (count-7 n)))]\n      [(= (modulo\
    \ n 13) 0) (fizz_buzz_helper (- n 1) (+ acc (count-7 n)))]\n      [else (fizz_buzz_helper\
    \ (- n 1) acc)]))\n  (fizz_buzz_helper n 0))\n", "  (define (fizz_buzz_helper\
    \ n acc)\n    (cond\n      [(= n 0) acc]\n      [(or (= (modulo n 11) 0) (= (modulo\
    \ n 13) 0))\n       (fizz_buzz_helper (- n 1) (+ acc (count-7s (number->string\
    \ n))))]\n      [else (fizz_buzz_helper (- n 1) acc)]))\n  (fizz_buzz_helper n\
    \ 0))\n", "  (define (fizz_buzz_helper n acc)\n    (if (= n 0)\n        acc\n\
    \        (if (or (= (modulo n 11) 0) (= (modulo n 13) 0))\n            (fizz_buzz_helper\
    \ (- n 1) (+ acc (count-7 n)))\n            (fizz_buzz_helper (- n 1) acc))))\n\
    \  (fizz_buzz_helper n 0))\n", "  (define (fizz_buzz_iter n acc)\n    (cond\n\
    \      [(= n 0) acc]\n      [(or (= (modulo n 11) 0) (= (modulo n 13) 0))\n  \
    \     (fizz_buzz_iter (- n 1) (+ acc (count-7s n)))]\n      [else (fizz_buzz_iter\
    \ (- n 1) acc)]))\n  (fizz_buzz_iter n 0))\n", "  (define (fizz_buzz_helper n\
    \ acc)\n    (cond\n      [(= n 0) acc]\n      [(and (= (modulo n 11) 0) (= (modulo\
    \ n 13) 0)) (fizz_buzz_helper (- n 1) (+ acc (count-sevens n)))]\n      [(or (=\
    \ (modulo n 11) 0) (= (modulo n 13) 0)) (fizz_buzz_helper (- n 1) (count-sevens\
    \ n))]\n      [else (fizz_buzz_helper (- n 1) acc)]))\n  (fizz_buzz_helper n 0))\n",
  "  (cond\n    [(= n 0) 0]\n    [(or (= (modulo n 11) 0) (= (modulo n 13) 0))\n \
    \    (+ (count-7 (number->string n)) (fizz_buzz (- n 1)))]\n    [else (fizz_buzz\
    \ (- n 1))]))\n", "  (cond\n    [(= n 0) 0]\n    [(= (modulo n 11) 0) (+ 1 (fizz_buzz\
    \ (- n 1)))]\n    [(= (modulo n 13) 0) (+ 1 (fizz_buzz (- n 1)))]\n    [else (fizz_buzz\
    \ (- n 1))]))\n", "  (define (fizz_buzz_helper n acc)\n    (cond\n      [(= n\
    \ 0) acc]\n      [(or (= (modulo n 11) 0) (= (modulo n 13) 0))\n       (fizz_buzz_helper\
    \ (- n 1) (+ acc (count-7 n)))]\n      [else (fizz_buzz_helper (- n 1) acc)]))\n\
    \  (fizz_buzz_helper n 0))\n", "  (define (count-7s n)\n    (cond ((< n 10) (if\
    \ (= n 7) 1 0))\n          ((= (remainder n 10) 7) (add1 (count-7s (quotient n\
    \ 10))))\n          (else (count-7s (quotient n 10)))))\n  (define (fizz-buzz-helper\
    \ n acc)\n    (cond ((< n 1) acc)\n          ((or (= (remainder n 11) 0) (= (remainder\
    \ n 13) 0)) (fizz-buzz-helper (- n 1) (add1 acc)))\n          (else (fizz-buzz-helper\
    \ (- n 1) acc))))\n  (fizz-buzz-helper n 0))\n", "  (define (fizz_buzz_iter i\
    \ count)\n    (cond\n      [(= i n) count]\n      [(and (= (modulo i 11) 0) (=\
    \ (modulo i 13) 0)) (fizz_buzz_iter (+ i 1) (+ count (count-7 i)))]\n      [(or\
    \ (= (modulo i 11) 0) (= (modulo i 13) 0)) (fizz_buzz_iter (+ i 1) (count-7 i))]\n\
    \      [else (fizz_buzz_iter (+ i 1) count)]))\n  (fizz_buzz_iter 0 0))\n", " \
    \ (define (fizz_buzz_helper n acc)\n    (cond\n      [(= n 0) acc]\n      [(or\
    \ (= (modulo n 11) 0) (= (modulo n 13) 0)) (fizz_buzz_helper (- n 1) (+ acc (count-7\
    \ n)))]\n      [else (fizz_buzz_helper (- n 1) acc)]))\n  (fizz_buzz_helper n\
    \ 0))\n", "  (cond\n    [(= n 0) 0]\n    [(= n 1) 0]\n    [(= n 2) 0]\n    [(=\
    \ n 3) 0]\n    [(= n 4) 0]\n    [(= n 5) 0]\n    [(= n 6) 0]\n    [(= n 7) 0]\n\
    \    [(= n 8) 0]\n    [(= n 9) 0]\n    [(= n 10) 0]\n    [(= n 11) 0]\n    [(=\
    \ n 12) 0]\n    [(= n 13) 0]\n    [(= n 14) 0]\n    [(= n 15) 0]\n    [(= n 16)\
    \ 0]\n    [(= n 17) 0]\n    [(= n 18) 0]\n    [(= n 19) 0]\n    [(= n 20) 0]\n\
    \    [(= n 21) 0]\n    [(= n 22) 0]\n    [(= n 23) 0]\n    [(= n 24) 0]\n    [(=\
    \ n 25) 0]\n    [(= n 26) 0]\n    [(= n 27) 0]\n    [(= n 28) 0]\n    [(= n 29)\
    \ 0]\n    [(= n 30) 0]\n    [(= n 31) 0]\n    [(= n 32) 0]\n    [(= n 33) 0]\n\
    \    [(= n 34) 0]\n    [(= n 35) 0]\n    [(= n 36) 0]\n    [(= n 37) 0]\n    [(=\
    \ n 38) 0]\n    [(= n 39) 0]\n    [(= n 40) 0]\n    [(= n 41) 0]\n    [(= n 42)\
    \ 0]\n    [(= n 43) 0]\n    [(= n 44) 0]\n    [(= n 45) 0]\n    [(= n 46) 0]\n\
    \    [(= n 47) 0]\n    [(= n 48) 0]\n    [(= n 49) 0]\n    [(= n 50) 0]\n    [(=\
    \ n 51) 0]\n    [(= n 52) 0]\n    [(= n 53) 0]\n    [(= n 54) 0]\n    [(= n 55)\
    \ 0]\n    [(=", "  (define (fizz_buzz_helper n acc)\n    (cond [(= n 0) acc]\n\
    \          [(or (= (modulo n 11) 0) (= (modulo n 13) 0)) (fizz_buzz_helper (-\
    \ n 1) (+ acc (count_seven n)))]\n          [else (fizz_buzz_helper (- n 1) acc)]))\n\
    \  (fizz_buzz_helper n 0))\n", "  (cond\n    [(= n 0) 0]\n    [(or (= (modulo\
    \ n 11) 0) (= (modulo n 13) 0)) (+ (count-7s (number->string n)) (fizz_buzz (-\
    \ n 1)))]\n    [else (fizz_buzz (- n 1))]))\n", "  (cond\n    [(= n 0) 0]\n  \
    \  [(= n 1) 0]\n    [(= n 2) 0]\n    [(= n 3) 0]\n    [(= n 4) 0]\n    [(= n 5)\
    \ 0]\n    [(= n 6) 0]\n    [(= n 7) 0]\n    [(= n 8) 0]\n    [(= n 9) 0]\n   \
    \ [(= n 10) 0]\n    [(= n 11) 0]\n    [(= n 12) 0]\n    [(= n 13) 0]\n    [(=\
    \ n 14) 0]\n    [(= n 15) 0]\n    [(= n 16) 0]\n    [(= n 17) 0]\n    [(= n 18)\
    \ 0]\n    [(= n 19) 0]\n    [(= n 20) 0]\n    [(= n 21) 0]\n    [(= n 22) 0]\n\
    \    [(= n 23) 0]\n    [(= n 24) 0]\n    [(= n 25) 0]\n    [(= n 26) 0]\n    [(=\
    \ n 27) 0]\n    [(= n 28) 0]\n    [(= n 29) 0]\n    [(= n 30) 0]\n    [(= n 31)\
    \ 0]\n    [(= n 32) 0]\n    [(= n 33) 0]\n    [(= n 34) 0]\n    [(= n 35) 0]\n\
    \    [(= n 36) 0]\n    [(= n 37) 0]\n    [(= n 38) 0]\n    [(= n 39) 0]\n    [(=\
    \ n 40) 0]\n    [(= n 41) 0]\n    [(= n 42) 0]\n    [(= n 43) 0]\n    [(= n 44)\
    \ 0]\n    [(= n 45) 0]\n    [(= n 46) 0]\n    [(= n 47) 0]\n    [(= n 48) 0]\n\
    \    [(= n 49) 0]\n    [(= n 50) 0]\n    [(= n 51) 0]\n    [(= n 52) 0]\n    [(=\
    \ n 53) 0]\n    [(= n 54) 0]\n    [(= n 55) 0]\n    [(=", "  (define (fizz_buzz_helper\
    \ n acc)\n    (cond\n      [(= n 0) acc]\n      [(or (= (modulo n 11) 0) (= (modulo\
    \ n 13) 0)) (fizz_buzz_helper (- n 1) (+ acc (count-7 n)))]\n      [else (fizz_buzz_helper\
    \ (- n 1) acc)]))\n  (fizz_buzz_helper n 0))\n", "  (define (fizz_buzz_iter n\
    \ count)\n    (cond\n      [(= n 0) count]\n      [(or (= (modulo n 11) 0) (=\
    \ (modulo n 13) 0)) (fizz_buzz_iter (- n 1) (+ count (count-7 n)))]\n      [else\
    \ (fizz_buzz_iter (- n 1) count)]))\n  (fizz_buzz_iter n 0))\n", "  (define (fizz_buzz_helper\
    \ n acc)\n    (cond\n      [(= n 0) acc]\n      [(and (or (= (modulo n 11) 0)\
    \ (= (modulo n 13) 0)) (= (modulo n 10) 7)) (fizz_buzz_helper (- n 1) (+ acc 1))]\n\
    \      [else (fizz_buzz_helper (- n 1) acc)]))\n  (fizz_buzz_helper n 0))\n",
  "  (define (fizz_buzz_helper n acc)\n    (cond\n      [(= n 0) acc]\n      [(or\
    \ (= (modulo n 11) 0) (= (modulo n 13) 0))\n       (fizz_buzz_helper (- n 1) (+\
    \ acc (count-7 n)))]\n      [else (fizz_buzz_helper (- n 1) acc)]))\n  (fizz_buzz_helper\
    \ n 0))\n", "  (let loop ([i 1] [count 0])\n    (cond\n      [(> i n) count]\n\
    \      [(or (= (modulo i 11) 0) (= (modulo i 13) 0))\n       (loop (+ i 1) (+\
    \ count (count-7 (number->string i))))]\n      [else (loop (+ i 1) count)])))\n",
  "  (cond\n    [(= n 0) 0]\n    [(or (= (modulo n 11) 0) (= (modulo n 13) 0)) (+\
    \ (count-7 (number->string n)) (fizz_buzz (- n 1)))]\n    [else (fizz_buzz (-\
    \ n 1))]))\n", "  (define (count-7s n)\n    (cond\n      [(= n 0) 0]\n      [(=\
    \ (remainder n 10) 7) (+ 1 (count-7s (quotient n 10)))]\n      [else (count-7s\
    \ (quotient n 10))]))\n  (define (count-7s-in-range n)\n    (cond\n      [(< n\
    \ 0) 0]\n      [(or (= (remainder n 11) 0) (= (remainder n 13) 0)) (+ (count-7s\
    \ n) (count-7s-in-range (- n 1)))]\n      [else (count-7s-in-range (- n 1))]))\n\
    \  (count-7s-in-range n))\n", "  (define (fizz_buzz_helper n acc)\n    (cond\n\
    \      [(= n 0) acc]\n      [(or (= (modulo n 11) 0) (= (modulo n 13) 0)) (fizz_buzz_helper\
    \ (- n 1) (+ acc (count-7s n)))]\n      [else (fizz_buzz_helper (- n 1) acc)]))\n\
    \  (fizz_buzz_helper n 0))\n", "  (define (fizz_buzz_helper n acc)\n    (cond\n\
    \      [(= n 0) acc]\n      [(or (= (modulo n 11) 0) (= (modulo n 13) 0)) (fizz_buzz_helper\
    \ (- n 1) (+ acc (count-7s n)))]\n      [else (fizz_buzz_helper (- n 1) acc)]))\n\
    \  (fizz_buzz_helper n 0))\n", "  (if (< n 7)\n      0\n      (+ (if (or (zero?\
    \ (modulo n 11)) (zero? (modulo n 13)))\n             (if (or (zero? (modulo n\
    \ 7)) (zero? (modulo n 77)))\n                 2\n                 1)\n      \
    \       0)\n         (fizz_buzz (- n 1)))))\n", "  (define (count-7s n)\n    (cond\n\
    \      [(= n 0) 0]\n      [(= (remainder n 10) 7) (+ 1 (count-7s (quotient n 10)))]\n\
    \      [else (count-7s (quotient n 10))]))\n  (define (fizz-buzz-helper n)\n \
    \   (cond\n      [(= n 0) 0]\n      [(or (= (remainder n 11) 0) (= (remainder\
    \ n 13) 0)) (+ (count-7s n) (fizz-buzz-helper (- n 1)))]\n      [else (fizz-buzz-helper\
    \ (- n 1))]))\n  (fizz-buzz-helper n))\n", "  (cond\n    [(= n 0) 0]\n    [(=\
    \ n 1) 0]\n    [(= n 2) 0]\n    [(= n 3) 0]\n    [(= n 4) 0]\n    [(= n 5) 0]\n\
    \    [(= n 6) 0]\n    [(= n 7) 0]\n    [(= n 8) 0]\n    [(= n 9) 0]\n    [(= n\
    \ 10) 0]\n    [(= n 11) 0]\n    [(= n 12) 0]\n    [(= n 13) 0]\n    [(= n 14)\
    \ 0]\n    [(= n 15) 0]\n    [(= n 16) 0]\n    [(= n 17) 0]\n    [(= n 18) 0]\n\
    \    [(= n 19) 0]\n    [(= n 20) 0]\n    [(= n 21) 0]\n    [(= n 22) 0]\n    [(=\
    \ n 23) 0]\n    [(= n 24) 0]\n    [(= n 25) 0]\n    [(= n 26) 0]\n    [(= n 27)\
    \ 0]\n    [(= n 28) 0]\n    [(= n 29) 0]\n    [(= n 30) 0]\n    [(= n 31) 0]\n\
    \    [(= n 32) 0]\n    [(= n 33) 0]\n    [(= n 34) 0]\n    [(= n 35) 0]\n    [(=\
    \ n 36) 0]\n    [(= n 37) 0]\n    [(= n 38) 0]\n    [(= n 39) 0]\n    [(= n 40)\
    \ 0]\n    [(= n 41) 0]\n    [(= n 42) 0]\n    [(= n 43) 0]\n    [(= n 44) 0]\n\
    \    [(= n 45) 0]\n    [(= n 46) 0]\n    [(= n 47) 0]\n    [(= n 48) 0]\n    [(=\
    \ n 49) 0]\n    [(= n 50) 0]\n    [(= n 51) 0]\n    [(= n 52) 0]\n    [(= n 53)\
    \ 0]\n    [(= n 54) 0]\n    [(= n 55) 0]\n    [(=", "  (define (fizz_buzz_helper\
    \ n acc)\n    (cond ((= n 0) acc)\n          ((and (or (= (modulo n 11) 0) (=\
    \ (modulo n 13) 0)) (= (modulo n 10) 7)) (fizz_buzz_helper (- n 1) (+ acc 1)))\n\
    \          (else (fizz_buzz_helper (- n 1) acc))))\n  (fizz_buzz_helper n 0))\n",
  "  (define (fizz_buzz_helper n acc)\n    (cond\n      [(= n 0) acc]\n      [(or\
    \ (= (modulo n 11) 0) (= (modulo n 13) 0)) (fizz_buzz_helper (- n 1) (+ acc (count-7\
    \ n)))]\n      [else (fizz_buzz_helper (- n 1) acc)]))\n  (fizz_buzz_helper n\
    \ 0))\n", "  (cond\n    [(= n 0) 0]\n    [(or (divisible? n 11) (divisible? n\
    \ 13)) (+ (sevens? n) (fizz_buzz (- n 1)))]\n    [else (fizz_buzz (- n 1))]))\n",
  "  (define (fizz_buzz_helper n acc)\n    (cond [(= n 0) acc]\n          [(or (=\
    \ (modulo n 11) 0) (= (modulo n 13) 0))\n           (fizz_buzz_helper (- n 1)\
    \ (+ acc (count-7 n)))]\n          [else (fizz_buzz_helper (- n 1) acc)]))\n \
    \ (fizz_buzz_helper n 0))\n", "  (define (count-7s n)\n    (cond ((= n 0) 0)\n\
    \          ((= (remainder n 10) 7) (+ 1 (count-7s (quotient n 10))))\n       \
    \   (else (count-7s (quotient n 10)))))\n  (define (fizz-buzz-helper n acc)\n\
    \    (cond ((= n 0) acc)\n          ((or (= (remainder n 11) 0) (= (remainder\
    \ n 13) 0)) (fizz-buzz-helper (- n 1) (+ acc (count-7s n))))\n          (else\
    \ (fizz-buzz-helper (- n 1) acc))))\n  (fizz-buzz-helper n 0))\n", "  (define\
    \ (fizz_buzz_helper n acc)\n    (cond\n      [(= n 0) acc]\n      [(or (= (modulo\
    \ n 11) 0) (= (modulo n 13) 0)) (fizz_buzz_helper (- n 1) (+ acc (count-7 n)))]\n\
    \      [else (fizz_buzz_helper (- n 1) acc)]))\n  (fizz_buzz_helper n 0))\n",
  "  (define (fizz_buzz_helper n acc)\n    (cond\n      [(= n 0) acc]\n      [(or\
    \ (zero? (modulo n 11)) (zero? (modulo n 13)))\n       (fizz_buzz_helper (- n\
    \ 1) (+ acc (count-7s n)))]\n      [else (fizz_buzz_helper (- n 1) acc)]))\n \
    \ (fizz_buzz_helper n 0))\n", "  (define (fizz_buzz_helper n count)\n    (cond\n\
    \      [(= n 0) count]\n      [(or (= (modulo n 11) 0) (= (modulo n 13) 0)) (fizz_buzz_helper\
    \ (- n 1) (+ count (count-7s (number->string n))))]\n      [else (fizz_buzz_helper\
    \ (- n 1) count)]))\n  (fizz_buzz_helper n 0))\n", "  (define (fizz_buzz_helper\
    \ n acc)\n    (cond\n      [(= n 0) acc]\n      [(and (or (= (modulo n 11) 0)\
    \ (= (modulo n 13) 0)) (= (modulo n 10) 7)) (fizz_buzz_helper (- n 1) (+ acc 1))]\n\
    \      [else (fizz_buzz_helper (- n 1) acc)]))\n  (fizz_buzz_helper n 0))\n",
  "  (define (fizz_buzz_helper n count)\n    (cond ((= n 0) count)\n          ((=\
    \ (modulo n 11) 0) (fizz_buzz_helper (- n 1) (+ count (count_7 n))))\n       \
    \   ((= (modulo n 13) 0) (fizz_buzz_helper (- n 1) (+ count (count_7 n))))\n \
    \         (else (fizz_buzz_helper (- n 1) count))))\n  (fizz_buzz_helper n 0))\n",
  "  (define (fizz_buzz_helper n acc)\n    (cond\n      [(= n 0) acc]\n      [(or\
    \ (= (modulo n 11) 0) (= (modulo n 13) 0)) (fizz_buzz_helper (- n 1) (+ acc (count-7\
    \ n)))]\n      [else (fizz_buzz_helper (- n 1) acc)]))\n  (fizz_buzz_helper n\
    \ 0))\n", "  (define (fizz_buzz_helper n acc)\n    (cond\n      [(= n 0) acc]\n\
    \      [(and (or (= (modulo n 11) 0) (= (modulo n 13) 0)) (= (modulo n 10) 7))\
    \ (fizz_buzz_helper (- n 1) (+ acc 1))]\n      [else (fizz_buzz_helper (- n 1)\
    \ acc)]))\n  (fizz_buzz_helper n 0))\n", "  (define (fizz_buzz_helper n acc)\n\
    \    (cond [(= n 0) acc]\n          [(or (= (modulo n 11) 0) (= (modulo n 13)\
    \ 0)) (fizz_buzz_helper (- n 1) (+ acc (count-7 n)))]\n          [else (fizz_buzz_helper\
    \ (- n 1) acc)]))\n  (fizz_buzz_helper n 0))\n", "  (for/sum ([i (in-range n)])\n\
    \    (if (or (zero? (modulo i 11)) (zero? (modulo i 13)))\n        (count 7 (number->string\
    \ i))\n        0)))\n", "  (cond\n    [(= n 0) 0]\n    [(or (= (modulo n 11) 0)\
    \ (= (modulo n 13) 0)) (+ (count-7 (number->string n)) (fizz_buzz (- n 1)))]\n\
    \    [else (fizz_buzz (- n 1))]))\n", "  (cond\n    [(= n 0) 0]\n    [(= (modulo\
    \ n 11) 0) (+ 1 (fizz_buzz (- n 1)))]\n    [(= (modulo n 13) 0) (+ 1 (fizz_buzz\
    \ (- n 1)))]\n    [else (fizz_buzz (- n 1))]))\n", "  (define (fizz_buzz_helper\
    \ n acc)\n    (cond\n      [(= n 0) acc]\n      [(or (= (modulo n 11) 0) (= (modulo\
    \ n 13) 0)) (fizz_buzz_helper (- n 1) (+ acc (count-7s n)))]\n      [else (fizz_buzz_helper\
    \ (- n 1) acc)]))\n  (fizz_buzz_helper n 0))\n", "  (define (fizz_buzz_helper\
    \ n acc)\n    (cond ((= n 0) acc)\n          ((or (= (modulo n 11) 0) (= (modulo\
    \ n 13) 0))\n           (fizz_buzz_helper (- n 1) (+ acc (count-7 n))))\n    \
    \      (else (fizz_buzz_helper (- n 1) acc))))\n  (fizz_buzz_helper n 0))\n",
  "  (define (fizz_buzz_helper n acc)\n    (cond\n      [(= n 0) acc]\n      [(and\
    \ (= (modulo n 11) 0) (= (modulo n 13) 0)) (fizz_buzz_helper (- n 1) (+ acc (count-7\
    \ n)))]\n      [(or (= (modulo n 11) 0) (= (modulo n 13) 0)) (fizz_buzz_helper\
    \ (- n 1) acc)]\n      [else (fizz_buzz_helper (- n 1) acc)]))\n  (fizz_buzz_helper\
    \ n 0))\n", "  (define (fizz_buzz_helper n acc)\n    (cond ((&lt; n 1) acc)\n\
    \          ((or (= (modulo n 11) 0) (= (modulo n 13) 0))\n           (fizz_buzz_helper\
    \ (- n 1) (+ acc (count-7 n))))\n          (else (fizz_buzz_helper (- n 1) acc))))\n\
    \  (fizz_buzz_helper n 0))\n", "  (define (fizz_buzz_helper n acc)\n    (cond\n\
    \      [(= n 0) acc]\n      [(and (or (= (modulo n 11) 0) (= (modulo n 13) 0))\
    \ (= (modulo n 10) 7)) (fizz_buzz_helper (- n 1) (+ acc 1))]\n      [else (fizz_buzz_helper\
    \ (- n 1) acc)]))\n  (fizz_buzz_helper n 0))\n", "  (define (fizz_buzz_helper\
    \ n acc)\n    (cond\n      [(= n 0) acc]\n      [(or (= (modulo n 11) 0) (= (modulo\
    \ n 13) 0)) (fizz_buzz_helper (- n 1) (+ acc (count-7 n)))]\n      [else (fizz_buzz_helper\
    \ (- n 1) acc)]))\n  (fizz_buzz_helper n 0))\n", "  (define (fizz_buzz_helper\
    \ n acc)\n    (cond\n      [(= n 0) acc]\n      [(or (= (modulo n 11) 0) (= (modulo\
    \ n 13) 0)) (fizz_buzz_helper (- n 1) (+ acc (count-7 n)))]\n      [else (fizz_buzz_helper\
    \ (- n 1) acc)]))\n  (fizz_buzz_helper n 0))\n", "  (define (fizz_buzz_helper\
    \ n acc)\n    (cond\n      [(= n 0) acc]\n      [(or (zero? (modulo n 11)) (zero?\
    \ (modulo n 13)))\n       (fizz_buzz_helper (- n 1) (+ acc (count-7s n)))]\n \
    \     [else (fizz_buzz_helper (- n 1) acc)]))\n  (fizz_buzz_helper n 0))\n", " \
    \ (define (fizz_buzz_iter i count)\n    (cond\n      [(= i n) count]\n      [(and\
    \ (or (= (modulo i 11) 0) (= (modulo i 13) 0)) (= (modulo i 10) 7)) (fizz_buzz_iter\
    \ (+ i 1) (+ count 1))]\n      [else (fizz_buzz_iter (+ i 1) count)]))\n  (fizz_buzz_iter\
    \ 0 0))\n", "  (let loop ([i 1] [count 0])\n    (cond\n      [(= i n) count]\n\
    \      [(or (= (modulo i 11) 0) (= (modulo i 13) 0))\n       (loop (+ i 1) (+\
    \ count (count-7 i)))]\n      [else (loop (+ i 1) count)])))\n", "  (define (fizz_buzz_helper\
    \ n acc)\n    (cond\n      [(= n 0) acc]\n      [(or (= (modulo n 11) 0) (= (modulo\
    \ n 13) 0))\n       (fizz_buzz_helper (- n 1) (+ acc (count-7 n)))]\n      [else\
    \ (fizz_buzz_helper (- n 1) acc)]))\n  (fizz_buzz_helper n 0))\n", "  (define\
    \ (fizz_buzz_helper n acc)\n    (cond ((= n 0) acc)\n          ((and (or (= (modulo\
    \ n 11) 0) (= (modulo n 13) 0)) (= (modulo n 10) 7))\n           (fizz_buzz_helper\
    \ (- n 1) (+ acc 1)))\n          (else (fizz_buzz_helper (- n 1) acc))))\n  (fizz_buzz_helper\
    \ n 0))\n", "  (define (count-7s n)\n    (if (= n 0)\n        0\n        (+ (if\
    \ (= (modulo n 10) 7) 1 0)\n           (count-7s (quotient n 10)))))\n  (define\
    \ (fizz-buzz-helper n acc)\n    (if (= n 0)\n        acc\n        (if (or (= (modulo\
    \ n 11) 0) (= (modulo n 13) 0))\n            (fizz-buzz-helper (- n 1) (+ acc\
    \ (count-7s n)))\n            (fizz-buzz-helper (- n 1) acc))))\n  (fizz-buzz-helper\
    \ n 0))\n", "  (define (fizz_buzz_helper n acc)\n    (if (= n 0)\n        acc\n\
    \        (if (or (zero? (modulo n 11)) (zero? (modulo n 13)))\n            (fizz_buzz_helper\
    \ (- n 1) (+ acc (count-digits n 7)))\n            (fizz_buzz_helper (- n 1) acc))))\n\
    \  (fizz_buzz_helper n 0))\n", "  (cond\n    [(= n 0) 0]\n    [(or (zero? (modulo\
    \ n 11)) (zero? (modulo n 13)))\n     (+ (if (zero? (modulo n 7)) 1 0) (fizz_buzz\
    \ (- n 1)))]\n    [else (fizz_buzz (- n 1))]))\n", "  (define (divisible? n x)\n\
    \    (= (remainder n x) 0))\n  (define (count-7s n)\n    (cond\n      [(= n 0)\
    \ 0]\n      [(= (remainder n 10) 7) 1]\n      [else (count-7s (quotient n 10))]))\n\
    \  (define (loop i acc)\n    (cond\n      [(= i n) acc]\n      [(or (divisible?\
    \ i 11) (divisible? i 13)) (loop (+ i 1) (+ acc (count-7s i)))]\n      [else (loop\
    \ (+ i 1) acc)]))\n  (loop 0 0))\n", "  (define (count-7s n)\n    (cond ((= n\
    \ 0) 0)\n          ((= (remainder n 10) 7) (+ 1 (count-7s (quotient n 10))))\n\
    \          (else (count-7s (quotient n 10)))))\n  (define (fizz-buzz-helper n\
    \ acc)\n    (cond ((= n 0) acc)\n          ((or (= (remainder n 11) 0) (= (remainder\
    \ n 13) 0)) (fizz-buzz-helper (- n 1) (+ acc (count-7s n))))\n          (else\
    \ (fizz-buzz-helper (- n 1) acc))))\n  (fizz-buzz-helper n 0))\n", "  (define\
    \ (fizz_buzz_helper n acc)\n    (if (= n 0)\n        acc\n        (if (or (zero?\
    \ (modulo n 11)) (zero? (modulo n 13)))\n            (fizz_buzz_helper (- n 1)\
    \ (+ acc (count-7 n)))\n            (fizz_buzz_helper (- n 1) acc))))\n  (fizz_buzz_helper\
    \ n 0))\n", "  (define (fizz_buzz_helper n acc)\n    (cond\n      [(= n 0) acc]\n\
    \      [(or (= (modulo n 11) 0) (= (modulo n 13) 0))\n       (fizz_buzz_helper\
    \ (- n 1) (+ (count-digits n 7) acc))]\n      [else (fizz_buzz_helper (- n 1)\
    \ acc)]))\n  (fizz_buzz_helper n 0))\n", "  (define (fizz_buzz_helper n count)\n\
    \    (cond\n      [(= n 0) count]\n      [(or (= (modulo n 11) 0) (= (modulo n\
    \ 13) 0)) (fizz_buzz_helper (- n 1) (+ count (count-7 n)))]\n      [else (fizz_buzz_helper\
    \ (- n 1) count)]))\n  (fizz_buzz_helper n 0))\n", "  (cond\n    [(= n 0) 0]\n\
    \    [(= n 1) 0]\n    [(= n 2) 0]\n    [(= n 3) 0]\n    [(= n 4) 0]\n    [(= n\
    \ 5) 0]\n    [(= n 6) 0]\n    [(= n 7) 1]\n    [(= n 8) 1]\n    [(= n 9) 1]\n\
    \    [(= n 10) 1]\n    [(= n 11) 1]\n    [(= n 12) 1]\n    [(= n 13) 1]\n    [(=\
    \ n 14) 1]\n    [(= n 15) 1]\n    [(= n 16) 1]\n    [(= n 17) 1]\n    [(= n 18)\
    \ 1]\n    [(= n 19) 1]\n    [(= n 20) 1]\n    [(= n 21) 1]\n    [(= n 22) 1]\n\
    \    [(= n 23) 1]\n    [(= n 24) 1]\n    [(= n 25) 1]\n    [(= n 26) 1]\n    [(=\
    \ n 27) 1]\n    [(= n 28) 1]\n    [(= n 29) 1]\n    [(= n 30) 1]\n    [(= n 31)\
    \ 1]\n    [(= n 32) 1]\n    [(= n 33) 1]\n    [(= n 34) 1]\n    [(= n 35) 1]\n\
    \    [(= n 36) 1]\n    [(= n 37) 1]\n    [(= n 38) 1]\n    [(= n 39) 1]\n    [(=\
    \ n 40) 1]\n    [(= n 41) 1]\n    [(= n 42) 1]\n    [(= n 43) 1]\n    [(= n 44)\
    \ 1]\n    [(= n 45) 1]\n    [(= n 46) 1]\n    [(= n 47) 1]\n    [(= n 48) 1]\n\
    \    [(= n 49) 1]\n    [(= n 50) 1]\n    [(= n 51) 1]\n    [(= n 52) 1]\n    [(=\
    \ n 53) 1]\n    [(= n 54) 1]\n    [(= n 55) 1]\n    [(=", "  (define (fizz_buzz_helper\
    \ n acc)\n    (cond\n      [(= n 0) acc]\n      [(or (= (modulo n 11) 0) (= (modulo\
    \ n 13) 0))\n       (fizz_buzz_helper (- n 1) (+ acc (count-occurrences 7 n)))]\n\
    \      [else (fizz_buzz_helper (- n 1) acc)]))\n  (fizz_buzz_helper n 0))\n",
  "  (if (< n 11)\n      0\n      (if (or (zero? (modulo n 11)) (zero? (modulo n 13)))\n\
    \          (+ (if (zero? (modulo n 7)) 1 0) (fizz_buzz (- n 1)))\n          (fizz_buzz\
    \ (- n 1)))))\n", "  (define (fizz_buzz_helper n acc)\n    (cond ((= n 0) acc)\n\
    \          ((or (= (modulo n 11) 0) (= (modulo n 13) 0))\n           (fizz_buzz_helper\
    \ (- n 1) (+ acc (count-7 n))))\n          (else (fizz_buzz_helper (- n 1) acc))))\n\
    \  (fizz_buzz_helper n 0))\n", "  (define (fizz_buzz_helper n acc)\n    (cond\n\
    \      [(= n 0) acc]\n      [(or (= (modulo n 11) 0) (= (modulo n 13) 0)) (fizz_buzz_helper\
    \ (- n 1) (+ acc (count-7 n)))]\n      [else (fizz_buzz_helper (- n 1) acc)]))\n\
    \  (fizz_buzz_helper n 0))\n", "  (define (fizz_buzz_iter n count)\n    (cond\n\
    \      [(= n 0) count]\n      [(or (= (modulo n 11) 0) (= (modulo n 13) 0)) (fizz_buzz_iter\
    \ (- n 1) (+ count (count-7 (number->string n))))]\n      [else (fizz_buzz_iter\
    \ (- n 1) count)]))\n  (fizz_buzz_iter n 0))\n", "  (define (fizz_buzz_iter n\
    \ acc)\n    (cond [(= n 0) acc]\n          [(or (= (modulo n 11) 0) (= (modulo\
    \ n 13) 0)) (fizz_buzz_iter (- n 1) (+ acc (count-7s n)))]\n          [else (fizz_buzz_iter\
    \ (- n 1) acc)]))\n  (fizz_buzz_iter n 0))\n", "  (define (fizz_buzz_helper n\
    \ acc)\n    (cond\n      [(= n 0) acc]\n      [(or (= (modulo n 11) 0) (= (modulo\
    \ n 13) 0)) (fizz_buzz_helper (- n 1) (+ acc (count-7 n)))]\n      [else (fizz_buzz_helper\
    \ (- n 1) acc)]))\n  (fizz_buzz_helper n 0))\n", "  (define (fizz_buzz_helper\
    \ n acc)\n    (cond\n      [(= n 0) acc]\n      [(or (zero? (modulo n 11)) (zero?\
    \ (modulo n 13)))\n       (fizz_buzz_helper (- n 1) (+ acc (count-7s n)))]\n \
    \     [else (fizz_buzz_helper (- n 1) acc)]))\n  (fizz_buzz_helper n 0))\n", " \
    \ (cond\n    [(= n 0) 0]\n    [(= (modulo n 11) 0) (+ 1 (fizz_buzz (- n 1)))]\n\
    \    [(= (modulo n 13) 0) (+ 1 (fizz_buzz (- n 1)))]\n    [else (fizz_buzz (-\
    \ n 1))]))\n", "  (define (fizz_buzz_helper n acc)\n    (cond ((= n 0) acc)\n\
    \          ((or (= (modulo n 11) 0) (= (modulo n 13) 0))\n           (fizz_buzz_helper\
    \ (- n 1) (+ acc (count-sevens n))))\n          (else (fizz_buzz_helper (- n 1)\
    \ acc))))\n  (fizz_buzz_helper n 0))\n", "  (cond\n    [(= n 0) 0]\n    [(or (=\
    \ (modulo n 11) 0) (= (modulo n 13) 0))\n     (+ (count-7s (number->string n))\
    \ (fizz_buzz (- n 1)))]\n    [else (fizz_buzz (- n 1))]))\n", "  (let loop ([i\
    \ 0] [count 0])\n    (cond\n      [(= i n) count]\n      [(or (zero? (modulo i\
    \ 11)) (zero? (modulo i 13)))\n       (loop (+ i 1) (+ count (count-7 (number->string\
    \ i))))]\n      [else (loop (+ i 1) count)])))\n", "  (define (fizz_buzz_helper\
    \ n acc)\n    (cond\n      [(= n 0) acc]\n      [(or (= (modulo n 11) 0) (= (modulo\
    \ n 13) 0)) (fizz_buzz_helper (- n 1) (+ acc (count_seven n)))]\n      [else (fizz_buzz_helper\
    \ (- n 1) acc)]))\n  (fizz_buzz_helper n 0))\n", "  (define (count-7s n)\n   \
    \ (cond ((= n 0) 0)\n          ((= (remainder n 10) 7) (+ 1 (count-7s (quotient\
    \ n 10))))\n          (else (count-7s (quotient n 10)))))\n  (define (fizz-buzz-helper\
    \ n count)\n    (cond ((= n 0) count)\n          ((or (= (remainder n 11) 0) (=\
    \ (remainder n 13) 0)) (fizz-buzz-helper (- n 1) (+ count (count-7s n))))\n  \
    \        (else (fizz-buzz-helper (- n 1) count))))\n  (fizz-buzz-helper n 0))\n",
  "  (cond\n    [(= n 0) 0]\n    [(= (modulo n 11) 0) (+ 1 (fizz_buzz (- n 1)))]\n\
    \    [(= (modulo n 13) 0) (+ 1 (fizz_buzz (- n 1)))]\n    [else (fizz_buzz (-\
    \ n 1))]))\n", "  (cond\n    [(= n 0) 0]\n    [(or (= (modulo n 11) 0) (= (modulo\
    \ n 13) 0))\n     (+ (count-7s (quotient n 10)) (fizz_buzz (- n 1)))]\n    [else\
    \ (fizz_buzz (- n 1))]))\n", "  (define (fizz_buzz_helper n acc)\n    (cond\n\
    \      [(= n 0) acc]\n      [(or (= (modulo n 11) 0) (= (modulo n 13) 0))\n  \
    \     (fizz_buzz_helper (- n 1) (+ acc (count-7s n)))]\n      [else (fizz_buzz_helper\
    \ (- n 1) acc)]))\n  (fizz_buzz_helper n 0))\n", "  (define (fizz_buzz_helper\
    \ n acc)\n    (cond ((= n 0) acc)\n          ((or (= (modulo n 11) 0) (= (modulo\
    \ n 13) 0)) (fizz_buzz_helper (- n 1) (+ acc (count-7s n))))\n          (else\
    \ (fizz_buzz_helper (- n 1) acc))))\n  (fizz_buzz_helper n 0))\n", "  (cond\n\
    \    [(= n 0) 0]\n    [(= n 1) 0]\n    [(= n 2) 0]\n    [(= n 3) 0]\n    [(= n\
    \ 4) 0]\n    [(= n 5) 0]\n    [(= n 6) 0]\n    [(= n 7) 1]\n    [(= n 8) 1]\n\
    \    [(= n 9) 1]\n    [(= n 10) 1]\n    [(= n 11) 1]\n    [(= n 12) 1]\n    [(=\
    \ n 13) 1]\n    [(= n 14) 1]\n    [(= n 15) 1]\n    [(= n 16) 1]\n    [(= n 17)\
    \ 1]\n    [(= n 18) 1]\n    [(= n 19) 1]\n    [(= n 20) 1]\n    [(= n 21) 1]\n\
    \    [(= n 22) 1]\n    [(= n 23) 1]\n    [(= n 24) 1]\n    [(= n 25) 1]\n    [(=\
    \ n 26) 1]\n    [(= n 27) 1]\n    [(= n 28) 1]\n    [(= n 29) 1]\n    [(= n 30)\
    \ 1]\n    [(= n 31) 1]\n    [(= n 32) 1]\n    [(= n 33) 1]\n    [(= n 34) 1]\n\
    \    [(= n 35) 1]\n    [(= n 36) 1]\n    [(= n 37) 1]\n    [(= n 38) 1]\n    [(=\
    \ n 39) 1]\n    [(= n 40) 1]\n    [(= n 41) 1]\n    [(= n 42) 1]\n    [(= n 43)\
    \ 1]\n    [(= n 44) 1]\n    [(= n 45) 1]\n    [(= n 46) 1]\n    [(= n 47) 1]\n\
    \    [(= n 48) 1]\n    [(= n 49) 1]\n    [(= n 50) 1]\n    [(= n 51) 1]\n    [(=\
    \ n 52) 1]\n    [(= n 53) 1]\n    [(= n 54) 1]\n    [(= n 55) 1]\n    [(=", " \
    \ (cond\n    [(= n 0) 0]\n    [(or (= (modulo n 11) 0) (= (modulo n 13) 0))\n\
    \     (+ (fizz_buzz (- n 1))\n        (count-7s (number->string n)))]\n    [else\
    \ (fizz_buzz (- n 1))]))\n", "  (define (fizz_buzz_helper n acc)\n    (cond\n\
    \      [(= n 0) acc]\n      [(or (= (modulo n 11) 0) (= (modulo n 13) 0)) (fizz_buzz_helper\
    \ (- n 1) (+ acc (count-digits n 7)))]\n      [else (fizz_buzz_helper (- n 1)\
    \ acc)]))\n  (fizz_buzz_helper n 0))\n", "  (define (fizz_buzz_helper n acc)\n\
    \    (cond\n      [(= n 0) acc]\n      [(or (= (modulo n 11) 0) (= (modulo n 13)\
    \ 0)) (fizz_buzz_helper (- n 1) (+ acc (count-7 n)))]\n      [else (fizz_buzz_helper\
    \ (- n 1) acc)]))\n  (fizz_buzz_helper n 0))\n", "  (define (fizz_buzz_helper\
    \ n acc)\n    (cond\n      [(= n 0) acc]\n      [(or (= (modulo n 11) 0) (= (modulo\
    \ n 13) 0)) (fizz_buzz_helper (- n 1) (+ acc (count-7s n)))]\n      [else (fizz_buzz_helper\
    \ (- n 1) acc)]))\n  (fizz_buzz_helper n 0))\n", "  (define (count-7s n)\n   \
    \ (cond ((= n 0) 0)\n          ((= (remainder n 10) 7) 1)\n          (else (count-7s\
    \ (quotient n 10)))))\n  (define (fizz-buzz-helper n acc)\n    (cond ((= n 0)\
    \ acc)\n          ((or (= (remainder n 11) 0) (= (remainder n 13) 0)) (fizz-buzz-helper\
    \ (- n 1) (+ acc (count-7s n))))\n          (else (fizz-buzz-helper (- n 1) acc))))\n\
    \  (fizz-buzz-helper n 0))\n", "  (define (fizz_buzz_helper n acc)\n    (cond\n\
    \      [(= n 0) acc]\n      [(and (or (= (modulo n 11) 0) (= (modulo n 13) 0))\n\
    \            (member (modulo n 10) '(7)))\n       (fizz_buzz_helper (- n 1) (+\
    \ acc 1))]\n      [else (fizz_buzz_helper (- n 1) acc)]))\n  (fizz_buzz_helper\
    \ n 0))\n", "  (define (fizz_buzz_helper n acc)\n    (cond\n      [(= n 0) acc]\n\
    \      [(or (zero? (modulo n 11)) (zero? (modulo n 13)))\n       (fizz_buzz_helper\
    \ (- n 1) (+ acc (count-7s n)))]\n      [else (fizz_buzz_helper (- n 1) acc)]))\n\
    \  (fizz_buzz_helper n 0))\n", "  (define (fizz_buzz_helper n acc)\n    (cond\n\
    \      [(= n 0) acc]\n      [(or (zero? (modulo n 11)) (zero? (modulo n 13)))\n\
    \       (fizz_buzz_helper (- n 1) (+ acc (count-7s n)))]\n      [else (fizz_buzz_helper\
    \ (- n 1) acc)]))\n  (fizz_buzz_helper n 0))\n", "  (define (fizz_buzz_helper\
    \ n acc)\n    (cond ((= n 0) acc)\n          ((or (= (modulo n 11) 0) (= (modulo\
    \ n 13) 0))\n           (fizz_buzz_helper (- n 1) (+ acc (count-7 n))))\n    \
    \      (else (fizz_buzz_helper (- n 1) acc))))\n  (fizz_buzz_helper n 0))\n",
  "  (define (fizz_buzz_helper n acc)\n    (cond\n      [(= n 0) acc]\n      [(or\
    \ (= (modulo n 11) 0) (= (modulo n 13) 0)) (fizz_buzz_helper (- n 1) (+ acc (count-7\
    \ n)))]\n      [else (fizz_buzz_helper (- n 1) acc)]))\n  (fizz_buzz_helper n\
    \ 0))\n", "  (define (count-sevens n)\n    (cond\n      [(= n 0) 0]\n      [(=\
    \ (remainder n 10) 7) (+ 1 (count-sevens (quotient n 10)))]\n      [else (count-sevens\
    \ (quotient n 10))]))\n  (define (count-sevens-in-range n)\n    (cond\n      [(=\
    \ n 0) 0]\n      [(or (= (remainder n 11) 0) (= (remainder n 13) 0)) (+ (count-sevens\
    \ n) (count-sevens-in-range (- n 1)))]\n      [else (count-sevens-in-range (-\
    \ n 1))]))\n  (count-sevens-in-range n))\n", "  (define (fizz_buzz_helper n acc)\n\
    \    (cond\n      [(= n 0) acc]\n      [(and (or (= (modulo n 11) 0) (= (modulo\
    \ n 13) 0)) (= (modulo n 10) 7)) (fizz_buzz_helper (- n 1) (+ acc 1))]\n     \
    \ [else (fizz_buzz_helper (- n 1) acc)]))\n  (fizz_buzz_helper n 0))\n", "  (define\
    \ (count-7s n)\n    (cond ((= n 0) 0)\n          ((= (remainder n 10) 7) 1)\n\
    \          (else (count-7s (quotient n 10)))))\n  (define (fizz-buzz-helper n)\n\
    \    (cond ((= n 0) 0)\n          ((and (= (remainder n 11) 0) (= (remainder n\
    \ 13) 0)) (+ (count-7s n) (fizz-buzz-helper (- n 1))))\n          ((or (= (remainder\
    \ n 11) 0) (= (remainder n 13) 0)) (fizz-buzz-helper (- n 1)))\n          (else\
    \ (fizz-buzz-helper (- n 1)))))\n  (fizz-buzz-helper n))\n```\n\n### Problem 2\n\
    \n```racket\n#lang racket\n", "  (let loop ([i 0] [count 0])\n    (cond\n    \
    \  [(= i n) count]\n      [(or (= (modulo i 11) 0) (= (modulo i 13) 0))\n    \
    \   (loop (+ i 1)\n             (if (string-contains? (number->string i) \"7\"\
    )\n                 (+ count 1)\n                 count))]\n      [else (loop\
    \ (+ i 1) count)])))\n", "  (let loop ([i 0] [count 0])\n    (cond [(> i n) count]\n\
    \          [(or (zero? (modulo i 11)) (zero? (modulo i 13)))\n           (loop\
    \ (+ i 1) (+ count (count-7 i)))]\n          [else (loop (+ i 1) count)])))\n",
  "  (define (fizz_buzz_helper n acc)\n    (cond\n      [(= n 0) acc]\n      [(or\
    \ (= (modulo n 11) 0) (= (modulo n 13) 0)) (fizz_buzz_helper (- n 1) (+ acc (count-7\
    \ n)))]\n      [else (fizz_buzz_helper (- n 1) acc)]))\n  (fizz_buzz_helper n\
    \ 0))\n", "  (define (fizz_buzz_helper n acc)\n    (cond\n      [(= n 0) acc]\n\
    \      [(or (= (modulo n 11) 0) (= (modulo n 13) 0)) (fizz_buzz_helper (- n 1)\
    \ (+ acc (count-7s n)))]\n      [else (fizz_buzz_helper (- n 1) acc)]))\n  (fizz_buzz_helper\
    \ n 0))\n", "  (define (fizz_buzz_helper n acc)\n    (cond\n      [(= n 0) acc]\n\
    \      [(or (= (modulo n 11) 0) (= (modulo n 13) 0))\n       (fizz_buzz_helper\
    \ (- n 1) (+ acc (count-7 n)))]\n      [else (fizz_buzz_helper (- n 1) acc)]))\n\
    \  (fizz_buzz_helper n 0))\n", "  (define (fizz_buzz_helper n acc)\n    (cond\n\
    \      [(= n 0) acc]\n      [(and (or (= (modulo n 11) 0) (= (modulo n 13) 0))\n\
    \            (member 7 (string->list (number->string n))))\n       (fizz_buzz_helper\
    \ (- n 1) (+ acc 1))]\n      [else (fizz_buzz_helper (- n 1) acc)]))\n  (fizz_buzz_helper\
    \ n 0))\n", "  (define (count-7s n)\n    (cond\n      [(= n 0) 0]\n      [(= (remainder\
    \ n 10) 7) (+ 1 (count-7s (quotient n 10)))]\n      [else (count-7s (quotient\
    \ n 10))]))\n  (define (fizz-buzz-helper n)\n    (cond\n      [(= n 0) 0]\n  \
    \    [(or (= (remainder n 11) 0) (= (remainder n 13) 0)) (+ (count-7s n) (fizz-buzz-helper\
    \ (- n 1)))]\n      [else (fizz-buzz-helper (- n 1))]))\n  (fizz-buzz-helper n))\n",
  "  (cond\n    [(= n 0) 0]\n    [(= (modulo n 11) 0) (+ 1 (fizz_buzz (- n 1)))]\n\
    \    [(= (modulo n 13) 0) (+ 1 (fizz_buzz (- n 1)))]\n    [else (fizz_buzz (-\
    \ n 1))]))\n", "  (define (fizz_buzz_helper n acc)\n    (cond ((= n 0) acc)\n\
    \          ((or (= (modulo n 11) 0) (= (modulo n 13) 0)) (fizz_buzz_helper (-\
    \ n 1) (+ acc (count-7 n))))\n          (else (fizz_buzz_helper (- n 1) acc))))\n\
    \  (fizz_buzz_helper n 0))\n", "  (define (fizz_buzz_helper n count)\n    (cond\n\
    \      [(= n 0) count]\n      [(or (= (modulo n 11) 0) (= (modulo n 13) 0)) (fizz_buzz_helper\
    \ (- n 1) (+ count (count-7 n)))]\n      [else (fizz_buzz_helper (- n 1) count)]))\n\
    \  (fizz_buzz_helper n 0))\n", "  (define (fizz_buzz_helper n acc)\n    (cond\
    \ ((= n 0) acc)\n          ((or (= (modulo n 11) 0) (= (modulo n 13) 0))\n   \
    \        (fizz_buzz_helper (- n 1) (+ acc (count-7s n))))\n          (else (fizz_buzz_helper\
    \ (- n 1) acc))))\n  (fizz_buzz_helper n 0))\n", "  (define (fizz_buzz_helper\
    \ n acc)\n    (cond\n      [(= n 0) acc]\n      [(or (= (modulo n 11) 0) (= (modulo\
    \ n 13) 0))\n       (fizz_buzz_helper (- n 1) (+ acc (count-7s n)))]\n      [else\
    \ (fizz_buzz_helper (- n 1) acc)]))\n  (fizz_buzz_helper n 0))\n", "  (cond\n\
    \    [(= n 0) 0]\n    [(or (= (modulo n 11) 0) (= (modulo n 13) 0))\n     (+ (count-sevens\
    \ (number->string n)) (fizz_buzz (- n 1)))]\n    [else (fizz_buzz (- n 1))]))\n",
  "  (cond\n    [(= n 0) 0]\n    [(or (zero? (modulo n 11)) (zero? (modulo n 13)))\n\
    \     (+ (if (zero? (modulo n 7)) 1 0) (fizz_buzz (- n 1)))]\n    [else (fizz_buzz\
    \ (- n 1))]))\n", "  (define (fizz_buzz_iter n count)\n    (cond\n      [(= n\
    \ 0) count]\n      [(or (= (modulo n 11) 0) (= (modulo n 13) 0)) (fizz_buzz_iter\
    \ (- n 1) (+ count (count-7 n)))]\n      [else (fizz_buzz_iter (- n 1) count)]))\n\
    \  (fizz_buzz_iter n 0))\n", "  (define (count-7s n)\n    (cond ((= n 0) 0)\n\
    \          ((= (remainder n 10) 7) 1)\n          (else (count-7s (quotient n 10)))))\n\
    \  (define (fizz-buzz-helper n count)\n    (cond ((= n 0) count)\n          ((or\
    \ (= (remainder n 11) 0) (= (remainder n 13) 0)) (fizz-buzz-helper (- n 1) (+\
    \ count (count-7s n))))\n          (else (fizz-buzz-helper (- n 1) count))))\n\
    \  (fizz-buzz-helper n 0))\n", "  (define (fizz_buzz_iter n count)\n    (cond\
    \ ((= n 0) count)\n          ((= (modulo n 11) 0) (fizz_buzz_iter (- n 1) (+ count\
    \ (count-7 (modulo n 100)))))\n          ((= (modulo n 13) 0) (fizz_buzz_iter\
    \ (- n 1) (+ count (count-7 (modulo n 100)))))\n          (else (fizz_buzz_iter\
    \ (- n 1) count))))\n  (fizz_buzz_iter n 0))\n", "  (cond\n    [(= n 0) 0]\n \
    \   [(or (= (modulo n 11) 0) (= (modulo n 13) 0)) (+ (fizz_buzz (- n 1)) (count-occurrences\
    \ 7 n))]\n    [else (fizz_buzz (- n 1))]))\n", "  (define (fizz_buzz_helper n\
    \ acc)\n    (cond\n      [(= n 0) acc]\n      [(or (zero? (modulo n 11)) (zero?\
    \ (modulo n 13)))\n       (fizz_buzz_helper (- n 1) (+ acc (count-7s n)))]\n \
    \     [else (fizz_buzz_helper (- n 1) acc)]))\n  (fizz_buzz_helper n 0))\n", " \
    \ (define (fizz_buzz_iter n acc)\n    (cond [(= n 0) acc]\n          [(or (= (modulo\
    \ n 11) 0) (= (modulo n 13) 0))\n           (fizz_buzz_iter (- n 1) (+ acc (count-7\
    \ n)))]\n          [else (fizz_buzz_iter (- n 1) acc)]))\n  (fizz_buzz_iter n\
    \ 0))\n", "  (define (fizz_buzz_helper n acc)\n    (cond\n      [(= n 0) acc]\n\
    \      [(or (zero? (modulo n 11)) (zero? (modulo n 13)))\n       (fizz_buzz_helper\
    \ (- n 1) (+ acc (count-7s n)))]\n      [else (fizz_buzz_helper (- n 1) acc)]))\n\
    \  (fizz_buzz_helper n 0))\n", "  (define (fizz_buzz_helper n acc)\n    (cond\
    \ ((= n 0) acc)\n          ((and (or (= (modulo n 11) 0) (= (modulo n 13) 0))\
    \ (= (modulo n 10) 7))\n           (fizz_buzz_helper (- n 1) (+ acc 1)))\n   \
    \       (else (fizz_buzz_helper (- n 1) acc))))\n  (fizz_buzz_helper n 0))\n",
  "  (define (fizz_buzz_iter count)\n    (cond ((= count n) 0)\n          ((or (=\
    \ (modulo count 11) 0) (= (modulo count 13) 0))\n           (+ (count-7s (number->string\
    \ count))\n              (fizz_buzz_iter (+ count 1))))\n          (else (fizz_buzz_iter\
    \ (+ count 1)))))\n  (fizz_buzz_iter 0))\n", "  (define (fizz_buzz_helper n count)\n\
    \    (cond\n      [(= n 0) count]\n      [(or (= (modulo n 11) 0) (= (modulo n\
    \ 13) 0))\n       (fizz_buzz_helper (- n 1) (+ count (count-7 n)))]\n      [else\
    \ (fizz_buzz_helper (- n 1) count)]))\n  (fizz_buzz_helper n 0))\n", "  (define\
    \ (fizz_buzz_helper n acc)\n    (cond ((= n 0) acc)\n          ((and (or (= (modulo\
    \ n 11) 0) (= (modulo n 13) 0)) (= (modulo n 10) 7)) (fizz_buzz_helper (- n 1)\
    \ (+ acc 1)))\n          (else (fizz_buzz_helper (- n 1) acc))))\n  (fizz_buzz_helper\
    \ n 0))\n", "  (define (fizz_buzz_helper n)\n    (cond\n      [(= n 0) 0]\n  \
    \    [(= (modulo n 11) 0) (+ (count-7s (quotient n 10)) (fizz_buzz_helper (- n\
    \ 1)))]\n      [(= (modulo n 13) 0) (+ (count-7s (quotient n 10)) (fizz_buzz_helper\
    \ (- n 1)))]\n      [else (fizz_buzz_helper (- n 1))]))\n  (fizz_buzz_helper n))\n",
  "  (define (helper i count)\n    (cond ((= i n) count)\n          ((or (= (modulo\
    \ i 11) 0) (= (modulo i 13) 0))\n           (helper (+ i 1) (+ count (count-7\
    \ i))))\n          (else (helper (+ i 1) count))))\n  (helper 1 0))\n", "  (define\
    \ (fizz_buzz_helper n acc)\n    (cond [(= n 0) acc]\n          [(or (= (modulo\
    \ n 11) 0) (= (modulo n 13) 0)) (fizz_buzz_helper (- n 1) (+ acc (count_seven\
    \ n)))]\n          [else (fizz_buzz_helper (- n 1) acc)]))\n  (fizz_buzz_helper\
    \ n 0))\n", "  (define (fizz_buzz_helper n acc)\n    (cond\n      [(= n 0) acc]\n\
    \      [(or (= (modulo n 11) 0) (= (modulo n 13) 0)) (fizz_buzz_helper (- n 1)\
    \ (+ acc (count-7 n)))]\n      [else (fizz_buzz_helper (- n 1) acc)]))\n  (fizz_buzz_helper\
    \ n 0))\n", "  (define (fizz_buzz_helper n acc)\n    (cond\n      [(= n 0) acc]\n\
    \      [(or (= (modulo n 11) 0) (= (modulo n 13) 0)) (fizz_buzz_helper (- n 1)\
    \ (+ acc (count-7 n)))]\n      [else (fizz_buzz_helper (- n 1) acc)]))\n  (fizz_buzz_helper\
    \ n 0))\n", "  (define (fizz_buzz_helper n acc)\n    (cond ((= n 0) acc)\n   \
    \       ((and (= (modulo n 11) 0) (= (modulo n 13) 0))\n           (fizz_buzz_helper\
    \ (- n 1) (+ acc (count-7s n))))\n          ((= (modulo n 11) 0)\n           (fizz_buzz_helper\
    \ (- n 1) (+ acc (count-7s n))))\n          ((= (modulo n 13) 0)\n           (fizz_buzz_helper\
    \ (- n 1) (+ acc (count-7s n))))\n          (else (fizz_buzz_helper (- n 1) acc))))\n\
    \  (fizz_buzz_helper n 0))\n", "  (define (fizz_buzz_helper n count)\n    (cond\
    \ ((= n 0) count)\n          ((or (= (modulo n 11) 0) (= (modulo n 13) 0))\n \
    \          (fizz_buzz_helper (- n 1) (+ count (count-7s n))))\n          (else\
    \ (fizz_buzz_helper (- n 1) count))))\n  (fizz_buzz_helper n 0))\n", "  (cond\n\
    \    [(= n 0) 0]\n    [(= (modulo n 11) 0) (+ 1 (fizz_buzz (- n 1)))]\n    [(=\
    \ (modulo n 13) 0) (+ 1 (fizz_buzz (- n 1)))]\n    [else (fizz_buzz (- n 1))]))\n",
  "  (cond\n    [(= n 0) 0]\n    [(= (modulo n 11) 0) (+ 1 (fizz_buzz (- n 1)))]\n\
    \    [(= (modulo n 13) 0) (+ 1 (fizz_buzz (- n 1)))]\n    [else (fizz_buzz (-\
    \ n 1))]))\n", "  (cond\n    [(= n 0) 0]\n    [(or (= (modulo n 11) 0) (= (modulo\
    \ n 13) 0))\n     (+ (count-7s (quotient n 10)) (count-7s (modulo n 10)))]\n \
    \   [else (fizz_buzz (- n 1))]))\n", "  (define (fizz_buzz_helper n acc)\n   \
    \ (cond\n      [(= n 0) acc]\n      [(or (= (modulo n 11) 0) (= (modulo n 13)\
    \ 0)) (fizz_buzz_helper (- n 1) (+ acc (count-7s n)))]\n      [else (fizz_buzz_helper\
    \ (- n 1) acc)]))\n  (fizz_buzz_helper n 0))\n", "  (define (fizz_buzz_helper\
    \ n count)\n    (cond\n      [(= n 0) count]\n      [(or (= (modulo n 11) 0) (=\
    \ (modulo n 13) 0)) (fizz_buzz_helper (- n 1) (+ count (count-7s (number->string\
    \ n))))]\n      [else (fizz_buzz_helper (- n 1) count)]))\n  (fizz_buzz_helper\
    \ n 0))\n", "  (define (count-7s n)\n    (cond ((= n 0) 0)\n          ((= (remainder\
    \ n 10) 7) (+ 1 (count-7s (quotient n 10))))\n          (else (count-7s (quotient\
    \ n 10)))))\n  (define (fizz-buzz-helper n count)\n    (cond ((= n 0) count)\n\
    \          ((or (= (remainder n 11) 0) (= (remainder n 13) 0)) (fizz-buzz-helper\
    \ (- n 1) (+ count (count-7s n))))\n          (else (fizz-buzz-helper (- n 1)\
    \ count))))\n  (fizz-buzz-helper n 0))\n", "  (define (fizz_buzz_helper n acc)\n\
    \    (cond\n      [(= n 0) acc]\n      [(or (= (modulo n 11) 0) (= (modulo n 13)\
    \ 0)) (fizz_buzz_helper (- n 1) (+ acc (count-7s n)))]\n      [else (fizz_buzz_helper\
    \ (- n 1) acc)]))\n  (fizz_buzz_helper n 0))\n", "  (if (< n 7)\n      0\n   \
    \   (+ (if (or (zero? (modulo n 11)) (zero? (modulo n 13)))\n             (if\
    \ (zero? (modulo n 7))\n                 1\n                 0)\n            \
    \ 0)\n         (fizz_buzz (- n 1)))))\n", "  (define (fizz_buzz_helper n acc)\n\
    \    (cond [(= n 0) acc]\n          [(or (= (modulo n 11) 0) (= (modulo n 13)\
    \ 0)) (fizz_buzz_helper (- n 1) (+ acc (count-7s n)))]\n          [else (fizz_buzz_helper\
    \ (- n 1) acc)]))\n  (fizz_buzz_helper n 0))\n", "  (define (fizz_buzz_helper\
    \ n count)\n    (cond\n      [(= n 0) count]\n      [(or (= (modulo n 11) 0) (=\
    \ (modulo n 13) 0)) (fizz_buzz_helper (- n 1) (+ count (count-7 n)))]\n      [else\
    \ (fizz_buzz_helper (- n 1) count)]))\n  (fizz_buzz_helper n 0))\n", "  (define\
    \ (fizz_buzz_helper n acc)\n    (cond ((= n 0) acc)\n          ((or (= (modulo\
    \ n 11) 0) (= (modulo n 13) 0))\n           (fizz_buzz_helper (- n 1) (+ acc (count-7\
    \ n))))\n          (else (fizz_buzz_helper (- n 1) acc))))\n  (fizz_buzz_helper\
    \ n 0))\n", "  (define (fizz_buzz_helper n acc)\n    (cond\n      [(= n 0) acc]\n\
    \      [(or (= (modulo n 11) 0) (= (modulo n 13) 0)) (fizz_buzz_helper (- n 1)\
    \ (+ acc (count-7s n)))]\n      [else (fizz_buzz_helper (- n 1) acc)]))\n  (fizz_buzz_helper\
    \ n 0))\n", "  (define (fizz_buzz_helper n acc)\n    (cond [(= n 0) acc]\n   \
    \       [(and (or (= (modulo n 11) 0) (= (modulo n 13) 0))\n                (string-contains?\
    \ (number->string n) \"7\"))\n           (fizz_buzz_helper (- n 1) (+ acc 1))]\n\
    \          [else (fizz_buzz_helper (- n 1) acc)]))\n  (fizz_buzz_helper n 0))\n",
  "  (define (fizz_buzz_helper n acc)\n    (cond\n      [(= n 0) acc]\n      [(or\
    \ (= (modulo n 11) 0) (= (modulo n 13) 0)) (fizz_buzz_helper (- n 1) (+ acc (count-7s\
    \ n)))]\n      [else (fizz_buzz_helper (- n 1) acc)]))\n  (fizz_buzz_helper n\
    \ 0))\n", "  (define (fizz_buzz_helper n acc)\n    (cond\n      [(= n 0) acc]\n\
    \      [(or (= (modulo n 11) 0) (= (modulo n 13) 0)) (fizz_buzz_helper (- n 1)\
    \ (+ acc (count-occurrences 7 n)))]\n      [else (fizz_buzz_helper (- n 1) acc)]))\n\
    \  (fizz_buzz_helper n 0))\n", "  (define (fizz_buzz_helper n count)\n    (cond\
    \ ((= n 0) count)\n          ((or (= (modulo n 11) 0) (= (modulo n 13) 0)) (fizz_buzz_helper\
    \ (- n 1) (+ count (count-7 n))))\n          (else (fizz_buzz_helper (- n 1) count))))\n\
    \  (fizz_buzz_helper n 0))\n", "  (define (fizz_buzz_helper n acc)\n    (cond\n\
    \      [(= n 0) acc]\n      [(or (= (modulo n 11) 0) (= (modulo n 13) 0)) (fizz_buzz_helper\
    \ (- n 1) (+ acc (count-7 n)))]\n      [else (fizz_buzz_helper (- n 1) acc)]))\n\
    \  (fizz_buzz_helper n 0))\n", "  (define (fizz_buzz_helper n acc)\n    (cond\n\
    \      [(= n 0) acc]\n      [(and (or (= (modulo n 11) 0) (= (modulo n 13) 0))\
    \ (= (modulo n 10) 7)) (fizz_buzz_helper (- n 1) (+ acc 1))]\n      [else (fizz_buzz_helper\
    \ (- n 1) acc)]))\n  (fizz_buzz_helper n 0))\n", "  (define (fizz_buzz_helper\
    \ n acc)\n    (cond\n      [(= n 0) acc]\n      [(and (or (= (modulo n 11) 0)\
    \ (= (modulo n 13) 0)) (= (modulo n 10) 7)) (fizz_buzz_helper (- n 1) (+ acc 1))]\n\
    \      [else (fizz_buzz_helper (- n 1) acc)]))\n  (fizz_buzz_helper n 0))\n",
  "  (define (fizz_buzz_helper n count)\n    (cond ((= n 0) count)\n          ((or\
    \ (= (modulo n 11) 0) (= (modulo n 13) 0))\n           (fizz_buzz_helper (- n\
    \ 1) (+ count (count-sevens n))))\n          (else (fizz_buzz_helper (- n 1) count))))\n\
    \  (fizz_buzz_helper n 0))\n", "  (define (fizz_buzz_helper n acc)\n    (cond\n\
    \      [(= n 0) acc]\n      [(or (= (modulo n 11) 0) (= (modulo n 13) 0)) (fizz_buzz_helper\
    \ (- n 1) (+ acc (count-7s n)))]\n      [else (fizz_buzz_helper (- n 1) acc)]))\n\
    \  (fizz_buzz_helper n 0))\n", "  (define (fizz_buzz_helper n acc)\n    (cond\n\
    \      [(= n 0) acc]\n      [(and (or (= (modulo n 11) 0) (= (modulo n 13) 0))\n\
    \            (= (modulo n 10) 7)) (fizz_buzz_helper (- n 1) (+ acc 1))]\n    \
    \  [else (fizz_buzz_helper (- n 1) acc)]))\n  (fizz_buzz_helper n 0))\n", "  (define\
    \ (fizz_buzz_helper n acc)\n    (cond\n      [(= n 0) acc]\n      [(or (= (modulo\
    \ n 11) 0) (= (modulo n 13) 0)) (fizz_buzz_helper (- n 1) (+ acc (count-7 n)))]\n\
    \      [else (fizz_buzz_helper (- n 1) acc)]))\n  (fizz_buzz_helper n 0))\n",
  "  (define (fizz_buzz_helper n acc)\n    (cond\n      [(= n 0) acc]\n      [(or\
    \ (= (modulo n 11) 0) (= (modulo n 13) 0))\n       (fizz_buzz_helper (- n 1) (+\
    \ acc (count-7s n)))]\n      [else (fizz_buzz_helper (- n 1) acc)]))\n  (fizz_buzz_helper\
    \ n 0))\n", "  (define (fizz_buzz_helper n acc)\n    (cond\n      [(= n 0) acc]\n\
    \      [(or (= (modulo n 11) 0) (= (modulo n 13) 0)) (fizz_buzz_helper (- n 1)\
    \ (+ acc (count-7s n)))]\n      [else (fizz_buzz_helper (- n 1) acc)]))\n  (fizz_buzz_helper\
    \ n 0))\n", "  (define (fizz_buzz_helper n acc)\n    (cond\n      [(= n 0) acc]\n\
    \      [(or (= (modulo n 11) 0) (= (modulo n 13) 0))\n       (fizz_buzz_helper\
    \ (- n 1) (+ (count-digits n 7) acc))]\n      [else (fizz_buzz_helper (- n 1)\
    \ acc)]))\n  (fizz_buzz_helper n 0))\n", "  (define (fizz_buzz_helper n acc)\n\
    \    (cond\n      [(= n 0) acc]\n      [(or (= (modulo n 11) 0) (= (modulo n 13)\
    \ 0)) (fizz_buzz_helper (- n 1) (+ acc (count-7s n)))]\n      [else (fizz_buzz_helper\
    \ (- n 1) acc)]))\n  (fizz_buzz_helper n 0))\n", "  (cond\n    [(= n 0) 0]\n \
    \   [(or (= (modulo n 11) 0) (= (modulo n 13) 0))\n     (+ (count-7 (number->string\
    \ n)) (fizz_buzz (- n 1)))]\n    [else (fizz_buzz (- n 1))]))\n", "  (let loop\
    \ ([i 0] [count 0])\n    (cond [(= i n) count]\n          [(or (zero? (modulo\
    \ i 11)) (zero? (modulo i 13)))\n           (loop (+ i 1) (if (zero? (modulo i\
    \ 7)) (+ count 1) count))]\n          [else (loop (+ i 1) count)])))\n", "  (cond\n\
    \    [(= n 0) 0]\n    [(or (zero? (modulo n 11)) (zero? (modulo n 13)))\n    \
    \ (+ (if (zero? (modulo n 7)) 1 0) (fizz_buzz (- n 1)))]\n    [else (fizz_buzz\
    \ (- n 1))]))\n", "  (define (fizz_buzz_iter n count)\n    (cond\n      [(= n\
    \ 0) count]\n      [(or (= (modulo n 11) 0) (= (modulo n 13) 0)) (fizz_buzz_iter\
    \ (- n 1) (+ count (count-7 (number->string n))))]\n      [else (fizz_buzz_iter\
    \ (- n 1) count)]))\n  (fizz_buzz_iter n 0))\n", "  (cond\n    [(= n 0) 0]\n \
    \   [(or (= (modulo n 11) 0) (= (modulo n 13) 0)) (+ (count-7 (number->string\
    \ n)) (fizz_buzz (- n 1)))]\n    [else (fizz_buzz (- n 1))]))\n", "  (define (fizz_buzz_helper\
    \ n acc)\n    (cond\n      [(= n 0) acc]\n      [(and (or (= (modulo n 11) 0)\
    \ (= (modulo n 13) 0)) (= (modulo n 10) 7)) (fizz_buzz_helper (- n 1) (+ acc 1))]\n\
    \      [else (fizz_buzz_helper (- n 1) acc)]))\n  (fizz_buzz_helper n 0))\n",
  "  (define (fizz_buzz_helper n acc)\n    (cond\n      [(= n 0) acc]\n      [(and\
    \ (or (= (modulo n 11) 0) (= (modulo n 13) 0)) (= (modulo n 10) 7)) (fizz_buzz_helper\
    \ (- n 1) (+ acc 1))]\n      [else (fizz_buzz_helper (- n 1) acc)]))\n  (fizz_buzz_helper\
    \ n 0))\n", "  (define (fizz_buzz_helper n acc)\n    (cond\n      [(= n 0) acc]\n\
    \      [(or (= (modulo n 11) 0) (= (modulo n 13) 0)) (fizz_buzz_helper (- n 1)\
    \ (+ acc (count-digits n 7)))]\n      [else (fizz_buzz_helper (- n 1) acc)]))\n\
    \  (fizz_buzz_helper n 0))\n", "  (define (fizz_buzz_helper n acc)\n    (cond\n\
    \      [(= n 0) acc]\n      [(or (= (modulo n 11) 0) (= (modulo n 13) 0)) (fizz_buzz_helper\
    \ (- n 1) (+ acc (count-7s n)))]\n      [else (fizz_buzz_helper (- n 1) acc)]))\n\
    \  (fizz_buzz_helper n 0))\n", "  (define (fizz_buzz_iter n acc)\n    (cond\n\
    \      [(= n 0) acc]\n      [(or (= (modulo n 11) 0) (= (modulo n 13) 0)) (fizz_buzz_iter\
    \ (- n 1) (+ acc (count-7 n)))]\n      [else (fizz_buzz_iter (- n 1) acc)]))\n\
    \  (fizz_buzz_iter n 0))\n", "  (define (fizz_buzz_iter n count)\n    (cond\n\
    \      [(= n 0) count]\n      [(or (= (modulo n 11) 0) (= (modulo n 13) 0)) (fizz_buzz_iter\
    \ (- n 1) (+ count (count-7s n)))]\n      [else (fizz_buzz_iter (- n 1) count)]))\n\
    \  (fizz_buzz_iter n 0))\n", "  (cond\n    [(= n 0) 0]\n    [(or (= (modulo n\
    \ 11) 0) (= (modulo n 13) 0)) (+ (fizz_buzz (- n 1)) (count-7 (number->string\
    \ n)))]\n    [else (fizz_buzz (- n 1))]))\n", "  (cond\n    [(= n 0) 0]\n    [(=\
    \ (modulo n 11) 0) (+ 1 (fizz_buzz (- n 1)))]\n    [(= (modulo n 13) 0) (+ 1 (fizz_buzz\
    \ (- n 1)))]\n    [else (fizz_buzz (- n 1))]))\n", "  (define (count-7s n)\n \
    \   (cond\n      [(= n 0) 0]\n      [(= (remainder n 10) 7) (+ 1 (count-7s (quotient\
    \ n 10)))]\n      [else (count-7s (quotient n 10))]))\n  (define (fizz-buzz-helper\
    \ n count)\n    (cond\n      [(= n 0) count]\n      [(or (= (remainder n 11) 0)\
    \ (= (remainder n 13) 0)) (fizz-buzz-helper (- n 1) (+ count (count-7s n)))]\n\
    \      [else (fizz-buzz-helper (- n 1) count)]))\n  (fizz-buzz-helper n 0))\n",
  "  (define (fizz_buzz_iter n count)\n    (cond ((= n 0) count)\n          ((or (=\
    \ (modulo n 11) 0) (= (modulo n 13) 0))\n           (fizz_buzz_iter (- n 1) (+\
    \ count (count-sevens n))))\n          (else (fizz_buzz_iter (- n 1) count))))\n\
    \  (fizz_buzz_iter n 0))\n", "  (cond\n    [(= n 0) 0]\n    [(or (= (modulo n\
    \ 11) 0) (= (modulo n 13) 0))\n     (+ (count-7 (number->string n)) (fizz_buzz\
    \ (- n 1)))]\n    [else (fizz_buzz (- n 1))]))\n", "  (define (fizz_buzz_helper\
    \ n acc)\n    (cond\n      [(= n 0) acc]\n      [(or (= (modulo n 11) 0) (= (modulo\
    \ n 13) 0)) (fizz_buzz_helper (- n 1) (+ acc (count-7 n)))]\n      [else (fizz_buzz_helper\
    \ (- n 1) acc)]))\n  (fizz_buzz_helper n 0))\n", "  (define (count-7 n)\n    (cond\
    \ ((= n 0) 0)\n          ((= (modulo n 10) 7) (+ 1 (count-7 (quotient n 10))))\n\
    \          (else (count-7 (quotient n 10)))))\n  (define (fizz-buzz-helper n acc)\n\
    \    (cond ((= n 0) acc)\n          ((or (= (modulo n 11) 0) (= (modulo n 13)\
    \ 0)) (fizz-buzz-helper (- n 1) (+ acc (count-7 n))))\n          (else (fizz-buzz-helper\
    \ (- n 1) acc))))\n  (fizz-buzz-helper n 0))\n", "  (let loop ([i 0] [count 0])\n\
    \    (cond\n      [(= i n) count]\n      [(and (or (zero? (modulo i 11)) (zero?\
    \ (modulo i 13)))\n            (zero? (modulo (number->string i) 7)))\n      \
    \ (loop (+ i 1) (+ count 1))]\n      [else (loop (+ i 1) count)])))\n", "  (cond\n\
    \    [(= n 0) 0]\n    [(= n 1) 0]\n    [(= n 2) 0]\n    [(= n 3) 0]\n    [(= n\
    \ 4) 0]\n    [(= n 5) 0]\n    [(= n 6) 0]\n    [(= n 7) 1]\n    [(= n 8) 1]\n\
    \    [(= n 9) 1]\n    [(= n 10) 1]\n    [(= n 11) 1]\n    [(= n 12) 1]\n    [(=\
    \ n 13) 1]\n    [(= n 14) 1]\n    [(= n 15) 1]\n    [(= n 16) 1]\n    [(= n 17)\
    \ 1]\n    [(= n 18) 1]\n    [(= n 19) 1]\n    [(= n 20) 1]\n    [(= n 21) 1]\n\
    \    [(= n 22) 1]\n    [(= n 23) 1]\n    [(= n 24) 1]\n    [(= n 25) 1]\n    [(=\
    \ n 26) 1]\n    [(= n 27) 1]\n    [(= n 28) 1]\n    [(= n 29) 1]\n    [(= n 30)\
    \ 1]\n    [(= n 31) 1]\n    [(= n 32) 1]\n    [(= n 33) 1]\n    [(= n 34) 1]\n\
    \    [(= n 35) 1]\n    [(= n 36) 1]\n    [(= n 37) 1]\n    [(= n 38) 1]\n    [(=\
    \ n 39) 1]\n    [(= n 40) 1]\n    [(= n 41) 1]\n    [(= n 42) 1]\n    [(= n 43)\
    \ 1]\n    [(= n 44) 1]\n    [(= n 45) 1]\n    [(= n 46) 1]\n    [(= n 47) 1]\n\
    \    [(= n 48) 1]\n    [(= n 49) 1]\n    [(= n 50) 1]\n    [(= n 51) 1]\n    [(=\
    \ n 52) 1]\n    [(= n 53) 1]\n    [(= n 54) 1]\n    [(= n 55) 1]\n    [(=", " \
    \ (define (fizz_buzz_helper n count)\n    (cond\n      [(= n 0) count]\n     \
    \ [(or (= (modulo n 11) 0) (= (modulo n 13) 0)) (fizz_buzz_helper (- n 1) (+ count\
    \ (count-7 n)))]\n      [else (fizz_buzz_helper (- n 1) count)]))\n  (fizz_buzz_helper\
    \ n 0))\n", "  (cond\n    [(= n 0) 0]\n    [(= (modulo n 11) 0) (+ 1 (fizz_buzz\
    \ (- n 1)))]\n    [(= (modulo n 13) 0) (+ 1 (fizz_buzz (- n 1)))]\n    [else (fizz_buzz\
    \ (- n 1))]))\n", "  (define (fizz_buzz_iter n count)\n    (cond\n      [(= n\
    \ 0) count]\n      [(or (= (modulo n 11) 0) (= (modulo n 13) 0)) (fizz_buzz_iter\
    \ (- n 1) (+ count (count-7s n)))]\n      [else (fizz_buzz_iter (- n 1) count)]))\n\
    \  (fizz_buzz_iter n 0))\n", "  (define (fizz_buzz_iter n acc)\n    (cond ((=\
    \ n 0) acc)\n          ((or (= (modulo n 11) 0) (= (modulo n 13) 0))\n       \
    \    (fizz_buzz_iter (- n 1) (+ acc (count-7s n))))\n          (else (fizz_buzz_iter\
    \ (- n 1) acc))))\n  (fizz_buzz_iter n 0))\n", "  (cond\n    [(= n 0) 0]\n   \
    \ [(or (= (modulo n 11) 0) (= (modulo n 13) 0))\n     (+ (count-7 (number->string\
    \ n)) (fizz_buzz (- n 1)))]\n    [else (fizz_buzz (- n 1))]))\n", "  (define (fizz_buzz_helper\
    \ n acc)\n    (if (= n 0)\n        acc\n        (if (or (zero? (modulo n 11))\
    \ (zero? (modulo n 13)))\n            (fizz_buzz_helper (- n 1) (+ acc (count-digits\
    \ 7 n)))\n            (fizz_buzz_helper (- n 1) acc))))\n  (fizz_buzz_helper n\
    \ 0))\n", "  (define (count-7s n)\n    (cond ((= n 0) 0)\n          ((= (modulo\
    \ n 10) 7) 1)\n          (else (count-7s (quotient n 10)))))\n  (define (loop\
    \ i count)\n    (cond ((> i n) count)\n          ((or (= (modulo i 11) 0) (= (modulo\
    \ i 13) 0)) (loop (+ i 1) (+ count (count-7s i))))\n          (else (loop (+ i\
    \ 1) count))))\n  (loop 1 0))\n", "  (define (fizz_buzz-helper n acc)\n    (cond\n\
    \      [(= n 0) acc]\n      [(or (= (modulo n 11) 0) (= (modulo n 13) 0)) (fizz_buzz-helper\
    \ (- n 1) (+ acc (count-7 n)))]\n      [else (fizz_buzz-helper (- n 1) acc)]))\n\
    \  (fizz_buzz-helper n 0))\n", "  (define (fizz-buzz-helper n acc)\n    (cond\
    \ ((= n 0) acc)\n          ((and (or (zero? (modulo n 11)) (zero? (modulo n 13)))\n\
    \                (zero? (modulo n 7)))\n           (fizz-buzz-helper (- n 1) (+\
    \ acc 1)))\n          (else (fizz-buzz-helper (- n 1) acc))))\n  (fizz-buzz-helper\
    \ n 0))\n", "  (define (fizz_buzz_helper n acc)\n    (cond\n      [(= n 0) acc]\n\
    \      [(or (= (modulo n 11) 0) (= (modulo n 13) 0))\n       (fizz_buzz_helper\
    \ (- n 1) (+ acc (count-7s n)))]\n      [else (fizz_buzz_helper (- n 1) acc)]))\n\
    \  (fizz_buzz_helper n 0))\n", "  (define (fizz_buzz_helper n acc)\n    (cond\n\
    \      [(= n 0) acc]\n      [(or (= (modulo n 11) 0) (= (modulo n 13) 0)) (fizz_buzz_helper\
    \ (- n 1) (+ (count-occurrences 7 n) acc))]\n      [else (fizz_buzz_helper (-\
    \ n 1) acc)]))\n  (fizz_buzz_helper n 0))\n", "  (define (fizz-buzz-helper n acc)\n\
    \    (cond ((= n 0) acc)\n          ((or (= (modulo n 11) 0) (= (modulo n 13)\
    \ 0))\n           (fizz-buzz-helper (- n 1) (+ acc (count-sevens n))))\n     \
    \     (else (fizz-buzz-helper (- n 1) acc))))\n  (fizz-buzz-helper n 0))\n", " \
    \ (cond\n    [(= n 0) 0]\n    [(= (modulo n 11) 0) (+ 1 (fizz_buzz (- n 1)))]\n\
    \    [(= (modulo n 13) 0) (+ 1 (fizz_buzz (- n 1)))]\n    [else (fizz_buzz (-\
    \ n 1))]))\n"]
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
