name: HumanEval_64_vowels_count
language: racket
prompt: "#lang racket\n\n;; Write a function vowels_count which takes a string representing\n\
  ;; a word as input and returns the number of vowels in the string.\n;; Vowels in\
  \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n;; vowel, but only\
  \ when it is at the end of the given word.\n;; Example:\n;; >>> vowels_count(\"\
  abcde\")\n;; 2\n;; >>> vowels_count(\"ACEDY\")\n;; 3\n(define (vowels_count s)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate vowels_count))\n\
  \    (check-equal? (candidate \"abcde\") 2)\n    (check-equal? (candidate \"Alone\"\
  ) 3)\n    (check-equal? (candidate \"key\") 2)\n    (check-equal? (candidate \"\
  bye\") 1)\n    (check-equal? (candidate \"keY\") 2)\n    (check-equal? (candidate\
  \ \"bYe\") 1)\n    (check-equal? (candidate \"ACEDY\") 3)\n))\n\n(test-humaneval)"
completions: ["  (define (vowels_count-iter s n)\n    (cond\n      [(empty? s) n]\n\
    \      [(or (char=? (first s) #\\a)\n           (char=? (first s) #\\e)\n    \
    \       (char=? (first s) #\\i)\n           (char=? (first s) #\\o)\n        \
    \   (char=? (first s) #\\u))\n       (vowels_count-iter (rest s) (+ n 1))]\n \
    \     [(and (char=? (first s) #\\y)\n            (empty? (rest s)))\n       (vowels_count-iter\
    \ (rest s) (+ n 1))]\n      [else (vowels_count-iter (rest s) n)]))\n  (vowels_count-iter\
    \ s 0))\n", "  (cond\n    [(empty? s) 0]\n    [(or (char=? (first s) #\\a)\n \
    \        (char=? (first s) #\\e)\n         (char=? (first s) #\\i)\n         (char=?\
    \ (first s) #\\o)\n         (char=? (first s) #\\u))\n     (+ 1 (vowels_count\
    \ (rest s)))]\n    [(char=? (first s) #\\y)\n     (if (empty? (rest s)) 1 (vowels_count\
    \ (rest s)))]\n    [else (vowels_count (rest s))]))\n", "  (cond\n    [(empty?\
    \ s) 0]\n    [(equal? (first s) #\\a) (+ 1 (vowels_count (rest s)))]\n    [(equal?\
    \ (first s) #\\e) (+ 1 (vowels_count (rest s)))]\n    [(equal? (first s) #\\i)\
    \ (+ 1 (vowels_count (rest s)))]\n    [(equal? (first s) #\\o) (+ 1 (vowels_count\
    \ (rest s)))]\n    [(equal? (first s) #\\u) (+ 1 (vowels_count (rest s)))]\n \
    \   [(equal? (first s) #\\y) (+ 1 (vowels_count (rest s)))]\n    [else (vowels_count\
    \ (rest s))]))\n", "  (cond\n    [(empty? s) 0]\n    [(or (char=? (first s) #\\\
    a)\n         (char=? (first s) #\\e)\n         (char=? (first s) #\\i)\n     \
    \    (char=? (first s) #\\o)\n         (char=? (first s) #\\u))\n     (+ 1 (vowels_count\
    \ (rest s)))]\n    [(char=? (first s) #\\y)\n     (if (empty? (rest s))\n    \
    \     1\n         (vowels_count (rest s)))]\n    [else (vowels_count (rest s))]))\n",
  "  (cond\n    [(empty? s) 0]\n    [(member (first s) '(\"a\" \"e\" \"i\" \"o\" \"\
    u\"))\n     (+ 1 (vowels_count (rest s)))]\n    [else (vowels_count (rest s))]))\n",
  "  (cond\n    [(empty? s) 0]\n    [(or (char=? (first s) #\\a)\n         (char=?\
    \ (first s) #\\e)\n         (char=? (first s) #\\i)\n         (char=? (first s)\
    \ #\\o)\n         (char=? (first s) #\\u))\n     (+ 1 (vowels_count (rest s)))]\n\
    \    [(char=? (first s) #\\y)\n     (if (empty? (rest s))\n         1\n      \
    \   (vowels_count (rest s)))]\n    [else (vowels_count (rest s))]))\n", "  (define\
    \ (is_vowel c)\n    (or (equal? c #\\a)\n        (equal? c #\\e)\n        (equal?\
    \ c #\\i)\n        (equal? c #\\o)\n        (equal? c #\\u)\n        (equal? c\
    \ #\\y)))\n  (define (is_last_char c)\n    (equal? c (string-ref s (- (string-length\
    \ s) 1))))\n  (define (count_vowels s)\n    (if (string-empty? s)\n        0\n\
    \        (if (is_vowel (string-ref s 0))\n            (+ 1 (count_vowels (substring\
    \ s 1)))\n            (count_vowels (substring s 1)))))\n  (if (is_last_char #\\\
    y)\n      (+ 1 (count_vowels (substring s 0 (- (string-length s) 1))))\n     \
    \ (count_vowels s)))\n", "  (define (vowels_count-iter s n)\n    (cond ((null?\
    \ s) n)\n          ((or (char=? (car s) #\\a)\n               (char=? (car s)\
    \ #\\e)\n               (char=? (car s) #\\i)\n               (char=? (car s)\
    \ #\\o)\n               (char=? (car s) #\\u))\n           (vowels_count-iter\
    \ (cdr s) (+ n 1)))\n          ((and (char=? (car s) #\\y) (null? (cdr s)))\n\
    \           (vowels_count-iter (cdr s) (+ n 1)))\n          (else (vowels_count-iter\
    \ (cdr s) n))))\n  (vowels_count-iter s 0))\n", "  (cond\n    [(empty? s) 0]\n\
    \    [(or (char=? (first s) #\\a)\n         (char=? (first s) #\\e)\n        \
    \ (char=? (first s) #\\i)\n         (char=? (first s) #\\o)\n         (char=?\
    \ (first s) #\\u))\n     (+ 1 (vowels_count (rest s)))]\n    [(and (char=? (first\
    \ s) #\\y)\n          (empty? (rest s)))\n     1]\n    [else (vowels_count (rest\
    \ s))]))\n", "  (define (vowels_count_helper s n)\n    (cond\n      [(empty? s)\
    \ n]\n      [(char-ci=? (first s) #\\a) (vowels_count_helper (rest s) (+ n 1))]\n\
    \      [(char-ci=? (first s) #\\e) (vowels_count_helper (rest s) (+ n 1))]\n \
    \     [(char-ci=? (first s) #\\i) (vowels_count_helper (rest s) (+ n 1))]\n  \
    \    [(char-ci=? (first s) #\\o) (vowels_count_helper (rest s) (+ n 1))]\n   \
    \   [(char-ci=? (first s) #\\u) (vowels_count_helper (rest s) (+ n 1))]\n    \
    \  [(char-ci=? (first s) #\\y) (vowels_count_helper (rest s) (+ n 1))]\n     \
    \ [else (vowels_count_helper (rest s) n)]))\n  (vowels_count_helper s 0))\n",
  "  (cond\n    [(empty? s) 0]\n    [(or (char=? (first s) #\\a)\n         (char=?\
    \ (first s) #\\e)\n         (char=? (first s) #\\i)\n         (char=? (first s)\
    \ #\\o)\n         (char=? (first s) #\\u))\n     (+ 1 (vowels_count (rest s)))]\n\
    \    [(and (char=? (first s) #\\y)\n          (empty? (rest s)))\n     (+ 1 (vowels_count\
    \ (rest s)))]\n    [else (vowels_count (rest s))]))\n", "  (cond\n    [(empty?\
    \ s) 0]\n    [(or (char=? (first s) #\\a)\n         (char=? (first s) #\\e)\n\
    \         (char=? (first s) #\\i)\n         (char=? (first s) #\\o)\n        \
    \ (char=? (first s) #\\u))\n     (+ 1 (vowels_count (rest s)))]\n    [(and (char=?\
    \ (first s) #\\y)\n          (empty? (rest s)))\n     1]\n    [else (vowels_count\
    \ (rest s))]))\n", "  (cond\n    [(empty? s) 0]\n    [(member (first s) '(\"a\"\
    \ \"e\" \"i\" \"o\" \"u\"))\n     (+ 1 (vowels_count (rest s)))]\n    [else (vowels_count\
    \ (rest s))]))\n", "  (cond\n    [(empty? s) 0]\n    [(member (first s) '(\"a\"\
    \ \"e\" \"i\" \"o\" \"u\"))\n     (+ 1 (vowels_count (rest s)))]\n    [else (vowels_count\
    \ (rest s))]))\n", "  (define (is_vowel? c)\n    (or (char=? c #\\a)\n       \
    \ (char=? c #\\e)\n        (char=? c #\\i)\n        (char=? c #\\o)\n        (char=?\
    \ c #\\u)))\n  (define (vowels_count_iter s n)\n    (if (string-empty? s)\n  \
    \      n\n        (if (is_vowel? (string-ref s 0))\n            (vowels_count_iter\
    \ (substring s 1) (+ n 1))\n            (vowels_count_iter (substring s 1) n))))\n\
    \  (if (string-empty? s)\n      0\n      (if (is_vowel? (string-ref s (- (string-length\
    \ s) 1)))\n          (vowels_count_iter (substring s 0 (- (string-length s) 1))\
    \ 1)\n          (vowels_count_iter (substring s 0 (- (string-length s) 1)) 0))))\n",
  "  (define (vowels_count-iter s i)\n    (cond ((= i (string-length s)) 0)\n    \
    \      ((or (char=? (string-ref s i) #\\a)\n               (char=? (string-ref\
    \ s i) #\\e)\n               (char=? (string-ref s i) #\\i)\n               (char=?\
    \ (string-ref s i) #\\o)\n               (char=? (string-ref s i) #\\u)\n    \
    \           (and (= i (- (string-length s) 1))\n                    (char=? (string-ref\
    \ s i) #\\y)))\n           (+ 1 (vowels_count-iter s (+ i 1))))\n          (else\
    \ (vowels_count-iter s (+ i 1)))))\n  (vowels_count-iter s 0))\n", "  (cond\n\
    \    [(empty? s) 0]\n    [(or (char=? (first s) #\\a)\n         (char=? (first\
    \ s) #\\e)\n         (char=? (first s) #\\i)\n         (char=? (first s) #\\o)\n\
    \         (char=? (first s) #\\u))\n     (+ 1 (vowels_count (rest s)))]\n    [(and\
    \ (char=? (first s) #\\y)\n          (empty? (rest s)))\n     1]\n    [else (vowels_count\
    \ (rest s))]))\n", "  (define (vowels_count_helper s n)\n    (cond ((empty? s)\
    \ n)\n          ((or (char=? (first s) #\\a)\n               (char=? (first s)\
    \ #\\e)\n               (char=? (first s) #\\i)\n               (char=? (first\
    \ s) #\\o)\n               (char=? (first s) #\\u))\n           (vowels_count_helper\
    \ (rest s) (+ n 1)))\n          (else (vowels_count_helper (rest s) n))))\n  (vowels_count_helper\
    \ s 0))\n", "  (cond\n    [(empty? s) 0]\n    [(or (char=? (first s) #\\a)\n \
    \        (char=? (first s) #\\e)\n         (char=? (first s) #\\i)\n         (char=?\
    \ (first s) #\\o)\n         (char=? (first s) #\\u))\n     (+ 1 (vowels_count\
    \ (rest s)))]\n    [(char=? (first s) #\\y)\n     (if (empty? (rest s))\n    \
    \     1\n         (vowels_count (rest s)))]\n    [else (vowels_count (rest s))]))\n",
  "  (cond\n    [(empty? s) 0]\n    [(or (char=? (first s) #\\a)\n         (char=?\
    \ (first s) #\\e)\n         (char=? (first s) #\\i)\n         (char=? (first s)\
    \ #\\o)\n         (char=? (first s) #\\u))\n     (+ 1 (vowels_count (rest s)))]\n\
    \    [(and (char=? (first s) #\\y)\n          (empty? (rest s)))\n     1]\n  \
    \  [else (vowels_count (rest s))]))\n", "  (if (empty? s)\n      0\n      (if\
    \ (member (first s) '(\"a\" \"e\" \"i\" \"o\" \"u\"))\n          (+ 1 (vowels_count\
    \ (rest s)))\n          (vowels_count (rest s)))))\n", "  (cond\n    [(empty?\
    \ s) 0]\n    [(or (char=? (first s) #\\a)\n         (char=? (first s) #\\e)\n\
    \         (char=? (first s) #\\i)\n         (char=? (first s) #\\o)\n        \
    \ (char=? (first s) #\\u))\n     (+ 1 (vowels_count (rest s)))]\n    [(and (char=?\
    \ (first s) #\\y)\n          (empty? (rest s)))\n     1]\n    [else (vowels_count\
    \ (rest s))]))\n", "  (define (vowels_count_helper s i)\n    (cond ((= i (string-length\
    \ s)) 0)\n          ((or (char=? (string-ref s i) #\\a)\n               (char=?\
    \ (string-ref s i) #\\e)\n               (char=? (string-ref s i) #\\i)\n    \
    \           (char=? (string-ref s i) #\\o)\n               (char=? (string-ref\
    \ s i) #\\u)\n               (and (= i (- (string-length s) 1))\n            \
    \        (char=? (string-ref s i) #\\y)))\n           (+ 1 (vowels_count_helper\
    \ s (+ i 1))))\n          (else (vowels_count_helper s (+ i 1)))))\n  (vowels_count_helper\
    \ s 0))\n", "  (define (is_vowel c)\n    (or (equal? c #\\a)\n        (equal?\
    \ c #\\e)\n        (equal? c #\\i)\n        (equal? c #\\o)\n        (equal? c\
    \ #\\u)\n        (equal? c #\\y)))\n  (define (vowels_count_iter s i)\n    (if\
    \ (equal? i (string-length s))\n        0\n        (if (is_vowel (string-ref s\
    \ i))\n            (+ 1 (vowels_count_iter s (+ i 1)))\n            (vowels_count_iter\
    \ s (+ i 1)))))\n  (if (equal? (string-length s) 0)\n      0\n      (if (is_vowel\
    \ (string-ref s (- (string-length s) 1)))\n          (vowels_count_iter s 0)\n\
    \          (+ (vowels_count_iter s 0) 1))))\n", "  (cond\n    [(empty? s) 0]\n\
    \    [(or (char=? (first s) #\\a)\n         (char=? (first s) #\\e)\n        \
    \ (char=? (first s) #\\i)\n         (char=? (first s) #\\o)\n         (char=?\
    \ (first s) #\\u))\n     (+ 1 (vowels_count (rest s)))]\n    [(and (char=? (first\
    \ s) #\\y)\n          (empty? (rest s)))\n     1]\n    [else (vowels_count (rest\
    \ s))]))\n", "  (cond\n    [(empty? s) 0]\n    [(member (first s) '(\"a\" \"e\"\
    \ \"i\" \"o\" \"u\"))\n     (+ 1 (vowels_count (rest s)))]\n    [else (vowels_count\
    \ (rest s))]))\n", "  (cond\n    [(empty? s) 0]\n    [(or (char=? (first s) #\\\
    a)\n         (char=? (first s) #\\e)\n         (char=? (first s) #\\i)\n     \
    \    (char=? (first s) #\\o)\n         (char=? (first s) #\\u))\n     (+ 1 (vowels_count\
    \ (rest s)))]\n    [(and (char=? (first s) #\\y)\n          (empty? (rest s)))\n\
    \     1]\n    [else (vowels_count (rest s))]))\n", "  (cond\n    [(empty? s) 0]\n\
    \    [(or (char=? (first s) #\\a)\n         (char=? (first s) #\\e)\n        \
    \ (char=? (first s) #\\i)\n         (char=? (first s) #\\o)\n         (char=?\
    \ (first s) #\\u))\n     (+ 1 (vowels_count (rest s)))]\n    [(and (char=? (first\
    \ s) #\\y)\n          (empty? (rest s)))\n     1]\n    [else (vowels_count (rest\
    \ s))]))\n", "  (cond\n    [(empty? s) 0]\n    [(or (char=? (first s) #\\a)\n\
    \         (char=? (first s) #\\e)\n         (char=? (first s) #\\i)\n        \
    \ (char=? (first s) #\\o)\n         (char=? (first s) #\\u))\n     (+ 1 (vowels_count\
    \ (rest s)))]\n    [(and (char=? (first s) #\\y)\n          (empty? (rest s)))\n\
    \     1]\n    [else (vowels_count (rest s))]))\n", "  (cond\n    [(empty? s) 0]\n\
    \    [(or (char=? (first s) #\\a)\n         (char=? (first s) #\\e)\n        \
    \ (char=? (first s) #\\i)\n         (char=? (first s) #\\o)\n         (char=?\
    \ (first s) #\\u))\n     (+ 1 (vowels_count (rest s)))]\n    [(char=? (first s)\
    \ #\\y)\n     (cond\n       [(empty? (rest s)) 1]\n       [else (vowels_count\
    \ (rest s))])]\n    [else (vowels_count (rest s))]))\n", "  (cond\n    [(empty?\
    \ s) 0]\n    [(member (first s) '(\"a\" \"e\" \"i\" \"o\" \"u\"))\n     (+ 1 (vowels_count\
    \ (rest s)))]\n    [else (vowels_count (rest s))]))\n", "  (cond\n    [(empty?\
    \ s) 0]\n    [(or (char=? (first s) #\\a)\n         (char=? (first s) #\\e)\n\
    \         (char=? (first s) #\\i)\n         (char=? (first s) #\\o)\n        \
    \ (char=? (first s) #\\u))\n     (+ 1 (vowels_count (rest s)))]\n    [(and (char=?\
    \ (first s) #\\y)\n          (empty? (rest s)))\n     1]\n    [else (vowels_count\
    \ (rest s))]))\n", "  (cond\n    [(empty? s) 0]\n    [(or (char=? (first s) #\\\
    a)\n         (char=? (first s) #\\e)\n         (char=? (first s) #\\i)\n     \
    \    (char=? (first s) #\\o)\n         (char=? (first s) #\\u))\n     (+ 1 (vowels_count\
    \ (rest s)))]\n    [(and (char=? (first s) #\\y)\n          (empty? (rest s)))\n\
    \     1]\n    [else (vowels_count (rest s))]))\n", "  (cond\n    [(empty? s) 0]\n\
    \    [(or (char=? (first s) #\\a)\n         (char=? (first s) #\\e)\n        \
    \ (char=? (first s) #\\i)\n         (char=? (first s) #\\o)\n         (char=?\
    \ (first s) #\\u))\n     (+ 1 (vowels_count (rest s)))]\n    [(and (char=? (first\
    \ s) #\\y)\n          (empty? (rest s)))\n     1]\n    [else (vowels_count (rest\
    \ s))]))\n", "  (define (is-vowel c)\n    (or (char=? c #\\a)\n        (char=?\
    \ c #\\e)\n        (char=? c #\\i)\n        (char=? c #\\o)\n        (char=? c\
    \ #\\u)))\n  (define (is-y c)\n    (char=? c #\\y))\n  (define (is-vowel-or-y\
    \ c)\n    (or (is-vowel c)\n        (is-y c)))\n  (define (is-last-char-y s)\n\
    \    (and (not (null? (cdr s)))\n         (is-y (car (cdr (reverse s))))))\n \
    \ (define (vowels-count-helper s)\n    (cond ((null? s) 0)\n          ((is-vowel-or-y\
    \ (car s)) (+ 1 (vowels-count-helper (cdr s))))\n          (else (vowels-count-helper\
    \ (cdr s)))))\n  (if (is-last-char-y s)\n      (+ 1 (vowels-count-helper (string->list\
    \ s)))\n      (vowels-count-helper (string->list s))))\n", "  (cond\n    [(empty?\
    \ s) 0]\n    [(member (first s) '(#\\a #\\e #\\i #\\o #\\u))\n     (+ 1 (vowels_count\
    \ (rest s)))]\n    [(and (equal? (first s) #\\y) (empty? (rest s))) 1]\n    [else\
    \ (vowels_count (rest s))]))\n", "  (define (is-vowel c)\n    (member c '(#\\\
    a #\\e #\\i #\\o #\\u)))\n  (define (is-vowel-at-end c)\n    (and (is-vowel c)\n\
    \         (or (null? (cdr s))\n             (not (is-vowel (car (cdr s)))))))\n\
    \  (define (count-vowels s)\n    (cond ((null? s) 0)\n          ((is-vowel-at-end\
    \ (car s)) 1)\n          ((is-vowel (car s)) (add1 (count-vowels (cdr s))))\n\
    \          (else (count-vowels (cdr s)))))\n  (count-vowels (string->list s)))\n",
  "  (cond\n    [(empty? s) 0]\n    [(or (char=? (first s) #\\a)\n         (char=?\
    \ (first s) #\\e)\n         (char=? (first s) #\\i)\n         (char=? (first s)\
    \ #\\o)\n         (char=? (first s) #\\u))\n     (+ 1 (vowels_count (rest s)))]\n\
    \    [(and (char=? (first s) #\\y)\n          (empty? (rest s)))\n     1]\n  \
    \  [else (vowels_count (rest s))]))\n", "  (cond\n    [(empty? s) 0]\n    [(or\
    \ (char=? (first s) #\\a)\n         (char=? (first s) #\\e)\n         (char=?\
    \ (first s) #\\i)\n         (char=? (first s) #\\o)\n         (char=? (first s)\
    \ #\\u))\n     (+ 1 (vowels_count (rest s)))]\n    [(and (char=? (first s) #\\\
    y)\n          (empty? (rest s)))\n     (+ 1 (vowels_count (rest s)))]\n    [else\
    \ (vowels_count (rest s))]))\n", "  (define (is_vowel? c)\n    (member c '(#\\\
    a #\\e #\\i #\\o #\\u)))\n  (define (count-vowels s)\n    (cond ((null? s) 0)\n\
    \          ((is_vowel? (car s)) (+ 1 (count-vowels (cdr s))))\n          (else\
    \ (count-vowels (cdr s)))))\n  (if (and (not (null? s)) (is_vowel? (car (reverse\
    \ s))))\n      (+ 1 (count-vowels (reverse (cdr (reverse s)))))\n      (count-vowels\
    \ s)))\n", "  (cond\n    [(empty? s) 0]\n    [(or (char=? (first s) #\\a)\n  \
    \       (char=? (first s) #\\e)\n         (char=? (first s) #\\i)\n         (char=?\
    \ (first s) #\\o)\n         (char=? (first s) #\\u))\n     (+ 1 (vowels_count\
    \ (rest s)))]\n    [(and (char=? (first s) #\\y)\n          (empty? (rest s)))\n\
    \     1]\n    [else (vowels_count (rest s))]))\n", "  (cond\n    [(empty? s) 0]\n\
    \    [(or (char=? (first s) #\\a)\n         (char=? (first s) #\\e)\n        \
    \ (char=? (first s) #\\i)\n         (char=? (first s) #\\o)\n         (char=?\
    \ (first s) #\\u))\n     (+ 1 (vowels_count (rest s)))]\n    [(char=? (first s)\
    \ #\\y)\n     (if (empty? (rest s))\n         1\n         (vowels_count (rest\
    \ s)))]\n    [else (vowels_count (rest s))]))\n", "  (cond\n    [(empty? s) 0]\n\
    \    [(member (first s) '(#\\a #\\e #\\i #\\o #\\u))\n     (+ 1 (vowels_count\
    \ (rest s)))]\n    [(and (member (first s) '(#\\A #\\E #\\I #\\O #\\U))\n    \
    \      (or (empty? (rest s))\n              (not (member (first (rest s)) '(#\\\
    a #\\e #\\i #\\o #\\u)))))\n     (+ 1 (vowels_count (rest s)))]\n    [else (vowels_count\
    \ (rest s))]))\n", "  (cond\n    [(empty? s) 0]\n    [(or (char=? (first s) #\\\
    a)\n         (char=? (first s) #\\e)\n         (char=? (first s) #\\i)\n     \
    \    (char=? (first s) #\\o)\n         (char=? (first s) #\\u))\n     (+ 1 (vowels_count\
    \ (rest s)))]\n    [(and (char=? (first s) #\\y)\n          (empty? (rest s)))\n\
    \     1]\n    [else (vowels_count (rest s))]))\n", "  (cond\n    [(empty? s) 0]\n\
    \    [(or (char=? (first s) #\\a)\n         (char=? (first s) #\\e)\n        \
    \ (char=? (first s) #\\i)\n         (char=? (first s) #\\o)\n         (char=?\
    \ (first s) #\\u))\n     (+ 1 (vowels_count (rest s)))]\n    [(and (char=? (first\
    \ s) #\\y)\n          (empty? (rest s)))\n     1]\n    [else (vowels_count (rest\
    \ s))]))\n", "  (cond\n    [(empty? s) 0]\n    [(char-ci=? (first s) #\\a) (+\
    \ 1 (vowels_count (rest s)))]\n    [(char-ci=? (first s) #\\e) (+ 1 (vowels_count\
    \ (rest s)))]\n    [(char-ci=? (first s) #\\i) (+ 1 (vowels_count (rest s)))]\n\
    \    [(char-ci=? (first s) #\\o) (+ 1 (vowels_count (rest s)))]\n    [(char-ci=?\
    \ (first s) #\\u) (+ 1 (vowels_count (rest s)))]\n    [(char-ci=? (first s) #\\\
    y) (+ 1 (vowels_count (rest s)))]\n    [else (vowels_count (rest s))]))\n", " \
    \ (cond\n    [(empty? s) 0]\n    [(or (char=? (first s) #\\a)\n         (char=?\
    \ (first s) #\\e)\n         (char=? (first s) #\\i)\n         (char=? (first s)\
    \ #\\o)\n         (char=? (first s) #\\u))\n     (+ 1 (vowels_count (rest s)))]\n\
    \    [(and (char=? (first s) #\\y)\n          (empty? (rest s)))\n     1]\n  \
    \  [else (vowels_count (rest s))]))\n", "  (cond\n    [(empty? s) 0]\n    [(or\
    \ (char=? (first s) #\\a)\n         (char=? (first s) #\\e)\n         (char=?\
    \ (first s) #\\i)\n         (char=? (first s) #\\o)\n         (char=? (first s)\
    \ #\\u))\n     (+ 1 (vowels_count (rest s)))]\n    [(and (char=? (first s) #\\\
    y)\n          (empty? (rest s)))\n     1]\n    [else (vowels_count (rest s))]))\n",
  "  (cond\n    [(empty? s) 0]\n    [(or (char=? (first s) #\\a)\n         (char=?\
    \ (first s) #\\e)\n         (char=? (first s) #\\i)\n         (char=? (first s)\
    \ #\\o)\n         (char=? (first s) #\\u))\n     (+ 1 (vowels_count (rest s)))]\n\
    \    [(and (char=? (first s) #\\y)\n          (empty? (rest s)))\n     1]\n  \
    \  [else (vowels_count (rest s))]))\n", "  (define (vowels_count-helper s i)\n\
    \    (cond\n      [(= i (string-length s)) 0]\n      [(or (char=? (string-ref\
    \ s i) #\\a)\n           (char=? (string-ref s i) #\\e)\n           (char=? (string-ref\
    \ s i) #\\i)\n           (char=? (string-ref s i) #\\o)\n           (char=? (string-ref\
    \ s i) #\\u))\n       (+ 1 (vowels_count-helper s (+ i 1)))]\n      [(and (char=?\
    \ (string-ref s i) #\\y)\n            (= i (- (string-length s) 1)))\n       (+\
    \ 1 (vowels_count-helper s (+ i 1)))]\n      [else (vowels_count-helper s (+ i\
    \ 1))]))\n  (vowels_count-helper s 0))\n", "  (cond\n    [(empty? s) 0]\n    [(or\
    \ (char=? (first s) #\\a)\n         (char=? (first s) #\\e)\n         (char=?\
    \ (first s) #\\i)\n         (char=? (first s) #\\o)\n         (char=? (first s)\
    \ #\\u))\n     (+ 1 (vowels_count (rest s)))]\n    [(and (char=? (first s) #\\\
    y)\n          (empty? (rest s)))\n     1]\n    [else (vowels_count (rest s))]))\n",
  "  (define (is_vowel? c)\n    (member c '(#\\a #\\e #\\i #\\o #\\u)))\n  (define\
    \ (is_vowel_at_end? c)\n    (and (is_vowel? c)\n         (not (is_vowel? (string-ref\
    \ s (- (string-length s) 2))))))\n  (define (count-vowels s)\n    (cond\n    \
    \  [(empty? s) 0]\n      [(or (is_vowel? (first s))\n           (is_vowel_at_end?\
    \ (first s)))\n       (+ 1 (count-vowels (rest s)))]\n      [else (count-vowels\
    \ (rest s))]))\n  (count-vowels s))\n", "  (define (vowels-count-helper s count)\n\
    \    (cond\n      [(empty? s) count]\n      [(char-ci=? (first s) #\\a) (vowels-count-helper\
    \ (rest s) (+ count 1))]\n      [(char-ci=? (first s) #\\e) (vowels-count-helper\
    \ (rest s) (+ count 1))]\n      [(char-ci=? (first s) #\\i) (vowels-count-helper\
    \ (rest s) (+ count 1))]\n      [(char-ci=? (first s) #\\o) (vowels-count-helper\
    \ (rest s) (+ count 1))]\n      [(char-ci=? (first s) #\\u) (vowels-count-helper\
    \ (rest s) (+ count 1))]\n      [(char-ci=? (first s) #\\y) (vowels-count-helper\
    \ (rest s) (+ count 1))]\n      [else (vowels-count-helper (rest s) count)]))\n\
    \  (vowels-count-helper s 0))\n", "  (cond\n    [(empty? s) 0]\n    [(or (char=?\
    \ (first s) #\\a)\n         (char=? (first s) #\\e)\n         (char=? (first s)\
    \ #\\i)\n         (char=? (first s) #\\o)\n         (char=? (first s) #\\u))\n\
    \     (+ 1 (vowels_count (rest s)))]\n    [(and (char=? (first s) #\\y)\n    \
    \      (empty? (rest s)))\n     1]\n    [else (vowels_count (rest s))]))\n", " \
    \ (define (vowels_count-iter s n)\n    (cond ((null? s) n)\n          ((or (equal?\
    \ (car s) #\\a)\n               (equal? (car s) #\\e)\n               (equal?\
    \ (car s) #\\i)\n               (equal? (car s) #\\o)\n               (equal?\
    \ (car s) #\\u))\n           (vowels_count-iter (cdr s) (+ n 1)))\n          ((and\
    \ (equal? (car s) #\\y) (null? (cdr s)))\n           (vowels_count-iter (cdr s)\
    \ (+ n 1)))\n          (else (vowels_count-iter (cdr s) n))))\n  (vowels_count-iter\
    \ s 0))\n", "  (cond\n    [(empty? s) 0]\n    [(or (char=? (first s) #\\a)\n \
    \        (char=? (first s) #\\e)\n         (char=? (first s) #\\i)\n         (char=?\
    \ (first s) #\\o)\n         (char=? (first s) #\\u))\n     (+ 1 (vowels_count\
    \ (rest s)))]\n    [(and (char=? (first s) #\\y)\n          (empty? (rest s)))\n\
    \     1]\n    [else (vowels_count (rest s))]))\n", "  (cond\n    [(empty? s) 0]\n\
    \    [(or (char=? (first s) #\\a)\n         (char=? (first s) #\\e)\n        \
    \ (char=? (first s) #\\i)\n         (char=? (first s) #\\o)\n         (char=?\
    \ (first s) #\\u))\n     (+ 1 (vowels_count (rest s)))]\n    [(and (char=? (first\
    \ s) #\\y)\n          (empty? (rest s)))\n     1]\n    [else (vowels_count (rest\
    \ s))]))\n", "  (define (vowels_count-helper s count)\n    (if (empty? s)\n  \
    \      count\n        (if (or (char=? (first s) #\\a)\n                (char=?\
    \ (first s) #\\e)\n                (char=? (first s) #\\i)\n                (char=?\
    \ (first s) #\\o)\n                (char=? (first s) #\\u)\n                (and\
    \ (char=? (first s) #\\y)\n                     (empty? (rest s))))\n        \
    \    (vowels_count-helper (rest s) (+ count 1))\n            (vowels_count-helper\
    \ (rest s) count))))\n  (vowels_count-helper s 0))\n", "  (define (vowels_count-iter\
    \ s n)\n    (cond\n      [(empty? s) n]\n      [(or (char=? (first s) #\\a)\n\
    \           (char=? (first s) #\\e)\n           (char=? (first s) #\\i)\n    \
    \       (char=? (first s) #\\o)\n           (char=? (first s) #\\u))\n       (vowels_count-iter\
    \ (rest s) (+ n 1))]\n      [(and (char=? (first s) #\\y)\n            (empty?\
    \ (rest s)))\n       (vowels_count-iter (rest s) (+ n 1))]\n      [else (vowels_count-iter\
    \ (rest s) n)]))\n  (vowels_count-iter s 0))\n", "  (cond\n    [(empty? s) 0]\n\
    \    [(char-ci=? (first s) #\\a) (+ 1 (vowels_count (rest s)))]\n    [(char-ci=?\
    \ (first s) #\\e) (+ 1 (vowels_count (rest s)))]\n    [(char-ci=? (first s) #\\\
    i) (+ 1 (vowels_count (rest s)))]\n    [(char-ci=? (first s) #\\o) (+ 1 (vowels_count\
    \ (rest s)))]\n    [(char-ci=? (first s) #\\u) (+ 1 (vowels_count (rest s)))]\n\
    \    [(char-ci=? (first s) #\\y) (+ 1 (vowels_count (rest s)))]\n    [else (vowels_count\
    \ (rest s))]))\n", "  (define (vowels_count_iter s i acc)\n    (cond\n      [(=\
    \ i (string-length s)) acc]\n      [(char-ci=? (string-ref s i) #\\a) (vowels_count_iter\
    \ s (+ i 1) (+ acc 1))]\n      [(char-ci=? (string-ref s i) #\\e) (vowels_count_iter\
    \ s (+ i 1) (+ acc 1))]\n      [(char-ci=? (string-ref s i) #\\i) (vowels_count_iter\
    \ s (+ i 1) (+ acc 1))]\n      [(char-ci=? (string-ref s i) #\\o) (vowels_count_iter\
    \ s (+ i 1) (+ acc 1))]\n      [(char-ci=? (string-ref s i) #\\u) (vowels_count_iter\
    \ s (+ i 1) (+ acc 1))]\n      [(char-ci=? (string-ref s i) #\\y) (vowels_count_iter\
    \ s (+ i 1) (+ acc 1))]\n      [else (vowels_count_iter s (+ i 1) acc)]))\n  (vowels_count_iter\
    \ s 0 0))\n", "  (cond\n    [(empty? s) 0]\n    [(member (first s) '(\"a\" \"\
    e\" \"i\" \"o\" \"u\"))\n     (+ 1 (vowels_count (rest s)))]\n    [else (vowels_count\
    \ (rest s))]))\n", "  (cond\n    [(empty? s) 0]\n    [(or (char=? (first s) #\\\
    a)\n         (char=? (first s) #\\e)\n         (char=? (first s) #\\i)\n     \
    \    (char=? (first s) #\\o)\n         (char=? (first s) #\\u))\n     (+ 1 (vowels_count\
    \ (rest s)))]\n    [(and (char=? (first s) #\\y)\n          (empty? (rest s)))\n\
    \     1]\n    [else (vowels_count (rest s))]))\n", "  (if (empty? s)\n      0\n\
    \      (if (or (char=? (first s) #\\a)\n              (char=? (first s) #\\e)\n\
    \              (char=? (first s) #\\i)\n              (char=? (first s) #\\o)\n\
    \              (char=? (first s) #\\u)\n              (and (char=? (first s) #\\\
    y)\n                   (empty? (rest s))))\n          (+ 1 (vowels_count (rest\
    \ s)))\n          (vowels_count (rest s)))))\n", "  (cond\n    [(empty? s) 0]\n\
    \    [(or (char=? (first s) #\\a)\n         (char=? (first s) #\\e)\n        \
    \ (char=? (first s) #\\i)\n         (char=? (first s) #\\o)\n         (char=?\
    \ (first s) #\\u))\n     (+ 1 (vowels_count (rest s)))]\n    [(and (char=? (first\
    \ s) #\\y)\n          (empty? (rest s)))\n     1]\n    [else (vowels_count (rest\
    \ s))]))\n", "  (cond\n    [(empty? s) 0]\n    [(or (char=? (first s) #\\a)\n\
    \         (char=? (first s) #\\e)\n         (char=? (first s) #\\i)\n        \
    \ (char=? (first s) #\\o)\n         (char=? (first s) #\\u))\n     (+ 1 (vowels_count\
    \ (rest s)))]\n    [(and (char=? (first s) #\\y)\n          (empty? (rest s)))\n\
    \     (+ 1 (vowels_count (rest s)))]\n    [else (vowels_count (rest s))]))\n",
  "  (cond\n    [(empty? s) 0]\n    [(or (char=? (first s) #\\a)\n         (char=?\
    \ (first s) #\\e)\n         (char=? (first s) #\\i)\n         (char=? (first s)\
    \ #\\o)\n         (char=? (first s) #\\u))\n     (+ 1 (vowels_count (rest s)))]\n\
    \    [(and (char=? (first s) #\\y)\n          (empty? (rest s)))\n     1]\n  \
    \  [else (vowels_count (rest s))]))\n", "  (cond\n    [(empty? s) 0]\n    [(or\
    \ (equal? (first s) 'a)\n         (equal? (first s) 'e)\n         (equal? (first\
    \ s) 'i)\n         (equal? (first s) 'o)\n         (equal? (first s) 'u))\n  \
    \   (+ 1 (vowels_count (rest s)))]\n    [(and (equal? (first s) 'y)\n        \
    \  (empty? (rest s)))\n     1]\n    [else (vowels_count (rest s))]))\n", "  (define\
    \ (is_vowel c)\n    (or (char=? c #\\a)\n        (char=? c #\\e)\n        (char=?\
    \ c #\\i)\n        (char=? c #\\o)\n        (char=? c #\\u)))\n  (define (is_last_y\
    \ c)\n    (and (char=? c #\\y)\n         (equal? (substring s (sub1 (string-length\
    \ s)) (string-length s)) \"y\")))\n  (define (count s)\n    (if (string-empty?\
    \ s)\n        0\n        (if (or (is_vowel (string-ref s 0))\n               \
    \ (is_last_y (string-ref s 0)))\n            (+ 1 (count (substring s 1 (string-length\
    \ s))))\n            (count (substring s 1 (string-length s))))))\n  (count s))\n",
  "  (cond\n    [(empty? s) 0]\n    [(member (first s) '(#\\a #\\e #\\i #\\o #\\u))\n\
    \     (+ 1 (vowels_count (rest s)))]\n    [(and (equal? (first s) #\\y) (empty?\
    \ (rest s))) 1]\n    [else (vowels_count (rest s))]))\n", "  (cond\n    [(empty?\
    \ s) 0]\n    [(or (char=? (first s) #\\a)\n         (char=? (first s) #\\e)\n\
    \         (char=? (first s) #\\i)\n         (char=? (first s) #\\o)\n        \
    \ (char=? (first s) #\\u))\n     (+ 1 (vowels_count (rest s)))]\n    [(char=?\
    \ (first s) #\\y)\n     (if (empty? (rest s))\n         1\n         (vowels_count\
    \ (rest s)))]\n    [else (vowels_count (rest s))]))\n", "  (define (vowels_count-helper\
    \ s acc)\n    (cond\n      [(empty? s) acc]\n      [(or (char=? (first s) #\\\
    a)\n           (char=? (first s) #\\e)\n           (char=? (first s) #\\i)\n \
    \          (char=? (first s) #\\o)\n           (char=? (first s) #\\u))\n    \
    \   (vowels_count-helper (rest s) (+ acc 1))]\n      [else (vowels_count-helper\
    \ (rest s) acc)]))\n  (vowels_count-helper s 0))\n", "  (cond\n    [(empty? s)\
    \ 0]\n    [(or (char=? (first s) #\\a)\n         (char=? (first s) #\\e)\n   \
    \      (char=? (first s) #\\i)\n         (char=? (first s) #\\o)\n         (char=?\
    \ (first s) #\\u))\n     (+ 1 (vowels_count (rest s)))]\n    [(and (char=? (first\
    \ s) #\\y)\n          (empty? (rest s)))\n     1]\n    [else (vowels_count (rest\
    \ s))]))\n", "  (cond\n    [(empty? s) 0]\n    [(or (equal? (first s) 'a)\n  \
    \       (equal? (first s) 'e)\n         (equal? (first s) 'i)\n         (equal?\
    \ (first s) 'o)\n         (equal? (first s) 'u))\n     (+ 1 (vowels_count (rest\
    \ s)))]\n    [(and (equal? (first s) 'y)\n          (empty? (rest s)))\n     1]\n\
    \    [else (vowels_count (rest s))]))\n", "  (cond\n    [(empty? s) 0]\n    [(or\
    \ (char=? (first s) #\\a)\n         (char=? (first s) #\\e)\n         (char=?\
    \ (first s) #\\i)\n         (char=? (first s) #\\o)\n         (char=? (first s)\
    \ #\\u))\n     (+ 1 (vowels_count (rest s)))]\n    [(and (char=? (first s) #\\\
    y)\n          (empty? (rest s)))\n     1]\n    [else (vowels_count (rest s))]))\n",
  "  (cond\n    [(empty? s) 0]\n    [(or (char=? (first s) #\\a)\n         (char=?\
    \ (first s) #\\e)\n         (char=? (first s) #\\i)\n         (char=? (first s)\
    \ #\\o)\n         (char=? (first s) #\\u))\n     (+ 1 (vowels_count (rest s)))]\n\
    \    [(and (char=? (first s) #\\y)\n          (empty? (rest s)))\n     1]\n  \
    \  [else (vowels_count (rest s))]))\n", "  (cond\n    [(empty? s) 0]\n    [(char-ci=?\
    \ (first s) #\\a) (+ 1 (vowels_count (rest s)))]\n    [(char-ci=? (first s) #\\\
    e) (+ 1 (vowels_count (rest s)))]\n    [(char-ci=? (first s) #\\i) (+ 1 (vowels_count\
    \ (rest s)))]\n    [(char-ci=? (first s) #\\o) (+ 1 (vowels_count (rest s)))]\n\
    \    [(char-ci=? (first s) #\\u) (+ 1 (vowels_count (rest s)))]\n    [(char-ci=?\
    \ (first s) #\\y) (if (empty? (rest s))\n                                  (+\
    \ 1 (vowels_count (rest s)))\n                                  (vowels_count\
    \ (rest s)))]\n    [else (vowels_count (rest s))]))\n", "  (cond\n    [(empty?\
    \ s) 0]\n    [(char-ci=? (first s) #\\a) (add1 (vowels_count (rest s)))]\n   \
    \ [(char-ci=? (first s) #\\e) (add1 (vowels_count (rest s)))]\n    [(char-ci=?\
    \ (first s) #\\i) (add1 (vowels_count (rest s)))]\n    [(char-ci=? (first s) #\\\
    o) (add1 (vowels_count (rest s)))]\n    [(char-ci=? (first s) #\\u) (add1 (vowels_count\
    \ (rest s)))]\n    [(char-ci=? (first s) #\\y) (if (empty? (rest s)) 1 (vowels_count\
    \ (rest s)))]\n    [else (vowels_count (rest s))]))\n", "  (cond\n    [(empty?\
    \ s) 0]\n    [(or (equal? (first s) 'a)\n         (equal? (first s) 'e)\n    \
    \     (equal? (first s) 'i)\n         (equal? (first s) 'o)\n         (equal?\
    \ (first s) 'u))\n     (+ 1 (vowels_count (rest s)))]\n    [(and (equal? (first\
    \ s) 'y)\n          (empty? (rest s)))\n     1]\n    [else (vowels_count (rest\
    \ s))]))\n", "  (cond\n    [(empty? s) 0]\n    [(or (equal? (first s) 'a)\n  \
    \       (equal? (first s) 'e)\n         (equal? (first s) 'i)\n         (equal?\
    \ (first s) 'o)\n         (equal? (first s) 'u))\n     (+ 1 (vowels_count (rest\
    \ s)))]\n    [(and (equal? (first s) 'y)\n          (empty? (rest s)))\n     1]\n\
    \    [else (vowels_count (rest s))]))\n", "  (cond\n    [(empty? s) 0]\n    [(member\
    \ (first s) '(#\\a #\\e #\\i #\\o #\\u))\n     (+ 1 (vowels_count (rest s)))]\n\
    \    [(and (equal? (first s) #\\y) (empty? (rest s))) 1]\n    [else (vowels_count\
    \ (rest s))]))\n", "  (define (is-vowel c)\n    (or (char=? c #\\a)\n        (char=?\
    \ c #\\e)\n        (char=? c #\\i)\n        (char=? c #\\o)\n        (char=? c\
    \ #\\u)))\n  (define (vowels-count-helper s)\n    (cond ((null? s) 0)\n      \
    \    ((is-vowel (car s)) (+ 1 (vowels-count-helper (cdr s))))\n          (else\
    \ (vowels-count-helper (cdr s)))))\n  (cond ((null? s) 0)\n        ((is-vowel\
    \ (car (reverse s))) (+ 1 (vowels-count-helper (reverse (cdr (reverse s))))))\n\
    \        (else (vowels-count-helper (reverse (cdr (reverse s)))))))\n", "  (cond\n\
    \    [(empty? s) 0]\n    [(or (equal? (first s) 'a)\n         (equal? (first s)\
    \ 'e)\n         (equal? (first s) 'i)\n         (equal? (first s) 'o)\n      \
    \   (equal? (first s) 'u))\n     (+ 1 (vowels_count (rest s)))]\n    [(and (equal?\
    \ (first s) 'y)\n          (empty? (rest s)))\n     1]\n    [else (vowels_count\
    \ (rest s))]))\n", "  (cond\n    [(empty? s) 0]\n    [(or (char=? (first s) #\\\
    a)\n         (char=? (first s) #\\e)\n         (char=? (first s) #\\i)\n     \
    \    (char=? (first s) #\\o)\n         (char=? (first s) #\\u))\n     (+ 1 (vowels_count\
    \ (rest s)))]\n    [(char=? (first s) #\\y)\n     (if (empty? (rest s))\n    \
    \     1\n         (vowels_count (rest s)))]\n    [else (vowels_count (rest s))]))\n",
  "  (define (is-vowel? c)\n    (member c '(#\\a #\\e #\\i #\\o #\\u)))\n  (define\
    \ (is-last-vowel? c)\n    (and (is-vowel? c)\n         (not (is-vowel? (string-ref\
    \ s (- (string-length s) 2))))))\n  (define (count-vowels s)\n    (cond ((null?\
    \ s) 0)\n          ((is-vowel? (car s)) (+ 1 (count-vowels (cdr s))))\n      \
    \    ((is-last-vowel? (car s)) (+ 1 (count-vowels (cdr s))))\n          (else\
    \ (count-vowels (cdr s)))))\n  (count-vowels (string->list s)))\n", "  (define\
    \ (is_vowel c)\n    (or (char=? c #\\a)\n        (char=? c #\\e)\n        (char=?\
    \ c #\\i)\n        (char=? c #\\o)\n        (char=? c #\\u)))\n  (define (vowels_count_iter\
    \ s i)\n    (if (or (= i 0) (= i (string-length s)))\n        0\n        (if (is_vowel\
    \ (string-ref s i))\n            (+ 1 (vowels_count_iter s (- i 1)))\n       \
    \     (vowels_count_iter s (- i 1)))))\n  (vowels_count_iter s (- (string-length\
    \ s) 1)))\n", "  (letrec ([vowels (list #\\a #\\e #\\i #\\o #\\u)]\n         \
    \  [vowels-count (lambda (s)\n                           (cond [(empty? s) 0]\n\
    \                                 [(member (first s) vowels)\n               \
    \                   (+ 1 (vowels-count (rest s)))]\n                         \
    \        [else (vowels-count (rest s))]))])\n    (vowels-count s)))\n", "  (cond\n\
    \    [(string=? s \"\") 0]\n    [(string-contains? \"aeiou\" (string-ref s 0))\n\
    \     (+ 1 (vowels_count (substring s 1)))]\n    [(string-contains? \"AEIOU\"\
    \ (string-ref s 0))\n     (+ 1 (vowels_count (substring s 1)))]\n    [else (vowels_count\
    \ (substring s 1))]))\n", "  (cond\n    [(empty? s) 0]\n    [(member (first s)\
    \ '(\"a\" \"e\" \"i\" \"o\" \"u\"))\n     (+ 1 (vowels_count (rest s)))]\n   \
    \ [else (vowels_count (rest s))]))\n", "  (cond\n    [(empty? s) 0]\n    [(or\
    \ (char=? (first s) #\\a)\n         (char=? (first s) #\\e)\n         (char=?\
    \ (first s) #\\i)\n         (char=? (first s) #\\o)\n         (char=? (first s)\
    \ #\\u))\n     (+ 1 (vowels_count (rest s)))]\n    [(char=? (first s) #\\y)\n\
    \     (if (empty? (rest s))\n         1\n         (vowels_count (rest s)))]\n\
    \    [else (vowels_count (rest s))]))\n", "  (cond\n    [(empty? s) 0]\n    [(member\
    \ (first s) '(#\\a #\\e #\\i #\\o #\\u))\n     (+ 1 (vowels_count (rest s)))]\n\
    \    [(and (equal? (first s) #\\y) (empty? (rest s))) 1]\n    [else (vowels_count\
    \ (rest s))]))\n", "  (cond [(empty? s) 0]\n        [(or (char=? (first s) #\\\
    a)\n             (char=? (first s) #\\e)\n             (char=? (first s) #\\i)\n\
    \             (char=? (first s) #\\o)\n             (char=? (first s) #\\u))\n\
    \         (+ 1 (vowels_count (rest s)))]\n        [(and (char=? (first s) #\\\
    y)\n              (empty? (rest s)))\n         (+ 1 (vowels_count (rest s)))]\n\
    \        [else (vowels_count (rest s))]))\n", "  (cond\n    [(empty? s) 0]\n \
    \   [(or (char=? (first s) #\\a)\n         (char=? (first s) #\\e)\n         (char=?\
    \ (first s) #\\i)\n         (char=? (first s) #\\o)\n         (char=? (first s)\
    \ #\\u))\n     (+ 1 (vowels_count (rest s)))]\n    [(and (char=? (first s) #\\\
    y)\n          (empty? (rest s)))\n     1]\n    [else (vowels_count (rest s))]))\n",
  "  (cond\n    [(empty? s) 0]\n    [(or (char=? (first s) #\\a)\n         (char=?\
    \ (first s) #\\e)\n         (char=? (first s) #\\i)\n         (char=? (first s)\
    \ #\\o)\n         (char=? (first s) #\\u))\n     (+ 1 (vowels_count (rest s)))]\n\
    \    [(and (char=? (first s) #\\y)\n          (empty? (rest s)))\n     1]\n  \
    \  [else (vowels_count (rest s))]))\n", "  (cond\n    [(empty? s) 0]\n    [(or\
    \ (char=? (first s) #\\a)\n         (char=? (first s) #\\e)\n         (char=?\
    \ (first s) #\\i)\n         (char=? (first s) #\\o)\n         (char=? (first s)\
    \ #\\u))\n     (+ 1 (vowels_count (rest s)))]\n    [(and (char=? (first s) #\\\
    y)\n          (empty? (rest s)))\n     1]\n    [else (vowels_count (rest s))]))\n",
  "  (define (vowels_count-helper s i acc)\n    (cond\n      [(= i (string-length\
    \ s)) acc]\n      [(char-ci=? (string-ref s i) #\\a) (vowels_count-helper s (+\
    \ i 1) (+ acc 1))]\n      [(char-ci=? (string-ref s i) #\\e) (vowels_count-helper\
    \ s (+ i 1) (+ acc 1))]\n      [(char-ci=? (string-ref s i) #\\i) (vowels_count-helper\
    \ s (+ i 1) (+ acc 1))]\n      [(char-ci=? (string-ref s i) #\\o) (vowels_count-helper\
    \ s (+ i 1) (+ acc 1))]\n      [(char-ci=? (string-ref s i) #\\u) (vowels_count-helper\
    \ s (+ i 1) (+ acc 1))]\n      [(char-ci=? (string-ref s i) #\\y) (vowels_count-helper\
    \ s (+ i 1) (+ acc 1))]\n      [else (vowels_count-helper s (+ i 1) acc)]))\n\
    \  (vowels_count-helper s 0 0))\n", "  (cond\n    [(empty? s) 0]\n    [(char-ci=?\
    \ (first s) #\\a) (add1 (vowels_count (rest s)))]\n    [(char-ci=? (first s) #\\\
    e) (add1 (vowels_count (rest s)))]\n    [(char-ci=? (first s) #\\i) (add1 (vowels_count\
    \ (rest s)))]\n    [(char-ci=? (first s) #\\o) (add1 (vowels_count (rest s)))]\n\
    \    [(char-ci=? (first s) #\\u) (add1 (vowels_count (rest s)))]\n    [(char-ci=?\
    \ (first s) #\\y) (add1 (vowels_count (rest s)))]\n    [else (vowels_count (rest\
    \ s))]))\n", "  (define (vowels_count_iter s i)\n    (cond\n      [(= i (string-length\
    \ s)) 0]\n      [(or (char=? (string-ref s i) #\\a)\n           (char=? (string-ref\
    \ s i) #\\e)\n           (char=? (string-ref s i) #\\i)\n           (char=? (string-ref\
    \ s i) #\\o)\n           (char=? (string-ref s i) #\\u)\n           (and (char=?\
    \ (string-ref s i) #\\y)\n                (= i (- (string-length s) 1))))\n  \
    \     (+ 1 (vowels_count_iter s (+ i 1)))]\n      [else (vowels_count_iter s (+\
    \ i 1))]))\n  (vowels_count_iter s 0))\n", "  (define (is_vowel c)\n    (or (equal?\
    \ c #\\a)\n        (equal? c #\\e)\n        (equal? c #\\i)\n        (equal? c\
    \ #\\o)\n        (equal? c #\\u)))\n  (define (is_last_vowel c)\n    (and (is_vowel\
    \ c)\n         (equal? (string-length s) (add1 (string-index c s)))))\n  (define\
    \ (is_vowel_at_end c)\n    (and (is_vowel c)\n         (equal? (string-length\
    \ s) (add1 (string-index c s)))))\n  (define (is_vowel_at_start c)\n    (and (is_vowel\
    \ c)\n         (equal? 0 (string-index c s))))\n  (define (is_vowel_at_middle\
    \ c)\n    (and (is_vowel c)\n         (not (or (is_vowel_at_end c)\n         \
    \         (is_vowel_at_start c)))))\n  (define (count_vowels s)\n    (cond ((null?\
    \ s) 0)\n          ((is_vowel_at_end (car s)) 1)\n          ((is_vowel_at_start\
    \ (car s)) (add1 (count_vowels (cdr s))))\n          ((is_vowel_at_middle (car\
    \ s)) (add1 (count_vowels (cdr s))))\n          (else (count_vowels (cdr s)))))\n\
    \  (count_vowels (string->list s)))\n", "  (define (is_vowel c)\n    (or (char=?\
    \ c #\\a)\n        (char=? c #\\e)\n        (char=? c #\\i)\n        (char=? c\
    \ #\\o)\n        (char=? c #\\u)))\n  (define (count_vowels s)\n    (if (empty?\
    \ s)\n        0\n        (+ (if (is_vowel (first s)) 1 0)\n           (count_vowels\
    \ (rest s)))))\n  (if (empty? s)\n      0\n      (if (is_vowel (last s))\n   \
    \       (+ (count_vowels (butlast s)) 1)\n          (count_vowels (butlast s)))))\n",
  "  (define (vowels_count-iter s count)\n    (cond\n      [(empty? s) count]\n  \
    \    [(or (char=? (first s) #\\a)\n           (char=? (first s) #\\e)\n      \
    \     (char=? (first s) #\\i)\n           (char=? (first s) #\\o)\n          \
    \ (char=? (first s) #\\u))\n       (vowels_count-iter (rest s) (+ count 1))]\n\
    \      [(and (char=? (first s) #\\y)\n            (empty? (rest s)))\n       (vowels_count-iter\
    \ (rest s) (+ count 1))]\n      [else (vowels_count-iter (rest s) count)]))\n\
    \  (vowels_count-iter s 0))\n", "  (cond\n    [(empty? s) 0]\n    [(or (char=?\
    \ (first s) #\\a)\n         (char=? (first s) #\\e)\n         (char=? (first s)\
    \ #\\i)\n         (char=? (first s) #\\o)\n         (char=? (first s) #\\u))\n\
    \     (+ 1 (vowels_count (rest s)))]\n    [(and (char=? (first s) #\\y)\n    \
    \      (empty? (rest s)))\n     1]\n    [else (vowels_count (rest s))]))\n", " \
    \ (cond\n    [(empty? s) 0]\n    [(or (char=? (first s) #\\a)\n         (char=?\
    \ (first s) #\\e)\n         (char=? (first s) #\\i)\n         (char=? (first s)\
    \ #\\o)\n         (char=? (first s) #\\u))\n     (+ 1 (vowels_count (rest s)))]\n\
    \    [(and (char=? (first s) #\\y)\n          (empty? (rest s)))\n     1]\n  \
    \  [else (vowels_count (rest s))]))\n", "  (define (is_vowel? c)\n    (member\
    \ c '(#\\a #\\e #\\i #\\o #\\u)))\n  (define (is_last_vowel? c)\n    (and (member\
    \ c '(#\\a #\\e #\\i #\\o #\\u #\\y))\n         (null? (cdr (cdr (cdr (cdr (cdr\
    \ (cdr s)))))))))\n  (define (count-vowels s)\n    (cond\n      [(null? s) 0]\n\
    \      [(is_vowel? (car s)) (+ 1 (count-vowels (cdr s)))]\n      [(is_last_vowel?\
    \ (car s)) (+ 1 (count-vowels (cdr s)))]\n      [else (count-vowels (cdr s))]))\n\
    \  (count-vowels s))\n", "  (cond\n    [(empty? s) 0]\n    [(or (char=? (first\
    \ s) #\\a)\n         (char=? (first s) #\\e)\n         (char=? (first s) #\\i)\n\
    \         (char=? (first s) #\\o)\n         (char=? (first s) #\\u))\n     (+\
    \ 1 (vowels_count (rest s)))]\n    [(and (char=? (first s) #\\y)\n          (empty?\
    \ (rest s)))\n     1]\n    [else (vowels_count (rest s))]))\n", "  (cond\n   \
    \ [(empty? s) 0]\n    [(member (first s) '(#\\a #\\e #\\i #\\o #\\u))\n     (+\
    \ 1 (vowels_count (rest s)))]\n    [(and (equal? (first s) #\\y) (empty? (rest\
    \ s))) 1]\n    [else (vowels_count (rest s))]))\n", "  (cond\n    [(empty? s)\
    \ 0]\n    [(or (char=? (first s) #\\a)\n         (char=? (first s) #\\e)\n   \
    \      (char=? (first s) #\\i)\n         (char=? (first s) #\\o)\n         (char=?\
    \ (first s) #\\u))\n     (+ 1 (vowels_count (rest s)))]\n    [(and (char=? (first\
    \ s) #\\y)\n          (empty? (rest s)))\n     1]\n    [else (vowels_count (rest\
    \ s))]))\n", "  (cond\n    [(empty? s) 0]\n    [(member (first s) '(\"a\" \"e\"\
    \ \"i\" \"o\" \"u\"))\n     (+ 1 (vowels_count (rest s)))]\n    [else (vowels_count\
    \ (rest s))]))\n", "  (define (vowels_count_helper s n)\n    (cond\n      [(empty?\
    \ s) n]\n      [(char-ci=? (first s) #\\a) (vowels_count_helper (rest s) (+ n\
    \ 1))]\n      [(char-ci=? (first s) #\\e) (vowels_count_helper (rest s) (+ n 1))]\n\
    \      [(char-ci=? (first s) #\\i) (vowels_count_helper (rest s) (+ n 1))]\n \
    \     [(char-ci=? (first s) #\\o) (vowels_count_helper (rest s) (+ n 1))]\n  \
    \    [(char-ci=? (first s) #\\u) (vowels_count_helper (rest s) (+ n 1))]\n   \
    \   [(char-ci=? (first s) #\\y) (vowels_count_helper (rest s) (+ n 1))]\n    \
    \  [else (vowels_count_helper (rest s) n)]))\n  (vowels_count_helper s 0))\n",
  "  (define (vowels_count_iter s count)\n    (cond\n      [(empty? s) count]\n  \
    \    [(char-ci=? (first s) #\\a) (vowels_count_iter (rest s) (+ count 1))]\n \
    \     [(char-ci=? (first s) #\\e) (vowels_count_iter (rest s) (+ count 1))]\n\
    \      [(char-ci=? (first s) #\\i) (vowels_count_iter (rest s) (+ count 1))]\n\
    \      [(char-ci=? (first s) #\\o) (vowels_count_iter (rest s) (+ count 1))]\n\
    \      [(char-ci=? (first s) #\\u) (vowels_count_iter (rest s) (+ count 1))]\n\
    \      [(char-ci=? (first s) #\\y) (vowels_count_iter (rest s) (+ count 1))]\n\
    \      [else (vowels_count_iter (rest s) count)]))\n  (vowels_count_iter s 0))\n",
  "  (define (vowels_count_helper s i)\n    (cond ((= i (string-length s)) 0)\n  \
    \        ((or (char=? (string-ref s i) #\\a)\n               (char=? (string-ref\
    \ s i) #\\e)\n               (char=? (string-ref s i) #\\i)\n               (char=?\
    \ (string-ref s i) #\\o)\n               (char=? (string-ref s i) #\\u)\n    \
    \           (and (= i (- (string-length s) 1))\n                    (char=? (string-ref\
    \ s i) #\\y)))\n           (+ 1 (vowels_count_helper s (+ i 1))))\n          (else\
    \ (vowels_count_helper s (+ i 1)))))\n  (vowels_count_helper s 0))\n", "  (cond\n\
    \    [(empty? s) 0]\n    [(char-ci=? (first s) #\\a) (+ 1 (vowels_count (rest\
    \ s)))]\n    [(char-ci=? (first s) #\\e) (+ 1 (vowels_count (rest s)))]\n    [(char-ci=?\
    \ (first s) #\\i) (+ 1 (vowels_count (rest s)))]\n    [(char-ci=? (first s) #\\\
    o) (+ 1 (vowels_count (rest s)))]\n    [(char-ci=? (first s) #\\u) (+ 1 (vowels_count\
    \ (rest s)))]\n    [(char-ci=? (first s) #\\y) (+ 1 (vowels_count (rest s)))]\n\
    \    [else (vowels_count (rest s))]))\n", "  (define (is_vowel? c)\n    (or (char=?\
    \ c #\\a)\n        (char=? c #\\e)\n        (char=? c #\\i)\n        (char=? c\
    \ #\\o)\n        (char=? c #\\u)))\n  (define (is_vowel? c)\n    (or (char=? c\
    \ #\\a)\n        (char=? c #\\e)\n        (char=? c #\\i)\n        (char=? c #\\\
    o)\n        (char=? c #\\u)))\n  (define (is_vowel? c)\n    (or (char=? c #\\\
    a)\n        (char=? c #\\e)\n        (char=? c #\\i)\n        (char=? c #\\o)\n\
    \        (char=? c #\\u)))\n  (define (is_vowel? c)\n    (or (char=? c #\\a)\n\
    \        (char=? c #\\e)\n        (char=? c #\\i)\n        (char=? c #\\o)\n \
    \       (char=? c #\\u)))\n  (define (is_vowel? c)\n    (or (char=? c #\\a)\n\
    \        (char=? c #\\e)\n        (char=? c #\\i)\n        (char=? c #\\o)\n \
    \       (char=? c #\\u)))\n  (define (is_vowel? c)\n    (or (char=? c #\\a)\n\
    \        (char=? c #\\e)\n        (char=? c #\\i)\n        (char=? c #\\o)\n \
    \       (char=? c #\\u)))\n  (define (is_vowel? c)\n    (or (char=? c #\\a)\n\
    \        (char=? c #\\e)\n        (char=? c #\\i)\n        (char=? c #\\o)\n \
    \       (char=? c #\\u)))\n  (define (is_vowel? c)\n    (or (char=? c", "  (define\
    \ (is_vowel c)\n    (or (equal? c #\\a)\n        (equal? c #\\e)\n        (equal?\
    \ c #\\i)\n        (equal? c #\\o)\n        (equal? c #\\u)))\n  (define (is_vowel_y\
    \ c)\n    (or (is_vowel c)\n        (and (equal? c #\\y)\n             (equal?\
    \ (substring s (sub1 (string-length s)) (string-length s)) \"y\"))))\n  (define\
    \ (count_vowels s)\n    (if (string-empty? s)\n        0\n        (if (is_vowel_y\
    \ (string-ref s 0))\n            (+ 1 (count_vowels (substring s 1 (string-length\
    \ s))))\n            (count_vowels (substring s 1 (string-length s))))))\n  (count_vowels\
    \ s))\n", "  (define (vowels_count-iter s i acc)\n    (cond\n      [(= i (string-length\
    \ s)) acc]\n      [(or (= (string-ref s i) #\\a)\n           (= (string-ref s\
    \ i) #\\e)\n           (= (string-ref s i) #\\i)\n           (= (string-ref s\
    \ i) #\\o)\n           (= (string-ref s i) #\\u)\n           (and (= (string-ref\
    \ s i) #\\y) (= i (- (string-length s) 1))))\n       (vowels_count-iter s (+ i\
    \ 1) (+ acc 1))]\n      [else (vowels_count-iter s (+ i 1) acc)]))\n  (vowels_count-iter\
    \ s 0 0))\n", "  (define (vowels_count_iter s acc)\n    (if (empty? s)\n     \
    \   acc\n        (if (or (equal? (first s) 'a)\n                (equal? (first\
    \ s) 'e)\n                (equal? (first s) 'i)\n                (equal? (first\
    \ s) 'o)\n                (equal? (first s) 'u)\n                (and (equal?\
    \ (first s) 'y)\n                     (empty? (rest s))))\n            (vowels_count_iter\
    \ (rest s) (+ acc 1))\n            (vowels_count_iter (rest s) acc))))\n  (vowels_count_iter\
    \ s 0))\n", "  (define (is-vowel c)\n    (or (char=? c #\\a)\n        (char=?\
    \ c #\\e)\n        (char=? c #\\i)\n        (char=? c #\\o)\n        (char=? c\
    \ #\\u)))\n  (define (is-y c)\n    (char=? c #\\y))\n  (define (is-last-char c)\n\
    \    (char=? c (string-ref s (- (string-length s) 1))))\n  (define (count-vowels\
    \ s)\n    (if (string-empty? s)\n        0\n        (if (or (is-vowel (string-ref\
    \ s 0))\n                (and (is-y (string-ref s 0))\n                     (is-last-char\
    \ (string-ref s 0))))\n            (+ 1 (count-vowels (substring s 1)))\n    \
    \        (count-vowels (substring s 1)))))\n  (count-vowels s))\n", "  (cond [(empty?\
    \ s) 0]\n        [(or (char=? (first s) #\\a)\n             (char=? (first s)\
    \ #\\e)\n             (char=? (first s) #\\i)\n             (char=? (first s)\
    \ #\\o)\n             (char=? (first s) #\\u))\n         (+ 1 (vowels_count (rest\
    \ s)))]\n        [(and (char=? (first s) #\\y)\n              (empty? (rest s)))\n\
    \         1]\n        [else (vowels_count (rest s))]))\n", "  (cond [(empty? s)\
    \ 0]\n        [(or (char=? (first s) #\\a)\n             (char=? (first s) #\\\
    e)\n             (char=? (first s) #\\i)\n             (char=? (first s) #\\o)\n\
    \             (char=? (first s) #\\u))\n         (+ 1 (vowels_count (rest s)))]\n\
    \        [(and (char=? (first s) #\\y)\n              (empty? (rest s)))\n   \
    \      1]\n        [else (vowels_count (rest s))]))\n", "  (cond\n    [(empty?\
    \ s) 0]\n    [(or (equal? (first s) 'a)\n         (equal? (first s) 'e)\n    \
    \     (equal? (first s) 'i)\n         (equal? (first s) 'o)\n         (equal?\
    \ (first s) 'u))\n     (+ 1 (vowels_count (rest s)))]\n    [(and (equal? (first\
    \ s) 'y)\n          (empty? (rest s)))\n     1]\n    [else (vowels_count (rest\
    \ s))]))\n", "  (cond\n    [(empty? s) 0]\n    [(or (char=? (first s) #\\a)\n\
    \         (char=? (first s) #\\e)\n         (char=? (first s) #\\i)\n        \
    \ (char=? (first s) #\\o)\n         (char=? (first s) #\\u))\n     (+ 1 (vowels_count\
    \ (rest s)))]\n    [(and (char=? (first s) #\\y)\n          (empty? (rest s)))\n\
    \     1]\n    [else (vowels_count (rest s))]))\n", "  (cond\n    [(empty? s) 0]\n\
    \    [(char-ci=? (first s) #\\a) (add1 (vowels_count (rest s)))]\n    [(char-ci=?\
    \ (first s) #\\e) (add1 (vowels_count (rest s)))]\n    [(char-ci=? (first s) #\\\
    i) (add1 (vowels_count (rest s)))]\n    [(char-ci=? (first s) #\\o) (add1 (vowels_count\
    \ (rest s)))]\n    [(char-ci=? (first s) #\\u) (add1 (vowels_count (rest s)))]\n\
    \    [(char-ci=? (first s) #\\y) (add1 (vowels_count (rest s)))]\n    [else (vowels_count\
    \ (rest s))]))\n", "  (cond\n    [(empty? s) 0]\n    [(or (char=? (first s) #\\\
    a)\n         (char=? (first s) #\\e)\n         (char=? (first s) #\\i)\n     \
    \    (char=? (first s) #\\o)\n         (char=? (first s) #\\u))\n     (+ 1 (vowels_count\
    \ (rest s)))]\n    [(and (char=? (first s) #\\y)\n          (empty? (rest s)))\n\
    \     1]\n    [else (vowels_count (rest s))]))\n", "  (define (is-vowel? c)\n\
    \    (or (char=? c #\\a)\n        (char=? c #\\e)\n        (char=? c #\\i)\n \
    \       (char=? c #\\o)\n        (char=? c #\\u)))\n  (define (is-vowel-at-end?\
    \ c)\n    (or (char=? c #\\a)\n        (char=? c #\\e)\n        (char=? c #\\\
    i)\n        (char=? c #\\o)\n        (char=? c #\\u)\n        (char=? c #\\y)))\n\
    \  (define (count-vowels s)\n    (cond ((null? s) 0)\n          ((is-vowel? (car\
    \ s)) (+ 1 (count-vowels (cdr s))))\n          (else (count-vowels (cdr s)))))\n\
    \  (if (is-vowel-at-end? (string-ref s (- (string-length s) 1)))\n      (+ 1 (count-vowels\
    \ (substring s 0 (- (string-length s) 1))))\n      (count-vowels s)))\n", "  (define\
    \ (vowels_count-iter s i acc)\n    (cond ((= i (string-length s)) acc)\n     \
    \     ((or (char=? (string-ref s i) #\\a)\n               (char=? (string-ref\
    \ s i) #\\e)\n               (char=? (string-ref s i) #\\i)\n               (char=?\
    \ (string-ref s i) #\\o)\n               (char=? (string-ref s i) #\\u)\n    \
    \           (and (= i (- (string-length s) 1))\n                    (char=? (string-ref\
    \ s i) #\\y)))\n           (vowels_count-iter s (+ i 1) (+ acc 1)))\n        \
    \  (else (vowels_count-iter s (+ i 1) acc))))\n  (vowels_count-iter s 0 0))\n",
  "  (letrec ([vowels (list #\\a #\\e #\\i #\\o #\\u)]\n           [count 0]\n   \
    \        [is-vowel (lambda (c) (member c vowels))]\n           [is-last-char (lambda\
    \ (s) (eq? (string-length s) 1))]\n           [is-last-vowel (lambda (s) (and\
    \ (is-vowel (string-ref s 0))\n                                           (is-last-char\
    \ s)))])\n    (cond [(is-last-vowel s)\n           (set! count (+ count 1))]\n\
    \          [(is-vowel (string-ref s 0))\n           (set! count (+ count 1))])\n\
    \    (if (is-last-char s)\n        count\n        (vowels_count (substring s 1)))))\n",
  "  (define (vowels_count_helper s i acc)\n    (cond ((= i (string-length s)) acc)\n\
    \          ((or (char=? (string-ref s i) #\\a)\n               (char=? (string-ref\
    \ s i) #\\e)\n               (char=? (string-ref s i) #\\i)\n               (char=?\
    \ (string-ref s i) #\\o)\n               (char=? (string-ref s i) #\\u)\n    \
    \           (and (= i (- (string-length s) 1))\n                    (char=? (string-ref\
    \ s i) #\\y)))\n           (vowels_count_helper s (+ i 1) (+ acc 1)))\n      \
    \    (else (vowels_count_helper s (+ i 1) acc))))\n  (vowels_count_helper s 0\
    \ 0))\n", "  (cond\n    [(empty? s) 0]\n    [(char-ci=? (first s) #\\a) (+ 1 (vowels_count\
    \ (rest s)))]\n    [(char-ci=? (first s) #\\e) (+ 1 (vowels_count (rest s)))]\n\
    \    [(char-ci=? (first s) #\\i) (+ 1 (vowels_count (rest s)))]\n    [(char-ci=?\
    \ (first s) #\\o) (+ 1 (vowels_count (rest s)))]\n    [(char-ci=? (first s) #\\\
    u) (+ 1 (vowels_count (rest s)))]\n    [(char-ci=? (first s) #\\y) (+ 1 (vowels_count\
    \ (rest s)))]\n    [else (vowels_count (rest s))]))\n", "  (cond\n    [(empty?\
    \ s) 0]\n    [(member (first s) '(#\\a #\\e #\\i #\\o #\\u))\n     (+ 1 (vowels_count\
    \ (rest s)))]\n    [(and (equal? (first s) #\\y) (empty? (rest s))) 1]\n    [else\
    \ (vowels_count (rest s))]))\n", "  (define (is_vowel c)\n    (or (equal? c #\\\
    a)\n        (equal? c #\\e)\n        (equal? c #\\i)\n        (equal? c #\\o)\n\
    \        (equal? c #\\u)\n        (equal? c #\\y)))\n  (define (is_last_char c)\n\
    \    (equal? (substring s (- (string-length s) 1)) c))\n  (define (count_vowels\
    \ s)\n    (cond ((null? s) 0)\n          ((is_vowel (car s))\n           (+ 1\
    \ (count_vowels (cdr s))))\n          (else (count_vowels (cdr s)))))\n  (if (is_last_char\
    \ #\\y)\n      (+ 1 (count_vowels s))\n      (count_vowels s)))\n", "  (define\
    \ (is-vowel? c)\n    (or (equal? c #\\a)\n        (equal? c #\\e)\n        (equal?\
    \ c #\\i)\n        (equal? c #\\o)\n        (equal? c #\\u)))\n  (define (is-last-char?\
    \ i)\n    (equal? i (- (string-length s) 1)))\n  (define (is-y-vowel? c)\n   \
    \ (and (equal? c #\\y)\n         (is-last-char? i)))\n  (for/sum ([i (in-range\
    \ (string-length s))]\n            [c (in-string s)])\n    (if (or (is-vowel?\
    \ c)\n            (is-y-vowel? c))\n        1\n        0)))\n", "  (cond\n   \
    \ [(empty? s) 0]\n    [(or (equal? (first s) #\\a)\n         (equal? (first s)\
    \ #\\e)\n         (equal? (first s) #\\i)\n         (equal? (first s) #\\o)\n\
    \         (equal? (first s) #\\u))\n     (+ 1 (vowels_count (rest s)))]\n    [(and\
    \ (equal? (first s) #\\y)\n          (empty? (rest s)))\n     1]\n    [else (vowels_count\
    \ (rest s))]))\n", "  (cond\n    [(empty? s) 0]\n    [(or (char=? (first s) #\\\
    a)\n         (char=? (first s) #\\e)\n         (char=? (first s) #\\i)\n     \
    \    (char=? (first s) #\\o)\n         (char=? (first s) #\\u))\n     (+ 1 (vowels_count\
    \ (rest s)))]\n    [(and (char=? (first s) #\\y)\n          (empty? (rest s)))\n\
    \     1]\n    [else (vowels_count (rest s))]))\n", "  (define (vowels_count-iter\
    \ s count)\n    (cond\n      [(empty? s) count]\n      [(or (char=? (first s)\
    \ #\\a)\n           (char=? (first s) #\\e)\n           (char=? (first s) #\\\
    i)\n           (char=? (first s) #\\o)\n           (char=? (first s) #\\u))\n\
    \       (vowels_count-iter (rest s) (+ count 1))]\n      [(and (char=? (first\
    \ s) #\\y)\n            (empty? (rest s)))\n       (vowels_count-iter (rest s)\
    \ (+ count 1))]\n      [else (vowels_count-iter (rest s) count)]))\n  (vowels_count-iter\
    \ s 0))\n", "  (cond\n    [(empty? s) 0]\n    [(member (first s) '(\"a\" \"e\"\
    \ \"i\" \"o\" \"u\"))\n     (+ 1 (vowels_count (rest s)))]\n    [else (vowels_count\
    \ (rest s))]))\n", "  (cond\n    [(empty? s) 0]\n    [(or (char=? (first s) #\\\
    a)\n         (char=? (first s) #\\e)\n         (char=? (first s) #\\i)\n     \
    \    (char=? (first s) #\\o)\n         (char=? (first s) #\\u))\n     (+ 1 (vowels_count\
    \ (rest s)))]\n    [(char=? (first s) #\\y)\n     (if (empty? (rest s))\n    \
    \     1\n         (vowels_count (rest s)))]\n    [else (vowels_count (rest s))]))\n",
  "  (cond\n    [(empty? s) 0]\n    [(member (first s) '(\"a\" \"e\" \"i\" \"o\" \"\
    u\"))\n     (+ 1 (vowels_count (rest s)))]\n    [else (vowels_count (rest s))]))\n",
  "  (cond\n    [(empty? s) 0]\n    [(char-ci=? (first s) #\\a) (add1 (vowels_count\
    \ (rest s)))]\n    [(char-ci=? (first s) #\\e) (add1 (vowels_count (rest s)))]\n\
    \    [(char-ci=? (first s) #\\i) (add1 (vowels_count (rest s)))]\n    [(char-ci=?\
    \ (first s) #\\o) (add1 (vowels_count (rest s)))]\n    [(char-ci=? (first s) #\\\
    u) (add1 (vowels_count (rest s)))]\n    [(char-ci=? (first s) #\\y) (add1 (vowels_count\
    \ (rest s)))]\n    [else (vowels_count (rest s))]))\n", "  (cond\n    [(empty?\
    \ s) 0]\n    [(or (equal? (first s) #\\a)\n         (equal? (first s) #\\e)\n\
    \         (equal? (first s) #\\i)\n         (equal? (first s) #\\o)\n        \
    \ (equal? (first s) #\\u))\n     (+ 1 (vowels_count (rest s)))]\n    [(and (equal?\
    \ (first s) #\\y)\n          (empty? (rest s)))\n     (+ 1 (vowels_count (rest\
    \ s)))]\n    [else (vowels_count (rest s))]))\n", "  (define (vowels_count_iter\
    \ s i count)\n    (cond\n      [(= i (string-length s)) count]\n      [(or (char=?\
    \ (string-ref s i) #\\a)\n           (char=? (string-ref s i) #\\e)\n        \
    \   (char=? (string-ref s i) #\\i)\n           (char=? (string-ref s i) #\\o)\n\
    \           (char=? (string-ref s i) #\\u)\n           (and (= i (- (string-length\
    \ s) 1))\n                (char=? (string-ref s i) #\\y)))\n       (vowels_count_iter\
    \ s (+ i 1) (+ count 1))]\n      [else (vowels_count_iter s (+ i 1) count)]))\n\
    \  (vowels_count_iter s 0 0))\n", "  (cond\n    [(empty? s) 0]\n    [(vowel? (first\
    \ s)) (+ 1 (vowels_count (rest s)))]\n    [else (vowels_count (rest s))]))\n",
  "  (cond\n    [(empty? s) 0]\n    [(or (char=? (first s) #\\a)\n         (char=?\
    \ (first s) #\\e)\n         (char=? (first s) #\\i)\n         (char=? (first s)\
    \ #\\o)\n         (char=? (first s) #\\u))\n     (+ 1 (vowels_count (rest s)))]\n\
    \    [(and (char=? (first s) #\\y)\n          (empty? (rest s)))\n     1]\n  \
    \  [else (vowels_count (rest s))]))\n", "  (cond\n    [(empty? s) 0]\n    [(or\
    \ (char=? (first s) #\\a)\n         (char=? (first s) #\\e)\n         (char=?\
    \ (first s) #\\i)\n         (char=? (first s) #\\o)\n         (char=? (first s)\
    \ #\\u))\n     (+ 1 (vowels_count (rest s)))]\n    [(and (char=? (first s) #\\\
    y)\n          (empty? (rest s)))\n     1]\n    [else (vowels_count (rest s))]))\n",
  "  (cond\n    [(empty? s) 0]\n    [(equal? (first s) 'a) (+ 1 (vowels_count (rest\
    \ s)))]\n    [(equal? (first s) 'e) (+ 1 (vowels_count (rest s)))]\n    [(equal?\
    \ (first s) 'i) (+ 1 (vowels_count (rest s)))]\n    [(equal? (first s) 'o) (+\
    \ 1 (vowels_count (rest s)))]\n    [(equal? (first s) 'u) (+ 1 (vowels_count (rest\
    \ s)))]\n    [(equal? (first s) 'y) (+ 1 (vowels_count (rest s)))]\n    [else\
    \ (vowels_count (rest s))]))\n", "  (cond\n    [(empty? s) 0]\n    [(or (char=?\
    \ (first s) #\\a)\n         (char=? (first s) #\\e)\n         (char=? (first s)\
    \ #\\i)\n         (char=? (first s) #\\o)\n         (char=? (first s) #\\u))\n\
    \     (+ 1 (vowels_count (rest s)))]\n    [(and (char=? (first s) #\\y)\n    \
    \      (empty? (rest s)))\n     1]\n    [else (vowels_count (rest s))]))\n", " \
    \ (cond\n    [(empty? s) 0]\n    [(or (char=? (first s) #\\a)\n         (char=?\
    \ (first s) #\\e)\n         (char=? (first s) #\\i)\n         (char=? (first s)\
    \ #\\o)\n         (char=? (first s) #\\u))\n     (+ 1 (vowels_count (rest s)))]\n\
    \    [(and (char=? (first s) #\\y)\n          (empty? (rest s)))\n     1]\n  \
    \  [else (vowels_count (rest s))]))\n", "  (cond\n    [(empty? s) 0]\n    [(or\
    \ (char=? (first s) #\\a)\n         (char=? (first s) #\\e)\n         (char=?\
    \ (first s) #\\i)\n         (char=? (first s) #\\o)\n         (char=? (first s)\
    \ #\\u))\n     (+ 1 (vowels_count (rest s)))]\n    [(and (char=? (first s) #\\\
    y)\n          (empty? (rest s)))\n     1]\n    [else (vowels_count (rest s))]))\n",
  "  (cond\n    [(empty? s) 0]\n    [(or (char=? (first s) #\\a)\n         (char=?\
    \ (first s) #\\e)\n         (char=? (first s) #\\i)\n         (char=? (first s)\
    \ #\\o)\n         (char=? (first s) #\\u))\n     (+ 1 (vowels_count (rest s)))]\n\
    \    [(and (char=? (first s) #\\y)\n          (empty? (rest s)))\n     1]\n  \
    \  [else (vowels_count (rest s))]))\n", "  (let ([vowels (list #\\a #\\e #\\i\
    \ #\\o #\\u #\\y)])\n    (for/sum ([c (in-string s)])\n      (if (member c vowels)\
    \ 1 0))))\n", "  (cond\n    [(empty? s) 0]\n    [(or (equal? (first s) 'a)\n \
    \        (equal? (first s) 'e)\n         (equal? (first s) 'i)\n         (equal?\
    \ (first s) 'o)\n         (equal? (first s) 'u))\n     (+ 1 (vowels_count (rest\
    \ s)))]\n    [(and (equal? (first s) 'y)\n          (empty? (rest s)))\n     (+\
    \ 1 (vowels_count (rest s)))]\n    [else (vowels_count (rest s))]))\n", "  (define\
    \ (is-vowel c)\n    (or (char=? c #\\a)\n        (char=? c #\\e)\n        (char=?\
    \ c #\\i)\n        (char=? c #\\o)\n        (char=? c #\\u)))\n  (define (is-y\
    \ c)\n    (char=? c #\\y))\n  (define (is-vowel-or-y c)\n    (or (is-vowel c)\n\
    \        (is-y c)))\n  (define (is-vowel-or-y-at-end c)\n    (and (is-y c)\n \
    \        (string-empty? (string-tail s))))\n  (define (count-vowels s)\n    (cond\n\
    \      [(string-empty? s) 0]\n      [(or (is-vowel-or-y-at-end (string-ref s 0))\n\
    \           (is-vowel-or-y (string-ref s 0)))\n       (+ 1 (count-vowels (string-tail\
    \ s)))]\n      [else (count-vowels (string-tail s))]))\n  (count-vowels s))\n",
  "  (cond\n    [(empty? s) 0]\n    [(or (char=? (first s) #\\a)\n         (char=?\
    \ (first s) #\\e)\n         (char=? (first s) #\\i)\n         (char=? (first s)\
    \ #\\o)\n         (char=? (first s) #\\u))\n     (+ 1 (vowels_count (rest s)))]\n\
    \    [(and (char=? (first s) #\\y)\n          (empty? (rest s)))\n     1]\n  \
    \  [else (vowels_count (rest s))]))\n", "  (define (vowels-count-helper s i)\n\
    \    (cond\n      [(= i (string-length s)) 0]\n      [(or (char=? (string-ref\
    \ s i) #\\a)\n           (char=? (string-ref s i) #\\e)\n           (char=? (string-ref\
    \ s i) #\\i)\n           (char=? (string-ref s i) #\\o)\n           (char=? (string-ref\
    \ s i) #\\u))\n       (+ 1 (vowels-count-helper s (+ i 1)))]\n      [(and (char=?\
    \ (string-ref s i) #\\y)\n            (= i (- (string-length s) 1)))\n       (+\
    \ 1 (vowels-count-helper s (+ i 1)))]\n      [else (vowels-count-helper s (+ i\
    \ 1))]))\n  (vowels-count-helper s 0))\n", "  (cond\n    [(empty? s) 0]\n    [(or\
    \ (char=? (first s) #\\a)\n         (char=? (first s) #\\e)\n         (char=?\
    \ (first s) #\\i)\n         (char=? (first s) #\\o)\n         (char=? (first s)\
    \ #\\u))\n     (+ 1 (vowels_count (rest s)))]\n    [(and (char=? (first s) #\\\
    y)\n          (empty? (rest s)))\n     1]\n    [else (vowels_count (rest s))]))\n",
  "  (define (is_vowel? c)\n    (or (char=? c #\\a)\n        (char=? c #\\e)\n   \
    \     (char=? c #\\i)\n        (char=? c #\\o)\n        (char=? c #\\u)))\n  (define\
    \ (is_vowel_at_end? c)\n    (or (char=? c #\\a)\n        (char=? c #\\e)\n   \
    \     (char=? c #\\i)\n        (char=? c #\\o)\n        (char=? c #\\u)\n    \
    \    (char=? c #\\y)))\n  (define (count_vowels s)\n    (cond\n      [(empty?\
    \ s) 0]\n      [(is_vowel? (first s)) (+ 1 (count_vowels (rest s)))]\n      [else\
    \ (count_vowels (rest s))]))\n  (define (count_vowels_at_end s)\n    (cond\n \
    \     [(empty? s) 0]\n      [(is_vowel_at_end? (first s)) (+ 1 (count_vowels_at_end\
    \ (rest s)))]\n      [else (count_vowels_at_end (rest s))]))\n  (cond\n    [(empty?\
    \ s) 0]\n    [(is_vowel_at_end? (first s)) (+ (count_vowels (rest s)) (count_vowels_at_end\
    \ (rest s)))]\n    [else (+ (count_vowels s) (count_vowels_at_end s))]))\n", " \
    \ (cond\n    [(empty? s) 0]\n    [(or (char=? (first s) #\\a)\n         (char=?\
    \ (first s) #\\e)\n         (char=? (first s) #\\i)\n         (char=? (first s)\
    \ #\\o)\n         (char=? (first s) #\\u))\n     (+ 1 (vowels_count (rest s)))]\n\
    \    [(and (char=? (first s) #\\y)\n          (empty? (rest s)))\n     1]\n  \
    \  [else (vowels_count (rest s))]))\n", "  (cond\n    [(empty? s) 0]\n    [(char-ci=?\
    \ (first s) #\\a) (+ 1 (vowels_count (rest s)))]\n    [(char-ci=? (first s) #\\\
    e) (+ 1 (vowels_count (rest s)))]\n    [(char-ci=? (first s) #\\i) (+ 1 (vowels_count\
    \ (rest s)))]\n    [(char-ci=? (first s) #\\o) (+ 1 (vowels_count (rest s)))]\n\
    \    [(char-ci=? (first s) #\\u) (+ 1 (vowels_count (rest s)))]\n    [(char-ci=?\
    \ (first s) #\\y) (+ 1 (vowels_count (rest s)))]\n    [else (vowels_count (rest\
    \ s))]))\n", "  (define (is-vowel? c)\n    (or (char=? c #\\a)\n        (char=?\
    \ c #\\e)\n        (char=? c #\\i)\n        (char=? c #\\o)\n        (char=? c\
    \ #\\u)))\n  (define (is-vowel-at-end? c)\n    (or (char=? c #\\a)\n        (char=?\
    \ c #\\e)\n        (char=? c #\\i)\n        (char=? c #\\o)\n        (char=? c\
    \ #\\u)\n        (char=? c #\\y)))\n  (define (count-vowels s)\n    (cond ((string-empty?\
    \ s) 0)\n          ((is-vowel? (string-ref s 0))\n           (+ 1 (count-vowels\
    \ (string-drop s 1))))\n          (else (count-vowels (string-drop s 1)))))\n\
    \  (cond ((string-empty? s) 0)\n        ((is-vowel-at-end? (string-ref s (- (string-length\
    \ s) 1)))\n         (+ 1 (count-vowels (string-drop-right s 1))))\n        (else\
    \ (count-vowels (string-drop-right s 1)))))\n", "  (define (vowels_count_helper\
    \ s i)\n    (cond\n      [(= i (string-length s)) 0]\n      [(or (char=? (string-ref\
    \ s i) #\\a)\n           (char=? (string-ref s i) #\\e)\n           (char=? (string-ref\
    \ s i) #\\i)\n           (char=? (string-ref s i) #\\o)\n           (char=? (string-ref\
    \ s i) #\\u)\n           (and (char=? (string-ref s i) #\\y) (= i (- (string-length\
    \ s) 1))))\n       (+ 1 (vowels_count_helper s (+ i 1)))]\n      [else (vowels_count_helper\
    \ s (+ i 1))]))\n  (vowels_count_helper s 0))\n", "  (cond\n    [(empty? s) 0]\n\
    \    [(char-ci=? (first s) #\\a) (+ 1 (vowels_count (rest s)))]\n    [(char-ci=?\
    \ (first s) #\\e) (+ 1 (vowels_count (rest s)))]\n    [(char-ci=? (first s) #\\\
    i) (+ 1 (vowels_count (rest s)))]\n    [(char-ci=? (first s) #\\o) (+ 1 (vowels_count\
    \ (rest s)))]\n    [(char-ci=? (first s) #\\u) (+ 1 (vowels_count (rest s)))]\n\
    \    [(char-ci=? (first s) #\\y) (+ 1 (vowels_count (rest s)))]\n    [else (vowels_count\
    \ (rest s))]))\n", "  (cond\n    [(empty? s) 0]\n    [(or (equal? (first s) 'a)\n\
    \         (equal? (first s) 'e)\n         (equal? (first s) 'i)\n         (equal?\
    \ (first s) 'o)\n         (equal? (first s) 'u))\n     (+ 1 (vowels_count (rest\
    \ s)))]\n    [(and (equal? (first s) 'y)\n          (empty? (rest s)))\n     1]\n\
    \    [else (vowels_count (rest s))]))\n", "  (define (vowels_count_helper s count)\n\
    \    (cond\n      [(empty? s) count]\n      [(or (char=? (first s) #\\a)\n   \
    \        (char=? (first s) #\\e)\n           (char=? (first s) #\\i)\n       \
    \    (char=? (first s) #\\o)\n           (char=? (first s) #\\u))\n       (vowels_count_helper\
    \ (rest s) (+ count 1))]\n      [(and (char=? (first s) #\\y)\n            (empty?\
    \ (rest s)))\n       (vowels_count_helper (rest s) (+ count 1))]\n      [else\
    \ (vowels_count_helper (rest s) count)]))\n  (vowels_count_helper s 0))\n", " \
    \ (cond\n    [(empty? s) 0]\n    [(or (char=? (first s) #\\a)\n         (char=?\
    \ (first s) #\\e)\n         (char=? (first s) #\\i)\n         (char=? (first s)\
    \ #\\o)\n         (char=? (first s) #\\u))\n     (+ 1 (vowels_count (rest s)))]\n\
    \    [(and (char=? (first s) #\\y)\n          (empty? (rest s)))\n     1]\n  \
    \  [else (vowels_count (rest s))]))\n", "  (define (vowels_count-iter s i count)\n\
    \    (cond\n      [(= i (string-length s)) count]\n      [(char-ci=? (string-ref\
    \ s i) #\\a) (vowels_count-iter s (+ i 1) (+ count 1))]\n      [(char-ci=? (string-ref\
    \ s i) #\\e) (vowels_count-iter s (+ i 1) (+ count 1))]\n      [(char-ci=? (string-ref\
    \ s i) #\\i) (vowels_count-iter s (+ i 1) (+ count 1))]\n      [(char-ci=? (string-ref\
    \ s i) #\\o) (vowels_count-iter s (+ i 1) (+ count 1))]\n      [(char-ci=? (string-ref\
    \ s i) #\\u) (vowels_count-iter s (+ i 1) (+ count 1))]\n      [(char-ci=? (string-ref\
    \ s i) #\\y) (vowels_count-iter s (+ i 1) (+ count 1))]\n      [else (vowels_count-iter\
    \ s (+ i 1) count)]))\n  (vowels_count-iter s 0 0))\n", "  (define (is_vowel c)\n\
    \    (or (char=? c #\\a)\n        (char=? c #\\e)\n        (char=? c #\\i)\n \
    \       (char=? c #\\o)\n        (char=? c #\\u)))\n  (define (is_vowel_y c)\n\
    \    (or (char=? c #\\y)\n        (is_vowel c)))\n  (define (vowels_count_helper\
    \ s i)\n    (if (= i (string-length s))\n        0\n        (if (is_vowel_y (string-ref\
    \ s i))\n            (+ 1 (vowels_count_helper s (+ i 1)))\n            (vowels_count_helper\
    \ s (+ i 1)))))\n  (if (string-empty? s)\n      0\n      (if (is_vowel (string-ref\
    \ s (- (string-length s) 1)))\n          (vowels_count_helper s 0)\n         \
    \ (vowels_count_helper s 0))))\n", "  (cond\n    [(empty? s) 0]\n    [(or (char=?\
    \ (first s) #\\a)\n         (char=? (first s) #\\e)\n         (char=? (first s)\
    \ #\\i)\n         (char=? (first s) #\\o)\n         (char=? (first s) #\\u))\n\
    \     (+ 1 (vowels_count (rest s)))]\n    [(and (char=? (first s) #\\y)\n    \
    \      (empty? (rest s)))\n     1]\n    [else (vowels_count (rest s))]))\n", " \
    \ (define (vowels_count_helper s count)\n    (cond ((empty? s) count)\n      \
    \    ((or (equal? (first s) 'a)\n               (equal? (first s) 'e)\n      \
    \         (equal? (first s) 'i)\n               (equal? (first s) 'o)\n      \
    \         (equal? (first s) 'u))\n           (vowels_count_helper (rest s) (+\
    \ count 1)))\n          ((and (equal? (first s) 'y') (empty? (rest s)))\n    \
    \       (vowels_count_helper (rest s) (+ count 1)))\n          (else (vowels_count_helper\
    \ (rest s) count))))\n  (vowels_count_helper s 0))\n", "  (define (is_vowel c)\n\
    \    (or (equal? c #\\a)\n        (equal? c #\\e)\n        (equal? c #\\i)\n \
    \       (equal? c #\\o)\n        (equal? c #\\u)))\n  (define (is_vowel_y c)\n\
    \    (or (is_vowel c)\n        (and (equal? c #\\y)\n             (equal? (string-length\
    \ s) (add1 (string-index s c))))))\n  (define (count_vowels s)\n    (cond\n  \
    \    [(empty? s) 0]\n      [(is_vowel_y (first s)) (add1 (count_vowels (rest s)))]\n\
    \      [else (count_vowels (rest s))]))\n  (count_vowels s))\n", "  (cond\n  \
    \  [(empty? s) 0]\n    [(or (char=? (first s) #\\a)\n         (char=? (first s)\
    \ #\\e)\n         (char=? (first s) #\\i)\n         (char=? (first s) #\\o)\n\
    \         (char=? (first s) #\\u))\n     (+ 1 (vowels_count (rest s)))]\n    [(and\
    \ (char=? (first s) #\\y)\n          (empty? (rest s)))\n     (+ 1 (vowels_count\
    \ (rest s)))]\n    [else (vowels_count (rest s))]))\n", "  (cond\n    [(empty?\
    \ s) 0]\n    [(char-ci=? (first s) #\\a) (+ 1 (vowels_count (rest s)))]\n    [(char-ci=?\
    \ (first s) #\\e) (+ 1 (vowels_count (rest s)))]\n    [(char-ci=? (first s) #\\\
    i) (+ 1 (vowels_count (rest s)))]\n    [(char-ci=? (first s) #\\o) (+ 1 (vowels_count\
    \ (rest s)))]\n    [(char-ci=? (first s) #\\u) (+ 1 (vowels_count (rest s)))]\n\
    \    [(char-ci=? (first s) #\\y) (+ 1 (vowels_count (rest s)))]\n    [else (vowels_count\
    \ (rest s))]))\n", "  (cond\n    [(empty? s) 0]\n    [(or (char=? (first s) #\\\
    a)\n         (char=? (first s) #\\e)\n         (char=? (first s) #\\i)\n     \
    \    (char=? (first s) #\\o)\n         (char=? (first s) #\\u))\n     (+ 1 (vowels_count\
    \ (rest s)))]\n    [(and (char=? (first s) #\\y)\n          (empty? (rest s)))\n\
    \     1]\n    [else (vowels_count (rest s))]))\n", "  (define (vowels_count_helper\
    \ s i)\n    (if (= i (string-length s))\n        0\n        (if (or (= (string-ref\
    \ s i) #\\a)\n                (= (string-ref s i) #\\e)\n                (= (string-ref\
    \ s i) #\\i)\n                (= (string-ref s i) #\\o)\n                (= (string-ref\
    \ s i) #\\u)\n                (= (string-ref s i) #\\y))\n            (+ 1 (vowels_count_helper\
    \ s (+ i 1)))\n            (vowels_count_helper s (+ i 1)))))\n  (vowels_count_helper\
    \ s 0))\n", "  (cond\n    [(empty? s) 0]\n    [(or (char=? (first s) #\\a)\n \
    \        (char=? (first s) #\\e)\n         (char=? (first s) #\\i)\n         (char=?\
    \ (first s) #\\o)\n         (char=? (first s) #\\u))\n     (+ 1 (vowels_count\
    \ (rest s)))]\n    [(and (char=? (first s) #\\y)\n          (empty? (rest s)))\n\
    \     1]\n    [else (vowels_count (rest s))]))\n", "  (cond\n    [(empty? s) 0]\n\
    \    [(or (char=? (first s) #\\a)\n         (char=? (first s) #\\e)\n        \
    \ (char=? (first s) #\\i)\n         (char=? (first s) #\\o)\n         (char=?\
    \ (first s) #\\u))\n     (+ 1 (vowels_count (rest s)))]\n    [(and (char=? (first\
    \ s) #\\y)\n          (empty? (rest s)))\n     1]\n    [else (vowels_count (rest\
    \ s))]))\n", "  (cond\n    [(empty? s) 0]\n    [(member (first s) '(\"a\" \"e\"\
    \ \"i\" \"o\" \"u\"))\n     (+ 1 (vowels_count (rest s)))]\n    [else (vowels_count\
    \ (rest s))]))\n", "  (cond\n    [(empty? s) 0]\n    [(or (char=? (first s) #\\\
    a)\n         (char=? (first s) #\\e)\n         (char=? (first s) #\\i)\n     \
    \    (char=? (first s) #\\o)\n         (char=? (first s) #\\u))\n     (+ 1 (vowels_count\
    \ (rest s)))]\n    [(and (char=? (first s) #\\y)\n          (empty? (rest s)))\n\
    \     1]\n    [else (vowels_count (rest s))]))\n", "  (cond\n    [(empty? s) 0]\n\
    \    [(or (equal? (first s) #\\a)\n         (equal? (first s) #\\e)\n        \
    \ (equal? (first s) #\\i)\n         (equal? (first s) #\\o)\n         (equal?\
    \ (first s) #\\u))\n     (+ 1 (vowels_count (rest s)))]\n    [(and (equal? (first\
    \ s) #\\y)\n          (empty? (rest s)))\n     1]\n    [else (vowels_count (rest\
    \ s))]))\n", "  (define (is-vowel c)\n    (or (char=? c #\\a)\n        (char=?\
    \ c #\\e)\n        (char=? c #\\i)\n        (char=? c #\\o)\n        (char=? c\
    \ #\\u)))\n  (define (is-y c)\n    (char=? c #\\y))\n  (define (is-vowel-or-y\
    \ c)\n    (or (is-vowel c)\n        (is-y c)))\n  (define (is-last-char? c)\n\
    \    (char=? c (string-ref s (- (string-length s) 1))))\n  (define (is-last-y?\
    \ c)\n    (and (is-y c)\n         (is-last-char? c)))\n  (define (is-vowel-or-last-y?\
    \ c)\n    (or (is-vowel c)\n        (is-last-y? c)))\n  (define (count-vowels\
    \ s)\n    (cond ((string=? s \"\") 0)\n          ((is-vowel-or-last-y? (string-ref\
    \ s 0))\n           (+ 1 (count-vowels (substring s 1))))\n          (else (count-vowels\
    \ (substring s 1)))))\n  (count-vowels s))\n", "  (define (is-vowel c)\n    (or\
    \ (char=? c #\\a)\n        (char=? c #\\e)\n        (char=? c #\\i)\n        (char=?\
    \ c #\\o)\n        (char=? c #\\u)))\n  (define (is-y c)\n    (char=? c #\\y))\n\
    \  (define (is-last-y c)\n    (and (is-y c)\n         (null? (cdr s))))\n  (define\
    \ (is-vowel-or-last-y c)\n    (or (is-vowel c)\n        (is-last-y c)))\n  (define\
    \ (count-vowels s)\n    (cond ((null? s) 0)\n          ((is-vowel-or-last-y (car\
    \ s)) (+ 1 (count-vowels (cdr s))))\n          (else (count-vowels (cdr s)))))\n\
    \  (count-vowels s))\n", "  (cond\n    [(empty? s) 0]\n    [(or (char=? (first\
    \ s) #\\a)\n         (char=? (first s) #\\e)\n         (char=? (first s) #\\i)\n\
    \         (char=? (first s) #\\o)\n         (char=? (first s) #\\u))\n     (+\
    \ 1 (vowels_count (rest s)))]\n    [(and (char=? (first s) #\\y)\n          (empty?\
    \ (rest s)))\n     1]\n    [else (vowels_count (rest s))]))\n", "  (define (vowels_count-iter\
    \ s count)\n    (cond\n      [(empty? s) count]\n      [(char-ci=? (first s) #\\\
    a) (vowels_count-iter (rest s) (+ count 1))]\n      [(char-ci=? (first s) #\\\
    e) (vowels_count-iter (rest s) (+ count 1))]\n      [(char-ci=? (first s) #\\\
    i) (vowels_count-iter (rest s) (+ count 1))]\n      [(char-ci=? (first s) #\\\
    o) (vowels_count-iter (rest s) (+ count 1))]\n      [(char-ci=? (first s) #\\\
    u) (vowels_count-iter (rest s) (+ count 1))]\n      [(char-ci=? (first s) #\\\
    y) (vowels_count-iter (rest s) (+ count 1))]\n      [else (vowels_count-iter (rest\
    \ s) count)]))\n  (vowels_count-iter s 0))\n", "  (cond\n    [(empty? s) 0]\n\
    \    [(or (char=? (first s) #\\a)\n         (char=? (first s) #\\e)\n        \
    \ (char=? (first s) #\\i)\n         (char=? (first s) #\\o)\n         (char=?\
    \ (first s) #\\u))\n     (+ 1 (vowels_count (rest s)))]\n    [(and (char=? (first\
    \ s) #\\y)\n          (empty? (rest s)))\n     1]\n    [else (vowels_count (rest\
    \ s))]))\n", "  (cond\n    [(empty? s) 0]\n    [(or (char=? (first s) #\\a)\n\
    \         (char=? (first s) #\\e)\n         (char=? (first s) #\\i)\n        \
    \ (char=? (first s) #\\o)\n         (char=? (first s) #\\u))\n     (+ 1 (vowels_count\
    \ (rest s)))]\n    [(and (char=? (first s) #\\y)\n          (empty? (rest s)))\n\
    \     1]\n    [else (vowels_count (rest s))]))\n", "  (define (is_vowel? c)\n\
    \    (or (equal? c #\\a)\n        (equal? c #\\e)\n        (equal? c #\\i)\n \
    \       (equal? c #\\o)\n        (equal? c #\\u)))\n  (define (vowels_count_helper\
    \ s i)\n    (if (equal? i (string-length s))\n        0\n        (if (is_vowel?\
    \ (string-ref s i))\n            (+ 1 (vowels_count_helper s (+ i 1)))\n     \
    \       (vowels_count_helper s (+ i 1)))))\n  (if (equal? (string-length s) 0)\n\
    \      0\n      (if (is_vowel? (string-ref s (- (string-length s) 1)))\n     \
    \     (vowels_count_helper s 0)\n          (+ (vowels_count_helper s 0) 1))))\n",
  "  (cond\n    [(empty? s) 0]\n    [(char-ci=? (first s) #\\a) (+ 1 (vowels_count\
    \ (rest s)))]\n    [(char-ci=? (first s) #\\e) (+ 1 (vowels_count (rest s)))]\n\
    \    [(char-ci=? (first s) #\\i) (+ 1 (vowels_count (rest s)))]\n    [(char-ci=?\
    \ (first s) #\\o) (+ 1 (vowels_count (rest s)))]\n    [(char-ci=? (first s) #\\\
    u) (+ 1 (vowels_count (rest s)))]\n    [(char-ci=? (first s) #\\y) (+ 1 (vowels_count\
    \ (rest s)))]\n    [else (vowels_count (rest s))]))\n", "  (cond\n    [(empty?\
    \ s) 0]\n    [(char-ci=? (first s) #\\a) (add1 (vowels_count (rest s)))]\n   \
    \ [(char-ci=? (first s) #\\e) (add1 (vowels_count (rest s)))]\n    [(char-ci=?\
    \ (first s) #\\i) (add1 (vowels_count (rest s)))]\n    [(char-ci=? (first s) #\\\
    o) (add1 (vowels_count (rest s)))]\n    [(char-ci=? (first s) #\\u) (add1 (vowels_count\
    \ (rest s)))]\n    [(char-ci=? (first s) #\\y) (add1 (vowels_count (rest s)))]\n\
    \    [else (vowels_count (rest s))]))\n", "  (cond\n    [(empty? s) 0]\n    [(equal?\
    \ (first s) 'a) (+ 1 (vowels_count (rest s)))]\n    [(equal? (first s) 'e) (+\
    \ 1 (vowels_count (rest s)))]\n    [(equal? (first s) 'i) (+ 1 (vowels_count (rest\
    \ s)))]\n    [(equal? (first s) 'o) (+ 1 (vowels_count (rest s)))]\n    [(equal?\
    \ (first s) 'u) (+ 1 (vowels_count (rest s)))]\n    [(equal? (first s) 'y) (+\
    \ 1 (vowels_count (rest s)))]\n    [else (vowels_count (rest s))]))\n", "  (cond\n\
    \    [(empty? s) 0]\n    [(or (char=? (first s) #\\a)\n         (char=? (first\
    \ s) #\\e)\n         (char=? (first s) #\\i)\n         (char=? (first s) #\\o)\n\
    \         (char=? (first s) #\\u))\n     (+ 1 (vowels_count (rest s)))]\n    [(and\
    \ (char=? (first s) #\\y)\n          (empty? (rest s)))\n     1]\n    [else (vowels_count\
    \ (rest s))]))\n", "  (cond\n    [(empty? s) 0]\n    [(or (char=? (first s) #\\\
    a)\n         (char=? (first s) #\\e)\n         (char=? (first s) #\\i)\n     \
    \    (char=? (first s) #\\o)\n         (char=? (first s) #\\u))\n     (+ 1 (vowels_count\
    \ (rest s)))]\n    [(and (char=? (first s) #\\y)\n          (empty? (rest s)))\n\
    \     (+ 1 (vowels_count (rest s)))]\n    [else (vowels_count (rest s))]))\n",
  "  (define (vowels_count_iter s i)\n    (cond ((= i (string-length s)) 0)\n    \
    \      ((or (char=? (string-ref s i) #\\a)\n               (char=? (string-ref\
    \ s i) #\\e)\n               (char=? (string-ref s i) #\\i)\n               (char=?\
    \ (string-ref s i) #\\o)\n               (char=? (string-ref s i) #\\u)\n    \
    \           (and (= i (- (string-length s) 1))\n                    (char=? (string-ref\
    \ s i) #\\y)))\n           (+ 1 (vowels_count_iter s (+ i 1))))\n          (else\
    \ (vowels_count_iter s (+ i 1)))))\n  (vowels_count_iter s 0))\n", "  (cond\n\
    \    [(empty? s) 0]\n    [(or (char=? (first s) #\\a)\n         (char=? (first\
    \ s) #\\e)\n         (char=? (first s) #\\i)\n         (char=? (first s) #\\o)\n\
    \         (char=? (first s) #\\u))\n     (+ 1 (vowels_count (rest s)))]\n    [(and\
    \ (char=? (first s) #\\y)\n          (empty? (rest s)))\n     1]\n    [else (vowels_count\
    \ (rest s))]))\n", "  (cond\n    [(empty? s) 0]\n    [(or (char=? (first s) #\\\
    a)\n         (char=? (first s) #\\e)\n         (char=? (first s) #\\i)\n     \
    \    (char=? (first s) #\\o)\n         (char=? (first s) #\\u))\n     (+ 1 (vowels_count\
    \ (rest s)))]\n    [(and (char=? (first s) #\\y)\n          (empty? (rest s)))\n\
    \     1]\n    [else (vowels_count (rest s))]))\n", "  (cond\n    [(empty? s) 0]\n\
    \    [(member (first s) '(#\\a #\\e #\\i #\\o #\\u))\n     (+ 1 (vowels_count\
    \ (rest s)))]\n    [(and (equal? (first s) #\\y) (empty? (rest s))) 1]\n    [else\
    \ (vowels_count (rest s))]))\n", "  (cond\n    [(empty? s) 0]\n    [(member (first\
    \ s) '(\"a\" \"e\" \"i\" \"o\" \"u\"))\n     (+ 1 (vowels_count (rest s)))]\n\
    \    [else (vowels_count (rest s))]))\n", "  (cond\n    [(empty? s) 0]\n    [(or\
    \ (char=? (first s) #\\a)\n         (char=? (first s) #\\e)\n         (char=?\
    \ (first s) #\\i)\n         (char=? (first s) #\\o)\n         (char=? (first s)\
    \ #\\u))\n     (+ 1 (vowels_count (rest s)))]\n    [(and (char=? (first s) #\\\
    y)\n          (empty? (rest s)))\n     1]\n    [else (vowels_count (rest s))]))\n",
  "  (define (is-vowel c)\n    (member c '(#\\a #\\e #\\i #\\o #\\u)))\n  (define\
    \ (is-vowel-at-end c)\n    (and (is-vowel c)\n         (or (null? (cdr s))\n \
    \            (not (is-vowel (car (cdr s)))))))\n  (cond\n    [(null? s) 0]\n \
    \   [(is-vowel-at-end (car s))\n     (+ 1 (vowels_count (cdr s)))]\n    [else\
    \ (vowels_count (cdr s))]))\n", "  (cond\n    [(empty? s) 0]\n    [(char-ci=?\
    \ (first s) #\\a) (+ 1 (vowels_count (rest s)))]\n    [(char-ci=? (first s) #\\\
    e) (+ 1 (vowels_count (rest s)))]\n    [(char-ci=? (first s) #\\i) (+ 1 (vowels_count\
    \ (rest s)))]\n    [(char-ci=? (first s) #\\o) (+ 1 (vowels_count (rest s)))]\n\
    \    [(char-ci=? (first s) #\\u) (+ 1 (vowels_count (rest s)))]\n    [(char-ci=?\
    \ (first s) #\\y)\n     (if (empty? (rest s))\n         (+ 1 (vowels_count (rest\
    \ s)))\n         (vowels_count (rest s)))]\n    [else (vowels_count (rest s))]))\n",
  "  (cond\n    [(empty? s) 0]\n    [(char-ci=? (first s) #\\a) (add1 (vowels_count\
    \ (rest s)))]\n    [(char-ci=? (first s) #\\e) (add1 (vowels_count (rest s)))]\n\
    \    [(char-ci=? (first s) #\\i) (add1 (vowels_count (rest s)))]\n    [(char-ci=?\
    \ (first s) #\\o) (add1 (vowels_count (rest s)))]\n    [(char-ci=? (first s) #\\\
    u) (add1 (vowels_count (rest s)))]\n    [(char-ci=? (first s) #\\y) (if (empty?\
    \ (rest s))\n                                   (add1 (vowels_count (rest s)))\n\
    \                                   (vowels_count (rest s)))]\n    [else (vowels_count\
    \ (rest s))]))\n", "  (cond\n    [(empty? s) 0]\n    [(member (first s) '(#\\\
    a #\\e #\\i #\\o #\\u))\n     (+ 1 (vowels_count (rest s)))]\n    [(and (equal?\
    \ (first s) #\\y) (empty? (rest s))) 1]\n    [else (vowels_count (rest s))]))\n",
  "  (cond\n    [(empty? s) 0]\n    [(or (char=? (first s) #\\a)\n         (char=?\
    \ (first s) #\\e)\n         (char=? (first s) #\\i)\n         (char=? (first s)\
    \ #\\o)\n         (char=? (first s) #\\u))\n     (+ 1 (vowels_count (rest s)))]\n\
    \    [(and (char=? (first s) #\\y)\n          (empty? (rest s)))\n     1]\n  \
    \  [else (vowels_count (rest s))]))\n"]
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
