name: HumanEval_24_largest_divisor
language: racket
prompt: "#lang racket\n\n;; For a given number n, find the largest number that divides\
  \ n evenly, smaller than n\n;; >>> largest_divisor(15)\n;; 5\n(define (largest_divisor\
  \ n)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate largest_divisor))\n\
  \    (check-equal? (candidate 3) 1)\n    (check-equal? (candidate 7) 1)\n    (check-equal?\
  \ (candidate 10) 5)\n    (check-equal? (candidate 100) 50)\n    (check-equal? (candidate\
  \ 49) 7)\n))\n\n(test-humaneval)"
completions: ["  (define (largest_divisor-iter n i)\n    (if (= (modulo n i) 0)\n\
    \        (largest_divisor-iter n (+ i 1))\n        (- i 1)))\n  (largest_divisor-iter\
    \ n 2))\n", "  (define (largest-divisor-iter n i)\n    (if (= (modulo n i) 0)\n\
    \        (largest-divisor-iter n (+ i 1))\n        (- i 1)))\n  (largest-divisor-iter\
    \ n 2))\n", "  (define (largest-divisor-iter n i)\n    (if (= (modulo n i) 0)\n\
    \        (largest-divisor-iter n (+ i 1))\n        (- i 1)))\n  (largest-divisor-iter\
    \ n 2))\n", "  (define (largest_divisor-iter n i)\n    (if (= (modulo n i) 0)\n\
    \        (largest_divisor-iter n (+ i 1))\n        (- i 1)))\n  (largest_divisor-iter\
    \ n 2))\n", "  (define (largest_divisor-iter i)\n    (if (= (modulo n i) 0)\n\
    \        i\n        (largest_divisor-iter (- i 1))))\n  (largest_divisor-iter\
    \ (/ n 2)))\n", "  (define (largest-divisor-iter n i)\n    (if (= (modulo n i)\
    \ 0)\n        (largest-divisor-iter n (+ i 1))\n        (- i 1)))\n  (largest-divisor-iter\
    \ n 2))\n", "  (define (divisor n d)\n    (if (= (remainder n d) 0)\n        d\n\
    \        (divisor n (- d 1))))\n  (divisor n (- n 1)))\n", "  (define (largest-divisor-iter\
    \ n divisor)\n    (if (= 0 (modulo n divisor))\n        divisor\n        (largest-divisor-iter\
    \ n (- divisor 1))))\n  (largest-divisor-iter n (- n 1)))\n", "  (define (largest-divisor-iter\
    \ n i)\n    (if (= (modulo n i) 0)\n        i\n        (largest-divisor-iter n\
    \ (- i 1))))\n  (largest-divisor-iter n (- n 1)))\n", "  (define (largest-divisor-iter\
    \ n i)\n    (if (zero? (modulo n i))\n        i\n        (largest-divisor-iter\
    \ n (- i 1))))\n  (largest-divisor-iter n (- n 1)))\n", "  (define (largest-divisor-iter\
    \ n i)\n    (if (= (modulo n i) 0)\n        i\n        (largest-divisor-iter n\
    \ (- i 1))))\n  (largest-divisor-iter n (- n 1)))\n", "  (define (largest-divisor-iter\
    \ n i)\n    (if (= (modulo n i) 0)\n        i\n        (largest-divisor-iter n\
    \ (- i 1))))\n  (largest-divisor-iter n (/ n 2)))\n", "  (define (largest-divisor-iter\
    \ n i)\n    (if (= (modulo n i) 0)\n        (largest-divisor-iter n (+ i 1))\n\
    \        (- i 1)))\n  (largest-divisor-iter n 2))\n", "  (define (largest_divisor_iter\
    \ n i)\n    (if (= (modulo n i) 0)\n        (largest_divisor_iter n (+ i 1))\n\
    \        (- i 1)))\n  (largest_divisor_iter n 2))\n", "  (define (largest-divisor-iter\
    \ n d)\n    (if (= (remainder n d) 0)\n        (largest-divisor-iter n (- d 1))\n\
    \        d))\n  (largest-divisor-iter n (/ n 2)))\n", "  (define (largest-divisor-iter\
    \ n i)\n    (if (or (= i 1) (= (modulo n i) 0))\n        i\n        (largest-divisor-iter\
    \ n (- i 1))))\n  (largest-divisor-iter n (/ n 2)))\n", "  (define (largest-divisor-iter\
    \ n i)\n    (if (= n i)\n        n\n        (if (= (modulo n i) 0)\n         \
    \   (largest-divisor-iter n (- i 1))\n            (largest-divisor-iter n (- i\
    \ 1)))))\n  (largest-divisor-iter n (- n 1)))\n", "  (define (largest_divisor-iter\
    \ n i)\n    (if (= (modulo n i) 0)\n        i\n        (largest_divisor-iter n\
    \ (- i 1))))\n  (largest_divisor-iter n (- n 1)))\n", "  (define (divisor n i)\n\
    \    (if (= (modulo n i) 0)\n        i\n        (divisor n (+ i 1))))\n  (divisor\
    \ n 2))\n", "  (define (largest-divisor-iter n i)\n    (if (= (modulo n i) 0)\n\
    \        i\n        (largest-divisor-iter n (- i 1))))\n  (largest-divisor-iter\
    \ n (/ n 2)))\n", "  (define (divisor n i)\n    (if (= (modulo n i) 0)\n     \
    \   i\n        (divisor n (+ i 1))))\n  (divisor n 2))\n", "  (define (largest-divisor-iter\
    \ n i)\n    (if (= n i)\n        n\n        (if (= (modulo n i) 0)\n         \
    \   (largest-divisor-iter n (+ i 1))\n            (largest-divisor-iter n (+ i\
    \ 1)))))\n  (largest-divisor-iter n 2))\n", "  (define (largest-divisor-iter n\
    \ i)\n    (if (= (modulo n i) 0)\n        (largest-divisor-iter n (+ i 1))\n \
    \       (- i 1)))\n  (largest-divisor-iter n 2))\n", "  (define (largest-divisor-iter\
    \ n i)\n    (if (= (modulo n i) 0)\n        (largest-divisor-iter n (+ i 1))\n\
    \        (- i 1)))\n  (largest-divisor-iter n 2))\n", "  (define (largest-divisor-iter\
    \ n i)\n    (if (= 0 (modulo n i))\n        i\n        (largest-divisor-iter n\
    \ (- i 1))))\n  (largest-divisor-iter n (/ n 2)))\n", "  (define (largest-divisor-iter\
    \ n i)\n    (if (= (modulo n i) 0)\n        (largest-divisor-iter n (+ i 1))\n\
    \        (- i 1)))\n  (largest-divisor-iter n 2))\n", "  (define (largest-divisor-iter\
    \ n i)\n    (if (= (modulo n i) 0)\n        (largest-divisor-iter n (+ i 1))\n\
    \        (- i 1)))\n  (largest-divisor-iter n 2))\n", "  (define (largest-divisor-iter\
    \ n i)\n    (if (= (modulo n i) 0)\n        i\n        (largest-divisor-iter n\
    \ (- i 1))))\n  (largest-divisor-iter n (/ n 2)))\n", "  (define (largest_divisor-iter\
    \ n i)\n    (if (= (modulo n i) 0)\n        (largest_divisor-iter n (+ i 1))\n\
    \        (- i 1)))\n  (largest_divisor-iter n 2))\n", "  (define (largest-divisor-iter\
    \ n i)\n    (if (= (modulo n i) 0)\n        (largest-divisor-iter n (+ i 1))\n\
    \        (- i 1)))\n  (largest-divisor-iter n 2))\n", "  (define (largest-divisor-iter\
    \ n i)\n    (if (= 0 (modulo n i))\n        i\n        (largest-divisor-iter n\
    \ (- i 1))))\n  (largest-divisor-iter n (- n 1)))\n", "  (define (largest-divisor-iter\
    \ n i)\n    (if (= 0 (modulo n i))\n        i\n        (largest-divisor-iter n\
    \ (- i 1))))\n  (largest-divisor-iter n (/ n 2)))\n", "  (define (divisor n d)\n\
    \    (if (= (remainder n d) 0)\n        d\n        (divisor n (- d 1))))\n  (divisor\
    \ n (- n 1)))\n", "  (define (largest-divisor-iter n i)\n    (if (= (modulo n\
    \ i) 0)\n        (largest-divisor-iter n (+ i 1))\n        (- i 1)))\n  (largest-divisor-iter\
    \ n 2))\n", "  (define (divisor n i)\n    (if (= (modulo n i) 0)\n        i\n\
    \        (divisor n (- i 1))))\n  (divisor n (- n 1)))\n", "  (define (largest-divisor-iter\
    \ n i)\n    (if (= (modulo n i) 0)\n        (largest-divisor-iter n (+ i 1))\n\
    \        (- i 1)))\n  (largest-divisor-iter n 2))\n", "  (define (find-divisor\
    \ n test-divisor)\n    (cond ((> (square test-divisor) n) n)\n          ((divides?\
    \ test-divisor n) (find-divisor n (+ test-divisor 1)))\n          (else (find-divisor\
    \ n (+ test-divisor 1)))))\n  (find-divisor n 2))\n", "  (define (largest-divisor-iter\
    \ n i)\n    (if (= 0 (modulo n i))\n        i\n        (largest-divisor-iter n\
    \ (- i 1))))\n  (largest-divisor-iter n (/ n 2)))\n", "  (define (largest-divisor-iter\
    \ n i)\n    (if (= (modulo n i) 0)\n        (largest-divisor-iter n (+ i 1))\n\
    \        (- i 1)))\n  (largest-divisor-iter n 2))\n", "  (define (ld n div)\n\
    \    (if (= (modulo n div) 0)\n        (ld n (- div 1))\n        div))\n  (ld\
    \ n (- n 1)))\n", "  (define (divisor n i)\n    (if (= (modulo n i) 0)\n     \
    \   i\n        (divisor n (+ i 1))))\n  (divisor n 2))\n", "  (define (divisor\
    \ n i)\n    (if (= n i)\n        n\n        (if (= (modulo n i) 0)\n         \
    \   i\n            (divisor n (+ i 1)))))\n  (divisor n 2))\n", "  (define (largest-divisor-iter\
    \ n i)\n    (if (= (modulo n i) 0)\n        (largest-divisor-iter n (+ i 1))\n\
    \        (- i 1)))\n  (largest-divisor-iter n 2))\n", "  (define (largest-divisor-iter\
    \ n i)\n    (if (= (modulo n i) 0)\n        i\n        (largest-divisor-iter n\
    \ (+ i 1))))\n  (largest-divisor-iter n 2))\n", "  (define (largest_divisor-iter\
    \ n i)\n    (if (= (modulo n i) 0)\n        i\n        (largest_divisor-iter n\
    \ (- i 1))))\n  (largest_divisor-iter n (- n 1)))\n", "  (define (largest-divisor-iter\
    \ n i)\n    (if (= (modulo n i) 0)\n        (largest-divisor-iter n (+ i 1))\n\
    \        (- i 1)))\n  (largest-divisor-iter n 2))\n", "  (define (largest-divisor-iter\
    \ n i)\n    (if (and (integer? (/ n i)) (= (remainder n i) 0))\n        i\n  \
    \      (largest-divisor-iter n (+ i 1))))\n  (largest-divisor-iter n 2))\n", " \
    \ (define (largest-divisor-iter n i)\n    (if (= n i)\n        n\n        (if\
    \ (= (modulo n i) 0)\n            (largest-divisor-iter n (+ i 1))\n         \
    \   (largest-divisor-iter n (+ i 1)))))\n  (largest-divisor-iter n 2))\n", " \
    \ (define (largest-divisor-iter n i)\n    (if (= (modulo n i) 0)\n        (largest-divisor-iter\
    \ n (+ i 1))\n        (- i 1)))\n  (largest-divisor-iter n 2))\n", "  (define\
    \ (largest-divisor-iter n i)\n    (if (= (modulo n i) 0)\n        i\n        (largest-divisor-iter\
    \ n (- i 1))))\n  (largest-divisor-iter n (- n 1)))\n", "  (if (= n 1)\n     \
    \ 1\n      (let loop ([i (- n 1)])\n        (if (= (modulo n i) 0)\n         \
    \   i\n            (loop (- i 1))))))\n", "  (define (largest_divisor-iter n i)\n\
    \    (if (= (modulo n i) 0)\n        i\n        (largest_divisor-iter n (- i 1))))\n\
    \  (largest_divisor-iter n (- n 1)))\n", "  (define (largest_divisor_iter n i)\n\
    \    (if (= n i)\n        (error \"No divisors found\")\n        (if (= (modulo\
    \ n i) 0)\n            i\n            (largest_divisor_iter n (+ i 1)))))\n  (largest_divisor_iter\
    \ n 2))\n", "  (define (largest-divisor-iter n i)\n    (if (= n i)\n        1\n\
    \        (if (= (modulo n i) 0)\n            i\n            (largest-divisor-iter\
    \ n (+ i 1)))))\n  (largest-divisor-iter n 2))\n", "  (define (largest-divisor-iter\
    \ n i)\n    (if (= (modulo n i) 0)\n        (largest-divisor-iter n (+ i 1))\n\
    \        (- i 1)))\n  (largest-divisor-iter n 2))\n", "  (define (ld n i)\n  \
    \  (if (= 0 (modulo n i))\n        i\n        (ld n (- i 1))))\n  (ld n (- n 1)))\n",
  "  (define (largest-divisor-iter n i)\n    (if (= 0 (modulo n i))\n        i\n \
    \       (largest-divisor-iter n (- i 1))))\n  (largest-divisor-iter n (/ n 2)))\n",
  "  (define (largest-divisor-iter n i)\n    (if (= (modulo n i) 0)\n        (largest-divisor-iter\
    \ n (+ i 1))\n        (- i 1)))\n  (largest-divisor-iter n 2))\n", "  (let loop\
    \ ([i n])\n    (if (zero? (modulo n i))\n        i\n        (loop (- i 1)))))\n",
  "  (define (largest_divisor_iter n i)\n    (if (= (modulo n i) 0)\n        (largest_divisor_iter\
    \ n (+ i 1))\n        (- i 1)))\n  (largest_divisor_iter n 2))\n", "  (define\
    \ (largest-divisor-iter n i)\n    (if (= (modulo n i) 0)\n        (largest-divisor-iter\
    \ n (+ i 1))\n        (- i 1)))\n  (largest-divisor-iter n 2))\n", "  (define\
    \ (largest-divisor-iter n i)\n    (if (= (modulo n i) 0)\n        (largest-divisor-iter\
    \ n (+ i 1))\n        (- i 1)))\n  (largest-divisor-iter n 2))\n", "  (define\
    \ (largest-divisor-iter n i)\n    (if (= (modulo n i) 0)\n        i\n        (largest-divisor-iter\
    \ n (- i 1))))\n  (largest-divisor-iter n (- n 1)))\n", "  (define (largest-divisor-iter\
    \ n divisor)\n    (if (= (modulo n divisor) 0)\n        (largest-divisor-iter\
    \ n (+ divisor 1))\n        (- divisor 1)))\n  (largest-divisor-iter n 2))\n",
  "  (define (divisor-iter test-divisor)\n    (if (= (remainder n test-divisor) 0)\n\
    \        test-divisor\n        (divisor-iter (- test-divisor 1))))\n  (divisor-iter\
    \ (/ n 2)))\n", "  (define (largest-divisor-iter n i)\n    (if (= 0 (modulo n\
    \ i))\n        i\n        (largest-divisor-iter n (- i 1))))\n  (largest-divisor-iter\
    \ n (/ n 2)))\n", "  (define (largest-divisor-iter n divisor)\n    (if (= (modulo\
    \ n divisor) 0)\n        (largest-divisor-iter n (- divisor 1))\n        divisor))\n\
    \  (largest-divisor-iter n (/ n 2)))\n", "  (define (largest-divisor-iter n i)\n\
    \    (if (= (modulo n i) 0)\n        (largest-divisor-iter n (+ i 1))\n      \
    \  (- i 1)))\n  (largest-divisor-iter n 2))\n", "  (define (largest-divisor-iter\
    \ n i)\n    (if (= (modulo n i) 0)\n        (largest-divisor-iter n (+ i 1))\n\
    \        (- i 1)))\n  (largest-divisor-iter n 2))\n", "  (define (largest-divisor-iter\
    \ n test-divisor)\n    (if (= (remainder n test-divisor) 0)\n        (largest-divisor-iter\
    \ n (- test-divisor 1))\n        test-divisor))\n  (largest-divisor-iter n (-\
    \ n 1)))\n", "  (define (iter i)\n    (if (= (modulo n i) 0)\n        i\n    \
    \    (iter (- i 1))))\n  (iter (- n 1)))\n", "  (define (largest-divisor-iter\
    \ n i)\n    (if (= (modulo n i) 0)\n        (largest-divisor-iter n (+ i 1))\n\
    \        (- i 1)))\n  (largest-divisor-iter n 2))\n", "  (define (largest_divisor-iter\
    \ n i)\n    (if (= (modulo n i) 0)\n        (largest_divisor-iter n (+ i 1))\n\
    \        (- i 1)))\n  (largest_divisor-iter n 2))\n", "  (define (largest-divisor-iter\
    \ n i)\n    (if (= (modulo n i) 0)\n        i\n        (largest-divisor-iter n\
    \ (- i 1))))\n  (largest-divisor-iter n (- n 1)))\n", "  (define (largest-divisor-iter\
    \ n i)\n    (if (= (modulo n i) 0)\n        i\n        (largest-divisor-iter n\
    \ (- i 1))))\n  (largest-divisor-iter n (- n 1)))\n", "  (define (largest-divisor-iter\
    \ n i)\n    (if (= (modulo n i) 0)\n        (largest-divisor-iter n (+ i 1))\n\
    \        (- i 1)))\n  (largest-divisor-iter n 2))\n", "  (define (largest-divisor-iter\
    \ n i)\n    (if (= (modulo n i) 0)\n        (largest-divisor-iter n (+ i 1))\n\
    \        (- i 1)))\n  (largest-divisor-iter n 2))\n", "  (define (largest_divisor-iter\
    \ n i)\n    (if (= (modulo n i) 0)\n        i\n        (largest_divisor-iter n\
    \ (- i 1))))\n  (largest_divisor-iter n (- n 1)))\n", "  (define (largest-divisor-iter\
    \ n i)\n    (if (= (modulo n i) 0)\n        (largest-divisor-iter n (+ i 1))\n\
    \        (- i 1)))\n  (largest-divisor-iter n 2))\n", "  (define (largest-divisor-iter\
    \ n i)\n    (if (= (modulo n i) 0)\n        (largest-divisor-iter n (+ i 1))\n\
    \        (- i 1)))\n  (largest-divisor-iter n 2))\n", "  (define (largest_divisor-iter\
    \ n i)\n    (if (= (modulo n i) 0)\n        (largest_divisor-iter n (+ i 1))\n\
    \        (- i 1)))\n  (largest_divisor-iter n 2))\n", "  (define (largest-divisor-iter\
    \ n i)\n    (if (= (modulo n i) 0)\n        i\n        (largest-divisor-iter n\
    \ (- i 1))))\n  (largest-divisor-iter n (- n 1)))\n", "  (define (largest-divisor-iter\
    \ n i)\n    (if (= (modulo n i) 0)\n        (largest-divisor-iter n (+ i 1))\n\
    \        (- i 1)))\n  (largest-divisor-iter n 2))\n", "  (define (largest_divisor-iter\
    \ n i)\n    (if (= (modulo n i) 0)\n        i\n        (largest_divisor-iter n\
    \ (- i 1))))\n  (largest_divisor-iter n (- n 1)))\n", "  (define (largest-divisor-iter\
    \ n i)\n    (if (= (modulo n i) 0)\n        (largest-divisor-iter n (+ i 1))\n\
    \        (- i 1)))\n  (largest-divisor-iter n 2))\n", "  (define (largest-divisor-iter\
    \ n d)\n    (if (= (remainder n d) 0)\n        d\n        (largest-divisor-iter\
    \ n (- d 1))))\n  (largest-divisor-iter n (- n 1)))\n", "  (define (largest_divisor-iter\
    \ n i)\n    (if (= (modulo n i) 0)\n        (largest_divisor-iter n (+ i 1))\n\
    \        (- i 1)))\n  (largest_divisor-iter n 2))\n", "  (define (iter i)\n  \
    \  (if (= (modulo n i) 0)\n        i\n        (iter (- i 1))))\n  (iter (- n 1)))\n",
  "  (define (largest-divisor-iter n i)\n    (if (= (modulo n i) 0)\n        (largest-divisor-iter\
    \ n (+ i 1))\n        (- i 1)))\n  (largest-divisor-iter n 2))\n", "  (define\
    \ (largest-divisor-iter n i)\n    (if (= (modulo n i) 0)\n        (largest-divisor-iter\
    \ n (+ i 1))\n        (- i 1)))\n  (largest-divisor-iter n 2))\n", "  (define\
    \ (largest-divisor-iter n i)\n    (if (= (modulo n i) 0)\n        i\n        (largest-divisor-iter\
    \ n (- i 1))))\n  (largest-divisor-iter n (/ n 2)))\n", "  (define (largest-divisor-iter\
    \ n divisor)\n    (if (= (modulo n divisor) 0)\n        (largest-divisor-iter\
    \ n (+ divisor 1))\n        (- divisor 1)))\n  (largest-divisor-iter n 2))\n",
  "  (define (largest_divisor-iter n i)\n    (if (= (modulo n i) 0)\n        (largest_divisor-iter\
    \ n (+ i 1))\n        (- i 1)))\n  (largest_divisor-iter n 2))\n", "  (define\
    \ (largest-divisor-iter n i)\n    (if (= (modulo n i) 0)\n        (largest-divisor-iter\
    \ n (+ i 1))\n        (- i 1)))\n  (largest-divisor-iter n 2))\n", "  (define\
    \ (largest_divisor-iter n i)\n    (if (= (modulo n i) 0)\n        (largest_divisor-iter\
    \ n (+ i 1))\n        (- i 1)))\n  (largest_divisor-iter n 2))\n", "  (define\
    \ (largest-divisor-iter n i)\n    (if (= (modulo n i) 0)\n        (largest-divisor-iter\
    \ n (+ i 1))\n        (- i 1)))\n  (largest-divisor-iter n 2))\n", "  (define\
    \ (largest-divisor-iter n i)\n    (if (= (modulo n i) 0)\n        i\n        (largest-divisor-iter\
    \ n (- i 1))))\n  (largest-divisor-iter n (- n 1)))\n", "  (define (largest-divisor-iter\
    \ n i)\n    (if (= 0 (modulo n i))\n        i\n        (largest-divisor-iter n\
    \ (- i 1))))\n  (largest-divisor-iter n (- n 1)))\n", "  (define (divisor n d)\n\
    \    (if (= (remainder n d) 0)\n        d\n        (divisor n (- d 1))))\n  (divisor\
    \ n (- n 1)))\n", "  (define (largest-divisor-iter n i)\n    (if (= (modulo n\
    \ i) 0)\n        (largest-divisor-iter n (+ i 1))\n        (- i 1)))\n  (largest-divisor-iter\
    \ n 2))\n", "  (define (largest-divisor-iter n d)\n    (if (= (remainder n d)\
    \ 0)\n        d\n        (largest-divisor-iter n (- d 1))))\n  (largest-divisor-iter\
    \ n (- n 1)))\n", "  (define (largest-divisor-iter n i)\n    (if (= (modulo n\
    \ i) 0)\n        (largest-divisor-iter n (+ i 1))\n        (- i 1)))\n  (largest-divisor-iter\
    \ n 2))\n", "  (define (largest-divisor-iter n i)\n    (if (= (modulo n i) 0)\n\
    \        i\n        (largest-divisor-iter n (- i 1))))\n  (largest-divisor-iter\
    \ n (/ n 2)))\n", "  (define (largest-divisor-iter n test-divisor)\n    (if (=\
    \ (remainder n test-divisor) 0)\n        (largest-divisor-iter n (- test-divisor\
    \ 1))\n        test-divisor))\n  (largest-divisor-iter n (- n 1)))\n", "  (define\
    \ (divisor n i)\n    (if (= (modulo n i) 0)\n        i\n        (divisor n (+\
    \ i 1))))\n  (divisor n 2))\n", "  (define (largest_divisor-iter n i)\n    (if\
    \ (= (modulo n i) 0)\n        (largest_divisor-iter n (+ i 1))\n        (- i 1)))\n\
    \  (largest_divisor-iter n 2))\n", "  (define (helper n i)\n    (if (= i n)\n\
    \        (error \"no divisor found\")\n        (if (= (modulo n i) 0)\n      \
    \      i\n            (helper n (+ i 1)))))\n  (helper n 2))\n", "  (define (divisor-iter\
    \ test-divisor)\n    (if (= (remainder n test-divisor) 0)\n        test-divisor\n\
    \        (divisor-iter (- test-divisor 1))))\n  (divisor-iter (/ n 2)))\n", " \
    \ (define (largest_divisor-iter n divisor)\n    (if (= (modulo n divisor) 0)\n\
    \        (largest_divisor-iter n (- divisor 1))\n        divisor))\n  (largest_divisor-iter\
    \ n (- n 1)))\n", "  (define (largest-divisor-iter n i)\n    (if (= (modulo n\
    \ i) 0)\n        (largest-divisor-iter n (+ i 1))\n        (- i 1)))\n  (largest-divisor-iter\
    \ n 2))\n", "  (define (largest-divisor-iter n i)\n    (if (= (modulo n i) 0)\n\
    \        (largest-divisor-iter n (+ i 1))\n        (- i 1)))\n  (largest-divisor-iter\
    \ n 2))\n", "  (define (find-divisor n test-divisor)\n    (cond ((> (square test-divisor)\
    \ n) n)\n          ((divides? test-divisor n)\n           (find-divisor n (+ test-divisor\
    \ 1)))\n          (else (find-divisor n (+ test-divisor 1)))))\n  (find-divisor\
    \ n 2))\n", "  (define (largest_divisor-iter n i)\n    (if (= (modulo n i) 0)\n\
    \        (largest_divisor-iter n (+ i 1))\n        (- i 1)))\n  (largest_divisor-iter\
    \ n 2))\n", "  (define (largest-divisor-iter n i)\n    (if (= (modulo n i) 0)\n\
    \        (largest-divisor-iter n (+ i 1))\n        (- i 1)))\n  (largest-divisor-iter\
    \ n 2))\n", "  (define (divisor n d)\n    (if (= (remainder n d) 0)\n        d\n\
    \        (divisor n (- d 1))))\n  (divisor n (- n 1)))\n", "  (define (largest-divisor-iter\
    \ n i)\n    (if (= (modulo n i) 0)\n        i\n        (largest-divisor-iter n\
    \ (- i 1))))\n  (largest-divisor-iter n (- n 1)))\n", "  (define (largest-divisor-iter\
    \ n i)\n    (if (= (modulo n i) 0)\n        (largest-divisor-iter n (+ i 1))\n\
    \        (- i 1)))\n  (largest-divisor-iter n 2))\n", "  (define (largest-divisor-iter\
    \ n i)\n    (if (= (modulo n i) 0)\n        i\n        (largest-divisor-iter n\
    \ (- i 1))))\n  (largest-divisor-iter n (- n 1)))\n", "  (define (find-divisor\
    \ n test-divisor)\n    (cond ((&gt; (square test-divisor) n) n)\n          ((divides?\
    \ test-divisor n) (find-divisor n (+ test-divisor 1)))\n          (else (find-divisor\
    \ n (+ test-divisor 1)))))\n  (find-divisor n 2))\n", "  (define (largest-divisor-iter\
    \ n i)\n    (if (= (modulo n i) 0)\n        (largest-divisor-iter n (+ i 1))\n\
    \        (- i 1)))\n  (largest-divisor-iter n 2))\n", "  (define (find-divisor\
    \ n test-divisor)\n    (cond ((> (square test-divisor) n) n)\n          ((divides?\
    \ test-divisor n)\n           (find-divisor n (+ test-divisor 1)))\n         \
    \ (else (find-divisor n (+ test-divisor 1)))))\n  (find-divisor n 2))\n", "  (define\
    \ (largest-divisor-iter n i)\n    (if (= (modulo n i) 0)\n        (largest-divisor-iter\
    \ n (+ i 1))\n        (- i 1)))\n  (largest-divisor-iter n 2))\n", "  (define\
    \ (largest-divisor-iter n divisor)\n    (if (= (modulo n divisor) 0)\n       \
    \ (largest-divisor-iter n (- divisor 1))\n        divisor))\n  (largest-divisor-iter\
    \ n (- n 1)))\n", "  (define (largest-divisor-iter n i)\n    (if (= 0 (modulo\
    \ n i))\n        i\n        (largest-divisor-iter n (- i 1))))\n  (largest-divisor-iter\
    \ n (/ n 2)))\n", "  (define (largest-divisor-iter n i)\n    (if (or (= n i) (=\
    \ 0 (modulo n i)))\n        i\n        (largest-divisor-iter n (- i 1))))\n  (largest-divisor-iter\
    \ n (/ n 2)))\n", "  (define (helper n divisor)\n    (if (= (modulo n divisor)\
    \ 0)\n        (helper n (- divisor 1))\n        (+ divisor 1)))\n  (helper n (/\
    \ n 2)))\n", "  (define (helper n i)\n    (if (= n i)\n        n\n        (if\
    \ (= (modulo n i) 0)\n            i\n            (helper n (+ i 1)))))\n  (helper\
    \ n 2))\n", "  (define (largest-divisor-iter n i)\n    (if (= (modulo n i) 0)\n\
    \        (largest-divisor-iter n (+ i 1))\n        (- i 1)))\n  (largest-divisor-iter\
    \ n 2))\n", "  (define (largest-divisor-iter n i)\n    (if (= (modulo n i) 0)\n\
    \        (largest-divisor-iter n (+ i 1))\n        (- i 1)))\n  (largest-divisor-iter\
    \ n 2))\n", "  (define (largest-divisor-iter n i)\n    (if (= (modulo n i) 0)\n\
    \        (largest-divisor-iter n (+ i 1))\n        (- i 1)))\n  (largest-divisor-iter\
    \ n 2))\n", "  (define (largest-divisor-iter n i)\n    (if (= (modulo n i) 0)\n\
    \        i\n        (largest-divisor-iter n (+ i 1))))\n  (largest-divisor-iter\
    \ n 2))\n", "  (define (largest-divisor-iter n i)\n    (if (= n i)\n        1\n\
    \        (if (= (modulo n i) 0)\n            i\n            (largest-divisor-iter\
    \ n (+ i 1)))))\n  (largest-divisor-iter n 2))\n", "  (define (largest-divisor-iter\
    \ n i)\n    (if (= 0 (modulo n i))\n        (largest-divisor-iter n (- i 1))\n\
    \        i))\n  (largest-divisor-iter n (quotient n 2)))\n", "  (define (iter\
    \ i)\n    (if (= (modulo n i) 0)\n        (if (= i 1)\n            1\n       \
    \     (iter (- i 1)))\n        (iter (- i 1))))\n  (iter (- n 1)))\n", "  (define\
    \ (largest_divisor-iter n i)\n    (if (= (modulo n i) 0)\n        (largest_divisor-iter\
    \ n (+ i 1))\n        (- i 1)))\n  (largest_divisor-iter n 2))\n", "  (define\
    \ (largest-divisor-iter n i)\n    (if (= (modulo n i) 0)\n        (largest-divisor-iter\
    \ n (+ i 1))\n        (- i 1)))\n  (largest-divisor-iter n 2))\n", "  (define\
    \ (largest_divisor-iter n i)\n    (if (= (modulo n i) 0)\n        (largest_divisor-iter\
    \ n (- i 1))\n        i))\n  (largest_divisor-iter n (- n 1)))\n", "  (for/fold\
    \ ([divisor n]) ([i (in-range 1 n)])\n    (if (zero? (modulo n i))\n        (min\
    \ divisor i)\n        divisor)))\n", "  (define (largest-divisor-iter n i)\n \
    \   (if (= (modulo n i) 0)\n        i\n        (largest-divisor-iter n (- i 1))))\n\
    \  (largest-divisor-iter n (/ n 2)))\n", "  (define (largest-divisor-iter n i)\n\
    \    (if (= (modulo n i) 0)\n        (largest-divisor-iter n (+ i 1))\n      \
    \  (- i 1)))\n  (largest-divisor-iter n 2))\n", "  (define (largest_divisor-iter\
    \ n i)\n    (if (= (modulo n i) 0)\n        (largest_divisor-iter n (+ i 1))\n\
    \        (- i 1)))\n  (largest_divisor-iter n 2))\n", "  (define (largest-divisor-iter\
    \ n i)\n    (if (= (modulo n i) 0)\n        i\n        (largest-divisor-iter n\
    \ (- i 1))))\n  (largest-divisor-iter n (- n 1)))\n", "  (define (largest-divisor-iter\
    \ n i)\n    (if (= (modulo n i) 0)\n        i\n        (largest-divisor-iter n\
    \ (- i 1))))\n  (largest-divisor-iter n (- n 1)))\n", "  (define (largest-divisor-iter\
    \ n i)\n    (if (= (modulo n i) 0)\n        (largest-divisor-iter n (+ i 1))\n\
    \        (- i 1)))\n  (largest-divisor-iter n 2))\n", "  (define (largest-divisor-iter\
    \ n i)\n    (if (= (modulo n i) 0)\n        i\n        (largest-divisor-iter n\
    \ (- i 1))))\n  (largest-divisor-iter n (- n 1)))\n", "  (define (largest-divisor-iter\
    \ n i)\n    (if (= 0 (modulo n i))\n        i\n        (largest-divisor-iter n\
    \ (- i 1))))\n  (largest-divisor-iter n (- n 1)))\n", "  (define (largest-divisor-iter\
    \ n i)\n    (if (= n i)\n        1\n        (if (= (modulo n i) 0)\n         \
    \   i\n            (largest-divisor-iter n (+ i 1)))))\n  (largest-divisor-iter\
    \ n 2))\n", "  (define (divisor d)\n    (if (= (remainder n d) 0)\n        d\n\
    \        (divisor (- d 1))))\n  (divisor (- n 1)))\n", "  (define (largest-divisor-iter\
    \ n i)\n    (if (= n i)\n        n\n        (if (= (modulo n i) 0)\n         \
    \   (largest-divisor-iter n (+ i 1))\n            (largest-divisor-iter n (+ i\
    \ 1)))))\n  (largest-divisor-iter n 2))\n", "  (define (largest-divisor-iter n\
    \ i)\n    (if (= (modulo n i) 0)\n        i\n        (largest-divisor-iter n (-\
    \ i 1))))\n  (largest-divisor-iter n (- n 1)))\n", "  (define (largest_divisor-iter\
    \ n i)\n    (if (= (modulo n i) 0)\n        (largest_divisor-iter n (+ i 1))\n\
    \        (- i 1)))\n  (largest_divisor-iter n 2))\n", "  (define (largest-divisor-iter\
    \ n i)\n    (if (= (modulo n i) 0)\n        (largest-divisor-iter n (+ i 1))\n\
    \        (- i 1)))\n  (largest-divisor-iter n 2))\n", "  (define (helper n i)\n\
    \    (if (= 0 (modulo n i))\n        i\n        (helper n (- i 1))))\n  (helper\
    \ n (- n 1)))\n", "  (define (largest-divisor-iter n i)\n    (if (= (modulo n\
    \ i) 0)\n        i\n        (largest-divisor-iter n (- i 1))))\n  (largest-divisor-iter\
    \ n (- n 1)))\n", "  (define (find-divisor n test-divisor)\n    (cond ((> (square\
    \ test-divisor) n) n)\n          ((divides? test-divisor n) (find-divisor n (next\
    \ test-divisor)))\n          (else (find-divisor n (next test-divisor)))))\n \
    \ (find-divisor n 2))\n", "  (define (largest-divisor-iter n i)\n    (if (= n\
    \ i)\n        n\n        (if (= (modulo n i) 0)\n            (largest-divisor-iter\
    \ n (+ i 1))\n            (largest-divisor-iter n (+ i 1)))))\n  (largest-divisor-iter\
    \ n 2))\n", "  (define (largest-divisor-iter n i)\n    (if (= (modulo n i) 0)\n\
    \        i\n        (largest-divisor-iter n (- i 1))))\n  (largest-divisor-iter\
    \ n (/ n 2)))\n", "  (define (largest_divisor-iter n i)\n    (if (= (modulo n\
    \ i) 0)\n        (largest_divisor-iter n (+ i 1))\n        (- i 1)))\n  (largest_divisor-iter\
    \ n 2))\n", "  (define (divisor n d)\n    (if (= (remainder n d) 0)\n        d\n\
    \        (divisor n (- d 1))))\n  (divisor n (- n 1)))\n", "  (define (largest-divisor-iter\
    \ n i)\n    (if (= (modulo n i) 0)\n        (largest-divisor-iter n (+ i 1))\n\
    \        (- i 1)))\n  (largest-divisor-iter n 2))\n", "  (define (divisor n d)\n\
    \    (if (= (remainder n d) 0)\n        d\n        (divisor n (- d 1))))\n  (divisor\
    \ n (- n 1)))\n", "  (define (largest-divisor-iter n i)\n    (if (= (modulo n\
    \ i) 0)\n        (largest-divisor-iter n (- i 1))\n        i))\n  (largest-divisor-iter\
    \ n (- n 1)))\n", "  (define (largest_divisor-iter n i)\n    (if (= n i)\n   \
    \     n\n        (if (= (modulo n i) 0)\n            (largest_divisor-iter n (+\
    \ i 1))\n            (largest_divisor-iter n (+ i 1)))))\n  (largest_divisor-iter\
    \ n 1))\n", "  (define (largest-divisor-iter n d)\n    (if (= (remainder n d)\
    \ 0)\n        d\n        (largest-divisor-iter n (- d 1))))\n  (largest-divisor-iter\
    \ n (/ n 2)))\n", "  (define (largest-divisor-iter n divisor)\n    (if (= (modulo\
    \ n divisor) 0)\n        (largest-divisor-iter n (+ divisor 1))\n        (- divisor\
    \ 1)))\n  (largest-divisor-iter n 2))\n", "  (define (largest-divisor-iter n divisor)\n\
    \    (if (= (modulo n divisor) 0)\n        (largest-divisor-iter n (+ divisor\
    \ 1))\n        (- divisor 1)))\n  (largest-divisor-iter n 2))\n", "  (define (largest-divisor-iter\
    \ n i)\n    (if (= (modulo n i) 0)\n        i\n        (largest-divisor-iter n\
    \ (- i 1))))\n  (largest-divisor-iter n (/ n 2)))\n", "  (define (largest-divisor-iter\
    \ n i)\n    (if (= (modulo n i) 0)\n        i\n        (largest-divisor-iter n\
    \ (- i 1))))\n  (largest-divisor-iter n (/ n 2)))\n", "  (define (largest_divisor-iter\
    \ n i)\n    (if (= (modulo n i) 0)\n        (largest_divisor-iter n (+ i 1))\n\
    \        (- i 1)))\n  (largest_divisor-iter n 2))\n", "  (define (helper n divisor)\n\
    \    (if (= (modulo n divisor) 0)\n        (helper n (- divisor 1))\n        divisor))\n\
    \  (helper n (/ n 2)))\n", "  (define (largest-divisor-iter n i)\n    (if (= (modulo\
    \ n i) 0)\n        (largest-divisor-iter n (+ i 1))\n        (- i 1)))\n  (largest-divisor-iter\
    \ n 2))\n", "  (define (largest-divisor-iter n i)\n    (if (= (modulo n i) 0)\n\
    \        i\n        (largest-divisor-iter n (- i 1))))\n  (largest-divisor-iter\
    \ n (- n 1)))\n", "  (define (largest-divisor-iter n i)\n    (if (= (modulo n\
    \ i) 0)\n        (largest-divisor-iter n (+ i 1))\n        (- i 1)))\n  (largest-divisor-iter\
    \ n 2))\n", "  (define (largest-divisor-iter n i)\n    (if (= (modulo n i) 0)\n\
    \        (largest-divisor-iter n (+ i 1))\n        (- i 1)))\n  (largest-divisor-iter\
    \ n 2))\n", "  (define (largest-divisor-iter n i)\n    (if (= (modulo n i) 0)\n\
    \        (largest-divisor-iter n (+ i 1))\n        (- i 1)))\n  (largest-divisor-iter\
    \ n 2))\n", "  (define (find-divisor n test-divisor)\n    (cond ((> (square test-divisor)\
    \ n) n)\n          ((divides? test-divisor n) (find-divisor n (+ test-divisor\
    \ 1)))\n          (else (find-divisor n (+ test-divisor 1)))))\n  (find-divisor\
    \ n 2))\n", "  (for/fold ([divisor n]) ([i (in-range 1 (add1 (quotient n 2)))])\n\
    \    (if (zero? (modulo n i))\n        i\n        divisor)))\n", "  (define (divisor\
    \ n d)\n    (if (= (remainder n d) 0)\n        d\n        (divisor n (- d 1))))\n\
    \  (divisor n (- n 1)))\n", "  (define (largest_divisor-iter n i)\n    (if (=\
    \ (modulo n i) 0)\n        (largest_divisor-iter n (+ i 1))\n        (- i 1)))\n\
    \  (largest_divisor-iter n 2))\n", "  (define (largest_divisor-iter n divisor)\n\
    \    (if (= (modulo n divisor) 0)\n        (largest_divisor-iter n (+ divisor\
    \ 1))\n        (- divisor 1)))\n  (largest_divisor-iter n 2))\n", "  (define (largest-divisor-iter\
    \ n i)\n    (if (= (modulo n i) 0)\n        (largest-divisor-iter n (+ i 1))\n\
    \        (- i 1)))\n  (largest-divisor-iter n 2))\n", "  (define (largest_divisor_iter\
    \ n i)\n    (if (= (modulo n i) 0)\n        (largest_divisor_iter n (+ i 1))\n\
    \        (- i 1)))\n  (largest_divisor_iter n 2))\n", "  (define (largest-divisor-iter\
    \ n i)\n    (if (= (modulo n i) 0)\n        (largest-divisor-iter n (+ i 1))\n\
    \        (- i 1)))\n  (largest-divisor-iter n 2))\n", "  (define (find-divisor\
    \ n test-divisor)\n    (cond ((> (square test-divisor) n) n)\n          ((divides?\
    \ test-divisor n)\n           (find-divisor n (+ test-divisor 1)))\n         \
    \ (else (find-divisor n (+ test-divisor 1)))))\n  (find-divisor n 2))\n", "  (define\
    \ (find-divisor n test-divisor)\n    (cond ((> (square test-divisor) n) n)\n \
    \         ((divides? test-divisor n) (find-divisor n (+ test-divisor 1)))\n  \
    \        (else (find-divisor n (+ test-divisor 1)))))\n  (find-divisor n 2))\n",
  "  (define (find-divisor n test-divisor)\n    (cond ((> (square test-divisor) n)\
    \ n)\n          ((divides? test-divisor n) (find-divisor n (+ test-divisor 1)))\n\
    \          (else (find-divisor n (+ test-divisor 1)))))\n  (find-divisor n 2))\n",
  "  (define (largest-divisor-iter n i)\n    (if (zero? (modulo n i))\n        i\n\
    \        (largest-divisor-iter n (- i 1))))\n  (largest-divisor-iter n (- n 1)))\n",
  "  (define (largest-divisor-iter n i)\n    (if (= (modulo n i) 0)\n        (largest-divisor-iter\
    \ n (+ i 1))\n        (- i 1)))\n  (largest-divisor-iter n 2))\n", "  (define\
    \ (largest-divisor-iter n i)\n    (if (= (modulo n i) 0)\n        i\n        (largest-divisor-iter\
    \ n (- i 1))))\n  (largest-divisor-iter n (- n 1)))\n", "  (define (largest-divisor-iter\
    \ n i)\n    (if (= 0 (modulo n i))\n        i\n        (largest-divisor-iter n\
    \ (- i 1))))\n  (largest-divisor-iter n (/ n 2)))\n", "  (define (largest-divisor-iter\
    \ n d)\n    (if (= (remainder n d) 0)\n        d\n        (largest-divisor-iter\
    \ n (- d 1))))\n  (largest-divisor-iter n (/ n 2)))\n", "  (define (largest_divisor-iter\
    \ n i)\n    (if (= 0 (modulo n i))\n        i\n        (largest_divisor-iter n\
    \ (- i 1))))\n  (largest_divisor-iter n (- n 1)))\n", "  (define (largest-divisor-helper\
    \ n i)\n    (if (= n i)\n        n\n        (if (= (modulo n i) 0)\n         \
    \   (largest-divisor-helper n (+ i 1))\n            (largest-divisor-helper n\
    \ (+ i 1)))))\n  (largest-divisor-helper n 2))\n", "  (define (largest-divisor-iter\
    \ n i)\n    (if (= (modulo n i) 0)\n        (largest-divisor-iter n (+ i 1))\n\
    \        (- i 1)))\n  (largest-divisor-iter n 2))\n", "  (define (largest-divisor-iter\
    \ n i)\n    (if (= (modulo n i) 0)\n        (largest-divisor-iter n (+ i 1))\n\
    \        (- i 1)))\n  (largest-divisor-iter n 2))\n", "  (define (largest-divisor-iter\
    \ n test-divisor)\n    (if (= (remainder n test-divisor) 0)\n        (largest-divisor-iter\
    \ n (- test-divisor 1))\n        test-divisor))\n  (largest-divisor-iter n (-\
    \ n 1)))\n", "  (define (largest-divisor-iter n i)\n    (if (= (modulo n i) 0)\n\
    \        (largest-divisor-iter n (+ i 1))\n        (- i 1)))\n  (largest-divisor-iter\
    \ n 2))\n", "  (define (largest-divisor-iter n i)\n    (if (= (modulo n i) 0)\n\
    \        (largest-divisor-iter n (+ i 1))\n        (- i 1)))\n  (largest-divisor-iter\
    \ n 2))\n", "  (define (largest-divisor-iter n i)\n    (if (= (modulo n i) 0)\n\
    \        (largest-divisor-iter n (+ i 1))\n        (- i 1)))\n  (largest-divisor-iter\
    \ n 2))\n", "  (define (largest-divisor-iter n i)\n    (if (= (modulo n i) 0)\n\
    \        (largest-divisor-iter n (+ i 1))\n        (- i 1)))\n  (largest-divisor-iter\
    \ n 2))\n"]
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
