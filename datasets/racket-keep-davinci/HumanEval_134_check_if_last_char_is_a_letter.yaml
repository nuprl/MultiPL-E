name: HumanEval_134_check_if_last_char_is_a_letter
language: racket
prompt: "#lang racket\n\n;; Create a function that returns True if the last character\n\
  ;; of a given string is an alphabetical character and is not\n;; a part of a word,\
  \ and False otherwise.\n;; Note: \"word\" is a group of characters separated by\
  \ space.\n;; Examples:\n;; check_if_last_char_is_a_letter(\"apple pie\") \u279E\
  \ False\n;; check_if_last_char_is_a_letter(\"apple pi e\") \u279E True\n;; check_if_last_char_is_a_letter(\"\
  apple pi e \") \u279E False\n;; check_if_last_char_is_a_letter(\"\") \u279E False\n\
  (define (check_if_last_char_is_a_letter txt)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate check_if_last_char_is_a_letter))\n\
  \    (check-equal? (candidate \"apple\") #f)\n    (check-equal? (candidate \"apple\
  \ pi e\") #t)\n    (check-equal? (candidate \"eeeee\") #f)\n    (check-equal? (candidate\
  \ \"A\") #t)\n    (check-equal? (candidate \"Pumpkin pie \") #f)\n    (check-equal?\
  \ (candidate \"Pumpkin pie 1\") #f)\n    (check-equal? (candidate \"\") #f)\n  \
  \  (check-equal? (candidate \"eeeee e \") #f)\n    (check-equal? (candidate \"apple\
  \ pie\") #f)\n    (check-equal? (candidate \"apple pi e \") #f)\n))\n\n(test-humaneval)"
completions: ["  (if (string=? txt \"\")\n      #f\n      (if (char-alphabetic? (string-ref\
    \ txt (- (string-length txt) 1)))\n          (if (char-alphabetic? (string-ref\
    \ txt (- (string-length txt) 2)))\n              #f\n              #t)\n     \
    \     #f)))\n", "  (if (string=? txt \"\")\n      #f\n      (and (char-alphabetic?\
    \ (string-ref txt (- (string-length txt) 1)))\n           (not (char-alphabetic?\
    \ (string-ref txt (- (string-length txt) 2)))))))\n", "  (if (string=? txt \"\"\
    )\n      #f\n      (if (char-alphabetic? (string-ref txt (- (string-length txt)\
    \ 1)))\n          (if (char-alphabetic? (string-ref txt (- (string-length txt)\
    \ 2)))\n              #f\n              #t)\n          #f)))\n", "  (and (not\
    \ (empty? txt))\n       (char-alphabetic? (last-char txt))\n       (not (char-whitespace?\
    \ (last-char txt)))))\n", "  (if (string=? txt \"\")\n      #f\n      (let ((last-char\
    \ (string-ref txt (- (string-length txt) 1))))\n        (and (char-alphabetic?\
    \ last-char)\n             (not (char-whitespace? last-char))))))\n", "  (if (string=?\
    \ txt \"\")\n      #f\n      (if (char-alphabetic? (string-ref txt (- (string-length\
    \ txt) 1)))\n          (if (char-alphabetic? (string-ref txt (- (string-length\
    \ txt) 2)))\n              #f\n              #t)\n          #f)))\n", "  (if (empty?\
    \ txt)\n      false\n      (let ((last-char (string-ref txt (- (string-length\
    \ txt) 1))))\n        (and (char-alphabetic? last-char)\n             (not (char-whitespace?\
    \ last-char))))))\n", "  (if (string=? txt \"\")\n      #f\n      (if (char-alphabetic?\
    \ (string-ref txt (- (string-length txt) 1)))\n          (if (char-alphabetic?\
    \ (string-ref txt (- (string-length txt) 2)))\n              #f\n            \
    \  #t)\n          #f)))\n", "  (if (string=? txt \"\")\n      #f\n      (let ((last-char\
    \ (string-ref txt (- (string-length txt) 1))))\n        (if (char-alphabetic?\
    \ last-char)\n            (if (char-alphabetic? (string-ref txt (- (string-length\
    \ txt) 2)))\n                #f\n                #t)\n            #f))))\n", " \
    \ (let ((last-char (string-ref txt (- (string-length txt) 1))))\n    (and (char-alphabetic?\
    \ last-char)\n         (not (char-whitespace? last-char)))))\n", "  (if (empty?\
    \ txt)\n      #f\n      (let ([last-char (last-char txt)])\n        (and (char-alphabetic?\
    \ last-char)\n             (not (char-whitespace? last-char))))))\n", "  (and\
    \ (char-alphabetic? (string-ref txt (- (string-length txt) 1)))\n       (not (char-alphabetic?\
    \ (string-ref txt (- (string-length txt) 2))))))\n", "  (if (string=? txt \"\"\
    )\n      #f\n      (let ([last-char (string-ref txt (- (string-length txt) 1))])\n\
    \        (and (char-alphabetic? last-char)\n             (not (char-whitespace?\
    \ last-char))))))\n", "  (and (not (empty? txt))\n       (char-alphabetic? (last-char\
    \ txt))\n       (not (char-whitespace? (last-char txt)))))\n", "  (and\n   (not\
    \ (empty? txt))\n   (char-alphabetic? (last-char txt))\n   (not (char-whitespace?\
    \ (last-char txt)))\n   (not (char-alphabetic? (last-char (butlast txt))))))\n",
  "  (if (empty? txt)\n      #f\n      (if (char-alphabetic? (last-char txt))\n  \
    \        (if (char-whitespace? (second-last-char txt))\n              #t\n   \
    \           #f)\n          #f)))\n", "  (if (empty? txt)\n      false\n      (let\
    \ ([last-char (last-char txt)])\n        (and (char-alphabetic? last-char)\n \
    \            (not (char-whitespace? last-char))))))\n", "  (and (not (empty? txt))\n\
    \       (char-alphabetic? (last-char txt))\n       (not (char-whitespace? (last-char\
    \ txt)))))\n", "  (let ([last-char (string-ref txt (sub1 (string-length txt)))])\n\
    \    (and (char-alphabetic? last-char)\n         (not (char-whitespace? last-char)))))\n",
  "  (if (string=? txt \"\")\n      #f\n      (if (char-alphabetic? (string-ref txt\
    \ (- (string-length txt) 1)))\n          (if (char-alphabetic? (string-ref txt\
    \ (- (string-length txt) 2)))\n              #f\n              #t)\n         \
    \ #f)))\n", "  (if (string=? txt \"\")\n      #f\n      (let ((last-char (string-ref\
    \ txt (- (string-length txt) 1))))\n        (and (char-alphabetic? last-char)\n\
    \             (not (char-whitespace? last-char))))))\n", "  (cond\n    [(empty?\
    \ txt) false]\n    [(char-alphabetic? (last-char txt)) true]\n    [else false]))\n",
  "  (if (string=? txt \"\")\n      #f\n      (let ([last-char (string-ref txt (-\
    \ (string-length txt) 1))])\n        (and (char-alphabetic? last-char)\n     \
    \        (not (char-whitespace? last-char))))))\n", "  (if (string=? txt \"\"\
    )\n      #f\n      (let ((last-char (string-ref txt (- (string-length txt) 1))))\n\
    \        (and (char-alphabetic? last-char)\n             (not (char-whitespace?\
    \ last-char))))))\n", "  (cond\n    [(empty? txt) false]\n    [(char-alphabetic?\
    \ (last-char txt)) true]\n    [else false]))\n", "  (and (char-alphabetic? (string-ref\
    \ txt (- (string-length txt) 1)))\n       (not (char-alphabetic? (string-ref txt\
    \ (- (string-length txt) 2))))))\n", "  (if (empty? txt)\n      false\n      (if\
    \ (char-alphabetic? (last-char txt))\n          (if (char-alphabetic? (last-char\
    \ (substring txt 0 (- (string-length txt) 1))))\n              false\n       \
    \       true)\n          false)))\n", "  (and (not (empty? txt))\n       (char-alphabetic?\
    \ (last-char txt))\n       (not (char-whitespace? (last-char txt)))))\n", "  (and\
    \ (not (empty? txt))\n       (char-alphabetic? (last-char txt))\n       (not (char-whitespace?\
    \ (last-char txt)))))\n", "  (and (not (empty? txt))\n       (char-alphabetic?\
    \ (last-char txt))\n       (not (char-whitespace? (last-char txt)))))\n", "  (if\
    \ (string=? txt \"\")\n      #f\n      (let ((last-char (string-ref txt (- (string-length\
    \ txt) 1))))\n        (and (char-alphabetic? last-char)\n             (not (char-whitespace?\
    \ last-char))))))\n", "  (and (not (empty? txt))\n       (char-alphabetic? (last-char\
    \ txt))\n       (not (char-whitespace? (last-char txt)))))\n", "  (and (char-alphabetic?\
    \ (string-ref txt (- (string-length txt) 1)))\n       (not (char-alphabetic? (string-ref\
    \ txt (- (string-length txt) 2))))))\n", "  (if (empty? txt)\n      #f\n     \
    \ (if (char-alphabetic? (last-char txt))\n          (if (char-alphabetic? (last-char\
    \ (string-drop-right txt 1)))\n              #f\n              #t)\n         \
    \ #f)))\n", "  (and (not (empty? txt))\n       (char-alphabetic? (last-char txt))\n\
    \       (not (char-whitespace? (last-char txt)))))\n", "  (and (not (empty? txt))\n\
    \       (char-alphabetic? (last-char txt))\n       (not (char-whitespace? (last-char\
    \ txt)))))\n", "  (cond\n    [(empty? txt) false]\n    [(char-alphabetic? (last-char\
    \ txt)) true]\n    [else false]))\n", "  (and (not (empty? txt))\n       (char-alphabetic?\
    \ (last-char txt))\n       (not (char-whitespace? (last-char txt)))))\n", "  (and\
    \ (not (empty? txt))\n       (char-alphabetic? (last-char txt))\n       (not (char-whitespace?\
    \ (last-char txt)))))\n", "  (and (not (empty? txt))\n       (char-alphabetic?\
    \ (last-char txt))\n       (not (char-whitespace? (last-char txt)))))\n", "  (cond\n\
    \    [(empty? txt) false]\n    [(char-alphabetic? (last-char txt))\n     (not\
    \ (char-alphabetic? (last-char (substring txt 0 (- (string-length txt) 1)))))]\n\
    \    [else false]))\n", "  (if (empty? txt)\n      #f\n      (if (char-alphabetic?\
    \ (last-char txt))\n          (if (char-whitespace? (second-last-char txt))\n\
    \              #t\n              #f)\n          #f)))\n", "  (if (string=? \"\"\
    \ txt)\n      #f\n      (let ((last-char (string-ref txt (- (string-length txt)\
    \ 1))))\n        (and (char-alphabetic? last-char)\n             (not (char-whitespace?\
    \ last-char))))))\n", "  (if (string=? \"\" txt)\n      #f\n      (if (char-alphabetic?\
    \ (string-ref txt (- (string-length txt) 1)))\n          (if (char-alphabetic?\
    \ (string-ref txt (- (string-length txt) 2)))\n              #f\n            \
    \  #t)\n          #f)))\n", "  (if (string=? txt \"\")\n      #f\n      (let ([last-char\
    \ (string-ref txt (- (string-length txt) 1))])\n        (and (char-alphabetic?\
    \ last-char)\n             (not (char-whitespace? last-char))))))\n", "  (cond\n\
    \    [(empty? txt) false]\n    [(char-alphabetic? (last-char txt)) true]\n   \
    \ [else false]))\n", "  (if (string=? txt \"\")\n      #f\n      (let ((last-char\
    \ (string-ref txt (- (string-length txt) 1))))\n        (and (char-alphabetic?\
    \ last-char)\n             (not (char-whitespace? last-char))))))\n", "  (cond\n\
    \    [(empty? txt) false]\n    [(char-alphabetic? (last-char txt))\n     (not\
    \ (char-whitespace? (last-char (butlast txt))))]\n    [else false]))\n", "  (and\
    \ (not (empty? txt))\n       (char-alphabetic? (last-char txt))\n       (not (char-whitespace?\
    \ (last-char txt)))))\n", "  (and (not (empty? txt))\n       (char-alphabetic?\
    \ (last-char txt))\n       (not (char-whitespace? (last-char txt)))))\n", "  (and\
    \ (not (empty? txt))\n       (not (char-alphabetic? (last-char txt)))\n      \
    \ (not (char-whitespace? (last-char txt)))))\n", "  (if (string=? txt \"\")\n\
    \      #f\n      (let ([last-char (string-ref txt (- (string-length txt) 1))])\n\
    \        (and (char-alphabetic? last-char)\n             (not (char-whitespace?\
    \ last-char))))))\n", "  (cond\n    [(empty? txt) false]\n    [(empty? (rest txt))\
    \ false]\n    [(char-alphabetic? (last txt)) true]\n    [else false]))\n", " \
    \ (if (string=? txt \"\")\n      #f\n      (let ((last-char (string-ref txt (-\
    \ (string-length txt) 1))))\n        (and (char-alphabetic? last-char)\n     \
    \        (not (char-whitespace? last-char))))))\n", "  (if (string=? txt \"\"\
    )\n      #f\n      (if (char-alphabetic? (string-ref txt (- (string-length txt)\
    \ 1)))\n          (if (char-alphabetic? (string-ref txt (- (string-length txt)\
    \ 2)))\n              #f\n              #t)\n          #f)))\n", "  (cond\n  \
    \  [(empty? txt) false]\n    [(char-alphabetic? (last-char txt)) true]\n    [else\
    \ false]))\n", "  (if (string=? txt \"\")\n      #f\n      (let ([last-char (string-ref\
    \ txt (- (string-length txt) 1))])\n        (if (char-alphabetic? last-char)\n\
    \            (if (char-whitespace? (string-ref txt (- (string-length txt) 2)))\n\
    \                #t\n                #f)\n            #f))))\n", "  (cond\n  \
    \  [(empty? txt) false]\n    [(char-alphabetic? (last-char txt))\n     (if (char-alphabetic?\
    \ (last-char (substring txt 0 (- (string-length txt) 1))))\n         false\n \
    \        true)]\n    [else false]))\n", "  (cond\n    [(empty? txt) #f]\n    [(and\
    \ (char-alphabetic? (last-char txt))\n          (not (char-alphabetic? (last-char\
    \ (substring txt 0 (- (string-length txt) 1)))))) #t]\n    [else #f]))\n", " \
    \ (and (not (empty? txt))\n       (char-alphabetic? (last-char txt))\n       (not\
    \ (char-whitespace? (last-char txt)))))\n", "  (cond\n    [(empty? txt) false]\n\
    \    [(char-alphabetic? (last-char txt)) true]\n    [else false]))\n", "  (cond\n\
    \    [(empty? txt) false]\n    [(empty? (rest txt)) false]\n    [(empty? (rest\
    \ (rest txt))) true]\n    [else (and (char-alphabetic? (last txt))\n         \
    \      (not (char-alphabetic? (last (rest txt)))))]))\n", "  (if (string=? txt\
    \ \"\")\n      #f\n      (if (string=? (substring txt -1) \" \")\n          #f\n\
    \          (if (char-alphabetic? (string-ref txt -1))\n              #t\n    \
    \          #f))))\n", "  (if (empty? txt)\n      #f\n      (if (char-alphabetic?\
    \ (last-char txt))\n          (if (char-whitespace? (second-last-char txt))\n\
    \              #t\n              #f)\n          #f)))\n", "  (and (not (empty?\
    \ txt))\n       (char-alphabetic? (last-char txt))\n       (not (char-whitespace?\
    \ (last-char txt)))))\n", "  (let ((last-char (string-ref txt (- (string-length\
    \ txt) 1))))\n    (and (char-alphabetic? last-char)\n         (not (char-whitespace?\
    \ last-char)))))\n", "  (and (not (empty? txt))\n       (char-alphabetic? (last-char\
    \ txt))\n       (not (char-whitespace? (last-char txt)))))\n", "  (and (char-alphabetic?\
    \ (string-ref txt (- (string-length txt) 1)))\n       (not (char-whitespace? (string-ref\
    \ txt (- (string-length txt) 1))))))\n", "  (if (string=? txt \"\")\n      #f\n\
    \      (let ([last-char (string-ref txt (- (string-length txt) 1))])\n       \
    \ (and (char-alphabetic? last-char)\n             (not (char-whitespace? last-char))))))\n",
  "  (if (string=? txt \"\")\n      #f\n      (let ([last-char (string-ref txt (-\
    \ (string-length txt) 1))])\n        (and (char-alphabetic? last-char)\n     \
    \        (not (char-whitespace? last-char))))))\n", "  (if (string=? txt \"\"\
    )\n      #f\n      (and (char-alphabetic? (string-ref txt (- (string-length txt)\
    \ 1)))\n           (not (char-alphabetic? (string-ref txt (- (string-length txt)\
    \ 2)))))))\n", "  (if (string=? txt \"\")\n      #f\n      (let ((last-char (string-ref\
    \ txt (- (string-length txt) 1))))\n        (and (char-alphabetic? last-char)\n\
    \             (not (char-whitespace? last-char))))))\n", "  (and (not (empty?\
    \ txt))\n       (char-alphabetic? (last-char txt))\n       (not (char-whitespace?\
    \ (last-char txt)))))\n", "  (and (not (empty? txt))\n       (not (char-alphabetic?\
    \ (last-char txt)))\n       (char-alphabetic? (last-char (string-trim-right txt)))))\n",
  "  (if (string=? \"\" txt)\n      #f\n      (let ([last-char (string-ref txt (-\
    \ (string-length txt) 1))])\n        (and (char-alphabetic? last-char)\n     \
    \        (not (char-whitespace? last-char))))))\n", "  (if (string=? txt \"\"\
    )\n      #f\n      (if (char-alphabetic? (string-ref txt (- (string-length txt)\
    \ 1)))\n          (if (char-alphabetic? (string-ref txt (- (string-length txt)\
    \ 2)))\n              #f\n              #t)\n          #f)))\n", "  (if (string=?\
    \ txt \"\")\n      #f\n      (let ([last-char (string-ref txt (- (string-length\
    \ txt) 1))])\n        (and (char-alphabetic? last-char)\n             (not (char-whitespace?\
    \ last-char))))))\n", "  (and (not (empty? txt))\n       (char-alphabetic? (last-char\
    \ txt))\n       (not (char-alphabetic? (last-char (substring txt 0 (- (string-length\
    \ txt) 1)))))))\n", "  (if (string=? txt \"\")\n      #f\n      (let ((last-char\
    \ (string-ref txt (- (string-length txt) 1))))\n        (and (char-alphabetic?\
    \ last-char)\n             (not (char-whitespace? last-char))))))\n", "  (if (string=?\
    \ txt \"\")\n      #f\n      (let ([last-char (string-ref txt (- (string-length\
    \ txt) 1))])\n        (and (char-alphabetic? last-char)\n             (not (char-whitespace?\
    \ last-char))))))\n", "  (cond\n    [(empty? txt) false]\n    [(char-alphabetic?\
    \ (last-char txt))\n     (if (char-whitespace? (second-last-char txt))\n     \
    \    true\n         false)]\n    [else false]))\n", "  (cond\n    [(empty? txt)\
    \ false]\n    [(char-alphabetic? (last-char txt))\n     (and (char-alphabetic?\
    \ (last-char txt))\n          (not (char-whitespace? (last-char txt))))]\n   \
    \ [else false]))\n", "  (if (string=? txt \"\")\n      #f\n      (let ([last-char\
    \ (string-ref txt (- (string-length txt) 1))])\n        (and (char-alphabetic?\
    \ last-char)\n             (not (char-whitespace? last-char))))))\n", "  (and\
    \ (not (empty? txt))\n       (char-alphabetic? (last-char txt))\n       (not (char-whitespace?\
    \ (last-char txt)))))\n", "  (if (string=? txt \"\")\n      #f\n      (let ([last-char\
    \ (substring txt (- (string-length txt) 1))])\n        (and (char-alphabetic?\
    \ (string-ref last-char 0))\n             (not (string-contains txt last-char))))))\n",
  "  (cond\n    [(empty? txt) false]\n    [(char-alphabetic? (last-char txt)) true]\n\
    \    [else false]))\n", "  (cond\n    [(empty? txt) false]\n    [(char-alphabetic?\
    \ (last-char txt)) true]\n    [else false]))\n", "  (cond\n    [(empty? txt) false]\n\
    \    [(char-alphabetic? (last-char txt)) true]\n    [else false]))\n", "  (if\
    \ (string=? txt \"\")\n      #f\n      (if (char-alphabetic? (string-ref txt (-\
    \ (string-length txt) 1)))\n          (if (char-alphabetic? (string-ref txt (-\
    \ (string-length txt) 2)))\n              #f\n              #t)\n          #f)))\n",
  "  (define (is-letter? ch)\n    (and (char-alphabetic? ch)\n         (not (char-whitespace?\
    \ ch))))\n  (and (not (empty? txt))\n       (is-letter? (last-char txt))))\n",
  "  (cond\n    [(empty? txt) false]\n    [(char-alphabetic? (last-char txt))\n  \
    \   (and (not (char-alphabetic? (last-char (substring txt 0 (- (string-length\
    \ txt) 1)))))\n          (not (char-alphabetic? (last-char (substring txt 0 (-\
    \ (string-length txt) 2))))))]\n    [else false]))\n", "  (and (not (empty? txt))\n\
    \       (not (char-alphabetic? (last-char txt)))\n       (char-alphabetic? (last-char\
    \ (substring txt 0 (- (string-length txt) 1))))))\n", "  (and (not (empty? txt))\n\
    \       (char-alphabetic? (last-char txt))\n       (not (char-whitespace? (last-char\
    \ txt)))))\n", "  (and (not (empty? txt))\n       (char-alphabetic? (last-char\
    \ txt))\n       (not (char-whitespace? (last-char txt)))))\n", "  (cond\n    [(empty?\
    \ txt) false]\n    [(char-alphabetic? (last-char txt))\n     (not (char-alphabetic?\
    \ (last-char (string-drop-right txt 1))))]\n    [else false]))\n", "  (if (string=?\
    \ txt \"\")\n      #f\n      (let ((last-char (string-ref txt (- (string-length\
    \ txt) 1))))\n        (and (char-alphabetic? last-char)\n             (not (char-whitespace?\
    \ last-char))))))\n", "  (if (string=? txt \"\")\n      #f\n      (let ([last-char\
    \ (string-ref txt (- (string-length txt) 1))])\n        (and (char-alphabetic?\
    \ last-char)\n             (not (char-whitespace? last-char))))))\n", "  (if (empty?\
    \ txt)\n      #f\n      (if (char-alphabetic? (last-char txt))\n          (if\
    \ (char-alphabetic? (last-char (substring txt 0 (- (string-length txt) 1))))\n\
    \              #f\n              #t)\n          #f)))\n", "  (cond\n    [(empty?\
    \ txt) false]\n    [(char-alphabetic? (last-char txt)) true]\n    [else false]))\n",
  "  (let ([last-char (string-ref txt (sub1 (string-length txt)))])\n    (and (char-alphabetic?\
    \ last-char)\n         (not (char-whitespace? last-char)))))\n", "  (cond\n  \
    \  [(empty? txt) false]\n    [(char-alphabetic? (last-char txt))\n     (and (not\
    \ (char-alphabetic? (last-char (substring txt 0 (- (string-length txt) 1)))))\n\
    \          (not (char-alphabetic? (last-char (substring txt 0 (- (string-length\
    \ txt) 2))))))]\n    [else false]))\n", "  (cond\n    [(empty? txt) false]\n \
    \   [(char-alphabetic? (last-char txt)) true]\n    [else false]))\n", "  (cond\n\
    \    [(empty? txt) false]\n    [(empty? (rest txt)) false]\n    [(empty? (rest\
    \ (rest txt))) true]\n    [else (check_if_last_char_is_a_letter (rest txt))]))\n",
  "  (if (string=? txt \"\")\n      #f\n      (let* ([last-char (string-ref txt (-\
    \ (string-length txt) 1))]\n             [last-char-is-alpha? (char-alphabetic?\
    \ last-char)])\n        (if last-char-is-alpha?\n            (if (char-whitespace?\
    \ (string-ref txt (- (string-length txt) 2)))\n                #t\n          \
    \      #f)\n            #f))))\n", "  (cond\n    [(empty? txt) false]\n    [(empty?\
    \ (rest txt)) false]\n    [(char-alphabetic? (last txt))\n     (and (char-alphabetic?\
    \ (last txt))\n          (not (char-alphabetic? (last (rest txt)))))\n     ]\n\
    \    [else false]))\n", "  (if (string=? txt \"\")\n      #f\n      (if (char-alphabetic?\
    \ (string-ref txt (- (string-length txt) 1)))\n          (if (char-alphabetic?\
    \ (string-ref txt (- (string-length txt) 2)))\n              #f\n            \
    \  #t)\n          #f)))\n", "  (cond\n    [(empty? txt) false]\n    [(char-alphabetic?\
    \ (last-char txt))\n     (and (not (char-alphabetic? (last-char (substring txt\
    \ 0 (- (string-length txt) 1)))))\n          (not (char-whitespace? (last-char\
    \ (substring txt 0 (- (string-length txt) 1))))))]\n    [else false]))\n", " \
    \ (if (string=? txt \"\")\n      #f\n      (let ([last-char (string-ref txt (-\
    \ (string-length txt) 1))])\n        (and (char-alphabetic? last-char)\n     \
    \        (not (char-whitespace? last-char))))))\n", "  (let ([last-char (string-ref\
    \ txt (sub1 (string-length txt)))])\n    (and (char-alphabetic? last-char)\n \
    \        (not (char-whitespace? last-char)))))\n", "  (if (string=? \"\" txt)\n\
    \      #f\n      (let ([last-char (string-ref txt (- (string-length txt) 1))])\n\
    \        (if (char-alphabetic? last-char)\n            (if (char-whitespace? (string-ref\
    \ txt (- (string-length txt) 2)))\n                #t\n                #f)\n \
    \           #f))))\n", "  (and (not (empty? txt))\n       (char-alphabetic? (last-char\
    \ txt))\n       (not (char-whitespace? (last-char txt)))))\n", "  (cond\n    [(empty?\
    \ txt) false]\n    [(char-alphabetic? (last-char txt))\n     (and (not (char-alphabetic?\
    \ (last-char (substring txt 0 (- (string-length txt) 1)))))\n          (not (char-whitespace?\
    \ (last-char (substring txt 0 (- (string-length txt) 1))))))]\n    [else false]))\n",
  "  (and (not (empty? txt))\n       (char-alphabetic? (last-char txt))\n       (not\
    \ (char-whitespace? (last-char txt)))))\n", "  (if (string=? txt \"\")\n     \
    \ #f\n      (let ([last-char (string-ref txt (- (string-length txt) 1))])\n  \
    \      (and (char-alphabetic? last-char)\n             (not (char-whitespace?\
    \ last-char))))))\n", "  (cond\n    [(empty? txt) false]\n    [(char-alphabetic?\
    \ (last-char txt)) true]\n    [else false]))\n", "  (if (string=? txt \"\")\n\
    \      #f\n      (let ([last-char (string-ref txt (- (string-length txt) 1))])\n\
    \        (and (char-alphabetic? last-char)\n             (not (char-whitespace?\
    \ last-char))))))\n", "  (if (string=? txt \"\")\n      #f\n      (let ([last-char\
    \ (string-ref txt (- (string-length txt) 1))])\n        (and (char-alphabetic?\
    \ last-char)\n             (not (char-whitespace? last-char))))))\n", "  (if (string=?\
    \ txt \"\")\n      #f\n      (let ([last-char (string-ref txt (- (string-length\
    \ txt) 1))])\n        (and (char-alphabetic? last-char)\n             (or (not\
    \ (char-alphabetic? (string-ref txt (- (string-length txt) 2))))\n           \
    \      (string=? (string-ref txt (- (string-length txt) 2)) #\\space))))))\n",
  "  (if (empty? txt)\n      #f\n      (let ([last-char (last-char txt)])\n      \
    \  (and (char-alphabetic? last-char)\n             (not (char-whitespace? last-char))))))\n",
  "  (if (string=? txt \"\")\n      #f\n      (let ([last-char (string-ref txt (-\
    \ (string-length txt) 1))])\n        (and (char-alphabetic? last-char)\n     \
    \        (not (char-whitespace? last-char))))))\n", "  (cond\n    [(empty? txt)\
    \ false]\n    [(char-alphabetic? (last-char txt))\n     (and (char-alphabetic?\
    \ (last-char txt))\n          (not (char-alphabetic? (last-char (butlast txt)))))\n\
    \     ]\n    [else false]))\n", "  (and (not (empty? txt))\n       (or (char-alphabetic?\
    \ (last-char txt))\n           (char-alphabetic? (last-char (string-trim-right\
    \ txt))))))\n", "  (cond\n    [(empty? txt) false]\n    [(char-alphabetic? (last-char\
    \ txt))\n     (and (char-alphabetic? (last-char txt))\n          (not (char-alphabetic?\
    \ (last-char (string-drop-right txt 1)))))\n     ]\n    [else false]))\n", " \
    \ (if (empty? txt)\n      #f\n      (let ([last-char (last-char txt)])\n     \
    \   (and (char-alphabetic? last-char)\n             (not (char-whitespace? last-char))))))\n",
  "  (and (string-alphabetic? (string-ref txt (- (string-length txt) 1)))\n      \
    \ (not (string-alphabetic? (string-ref txt (- (string-length txt) 2))))))\n",
  "  (and (char-alphabetic? (string-ref txt (- (string-length txt) 1)))\n       (not\
    \ (char-whitespace? (string-ref txt (- (string-length txt) 1))))))\n", "  (let\
    \ ([last-char (string-ref txt (sub1 (string-length txt)))])\n    (and (char-alphabetic?\
    \ last-char)\n         (not (char-whitespace? last-char)))))\n", "  (and (not\
    \ (empty? txt))\n       (not (char-alphabetic? (last-char txt)))\n       (not\
    \ (char-whitespace? (last-char txt)))))\n", "  (if (string=? txt \"\")\n     \
    \ #f\n      (if (char-alphabetic? (string-ref txt (- (string-length txt) 1)))\n\
    \          (if (char-alphabetic? (string-ref txt (- (string-length txt) 2)))\n\
    \              #f\n              #t)\n          #f)))\n", "  (if (string=? txt\
    \ \"\")\n      #f\n      (let ([last-char (string-ref txt (- (string-length txt)\
    \ 1))])\n        (and (char-alphabetic? last-char)\n             (not (char-whitespace?\
    \ last-char))))))\n", "  (and (not (empty? txt))\n       (char-alphabetic? (last-char\
    \ txt))\n       (not (char-whitespace? (last-char txt)))))\n", "  (cond\n    [(empty?\
    \ txt) false]\n    [(char-alphabetic? (last-char txt))\n     (and (char-alphabetic?\
    \ (last-char txt))\n          (not (char-whitespace? (last-char txt))))]\n   \
    \ [else false]))\n", "  (cond\n    [(empty? txt) false]\n    [(char-alphabetic?\
    \ (last-char txt))\n     (and (char-alphabetic? (last-char txt))\n          (not\
    \ (char-whitespace? (last-char txt))))]\n    [else false]))\n", "  (and (not (empty?\
    \ txt))\n       (not (char-alphabetic? (last-char txt)))\n       (char-alphabetic?\
    \ (last-char (string-trim-right txt)))))\n", "  (if (empty? txt)\n      #f\n \
    \     (if (char-alphabetic? (last-char txt))\n          (if (char-alphabetic?\
    \ (last-char (substring txt 0 (- (string-length txt) 1))))\n              #f\n\
    \              #t)\n          #f)))\n", "  (and (not (empty? txt))\n       (char-alphabetic?\
    \ (last-char txt))\n       (not (char-whitespace? (last-char txt)))))\n", "  (if\
    \ (string=? txt \"\")\n      #f\n      (let* ([last-char (substring txt (- (string-length\
    \ txt) 1) (string-length txt))]\n             [next-to-last-char (substring txt\
    \ (- (string-length txt) 2) (- (string-length txt) 1))])\n        (and (char-alphabetic?\
    \ (string-&gt;char last-char))\n             (not (char-alphabetic? (string-&gt;char\
    \ next-to-last-char)))))))\n", "  (if (string=? txt \"\")\n      #f\n      (if\
    \ (char-alphabetic? (string-ref txt (- (string-length txt) 1)))\n          (if\
    \ (char-alphabetic? (string-ref txt (- (string-length txt) 2)))\n            \
    \  #f\n              #t)\n          #f)))\n", "  (cond\n    [(empty? txt) false]\n\
    \    [(char-alphabetic? (last-char txt)) true]\n    [else false]))\n", "  (let\
    \ ([last-char (string-ref txt (sub1 (string-length txt)))])\n    (and (char-alphabetic?\
    \ last-char)\n         (not (char-whitespace? last-char)))))\n", "  (if (string=?\
    \ txt \"\")\n      #f\n      (let* ([last-char (string-ref txt (- (string-length\
    \ txt) 1))]\n             [last-char-is-letter? (char-alphabetic? last-char)])\n\
    \        (if last-char-is-letter?\n            (let* ([last-char-is-part-of-word?\
    \ (string-contains txt (string last-char))])\n              (if last-char-is-part-of-word?\n\
    \                  #f\n                  #t))\n            #f))))\n", "  (and\
    \ (not (empty? txt))\n       (char-alphabetic? (last-char txt))\n       (not (char-whitespace?\
    \ (last-char txt)))))\n", "  (cond\n    [(empty? txt) false]\n    [(char-alphabetic?\
    \ (last-char txt)) true]\n    [else false]))\n", "  (define (is-letter? c)\n \
    \   (and (char-alphabetic? c) (not (char-whitespace? c))))\n  (and (not (empty?\
    \ txt))\n       (is-letter? (last-char txt))\n       (not (is-letter? (last-char\
    \ (butlast txt))))))\n", "  (if (string=? txt \"\")\n      #f\n      (let ((last-char\
    \ (string-ref txt (- (string-length txt) 1))))\n        (and (char-alphabetic?\
    \ last-char)\n             (not (char-whitespace? last-char))))))\n", "  (and\
    \ (not (empty? txt))\n       (char-alphabetic? (last-char txt))\n       (not (char-alphabetic?\
    \ (last-char (substring txt 0 (- (string-length txt) 1)))))))\n", "  (cond\n \
    \   [(empty? txt) false]\n    [(char-alphabetic? (last-char txt))\n     (cond\n\
    \       [(empty? (rest txt)) true]\n       [(char-alphabetic? (last-char (rest\
    \ txt))) false]\n       [else true])]\n    [else false]))\n", "  (and (not (empty?\
    \ txt))\n       (char-alphabetic? (last-char txt))\n       (not (char-whitespace?\
    \ (last-char txt)))))\n", "  (if (string=? txt \"\")\n      #f\n      (let ([last-char\
    \ (string-ref txt (- (string-length txt) 1))])\n        (and (char-alphabetic?\
    \ last-char)\n             (not (char-whitespace? last-char))))))\n", "  (if (string=?\
    \ \"\" txt)\n      #f\n      (if (char-alphabetic? (string-ref txt (- (string-length\
    \ txt) 1)))\n          (if (char-alphabetic? (string-ref txt (- (string-length\
    \ txt) 2)))\n              #f\n              #t)\n          #f)))\n", "  (if (string=?\
    \ \"\" txt)\n      #f\n      (if (char-alphabetic? (string-ref txt (- (string-length\
    \ txt) 1)))\n          (if (char-alphabetic? (string-ref txt (- (string-length\
    \ txt) 2)))\n              #f\n              #t)\n          #f)))\n", "  (if (string=?\
    \ txt \"\")\n      #f\n      (let ([last-char (string-ref txt (- (string-length\
    \ txt) 1))])\n        (and (char-alphabetic? last-char)\n             (not (char-whitespace?\
    \ last-char))))))\n", "  (if (string=? txt \"\")\n      #f\n      (if (char-alphabetic?\
    \ (string-ref txt (- (string-length txt) 1)))\n          (if (char-alphabetic?\
    \ (string-ref txt (- (string-length txt) 2)))\n              #f\n            \
    \  #t)\n          #f)))\n", "  (cond\n    [(empty? txt) false]\n    [(char-alphabetic?\
    \ (last-char txt)) true]\n    [else false]))\n", "  (and (not (empty? txt))\n\
    \       (char-alphabetic? (last-char txt))\n       (not (char-whitespace? (last-char\
    \ txt)))))\n", "  (and (not (empty? txt))\n       (char-alphabetic? (last-char\
    \ txt))\n       (not (char-whitespace? (last-char txt)))))\n", "  (cond\n    [(empty?\
    \ txt) false]\n    [(char-alphabetic? (last-char txt))\n     (and (not (char-alphabetic?\
    \ (last-char (butlast txt))))\n          (not (char-whitespace? (last-char (butlast\
    \ txt)))))\n     ]\n    [else false]))\n", "  (if (string=? txt \"\")\n      #f\n\
    \      (let* ([last-char (string-ref txt (- (string-length txt) 1))]\n       \
    \      [last-char-is-letter? (char-alphabetic? last-char)])\n        (if last-char-is-letter?\n\
    \            (let* ([last-char-is-part-of-word? (string-contains? txt (string\
    \ last-char))])\n              (if last-char-is-part-of-word?\n              \
    \    #f\n                  #t))\n            #f))))\n", "  (if (string=? txt \"\
    \")\n      #f\n      (let ([last-char (string-ref txt (- (string-length txt) 1))])\n\
    \        (and (char-alphabetic? last-char)\n             (not (char-whitespace?\
    \ last-char))))))\n", "  (and (not (empty? txt))\n       (char-alphabetic? (last-char\
    \ txt))\n       (not (char-whitespace? (last-char txt)))))\n", "  (if (string=?\
    \ txt \"\")\n      #f\n      (if (char-alphabetic? (string-ref txt (- (string-length\
    \ txt) 1)))\n          (if (char-alphabetic? (string-ref txt (- (string-length\
    \ txt) 2)))\n              #f\n              #t)\n          #f)))\n", "  (if (string=?\
    \ txt \"\")\n      #f\n      (let ([last-char (string-ref txt (- (string-length\
    \ txt) 1))])\n        (and (char-alphabetic? last-char)\n             (not (char-whitespace?\
    \ last-char))))))\n", "  (let ((last-char (string-ref txt (- (string-length txt)\
    \ 1))))\n    (and (char-alphabetic? last-char)\n         (not (char-whitespace?\
    \ last-char)))))\n", "  (and (not (empty? txt))\n       (char-alphabetic? (last-char\
    \ txt))\n       (not (char-whitespace? (last-char txt)))))\n", "  (cond\n    [(empty?\
    \ txt) false]\n    [(char-alphabetic? (last-char txt))\n     (if (char-alphabetic?\
    \ (last-char (substring txt 0 (- (string-length txt) 1))))\n         false\n \
    \        true)]\n    [else false]))\n", "  (if (string=? txt \"\")\n      #f\n\
    \      (if (string=? (substring txt -1) \" \")\n          #f\n          (if (string-ci=?\
    \ (substring txt -1) \"e\")\n              #t\n              #f))))\n", "  (and\
    \ (not (empty? txt))\n       (char-alphabetic? (last-char txt))\n       (not (char-alphabetic?\
    \ (char-downcase (last-char (string-trim-right txt)))))))\n", "  (and (not (empty?\
    \ txt))\n       (char-alphabetic? (last-char txt))\n       (not (char-whitespace?\
    \ (last-char txt)))))\n", "  (if (string=? txt \"\")\n      #f\n      (let ([last-char\
    \ (string-ref txt (- (string-length txt) 1))])\n        (and (char-alphabetic?\
    \ last-char)\n             (not (char-whitespace? last-char))))))\n", "  (and\
    \ (not (empty? txt))\n       (char-alphabetic? (last-char txt))\n       (not (char-whitespace?\
    \ (last-char txt)))))\n", "  (cond\n    [(empty? txt) false]\n    [(char-alphabetic?\
    \ (last-char txt)) true]\n    [else false]))\n", "  (and (not (empty? txt))\n\
    \       (char-alphabetic? (last-char txt))\n       (not (char-whitespace? (last-char\
    \ txt)))))\n", "  (and\n   (not (empty? txt))\n   (char-alphabetic? (last-char\
    \ txt))\n   (not (char-whitespace? (last-char txt)))\n   (not (char-word? (last-char\
    \ txt)))))\n", "  (if (string=? txt \"\")\n      #f\n      (if (char-alphabetic?\
    \ (string-ref txt (- (string-length txt) 1)))\n          (if (char-alphabetic?\
    \ (string-ref txt (- (string-length txt) 2)))\n              #f\n            \
    \  #t)\n          #f)))\n", "  (define (is-letter? ch)\n    (and (char-alphabetic?\
    \ ch)\n         (not (char-whitespace? ch))))\n  (and (not (empty? txt))\n   \
    \    (is-letter? (last txt))))\n", "  (if (string=? \"\" txt)\n      #f\n    \
    \  (if (char-alphabetic? (string-ref txt (- (string-length txt) 1)))\n       \
    \   (if (char-alphabetic? (string-ref txt (- (string-length txt) 2)))\n      \
    \        #f\n              #t)\n          #f)))\n", "  (and (not (empty? txt))\n\
    \       (char-alphabetic? (last-char txt))\n       (not (char-whitespace? (last-char\
    \ txt)))))\n", "  (if (string=? txt \"\")\n      #f\n      (if (char-alphabetic?\
    \ (string-ref txt (- (string-length txt) 1)))\n          (if (char-alphabetic?\
    \ (string-ref txt (- (string-length txt) 2)))\n              #f\n            \
    \  #t)\n          #f)))\n", "  (and (not (empty? txt))\n       (char-alphabetic?\
    \ (last-char txt))\n       (not (char-whitespace? (last-char txt)))))\n", "  (let\
    \ ((len (string-length txt)))\n    (and (not (zero? len))\n         (char-alphabetic?\
    \ (string-ref txt (- len 1)))\n         (or (zero? (- len 1))\n             (not\
    \ (char-alphabetic? (string-ref txt (- len 2))))))))\n", "  (cond\n    [(empty?\
    \ txt) false]\n    [(char-alphabetic? (last-char txt))\n     (cond\n       [(empty?\
    \ (rest txt)) true]\n       [(char-alphabetic? (last-char (rest txt))) false]\n\
    \       [else true])]\n    [else false]))\n", "  (if (string=? txt \"\")\n   \
    \   #f\n      (if (char-alphabetic? (string-ref txt (- (string-length txt) 1)))\n\
    \          (if (char-alphabetic? (string-ref txt (- (string-length txt) 2)))\n\
    \              #f\n              #t)\n          #f)))\n", "  (if (empty? txt)\n\
    \      #f\n      (let ([last-char (last-char txt)])\n        (if (char-alphabetic?\
    \ last-char)\n            (if (char-whitespace? (string-ref txt (- (string-length\
    \ txt) 2)))\n                #f\n                #t)\n            #f))))\n", " \
    \ (and (not (empty? txt))\n       (char-alphabetic? (last-char txt))\n       (not\
    \ (char-whitespace? (last-char txt)))))\n", "  (if (string=? txt \"\")\n     \
    \ #f\n      (if (char-alphabetic? (string-ref txt (- (string-length txt) 1)))\n\
    \          (if (char-alphabetic? (string-ref txt (- (string-length txt) 2)))\n\
    \              #f\n              #t)\n          #f)))\n", "  (and (not (empty?\
    \ txt))\n       (char-alphabetic? (last-char txt))\n       (not (char-whitespace?\
    \ (last-char txt)))))\n", "  (and (not (empty? txt))\n       (char-alphabetic?\
    \ (last-char txt))\n       (not (char-alphabetic? (last-char (string-drop-right\
    \ txt 1))))))\n", "  (if (string=? txt \"\")\n      #f\n      (let ((last-char\
    \ (string-ref txt (- (string-length txt) 1))))\n        (if (char-alphabetic?\
    \ last-char)\n            (if (char-whitespace? (string-ref txt (- (string-length\
    \ txt) 2)))\n                #t\n                #f)\n            #f))))\n", " \
    \ (if (string=? txt \"\")\n      #f\n      (let ((last-char (string-ref txt (-\
    \ (string-length txt) 1))))\n        (and (char-alphabetic? last-char)\n     \
    \        (not (char-whitespace? last-char))))))\n", "  (cond\n    [(empty? txt)\
    \ false]\n    [(char-alphabetic? (last-char txt))\n     (and (not (char-alphabetic?\
    \ (last-char (substring txt 0 (- (string-length txt) 1)))))\n          (not (char-alphabetic?\
    \ (last-char (substring txt 0 (- (string-length txt) 2))))))]\n    [else false]))\n",
  "  (if (string=? txt \"\")\n      #f\n      (let ((last-char (string-ref txt (-\
    \ (string-length txt) 1))))\n        (and (char-alphabetic? last-char)\n     \
    \        (not (char-whitespace? last-char))))))\n", "  (if (string=? txt \"\"\
    )\n      #f\n      (let ([last-char (string-ref txt (- (string-length txt) 1))])\n\
    \        (if (char-alphabetic? last-char)\n            (if (char-alphabetic? (string-ref\
    \ txt (- (string-length txt) 2)))\n                #f\n                #t)\n \
    \           #f))))\n", "  (if (empty? txt)\n      #f\n      (let ([last-char (substring\
    \ txt -1)])\n        (and (char-alphabetic? (string-&gt;char last-char))\n   \
    \          (not (char-whitespace? (string-&gt;char last-char)))))))\n", "  (cond\n\
    \    [(empty? txt) false]\n    [(char-alphabetic? (last-char txt)) true]\n   \
    \ [else false]))\n", "  (if (string=? txt \"\")\n      #f\n      (let ([last-char\
    \ (string-ref txt (- (string-length txt) 1))])\n        (and (char-alphabetic?\
    \ last-char)\n             (not (char-whitespace? last-char))))))\n", "  (cond\n\
    \    [(empty? txt) false]\n    [(char-alphabetic? (last-char txt)) true]\n   \
    \ [else false]))\n", "  (and (not (empty? txt))\n       (char-alphabetic? (last-char\
    \ txt))\n       (not (char-whitespace? (last-char txt)))))\n", "  (if (string=?\
    \ txt \"\")\n      #f\n      (if (string=? (substring txt -1) \" \")\n       \
    \   #f\n          (char-alphabetic? (string-ref txt (- (string-length txt) 1))))))\n",
  "  (and (not (empty? txt))\n       (char-alphabetic? (last-char txt))\n       (not\
    \ (char-whitespace? (last-char txt)))))\n", "  (and (not (empty? txt))\n     \
    \  (char-alphabetic? (last-char txt))\n       (not (char-whitespace? (last-char\
    \ txt)))))\n"]
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
