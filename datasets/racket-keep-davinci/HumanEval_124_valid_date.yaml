name: HumanEval_124_valid_date
language: racket
prompt: "#lang racket\n\n;; You have to write a function which validates a given date\
  \ string and\n;; returns True if the date is valid otherwise False.\n;; The date\
  \ is valid if all of the following rules are satisfied:\n;; 1. The date string is\
  \ not empty.\n;; 2. The number of days is not less than 1 or higher than 31 days\
  \ for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher\
  \ than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or\
  \ higher than 29 for the month 2.\n;; 3. The months should not be less than 1 or\
  \ higher than 12.\n;; 4. The date should be in the format: mm-dd-yyyy\n;; for example:\
  \ \n;; valid_date('03-11-2000') => True\n;; valid_date('15-01-2012') => False\n\
  ;; valid_date('04-0-2040') => False\n;; valid_date('06-04-2020') => True\n;; valid_date('06/04/2020')\
  \ => False\n(define (valid_date date)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate valid_date))\n\
  \    (check-equal? (candidate \"03-11-2000\") #t)\n    (check-equal? (candidate\
  \ \"15-01-2012\") #f)\n    (check-equal? (candidate \"04-0-2040\") #f)\n    (check-equal?\
  \ (candidate \"06-04-2020\") #t)\n    (check-equal? (candidate \"01-01-2007\") #t)\n\
  \    (check-equal? (candidate \"03-32-2011\") #f)\n    (check-equal? (candidate\
  \ \"\") #f)\n    (check-equal? (candidate \"04-31-3000\") #f)\n    (check-equal?\
  \ (candidate \"06-06-2005\") #t)\n    (check-equal? (candidate \"21-31-2000\") #f)\n\
  \    (check-equal? (candidate \"04-12-2003\") #t)\n    (check-equal? (candidate\
  \ \"04122003\") #f)\n    (check-equal? (candidate \"20030412\") #f)\n    (check-equal?\
  \ (candidate \"2003-04\") #f)\n    (check-equal? (candidate \"2003-04-12\") #f)\n\
  \    (check-equal? (candidate \"04-2003\") #f)\n))\n\n(test-humaneval)"
completions: ["  (define (valid-month month)\n    (and (not (empty? month))\n    \
    \     (not (string-contains month #\\-)\n              (string-contains month\
    \ #\\/))\n         (and (<= 1 (string->number month))\n              (<= (string->number\
    \ month) 12))))\n  (define (valid-day day)\n    (and (not (empty? day))\n    \
    \     (not (string-contains day #\\-)\n              (string-contains day #\\\
    /))\n         (and (<= 1 (string->number day))\n              (<= (string->number\
    \ day) 31))))\n  (define (valid-year year)\n    (and (not (empty? year))\n   \
    \      (not (string-contains year #\\-)\n              (string-contains year #\\\
    /))\n         (and (<= 1 (string->number year))\n              (<= (string->number\
    \ year) 9999))))\n  (define (valid-date-format date)\n    (and (string-contains\
    \ date #\\-)\n         (string-contains date #\\/)))\n  (define (split-date date)\n\
    \    (string-split date #\\-))\n  (define (split-date-slash date)\n    (string-split\
    \ date #\\/))\n  (define (valid-date-format-slash date)\n    (and (string-contains\
    \ date #\\-)\n         (string-contains date #\\/)))\n  (define (valid-date-format-dash\
    \ date)\n    (and (string-contains date #\\-)\n         (string-contains date\
    \ #\\/)))\n  (define (valid-date-format-dash date)\n    (and (string-contains\
    \ date #\\-)\n         (string-contains date #\\/)))\n  (define (valid-date-format-dash\
    \ date)\n    (and (string-contains date #\\-)\n         (string-contains date\
    \ #\\/)))\n  (define (valid-date-format-dash date)\n    (and (string-contains\
    \ date #\\-)\n         (string-contains date #\\/)))\n  (define (valid-date-format-dash\
    \ date)\n    (and (string-contains date #\\-)\n         (string", "  (define (valid-month\
    \ month)\n    (and (not (empty? month))\n         (not (negative? (string->number\
    \ month)))\n         (not (> (string->number month) 12))))\n  (define (valid-day\
    \ day)\n    (and (not (empty? day))\n         (not (negative? (string->number\
    \ day)))\n         (not (> (string->number day) 31))))\n  (define (valid-year\
    \ year)\n    (and (not (empty? year))\n         (not (negative? (string->number\
    \ year)))\n         (not (> (string->number year) 9999))))\n  (define (valid-date-format\
    \ date)\n    (regexp-match? #rx\"^[0-9]{2}-[0-9]{2}-[0-9]{4}$\" date))\n  (define\
    \ (valid-date-parts date)\n    (let* ([date-parts (string-split date #\\-)]\n\
    \           [month (first date-parts)]\n           [day (second date-parts)]\n\
    \           [year (third date-parts)])\n      (and (valid-month month)\n     \
    \      (valid-day day)\n           (valid-year year))))\n  (and (valid-date-format\
    \ date)\n       (valid-date-parts date)))\n", "  (and (not (empty? date))\n  \
    \     (match date\n             [(regexp #rx\"^(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])-[0-9]{4}$\"\
    )\n              (let ([month (string->number (regexp-match #rx\"^(0[1-9]|1[0-2])\"\
    \ date))]\n                    [day (string->number (regexp-match #rx\"^(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])\"\
    \ date))])\n                (cond [(= month 1) (= day 31)]\n                 \
    \     [(= month 3) (= day 31)]\n                      [(= month 5) (= day 31)]\n\
    \                      [(= month 7) (= day 31)]\n                      [(= month\
    \ 8) (= day 31)]\n                      [(= month 10) (= day 31)]\n          \
    \            [(= month 12) (= day 31)]\n                      [(= month 4) (=\
    \ day 30)]\n                      [(= month 6) (= day 30)]\n                 \
    \     [(= month 9) (= day 30)]\n                      [(= month 11) (= day 30)]\n\
    \                      [(= month 2) (= day 29)]))]\n             [_ #f])))\n",
  "  (define (valid-month month)\n    (and (integer? month)\n         (and (>= month\
    \ 1) (<= month 12))))\n  (define (valid-day day)\n    (and (integer? day)\n  \
    \       (and (>= day 1) (<= day 31))))\n  (define (valid-year year)\n    (and\
    \ (integer? year)\n         (and (>= year 0) (<= year 9999))))\n  (define (valid-date-format\
    \ date)\n    (and (string? date)\n         (string-match #rx\"^[0-9]{2}-[0-9]{2}-[0-9]{4}$\"\
    \ date)))\n  (define (valid-date-parts date)\n    (let* ([date-parts (string-split\
    \ date #\\-)]\n           [month (string->number (list-ref date-parts 0))]\n \
    \          [day (string->number (list-ref date-parts 1))]\n           [year (string->number\
    \ (list-ref date-parts 2))])\n      (and (valid-month month)\n           (valid-day\
    \ day)\n           (valid-year year))))\n  (and (valid-date-format date)\n   \
    \    (valid-date-parts date)))\n", "  (define (valid-date-helper date)\n    (define\
    \ (valid-date-helper-helper date)\n      (define (valid-date-helper-helper-helper\
    \ date)\n        (define (valid-date-helper-helper-helper-helper date)\n     \
    \     (define (valid-date-helper-helper-helper-helper-helper date)\n         \
    \   (define (valid-date-helper-helper-helper-helper-helper-helper date)\n    \
    \          (define (valid-date-helper-helper-helper-helper-helper-helper-helper\
    \ date)\n                (define (valid-date-helper-helper-helper-helper-helper-helper-helper-helper\
    \ date)\n                  (define (valid-date-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ date)\n                    (define (valid-date-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ date)\n                      (define (valid-date-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ date)\n                        (define (valid-date-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ date)\n                          (define (valid-date-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ date)\n                            (define (valid-date-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ date)\n                              (define (valid-date-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ date", "  (define (valid-month month)\n    (and (&gt;= month 1) (&lt;= month\
    \ 12)))\n  (define (valid-day month day)\n    (cond\n      [(or (= month 1) (=\
    \ month 3) (= month 5) (= month 7) (= month 8) (= month 10) (= month 12))\n  \
    \     (and (&gt;= day 1) (&lt;= day 31))]\n      [(or (= month 4) (= month 6)\
    \ (= month 9) (= month 11))\n       (and (&gt;= day 1) (&lt;= day 30))]\n    \
    \  [(= month 2)\n       (and (&gt;= day 1) (&lt;= day 29))]))\n  (define (valid-year\
    \ year)\n    (and (&gt;= year 0) (&lt;= year 9999)))\n  (define (valid-date-format\
    \ date)\n    (and (regexp-match #rx\"^[0-9]{2}-[0-9]{2}-[0-9]{4}$\" date)\n  \
    \       (not (regexp-match #rx\"^[0-9]{2}/[0-9]{2}/[0-9]{4}$\" date))))\n  (define\
    \ (valid-date-parts date)\n    (let* ([parts (string-split date #\\-)])\n    \
    \  (and (valid-month (string-&gt;number (list-ref parts 0)))\n           (valid-day\
    \ (string-&gt;number (list-ref parts 0)) (string-&gt;number (list-ref parts 1)))\n\
    \           (valid-year (string-&gt;number (list-ref parts 2))))))\n  (and (not\
    \ (string=? date \"\"))\n       (valid-date-format date)\n       (valid-date-parts\
    \ date)))\n</code>\n", "  (define (valid-month month)\n    (and (<= 1 month) (<=\
    \ month 12)))\n  (define (valid-day month day)\n    (cond\n      [(or (= 1 month)\
    \ (= 3 month) (= 5 month) (= 7 month) (= 8 month) (= 10 month) (= 12 month))\n\
    \       (and (<= 1 day) (<= day 31))]\n      [(or (= 4 month) (= 6 month) (= 9\
    \ month) (= 11 month))\n       (and (<= 1 day) (<= day 30))]\n      [(= 2 month)\n\
    \       (and (<= 1 day) (<= day 29))]))\n  (define (valid-year year)\n    (and\
    \ (<= 1 year) (<= year 9999)))\n  (define (valid-date-format date)\n    (and (regexp-match?\
    \ #rx\"^[0-9]{2}-[0-9]{2}-[0-9]{4}$\" date)\n         (not (regexp-match? #rx\"\
    ^[0-9]{2}/[0-9]{2}/[0-9]{4}$\" date))))\n  (define (valid-date-parts date)\n \
    \   (define (split-date date)\n      (regexp-split #rx\"-\" date))\n    (define\
    \ (to-int str)\n      (string->number str))\n    (define (to-int-list lst)\n \
    \     (map to-int lst))\n    (define (to-int-list-list lst)\n      (map to-int-list\
    \ lst))\n    (define (to-int-list-list-list lst)\n      (map to-int-list-list\
    \ lst))\n    (define (to-int-list-list-list-list lst)\n      (map to-int-list-list-list\
    \ lst))\n    (define (to-int-list-list-list-list-list lst)\n      (map to-int-list-list-list-list\
    \ lst))\n    (define (to-int-list-list-list-list-list-list lst)\n      (map to-int-list-list",
  "  (define (valid-month month)\n    (and (integer? month)\n         (and (<= 1 month)\
    \ (<= month 12))))\n  (define (valid-day month day)\n    (and (integer? day)\n\
    \         (cond ((or (= month 1) (= month 3) (= month 5) (= month 7) (= month\
    \ 8) (= month 10) (= month 12))\n                (<= 1 day) (<= day 31))\n   \
    \            ((or (= month 4) (= month 6) (= month 9) (= month 11))\n        \
    \        (<= 1 day) (<= day 30))\n               ((= month 2)\n              \
    \  (<= 1 day) (<= day 29)))))\n  (define (valid-year year)\n    (and (integer?\
    \ year)\n         (<= 1000 year) (<= year 9999)))\n  (define (valid-date-format\
    \ date)\n    (and (string? date)\n         (regexp-match #rx\"^[0-9]{2}-[0-9]{2}-[0-9]{4}$\"\
    \ date)))\n  (define (valid-date-parts date)\n    (define (split-date date)\n\
    \      (string-split date #\\-))\n    (define (date-parts date)\n      (map string->number\
    \ (split-date date)))\n    (define (valid-date-parts date)\n      (define (date-parts\
    \ date)\n        (map string->number (split-date date)))\n      (define (valid-date-parts\
    \ date)\n        (and (valid-month (list-ref (date-parts date) 0))\n         \
    \    (valid-day (list-ref (date-parts date) 0) (list-ref (date-parts date) 1))\n\
    \             (valid-year (list-ref (date-parts date) 2)))))\n    (valid-date-parts\
    \ date))\n  (and (valid-date-format date)\n       (valid-date-parts date)))\n",
  "  (define (valid-month month)\n    (and (not (empty? month))\n         (and (<=\
    \ 1 (string->number month))\n              (<= (string->number month) 12))))\n\
    \  (define (valid-day day)\n    (and (not (empty? day))\n         (and (<= 1 (string->number\
    \ day))\n              (<= (string->number day) 31))))\n  (define (valid-year\
    \ year)\n    (and (not (empty? year))\n         (and (<= 1 (string->number year))\n\
    \              (<= (string->number year) 9999))))\n  (define (valid-date-format\
    \ date)\n    (and (regexp-match? #rx\"^[0-9]{2}-[0-9]{2}-[0-9]{4}$\" date)\n \
    \        (not (regexp-match? #rx\"^[0-9]{2}/[0-9]{2}/[0-9]{4}$\" date))))\n  (define\
    \ (valid-month-day-combination month day)\n    (cond ((or (equal? month \"01\"\
    )\n               (equal? month \"03\")\n               (equal? month \"05\")\n\
    \               (equal? month \"07\")\n               (equal? month \"08\")\n\
    \               (equal? month \"10\")\n               (equal? month \"12\"))\n\
    \           (and (<= 1 (string->number day))\n                (<= (string->number\
    \ day) 31)))\n          ((or (equal? month \"04\")\n               (equal? month\
    \ \"06\")\n               (equal? month \"09\")\n               (equal? month\
    \ \"11\"))\n           (and (<= 1 (string->number day))\n                (<= (string->number\
    \ day) 30)))\n          ((equal? month \"02\")\n           (and (<= 1 (string->number\
    \ day))\n                (<= (string->number day) 29)))))\n  (define (valid-leap-year\
    \ year)\n    (and (not (empty? year))\n         (and (equal? 0 (modulo (string->number\
    \ year) 4))\n              (or (equal? 0 (modulo (string->number year) 100))\n\
    \                  (equal?", "  (define (valid-month month)\n    (and (not (string=?\
    \ month \"\"))\n         (and (<= 1 (string->number month))\n              (<=\
    \ (string->number month) 12))))\n  (define (valid-day month day)\n    (and (not\
    \ (string=? day \"\"))\n         (and (<= 1 (string->number day))\n          \
    \    (<= (string->number day)\n                  (cond\n                    [(string=?\
    \ month \"1\") 31]\n                    [(string=? month \"3\") 31]\n        \
    \            [(string=? month \"5\") 31]\n                    [(string=? month\
    \ \"7\") 31]\n                    [(string=? month \"8\") 31]\n              \
    \      [(string=? month \"10\") 31]\n                    [(string=? month \"12\"\
    ) 31]\n                    [(string=? month \"4\") 30]\n                    [(string=?\
    \ month \"6\") 30]\n                    [(string=? month \"9\") 30]\n        \
    \            [(string=? month \"11\") 30]\n                    [(string=? month\
    \ \"2\") 29]\n                    [else 0])))))\n  (define (valid-year year)\n\
    \    (and (not (string=? year \"\"))\n         (and (<= 1 (string->number year))\n\
    \              (<= (string->number year) 9999))))\n  (define (valid-format date)\n\
    \    (and (regexp-match? #rx\"^[0-9]{2}-[0-9]{2}-[0-9]{4}$\" date)\n         (not\
    \ (regexp-match? #rx\"^[0-9]{2}/[0-9]{2}/[0-9]{4}$\" date))))\n  (define (split-date\
    \ date)\n    (regexp-match #rx\"^([0-9]{2})-([0-9]{2})-([0-9]{4})$\" date))\n\
    \  (define (get-month date)\n    (list-ref (split-date date) 1))\n  (define (get-day\
    \ date)\n    (list-ref (split-date date) 2))\n  (define (get-year date)\n    (list",
  "  (define (valid-date-helper date)\n    (define (valid-date-helper-helper date)\n\
    \      (define (valid-date-helper-helper-helper date)\n        (define (valid-date-helper-helper-helper-helper\
    \ date)\n          (define (valid-date-helper-helper-helper-helper-helper date)\n\
    \            (define (valid-date-helper-helper-helper-helper-helper-helper date)\n\
    \              (define (valid-date-helper-helper-helper-helper-helper-helper-helper\
    \ date)\n                (define (valid-date-helper-helper-helper-helper-helper-helper-helper-helper\
    \ date)\n                  (define (valid-date-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ date)\n                    (define (valid-date-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ date)\n                      (define (valid-date-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ date)\n                        (define (valid-date-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ date)\n                          (define (valid-date-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ date)\n                            (define (valid-date-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ date)\n                              (define (valid-date-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ date", "  (define (valid-month month)\n    (and (not (empty? month))\n     \
    \    (and (not (empty? (string-&gt;number month)))\n              (and (&lt;=\
    \ 1 (string-&gt;number month))\n                   (&lt;= (string-&gt;number month)\
    \ 12)))))\n  (define (valid-day day)\n    (and (not (empty? day))\n         (and\
    \ (not (empty? (string-&gt;number day)))\n              (and (&lt;= 1 (string-&gt;number\
    \ day))\n                   (&lt;= (string-&gt;number day) 31)))))\n  (define\
    \ (valid-year year)\n    (and (not (empty? year))\n         (and (not (empty?\
    \ (string-&gt;number year)))\n              (and (&lt;= 1 (string-&gt;number year))\n\
    \                   (&lt;= (string-&gt;number year) 9999)))))\n  (define (valid-date-format\
    \ date)\n    (and (regexp-match #rx\"^[0-9]{2}-[0-9]{2}-[0-9]{4}$\" date)\n  \
    \       (not (regexp-match #rx\"^[0-9]{2}/[0-9]{2}/[0-9]{4}$\" date))))\n  (define\
    \ (valid-date-parts date)\n    (and (valid-month (substring date 0 2))\n     \
    \    (valid-day (substring date 3 5))\n         (valid-year (substring date 6\
    \ 10))))\n  (and (valid-date-format date)\n       (valid-date-parts date)))\n",
  "  (define (valid-month month)\n    (and (integer? month)\n         (and (>= month\
    \ 1) (<= month 12))))\n  (define (valid-day day)\n    (and (integer? day)\n  \
    \       (and (>= day 1) (<= day 31))))\n  (define (valid-year year)\n    (and\
    \ (integer? year)\n         (and (>= year 0) (<= year 9999))))\n  (define (valid-date-format\
    \ date)\n    (regexp-match? #rx\"^[0-9]{2}-[0-9]{2}-[0-9]{4}$\" date))\n  (define\
    \ (valid-date-parts date)\n    (let ((date-parts (string-split date #\\-)))\n\
    \      (and (= (length date-parts) 3)\n           (and (valid-month (string->number\
    \ (list-ref date-parts 0)))\n                (and (valid-day (string->number (list-ref\
    \ date-parts 1)))\n                     (valid-year (string->number (list-ref\
    \ date-parts 2))))))))\n  (and (valid-date-format date)\n       (valid-date-parts\
    \ date)))\n", "  (define (valid-month month)\n    (and (integer? month)\n    \
    \     (and (>= month 1) (<= month 12))))\n  (define (valid-day month day)\n  \
    \  (and (integer? day)\n         (and (>= day 1)\n              (cond\n      \
    \          [(or (= month 1) (= month 3) (= month 5) (= month 7) (= month 8) (=\
    \ month 10) (= month 12))\n                 (<= day 31)]\n                [(or\
    \ (= month 4) (= month 6) (= month 9) (= month 11))\n                 (<= day\
    \ 30)]\n                [(= month 2)\n                 (<= day 29)]))))\n  (define\
    \ (valid-year year)\n    (and (integer? year)\n         (>= year 0)))\n  (define\
    \ (valid-date-format date)\n    (and (regexp-match? #rx\"^[0-9]{2}-[0-9]{2}-[0-9]{4}$\"\
    \ date)\n         (let ([date-list (string-split date #\\-)]\n               [month\
    \ (string->number (list-ref date-list 0))]\n               [day (string->number\
    \ (list-ref date-list 1))]\n               [year (string->number (list-ref date-list\
    \ 2))])\n           (and (valid-month month)\n                (valid-day month\
    \ day)\n                (valid-year year)))))\n  (and (not (string=? date \"\"\
    ))\n       (valid-date-format date)))\n", "  (define (valid-date-helper date)\n\
    \    (define (valid-date-helper-2 date)\n      (define (valid-date-helper-3 date)\n\
    \        (define (valid-date-helper-4 date)\n          (define (valid-date-helper-5\
    \ date)\n            (define (valid-date-helper-6 date)\n              (define\
    \ (valid-date-helper-7 date)\n                (define (valid-date-helper-8 date)\n\
    \                  (define (valid-date-helper-9 date)\n                    (define\
    \ (valid-date-helper-10 date)\n                      (define (valid-date-helper-11\
    \ date)\n                        (define (valid-date-helper-12 date)\n       \
    \                   (define (valid-date-helper-13 date)\n                    \
    \        (define (valid-date-helper-14 date)\n                              (define\
    \ (valid-date-helper-15 date)\n                                (define (valid-date-helper-16\
    \ date)\n                                  (define (valid-date-helper-17 date)\n\
    \                                    (define (valid-date-helper-18 date)\n   \
    \                                   (define (valid-date-helper-19 date)\n    \
    \                                    (define (valid-date-helper-20 date)\n   \
    \                                       (define (valid-date-helper-21 date)\n\
    \                                            (define (valid-date-helper-22 date)\n\
    \                                              (define (valid-date-helper-23 date)\n\
    \                                                (define (valid-date-helper-24\
    \ date)\n                                                  (define (valid-date-helper-25\
    \ date)\n                                                    (define (valid-date-helper-26\
    \ date)\n                                                      (define (valid-date-helper-27\
    \ date)\n                                                        (define (valid-date-helper-28\
    \ date)\n                                                          (define (valid-date-helper-29\
    \ date)\n                                                            (define (valid-date-helper-30\
    \ date)\n                                                              (define\
    \ (valid-date-helper-31 date)\n                                              \
    \                  (define (valid-date-helper-32", "  (define (valid-date-helper\
    \ date)\n    (define (valid-month? month)\n      (and (&gt;= month 1) (&lt;= month\
    \ 12)))\n    (define (valid-day? month day)\n      (cond ((= month 1)\n      \
    \       (and (&gt;= day 1) (&lt;= day 31)))\n            ((= month 3)\n      \
    \       (and (&gt;= day 1) (&lt;= day 31)))\n            ((= month 5)\n      \
    \       (and (&gt;= day 1) (&lt;= day 31)))\n            ((= month 7)\n      \
    \       (and (&gt;= day 1) (&lt;= day 31)))\n            ((= month 8)\n      \
    \       (and (&gt;= day 1) (&lt;= day 31)))\n            ((= month 10)\n     \
    \        (and (&gt;= day 1) (&lt;= day 31)))\n            ((= month 12)\n    \
    \         (and (&gt;= day 1) (&lt;= day 31)))\n            ((= month 4)\n    \
    \         (and (&gt;= day 1) (&lt;= day 30)))\n            ((= month 6)\n    \
    \         (and (&gt;= day 1) (&lt;= day 30)))\n            ((= month 9)\n    \
    \         (and (&gt;= day 1) (&lt;= day 30)))\n            ((= month 11)\n   \
    \          (and (&gt;= day 1) (&lt;= day 30)))\n            ((= month 2)\n   \
    \          (and (&gt;= day 1) (&lt;= day 29)))))\n    (define (valid-year? year)\n\
    \      (and (&gt;= year 1) (&lt;= year 9999)))\n    (define (valid-date-format?\
    \ date)\n      (and (string-contains date #\\-)))\n    (define (valid-date-parts?\
    \ date)\n      (define (split-date date)\n        (string-split date #\\-))\n\
    \      (define (date-parts date)\n        (map string-&gt;number (split-date date)))\n\
    \      (define (date-parts-length date)\n        (length (date-parts date)))\n\
    \      (and (= (date-parts-length date) 3)))\n    (", "  (define (valid-month\
    \ month)\n    (and (integer? month)\n         (and (<= 1 month) (<= month 12))))\n\
    \  (define (valid-day month day)\n    (and (integer? day)\n         (and (<= 1\
    \ day)\n              (cond ((or (= 1 month) (= 3 month) (= 5 month) (= 7 month)\
    \ (= 8 month) (= 10 month) (= 12 month))\n                     (<= day 31))\n\
    \                    ((or (= 4 month) (= 6 month) (= 9 month) (= 11 month))\n\
    \                     (<= day 30))\n                    ((= 2 month)\n       \
    \              (<= day 29))))))\n  (define (valid-year year)\n    (and (integer?\
    \ year)\n         (<= year 9999)))\n  (define (valid-date-format date)\n    (regexp-match?\
    \ #rx\"^[0-9]{2}-[0-9]{2}-[0-9]{4}$\" date))\n  (define (valid-date-parts date)\n\
    \    (define (split-date date)\n      (string-split date #\\-)\n      (map string->number\
    \ (string-split date #\\-)))\n    (define (valid-date-parts-helper date)\n   \
    \   (let* ([date-parts (split-date date)]\n             [month (list-ref date-parts\
    \ 0)]\n             [day (list-ref date-parts 1)]\n             [year (list-ref\
    \ date-parts 2)])\n        (and (valid-month month)\n             (valid-day month\
    \ day)\n             (valid-year year))))\n    (and (valid-date-format date)\n\
    \         (valid-date-parts-helper date)))\n  (and (string? date)\n       (valid-date-parts\
    \ date)))\n", "  (define (valid-month month)\n    (and (not (empty? month))\n\
    \         (not (negative? (string->number month)))\n         (not (> (string->number\
    \ month) 12))))\n  (define (valid-day month day)\n    (and (not (empty? day))\n\
    \         (not (negative? (string->number day)))\n         (cond ((or (= (string->number\
    \ month) 1)\n                    (= (string->number month) 3)\n              \
    \      (= (string->number month) 5)\n                    (= (string->number month)\
    \ 7)\n                    (= (string->number month) 8)\n                    (=\
    \ (string->number month) 10)\n                    (= (string->number month) 12))\n\
    \                (<= (string->number day) 31))\n               ((or (= (string->number\
    \ month) 4)\n                    (= (string->number month) 6)\n              \
    \      (= (string->number month) 9)\n                    (= (string->number month)\
    \ 11))\n                (<= (string->number day) 30))\n               ((= (string->number\
    \ month) 2)\n                (<= (string->number day) 29)))))\n  (define (valid-year\
    \ year)\n    (and (not (empty? year))\n         (not (negative? (string->number\
    \ year)))))\n  (define (valid-format date)\n    (and (regexp-match? #rx\"^[0-9]{2}-[0-9]{2}-[0-9]{4}$\"\
    \ date)\n         (valid-month (substring date 0 2))\n         (valid-day (substring\
    \ date 0 2) (substring date 3 5))\n         (valid-year (substring date 6))))\n\
    \  (valid-format date))\n", "  (define (valid-month month)\n    (and (integer?\
    \ month)\n         (and (<= 1 month) (<= month 12))))\n  (define (valid-day month\
    \ day)\n    (and (integer? day)\n         (and (<= 1 day)\n              (cond\
    \ ((or (= month 1) (= month 3) (= month 5) (= month 7) (= month 8) (= month 10)\
    \ (= month 12))\n                     (<= day 31))\n                    ((or (=\
    \ month 4) (= month 6) (= month 9) (= month 11))\n                     (<= day\
    \ 30))\n                    ((= month 2)\n                     (<= day 29))))))\n\
    \  (define (valid-year year)\n    (and (integer? year)\n         (and (<= 1 year)\
    \ (<= year 9999))))\n  (define (valid-date-format date)\n    (regexp-match? #rx\"\
    ^[0-9]{2}-[0-9]{2}-[0-9]{4}$\" date))\n  (define (split-date date)\n    (map string->number\
    \ (regexp-split #rx\"-\" date)))\n  (define (valid-date? date)\n    (let* ([date-list\
    \ (split-date date)]\n           [month (list-ref date-list 0)]\n           [day\
    \ (list-ref date-list 1)]\n           [year (list-ref date-list 2)])\n      (and\
    \ (valid-date-format date)\n           (valid-month month)\n           (valid-day\
    \ month day)\n           (valid-year year))))\n  (valid-date? date))\n", "  (define\
    \ (valid-date-format? date)\n    (regexp-match? #rx\"^[0-9]{2}-[0-9]{2}-[0-9]{4}$\"\
    \ date))\n  (define (valid-date-numbers? date)\n    (define (valid-month? month)\n\
    \      (and (<= 1 month) (<= month 12)))\n    (define (valid-day? month day)\n\
    \      (cond ((or (= month 1) (= month 3) (= month 5) (= month 7) (= month 8)\
    \ (= month 10) (= month 12))\n             (and (<= 1 day) (<= day 31)))\n   \
    \         ((or (= month 4) (= month 6) (= month 9) (= month 11))\n           \
    \  (and (<= 1 day) (<= day 30)))\n            ((= month 2)\n             (and\
    \ (<= 1 day) (<= day 29)))))\n    (define (valid-year? year)\n      (and (<= 1\
    \ year) (<= year 9999)))\n    (let* ([date-parts (string-split date #\\-)]\n \
    \          [month (string->number (vector-ref date-parts 0))]\n           [day\
    \ (string->number (vector-ref date-parts 1))]\n           [year (string->number\
    \ (vector-ref date-parts 2))])\n      (and (valid-month? month)\n           (valid-day?\
    \ month day)\n           (valid-year? year))))\n  (and (valid-date-format? date)\n\
    \       (valid-date-numbers? date)))\n", "  (define (valid-month month)\n    (and\
    \ (not (empty? month))\n         (and (not (empty? (rest month)))\n          \
    \    (not (empty? (rest (rest month)))))))\n  (define (valid-day day)\n    (and\
    \ (not (empty? day))\n         (and (not (empty? (rest day)))\n              (not\
    \ (empty? (rest (rest day)))))))\n  (define (valid-year year)\n    (and (not (empty?\
    \ year))\n         (and (not (empty? (rest year)))\n              (not (empty?\
    \ (rest (rest year))))\n              (not (empty? (rest (rest (rest year))))))))\n\
    \  (define (valid-date-format date)\n    (and (not (empty? date))\n         (and\
    \ (not (empty? (rest date)))\n              (not (empty? (rest (rest date))))\n\
    \              (not (empty? (rest (rest (rest date))))))))\n  (define (valid-month-day\
    \ month day)\n    (cond\n      [(equal? month \"01\")\n       (and (equal? day\
    \ \"01\")\n            (or (equal? day \"02\")\n                (equal? day \"\
    03\")\n                (equal? day \"04\")\n                (equal? day \"05\"\
    )\n                (equal? day \"06\")\n                (equal? day \"07\")\n\
    \                (equal? day \"08\")\n                (equal? day \"09\")\n  \
    \              (equal? day \"10\")\n                (equal? day \"11\")\n    \
    \            (equal? day \"12\")\n                (equal? day \"13\")\n      \
    \          (equal? day \"14\")\n                (equal? day \"15\")\n        \
    \        (equal? day \"16\")\n                (equal? day \"17\")\n          \
    \      (equal? day \"18\")\n                (equal? day \"19\")\n            \
    \    (equal? day \"20\")\n                (equal? day \"21\")\n              \
    \  (equal? day \"22\")\n                (equal? day \"23\")\n                (equal?\
    \ day \"24\")\n                (equal? day \"25\")\n                (equal? day\
    \ \"26\")\n                (equal? day \"27\")\n                (equal? day \"\
    28\")\n                (equal? day", "  (define (valid-month month)\n    (and\
    \ (not (empty? month))\n         (not (string-contains month #\\0))\n        \
    \ (not (string-contains month #\\2))\n         (not (string-contains month #\\\
    4))\n         (not (string-contains month #\\6))\n         (not (string-contains\
    \ month #\\7))\n         (not (string-contains month #\\9))\n         (not (string-contains\
    \ month #\\1))\n         (not (string-contains month #\\3))\n         (not (string-contains\
    \ month #\\5))\n         (not (string-contains month #\\8))\n         (not (string-contains\
    \ month #\\0))\n         (not (string-contains month #\\1))\n         (not (string-contains\
    \ month #\\2))\n         (not (string-contains month #\\3))\n         (not (string-contains\
    \ month #\\4))\n         (not (string-contains month #\\5))\n         (not (string-contains\
    \ month #\\6))\n         (not (string-contains month #\\7))\n         (not (string-contains\
    \ month #\\8))\n         (not (string-contains month #\\9))\n         (not (string-contains\
    \ month #\\1))\n         (not (string-contains month #\\0))\n         (not (string-contains\
    \ month #\\1))\n         (not (string-contains month #\\2))\n         (not (string-contains\
    \ month #\\3))\n         (not (string-contains month #\\4))\n         (not (string-contains\
    \ month #\\5))\n         (not (string-contains month #\\6))\n         (not (string-contains\
    \ month #\\7))\n         (not (string-contains month #\\8))\n         (not (string-contains\
    \ month #\\9))\n         (not (string-contains month #\\1))\n         (not (string-contains\
    \ month #\\0))\n         (not (string-contains month #\\1))\n         (not (string-contains\
    \ month #\\2))\n", "  (define (valid-date-helper date)\n    (define (valid-date-helper-helper\
    \ date)\n      (define (valid-date-helper-helper-helper date)\n        (define\
    \ (valid-date-helper-helper-helper-helper date)\n          (define (valid-date-helper-helper-helper-helper-helper\
    \ date)\n            (define (valid-date-helper-helper-helper-helper-helper-helper\
    \ date)\n              (define (valid-date-helper-helper-helper-helper-helper-helper-helper\
    \ date)\n                (define (valid-date-helper-helper-helper-helper-helper-helper-helper-helper\
    \ date)\n                  (define (valid-date-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ date)\n                    (define (valid-date-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ date)\n                      (define (valid-date-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ date)\n                        (define (valid-date-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ date)\n                          (define (valid-date-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ date)\n                            (define (valid-date-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ date)\n                              (define (valid-date-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ date", "  (define (valid-date-helper date)\n    (define (valid-date-helper-helper\
    \ date)\n      (define (valid-date-helper-helper-helper date)\n        (define\
    \ (valid-date-helper-helper-helper-helper date)\n          (define (valid-date-helper-helper-helper-helper-helper\
    \ date)\n            (define (valid-date-helper-helper-helper-helper-helper-helper\
    \ date)\n              (define (valid-date-helper-helper-helper-helper-helper-helper-helper\
    \ date)\n                (define (valid-date-helper-helper-helper-helper-helper-helper-helper-helper\
    \ date)\n                  (define (valid-date-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ date)\n                    (define (valid-date-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ date)\n                      (define (valid-date-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ date)\n                        (define (valid-date-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ date)\n                          (define (valid-date-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ date)\n                            (define (valid-date-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ date)\n                              (define (valid-date-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ date", "  (define (valid-month month)\n    (and (<= 1 month) (<= month 12)))\n\
    \  (define (valid-day month day)\n    (cond\n      [(or (= month 1) (= month 3)\
    \ (= month 5) (= month 7) (= month 8) (= month 10) (= month 12))\n       (and\
    \ (<= 1 day) (<= day 31))]\n      [(or (= month 4) (= month 6) (= month 9) (=\
    \ month 11))\n       (and (<= 1 day) (<= day 30))]\n      [(= month 2)\n     \
    \  (and (<= 1 day) (<= day 29))]))\n  (define (valid-year year)\n    (and (<=\
    \ 1 year) (<= year 9999)))\n  (define (valid-date-format date)\n    (regexp-match?\
    \ #rx\"^[0-9]{2}-[0-9]{2}-[0-9]{4}$\" date))\n  (define (split-date date)\n  \
    \  (regexp-match #rx\"^([0-9]{2})-([0-9]{2})-([0-9]{4})$\" date))\n  (define (get-month\
    \ date)\n    (string->number (vector-ref (split-date date) 1)))\n  (define (get-day\
    \ date)\n    (string->number (vector-ref (split-date date) 2)))\n  (define (get-year\
    \ date)\n    (string->number (vector-ref (split-date date) 3)))\n  (and (not (string=?\
    \ date \"\"))\n       (valid-date-format date)\n       (valid-month (get-month\
    \ date))\n       (valid-day (get-month date) (get-day date))\n       (valid-year\
    \ (get-year date))))\n", "  (define (valid-date-helper date)\n    (define (valid-month\
    \ month)\n      (and (integer? month)\n           (and (>= month 1) (<= month\
    \ 12))))\n    (define (valid-day day)\n      (and (integer? day)\n           (and\
    \ (>= day 1) (<= day 31))))\n    (define (valid-year year)\n      (and (integer?\
    \ year)\n           (and (>= year 1) (<= year 9999))))\n    (define (valid-format\
    \ date)\n      (and (regexp-match? #rx\"^[0-9]{2}-[0-9]{2}-[0-9]{4}$\" date)\n\
    \           #t))\n    (define (valid-month-day-pair month day)\n      (cond\n\
    \        [(and (= month 1) (= day 31)) #t]\n        [(and (= month 3) (= day 31))\
    \ #t]\n        [(and (= month 5) (= day 31)) #t]\n        [(and (= month 7) (=\
    \ day 31)) #t]\n        [(and (= month 8) (= day 31)) #t]\n        [(and (= month\
    \ 10) (= day 31)) #t]\n        [(and (= month 12) (= day 31)) #t]\n        [(and\
    \ (= month 4) (= day 30)) #t]\n        [(and (= month 6) (= day 30)) #t]\n   \
    \     [(and (= month 9) (= day 30)) #t]\n        [(and (= month 11) (= day 30))\
    \ #t]\n        [(and (= month 2) (= day 29)) #t]\n        [else #f]))\n    (define\
    \ (valid-month-day-year-pair month day year)\n      (cond\n        [(and (= month\
    \ 2) (= day 29) (= year 2020)) #t]\n        [(and (= month 2) (= day 29) (= year\
    \ 2024)) #t]\n        [(and (= month 2) (= day 29) (= year 2028)) #t]\n      \
    \  [(and (= month 2) (= day 29) (= year 2032)) #t]\n        [(and (= month 2)\
    \ (= day 29) (= year 2036)) #t]\n        [(and (= month 2) (= day 29) (= year",
  "  (define (valid-month month)\n    (and (<= 1 month) (<= month 12)))\n  (define\
    \ (valid-day month day)\n    (cond\n      [(or (= month 1) (= month 3) (= month\
    \ 5) (= month 7) (= month 8) (= month 10) (= month 12))\n       (and (<= 1 day)\
    \ (<= day 31))]\n      [(or (= month 4) (= month 6) (= month 9) (= month 11))\n\
    \       (and (<= 1 day) (<= day 30))]\n      [(= month 2)\n       (and (<= 1 day)\
    \ (<= day 29))]))\n  (define (valid-year year)\n    (and (<= 1 year) (<= year\
    \ 9999)))\n  (define (valid-date-format date)\n    (regexp-match? #rx\"^[0-9]{2}-[0-9]{2}-[0-9]{4}$\"\
    \ date))\n  (define (split-date date)\n    (map string->number (regexp-split #rx\"\
    -\" date)))\n  (define (valid-date-parts date)\n    (let ([parts (split-date date)])\n\
    \      (and (valid-month (list-ref parts 0))\n           (valid-day (list-ref\
    \ parts 0) (list-ref parts 1))\n           (valid-year (list-ref parts 2)))))\n\
    \  (and (not (empty? date))\n       (valid-date-format date)\n       (valid-date-parts\
    \ date)))\n", "  (define (valid-month month)\n    (and (integer? month)\n    \
    \     (and (>= month 1) (<= month 12))))\n  (define (valid-day month day)\n  \
    \  (and (integer? day)\n         (and (>= day 1)\n              (cond\n      \
    \          [(or (= month 1) (= month 3) (= month 5) (= month 7) (= month 8) (=\
    \ month 10) (= month 12)) (<= day 31)]\n                [(or (= month 4) (= month\
    \ 6) (= month 9) (= month 11)) (<= day 30)]\n                [(= month 2) (<=\
    \ day 29)]))))\n  (define (valid-year year)\n    (and (integer? year)\n      \
    \   (>= year 0)))\n  (define (valid-date-format date)\n    (and (string? date)\n\
    \         (regexp-match #rx\"^\\d{2}-\\d{2}-\\d{4}$\" date)))\n  (and (valid-date-format\
    \ date)\n       (let* ([date-parts (string-split date #\"-\")]\n             \
    \ [month (string->number (list-ref date-parts 0))]\n              [day (string->number\
    \ (list-ref date-parts 1))]\n              [year (string->number (list-ref date-parts\
    \ 2))])\n         (and (valid-month month)\n              (valid-day month day)\n\
    \              (valid-year year)))))\n", "  (define (valid-month month)\n    (and\
    \ (not (empty? month))\n         (and (&lt;= 1 (string-&gt;number month))\n  \
    \            (&lt;= (string-&gt;number month) 12))))\n  (define (valid-day day)\n\
    \    (and (not (empty? day))\n         (and (&lt;= 1 (string-&gt;number day))\n\
    \              (&lt;= (string-&gt;number day) 31))))\n  (define (valid-year year)\n\
    \    (and (not (empty? year))\n         (and (&lt;= 1 (string-&gt;number year))\n\
    \              (&lt;= (string-&gt;number year) 9999))))\n  (define (valid-format\
    \ date)\n    (regexp-match? #rx\"^[0-9]{2}-[0-9]{2}-[0-9]{4}$\" date))\n  (and\
    \ (valid-format date)\n       (and (valid-month (substring date 0 2))\n      \
    \      (valid-day (substring date 3 5))\n            (valid-year (substring date\
    \ 6 10)))))\n</code>\n", "  (define (valid-month month)\n    (and (<= 1 month)\
    \ (<= month 12)))\n  (define (valid-day month day)\n    (cond\n      [(= month\
    \ 1) (<= 1 day) (<= day 31)]\n      [(= month 3) (<= 1 day) (<= day 31)]\n   \
    \   [(= month 5) (<= 1 day) (<= day 31)]\n      [(= month 7) (<= 1 day) (<= day\
    \ 31)]\n      [(= month 8) (<= 1 day) (<= day 31)]\n      [(= month 10) (<= 1\
    \ day) (<= day 31)]\n      [(= month 12) (<= 1 day) (<= day 31)]\n      [(= month\
    \ 4) (<= 1 day) (<= day 30)]\n      [(= month 6) (<= 1 day) (<= day 30)]\n   \
    \   [(= month 9) (<= 1 day) (<= day 30)]\n      [(= month 11) (<= 1 day) (<= day\
    \ 30)]\n      [(= month 2) (<= 1 day) (<= day 29)]))\n  (define (valid-year year)\n\
    \    (and (<= 1 year) (<= year 9999)))\n  (define (valid-date-format date)\n \
    \   (and (string-contains date #\\-)))\n  (define (valid-date-format-2 date)\n\
    \    (and (string-contains date #\\/)))\n  (define (date-to-list date)\n    (string-split\
    \ date #\\-))\n  (define (date-to-list-2 date)\n    (string-split date #\\/))\n\
    \  (define (valid-date-list date-list)\n    (and (valid-month (string->number\
    \ (list-ref date-list 0)))\n         (valid-day (string->number (list-ref date-list\
    \ 0))\n                    (string->number (list-ref date-list 1)))\n        \
    \ (valid-year (string->number (list-ref date-list 2)))))\n  (cond\n    [(empty?\
    \ date) false]\n    [(valid-date-format date) (valid-date-list (date-to-list date))]\n\
    \    [(valid-date-format-2 date) (valid-date-list", "  (define (valid-month month)\n\
    \    (and (not (empty? month))\n         (and (<= 1 (string->number month))\n\
    \              (<= (string->number month) 12))))\n  (define (valid-day day)\n\
    \    (and (not (empty? day))\n         (and (<= 1 (string->number day))\n    \
    \          (<= (string->number day) 31))))\n  (define (valid-year year)\n    (and\
    \ (not (empty? year))\n         (and (<= 1 (string->number year))\n          \
    \    (<= (string->number year) 9999))))\n  (define (valid-date-format date)\n\
    \    (and (not (empty? date))\n         (and (regexp-match? #rx\"^[0-9]{2}-[0-9]{2}-[0-9]{4}$\"\
    \ date)\n              (regexp-match? #rx\"^[0-9]{2}/[0-9]{2}/[0-9]{4}$\" date))))\n\
    \  (define (valid-date-format date)\n    (and (not (empty? date))\n         (and\
    \ (regexp-match? #rx\"^[0-9]{2}-[0-9]{2}-[0-9]{4}$\" date)\n              (regexp-match?\
    \ #rx\"^[0-9]{2}/[0-9]{2}/[0-9]{4}$\" date))))\n  (define (valid-date-format date)\n\
    \    (and (not (empty? date))\n         (and (regexp-match? #rx\"^[0-9]{2}-[0-9]{2}-[0-9]{4}$\"\
    \ date)\n              (regexp-match? #rx\"^[0-9]{2}/[0-9]{2}/[0-9]{4}$\" date))))\n\
    \  (define (valid-date-format date)\n    (and (not (empty? date))\n         (and\
    \ (regexp-match? #rx\"^[0-9]{2}", "  (define (valid-date-helper date)\n    (define\
    \ (valid-month month)\n      (and (not (empty? month))\n           (and (not (empty?\
    \ (cdr month)))\n                (and (not (empty? (cddr month)))\n          \
    \           (and (not (empty? (cdddr month)))\n                          (and\
    \ (not (empty? (cddddr month)))))))))\n    (define (valid-day day)\n      (and\
    \ (not (empty? day))\n           (and (not (empty? (cdr day)))\n             \
    \   (and (not (empty? (cddr day)))\n                     (and (not (empty? (cdddr\
    \ day)))\n                          (and (not (empty? (cddddr day)))))))))\n \
    \   (define (valid-year year)\n      (and (not (empty? year))\n           (and\
    \ (not (empty? (cdr year)))\n                (and (not (empty? (cddr year)))\n\
    \                     (and (not (empty? (cdddr year)))\n                     \
    \     (and (not (empty? (cddddr year)))))))))\n    (define (valid-month-number\
    \ month)\n      (and (not (empty? month))\n           (and (not (empty? (cdr month)))\n\
    \                (and (not (empty? (cddr month)))\n                     (and (not\
    \ (empty? (cdddr month)))\n                          (and (not (empty? (cddddr\
    \ month)))))))))\n    (define (valid-day-number day)\n      (and (not (empty?\
    \ day))\n           (and (not (empty? (cdr day)))\n                (and (not (empty?\
    \ (cddr day)))\n                     (and (not (empty? (cdddr day)))\n       \
    \                   (and (not (empty? (cddddr day)))))))))\n    (define (valid-year-number\
    \ year)\n      (and (not (empty? year))\n           (and (not (empty? (cdr year)))\n\
    \                (and (not (empty? (cddr year)))\n                     (and (not\
    \ (empty? (cdddr year)))\n                          (and (not (", "  (define (valid-month\
    \ month)\n    (and (not (empty? month))\n         (and (<= 1 (string->number month))\n\
    \              (<= (string->number month) 12))))\n  (define (valid-day day)\n\
    \    (and (not (empty? day))\n         (and (<= 1 (string->number day))\n    \
    \          (<= (string->number day) 31))))\n  (define (valid-year year)\n    (and\
    \ (not (empty? year))\n         (and (<= 1 (string->number year))\n          \
    \    (<= (string->number year) 9999))))\n  (define (valid-date-format date)\n\
    \    (and (regexp-match? #rx\"^[0-9]{2}-[0-9]{2}-[0-9]{4}$\" date)\n         (and\
    \ (valid-month (substring date 0 2))\n              (valid-day (substring date\
    \ 3 5))\n              (valid-year (substring date 6 10)))))\n  (valid-date-format\
    \ date))\n", "  (define (valid-month month)\n    (and (integer? month)\n     \
    \    (and (>= month 1) (<= month 12))))\n  (define (valid-day month day)\n   \
    \ (and (integer? day)\n         (and (>= day 1)\n              (cond\n       \
    \         [(or (= month 1) (= month 3) (= month 5) (= month 7) (= month 8) (=\
    \ month 10) (= month 12)) (<= day 31)]\n                [(or (= month 4) (= month\
    \ 6) (= month 9) (= month 11)) (<= day 30)]\n                [(= month 2) (<=\
    \ day 29)]))))\n  (define (valid-year year)\n    (and (integer? year)\n      \
    \   (and (>= year 0) (<= year 9999))))\n  (define (valid-date-format date)\n \
    \   (regexp-match? #rx\"^[0-9]{2}-[0-9]{2}-[0-9]{4}$\" date))\n  (define (date-to-list\
    \ date)\n    (map string->number (string-split date #\\-)))\n  (define (valid-date?\
    \ date)\n    (let* ([date-list (date-to-list date)]\n           [month (list-ref\
    \ date-list 0)]\n           [day (list-ref date-list 1)]\n           [year (list-ref\
    \ date-list 2)])\n      (and (valid-date-format date)\n           (valid-month\
    \ month)\n           (valid-day month day)\n           (valid-year year))))\n\
    \  (valid-date? date))\n", "  (define (valid-month month)\n    (and (not (empty?\
    \ month))\n         (not (negative? (string->number month)))\n         (not (>\
    \ (string->number month) 12))))\n  (define (valid-day day)\n    (and (not (empty?\
    \ day))\n         (not (negative? (string->number day)))\n         (cond\n   \
    \        [(or (= (string->number month) 1)\n                (= (string->number\
    \ month) 3)\n                (= (string->number month) 5)\n                (=\
    \ (string->number month) 7)\n                (= (string->number month) 8)\n  \
    \              (= (string->number month) 10)\n                (= (string->number\
    \ month) 12))\n            (not (> (string->number day) 31))]\n           [(or\
    \ (= (string->number month) 4)\n                (= (string->number month) 6)\n\
    \                (= (string->number month) 9)\n                (= (string->number\
    \ month) 11))\n            (not (> (string->number day) 30))]\n           [(=\
    \ (string->number month) 2)\n            (not (> (string->number day) 29))])))\n\
    \  (define (valid-year year)\n    (and (not (empty? year))\n         (not (negative?\
    \ (string->number year)))))\n  (define (valid-format date)\n    (and (regexp-match?\
    \ #rx\"^[0-9]{2}-[0-9]{2}-[0-9]{4}$\" date)\n         (not (regexp-match? #rx\"\
    ^[0-9]{2}/[0-9]{2}/[0-9]{4}$\" date))))\n  (define (valid-date? date)\n    (and\
    \ (valid-format date)\n         (valid-month (substring date 0 2))\n         (valid-day\
    \ (substring date 3 5))\n         (valid-year (substring date 6 10))))\n  (valid-date?\
    \ date))\n", "  (define (valid-month month)\n    (and (not (empty? month))\n \
    \        (and (&lt;= 1 (string-&gt;number month))\n              (&lt;= (string-&gt;number\
    \ month) 12))))\n  (define (valid-day day)\n    (and (not (empty? day))\n    \
    \     (and (&lt;= 1 (string-&gt;number day))\n              (&lt;= (string-&gt;number\
    \ day) 31))))\n  (define (valid-year year)\n    (and (not (empty? year))\n   \
    \      (and (&lt;= 1 (string-&gt;number year))\n              (&lt;= (string-&gt;number\
    \ year) 9999))))\n  (define (valid-date-string date-string)\n    (and (not (empty?\
    \ date-string))\n         (and (equal? (string-length date-string) 10)\n     \
    \         (equal? (substring date-string 2 3) \"-\")\n              (equal? (substring\
    \ date-string 5 6) \"-\"))))\n  (define (valid-date-format date-format)\n    (and\
    \ (not (empty? date-format))\n         (and (equal? (string-length date-format)\
    \ 10)\n              (equal? (substring date-format 2 3) \"-\")\n            \
    \  (equal? (substring date-format 5 6) \"-\"))))\n  (define (valid-date-parts\
    \ date-parts)\n    (and (not (empty? date-parts))\n         (and (equal? (length\
    \ date-parts) 3)\n              (valid-month (list-ref date-parts 0))\n      \
    \        (valid-day (list-ref date-parts 1))\n              (valid-year (list-ref\
    \ date-parts 2)))))\n  (and (valid-date-string date)\n       (valid-date-format\
    \ date)\n       (valid-date-parts (string-split date \"-\"))))\n</code>\n", " \
    \ (define (valid-day day)\n    (and (not (empty? day))\n         (and (not (empty?\
    \ (string-&gt;number day)))\n              (and (&lt;= 1 (string-&gt;number day))\n\
    \                   (&lt;= (string-&gt;number day) 31)))))\n  (define (valid-month\
    \ month)\n    (and (not (empty? month))\n         (and (not (empty? (string-&gt;number\
    \ month)))\n              (and (&lt;= 1 (string-&gt;number month))\n         \
    \          (&lt;= (string-&gt;number month) 12)))))\n  (define (valid-year year)\n\
    \    (and (not (empty? year))\n         (and (not (empty? (string-&gt;number year)))\n\
    \              (and (&lt;= 1 (string-&gt;number year))\n                   (&lt;=\
    \ (string-&gt;number year) 9999)))))\n  (define (valid-format date)\n    (and\
    \ (not (empty? date))\n         (and (regexp-match #rx\"^[0-9]{2}-[0-9]{2}-[0-9]{4}$\"\
    \ date)\n              (and (not (empty? (regexp-match #rx\"^[0-9]{2}-[0-9]{2}-[0-9]{4}$\"\
    \ date)))\n                   (not (empty? (regexp-match #rx\"^[0-9]{2}-[0-9]{2}-[0-9]{4}$\"\
    \ date)))))))\n  (define (valid-date-helper date)\n    (and (valid-format date)\n\
    \         (and (valid-day (substring date 3 5))\n              (and (valid-month\
    \ (substring date 0 2))\n                   (valid-year (substring date 6 10))))))\n\
    \  (valid-date-helper date))\n</code>\nI'm not sure if this is the best way to\
    \ do it, but it works.\n", "  (define (valid-month month)\n    (and (<= 1 month)\
    \ (<= month 12)))\n  (define (valid-day month day)\n    (cond\n      [(or (= month\
    \ 1) (= month 3) (= month 5) (= month 7) (= month 8) (= month 10) (= month 12))\n\
    \       (and (<= 1 day) (<= day 31))]\n      [(or (= month 4) (= month 6) (= month\
    \ 9) (= month 11))\n       (and (<= 1 day) (<= day 30))]\n      [(= month 2)\n\
    \       (and (<= 1 day) (<= day 29))]))\n  (define (valid-year year)\n    (and\
    \ (<= 1 year) (<= year 9999)))\n  (define (valid-date-format date)\n    (regexp-match?\
    \ #rx\"^[0-9]{2}-[0-9]{2}-[0-9]{4}$\" date))\n  (define (split-date date)\n  \
    \  (regexp-match #rx\"^([0-9]{2})-([0-9]{2})-([0-9]{4})$\" date))\n  (define (get-month\
    \ date)\n    (string->number (cadr (split-date date))))\n  (define (get-day date)\n\
    \    (string->number (caddr (split-date date))))\n  (define (get-year date)\n\
    \    (string->number (cadddr (split-date date))))\n  (and (valid-date-format date)\n\
    \       (valid-month (get-month date))\n       (valid-day (get-month date) (get-day\
    \ date))\n       (valid-year (get-year date))))\n", "  (define (valid-month month)\n\
    \    (and (>= month 1) (<= month 12)))\n  (define (valid-day month day)\n    (cond\n\
    \      [(and (= month 1) (= month 3) (= month 5) (= month 7) (= month 8) (= month\
    \ 10) (= month 12))\n       (and (>= day 1) (<= day 31))]\n      [(and (= month\
    \ 4) (= month 6) (= month 9) (= month 11))\n       (and (>= day 1) (<= day 30))]\n\
    \      [(= month 2)\n       (and (>= day 1) (<= day 29))]))\n  (define (valid-year\
    \ year)\n    (and (>= year 1) (<= year 9999)))\n  (define (valid-format date)\n\
    \    (and (regexp-match? #rx\"^[0-9]{2}-[0-9]{2}-[0-9]{4}$\" date)\n         (regexp-match?\
    \ #rx\"^[0-9]{2}-[0-9]{2}-[0-9]{4}$\" date)))\n  (define (valid-date-parts date)\n\
    \    (define (split-date date)\n      (string-split date #\\-))\n    (define (date-parts\
    \ date)\n      (map string->number (split-date date)))\n    (define (month-day-year\
    \ date)\n      (apply values (date-parts date)))\n    (define (month date)\n \
    \     (first (month-day-year date)))\n    (define (day date)\n      (second (month-day-year\
    \ date)))\n    (define (year date)\n      (third (month-day-year date)))\n   \
    \ (and (valid-month (month date))\n         (valid-day (month date) (day date))\n\
    \         (valid-year (year date))))\n  (and (valid-format date)\n       (valid-date-parts\
    \ date)))\n", "  (define (valid-month month)\n    (and (<= 1 month) (<= month\
    \ 12)))\n  (define (valid-day month day)\n    (cond\n      [(or (= month 1) (=\
    \ month 3) (= month 5) (= month 7) (= month 8) (= month 10) (= month 12))\n  \
    \     (and (<= 1 day) (<= day 31))]\n      [(or (= month 4) (= month 6) (= month\
    \ 9) (= month 11))\n       (and (<= 1 day) (<= day 30))]\n      [(= month 2)\n\
    \       (and (<= 1 day) (<= day 29))]))\n  (define (valid-year year)\n    (and\
    \ (<= 1 year) (<= year 9999)))\n  (define (valid-date-format date)\n    (regexp-match?\
    \ #rx\"^[0-9]{2}-[0-9]{2}-[0-9]{4}$\" date))\n  (and (not (empty? date))\n   \
    \    (valid-date-format date)\n       (let* ([date-list (string-split date #\\\
    -)]\n              [month (string->number (list-ref date-list 0))]\n         \
    \     [day (string->number (list-ref date-list 1))]\n              [year (string->number\
    \ (list-ref date-list 2))])\n         (and (valid-month month)\n             \
    \ (valid-day month day)\n              (valid-year year)))))\n", "  (define (valid-month\
    \ month)\n    (and (<= 1 month) (<= month 12)))\n  (define (valid-day month day)\n\
    \    (cond\n      ((or (= month 1) (= month 3) (= month 5) (= month 7) (= month\
    \ 8) (= month 10) (= month 12))\n       (and (<= 1 day) (<= day 31)))\n      ((or\
    \ (= month 4) (= month 6) (= month 9) (= month 11))\n       (and (<= 1 day) (<=\
    \ day 30)))\n      ((= month 2)\n       (and (<= 1 day) (<= day 29)))))\n  (define\
    \ (valid-year year)\n    (and (<= 1900 year) (<= year 2100)))\n  (define (valid-format\
    \ date)\n    (regexp-match? #rx\"^[0-9]{2}-[0-9]{2}-[0-9]{4}$\" date))\n  (and\
    \ (not (string=? date \"\"))\n       (valid-format date)\n       (let* ([date-list\
    \ (string-split date #\\-)]\n              [month (string->number (list-ref date-list\
    \ 0))]\n              [day (string->number (list-ref date-list 1))]\n        \
    \      [year (string->number (list-ref date-list 2))])\n         (and (valid-month\
    \ month)\n              (valid-day month day)\n              (valid-year year)))))\n",
  "  (and (not (empty? date))\n       (valid-date-format date)\n       (valid-date-numbers\
    \ date)))\n", "  (define (valid-month month)\n    (and (integer? month)\n    \
    \     (and (>= month 1) (<= month 12))))\n  (define (valid-day month day)\n  \
    \  (and (integer? day)\n         (and (>= day 1)\n              (cond\n      \
    \          [(or (= month 1) (= month 3) (= month 5) (= month 7) (= month 8) (=\
    \ month 10) (= month 12)) (<= day 31)]\n                [(or (= month 4) (= month\
    \ 6) (= month 9) (= month 11)) (<= day 30)]\n                [(= month 2) (<=\
    \ day 29)]))))\n  (define (valid-year year)\n    (and (integer? year)\n      \
    \   (>= year 0)))\n  (define (valid-date-string date-string)\n    (and (string?\
    \ date-string)\n         (string-match #rx\"^[0-9]{2}-[0-9]{2}-[0-9]{4}$\" date-string)))\n\
    \  (define (parse-date date-string)\n    (let ([date-list (string-split date-string\
    \ #\\-)]\n          [month (string->number (list-ref date-list 0))]\n        \
    \  [day (string->number (list-ref date-list 1))]\n          [year (string->number\
    \ (list-ref date-list 2))])\n      (list month day year)))\n  (define (valid-date-list\
    \ date-list)\n    (and (valid-month (list-ref date-list 0))\n         (valid-day\
    \ (list-ref date-list 0) (list-ref date-list 1))\n         (valid-year (list-ref\
    \ date-list 2))))\n  (and (valid-date-string date)\n       (valid-date-list (parse-date\
    \ date))))\n", "  (define (valid-month month)\n    (and (>= month 1) (<= month\
    \ 12)))\n  (define (valid-day month day)\n    (cond\n      [(and (= month 1) (=\
    \ month 3) (= month 5) (= month 7) (= month 8) (= month 10) (= month 12))\n  \
    \     (and (>= day 1) (<= day 31))]\n      [(and (= month 4) (= month 6) (= month\
    \ 9) (= month 11))\n       (and (>= day 1) (<= day 30))]\n      [(= month 2)\n\
    \       (and (>= day 1) (<= day 29))]))\n  (define (valid-year year)\n    (and\
    \ (>= year 1) (<= year 9999)))\n  (define (valid-date-format date)\n    (regexp-match?\
    \ #rx\"^[0-9]{2}-[0-9]{2}-[0-9]{4}$\" date))\n  (define (split-date date)\n  \
    \  (regexp-match #rx\"^([0-9]{2})-([0-9]{2})-([0-9]{4})$\" date))\n  (define (valid-date-parts\
    \ date)\n    (define (valid-date-part-1 date)\n      (valid-month (string->number\
    \ (cadr (split-date date)))))\n  (define (valid-date-part-2 date)\n    (valid-day\
    \ (string->number (cadr (split-date date)))\n               (string->number (caddr\
    \ (split-date date)))))\n  (define (valid-date-part-3 date)\n    (valid-year (string->number\
    \ (cadddr (split-date date)))))\n  (and (valid-date-part-1 date)\n       (valid-date-part-2\
    \ date)\n       (valid-date-part-3 date)))\n  (and (valid-date-format date)\n\
    \       (valid-date-parts date)))\n", "  (define (valid-month month)\n    (and\
    \ (not (empty? month))\n         (and (char-numeric? (string-ref month 0))\n \
    \             (char-numeric? (string-ref month 1))\n              (and (not (empty?\
    \ (string-drop month 2)))\n                   (string=? (string-drop month 2)\
    \ \"-\")\n                   (and (not (empty? (string-drop month 3)))\n     \
    \                   (char-numeric? (string-ref (string-drop month 3) 0))\n   \
    \                     (char-numeric? (string-ref (string-drop month 3) 1))\n \
    \                       (and (not (empty? (string-drop month 5)))\n          \
    \                   (string=? (string-drop month 5) \"-\")\n                 \
    \            (and (not (empty? (string-drop month 6)))\n                     \
    \             (char-numeric? (string-ref (string-drop month 6) 0))\n         \
    \                         (char-numeric? (string-ref (string-drop month 6) 1))\n\
    \                                  (char-numeric? (string-ref (string-drop month\
    \ 6) 2))\n                                  (char-numeric? (string-ref (string-drop\
    \ month 6) 3))))))))))\n  (define (valid-day day)\n    (and (not (empty? day))\n\
    \         (and (char-numeric? (string-ref day 0))\n              (char-numeric?\
    \ (string-ref day 1))\n              (and (not (empty? (string-drop day 2)))\n\
    \                   (string=? (string-drop day 2) \"-\")\n                   (and\
    \ (not (empty? (string-drop day 3)))\n                        (char-numeric? (string-ref\
    \ (string-drop day 3) 0))\n                        (char-numeric? (string-ref\
    \ (string-drop day 3) 1))\n                        (and (not (empty? (string-drop\
    \ day 5)))\n                             (string=? (string-drop day 5) \"-\")\n\
    \                             (and (not (empty? (string-drop day 6)))\n      \
    \                            (char-numeric? (string-ref (string-drop day 6) 0))\n\
    \                                  (char-numeric? (string-ref (string-drop day",
  "  (define (valid-month month)\n    (and (not (empty? month))\n         (not (string=?\
    \ month \"0\"))\n         (not (string=? month \"00\"))\n         (not (string=?\
    \ month \"000\"))\n         (not (string=? month \"0000\"))\n         (not (string=?\
    \ month \"00000\"))\n         (not (string=? month \"000000\"))\n         (not\
    \ (string=? month \"0000000\"))\n         (not (string=? month \"00000000\"))\n\
    \         (not (string=? month \"000000000\"))\n         (not (string=? month\
    \ \"0000000000\"))\n         (not (string=? month \"00000000000\"))\n        \
    \ (not (string=? month \"000000000000\"))\n         (not (string=? month \"0000000000000\"\
    ))\n         (not (string=? month \"00000000000000\"))\n         (not (string=?\
    \ month \"000000000000000\"))\n         (not (string=? month \"0000000000000000\"\
    ))\n         (not (string=? month \"00000000000000000\"))\n         (not (string=?\
    \ month \"000000000000000000\"))\n         (not (string=? month \"0000000000000000000\"\
    ))\n         (not (string=? month \"00000000000000000000\"))\n         (not (string=?\
    \ month \"000000000000000000000\"))\n         (not (string=? month \"0000000000000000000000\"\
    ))\n         (not (string=? month \"00000000000000000000000\"))\n         (not\
    \ (string=? month \"000000000000000000000000\"))\n         (not (string=? month\
    \ \"0000000000000000000000000\"))\n         (not (string=? month \"00000000000000000000000000\"\
    ))\n         (not (string=? month \"000000000000000000000000000\"))\n        \
    \ (not (string=? month \"0000000000000000000000000000\"))\n         (not (string=?\
    \ month \"00000000000000000000000000000\"))\n         (not (string=? month \"\
    000000000000000000000000000000\"))\n         (not (string=? month \"0000000000000000000000000000000\"\
    ))\n         (not (string=? month \"00000000000000000000000000000000\"))\n   \
    \      (not (string=? month \"000000000000000000000000000000000\"))\n        \
    \ (not (string=? month \"0000000000000000000000000000000000\"))\n         (not\
    \ (string=? month \"00000000000000000000000000000000000\"))\n         (not (string=?\
    \ month \"000000000000000000000000000000000000\"))\n         (not (string=? month\
    \ \"0000000000000000000000000000000000000\"))\n         (not (", "  (define (valid-month\
    \ month)\n    (and (>= month 1) (<= month 12)))\n  (define (valid-day month day)\n\
    \    (cond\n      [(and (= month 1) (= month 3) (= month 5) (= month 7) (= month\
    \ 8) (= month 10) (= month 12))\n       (and (>= day 1) (<= day 31))]\n      [(and\
    \ (= month 4) (= month 6) (= month 9) (= month 11))\n       (and (>= day 1) (<=\
    \ day 30))]\n      [(= month 2)\n       (and (>= day 1) (<= day 29))]))\n  (define\
    \ (valid-year year)\n    (and (>= year 1) (<= year 9999)))\n  (define (valid-date-format\
    \ date)\n    (regexp-match? #rx\"^[0-9]{2}-[0-9]{2}-[0-9]{4}$\" date))\n  (define\
    \ (valid-date-parts date)\n    (let ([month (string->number (regexp-match #rx\"\
    ^[0-9]{2}-\" date))]\n          [day (string->number (regexp-match #rx\"-[0-9]{2}-\"\
    \ date))]\n          [year (string->number (regexp-match #rx\"-[0-9]{4}$\" date))])\n\
    \      (and (valid-month month)\n           (valid-day month day)\n          \
    \ (valid-year year))))\n  (and (not (string=? date \"\"))\n       (valid-date-format\
    \ date)\n       (valid-date-parts date)))\n", "  (define (valid-date-helper date)\n\
    \    (define (valid-month month)\n      (and (not (empty? month))\n          \
    \ (and (<= 1 (string->number month))\n                (<= (string->number month)\
    \ 12))))\n    (define (valid-day day)\n      (and (not (empty? day))\n       \
    \    (and (<= 1 (string->number day))\n                (<= (string->number day)\
    \ 31))))\n    (define (valid-year year)\n      (and (not (empty? year))\n    \
    \       (and (<= 1 (string->number year))\n                (<= (string->number\
    \ year) 9999))))\n    (define (valid-date-format date)\n      (and (not (empty?\
    \ date))\n           (and (equal? (substring date 2 3) \"-\")\n              \
    \  (equal? (substring date 5 6) \"-\"))))\n    (and (valid-date-format date)\n\
    \         (and (valid-month (substring date 0 2))\n              (and (valid-day\
    \ (substring date 3 5))\n                   (valid-year (substring date 6 (string-length\
    \ date)))))))\n  (valid-date-helper date))\n", "  (define (valid-date-helper date)\n\
    \    (define (valid-date-helper-helper date)\n      (define (valid-date-helper-helper-helper\
    \ date)\n        (define (valid-date-helper-helper-helper-helper date)\n     \
    \     (define (valid-date-helper-helper-helper-helper-helper date)\n         \
    \   (define (valid-date-helper-helper-helper-helper-helper-helper date)\n    \
    \          (define (valid-date-helper-helper-helper-helper-helper-helper-helper\
    \ date)\n                (define (valid-date-helper-helper-helper-helper-helper-helper-helper-helper\
    \ date)\n                  (define (valid-date-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ date)\n                    (define (valid-date-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ date)\n                      (define (valid-date-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ date)\n                        (define (valid-date-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ date)\n                          (define (valid-date-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ date)\n                            (define (valid-date-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ date)\n                              (define (valid-date-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ date", "  (define (valid-date-helper date)\n    (define (valid-month month)\n\
    \      (and (not (empty? month))\n           (not (negative? (string->number month)))\n\
    \           (and (not (> (string->number month) 12))\n                (not (<\
    \ (string->number month) 1)))))\n    (define (valid-day day)\n      (and (not\
    \ (empty? day))\n           (not (negative? (string->number day)))\n         \
    \  (and (not (> (string->number day) 31))\n                (not (< (string->number\
    \ day) 1)))))\n    (define (valid-year year)\n      (and (not (empty? year))\n\
    \           (not (negative? (string->number year)))\n           (and (not (> (string->number\
    \ year) 9999))\n                (not (< (string->number year) 1)))))\n    (define\
    \ (valid-date-format date)\n      (and (not (empty? date))\n           (and (not\
    \ (empty? (regexp-match #rx\"^[0-9]{2}-[0-9]{2}-[0-9]{4}$\" date)))\n        \
    \        (not (empty? (regexp-match #rx\"^[0-9]{2}/[0-9]{2}/[0-9]{4}$\" date))))))\n\
    \    (define (valid-day-month-format date)\n      (and (not (empty? date))\n \
    \          (and (not (empty? (regexp-match #rx\"^[0-9]{2}-[0-9]{2}-[0-9]{4}$\"\
    \ date)))\n                (not (empty? (regexp-match #rx\"^[0-9]{2}/[0-9]{2}/[0-9]{4}$\"\
    \ date))))))\n    (define (valid-day-month-format date)\n      (and (not (empty?\
    \ date))\n           (and (not (empty? (regexp-match #rx\"^[0-9]{2}-[0-9]{2}-[0-9]{4}$\"\
    \ date", "  (define (valid-date-helper date)\n    (define (valid-month month)\n\
    \      (and (not (empty? month))\n           (and (<= 1 (string->number month))\n\
    \                (<= (string->number month) 12))))\n    (define (valid-day day)\n\
    \      (and (not (empty? day))\n           (and (<= 1 (string->number day))\n\
    \                (<= (string->number day) 31))))\n    (define (valid-year year)\n\
    \      (and (not (empty? year))\n           (and (<= 1 (string->number year))\n\
    \                (<= (string->number year) 9999))))\n    (define (valid-date-format\
    \ date)\n      (and (not (empty? date))\n           (and (equal? (string-length\
    \ date) 10)\n                (and (equal? (string-ref date 2) #\\-))\n       \
    \         (and (equal? (string-ref date 5) #\\-))))))\n  (valid-date-format date))\n",
  "  (define (valid-month month)\n    (and (&gt;= month 1) (&lt;= month 12)))\n  (define\
    \ (valid-day month day)\n    (cond\n      [(and (= month 1) (= month 3) (= month\
    \ 5) (= month 7) (= month 8) (= month 10) (= month 12))\n       (and (&gt;= day\
    \ 1) (&lt;= day 31))]\n      [(and (= month 4) (= month 6) (= month 9) (= month\
    \ 11))\n       (and (&gt;= day 1) (&lt;= day 30))]\n      [(= month 2)\n     \
    \  (and (&gt;= day 1) (&lt;= day 29))]))\n  (define (valid-year year)\n    (and\
    \ (&gt;= year 1) (&lt;= year 9999)))\n  (define (valid-format date)\n    (regexp-match?\
    \ #rx\"^[0-9]{2}-[0-9]{2}-[0-9]{4}$\" date))\n  (define (valid-date-parts date)\n\
    \    (let* ([date-parts (string-split date #\\-)])\n      (and (valid-month (string-&gt;number\
    \ (list-ref date-parts 0)))\n           (valid-day (string-&gt;number (list-ref\
    \ date-parts 0))\n                      (string-&gt;number (list-ref date-parts\
    \ 1)))\n           (valid-year (string-&gt;number (list-ref date-parts 2))))))\n\
    \  (and (not (string=? date \"\"))\n       (valid-format date)\n       (valid-date-parts\
    \ date)))\n</code>\n", "  (define (valid-month month)\n    (and (>= month 1) (<=\
    \ month 12)))\n  (define (valid-day month day)\n    (and (>= day 1)\n        \
    \ (<= day (cond\n                  [(or (= month 1) (= month 3) (= month 5) (=\
    \ month 7) (= month 8) (= month 10) (= month 12)) 31]\n                  [(or\
    \ (= month 4) (= month 6) (= month 9) (= month 11)) 30]\n                  [(=\
    \ month 2) 29]))))\n  (define (valid-year year)\n    (and (>= year 1) (<= year\
    \ 9999)))\n  (define (valid-date-format date)\n    (regexp-match? #rx\"^[0-9]{2}-[0-9]{2}-[0-9]{4}$\"\
    \ date))\n  (define (valid-date-parts date)\n    (define (split-date date)\n \
    \     (string-split date #\\-))\n    (define (to-int str)\n      (string->number\
    \ str))\n    (define (to-ints date)\n      (map to-int (split-date date)))\n \
    \   (define (to-ints-and-validate date)\n      (define (validate-date-parts date-parts)\n\
    \        (and (valid-month (car date-parts))\n             (valid-day (car date-parts)\
    \ (cadr date-parts))\n             (valid-year (caddr date-parts))))\n      (validate-date-parts\
    \ (to-ints date)))\n    (to-ints-and-validate date))\n  (and (valid-date-format\
    \ date)\n       (valid-date-parts date)))\n", "  (define (valid-date-regexp date)\n\
    \    (regexp-match #rx\"^(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])-[0-9]{4}$\"\
    \ date))\n  (define (valid-date-days date)\n    (define (valid-date-days-regexp\
    \ date)\n      (regexp-match #rx\"^(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])-[0-9]{4}$\"\
    \ date))\n    (define (valid-date-days-month date)\n      (define (valid-date-days-month-regexp\
    \ date)\n        (regexp-match #rx\"^(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])-[0-9]{4}$\"\
    \ date))\n      (define (valid-date-days-month-month date)\n        (define (valid-date-days-month-month-regexp\
    \ date)\n          (regexp-match #rx\"^(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])-[0-9]{4}$\"\
    \ date))\n        (define (valid-date-days-month-month-month date)\n         \
    \ (define (valid-date-days-month-month-month-regexp date)\n            (regexp-match\
    \ #rx\"^(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])-[0-9]{4}$\" date))\n      \
    \    (define (valid-date-days-month-month-month-month date)\n            (define\
    \ (valid-date-days-month-month-month-month-regexp date)\n              (regexp-match",
  "  (define (valid-month month)\n    (and (integer? month)\n         (and (>= month\
    \ 1) (<= month 12))))\n  (define (valid-day month day)\n    (and (integer? day)\n\
    \         (and (>= day 1)\n              (cond\n                [(or (= month\
    \ 1) (= month 3) (= month 5) (= month 7) (= month 8) (= month 10) (= month 12))\
    \ (<= day 31)]\n                [(or (= month 4) (= month 6) (= month 9) (= month\
    \ 11)) (<= day 30)]\n                [(= month 2) (<= day 29)]))))\n  (define\
    \ (valid-year year)\n    (and (integer? year)\n         (and (>= year 1) (<= year\
    \ 9999))))\n  (define (valid-date-format date)\n    (and (regexp-match? #rx\"\
    ^[0-9]{2}-[0-9]{2}-[0-9]{4}$\" date)\n         (let ([date-split (string-split\
    \ date #\\-)])\n           (and (valid-month (string->number (list-ref date-split\
    \ 0)))\n                (valid-day (string->number (list-ref date-split 0)) (string->number\
    \ (list-ref date-split 1)))\n                (valid-year (string->number (list-ref\
    \ date-split 2)))))))\n  (and (not (string=? date \"\"))\n       (valid-date-format\
    \ date)))\n", "  (define (valid-month month)\n    (and (not (empty? month))\n\
    \         (not (string=? month \"0\"))\n         (not (string=? month \"00\"))\n\
    \         (not (string=? month \"000\"))\n         (not (string=? month \"0000\"\
    ))\n         (not (string=? month \"00000\"))\n         (not (string=? month \"\
    000000\"))\n         (not (string=? month \"0000000\"))\n         (not (string=?\
    \ month \"00000000\"))\n         (not (string=? month \"000000000\"))\n      \
    \   (not (string=? month \"0000000000\"))\n         (not (string=? month \"00000000000\"\
    ))\n         (not (string=? month \"000000000000\"))\n         (not (string=?\
    \ month \"0000000000000\"))\n         (not (string=? month \"00000000000000\"\
    ))\n         (not (string=? month \"000000000000000\"))\n         (not (string=?\
    \ month \"0000000000000000\"))\n         (not (string=? month \"00000000000000000\"\
    ))\n         (not (string=? month \"000000000000000000\"))\n         (not (string=?\
    \ month \"0000000000000000000\"))\n         (not (string=? month \"00000000000000000000\"\
    ))\n         (not (string=? month \"000000000000000000000\"))\n         (not (string=?\
    \ month \"0000000000000000000000\"))\n         (not (string=? month \"00000000000000000000000\"\
    ))\n         (not (string=? month \"000000000000000000000000\"))\n         (not\
    \ (string=? month \"0000000000000000000000000\"))\n         (not (string=? month\
    \ \"00000000000000000000000000\"))\n         (not (string=? month \"000000000000000000000000000\"\
    ))\n         (not (string=? month \"0000000000000000000000000000\"))\n       \
    \  (not (string=? month \"00000000000000000000000000000\"))\n         (not (string=?\
    \ month \"000000000000000000000000000000\"))\n         (not (string=? month \"\
    0000000000000000000000000000000\"))\n         (not (string=? month \"00000000000000000000000000000000\"\
    ))\n         (not (string=? month \"000000000000000000000000000000000\"))\n  \
    \       (not (string=? month \"0000000000000000000000000000000000\"))\n      \
    \   (not (string=? month \"00000000000000000000000000000000000\"))\n         (not\
    \ (string=? month \"000000000000000000000000000000000000\"))\n         (not (string=?\
    \ month \"0000000000000000000000000000000000000\"))\n         (not (", "  (define\
    \ (valid-month month)\n    (and (not (empty? month))\n         (not (negative?\
    \ (string->number month)))\n         (not (> (string->number month) 12))))\n \
    \ (define (valid-day day)\n    (and (not (empty? day))\n         (not (negative?\
    \ (string->number day)))\n         (not (> (string->number day) 31))))\n  (define\
    \ (valid-year year)\n    (and (not (empty? year))\n         (not (negative? (string->number\
    \ year)))\n         (not (> (string->number year) 9999))))\n  (define (valid-date-format\
    \ date)\n    (and (regexp-match? #rx\"^[0-9]{2}-[0-9]{2}-[0-9]{4}$\" date)\n \
    \        (regexp-match? #rx\"^[0-9]{2}/[0-9]{2}/[0-9]{4}$\" date)))\n  (define\
    \ (valid-date-parts date)\n    (let* ([date-parts (string-split date #\\-)]\n\
    \           [month (first date-parts)]\n           [day (second date-parts)]\n\
    \           [year (third date-parts)])\n      (and (valid-month month)\n     \
    \      (valid-day day)\n           (valid-year year))))\n  (or (valid-date-format\
    \ date)\n      (valid-date-parts date)))\n", "  (define (valid-month month)\n\
    \    (and (not (negative? month))\n         (not (> month 12))))\n  (define (valid-day\
    \ month day)\n    (and (not (negative? day))\n         (cond\n           [(or\
    \ (= month 1) (= month 3) (= month 5) (= month 7) (= month 8) (= month 10) (=\
    \ month 12))\n            (not (> day 31))]\n           [(or (= month 4) (= month\
    \ 6) (= month 9) (= month 11))\n            (not (> day 30))]\n           [(=\
    \ month 2)\n            (not (> day 29))])))\n  (define (valid-year year)\n  \
    \  (and (not (negative? year))\n         (not (> year 9999))))\n  (define (valid-date-format\
    \ date)\n    (and (regexp-match? #rx\"^[0-9]{2}-[0-9]{2}-[0-9]{4}$\" date)\n \
    \        (not (regexp-match? #rx\"^[0-9]{2}/[0-9]{2}/[0-9]{4}$\" date))))\n  (define\
    \ (valid-date-parts date)\n    (let* ([date-parts (string-split date #\\-)]\n\
    \           [month (string->number (list-ref date-parts 0))]\n           [day\
    \ (string->number (list-ref date-parts 1))]\n           [year (string->number\
    \ (list-ref date-parts 2))])\n      (and (valid-month month)\n           (valid-day\
    \ month day)\n           (valid-year year))))\n  (and (not (empty? date))\n  \
    \     (valid-date-format date)\n       (valid-date-parts date)))\n", "  (define\
    \ (valid-month month)\n    (and (integer? month)\n         (and (>= month 1) (<=\
    \ month 12))))\n  (define (valid-day day)\n    (and (integer? day)\n         (and\
    \ (>= day 1) (<= day 31))))\n  (define (valid-year year)\n    (and (integer? year)\n\
    \         (and (>= year 0) (<= year 9999))))\n  (define (valid-date-format date)\n\
    \    (and (string? date)\n         (string-contains date #\\-)))\n  (define (valid-date-parts\
    \ date)\n    (define (valid-date-parts-helper date)\n      (if (empty? date)\n\
    \          #t\n          (and (valid-date-parts-helper (rest date))\n        \
    \       (and (valid-month (first date))\n                    (and (valid-day (second\
    \ date))\n                         (valid-year (third date)))))))\n    (valid-date-parts-helper\
    \ (string-&gt;list date)))\n  (and (valid-date-format date)\n       (valid-date-parts\
    \ date)))\n", "  (define (valid-month month)\n    (and (integer? month)\n    \
    \     (and (>= month 1) (<= month 12))))\n  (define (valid-day day)\n    (and\
    \ (integer? day)\n         (and (>= day 1) (<= day 31))))\n  (define (valid-year\
    \ year)\n    (and (integer? year)\n         (and (>= year 1) (<= year 9999))))\n\
    \  (define (valid-date-format date)\n    (and (regexp-match? #rx\"^[0-9]{2}-[0-9]{2}-[0-9]{4}$\"\
    \ date)\n         (not (regexp-match? #rx\"^[0-9]{2}/[0-9]{2}/[0-9]{4}$\" date))))\n\
    \  (define (valid-date-parts date)\n    (define (valid-date-parts-helper date)\n\
    \      (define (valid-month-day-pair month day)\n        (cond ((and (= month\
    \ 1) (= month 3) (= month 5) (= month 7) (= month 8) (= month 10) (= month 12))\n\
    \               (and (>= day 1) (<= day 31)))\n              ((and (= month 4)\
    \ (= month 6) (= month 9) (= month 11))\n               (and (>= day 1) (<= day\
    \ 30)))\n              ((= month 2)\n               (and (>= day 1) (<= day 29)))))\n\
    \      (let* ((date-parts (string-split date #\\-))\n             (month (string->number\
    \ (list-ref date-parts 0)))\n             (day (string->number (list-ref date-parts\
    \ 1)))\n             (year (string->number (list-ref date-parts 2))))\n      \
    \  (and (valid-month month)\n             (valid-day day)\n             (valid-year\
    \ year)\n             (valid-month-day-pair month day))))\n    (valid-date-parts-helper\
    \ date))\n  (and (not (string=? date \"\"))\n       (valid-date-format date)\n\
    \       (valid-date-parts date)))\n", "  (define (valid-date-helper date)\n  \
    \  (define (valid-month? month)\n      (and (not (empty? month))\n           (not\
    \ (empty? (string-index month #\\0)))\n           (not (empty? (string-index month\
    \ #\\-)))\n           (not (empty? (string-index month #\\/)))\n           (not\
    \ (empty? (string-index month #\\.)))\n           (not (empty? (string-index month\
    \ #\\ )))\n           (not (empty? (string-index month #\\+)))\n           (not\
    \ (empty? (string-index month #\\*)))\n           (not (empty? (string-index month\
    \ #\\)))\n           (not (empty? (string-index month #\\)))\n           (not\
    \ (empty? (string-index month #\\)))\n           (not (empty? (string-index month\
    \ #\\)))\n           (not (empty? (string-index month #\\)))\n           (not\
    \ (empty? (string-index month #\\)))\n           (not (empty? (string-index month\
    \ #\\)))\n           (not (empty? (string-index month #\\)))\n           (not\
    \ (empty? (string-index month #\\)))\n           (not (empty? (string-index month\
    \ #\\)))\n           (not (empty? (string-index month #\\)))\n           (not\
    \ (empty? (string-index month #\\)))\n           (not (empty? (string-index month\
    \ #\\)))\n           (not (empty? (string-index month #\\)))\n           (not\
    \ (empty? (string-index month #\\)))\n           (not (empty? (string-index month\
    \ #\\)))\n           (not (empty? (string-index month #\\)))\n           (not\
    \ (empty? (string-index month #\\)))\n           (not (empty? (string-index month\
    \ #\\)))\n           (not (empty? (string-index month #\\)))\n           (not\
    \ (empty? (string-index month #\\)))\n           (not (empty? (string-index month\
    \ #\\)))\n           (not (empty? (string-index month #\\)))\n           (not\
    \ (empty? (string-index month #\\)))\n           (not (empty? (", "  (define (valid-month\
    \ month)\n    (and (not (string=? month \"\"))\n         (and (<= 1 (string->number\
    \ month))\n              (<= (string->number month) 12))))\n  (define (valid-day\
    \ day)\n    (and (not (string=? day \"\"))\n         (and (<= 1 (string->number\
    \ day))\n              (<= (string->number day) 31))))\n  (define (valid-year\
    \ year)\n    (and (not (string=? year \"\"))\n         (and (<= 1 (string->number\
    \ year))\n              (<= (string->number year) 9999))))\n  (define (valid-date-format\
    \ date)\n    (string-match #rx\"^[0-9]{2}-[0-9]{2}-[0-9]{4}$\" date))\n  (define\
    \ (valid-date-parts date)\n    (define (valid-month-day-pair month day)\n    \
    \  (cond ((or (string=? month \"01\")\n                 (string=? month \"03\"\
    )\n                 (string=? month \"05\")\n                 (string=? month\
    \ \"07\")\n                 (string=? month \"08\")\n                 (string=?\
    \ month \"10\")\n                 (string=? month \"12\"))\n             (<= (string->number\
    \ day) 31))\n            ((or (string=? month \"04\")\n                 (string=?\
    \ month \"06\")\n                 (string=? month \"09\")\n                 (string=?\
    \ month \"11\"))\n             (<= (string->number day) 30))\n            ((string=?\
    \ month \"02\")\n             (<= (string->number day) 29))\n            (else\
    \ #f)))\n    (define (valid-leap-year year)\n      (and (zero? (modulo (string->number\
    \ year) 4))\n           (or (not (zero? (modulo (string->number year) 100)))\n\
    \               (zero? (modulo (string->number year) 400)))))\n    (define (valid-february-day\
    \ day year)\n      (cond ((valid-leap-year year)\n             (<= (string->number\
    \ day) 29))\n            (else (<= (string->number day) 28", "  (define (valid-month\
    \ month)\n    (and (integer? month)\n         (and (>= month 1) (<= month 12))))\n\
    \  (define (valid-day month day)\n    (and (integer? day)\n         (and (>= day\
    \ 1)\n              (cond\n                [(or (= month 1) (= month 3) (= month\
    \ 5) (= month 7) (= month 8) (= month 10) (= month 12)) (<= day 31)]\n       \
    \         [(or (= month 4) (= month 6) (= month 9) (= month 11)) (<= day 30)]\n\
    \                [(= month 2) (<= day 29)]))))\n  (define (valid-year year)\n\
    \    (and (integer? year)\n         (>= year 0)))\n  (define (valid-date-format\
    \ date)\n    (regexp-match? #rx\"^[0-9]{2}-[0-9]{2}-[0-9]{4}$\" date))\n  (define\
    \ (split-date date)\n    (regexp-match #rx\"^([0-9]{2})-([0-9]{2})-([0-9]{4})$\"\
    \ date))\n  (define (valid-date-parts date)\n    (let* ([date-parts (split-date\
    \ date)]\n           [month (string->number (cadr date-parts))]\n           [day\
    \ (string->number (caddr date-parts))]\n           [year (string->number (cadddr\
    \ date-parts))])\n      (and (valid-month month)\n           (valid-day month\
    \ day)\n           (valid-year year))))\n  (and (not (string=? date \"\"))\n \
    \      (valid-date-format date)\n       (valid-date-parts date)))\n", "  (define\
    \ (valid-month month)\n    (and (not (empty? month))\n         (not (zero? (string-length\
    \ month)))\n         (and (<= 1 (string->number month))\n              (<= (string->number\
    \ month) 12))))\n  (define (valid-day day)\n    (and (not (empty? day))\n    \
    \     (not (zero? (string-length day)))\n         (and (<= 1 (string->number day))\n\
    \              (<= (string->number day) 31))))\n  (define (valid-year year)\n\
    \    (and (not (empty? year))\n         (not (zero? (string-length year)))\n \
    \        (and (<= 1 (string->number year))\n              (<= (string->number\
    \ year) 9999))))\n  (define (valid-date-format date)\n    (and (not (empty? date))\n\
    \         (not (zero? (string-length date)))\n         (and (equal? (substring\
    \ date 2 3) \"-\")\n              (equal? (substring date 5 6) \"-\"))))\n  (and\
    \ (valid-date-format date)\n       (valid-month (substring date 0 2))\n      \
    \ (valid-day (substring date 3 5))\n       (valid-year (substring date 6 (string-length\
    \ date)))))\n", "  (define (valid-month month)\n    (and (<= 1 month) (<= month\
    \ 12)))\n  (define (valid-day month day)\n    (cond\n      [(and (= 1 month) (=\
    \ 3 month) (= 5 month) (= 7 month) (= 8 month) (= 10 month) (= 12 month))\n  \
    \     (and (<= 1 day) (<= day 31))]\n      [(and (= 4 month) (= 6 month) (= 9\
    \ month) (= 11 month))\n       (and (<= 1 day) (<= day 30))]\n      [(= 2 month)\n\
    \       (and (<= 1 day) (<= day 29))]))\n  (define (valid-year year)\n    (and\
    \ (<= 1 year) (<= year 9999)))\n  (define (valid-date-format date)\n    (regexp-match?\
    \ #rx\"^[0-9]{2}-[0-9]{2}-[0-9]{4}$\" date))\n  (define (split-date date)\n  \
    \  (regexp-match #rx\"^([0-9]{2})-([0-9]{2})-([0-9]{4})$\" date))\n  (define (get-month\
    \ date)\n    (string->number (vector-ref (split-date date) 1)))\n  (define (get-day\
    \ date)\n    (string->number (vector-ref (split-date date) 2)))\n  (define (get-year\
    \ date)\n    (string->number (vector-ref (split-date date) 3)))\n  (and (valid-date-format\
    \ date)\n       (valid-month (get-month date))\n       (valid-day (get-month date)\
    \ (get-day date))\n       (valid-year (get-year date))))", "  (define (valid-date-helper\
    \ date)\n    (define (valid-month month)\n      (and (not (empty? month))\n  \
    \         (and (<= 1 (string->number month))\n                (<= (string->number\
    \ month) 12))))\n    (define (valid-day day)\n      (and (not (empty? day))\n\
    \           (and (<= 1 (string->number day))\n                (<= (string->number\
    \ day) 31))))\n    (define (valid-year year)\n      (and (not (empty? year))\n\
    \           (and (<= 1 (string->number year))\n                (<= (string->number\
    \ year) 9999))))\n    (define (valid-separator sep)\n      (and (not (empty? sep))\n\
    \           (string=? sep \"-\")))\n    (define (valid-date-parts date)\n    \
    \  (and (valid-month (first date))\n           (valid-separator (second date))\n\
    \           (valid-day (third date))\n           (valid-separator (fourth date))\n\
    \           (valid-year (fifth date))))\n    (valid-date-parts (string-split date\
    \ \"-\")))\n  (valid-date-helper (string-split date \"-\")))\n", "  (define (valid-month\
    \ month)\n    (and (integer? month)\n         (and (>= month 1) (<= month 12))))\n\
    \  (define (valid-day month day)\n    (and (integer? day)\n         (and (>= day\
    \ 1)\n              (cond\n                [(or (= month 1) (= month 3) (= month\
    \ 5) (= month 7) (= month 8) (= month 10) (= month 12)) (<= day 31)]\n       \
    \         [(or (= month 4) (= month 6) (= month 9) (= month 11)) (<= day 30)]\n\
    \                [(= month 2) (<= day 29)]))))\n  (define (valid-year year)\n\
    \    (and (integer? year)\n         (>= year 0)))\n  (define (valid-date-format\
    \ date)\n    (regexp-match? #rx\"^[0-9]{2}-[0-9]{2}-[0-9]{4}$\" date))\n  (define\
    \ (valid-date-parts date)\n    (let* ([date-parts (string-split date #\\-)]\n\
    \           [month (string->number (list-ref date-parts 0))]\n           [day\
    \ (string->number (list-ref date-parts 1))]\n           [year (string->number\
    \ (list-ref date-parts 2))])\n      (and (valid-month month)\n           (valid-day\
    \ month day)\n           (valid-year year))))\n  (and (not (string=? date \"\"\
    ))\n       (valid-date-format date)\n       (valid-date-parts date)))\n", "  (define\
    \ (valid-month month)\n    (and (>= month 1) (<= month 12)))\n  (define (valid-day\
    \ month day)\n    (cond\n      [(and (= month 1) (= month 3) (= month 5) (= month\
    \ 7) (= month 8) (= month 10) (= month 12))\n       (and (>= day 1) (<= day 31))]\n\
    \      [(and (= month 4) (= month 6) (= month 9) (= month 11))\n       (and (>=\
    \ day 1) (<= day 30))]\n      [(= month 2)\n       (and (>= day 1) (<= day 29))]))\n\
    \  (define (valid-year year)\n    (and (>= year 0) (<= year 9999)))\n  (define\
    \ (valid-date-format date)\n    (regexp-match? #rx\"^[0-9]{2}-[0-9]{2}-[0-9]{4}$\"\
    \ date))\n  (define (valid-date-parts date)\n    (let* ([date-parts (string-split\
    \ date \"-\")]\n           [month (string->number (list-ref date-parts 0))]\n\
    \           [day (string->number (list-ref date-parts 1))]\n           [year (string->number\
    \ (list-ref date-parts 2))])\n      (and (valid-month month)\n           (valid-day\
    \ month day)\n           (valid-year year))))\n  (and (not (string=? date \"\"\
    ))\n       (valid-date-format date)\n       (valid-date-parts date)))\n", "  (define\
    \ (valid-month month)\n    (and (integer? month)\n         (and (<= 1 month) (<=\
    \ month 12))))\n  (define (valid-day month day)\n    (and (integer? day)\n   \
    \      (and (<= 1 day)\n              (cond\n                [(member month '(1\
    \ 3 5 7 8 10 12)) (<= day 31)]\n                [(member month '(4 6 9 11)) (<=\
    \ day 30)]\n                [(= month 2) (<= day 29)]))))\n  (define (valid-year\
    \ year)\n    (and (integer? year)\n         (and (<= 1 year) (<= year 9999))))\n\
    \  (define (valid-date-format date)\n    (and (regexp-match? #rx\"^[0-9]{2}-[0-9]{2}-[0-9]{4}$\"\
    \ date)\n         (let ([date-parts (string-split date #\\-)]\n              \
    \ [month (string->number (list-ref date-parts 0))]\n               [day (string->number\
    \ (list-ref date-parts 1))]\n               [year (string->number (list-ref date-parts\
    \ 2))])\n           (and (valid-month month)\n                (valid-day month\
    \ day)\n                (valid-year year)))))\n  (and (not (string=? date \"\"\
    ))\n       (valid-date-format date)))\n", "  (define (valid-month month)\n   \
    \ (and (&gt;= month 1) (&lt;= month 12)))\n  (define (valid-day month day)\n \
    \   (cond ((= month 1) (&gt;= day 1) (&lt;= day 31))\n          ((= month 3) (&gt;=\
    \ day 1) (&lt;= day 31))\n          ((= month 5) (&gt;= day 1) (&lt;= day 31))\n\
    \          ((= month 7) (&gt;= day 1) (&lt;= day 31))\n          ((= month 8)\
    \ (&gt;= day 1) (&lt;= day 31))\n          ((= month 10) (&gt;= day 1) (&lt;=\
    \ day 31))\n          ((= month 12) (&gt;= day 1) (&lt;= day 31))\n          ((=\
    \ month 4) (&gt;= day 1) (&lt;= day 30))\n          ((= month 6) (&gt;= day 1)\
    \ (&lt;= day 30))\n          ((= month 9) (&gt;= day 1) (&lt;= day 30))\n    \
    \      ((= month 11) (&gt;= day 1) (&lt;= day 30))\n          ((= month 2) (&gt;=\
    \ day 1) (&lt;= day 29))))\n  (define (valid-year year)\n    (&gt;= year 1))\n\
    \  (define (valid-date-format date)\n    (string-match #rx\"^[0-9]{2}-[0-9]{2}-[0-9]{4}$\"\
    \ date))\n  (and (valid-date-format date)\n       (valid-month (string-&gt;number\
    \ (substring date 0 2)))\n       (valid-day (string-&gt;number (substring date\
    \ 0 2))\n                  (string-&gt;number (substring date 3 5)))\n       (valid-year\
    \ (string-&gt;number (substring date 6 10)))))\n</code>\nI'm not sure if this\
    \ is the best way to do it, but it works.\n", "  (define (valid-month month)\n\
    \    (and (not (string=? month \"\"))\n         (and (not (string=? month \"0\"\
    ))\n              (and (not (string=? month \"00\"))\n                   (and\
    \ (not (string=? month \"000\"))\n                        (and (not (string=?\
    \ month \"0000\"))\n                             (and (not (string=? month \"\
    00000\"))\n                                  (and (not (string=? month \"000000\"\
    ))\n                                       (and (not (string=? month \"0000000\"\
    ))\n                                            (and (not (string=? month \"00000000\"\
    ))\n                                                 (and (not (string=? month\
    \ \"000000000\"))\n                                                      (and\
    \ (not (string=? month \"0000000000\"))\n                                    \
    \                       (and (not (string=? month \"00000000000\"))\n        \
    \                                                        (and (not (string=? month\
    \ \"000000000000\"))\n                                                       \
    \              (and (not (string=? month \"0000000000000\"))\n               \
    \                                                           (and (not (string=?\
    \ month \"00000000000000\"))\n                                               \
    \                                (and (not (string=? month \"000000000000000\"\
    ))\n                                                                         \
    \           (and (not (string=? month \"0000000000000000\"))\n               \
    \                                                                          (and\
    \ (not (string=? month \"00000000000000000\"))\n                             \
    \                                                                 (and (not (string=?\
    \ month \"000000000000000000\"))\n                                           \
    \                                                        (and (not (string=? month\
    \ \"0000000000000000000\"))\n                                                \
    \                                                        (and (not (string=? month\
    \ \"00000000000000000000\"))\n                                               \
    \                                                              (and (not (string=?\
    \ month \"000000000000000000000\"))\n                                        \
    \                                                                          (and\
    \ (not (string=? month \"0000000000000000000000\"))\n                        \
    \                                                                            \
    \                   (and (not (string=? month \"00000000000000000000000\"))\n\
    \                                                                            \
    \                                                (and (not (string=? month \"\
    000000000000000000000000\"))\n                                               \
    \                                                                            \
    \      (and (not (string=? month \"0000000000000000000000000\"))\n           \
    \                                                                            \
    \                                               (and (not (string=? month \"00000000000000000000000000\"\
    ))\n                                                                         \
    \                                                                  (and (not (string=",
  "  (define (valid-month month)\n    (and (integer? month)\n         (and (>= month\
    \ 1) (<= month 12))))\n  (define (valid-day month day)\n    (and (integer? day)\n\
    \         (and (>= day 1)\n              (cond ((or (= month 1) (= month 3) (=\
    \ month 5) (= month 7) (= month 8) (= month 10) (= month 12))\n              \
    \       (<= day 31))\n                    ((or (= month 4) (= month 6) (= month\
    \ 9) (= month 11))\n                     (<= day 30))\n                    ((=\
    \ month 2)\n                     (<= day 29))))))\n  (define (valid-year year)\n\
    \    (and (integer? year)\n         (>= year 0)))\n  (define (valid-date-format\
    \ date)\n    (regexp-match? #rx\"^[0-9]{2}-[0-9]{2}-[0-9]{4}$\" date))\n  (define\
    \ (valid-date-parts date)\n    (let* ([parts (string-split date #\\-)]\n     \
    \      [month (string->number (list-ref parts 0))]\n           [day (string->number\
    \ (list-ref parts 1))]\n           [year (string->number (list-ref parts 2))])\n\
    \      (and (valid-month month)\n           (valid-day month day)\n          \
    \ (valid-year year))))\n  (and (not (string=? date \"\"))\n       (valid-date-format\
    \ date)\n       (valid-date-parts date)))\n", "  (define (is-valid-date? date)\n\
    \    (define (is-valid-month? month)\n      (and (not (empty? month))\n      \
    \     (not (empty? (string-&gt;number month)))\n           (not (&lt; (string-&gt;number\
    \ month) 1))\n           (not (&gt; (string-&gt;number month) 12))))\n    (define\
    \ (is-valid-day? day)\n      (and (not (empty? day))\n           (not (empty?\
    \ (string-&gt;number day)))\n           (not (&lt; (string-&gt;number day) 1))\n\
    \           (not (&gt; (string-&gt;number day) 31))))\n    (define (is-valid-year?\
    \ year)\n      (and (not (empty? year))\n           (not (empty? (string-&gt;number\
    \ year)))\n           (not (&lt; (string-&gt;number year) 1))))\n    (define (is-valid-format?\
    \ date)\n      (and (not (empty? date))\n           (regexp-match? #rx\"^[0-9]{2}-[0-9]{2}-[0-9]{4}$\"\
    \ date)))\n    (and (is-valid-format? date)\n         (is-valid-month? (substring\
    \ date 0 2))\n         (is-valid-day? (substring date 3 5))\n         (is-valid-year?\
    \ (substring date 6 10))))\n  (is-valid-date? date))\n", "  (define (valid-month\
    \ month)\n    (and (>= month 1) (<= month 12)))\n  (define (valid-day month day)\n\
    \    (cond\n      [(or (= month 1) (= month 3) (= month 5) (= month 7) (= month\
    \ 8) (= month 10) (= month 12))\n       (and (>= day 1) (<= day 31))]\n      [(or\
    \ (= month 4) (= month 6) (= month 9) (= month 11))\n       (and (>= day 1) (<=\
    \ day 30))]\n      [(= month 2)\n       (and (>= day 1) (<= day 29))]))\n  (define\
    \ (valid-year year)\n    (and (>= year 1) (<= year 9999)))\n  (define (valid-date-format\
    \ date)\n    (and (regexp-match? #rx\"^[0-9]{2}-[0-9]{2}-[0-9]{4}$\" date)\n \
    \        (not (regexp-match? #rx\"^[0-9]{2}/[0-9]{2}/[0-9]{4}$\" date))))\n  (define\
    \ (valid-date-parts date)\n    (let* ([date-parts (string-split date #\\-)])\n\
    \      (and (valid-month (string->number (list-ref date-parts 0)))\n         \
    \  (valid-day (string->number (list-ref date-parts 0))\n                     \
    \ (string->number (list-ref date-parts 1)))\n           (valid-year (string->number\
    \ (list-ref date-parts 2))))))\n  (and (not (string=? date \"\"))\n       (valid-date-format\
    \ date)\n       (valid-date-parts date)))\n", "  (define (valid-month month)\n\
    \    (and (not (string=? month \"\"))\n         (and (not (string=? month \"0\"\
    ))\n              (and (not (string=? month \"00\"))\n                   (and\
    \ (not (string=? month \"000\"))\n                        (and (not (string=?\
    \ month \"0000\"))\n                             (and (not (string=? month \"\
    00000\"))\n                                  (and (not (string=? month \"000000\"\
    ))\n                                       (and (not (string=? month \"0000000\"\
    ))\n                                            (and (not (string=? month \"00000000\"\
    ))\n                                                 (and (not (string=? month\
    \ \"000000000\"))\n                                                      (and\
    \ (not (string=? month \"0000000000\"))\n                                    \
    \                       (and (not (string=? month \"00000000000\"))\n        \
    \                                                        (and (not (string=? month\
    \ \"000000000000\"))\n                                                       \
    \              (and (not (string=? month \"0000000000000\"))\n               \
    \                                                           (and (not (string=?\
    \ month \"00000000000000\"))\n                                               \
    \                                (and (not (string=? month \"000000000000000\"\
    ))\n                                                                         \
    \           (and (not (string=? month \"0000000000000000\"))\n               \
    \                                                                          (and\
    \ (not (string=? month \"00000000000000000\"))\n                             \
    \                                                                 (and (not (string=?\
    \ month \"000000000000000000\"))\n                                           \
    \                                                        (and (not (string=? month\
    \ \"0000000000000000000\"))\n                                                \
    \                                                        (and (not (string=? month\
    \ \"00000000000000000000\"))\n                                               \
    \                                                              (and (not (string=?\
    \ month \"000000000000000000000\"))\n                                        \
    \                                                                          (and\
    \ (not (string=? month \"0000000000000000000000\"))\n                        \
    \                                                                            \
    \                   (and (not (string=? month \"00000000000000000000000\"))\n\
    \                                                                            \
    \                                                (and (not (string=? month \"\
    000000000000000000000000\"))\n                                               \
    \                                                                            \
    \      (and (not (string=? month \"0000000000000000000000000\"))\n           \
    \                                                                            \
    \                                               (and (not (string=? month \"00000000000000000000000000\"\
    ))\n                                                                         \
    \                                                                  (and (not (string=",
  "  (define (valid-date-helper date)\n    (define (valid-date-helper-helper date)\n\
    \      (define (valid-date-helper-helper-helper date)\n        (define (valid-date-helper-helper-helper-helper\
    \ date)\n          (define (valid-date-helper-helper-helper-helper-helper date)\n\
    \            (define (valid-date-helper-helper-helper-helper-helper-helper date)\n\
    \              (define (valid-date-helper-helper-helper-helper-helper-helper-helper\
    \ date)\n                (define (valid-date-helper-helper-helper-helper-helper-helper-helper-helper\
    \ date)\n                  (define (valid-date-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ date)\n                    (define (valid-date-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ date)\n                      (define (valid-date-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ date)\n                        (define (valid-date-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ date)\n                          (define (valid-date-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ date)\n                            (define (valid-date-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ date)\n                              (define (valid-date-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ date", "  (define (valid-month month)\n    (and (>= month 1) (<= month 12)))\n\
    \  (define (valid-day month day)\n    (and (>= day 1)\n         (<= day (cond\n\
    \                  [(or (= month 1) (= month 3) (= month 5) (= month 7) (= month\
    \ 8) (= month 10) (= month 12)) 31]\n                  [(or (= month 4) (= month\
    \ 6) (= month 9) (= month 11)) 30]\n                  [(= month 2) 29]))))\n \
    \ (define (valid-year year)\n    (and (>= year 0) (<= year 9999)))\n  (define\
    \ (valid-date-format date)\n    (and (regexp-match? #rx\"^[0-9]{2}-[0-9]{2}-[0-9]{4}$\"\
    \ date)\n         (let ([month (string->number (regexp-match #rx\"^[0-9]{2}\"\
    \ date))]\n               [day (string->number (regexp-match #rx\"-[0-9]{2}-\"\
    \ date))]\n               [year (string->number (regexp-match #rx\"[0-9]{4}$\"\
    \ date))])\n           (and (valid-month month)\n                (valid-day month\
    \ day)\n                (valid-year year)))))\n  (and (not (string=? date \"\"\
    ))\n       (valid-date-format date)))\n", "  (define (valid-date-helper date)\n\
    \    (define (valid-date-helper-helper date)\n      (define (valid-date-helper-helper-helper\
    \ date)\n        (define (valid-date-helper-helper-helper-helper date)\n     \
    \     (define (valid-date-helper-helper-helper-helper-helper date)\n         \
    \   (define (valid-date-helper-helper-helper-helper-helper-helper date)\n    \
    \          (define (valid-date-helper-helper-helper-helper-helper-helper-helper\
    \ date)\n                (define (valid-date-helper-helper-helper-helper-helper-helper-helper-helper\
    \ date)\n                  (define (valid-date-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ date)\n                    (define (valid-date-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ date)\n                      (define (valid-date-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ date)\n                        (define (valid-date-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ date)\n                          (define (valid-date-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ date)\n                            (define (valid-date-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ date)\n                              (define (valid-date-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ date", "  (define (valid-month month)\n    (and (not (empty? month))\n     \
    \    (and (<= 1 (string->number month))\n              (<= (string->number month)\
    \ 12))))\n  (define (valid-day day)\n    (and (not (empty? day))\n         (and\
    \ (<= 1 (string->number day))\n              (<= (string->number day) 31))))\n\
    \  (define (valid-year year)\n    (and (not (empty? year))\n         (and (<=\
    \ 1 (string->number year))\n              (<= (string->number year) 9999))))\n\
    \  (define (valid-date-format date)\n    (regexp-match #rx\"^[0-9]{2}-[0-9]{2}-[0-9]{4}$\"\
    \ date))\n  (define (valid-date-format-2 date)\n    (regexp-match #rx\"^[0-9]{2}/[0-9]{2}/[0-9]{4}$\"\
    \ date))\n  (define (valid-date-format-3 date)\n    (regexp-match #rx\"^[0-9]{4}-[0-9]{2}-[0-9]{2}$\"\
    \ date))\n  (define (valid-date-format-4 date)\n    (regexp-match #rx\"^[0-9]{4}/[0-9]{2}/[0-9]{2}$\"\
    \ date))\n  (define (valid-date-format-5 date)\n    (regexp-match #rx\"^[0-9]{2}-[0-9]{2}-[0-9]{2}$\"\
    \ date))\n  (define (valid-date-format-6 date)\n    (regexp-match #rx\"^[0-9]{2}/[0-9]{2}/[0-9]{2}$\"\
    \ date))\n  (define (valid-date-format-7 date)\n    (regexp-match #rx\"^[0-9]{2}-[0-9]{2}-[0-",
  "  (define (valid-month month)\n    (and (>= month 1) (<= month 12)))\n  (define\
    \ (valid-day month day)\n    (cond\n      [(or (= month 1) (= month 3) (= month\
    \ 5) (= month 7) (= month 8) (= month 10) (= month 12))\n       (and (>= day 1)\
    \ (<= day 31))]\n      [(or (= month 4) (= month 6) (= month 9) (= month 11))\n\
    \       (and (>= day 1) (<= day 30))]\n      [(= month 2)\n       (and (>= day\
    \ 1) (<= day 29))]))\n  (define (valid-year year)\n    (and (>= year 1) (<= year\
    \ 9999)))\n  (define (valid-date-format date)\n    (regexp-match? #rx\"^[0-9]{2}-[0-9]{2}-[0-9]{4}$\"\
    \ date))\n  (define (split-date date)\n    (string-split date #\\-))\n  (define\
    \ (get-month date)\n    (string->number (list-ref (split-date date) 0)))\n  (define\
    \ (get-day date)\n    (string->number (list-ref (split-date date) 1)))\n  (define\
    \ (get-year date)\n    (string->number (list-ref (split-date date) 2)))\n  (and\
    \ (valid-date-format date)\n       (valid-month (get-month date))\n       (valid-day\
    \ (get-month date) (get-day date))\n       (valid-year (get-year date))))\n",
  "  (define (valid-month month)\n    (and (<= 1 month) (<= month 12)))\n  (define\
    \ (valid-day month day)\n    (cond\n      [(or (= month 1) (= month 3) (= month\
    \ 5) (= month 7) (= month 8) (= month 10) (= month 12))\n       (and (<= 1 day)\
    \ (<= day 31))]\n      [(or (= month 4) (= month 6) (= month 9) (= month 11))\n\
    \       (and (<= 1 day) (<= day 30))]\n      [(= month 2)\n       (and (<= 1 day)\
    \ (<= day 29))]))\n  (define (valid-year year)\n    (and (<= 1 year) (<= year\
    \ 9999)))\n  (define (valid-date-format date)\n    (and (regexp-match? #rx\"^[0-9]{2}-[0-9]{2}-[0-9]{4}$\"\
    \ date)\n         (not (regexp-match? #rx\"^[0-9]{2}/[0-9]{2}/[0-9]{4}$\" date))))\n\
    \  (define (split-date date)\n    (regexp-match #rx\"^([0-9]{2})-([0-9]{2})-([0-9]{4})$\"\
    \ date))\n  (define (get-month date)\n    (string->number (vector-ref (split-date\
    \ date) 1)))\n  (define (get-day date)\n    (string->number (vector-ref (split-date\
    \ date) 2)))\n  (define (get-year date)\n    (string->number (vector-ref (split-date\
    \ date) 3)))\n  (and (valid-date-format date)\n       (valid-month (get-month\
    \ date))\n       (valid-day (get-month date) (get-day date))\n       (valid-year\
    \ (get-year date))))\n", "  (define (valid-month month)\n    (and (not (empty?\
    \ month))\n         (not (empty? (string-trim-both month)))\n         (not (string=?\
    \ month \"0\"))\n         (not (string=? month \"00\"))\n         (not (string=?\
    \ month \"000\"))\n         (not (string=? month \"0000\"))\n         (not (string=?\
    \ month \"00000\"))\n         (not (string=? month \"000000\"))\n         (not\
    \ (string=? month \"0000000\"))\n         (not (string=? month \"00000000\"))\n\
    \         (not (string=? month \"000000000\"))\n         (not (string=? month\
    \ \"0000000000\"))\n         (not (string=? month \"00000000000\"))\n        \
    \ (not (string=? month \"000000000000\"))\n         (not (string=? month \"0000000000000\"\
    ))\n         (not (string=? month \"00000000000000\"))\n         (not (string=?\
    \ month \"000000000000000\"))\n         (not (string=? month \"0000000000000000\"\
    ))\n         (not (string=? month \"00000000000000000\"))\n         (not (string=?\
    \ month \"000000000000000000\"))\n         (not (string=? month \"0000000000000000000\"\
    ))\n         (not (string=? month \"00000000000000000000\"))\n         (not (string=?\
    \ month \"000000000000000000000\"))\n         (not (string=? month \"0000000000000000000000\"\
    ))\n         (not (string=? month \"00000000000000000000000\"))\n         (not\
    \ (string=? month \"000000000000000000000000\"))\n         (not (string=? month\
    \ \"0000000000000000000000000\"))\n         (not (string=? month \"00000000000000000000000000\"\
    ))\n         (not (string=? month \"000000000000000000000000000\"))\n        \
    \ (not (string=? month \"0000000000000000000000000000\"))\n         (not (string=?\
    \ month \"00000000000000000000000000000\"))\n         (not (string=? month \"\
    000000000000000000000000000000\"))\n         (not (string=? month \"0000000000000000000000000000000\"\
    ))\n         (not (string=? month \"00000000000000000000000000000000\"))\n   \
    \      (not (string=? month \"000000000000000000000000000000000\"))\n        \
    \ (not (string=? month \"0000000000000000000000000000000000\"))\n         (not\
    \ (string=? month \"00000000000000000000000000000000000\"))\n         (not (string=?\
    \ month \"000000000000000000000000000000000000\"))\n         (", "  (define (valid-month\
    \ month)\n    (and (not (empty? month))\n         (not (empty? (string-&gt;number\
    \ month)))\n         (not (negative? (string-&gt;number month)))\n         (not\
    \ (&gt; (string-&gt;number month) 12))))\n  (define (valid-day day)\n    (and\
    \ (not (empty? day))\n         (not (empty? (string-&gt;number day)))\n      \
    \   (not (negative? (string-&gt;number day)))\n         (not (&gt; (string-&gt;number\
    \ day) 31))))\n  (define (valid-year year)\n    (and (not (empty? year))\n   \
    \      (not (empty? (string-&gt;number year)))\n         (not (negative? (string-&gt;number\
    \ year)))\n         (not (&gt; (string-&gt;number year) 9999))))\n  (define (valid-format\
    \ date)\n    (and (not (empty? date))\n         (regexp-match? #rx\"^[0-9]{2}-[0-9]{2}-[0-9]{4}$\"\
    \ date)))\n  (and (valid-format date)\n       (valid-month (substring date 0 2))\n\
    \       (valid-day (substring date 3 5))\n       (valid-year (substring date 6\
    \ 10))))\n", "  (let* ([date-parts (regexp-match #rx\"^([0-9]{2})-([0-9]{2})-([0-9]{4})$\"\
    \ date)]\n         [month (string-&gt;number (vector-ref date-parts 1))]\n   \
    \      [day (string-&gt;number (vector-ref date-parts 2))]\n         [year (string-&gt;number\
    \ (vector-ref date-parts 3))])\n    (and (not (empty? date))\n         (and (or\
    \ (and (= month 1) (&lt;= 1 day 31))\n                  (and (= month 3) (&lt;=\
    \ 1 day 31))\n                  (and (= month 5) (&lt;= 1 day 31))\n         \
    \         (and (= month 7) (&lt;= 1 day 31))\n                  (and (= month\
    \ 8) (&lt;= 1 day 31))\n                  (and (= month 10) (&lt;= 1 day 31))\n\
    \                  (and (= month 12) (&lt;= 1 day 31))\n                  (and\
    \ (= month 4) (&lt;= 1 day 30))\n                  (and (= month 6) (&lt;= 1 day\
    \ 30))\n                  (and (= month 9) (&lt;= 1 day 30))\n               \
    \   (and (= month 11) (&lt;= 1 day 30))\n                  (and (= month 2) (&lt;=\
    \ 1 day 29)))\n              (&lt;= 1 month 12))\n         (and (not (empty? date-parts))\n\
    \              (= (vector-length date-parts) 4)))))\n</code>\n", "  (define (valid-date-helper\
    \ date)\n    (define (valid-month month)\n      (and (not (string=? month \"\"\
    ))\n           (and (<= 1 (string->number month))\n                (<= (string->number\
    \ month) 12))))\n    (define (valid-day day)\n      (and (not (string=? day \"\
    \"))\n           (and (<= 1 (string->number day))\n                (<= (string->number\
    \ day) 31))))\n    (define (valid-year year)\n      (and (not (string=? year \"\
    \"))\n           (and (<= 1 (string->number year))\n                (<= (string->number\
    \ year) 9999))))\n    (define (valid-format date)\n      (and (string-contains\
    \ date #\\-)\n           (string-contains date #\\-)\n           (string-contains\
    \ date #\\-)))\n    (and (valid-format date)\n         (and (valid-month (substring\
    \ date 0 2))\n              (valid-day (substring date 3 5))\n              (valid-year\
    \ (substring date 6 10)))))\n  (valid-date-helper date))\n", "  (define (valid-month\
    \ month)\n    (and (>= month 1) (<= month 12)))\n  (define (valid-day month day)\n\
    \    (and (>= day 1)\n         (<= day\n             (cond\n               [(or\
    \ (= month 1) (= month 3) (= month 5) (= month 7) (= month 8) (= month 10) (=\
    \ month 12)) 31]\n               [(or (= month 4) (= month 6) (= month 9) (= month\
    \ 11)) 30]\n               [(= month 2) 29]))))\n  (define (valid-year year)\n\
    \    (and (>= year 0) (<= year 9999)))\n  (define (valid-date-format date)\n \
    \   (and (regexp-match? #rx\"^[0-9]{2}-[0-9]{2}-[0-9]{4}$\" date)\n         (regexp-match?\
    \ #rx\"^[0-9]{2}-[0-9]{2}-[0-9]{4}$\" date)))\n  (define (valid-date-parts date)\n\
    \    (define (valid-date-parts-helper date)\n      (define (valid-date-parts-helper-helper\
    \ date)\n        (define (valid-date-parts-helper-helper-helper date)\n      \
    \    (define (valid-date-parts-helper-helper-helper-helper date)\n           \
    \ (define (valid-date-parts-helper-helper-helper-helper-helper date)\n       \
    \       (define (valid-date-parts-helper-helper-helper-helper-helper-helper date)\n\
    \                (define (valid-date-parts-helper-helper-helper-helper-helper-helper-helper\
    \ date)\n                  (define (valid-date-parts-helper-helper-helper-helper-helper-helper-helper-helper\
    \ date)\n                    (define (valid-date-parts-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ date)\n                      (define (valid-date-parts-helper-helper-", "  (define\
    \ (valid-month month)\n    (and (<= 1 month) (<= month 12)))\n  (define (valid-day\
    \ month day)\n    (and (<= 1 day) (<= day (days-in-month month))))\n  (define\
    \ (days-in-month month)\n    (cond\n      [(or (= month 1) (= month 3) (= month\
    \ 5) (= month 7) (= month 8) (= month 10) (= month 12)) 31]\n      [(or (= month\
    \ 4) (= month 6) (= month 9) (= month 11)) 30]\n      [(= month 2) 29]))\n  (define\
    \ (valid-year year)\n    (and (<= 1 year) (<= year 9999)))\n  (define (valid-date-format\
    \ date)\n    (and (regexp-match? #rx\"^[0-9]{2}-[0-9]{2}-[0-9]{4}$\" date)\n \
    \        (regexp-match? #rx\"^[0-9]{2}-[0-9]{2}-[0-9]{4}$\" date)))\n  (define\
    \ (valid-date-parts date)\n    (let* ([parts (string-split date #\\-)]\n     \
    \      [month (string->number (list-ref parts 0))]\n           [day (string->number\
    \ (list-ref parts 1))]\n           [year (string->number (list-ref parts 2))])\n\
    \      (and (valid-month month)\n           (valid-day month day)\n          \
    \ (valid-year year))))\n  (and (not (string=? date \"\"))\n       (valid-date-format\
    \ date)\n       (valid-date-parts date)))\n", "  (define (valid-date-helper date)\n\
    \    (define (valid-month month)\n      (and (integer? month)\n           (and\
    \ (<= 1 month) (<= month 12))))\n    (define (valid-day day)\n      (and (integer?\
    \ day)\n           (and (<= 1 day) (<= day 31))))\n    (define (valid-year year)\n\
    \      (and (integer? year)\n           (and (<= 1 year) (<= year 9999))))\n \
    \   (define (valid-date-format date)\n      (regexp-match? #rx\"^[0-9]{2}-[0-9]{2}-[0-9]{4}$\"\
    \ date))\n    (define (valid-day-for-month day month)\n      (cond ((and (= month\
    \ 1) (= month 3) (= month 5) (= month 7) (= month 8) (= month 10) (= month 12))\n\
    \             (and (<= 1 day) (<= day 31)))\n            ((and (= month 4) (=\
    \ month 6) (= month 9) (= month 11))\n             (and (<= 1 day) (<= day 30)))\n\
    \            ((= month 2)\n             (and (<= 1 day) (<= day 29)))))\n    (define\
    \ (valid-date-parts date)\n      (define (valid-date-parts-helper date)\n    \
    \    (define (valid-date-parts-helper-helper date)\n          (define (valid-date-parts-helper-helper-helper\
    \ date)\n            (define (valid-date-parts-helper-helper-helper-helper date)\n\
    \              (define (valid-date-parts-helper-helper-helper-helper-helper date)\n\
    \                (define (valid-date-parts-helper-helper-helper-helper-helper-helper\
    \ date)\n                  (define (valid-date-parts-helper-helper-helper-helper-helper-helper-helper\
    \ date)\n                    (define (valid-date-parts-helper-helper-helper-helper-helper-helper-helper-helper\
    \ date)\n                      (define (valid-date-parts-", "  (cond\n    [(empty?\
    \ date) false]\n    [(regexp-match? #rx\"^[0-9]{2}-[0-9]{2}-[0-9]{4}$\" date)\n\
    \     (let ([month (string->number (substring date 0 2))]\n           [day (string->number\
    \ (substring date 3 5))]\n           [year (string->number (substring date 6 10))])\n\
    \       (cond\n         [(or (< month 1) (> month 12)) false]\n         [(or (<\
    \ day 1) (> day 31)) false]\n         [(and (= month 2) (or (< day 1) (> day 29)))\
    \ false]\n         [(and (or (= month 4) (= month 6) (= month 9) (= month 11))\
    \ (or (< day 1) (> day 30))) false]\n         [else true]))]\n    [else false]))\n",
  "  (define (valid-month month)\n    (and (integer? month)\n         (and (&lt;=\
    \ 1 month)\n              (&lt;= month 12))))\n  (define (valid-day month day)\n\
    \    (and (integer? day)\n         (and (&lt;= 1 day)\n              (cond\n \
    \               [(or (= month 1) (= month 3) (= month 5) (= month 7) (= month\
    \ 8) (= month 10) (= month 12))\n                 (&lt;= day 31)]\n          \
    \      [(or (= month 4) (= month 6) (= month 9) (= month 11))\n              \
    \   (&lt;= day 30)]\n                [(= month 2)\n                 (&lt;= day\
    \ 29)]))))\n  (define (valid-year year)\n    (and (integer? year)\n         (&gt;=\
    \ year 0)))\n  (define (valid-date-format date)\n    (and (regexp-match? #rx\"\
    ^[0-9]{2}-[0-9]{2}-[0-9]{4}$\" date)\n         (let* ([date-parts (string-split\
    \ date #\\-)])\n           (and (valid-month (string-&gt;number (list-ref date-parts\
    \ 0)))\n                (valid-day (string-&gt;number (list-ref date-parts 0))\n\
    \                           (string-&gt;number (list-ref date-parts 1)))\n   \
    \             (valid-year (string-&gt;number (list-ref date-parts 2)))))))\n \
    \ (and (not (string=? date \"\"))\n       (valid-date-format date)))\n", "  (define\
    \ (valid-month month)\n    (and (>= month 1) (<= month 12)))\n  (define (valid-day\
    \ month day)\n    (cond\n      [(and (= month 1) (= month 3) (= month 5) (= month\
    \ 7) (= month 8) (= month 10) (= month 12))\n       (and (>= day 1) (<= day 31))]\n\
    \      [(and (= month 4) (= month 6) (= month 9) (= month 11))\n       (and (>=\
    \ day 1) (<= day 30))]\n      [(= month 2)\n       (and (>= day 1) (<= day 29))]))\n\
    \  (define (valid-year year)\n    (and (>= year 1) (<= year 9999)))\n  (define\
    \ (valid-date-format date)\n    (and (regexp-match #rx\"^[0-9]{2}-[0-9]{2}-[0-9]{4}$\"\
    \ date)\n         (not (regexp-match #rx\"^[0-9]{2}/[0-9]{2}/[0-9]{4}$\" date))))\n\
    \  (define (valid-date-parts date)\n    (define (valid-date-parts-helper date)\n\
    \      (define (valid-date-parts-helper-helper date)\n        (define (valid-date-parts-helper-helper-helper\
    \ date)\n          (define (valid-date-parts-helper-helper-helper-helper date)\n\
    \            (define (valid-date-parts-helper-helper-helper-helper-helper date)\n\
    \              (define (valid-date-parts-helper-helper-helper-helper-helper-helper\
    \ date)\n                (define (valid-date-parts-helper-helper-helper-helper-helper-helper-helper\
    \ date)\n                  (define (valid-date-parts-helper-helper-helper-helper-helper-helper-helper-helper\
    \ date)\n                    (define (valid-date-parts-helper-helper-helper-helper-helper-helper-",
  "  (cond\n    [(empty? date) false]\n    [(not (regexp-match? #rx\"^[0-9]{2}-[0-9]{2}-[0-9]{4}$\"\
    \ date)) false]\n    [else\n     (define (valid-month month)\n       (and (<=\
    \ 1 month) (<= month 12)))\n     (define (valid-day month day)\n       (cond\n\
    \         [(and (= 1 month) (= month 3) (= month 5) (= month 7) (= month 8) (=\
    \ month 10) (= month 12))\n          (and (<= 1 day) (<= day 31))]\n         [(and\
    \ (= 4 month) (= 6 month) (= 9 month) (= 11 month))\n          (and (<= 1 day)\
    \ (<= day 30))]\n         [(= 2 month)\n          (and (<= 1 day) (<= day 29))]))\n\
    \     (define (valid-year year)\n       (and (<= 1 year) (<= year 9999)))\n  \
    \   (define (valid-date-parts month day year)\n       (and (valid-month month)\
    \ (valid-day month day) (valid-year year)))\n     (define (date-parts date)\n\
    \       (define (date-parts-helper date)\n         (define (date-parts-helper-helper\
    \ date)\n           (define (date-parts-helper-helper-helper date)\n         \
    \    (define (date-parts-helper-helper-helper-helper date)\n               (define\
    \ (date-parts-helper-helper-helper-helper-helper date)\n                 (define\
    \ (date-parts-helper-helper-helper-helper-helper-helper date)\n              \
    \     (define (date-parts-helper-helper-helper-helper-helper-helper-helper date)\n\
    \                     (define (date-parts-helper-helper-helper-helper-helper-helper-helper-helper\
    \ date)\n                       (define (date-parts-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ date)\n                         (define (date-parts-", "  (define (valid-month\
    \ month)\n    (and (>= month 1) (<= month 12)))\n  (define (valid-day month day)\n\
    \    (cond\n      [(and (= month 1) (= month 3) (= month 5) (= month 7) (= month\
    \ 8) (= month 10) (= month 12))\n       (and (>= day 1) (<= day 31))]\n      [(and\
    \ (= month 4) (= month 6) (= month 9) (= month 11))\n       (and (>= day 1) (<=\
    \ day 30))]\n      [(= month 2)\n       (and (>= day 1) (<= day 29))]))\n  (define\
    \ (valid-year year)\n    (and (>= year 0) (<= year 9999)))\n  (define (valid-date-format\
    \ date)\n    (and (regexp-match? #rx\"^[0-9]{2}-[0-9]{2}-[0-9]{4}$\" date)\n \
    \        (not (regexp-match? #rx\"^[0-9]{2}/[0-9]{2}/[0-9]{4}$\" date))))\n  (define\
    \ (valid-date-parts date)\n    (let ([date-parts (string-split date \"-\")])\n\
    \      (and (valid-month (string->number (list-ref date-parts 0)))\n         \
    \  (valid-day (string->number (list-ref date-parts 0))\n                     \
    \ (string->number (list-ref date-parts 1)))\n           (valid-year (string->number\
    \ (list-ref date-parts 2))))))\n  (and (not (string=? date \"\"))\n       (valid-date-format\
    \ date)\n       (valid-date-parts date)))\n", "  (define (valid-month month)\n\
    \    (and (integer? month)\n         (and (>= month 1) (<= month 12))))\n  (define\
    \ (valid-day month day)\n    (and (integer? day)\n         (and (>= day 1)\n \
    \             (cond [(or (= month 1) (= month 3) (= month 5) (= month 7) (= month\
    \ 8) (= month 10) (= month 12)) (<= day 31)]\n                    [(or (= month\
    \ 4) (= month 6) (= month 9) (= month 11)) (<= day 30)]\n                    [(=\
    \ month 2) (<= day 29)]))))\n  (define (valid-year year)\n    (and (integer? year)\n\
    \         (and (>= year 1) (<= year 9999))))\n  (define (valid-date-string date-string)\n\
    \    (and (string? date-string)\n         (and (not (empty? date-string))\n  \
    \            (regexp-match #rx\"^[0-9]{2}-[0-9]{2}-[0-9]{4}$\" date-string))))\n\
    \  (define (valid-date-list date-list)\n    (and (list? date-list)\n         (and\
    \ (equal? (length date-list) 3)\n              (and (valid-month (car date-list))\n\
    \                   (and (valid-day (car date-list) (cadr date-list))\n      \
    \                  (valid-year (caddr date-list)))))))\n  (and (valid-date-string\
    \ date)\n       (valid-date-list (string-&gt;list date))))\n</code>\n", "  (define\
    \ (valid-month month)\n    (and (not (empty? month))\n         (and (&lt;= 1 (string-&gt;number\
    \ month))\n              (&lt;= (string-&gt;number month) 12))))\n  (define (valid-day\
    \ day)\n    (and (not (empty? day))\n         (and (&lt;= 1 (string-&gt;number\
    \ day))\n              (&lt;= (string-&gt;number day) 31))))\n  (define (valid-year\
    \ year)\n    (and (not (empty? year))\n         (and (&lt;= 1 (string-&gt;number\
    \ year))\n              (&lt;= (string-&gt;number year) 9999))))\n  (define (valid-date-format\
    \ date)\n    (regexp-match? #rx\"^[0-9]{2}-[0-9]{2}-[0-9]{4}$\" date))\n  (and\
    \ (valid-date-format date)\n       (and (valid-month (substring date 0 2))\n \
    \           (and (valid-day (substring date 3 5))\n                 (valid-year\
    \ (substring date 6 10))))))\n</code>\n", "  (define (valid-month month)\n   \
    \ (and (integer? month)\n         (and (>= month 1) (<= month 12))))\n  (define\
    \ (valid-day month day)\n    (and (integer? day)\n         (and (>= day 1)\n \
    \             (cond ((member month '(1 3 5 7 8 10 12)) (<= day 31))\n        \
    \            ((member month '(4 6 9 11)) (<= day 30))\n                    ((=\
    \ month 2) (<= day 29))))))\n  (define (valid-year year)\n    (and (integer? year)\n\
    \         (>= year 0)))\n  (define (valid-date-format date)\n    (regexp-match?\
    \ #rx\"^[0-9]{2}-[0-9]{2}-[0-9]{4}$\" date))\n  (define (parse-date date)\n  \
    \  (define (parse-date-aux date)\n      (define (parse-month date)\n        (string->number\
    \ (substring date 0 2)))\n      (define (parse-day date)\n        (string->number\
    \ (substring date 3 5)))\n      (define (parse-year date)\n        (string->number\
    \ (substring date 6 10)))\n      (values (parse-month date)\n              (parse-day\
    \ date)\n              (parse-year date)))\n    (if (valid-date-format date)\n\
    \        (parse-date-aux date)\n        (error \"Invalid date format\")))\n  (define\
    \ (valid-date? date)\n    (define (valid-date?-aux date)\n      (define (valid-date?-aux-aux\
    \ month day year)\n        (and (valid-month month)\n             (valid-day month\
    \ day)\n             (valid-year year)))\n      (apply valid-date?-aux-aux (parse-date\
    \ date)))\n    (if (string? date)\n        (valid-date?-aux date)\n        (error\
    \ \"Invalid date\")))\n  (valid-date? date))", "  (cond\n    [(empty? date) false]\n\
    \    [(regexp-match #rx\"^[0-9]{2}-[0-9]{2}-[0-9]{4}$\" date)\n     (let* ([month\
    \ (string->number (regexp-match #rx\"^[0-9]{2}\" date))]\n            [day (string->number\
    \ (regexp-match #rx\"-[0-9]{2}-\" date))]\n            [year (string->number (regexp-match\
    \ #rx\"[0-9]{4}$\" date))])\n       (and (and (<= 1 month 12) (<= 1 day 31))\n\
    \            (or (and (member month '(1 3 5 7 8 10 12)) (<= day 31))\n       \
    \         (and (member month '(4 6 9 11)) (<= day 30))\n                (and (=\
    \ month 2) (<= day 29)))))\n     ]\n    [else false]))\n", "  (define (valid-month\
    \ month)\n    (and (not (empty? month))\n         (not (empty? (string-&gt;number\
    \ month)))\n         (&lt;= 1 (string-&gt;number month) 12)))\n  (define (valid-day\
    \ day)\n    (and (not (empty? day))\n         (not (empty? (string-&gt;number\
    \ day)))\n         (&lt;= 1 (string-&gt;number day) 31)))\n  (define (valid-year\
    \ year)\n    (and (not (empty? year))\n         (not (empty? (string-&gt;number\
    \ year)))\n         (&lt;= 1 (string-&gt;number year) 9999)))\n  (define (valid-date-format\
    \ date)\n    (regexp-match? #rx\"^[0-9]{2}-[0-9]{2}-[0-9]{4}$\" date))\n  (define\
    \ (valid-date-parts date)\n    (define (valid-day-for-month month day)\n     \
    \ (cond\n        [(or (= month 1) (= month 3) (= month 5) (= month 7) (= month\
    \ 8) (= month 10) (= month 12))\n         (&lt;= 1 day 31)]\n        [(or (= month\
    \ 4) (= month 6) (= month 9) (= month 11))\n         (&lt;= 1 day 30)]\n     \
    \   [(= month 2)\n         (&lt;= 1 day 29)]))\n    (define (valid-date-parts-helper\
    \ date)\n      (define (valid-date-parts-helper-helper date)\n        (define\
    \ (valid-date-parts-helper-helper-helper date)\n          (define (valid-date-parts-helper-helper-helper-helper\
    \ date)\n            (define (valid-date-parts-helper-helper-helper-helper-helper\
    \ date)\n              (define (valid-date-parts-helper-helper-helper-helper-helper-helper\
    \ date)\n                (define (valid-date-parts-helper-helper-helper-helper-helper-helper-helper\
    \ date)\n                  (define", "  (define (valid-month month)\n    (and\
    \ (not (empty? month))\n         (and (<= 1 (string->number month))\n        \
    \      (<= (string->number month) 12))))\n  (define (valid-day month day)\n  \
    \  (and (not (empty? day))\n         (and (<= 1 (string->number day))\n      \
    \        (<= (string->number day)\n                  (cond\n                 \
    \   [(equal? month \"01\") 31]\n                    [(equal? month \"03\") 31]\n\
    \                    [(equal? month \"05\") 31]\n                    [(equal?\
    \ month \"07\") 31]\n                    [(equal? month \"08\") 31]\n        \
    \            [(equal? month \"10\") 31]\n                    [(equal? month \"\
    12\") 31]\n                    [(equal? month \"04\") 30]\n                  \
    \  [(equal? month \"06\") 30]\n                    [(equal? month \"09\") 30]\n\
    \                    [(equal? month \"11\") 30]\n                    [(equal?\
    \ month \"02\") 29]\n                    [else 0]))))))\n  (define (valid-year\
    \ year)\n    (and (not (empty? year))\n         (and (<= 1 (string->number year))\n\
    \              (<= (string->number year) 9999))))\n  (define (valid-date-format\
    \ date)\n    (and (not (empty? date))\n         (and (equal? (substring date 2\
    \ 3) \"-\")\n              (equal? (substring date 5 6) \"-\"))))\n  (define (valid-date-parts\
    \ date)\n    (and (valid-month (substring date 0 2))\n         (valid-day (substring\
    \ date 0 2) (substring date 3 5))\n         (valid-year (substring date 6 10))))\n\
    \  (and (valid-date-format date)\n       (valid-date-parts date)))\n", "  (define\
    \ (valid-month month)\n    (and (&gt;= month 1) (&lt;= month 12)))\n  (define\
    \ (valid-day month day)\n    (cond\n      [(or (= month 1) (= month 3) (= month\
    \ 5) (= month 7) (= month 8) (= month 10) (= month 12))\n       (and (&gt;= day\
    \ 1) (&lt;= day 31))]\n      [(or (= month 4) (= month 6) (= month 9) (= month\
    \ 11))\n       (and (&gt;= day 1) (&lt;= day 30))]\n      [(= month 2)\n     \
    \  (and (&gt;= day 1) (&lt;= day 29))]))\n  (define (valid-year year)\n    (and\
    \ (&gt;= year 1) (&lt;= year 9999)))\n  (define (valid-format date)\n    (regexp-match?\
    \ #rx\"^[0-9]{2}-[0-9]{2}-[0-9]{4}$\" date))\n  (define (split-date date)\n  \
    \  (map string-&gt;number (regexp-split #rx\"-\" date)))\n  (define (valid-date-p\
    \ date)\n    (let ([date-list (split-date date)])\n      (and (valid-format date)\n\
    \           (valid-month (list-ref date-list 0))\n           (valid-day (list-ref\
    \ date-list 0) (list-ref date-list 1))\n           (valid-year (list-ref date-list\
    \ 2)))))\n  (valid-date-p date))\n", "  (define (valid-date-helper date)\n   \
    \ (define (valid-date-helper-helper date)\n      (define (valid-date-helper-helper-helper\
    \ date)\n        (define (valid-date-helper-helper-helper-helper date)\n     \
    \     (define (valid-date-helper-helper-helper-helper-helper date)\n         \
    \   (define (valid-date-helper-helper-helper-helper-helper-helper date)\n    \
    \          (define (valid-date-helper-helper-helper-helper-helper-helper-helper\
    \ date)\n                (define (valid-date-helper-helper-helper-helper-helper-helper-helper-helper\
    \ date)\n                  (define (valid-date-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ date)\n                    (define (valid-date-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ date)\n                      (define (valid-date-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ date)\n                        (define (valid-date-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ date)\n                          (define (valid-date-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ date)\n                            (define (valid-date-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ date)\n                              (define (valid-date-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ date", "  (cond\n    [(empty? date) false]\n    [(regexp-match? #rx\"^(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])-[0-9]{4}$\"\
    \ date)\n     (let ([month (string->number (regexp-match #rx\"^(0[1-9]|1[0-2])\"\
    \ date))]\n           [day (string->number (regexp-match #rx\"^(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])\"\
    \ date))])\n       (cond\n         [(and (= month 1) (= day 31)) true]\n     \
    \    [(and (= month 3) (= day 31)) true]\n         [(and (= month 5) (= day 31))\
    \ true]\n         [(and (= month 7) (= day 31)) true]\n         [(and (= month\
    \ 8) (= day 31)) true]\n         [(and (= month 10) (= day 31)) true]\n      \
    \   [(and (= month 12) (= day 31)) true]\n         [(and (= month 4) (= day 30))\
    \ true]\n         [(and (= month 6) (= day 30)) true]\n         [(and (= month\
    \ 9) (= day 30)) true]\n         [(and (= month 11) (= day 30)) true]\n      \
    \   [(and (= month 2) (= day 29)) true]\n         [else false]))))\n    [else\
    \ false]))\n", "  (define (valid-month month)\n    (and (integer? month)\n   \
    \      (and (<= 1 month) (<= month 12))))\n  (define (valid-day month day)\n \
    \   (and (integer? day)\n         (and (<= 1 day)\n              (cond ((or (=\
    \ month 1) (= month 3) (= month 5) (= month 7) (= month 8) (= month 10) (= month\
    \ 12))\n                     (<= day 31))\n                    ((or (= month 4)\
    \ (= month 6) (= month 9) (= month 11))\n                     (<= day 30))\n \
    \                   ((= month 2)\n                     (<= day 29))))))\n  (define\
    \ (valid-year year)\n    (and (integer? year)\n         (<= year 9999)))\n  (define\
    \ (valid-date-format date)\n    (and (regexp-match? #rx\"^[0-9]{2}-[0-9]{2}-[0-9]{4}$\"\
    \ date)\n         (let* ([date-list (string-split date #\\-)])\n           (and\
    \ (valid-month (string->number (list-ref date-list 0)))\n                (valid-day\
    \ (string->number (list-ref date-list 0))\n                           (string->number\
    \ (list-ref date-list 1)))\n                (valid-year (string->number (list-ref\
    \ date-list 2)))))))\n  (and (not (string=? date \"\"))\n       (valid-date-format\
    \ date)))", "  (define (valid-month month)\n    (and (not (empty? month))\n  \
    \       (not (empty? (string-trim-both month)))\n         (not (string=? month\
    \ \"0\"))\n         (not (string=? month \"00\"))\n         (not (string=? month\
    \ \"000\"))\n         (not (string=? month \"0000\"))\n         (not (string=?\
    \ month \"00000\"))\n         (not (string=? month \"000000\"))\n         (not\
    \ (string=? month \"0000000\"))\n         (not (string=? month \"00000000\"))\n\
    \         (not (string=? month \"000000000\"))\n         (not (string=? month\
    \ \"0000000000\"))\n         (not (string=? month \"00000000000\"))\n        \
    \ (not (string=? month \"000000000000\"))\n         (not (string=? month \"0000000000000\"\
    ))\n         (not (string=? month \"00000000000000\"))\n         (not (string=?\
    \ month \"000000000000000\"))\n         (not (string=? month \"0000000000000000\"\
    ))\n         (not (string=? month \"00000000000000000\"))\n         (not (string=?\
    \ month \"000000000000000000\"))\n         (not (string=? month \"0000000000000000000\"\
    ))\n         (not (string=? month \"00000000000000000000\"))\n         (not (string=?\
    \ month \"000000000000000000000\"))\n         (not (string=? month \"0000000000000000000000\"\
    ))\n         (not (string=? month \"00000000000000000000000\"))\n         (not\
    \ (string=? month \"000000000000000000000000\"))\n         (not (string=? month\
    \ \"0000000000000000000000000\"))\n         (not (string=? month \"00000000000000000000000000\"\
    ))\n         (not (string=? month \"000000000000000000000000000\"))\n        \
    \ (not (string=? month \"0000000000000000000000000000\"))\n         (not (string=?\
    \ month \"00000000000000000000000000000\"))\n         (not (string=? month \"\
    000000000000000000000000000000\"))\n         (not (string=? month \"0000000000000000000000000000000\"\
    ))\n         (not (string=? month \"00000000000000000000000000000000\"))\n   \
    \      (not (string=? month \"000000000000000000000000000000000\"))\n        \
    \ (not (string=? month \"0000000000000000000000000000000000\"))\n         (not\
    \ (string=? month \"00000000000000000000000000000000000\"))\n         (not (string=?\
    \ month \"000000000000000000000000000000000000\"))\n         (", "  (define (valid-month\
    \ month)\n    (and (>= month 1) (<= month 12)))\n  (define (valid-day month day)\n\
    \    (and (>= day 1)\n         (<= day\n             (cond\n               [(or\
    \ (= month 1) (= month 3) (= month 5) (= month 7) (= month 8) (= month 10) (=\
    \ month 12)) 31]\n               [(or (= month 4) (= month 6) (= month 9) (= month\
    \ 11)) 30]\n               [(= month 2) 29]))))\n  (define (valid-year year)\n\
    \    (and (>= year 1) (<= year 9999)))\n  (define (valid-format date)\n    (regexp-match?\
    \ #rx\"^[0-9]{2}-[0-9]{2}-[0-9]{4}$\" date))\n  (and (not (string=? date \"\"\
    ))\n       (valid-format date)\n       (let* ([date-list (string-split date #\\\
    -)]\n              [month (string->number (list-ref date-list 0))]\n         \
    \     [day (string->number (list-ref date-list 1))]\n              [year (string->number\
    \ (list-ref date-list 2))])\n         (and (valid-month month)\n             \
    \ (valid-day month day)\n              (valid-year year)))))\n", "  (define (valid-month\
    \ month)\n    (and (not (string=? month \"\"))\n         (and (not (string=? month\
    \ \"0\"))\n              (and (not (string=? month \"00\"))\n                \
    \   (and (not (string=? month \"000\"))\n                        (and (not (string=?\
    \ month \"0000\"))\n                             (and (not (string=? month \"\
    00000\"))\n                                  (and (not (string=? month \"000000\"\
    ))\n                                       (and (not (string=? month \"0000000\"\
    ))\n                                            (and (not (string=? month \"00000000\"\
    ))\n                                                 (and (not (string=? month\
    \ \"000000000\"))\n                                                      (and\
    \ (not (string=? month \"0000000000\"))\n                                    \
    \                       (and (not (string=? month \"00000000000\"))\n        \
    \                                                        (and (not (string=? month\
    \ \"000000000000\"))\n                                                       \
    \              (and (not (string=? month \"0000000000000\"))\n               \
    \                                                           (and (not (string=?\
    \ month \"00000000000000\"))\n                                               \
    \                                (and (not (string=? month \"000000000000000\"\
    ))\n                                                                         \
    \           (and (not (string=? month \"0000000000000000\"))\n               \
    \                                                                          (and\
    \ (not (string=? month \"00000000000000000\"))\n                             \
    \                                                                 (and (not (string=?\
    \ month \"000000000000000000\"))\n                                           \
    \                                                        (and (not (string=? month\
    \ \"0000000000000000000\"))\n                                                \
    \                                                        (and (not (string=? month\
    \ \"00000000000000000000\"))\n                                               \
    \                                                              (and (not (string=?\
    \ month \"000000000000000000000\"))\n                                        \
    \                                                                          (and\
    \ (not (string=? month \"0000000000000000000000\"))\n                        \
    \                                                                            \
    \                   (and (not (string=? month \"00000000000000000000000\"))\n\
    \                                                                            \
    \                                                (and (not (string=? month \"\
    000000000000000000000000\"))\n                                               \
    \                                                                            \
    \      (and (not (string=? month \"0000000000000000000000000\"))\n           \
    \                                                                            \
    \                                               (and (not (string=? month \"00000000000000000000000000\"\
    ))\n                                                                         \
    \                                                                  (and (not (string=",
  "  (define (valid-month month)\n    (and (not (empty? month))\n         (not (string=?\
    \ month \"0\"))\n         (not (string=? month \"00\"))\n         (not (string=?\
    \ month \"000\"))\n         (not (string=? month \"0000\"))\n         (not (string=?\
    \ month \"00000\"))\n         (not (string=? month \"000000\"))\n         (not\
    \ (string=? month \"0000000\"))\n         (not (string=? month \"00000000\"))\n\
    \         (not (string=? month \"000000000\"))\n         (not (string=? month\
    \ \"0000000000\"))\n         (not (string=? month \"00000000000\"))\n        \
    \ (not (string=? month \"000000000000\"))\n         (not (string=? month \"0000000000000\"\
    ))\n         (not (string=? month \"00000000000000\"))\n         (not (string=?\
    \ month \"000000000000000\"))\n         (not (string=? month \"0000000000000000\"\
    ))\n         (not (string=? month \"00000000000000000\"))\n         (not (string=?\
    \ month \"000000000000000000\"))\n         (not (string=? month \"0000000000000000000\"\
    ))\n         (not (string=? month \"00000000000000000000\"))\n         (not (string=?\
    \ month \"000000000000000000000\"))\n         (not (string=? month \"0000000000000000000000\"\
    ))\n         (not (string=? month \"00000000000000000000000\"))\n         (not\
    \ (string=? month \"000000000000000000000000\"))\n         (not (string=? month\
    \ \"0000000000000000000000000\"))\n         (not (string=? month \"00000000000000000000000000\"\
    ))\n         (not (string=? month \"000000000000000000000000000\"))\n        \
    \ (not (string=? month \"0000000000000000000000000000\"))\n         (not (string=?\
    \ month \"00000000000000000000000000000\"))\n         (not (string=? month \"\
    000000000000000000000000000000\"))\n         (not (string=? month \"0000000000000000000000000000000\"\
    ))\n         (not (string=? month \"00000000000000000000000000000000\"))\n   \
    \      (not (string=? month \"000000000000000000000000000000000\"))\n        \
    \ (not (string=? month \"0000000000000000000000000000000000\"))\n         (not\
    \ (string=? month \"00000000000000000000000000000000000\"))\n         (not (string=?\
    \ month \"000000000000000000000000000000000000\"))\n         (not (string=? month\
    \ \"0000000000000000000000000000000000000\"))\n         (not (", "  (define (valid-date-helper\
    \ date)\n    (define (valid-date-helper-helper date)\n      (define (valid-date-helper-helper-helper\
    \ date)\n        (define (valid-date-helper-helper-helper-helper date)\n     \
    \     (define (valid-date-helper-helper-helper-helper-helper date)\n         \
    \   (define (valid-date-helper-helper-helper-helper-helper-helper date)\n    \
    \          (define (valid-date-helper-helper-helper-helper-helper-helper-helper\
    \ date)\n                (define (valid-date-helper-helper-helper-helper-helper-helper-helper-helper\
    \ date)\n                  (define (valid-date-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ date)\n                    (define (valid-date-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ date)\n                      (define (valid-date-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ date)\n                        (define (valid-date-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ date)\n                          (define (valid-date-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ date)\n                            (define (valid-date-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ date)\n                              (define (valid-date-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ date", "  (define (valid-month month)\n    (and (>= month 1) (<= month 12)))\n\
    \  (define (valid-day month day)\n    (and (>= day 1)\n         (<= day (cond\
    \ [(or (= month 1) (= month 3) (= month 5) (= month 7) (= month 8) (= month 10)\
    \ (= month 12)) 31]\n                       [(or (= month 4) (= month 6) (= month\
    \ 9) (= month 11)) 30]\n                       [(= month 2) 29]\n            \
    \           [else 0]))))\n  (define (valid-year year)\n    (and (>= year 0) (<=\
    \ year 9999)))\n  (define (valid-date-format date)\n    (and (regexp-match? #rx\"\
    ^[0-9]{2}-[0-9]{2}-[0-9]{4}$\" date)\n         (not (regexp-match? #rx\"^[0-9]{2}/[0-9]{2}/[0-9]{4}$\"\
    \ date))))\n  (define (valid-date-parts date)\n    (let* ([date-parts (string-split\
    \ date #\\-)])\n      (and (valid-month (string->number (list-ref date-parts 0)))\n\
    \           (valid-day (string->number (list-ref date-parts 0)) (string->number\
    \ (list-ref date-parts 1)))\n           (valid-year (string->number (list-ref\
    \ date-parts 2))))))\n  (and (not (string=? date \"\"))\n       (valid-date-format\
    \ date)\n       (valid-date-parts date)))\n", "  (define (valid-month month)\n\
    \    (and (not (empty? month))\n         (not (negative? (string->number month)))\n\
    \         (not (> (string->number month) 12))))\n  (define (valid-day day)\n \
    \   (and (not (empty? day))\n         (not (negative? (string->number day)))\n\
    \         (not (> (string->number day) 31))))\n  (define (valid-year year)\n \
    \   (and (not (empty? year))\n         (not (negative? (string->number year)))\n\
    \         (not (> (string->number year) 9999))))\n  (define (valid-date-format\
    \ date)\n    (and (not (empty? date))\n         (regexp-match? #rx\"^[0-9]{2}-[0-9]{2}-[0-9]{4}$\"\
    \ date)))\n  (define (valid-month-day-format month day)\n    (and (valid-month\
    \ month)\n         (valid-day day)))\n  (define (valid-month-day-year-format month\
    \ day year)\n    (and (valid-month-day-format month day)\n         (valid-year\
    \ year)))\n  (define (valid-date-month-day-year-format date month day year)\n\
    \    (and (valid-date-format date)\n         (valid-month-day-year-format month\
    \ day year)))\n  (define (valid-date-month-day-year-format-split date)\n    (valid-date-month-day-year-format\n\
    \     (substring date 0 2)\n     (substring date 3 5)\n     (substring date 6\
    \ 10)))\n  (valid-date-month-day-year-format-split date))\n", "  (define (is-valid-month\
    \ month)\n    (and (integer? month)\n         (and (>= month 1) (<= month 12))))\n\
    \  (define (is-valid-day month day)\n    (and (integer? day)\n         (and (>=\
    \ day 1)\n              (cond\n                [(or (= month 1) (= month 3) (=\
    \ month 5) (= month 7) (= month 8) (= month 10) (= month 12)) (<= day 31)]\n \
    \               [(or (= month 4) (= month 6) (= month 9) (= month 11)) (<= day\
    \ 30)]\n                [(= month 2) (<= day 29)]))))\n  (define (is-valid-year\
    \ year)\n    (and (integer? year)\n         (and (>= year 0) (<= year 9999))))\n\
    \  (define (is-valid-date date)\n    (and (string? date)\n         (and (regexp-match\
    \ #rx\"^[0-9]{2}-[0-9]{2}-[0-9]{4}$\" date)\n              (let* ([date-list (string-split\
    \ date #\\-)]\n                     [month (string->number (list-ref date-list\
    \ 0))]\n                     [day (string->number (list-ref date-list 1))]\n \
    \                    [year (string->number (list-ref date-list 2))])\n       \
    \         (and (is-valid-month month)\n                     (is-valid-day month\
    \ day)\n                     (is-valid-year year))))))\n  (is-valid-date date))\n",
  "  (define (valid-month month)\n    (and (<= 1 month) (<= month 12)))\n  (define\
    \ (valid-day month day)\n    (and (<= 1 day)\n         (cond\n           [(or\
    \ (= 1 month) (= 3 month) (= 5 month) (= 7 month) (= 8 month) (= 10 month) (=\
    \ 12 month))\n            (<= day 31)]\n           [(or (= 4 month) (= 6 month)\
    \ (= 9 month) (= 11 month))\n            (<= day 30)]\n           [(= 2 month)\n\
    \            (<= day 29)])))\n  (define (valid-year year)\n    (and (<= 1 year)\
    \ (<= year 9999)))\n  (define (valid-date-format date)\n    (regexp-match? #rx\"\
    ^[0-9]{2}-[0-9]{2}-[0-9]{4}$\" date))\n  (and (not (empty? date))\n       (valid-date-format\
    \ date)\n       (let* ([date-parts (string-split date #\\-)]\n              [month\
    \ (string->number (list-ref date-parts 0))]\n              [day (string->number\
    \ (list-ref date-parts 1))]\n              [year (string->number (list-ref date-parts\
    \ 2))])\n         (and (valid-month month)\n              (valid-day month day)\n\
    \              (valid-year year)))))\n", "  (define (valid-month month)\n    (and\
    \ (not (string=? month \"\"))\n         (and (not (string=? month \"00\"))\n \
    \             (and (not (string=? month \"13\"))\n                   (and (not\
    \ (string=? month \"14\"))\n                        (and (not (string=? month\
    \ \"15\"))\n                             (and (not (string=? month \"16\"))\n\
    \                                  (and (not (string=? month \"17\"))\n      \
    \                                 (and (not (string=? month \"18\"))\n       \
    \                                     (and (not (string=? month \"19\"))\n   \
    \                                              (and (not (string=? month \"20\"\
    ))\n                                                      (and (not (string=?\
    \ month \"21\"))\n                                                           (and\
    \ (not (string=? month \"22\"))\n                                            \
    \                    (and (not (string=? month \"23\"))\n                    \
    \                                                 (and (not (string=? month \"\
    24\"))\n                                                                     \
    \     (and (not (string=? month \"25\"))\n                                   \
    \                                            (and (not (string=? month \"26\"\
    ))\n                                                                         \
    \           (and (not (string=? month \"27\"))\n                             \
    \                                                            (and (not (string=?\
    \ month \"28\"))\n                                                           \
    \                                   (and (not (string=? month \"29\"))\n     \
    \                                                                            \
    \                  (and (not (string=? month \"30\"))\n                      \
    \                                                                            \
    \      (and (not (string=? month \"31\"))\n                                  \
    \                                                                           (and\
    \ (not (string=? month \"32\"))\n                                            \
    \                                                                      (and (not\
    \ (string=? month \"33\"))\n                                                 \
    \                                                                      (and (not\
    \ (string=? month \"34\"))\n                                                 \
    \                                                                           (and\
    \ (not (string=? month \"35\"))\n                                            \
    \                                                                            \
    \         (and (not (string=? month \"36\"))\n                               \
    \                                                                            \
    \                           (and (not (string=? month \"37\"))\n             \
    \                                                                            \
    \                                                  (and (not (string=? month \"\
    38\"))\n                                                                     \
    \                                                                           (and\
    \ (not (", "  (define (valid-month month)\n    (and (>= month 1) (<= month 12)))\n\
    \  (define (valid-day month day)\n    (and (>= day 1)\n         (<= day (cond\n\
    \                  [(or (= month 1) (= month 3) (= month 5) (= month 7) (= month\
    \ 8) (= month 10) (= month 12)) 31]\n                  [(or (= month 4) (= month\
    \ 6) (= month 9) (= month 11)) 30]\n                  [(= month 2) 29]))))\n \
    \ (define (valid-year year)\n    (and (>= year 0) (<= year 9999)))\n  (define\
    \ (valid-format date)\n    (regexp-match? #rx\"^[0-9]{2}-[0-9]{2}-[0-9]{4}$\"\
    \ date))\n  (define (valid-date-parts date)\n    (let* ([date-parts (string-split\
    \ date #\"-\")]\n           [month (string->number (list-ref date-parts 0))]\n\
    \           [day (string->number (list-ref date-parts 1))]\n           [year (string->number\
    \ (list-ref date-parts 2))])\n      (and (valid-month month)\n           (valid-day\
    \ month day)\n           (valid-year year))))\n  (and (not (string=? date \"\"\
    ))\n       (valid-format date)\n       (valid-date-parts date)))\n", "  (define\
    \ (valid-month month)\n    (and (not (empty? month))\n         (and (not (empty?\
    \ (rest month)))\n              (and (not (empty? (rest (rest month))))\n    \
    \               (and (char=? (first month) #\\0)\n                        (and\
    \ (char=? (first (rest month)) #\\1)\n                             (and (char=?\
    \ (first (rest (rest month))) #\\2)\n                                  (and (char=?\
    \ (first (rest (rest (rest month)))) #\\-)))))))))\n  (define (valid-day day)\n\
    \    (and (not (empty? day))\n         (and (not (empty? (rest day)))\n      \
    \        (and (not (empty? (rest (rest day))))\n                   (and (char=?\
    \ (first day) #\\0)\n                        (and (char=? (first (rest day)) #\\\
    3)\n                             (and (char=? (first (rest (rest day))) #\\1)\n\
    \                                  (and (char=? (first (rest (rest (rest day))))\
    \ #\\-)))))))))\n  (define (valid-year year)\n    (and (not (empty? year))\n \
    \        (and (not (empty? (rest year)))\n              (and (not (empty? (rest\
    \ (rest year))))\n                   (and (not (empty? (rest (rest (rest year)))))\n\
    \                        (and (not (empty? (rest (rest (rest (rest year))))))\n\
    \                             (and (not (empty? (rest (rest (rest (rest (rest\
    \ year)))))))\n                                  (and (not (empty? (rest (rest\
    \ (rest (rest (rest (rest year))))))))\n                                     \
    \  (and (not (empty? (rest (rest (rest (rest (rest (rest (rest year)))))))))\n\
    \                                            (and (not (empty? (rest (rest (rest\
    \ (rest (rest (rest (rest (rest year))))))))))\n                             \
    \                    (and (not (empty? (rest (rest (rest (rest (rest (rest (rest\
    \ (rest (rest year)))))))))))\n                                              \
    \        (and (not (empty? (rest (rest (rest (rest (rest (rest (rest (rest (rest",
  "  (if (not (string? date))\n      false\n      (let* ([date-parts (regexp-match\
    \ #rx\"^(\\\\d{2})-(\\\\d{2})-(\\\\d{4})$\" date)]\n             [month (string->number\
    \ (vector-ref date-parts 1))]\n             [day (string->number (vector-ref date-parts\
    \ 2))]\n             [year (string->number (vector-ref date-parts 3))])\n    \
    \    (and (not (string=? \"\" date))\n             (or (and (= month 1) (= day\
    \ 31))\n                 (and (= month 3) (= day 31))\n                 (and (=\
    \ month 5) (= day 31))\n                 (and (= month 7) (= day 31))\n      \
    \           (and (= month 8) (= day 31))\n                 (and (= month 10) (=\
    \ day 31))\n                 (and (= month 12) (= day 31))\n                 (and\
    \ (= month 4) (= day 30))\n                 (and (= month 6) (= day 30))\n   \
    \              (and (= month 9) (= day 30))\n                 (and (= month 11)\
    \ (= day 30))\n                 (and (= month 2) (= day 29)))\n             (<=\
    \ 1 month 12)\n             (<= 1 day 31)\n             (<= 1 year 9999)))))\n",
  "  (define (valid-month month)\n    (and (not (empty? month))\n         (not (empty?\
    \ (string-trim-both month \"0\")))\n         (and (<= 1 (string->number month))\n\
    \              (<= (string->number month) 12))))\n  (define (valid-day day)\n\
    \    (and (not (empty? day))\n         (not (empty? (string-trim-both day \"0\"\
    )))\n         (and (<= 1 (string->number day))\n              (<= (string->number\
    \ day) 31))))\n  (define (valid-year year)\n    (and (not (empty? year))\n   \
    \      (not (empty? (string-trim-both year \"0\")))\n         (and (<= 1 (string->number\
    \ year))\n              (<= (string->number year) 9999))))\n  (define (valid-date-format\
    \ date)\n    (regexp-match? #rx\"^[0-9]{2}-[0-9]{2}-[0-9]{4}$\" date))\n  (define\
    \ (valid-day-for-month day month)\n    (cond\n      [(and (equal? month \"01\"\
    )\n            (and (<= 1 (string->number day))\n                 (<= (string->number\
    \ day) 31)))\n       #t]\n      [(and (equal? month \"02\")\n            (and\
    \ (<= 1 (string->number day))\n                 (<= (string->number day) 29)))\n\
    \       #t]\n      [(and (equal? month \"03\")\n            (and (<= 1 (string->number\
    \ day))\n                 (<= (string->number day) 31)))\n       #t]\n      [(and\
    \ (equal? month \"04\")\n            (and (<= 1 (string->number day))\n      \
    \           (<= (string->number day) 30)))\n       #t]\n      [(and (equal? month\
    \ \"05\")\n            (and (<= 1 (string->number day))\n                 (<=\
    \ (string->number day) 31)))\n       #t]\n      [(and (equal? month \"06\")\n\
    \            (and (<= 1 (string->number day))\n                 (<= (string->number\
    \ day) 30)))\n       #", "  (define (valid-month month)\n    (and (integer? month)\n\
    \         (and (>= month 1) (<= month 12))))\n  (define (valid-day month day)\n\
    \    (and (integer? day)\n         (and (>= day 1)\n              (cond\n    \
    \            [(or (= month 1) (= month 3) (= month 5) (= month 7) (= month 8)\
    \ (= month 10) (= month 12)) (<= day 31)]\n                [(or (= month 4) (=\
    \ month 6) (= month 9) (= month 11)) (<= day 30)]\n                [(= month 2)\
    \ (<= day 29)]))))\n  (define (valid-year year)\n    (and (integer? year)\n  \
    \       (and (>= year 0) (<= year 9999))))\n  (define (valid-date-format date)\n\
    \    (and (regexp-match? #rx\"^[0-9]{2}-[0-9]{2}-[0-9]{4}$\" date)\n         (let*\
    \ ([date-parts (string-split date #\\-)])\n           (and (valid-month (string->number\
    \ (list-ref date-parts 0)))\n                (valid-day (string->number (list-ref\
    \ date-parts 0)) (string->number (list-ref date-parts 1)))\n                (valid-year\
    \ (string->number (list-ref date-parts 2)))))))\n  (valid-date-format date))\n",
  "  (define (valid-date-regexp date)\n    (regexp-match? #rx\"^(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])-[0-9]{4}$\"\
    \ date))\n  (define (valid-date-days date)\n    (define (valid-date-days-regexp\
    \ date)\n      (regexp-match? #rx\"^(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])-[0-9]{4}$\"\
    \ date))\n    (define (valid-date-days-month date)\n      (define (valid-date-days-month-regexp\
    \ date)\n        (regexp-match? #rx\"^(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])-[0-9]{4}$\"\
    \ date))\n      (define (valid-date-days-month-month date)\n        (define (valid-date-days-month-month-regexp\
    \ date)\n          (regexp-match? #rx\"^(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])-[0-9]{4}$\"\
    \ date))\n        (define (valid-date-days-month-month-month date)\n         \
    \ (define (valid-date-days-month-month-month-regexp date)\n            (regexp-match?\
    \ #rx\"^(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])-[0-9]{4}$\" date))\n      \
    \    (define (valid-date-days-month-month-month-month date)\n            (define\
    \ (valid-date-days-month-month-month-month-regexp date)\n              (", " \
    \ (define (valid-month month)\n    (and (not (empty? month))\n         (and (&lt;=\
    \ 1 (string-&gt;number month))\n              (&lt;= (string-&gt;number month)\
    \ 12))))\n  (define (valid-day day)\n    (and (not (empty? day))\n         (and\
    \ (&lt;= 1 (string-&gt;number day))\n              (&lt;= (string-&gt;number day)\
    \ 31))))\n  (define (valid-year year)\n    (and (not (empty? year))\n        \
    \ (and (&lt;= 1 (string-&gt;number year))\n              (&lt;= (string-&gt;number\
    \ year) 9999))))\n  (define (valid-date-format date)\n    (regexp-match? #rx\"\
    ^[0-9]{2}-[0-9]{2}-[0-9]{4}$\" date))\n  (and (valid-date-format date)\n     \
    \  (and (valid-month (substring date 0 2))\n            (and (valid-day (substring\
    \ date 3 5))\n                 (valid-year (substring date 6 10))))))\n", "  (let*\
    \ ([date-parts (string-split date \"-\")]\n         [month (string->number (list-ref\
    \ date-parts 0))]\n         [day (string->number (list-ref date-parts 1))]\n \
    \        [year (string->number (list-ref date-parts 2))])\n    (and (not (empty?\
    \ date))\n         (and (or (<= 1 day) (<= day 31))\n              (or (<= 1 day)\
    \ (<= day 30))\n              (or (<= 1 day) (<= day 29)))\n         (and (<=\
    \ 1 month) (<= month 12))\n         (and (= (length date-parts) 3)))))\n", " \
    \ (define (valid-month month)\n    (and (integer? month)\n         (and (>= month\
    \ 1) (<= month 12))))\n  (define (valid-day day)\n    (and (integer? day)\n  \
    \       (and (>= day 1) (<= day 31))))\n  (define (valid-year year)\n    (and\
    \ (integer? year)\n         (and (>= year 0) (<= year 9999))))\n  (define (valid-date-format\
    \ date)\n    (regexp-match? #rx\"^[0-9]{2}-[0-9]{2}-[0-9]{4}$\" date))\n  (define\
    \ (valid-date-parts date)\n    (define (valid-date-part date)\n      (and (valid-month\
    \ (string->number (substring date 0 2)))\n           (valid-day (string->number\
    \ (substring date 3 5)))\n           (valid-year (string->number (substring date\
    \ 6 10)))))\n    (valid-date-part date))\n  (and (not (string=? date \"\"))\n\
    \       (valid-date-format date)\n       (valid-date-parts date)))\n", "  (define\
    \ (valid-date-helper date)\n    (define (valid-month month)\n      (and (integer?\
    \ month)\n           (and (<= 1 month) (<= month 12))))\n    (define (valid-day\
    \ day)\n      (and (integer? day)\n           (and (<= 1 day) (<= day 31))))\n\
    \    (define (valid-year year)\n      (and (integer? year)\n           (and (<=\
    \ 1900 year) (<= year 2100))))\n    (define (valid-date-format date)\n      (and\
    \ (string? date)\n           (regexp-match? #rx\"^[0-9]{2}-[0-9]{2}-[0-9]{4}$\"\
    \ date)))\n    (define (valid-date-components date)\n      (define (valid-month-day-pair\
    \ month day)\n        (cond\n          [(and (= month 1) (= day 31)) #t]\n   \
    \       [(and (= month 3) (= day 31)) #t]\n          [(and (= month 5) (= day\
    \ 31)) #t]\n          [(and (= month 7) (= day 31)) #t]\n          [(and (= month\
    \ 8) (= day 31)) #t]\n          [(and (= month 10) (= day 31)) #t]\n         \
    \ [(and (= month 12) (= day 31)) #t]\n          [(and (= month 4) (= day 30))\
    \ #t]\n          [(and (= month 6) (= day 30)) #t]\n          [(and (= month 9)\
    \ (= day 30)) #t]\n          [(and (= month 11) (= day 30)) #t]\n          [(and\
    \ (= month 2) (= day 29)) #t]\n          [else #f]))\n      (define (valid-leap-year\
    \ year)\n        (and (integer? year)\n             (and (<= 1900 year) (<= year\
    \ 2100))\n             (or (and (= (modulo year 4) 0)\n                      (not\
    \ (= (modulo year 100) 0)))\n                 (= (modulo year 400) 0))))\n   \
    \   (define (valid-month-day-year-pair month day year)\n        (cond\n      \
    \    [(and (= month 2) (= day 29)) (valid-leap-year year)]", "  (define (valid-month\
    \ month)\n    (and (not (empty? month))\n         (and (not (empty? (rest month)))\n\
    \              (not (empty? (rest (rest month))))\n              (not (empty?\
    \ (rest (rest (rest month))))))\n         (and (char=? (first month) #\\0)\n \
    \             (char=? (first (rest month)) #\\1)\n              (char=? (first\
    \ (rest (rest month))) #\\2)\n              (char=? (first (rest (rest (rest month))))\
    \ #\\3))\n         (and (char=? (first month) #\\0)\n              (char=? (first\
    \ (rest month)) #\\4)\n              (char=? (first (rest (rest month))) #\\5)\n\
    \              (char=? (first (rest (rest (rest month)))) #\\6))\n         (and\
    \ (char=? (first month) #\\0)\n              (char=? (first (rest month)) #\\\
    7)\n              (char=? (first (rest (rest month))) #\\8)\n              (char=?\
    \ (first (rest (rest (rest month)))) #\\9))\n         (and (char=? (first month)\
    \ #\\1)\n              (char=? (first (rest month)) #\\0)\n              (char=?\
    \ (first (rest (rest month))) #\\1)\n              (char=? (first (rest (rest\
    \ (rest month)))) #\\2))\n         (and (char=? (first month) #\\1)\n        \
    \      (char=? (first (rest month)) #\\1)\n              (char=? (first (rest\
    \ (rest month))) #\\2)\n              (char=? (first (rest (rest (rest month))))\
    \ #\\3))))\n  (define (valid-day day)\n    (and (not (empty? day))\n         (and\
    \ (not (empty? (rest day)))\n              (not (empty? (rest (rest day))))\n\
    \              (not (empty? (rest (rest (rest day))))))\n         (and (char=?\
    \ (first day) #\\0)\n              (char=? (first (rest day)) #\\1)\n        \
    \      (char", "  (define (valid-month month)\n    (and (integer? month)\n   \
    \      (and (<= 1 month) (<= month 12))))\n  (define (valid-day month day)\n \
    \   (and (integer? day)\n         (and (<= 1 day)\n              (cond\n     \
    \           [(equal? month 1) (<= day 31)]\n                [(equal? month 3)\
    \ (<= day 31)]\n                [(equal? month 5) (<= day 31)]\n             \
    \   [(equal? month 7) (<= day 31)]\n                [(equal? month 8) (<= day\
    \ 31)]\n                [(equal? month 10) (<= day 31)]\n                [(equal?\
    \ month 12) (<= day 31)]\n                [(equal? month 4) (<= day 30)]\n   \
    \             [(equal? month 6) (<= day 30)]\n                [(equal? month 9)\
    \ (<= day 30)]\n                [(equal? month 11) (<= day 30)]\n            \
    \    [(equal? month 2) (<= day 29)]))))\n  (define (valid-year year)\n    (and\
    \ (integer? year)\n         (and (<= 1 year) (<= year 9999))))\n  (define (valid-date-format\
    \ date)\n    (and (string? date)\n         (regexp-match? #rx\"^[0-9]{2}-[0-9]{2}-[0-9]{4}$\"\
    \ date)))\n  (define (valid-date-parts date)\n    (define (split-date date)\n\
    \      (string-split date #\\-))\n    (define (date-parts date)\n      (map string->number\
    \ (split-date date)))\n    (define (date-month date)\n      (list-ref (date-parts\
    \ date) 0))\n    (define (date-day date)\n      (list-ref (date-parts date) 1))\n\
    \    (define (date-year date)\n      (list-ref (date-parts date) 2))\n    (and\
    \ (valid-month (date-month date))\n         (valid-day (date-month date) (date-day\
    \ date))\n         (valid-year (date-year date))))\n  (and (valid-date-format\
    \ date)\n       (valid-date-parts date)))", "  (define (valid-month month)\n \
    \   (and (not (empty? month))\n         (and (char-numeric? (string-ref month\
    \ 0))\n              (and (char-numeric? (string-ref month 1))\n             \
    \      (and (<= (string->number month) 12)\n                        (<= 1 (string->number\
    \ month)))))))\n  (define (valid-day day)\n    (and (not (empty? day))\n     \
    \    (and (char-numeric? (string-ref day 0))\n              (and (char-numeric?\
    \ (string-ref day 1))\n                   (and (<= (string->number day) 31)\n\
    \                        (<= 1 (string->number day)))))))\n  (define (valid-year\
    \ year)\n    (and (not (empty? year))\n         (and (char-numeric? (string-ref\
    \ year 0))\n              (and (char-numeric? (string-ref year 1))\n         \
    \          (and (char-numeric? (string-ref year 2))\n                        (and\
    \ (char-numeric? (string-ref year 3))\n                             (<= (string->number\
    \ year) 2020)\n                             (<= 1900 (string->number year))))))))\n\
    \  (define (valid-date-format date)\n    (and (not (empty? date))\n         (and\
    \ (string-contains date #\\-))))\n  (define (valid-date-format-2 date)\n    (and\
    \ (not (empty? date))\n         (and (string-contains date #\\/))))\n  (and (valid-date-format\
    \ date)\n       (and (valid-month (substring date 0 2))\n            (and (valid-day\
    \ (substring date 3 5))\n                 (and (valid-year (substring date 6 10))\n\
    \                      (not (valid-date-format-2 date)))))))\n", "  (define (valid-month\
    \ month)\n    (and (integer? month)\n         (and (>= month 1) (<= month 12))))\n\
    \  (define (valid-day month day)\n    (and (integer? day)\n         (and (>= day\
    \ 1)\n              (cond ((or (= month 1) (= month 3) (= month 5) (= month 7)\
    \ (= month 8) (= month 10) (= month 12)) (<= day 31))\n                    ((or\
    \ (= month 4) (= month 6) (= month 9) (= month 11)) (<= day 30))\n           \
    \         ((= month 2) (<= day 29))))))\n  (define (valid-year year)\n    (and\
    \ (integer? year)\n         (and (>= year 1) (<= year 9999))))\n  (define (valid-date-format\
    \ date)\n    (and (regexp-match? #rx\"^[0-9]{2}-[0-9]{2}-[0-9]{4}$\" date)\n \
    \        (not (regexp-match? #rx\"^[0-9]{2}/[0-9]{2}/[0-9]{4}$\" date))))\n  (define\
    \ (valid-date-parts date)\n    (let ((date-parts (string-split date #\\-)))\n\
    \      (and (valid-month (string->number (list-ref date-parts 0)))\n         \
    \  (valid-day (string->number (list-ref date-parts 0)) (string->number (list-ref\
    \ date-parts 1)))\n           (valid-year (string->number (list-ref date-parts\
    \ 2))))))\n  (and (not (string=? date \"\"))\n       (valid-date-format date)\n\
    \       (valid-date-parts date)))\n", "  (define (valid-date-helper date)\n  \
    \  (define (valid-date-helper-helper date)\n      (define (valid-date-helper-helper-helper\
    \ date)\n        (define (valid-date-helper-helper-helper-helper date)\n     \
    \     (define (valid-date-helper-helper-helper-helper-helper date)\n         \
    \   (define (valid-date-helper-helper-helper-helper-helper-helper date)\n    \
    \          (define (valid-date-helper-helper-helper-helper-helper-helper-helper\
    \ date)\n                (define (valid-date-helper-helper-helper-helper-helper-helper-helper-helper\
    \ date)\n                  (define (valid-date-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ date)\n                    (define (valid-date-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ date)\n                      (define (valid-date-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ date)\n                        (define (valid-date-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ date)\n                          (define (valid-date-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ date)\n                            (define (valid-date-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ date)\n                              (define (valid-date-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ date", "  (define (valid-month month)\n    (and (not (string=? month \"\"))\n\
    \         (and (&lt;= 1 month) (&lt;= month 12))))\n  (define (valid-day day)\n\
    \    (and (not (string=? day \"\"))\n         (and (&lt;= 1 day) (&lt;= day 31))))\n\
    \  (define (valid-year year)\n    (and (not (string=? year \"\"))\n         (and\
    \ (&lt;= 1 year) (&lt;= year 9999))))\n  (define (valid-date-format date)\n  \
    \  (regexp-match? #rx\"^[0-9]{2}-[0-9]{2}-[0-9]{4}$\" date))\n  (define (valid-date-parts\
    \ date)\n    (define (valid-month-day month day)\n      (cond\n        [(and (string=?\
    \ month \"01\") (string=? day \"31\")) #t]\n        [(and (string=? month \"03\"\
    ) (string=? day \"31\")) #t]\n        [(and (string=? month \"05\") (string=?\
    \ day \"31\")) #t]\n        [(and (string=? month \"07\") (string=? day \"31\"\
    )) #t]\n        [(and (string=? month \"08\") (string=? day \"31\")) #t]\n   \
    \     [(and (string=? month \"10\") (string=? day \"31\")) #t]\n        [(and\
    \ (string=? month \"12\") (string=? day \"31\")) #t]\n        [(and (string=?\
    \ month \"04\") (string=? day \"30\")) #t]\n        [(and (string=? month \"06\"\
    ) (string=? day \"30\")) #t]\n        [(and (string=? month \"09\") (string=?\
    \ day \"30\")) #t]\n        [(and (string=? month \"11\") (string=? day \"30\"\
    )) #t]\n        [(and (string=? month \"02\") (string=? day \"29\")) #t]\n   \
    \     [else #f]))\n    (define (valid-month-day-year month day year)\n      (cond\n\
    \       ", "  (define (valid-date-helper date)\n    (define (valid-month month)\n\
    \      (and (<= 1 month) (<= month 12)))\n    (define (valid-day month day)\n\
    \      (cond ((= month 1) (<= 1 day) (<= day 31))\n            ((= month 3) (<=\
    \ 1 day) (<= day 31))\n            ((= month 5) (<= 1 day) (<= day 31))\n    \
    \        ((= month 7) (<= 1 day) (<= day 31))\n            ((= month 8) (<= 1\
    \ day) (<= day 31))\n            ((= month 10) (<= 1 day) (<= day 31))\n     \
    \       ((= month 12) (<= 1 day) (<= day 31))\n            ((= month 4) (<= 1\
    \ day) (<= day 30))\n            ((= month 6) (<= 1 day) (<= day 30))\n      \
    \      ((= month 9) (<= 1 day) (<= day 30))\n            ((= month 11) (<= 1 day)\
    \ (<= day 30))\n            ((= month 2) (<= 1 day) (<= day 29))))\n    (define\
    \ (valid-year year)\n      (and (<= 1 year) (<= year 9999)))\n    (define (valid-format\
    \ date)\n      (and (regexp-match? #rx\"^[0-9]{2}-[0-9]{2}-[0-9]{4}$\" date)\n\
    \           (not (regexp-match? #rx\"^[0-9]{2}/[0-9]{2}/[0-9]{4}$\" date))))\n\
    \    (define (get-month date)\n      (string->number (regexp-replace* #rx\"^([0-9]{2})-[0-9]{2}-[0-9]{4}$\"\
    \ date #\"$1\")))\n    (define (get-day date)\n      (string->number (regexp-replace*\
    \ #rx\"^[0-9]{2}-([0-9]{2})-[0-9]{4}$\" date #\"$1\")))\n    (define (get-year\
    \ date)\n     ", "  (define (valid-month month)\n    (and (not (empty? month))\n\
    \         (and (<= 1 (string->number month))\n              (<= (string->number\
    \ month) 12))))\n  (define (valid-day day)\n    (and (not (empty? day))\n    \
    \     (and (<= 1 (string->number day))\n              (<= (string->number day)\
    \ 31))))\n  (define (valid-year year)\n    (and (not (empty? year))\n        \
    \ (and (<= 1 (string->number year))\n              (<= (string->number year) 9999))))\n\
    \  (define (valid-date-format date)\n    (and (not (empty? date))\n         (regexp-match?\
    \ #rx\"^[0-9]{2}-[0-9]{2}-[0-9]{4}$\" date)))\n  (define (valid-date-parts date)\n\
    \    (define (valid-month-day-pair month day)\n      (cond ((or (equal? month\
    \ \"01\")\n                 (equal? month \"03\")\n                 (equal? month\
    \ \"05\")\n                 (equal? month \"07\")\n                 (equal? month\
    \ \"08\")\n                 (equal? month \"10\")\n                 (equal? month\
    \ \"12\"))\n             (<= (string->number day) 31))\n            ((or (equal?\
    \ month \"04\")\n                 (equal? month \"06\")\n                 (equal?\
    \ month \"09\")\n                 (equal? month \"11\"))\n             (<= (string->number\
    \ day) 30))\n            ((equal? month \"02\")\n             (<= (string->number\
    \ day) 29))\n            (else #f)))\n    (define (valid-leap-year year)\n   \
    \   (and (equal? (modulo (string->number year) 4) 0)\n           (or (not (equal?\
    \ (modulo (string->number year) 100) 0))\n               (equal? (modulo (string->number\
    \ year) 400) 0))))\n    (define (valid-month-day-year-pair month day year)\n \
    \     (cond ((and (valid-leap-year year)\n                  (equal? month \"02\"\
    )\n                  (equal? day \"29\"))\n", "  (define (valid-month month)\n\
    \    (and (not (empty? month))\n         (not (negative? (string->number month)))\n\
    \         (not (> (string->number month) 12))))\n  (define (valid-day day)\n \
    \   (and (not (empty? day))\n         (not (negative? (string->number day)))\n\
    \         (not (> (string->number day) 31))))\n  (define (valid-year year)\n \
    \   (and (not (empty? year))\n         (not (negative? (string->number year)))\n\
    \         (not (> (string->number year) 9999))))\n  (define (valid-date-format\
    \ date)\n    (regexp-match? #rx\"^[0-9]{2}-[0-9]{2}-[0-9]{4}$\" date))\n  (define\
    \ (valid-month-day-format date)\n    (define (valid-month-day-format-helper date)\n\
    \      (define (valid-month-day-format-helper-helper date)\n        (define (valid-month-day-format-helper-helper-helper\
    \ date)\n          (define (valid-month-day-format-helper-helper-helper-helper\
    \ date)\n            (define (valid-month-day-format-helper-helper-helper-helper-helper\
    \ date)\n              (define (valid-month-day-format-helper-helper-helper-helper-helper-helper\
    \ date)\n                (define (valid-month-day-format-helper-helper-helper-helper-helper-helper-helper\
    \ date)\n                  (define (valid-month-day-format-helper-helper-helper-helper-helper-helper-helper-helper\
    \ date)\n                    (define (valid-month-day-format-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ date)\n                      (define (valid-month-day-format-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper",
  "  (define (valid-month month)\n    (and (not (empty? month))\n         (and (<=\
    \ 1 (string->number month))\n              (<= (string->number month) 12))))\n\
    \  (define (valid-day day)\n    (and (not (empty? day))\n         (and (<= 1 (string->number\
    \ day))\n              (<= (string->number day) 31))))\n  (define (valid-year\
    \ year)\n    (and (not (empty? year))\n         (and (<= 1 (string->number year))\n\
    \              (<= (string->number year) 9999))))\n  (define (valid-date-format\
    \ date)\n    (and (not (empty? date))\n         (regexp-match? #rx\"^[0-9]{2}-[0-9]{2}-[0-9]{4}$\"\
    \ date)))\n  (and (valid-date-format date)\n       (and (valid-month (substring\
    \ date 0 2))\n            (valid-day (substring date 3 5))\n            (valid-year\
    \ (substring date 6)))))\n", "  (define (valid-date-helper date)\n    (define\
    \ (valid-date-helper-helper date)\n      (define (valid-date-helper-helper-helper\
    \ date)\n        (define (valid-date-helper-helper-helper-helper date)\n     \
    \     (define (valid-date-helper-helper-helper-helper-helper date)\n         \
    \   (define (valid-date-helper-helper-helper-helper-helper-helper date)\n    \
    \          (define (valid-date-helper-helper-helper-helper-helper-helper-helper\
    \ date)\n                (define (valid-date-helper-helper-helper-helper-helper-helper-helper-helper\
    \ date)\n                  (define (valid-date-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ date)\n                    (define (valid-date-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ date)\n                      (define (valid-date-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ date)\n                        (define (valid-date-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ date)\n                          (define (valid-date-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ date)\n                            (define (valid-date-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ date)\n                              (define (valid-date-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ date", "  (define (valid-month month)\n    (and (<= 1 month) (<= month 12)))\n\
    \  (define (valid-day month day)\n    (and (<= 1 day)\n         (cond\n      \
    \     [(or (= month 1) (= month 3) (= month 5) (= month 7) (= month 8) (= month\
    \ 10) (= month 12))\n            (<= day 31)]\n           [(or (= month 4) (=\
    \ month 6) (= month 9) (= month 11))\n            (<= day 30)]\n           [(=\
    \ month 2)\n            (<= day 29)])))\n  (define (valid-year year)\n    (and\
    \ (<= 1 year) (<= year 9999)))\n  (define (valid-date-format date)\n    (and (string-contains\
    \ date #\\-)))\n  (define (split-date date)\n    (string-split date #\\-))\n \
    \ (define (valid-date-parts date)\n    (define (valid-date-part date)\n      (and\
    \ (string? date)\n           (string-contains date #\\0)\n           (string-contains\
    \ date #\\1)\n           (string-contains date #\\2)\n           (string-contains\
    \ date #\\3)\n           (string-contains date #\\4)\n           (string-contains\
    \ date #\\5)\n           (string-contains date #\\6)\n           (string-contains\
    \ date #\\7)\n           (string-contains date #\\8)\n           (string-contains\
    \ date #\\9)))\n    (and (valid-date-part (list-ref (split-date date) 0))\n  \
    \       (valid-date-part (list-ref (split-date date) 1))\n         (valid-date-part\
    \ (list-ref (split-date date) 2))))\n  (and (string? date)\n       (valid-date-format\
    \ date)\n       (valid-date-parts date)\n       (valid-month (string->number (list-ref\
    \ (split-date date) 0)))\n       (valid-day (string->number (list-ref (split-date\
    \ date) 0)) (string->number (list-ref (split-date date) 1)))\n       (valid-year\
    \ (string->", "  (define (valid-month month)\n    (and (not (empty? month))\n\
    \         (and (<= 1 (string->number month))\n              (<= (string->number\
    \ month) 12))))\n  (define (valid-day day)\n    (and (not (empty? day))\n    \
    \     (and (<= 1 (string->number day))\n              (<= (string->number day)\
    \ 31))))\n  (define (valid-year year)\n    (and (not (empty? year))\n        \
    \ (and (<= 1 (string->number year))\n              (<= (string->number year) 9999))))\n\
    \  (define (valid-date-format date)\n    (regexp-match? #rx\"^[0-9]{2}-[0-9]{2}-[0-9]{4}$\"\
    \ date))\n  (and (valid-date-format date)\n       (and (valid-month (string-take\
    \ date 2))\n            (and (valid-day (string-take (string-drop date 3) 2))\n\
    \                 (valid-year (string-drop date 6))))))\n", "  (define (valid-date-helper\
    \ date)\n    (define (valid-date-helper-helper date)\n      (define (valid-date-helper-helper-helper\
    \ date)\n        (define (valid-date-helper-helper-helper-helper date)\n     \
    \     (define (valid-date-helper-helper-helper-helper-helper date)\n         \
    \   (define (valid-date-helper-helper-helper-helper-helper-helper date)\n    \
    \          (define (valid-date-helper-helper-helper-helper-helper-helper-helper\
    \ date)\n                (define (valid-date-helper-helper-helper-helper-helper-helper-helper-helper\
    \ date)\n                  (define (valid-date-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ date)\n                    (define (valid-date-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ date)\n                      (define (valid-date-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ date)\n                        (define (valid-date-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ date)\n                          (define (valid-date-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ date)\n                            (define (valid-date-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ date)\n                              (define (valid-date-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ date", "  (define (valid-date-helper date)\n    (define (valid-month month)\n\
    \      (and (not (empty? month))\n           (not (empty? (string-&gt;number month)))\n\
    \           (not (&lt; (string-&gt;number month) 1))\n           (not (&gt; (string-&gt;number\
    \ month) 12))))\n    (define (valid-day day)\n      (and (not (empty? day))\n\
    \           (not (empty? (string-&gt;number day)))\n           (not (&lt; (string-&gt;number\
    \ day) 1))\n           (not (&gt; (string-&gt;number day) 31))))\n    (define\
    \ (valid-year year)\n      (and (not (empty? year))\n           (not (empty? (string-&gt;number\
    \ year)))\n           (not (&lt; (string-&gt;number year) 1))))\n    (define (valid-format\
    \ date)\n      (and (not (empty? date))\n           (not (empty? (regexp-match\
    \ #rx\"^[0-9]{2}-[0-9]{2}-[0-9]{4}$\" date)))))\n    (and (valid-format date)\n\
    \         (valid-month (substring date 0 2))\n         (valid-day (substring date\
    \ 3 5))\n         (valid-year (substring date 6 10))))\n  (valid-date-helper date))\n",
  "  (define (valid-month month)\n    (and (<= 1 month) (<= month 12)))\n  (define\
    \ (valid-day month day)\n    (cond\n      [(or (= month 1) (= month 3) (= month\
    \ 5) (= month 7) (= month 8) (= month 10) (= month 12))\n       (and (<= 1 day)\
    \ (<= day 31))]\n      [(or (= month 4) (= month 6) (= month 9) (= month 11))\n\
    \       (and (<= 1 day) (<= day 30))]\n      [(= month 2)\n       (and (<= 1 day)\
    \ (<= day 29))]))\n  (define (valid-year year)\n    (and (<= 1 year) (<= year\
    \ 9999)))\n  (define (valid-date-format date)\n    (regexp-match? #rx\"^[0-9]{2}-[0-9]{2}-[0-9]{4}$\"\
    \ date))\n  (define (split-date date)\n    (regexp-match #rx\"^([0-9]{2})-([0-9]{2})-([0-9]{4})$\"\
    \ date))\n  (define (valid-date-parts date)\n    (let* ([parts (split-date date)]\n\
    \           [month (string->number (vector-ref parts 1))]\n           [day (string->number\
    \ (vector-ref parts 2))]\n           [year (string->number (vector-ref parts 3))])\n\
    \      (and (valid-month month)\n           (valid-day month day)\n          \
    \ (valid-year year))))\n  (and (not (string=? date \"\"))\n       (valid-date-format\
    \ date)\n       (valid-date-parts date)))\n", "  (define (valid-month month)\n\
    \    (and (not (negative? month))\n         (not (> month 12))))\n  (define (valid-day\
    \ month day)\n    (and (not (negative? day))\n         (cond ((or (= month 1)\
    \ (= month 3) (= month 5) (= month 7) (= month 8) (= month 10) (= month 12))\n\
    \                (<= day 31))\n               ((or (= month 4) (= month 6) (=\
    \ month 9) (= month 11))\n                (<= day 30))\n               ((= month\
    \ 2)\n                (<= day 29)))))\n  (define (valid-year year)\n    (and (not\
    \ (negative? year))\n         (not (> year 9999))))\n  (define (valid-date-format\
    \ date)\n    (and (regexp-match? #rx\"^[0-9]{2}-[0-9]{2}-[0-9]{4}$\" date)\n \
    \        (let* ([date-parts (string-split date #\\-)]\n                [month\
    \ (string->number (list-ref date-parts 0))]\n                [day (string->number\
    \ (list-ref date-parts 1))]\n                [year (string->number (list-ref date-parts\
    \ 2))])\n           (and (valid-month month)\n                (valid-day month\
    \ day)\n                (valid-year year)))))\n  (valid-date-format date))\n",
  "  (define (valid-month month)\n    (and (not (empty? month))\n         (not (string-contains\
    \ month #\\-)\n              (string-contains month #\\/))\n         (not (string-contains\
    \ month #\\.))\n         (not (string-contains month #\\_))\n         (not (string-contains\
    \ month #\\:))\n         (not (string-contains month #\\;))\n         (not (string-contains\
    \ month #\\,))\n         (not (string-contains month #\\!))\n         (not (string-contains\
    \ month #\\@))\n         (not (string-contains month #\\#))\n         (not (string-contains\
    \ month #\\$))\n         (not (string-contains month #\\%))\n         (not (string-contains\
    \ month #\\^))\n         (not (string-contains month #\\&))\n         (not (string-contains\
    \ month #\\*))\n         (not (string-contains month #\\()))\n         (not (string-contains\
    \ month #\\)))\n         (not (string-contains month #\\[))\n         (not (string-contains\
    \ month #\\]))\n         (not (string-contains month #\\{))\n         (not (string-contains\
    \ month #\\}))\n         (not (string-contains month #\\`))\n         (not (string-contains\
    \ month #\\~))\n         (not (string-contains month #\\|))\n         (not (string-contains\
    \ month #\\\\))\n         (not (string-contains month #\\?))\n         (not (string-contains\
    \ month #\\>))\n         (not (string-contains month #\\<))\n         (not (string-contains\
    \ month #\\+))\n         (not (string-contains month #\\=))\n         (not (string-contains\
    \ month #\\'))\n         (not (string-contains month #\\\"))\n         (not (string-contains\
    \ month #\\ ))\n         (not (string-contains month #\\0))\n         (not (string-contains\
    \ month #\\1))\n         (not (string-contains month #", "  (define (valid-date-helper\
    \ date)\n    (define (valid-date-helper-helper date)\n      (define (valid-date-helper-helper-helper\
    \ date)\n        (define (valid-date-helper-helper-helper-helper date)\n     \
    \     (define (valid-date-helper-helper-helper-helper-helper date)\n         \
    \   (define (valid-date-helper-helper-helper-helper-helper-helper date)\n    \
    \          (define (valid-date-helper-helper-helper-helper-helper-helper-helper\
    \ date)\n                (define (valid-date-helper-helper-helper-helper-helper-helper-helper-helper\
    \ date)\n                  (define (valid-date-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ date)\n                    (define (valid-date-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ date)\n                      (define (valid-date-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ date)\n                        (define (valid-date-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ date)\n                          (define (valid-date-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ date)\n                            (define (valid-date-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ date)\n                              (define (valid-date-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ date", "  (define (valid-month month)\n    (and (>= month 1) (<= month 12)))\n\
    \  (define (valid-day month day)\n    (and (>= day 1)\n         (<= day (cond\n\
    \                  [(or (= month 1) (= month 3) (= month 5) (= month 7) (= month\
    \ 8) (= month 10) (= month 12)) 31]\n                  [(or (= month 4) (= month\
    \ 6) (= month 9) (= month 11)) 30]\n                  [(= month 2) 29]))))\n \
    \ (define (valid-year year)\n    (and (>= year 0) (<= year 9999)))\n  (define\
    \ (valid-date-format date)\n    (regexp-match? #rx\"^[0-9]{2}-[0-9]{2}-[0-9]{4}$\"\
    \ date))\n  (define (valid-date-parts date)\n    (define (valid-date-parts-helper\
    \ date)\n      (define (valid-date-parts-helper-helper date)\n        (define\
    \ (valid-date-parts-helper-helper-helper date)\n          (define (valid-date-parts-helper-helper-helper-helper\
    \ date)\n            (define (valid-date-parts-helper-helper-helper-helper-helper\
    \ date)\n              (define (valid-date-parts-helper-helper-helper-helper-helper-helper\
    \ date)\n                (define (valid-date-parts-helper-helper-helper-helper-helper-helper-helper\
    \ date)\n                  (define (valid-date-parts-helper-helper-helper-helper-helper-helper-helper-helper\
    \ date)\n                    (define (valid-date-parts-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ date)\n                      (define (valid-date-parts-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ date)\n                        (define (valid-date-parts-helper-helper-helper-",
  "  (define (valid-month month)\n    (and (integer? month)\n         (and (<= 1 month)\
    \ (<= month 12))))\n  (define (valid-day month day)\n    (and (integer? day)\n\
    \         (and (<= 1 day)\n              (cond\n                [(or (= month\
    \ 1) (= month 3) (= month 5) (= month 7) (= month 8) (= month 10) (= month 12))\
    \ (<= day 31)]\n                [(or (= month 4) (= month 6) (= month 9) (= month\
    \ 11)) (<= day 30)]\n                [(= month 2) (<= day 29)]))))\n  (define\
    \ (valid-year year)\n    (and (integer? year)\n         (and (<= 1 year) (<= year\
    \ 9999))))\n  (define (valid-date-format date)\n    (regexp-match? #rx\"^[0-9]{2}-[0-9]{2}-[0-9]{4}$\"\
    \ date))\n  (define (split-date date)\n    (regexp-match #rx\"^([0-9]{2})-([0-9]{2})-([0-9]{4})$\"\
    \ date))\n  (define (valid-date-parts date)\n    (let* ([parts (split-date date)]\n\
    \           [month (string->number (vector-ref parts 1))]\n           [day (string->number\
    \ (vector-ref parts 2))]\n           [year (string->number (vector-ref parts 3))])\n\
    \      (and (valid-month month)\n           (valid-day month day)\n          \
    \ (valid-year year))))\n  (and (not (string=? date \"\"))\n       (valid-date-format\
    \ date)\n       (valid-date-parts date)))\n", "  (define (valid-month month)\n\
    \    (and (>= month 1) (<= month 12)))\n  (define (valid-day month day)\n    (cond\n\
    \      [(or (= month 1) (= month 3) (= month 5) (= month 7) (= month 8) (= month\
    \ 10) (= month 12))\n       (and (>= day 1) (<= day 31))]\n      [(or (= month\
    \ 4) (= month 6) (= month 9) (= month 11))\n       (and (>= day 1) (<= day 30))]\n\
    \      [(= month 2)\n       (and (>= day 1) (<= day 29))]))\n  (define (valid-year\
    \ year)\n    (and (>= year 1) (<= year 9999)))\n  (define (valid-date-format date)\n\
    \    (regexp-match? #rx\"^[0-9]{2}-[0-9]{2}-[0-9]{4}$\" date))\n  (let ([date-list\
    \ (string-split date #\\-)]\n        [month (string->number (list-ref date-list\
    \ 0))]\n        [day (string->number (list-ref date-list 1))]\n        [year (string->number\
    \ (list-ref date-list 2))])\n    (and (valid-date-format date)\n         (valid-month\
    \ month)\n         (valid-day month day)\n         (valid-year year))))\n", " \
    \ (define (valid-month month)\n    (and (integer? month)\n         (and (>= month\
    \ 1) (<= month 12))))\n  (define (valid-day day)\n    (and (integer? day)\n  \
    \       (and (>= day 1) (<= day 31))))\n  (define (valid-year year)\n    (and\
    \ (integer? year)\n         (and (>= year 1) (<= year 9999))))\n  (define (valid-date-format\
    \ date)\n    (and (regexp-match? #rx\"^[0-9]{2}-[0-9]{2}-[0-9]{4}$\" date)\n \
    \        (not (regexp-match? #rx\"^[0-9]{2}/[0-9]{2}/[0-9]{4}$\" date))))\n  (define\
    \ (valid-date-parts date)\n    (define (valid-date-part date)\n      (and (valid-month\
    \ (string->number (substring date 0 2)))\n           (valid-day (string->number\
    \ (substring date 3 5)))\n           (valid-year (string->number (substring date\
    \ 6 10)))))\n    (valid-date-part date))\n  (and (not (string=? date \"\"))\n\
    \       (valid-date-format date)\n       (valid-date-parts date)))\n", "  (define\
    \ (valid-month month)\n    (and (not (string=? month \"\"))\n         (and (&lt;=\
    \ 1 month) (&lt;= month 12))))\n  (define (valid-day day)\n    (and (not (string=?\
    \ day \"\"))\n         (and (&lt;= 1 day) (&lt;= day 31))))\n  (define (valid-year\
    \ year)\n    (and (not (string=? year \"\"))\n         (and (&lt;= 1 year) (&lt;=\
    \ year 9999))))\n  (define (valid-date-format date)\n    (string-match \"^[0-9]{2}-[0-9]{2}-[0-9]{4}$\"\
    \ date))\n  (define (valid-date-parts date)\n    (let ([date-parts (string-split\
    \ date \"-\")])\n      (and (valid-month (list-ref date-parts 0))\n          \
    \ (valid-day (list-ref date-parts 1))\n           (valid-year (list-ref date-parts\
    \ 2)))))\n  (and (valid-date-format date)\n       (valid-date-parts date)))\n\
    </code>\n", "  (define (valid-month month)\n    (and (<= 1 month) (<= month 12)))\n\
    \  (define (valid-day month day)\n    (and (<= 1 day)\n         (cond [(or (=\
    \ month 1) (= month 3) (= month 5) (= month 7) (= month 8) (= month 10) (= month\
    \ 12))\n                (<= day 31)]\n               [(or (= month 4) (= month\
    \ 6) (= month 9) (= month 11))\n                (<= day 30)]\n               [(=\
    \ month 2)\n                (<= day 29)]\n               [else\n             \
    \   #f])))\n  (define (valid-year year)\n    (and (<= 1 year) (<= year 9999)))\n\
    \  (define (valid-date-format date)\n    (and (regexp-match? #rx\"^[0-9]{2}-[0-9]{2}-[0-9]{4}$\"\
    \ date)\n         #t))\n  (and (not (string=? date \"\"))\n       (valid-date-format\
    \ date)\n       (let* ([date-list (string-split date \"-\")]\n              [month\
    \ (string->number (list-ref date-list 0))]\n              [day (string->number\
    \ (list-ref date-list 1))]\n              [year (string->number (list-ref date-list\
    \ 2))])\n         (and (valid-month month)\n              (valid-day month day)\n\
    \              (valid-year year)))))\n", "  (define (valid-date-helper date)\n\
    \    (define (valid-date-helper-helper date)\n      (define (valid-date-helper-helper-helper\
    \ date)\n        (define (valid-date-helper-helper-helper-helper date)\n     \
    \     (define (valid-date-helper-helper-helper-helper-helper date)\n         \
    \   (define (valid-date-helper-helper-helper-helper-helper-helper date)\n    \
    \          (define (valid-date-helper-helper-helper-helper-helper-helper-helper\
    \ date)\n                (define (valid-date-helper-helper-helper-helper-helper-helper-helper-helper\
    \ date)\n                  (define (valid-date-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ date)\n                    (define (valid-date-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ date)\n                      (define (valid-date-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ date)\n                        (define (valid-date-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ date)\n                          (define (valid-date-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ date)\n                            (define (valid-date-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ date)\n                              (define (valid-date-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ date", "  (define (valid-month month)\n    (and (>= month 1) (<= month 12)))\n\
    \  (define (valid-day month day)\n    (and (>= day 1)\n         (<= day\n    \
    \         (cond\n               [(or (= month 1) (= month 3) (= month 5) (= month\
    \ 7) (= month 8) (= month 10) (= month 12)) 31]\n               [(or (= month\
    \ 4) (= month 6) (= month 9) (= month 11)) 30]\n               [(= month 2) 29]))))\n\
    \  (define (valid-year year)\n    (and (>= year 0) (<= year 9999)))\n  (define\
    \ (valid-format date)\n    (and (regexp-match? #rx\"^[0-9]{2}-[0-9]{2}-[0-9]{4}$\"\
    \ date)\n         (not (regexp-match? #rx\"^[0-9]{2}/[0-9]{2}/[0-9]{4}$\" date))))\n\
    \  (define (valid-date-parts date)\n    (define (valid-date-parts-helper date)\n\
    \      (let* ([date-parts (string-split date \"-\")]\n             [month (string->number\
    \ (list-ref date-parts 0))]\n             [day (string->number (list-ref date-parts\
    \ 1))]\n             [year (string->number (list-ref date-parts 2))])\n      \
    \  (and (valid-month month)\n             (valid-day month day)\n            \
    \ (valid-year year))))\n    (valid-date-parts-helper date))\n  (and (not (string=?\
    \ date \"\"))\n       (valid-format date)\n       (valid-date-parts date)))\n",
  "  (and (not (empty? date))\n       (regexp-match? #rx\"^(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])-([0-9]{4})$\"\
    \ date)))\n", "  (define (valid-date-helper date)\n    (define (valid-date-helper-helper\
    \ date)\n      (define (valid-date-helper-helper-helper date)\n        (define\
    \ (valid-date-helper-helper-helper-helper date)\n          (define (valid-date-helper-helper-helper-helper-helper\
    \ date)\n            (define (valid-date-helper-helper-helper-helper-helper-helper\
    \ date)\n              (define (valid-date-helper-helper-helper-helper-helper-helper-helper\
    \ date)\n                (define (valid-date-helper-helper-helper-helper-helper-helper-helper-helper\
    \ date)\n                  (define (valid-date-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ date)\n                    (define (valid-date-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ date)\n                      (define (valid-date-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ date)\n                        (define (valid-date-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ date)\n                          (define (valid-date-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ date)\n                            (define (valid-date-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ date)\n                              (define (valid-date-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ date", "  (define (valid-month month)\n    (and (>= month 1) (<= month 12)))\n\
    \  (define (valid-day day month)\n    (and (>= day 1)\n         (cond\n      \
    \     [(or (= month 1) (= month 3) (= month 5) (= month 7) (= month 8) (= month\
    \ 10) (= month 12)) (<= day 31)]\n           [(or (= month 4) (= month 6) (= month\
    \ 9) (= month 11)) (<= day 30)]\n           [(= month 2) (<= day 29)])))\n  (define\
    \ (valid-year year)\n    (and (>= year 1) (<= year 9999)))\n  (define (valid-date-format\
    \ date)\n    (regexp-match? #rx\"^[0-9]{2}-[0-9]{2}-[0-9]{4}$\" date))\n  (define\
    \ (valid-date-parts date)\n    (define (valid-date-parts-helper date)\n      (define\
    \ (valid-date-parts-helper-helper date)\n        (define (valid-date-parts-helper-helper-helper\
    \ date)\n          (define (valid-date-parts-helper-helper-helper-helper date)\n\
    \            (define (valid-date-parts-helper-helper-helper-helper-helper date)\n\
    \              (define (valid-date-parts-helper-helper-helper-helper-helper-helper\
    \ date)\n                (define (valid-date-parts-helper-helper-helper-helper-helper-helper-helper\
    \ date)\n                  (define (valid-date-parts-helper-helper-helper-helper-helper-helper-helper-helper\
    \ date)\n                    (define (valid-date-parts-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ date)\n                      (define (valid-date-parts-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ date)\n                        (define (valid-date-parts-helper-", "  (define\
    \ (valid-date-helper date)\n    (define (valid-date-helper-helper date)\n    \
    \  (define (valid-date-helper-helper-helper date)\n        (define (valid-date-helper-helper-helper-helper\
    \ date)\n          (define (valid-date-helper-helper-helper-helper-helper date)\n\
    \            (define (valid-date-helper-helper-helper-helper-helper-helper date)\n\
    \              (define (valid-date-helper-helper-helper-helper-helper-helper-helper\
    \ date)\n                (define (valid-date-helper-helper-helper-helper-helper-helper-helper-helper\
    \ date)\n                  (define (valid-date-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ date)\n                    (define (valid-date-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ date)\n                      (define (valid-date-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ date)\n                        (define (valid-date-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ date)\n                          (define (valid-date-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ date)\n                            (define (valid-date-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ date)\n                              (define (valid-date-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ date", "  (define (valid-month month)\n    (and (not (empty? month))\n     \
    \    (and (<= 1 (string->number month))\n              (<= (string->number month)\
    \ 12))))\n  (define (valid-day day)\n    (and (not (empty? day))\n         (and\
    \ (<= 1 (string->number day))\n              (<= (string->number day) 31))))\n\
    \  (define (valid-year year)\n    (and (not (empty? year))\n         (and (<=\
    \ 1 (string->number year))\n              (<= (string->number year) 9999))))\n\
    \  (define (valid-date-format date)\n    (and (not (empty? date))\n         (regexp-match?\
    \ #rx\"^[0-9]{2}-[0-9]{2}-[0-9]{4}$\" date)))\n  (define (valid-date-parts date)\n\
    \    (define (valid-month-day-pair month day)\n      (cond\n        [(and (= 1\
    \ (string->number month))\n              (= 31 (string->number day))) #t]\n  \
    \      [(and (= 3 (string->number month))\n              (= 31 (string->number\
    \ day))) #t]\n        [(and (= 5 (string->number month))\n              (= 31\
    \ (string->number day))) #t]\n        [(and (= 7 (string->number month))\n   \
    \           (= 31 (string->number day))) #t]\n        [(and (= 8 (string->number\
    \ month))\n              (= 31 (string->number day))) #t]\n        [(and (= 10\
    \ (string->number month))\n              (= 31 (string->number day))) #t]\n  \
    \      [(and (= 12 (string->number month))\n              (= 31 (string->number\
    \ day))) #t]\n        [(and (= 4 (string->number month))\n              (= 30\
    \ (string->number day))) #t]\n        [(and (= 6 (string->number month))\n   \
    \           (= 30 (string->number day))) #t]\n        [(and (= 9 (string->number\
    \ month))\n              (= 30 (string->number day))) #t]\n        [(and (= 11\
    \ (string->number month))\n              (= 30 (string->number day))) #t]\n  \
    \      [(", "  (cond\n    [(empty? date) false]\n    [(regexp-match #rx\"^(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])-[0-9]{4}$\"\
    \ date)\n     (let* ([month (string->number (regexp-match #rx\"^(0[1-9]|1[0-2])\"\
    \ date))]\n            [day (string->number (regexp-match #rx\"^(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])\"\
    \ date))])\n       (cond\n         [(or (= month 1) (= month 3) (= month 5) (=\
    \ month 7) (= month 8) (= month 10) (= month 12))\n          (and (>= day 1) (<=\
    \ day 31))]\n         [(or (= month 4) (= month 6) (= month 9) (= month 11))\n\
    \          (and (>= day 1) (<= day 30))]\n         [(= month 2)\n          (and\
    \ (>= day 1) (<= day 29))]))]\n    [else false]))\n", "  (define (valid-month\
    \ month)\n    (and (>= month 1) (<= month 12)))\n  (define (valid-day month day)\n\
    \    (cond\n      [(or (= month 1) (= month 3) (= month 5) (= month 7) (= month\
    \ 8) (= month 10) (= month 12))\n       (and (>= day 1) (<= day 31))]\n      [(or\
    \ (= month 4) (= month 6) (= month 9) (= month 11))\n       (and (>= day 1) (<=\
    \ day 30))]\n      [(= month 2)\n       (and (>= day 1) (<= day 29))]))\n  (define\
    \ (valid-year year)\n    (and (>= year 1) (<= year 9999)))\n  (define (valid-date-format\
    \ date)\n    (regexp-match? #rx\"^[0-9]{2}-[0-9]{2}-[0-9]{4}$\" date))\n  (define\
    \ (split-date date)\n    (regexp-match #rx\"^([0-9]{2})-([0-9]{2})-([0-9]{4})$\"\
    \ date))\n  (define (get-month date)\n    (string->number (vector-ref (split-date\
    \ date) 1)))\n  (define (get-day date)\n    (string->number (vector-ref (split-date\
    \ date) 2)))\n  (define (get-year date)\n    (string->number (vector-ref (split-date\
    \ date) 3)))\n  (and (not (empty? date))\n       (valid-date-format date)\n  \
    \     (valid-month (get-month date))\n       (valid-day (get-month date) (get-day\
    \ date))\n       (valid-year (get-year date))))\n", "  (define (valid-month month)\n\
    \    (and (not (empty? month))\n         (and (<= 1 (string->number month))\n\
    \              (<= (string->number month) 12))))\n  (define (valid-day day)\n\
    \    (and (not (empty? day))\n         (and (<= 1 (string->number day))\n    \
    \          (<= (string->number day) 31))))\n  (define (valid-year year)\n    (and\
    \ (not (empty? year))\n         (and (<= 1 (string->number year))\n          \
    \    (<= (string->number year) 9999))))\n  (define (valid-date-format date)\n\
    \    (and (not (empty? date))\n         (regexp-match? #rx\"^[0-9]{2}-[0-9]{2}-[0-9]{4}$\"\
    \ date)))\n  (and (valid-date-format date)\n       (and (valid-month (substring\
    \ date 0 2))\n            (valid-day (substring date 3 5))\n            (valid-year\
    \ (substring date 6 10)))))\n", "  (define (valid-month month)\n    (and (not\
    \ (string=? month \"\"))\n         (and (<= 1 (string->number month))\n      \
    \        (<= (string->number month) 12))))\n  (define (valid-day month day)\n\
    \    (and (not (string=? day \"\"))\n         (and (<= 1 (string->number day))\n\
    \              (<= (string->number day)\n                  (cond [(string=? month\
    \ \"1\") 31]\n                        [(string=? month \"3\") 31]\n          \
    \              [(string=? month \"5\") 31]\n                        [(string=?\
    \ month \"7\") 31]\n                        [(string=? month \"8\") 31]\n    \
    \                    [(string=? month \"10\") 31]\n                        [(string=?\
    \ month \"12\") 31]\n                        [(string=? month \"4\") 30]\n   \
    \                     [(string=? month \"6\") 30]\n                        [(string=?\
    \ month \"9\") 30]\n                        [(string=? month \"11\") 30]\n   \
    \                     [(string=? month \"2\") 29]\n                        [else\
    \ 0])))))\n  (define (valid-year year)\n    (and (not (string=? year \"\"))\n\
    \         (and (<= 1 (string->number year))\n              (<= (string->number\
    \ year) 9999))))\n  (define (valid-format date)\n    (and (regexp-match? #rx\"\
    ^[0-9]{2}-[0-9]{2}-[0-9]{4}$\" date)\n         (not (regexp-match? #rx\"^[0-9]{2}/[0-9]{2}/[0-9]{4}$\"\
    \ date))))\n  (define (valid-date-parts date)\n    (let* ([date-parts (string-split\
    \ date #\\-)]\n           [month (list-ref date-parts 0)]\n           [day (list-ref\
    \ date-parts 1)]\n           [year (list-ref date-parts 2)])\n      (and (valid-month\
    \ month)\n           (valid-day month day)\n           (valid-year year))))\n\
    \  (and (valid-format date)\n       (valid-date-parts date)))", "  (define (valid-month\
    \ month)\n    (and (<= 1 month) (<= month 12)))\n  (define (valid-day month day)\n\
    \    (cond\n      [(and (= month 1) (= month 3) (= month 5) (= month 7) (= month\
    \ 8) (= month 10) (= month 12))\n       (and (<= 1 day) (<= day 31))]\n      [(and\
    \ (= month 4) (= month 6) (= month 9) (= month 11))\n       (and (<= 1 day) (<=\
    \ day 30))]\n      [(= month 2)\n       (and (<= 1 day) (<= day 29))]))\n  (define\
    \ (valid-year year)\n    (and (<= 1 year) (<= year 9999)))\n  (define (valid-format\
    \ date)\n    (regexp-match? #rx\"^[0-9]{2}-[0-9]{2}-[0-9]{4}$\" date))\n  (define\
    \ (split-date date)\n    (regexp-match #rx\"^([0-9]{2})-([0-9]{2})-([0-9]{4})$\"\
    \ date))\n  (define (valid-date-helper date)\n    (define (valid-date-helper-helper\
    \ date)\n      (define (valid-date-helper-helper-helper date)\n        (define\
    \ (valid-date-helper-helper-helper-helper date)\n          (define (valid-date-helper-helper-helper-helper-helper\
    \ date)\n            (define (valid-date-helper-helper-helper-helper-helper-helper\
    \ date)\n              (define (valid-date-helper-helper-helper-helper-helper-helper-helper\
    \ date)\n                (define (valid-date-helper-helper-helper-helper-helper-helper-helper-helper\
    \ date)\n                  (define (valid-date-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ date)\n                    (define (valid-date-helper-helper-", "  (define (valid-month\
    \ month)\n    (and (&gt;= month 1) (&lt;= month 12)))\n  (define (valid-day month\
    \ day)\n    (cond\n      [(and (= month 1) (= month 3) (= month 5) (= month 7)\
    \ (= month 8) (= month 10) (= month 12))\n       (and (&gt;= day 1) (&lt;= day\
    \ 31))]\n      [(and (= month 4) (= month 6) (= month 9) (= month 11))\n     \
    \  (and (&gt;= day 1) (&lt;= day 30))]\n      [(= month 2)\n       (and (&gt;=\
    \ day 1) (&lt;= day 29))]))\n  (define (valid-year year)\n    (and (&gt;= year\
    \ 1) (&lt;= year 9999)))\n  (define (valid-date-format date)\n    (regexp-match?\
    \ #rx\"^[0-9]{2}-[0-9]{2}-[0-9]{4}$\" date))\n  (and (not (string=? date \"\"\
    ))\n       (valid-date-format date)\n       (valid-month (string-&gt;number (regexp-match\
    \ #rx\"^[0-9]{2}-\" date)))\n       (valid-day (string-&gt;number (regexp-match\
    \ #rx\"^[0-9]{2}-\" date))\n                  (string-&gt;number (regexp-match\
    \ #rx\"^[0-9]{2}-[0-9]{2}-\" date)))\n       (valid-year (string-&gt;number (regexp-match\
    \ #rx\"^[0-9]{2}-[0-9]{2}-[0-9]{4}$\" date)))))\n</code>\n", "  (define (valid-month\
    \ month)\n    (and (integer? month)\n         (and (>= month 1) (<= month 12))))\n\
    \  (define (valid-day day)\n    (and (integer? day)\n         (and (>= day 1)\
    \ (<= day 31))))\n  (define (valid-year year)\n    (and (integer? year)\n    \
    \     (and (>= year 0) (<= year 9999))))\n  (define (valid-date-format date)\n\
    \    (regexp-match? #rx\"^[0-9]{2}-[0-9]{2}-[0-9]{4}$\" date))\n  (define (valid-date-parts\
    \ date)\n    (define (valid-date-parts-helper date)\n      (define (valid-date-parts-helper-helper\
    \ date)\n        (define (valid-date-parts-helper-helper-helper date)\n      \
    \    (define (valid-date-parts-helper-helper-helper-helper date)\n           \
    \ (define (valid-date-parts-helper-helper-helper-helper-helper date)\n       \
    \       (define (valid-date-parts-helper-helper-helper-helper-helper-helper date)\n\
    \                (define (valid-date-parts-helper-helper-helper-helper-helper-helper-helper\
    \ date)\n                  (define (valid-date-parts-helper-helper-helper-helper-helper-helper-helper-helper\
    \ date)\n                    (define (valid-date-parts-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ date)\n                      (define (valid-date-parts-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ date)\n                        (define (valid-date-parts-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ date)\n                          (define (valid-date-parts-helper-helper", " \
    \ (define (valid-month month)\n    (and (integer? month)\n         (and (>= month\
    \ 1) (<= month 12))))\n  (define (valid-day day)\n    (and (integer? day)\n  \
    \       (and (>= day 1) (<= day 31))))\n  (define (valid-year year)\n    (and\
    \ (integer? year)\n         (and (>= year 1) (<= year 9999))))\n  (define (valid-date-format\
    \ date)\n    (and (regexp-match? #rx\"^[0-9]{2}-[0-9]{2}-[0-9]{4}$\" date)\n \
    \        (not (regexp-match? #rx\"^[0-9]{2}/[0-9]{2}/[0-9]{4}$\" date))))\n  (define\
    \ (valid-date-parts date)\n    (let* ([parts (string-split date #\\-)])\n    \
    \  (and (valid-month (string->number (list-ref parts 0)))\n           (valid-day\
    \ (string->number (list-ref parts 1)))\n           (valid-year (string->number\
    \ (list-ref parts 2))))))\n  (and (not (string=? date \"\"))\n       (valid-date-format\
    \ date)\n       (valid-date-parts date)))\n", "  (define (valid-month month)\n\
    \    (and (integer? month)\n         (and (>= month 1) (<= month 12))))\n  (define\
    \ (valid-day day)\n    (and (integer? day)\n         (and (>= day 1) (<= day 31))))\n\
    \  (define (valid-year year)\n    (and (integer? year)\n         (and (>= year\
    \ 0) (<= year 9999))))\n  (define (valid-date-string date-string)\n    (and (string?\
    \ date-string)\n         (string-length date-string)\n         (regexp-match #rx\"\
    ^[0-9]{2}-[0-9]{2}-[0-9]{4}$\" date-string)))\n  (define (valid-date-list date-list)\n\
    \    (and (list? date-list)\n         (equal? (length date-list) 3)))\n  (define\
    \ (valid-date-list-elements date-list)\n    (and (valid-month (list-ref date-list\
    \ 0))\n         (valid-day (list-ref date-list 1))\n         (valid-year (list-ref\
    \ date-list 2))))\n  (and (valid-date-string date)\n       (valid-date-list (string->list\
    \ date))\n       (valid-date-list-elements (string->list date))))\n", "  (define\
    \ (valid-month month)\n    (and (<= 1 month) (<= month 12)))\n  (define (valid-day\
    \ month day)\n    (cond\n      [(and (= 1 month) (= month 3) (= month 5) (= month\
    \ 7) (= month 8) (= month 10) (= month 12))\n       (and (<= 1 day) (<= day 31))]\n\
    \      [(and (= 4 month) (= 6 month) (= 9 month) (= 11 month))\n       (and (<=\
    \ 1 day) (<= day 30))]\n      [(= 2 month)\n       (and (<= 1 day) (<= day 29))]))\n\
    \  (define (valid-year year)\n    (and (<= 1 year) (<= year 9999)))\n  (define\
    \ (valid-format date)\n    (regexp-match? #rx\"^[0-9]{2}-[0-9]{2}-[0-9]{4}$\"\
    \ date))\n  (define (split-date date)\n    (regexp-match #rx\"^([0-9]{2})-([0-9]{2})-([0-9]{4})$\"\
    \ date))\n  (define (get-month date)\n    (string->number (cadr (split-date date))))\n\
    \  (define (get-day date)\n    (string->number (caddr (split-date date))))\n \
    \ (define (get-year date)\n    (string->number (cadddr (split-date date))))\n\
    \  (and (not (string=? date \"\"))\n       (valid-format date)\n       (valid-month\
    \ (get-month date))\n       (valid-day (get-month date) (get-day date))\n    \
    \   (valid-year (get-year date))))\n", "  (cond\n    [(empty? date) false]\n \
    \   [(regexp-match? #rx\"^[0-9]{2}-[0-9]{2}-[0-9]{4}$\" date)\n     (let* ([date-list\
    \ (string-split date \"-\")]\n            [month (string->number (list-ref date-list\
    \ 0))]\n            [day (string->number (list-ref date-list 1))]\n          \
    \  [year (string->number (list-ref date-list 2))])\n       (cond\n         [(and\
    \ (<= 1 month 12)\n               (<= 1 day 31)\n               (or (= month 1)\
    \ (= month 3) (= month 5) (= month 7) (= month 8) (= month 10) (= month 12)))\
    \ true]\n         [(and (<= 1 month 12)\n               (<= 1 day 30)\n      \
    \         (or (= month 4) (= month 6) (= month 9) (= month 11))) true]\n     \
    \    [(and (<= 1 month 12)\n               (<= 1 day 29)\n               (= month\
    \ 2)) true]\n         [else false]))]\n    [else false]))\n", "  (define (valid-month\
    \ month)\n    (and (integer? month)\n         (and (>= month 1) (<= month 12))))\n\
    \  (define (valid-day month day)\n    (and (integer? day)\n         (and (>= day\
    \ 1)\n              (cond\n                [(or (= month 1) (= month 3) (= month\
    \ 5) (= month 7) (= month 8) (= month 10) (= month 12)) (<= day 31)]\n       \
    \         [(or (= month 4) (= month 6) (= month 9) (= month 11)) (<= day 30)]\n\
    \                [(= month 2) (<= day 29)]))))\n  (define (valid-year year)\n\
    \    (and (integer? year)\n         (>= year 0)))\n  (define (valid-date-format\
    \ date)\n    (regexp-match? #rx\"^[0-9]{2}-[0-9]{2}-[0-9]{4}$\" date))\n  (define\
    \ (split-date date)\n    (string-split date #\\-)\n    (map string->number (string-split\
    \ date #\\-)))\n  (define (valid-date-parts date)\n    (let ([date-parts (split-date\
    \ date)])\n      (and (valid-month (list-ref date-parts 0))\n           (valid-day\
    \ (list-ref date-parts 0) (list-ref date-parts 1))\n           (valid-year (list-ref\
    \ date-parts 2)))))\n  (and (not (string=? date \"\"))\n       (valid-date-format\
    \ date)\n       (valid-date-parts date)))\n", "  (define (valid-date-helper date)\n\
    \    (define (valid-month month)\n      (and (not (empty? month))\n          \
    \ (and (not (empty? (rest month)))\n                (and (not (empty? (rest (rest\
    \ month))))\n                     (and (not (empty? (rest (rest (rest month)))))\n\
    \                          (not (empty? (rest (rest (rest (rest month)))))))))))\n\
    \    (define (valid-day day)\n      (and (not (empty? day))\n           (and (not\
    \ (empty? (rest day)))\n                (and (not (empty? (rest (rest day))))\n\
    \                     (and (not (empty? (rest (rest (rest day)))))\n         \
    \                 (not (empty? (rest (rest (rest (rest day)))))))))))\n    (define\
    \ (valid-year year)\n      (and (not (empty? year))\n           (and (not (empty?\
    \ (rest year)))\n                (and (not (empty? (rest (rest year))))\n    \
    \                 (and (not (empty? (rest (rest (rest year)))))\n            \
    \              (not (empty? (rest (rest (rest (rest year)))))))))))\n    (define\
    \ (valid-month-day month day)\n      (cond ((and (= (string->number month) 1)\n\
    \                  (= (string->number month) 3)\n                  (= (string->number\
    \ month) 5)\n                  (= (string->number month) 7)\n                \
    \  (= (string->number month) 8)\n                  (= (string->number month) 10)\n\
    \                  (= (string->number month) 12))\n             (and (<= (string->number\
    \ day) 31)\n                  (>= (string->number day) 1)))\n            ((and\
    \ (= (string->number month) 4)\n                  (= (string->number month) 6)\n\
    \                  (= (string->number month) 9)\n                  (= (string->number\
    \ month) 11))\n             (and (<= (string->number day) 30)\n              \
    \    (>= (string->number day) 1)))\n            ((= (string->number month) 2)\n\
    \             (and (<= (string->number day) 29)\n                  (>= (string->number\
    \ day) 1)))\n            (else #f)))\n", "  (define (valid-date-helper date)\n\
    \    (define (valid-date-helper-helper date)\n      (define (valid-date-helper-helper-helper\
    \ date)\n        (define (valid-date-helper-helper-helper-helper date)\n     \
    \     (define (valid-date-helper-helper-helper-helper-helper date)\n         \
    \   (define (valid-date-helper-helper-helper-helper-helper-helper date)\n    \
    \          (define (valid-date-helper-helper-helper-helper-helper-helper-helper\
    \ date)\n                (define (valid-date-helper-helper-helper-helper-helper-helper-helper-helper\
    \ date)\n                  (define (valid-date-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ date)\n                    (define (valid-date-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ date)\n                      (define (valid-date-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ date)\n                        (define (valid-date-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ date)\n                          (define (valid-date-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ date)\n                            (define (valid-date-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ date)\n                              (define (valid-date-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ date", "  (define (valid-month month)\n    (and (>= month 1) (<= month 12)))\n\
    \  (define (valid-day month day)\n    (and (>= day 1)\n         (<= day (cond\n\
    \                  [(member month '(1 3 5 7 8 10 12)) 31]\n                  [(member\
    \ month '(4 6 9 11)) 30]\n                  [(= month 2) 29]\n               \
    \   [else 0]))))\n  (define (valid-year year)\n    (and (>= year 0) (<= year 9999)))\n\
    \  (define (valid-date-format date)\n    (and (regexp-match? #rx\"^[0-9]{2}-[0-9]{2}-[0-9]{4}$\"\
    \ date)\n         (let ([date-parts (string-split date \"-\")])\n           (and\
    \ (valid-month (string->number (list-ref date-parts 0)))\n                (valid-day\
    \ (string->number (list-ref date-parts 0))\n                           (string->number\
    \ (list-ref date-parts 1)))\n                (valid-year (string->number (list-ref\
    \ date-parts 2)))))))\n  (valid-date-format date))\n", "  (define (valid-month\
    \ month)\n    (and (not (empty? month))\n         (not (< (string->number month)\
    \ 1))\n         (not (> (string->number month) 12))))\n  (define (valid-day day)\n\
    \    (and (not (empty? day))\n         (not (< (string->number day) 1))\n    \
    \     (not (> (string->number day) 31))))\n  (define (valid-year year)\n    (and\
    \ (not (empty? year))\n         (not (< (string->number year) 1))))\n  (define\
    \ (valid-date-format date)\n    (regexp-match? #rx\"^[0-9]{2}-[0-9]{2}-[0-9]{4}$\"\
    \ date))\n  (define (valid-day-for-month day month)\n    (cond\n      [(and (equal?\
    \ month \"01\") (not (> (string->number day) 31))) #t]\n      [(and (equal? month\
    \ \"02\") (not (> (string->number day) 29))) #t]\n      [(and (equal? month \"\
    03\") (not (> (string->number day) 31))) #t]\n      [(and (equal? month \"04\"\
    ) (not (> (string->number day) 30))) #t]\n      [(and (equal? month \"05\") (not\
    \ (> (string->number day) 31))) #t]\n      [(and (equal? month \"06\") (not (>\
    \ (string->number day) 30))) #t]\n      [(and (equal? month \"07\") (not (> (string->number\
    \ day) 31))) #t]\n      [(and (equal? month \"08\") (not (> (string->number day)\
    \ 31))) #t]\n      [(and (equal? month \"09\") (not (> (string->number day) 30)))\
    \ #t]\n      [(and (equal? month \"10\") (not (> (string->number day) 31))) #t]\n\
    \      [(and (equal? month \"11\") (not (> (string->number day) 30))) #t]\n  \
    \    [(and (equal? month \"12\") (not (> (string->number day) 31))) #t]\n    \
    \  [else #f]))\n  (define", "  (define (valid-month month)\n    (and (>= month\
    \ 1) (<= month 12)))\n  (define (valid-day day month)\n    (cond\n      [(and\
    \ (member month '(1 3 5 7 8 10 12)) (>= day 1) (<= day 31)) #t]\n      [(and (member\
    \ month '(4 6 9 11)) (>= day 1) (<= day 30)) #t]\n      [(and (= month 2) (>=\
    \ day 1) (<= day 29)) #t]\n      [else #f]))\n  (define (valid-year year)\n  \
    \  (and (>= year 1) (<= year 9999)))\n  (define (valid-date-format date)\n   \
    \ (and (regexp-match? #rx\"^[0-9]{2}-[0-9]{2}-[0-9]{4}$\" date) #t))\n  (define\
    \ (split-date date)\n    (map string->number (regexp-split #rx\"-\" date)))\n\
    \  (define (valid-date-parts date)\n    (let* ([date-parts (split-date date)]\n\
    \           [month (car date-parts)]\n           [day (cadr date-parts)]\n   \
    \        [year (caddr date-parts)])\n      (and (valid-month month)\n        \
    \   (valid-day day month)\n           (valid-year year))))\n  (and (valid-date-format\
    \ date)\n       (valid-date-parts date)))\n", "  (define (valid-month month)\n\
    \    (and (integer? month)\n         (and (>= month 1) (<= month 12))))\n  (define\
    \ (valid-day month day)\n    (and (integer? day)\n         (and (>= day 1)\n \
    \             (cond\n                [(or (= month 1) (= month 3) (= month 5)\
    \ (= month 7) (= month 8) (= month 10) (= month 12)) (<= day 31)]\n          \
    \      [(or (= month 4) (= month 6) (= month 9) (= month 11)) (<= day 30)]\n \
    \               [(= month 2) (<= day 29)]))))\n  (define (valid-year year)\n \
    \   (and (integer? year)\n         (and (>= year 0) (<= year 9999))))\n  (define\
    \ (valid-date-format date)\n    (and (regexp-match? #rx\"^[0-9]{2}-[0-9]{2}-[0-9]{4}$\"\
    \ date)\n         (let ([date-parts (string-split date #\"-\")])\n           (and\
    \ (valid-month (string->number (list-ref date-parts 0)))\n                (valid-day\
    \ (string->number (list-ref date-parts 0)) (string->number (list-ref date-parts\
    \ 1)))\n                (valid-year (string->number (list-ref date-parts 2)))))))\n\
    \  (and (not (string=? date \"\"))\n       (valid-date-format date)))\n", "  (define\
    \ (valid-month month)\n    (and (not (empty? month))\n         (and (not (empty?\
    \ (cdr month)))\n              (not (empty? (cddr month))))\n         (and (char-numeric?\
    \ (car month))\n              (char-numeric? (cadr month)))\n         (and (<=\
    \ (char->integer (car month)) 1)\n              (<= (char->integer (cadr month))\
    \ 2))\n         (and (<= (char->integer (car month)) 9)\n              (<= (char->integer\
    \ (cadr month)) 9))))\n  (define (valid-day day)\n    (and (not (empty? day))\n\
    \         (and (not (empty? (cdr day)))\n              (not (empty? (cddr day))))\n\
    \         (and (char-numeric? (car day))\n              (char-numeric? (cadr day)))\n\
    \         (and (<= (char->integer (car day)) 3)\n              (<= (char->integer\
    \ (cadr day)) 1))\n         (and (<= (char->integer (car day)) 9)\n          \
    \    (<= (char->integer (cadr day)) 9))))\n  (define (valid-year year)\n    (and\
    \ (not (empty? year))\n         (and (not (empty? (cdr year)))\n             \
    \ (not (empty? (cddr year)))\n              (not (empty? (cdddr year))))\n   \
    \      (and (char-numeric? (car year))\n              (char-numeric? (cadr year))\n\
    \              (char-numeric? (caddr year))\n              (char-numeric? (cadddr\
    \ year)))\n         (and (<= (char->integer (car year)) 2)\n              (<=\
    \ (char->integer (cadr year)) 0)\n              (<= (char->integer (caddr year))\
    \ 0)\n              (<= (char->integer (cadddr year)) 0))\n         (and (<= (char->integer\
    \ (car year)) 9)\n              (<= (char->integer (cadr year)) 9)\n         \
    \     (<= (char->integer (caddr year)) 9)\n              (<= (char->integer (cadddr",
  "  (define (valid-date-helper date)\n    (define (valid-month month)\n      (and\
    \ (not (empty? month))\n           (and (not (empty? (cdr month)))\n         \
    \       (and (not (empty? (cddr month)))\n                     (and (not (empty?\
    \ (cdddr month)))\n                          (and (not (empty? (cddddr month)))))))))\n\
    \    (define (valid-day day)\n      (and (not (empty? day))\n           (and (not\
    \ (empty? (cdr day)))\n                (and (not (empty? (cddr day)))\n      \
    \               (and (not (empty? (cdddr day)))\n                          (and\
    \ (not (empty? (cddddr day)))))))))\n    (define (valid-year year)\n      (and\
    \ (not (empty? year))\n           (and (not (empty? (cdr year)))\n           \
    \     (and (not (empty? (cddr year)))\n                     (and (not (empty?\
    \ (cdddr year)))\n                          (and (not (empty? (cddddr year)))))))))\n\
    \    (define (valid-month-num month)\n      (and (not (empty? month))\n      \
    \     (and (not (empty? (cdr month)))\n                (and (not (empty? (cddr\
    \ month)))\n                     (and (not (empty? (cdddr month)))\n         \
    \                 (and (not (empty? (cddddr month)))))))))\n    (define (valid-day-num\
    \ day)\n      (and (not (empty? day))\n           (and (not (empty? (cdr day)))\n\
    \                (and (not (empty? (cddr day)))\n                     (and (not\
    \ (empty? (cdddr day)))\n                          (and (not (empty? (cddddr day)))))))))\n\
    \    (define (valid-year-num year)\n      (and (not (empty? year))\n         \
    \  (and (not (empty? (cdr year)))\n                (and (not (empty? (cddr year)))\n\
    \                     (and (not (empty? (cdddr year)))\n                     \
    \     (and (not (", "  (define (valid-month month)\n    (and (not (empty? month))\n\
    \         (not (empty? (string-&gt;number month)))\n         (not (&lt; (string-&gt;number\
    \ month) 1))\n         (not (&gt; (string-&gt;number month) 12))))\n  (define\
    \ (valid-day day)\n    (and (not (empty? day))\n         (not (empty? (string-&gt;number\
    \ day)))\n         (not (&lt; (string-&gt;number day) 1))\n         (not (&gt;\
    \ (string-&gt;number day) 31))))\n  (define (valid-year year)\n    (and (not (empty?\
    \ year))\n         (not (empty? (string-&gt;number year)))\n         (not (&lt;\
    \ (string-&gt;number year) 1))))\n  (define (valid-date-format date)\n    (and\
    \ (not (empty? date))\n         (regexp-match? #rx\"^[0-9]{2}-[0-9]{2}-[0-9]{4}$\"\
    \ date)))\n  (and (valid-date-format date)\n       (valid-month (substring date\
    \ 0 2))\n       (valid-day (substring date 3 5))\n       (valid-year (substring\
    \ date 6 10))))\n", "  (define (valid-month month)\n    (and (integer? month)\n\
    \         (and (>= month 1) (<= month 12))))\n  (define (valid-day month day)\n\
    \    (and (integer? day)\n         (and (>= day 1)\n              (if (or (= month\
    \ 1) (= month 3) (= month 5) (= month 7) (= month 8) (= month 10) (= month 12))\n\
    \                  (<= day 31)\n                  (if (or (= month 4) (= month\
    \ 6) (= month 9) (= month 11))\n                      (<= day 30)\n          \
    \            (if (= month 2)\n                          (<= day 29)\n        \
    \                  #f))))))\n  (define (valid-year year)\n    (and (integer? year)\n\
    \         (>= year 0)))\n  (define (valid-date-format date)\n    (and (string?\
    \ date)\n         (string-match #rx\"^[0-9]{2}-[0-9]{2}-[0-9]{4}$\" date)))\n\
    \  (define (valid-date-parts date)\n    (let ((date-parts (string-split date #\\\
    -)))\n      (and (valid-month (string->number (list-ref date-parts 0)))\n    \
    \       (valid-day (string->number (list-ref date-parts 0)) (string->number (list-ref\
    \ date-parts 1)))\n           (valid-year (string->number (list-ref date-parts\
    \ 2))))))\n  (and (valid-date-format date)\n       (valid-date-parts date)))\n",
  "  (define (valid-month month)\n    (and (integer? month)\n         (and (&lt;=\
    \ 1 month)\n              (&lt;= month 12))))\n  (define (valid-day day)\n   \
    \ (and (integer? day)\n         (and (&lt;= 1 day)\n              (&lt;= day 31))))\n\
    \  (define (valid-year year)\n    (and (integer? year)\n         (and (&lt;= 1\
    \ year)\n              (&lt;= year 9999))))\n  (define (valid-date-format date)\n\
    \    (and (regexp-match? #rx\"^[0-9]{2}-[0-9]{2}-[0-9]{4}$\" date)\n         (let*\
    \ ([date-parts (string-split date #\\-)]\n                [month (string-&gt;number\
    \ (list-ref date-parts 0))]\n                [day (string-&gt;number (list-ref\
    \ date-parts 1))]\n                [year (string-&gt;number (list-ref date-parts\
    \ 2))])\n           (and (valid-month month)\n                (valid-day day)\n\
    \                (valid-year year)))))\n  (valid-date-format date))\n", "  (and\
    \ (regexp-match? #rx\"^[0-9]{2}-[0-9]{2}-[0-9]{4}$\" date)\n       (let* ([date-parts\
    \ (string-split date #\\-)])\n         (and (not (empty? date-parts))\n      \
    \        (let* ([month (string->number (list-ref date-parts 0))]\n           \
    \          [day (string->number (list-ref date-parts 1))]\n                  \
    \   [year (string->number (list-ref date-parts 2))])\n                (and (and\
    \ (<= 1 month 12)\n                          (<= 1 day 31))\n                \
    \     (or (and (= month 1) (= day 31))\n                         (and (= month\
    \ 3) (= day 31))\n                         (and (= month 5) (= day 31))\n    \
    \                     (and (= month 7) (= day 31))\n                         (and\
    \ (= month 8) (= day 31))\n                         (and (= month 10) (= day 31))\n\
    \                         (and (= month 12) (= day 31))\n                    \
    \     (and (= month 4) (= day 30))\n                         (and (= month 6)\
    \ (= day 30))\n                         (and (= month 9) (= day 30))\n       \
    \                  (and (= month 11) (= day 30))\n                         (and\
    \ (= month 2)\n                              (or (= day 29)\n                \
    \                  (and (= day 28)\n                                       (not\
    \ (zero? (modulo year 4))))))))))))))\n", "  (define (valid-month month)\n   \
    \ (and (<= 1 month) (<= month 12)))\n  (define (valid-day month day)\n    (cond\n\
    \      [(or (= month 1) (= month 3) (= month 5) (= month 7) (= month 8) (= month\
    \ 10) (= month 12))\n       (and (<= 1 day) (<= day 31))]\n      [(or (= month\
    \ 4) (= month 6) (= month 9) (= month 11))\n       (and (<= 1 day) (<= day 30))]\n\
    \      [(= month 2)\n       (and (<= 1 day) (<= day 29))]))\n  (define (valid-year\
    \ year)\n    (and (<= 1 year) (<= year 9999)))\n  (define (valid-format date)\n\
    \    (regexp-match? #rx\"^[0-9]{2}-[0-9]{2}-[0-9]{4}$\" date))\n  (define (split-date\
    \ date)\n    (regexp-match #rx\"^([0-9]{2})-([0-9]{2})-([0-9]{4})$\" date))\n\
    \  (define (valid-date-helper date)\n    (define (valid-date-helper-helper date)\n\
    \      (define (valid-date-helper-helper-helper date)\n        (define (valid-date-helper-helper-helper-helper\
    \ date)\n          (define (valid-date-helper-helper-helper-helper-helper date)\n\
    \            (define (valid-date-helper-helper-helper-helper-helper-helper date)\n\
    \              (define (valid-date-helper-helper-helper-helper-helper-helper-helper\
    \ date)\n                (define (valid-date-helper-helper-helper-helper-helper-helper-helper-helper\
    \ date)\n                  (define (valid-date-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ date)\n                    (define (valid-date-helper-helper-", "  (define (valid-month\
    \ month)\n    (and (>= month 1) (<= month 12)))\n  (define (valid-day month day)\n\
    \    (cond\n      [(= month 1) (and (>= day 1) (<= day 31))]\n      [(= month\
    \ 3) (and (>= day 1) (<= day 31))]\n      [(= month 5) (and (>= day 1) (<= day\
    \ 31))]\n      [(= month 7) (and (>= day 1) (<= day 31))]\n      [(= month 8)\
    \ (and (>= day 1) (<= day 31))]\n      [(= month 10) (and (>= day 1) (<= day 31))]\n\
    \      [(= month 12) (and (>= day 1) (<= day 31))]\n      [(= month 4) (and (>=\
    \ day 1) (<= day 30))]\n      [(= month 6) (and (>= day 1) (<= day 30))]\n   \
    \   [(= month 9) (and (>= day 1) (<= day 30))]\n      [(= month 11) (and (>= day\
    \ 1) (<= day 30))]\n      [(= month 2) (and (>= day 1) (<= day 29))]))\n  (define\
    \ (valid-year year)\n    (and (>= year 1) (<= year 9999)))\n  (define (valid-date-format\
    \ date)\n    (and (regexp-match? #rx\"^[0-9]{2}-[0-9]{2}-[0-9]{4}$\" date)\n \
    \        (regexp-match? #rx\"^[0-9]{2}-[0-9]{2}-[0-9]{4}$\" date)))\n  (define\
    \ (valid-date-parts date)\n    (let* ([parts (string-split date \"-\")]\n    \
    \       [month (string->number (list-ref parts 0))]\n           [day (string->number\
    \ (list-ref parts 1))]\n           [year (string->number (list-ref parts 2))])\n\
    \      (and (valid-month month)\n           (valid-day month day)\n          \
    \ (valid-year year))))\n  (and (not (string=", "  (and (not (empty? date))\n \
    \      (valid-month date)\n       (valid-day date)\n       (valid-year date)\n\
    \       (valid-format date)))\n", "  (define (valid-month month)\n    (and (not\
    \ (empty? month))\n         (not (empty? (string-&gt;number month)))\n       \
    \  (not (&lt; (string-&gt;number month) 1))\n         (not (&gt; (string-&gt;number\
    \ month) 12))))\n  (define (valid-day day)\n    (and (not (empty? day))\n    \
    \     (not (empty? (string-&gt;number day)))\n         (not (&lt; (string-&gt;number\
    \ day) 1))\n         (not (&gt; (string-&gt;number day) 31))))\n  (define (valid-year\
    \ year)\n    (and (not (empty? year))\n         (not (empty? (string-&gt;number\
    \ year)))\n         (not (&lt; (string-&gt;number year) 1))))\n  (define (valid-date-format\
    \ date)\n    (and (regexp-match #rx\"^[0-9]{2}-[0-9]{2}-[0-9]{4}$\" date)\n  \
    \       (not (regexp-match #rx\"^[0-9]{2}/[0-9]{2}/[0-9]{4}$\" date))))\n  (define\
    \ (valid-date-parts date)\n    (define date-parts (string-split date #\\-)\n \
    \     (and (valid-month (list-ref date-parts 0))\n           (valid-day (list-ref\
    \ date-parts 1))\n           (valid-year (list-ref date-parts 2))))\n  (and (valid-date-format\
    \ date)\n       (valid-date-parts date)))\n</code>\nI'm not sure if this is the\
    \ best way to do it, but it works.\n", "  (let* ([date-parts (string-split date\
    \ \"-\")]\n         [month (string->number (vector-ref date-parts 0))]\n     \
    \    [day (string->number (vector-ref date-parts 1))]\n         [year (string->number\
    \ (vector-ref date-parts 2))])\n    (and (not (empty? date))\n         (and (not\
    \ (< day 0))\n              (or (and (or (= month 1) (= month 3) (= month 5) (=\
    \ month 7) (= month 8) (= month 10) (= month 12))\n                       (<=\
    \ day 31))\n                  (and (or (= month 4) (= month 6) (= month 9) (=\
    \ month 11))\n                       (<= day 30))\n                  (and (= month\
    \ 2)\n                       (<= day 29))))\n         (and (not (< month 0))\n\
    \              (<= month 12))\n         (and (not (< year 0))\n              (<=\
    \ year 9999)))))\n", "  (define (valid-month month)\n    (and (integer? month)\n\
    \         (and (>= month 1) (<= month 12))))\n  (define (valid-day month day)\n\
    \    (and (integer? day)\n         (and (>= day 1)\n              (cond ((or (=\
    \ month 1) (= month 3) (= month 5) (= month 7) (= month 8) (= month 10) (= month\
    \ 12))\n                     (<= day 31))\n                    ((or (= month 4)\
    \ (= month 6) (= month 9) (= month 11))\n                     (<= day 30))\n \
    \                   ((= month 2)\n                     (<= day 29))))))\n  (define\
    \ (valid-year year)\n    (and (integer? year)\n         (and (>= year 0) (<= year\
    \ 9999))))\n  (define (valid-date-format date)\n    (regexp-match? #rx\"^[0-9]{2}-[0-9]{2}-[0-9]{4}$\"\
    \ date))\n  (define (valid-date-parts date)\n    (let* ([date-parts (string-split\
    \ date #\\-)]\n           [month (string->number (list-ref date-parts 0))]\n \
    \          [day (string->number (list-ref date-parts 1))]\n           [year (string->number\
    \ (list-ref date-parts 2))])\n      (and (valid-month month)\n           (valid-day\
    \ month day)\n           (valid-year year))))\n  (and (valid-date-format date)\n\
    \       (valid-date-parts date)))\n", "  (define (valid-month month)\n    (and\
    \ (not (empty? month))\n         (and (not (empty? (rest month)))\n          \
    \    (not (empty? (rest (rest month)))))))\n  (define (valid-day day)\n    (and\
    \ (not (empty? day))\n         (and (not (empty? (rest day)))\n              (not\
    \ (empty? (rest (rest day)))))))\n  (define (valid-year year)\n    (and (not (empty?\
    \ year))\n         (and (not (empty? (rest year)))\n              (not (empty?\
    \ (rest (rest year))))\n              (not (empty? (rest (rest (rest year))))))))\n\
    \  (define (valid-month-day month day)\n    (cond ((or (equal? month \"01\")\n\
    \               (equal? month \"03\")\n               (equal? month \"05\")\n\
    \               (equal? month \"07\")\n               (equal? month \"08\")\n\
    \               (equal? month \"10\")\n               (equal? month \"12\"))\n\
    \           (and (not (string&lt;? day \"01\"))\n                (not (string&gt;?\
    \ day \"31\"))))\n          ((or (equal? month \"04\")\n               (equal?\
    \ month \"06\")\n               (equal? month \"09\")\n               (equal?\
    \ month \"11\"))\n           (and (not (string&lt;? day \"01\"))\n           \
    \     (not (string&gt;? day \"30\"))))\n          ((equal? month \"02\")\n   \
    \        (and (not (string&lt;? day \"01\"))\n                (not (string&gt;?\
    \ day \"29\"))))))\n  (define (valid-month-num month)\n    (and (not (string&lt;?\
    \ month \"01\"))\n         (not (string&gt;? month \"12\"))))\n  (define (valid-date-format\
    \ date)\n    (and (equal? (string-length date) 10)\n         (equal? (string-ref\
    \ date 2) #\\-)))\n  (define (valid-date-parts date)\n    (let ((date-parts (string-split\
    \ date #\\-)))\n      (and (valid-month (first date-parts))\n           (valid-",
  "  (define (valid-month month)\n    (and (<= 1 month) (<= month 12)))\n  (define\
    \ (valid-day month day)\n    (cond\n      [(or (= month 1) (= month 3) (= month\
    \ 5) (= month 7) (= month 8) (= month 10) (= month 12))\n       (and (<= 1 day)\
    \ (<= day 31))]\n      [(or (= month 4) (= month 6) (= month 9) (= month 11))\n\
    \       (and (<= 1 day) (<= day 30))]\n      [(= month 2)\n       (and (<= 1 day)\
    \ (<= day 29))]))\n  (define (valid-year year)\n    (and (<= 1 year) (<= year\
    \ 9999)))\n  (define (valid-date-format date)\n    (regexp-match? #rx\"^[0-9]{2}-[0-9]{2}-[0-9]{4}$\"\
    \ date))\n  (and (not (string=? date \"\"))\n       (valid-date-format date)\n\
    \       (let* ([month (string->number (regexp-match #rx\"^[0-9]{2}-\" date))]\n\
    \              [day (string->number (regexp-match #rx\"-[0-9]{2}-\" date))]\n\
    \              [year (string->number (regexp-match #rx\"-[0-9]{4}$\" date))])\n\
    \         (and (valid-month month)\n              (valid-day month day)\n    \
    \          (valid-year year)))))\n", "  (define (valid-date-helper date)\n   \
    \ (define (valid-date-helper-helper date)\n      (define (valid-date-helper-helper-helper\
    \ date)\n        (define (valid-date-helper-helper-helper-helper date)\n     \
    \     (define (valid-date-helper-helper-helper-helper-helper date)\n         \
    \   (define (valid-date-helper-helper-helper-helper-helper-helper date)\n    \
    \          (define (valid-date-helper-helper-helper-helper-helper-helper-helper\
    \ date)\n                (define (valid-date-helper-helper-helper-helper-helper-helper-helper-helper\
    \ date)\n                  (define (valid-date-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ date)\n                    (define (valid-date-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ date)\n                      (define (valid-date-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ date)\n                        (define (valid-date-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ date)\n                          (define (valid-date-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ date)\n                            (define (valid-date-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ date)\n                              (define (valid-date-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ date", "  (define (valid-month month)\n    (and (not (empty? month))\n     \
    \    (and (>= month 1) (<= month 12))))\n  (define (valid-day month day)\n   \
    \ (and (not (empty? day))\n         (and (>= day 1)\n              (cond\n   \
    \             [(or (= month 1) (= month 3) (= month 5) (= month 7) (= month 8)\
    \ (= month 10) (= month 12)) (<= day 31)]\n                [(or (= month 4) (=\
    \ month 6) (= month 9) (= month 11)) (<= day 30)]\n                [(= month 2)\
    \ (<= day 29)]))))\n  (define (valid-year year)\n    (and (not (empty? year))\n\
    \         (and (>= year 1) (<= year 9999))))\n  (define (valid-date-format date)\n\
    \    (regexp-match? #rx\"^[0-9]{2}-[0-9]{2}-[0-9]{4}$\" date))\n  (define (split-date\
    \ date)\n    (regexp-match #rx\"^([0-9]{2})-([0-9]{2})-([0-9]{4})$\" date))\n\
    \  (define (valid-date-parts date)\n    (define (valid-date-parts-helper date)\n\
    \      (let ([month (string->number (list-ref date 1))]\n            [day (string->number\
    \ (list-ref date 2))]\n            [year (string->number (list-ref date 3))])\n\
    \        (and (valid-month month)\n             (valid-day month day)\n      \
    \       (valid-year year))))\n    (cond\n      [(empty? date) #f]\n      [(valid-date-parts-helper\
    \ date) #t]\n      [else #f]))\n  (and (valid-date-format date)\n       (valid-date-parts\
    \ (split-date date))))\n", "  (define (valid-month month)\n    (and (not (string=?\
    \ month \"\"))\n         (and (<= 1 (string->number month))\n              (<=\
    \ (string->number month) 12))))\n  (define (valid-day day)\n    (and (not (string=?\
    \ day \"\"))\n         (and (<= 1 (string->number day))\n              (<= (string->number\
    \ day) 31))))\n  (define (valid-year year)\n    (and (not (string=? year \"\"\
    ))\n         (and (<= 1 (string->number year))\n              (<= (string->number\
    \ year) 9999))))\n  (define (valid-date-format date)\n    (and (regexp-match?\
    \ #rx\"^[0-9]{2}-[0-9]{2}-[0-9]{4}$\" date)\n         (not (regexp-match? #rx\"\
    ^[0-9]{2}/[0-9]{2}/[0-9]{4}$\" date))))\n  (define (valid-date-parts date)\n \
    \   (let ((date-parts (string-split date #\\-)))\n      (and (valid-month (list-ref\
    \ date-parts 0))\n           (valid-day (list-ref date-parts 1))\n           (valid-year\
    \ (list-ref date-parts 2)))))\n  (and (valid-date-format date)\n       (valid-date-parts\
    \ date)))\n", "  (define (valid-month month)\n    (and (>= month 1) (<= month\
    \ 12)))\n  (define (valid-day month day)\n    (and (>= day 1)\n         (<= day\
    \ (cond [(or (= month 1) (= month 3) (= month 5) (= month 7) (= month 8) (= month\
    \ 10) (= month 12)) 31]\n                      [(or (= month 4) (= month 6) (=\
    \ month 9) (= month 11)) 30]\n                      [(= month 2) 29]\n       \
    \               [else 0]))))\n  (define (valid-year year)\n    (and (>= year 0)\
    \ (<= year 9999)))\n  (define (valid-date-format date)\n    (and (regexp-match?\
    \ #rx\"^[0-9]{2}-[0-9]{2}-[0-9]{4}$\" date)\n         (not (regexp-match? #rx\"\
    ^[0-9]{2}/[0-9]{2}/[0-9]{4}$\" date))))\n  (define (split-date date)\n    (regexp-match\
    \ #rx\"^([0-9]{2})-([0-9]{2})-([0-9]{4})$\" date))\n  (define (get-month date)\n\
    \    (string->number (vector-ref (split-date date) 1)))\n  (define (get-day date)\n\
    \    (string->number (vector-ref (split-date date) 2)))\n  (define (get-year date)\n\
    \    (string->number (vector-ref (split-date date) 3)))\n  (and (not (string=?\
    \ date \"\"))\n       (valid-date-format date)\n       (valid-month (get-month\
    \ date))\n       (valid-day (get-month date) (get-day date))\n       (valid-year\
    \ (get-year date))))\n", "  (define (valid-month month)\n    (and (not (empty?\
    \ month))\n         (not (empty? (string-trim month)))\n         (not (string=?\
    \ month \"0\"))\n         (not (string=? month \"00\"))\n         (not (> (string->number\
    \ month) 12))\n         (not (< (string->number month) 1))))\n  (define (valid-day\
    \ day)\n    (and (not (empty? day))\n         (not (empty? (string-trim day)))\n\
    \         (not (string=? day \"0\"))\n         (not (string=? day \"00\"))\n \
    \        (not (> (string->number day) 31))\n         (not (< (string->number day)\
    \ 1))))\n  (define (valid-year year)\n    (and (not (empty? year))\n         (not\
    \ (empty? (string-trim year)))\n         (not (string=? year \"0\"))\n       \
    \  (not (string=? year \"00\"))\n         (not (> (string->number year) 9999))\n\
    \         (not (< (string->number year) 1))))\n  (define (valid-date-format date)\n\
    \    (and (not (empty? date))\n         (not (empty? (string-trim date)))\n  \
    \       (not (string=? date \"0\"))\n         (not (string=? date \"00\"))\n \
    \        (not (string=? date \"000\"))\n         (not (string=? date \"0000\"\
    ))\n         (not (string=? date \"00000\"))\n         (not (string=? date \"\
    000000\"))\n         (not (string=? date \"0000000\"))\n         (not (string=?\
    \ date \"00000000\"))\n         (not (string=? date \"000000000\"))\n        \
    \ (not (string=? date \"0000000000\"))\n         (not (string=? date \"00000000000\"\
    ))\n         (not (string=? date \"000000000000\"))\n         (not (string=? date\
    \ \"0000000000000\"))\n         (not (string=? date \"00000000000000\"))\n   \
    \      (not (string=? date \"000000000000000\"))\n         (not (string=? date\
    \ \"0000000000000000\"))\n         (not (string=? date \"00000000000000000\"))\n\
    \         (not (string", "  (define (valid-date-helper date)\n    (define (valid-date-helper-helper\
    \ date)\n      (define (valid-date-helper-helper-helper date)\n        (define\
    \ (valid-date-helper-helper-helper-helper date)\n          (define (valid-date-helper-helper-helper-helper-helper\
    \ date)\n            (define (valid-date-helper-helper-helper-helper-helper-helper\
    \ date)\n              (define (valid-date-helper-helper-helper-helper-helper-helper-helper\
    \ date)\n                (define (valid-date-helper-helper-helper-helper-helper-helper-helper-helper\
    \ date)\n                  (define (valid-date-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ date)\n                    (define (valid-date-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ date)\n                      (define (valid-date-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ date)\n                        (define (valid-date-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ date)\n                          (define (valid-date-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ date)\n                            (define (valid-date-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ date)\n                              (define (valid-date-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ date", "  (define (valid-date-helper date)\n    (define (valid-date-helper-helper\
    \ date)\n      (define (valid-date-helper-helper-helper date)\n        (define\
    \ (valid-date-helper-helper-helper-helper date)\n          (define (valid-date-helper-helper-helper-helper-helper\
    \ date)\n            (define (valid-date-helper-helper-helper-helper-helper-helper\
    \ date)\n              (define (valid-date-helper-helper-helper-helper-helper-helper-helper\
    \ date)\n                (define (valid-date-helper-helper-helper-helper-helper-helper-helper-helper\
    \ date)\n                  (define (valid-date-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ date)\n                    (define (valid-date-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ date)\n                      (define (valid-date-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ date)\n                        (define (valid-date-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ date)\n                          (define (valid-date-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ date)\n                            (define (valid-date-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ date)\n                              (define (valid-date-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ date", "  (define (valid-month month)\n    (and (&gt;= month 1) (&lt;= month\
    \ 12)))\n  (define (valid-day month day)\n    (cond\n      [(and (= month 1) (=\
    \ month 3) (= month 5) (= month 7) (= month 8) (= month 10) (= month 12))\n  \
    \     (and (&gt;= day 1) (&lt;= day 31))]\n      [(and (= month 4) (= month 6)\
    \ (= month 9) (= month 11))\n       (and (&gt;= day 1) (&lt;= day 30))]\n    \
    \  [(= month 2)\n       (and (&gt;= day 1) (&lt;= day 29))]))\n  (define (valid-year\
    \ year)\n    (and (&gt;= year 1) (&lt;= year 9999)))\n  (define (valid-format\
    \ date)\n    (regexp-match? #rx\"^[0-9]{2}-[0-9]{2}-[0-9]{4}$\" date))\n  (and\
    \ (not (string=? date \"\"))\n       (valid-format date)\n       (valid-month\
    \ (string-&gt;number (regexp-match #rx\"^[0-9]{2}-\" date)))\n       (valid-day\
    \ (string-&gt;number (regexp-match #rx\"^[0-9]{2}-\" date))\n                \
    \  (string-&gt;number (regexp-match #rx\"-[0-9]{2}-\" date)))\n       (valid-year\
    \ (string-&gt;number (regexp-match #rx\"-[0-9]{4}$\" date)))))\n</code>\n", " \
    \ (define (valid-month month)\n    (and (not (string=? month \"\"))\n        \
    \ (and (&lt;= 1 month) (&lt;= month 12))))\n  (define (valid-day month day)\n\
    \    (and (not (string=? day \"\"))\n         (and (&lt;= 1 day)\n           \
    \   (cond\n                [(or (= month 1) (= month 3) (= month 5) (= month 7)\
    \ (= month 8) (= month 10) (= month 12)) (&lt;= day 31)]\n                [(or\
    \ (= month 4) (= month 6) (= month 9) (= month 11)) (&lt;= day 30)]\n        \
    \        [(= month 2) (&lt;= day 29)]))))\n  (define (valid-year year)\n    (and\
    \ (not (string=? year \"\"))\n         (and (&lt;= 1 year) (&lt;= year 9999))))\n\
    \  (define (valid-date-format date)\n    (string-match #rx\"^[0-9]{2}-[0-9]{2}-[0-9]{4}$\"\
    \ date))\n  (define (split-date date)\n    (string-split date #rx\"-\"))\n  (define\
    \ (valid-date-parts date)\n    (define (valid-date-parts-helper date)\n      (cond\n\
    \        [(empty? date) #t]\n        [(valid-month (first date)) (valid-date-parts-helper\
    \ (rest date))]\n        [else #f]))\n    (valid-date-parts-helper (split-date\
    \ date)))\n  (and (valid-date-format date)\n       (valid-date-parts date)))\n\
    </code>\n", "  (define (valid-date-helper date)\n    (define (valid-date-helper-helper\
    \ date)\n      (define (valid-date-helper-helper-helper date)\n        (define\
    \ (valid-date-helper-helper-helper-helper date)\n          (define (valid-date-helper-helper-helper-helper-helper\
    \ date)\n            (define (valid-date-helper-helper-helper-helper-helper-helper\
    \ date)\n              (define (valid-date-helper-helper-helper-helper-helper-helper-helper\
    \ date)\n                (define (valid-date-helper-helper-helper-helper-helper-helper-helper-helper\
    \ date)\n                  (define (valid-date-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ date)\n                    (define (valid-date-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ date)\n                      (define (valid-date-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ date)\n                        (define (valid-date-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ date)\n                          (define (valid-date-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ date)\n                            (define (valid-date-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ date)\n                              (define (valid-date-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ date", "  (cond\n    [(empty? date) false]\n    [(regexp-match #rx\"^(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])-[0-9]{4}$\"\
    \ date)\n     (let ([month (string->number (regexp-match #rx\"^(0[1-9]|1[0-2])\"\
    \ date))]\n           [day (string->number (regexp-match #rx\"^(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])\"\
    \ date))])\n       (cond\n         [(or (< month 1) (> month 12)) false]\n   \
    \      [(or (< day 1) (> day 31)) false]\n         [(and (member month '(1 3 5\
    \ 7 8 10 12)) (< day 1) (> day 31)) false]\n         [(and (member month '(4 6\
    \ 9 11)) (< day 1) (> day 30)) false]\n         [(and (= month 2) (< day 1) (>\
    \ day 29)) false]\n         [else true]))]\n    [else false]))\n", "  (define\
    \ (valid-month month)\n    (and (&gt;= month 1) (&lt;= month 12)))\n  (define\
    \ (valid-day month day)\n    (cond [(or (= month 1) (= month 3) (= month 5) (=\
    \ month 7) (= month 8) (= month 10) (= month 12))\n           (and (&gt;= day\
    \ 1) (&lt;= day 31))]\n          [(or (= month 4) (= month 6) (= month 9) (= month\
    \ 11))\n           (and (&gt;= day 1) (&lt;= day 30))]\n          [(= month 2)\n\
    \           (and (&gt;= day 1) (&lt;= day 29))]))\n  (define (valid-year year)\n\
    \    (and (&gt;= year 1) (&lt;= year 9999)))\n  (define (valid-format date)\n\
    \    (regexp-match? #rx\"^\\d{2}-\\d{2}-\\d{4}$\" date))\n  (define (split-date\
    \ date)\n    (map string-&gt;number (regexp-split #rx\"-\" date)))\n  (define\
    \ (valid-date-parts date)\n    (let ([parts (split-date date)])\n      (and (valid-month\
    \ (list-ref parts 0))\n           (valid-day (list-ref parts 0) (list-ref parts\
    \ 1))\n           (valid-year (list-ref parts 2)))))\n  (and (valid-format date)\n\
    \       (valid-date-parts date)))\n</code>\n", "  (define (valid-month month)\n\
    \    (and (integer? month)\n         (<= 1 month 12)))\n  (define (valid-day month\
    \ day)\n    (and (integer? day)\n         (cond ((or (= month 1) (= month 3) (=\
    \ month 5) (= month 7) (= month 8) (= month 10) (= month 12))\n              \
    \  (<= 1 day 31))\n               ((or (= month 4) (= month 6) (= month 9) (=\
    \ month 11))\n                (<= 1 day 30))\n               ((= month 2)\n  \
    \              (<= 1 day 29)))))\n  (define (valid-year year)\n    (and (integer?\
    \ year)\n         (<= 1 year 9999)))\n  (define (valid-date-format date)\n   \
    \ (and (string? date)\n         (regexp-match #rx\"^[0-9]{2}-[0-9]{2}-[0-9]{4}$\"\
    \ date)))\n  (define (valid-date-parts date)\n    (let ([date-parts (string-split\
    \ date #\"-\")])\n      (and (= (length date-parts) 3)\n           (valid-month\
    \ (string->number (list-ref date-parts 0)))\n           (valid-day (string->number\
    \ (list-ref date-parts 0))\n                      (string->number (list-ref date-parts\
    \ 1)))\n           (valid-year (string->number (list-ref date-parts 2))))))\n\
    \  (and (valid-date-format date)\n       (valid-date-parts date)))\n"]
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
