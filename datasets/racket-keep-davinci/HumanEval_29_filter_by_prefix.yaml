name: HumanEval_29_filter_by_prefix
language: racket
prompt: "#lang racket\n\n;; Filter an input list of strings only for ones that start\
  \ with a given prefix.\n;; >>> filter_by_prefix([], 'a')\n;; []\n;; >>> filter_by_prefix(['abc',\
  \ 'bcd', 'cde', 'array'], 'a')\n;; ['abc', 'array']\n(define (filter_by_prefix strings\
  \ prefix)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate filter_by_prefix))\n\
  \    (check-equal? (candidate (list ) \"john\") (list ))\n    (check-equal? (candidate\
  \ (list \"xxx\" \"asd\" \"xxy\" \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list\
  \ \"xxx\" \"xxxAAA\" \"xxx\"))\n))\n\n(test-humaneval)"
completions: ["  (filter (lambda (s) (string-prefix? prefix s)) strings))\n", "  (filter\
    \ (lambda (s) (string-prefix? prefix s)) strings))\n", "  (filter (lambda (s)\
    \ (string-prefix? prefix s)) strings))\n", "  (filter (lambda (s) (string-prefix?\
    \ prefix s)) strings))\n", "  (filter (lambda (s) (string-prefix? prefix s)) strings))\n",
  "  (filter (lambda (s) (string-prefix? prefix s)) strings))\n", "  (filter (lambda\
    \ (s) (string-prefix? prefix s)) strings))\n", "  (filter (lambda (s) (string-prefix?\
    \ prefix s)) strings))\n", "  (filter (lambda (s) (string-prefix? prefix s)) strings))\n",
  "  (filter (lambda (string) (string-prefix? prefix string)) strings))\n", "  (filter\
    \ (lambda (s) (string-prefix? prefix s)) strings))\n", "  (filter (lambda (s)\
    \ (string-prefix? prefix s)) strings))\n", "  (filter (lambda (s) (string-prefix?\
    \ prefix s)) strings))\n", "  (filter (lambda (s) (string-prefix? prefix s)) strings))\n",
  "  (filter (lambda (string) (string-prefix? prefix string)) strings))\n", "  (filter\
    \ (lambda (s) (string-prefix? prefix s)) strings))\n", "  (filter (lambda (s)\
    \ (string-prefix? prefix s)) strings))\n", "  (filter (lambda (string) (string-prefix?\
    \ prefix string)) strings))\n", "  (filter (lambda (s) (string-prefix? prefix\
    \ s)) strings))\n", "  (filter (lambda (s) (string-prefix? prefix s)) strings))\n",
  "  (filter (lambda (s) (string-prefix? prefix s)) strings))\n", "  (filter (lambda\
    \ (s) (string-prefix? prefix s)) strings))\n", "  (filter (lambda (s) (string-prefix?\
    \ prefix s)) strings))\n", "  (filter (lambda (s) (string-prefix? prefix s)) strings))\n",
  "  (filter (lambda (s) (string-prefix? prefix s)) strings))\n", "  (filter (lambda\
    \ (s) (string-prefix? prefix s)) strings))\n", "  (filter (lambda (s) (string-prefix?\
    \ prefix s)) strings))\n", "  (filter (lambda (s) (string-prefix? prefix s)) strings))\n",
  "  (filter (lambda (s) (string-prefix? prefix s)) strings))\n", "  (filter (lambda\
    \ (s) (string-prefix? prefix s)) strings))\n", "  (filter (lambda (s) (string-prefix?\
    \ prefix s)) strings))\n", "  (filter (lambda (s) (string-prefix? prefix s)) strings))\n",
  "  (filter (lambda (s) (string-prefix? prefix s)) strings))\n", "  (filter (lambda\
    \ (s) (string-prefix? prefix s)) strings))\n", "  (filter (lambda (s) (string-prefix?\
    \ prefix s)) strings))\n", "  (filter (lambda (s) (string-prefix? prefix s)) strings))\n",
  "  (filter (lambda (s) (string-prefix? prefix s)) strings))\n", "  (filter (lambda\
    \ (string) (string-prefix? prefix string)) strings))\n", "  (filter (lambda (s)\
    \ (string-prefix? prefix s)) strings))\n", "  (filter (lambda (s) (string-prefix?\
    \ prefix s)) strings))\n", "  (filter (lambda (s) (string-prefix? prefix s)) strings))\n",
  "  (filter (lambda (s) (string-prefix? prefix s)) strings))\n", "  (filter (lambda\
    \ (s) (string-prefix? prefix s)) strings))\n", "  (filter (lambda (str) (string-prefix?\
    \ prefix str)) strings))\n", "  (filter (lambda (s) (string-prefix? prefix s))\
    \ strings))\n", "  (filter (lambda (s) (string-prefix? prefix s)) strings))\n",
  "  (filter (lambda (s) (string-prefix? prefix s)) strings))\n", "  (filter (lambda\
    \ (s) (string-prefix? prefix s)) strings))\n", "  (filter (lambda (s) (string-prefix?\
    \ prefix s)) strings))\n", "  (filter (lambda (s) (string-prefix? prefix s)) strings))\n",
  "  (filter (lambda (s) (string-prefix? prefix s)) strings))\n", "  (filter (lambda\
    \ (s) (string-prefix? prefix s)) strings))\n", "  (filter (lambda (string) (string-prefix?\
    \ prefix string)) strings))\n", "  (filter (lambda (s) (string-prefix? prefix\
    \ s)) strings))\n", "  (filter (lambda (s) (string-prefix? prefix s)) strings))\n",
  "  (filter (lambda (s) (string-prefix? prefix s)) strings))\n", "  (filter (lambda\
    \ (str) (string-prefix? prefix str)) strings))\n", "  (filter (lambda (s) (string-prefix?\
    \ prefix s)) strings))\n", "  (filter (lambda (s) (string-prefix? prefix s)) strings))\n",
  "  (filter (lambda (s) (string-prefix? prefix s)) strings))\n", "  (filter (lambda\
    \ (string) (string-prefix? prefix string)) strings))\n", "  (filter (lambda (s)\
    \ (string-prefix? prefix s)) strings))\n", "  (filter (lambda (s) (string-prefix?\
    \ prefix s)) strings))\n", "  (filter (lambda (s) (string-prefix? prefix s)) strings))\n",
  "  (filter (lambda (s) (string-prefix? prefix s)) strings))\n", "  (filter (lambda\
    \ (s) (string-prefix? prefix s)) strings))\n", "  (filter (lambda (s) (string-prefix?\
    \ prefix s)) strings))\n", "  (filter (lambda (s) (string-prefix? prefix s)) strings))\n",
  "  (filter (lambda (s) (string-prefix? prefix s)) strings))\n", "  (filter (lambda\
    \ (s) (string-prefix? prefix s)) strings))\n", "  (filter (lambda (s) (string-prefix?\
    \ prefix s)) strings))\n", "  (filter (lambda (str) (string-prefix? prefix str))\
    \ strings))\n", "  (filter (lambda (s) (string-prefix? prefix s)) strings))\n",
  "  (filter (lambda (s) (string-prefix? prefix s)) strings))\n", "  (filter (lambda\
    \ (s) (string-prefix? prefix s)) strings))\n", "  (filter (lambda (x) (string-prefix?\
    \ prefix x)) strings))\n", "  (filter (lambda (s) (string-prefix? prefix s)) strings))\n",
  "  (filter (lambda (s) (string-prefix? prefix s)) strings))\n", "  (filter (lambda\
    \ (s) (string-prefix? prefix s)) strings))\n", "  (filter (lambda (s) (string-prefix?\
    \ prefix s)) strings))\n", "  (filter (lambda (s) (string-prefix? prefix s)) strings))\n",
  "  (filter (lambda (s) (string-prefix? prefix s)) strings))\n", "  (filter (lambda\
    \ (s) (string-prefix? prefix s)) strings))\n", "  (filter (lambda (s) (string-prefix?\
    \ prefix s)) strings))\n", "  (filter (lambda (s) (string-prefix? prefix s)) strings))\n",
  "  (filter (lambda (string) (string-prefix? prefix string)) strings))\n", "  (filter\
    \ (lambda (s) (string-prefix? prefix s)) strings))\n", "  (filter (lambda (s)\
    \ (string-prefix? prefix s)) strings))\n", "  (filter (lambda (s) (string-prefix?\
    \ prefix s)) strings))\n", "  (filter (lambda (s) (string-prefix? prefix s)) strings))\n",
  "  (filter (lambda (s) (string-prefix? prefix s)) strings))\n", "  (filter (lambda\
    \ (s) (string-prefix? prefix s)) strings))\n", "  (filter (lambda (s) (string-prefix?\
    \ prefix s)) strings))\n", "  (filter (lambda (s) (string-prefix? prefix s)) strings))\n",
  "  (filter (lambda (s) (string-prefix? prefix s)) strings))\n", "  (filter (lambda\
    \ (string) (string-prefix? prefix string)) strings))\n", "  (filter (lambda (s)\
    \ (string-prefix? prefix s)) strings))\n", "  (filter (lambda (s) (string-prefix?\
    \ prefix s)) strings))\n", "  (filter (lambda (s) (string-prefix? prefix s)) strings))\n",
  "  (filter (lambda (s) (string-prefix? prefix s)) strings))\n", "  (filter (lambda\
    \ (s) (string-prefix? prefix s)) strings))\n", "  (filter (lambda (s) (string-prefix?\
    \ prefix s)) strings))\n", "  (filter (lambda (s) (string-prefix? prefix s)) strings))\n",
  "  (filter (lambda (s) (string-prefix? prefix s)) strings))\n", "  (filter (lambda\
    \ (s) (string-prefix? prefix s)) strings))\n", "  (filter (lambda (s) (string-prefix?\
    \ prefix s)) strings))\n", "  (filter (lambda (s) (string-prefix? prefix s)) strings))\n",
  "  (filter (lambda (s) (string-prefix? prefix s)) strings))\n", "  (filter (lambda\
    \ (s) (string-prefix? prefix s)) strings))\n", "  (filter (lambda (string) (string-prefix?\
    \ prefix string)) strings))\n", "  (filter (lambda (s) (string-prefix? prefix\
    \ s)) strings))\n", "  (filter (lambda (s) (string-prefix? prefix s)) strings))\n",
  "  (filter (lambda (str) (string-prefix? prefix str)) strings))\n", "  (filter (lambda\
    \ (s) (string-prefix? prefix s)) strings))\n", "  (filter (lambda (s) (string-prefix?\
    \ prefix s)) strings))\n", "  (filter (lambda (s) (string-prefix? prefix s)) strings))\n",
  "  (filter (lambda (s) (string-prefix? prefix s)) strings))\n", "  (filter (lambda\
    \ (s) (string-prefix? prefix s)) strings))\n", "  (filter (lambda (s) (string-prefix?\
    \ prefix s)) strings))\n", "  (filter (lambda (s) (string-prefix? prefix s)) strings))\n",
  "  (filter (lambda (s) (string-prefix? prefix s)) strings))\n", "  (filter (lambda\
    \ (s) (string-prefix? prefix s)) strings))\n", "  (filter (lambda (s) (string-prefix?\
    \ prefix s)) strings))\n", "  (filter (lambda (s) (string-prefix? prefix s)) strings))\n",
  "  (filter (lambda (s) (string-prefix? prefix s)) strings))\n", "  (filter (lambda\
    \ (s) (string-prefix? prefix s)) strings))\n", "  (filter (lambda (s) (string-prefix?\
    \ prefix s)) strings))\n", "  (filter (lambda (s) (string-prefix? prefix s)) strings))\n",
  "  (filter (lambda (str) (string-prefix? prefix str)) strings))\n", "  (filter (lambda\
    \ (s) (string-prefix? prefix s)) strings))\n", "  (filter (lambda (s) (string-prefix?\
    \ prefix s)) strings))\n", "  (filter (lambda (s) (string-prefix? prefix s)) strings))\n",
  "  (filter (lambda (s) (string-prefix? prefix s)) strings))\n", "  (filter (lambda\
    \ (s) (string-prefix? prefix s)) strings))\n", "  (filter (lambda (s) (string-prefix?\
    \ prefix s)) strings))\n", "  (filter (lambda (s) (string-prefix? prefix s)) strings))\n",
  "  (filter (lambda (s) (string-prefix? prefix s)) strings))\n", "  (filter (lambda\
    \ (s) (string-prefix? prefix s)) strings))\n", "  (filter (lambda (s) (string-prefix?\
    \ prefix s)) strings))\n", "  (filter (lambda (s) (string-prefix? prefix s)) strings))\n",
  "  (filter (lambda (s) (string-prefix? prefix s)) strings))\n", "  (filter (lambda\
    \ (s) (string-prefix? prefix s)) strings))\n", "  (filter (lambda (s) (string-prefix?\
    \ prefix s)) strings))\n", "  (filter (lambda (s) (string-prefix? prefix s)) strings))\n",
  "  (filter (lambda (s) (string-prefix? prefix s)) strings))\n", "  (filter (lambda\
    \ (s) (string-prefix? prefix s)) strings))\n", "  (filter (lambda (s) (string-prefix?\
    \ prefix s)) strings))\n", "  (filter (lambda (s) (string-prefix? prefix s)) strings))\n",
  "  (filter (lambda (s) (string-prefix? prefix s)) strings))\n", "  (filter (lambda\
    \ (s) (string-prefix? prefix s)) strings))\n", "  (filter (lambda (string) (string-prefix?\
    \ prefix string)) strings))\n", "  (filter (lambda (s) (string-prefix? prefix\
    \ s)) strings))\n", "  (filter (lambda (s) (string-prefix? prefix s)) strings))\n",
  "  (filter (lambda (s) (string-prefix? prefix s)) strings))\n", "  (filter (lambda\
    \ (string) (string-prefix? prefix string)) strings))\n", "  (filter (lambda (s)\
    \ (string-prefix? prefix s)) strings))\n", "  (filter (lambda (x) (string-prefix?\
    \ prefix x)) strings))\n", "  (filter (lambda (s) (string-prefix? prefix s)) strings))\n",
  "  (filter (lambda (s) (string-prefix? prefix s)) strings))\n", "  (filter (lambda\
    \ (string) (string-prefix? prefix string)) strings))\n", "  (filter (lambda (s)\
    \ (string-prefix? prefix s)) strings))\n", "  (filter (lambda (s) (string-prefix?\
    \ prefix s)) strings))\n", "  (filter (lambda (s) (string-prefix? prefix s)) strings))\n",
  "  (filter (lambda (s) (string-prefix? prefix s)) strings))\n", "  (filter (lambda\
    \ (s) (string-prefix? prefix s)) strings))\n", "  (filter (lambda (s) (string-prefix?\
    \ prefix s)) strings))\n", "  (filter (lambda (s) (string-prefix? prefix s)) strings))\n",
  "  (filter (lambda (string) (string-prefix? prefix string)) strings))\n", "  (filter\
    \ (lambda (str) (string-prefix? prefix str)) strings))\n", "  (filter (lambda\
    \ (s) (string-prefix? prefix s)) strings))\n", "  (filter (lambda (s) (string-prefix?\
    \ prefix s)) strings))\n", "  (filter (lambda (s) (string-prefix? prefix s)) strings))\n",
  "  (filter (lambda (s) (string-prefix? prefix s)) strings))\n", "  (filter (lambda\
    \ (s) (string-prefix? prefix s)) strings))\n", "  (filter (lambda (s) (string-prefix?\
    \ prefix s)) strings))\n", "  (filter (lambda (s) (string-prefix? prefix s)) strings))\n",
  "  (filter (lambda (s) (string-prefix? prefix s)) strings))\n", "  (filter (lambda\
    \ (s) (string-prefix? prefix s)) strings))\n", "  (filter (lambda (s) (string-prefix?\
    \ prefix s)) strings))\n", "  (filter (lambda (s) (string-prefix? prefix s)) strings))\n",
  "  (filter (lambda (s) (string-prefix? prefix s)) strings))\n", "  (filter (lambda\
    \ (s) (string-prefix? prefix s)) strings))\n", "  (filter (lambda (s) (string-prefix?\
    \ prefix s)) strings))\n", "  (filter (lambda (s) (string-prefix? prefix s)) strings))\n",
  "  (filter (lambda (s) (string-prefix? prefix s)) strings))\n", "  (filter (lambda\
    \ (s) (string-prefix? prefix s)) strings))\n", "  (filter (lambda (s) (string-prefix?\
    \ prefix s)) strings))\n", "  (filter (lambda (s) (string-prefix? prefix s)) strings))\n",
  "  (filter (lambda (s) (string-prefix? prefix s)) strings))\n```\n\n## [`filter_by_suffix`](https://github.com/jkitchin/scimax-org/blob/master/scimax-org-babel-python.org#filter_by_suffix)\n\
    \n```python\n#lang python\n\n# Filter an input list of strings only for ones that\
    \ end with a given suffix.\n# >>> filter_by_suffix([], 'a')\n# []\n# >>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n# ['array']\ndef filter_by_suffix(strings, suffix):\n\
    \    return [s for s in strings if s.endswith(suffix)]\n```\n\n## [`filter_by_suffix`](https://github.com/jkitchin/scimax-org/blob/master/scimax-org-babel-racket.org#filter_by_suffix)\n\
    \n```racket\n#lang racket\n", "  (filter (lambda (s) (string-prefix? prefix s))\
    \ strings))\n", "  (filter (lambda (s) (string-prefix? prefix s)) strings))\n",
  "  (filter (lambda (s) (string-prefix? prefix s)) strings))\n", "  (filter (lambda\
    \ (s) (string-prefix? prefix s)) strings))\n", "  (filter (lambda (s) (string-prefix?\
    \ prefix s)) strings))\n", "  (filter (lambda (s) (string-prefix? prefix s)) strings))\n",
  "  (filter (lambda (s) (string-prefix? prefix s)) strings))\n", "  (filter (lambda\
    \ (s) (string-prefix? prefix s)) strings))\n", "  (filter (lambda (s) (string-prefix?\
    \ prefix s)) strings))\n", "  (filter (lambda (s) (string-prefix? prefix s)) strings))\n",
  "  (filter (lambda (s) (string-prefix? prefix s)) strings))\n"]
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
