name: HumanEval_108_count_nums
language: racket
prompt: "#lang racket\n\n;; Write a function count_nums which takes an array of integers\
  \ and returns\n;; the number of elements which has a sum of digits > 0.\n;; If a\
  \ number is negative, then its first signed digit will be negative:\n;; e.g. -123\
  \ has signed digits -1, 2, and 3.\n;; >>> count_nums([]) == 0\n;; >>> count_nums([-1,\
  \ 11, -11]) == 1\n;; >>> count_nums([1, 1, 2]) == 3\n(define (count_nums arr)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_nums))\n\
  \    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list -1\
  \ -2 0)) 0)\n    (check-equal? (candidate (list 1 1 2 -2 3 4 5)) 6)\n    (check-equal?\
  \ (candidate (list 1 6 9 -6 0 1 5)) 5)\n    (check-equal? (candidate (list 1 100\
  \ 98 -7 1 -1)) 4)\n    (check-equal? (candidate (list 12 23 34 -45 -56 0)) 5)\n\
  \    (check-equal? (candidate (list 0 1)) 1)\n    (check-equal? (candidate (list\
  \ 1)) 1)\n))\n\n(test-humaneval)"
completions: ["  (cond\n    [(empty? arr) 0]\n    [(> (sum-digits (first arr)) 0)\
    \ (+ 1 (count_nums (rest arr)))]\n    [else (count_nums (rest arr))]))\n", " \
    \ (cond [(empty? arr) 0]\n        [else (+ (if (sum-of-digits (first arr)) 1 0)\n\
    \                 (count_nums (rest arr)))]))\n", "  (cond\n    [(empty? arr)\
    \ 0]\n    [(> (sum-digits (first arr)) 0)\n     (+ 1 (count_nums (rest arr)))]\n\
    \    [else (count_nums (rest arr))]))\n", "  (cond\n    [(empty? arr) 0]\n   \
    \ [(> (sum-digits (first arr)) 0)\n     (+ 1 (count_nums (rest arr)))]\n    [else\
    \ (count_nums (rest arr))]))\n", "  (cond\n    [(empty? arr) 0]\n    [(> (sum-digits\
    \ (first arr)) 0) (+ 1 (count_nums (rest arr)))]\n    [else (count_nums (rest\
    \ arr))]))\n", "  (cond\n    [(empty? arr) 0]\n    [(> (sum-digits (first arr))\
    \ 0) (+ 1 (count_nums (rest arr)))]\n    [else (count_nums (rest arr))]))\n",
  "  (define (sum-digits n)\n    (if (zero? n)\n        0\n        (+ (abs (remainder\
    \ n 10))\n           (sum-digits (quotient n 10)))))\n  (define (count-nums-iter\
    \ arr count)\n    (if (null? arr)\n        count\n        (if (> (sum-digits (car\
    \ arr)) 0)\n            (count-nums-iter (cdr arr) (+ count 1))\n            (count-nums-iter\
    \ (cdr arr) count))))\n  (count-nums-iter arr 0))\n", "  (cond\n    [(empty? arr)\
    \ 0]\n    [(> (sum-digits (first arr)) 0) (+ 1 (count_nums (rest arr)))]\n   \
    \ [else (count_nums (rest arr))]))\n", "  (cond [(empty? arr) 0]\n        [else\
    \ (+ (if (sum-digits (first arr)) 1 0)\n                 (count_nums (rest arr)))]))\n",
  "  (define (sum-digits n)\n    (if (negative? n)\n        (sum-digits (- n))\n \
    \     (if (zero? n)\n          0\n          (+ (remainder n 10) (sum-digits (quotient\
    \ n 10))))))\n  (define (count-nums-helper arr count)\n    (if (null? arr)\n \
    \       count\n        (if (> (sum-digits (car arr)) 0)\n            (count-nums-helper\
    \ (cdr arr) (+ count 1))\n            (count-nums-helper (cdr arr) count))))\n\
    \  (count-nums-helper arr 0))\n", "  (cond\n    [(empty? arr) 0]\n    [(> (sum-digits\
    \ (first arr)) 0)\n     (+ 1 (count_nums (rest arr)))]\n    [else (count_nums\
    \ (rest arr))]))\n", "  (define (sum-digits n)\n    (if (negative? n)\n      \
    \  (sum-digits (- n))\n      (if (zero? n)\n          0\n          (+ (modulo\
    \ n 10) (sum-digits (quotient n 10))))))\n  (define (count-nums-helper arr count)\n\
    \    (if (null? arr)\n        count\n        (if (> (sum-digits (car arr)) 0)\n\
    \            (count-nums-helper (cdr arr) (+ count 1))\n            (count-nums-helper\
    \ (cdr arr) count))))\n  (count-nums-helper arr 0))\n", "  (define (sum-digits\
    \ n)\n    (cond\n      [(negative? n) (+ (modulo n 10) (sum-digits (quotient n\
    \ 10)))]\n      [(zero? n) 0]\n      [else (+ (modulo n 10) (sum-digits (quotient\
    \ n 10)))]))\n  (define (count-nums-helper arr count)\n    (cond\n      [(null?\
    \ arr) count]\n      [(> (sum-digits (car arr)) 0) (count-nums-helper (cdr arr)\
    \ (+ count 1))]\n      [else (count-nums-helper (cdr arr) count)]))\n  (count-nums-helper\
    \ arr 0))\n", "  (cond [(empty? arr) 0]\n        [else (+ (if (sum-digits (first\
    \ arr)) 1 0)\n                 (count_nums (rest arr)))]))\n", "  (cond [(empty?\
    \ arr) 0]\n        [else\n         (if (positive? (sum-digits (first arr)))\n\
    \             (+ 1 (count_nums (rest arr)))\n             (count_nums (rest arr)))]))\n",
  "  (length (filter (lambda (x)\n                    (if (negative? x)\n        \
    \                (if (zero? (modulo x 10))\n                            #f\n \
    \                           #t)\n                        (if (zero? (modulo x\
    \ 10))\n                            #f\n                            #t)))\n  \
    \                arr)))\n", "  (cond\n    [(empty? arr) 0]\n    [(positive? (sum-digits\
    \ (first arr)))\n     (+ 1 (count_nums (rest arr)))]\n    [else (count_nums (rest\
    \ arr))]))\n", "  (apply + (map (lambda (x) (if (> (sum-digits x) 0) 1 0)) arr)))\n",
  "  (define (sum-digits n)\n    (if (negative? n)\n        (sum-digits (- n))\n \
    \     (if (zero? n)\n          0\n          (+ (remainder n 10) (sum-digits (quotient\
    \ n 10))))))\n  (define (count-nums-helper arr count)\n    (if (null? arr)\n \
    \       count\n        (if (> (sum-digits (car arr)) 0)\n            (count-nums-helper\
    \ (cdr arr) (+ count 1))\n            (count-nums-helper (cdr arr) count))))\n\
    \  (count-nums-helper arr 0))\n", "  (cond [(empty? arr) 0]\n        [else (+\
    \ (if (> (sum-digits (first arr)) 0) 1 0)\n                 (count_nums (rest\
    \ arr)))]))\n", "  (define (sum-digits n)\n    (cond [(< n 0) (- n)]\n       \
    \   [(= n 0) 0]\n          [else (+ (modulo n 10) (sum-digits (quotient n 10)))]))\n\
    \  (define (count-nums-helper arr count)\n    (cond [(null? arr) count]\n    \
    \      [(> (sum-digits (car arr)) 0) (count-nums-helper (cdr arr) (+ count 1))]\n\
    \          [else (count-nums-helper (cdr arr) count)]))\n  (count-nums-helper\
    \ arr 0))\n", "  (define (sum-digits n)\n    (if (negative? n)\n        (sum-digits\
    \ (- n))\n      (if (zero? n)\n          0\n          (+ (remainder n 10) (sum-digits\
    \ (quotient n 10))))))\n  (define (count-nums-helper arr count)\n    (if (null?\
    \ arr)\n        count\n        (if (> (sum-digits (car arr)) 0)\n            (count-nums-helper\
    \ (cdr arr) (+ count 1))\n            (count-nums-helper (cdr arr) count))))\n\
    \  (count-nums-helper arr 0))\n", "  (define (sum-digits n)\n    (if (negative?\
    \ n)\n        (add1 (sum-digits (abs n)))\n        (if (zero? n)\n           \
    \ 0\n            (add1 (sum-digits (quotient n 10))))))\n  (define (sum-digits-array\
    \ arr)\n    (if (null? arr)\n        0\n        (add1 (sum-digits-array (cdr arr)))))\n\
    \  (sum-digits-array arr))\n", "  (letrec ([sum-digits (lambda (n)\n         \
    \                (if (zero? n)\n                             0\n             \
    \                (+ (remainder n 10)\n                                (sum-digits\
    \ (quotient n 10)))))])\n    (length (filter (lambda (x) (> (sum-digits x) 0))\
    \ arr))))\n", "  (define (sum-digits n)\n    (cond [(< n 0) (+ (modulo n 10) (sum-digits\
    \ (quotient n 10)))]\n          [(= n 0) 0]\n          [else (+ (modulo n 10)\
    \ (sum-digits (quotient n 10)))]))\n  (define (sum-digits-arr arr)\n    (cond\
    \ [(empty? arr) 0]\n          [else (+ (sum-digits (first arr)) (sum-digits-arr\
    \ (rest arr)))]))\n  (define (count-nums arr)\n    (cond [(empty? arr) 0]\n  \
    \        [(> (sum-digits (first arr)) 0) (+ 1 (count-nums (rest arr)))]\n    \
    \      [else (count-nums (rest arr))]))\n  (count-nums arr))\n", "  (define (sum-digits\
    \ n)\n    (if (negative? n)\n        (sum-digits (- n))\n      (if (zero? n)\n\
    \          0\n          (+ (remainder n 10) (sum-digits (quotient n 10))))))\n\
    \  (define (sum-digits-array arr)\n    (if (null? arr)\n        0\n        (+\
    \ (sum-digits (car arr)) (sum-digits-array (cdr arr)))))\n  (sum-digits-array\
    \ arr))\n", "  (define (sum-digits n)\n    (if (negative? n)\n        (sum-digits\
    \ (- n))\n      (if (zero? n)\n          0\n          (+ (remainder n 10) (sum-digits\
    \ (quotient n 10))))))\n  (define (sum-digits-arr arr)\n    (if (null? arr)\n\
    \        0\n        (+ (sum-digits (car arr)) (sum-digits-arr (cdr arr)))))\n\
    \  (sum-digits-arr arr))\n", "  (length (filter (lambda (x) (> (sum-digits x)\
    \ 0)) arr)))\n", "  (define (sum-digits n)\n    (if (negative? n)\n        (sum-digits\
    \ (- n))\n      (if (zero? n)\n          0\n          (+ (remainder n 10) (sum-digits\
    \ (quotient n 10))))))\n  (define (sum-digits-array arr)\n    (if (null? arr)\n\
    \        0\n        (+ (sum-digits (car arr)) (sum-digits-array (cdr arr)))))\n\
    \  (sum-digits-array arr))\n", "  (if (null? arr)\n      0\n      (if (sum-of-digits\
    \ (car arr))\n          (+ 1 (count_nums (cdr arr)))\n          (count_nums (cdr\
    \ arr)))))\n", "  (cond\n    [(empty? arr) 0]\n    [(> (sum-digits (first arr))\
    \ 0) (+ 1 (count_nums (rest arr)))]\n    [else (count_nums (rest arr))]))\n",
  "  (define (sum-digits n)\n    (if (negative? n)\n        (sum-digits (- n))\n \
    \     (if (zero? n)\n          0\n          (+ (remainder n 10) (sum-digits (quotient\
    \ n 10))))))\n  (define (sum-digits-array arr)\n    (if (null? arr)\n        0\n\
    \        (+ (sum-digits (car arr)) (sum-digits-array (cdr arr)))))\n  (sum-digits-array\
    \ arr))\n", "  (cond [(empty? arr) 0]\n        [else\n         (if (sum-of-digits\
    \ (first arr))\n             (+ 1 (count_nums (rest arr)))\n             (count_nums\
    \ (rest arr)))]))\n", "  (if (null? arr)\n      0\n      (if (sum_digits (car\
    \ arr))\n          (+ 1 (count_nums (cdr arr)))\n          (count_nums (cdr arr)))))\n",
  "  (cond\n    [(empty? arr) 0]\n    [(> (sum-digits (first arr)) 0)\n     (+ 1 (count_nums\
    \ (rest arr)))]\n    [else (count_nums (rest arr))]))\n", "  (define (sum-digits\
    \ n)\n    (cond\n      [(< n 0) (+ n (sum-digits (- n)))]\n      [(< n 10) n]\n\
    \      [else (+ (modulo n 10) (sum-digits (quotient n 10)))]))\n  (define (count-nums-helper\
    \ arr acc)\n    (cond\n      [(empty? arr) acc]\n      [(> (sum-digits (first\
    \ arr)) 0) (count-nums-helper (rest arr) (+ acc 1))]\n      [else (count-nums-helper\
    \ (rest arr) acc)]))\n  (count-nums-helper arr 0))\n", "  (length (filter (lambda\
    \ (x)\n                    (not (zero? (apply + (map abs (string->list (number->string\
    \ x)))))))\n                  arr)))\n", "  (define (sum-digits n)\n    (if (negative?\
    \ n)\n        (sum-digits (- n))\n      (if (zero? n)\n          0\n         \
    \ (+ (remainder n 10) (sum-digits (quotient n 10))))))\n  (define (count-nums-helper\
    \ arr count)\n    (if (null? arr)\n        count\n        (if (> (sum-digits (car\
    \ arr)) 0)\n            (count-nums-helper (cdr arr) (+ count 1))\n          \
    \  (count-nums-helper (cdr arr) count))))\n  (count-nums-helper arr 0))\n", " \
    \ (define (sum-digits n)\n    (if (negative? n)\n        (sum-digits (- n))\n\
    \      (if (zero? n)\n          0\n          (+ (modulo n 10) (sum-digits (quotient\
    \ n 10))))))\n  (define (count-nums-helper arr acc)\n    (if (null? arr)\n   \
    \     acc\n        (if (> (sum-digits (car arr)) 0)\n            (count-nums-helper\
    \ (cdr arr) (+ acc 1))\n            (count-nums-helper (cdr arr) acc))))\n  (count-nums-helper\
    \ arr 0))\n", "  (define (sum-digits n)\n    (if (negative? n)\n        (sum-digits\
    \ (- n))\n      (if (zero? n)\n          0\n          (+ (modulo n 10) (sum-digits\
    \ (quotient n 10))))))\n  (define (count-nums-helper arr sum)\n    (if (null?\
    \ arr)\n        sum\n        (if (zero? (sum-digits (car arr)))\n            (count-nums-helper\
    \ (cdr arr) sum)\n            (count-nums-helper (cdr arr) (+ sum 1)))))\n  (count-nums-helper\
    \ arr 0))\n", "  (define (sum-digits n)\n    (cond\n      [(< n 0) (+ (modulo\
    \ n 10) (sum-digits (quotient n 10)))]\n      [(= n 0) 0]\n      [else (+ (modulo\
    \ n 10) (sum-digits (quotient n 10)))]))\n  (define (count-nums-helper arr sum)\n\
    \    (cond\n      [(empty? arr) sum]\n      [(> (sum-digits (first arr)) 0) (count-nums-helper\
    \ (rest arr) (+ sum 1))]\n      [else (count-nums-helper (rest arr) sum)]))\n\
    \  (count-nums-helper arr 0))\n", "  (cond\n    [(empty? arr) 0]\n    [(> (sum-digits\
    \ (first arr)) 0)\n     (+ 1 (count_nums (rest arr)))]\n    [else (count_nums\
    \ (rest arr))]))\n", "  (define (sum-digits n)\n    (cond\n      [(zero? n) 0]\n\
    \      [(negative? n) (- (sum-digits (- n))) ]\n      [else (+ (remainder n 10)\
    \ (sum-digits (quotient n 10)))]))\n  (define (sum-digits-array arr)\n    (cond\n\
    \      [(empty? arr) 0]\n      [else (+ (sum-digits (first arr)) (sum-digits-array\
    \ (rest arr)))]))\n  (define (count-nums-array arr)\n    (cond\n      [(empty?\
    \ arr) 0]\n      [(> (sum-digits (first arr)) 0) (+ 1 (count-nums-array (rest\
    \ arr)))]\n      [else (count-nums-array (rest arr))]))\n  (count-nums-array arr))\n",
  "  (cond\n    [(empty? arr) 0]\n    [(> (sum-digits (first arr)) 0)\n     (+ 1 (count_nums\
    \ (rest arr)))]\n    [else (count_nums (rest arr))]))\n", "  (cond\n    [(empty?\
    \ arr) 0]\n    [(> (sum-digits (first arr)) 0) (+ 1 (count_nums (rest arr)))]\n\
    \    [else (count_nums (rest arr))]))\n", "  (length (filter (lambda (x) (not\
    \ (zero? (sum-digits x)))) arr)))\n", "  (cond\n    [(empty? arr) 0]\n    [(>\
    \ (sum-digits (first arr)) 0) (+ 1 (count_nums (rest arr)))]\n    [else (count_nums\
    \ (rest arr))]))\n", "  (define (sum-digits n)\n    (cond [(zero? n) 0]\n    \
    \      [else (+ (remainder n 10) (sum-digits (quotient n 10)))]))\n  (define (sum-signed-digits\
    \ n)\n    (cond [(negative? n) (- (sum-digits n))]\n          [else (sum-digits\
    \ n)]))\n  (define (sum-digits-of-nums arr)\n    (cond [(empty? arr) 0]\n    \
    \      [else (+ (sum-signed-digits (first arr)) (sum-digits-of-nums (rest arr)))]))\n\
    \  (define (count-nums arr)\n    (cond [(empty? arr) 0]\n          [(> (sum-signed-digits\
    \ (first arr)) 0) (+ 1 (count-nums (rest arr)))]\n          [else (count-nums\
    \ (rest arr))]))\n  (count-nums arr))\n", "  (define (sum-digits n)\n    (cond\n\
    \      [(zero? n) 0]\n      [(negative? n) (+ (remainder n 10) (sum-digits (quotient\
    \ n 10)))]\n      [else (+ (remainder n 10) (sum-digits (quotient n 10)))]))\n\
    \  (define (count-nums-helper arr count)\n    (cond\n      [(empty? arr) count]\n\
    \      [(> (sum-digits (first arr)) 0) (count-nums-helper (rest arr) (+ count\
    \ 1))]\n      [else (count-nums-helper (rest arr) count)]))\n  (count-nums-helper\
    \ arr 0))\n", "  (cond\n    [(empty? arr) 0]\n    [(> (sum-digits (first arr))\
    \ 0) (+ 1 (count_nums (rest arr)))]\n    [else (count_nums (rest arr))]))\n",
  "  (cond\n    [(empty? arr) 0]\n    [(> (sum-digits (first arr)) 0) (+ 1 (count_nums\
    \ (rest arr)))]\n    [else (count_nums (rest arr))]))\n", "  (cond\n    [(empty?\
    \ arr) 0]\n    [(> (sum-digits (first arr)) 0)\n     (+ 1 (count_nums (rest arr)))]\n\
    \    [else (count_nums (rest arr))]))\n", "  (define (sum-digits n)\n    (if (negative?\
    \ n)\n        (sum-digits (- n))\n      (if (zero? n)\n          0\n         \
    \ (+ (remainder n 10) (sum-digits (quotient n 10))))))\n  (define (sum-digits-array\
    \ arr)\n    (if (null? arr)\n        0\n        (+ (sum-digits (car arr)) (sum-digits-array\
    \ (cdr arr)))))\n  (sum-digits-array arr))\n", "  (define (sum-digits n)\n   \
    \ (if (negative? n)\n        (sum-digits (- n))\n      (if (zero? n)\n       \
    \   0\n          (+ (remainder n 10) (sum-digits (quotient n 10))))))\n  (define\
    \ (count-nums-helper arr count)\n    (if (null? arr)\n        count\n        (if\
    \ (> (sum-digits (car arr)) 0)\n            (count-nums-helper (cdr arr) (+ count\
    \ 1))\n            (count-nums-helper (cdr arr) count))))\n  (count-nums-helper\
    \ arr 0))\n", "  (length (filter (lambda (x)\n                    (if (negative?\
    \ x)\n                        (if (zero? (modulo x 10))\n                    \
    \        #f\n                            #t)\n                        (if (zero?\
    \ (modulo x 10))\n                            #f\n                           \
    \ #t)))\n                  arr)))\n", "  (define (sum-digits n)\n    (cond\n \
    \     [(< n 0) (- n)]\n      [(< n 10) n]\n      [else (+ (modulo n 10) (sum-digits\
    \ (quotient n 10)))]))\n  (define (count-nums-helper arr count)\n    (cond\n \
    \     [(null? arr) count]\n      [(> (sum-digits (car arr)) 0) (count-nums-helper\
    \ (cdr arr) (+ count 1))]\n      [else (count-nums-helper (cdr arr) count)]))\n\
    \  (count-nums-helper arr 0))\n", "  (cond [(empty? arr) 0]\n        [else (+\
    \ (if (> (sum-digits (first arr)) 0) 1 0)\n                 (count_nums (rest\
    \ arr)))]))\n", "  (cond\n    [(empty? arr) 0]\n    [(> (sum-digits (first arr))\
    \ 0)\n     (+ 1 (count_nums (rest arr)))]\n    [else (count_nums (rest arr))]))\n",
  "  (cond\n    [(empty? arr) 0]\n    [(> (sum-digits (first arr)) 0)\n     (+ 1 (count_nums\
    \ (rest arr)))]\n    [else (count_nums (rest arr))]))\n", "  (define (sum-digits\
    \ n)\n    (if (negative? n)\n        (sum-digits (- n))\n      (if (zero? n)\n\
    \          0\n          (+ (remainder n 10) (sum-digits (quotient n 10))))))\n\
    \  (define (count-nums-helper arr count)\n    (if (null? arr)\n        count\n\
    \        (if (zero? (sum-digits (car arr)))\n            (count-nums-helper (cdr\
    \ arr) count)\n            (count-nums-helper (cdr arr) (+ count 1)))))\n  (count-nums-helper\
    \ arr 0))\n", "  (define (sum-digits n)\n    (cond [(< n 0) (- n)]\n         \
    \ [(= n 0) 0]\n          [else (+ (remainder n 10) (sum-digits (quotient n 10)))]))\n\
    \  (define (count-nums-helper arr count)\n    (cond [(empty? arr) count]\n   \
    \       [(> (sum-digits (first arr)) 0) (count-nums-helper (rest arr) (+ count\
    \ 1))]\n          [else (count-nums-helper (rest arr) count)]))\n  (count-nums-helper\
    \ arr 0))\n", "  (define (sum-digits n)\n    (cond\n      [(< n 0) (+ (modulo\
    \ n 10) (sum-digits (quotient (- n) 10)))]\n      [(= n 0) 0]\n      [else (+\
    \ (modulo n 10) (sum-digits (quotient n 10)))]))\n  (define (count-nums-helper\
    \ arr count)\n    (cond\n      [(null? arr) count]\n      [(> (sum-digits (car\
    \ arr)) 0) (count-nums-helper (cdr arr) (+ count 1))]\n      [else (count-nums-helper\
    \ (cdr arr) count)]))\n  (count-nums-helper arr 0))\n", "  (cond\n    [(empty?\
    \ arr) 0]\n    [(> (sum-digits (first arr)) 0) (+ 1 (count_nums (rest arr)))]\n\
    \    [else (count_nums (rest arr))]))\n", "  (cond\n    [(empty? arr) 0]\n   \
    \ [(> (sum-digits (first arr)) 0) (+ 1 (count_nums (rest arr)))]\n    [else (count_nums\
    \ (rest arr))]))\n", "  (define (sum-digits n)\n    (if (negative? n)\n      \
    \  (sum-digits (- n))\n      (if (zero? n)\n          0\n          (+ (remainder\
    \ n 10) (sum-digits (quotient n 10))))))\n  (define (count-nums-helper arr count)\n\
    \    (if (null? arr)\n        count\n        (if (> (sum-digits (car arr)) 0)\n\
    \            (count-nums-helper (cdr arr) (+ count 1))\n            (count-nums-helper\
    \ (cdr arr) count))))\n  (count-nums-helper arr 0))\n", "  (cond\n    [(empty?\
    \ arr) 0]\n    [(> (sum-digits (first arr)) 0) (+ 1 (count_nums (rest arr)))]\n\
    \    [else (count_nums (rest arr))]))\n", "  (cond\n    [(empty? arr) 0]\n   \
    \ [(> (sum-digits (first arr)) 0) (+ 1 (count_nums (rest arr)))]\n    [else (count_nums\
    \ (rest arr))]))\n", "  (define (signed-digits n)\n    (if (negative? n)\n   \
    \     (cons (modulo n 10) (signed-digits (quotient n 10)))\n        (digits n)))\n\
    \  (define (digits n)\n    (if (zero? n)\n        '()\n        (cons (modulo n\
    \ 10) (digits (quotient n 10)))))\n  (define (sum-digits n)\n    (apply + (signed-digits\
    \ n)))\n  (define (count-nums-helper arr)\n    (if (null? arr)\n        0\n  \
    \      (if (> (sum-digits (car arr)) 0)\n            (+ 1 (count-nums-helper (cdr\
    \ arr)))\n            (count-nums-helper (cdr arr)))))\n  (count-nums-helper arr))\n",
  "  (cond\n    [(empty? arr) 0]\n    [(> (sum-digits (first arr)) 0) (+ 1 (count_nums\
    \ (rest arr)))]\n    [else (count_nums (rest arr))]))\n", "  (cond\n    [(empty?\
    \ arr) 0]\n    [(> (sum-digits (first arr)) 0)\n     (+ 1 (count_nums (rest arr)))]\n\
    \    [else (count_nums (rest arr))]))\n", "  (define (sum-digits n)\n    (cond\n\
    \      [(zero? n) 0]\n      [else (+ (remainder n 10) (sum-digits (quotient n\
    \ 10)))]))\n  (cond\n    [(empty? arr) 0]\n    [(> (sum-digits (first arr)) 0)\
    \ (+ 1 (count_nums (rest arr)))]\n    [else (count_nums (rest arr))]))\n", " \
    \ (define (sum-digits n)\n    (cond\n      [(< n 0) (+ (modulo n 10) (sum-digits\
    \ (quotient n 10)))]\n      [(= n 0) 0]\n      [else (+ (modulo n 10) (sum-digits\
    \ (quotient n 10)))]))\n  (define (count-nums-helper arr count)\n    (cond\n \
    \     [(null? arr) count]\n      [(> (sum-digits (car arr)) 0) (count-nums-helper\
    \ (cdr arr) (+ count 1))]\n      [else (count-nums-helper (cdr arr) count)]))\n\
    \  (count-nums-helper arr 0))\n", "  (define (sum-digits n)\n    (cond\n     \
    \ [(= n 0) 0]\n      [else (+ (modulo n 10) (sum-digits (quotient n 10)))]))\n\
    \  (define (count-nums-helper arr acc)\n    (cond\n      [(null? arr) acc]\n \
    \     [(> (sum-digits (car arr)) 0) (count-nums-helper (cdr arr) (+ acc 1))]\n\
    \      [else (count-nums-helper (cdr arr) acc)]))\n  (count-nums-helper arr 0))\n",
  "  (length (filter (lambda (x) (> (sum-digits x) 0)) arr)))\n", "  (define (sum-digits\
    \ n)\n    (if (negative? n)\n        (add1 (sum-digits (abs n)))\n        (if\
    \ (zero? n)\n            0\n            (add1 (sum-digits (quotient n 10))))))\n\
    \  (define (sum-digits-array arr)\n    (if (null? arr)\n        0\n        (add1\
    \ (sum-digits-array (cdr arr)))))\n  (sum-digits-array arr))\n", "  (define (sum-digits\
    \ n)\n    (if (negative? n)\n        (sum-digits (- n))\n      (if (zero? n)\n\
    \          0\n          (+ (remainder n 10) (sum-digits (quotient n 10))))))\n\
    \  (define (sum-digits-array arr)\n    (if (null? arr)\n        0\n        (+\
    \ (sum-digits (car arr)) (sum-digits-array (cdr arr)))))\n  (sum-digits-array\
    \ arr))\n", "  (define (sum-digits n)\n    (cond\n      [(< n 0) (+ (remainder\
    \ n 10) (sum-digits (quotient n 10)))]\n      [(< n 10) n]\n      [else (+ (remainder\
    \ n 10) (sum-digits (quotient n 10)))]))\n  (define (count-nums-helper arr count)\n\
    \    (cond\n      [(empty? arr) count]\n      [(> (sum-digits (first arr)) 0)\
    \ (count-nums-helper (rest arr) (+ count 1))]\n      [else (count-nums-helper\
    \ (rest arr) count)]))\n  (count-nums-helper arr 0))\n", "  (define (sum-digits\
    \ n)\n    (cond\n      [(< n 0) (+ (- n) (sum-digits (- n)))]\n      [(= n 0)\
    \ 0]\n      [else (+ (modulo n 10) (sum-digits (quotient n 10)))]))\n  (define\
    \ (count-nums-helper arr count)\n    (cond\n      [(empty? arr) count]\n     \
    \ [(> (sum-digits (first arr)) 0) (count-nums-helper (rest arr) (+ count 1))]\n\
    \      [else (count-nums-helper (rest arr) count)]))\n  (count-nums-helper arr\
    \ 0))\n", "  (length (filter (lambda (x)\n                    (not (zero? (sum-digits\
    \ x))))\n                  arr)))\n", "  (cond\n    [(empty? arr) 0]\n    [(>\
    \ (sum-digits (first arr)) 0) (+ 1 (count_nums (rest arr)))]\n    [else (count_nums\
    \ (rest arr))]))\n", "  (define (sum-digits n)\n    (if (zero? n)\n        0\n\
    \        (+ (modulo n 10) (sum-digits (quotient n 10)))))\n  (define (sum-digits-abs\
    \ n)\n    (if (negative? n)\n        (sum-digits (- n))\n        (sum-digits n)))\n\
    \  (define (count-nums-helper arr count)\n    (if (null? arr)\n        count\n\
    \        (if (> (sum-digits-abs (car arr)) 0)\n            (count-nums-helper\
    \ (cdr arr) (+ count 1))\n            (count-nums-helper (cdr arr) count))))\n\
    \  (count-nums-helper arr 0))\n", "  (cond\n    [(empty? arr) 0]\n    [(> (sum-digits\
    \ (first arr)) 0) (+ 1 (count_nums (rest arr)))]\n    [else (count_nums (rest\
    \ arr))]))\n", "  (cond\n    [(empty? arr) 0]\n    [(> (sum-digits (first arr))\
    \ 0)\n     (+ 1 (count_nums (rest arr)))]\n    [else (count_nums (rest arr))]))\n",
  "  (define (sum-digits n)\n    (if (zero? n)\n        0\n        (+ (remainder n\
    \ 10)\n           (sum-digits (quotient n 10)))))\n  (define (count-nums-helper\
    \ arr count)\n    (if (null? arr)\n        count\n        (if (> (sum-digits (car\
    \ arr)) 0)\n            (count-nums-helper (cdr arr) (+ count 1))\n          \
    \  (count-nums-helper (cdr arr) count))))\n  (count-nums-helper arr 0))\n", " \
    \ (length (filter (lambda (x)\n                    (not (zero? (apply + (map abs\
    \ (string->list (number->string x)))))))\n                  arr)))\n", "  (cond\n\
    \    [(empty? arr) 0]\n    [(> (sum-digits (first arr)) 0) (+ 1 (count_nums (rest\
    \ arr)))]\n    [else (count_nums (rest arr))]))\n", "  (define (sum-digits n)\n\
    \    (if (negative? n)\n        (sum-digits (- n))\n      (if (zero? n)\n    \
    \      0\n          (+ (remainder n 10) (sum-digits (quotient n 10))))))\n  (define\
    \ (count-nums-helper arr count)\n    (if (null? arr)\n        count\n        (if\
    \ (zero? (sum-digits (car arr)))\n            (count-nums-helper (cdr arr) count)\n\
    \            (count-nums-helper (cdr arr) (+ count 1)))))\n  (count-nums-helper\
    \ arr 0))\n", "  (define (sum-digits n)\n    (cond\n      [(< n 0) (- n)]\n  \
    \    [(< n 10) n]\n      [else (+ (modulo n 10) (sum-digits (quotient n 10)))]))\n\
    \  (define (sum-digits-of-arr arr)\n    (cond\n      [(empty? arr) 0]\n      [else\
    \ (+ (sum-digits (first arr)) (sum-digits-of-arr (rest arr)))]))\n  (define (count-nums-of-arr\
    \ arr)\n    (cond\n      [(empty? arr) 0]\n      [(> (sum-digits (first arr))\
    \ 0) (+ 1 (count-nums-of-arr (rest arr)))]\n      [else (count-nums-of-arr (rest\
    \ arr))]))\n  (count-nums-of-arr arr))\n", "  (define (sum-digits n)\n    (cond\n\
    \      [(zero? n) 0]\n      [else (+ (remainder n 10) (sum-digits (quotient n\
    \ 10)))]))\n  (define (sum-signed-digits n)\n    (cond\n      [(zero? n) 0]\n\
    \      [(negative? n) (- (remainder n 10) (sum-signed-digits (quotient n 10)))]\n\
    \      [else (+ (remainder n 10) (sum-signed-digits (quotient n 10)))]))\n  (define\
    \ (count-nums-helper arr count)\n    (cond\n      [(empty? arr) count]\n     \
    \ [(> (sum-signed-digits (first arr)) 0) (count-nums-helper (rest arr) (+ count\
    \ 1))]\n      [else (count-nums-helper (rest arr) count)]))\n  (count-nums-helper\
    \ arr 0))\n", "  (cond [(empty? arr) 0]\n        [else (+ (if (> (sum-digits (first\
    \ arr)) 0) 1 0)\n                 (count_nums (rest arr)))]))\n", "  (cond [(empty?\
    \ arr) 0]\n        [else\n         (if (> (sum-digits (first arr)) 0)\n      \
    \       (+ 1 (count_nums (rest arr)))\n             (count_nums (rest arr)))]))\n",
  "  (define (sum-digits n)\n    (cond\n      [(< n 0) (+ (modulo n 10) (sum-digits\
    \ (quotient n 10)))]\n      [(= n 0) 0]\n      [else (+ (modulo n 10) (sum-digits\
    \ (quotient n 10)))]))\n  (define (count-nums-helper arr count)\n    (cond\n \
    \     [(null? arr) count]\n      [(> (sum-digits (car arr)) 0) (count-nums-helper\
    \ (cdr arr) (+ count 1))]\n      [else (count-nums-helper (cdr arr) count)]))\n\
    \  (count-nums-helper arr 0))\n", "  (cond\n    [(empty? arr) 0]\n    [(> (sum-digits\
    \ (first arr)) 0) (+ 1 (count_nums (rest arr)))]\n    [else (count_nums (rest\
    \ arr))]))\n", "  (define (sum-digits n)\n    (if (negative? n)\n        (sum-digits\
    \ (- n))\n      (if (zero? n)\n          0\n          (+ (modulo n 10) (sum-digits\
    \ (quotient n 10))))))\n  (define (sum-digits-gt-0? n)\n    (> (sum-digits n)\
    \ 0))\n  (define (count-nums-helper arr count)\n    (if (empty? arr)\n       \
    \ count\n        (if (sum-digits-gt-0? (first arr))\n            (count-nums-helper\
    \ (rest arr) (+ count 1))\n            (count-nums-helper (rest arr) count))))\n\
    \  (count-nums-helper arr 0))\n", "  (define (sum-digits n)\n    (cond\n     \
    \ [(< n 0) (- n)]\n      [(= n 0) 0]\n      [else (+ (modulo n 10) (sum-digits\
    \ (quotient n 10)))]))\n  (define (count-nums-helper arr count)\n    (cond\n \
    \     [(empty? arr) count]\n      [(> (sum-digits (first arr)) 0) (count-nums-helper\
    \ (rest arr) (+ count 1))]\n      [else (count-nums-helper (rest arr) count)]))\n\
    \  (count-nums-helper arr 0))\n", "  (cond\n    [(empty? arr) 0]\n    [(> (sum-digits\
    \ (first arr)) 0) (+ 1 (count_nums (rest arr)))]\n    [else (count_nums (rest\
    \ arr))]))\n", "  (length (filter (lambda (x)\n                    (if (negative?\
    \ x)\n                        (if (zero? (modulo x 10))\n                    \
    \        #f\n                            #t)\n                        #t))\n \
    \                 arr)))\n", "  (define (sum_digits n)\n    (cond\n      [(zero?\
    \ n) 0]\n      [(negative? n) (- (sum_digits (- n)))]\n      [else (+ (remainder\
    \ n 10) (sum_digits (quotient n 10)))]))\n  (define (count_nums_helper arr count)\n\
    \    (cond\n      [(null? arr) count]\n      [(> (sum_digits (car arr)) 0) (count_nums_helper\
    \ (cdr arr) (+ count 1))]\n      [else (count_nums_helper (cdr arr) count)]))\n\
    \  (count_nums_helper arr 0))\n", "  (define (sum-digits n)\n    (if (negative?\
    \ n)\n        (sum-digits (- n))\n      (if (zero? n)\n          0\n         \
    \ (+ (remainder n 10) (sum-digits (quotient n 10))))))\n  (define (count-nums-helper\
    \ arr count)\n    (if (null? arr)\n        count\n        (if (> (sum-digits (car\
    \ arr)) 0)\n            (count-nums-helper (cdr arr) (+ count 1))\n          \
    \  (count-nums-helper (cdr arr) count))))\n  (count-nums-helper arr 0))\n", " \
    \ (define (sum-digits n)\n    (if (negative? n)\n        (add1 (sum-digits (abs\
    \ n)))\n        (if (zero? n)\n            0\n            (add1 (sum-digits (quotient\
    \ n 10))))))\n  (define (count-nums-helper arr count)\n    (if (null? arr)\n \
    \       count\n        (if (zero? (sum-digits (car arr)))\n            (count-nums-helper\
    \ (cdr arr) count)\n            (count-nums-helper (cdr arr) (add1 count)))))\n\
    \  (count-nums-helper arr 0))\n", "  (apply + (map (lambda (x) (if (not (zero?\
    \ (abs x))) 1 0)) arr)))\n", "  (cond\n    [(empty? arr) 0]\n    [(> (sum-digits\
    \ (car arr)) 0) (+ 1 (count_nums (cdr arr)))]\n    [else (count_nums (cdr arr))]))\n",
  "  (define (sum-digits n)\n    (cond\n      [(< n 0) (- n)]\n      [(< n 10) n]\n\
    \      [else (+ (modulo n 10) (sum-digits (quotient n 10)))]))\n  (define (sum-digits-array\
    \ arr)\n    (cond\n      [(empty? arr) 0]\n      [else (+ (sum-digits (first arr))\
    \ (sum-digits-array (rest arr)))]))\n  (sum-digits-array arr))\n", "  (define\
    \ (sum-digits n)\n    (cond [(zero? n) 0]\n          [else (+ (remainder n 10)\
    \ (sum-digits (quotient n 10)))]))\n  (define (count-nums-helper arr count)\n\
    \    (cond [(empty? arr) count]\n          [(> (sum-digits (first arr)) 0) (count-nums-helper\
    \ (rest arr) (+ count 1))]\n          [else (count-nums-helper (rest arr) count)]))\n\
    \  (count-nums-helper arr 0))\n", "  (define (sum-digits n)\n    (if (negative?\
    \ n)\n        (sum-digits (- n))\n      (if (zero? n)\n          0\n         \
    \ (+ (remainder n 10) (sum-digits (quotient n 10))))))\n  (define (count-nums-helper\
    \ arr count)\n    (if (null? arr)\n        count\n        (if (> (sum-digits (car\
    \ arr)) 0)\n            (count-nums-helper (cdr arr) (+ count 1))\n          \
    \  (count-nums-helper (cdr arr) count))))\n  (count-nums-helper arr 0))\n", " \
    \ (define (sum-digits n)\n    (if (negative? n)\n        (sum-digits (- n))\n\
    \      (if (zero? n)\n          0\n          (+ (remainder n 10) (sum-digits (quotient\
    \ n 10))))))\n  (define (sum-digits-gt-0? n)\n    (> (sum-digits n) 0))\n  (length\
    \ (filter sum-digits-gt-0? arr)))\n", "  (cond [(empty? arr) 0]\n        [else\
    \ (+ (if (> (sum-digits (first arr)) 0) 1 0)\n                 (count_nums (rest\
    \ arr)))]))\n", "  (cond\n    [(empty? arr) 0]\n    [else\n     (if (> (sum-digits\
    \ (first arr)) 0)\n         (+ 1 (count_nums (rest arr)))\n         (count_nums\
    \ (rest arr)))]))\n", "  (cond\n    [(empty? arr) 0]\n    [(> (sum-digits (first\
    \ arr)) 0) (+ 1 (count_nums (rest arr)))]\n    [else (count_nums (rest arr))]))\n",
  "  (cond [(empty? arr) 0]\n        [else (+ (if (> (sum-digits (first arr)) 0) 1\
    \ 0)\n                 (count_nums (rest arr)))]))\n", "  (define (sum-digits\
    \ n)\n    (if (negative? n)\n        (add1 (sum-digits (abs n)))\n        (if\
    \ (zero? n)\n            0\n            (add1 (sum-digits (quotient n 10))))))\n\
    \  (define (sum-digits-of-arr arr)\n    (if (null? arr)\n        0\n        (add1\
    \ (sum-digits-of-arr (cdr arr)))))\n  (sum-digits-of-arr arr))\n", "  (length\
    \ (filter (lambda (x)\n                    (if (negative? x)\n               \
    \         (if (zero? (modulo x 10))\n                            #f\n        \
    \                    #t)\n                        (if (zero? (modulo x 10))\n\
    \                            #f\n                            #t)))\n         \
    \         arr)))\n", "  (cond\n    [(empty? arr) 0]\n    [(> (sum-digits (first\
    \ arr)) 0) (+ 1 (count_nums (rest arr)))]\n    [else (count_nums (rest arr))]))\n",
  "  (cond\n    [(empty? arr) 0]\n    [(> (sum-digits (first arr)) 0)\n     (+ 1 (count_nums\
    \ (rest arr)))]\n    [else (count_nums (rest arr))]))\n", "  (cond\n    [(empty?\
    \ arr) 0]\n    [(> (sum-digits (first arr)) 0) (+ 1 (count_nums (rest arr)))]\n\
    \    [else (count_nums (rest arr))]))\n", "  (cond\n    [(empty? arr) 0]\n   \
    \ [(positive? (sum-digits (first arr)))\n     (+ 1 (count_nums (rest arr)))]\n\
    \    [else (count_nums (rest arr))]))\n", "  (cond\n    [(empty? arr) 0]\n   \
    \ [(> (sum-digits (first arr)) 0)\n     (+ 1 (count_nums (rest arr)))]\n    [else\
    \ (count_nums (rest arr))]))\n", "  (cond\n    [(empty? arr) 0]\n    [(> (sum-digits\
    \ (first arr)) 0) (+ 1 (count_nums (rest arr)))]\n    [else (count_nums (rest\
    \ arr))]))\n", "  (define (digits n)\n    (if (negative? n)\n        (cons (-\
    \ n) (digits (- n)))\n        (if (zero? n)\n            '()\n            (cons\
    \ (modulo n 10) (digits (quotient n 10))))))\n  (define (sum-digits n)\n    (if\
    \ (zero? n)\n        0\n        (+ (car n) (sum-digits (cdr n)))))\n  (define\
    \ (sum-digits-gt-0? n)\n    (if (zero? n)\n        #f\n        (if (zero? (sum-digits\
    \ n))\n            #f\n            #t)))\n  (define (count-nums-helper arr)\n\
    \    (if (null? arr)\n        0\n        (if (sum-digits-gt-0? (digits (car arr)))\n\
    \            (+ 1 (count-nums-helper (cdr arr)))\n            (count-nums-helper\
    \ (cdr arr)))))\n  (count-nums-helper arr))\n", "  (define (signed-digits n)\n\
    \    (if (negative? n)\n        (cons (- n) (signed-digits (- n)))\n        (cons\
    \ n (signed-digits (/ n 10)))))\n  (define (sum-digits n)\n    (if (zero? n)\n\
    \        0\n        (+ (modulo n 10) (sum-digits (/ n 10)))))\n  (define (count-nums-helper\
    \ arr)\n    (if (empty? arr)\n        0\n        (if (> (sum-digits (car arr))\
    \ 0)\n            (+ 1 (count-nums-helper (cdr arr)))\n            (count-nums-helper\
    \ (cdr arr)))))\n  (count-nums-helper arr))\n", "  (define (sum-digits n)\n  \
    \  (cond\n      [(zero? n) 0]\n      [(negative? n) (+ (remainder n 10) (sum-digits\
    \ (quotient n 10)))]\n      [else (+ (remainder n 10) (sum-digits (quotient n\
    \ 10)))]))\n  (define (count-nums-helper arr count)\n    (cond\n      [(empty?\
    \ arr) count]\n      [(> (sum-digits (first arr)) 0) (count-nums-helper (rest\
    \ arr) (+ count 1))]\n      [else (count-nums-helper (rest arr) count)]))\n  (count-nums-helper\
    \ arr 0))\n", "  (cond\n    [(empty? arr) 0]\n    [else\n     (if (> (sum-digits\
    \ (first arr)) 0)\n         (+ 1 (count_nums (rest arr)))\n         (count_nums\
    \ (rest arr)))]))\n", "  (define (sum-digits n)\n    (if (negative? n)\n     \
    \   (sum-digits (- n))\n      (if (zero? n)\n          0\n          (+ (remainder\
    \ n 10) (sum-digits (quotient n 10))))))\n  (define (loop arr count)\n    (if\
    \ (null? arr)\n        count\n        (if (> (sum-digits (car arr)) 0)\n     \
    \       (loop (cdr arr) (+ count 1))\n            (loop (cdr arr) count))))\n\
    \  (loop arr 0))\n", "  (let loop ([arr arr] [count 0])\n    (cond [(empty? arr)\
    \ count]\n          [(> (sum-digits (first arr)) 0) (loop (rest arr) (+ count\
    \ 1))]\n          [else (loop (rest arr) count)])))\n", "  (length (filter (lambda\
    \ (x)\n                    (not (zero? (apply + (map abs (string->list (number->string\
    \ x)))))))\n                  arr)))\n", "  (define (sum_digits n)\n    (cond\n\
    \      [(= n 0) 0]\n      [else (+ (modulo n 10) (sum_digits (quotient n 10)))]))\n\
    \  (define (sum_signed_digits n)\n    (cond\n      [(= n 0) 0]\n      [(< n 0)\
    \ (- (sum_signed_digits (- n)))]\n      [else (+ (modulo n 10) (sum_signed_digits\
    \ (quotient n 10)))]))\n  (define (count_nums_iter arr count)\n    (cond\n   \
    \   [(empty? arr) count]\n      [(> (sum_signed_digits (first arr)) 0) (count_nums_iter\
    \ (rest arr) (+ count 1))]\n      [else (count_nums_iter (rest arr) count)]))\n\
    \  (count_nums_iter arr 0))\n", "  (define (sum-digits n)\n    (cond\n      [(negative?\
    \ n)\n       (+ (modulo n 10)\n          (sum-digits (quotient n 10)))]\n    \
    \  [(zero? n) 0]\n      [else\n       (+ (modulo n 10)\n          (sum-digits\
    \ (quotient n 10)))]))\n  (define (count-nums-helper arr count)\n    (cond\n \
    \     [(empty? arr) count]\n      [(> (sum-digits (first arr)) 0)\n       (count-nums-helper\
    \ (rest arr) (+ count 1))]\n      [else\n       (count-nums-helper (rest arr)\
    \ count)]))\n  (count-nums-helper arr 0))\n", "  (define (sum-digits n)\n    (cond\n\
    \      [(zero? n) 0]\n      [else (+ (remainder n 10) (sum-digits (quotient n\
    \ 10)))]))\n  (define (count-nums-helper arr count)\n    (cond\n      [(empty?\
    \ arr) count]\n      [(> (sum-digits (first arr)) 0) (count-nums-helper (rest\
    \ arr) (+ count 1))]\n      [else (count-nums-helper (rest arr) count)]))\n  (count-nums-helper\
    \ arr 0))\n", "  (define (sum-digits n)\n    (if (negative? n)\n        (sum-digits\
    \ (- n))\n      (if (zero? n)\n          0\n          (+ (remainder n 10) (sum-digits\
    \ (quotient n 10))))))\n  (define (count-nums-helper arr count)\n    (if (null?\
    \ arr)\n        count\n        (if (> (sum-digits (car arr)) 0)\n            (count-nums-helper\
    \ (cdr arr) (+ count 1))\n            (count-nums-helper (cdr arr) count))))\n\
    \  (count-nums-helper arr 0))\n", "  (define (sum-digits n)\n    (if (negative?\
    \ n)\n        (sum-digits (- n))\n      (if (zero? n)\n          0\n         \
    \ (+ (remainder n 10) (sum-digits (quotient n 10))))))\n  (define (count-nums-helper\
    \ arr count)\n    (if (null? arr)\n        count\n        (if (> (sum-digits (car\
    \ arr)) 0)\n            (count-nums-helper (cdr arr) (+ count 1))\n          \
    \  (count-nums-helper (cdr arr) count))))\n  (count-nums-helper arr 0))\n", " \
    \ (define (sum-digits n)\n    (if (zero? n)\n        0\n        (+ (remainder\
    \ n 10)\n           (sum-digits (quotient n 10)))))\n  (define (sum-signed-digits\
    \ n)\n    (if (negative? n)\n        (- (sum-digits n))\n        (sum-digits n)))\n\
    \  (define (count-nums arr)\n    (if (null? arr)\n        0\n        (if (> (sum-signed-digits\
    \ (car arr)) 0)\n            (+ 1 (count-nums (cdr arr)))\n            (count-nums\
    \ (cdr arr)))))\n  (count-nums arr))\n", "  (cond\n    [(empty? arr) 0]\n    [(>\
    \ (sum-digits (first arr)) 0) (+ 1 (count_nums (rest arr)))]\n    [else (count_nums\
    \ (rest arr))]))\n", "  (cond\n    [(empty? arr) 0]\n    [(> (sum-digits (first\
    \ arr)) 0) (+ 1 (count_nums (rest arr)))]\n    [else (count_nums (rest arr))]))\n",
  "  (cond\n    [(empty? arr) 0]\n    [(positive? (sum-digits (first arr)))\n    \
    \ (+ 1 (count_nums (rest arr)))]\n    [else (count_nums (rest arr))]))\n", " \
    \ (cond [(empty? arr) 0]\n        [else (+ (if (sum-of-digits (first arr)) 1 0)\n\
    \                 (count_nums (rest arr)))]))\n", "  (define (sum-digits n)\n\
    \    (cond\n      [(< n 0) (+ (modulo n 10) (sum-digits (quotient n 10)))]\n \
    \     [(= n 0) 0]\n      [else (+ (modulo n 10) (sum-digits (quotient n 10)))]))\n\
    \  (define (count-nums-helper arr count)\n    (cond\n      [(empty? arr) count]\n\
    \      [(> (sum-digits (first arr)) 0) (count-nums-helper (rest arr) (+ count\
    \ 1))]\n      [else (count-nums-helper (rest arr) count)]))\n  (count-nums-helper\
    \ arr 0))\n", "  (define (sum-digits n)\n    (if (negative? n)\n        (sum-digits\
    \ (- n))\n      (if (zero? n)\n          0\n          (+ (remainder n 10) (sum-digits\
    \ (quotient n 10))))))\n  (define (sum-digits-array arr)\n    (if (null? arr)\n\
    \        0\n        (+ (sum-digits (car arr)) (sum-digits-array (cdr arr)))))\n\
    \  (sum-digits-array arr))\n", "  (cond\n    [(empty? arr) 0]\n    [(> (sum-digits\
    \ (first arr)) 0)\n     (+ 1 (count_nums (rest arr)))]\n    [else (count_nums\
    \ (rest arr))]))\n", "  (cond\n    [(empty? arr) 0]\n    [(> (sum-digits (first\
    \ arr)) 0) (+ 1 (count_nums (rest arr)))]\n    [else (count_nums (rest arr))]))\n",
  "  (define (sum-digits n)\n    (cond\n      [(< n 0) (+ (modulo n 10) (sum-digits\
    \ (quotient n 10)))]\n      [(= n 0) 0]\n      [else (+ (modulo n 10) (sum-digits\
    \ (quotient n 10)))]))\n  (define (count-nums-helper arr count)\n    (cond\n \
    \     [(empty? arr) count]\n      [(> (sum-digits (first arr)) 0) (count-nums-helper\
    \ (rest arr) (+ count 1))]\n      [else (count-nums-helper (rest arr) count)]))\n\
    \  (count-nums-helper arr 0))\n", "  (define (sum-digits n)\n    (cond [(< n 0)\
    \ (+ (modulo n 10) (sum-digits (quotient n 10)))]\n          [(= n 0) 0]\n   \
    \       [else (+ (modulo n 10) (sum-digits (quotient n 10)))]))\n  (define (count-nums-helper\
    \ arr count)\n    (cond [(empty? arr) count]\n          [(> (sum-digits (first\
    \ arr)) 0) (count-nums-helper (rest arr) (+ count 1))]\n          [else (count-nums-helper\
    \ (rest arr) count)]))\n  (count-nums-helper arr 0))\n", "  (define (sum_digits\
    \ n)\n    (if (negative? n)\n        (sum_digits (- n))\n        (if (zero? n)\n\
    \            0\n            (+ (remainder n 10) (sum_digits (quotient n 10))))))\n\
    \  (define (sum_digits_arr arr)\n    (if (null? arr)\n        0\n        (+ (sum_digits\
    \ (car arr)) (sum_digits_arr (cdr arr)))))\n  (sum_digits_arr arr))\n", "  (cond\n\
    \    [(empty? arr) 0]\n    [(> (sum-digits (first arr)) 0) (+ 1 (count_nums (rest\
    \ arr)))]\n    [else (count_nums (rest arr))]))\n", "  (cond [(empty? arr) 0]\n\
    \        [else (+ (if (> (sum-digits (first arr)) 0) 1 0)\n                 (count_nums\
    \ (rest arr)))]))\n", "  (let ([count 0])\n    (for ([i (in-range (array-length\
    \ arr))])\n      (let ([num (array-ref arr i)])\n        (let ([sum 0])\n    \
    \      (for ([j (in-range (abs num))])\n            (set! sum (+ sum (remainder\
    \ (abs num) 10))))\n          (if (> sum 0)\n              (set! count (+ count\
    \ 1))))))\n    count))\n", "  (length (filter (lambda (x)\n                  \
    \  (if (negative? x)\n                        (if (zero? (modulo x 10))\n    \
    \                        #f\n                            #t)\n               \
    \         (if (zero? (modulo x 10))\n                            #f\n        \
    \                    #t)))\n                  arr)))\n", "  (define (sum-digits\
    \ n)\n    (if (negative? n)\n        (add1 (sum-digits (abs n)))\n        (if\
    \ (zero? n)\n            0\n            (add1 (sum-digits (quotient n 10))))))\n\
    \  (define (sum-digits-array arr)\n    (if (null? arr)\n        0\n        (add1\
    \ (sum-digits-array (cdr arr)))))\n  (sum-digits-array arr))\n", "  (define (count_nums-helper\
    \ arr acc)\n    (if (null? arr)\n        acc\n        (if (sum-of-digits (car\
    \ arr))\n            (count_nums-helper (cdr arr) (+ acc 1))\n            (count_nums-helper\
    \ (cdr arr) acc))))\n  (count_nums-helper arr 0))\n", "  (define (sum-digits n)\n\
    \    (if (negative? n)\n        (sum-digits (- n))\n      (if (zero? n)\n    \
    \      0\n          (+ (remainder n 10) (sum-digits (quotient n 10))))))\n  (define\
    \ (count-nums-helper arr count)\n    (if (null? arr)\n        count\n        (if\
    \ (> (sum-digits (car arr)) 0)\n            (count-nums-helper (cdr arr) (+ count\
    \ 1))\n            (count-nums-helper (cdr arr) count))))\n  (count-nums-helper\
    \ arr 0))\n", "  (define (sum-digits n)\n    (if (negative? n)\n        (sum-digits\
    \ (- n))\n      (if (zero? n)\n          0\n          (+ (remainder n 10) (sum-digits\
    \ (quotient n 10))))))\n  (define (sum-digits-array arr)\n    (if (null? arr)\n\
    \        0\n        (+ (sum-digits (car arr)) (sum-digits-array (cdr arr)))))\n\
    \  (sum-digits-array arr))\n", "  (define (sum-digits n)\n    (if (negative? n)\n\
    \        (add1 (sum-digits (abs n)))\n        (if (zero? n)\n            0\n \
    \           (add1 (sum-digits (quotient n 10))))))\n  (define (sum-digits-arr\
    \ arr)\n    (if (null? arr)\n        0\n        (add1 (sum-digits-arr (cdr arr)))))\n\
    \  (define (count-nums arr)\n    (if (null? arr)\n        0\n        (if (zero?\
    \ (sum-digits (car arr)))\n            (count-nums (cdr arr))\n            (add1\
    \ (count-nums (cdr arr))))))\n  (count-nums arr))\n", "  (cond\n    [(empty? arr)\
    \ 0]\n    [(> (apply + (map abs (string->list (number->string (car arr))))) 0)\n\
    \     (+ 1 (count_nums (cdr arr)))]\n    [else (count_nums (cdr arr))]))\n", " \
    \ (cond\n    [(empty? arr) 0]\n    [(positive? (sum-digits (first arr)))\n   \
    \  (+ 1 (count_nums (rest arr)))]\n    [else (count_nums (rest arr))]))\n", " \
    \ (define (sum-digits n)\n    (if (negative? n)\n        (add1 (sum-digits (abs\
    \ n)))\n        (if (zero? n)\n            0\n            (add1 (sum-digits (quotient\
    \ n 10))))))\n  (define (count-nums-helper arr count)\n    (if (empty? arr)\n\
    \        count\n        (if (zero? (sum-digits (first arr)))\n            (count-nums-helper\
    \ (rest arr) count)\n            (count-nums-helper (rest arr) (add1 count)))))\n\
    \  (count-nums-helper arr 0))\n", "  (if (null? arr)\n      0\n      (if (sum-of-digits\
    \ (car arr))\n          (+ 1 (count_nums (cdr arr)))\n          (count_nums (cdr\
    \ arr)))))\n", "  (cond\n    [(empty? arr) 0]\n    [(> (sum-digits (first arr))\
    \ 0)\n     (+ 1 (count_nums (rest arr)))]\n    [else (count_nums (rest arr))]))\n",
  "  (define (sum-digits n)\n    (if (negative? n)\n        (sum-digits (- n))\n \
    \     (if (zero? n)\n          0\n          (+ (remainder n 10) (sum-digits (quotient\
    \ n 10))))))\n  (define (count-nums-helper arr count)\n    (if (null? arr)\n \
    \       count\n        (if (> (sum-digits (car arr)) 0)\n            (count-nums-helper\
    \ (cdr arr) (+ count 1))\n            (count-nums-helper (cdr arr) count))))\n\
    \  (count-nums-helper arr 0))\n", "  (let loop ([arr arr] [count 0])\n    (cond\
    \ [(empty? arr) count]\n          [(> (sum-digits (first arr)) 0) (loop (rest\
    \ arr) (+ count 1))]\n          [else (loop (rest arr) count)])))\n", "  (define\
    \ (sum_digits n)\n    (if (negative? n)\n        (sum_digits (- n))\n        (if\
    \ (zero? n)\n            0\n            (+ (remainder n 10) (sum_digits (quotient\
    \ n 10))))))\n  (define (count_nums-helper arr count)\n    (if (empty? arr)\n\
    \        count\n        (if (> (sum_digits (first arr)) 0)\n            (count_nums-helper\
    \ (rest arr) (+ count 1))\n            (count_nums-helper (rest arr) count))))\n\
    \  (count_nums-helper arr 0))\n", "  (define (sum-digits n)\n    (if (negative?\
    \ n)\n        (sum-digits (- n))\n      (if (zero? n)\n          0\n         \
    \ (+ (remainder n 10) (sum-digits (quotient n 10))))))\n  (define (count-nums-helper\
    \ arr count)\n    (if (null? arr)\n        count\n        (if (> (sum-digits (car\
    \ arr)) 0)\n            (count-nums-helper (cdr arr) (+ count 1))\n          \
    \  (count-nums-helper (cdr arr) count))))\n  (count-nums-helper arr 0))\n", " \
    \ (length (filter (lambda (x) (not (zero? (sum-digits x)))) arr)))\n", "  (cond\n\
    \    [(empty? arr) 0]\n    [(> (sum-of-digits (first arr)) 0)\n     (+ 1 (count_nums\
    \ (rest arr)))]\n    [else (count_nums (rest arr))]))\n", "  (define (sum-digits\
    \ n)\n    (cond\n      [(zero? n) 0]\n      [else (+ (remainder n 10) (sum-digits\
    \ (quotient n 10)))]))\n  (define (sum-signed-digits n)\n    (cond\n      [(zero?\
    \ n) 0]\n      [(negative? n) (- (sum-digits n))]\n      [else (sum-digits n)]))\n\
    \  (define (count-nums-helper arr count)\n    (cond\n      [(empty? arr) count]\n\
    \      [(> (sum-signed-digits (first arr)) 0) (count-nums-helper (rest arr) (+\
    \ count 1))]\n      [else (count-nums-helper (rest arr) count)]))\n  (count-nums-helper\
    \ arr 0))\n", "  (cond\n    [(empty? arr) 0]\n    [(> (sum_digits (first arr))\
    \ 0) (+ 1 (count_nums (rest arr)))]\n    [else (count_nums (rest arr))]))\n",
  "  (define (sum-digits n)\n    (cond\n      [(zero? n) 0]\n      [else (+ (remainder\
    \ n 10) (sum-digits (quotient n 10)))]))\n  (define (signed-digits n)\n    (if\
    \ (negative? n)\n        (- n)\n        n))\n  (define (count-nums-helper arr\
    \ acc)\n    (cond\n      [(empty? arr) acc]\n      [(> (sum-digits (signed-digits\
    \ (first arr))) 0)\n       (count-nums-helper (rest arr) (+ acc 1))]\n      [else\
    \ (count-nums-helper (rest arr) acc)]))\n  (count-nums-helper arr 0))\n", "  (define\
    \ (sum-digits n)\n    (if (negative? n)\n        (add1 (sum-digits (add1 (abs\
    \ n))))\n        (if (zero? n)\n            0\n            (add1 (sum-digits (quotient\
    \ n 10))))))\n  (define (count-nums-helper arr count)\n    (if (null? arr)\n \
    \       count\n        (if (zero? (sum-digits (car arr)))\n            (count-nums-helper\
    \ (cdr arr) count)\n            (count-nums-helper (cdr arr) (add1 count)))))\n\
    \  (count-nums-helper arr 0))\n", "  (length (filter (lambda (x)\n           \
    \         (if (negative? x)\n                        (not (zero? (sum_digits (abs\
    \ x))))\n                        (not (zero? (sum_digits x)))))\n            \
    \      arr)))\n", "  (define (sum-digits n)\n    (if (negative? n)\n        (add1\
    \ (sum-digits (abs n)))\n        (if (zero? n)\n            0\n            (add1\
    \ (sum-digits (quotient n 10))))))\n  (define (sum-digits-array arr)\n    (if\
    \ (null? arr)\n        0\n        (add1 (sum-digits-array (cdr arr)))))\n  (sum-digits-array\
    \ arr))\n", "  (let ([count 0])\n    (for ([elem arr])\n      (if (> (sum-digits\
    \ elem) 0)\n          (set! count (+ count 1))))\n    count))\n", "  (define (sum-digits\
    \ n)\n    (if (negative? n)\n        (sum-digits (- n))\n      (if (zero? n)\n\
    \          0\n          (+ (remainder n 10) (sum-digits (quotient n 10))))))\n\
    \  (define (sum-digits-array arr)\n    (if (null? arr)\n        0\n        (+\
    \ (sum-digits (car arr)) (sum-digits-array (cdr arr)))))\n  (sum-digits-array\
    \ arr))\n", "  (define (sum-digits n)\n    (cond\n      [(< n 0) (+ (modulo n\
    \ 10) (sum-digits (quotient n 10)))]\n      [(= n 0) 0]\n      [else (+ (modulo\
    \ n 10) (sum-digits (quotient n 10)))]))\n  (define (count-nums-helper arr count)\n\
    \    (cond\n      [(empty? arr) count]\n      [(> (sum-digits (first arr)) 0)\
    \ (count-nums-helper (rest arr) (+ count 1))]\n      [else (count-nums-helper\
    \ (rest arr) count)]))\n  (count-nums-helper arr 0))\n", "  (define (sum-digits\
    \ n)\n    (cond\n      [(< n 0) (- n)]\n      [(< n 10) n]\n      [else (+ (modulo\
    \ n 10) (sum-digits (quotient n 10)))]))\n  (define (count-nums-helper arr count)\n\
    \    (cond\n      [(null? arr) count]\n      [(> (sum-digits (car arr)) 0) (count-nums-helper\
    \ (cdr arr) (+ count 1))]\n      [else (count-nums-helper (cdr arr) count)]))\n\
    \  (count-nums-helper arr 0))\n", "  (define (sum-digits n)\n    (cond\n     \
    \ [(< n 0) (+ (modulo n 10) (sum-digits (quotient n 10)))]\n      [(= n 0) 0]\n\
    \      [else (+ (modulo n 10) (sum-digits (quotient n 10)))]))\n  (define (count-nums-helper\
    \ arr count)\n    (cond\n      [(empty? arr) count]\n      [(> (sum-digits (first\
    \ arr)) 0) (count-nums-helper (rest arr) (+ count 1))]\n      [else (count-nums-helper\
    \ (rest arr) count)]))\n  (count-nums-helper arr 0))\n", "  (define (sum-digits\
    \ n)\n    (if (zero? n)\n        0\n        (+ (modulo n 10) (sum-digits (quotient\
    \ n 10)))))\n  (define (count-nums-iter arr count)\n    (if (null? arr)\n    \
    \    count\n        (if (> (sum-digits (car arr)) 0)\n            (count-nums-iter\
    \ (cdr arr) (+ count 1))\n            (count-nums-iter (cdr arr) count))))\n \
    \ (count-nums-iter arr 0))\n", "  (cond\n    [(empty? arr) 0]\n    [(positive?\
    \ (sum-digits (first arr)))\n     (+ 1 (count_nums (rest arr)))]\n    [else (count_nums\
    \ (rest arr))]))\n", "  (define (sum-digits n)\n    (if (negative? n)\n      \
    \  (sum-digits (- n))\n      (if (zero? n)\n          0\n          (+ (remainder\
    \ n 10) (sum-digits (quotient n 10))))))\n  (define (sum-digits-array arr)\n \
    \   (if (null? arr)\n        0\n        (+ (sum-digits (car arr)) (sum-digits-array\
    \ (cdr arr)))))\n  (sum-digits-array arr))\n", "  (cond\n    [(empty? arr) 0]\n\
    \    [(> (sum-digits (first arr)) 0)\n     (+ 1 (count_nums (rest arr)))]\n  \
    \  [else (count_nums (rest arr))]))\n", "  (define (sum-digits n)\n    (if (negative?\
    \ n)\n        (sum-digits (- n))\n      (if (zero? n)\n          0\n         \
    \ (+ (remainder n 10) (sum-digits (quotient n 10))))))\n  (define (sum-digits-gt-0?\
    \ n)\n    (> (sum-digits n) 0))\n  (length (filter sum-digits-gt-0? arr)))\n",
  "  (define (sum-digits n)\n    (cond\n      [(< n 0) (- n)]\n      [(= n 0) 0]\n\
    \      [else (+ (modulo n 10) (sum-digits (quotient n 10)))]))\n  (define (count-nums-helper\
    \ arr)\n    (cond\n      [(null? arr) 0]\n      [(> (sum-digits (car arr)) 0)\
    \ (+ 1 (count-nums-helper (cdr arr)))]\n      [else (count-nums-helper (cdr arr))]))\n\
    \  (count-nums-helper arr))\n", "  (define (sum-digits n)\n    (if (negative?\
    \ n)\n        (sum-digits (- n))\n      (if (zero? n)\n          0\n         \
    \ (+ (remainder n 10) (sum-digits (quotient n 10))))))\n  (define (sum-digits-gt-0?\
    \ n)\n    (> (sum-digits n) 0))\n  (length (filter sum-digits-gt-0? arr)))\n",
  "  (define (sum_digits n)\n    (cond\n      [(zero? n) 0]\n      [(negative? n)\
    \ (- (sum_digits (- n)))]\n      [else (+ (remainder n 10) (sum_digits (quotient\
    \ n 10)))]))\n  (define (count_nums-helper arr count)\n    (cond\n      [(empty?\
    \ arr) count]\n      [(> (sum_digits (first arr)) 0) (count_nums-helper (rest\
    \ arr) (+ count 1))]\n      [else (count_nums-helper (rest arr) count)]))\n  (count_nums-helper\
    \ arr 0))\n", "  (cond\n    [(empty? arr) 0]\n    [(> (sum-digits (first arr))\
    \ 0) (+ 1 (count_nums (rest arr)))]\n    [else (count_nums (rest arr))]))\n",
  "  (define (sum-digits n)\n    (cond\n      [(zero? n) 0]\n      [else (+ (remainder\
    \ n 10) (sum-digits (quotient n 10)))]))\n  (define (sum-signed-digits n)\n  \
    \  (cond\n      [(negative? n) (- (sum-digits n))]\n      [else (sum-digits n)]))\n\
    \  (define (count-nums-helper arr count)\n    (cond\n      [(empty? arr) count]\n\
    \      [(> (sum-signed-digits (first arr)) 0) (count-nums-helper (rest arr) (+\
    \ count 1))]\n      [else (count-nums-helper (rest arr) count)]))\n  (count-nums-helper\
    \ arr 0))\n", "  (cond [(empty? arr) 0]\n        [else\n         (if (positive?\
    \ (sum-digits (first arr)))\n             (+ 1 (count_nums (rest arr)))\n    \
    \         (count_nums (rest arr)))]))\n", "  (define (sum-digits n)\n    (cond\n\
    \      [(negative? n) (sum-digits (- n))]\n      [(zero? n) 0]\n      [else (+\
    \ (remainder n 10) (sum-digits (quotient n 10)))]))\n  (define (count-nums-helper\
    \ arr count)\n    (cond\n      [(empty? arr) count]\n      [(> (sum-digits (first\
    \ arr)) 0) (count-nums-helper (rest arr) (+ count 1))]\n      [else (count-nums-helper\
    \ (rest arr) count)]))\n  (count-nums-helper arr 0))\n", "  (length (filter (lambda\
    \ (n) (> (sum-digits n) 0)) arr)))\n", "  (define (sum_digits n)\n    (cond\n\
    \      [(< n 0) (+ (sum_digits (- n)))]\n      [(< n 10) n]\n      [else (+ (sum_digits\
    \ (quotient n 10)) (remainder n 10))]))\n  (define (sum_digits_arr arr)\n    (cond\n\
    \      [(empty? arr) 0]\n      [else (+ (sum_digits (first arr)) (sum_digits_arr\
    \ (rest arr)))]))\n  (define (count_nums_helper arr)\n    (cond\n      [(empty?\
    \ arr) 0]\n      [(> (sum_digits (first arr)) 0) (+ 1 (count_nums_helper (rest\
    \ arr)))]\n      [else (count_nums_helper (rest arr))]))\n  (count_nums_helper\
    \ arr))\n", "  (cond\n    [(empty? arr) 0]\n    [(> (sum-digits (first arr)) 0)\
    \ (+ 1 (count_nums (rest arr)))]\n    [else (count_nums (rest arr))]))\n", " \
    \ (define (sum-digits n)\n    (if (negative? n)\n        (sum-digits (- n))\n\
    \      (if (zero? n)\n          0\n          (+ (modulo n 10) (sum-digits (quotient\
    \ n 10))))))\n  (define (count-nums-helper arr count)\n    (if (null? arr)\n \
    \       count\n        (if (> (sum-digits (car arr)) 0)\n            (count-nums-helper\
    \ (cdr arr) (+ count 1))\n            (count-nums-helper (cdr arr) count))))\n\
    \  (count-nums-helper arr 0))\n", "  (cond [(empty? arr) 0]\n        [else (+\
    \ (if (> (sum-digits (first arr)) 0) 1 0)\n                 (count_nums (rest\
    \ arr)))]))\n", "  (define (sum-digits n)\n    (cond\n      [(< n 0) (+ (modulo\
    \ n 10) (sum-digits (quotient n 10)))]\n      [(= n 0) 0]\n      [else (+ (modulo\
    \ n 10) (sum-digits (quotient n 10)))]))\n  (define (count-nums-helper arr count)\n\
    \    (cond\n      [(empty? arr) count]\n      [(> (sum-digits (first arr)) 0)\
    \ (count-nums-helper (rest arr) (+ count 1))]\n      [else (count-nums-helper\
    \ (rest arr) count)]))\n  (count-nums-helper arr 0))\n", "  (define (sum-digits\
    \ n)\n    (if (negative? n)\n        (sum-digits (- n))\n      (if (zero? n)\n\
    \          0\n          (+ (remainder n 10) (sum-digits (quotient n 10))))))\n\
    \  (define (count-nums-helper arr count)\n    (if (null? arr)\n        count\n\
    \        (if (> (sum-digits (car arr)) 0)\n            (count-nums-helper (cdr\
    \ arr) (+ count 1))\n            (count-nums-helper (cdr arr) count))))\n  (count-nums-helper\
    \ arr 0))\n", "  (cond [(empty? arr) 0]\n        [else (+ (if (sum-digits (first\
    \ arr)) 1 0)\n                 (count_nums (rest arr)))]))\n", "  (cond [(empty?\
    \ arr) 0]\n        [else\n         (if (positive? (sum-digits (first arr)))\n\
    \             (+ 1 (count_nums (rest arr)))\n             (count_nums (rest arr)))]))\n",
  "  (cond\n    [(empty? arr) 0]\n    [(> (sum-digits (first arr)) 0) (+ 1 (count_nums\
    \ (rest arr)))]\n    [else (count_nums (rest arr))]))\n", "  (define (sum-digits\
    \ n)\n    (cond\n      [(zero? n) 0]\n      [else (+ (remainder n 10) (sum-digits\
    \ (quotient n 10)))]))\n  (define (sum-signed-digits n)\n    (cond\n      [(zero?\
    \ n) 0]\n      [(negative? n) (- (remainder n 10) (sum-signed-digits (quotient\
    \ n 10)))]\n      [else (+ (remainder n 10) (sum-signed-digits (quotient n 10)))]))\n\
    \  (define (count-nums-helper arr count)\n    (cond\n      [(empty? arr) count]\n\
    \      [(> (sum-signed-digits (first arr)) 0) (count-nums-helper (rest arr) (+\
    \ count 1))]\n      [else (count-nums-helper (rest arr) count)]))\n  (count-nums-helper\
    \ arr 0))\n", "  (define (sum-digits n)\n    (cond\n      [(< n 0) (+ (modulo\
    \ n 10) (sum-digits (quotient n 10)))]\n      [(= n 0) 0]\n      [else (+ (modulo\
    \ n 10) (sum-digits (quotient n 10)))]))\n  (define (count-nums-helper arr sum)\n\
    \    (cond\n      [(null? arr) sum]\n      [(> (sum-digits (car arr)) 0) (count-nums-helper\
    \ (cdr arr) (+ sum 1))]\n      [else (count-nums-helper (cdr arr) sum)]))\n  (count-nums-helper\
    \ arr 0))\n", "  (define (sum-digits n)\n    (if (negative? n)\n        (sum-digits\
    \ (- n))\n      (if (zero? n)\n          0\n          (+ (remainder n 10) (sum-digits\
    \ (quotient n 10))))))\n  (define (sum-digits-arr arr)\n    (if (empty? arr)\n\
    \        0\n        (+ (sum-digits (first arr)) (sum-digits-arr (rest arr)))))\n\
    \  (sum-digits-arr arr))\n", "  (length (filter (lambda (x)\n                \
    \    (not (zero? (sum-digits x))))\n                  arr)))\n", "  (cond\n  \
    \  [(empty? arr) 0]\n    [(> (sum-digits (first arr)) 0) (+ 1 (count_nums (rest\
    \ arr)))]\n    [else (count_nums (rest arr))]))\n"]
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
