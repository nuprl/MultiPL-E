name: HumanEval_160_do_algebra
language: racket
prompt: "#lang racket\n\n;; Given two lists operator, and operand. The first list\
  \ has basic algebra operations, and \n;; the second list is a list of integers.\
  \ Use the two given lists to build the algebric \n;; expression and return the evaluation\
  \ of this expression.\n;; The basic algebra operations:\n;; Addition ( + ) \n;;\
  \ Subtraction ( - ) \n;; Multiplication ( * ) \n;; Floor division ( // ) \n;; Exponentiation\
  \ ( ** ) \n;; Example:\n;; operator['+', '*', '-']\n;; array = [2, 3, 4, 5]\n;;\
  \ result = 2 + 3 * 4 - 5\n;; => result = 9\n;; Note:\n;; The length of operator\
  \ list is equal to the length of operand list minus one.\n;; Operand is a list of\
  \ of non-negative integers.\n;; Operator list has at least one operator, and operand\
  \ list has at least two operands.\n(define (do_algebra operator operand)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate do_algebra))\n\
  \    (check-equal? (candidate (list \"**\" \"*\" \"+\") (list 2 3 4 5)) 37)\n  \
  \  (check-equal? (candidate (list \"+\" \"*\" \"-\") (list 2 3 4 5)) 9)\n    (check-equal?\
  \ (candidate (list \"//\" \"*\") (list 7 3 4)) 8)\n))\n\n(test-humaneval)"
completions: ["  (define (do_algebra_helper operator operand result)\n    (cond ((null?\
    \ operator) result)\n          ((equal? (car operator) '+) (do_algebra_helper\
    \ (cdr operator) (cdr operand) (+ result (car operand))))\n          ((equal?\
    \ (car operator) '-) (do_algebra_helper (cdr operator) (cdr operand) (- result\
    \ (car operand))))\n          ((equal? (car operator) '*) (do_algebra_helper (cdr\
    \ operator) (cdr operand) (* result (car operand))))\n          ((equal? (car\
    \ operator) '//) (do_algebra_helper (cdr operator) (cdr operand) (quotient result\
    \ (car operand))))\n          ((equal? (car operator) '**) (do_algebra_helper\
    \ (cdr operator) (cdr operand) (expt result (car operand))))))\n  (do_algebra_helper\
    \ operator operand (car operand)))\n", "  (let loop ([operator operator] [operand\
    \ operand] [result (car operand)])\n    (if (null? operator)\n        result\n\
    \        (loop (cdr operator) (cdr operand)\n              (case (car operator)\n\
    \                ((+ -) (eval `(,(car operator) ,result ,(car operand))))\n  \
    \              ((* // **) (eval `(,(car operator) ,result ,(car operand)))))))))\n",
  "  (let loop ([operator operator] [operand operand] [result (car operand)])\n  \
    \  (if (null? operator)\n        result\n        (loop (cdr operator) (cdr operand)\n\
    \              (match (car operator)\n                ['+ (+ result (car operand))]\n\
    \                ['* (* result (car operand))]\n                ['- (- result\
    \ (car operand))]\n                ['// (quotient result (car operand))]\n   \
    \             ['** (expt result (car operand))])))))\n", "  (let loop ([op operator]\
    \ [opd operand] [result (car opd)])\n    (if (null? op)\n        result\n    \
    \    (loop (cdr op) (cdr opd) (match (car op)\n                              \
    \          ['+ (+ result (car opd))]\n                                       \
    \ ['* (* result (car opd))]\n                                        ['** (expt\
    \ result (car opd))]\n                                        ['/ (/ result (car\
    \ opd))]\n                                        ['- (- result (car opd))])))))\n",
  "  (define (helper operator operand result)\n    (if (null? operator)\n        result\n\
    \        (helper (cdr operator) (cdr operand)\n                (case (car operator)\n\
    \                  ((+) (+ result (car operand)))\n                  ((-) (- result\
    \ (car operand)))\n                  ((*) (* result (car operand)))\n        \
    \          ((//) (quotient result (car operand)))\n                  ((**) (expt\
    \ result (car operand)))))))\n  (helper operator operand (car operand)))\n", " \
    \ (define (do_algebra_helper operator operand result)\n    (if (empty? operator)\n\
    \        result\n        (do_algebra_helper (rest operator) (rest operand)\n \
    \                          (cond\n                             ((= (first operator)\
    \ '+) (+ result (first operand)))\n                             ((= (first operator)\
    \ '-) (- result (first operand)))\n                             ((= (first operator)\
    \ '*) (* result (first operand)))\n                             ((= (first operator)\
    \ '//) (quotient result (first operand)))\n                             ((= (first\
    \ operator) '**) (expt result (first operand)))))))\n  (do_algebra_helper operator\
    \ operand (first operand)))\n", "  (cond\n    [(empty? operator) (car operand)]\n\
    \    [else\n     (let ([op (car operator)]\n           [op1 (car operand)]\n \
    \          [op2 (car (cdr operand))])\n       (cond\n         [(equal? op '+)\
    \ (+ op1 op2)]\n         [(equal? op '-) (- op1 op2)]\n         [(equal? op '*)\
    \ (* op1 op2)]\n         [(equal? op '// (quotient op1 op2))]\n         [(equal?\
    \ op '** (expt op1 op2))]))]))\n", "  (let loop ([operator operator] [operand\
    \ operand] [result (car operand)])\n    (if (null? operator)\n        result\n\
    \        (loop (cdr operator) (cdr operand)\n              (cond\n           \
    \     [(equal? (car operator) '+) (+ result (car operand))]\n                [(equal?\
    \ (car operator) '-) (- result (car operand))]\n                [(equal? (car\
    \ operator) '*) (* result (car operand))]\n                [(equal? (car operator)\
    \ '//) (quotient result (car operand))]\n                [(equal? (car operator)\
    \ '**) (expt result (car operand))])))))\n", "  (let loop ([operator operator]\
    \ [operand operand] [result (car operand)])\n    (if (null? operator)\n      \
    \  result\n        (loop (cdr operator) (cdr operand)\n              (cond\n \
    \               [(equal? (car operator) '+) (+ result (car operand))]\n      \
    \          [(equal? (car operator) '-) (- result (car operand))]\n           \
    \     [(equal? (car operator) '*) (* result (car operand))]\n                [(equal?\
    \ (car operator) '//) (quotient result (car operand))]\n                [(equal?\
    \ (car operator) '**) (expt result (car operand))])))))\n", "  (define (do_op\
    \ op1 op2 op)\n    (cond ((eq? op '+) (+ op1 op2))\n          ((eq? op '-) (-\
    \ op1 op2))\n          ((eq? op '*) (* op1 op2))\n          ((eq? op '//) (quotient\
    \ op1 op2))\n          ((eq? op '**) (expt op1 op2))))\n  (define (do_algebra_iter\
    \ operator operand result)\n    (if (null? operator)\n        result\n       \
    \ (do_algebra_iter (cdr operator) (cdr operand) (do_op (car operand) (car (cdr\
    \ operand)) (car operator)))))\n  (do_algebra_iter operator operand (car operand)))\n",
  "  (let ([op (car operator)]\n        [op1 (car operand)]\n        [op2 (cadr operand)])\n\
    \    (cond\n      [(eq? op '+) (+ op1 op2)]\n      [(eq? op '-) (- op1 op2)]\n\
    \      [(eq? op '*) (* op1 op2)]\n      [(eq? op '//) (quotient op1 op2)]\n  \
    \    [(eq? op '**) (expt op1 op2)])))\n", "  (let loop ([operator operator] [operand\
    \ operand] [result (car operand)])\n    (if (null? operator)\n        result\n\
    \        (loop (cdr operator) (cdr operand)\n              (cond\n           \
    \     [(equal? (car operator) '+) (+ result (car operand))]\n                [(equal?\
    \ (car operator) '-) (- result (car operand))]\n                [(equal? (car\
    \ operator) '*) (* result (car operand))]\n                [(equal? (car operator)\
    \ '//) (quotient result (car operand))]\n                [(equal? (car operator)\
    \ '**) (expt result (car operand))])))))\n", "  (let loop ([op operator] [opd\
    \ operand] [result (car opd)])\n    (if (null? op)\n        result\n        (loop\
    \ (cdr op) (cdr opd)\n              (cond\n                [(equal? (car op) '+)\
    \ (+ result (car opd))]\n                [(equal? (car op) '-) (- result (car\
    \ opd))]\n                [(equal? (car op) '*) (* result (car opd))]\n      \
    \          [(equal? (car op) '//) (quotient result (car opd))]\n             \
    \   [(equal? (car op) '**) (expt result (car opd))])))))\n", "  (let loop ([op\
    \ operator] [opd operand] [result (car opd)])\n    (if (null? op)\n        result\n\
    \        (loop (cdr op) (cdr opd)\n              (cond\n                [(equal?\
    \ (car op) '+) (+ result (car opd))]\n                [(equal? (car op) '-) (-\
    \ result (car opd))]\n                [(equal? (car op) '*) (* result (car opd))]\n\
    \                [(equal? (car op) '//) (quotient result (car opd))]\n       \
    \         [(equal? (car op) '**) (expt result (car opd))])))))\n", "  (define\
    \ (do_algebra_helper operator operand result)\n    (if (null? operator)\n    \
    \    result\n        (do_algebra_helper (cdr operator) (cdr operand)\n       \
    \                    (cond\n                             ((equal? (car operator)\
    \ '+) (+ result (car operand)))\n                             ((equal? (car operator)\
    \ '-) (- result (car operand)))\n                             ((equal? (car operator)\
    \ '*) (* result (car operand)))\n                             ((equal? (car operator)\
    \ '//) (quotient result (car operand)))\n                             ((equal?\
    \ (car operator) '**) (expt result (car operand)))))))\n  (do_algebra_helper operator\
    \ operand (car operand)))\n", "  (let loop ([operator operator] [operand operand]\
    \ [result (car operand)])\n    (if (null? operator)\n        result\n        (loop\
    \ (cdr operator) (cdr operand)\n              (match (car operator)\n        \
    \        ['+ (+ result (car operand))]\n                ['* (* result (car operand))]\n\
    \                ['** (expt result (car operand))]\n                ['/ (/ result\
    \ (car operand))]\n                ['- (- result (car operand))])))))\n", "  (let\
    \ loop ([op operator] [opd operand] [result (car opd)])\n    (if (null? op)\n\
    \        result\n        (loop (cdr op) (cdr opd)\n              (cond [(equal?\
    \ (car op) '+) (+ result (car opd))]\n                    [(equal? (car op) '-)\
    \ (- result (car opd))]\n                    [(equal? (car op) '*) (* result (car\
    \ opd))]\n                    [(equal? (car op) '//) (quotient result (car opd))]\n\
    \                    [(equal? (car op) '**) (expt result (car opd))])))))\n",
  "  (if (null? operator)\n      (car operand)\n      (let ([op (car operator)]\n\
    \            [op1 (car operand)]\n            [op2 (cadr operand)])\n        (cond\n\
    \         [(equal? op '+) (+ op1 op2)]\n         [(equal? op '-) (- op1 op2)]\n\
    \         [(equal? op '*) (* op1 op2)]\n         [(equal? op '// (quotient op1\
    \ op2))]\n         [(equal? op '** (expt op1 op2))]))))\n", "  (define (do_algebra_iter\
    \ operator operand result)\n    (if (null? operator)\n        result\n       \
    \ (do_algebra_iter (cdr operator) (cdr operand)\n                         (match\
    \ (car operator)\n                           ['+ (+ result (car operand))]\n \
    \                          ['* (* result (car operand))]\n                   \
    \        ['- (- result (car operand))]\n                           ['// (quotient\
    \ result (car operand))]\n                           ['** (expt result (car operand))]))))\n\
    \  (do_algebra_iter operator operand (car operand)))\n", "  (define (do_op op1\
    \ op2 op)\n    (cond ((eq? op '+) (+ op1 op2))\n          ((eq? op '-) (- op1\
    \ op2))\n          ((eq? op '*) (* op1 op2))\n          ((eq? op '//) (quotient\
    \ op1 op2))\n          ((eq? op '**) (expt op1 op2))))\n  (define (do_algebra_helper\
    \ operator operand)\n    (if (null? operator)\n        (car operand)\n       \
    \ (do_op (car operand) (do_algebra_helper (cdr operator) (cdr operand)) (car operator))))\n\
    \  (do_algebra_helper operator operand))\n", "  (cond ((null? operator) (car operand))\n\
    \        ((eq? (car operator) '+) (+ (car operand) (do_algebra (cdr operator)\
    \ (cdr operand))))\n        ((eq? (car operator) '-) (- (car operand) (do_algebra\
    \ (cdr operator) (cdr operand))))\n        ((eq? (car operator) '*) (* (car operand)\
    \ (do_algebra (cdr operator) (cdr operand))))\n        ((eq? (car operator) '//)\
    \ (quotient (car operand) (do_algebra (cdr operator) (cdr operand))))\n      \
    \  ((eq? (car operator) '**) (expt (car operand) (do_algebra (cdr operator) (cdr\
    \ operand))))))\n", "  (define (do_algebra_iter operator operand acc)\n    (if\
    \ (null? operator)\n        acc\n        (do_algebra_iter (cdr operator) (cdr\
    \ operand) (eval `(,(car operator) ,acc ,(car operand))))))\n  (do_algebra_iter\
    \ operator operand (car operand)))\n", "  (define (do_algebra_helper operator\
    \ operand result)\n    (if (null? operator)\n        result\n        (do_algebra_helper\
    \ (cdr operator) (cdr operand)\n                           (cond\n           \
    \                  ((equal? (car operator) '+) (+ result (car operand)))\n   \
    \                          ((equal? (car operator) '-) (- result (car operand)))\n\
    \                             ((equal? (car operator) '*) (* result (car operand)))\n\
    \                             ((equal? (car operator) '//) (quotient result (car\
    \ operand)))\n                             ((equal? (car operator) '**) (expt\
    \ result (car operand)))))))\n  (do_algebra_helper operator operand (car operand)))\n",
  "  (let loop ([operator operator] [operand operand] [result (car operand)])\n  \
    \  (if (null? operator)\n        result\n        (loop (cdr operator) (cdr operand)\n\
    \              (cond\n                [(equal? (car operator) '+) (+ result (car\
    \ operand))]\n                [(equal? (car operator) '-) (- result (car operand))]\n\
    \                [(equal? (car operator) '*) (* result (car operand))]\n     \
    \           [(equal? (car operator) '//) (quotient result (car operand))]\n  \
    \              [(equal? (car operator) '**) (expt result (car operand))])))))\n",
  "  (define (do_algebra_iter operator operand result)\n    (if (null? operator)\n\
    \        result\n        (do_algebra_iter (cdr operator) (cdr operand)\n     \
    \                    (cond\n                           ((equal? (car operator)\
    \ '+) (+ result (car operand)))\n                           ((equal? (car operator)\
    \ '-) (- result (car operand)))\n                           ((equal? (car operator)\
    \ '*) (* result (car operand)))\n                           ((equal? (car operator)\
    \ '//) (quotient result (car operand)))\n                           ((equal? (car\
    \ operator) '**) (expt result (car operand)))))))\n  (do_algebra_iter operator\
    \ operand (car operand)))\n", "  (let loop ([operator operator] [operand operand]\
    \ [result (car operand)])\n    (if (null? operator)\n        result\n        (loop\
    \ (cdr operator) (cdr operand)\n              (cond [(equal? (car operator) '+)\
    \ (+ result (car operand))]\n                    [(equal? (car operator) '-) (-\
    \ result (car operand))]\n                    [(equal? (car operator) '*) (* result\
    \ (car operand))]\n                    [(equal? (car operator) '//) (quotient\
    \ result (car operand))]\n                    [(equal? (car operator) '**) (expt\
    \ result (car operand))])))))\n", "  (define (do_op op1 op2 op)\n    (cond\n \
    \     [(eq? op '+) (+ op1 op2)]\n      [(eq? op '-) (- op1 op2)]\n      [(eq?\
    \ op '*) (* op1 op2)]\n      [(eq? op '//) (quotient op1 op2)]\n      [(eq? op\
    \ '**) (expt op1 op2)]))\n  (define (do_ops ops)\n    (cond\n      [(null? ops)\
    \ 0]\n      [(null? (cdr ops)) (car ops)]\n      [else (do_op (car ops) (do_ops\
    \ (cdr ops)) (car operator))]))\n  (do_ops operand))\n", "  (define (op-func op)\n\
    \    (cond\n      [(equal? op '+) +]\n      [(equal? op '-) -]\n      [(equal?\
    \ op '*) *]\n      [(equal? op '//) (lambda (x y) (quotient x y))]\n      [(equal?\
    \ op '**) expt]))\n  (define (do-op op1 op2 op)\n    (apply (op-func op) op1 op2))\n\
    \  (define (do-algebra-helper operator operand)\n    (if (null? operator)\n  \
    \      (car operand)\n        (do-algebra-helper (cdr operator) (cons (do-op (car\
    \ operand) (cadr operand) (car operator)) (cddr operand)))))\n  (do-algebra-helper\
    \ operator operand))\n", "  (let loop ([op operator] [opd operand] [result (car\
    \ opd)])\n    (if (null? op)\n        result\n        (loop (cdr op) (cdr opd)\n\
    \              (cond\n                [(equal? (car op) '+) (+ result (car opd))]\n\
    \                [(equal? (car op) '-) (- result (car opd))]\n               \
    \ [(equal? (car op) '*) (* result (car opd))]\n                [(equal? (car op)\
    \ '//) (quotient result (car opd))]\n                [(equal? (car op) '**) (expt\
    \ result (car opd))])))))\n", "  (define (do_algebra-helper operator operand result)\n\
    \    (if (null? operator)\n        result\n        (do_algebra-helper (cdr operator)\
    \ (cdr operand)\n                           (case (car operator)\n           \
    \                  ((+ *) (+ result (car operand)))\n                        \
    \     ((- // **) (- result (car operand)))))))\n  (do_algebra-helper operator\
    \ operand (car operand)))\n", "  (let loop ([operator operator] [operand operand]\
    \ [result (car operand)])\n    (if (null? operator)\n        result\n        (loop\
    \ (cdr operator) (cdr operand)\n              (case (car operator)\n         \
    \       [(+) (+ result (car operand))]\n                [(-) (- result (car operand))]\n\
    \                [(*) (* result (car operand))]\n                [(//) (quotient\
    \ result (car operand))]\n                [(**) (expt result (car operand))])))))\n",
  "  (define (do_algebra_iter operator operand result)\n    (if (null? operator)\n\
    \        result\n        (do_algebra_iter (cdr operator) (cdr operand)\n     \
    \                    (cond\n                           ((string=? (car operator)\
    \ \"+\") (+ result (car operand)))\n                           ((string=? (car\
    \ operator) \"-\") (- result (car operand)))\n                           ((string=?\
    \ (car operator) \"*\") (* result (car operand)))\n                          \
    \ ((string=? (car operator) \"//\") (quotient result (car operand)))\n       \
    \                    ((string=? (car operator) \"**\") (expt result (car operand)))))))\n\
    \  (do_algebra_iter operator operand (car operand)))\n", "  (define (do_op op1\
    \ op2 op)\n    (cond\n      [(eq? op '+ ) (+ op1 op2)]\n      [(eq? op '- ) (-\
    \ op1 op2)]\n      [(eq? op '* ) (* op1 op2)]\n      [(eq? op '// ) (quotient\
    \ op1 op2)]\n      [(eq? op '** ) (expt op1 op2)]))\n  (define (do_algebra_helper\
    \ operator operand)\n    (if (null? operator)\n        (car operand)\n       \
    \ (do_algebra_helper (cdr operator) (cons (do_op (car operand) (cadr operand)\
    \ (car operator)) (cddr operand)))))\n  (do_algebra_helper operator operand))\n",
  "  (let loop ([operator operator] [operand operand] [accum 0])\n    (if (null? operator)\n\
    \        accum\n        (loop (cdr operator) (cdr operand)\n              (match\
    \ (car operator)\n                ['+ (+ accum (car operand))]\n             \
    \   ['* (* accum (car operand))]\n                ['- (- accum (car operand))]\n\
    \                ['// (quotient accum (car operand))]\n                ['** (expt\
    \ accum (car operand))])))))\n", "  (define (do_op op1 op2 op)\n    (cond\n  \
    \    [(eq? op '+) (+ op1 op2)]\n      [(eq? op '-) (- op1 op2)]\n      [(eq? op\
    \ '*) (* op1 op2)]\n      [(eq? op '//) (quotient op1 op2)]\n      [(eq? op '**)\
    \ (expt op1 op2)]))\n  (define (do_algebra_helper operator operand)\n    (if (null?\
    \ operator)\n        (car operand)\n        (do_op (car operand) (do_algebra_helper\
    \ (cdr operator) (cdr operand)) (car operator))))\n  (do_algebra_helper operator\
    \ operand))\n", "  (let loop ([operator operator] [operand operand] [result (car\
    \ operand)])\n    (if (null? operator)\n        result\n        (loop (cdr operator)\
    \ (cdr operand)\n              (cond\n                [(equal? (car operator)\
    \ '+) (+ result (car operand))]\n                [(equal? (car operator) '-) (-\
    \ result (car operand))]\n                [(equal? (car operator) '*) (* result\
    \ (car operand))]\n                [(equal? (car operator) '//) (quotient result\
    \ (car operand))]\n                [(equal? (car operator) '**) (expt result (car\
    \ operand))])))))\n", "  (define (do_algebra_iter operator operand result)\n \
    \   (cond\n      [(null? operator) result]\n      [else (do_algebra_iter (cdr\
    \ operator) (cdr operand) (eval (list (car operator) result (car operand))))]))\n\
    \  (do_algebra_iter operator operand (car operand)))\n", "  (define (do_algebra_helper\
    \ operator operand result)\n    (cond ((null? operator) (car operand))\n     \
    \     ((eq? (car operator) '+) (do_algebra_helper (cdr operator) (cdr operand)\
    \ (+ result (car operand))))\n          ((eq? (car operator) '-) (do_algebra_helper\
    \ (cdr operator) (cdr operand) (- result (car operand))))\n          ((eq? (car\
    \ operator) '*) (do_algebra_helper (cdr operator) (cdr operand) (* result (car\
    \ operand))))\n          ((eq? (car operator) '//) (do_algebra_helper (cdr operator)\
    \ (cdr operand) (quotient result (car operand))))\n          ((eq? (car operator)\
    \ '**) (do_algebra_helper (cdr operator) (cdr operand) (expt result (car operand))))))\n\
    \  (do_algebra_helper operator operand 0))\n", "  (let loop ((operator operator)\
    \ (operand operand) (result (car operand)))\n    (if (null? operator)\n      \
    \  result\n        (loop (cdr operator) (cdr operand)\n              (cond\n \
    \               ((equal? (car operator) '+) (+ result (car operand)))\n      \
    \          ((equal? (car operator) '-) (- result (car operand)))\n           \
    \     ((equal? (car operator) '*) (* result (car operand)))\n                ((equal?\
    \ (car operator) '//) (quotient result (car operand)))\n                ((equal?\
    \ (car operator) '**) (expt result (car operand))))))))\n", "  (define (do_op\
    \ op1 op2 op)\n    (cond\n      [(eq? op '+) (+ op1 op2)]\n      [(eq? op '-)\
    \ (- op1 op2)]\n      [(eq? op '*) (* op1 op2)]\n      [(eq? op '//) (quotient\
    \ op1 op2)]\n      [(eq? op '**) (expt op1 op2)]))\n  (define (do_ops ops ops2\
    \ ops)\n    (if (null? ops)\n        ops2\n        (do_ops (cdr ops) (do_op (car\
    \ ops2) (car ops) (car ops2)) (cdr ops2))))\n  (do_ops (cdr operand) (car operand)\
    \ operator))\n", "  (cond\n    [(empty? operator) (first operand)]\n    [else\
    \ (do_algebra (rest operator) (cons (eval (list (first operand) (first operator)\
    \ (second operand))) (rest (rest operand))))]))\n", "  (cond [(empty? operator)\
    \ (first operand)]\n        [(empty? operand) (error \"Operator list is longer\
    \ than operand list\")]\n        [else (do_algebra (rest operator) (cons (eval\
    \ (list (first operator) (first operand) (second operand))) (rest (rest operand))))]))\n",
  "  (cond\n    [(empty? operator) (car operand)]\n    [else\n     (let* ([op (car\
    \ operator)]\n            [op1 (car operand)]\n            [op2 (car (cdr operand))])\n\
    \       (cond\n         [(equal? op '+) (+ op1 op2)]\n         [(equal? op '-)\
    \ (- op1 op2)]\n         [(equal? op '*) (* op1 op2)]\n         [(equal? op '//\
    \ (quotient op1 op2))]\n         [(equal? op '** (expt op1 op2))]))]))\n", " \
    \ (define (do_op op1 op2 op)\n    (cond ((eq? op '+) (+ op1 op2))\n          ((eq?\
    \ op '-) (- op1 op2))\n          ((eq? op '*) (* op1 op2))\n          ((eq? op\
    \ '//) (quotient op1 op2))\n          ((eq? op '**) (expt op1 op2))))\n  (define\
    \ (do_algebra_helper operator operand)\n    (if (null? operator)\n        (car\
    \ operand)\n        (do_op (car operand) (do_algebra_helper (cdr operator) (cdr\
    \ operand)) (car operator))))\n  (do_algebra_helper operator operand))\n", " \
    \ (let loop ([operator operator] [operand operand] [result (car operand)])\n \
    \   (if (null? operator)\n        result\n        (loop (cdr operator) (cdr operand)\n\
    \              (match (car operator)\n                ['+ (add result (car operand))]\n\
    \                ['* (mul result (car operand))]\n                ['** (expt result\
    \ (car operand))]\n                ['// (floor (/ result (car operand))) ]\n \
    \               ['- (sub result (car operand))])))))\n</code>\n", "  (define (calculate\
    \ op1 op2 op)\n    (cond ((eq? op '+)(+ op1 op2))\n          ((eq? op '-)(- op1\
    \ op2))\n          ((eq? op '*)(* op1 op2))\n          ((eq? op '//)(quotient\
    \ op1 op2))\n          ((eq? op '**)(expt op1 op2))))\n  (define (calculate_all\
    \ ops ops1 ops2)\n    (cond ((null? ops1)(car ops2))\n          ((null? ops2)(calculate\
    \ (car ops1) (car ops2) (car ops)))\n          (else (calculate (car ops1) (calculate_all\
    \ ops (cdr ops1) (cdr ops2)) (car ops)))))\n  (calculate_all operator operand\
    \ (cdr operand)))\n", "  (define (do_op op1 op2 op)\n    (cond ((eq? op '+) (+\
    \ op1 op2))\n          ((eq? op '-) (- op1 op2))\n          ((eq? op '*) (* op1\
    \ op2))\n          ((eq? op '//) (quotient op1 op2))\n          ((eq? op '**)\
    \ (expt op1 op2))))\n  (define (do_algebra_iter opers operands)\n    (cond ((null?\
    \ opers) (car operands))\n          (else (do_algebra_iter (cdr opers) (cons (do_op\
    \ (car operands) (cadr operands) (car opers)) (cddr operands))))))\n  (do_algebra_iter\
    \ operator operand))\n", "  (define (do_algebra_helper operator operand result)\n\
    \    (cond\n      [(empty? operator) (first operand)]\n      [(= (length operator)\
    \ 1) (eval `(,(first operator) ,result ,(first operand))) ]\n      [else (do_algebra_helper\
    \ (rest operator) (rest operand) (eval `(,(first operator) ,result ,(first operand))))]))\n\
    \  (do_algebra_helper operator operand (first operand)))\n", "  (define (do_algebra_iter\
    \ operator operand result)\n    (if (null? operator)\n        result\n       \
    \ (do_algebra_iter (cdr operator) (cdr operand)\n                         (cond\n\
    \                           ((string=? (car operator) \"+\") (+ result (car operand)))\n\
    \                           ((string=? (car operator) \"-\") (- result (car operand)))\n\
    \                           ((string=? (car operator) \"*\") (* result (car operand)))\n\
    \                           ((string=? (car operator) \"//\") (quotient result\
    \ (car operand)))\n                           ((string=? (car operator) \"**\"\
    ) (expt result (car operand)))))))\n  (do_algebra_iter operator operand (car operand)))\n",
  "  (define (do_algebra_iter operator operand result)\n    (if (null? operator)\n\
    \        result\n        (do_algebra_iter (cdr operator) (cdr operand)\n     \
    \                    (case (car operator)\n                           ((+) (+\
    \ result (car operand)))\n                           ((-) (- result (car operand)))\n\
    \                           ((*) (* result (car operand)))\n                 \
    \          ((//) (quotient result (car operand)))\n                          \
    \ ((**) (expt result (car operand)))))))\n  (do_algebra_iter operator operand\
    \ (car operand)))\n", "  (let loop ([operator operator] [operand operand] [result\
    \ (car operand)])\n    (cond [(empty? operator) result]\n          [else (loop\
    \ (cdr operator) (cdr operand)\n                      (match (car operator)\n\
    \                             [('+ . _) (+ result (cadr operand))]\n         \
    \                    [('- . _) (- result (cadr operand))]\n                  \
    \           [('* . _) (* result (cadr operand))]\n                           \
    \  [('// . _) (quotient result (cadr operand))]\n                            \
    \ [('** . _) (expt result (cadr operand))]))])))\n", "  (define (do_algebra_helper\
    \ operator operand result)\n    (if (empty? operator)\n        result\n      \
    \  (do_algebra_helper (rest operator) (rest operand)\n                       \
    \    (cond\n                             ((= (first operator) '+) (+ result (first\
    \ operand)))\n                             ((= (first operator) '-) (- result\
    \ (first operand)))\n                             ((= (first operator) '*) (*\
    \ result (first operand)))\n                             ((= (first operator)\
    \ '//) (quotient result (first operand)))\n                             ((= (first\
    \ operator) '**) (expt result (first operand)))))))\n  (do_algebra_helper operator\
    \ operand (first operand)))\n", "  (let loop ([operator operator] [operand operand]\
    \ [result (car operand)])\n    (if (null? operator)\n        result\n        (loop\
    \ (cdr operator) (cdr operand)\n              (cond\n                [(equal?\
    \ (car operator) '+) (+ result (car operand))]\n                [(equal? (car\
    \ operator) '-) (- result (car operand))]\n                [(equal? (car operator)\
    \ '*) (* result (car operand))]\n                [(equal? (car operator) '//)\
    \ (quotient result (car operand))]\n                [(equal? (car operator) '**)\
    \ (expt result (car operand))])))))\n", "  (cond ((null? operator) (car operand))\n\
    \        ((= (length operator) 1) (apply (car operator) operand))\n        (else\
    \ (do_algebra (cdr operator) (cons (apply (car operator) (take operand 2)) (drop\
    \ operand 2))))))\n", "  (let loop ([op operator] [opd operand] [acc (car opd)])\n\
    \    (cond [(empty? op) acc]\n          [else (loop (cdr op) (cdr opd) (case (car\
    \ op)\n                                             [('+ ) (+ acc (car opd))]\n\
    \                                             [('- ) (- acc (car opd))]\n    \
    \                                         [('* ) (* acc (car opd))]\n        \
    \                                     [('// ) (quotient acc (car opd))]\n    \
    \                                         [('** ) (expt acc (car opd))]))])))\n",
  "  (define (do_algebra_helper operator operand result)\n    (if (null? operator)\n\
    \        result\n        (do_algebra_helper (cdr operator) (cdr operand)\n   \
    \                        (cond\n                             ((string=? (car operator)\
    \ \"+\") (+ result (car operand)))\n                             ((string=? (car\
    \ operator) \"-\") (- result (car operand)))\n                             ((string=?\
    \ (car operator) \"*\") (* result (car operand)))\n                          \
    \   ((string=? (car operator) \"//\") (quotient result (car operand)))\n     \
    \                        ((string=? (car operator) \"**\") (expt result (car operand)))))))\n\
    \  (do_algebra_helper operator operand (car operand)))\n", "  (define (helper\
    \ op opd)\n    (cond\n      [(null? op) (car opd)]\n      [(equal? (car op) '+)\
    \ (+ (car opd) (helper (cdr op) (cdr opd)))]\n      [(equal? (car op) '-) (- (car\
    \ opd) (helper (cdr op) (cdr opd)))]\n      [(equal? (car op) '*) (* (car opd)\
    \ (helper (cdr op) (cdr opd)))]\n      [(equal? (car op) '//) (quotient (car opd)\
    \ (helper (cdr op) (cdr opd)))]\n      [(equal? (car op) '**) (expt (car opd)\
    \ (helper (cdr op) (cdr opd)))]))\n  (helper operator operand))\n", "  (define\
    \ (do_algebra_helper operator operand result)\n    (if (null? operator)\n    \
    \    result\n        (do_algebra_helper (cdr operator) (cdr operand)\n       \
    \                    (match (car operator)\n                                 \
    \ ['+ (car operand) + (car (cdr operand))]\n                                 \
    \ ['* (car operand) * (car (cdr operand))]\n                                 \
    \ ['- (car operand) - (car (cdr operand))]\n                                 \
    \ ['// (car operand) // (car (cdr operand))]\n                               \
    \   ['** (car operand) ** (car (cdr operand))]))))\n  (do_algebra_helper operator\
    \ operand (car operand)))\n", "  (let loop ([operator (reverse operator)]\n  \
    \           [operand (reverse operand)])\n    (if (null? operator)\n        (car\
    \ operand)\n        (let ([op (car operator)]\n              [a (car operand)]\n\
    \              [b (cadr operand)])\n          (loop (cdr operator)\n         \
    \       (cons (case op\n                        [(+ _) (+ a b)]\n            \
    \            [(- _) (- a b)]\n                        [(* _) (* a b)]\n      \
    \                  [(// _) (quotient a b)]\n                        [(** _) (expt\
    \ a b)]\n                        [else (error 'do_algebra \"unknown operator\"\
    )])\n                      (cddr operand)))))))\n", "  (define (do_algebra_helper\
    \ operator operand result)\n    (cond\n      [(empty? operator) result]\n    \
    \  [else (do_algebra_helper (rest operator) (rest operand)\n                 \
    \              (cond\n                                 [(= (first operator) '+)\
    \ (+ result (first operand))]\n                                 [(= (first operator)\
    \ '-) (- result (first operand))]\n                                 [(= (first\
    \ operator) '*) (* result (first operand))]\n                                \
    \ [(= (first operator) '//) (quotient result (first operand))]\n             \
    \                    [(= (first operator) '**) (expt result (first operand))]))]))\n\
    \  (do_algebra_helper operator operand (first operand)))\n", "  (let loop ([operator\
    \ operator] [operand operand] [result (car operand)])\n    (if (null? operator)\n\
    \        result\n        (loop (cdr operator) (cdr operand)\n              (cond\n\
    \                [(equal? (car operator) '+) (+ result (car operand))]\n     \
    \           [(equal? (car operator) '-) (- result (car operand))]\n          \
    \      [(equal? (car operator) '*) (* result (car operand))]\n               \
    \ [(equal? (car operator) '//) (quotient result (car operand))]\n            \
    \    [(equal? (car operator) '**) (expt result (car operand))])))))\n", "  (let\
    \ loop ([operator operator] [operand operand] [result (car operand)])\n    (if\
    \ (null? operator)\n        result\n        (loop (cdr operator) (cdr operand)\n\
    \              (case (car operator)\n                [(+) (+ result (car operand))]\n\
    \                [(-) (- result (car operand))]\n                [(*) (* result\
    \ (car operand))]\n                [(//) (quotient result (car operand))]\n  \
    \              [(**) (expt result (car operand))])))))\n", "  (if (null? operator)\n\
    \      (car operand)\n      (let ([op (car operator)]\n            [op1 (car operand)]\n\
    \            [op2 (car (cdr operand))])\n        (cond\n         ((equal? op '+)\
    \ (+ op1 op2))\n         ((equal? op '-) (- op1 op2))\n         ((equal? op '*)\
    \ (* op1 op2))\n         ((equal? op '//) (quotient op1 op2))\n         ((equal?\
    \ op '**) (expt op1 op2))))))\n", "  (define (do_algebra-helper operator operand\
    \ result)\n    (if (null? operator)\n        result\n        (do_algebra-helper\
    \ (cdr operator) (cdr operand)\n                           (cond\n           \
    \                  ((equal? (car operator) '+) (+ result (car operand)))\n   \
    \                          ((equal? (car operator) '-) (- result (car operand)))\n\
    \                             ((equal? (car operator) '*) (* result (car operand)))\n\
    \                             ((equal? (car operator) '//) (quotient result (car\
    \ operand)))\n                             ((equal? (car operator) '**) (expt\
    \ result (car operand)))))))\n  (do_algebra-helper operator operand (car operand)))\n",
  "  (if (null? operator)\n      (car operand)\n      (let ([op (car operator)]\n\
    \            [op1 (car operand)]\n            [op2 (car (cdr operand))])\n   \
    \     (cond\n         [(equal? op '+) (+ op1 op2)]\n         [(equal? op '-) (-\
    \ op1 op2)]\n         [(equal? op '*) (* op1 op2)]\n         [(equal? op '// (quotient\
    \ op1 op2))]\n         [(equal? op '** (expt op1 op2))]))))\n", "  (let loop ([operator\
    \ operator] [operand operand] [result (car operand)])\n    (if (null? operator)\n\
    \        result\n        (loop (cdr operator) (cdr operand)\n              (cond\n\
    \                [(equal? (car operator) '+) (+ result (car operand))]\n     \
    \           [(equal? (car operator) '-) (- result (car operand))]\n          \
    \      [(equal? (car operator) '*) (* result (car operand))]\n               \
    \ [(equal? (car operator) '//) (quotient result (car operand))]\n            \
    \    [(equal? (car operator) '**) (expt result (car operand))])))))\n", "  (let\
    \ loop ([operator operator] [operand operand] [result (car operand)])\n    (if\
    \ (null? operator)\n        result\n        (loop (cdr operator) (cdr operand)\n\
    \              (cond\n                [(equal? (car operator) '+) (+ result (car\
    \ operand))]\n                [(equal? (car operator) '-) (- result (car operand))]\n\
    \                [(equal? (car operator) '*) (* result (car operand))]\n     \
    \           [(equal? (car operator) '//) (quotient result (car operand))]\n  \
    \              [(equal? (car operator) '**) (expt result (car operand))])))))\n",
  "  (let loop ([operator operator] [operand operand] [result (car operand)])\n  \
    \  (if (null? operator)\n        result\n        (loop (cdr operator) (cdr operand)\n\
    \              (match (car operator)\n                ['+ (+ result (car operand))]\n\
    \                ['* (* result (car operand))]\n                ['- (- result\
    \ (car operand))]\n                ['// (quotient result (car operand))]\n   \
    \             ['** (expt result (car operand))])))))\n", "  (define (do_algebra_helper\
    \ operator operand result)\n    (if (null? operator)\n        result\n       \
    \ (do_algebra_helper (cdr operator) (cdr operand)\n                          \
    \ (cond\n                             ((equal? (car operator) '+) (+ result (car\
    \ operand)))\n                             ((equal? (car operator) '-) (- result\
    \ (car operand)))\n                             ((equal? (car operator) '*) (*\
    \ result (car operand)))\n                             ((equal? (car operator)\
    \ '//) (quotient result (car operand)))\n                             ((equal?\
    \ (car operator) '**) (expt result (car operand)))))))\n  (do_algebra_helper operator\
    \ operand (car operand)))\n", "  (define (do_algebra_helper operator operand result)\n\
    \    (cond [(empty? operator) result]\n          [(empty? operand) result]\n \
    \         [(empty? (cdr operand)) result]\n          [else (do_algebra_helper\
    \ (cdr operator) (cdr operand) (eval `(,(car operator) ,result ,(car (cdr operand)))))]))\n\
    \  (do_algebra_helper operator operand (car operand)))\n", "  (define (do_algebra_helper\
    \ operator operand result)\n    (if (null? operator)\n        result\n       \
    \ (do_algebra_helper (cdr operator) (cdr operand)\n                          \
    \ (cond\n                             ((equal? (car operator) '+) (+ result (car\
    \ operand)))\n                             ((equal? (car operator) '-) (- result\
    \ (car operand)))\n                             ((equal? (car operator) '*) (*\
    \ result (car operand)))\n                             ((equal? (car operator)\
    \ '//) (quotient result (car operand)))\n                             ((equal?\
    \ (car operator) '**) (expt result (car operand)))))))\n  (do_algebra_helper operator\
    \ operand (car operand)))\n", "  (let loop ([operator (reverse operator)]\n  \
    \           [operand (reverse operand)])\n    (if (null? operator)\n        (car\
    \ operand)\n        (loop (cdr operator)\n              (cons (case (car operator)\n\
    \                      ((+ - * // **) (apply (car operator) operand))\n      \
    \                (else (error \"unknown operator\")))\n                    (cdr\
    \ operand))))))\n", "  (let loop ((op operator) (opd operand) (acc (car opd)))\n\
    \    (if (null? op)\n        acc\n        (loop (cdr op) (cdr opd)\n         \
    \     (cond\n                ((equal? (car op) '+) (+ acc (car opd)))\n      \
    \          ((equal? (car op) '-) (- acc (car opd)))\n                ((equal?\
    \ (car op) '*) (* acc (car opd)))\n                ((equal? (car op) '//) (quotient\
    \ acc (car opd)))\n                ((equal? (car op) '**) (expt acc (car opd))))))))\n",
  "  (define (do_algebra_helper operator operand result)\n    (if (null? operator)\n\
    \        result\n        (do_algebra_helper (cdr operator) (cdr operand)\n   \
    \                        (cond\n                             ((equal? (car operator)\
    \ '+) (+ result (car operand)))\n                             ((equal? (car operator)\
    \ '-) (- result (car operand)))\n                             ((equal? (car operator)\
    \ '*) (* result (car operand)))\n                             ((equal? (car operator)\
    \ '//) (quotient result (car operand)))\n                             ((equal?\
    \ (car operator) '**) (expt result (car operand)))))))\n  (do_algebra_helper operator\
    \ operand (car operand)))\n", "  (let* ([op (car operator)]\n         [op1 (car\
    \ operand)]\n         [op2 (cadr operand)])\n    (cond\n      [(equal? op '+)\
    \ (+ op1 op2)]\n      [(equal? op '-) (- op1 op2)]\n      [(equal? op '*) (* op1\
    \ op2)]\n      [(equal? op '//) (quotient op1 op2)]\n      [(equal? op '**) (expt\
    \ op1 op2)])))\n", "  (let loop ([op operator] [opd operand] [acc (car opd)])\n\
    \    (if (null? op)\n        acc\n        (loop (cdr op) (cdr opd) (match (car\
    \ op)\n                                        ['+ (+ acc (car opd))]\n      \
    \                                  ['* (* acc (car opd))]\n                  \
    \                      ['- (- acc (car opd))]\n                              \
    \          ['// (quotient acc (car opd))]\n                                  \
    \      ['** (expt acc (car opd))])))))\n", "  (cond\n    [(empty? operator) (first\
    \ operand)]\n    [else\n     (let ([op (first operator)]\n           [op1 (first\
    \ operand)]\n           [op2 (second operand)])\n       (cond\n         [(equal?\
    \ op '+) (+ op1 op2)]\n         [(equal? op '-) (- op1 op2)]\n         [(equal?\
    \ op '*) (* op1 op2)]\n         [(equal? op '// (quotient op1 op2))]\n       \
    \  [(equal? op '** (expt op1 op2))]))]))\n", "  (let loop ((operator operator)\n\
    \             (operand operand)\n             (result (car operand)))\n    (if\
    \ (null? operator)\n        result\n        (loop (cdr operator)\n           \
    \   (cdr operand)\n              (cond ((equal? (car operator) '+) (+ result (car\
    \ operand)))\n                    ((equal? (car operator) '-) (- result (car operand)))\n\
    \                    ((equal? (car operator) '*) (* result (car operand)))\n \
    \                   ((equal? (car operator) '//) (quotient result (car operand)))\n\
    \                    ((equal? (car operator) '**) (expt result (car operand))))))))\n",
  "  (let loop ((operator operator)\n             (operand operand)\n            \
    \ (result (car operand)))\n    (if (null? operator)\n        result\n        (loop\
    \ (cdr operator)\n              (cdr operand)\n              (case (car operator)\n\
    \                ((+ -) (eval `(,(car operator) ,result ,(car operand))))\n  \
    \              ((* /) (eval `(,(car operator) ,result ,(car operand))))\n    \
    \            ((**) (eval `(,(car operator) ,result ,(car operand)))))))))\n",
  "  (let loop ([operator operator] [operand operand] [result (car operand)])\n  \
    \  (if (null? operator)\n        result\n        (loop (cdr operator) (cdr operand)\n\
    \              (match (car operator)\n                ['+ (+ result (car operand))]\n\
    \                ['* (* result (car operand))]\n                ['- (- result\
    \ (car operand))]\n                ['// (quotient result (car operand))]\n   \
    \             ['** (expt result (car operand))])))))\n", "  (cond ((empty? operator)\
    \ (first operand))\n        ((equal? (first operator) '+) (+ (first operand) (do_algebra\
    \ (rest operator) (rest operand))))\n        ((equal? (first operator) '-) (-\
    \ (first operand) (do_algebra (rest operator) (rest operand))))\n        ((equal?\
    \ (first operator) '*) (* (first operand) (do_algebra (rest operator) (rest operand))))\n\
    \        ((equal? (first operator) '//) (quotient (first operand) (do_algebra\
    \ (rest operator) (rest operand))))\n        ((equal? (first operator) '**) (expt\
    \ (first operand) (do_algebra (rest operator) (rest operand))))))\n", "  (let\
    \ loop ([operator operator] [operand operand] [acc (car operand)])\n    (if (null?\
    \ operator)\n        acc\n        (loop (cdr operator) (cdr operand)\n       \
    \       (case (car operator)\n                [(+) (+ acc (car operand))]\n  \
    \              [(-) (- acc (car operand))]\n                [(*) (* acc (car operand))]\n\
    \                [(//) (quotient acc (car operand))]\n                [(**) (expt\
    \ acc (car operand))])))))\n", "  (define (do_op op1 op2 op)\n    (cond\n    \
    \  [(eq? op '+) (+ op1 op2)]\n      [(eq? op '-) (- op1 op2)]\n      [(eq? op\
    \ '*) (* op1 op2)]\n      [(eq? op '//) (quotient op1 op2)]\n      [(eq? op '**)\
    \ (expt op1 op2)]))\n  (define (do_algebra_iter operator operand)\n    (if (null?\
    \ operator)\n        (car operand)\n        (do_algebra_iter (cdr operator) (cons\
    \ (do_op (car operand) (cadr operand) (car operator)) (cddr operand)))))\n  (do_algebra_iter\
    \ operator operand))\n", "  (define (do_algebra_helper operator operand result)\n\
    \    (if (null? operator)\n        result\n        (do_algebra_helper (cdr operator)\
    \ (cdr operand)\n                           (cond\n                          \
    \   ((string=? (car operator) \"+\")\n                              (+ result\
    \ (car operand)))\n                             ((string=? (car operator) \"-\"\
    )\n                              (- result (car operand)))\n                 \
    \            ((string=? (car operator) \"*\")\n                              (*\
    \ result (car operand)))\n                             ((string=? (car operator)\
    \ \"//\")\n                              (quotient result (car operand)))\n  \
    \                           ((string=? (car operator) \"**\")\n              \
    \                (expt result (car operand)))))))\n  (do_algebra_helper operator\
    \ operand (car operand)))\n", "  (define (do_op op1 op2 op)\n    (cond\n     \
    \ [(eq? op '+) (+ op1 op2)]\n      [(eq? op '-) (- op1 op2)]\n      [(eq? op '*)\
    \ (* op1 op2)]\n      [(eq? op '//) (quotient op1 op2)]\n      [(eq? op '**) (expt\
    \ op1 op2)]))\n  (define (do_ops ops op)\n    (if (null? (cdr ops))\n        (car\
    \ ops)\n        (do_op (car ops) (do_ops (cdr ops) op) op)))\n  (do_ops operand\
    \ (car operator)))\n", "  (define (helper opers ops)\n    (if (null? ops)\n  \
    \      (car ops)\n        (helper (cdr opers) (cons (eval (list (car opers) (car\
    \ ops) (car (cdr ops)))) (cdr (cdr ops))))))\n  (helper operator operand))\n",
  "  (define (do_op op1 op2 op)\n    (cond\n      [(eq? op '+) (+ op1 op2)]\n    \
    \  [(eq? op '-) (- op1 op2)]\n      [(eq? op '*) (* op1 op2)]\n      [(eq? op\
    \ '//) (quotient op1 op2)]\n      [(eq? op '**) (expt op1 op2)]))\n  (define (do_ops\
    \ ops ops2 ops)\n    (cond\n      [(empty? ops2) (car ops)]\n      [else (do_ops\
    \ (cons (do_op (car ops) (car ops2) (car ops3)) (cdr ops)) (cdr ops2) (cdr ops3))]))\n\
    \  (do_ops (list (car operand)) (cdr operand) operator))\n", "  (define (do_algebra_iter\
    \ opers operands)\n    (if (null? opers)\n        (car operands)\n        (do_algebra_iter\
    \ (cdr opers)\n                         (cons (case (car opers)\n            \
    \                     ((+ - * // **) (apply (car opers) (car operands) (cadr operands)))\n\
    \                                 (else (error \"Unknown operator\")))\n     \
    \                          (cddr operands)))))\n  (do_algebra_iter operator operand))\n",
  "  (define (do_op op1 op2 op)\n    (cond\n      [(eq? op '+) (+ op1 op2)]\n    \
    \  [(eq? op '-) (- op1 op2)]\n      [(eq? op '*) (* op1 op2)]\n      [(eq? op\
    \ '//) (quotient op1 op2)]\n      [(eq? op '**) (expt op1 op2)]))\n  (define (do_algebra_helper\
    \ operator operand)\n    (if (null? operator)\n        (car operand)\n       \
    \ (do_op (car operand) (do_algebra_helper (cdr operator) (cdr operand)) (car operator))))\n\
    \  (do_algebra_helper operator operand))\n", "  (let loop ([operator operator]\
    \ [operand operand] [result (car operand)])\n    (if (null? operator)\n      \
    \  result\n        (loop (cdr operator)\n              (cdr operand)\n       \
    \       (match (car operator)\n                     ['+ (+ result (car operand))]\n\
    \                     ['* (* result (car operand))]\n                     ['-\
    \ (- result (car operand))]\n                     ['// (quotient result (car operand))]\n\
    \                     ['** (expt result (car operand))])))))\n", "  (define (do_algebra_helper\
    \ operator operand result)\n    (if (null? operator)\n        result\n       \
    \ (do_algebra_helper (cdr operator) (cdr operand)\n                          \
    \ (cond\n                             ((equal? (car operator) '+) (+ result (car\
    \ operand)))\n                             ((equal? (car operator) '-) (- result\
    \ (car operand)))\n                             ((equal? (car operator) '*) (*\
    \ result (car operand)))\n                             ((equal? (car operator)\
    \ '//) (quotient result (car operand)))\n                             ((equal?\
    \ (car operator) '**) (expt result (car operand)))))))\n  (do_algebra_helper operator\
    \ operand (car operand)))\n", "  (let loop ([operator operator] [operand operand]\
    \ [result (car operand)])\n    (if (null? operator)\n        result\n        (loop\
    \ (cdr operator) (cdr operand)\n              (cond\n                [(equal?\
    \ (car operator) '+) (+ result (car operand))]\n                [(equal? (car\
    \ operator) '-) (- result (car operand))]\n                [(equal? (car operator)\
    \ '*) (* result (car operand))]\n                [(equal? (car operator) '//)\
    \ (quotient result (car operand))]\n                [(equal? (car operator) '**)\
    \ (expt result (car operand))])))))\n", "  (define (do_algebra_iter operator operand\
    \ result)\n    (if (null? operator)\n        result\n        (do_algebra_iter\
    \ (cdr operator) (cdr operand)\n                         (case (car operator)\n\
    \                           ((+) (+ result (car operand)))\n                 \
    \          ((-) (- result (car operand)))\n                           ((*) (*\
    \ result (car operand)))\n                           ((//) (quotient result (car\
    \ operand)))\n                           ((**) (expt result (car operand)))))))\n\
    \  (do_algebra_iter operator operand (car operand)))\n", "  (define (do_algebra_helper\
    \ operator operand result)\n    (if (null? operator)\n        result\n       \
    \ (do_algebra_helper (cdr operator) (cdr operand)\n                          \
    \ (cond\n                             ((equal? (car operator) '+) (+ result (car\
    \ operand)))\n                             ((equal? (car operator) '-) (- result\
    \ (car operand)))\n                             ((equal? (car operator) '*) (*\
    \ result (car operand)))\n                             ((equal? (car operator)\
    \ '//) (quotient result (car operand)))\n                             ((equal?\
    \ (car operator) '**) (expt result (car operand)))))))\n  (do_algebra_helper operator\
    \ operand (car operand)))\n", "  (define (do_algebra_iter operator operand acc)\n\
    \    (cond ((null? operator) acc)\n          ((= (length operator) 1) (eval `(,(car\
    \ operator) ,(car operand) ,(cadr operand))))\n          (else (do_algebra_iter\
    \ (cdr operator) (cdr operand) (eval `(,(car operator) ,acc ,(car operand)))))))\n\
    \  (do_algebra_iter operator operand (car operand)))\n", "  (define (do_algebra_helper\
    \ operator operand result)\n    (if (null? operator)\n        result\n       \
    \ (do_algebra_helper (cdr operator) (cdr operand)\n                          \
    \ (cond\n                             ((equal? (car operator) '+) (+ result (car\
    \ operand)))\n                             ((equal? (car operator) '-) (- result\
    \ (car operand)))\n                             ((equal? (car operator) '*) (*\
    \ result (car operand)))\n                             ((equal? (car operator)\
    \ '//) (quotient result (car operand)))\n                             ((equal?\
    \ (car operator) '**) (expt result (car operand)))))))\n  (do_algebra_helper operator\
    \ operand (car operand)))\n", "  (let loop ([op operator] [opd operand] [result\
    \ (car opd)])\n    (cond [(null? op) result]\n          [(= (length op) 1) (apply\
    \ (car op) result (cdr opd))]\n          [else (loop (cdr op) (cdr opd) (apply\
    \ (car op) result (car opd)))])))\n", "  (let loop ([op operator] [opd operand]\
    \ [result (car opd)])\n    (if (null? op)\n        result\n        (loop (cdr\
    \ op) (cdr opd)\n              (cond\n                [(equal? (car op) '+) (+\
    \ result (car opd))]\n                [(equal? (car op) '-) (- result (car opd))]\n\
    \                [(equal? (car op) '*) (* result (car opd))]\n               \
    \ [(equal? (car op) '//) (quotient result (car opd))]\n                [(equal?\
    \ (car op) '**) (expt result (car opd))])))))\n", "  (define (do_algebra_iter\
    \ operator operand result)\n    (if (null? operator)\n        result\n       \
    \ (do_algebra_iter (cdr operator) (cdr operand)\n                         (cond\n\
    \                           ((equal? (car operator) '+) (+ result (car operand)))\n\
    \                           ((equal? (car operator) '-) (- result (car operand)))\n\
    \                           ((equal? (car operator) '*) (* result (car operand)))\n\
    \                           ((equal? (car operator) '//) (quotient result (car\
    \ operand)))\n                           ((equal? (car operator) '**) (expt result\
    \ (car operand)))))))\n  (do_algebra_iter operator operand (car operand)))\n",
  "  (define (do_op op1 op2 op)\n    (cond\n      [(equal? op '+) (+ op1 op2)]\n \
    \     [(equal? op '-) (- op1 op2)]\n      [(equal? op '*) (* op1 op2)]\n     \
    \ [(equal? op '//) (quotient op1 op2)]\n      [(equal? op '**) (expt op1 op2)]))\n\
    \  (define (do_op_list ops ops2)\n    (if (null? ops2)\n        (car ops)\n  \
    \      (do_op_list (cons (do_op (car ops) (car ops2) (car operator)) (cdr ops))\
    \ (cdr ops2))))\n  (do_op_list (list (car operand)) (cdr operand)))\n", "  (define\
    \ (do_algebra_helper operator operand result)\n    (if (null? operator)\n    \
    \    result\n        (do_algebra_helper (cdr operator) (cdr operand)\n       \
    \                    (cond\n                             ((string=? (car operator)\
    \ \"+\") (+ result (car operand)))\n                             ((string=? (car\
    \ operator) \"-\") (- result (car operand)))\n                             ((string=?\
    \ (car operator) \"*\") (* result (car operand)))\n                          \
    \   ((string=? (car operator) \"//\") (quotient result (car operand)))\n     \
    \                        ((string=? (car operator) \"**\") (expt result (car operand)))))))\n\
    \  (do_algebra_helper operator operand (car operand)))\n", "  (let loop ([operator\
    \ operator] [operand operand] [result (car operand)])\n    (if (null? operator)\n\
    \        result\n        (loop (cdr operator) (cdr operand)\n              (cond\
    \ [(equal? (car operator) '+) (+ result (car operand))]\n                    [(equal?\
    \ (car operator) '-) (- result (car operand))]\n                    [(equal? (car\
    \ operator) '*) (* result (car operand))]\n                    [(equal? (car operator)\
    \ '//) (quotient result (car operand))]\n                    [(equal? (car operator)\
    \ '**) (expt result (car operand))])))))\n", "  (let loop ([op operator] [opd\
    \ operand] [result (car opd)])\n    (if (null? op)\n        result\n        (loop\
    \ (cdr op) (cdr opd)\n              (case (car op)\n                [(+)] (+ result\
    \ (car opd))\n                [(-)] (- result (car opd))\n                [(*)]\
    \ (* result (car opd))\n                [(//)] (quotient result (car opd))\n \
    \               [(**)] (expt result (car opd)))))))\n", "  (define (do_algebra-helper\
    \ operator operand result)\n    (if (null? operator)\n        result\n       \
    \ (do_algebra-helper (cdr operator) (cdr operand)\n                          \
    \ (if (equal? (car operator) '+)\n                               (+ result (car\
    \ operand))\n                               (if (equal? (car operator) '-)\n \
    \                                  (- result (car operand))\n                \
    \                   (if (equal? (car operator) '*)\n                         \
    \              (* result (car operand))\n                                    \
    \   (if (equal? (car operator) '//)\n                                        \
    \   (quotient result (car operand))\n                                        \
    \   (if (equal? (car operator) '**)\n                                        \
    \       (expt result (car operand))\n                                        \
    \       result))))))))\n  (do_algebra-helper operator operand (car operand)))\n",
  "  (let loop ([operator operator] [operand operand] [result (car operand)])\n  \
    \  (if (null? operator)\n        result\n        (loop (cdr operator) (cdr operand)\n\
    \              (case (car operator)\n                [(+) (+ result (car operand))]\n\
    \                [(-) (- result (car operand))]\n                [(*) (* result\
    \ (car operand))]\n                [(//) (quotient result (car operand))]\n  \
    \              [(**) (expt result (car operand))])))))\n", "  (define (eval-op\
    \ op1 op2 op)\n    (cond\n      [(eq? op '+) (+ op1 op2)]\n      [(eq? op '-)\
    \ (- op1 op2)]\n      [(eq? op '*) (* op1 op2)]\n      [(eq? op '//) (quotient\
    \ op1 op2)]\n      [(eq? op '**) (expt op1 op2)]))\n  (define (eval-ops ops)\n\
    \    (if (null? ops)\n        0\n        (let ([op1 (car ops)]\n             \
    \ [op2 (cadr ops)]\n              [op (car operator)])\n          (eval-op op1\
    \ op2 op))))\n  (eval-ops operand))\n", "  (cond\n    [(empty? operator) (first\
    \ operand)]\n    [else\n     (cond\n       [(= (first operator) '+)\n        (+\
    \ (first operand) (do_algebra (rest operator) (rest operand)))]\n       [(= (first\
    \ operator) '-)\n        (- (first operand) (do_algebra (rest operator) (rest\
    \ operand)))]\n       [(= (first operator) '*)\n        (* (first operand) (do_algebra\
    \ (rest operator) (rest operand)))]\n       [(= (first operator) '//)\n      \
    \  (quotient (first operand) (do_algebra (rest operator) (rest operand)))]\n \
    \      [(= (first operator) '**)\n        (expt (first operand) (do_algebra (rest\
    \ operator) (rest operand)))]\n       [else (error 'do_algebra \"unknown operator\"\
    )])])\n  )\n", "  (define (do_op op1 op2 op)\n    (cond\n      [(eq? op '+) (+\
    \ op1 op2)]\n      [(eq? op '-) (- op1 op2)]\n      [(eq? op '*) (* op1 op2)]\n\
    \      [(eq? op '//) (quotient op1 op2)]\n      [(eq? op '**) (expt op1 op2)]))\n\
    \  (define (do_op_list ops ops2)\n    (cond\n      [(empty? ops2) (car ops)]\n\
    \      [else (do_op (car ops) (car ops2) (car operator))]))\n  (do_op_list operand\
    \ (cdr operand)))\n", "  (define (do_op op1 op2 op)\n    (cond ((eq? op '+) (+\
    \ op1 op2))\n          ((eq? op '-) (- op1 op2))\n          ((eq? op '*) (* op1\
    \ op2))\n          ((eq? op '//) (quotient op1 op2))\n          ((eq? op '**)\
    \ (expt op1 op2))))\n  (define (do_algebra_iter ops opsands)\n    (if (null? ops)\n\
    \        (car opsands)\n        (do_algebra_iter (cdr ops) (cons (do_op (car opsands)\
    \ (cadr opsands) (car ops)) (cddr opsands)))))\n  (do_algebra_iter operator operand))\n",
  "  (define (do_op op1 op2 op)\n    (cond [(eq? op '+) (+ op1 op2)]\n          [(eq?\
    \ op '-) (- op1 op2)]\n          [(eq? op '*) (* op1 op2)]\n          [(eq? op\
    \ '//) (quotient op1 op2)]\n          [(eq? op '**) (expt op1 op2)]))\n  (define\
    \ (do_algebra_helper operator operand)\n    (cond [(null? operator) (car operand)]\n\
    \          [(eq? (car operator) '*) (do_algebra_helper (cdr operator) (cons (do_op\
    \ (car operand) (car (cdr operand)) '*) (cdr (cdr operand))))]\n          [(eq?\
    \ (car operator) '//) (do_algebra_helper (cdr operator) (cons (do_op (car operand)\
    \ (car (cdr operand)) '//) (cdr (cdr operand))))]\n          [(eq? (car operator)\
    \ '**) (do_algebra_helper (cdr operator) (cons (do_op (car operand) (car (cdr\
    \ operand)) '**) (cdr (cdr operand))))]\n          [else (do_algebra_helper (cdr\
    \ operator) (cons (do_op (car operand) (car (cdr operand)) (car operator)) (cdr\
    \ (cdr operand))))]))\n  (do_algebra_helper operator operand))\n", "  (define\
    \ (do_op op1 op2 op)\n    (cond ((eq? op '+) (+ op1 op2))\n          ((eq? op\
    \ '-) (- op1 op2))\n          ((eq? op '*) (* op1 op2))\n          ((eq? op '//)\
    \ (quotient op1 op2))\n          ((eq? op '**) (expt op1 op2))))\n  (define (do_algebra_helper\
    \ op-list opd-list)\n    (if (null? op-list)\n        (car opd-list)\n       \
    \ (do_op (car opd-list) (do_algebra_helper (cdr op-list) (cdr opd-list)) (car\
    \ op-list))))\n  (do_algebra_helper operator operand))\n", "  (if (null? operator)\n\
    \      (car operand)\n      (let* ([op (car operator)]\n             [op1 (car\
    \ operand)]\n             [op2 (cadr operand)])\n        (cond\n         ((equal?\
    \ op '+) (+ op1 op2))\n         ((equal? op '-) (- op1 op2))\n         ((equal?\
    \ op '*) (* op1 op2))\n         ((equal? op '//) (quotient op1 op2))\n       \
    \  ((equal? op '**) (expt op1 op2))))))\n", "  (let loop ([operator operator]\
    \ [operand operand] [result (car operand)])\n    (if (null? operator)\n      \
    \  result\n        (loop (cdr operator) (cdr operand)\n              (cond\n \
    \               [(equal? (car operator) '+) (+ result (car operand))]\n      \
    \          [(equal? (car operator) '-) (- result (car operand))]\n           \
    \     [(equal? (car operator) '*) (* result (car operand))]\n                [(equal?\
    \ (car operator) '//) (quotient result (car operand))]\n                [(equal?\
    \ (car operator) '**) (expt result (car operand))])))))\n", "  (define (do_op\
    \ op1 op2 op)\n    (cond\n      [(eq? op '+) (+ op1 op2)]\n      [(eq? op '-)\
    \ (- op1 op2)]\n      [(eq? op '*) (* op1 op2)]\n      [(eq? op '//) (quotient\
    \ op1 op2)]\n      [(eq? op '**) (expt op1 op2)]))\n  (define (do_operations ops\
    \ ops2)\n    (cond\n      [(empty? ops2) (car ops)]\n      [else (do_operations\
    \ (cons (do_op (car ops) (car ops2) (car operator)) (cdr ops)) (cdr ops2))]))\n\
    \  (do_operations (list (car operand)) (cdr operand)))\n", "  (cond\n    [(empty?\
    \ operator) (first operand)]\n    [else\n     (let* ([op (first operator)]\n \
    \           [op1 (first operand)]\n            [op2 (second operand)])\n     \
    \  (cond\n         [(eq? op '+) (+ op1 op2)]\n         [(eq? op '-) (- op1 op2)]\n\
    \         [(eq? op '*) (* op1 op2)]\n         [(eq? op '//) (quotient op1 op2)]\n\
    \         [(eq? op '**) (expt op1 op2)]))]))\n", "  (define (helper oprnd oprtr)\n\
    \    (if (null? oprtr)\n        (car oprnd)\n        (helper (cons (eval (list\
    \ (car oprtr) (car oprnd) (car (cdr oprnd)))) (cdr (cdr oprnd))) (cdr oprtr))))\n\
    \  (helper operand operator))\n", "  (let loop ([op operator] [opd operand] [acc\
    \ (car opd)])\n    (if (null? op)\n        acc\n        (loop (cdr op) (cdr opd)\n\
    \              (cond [(equal? (car op) '+) (+ acc (car opd))]\n              \
    \      [(equal? (car op) '-) (- acc (car opd))]\n                    [(equal?\
    \ (car op) '*) (* acc (car opd))]\n                    [(equal? (car op) '//)\
    \ (quotient acc (car opd))]\n                    [(equal? (car op) '**) (expt\
    \ acc (car opd))])))))\n", "  (define (helper oprnd oprtr)\n    (cond\n      [(empty?\
    \ oprtr) (first oprnd)]\n      [(= (first oprtr) '+) (+ (first oprnd) (helper\
    \ (rest oprnd) (rest oprtr)))]\n      [(= (first oprtr) '-) (- (first oprnd) (helper\
    \ (rest oprnd) (rest oprtr)))]\n      [(= (first oprtr) '*) (* (first oprnd) (helper\
    \ (rest oprnd) (rest oprtr)))]\n      [(= (first oprtr) '//) (quotient (first\
    \ oprnd) (helper (rest oprnd) (rest oprtr)))]\n      [(= (first oprtr) '**) (expt\
    \ (first oprnd) (helper (rest oprnd) (rest oprtr)))]))\n  (helper operand operator))\n",
  "  (define (do_algebra_helper operator operand result)\n    (cond\n      [(empty?\
    \ operator) (first operand)]\n      [(empty? operand) result]\n      [else (do_algebra_helper\
    \ (rest operator) (rest operand)\n                               (cond\n     \
    \                            [(equal? (first operator) '+) (+ result (first operand))]\n\
    \                                 [(equal? (first operator) '-) (- result (first\
    \ operand))]\n                                 [(equal? (first operator) '*) (*\
    \ result (first operand))]\n                                 [(equal? (first operator)\
    \ '//) (quotient result (first operand))]\n                                 [(equal?\
    \ (first operator) '**) (expt result (first operand))]))]))\n  (do_algebra_helper\
    \ operator operand 0))\n", "  (define (do_op op1 op2 op)\n    (cond\n      [(equal?\
    \ op '+) (+ op1 op2)]\n      [(equal? op '-) (- op1 op2)]\n      [(equal? op '*)\
    \ (* op1 op2)]\n      [(equal? op '//) (quotient op1 op2)]\n      [(equal? op\
    \ '**) (expt op1 op2)]))\n  (define (do_algebra_iter operator operand result)\n\
    \    (if (null? operator)\n        result\n        (do_algebra_iter (cdr operator)\
    \ (cdr operand) (do_op (car operand) (car (cdr operand)) (car operator)))))\n\
    \  (do_algebra_iter operator operand (car operand)))\n", "  (define (do_algebra_helper\
    \ operator operand result)\n    (if (null? operator)\n        result\n       \
    \ (do_algebra_helper (cdr operator) (cdr operand)\n                          \
    \ (cond\n                             ((equal? (car operator) '+) (+ result (car\
    \ operand)))\n                             ((equal? (car operator) '-) (- result\
    \ (car operand)))\n                             ((equal? (car operator) '*) (*\
    \ result (car operand)))\n                             ((equal? (car operator)\
    \ '//) (quotient result (car operand)))\n                             ((equal?\
    \ (car operator) '**) (expt result (car operand)))))))\n  (do_algebra_helper operator\
    \ operand (car operand)))\n", "  (let loop ([operator operator] [operand operand]\
    \ [result (car operand)])\n    (if (null? operator)\n        result\n        (let\
    \ ([op (car operator)] [op1 (car operand)] [op2 (cadr operand)])\n          (loop\
    \ (cdr operator) (cdr operand)\n                (cond\n                 [(equal?\
    \ op '+) (+ result op2)]\n                 [(equal? op '-) (- result op2)]\n \
    \                [(equal? op '*) (* result op2)]\n                 [(equal? op\
    \ '//) (quotient result op2)]\n                 [(equal? op '**) (expt result\
    \ op2)]))))))\n", "  (cond\n    [(empty? operator) (first operand)]\n    [else\n\
    \     (let* ([op (first operator)]\n            [op1 (first operand)]\n      \
    \      [op2 (second operand)])\n       (cond\n         [(equal? op '+) (+ op1\
    \ op2)]\n         [(equal? op '-) (- op1 op2)]\n         [(equal? op '*) (* op1\
    \ op2)]\n         [(equal? op '//) (quotient op1 op2)]\n         [(equal? op '**)\
    \ (expt op1 op2)]))]))\n", "  (let loop ([operator operator] [operand operand]\
    \ [result (car operand)])\n    (cond [(null? operator) result]\n          [else\
    \ (loop (cdr operator) (cdr operand) (match (car operator)\n                 \
    \                                         [('+ (car operand)) (+ result (car operand))]\n\
    \                                                          [('- (car operand))\
    \ (- result (car operand))]\n                                                \
    \          [('* (car operand)) (* result (car operand))]\n                   \
    \                                       [('// (car operand)) (quotient result\
    \ (car operand))]\n                                                          [('**\
    \ (car operand)) (expt result (car operand))]))])))\n</code>\n", "  (let loop\
    \ ([operator operator] [operand operand] [result (car operand)])\n    (if (null?\
    \ operator)\n        result\n        (loop (cdr operator) (cdr operand) (eval\
    \ `(,(car operator) ,result ,(car operand)))))))\n", "  (if (null? operator)\n\
    \      (car operand)\n      (let ([op (car operator)]\n            [op1 (car operand)]\n\
    \            [op2 (cadr operand)])\n        (cond\n         [(equal? op '+) (do_algebra\
    \ (cdr operator) (cons (+ op1 op2) (cddr operand)))]\n         [(equal? op '-)\
    \ (do_algebra (cdr operator) (cons (- op1 op2) (cddr operand)))]\n         [(equal?\
    \ op '*) (do_algebra (cdr operator) (cons (* op1 op2) (cddr operand)))]\n    \
    \     [(equal? op '//) (do_algebra (cdr operator) (cons (quotient op1 op2) (cddr\
    \ operand)))]\n         [(equal? op '**) (do_algebra (cdr operator) (cons (expt\
    \ op1 op2) (cddr operand)))]))))\n", "  (let loop ([operator operator] [operand\
    \ operand] [acc (car operand)])\n    (if (null? operator)\n        acc\n     \
    \   (loop (cdr operator) (cdr operand)\n              (case (car operator)\n \
    \               [(+) (+ acc (car operand))]\n                [(-) (- acc (car\
    \ operand))]\n                [(*) (* acc (car operand))]\n                [(//)\
    \ (quotient acc (car operand))]\n                [(**) (expt acc (car operand))])))))\n",
  "  (define (do_algebra_helper operator operand result)\n    (cond ((null? operator)\
    \ result)\n          ((= (length operator) 1) (eval (list (car operator) (car\
    \ operand) (car (cdr operand)))))\n          (else (do_algebra_helper (cdr operator)\
    \ (cdr operand) (eval (list (car operator) (car operand) (car (cdr operand))))))))\n\
    \  (do_algebra_helper operator operand 0))\n", "  (let loop ([operator operator]\
    \ [operand operand] [result (car operand)])\n    (if (null? operator)\n      \
    \  result\n        (let ([op (car operator)] [num (cadr operand)])\n         \
    \ (cond\n           [(equal? op '+) (loop (cdr operator) (cdr operand) (+ result\
    \ num))]\n           [(equal? op '-) (loop (cdr operator) (cdr operand) (- result\
    \ num))]\n           [(equal? op '*) (loop (cdr operator) (cdr operand) (* result\
    \ num))]\n           [(equal? op '//) (loop (cdr operator) (cdr operand) (quotient\
    \ result num))]\n           [(equal? op '**) (loop (cdr operator) (cdr operand)\
    \ (expt result num))]\n           [else (error 'do_algebra \"unknown operator\"\
    )]))))))\n", "  (define (do_op op1 op2 op)\n    (cond\n      [(equal? op '+) (+\
    \ op1 op2)]\n      [(equal? op '-) (- op1 op2)]\n      [(equal? op '*) (* op1\
    \ op2)]\n      [(equal? op '//) (quotient op1 op2)]\n      [(equal? op '**) (expt\
    \ op1 op2)]))\n  (define (do_algebra_helper operator operand)\n    (cond\n   \
    \   [(null? operator) (car operand)]\n      [(null? (cdr operator)) (do_op (car\
    \ operand) (cadr operand) (car operator))]\n      [else (do_op (car operand) (do_algebra_helper\
    \ (cdr operator) (cdr operand)) (car operator))]))\n  (do_algebra_helper operator\
    \ operand))\n", "  (let loop ([operator operator] [operand operand] [result (car\
    \ operand)])\n    (if (null? operator)\n        result\n        (loop (cdr operator)\
    \ (cdr operand)\n              (cond\n                [(equal? (car operator)\
    \ '+) (+ result (car operand))]\n                [(equal? (car operator) '-) (-\
    \ result (car operand))]\n                [(equal? (car operator) '*) (* result\
    \ (car operand))]\n                [(equal? (car operator) '//) (quotient result\
    \ (car operand))]\n                [(equal? (car operator) '**) (expt result (car\
    \ operand))])))))\n", "  (define (do_algebra_iter operator operand result)\n \
    \   (if (null? operator)\n        result\n        (do_algebra_iter (cdr operator)\
    \ (cdr operand)\n                         (cond\n                           ((string=?\
    \ (car operator) \"+\") (+ result (car operand)))\n                          \
    \ ((string=? (car operator) \"-\") (- result (car operand)))\n               \
    \            ((string=? (car operator) \"*\") (* result (car operand)))\n    \
    \                       ((string=? (car operator) \"//\") (quotient result (car\
    \ operand)))\n                           ((string=? (car operator) \"**\") (expt\
    \ result (car operand)))))))\n  (do_algebra_iter operator operand (car operand)))\n",
  "  (define (do_op op1 op2 op)\n    (cond\n      [(equal? op '+) (+ op1 op2)]\n \
    \     [(equal? op '-) (- op1 op2)]\n      [(equal? op '*) (* op1 op2)]\n     \
    \ [(equal? op '//) (quotient op1 op2)]\n      [(equal? op '**) (expt op1 op2)]))\n\
    \  (define (do_algebra_helper operator operand)\n    (if (null? operator)\n  \
    \      (car operand)\n        (do_op (car operand) (do_algebra_helper (cdr operator)\
    \ (cdr operand)) (car operator))))\n  (do_algebra_helper operator operand))\n",
  "  (let loop ([operator operator] [operand operand] [result (car operand)])\n  \
    \  (if (null? operator)\n        result\n        (loop (cdr operator) (cdr operand)\n\
    \              (cond [(equal? (car operator) '+) (+ result (car operand))]\n \
    \                   [(equal? (car operator) '-) (- result (car operand))]\n  \
    \                  [(equal? (car operator) '*) (* result (car operand))]\n   \
    \                 [(equal? (car operator) '//) (quotient result (car operand))]\n\
    \                    [(equal? (car operator) '**) (expt result (car operand))])))))\n",
  "  (let loop ([operator operator] [operand operand] [result (car operand)])\n  \
    \  (cond [(null? operator) result]\n          [else (loop (cdr operator) (cdr\
    \ operand)\n                      (match (car operator)\n                    \
    \    ['+ (+ result (car operand))]\n                        ['* (* result (car\
    \ operand))]\n                        ['- (- result (car operand))]\n        \
    \                ['// (quotient result (car operand))]\n                     \
    \   ['** (expt result (car operand))]))])))\n", "  (let loop ([operator operator]\
    \ [operand operand] [result (car operand)])\n    (if (null? operator)\n      \
    \  result\n        (loop (cdr operator) (cdr operand)\n              (cond\n \
    \               [(equal? (car operator) '+) (+ result (car operand))]\n      \
    \          [(equal? (car operator) '-) (- result (car operand))]\n           \
    \     [(equal? (car operator) '*) (* result (car operand))]\n                [(equal?\
    \ (car operator) '//) (quotient result (car operand))]\n                [(equal?\
    \ (car operator) '**) (expt result (car operand))])))))\n", "  (let loop ((operator\
    \ operator)\n             (operand operand)\n             (result (car operand)))\n\
    \    (if (null? operator)\n        result\n        (let ((op (car operator))\n\
    \              (next-operand (cadr operand)))\n          (loop (cdr operator)\n\
    \                (cdr operand)\n                (case op\n                  ((+\
    \ - * // **) (eval `(,op ,result ,next-operand)))\n                  (else (error\
    \ \"Unknown operator\"))))))))\n", "  (let loop ((operator operator) (operand\
    \ operand) (result (car operand)))\n    (if (null? operator)\n        result\n\
    \        (loop (cdr operator) (cdr operand) (eval `(,(car operator) ,result ,(car\
    \ operand)))))))\n", "  (let loop ([operator operator] [operand operand] [result\
    \ (car operand)])\n    (if (null? operator)\n        result\n        (loop (cdr\
    \ operator) (cdr operand)\n              (match (car operator)\n             \
    \   ['+ (+ result (car operand))]\n                ['* (* result (car operand))]\n\
    \                ['** (expt result (car operand))]\n                ['/ (/ result\
    \ (car operand))]\n                ['- (- result (car operand))])))))\n", "  (let\
    \ loop ([op operator] [opd operand] [result (car opd)])\n    (cond [(empty? op)\
    \ result]\n          [else (loop (cdr op) (cdr opd) (match (car op)\n        \
    \                                        [('+) (+ result (car opd))]\n       \
    \                                         [('-) (- result (car opd))]\n      \
    \                                          [('*) (* result (car opd))]\n     \
    \                                           [('//) (quotient result (car opd))]\n\
    \                                                [('**) (expt result (car opd))]))])))\n",
  "  (define (do_op op a b)\n    (cond\n      [(equal? op '+) (+ a b)]\n      [(equal?\
    \ op '-) (- a b)]\n      [(equal? op '*) (* a b)]\n      [(equal? op '//) (quotient\
    \ a b)]\n      [(equal? op '**) (expt a b)]))\n  (define (do_algebra_helper operator\
    \ operand)\n    (cond\n      [(null? operator) (car operand)]\n      [else (do_op\
    \ (car operator) (car operand) (do_algebra_helper (cdr operator) (cdr operand)))]))\n\
    \  (do_algebra_helper operator operand))\n", "  (define (do_op op1 op2 op)\n \
    \   (cond\n      [(equal? op '+) (+ op1 op2)]\n      [(equal? op '-) (- op1 op2)]\n\
    \      [(equal? op '*) (* op1 op2)]\n      [(equal? op '//) (quotient op1 op2)]\n\
    \      [(equal? op '**) (expt op1 op2)]))\n  (define (do_algebra_helper operator\
    \ operand)\n    (if (null? operator)\n        (car operand)\n        (do_op (car\
    \ operand) (do_algebra_helper (cdr operator) (cdr operand)) (car operator))))\n\
    \  (do_algebra_helper operator operand))\n", "  (define (do_algebra_helper operator\
    \ operand result)\n    (if (null? operator)\n        result\n        (do_algebra_helper\
    \ (cdr operator) (cdr operand)\n                           (cond\n           \
    \                  ((string=? (car operator) \"+\") (+ result (car operand)))\n\
    \                             ((string=? (car operator) \"-\") (- result (car\
    \ operand)))\n                             ((string=? (car operator) \"*\") (*\
    \ result (car operand)))\n                             ((string=? (car operator)\
    \ \"//\") (quotient result (car operand)))\n                             ((string=?\
    \ (car operator) \"**\") (expt result (car operand)))))))\n  (do_algebra_helper\
    \ operator operand (car operand)))\n", "  (define (do_algebra_helper opers operands)\n\
    \    (if (null? opers)\n        (car operands)\n        (do_algebra_helper (cdr\
    \ opers)\n                           (cons (eval (list (car opers) (car operands)\
    \ (car (cdr operands))))\n                                 (cdr (cdr operands))))))\n\
    \  (do_algebra_helper operator operand))\n", "  (let loop ([operator operator]\
    \ [operand operand] [result (car operand)])\n    (if (null? operator)\n      \
    \  result\n        (loop (cdr operator) (cdr operand)\n              (match (car\
    \ operator)\n                ['+ (+ result (car operand))]\n                ['*\
    \ (* result (car operand))]\n                ['** (expt result (car operand))]\n\
    \                ['/ (/ result (car operand))]\n                ['- (- result\
    \ (car operand))])))))\n", "  (cond\n    [(empty? operator) (first operand)]\n\
    \    [else\n     (let ([op (first operator)]\n           [op1 (first operand)]\n\
    \           [op2 (second operand)])\n       (cond\n         [(eq? op '+) (+ op1\
    \ op2)]\n         [(eq? op '-) (- op1 op2)]\n         [(eq? op '*) (* op1 op2)]\n\
    \         [(eq? op '//) (quotient op1 op2)]\n         [(eq? op '**) (expt op1\
    \ op2)]))]))\n", "  (let loop ([operator operator] [operand operand] [result (car\
    \ operand)])\n    (if (null? operator)\n        result\n        (loop (cdr operator)\
    \ (cdr operand)\n              (cond\n                [(equal? (car operator)\
    \ '+) (+ result (car operand))]\n                [(equal? (car operator) '-) (-\
    \ result (car operand))]\n                [(equal? (car operator) '*) (* result\
    \ (car operand))]\n                [(equal? (car operator) '//) (quotient result\
    \ (car operand))]\n                [(equal? (car operator) '**) (expt result (car\
    \ operand))])))))\n", "  (define (do_op op1 op2 op)\n    (cond ((eq? op '+) (+\
    \ op1 op2))\n          ((eq? op '-) (- op1 op2))\n          ((eq? op '*) (* op1\
    \ op2))\n          ((eq? op '//) (quotient op1 op2))\n          ((eq? op '**)\
    \ (expt op1 op2))))\n  (define (do_algebra_helper operator operand)\n    (if (null?\
    \ operator)\n        (car operand)\n        (do_op (car operand) (do_algebra_helper\
    \ (cdr operator) (cdr operand)) (car operator))))\n  (do_algebra_helper operator\
    \ operand))\n", "  (define (do_algebra_helper operator operand result)\n    (cond\n\
    \      [(empty? operator) (first operand)]\n      [(empty? operand) result]\n\
    \      [else\n       (do_algebra_helper (rest operator) (rest operand)\n     \
    \                     (cond\n                            [(equal? (first operator)\
    \ '+) (+ result (first operand))]\n                            [(equal? (first\
    \ operator) '-) (- result (first operand))]\n                            [(equal?\
    \ (first operator) '*) (* result (first operand))]\n                         \
    \   [(equal? (first operator) '//) (quotient result (first operand))]\n      \
    \                      [(equal? (first operator) '**) (expt result (first operand))]))]))\n\
    \  (do_algebra_helper operator operand 0))\n", "  (let loop ([operator operator]\
    \ [operand operand] [result (car operand)])\n    (if (null? operator)\n      \
    \  result\n        (loop (cdr operator) (cdr operand)\n              (cond\n \
    \               [(equal? (car operator) '+)\n                 (+ result (car operand))]\n\
    \                [(equal? (car operator) '-)\n                 (- result (car\
    \ operand))]\n                [(equal? (car operator) '*)\n                 (*\
    \ result (car operand))]\n                [(equal? (car operator) '//)\n     \
    \            (quotient result (car operand))]\n                [(equal? (car operator)\
    \ '**)\n                 (expt result (car operand))])))))\n", "  (let loop ([operator\
    \ operator] [operand operand] [result (car operand)])\n    (if (null? operator)\n\
    \        result\n        (loop (cdr operator) (cdr operand)\n              (case\
    \ (car operator)\n                [(+) (+ result (car operand))]\n           \
    \     [(-) (- result (car operand))]\n                [(*) (* result (car operand))]\n\
    \                [(//) (quotient result (car operand))]\n                [(**)\
    \ (expt result (car operand))])))))\n", "  (let loop ([operator operator] [operand\
    \ operand] [result (car operand)])\n    (if (null? operator)\n        result\n\
    \        (loop (cdr operator) (cdr operand)\n              (cond\n           \
    \     [(equal? (car operator) '+) (+ result (car operand))]\n                [(equal?\
    \ (car operator) '-) (- result (car operand))]\n                [(equal? (car\
    \ operator) '*) (* result (car operand))]\n                [(equal? (car operator)\
    \ '//) (quotient result (car operand))]\n                [(equal? (car operator)\
    \ '**) (expt result (car operand))])))))\n", "  (define (do_algebra_helper operator\
    \ operand result)\n    (if (null? operator)\n        result\n        (do_algebra_helper\
    \ (cdr operator) (cdr operand)\n                           (cond\n           \
    \                  ((equal? (car operator) '+) (+ result (car operand)))\n   \
    \                          ((equal? (car operator) '-) (- result (car operand)))\n\
    \                             ((equal? (car operator) '*) (* result (car operand)))\n\
    \                             ((equal? (car operator) '//) (quotient result (car\
    \ operand)))\n                             ((equal? (car operator) '**) (expt\
    \ result (car operand)))))))\n  (do_algebra_helper operator operand (car operand)))\n",
  "  (define (do_algebra_iter operator operand result)\n    (if (null? operator)\n\
    \        result\n        (do_algebra_iter (cdr operator) (cdr operand)\n     \
    \                    (match (car operator)\n                           ['+ (apply\
    \ + (cons result (car operand)))]\n                           ['* (apply * (cons\
    \ result (car operand)))]\n                           ['- (apply - (cons result\
    \ (car operand)))]\n                           ['// (apply / (cons result (car\
    \ operand)))]\n                           ['** (apply expt (cons result (car operand))))]))))\n\
    \  (do_algebra_iter operator operand (car operand)))\n", "  (let loop ([operator\
    \ operator] [operand operand] [result (car operand)])\n    (if (null? operator)\n\
    \        result\n        (loop (cdr operator) (cdr operand)\n              (case\
    \ (car operator)\n                [(+) (+ result (car operand))]\n           \
    \     [(-) (- result (car operand))]\n                [(*) (* result (car operand))]\n\
    \                [(//) (quotient result (car operand))]\n                [(**)\
    \ (expt result (car operand))])))))\n", "  (let loop ([operator operator] [operand\
    \ operand] [result (car operand)])\n    (if (null? operator)\n        result\n\
    \        (loop (cdr operator) (cdr operand)\n              (match (car operator)\n\
    \                ['+ (+ result (car operand))]\n                ['* (* result\
    \ (car operand))]\n                ['** (expt result (car operand))]\n       \
    \         ['/ (/ result (car operand))]\n                ['- (- result (car operand))])))))\n",
  "  (cond [(empty? operator) (car operand)]\n        [(empty? operand) (car operator)]\n\
    \        [else (do_algebra (cdr operator) (cons (eval (list (car operator) (car\
    \ operand) (car (cdr operand)))) (cdr (cdr operand))))]))\n", "  (if (null? operator)\n\
    \      (car operand)\n      (let* ([op (car operator)]\n             [op1 (car\
    \ operand)]\n             [op2 (cadr operand)])\n        (cond\n         ((equal?\
    \ op '+) (+ op1 op2))\n         ((equal? op '-) (- op1 op2))\n         ((equal?\
    \ op '*) (* op1 op2))\n         ((equal? op '//) (quotient op1 op2))\n       \
    \  ((equal? op '**) (expt op1 op2))))))\n", "  (if (empty? operator)\n      (first\
    \ operand)\n      (let* ([op (first operator)]\n             [op1 (first operand)]\n\
    \             [op2 (second operand)])\n        (cond\n         [(equal? op '+)\
    \ (+ op1 op2)]\n         [(equal? op '-) (- op1 op2)]\n         [(equal? op '*)\
    \ (* op1 op2)]\n         [(equal? op '//) (quotient op1 op2)]\n         [(equal?\
    \ op '**) (expt op1 op2)]))))\n", "  (let loop ([operator operator] [operand operand]\
    \ [result (car operand)])\n    (if (null? operator)\n        result\n        (loop\
    \ (cdr operator) (cdr operand)\n              (cond\n                [(string=?\
    \ (car operator) \"+\") (+ result (car operand))]\n                [(string=?\
    \ (car operator) \"-\") (- result (car operand))]\n                [(string=?\
    \ (car operator) \"*\") (* result (car operand))]\n                [(string=?\
    \ (car operator) \"//\") (quotient result (car operand))]\n                [(string=?\
    \ (car operator) \"**\") (expt result (car operand))])))))\n", "  (let ((result\
    \ (car operand)))\n    (for ([op (in-list operator)])\n      (set! result (eval\
    \ `(,op ,result ,(car operand)))))\n    result))\n", "  (cond\n    [(empty? operator)\
    \ (first operand)]\n    [else\n     (cond\n       [(equal? (first operator) '+)\
    \ (+ (first operand) (do_algebra (rest operator) (rest operand)))]\n       [(equal?\
    \ (first operator) '-) (- (first operand) (do_algebra (rest operator) (rest operand)))]\n\
    \       [(equal? (first operator) '*) (* (first operand) (do_algebra (rest operator)\
    \ (rest operand)))]\n       [(equal? (first operator) '//) (quotient (first operand)\
    \ (do_algebra (rest operator) (rest operand)))]\n       [(equal? (first operator)\
    \ '**) (expt (first operand) (do_algebra (rest operator) (rest operand)))]\n \
    \      [else (error 'do_algebra \"Unknown operator\")]\n       )\n     ]\n   \
    \ )\n  )\n", "  (define (do_algebra_iter operator operand result)\n    (if (null?\
    \ operator)\n        result\n        (do_algebra_iter (cdr operator) (cdr operand)\n\
    \                         (cond\n                           ((equal? (car operator)\
    \ '+) (+ result (car operand)))\n                           ((equal? (car operator)\
    \ '-) (- result (car operand)))\n                           ((equal? (car operator)\
    \ '*) (* result (car operand)))\n                           ((equal? (car operator)\
    \ '//) (quotient result (car operand)))\n                           ((equal? (car\
    \ operator) '**) (expt result (car operand)))))))\n  (do_algebra_iter operator\
    \ operand (car operand)))\n", "  (if (null? operator)\n      (car operand)\n \
    \     (let* ([op (car operator)]\n             [op1 (car operand)]\n         \
    \    [op2 (cadr operand)])\n        (cond\n         ((equal? op '+) (+ op1 op2))\n\
    \         ((equal? op '-) (- op1 op2))\n         ((equal? op '*) (* op1 op2))\n\
    \         ((equal? op '//) (quotient op1 op2))\n         ((equal? op '**) (expt\
    \ op1 op2))))))\n", "  (define (do_op op1 op2 op)\n    (cond\n      [(eq? op '+)\
    \ (+ op1 op2)]\n      [(eq? op '-) (- op1 op2)]\n      [(eq? op '*) (* op1 op2)]\n\
    \      [(eq? op '//) (quotient op1 op2)]\n      [(eq? op '**) (expt op1 op2)]))\n\
    \  (define (do_ops ops op)\n    (if (null? (cdr ops))\n        (car ops)\n   \
    \     (do_op (car ops) (do_ops (cdr ops) op) op)))\n  (do_ops operand (car operator)))\n",
  "  (let loop ((operator operator)\n             (operand operand)\n            \
    \ (result (car operand)))\n    (if (null? operator)\n        result\n        (loop\
    \ (cdr operator)\n              (cdr operand)\n              (case (car operator)\n\
    \                ((+ *) result (+ (car operand) result))\n                ((-\
    \ // **) result (- (car operand) result)))))))\n", "  (if (null? operator)\n \
    \     (car operand)\n      (let* ([op (car operator)]\n             [op1 (car\
    \ operand)]\n             [op2 (cadr operand)])\n        (cond\n         ((equal?\
    \ op '+) (do_algebra (cdr operator) (cons (+ op1 op2) (cddr operand))))\n    \
    \     ((equal? op '-) (do_algebra (cdr operator) (cons (- op1 op2) (cddr operand))))\n\
    \         ((equal? op '*) (do_algebra (cdr operator) (cons (* op1 op2) (cddr operand))))\n\
    \         ((equal? op '//) (do_algebra (cdr operator) (cons (quotient op1 op2)\
    \ (cddr operand))))\n         ((equal? op '**) (do_algebra (cdr operator) (cons\
    \ (expt op1 op2) (cddr operand))))\n         (else (error \"Invalid operator\"\
    ))))))\n", "  (let ([op (car operator)]\n        [op1 (car operand)]\n       \
    \ [op2 (cadr operand)])\n    (cond\n      [(equal? op '+) (+ op1 op2)]\n     \
    \ [(equal? op '-) (- op1 op2)]\n      [(equal? op '*) (* op1 op2)]\n      [(equal?\
    \ op '//) (quotient op1 op2)]\n      [(equal? op '**) (expt op1 op2)])))\n", " \
    \ (let loop ([op operator] [opd operand] [result (car opd)])\n    (if (null? op)\n\
    \        result\n        (loop (cdr op) (cdr opd)\n              (cond\n     \
    \           [(equal? (car op) '+) (+ result (car opd))]\n                [(equal?\
    \ (car op) '-) (- result (car opd))]\n                [(equal? (car op) '*) (*\
    \ result (car opd))]\n                [(equal? (car op) '//) (quotient result\
    \ (car opd))]\n                [(equal? (car op) '**) (expt result (car opd))])))))\n",
  "  (define (do_algebra_helper operator operand result)\n    (cond\n      [(empty?\
    \ operator) (first operand)]\n      [(empty? operand) result]\n      [else\n \
    \      (do_algebra_helper (rest operator) (rest operand)\n                   \
    \       (case (first operator)\n                            [(+) (+ result (first\
    \ operand))]\n                            [(-) (- result (first operand))]\n \
    \                           [(*) (* result (first operand))]\n               \
    \             [(//) (quotient result (first operand))]\n                     \
    \       [(**) (expt result (first operand))]))]))\n  (do_algebra_helper operator\
    \ operand 0))\n", "  (define (helper opers operands)\n    (if (null? opers)\n\
    \        (car operands)\n        (helper (cdr opers) (cons (eval (list (car opers)\
    \ (car operands) (car (cdr operands)))) (cdr (cdr operands))))))\n  (helper operator\
    \ operand))\n", "  (let loop ([operator operator] [operand operand] [result (car\
    \ operand)])\n    (if (null? operator)\n        result\n        (loop (cdr operator)\
    \ (cdr operand)\n              (match (car operator)\n                ['+ (+ result\
    \ (car operand))]\n                ['* (* result (car operand))]\n           \
    \     ['- (- result (car operand))]\n                ['// (floor (/ result (car\
    \ operand))) ]\n                ['** (expt result (car operand))])))))\n", " \
    \ (define (do_algebra_iter operator operand result)\n    (if (null? operator)\n\
    \        result\n        (do_algebra_iter (cdr operator) (cdr operand)\n     \
    \                    (cond\n                           ((equal? (car operator)\
    \ '+) (+ result (car operand)))\n                           ((equal? (car operator)\
    \ '-) (- result (car operand)))\n                           ((equal? (car operator)\
    \ '*) (* result (car operand)))\n                           ((equal? (car operator)\
    \ '//) (quotient result (car operand)))\n                           ((equal? (car\
    \ operator) '**) (expt result (car operand)))))))\n  (do_algebra_iter operator\
    \ operand (car operand)))\n", "  (define (do_op op1 op2 op)\n    (cond ((= op\
    \ '+) (+ op1 op2))\n          ((= op '-) (- op1 op2))\n          ((= op '*) (*\
    \ op1 op2))\n          ((= op '//) (quotient op1 op2))\n          ((= op '**)\
    \ (expt op1 op2))))\n  (define (do_algebra_helper operator operand)\n    (if (null?\
    \ operator)\n        (car operand)\n        (do_op (car operand) (do_algebra_helper\
    \ (cdr operator) (cdr operand)) (car operator))))\n  (do_algebra_helper operator\
    \ operand))\n", "  (define (calc op1 op2 op)\n    (cond\n      [(= op '+) (+ op1\
    \ op2)]\n      [(= op '-) (- op1 op2)]\n      [(= op '*) (* op1 op2)]\n      [(=\
    \ op '//) (quotient op1 op2)]\n      [(= op '**) (expt op1 op2)]))\n  (define\
    \ (calc_all ops ops2)\n    (if (null? ops)\n        ops2\n        (calc_all (cdr\
    \ ops) (calc (car ops2) (car (cdr ops2)) (car ops)))))\n  (calc_all operator operand))\n",
  "  (define (do_algebra_helper oprnd oprtr)\n    (if (null? oprtr)\n        (car\
    \ oprnd)\n        (do_algebra_helper (list (eval (list (car oprtr) (car oprnd)\
    \ (car (cdr oprnd))))) (cdr oprtr))))\n  (do_algebra_helper operand operator))\n",
  "  (cond\n    [(empty? operator) (first operand)]\n    [else\n     (let* ([op (first\
    \ operator)]\n            [op1 (first operand)]\n            [op2 (second operand)])\n\
    \       (cond\n         [(equal? op '+) (+ op1 op2)]\n         [(equal? op '-)\
    \ (- op1 op2)]\n         [(equal? op '*) (* op1 op2)]\n         [(equal? op '//)\
    \ (quotient op1 op2)]\n         [(equal? op '**) (expt op1 op2)]))]))\n", "  (let\
    \ loop ([operator operator] [operand operand] [result (car operand)])\n    (if\
    \ (null? operator)\n        result\n        (loop (cdr operator) (cdr operand)\n\
    \              (cond [(equal? (car operator) '+) (+ result (car operand))]\n \
    \                   [(equal? (car operator) '-) (- result (car operand))]\n  \
    \                  [(equal? (car operator) '*) (* result (car operand))]\n   \
    \                 [(equal? (car operator) '//) (quotient result (car operand))]\n\
    \                    [(equal? (car operator) '**) (expt result (car operand))])))))\n",
  "  (cond\n    [(empty? operator) (first operand)]\n    [else (do_algebra (rest operator)\n\
    \                      (cons (eval (list (first operand) (first operator) (second\
    \ operand)))\n                            (rest (rest operand))))]))\n", "  (cond\n\
    \    [(empty? operator) (first operand)]\n    [else\n     (cond\n       [(equal?\
    \ (first operator) '+) (+ (first operand) (do_algebra (rest operator) (rest operand)))]\n\
    \       [(equal? (first operator) '-) (- (first operand) (do_algebra (rest operator)\
    \ (rest operand)))]\n       [(equal? (first operator) '*) (* (first operand) (do_algebra\
    \ (rest operator) (rest operand)))]\n       [(equal? (first operator) '//) (quotient\
    \ (first operand) (do_algebra (rest operator) (rest operand)))]\n       [(equal?\
    \ (first operator) '**) (expt (first operand) (do_algebra (rest operator) (rest\
    \ operand)))]\n       [else (do_algebra (rest operator) (rest operand))])])\n\
    \  )\n", "  (define (do_algebra_iter operator operand result)\n    (cond\n   \
    \   [(empty? operator) (first operand)]\n      [(empty? operand) (error \"operator\
    \ and operand list length mismatch\")]\n      [else\n       (do_algebra_iter (rest\
    \ operator) (rest operand)\n                        (cond\n                  \
    \        [(equal? (first operator) '+) (+ (first operand) (first result))]\n \
    \                         [(equal? (first operator) '-) (- (first operand) (first\
    \ result))]\n                          [(equal? (first operator) '*) (* (first\
    \ operand) (first result))]\n                          [(equal? (first operator)\
    \ '//) (quotient (first operand) (first result))]\n                          [(equal?\
    \ (first operator) '**) (expt (first operand) (first result))]\n             \
    \             [else (error \"unknown operator\")]))]))\n  (do_algebra_iter operator\
    \ operand (rest operand)))\n", "  (let loop ([operator operator] [operand operand]\
    \ [result (car operand)])\n    (if (null? operator)\n        result\n        (loop\
    \ (cdr operator) (cdr operand)\n              (cond [(equal? (car operator) '+)\
    \ (+ result (car operand))]\n                    [(equal? (car operator) '-) (-\
    \ result (car operand))]\n                    [(equal? (car operator) '*) (* result\
    \ (car operand))]\n                    [(equal? (car operator) '//) (quotient\
    \ result (car operand))]\n                    [(equal? (car operator) '**) (expt\
    \ result (car operand))])))))\n", "  (define (do_op op1 op2 op)\n    (cond ((eq?\
    \ op '+) (+ op1 op2))\n          ((eq? op '-) (- op1 op2))\n          ((eq? op\
    \ '*) (* op1 op2))\n          ((eq? op '//) (quotient op1 op2))\n          ((eq?\
    \ op '**) (expt op1 op2))))\n  (define (do_algebra_iter operator operand result)\n\
    \    (if (null? operator)\n        result\n        (do_algebra_iter (cdr operator)\
    \ (cdr operand) (do_op (car operand) (car (cdr operand)) (car operator)))))\n\
    \  (do_algebra_iter operator operand (car operand)))\n", "  (let loop ([operator\
    \ operator] [operand operand] [result (car operand)])\n    (if (null? operator)\n\
    \        result\n        (loop (cdr operator) (cdr operand)\n              (cond\n\
    \                [(equal? (car operator) '+) (+ result (car operand))]\n     \
    \           [(equal? (car operator) '-) (- result (car operand))]\n          \
    \      [(equal? (car operator) '*) (* result (car operand))]\n               \
    \ [(equal? (car operator) '//) (quotient result (car operand))]\n            \
    \    [(equal? (car operator) '**) (expt result (car operand))])))))\n", "  (cond\
    \ [(empty? operator) (first operand)]\n        [(empty? operand) (error \"Invalid\
    \ input\")]\n        [else (do_algebra (rest operator) (cons (eval (list (first\
    \ operator) (first operand) (second operand))) (rest (rest operand))))]))\n",
  "  (define (do_algebra_iter operator operand result)\n    (if (null? operator)\n\
    \        result\n        (do_algebra_iter (cdr operator) (cdr operand)\n     \
    \                    (cond\n                           ((string=? (car operator)\
    \ \"+\")\n                            (+ result (car operand)))\n            \
    \               ((string=? (car operator) \"-\")\n                           \
    \ (- result (car operand)))\n                           ((string=? (car operator)\
    \ \"*\")\n                            (* result (car operand)))\n            \
    \               ((string=? (car operator) \"//\")\n                          \
    \  (quotient result (car operand)))\n                           ((string=? (car\
    \ operator) \"**\")\n                            (expt result (car operand)))))))\n\
    \  (do_algebra_iter operator operand (car operand)))\n", "  (let loop ([operator\
    \ operator] [operand operand] [result (car operand)])\n    (if (null? operator)\n\
    \        result\n        (loop (cdr operator) (cdr operand)\n              (match\
    \ (car operator)\n                ['+ (+ result (car operand))]\n            \
    \    ['* (* result (car operand))]\n                ['- (- result (car operand))]\n\
    \                ['// (quotient result (car operand))]\n                ['** (expt\
    \ result (car operand))])))))\n", "  (define (do_op op1 op2 op)\n    (cond\n \
    \     [(equal? op '+) (+ op1 op2)]\n      [(equal? op '-) (- op1 op2)]\n     \
    \ [(equal? op '*) (* op1 op2)]\n      [(equal? op '//) (quotient op1 op2)]\n \
    \     [(equal? op '**) (expt op1 op2)]))\n  (define (do_algebra_helper operator\
    \ operand)\n    (if (null? operator)\n        (car operand)\n        (do_op (car\
    \ operand) (do_algebra_helper (cdr operator) (cdr operand)) (car operator))))\n\
    \  (do_algebra_helper operator operand))\n", "  (let loop ([op operator] [opd\
    \ operand] [result (car opd)])\n    (cond [(null? op) result]\n          [(null?\
    \ opd) result]\n          [else (loop (cdr op) (cdr opd)\n                   \
    \   (cond [(equal? (car op) '+) (+ result (car opd))]\n                      \
    \      [(equal? (car op) '-) (- result (car opd))]\n                         \
    \   [(equal? (car op) '*) (* result (car opd))]\n                            [(equal?\
    \ (car op) '//) (quotient result (car opd))]\n                            [(equal?\
    \ (car op) '**) (expt result (car opd))]))])))\n", "  (define (do_algebra-helper\
    \ operator operand result)\n    (if (null? operator)\n        result\n       \
    \ (do_algebra-helper (cdr operator) (cdr operand)\n                          \
    \ (cond\n                             ((equal? (car operator) '+) (+ result (car\
    \ operand)))\n                             ((equal? (car operator) '-) (- result\
    \ (car operand)))\n                             ((equal? (car operator) '*) (*\
    \ result (car operand)))\n                             ((equal? (car operator)\
    \ '//) (quotient result (car operand)))\n                             ((equal?\
    \ (car operator) '**) (expt result (car operand)))))))\n  (do_algebra-helper operator\
    \ operand (car operand)))\n", "  (let loop ([operator operator] [operand operand]\
    \ [result (car operand)])\n    (if (null? operator)\n        result\n        (loop\
    \ (cdr operator) (cdr operand)\n              (match (car operator)\n        \
    \        ['+ (+ result (car operand))]\n                ['* (* result (car operand))]\n\
    \                ['- (- result (car operand))]\n                ['// (quotient\
    \ result (car operand))]\n                ['** (expt result (car operand))])))))\n",
  "  (define (eval_op op1 op2 op)\n    (cond ((equal? op '+) (+ op1 op2))\n      \
    \    ((equal? op '-) (- op1 op2))\n          ((equal? op '*) (* op1 op2))\n  \
    \        ((equal? op '//) (quotient op1 op2))\n          ((equal? op '**) (expt\
    \ op1 op2))))\n  (define (eval_ops ops ops_remainder)\n    (if (null? ops_remainder)\n\
    \        (car ops)\n        (eval_ops (eval_op (car ops) (cadr ops) (car ops_remainder))\
    \ (cdr ops_remainder))))\n  (eval_ops (car operand) (cdr operand)))\n", "  (define\
    \ (do_algebra_helper operator operand result)\n    (if (null? operator)\n    \
    \    result\n        (do_algebra_helper (cdr operator) (cdr operand)\n       \
    \                    (cond\n                             ((equal? (car operator)\
    \ '+) (+ result (car operand)))\n                             ((equal? (car operator)\
    \ '-) (- result (car operand)))\n                             ((equal? (car operator)\
    \ '*) (* result (car operand)))\n                             ((equal? (car operator)\
    \ '//) (quotient result (car operand)))\n                             ((equal?\
    \ (car operator) '**) (expt result (car operand)))))))\n  (do_algebra_helper operator\
    \ operand (car operand)))\n", "  (let loop ([operator operator] [operand operand]\
    \ [result (car operand)])\n    (if (null? operator)\n        result\n        (loop\
    \ (cdr operator) (cdr operand)\n              (match (car operator)\n        \
    \        ['+ (+ result (car operand))]\n                ['* (* result (car operand))]\n\
    \                ['- (- result (car operand))]\n                ['// (quotient\
    \ result (car operand))]\n                ['** (expt result (car operand))])))))\n",
  "  (let loop ([operator operator] [operand operand] [result (car operand)])\n  \
    \  (cond [(null? operator) result]\n          [else (loop (cdr operator) (cdr\
    \ operand)\n                      (match (car operator)\n                    \
    \    ['+ (+ result (car operand))]\n                        ['* (* result (car\
    \ operand))]\n                        ['- (- result (car operand))]\n        \
    \                ['// (quotient result (car operand))]\n                     \
    \   ['** (expt result (car operand))]))])))\n", "  (let loop ([operator operator]\
    \ [operand operand] [result (car operand)])\n    (if (null? operator)\n      \
    \  result\n        (loop (cdr operator) (cdr operand)\n              (cond [(equal?\
    \ (car operator) '+) (+ result (car operand))]\n                    [(equal? (car\
    \ operator) '-) (- result (car operand))]\n                    [(equal? (car operator)\
    \ '*) (* result (car operand))]\n                    [(equal? (car operator) '//)\
    \ (quotient result (car operand))]\n                    [(equal? (car operator)\
    \ '**) (expt result (car operand))])))))\n", "  (define (do_op op1 op2 op)\n \
    \   (cond ((eq? op '+) (+ op1 op2))\n          ((eq? op '-) (- op1 op2))\n   \
    \       ((eq? op '*) (* op1 op2))\n          ((eq? op '//) (quotient op1 op2))\n\
    \          ((eq? op '**) (expt op1 op2))))\n  (define (do_op_list ops)\n    (if\
    \ (null? (cdr ops))\n        (car ops)\n        (do_op (car ops) (do_op_list (cdr\
    \ ops)) (car operator))))\n  (do_op_list operand))\n", "  (define (do_algebra_helper\
    \ operator operand result)\n    (cond\n      [(empty? operator) result]\n    \
    \  [else (do_algebra_helper (rest operator) (rest operand)\n                 \
    \              (cond\n                                 [(equal? (first operator)\
    \ '+) (+ result (first operand))]\n                                 [(equal? (first\
    \ operator) '-) (- result (first operand))]\n                                \
    \ [(equal? (first operator) '*) (* result (first operand))]\n                \
    \                 [(equal? (first operator) '//) (quotient result (first operand))]\n\
    \                                 [(equal? (first operator) '**) (expt result\
    \ (first operand))]))]))\n  (do_algebra_helper operator operand (first operand)))\n",
  "  (define (do_algebra_helper operator operand result)\n    (if (null? operator)\n\
    \        result\n        (do_algebra_helper (cdr operator) (cdr operand)\n   \
    \                        (cond\n                             ((equal? (car operator)\
    \ '+) (+ result (car operand)))\n                             ((equal? (car operator)\
    \ '-) (- result (car operand)))\n                             ((equal? (car operator)\
    \ '*) (* result (car operand)))\n                             ((equal? (car operator)\
    \ '//) (quotient result (car operand)))\n                             ((equal?\
    \ (car operator) '**) (expt result (car operand)))))))\n  (do_algebra_helper operator\
    \ operand (car operand)))\n", "  (let loop ([op operator] [opd operand] [result\
    \ (car opd)])\n    (if (null? op)\n        result\n        (loop (cdr op) (cdr\
    \ opd)\n              (cond [(equal? (car op) '+) (+ result (car opd))]\n    \
    \                [(equal? (car op) '-) (- result (car opd))]\n               \
    \     [(equal? (car op) '*) (* result (car opd))]\n                    [(equal?\
    \ (car op) '//) (quotient result (car opd))]\n                    [(equal? (car\
    \ op) '**) (expt result (car opd))])))))\n"]
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
