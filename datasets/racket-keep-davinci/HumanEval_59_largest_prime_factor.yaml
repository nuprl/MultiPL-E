name: HumanEval_59_largest_prime_factor
language: racket
prompt: "#lang racket\n\n;; Return the largest prime factor of n. Assume n > 1 and\
  \ is not a prime.\n;; >>> largest_prime_factor(13195)\n;; 29\n;; >>> largest_prime_factor(2048)\n\
  ;; 2\n(define (largest_prime_factor n)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate largest_prime_factor))\n\
  \    (check-equal? (candidate 15) 5)\n    (check-equal? (candidate 27) 3)\n    (check-equal?\
  \ (candidate 63) 7)\n    (check-equal? (candidate 330) 11)\n    (check-equal? (candidate\
  \ 13195) 29)\n))\n\n(test-humaneval)"
completions: ["  (define (largest_prime_factor-iter n i)\n    (if (= n 1)\n      \
    \  i\n        (if (and (integer? (/ n i)) (= (remainder n i) 0))\n           \
    \ (largest_prime_factor-iter (/ n i) i)\n            (largest_prime_factor-iter\
    \ n (+ i 1)))))\n  (largest_prime_factor-iter n 2))\n", "  (define (largest_prime_factor-iter\
    \ n i)\n    (cond\n      [(= n i) i]\n      [(= (remainder n i) 0) (largest_prime_factor-iter\
    \ (/ n i) i)]\n      [else (largest_prime_factor-iter n (+ i 1))]))\n  (largest_prime_factor-iter\
    \ n 2))\n", "  (define (divisors n)\n    (for/list ([i (in-range 2 n)])\n    \
    \  (if (zero? (modulo n i)) i)))\n  (define (is-prime? n)\n    (empty? (divisors\
    \ n)))\n  (define (largest-prime-factor n)\n    (cond [(is-prime? n) n]\n    \
    \      [else (largest-prime-factor (first (divisors n)))]))\n  (largest-prime-factor\
    \ n))\n", "  (define (is_prime n)\n    (define (divisible? a b)\n      (= (modulo\
    \ a b) 0))\n    (define (find-divisor n test-divisor)\n      (cond ((> (square\
    \ test-divisor) n) n)\n            ((divisible? n test-divisor) test-divisor)\n\
    \            (else (find-divisor n (+ test-divisor 1)))))\n    (= n (find-divisor\
    \ n 2)))\n  (define (largest-prime-factor-iter n test-divisor)\n    (cond ((is_prime\
    \ n) n)\n          ((divisible? n test-divisor) (largest-prime-factor-iter (/\
    \ n test-divisor) test-divisor))\n          (else (largest-prime-factor-iter n\
    \ (+ test-divisor 1)))))\n  (largest-prime-factor-iter n 2))\n", "  (define (largest_prime_factor-iter\
    \ n i)\n    (cond\n      [(= n 1) i]\n      [(= (remainder n i) 0) (largest_prime_factor-iter\
    \ (/ n i) i)]\n      [else (largest_prime_factor-iter n (+ i 1))]))\n  (largest_prime_factor-iter\
    \ n 2))\n", "  (define (largest_prime_factor-iter n i)\n    (if (= n i)\n    \
    \    n\n        (if (zero? (modulo n i))\n            (largest_prime_factor-iter\
    \ (/ n i) i)\n            (largest_prime_factor-iter n (+ i 1)))))\n  (largest_prime_factor-iter\
    \ n 2))\n", "  (define (largest-prime-factor-iter n i)\n    (cond ((= i n) n)\n\
    \          ((= (remainder n i) 0) (largest-prime-factor-iter (/ n i) i))\n   \
    \       (else (largest-prime-factor-iter n (+ i 1)))))\n  (largest-prime-factor-iter\
    \ n 2))\n", "  (define (largest_prime_factor-iter n i)\n    (cond\n      [(= n\
    \ 1) i]\n      [(= (remainder n i) 0) (largest_prime_factor-iter (/ n i) i)]\n\
    \      [else (largest_prime_factor-iter n (+ i 1))]))\n  (largest_prime_factor-iter\
    \ n 2))\n", "  (define (prime? n)\n    (define (divisible? a b)\n      (= (modulo\
    \ a b) 0))\n    (define (not-divisible? n d)\n      (not (divisible? n d)))\n\
    \    (define (loop d)\n      (cond ((> d (sqrt n)) #t)\n            ((divisible?\
    \ n d) #f)\n            (else (loop (+ d 1)))))\n    (loop 2))\n  (define (largest-prime-factor\
    \ n)\n    (define (loop d)\n      (cond ((> d (sqrt n)) n)\n            ((and\
    \ (prime? d) (divisible? n d)) (loop (+ d 1)))\n            (else (loop (+ d 1)))))\n\
    \    (loop 2))\n  (largest-prime-factor n))\n", "  (define (largest_prime_factor-iter\
    \ n i)\n    (if (prime? i)\n        (if (= (modulo n i) 0)\n            (largest_prime_factor-iter\
    \ (/ n i) i)\n            (largest_prime_factor-iter n (+ i 1)))\n        (largest_prime_factor-iter\
    \ n (+ i 1))))\n  (largest_prime_factor-iter n 2))\n", "  (define (largest_prime_factor-iter\
    \ n i)\n    (if (= n i)\n        i\n        (if (zero? (modulo n i))\n       \
    \     (largest_prime_factor-iter (/ n i) i)\n            (largest_prime_factor-iter\
    \ n (+ i 1)))))\n  (largest_prime_factor-iter n 2))\n", "  (define (largest_prime_factor-iter\
    \ n i)\n    (cond [(= n i) i]\n          [(= (remainder n i) 0) (largest_prime_factor-iter\
    \ (/ n i) i)]\n          [else (largest_prime_factor-iter n (+ i 1))]))\n  (largest_prime_factor-iter\
    \ n 2))\n", "  (define (next-prime n)\n    (if (prime? n)\n        n\n       \
    \ (next-prime (+ n 1))))\n  (define (prime? n)\n    (define (divisible? a b)\n\
    \      (= (modulo a b) 0))\n    (define (find-divisor n test-divisor)\n      (cond\
    \ ((> (square test-divisor) n) n)\n            ((divisible? n test-divisor) test-divisor)\n\
    \            (else (find-divisor n (+ test-divisor 1)))))\n    (= (find-divisor\
    \ n 2) n))\n  (define (largest-prime-factor n test-prime)\n    (cond ((= n test-prime)\
    \ test-prime)\n          ((divisible? n test-prime)\n           (largest-prime-factor\
    \ (/ n test-prime) test-prime))\n          (else (largest-prime-factor n (next-prime\
    \ (+ test-prime 1))))))\n  (largest-prime-factor n 2))\n", "  (define (largest_prime_factor-iter\
    \ n i)\n    (cond [(= n i) i]\n          [(= (remainder n i) 0) (largest_prime_factor-iter\
    \ (/ n i) i)]\n          [else (largest_prime_factor-iter n (+ i 1))]))\n  (largest_prime_factor-iter\
    \ n 2))\n", "  (define (largest-prime-factor-iter n i)\n    (if (= n i)\n    \
    \    n\n        (if (zero? (modulo n i))\n            (largest-prime-factor-iter\
    \ (/ n i) i)\n            (largest-prime-factor-iter n (+ i 1)))))\n  (largest-prime-factor-iter\
    \ n 2))\n", "  (define (largest-prime-factor-iter n i)\n    (cond\n      [(= n\
    \ 1) i]\n      [(= (remainder n i) 0) (largest-prime-factor-iter (/ n i) i)]\n\
    \      [else (largest-prime-factor-iter n (+ i 1))]))\n  (largest-prime-factor-iter\
    \ n 2))\n", "  (define (largest-prime-factor-iter n i)\n    (cond\n      [(= n\
    \ i) i]\n      [(= (remainder n i) 0) (largest-prime-factor-iter (/ n i) i)]\n\
    \      [else (largest-prime-factor-iter n (+ i 1))]))\n  (largest-prime-factor-iter\
    \ n 2))\n", "  (define (largest_prime_factor-iter n i)\n    (if (= n i)\n    \
    \    i\n        (if (integer? (/ n i))\n            (largest_prime_factor-iter\
    \ (/ n i) i)\n            (largest_prime_factor-iter n (+ i 1)))))\n  (largest_prime_factor-iter\
    \ n 2))\n", "  (define (largest_prime_factor-iter n i)\n    (cond\n      [(= n\
    \ i) i]\n      [(integer? (/ n i)) (largest_prime_factor-iter (/ n i) i)]\n  \
    \    [else (largest_prime_factor-iter n (+ i 1))]))\n  (largest_prime_factor-iter\
    \ n 2))\n", "  (define (largest_prime_factor-iter n i)\n    (if (and (integer?\
    \ (/ n i))\n             (prime? i))\n        (largest_prime_factor-iter (/ n\
    \ i) i)\n        (largest_prime_factor-iter n (+ i 1))))\n  (largest_prime_factor-iter\
    \ n 2))\n", "  (define (largest-prime-factor-iter n i)\n    (if (= n i)\n    \
    \    n\n        (if (zero? (modulo n i))\n            (largest-prime-factor-iter\
    \ (/ n i) i)\n            (largest-prime-factor-iter n (+ i 1)))))\n  (largest-prime-factor-iter\
    \ n 2))\n", "  (define (next-prime n)\n    (if (prime? n)\n        n\n       \
    \ (next-prime (+ n 1))))\n  (define (largest-prime-factor n p)\n    (if (= n p)\n\
    \        p\n        (if (divides? p n)\n            (largest-prime-factor (/ n\
    \ p) p)\n            (largest-prime-factor n (next-prime (+ p 1))))))\n  (largest-prime-factor\
    \ n 2))\n", "  (define (largest_prime_factor-iter n i)\n    (if (= n i)\n    \
    \    i\n        (if (zero? (modulo n i))\n            (largest_prime_factor-iter\
    \ (/ n i) i)\n            (largest_prime_factor-iter n (+ i 1)))))\n  (largest_prime_factor-iter\
    \ n 2))\n", "  (define (largest_prime_factor-iter n i)\n    (if (and (integer?\
    \ (/ n i)) (prime? i))\n        (largest_prime_factor-iter (/ n i) i)\n      \
    \  (if (prime? n)\n            n\n            (largest_prime_factor-iter n (+\
    \ i 1)))))\n  (largest_prime-factor-iter n 2))\n", "  (define (largest_prime_factor-iter\
    \ n i)\n    (cond\n      [(= n i) n]\n      [(= (remainder n i) 0) (largest_prime_factor-iter\
    \ (/ n i) i)]\n      [else (largest_prime_factor-iter n (+ i 1))]))\n  (largest_prime-factor-iter\
    \ n 2))\n", "  (define (largest_prime_factor-iter n factor)\n    (if (= n 1)\n\
    \        factor\n        (if (integer? (/ n factor))\n            (largest_prime_factor-iter\
    \ (/ n factor) factor)\n            (largest_prime_factor-iter n (+ factor 1)))))\n\
    \  (largest_prime_factor-iter n 2))\n", "  (define (largest-prime-factor n i)\n\
    \    (cond\n      [(= n i) i]\n      [(= 0 (modulo n i)) (largest-prime-factor\
    \ (/ n i) i)]\n      [else (largest-prime-factor n (+ i 1))]))\n  (largest-prime-factor\
    \ n 2))\n", "  (define (largest_prime_factor-iter n i)\n    (cond\n      [(= n\
    \ i) n]\n      [(= 0 (modulo n i)) (largest_prime_factor-iter (/ n i) i)]\n  \
    \    [else (largest_prime_factor-iter n (+ i 1))]))\n  (largest_prime_factor-iter\
    \ n 2))\n", "  (define (largest_prime_factor-iter n i)\n    (if (= n i)\n    \
    \    n\n        (if (zero? (modulo n i))\n            (largest_prime_factor-iter\
    \ (/ n i) i)\n            (largest_prime_factor-iter n (+ i 1)))))\n  (largest_prime_factor-iter\
    \ n 2))\n", "  (define (largest_prime_factor-iter n i)\n    (cond [(= n 1) i]\n\
    \          [(= (remainder n i) 0) (largest_prime_factor-iter (/ n i) i)]\n   \
    \       [else (largest_prime_factor-iter n (+ i 1))]))\n  (largest_prime_factor-iter\
    \ n 2))\n", "  (define (largest_prime_factor-iter n i)\n    (if (zero? (modulo\
    \ n i))\n        (if (prime? i)\n            i\n            (largest_prime_factor-iter\
    \ (quotient n i) i))\n        (largest_prime_factor-iter n (+ i 1))))\n  (largest_prime_factor-iter\
    \ n 2))\n", "  (define (largest-prime-factor-iter n i)\n    (if (= n i)\n    \
    \    n\n        (if (integer? (/ n i))\n            (largest-prime-factor-iter\
    \ (/ n i) i)\n            (largest-prime-factor-iter n (+ i 1)))))\n  (largest-prime-factor-iter\
    \ n 2))\n", "  (define (largest-prime-factor-iter n i)\n    (cond ((= n i) i)\n\
    \          ((= 0 (modulo n i)) (largest-prime-factor-iter (/ n i) i))\n      \
    \    (else (largest-prime-factor-iter n (+ i 1)))))\n  (largest-prime-factor-iter\
    \ n 2))\n", "  (define (largest_prime_factor-iter n i)\n    (cond\n      [(= n\
    \ i) i]\n      [(= (remainder n i) 0) (largest_prime_factor-iter (/ n i) i)]\n\
    \      [else (largest_prime_factor-iter n (+ i 1))]))\n  (largest_prime_factor-iter\
    \ n 2))\n", "  (define (largest_prime_factor-iter n i)\n    (cond\n      [(= n\
    \ 1) i]\n      [(= (remainder n i) 0) (largest_prime_factor-iter (/ n i) i)]\n\
    \      [else (largest_prime_factor-iter n (+ i 1))]))\n  (largest_prime_factor-iter\
    \ n 2))\n", "  (define (largest_prime_factor-iter n i)\n    (if (= n 1)\n    \
    \    i\n        (if (divides? n i)\n            (largest_prime_factor-iter (/\
    \ n i) i)\n            (largest_prime_factor-iter n (+ i 1)))))\n  (largest_prime_factor-iter\
    \ n 2))\n", "  (define (largest_prime_factor-iter n i)\n    (if (prime? n)\n \
    \       n\n        (if (divides? i n)\n            (largest_prime_factor-iter\
    \ (/ n i) i)\n            (largest_prime_factor-iter n (+ i 1)))))\n  (largest_prime_factor-iter\
    \ n 2))\n", "  (define (largest-prime-factor-iter n i)\n    (if (= n i)\n    \
    \    n\n        (if (zero? (modulo n i))\n            (largest-prime-factor-iter\
    \ (/ n i) i)\n            (largest-prime-factor-iter n (+ i 1)))))\n  (largest-prime-factor-iter\
    \ n 2))\n", "  (define (largest_prime_factor-iter n i)\n    (cond [(= n i) i]\n\
    \          [(= (remainder n i) 0) (largest_prime_factor-iter (/ n i) i)]\n   \
    \       [else (largest_prime_factor-iter n (+ i 1))]))\n  (largest_prime_factor-iter\
    \ n 2))\n", "  (define (largest_prime_factor-iter n i)\n    (cond\n      [(= n\
    \ i) i]\n      [(= (remainder n i) 0) (largest_prime_factor-iter (/ n i) i)]\n\
    \      [else (largest_prime_factor-iter n (+ i 1))]))\n  (largest_prime_factor-iter\
    \ n 2))\n", "  (define (largest_prime_factor-iter n i)\n    (cond [(= n i) i]\n\
    \          [(= (remainder n i) 0) (largest_prime_factor-iter (/ n i) i)]\n   \
    \       [else (largest_prime_factor-iter n (+ i 1))]))\n  (largest_prime_factor-iter\
    \ n 2))\n", "  (define (largest-prime-factor-iter n i)\n    (cond ((< n i) n)\n\
    \          ((= (remainder n i) 0) (largest-prime-factor-iter (/ n i) i))\n   \
    \       (else (largest-prime-factor-iter n (+ i 1)))))\n  (largest-prime-factor-iter\
    \ n 2))\n", "  (define (largest-prime-factor-iter n i)\n    (cond\n      [(= n\
    \ 1) i]\n      [(= (remainder n i) 0) (largest-prime-factor-iter (/ n i) i)]\n\
    \      [else (largest-prime-factor-iter n (+ i 1))]))\n  (largest-prime-factor-iter\
    \ n 2))\n", "  (define (largest_prime_factor-iter n i)\n    (if (= n i)\n    \
    \    n\n        (if (zero? (modulo n i))\n            (largest_prime_factor-iter\
    \ (/ n i) i)\n            (largest_prime_factor-iter n (+ i 1)))))\n  (largest_prime_factor-iter\
    \ n 2))\n", "  (define (largest_prime_factor-iter n i)\n    (if (= n i)\n    \
    \    n\n        (if (divides? i n)\n            (largest_prime_factor-iter (/\
    \ n i) i)\n            (largest_prime_factor-iter n (+ i 1)))))\n  (largest_prime_factor-iter\
    \ n 2))\n", "  (define (largest_prime_factor-iter n i)\n    (if (= n i)\n    \
    \    n\n        (if (and (= (remainder n i) 0) (prime? i))\n            (largest_prime_factor-iter\
    \ (/ n i) i)\n            (largest_prime_factor-iter n (+ i 1)))))\n  (largest_prime-factor-iter\
    \ n 2))\n", "  (define (is-prime? n)\n    (define (is-divisible? a b)\n      (=\
    \ (modulo a b) 0))\n    (define (loop i)\n      (cond ((= i n) #t)\n         \
    \   ((is-divisible? n i) #f)\n            (else (loop (+ i 1)))))\n    (loop 2))\n\
    \  (define (loop i)\n    (cond ((= i n) n)\n            ((is-prime? i) (loop (+\
    \ i 1)))\n            ((is-divisible? n i) i)\n            (else (loop (+ i 1)))))\n\
    \  (loop 2))\n", "  (define (prime? n)\n    (define (divisible? a b)\n      (=\
    \ (modulo a b) 0))\n    (define (find-divisor n test-divisor)\n      (cond ((>\
    \ (square test-divisor) n) n)\n            ((divisible? n test-divisor) test-divisor)\n\
    \            (else (find-divisor n (+ test-divisor 1)))))\n    (= n (find-divisor\
    \ n 2)))\n  (define (largest-prime-factor-iter n test-divisor)\n    (cond ((prime?\
    \ n) n)\n          ((divisible? n test-divisor) (largest-prime-factor-iter (/\
    \ n test-divisor) test-divisor))\n          (else (largest-prime-factor-iter n\
    \ (+ test-divisor 1)))))\n  (largest-prime-factor-iter n 2))\n", "  (define (largest_prime_factor-iter\
    \ n i)\n    (cond [(= n i) n]\n          [(= (remainder n i) 0) (largest_prime_factor-iter\
    \ (/ n i) i)]\n          [else (largest_prime_factor-iter n (+ i 1))]))\n  (largest_prime_factor-iter\
    \ n 2))\n", "  (define (largest_prime_factor-iter n i)\n    (if (= n i)\n    \
    \    n\n        (if (zero? (modulo n i))\n            (largest_prime_factor-iter\
    \ (/ n i) i)\n            (largest_prime_factor-iter n (+ i 1)))))\n  (largest_prime_factor-iter\
    \ n 2))\n", "  (define (largest_prime_factor-iter n i)\n    (cond\n      [(= n\
    \ i) i]\n      [(= (remainder n i) 0) (largest_prime_factor-iter (/ n i) i)]\n\
    \      [else (largest_prime_factor-iter n (+ i 1))]))\n  (largest_prime_factor-iter\
    \ n 2))\n", "  (define (largest_prime_factor-iter n i)\n    (cond [(= n 1) i]\n\
    \          [(= (remainder n i) 0) (largest_prime_factor-iter (/ n i) i)]\n   \
    \       [else (largest_prime_factor-iter n (+ i 1))]))\n  (largest_prime_factor-iter\
    \ n 2))\n", "  (define (largest-prime-factor-iter n i)\n    (cond\n      [(= n\
    \ i) n]\n      [(= (remainder n i) 0) (largest-prime-factor-iter (/ n i) i)]\n\
    \      [else (largest-prime-factor-iter n (+ i 1))]))\n  (largest-prime-factor-iter\
    \ n 2))\n", "  (define (largest_prime_factor-iter n i)\n    (if (= n i)\n    \
    \    n\n        (if (zero? (modulo n i))\n            (largest_prime_factor-iter\
    \ (/ n i) i)\n            (largest_prime_factor-iter n (+ i 1)))))\n  (largest_prime_factor-iter\
    \ n 2))\n", "  (define (largest_prime_factor-iter n i)\n    (cond\n      [(= n\
    \ i) i]\n      [(= 0 (modulo n i)) (largest_prime_factor-iter (/ n i) i)]\n  \
    \    [else (largest_prime_factor-iter n (+ i 1))]))\n  (largest_prime_factor-iter\
    \ n 2))\n", "  (define (largest_prime_factor-iter n i)\n    (if (= n i)\n    \
    \    n\n        (if (zero? (modulo n i))\n            (largest_prime_factor-iter\
    \ (/ n i) i)\n            (largest_prime_factor-iter n (+ i 1)))))\n  (largest_prime_factor-iter\
    \ n 2))\n", "  (define (largest_prime_factor-iter n i)\n    (cond\n      [(= n\
    \ i) n]\n      [(= (remainder n i) 0) (largest_prime_factor-iter (/ n i) i)]\n\
    \      [else (largest_prime_factor-iter n (+ i 1))]))\n  (largest_prime_factor-iter\
    \ n 2))\n", "  (define (largest_prime_factor-iter n i)\n    (cond [(= n i) i]\n\
    \          [(= (remainder n i) 0) (largest_prime_factor-iter (/ n i) i)]\n   \
    \       [else (largest_prime_factor-iter n (+ i 1))]))\n  (largest_prime_factor-iter\
    \ n 2))\n", "  (define (largest-prime-factor-iter n i)\n    (cond\n      [(= n\
    \ i) i]\n      [(= 0 (modulo n i)) (largest-prime-factor-iter (/ n i) i)]\n  \
    \    [else (largest-prime-factor-iter n (+ i 1))]))\n  (largest-prime-factor-iter\
    \ n 2))\n", "  (define (largest-prime-factor n i)\n    (if (= n 1)\n        i\n\
    \        (if (zero? (modulo n i))\n            (largest-prime-factor (/ n i) i)\n\
    \            (largest-prime-factor n (+ i 1)))))\n  (largest-prime-factor n 2))\n",
  "  (define (largest_prime_factor-iter n i)\n    (if (= n 1)\n        i\n       \
    \ (if (and (integer? (/ n i)) (prime? i))\n            (largest_prime_factor-iter\
    \ (/ n i) i)\n            (largest_prime_factor-iter n (+ i 1)))))\n  (largest_prime_factor-iter\
    \ n 2))\n", "  (let loop ([n n] [i 2])\n    (cond [(= n i) i]\n          [(zero?\
    \ (modulo n i)) (loop (/ n i) i)]\n          [else (loop n (+ i 1))])))\n", " \
    \ (define (largest_prime_factor-iter n i)\n    (cond\n      [(= n i) i]\n    \
    \  [(= (remainder n i) 0) (largest_prime_factor-iter (/ n i) i)]\n      [else\
    \ (largest_prime_factor-iter n (+ i 1))]))\n  (largest_prime_factor-iter n 2))\n",
  "  (define (largest_prime_factor-iter n i)\n    (if (prime? i)\n        (if (= (modulo\
    \ n i) 0)\n            (largest_prime_factor-iter (/ n i) i)\n            (largest_prime_factor-iter\
    \ n (+ i 1)))\n        (largest_prime_factor-iter n (+ i 1))))\n  (largest_prime_factor-iter\
    \ n 2))\n", "  (define (largest_prime_factor-iter n i)\n    (if (= n i)\n    \
    \    n\n        (if (divides? i n)\n            (largest_prime_factor-iter (/\
    \ n i) i)\n            (largest_prime_factor-iter n (+ i 1)))))\n  (largest_prime_factor-iter\
    \ n 2))\n", "  (define (largest_prime_factor-iter n i)\n    (cond\n      [(= n\
    \ 1) i]\n      [(= (remainder n i) 0) (largest_prime_factor-iter (/ n i) i)]\n\
    \      [else (largest_prime_factor-iter n (+ i 1))]))\n  (largest_prime_factor-iter\
    \ n 2))\n", "  (define (largest_prime_factor-iter n i)\n    (cond\n      [(= n\
    \ i) i]\n      [(= (remainder n i) 0) (largest_prime_factor-iter (/ n i) i)]\n\
    \      [else (largest_prime_factor-iter n (+ i 1))]))\n  (largest_prime_factor-iter\
    \ n 2))\n", "  (define (largest_prime_factor-iter n i)\n    (cond\n      [(= n\
    \ 1) i]\n      [(= (remainder n i) 0) (largest_prime_factor-iter (/ n i) i)]\n\
    \      [else (largest_prime_factor-iter n (+ i 1))]))\n  (largest_prime_factor-iter\
    \ n 2))\n", "  (define (largest_prime_factor-iter n i)\n    (if (= n i)\n    \
    \    n\n        (if (integer? (/ n i))\n            (largest_prime_factor-iter\
    \ (/ n i) i)\n            (largest_prime_factor-iter n (+ i 1)))))\n  (largest_prime_factor-iter\
    \ n 2))\n", "  (define (largest-prime-factor-iter n i)\n    (if (= n i)\n    \
    \    n\n        (if (and (= (remainder n i) 0)\n                 (prime? i))\n\
    \            (largest-prime-factor-iter (/ n i) i)\n            (largest-prime-factor-iter\
    \ n (+ i 1)))))\n  (largest-prime-factor-iter n 2))\n", "  (define (largest_prime_factor-iter\
    \ n i)\n    (cond\n      [(= n i) n]\n      [(= (remainder n i) 0) (largest_prime_factor-iter\
    \ (/ n i) i)]\n      [else (largest_prime_factor-iter n (+ i 1))]))\n  (largest_prime_factor-iter\
    \ n 2))\n", "  (define (largest_prime_factor-iter n i)\n    (if (= n i)\n    \
    \    n\n        (if (zero? (modulo n i))\n            (largest_prime_factor-iter\
    \ (/ n i) 2)\n            (largest_prime_factor-iter n (+ i 1)))))\n  (largest_prime_factor-iter\
    \ n 2))\n", "  (define (largest_prime_factor-iter n i)\n    (cond\n      [(= n\
    \ 1) i]\n      [(= (remainder n i) 0) (largest_prime_factor-iter (/ n i) i)]\n\
    \      [else (largest_prime_factor-iter n (+ i 1))]))\n  (largest_prime_factor-iter\
    \ n 2))\n", "  (define (prime? n)\n    (define (prime-helper n i)\n      (if (=\
    \ i n)\n          #t\n          (if (= (remainder n i) 0)\n              #f\n\
    \              (prime-helper n (+ i 1)))))\n    (prime-helper n 2))\n  (define\
    \ (largest-prime-factor-helper n i)\n    (if (= (remainder n i) 0)\n        (if\
    \ (prime? i)\n            (largest-prime-factor-helper (/ n i) i)\n          \
    \  (largest-prime-factor-helper n (+ i 1)))\n        (if (= i n)\n           \
    \ n\n            (largest-prime-factor-helper n (+ i 1)))))\n  (largest-prime-factor-helper\
    \ n 2))\n", "  (define (prime? n)\n    (define (divisible? a b)\n      (= (modulo\
    \ a b) 0))\n    (define (find-divisor n test-divisor)\n      (cond ((> (square\
    \ test-divisor) n) n)\n            ((divisible? n test-divisor) test-divisor)\n\
    \            (else (find-divisor n (+ test-divisor 1)))))\n    (= n (find-divisor\
    \ n 2)))\n  (define (largest-prime-factor-iter n test-divisor)\n    (cond ((>\
    \ test-divisor n) n)\n          ((and (divisible? n test-divisor) (prime? test-divisor))\n\
    \           (largest-prime-factor-iter (/ n test-divisor) test-divisor))\n   \
    \       (else (largest-prime-factor-iter n (+ test-divisor 1)))))\n  (largest-prime-factor-iter\
    \ n 2))\n", "  (define (largest_prime_factor-iter n i)\n    (if (= n i)\n    \
    \    n\n        (if (zero? (modulo n i))\n            (largest_prime_factor-iter\
    \ (/ n i) i)\n            (largest_prime_factor-iter n (+ i 1)))))\n  (largest_prime_factor-iter\
    \ n 2))\n", "  (define (largest_prime_factor-iter n i)\n    (if (prime? i)\n \
    \       (if (= (remainder n i) 0)\n            (largest_prime_factor-iter (/ n\
    \ i) i)\n            (largest_prime_factor-iter n (+ i 1)))\n        (largest_prime_factor-iter\
    \ n (+ i 1))))\n  (largest_prime_factor-iter n 2))\n", "  (define (prime? n)\n\
    \    (define (divisible? a b)\n      (= (modulo a b) 0))\n    (define (find-divisor\
    \ n test-divisor)\n      (cond ((> (square test-divisor) n) n)\n            ((divisible?\
    \ n test-divisor) test-divisor)\n            (else (find-divisor n (+ test-divisor\
    \ 1)))))\n    (= n (find-divisor n 2)))\n  (define (largest-prime-factor-iter\
    \ n test-divisor)\n    (cond ((prime? n) n)\n          ((divisible? n test-divisor)\n\
    \           (largest-prime-factor-iter (/ n test-divisor) test-divisor))\n   \
    \       (else (largest-prime-factor-iter n (+ test-divisor 1)))))\n  (largest-prime-factor-iter\
    \ n 2))\n", "  (define (largest_prime_factor-iter n i)\n    (if (= n i)\n    \
    \    n\n        (if (prime? i)\n            (if (divides? i n)\n             \
    \   (largest_prime_factor-iter (/ n i) i)\n                (largest_prime_factor-iter\
    \ n (+ i 1)))\n            (largest_prime_factor-iter n (+ i 1)))))\n  (largest_prime_factor-iter\
    \ n 2))\n", "  (define (largest-prime-factor-iter n i)\n    (if (and (prime? i)\
    \ (divides? i n))\n        (largest-prime-factor-iter (quotient n i) i)\n    \
    \    (largest-prime-factor-iter n (+ i 1))))\n  (largest-prime-factor-iter n 2))\n",
  "  (define (largest_prime_factor-iter n i)\n    (if (= n i)\n        n\n       \
    \ (if (zero? (modulo n i))\n            (largest_prime_factor-iter (/ n i) i)\n\
    \            (largest_prime_factor-iter n (+ i 1)))))\n  (largest_prime_factor-iter\
    \ n 2))\n", "  (define (largest-prime-factor-iter n i)\n    (if (= n 1)\n    \
    \    i\n        (if (and (integer? (/ n i)) (= (remainder n i) 0))\n         \
    \   (largest-prime-factor-iter (/ n i) i)\n            (largest-prime-factor-iter\
    \ n (+ i 1)))))\n  (largest-prime-factor-iter n 2))\n", "  (define (largest_prime_factor-iter\
    \ n i)\n    (if (= n i)\n        n\n        (if (zero? (modulo n i))\n       \
    \     (largest_prime_factor-iter (/ n i) i)\n            (largest_prime_factor-iter\
    \ n (+ i 1)))))\n  (largest_prime_factor-iter n 2))\n", "  (define (largest_prime_factor-iter\
    \ n i)\n    (cond\n      [(= n 1) i]\n      [(= (remainder n i) 0) (largest_prime_factor-iter\
    \ (/ n i) i)]\n      [else (largest_prime_factor-iter n (+ i 1))]))\n  (largest_prime_factor-iter\
    \ n 2))\n", "  (define (largest_prime_factor-iter n i)\n    (cond [(= n 1) i]\n\
    \          [(= (remainder n i) 0) (largest_prime_factor-iter (/ n i) i)]\n   \
    \       [else (largest_prime_factor-iter n (+ i 1))]))\n  (largest_prime_factor-iter\
    \ n 2))\n", "  (define (is-prime? n)\n    (define (is-prime-helper n i)\n    \
    \  (cond\n        [(= i 1) #t]\n        [(= (modulo n i) 0) #f]\n        [else\
    \ (is-prime-helper n (- i 1))]))\n    (is-prime-helper n (floor (/ n 2))))\n \
    \ (define (largest-prime-factor-helper n i)\n    (cond\n      [(= i 1) n]\n  \
    \    [(and (is-prime? i) (= (modulo n i) 0)) (largest-prime-factor-helper n (-\
    \ i 1))]\n      [else (largest-prime-factor-helper n (- i 1))]))\n  (largest-prime-factor-helper\
    \ n (floor (/ n 2))))\n", "  (define (largest_prime_factor-iter n i)\n    (cond\n\
    \      [(= n i) n]\n      [(= (remainder n i) 0) (largest_prime_factor-iter (/\
    \ n i) i)]\n      [else (largest_prime_factor-iter n (+ i 1))]))\n  (largest_prime_factor-iter\
    \ n 2))\n", "  (define (largest_prime_factor-iter n i)\n    (if (= n 1)\n    \
    \    i\n        (if (and (integer? (/ n i)) (= (modulo n i) 0))\n            (largest_prime_factor-iter\
    \ (/ n i) i)\n            (largest_prime_factor-iter n (+ i 1)))))\n  (largest_prime_factor-iter\
    \ n 2))\n", "  (define (largest_prime_factor-iter n i)\n    (cond [(= n 1) i]\n\
    \          [(= (remainder n i) 0) (largest_prime_factor-iter (/ n i) i)]\n   \
    \       [else (largest_prime_factor-iter n (+ i 1))]))\n  (largest_prime_factor-iter\
    \ n 2))\n", "  (define (prime? n)\n    (define (prime-helper n i)\n      (if (=\
    \ i n)\n          #t\n          (if (= (remainder n i) 0)\n              #f\n\
    \              (prime-helper n (+ i 1)))))\n    (prime-helper n 2))\n  (define\
    \ (largest-prime-factor-helper n i)\n    (if (= (remainder n i) 0)\n        (if\
    \ (prime? i)\n            i\n            (largest-prime-factor-helper n (+ i 1)))\n\
    \        (largest-prime-factor-helper n (+ i 1))))\n  (largest-prime-factor-helper\
    \ n 2))\n", "  (define (largest-prime-factor-iter n i)\n    (cond ((= n i) n)\n\
    \          ((= (remainder n i) 0) (largest-prime-factor-iter (/ n i) i))\n   \
    \       (else (largest-prime-factor-iter n (+ i 1)))))\n  (largest-prime-factor-iter\
    \ n 2))\n", "  (define (largest_prime_factor-iter n i)\n    (cond\n      [(= n\
    \ i) i]\n      [(= (remainder n i) 0) (largest_prime_factor-iter (/ n i) i)]\n\
    \      [else (largest_prime_factor-iter n (+ i 1))]))\n  (largest_prime_factor-iter\
    \ n 2))\n", "  (define (prime? n)\n    (define (iter i)\n      (cond ((> i (sqrt\
    \ n)) #t)\n            ((zero? (modulo n i)) #f)\n            (else (iter (+ i\
    \ 1)))))\n    (iter 2))\n  (define (iter i)\n    (cond ((> i (sqrt n)) n)\n  \
    \        ((and (prime? i) (zero? (modulo n i))) (iter i))\n          (else (iter\
    \ (+ i 1)))))\n  (iter 2))\n", "  (define (largest-prime-factor-iter n i)\n  \
    \  (cond\n      [(= n 1) i]\n      [(= (remainder n i) 0) (largest-prime-factor-iter\
    \ (/ n i) i)]\n      [else (largest-prime-factor-iter n (+ i 1))]))\n  (largest-prime-factor-iter\
    \ n 2))\n", "  (define (largest_prime_factor-iter n p)\n    (if (prime? n)\n \
    \       n\n        (if (zero? (modulo n p))\n            (largest_prime_factor-iter\
    \ (/ n p) p)\n            (largest_prime_factor-iter n (+ p 1)))))\n  (largest_prime-factor-iter\
    \ n 2))\n", "  (define (largest_prime_factor-iter n i)\n    (cond\n      [(= n\
    \ i) i]\n      [(= (remainder n i) 0) (largest_prime_factor-iter (/ n i) i)]\n\
    \      [else (largest_prime_factor-iter n (+ i 1))]))\n  (largest_prime_factor-iter\
    \ n 2))\n", "  (define (largest_prime_factor-iter n i)\n    (if (= n i)\n    \
    \    n\n        (if (integer? (/ n i))\n            (largest_prime_factor-iter\
    \ (/ n i) i)\n            (largest_prime_factor-iter n (+ i 1)))))\n  (largest_prime_factor-iter\
    \ n 2))\n", "  (define (largest_prime_factor-iter n i)\n    (if (= n i)\n    \
    \    n\n        (if (integer? (/ n i))\n            (largest_prime_factor-iter\
    \ (/ n i) i)\n            (largest_prime_factor-iter n (+ i 1)))))\n  (largest_prime_factor-iter\
    \ n 2))\n", "  (define (largest_prime_factor-iter n i)\n    (if (= n i)\n    \
    \    n\n        (if (zero? (modulo n i))\n            (largest_prime_factor-iter\
    \ (/ n i) i)\n            (largest_prime_factor-iter n (+ i 1)))))\n  (largest_prime_factor-iter\
    \ n 2))\n", "  (define (largest_prime_factor-iter n i)\n    (cond\n      [(= n\
    \ 1) i]\n      [(= (remainder n i) 0) (largest_prime_factor-iter (/ n i) i)]\n\
    \      [else (largest_prime_factor-iter n (+ i 1))]))\n  (largest_prime_factor-iter\
    \ n 2))\n", "  (define (largest_prime_factor-iter n i)\n    (if (= n 1)\n    \
    \    i\n        (if (and (integer? (/ n i))\n                 (prime? i))\n  \
    \          (largest_prime_factor-iter (/ n i) i)\n            (largest_prime_factor-iter\
    \ n (+ i 1)))))\n  (largest_prime_factor-iter n 2))\n", "  (define (prime? n)\n\
    \    (define (prime-helper n i)\n      (cond ((= i 1) #t)\n            ((= (modulo\
    \ n i) 0) #f)\n            (else (prime-helper n (- i 1)))))\n    (prime-helper\
    \ n (- n 1)))\n  (define (largest-prime-factor-helper n i)\n    (cond ((= i 1)\
    \ 1)\n          ((and (= (modulo n i) 0) (prime? i)) i)\n          (else (largest-prime-factor-helper\
    \ n (- i 1)))))\n  (largest-prime-factor-helper n (- n 1)))\n", "  (define (largest_prime_factor-iter\
    \ n i)\n    (if (= n i)\n        n\n        (if (integer? (/ n i))\n         \
    \   (largest_prime_factor-iter (/ n i) i)\n            (largest_prime_factor-iter\
    \ n (+ i 1)))))\n  (largest_prime_factor-iter n 2))\n", "  (define (largest_prime_factor-iter\
    \ n i)\n    (if (= n i)\n        n\n        (if (zero? (modulo n i))\n       \
    \     (largest_prime_factor-iter (/ n i) i)\n            (largest_prime_factor-iter\
    \ n (+ i 1)))))\n  (largest_prime_factor-iter n 2))\n", "  (define (largest_prime_factor-iter\
    \ n i)\n    (cond [(= n i) i]\n          [(and (integer? (/ n i)) (= (remainder\
    \ n i) 0))\n           (largest_prime_factor-iter (/ n i) i)]\n          [else\
    \ (largest_prime_factor-iter n (+ i 1))]))\n  (largest_prime_factor-iter n 2))\n",
  "  (define (largest-prime-factor-iter n i)\n    (if (= n i)\n        n\n       \
    \ (if (zero? (modulo n i))\n            (largest-prime-factor-iter (/ n i) i)\n\
    \            (largest-prime-factor-iter n (+ i 1)))))\n  (largest-prime-factor-iter\
    \ n 2))\n", "  (define (largest_prime_factor-iter n i)\n    (if (= n i)\n    \
    \    n\n        (if (zero? (modulo n i))\n            (largest_prime_factor-iter\
    \ (/ n i) i)\n            (largest_prime_factor-iter n (+ i 1)))))\n  (largest_prime_factor-iter\
    \ n 2))\n", "  (define (largest_prime_factor-iter n i)\n    (cond\n      [(= n\
    \ 1) i]\n      [(= (remainder n i) 0) (largest_prime_factor-iter (/ n i) i)]\n\
    \      [else (largest_prime_factor-iter n (+ i 1))]))\n  (largest_prime_factor-iter\
    \ n 2))\n", "  (define (largest_prime_factor-iter n i)\n    (if (= n i)\n    \
    \    i\n        (if (zero? (modulo n i))\n            (largest_prime_factor-iter\
    \ (/ n i) i)\n            (largest_prime_factor-iter n (+ i 1)))))\n  (largest_prime_factor-iter\
    \ n 2))\n", "  (define (largest_prime_factor-iter n i)\n    (if (and (integer?\
    \ (/ n i)) (= (gcd n i) i))\n        (largest_prime_factor-iter (/ n i) i)\n \
    \       (if (= i n)\n            n\n            (largest_prime_factor-iter n (+\
    \ i 1)))))\n  (largest_prime_factor-iter n 2))\n", "  (define (largest_prime_factor-iter\
    \ n i)\n    (cond\n      [(= n 1) i]\n      [(= (remainder n i) 0) (largest_prime_factor-iter\
    \ (/ n i) i)]\n      [else (largest_prime_factor-iter n (+ i 1))]))\n  (largest_prime_factor-iter\
    \ n 2))\n", "  (define (largest_prime_factor-iter n i)\n    (if (= n i)\n    \
    \    n\n        (if (integer? (/ n i))\n            (largest_prime_factor-iter\
    \ (/ n i) i)\n            (largest_prime_factor-iter n (+ i 1)))))\n  (largest_prime_factor-iter\
    \ n 2))\n", "  (define (largest_prime_factor-iter n i)\n    (cond [(= n i) n]\n\
    \          [(= (remainder n i) 0) (largest_prime_factor-iter (/ n i) i)]\n   \
    \       [else (largest_prime_factor-iter n (+ i 1))]))\n  (largest_prime_factor-iter\
    \ n 2))\n", "  (define (largest_prime_factor-iter n i)\n    (if (= n i)\n    \
    \    n\n        (if (zero? (modulo n i))\n            (largest_prime_factor-iter\
    \ (/ n i) i)\n            (largest_prime_factor-iter n (+ i 1)))))\n  (largest_prime_factor-iter\
    \ n 2))\n", "  (define (largest_prime_factor-iter n i)\n    (cond\n      [(= n\
    \ i) i]\n      [(= (remainder n i) 0) (largest_prime_factor-iter (/ n i) i)]\n\
    \      [else (largest_prime_factor-iter n (+ i 1))]))\n  (largest_prime_factor-iter\
    \ n 2))\n", "  (define (largest_prime_factor-iter n i)\n    (if (= n i)\n    \
    \    n\n        (if (zero? (modulo n i))\n            (largest_prime_factor-iter\
    \ (/ n i) i)\n            (largest_prime_factor-iter n (+ i 1)))))\n  (largest_prime_factor-iter\
    \ n 2))\n", "  (define (largest_prime_factor-iter n i)\n    (if (= n i)\n    \
    \    n\n        (if (and (integer? (/ n i)) (= (remainder n i) 0))\n         \
    \   (largest_prime_factor-iter (/ n i) i)\n            (largest_prime_factor-iter\
    \ n (+ i 1)))))\n  (largest_prime_factor-iter n 2))\n", "  (define (largest_prime_factor-iter\
    \ n i)\n    (if (= n i)\n        n\n        (if (zero? (modulo n i))\n       \
    \     (largest_prime_factor-iter (/ n i) i)\n            (largest_prime_factor-iter\
    \ n (+ i 1)))))\n  (largest_prime_factor-iter n 2))\n", "  (define (largest_prime_factor-iter\
    \ n i)\n    (cond\n      [(= n 1) i]\n      [(= (remainder n i) 0) (largest_prime_factor-iter\
    \ (/ n i) i)]\n      [else (largest_prime_factor-iter n (+ i 1))]))\n  (largest_prime_factor-iter\
    \ n 2))\n", "  (define (largest_prime_factor-iter n i)\n    (cond [(= n i) i]\n\
    \          [(= (remainder n i) 0) (largest_prime_factor-iter (/ n i) i)]\n   \
    \       [else (largest_prime_factor-iter n (+ i 1))]))\n  (largest_prime_factor-iter\
    \ n 2))\n", "  (define (largest_prime_factor-iter n i)\n    (cond [(= n 1) i]\n\
    \          [(= (remainder n i) 0) (largest_prime_factor-iter (/ n i) i)]\n   \
    \       [else (largest_prime_factor-iter n (+ i 1))]))\n  (largest_prime_factor-iter\
    \ n 2))\n", "  (define (largest_prime_factor-iter n i)\n    (if (= n i)\n    \
    \    i\n        (if (zero? (modulo n i))\n            (largest_prime_factor-iter\
    \ (/ n i) i)\n            (largest_prime_factor-iter n (+ i 1)))))\n  (largest_prime_factor-iter\
    \ n 2))\n", "  (define (largest_prime_factor-iter n i)\n    (cond\n      [(= n\
    \ 1) i]\n      [(divides? n i) (largest_prime_factor-iter (/ n i) i)]\n      [else\
    \ (largest_prime_factor-iter n (+ i 1))]))\n  (largest_prime_factor-iter n 2))\n",
  "  (define (largest-prime-factor-iter n i)\n    (if (prime? i)\n        (if (= (modulo\
    \ n i) 0)\n            (largest-prime-factor-iter (/ n i) i)\n            (largest-prime-factor-iter\
    \ n (+ i 1)))\n        (largest-prime-factor-iter n (+ i 1))))\n  (largest-prime-factor-iter\
    \ n 2))\n", "  (define (largest_prime_factor-iter n i)\n    (cond\n      [(= n\
    \ i) i]\n      [(= 0 (modulo n i)) (largest_prime_factor-iter (/ n i) i)]\n  \
    \    [else (largest_prime_factor-iter n (+ i 1))]))\n  (largest_prime_factor-iter\
    \ n 2))\n", "  (define (lpf n i)\n    (if (= n i)\n        n\n        (if (zero?\
    \ (modulo n i))\n            (lpf (/ n i) i)\n            (lpf n (+ i 1)))))\n\
    \  (lpf n 2))\n", "  (define (largest_prime_factor-iter n i)\n    (cond\n    \
    \  [(= n i) i]\n      [(= (remainder n i) 0) (largest_prime_factor-iter (/ n i)\
    \ i)]\n      [else (largest_prime_factor-iter n (+ i 1))]))\n  (largest_prime_factor-iter\
    \ n 2))\n", "  (define (is-prime? n)\n    (define (is-prime-helper n i)\n    \
    \  (cond ((= i 1) #t)\n            ((= (modulo n i) 0) #f)\n            (else\
    \ (is-prime-helper n (- i 1)))))\n    (is-prime-helper n (floor (/ n 2))))\n \
    \ (define (largest-prime-factor-helper n i)\n    (cond ((= i 1) n)\n         \
    \ ((and (is-prime? i) (= (modulo n i) 0)) (largest-prime-factor-helper (/ n i)\
    \ i))\n          (else (largest-prime-factor-helper n (- i 1)))))\n  (largest-prime-factor-helper\
    \ n (floor (/ n 2))))\n", "  (define (largest_prime_factor-iter n i)\n    (cond\n\
    \      [(= n 1) i]\n      [(= (remainder n i) 0) (largest_prime_factor-iter (/\
    \ n i) i)]\n      [else (largest_prime_factor-iter n (+ i 1))]))\n  (largest_prime_factor-iter\
    \ n 2))\n", "  (define (largest_prime_factor-iter n i)\n    (cond\n      [(= n\
    \ 1) i]\n      [(= (remainder n i) 0) (largest_prime_factor-iter (/ n i) i)]\n\
    \      [else (largest_prime_factor-iter n (+ i 1))]))\n  (largest_prime_factor-iter\
    \ n 2))\n", "  (define (largest_prime_factor-iter n i)\n    (cond\n      [(= n\
    \ i) i]\n      [(= 0 (modulo n i)) (largest_prime_factor-iter (/ n i) i)]\n  \
    \    [else (largest_prime_factor-iter n (+ i 1))]))\n  (largest_prime_factor-iter\
    \ n 2))\n", "  (define (largest_prime_factor-iter n i)\n    (if (zero? (modulo\
    \ n i))\n        (if (prime? i)\n            i\n            (largest_prime_factor-iter\
    \ (/ n i) i))\n        (largest_prime_factor-iter n (+ i 1))))\n  (largest_prime_factor-iter\
    \ n 2))\n", "  (define (largest_prime_factor-iter n i)\n    (if (= n i)\n    \
    \    n\n        (if (zero? (modulo n i))\n            (largest_prime_factor-iter\
    \ (/ n i) i)\n            (largest_prime_factor-iter n (+ i 1)))))\n  (largest_prime_factor-iter\
    \ n 2))\n", "  (define (largest_prime_factor-iter n i)\n    (cond\n      [(= n\
    \ 1) i]\n      [(= (remainder n i) 0) (largest_prime_factor-iter (/ n i) i)]\n\
    \      [else (largest_prime_factor-iter n (+ i 1))]))\n  (largest_prime_factor-iter\
    \ n 2))\n", "  (define (is_prime n)\n    (define (is_prime-iter n i)\n      (if\
    \ (= i n)\n          #t\n          (if (= (remainder n i) 0)\n              #f\n\
    \              (is_prime-iter n (+ i 1)))))\n    (is_prime-iter n 2))\n  (define\
    \ (largest-prime-factor-iter n i)\n    (if (= (remainder n i) 0)\n        (if\
    \ (is_prime i)\n            i\n            (largest-prime-factor-iter n (+ i 1)))\n\
    \        (largest-prime-factor-iter n (+ i 1))))\n  (largest-prime-factor-iter\
    \ n 2))\n", "  (define (largest_prime_factor-iter n i)\n    (if (zero? (modulo\
    \ n i))\n        (if (prime? i)\n            i\n            (largest_prime_factor-iter\
    \ (/ n i) i))\n        (largest_prime_factor-iter n (+ i 1))))\n  (largest_prime_factor-iter\
    \ n 2))\n", "  (define (largest_prime_factor-iter n i)\n    (cond [(= n 1) i]\n\
    \          [(= (remainder n i) 0) (largest_prime_factor-iter (/ n i) i)]\n   \
    \       [else (largest_prime_factor-iter n (+ i 1))]))\n  (largest_prime_factor-iter\
    \ n 2))\n", "  (define (largest_prime_factor-iter n i)\n    (if (prime? i)\n \
    \       (if (= (modulo n i) 0)\n            (largest_prime_factor-iter (/ n i)\
    \ i)\n            (largest_prime_factor-iter n (+ i 1)))\n        (largest_prime_factor-iter\
    \ n (+ i 1))))\n  (largest_prime_factor-iter n 2))\n", "  (define (largest_prime_factor-iter\
    \ n i)\n    (cond [(= n 1) i]\n          [(= (remainder n i) 0) (largest_prime_factor-iter\
    \ (/ n i) i)]\n          [else (largest_prime_factor-iter n (+ i 1))]))\n  (largest_prime_factor-iter\
    \ n 2))\n", "  (define (largest_prime_factor-iter n i)\n    (if (and (integer?\
    \ (/ n i)) (prime? i))\n        (largest_prime_factor-iter (/ n i) i)\n      \
    \  (if (prime? n)\n            n\n            (largest_prime_factor-iter n (+\
    \ i 1)))))\n  (largest_prime-factor-iter n 2))\n", "  (define (is-prime? n)\n\
    \    (define (is-prime-helper n i)\n      (cond ((= i n) #t)\n            ((=\
    \ (remainder n i) 0) #f)\n            (else (is-prime-helper n (+ i 1)))))\n \
    \   (is-prime-helper n 2))\n  (define (largest-prime-factor-helper n i)\n    (cond\
    \ ((= i n) n)\n          ((and (= (remainder n i) 0) (is-prime? i)) (largest-prime-factor-helper\
    \ n i))\n          (else (largest-prime-factor-helper n (+ i 1)))))\n  (largest-prime-factor-helper\
    \ n 2))\n", "  (define (largest_prime_factor-iter n i)\n    (if (= n i)\n    \
    \    n\n        (if (zero? (modulo n i))\n            (largest_prime_factor-iter\
    \ (/ n i) i)\n            (largest_prime_factor-iter n (+ i 1)))))\n  (largest_prime_factor-iter\
    \ n 2))\n", "  (define (largest_prime_factor-iter n i)\n    (if (= n i)\n    \
    \    n\n        (if (zero? (modulo n i))\n            (largest_prime_factor-iter\
    \ (/ n i) i)\n            (largest_prime_factor-iter n (+ i 1)))))\n  (largest_prime_factor-iter\
    \ n 2))\n", "  (define (largest_prime_factor-iter n i)\n    (if (prime? n)\n \
    \       n\n        (if (= (remainder n i) 0)\n            (largest_prime_factor-iter\
    \ (/ n i) i)\n            (largest_prime_factor-iter n (+ i 1)))))\n  (largest_prime_factor-iter\
    \ n 2))\n", "  (define (prime? n)\n    (define (divisible? a b)\n      (= (modulo\
    \ a b) 0))\n    (define (not-divisible? a b)\n      (not (divisible? a b)))\n\
    \    (define (find-divisor n test-divisor)\n      (cond ((> (square test-divisor)\
    \ n) n)\n            ((divisible? n test-divisor) test-divisor)\n            (else\
    \ (find-divisor n (+ test-divisor 1)))))\n    (define (smallest-divisor n)\n \
    \     (find-divisor n 2))\n    (define (prime? n)\n      (= n (smallest-divisor\
    \ n)))\n    (prime? n))\n  (define (largest-prime-factor n)\n    (cond ((prime?\
    \ n) n)\n          (else (largest-prime-factor (smallest-divisor n)))))\n  (largest-prime-factor\
    \ n))\n", "  (define (largest_prime_factor-iter n i)\n    (cond\n      [(= n i)\
    \ i]\n      [(= (remainder n i) 0) (largest_prime_factor-iter (/ n i) i)]\n  \
    \    [else (largest_prime_factor-iter n (+ i 1))]))\n  (largest_prime_factor-iter\
    \ n 2))\n", "  (define (largest-prime-factor-iter n i)\n    (cond\n      [(= n\
    \ i) n]\n      [(= 0 (modulo n i)) (largest-prime-factor-iter (/ n i) i)]\n  \
    \    [else (largest-prime-factor-iter n (+ i 1))]))\n  (largest-prime-factor-iter\
    \ n 2))\n", "  (define (largest_prime_factor-iter n i)\n    (if (= n i)\n    \
    \    n\n        (if (zero? (modulo n i))\n            (largest_prime_factor-iter\
    \ (/ n i) i)\n            (largest_prime_factor-iter n (+ i 1)))))\n  (largest_prime_factor-iter\
    \ n 2))\n", "  (define (largest_prime_factor-iter n i)\n    (cond\n      [(= n\
    \ 1) i]\n      [(= (remainder n i) 0) (largest_prime_factor-iter (/ n i) i)]\n\
    \      [else (largest_prime_factor-iter n (+ i 1))]))\n  (largest_prime_factor-iter\
    \ n 2))\n", "  (define (largest_prime_factor-iter n i)\n    (if (= n i)\n    \
    \    i\n        (if (zero? (modulo n i))\n            (largest_prime_factor-iter\
    \ (/ n i) i)\n            (largest_prime_factor-iter n (+ i 1)))))\n  (largest_prime_factor-iter\
    \ n 2))\n", "  (define (largest_prime_factor-iter n i)\n    (cond\n      [(= n\
    \ i) i]\n      [(= (remainder n i) 0) (largest_prime_factor-iter (/ n i) i)]\n\
    \      [else (largest_prime_factor-iter n (+ i 1))]))\n  (largest_prime_factor-iter\
    \ n 2))\n", "  (define (largest_prime_factor-iter n i)\n    (cond\n      [(= n\
    \ i) i]\n      [(= (remainder n i) 0) (largest_prime_factor-iter (/ n i) i)]\n\
    \      [else (largest_prime_factor-iter n (+ i 1))]))\n  (largest_prime_factor-iter\
    \ n 2))\n", "  (define (largest_prime_factor-iter n i)\n    (cond\n      [(= n\
    \ i) n]\n      [(= (remainder n i) 0) (largest_prime_factor-iter (/ n i) i)]\n\
    \      [else (largest_prime_factor-iter n (+ i 1))]))\n  (largest_prime_factor-iter\
    \ n 2))\n", "  (define (largest_prime_factor-iter n i)\n    (cond\n      [(= n\
    \ i) i]\n      [(= (remainder n i) 0) (largest_prime_factor-iter (/ n i) i)]\n\
    \      [else (largest_prime_factor-iter n (+ i 1))]))\n  (largest_prime_factor-iter\
    \ n 2))\n", "  (define (largest-prime-factor-iter n i)\n    (if (= n i)\n    \
    \    i\n        (if (zero? (modulo n i))\n            (largest-prime-factor-iter\
    \ (/ n i) i)\n            (largest-prime-factor-iter n (+ i 1)))))\n  (largest-prime-factor-iter\
    \ n 2))\n", "  (define (largest-prime-factor-iter n i)\n    (cond ((= n i) i)\n\
    \          ((= (remainder n i) 0) (largest-prime-factor-iter (/ n i) i))\n   \
    \       (else (largest-prime-factor-iter n (+ i 1)))))\n  (largest-prime-factor-iter\
    \ n 2))\n", "  (define (largest_prime_factor-iter n i)\n    (if (= n i)\n    \
    \    n\n        (if (zero? (modulo n i))\n            (largest_prime_factor-iter\
    \ (/ n i) i)\n            (largest_prime_factor-iter n (+ i 1)))))\n  (largest_prime_factor-iter\
    \ n 2))\n", "  (define (largest_prime_factor-iter n i)\n    (cond\n      [(= n\
    \ i) n]\n      [(= (remainder n i) 0) (largest_prime_factor-iter (/ n i) i)]\n\
    \      [else (largest_prime_factor-iter n (+ i 1))]))\n  (largest_prime_factor-iter\
    \ n 2))\n", "  (define (largest_prime_factor-iter n i)\n    (if (= n i)\n    \
    \    i\n        (if (zero? (modulo n i))\n            (largest_prime_factor-iter\
    \ (/ n i) i)\n            (largest_prime_factor-iter n (+ i 1)))))\n  (largest_prime_factor-iter\
    \ n 2))\n", "  (define (largest-prime-factor-iter n i)\n    (if (= n i)\n    \
    \    n\n        (if (and (zero? (modulo n i))\n                 (prime? i))\n\
    \            (largest-prime-factor-iter (/ n i) i)\n            (largest-prime-factor-iter\
    \ n (+ i 1)))))\n  (largest-prime-factor-iter n 2))\n", "  (define (largest_prime_factor-iter\
    \ n i)\n    (cond\n      [(= n i) i]\n      [(= (remainder n i) 0) (largest_prime_factor-iter\
    \ (/ n i) i)]\n      [else (largest_prime_factor-iter n (+ i 1))]))\n  (largest_prime_factor-iter\
    \ n 2))\n", "  (define (largest_prime_factor-iter n i)\n    (cond\n      [(= n\
    \ 1) i]\n      [(= (remainder n i) 0) (largest_prime_factor-iter (/ n i) i)]\n\
    \      [else (largest_prime_factor-iter n (+ i 1))]))\n  (largest_prime_factor-iter\
    \ n 2))\n", "  (define (largest_prime_factor-iter n i)\n    (cond\n      [(= n\
    \ i) i]\n      [(= (remainder n i) 0) (largest_prime_factor-iter (/ n i) i)]\n\
    \      [else (largest_prime_factor-iter n (+ i 1))]))\n  (largest_prime_factor-iter\
    \ n 2))\n", "  (define (largest_prime_factor-iter n i)\n    (if (= n i)\n    \
    \    (largest_prime_factor-iter n (+ i 1))\n        (if (= (remainder n i) 0)\n\
    \            (if (= (remainder n (/ n i)) 0)\n                (largest_prime_factor-iter\
    \ (/ n i) i)\n                (largest_prime_factor-iter n (+ i 1)))\n       \
    \     (largest_prime_factor-iter n (+ i 1)))))\n  (largest_prime_factor-iter n\
    \ 2))\n", "  (define (largest-prime-factor-iter n i)\n    (if (= n i)\n      \
    \  n\n        (if (and (integer? (/ n i)) (prime? i))\n            (largest-prime-factor-iter\
    \ (/ n i) i)\n            (largest-prime-factor-iter n (+ i 1)))))\n  (largest-prime-factor-iter\
    \ n 2))\n", "  (define (is-prime? n)\n    (define (is-prime-helper? n i)\n   \
    \   (if (= i 1)\n          #t\n          (if (zero? (modulo n i))\n          \
    \    #f\n              (is-prime-helper? n (- i 1)))))\n    (is-prime-helper?\
    \ n (- n 1)))\n  (define (largest-prime-factor-helper n i)\n    (if (= i 1)\n\
    \        1\n        (if (and (zero? (modulo n i)) (is-prime? i))\n           \
    \ i\n            (largest-prime-factor-helper n (- i 1)))))\n  (largest-prime-factor-helper\
    \ n (- n 1)))\n", "  (define (largest_prime_factor-iter n i)\n    (if (= n i)\n\
    \        n\n        (if (zero? (modulo n i))\n            (largest_prime_factor-iter\
    \ (/ n i) i)\n            (largest_prime_factor-iter n (+ i 1)))))\n  (largest_prime_factor-iter\
    \ n 2))\n", "  (define (largest_prime_factor-iter n i)\n    (cond [(= n 1) i]\n\
    \          [(= (remainder n i) 0) (largest_prime_factor-iter (/ n i) i)]\n   \
    \       [else (largest_prime_factor-iter n (+ i 1))]))\n  (largest_prime_factor-iter\
    \ n 2))\n", "  (define (largest_prime_factor-iter n i)\n    (if (= n i)\n    \
    \    n\n        (if (and (= (remainder n i) 0) (prime? i))\n            (largest_prime_factor-iter\
    \ (/ n i) i)\n            (largest_prime_factor-iter n (+ i 1)))))\n  (largest_prime-factor-iter\
    \ n 2))\n", "  (define (largest_prime_factor-iter n i)\n    (if (= n i)\n    \
    \    n\n        (if (zero? (modulo n i))\n            (largest_prime_factor-iter\
    \ (/ n i) i)\n            (largest_prime_factor-iter n (+ i 1)))))\n  (largest_prime_factor-iter\
    \ n 2))\n", "  (define (largest_prime_factor-iter n i)\n    (cond\n      [(= n\
    \ 1) i]\n      [(= (remainder n i) 0) (largest_prime_factor-iter (/ n i) i)]\n\
    \      [else (largest_prime_factor-iter n (+ i 1))]))\n  (largest_prime_factor-iter\
    \ n 2))\n", "  (define (largest-prime-factor-iter n i)\n    (if (= n i)\n    \
    \    n\n        (if (zero? (modulo n i))\n            (largest-prime-factor-iter\
    \ (/ n i) i)\n            (largest-prime-factor-iter n (+ i 1)))))\n  (largest-prime-factor-iter\
    \ n 2))\n", "  (define (largest_prime_factor-iter n i)\n    (if (= n 1)\n    \
    \    i\n        (if (and (integer? (/ n i)) (= (remainder n i) 0))\n         \
    \   (largest_prime_factor-iter (/ n i) i)\n            (largest_prime_factor-iter\
    \ n (+ i 1)))))\n  (largest_prime_factor-iter n 2))\n", "  (define (largest_prime_factor-iter\
    \ n i)\n    (if (= n i)\n        n\n        (if (zero? (modulo n i))\n       \
    \     (largest_prime_factor-iter (/ n i) i)\n            (largest_prime_factor-iter\
    \ n (+ i 1)))))\n  (largest_prime_factor-iter n 2))\n", "  (define (largest_prime_factor_iter\
    \ n i)\n    (if (= n i)\n        n\n        (if (divides? i n)\n            (largest_prime_factor_iter\
    \ (/ n i) i)\n            (largest_prime_factor_iter n (+ i 1)))))\n  (largest_prime_factor_iter\
    \ n 2))\n", "  (define (largest_prime_factor-iter n i)\n    (if (= n i)\n    \
    \    n\n        (if (and (integer? (/ n i))\n                 (prime? i))\n  \
    \          (largest_prime_factor-iter (/ n i) i)\n            (largest_prime_factor-iter\
    \ n (+ i 1)))))\n  (largest_prime_factor-iter n 2))\n", "  (define (largest_prime_factor-iter\
    \ n i)\n    (cond\n      [(= n i) n]\n      [(= (remainder n i) 0) (largest_prime_factor-iter\
    \ (/ n i) i)]\n      [else (largest_prime_factor-iter n (+ i 1))]))\n  (largest_prime_factor-iter\
    \ n 2))\n", "  (define (largest_prime_factor-iter n i)\n    (if (= n i)\n    \
    \    n\n        (if (and (= (remainder n i) 0)\n                 (prime? i))\n\
    \            (largest_prime_factor-iter (/ n i) i)\n            (largest_prime_factor-iter\
    \ n (+ i 1)))))\n  (largest_prime_factor-iter n 2))\n", "  (define (largest_prime_factor-iter\
    \ n i)\n    (cond\n      [(= n i) i]\n      [(and (integer? (/ n i)) (prime? i))\
    \ (largest_prime_factor-iter (/ n i) i)]\n      [else (largest_prime_factor-iter\
    \ n (+ i 1))]))\n  (largest_prime_factor-iter n 2))\n", "  (define (largest_prime_factor-iter\
    \ n i)\n    (if (= n i)\n        n\n        (if (and (= (remainder n i) 0) (prime?\
    \ i))\n            (largest_prime_factor-iter (/ n i) i)\n            (largest_prime_factor-iter\
    \ n (+ i 1)))))\n  (largest_prime-factor-iter n 2))\n", "  (define (largest_prime_factor-iter\
    \ n i)\n    (cond\n      [(= n 1) i]\n      [(= (remainder n i) 0) (largest_prime_factor-iter\
    \ (/ n i) i)]\n      [else (largest_prime_factor-iter n (+ i 1))]))\n  (largest_prime_factor-iter\
    \ n 2))\n", "  (define (largest_prime_factor-iter n i)\n    (if (= n i)\n    \
    \    n\n        (if (zero? (modulo n i))\n            (largest_prime_factor-iter\
    \ (/ n i) i)\n            (largest_prime_factor-iter n (+ i 1)))))\n  (largest_prime_factor-iter\
    \ n 2))\n", "  (define (largest_prime_factor-iter n i)\n    (if (= n i)\n    \
    \    n\n        (if (zero? (modulo n i))\n            (largest_prime_factor-iter\
    \ (/ n i) i)\n            (largest_prime_factor-iter n (+ i 1)))))\n  (largest_prime_factor-iter\
    \ n 2))\n", "  (define (largest-prime-factor-iter n i)\n    (cond ((= n i) n)\n\
    \          ((= (remainder n i) 0) (largest-prime-factor-iter (/ n i) i))\n   \
    \       (else (largest-prime-factor-iter n (+ i 1)))))\n  (largest-prime-factor-iter\
    \ n 2))\n", "  (define (largest-prime-factor-iter n i)\n    (cond ((= n 1) i)\n\
    \          ((= (remainder n i) 0) (largest-prime-factor-iter (/ n i) i))\n   \
    \       (else (largest-prime-factor-iter n (+ i 1)))))\n  (largest-prime-factor-iter\
    \ n 2))\n", "  (define (largest_prime_factor-iter n i)\n    (cond\n      [(= n\
    \ i) i]\n      [(= (remainder n i) 0) (largest_prime_factor-iter (/ n i) i)]\n\
    \      [else (largest_prime_factor-iter n (+ i 1))]))\n  (largest_prime_factor-iter\
    \ n 2))\n", "  (define (largest_prime_factor-iter n i)\n    (cond [(= n i) n]\n\
    \          [(and (integer? (/ n i)) (= (remainder n i) 0))\n           (largest_prime_factor-iter\
    \ (/ n i) i)]\n          [else (largest_prime_factor-iter n (+ i 1))]))\n  (largest_prime_factor-iter\
    \ n 2))\n", "  (define (largest_prime_factor-iter n i)\n    (cond\n      [(= n\
    \ i) i]\n      [(= (remainder n i) 0) (largest_prime_factor-iter (/ n i) i)]\n\
    \      [else (largest_prime_factor-iter n (+ i 1))]))\n  (largest_prime-factor-iter\
    \ n 2))\n", "  (define (largest-prime-factor-iter n i)\n    (cond\n      [(= n\
    \ i) i]\n      [(= (remainder n i) 0) (largest-prime-factor-iter (/ n i) i)]\n\
    \      [else (largest-prime-factor-iter n (+ i 1))]))\n  (largest-prime-factor-iter\
    \ n 2))\n", "  (define (largest_prime_factor-iter n i)\n    (if (= n i)\n    \
    \    n\n        (if (zero? (modulo n i))\n            (largest_prime_factor-iter\
    \ (/ n i) i)\n            (largest_prime_factor-iter n (+ i 1)))))\n  (largest_prime_factor-iter\
    \ n 2))\n", "  (define (largest_prime_factor-iter n i)\n    (if (and (integer?\
    \ (/ n i)) (prime? i))\n        (largest_prime_factor-iter (/ n i) i)\n      \
    \  (if (prime? n)\n            n\n            (largest_prime_factor-iter n (+\
    \ i 1)))))\n  (largest_prime_factor-iter n 2))\n", "  (define (largest_prime_factor-iter\
    \ n i)\n    (cond [(= n i) i]\n          [(= (remainder n i) 0) (largest_prime_factor-iter\
    \ (/ n i) i)]\n          [else (largest_prime_factor-iter n (+ i 1))]))\n  (largest_prime_factor-iter\
    \ n 2))\n", "  (define (largest_prime_factor-iter n i)\n    (if (and (integer?\
    \ (/ n i)) (prime? i))\n        (largest_prime_factor-iter (/ n i) i)\n      \
    \  (if (= i n)\n            (largest_prime_factor-iter n (+ i 1))\n          \
    \  i)))\n  (largest_prime_factor-iter n 2))\n", "  (define (largest_prime_factor-iter\
    \ n i)\n    (cond\n      [(= n 1) i]\n      [(= (remainder n i) 0) (largest_prime_factor-iter\
    \ (/ n i) i)]\n      [else (largest_prime_factor-iter n (+ i 1))]))\n  (largest_prime_factor-iter\
    \ n 2))\n", "  (define (largest_prime_factor-iter n i)\n    (if (= n i)\n    \
    \    n\n        (if (integer? (/ n i))\n            (largest_prime_factor-iter\
    \ (/ n i) i)\n            (largest_prime_factor-iter n (+ i 1)))))\n  (largest_prime_factor-iter\
    \ n 2))\n", "  (define (divisors n)\n    (define (divisors-iter n i)\n      (if\
    \ (= n 1)\n          '()\n          (if (= (remainder n i) 0)\n              (cons\
    \ i (divisors-iter (/ n i) i))\n              (divisors-iter n (+ i 1)))))\n \
    \   (divisors-iter n 2))\n  (define (is-prime n)\n    (empty? (divisors n)))\n\
    \  (define (prime-divisors n)\n    (filter is-prime (divisors n)))\n  (apply max\
    \ (prime-divisors n)))\n", "  (define (largest-prime-factor-iter n i)\n    (cond\n\
    \      [(= n i) n]\n      [(= (remainder n i) 0) (largest-prime-factor-iter (/\
    \ n i) i)]\n      [else (largest-prime-factor-iter n (+ i 1))]))\n  (largest-prime-factor-iter\
    \ n 2))\n", "  (define (prime? n)\n    (define (divisible? a b)\n      (= (modulo\
    \ a b) 0))\n    (define (find-divisor n test-divisor)\n      (cond ((> (square\
    \ test-divisor) n) n)\n            ((divisible? n test-divisor) test-divisor)\n\
    \            (else (find-divisor n (+ test-divisor 1)))))\n    (= n (find-divisor\
    \ n 2)))\n  (define (largest-prime-factor n)\n    (define (largest-prime-factor-iter\
    \ n test-divisor)\n      (cond ((prime? n) n)\n            ((divisible? n test-divisor)\n\
    \             (largest-prime-factor-iter (/ n test-divisor) test-divisor))\n \
    \           (else (largest-prime-factor-iter n (+ test-divisor 1)))))\n    (largest-prime-factor-iter\
    \ n 2))\n  (largest-prime-factor n))\n", "  (define (largest_prime_factor-iter\
    \ n i)\n    (cond [(= n i) n]\n          [(= (remainder n i) 0) (largest_prime_factor-iter\
    \ (/ n i) i)]\n          [else (largest_prime_factor-iter n (+ i 1))]))\n  (largest_prime_factor-iter\
    \ n 2))\n", "  (define (largest_prime_factor-iter n i)\n    (cond\n      [(= n\
    \ i) i]\n      [(= (remainder n i) 0) (largest_prime_factor-iter (/ n i) i)]\n\
    \      [else (largest_prime_factor-iter n (+ i 1))]))\n  (largest_prime_factor-iter\
    \ n 2))\n"]
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
