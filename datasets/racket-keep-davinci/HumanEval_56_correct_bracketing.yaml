name: HumanEval_56_correct_bracketing
language: racket
prompt: "#lang racket\n\n;; brackets is a string of \"<\" and \">\".\n;; return True\
  \ if every opening bracket has a corresponding closing bracket.\n;; >>> correct_bracketing(\"\
  <\")\n;; False\n;; >>> correct_bracketing(\"<>\")\n;; True\n;; >>> correct_bracketing(\"\
  <<><>>\")\n;; True\n;; >>> correct_bracketing(\"><<>\")\n;; False\n(define (correct_bracketing\
  \ brackets)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate correct_bracketing))\n\
  \    (check-equal? (candidate \"<>\") #t)\n    (check-equal? (candidate \"<<><>>\"\
  ) #t)\n    (check-equal? (candidate \"<><><<><>><>\") #t)\n    (check-equal? (candidate\
  \ \"<><><<<><><>><>><<><><<>>>\") #t)\n    (check-equal? (candidate \"<<<><>>>>\"\
  ) #f)\n    (check-equal? (candidate \"><<>\") #f)\n    (check-equal? (candidate\
  \ \"<\") #f)\n    (check-equal? (candidate \"<<<<\") #f)\n    (check-equal? (candidate\
  \ \">\") #f)\n    (check-equal? (candidate \"<<>\") #f)\n    (check-equal? (candidate\
  \ \"<><><<><>><>><<>\") #f)\n    (check-equal? (candidate \"<><><<><>><>>><>\")\
  \ #f)\n))\n\n(test-humaneval)"
completions: ["  (define (helper brackets count)\n    (cond\n      [(empty? brackets)\
    \ (= count 0)]\n      [(string=? (first brackets) \"<\") (helper (rest brackets)\
    \ (+ count 1))]\n      [(string=? (first brackets) \">\") (and (not (zero? count))\
    \ (helper (rest brackets) (- count 1)))]))\n  (helper brackets 0))\n", "  (define\
    \ (helper brackets count)\n    (cond\n      [(empty? brackets) (= count 0)]\n\
    \      [(= (first brackets) #\\<) (helper (rest brackets) (+ count 1))]\n    \
    \  [(= (first brackets) #\\>) (and (not (zero? count)) (helper (rest brackets)\
    \ (- count 1)))]))\n  (helper (string->list brackets) 0))\n", "  (cond\n    [(empty?\
    \ brackets) #t]\n    [(empty? (rest brackets)) #f]\n    [(and (equal? (first brackets)\
    \ \"<\")\n          (equal? (first (rest brackets)) \">\"))\n     (correct_bracketing\
    \ (rest (rest brackets)))]\n    [else (correct_bracketing (rest brackets))]))\n",
  "  (cond\n    [(empty? brackets) #t]\n    [(empty? (rest brackets)) #f]\n    [(equal?\
    \ (first brackets) \"<\")\n     (cond\n       [(equal? (first (rest brackets))\
    \ \">\")\n        (correct_bracketing (rest (rest brackets)))]\n       [else (correct_bracketing\
    \ (rest brackets))])]\n    [else (correct_bracketing (rest brackets))]))\n", " \
    \ (define (helper brackets count)\n    (cond ((empty? brackets) (= count 0))\n\
    \          ((char=? (first brackets) #\\<) (helper (rest brackets) (+ count 1)))\n\
    \          ((char=? (first brackets) #\\>) (and (not (= count 0)) (helper (rest\
    \ brackets) (- count 1))))))\n  (helper brackets 0))\n", "  (define (helper brackets\
    \ count)\n    (cond\n      [(empty? brackets) (= count 0)]\n      [(char=? (first\
    \ brackets) #\\<) (helper (rest brackets) (+ count 1))]\n      [(char=? (first\
    \ brackets) #\\>) (and (not (= count 0)) (helper (rest brackets) (- count 1)))]))\n\
    \  (helper brackets 0))\n", "  (let loop ([brackets brackets] [count 0])\n   \
    \ (cond [(empty? brackets) (= count 0)]\n          [(string=? (first brackets)\
    \ \"<\")\n           (loop (rest brackets) (+ count 1))]\n          [(string=?\
    \ (first brackets) \">\")\n           (and (not (= count 0))\n               \
    \ (loop (rest brackets) (- count 1)))]\n          [else (error \"invalid input\"\
    )])))\n", "  (let loop ([brackets brackets] [count 0])\n    (cond [(empty? brackets)\
    \ (zero? count)]\n          [(char=? (first brackets) #\\<)\n           (loop\
    \ (rest brackets) (+ count 1))]\n          [(char=? (first brackets) #\\>)\n \
    \          (loop (rest brackets) (- count 1))]\n          [else (loop (rest brackets)\
    \ count)])))\n", "  (cond\n    [(empty? brackets) true]\n    [(string=? (first\
    \ brackets) \"<\")\n     (cond\n       [(empty? (rest brackets)) false]\n    \
    \   [(string=? (first (rest brackets)) \">\")\n        (correct_bracketing (rest\
    \ (rest brackets)))]\n       [else false])]\n    [else false]))\n", "  (define\
    \ (helper brackets count)\n    (cond\n      [(empty? brackets) (= count 0)]\n\
    \      [(string=? (first brackets) \"<\") (helper (rest brackets) (+ count 1))]\n\
    \      [(string=? (first brackets) \">\") (and (not (zero? count)) (helper (rest\
    \ brackets) (- count 1)))]))\n  (helper brackets 0))\n", "  (cond\n    [(empty?\
    \ brackets) #t]\n    [(empty? (rest brackets)) #f]\n    [(equal? (first brackets)\
    \ \"<\")\n     (and (equal? (first (rest brackets)) \">\")\n          (correct_bracketing\
    \ (rest (rest brackets))))]\n    [else #f]))\n", "  (define (helper brackets count)\n\
    \    (cond\n      [(empty? brackets) (= count 0)]\n      [(string=? (first brackets)\
    \ \"<\") (helper (rest brackets) (+ count 1))]\n      [(string=? (first brackets)\
    \ \">\") (and (not (= count 0)) (helper (rest brackets) (- count 1)))]))\n  (helper\
    \ brackets 0))\n", "  (define (helper brackets count)\n    (cond ((empty? brackets)\
    \ (= count 0))\n          ((char=? (first brackets) #\\<) (helper (rest brackets)\
    \ (+ count 1)))\n          ((char=? (first brackets) #\\>) (and (not (= count\
    \ 0)) (helper (rest brackets) (- count 1))))))\n  (helper brackets 0))\n", " \
    \ (cond\n    [(empty? brackets) true]\n    [(empty? (rest brackets)) false]\n\
    \    [(equal? (first brackets) \"<\")\n     (and (equal? (first (rest brackets))\
    \ \">\")\n          (correct_bracketing (rest (rest brackets))))]\n    [else false]))\n",
  "  (define (helper brackets count)\n    (cond\n      [(empty? brackets) (= count\
    \ 0)]\n      [(string=? (first brackets) \"<\") (helper (rest brackets) (+ count\
    \ 1))]\n      [(string=? (first brackets) \">\") (and (not (zero? count)) (helper\
    \ (rest brackets) (- count 1)))]))\n  (helper brackets 0))\n", "  (cond\n    [(empty?\
    \ brackets) #t]\n    [(equal? (first brackets) \"<\")\n     (if (correct_bracketing\
    \ (rest brackets))\n         (if (equal? (first (rest brackets)) \">\")\n    \
    \         (correct_bracketing (rest (rest brackets)))\n             #f)\n    \
    \     #f)]\n    [else #f]))\n", "  (cond\n    [(empty? brackets) #t]\n    [(string=?\
    \ (first brackets) \"<\")\n     (cond\n       [(string=? (last brackets) \">\"\
    ) (correct_bracketing (substring brackets 1 (- (string-length brackets) 1)))]\n\
    \       [else #f])]\n    [else #f]))\n", "  (define (helper brackets count)\n\
    \    (cond\n      [(empty? brackets) (= count 0)]\n      [(equal? (first brackets)\
    \ \"<\") (helper (rest brackets) (+ count 1))]\n      [(equal? (first brackets)\
    \ \">\") (and (not (zero? count)) (helper (rest brackets) (- count 1)))]))\n \
    \ (helper brackets 0))\n", "  (define (helper brackets count)\n    (cond\n   \
    \   [(empty? brackets) (= count 0)]\n      [(string=? (first brackets) \"<\")\
    \ (helper (rest brackets) (+ count 1))]\n      [(string=? (first brackets) \"\
    >\") (and (not (= count 0)) (helper (rest brackets) (- count 1)))]))\n  (helper\
    \ brackets 0))\n", "  (define (helper brackets count)\n    (cond ((empty? brackets)\
    \ (= count 0))\n          ((char=? (first brackets) #\\<) (helper (rest brackets)\
    \ (+ count 1)))\n          ((char=? (first brackets) #\\>) (and (not (= count\
    \ 0)) (helper (rest brackets) (- count 1))))))\n  (helper brackets 0))\n", " \
    \ (define (helper brackets count)\n    (cond\n      [(empty? brackets) (= count\
    \ 0)]\n      [(= (first brackets) #\\<) (helper (rest brackets) (+ count 1))]\n\
    \      [(= (first brackets) #\\>) (and (not (zero? count)) (helper (rest brackets)\
    \ (- count 1)))]))\n  (helper (string->list brackets) 0))\n", "  (define (helper\
    \ brackets count)\n    (cond\n      [(empty? brackets) (= count 0)]\n      [(char=?\
    \ (first brackets) #\\<) (helper (rest brackets) (+ count 1))]\n      [(char=?\
    \ (first brackets) #\\>) (and (not (zero? count)) (helper (rest brackets) (- count\
    \ 1)))]))\n  (helper brackets 0))\n", "  (define (helper brackets count)\n   \
    \ (cond\n      [(empty? brackets) (= count 0)]\n      [(string=? (first brackets)\
    \ \"<\") (helper (rest brackets) (+ count 1))]\n      [(string=? (first brackets)\
    \ \">\") (and (not (= count 0)) (helper (rest brackets) (- count 1)))]))\n  (helper\
    \ brackets 0))\n", "  (define (helper brackets count)\n    (cond\n      [(empty?\
    \ brackets) (= count 0)]\n      [(string=? (first brackets) \"<\") (helper (rest\
    \ brackets) (+ count 1))]\n      [(string=? (first brackets) \">\") (and (not\
    \ (= count 0)) (helper (rest brackets) (- count 1)))]))\n  (helper brackets 0))\n",
  "  (define (helper brackets count)\n    (cond\n      [(empty? brackets) (= count\
    \ 0)]\n      [(char=? (first brackets) #\\<) (helper (rest brackets) (+ count\
    \ 1))]\n      [(char=? (first brackets) #\\>) (and (not (zero? count)) (helper\
    \ (rest brackets) (- count 1)))]))\n  (helper brackets 0))\n", "  (define (helper\
    \ brackets count)\n    (cond\n      [(empty? brackets) (= count 0)]\n      [(string=?\
    \ (first brackets) \"<\") (helper (rest brackets) (+ count 1))]\n      [(string=?\
    \ (first brackets) \">\") (and (not (= count 0)) (helper (rest brackets) (- count\
    \ 1)))]))\n  (helper brackets 0))\n", "  (define (helper brackets count)\n   \
    \ (cond\n      [(empty? brackets) (= count 0)]\n      [(char=? (first brackets)\
    \ #\\<) (helper (rest brackets) (+ count 1))]\n      [(char=? (first brackets)\
    \ #\\>) (and (not (= count 0)) (helper (rest brackets) (- count 1)))]))\n  (helper\
    \ brackets 0))\n", "  (define (helper brackets count)\n    (cond [(empty? brackets)\
    \ (= count 0)]\n          [(char=? (first brackets) #\\<) (helper (rest brackets)\
    \ (+ count 1))]\n          [(char=? (first brackets) #\\>) (and (> count 0) (helper\
    \ (rest brackets) (- count 1)))]))\n  (helper brackets 0))\n", "  (define (helper\
    \ brackets count)\n    (cond\n      [(empty? brackets) (= count 0)]\n      [(string=?\
    \ (first brackets) \"<\") (helper (rest brackets) (+ count 1))]\n      [(string=?\
    \ (first brackets) \">\") (and (not (zero? count)) (helper (rest brackets) (-\
    \ count 1)))]))\n  (helper brackets 0))\n", "  (define (helper brackets count)\n\
    \    (cond\n      [(empty? brackets) (= count 0)]\n      [(string=? (first brackets)\
    \ \"<\") (helper (rest brackets) (+ count 1))]\n      [(string=? (first brackets)\
    \ \">\") (and (not (= count 0)) (helper (rest brackets) (- count 1)))]))\n  (helper\
    \ brackets 0))\n", "  (cond\n    [(empty? brackets) #t]\n    [(equal? (first brackets)\
    \ \"<\")\n     (if (equal? (last brackets) \">\")\n         (correct_bracketing\
    \ (rest (butlast brackets)))\n         #f)]\n    [else #f]))\n", "  (define (helper\
    \ brackets count)\n    (cond\n      [(empty? brackets) (= count 0)]\n      [(string=?\
    \ (first brackets) \"<\") (helper (rest brackets) (+ count 1))]\n      [(string=?\
    \ (first brackets) \">\") (helper (rest brackets) (- count 1))]))\n  (helper brackets\
    \ 0))\n", "  (cond\n    [(empty? brackets) #t]\n    [(and (equal? (first brackets)\
    \ \"<\") (equal? (last brackets) \">\")) (correct_bracketing (rest (butlast brackets)))]\n\
    \    [else #f]))\n", "  (define (helper brackets count)\n    (cond\n      [(empty?\
    \ brackets) (= count 0)]\n      [(first brackets) (helper (rest brackets) (+ count\
    \ 1))]\n      [else (and (not (zero? count)) (helper (rest brackets) (- count\
    \ 1)))]))\n  (helper brackets 0))\n", "  (cond\n    [(empty? brackets) true]\n\
    \    [(empty? (rest brackets)) false]\n    [(string=? (first brackets) \"<\")\n\
    \     (correct_bracketing (rest brackets))]\n    [(string=? (first brackets) \"\
    >\")\n     (correct_bracketing (rest (rest brackets)))]))\n", "  (cond\n    [(empty?\
    \ brackets) #t]\n    [(string=? (first brackets) \"<\")\n     (correct_bracketing\
    \ (rest brackets))]\n    [(string=? (first brackets) \">\")\n     (if (empty?\
    \ (rest brackets))\n         #f\n         (correct_bracketing (rest brackets)))]))\n",
  "  (let loop ([brackets brackets] [count 0])\n    (cond [(empty? brackets) (= count\
    \ 0)]\n          [(string=? (first brackets) \"<\")\n           (loop (rest brackets)\
    \ (+ count 1))]\n          [(string=? (first brackets) \">\")\n           (loop\
    \ (rest brackets) (- count 1))]\n          [else (error \"invalid character\"\
    )])))\n", "  (define (helper brackets count)\n    (cond\n      [(empty? brackets)\
    \ (= count 0)]\n      [(string=? (first brackets) \"<\") (helper (rest brackets)\
    \ (+ count 1))]\n      [(string=? (first brackets) \">\") (and (not (= count 0))\
    \ (helper (rest brackets) (- count 1)))]))\n  (helper brackets 0))\n", "  (cond\n\
    \    [(empty? brackets) #t]\n    [(empty? (rest brackets)) #f]\n    [(equal? (first\
    \ brackets) \"<\")\n     (and (equal? (first (rest brackets)) \">\")\n       \
    \   (correct_bracketing (rest (rest brackets))))]\n    [else #f]))\n", "  (define\
    \ (helper brackets count)\n    (cond\n      [(empty? brackets) (= count 0)]\n\
    \      [(string=? (first brackets) \"<\") (helper (rest brackets) (+ count 1))]\n\
    \      [(string=? (first brackets) \">\") (and (not (= count 0)) (helper (rest\
    \ brackets) (- count 1)))]))\n  (helper brackets 0))\n", "  (define (helper brackets\
    \ count)\n    (cond ((empty? brackets) (= count 0))\n          ((char=? (first\
    \ brackets) #\\<) (helper (rest brackets) (+ count 1)))\n          ((char=? (first\
    \ brackets) #\\>) (and (not (= count 0)) (helper (rest brackets) (- count 1))))))\n\
    \  (helper brackets 0))\n", "  (define (helper brackets count)\n    (cond\n  \
    \    [(empty? brackets) (= count 0)]\n      [(char=? (first brackets) #\\<) (helper\
    \ (rest brackets) (+ count 1))]\n      [(char=? (first brackets) #\\>) (and (not\
    \ (= count 0)) (helper (rest brackets) (- count 1)))]))\n  (helper brackets 0))\n",
  "  (cond\n    [(empty? brackets) #t]\n    [(string=? (first brackets) \"<\")\n \
    \    (if (string=? (last brackets) \">\")\n         (correct_bracketing (substring\
    \ brackets 1 (- (string-length brackets) 1)))\n         #f)]\n    [else #f]))\n",
  "  (define (helper brackets count)\n    (cond\n      [(empty? brackets) (= count\
    \ 0)]\n      [(string=? (first brackets) \"<\") (helper (rest brackets) (+ count\
    \ 1))]\n      [(string=? (first brackets) \">\") (and (not (= count 0)) (helper\
    \ (rest brackets) (- count 1)))]))\n  (helper brackets 0))\n", "  (cond\n    [(empty?\
    \ brackets) #t]\n    [(empty? (rest brackets)) #f]\n    [(equal? (first brackets)\
    \ \"<\")\n     (and (equal? (first (rest brackets)) \">\")\n          (correct_bracketing\
    \ (rest (rest brackets))))]\n    [else #f]))\n", "  (define (helper brackets count)\n\
    \    (cond\n      [(empty? brackets) (zero? count)]\n      [(char=? (first brackets)\
    \ #\\<) (helper (rest brackets) (+ count 1))]\n      [(char=? (first brackets)\
    \ #\\>) (and (positive? count) (helper (rest brackets) (- count 1)))]\n      [else\
    \ (error \"invalid character\")]))\n  (helper brackets 0))\n", "  (define (helper\
    \ brackets count)\n    (cond\n      [(empty? brackets) (= count 0)]\n      [(string=?\
    \ (first brackets) \"<\") (helper (rest brackets) (+ count 1))]\n      [(string=?\
    \ (first brackets) \">\") (and (not (= count 0)) (helper (rest brackets) (- count\
    \ 1)))]))\n  (helper brackets 0))\n", "  (cond\n    [(empty? brackets) true]\n\
    \    [(empty? (rest brackets)) false]\n    [(equal? (first brackets) \"<\")\n\
    \     (if (equal? (first (rest brackets)) \">\")\n         (correct_bracketing\
    \ (rest (rest brackets)))\n         (correct_bracketing (rest brackets)))]\n \
    \   [(equal? (first brackets) \">\")\n     (if (equal? (first (rest brackets))\
    \ \"<\")\n         (correct_bracketing (rest (rest brackets)))\n         (correct_bracketing\
    \ (rest brackets)))]))\n", "  (define (helper brackets count)\n    (cond\n   \
    \   [(empty? brackets) (= count 0)]\n      [(string=? (first brackets) \"<\")\
    \ (helper (rest brackets) (+ count 1))]\n      [(string=? (first brackets) \"\
    >\") (and (> count 0) (helper (rest brackets) (- count 1)))]))\n  (helper brackets\
    \ 0))\n", "  (define (helper brackets count)\n    (cond\n      [(empty? brackets)\
    \ (= count 0)]\n      [(string=? (first brackets) \"<\") (helper (rest brackets)\
    \ (+ count 1))]\n      [(string=? (first brackets) \">\") (and (not (= count 0))\
    \ (helper (rest brackets) (- count 1)))]))\n  (helper brackets 0))\n", "  (if\
    \ (empty? brackets)\n      #t\n      (if (equal? (first brackets) \"<\")\n   \
    \       (if (correct_bracketing (rest brackets))\n              (if (equal? (first\
    \ (rest brackets)) \">\")\n                  (correct_bracketing (rest (rest brackets)))\n\
    \                  #f)\n              #f)\n          #f)))\n", "  (define (helper\
    \ brackets count)\n    (cond\n      [(empty? brackets) (= count 0)]\n      [(string=?\
    \ (first brackets) \"<\") (helper (rest brackets) (+ count 1))]\n      [(string=?\
    \ (first brackets) \">\") (and (not (= count 0)) (helper (rest brackets) (- count\
    \ 1)))]))\n  (helper brackets 0))\n", "  (define (helper brackets count)\n   \
    \ (cond\n      [(empty? brackets) (= count 0)]\n      [(string=? (first brackets)\
    \ \"<\") (helper (rest brackets) (+ count 1))]\n      [(string=? (first brackets)\
    \ \">\") (and (not (zero? count)) (helper (rest brackets) (- count 1)))]))\n \
    \ (helper brackets 0))\n", "  (define (helper brackets count)\n    (cond\n   \
    \   [(empty? brackets) (= count 0)]\n      [(string=? (first brackets) \"<\")\
    \ (helper (rest brackets) (+ count 1))]\n      [(string=? (first brackets) \"\
    >\") (and (not (zero? count)) (helper (rest brackets) (- count 1)))]))\n  (helper\
    \ brackets 0))\n", "  (define (helper brackets count)\n    (cond\n      [(empty?\
    \ brackets) (= count 0)]\n      [(equal? (first brackets) \"<\") (helper (rest\
    \ brackets) (+ count 1))]\n      [(equal? (first brackets) \">\") (and (not (zero?\
    \ count)) (helper (rest brackets) (- count 1)))]))\n  (helper brackets 0))\n",
  "  (cond\n    [(empty? brackets) true]\n    [(empty? (rest brackets)) false]\n \
    \   [(equal? (first brackets) \"<\")\n     (if (equal? (first (rest brackets))\
    \ \">\")\n         (correct_bracketing (rest (rest brackets)))\n         (correct_bracketing\
    \ (rest brackets)))]\n    [(equal? (first brackets) \">\")\n     (if (equal? (first\
    \ (rest brackets)) \"<\")\n         (correct_bracketing (rest (rest brackets)))\n\
    \         (correct_bracketing (rest brackets)))]))\n", "  (define (helper brackets\
    \ count)\n    (cond\n      [(empty? brackets) (= count 0)]\n      [(char=? (first\
    \ brackets) #\\<) (helper (rest brackets) (+ count 1))]\n      [(char=? (first\
    \ brackets) #\\>) (and (not (zero? count)) (helper (rest brackets) (- count 1)))]))\n\
    \  (helper brackets 0))\n", "  (cond\n    [(empty? brackets) #t]\n    [(string=?\
    \ (first brackets) \"<\")\n     (if (string=? (last brackets) \">\")\n       \
    \  (correct_bracketing (substring brackets 1 (- (string-length brackets) 1)))\n\
    \         #f)]\n    [else #f]))\n", "  (define (helper brackets count)\n    (cond\n\
    \      [(empty? brackets) (= count 0)]\n      [(char=? (first brackets) #\\<)\
    \ (helper (rest brackets) (+ count 1))]\n      [(char=? (first brackets) #\\>)\
    \ (and (not (zero? count)) (helper (rest brackets) (- count 1)))]))\n  (helper\
    \ brackets 0))\n", "  (define (helper brackets count)\n    (cond\n      [(empty?\
    \ brackets) (= count 0)]\n      [(string=? (first brackets) \"<\") (helper (rest\
    \ brackets) (+ count 1))]\n      [(string=? (first brackets) \">\") (and (not\
    \ (= count 0)) (helper (rest brackets) (- count 1)))]))\n  (helper brackets 0))\n",
  "  (define (helper brackets count)\n    (cond\n      [(empty? brackets) (= count\
    \ 0)]\n      [(char=? (first brackets) #\\<) (helper (rest brackets) (+ count\
    \ 1))]\n      [(char=? (first brackets) #\\>) (and (not (= count 0)) (helper (rest\
    \ brackets) (- count 1)))]))\n  (helper brackets 0))\n", "  (define (helper brackets\
    \ count)\n    (cond\n      [(empty? brackets) (= count 0)]\n      [(char=? (first\
    \ brackets) #\\<) (helper (rest brackets) (+ count 1))]\n      [(char=? (first\
    \ brackets) #\\>) (and (not (= count 0)) (helper (rest brackets) (- count 1)))]))\n\
    \  (helper brackets 0))\n", "  (define (helper brackets count)\n    (cond\n  \
    \    [(empty? brackets) (zero? count)]\n      [(char=? (first brackets) #\\<)\
    \ (helper (rest brackets) (+ count 1))]\n      [(char=? (first brackets) #\\>)\
    \ (and (positive? count) (helper (rest brackets) (- count 1)))]\n      [else (helper\
    \ (rest brackets) count)]))\n  (helper brackets 0))\n", "  (define (helper brackets\
    \ count)\n    (cond\n      [(empty? brackets) (= count 0)]\n      [(= (first brackets)\
    \ #\\<) (helper (rest brackets) (+ count 1))]\n      [(= (first brackets) #\\\
    >) (and (not (zero? count)) (helper (rest brackets) (- count 1)))]))\n  (helper\
    \ (string->list brackets) 0))\n", "  (let loop ([brackets brackets] [count 0])\n\
    \    (cond [(empty? brackets) (= count 0)]\n          [(char=? (first brackets)\
    \ #\\<)\n           (loop (rest brackets) (+ count 1))]\n          [(char=? (first\
    \ brackets) #\\>)\n           (and (not (zero? count))\n                (loop\
    \ (rest brackets) (- count 1)))]\n          [else false])))\n", "  (define (helper\
    \ brackets count)\n    (cond\n      [(empty? brackets) (= count 0)]\n      [(string=?\
    \ (first brackets) \"<\") (helper (rest brackets) (+ count 1))]\n      [(string=?\
    \ (first brackets) \">\") (and (not (= count 0)) (helper (rest brackets) (- count\
    \ 1)))]))\n  (helper brackets 0))\n", "  (cond\n    [(empty? brackets) #t]\n \
    \   [(string=? (first brackets) \"<\")\n     (if (string=? (last brackets) \"\
    >\")\n         (correct_bracketing (substring brackets 1 (- (string-length brackets)\
    \ 1)))\n         #f)]\n    [else #f]))\n", "  (define (helper brackets count)\n\
    \    (cond\n      [(empty? brackets) (= count 0)]\n      [(char=? (first brackets)\
    \ #\\<) (helper (rest brackets) (+ count 1))]\n      [(char=? (first brackets)\
    \ #\\>) (and (not (zero? count)) (helper (rest brackets) (- count 1)))]))\n  (helper\
    \ brackets 0))\n", "  (define (helper brackets count)\n    (cond\n      [(empty?\
    \ brackets) (= count 0)]\n      [(string=? (first brackets) \"<\") (helper (rest\
    \ brackets) (+ count 1))]\n      [(string=? (first brackets) \">\") (and (not\
    \ (= count 0)) (helper (rest brackets) (- count 1)))]))\n  (helper brackets 0))\n",
  "  (cond\n    [(empty? brackets) true]\n    [(and (equal? (first brackets) \"<\"\
    ) (equal? (last brackets) \">\"))\n     (correct_bracketing (substring brackets\
    \ 1 (sub1 (string-length brackets))))]\n    [else false]))\n", "  (let loop ([brackets\
    \ brackets] [count 0])\n    (cond\n      [(empty? brackets) (= count 0)]\n   \
    \   [(string=? (first brackets) \"<\")\n       (loop (rest brackets) (+ count\
    \ 1))]\n      [(string=? (first brackets) \">\")\n       (loop (rest brackets)\
    \ (- count 1))]\n      [else (error \"not a bracket\")])))\n", "  (cond\n    [(empty?\
    \ brackets) true]\n    [(equal? (first brackets) \"<\")\n     (if (equal? (last\
    \ brackets) \">\")\n         (correct_bracketing (rest (butlast brackets)))\n\
    \         false)]\n    [else false]))\n", "  (define (helper brackets count)\n\
    \    (cond\n      [(empty? brackets) (= count 0)]\n      [(string=? (first brackets)\
    \ \"<\") (helper (rest brackets) (+ count 1))]\n      [(string=? (first brackets)\
    \ \">\") (and (not (zero? count)) (helper (rest brackets) (- count 1)))]))\n \
    \ (helper brackets 0))\n", "  (cond\n    [(empty? brackets) #t]\n    [(string=?\
    \ (first brackets) \"<\")\n     (if (string=? (last brackets) \">\")\n       \
    \  (correct_bracketing (substring brackets 1 (- (string-length brackets) 1)))\n\
    \         #f)]\n    [else #f]))\n", "  (define (helper brackets count)\n    (cond\n\
    \      [(empty? brackets) (= count 0)]\n      [(char=? (first brackets) #\\<)\
    \ (helper (rest brackets) (+ count 1))]\n      [(char=? (first brackets) #\\>)\
    \ (and (> count 0) (helper (rest brackets) (- count 1)))]))\n  (helper brackets\
    \ 0))\n", "  (cond\n    [(empty? brackets) #t]\n    [(empty? (rest brackets))\
    \ #f]\n    [(equal? (first brackets) \"<\")\n     (and (equal? (first (rest brackets))\
    \ \">\")\n          (correct_bracketing (rest (rest brackets))))]\n    [else #f]))\n",
  "  (cond\n    [(empty? brackets) #t]\n    [(empty? (rest brackets)) #f]\n    [(char=?\
    \ (first brackets) #\\<)\n     (and (char=? (first (rest brackets)) #\\>)\n  \
    \        (correct_bracketing (rest (rest brackets))))]\n    [else #f]))\n", " \
    \ (cond\n    [(empty? brackets) true]\n    [(empty? (rest brackets)) false]\n\
    \    [(string=? (first brackets) \"<\")\n     (correct_bracketing (rest brackets))]\n\
    \    [(string=? (first brackets) \">\")\n     (correct_bracketing (rest (rest\
    \ brackets)))]))\n", "  (define (helper brackets count)\n    (cond\n      [(empty?\
    \ brackets) (= count 0)]\n      [(string=? (first brackets) \"<\") (helper (rest\
    \ brackets) (+ count 1))]\n      [(string=? (first brackets) \">\") (and (not\
    \ (= count 0)) (helper (rest brackets) (- count 1)))]))\n  (helper brackets 0))\n",
  "  (cond\n    [(empty? brackets) #t]\n    [(empty? (rest brackets)) #f]\n    [(equal?\
    \ (first brackets) \"<\")\n     (and (correct_bracketing (rest brackets))\n  \
    \        (equal? (first (rest brackets)) \">\"))]\n    [else #f]))\n", "  (define\
    \ (helper brackets count)\n    (cond\n      [(empty? brackets) (= count 0)]\n\
    \      [(= (first brackets) #\\<) (helper (rest brackets) (+ count 1))]\n    \
    \  [(= (first brackets) #\\>) (and (not (zero? count)) (helper (rest brackets)\
    \ (- count 1)))]))\n  (helper (string->list brackets) 0))\n", "  (define (helper\
    \ brackets count)\n    (cond\n      [(empty? brackets) (= count 0)]\n      [(char=?\
    \ (first brackets) #\\<) (helper (rest brackets) (+ count 1))]\n      [(char=?\
    \ (first brackets) #\\>) (and (not (= count 0)) (helper (rest brackets) (- count\
    \ 1)))]))\n  (helper brackets 0))\n", "  (define (helper brackets count)\n   \
    \ (cond\n      [(empty? brackets) (= count 0)]\n      [(first brackets) (helper\
    \ (rest brackets) (+ count 1))]\n      [else (and (not (= count 0)) (helper (rest\
    \ brackets) (- count 1)))]))\n  (helper brackets 0))\n", "  (cond\n    [(empty?\
    \ brackets) true]\n    [(empty? (rest brackets)) false]\n    [(equal? (first brackets)\
    \ \"<\")\n     (if (equal? (first (rest brackets)) \">\")\n         (correct_bracketing\
    \ (rest (rest brackets)))\n         (correct_bracketing (rest brackets)))]\n \
    \   [(equal? (first brackets) \">\")\n     (if (equal? (first (rest brackets))\
    \ \"<\")\n         (correct_bracketing (rest (rest brackets)))\n         (correct_bracketing\
    \ (rest brackets)))]))\n", "  (let loop ([brackets brackets] [count 0])\n    (cond\n\
    \      [(empty? brackets) (= count 0)]\n      [(string=? (first brackets) \"<\"\
    )\n       (loop (rest brackets) (+ count 1))]\n      [(string=? (first brackets)\
    \ \">\")\n       (and (> count 0) (loop (rest brackets) (- count 1)))])))\n",
  "  (define (helper brackets count)\n    (cond\n      [(empty? brackets) (= count\
    \ 0)]\n      [(string=? (first brackets) \"<\") (helper (rest brackets) (+ count\
    \ 1))]\n      [(string=? (first brackets) \">\") (and (> count 0) (helper (rest\
    \ brackets) (- count 1)))]))\n  (helper brackets 0))\n", "  (define (helper brackets\
    \ count)\n    (cond [(empty? brackets) (= count 0)]\n          [(char=? (first\
    \ brackets) #\\<) (helper (rest brackets) (+ count 1))]\n          [(char=? (first\
    \ brackets) #\\>) (and (not (= count 0)) (helper (rest brackets) (- count 1)))]))\n\
    \  (helper brackets 0))\n", "  (cond\n    [(empty? brackets) #t]\n    [(empty?\
    \ (rest brackets)) #f]\n    [(string=? (first brackets) \"<\")\n     (if (string=?\
    \ (first (rest brackets)) \">\")\n         (correct_bracketing (rest (rest brackets)))\n\
    \         (correct_bracketing (rest brackets)))]\n    [else (correct_bracketing\
    \ (rest brackets))]))\n", "  (cond\n    [(empty? brackets) #t]\n    [(string=?\
    \ (first brackets) \"<\")\n     (cond\n       [(string=? (last brackets) \">\"\
    )\n        (correct_bracketing (substring brackets 1 (- (string-length brackets)\
    \ 1)))]\n       [else #f])]\n    [else #f]))\n", "  (define (helper brackets count)\n\
    \    (cond [(empty? brackets) (= count 0)]\n          [(char=? (first brackets)\
    \ #\\<) (helper (rest brackets) (+ count 1))]\n          [(char=? (first brackets)\
    \ #\\>) (and (not (= count 0)) (helper (rest brackets) (- count 1)))]))\n  (helper\
    \ brackets 0))\n", "  (cond\n    [(empty? brackets) #t]\n    [(empty? (rest brackets))\
    \ #f]\n    [(equal? (first brackets) \"<\")\n     (if (equal? (first (rest brackets))\
    \ \">\")\n         (correct_bracketing (rest (rest brackets)))\n         (correct_bracketing\
    \ (rest brackets)))]\n    [(equal? (first brackets) \">\")\n     (if (equal? (first\
    \ (rest brackets)) \"<\")\n         (correct_bracketing (rest (rest brackets)))\n\
    \         (correct_bracketing (rest brackets)))]))\n", "  (define (helper brackets\
    \ count)\n    (cond\n      [(empty? brackets) (= count 0)]\n      [(string=? (first\
    \ brackets) \"<\") (helper (rest brackets) (+ count 1))]\n      [(string=? (first\
    \ brackets) \">\") (and (not (zero? count)) (helper (rest brackets) (- count 1)))]))\n\
    \  (helper brackets 0))\n", "  (cond\n    [(empty? brackets) #t]\n    [(string=?\
    \ (first brackets) \"<\")\n     (if (string=? (last brackets) \">\")\n       \
    \  (correct_bracketing (substring brackets 1 (- (string-length brackets) 1)))\n\
    \         #f)]\n    [else #f]))\n", "  (define (helper brackets count)\n    (cond\
    \ ((empty? brackets) (= count 0))\n          ((char=? (first brackets) #\\<) (helper\
    \ (rest brackets) (+ count 1)))\n          ((char=? (first brackets) #\\>) (and\
    \ (not (zero? count)) (helper (rest brackets) (- count 1))))))\n  (helper brackets\
    \ 0))\n", "  (define (helper brackets count)\n    (cond\n      [(empty? brackets)\
    \ (= count 0)]\n      [(string=? (first brackets) \"<\") (helper (rest brackets)\
    \ (+ count 1))]\n      [(string=? (first brackets) \">\") (and (> count 0) (helper\
    \ (rest brackets) (- count 1)))]))\n  (helper brackets 0))\n", "  (cond\n    [(empty?\
    \ brackets) #t]\n    [(equal? (first brackets) #\\<)\n     (if (equal? (last brackets)\
    \ #\\>)\n         (correct_bracketing (rest (butlast brackets)))\n         #f)]\n\
    \    [else #f]))\n", "  (cond\n    [(empty? brackets) #t]\n    [(string=? (substring\
    \ brackets 0 1) \"<\")\n     (correct_bracketing (substring brackets 1))]\n  \
    \  [(string=? (substring brackets 0 1) \">\")\n     (correct_bracketing (substring\
    \ brackets 1))]\n    [else #f]))\n", "  (cond\n    [(empty? brackets) #t]\n  \
    \  [(and (equal? (first brackets) \"<\") (equal? (last brackets) \">\")) (correct_bracketing\
    \ (rest (butlast brackets)))]\n    [else #f]))\n", "  (define (helper brackets\
    \ count)\n    (cond ((null? brackets) (= count 0))\n          ((= (string-ref\
    \ brackets 0) #\\<) (helper (substring brackets 1) (+ count 1)))\n          ((=\
    \ (string-ref brackets 0) #\\>) (and (> count 0) (helper (substring brackets 1)\
    \ (- count 1))))))\n  (helper brackets 0))\n", "  (define (helper brackets count)\n\
    \    (cond\n      [(empty? brackets) (= count 0)]\n      [(= (first brackets)\
    \ #\\<) (helper (rest brackets) (+ count 1))]\n      [(= (first brackets) #\\\
    >) (and (> count 0) (helper (rest brackets) (- count 1)))]))\n  (helper (string->list\
    \ brackets) 0))\n", "  (define (helper brackets count)\n    (cond\n      [(empty?\
    \ brackets) (= count 0)]\n      [(string=? (first brackets) \"<\") (helper (rest\
    \ brackets) (+ count 1))]\n      [(string=? (first brackets) \">\") (and (not\
    \ (= count 0)) (helper (rest brackets) (- count 1)))]))\n  (helper brackets 0))\n",
  "  (define (helper brackets count)\n    (cond\n      [(empty? brackets) (= count\
    \ 0)]\n      [(= (first brackets) #\\<) (helper (rest brackets) (+ count 1))]\n\
    \      [(= (first brackets) #\\>) (and (not (zero? count)) (helper (rest brackets)\
    \ (- count 1)))]))\n  (helper (string->list brackets) 0))\n", "  (define (helper\
    \ brackets count)\n    (cond\n      [(empty? brackets) (= count 0)]\n      [(string=?\
    \ (first brackets) \"<\") (helper (rest brackets) (+ count 1))]\n      [(string=?\
    \ (first brackets) \">\") (and (not (= count 0)) (helper (rest brackets) (- count\
    \ 1)))]))\n  (helper brackets 0))\n", "  (cond\n    [(empty? brackets) true]\n\
    \    [(empty? (rest brackets)) false]\n    [(equal? (first brackets) \"<\")\n\
    \     (and (equal? (first (rest brackets)) \">\")\n          (correct_bracketing\
    \ (rest (rest brackets))))]\n    [else false]))\n", "  (define (helper brackets\
    \ count)\n    (cond\n      [(empty? brackets) (= count 0)]\n      [(char=? (first\
    \ brackets) #\\<) (helper (rest brackets) (+ count 1))]\n      [(char=? (first\
    \ brackets) #\\>) (and (not (zero? count)) (helper (rest brackets) (- count 1)))]))\n\
    \  (helper brackets 0))\n", "  (define (helper brackets count)\n    (cond\n  \
    \    [(empty? brackets) (= count 0)]\n      [(char=? (first brackets) #\\<) (helper\
    \ (rest brackets) (+ count 1))]\n      [(char=? (first brackets) #\\>) (and (>\
    \ count 0) (helper (rest brackets) (- count 1)))]))\n  (helper brackets 0))\n",
  "  (define (helper brackets count)\n    (cond\n      [(empty? brackets) (= count\
    \ 0)]\n      [(first brackets) (helper (rest brackets) (+ count 1))]\n      [else\
    \ (and (> count 0) (helper (rest brackets) (- count 1)))]))\n  (helper brackets\
    \ 0))\n", "  (define (helper brackets count)\n    (cond\n      [(empty? brackets)\
    \ (= count 0)]\n      [(char=? (first brackets) #\\<) (helper (rest brackets)\
    \ (+ count 1))]\n      [(char=? (first brackets) #\\>) (and (not (= count 0))\
    \ (helper (rest brackets) (- count 1)))]))\n  (helper brackets 0))\n", "  (define\
    \ (helper brackets count)\n    (cond\n      [(empty? brackets) (= count 0)]\n\
    \      [(string=? (first brackets) \"<\") (helper (rest brackets) (+ count 1))]\n\
    \      [(string=? (first brackets) \">\") (and (not (zero? count)) (helper (rest\
    \ brackets) (- count 1)))]))\n  (helper brackets 0))\n", "  (cond\n    [(empty?\
    \ brackets) #t]\n    [(empty? (rest brackets)) #f]\n    [(equal? (first brackets)\
    \ \"<\")\n     (and (correct_bracketing (rest brackets))\n          (equal? (first\
    \ (rest brackets)) \">\"))]\n    [else (correct_bracketing (rest brackets))]))\n",
  "  (define (helper brackets count)\n    (cond\n      [(empty? brackets) (zero? count)]\n\
    \      [(char=? (first brackets) #\\<) (helper (rest brackets) (+ count 1))]\n\
    \      [(char=? (first brackets) #\\>) (and (positive? count) (helper (rest brackets)\
    \ (- count 1)))]\n      [else (helper (rest brackets) count)]))\n  (helper brackets\
    \ 0))\n", "  (define (helper brackets count)\n    (cond\n      [(empty? brackets)\
    \ (= count 0)]\n      [(string=? (first brackets) \"<\") (helper (rest brackets)\
    \ (+ count 1))]\n      [(string=? (first brackets) \">\") (and (not (zero? count))\
    \ (helper (rest brackets) (- count 1)))]))\n  (helper brackets 0))\n", "  (define\
    \ (helper brackets count)\n    (cond\n      [(empty? brackets) (= count 0)]\n\
    \      [(char=? (first brackets) #\\<) (helper (rest brackets) (+ count 1))]\n\
    \      [(char=? (first brackets) #\\>) (and (not (= count 0)) (helper (rest brackets)\
    \ (- count 1)))]))\n  (helper brackets 0))\n", "  (define (helper brackets count)\n\
    \    (cond\n      [(empty? brackets) (= count 0)]\n      [(char=? (first brackets)\
    \ #\\<) (helper (rest brackets) (+ count 1))]\n      [(char=? (first brackets)\
    \ #\\>) (and (> count 0) (helper (rest brackets) (- count 1)))]))\n  (helper brackets\
    \ 0))\n", "  (cond\n    [(empty? brackets) #t]\n    [(empty? (rest brackets))\
    \ #f]\n    [(equal? (first brackets) \"<\")\n     (correct_bracketing (rest brackets))]\n\
    \    [(equal? (first brackets) \">\")\n     (correct_bracketing (rest (rest brackets)))]))\n",
  "  (cond\n    [(empty? brackets) #t]\n    [(empty? (rest brackets)) #f]\n    [(and\
    \ (equal? (first brackets) \"<\")\n          (equal? (first (rest brackets)) \"\
    >\"))\n     (correct_bracketing (rest (rest brackets)))]\n    [else (correct_bracketing\
    \ (rest brackets))]))\n", "  (cond\n    [(empty? brackets) #t]\n    [(string=?\
    \ (first brackets) \"<\")\n     (if (string=? (last brackets) \">\")\n       \
    \  (correct_bracketing (substring brackets 1 (- (string-length brackets) 1)))\n\
    \         #f)]\n    [else #f]))\n", "  (let loop ([brackets brackets] [count 0])\n\
    \    (cond\n      [(empty? brackets) (= count 0)]\n      [(char=? (first brackets)\
    \ #\\<) (loop (rest brackets) (+ count 1))]\n      [(char=? (first brackets) #\\\
    >) (loop (rest brackets) (- count 1))]\n      [else (loop (rest brackets) count)])))\n",
  "  (cond\n    [(empty? brackets) #t]\n    [(string=? (first brackets) \"<\")\n \
    \    (if (string=? (last brackets) \">\")\n         (correct_bracketing (substring\
    \ brackets 1 (- (string-length brackets) 1)))\n         #f)]\n    [else #f]))\n",
  "  (define (helper brackets count)\n    (cond\n      [(empty? brackets) (= count\
    \ 0)]\n      [(= (first brackets) #\\<) (helper (rest brackets) (+ count 1))]\n\
    \      [(= (first brackets) #\\>) (and (not (zero? count)) (helper (rest brackets)\
    \ (- count 1)))]))\n  (helper (string->list brackets) 0))\n", "  (cond\n    [(empty?\
    \ brackets) #t]\n    [(string=? (first brackets) \"<\")\n     (cond\n       [(string=?\
    \ (last brackets) \">\")\n        (correct_bracketing (substring brackets 1 (-\
    \ (string-length brackets) 1)))]\n       [else #f])]\n    [else #f]))\n", "  (define\
    \ (helper brackets count)\n    (cond\n      [(empty? brackets) (= count 0)]\n\
    \      [(char=? (first brackets) #\\<) (helper (rest brackets) (+ count 1))]\n\
    \      [(char=? (first brackets) #\\>) (and (not (zero? count)) (helper (rest\
    \ brackets) (- count 1)))]))\n  (helper brackets 0))\n", "  (define (helper brackets\
    \ count)\n    (cond\n      [(empty? brackets) (= count 0)]\n      [(string=? (first\
    \ brackets) \"<\") (helper (rest brackets) (+ count 1))]\n      [(string=? (first\
    \ brackets) \">\") (and (not (zero? count)) (helper (rest brackets) (- count 1)))]))\n\
    \  (helper brackets 0))\n", "  (define (helper brackets count)\n    (cond\n  \
    \    [(empty? brackets) (= count 0)]\n      [(char=? (first brackets) #\\<) (helper\
    \ (rest brackets) (+ count 1))]\n      [(char=? (first brackets) #\\>) (and (not\
    \ (= count 0)) (helper (rest brackets) (- count 1)))]))\n  (helper brackets 0))\n",
  "  (define (helper brackets count)\n    (cond\n      [(empty? brackets) (= count\
    \ 0)]\n      [(char=? (first brackets) #\\<) (helper (rest brackets) (+ count\
    \ 1))]\n      [(char=? (first brackets) #\\>) (and (not (zero? count)) (helper\
    \ (rest brackets) (- count 1)))]))\n  (helper brackets 0))\n", "  (define (helper\
    \ brackets count)\n    (cond\n      [(empty? brackets) (= count 0)]\n      [(first\
    \ brackets) (helper (rest brackets) (+ count 1))]\n      [else (and (not (zero?\
    \ count)) (helper (rest brackets) (- count 1)))]))\n  (helper brackets 0))\n",
  "  (define (helper brackets count)\n    (cond\n      [(empty? brackets) (= count\
    \ 0)]\n      [(string=? (first brackets) \"<\") (helper (rest brackets) (+ count\
    \ 1))]\n      [(string=? (first brackets) \">\") (and (> count 0) (helper (rest\
    \ brackets) (- count 1)))]))\n  (helper brackets 0))\n", "  (define (helper brackets\
    \ count)\n    (cond\n      [(empty? brackets) (= count 0)]\n      [(string=? (first\
    \ brackets) \"<\") (helper (rest brackets) (+ count 1))]\n      [(string=? (first\
    \ brackets) \">\") (and (not (= count 0)) (helper (rest brackets) (- count 1)))]))\n\
    \  (helper brackets 0))\n", "  (define (helper brackets count)\n    (cond\n  \
    \    [(empty? brackets) (= count 0)]\n      [(string=? (first brackets) \"<\"\
    ) (helper (rest brackets) (+ count 1))]\n      [(string=? (first brackets) \"\
    >\") (and (not (= count 0)) (helper (rest brackets) (- count 1)))]))\n  (helper\
    \ brackets 0))\n", "  (define (helper brackets count)\n    (cond\n      [(empty?\
    \ brackets) (= count 0)]\n      [(string=? (first brackets) \"<\") (helper (rest\
    \ brackets) (+ count 1))]\n      [(string=? (first brackets) \">\") (and (not\
    \ (= count 0)) (helper (rest brackets) (- count 1)))]))\n  (helper brackets 0))\n",
  "  (cond\n    [(empty? brackets) #t]\n    [(and (equal? (first brackets) \"<\")\
    \ (equal? (last brackets) \">\"))\n     (correct_bracketing (rest (butlast brackets)))]\n\
    \    [else #f]))\n", "  (cond\n    [(empty? brackets) #t]\n    [(string=? (first\
    \ brackets) \"<\")\n     (if (string=? (last brackets) \">\")\n         (correct_bracketing\
    \ (substring brackets 1 (- (string-length brackets) 1)))\n         #f)]\n    [else\
    \ #f]))\n", "  (cond\n    [(empty? brackets) #t]\n    [(and (string=? (first brackets)\
    \ \"<\")\n          (string=? (last brackets) \">\"))\n     (correct_bracketing\
    \ (substring brackets 1 (- (string-length brackets) 1)))]\n    [else #f]))\n",
  "  (define (helper brackets count)\n    (cond\n      [(empty? brackets) (= count\
    \ 0)]\n      [(char=? (first brackets) #\\<) (helper (rest brackets) (+ count\
    \ 1))]\n      [(char=? (first brackets) #\\>) (and (> count 0) (helper (rest brackets)\
    \ (- count 1)))]))\n  (helper brackets 0))\n", "  (define (helper brackets count)\n\
    \    (cond\n      [(empty? brackets) (= count 0)]\n      [(string=? (first brackets)\
    \ \"<\") (helper (rest brackets) (+ count 1))]\n      [(string=? (first brackets)\
    \ \">\") (and (not (zero? count)) (helper (rest brackets) (- count 1)))]))\n \
    \ (helper brackets 0))\n", "  (define (helper brackets count)\n    (cond\n   \
    \   [(empty? brackets) (= count 0)]\n      [(string=? (first brackets) \"<\")\
    \ (helper (rest brackets) (+ count 1))]\n      [(string=? (first brackets) \"\
    >\") (and (> count 0) (helper (rest brackets) (- count 1)))]))\n  (helper brackets\
    \ 0))\n", "  (define (helper brackets count)\n    (cond\n      [(empty? brackets)\
    \ (= count 0)]\n      [(string=? (first brackets) \"<\") (helper (rest brackets)\
    \ (+ count 1))]\n      [(string=? (first brackets) \">\") (and (not (zero? count))\
    \ (helper (rest brackets) (- count 1)))]))\n  (helper brackets 0))\n", "  (define\
    \ (helper brackets count)\n    (cond\n      [(empty? brackets) (= count 0)]\n\
    \      [(char=? (first brackets) #\\<) (helper (rest brackets) (+ count 1))]\n\
    \      [(char=? (first brackets) #\\>) (and (not (= count 0)) (helper (rest brackets)\
    \ (- count 1)))]))\n  (helper brackets 0))\n", "  (define (helper brackets count)\n\
    \    (cond\n      [(empty? brackets) (= count 0)]\n      [(char=? (first brackets)\
    \ #\\<) (helper (rest brackets) (+ count 1))]\n      [(char=? (first brackets)\
    \ #\\>) (and (not (= count 0)) (helper (rest brackets) (- count 1)))]))\n  (helper\
    \ brackets 0))\n", "  (cond\n    [(empty? brackets)\n     #t]\n    [(equal? (first\
    \ brackets) \"<\")\n     (correct_bracketing (rest brackets))]\n    [(equal? (first\
    \ brackets) \">\")\n     (correct_bracketing (rest brackets))]))\n", "  (cond\n\
    \    [(empty? brackets) #t]\n    [(string=? (first brackets) \"<\")\n     (cond\n\
    \       [(empty? (rest brackets)) #f]\n       [(string=? (first (rest brackets))\
    \ \">\")\n        (correct_bracketing (rest (rest brackets)))]\n       [else #f])]\n\
    \    [else #f]))\n", "  (let loop ([brackets brackets] [count 0])\n    (cond [(empty?\
    \ brackets) (= count 0)]\n          [(char=? (first brackets) #\\<) (loop (rest\
    \ brackets) (+ count 1))]\n          [(char=? (first brackets) #\\>) (loop (rest\
    \ brackets) (- count 1))]\n          [else (error \"invalid character\")])))\n",
  "  (define (helper brackets count)\n    (cond\n      [(empty? brackets) (= count\
    \ 0)]\n      [(string=? (first brackets) \"<\") (helper (rest brackets) (+ count\
    \ 1))]\n      [(string=? (first brackets) \">\") (and (> count 0) (helper (rest\
    \ brackets) (- count 1)))]))\n  (helper brackets 0))\n", "  (define (helper brackets\
    \ count)\n    (cond\n      [(empty? brackets) (= count 0)]\n      [(string=? (first\
    \ brackets) \"<\") (helper (rest brackets) (+ count 1))]\n      [(string=? (first\
    \ brackets) \">\") (and (not (= count 0)) (helper (rest brackets) (- count 1)))]))\n\
    \  (helper brackets 0))\n", "  (cond\n    [(empty? brackets) #t]\n    [(empty?\
    \ (rest brackets)) #f]\n    [(equal? (first brackets) \"<\")\n     (and (equal?\
    \ (first (rest brackets)) \">\")\n          (correct_bracketing (rest (rest brackets))))]\n\
    \    [else #f]))\n", "  (cond\n    [(empty? brackets) #t]\n    [(empty? (rest\
    \ brackets)) #f]\n    [(equal? (first brackets) \"<\")\n     (and (correct_bracketing\
    \ (rest brackets))\n          (equal? (first (rest brackets)) \">\"))]\n    [else\
    \ #f]))\n", "  (define (helper brackets count)\n    (cond\n      [(empty? brackets)\
    \ (zero? count)]\n      [(char=? (first brackets) #\\<) (helper (rest brackets)\
    \ (+ count 1))]\n      [(char=? (first brackets) #\\>) (and (not (zero? count))\
    \ (helper (rest brackets) (- count 1)))]\n      [else (error \"invalid character\"\
    )]))\n  (helper brackets 0))\n", "  (define (helper brackets count)\n    (cond\n\
    \      [(empty? brackets) (= count 0)]\n      [(char=? (first brackets) #\\<)\
    \ (helper (rest brackets) (+ count 1))]\n      [(char=? (first brackets) #\\>)\
    \ (and (> count 0) (helper (rest brackets) (- count 1)))]))\n  (helper brackets\
    \ 0))\n", "  (define (correct_bracketing_iter brackets count)\n    (cond\n   \
    \   [(empty? brackets) (= count 0)]\n      [(string=? (first brackets) \"<\")\
    \ (correct_bracketing_iter (rest brackets) (+ count 1))]\n      [(string=? (first\
    \ brackets) \">\") (correct_bracketing_iter (rest brackets) (- count 1))]\n  \
    \    [else #f]))\n  (correct_bracketing_iter brackets 0))\n", "  (cond\n    [(empty?\
    \ brackets) #t]\n    [(empty? (rest brackets)) #f]\n    [(equal? (first brackets)\
    \ \"<\")\n     (and (equal? (first (rest brackets)) \">\")\n          (correct_bracketing\
    \ (rest (rest brackets))))]\n    [else #f]))\n", "  (define (helper brackets count)\n\
    \    (cond\n      [(empty? brackets) (= count 0)]\n      [(char=? (first brackets)\
    \ #\\<) (helper (rest brackets) (+ count 1))]\n      [(char=? (first brackets)\
    \ #\\>) (and (not (= count 0)) (helper (rest brackets) (- count 1)))]))\n  (helper\
    \ brackets 0))\n", "  (define (helper brackets count)\n    (cond\n      [(empty?\
    \ brackets) (= count 0)]\n      [(string=? (first brackets) \"<\") (helper (rest\
    \ brackets) (+ count 1))]\n      [(string=? (first brackets) \">\") (and (not\
    \ (= count 0)) (helper (rest brackets) (- count 1)))]))\n  (helper brackets 0))\n",
  "  (let loop ([brackets brackets] [count 0])\n    (cond\n      [(empty? brackets)\
    \ (= count 0)]\n      [(char=? (first brackets) #\\<) (loop (rest brackets) (+\
    \ count 1))]\n      [(char=? (first brackets) #\\>) (loop (rest brackets) (- count\
    \ 1))]\n      [else (error \"invalid character in brackets\")])))\n", "  (define\
    \ (helper brackets count)\n    (cond\n      [(empty? brackets) (= count 0)]\n\
    \      [(string=? (first brackets) \"<\") (helper (rest brackets) (+ count 1))]\n\
    \      [(string=? (first brackets) \">\") (and (not (zero? count)) (helper (rest\
    \ brackets) (- count 1)))]))\n  (helper brackets 0))\n", "  (define (helper brackets\
    \ count)\n    (cond\n      [(empty? brackets) (= count 0)]\n      [(string=? (first\
    \ brackets) \"<\") (helper (rest brackets) (+ count 1))]\n      [(string=? (first\
    \ brackets) \">\") (and (not (= count 0)) (helper (rest brackets) (- count 1)))]))\n\
    \  (helper brackets 0))\n", "  (define (helper brackets count)\n    (cond\n  \
    \    [(empty? brackets) (= count 0)]\n      [(string=? (first brackets) \"<\"\
    ) (helper (rest brackets) (+ count 1))]\n      [(string=? (first brackets) \"\
    >\") (and (not (zero? count)) (helper (rest brackets) (- count 1)))]))\n  (helper\
    \ brackets 0))\n", "  (define (helper brackets count)\n    (cond ((empty? brackets)\
    \ (= count 0))\n          ((char=? (first brackets) #\\<) (helper (rest brackets)\
    \ (+ count 1)))\n          ((char=? (first brackets) #\\>) (and (> count 0) (helper\
    \ (rest brackets) (- count 1))))))\n  (helper brackets 0))\n", "  (cond\n    [(empty?\
    \ brackets) #t]\n    [(empty? (rest brackets)) #f]\n    [(and (equal? (first brackets)\
    \ \"<\")\n          (equal? (first (rest brackets)) \">\"))\n     (correct_bracketing\
    \ (rest (rest brackets)))]\n    [else (correct_bracketing (rest brackets))]))\n",
  "  (cond\n    [(empty? brackets) #t]\n    [(empty? (rest brackets)) #f]\n    [(equal?\
    \ (first brackets) \"<\")\n     (and (correct_bracketing (rest brackets))\n  \
    \        (equal? (first (rest brackets)) \">\"))]\n    [else (correct_bracketing\
    \ (rest brackets))]))\n", "  (cond\n    [(empty? brackets) #t]\n    [(empty? (rest\
    \ brackets)) #f]\n    [(equal? (first brackets) \"<\")\n     (if (equal? (first\
    \ (rest brackets)) \">\")\n         (correct_bracketing (rest (rest brackets)))\n\
    \         (correct_bracketing (rest brackets)))]\n    [(equal? (first brackets)\
    \ \">\")\n     (if (equal? (first (rest brackets)) \"<\")\n         (correct_bracketing\
    \ (rest (rest brackets)))\n         (correct_bracketing (rest brackets)))]))\n",
  "  (cond\n    [(empty? brackets) #t]\n    [(empty? (rest brackets)) #f]\n    [(equal?\
    \ (first brackets) \"<\")\n     (and (equal? (first (rest brackets)) \">\")\n\
    \          (correct_bracketing (rest (rest brackets))))]\n    [else #f]))\n",
  "  (define (helper brackets count)\n    (cond\n      [(empty? brackets) (= count\
    \ 0)]\n      [(string=? (first brackets) \"<\") (helper (rest brackets) (+ count\
    \ 1))]\n      [(string=? (first brackets) \">\") (and (not (= count 0)) (helper\
    \ (rest brackets) (- count 1)))]))\n  (helper brackets 0))\n", "  (cond\n    [(empty?\
    \ brackets) #t]\n    [(empty? (rest brackets)) #f]\n    [(equal? (first brackets)\
    \ \"<\")\n     (if (equal? (first (rest brackets)) \">\")\n         (correct_bracketing\
    \ (rest (rest brackets)))\n         (correct_bracketing (rest brackets)))]\n \
    \   [(equal? (first brackets) \">\")\n     (if (equal? (first (rest brackets))\
    \ \"<\")\n         (correct_bracketing (rest (rest brackets)))\n         (correct_bracketing\
    \ (rest brackets)))]))\n", "  (define (helper brackets count)\n    (cond\n   \
    \   [(empty? brackets) (= count 0)]\n      [(= (first brackets) #\\<) (helper\
    \ (rest brackets) (+ count 1))]\n      [(= (first brackets) #\\>) (and (not (zero?\
    \ count)) (helper (rest brackets) (- count 1)))]))\n  (helper (string->list brackets)\
    \ 0))\n", "  (cond\n    [(empty? brackets) #t]\n    [(empty? (rest brackets))\
    \ #f]\n    [(string=? (first brackets) \"<\")\n     (if (string=? (first (rest\
    \ brackets)) \">\")\n         (correct_bracketing (rest (rest brackets)))\n  \
    \       (correct_bracketing (rest brackets)))]\n    [(string=? (first brackets)\
    \ \">\")\n     (if (string=? (first (rest brackets)) \"<\")\n         (correct_bracketing\
    \ (rest (rest brackets)))\n         (correct_bracketing (rest brackets)))]))\n",
  "  (cond\n    [(empty? brackets) true]\n    [(empty? (rest brackets)) false]\n \
    \   [(equal? (first brackets) \"<\")\n     (if (equal? (first (rest brackets))\
    \ \">\")\n         (correct_bracketing (rest (rest brackets)))\n         (false))]\n\
    \    [else false]))\n", "  (cond\n    [(empty? brackets) #t]\n    [(equal? (first\
    \ brackets) #\\<)\n     (if (member (first brackets) (rest brackets))\n      \
    \   (correct_bracketing (rest (rest brackets)))\n         #f)]\n    [else #f]))\n",
  "  (define (helper brackets count)\n    (cond\n      [(empty? brackets) (= count\
    \ 0)]\n      [(char=? (first brackets) #\\<) (helper (rest brackets) (+ count\
    \ 1))]\n      [(char=? (first brackets) #\\>) (and (not (zero? count)) (helper\
    \ (rest brackets) (- count 1)))]))\n  (helper brackets 0))\n", "  (define (helper\
    \ brackets count)\n    (cond\n      [(empty? brackets) (= count 0)]\n      [(char=?\
    \ (first brackets) #\\<) (helper (rest brackets) (+ count 1))]\n      [(char=?\
    \ (first brackets) #\\>) (and (not (= count 0)) (helper (rest brackets) (- count\
    \ 1)))]))\n  (helper brackets 0))\n", "  (define (helper brackets count)\n   \
    \ (cond\n      [(empty? brackets) (= count 0)]\n      [(string=? (first brackets)\
    \ \"<\") (helper (rest brackets) (+ count 1))]\n      [(string=? (first brackets)\
    \ \">\") (and (not (= count 0)) (helper (rest brackets) (- count 1)))]))\n  (helper\
    \ brackets 0))\n", "  (cond\n    [(empty? brackets) #t]\n    [(empty? (rest brackets))\
    \ #f]\n    [(equal? (first brackets) \"<\")\n     (and (equal? (first (rest brackets))\
    \ \">\")\n          (correct_bracketing (rest (rest brackets))))]\n    [else #f]))\n",
  "  (cond\n    [(empty? brackets) #t]\n    [(empty? (rest brackets)) #f]\n    [(equal?\
    \ (first brackets) \"<\")\n     (and (correct_bracketing (rest brackets))\n  \
    \        (equal? (first (rest brackets)) \">\"))]\n    [else #f]))\n", "  (cond\n\
    \    [(empty? brackets) #t]\n    [(empty? (rest brackets)) #f]\n    [(string=?\
    \ (first brackets) \"<\")\n     (correct_bracketing (rest brackets))]\n    [(string=?\
    \ (first brackets) \">\")\n     (correct_bracketing (rest (rest brackets)))]))\n",
  "  (cond\n    [(empty? brackets) #t]\n    [(empty? (rest brackets)) #f]\n    [(equal?\
    \ (first brackets) \"<\")\n     (if (equal? (first (rest brackets)) \">\")\n \
    \        (correct_bracketing (rest (rest brackets)))\n         (correct_bracketing\
    \ (rest brackets)))]\n    [(equal? (first brackets) \">\")\n     (if (equal? (first\
    \ (rest brackets)) \"<\")\n         (correct_bracketing (rest (rest brackets)))\n\
    \         (correct_bracketing (rest brackets)))]))\n", "  (cond\n    [(empty?\
    \ brackets) #t]\n    [(string=? (first brackets) \"<\")\n     (if (string=? (last\
    \ brackets) \">\")\n         (correct_bracketing (substring brackets 1 (- (string-length\
    \ brackets) 1)))\n         #f)]\n    [else #f]))\n", "  (define (helper brackets\
    \ count)\n    (cond\n      [(empty? brackets) (= count 0)]\n      [(= (first brackets)\
    \ #\\<) (helper (rest brackets) (+ count 1))]\n      [(= (first brackets) #\\\
    >) (and (not (zero? count)) (helper (rest brackets) (- count 1)))]))\n  (helper\
    \ (string->list brackets) 0))\n", "  (define (helper brackets count)\n    (cond\n\
    \      [(empty? brackets) (= count 0)]\n      [(first brackets) (helper (rest\
    \ brackets) (+ count 1))]\n      [else (and (not (zero? count)) (helper (rest\
    \ brackets) (- count 1)))]))\n  (helper brackets 0))\n", "  (define (helper brackets\
    \ count)\n    (cond\n      [(empty? brackets) (= count 0)]\n      [(char=? (first\
    \ brackets) #\\<) (helper (rest brackets) (+ count 1))]\n      [(char=? (first\
    \ brackets) #\\>) (and (not (= count 0)) (helper (rest brackets) (- count 1)))]))\n\
    \  (helper brackets 0))\n", "  (define (helper brackets count)\n    (cond\n  \
    \    [(empty? brackets) (= count 0)]\n      [(= (first brackets) #\\<) (helper\
    \ (rest brackets) (+ count 1))]\n      [(= (first brackets) #\\>) (and (not (zero?\
    \ count)) (helper (rest brackets) (- count 1)))]))\n  (helper (string->list brackets)\
    \ 0))\n", "  (cond\n    [(empty? brackets) #t]\n    [(empty? (rest brackets))\
    \ #f]\n    [(equal? (first brackets) \"<\")\n     (and (equal? (first (rest brackets))\
    \ \">\")\n          (correct_bracketing (rest (rest brackets))))]\n    [else #f]))\n",
  "  (cond\n    [(empty? brackets) #t]\n    [(empty? (rest brackets)) #f]\n    [(equal?\
    \ (first brackets) \"<\")\n     (and (correct_bracketing (rest brackets))\n  \
    \        (equal? (first (rest brackets)) \">\"))]\n    [else #f]))\n", "  (define\
    \ (helper brackets count)\n    (cond\n      [(empty? brackets) (= count 0)]\n\
    \      [(string=? (first brackets) \"<\") (helper (rest brackets) (+ count 1))]\n\
    \      [(string=? (first brackets) \">\") (and (not (= count 0)) (helper (rest\
    \ brackets) (- count 1)))]))\n  (helper brackets 0))\n", "  (cond\n    [(empty?\
    \ brackets) #t]\n    [(empty? (rest brackets)) #f]\n    [(string=? (first brackets)\
    \ \"<\")\n     (correct_bracketing (rest brackets))]\n    [(string=? (first brackets)\
    \ \">\")\n     (correct_bracketing (rest (rest brackets)))]))\n", "  (cond\n \
    \   [(empty? brackets) #t]\n    [(empty? (rest brackets)) #f]\n    [(equal? (first\
    \ brackets) \"<\")\n     (cond\n       [(equal? (first (rest brackets)) \">\"\
    )\n        (correct_bracketing (rest (rest brackets)))]\n       [else (correct_bracketing\
    \ (rest brackets))])]\n    [else (correct_bracketing (rest brackets))]))\n", " \
    \ (define (helper brackets count)\n    (cond ((and (empty? brackets) (= count\
    \ 0)) #t)\n          ((and (empty? brackets) (> count 0)) #f)\n          ((and\
    \ (empty? brackets) (< count 0)) #f)\n          ((and (not (empty? brackets))\
    \ (= count 0)) (helper (rest brackets) (+ count (if (equal? (first brackets) \"\
    <\") 1 -1))))\n          ((and (not (empty? brackets)) (> count 0)) (helper (rest\
    \ brackets) (+ count (if (equal? (first brackets) \"<\") 1 -1))))\n          ((and\
    \ (not (empty? brackets)) (< count 0)) #f)))\n  (helper brackets 0))\n", "  (define\
    \ (helper brackets count)\n    (cond\n      [(empty? brackets) (= count 0)]\n\
    \      [(char=? (first brackets) #\\<) (helper (rest brackets) (+ count 1))]\n\
    \      [(char=? (first brackets) #\\>) (and (not (= count 0)) (helper (rest brackets)\
    \ (- count 1)))]))\n  (helper brackets 0))\n", "  (define (helper brackets count)\n\
    \    (cond\n      [(empty? brackets) (= count 0)]\n      [(char=? (first brackets)\
    \ #\\<) (helper (rest brackets) (+ count 1))]\n      [(char=? (first brackets)\
    \ #\\>) (and (not (= count 0)) (helper (rest brackets) (- count 1)))]))\n  (helper\
    \ brackets 0))\n", "  (cond\n    [(empty? brackets) #t]\n    [(empty? (rest brackets))\
    \ #f]\n    [(equal? (first brackets) \"<\")\n     (and (equal? (first (rest brackets))\
    \ \">\")\n          (correct_bracketing (rest (rest brackets))))]\n    [else #f]))\n",
  "  (define (helper brackets count)\n    (cond\n      [(empty? brackets) (= count\
    \ 0)]\n      [(string=? (first brackets) \"<\") (helper (rest brackets) (+ count\
    \ 1))]\n      [(string=? (first brackets) \">\") (and (not (zero? count)) (helper\
    \ (rest brackets) (- count 1)))]))\n  (helper brackets 0))\n", "  (define (helper\
    \ brackets count)\n    (cond\n      [(empty? brackets) (= count 0)]\n      [(char=?\
    \ (first brackets) #\\<) (helper (rest brackets) (+ count 1))]\n      [(char=?\
    \ (first brackets) #\\>) (and (not (zero? count)) (helper (rest brackets) (- count\
    \ 1)))]))\n  (helper brackets 0))\n", "  (define (correct_bracketing_helper brackets\
    \ count)\n    (cond\n      [(empty? brackets) (= count 0)]\n      [(char=? (first\
    \ brackets) #\\<) (correct_bracketing_helper (rest brackets) (+ count 1))]\n \
    \     [(char=? (first brackets) #\\>) (and (correct_bracketing_helper (rest brackets)\
    \ (- count 1)) (> count 0))]))\n  (correct_bracketing_helper brackets 0))\n",
  "  (define (helper brackets count)\n    (cond\n      [(empty? brackets) (= count\
    \ 0)]\n      [(string=? (first brackets) \"<\") (helper (rest brackets) (+ count\
    \ 1))]\n      [(string=? (first brackets) \">\") (and (not (= count 0)) (helper\
    \ (rest brackets) (- count 1)))]))\n  (helper brackets 0))\n", "  (define (helper\
    \ brackets count)\n    (cond\n      [(empty? brackets) (= count 0)]\n      [(equal?\
    \ (first brackets) \"<\") (helper (rest brackets) (+ count 1))]\n      [(equal?\
    \ (first brackets) \">\") (and (> count 0) (helper (rest brackets) (- count 1)))]))\n\
    \  (helper brackets 0))\n", "  (cond\n    [(empty? brackets) #t]\n    [(equal?\
    \ (first brackets) \"<\") (correct_bracketing (rest brackets))]\n    [(equal?\
    \ (first brackets) \">\") (correct_bracketing (rest brackets))]\n    [else #f]))\n",
  "  (cond\n    [(empty? brackets) #t]\n    [(empty? (rest brackets)) #f]\n    [(equal?\
    \ (first brackets) \"<\")\n     (and (equal? (first (rest brackets)) \">\")\n\
    \          (correct_bracketing (rest (rest brackets))))]\n    [else #f]))\n",
  "  (define (helper brackets count)\n    (cond\n      [(empty? brackets) (= count\
    \ 0)]\n      [(char=? (first brackets) #\\<) (helper (rest brackets) (+ count\
    \ 1))]\n      [(char=? (first brackets) #\\>) (and (> count 0) (helper (rest brackets)\
    \ (- count 1)))]))\n  (helper brackets 0))\n", "  (cond\n    [(empty? brackets)\
    \ #t]\n    [(empty? (rest brackets)) #f]\n    [(equal? (first brackets) \"<\"\
    )\n     (and (equal? (first (rest brackets)) \">\")\n          (correct_bracketing\
    \ (rest (rest brackets))))]\n    [else #f]))\n", "  (cond\n    [(empty? brackets)\
    \ true]\n    [(empty? (rest brackets)) false]\n    [(equal? (first brackets) \"\
    <\")\n     (and (correct_bracketing (rest brackets))\n          (equal? (first\
    \ (rest brackets)) \">\"))]\n    [else false]))\n", "  (define (helper brackets\
    \ count)\n    (cond ((empty? brackets) (= count 0))\n          ((equal? (first\
    \ brackets) \"<\") (helper (rest brackets) (+ count 1)))\n          ((equal? (first\
    \ brackets) \">\") (and (not (= count 0)) (helper (rest brackets) (- count 1))))))\n\
    \  (helper brackets 0))\n", "  (define (helper brackets count)\n    (cond\n  \
    \    [(empty? brackets) (= count 0)]\n      [(string=? (first brackets) \"<\"\
    ) (helper (rest brackets) (+ count 1))]\n      [(string=? (first brackets) \"\
    >\") (and (> count 0) (helper (rest brackets) (- count 1)))]))\n  (helper brackets\
    \ 0))\n"]
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
