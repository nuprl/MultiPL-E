name: HumanEval_58_common
language: racket
prompt: "#lang racket\n\n;; Return sorted unique common elements for two lists.\n\
  ;; >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n;; [1, 5, 653]\n\
  ;; >>> common([5, 3, 2, 8], [3, 2])\n;; [2, 3]\n(define (common l1 l2)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate common))\n\
  \    (check-equal? (candidate (list 1 4 3 34 653 2 5) (list 5 7 1 5 9 653 121))\
  \ (list 1 5 653))\n    (check-equal? (candidate (list 5 3 2 8) (list 3 2)) (list\
  \ 2 3))\n    (check-equal? (candidate (list 4 3 2 8) (list 3 2 4)) (list 2 3 4))\n\
  \    (check-equal? (candidate (list 4 3 2 8) (list )) (list ))\n))\n\n(test-humaneval)"
completions: ["  (sort (remove-duplicates (intersection l1 l2)) <))\n", "  (sort (remove-duplicates\
    \ (append l1 l2)) <))\n", "  (sort (remove-duplicates (append l1 l2)) <))\n",
  "  (sort (remove-duplicates (append l1 l2)) <))\n", "  (sort (remove-duplicates\
    \ (append l1 l2)) <))\n", "  (sort (remove-duplicates (intersection l1 l2)) <))\n",
  "  (sort (remove-duplicates (append l1 l2)) <))\n", "  (sort (remove-duplicates\
    \ (append l1 l2)) <))\n", "  (sort (remove-duplicates (append l1 l2)) <))\n",
  "  (sort (remove-duplicates (append l1 l2)) <))\n", "  (sort (remove-duplicates\
    \ (append l1 l2)) <))\n", "  (sort (remove-duplicates (append l1 l2)) <))\n",
  "  (define (common-helper l1 l2 acc)\n    (cond\n      [(empty? l1) acc]\n     \
    \ [(empty? l2) acc]\n      [(member (first l1) l2) (common-helper (rest l1) l2\
    \ (cons (first l1) acc))]\n      [else (common-helper (rest l1) l2 acc)]))\n \
    \ (sort (common-helper l1 l2 '()) <))\n", "  (sort (remove-duplicates (intersection\
    \ l1 l2)) <))\n", "  (sort (remove-duplicates (intersection l1 l2)) <))\n", " \
    \ (sort (remove-duplicates (append l1 l2)) <))\n", "  (sort (remove-duplicates\
    \ (append l1 l2)) <))\n", "  (sort (remove-duplicates (append l1 l2)) <))\n",
  "  (sort (remove-duplicates (append l1 l2)) <))\n", "  (sort (remove-duplicates\
    \ (append l1 l2)) <))\n", "  (sort (remove-duplicates (append l1 l2)) <))\n",
  "  (sort (remove-duplicates (append l1 l2)) <))\n", "  (sort (remove-duplicates\
    \ (intersection l1 l2)) <))\n", "  (sort (remove-duplicates (intersection l1 l2))\
    \ <))\n", "  (sort (remove-duplicates (append l1 l2)) <))\n", "  (sort (remove-duplicates\
    \ (intersection l1 l2)) <))\n", "  (sort (remove-duplicates (append l1 l2)) <))\n",
  "  (sort (remove-duplicates (append l1 l2)) <))\n", "  (sort (remove-duplicates\
    \ (append l1 l2)) <))\n", "  (sort (remove-duplicates (append l1 l2)) <))\n",
  "  (sort (remove-duplicates (intersection l1 l2)) <))\n", "  (sort (remove-duplicates\
    \ (append l1 l2)) <))\n", "  (sort (remove-duplicates (append l1 l2)) <))\n",
  "  (sort (remove-duplicates (append l1 l2)) <))\n", "  (sort (remove-duplicates\
    \ (intersection l1 l2)) <))\n", "  (sort (remove-duplicates (append l1 l2)) <))\n",
  "  (sort (remove-duplicates (append l1 l2)) <))\n", "  (sort (remove-duplicates\
    \ (append l1 l2)) <))\n", "  (sort (remove-duplicates (append l1 l2)) <))\n",
  "  (sort (remove-duplicates (intersection l1 l2)) <))\n", "  (sort (remove-duplicates\
    \ (append l1 l2)) <))\n", "  (sort (remove-duplicates (intersection l1 l2)) <))\n",
  "  (sort (remove-duplicates (append l1 l2)) <))\n", "  (sort (remove-duplicates\
    \ (append l1 l2)) <))\n", "  (sort (remove-duplicates (intersection l1 l2)) <))\n",
  "  (sort (remove-duplicates (append l1 l2)) <))\n", "  (sort (remove-duplicates\
    \ (append l1 l2)) <))\n", "  (sort (remove-duplicates (append l1 l2)) <))\n",
  "  (sort (remove-duplicates (append l1 l2)) <))\n", "  (sort (remove-duplicates\
    \ (append l1 l2)) <))\n", "  (sort (remove-duplicates (append l1 l2)) <))\n",
  "  (sort (remove-duplicates (append l1 l2)) <))\n", "  (sort (remove-duplicates\
    \ (append l1 l2)) <))\n", "  (sort (remove-duplicates (append l1 l2)) <))\n",
  "  (sort (remove-duplicates (append l1 l2)) <))\n", "  (sort (remove-duplicates\
    \ (append l1 l2)) <))\n", "  (sort (remove-duplicates (append l1 l2)) <))\n",
  "  (sort (remove-duplicates (intersection l1 l2)) <))\n", "  (sort (remove-duplicates\
    \ (append l1 l2)) <))\n", "  (sort (remove-duplicates (append l1 l2)) <))\n",
  "  (sort (remove-duplicates (append l1 l2)) <))\n", "  (sort (remove-duplicates\
    \ (append l1 l2)) <))\n", "  (sort (remove-duplicates (append l1 l2)) <))\n",
  "  (sort (remove-duplicates (append l1 l2)) <))\n", "  (sort (remove-duplicates\
    \ (append l1 l2)) <))\n", "  (sort (remove-duplicates (append l1 l2)) <))\n",
  "  (sort (remove-duplicates (append l1 l2)) <))\n", "  (sort (remove-duplicates\
    \ (append l1 l2)) <))\n", "  (sort (remove-duplicates (append l1 l2)) <))\n",
  "  (sort (remove-duplicates (append l1 l2)) <))\n", "  (sort (remove-duplicates\
    \ (append l1 l2)) <))\n", "  (sort (remove-duplicates (intersection l1 l2)) <))\n",
  "  (sort (remove-duplicates (intersection l1 l2)) <))\n", "  (sort (remove-duplicates\
    \ (append l1 l2)) <))\n", "  (sort (remove-duplicates (append l1 l2)) <))\n",
  "  (sort (remove-duplicates (intersection l1 l2)) <))\n", "  (sort (remove-duplicates\
    \ (append l1 l2)) <))\n", "  (sort (remove-duplicates (append l1 l2)) <))\n",
  "  (sort (remove-duplicates (append l1 l2)) <))\n", "  (sort (remove-duplicates\
    \ (append l1 l2)) <))\n", "  (sort (list-set (append l1 l2)) <))\n", "  (sort\
    \ (remove-duplicates (intersection l1 l2)) <))\n", "  (sort (remove-duplicates\
    \ (append l1 l2)) <))\n", "  (sort (remove-duplicates (append l1 l2)) <))\n",
  "  (sort (remove-duplicates (append l1 l2)) <))\n", "  (sort (remove-duplicates\
    \ (append l1 l2)) <))\n", "  (sort (remove-duplicates (append l1 l2)) <))\n",
  "  (sort (remove-duplicates (append l1 l2)) <))\n", "  (sort (remove-duplicates\
    \ (append l1 l2)) <))\n", "  (sort (remove-duplicates (append l1 l2)) <))\n",
  "  (sort (remove-duplicates (append l1 l2)) <))\n", "  (sort (remove-duplicates\
    \ (append l1 l2)) <))\n", "  (sort (remove-duplicates (append l1 l2)) <))\n",
  "  (sort (remove-duplicates (append l1 l2)) <))\n", "  (sort (remove-duplicates\
    \ (append l1 l2)) <))\n", "  (sort (remove-duplicates (append l1 l2)) <))\n",
  "  (sort (remove-duplicates (append l1 l2)) <))\n", "  (sort (remove-duplicates\
    \ (append l1 l2)) <))\n", "  (sort (remove-duplicates (append l1 l2)) <))\n",
  "  (sort (remove-duplicates (append l1 l2)) <))\n", "  (sort (remove-duplicates\
    \ (append l1 l2)) <))\n", "  (sort (remove-duplicates (append l1 l2)) <))\n",
  "  (sort (remove-duplicates (intersection l1 l2)) <))\n", "  (sort (remove-duplicates\
    \ (intersection l1 l2)) <))\n", "  (sort (remove-duplicates (append l1 l2)) <))\n",
  "  (sort (remove-duplicates (append l1 l2)) <))\n", "  (sort (remove-duplicates\
    \ (intersection l1 l2)) <))\n", "  (sort (remove-duplicates (append l1 l2)) <))\n",
  "  (sort (remove-duplicates (append l1 l2)) <))\n", "  (sort (remove-duplicates\
    \ (append l1 l2)) <))\n", "  (sort (remove-duplicates (append l1 l2)) <))\n",
  "  (sort (remove-duplicates (append l1 l2)) <))\n", "  (sort (remove-duplicates\
    \ (append l1 l2)) <))\n", "  (sort (remove-duplicates (intersection l1 l2)) <))\n",
  "  (sort (remove-duplicates (append l1 l2)) <))\n", "  (sort (remove-duplicates\
    \ (append l1 l2)) <))\n", "  (sort (remove-duplicates (append l1 l2)) <))\n",
  "  (sort (remove-duplicates (append l1 l2)) <))\n", "  (sort (remove-duplicates\
    \ (append l1 l2)) <))\n", "  (define (common-helper l1 l2)\n    (cond\n      [(empty?\
    \ l1) '()]\n      [(empty? l2) '()]\n      [(member (first l1) l2) (cons (first\
    \ l1) (common-helper (rest l1) l2))]\n      [else (common-helper (rest l1) l2)]))\n\
    \  (sort (common-helper l1 l2) <))\n", "  (sort (remove-duplicates (append l1\
    \ l2)) <))\n", "  (sort (remove-duplicates (append l1 l2)) <))\n", "  (sort (remove-duplicates\
    \ (append l1 l2)) <))\n", "  (sort (remove-duplicates (intersection l1 l2)) <))\n",
  "  (sort (remove-duplicates (append l1 l2)) <))\n", "  (sort (remove-duplicates\
    \ (append l1 l2)) <))\n", "  (sort (remove-duplicates (append l1 l2)) <))\n",
  "  (sort (remove-duplicates (append l1 l2)) <))\n", "  (sort (remove-duplicates\
    \ (append l1 l2)) <))\n", "  (sort (remove-duplicates (append l1 l2)) <))\n",
  "  (sort (remove-duplicates (append l1 l2)) <))\n", "  (sort (remove-duplicates\
    \ (append l1 l2)) <))\n", "  (sort (remove-duplicates (append l1 l2)) <))\n",
  "  (sort (remove-duplicates (append l1 l2)) <))\n", "  (sort (remove-duplicates\
    \ (append l1 l2)) <))\n", "  (sort (remove-duplicates (intersection l1 l2)) <))\n",
  "  (sort (remove-duplicates (intersection l1 l2)) <))\n", "  (sort (remove-duplicates\
    \ (append l1 l2)) <))\n", "  (sort (remove-duplicates (append l1 l2)) <))\n",
  "  (sort (remove-duplicates (intersection l1 l2)) <))\n", "  (sort (remove-duplicates\
    \ (intersection l1 l2)) <))\n", "  (sort (remove-duplicates (intersection l1 l2))\
    \ <))\n", "  (sort (remove-duplicates (append l1 l2)) <))\n", "  (sort (remove-duplicates\
    \ (append l1 l2)) <))\n", "  (sort (remove-duplicates (append l1 l2)) <))\n",
  "  (sort (remove-duplicates (append l1 l2)) <))\n", "  (sort (remove-duplicates\
    \ (append l1 l2)) <))\n", "  (sort (remove-duplicates (intersection l1 l2)) <))\n",
  "  (sort (remove-duplicates (append l1 l2)) <))\n", "  (sort (remove-duplicates\
    \ (append l1 l2)) <))\n", "  (sort (remove-duplicates (append l1 l2)) <))\n",
  "  (sort (remove-duplicates (append l1 l2)) <))\n", "  (sort (remove-duplicates\
    \ (append l1 l2)) <))\n", "  (sort (remove-duplicates (append l1 l2)) <))\n",
  "  (sort (remove-duplicates (intersection l1 l2)) <))\n", "  (sort (remove-duplicates\
    \ (append l1 l2)) <))\n", "  (sort (remove-duplicates (append l1 l2)) <))\n",
  "  (sort (remove-duplicates (append l1 l2)) <))\n", "  (sort (remove-duplicates\
    \ (append l1 l2)) <))\n", "  (sort (remove-duplicates (append l1 l2)) <))\n",
  "  (sort (remove-duplicates (intersection l1 l2)) <))\n", "  (sort (remove-duplicates\
    \ (append l1 l2)) <))\n", "  (sort (remove-duplicates (append l1 l2)) <))\n",
  "  (sort (remove-duplicates (append l1 l2)) <))\n", "  (sort (remove-duplicates\
    \ (append l1 l2)) <))\n", "  (sort (remove-duplicates (append l1 l2)) <))\n",
  "  (sort (remove-duplicates (append l1 l2)) <))\n", "  (sort (remove-duplicates\
    \ (append l1 l2)) <))\n", "  (sort (remove-duplicates (append l1 l2)) <))\n",
  "  (sort (remove-duplicates (append l1 l2)) <))\n", "  (sort (remove-duplicates\
    \ (append l1 l2)) <))\n", "  (sort (remove-duplicates (append l1 l2)) <))\n",
  "  (sort (remove-duplicates (append l1 l2)) <))\n", "  (sort (remove-duplicates\
    \ (append l1 l2)) <))\n", "  (sort (remove-duplicates (append l1 l2)) <))\n",
  "  (sort (remove-duplicates (append l1 l2)) <))\n", "  (sort (remove-duplicates\
    \ (append l1 l2)) <))\n", "  (sort (remove-duplicates (intersection l1 l2)) <))\n",
  "  (sort (remove-duplicates (append l1 l2)) <))\n", "  (sort (remove-duplicates\
    \ (append l1 l2)) <))\n", "  (sort (remove-duplicates (append l1 l2)) <))\n",
  "  (sort (remove-duplicates (append l1 l2)) <))\n", "  (sort (remove-duplicates\
    \ (intersection l1 l2)) <))\n", "  (sort (remove-duplicates (intersection l1 l2))\
    \ <))\n", "  (sort (remove-duplicates (append l1 l2)) <))\n", "  (sort (remove-duplicates\
    \ (append l1 l2)) <))\n", "  (sort (remove-duplicates (append l1 l2)) <))\n",
  "  (sort (remove-duplicates (intersection l1 l2)) <))\n", "  (sort (remove-duplicates\
    \ (intersection l1 l2)) <))\n", "  (sort (remove-duplicates (append l1 l2)) <))\n",
  "  (sort (remove-duplicates (append l1 l2)) <))\n", "  (sort (remove-duplicates\
    \ (append l1 l2)) <))\n", "  (sort (remove-duplicates (append l1 l2)) <))\n",
  "  (sort (remove-duplicates (append l1 l2)) <))\n", "  (sort (remove-duplicates\
    \ (append l1 l2)) <))\n", "  (sort (remove-duplicates (append l1 l2)) <))\n",
  "  (sort (remove-duplicates (append l1 l2)) <))\n", "  (sort (remove-duplicates\
    \ (intersection l1 l2)) <))\n", "  (sort (remove-duplicates (append l1 l2)) <))\n",
  "  (sort (remove-duplicates (append l1 l2)) <))\n"]
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
