name: HumanEval_117_select_words
language: racket
prompt: "#lang racket\n\n;; Given a string s and a natural number n, you have been\
  \ tasked to implement \n;; a function that returns a list of all words from string\
  \ s that contain exactly \n;; n consonants, in order these words appear in the string\
  \ s.\n;; If the string s is empty then the function should return an empty list.\n\
  ;; Note: you may assume the input string contains only letters and spaces.\n;; Examples:\n\
  ;; select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n;; select_words(\"\
  Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n;; select_words(\"simple\
  \ white space\", 2) ==> []\n;; select_words(\"Hello world\", 4) ==> [\"world\"]\n\
  ;; select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n(define (select_words s n)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate select_words))\n\
  \    (check-equal? (candidate \"Mary had a little lamb\" 4) (list \"little\"))\n\
  \    (check-equal? (candidate \"Mary had a little lamb\" 3) (list \"Mary\" \"lamb\"\
  ))\n    (check-equal? (candidate \"simple white space\" 2) (list ))\n    (check-equal?\
  \ (candidate \"Hello world\" 4) (list \"world\"))\n    (check-equal? (candidate\
  \ \"Uncle sam\" 3) (list \"Uncle\"))\n    (check-equal? (candidate \"\" 4) (list\
  \ ))\n    (check-equal? (candidate \"a b c d e f\" 1) (list \"b\" \"c\" \"d\" \"\
  f\"))\n))\n\n(test-humaneval)"
completions: ["  (cond\n    [(empty? s) empty]\n    [(= n (count-consonants (first\
    \ (string-split s #\\space))))\n     (cons (first (string-split s #\\space))\n\
    \           (select_words (string-join (rest (string-split s #\\space)) #\\space)\
    \ n))]\n    [else (select_words (string-join (rest (string-split s #\\space))\
    \ #\\space) n)]))\n", "  (define (is-vowel? c)\n    (member c '(#\\a #\\e #\\\
    i #\\o #\\u)))\n  (define (is-consonant? c)\n    (not (is-vowel? c)))\n  (define\
    \ (count-consonants word)\n    (define (count-consonants-iter word count)\n  \
    \    (cond\n        [(empty? word) count]\n        [(is-consonant? (first word))\
    \ (count-consonants-iter (rest word) (+ count 1))]\n        [else (count-consonants-iter\
    \ (rest word) count)]))\n    (count-consonants-iter word 0))\n  (define (select-words-iter\
    \ s n result)\n    (cond\n      [(empty? s) result]\n      [(count-consonants\
    \ (first s)) (select-words-iter (rest s) n (append result (list (first s))))]\n\
    \      [else (select-words-iter (rest s) n result)]))\n  (select-words-iter (string-split\
    \ s) n '()))\n", "  (define (consonant? c)\n    (member c '(\"b\" \"c\" \"d\"\
    \ \"f\" \"g\" \"h\" \"j\" \"k\" \"l\" \"m\" \"n\" \"p\" \"q\" \"r\" \"s\" \"t\"\
    \ \"v\" \"w\" \"x\" \"y\" \"z\")))\n  (define (count-consonants w)\n    (cond\n\
    \      [(empty? w) 0]\n      [(consonant? (first w)) (+ 1 (count-consonants (rest\
    \ w)))]\n      [else (count-consonants (rest w))]))\n  (define (select-words-helper\
    \ s n)\n    (cond\n      [(empty? s) empty]\n      [(= n (count-consonants (first\
    \ s))) (cons (first s) (select-words-helper (rest s) n))]\n      [else (select-words-helper\
    \ (rest s) n)]))\n  (select-words-helper (string-split s) n))\n", "  (define (is-consonant?\
    \ c)\n    (member c '(#\\b #\\c #\\d #\\f #\\g #\\h #\\j #\\k #\\l #\\m #\\n #\\\
    p #\\q #\\r #\\s #\\t #\\v #\\w #\\x #\\y #\\z)))\n  (define (count-consonants\
    \ s)\n    (cond ((empty? s) 0)\n          ((is-consonant? (first s)) (+ 1 (count-consonants\
    \ (rest s))))\n          (else (count-consonants (rest s)))))\n  (define (select-words\
    \ s n)\n    (cond ((empty? s) empty)\n          ((= n (count-consonants (first\
    \ s))) (cons (first s) (select-words (rest s) n)))\n          (else (select-words\
    \ (rest s) n))))\n  (select-words (string-split s) n))\n", "  (define (is_consonant?\
    \ c)\n    (not (member c '(\"a\" \"e\" \"i\" \"o\" \"u\"))))\n  (define (count_consonants\
    \ word)\n    (cond [(empty? word) 0]\n          [(is_consonant? (first word))\
    \ (+ 1 (count_consonants (rest word)))]\n          [else (count_consonants (rest\
    \ word))]))\n  (define (select_words_helper s n)\n    (cond [(empty? s) empty]\n\
    \          [(= n (count_consonants (first s))) (cons (first s) (select_words_helper\
    \ (rest s) n))]\n          [else (select_words_helper (rest s) n)]))\n  (select_words_helper\
    \ (string-split s) n))\n", "  (define (consonant? c)\n    (member c '(#\\b #\\\
    c #\\d #\\f #\\g #\\h #\\j #\\k #\\l #\\m #\\n #\\p #\\q #\\r #\\s #\\t #\\v #\\\
    w #\\x #\\y #\\z)))\n  (define (count-consonants word)\n    (if (empty? word)\n\
    \        0\n        (+ (if (consonant? (first word)) 1 0)\n           (count-consonants\
    \ (rest word)))))\n  (define (select-words-iter words n)\n    (if (empty? words)\n\
    \        '()\n        (if (= n (count-consonants (first words)))\n           \
    \ (cons (first words) (select-words-iter (rest words) n))\n            (select-words-iter\
    \ (rest words) n))))\n  (select-words-iter (string-split s) n))\n", "  (define\
    \ (is-consonant? c)\n    (cond\n      [(member c '(\"a\" \"e\" \"i\" \"o\" \"\
    u\")) #f]\n      [else #t]))\n  (define (count-consonants word)\n    (cond\n \
    \     [(empty? word) 0]\n      [(is-consonant? (first word)) (+ 1 (count-consonants\
    \ (rest word)))]\n      [else (count-consonants (rest word))]))\n  (define (select-words-helper\
    \ s n)\n    (cond\n      [(empty? s) empty]\n      [(= n (count-consonants (first\
    \ s))) (cons (first s) (select-words-helper (rest s) n))]\n      [else (select-words-helper\
    \ (rest s) n)]))\n  (select-words-helper (string-split s) n))\n", "  (define (is-consonant?\
    \ c)\n    (not (member c '(#\\a #\\e #\\i #\\o #\\u))))\n  (define (count-consonants\
    \ s)\n    (cond [(empty? s) 0]\n          [(is-consonant? (first s)) (+ 1 (count-consonants\
    \ (rest s)))]\n          [else (count-consonants (rest s))]))\n  (define (select-words-iter\
    \ s n result)\n    (cond [(empty? s) result]\n          [(equal? n (count-consonants\
    \ (first s)))\n           (select-words-iter (rest s) n (append result (list (first\
    \ s))))]\n          [else (select-words-iter (rest s) n result)]))\n  (select-words-iter\
    \ (string-split s) n '()))\n", "  (define (is_consonant? c)\n    (cond\n     \
    \ [(char-ci=? c #\\a) #f]\n      [(char-ci=? c #\\e) #f]\n      [(char-ci=? c\
    \ #\\i) #f]\n      [(char-ci=? c #\\o) #f]\n      [(char-ci=? c #\\u) #f]\n  \
    \    [else #t]))\n  (define (count_consonants s)\n    (cond\n      [(empty? s)\
    \ 0]\n      [(is_consonant? (first s)) (+ 1 (count_consonants (rest s)))]\n  \
    \    [else (count_consonants (rest s))]))\n  (define (select_words_iter s n acc)\n\
    \    (cond\n      [(empty? s) (reverse acc)]\n      [(is_consonant? (first s))\n\
    \       (select_words_iter (rest s) (- n 1) (cons (first s) acc))]\n      [else\
    \ (select_words_iter (rest s) n acc)]))\n  (define (select_words_iter2 s n acc)\n\
    \    (cond\n      [(empty? s) (reverse acc)]\n      [(is_consonant? (first s))\n\
    \       (select_words_iter2 (rest s) (- n 1) (cons (first s) acc))]\n      [(char-whitespace?\
    \ (first s))\n       (if (= n 0)\n           (select_words_iter2 (rest s) n (cons\
    \ (list->string (reverse acc)) acc))\n           (select_words_iter2 (rest s)\
    \ n (cons (first s) acc)))]\n      [else (select_words_iter2 (rest s) n acc)]))\n\
    \  (define (select_words_iter3 s n acc)\n    (cond\n      [(empty? s) (reverse\
    \ acc)]\n      [(is_consonant? (first s))\n       (select_words_iter3 (rest s)\
    \ (- n 1) (cons (first s) acc))]\n      [(char-whitespace? (first s))\n      \
    \ (if (= n 0)\n           (select_words_", "  (define (is-consonant? c)\n    (not\
    \ (member c '(\"a\" \"e\" \"i\" \"o\" \"u\"))))\n  (define (count-consonants word)\n\
    \    (cond\n      [(empty? word) 0]\n      [(is-consonant? (first word)) (+ 1\
    \ (count-consonants (rest word)))]\n      [else (count-consonants (rest word))]))\n\
    \  (define (select-words-iter words n result)\n    (cond\n      [(empty? words)\
    \ result]\n      [(= n (count-consonants (first words)))\n       (select-words-iter\
    \ (rest words) n (append result (list (first words))))]\n      [else (select-words-iter\
    \ (rest words) n result)]))\n  (select-words-iter (string-split s) n '()))\n",
  "  (define (consonant? c)\n    (member c '(\"b\" \"c\" \"d\" \"f\" \"g\" \"h\" \"\
    j\" \"k\" \"l\" \"m\" \"n\" \"p\" \"q\" \"r\" \"s\" \"t\" \"v\" \"w\" \"x\" \"\
    y\" \"z\")))\n  (define (count-consonants word)\n    (cond ((null? word) 0)\n\
    \          ((consonant? (car word)) (+ 1 (count-consonants (cdr word))))\n   \
    \       (else (count-consonants (cdr word)))))\n  (define (select-words-helper\
    \ s n)\n    (cond ((null? s) '())\n          ((= n (count-consonants (car s)))\
    \ (cons (car s) (select-words-helper (cdr s) n)))\n          (else (select-words-helper\
    \ (cdr s) n))))\n  (select-words-helper (string-split s) n))\n", "  (cond [(empty?\
    \ s) empty]\n        [(= n (count-consonants (first s))) (cons (first s) (select_words\
    \ (rest s) n))]\n        [else (select_words (rest s) n)]))\n", "  (define (is-consonant?\
    \ c)\n    (not (member c '(#\\a #\\e #\\i #\\o #\\u))))\n  (define (count-consonants\
    \ word)\n    (if (empty? word)\n        0\n        (+ (if (is-consonant? (first\
    \ word)) 1 0)\n           (count-consonants (rest word)))))\n  (define (select-words-helper\
    \ s n)\n    (if (empty? s)\n        '()\n        (let ((word (first s)))\n   \
    \       (if (= n (count-consonants word))\n              (cons word (select-words-helper\
    \ (rest s) n))\n              (select-words-helper (rest s) n)))))\n  (select-words-helper\
    \ (string-split s) n))\n", "  (cond [(empty? s) empty]\n        [(= n (count-consonants\
    \ (first s))) (cons (first s) (select_words (rest s) n))]\n        [else (select_words\
    \ (rest s) n)]))\n", "  (cond\n    [(empty? s) empty]\n    [(= n (count-consonants\
    \ (first (string-split s #\\space))))\n     (cons (first (string-split s #\\space))\
    \ (select_words (rest (string-split s #\\space)) n))]\n    [else (select_words\
    \ (rest (string-split s #\\space)) n)]))\n", "  (define (is_consonant c)\n   \
    \ (member c '(#\\b #\\c #\\d #\\f #\\g #\\h #\\j #\\k #\\l #\\m #\\n #\\p #\\\
    q #\\r #\\s #\\t #\\v #\\w #\\x #\\y #\\z)))\n  (define (count_consonants s)\n\
    \    (cond [(empty? s) 0]\n          [(is_consonant (first s)) (+ 1 (count_consonants\
    \ (rest s)))]\n          [else (count_consonants (rest s))]))\n  (define (select_words_iter\
    \ s n acc)\n    (cond [(empty? s) acc]\n          [(equal? n (count_consonants\
    \ (first s))) (select_words_iter (rest s) n (append acc (list (first s))))]\n\
    \          [else (select_words_iter (rest s) n acc)]))\n  (select_words_iter (string-split\
    \ s) n '()))\n", "  (define (is-vowel? c)\n    (or (char=? c #\\a)\n        (char=?\
    \ c #\\e)\n        (char=? c #\\i)\n        (char=? c #\\o)\n        (char=? c\
    \ #\\u)))\n  (define (count-consonants s)\n    (define (count-consonants-iter\
    \ s i acc)\n      (if (= i (string-length s))\n          acc\n          (if (is-vowel?\
    \ (string-ref s i))\n              (count-consonants-iter s (+ i 1) acc)\n   \
    \           (count-consonants-iter s (+ i 1) (+ acc 1)))))\n    (count-consonants-iter\
    \ s 0 0))\n  (define (select-words-iter s i acc)\n    (if (= i (string-length\
    \ s))\n        acc\n        (let* ([word (string-tokenize s #\\space)]\n     \
    \          [word-consonants (count-consonants word)]\n               [acc (if\
    \ (= word-consonants n)\n                        (cons word acc)\n           \
    \             acc)])\n          (select-words-iter s (+ i (string-length word))\
    \ acc))))\n  (select-words-iter s 0 '()))\n", "  (define (is-consonant? c)\n \
    \   (not (member c '(#\\a #\\e #\\i #\\o #\\u))))\n  (define (count-consonants\
    \ word)\n    (define (count-consonants-iter word count)\n      (if (empty? word)\n\
    \          count\n          (if (is-consonant? (first word))\n              (count-consonants-iter\
    \ (rest word) (+ count 1))\n              (count-consonants-iter (rest word) count))))\n\
    \    (count-consonants-iter word 0))\n  (define (select-words-iter s n result)\n\
    \    (if (empty? s)\n        result\n        (let ((word (first (regexp-match\
    \ #rx\"\\w+\" s))))\n          (if (= n (count-consonants word))\n           \
    \   (select-words-iter (regexp-replace #rx\"\\w+\" s \"\") n (append result (list\
    \ word)))\n              (select-words-iter (regexp-replace #rx\"\\w+\" s \"\"\
    ) n result)))))\n  (select-words-iter s n '()))\n", "  (if (string=? s \"\")\n\
    \      '()\n      (let ([w (string-tokenize s)])\n        (if (equal? (count-consonants\
    \ (car w)) n)\n            (cons (car w) (select_words (string-join (cdr w) \"\
    \ \") n))\n            (select_words (string-join (cdr w) \" \") n)))))\n", " \
    \ (define (consonant? c)\n    (member c '(\"b\" \"c\" \"d\" \"f\" \"g\" \"h\"\
    \ \"j\" \"k\" \"l\" \"m\" \"n\" \"p\" \"q\" \"r\" \"s\" \"t\" \"v\" \"w\" \"x\"\
    \ \"y\" \"z\")))\n  (define (count-consonants word)\n    (cond\n      [(empty?\
    \ word) 0]\n      [(consonant? (first word)) (+ 1 (count-consonants (rest word)))]\n\
    \      [else (count-consonants (rest word))]))\n  (define (select-words-helper\
    \ s n result)\n    (cond\n      [(empty? s) result]\n      [(count-consonants\
    \ (first s)) (= n (count-consonants (first s))) (select-words-helper (rest s)\
    \ n (append result (list (first s))))]\n      [else (select-words-helper (rest\
    \ s) n result)]))\n  (select-words-helper (string-split s) n '()))\n", "  (if\
    \ (empty? s)\n      '()\n      (let* ([words (string-split s)]\n             [words-with-n-consonants\
    \ (filter (lambda (word)\n                                                (= n\
    \ (count-consonants word)))\n                                              words)])\n\
    \        words-with-n-consonants)))\n", "  (define (select-words-helper s n)\n\
    \    (cond [(empty? s) empty]\n          [(= n (count-consonants (first s)))\n\
    \           (cons (first s) (select-words-helper (rest s) n))]\n          [else\
    \ (select-words-helper (rest s) n)]))\n  (select-words-helper (string-split s)\
    \ n))\n", "  (define (is_consonant? c)\n    (or (equal? c #\\b)\n        (equal?\
    \ c #\\c)\n        (equal? c #\\d)\n        (equal? c #\\f)\n        (equal? c\
    \ #\\g)\n        (equal? c #\\h)\n        (equal? c #\\j)\n        (equal? c #\\\
    k)\n        (equal? c #\\l)\n        (equal? c #\\m)\n        (equal? c #\\n)\n\
    \        (equal? c #\\p)\n        (equal? c #\\q)\n        (equal? c #\\r)\n \
    \       (equal? c #\\s)\n        (equal? c #\\t)\n        (equal? c #\\v)\n  \
    \      (equal? c #\\w)\n        (equal? c #\\x)\n        (equal? c #\\y)\n   \
    \     (equal? c #\\z)))\n  (define (count_consonants word)\n    (if (empty? word)\n\
    \        0\n        (if (is_consonant? (first word))\n            (+ 1 (count_consonants\
    \ (rest word)))\n            (count_consonants (rest word)))))\n  (define (select_words_iter\
    \ s n acc)\n    (if (empty? s)\n        acc\n        (let ((word (first s)))\n\
    \          (if (= n (count_consonants word))\n              (select_words_iter\
    \ (rest s) n (append acc (list word)))\n              (select_words_iter (rest\
    \ s) n acc)))))\n  (select_words_iter (string-split s) n '()))\n", "  (if (empty?\
    \ s)\n      '()\n      (let ([w (regexp-match #rx\"^[a-zA-Z]+\" s)])\n       \
    \ (if (and w (= n (count-consonants (car w))))\n            (cons (car w) (select_words\
    \ (regexp-replace #rx\"^[a-zA-Z]+\" s \"\") n))\n            (select_words (regexp-replace\
    \ #rx\"^[a-zA-Z]+\" s \"\") n)))))\n", "  (if (string=? s \"\")\n      '()\n \
    \     (let ([w (string-tokenize s)])\n        (filter (lambda (x) (= n (count-consonants\
    \ x))) w))))\n", "  (define (is-consonant? c)\n    (not (or (char-ci=? c #\\a)\
    \ (char-ci=? c #\\e) (char-ci=? c #\\i) (char-ci=? c #\\o) (char-ci=? c #\\u))))\n\
    \  (define (count-consonants s)\n    (if (string-empty? s)\n        0\n      \
    \  (+ (if (is-consonant? (string-ref s 0)) 1 0)\n           (count-consonants\
    \ (string-tail s)))))\n  (define (select-words-helper s n)\n    (if (string-empty?\
    \ s)\n        '()\n        (let ((word (string-trim (string-take-while (lambda\
    \ (c) (not (char-whitespace? c))) s))))\n          (if (= n (count-consonants\
    \ word))\n              (cons word (select-words-helper (string-drop-while (lambda\
    \ (c) (not (char-whitespace? c))) s) n))\n              (select-words-helper (string-drop-while\
    \ (lambda (c) (not (char-whitespace? c))) s) n)))))\n  (select-words-helper s\
    \ n))\n", "  (define (is-consonant? c)\n    (not (or (char-ci=? c #\\a)\n    \
    \         (char-ci=? c #\\e)\n             (char-ci=? c #\\i)\n             (char-ci=?\
    \ c #\\o)\n             (char-ci=? c #\\u))))\n  (define (count-consonants word)\n\
    \    (define (count-consonants-iter word count)\n      (if (empty? word)\n   \
    \       count\n          (if (is-consonant? (first word))\n              (count-consonants-iter\
    \ (rest word) (+ count 1))\n              (count-consonants-iter (rest word) count))))\n\
    \    (count-consonants-iter word 0))\n  (define (select-words-iter s n result)\n\
    \    (if (empty? s)\n        result\n        (let ((word (string-trim (first (string-split\
    \ s #\\space)))))\n          (if (= n (count-consonants word))\n             \
    \ (select-words-iter (rest (string-split s #\\space)) n (append result (list word)))\n\
    \              (select-words-iter (rest (string-split s #\\space)) n result)))))\n\
    \  (select-words-iter s n '()))\n", "  (if (empty? s)\n      '()\n      (let ([words\
    \ (string-split s #\\space)])\n        (filter (lambda (w) (= n (count-consonants\
    \ w))) words))))\n", "  (define (is-consonant? c)\n    (member c '(\"b\" \"c\"\
    \ \"d\" \"f\" \"g\" \"h\" \"j\" \"k\" \"l\" \"m\" \"n\" \"p\" \"q\" \"r\" \"s\"\
    \ \"t\" \"v\" \"w\" \"x\" \"z\")))\n  (define (count-consonants word)\n    (cond\
    \ ((null? word) 0)\n          ((is-consonant? (car word)) (+ 1 (count-consonants\
    \ (cdr word))))\n          (else (count-consonants (cdr word)))))\n  (define (select-words-helper\
    \ words n)\n    (cond ((null? words) '())\n          ((= n (count-consonants (car\
    \ words))) (cons (car words) (select-words-helper (cdr words) n)))\n         \
    \ (else (select-words-helper (cdr words) n))))\n  (select-words-helper (string-split\
    \ s) n))\n", "  (define (is_consonant? c)\n    (cond\n      [(char-ci=? c #\\\
    a) #f]\n      [(char-ci=? c #\\e) #f]\n      [(char-ci=? c #\\i) #f]\n      [(char-ci=?\
    \ c #\\o) #f]\n      [(char-ci=? c #\\u) #f]\n      [else #t]))\n  (define (count_consonants\
    \ word)\n    (cond\n      [(empty? word) 0]\n      [(is_consonant? (first word))\
    \ (+ 1 (count_consonants (rest word)))]\n      [else (count_consonants (rest word))]))\n\
    \  (define (select_words_iter s n acc)\n    (cond\n      [(empty? s) acc]\n  \
    \    [(count_consonants (first s)) (= n (count_consonants (first s)))]\n     \
    \ [else (select_words_iter (rest s) n (append acc (list (first s))))]))\n  (select_words_iter\
    \ (string-split s) n '()))\n", "  (if (string=? s \"\")\n      '()\n      (let*\
    \ ([words (string-split s #\\space)]\n             [words-with-n-consonants (filter\
    \ (\u03BB (w) (= n (count-consonants w))) words)])\n        words-with-n-consonants)))\n",
  "  (cond\n    [(empty? s) empty]\n    [(= n (count-consonants (first (string-split\
    \ s #\\space))))\n     (cons (first (string-split s #\\space))\n           (select_words\
    \ (rest (string-split s #\\space)) n))]\n    [else (select_words (rest (string-split\
    \ s #\\space)) n)]))\n", "  (define (is-consonant? c)\n    (cond\n      [(member\
    \ c '(\"a\" \"e\" \"i\" \"o\" \"u\")) #f]\n      [else #t]))\n  (define (count-consonants\
    \ word)\n    (cond\n      [(empty? word) 0]\n      [(is-consonant? (first word))\
    \ (+ 1 (count-consonants (rest word)))]\n      [else (count-consonants (rest word))]))\n\
    \  (define (select-words-helper words n)\n    (cond\n      [(empty? words) empty]\n\
    \      [(= n (count-consonants (first words)))\n       (cons (first words) (select-words-helper\
    \ (rest words) n))]\n      [else (select-words-helper (rest words) n)]))\n  (select-words-helper\
    \ (string-split s) n))\n", "  (if (string=? s \"\")\n      '()\n      (let* ([words\
    \ (string-split s)]\n             [consonants (string-&gt;list \"bcdfghjklmnpqrstvwxyz\"\
    )]\n             [consonant-count (lambda (word)\n                           \
    \     (apply + (map (lambda (c)\n                                            \
    \    (if (member c consonants)\n                                             \
    \       1\n                                                    0))\n         \
    \                                     (string-&gt;list word))))]\n           \
    \  [selected-words (filter (lambda (word)\n                                  \
    \     (= (consonant-count word) n))\n                                     words)])\n\
    \        selected-words)))\n</code>\n", "  (cond [(empty? s) empty]\n        [(=\
    \ (count-consonants (first s)) n)\n         (cons (first s) (select_words (rest\
    \ s) n))]\n        [else (select_words (rest s) n)]))\n", "  (define (is-consonant?\
    \ c)\n    (cond\n      [(member c '(\"a\" \"e\" \"i\" \"o\" \"u\")) #f]\n    \
    \  [else #t]))\n  (define (count-consonants word)\n    (cond\n      [(empty? word)\
    \ 0]\n      [(is-consonant? (first word)) (+ 1 (count-consonants (rest word)))]\n\
    \      [else (count-consonants (rest word))]))\n  (define (select-words-helper\
    \ words n)\n    (cond\n      [(empty? words) empty]\n      [(= n (count-consonants\
    \ (first words)))\n       (cons (first words) (select-words-helper (rest words)\
    \ n))]\n      [else (select-words-helper (rest words) n)]))\n  (select-words-helper\
    \ (string-split s) n))\n", "  (define (is_consonant? c)\n    (not (member c '(#\\\
    a #\\e #\\i #\\o #\\u))))\n  (define (count-consonants word)\n    (cond [(empty?\
    \ word) 0]\n          [(is_consonant? (first word)) (+ 1 (count-consonants (rest\
    \ word)))]\n          [else (count-consonants (rest word))]))\n  (define (select-words-iter\
    \ s n result)\n    (cond [(empty? s) result]\n          [(= n (count-consonants\
    \ (first s))) (select-words-iter (rest s) n (append result (list (first s))))]\n\
    \          [else (select-words-iter (rest s) n result)]))\n  (select-words-iter\
    \ (string-split s) n '()))\n", "  (define (is-consonant? c)\n    (not (or (char-alphabetic?\
    \ c) (char-whitespace? c))))\n  (define (count-consonants s)\n    (if (string-empty?\
    \ s)\n        0\n        (+ (if (is-consonant? (string-ref s 0)) 1 0)\n      \
    \     (count-consonants (substring s 1)))))\n  (define (select-words-helper s\
    \ n acc)\n    (if (string-empty? s)\n        (reverse acc)\n        (let ((word\
    \ (string-trim s)))\n          (if (= n (count-consonants word))\n           \
    \   (select-words-helper (substring s (string-length word)) n (cons word acc))\n\
    \              (select-words-helper (substring s (string-length word)) n acc)))))\n\
    \  (select-words-helper s n '()))\n", "  (cond [(empty? s) empty]\n        [(=\
    \ n (count-consonants (first s))) (cons (first s) (select_words (rest s) n))]\n\
    \        [else (select_words (rest s) n)]))\n", "  (if (empty? s)\n      '()\n\
    \      (let ([words (string-split s)])\n        (filter (lambda (w) (= n (count-consonants\
    \ w))) words))))\n", "  (filter (lambda (x) (= n (count-consonants x))) (string-split\
    \ s)))\n", "  (define (is_consonant? c)\n    (cond\n      [(member c '(\"a\" \"\
    e\" \"i\" \"o\" \"u\")) #f]\n      [else #t]))\n  (define (count_consonants word)\n\
    \    (cond\n      [(empty? word) 0]\n      [(is_consonant? (first word)) (+ 1\
    \ (count_consonants (rest word)))]\n      [else (count_consonants (rest word))]))\n\
    \  (define (select_words_helper s n acc)\n    (cond\n      [(empty? s) acc]\n\
    \      [(= n (count_consonants (first s))) (select_words_helper (rest s) n (append\
    \ acc (list (first s))))]\n      [else (select_words_helper (rest s) n acc)]))\n\
    \  (select_words_helper (string-split s) n '()))\n", "  (define (is-consonant?\
    \ c)\n    (not (member c '(#\\a #\\e #\\i #\\o #\\u))))\n  (define (count-consonants\
    \ s)\n    (cond ((null? s) 0)\n          ((is-consonant? (car s)) (+ 1 (count-consonants\
    \ (cdr s))))\n          (else (count-consonants (cdr s)))))\n  (define (select-words-helper\
    \ s n acc)\n    (cond ((null? s) acc)\n          ((= n (count-consonants (car\
    \ s))) (select-words-helper (cdr s) n (cons (car s) acc)))\n          (else (select-words-helper\
    \ (cdr s) n acc))))\n  (reverse (select-words-helper (string-split s) n '())))\n",
  "  (cond\n    [(empty? s) empty]\n    [(= n (count-consonants (first (string-split\
    \ s #\\space))))\n     (cons (first (string-split s #\\space)) (select_words (rest\
    \ (string-split s #\\space)) n))]\n    [else (select_words (rest (string-split\
    \ s #\\space)) n)]))\n", "  (cond\n    [(empty? s) empty]\n    [(= n (count-consonants\
    \ (car (string-split s #\\space))))\n     (cons (car (string-split s #\\space))\n\
    \           (select_words (cdr (string-split s #\\space)) n))]\n    [else (select_words\
    \ (cdr (string-split s #\\space)) n)]))\n", "  (define (consonant? c)\n    (member\
    \ c '(#\\b #\\c #\\d #\\f #\\g #\\h #\\j #\\k #\\l #\\m #\\n #\\p #\\q #\\r #\\\
    s #\\t #\\v #\\w #\\x #\\y #\\z)))\n  (define (count-consonants word)\n    (define\
    \ (count-consonants-iter word count)\n      (if (empty? word)\n          count\n\
    \          (if (consonant? (first word))\n              (count-consonants-iter\
    \ (rest word) (+ count 1))\n              (count-consonants-iter (rest word) count))))\n\
    \    (count-consonants-iter word 0))\n  (define (select-words-iter s n words)\n\
    \    (if (empty? s)\n        words\n        (if (= n (count-consonants (first\
    \ s)))\n            (select-words-iter (rest s) n (append words (list (first s))))\n\
    \            (select-words-iter (rest s) n words))))\n  (select-words-iter (string-split\
    \ s) n '()))\n", "  (define (is_vowel? c)\n    (member c '(#\\a #\\e #\\i #\\\
    o #\\u)))\n  (define (count-consonants s)\n    (cond [(empty? s) 0]\n        \
    \  [(is_vowel? (first s)) (count-consonants (rest s))]\n          [else (+ 1 (count-consonants\
    \ (rest s)))]))\n  (define (select-words-iter s n acc)\n    (cond [(empty? s)\
    \ acc]\n          [(is_vowel? (first s)) (select-words-iter (rest s) n acc)]\n\
    \          [else (select-words-iter (rest s) n (cons (first s) acc))]))\n  (define\
    \ (select-words-iter2 s n acc)\n    (cond [(empty? s) acc]\n          [(is_vowel?\
    \ (first s)) (select-words-iter2 (rest s) n acc)]\n          [else (select-words-iter2\
    \ (rest s) n (cons (first s) acc))]))\n  (define (select-words-iter3 s n acc)\n\
    \    (cond [(empty? s) acc]\n          [(is_vowel? (first s)) (select-words-iter3\
    \ (rest s) n acc)]\n          [else (select-words-iter3 (rest s) n (cons (first\
    \ s) acc))]))\n  (define (select-words-iter4 s n acc)\n    (cond [(empty? s) acc]\n\
    \          [(is_vowel? (first s)) (select-words-iter4 (rest s) n acc)]\n     \
    \     [else (select-words-iter4 (rest s) n (cons (first s) acc))]))\n  (define\
    \ (select-words-iter5 s n acc)\n    (cond [(empty? s) acc]\n          [(is_vowel?\
    \ (first s)) (select-words-iter5 (rest s) n acc)]\n          [else (select-words-iter5\
    \ (rest s) n (cons (first s) acc))]))\n  (define (select-words-iter6 s n acc)\n\
    \    (cond [(", "  (define (is-consonant? c)\n    (not (or (char-ci=? c #\\a)\
    \ (char-ci=? c #\\e) (char-ci=? c #\\i) (char-ci=? c #\\o) (char-ci=? c #\\u))))\n\
    \  (define (count-consonants word)\n    (cond ((null? word) 0)\n          ((is-consonant?\
    \ (car word)) (+ 1 (count-consonants (cdr word))))\n          (else (count-consonants\
    \ (cdr word)))))\n  (define (select-words-helper s n)\n    (cond ((null? s) '())\n\
    \          ((= n (count-consonants (car s))) (cons (car s) (select-words-helper\
    \ (cdr s) n)))\n          (else (select-words-helper (cdr s) n))))\n  (select-words-helper\
    \ (string-split s) n))\n", "  (define (is-consonant? c)\n    (cond\n      [(member\
    \ c '(#\\a #\\e #\\i #\\o #\\u)) #f]\n      [else #t]))\n  (define (count-consonants\
    \ w)\n    (define (count-consonants-iter w n)\n      (cond\n        [(empty? w)\
    \ n]\n        [(is-consonant? (first w)) (count-consonants-iter (rest w) (+ n\
    \ 1))]\n        [else (count-consonants-iter (rest w) n)]))\n    (count-consonants-iter\
    \ w 0))\n  (define (select-words-iter s n acc)\n    (cond\n      [(empty? s) acc]\n\
    \      [(= n (count-consonants (first s))) (select-words-iter (rest s) n (append\
    \ acc (list (first s))))]\n      [else (select-words-iter (rest s) n acc)]))\n\
    \  (select-words-iter (string-split s) n '()))\n", "  (define (is_consonant c)\n\
    \    (member c '(\"b\" \"c\" \"d\" \"f\" \"g\" \"h\" \"j\" \"k\" \"l\" \"m\" \"\
    n\" \"p\" \"q\" \"r\" \"s\" \"t\" \"v\" \"w\" \"x\" \"y\" \"z\")))\n  (define\
    \ (count_consonants s)\n    (cond ((null? s) 0)\n          ((is_consonant (car\
    \ s)) (+ 1 (count_consonants (cdr s))))\n          (else (count_consonants (cdr\
    \ s)))))\n  (define (select_words_iter s n acc)\n    (cond ((null? s) acc)\n \
    \         ((equal? n (count_consonants (car s))) (select_words_iter (cdr s) n\
    \ (append acc (list (car s)))))\n          (else (select_words_iter (cdr s) n\
    \ acc))))\n  (select_words_iter (string-split s) n '()))\n", "  (define (consonant?\
    \ c)\n    (member c '(#\\b #\\c #\\d #\\f #\\g #\\h #\\j #\\k #\\l #\\m #\\n #\\\
    p #\\q #\\r #\\s #\\t #\\v #\\w #\\x #\\y #\\z)))\n  (define (count-consonants\
    \ word)\n    (cond ((null? word) 0)\n          ((consonant? (car word)) (+ 1 (count-consonants\
    \ (cdr word))))\n          (else (count-consonants (cdr word)))))\n  (define (select-words-helper\
    \ s n)\n    (cond ((null? s) '())\n          ((= n (count-consonants (car s)))\
    \ (cons (car s) (select-words-helper (cdr s) n)))\n          (else (select-words-helper\
    \ (cdr s) n))))\n  (select-words-helper (string-split s) n))\n", "  (define (is-consonant?\
    \ c)\n    (not (member c '(\"a\" \"e\" \"i\" \"o\" \"u\"))))\n  (define (count-consonants\
    \ word)\n    (cond [(empty? word) 0]\n          [(is-consonant? (first word))\
    \ (+ 1 (count-consonants (rest word)))]\n          [else (count-consonants (rest\
    \ word))]))\n  (define (select-words-helper words n)\n    (cond [(empty? words)\
    \ empty]\n          [(= n (count-consonants (first words)))\n           (cons\
    \ (first words) (select-words-helper (rest words) n))]\n          [else (select-words-helper\
    \ (rest words) n)]))\n  (select-words-helper (string-split s) n))\n", "  (if (string=?\
    \ s \"\")\n      '()\n      (let ([w (string-tokenize s)])\n        (filter (lambda\
    \ (x) (= n (count-consonants x))) w))))\n", "  (define (is-consonant? c)\n   \
    \ (cond\n      [(char-ci=? c #\\a) #f]\n      [(char-ci=? c #\\e) #f]\n      [(char-ci=?\
    \ c #\\i) #f]\n      [(char-ci=? c #\\o) #f]\n      [(char-ci=? c #\\u) #f]\n\
    \      [else #t]))\n  (define (count-consonants word)\n    (cond\n      [(empty?\
    \ word) 0]\n      [(is-consonant? (first word)) (+ 1 (count-consonants (rest word)))]\n\
    \      [else (count-consonants (rest word))]))\n  (define (select-words-helper\
    \ words n)\n    (cond\n      [(empty? words) empty]\n      [(= n (count-consonants\
    \ (first words)))\n       (cons (first words) (select-words-helper (rest words)\
    \ n))]\n      [else (select-words-helper (rest words) n)]))\n  (select-words-helper\
    \ (string-split s) n))\n", "  (define (is_consonant? c)\n    (cond\n      [(char-ci=?\
    \ c #\\a) #f]\n      [(char-ci=? c #\\e) #f]\n      [(char-ci=? c #\\i) #f]\n\
    \      [(char-ci=? c #\\o) #f]\n      [(char-ci=? c #\\u) #f]\n      [else #t]))\n\
    \  (define (count_consonants word)\n    (cond\n      [(empty? word) 0]\n     \
    \ [(is_consonant? (first word)) (+ 1 (count_consonants (rest word)))]\n      [else\
    \ (count_consonants (rest word))]))\n  (define (select_words_helper s n)\n   \
    \ (cond\n      [(empty? s) empty]\n      [(= n (count_consonants (first s))) (cons\
    \ (first s) (select_words_helper (rest s) n))]\n      [else (select_words_helper\
    \ (rest s) n)]))\n  (select_words_helper (string-split s) n))\n", "  (filter (lambda\
    \ (x) (= n (count-consonants x))) (string-split s #\\space)))\n", "  (define (is-consonant?\
    \ c)\n    (cond\n      [(member c '(\"a\" \"e\" \"i\" \"o\" \"u\")) #f]\n    \
    \  [else #t]))\n  (define (count-consonants s)\n    (cond\n      [(empty? s) 0]\n\
    \      [(is-consonant? (first s)) (+ 1 (count-consonants (rest s)))]\n      [else\
    \ (count-consonants (rest s))]))\n  (define (select-words-helper s n)\n    (cond\n\
    \      [(empty? s) '()]\n      [(= n (count-consonants (first s))) (cons (first\
    \ s) (select-words-helper (rest s) n))]\n      [else (select-words-helper (rest\
    \ s) n)]))\n  (select-words-helper (string-split s) n))\n", "  (cond\n    [(empty?\
    \ s) empty]\n    [(= n (count-consonants (first (string-split s #\\space))))\n\
    \     (cons (first (string-split s #\\space)) (select_words (rest (string-split\
    \ s #\\space)) n))]\n    [else (select_words (rest (string-split s #\\space))\
    \ n)]))\n", "  (if (string=? s \"\")\n      '()\n      (let ([word (string-tokenize\
    \ s)])\n        (if (= n (count-consonants word))\n            (cons word (select_words\
    \ (substring s (string-length word)) n))\n            (select_words (substring\
    \ s (string-length word)) n)))))\n", "  (define (is_consonant c)\n    (member\
    \ c '(\"b\" \"c\" \"d\" \"f\" \"g\" \"h\" \"j\" \"k\" \"l\" \"m\" \"n\" \"p\"\
    \ \"q\" \"r\" \"s\" \"t\" \"v\" \"w\" \"x\" \"y\" \"z\")))\n  (define (count_consonants\
    \ word)\n    (define (count_consonants_iter word count)\n      (if (empty? word)\n\
    \          count\n          (if (is_consonant (first word))\n              (count_consonants_iter\
    \ (rest word) (+ count 1))\n              (count_consonants_iter (rest word) count))))\n\
    \    (count_consonants_iter word 0))\n  (define (select_words_iter s n result)\n\
    \    (if (empty? s)\n        result\n        (let ((word (first (regexp-match\
    \ #rx\"\\w+\" s))))\n          (if (= n (count_consonants word))\n           \
    \   (select_words_iter (string-drop s (string-length word)) n (append result (list\
    \ word)))\n              (select_words_iter (string-drop s (string-length word))\
    \ n result)))))\n  (select_words_iter s n '()))\n", "  (define (is-consonant?\
    \ c)\n    (member c '(\"b\" \"c\" \"d\" \"f\" \"g\" \"h\" \"j\" \"k\" \"l\" \"\
    m\" \"n\" \"p\" \"q\" \"r\" \"s\" \"t\" \"v\" \"w\" \"x\" \"z\")))\n  (define\
    \ (count-consonants word)\n    (cond [(empty? word) 0]\n          [(is-consonant?\
    \ (first word)) (+ 1 (count-consonants (rest word)))]\n          [else (count-consonants\
    \ (rest word))]))\n  (define (select-words-helper words n)\n    (cond [(empty?\
    \ words) empty]\n          [(= n (count-consonants (first words))) (cons (first\
    \ words) (select-words-helper (rest words) n))]\n          [else (select-words-helper\
    \ (rest words) n)]))\n  (select-words-helper (string-split s) n))\n", "  (define\
    \ (is_consonant? c)\n    (member c '(\"b\" \"c\" \"d\" \"f\" \"g\" \"h\" \"j\"\
    \ \"k\" \"l\" \"m\" \"n\" \"p\" \"q\" \"r\" \"s\" \"t\" \"v\" \"w\" \"x\" \"y\"\
    \ \"z\")))\n  (define (count-consonants word)\n    (cond ((null? word) 0)\n  \
    \        ((is_consonant? (car word)) (+ 1 (count-consonants (cdr word))))\n  \
    \        (else (count-consonants (cdr word)))))\n  (define (select-words-helper\
    \ words n)\n    (cond ((null? words) '())\n          ((= n (count-consonants (car\
    \ words))) (cons (car words) (select-words-helper (cdr words) n)))\n         \
    \ (else (select-words-helper (cdr words) n))))\n  (select-words-helper (string-split\
    \ s) n))\n", "  (define (consonant? c)\n    (or (char=? c #\\b)\n        (char=?\
    \ c #\\c)\n        (char=? c #\\d)\n        (char=? c #\\f)\n        (char=? c\
    \ #\\g)\n        (char=? c #\\h)\n        (char=? c #\\j)\n        (char=? c #\\\
    k)\n        (char=? c #\\l)\n        (char=? c #\\m)\n        (char=? c #\\n)\n\
    \        (char=? c #\\p)\n        (char=? c #\\q)\n        (char=? c #\\r)\n \
    \       (char=? c #\\s)\n        (char=? c #\\t)\n        (char=? c #\\v)\n  \
    \      (char=? c #\\w)\n        (char=? c #\\x)\n        (char=? c #\\y)\n   \
    \     (char=? c #\\z)))\n  (define (count-consonants word)\n    (if (string-empty?\
    \ word)\n        0\n        (if (consonant? (string-ref word 0))\n           \
    \ (+ 1 (count-consonants (substring word 1)))\n            (count-consonants (substring\
    \ word 1)))))\n  (define (select-words-helper s n)\n    (if (string-empty? s)\n\
    \        '()\n        (if (= n (count-consonants (car (string-split s #\\space))))\n\
    \            (cons (car (string-split s #\\space))\n                  (select-words-helper\
    \ (cdr (string-split s #\\space)) n))\n            (select-words-helper (cdr (string-split\
    \ s #\\space)) n))))\n  (select-words-helper s n))\n", "  (define (is-consonant?\
    \ c)\n    (not (member c '(#\\a #\\e #\\i #\\o #\\u))))\n  (define (count-consonants\
    \ s)\n    (cond [(empty? s) 0]\n          [(is-consonant? (first s)) (+ 1 (count-consonants\
    \ (rest s)))]\n          [else (count-consonants (rest s))]))\n  (define (select-words-helper\
    \ s n acc)\n    (cond [(empty? s) acc]\n          [(= n (count-consonants (first\
    \ s)))\n           (select-words-helper (rest s) n (append acc (list (first s))))]\n\
    \          [else (select-words-helper (rest s) n acc)]))\n  (select-words-helper\
    \ (string-split s) n '()))\n", "  (define (is-consonant? c)\n    (cond\n     \
    \ [(member c '(#\\a #\\e #\\i #\\o #\\u)) #f]\n      [else #t]))\n  (define (count-consonants\
    \ w)\n    (cond\n      [(empty? w) 0]\n      [(is-consonant? (first w)) (+ 1 (count-consonants\
    \ (rest w)))]\n      [else (count-consonants (rest w))]))\n  (define (select-words-helper\
    \ s n)\n    (cond\n      [(empty? s) empty]\n      [(= n (count-consonants (first\
    \ s)))\n       (cons (first s) (select-words-helper (rest s) n))]\n      [else\
    \ (select-words-helper (rest s) n)]))\n  (select-words-helper (string-split s)\
    \ n))\n", "  (define (is_vowel c)\n    (member c '(#\\a #\\e #\\i #\\o #\\u)))\n\
    \  (define (count-consonants word)\n    (define (count-consonants-iter word count)\n\
    \      (if (empty? word)\n          count\n          (if (is_vowel (first word))\n\
    \              (count-consonants-iter (rest word) count)\n              (count-consonants-iter\
    \ (rest word) (+ count 1)))))\n    (count-consonants-iter word 0))\n  (define\
    \ (select-words-iter words n result)\n    (if (empty? words)\n        result\n\
    \        (if (= n (count-consonants (first words)))\n            (select-words-iter\
    \ (rest words) n (append result (list (first words))))\n            (select-words-iter\
    \ (rest words) n result))))\n  (select-words-iter (string-split s) n '()))\n",
  "  (if (string=? s \"\")\n      '()\n      (let ([w (string-split s #\\space)])\n\
    \        (filter (lambda (x) (= n (count-consonants x))) w))))\n", "  (filter\
    \ (lambda (w) (= n (count-consonants w))) (string-split s)))\n", "  (define (is-consonant?\
    \ c)\n    (member c '(#\\b #\\c #\\d #\\f #\\g #\\h #\\j #\\k #\\l #\\m #\\n #\\\
    p #\\q #\\r #\\s #\\t #\\v #\\w #\\x #\\y #\\z)))\n  (define (count-consonants\
    \ s)\n    (cond ((null? s) 0)\n          ((is-consonant? (car s)) (+ 1 (count-consonants\
    \ (cdr s))))\n          (else (count-consonants (cdr s)))))\n  (define (select-words-helper\
    \ s n acc)\n    (cond ((null? s) acc)\n          ((= n (count-consonants (car\
    \ s))) (select-words-helper (cdr s) n (append acc (list (car s)))))\n        \
    \  (else (select-words-helper (cdr s) n acc))))\n  (select-words-helper (string-split\
    \ s) n '()))\n", "  (define (is-consonant? c)\n    (not (member c '(\"a\" \"e\"\
    \ \"i\" \"o\" \"u\"))))\n  (define (count-consonants s)\n    (cond ((null? s)\
    \ 0)\n          ((is-consonant? (car s)) (+ 1 (count-consonants (cdr s))))\n \
    \         (else (count-consonants (cdr s)))))\n  (define (select-words-helper\
    \ s n result)\n    (cond ((null? s) result)\n          ((= n (count-consonants\
    \ (car s)))\n           (select-words-helper (cdr s) n (append result (list (car\
    \ s)))))\n          (else (select-words-helper (cdr s) n result))))\n  (select-words-helper\
    \ (string-split s) n '()))\n", "  (define (is_consonant c)\n    (member c '(#\\\
    b #\\c #\\d #\\f #\\g #\\h #\\j #\\k #\\l #\\m #\\n #\\p #\\q #\\r #\\s #\\t #\\\
    v #\\w #\\x #\\y #\\z)))\n  (define (count_consonants s)\n    (if (empty? s)\n\
    \        0\n        (+ (if (is_consonant (first s)) 1 0) (count_consonants (rest\
    \ s)))))\n  (define (select_words_iter s n acc)\n    (if (empty? s)\n        (reverse\
    \ acc)\n        (let ([w (regexp-match #rx\"^[a-zA-Z]+\" s)])\n          (if (and\
    \ w (= n (count_consonants (first w))))\n              (select_words_iter (regexp-replace\
    \ #rx\"^[a-zA-Z]+\" s \"\") n (cons (first w) acc))\n              (select_words_iter\
    \ (regexp-replace #rx\"^[a-zA-Z]+\" s \"\") n acc)))))\n  (select_words_iter s\
    \ n '()))\n", "  (define (is_consonant? c)\n    (cond\n      [(char-ci=? c #\\\
    a) #f]\n      [(char-ci=? c #\\e) #f]\n      [(char-ci=? c #\\i) #f]\n      [(char-ci=?\
    \ c #\\o) #f]\n      [(char-ci=? c #\\u) #f]\n      [else #t]))\n  (define (count_consonants\
    \ word)\n    (cond\n      [(empty? word) 0]\n      [(is_consonant? (first word))\
    \ (+ 1 (count_consonants (rest word)))]\n      [else (count_consonants (rest word))]))\n\
    \  (define (select_words_iter s n acc)\n    (cond\n      [(empty? s) acc]\n  \
    \    [(count_consonants (first s)) (= n (count_consonants (first s)))]\n     \
    \ [else (select_words_iter (rest s) n (cons (first s) acc))]))\n  (select_words_iter\
    \ (string-split s) n '()))\n", "  (define (is-consonant? c)\n    (not (or (char-alphabetic?\
    \ c) (char-whitespace? c))))\n  (define (count-consonants word)\n    (for/fold\
    \ ([count 0]) ([c (in-string word)])\n      (if (is-consonant? c)\n          (+\
    \ count 1)\n          count)))\n  (for/list ([word (in-string s)])\n    (if (=\
    \ n (count-consonants word))\n        word\n        #f)))\n", "  (if (string=?\
    \ s \"\")\n      '()\n      (let* ([words (string-split s)]\n             [consonants\
    \ (lambda (word)\n                           (let* ([vowels \"aeiou\"]\n     \
    \                             [count (lambda (c)\n                           \
    \                (if (member c vowels)\n                                     \
    \          0\n                                               1))])\n         \
    \                    (apply + (map count word))))]\n             [filtered (filter\
    \ (lambda (word)\n                                 (= (consonants word) n))\n\
    \                               words)])\n        filtered)))\n", "  (filter (lambda\
    \ (word) (= n (count-consonants word))) (string-split s)))\n", "  (if (string=?\
    \ s \"\")\n      '()\n      (let ((words (string-split s #\\space)))\n       \
    \ (for/list ([word words])\n          (if (= (count-consonants word) n)\n    \
    \          word)))))\n", "  (define (is_consonant? c)\n    (not (or (char-ci=?\
    \ c #\\a)\n             (char-ci=? c #\\e)\n             (char-ci=? c #\\i)\n\
    \             (char-ci=? c #\\o)\n             (char-ci=? c #\\u))))\n  (define\
    \ (count_consonants word)\n    (define (count_consonants_iter word count)\n  \
    \    (if (empty? word)\n          count\n          (if (is_consonant? (first word))\n\
    \              (count_consonants_iter (rest word) (+ count 1))\n             \
    \ (count_consonants_iter (rest word) count))))\n    (count_consonants_iter word\
    \ 0))\n  (define (select_words_iter s n words)\n    (if (empty? s)\n        words\n\
    \        (if (= n (count_consonants (first words)))\n            (select_words_iter\
    \ (rest s) n (cons (first words) words))\n            (select_words_iter (rest\
    \ s) n words))))\n  (select_words_iter (string-split s) n '()))\n", "  (define\
    \ (consonant? c)\n    (member c '(\"b\" \"c\" \"d\" \"f\" \"g\" \"h\" \"j\" \"\
    k\" \"l\" \"m\" \"n\" \"p\" \"q\" \"r\" \"s\" \"t\" \"v\" \"w\" \"x\" \"y\" \"\
    z\")))\n  (define (count-consonants word)\n    (cond ((empty? word) 0)\n     \
    \     ((consonant? (first word)) (+ 1 (count-consonants (rest word))))\n     \
    \     (else (count-consonants (rest word)))))\n  (define (select-words-iter words\
    \ n)\n    (cond ((empty? words) empty)\n          ((= n (count-consonants (first\
    \ words))) (cons (first words) (select-words-iter (rest words) n)))\n        \
    \  (else (select-words-iter (rest words) n))))\n  (select-words-iter (string-split\
    \ s) n))\n", "  (define (consonant? c)\n    (member c '(\"b\" \"c\" \"d\" \"f\"\
    \ \"g\" \"h\" \"j\" \"k\" \"l\" \"m\" \"n\" \"p\" \"q\" \"r\" \"s\" \"t\" \"v\"\
    \ \"w\" \"x\" \"y\" \"z\")))\n  (define (count-consonants word)\n    (if (empty?\
    \ word)\n        0\n        (+ (if (consonant? (first word)) 1 0)\n          \
    \ (count-consonants (rest word)))))\n  (define (select-words-iter words n)\n \
    \   (if (empty? words)\n        '()\n        (if (= n (count-consonants (first\
    \ words)))\n            (cons (first words) (select-words-iter (rest words) n))\n\
    \            (select-words-iter (rest words) n))))\n  (select-words-iter (string-split\
    \ s) n))\n", "  (define (is-vowel? c)\n    (member c '(#\\a #\\e #\\i #\\o #\\\
    u)))\n  (define (count-consonants w)\n    (define (count-consonants-iter w i)\n\
    \      (if (&lt; i (string-length w))\n          (if (is-vowel? (string-ref w\
    \ i))\n              (count-consonants-iter w (+ i 1))\n              (+ 1 (count-consonants-iter\
    \ w (+ i 1))))\n          0))\n    (count-consonants-iter w 0))\n  (define (select-words-iter\
    \ s i)\n    (if (&lt; i (string-length s))\n        (let ((c (string-ref s i)))\n\
    \          (if (char-whitespace? c)\n              (select-words-iter s (+ i 1))\n\
    \              (let ((w (string-trim (string-take s i))))\n                (if\
    \ (= n (count-consonants w))\n                    (cons w (select-words-iter s\
    \ (+ i 1)))\n                    (select-words-iter s (+ i 1))))))\n        '()))\n\
    \  (select-words-iter s 0))\n</code>\n", "  (define (consonant? c)\n    (member\
    \ c '(#\\b #\\c #\\d #\\f #\\g #\\h #\\j #\\k #\\l #\\m #\\n #\\p #\\q #\\r #\\\
    s #\\t #\\v #\\w #\\x #\\y #\\z)))\n  (define (consonants s)\n    (cond ((empty?\
    \ s) 0)\n          ((consonant? (first s)) (+ 1 (consonants (rest s))))\n    \
    \      (else (consonants (rest s)))))\n  (define (select_words-helper s n)\n \
    \   (cond ((empty? s) empty)\n          ((= n (consonants (first s))) (cons (first\
    \ s) (select_words-helper (rest s) n)))\n          (else (select_words-helper\
    \ (rest s) n))))\n  (select_words-helper (string-split s) n))\n", "  (cond\n \
    \   [(empty? s) empty]\n    [(= n (count-consonants (first (string-split s #\\\
    space))))\n     (cons (first (string-split s #\\space)) (select_words (rest (string-split\
    \ s #\\space)) n))]\n    [else (select_words (rest (string-split s #\\space))\
    \ n)]))\n", "  (define (is-consonant? c)\n    (not (or (char-ci=? c #\\a)\n  \
    \           (char-ci=? c #\\e)\n             (char-ci=? c #\\i)\n            \
    \ (char-ci=? c #\\o)\n             (char-ci=? c #\\u))))\n  (define (count-consonants\
    \ word)\n    (define (count-consonants-iter word count)\n      (if (empty? word)\n\
    \          count\n          (if (is-consonant? (first word))\n              (count-consonants-iter\
    \ (rest word) (+ count 1))\n              (count-consonants-iter (rest word) count))))\n\
    \    (count-consonants-iter word 0))\n  (define (select-words-iter s n result)\n\
    \    (if (empty? s)\n        result\n        (let ((word (string-trim (first s))))\n\
    \          (if (= n (count-consonants word))\n              (select-words-iter\
    \ (rest s) n (append result (list word)))\n              (select-words-iter (rest\
    \ s) n result)))))\n  (select-words-iter (string-split s #\\space) n '()))\n",
  "  (if (string=? s \"\")\n      '()\n      (let* ([words (string-split s #\\space)]\n\
    \             [consonants (string-&gt;list \"bcdfghjklmnpqrstvwxyz\")]\n     \
    \        [consonant-count (lambda (word)\n                                (for/fold\
    \ ([count 0]) ([c (in-string word)])\n                                  (if (member\
    \ c consonants)\n                                      (+ count 1)\n         \
    \                             count)))])\n        (for/list ([word words]\n  \
    \                 #:when (= n (consonant-count word)))\n          word))))\n",
  "  (define (is_consonant? c)\n    (member c '(\"b\" \"c\" \"d\" \"f\" \"g\" \"h\"\
    \ \"j\" \"k\" \"l\" \"m\" \"n\" \"p\" \"q\" \"r\" \"s\" \"t\" \"v\" \"w\" \"x\"\
    \ \"y\" \"z\")))\n  (define (count-consonants word)\n    (cond\n      [(empty?\
    \ word) 0]\n      [(is_consonant? (first word)) (+ 1 (count-consonants (rest word)))]\n\
    \      [else (count-consonants (rest word))]))\n  (define (select-words-helper\
    \ words n)\n    (cond\n      [(empty? words) empty]\n      [(= n (count-consonants\
    \ (first words))) (cons (first words) (select-words-helper (rest words) n))]\n\
    \      [else (select-words-helper (rest words) n)]))\n  (select-words-helper (string-split\
    \ s) n))\n", "  (if (string=? s \"\")\n      '()\n      (let ([w (string-tokenize\
    \ s)])\n        (filter (lambda (x) (= n (count-consonants x))) w))))\n", "  (define\
    \ (is_consonant? c)\n    (cond\n      [(member c '(#\\a #\\e #\\i #\\o #\\u))\
    \ #f]\n      [else #t]))\n  (define (count_consonants word)\n    (cond\n     \
    \ [(empty? word) 0]\n      [(is_consonant? (first word)) (+ 1 (count_consonants\
    \ (rest word)))]\n      [else (count_consonants (rest word))]))\n  (define (select_words-iter\
    \ s n result)\n    (cond\n      [(empty? s) result]\n      [(count_consonants\
    \ (first s)) n]\n      [(select_words-iter (rest s) n (cons (first s) result))]\n\
    \      [else (select_words-iter (rest s) n result)]))\n  (select_words-iter (string-split\
    \ s) n '()))\n", "  (define (is-vowel? c)\n    (or (char=? c #\\a)\n        (char=?\
    \ c #\\e)\n        (char=? c #\\i)\n        (char=? c #\\o)\n        (char=? c\
    \ #\\u)))\n  (define (count-consonants word)\n    (define (count-consonants-iter\
    \ word count)\n      (if (string-empty? word)\n          count\n          (if\
    \ (is-vowel? (string-ref word 0))\n              (count-consonants-iter (substring\
    \ word 1) count)\n              (count-consonants-iter (substring word 1) (+ count\
    \ 1)))))\n    (count-consonants-iter word 0))\n  (define (select-words-iter s\
    \ n words)\n    (if (string-empty? s)\n        words\n        (let ((word (string-trim\
    \ (string-take-while (lambda (c) (not (char=? c #\\space))) s))))\n          (if\
    \ (= n (count-consonants word))\n              (select-words-iter (string-drop-while\
    \ (lambda (c) (not (char=? c #\\space))) s) n (cons word words))\n           \
    \   (select-words-iter (string-drop-while (lambda (c) (not (char=? c #\\space)))\
    \ s) n words)))))\n  (select-words-iter s n '()))\n", "  (cond\n    [(empty? s)\
    \ empty]\n    [(= n (count-consonants (first (string-split s #\\space))))\n  \
    \   (cons (first (string-split s #\\space))\n           (select_words (rest (string-split\
    \ s #\\space)) n))]\n    [else (select_words (rest (string-split s #\\space))\
    \ n)]))\n", "  (cond\n    [(empty? s) empty]\n    [(= n (count-consonants (first\
    \ (string-split s #\\space))))\n     (cons (first (string-split s #\\space)) (select_words\
    \ (rest (string-split s #\\space)) n))]\n    [else (select_words (rest (string-split\
    \ s #\\space)) n)]))\n", "  (cond\n    [(empty? s) empty]\n    [(= n (count-consonants\
    \ (first (string-split s #\\space))))\n     (cons (first (string-split s #\\space))\
    \ (select_words (rest (string-split s #\\space)) n))]\n    [else (select_words\
    \ (rest (string-split s #\\space)) n)]))\n", "  (define (consonant? c)\n    (member\
    \ c '(\"b\" \"c\" \"d\" \"f\" \"g\" \"h\" \"j\" \"k\" \"l\" \"m\" \"n\" \"p\"\
    \ \"q\" \"r\" \"s\" \"t\" \"v\" \"w\" \"x\" \"y\" \"z\")))\n  (define (count-consonants\
    \ s)\n    (cond\n      [(empty? s) 0]\n      [(consonant? (first s)) (+ 1 (count-consonants\
    \ (rest s)))]\n      [else (count-consonants (rest s))]))\n  (define (select-words\
    \ s n)\n    (cond\n      [(empty? s) empty]\n      [(= n (count-consonants (first\
    \ s))) (cons (first s) (select-words (rest s) n))]\n      [else (select-words\
    \ (rest s) n)]))\n  (select-words (string-split s) n))\n", "  (define (is-consonant?\
    \ c)\n    (not (member c '(#\\a #\\e #\\i #\\o #\\u))))\n  (define (count-consonants\
    \ word)\n    (for/fold ([count 0]) ([c (in-string word)])\n      (if (is-consonant?\
    \ c)\n          (add1 count)\n          count)))\n  (for/list ([word (in-list\
    \ (string-split s))])\n    (if (= n (count-consonants word))\n        word\n \
    \       #f)))\n", "  (define (is_consonant c)\n    (cond\n      [(member c '(\"\
    a\" \"e\" \"i\" \"o\" \"u\")) #f]\n      [else #t]))\n  (define (count_consonants\
    \ word)\n    (cond\n      [(empty? word) 0]\n      [(is_consonant (first word))\
    \ (+ 1 (count_consonants (rest word)))]\n      [else (count_consonants (rest word))]))\n\
    \  (define (select_words_iter s n acc)\n    (cond\n      [(empty? s) acc]\n  \
    \    [(count_consonants (first s)) (= n (count_consonants (first s)))]\n     \
    \ [else (select_words_iter (rest s) n (append acc (list (first s))))]))\n  (select_words_iter\
    \ (string-split s) n '()))\n", "  (cond\n    [(empty? s) empty]\n    [(= n (count-consonants\
    \ (first (string-split s #\\space))))\n     (cons (first (string-split s #\\space))\n\
    \           (select_words (rest (string-split s #\\space)) n))]\n    [else (select_words\
    \ (rest (string-split s #\\space)) n)]))\n", "  (cond\n    [(empty? s) empty]\n\
    \    [(= n (count-consonants (first s))) (cons (first s) (select_words (rest s)\
    \ n))]\n    [else (select_words (rest s) n)]))\n", "  (define (is_vowel? c)\n\
    \    (member c '(#\\a #\\e #\\i #\\o #\\u)))\n  (define (count-consonants word)\n\
    \    (define (count-consonants-iter word count)\n      (cond ((null? word) count)\n\
    \            ((is_vowel? (car word)) (count-consonants-iter (cdr word) count))\n\
    \            (else (count-consonants-iter (cdr word) (+ count 1)))))\n    (count-consonants-iter\
    \ word 0))\n  (define (select-words-iter words n count)\n    (cond ((null? words)\
    \ '())\n          ((= n (count-consonants (car words)))\n           (cons (car\
    \ words) (select-words-iter (cdr words) n count)))\n          (else (select-words-iter\
    \ (cdr words) n count))))\n  (select-words-iter (string-split s) n 0))\n", " \
    \ (define (is-vowel? c)\n    (member c '(#\\a #\\e #\\i #\\o #\\u)))\n  (define\
    \ (count-consonants s)\n    (cond\n      [(empty? s) 0]\n      [(is-vowel? (first\
    \ s)) (count-consonants (rest s))]\n      [else (+ 1 (count-consonants (rest s)))]))\n\
    \  (define (select-words-helper s n)\n    (cond\n      [(empty? s) '()]\n    \
    \  [(= n (count-consonants (first s)))\n       (cons (first s) (select-words-helper\
    \ (rest s) n))]\n      [else (select-words-helper (rest s) n)]))\n  (select-words-helper\
    \ (string-split s) n))\n", "  (if (string=? s \"\")\n      '()\n      (let ([words\
    \ (string-split s)])\n        (filter (lambda (w) (= n (count-consonants w)))\
    \ words))))\n", "  (define (is_consonant c)\n    (cond\n      [(char-ci=? c #\\\
    a) #f]\n      [(char-ci=? c #\\e) #f]\n      [(char-ci=? c #\\i) #f]\n      [(char-ci=?\
    \ c #\\o) #f]\n      [(char-ci=? c #\\u) #f]\n      [else #t]))\n  (define (count_consonants\
    \ word)\n    (define (count_consonants_iter word count)\n      (cond\n       \
    \ [(empty? word) count]\n        [(is_consonant (first word)) (count_consonants_iter\
    \ (rest word) (+ count 1))]\n        [else (count_consonants_iter (rest word)\
    \ count)]))\n    (count_consonants_iter word 0))\n  (define (select_words_iter\
    \ s n result)\n    (cond\n      [(empty? s) result]\n      [(count_consonants\
    \ (first s)) (= n (count_consonants (first s))) (select_words_iter (rest s) n\
    \ (append result (list (first s))))]\n      [else (select_words_iter (rest s)\
    \ n result)]))\n  (select_words_iter (string-split s) n '()))\n", "  (define (consonant?\
    \ c)\n    (member c '(\"b\" \"c\" \"d\" \"f\" \"g\" \"h\" \"j\" \"k\" \"l\" \"\
    m\" \"n\" \"p\" \"q\" \"r\" \"s\" \"t\" \"v\" \"w\" \"x\" \"y\" \"z\")))\n  (define\
    \ (word-consonants w)\n    (length (filter consonant? (string->list w))))\n  (define\
    \ (word-n-consonants? w)\n    (= n (word-consonants w)))\n  (filter word-n-consonants?\
    \ (string-split s)))\n", "  (define (is-consonant? c)\n    (not (or (char-ci=?\
    \ c #\\a)\n             (char-ci=? c #\\e)\n             (char-ci=? c #\\i)\n\
    \             (char-ci=? c #\\o)\n             (char-ci=? c #\\u))))\n  (define\
    \ (count-consonants word)\n    (define (count-consonants-iter word count)\n  \
    \    (if (empty? word)\n          count\n          (if (is-consonant? (first word))\n\
    \              (count-consonants-iter (rest word) (+ count 1))\n             \
    \ (count-consonants-iter (rest word) count))))\n    (count-consonants-iter word\
    \ 0))\n  (define (select-words-iter s n result)\n    (if (empty? s)\n        result\n\
    \        (let ((word (regexp-match #rx\"^[a-zA-Z]+\" s)))\n          (if (and\
    \ (not (empty? word))\n                   (= n (count-consonants word)))\n   \
    \           (select-words-iter (regexp-replace #rx\"^[a-zA-Z]+\" s \"\") n (append\
    \ result (list word)))\n              (select-words-iter (regexp-replace #rx\"\
    ^[a-zA-Z]+\" s \"\") n result)))))\n  (select-words-iter s n '()))\n", "  (if\
    \ (empty? s)\n      '()\n      (let ([w (regexp-match #rx\"^[^ ]+\" s)])\n   \
    \     (if (and w (= n (count-consonants (car w))))\n            (cons (car w)\
    \ (select_words (regexp-replace #rx\"^[^ ]+ \" \"\" s) n))\n            (select_words\
    \ (regexp-replace #rx\"^[^ ]+ \" \"\" s) n)))))\n", "  (define (is-vowel? c)\n\
    \    (member c '(#\\a #\\e #\\i #\\o #\\u)))\n  (define (count-consonants s)\n\
    \    (cond\n      [(empty? s) 0]\n      [(is-vowel? (first s)) (count-consonants\
    \ (rest s))]\n      [else (+ 1 (count-consonants (rest s)))]))\n  (define (select-words-iter\
    \ s n acc)\n    (cond\n      [(empty? s) acc]\n      [(count-consonants (first\
    \ s)) (select-words-iter (rest s) n (cons (first s) acc))]\n      [else (select-words-iter\
    \ (rest s) n acc)]))\n  (select-words-iter (string-split s #\\space) n '()))\n",
  "  (filter (lambda (w) (= n (count-consonants w))) (string-split s)))\n", "  (filter\
    \ (lambda (word)\n            (= n (count-consonants word)))\n          (string-split\
    \ s #\\space)))\n", "  (filter (lambda (w) (= n (count-consonants w))) (string-split\
    \ s)))\n", "  (define (is-consonant? c)\n    (member c '(\"b\" \"c\" \"d\" \"\
    f\" \"g\" \"h\" \"j\" \"k\" \"l\" \"m\" \"n\" \"p\" \"q\" \"r\" \"s\" \"t\" \"\
    v\" \"w\" \"x\" \"y\" \"z\")))\n  (define (count-consonants word)\n    (cond ((empty?\
    \ word) 0)\n          ((is-consonant? (first word)) (+ 1 (count-consonants (rest\
    \ word))))\n          (else (count-consonants (rest word)))))\n  (define (select-words-helper\
    \ s n acc)\n    (cond ((empty? s) acc)\n          ((= n (count-consonants (first\
    \ s))) (select-words-helper (rest s) n (append acc (list (first s)))))\n     \
    \     (else (select-words-helper (rest s) n acc))))\n  (select-words-helper (string-split\
    \ s) n '()))\n", "  (define (is-consonant? c)\n    (or (equal? c #\\b)\n     \
    \   (equal? c #\\c)\n        (equal? c #\\d)\n        (equal? c #\\f)\n      \
    \  (equal? c #\\g)\n        (equal? c #\\h)\n        (equal? c #\\j)\n       \
    \ (equal? c #\\k)\n        (equal? c #\\l)\n        (equal? c #\\m)\n        (equal?\
    \ c #\\n)\n        (equal? c #\\p)\n        (equal? c #\\q)\n        (equal? c\
    \ #\\r)\n        (equal? c #\\s)\n        (equal? c #\\t)\n        (equal? c #\\\
    v)\n        (equal? c #\\w)\n        (equal? c #\\x)\n        (equal? c #\\y)\n\
    \        (equal? c #\\z)))\n  (define (count-consonants word)\n    (define (count-consonants-iter\
    \ word count)\n      (if (empty? word)\n          count\n          (if (is-consonant?\
    \ (first word))\n              (count-consonants-iter (rest word) (+ count 1))\n\
    \              (count-consonants-iter (rest word) count))))\n    (count-consonants-iter\
    \ word 0))\n  (define (select-words-iter s n result)\n    (if (empty? s)\n   \
    \     result\n        (let ((word (first (regexp-match #rx\"\\w+\" s))))\n   \
    \       (if (= n (count-consonants word))\n              (select-words-iter (substring\
    \ s (add1 (string-length word))) n (append result (list word)))\n            \
    \  (select-words-iter (substring s (add1 (string-length word))) n result)))))\n\
    \  (select-words-iter s n '()))\n", "  (cond\n    [(empty? s) empty]\n    [(=\
    \ n (count-consonants (first (string-split s #\\space))))\n     (cons (first (string-split\
    \ s #\\space)) (select_words (rest (string-split s #\\space)) n))]\n    [else\
    \ (select_words (rest (string-split s #\\space)) n)]))\n", "  (if (string=? s\
    \ \"\")\n      '()\n      (let ([w (string-split s #\\space)])\n        (filter\
    \ (lambda (x) (= n (count-consonants x))) w))))\n", "  (cond\n    [(empty? s)\
    \ empty]\n    [(= n (count-consonants (first (string-split s))))\n     (cons (first\
    \ (string-split s)) (select_words (rest (string-split s)) n))]\n    [else (select_words\
    \ (rest (string-split s)) n)]))\n", "  (cond\n    [(empty? s) empty]\n    [(=\
    \ n (count-consonants (first s))) (cons (first s) (select_words (rest s) n))]\n\
    \    [else (select_words (rest s) n)]))\n", "  (define (is-consonant? c)\n   \
    \ (not (member c '(\"a\" \"e\" \"i\" \"o\" \"u\"))))\n  (define (count-consonants\
    \ word)\n    (cond\n      [(empty? word) 0]\n      [(is-consonant? (first word))\
    \ (+ 1 (count-consonants (rest word)))]\n      [else (count-consonants (rest word))]))\n\
    \  (define (select-words-helper words n)\n    (cond\n      [(empty? words) empty]\n\
    \      [(= n (count-consonants (first words)))\n       (cons (first words) (select-words-helper\
    \ (rest words) n))]\n      [else (select-words-helper (rest words) n)]))\n  (select-words-helper\
    \ (string-split s \" \") n))\n", "  (cond [(empty? s) empty]\n        [(= n (count-consonants\
    \ (first (string-split s #\\space))))\n         (cons (first (string-split s #\\\
    space)) (select_words (rest (string-split s #\\space)) n))]\n        [else (select_words\
    \ (rest (string-split s #\\space)) n)]))\n", "  (define (is-consonant? c)\n  \
    \  (not (member c '(\"a\" \"e\" \"i\" \"o\" \"u\"))))\n  (define (count-consonants\
    \ s)\n    (cond [(empty? s) 0]\n          [(is-consonant? (first s)) (+ 1 (count-consonants\
    \ (rest s)))]\n          [else (count-consonants (rest s))]))\n  (define (select-words-helper\
    \ s n)\n    (cond [(empty? s) empty]\n          [(= n (count-consonants (first\
    \ s)))\n           (cons (first s) (select-words-helper (rest s) n))]\n      \
    \    [else (select-words-helper (rest s) n)]))\n  (select-words-helper (string-split\
    \ s) n))\n", "  (define (is-consonant? c)\n    (not (member c '(#\\a #\\e #\\\
    i #\\o #\\u))))\n  (define (count-consonants s)\n    (if (empty? s)\n        0\n\
    \        (+ (if (is-consonant? (first s)) 1 0)\n           (count-consonants (rest\
    \ s)))))\n  (define (select-words-iter s n words)\n    (cond ((empty? s) words)\n\
    \          ((char=? (first s) #\\space)\n           (select-words-iter (rest s)\
    \ n words))\n          (else (let ((word (first s)))\n                  (select-words-iter\
    \ (rest s) n\n                                     (if (= (count-consonants word)\
    \ n)\n                                         (cons word words)\n           \
    \                              words))))))\n  (reverse (select-words-iter s n\
    \ '())))\n", "  (define (is_vowel? c)\n    (member c '(#\\a #\\e #\\i #\\o #\\\
    u)))\n  (define (count-consonants s)\n    (cond [(empty? s) 0]\n          [(is_vowel?\
    \ (first s)) (count-consonants (rest s))]\n          [else (+ 1 (count-consonants\
    \ (rest s)))]))\n  (define (select-words-helper s n)\n    (cond [(empty? s) empty]\n\
    \          [(= n (count-consonants (first s))) (cons (first s) (select-words-helper\
    \ (rest s) n))]\n          [else (select-words-helper (rest s) n)]))\n  (select-words-helper\
    \ (string-split s #\\space) n))\n", "  (cond\n    [(empty? s) empty]\n    [(=\
    \ n (count-consonants (first s))) (cons (first s) (select_words (rest s) n))]\n\
    \    [else (select_words (rest s) n)]))\n", "  (define (is-consonant? c)\n   \
    \ (and (not (char-alphabetic? c))\n         (not (char-whitespace? c))))\n  (define\
    \ (count-consonants word)\n    (define (count-consonants-iter word count)\n  \
    \    (if (empty? word)\n          count\n          (if (is-consonant? (first word))\n\
    \              (count-consonants-iter (rest word) (+ count 1))\n             \
    \ (count-consonants-iter (rest word) count))))\n    (count-consonants-iter word\
    \ 0))\n  (define (select-words-iter s n result)\n    (if (empty? s)\n        result\n\
    \        (let ([word (first (regexp-match #rx\"\\w+\" s))])\n          (if (=\
    \ n (count-consonants word))\n              (select-words-iter (regexp-replace\
    \ #rx\"\\w+\" s \"\") n (append result (list word)))\n              (select-words-iter\
    \ (regexp-replace #rx\"\\w+\" s \"\") n result)))))\n  (select-words-iter s n\
    \ '()))\n", "  (cond\n    [(empty? s) empty]\n    [(= n (count-consonants (first\
    \ (string-split s #\\space))))\n     (cons (first (string-split s #\\space)) (select_words\
    \ (rest (string-split s #\\space)) n))]\n    [else (select_words (rest (string-split\
    \ s #\\space)) n)]))\n", "  (define (is-consonant? c)\n    (member c '(\"b\" \"\
    c\" \"d\" \"f\" \"g\" \"h\" \"j\" \"k\" \"l\" \"m\" \"n\" \"p\" \"q\" \"r\" \"\
    s\" \"t\" \"v\" \"w\" \"x\" \"z\")))\n  (define (count-consonants word)\n    (define\
    \ (count-consonants-iter word count)\n      (if (empty? word)\n          count\n\
    \          (if (is-consonant? (first word))\n              (count-consonants-iter\
    \ (rest word) (+ count 1))\n              (count-consonants-iter (rest word) count))))\n\
    \    (count-consonants-iter word 0))\n  (define (select-words-iter s n result)\n\
    \    (if (empty? s)\n        result\n        (let ((word (first s)))\n       \
    \   (if (= n (count-consonants word))\n              (select-words-iter (rest\
    \ s) n (append result (list word)))\n              (select-words-iter (rest s)\
    \ n result)))))\n  (select-words-iter (string-split s) n '()))\n", "  (cond\n\
    \    [(empty? s) empty]\n    [(= (count-consonants (first s)) n) (cons (first\
    \ s) (select_words (rest s) n))]\n    [else (select_words (rest s) n)]))\n", " \
    \ (cond\n    [(empty? s) empty]\n    [(= n (count-consonants (first (string-split\
    \ s #\\space))))\n     (cons (first (string-split s #\\space))\n           (select_words\
    \ (string-join (rest (string-split s #\\space)) #\\space) n))]\n    [else (select_words\
    \ (string-join (rest (string-split s #\\space)) #\\space) n)]))\n", "  (define\
    \ (count-consonants s)\n    (define (is-consonant? c)\n      (member c '(\"b\"\
    \ \"c\" \"d\" \"f\" \"g\" \"h\" \"j\" \"k\" \"l\" \"m\" \"n\" \"p\" \"q\" \"r\"\
    \ \"s\" \"t\" \"v\" \"w\" \"x\" \"y\" \"z\")))\n    (cond ((string=? s \"\") 0)\n\
    \          ((is-consonant? (string-ref s 0)) (+ 1 (count-consonants (substring\
    \ s 1))))\n          (else (count-consonants (substring s 1)))))\n  (define (select-words-helper\
    \ s n acc)\n    (cond ((string=? s \"\") acc)\n          ((= n (count-consonants\
    \ (car (string-split s)))) (select-words-helper (cdr (string-split s)) n (append\
    \ acc (list (car (string-split s))))))\n          (else (select-words-helper (cdr\
    \ (string-split s)) n acc))))\n  (select-words-helper s n '()))\n", "  (cond\n\
    \    [(empty? s) empty]\n    [(= n (count-consonants (first s))) (cons (first\
    \ s) (select_words (rest s) n))]\n    [else (select_words (rest s) n)]))\n", " \
    \ (define (is_consonant? c)\n    (not (member c '(#\\a #\\e #\\i #\\o #\\u))))\n\
    \  (define (count-consonants word)\n    (if (null? word)\n        0\n        (+\
    \ (if (is_consonant? (car word)) 1 0)\n           (count-consonants (cdr word)))))\n\
    \  (define (select-words-helper s n acc)\n    (if (null? s)\n        acc\n   \
    \     (let ((word (car s)))\n          (if (= n (count-consonants word))\n   \
    \           (select-words-helper (cdr s) n (cons word acc))\n              (select-words-helper\
    \ (cdr s) n acc)))))\n  (reverse (select-words-helper (string-split s) n '())))\n",
  "  (define (is-consonant? c)\n    (member c '(\"b\" \"c\" \"d\" \"f\" \"g\" \"h\"\
    \ \"j\" \"k\" \"l\" \"m\" \"n\" \"p\" \"q\" \"r\" \"s\" \"t\" \"v\" \"w\" \"x\"\
    \ \"z\")))\n  (define (count-consonants word)\n    (if (empty? word)\n       \
    \ 0\n        (+ (if (is-consonant? (first word)) 1 0)\n           (count-consonants\
    \ (rest word)))))\n  (define (select-words-helper words n)\n    (if (empty? words)\n\
    \        '()\n        (if (= n (count-consonants (first words)))\n           \
    \ (cons (first words) (select-words-helper (rest words) n))\n            (select-words-helper\
    \ (rest words) n))))\n  (select-words-helper (string-split s) n))\n", "  (if (string=?\
    \ s \"\")\n      '()\n      (let ([word (car (regexp-match #rx\"^[a-zA-Z]+\" s))])\n\
    \        (if (and word (= n (count-consonants word)))\n            (cons word\
    \ (select_words (substring s (string-length word)) n))\n            (select_words\
    \ (substring s (string-length word)) n)))))\n", "  (cond\n    [(empty? s) empty]\n\
    \    [(= n (count-consonants (first (string-split s #\\space))))\n     (cons (first\
    \ (string-split s #\\space))\n           (select_words (string-join (rest (string-split\
    \ s #\\space)) #\\space) n))]\n    [else (select_words (string-join (rest (string-split\
    \ s #\\space)) #\\space) n)]))\n", "  (define (is_consonant? c)\n    (cond\n \
    \     [(char-ci=? c #\\a) #f]\n      [(char-ci=? c #\\e) #f]\n      [(char-ci=?\
    \ c #\\i) #f]\n      [(char-ci=? c #\\o) #f]\n      [(char-ci=? c #\\u) #f]\n\
    \      [else #t]))\n  (define (count_consonants word)\n    (cond\n      [(empty?\
    \ word) 0]\n      [(is_consonant? (first word)) (+ 1 (count_consonants (rest word)))]\n\
    \      [else (count_consonants (rest word))]))\n  (define (select_words_helper\
    \ s n)\n    (cond\n      [(empty? s) empty]\n      [(= n (count_consonants (first\
    \ s))) (cons (first s) (select_words_helper (rest s) n))]\n      [else (select_words_helper\
    \ (rest s) n)]))\n  (select_words_helper (string-split s) n))\n", "  (define (is-consonant?\
    \ c)\n    (not (member c '(#\\a #\\e #\\i #\\o #\\u))))\n  (define (count-consonants\
    \ s)\n    (cond [(empty? s) 0]\n          [(is-consonant? (first s)) (+ 1 (count-consonants\
    \ (rest s)))]\n          [else (count-consonants (rest s))]))\n  (define (select-words-helper\
    \ s n)\n    (cond [(empty? s) empty]\n          [(= n (count-consonants (first\
    \ s)))\n           (cons (first s) (select-words-helper (rest s) n))]\n      \
    \    [else (select-words-helper (rest s) n)]))\n  (select-words-helper (string-split\
    \ s) n))\n", "  (define (is_consonant c)\n    (cond\n      [(char-ci=? c #\\a)\
    \ #f]\n      [(char-ci=? c #\\e) #f]\n      [(char-ci=? c #\\i) #f]\n      [(char-ci=?\
    \ c #\\o) #f]\n      [(char-ci=? c #\\u) #f]\n      [else #t]))\n  (define (count_consonants\
    \ word)\n    (cond\n      [(empty? word) 0]\n      [(is_consonant (first word))\
    \ (+ 1 (count_consonants (rest word)))]\n      [else (count_consonants (rest word))]))\n\
    \  (define (select_words_iter s n acc)\n    (cond\n      [(empty? s) (reverse\
    \ acc)]\n      [(= n (count_consonants (first s)))\n       (select_words_iter\
    \ (rest s) n (cons (first s) acc))]\n      [else (select_words_iter (rest s) n\
    \ acc)]))\n  (select_words_iter (string-split s) n '()))\n", "  (define (is-consonant?\
    \ c)\n    (not (or (char-ci=? c #\\a) (char-ci=? c #\\e) (char-ci=? c #\\i) (char-ci=?\
    \ c #\\o) (char-ci=? c #\\u))))\n  (define (count-consonants s)\n    (cond [(empty?\
    \ s) 0]\n          [(is-consonant? (first s)) (+ 1 (count-consonants (rest s)))]\n\
    \          [else (count-consonants (rest s))]))\n  (define (select-words-helper\
    \ s n result)\n    (cond [(empty? s) result]\n          [(is-consonant? (first\
    \ s)) (select-words-helper (rest s) (+ 1 n) result)]\n          [(= n 0) (select-words-helper\
    \ (rest s) 0 (append result (list (string-join (first s)))))\n           (select-words-helper\
    \ (rest s) 0 result)]))\n  (select-words-helper (string-split s) 0 '()))\n", " \
    \ (if (string=? s \"\")\n      '()\n      (let ([w (string-split s #\\space)])\n\
    \        (filter (lambda (x) (= n (count-consonants x))) w))))\n", "  (define\
    \ (is-consonant? c)\n    (not (member c '(\"a\" \"e\" \"i\" \"o\" \"u\"))))\n\
    \  (define (count-consonants s)\n    (cond [(empty? s) 0]\n          [(is-consonant?\
    \ (first s)) (+ 1 (count-consonants (rest s)))]\n          [else (count-consonants\
    \ (rest s))]))\n  (define (select-words-helper s n acc)\n    (cond [(empty? s)\
    \ acc]\n          [(= n (count-consonants (first s))) (select-words-helper (rest\
    \ s) n (append acc (list (first s))))]\n          [else (select-words-helper (rest\
    \ s) n acc)]))\n  (select-words-helper (string-split s) n '()))\n", "  (define\
    \ (is-vowel? c)\n    (member c '(#\\a #\\e #\\i #\\o #\\u)))\n  (define (count-consonants\
    \ word)\n    (if (empty? word)\n        0\n        (if (is-vowel? (first word))\n\
    \            (count-consonants (rest word))\n            (+ 1 (count-consonants\
    \ (rest word))))))\n  (define (select-words-helper words n)\n    (if (empty? words)\n\
    \        '()\n        (if (= n (count-consonants (first words)))\n           \
    \ (cons (first words) (select-words-helper (rest words) n))\n            (select-words-helper\
    \ (rest words) n))))\n  (select-words-helper (string-split s) n))\n", "  (if (string=?\
    \ s \"\")\n      '()\n      (let ([w (string-split s #\\space)])\n        (for/list\
    \ ([w w])\n          (if (= n (count-consonants w))\n              w)))))\n",
  "  (if (empty? s)\n      '()\n      (let ([words (string-split s #\\space)])\n \
    \       (filter (lambda (w) (= n (count-consonants w))) words))))\n", "  (cond\n\
    \    [(empty? s) empty]\n    [(= n (count-consonants (first s))) (cons (first\
    \ s) (select_words (rest s) n))]\n    [else (select_words (rest s) n)]))\n", " \
    \ (cond\n    [(empty? s) '()]\n    [(= n (count-consonants (first (string-split\
    \ s #\\space))))\n     (cons (first (string-split s #\\space))\n           (select_words\
    \ (rest (string-split s #\\space)) n))]\n    [else (select_words (rest (string-split\
    \ s #\\space)) n)]))\n", "  (define (is_vowel? c)\n    (member c '(#\\a #\\e #\\\
    i #\\o #\\u)))\n  (define (count-consonants word)\n    (if (empty? word)\n   \
    \     0\n        (if (is_vowel? (first word))\n            (count-consonants (rest\
    \ word))\n            (+ 1 (count-consonants (rest word))))))\n  (define (is-n-consonants?\
    \ word)\n    (= n (count-consonants word)))\n  (define (select-words-helper words)\n\
    \    (if (empty? words)\n        empty\n        (if (is-n-consonants? (first words))\n\
    \            (cons (first words) (select-words-helper (rest words)))\n       \
    \     (select-words-helper (rest words)))))\n  (select-words-helper (string-split\
    \ s)))\n", "  (define (is_consonant? c)\n    (member c '(\"b\" \"c\" \"d\" \"\
    f\" \"g\" \"h\" \"j\" \"k\" \"l\" \"m\" \"n\" \"p\" \"q\" \"r\" \"s\" \"t\" \"\
    v\" \"w\" \"x\" \"z\")))\n  (define (count-consonants word)\n    (cond [(empty?\
    \ word) 0]\n          [(is_consonant? (first word)) (+ 1 (count-consonants (rest\
    \ word)))]\n          [else (count-consonants (rest word))]))\n  (define (select-words-helper\
    \ s n)\n    (cond [(empty? s) empty]\n          [(= n (count-consonants (first\
    \ s))) (cons (first s) (select-words-helper (rest s) n))]\n          [else (select-words-helper\
    \ (rest s) n)]))\n  (select-words-helper (string-split s) n))\n", "  (define (is_consonant?\
    \ c)\n    (member c '(\"b\" \"c\" \"d\" \"f\" \"g\" \"h\" \"j\" \"k\" \"l\" \"\
    m\" \"n\" \"p\" \"q\" \"r\" \"s\" \"t\" \"v\" \"w\" \"x\" \"y\" \"z\")))\n  (define\
    \ (count-consonants word)\n    (cond ((null? word) 0)\n          ((is_consonant?\
    \ (car word)) (+ 1 (count-consonants (cdr word))))\n          (else (count-consonants\
    \ (cdr word)))))\n  (define (select-words-helper words n)\n    (cond ((null? words)\
    \ '())\n          ((= n (count-consonants (car words))) (cons (car words) (select-words-helper\
    \ (cdr words) n)))\n          (else (select-words-helper (cdr words) n))))\n \
    \ (select-words-helper (string-split s) n))\n", "  (define (is_vowel? c)\n   \
    \ (member c '(#\\a #\\e #\\i #\\o #\\u)))\n  (define (count-consonants w)\n  \
    \  (define (count-consonants-iter w n)\n      (if (empty? w)\n          n\n  \
    \        (if (is_vowel? (first w))\n              (count-consonants-iter (rest\
    \ w) n)\n              (count-consonants-iter (rest w) (+ n 1)))))\n    (count-consonants-iter\
    \ w 0))\n  (define (select-words-iter s n l)\n    (if (empty? s)\n        l\n\
    \        (let ((w (first s)))\n          (if (= n (count-consonants w))\n    \
    \          (select-words-iter (rest s) n (cons w l))\n              (select-words-iter\
    \ (rest s) n l)))))\n  (select-words-iter (string-split s #\\space) n '()))\n",
  "  (define (is-consonant? c)\n    (cond\n      [(member c '(#\\a #\\e #\\i #\\o\
    \ #\\u)) #f]\n      [else #t]))\n  (define (count-consonants word)\n    (cond\n\
    \      [(empty? word) 0]\n      [(is-consonant? (first word)) (+ 1 (count-consonants\
    \ (rest word)))]\n      [else (count-consonants (rest word))]))\n  (define (select-words-helper\
    \ s n)\n    (cond\n      [(empty? s) empty]\n      [(= n (count-consonants (first\
    \ s)))\n       (cons (first s) (select-words-helper (rest s) n))]\n      [else\
    \ (select-words-helper (rest s) n)]))\n  (select-words-helper (string-split s)\
    \ n))\n", "  (cond\n    [(empty? s) empty]\n    [(= n (count-consonants (first\
    \ (string-split s #\\space))))\n     (cons (first (string-split s #\\space)) (select_words\
    \ (rest (string-split s #\\space)) n))]\n    [else (select_words (rest (string-split\
    \ s #\\space)) n)]))\n", "  (cond\n    [(empty? s) empty]\n    [(= n (count-consonants\
    \ (first s)))\n     (cons (first s) (select_words (rest s) n))]\n    [else (select_words\
    \ (rest s) n)]))\n", "  (if (string=? s \"\")\n      '()\n      (let ([word (car\
    \ (regexp-match #rx\"\\w+\" s))])\n        (if (eq? (count-consonants word) n)\n\
    \            (cons word (select_words (substring s (string-length word)) n))\n\
    \            (select_words (substring s (string-length word)) n)))))\n", "  (if\
    \ (string=? s \"\")\n      '()\n      (let ([w (string-tokenize s)])\n       \
    \ (cond\n         [(= n (count-consonants (car w))) (cons (car w) (select_words\
    \ (string-join (cdr w) \" \") n))]\n         [else (select_words (string-join\
    \ (cdr w) \" \") n)]))))\n", "  (cond\n    [(empty? s) empty]\n    [(= n (count-consonants\
    \ (first (string-split s #\\space))))\n     (cons (first (string-split s #\\space))\n\
    \           (select_words (string-join (rest (string-split s #\\space)) #\\space)\
    \ n))]\n    [else (select_words (string-join (rest (string-split s #\\space))\
    \ #\\space) n)]))\n", "  (define (is_consonant? c)\n    (member c '(#\\b #\\c\
    \ #\\d #\\f #\\g #\\h #\\j #\\k #\\l #\\m #\\n #\\p #\\q #\\r #\\s #\\t #\\v #\\\
    w #\\x #\\y #\\z)))\n  (define (count-consonants s)\n    (cond ((string=? s \"\
    \") 0)\n          ((is_consonant? (string-ref s 0)) (+ 1 (count-consonants (substring\
    \ s 1))))\n          (else (count-consonants (substring s 1)))))\n  (define (select-words\
    \ s n)\n    (cond ((string=? s \"\") '())\n          ((= n (count-consonants (string-take\
    \ s (string-index #\\space s))))\n           (cons (string-take s (string-index\
    \ #\\space s)) (select-words (string-drop s (string-index #\\space s)) n)))\n\
    \          (else (select-words (string-drop s (string-index #\\space s)) n))))\n\
    \  (select-words s n))\n", "  (define (is_vowel c)\n    (member c '(#\\a #\\e\
    \ #\\i #\\o #\\u)))\n  (define (count_consonants s)\n    (cond\n      [(empty?\
    \ s) 0]\n      [(is_vowel (first s)) (count_consonants (rest s))]\n      [else\
    \ (+ 1 (count_consonants (rest s)))]))\n  (define (select_words_iter s n acc)\n\
    \    (cond\n      [(empty? s) (reverse acc)]\n      [(equal? n (count_consonants\
    \ (first s)))\n       (select_words_iter (rest s) n (cons (first s) acc))]\n \
    \     [else (select_words_iter (rest s) n acc)]))\n  (select_words_iter (string-split\
    \ s) n '()))\n", "  (define (is-consonant? c)\n    (cond\n      [(or (char=? c\
    \ #\\a) (char=? c #\\e) (char=? c #\\i) (char=? c #\\o) (char=? c #\\u)) #f]\n\
    \      [else #t]))\n  (define (count-consonants s)\n    (cond\n      [(empty?\
    \ s) 0]\n      [(is-consonant? (first s)) (+ 1 (count-consonants (rest s)))]\n\
    \      [else (count-consonants (rest s))]))\n  (define (select-words-helper s\
    \ n lst)\n    (cond\n      [(empty? s) lst]\n      [(= n (count-consonants (first\
    \ s))) (select-words-helper (rest s) n (append lst (list (first s))))]\n     \
    \ [else (select-words-helper (rest s) n lst)]))\n  (select-words-helper (string-split\
    \ s) n '()))\n", "  (filter (lambda (w) (= n (count-consonants w))) (string-split\
    \ s #\\space)))\n", "  (filter (lambda (w) (= n (count-consonants w))) (string-split\
    \ s)))\n", "  (define (is_vowel? c)\n    (member c '(#\\a #\\e #\\i #\\o #\\u)))\n\
    \  (define (count-consonants w)\n    (define (count-consonants-iter w i c)\n \
    \     (if (= i (string-length w))\n          c\n          (if (is_vowel? (string-ref\
    \ w i))\n              (count-consonants-iter w (+ i 1) c)\n              (count-consonants-iter\
    \ w (+ i 1) (+ c 1)))))\n    (count-consonants-iter w 0 0))\n  (define (select-words-iter\
    \ s i l)\n    (if (= i (string-length s))\n        l\n        (let ((w (string-trim\
    \ (string-take s i))))\n          (if (= n (count-consonants w))\n           \
    \   (select-words-iter s (+ i (string-length w)) (cons w l))\n              (select-words-iter\
    \ s (+ i (string-length w)) l)))))\n  (select-words-iter s 0 '()))\n", "  (cond\n\
    \    [(empty? s) empty]\n    [(= n (count-consonants (first (regexp-split #rx\"\
    \ \" s))))\n     (cons (first (regexp-split #rx\" \" s)) (select_words (rest (regexp-split\
    \ #rx\" \" s)) n))]\n    [else (select_words (rest (regexp-split #rx\" \" s))\
    \ n)]))\n", "  (define (is-consonant? c)\n    (cond\n      [(member c '(\"a\"\
    \ \"e\" \"i\" \"o\" \"u\")) #f]\n      [else #t]))\n  (define (count-consonants\
    \ word)\n    (cond\n      [(empty? word) 0]\n      [(is-consonant? (first word))\
    \ (+ 1 (count-consonants (rest word)))]\n      [else (count-consonants (rest word))]))\n\
    \  (define (select-words-helper words n)\n    (cond\n      [(empty? words) empty]\n\
    \      [(= n (count-consonants (first words))) (cons (first words) (select-words-helper\
    \ (rest words) n))]\n      [else (select-words-helper (rest words) n)]))\n  (select-words-helper\
    \ (string-split s) n))\n", "  (define (is_consonant? c)\n    (cond\n      [(member\
    \ c '(\"a\" \"e\" \"i\" \"o\" \"u\")) #f]\n      [else #t]))\n  (define (count-consonants\
    \ word)\n    (cond\n      [(empty? word) 0]\n      [(is_consonant? (first word))\
    \ (+ 1 (count-consonants (rest word)))]\n      [else (count-consonants (rest word))]))\n\
    \  (define (select-words-helper s n)\n    (cond\n      [(empty? s) empty]\n  \
    \    [(= n (count-consonants (first s))) (cons (first s) (select-words-helper\
    \ (rest s) n))]\n      [else (select-words-helper (rest s) n)]))\n  (select-words-helper\
    \ (string-split s) n))\n", "  (define (is-consonant? c)\n    (cond\n      [(member\
    \ c '(#\\a #\\e #\\i #\\o #\\u)) #f]\n      [else #t]))\n  (define (count-consonants\
    \ w)\n    (cond\n      [(empty? w) 0]\n      [(is-consonant? (first w)) (+ 1 (count-consonants\
    \ (rest w)))]\n      [else (count-consonants (rest w))]))\n  (define (select-words-helper\
    \ s n)\n    (cond\n      [(empty? s) empty]\n      [(= n (count-consonants (first\
    \ s)))\n       (cons (first s) (select-words-helper (rest s) n))]\n      [else\
    \ (select-words-helper (rest s) n)]))\n  (select-words-helper (string-split s)\
    \ n))\n", "  (define (is-consonant? c)\n    (not (member c '(\"a\" \"e\" \"i\"\
    \ \"o\" \"u\"))))\n  (define (count-consonants word)\n    (cond ((null? word)\
    \ 0)\n          ((is-consonant? (car word)) (+ 1 (count-consonants (cdr word))))\n\
    \          (else (count-consonants (cdr word)))))\n  (define (select-words-helper\
    \ s n result)\n    (cond ((null? s) result)\n          ((= n (count-consonants\
    \ (car s))) (select-words-helper (cdr s) n (append result (list (car s)))))\n\
    \          (else (select-words-helper (cdr s) n result))))\n  (select-words-helper\
    \ (string-split s) n '()))\n", "  (if (string=? s \"\")\n      '()\n      (let*\
    \ ([words (string-split s)]\n             [words-with-n-consonants (filter (lambda\
    \ (w) (= n (count-consonants w))) words)])\n        words-with-n-consonants)))\n",
  "  (cond [(empty? s) empty]\n        [(= n (count-consonants (first (string-split\
    \ s #\\space))))\n         (cons (first (string-split s #\\space))\n         \
    \      (select_words (string-drop s (string-length (first (string-split s #\\\
    space)))) n))]\n        [else (select_words (string-drop s (string-length (first\
    \ (string-split s #\\space)))) n)]))\n", "  (cond\n    [(empty? s) empty]\n  \
    \  [(= n (count-consonants (first (string-split s #\\space))))\n     (cons (first\
    \ (string-split s #\\space)) (select_words (rest (string-split s #\\space)) n))]\n\
    \    [else (select_words (rest (string-split s #\\space)) n)]))\n", "  (define\
    \ (is-consonant? c)\n    (cond\n      [(or (char=? c #\\a) (char=? c #\\e) (char=?\
    \ c #\\i) (char=? c #\\o) (char=? c #\\u)) #f]\n      [else #t]))\n  (define (count-consonants\
    \ s)\n    (cond\n      [(empty? s) 0]\n      [(is-consonant? (first s)) (+ 1 (count-consonants\
    \ (rest s)))]\n      [else (count-consonants (rest s))]))\n  (define (select-words-helper\
    \ s n)\n    (cond\n      [(empty? s) empty]\n      [(= n (count-consonants (first\
    \ s))) (cons (first s) (select-words-helper (rest s) n))]\n      [else (select-words-helper\
    \ (rest s) n)]))\n  (select-words-helper (string-split s) n))\n", "  (cond [(empty?\
    \ s) empty]\n        [(= n (count-consonants (first s)))\n         (cons (first\
    \ s) (select_words (rest s) n))]\n        [else (select_words (rest s) n)]))\n",
  "  (define (is-vowel c)\n    (member c '(#\\a #\\e #\\i #\\o #\\u)))\n  (define\
    \ (count-consonants w)\n    (define (count-consonants-iter w i)\n      (if (=\
    \ i (string-length w))\n          0\n          (if (is-vowel (string-ref w i))\n\
    \              (count-consonants-iter w (+ i 1))\n              (+ 1 (count-consonants-iter\
    \ w (+ i 1))))))\n    (count-consonants-iter w 0))\n  (define (select-words-iter\
    \ s i)\n    (if (= i (string-length s))\n        '()\n        (let ((w (string-trim\
    \ (substring s i (string-index-right s #\\space i)))))\n          (if (= n (count-consonants\
    \ w))\n              (cons w (select-words-iter s (+ i (string-length w))))\n\
    \              (select-words-iter s (+ i (string-length w)))))))\n  (select-words-iter\
    \ s 0))\n", "  (define (is-consonant? c)\n    (not (member c '(\"a\" \"e\" \"\
    i\" \"o\" \"u\"))))\n  (define (count-consonants word)\n    (length (filter is-consonant?\
    \ (string->list word))))\n  (define (is-n-consonants? word)\n    (= n (count-consonants\
    \ word)))\n  (filter is-n-consonants? (string-split s #\\space)))\n", "  (define\
    \ (is_consonant? c)\n    (not (member c '(\"a\" \"e\" \"i\" \"o\" \"u\"))))\n\
    \  (define (count_consonants s)\n    (cond\n      [(empty? s) 0]\n      [(is_consonant?\
    \ (first s)) (+ 1 (count_consonants (rest s)))]\n      [else (count_consonants\
    \ (rest s))]))\n  (define (select_words_iter s n result)\n    (cond\n      [(empty?\
    \ s) result]\n      [(= n (count_consonants (first s)))\n       (select_words_iter\
    \ (rest s) n (append result (list (first s))))]\n      [else (select_words_iter\
    \ (rest s) n result)]))\n  (select_words_iter (string-split s) n '()))\n", " \
    \ (if (string=? s \"\")\n      '()\n      (let* ([words (string-split s)]\n  \
    \           [consonants (string-&gt;list \"bcdfghjklmnpqrstvwxyz\")]\n       \
    \      [consonant-count (lambda (word)\n                                (let loop\
    \ ([word word]\n                                           [count 0])\n      \
    \                            (if (string-null? word)\n                       \
    \               count\n                                      (if (member (string-ref\
    \ word 0) consonants)\n                                          (loop (substring\
    \ word 1) (+ count 1))\n                                          (loop (substring\
    \ word 1) count)))))]\n             [selected-words (filter (lambda (word) (=\
    \ (consonant-count word) n)) words)])\n        selected-words)))\n</code>\n",
  "  (define (consonant? c)\n    (member c '(\"b\" \"c\" \"d\" \"f\" \"g\" \"h\" \"\
    j\" \"k\" \"l\" \"m\" \"n\" \"p\" \"q\" \"r\" \"s\" \"t\" \"v\" \"w\" \"x\" \"\
    y\" \"z\")))\n  (define (count-consonants word)\n    (cond\n      [(empty? word)\
    \ 0]\n      [(consonant? (first word)) (+ 1 (count-consonants (rest word)))]\n\
    \      [else (count-consonants (rest word))]))\n  (define (select-words-helper\
    \ s n)\n    (cond\n      [(empty? s) empty]\n      [(= n (count-consonants (first\
    \ s))) (cons (first s) (select-words-helper (rest s) n))]\n      [else (select-words-helper\
    \ (rest s) n)]))\n  (select-words-helper (string-split s) n))\n", "  (cond\n \
    \   [(empty? s) empty]\n    [(= n (count-consonants (first s))) (cons (first s)\
    \ (select_words (rest s) n))]\n    [else (select_words (rest s) n)]))\n", "  (define\
    \ (is_vowel c)\n    (member c '(#\\a #\\e #\\i #\\o #\\u)))\n  (define (count-consonants\
    \ s)\n    (cond [(empty? s) 0]\n          [(is_vowel (first s)) (count-consonants\
    \ (rest s))]\n          [else (+ 1 (count-consonants (rest s)))]))\n  (define\
    \ (select-words-iter s n result)\n    (cond [(empty? s) result]\n          [(is_vowel\
    \ (first s)) (select-words-iter (rest s) n result)]\n          [(= n (count-consonants\
    \ s)) (select-words-iter (rest s) n (cons s result))]\n          [else (select-words-iter\
    \ (rest s) n result)]))\n  (select-words-iter (string-split s) n '()))\n", " \
    \ (cond\n    [(empty? s) empty]\n    [(= n (count-consonants (first (string-split\
    \ s #\\space))))\n     (cons (first (string-split s #\\space))\n           (select_words\
    \ (string-join (rest (string-split s #\\space)) #\\space) n))]\n    [else (select_words\
    \ (string-join (rest (string-split s #\\space)) #\\space) n)]))\n", "  (cond\n\
    \    [(empty? s) empty]\n    [(= n (count-consonants (first (string-split s #\\\
    space))))\n     (cons (first (string-split s #\\space))\n           (select_words\
    \ (string-join (rest (string-split s #\\space)) #\\space) n))]\n    [else (select_words\
    \ (string-join (rest (string-split s #\\space)) #\\space) n)]))\n", "  (define\
    \ (is_vowel c)\n    (member c '(#\\a #\\e #\\i #\\o #\\u)))\n  (define (count_consonants\
    \ word)\n    (define (count_consonants-iter word count)\n      (cond\n       \
    \ [(empty? word) count]\n        [(is_vowel (first word)) (count_consonants-iter\
    \ (rest word) count)]\n        [else (count_consonants-iter (rest word) (+ count\
    \ 1))]))\n    (count_consonants-iter word 0))\n  (define (select-words-iter s\
    \ n result)\n    (cond\n      [(empty? s) result]\n      [(equal? n (count_consonants\
    \ (first s))) (select-words-iter (rest s) n (append result (list (first s))))]\n\
    \      [else (select-words-iter (rest s) n result)]))\n  (select-words-iter (string-split\
    \ s) n '()))\n", "  (if (string=? s \"\")\n      '()\n      (let* ([words (string-split\
    \ s #\\space)]\n             [consonants (string-&gt;list \"bcdfghjklmnpqrstvwxyz\"\
    )]\n             [consonant-count (lambda (word)\n                           \
    \     (length (filter (lambda (c)\n                                          \
    \        (member c consonants))\n                                            \
    \    (string-&gt;list word))))]\n             [selected-words (filter (lambda\
    \ (word)\n                                       (= (consonant-count word) n))\n\
    \                                     words)])\n        selected-words)))\n</code>\n",
  "  (define (is-consonant? c)\n    (member c '(\"b\" \"c\" \"d\" \"f\" \"g\" \"h\"\
    \ \"j\" \"k\" \"l\" \"m\" \"n\" \"p\" \"q\" \"r\" \"s\" \"t\" \"v\" \"w\" \"x\"\
    \ \"z\")))\n  (define (count-consonants word)\n    (cond ((null? word) 0)\n  \
    \        ((is-consonant? (car word)) (+ 1 (count-consonants (cdr word))))\n  \
    \        (else (count-consonants (cdr word)))))\n  (define (select-words-iter\
    \ s n words)\n    (cond ((null? s) words)\n          ((equal? (count-consonants\
    \ (car s)) n) (select-words-iter (cdr s) n (append words (list (car s)))))\n \
    \         (else (select-words-iter (cdr s) n words))))\n  (select-words-iter (string-split\
    \ s) n '()))\n", "  (cond\n    [(empty? s) empty]\n    [(= n (count-consonants\
    \ (first (string-split s #\\space))))\n     (cons (first (string-split s #\\space))\n\
    \           (select_words (string-join (rest (string-split s #\\space)) #\\space)\
    \ n))]\n    [else (select_words (string-join (rest (string-split s #\\space))\
    \ #\\space) n)]))\n", "  (define (consonant? c)\n    (member c '(\"b\" \"c\" \"\
    d\" \"f\" \"g\" \"h\" \"j\" \"k\" \"l\" \"m\" \"n\" \"p\" \"q\" \"r\" \"s\" \"\
    t\" \"v\" \"w\" \"x\" \"y\" \"z\")))\n  (define (count-consonants w)\n    (cond\
    \ ((null? w) 0)\n          ((consonant? (car w)) (+ 1 (count-consonants (cdr w))))\n\
    \          (else (count-consonants (cdr w)))))\n  (define (select-words-helper\
    \ s n)\n    (cond ((null? s) '())\n          ((= n (count-consonants (car s)))\
    \ (cons (car s) (select-words-helper (cdr s) n)))\n          (else (select-words-helper\
    \ (cdr s) n))))\n  (select-words-helper (string-split s) n))\n", "  (define (consonant?\
    \ c)\n    (member c '(\"b\" \"c\" \"d\" \"f\" \"g\" \"h\" \"j\" \"k\" \"l\" \"\
    m\" \"n\" \"p\" \"q\" \"r\" \"s\" \"t\" \"v\" \"w\" \"x\" \"y\" \"z\")))\n  (define\
    \ (word-consonants word)\n    (define (word-consonants-iter word count)\n    \
    \  (if (empty? word)\n          count\n          (if (consonant? (first word))\n\
    \              (word-consonants-iter (rest word) (+ count 1))\n              (word-consonants-iter\
    \ (rest word) count))))\n    (word-consonants-iter word 0))\n  (define (select-words-iter\
    \ s n result)\n    (if (empty? s)\n        result\n        (let ((word (first\
    \ (regexp-match #rx\"\\w+\" s))))\n          (if (= n (word-consonants word))\n\
    \              (select-words-iter (string-drop s (string-length word)) n (append\
    \ result (list word)))\n              (select-words-iter (string-drop s (string-length\
    \ word)) n result)))))\n  (select-words-iter s n '()))\n", "  (define (is-consonant?\
    \ c)\n    (member c '(#\\b #\\c #\\d #\\f #\\g #\\h #\\j #\\k #\\l #\\m #\\n #\\\
    p #\\q #\\r #\\s #\\t #\\v #\\w #\\x #\\y #\\z)))\n  (define (count-consonants\
    \ w)\n    (if (empty? w)\n        0\n        (+ (if (is-consonant? (first w))\
    \ 1 0) (count-consonants (rest w)))))\n  (define (select-words-helper s n)\n \
    \   (if (empty? s)\n        '()\n        (let ((w (first s)))\n          (if (=\
    \ n (count-consonants w))\n              (cons w (select-words-helper (rest s)\
    \ n))\n              (select-words-helper (rest s) n)))))\n  (select-words-helper\
    \ (string-split s) n))\n", "  (define (is_consonant? c)\n    (cond\n      [(or\
    \ (char=? c #\\a) (char=? c #\\e) (char=? c #\\i) (char=? c #\\o) (char=? c #\\\
    u)) #f]\n      [else #t]))\n  (define (count_consonants word)\n    (cond\n   \
    \   [(empty? word) 0]\n      [(is_consonant? (first word)) (+ 1 (count_consonants\
    \ (rest word)))]\n      [else (count_consonants (rest word))]))\n  (define (select_words_helper\
    \ s n)\n    (cond\n      [(empty? s) empty]\n      [(= n (count_consonants (first\
    \ s))) (cons (first s) (select_words_helper (rest s) n))]\n      [else (select_words_helper\
    \ (rest s) n)]))\n  (select_words_helper (string-split s #\\space) n))\n", " \
    \ (define (consonant? c)\n    (not (member c '(\"a\" \"e\" \"i\" \"o\" \"u\"))))\n\
    \  (define (count-consonants word)\n    (length (filter consonant? (string->list\
    \ word))))\n  (filter (lambda (word) (= n (count-consonants word)))\n        \
    \  (regexp-split #rx\"\\s+\" s)))\n", "  (define (is_vowel c)\n    (or (char=?\
    \ c #\\a)\n        (char=? c #\\e)\n        (char=? c #\\i)\n        (char=? c\
    \ #\\o)\n        (char=? c #\\u)))\n  (define (count_consonants s)\n    (define\
    \ (count_consonants_iter s n)\n      (if (string-empty? s)\n          n\n    \
    \      (if (is_vowel (string-ref s 0))\n              (count_consonants_iter (substring\
    \ s 1) n)\n              (count_consonants_iter (substring s 1) (+ n 1)))))\n\
    \    (count_consonants_iter s 0))\n  (define (select_words_iter s n lst)\n   \
    \ (if (string-empty? s)\n        lst\n        (let ((word (string-tokenize s #\\\
    space)))\n          (if (= n (count_consonants word))\n              (select_words_iter\
    \ (substring s (+ (string-length word) 1)) n (cons word lst))\n              (select_words_iter\
    \ (substring s (+ (string-length word) 1)) n lst)))))\n  (select_words_iter s\
    \ n '()))\n", "  (define (is-consonant? c)\n    (not (member c '(#\\a #\\e #\\\
    i #\\o #\\u))))\n  (define (count-consonants word)\n    (if (empty? word)\n  \
    \      0\n        (+ (if (is-consonant? (first word)) 1 0)\n           (count-consonants\
    \ (rest word)))))\n  (define (select-words-iter words n)\n    (if (empty? words)\n\
    \        '()\n        (let ((word (first words)))\n          (if (= n (count-consonants\
    \ word))\n              (cons word (select-words-iter (rest words) n))\n     \
    \         (select-words-iter (rest words) n)))))\n  (select-words-iter (string-split\
    \ s #\\space) n))\n", "  (define (is-vowel? c)\n    (member c '(#\\a #\\e #\\\
    i #\\o #\\u)))\n  (define (count-consonants word)\n    (define (count-consonants-iter\
    \ word count)\n      (cond\n        [(empty? word) count]\n        [(is-vowel?\
    \ (first word)) (count-consonants-iter (rest word) count)]\n        [else (count-consonants-iter\
    \ (rest word) (+ count 1))]))\n    (count-consonants-iter word 0))\n  (define\
    \ (select-words-iter words n result)\n    (cond\n      [(empty? words) result]\n\
    \      [(= n (count-consonants (first words)))\n       (select-words-iter (rest\
    \ words) n (append result (list (first words))))]\n      [else (select-words-iter\
    \ (rest words) n result)]))\n  (select-words-iter (string-split s) n '()))\n",
  "  (define (is-vowel? c)\n    (member c '(#\\a #\\e #\\i #\\o #\\u)))\n  (define\
    \ (count-consonants word)\n    (define (count-consonants-iter word n)\n      (if\
    \ (empty? word)\n          n\n          (if (is-vowel? (first word))\n       \
    \       (count-consonants-iter (rest word) n)\n              (count-consonants-iter\
    \ (rest word) (+ n 1)))))\n    (count-consonants-iter word 0))\n  (define (select-words-iter\
    \ s n result)\n    (if (empty? s)\n        result\n        (let ([word (first\
    \ (regexp-match #rx\"\\w+\" s))])\n          (if (= n (count-consonants word))\n\
    \              (select-words-iter (regexp-replace #rx\"\\w+\" s \"\") n (append\
    \ result (list word)))\n              (select-words-iter (regexp-replace #rx\"\
    \\w+\" s \"\") n result)))))\n  (select-words-iter s n '()))\n", "  (cond\n  \
    \  [(empty? s) empty]\n    [(= n (count-consonants (first (string-split s #\\\
    space))))\n     (cons (first (string-split s #\\space))\n           (select_words\
    \ (rest (string-split s #\\space)) n))]\n    [else (select_words (rest (string-split\
    \ s #\\space)) n)]))\n", "  (define (is_vowel c)\n    (or (equal? c #\\a)\n  \
    \      (equal? c #\\e)\n        (equal? c #\\i)\n        (equal? c #\\o)\n   \
    \     (equal? c #\\u)))\n  (define (count-consonants word)\n    (define (count-consonants-iter\
    \ word count)\n      (if (empty? word)\n          count\n          (if (is_vowel\
    \ (first word))\n              (count-consonants-iter (rest word) count)\n   \
    \           (count-consonants-iter (rest word) (+ count 1)))))\n    (count-consonants-iter\
    \ word 0))\n  (define (select-words-iter s n words)\n    (if (empty? s)\n    \
    \    words\n        (let ((word (string-trim (first (string-split s #\\space)))))\n\
    \          (if (= n (count-consonants word))\n              (select-words-iter\
    \ (rest (string-split s #\\space)) n (append words (list word)))\n           \
    \   (select-words-iter (rest (string-split s #\\space)) n words)))))\n  (select-words-iter\
    \ s n '()))\n", "  (define (is_consonant? c)\n    (not (member c '(\"a\" \"e\"\
    \ \"i\" \"o\" \"u\"))))\n  (define (count-consonants word)\n    (cond [(empty?\
    \ word) 0]\n          [(is_consonant? (first word)) (+ 1 (count-consonants (rest\
    \ word)))]\n          [else (count-consonants (rest word))]))\n  (define (select-words-helper\
    \ s n acc)\n    (cond [(empty? s) acc]\n          [(= n (count-consonants (first\
    \ s))) (select-words-helper (rest s) n (append acc (list (first s))))]\n     \
    \     [else (select-words-helper (rest s) n acc)]))\n  (select-words-helper (string-split\
    \ s) n '()))\n", "  (define (is_consonant c)\n    (cond\n      [(char-ci=? c #\\\
    a) #f]\n      [(char-ci=? c #\\e) #f]\n      [(char-ci=? c #\\i) #f]\n      [(char-ci=?\
    \ c #\\o) #f]\n      [(char-ci=? c #\\u) #f]\n      [else #t]))\n  (define (count_consonants\
    \ word)\n    (cond\n      [(empty? word) 0]\n      [(is_consonant (first word))\
    \ (+ 1 (count_consonants (rest word)))]\n      [else (count_consonants (rest word))]))\n\
    \  (define (select_words_iter s n acc)\n    (cond\n      [(empty? s) acc]\n  \
    \    [(count_consonants (first s)) (= n (count_consonants (first s)))\n      \
    \ (select_words_iter (rest s) n (append acc (list (first s))))]\n      [else (select_words_iter\
    \ (rest s) n acc)]))\n  (select_words_iter (string-split s) n '()))\n", "  (define\
    \ (consonant? c)\n    (member c '(\"b\" \"c\" \"d\" \"f\" \"g\" \"h\" \"j\" \"\
    k\" \"l\" \"m\" \"n\" \"p\" \"q\" \"r\" \"s\" \"t\" \"v\" \"w\" \"x\" \"y\" \"\
    z\")))\n  (define (count-consonants s)\n    (cond\n      [(empty? s) 0]\n    \
    \  [(consonant? (first s)) (+ 1 (count-consonants (rest s)))]\n      [else (count-consonants\
    \ (rest s))]))\n  (define (select-words s n)\n    (cond\n      [(empty? s) empty]\n\
    \      [(= n (count-consonants (first s))) (cons (first s) (select-words (rest\
    \ s) n))]\n      [else (select-words (rest s) n)]))\n  (select-words (string-split\
    \ s) n))\n", "  (cond\n    [(empty? s) empty]\n    [(= n (count-consonants (first\
    \ s)))\n     (cons (first s) (select_words (rest s) n))]\n    [else (select_words\
    \ (rest s) n)]))\n", "  (if (string=? s \"\")\n      '()\n      (let ([w (string-split\
    \ s)])\n        (if (not (empty? w))\n            (let ([w1 (first w)])\n    \
    \          (if (= n (count-consonants w1))\n                  (cons w1 (select_words\
    \ (string-join (rest w)) n))\n                  (select_words (string-join (rest\
    \ w)) n)))\n            '()))))\n", "  (cond\n    [(empty? s) empty]\n    [(=\
    \ n (count-consonants (first (string-split s #\\space))))\n     (cons (first (string-split\
    \ s #\\space))\n           (select_words (string-join (rest (string-split s #\\\
    space)) #\\space) n))]\n    [else (select_words (string-join (rest (string-split\
    \ s #\\space)) #\\space) n)]))\n", "  (define (is-consonant? c)\n    (not (member\
    \ c '(#\\a #\\e #\\i #\\o #\\u))))\n  (define (count-consonants s)\n    (cond\
    \ [(empty? s) 0]\n          [(is-consonant? (first s)) (add1 (count-consonants\
    \ (rest s)))]\n          [else (count-consonants (rest s))]))\n  (define (select-words-helper\
    \ s n lst)\n    (cond [(empty? s) lst]\n          [(is-consonant? (first s)) (select-words-helper\
    \ (rest s) (add1 n) lst)]\n          [(zero? n) (select-words-helper (rest s)\
    \ 0 (cons (list->string (reverse lst)) lst))]\n          [else (select-words-helper\
    \ (rest s) 0 (cons (first s) lst))]))\n  (select-words-helper s 0 '()))\n", " \
    \ (cond\n    [(empty? s) empty]\n    [(= n (count-consonants (first (string-split\
    \ s #\\space))))\n     (cons (first (string-split s #\\space))\n           (select_words\
    \ (string-trim-both s (first (string-split s #\\space))) n))]\n    [else (select_words\
    \ (string-trim-both s (first (string-split s #\\space))) n)]))\n", "  (cond\n\
    \    [(empty? s) empty]\n    [(= n (count-consonants (car (string-split s #\\\
    space))))\n     (cons (car (string-split s #\\space)) (select_words (cdr (string-split\
    \ s #\\space)) n))]\n    [else (select_words (cdr (string-split s #\\space)) n)]))\n"]
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
