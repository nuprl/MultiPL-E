name: HumanEval_146_specialFilter
language: racket
prompt: "#lang racket\n\n;; Write a function that takes an array of numbers as input\
  \ and returns \n;; the number of elements in the array that are greater than 10\
  \ and both \n;; first and last digits of a number are odd (1, 3, 5, 7, 9).\n;; For\
  \ example:\n;; specialFilter([15, -73, 14, -15]) => 1 \n;; specialFilter([33, -2,\
  \ -3, 45, 21, 109]) => 2\n(define (specialFilter nums)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate specialFilter))\n\
  \    (check-equal? (candidate (list 5 -2 1 -5)) 0)\n    (check-equal? (candidate\
  \ (list 15 -73 14 -15)) 1)\n    (check-equal? (candidate (list 33 -2 -3 45 21 109))\
  \ 2)\n    (check-equal? (candidate (list 43 -12 93 125 121 109)) 4)\n    (check-equal?\
  \ (candidate (list 71 -2 -33 75 21 19)) 3)\n    (check-equal? (candidate (list 1))\
  \ 0)\n    (check-equal? (candidate (list )) 0)\n))\n\n(test-humaneval)"
completions: ["  (length (filter (lambda (x) (and (odd? (remainder x 10)) (odd? (quotient\
    \ x 10)))) nums)))\n", "  (length (filter (lambda (n)\n                    (and\
    \ (odd? (remainder n 10))\n                         (odd? (quotient n 10))\n \
    \                        (> n 10)))\n                  nums)))\n", "  (length\
    \ (filter (lambda (n)\n                    (and (odd? (remainder n 10))\n    \
    \                     (odd? (quotient n 10))\n                         (> n 10)))\n\
    \                  nums)))\n", "  (length (filter (lambda (n)\n              \
    \      (and (odd? (remainder n 10))\n                         (odd? (quotient\
    \ n 10))\n                         (> n 10)))\n                  nums)))\n", " \
    \ (length (filter (lambda (n)\n                    (and (odd? (remainder n 10))\n\
    \                         (odd? (quotient n 10))\n                         (>\
    \ n 10)))\n                  nums)))\n", "  (define (isOdd? n)\n    (and (odd?\
    \ (remainder n 10)) (odd? (quotient n 10))))\n  (length (filter (lambda (n) (and\
    \ (> n 10) (isOdd? n))) nums)))\n", "  (define (is-special? n)\n    (and (odd?\
    \ (modulo n 10))\n         (odd? (quotient n 10))))\n  (length (filter is-special?\
    \ nums)))\n", "  (cond\n    [(empty? nums) 0]\n    [(and (> (first nums) 10)\n\
    \          (odd? (first (number->digits (first nums))) (first (number->digits\
    \ (first nums)))))\n     (+ 1 (specialFilter (rest nums)))]\n    [else (specialFilter\
    \ (rest nums))]))\n", "  (length (filter (lambda (x) (and (odd? (remainder x 10))\n\
    \                                   (odd? (quotient x 10))))\n               \
    \   nums)))\n", "  (length (filter (lambda (num)\n                    (and (>\
    \ num 10)\n                         (odd? (remainder num 10))\n              \
    \           (odd? (quotient num 10))))\n                  nums)))\n", "  (length\
    \ (filter (lambda (x) (and (odd? (first-digit x)) (odd? (last-digit x)) (> x 10)))\
    \ nums)))\n", "  (length (filter (lambda (x) (and (odd? (first-digit x)) (odd?\
    \ (last-digit x)) (> x 10))) nums)))\n", "  (length (filter (lambda (x) (and (odd?\
    \ (remainder x 10)) (odd? (quotient x 10)))) nums)))\n", "  (length (filter (lambda\
    \ (num)\n                    (and (> num 10)\n                         (odd? (remainder\
    \ num 10))\n                         (odd? (quotient num 10))))\n            \
    \      nums)))\n", "  (length (filter (lambda (x)\n                    (and (odd?\
    \ (modulo x 10))\n                         (odd? (quotient x 10))\n          \
    \               (> x 10)))\n                  nums)))\n", "  (length (filter (lambda\
    \ (n)\n                    (and (odd? (first-digit n))\n                     \
    \    (odd? (last-digit n))\n                         (> n 10)))\n            \
    \      nums)))\n", "  (length (filter (lambda (x) (and (odd? (remainder x 10))\
    \ (odd? (quotient x 10)))) nums)))\n", "  (length (filter (lambda (n)\n      \
    \              (and (> n 10)\n                         (odd? (remainder n 10))\n\
    \                         (odd? (quotient n 10))))\n                  nums)))\n",
  "  (length (filter (lambda (x)\n                    (and (odd? (remainder x 10))\n\
    \                         (odd? (quotient x 10))\n                         (>\
    \ x 10)))\n                  nums)))\n", "  (length (filter (lambda (n)\n    \
    \                (and (> n 10)\n                         (odd? (remainder n 10))\n\
    \                         (odd? (quotient n 10))))\n                  nums)))\n",
  "  (length (filter (lambda (n)\n                    (and (odd? (modulo n 10))\n\
    \                         (odd? (quotient n 10))\n                         (>\
    \ n 10)))\n                  nums)))\n", "  (length (filter (lambda (n)\n    \
    \                (and (odd? (remainder n 10))\n                         (odd?\
    \ (quotient n 10))\n                         (> n 10)))\n                  nums)))\n",
  "  (length (filter (lambda (x) (and (odd? (remainder x 10)) (odd? (quotient x 10))))\
    \ nums)))\n", "  (length (filter (lambda (n)\n                    (and (odd? (modulo\
    \ n 10))\n                         (odd? (quotient n 10))\n                  \
    \       (> n 10)))\n                  nums)))\n", "  (length (filter (lambda (n)\n\
    \                    (and (odd? (first-digit n))\n                         (odd?\
    \ (last-digit n))\n                         (> n 10)))\n                  nums)))\n",
  "  (length (filter (lambda (n)\n                    (and (odd? (first-digit n))\n\
    \                         (odd? (last-digit n))\n                         (> n\
    \ 10)))\n                  nums)))\n", "  (length (filter (lambda (n)\n      \
    \              (and (odd? (remainder n 10))\n                         (odd? (quotient\
    \ n 10))\n                         (> n 10)))\n                  nums)))\n", " \
    \ (length (filter (lambda (n)\n                    (and (odd? (remainder n 10))\n\
    \                         (odd? (quotient n 10))\n                         (>\
    \ n 10)))\n                  nums)))\n", "  (length (filter (lambda (n)\n    \
    \                (and (odd? (remainder n 10))\n                         (odd?\
    \ (quotient n 10))\n                         (> n 10)))\n                  nums)))\n",
  "  (length (filter (lambda (x)\n                    (and (odd? (remainder x 10))\n\
    \                         (odd? (quotient x 10))\n                         (>\
    \ x 10)))\n                  nums)))\n", "  (length (filter (lambda (x)\n    \
    \                (and (odd? (first-digit x))\n                         (odd? (last-digit\
    \ x))\n                         (> x 10)))\n                  nums)))\n", "  (length\
    \ (filter (lambda (n)\n                    (and (> n 10)\n                   \
    \      (odd? (remainder n 10))\n                         (odd? (quotient n 10))))\n\
    \                  nums)))\n", "  (length (filter (lambda (n)\n              \
    \      (and (odd? (remainder n 10))\n                         (odd? (quotient\
    \ n 10))\n                         (> n 10)))\n                  nums)))\n", " \
    \ (length (filter (lambda (n)\n                    (and (odd? (remainder n 10))\n\
    \                         (odd? (quotient n 10))\n                         (>\
    \ n 10)))\n                  nums)))\n", "  (length (filter (lambda (n)\n    \
    \                (and (odd? (first-digit n))\n                         (odd? (last-digit\
    \ n))\n                         (> n 10)))\n                  nums)))\n", "  (define\
    \ (first-digit n)\n    (if (negative? n)\n        (first-digit (- n))\n      \
    \  (if (< n 10)\n            n\n            (first-digit (/ n 10)))))\n  (define\
    \ (last-digit n)\n    (modulo n 10))\n  (define (is-odd n)\n    (not (even? n)))\n\
    \  (define (is-special n)\n    (and (is-odd (first-digit n))\n         (is-odd\
    \ (last-digit n))\n         (> n 10)))\n  (length (filter is-special nums)))\n",
  "  (length (filter (lambda (n)\n                    (and (odd? (remainder n 10))\n\
    \                         (odd? (quotient n 10))\n                         (>\
    \ n 10)))\n                  nums)))\n", "  (length (filter (lambda (n)\n    \
    \                (and (> n 10)\n                         (odd? (remainder n 10))\n\
    \                         (odd? (quotient n 10))))\n                  nums)))\n",
  "  (define (is-special? num)\n    (and (> num 10)\n         (odd? (remainder num\
    \ 10))\n         (odd? (quotient num 10))))\n  (length (filter is-special? nums)))\n",
  "  (length (filter (lambda (x)\n                    (and (odd? (remainder x 10))\n\
    \                         (odd? (remainder (quotient x 10) 10))\n            \
    \             (> x 10)))\n                  nums)))\n", "  (length (filter (lambda\
    \ (n)\n                    (and (> n 10)\n                         (odd? (modulo\
    \ n 10))\n                         (odd? (quotient n 10))))\n                \
    \  nums)))\n", "  (length (filter (lambda (n)\n                    (and (odd?\
    \ (remainder n 10))\n                         (odd? (quotient n 10))\n       \
    \                  (> n 10)))\n                  nums)))\n", "  (length (filter\
    \ (lambda (n)\n                    (and (odd? (remainder n 10))\n            \
    \             (odd? (quotient n 10))\n                         (> n 10)))\n  \
    \                nums)))\n", "  (length (filter (lambda (x) (and (odd? (remainder\
    \ x 10))\n                                   (odd? (quotient x 10))))\n      \
    \            nums)))\n", "  (length (filter (lambda (x)\n                    (and\
    \ (odd? (remainder x 10))\n                         (odd? (quotient x 10))\n \
    \                        (> x 10)))\n                  nums)))\n", "  (cond [(empty?\
    \ nums) 0]\n        [else (+ (if (and (> (first nums) 10)\n                  \
    \       (odd? (first (digits (first nums))))\n                         (odd? (last\
    \ (digits (first nums)))))\n                    1\n                    0)\n  \
    \               (specialFilter (rest nums)))]))\n", "  (length (filter (lambda\
    \ (n)\n                    (and (odd? (remainder n 10))\n                    \
    \     (odd? (quotient n 10))\n                         (> n 10)))\n          \
    \        nums)))\n", "  (define (is-special? n)\n    (and (odd? (remainder n 10))\n\
    \         (odd? (quotient n 10))))\n  (length (filter is-special? nums)))\n",
  "  (length (filter (lambda (x)\n                    (and (odd? (remainder x 10))\n\
    \                         (odd? (quotient x 10))\n                         (>\
    \ x 10)))\n                  nums)))\n", "  (length (filter (lambda (n)\n    \
    \                (and (odd? (remainder n 10))\n                         (odd?\
    \ (quotient n 10))\n                         (> n 10)))\n                  nums)))\n",
  "  (length (filter (lambda (num)\n                    (and (odd? (remainder num\
    \ 10))\n                         (odd? (quotient num 10))\n                  \
    \       (> num 10)))\n                  nums)))\n", "  (length (filter (lambda\
    \ (n)\n                    (and (odd? (first-digit n))\n                     \
    \    (odd? (last-digit n))\n                         (> n 10)))\n            \
    \      nums)))\n", "  (length (filter (lambda (n)\n                    (and (odd?\
    \ (modulo n 10))\n                         (odd? (quotient n 10))\n          \
    \               (> n 10)))\n                  nums)))\n", "  (length (filter (lambda\
    \ (n)\n                    (and (> n 10)\n                         (odd? (remainder\
    \ n 10))\n                         (odd? (quotient n 10))))\n                \
    \  nums)))\n", "  (cond [(empty? nums) 0]\n        [else\n         (cond [(and\
    \ (> (first nums) 10)\n                     (odd? (first (number->digits (first\
    \ nums)))\n                           (last (number->digits (first nums)))))\n\
    \                (+ 1 (specialFilter (rest nums)))]\n               [else (specialFilter\
    \ (rest nums))])]))\n", "  (length (filter (lambda (n) (and (odd? (first-digit\
    \ n)) (odd? (last-digit n)) (> n 10))) nums)))\n", "  (length (filter (lambda\
    \ (x)\n                    (and (odd? (first-digit x))\n                     \
    \    (odd? (last-digit x))\n                         (> x 10)))\n            \
    \      nums)))\n", "  (length (filter (lambda (n)\n                    (and (odd?\
    \ (modulo n 10))\n                         (odd? (quotient n 10))\n          \
    \               (> n 10)))\n                  nums)))\n", "  (length (filter (lambda\
    \ (n)\n                    (and (odd? (remainder n 10))\n                    \
    \     (odd? (quotient n 10))\n                         (> n 10)))\n          \
    \        nums)))\n", "  (length (filter (lambda (n)\n                    (and\
    \ (odd? (remainder n 10))\n                         (odd? (quotient n 10))\n \
    \                        (> n 10)))\n                  nums)))\n", "  (length\
    \ (filter (lambda (x) (and (odd? (first-digit x)) (odd? (last-digit x)) (> x 10)))\
    \ nums)))\n", "  (length (filter (lambda (x) (and (odd? (remainder x 10)) (odd?\
    \ (quotient x 10)))) nums)))\n", "  (define (isSpecial num)\n    (and (odd? (first-digit\
    \ num))\n         (odd? (last-digit num))\n         (> num 10)))\n  (count isSpecial\
    \ nums))\n", "  (length (filter (lambda (x)\n                    (and (odd? (remainder\
    \ x 10))\n                         (odd? (quotient x 10))\n                  \
    \       (> x 10)))\n                  nums)))\n", "  (length (filter (lambda (x)\
    \ (and (odd? (remainder x 10))\n                                   (odd? (quotient\
    \ x 10))))\n                  nums)))\n", "  (length (filter (lambda (n)\n   \
    \                 (and (odd? (first-digit n))\n                         (odd?\
    \ (last-digit n))\n                         (> n 10)))\n                  nums)))\n",
  "  (length (filter (lambda (n)\n                    (and (odd? (remainder n 10))\n\
    \                         (odd? (quotient n 10))\n                         (>\
    \ n 10)))\n                  nums)))\n", "  (length (filter (lambda (x)\n    \
    \                (and (odd? (remainder x 10))\n                         (odd?\
    \ (quotient x 10))\n                         (> x 10)))\n                  nums)))\n",
  "  (length (filter (lambda (n)\n                    (and (odd? (remainder n 10))\n\
    \                         (odd? (quotient n 10))\n                         (>\
    \ n 10)))\n                  nums)))\n", "  (define (is-special? n)\n    (and\
    \ (> n 10)\n         (odd? (remainder n 10))\n         (odd? (quotient n 10))))\n\
    \  (length (filter is-special? nums)))\n", "  (filter (lambda (num)\n        \
    \    (and (odd? (remainder num 10))\n                 (odd? (quotient num 10))\n\
    \                 (> num 10)))\n          nums))\n", "  (length (filter (lambda\
    \ (x)\n                    (and (odd? (modulo x 10))\n                       \
    \  (odd? (quotient x 10))\n                         (> x 10)))\n             \
    \     nums)))\n", "  (length (filter (lambda (x) (and (odd? (first-digit x)) (odd?\
    \ (last-digit x)) (> x 10))) nums)))\n", "  (length (filter (lambda (n)\n    \
    \                (and (odd? (first-digit n))\n                         (odd? (last-digit\
    \ n))\n                         (> n 10)))\n                  nums)))\n", "  (length\
    \ (filter (lambda (n)\n                    (and (odd? (remainder n 10))\n    \
    \                     (odd? (quotient n 10))\n                         (> n 10)))\n\
    \                  nums)))\n", "  (length (filter (lambda (x)\n              \
    \      (and (odd? (first-digit x))\n                         (odd? (last-digit\
    \ x))\n                         (> x 10)))\n                  nums)))\n", "  (length\
    \ (filter (lambda (x)\n                    (and (odd? (remainder x 10))\n    \
    \                     (odd? (quotient x 10))\n                         (> x 10)))\n\
    \                  nums)))\n", "  (length (filter (lambda (n)\n              \
    \      (and (odd? (modulo n 10))\n                         (odd? (quotient n 10))\n\
    \                         (> n 10)))\n                  nums)))\n", "  (length\
    \ (filter (lambda (n)\n                    (and (> n 10)\n                   \
    \      (odd? (remainder n 10))\n                         (odd? (quotient n 10))))\n\
    \                  nums)))\n", "  (define (is-special? num)\n    (and (> num 10)\n\
    \         (odd? (remainder num 10))\n         (odd? (quotient num 10))))\n  (length\
    \ (filter is-special? nums)))\n", "  (define (is-special? n)\n    (and (odd? (remainder\
    \ n 10))\n         (odd? (quotient n 10))))\n  (length (filter is-special? nums)))\n",
  "  (length (filter (lambda (n)\n                    (and (odd? (remainder n 10))\n\
    \                         (odd? (quotient n 10))\n                         (>\
    \ n 10)))\n                  nums)))\n", "  (length (filter (lambda (n)\n    \
    \                (and (odd? (first-digit n))\n                         (odd? (last-digit\
    \ n))\n                         (> n 10)))\n                  nums)))\n", "  (filter\
    \ (lambda (n)\n            (and (odd? (first-digit n))\n                 (odd?\
    \ (last-digit n))\n                 (> n 10)))\n          nums))\n", "  (define\
    \ (is-special? n)\n    (and\n     (odd? (remainder n 10))\n     (odd? (quotient\
    \ n 10))\n     (> n 10)))\n  (length (filter is-special? nums)))\n", "  (length\n\
    \   (filter\n    (lambda (n)\n      (and\n       (odd? (remainder n 10))\n   \
    \    (odd? (quotient n 10))))\n    nums)))\n", "  (length (filter (lambda (x)\n\
    \                    (and (odd? (first-digit x))\n                         (odd?\
    \ (last-digit x))\n                         (> x 10)))\n                  nums)))\n",
  "  (length (filter (lambda (n)\n                    (and (odd? (modulo n 10))\n\
    \                         (odd? (quotient n 10))\n                         (>\
    \ n 10)))\n                  nums)))\n", "  (length (filter (lambda (n)\n    \
    \                (and (odd? (remainder n 10))\n                         (odd?\
    \ (quotient n 10))\n                         (> n 10)))\n                  nums)))\n",
  "  (length (filter (lambda (n)\n                    (and (odd? (remainder n 10))\n\
    \                         (odd? (quotient n 10))\n                         (>\
    \ n 10)))\n                  nums)))\n", "  (length (filter (lambda (n)\n    \
    \                (and (odd? (remainder n 10))\n                         (odd?\
    \ (quotient n 10))\n                         (> n 10)))\n                  nums)))\n",
  "  (length (filter (lambda (n)\n                    (and (odd? (remainder n 10))\n\
    \                         (odd? (quotient n 10))\n                         (>\
    \ n 10)))\n                  nums)))\n", "  (length (filter (lambda (x)\n    \
    \                (and (odd? (first-digit x))\n                         (odd? (last-digit\
    \ x))\n                         (> x 10)))\n                  nums)))\n", "  (define\
    \ (first-digit n)\n    (if (= n 0)\n        0\n        (first-digit (quotient\
    \ n 10))))\n  (define (last-digit n)\n    (remainder n 10))\n  (define (is-odd?\
    \ n)\n    (if (= (remainder n 2) 0)\n        #f\n        #t))\n  (define (is-special?\
    \ n)\n    (and (is-odd? (first-digit n))\n         (is-odd? (last-digit n))\n\
    \         (> n 10)))\n  (length (filter is-special? nums)))\n", "  (length (filter\
    \ (lambda (x) (and (odd? (first-digit x)) (odd? (last-digit x)) (> x 10))) nums)))\n",
  "  (length (filter (lambda (n)\n                    (and (odd? (remainder n 10))\n\
    \                         (odd? (quotient n 10))\n                         (>\
    \ n 10)))\n                  nums)))\n", "  (length (filter (lambda (n)\n    \
    \                (and (> n 10)\n                         (odd? (remainder n 10))\n\
    \                         (odd? (quotient n 10))))\n                  nums)))\n",
  "  (length (filter (lambda (n)\n                    (and (> n 10)\n            \
    \             (odd? (remainder n 10))\n                         (odd? (quotient\
    \ n 10))))\n                  nums)))\n", "  (length (filter (\u03BB (n)\n   \
    \                 (and (odd? (remainder n 10))\n                         (odd?\
    \ (quotient n 10))\n                         (> n 10)))\n                  nums)))\n",
  "  (length (filter (lambda (x)\n                    (and (odd? (remainder x 10))\n\
    \                         (odd? (quotient x 10))\n                         (>\
    \ x 10)))\n                  nums)))\n", "  (length (filter (lambda (n)\n    \
    \                (and (odd? (first-digit n))\n                         (odd? (last-digit\
    \ n))\n                         (> n 10)))\n                  nums)))\n", "  (length\
    \ (filter (lambda (x)\n                    (and (odd? (first-digit x))\n     \
    \                    (odd? (last-digit x))\n                         (> x 10)))\n\
    \                  nums)))\n", "  (length (filter (lambda (x) (and (odd? (first-digit\
    \ x)) (odd? (last-digit x)) (> x 10))) nums)))\n", "  (length (filter (lambda\
    \ (n)\n                    (and (> n 10)\n                         (odd? (remainder\
    \ n 10))\n                         (odd? (quotient n 10))))\n                \
    \  nums)))\n", "  (length (filter (lambda (n)\n                    (and (> n 10)\n\
    \                         (odd? (remainder n 10))\n                         (odd?\
    \ (quotient n 10))))\n                  nums)))\n", "  (length (filter (lambda\
    \ (x) (and (odd? (remainder x 10)) (odd? (quotient x 10)))) nums)))\n", "  (length\
    \ (filter (lambda (x) (and (> x 10) (odd? (first x)) (odd? (last x)))) (map string->number\
    \ nums))))\n", "  (length (filter (lambda (n)\n                    (and (odd?\
    \ (remainder n 10))\n                         (odd? (quotient n 10))\n       \
    \                  (> n 10)))\n                  nums)))\n", "  (length (filter\
    \ (lambda (n)\n                    (and (odd? (remainder n 10))\n            \
    \             (odd? (quotient n 10))\n                         (> n 10)))\n  \
    \                nums)))\n", "  (length (filter (lambda (n)\n                \
    \    (and (> n 10)\n                         (odd? (remainder n 10))\n       \
    \                  (odd? (quotient n 10))))\n                  nums)))\n", " \
    \ (length (filter (lambda (x) (and (odd? (first-digit x)) (odd? (last-digit x))\
    \ (> x 10))) nums)))\n", "  (length (filter (lambda (x) (and (> x 10) (odd? (remainder\
    \ x 10)) (odd? (quotient x 10)))) nums)))\n", "  (length (filter (lambda (n)\n\
    \                    (and (odd? (remainder n 10))\n                         (odd?\
    \ (quotient n 10))\n                         (> n 10)))\n                  nums)))\n",
  "  (length (filter (lambda (x)\n                    (and (odd? (remainder x 10))\n\
    \                         (odd? (quotient x 10))\n                         (>\
    \ x 10)))\n                  nums)))\n", "  (length (filter (lambda (n)\n    \
    \                (and (odd? (remainder n 10))\n                         (odd?\
    \ (quotient n 10))\n                         (> n 10)))\n                  nums)))\n",
  "  (length (filter (lambda (x)\n                    (and (odd? (remainder x 10))\n\
    \                         (odd? (quotient x 10))\n                         (>\
    \ x 10)))\n                  nums)))\n", "  (length (filter (lambda (n)\n    \
    \                (and (odd? (remainder n 10))\n                         (odd?\
    \ (quotient n 10))\n                         (> n 10)))\n                  nums)))\n",
  "  (length (filter (lambda (x) (and (odd? (remainder x 10)) (odd? (quotient x 10))))\
    \ nums)))\n", "  (length (filter (lambda (num)\n                    (and (odd?\
    \ (modulo num 10))\n                         (odd? (quotient num 10))\n      \
    \                   (> num 10)))\n                  nums)))\n", "  (length (filter\
    \ (lambda (x)\n                    (and (odd? (remainder x 10))\n            \
    \             (odd? (quotient x 10))\n                         (> x 10)))\n  \
    \                nums)))\n", "  (length (filter (lambda (n) (and (odd? (first-digit\
    \ n)) (odd? (last-digit n)) (> n 10))) nums)))\n", "  (length (filter (lambda\
    \ (x) (and (odd? (modulo x 10)) (odd? (modulo x (expt 10 (sub1 (length (number->string\
    \ x)))))))) nums)))\n", "  (length (filter (lambda (n)\n                    (and\
    \ (odd? (first-digit n))\n                         (odd? (last-digit n))\n   \
    \                      (> n 10)))\n                  nums)))\n", "  (length (filter\
    \ (lambda (n)\n                    (and (odd? (modulo n 10))\n               \
    \          (odd? (quotient n 10))\n                         (> n 10)))\n     \
    \             nums)))\n", "  (cond [(empty? nums) 0]\n        [else (+ (if (and\
    \ (> (first nums) 10)\n                        (odd? (first (digits (first nums))))\n\
    \                        (odd? (last (digits (first nums)))))\n              \
    \      1\n                    0)\n                 (specialFilter (rest nums)))]))\n",
  "  (length (filter (lambda (x) (and (odd? (remainder x 10)) (odd? (quotient x 10))))\
    \ nums)))\n", "  (length (filter (lambda (x)\n                    (and (odd? (remainder\
    \ x 10))\n                         (odd? (quotient x 10))\n                  \
    \       (> x 10)))\n                  nums)))\n", "  (length (filter (lambda (n)\n\
    \                    (and (odd? (first-digit n))\n                         (odd?\
    \ (last-digit n))\n                         (> n 10)))\n                  nums)))\n",
  "  (length (filter (lambda (n)\n                    (and (> n 10)\n            \
    \             (odd? (remainder n 10))\n                         (odd? (quotient\
    \ n 10))))\n                  nums)))\n", "  (length (filter (lambda (x) (and\
    \ (> x 10) (odd? (remainder x 10)) (odd? (quotient x 10)))) nums)))\n", "  (define\
    \ (isSpecial num)\n    (and (odd? (remainder num 10))\n         (odd? (quotient\
    \ num 10))\n         (> num 10)))\n  (length (filter isSpecial nums)))\n", " \
    \ (length (filter (lambda (n)\n                    (and (> n 10)\n           \
    \              (odd? (remainder n 10))\n                         (odd? (quotient\
    \ n 10))))\n                  nums)))\n", "  (length (filter (lambda (n)\n   \
    \                 (and (odd? (remainder n 10))\n                         (odd?\
    \ (quotient n 10))\n                         (> n 10)))\n                  nums)))\n",
  "  (length (filter (lambda (n)\n                    (and (odd? (modulo n 10))\n\
    \                         (odd? (quotient n 10))\n                         (>\
    \ n 10)))\n                  nums)))\n", "  (length (filter (lambda (x) (and (odd?\
    \ (remainder x 10))\n                                   (odd? (quotient x 10))))\n\
    \                  nums)))\n", "  (length (filter (lambda (n)\n              \
    \      (and (odd? (remainder n 10))\n                         (odd? (quotient\
    \ n 10))\n                         (> n 10)))\n                  nums)))\n", " \
    \ (length (filter (lambda (x)\n                    (and (odd? (remainder x 10))\n\
    \                         (odd? (quotient x 10))\n                         (>\
    \ x 10)))\n                  nums)))\n", "  (length (filter (lambda (n)\n    \
    \                (and (odd? (remainder n 10))\n                         (odd?\
    \ (quotient n 10))\n                         (> n 10)))\n                  nums)))\n",
  "  (length (filter (lambda (x) (and (odd? (remainder x 10))\n                  \
    \                 (odd? (quotient x 10))))\n                  nums)))\n", "  (filter\
    \ (lambda (x)\n            (and (odd? (remainder x 10))\n                 (odd?\
    \ (quotient x 10))\n                 (> x 10)))\n          nums))\n", "  (length\
    \ (filter (lambda (x) (and (odd? (remainder x 10)) (odd? (quotient x 10)))) nums)))\n",
  "  (length (filter (lambda (x)\n                    (and (odd? (first-digit x))\n\
    \                         (odd? (last-digit x))\n                         (> x\
    \ 10)))\n                  nums)))\n", "  (length (filter (lambda (n)\n      \
    \              (and (odd? (remainder n 10))\n                         (odd? (quotient\
    \ n 10))\n                         (> n 10)))\n                  nums)))\n", " \
    \ (length (filter (lambda (x)\n                    (and (odd? (remainder x 10))\n\
    \                         (odd? (quotient x 10))\n                         (>\
    \ x 10)))\n                  nums)))\n", "  (define (is-special? num)\n    (and\
    \ (odd? (remainder num 10))\n         (odd? (quotient num 10))\n         (> num\
    \ 10)))\n  (length (filter is-special? nums)))\n", "  (length (filter (lambda\
    \ (n)\n                    (and (odd? (remainder n 10))\n                    \
    \     (odd? (quotient n 10))\n                         (> n 10)))\n          \
    \        nums)))\n", "  (length (filter (lambda (n)\n                    (and\
    \ (> n 10)\n                         (odd? (remainder n 10))\n               \
    \          (odd? (quotient n 10))))\n                  nums)))\n", "  (define\
    \ (firstDigit n)\n    (if (zero? n)\n        0\n        (firstDigit (quotient\
    \ n 10))))\n  (define (lastDigit n)\n    (modulo n 10))\n  (define (isOdd n)\n\
    \    (if (zero? (modulo n 2))\n        #f\n        #t))\n  (define (isGreaterThanTen\
    \ n)\n    (if (> n 10)\n        #t\n        #f))\n  (define (isSpecial n)\n  \
    \  (if (and (isOdd (firstDigit n))\n             (isOdd (lastDigit n))\n     \
    \        (isGreaterThanTen n))\n        #t\n        #f))\n  (define (countSpecial\
    \ nums)\n    (if (null? nums)\n        0\n        (if (isSpecial (car nums))\n\
    \            (+ 1 (countSpecial (cdr nums)))\n            (countSpecial (cdr nums)))))\n\
    \  (countSpecial nums))\n", "  (length (filter (lambda (x)\n                 \
    \   (and (odd? (remainder x 10))\n                         (odd? (quotient x 10))\n\
    \                         (> x 10)))\n                  nums)))\n", "  (length\
    \ (filter (lambda (n)\n                    (and (odd? (remainder n 10))\n    \
    \                     (odd? (quotient n 10))\n                         (> n 10)))\n\
    \                  nums)))\n", "  (filter (lambda (x) (and (> x 10) (odd? (remainder\
    \ x 10)) (odd? (quotient x 10)))) nums))\n", "  (length (filter (lambda (num)\n\
    \                    (and (> num 10)\n                         (odd? (modulo num\
    \ 10))\n                         (odd? (quotient num 10))))\n                \
    \  nums)))\n", "  (length (filter (lambda (n)\n                    (and (odd?\
    \ (remainder n 10))\n                         (odd? (quotient n 10))\n       \
    \                  (> n 10)))\n                  nums)))\n", "  (length (filter\
    \ (lambda (x) (and (odd? (remainder x 10)) (odd? (quotient x 10)))) nums)))\n",
  "  (length (filter (lambda (n)\n                    (and (odd? (first-digit n))\n\
    \                         (odd? (last-digit n))\n                         (> n\
    \ 10)))\n                  nums)))\n", "  (length (filter (lambda (x)\n      \
    \              (and (odd? (modulo x 10))\n                         (odd? (modulo\
    \ x (expt 10 (sub1 (length (number->string x))))))\n                         (>\
    \ x 10)))\n                  nums)))\n", "  (length (filter (lambda (x)\n    \
    \                (and (> x 10)\n                         (odd? (remainder x 10))\n\
    \                         (odd? (quotient x 10))))\n                  nums)))\n",
  "  (define (firstDigit n)\n    (if (< n 10)\n        n\n        (firstDigit (quotient\
    \ n 10))))\n  (define (lastDigit n)\n    (remainder n 10))\n  (define (isOdd n)\n\
    \    (if (= (remainder n 2) 0)\n        #f\n        #t))\n  (define (isGreaterThanTen\
    \ n)\n    (if (> n 10)\n        #t\n        #f))\n  (define (isSpecial n)\n  \
    \  (if (and (isGreaterThanTen n) (isOdd (firstDigit n)) (isOdd (lastDigit n)))\n\
    \        #t\n        #f))\n  (define (count nums)\n    (if (null? nums)\n    \
    \    0\n        (if (isSpecial (car nums))\n            (+ 1 (count (cdr nums)))\n\
    \            (count (cdr nums)))))\n  (count nums))\n", "  (length (filter (lambda\
    \ (x)\n                    (and (odd? (remainder x 10))\n                    \
    \     (odd? (quotient x 10))\n                         (> x 10)))\n          \
    \        nums)))\n", "  (length (filter (\u03BB (n)\n                    (and\
    \ (odd? (remainder n 10))\n                         (odd? (quotient n 10))\n \
    \                        (> n 10)))\n                  nums)))\n", "  (length\
    \ (filter (lambda (x)\n                    (and (odd? (remainder x 10))\n    \
    \                     (odd? (quotient x 10))\n                         (> x 10)))\n\
    \                  nums)))\n", "  (define (isSpecial? n)\n    (and (odd? (first-digit\
    \ n))\n         (odd? (last-digit n))\n         (> n 10)))\n  (length (filter\
    \ isSpecial? nums)))\n", "  (define (is-special? n)\n    (and (odd? (remainder\
    \ n 10))\n         (odd? (quotient n 10))))\n  (length (filter is-special? nums)))\n",
  "  (length (filter (lambda (x) (and (odd? (remainder x 10))\n                  \
    \                 (odd? (quotient x 10))))\n                  nums)))\n", "  (length\
    \ (filter (lambda (x)\n                    (and (odd? (remainder x 10))\n    \
    \                     (odd? (quotient x 10))\n                         (> x 10)))\n\
    \                  nums)))\n", "  (length (filter (lambda (x)\n              \
    \      (and (odd? (remainder x 10))\n                         (odd? (quotient\
    \ x 10))\n                         (> x 10)))\n                  nums)))\n", " \
    \ (length (filter (lambda (x) (and (odd? (remainder x 10))\n                 \
    \                  (odd? (quotient x 10))))\n                  nums)))\n", " \
    \ (length (filter (lambda (n)\n                    (and (odd? (remainder n 10))\n\
    \                         (odd? (quotient n 10))\n                         (>\
    \ n 10)))\n                  nums)))\n", "  (length (filter (lambda (x)\n    \
    \                (and (odd? (first-digit x))\n                         (odd? (last-digit\
    \ x))\n                         (> x 10)))\n                  nums)))\n", "  (length\
    \ (filter (lambda (x)\n                    (and (odd? (remainder x 10))\n    \
    \                     (odd? (quotient x 10))\n                         (> x 10)))\n\
    \                  nums)))\n", "  (length (filter (lambda (n)\n              \
    \      (and (odd? (remainder n 10))\n                         (odd? (quotient\
    \ n 10))\n                         (> n 10)))\n                  nums)))\n", " \
    \ (filter (\u03BB (n)\n            (and (> n 10)\n                 (odd? (remainder\
    \ n 10))\n                 (odd? (remainder (quotient n 10) 10))))\n         \
    \ nums))\n", "  (cond\n    [(empty? nums) 0]\n    [(and (odd? (first nums))\n\
    \          (odd? (last-digit (first nums)))\n          (> (first nums) 10))\n\
    \     (+ 1 (specialFilter (rest nums)))]\n    [else (specialFilter (rest nums))]))\n",
  "  (length (filter (lambda (x) (and (> x 10) (odd? (remainder x 10)) (odd? (quotient\
    \ x 10)))) nums)))\n", "  (length (filter (lambda (n)\n                    (and\
    \ (odd? (remainder n 10))\n                         (odd? (quotient n 10))\n \
    \                        (> n 10)))\n                  nums)))\n", "  (length\
    \ (filter (lambda (n)\n                    (and (odd? (first-digit n))\n     \
    \                    (odd? (last-digit n))\n                         (> n 10)))\n\
    \                  nums)))\n", "  (length (filter (lambda (x) (and (odd? (modulo\
    \ x 10)) (odd? (quotient x 10)))) nums)))\n", "  (length (filter (lambda (x)\n\
    \                    (and (odd? (remainder x 10))\n                         (odd?\
    \ (quotient x 10))\n                         (> x 10)))\n                  nums)))\n",
  "  (length (filter (lambda (n)\n                    (and (> n 10)\n            \
    \             (odd? (remainder n 10))\n                         (odd? (quotient\
    \ n 10))))\n                  nums)))\n", "  (length (filter (lambda (x) (and\
    \ (odd? (first-digit x)) (odd? (last-digit x)) (> x 10))) nums)))\n", "  (length\
    \ (filter (lambda (n)\n                    (and (> n 10)\n                   \
    \      (odd? (remainder n 10))\n                         (odd? (quotient n 10))))\n\
    \                  nums)))\n", "  (define (firstDigit n)\n    (if (negative? n)\n\
    \        (firstDigit (- n))\n        (if (< n 10)\n            n\n           \
    \ (firstDigit (/ n 10)))))\n  (define (lastDigit n)\n    (if (negative? n)\n \
    \       (lastDigit (- n))\n        (modulo n 10)))\n  (define (isOdd n)\n    (if\
    \ (= (modulo n 2) 1)\n        true\n        false))\n  (define (isGreaterThanTen\
    \ n)\n    (if (> n 10)\n        true\n        false))\n  (define (isSpecial n)\n\
    \    (if (and (isGreaterThanTen n) (isOdd (firstDigit n)) (isOdd (lastDigit n)))\n\
    \        true\n        false))\n  (define (countSpecial nums)\n    (if (null?\
    \ nums)\n        0\n        (if (isSpecial (car nums))\n            (+ 1 (countSpecial\
    \ (cdr nums)))\n            (countSpecial (cdr nums)))))\n  (countSpecial nums))\n",
  "  (length (filter (lambda (n)\n                    (and (odd? (first-digit n))\n\
    \                         (odd? (last-digit n))\n                         (> n\
    \ 10)))\n                  nums)))\n", "  (length (filter (lambda (x)\n      \
    \              (and (odd? (remainder x 10))\n                         (odd? (quotient\
    \ x 10))\n                         (> x 10)))\n                  nums)))\n", " \
    \ (length (filter (lambda (n)\n                    (and (odd? (first-digit n))\n\
    \                         (odd? (last-digit n))\n                         (> n\
    \ 10)))\n                  nums)))\n", "  (length (filter (lambda (x) (and (odd?\
    \ (modulo x 10)) (odd? (modulo x (expt 10 (sub1 (length (number->string x))))))))\
    \ nums)))\n", "  (length (filter (lambda (x)\n                    (and (odd? (modulo\
    \ x 10))\n                         (odd? (quotient x 10))\n                  \
    \       (> x 10)))\n                  nums)))\n", "  (length (filter (\u03BB (n)\n\
    \                    (and (odd? (remainder n 10))\n                         (odd?\
    \ (quotient n 10))\n                         (> n 10)))\n                  nums)))\n",
  "  (length (filter (lambda (n)\n                    (and (odd? (first-digit n))\n\
    \                         (odd? (last-digit n))\n                         (> n\
    \ 10)))\n                  nums)))\n", "  (length (filter (lambda (x)\n      \
    \              (and (odd? (first-digit x))\n                         (odd? (last-digit\
    \ x))\n                         (> x 10)))\n                  nums)))\n", "  (length\
    \ (filter (lambda (x) (and (odd? (remainder x 10))\n                         \
    \          (odd? (quotient x 10))))\n                  nums)))\n", "  (length\
    \ (filter (lambda (n)\n                    (and (odd? (remainder n 10))\n    \
    \                     (odd? (quotient n 10))\n                         (> n 10)))\n\
    \                  nums)))\n", "  (define (is-special? n)\n    (and (> n 10)\n\
    \         (odd? (remainder n 10))\n         (odd? (quotient n 10))))\n  (length\
    \ (filter is-special? nums)))\n", "  (length (filter (lambda (n)\n           \
    \         (and (odd? (modulo n 10))\n                         (odd? (quotient\
    \ n 10))\n                         (> n 10)))\n                  nums)))\n", " \
    \ (length (filter (lambda (n)\n                    (and (> n 10)\n           \
    \              (odd? (first-digit n))\n                         (odd? (last-digit\
    \ n))))\n                  nums)))\n", "  (length (filter (lambda (n)\n      \
    \              (and (odd? (first-digit n))\n                         (odd? (last-digit\
    \ n))\n                         (> n 10)))\n                  nums)))\n", "  (length\
    \ (filter (lambda (x) (and (odd? (remainder x 10))\n                         \
    \          (odd? (quotient x 10))))\n                  nums)))\n", "  (length\
    \ (filter (lambda (x)\n                    (and (odd? (remainder x 10))\n    \
    \                     (odd? (quotient x 10))\n                         (> x 10)))\n\
    \                  nums)))\n", "  (length (filter (lambda (n)\n              \
    \      (and (odd? (modulo n 10))\n                         (odd? (quotient n 10))\n\
    \                         (> n 10)))\n                  nums)))\n", "  (length\
    \ (filter (lambda (n) (and (odd? (remainder n 10))\n                         \
    \          (odd? (quotient n 10))))\n                   nums)))\n"]
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
