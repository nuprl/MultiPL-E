name: HumanEval_51_remove_vowels
language: racket
prompt: "#lang racket\n\n;; remove_vowels is a function that takes string and returns\
  \ string without vowels.\n;; >>> remove_vowels('')\n;; ''\n;; >>> remove_vowels('abcdef')\n\
  ;; 'bcdf'\n;; >>> remove_vowels('aaaaa')\n;; ''\n;; >>> remove_vowels('aaBAA')\n\
  ;; 'B'\n;; >>> remove_vowels('zbcd')\n;; 'zbcd'\n(define (remove_vowels text)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate remove_vowels))\n\
  \    (check-equal? (candidate \"\") \"\")\n    (check-equal? (candidate \"abcdef\n\
  ghijklm\") \"bcdf\nghjklm\")\n    (check-equal? (candidate \"fedcba\") \"fdcb\"\
  )\n    (check-equal? (candidate \"eeeee\") \"\")\n    (check-equal? (candidate \"\
  acBAA\") \"cB\")\n    (check-equal? (candidate \"EcBOO\") \"cB\")\n    (check-equal?\
  \ (candidate \"ybcd\") \"ybcd\")\n))\n\n(test-humaneval)"
completions: ["  (define (is_vowel? c)\n    (member c '(#\\a #\\e #\\i #\\o #\\u)))\n\
    \  (define (remove_vowels-iter text result)\n    (cond ((null? text) result)\n\
    \          ((is_vowel? (car text)) (remove_vowels-iter (cdr text) result))\n \
    \         (else (remove_vowels-iter (cdr text) (string-append result (list (car\
    \ text)))))))\n  (remove_vowels-iter text \"\"))\n", "  (cond\n    [(empty? text)\
    \ empty]\n    [(member (first text) '(#\\a #\\e #\\i #\\o #\\u)) (remove_vowels\
    \ (rest text))]\n    [else (cons (first text) (remove_vowels (rest text)))]))\n",
  "  (cond\n    [(empty? text) empty]\n    [(member (first text) '(#\\a #\\e #\\i\
    \ #\\o #\\u)) (remove_vowels (rest text))]\n    [else (cons (first text) (remove_vowels\
    \ (rest text)))]))\n", "  (regexp-replace* #rx\"[aeiou]\" text \"\"))\n", "  (regexp-replace*\
    \ #rx\"[aeiouAEIOU]\" text \"\"))\n", "  (regexp-replace* #rx\"[aeiouAEIOU]\"\
    \ text \"\"))\n", "  (define (is_vowel? ch)\n    (or (char=? ch #\\a)\n      \
    \  (char=? ch #\\e)\n        (char=? ch #\\i)\n        (char=? ch #\\o)\n    \
    \    (char=? ch #\\u)))\n  (define (remove_vowels-iter text result)\n    (cond\
    \ ((string=? text \"\") result)\n          ((is_vowel? (string-ref text 0))\n\
    \           (remove_vowels-iter (substring text 1) result))\n          (else (remove_vowels-iter\
    \ (substring text 1)\n                                    (string-append result\
    \ (string (string-ref text 0)))))))\n  (remove_vowels-iter text \"\"))\n", " \
    \ (define (is_vowel? char)\n    (member char '(#\\a #\\e #\\i #\\o #\\u #\\A #\\\
    E #\\I #\\O #\\U)))\n  (define (remove_vowels_iter text result)\n    (cond\n \
    \     [(empty? text) (reverse result)]\n      [(is_vowel? (first text)) (remove_vowels_iter\
    \ (rest text) result)]\n      [else (remove_vowels_iter (rest text) (cons (first\
    \ text) result))]))\n  (remove_vowels_iter text '()))\n", "  (regexp-replace*\
    \ #rx\"[aeiou]\" text \"\"))\n", "  (define (is_vowel? c)\n    (member c '(#\\\
    a #\\e #\\i #\\o #\\u #\\A #\\E #\\I #\\O #\\U)))\n  (define (remove_vowels_iter\
    \ text result)\n    (cond\n      [(empty? text) result]\n      [(is_vowel? (first\
    \ text)) (remove_vowels_iter (rest text) result)]\n      [else (remove_vowels_iter\
    \ (rest text) (append result (list (first text))))]))\n  (remove_vowels_iter text\
    \ '()))\n", "  (cond\n    [(empty? text) empty]\n    [(member (first text) '(a\
    \ e i o u A E I O U)) (remove_vowels (rest text))]\n    [else (cons (first text)\
    \ (remove_vowels (rest text)))]))\n", "  (regexp-replace* #rx\"[aeiouAEIOU]\"\
    \ text \"\"))\n", "  (cond\n    [(empty? text) empty]\n    [(member (first text)\
    \ '(#\\a #\\e #\\i #\\o #\\u)) (remove_vowels (rest text))]\n    [else (cons (first\
    \ text) (remove_vowels (rest text)))]))\n", "  (cond\n    [(empty? text) empty]\n\
    \    [(member (first text) '(#\\a #\\e #\\i #\\o #\\u)) (remove_vowels (rest text))]\n\
    \    [else (cons (first text) (remove_vowels (rest text)))]))\n", "  (regexp-replace*\
    \ #rx\"[aeiouAEIOU]\" text \"\"))\n", "  (regexp-replace* #rx\"[aeiou]\" text\
    \ \"\"))\n", "  (cond\n    [(empty? text) empty]\n    [(member (first text) '(\"\
    a\" \"e\" \"i\" \"o\" \"u\")) (remove_vowels (rest text))]\n    [else (cons (first\
    \ text) (remove_vowels (rest text)))]))\n", "  (string-append (filter (lambda\
    \ (c) (not (member c '(\"a\" \"e\" \"i\" \"o\" \"u\")))) (string->list text))))\n",
  "  (regexp-replace* #rx\"[aeiouAEIOU]\" text \"\"))\n", "  (cond\n    [(empty? text)\
    \ empty]\n    [(member (first text) '(#\\a #\\e #\\i #\\o #\\u)) (remove_vowels\
    \ (rest text))]\n    [else (cons (first text) (remove_vowels (rest text)))]))\n",
  "  (cond\n    [(empty? text) empty]\n    [(member (first text) '(\"a\" \"e\" \"\
    i\" \"o\" \"u\")) (remove_vowels (rest text))]\n    [else (cons (first text) (remove_vowels\
    \ (rest text)))]))\n", "  (regexp-replace* #rx\"[aeiou]\" text \"\"))\n", "  (define\
    \ (is_vowel? c)\n    (member c '(#\\a #\\e #\\i #\\o #\\u)))\n  (define (remove_vowels_iter\
    \ text result)\n    (cond\n      [(empty? text) result]\n      [(is_vowel? (first\
    \ text)) (remove_vowels_iter (rest text) result)]\n      [else (remove_vowels_iter\
    \ (rest text) (append result (list (first text))))]))\n  (remove_vowels_iter text\
    \ '()))\n", "  (cond\n    [(empty? text) empty]\n    [(member (first text) '(#\\\
    a #\\e #\\i #\\o #\\u)) (remove_vowels (rest text))]\n    [else (cons (first text)\
    \ (remove_vowels (rest text)))]))\n", "  (cond\n    [(empty? text) empty]\n  \
    \  [(member (first text) '(#\\a #\\e #\\i #\\o #\\u)) (remove_vowels (rest text))]\n\
    \    [else (cons (first text) (remove_vowels (rest text)))]))\n", "  (regexp-replace*\
    \ #rx\"[aeiou]\" text \"\"))\n", "  (regexp-replace* #rx\"[aeiou]\" text \"\"\
    ))\n", "  (regexp-replace* #rx\"[aeiou]\" text \"\"))\n", "  (define (is_vowel?\
    \ c)\n    (member c '(#\\a #\\e #\\i #\\o #\\u)))\n  (define (remove_vowels-iter\
    \ text result)\n    (cond ((null? text) result)\n          ((is_vowel? (car text))\
    \ (remove_vowels-iter (cdr text) result))\n          (else (remove_vowels-iter\
    \ (cdr text) (string-append result (list (car text)))))))\n  (remove_vowels-iter\
    \ text \"\"))\n", "  (if (string=? text \"\")\n      \"\"\n      (if (string-contains\
    \ \"aeiouAEIOU\" (string-ref text 0))\n          (remove_vowels (substring text\
    \ 1))\n          (string-append (string-ref text 0) (remove_vowels (substring\
    \ text 1))))))\n", "  (regexp-replace* #rx\"[aeiou]\" text \"\"))\n", "  (cond\n\
    \    [(empty? text) empty]\n    [(member (first text) '(\"a\" \"e\" \"i\" \"o\"\
    \ \"u\")) (remove_vowels (rest text))]\n    [else (cons (first text) (remove_vowels\
    \ (rest text)))]))\n", "  (regexp-replace* #rx\"[aeiou]\" text \"\"))\n", "  (cond\n\
    \    [(empty? text) empty]\n    [(member (first text) '(#\\a #\\e #\\i #\\o #\\\
    u)) (remove_vowels (rest text))]\n    [else (cons (first text) (remove_vowels\
    \ (rest text)))]))\n", "  (define (is_vowel? c)\n    (or (char=? c #\\a)\n   \
    \     (char=? c #\\e)\n        (char=? c #\\i)\n        (char=? c #\\o)\n    \
    \    (char=? c #\\u)))\n  (define (remove_vowels_iter text result)\n    (cond\
    \ ((string=? text \"\") result)\n          ((is_vowel? (string-ref text 0))\n\
    \           (remove_vowels_iter (substring text 1) result))\n          (else (remove_vowels_iter\
    \ (substring text 1)\n                                    (string-append result\
    \ (string (string-ref text 0)))))))\n  (remove_vowels_iter text \"\"))\n", " \
    \ (cond\n    [(empty? text) empty]\n    [(vowel? (first text)) (remove_vowels\
    \ (rest text))]\n    [else (cons (first text) (remove_vowels (rest text)))]))\n",
  "  (cond\n    [(empty? text) empty]\n    [(member (first text) '(#\\a #\\e #\\i\
    \ #\\o #\\u)) (remove_vowels (rest text))]\n    [else (cons (first text) (remove_vowels\
    \ (rest text)))]))\n", "  (cond\n    [(empty? text) empty]\n    [(vowel? (first\
    \ text)) (remove_vowels (rest text))]\n    [else (cons (first text) (remove_vowels\
    \ (rest text)))]))\n", "  (cond\n    [(empty? text) empty]\n    [(member (first\
    \ text) '(\"a\" \"e\" \"i\" \"o\" \"u\")) (remove_vowels (rest text))]\n    [else\
    \ (cons (first text) (remove_vowels (rest text)))]))\n", "  (regexp-replace* #rx\"\
    [aeiouAEIOU]\" text \"\"))\n", "  (cond\n    [(empty? text) empty]\n    [(vowel?\
    \ (first text)) (remove_vowels (rest text))]\n    [else (cons (first text) (remove_vowels\
    \ (rest text)))]))\n", "  (cond\n    [(empty? text) empty]\n    [(member (first\
    \ text) '(#\\a #\\e #\\i #\\o #\\u)) (remove_vowels (rest text))]\n    [else (cons\
    \ (first text) (remove_vowels (rest text)))]))\n", "  (regexp-replace* #rx\"[aeiou]\"\
    \ text \"\"))\n", "  (cond\n    [(empty? text) empty]\n    [(member (first text)\
    \ '(\"a\" \"e\" \"i\" \"o\" \"u\")) (remove_vowels (rest text))]\n    [else (cons\
    \ (first text) (remove_vowels (rest text)))]))\n", "  (define (is_vowel? c)\n\
    \    (or (char=? c #\\a)\n        (char=? c #\\e)\n        (char=? c #\\i)\n \
    \       (char=? c #\\o)\n        (char=? c #\\u)))\n  (define (remove_vowels_iter\
    \ text result)\n    (if (string-empty? text)\n        result\n        (if (is_vowel?\
    \ (string-ref text 0))\n            (remove_vowels_iter (substring text 1) result)\n\
    \            (remove_vowels_iter (substring text 1) (string-append result (string\
    \ (string-ref text 0)))))))\n  (remove_vowels_iter text \"\"))\n", "  (define\
    \ (is_vowel? char)\n    (or (char=? char #\\a)\n        (char=? char #\\e)\n \
    \       (char=? char #\\i)\n        (char=? char #\\o)\n        (char=? char #\\\
    u)))\n  (define (remove_vowels_iter text result)\n    (cond ((null? text) result)\n\
    \          ((is_vowel? (car text)) (remove_vowels_iter (cdr text) result))\n \
    \         (else (remove_vowels_iter (cdr text) (string-append result (string (car\
    \ text)))))))\n  (remove_vowels_iter text \"\"))\n", "  (cond\n    [(empty? text)\
    \ empty]\n    [(vowel? (first text)) (remove_vowels (rest text))]\n    [else (cons\
    \ (first text) (remove_vowels (rest text)))]))\n", "  (cond\n    [(empty? text)\
    \ empty]\n    [(member (first text) '(#\\a #\\e #\\i #\\o #\\u)) (remove_vowels\
    \ (rest text))]\n    [else (cons (first text) (remove_vowels (rest text)))]))\n",
  "  (regexp-replace* #rx\"[aeiou]\" text \"\"))\n", "  (define (is_vowel? c)\n  \
    \  (member c '(#\\a #\\e #\\i #\\o #\\u)))\n  (define (remove_vowels-iter text\
    \ result)\n    (cond\n      [(empty? text) result]\n      [(is_vowel? (first text))\
    \ (remove_vowels-iter (rest text) result)]\n      [else (remove_vowels-iter (rest\
    \ text) (append result (list (first text))))]))\n  (remove_vowels-iter text '()))\n",
  "  (cond\n    [(empty? text) empty]\n    [(member (first text) '(\"a\" \"e\" \"\
    i\" \"o\" \"u\")) (remove_vowels (rest text))]\n    [else (cons (first text) (remove_vowels\
    \ (rest text)))]))\n", "  (regexp-replace* #rx\"[aeiouAEIOU]\" text \"\"))\n",
  "  (regexp-replace* #rx\"[aeiou]\" text \"\"))\n", "  (regexp-replace* #rx\"[aeiouAEIOU]\"\
    \ text \"\"))\n", "  (cond\n    [(empty? text) empty]\n    [(member (first text)\
    \ '(a e i o u A E I O U)) (remove_vowels (rest text))]\n    [else (cons (first\
    \ text) (remove_vowels (rest text)))]))\n", "  (regexp-replace* #rx\"[aeiouAEIOU]\"\
    \ text \"\"))\n", "  (cond [(empty? text) \"\"]\n        [(member (first text)\
    \ '(\"a\" \"e\" \"i\" \"o\" \"u\" \"A\" \"E\" \"I\" \"O\" \"U\"))\n         (remove_vowels\
    \ (rest text))]\n        [else (string-append (first text) (remove_vowels (rest\
    \ text)))]))\n", "  (regexp-replace* #rx\"[aeiouAEIOU]\" text \"\"))\n", "  (regexp-replace*\
    \ #rx\"[aeiouAEIOU]\" text \"\"))\n", "  (cond\n    [(empty? text) empty]\n  \
    \  [(member (first text) '(\"a\" \"e\" \"i\" \"o\" \"u\")) (remove_vowels (rest\
    \ text))]\n    [else (cons (first text) (remove_vowels (rest text)))]))\n", " \
    \ (define (is_vowel? c)\n    (or (char=? c #\\a)\n        (char=? c #\\e)\n  \
    \      (char=? c #\\i)\n        (char=? c #\\o)\n        (char=? c #\\u)))\n \
    \ (define (remove_vowels-iter text result)\n    (cond\n      [(empty? text) (reverse\
    \ result)]\n      [(is_vowel? (first text)) (remove_vowels-iter (rest text) result)]\n\
    \      [else (remove_vowels-iter (rest text) (cons (first text) result))]))\n\
    \  (remove_vowels-iter text '()))\n", "  (regexp-replace* #rx\"[aeiou]\" text\
    \ \"\"))\n", "  (cond\n    [(empty? text) empty]\n    [(member (first text) '(\"\
    a\" \"e\" \"i\" \"o\" \"u\")) (remove_vowels (rest text))]\n    [else (cons (first\
    \ text) (remove_vowels (rest text)))]))\n", "  (regexp-replace* #rx\"[aeiou]\"\
    \ text \"\"))\n", "  (cond\n    [(empty? text) empty]\n    [(member (first text)\
    \ '(\"a\" \"e\" \"i\" \"o\" \"u\")) (remove_vowels (rest text))]\n    [else (cons\
    \ (first text) (remove_vowels (rest text)))]))\n", "  (cond\n    [(empty? text)\
    \ empty]\n    [(member (first text) '(\"a\" \"e\" \"i\" \"o\" \"u\")) (remove_vowels\
    \ (rest text))]\n    [else (cons (first text) (remove_vowels (rest text)))]))\n",
  "  (regexp-replace* #rx\"[aeiou]\" text \"\"))\n", "  (cond\n    [(empty? text)\
    \ empty]\n    [(vowel? (first text)) (remove_vowels (rest text))]\n    [else (cons\
    \ (first text) (remove_vowels (rest text)))]))\n", "  (define (is_vowel? c)\n\
    \    (or (equal? c #\\a)\n        (equal? c #\\e)\n        (equal? c #\\i)\n \
    \       (equal? c #\\o)\n        (equal? c #\\u)))\n  (define (remove_vowels_iter\
    \ text result)\n    (cond\n      [(empty? text) result]\n      [(is_vowel? (first\
    \ text)) (remove_vowels_iter (rest text) result)]\n      [else (remove_vowels_iter\
    \ (rest text) (string-append result (string (first text))))]))\n  (remove_vowels_iter\
    \ text \"\"))\n", "  (define (is_vowel? c)\n    (or (char=? c #\\a)\n        (char=?\
    \ c #\\e)\n        (char=? c #\\i)\n        (char=? c #\\o)\n        (char=? c\
    \ #\\u)))\n  (define (remove_vowels-iter text result)\n    (cond ((null? text)\
    \ result)\n          ((is_vowel? (car text)) (remove_vowels-iter (cdr text) result))\n\
    \          (else (remove_vowels-iter (cdr text) (string-append result (string\
    \ (car text)))))))\n  (remove_vowels-iter text \"\"))\n", "  (regexp-replace*\
    \ #rx\"[aeiou]\" text \"\"))\n", "  (regexp-replace* #rx\"[aeiou]\" text \"\"\
    ))\n", "  (regexp-replace* #rx\"[aeiou]\" text \"\"))\n", "  (regexp-replace*\
    \ #rx\"[aeiou]\" text \"\"))\n", "  (cond\n    [(empty? text) empty]\n    [(vowel?\
    \ (first text)) (remove_vowels (rest text))]\n    [else (cons (first text) (remove_vowels\
    \ (rest text)))]))\n", "  (regexp-replace* #rx\"[aeiouAEIOU]\" text \"\"))\n",
  "  (regexp-replace* #rx\"[aeiouAEIOU]\" text \"\"))\n", "  (cond\n    [(empty? text)\
    \ empty]\n    [(member (first text) '(\"a\" \"e\" \"i\" \"o\" \"u\")) (remove_vowels\
    \ (rest text))]\n    [else (cons (first text) (remove_vowels (rest text)))]))\n",
  "  (cond\n    [(empty? text) empty]\n    [(member (first text) '(\"a\" \"e\" \"\
    i\" \"o\" \"u\")) (remove_vowels (rest text))]\n    [else (cons (first text) (remove_vowels\
    \ (rest text)))]))\n", "  (cond\n    [(empty? text) empty]\n    [(member (first\
    \ text) '(\"a\" \"e\" \"i\" \"o\" \"u\")) (remove_vowels (rest text))]\n    [else\
    \ (cons (first text) (remove_vowels (rest text)))]))\n", "  (cond\n    [(empty?\
    \ text) empty]\n    [(member (first text) '(a e i o u A E I O U)) (remove_vowels\
    \ (rest text))]\n    [else (cons (first text) (remove_vowels (rest text)))]))\n",
  "  (regexp-replace* #rx\"[aeiou]\" text \"\"))\n", "  (regexp-replace* #rx\"[aeiou]\"\
    \ text \"\"))\n", "  (regexp-replace* #rx\"[aeiouAEIOU]\" text \"\"))\n", "  (string-join\
    \ (filter (lambda (x) (not (member x '(\"a\" \"e\" \"i\" \"o\" \"u\")))) (string->list\
    \ text))))\n", "  (regexp-replace* #rx\"[aeiou]\" text \"\"))\n", "  (cond\n \
    \   [(empty? text) empty]\n    [(member (first text) '(#\\a #\\e #\\i #\\o #\\\
    u)) (remove_vowels (rest text))]\n    [else (cons (first text) (remove_vowels\
    \ (rest text)))]))\n", "  (cond\n    [(empty? text) empty]\n    [(vowel? (first\
    \ text)) (remove_vowels (rest text))]\n    [else (cons (first text) (remove_vowels\
    \ (rest text)))]))\n", "  (regexp-replace* #rx\"[aeiouAEIOU]\" text \"\"))\n",
  "  (cond\n    [(empty? text) empty]\n    [(member (first text) '(\"a\" \"e\" \"\
    i\" \"o\" \"u\")) (remove_vowels (rest text))]\n    [else (cons (first text) (remove_vowels\
    \ (rest text)))]))\n", "  (cond\n    [(empty? text) empty]\n    [(member (first\
    \ text) '(\"a\" \"e\" \"i\" \"o\" \"u\")) (remove_vowels (rest text))]\n    [else\
    \ (cons (first text) (remove_vowels (rest text)))]))\n", "  (regexp-replace* #rx\"\
    [aeiou]\" text \"\"))\n", "  (string-join (remove (lambda (x) (member x '(#\\\
    a #\\e #\\i #\\o #\\u))) (string->list text)) \"\"))\n", "  (define (is_vowel?\
    \ char)\n    (or (equal? char #\\a)\n        (equal? char #\\e)\n        (equal?\
    \ char #\\i)\n        (equal? char #\\o)\n        (equal? char #\\u)))\n  (define\
    \ (remove_vowels_iter text result)\n    (cond\n      [(empty? text) result]\n\
    \      [(is_vowel? (first text)) (remove_vowels_iter (rest text) result)]\n  \
    \    [else (remove_vowels_iter (rest text) (string-append result (string (first\
    \ text))))]))\n  (remove_vowels_iter text \"\"))\n", "  (define (is_vowel? ch)\n\
    \    (member ch '(#\\a #\\e #\\i #\\o #\\u #\\A #\\E #\\I #\\O #\\U)))\n  (define\
    \ (remove_vowels-iter text result)\n    (cond\n      [(empty? text) (reverse result)]\n\
    \      [(is_vowel? (first text)) (remove_vowels-iter (rest text) result)]\n  \
    \    [else (remove_vowels-iter (rest text) (cons (first text) result))]))\n  (remove_vowels-iter\
    \ text '()))\n", "  (regexp-replace* #rx\"[aeiou]\" text \"\"))\n", "  (regexp-replace*\
    \ #rx\"[aeiou]\" text \"\"))\n", "  (cond\n    [(empty? text) empty]\n    [(member\
    \ (first text) '(a e i o u A E I O U)) (remove_vowels (rest text))]\n    [else\
    \ (cons (first text) (remove_vowels (rest text)))]))\n", "  (regexp-replace* #rx\"\
    [aeiouAEIOU]\" text \"\"))\n", "  (cond\n    [(empty? text) empty]\n    [(vowel?\
    \ (first text)) (remove_vowels (rest text))]\n    [else (cons (first text) (remove_vowels\
    \ (rest text)))]))\n", "  (cond\n    [(empty? text) empty]\n    [(member (first\
    \ text) '(\"a\" \"e\" \"i\" \"o\" \"u\")) (remove_vowels (rest text))]\n    [else\
    \ (cons (first text) (remove_vowels (rest text)))]))\n", "  (cond\n    [(empty?\
    \ text) empty]\n    [(member (first text) '(\"a\" \"e\" \"i\" \"o\" \"u\")) (remove_vowels\
    \ (rest text))]\n    [else (cons (first text) (remove_vowels (rest text)))]))\n",
  "  (regexp-replace* #rx\"[aeiouAEIOU]\" text \"\"))\n", "  (cond\n    [(empty? text)\
    \ empty]\n    [(vowel? (first text)) (remove_vowels (rest text))]\n    [else (cons\
    \ (first text) (remove_vowels (rest text)))]))\n", "  (regexp-replace* #rx\"[aeiou]\"\
    \ text \"\"))\n", "  (cond\n    [(empty? text) empty]\n    [(member (first text)\
    \ '(\"a\" \"e\" \"i\" \"o\" \"u\")) (remove_vowels (rest text))]\n    [else (cons\
    \ (first text) (remove_vowels (rest text)))]))\n", "  (regexp-replace* #rx\"[aeiouAEIOU]\"\
    \ text \"\"))\n", "  (cond\n    [(empty? text) empty]\n    [(member (first text)\
    \ '(\"a\" \"e\" \"i\" \"o\" \"u\")) (remove_vowels (rest text))]\n    [else (cons\
    \ (first text) (remove_vowels (rest text)))]))\n", "  (cond\n    [(empty? text)\
    \ \"\"]\n    [(member (first text) '(\"a\" \"e\" \"i\" \"o\" \"u\" \"A\" \"E\"\
    \ \"I\" \"O\" \"U\")) (remove_vowels (rest text))]\n    [else (string-append (first\
    \ text) (remove_vowels (rest text)))]))\n", "  (regexp-replace* #rx\"[aeiouAEIOU]\"\
    \ text \"\"))\n", "  (cond\n    [(empty? text) empty]\n    [(vowel? (first text))\
    \ (remove_vowels (rest text))]\n    [else (cons (first text) (remove_vowels (rest\
    \ text)))]))\n", "  (define (is_vowel? c)\n    (or (char=? c #\\a)\n        (char=?\
    \ c #\\e)\n        (char=? c #\\i)\n        (char=? c #\\o)\n        (char=? c\
    \ #\\u)))\n  (define (remove_vowels-iter text result)\n    (cond ((string=? text\
    \ \"\") result)\n          ((is_vowel? (string-ref text 0))\n           (remove_vowels-iter\
    \ (substring text 1) result))\n          (else (remove_vowels-iter (substring\
    \ text 1)\n                                    (string-append result (string (string-ref\
    \ text 0)))))))\n  (remove_vowels-iter text \"\"))\n", "  (cond\n    [(empty?\
    \ text) empty]\n    [(member (first text) '(\"a\" \"e\" \"i\" \"o\" \"u\")) (remove_vowels\
    \ (rest text))]\n    [else (cons (first text) (remove_vowels (rest text)))]))\n",
  "  (define (is_vowel? c)\n    (or (char=? c #\\a)\n        (char=? c #\\e)\n   \
    \     (char=? c #\\i)\n        (char=? c #\\o)\n        (char=? c #\\u)))\n  (define\
    \ (remove_vowels-iter text result)\n    (cond\n      [(empty? text) (reverse result)]\n\
    \      [(is_vowel? (first text)) (remove_vowels-iter (rest text) result)]\n  \
    \    [else (remove_vowels-iter (rest text) (cons (first text) result))]))\n  (remove_vowels-iter\
    \ text '()))\n", "  (regexp-replace* #rx\"[aeiou]\" text \"\"))\n", "  (regexp-replace*\
    \ #rx\"[aeiouAEIOU]\" text \"\"))\n", "  (regexp-replace* #rx\"[aeiouAEIOU]\"\
    \ text \"\"))\n", "  (regexp-replace* #rx\"[aeiou]\" text \"\"))\n", "  (cond\n\
    \    [(empty? text) text]\n    [(member (first text) '(#\\a #\\e #\\i #\\o #\\\
    u)) (remove_vowels (rest text))]\n    [else (string-append (first text) (remove_vowels\
    \ (rest text)))]))\n", "  (cond\n    [(empty? text) empty]\n    [(member (first\
    \ text) '(\"a\" \"e\" \"i\" \"o\" \"u\")) (remove_vowels (rest text))]\n    [else\
    \ (cons (first text) (remove_vowels (rest text)))]))\n", "  (cond\n    [(empty?\
    \ text) empty]\n    [(member (first text) '(a e i o u A E I O U)) (remove_vowels\
    \ (rest text))]\n    [else (cons (first text) (remove_vowels (rest text)))]))\n",
  "  (define (is_vowel? c)\n    (or (char=? c #\\a)\n        (char=? c #\\e)\n   \
    \     (char=? c #\\i)\n        (char=? c #\\o)\n        (char=? c #\\u)))\n  (define\
    \ (remove_vowels_iter text result)\n    (cond\n      [(empty? text) result]\n\
    \      [(is_vowel? (first text)) (remove_vowels_iter (rest text) result)]\n  \
    \    [else (remove_vowels_iter (rest text) (append result (list (first text))))]))\n\
    \  (remove_vowels_iter text '()))\n", "  (cond\n    [(empty? text) empty]\n  \
    \  [(member (first text) '(\"a\" \"e\" \"i\" \"o\" \"u\")) (remove_vowels (rest\
    \ text))]\n    [else (cons (first text) (remove_vowels (rest text)))]))\n", " \
    \ (regexp-replace* #rx\"[aeiouAEIOU]\" text \"\"))\n", "  (cond\n    [(empty?\
    \ text) empty]\n    [(vowel? (first text)) (remove_vowels (rest text))]\n    [else\
    \ (cons (first text) (remove_vowels (rest text)))]))\n", "  (cond\n    [(string=?\
    \ text \"\") \"\"]\n    [(string-contains \"aeiouAEIOU\" (string-ref text 0))\
    \ (remove_vowels (substring text 1))]\n    [else (string-append (string-ref text\
    \ 0) (remove_vowels (substring text 1)))]))\n", "  (cond\n    [(empty? text) empty]\n\
    \    [(vowel? (first text)) (remove_vowels (rest text))]\n    [else (cons (first\
    \ text) (remove_vowels (rest text)))]))\n", "  (regexp-replace* #rx\"[aeiou]\"\
    \ text \"\"))\n", "  (cond\n    [(empty? text) empty]\n    [(vowel? (first text))\
    \ (remove_vowels (rest text))]\n    [else (cons (first text) (remove_vowels (rest\
    \ text)))]))\n", "  (cond\n    [(empty? text) empty]\n    [(vowel? (first text))\
    \ (remove_vowels (rest text))]\n    [else (cons (first text) (remove_vowels (rest\
    \ text)))]))\n", "  (cond\n    [(empty? text) empty]\n    [(member (first text)\
    \ '(\"a\" \"e\" \"i\" \"o\" \"u\")) (remove_vowels (rest text))]\n    [else (cons\
    \ (first text) (remove_vowels (rest text)))]))\n", "  (define (is_vowel? ch)\n\
    \    (or (char=? ch #\\a)\n        (char=? ch #\\e)\n        (char=? ch #\\i)\n\
    \        (char=? ch #\\o)\n        (char=? ch #\\u)))\n  (define (remove_vowels-iter\
    \ text)\n    (if (empty? text)\n        empty\n        (if (is_vowel? (first text))\n\
    \            (remove_vowels-iter (rest text))\n            (cons (first text)\
    \ (remove_vowels-iter (rest text))))))\n  (remove_vowels-iter text))\n", "  (cond\n\
    \    [(empty? text) empty]\n    [(member (first text) '(\"a\" \"e\" \"i\" \"o\"\
    \ \"u\")) (remove_vowels (rest text))]\n    [else (cons (first text) (remove_vowels\
    \ (rest text)))]))\n", "  (cond\n    [(empty? text) empty]\n    [(member (first\
    \ text) '(\"a\" \"e\" \"i\" \"o\" \"u\")) (remove_vowels (rest text))]\n    [else\
    \ (cons (first text) (remove_vowels (rest text)))]))\n", "  (string-join (filter\
    \ (lambda (c) (not (member c '(\"a\" \"e\" \"i\" \"o\" \"u\")))) (string->list\
    \ text)) \"\"))\n", "  (cond\n    [(empty? text) empty]\n    [(vowel? (first text))\
    \ (remove_vowels (rest text))]\n    [else (cons (first text) (remove_vowels (rest\
    \ text)))]))\n", "  (regexp-replace* #rx\"[aeiou]\" text \"\"))\n", "  (define\
    \ (is_vowel? c)\n    (member c '(#\\a #\\e #\\i #\\o #\\u #\\A #\\E #\\I #\\O\
    \ #\\U)))\n  (define (remove_vowels-iter text result)\n    (cond\n      [(empty?\
    \ text) result]\n      [(is_vowel? (first text)) (remove_vowels-iter (rest text)\
    \ result)]\n      [else (remove_vowels-iter (rest text) (string-append result\
    \ (string (first text))))]))\n  (remove_vowels-iter text \"\"))\n", "  (cond\n\
    \    [(empty? text) empty]\n    [(member (first text) '(#\\a #\\e #\\i #\\o #\\\
    u)) (remove_vowels (rest text))]\n    [else (cons (first text) (remove_vowels\
    \ (rest text)))]))\n", "  (cond\n    [(empty? text) empty]\n    [(member (first\
    \ text) '(#\\a #\\e #\\i #\\o #\\u)) (remove_vowels (rest text))]\n    [else (cons\
    \ (first text) (remove_vowels (rest text)))]))\n", "  (cond\n    [(empty? text)\
    \ empty]\n    [(vowel? (first text)) (remove_vowels (rest text))]\n    [else (cons\
    \ (first text) (remove_vowels (rest text)))]))\n", "  (string-join (remove (lambda\
    \ (x) (member x '(\"a\" \"e\" \"i\" \"o\" \"u\" \"A\" \"E\" \"I\" \"O\" \"U\"\
    ))) (string-split text \"\")) \"\"))\n", "  (cond\n    [(empty? text) text]\n\
    \    [(member (first text) '(#\\a #\\e #\\i #\\o #\\u)) (remove_vowels (rest text))]\n\
    \    [else (cons (first text) (remove_vowels (rest text)))]))\n", "  (cond\n \
    \   [(empty? text) empty]\n    [(member (first text) '(#\\a #\\e #\\i #\\o #\\\
    u)) (remove_vowels (rest text))]\n    [else (cons (first text) (remove_vowels\
    \ (rest text)))]))\n", "  (define (is_vowel? c)\n    (member c '(#\\a #\\e #\\\
    i #\\o #\\u)))\n  (define (remove_vowels-iter text acc)\n    (cond ((null? text)\
    \ (reverse acc))\n          ((is_vowel? (car text)) (remove_vowels-iter (cdr text)\
    \ acc))\n          (else (remove_vowels-iter (cdr text) (cons (car text) acc)))))\n\
    \  (remove_vowels-iter text '()))\n", "  (cond\n    [(empty? text) empty]\n  \
    \  [(member (first text) '(\"a\" \"e\" \"i\" \"o\" \"u\")) (remove_vowels (rest\
    \ text))]\n    [else (cons (first text) (remove_vowels (rest text)))]))\n", " \
    \ (regexp-replace* #rx\"[aeiouAEIOU]\" text \"\"))\n", "  (cond\n    [(empty?\
    \ text) empty]\n    [(member (first text) '(#\\a #\\e #\\i #\\o #\\u)) (remove_vowels\
    \ (rest text))]\n    [else (cons (first text) (remove_vowels (rest text)))]))\n",
  "  (regexp-replace* #rx\"[aeiouAEIOU]\" text \"\"))\n", "  (regexp-replace* #rx\"\
    [aeiou]\" text \"\"))\n", "  (cond\n    [(empty? text) empty]\n    [(member (first\
    \ text) '(a e i o u A E I O U)) (remove_vowels (rest text))]\n    [else (cons\
    \ (first text) (remove_vowels (rest text)))]))\n", "  (cond [(empty? text) text]\n\
    \        [(member (first text) '(\"a\" \"e\" \"i\" \"o\" \"u\" \"A\" \"E\" \"\
    I\" \"O\" \"U\"))\n         (remove_vowels (rest text))]\n        [else (string-append\
    \ (first text) (remove_vowels (rest text)))]))\n", "  (regexp-replace* #rx\"[aeiou]\"\
    \ text \"\"))\n", "  (cond\n    [(empty? text) empty]\n    [(vowel? (first text))\
    \ (remove_vowels (rest text))]\n    [else (cons (first text) (remove_vowels (rest\
    \ text)))]))\n", "  (regexp-replace* #rx\"[aeiou]\" text \"\"))\n", "  (regexp-replace*\
    \ #rx\"[aeiou]\" text \"\"))\n", "  (regexp-replace* #rx\"[aeiou]\" text \"\"\
    ))\n", "  (regexp-replace* #rx\"[aeiou]\" text \"\"))\n", "  (define (is_vowel?\
    \ c)\n    (member c '(#\\a #\\e #\\i #\\o #\\u #\\A #\\E #\\I #\\O #\\U)))\n \
    \ (define (remove_vowels-iter text result)\n    (cond ((null? text) result)\n\
    \          ((is_vowel? (car text)) (remove_vowels-iter (cdr text) result))\n \
    \         (else (remove_vowels-iter (cdr text) (string-append result (list (car\
    \ text)))))))\n  (remove_vowels-iter text \"\"))\n", "  (cond\n    [(empty? text)\
    \ empty]\n    [(vowel? (first text)) (remove_vowels (rest text))]\n    [else (cons\
    \ (first text) (remove_vowels (rest text)))]))\n", "  (regexp-replace* #rx\"[aeiou]\"\
    \ text \"\"))\n", "  (cond\n    [(empty? text) empty]\n    [(member (first text)\
    \ '(#\\a #\\e #\\i #\\o #\\u)) (remove_vowels (rest text))]\n    [else (cons (first\
    \ text) (remove_vowels (rest text)))]))\n", "  (cond\n    [(empty? text) empty]\n\
    \    [(vowel? (first text)) (remove_vowels (rest text))]\n    [else (cons (first\
    \ text) (remove_vowels (rest text)))]))\n", "  (regexp-replace* #rx\"[aeiouAEIOU]\"\
    \ text \"\"))\n", "  (cond\n    [(empty? text) empty]\n    [(member (first text)\
    \ '(\"a\" \"e\" \"i\" \"o\" \"u\")) (remove_vowels (rest text))]\n    [else (cons\
    \ (first text) (remove_vowels (rest text)))]))\n```\n\n```racket\n#lang racket\n",
  "  (define (remove_vowels_iter text result)\n    (cond\n      [(empty? text) result]\n\
    \      [(member (first text) '(\"a\" \"e\" \"i\" \"o\" \"u\" \"A\" \"E\" \"I\"\
    \ \"O\" \"U\"))\n       (remove_vowels_iter (rest text) result)]\n      [else\
    \ (remove_vowels_iter (rest text) (string-append result (string (first text))))]))\n\
    \  (remove_vowels_iter text \"\"))\n", "  (define (is_vowel? c)\n    (member c\
    \ '(#\\a #\\e #\\i #\\o #\\u)))\n  (define (remove_vowels-iter text result)\n\
    \    (cond\n      [(empty? text) result]\n      [(is_vowel? (first text)) (remove_vowels-iter\
    \ (rest text) result)]\n      [else (remove_vowels-iter (rest text) (append result\
    \ (list (first text))))]))\n  (remove_vowels-iter text '()))\n", "  (regexp-replace*\
    \ #rx\"[aeiou]\" text \"\"))\n", "  (string-join (remove (lambda (x) (member x\
    \ '(#\\a #\\e #\\i #\\o #\\u))) (string->list text)) \"\"))\n", "  (cond\n   \
    \ [(empty? text) empty]\n    [(member (first text) '(\"a\" \"e\" \"i\" \"o\" \"\
    u\")) (remove_vowels (rest text))]\n    [else (cons (first text) (remove_vowels\
    \ (rest text)))]))\n", "  (regexp-replace* #rx\"[aeiou]\" text \"\"))\n", "  (cond\n\
    \    [(empty? text) empty]\n    [(member (first text) '(#\\a #\\e #\\i #\\o #\\\
    u)) (remove_vowels (rest text))]\n    [else (cons (first text) (remove_vowels\
    \ (rest text)))]))\n", "  (cond\n    [(empty? text) empty]\n    [(member (first\
    \ text) '(a e i o u A E I O U)) (remove_vowels (rest text))]\n    [else (cons\
    \ (first text) (remove_vowels (rest text)))]))\n", "  (regexp-replace* #rx\"[aeiouAEIOU]\"\
    \ text \"\"))\n", "  (regexp-replace* #rx\"[aeiou]\" text \"\"))\n", "  (cond\n\
    \    [(empty? text) empty]\n    [(member (first text) '(\"a\" \"e\" \"i\" \"o\"\
    \ \"u\")) (remove_vowels (rest text))]\n    [else (cons (first text) (remove_vowels\
    \ (rest text)))]))\n", "  (define (is_vowel? c)\n    (or (char=? c #\\a)\n   \
    \     (char=? c #\\e)\n        (char=? c #\\i)\n        (char=? c #\\o)\n    \
    \    (char=? c #\\u)))\n  (define (remove_vowels_iter text result)\n    (if (empty?\
    \ text)\n        result\n        (if (is_vowel? (first text))\n            (remove_vowels_iter\
    \ (rest text) result)\n            (remove_vowels_iter (rest text) (string-append\
    \ result (string (first text)))))))\n  (remove_vowels_iter text \"\"))\n", " \
    \ (regexp-replace* #rx\"[aeiou]\" text \"\"))\n", "  (regexp-replace* #rx\"[aeiouAEIOU]\"\
    \ text \"\"))\n", "  (regexp-replace* #rx\"[aeiou]\" text \"\"))\n", "  (regexp-replace*\
    \ #rx\"[aeiou]\" text \"\"))\n", "  (regexp-replace* #rx\"[aeiouAEIOU]\" text\
    \ \"\"))\n", "  (regexp-replace* #rx\"[aeiou]\" text \"\"))\n", "  (regexp-replace*\
    \ #rx\"[aeiou]\" text \"\"))\n", "  (string-join (filter (lambda (c) (not (vowel?\
    \ c))) (string->list text))))\n", "  (define (is_vowel? c)\n    (member c '(#\\\
    a #\\e #\\i #\\o #\\u #\\A #\\E #\\I #\\O #\\U)))\n  (define (remove_vowels-iter\
    \ text result)\n    (cond\n      [(empty? text) result]\n      [(is_vowel? (first\
    \ text)) (remove_vowels-iter (rest text) result)]\n      [else (remove_vowels-iter\
    \ (rest text) (string-append result (string (first text))))]))\n  (remove_vowels-iter\
    \ text \"\"))\n", "  (cond\n    [(empty? text) empty]\n    [(member (first text)\
    \ '(\"a\" \"e\" \"i\" \"o\" \"u\")) (remove_vowels (rest text))]\n    [else (cons\
    \ (first text) (remove_vowels (rest text)))]))\n", "  (define (remove_vowels_iter\
    \ text result)\n    (cond ((empty? text) result)\n          ((char-vowel? (first\
    \ text)) (remove_vowels_iter (rest text) result))\n          (else (remove_vowels_iter\
    \ (rest text) (string-append result (string (first text)))))))\n  (remove_vowels_iter\
    \ text \"\"))\n", "  (regexp-replace* #rx\"[aeiouAEIOU]\" text \"\"))\n", "  (cond\n\
    \    [(empty? text) empty]\n    [(member (first text) '(#\\a #\\e #\\i #\\o #\\\
    u)) (remove_vowels (rest text))]\n    [else (cons (first text) (remove_vowels\
    \ (rest text)))]))\n", "  (regexp-replace* #rx\"[aeiou]\" text \"\"))\n", "  (cond\n\
    \    [(empty? text) empty]\n    [(vowel? (first text)) (remove_vowels (rest text))]\n\
    \    [else (cons (first text) (remove_vowels (rest text)))]))\n", "  (cond\n \
    \   [(empty? text) empty]\n    [(member (first text) '(\"a\" \"e\" \"i\" \"o\"\
    \ \"u\")) (remove_vowels (rest text))]\n    [else (cons (first text) (remove_vowels\
    \ (rest text)))]))\n", "  (cond\n    [(empty? text) empty]\n    [(member (first\
    \ text) '(#\\a #\\e #\\i #\\o #\\u)) (remove_vowels (rest text))]\n    [else (cons\
    \ (first text) (remove_vowels (rest text)))]))\n", "  (regexp-replace* #rx\"[aeiou]\"\
    \ text \"\"))\n", "  (define (is_vowel? c)\n    (or (char=? c #\\a)\n        (char=?\
    \ c #\\e)\n        (char=? c #\\i)\n        (char=? c #\\o)\n        (char=? c\
    \ #\\u)))\n  (define (remove_vowels-iter text result)\n    (cond ((string=? text\
    \ \"\") result)\n          ((is_vowel? (string-ref text 0))\n           (remove_vowels-iter\
    \ (substring text 1) result))\n          (else (remove_vowels-iter (substring\
    \ text 1)\n                                    (string-append result (string (string-ref\
    \ text 0)))))))\n  (remove_vowels-iter text \"\"))\n", "  (if (string=? text \"\
    \")\n      \"\"\n      (if (string-contains \"aeiouAEIOU\" (string-ref text 0))\n\
    \          (remove_vowels (substring text 1))\n          (string-append (string-ref\
    \ text 0) (remove_vowels (substring text 1))))))\n", "  (cond\n    [(empty? text)\
    \ empty]\n    [(vowel? (first text)) (remove_vowels (rest text))]\n    [else (cons\
    \ (first text) (remove_vowels (rest text)))]))\n", "  (regexp-replace* #rx\"[aeiouAEIOU]\"\
    \ text \"\"))\n", "  (cond\n    [(empty? text) empty]\n    [(member (first text)\
    \ '(\"a\" \"e\" \"i\" \"o\" \"u\")) (remove_vowels (rest text))]\n    [else (cons\
    \ (first text) (remove_vowels (rest text)))]))\n"]
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
