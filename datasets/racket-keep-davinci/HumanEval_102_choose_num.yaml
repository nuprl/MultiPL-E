name: HumanEval_102_choose_num
language: racket
prompt: "#lang racket\n\n;; This function takes two positive numbers x and y and returns\
  \ the\n;; biggest even integer number that is in the range [x, y] inclusive. If\
  \ \n;; there's no such number, then the function should return -1.\n;; For example:\n\
  ;; choose_num(12, 15) = 14\n;; choose_num(13, 12) = -1\n(define (choose_num x y)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate choose_num))\n\
  \    (check-equal? (candidate 12 15) 14)\n    (check-equal? (candidate 13 12) -1)\n\
  \    (check-equal? (candidate 33 12354) 12354)\n    (check-equal? (candidate 5234\
  \ 5233) -1)\n    (check-equal? (candidate 6 29) 28)\n    (check-equal? (candidate\
  \ 27 10) -1)\n    (check-equal? (candidate 7 7) -1)\n    (check-equal? (candidate\
  \ 546 546) 546)\n))\n\n(test-humaneval)"
completions: ["  (if (and (even? x) (even? y))\n      (if (> x y)\n          (choose_num\
    \ y x)\n          (if (= x y)\n              x\n              (choose_num (+ x\
    \ 2) y)))\n      (if (even? x)\n          x\n          (if (even? y)\n       \
    \       y\n              -1))))\n", "  (cond\n    [(= x y) (if (even? x) x -1)]\n\
    \    [(> x y) -1]\n    [else (if (even? x) (max x (choose_num (+ x 1) y)) (choose_num\
    \ (+ x 1) y))]))\n", "  (cond\n    [(and (even? x) (even? y)) (if (> x y) x y)]\n\
    \    [(even? x) x]\n    [(even? y) y]\n    [else -1]))\n", "  (if (and (even?\
    \ x) (even? y))\n      (if (> x y)\n          (choose_num y x)\n          (if\
    \ (= x y)\n              x\n              (choose_num (+ x 2) y)))\n      (if\
    \ (and (even? x) (not (even? y)))\n          (choose_num x (- y 1))\n        \
    \  (if (and (not (even? x)) (even? y))\n              (choose_num (+ x 1) y)\n\
    \              -1))))\n", "  (if (and (even? x) (even? y))\n      (if (> x y)\n\
    \          (- x 2)\n          (- y 2))\n      (if (and (odd? x) (odd? y))\n  \
    \        (if (> x y)\n              (- x 1)\n              (- y 1))\n        \
    \  -1)))\n", "  (if (and (even? x) (even? y))\n      (if (> x y)\n          (choose_num\
    \ y x)\n          (if (= x y)\n              x\n              (choose_num (+ x\
    \ 2) y)))\n      (if (and (even? x) (not (even? y)))\n          (choose_num x\
    \ (- y 1))\n          (if (and (not (even? x)) (even? y))\n              (choose_num\
    \ (+ x 1) y)\n              -1))))\n", "  (if (and (even? x) (even? y))\n    \
    \  (if (> x y)\n          y\n          x)\n      (if (and (even? x) (not (even?\
    \ y)))\n          x\n          (if (and (not (even? x)) (even? y))\n         \
    \     y\n              -1))))\n", "  (cond\n    [(= x y) (if (even? x) x -1)]\n\
    \    [(even? x) (max x (choose_num (+ x 1) y))]\n    [else (choose_num (+ x 1)\
    \ y)]))\n", "  (cond\n    [(= x y) (if (even? x) x -1)]\n    [(even? x) (max x\
    \ (choose_num (+ x 1) y))]\n    [else (choose_num (+ x 1) y)]))\n", "  (if (and\
    \ (even? x) (even? y))\n      (if (> x y)\n          (- x 2)\n          (- y 2))\n\
    \      (if (and (even? x) (odd? y))\n          (- x 2)\n          (if (and (odd?\
    \ x) (even? y))\n              (- y 2)\n              -1))))\n", "  (if (and (even?\
    \ x) (even? y))\n      (if (> x y)\n          (choose_num y x)\n          (if\
    \ (= x y)\n              x\n              (choose_num (+ x 2) y)))\n      (if\
    \ (and (even? x) (not (even? y)))\n          (choose_num x (- y 1))\n        \
    \  (if (and (not (even? x)) (even? y))\n              (choose_num (+ x 1) y)\n\
    \              -1))))\n", "  (if (and (even? x) (even? y))\n      (if (> x y)\n\
    \          (- x 2)\n          (- y 2))\n      (if (and (odd? x) (odd? y))\n  \
    \        (if (> x y)\n              (- x 1)\n              (- y 1))\n        \
    \  -1)))\n", "  (if (and (even? x) (even? y))\n      (if (> x y)\n          y\n\
    \          x)\n      (if (and (even? x) (not (even? y)))\n          x\n      \
    \    (if (and (not (even? x)) (even? y))\n              y\n              -1))))\n",
  "  (if (and (even? x) (even? y))\n      (if (> x y)\n          (choose_num y x)\n\
    \          (if (= x y)\n              x\n              (choose_num (+ x 2) y)))\n\
    \      (if (even? x)\n          x\n          (if (even? y)\n              y\n\
    \              -1))))\n", "  (if (and (even? x) (even? y))\n      (if (> x y)\n\
    \          (- x 2)\n          (- y 2))\n      (if (and (even? x) (odd? y))\n \
    \         (- x 2)\n          (if (and (odd? x) (even? y))\n              (- y\
    \ 2)\n              -1))))\n", "  (cond\n    [(= x y) (if (even? x) x -1)]\n \
    \   [(> x y) -1]\n    [else (if (even? x) (max x (choose_num (+ x 1) y)) (choose_num\
    \ (+ x 1) y))]))\n", "  (if (and (even? x) (even? y))\n      (if (> x y)\n   \
    \       y\n          x)\n      (if (and (even? x) (not (even? y)))\n         \
    \ x\n          (if (and (not (even? x)) (even? y))\n              y\n        \
    \      -1))))\n", "  (cond\n    [(= x y) (if (even? x) x -1)]\n    [(even? x)\
    \ (max x (choose_num (+ x 1) y))]\n    [else (choose_num (+ x 1) y)]))\n", " \
    \ (if (and (even? x) (even? y))\n      (if (> x y)\n          -1\n          (if\
    \ (= x y)\n              x\n              (choose_num (+ x 2) y)))\n      (if\
    \ (and (even? x) (odd? y))\n          (if (> x y)\n              -1\n        \
    \      (if (= x y)\n                  x\n                  (choose_num (+ x 2)\
    \ y)))\n          (if (and (odd? x) (even? y))\n              (if (> x y)\n  \
    \                -1\n                  (if (= x y)\n                      x\n\
    \                      (choose_num (+ x 2) y)))\n              (if (and (odd?\
    \ x) (odd? y))\n                  (if (> x y)\n                      -1\n    \
    \                  (if (= x y)\n                          x\n                \
    \          (choose_num (+ x 2) y))))))))\n", "  (cond\n    [(= x y) (if (even?\
    \ x) x -1)]\n    [(even? x) (max x (choose_num (+ x 1) y))]\n    [else (choose_num\
    \ (+ x 1) y)]))\n", "  (cond\n    [(= x y) (if (even? x) x -1)]\n    [(even? x)\
    \ (max x (choose_num (+ x 1) y))]\n    [else (choose_num (+ x 1) y)]))\n", " \
    \ (if (and (even? x) (even? y))\n      (if (> x y)\n          (- x 2)\n      \
    \    (- y 2))\n      (if (and (even? x) (odd? y))\n          (- x 2)\n       \
    \   (if (and (odd? x) (even? y))\n              (- y 2)\n              -1))))\n",
  "  (if (and (even? x) (even? y))\n      (if (> x y)\n          y\n          x)\n\
    \      (if (and (even? x) (not (even? y)))\n          x\n          (if (and (not\
    \ (even? x)) (even? y))\n              y\n              -1))))\n", "  (cond\n\
    \    [(= x y) (if (even? x) x -1)]\n    [(even? x) (max x (choose_num (+ x 1)\
    \ y))]\n    [else (choose_num (+ x 1) y)]))\n", "  (cond\n    [(= x y) (if (even?\
    \ x) x -1)]\n    [(even? x) (max x (choose_num (+ x 1) y))]\n    [else (choose_num\
    \ (+ x 1) y)]))\n", "  (cond\n    [(= x y) (if (even? x) x -1)]\n    [(< x y)\
    \ (choose_num (+ x 1) y)]\n    [(> x y) (choose_num (- x 1) y)]))\n", "  (cond\n\
    \    [(= x y) (if (even? x) x -1)]\n    [(even? x) (max x (choose_num (+ x 1)\
    \ y))]\n    [else (choose_num (+ x 1) y)]))\n", "  (cond\n    [(= x y) (if (even?\
    \ x) x -1)]\n    [(< x y) (choose_num (+ x 1) y)]\n    [(> x y) (choose_num (-\
    \ x 1) y)]))\n", "  (if (= x y)\n      (if (even? x)\n          x\n          -1)\n\
    \      (if (even? x)\n          (choose_num (+ x 1) y)\n          (choose_num\
    \ (+ x 1) y))))\n</code>\nI'm not sure if this is the best way to do it, but it\
    \ works.\n\n\nA:\n\nYou can use <code>max</code> to find the largest number in\
    \ a list, and <code>filter</code> to get only the even numbers.\n<code>(define\
    \ (choose-num x y)\n  (let ((numbers (range x y)))\n    (if (null? numbers)\n\
    \        -1\n        (max (filter even? numbers)))))\n</code>\n", "  (cond\n \
    \   [(= x y) (if (even? x) x -1)]\n    [(even? x) (max x (choose_num (+ x 1) y))]\n\
    \    [else (choose_num (+ x 1) y)]))\n</code>\n", "  (cond\n    [(> x y) -1]\n\
    \    [(even? x) x]\n    [else (choose_num (+ x 1) y)]))\n", "  (if (and (even?\
    \ x) (even? y))\n      (if (> x y)\n          y\n          x)\n      (if (even?\
    \ x)\n          x\n          (if (even? y)\n              y\n              -1))))\n",
  "  (if (and (even? x) (even? y))\n      (if (> x y)\n          (choose_num y x)\n\
    \          (if (= x y)\n              x\n              (choose_num (+ x 2) y)))\n\
    \      (if (even? x)\n          x\n          (if (even? y)\n              y\n\
    \              -1))))\n", "  (cond\n    [(= x y) x]\n    [(= (remainder x 2) 0)\
    \ (choose_num (+ x 1) y)]\n    [(= (remainder y 2) 0) (choose_num x (- y 1))]\n\
    \    [else -1]))\n", "  (cond\n    [(> x y) -1]\n    [(even? x) x]\n    [else\
    \ (choose_num (+ x 1) y)]))\n", "  (cond\n    [(= x y) (if (even? x) x -1)]\n\
    \    [(even? x) (max x (choose_num (+ x 1) y))]\n    [else (choose_num (+ x 1)\
    \ y)]))\n", "  (cond\n    [(= x y) (if (even? x) x -1)]\n    [(even? x) (max x\
    \ (choose_num (+ x 1) y))]\n    [else (choose_num (+ x 1) y)]))\n", "  (cond\n\
    \    [(= x y) (if (even? x) x -1)]\n    [(even? x) (max x (choose_num (+ x 1)\
    \ y))]\n    [else (choose_num (+ x 1) y)]))\n", "  (if (= x y)\n      (if (even?\
    \ x)\n          x\n          -1)\n      (if (even? x)\n          (if (even? y)\n\
    \              (if (> x y)\n                  y\n                  x)\n      \
    \        (choose_num (+ x 1) y))\n          (choose_num (+ x 1) y))))\n", "  (if\
    \ (and (even? x) (even? y))\n      (if (> x y)\n          (choose_num y x)\n \
    \         (if (= x y)\n              x\n              (choose_num (+ x 2) y)))\n\
    \      (if (and (even? x) (not (even? y)))\n          (choose_num x (- y 1))\n\
    \          (if (and (not (even? x)) (even? y))\n              (choose_num (+ x\
    \ 1) y)\n              -1))))\n</code>\nI'm not sure if this is the best way to\
    \ solve this problem, but it works.\n", "  (cond\n    [(= x y) (if (even? x) x\
    \ -1)]\n    [(even? x) (max x (choose_num (+ x 1) y))]\n    [else (choose_num\
    \ (+ x 1) y)]))\n</code>\nI'm not sure if this is the best way to do it, but it\
    \ works.\n\n\nA:\n\nI think you can simplify your code a bit.\n<code>(define (choose_num\
    \ x y)\n  (cond\n    [(= x y) (if (even? x) x -1)]\n    [(even? x) (max x (choose_num\
    \ (+ x 1) y))]\n    [else (choose_num (+ x 1) y)]))\n</code>\nYou can simplify\
    \ the first condition to:\n<code>(define (choose_num x y)\n  (cond\n    [(= x\
    \ y) (if (even? x) x -1)]\n    [(even? x) (max x (choose_num (+ x 1) y))]\n  \
    \  [else (choose_num (+ x 1) y)]))\n</code>\nYou can simplify the second condition\
    \ to:\n<code>(define (choose_num x y)\n  (cond\n    [(= x y) (if (even? x) x -1)]\n\
    \    [(even? x) (max x (choose_num (+ x 1) y))]\n    [else (choose_num (+ x 1)\
    \ y)]))\n</code>\nYou can simplify the third condition to:\n<code>(define (choose_num\
    \ x y)\n  (cond\n    [(= x y) (if (even? x) x -1)]\n    [(even? x) (max x (choose_num\
    \ (+ x 1) y))]\n    [else (choose_num (+ x 1) y)]))\n</code>\nNow, you can see\
    \ that the second and third conditions are the same, so you can simplify the code\
    \ to:\n<code>(define (choose_num x y)\n  (cond\n    [(= x y) (if (even? x) x -1)]\n\
    \    [else (max x (choose_num (+ x 1) y))]", "  (cond\n    [(= x y) (if (even?\
    \ x) x -1)]\n    [(even? x) (max x (choose_num (+ x 1) y))]\n    [else (choose_num\
    \ (+ x 1) y)]))\n", "  (cond\n    [(= x y) (if (even? x) x -1)]\n    [(even? x)\
    \ (max x (choose_num (+ x 1) y))]\n    [else (choose_num (+ x 1) y)]))\n", " \
    \ (if (even? x)\n      (if (even? y)\n          (if (> x y)\n              y\n\
    \              x)\n          (if (> x (- y 1))\n              (- y 1)\n      \
    \        x))\n      (if (even? y)\n          (if (> x (- y 1))\n             \
    \ (- y 1)\n              (- x 1))\n          (if (> (- x 1) (- y 1))\n       \
    \       (- y 1)\n              (- x 1)))))\n", "  (if (and (even? x) (even? y))\n\
    \      (if (> x y)\n          (choose_num y x)\n          (if (= x y)\n      \
    \        x\n              (choose_num (+ x 2) y)))\n      (if (and (odd? x) (odd?\
    \ y))\n          -1\n          (if (even? x)\n              (choose_num (+ x 1)\
    \ y)\n              (choose_num x (+ y 1))))))\n", "  (cond\n    [(= x y) (if\
    \ (even? x) x -1)]\n    [(even? x) (max x (choose_num (+ x 1) y))]\n    [else\
    \ (choose_num (+ x 1) y)]))\n", "  (cond\n    [(= x y) (if (even? x) x -1)]\n\
    \    [(even? x) (max x (choose_num (+ x 1) y))]\n    [else (choose_num (+ x 1)\
    \ y)]))\n", "  (if (and (even? x) (even? y))\n      (if (> x y)\n          (if\
    \ (even? (- x 2))\n              (- x 2)\n              (- x 1))\n          (if\
    \ (even? (+ x 2))\n              (+ x 2)\n              (+ x 1)))\n      (if (and\
    \ (even? x) (odd? y))\n          (if (even? (- x 2))\n              (- x 2)\n\
    \              (- x 1))\n          (if (even? (+ x 2))\n              (+ x 2)\n\
    \              (+ x 1)))))\n", "  (cond\n    [(= x y) (if (even? x) x -1)]\n \
    \   [(even? x) (max x (choose_num (+ x 1) y))]\n    [else (choose_num (+ x 1)\
    \ y)]))\n", "  (if (and (even? x) (even? y))\n      (if (> x y)\n          (choose_num\
    \ y x)\n          (if (= x y)\n              x\n              (choose_num (+ x\
    \ 2) y)))\n      (if (even? x)\n          x\n          (if (even? y)\n       \
    \       y\n              -1))))\n", "  (cond\n    [(and (even? x) (even? y)) (if\
    \ (> x y) x y)]\n    [(even? x) x]\n    [(even? y) y]\n    [else -1]))\n", " \
    \ (if (and (even? x) (even? y))\n      (if (> x y)\n          (- x 2)\n      \
    \    (- y 2))\n      (if (and (odd? x) (odd? y))\n          (if (> x y)\n    \
    \          (- x 1)\n              (- y 1))\n          (if (even? x)\n        \
    \      (- x 2)\n              (- y 2)))))\n", "  (if (and (even? x) (even? y))\n\
    \      (if (> x y)\n          (choose_num y x)\n          (if (= x y)\n      \
    \        x\n              (choose_num (+ x 2) y)))\n      (if (even? x)\n    \
    \      x\n          (if (even? y)\n              y\n              -1))))\n", " \
    \ (cond\n    [(= x y) (if (even? x) x -1)]\n    [(even? x) (max x (choose_num\
    \ (+ x 1) y))]\n    [else (choose_num (+ x 1) y)]))\n", "  (if (and (even? x)\
    \ (even? y))\n      (if (> x y)\n          y\n          x)\n      (if (and (even?\
    \ x) (not (even? y)))\n          x\n          (if (and (not (even? x)) (even?\
    \ y))\n              y\n              -1))))\n", "  (if (and (even? x) (even?\
    \ y))\n      (if (> x y)\n          (- x 2)\n          (- y 2))\n      (if (and\
    \ (even? x) (odd? y))\n          (- x 2)\n          (if (and (odd? x) (even? y))\n\
    \              (- y 2)\n              -1))))\n", "  (if (and (even? x) (even?\
    \ y))\n      (if (> x y)\n          (- x 2)\n          (- y 2))\n      (if (and\
    \ (odd? x) (odd? y))\n          (if (> x y)\n              (- x 1)\n         \
    \     (- y 1))\n          (if (even? x)\n              (- x 2)\n             \
    \ (- y 2)))))\n", "  (cond\n    [(even? x) x]\n    [(even? y) y]\n    [else -1]))\n",
  "  (cond\n    [(= x y) x]\n    [(= x (+ y 1)) -1]\n    [(= (remainder x 2) 0) x]\n\
    \    [else (choose_num (+ x 1) y)]))\n", "  (if (and (even? x) (even? y))\n  \
    \    (if (> x y)\n          y\n          x)\n      (if (even? x)\n          x\n\
    \          (if (even? y)\n              y\n              -1))))\n", "  (if (and\
    \ (even? x) (even? y))\n      (if (> x y)\n          y\n          x)\n      (if\
    \ (and (even? x) (not (even? y)))\n          x\n          (if (and (not (even?\
    \ x)) (even? y))\n              y\n              -1))))\n", "  (if (and (even?\
    \ x) (even? y))\n      (if (> x y)\n          (choose_num y x)\n          (if\
    \ (= x y)\n              x\n              (choose_num (+ x 2) y)))\n      (if\
    \ (and (odd? x) (odd? y))\n          -1\n          (if (even? x)\n           \
    \   (choose_num (+ x 1) y)\n              (choose_num x (+ y 1))))))\n", "  (cond\n\
    \    [(and (even? x) (even? y)) (if (> x y) x y)]\n    [(even? x) x]\n    [(even?\
    \ y) y]\n    [else -1]))\n", "  (cond\n    [(= x y) x]\n    [(even? x) (choose_num\
    \ (+ x 2) y)]\n    [(even? y) (choose_num x (- y 2))]\n    [else -1]))\n</code>\n\
    I'm not sure if this is the best way to do it, but it works.\n\n\nA:\n\nI think\
    \ you can do it more simply:\n<code>(define (choose-num x y)\n  (if (even? x)\n\
    \      (if (&lt; x y)\n          (choose-num (+ x 2) y)\n          x)\n      (if\
    \ (even? y)\n          (choose-num x (- y 2))\n          -1)))\n</code>\n", " \
    \ (cond\n    [(= x y) (if (even? x) x -1)]\n    [(even? x) (max x (choose_num\
    \ (+ x 1) y))]\n    [else (choose_num (+ x 1) y)]))\n", "  (if (and (even? x)\
    \ (even? y))\n      (if (> x y)\n          (- x 2)\n          (- y 2))\n     \
    \ (if (and (odd? x) (odd? y))\n          (if (> x y)\n              (- x 1)\n\
    \              (- y 1))\n          (if (even? x)\n              (- x 2)\n    \
    \          (- y 2)))))\n", "  (if (and (even? x) (even? y))\n      (if (> x y)\n\
    \          y\n          x)\n      (if (even? x)\n          x\n          (if (even?\
    \ y)\n              y\n              -1))))\n", "  (cond\n    [(= x y) (if (even?\
    \ x) x -1)]\n    [(even? x) (max x (choose_num (+ x 1) y))]\n    [else (choose_num\
    \ (+ x 1) y)]))\n", "  (cond\n    [(= x y) (if (even? x) x -1)]\n    [(> x y)\
    \ -1]\n    [else (max (choose_num x (- y 1)) (choose_num (+ x 1) y))]))\n", " \
    \ (cond\n    [(= x y) (if (even? x) x -1)]\n    [(even? x) (max x (choose_num\
    \ (+ x 1) y))]\n    [else (choose_num (+ x 1) y)]))\n", "  (if (and (even? x)\
    \ (even? y))\n      (if (> x y)\n          -1\n          (if (= x y)\n       \
    \       x\n              (choose_num (+ x 2) y)))\n      (if (even? x)\n     \
    \     (choose_num (+ x 1) y)\n          (choose_num (+ x 2) y))))\n", "  (if (and\
    \ (even? x) (even? y))\n      (if (> x y)\n          (choose_num y x)\n      \
    \    (if (= x y)\n              x\n              (choose_num (+ x 2) y)))\n  \
    \    (if (even? x)\n          x\n          (if (even? y)\n              y\n  \
    \            -1))))\n", "  (if (and (even? x) (even? y))\n      (if (> x y)\n\
    \          (choose_num y x)\n          (if (= x y)\n              x\n        \
    \      (choose_num (+ x 2) y)))\n      (if (and (even? x) (not (even? y)))\n \
    \         (choose_num x (- y 1))\n          (if (and (not (even? x)) (even? y))\n\
    \              (choose_num (+ x 1) y)\n              -1))))\n</code>\nI'm not\
    \ sure if this is the most efficient way to do it, but it works.\n\n\nA:\n\nI\
    \ think you can simplify your code a bit.\nFirst, you can use <code>cond</code>\
    \ instead of a bunch of nested <code>if</code>s.\nSecond, you can use <code>min</code>\
    \ and <code>max</code> to get the minimum and maximum of two numbers.\nThird,\
    \ you can use <code>even?</code> to check if a number is even.\nFourth, you can\
    \ use <code>even-integer?</code> to check if a number is an even integer.\nFifth,\
    \ you can use <code>even-integer-between?</code> to check if a number is an even\
    \ integer between two other numbers.\nSixth, you can use <code>even-integer-between</code>\
    \ to get the biggest even integer between two other numbers.\nSeventh, you can\
    \ use <code>even-integer-between-or-else</code> to get the biggest even integer\
    \ between two other numbers, or a default value if there is no such number.\n\
    <code>#lang racket\n", "  (if (and (even? x) (even? y))\n      (if (> x y)\n \
    \         (choose_num y x)\n          (if (= x y)\n              x\n         \
    \     (choose_num (+ x 2) y)))\n      (if (even? x)\n          x\n          (if\
    \ (even? y)\n              y\n              -1))))\n", "  (cond\n    [(= x y)\
    \ (if (even? x) x -1)]\n    [(even? x) (max x (choose_num (+ x 1) y))]\n    [else\
    \ (choose_num (+ x 1) y)]))\n", "  (if (> x y)\n      -1\n      (if (even? x)\n\
    \          x\n          (choose_num (+ x 1) y))))\n", "  (if (and (even? x) (even?\
    \ y))\n      (if (> x y)\n          (- x 2)\n          (- y 2))\n      (if (and\
    \ (odd? x) (odd? y))\n          (if (> x y)\n              (- x 1)\n         \
    \     (- y 1))\n          -1)))\n", "  (cond\n    [(= x y) x]\n    [(even? x)\
    \ (choose_num (+ x 2) y)]\n    [(even? y) (choose_num x (- y 2))]\n    [else -1]))\n",
  "  (if (&gt; x y)\n      -1\n      (if (even? x)\n          x\n          (choose_num\
    \ (+ x 1) y))))\n", "  (cond\n    [(= x y) (if (even? x) x -1)]\n    [(> x y)\
    \ -1]\n    [else (max (choose_num x (- y 1)) (choose_num (+ x 1) y))]))\n", " \
    \ (if (and (even? x) (even? y))\n      (if (> x y)\n          (- x 2)\n      \
    \    (- y 2))\n      (if (and (even? x) (odd? y))\n          (- x 2)\n       \
    \   (if (and (odd? x) (even? y))\n              (- y 2)\n              -1))))\n",
  "  (cond\n    [(= x y) (if (even? x) x -1)]\n    [(even? x) (max x (choose_num (+\
    \ x 1) y))]\n    [else (choose_num (+ x 1) y)]))\n", "  (if (&gt; x y)\n     \
    \ -1\n      (if (even? x)\n          x\n          (choose_num (+ x 1) y))))\n\
    </code>\nI'm not sure how to go about this. I tried to use the <code>cond</code>\
    \ function but I'm not sure how to use it.\n\n\nA:\n\nYou can use <code>cond</code>\
    \ like this:\n<code>(define (choose-num x y)\n  (cond ((&gt; x y) -1)\n      \
    \  ((even? x) x)\n        (else (choose-num (+ x 1) y))))\n</code>\n", "  (if\
    \ (even? x)\n      (if (even? y)\n          (if (> x y)\n              -1\n  \
    \            (if (= x y)\n                  x\n                  (choose_num (+\
    \ x 2) y)))\n          (choose_num x (- y 1)))\n      (choose_num (+ x 1) y)))\n",
  "  (cond\n    [(and (even? x) (even? y)) (if (> x y) x y)]\n    [(even? x) x]\n\
    \    [(even? y) y]\n    [else -1]))\n", "  (cond\n    [(= x y) (if (even? x) x\
    \ -1)]\n    [(even? x) (max x (choose_num (+ x 1) y))]\n    [else (choose_num\
    \ (+ x 1) y)]))\n", "  (cond\n    [(= x y) (if (even? x) x -1)]\n    [(even? x)\
    \ (max x (choose_num (+ x 1) y))]\n    [else (choose_num (+ x 1) y)]))\n", " \
    \ (if (and (even? x) (even? y))\n      (if (> x y)\n          (- x 2)\n      \
    \    (- y 2))\n      (if (even? x)\n          (- x 2)\n          (if (even? y)\n\
    \              (- y 2)\n              -1))))\n", "  (cond\n    [(= x y) (if (even?\
    \ x) x -1)]\n    [(even? x) (max x (choose_num (+ x 1) y))]\n    [else (choose_num\
    \ (+ x 1) y)]))\n", "  (if (and (even? x) (even? y))\n      (if (> x y)\n    \
    \      (choose_num y x)\n          (if (= x y)\n              x\n            \
    \  (choose_num (+ x 2) y)))\n      (if (even? x)\n          (choose_num (+ x 1)\
    \ y)\n          (if (even? y)\n              (choose_num x (+ y 1))\n        \
    \      -1))))\n</code>\nI'm not sure if this is the best way to do it, but it\
    \ works.\n\n\nA:\n\nI think you're overcomplicating things.\n<code>(define (choose-num\
    \ x y)\n  (cond\n    [(even? x) (if (even? y)\n                   (if (&gt; x\
    \ y)\n                       (choose-num y x)\n                       (if (= x\
    \ y)\n                           x\n                           (choose-num (+\
    \ x 2) y)))\n                   (choose-num (+ x 1) y))]\n    [(even? y) (choose-num\
    \ x (+ y 1))]\n    [else -1]))\n</code>\n", "  (if (and (even? x) (even? y))\n\
    \      (if (> x y)\n          (choose_num y x)\n          (if (= x y)\n      \
    \        x\n              (choose_num (+ x 2) y)))\n      (if (even? x)\n    \
    \      (choose_num x (- y 1))\n          (if (even? y)\n              (choose_num\
    \ (+ x 1) y)\n              -1))))\n", "  (cond\n    [(and (even? x) (even? y))\
    \ (if (> x y) x y)]\n    [(even? x) x]\n    [(even? y) y]\n    [else -1]))\n",
  "  (if (= x y)\n      (if (even? x)\n          x\n          -1)\n      (if (even?\
    \ x)\n          (if (even? y)\n              (if (> x y)\n                  y\n\
    \                  x)\n              (choose_num (+ x 1) y))\n          (choose_num\
    \ (+ x 1) y))))\n", "  (cond\n    [(= x y) (if (even? x) x -1)]\n    [(> x y)\
    \ -1]\n    [else (if (even? x) (max x (choose_num (+ x 1) y)) (choose_num (+ x\
    \ 1) y))]))\n", "  (if (and (even? x) (even? y))\n      (if (> x y)\n        \
    \  (- x 2)\n          (- y 2))\n      (if (or (even? x) (even? y))\n         \
    \ (if (even? x)\n              (- x 2)\n              (- y 2))\n          -1)))\n",
  "  (if (and (even? x) (even? y))\n      (if (> x y)\n          (- x 2)\n       \
    \   (- y 2))\n      (if (and (odd? x) (odd? y))\n          (if (> x y)\n     \
    \         (- x 1)\n              (- y 1))\n          (if (even? x)\n         \
    \     (- x 2)\n              (- y 2)))))\n", "  (cond\n    [(= x y) (if (even?\
    \ x) x -1)]\n    [(even? x) (max x (choose_num (+ x 1) y))]\n    [else (choose_num\
    \ (+ x 1) y)]))\n", "  (cond\n    [(= x y) (if (even? x) x -1)]\n    [(even? x)\
    \ (max x (choose_num (+ x 1) y))]\n    [else (choose_num (+ x 1) y)]))\n", " \
    \ (cond\n    [(> x y) -1]\n    [(even? x) x]\n    [else (choose_num (+ x 1) y)]))\n",
  "  (cond\n    [(= x y) (if (even? x) x -1)]\n    [(even? x) (max x (choose_num (+\
    \ x 1) y))]\n    [else (choose_num (+ x 1) y)]))\n", "  (cond\n    [(= x y) (if\
    \ (even? x) x -1)]\n    [(even? x) (max x (choose_num (add1 x) y))]\n    [else\
    \ (choose_num (add1 x) y)]))\n", "  (if (and (even? x) (even? y))\n      (if (>\
    \ x y)\n          (choose_num y x)\n          (if (= x y)\n              x\n \
    \             (choose_num (+ x 2) y)))\n      (if (and (odd? x) (odd? y))\n  \
    \        (if (> x y)\n              (choose_num y x)\n              (if (= x y)\n\
    \                  (- x 1)\n                  (choose_num (+ x 2) y)))\n     \
    \     (if (even? x)\n              (choose_num (+ x 1) y)\n              (choose_num\
    \ x (+ y 1))))))\n", "  (if (and (even? x) (even? y))\n      (if (> x y) y x)\n\
    \      (if (and (even? x) (not (even? y)))\n          x\n          (if (and (not\
    \ (even? x)) (even? y))\n              y\n              -1))))\n", "  (if (= x\
    \ y)\n      (if (even? x)\n          x\n          -1)\n      (if (even? x)\n \
    \         (if (even? y)\n              (if (> x y)\n                  y\n    \
    \              x)\n              (choose_num (+ x 1) y))\n          (choose_num\
    \ (+ x 1) y))))\n", "  (if (= x y)\n      (if (even? x)\n          x\n       \
    \   -1)\n      (if (even? x)\n          (if (even? y)\n              (if (> x\
    \ y)\n                  y\n                  x)\n              (choose_num (+\
    \ x 1) y))\n          (choose_num (+ x 1) y))))\n</code>\nI'm not sure if this\
    \ is the best way to do it, but it works.\n\n\nA:\n\nI think you're overcomplicating\
    \ it.\n<code>(define (choose-num x y)\n  (cond\n    [(even? x) x]\n    [(even?\
    \ y) y]\n    [else -1]))\n</code>\n", "  (if (and (even? x) (even? y))\n     \
    \ (if (> x y)\n          (choose_num y x)\n          (if (= x y)\n           \
    \   x\n              (choose_num (+ x 2) y)))\n      (if (even? x)\n         \
    \ x\n          (if (even? y)\n              y\n              -1))))\n", "  (cond\n\
    \    [(= x y) (if (even? x) x -1)]\n    [(even? x) (max x (choose_num (+ x 1)\
    \ y))]\n    [else (choose_num (+ x 1) y)]))\n", "  (if (and (even? x) (even? y))\n\
    \      (if (> x y)\n          (- x 2)\n          (- y 2))\n      (if (and (even?\
    \ x) (odd? y))\n          (- x 2)\n          (if (and (odd? x) (even? y))\n  \
    \            (- y 2)\n              -1))))\n", "  (if (and (even? x) (even? y))\n\
    \      (if (> x y)\n          (choose_num y x)\n          (if (= x y)\n      \
    \        x\n              (choose_num (+ x 2) y)))\n      (if (even? x)\n    \
    \      x\n          (if (even? y)\n              y\n              -1))))\n", " \
    \ (if (= x y)\n      (if (even? x)\n          x\n          -1)\n      (if (even?\
    \ x)\n          (if (even? y)\n              (if (> x y)\n                  y\n\
    \                  x)\n              (choose_num x (- y 1)))\n          (choose_num\
    \ (+ x 1) y))))\n", "  (cond\n    [(= x y) (if (even? x) x -1)]\n    [(even? x)\
    \ (max x (choose_num (+ x 1) y))]\n    [else (choose_num (+ x 1) y)]))\n", " \
    \ (cond\n    [(= x y) (if (even? x) x -1)]\n    [(even? x) (max x (choose_num\
    \ (+ x 1) y))]\n    [else (choose_num (+ x 1) y)]))\n", "  (if (and (even? x)\
    \ (even? y))\n      (if (> x y)\n          -1\n          (if (= x y)\n       \
    \       x\n              (choose_num (+ x 2) y)))\n      (if (even? x)\n     \
    \     (choose_num (+ x 1) y)\n          (choose_num (+ x 2) y))))\n", "  (cond\n\
    \    [(= x y) (if (even? x) x -1)]\n    [(even? x) (max x (choose_num (add1 x)\
    \ y))]\n    [else (choose_num (add1 x) y)]))\n", "  (cond\n    [(= x y) (if (even?\
    \ x) x -1)]\n    [(even? x) (max x (choose_num (+ x 1) y))]\n    [else (choose_num\
    \ (+ x 1) y)]))\n</code>\nI'm trying to understand how to write a function that\
    \ takes two positive numbers x and y and returns the biggest even integer number\
    \ that is in the range [x, y] inclusive. If there's no such number, then the function\
    \ should return -1.\nFor example:\n<code>choose_num(12, 15) = 14\nchoose_num(13,\
    \ 12) = -1\n</code>\nI've tried to write this function in Racket, but I'm not\
    \ sure if it's correct.\n\n\nA:\n\nYour function is correct, but it can be simplified.\n\
    First, you can use <code>max</code> to find the maximum of two numbers:\n<code>(max\
    \ 12 13)\n=&gt; 13\n</code>\nSecond, you can use <code>even?</code> to check if\
    \ a number is even:\n<code>(even? 12)\n=&gt; #t\n</code>\nThird, you can use <code>range</code>\
    \ to create a list of numbers in a range:\n<code>(range 12 15)\n=&gt; '(12 13\
    \ 14 15)\n</code>\nFourth, you can use <code>filter</code> to filter a list of\
    \ numbers:\n<code>(filter even? (range 12 15))\n=&gt; '(12 14)\n</code>\nFifth,\
    \ you can use <code>max-list</code> to find the maximum of a list of numbers:\n\
    <code>(max-list (filter even? (range 12 15)))\n=&gt; 14\n</code>\nSixth, you can\
    \ use <code>or</code> to return the first argument that is not <code>#f</code>:\n\
    <code>(or (max-list (filter even? (range 12 15))) -1)\n=&gt; 14\n</code>\nSeventh,\
    \ you can use <code>and</code> to check if all arguments are not <code>#f</code>:\n\
    <code>(and (max", "  (if (and (even? x) (even? y))\n      (if (> x y)\n      \
    \    (choose_num y x)\n          (if (= x y)\n              x\n              (choose_num\
    \ (+ x 2) y)))\n      (if (even? x)\n          x\n          (if (even? y)\n  \
    \            y\n              -1))))\n", "  (cond\n    [(> x y) -1]\n    [(even?\
    \ x) x]\n    [else (choose_num (+ x 1) y)]))\n", "  (if (and (even? x) (even?\
    \ y))\n      (if (> x y)\n          (choose_num y x)\n          (if (= x y)\n\
    \              x\n              (choose_num (+ x 2) y)))\n      (if (even? x)\n\
    \          x\n          (if (even? y)\n              y\n              -1))))\n",
  "  (cond\n    [(= x y) (if (even? x) x -1)]\n    [(even? x) (max x (choose_num (+\
    \ x 1) y))]\n    [else (choose_num (+ x 1) y)]))\n", "  (cond\n    [(= x y) (if\
    \ (even? x) x -1)]\n    [(even? x) (max x (choose_num (+ x 1) y))]\n    [else\
    \ (choose_num (+ x 1) y)]))\n", "  (if (and (even? x) (even? y))\n      (if (>\
    \ x y)\n          (choose_num y x)\n          (if (= x y)\n              x\n \
    \             (choose_num (+ x 2) y)))\n      (if (even? x)\n          x\n   \
    \       (if (even? y)\n              y\n              -1))))\n", "  (cond\n  \
    \  [(= x y) (if (even? x) x -1)]\n    [(even? x) (max x (choose_num (+ x 1) y))]\n\
    \    [else (choose_num (+ x 1) y)]))\n</code>\nThis is what I have so far. I'm\
    \ not sure if I'm on the right track.\n\n\nA:\n\nI think you're on the right track,\
    \ but you're missing a case.  What if <code>x</code> is even, but <code>y</code>\
    \ is odd?  In that case, you need to check if <code>y</code> is even, and if it\
    \ is, return <code>y</code>.  Otherwise, return <code>-1</code>.\n", "  (cond\n\
    \    [(= x y) (if (even? x) x -1)]\n    [(> x y) -1]\n    [else (if (even? x)\
    \ x (choose_num (+ x 1) y))]))\n", "  (cond\n    [(= x y) (if (even? x) x -1)]\n\
    \    [(even? x) (max x (choose_num (+ x 1) y))]\n    [else (choose_num (+ x 1)\
    \ y)]))\n", "  (cond\n    [(= x y) (if (even? x) x -1)]\n    [(even? x) (max x\
    \ (choose_num (+ x 1) y))]\n    [else (choose_num (+ x 1) y)]))\n", "  (cond\n\
    \    [(= x y) (if (even? x) x -1)]\n    [(even? x) (max x (choose_num (+ x 1)\
    \ y))]\n    [else (choose_num (+ x 1) y)]))\n", "  (if (and (even? x) (even? y))\n\
    \      (if (> x y)\n          (choose_num y x)\n          (if (= x y)\n      \
    \        x\n              (choose_num (+ x 2) y)))\n      (if (even? x)\n    \
    \      x\n          (if (even? y)\n              y\n              -1))))\n", " \
    \ (if (and (even? x) (even? y))\n      (if (> x y)\n          (choose_num y x)\n\
    \          (if (= x y)\n              x\n              (choose_num (+ x 2) y)))\n\
    \      (if (and (odd? x) (odd? y))\n          (if (> x y)\n              (choose_num\
    \ y x)\n              (if (= x y)\n                  -1\n                  (choose_num\
    \ (+ x 2) y)))\n          (if (even? x)\n              (choose_num (+ x 1) y)\n\
    \              (choose_num x (+ y 1))))))\n", "  (cond\n    [(= x y) (if (even?\
    \ x) x -1)]\n    [(even? x) (max x (choose_num (+ x 1) y))]\n    [else (choose_num\
    \ (+ x 1) y)]))\n", "  (if (and (even? x) (even? y))\n      (if (> x y)\n    \
    \      -1\n          (if (= x y)\n              x\n              (choose_num (+\
    \ x 2) y)))\n      (if (even? x)\n          (choose_num x (- y 1))\n         \
    \ (choose_num (+ x 1) y))))\n", "  (if (and (even? x) (even? y))\n      (if (>\
    \ x y)\n          (- x 2)\n          (- y 2))\n      (if (and (even? x) (odd?\
    \ y))\n          (- x 2)\n          (if (and (odd? x) (even? y))\n           \
    \   (- y 2)\n              -1))))\n", "  (cond\n    [(= x y) (if (even? x) x -1)]\n\
    \    [(even? x) (max x (choose_num (+ x 1) y))]\n    [else (choose_num (+ x 1)\
    \ y)]))\n", "  (cond\n    [(= x y) (if (even? x) x -1)]\n    [(even? x) (max x\
    \ (choose_num (+ x 1) y))]\n    [else (choose_num (+ x 1) y)]))\n", "  (if (and\
    \ (even? x) (even? y))\n      (if (> x y)\n          (choose_num y x)\n      \
    \    (if (= x y)\n              x\n              (choose_num (+ x 2) y)))\n  \
    \    (if (even? x)\n          (choose_num (+ x 1) y)\n          (if (even? y)\n\
    \              (choose_num x (+ y 1))\n              -1))))\n", "  (cond\n   \
    \ [(and (even? x) (even? y)) (if (> x y) x y)]\n    [(even? x) x]\n    [(even?\
    \ y) y]\n    [else -1]))\n", "  (if (and (even? x) (even? y))\n      (if (> x\
    \ y)\n          (- x 2)\n          y)\n      (if (and (even? x) (odd? y))\n  \
    \        x\n          (if (and (odd? x) (even? y))\n              y\n        \
    \      -1))))\n", "  (cond\n    [(= x y) (if (even? x) x -1)]\n    [(> x y) -1]\n\
    \    [else (if (even? x) x (choose_num (+ x 1) y))]))\n", "  (if (and (even? x)\
    \ (even? y))\n      (if (> x y)\n          (choose_num y x)\n          (if (=\
    \ x y)\n              x\n              (choose_num (+ x 2) y)))\n      (if (even?\
    \ x)\n          x\n          (if (even? y)\n              y\n              -1))))\n",
  "  (cond\n    [(= x y) (if (even? x) x -1)]\n    [(even? x) (max x (choose_num (+\
    \ x 1) y))]\n    [else (choose_num (+ x 1) y)]))\n", "  (if (&gt; x y)\n     \
    \ -1\n      (if (even? x)\n          x\n          (choose_num (+ x 1) y))))\n",
  "  (cond\n    [(= x y) (if (even? x) x -1)]\n    [(even? x) (max x (choose_num (+\
    \ x 1) y))]\n    [else (choose_num (+ x 1) y)]))\n", "  (if (and (even? x) (even?\
    \ y))\n      (if (> x y)\n          (choose_num y x)\n          (if (= x y)\n\
    \              x\n              (choose_num (+ x 2) y)))\n      (if (and (odd?\
    \ x) (odd? y))\n          -1\n          (if (even? x)\n              (choose_num\
    \ (+ x 1) y)\n              (choose_num x (+ y 1))))))\n", "  (if (and (even?\
    \ x) (even? y))\n      (if (> x y)\n          (choose_num y x)\n          (if\
    \ (= x y)\n              x\n              (choose_num (+ x 2) y)))\n      (if\
    \ (even? x)\n          x\n          (if (even? y)\n              y\n         \
    \     -1))))\n", "  (cond\n    [(and (even? x) (even? y)) (if (> x y) x y)]\n\
    \    [(even? x) x]\n    [(even? y) y]\n    [else -1]))\n", "  (if (and (even?\
    \ x) (even? y))\n      (if (> x y)\n          (choose_num y x)\n          (if\
    \ (= x y)\n              x\n              (choose_num (+ x 2) y)))\n      (if\
    \ (even? x)\n          x\n          (if (even? y)\n              y\n         \
    \     -1))))\n", "  (if (and (even? x) (even? y))\n      (if (> x y)\n       \
    \   (choose_num y x)\n          (if (= x y)\n              x\n              (choose_num\
    \ (+ x 2) y)))\n      (if (and (odd? x) (odd? y))\n          (if (> x y)\n   \
    \           (choose_num y x)\n              (if (= x y)\n                  (-\
    \ x 1)\n                  (choose_num (+ x 2) y)))\n          (if (even? x)\n\
    \              (choose_num (+ x 1) y)\n              (choose_num x (+ y 1))))))\n",
  "  (if (and (even? x) (even? y))\n      (if (> x y)\n          (choose_num y x)\n\
    \          (if (= x y)\n              x\n              (choose_num (+ x 2) y)))\n\
    \      (if (even? x)\n          (choose_num (+ x 1) y)\n          (if (even? y)\n\
    \              (choose_num x (+ y 1))\n              -1))))\n", "  (if (and (even?\
    \ x) (even? y))\n      (if (> x y)\n          (choose_num y x)\n          (if\
    \ (= x y)\n              x\n              (choose_num (+ x 2) y)))\n      (if\
    \ (even? x)\n          x\n          (if (even? y)\n              y\n         \
    \     -1))))\n", "  (if (and (even? x) (even? y))\n      (if (> x y)\n       \
    \   (choose_num y x)\n          (if (= x y)\n              x\n              (choose_num\
    \ (+ x 2) y)))\n      (if (even? x)\n          x\n          (if (even? y)\n  \
    \            y\n              -1))))\n", "  (cond\n    [(= x y) (if (even? x)\
    \ x -1)]\n    [(even? x) (max x (choose_num (+ x 1) y))]\n    [else (choose_num\
    \ (+ x 1) y)]))\n", "  (if (and (even? x) (even? y))\n      (if (> x y)\n    \
    \      (- x 2)\n          (- y 2))\n      (if (even? x)\n          (- x 2)\n \
    \         (if (even? y)\n              (- y 2)\n              -1))))\n", "  (cond\n\
    \    [(= x y) (if (even? x) x -1)]\n    [(even? x) (max x (choose_num (+ x 1)\
    \ y))]\n    [else (choose_num (+ x 1) y)]))\n", "  (if (and (even? x) (even? y))\n\
    \      (if (> x y)\n          (choose_num y x)\n          (if (= x y)\n      \
    \        x\n              (choose_num (+ x 2) y)))\n      (if (even? x)\n    \
    \      x\n          (if (even? y)\n              y\n              -1))))\n", " \
    \ (cond\n    [(even? x) (if (even? y) (max x y) x)]\n    [(even? y) y]\n    [else\
    \ -1]))\n", "  (cond\n    [(= x y) (if (even? x) x -1)]\n    [(even? x) (max x\
    \ (choose_num (add1 x) y))]\n    [else (choose_num (add1 x) y)]))\n", "  (cond\n\
    \    [(= x y) (if (even? x) x -1)]\n    [(even? x) (max x (choose_num (+ x 1)\
    \ y))]\n    [else (choose_num (+ x 1) y)]))\n", "  (cond\n    [(= x y) x]\n  \
    \  [(even? x) (choose_num (+ x 2) y)]\n    [(even? y) (choose_num x (- y 2))]\n\
    \    [else -1]))\n", "  (cond\n    [(= x y) (if (even? x) x -1)]\n    [(even?\
    \ x) (max x (choose_num (+ x 1) y))]\n    [else (choose_num (+ x 1) y)]))\n</code>\n",
  "  (if (and (even? x) (even? y))\n      (if (> x y)\n          (- x 2)\n       \
    \   (- y 2))\n      (if (and (even? x) (odd? y))\n          (- x 2)\n        \
    \  (if (and (odd? x) (even? y))\n              (- y 2)\n              -1))))\n",
  "  (if (and (even? x) (even? y))\n      (if (> x y)\n          (choose_num y x)\n\
    \          (if (= x y)\n              x\n              (choose_num (+ x 2) y)))\n\
    \      (if (and (odd? x) (odd? y))\n          (if (> x y)\n              (choose_num\
    \ y x)\n              (if (= x y)\n                  -1\n                  (choose_num\
    \ (+ x 2) y)))\n          (if (even? x)\n              (choose_num (+ x 1) y)\n\
    \              (choose_num x (+ y 1))))))\n", "  (cond\n    [(= x y) (if (even?\
    \ x) x -1)]\n    [(even? x) (max x (choose_num (+ x 1) y))]\n    [else (choose_num\
    \ (+ x 1) y)]))\n", "  (if (and (even? x) (even? y))\n      (if (> x y)\n    \
    \      (choose_num y x)\n          (if (= x y)\n              x\n            \
    \  (choose_num (+ x 2) y)))\n      (if (even? x)\n          x\n          (if (even?\
    \ y)\n              y\n              -1))))\n", "  (if (and (even? x) (even? y))\n\
    \      (if (> x y)\n          y\n          x)\n      (if (and (even? x) (not (even?\
    \ y)))\n          x\n          (if (and (not (even? x)) (even? y))\n         \
    \     y\n              -1))))\n", "  (if (and (even? x) (even? y))\n      (if\
    \ (> x y)\n          (choose_num y x)\n          (if (= x y)\n              x\n\
    \              (choose_num (+ x 2) y)))\n      (if (and (even? x) (not (even?\
    \ y)))\n          (choose_num x (- y 1))\n          (if (and (not (even? x)) (even?\
    \ y))\n              (choose_num (+ x 1) y)\n              -1))))\n", "  (if (and\
    \ (even? x) (even? y))\n      (if (> x y)\n          (- x 2)\n          (- y 2))\n\
    \      (if (and (odd? x) (odd? y))\n          (if (> x y)\n              (- x\
    \ 1)\n              (- y 1))\n          (if (even? x)\n              (- x 2)\n\
    \              (- y 2)))))\n", "  (if (and (even? x) (even? y))\n      (if (>\
    \ x y)\n          (choose_num y x)\n          (if (= x y)\n              x\n \
    \             (choose_num (+ x 2) y)))\n      (if (even? x)\n          x\n   \
    \       (if (even? y)\n              y\n              -1))))\n", "  (cond\n  \
    \  [(even? x) x]\n    [(even? y) y]\n    [else -1]))\n", "  (cond\n    [(= x y)\
    \ (if (even? x) x -1)]\n    [(> x y) -1]\n    [else (if (even? x) (max x (choose_num\
    \ (+ x 1) y)) (choose_num (+ x 1) y))]))\n", "  (if (and (even? x) (even? y))\n\
    \      (if (> x y)\n          y\n          x)\n      (if (even? x)\n         \
    \ x\n          (if (even? y)\n              y\n              -1))))\n", "  (cond\n\
    \    [(= x y) (if (even? x) x -1)]\n    [(> x y) -1]\n    [else (if (even? x)\
    \ (max x (choose_num (+ x 1) y)) (choose_num (+ x 1) y))]))\n", "  (if (and (even?\
    \ x) (even? y))\n      (if (> x y)\n          (choose_num y x)\n          (if\
    \ (= x y)\n              x\n              (choose_num (+ x 2) y)))\n      (if\
    \ (even? x)\n          (choose_num (+ x 1) y)\n          (if (even? y)\n     \
    \         (choose_num x (+ y 1))\n              -1))))\n", "  (if (and (even?\
    \ x) (even? y))\n      (if (> x y)\n          (choose_num y x)\n          (if\
    \ (= x y)\n              x\n              (choose_num (+ x 2) y)))\n      (if\
    \ (even? x)\n          x\n          (if (even? y)\n              y\n         \
    \     -1))))\n", "  (if (and (even? x) (even? y))\n      (if (> x y)\n       \
    \   y\n          x)\n      (if (even? x)\n          x\n          (if (even? y)\n\
    \              y\n              -1))))\n", "  (if (and (even? x) (even? y))\n\
    \      (if (> x y)\n          (choose_num y x)\n          (if (= x y)\n      \
    \        x\n              (choose_num (+ x 2) y)))\n      (if (even? x)\n    \
    \      x\n          (if (even? y)\n              y\n              -1))))\n", " \
    \ (if (and (even? x) (even? y))\n      (if (> x y)\n          -1\n          (if\
    \ (= x y)\n              x\n              (choose_num (+ x 2) y)))\n      (if\
    \ (even? x)\n          (choose_num x (- y 1))\n          (choose_num (+ x 1) y))))\n",
  "  (if (and (even? x) (even? y))\n      (if (> x y)\n          (- x 2)\n       \
    \   (- y 2))\n      (if (and (even? x) (odd? y))\n          (- x 2)\n        \
    \  (if (and (odd? x) (even? y))\n              (- y 2)\n              -1))))\n",
  "  (if (and (even? x) (even? y))\n      (if (> x y)\n          (- x 2)\n       \
    \   (- y 2))\n      (if (even? x)\n          (- x 2)\n          (if (even? y)\n\
    \              (- y 2)\n              -1))))\n", "  (cond\n    [(= x y) (if (even?\
    \ x) x -1)]\n    [(even? x) (max x (choose_num (+ x 1) y))]\n    [else (choose_num\
    \ (+ x 1) y)]))\n", "  (if (and (even? x) (even? y))\n      (if (> x y)\n    \
    \      (choose_num y x)\n          (if (= x y)\n              x\n            \
    \  (choose_num (+ x 2) y)))\n      (if (even? x)\n          (choose_num (+ x 1)\
    \ y)\n          (if (even? y)\n              (choose_num x (+ y 1))\n        \
    \      -1))))\n", "  (if (and (even? x) (even? y))\n      (if (> x y)\n      \
    \    y\n          x)\n      (if (and (even? x) (not (even? y)))\n          x\n\
    \          (if (and (not (even? x)) (even? y))\n              y\n            \
    \  -1))))\n", "  (if (and (even? x) (even? y))\n      (if (> x y)\n          (choose_num\
    \ y x)\n          (if (= x y)\n              x\n              (choose_num (+ x\
    \ 2) y)))\n      (if (even? x)\n          x\n          (if (even? y)\n       \
    \       y\n              -1))))\n", "  (if (and (even? x) (even? y))\n      (if\
    \ (> x y)\n          (choose_num y x)\n          (if (= x y)\n              x\n\
    \              (choose_num (+ x 2) y)))\n      (if (even? x)\n          x\n  \
    \        (if (even? y)\n              y\n              -1))))\n", "  (if (and\
    \ (even? x) (even? y))\n      (if (> x y)\n          (choose_num y x)\n      \
    \    (if (= x y)\n              x\n              (choose_num (+ x 2) y)))\n  \
    \    (if (and (even? x) (not (even? y)))\n          (choose_num x (- y 1))\n \
    \         (if (and (not (even? x)) (even? y))\n              (choose_num (+ x\
    \ 1) y)\n              -1))))\n", "  (if (and (even? x) (even? y))\n      (if\
    \ (> x y)\n          (choose_num y x)\n          (if (= x y)\n              x\n\
    \              (choose_num (+ x 2) y)))\n      (if (even? x)\n          x\n  \
    \        (if (even? y)\n              y\n              -1))))\n", "  (if (= x\
    \ y)\n      (if (even? x)\n          x\n          -1)\n      (if (even? x)\n \
    \         (if (even? y)\n              (if (> x y)\n                  x\n    \
    \              y)\n              (choose_num (+ x 1) y))\n          (choose_num\
    \ (+ x 1) y))))\n", "  (if (and (even? x) (even? y))\n      (if (> x y)\n    \
    \      (choose_num y x)\n          (if (= x y)\n              x\n            \
    \  (choose_num (+ x 2) y)))\n      (if (and (even? x) (not (even? y)))\n     \
    \     (choose_num x (- y 1))\n          (if (and (not (even? x)) (even? y))\n\
    \              (choose_num (+ x 1) y)\n              -1))))\n", "  (cond\n   \
    \ [(= x y) x]\n    [(= (remainder x 2) 0) (choose_num (+ x 2) y)]\n    [(= (remainder\
    \ x 2) 1) (choose_num (+ x 1) y)]))\n", "  (cond\n    [(= x y) (if (even? x) x\
    \ -1)]\n    [(> x y) -1]\n    [else (if (even? x) (max x (choose_num (+ x 1) y))\
    \ (choose_num (+ x 1) y))]))\n", "  (if (and (even? x) (even? y))\n      (if (>\
    \ x y)\n          y\n          x)\n      (if (and (even? x) (not (even? y)))\n\
    \          x\n          (if (and (not (even? x)) (even? y))\n              y\n\
    \              -1))))\n", "  (cond\n    [(= x y) (if (even? x) x -1)]\n    [(even?\
    \ x) (max x (choose_num (+ x 1) y))]\n    [else (choose_num (+ x 1) y)]))\n",
  "  (if (and (even? x) (even? y))\n      (if (> x y)\n          -1\n          (if\
    \ (= x y)\n              x\n              (choose_num (+ x 2) y)))\n      (if\
    \ (even? x)\n          (choose_num (+ x 1) y)\n          (choose_num (+ x 2) y))))\n",
  "  (cond\n    [(= x y) (if (even? x) x -1)]\n    [(even? x) (max x (choose_num (+\
    \ x 1) y))]\n    [else (choose_num (+ x 1) y)]))\n", "  (if (and (even? x) (even?\
    \ y))\n      (if (> x y)\n          (choose_num y x)\n          (if (= x y)\n\
    \              x\n              (choose_num (+ x 2) y)))\n      (if (and (even?\
    \ x) (not (even? y)))\n          (choose_num x (- y 1))\n          (if (and (not\
    \ (even? x)) (even? y))\n              (choose_num (+ x 1) y)\n              -1))))\n",
  "  (if (= x y)\n      (if (even? x)\n          x\n          -1)\n      (if (even?\
    \ x)\n          (choose_num (+ x 1) y)\n          (choose_num (+ x 1) y))))\n",
  "  (cond\n    [(= x y) (if (even? x) x -1)]\n    [(even? x) (max x (choose_num (+\
    \ x 1) y))]\n    [else (choose_num (+ x 1) y)]))\n", "  (if (and (even? x) (even?\
    \ y))\n      (if (> x y)\n          (- x 2)\n          (- y 2))\n      (if (and\
    \ (even? x) (odd? y))\n          (- x 2)\n          (if (and (odd? x) (even? y))\n\
    \              (- y 2)\n              -1))))\n", "  (cond\n    [(= x y) x]\n \
    \   [(= (remainder x 2) 0) (choose_num x (- y 1))]\n    [else (choose_num (+ x\
    \ 1) y)]))\n", "  (if (and (even? x) (even? y))\n      (if (> x y)\n         \
    \ y\n          x)\n      (if (and (even? x) (not (even? y)))\n          x\n  \
    \        (if (and (not (even? x)) (even? y))\n              y\n              -1))))\n",
  "  (if (and (even? x) (even? y))\n      (if (> x y)\n          y\n          x)\n\
    \      (if (and (even? x) (not (even? y)))\n          x\n          (if (and (not\
    \ (even? x)) (even? y))\n              y\n              -1))))\n", "  (if (and\
    \ (even? x) (even? y))\n      (if (> x y)\n          -1\n          (if (= x y)\n\
    \              x\n              (choose_num (+ x 2) y)))\n      (if (even? x)\n\
    \          (choose_num (+ x 1) y)\n          (choose_num (+ x 2) y))))\n"]
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
