name: HumanEval_88_sort_array
language: racket
prompt: "#lang racket\n\n;; Given an array of non-negative integers, return a copy\
  \ of the given array after sorting,\n;; you will sort the given array in ascending\
  \ order if the sum( first index value, last index value) is odd,\n;; or sort it\
  \ in descending order if the sum( first index value, last index value) is even.\n\
  ;; Note:\n;; * don't change the given array.\n;; Examples:\n;; * sort_array([])\
  \ => []\n;; * sort_array([5]) => [5]\n;; * sort_array([2, 4, 3, 0, 1, 5]) => [0,\
  \ 1, 2, 3, 4, 5]\n;; * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
  (define (sort_array array)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_array))\n\
  \    (check-equal? (candidate (list )) (list ))\n    (check-equal? (candidate (list\
  \ 5)) (list 5))\n    (check-equal? (candidate (list 2 4 3 0 1 5)) (list 0 1 2 3\
  \ 4 5))\n    (check-equal? (candidate (list 2 4 3 0 1 5 6)) (list 6 5 4 3 2 1 0))\n\
  \    (check-equal? (candidate (list 2 1)) (list 1 2))\n    (check-equal? (candidate\
  \ (list 15 42 87 32 11 0)) (list 0 11 15 32 42 87))\n    (check-equal? (candidate\
  \ (list 21 14 23 11)) (list 23 21 14 11))\n))\n\n(test-humaneval)"
completions: ["  (if (empty? array)\n      '()\n      (if (even? (+ (first array)\
    \ (last array)))\n          (reverse (sort array <))\n          (sort array <))))\n",
  "  (define (sort-array-helper array)\n    (if (null? array)\n        '()\n     \
    \   (let ([first (car array)]\n              [rest (cdr array)])\n          (if\
    \ (odd? (+ first (car (last array))))\n              (cons first (sort-array-helper\
    \ rest))\n              (append (sort-array-helper rest) (list first))))))\n \
    \ (sort-array-helper array))\n", "  (let ([sum (apply + array)])\n    (cond\n\
    \      [(odd? sum) (sort array <)]\n      [(even? sum) (sort array >)])))\n",
  "  (sort array (lambda (a b)\n                (if (odd? (+ (first array) (last array)))\n\
    \                    (< a b)\n                    (> a b)))))\n```\n\n### Solution\
    \ 2\n```racket\n#lang racket\n", "  (if (empty? array)\n      '()\n      (if (even?\
    \ (+ (first array) (last array)))\n          (reverse (sort array <))\n      \
    \    (sort array <))))\n", "  (if (empty? array)\n      '()\n      (if (even?\
    \ (+ (first array) (last array)))\n          (sort > array)\n          (sort <\
    \ array))))\n", "  (sort array (lambda (a b)\n                (if (odd? (+ (first\
    \ array) (last array)))\n                    (< a b)\n                    (> a\
    \ b)))))\n", "  (if (empty? array)\n      array\n      (let ([first (first array)]\n\
    \            [last (last array)])\n        (if (odd? (+ first last))\n       \
    \     (sort array <)\n            (sort array >)))))\n", "  (sort array (lambda\
    \ (x y)\n                (if (even? (+ (vector-ref array 0) (vector-ref array\
    \ (- (vector-length array) 1))))\n                    (< x y)\n              \
    \      (> x y)))))\n", "  (if (empty? array)\n      array\n      (let ([first\
    \ (first array)]\n            [last (last array)])\n        (if (odd? (+ first\
    \ last))\n            (sort array <)\n            (sort array >)))))\n", "  (if\
    \ (empty? array)\n      '()\n      (if (even? (+ (first array) (last array)))\n\
    \          (sort array >)\n          (sort array <))))\n", "  (if (empty? array)\n\
    \      '()\n      (if (= (length array) 1)\n          array\n          (if (odd?\
    \ (+ (first array) (last array)))\n              (sort array <)\n            \
    \  (sort array >)))))\n", "  (if (empty? array)\n      '()\n      (let ([first\
    \ (first array)]\n            [last (last array)])\n        (if (odd? (+ first\
    \ last))\n            (sort array <)\n            (sort array >)))))\n", "  (if\
    \ (empty? array)\n      array\n      (let ([first (first array)]\n           \
    \ [last (last array)])\n        (if (odd? (+ first last))\n            (sort array\
    \ <)\n            (sort array >)))))\n", "  (if (empty? array)\n      '()\n  \
    \    (let ([len (length array)])\n        (if (even? (+ (array-ref array 0) (array-ref\
    \ array (- len 1))))\n            (sort array >)\n            (sort array <)))))\n",
  "  (cond\n    [(empty? array) '()]\n    [(= (length array) 1) array]\n    [else\n\
    \     (let* ([first (first array)]\n            [last (last array)]\n        \
    \    [sum (+ first last)]\n            [sorted (sort array <)])\n       (if (odd?\
    \ sum) sorted (reverse sorted)))]))\n", "  (define (sum-of-first-and-last-index-values\
    \ array)\n    (+ (car array) (car (reverse array))))\n  (define (sort-array-in-ascending-order\
    \ array)\n    (sort array <))\n  (define (sort-array-in-descending-order array)\n\
    \    (sort array >))\n  (if (empty? array)\n      '()\n      (if (odd? (sum-of-first-and-last-index-values\
    \ array))\n          (sort-array-in-ascending-order array)\n          (sort-array-in-descending-order\
    \ array))))\n", "  (if (empty? array)\n      '()\n      (let ([first (first array)]\n\
    \            [last (last array)])\n        (if (odd? (+ first last))\n       \
    \     (sort array <)\n            (sort array >)))))\n", "  (if (empty? array)\n\
    \      '()\n      (let* ([first (first array)]\n             [last (last array)]\n\
    \             [sum (+ first last)]\n             [sorted (sort array (if (odd?\
    \ sum) < >))])\n        sorted)))\n", "  (if (empty? array)\n      array\n   \
    \   (let* ([first (first array)]\n             [last (last array)]\n         \
    \    [sum (+ first last)]\n             [sorted (sort array (if (odd? sum) < >))])\n\
    \        sorted)))\n", "  (if (empty? array)\n      '()\n      (let* ([first (first\
    \ array)]\n             [last (last array)]\n             [sum (+ first last)]\n\
    \             [sorted (sort array)])\n        (if (odd? sum)\n            sorted\n\
    \            (reverse sorted)))))\n", "  (define (sort-array-helper array)\n \
    \   (if (empty? array)\n        '()\n        (let ([first (first array)]\n   \
    \           [rest (rest array)])\n          (if (empty? rest)\n              (list\
    \ first)\n              (let ([second (first rest)]\n                    [rest-rest\
    \ (rest rest)])\n                (if (odd? (+ first second))\n               \
    \     (cons first (sort-array-helper rest))\n                    (cons second\
    \ (sort-array-helper (cons first rest-rest)))))))))\n  (sort-array-helper array))\n",
  "  (if (empty? array)\n      '()\n      (let* ([first (first array)]\n         \
    \    [last (last array)]\n             [sum (+ first last)]\n             [sorted\
    \ (sort array <)])\n        (if (odd? sum)\n            sorted\n            (reverse\
    \ sorted)))))\n", "  (cond [(empty? array) empty]\n        [(= (length array)\
    \ 1) array]\n        [else\n         (let* ([first (first array)]\n          \
    \      [last (last array)]\n                [sum (+ first last)]\n           \
    \     [sorted (sort array <)])\n           (if (odd? sum) sorted (reverse sorted)))]))\n",
  "  (define (sort-array-helper array)\n    (if (null? array)\n        '()\n     \
    \   (let ([first (car array)]\n              [rest (cdr array)])\n          (if\
    \ (null? rest)\n              (list first)\n              (let ([second (car rest)])\n\
    \                (if (odd? (+ first second))\n                    (cons first\
    \ (sort-array-helper rest))\n                    (cons second (sort-array-helper\
    \ (cons first (cdr rest)))))))))\n  (sort-array-helper array))\n", "  (define\
    \ (sort-array-helper array)\n    (if (empty? array)\n        '()\n        (sort-array-helper\
    \ (cdr array))\n        (cons (car array) (sort-array-helper (cdr array)))))\n\
    \  (if (even? (+ (car array) (last array)))\n      (sort-array-helper array)\n\
    \      (reverse (sort-array-helper array))))\n", "  (if (empty? array)\n     \
    \ '()\n      (let ([first (first array)]\n            [last (last array)])\n \
    \       (if (odd? (+ first last))\n            (sort array <)\n            (sort\
    \ array >)))))\n", "  (if (empty? array)\n      '()\n      (let* ([first (first\
    \ array)]\n             [last (last array)]\n             [sum (+ first last)]\n\
    \             [sorted (sort array (if (odd? sum) < >))])\n        sorted)))\n",
  "  (if (empty? array)\n      '()\n      (sort (lambda (a b)\n              (if (odd?\
    \ (+ (first array) (last array)))\n                  (< a b)\n               \
    \   (> a b)))\n            array)))\n", "  (if (empty? array)\n      '()\n   \
    \   (let ([sum (add (first array) (last array))])\n        (if (odd? sum)\n  \
    \          (sort array <)\n            (sort array >)))))\n", "  (if (empty? array)\n\
    \      '()\n      (let ([first (first array)]\n            [last (last array)])\n\
    \        (if (odd? (+ first last))\n            (sort array <)\n            (sort\
    \ array >)))))\n", "  (if (empty? array)\n      '()\n      (let ([first (first\
    \ array)]\n            [last (last array)])\n        (if (odd? (+ first last))\n\
    \            (sort array <)\n            (sort array >)))))\n", "  (if (empty?\
    \ array)\n      '()\n      (if (odd? (+ (first array) (last array)))\n       \
    \   (sort array <)\n          (sort array >))))\n", "  (if (empty? array)\n  \
    \    '()\n      (let ([first (first array)]\n            [last (last array)])\n\
    \        (if (odd? (+ first last))\n            (sort array <)\n            (sort\
    \ array >)))))\n", "  (if (empty? array)\n      '()\n      (let ([first (first\
    \ array)]\n            [last (last array)])\n        (if (odd? (+ first last))\n\
    \            (sort array <)\n            (sort array >)))))\n", "  (if (empty?\
    \ array)\n      '()\n      (if (even? (+ (first array) (last array)))\n      \
    \    (reverse array)\n          array)))\n", "  (if (empty? array)\n      '()\n\
    \      (let ([first (first array)]\n            [last (last array)])\n       \
    \ (if (odd? (+ first last))\n            (sort array <)\n            (sort array\
    \ >)))))\n", "  (if (empty? array)\n      '()\n      (let ([first (first array)]\n\
    \            [last (last array)])\n        (if (odd? (+ first last))\n       \
    \     (sort array <)\n            (sort array >)))))\n", "  (if (empty? array)\n\
    \      '()\n      (let ([sum (add (first array) (last array))])\n        (if (odd?\
    \ sum)\n            (sort array <)\n            (sort array >)))))\n", "  (if\
    \ (empty? array)\n      '()\n      (if (empty? (rest array))\n          array\n\
    \          (if (odd? (+ (first array) (last array)))\n              (sort array\
    \ <)\n              (sort array >)))))\n", "  (cond [(empty? array) '()]\n   \
    \     [(= (length array) 1) array]\n        [else (sort_array_helper array 0 (sub1\
    \ (length array)))]))\n", "  (cond\n    [(empty? array) '()]\n    [(= (length\
    \ array) 1) array]\n    [else\n     (let* ([first (first array)]\n           \
    \ [last (last array)]\n            [sum (+ first last)]\n            [sorted (sort\
    \ array <)])\n       (if (odd? sum) sorted (reverse sorted)))]))\n", "  (if (empty?\
    \ array)\n      '()\n      (let ([first (first array)]\n            [last (last\
    \ array)])\n        (if (odd? (+ first last))\n            (sort array <)\n  \
    \          (sort array >)))))\n", "  (if (empty? array)\n      '()\n      (let\
    \ ([first (first array)]\n            [last (last array)])\n        (if (odd?\
    \ (+ first last))\n            (sort array <)\n            (sort array >)))))\n",
  "  (sort array (lambda (x y)\n                (if (odd? (+ (first array) (last array)))\n\
    \                    (< x y)\n                    (> x y)))))\n", "  (cond\n \
    \   [(empty? array) '()]\n    [(= (length array) 1) array]\n    [else\n     (let\
    \ ([first (first array)]\n           [last (last array)])\n       (cond\n    \
    \     [(= (add1 (remainder (+ first last) 2)) 1)\n          (sort array <)]\n\
    \         [else\n          (sort array >)]))]))\n", "  (if (empty? array)\n  \
    \    '()\n      (if (even? (+ (first array) (last array)))\n          (sort array\
    \ >)\n          (sort array <))))\n", "  (cond\n    [(empty? array) '()]\n   \
    \ [(= (length array) 1) array]\n    [else\n     (let* ([first (first array)]\n\
    \            [last (last array)]\n            [sum (+ first last)]\n         \
    \   [sorted (sort array <)])\n       (if (odd? sum) sorted (reverse sorted)))]))\n",
  "  (if (empty? array)\n      '()\n      (if (odd? (+ (first array) (last array)))\n\
    \          (sort array <)\n          (sort array >))))\n", "  (if (empty? array)\n\
    \      '()\n      (let ([first (first array)]\n            [last (last array)])\n\
    \        (if (odd? (+ first last))\n            (sort array <)\n            (sort\
    \ array >)))))\n", "  (if (empty? array)\n      '()\n      (let ([first (first\
    \ array)]\n            [last (last array)])\n        (if (odd? (+ first last))\n\
    \            (sort array <)\n            (sort array >)))))\n", "  (cond [(empty?\
    \ array) '()]\n        [(= (length array) 1) array]\n        [else\n         (let*\
    \ ([first-index (first array)]\n                [last-index (last array)]\n  \
    \              [sum (+ first-index last-index)]\n                [sorted-array\
    \ (sort array <)])\n           (if (odd? sum) sorted-array (reverse sorted-array)))]))\n",
  "  (let ([sum (apply + array)])\n    (if (odd? sum)\n        (sort array <)\n  \
    \      (sort array >))))\n", "  (if (empty? array)\n      '()\n      (sort_array_helper\
    \ array #f)))\n", "  (if (empty? array)\n      '()\n      (let ([first (first\
    \ array)]\n            [last (last array)])\n        (if (even? (+ first last))\n\
    \            (sort array >)\n            (sort array <)))))\n", "  (if (empty?\
    \ array)\n      '()\n      (if (= (length array) 1)\n          array\n       \
    \   (let ([first (first array)]\n                [last (last array)])\n      \
    \      (if (odd? (+ first last))\n                (sort array <)\n           \
    \     (sort array >))))))\n", "  (if (empty? array)\n      '()\n      (let ([first\
    \ (first array)]\n            [last (last array)])\n        (if (odd? (+ first\
    \ last))\n            (sort array <)\n            (sort array >)))))\n", "  (if\
    \ (empty? array)\n      '()\n      (let ([first (first array)]\n            [last\
    \ (last array)])\n        (if (odd? (+ first last))\n            (sort array <)\n\
    \            (sort array >)))))\n", "  (cond [(empty? array) '()]\n        [(=\
    \ (length array) 1) array]\n        [else (cond [(odd? (+ (first array) (last\
    \ array)))\n                     (sort array <)]\n                    [else (sort\
    \ array >)])]))\n", "  (cond [(empty? array) '()]\n        [(= (length array)\
    \ 1) array]\n        [else\n         (let* ([first (first array)]\n          \
    \      [last (last array)]\n                [sum (+ first last)]\n           \
    \     [sorted (sort array <)])\n           (if (odd? sum) sorted (reverse sorted)))]))\n",
  "  (if (empty? array)\n      '()\n      (if (even? (+ (first array) (last array)))\n\
    \          (sort array >)\n          (sort array <))))\n", "  (if (empty? array)\n\
    \      '()\n      (let ([first (first array)]\n            [last (last array)])\n\
    \        (if (odd? (+ first last))\n            (sort array <)\n            (sort\
    \ array >)))))\n", "  (if (empty? array)\n      '()\n      (if (even? (+ (first\
    \ array) (last array)))\n          (sort array >)\n          (sort array <))))\n",
  "  (if (empty? array)\n      '()\n      (let ([first (first array)]\n          \
    \  [last (last array)])\n        (if (odd? (+ first last))\n            (sort\
    \ array <)\n            (sort array >)))))\n", "  (if (empty? array)\n      array\n\
    \      (let ([first (first array)]\n            [last (last array)])\n       \
    \ (if (odd? (+ first last))\n            (sort array <)\n            (sort array\
    \ >)))))\n", "  (if (empty? array)\n      '()\n      (if (even? (+ (first array)\
    \ (last array)))\n          (sort array >)\n          (sort array <))))\n", " \
    \ (if (empty? array)\n      '()\n      (let ([first (first array)]\n         \
    \   [last (last array)])\n        (if (odd? (+ first last))\n            (sort\
    \ array <)\n            (sort array >)))))\n", "  (if (empty? array)\n      '()\n\
    \      (let ([first (first array)]\n            [last (last array)])\n       \
    \ (if (odd? (+ first last))\n            (sort array <)\n            (sort array\
    \ >)))))\n", "  (if (empty? array)\n      '()\n      (let ([first (first array)]\n\
    \            [last (last array)])\n        (if (odd? (+ first last))\n       \
    \     (sort array <)\n            (sort array >)))))\n", "  (if (empty? array)\n\
    \      '()\n      (if (even? (+ (first array) (last array)))\n          (reverse\
    \ array)\n          array)))\n", "  (define (sort-ascending array)\n    (sort\
    \ array <))\n  (define (sort-descending array)\n    (sort array >))\n  (if (odd?\
    \ (+ (car array) (car (reverse array))))\n      (sort-ascending array)\n     \
    \ (sort-descending array)))\n", "  (if (empty? array)\n      '()\n      (let*\
    \ ([first-index (first array)]\n             [last-index (last array)]\n     \
    \        [sum (+ first-index last-index)]\n             [sorted-array (sort array\
    \ <)])\n        (if (odd? sum)\n            sorted-array\n            (reverse\
    \ sorted-array)))))\n", "  (cond\n    [(empty? array) '()]\n    [(= (length array)\
    \ 1) array]\n    [else\n     (let* ([first (first array)]\n            [last (last\
    \ array)]\n            [sum (+ first last)]\n            [sorted (sort array <)])\n\
    \       (if (odd? sum) sorted (reverse sorted)))]))\n", "  (if (empty? array)\n\
    \      '()\n      (if (= (length array) 1)\n          array\n          (let ([first\
    \ (first array)]\n                [last (last array)])\n            (if (odd?\
    \ (+ first last))\n                (sort array <)\n                (sort array\
    \ >))))))\n", "  (if (empty? array)\n      '()\n      (if (even? (+ (first array)\
    \ (last array)))\n          (sort > array)\n          (sort < array))))\n", " \
    \ (if (empty? array)\n      '()\n      (let ([sum (add (first array) (last array))])\n\
    \        (if (odd? sum)\n            (sort array <)\n            (sort array >)))))\n",
  "  (if (empty? array)\n      '()\n      (if (= (length array) 1)\n          array\n\
    \          (let* ([first (first array)]\n                 [last (last array)]\n\
    \                 [sum (+ first last)]\n                 [sorted (sort array <)])\n\
    \            (if (odd? sum)\n                sorted\n                (reverse\
    \ sorted))))))\n", "  (if (empty? array)\n      '()\n      (let ([first (first\
    \ array)]\n            [last (last array)])\n        (if (odd? (+ first last))\n\
    \            (sort array <)\n            (sort array >)))))\n", "  (if (empty?\
    \ array)\n      '()\n      (if (odd? (+ (first array) (last array)))\n       \
    \   (sort array <)\n          (sort array >))))\n", "  (if (empty? array)\n  \
    \    '()\n      (let ([first (first array)]\n            [last (last array)])\n\
    \        (if (even? (+ first last))\n            (sort array >)\n            (sort\
    \ array <)))))\n", "  (if (empty? array)\n      '()\n      (if (even? (+ (first\
    \ array) (last array)))\n          (sort array >)\n          (sort array <))))\n",
  "  (if (empty? array)\n      '()\n      (let ([sum (add (first array) (last array))])\n\
    \        (if (odd? sum)\n            (sort array <)\n            (sort array >)))))\n",
  "  (define (sort-helper array)\n    (if (empty? array)\n        '()\n        (let*\
    \ ([first (first array)]\n               [rest (rest array)]\n               [sorted-rest\
    \ (sort-helper rest)])\n          (if (odd? (+ first (last sorted-rest)))\n  \
    \            (cons first sorted-rest)\n              (cons (last sorted-rest)\
    \ (cons first (but-last sorted-rest)))))))\n  (sort-helper array))\n", "  (define\
    \ (sort-array-helper array)\n    (if (empty? array)\n        '()\n        (sort-array-helper\
    \ (cdr array))\n        (cons (car array) '())))\n  (if (empty? array)\n     \
    \ '()\n      (if (even? (+ (car array) (last array)))\n          (sort-array-helper\
    \ array)\n          (reverse (sort-array-helper array)))))\n", "  (if (empty?\
    \ array)\n      '()\n      (let ([first (first array)]\n            [last (last\
    \ array)])\n        (if (odd? (+ first last))\n            (sort array <)\n  \
    \          (sort array >)))))\n", "  (define (odd? n)\n    (= (remainder n 2)\
    \ 1))\n  (define (sort-array-helper array)\n    (cond\n      [(empty? array) empty]\n\
    \      [(odd? (car array)) (cons (car array) (sort-array-helper (cdr array)))]\n\
    \      [else (append (sort-array-helper (cdr array)) (list (car array)))])\n \
    \   )\n  (sort-array-helper array))\n", "  (cond [(empty? array) '()]\n      \
    \  [(= (length array) 1) array]\n        [else\n         (let* ([first (first\
    \ array)]\n                [last (last array)]\n                [sum (+ first\
    \ last)]\n                [sorted (sort array <)])\n           (if (odd? sum)\
    \ sorted (reverse sorted)))]))\n", "  (if (empty? array)\n      '()\n      (let*\
    \ ([first-index (first array)]\n             [last-index (last array)]\n     \
    \        [sum (+ first-index last-index)]\n             [sorted-array (sort array\
    \ <)])\n        (if (odd? sum)\n            sorted-array\n            (reverse\
    \ sorted-array)))))\n", "  (if (empty? array)\n      '()\n      (if (odd? (+ (first\
    \ array) (last array)))\n          (sort array <)\n          (sort array >))))\n",
  "  (if (empty? array)\n      '()\n      (if (even? (+ (first array) (last array)))\n\
    \          (sort array >)\n          (sort array <))))\n", "  (if (empty? array)\n\
    \      '()\n      (let ([first (first array)]\n            [last (last array)])\n\
    \        (if (odd? (+ first last))\n            (sort array <)\n            (sort\
    \ array >)))))\n", "  (if (empty? array)\n      '()\n      (if (= (length array)\
    \ 1)\n          array\n          (let ([first (first array)]\n               \
    \ [last (last array)])\n            (if (odd? (+ first last))\n              \
    \  (sort array <)\n                (sort array >))))))\n", "  (if (empty? array)\n\
    \      array\n      (sort_array_helper array (sum (first array) (last array)))))\n",
  "  (if (empty? array)\n      array\n      (if (odd? (+ (first array) (last array)))\n\
    \          (sort array <)\n          (sort array >))))\n", "  (if (empty? array)\n\
    \      '()\n      (let ([first (first array)]\n            [last (last array)])\n\
    \        (if (odd? (+ first last))\n            (sort array <)\n            (sort\
    \ array >)))))\n", "  (cond\n    [(empty? array) '()]\n    [(= (length array)\
    \ 1) array]\n    [else\n     (let* ([first (first array)]\n            [last (last\
    \ array)]\n            [sum (+ first last)]\n            [sorted (sort array <)])\n\
    \       (if (odd? sum) sorted (reverse sorted)))]))\n", "  (if (empty? array)\n\
    \      '()\n      (let ([first (first array)]\n            [last (last array)])\n\
    \        (if (odd? (+ first last))\n            (sort array <)\n            (sort\
    \ array >)))))\n", "  (if (empty? array)\n      '()\n      (if (odd? (+ (first\
    \ array) (last array)))\n          (sort array <)\n          (sort array >))))\n",
  "  (if (empty? array)\n      '()\n      (if (even? (+ (first array) (last array)))\n\
    \          (reverse array)\n          array)))\n", "  (cond [(empty? array) '()]\n\
    \        [(= (length array) 1) array]\n        [else (sort_array_helper array)]))\n",
  "  (define (sum-of-first-and-last-index-value array)\n    (+ (car array) (car (reverse\
    \ array))))\n  (define (is-even? n)\n    (= (remainder n 2) 0))\n  (cond [(empty?\
    \ array) '()]\n        [(is-even? (sum-of-first-and-last-index-value array))\n\
    \         (sort > array)]\n        [else (sort < array)]))\n", "  (if (empty?\
    \ array)\n      '()\n      (let* ([first (first array)]\n             [last (last\
    \ array)]\n             [sum (+ first last)]\n             [sorted (sort array\
    \ (if (odd? sum) < >))])\n        sorted)))\n", "  (if (empty? array)\n      '()\n\
    \      (let ([first (first array)]\n            [last (last array)])\n       \
    \ (if (odd? (+ first last))\n            (sort array <)\n            (sort array\
    \ >)))))\n", "  (cond [(empty? array) '()]\n        [(= (length array) 1) array]\n\
    \        [else\n         (let* ([first (first array)]\n                [last (last\
    \ array)]\n                [sum (+ first last)]\n                [sorted (sort\
    \ array (if (odd? sum) < >))])\n           sorted)]))\n", "  (sort array (lambda\
    \ (x y)\n                (if (odd? (+ (car array) (car (reverse array))))\n  \
    \                  (< x y)\n                    (> x y)))))\n", "  (if (empty?\
    \ array)\n      '()\n      (let ([first (first array)]\n            [last (last\
    \ array)])\n        (if (odd? (+ first last))\n            (sort array <)\n  \
    \          (sort array >)))))\n", "  (if (empty? array)\n      '()\n      (if\
    \ (even? (+ (first array) (last array)))\n          (sort array <)\n         \
    \ (sort array >))))\n", "  (cond [(empty? array) '()]\n        [(= (length array)\
    \ 1) array]\n        [else\n         (let ([sum (add (first array) (last array))])\n\
    \           (if (odd? sum)\n               (sort array <)\n               (sort\
    \ array >)))]))\n", "  (if (empty? array)\n      '()\n      (let ([first (first\
    \ array)]\n            [last (last array)])\n        (if (odd? (+ first last))\n\
    \            (sort array <)\n            (sort array >)))))\n", "  (define (sort-array-helper\
    \ array)\n    (if (empty? array)\n        '()\n        (let* ([first (first array)]\n\
    \               [rest (rest array)]\n               [sorted-rest (sort-array-helper\
    \ rest)]\n               [last (last sorted-rest)]\n               [sorted-rest-without-last\
    \ (butlast sorted-rest)])\n          (if (odd? (+ first last))\n             \
    \ (append (sort sorted-rest-without-last) (list last))\n              (append\
    \ (sort sorted-rest-without-last #:key (\u03BB (x) (- x))) (list last))))))\n\
    \  (sort-array-helper array))\n", "  (cond [(empty? array) '()]\n        [(= (length\
    \ array) 1) array]\n        [else (sort_array_helper array)]))\n", "  (if (empty?\
    \ array)\n      '()\n      (let ([first (first array)]\n            [last (last\
    \ array)])\n        (if (odd? (+ first last))\n            (sort array <)\n  \
    \          (sort array >)))))\n", "  (if (empty? array)\n      '()\n      (let\
    \ ([first (first array)]\n            [last (last array)])\n        (if (odd?\
    \ (+ first last))\n            (sort array <)\n            (sort array >)))))\n",
  "  (if (empty? array)\n      '()\n      (if (even? (+ (first array) (last array)))\n\
    \          (sort array >)\n          (sort array <))))\n", "  (if (empty? array)\n\
    \      array\n      (let ([first (first array)]\n            [last (last array)])\n\
    \        (if (odd? (+ first last))\n            (sort array <)\n            (sort\
    \ array >)))))\n", "  (cond\n    [(empty? array) '()]\n    [(= (length array)\
    \ 1) array]\n    [else\n     (let* ([first (first array)]\n            [last (last\
    \ array)]\n            [sum (+ first last)]\n            [sorted (sort array <)])\n\
    \       (if (odd? sum) sorted (reverse sorted)))]))\n", "  (if (empty? array)\n\
    \      '()\n      (let ([first (first array)]\n            [last (last array)])\n\
    \        (if (odd? (+ first last))\n            (sort array <)\n            (sort\
    \ array >)))))\n", "  (if (empty? array)\n      '()\n      (let ([first (first\
    \ array)]\n            [last (last array)])\n        (if (odd? (+ first last))\n\
    \            (sort array <)\n            (sort array >)))))\n", "  (sort array\
    \ (lambda (x y)\n                (if (even? (+ (vector-ref array 0) (vector-ref\
    \ array (- (vector-length array) 1))))\n                    (> x y)\n        \
    \            (< x y)))))\n", "  (cond [(empty? array) '()]\n        [(= (length\
    \ array) 1) array]\n        [else\n         (let* ([first (first array)]\n   \
    \             [last (last array)]\n                [sum (+ first last)]\n    \
    \            [sorted (sort array <)])\n           (if (odd? sum) sorted (reverse\
    \ sorted)))]))\n", "  (if (empty? array)\n      '()\n      (let ([first (first\
    \ array)]\n            [last (last array)])\n        (if (even? (+ first last))\n\
    \            (sort array >)\n            (sort array <)))))\n", "  (cond [(empty?\
    \ array) '()]\n        [(= (length array) 1) array]\n        [else\n         (let\
    \ ([sum (add (first array) (last array))])\n           (if (odd? sum)\n      \
    \         (sort array <)\n               (sort array >)))]))\n", "  (if (empty?\
    \ array)\n      '()\n      (let ([first (first array)]\n            [last (last\
    \ array)])\n        (if (odd? (+ first last))\n            (sort array <)\n  \
    \          (sort array >)))))\n", "  (if (empty? array)\n      '()\n      (let\
    \ ([first (first array)]\n            [last (last array)])\n        (if (odd?\
    \ (+ first last))\n            (sort array <)\n            (sort array >)))))\n",
  "  (if (empty? array)\n      '()\n      (if (even? (+ (first array) (last array)))\n\
    \          (sort array >)\n          (sort array <))))\n", "  (if (empty? array)\n\
    \      array\n      (if (even? (+ (first array) (last array)))\n          (reverse\
    \ array)\n          array)))\n", "  (cond [(empty? array) empty]\n        [(=\
    \ (length array) 1) array]\n        [else\n         (let ([first-index (first\
    \ array)]\n               [last-index (last array)])\n           (if (odd? (+\
    \ first-index last-index))\n               (sort array <)\n               (sort\
    \ array >)))]))\n", "  (if (empty? array)\n      '()\n      (let ([first (first\
    \ array)]\n            [last (last array)])\n        (if (odd? (+ first last))\n\
    \            (sort array <)\n            (sort array >)))))\n", "  (if (empty?\
    \ array)\n      '()\n      (let ([first (first array)]\n            [last (last\
    \ array)])\n        (if (odd? (+ first last))\n            (sort array <)\n  \
    \          (sort array >)))))\n", "  (if (empty? array)\n      '()\n      (let\
    \ ([first (first array)]\n            [last (last array)])\n        (if (odd?\
    \ (+ first last))\n            (sort array <)\n            (sort array >)))))\n",
  "  (cond [(empty? array) '()]\n        [(= (length array) 1) array]\n        [else\n\
    \         (let* ([first (first array)]\n                [last (last array)]\n\
    \                [sum (+ first last)]\n                [sorted-array (sort array\
    \ <)])\n           (if (odd? sum) sorted-array (reverse sorted-array)))]))\n",
  "  (if (empty? array)\n      '()\n      (if (even? (+ (first array) (last array)))\n\
    \          (reverse (sort array <))\n          (sort array <))))\n", "  (if (empty?\
    \ array)\n      array\n      (let ([first (first array)]\n            [last (last\
    \ array)])\n        (if (odd? (+ first last))\n            (sort array <)\n  \
    \          (sort array >)))))\n", "  (if (empty? array)\n      '()\n      (let\
    \ ([first (first array)]\n            [last (last array)])\n        (if (odd?\
    \ (+ first last))\n            (sort array <)\n            (sort array >)))))\n",
  "  (if (empty? array)\n      '()\n      (let ([first (first array)]\n          \
    \  [last (last array)])\n        (if (odd? (+ first last))\n            (sort\
    \ array <)\n            (sort array >)))))\n", "  (if (empty? array)\n      '()\n\
    \      (let ([first (first array)]\n            [last (last array)])\n       \
    \ (if (odd? (+ first last))\n            (sort array <)\n            (sort array\
    \ >)))))\n", "  (if (empty? array)\n      '()\n      (let ([sum (add (first array)\
    \ (last array))])\n        (if (odd? sum)\n            (sort array <)\n      \
    \      (sort array >)))))\n", "  (cond [(empty? array) empty]\n        [(= (length\
    \ array) 1) array]\n        [else (sort_array_helper array (sum (first array)\
    \ (last array)))]))\n", "  (if (empty? array)\n      '()\n      (if (odd? (+ (first\
    \ array) (last array)))\n          (sort array <)\n          (sort array >))))\n",
  "  (if (empty? array)\n      '()\n      (if (even? (+ (first array) (last array)))\n\
    \          (sort array >)\n          (sort array <))))\n", "  (cond [(empty? array)\
    \ '()]\n        [(= (length array) 1) array]\n        [else\n         (let ([first\
    \ (first array)]\n               [last (last array)])\n           (if (odd? (+\
    \ first last))\n               (sort array <)\n               (sort array >)))]))\n",
  "  (if (empty? array)\n      '()\n      (let* ([first (first array)]\n         \
    \    [last (last array)]\n             [sum (+ first last)]\n             [sorted\
    \ (sort array (if (odd? sum) < >))])\n        sorted)))\n", "  (if (empty? array)\n\
    \      array\n      (let ([first (first array)]\n            [last (last array)])\n\
    \        (if (even? (+ first last))\n            (sort array >)\n            (sort\
    \ array <)))))\n", "  (if (empty? array)\n      '()\n      (let ([first (first\
    \ array)]\n            [last (last array)])\n        (if (odd? (+ first last))\n\
    \            (sort array <)\n            (sort array >)))))\n", "  (cond\n   \
    \ [(empty? array) '()]\n    [(= (length array) 1) array]\n    [else\n     (let*\
    \ ([first (first array)]\n            [last (last array)]\n            [sum (+\
    \ first last)]\n            [sorted (sort array <)])\n       (if (odd? sum) sorted\
    \ (reverse sorted)))]))\n", "  (if (empty? array)\n      '()\n      (let ([first\
    \ (first array)]\n            [last (last array)])\n        (if (odd? (+ first\
    \ last))\n            (sort array <)\n            (sort array >)))))\n", "  (if\
    \ (empty? array)\n      '()\n      (if (odd? (+ (first array) (last array)))\n\
    \          (sort array <)\n          (sort array >))))\n", "  (if (empty? array)\n\
    \      '()\n      (if (even? (+ (first array) (last array)))\n          (sort\
    \ array >)\n          (sort array <))))\n", "  (if (empty? array)\n      '()\n\
    \      (sort-array-helper array 0 (sub1 (length array)))))\n", "  (if (empty?\
    \ array)\n      '()\n      (let* ([first (first array)]\n             [last (last\
    \ array)]\n             [sum (+ first last)]\n             [sorted (sort array\
    \ (if (odd? sum) < >))])\n        sorted)))\n", "  (if (empty? array)\n      array\n\
    \      (let ([first (first array)]\n            [last (last array)])\n       \
    \ (if (odd? (+ first last))\n            (sort array <)\n            (sort array\
    \ >)))))\n", "  (if (empty? array)\n      '()\n      (let ([first (first array)]\n\
    \            [last (last array)])\n        (if (odd? (+ first last))\n       \
    \     (sort array <)\n            (sort array >)))))\n", "  (if (empty? array)\n\
    \      array\n      (if (even? (+ (car array) (last array)))\n          (reverse\
    \ array)\n          array)))\n", "  (if (empty? array)\n      empty\n      (let\
    \ ([first (first array)]\n            [last (last array)])\n        (if (odd?\
    \ (+ first last))\n            (sort array <)\n            (sort array >)))))\n",
  "  (define (sort-array-helper array)\n    (define (sort-array-helper-helper array)\n\
    \      (if (null? array)\n          '()\n          (cons (car array) (sort-array-helper-helper\
    \ (cdr array)))))\n    (if (odd? (+ (car array) (car (reverse array))))\n    \
    \    (sort-array-helper-helper array)\n        (reverse (sort-array-helper-helper\
    \ array))))\n  (if (null? array)\n      '()\n      (sort-array-helper array)))\n",
  "  (if (empty? array)\n      array\n      (if (even? (+ (first array) (last array)))\n\
    \          (sort array >)\n          (sort array <))))\n", "  (if (empty? array)\n\
    \      '()\n      (let ([first (first array)]\n            [last (last array)])\n\
    \        (if (odd? (+ first last))\n            (sort array <)\n            (sort\
    \ array >)))))\n", "  (if (empty? array)\n      '()\n      (let* ([first (first\
    \ array)]\n             [last (last array)]\n             [sum (+ first last)]\n\
    \             [sorted (sort array <)])\n        (if (odd? sum)\n            sorted\n\
    \            (reverse sorted)))))\n", "  (if (empty? array)\n      '()\n     \
    \ (if (odd? (+ (first array) (last array)))\n          (sort array <)\n      \
    \    (sort array >))))\n", "  (cond [(empty? array) '()]\n        [(= (length\
    \ array) 1) array]\n        [else\n         (let* ([first (first array)]\n   \
    \             [last (last array)]\n                [sum (+ first last)]\n    \
    \            [sorted (sort array <)])\n           (if (odd? sum) sorted (reverse\
    \ sorted)))]))\n", "  (if (empty? array)\n      '()\n      (let ([first (first\
    \ array)]\n            [last (last array)])\n        (if (odd? (+ first last))\n\
    \            (sort array <)\n            (sort array >)))))\n", "  (if (empty?\
    \ array)\n      '()\n      (let ([first (first array)]\n            [last (last\
    \ array)])\n        (if (odd? (+ first last))\n            (sort array <)\n  \
    \          (sort array >)))))\n", "  (if (empty? array)\n      '()\n      (if\
    \ (odd? (+ (first array) (last array)))\n          (sort array <)\n          (sort\
    \ array >))))\n", "  (if (empty? array)\n      '()\n      (if (even? (+ (first\
    \ array) (last array)))\n          (sort array >)\n          (sort array <))))\n",
  "  (if (empty? array)\n      '()\n      (let ([first (first array)]\n          \
    \  [last (last array)])\n        (if (odd? (+ first last))\n            (sort\
    \ array <)\n            (sort array >)))))\n", "  (if (empty? array)\n      '()\n\
    \      (if (even? (+ (first array) (last array)))\n          (sort array >)\n\
    \          (sort array <))))\n", "  (if (empty? array)\n      '()\n      (let*\
    \ ([first (first array)]\n             [last (last array)]\n             [sum\
    \ (+ first last)]\n             [sorted-array (sort array <)])\n        (if (odd?\
    \ sum)\n            sorted-array\n            (reverse sorted-array)))))\n", " \
    \ (if (empty? array)\n      '()\n      (let* ([first (first array)]\n        \
    \     [last (last array)]\n             [sum (+ first last)]\n             [rest\
    \ (rest (butlast array))])\n        (if (odd? sum)\n            (reverse (cons\
    \ first (sort_array rest)))\n            (cons first (sort_array rest))))))\n",
  "  (if (empty? array)\n      '()\n      (if (odd? (+ (first array) (last array)))\n\
    \          (sort array <)\n          (sort array >))))\n", "  (if (empty? array)\n\
    \      '()\n      (let ([first (first array)]\n            [last (last array)])\n\
    \        (if (odd? (+ first last))\n            (sort array <)\n            (sort\
    \ array >)))))\n", "  (if (empty? array)\n      '()\n      (let* ([first (first\
    \ array)]\n             [last (last array)]\n             [sum (add1 (add1 (add1\
    \ (add1 (add1 (add1 first)) last))))])\n        (if (odd? sum)\n            (sort\
    \ array <)\n            (sort array >)))))\n", "  (if (empty? array)\n      '()\n\
    \      (let ([first (first array)]\n            [last (last array)])\n       \
    \ (if (odd? (+ first last))\n            (sort array <)\n            (sort array\
    \ >)))))\n", "  (if (empty? array)\n      '()\n      (let ([first (first array)]\n\
    \            [last (last array)])\n        (if (even? (+ first last))\n      \
    \      (sort array >)\n            (sort array <)))))\n", "  (if (empty? array)\n\
    \      '()\n      (let ([sum (add (first array) (last array))])\n        (if (odd?\
    \ sum)\n            (sort array <)\n            (sort array >)))))\n```\n\n##\
    \ Test Cases\n\n```racket", "  (sort array (lambda (a b)\n                (if\
    \ (even? (+ (first array) (last array)))\n                    (> a b)\n      \
    \              (< a b)))))\n", "  (cond [(empty? array) '()]\n        [(= (length\
    \ array) 1) array]\n        [else\n         (let* ([first (first array)]\n   \
    \             [last (last array)]\n                [sum (+ first last)]\n    \
    \            [rest (rest (butlast array))])\n           (if (odd? sum)\n     \
    \          (sort array <)\n               (sort array >)))]))\n", "  (if (empty?\
    \ array)\n      '()\n      (if (even? (+ (first array) (last array)))\n      \
    \    (reverse (sort array <))\n          (sort array <))))\n", "  (if (empty?\
    \ array)\n      '()\n      (if (= (length array) 1)\n          array\n       \
    \   (let ([sum (add (first array) (last array))])\n            (if (odd? sum)\n\
    \                (sort array <)\n                (sort array >))))))\n", "  (if\
    \ (empty? array)\n      '()\n      (if (even? (+ (first array) (last array)))\n\
    \          (sort array >)\n          (sort array <))))\n", "  (if (empty? array)\n\
    \      '()\n      (let* ([first (first array)]\n             [last (last array)]\n\
    \             [sum (+ first last)]\n             [rest (rest (butlast array))])\n\
    \        (if (odd? sum)\n            (sort rest <)\n            (sort rest >)))))\n",
  "  (if (empty? array)\n      '()\n      (if (even? (+ (first array) (last array)))\n\
    \          (sort array >)\n          (sort array <))))\n", "  (if (empty? array)\n\
    \      '()\n      (if (= (length array) 1)\n          array\n          (if (odd?\
    \ (+ (first array) (last array)))\n              (sort array <)\n            \
    \  (sort array >)))))\n", "  (define (sum-of-first-and-last array)\n    (+ (car\
    \ array) (car (reverse array))))\n  (if (even? (sum-of-first-and-last array))\n\
    \      (sort array >)\n      (sort array <)))\n", "  (define (sort-array-helper\
    \ array)\n    (cond\n      [(empty? array) empty]\n      [(empty? (rest array))\
    \ array]\n      [(odd? (+ (first array) (last array)))\n       (append (sort-array-helper\
    \ (rest array)) (list (first array)))]\n      [else\n       (append (list (first\
    \ array)) (sort-array-helper (rest array)))]))\n  (sort-array-helper array))\n",
  "  (if (empty? array)\n      '()\n      (let ([first (first array)]\n          \
    \  [last (last array)])\n        (if (odd? (+ first last))\n            (sort\
    \ array <)\n            (sort array >)))))\n", "  (if (empty? array)\n      '()\n\
    \      (if (even? (+ (first array) (last array)))\n          (sort array >)\n\
    \          (sort array <))))\n", "  (if (empty? array)\n      '()\n      (let\
    \ ([first (first array)]\n            [last (last array)])\n        (if (odd?\
    \ (+ first last))\n            (sort array <)\n            (sort array >)))))\n",
  "  (if (empty? array)\n      '()\n      (if (even? (+ (first array) (last array)))\n\
    \          (sort array >)\n          (sort array <))))\n", "  (cond [(empty? array)\
    \ '()]\n        [(= (length array) 1) array]\n        [else\n         (let ([sum\
    \ (apply + array)])\n           (cond [(odd? sum) (sort array <)]\n          \
    \       [else (sort array >)]))]))\n", "  (if (empty? array)\n      '()\n    \
    \  (let ([first (first array)]\n            [last (last array)])\n        (if\
    \ (odd? (+ first last))\n            (sort array <)\n            (sort array >)))))\n",
  "  (cond [(empty? array) '()]\n        [(= (length array) 1) array]\n        [else\n\
    \         (let* ([first (first array)]\n                [last (last array)]\n\
    \                [sum (+ first last)]\n                [sorted (sort array (if\
    \ (odd? sum) < >))])\n           sorted)]))\n", "  (if (empty? array)\n      '()\n\
    \      (let ([first (first array)]\n            [last (last array)])\n       \
    \ (if (odd? (+ first last))\n            (sort array <)\n            (sort array\
    \ >)))))\n", "  (if (empty? array)\n      '()\n      (let ([first (first array)]\n\
    \            [last (last array)])\n        (if (odd? (+ first last))\n       \
    \     (sort array <)\n            (sort array >)))))\n", "  (if (empty? array)\n\
    \      '()\n      (let ([first (first array)]\n            [last (last array)])\n\
    \        (if (odd? (+ first last))\n            (sort array <)\n            (sort\
    \ array >)))))\n", "  (if (empty? array)\n      '()\n      (let ([first (first\
    \ array)]\n            [last (last array)])\n        (if (odd? (+ first last))\n\
    \            (sort array <)\n            (sort array >)))))\n", "  (if (empty?\
    \ array)\n      '()\n      (if (even? (+ (first array) (last array)))\n      \
    \    (sort array >)\n          (sort array <))))\n", "  (define (sort-array-helper\
    \ array)\n    (cond [(empty? array) empty]\n          [(empty? (rest array)) array]\n\
    \          [(odd? (+ (first array) (last array)))\n           (sort array <)]\n\
    \          [else\n           (sort array >)]))\n  (sort-array-helper array))\n",
  "  (if (empty? array)\n      '()\n      (let* ([first (first array)]\n         \
    \    [last (last array)]\n             [sum (+ first last)]\n             [sorted\
    \ (sort array <)])\n        (if (odd? sum)\n            sorted\n            (reverse\
    \ sorted)))))\n", "  (if (empty? array)\n      '()\n      (if (empty? (rest array))\n\
    \          array\n          (if (odd? (+ (first array) (last array)))\n      \
    \        (sort array <)\n              (sort array >)))))\n", "  (define (odd?\
    \ n) (= (remainder n 2) 1))\n  (define (sum-first-last array)\n    (if (empty?\
    \ array)\n        0\n        (+ (first array) (last array))))\n  (define (sort-ascending\
    \ array)\n    (sort array <))\n  (define (sort-descending array)\n    (sort array\
    \ >))\n  (if (odd? (sum-first-last array))\n      (sort-ascending array)\n   \
    \   (sort-descending array)))\n"]
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
