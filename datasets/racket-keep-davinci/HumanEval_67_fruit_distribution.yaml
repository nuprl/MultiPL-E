name: HumanEval_67_fruit_distribution
language: racket
prompt: "#lang racket\n\n;; In this task, you will be given a string that represents\
  \ a number of apples and oranges \n;; that are distributed in a basket of fruit\
  \ this basket contains \n;; apples, oranges, and mango fruits. Given the string\
  \ that represents the total number of \n;; the oranges and apples and an integer\
  \ that represent the total number of the fruits \n;; in the basket return the number\
  \ of the mango fruits in the basket.\n;; for examble:\n;; fruit_distribution(\"\
  5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n;; fruit_distribution(\"0 apples\
  \ and 1 oranges\",3) -> 3 - 0 - 1 = 2\n;; fruit_distribution(\"2 apples and 3 oranges\"\
  , 100) -> 100 - 2 - 3 = 95\n;; fruit_distribution(\"100 apples and 1 oranges\",120)\
  \ -> 120 - 100 - 1 = 19\n(define (fruit_distribution s n)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate fruit_distribution))\n\
  \    (check-equal? (candidate \"5 apples and 6 oranges\" 19) 8)\n    (check-equal?\
  \ (candidate \"5 apples and 6 oranges\" 21) 10)\n    (check-equal? (candidate \"\
  0 apples and 1 oranges\" 3) 2)\n    (check-equal? (candidate \"1 apples and 0 oranges\"\
  \ 3) 2)\n    (check-equal? (candidate \"2 apples and 3 oranges\" 100) 95)\n    (check-equal?\
  \ (candidate \"2 apples and 3 oranges\" 5) 0)\n    (check-equal? (candidate \"1\
  \ apples and 100 oranges\" 120) 19)\n))\n\n(test-humaneval)"
completions: ["  (define (helper s n)\n    (cond\n      [(empty? s) n]\n      [(char=?\
    \ (first s) #\\a) (helper (rest s) (- n 1))]\n      [(char=? (first s) #\\o) (helper\
    \ (rest s) (- n 1))]\n      [else (helper (rest s) n)]))\n  (helper (string->list\
    \ s) n))\n", "  (define (helper s n)\n    (cond\n      [(empty? s) n]\n      [(char=?\
    \ (first s) #\\a) (helper (rest s) (- n 1))]\n      [(char=? (first s) #\\o) (helper\
    \ (rest s) (- n 1))]\n      [else (helper (rest s) n)]))\n  (helper (string->list\
    \ s) n))\n", "  (define (helper s)\n    (cond\n      [(string=? s \"\") 0]\n \
    \     [(string=? (substring s 0 1) \" \") (helper (substring s 1))]\n      [(string=?\
    \ (substring s 0 1) \"a\") (helper (substring s 1))]\n      [(string=? (substring\
    \ s 0 1) \"o\") (helper (substring s 1))]\n      [(string=? (substring s 0 1)\
    \ \"n\") (helper (substring s 1))]\n      [(string=? (substring s 0 1) \"d\")\
    \ (helper (substring s 1))]\n      [(string=? (substring s 0 1) \"s\") (helper\
    \ (substring s 1))]\n      [(string=? (substring s 0 1) \"r\") (helper (substring\
    \ s 1))]\n      [(string=? (substring s 0 1) \"g\") (helper (substring s 1))]\n\
    \      [(string=? (substring s 0 1) \"e\") (helper (substring s 1))]\n      [(string=?\
    \ (substring s 0 1) \",\") (helper (substring s 1))]\n      [(string=? (substring\
    \ s 0 1) \".\") (helper (substring s 1))]\n      [(string=? (substring s 0 1)\
    \ \"!\") (helper (substring s 1))]\n      [(string=? (substring s 0 1) \"?\")\
    \ (helper (substring s 1))]\n      [(string=? (substring s 0 1) \":\") (helper\
    \ (substring s 1))]\n      [(string=? (substring s 0 1) \";\") (helper (substring\
    \ s 1))]\n      [(string=? (substring s 0 1) \"0\") (helper (substring s 1))]\n\
    \      [(string=? (substring s 0 1) \"1\") (helper (substring s 1))]\n      [(string=?\
    \ (substring s 0 1) \"2\") (helper (substring s 1))]\n      [(string=? (substring\
    \ s 0 1) \"3\") (helper (sub", "  (define (helper s n)\n    (cond\n      [(empty?\
    \ s) n]\n      [(char=? (first s) #\\a) (helper (rest s) (- n 1))]\n      [(char=?\
    \ (first s) #\\o) (helper (rest s) (- n 1))]\n      [else (helper (rest s) n)]))\n\
    \  (helper (string->list s) n))\n", "  (define (get-num s)\n    (string->number\
    \ (regexp-replace #rx\"\\\\D\" s \"\")))\n  (- n (get-num s) (get-num (regexp-replace\
    \ #rx\"\\\\D\" s \"\"))))\n", "  (define (extract-numbers s)\n    (define (extract-numbers-helper\
    \ s acc)\n      (cond\n        [(empty? s) (reverse acc)]\n        [(char-numeric?\
    \ (first s)) (extract-numbers-helper (rest s) (cons (string->number (string (first\
    \ s))) acc))]\n        [else (extract-numbers-helper (rest s) acc)]))\n    (extract-numbers-helper\
    \ s '()))\n  (- n (apply + (extract-numbers s))))\n", "  (let ([s (string-split\
    \ s \" \")])\n    (- n (string->number (car s)) (string->number (cadr s)))))\n",
  "  (define (fruit_distribution-helper s n)\n    (cond\n      [(empty? s) n]\n  \
    \    [(equal? (first s) #\\a) (fruit_distribution-helper (rest s) (- n 1))]\n\
    \      [(equal? (first s) #\\o) (fruit_distribution-helper (rest s) (- n 1))]\n\
    \      [else (fruit_distribution-helper (rest s) n)]))\n  (fruit_distribution-helper\
    \ (string->list s) n))\n", "  (define (fruit_distribution_helper s n)\n    (cond\n\
    \      [(empty? s) n]\n      [(string=? (substring s 0 1) \" \") (fruit_distribution_helper\
    \ (substring s 1 (string-length s)) n)]\n      [(string=? (substring s 0 1) \"\
    a\") (fruit_distribution_helper (substring s (string-length \"apples\") (string-length\
    \ s)) (- n (string->number (substring s 0 (string-length \"apples\")))))]\n  \
    \    [(string=? (substring s 0 1) \"o\") (fruit_distribution_helper (substring\
    \ s (string-length \"oranges\") (string-length s)) (- n (string->number (substring\
    \ s 0 (string-length \"oranges\")))))]\n      [else (fruit_distribution_helper\
    \ (substring s 1 (string-length s)) n)]))\n  (fruit_distribution_helper s n))\n",
  "  (define (helper s n)\n    (cond\n      [(empty? s) n]\n      [(char=? (first\
    \ s) #\\a) (helper (rest s) (- n 1))]\n      [(char=? (first s) #\\o) (helper\
    \ (rest s) (- n 1))]\n      [else (helper (rest s) n)]))\n  (helper (string->list\
    \ s) n))\n", "  (define (fruit_distribution-helper s n)\n    (cond\n      [(empty?\
    \ s) n]\n      [(equal? (first s) #\\a) (fruit_distribution-helper (rest s) (-\
    \ n 1))]\n      [(equal? (first s) #\\o) (fruit_distribution-helper (rest s) (-\
    \ n 1))]\n      [else (fruit_distribution-helper (rest s) n)]))\n  (fruit_distribution-helper\
    \ (string->list s) n))\n", "  (define (helper s n)\n    (cond\n      [(empty?\
    \ s) n]\n      [(string=? (first s) \" \") (helper (rest s) n)]\n      [(string=?\
    \ (first s) \"a\") (helper (rest s) (- n 1))]\n      [(string=? (first s) \"o\"\
    ) (helper (rest s) (- n 1))]\n      [else (helper (rest s) n)]))\n  (helper (string->list\
    \ s) n))\n", "  (define (fruit_distribution_helper s n)\n    (cond\n      [(string=?\
    \ s \"\") n]\n      [(string=? (substring s 0 1) \" \") (fruit_distribution_helper\
    \ (substring s 1 (string-length s)) n)]\n      [(string=? (substring s 0 1) \"\
    a\") (fruit_distribution_helper (substring s (string-length \"apples\") (string-length\
    \ s)) (- n (string->number (substring s 0 (string-index s #\\a)))))]\n      [(string=?\
    \ (substring s 0 1) \"o\") (fruit_distribution_helper (substring s (string-length\
    \ \"oranges\") (string-length s)) (- n (string->number (substring s 0 (string-index\
    \ s #\\o)))))]\n      [else (fruit_distribution_helper (substring s 1 (string-length\
    \ s)) n)]))\n  (fruit_distribution_helper s n))\n", "  (define (helper s n)\n\
    \    (if (string=? s \"\")\n        n\n        (if (string=? (substring s 0 1)\
    \ \" \")\n            (helper (substring s 1 (string-length s)) n)\n         \
    \   (if (string=? (substring s 0 6) \"apples\")\n                (helper (substring\
    \ s 6 (string-length s)) (- n (string->number (substring s 0 (string-index s #\\\
    space)))))\n                (if (string=? (substring s 0 7) \"oranges\")\n   \
    \                 (helper (substring s 7 (string-length s)) (- n (string->number\
    \ (substring s 0 (string-index s #\\space)))))\n                    (helper (substring\
    \ s 1 (string-length s)) n))))))\n  (helper s n))\n", "  (define (helper s n)\n\
    \    (cond\n      [(string=? s \"\") n]\n      [(string=? (substring s 0 1) \"\
    \ \") (helper (substring s 1 (string-length s)) n)]\n      [(string=? (substring\
    \ s 0 1) \"a\") (helper (substring s (string-length \"apples\") (string-length\
    \ s)) (- n (string->number (substring s 0 (string-length \"apples\"))))) ]\n \
    \     [(string=? (substring s 0 1) \"o\") (helper (substring s (string-length\
    \ \"oranges\") (string-length s)) (- n (string->number (substring s 0 (string-length\
    \ \"oranges\"))))) ]\n      [else (helper (substring s 1 (string-length s)) n)]))\n\
    \  (helper s n))\n", "  (define (fruit_distribution_helper s n)\n    (cond\n \
    \     [(empty? s) n]\n      [(equal? (first s) #\\a) (fruit_distribution_helper\
    \ (rest s) (- n 1))]\n      [(equal? (first s) #\\o) (fruit_distribution_helper\
    \ (rest s) (- n 1))]\n      [else (fruit_distribution_helper (rest s) n)]))\n\
    \  (fruit_distribution_helper (string->list s) n))\n", "  (define (helper s)\n\
    \    (cond\n      [(string=? s \"\") 0]\n      [(string=? (substring s 0 1) \"\
    \ \") (helper (substring s 1))]\n      [(string=? (substring s 0 1) \"a\") (helper\
    \ (substring s 1))]\n      [(string=? (substring s 0 1) \"o\") (helper (substring\
    \ s 1))]\n      [(string=? (substring s 0 1) \"n\") (helper (substring s 1))]\n\
    \      [(string=? (substring s 0 1) \"d\") (helper (substring s 1))]\n      [(string=?\
    \ (substring s 0 1) \"r\") (helper (substring s 1))]\n      [(string=? (substring\
    \ s 0 1) \"s\") (helper (substring s 1))]\n      [(string=? (substring s 0 1)\
    \ \"e\") (helper (substring s 1))]\n      [(string=? (substring s 0 1) \"l\")\
    \ (helper (substring s 1))]\n      [(string=? (substring s 0 1) \"p\") (helper\
    \ (substring s 1))]\n      [(string=? (substring s 0 1) \"a\") (helper (substring\
    \ s 1))]\n      [(string=? (substring s 0 1) \"n\") (helper (substring s 1))]\n\
    \      [(string=? (substring s 0 1) \"d\") (helper (substring s 1))]\n      [(string=?\
    \ (substring s 0 1) \" \") (helper (substring s 1))]\n      [(string=? (substring\
    \ s 0 1) \"0\") (helper (substring s 1))]\n      [(string=? (substring s 0 1)\
    \ \"1\") (helper (substring s 1))]\n      [(string=? (substring s 0 1) \"2\")\
    \ (helper (substring s 1))]\n      [(string=? (substring s 0 1) \"3\") (helper\
    \ (substring s 1))]\n      [(string=? (substring s 0 1) \"4\") (helper (", " \
    \ (define (helper s n)\n    (cond ((string=? s \"\") n)\n          ((string=?\
    \ (substring s 0 1) \" \") (helper (substring s 1) n))\n          ((string=? (substring\
    \ s 0 1) \"a\") (helper (substring s 5) n))\n          ((string=? (substring s\
    \ 0 1) \"o\") (helper (substring s 7) n))\n          (else (helper (substring\
    \ s 1) (- n (string->number (substring s 0 1)))))))\n  (helper s n))\n", "  (define\
    \ (helper s n)\n    (cond\n      [(empty? s) n]\n      [(char=? (first s) #\\\
    a) (helper (rest s) (- n 1))]\n      [(char=? (first s) #\\o) (helper (rest s)\
    \ (- n 1))]\n      [else (helper (rest s) n)]))\n  (helper (string->list s) n))\n",
  "  (define (helper s n)\n    (cond\n      [(empty? s) n]\n      [(char=? (first\
    \ s) #\\a) (helper (rest s) (- n 1))]\n      [(char=? (first s) #\\o) (helper\
    \ (rest s) (- n 1))]\n      [else (helper (rest s) n)]))\n  (helper (string->list\
    \ s) n))\n", "  (define (helper s n)\n    (if (string=? s \"\")\n        n\n \
    \       (if (string=? (substring s 0 1) \" \")\n            (helper (substring\
    \ s 1 (string-length s)) n)\n            (if (string=? (substring s 0 1) \"a\"\
    )\n                (helper (substring s (string-length \"apples\") (string-length\
    \ s)) (- n (string->number (substring s 0 (string-index s #\\a)))))\n        \
    \        (if (string=? (substring s 0 1) \"o\")\n                    (helper (substring\
    \ s (string-length \"oranges\") (string-length s)) (- n (string->number (substring\
    \ s 0 (string-index s #\\o)))))\n                    (helper (substring s 1 (string-length\
    \ s)) n)))))\n  (helper s n))\n", "  (define (fruit_distribution-helper s n)\n\
    \    (cond\n      [(empty? s) n]\n      [(equal? (first s) #\\a) (fruit_distribution-helper\
    \ (rest s) (- n 1))]\n      [(equal? (first s) #\\o) (fruit_distribution-helper\
    \ (rest s) (- n 1))]\n      [else (fruit_distribution-helper (rest s) n)]))\n\
    \  (fruit_distribution-helper (string->list s) n))\n", "  (define (helper s n)\n\
    \    (cond\n      [(empty? s) n]\n      [(equal? (first s) #\\a) (helper (rest\
    \ s) (- n 1))]\n      [(equal? (first s) #\\o) (helper (rest s) (- n 1))]\n  \
    \    [else (helper (rest s) n)]))\n  (helper (string->list s) n))\n", "  (define\
    \ (helper s)\n    (cond\n      [(empty? s) 0]\n      [(char=? (first s) #\\a)\
    \ (+ (helper (rest s)) 1)]\n      [(char=? (first s) #\\o) (+ (helper (rest s))\
    \ 1)]\n      [else (helper (rest s))]))\n  (- n (helper s)))\n", "  (let ([a (string-index\
    \ s \"apples\")]\n        [o (string-index s \"oranges\")])\n    (- n (string->number\
    \ (substring s 0 a))\n       (string->number (substring s (+ a 7) o)))))\n", " \
    \ (let ([a (string-index s \"apples\")]\n        [o (string-index s \"oranges\"\
    )])\n    (- n (string->number (substring s 0 a))\n       (string->number (substring\
    \ s (+ o 8) (string-length s))))))\n", "  (define (fruit_distribution-helper s\
    \ n)\n    (cond\n      [(empty? s) n]\n      [(equal? (first s) #\\ ) (fruit_distribution-helper\
    \ (rest s) n)]\n      [(equal? (first s) #\\a) (fruit_distribution-helper (rest\
    \ s) (- n 1))]\n      [(equal? (first s) #\\o) (fruit_distribution-helper (rest\
    \ s) (- n 1))]\n      [else (fruit_distribution-helper (rest s) n)]))\n  (fruit_distribution-helper\
    \ (string->list s) n))\n", "  (define (helper s n)\n    (cond\n      [(empty?\
    \ s) n]\n      [(char=? (first s) #\\ ) (helper (rest s) n)]\n      [(char=? (first\
    \ s) #\\a) (helper (rest s) (- n (string->number (substring s 0 (string-index\
    \ s #\\ )))))]\n      [(char=? (first s) #\\o) (helper (rest s) (- n (string->number\
    \ (substring s 0 (string-index s #\\ )))))]\n      [else (helper (rest s) n)]))\n\
    \  (helper s n))\n", "  (define (helper s)\n    (cond ((string=? s \"\") 0)\n\
    \          ((string=? (substring s 0 1) \" \") (helper (substring s 1)))\n   \
    \       ((string=? (substring s 0 1) \"a\") (helper (substring s 5)))\n      \
    \    ((string=? (substring s 0 1) \"o\") (helper (substring s 7)))\n         \
    \ (else (string->number (substring s 0 1)))))\n  (- n (helper s)))\n", "  (define\
    \ (helper s n)\n    (cond\n      [(empty? s) n]\n      [(char=? (first s) #\\\
    a) (helper (rest s) (- n 1))]\n      [(char=? (first s) #\\o) (helper (rest s)\
    \ (- n 1))]\n      [else (helper (rest s) n)]))\n  (helper (string->list s) n))\n",
  "  (define (fruit_distribution-helper s n)\n    (cond\n      [(empty? s) n]\n  \
    \    [(char=? (first s) #\\a) (fruit_distribution-helper (rest s) (- n 1))]\n\
    \      [(char=? (first s) #\\o) (fruit_distribution-helper (rest s) (- n 1))]\n\
    \      [else (fruit_distribution-helper (rest s) n)]))\n  (fruit_distribution-helper\
    \ (string->list s) n))\n", "  (cond\n    [(string=? s \"\") n]\n    [(string=?\
    \ s \" \") n]\n    [(string=? s \"  \") n]\n    [(string=? s \"   \") n]\n   \
    \ [(string=? s \"    \") n]\n    [(string=? s \"     \") n]\n    [(string=? s\
    \ \"      \") n]\n    [(string=? s \"       \") n]\n    [(string=? s \"      \
    \  \") n]\n    [(string=? s \"         \") n]\n    [(string=? s \"          \"\
    ) n]\n    [(string=? s \"           \") n]\n    [(string=? s \"            \"\
    ) n]\n    [(string=? s \"             \") n]\n    [(string=? s \"            \
    \  \") n]\n    [(string=? s \"               \") n]\n    [(string=? s \"     \
    \           \") n]\n    [(string=? s \"                 \") n]\n    [(string=?\
    \ s \"                  \") n]\n    [(string=? s \"                   \") n]\n\
    \    [(string=? s \"                    \") n]\n    [(string=? s \"          \
    \           \") n]\n    [(string=? s \"                      \") n]\n    [(string=?\
    \ s \"                       \") n]\n    [(string=? s \"                     \
    \   \") n]\n    [(string=? s \"                         \") n]\n    [(string=?\
    \ s \"                          \") n]\n    [(string=? s \"                  \
    \         \") n]\n    [(string=? s \"                            \") n]\n    [(string=?\
    \ s \"                             \") n]\n    [(string=? s \"               \
    \               \") n]\n    [(string=? s \"                               \")\
    \ n]\n    [(string=? s \"                                \") n]\n    [(string=?\
    \ s \"                                 \") n]\n    [(string=? s \"           \
    \                       \") n]\n    [(string=? s \"                          \
    \         \") n]\n    [(string=? s \"                                    \") n]\n\
    \    [(string=? s \"                                     \") n]\n    [(string=",
  "  (define (fruit_distribution-helper s n)\n    (cond\n      [(string=? s \"\")\
    \ n]\n      [(string=? (substring s 0 1) \" \") (fruit_distribution-helper (substring\
    \ s 1) n)]\n      [(string=? (substring s 0 1) \"a\") (fruit_distribution-helper\
    \ (substring s 6) (- n (string->number (substring s 1 5))))]\n      [(string=?\
    \ (substring s 0 1) \"o\") (fruit_distribution-helper (substring s 8) (- n (string->number\
    \ (substring s 1 7))))]))\n  (fruit_distribution-helper s n))\n", "  (define (helper\
    \ s n)\n    (cond\n      [(empty? s) n]\n      [(string=? (first s) \" \") (helper\
    \ (rest s) n)]\n      [(string=? (first s) \"a\") (helper (rest s) (- n (string->number\
    \ (string-append (string (first s)) (string (first (rest s)))))))]\n      [(string=?\
    \ (first s) \"o\") (helper (rest s) (- n (string->number (string-append (string\
    \ (first s)) (string (first (rest s)))))))]\n      [else (helper (rest s) n)]))\n\
    \  (helper (string->list s) n))\n", "  (define (helper s)\n    (cond\n      [(empty?\
    \ s) 0]\n      [(equal? (first s) #\\a) (+ (helper (rest s)) 1)]\n      [(equal?\
    \ (first s) #\\o) (+ (helper (rest s)) 1)]\n      [else (helper (rest s))]))\n\
    \  (- n (helper (string->list s))))\n", "  (define (helper s n)\n    (cond\n \
    \     [(empty? s) n]\n      [(equal? (first s) #\\a) (helper (rest s) (- n 1))]\n\
    \      [(equal? (first s) #\\o) (helper (rest s) (- n 1))]\n      [else (helper\
    \ (rest s) n)]))\n  (helper (string->list s) n))\n", "  (define (helper s)\n \
    \   (cond\n      [(empty? s) 0]\n      [(char=? (first s) #\\a) (string->number\
    \ (substring s 0 (string-index s #\\a)))]\n      [(char=? (first s) #\\o) (string->number\
    \ (substring s 0 (string-index s #\\o)))]\n      [else (helper (rest s))]))\n\
    \  (- n (helper s) (helper (substring s (string-index s #\\a) (string-length s)))))\n",
  "  (define (fruit_distribution-helper lst n)\n    (cond\n      [(empty? lst) n]\n\
    \      [(equal? (first lst) \"apples\") (fruit_distribution-helper (rest lst)\
    \ (- n (string->number (second lst))))]\n      [(equal? (first lst) \"oranges\"\
    ) (fruit_distribution-helper (rest lst) (- n (string->number (second lst))))]\n\
    \      [else (fruit_distribution-helper (rest lst) n)]))\n  (fruit_distribution-helper\
    \ (string-split s \" \") n))\n", "  (define (helper s)\n    (cond\n      [(empty?\
    \ s) 0]\n      [(char=? (first s) #\\a) (add1 (helper (rest s)))]\n      [(char=?\
    \ (first s) #\\o) (add1 (helper (rest s)))]\n      [else (helper (rest s))]))\n\
    \  (- n (helper s)))\n", "  (define (fruit_distribution-helper s n)\n    (cond\n\
    \      [(empty? s) n]\n      [(char=? (first s) #\\a) (fruit_distribution-helper\
    \ (rest s) (- n 1))]\n      [(char=? (first s) #\\o) (fruit_distribution-helper\
    \ (rest s) (- n 1))]\n      [else (fruit_distribution-helper (rest s) n)]))\n\
    \  (fruit_distribution-helper (string->list s) n))\n", "  (define (helper s)\n\
    \    (cond\n      [(empty? s) 0]\n      [(char=? (first s) #\\a) (+ 1 (helper\
    \ (rest s)))]\n      [(char=? (first s) #\\o) (+ 1 (helper (rest s)))]\n     \
    \ [else (helper (rest s))]))\n  (- n (helper s)))\n", "  (define (fruit-distribution-helper\
    \ s n)\n    (cond ((= n 0) 0)\n          ((string-contains? s \"apples\")\n  \
    \         (- n (string->number (substring s 0 (string-index s \" \")))\n     \
    \         (string->number (substring s (+ (string-index s \" \")\n           \
    \                                   (string-index (substring s (string-index s\
    \ \" \")) \" \"))\n                                              (string-length\
    \ s)))))\n          ((string-contains? s \"oranges\")\n           (- n (string->number\
    \ (substring s 0 (string-index s \" \")))\n              (string->number (substring\
    \ s (+ (string-index s \" \")\n                                              (string-index\
    \ (substring s (string-index s \" \")) \" \"))\n                             \
    \                 (string-length s)))))\n          (else (- n (string->number\
    \ (substring s 0 (string-index s \" \")))\n                    (string->number\
    \ (substring s (+ (string-index s \" \")\n                                   \
    \                 (string-index (substring s (string-index s \" \")) \" \"))\n\
    \                                                    (string-length s)))))))\n\
    \  (fruit-distribution-helper s n))\n", "  (define (helper s)\n    (cond\n   \
    \   [(empty? s) 0]\n      [(char=? (first s) #\\a) (string->number (substring\
    \ s 0 (string-index s #\\s)))\n       (helper (substring s (string-index s #\\\
    s) (string-length s)))]\n      [(char=? (first s) #\\o) (string->number (substring\
    \ s 0 (string-index s #\\s)))\n       (helper (substring s (string-index s #\\\
    s) (string-length s)))]\n      [else (helper (rest s))]))\n  (- n (helper s)))\n",
  "  (let ([apples (string-&gt;number (regexp-match #rx\"^[0-9]+\" s))]\n        [oranges\
    \ (string-&gt;number (regexp-match #rx\"and [0-9]+\" s))])\n    (- n apples oranges)))\n\
    </code>\n", "  (define (helper s n)\n    (cond\n      [(empty? s) n]\n      [(char=?\
    \ (first s) #\\ ) (helper (rest s) n)]\n      [(char=? (first s) #\\a) (helper\
    \ (rest s) (- n (string->number (string-append (string (first s)) (string (second\
    \ s)) (string (third s)) (string (fourth s)) (string (fifth s))))))]\n      [(char=?\
    \ (first s) #\\o) (helper (rest s) (- n (string->number (string-append (string\
    \ (first s)) (string (second s)) (string (third s)) (string (fourth s)) (string\
    \ (fifth s)) (string (sixth s))))))]\n      [else (helper (rest s) n)]))\n  (helper\
    \ s n))\n", "  (define (helper s n)\n    (cond\n      [(string=? s \"\") n]\n\
    \      [(string=? (substring s 0 1) \" \") (helper (substring s 1) n)]\n     \
    \ [(string=? (substring s 0 1) \"a\") (helper (substring s 6) n)]\n      [(string=?\
    \ (substring s 0 1) \"o\") (helper (substring s 7) n)]\n      [else (helper (substring\
    \ s 1) (- n (string->number (substring s 0 1))))]))\n  (helper s n))\n", "  (define\
    \ (fruit-distribution-helper s n)\n    (cond ((equal? s \"\") n)\n          ((equal?\
    \ (substring s 0 1) \" \") (fruit-distribution-helper (substring s 1) n))\n  \
    \        ((equal? (substring s 0 1) \"a\") (fruit-distribution-helper (substring\
    \ s 1) (- n 1)))\n          ((equal? (substring s 0 1) \"o\") (fruit-distribution-helper\
    \ (substring s 1) (- n 1)))\n          (else (fruit-distribution-helper (substring\
    \ s 1) n))))\n  (fruit-distribution-helper s n))\n", "  (define (helper s n)\n\
    \    (cond\n      [(empty? s) n]\n      [(char=? (first s) #\\a) (helper (rest\
    \ s) (- n 1))]\n      [(char=? (first s) #\\o) (helper (rest s) (- n 1))]\n  \
    \    [else (helper (rest s) n)]))\n  (helper (string->list s) n))\n", "  (define\
    \ (fruit_distribution-helper s n)\n    (cond\n      [(empty? s) n]\n      [(string=?\
    \ (first s) #\\a) (fruit_distribution-helper (rest s) (- n 1))]\n      [(string=?\
    \ (first s) #\\o) (fruit_distribution-helper (rest s) (- n 1))]\n      [else (fruit_distribution-helper\
    \ (rest s) n)]))\n  (fruit_distribution-helper (string->list s) n))\n", "  (define\
    \ (fruit_distribution-helper s n)\n    (cond\n      [(empty? s) n]\n      [(char=?\
    \ (first s) #\\ ) (fruit_distribution-helper (rest s) n)]\n      [(char=? (first\
    \ s) #\\a) (fruit_distribution-helper (rest s) (- n (string->number (substring\
    \ s 0 (position #\\  s)))))]\n      [(char=? (first s) #\\o) (fruit_distribution-helper\
    \ (rest s) (- n (string->number (substring s 0 (position #\\  s)))))]\n      [else\
    \ (fruit_distribution-helper (rest s) n)]))\n  (fruit_distribution-helper s n))\n",
  "  (define (fruit_distribution-helper s n)\n    (cond\n      [(empty? s) n]\n  \
    \    [(char=? (first s) #\\a) (fruit_distribution-helper (rest s) (- n 1))]\n\
    \      [(char=? (first s) #\\o) (fruit_distribution-helper (rest s) (- n 1))]\n\
    \      [else (fruit_distribution-helper (rest s) n)]))\n  (fruit_distribution-helper\
    \ (string->list s) n))\n", "  (define (helper s n)\n    (cond\n      [(string=?\
    \ s \"\") n]\n      [(string=? (substring s 0 1) \" \") (helper (substring s 1\
    \ (string-length s)) n)]\n      [(string=? (substring s 0 1) \"a\") (helper (substring\
    \ s (string-length \"apples\") (string-length s)) (- n (string->number (substring\
    \ s 0 (string-length \"apples\"))))) ]\n      [(string=? (substring s 0 1) \"\
    o\") (helper (substring s (string-length \"oranges\") (string-length s)) (- n\
    \ (string->number (substring s 0 (string-length \"oranges\"))))) ]\n      [else\
    \ (helper (substring s 1 (string-length s)) n)]))\n  (helper s n))\n", "  (define\
    \ (fruit_distribution_helper s n)\n    (cond\n      [(empty? s) n]\n      [(string=?\
    \ (substring s 0 6) \"apples\") (fruit_distribution_helper (substring s 6 (string-length\
    \ s)) (- n (string->number (substring s 0 (string-index s #\\s))))) ]\n      [(string=?\
    \ (substring s 0 7) \"oranges\") (fruit_distribution_helper (substring s 7 (string-length\
    \ s)) (- n (string->number (substring s 0 (string-index s #\\s))))) ]\n      [else\
    \ (fruit_distribution_helper (substring s 1 (string-length s)) n)]))\n  (fruit_distribution_helper\
    \ s n))\n", "  (define (helper s n)\n    (cond\n      [(empty? s) n]\n      [(char=?\
    \ (first s) #\\a) (helper (rest s) (- n 1))]\n      [(char=? (first s) #\\o) (helper\
    \ (rest s) (- n 1))]\n      [else (helper (rest s) n)]))\n  (helper (string->list\
    \ s) n))\n", "  (define (fruit_distribution_helper s n)\n    (cond\n      [(string=?\
    \ s \"\") n]\n      [(string=? (substring s 0 1) \" \") (fruit_distribution_helper\
    \ (substring s 1 (string-length s)) n)]\n      [(string=? (substring s 0 1) \"\
    a\") (fruit_distribution_helper (substring s 6 (string-length s)) (- n (string->number\
    \ (substring s 1 5))))]\n      [(string=? (substring s 0 1) \"o\") (fruit_distribution_helper\
    \ (substring s 7 (string-length s)) (- n (string->number (substring s 1 6))))]\n\
    \      [else (fruit_distribution_helper (substring s 1 (string-length s)) n)]))\n\
    \  (fruit_distribution_helper s n))\n", "  (define (helper s n)\n    (cond\n \
    \     [(empty? s) n]\n      [(char=? (first s) #\\a) (helper (rest s) (- n 1))]\n\
    \      [(char=? (first s) #\\o) (helper (rest s) (- n 1))]\n      [else (helper\
    \ (rest s) n)]))\n  (helper (string->list s) n))\n", "  (define (helper s)\n \
    \   (cond\n      [(empty? s) 0]\n      [(char=? (first s) #\\a) (+ (string->number\
    \ (string-trim (string-take s (string-index s #\\a)))) (helper (string-drop s\
    \ (string-index s #\\a))))]\n      [(char=? (first s) #\\o) (+ (string->number\
    \ (string-trim (string-take s (string-index s #\\o)))) (helper (string-drop s\
    \ (string-index s #\\o))))]\n      [else (helper (rest s))]))\n  (- n (helper\
    \ s)))\n", "  (define (helper s n)\n    (cond\n      [(empty? s) n]\n      [(char=?\
    \ (first s) #\\a) (helper (rest s) (- n 1))]\n      [(char=? (first s) #\\o) (helper\
    \ (rest s) (- n 1))]\n      [else (helper (rest s) n)]))\n  (helper (string->list\
    \ s) n))\n", "  (define (helper s n)\n    (cond\n      [(empty? s) n]\n      [(char=?\
    \ (first s) #\\a) (helper (rest s) (- n 1))]\n      [(char=? (first s) #\\o) (helper\
    \ (rest s) (- n 1))]\n      [else (helper (rest s) n)]))\n  (helper (string->list\
    \ s) n))\n", "  (define (helper s n)\n    (cond\n      [(empty? s) n]\n      [(char=?\
    \ (first s) #\\a) (helper (rest s) (- n 1))]\n      [(char=? (first s) #\\o) (helper\
    \ (rest s) (- n 1))]\n      [else (helper (rest s) n)]))\n  (helper (string->list\
    \ s) n))\n", "  (define (helper s)\n    (cond\n      [(empty? s) 0]\n      [(char=?\
    \ (first s) #\\a) (+ (helper (rest s)) 1)]\n      [(char=? (first s) #\\o) (+\
    \ (helper (rest s)) 1)]\n      [else (helper (rest s))]))\n  (- n (helper s)))\n",
  "  (define (helper s)\n    (cond\n      [(string=? s \"\") 0]\n      [(string=?\
    \ (substring s 0 1) \" \") (helper (substring s 1))]\n      [(string=? (substring\
    \ s 0 1) \"a\") (helper (substring s 1))]\n      [(string=? (substring s 0 1)\
    \ \"o\") (helper (substring s 1))]\n      [(string=? (substring s 0 1) \"n\")\
    \ (helper (substring s 1))]\n      [(string=? (substring s 0 1) \"d\") (helper\
    \ (substring s 1))]\n      [(string=? (substring s 0 1) \"s\") (helper (substring\
    \ s 1))]\n      [(string=? (substring s 0 1) \"r\") (helper (substring s 1))]\n\
    \      [(string=? (substring s 0 1) \"e\") (helper (substring s 1))]\n      [(string=?\
    \ (substring s 0 1) \"a\") (helper (substring s 1))]\n      [(string=? (substring\
    \ s 0 1) \"n\") (helper (substring s 1))]\n      [(string=? (substring s 0 1)\
    \ \"g\") (helper (substring s 1))]\n      [(string=? (substring s 0 1) \"e\")\
    \ (helper (substring s 1))]\n      [(string=? (substring s 0 1) \"s\") (helper\
    \ (substring s 1))]\n      [(string=? (substring s 0 1) \"a\") (helper (substring\
    \ s 1))]\n      [(string=? (substring s 0 1) \"n\") (helper (substring s 1))]\n\
    \      [(string=? (substring s 0 1) \"d\") (helper (substring s 1))]\n      [(string=?\
    \ (substring s 0 1) \" \") (helper (substring s 1))]\n      [(string=? (substring\
    \ s 0 1) \"0\") (helper (substring s 1))]\n      [(string=? (substring s 0 1)\
    \ \"1\") (helper (", "  (define (helper s n)\n    (cond\n      [(string=? s \"\
    \") n]\n      [(string=? (substring s 0 1) \" \") (helper (substring s 1 (string-length\
    \ s)) n)]\n      [(string=? (substring s 0 1) \"a\") (helper (substring s (string-length\
    \ \"apples\") (string-length s)) (- n (string->number (substring s 0 (string-index\
    \ s #\\a)))))]\n      [(string=? (substring s 0 1) \"o\") (helper (substring s\
    \ (string-length \"oranges\") (string-length s)) (- n (string->number (substring\
    \ s 0 (string-index s #\\o)))))]))\n  (helper s n))\n", "  (define (fruit-distribution-helper\
    \ s n)\n    (cond ((= n 0) 0)\n          ((= n 1) 1)\n          ((= n 2) 2)\n\
    \          ((= n 3) 3)\n          ((= n 4) 4)\n          ((= n 5) 5)\n       \
    \   ((= n 6) 6)\n          ((= n 7) 7)\n          ((= n 8) 8)\n          ((= n\
    \ 9) 9)\n          ((= n 10) 10)\n          ((= n 11) 11)\n          ((= n 12)\
    \ 12)\n          ((= n 13) 13)\n          ((= n 14) 14)\n          ((= n 15) 15)\n\
    \          ((= n 16) 16)\n          ((= n 17) 17)\n          ((= n 18) 18)\n \
    \         ((= n 19) 19)\n          ((= n 20) 20)\n          ((= n 21) 21)\n  \
    \        ((= n 22) 22)\n          ((= n 23) 23)\n          ((= n 24) 24)\n   \
    \       ((= n 25) 25)\n          ((= n 26) 26)\n          ((= n 27) 27)\n    \
    \      ((= n 28) 28)\n          ((= n 29) 29)\n          ((= n 30) 30)\n     \
    \     ((= n 31) 31)\n          ((= n 32) 32)\n          ((= n 33) 33)\n      \
    \    ((= n 34) 34)\n          ((= n 35) 35)\n          ((= n 36) 36)\n       \
    \   ((= n 37) 37)\n          ((= n 38) 38)\n          ((= n 39) 39)\n        \
    \  ((= n 40) 40)\n          ((= n 41) 41)\n          ((= n 42) 42)\n         \
    \ ((= n 43) 43)\n          ((= n 44) 44)\n          ((= n 45) 45)\n          ((=\
    \ n 46) 46)\n          ((= n 47) 47)\n          ((= n 48) 48)\n          ((= n\
    \ 49) 49)\n          ((= n 50) 50)\n          ((= n 51) 51)\n          ((= n 52)\
    \ 52)\n          ((= n 53) 53)\n          ((= n 54) 54)", "  (define (helper s)\n\
    \    (cond\n      [(empty? s) 0]\n      [(string=? (first s) \" \") (helper (rest\
    \ s))]\n      [(string=? (first s) \"a\") (helper (rest s))]\n      [(string=?\
    \ (first s) \"n\") (helper (rest s))]\n      [(string=? (first s) \"d\") (helper\
    \ (rest s))]\n      [(string=? (first s) \"o\") (helper (rest s))]\n      [(string=?\
    \ (first s) \"r\") (helper (rest s))]\n      [(string=? (first s) \"a\") (helper\
    \ (rest s))]\n      [(string=? (first s) \"n\") (helper (rest s))]\n      [(string=?\
    \ (first s) \"g\") (helper (rest s))]\n      [(string=? (first s) \"e\") (helper\
    \ (rest s))]\n      [(string=? (first s) \"s\") (helper (rest s))]\n      [else\
    \ (+ (string->number (first s)) (helper (rest s)))]))\n  (- n (helper s)))\n",
  "  (define (helper s n)\n    (cond\n      [(string=? s \"\") n]\n      [(string=?\
    \ (substring s 0 1) \" \") (helper (substring s 1) n)]\n      [(string=? (substring\
    \ s 0 1) \"a\") (helper (substring s 6) n)]\n      [(string=? (substring s 0 1)\
    \ \"o\") (helper (substring s 7) n)]\n      [else (helper (substring s 1) (- n\
    \ (string->number (substring s 0 1))))]))\n  (helper s n))\n", "  (let ([apples\
    \ (string-&gt;number (regexp-match #rx\"\\d+ apples\" s))]\n        [oranges (string-&gt;number\
    \ (regexp-match #rx\"\\d+ oranges\" s))])\n    (- n apples oranges)))\n</code>\n",
  "  (define (fruit_distribution-helper s n)\n    (cond ((string=? s \"\") n)\n  \
    \        ((string=? (substring s 0 6) \"apples\") (fruit_distribution-helper (substring\
    \ s 7 (string-length s)) (- n (string->number (substring s 0 (string-index s #\\\
    space))))))\n          ((string=? (substring s 0 7) \"oranges\") (fruit_distribution-helper\
    \ (substring s 8 (string-length s)) (- n (string->number (substring s 0 (string-index\
    \ s #\\space))))))\n          (else (fruit_distribution-helper (substring s 1\
    \ (string-length s)) n))))\n  (fruit_distribution-helper s n))\n", "  (define\
    \ (fruit_distribution-helper s n)\n    (cond\n      [(empty? s) n]\n      [(string=?\
    \ (first s) #\\a) (fruit_distribution-helper (rest s) (- n 1))]\n      [(string=?\
    \ (first s) #\\o) (fruit_distribution-helper (rest s) (- n 1))]\n      [else (fruit_distribution-helper\
    \ (rest s) n)]))\n  (fruit_distribution-helper (string->list s) n))\n", "  (let\
    \ ([apples (string-&gt;number (regexp-match #rx\"^\\d+\" s))]\n        [oranges\
    \ (string-&gt;number (regexp-match #rx\"\\d+$\" s))])\n    (- n apples oranges)))\n\
    </code>\n", "  (let ([a (string-&gt;number (regexp-match #rx\"^[0-9]+\" s))]\n\
    \        [o (string-&gt;number (regexp-match #rx\"and [0-9]+ oranges\" s))])\n\
    \    (- n a o)))\n", "  (define (helper s n)\n    (cond ((= n 0) 0)\n        \
    \  ((string-contains? s \"apples\") (- n (string->number (substring s 0 (string-index\
    \ s \" \")))))\n          ((string-contains? s \"oranges\") (- n (string->number\
    \ (substring s 0 (string-index s \" \")))))\n          (else (- n (string->number\
    \ (substring s 0 (string-index s \" \")))))))\n  (helper s n))\n", "  (let ([apples\
    \ (string-&gt;number (regexp-match #rx\"\\d+ apples\" s))]\n        [oranges (string-&gt;number\
    \ (regexp-match #rx\"\\d+ oranges\" s))])\n    (- n apples oranges)))\n</code>\n",
  "  (define (helper s n)\n    (cond\n      [(empty? s) n]\n      [(equal? (first\
    \ s) #\\a) (helper (rest s) (- n 1))]\n      [(equal? (first s) #\\o) (helper\
    \ (rest s) (- n 1))]\n      [else (helper (rest s) n)]))\n  (helper (string->list\
    \ s) n))\n", "  (define (fruit_distribution-helper s n)\n    (cond\n      [(empty?\
    \ s) n]\n      [(char=? (first s) #\\a) (fruit_distribution-helper (rest s) (-\
    \ n 1))]\n      [(char=? (first s) #\\o) (fruit_distribution-helper (rest s) (-\
    \ n 1))]\n      [else (fruit_distribution-helper (rest s) n)]))\n  (fruit_distribution-helper\
    \ (string->list s) n))\n", "  (let ([apples (string-&gt;number (regexp-match #rx\"\
    \\d+ apples\" s))]\n        [oranges (string-&gt;number (regexp-match #rx\"\\\
    d+ oranges\" s))])\n    (- n apples oranges)))\n</code>\n", "  (define (helper\
    \ s n)\n    (cond\n      [(empty? s) n]\n      [(char=? (first s) #\\a) (helper\
    \ (rest s) (- n 1))]\n      [(char=? (first s) #\\o) (helper (rest s) (- n 1))]\n\
    \      [else (helper (rest s) n)]))\n  (helper (string->list s) n))\n", "  (let\
    \ ([a (string-index s \"apples\")]\n        [o (string-index s \"oranges\")])\n\
    \    (- n (string->number (substring s 0 a))\n       (string->number (substring\
    \ s (+ a 1) o)))))\n", "  (cond\n    [(string=? s \"\") n]\n    [(string=? (substring\
    \ s 0 1) \" \") (fruit_distribution (substring s 1) n)]\n    [(string=? (substring\
    \ s 0 1) \"a\") (fruit_distribution (substring s (string-index s \" \")) (- n\
    \ (string->number (substring s 0 (string-index s \" \")))))]\n    [(string=? (substring\
    \ s 0 1) \"o\") (fruit_distribution (substring s (string-index s \" \")) (- n\
    \ (string->number (substring s 0 (string-index s \" \")))))]\n    [else (fruit_distribution\
    \ (substring s 1) n)]))\n", "  (define (helper s n)\n    (cond\n      [(empty?\
    \ s) n]\n      [(char=? (first s) #\\a) (helper (rest s) (- n 1))]\n      [(char=?\
    \ (first s) #\\o) (helper (rest s) (- n 1))]\n      [else (helper (rest s) n)]))\n\
    \  (helper (string->list s) n))\n", "  (define (fruit_distribution-helper s n)\n\
    \    (cond\n      [(string=? s \"\") n]\n      [(string=? (substring s 0 1) \"\
    \ \") (fruit_distribution-helper (substring s 1) n)]\n      [(string=? (substring\
    \ s 0 1) \"a\") (fruit_distribution-helper (substring s 5) (- n (string->number\
    \ (substring s 1 4))))]\n      [(string=? (substring s 0 1) \"o\") (fruit_distribution-helper\
    \ (substring s 7) (- n (string->number (substring s 1 6))))]))\n  (fruit_distribution-helper\
    \ s n))\n", "  (define (get_num s)\n    (string->number (regexp-replace #rx\"\\\
    \\D\" s \"\")))\n  (- n (get_num s) (get_num (regexp-replace #rx\"\\\\d+ apples\"\
    \ s \"\"))))\n", "  (define (fruit_distribution_helper s n)\n    (if (string=?\
    \ s \"\")\n        n\n        (if (string=? (substring s 0 1) \" \")\n       \
    \     (fruit_distribution_helper (substring s 1 (string-length s)) n)\n      \
    \      (if (string=? (substring s 0 1) \"a\")\n                (fruit_distribution_helper\
    \ (substring s (string-length \"apples\") (string-length s)) (- n (string->number\
    \ (substring s 0 (string-index s #\\a)))))\n                (if (string=? (substring\
    \ s 0 1) \"o\")\n                    (fruit_distribution_helper (substring s (string-length\
    \ \"oranges\") (string-length s)) (- n (string->number (substring s 0 (string-index\
    \ s #\\o)))))\n                    (fruit_distribution_helper (substring s 1 (string-length\
    \ s)) n))))))\n  (fruit_distribution_helper s n))\n", "  (let ([a (string-&gt;number\
    \ (car (string-split (car (string-split s \"and\")))))])\n    (- n a (string-&gt;number\
    \ (cadr (string-split s \"and\"))))))\n", "  (define (fruit-distribution-helper\
    \ s n)\n    (cond ((equal? s \"\") n)\n          ((equal? (substring s 0 1) \"\
    \ \") (fruit-distribution-helper (substring s 1) n))\n          ((equal? (substring\
    \ s 0 1) \"a\") (fruit-distribution-helper (substring s 6) (- n (string->number\
    \ (substring s 1 5)))))\n          ((equal? (substring s 0 1) \"o\") (fruit-distribution-helper\
    \ (substring s 7) (- n (string->number (substring s 1 6)))))\n          (else\
    \ (fruit-distribution-helper (substring s 1) n))))\n  (fruit-distribution-helper\
    \ s n))\n", "  (define (get-num s)\n    (string->number (regexp-replace #rx\"\\\
    \\D\" s \"\")))\n  (- n (get-num s) (get-num (regexp-replace #rx\"\\\\D\" s \"\
    \"))))\n", "  (define (helper s n)\n    (cond\n      [(empty? s) n]\n      [(char=?\
    \ (first s) #\\a) (helper (rest s) (- n 1))]\n      [(char=? (first s) #\\o) (helper\
    \ (rest s) (- n 1))]\n      [else (helper (rest s) n)]))\n  (helper (string->list\
    \ s) n))\n", "  (define (fruit_distribution-helper s n)\n    (cond\n      [(empty?\
    \ s) n]\n      [(char=? (first s) #\\a) (fruit_distribution-helper (rest s) (-\
    \ n 1))]\n      [(char=? (first s) #\\o) (fruit_distribution-helper (rest s) (-\
    \ n 1))]\n      [else (fruit_distribution-helper (rest s) n)]))\n  (fruit_distribution-helper\
    \ (string->list s) n))\n", "  (define (helper s)\n    (cond\n      [(string=?\
    \ s \"\") 0]\n      [(string=? (substring s 0 1) \" \") (helper (substring s 1))]\n\
    \      [(string=? (substring s 0 1) \"0\") (helper (substring s 1))]\n      [(string=?\
    \ (substring s 0 1) \"1\") (+ 1 (helper (substring s 1)))]\n      [(string=? (substring\
    \ s 0 1) \"2\") (+ 2 (helper (substring s 1)))]\n      [(string=? (substring s\
    \ 0 1) \"3\") (+ 3 (helper (substring s 1)))]\n      [(string=? (substring s 0\
    \ 1) \"4\") (+ 4 (helper (substring s 1)))]\n      [(string=? (substring s 0 1)\
    \ \"5\") (+ 5 (helper (substring s 1)))]\n      [(string=? (substring s 0 1) \"\
    6\") (+ 6 (helper (substring s 1)))]\n      [(string=? (substring s 0 1) \"7\"\
    ) (+ 7 (helper (substring s 1)))]\n      [(string=? (substring s 0 1) \"8\") (+\
    \ 8 (helper (substring s 1)))]\n      [(string=? (substring s 0 1) \"9\") (+ 9\
    \ (helper (substring s 1)))]\n      [else (helper (substring s 1))]))\n  (- n\
    \ (helper s)))\n", "  (define (fruit_distribution_helper s n)\n    (cond\n   \
    \   [(empty? s) n]\n      [(char=? (first s) #\\a) (fruit_distribution_helper\
    \ (rest s) (- n 1))]\n      [(char=? (first s) #\\o) (fruit_distribution_helper\
    \ (rest s) (- n 1))]\n      [else (fruit_distribution_helper (rest s) n)]))\n\
    \  (fruit_distribution_helper (string->list s) n))\n", "  (define (helper s n)\n\
    \    (cond\n      [(empty? s) n]\n      [(char=? (first s) #\\a) (helper (rest\
    \ s) (- n 1))]\n      [(char=? (first s) #\\o) (helper (rest s) (- n 1))]\n  \
    \    [else (helper (rest s) n)]))\n  (helper (string->list s) n))\n", "  (define\
    \ (fruit_distribution_helper s n)\n    (cond\n      [(empty? s) n]\n      [(char=?\
    \ (first s) #\\a) (fruit_distribution_helper (rest s) (- n 1))]\n      [(char=?\
    \ (first s) #\\o) (fruit_distribution_helper (rest s) (- n 1))]\n      [else (fruit_distribution_helper\
    \ (rest s) n)]))\n  (fruit_distribution_helper (string->list s) n))\n", "  (define\
    \ (fruit_distribution-helper s n)\n    (cond [(empty? s) n]\n          [(char=?\
    \ (first s) #\\a) (fruit_distribution-helper (rest s) (- n 1))]\n          [(char=?\
    \ (first s) #\\o) (fruit_distribution-helper (rest s) (- n 1))]\n          [else\
    \ (fruit_distribution-helper (rest s) n)]))\n  (fruit_distribution-helper (string->list\
    \ s) n))\n", "  (define (fruit_distribution_helper s n)\n    (cond\n      [(empty?\
    \ s) n]\n      [(string=? (substring s 0 1) \" \") (fruit_distribution_helper\
    \ (substring s 1 (string-length s)) n)]\n      [(string=? (substring s 0 1) \"\
    a\") (fruit_distribution_helper (substring s 1 (string-length s)) (- n (string->number\
    \ (substring s 1 (string-length s)))))]\n      [(string=? (substring s 0 1) \"\
    o\") (fruit_distribution_helper (substring s 1 (string-length s)) (- n (string->number\
    \ (substring s 1 (string-length s)))))]\n      [else (fruit_distribution_helper\
    \ (substring s 1 (string-length s)) n)]))\n  (fruit_distribution_helper s n))\n",
  "  (define (helper s)\n    (cond\n      [(empty? s) 0]\n      [(char=? (first s)\
    \ #\\a) (string->number (substring s 0 (string-index s #\\a)))]\n      [(char=?\
    \ (first s) #\\o) (string->number (substring s 0 (string-index s #\\o)))]\n  \
    \    [else (helper (rest s))]))\n  (- n (helper s) (helper (substring s (string-index\
    \ s #\\a) (string-length s)))))\n", "  (define (fruit_distribution-helper s n)\n\
    \    (cond ((string=? s \"\") n)\n          ((string=? (substring s 0 1) \" \"\
    ) (fruit_distribution-helper (substring s 1) n))\n          ((string=? (substring\
    \ s 0 1) \"a\") (fruit_distribution-helper (substring s 5) (- n (string->number\
    \ (substring s 1 3)))))\n          ((string=? (substring s 0 1) \"o\") (fruit_distribution-helper\
    \ (substring s 7) (- n (string->number (substring s 1 3)))))\n          (else\
    \ (fruit_distribution-helper (substring s 1) n))))\n  (fruit_distribution-helper\
    \ s n))\n", "  (define (get-num s)\n    (string->number (regexp-replace #rx\"\
    [^0-9]\" s \"\")))\n  (- n (get-num s) (get-num (regexp-replace #rx\"apples\"\
    \ s \"\"))))\n", "  (define (helper s n)\n    (cond\n      [(empty? s) n]\n  \
    \    [(char=? (first s) #\\a) (helper (rest s) (- n 1))]\n      [(char=? (first\
    \ s) #\\o) (helper (rest s) (- n 1))]\n      [else (helper (rest s) n)]))\n  (helper\
    \ (string->list s) n))\n", "  (define (helper s n)\n    (cond\n      [(empty?\
    \ s) n]\n      [(equal? (first s) #\\a) (helper (rest s) (- n 1))]\n      [(equal?\
    \ (first s) #\\o) (helper (rest s) (- n 1))]\n      [else (helper (rest s) n)]))\n\
    \  (helper (string->list s) n))\n", "  (let ([a (string-index s \"apples\")]\n\
    \        [o (string-index s \"oranges\")])\n    (- n (string->number (substring\
    \ s 0 a))\n       (string->number (substring s (+ o 8) (string-length s))))))\n",
  "  (let ([a (string-&gt;number (regexp-match #rx\"^[0-9]+\" s))]\n        [o (string-&gt;number\
    \ (regexp-match #rx\"and [0-9]+ oranges\" s))])\n    (- n a o)))\n</code>\n",
  "  (define (fruit_distribution-helper s n)\n    (cond\n      [(string=? s \"\")\
    \ n]\n      [(string=? (substring s 0 1) \" \") (fruit_distribution-helper (substring\
    \ s 1) n)]\n      [(string=? (substring s 0 1) \"a\") (fruit_distribution-helper\
    \ (substring s 5) (- n (string->number (substring s 1 4))))]\n      [(string=?\
    \ (substring s 0 1) \"o\") (fruit_distribution-helper (substring s 7) (- n (string->number\
    \ (substring s 1 6))))]))\n  (fruit_distribution-helper s n))\n", "  (define (fruit-distribution-helper\
    \ s n)\n    (cond\n      [(string=? s \"\") n]\n      [(string=? (substring s\
    \ 0 1) \" \") (fruit-distribution-helper (substring s 1) n)]\n      [(string=?\
    \ (substring s 0 1) \"a\") (fruit-distribution-helper (substring s 5) n)]\n  \
    \    [(string=? (substring s 0 1) \"o\") (fruit-distribution-helper (substring\
    \ s 7) n)]\n      [(string=? (substring s 0 1) \"0\") (fruit-distribution-helper\
    \ (substring s 1) n)]\n      [(string=? (substring s 0 1) \"1\") (fruit-distribution-helper\
    \ (substring s 1) (- n 1))]\n      [(string=? (substring s 0 1) \"2\") (fruit-distribution-helper\
    \ (substring s 1) (- n 2))]\n      [(string=? (substring s 0 1) \"3\") (fruit-distribution-helper\
    \ (substring s 1) (- n 3))]\n      [(string=? (substring s 0 1) \"4\") (fruit-distribution-helper\
    \ (substring s 1) (- n 4))]\n      [(string=? (substring s 0 1) \"5\") (fruit-distribution-helper\
    \ (substring s 1) (- n 5))]\n      [(string=? (substring s 0 1) \"6\") (fruit-distribution-helper\
    \ (substring s 1) (- n 6))]\n      [(string=? (substring s 0 1) \"7\") (fruit-distribution-helper\
    \ (substring s 1) (- n 7))]\n      [(string=? (substring s 0 1) \"8\") (fruit-distribution-helper\
    \ (substring s 1) (- n 8))]\n      [(string=? (substring s 0 1) \"9\") (fruit-distribution-helper\
    \ (substring s 1) (- n 9))]\n      [else (fruit-distribution-helper (substring\
    \ s 1) n)]))\n  (fruit-distribution-helper s n))\n", "  (define (helper s n)\n\
    \    (cond\n      [(empty? s) n]\n      [(char=? (first s) #\\a) (helper (rest\
    \ s) (- n 1))]\n      [(char=? (first s) #\\o) (helper (rest s) (- n 1))]\n  \
    \    [else (helper (rest s) n)]))\n  (helper (string->list s) n))\n", "  (define\
    \ (helper s)\n    (if (string=? s \"\")\n        0\n        (if (string=? (substring\
    \ s 0 1) \" \")\n            (helper (substring s 1 (string-length s)))\n    \
    \        (if (string=? (substring s 0 1) \"a\")\n                (+ (helper (substring\
    \ s 1 (string-length s))) 1)\n                (if (string=? (substring s 0 1)\
    \ \"o\")\n                    (+ (helper (substring s 1 (string-length s))) 1)\n\
    \                    (helper (substring s 1 (string-length s))))))))\n  (- n (helper\
    \ s)))\n", "  (define (fruit_distribution-helper s n)\n    (if (string=? s \"\"\
    )\n        n\n        (if (string=? (substring s 0 1) \" \")\n            (fruit_distribution-helper\
    \ (substring s 1 (string-length s)) n)\n            (fruit_distribution-helper\
    \ (substring s 1 (string-length s)) (- n (string->number (substring s 0 (string-index\
    \ s #\\space))))))))\n  (fruit_distribution-helper s n))\n", "  (define (count-apples\
    \ s)\n    (string-length (regexp-match #rx\"apples\" s)))\n  (define (count-oranges\
    \ s)\n    (string-length (regexp-match #rx\"oranges\" s)))\n  (- n (count-apples\
    \ s) (count-oranges s)))\n", "  (define (helper s)\n    (cond [(empty? s) 0]\n\
    \          [(char=? (first s) #\\a) (+ (string->number (string-trim (string-take\
    \ s (string-index s #\\a)))) (helper (string-drop s (string-index s #\\a))))]\n\
    \          [(char=? (first s) #\\o) (+ (string->number (string-trim (string-take\
    \ s (string-index s #\\o)))) (helper (string-drop s (string-index s #\\o))))]\n\
    \          [else (helper (rest s))]))\n  (- n (helper s)))\n", "  (define (fruit_distribution-helper\
    \ s n)\n    (cond\n      [(empty? s) n]\n      [(char=? (first s) #\\a) (fruit_distribution-helper\
    \ (rest s) (- n 1))]\n      [(char=? (first s) #\\o) (fruit_distribution-helper\
    \ (rest s) (- n 1))]\n      [else (fruit_distribution-helper (rest s) n)]))\n\
    \  (fruit_distribution-helper (string->list s) n))\n", "  (let ([a (string-&gt;number\
    \ (regexp-match #rx\"^[0-9]+\" s))]\n        [o (string-&gt;number (regexp-match\
    \ #rx\"and [0-9]+ oranges\" s))])\n    (- n a o)))\n</code>\n", "  (define (helper\
    \ s)\n    (cond\n      [(empty? s) 0]\n      [(char=? (first s) #\\0) (helper\
    \ (rest s))]\n      [(char=? (first s) #\\1) (helper (rest s))]\n      [(char=?\
    \ (first s) #\\2) (helper (rest s))]\n      [(char=? (first s) #\\3) (helper (rest\
    \ s))]\n      [(char=? (first s) #\\4) (helper (rest s))]\n      [(char=? (first\
    \ s) #\\5) (helper (rest s))]\n      [(char=? (first s) #\\6) (helper (rest s))]\n\
    \      [(char=? (first s) #\\7) (helper (rest s))]\n      [(char=? (first s) #\\\
    8) (helper (rest s))]\n      [(char=? (first s) #\\9) (helper (rest s))]\n   \
    \   [else (+ (helper (rest s)) 1)]))\n  (- n (helper s)))\n", "  (let ([apples\
    \ (string-&gt;number (regexp-match #rx\"^[0-9]+\" s))]\n        [oranges (string-&gt;number\
    \ (regexp-match #rx\"and [0-9]+\" s))])\n    (- n apples oranges)))\n", "  (let*\
    \ ([s (string-split s \" \")]\n         [a (string->number (list-ref s 0))]\n\
    \         [o (string->number (list-ref s 3))])\n    (- n a o)))\n", "  (define\
    \ (string->number s)\n    (string->number (substring s 0 (string-index s #\\space))))\n\
    \  (- n (string->number s) (string->number (substring s (string-index s #\\and)\
    \ (string-length s)))))\n", "  (define (helper s n)\n    (cond\n      [(empty?\
    \ s) n]\n      [(string=? (substring s 0 1) \" \") (helper (substring s 1 (string-length\
    \ s)) n)]\n      [(string=? (substring s 0 1) \"a\") (helper (substring s (string-length\
    \ \"apples\") (string-length s)) (- n (string->number (substring s 0 (string-index\
    \ s #\\a)))))]\n      [(string=? (substring s 0 1) \"o\") (helper (substring s\
    \ (string-length \"oranges\") (string-length s)) (- n (string->number (substring\
    \ s 0 (string-index s #\\o)))))]\n      [else (helper (substring s 1 (string-length\
    \ s)) n)]))\n  (helper s n))\n", "  (define (fruit_distribution_helper s n)\n\
    \    (cond ((equal? s \"\") n)\n          ((equal? (substring s 0 1) \" \") (fruit_distribution_helper\
    \ (substring s 1 (string-length s)) n))\n          ((equal? (substring s 0 1)\
    \ \"a\") (fruit_distribution_helper (substring s 1 (string-length s)) (- n (string->number\
    \ (substring s 0 (string-index s \" \"))))))\n          ((equal? (substring s\
    \ 0 1) \"o\") (fruit_distribution_helper (substring s 1 (string-length s)) (-\
    \ n (string->number (substring s 0 (string-index s \" \"))))))\n          (else\
    \ (fruit_distribution_helper (substring s 1 (string-length s)) n))))\n  (fruit_distribution_helper\
    \ s n))\n", "  (define (helper s n)\n    (cond\n      [(string=? s \"\") n]\n\
    \      [(string=? (substring s 0 1) \" \") (helper (substring s 1) n)]\n     \
    \ [(string=? (substring s 0 1) \"a\") (helper (substring s 6) n)]\n      [(string=?\
    \ (substring s 0 1) \"o\") (helper (substring s 7) n)]\n      [else (helper (substring\
    \ s 1) (- n (string->number (substring s 0 1))))]))\n  (helper s n))\n", "  (define\
    \ (helper s n)\n    (cond\n      [(empty? s) n]\n      [(equal? (first s) #\\\
    a) (helper (rest s) (- n 1))]\n      [(equal? (first s) #\\o) (helper (rest s)\
    \ (- n 1))]\n      [else (helper (rest s) n)]))\n  (helper (string->list s) n))\n",
  "  (cond\n    [(string=? s \"\") n]\n    [(string=? (substring s 0 1) \" \") (fruit_distribution\
    \ (substring s 1) n)]\n    [(string=? (substring s 0 1) \"a\") (fruit_distribution\
    \ (substring s (string-index s \" \")) n)]\n    [(string=? (substring s 0 1) \"\
    o\") (fruit_distribution (substring s (string-index s \" \")) n)]\n    [(string=?\
    \ (substring s 0 1) \"0\") (fruit_distribution (substring s (string-index s \"\
    \ \")) n)]\n    [(string=? (substring s 0 1) \"1\") (fruit_distribution (substring\
    \ s (string-index s \" \")) n)]\n    [(string=? (substring s 0 1) \"2\") (fruit_distribution\
    \ (substring s (string-index s \" \")) n)]\n    [(string=? (substring s 0 1) \"\
    3\") (fruit_distribution (substring s (string-index s \" \")) n)]\n    [(string=?\
    \ (substring s 0 1) \"4\") (fruit_distribution (substring s (string-index s \"\
    \ \")) n)]\n    [(string=? (substring s 0 1) \"5\") (fruit_distribution (substring\
    \ s (string-index s \" \")) n)]\n    [(string=? (substring s 0 1) \"6\") (fruit_distribution\
    \ (substring s (string-index s \" \")) n)]\n    [(string=? (substring s 0 1) \"\
    7\") (fruit_distribution (substring s (string-index s \" \")) n)]\n    [(string=?\
    \ (substring s 0 1) \"8\") (fruit_distribution (substring s (string-index s \"\
    \ \")) n)]\n    [(string=? (substring s 0 1) \"9\") (fruit_distribution (substring\
    \ s (string-index s \" \")) n)]\n    [else (- n (string->number (substring s 0\
    \ (string-index s \" \"))))]))\n", "  (define (helper s)\n    (cond\n      [(string=?\
    \ s \"\") 0]\n      [(string=? (substring s 0 1) \" \") (helper (substring s 1))]\n\
    \      [(string=? (substring s 0 1) \"a\") (helper (substring s 1))]\n      [(string=?\
    \ (substring s 0 1) \"o\") (helper (substring s 1))]\n      [(string=? (substring\
    \ s 0 1) \"n\") (helper (substring s 1))]\n      [(string=? (substring s 0 1)\
    \ \"d\") (helper (substring s 1))]\n      [(string=? (substring s 0 1) \"s\")\
    \ (helper (substring s 1))]\n      [(string=? (substring s 0 1) \"r\") (helper\
    \ (substring s 1))]\n      [(string=? (substring s 0 1) \"e\") (helper (substring\
    \ s 1))]\n      [(string=? (substring s 0 1) \"g\") (helper (substring s 1))]\n\
    \      [(string=? (substring s 0 1) \"l\") (helper (substring s 1))]\n      [(string=?\
    \ (substring s 0 1) \"p\") (helper (substring s 1))]\n      [(string=? (substring\
    \ s 0 1) \"0\") (helper (substring s 1))]\n      [(string=? (substring s 0 1)\
    \ \"1\") (helper (substring s 1))]\n      [(string=? (substring s 0 1) \"2\")\
    \ (helper (substring s 1))]\n      [(string=? (substring s 0 1) \"3\") (helper\
    \ (substring s 1))]\n      [(string=? (substring s 0 1) \"4\") (helper (substring\
    \ s 1))]\n      [(string=? (substring s 0 1) \"5\") (helper (substring s 1))]\n\
    \      [(string=? (substring s 0 1) \"6\") (helper (substring s 1))]\n      [(string=?\
    \ (substring s 0 1) \"7\") (helper (", "  (let ([a (string-index s \"apples\"\
    )]\n        [o (string-index s \"oranges\")])\n    (- n (string->number (substring\
    \ s 0 a))\n       (string->number (substring s (+ a 7) o)))))\n", "  (let ([apples\
    \ (string-&gt;number (regexp-match #rx\"\\d+ apples\" s))]\n        [oranges (string-&gt;number\
    \ (regexp-match #rx\"\\d+ oranges\" s))])\n    (- n apples oranges)))\n</code>\n",
  "  (define (fruit_distribution_helper s n)\n    (cond [(empty? s) n]\n         \
    \ [(char=? (first s) #\\a) (fruit_distribution_helper (rest s) (- n 1))]\n   \
    \       [(char=? (first s) #\\o) (fruit_distribution_helper (rest s) (- n 1))]\n\
    \          [else (fruit_distribution_helper (rest s) n)]))\n  (fruit_distribution_helper\
    \ (string->list s) n))\n", "  (define (fruit_distribution_helper s n)\n    (cond\n\
    \      [(empty? s) n]\n      [(string=? (first s) #\\a) (fruit_distribution_helper\
    \ (rest s) (- n 1))]\n      [(string=? (first s) #\\o) (fruit_distribution_helper\
    \ (rest s) (- n 1))]\n      [else (fruit_distribution_helper (rest s) n)]))\n\
    \  (fruit_distribution_helper (string->list s) n))\n", "  (define (helper s n)\n\
    \    (cond ((string=? s \"\") n)\n          ((string=? (substring s 0 1) \" \"\
    ) (helper (substring s 1) n))\n          ((string=? (substring s 0 1) \"a\") (helper\
    \ (substring s 1) n))\n          ((string=? (substring s 0 1) \"o\") (helper (substring\
    \ s 1) n))\n          ((string=? (substring s 0 1) \"m\") (helper (substring s\
    \ 1) n))\n          ((string=? (substring s 0 1) \"n\") (helper (substring s 1)\
    \ n))\n          ((string=? (substring s 0 1) \"d\") (helper (substring s 1) n))\n\
    \          ((string=? (substring s 0 1) \"r\") (helper (substring s 1) n))\n \
    \         ((string=? (substring s 0 1) \"s\") (helper (substring s 1) n))\n  \
    \        ((string=? (substring s 0 1) \"0\") (helper (substring s 1) n))\n   \
    \       ((string=? (substring s 0 1) \"1\") (helper (substring s 1) n))\n    \
    \      ((string=? (substring s 0 1) \"2\") (helper (substring s 1) n))\n     \
    \     ((string=? (substring s 0 1) \"3\") (helper (substring s 1) n))\n      \
    \    ((string=? (substring s 0 1) \"4\") (helper (substring s 1) n))\n       \
    \   ((string=? (substring s 0 1) \"5\") (helper (substring s 1) n))\n        \
    \  ((string=? (substring s 0 1) \"6\") (helper (substring s 1) n))\n         \
    \ ((string=? (substring s 0 1) \"7\") (helper (substring s 1) n))\n          ((string=?\
    \ (substring s 0 1) \"8\") (helper (substring s 1) n))\n          ((string=? (substring\
    \ s 0 1) \"9\") (helper (substring s 1) n))\n          (", "  (define (helper\
    \ s)\n    (cond\n      [(empty? s) 0]\n      [(char=? (first s) #\\a) (+ (helper\
    \ (rest s)) 1)]\n      [(char=? (first s) #\\o) (+ (helper (rest s)) 1)]\n   \
    \   [else (helper (rest s))]))\n  (- n (helper s)))\n", "  (define (helper s n)\n\
    \    (cond [(string=? s \"\") n]\n          [(string=? (substring s 0 6) \"apples\"\
    ) (helper (substring s 7 (string-length s)) (- n (string->number (substring s\
    \ 0 (string-index s #\\space)))))]\n          [(string=? (substring s 0 7) \"\
    oranges\") (helper (substring s 8 (string-length s)) (- n (string->number (substring\
    \ s 0 (string-index s #\\space)))))]\n          [else (helper (substring s 1 (string-length\
    \ s)) n)]))\n  (helper s n))\n", "  (define (helper s n)\n    (cond\n      [(empty?\
    \ s) n]\n      [(char=? (first s) #\\a) (helper (rest s) (- n 1))]\n      [(char=?\
    \ (first s) #\\o) (helper (rest s) (- n 1))]\n      [else (helper (rest s) n)]))\n\
    \  (helper (string->list s) n))\n", "  (define (fruit-distribution-helper s n)\n\
    \    (cond\n      [(empty? s) n]\n      [(string=? (substring s 0 6) \"apples\"\
    ) (fruit-distribution-helper (substring s 6 (string-length s)) (- n (string->number\
    \ (substring s 0 (string-index s #\\space))))) ]\n      [(string=? (substring\
    \ s 0 7) \"oranges\") (fruit-distribution-helper (substring s 7 (string-length\
    \ s)) (- n (string->number (substring s 0 (string-index s #\\space))))) ]\n  \
    \    [else (fruit-distribution-helper (substring s 1 (string-length s)) n)]))\n\
    \  (fruit-distribution-helper s n))\n", "  (define (fruit_distribution_helper\
    \ s n)\n    (cond\n      [(empty? s) n]\n      [(char=? (first s) #\\a) (fruit_distribution_helper\
    \ (rest s) (- n 1))]\n      [(char=? (first s) #\\o) (fruit_distribution_helper\
    \ (rest s) (- n 1))]\n      [else (fruit_distribution_helper (rest s) n)]))\n\
    \  (fruit_distribution_helper (string->list s) n))\n", "  (define (fruit_distribution_helper\
    \ s n)\n    (cond [(empty? s) n]\n          [(string=? (first s) #\\a) (fruit_distribution_helper\
    \ (rest s) (- n 1))]\n          [(string=? (first s) #\\o) (fruit_distribution_helper\
    \ (rest s) (- n 1))]\n          [else (fruit_distribution_helper (rest s) n)]))\n\
    \  (fruit_distribution_helper (string->list s) n))\n", "  (define (helper s)\n\
    \    (cond\n      [(string=? s \"\") 0]\n      [(string=? (substring s 0 1) \"\
    \ \") (helper (substring s 1))]\n      [(string=? (substring s 0 1) \"a\") (helper\
    \ (substring s 5))]\n      [(string=? (substring s 0 1) \"o\") (helper (substring\
    \ s 7))]\n      [else (string->number (substring s 0 1))]))\n  (- n (helper s)))\n",
  "  (cond\n    [(and (string=? (substring s 0 1) \"0\") (string=? (substring s (string-length\
    \ s) (string-length s)) \"s\")) (- n (string->number (substring s 0 1)) (string->number\
    \ (substring s (string-length s) (string-length s))))]\n    [(and (string=? (substring\
    \ s 0 1) \"1\") (string=? (substring s (string-length s) (string-length s)) \"\
    s\")) (- n (string->number (substring s 0 1)) (string->number (substring s (string-length\
    \ s) (string-length s))))]\n    [(and (string=? (substring s 0 1) \"2\") (string=?\
    \ (substring s (string-length s) (string-length s)) \"s\")) (- n (string->number\
    \ (substring s 0 1)) (string->number (substring s (string-length s) (string-length\
    \ s))))]\n    [(and (string=? (substring s 0 1) \"3\") (string=? (substring s\
    \ (string-length s) (string-length s)) \"s\")) (- n (string->number (substring\
    \ s 0 1)) (string->number (substring s (string-length s) (string-length s))))]\n\
    \    [(and (string=? (substring s 0 1) \"4\") (string=? (substring s (string-length\
    \ s) (string-length s)) \"s\")) (- n (string->number (substring s 0 1)) (string->number\
    \ (substring s (string-length s) (string-length s))))]\n    [(and (string=? (substring\
    \ s 0 1) \"5\") (string=? (substring s (string-length s) (string-length s)) \"\
    s\")) (- n (string->number (substring s 0 1)) (string->number (substring s (string-length\
    \ s) (string-length s))))]\n    [(and (string=? (substring s 0 1) \"6\") (string=?\
    \ (substring s (string-length s) (string-length s)) \"s\")) (- n (string->number\
    \ (substring s 0 1)) (string->number", "  (define (parse-fruit-string s)\n   \
    \ (define (parse-fruit-string-helper s)\n      (cond ((string=? s \"\") '())\n\
    \            ((string=? s \"and\") '())\n            ((string=? s \"apples\")\
    \ '(apples))\n            ((string=? s \"oranges\") '(oranges))\n            (else\
    \ (cons (string->number s) '()))))\n    (apply append (map parse-fruit-string-helper\
    \ (string-split s #\\space))))\n  (define (count-fruit fruit-list)\n    (cond\
    \ ((null? fruit-list) 0)\n          ((eq? (car fruit-list) 'apples) (count-fruit\
    \ (cdr fruit-list)))\n          ((eq? (car fruit-list) 'oranges) (count-fruit\
    \ (cdr fruit-list)))\n          (else (+ (car fruit-list) (count-fruit (cdr fruit-list))))))\n\
    \  (- n (count-fruit (parse-fruit-string s))))\n", "  (let ([a (string-index s\
    \ \"apples\")]\n        [o (string-index s \"oranges\")])\n    (- n (string->number\
    \ (substring s 0 a))\n       (string->number (substring s (+ o 8) (string-length\
    \ s))))))\n", "  (define (helper s n)\n    (cond\n      [(empty? s) n]\n     \
    \ [(char=? (first s) #\\a) (helper (rest s) (- n 1))]\n      [(char=? (first s)\
    \ #\\o) (helper (rest s) (- n 1))]\n      [else (helper (rest s) n)]))\n  (helper\
    \ (string->list s) n))\n", "  (define (helper s n)\n    (cond\n      [(empty?\
    \ s) n]\n      [(char=? (first s) #\\a) (helper (rest s) (- n 1))]\n      [(char=?\
    \ (first s) #\\o) (helper (rest s) (- n 1))]\n      [else (helper (rest s) n)]))\n\
    \  (helper (string->list s) n))", "  (cond\n    [(string=? s \"\") n]\n    [(string=?\
    \ (substring s 0 1) \" \") (fruit_distribution (substring s 1) n)]\n    [(string=?\
    \ (substring s 0 1) \"a\") (fruit_distribution (substring s 5) (- n (string->number\
    \ (substring s 1 4))))]\n    [(string=? (substring s 0 1) \"o\") (fruit_distribution\
    \ (substring s 7) (- n (string->number (substring s 1 6))))]\n    [else (fruit_distribution\
    \ (substring s 1) n)]))\n", "  (define (fruit_distribution-helper s n)\n    (cond\n\
    \      [(string=? s \"\") n]\n      [(string=? (substring s 0 (string-index s\
    \ #\\space)) \"apples\")\n       (fruit_distribution-helper (substring s (add1\
    \ (string-index s #\\space)) (string-length s)) (subtract n (string->number (substring\
    \ s 0 (string-index s #\\space)))))]\n      [(string=? (substring s 0 (string-index\
    \ s #\\space)) \"oranges\")\n       (fruit_distribution-helper (substring s (add1\
    \ (string-index s #\\space)) (string-length s)) (subtract n (string->number (substring\
    \ s 0 (string-index s #\\space)))))]\n      [else (fruit_distribution-helper (substring\
    \ s (add1 (string-index s #\\space)) (string-length s)) n)]))\n  (fruit_distribution-helper\
    \ s n))\n", "  (define (extract-num s)\n    (string->number (regexp-replace* #rx\"\
    \\\\D\" s \"\")))\n  (- n (extract-num s) (extract-num (regexp-replace* #rx\"\
    apples\" s \"\"))))\n", "  (let ([numbers (string-split (regexp-replace #rx\"\
    apples and oranges\" s \"\") #rx\" \")])\n    (- n (string->number (vector-ref\
    \ numbers 0)) (string->number (vector-ref numbers 1)))))\n", "  (define (helper\
    \ s n)\n    (cond [(string=? s \"\") n]\n          [(string=? (substring s 0 1)\
    \ \" \") (helper (substring s 1 (string-length s)) n)]\n          [(string=? (substring\
    \ s 0 6) \"apples\") (helper (substring s 6 (string-length s)) (- n (string->number\
    \ (substring s 0 (string-index s #\\space))))) ]\n          [(string=? (substring\
    \ s 0 7) \"oranges\") (helper (substring s 7 (string-length s)) (- n (string->number\
    \ (substring s 0 (string-index s #\\space))))) ]\n          [else (helper (substring\
    \ s 1 (string-length s)) n)]))\n  (helper s n))\n", "  (let ([fruits (string-split\
    \ s \" \")])\n    (- n (string->number (vector-ref fruits 1))\n       (string->number\
    \ (vector-ref fruits 3)))))\n", "  (define (helper s)\n    (cond\n      [(string=?\
    \ s \"\") 0]\n      [(string=? (substring s 0 1) \" \") (helper (substring s 1))]\n\
    \      [(string=? (substring s 0 1) \"a\") (helper (substring s 1))]\n      [(string=?\
    \ (substring s 0 1) \"o\") (helper (substring s 1))]\n      [(string=? (substring\
    \ s 0 1) \"n\") (helper (substring s 1))]\n      [(string=? (substring s 0 1)\
    \ \"d\") (helper (substring s 1))]\n      [(string=? (substring s 0 1) \"e\")\
    \ (helper (substring s 1))]\n      [(string=? (substring s 0 1) \"r\") (helper\
    \ (substring s 1))]\n      [(string=? (substring s 0 1) \"s\") (helper (substring\
    \ s 1))]\n      [(string=? (substring s 0 1) \"a\") (helper (substring s 1))]\n\
    \      [(string=? (substring s 0 1) \"n\") (helper (substring s 1))]\n      [(string=?\
    \ (substring s 0 1) \"d\") (helper (substring s 1))]\n      [(string=? (substring\
    \ s 0 1) \" \") (helper (substring s 1))]\n      [(string=? (substring s 0 1)\
    \ \"0\") (helper (substring s 1))]\n      [(string=? (substring s 0 1) \"1\")\
    \ (helper (substring s 1))]\n      [(string=? (substring s 0 1) \"2\") (helper\
    \ (substring s 1))]\n      [(string=? (substring s 0 1) \"3\") (helper (substring\
    \ s 1))]\n      [(string=? (substring s 0 1) \"4\") (helper (substring s 1))]\n\
    \      [(string=? (substring s 0 1) \"5\") (helper (substring s 1))]\n      [(string=?\
    \ (substring s 0 1) \"6\") (helper (", "  (define (helper s n)\n    (cond [(empty?\
    \ s) n]\n          [(string=? (first s) \" \") (helper (rest s) n)]\n        \
    \  [(string=? (first s) \"a\") (helper (rest s) n)]\n          [(string=? (first\
    \ s) \"o\") (helper (rest s) n)]\n          [(string=? (first s) \"n\") (helper\
    \ (rest s) n)]\n          [(string=? (first s) \"d\") (helper (rest s) n)]\n \
    \         [(string=? (first s) \"r\") (helper (rest s) n)]\n          [(string=?\
    \ (first s) \"g\") (helper (rest s) n)]\n          [(string=? (first s) \"e\"\
    ) (helper (rest s) n)]\n          [(string=? (first s) \"s\") (helper (rest s)\
    \ n)]\n          [(string=? (first s) \"l\") (helper (rest s) n)]\n          [(string=?\
    \ (first s) \"0\") (helper (rest s) n)]\n          [(string=? (first s) \"1\"\
    ) (helper (rest s) n)]\n          [(string=? (first s) \"2\") (helper (rest s)\
    \ n)]\n          [(string=? (first s) \"3\") (helper (rest s) n)]\n          [(string=?\
    \ (first s) \"4\") (helper (rest s) n)]\n          [(string=? (first s) \"5\"\
    ) (helper (rest s) n)]\n          [(string=? (first s) \"6\") (helper (rest s)\
    \ n)]\n          [(string=? (first s) \"7\") (helper (rest s) n)]\n          [(string=?\
    \ (first s) \"8\") (helper (rest s) n)]\n          [(string=? (first s) \"9\"\
    ) (helper (rest s) n)]\n          [else (- n (string->number (substring s 0 (string-index\
    \ s \" \"))))]))\n  (helper s n))\n", "  (define (helper s)\n    (cond [(empty?\
    \ s) 0]\n          [(char=? (first s) #\\a) (+ (string->number (string-append\
    \ (string-take s (string-index s #\\a)) (string-take s (string-index s #\\n))))\
    \ (helper (string-drop s (string-index s #\\n))))]\n          [(char=? (first\
    \ s) #\\o) (+ (string->number (string-append (string-take s (string-index s #\\\
    o)) (string-take s (string-index s #\\n)))) (helper (string-drop s (string-index\
    \ s #\\n))))]\n          [else (helper (rest s))]))\n  (- n (helper s)))\n", " \
    \ (define (fruit_distribution_iter s n)\n    (cond ((string=? s \"\") n)\n   \
    \       ((string=? (substring s 0 6) \"apples\") (fruit_distribution_iter (substring\
    \ s 6 (string-length s)) (- n (string->number (substring s 0 (string-index s #\\\
    space))))))\n          ((string=? (substring s 0 7) \"oranges\") (fruit_distribution_iter\
    \ (substring s 7 (string-length s)) (- n (string->number (substring s 0 (string-index\
    \ s #\\space))))))\n          (else (fruit_distribution_iter (substring s 1 (string-length\
    \ s)) n))))\n  (fruit_distribution_iter s n))\n", "  (define (fruit_distribution-helper\
    \ s n)\n    (cond\n      [(empty? s) n]\n      [(char=? (first s) #\\a) (fruit_distribution-helper\
    \ (rest s) (- n 1))]\n      [(char=? (first s) #\\o) (fruit_distribution-helper\
    \ (rest s) (- n 1))]\n      [else (fruit_distribution-helper (rest s) n)]))\n\
    \  (fruit_distribution-helper (string->list s) n))\n", "  (define (helper s)\n\
    \    (cond\n      [(empty? s) 0]\n      [(char=? (first s) #\\a) (+ (helper (rest\
    \ s)) 1)]\n      [(char=? (first s) #\\o) (+ (helper (rest s)) 1)]\n      [else\
    \ (helper (rest s))]))\n  (- n (helper s)))\n", "  (define (extract-numbers s)\n\
    \    (cond\n      [(empty? s) empty]\n      [(char-numeric? (first s)) (cons (string->number\
    \ (string (first s))) (extract-numbers (rest s)))]\n      [else (extract-numbers\
    \ (rest s))]))\n  (- n (apply + (extract-numbers s))))\n", "  (let ([a (string-&gt;number\
    \ (regexp-match #rx\"^\\d+\" s))]\n        [o (string-&gt;number (regexp-match\
    \ #rx\"\\d+$\" s))])\n    (- n a o)))\n", "  (let ((s (string-split s \" \")))\n\
    \    (- n (string->number (list-ref s 0)) (string->number (list-ref s 3)))))\n",
  "  (define (helper s n)\n    (cond\n      [(empty? s) n]\n      [(eq? (first s)\
    \ #\\a) (helper (rest s) (- n 1))]\n      [(eq? (first s) #\\o) (helper (rest\
    \ s) (- n 1))]\n      [else (helper (rest s) n)]))\n  (helper (string->list s)\
    \ n))\n", "  (define (helper s n)\n    (cond\n      [(string=? s \"\") n]\n  \
    \    [(string=? (substring s 0 1) \" \") (helper (substring s 1 (string-length\
    \ s)) n)]\n      [(string=? (substring s 0 1) \"a\") (helper (substring s 1 (string-length\
    \ s)) (- n 1))]\n      [(string=? (substring s 0 1) \"o\") (helper (substring\
    \ s 1 (string-length s)) (- n 1))]\n      [else (helper (substring s 1 (string-length\
    \ s)) n)]))\n  (helper s n))\n", "  (define (fruit-distribution-helper s n)\n\
    \    (cond\n      [(empty? s) n]\n      [(char=? (first s) #\\a) (fruit-distribution-helper\
    \ (rest s) (- n (string->number (string-trim (string-append (string-take s (string-index\
    \ s #\\a)) (string-take (string-drop s (string-index s #\\a)) (string-index (string-drop\
    \ s (string-index s #\\a)) #\\space)))))))]\n      [(char=? (first s) #\\o) (fruit-distribution-helper\
    \ (rest s) (- n (string->number (string-trim (string-append (string-take s (string-index\
    \ s #\\o)) (string-take (string-drop s (string-index s #\\o)) (string-index (string-drop\
    \ s (string-index s #\\o)) #\\space)))))))]\n      [else (fruit-distribution-helper\
    \ (rest s) n)]))\n  (fruit-distribution-helper s n))\n", "  (define (fruit_distribution-helper\
    \ s n)\n    (cond ((string=? s \"\") n)\n          ((string=? (substring s 0 6)\
    \ \"apples\") (fruit_distribution-helper (substring s 6 (string-length s)) (-\
    \ n (string->number (substring s 0 (string-index s #\\space))))))\n          ((string=?\
    \ (substring s 0 7) \"oranges\") (fruit_distribution-helper (substring s 7 (string-length\
    \ s)) (- n (string->number (substring s 0 (string-index s #\\space))))))\n   \
    \       (else (fruit_distribution-helper (substring s 1 (string-length s)) n))))\n\
    \  (fruit_distribution-helper s n))\n", "  (let ([a (string-&gt;number (car (string-split\
    \ (car (string-split s #\\and)) #\\space)))])\n    (- n a (string-&gt;number (car\
    \ (string-split (cadr (string-split s #\\and)) #\\space))))))\n</code>\n", " \
    \ (define (fruit_distribution-helper s n)\n    (cond ((= n 0) 0)\n          ((string-contains?\
    \ s \"apples\")\n           (fruit_distribution-helper (substring s (add1 (string-index\
    \ s \"apples\")) (string-length s)) (- n (string->number (substring s 0 (string-index\
    \ s \" \"))))))\n          ((string-contains? s \"oranges\")\n           (fruit_distribution-helper\
    \ (substring s (add1 (string-index s \"oranges\")) (string-length s)) (- n (string->number\
    \ (substring s 0 (string-index s \" \"))))))\n          (else n)))\n  (fruit_distribution-helper\
    \ s n))\n", "  (define (helper s n)\n    (cond ((empty? s) n)\n          ((string=?\
    \ (substring s 0 6) \"apples\") (helper (substring s 7 (string-length s)) (- n\
    \ (string->number (substring s 0 (string-index s #\\space))))))\n          ((string=?\
    \ (substring s 0 7) \"oranges\") (helper (substring s 8 (string-length s)) (-\
    \ n (string->number (substring s 0 (string-index s #\\space))))))\n          (else\
    \ (helper (substring s 1 (string-length s)) n))))\n  (helper s n))\n", "  (define\
    \ (helper s n)\n    (cond\n      [(empty? s) n]\n      [(char=? (first s) #\\\
    a) (helper (rest s) (- n 1))]\n      [(char=? (first s) #\\o) (helper (rest s)\
    \ (- n 1))]\n      [else (helper (rest s) n)]))\n  (helper (string->list s) n))\n",
  "  (define (fruit_distribution-helper s n)\n    (cond\n      [(empty? s) n]\n  \
    \    [(string=? (first s) #\\a) (fruit_distribution-helper (rest s) (- n 1))]\n\
    \      [(string=? (first s) #\\o) (fruit_distribution-helper (rest s) (- n 1))]\n\
    \      [else (fruit_distribution-helper (rest s) n)]))\n  (fruit_distribution-helper\
    \ (string->list s) n))\n", "  (define (helper s n)\n    (cond\n      [(empty?\
    \ s) n]\n      [(char=? (first s) #\\ ) (helper (rest s) n)]\n      [(char=? (first\
    \ s) #\\a) (helper (rest s) (- n 1))]\n      [(char=? (first s) #\\o) (helper\
    \ (rest s) (- n 1))]\n      [else (helper (rest s) n)]))\n  (helper (string->list\
    \ s) n))\n", "  (define (helper s n)\n    (cond\n      [(empty? s) n]\n      [(char=?\
    \ (first s) #\\a) (helper (rest s) (- n 1))]\n      [(char=? (first s) #\\o) (helper\
    \ (rest s) (- n 1))]\n      [else (helper (rest s) n)]))\n  (helper (string->list\
    \ s) n))\n", "  (define (fruit_distribution-helper s n)\n    (cond\n      [(empty?\
    \ s) n]\n      [(string=? (first s) #\\a) (fruit_distribution-helper (rest s)\
    \ (- n 1))]\n      [(string=? (first s) #\\o) (fruit_distribution-helper (rest\
    \ s) (- n 1))]\n      [else (fruit_distribution-helper (rest s) n)]))\n  (fruit_distribution-helper\
    \ (string->list s) n))\n", "  (define (fruit_distribution-helper s n)\n    (cond\n\
    \      [(empty? s) n]\n      [(string=? (substring s 0 6) \"apples\") (fruit_distribution-helper\
    \ (substring s 7 (string-length s)) (- n (string->number (substring s 0 (string-index\
    \ s #\\a))))) ]\n      [(string=? (substring s 0 7) \"oranges\") (fruit_distribution-helper\
    \ (substring s 8 (string-length s)) (- n (string->number (substring s 0 (string-index\
    \ s #\\o))))) ]\n      [else (fruit_distribution-helper (substring s 1 (string-length\
    \ s)) n)]))\n  (fruit_distribution-helper s n))\n", "  (let ([a (string-&gt;number\
    \ (regexp-match #rx\"^[0-9]+\" s))]\n        [o (string-&gt;number (regexp-match\
    \ #rx\"and [0-9]+ oranges\" s))])\n    (- n a o)))\n", "  (define (helper s)\n\
    \    (cond\n      [(empty? s) 0]\n      [(char=? (first s) #\\0) (helper (rest\
    \ s))]\n      [(char=? (first s) #\\1) (helper (rest s))]\n      [(char=? (first\
    \ s) #\\2) (helper (rest s))]\n      [(char=? (first s) #\\3) (helper (rest s))]\n\
    \      [(char=? (first s) #\\4) (helper (rest s))]\n      [(char=? (first s) #\\\
    5) (helper (rest s))]\n      [(char=? (first s) #\\6) (helper (rest s))]\n   \
    \   [(char=? (first s) #\\7) (helper (rest s))]\n      [(char=? (first s) #\\\
    8) (helper (rest s))]\n      [(char=? (first s) #\\9) (helper (rest s))]\n   \
    \   [else (add1 (helper (rest s)))]))\n  (- n (helper s)))\n", "  (define (count-fruit\
    \ s)\n    (cond\n      [(empty? s) 0]\n      [(char=? (first s) #\\a) (+ 1 (count-fruit\
    \ (rest s)))]\n      [(char=? (first s) #\\o) (+ 1 (count-fruit (rest s)))]\n\
    \      [else (count-fruit (rest s))]))\n  (- n (count-fruit s)))\n", "  (define\
    \ (fruit-distribution-helper s n)\n    (cond\n      [(empty? s) n]\n      [(char=?\
    \ (first s) #\\a) (fruit-distribution-helper (rest s) n)]\n      [(char=? (first\
    \ s) #\\o) (fruit-distribution-helper (rest s) n)]\n      [(char=? (first s) #\\\
    \ ) (fruit-distribution-helper (rest s) n)]\n      [(char=? (first s) #\\n) (fruit-distribution-helper\
    \ (rest s) n)]\n      [(char=? (first s) #\\d) (fruit-distribution-helper (rest\
    \ s) n)]\n      [(char=? (first s) #\\r) (fruit-distribution-helper (rest s) n)]\n\
    \      [(char=? (first s) #\\e) (fruit-distribution-helper (rest s) n)]\n    \
    \  [(char=? (first s) #\\s) (fruit-distribution-helper (rest s) n)]\n      [(char=?\
    \ (first s) #\\a) (fruit-distribution-helper (rest s) n)]\n      [(char=? (first\
    \ s) #\\n) (fruit-distribution-helper (rest s) n)]\n      [(char=? (first s) #\\\
    d) (fruit-distribution-helper (rest s) n)]\n      [(char=? (first s) #\\0) (fruit-distribution-helper\
    \ (rest s) n)]\n      [(char=? (first s) #\\1) (fruit-distribution-helper (rest\
    \ s) n)]\n      [(char=? (first s) #\\2) (fruit-distribution-helper (rest s) n)]\n\
    \      [(char=? (first s) #\\3) (fruit-distribution-helper (rest s) n)]\n    \
    \  [(char=? (first s) #\\4) (fruit-distribution-helper (rest s) n)]\n      [(char=?\
    \ (first s) #\\5) (fruit-distribution-helper (rest s) n)]\n      [(char=? (first\
    \ s", "  (let ([a (string-&gt;number (regexp-match #rx\"^[0-9]+\" s))]\n     \
    \   [o (string-&gt;number (regexp-match #rx\"and [0-9]+ oranges\" s))])\n    (-\
    \ n a o)))\n</code>\n", "  (define (helper s n)\n    (cond\n      [(string=? s\
    \ \"\") n]\n      [(string=? (substring s 0 1) \" \") (helper (substring s 1 (string-length\
    \ s)) n)]\n      [(string=? (substring s 0 1) \"a\") (helper (substring s (string-length\
    \ \"apples\") (string-length s)) (- n (string->number (substring s 0 (string-length\
    \ \"apples\")))))]\n      [(string=? (substring s 0 1) \"o\") (helper (substring\
    \ s (string-length \"oranges\") (string-length s)) (- n (string->number (substring\
    \ s 0 (string-length \"oranges\")))))]\n      [else (helper (substring s 1 (string-length\
    \ s)) n)]))\n  (helper s n))\n", "  (let ([a (string-&gt;number (regexp-match\
    \ #rx\"\\d+\" s))]\n        [o (string-&gt;number (regexp-match #rx\"\\d+\" (regexp-replace\
    \ #rx\"\\d+ apples and \" \"\" s)))])\n    (- n a o)))\n</code>\n", "  (define\
    \ (helper s n)\n    (if (string=? s \"\")\n        n\n        (if (string=? (substring\
    \ s 0 1) \" \")\n            (helper (substring s 1 (string-length s)) n)\n  \
    \          (if (string=? (substring s 0 1) \"a\")\n                (helper (substring\
    \ s (string-length \"apples\") (string-length s)) (- n (string->number (substring\
    \ s 0 (string-index s #\\a)))))\n                (helper (substring s (string-length\
    \ \"oranges\") (string-length s)) (- n (string->number (substring s 0 (string-index\
    \ s #\\o)))))))))\n  (helper s n))\n", "  (define (helper s n)\n    (cond\n  \
    \    [(empty? s) n]\n      [(char=? (first s) #\\a) (helper (rest s) (- n 1))]\n\
    \      [(char=? (first s) #\\o) (helper (rest s) (- n 1))]\n      [else (helper\
    \ (rest s) n)]))\n  (helper (string->list s) n))\n", "  (define (helper s n)\n\
    \    (if (string=? s \"\")\n        n\n        (if (string=? (substring s 0 1)\
    \ \" \")\n            (helper (substring s 1 (string-length s)) n)\n         \
    \   (if (string=? (substring s 0 1) \"a\")\n                (helper (substring\
    \ s (string-length \"apples\") (string-length s)) (- n (string->number (substring\
    \ s 0 (string-index s #\\a)))))\n                (helper (substring s (string-length\
    \ \"oranges\") (string-length s)) (- n (string->number (substring s 0 (string-index\
    \ s #\\o)))))))))\n  (helper s n))\n", "  (define (helper s n)\n    (cond\n  \
    \    [(empty? s) n]\n      [(char=? (first s) #\\a) (helper (rest s) (- n 1))]\n\
    \      [(char=? (first s) #\\o) (helper (rest s) (- n 1))]\n      [else (helper\
    \ (rest s) n)]))\n  (helper (string->list s) n))\n", "  (define (fruit_distribution_helper\
    \ s n)\n    (cond\n      [(empty? s) n]\n      [(char=? (first s) #\\a) (fruit_distribution_helper\
    \ (rest s) (- n 1))]\n      [(char=? (first s) #\\o) (fruit_distribution_helper\
    \ (rest s) (- n 1))]\n      [else (fruit_distribution_helper (rest s) n)]))\n\
    \  (fruit_distribution_helper (string->list s) n))\n", "  (define (fruit_distribution-helper\
    \ s n)\n    (cond ((string=? s \"\") n)\n          ((string=? (substring s 0 6)\
    \ \"apples\") (fruit_distribution-helper (substring s 7 (string-length s)) (-\
    \ n (string->number (substring s 0 (string-index s #\\space))))))\n          ((string=?\
    \ (substring s 0 7) \"oranges\") (fruit_distribution-helper (substring s 8 (string-length\
    \ s)) (- n (string->number (substring s 0 (string-index s #\\space))))))\n   \
    \       (else (fruit_distribution-helper (substring s 1 (string-length s)) n))))\n\
    \  (fruit_distribution-helper s n))\n", "  (define (helper s n)\n    (cond\n \
    \     [(empty? s) n]\n      [(string=? (first s) \" \") (helper (rest s) n)]\n\
    \      [(string=? (first s) \"a\") (helper (rest s) n)]\n      [(string=? (first\
    \ s) \"p\") (helper (rest s) n)]\n      [(string=? (first s) \"l\") (helper (rest\
    \ s) n)]\n      [(string=? (first s) \"e\") (helper (rest s) n)]\n      [(string=?\
    \ (first s) \"s\") (helper (rest s) n)]\n      [(string=? (first s) \"a\") (helper\
    \ (rest s) n)]\n      [(string=? (first s) \"n\") (helper (rest s) n)]\n     \
    \ [(string=? (first s) \"d\") (helper (rest s) n)]\n      [(string=? (first s)\
    \ \"o\") (helper (rest s) n)]\n      [(string=? (first s) \"r\") (helper (rest\
    \ s) n)]\n      [(string=? (first s) \"a\") (helper (rest s) n)]\n      [(string=?\
    \ (first s) \"n\") (helper (rest s) n)]\n      [(string=? (first s) \"g\") (helper\
    \ (rest s) n)]\n      [(string=? (first s) \"e\") (helper (rest s) n)]\n     \
    \ [(string=? (first s) \"s\") (helper (rest s) n)]\n      [(string=? (first s)\
    \ \"a\") (helper (rest s) n)]\n      [(string=? (first s) \"n\") (helper (rest\
    \ s) n)]\n      [(string=? (first s) \"d\") (helper (rest s) n)]\n      [(string=?\
    \ (first s) \"0\") (helper (rest s) n)]\n      [(string=? (first s) \"1\") (helper\
    \ (rest s) n)]\n      [(string=? (first s) \"2\") (helper (rest s) n)]\n     \
    \ [(string=", "  (define (helper s n)\n    (cond\n      [(empty? s) n]\n     \
    \ [(char=? (first s) #\\a) (helper (rest s) (- n 1))]\n      [(char=? (first s)\
    \ #\\o) (helper (rest s) (- n 1))]\n      [else (helper (rest s) n)]))\n  (helper\
    \ (string->list s) n))\n", "  (define (helper s n)\n    (cond\n      [(empty?\
    \ s) n]\n      [(equal? (first s) #\\a) (helper (rest s) (- n 1))]\n      [(equal?\
    \ (first s) #\\o) (helper (rest s) (- n 1))]\n      [else (helper (rest s) n)]))\n\
    \  (helper (string->list s) n))\n", "  (define (get-num str)\n    (string->number\
    \ (regexp-replace #rx\"\\\\D\" str \"\")))\n  (- n (get-num s)))\n", "  (define\
    \ (helper s n)\n    (cond\n      [(string=? s \"\") n]\n      [(string=? (substring\
    \ s 0 1) \" \") (helper (substring s 1) n)]\n      [(string=? (substring s 0 1)\
    \ \"a\") (helper (substring s 6) n)]\n      [(string=? (substring s 0 1) \"o\"\
    ) (helper (substring s 7) n)]\n      [else (helper (substring s 1) (- n (string->number\
    \ (substring s 0 1))))]))\n  (helper s n))\n", "  (define (helper s n)\n    (cond\
    \ ((string=? s \"\") n)\n          ((string=? (substring s 0 1) \" \") (helper\
    \ (substring s 1) n))\n          ((string=? (substring s 0 1) \"a\") (helper (substring\
    \ s 5) n))\n          ((string=? (substring s 0 1) \"o\") (helper (substring s\
    \ 7) n))\n          (else (- n (string->number (substring s 0 (string-index s\
    \ \" \")))))))\n  (helper s n))\n", "  (define (helper s n)\n    (cond\n     \
    \ [(empty? s) n]\n      [(char=? (first s) #\\a) (helper (rest s) (- n 1))]\n\
    \      [(char=? (first s) #\\o) (helper (rest s) (- n 1))]\n      [else (helper\
    \ (rest s) n)]))\n  (helper (string->list s) n))\n", "  (define (helper s n)\n\
    \    (if (string=? s \"\")\n        n\n        (if (string=? (substring s 0 1)\
    \ \" \")\n            (helper (substring s 1 (string-length s)) n)\n         \
    \   (if (string=? (substring s 0 1) \"a\")\n                (helper (substring\
    \ s (string-length \"apples\") (string-length s)) (- n (string->number (substring\
    \ s 0 (string-index s #\\a)))))\n                (helper (substring s (string-length\
    \ \"oranges\") (string-length s)) (- n (string->number (substring s 0 (string-index\
    \ s #\\o)))))))))\n  (helper s n))\n", "  (define (helper s n)\n    (cond\n  \
    \    [(empty? s) n]\n      [(char=? (first s) #\\a) (helper (rest s) (- n 1))]\n\
    \      [(char=? (first s) #\\o) (helper (rest s) (- n 1))]\n      [else (helper\
    \ (rest s) n)]))\n  (helper (string->list s) n))\n", "  (define (helper s n)\n\
    \    (cond\n      [(string=? s \"\") n]\n      [(string=? (substring s 0 1) \"\
    \ \") (helper (substring s 1) n)]\n      [(string=? (substring s 0 1) \"a\") (helper\
    \ (substring s 5) n)]\n      [(string=? (substring s 0 1) \"o\") (helper (substring\
    \ s 7) n)]\n      [else (helper (substring s 1) (- n (string->number (substring\
    \ s 0 1))))]))\n  (helper s n))\n", "  (define (helper s n)\n    (cond\n     \
    \ [(string=? s \"\") n]\n      [(string=? (substring s 0 6) \"apples\") (helper\
    \ (substring s 7) (- n (string->number (substring s 0 1))))]\n      [(string=?\
    \ (substring s 0 7) \"oranges\") (helper (substring s 8) (- n (string->number\
    \ (substring s 0 1))))]\n      [else (helper (substring s 1) n)]))\n  (helper\
    \ s n))\n", "  (define (helper s n)\n    (cond\n      [(string=? s \"\") n]\n\
    \      [(string=? (substring s 0 1) \" \") (helper (substring s 1) n)]\n     \
    \ [(string=? (substring s 0 1) \"a\") (helper (substring s 6) n)]\n      [(string=?\
    \ (substring s 0 1) \"o\") (helper (substring s 7) n)]\n      [else (helper (substring\
    \ s 1) (- n (string->number (substring s 0 1))))]))\n  (helper s n))\n", "  (let\
    \ ([a (string-&gt;number (regexp-match #rx\"^\\d+\" s))]\n        [o (string-&gt;number\
    \ (regexp-match #rx\"\\d+$\" s))])\n    (- n a o)))\n", "  (define (string->number\
    \ s)\n    (string->number (substring s 0 (- (string-length s) 1))))\n  (define\
    \ (get-number s)\n    (string->number (substring s 0 (string-index s #\\space))))\n\
    \  (define (get-fruit s)\n    (substring s (+ (string-index s #\\space) 1) (string-index\
    \ s #\\a)))\n  (define (get-fruit-number s)\n    (cond\n      [(string=? (get-fruit\
    \ s) \"apples\") (get-number s)]\n      [(string=? (get-fruit s) \"oranges\")\
    \ (get-number s)]\n      [else 0]))\n  (- n (get-fruit-number s) (get-fruit-number\
    \ (substring s (+ (string-index s #\\a) 1) (string-length s)))))\n", "  (let ([a\
    \ (string-index s \"apples\")]\n        [o (string-index s \"oranges\")])\n  \
    \  (- n (string->number (substring s 0 a))\n       (string->number (substring\
    \ s (+ o 8) (string-length s))))))\n", "  (define (fruit_distribution-helper s\
    \ n)\n    (cond\n      [(empty? s) n]\n      [(char=? (first s) #\\a) (fruit_distribution-helper\
    \ (rest s) (- n 1))]\n      [(char=? (first s) #\\o) (fruit_distribution-helper\
    \ (rest s) (- n 1))]\n      [else (fruit_distribution-helper (rest s) n)]))\n\
    \  (fruit_distribution-helper (string->list s) n))\n", "  (define (helper s n)\n\
    \    (cond\n      [(string=? s \"\") n]\n      [(string=? (substring s 0 1) \"\
    \ \") (helper (substring s 1 (string-length s)) n)]\n      [(string=? (substring\
    \ s 0 1) \"a\") (helper (substring s 5 (string-length s)) (- n (string->number\
    \ (substring s 0 1))))]\n      [(string=? (substring s 0 1) \"o\") (helper (substring\
    \ s 7 (string-length s)) (- n (string->number (substring s 0 1))))]\n      [else\
    \ (helper (substring s 1 (string-length s)) n)]))\n  (helper s n))\n", "  (define\
    \ (helper s)\n    (cond\n      [(empty? s) 0]\n      [(char=? (first s) #\\a)\
    \ (+ (string->number (string-trim (string-drop-right (string-drop-right (string-drop-right\
    \ (string-drop-right (string-drop-right (string-drop-right (string-drop-right\
    \ (string-drop-right (string-drop-right (string-drop-right (string-drop-right\
    \ (string-drop-right (string-drop-right (string-drop-right (string-drop-right\
    \ (string-drop-right (string-drop-right (string-drop-right (string-drop-right\
    \ (string-drop-right (string-drop-right (string-drop-right (string-drop-right\
    \ (string-drop-right (string-drop-right (string-drop-right (string-drop-right\
    \ (string-drop-right (string-drop-right (string-drop-right (string-drop-right\
    \ (string-drop-right (string-drop-right (string-drop-right (string-drop-right\
    \ (string-drop-right (string-drop-right (string-drop-right (string-drop-right\
    \ (string-drop-right (string-drop-right (string-drop-right (string-drop-right\
    \ (string-drop-right (string-drop-right (string-drop-right (string-drop-right\
    \ (string-drop-right (string-drop-right (string-drop-right (string-drop-right\
    \ (string-drop-right (string-drop-right (string-drop-right (string-drop-right\
    \ (string-drop-right (string-drop-right (string-drop-right (string-drop-right\
    \ (string-drop-right (string-drop-right (string-drop-right (string-drop-right\
    \ (string-drop-right (string-drop-right (string-drop-right (string-drop-right\
    \ (string-drop-right (string-drop-right (string-drop-right (string-drop-right\
    \ (string-drop-right (string-drop-right (string-drop-right (string-drop-right\
    \ (string-drop-right (string-drop-right (string-drop", "  (define (helper s n)\n\
    \    (cond\n      [(string=? s \"\") n]\n      [(string=? s \" \") n]\n      [(string=?\
    \ s \"  \") n]\n      [(string=? s \"   \") n]\n      [(string=? s \"    \") n]\n\
    \      [(string=? s \"     \") n]\n      [(string=? s \"      \") n]\n      [(string=?\
    \ s \"       \") n]\n      [(string=? s \"        \") n]\n      [(string=? s \"\
    \         \") n]\n      [(string=? s \"          \") n]\n      [(string=? s \"\
    \           \") n]\n      [(string=? s \"            \") n]\n      [(string=?\
    \ s \"             \") n]\n      [(string=? s \"              \") n]\n      [(string=?\
    \ s \"               \") n]\n      [(string=? s \"                \") n]\n   \
    \   [(string=? s \"                 \") n]\n      [(string=? s \"            \
    \      \") n]\n      [(string=? s \"                   \") n]\n      [(string=?\
    \ s \"                    \") n]\n      [(string=? s \"                     \"\
    ) n]\n      [(string=? s \"                      \") n]\n      [(string=? s \"\
    \                       \") n]\n      [(string=? s \"                        \"\
    ) n]\n      [(string=? s \"                         \") n]\n      [(string=? s\
    \ \"                          \") n]\n      [(string=? s \"                  \
    \         \") n]\n      [(string=? s \"                            \") n]\n  \
    \    [(string=? s \"                             \") n]\n      [(string=? s \"\
    \                              \") n]\n      [(string=? s \"                 \
    \              \") n]\n      [(string=? s \"                                \"\
    ) n]\n      [(string=? s \"                                 \") n]\n      [(string=?\
    \ s \"                                  \") n]\n      [(string=? s \"        \
    \                           \") n]\n      [(string=? s \"                    \
    \                \") n]\n      [(string=? s \"                ", "  (define (get_num\
    \ s)\n    (string->number (substring s 0 (string-index s #\\space))))\n  (- n\
    \ (get_num s) (get_num (substring s (string-index s #\\a) (string-length s)))))\n",
  "  (define (helper s)\n    (cond\n      [(string=? s \"\") 0]\n      [(string=?\
    \ (substring s 0 1) \" \") (helper (substring s 1))]\n      [(string=? (substring\
    \ s 0 1) \"a\") (helper (substring s 1))]\n      [(string=? (substring s 0 1)\
    \ \"o\") (helper (substring s 1))]\n      [(string=? (substring s 0 1) \"n\")\
    \ (helper (substring s 1))]\n      [(string=? (substring s 0 1) \"d\") (helper\
    \ (substring s 1))]\n      [(string=? (substring s 0 1) \"r\") (helper (substring\
    \ s 1))]\n      [(string=? (substring s 0 1) \"s\") (helper (substring s 1))]\n\
    \      [(string=? (substring s 0 1) \"e\") (helper (substring s 1))]\n      [(string=?\
    \ (substring s 0 1) \"a\") (helper (substring s 1))]\n      [(string=? (substring\
    \ s 0 1) \"n\") (helper (substring s 1))]\n      [(string=? (substring s 0 1)\
    \ \"g\") (helper (substring s 1))]\n      [(string=? (substring s 0 1) \"e\")\
    \ (helper (substring s 1))]\n      [(string=? (substring s 0 1) \"s\") (helper\
    \ (substring s 1))]\n      [(string=? (substring s 0 1) \"a\") (helper (substring\
    \ s 1))]\n      [(string=? (substring s 0 1) \"n\") (helper (substring s 1))]\n\
    \      [(string=? (substring s 0 1) \"d\") (helper (substring s 1))]\n      [(string=?\
    \ (substring s 0 1) \" \") (helper (substring s 1))]\n      [(string=? (substring\
    \ s 0 1) \"o\") (helper (substring s 1))]\n      [(string=? (substring s 0 1)\
    \ \"r\") (helper (", "  (define (helper s)\n    (cond ((string=? s \"\") 0)\n\
    \          ((string=? (substring s 0 1) \" \") (helper (substring s 1)))\n   \
    \       ((string=? (substring s 0 1) \"a\") (helper (substring s 1)))\n      \
    \    ((string=? (substring s 0 1) \"o\") (helper (substring s 1)))\n         \
    \ ((string=? (substring s 0 1) \"n\") (helper (substring s 1)))\n          ((string=?\
    \ (substring s 0 1) \"d\") (helper (substring s 1)))\n          ((string=? (substring\
    \ s 0 1) \"s\") (helper (substring s 1)))\n          ((string=? (substring s 0\
    \ 1) \"r\") (helper (substring s 1)))\n          ((string=? (substring s 0 1)\
    \ \"e\") (helper (substring s 1)))\n          ((string=? (substring s 0 1) \"\
    a\") (helper (substring s 1)))\n          ((string=? (substring s 0 1) \"n\")\
    \ (helper (substring s 1)))\n          ((string=? (substring s 0 1) \"g\") (helper\
    \ (substring s 1)))\n          ((string=? (substring s 0 1) \"e\") (helper (substring\
    \ s 1)))\n          ((string=? (substring s 0 1) \"s\") (helper (substring s 1)))\n\
    \          ((string=? (substring s 0 1) \" \") (helper (substring s 1)))\n   \
    \       ((string=? (substring s 0 1) \"a\") (helper (substring s 1)))\n      \
    \    ((string=? (substring s 0 1) \"n\") (helper (substring s 1)))\n         \
    \ ((string=? (substring s 0 1) \"d\") (helper (substring s 1)))\n          ((string=?\
    \ (substring s 0 1) \" \") (helper (substring s 1)))\n          ((string=? (substring\
    \ s 0 1) \"o\") (helper (substring s 1)))\n          ((string=? (substring s 0\
    \ 1) \"r"]
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
