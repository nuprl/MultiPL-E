name: HumanEval_114_minSubArraySum
language: racket
prompt: "#lang racket\n\n;; Given an array of integers nums, find the minimum sum\
  \ of any non-empty sub-array\n;; of nums.\n;; Example\n;; minSubArraySum([2, 3,\
  \ 4, 1, 2, 4]) == 1\n;; minSubArraySum([-1, -2, -3]) == -6\n(define (minSubArraySum\
  \ nums)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate minSubArraySum))\n\
  \    (check-equal? (candidate (list 2 3 4 1 2 4)) 1)\n    (check-equal? (candidate\
  \ (list -1 -2 -3)) -6)\n    (check-equal? (candidate (list -1 -2 -3 2 -10)) -14)\n\
  \    (check-equal? (candidate (list -9999999999999999)) -9999999999999999)\n   \
  \ (check-equal? (candidate (list 0 10 20 1000000)) 0)\n    (check-equal? (candidate\
  \ (list -1 -2 -3 10 -5)) -6)\n    (check-equal? (candidate (list 100 -1 -2 -3 10\
  \ -5)) -6)\n    (check-equal? (candidate (list 10 11 13 8 3 4)) 3)\n    (check-equal?\
  \ (candidate (list 100 -33 32 -1 0 -2)) -33)\n    (check-equal? (candidate (list\
  \ -10)) -10)\n    (check-equal? (candidate (list 7)) 7)\n    (check-equal? (candidate\
  \ (list 1 -1)) -1)\n))\n\n(test-humaneval)"
completions: ["  (define (minSubArraySum-helper nums min-sum sum)\n    (cond\n   \
    \   [(empty? nums) min-sum]\n      [(< sum 0) (minSubArraySum-helper (rest nums)\
    \ (min min-sum sum) (first nums))]\n      [else (minSubArraySum-helper (rest nums)\
    \ (min min-sum sum) (+ sum (first nums)))]))\n  (minSubArraySum-helper nums (first\
    \ nums) (first nums)))\n", "  (define (minSubArraySum-helper nums min-sum)\n \
    \   (if (null? nums)\n        min-sum\n        (minSubArraySum-helper (cdr nums)\
    \ (min min-sum (apply + nums)))))\n  (minSubArraySum-helper nums (apply + nums)))\n",
  "  (define (minSubArraySum-iter nums sum min)\n    (cond\n      [(empty? nums) min]\n\
    \      [(< sum (first nums)) (minSubArraySum-iter (rest nums) (first nums) (first\
    \ nums))]\n      [else (minSubArraySum-iter (rest nums) (+ sum (first nums)) min)]))\n\
    \  (minSubArraySum-iter nums 0 (first nums)))\n", "  (define (minSubArraySum-helper\
    \ nums min-sum)\n    (cond\n      [(empty? nums) min-sum]\n      [(< (sum nums)\
    \ min-sum) (minSubArraySum-helper (rest nums) (sum nums))]\n      [else (minSubArraySum-helper\
    \ (rest nums) min-sum)]))\n  (minSubArraySum-helper nums (sum nums)))\n", "  (define\
    \ (minSubArraySum-helper nums sum min)\n    (cond\n      [(null? nums) min]\n\
    \      [(< sum min) (minSubArraySum-helper (cdr nums) sum min)]\n      [else (minSubArraySum-helper\
    \ (cdr nums) (+ sum (car nums)) min)]))\n  (minSubArraySum-helper nums 0 (car\
    \ nums)))\n", "  (define (minSubArraySum-helper nums min-so-far)\n    (cond [(empty?\
    \ nums) min-so-far]\n          [(< (first nums) min-so-far) (minSubArraySum-helper\
    \ (rest nums) (first nums))]\n          [else (minSubArraySum-helper (rest nums)\
    \ min-so-far)]))\n  (minSubArraySum-helper nums (first nums)))\n", "  (define\
    \ (minSubArraySum-helper nums min-sum)\n    (cond [(empty? nums) min-sum]\n  \
    \        [(< (first nums) min-sum) (minSubArraySum-helper (rest nums) (first nums))]\n\
    \          [else (minSubArraySum-helper (rest nums) min-sum)]))\n  (minSubArraySum-helper\
    \ nums (first nums)))\n", "  (define (minSubArraySum-helper nums min-sum)\n  \
    \  (cond [(empty? nums) min-sum]\n          [(< (sum nums) min-sum) (minSubArraySum-helper\
    \ (rest nums) (sum nums))]\n          [else (minSubArraySum-helper (rest nums)\
    \ min-sum)]))\n  (minSubArraySum-helper nums (sum nums)))\n", "  (define (minSubArraySum-helper\
    \ nums min-sum)\n    (if (null? nums)\n        min-sum\n        (let ([cur-sum\
    \ (apply + nums)])\n          (minSubArraySum-helper (cdr nums) (min min-sum cur-sum)))))\n\
    \  (minSubArraySum-helper nums (apply + nums)))\n", "  (define (minSubArraySum-iter\
    \ nums min-so-far)\n    (cond [(empty? nums) min-so-far]\n          [(< (first\
    \ nums) min-so-far) (minSubArraySum-iter (rest nums) (first nums))]\n        \
    \  [else (minSubArraySum-iter (rest nums) min-so-far)]))\n  (minSubArraySum-iter\
    \ nums (first nums)))\n", "  (define (minSubArraySum-helper nums min-sum)\n  \
    \  (if (null? nums)\n        min-sum\n        (let* ([sum (apply + nums)]\n  \
    \             [new-min-sum (if (&lt; sum min-sum) sum min-sum)])\n          (minSubArraySum-helper\
    \ (cdr nums) new-min-sum))))\n  (minSubArraySum-helper nums (apply + nums)))\n",
  "  (define (minSubArraySum-helper nums min-sum)\n    (cond [(empty? nums) min-sum]\n\
    \          [(< (first nums) min-sum) (minSubArraySum-helper (rest nums) (first\
    \ nums))]\n          [else (minSubArraySum-helper (rest nums) min-sum)]))\n  (minSubArraySum-helper\
    \ nums (first nums)))\n", "  (define (minSubArraySum-helper nums min-so-far)\n\
    \    (if (null? nums)\n        min-so-far\n        (let ([sum (apply + nums)])\n\
    \          (if (< sum min-so-far)\n              (minSubArraySum-helper (cdr nums)\
    \ sum)\n              (minSubArraySum-helper (cdr nums) min-so-far)))))\n  (minSubArraySum-helper\
    \ nums (apply + nums)))\n", "  (define (minSubArraySum' nums min-sum)\n    (if\
    \ (null? nums)\n        min-sum\n        (let ([sum (apply + nums)])\n       \
    \   (minSubArraySum' (cdr nums) (min sum min-sum)))))\n  (minSubArraySum' nums\
    \ (apply + nums)))\n", "  (define (minSubArraySum' nums minSum sum)\n    (cond\n\
    \      [(empty? nums) minSum]\n      [(< sum 0) (minSubArraySum' (rest nums) minSum\
    \ (first nums))]\n      [else (minSubArraySum' (rest nums) (min minSum sum) (+\
    \ sum (first nums)))]))\n  (minSubArraySum' nums (first nums) 0))\n", "  (define\
    \ (minSubArraySum-helper nums min-sum)\n    (cond [(empty? nums) min-sum]\n  \
    \        [(< (sum nums) min-sum) (minSubArraySum-helper (rest nums) (sum nums))]\n\
    \          [else (minSubArraySum-helper (rest nums) min-sum)]))\n  (minSubArraySum-helper\
    \ nums (sum nums)))\n", "  (let loop ([nums nums] [min-sum (car nums)] [sum 0])\n\
    \    (cond [(empty? nums) min-sum]\n          [(>= sum 0)\n           (loop (cdr\
    \ nums)\n                 (min min-sum (+ sum (car nums)))\n                 (+\
    \ sum (car nums)))]\n          [else\n           (loop (cdr nums)\n          \
    \       (min min-sum (car nums))\n                 (car nums))])))\n", "  (define\
    \ (minSubArraySum-helper nums min-sum sum)\n    (cond\n      [(empty? nums) min-sum]\n\
    \      [(< sum 0) (minSubArraySum-helper (rest nums) (min min-sum sum) (first\
    \ nums))]\n      [else (minSubArraySum-helper (rest nums) (min min-sum sum) (+\
    \ sum (first nums)))]))\n  (minSubArraySum-helper nums (first nums) (first nums)))\n",
  "  (define (minSubArraySum' nums min-sum)\n    (if (null? nums)\n        min-sum\n\
    \        (let ([sum (apply + nums)])\n          (minSubArraySum' (cdr nums) (min\
    \ sum min-sum)))))\n  (minSubArraySum' nums (apply + nums)))\n", "  (define (minSubArraySum-helper\
    \ nums min-sum)\n    (cond [(empty? nums) min-sum]\n          [(< (car nums) min-sum)\
    \ (minSubArraySum-helper (cdr nums) (car nums))]\n          [else (minSubArraySum-helper\
    \ (cdr nums) min-sum)]))\n  (minSubArraySum-helper nums (car nums)))\n", "  (define\
    \ (minSubArraySum-helper nums min-so-far)\n    (cond [(empty? nums) min-so-far]\n\
    \          [(< (first nums) min-so-far) (minSubArraySum-helper (rest nums) (first\
    \ nums))]\n          [else (minSubArraySum-helper (rest nums) min-so-far)]))\n\
    \  (minSubArraySum-helper nums (first nums)))\n", "  (define (minSubArraySum-helper\
    \ nums sum min)\n    (cond\n      [(empty? nums) min]\n      [(< sum (first nums))\
    \ (minSubArraySum-helper (rest nums) (first nums) (first nums))]\n      [else\
    \ (minSubArraySum-helper (rest nums) (+ sum (first nums)) (min sum (first nums)))]))\n\
    \  (minSubArraySum-helper nums 0 (first nums)))\n", "  (define (minSubArraySum-helper\
    \ nums min-sum)\n    (if (null? nums)\n        min-sum\n        (minSubArraySum-helper\
    \ (cdr nums) (min min-sum (+ min-sum (car nums))))))\n  (minSubArraySum-helper\
    \ nums (car nums)))\n", "  (define (minSubArraySum' nums min-sum)\n    (if (null?\
    \ nums)\n        min-sum\n        (let ([sum (apply + nums)])\n          (minSubArraySum'\
    \ (cdr nums) (min sum min-sum)))))\n  (minSubArraySum' nums (apply + nums)))\n",
  "  (define (minSubArraySum-helper nums min-so-far)\n    (cond [(empty? nums) min-so-far]\n\
    \          [(< (first nums) min-so-far) (minSubArraySum-helper (rest nums) (first\
    \ nums))]\n          [else (minSubArraySum-helper (rest nums) min-so-far)]))\n\
    \  (minSubArraySum-helper nums (first nums)))\n", "  (define (minSubArraySum-helper\
    \ nums min-sum)\n    (cond\n      [(empty? nums) min-sum]\n      [(< (sum nums)\
    \ min-sum) (minSubArraySum-helper (rest nums) (sum nums))]\n      [else (minSubArraySum-helper\
    \ (rest nums) min-sum)]))\n  (minSubArraySum-helper nums (sum nums)))\n", "  (let\
    \ loop ([nums nums] [min-sum (car nums)] [sum 0])\n    (if (null? nums)\n    \
    \    min-sum\n        (let ([new-sum (+ sum (car nums))])\n          (if (&lt;\
    \ new-sum 0)\n              (loop (cdr nums) (min min-sum new-sum) 0)\n      \
    \        (loop (cdr nums) (min min-sum new-sum) new-sum))))))\n</code>\n", " \
    \ (let loop ([nums nums] [min-sum (car nums)] [sum 0])\n    (if (null? nums)\n\
    \        min-sum\n        (let ([new-sum (+ sum (car nums))])\n          (if (&lt;\
    \ new-sum 0)\n              (loop (cdr nums) (min min-sum new-sum) 0)\n      \
    \        (loop (cdr nums) (min min-sum new-sum) new-sum))))))\n</code>\n", " \
    \ (define (minSubArraySum-helper nums min-sum)\n    (if (null? nums)\n       \
    \ min-sum\n        (let ([sum (apply + nums)])\n          (minSubArraySum-helper\
    \ (cdr nums) (min sum min-sum)))))\n  (minSubArraySum-helper nums (apply + nums)))\n",
  "  (define (minSubArraySum-helper nums min-sum)\n    (if (null? nums)\n        min-sum\n\
    \        (minSubArraySum-helper (cdr nums)\n                               (min\
    \ min-sum\n                                    (apply + nums)))))\n  (minSubArraySum-helper\
    \ nums (apply + nums)))\n", "  (define (minSubArraySum-helper nums min-sum)\n\
    \    (if (null? nums)\n        min-sum\n        (let* ([sum (apply + nums)]\n\
    \               [new-min-sum (if (&lt; sum min-sum) sum min-sum)])\n         \
    \ (minSubArraySum-helper (cdr nums) new-min-sum))))\n  (minSubArraySum-helper\
    \ nums (apply + nums)))\n", "  (define (minSubArraySum-helper nums min-sum)\n\
    \    (if (null? nums)\n        min-sum\n        (let* ([sum (apply + nums)]\n\
    \               [new-min-sum (if (&lt; sum min-sum) sum min-sum)])\n         \
    \ (minSubArraySum-helper (cdr nums) new-min-sum))))\n  (minSubArraySum-helper\
    \ nums (apply + nums)))\n", "  (define (minSubArraySum-helper nums min-sum)\n\
    \    (cond [(empty? nums) min-sum]\n          [(< (sum nums) min-sum) (minSubArraySum-helper\
    \ (rest nums) (sum nums))]\n          [else (minSubArraySum-helper (rest nums)\
    \ min-sum)]))\n  (minSubArraySum-helper nums (sum nums)))\n", "  (define (minSubArraySum-iter\
    \ nums min-sum)\n    (cond [(empty? nums) min-sum]\n          [(< (sum nums) min-sum)\
    \ (minSubArraySum-iter (rest nums) (sum nums))]\n          [else (minSubArraySum-iter\
    \ (rest nums) min-sum)]))\n  (minSubArraySum-iter nums (sum nums)))\n", "  (define\
    \ (minSubArraySum-helper nums min-sum)\n    (if (null? nums)\n        min-sum\n\
    \        (let ([sum (apply + nums)])\n          (if (&lt; sum min-sum)\n     \
    \         (minSubArraySum-helper (cdr nums) sum)\n              (minSubArraySum-helper\
    \ (cdr nums) min-sum)))))\n  (minSubArraySum-helper nums (apply + nums)))\n",
  "  (define (minSubArraySum-helper nums min-sum curr-sum)\n    (cond\n      [(empty?\
    \ nums) min-sum]\n      [(< curr-sum min-sum) (minSubArraySum-helper (rest nums)\
    \ curr-sum (add1 curr-sum))]\n      [else (minSubArraySum-helper (rest nums) min-sum\
    \ (add1 curr-sum))]))\n  (minSubArraySum-helper nums (first nums) (add1 (first\
    \ nums))))\n", "  (define (helper nums min-sum)\n    (cond\n      [(empty? nums)\
    \ min-sum]\n      [(< (first nums) min-sum) (helper (rest nums) (first nums))]\n\
    \      [else (helper (rest nums) min-sum)]))\n  (helper nums (first nums)))\n",
  "  (define (minSubArraySum-helper nums min-sum)\n    (cond [(empty? nums) min-sum]\n\
    \          [(< (sum nums) min-sum) (minSubArraySum-helper (rest nums) (sum nums))]\n\
    \          [else (minSubArraySum-helper (rest nums) min-sum)]))\n  (minSubArraySum-helper\
    \ nums (sum nums)))\n", "  (define (minSubArraySum-helper nums min-sum curr-sum)\n\
    \    (cond [(empty? nums) min-sum]\n          [else\n           (let ([curr-sum\
    \ (+ curr-sum (first nums))])\n             (minSubArraySum-helper (rest nums)\n\
    \                                    (min min-sum curr-sum)\n                \
    \                    (if (&lt; curr-sum 0) 0 curr-sum)))]))\n  (minSubArraySum-helper\
    \ nums (first nums) 0))\n", "  (define (minSubArraySum-helper nums min-so-far)\n\
    \    (cond [(empty? nums) min-so-far]\n          [(< (first nums) min-so-far)\
    \ (minSubArraySum-helper (rest nums) (first nums))]\n          [else (minSubArraySum-helper\
    \ (rest nums) min-so-far)]))\n  (minSubArraySum-helper nums (first nums)))\n",
  "  (define (minSubArraySum-iter nums min-sum)\n    (match nums\n      [(list) min-sum]\n\
    \      [(list x xs)\n       (minSubArraySum-iter xs (min min-sum (apply + xs)))]))\n\
    \  (minSubArraySum-iter nums (apply + nums)))\n", "  (define (minSubArraySum-iter\
    \ nums sum min-sum)\n    (cond [(empty? nums) min-sum]\n          [else (minSubArraySum-iter\
    \ (rest nums) (+ sum (first nums))\n                                     (min\
    \ min-sum sum))]))\n  (minSubArraySum-iter nums 0 (first nums)))\n", "  (define\
    \ (minSubArraySum-helper nums min-sum)\n    (if (null? nums)\n        min-sum\n\
    \        (let ([sum (apply + nums)])\n          (if (&lt; sum min-sum)\n     \
    \         (minSubArraySum-helper (cdr nums) sum)\n              (minSubArraySum-helper\
    \ (cdr nums) min-sum)))))\n  (minSubArraySum-helper nums (apply + nums)))\n</code>\n",
  "  (define (minSubArraySum-iter nums min-sum curr-sum)\n    (cond [(empty? nums)\
    \ min-sum]\n          [(< curr-sum min-sum) (minSubArraySum-iter (rest nums) curr-sum\
    \ (add1 curr-sum))]\n          [else (minSubArraySum-iter (rest nums) min-sum\
    \ (add1 curr-sum))]))\n  (minSubArraySum-iter nums (first nums) (first nums)))\n",
  "  (define (minSubArraySum-helper nums min-sum)\n    (if (null? nums)\n        min-sum\n\
    \        (let ([sum (apply + nums)])\n          (if (< sum min-sum)\n        \
    \      (minSubArraySum-helper (cdr nums) sum)\n              (minSubArraySum-helper\
    \ (cdr nums) min-sum)))))\n  (minSubArraySum-helper nums (apply + nums)))\n",
  "  (let loop ([nums nums] [min-sum 0] [sum 0])\n    (cond [(empty? nums) min-sum]\n\
    \          [(< sum 0) (loop (rest nums) (min min-sum sum) 0)]\n          [else\
    \ (loop (rest nums) min-sum (+ sum (first nums)))])))\n", "  (define (minSubArraySum-helper\
    \ nums min-sum sum)\n    (cond [(empty? nums) min-sum]\n          [(< sum 0) (minSubArraySum-helper\
    \ (rest nums) (min min-sum sum) (first nums))]\n          [else (minSubArraySum-helper\
    \ (rest nums) (min min-sum sum) (+ sum (first nums)))]))\n  (minSubArraySum-helper\
    \ nums (first nums) (first nums)))\n", "  (define (minSubArraySum-helper nums\
    \ min-sum)\n    (if (null? nums)\n        min-sum\n        (minSubArraySum-helper\
    \ (cdr nums)\n                               (min min-sum\n                  \
    \                  (apply + nums)))))\n  (minSubArraySum-helper nums (apply +\
    \ nums)))\n", "  (define (minSubArraySum-helper nums min-so-far)\n    (if (null?\
    \ nums)\n        min-so-far\n        (minSubArraySum-helper (cdr nums)\n     \
    \                          (min min-so-far\n                                 \
    \   (apply + nums)))))\n  (minSubArraySum-helper nums (apply + nums)))\n", " \
    \ (define (minSubArraySum-helper nums min-sum)\n    (cond [(empty? nums) min-sum]\n\
    \          [(< (first nums) min-sum) (minSubArraySum-helper (rest nums) (first\
    \ nums))]\n          [else (minSubArraySum-helper (rest nums) min-sum)]))\n  (minSubArraySum-helper\
    \ nums (first nums)))\n", "  (define (minSubArraySum-helper nums min-sum)\n  \
    \  (if (null? nums)\n        min-sum\n        (minSubArraySum-helper (cdr nums)\n\
    \                               (min min-sum\n                               \
    \     (apply + nums)))))\n  (minSubArraySum-helper nums (apply + nums)))\n", " \
    \ (define (minSubArraySum-helper nums min-sum)\n    (if (null? nums)\n       \
    \ min-sum\n        (let ([sum (apply + nums)])\n          (minSubArraySum-helper\
    \ (cdr nums) (min sum min-sum)))))\n  (minSubArraySum-helper nums (apply + nums)))\n",
  "  (define (minSubArraySum-helper nums min-sum)\n    (if (null? nums)\n        min-sum\n\
    \        (let ([sum (apply + nums)])\n          (if (&lt; sum min-sum)\n     \
    \         (minSubArraySum-helper (cdr nums) sum)\n              (minSubArraySum-helper\
    \ (cdr nums) min-sum)))))\n  (minSubArraySum-helper nums (apply + nums)))\n",
  "  (define (minSubArraySum' nums min-sum)\n    (cond [(empty? nums) min-sum]\n \
    \         [(< (first nums) min-sum) (minSubArraySum' (rest nums) (first nums))]\n\
    \          [else (minSubArraySum' (rest nums) min-sum)]))\n  (minSubArraySum'\
    \ nums (first nums)))\n", "  (define (minSubArraySum-helper nums min-sum)\n  \
    \  (cond\n      [(empty? nums) min-sum]\n      [(< (sum nums) min-sum) (minSubArraySum-helper\
    \ (rest nums) (sum nums))]\n      [else (minSubArraySum-helper (rest nums) min-sum)]))\n\
    \  (minSubArraySum-helper nums (sum nums)))\n```\n\n## Problem 2\n\n### Problem\
    \ Statement\n\n```racket\n#lang racket\n", "  (define (minSubArraySum-helper nums\
    \ min-sum)\n    (if (null? nums)\n        min-sum\n        (minSubArraySum-helper\
    \ (cdr nums) (min min-sum (apply + nums)))))\n  (minSubArraySum-helper nums (apply\
    \ + nums)))\n", "  (define (minSubArraySum-helper nums min-so-far)\n    (cond\
    \ [(empty? nums) min-so-far]\n          [(< (first nums) min-so-far) (minSubArraySum-helper\
    \ (rest nums) (first nums))]\n          [else (minSubArraySum-helper (rest nums)\
    \ min-so-far)]))\n  (minSubArraySum-helper nums (first nums)))\n", "  (define\
    \ (minSubArraySum-helper nums min-sum)\n    (if (null? nums)\n        min-sum\n\
    \        (minSubArraySum-helper (cdr nums) (min min-sum (apply + nums)))))\n \
    \ (minSubArraySum-helper nums (apply + nums)))\n", "  (let loop ([nums nums] [min-sum\
    \ 0] [sum 0])\n    (cond [(empty? nums) min-sum]\n          [(< sum 0) (loop (rest\
    \ nums) (min min-sum sum) (first nums))]\n          [else (loop (rest nums) (min\
    \ min-sum sum) (+ sum (first nums)))])))\n", "  (define (minSubArraySum-helper\
    \ nums min-sum)\n    (if (null? nums)\n        min-sum\n        (let ((sum (apply\
    \ + nums)))\n          (if (< sum min-sum)\n              (minSubArraySum-helper\
    \ (cdr nums) sum)\n              (minSubArraySum-helper (cdr nums) min-sum)))))\n\
    \  (minSubArraySum-helper nums (apply + nums)))\n", "  (define (minSubArraySum-helper\
    \ nums min-so-far)\n    (if (null? nums)\n        min-so-far\n        (let ([sum\
    \ (apply + nums)])\n          (if (&lt; sum min-so-far)\n              (minSubArraySum-helper\
    \ (cdr nums) sum)\n              (minSubArraySum-helper (cdr nums) min-so-far)))))\n\
    \  (minSubArraySum-helper nums (apply + nums)))\n", "  (define (minSubArraySum-helper\
    \ nums min-sum)\n    (cond\n      [(empty? nums) min-sum]\n      [(< (sum nums)\
    \ min-sum) (minSubArraySum-helper (rest nums) (sum nums))]\n      [else (minSubArraySum-helper\
    \ (rest nums) min-sum)]))\n  (minSubArraySum-helper nums (sum nums)))\n", "  (define\
    \ (minSubArraySum-helper nums min-sum)\n    (if (null? nums)\n        min-sum\n\
    \        (let* ([sum (apply + nums)]\n               [min-sum (if (&lt; sum min-sum)\
    \ sum min-sum)])\n          (minSubArraySum-helper (cdr nums) min-sum))))\n  (minSubArraySum-helper\
    \ nums (apply + nums)))\n</code>\n", "  (define (minSubArraySum-helper nums min-sum)\n\
    \    (if (null? nums)\n        min-sum\n        (minSubArraySum-helper (cdr nums)\n\
    \                               (min min-sum (apply + nums)))))\n  (minSubArraySum-helper\
    \ nums (apply + nums)))\n", "  (define (minSubArraySum-helper nums min-so-far)\n\
    \    (cond [(empty? nums) min-so-far]\n          [(< (first nums) min-so-far)\
    \ (minSubArraySum-helper (rest nums) (first nums))]\n          [else (minSubArraySum-helper\
    \ (rest nums) min-so-far)]))\n  (minSubArraySum-helper nums (first nums)))\n",
  "  (define (minSubArraySum-helper nums min-sum)\n    (cond [(empty? nums) min-sum]\n\
    \          [(empty? (rest nums)) (min min-sum (first nums))]\n          [else\
    \ (minSubArraySum-helper (rest nums) (min min-sum (apply + (take (rest nums) (length\
    \ nums)))))])\n  )\n  (minSubArraySum-helper nums (apply + nums))\n)\n", "  (define\
    \ (minSubArraySum-iter nums min-sum)\n    (if (null? nums)\n        min-sum\n\
    \        (let* ([sum (apply + nums)]\n               [new-min-sum (if (&lt; sum\
    \ min-sum) sum min-sum)])\n          (minSubArraySum-iter (cdr nums) new-min-sum))))\n\
    \  (minSubArraySum-iter nums (apply + nums)))\n", "  (define (minSubArraySum-helper\
    \ nums min-sum)\n    (if (null? nums)\n        min-sum\n        (let ([sum (apply\
    \ + nums)])\n          (minSubArraySum-helper (cdr nums) (min sum min-sum)))))\n\
    \  (minSubArraySum-helper nums (apply + nums)))\n", "  (define (minSubArraySum-helper\
    \ nums sum min-sum)\n    (cond [(empty? nums) min-sum]\n          [else (minSubArraySum-helper\
    \ (rest nums) (+ sum (first nums))\n                                       (min\
    \ min-sum sum))]))\n  (minSubArraySum-helper nums 0 (first nums)))\n", "  (define\
    \ (minSubArraySum' nums min-sum)\n    (if (null? nums)\n        min-sum\n    \
    \    (let* ([sum (apply + nums)]\n               [new-min-sum (if (&lt; sum min-sum)\
    \ sum min-sum)])\n          (minSubArraySum' (cdr nums) new-min-sum))))\n  (minSubArraySum'\
    \ nums (apply + nums)))\n", "  (define (minSubArraySum-helper nums min-sum)\n\
    \    (cond [(empty? nums) min-sum]\n          [(< (car nums) min-sum) (minSubArraySum-helper\
    \ (cdr nums) (car nums))]\n          [else (minSubArraySum-helper (cdr nums) min-sum)]))\n\
    \  (minSubArraySum-helper nums (car nums)))\n", "  (define (minSubArraySum' nums\
    \ min-sum)\n    (cond [(empty? nums) min-sum]\n          [(< (sum nums) min-sum)\
    \ (minSubArraySum' (rest nums) (sum nums))]\n          [else (minSubArraySum'\
    \ (rest nums) min-sum)]))\n  (minSubArraySum' nums (sum nums)))\n", "  (define\
    \ (minSubArraySum' nums min-so-far)\n    (if (null? nums)\n        min-so-far\n\
    \        (let ([min-so-far (min min-so-far (apply + nums))])\n          (minSubArraySum'\
    \ (cdr nums) min-so-far))))\n  (minSubArraySum' nums (apply + nums)))\n", "  (define\
    \ (minSubArraySum-helper nums min-sum)\n    (cond\n      [(empty? nums) min-sum]\n\
    \      [(< (sum nums) min-sum) (minSubArraySum-helper (rest nums) (sum nums))]\n\
    \      [else (minSubArraySum-helper (rest nums) min-sum)]))\n  (minSubArraySum-helper\
    \ nums (sum nums)))\n", "  (define (minSubArraySum-helper nums sum min-sum)\n\
    \    (cond\n      [(empty? nums) min-sum]\n      [(< sum 0) (minSubArraySum-helper\
    \ (rest nums) (first nums) (min min-sum (first nums))) ]\n      [else (minSubArraySum-helper\
    \ (rest nums) (+ sum (first nums)) (min min-sum sum))]))\n  (minSubArraySum-helper\
    \ nums 0 (first nums)))\n", "  (define (minSubArraySum-helper nums min-sum curr-sum)\n\
    \    (cond\n      [(empty? nums) min-sum]\n      [(< curr-sum min-sum) (minSubArraySum-helper\
    \ (rest nums) curr-sum curr-sum)]\n      [else (minSubArraySum-helper (rest nums)\
    \ min-sum (+ curr-sum (first nums)))]))\n  (minSubArraySum-helper nums (first\
    \ nums) (first nums)))\n", "  (define (minSubArraySum-helper nums min-sum)\n \
    \   (cond [(empty? nums) min-sum]\n          [(< (first nums) min-sum) (minSubArraySum-helper\
    \ (rest nums) (first nums))]\n          [else (minSubArraySum-helper (rest nums)\
    \ min-sum)]))\n  (minSubArraySum-helper nums (first nums)))\n", "  (define (minSubArraySum-helper\
    \ nums min-so-far)\n    (cond [(empty? nums) min-so-far]\n          [(< (first\
    \ nums) min-so-far) (minSubArraySum-helper (rest nums) (first nums))]\n      \
    \    [else (minSubArraySum-helper (rest nums) min-so-far)]))\n  (minSubArraySum-helper\
    \ nums (first nums)))\n", "  (define (minSubArraySum-iter nums min-sum sum)\n\
    \    (cond [(empty? nums) min-sum]\n          [(< sum 0) (minSubArraySum-iter\
    \ (rest nums) (min min-sum sum) (first nums))]\n          [else (minSubArraySum-iter\
    \ (rest nums) min-sum (+ sum (first nums)))]))\n  (minSubArraySum-iter nums (first\
    \ nums) 0))\n", "  (define (minSubArraySum-helper nums min-sum)\n    (if (null?\
    \ nums)\n        min-sum\n        (let ([sum (apply + nums)])\n          (if (&lt;\
    \ sum min-sum)\n              (minSubArraySum-helper (cdr nums) sum)\n       \
    \       (minSubArraySum-helper (cdr nums) min-sum)))))\n  (minSubArraySum-helper\
    \ nums (apply + nums)))\n", "  (define (minSubArraySum-helper nums min-sum)\n\
    \    (if (null? nums)\n        min-sum\n        (minSubArraySum-helper (cdr nums)\n\
    \                               (min min-sum\n                               \
    \     (apply + (take nums (length nums)))))))\n  (minSubArraySum-helper nums (apply\
    \ + nums)))\n", "  (define (minSubArraySum-helper nums min-sum)\n    (if (null?\
    \ nums)\n        min-sum\n        (minSubArraySum-helper (cdr nums)\n        \
    \                       (min min-sum\n                                    (apply\
    \ + (take nums (length nums)))))))\n  (minSubArraySum-helper nums (apply + nums)))\n",
  "  (define (minSubArraySum-helper nums min-sum)\n    (cond [(empty? nums) min-sum]\n\
    \          [(empty? (rest nums)) (min min-sum (first nums))]\n          [else\
    \ (minSubArraySum-helper (rest nums) (min min-sum (+ (first nums) (minSubArraySum-helper\
    \ (rest nums) (first nums)))))]))\n  (minSubArraySum-helper nums (first nums)))\n",
  "  (define (minSubArraySum' nums min-sum)\n    (if (empty? nums)\n        min-sum\n\
    \        (minSubArraySum' (rest nums)\n                         (min min-sum\n\
    \                              (apply + nums)))))\n  (minSubArraySum' nums (apply\
    \ + nums)))\n", "  (define (minSubArraySum-helper nums min-sum)\n    (if (null?\
    \ nums)\n        min-sum\n        (let* ([sum (apply + nums)]\n              \
    \ [new-min-sum (if (&lt; sum min-sum) sum min-sum)])\n          (minSubArraySum-helper\
    \ (cdr nums) new-min-sum))))\n  (minSubArraySum-helper nums (apply + nums)))\n",
  "  (define (minSubArraySum-helper nums min-sum)\n    (if (null? nums)\n        min-sum\n\
    \        (let ((sum (apply + nums)))\n          (minSubArraySum-helper (cdr nums)\
    \ (min min-sum sum)))))\n  (minSubArraySum-helper nums (apply + nums)))\n", " \
    \ (define (minSubArraySum-iter nums min-sum)\n    (cond [(empty? nums) min-sum]\n\
    \          [(< (sum nums) min-sum) (minSubArraySum-iter (rest nums) (sum nums))]\n\
    \          [else (minSubArraySum-iter (rest nums) min-sum)]))\n  (minSubArraySum-iter\
    \ nums (sum nums)))\n", "  (define (minSubArraySum-helper nums min-sum)\n    (if\
    \ (null? nums)\n        min-sum\n        (let ([sum (apply + nums)])\n       \
    \   (minSubArraySum-helper (cdr nums) (min sum min-sum)))))\n  (minSubArraySum-helper\
    \ nums (apply + nums)))\n", "  (define (minSubArraySum-helper nums min-sum)\n\
    \    (if (empty? nums)\n        min-sum\n        (let* ([sum (apply + nums)]\n\
    \               [new-min-sum (if (&lt; sum min-sum) sum min-sum)])\n         \
    \ (minSubArraySum-helper (rest nums) new-min-sum))))\n  (minSubArraySum-helper\
    \ nums (apply + nums)))\n", "  (define (minSubArraySum-helper nums min-sum)\n\
    \    (if (null? nums)\n        min-sum\n        (minSubArraySum-helper (cdr nums)\
    \ (min min-sum (apply + nums)))))\n  (minSubArraySum-helper nums (apply + nums)))\n",
  "  (define (minSubArraySum-helper nums min-sum)\n    (cond [(empty? nums) min-sum]\n\
    \          [(< (first nums) min-sum) (minSubArraySum-helper (rest nums) (first\
    \ nums))]\n          [else (minSubArraySum-helper (rest nums) min-sum)]))\n  (minSubArraySum-helper\
    \ nums (first nums)))\n", "  (define (minSubArraySum-helper nums min-sum)\n  \
    \  (if (null? nums)\n        min-sum\n        (minSubArraySum-helper (cdr nums)\
    \ (min (apply + nums) min-sum))))\n  (minSubArraySum-helper nums (apply + nums)))\n",
  "  (define (minSubArraySum-helper nums min-sum)\n    (cond [(empty? nums) min-sum]\n\
    \          [(< (sum nums) min-sum) (minSubArraySum-helper (rest nums) (sum nums))]\n\
    \          [else (minSubArraySum-helper (rest nums) min-sum)]))\n  (minSubArraySum-helper\
    \ nums (sum nums)))\n", "  (define (minSubArraySum-helper nums sum min)\n    (if\
    \ (null? nums)\n        min\n        (minSubArraySum-helper (cdr nums) (+ sum\
    \ (car nums)) (min min sum))))\n  (minSubArraySum-helper nums 0 (car nums)))\n",
  "  (define (minSubArraySum-helper nums sum min)\n    (cond\n      [(empty? nums)\
    \ min]\n      [(< sum (first nums)) (minSubArraySum-helper (rest nums) (first\
    \ nums) (first nums))]\n      [else (minSubArraySum-helper (rest nums) (+ sum\
    \ (first nums)) (min min sum))]))\n  (minSubArraySum-helper nums 0 (first nums)))\n",
  "  (define (minSubArraySum-iter nums min-sum)\n    (cond [(empty? nums) min-sum]\n\
    \          [(< (first nums) min-sum) (minSubArraySum-iter (rest nums) (first nums))]\n\
    \          [else (minSubArraySum-iter (rest nums) min-sum)]))\n  (minSubArraySum-iter\
    \ nums (first nums)))\n", "  (define (minSubArraySum-helper nums sum min-sum)\n\
    \    (cond [(empty? nums) min-sum]\n          [else (minSubArraySum-helper (rest\
    \ nums) (+ sum (first nums))\n                                       (min min-sum\
    \ sum))]))\n  (minSubArraySum-helper nums 0 (first nums)))\n", "  (define (minSubArraySum-helper\
    \ nums acc min-sum)\n    (cond [(empty? nums) min-sum]\n          [(< acc (first\
    \ nums)) (minSubArraySum-helper (rest nums) (first nums) min-sum)]\n         \
    \ [(< min-sum acc) (minSubArraySum-helper (rest nums) (first nums) acc)]\n   \
    \       [else (minSubArraySum-helper (rest nums) (first nums) min-sum)]))\n  (minSubArraySum-helper\
    \ nums 0 (first nums)))\n", "  (define (minSubArraySum-helper nums min-sum)\n\
    \    (if (null? nums)\n        min-sum\n        (let ([sum (apply + nums)])\n\
    \          (minSubArraySum-helper (cdr nums) (min sum min-sum)))))\n  (minSubArraySum-helper\
    \ nums (apply + nums)))\n", "  (define (minSubArraySum-helper nums min-sum)\n\
    \    (if (null? nums)\n        min-sum\n        (let ([sum (apply + nums)])\n\
    \          (if (< sum min-sum)\n              (minSubArraySum-helper (cdr nums)\
    \ sum)\n              (minSubArraySum-helper (cdr nums) min-sum)))))\n  (minSubArraySum-helper\
    \ nums (apply + nums)))\n", "  (let loop ([nums nums] [min-sum (first nums)] [sum\
    \ 0])\n    (cond [(empty? nums) min-sum]\n          [(< sum 0) (loop (rest nums)\
    \ (min min-sum sum) (first nums))]\n          [else (loop (rest nums) (min min-sum\
    \ sum) (+ sum (first nums)))])))\n", "  (define (minSubArraySum-helper nums min-sum)\n\
    \    (cond [(empty? nums) min-sum]\n          [(< (sum nums) min-sum) (minSubArraySum-helper\
    \ (rest nums) (sum nums))]\n          [else (minSubArraySum-helper (rest nums)\
    \ min-sum)]))\n  (minSubArraySum-helper nums (sum nums)))\n", "  (define (minSubArraySum-helper\
    \ nums min-sum)\n    (if (null? nums)\n        min-sum\n        (minSubArraySum-helper\
    \ (cdr nums)\n                               (min min-sum\n                  \
    \                  (apply + (map (lambda (x) (if (&lt; x 0) x 0))\n          \
    \                                        nums))))))\n  (minSubArraySum-helper\
    \ nums (apply + nums)))\n</code>\n", "  (define (minSubArraySum-iter nums min-sum)\n\
    \    (if (null? nums)\n        min-sum\n        (let ([sum (apply + nums)])\n\
    \          (minSubArraySum-iter (cdr nums) (min sum min-sum)))))\n  (minSubArraySum-iter\
    \ nums (apply + nums)))\n", "  (define (minSubArraySum-helper nums min-sum)\n\
    \    (cond [(empty? nums) min-sum]\n          [(< (sum nums) min-sum) (minSubArraySum-helper\
    \ (rest nums) (sum nums))]\n          [else (minSubArraySum-helper (rest nums)\
    \ min-sum)]))\n  (minSubArraySum-helper nums (sum nums)))\n", "  (define (minSubArraySum-iter\
    \ nums acc min)\n    (cond [(empty? nums) min]\n          [(< acc (first nums))\
    \ (minSubArraySum-iter (rest nums) (first nums) (first nums))]\n          [else\
    \ (minSubArraySum-iter (rest nums) (+ acc (first nums)) (min acc (first nums)))]))\n\
    \  (minSubArraySum-iter nums 0 (first nums)))\n", "  (define (minSubArraySum-iter\
    \ nums min-sum curr-sum)\n    (cond [(empty? nums) min-sum]\n          [(< curr-sum\
    \ min-sum) (minSubArraySum-iter (rest nums) curr-sum (add1 curr-sum (first nums)))]\n\
    \          [else (minSubArraySum-iter (rest nums) min-sum (add1 curr-sum (first\
    \ nums)))]))\n  (minSubArraySum-iter nums (first nums) (first nums)))\n", "  (define\
    \ (minSubArraySum-iter nums min-sum)\n    (cond [(empty? nums) min-sum]\n    \
    \      [(< (sum nums) min-sum) (minSubArraySum-iter (rest nums) (sum nums))]\n\
    \          [else (minSubArraySum-iter (rest nums) min-sum)]))\n  (minSubArraySum-iter\
    \ nums (sum nums)))\n", "  (define (minSubArraySum-iter nums min-sum)\n    (if\
    \ (null? nums)\n        min-sum\n        (let ([sum (apply + nums)])\n       \
    \   (minSubArraySum-iter (cdr nums) (min sum min-sum)))))\n  (minSubArraySum-iter\
    \ nums (apply + nums)))\n", "  (define (minSubArraySum' nums min-sum)\n    (cond\
    \ [(empty? nums) min-sum]\n          [(< (sum nums) min-sum) (minSubArraySum'\
    \ (rest nums) (sum nums))]\n          [else (minSubArraySum' (rest nums) min-sum)]))\n\
    \  (minSubArraySum' nums (sum nums)))\n", "  (define (minSubArraySum-helper nums\
    \ min-sum)\n    (if (null? nums)\n        min-sum\n        (minSubArraySum-helper\
    \ (cdr nums) (min min-sum (apply + nums)))))\n  (minSubArraySum-helper nums (apply\
    \ + nums)))\n", "  (define (minSubArraySum-helper nums min-sum)\n    (cond\n \
    \     [(empty? nums) min-sum]\n      [(< (sum nums) min-sum) (minSubArraySum-helper\
    \ (rest nums) (sum nums))]\n      [else (minSubArraySum-helper (rest nums) min-sum)]))\n\
    \  (minSubArraySum-helper nums (sum nums)))\n", "  (define (minSubArraySum-helper\
    \ nums min-sum)\n    (if (null? nums)\n        min-sum\n        (let ([sum (apply\
    \ + nums)])\n          (if (&lt; sum min-sum)\n              (minSubArraySum-helper\
    \ (cdr nums) sum)\n              (minSubArraySum-helper (cdr nums) min-sum)))))\n\
    \  (minSubArraySum-helper nums (apply + nums)))\n", "  (let loop ([nums nums]\
    \ [min-sum (car nums)] [sum 0])\n    (cond [(null? nums) min-sum]\n          [(<\
    \ sum 0) (loop (cdr nums) min-sum 0)]\n          [(< sum min-sum) (loop (cdr nums)\
    \ sum (+ sum (car nums)))]\n          [else (loop (cdr nums) min-sum (+ sum (car\
    \ nums)))])))\n", "  (define (minSubArraySum-helper nums min-sum)\n    (cond\n\
    \      [(empty? nums) min-sum]\n      [(< (first nums) min-sum) (minSubArraySum-helper\
    \ (rest nums) (first nums))]\n      [else (minSubArraySum-helper (rest nums) min-sum)]))\n\
    \  (minSubArraySum-helper nums (first nums)))\n", "  (define (minSubArraySum-helper\
    \ nums min-sum)\n    (if (null? nums)\n        min-sum\n        (minSubArraySum-helper\
    \ (cdr nums) (min min-sum (apply + nums)))))\n  (minSubArraySum-helper nums (apply\
    \ + nums)))\n", "  (define (minSubArraySum-helper nums min-sum)\n    (cond\n \
    \     [(empty? nums) min-sum]\n      [(< (sum nums) min-sum) (minSubArraySum-helper\
    \ (rest nums) (sum nums))]\n      [else (minSubArraySum-helper (rest nums) min-sum)]))\n\
    \  (minSubArraySum-helper nums (sum nums)))\n", "  (define (minSubArraySum-helper\
    \ nums sum min-sum)\n    (cond\n      [(empty? nums) min-sum]\n      [(< sum min-sum)\
    \ (minSubArraySum-helper (rest nums) (add1 sum) sum)]\n      [else (minSubArraySum-helper\
    \ (rest nums) (add1 sum) min-sum)]))\n  (minSubArraySum-helper nums 0 (first nums)))\n",
  "  (define (minSubArraySum-helper nums min-so-far)\n    (cond [(empty? nums) min-so-far]\n\
    \          [(< (first nums) min-so-far) (minSubArraySum-helper (rest nums) (first\
    \ nums))]\n          [else (minSubArraySum-helper (rest nums) min-so-far)]))\n\
    \  (minSubArraySum-helper nums (first nums)))\n", "  (define (minSubArraySum-helper\
    \ nums min-sum curr-sum)\n    (cond [(empty? nums) min-sum]\n          [else\n\
    \           (define curr-num (first nums))\n           (define new-sum (+ curr-sum\
    \ curr-num))\n           (define new-min-sum (min min-sum new-sum))\n        \
    \   (minSubArraySum-helper (rest nums) new-min-sum new-sum)]))\n  (minSubArraySum-helper\
    \ nums (first nums) 0))\n</code>\n", "  (define (minSubArraySum-helper nums min-sum)\n\
    \    (if (null? nums)\n        min-sum\n        (let* ([sum (apply + nums)]\n\
    \               [new-min-sum (if (&lt; sum min-sum) sum min-sum)])\n         \
    \ (minSubArraySum-helper (cdr nums) new-min-sum))))\n  (minSubArraySum-helper\
    \ nums (apply + nums)))\n", "  (define (minSubArraySum' nums start end)\n    (if\
    \ (= start end)\n        (vector-ref nums start)\n        (let ([sum (vector-ref\
    \ nums start)])\n          (for ([i (in-range (+ start 1) end)])\n           \
    \ (set! sum (+ sum (vector-ref nums i)))\n            (if (&lt; sum (vector-ref\
    \ nums i))\n                (set! sum (vector-ref nums i))))\n          sum)))\n\
    \  (define (minSubArraySum'' nums start end)\n    (if (= start end)\n        (vector-ref\
    \ nums start)\n        (let ([sum (vector-ref nums start)])\n          (for ([i\
    \ (in-range (+ start 1) end)])\n            (set! sum (+ sum (vector-ref nums\
    \ i)))\n            (if (&lt; sum (vector-ref nums i))\n                (set!\
    \ sum (vector-ref nums i))))\n          sum)))\n  (define (minSubArraySum''' nums\
    \ start end)\n    (if (= start end)\n        (vector-ref nums start)\n       \
    \ (let ([sum (vector-ref nums start)])\n          (for ([i (in-range (+ start\
    \ 1) end)])\n            (set! sum (+ sum (vector-ref nums i)))\n            (if\
    \ (&lt; sum (vector-ref nums i))\n                (set! sum (vector-ref nums i))))\n\
    \          sum)))\n  (define (minSubArraySum'''' nums start end)\n    (if (= start\
    \ end)\n        (vector-ref nums start)\n        (let ([sum (vector-ref nums start)])\n\
    \          (for ([i (in-range (+ start 1) end)])\n            (set! sum (+ sum\
    \ (vector-ref nums i)))\n            (if (&lt; sum (vector-ref nums i))\n    \
    \            (set! sum (vector-ref nums i))))\n          sum)))\n  (define (minSubArraySum'''''\
    \ nums start end)\n    (if (= start end)\n        (vector-ref nums start)\n  \
    \      (let ([sum (vector-ref nums start)])\n         ", "  (define (minSubArraySum-iter\
    \ nums min-sum)\n    (if (null? nums)\n        min-sum\n        (let* ([sum (apply\
    \ + nums)]\n               [new-min-sum (if (&lt; sum min-sum) sum min-sum)])\n\
    \          (minSubArraySum-iter (cdr nums) new-min-sum))))\n  (minSubArraySum-iter\
    \ nums (apply + nums)))\n</code>\n", "  (define (minSubArraySum-helper nums min-sum)\n\
    \    (cond\n      [(empty? nums) min-sum]\n      [(< (sum nums) min-sum) (minSubArraySum-helper\
    \ (rest nums) (sum nums))]\n      [else (minSubArraySum-helper (rest nums) min-sum)]))\n\
    \  (minSubArraySum-helper nums (sum nums)))\n", "  (define (minSubArraySum-helper\
    \ nums min-sum)\n    (cond [(empty? nums) min-sum]\n          [(< (first nums)\
    \ min-sum) (minSubArraySum-helper (rest nums) (first nums))]\n          [else\
    \ (minSubArraySum-helper (rest nums) min-sum)]))\n  (minSubArraySum-helper nums\
    \ (first nums)))\n", "  (define (minSubArraySum-helper nums min-so-far)\n    (if\
    \ (null? nums)\n        min-so-far\n        (let ([curr-sum (apply + nums)])\n\
    \          (minSubArraySum-helper (cdr nums) (min min-so-far curr-sum)))))\n \
    \ (minSubArraySum-helper nums (apply + nums)))\n", "  (define (minSubArraySum-helper\
    \ nums min-sum)\n    (cond\n      [(empty? nums) min-sum]\n      [(< (sum nums)\
    \ min-sum) (minSubArraySum-helper (rest nums) (sum nums))]\n      [else (minSubArraySum-helper\
    \ (rest nums) min-sum)]))\n  (minSubArraySum-helper nums (sum nums)))\n", "  (define\
    \ (minSubArraySum-helper nums min-sum)\n    (cond [(empty? nums) min-sum]\n  \
    \        [(< (sum nums) min-sum) (minSubArraySum-helper (rest nums) (sum nums))]\n\
    \          [else (minSubArraySum-helper (rest nums) min-sum)]))\n  (minSubArraySum-helper\
    \ nums (sum nums)))\n", "  (define (minSubArraySum-helper nums min-sum)\n    (if\
    \ (null? nums)\n        min-sum\n        (let* ([current-sum (apply + nums)]\n\
    \               [new-min-sum (min min-sum current-sum)])\n          (minSubArraySum-helper\
    \ (cdr nums) new-min-sum))))\n  (minSubArraySum-helper nums (apply + nums)))\n",
  "  (define (minSubArraySum-helper nums min-sum)\n    (cond\n      [(empty? nums)\
    \ min-sum]\n      [(< (sum nums) min-sum) (minSubArraySum-helper (rest nums) (sum\
    \ nums))]\n      [else (minSubArraySum-helper (rest nums) min-sum)]))\n  (minSubArraySum-helper\
    \ nums (sum nums)))\n", "  (define (minSubArraySum-helper nums min-so-far)\n \
    \   (if (null? nums)\n        min-so-far\n        (let ([sum (apply + nums)])\n\
    \          (minSubArraySum-helper (cdr nums) (min min-so-far sum)))))\n  (minSubArraySum-helper\
    \ nums (apply + nums)))\n", "  (let loop ([nums nums] [min-sum (car nums)] [sum\
    \ 0])\n    (cond [(empty? nums) min-sum]\n          [(< sum 0) (loop (cdr nums)\
    \ (min min-sum sum) 0)]\n          [else (loop (cdr nums) min-sum (+ sum (car\
    \ nums)))])))\n", "  (define (minSubArraySum-helper nums min-sum)\n    (if (null?\
    \ nums)\n        min-sum\n        (minSubArraySum-helper (cdr nums)\n        \
    \                       (min min-sum\n                                    (apply\
    \ + nums)))))\n  (minSubArraySum-helper nums (apply + nums)))\n", "  (define (minSubArraySum-helper\
    \ nums sum min)\n    (cond\n      [(empty? nums) min]\n      [(< sum 0) (minSubArraySum-helper\
    \ (rest nums) (first nums) (min (first nums))) ]\n      [(< sum min) (minSubArraySum-helper\
    \ (rest nums) (+ sum (first nums)) sum)]\n      [else (minSubArraySum-helper (rest\
    \ nums) (+ sum (first nums)) min)]))\n  (minSubArraySum-helper nums 0 (first nums)))\n",
  "  (define (minSubArraySum-iter nums min-sum sum)\n    (cond [(empty? nums) min-sum]\n\
    \          [(< sum 0) (minSubArraySum-iter (rest nums) (min min-sum sum) (first\
    \ nums))]\n          [else (minSubArraySum-iter (rest nums) min-sum (+ sum (first\
    \ nums)))]))\n  (minSubArraySum-iter nums (first nums) 0))\n", "  (define (minSubArraySum-helper\
    \ nums sum min)\n    (if (null? nums)\n        min\n        (let ([new-sum (+\
    \ sum (car nums))])\n          (minSubArraySum-helper (cdr nums) new-sum (min\
    \ min new-sum)))))\n  (minSubArraySum-helper nums 0 (car nums)))\n", "  (define\
    \ (minSubArraySum-helper nums-helper min-so-far)\n    (if (null? nums-helper)\n\
    \        min-so-far\n        (let ([sum (apply + nums-helper)])\n          (minSubArraySum-helper\
    \ (cdr nums-helper) (min min-so-far sum)))))\n  (minSubArraySum-helper nums (apply\
    \ + nums)))\n", "  (define (minSubArraySum-helper nums min-sum)\n    (if (null?\
    \ nums)\n        min-sum\n        (let ([sum (apply + nums)])\n          (if (<\
    \ sum min-sum)\n              (minSubArraySum-helper (cdr nums) sum)\n       \
    \       (minSubArraySum-helper (cdr nums) min-sum)))))\n  (minSubArraySum-helper\
    \ nums (apply + nums)))\n", "  (define (minSubArraySum' nums start end)\n    (if\
    \ (= start end)\n        (car nums)\n        (min (apply + (sublist nums start\
    \ end))\n             (minSubArraySum' nums start (- end 1))\n             (minSubArraySum'\
    \ nums (+ start 1) end))))\n  (minSubArraySum' nums 0 (length nums)))\n", "  (define\
    \ (minSubArraySum-helper nums min-so-far)\n    (if (null? nums)\n        min-so-far\n\
    \        (let ([sum (apply + nums)])\n          (if (< sum min-so-far)\n     \
    \         (minSubArraySum-helper (cdr nums) sum)\n              (minSubArraySum-helper\
    \ (cdr nums) min-so-far)))))\n  (minSubArraySum-helper nums (apply + nums)))\n",
  "  (define (minSubArraySum-helper nums min-sum)\n    (if (null? nums)\n        min-sum\n\
    \        (let* ([sum (apply + nums)]\n               [new-min-sum (if (&lt; sum\
    \ min-sum) sum min-sum)])\n          (minSubArraySum-helper (cdr nums) new-min-sum))))\n\
    \  (minSubArraySum-helper nums (apply + nums)))\n", "  (define (minSubArraySum-helper\
    \ nums sum min)\n    (cond\n      [(empty? nums) min]\n      [(< sum (first nums))\
    \ (minSubArraySum-helper (rest nums) (first nums) (first nums))]\n      [else\
    \ (minSubArraySum-helper (rest nums) (+ sum (first nums)) (min sum (first nums)))]))\n\
    \  (minSubArraySum-helper nums 0 (first nums)))\n", "  (define (minSubArraySum-helper\
    \ nums min-so-far)\n    (cond\n      [(empty? nums) min-so-far]\n      [(< (sum\
    \ nums) min-so-far) (minSubArraySum-helper (rest nums) (sum nums))]\n      [else\
    \ (minSubArraySum-helper (rest nums) min-so-far)]))\n  (minSubArraySum-helper\
    \ nums (sum nums)))\n", "  (define (minSubArraySum-helper nums min-sum)\n    (if\
    \ (null? nums)\n        min-sum\n        (let ([sum (apply + nums)])\n       \
    \   (minSubArraySum-helper (cdr nums) (min sum min-sum)))))\n  (minSubArraySum-helper\
    \ nums (apply + nums)))\n", "  (define (minSubArraySum-helper nums min-sum)\n\
    \    (if (empty? nums)\n        min-sum\n        (let* ([sum (apply + nums)]\n\
    \               [new-min-sum (if (&lt; sum min-sum) sum min-sum)])\n         \
    \ (minSubArraySum-helper (rest nums) new-min-sum))))\n  (minSubArraySum-helper\
    \ nums (apply + nums)))\n", "  (let loop ([nums nums] [min-sum 0] [sum 0])\n \
    \   (cond [(empty? nums) min-sum]\n          [(< sum 0) (loop (rest nums) (min\
    \ min-sum sum) 0)]\n          [else (loop (rest nums) min-sum (+ sum (first nums)))])))\n",
  "  (define (minSubArraySum-iter nums min-sum curr-sum)\n    (cond [(empty? nums)\
    \ min-sum]\n          [(< curr-sum min-sum) (minSubArraySum-iter (rest nums) curr-sum\
    \ (add1 curr-sum))]\n          [else (minSubArraySum-iter (rest nums) min-sum\
    \ (add1 curr-sum))]))\n  (minSubArraySum-iter nums (first nums) (add1 (first nums))))\n",
  "  (define (minSubArraySum-iter nums min-sum)\n    (if (null? nums)\n        min-sum\n\
    \        (minSubArraySum-iter (cdr nums) (min min-sum (apply + nums)))))\n  (minSubArraySum-iter\
    \ nums (apply + nums)))\n", "  (define (minSubArraySum-iter nums min-sum sum)\n\
    \    (cond\n      [(empty? nums) min-sum]\n      [(< sum 0) (minSubArraySum-iter\
    \ (rest nums) (min min-sum sum) (first nums))]\n      [else (minSubArraySum-iter\
    \ (rest nums) min-sum (+ sum (first nums)))]))\n  (minSubArraySum-iter nums (first\
    \ nums) 0))\n", "  (define (minSubArraySum-helper nums-helper sum min-sum)\n \
    \   (cond [(empty? nums-helper) min-sum]\n          [(< sum min-sum) (minSubArraySum-helper\
    \ (rest nums-helper) (+ sum (first nums-helper)) sum)]\n          [else (minSubArraySum-helper\
    \ (rest nums-helper) (+ sum (first nums-helper)) min-sum)]))\n  (minSubArraySum-helper\
    \ nums 0 (first nums)))\n", "  (define (minSubArraySum-iter nums min-sum)\n  \
    \  (cond [(empty? nums) min-sum]\n          [(< (sum nums) min-sum) (minSubArraySum-iter\
    \ (rest nums) (sum nums))]\n          [else (minSubArraySum-iter (rest nums) min-sum)]))\n\
    \  (minSubArraySum-iter nums (sum nums)))\n", "  (define (minSubArraySum-helper\
    \ nums min-sum)\n    (if (null? nums)\n        min-sum\n        (let ([sum (apply\
    \ + nums)])\n          (if (&lt; sum min-sum)\n              (minSubArraySum-helper\
    \ (cdr nums) sum)\n              (minSubArraySum-helper (cdr nums) min-sum)))))\n\
    \  (minSubArraySum-helper nums (apply + nums)))\n", "  (define (minSubArraySum-helper\
    \ nums min-sum)\n    (if (null? nums)\n        min-sum\n        (let ([sum (apply\
    \ + nums)])\n          (minSubArraySum-helper (cdr nums) (min sum min-sum)))))\n\
    \  (minSubArraySum-helper nums (apply + nums)))\n", "  (define (minSubArraySum-helper\
    \ nums min-sum)\n    (cond [(empty? nums) min-sum]\n          [(< (first nums)\
    \ min-sum) (minSubArraySum-helper (rest nums) (first nums))]\n          [else\
    \ (minSubArraySum-helper (rest nums) min-sum)]))\n  (minSubArraySum-helper nums\
    \ (first nums)))\n", "  (define (minSubArraySum-iter nums min-sum)\n    (cond\
    \ [(empty? nums) min-sum]\n          [(< (car nums) min-sum) (minSubArraySum-iter\
    \ (cdr nums) (car nums))]\n          [else (minSubArraySum-iter (cdr nums) min-sum)]))\n\
    \  (minSubArraySum-iter nums (car nums)))\n", "  (define (minSubArraySum-helper\
    \ nums current-min current-sum)\n    (cond\n      [(empty? nums) current-min]\n\
    \      [(< current-sum (first nums)) (minSubArraySum-helper (rest nums) (first\
    \ nums) (first nums))]\n      [else (minSubArraySum-helper (rest nums) (min current-min\
    \ current-sum) (+ current-sum (first nums)))]))\n  (minSubArraySum-helper nums\
    \ (first nums) (first nums)))\n", "  (define (minSubArraySum-helper nums min-sum\
    \ curr-sum)\n    (cond [(empty? nums) min-sum]\n          [(< curr-sum min-sum)\
    \ (minSubArraySum-helper (rest nums) curr-sum curr-sum)]\n          [else (minSubArraySum-helper\
    \ (rest nums) min-sum (+ curr-sum (first nums)))]))\n  (minSubArraySum-helper\
    \ nums (first nums) (first nums)))\n", "  (define (minSubArraySum-helper nums\
    \ min-so-far)\n    (cond\n      [(empty? nums) min-so-far]\n      [(< (first nums)\
    \ min-so-far) (minSubArraySum-helper (rest nums) (first nums))]\n      [else (minSubArraySum-helper\
    \ (rest nums) min-so-far)]))\n  (minSubArraySum-helper nums (first nums)))\n",
  "  (define (minSubArraySum-helper nums min-sum)\n    (if (null? nums)\n        min-sum\n\
    \        (minSubArraySum-helper (cdr nums) (min min-sum (apply + nums)))))\n \
    \ (minSubArraySum-helper nums (apply + nums)))\n", "  (define (minSubArraySum-helper\
    \ nums min-sum)\n    (if (null? nums)\n        min-sum\n        (let ((sum (apply\
    \ + nums)))\n          (if (< sum min-sum)\n              (minSubArraySum-helper\
    \ (cdr nums) sum)\n              (minSubArraySum-helper (cdr nums) min-sum)))))\n\
    \  (minSubArraySum-helper nums (apply + nums)))\n", "  (define (minSubArraySum-helper\
    \ nums min-sum sum)\n    (cond [(empty? nums) min-sum]\n          [(< sum 0) (minSubArraySum-helper\
    \ (rest nums) (min min-sum sum) (first nums))]\n          [else (minSubArraySum-helper\
    \ (rest nums) (min min-sum sum) (+ sum (first nums)))]))\n  (minSubArraySum-helper\
    \ nums (first nums) (first nums)))\n", "  (define (minSubArraySum-helper nums\
    \ min-sum)\n    (if (null? nums)\n        min-sum\n        (let ([sum (apply +\
    \ nums)])\n          (minSubArraySum-helper (cdr nums) (min sum min-sum)))))\n\
    \  (minSubArraySum-helper nums (apply + nums)))\n", "  (define (minSubArraySum-helper\
    \ nums min-sum)\n    (if (empty? nums)\n        min-sum\n        (let ([curr-sum\
    \ (apply + nums)])\n          (minSubArraySum-helper (rest nums) (min min-sum\
    \ curr-sum)))))\n  (minSubArraySum-helper nums (apply + nums)))\n", "  (define\
    \ (minSubArraySum-helper nums min-sum curr-sum)\n    (cond\n      [(empty? nums)\
    \ min-sum]\n      [(< curr-sum min-sum) (minSubArraySum-helper (rest nums) curr-sum\
    \ curr-sum)]\n      [else (minSubArraySum-helper (rest nums) min-sum (+ curr-sum\
    \ (first nums)))]))\n  (minSubArraySum-helper nums (first nums) (first nums)))\n",
  "  (define (minSubArraySum-helper nums min-sum)\n    (if (null? nums)\n        min-sum\n\
    \        (let ([sum (apply + nums)])\n          (if (< sum min-sum)\n        \
    \      (minSubArraySum-helper (cdr nums) sum)\n              (minSubArraySum-helper\
    \ (cdr nums) min-sum)))))\n  (minSubArraySum-helper nums (apply + nums)))\n",
  "  (let loop ([nums nums] [min-sum 0] [sum 0])\n    (cond [(null? nums) min-sum]\n\
    \          [(< sum 0) (loop (cdr nums) (min min-sum sum) 0)]\n          [else\
    \ (loop (cdr nums) (min min-sum sum) (+ sum (car nums)))])))\n", "  (define (minSubArraySum-helper\
    \ nums min-so-far)\n    (if (empty? nums)\n        min-so-far\n        (minSubArraySum-helper\
    \ (rest nums)\n                               (min min-so-far\n              \
    \                      (apply + nums)))))\n  (minSubArraySum-helper nums (apply\
    \ + nums)))\n", "  (define (minSubArraySum-helper nums sum min)\n    (cond [(empty?\
    \ nums) min]\n          [else (minSubArraySum-helper (rest nums) (+ sum (first\
    \ nums))\n                                       (min min sum))]))\n  (minSubArraySum-helper\
    \ nums 0 (first nums)))\n", "  (define (minSubArraySum-helper nums min-sum)\n\
    \    (if (null? nums)\n        min-sum\n        (minSubArraySum-helper (cdr nums)\
    \ (min min-sum (apply + nums)))))\n  (minSubArraySum-helper nums (apply + nums)))\n",
  "  (define (minSubArraySum-helper nums min-sum sum)\n    (cond [(empty? nums) min-sum]\n\
    \          [(< sum 0) (minSubArraySum-helper (rest nums) (min min-sum sum) (first\
    \ nums))]\n          [else (minSubArraySum-helper (rest nums) (min min-sum sum)\
    \ (+ sum (first nums)))]))\n  (minSubArraySum-helper nums (first nums) (first\
    \ nums)))\n", "  (define (minSubArraySum-helper nums min-sum)\n    (if (null?\
    \ nums)\n        min-sum\n        (let ([sum (apply + nums)])\n          (if (<\
    \ sum min-sum)\n              (minSubArraySum-helper (cdr nums) sum)\n       \
    \       (minSubArraySum-helper (cdr nums) min-sum)))))\n  (minSubArraySum-helper\
    \ nums (apply + nums)))\n", "  (define (minSubArraySum-helper nums min-sum)\n\
    \    (if (null? nums)\n        min-sum\n        (let* ([sum (apply + nums)]\n\
    \               [new-min-sum (if (&lt; sum min-sum) sum min-sum)])\n         \
    \ (minSubArraySum-helper (cdr nums) new-min-sum))))\n  (minSubArraySum-helper\
    \ nums (apply + nums)))\n", "  (define (minSubArraySum-helper nums min-sum)\n\
    \    (if (null? nums)\n        min-sum\n        (let ([sum (apply + nums)])\n\
    \          (minSubArraySum-helper (cdr nums) (min sum min-sum)))))\n  (minSubArraySum-helper\
    \ nums (apply + nums)))\n", "  (define (minSubArraySum-helper nums min-sum sum)\n\
    \    (cond\n      [(empty? nums) min-sum]\n      [(< sum 0) (minSubArraySum-helper\
    \ (rest nums) (min min-sum sum) (first nums))]\n      [else (minSubArraySum-helper\
    \ (rest nums) (min min-sum sum) (+ sum (first nums)))]))\n  (minSubArraySum-helper\
    \ nums (first nums) (first nums)))\n", "  (define (minSubArraySum-iter nums min-sum\
    \ sum)\n    (cond [(empty? nums) min-sum]\n          [(< sum 0) (minSubArraySum-iter\
    \ (rest nums) (min min-sum sum) (first nums))]\n          [else (minSubArraySum-iter\
    \ (rest nums) min-sum (+ sum (first nums)))]))\n  (minSubArraySum-iter nums (first\
    \ nums) 0))\n", "  (define (minSubArraySum-helper nums min-sum curr-sum)\n   \
    \ (cond\n      [(empty? nums) min-sum]\n      [(< curr-sum min-sum) (minSubArraySum-helper\
    \ (rest nums) curr-sum (add1 curr-sum))]\n      [else (minSubArraySum-helper (rest\
    \ nums) min-sum (add1 curr-sum))]))\n  (minSubArraySum-helper nums (first nums)\
    \ (add1 (first nums))))\n", "  (define (minSubArraySum-helper nums min-sum)\n\
    \    (cond\n      [(empty? nums) min-sum]\n      [(< (sum nums) min-sum) (minSubArraySum-helper\
    \ (rest nums) (sum nums))]\n      [else (minSubArraySum-helper (rest nums) min-sum)]))\n\
    \  (minSubArraySum-helper nums (sum nums)))\n", "  (define (minSubArraySum-helper\
    \ nums min-sum)\n    (if (null? nums)\n        min-sum\n        (let* ([sum (apply\
    \ + nums)]\n               [new-min-sum (if (&lt; sum min-sum) sum min-sum)])\n\
    \          (minSubArraySum-helper (cdr nums) new-min-sum))))\n  (minSubArraySum-helper\
    \ nums (apply + nums)))\n</code>\n", "  (define (minSubArraySum-helper nums min-sum)\n\
    \    (cond [(empty? nums) min-sum]\n          [(< (sum nums) min-sum) (minSubArraySum-helper\
    \ (rest nums) (sum nums))]\n          [else (minSubArraySum-helper (rest nums)\
    \ min-sum)]))\n  (minSubArraySum-helper nums (sum nums)))\n```\n\n### [Problem\
    \ 2](https://www.codewars.com/kata/5a2be17aee1aaefe2a000151)\n\n```racket\n#lang\
    \ racket\n", "  (define (minSubArraySum-helper nums min-sum)\n    (cond [(empty?\
    \ nums) min-sum]\n          [(< (first nums) min-sum) (minSubArraySum-helper (rest\
    \ nums) (first nums))]\n          [else (minSubArraySum-helper (rest nums) min-sum)]))\n\
    \  (minSubArraySum-helper nums (first nums)))\n", "  (define (minSubArraySum-helper\
    \ nums min-so-far)\n    (cond [(empty? nums) min-so-far]\n          [(< (first\
    \ nums) min-so-far) (minSubArraySum-helper (rest nums) (first nums))]\n      \
    \    [else (minSubArraySum-helper (rest nums) min-so-far)]))\n  (minSubArraySum-helper\
    \ nums (first nums)))\n", "  (define (minSubArraySum-helper nums min-sum)\n  \
    \  (cond\n      [(empty? nums) min-sum]\n      [(<= (first nums) min-sum) (minSubArraySum-helper\
    \ (rest nums) (first nums))]\n      [else (minSubArraySum-helper (rest nums) min-sum)]))\n\
    \  (minSubArraySum-helper nums (first nums)))\n", "  (define (minSubArraySum-helper\
    \ nums min-sum)\n    (if (null? nums)\n        min-sum\n        (let ([sum (apply\
    \ + nums)])\n          (if (< sum min-sum)\n              (minSubArraySum-helper\
    \ (cdr nums) sum)\n              (minSubArraySum-helper (cdr nums) min-sum)))))\n\
    \  (minSubArraySum-helper nums (apply + nums)))\n", "  (define (minSubArraySum-helper\
    \ nums min-sum)\n    (cond [(empty? nums) min-sum]\n          [(< (sum nums) min-sum)\
    \ (minSubArraySum-helper (rest nums) (sum nums))]\n          [else (minSubArraySum-helper\
    \ (rest nums) min-sum)]))\n  (minSubArraySum-helper nums (sum nums)))\n", "  (define\
    \ (minSubArraySum-helper nums min-sum)\n    (cond [(empty? nums) min-sum]\n  \
    \        [(< (sum nums) min-sum) (minSubArraySum-helper (rest nums) (sum nums))]\n\
    \          [else (minSubArraySum-helper (rest nums) min-sum)]))\n  (minSubArraySum-helper\
    \ nums (sum nums)))\n", "  (define (minSubArraySum-helper nums sum min)\n    (cond\
    \ [(empty? nums) min]\n          [else (minSubArraySum-helper (rest nums) (+ sum\
    \ (first nums))\n                                       (min min sum))]))\n  (minSubArraySum-helper\
    \ nums 0 (first nums)))\n", "  (define (minSubArraySum-helper nums min-sum)\n\
    \    (if (null? nums)\n        min-sum\n        (minSubArraySum-helper (cdr nums)\
    \ (min min-sum (apply + nums)))))\n  (minSubArraySum-helper nums (apply + nums)))\n",
  "  (define (minSubArraySum-iter nums min-sum)\n    (cond [(empty? nums) min-sum]\n\
    \          [(< (sum nums) min-sum) (minSubArraySum-iter (rest nums) (sum nums))]\n\
    \          [else (minSubArraySum-iter (rest nums) min-sum)]))\n  (minSubArraySum-iter\
    \ nums (sum nums)))\n", "  (define (minSubArraySum-helper nums min-sum)\n    (if\
    \ (null? nums)\n        min-sum\n        (let ([sum (apply + nums)])\n       \
    \   (if (< sum min-sum)\n              (minSubArraySum-helper (cdr nums) sum)\n\
    \              (minSubArraySum-helper (cdr nums) min-sum)))))\n  (minSubArraySum-helper\
    \ nums (apply + nums)))\n", "  (define (minSubArraySum-helper nums min-sum)\n\
    \    (cond\n      [(null? nums) min-sum]\n      [(< (apply + nums) min-sum) (minSubArraySum-helper\
    \ (cdr nums) (apply + nums))]\n      [else (minSubArraySum-helper (cdr nums) min-sum)]))\n\
    \  (minSubArraySum-helper nums (apply + nums)))\n", "  (define (minSubArraySum'\
    \ nums min-sum)\n    (if (empty? nums)\n        min-sum\n        (minSubArraySum'\
    \ (rest nums)\n                         (min min-sum\n                       \
    \       (apply + (take nums (length nums)))))))\n  (minSubArraySum' nums (apply\
    \ + nums)))\n", "  (define (minSubArraySum-helper nums min-sum)\n    (if (null?\
    \ nums)\n        min-sum\n        (let ([sum (apply + nums)])\n          (minSubArraySum-helper\
    \ (cdr nums) (min sum min-sum)))))\n  (minSubArraySum-helper nums (apply + nums)))\n",
  "  (define (minSubArraySum-helper nums min-sum)\n    (cond [(empty? nums) min-sum]\n\
    \          [(< (sum nums) min-sum) (minSubArraySum-helper (rest nums) (sum nums))]\n\
    \          [else (minSubArraySum-helper (rest nums) min-sum)]))\n  (minSubArraySum-helper\
    \ nums (sum nums)))\n", "  (define (minSubArraySum-helper nums min-sum)\n    (cond\
    \ [(empty? nums) min-sum]\n          [(empty? (rest nums)) (min min-sum (first\
    \ nums))]\n          [else (minSubArraySum-helper (rest nums) (min min-sum (apply\
    \ + (take (length nums) nums))))]))\n  (minSubArraySum-helper nums (apply + nums)))\n",
  "  (define (minSubArraySum-helper nums min-sum)\n    (cond [(empty? nums) min-sum]\n\
    \          [(< (first nums) min-sum) (minSubArraySum-helper (rest nums) (first\
    \ nums))]\n          [else (minSubArraySum-helper (rest nums) min-sum)]))\n  (minSubArraySum-helper\
    \ nums (first nums)))\n", "  (define (minSubArraySum-helper nums min-sum)\n  \
    \  (cond [(empty? nums) min-sum]\n          [(= (length nums) 1) (min min-sum\
    \ (first nums))]\n          [else (minSubArraySum-helper (rest nums) (min min-sum\
    \ (apply + nums)))]))\n  (minSubArraySum-helper nums (apply + nums)))\n", "  (define\
    \ (minSubArraySum-iter nums sum min)\n    (if (null? nums)\n        min\n    \
    \    (let ([new-sum (+ sum (car nums))])\n          (minSubArraySum-iter (cdr\
    \ nums) new-sum (min new-sum new-sum)))))\n  (minSubArraySum-iter nums 0 (car\
    \ nums)))\n", "  (define (minSubArraySum-helper nums min-so-far)\n    (cond\n\
    \      [(null? nums) min-so-far]\n      [(< (car nums) 0) (minSubArraySum-helper\
    \ (cdr nums) (min min-so-far (car nums))) ]\n      [else (minSubArraySum-helper\
    \ (cdr nums) min-so-far)]))\n  (minSubArraySum-helper nums (car nums)))\n", " \
    \ (define (minSubArraySum-iter nums min-sum sum)\n    (cond\n      [(empty? nums)\
    \ min-sum]\n      [(< sum 0) (minSubArraySum-iter (rest nums) (min min-sum sum)\
    \ (first nums))]\n      [else (minSubArraySum-iter (rest nums) min-sum (+ sum\
    \ (first nums)))]))\n  (minSubArraySum-iter nums (first nums) 0))\n", "  (define\
    \ (minSubArraySum-helper nums min-sum)\n    (if (null? nums)\n        min-sum\n\
    \        (let* ([sum (apply + nums)]\n               [new-min-sum (if (&lt; sum\
    \ min-sum) sum min-sum)])\n          (minSubArraySum-helper (cdr nums) new-min-sum))))\n\
    \  (minSubArraySum-helper nums (apply + nums)))\n"]
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
