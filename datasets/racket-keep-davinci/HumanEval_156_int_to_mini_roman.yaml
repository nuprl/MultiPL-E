name: HumanEval_156_int_to_mini_roman
language: racket
prompt: "#lang racket\n\n;; Given a positive integer, obtain its roman numeral equivalent\
  \ as a string,\n;; and return it in lowercase.\n;; Restrictions: 1 <= num <= 1000\n\
  ;; Examples:\n;; >>> int_to_mini_roman(19) == 'xix'\n;; >>> int_to_mini_roman(152)\
  \ == 'clii'\n;; >>> int_to_mini_roman(426) == 'cdxxvi'\n(define (int_to_mini_roman\
  \ number)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate int_to_mini_roman))\n\
  \    (check-equal? (candidate 19) \"xix\")\n    (check-equal? (candidate 152) \"\
  clii\")\n    (check-equal? (candidate 251) \"ccli\")\n    (check-equal? (candidate\
  \ 426) \"cdxxvi\")\n    (check-equal? (candidate 500) \"d\")\n    (check-equal?\
  \ (candidate 1) \"i\")\n    (check-equal? (candidate 4) \"iv\")\n    (check-equal?\
  \ (candidate 43) \"xliii\")\n    (check-equal? (candidate 90) \"xc\")\n    (check-equal?\
  \ (candidate 94) \"xciv\")\n    (check-equal? (candidate 532) \"dxxxii\")\n    (check-equal?\
  \ (candidate 900) \"cm\")\n    (check-equal? (candidate 994) \"cmxciv\")\n    (check-equal?\
  \ (candidate 1000) \"m\")\n))\n\n(test-humaneval)"
completions: ["  (define (int_to_mini_roman-helper number)\n    (cond\n      [(= number\
    \ 1000) \"m\"]\n      [(= number 900) \"cm\"]\n      [(= number 500) \"d\"]\n\
    \      [(= number 400) \"cd\"]\n      [(= number 100) \"c\"]\n      [(= number\
    \ 90) \"xc\"]\n      [(= number 50) \"l\"]\n      [(= number 40) \"xl\"]\n   \
    \   [(= number 10) \"x\"]\n      [(= number 9) \"ix\"]\n      [(= number 5) \"\
    v\"]\n      [(= number 4) \"iv\"]\n      [(= number 1) \"i\"]\n      [else (string-append\
    \ (int_to_mini_roman-helper (quotient number 10))\n                          \
    \ (int_to_mini_roman-helper (remainder number 10)))]))\n  (string-downcase (int_to_mini_roman-helper\
    \ number)))\n", "  (define (int_to_mini_roman-helper number)\n    (cond\n    \
    \  [(= number 1000) 'm]\n      [(= number 900) 'cm]\n      [(= number 500) 'd]\n\
    \      [(= number 400) 'cd]\n      [(= number 100) 'c]\n      [(= number 90) 'xc]\n\
    \      [(= number 50) 'l]\n      [(= number 40) 'xl]\n      [(= number 10) 'x]\n\
    \      [(= number 9) 'ix]\n      [(= number 5) 'v]\n      [(= number 4) 'iv]\n\
    \      [(= number 1) 'i]\n      [else (append (int_to_mini_roman-helper (quotient\
    \ number 10))\n                    (int_to_mini_roman-helper (remainder number\
    \ 10)))]))\n  (string-downcase (apply string (int_to_mini_roman-helper number))))\n",
  "  (define (int_to_mini_roman_helper number)\n    (cond\n      [(= number 1000)\
    \ 'm]\n      [(= number 900) 'cm]\n      [(= number 500) 'd]\n      [(= number\
    \ 400) 'cd]\n      [(= number 100) 'c]\n      [(= number 90) 'xc]\n      [(= number\
    \ 50) 'l]\n      [(= number 40) 'xl]\n      [(= number 10) 'x]\n      [(= number\
    \ 9) 'ix]\n      [(= number 5) 'v]\n      [(= number 4) 'iv]\n      [(= number\
    \ 1) 'i]\n      [else (append (int_to_mini_roman_helper (quotient number 10))\n\
    \                    (int_to_mini_roman_helper (remainder number 10)))]))\n  (symbol->string\
    \ (int_to_mini_roman_helper number)))\n", "  (define (int_to_mini_roman-helper\
    \ number)\n    (cond\n      [(= number 0) '()]\n      [(= number 1) '(i)]\n  \
    \    [(= number 2) '(i i)]\n      [(= number 3) '(i i i)]\n      [(= number 4)\
    \ '(i v)]\n      [(= number 5) '(v)]\n      [(= number 6) '(v i)]\n      [(= number\
    \ 7) '(v i i)]\n      [(= number 8) '(v i i i)]\n      [(= number 9) '(i x)]\n\
    \      [(= number 10) '(x)]\n      [(= number 11) '(x i)]\n      [(= number 12)\
    \ '(x i i)]\n      [(= number 13) '(x i i i)]\n      [(= number 14) '(x i v)]\n\
    \      [(= number 15) '(x v)]\n      [(= number 16) '(x v i)]\n      [(= number\
    \ 17) '(x v i i)]\n      [(= number 18) '(x v i i i)]\n      [(= number 19) '(x\
    \ i x)]\n      [(= number 20) '(x x)]\n      [(= number 30) '(x x x)]\n      [(=\
    \ number 40) '(x x x x)]\n      [(= number 50) '(l)]\n      [(= number 60) '(l\
    \ x)]\n      [(= number 70) '(l x x)]\n      [(= number 80) '(l x x x)]\n    \
    \  [(= number 90) '(x c)]\n      [(= number 100) '(c)]\n      [(= number 200)\
    \ '(c c)]\n      [(= number 300) '(c c c)]\n      [(= number 400) '(c c c c)]\n\
    \      [(= number 500) '(d)]\n      [(= number 600) '(d c)]\n      [(= number\
    \ 700) '(d c c)]\n      [(= number 800) '(d c c c)]\n      [(= number 900) '(c\
    \ m)]\n      [(= number 1000) '(m)]\n      [else (append (int_to_mini_roman-helper\
    \ (/ number 10))\n                    (int_to_mini_roman-helper (remainder number\
    \ 10)))]))\n  (string-join (int_to_", "  (cond\n    [(= number 1) \"i\"]\n   \
    \ [(= number 2) \"ii\"]\n    [(= number 3) \"iii\"]\n    [(= number 4) \"iv\"\
    ]\n    [(= number 5) \"v\"]\n    [(= number 6) \"vi\"]\n    [(= number 7) \"vii\"\
    ]\n    [(= number 8) \"viii\"]\n    [(= number 9) \"ix\"]\n    [(= number 10)\
    \ \"x\"]\n    [(= number 11) \"xi\"]\n    [(= number 12) \"xii\"]\n    [(= number\
    \ 13) \"xiii\"]\n    [(= number 14) \"xiv\"]\n    [(= number 15) \"xv\"]\n   \
    \ [(= number 16) \"xvi\"]\n    [(= number 17) \"xvii\"]\n    [(= number 18) \"\
    xviii\"]\n    [(= number 19) \"xix\"]\n    [(= number 20) \"xx\"]\n    [(= number\
    \ 30) \"xxx\"]\n    [(= number 40) \"xl\"]\n    [(= number 50) \"l\"]\n    [(=\
    \ number 60) \"lx\"]\n    [(= number 70) \"lxx\"]\n    [(= number 80) \"lxxx\"\
    ]\n    [(= number 90) \"xc\"]\n    [(= number 100) \"c\"]\n    [(= number 200)\
    \ \"cc\"]\n    [(= number 300) \"ccc\"]\n    [(= number 400) \"cd\"]\n    [(=\
    \ number 500) \"d\"]\n    [(= number 600) \"dc\"]\n    [(= number 700) \"dcc\"\
    ]\n    [(= number 800) \"dccc\"]\n    [(= number 900) \"cm\"]\n    [(= number\
    \ 1000) \"m\"]\n    [(= number 2000) \"mm\"]\n    [(= number 3000) \"mmm\"]\n\
    \    [(= number 4000) \"mv\"]\n    [(= number 5000) \"v\"]\n    [(= number 6000)\
    \ \"vm\"]\n    [(= number 7000) \"vmm\"]\n    [(= number 8000) \"vmmm\"]\n   \
    \ [(= number 9000) \"mx\"]\n    [(= number 10000) \"x\"]\n    [(= number 20000)\
    \ \"xx\"]\n    [(= number 30000) \"xxx\"]\n    [(", "  (define (int_to_mini_roman_helper\
    \ number)\n    (cond\n      [(= number 0) '()]\n      [(= number 1) '(i)]\n  \
    \    [(= number 2) '(i i)]\n      [(= number 3) '(i i i)]\n      [(= number 4)\
    \ '(i v)]\n      [(= number 5) '(v)]\n      [(= number 6) '(v i)]\n      [(= number\
    \ 7) '(v i i)]\n      [(= number 8) '(v i i i)]\n      [(= number 9) '(i x)]\n\
    \      [(= number 10) '(x)]\n      [(= number 20) '(x x)]\n      [(= number 30)\
    \ '(x x x)]\n      [(= number 40) '(x l)]\n      [(= number 50) '(l)]\n      [(=\
    \ number 60) '(l x)]\n      [(= number 70) '(l x x)]\n      [(= number 80) '(l\
    \ x x x)]\n      [(= number 90) '(x c)]\n      [(= number 100) '(c)]\n      [(=\
    \ number 200) '(c c)]\n      [(= number 300) '(c c c)]\n      [(= number 400)\
    \ '(c d)]\n      [(= number 500) '(d)]\n      [(= number 600) '(d c)]\n      [(=\
    \ number 700) '(d c c)]\n      [(= number 800) '(d c c c)]\n      [(= number 900)\
    \ '(c m)]\n      [(= number 1000) '(m)]\n      [(= number 2000) '(m m)]\n    \
    \  [(= number 3000) '(m m m)]\n      [else (append (int_to_mini_roman_helper (/\
    \ number 10))\n                    (int_to_mini_roman_helper (modulo number 10)))]))\n\
    \  (string-join (int_to_mini_roman_helper number) \"\"))\n", "  (define (int_to_mini_roman_helper\
    \ number)\n    (cond ((= number 0) \"\")\n          ((= number 1) \"i\")\n   \
    \       ((= number 2) \"ii\")\n          ((= number 3) \"iii\")\n          ((=\
    \ number 4) \"iv\")\n          ((= number 5) \"v\")\n          ((= number 6) \"\
    vi\")\n          ((= number 7) \"vii\")\n          ((= number 8) \"viii\")\n \
    \         ((= number 9) \"ix\")\n          ((= number 10) \"x\")\n          ((=\
    \ number 20) \"xx\")\n          ((= number 30) \"xxx\")\n          ((= number\
    \ 40) \"xl\")\n          ((= number 50) \"l\")\n          ((= number 60) \"lx\"\
    )\n          ((= number 70) \"lxx\")\n          ((= number 80) \"lxxx\")\n   \
    \       ((= number 90) \"xc\")\n          ((= number 100) \"c\")\n          ((=\
    \ number 200) \"cc\")\n          ((= number 300) \"ccc\")\n          ((= number\
    \ 400) \"cd\")\n          ((= number 500) \"d\")\n          ((= number 600) \"\
    dc\")\n          ((= number 700) \"dcc\")\n          ((= number 800) \"dccc\"\
    )\n          ((= number 900) \"cm\")\n          ((= number 1000) \"m\")\n    \
    \      (else (string-append (int_to_mini_roman_helper (quotient number 10))\n\
    \                               (int_to_mini_roman_helper (remainder number 10))))))\n\
    \  (string-downcase (int_to_mini_roman_helper number)))\n", "  (define (int_to_mini_roman_helper\
    \ number)\n    (cond\n      [(= number 1000) 'm]\n      [(= number 900) 'cm]\n\
    \      [(= number 500) 'd]\n      [(= number 400) 'cd]\n      [(= number 100)\
    \ 'c]\n      [(= number 90) 'xc]\n      [(= number 50) 'l]\n      [(= number 40)\
    \ 'xl]\n      [(= number 10) 'x]\n      [(= number 9) 'ix]\n      [(= number 5)\
    \ 'v]\n      [(= number 4) 'iv]\n      [(= number 1) 'i]\n      [else (append\
    \ (int_to_mini_roman_helper (quotient number 10)) (int_to_mini_roman_helper (remainder\
    \ number 10)))]))\n  (string-downcase (list->string (int_to_mini_roman_helper\
    \ number))))\n", "  (define (int_to_mini_roman-helper number)\n    (cond\n   \
    \   [(= number 1000) 'm]\n      [(= number 900) 'cm]\n      [(= number 500) 'd]\n\
    \      [(= number 400) 'cd]\n      [(= number 100) 'c]\n      [(= number 90) 'xc]\n\
    \      [(= number 50) 'l]\n      [(= number 40) 'xl]\n      [(= number 10) 'x]\n\
    \      [(= number 9) 'ix]\n      [(= number 5) 'v]\n      [(= number 4) 'iv]\n\
    \      [(= number 1) 'i]\n      [else (append (int_to_mini_roman-helper (quotient\
    \ number 10))\n                    (int_to_mini_roman-helper (remainder number\
    \ 10)))]))\n  (string-downcase (list->string (int_to_mini_roman-helper number))))\n",
  "  (define (int_to_mini_roman-helper number)\n    (cond\n      [(= number 1000)\
    \ 'm]\n      [(= number 900) 'cm]\n      [(= number 500) 'd]\n      [(= number\
    \ 400) 'cd]\n      [(= number 100) 'c]\n      [(= number 90) 'xc]\n      [(= number\
    \ 50) 'l]\n      [(= number 40) 'xl]\n      [(= number 10) 'x]\n      [(= number\
    \ 9) 'ix]\n      [(= number 5) 'v]\n      [(= number 4) 'iv]\n      [(= number\
    \ 1) 'i]\n      [else (append (int_to_mini_roman-helper (quotient number 10))\n\
    \                    (int_to_mini_roman-helper (remainder number 10)))]))\n  (string-downcase\
    \ (list->string (int_to_mini_roman-helper number))))\n", "  (define (int_to_mini_roman-helper\
    \ number)\n    (cond\n      [(= number 1000) \"m\"]\n      [(= number 900) \"\
    cm\"]\n      [(= number 500) \"d\"]\n      [(= number 400) \"cd\"]\n      [(=\
    \ number 100) \"c\"]\n      [(= number 90) \"xc\"]\n      [(= number 50) \"l\"\
    ]\n      [(= number 40) \"xl\"]\n      [(= number 10) \"x\"]\n      [(= number\
    \ 9) \"ix\"]\n      [(= number 5) \"v\"]\n      [(= number 4) \"iv\"]\n      [(=\
    \ number 1) \"i\"]\n      [(= number 0) \"\"]\n      [else (string-append (int_to_mini_roman-helper\
    \ (quotient number 10))\n                           (int_to_mini_roman-helper\
    \ (remainder number 10)))]))\n  (string-downcase (int_to_mini_roman-helper number)))\n",
  "  (define (int_to_mini_roman_helper number)\n    (cond\n      [(= number 0) '()]\n\
    \      [(= number 1) '(i)]\n      [(= number 2) '(i i)]\n      [(= number 3) '(i\
    \ i i)]\n      [(= number 4) '(i v)]\n      [(= number 5) '(v)]\n      [(= number\
    \ 6) '(v i)]\n      [(= number 7) '(v i i)]\n      [(= number 8) '(v i i i)]\n\
    \      [(= number 9) '(i x)]\n      [(= number 10) '(x)]\n      [(= number 20)\
    \ '(x x)]\n      [(= number 30) '(x x x)]\n      [(= number 40) '(x l)]\n    \
    \  [(= number 50) '(l)]\n      [(= number 60) '(l x)]\n      [(= number 70) '(l\
    \ x x)]\n      [(= number 80) '(l x x x)]\n      [(= number 90) '(x c)]\n    \
    \  [(= number 100) '(c)]\n      [(= number 200) '(c c)]\n      [(= number 300)\
    \ '(c c c)]\n      [(= number 400) '(c d)]\n      [(= number 500) '(d)]\n    \
    \  [(= number 600) '(d c)]\n      [(= number 700) '(d c c)]\n      [(= number\
    \ 800) '(d c c c)]\n      [(= number 900) '(c m)]\n      [(= number 1000) '(m)]\n\
    \      [else (append (int_to_mini_roman_helper (/ number 10))\n              \
    \      (int_to_mini_roman_helper (modulo number 10)))]))\n  (string-join (int_to_mini_roman_helper\
    \ number) \"\"))\n", "  (define (int_to_mini_roman-helper number)\n    (cond\n\
    \      [(= number 1000) \"m\"]\n      [(= number 900) \"cm\"]\n      [(= number\
    \ 500) \"d\"]\n      [(= number 400) \"cd\"]\n      [(= number 100) \"c\"]\n \
    \     [(= number 90) \"xc\"]\n      [(= number 50) \"l\"]\n      [(= number 40)\
    \ \"xl\"]\n      [(= number 10) \"x\"]\n      [(= number 9) \"ix\"]\n      [(=\
    \ number 5) \"v\"]\n      [(= number 4) \"iv\"]\n      [(= number 1) \"i\"]\n\
    \      [else (string-append (int_to_mini_roman-helper (quotient number 10))\n\
    \                           (int_to_mini_roman-helper (remainder number 10)))]))\n\
    \  (string-downcase (int_to_mini_roman-helper number)))\n", "  (define (int_to_mini_roman-helper\
    \ number)\n    (cond ((= number 1000) \"m\")\n          ((= number 900) \"cm\"\
    )\n          ((= number 500) \"d\")\n          ((= number 400) \"cd\")\n     \
    \     ((= number 100) \"c\")\n          ((= number 90) \"xc\")\n          ((=\
    \ number 50) \"l\")\n          ((= number 40) \"xl\")\n          ((= number 10)\
    \ \"x\")\n          ((= number 9) \"ix\")\n          ((= number 5) \"v\")\n  \
    \        ((= number 4) \"iv\")\n          ((= number 1) \"i\")))\n  (cond ((=\
    \ number 0) \"\")\n        ((< number 10) (int_to_mini_roman-helper number))\n\
    \        (else (string-append (int_to_mini_roman-helper (/ number 10))\n     \
    \                        (int_to_mini_roman-helper (modulo number 10))))))\n",
  "  (define (int_to_mini_roman_helper number roman-string)\n    (cond\n      [(=\
    \ number 0) roman-string]\n      [(= number 1) (string-append roman-string \"\
    i\")]\n      [(= number 2) (string-append roman-string \"ii\")]\n      [(= number\
    \ 3) (string-append roman-string \"iii\")]\n      [(= number 4) (string-append\
    \ roman-string \"iv\")]\n      [(= number 5) (string-append roman-string \"v\"\
    )]\n      [(= number 6) (string-append roman-string \"vi\")]\n      [(= number\
    \ 7) (string-append roman-string \"vii\")]\n      [(= number 8) (string-append\
    \ roman-string \"viii\")]\n      [(= number 9) (string-append roman-string \"\
    ix\")]\n      [(= number 10) (string-append roman-string \"x\")]\n      [(= number\
    \ 11) (string-append roman-string \"xi\")]\n      [(= number 12) (string-append\
    \ roman-string \"xii\")]\n      [(= number 13) (string-append roman-string \"\
    xiii\")]\n      [(= number 14) (string-append roman-string \"xiv\")]\n      [(=\
    \ number 15) (string-append roman-string \"xv\")]\n      [(= number 16) (string-append\
    \ roman-string \"xvi\")]\n      [(= number 17) (string-append roman-string \"\
    xvii\")]\n      [(= number 18) (string-append roman-string \"xviii\")]\n     \
    \ [(= number 19) (string-append roman-string \"xix\")]\n      [(= number 20) (string-append\
    \ roman-string \"xx\")]\n      [(= number 30) (string-append roman-string \"xxx\"\
    )]\n      [(= number 40) (string-append roman-string \"xl\")]\n      [(= number\
    \ 50) (string-append roman-string \"l\")]\n      [(= number 60) (string-append\
    \ roman-string \"lx\")]\n      [(= number", "  (define (int_to_mini_roman_helper\
    \ number)\n    (cond\n      [(= number 1000) \"m\"]\n      [(= number 900) \"\
    cm\"]\n      [(= number 500) \"d\"]\n      [(= number 400) \"cd\"]\n      [(=\
    \ number 100) \"c\"]\n      [(= number 90) \"xc\"]\n      [(= number 50) \"l\"\
    ]\n      [(= number 40) \"xl\"]\n      [(= number 10) \"x\"]\n      [(= number\
    \ 9) \"ix\"]\n      [(= number 5) \"v\"]\n      [(= number 4) \"iv\"]\n      [(=\
    \ number 1) \"i\"]\n      [else (string-append (int_to_mini_roman_helper (quotient\
    \ number 10))\n                           (int_to_mini_roman_helper (remainder\
    \ number 10)))]))\n  (string-downcase (int_to_mini_roman_helper number)))\n",
  "  (define (int_to_mini_roman-helper number)\n    (cond\n      [(= number 1000)\
    \ \"m\"]\n      [(= number 900) \"cm\"]\n      [(= number 500) \"d\"]\n      [(=\
    \ number 400) \"cd\"]\n      [(= number 100) \"c\"]\n      [(= number 90) \"xc\"\
    ]\n      [(= number 50) \"l\"]\n      [(= number 40) \"xl\"]\n      [(= number\
    \ 10) \"x\"]\n      [(= number 9) \"ix\"]\n      [(= number 5) \"v\"]\n      [(=\
    \ number 4) \"iv\"]\n      [(= number 1) \"i\"]\n      [else (string-append (int_to_mini_roman-helper\
    \ (quotient number 10))\n                           (int_to_mini_roman-helper\
    \ (remainder number 10)))]))\n  (string-downcase (int_to_mini_roman-helper number)))\n",
  "  (define (int_to_mini_roman_helper number)\n    (cond\n      [(= number 1000)\
    \ 'm]\n      [(= number 900) 'cm]\n      [(= number 500) 'd]\n      [(= number\
    \ 400) 'cd]\n      [(= number 100) 'c]\n      [(= number 90) 'xc]\n      [(= number\
    \ 50) 'l]\n      [(= number 40) 'xl]\n      [(= number 10) 'x]\n      [(= number\
    \ 9) 'ix]\n      [(= number 5) 'v]\n      [(= number 4) 'iv]\n      [(= number\
    \ 1) 'i]\n      [else (cons (int_to_mini_roman_helper (quotient number 10))\n\
    \                   (int_to_mini_roman_helper (remainder number 10)))]))\n  (string-join\
    \ (int_to_mini_roman_helper number) \"\"))\n", "  (define (int_to_mini_roman_helper\
    \ number)\n    (cond [(= number 0) '()]\n          [(= number 1) '(i)]\n     \
    \     [(= number 2) '(i i)]\n          [(= number 3) '(i i i)]\n          [(=\
    \ number 4) '(i v)]\n          [(= number 5) '(v)]\n          [(= number 6) '(v\
    \ i)]\n          [(= number 7) '(v i i)]\n          [(= number 8) '(v i i i)]\n\
    \          [(= number 9) '(i x)]\n          [(= number 10) '(x)]\n          [(=\
    \ number 20) '(x x)]\n          [(= number 30) '(x x x)]\n          [(= number\
    \ 40) '(x l)]\n          [(= number 50) '(l)]\n          [(= number 60) '(l x)]\n\
    \          [(= number 70) '(l x x)]\n          [(= number 80) '(l x x x)]\n  \
    \        [(= number 90) '(x c)]\n          [(= number 100) '(c)]\n          [(=\
    \ number 200) '(c c)]\n          [(= number 300) '(c c c)]\n          [(= number\
    \ 400) '(c d)]\n          [(= number 500) '(d)]\n          [(= number 600) '(d\
    \ c)]\n          [(= number 700) '(d c c)]\n          [(= number 800) '(d c c\
    \ c)]\n          [(= number 900) '(c m)]\n          [(= number 1000) '(m)]\n \
    \         [else (append (int_to_mini_roman_helper (modulo number 1000))\n    \
    \                    (int_to_mini_roman_helper (/ number 1000)))]))\n  (string-join\
    \ (int_to_mini_roman_helper number) \"\"))\n", "  (define (int_to_mini_roman-helper\
    \ number)\n    (cond\n      [(= number 1000) 'm]\n      [(= number 900) 'cm]\n\
    \      [(= number 500) 'd]\n      [(= number 400) 'cd]\n      [(= number 100)\
    \ 'c]\n      [(= number 90) 'xc]\n      [(= number 50) 'l]\n      [(= number 40)\
    \ 'xl]\n      [(= number 10) 'x]\n      [(= number 9) 'ix]\n      [(= number 5)\
    \ 'v]\n      [(= number 4) 'iv]\n      [(= number 1) 'i]\n      [else (append\
    \ (int_to_mini_roman-helper (quotient number 10))\n                    (int_to_mini_roman-helper\
    \ (remainder number 10)))]))\n  (string-downcase (list->string (int_to_mini_roman-helper\
    \ number))))\n", "  (define (int_to_mini_roman_helper number)\n    (cond ((= number\
    \ 1000) 'm)\n          ((>= number 900) (cons 'c (int_to_mini_roman_helper (-\
    \ number 900))))\n          ((>= number 500) (cons 'd (int_to_mini_roman_helper\
    \ (- number 500))))\n          ((>= number 400) (cons 'c (int_to_mini_roman_helper\
    \ (- number 400))))\n          ((>= number 100) (cons 'c (int_to_mini_roman_helper\
    \ (- number 100))))\n          ((>= number 90) (cons 'x (int_to_mini_roman_helper\
    \ (- number 90))))\n          ((>= number 50) (cons 'l (int_to_mini_roman_helper\
    \ (- number 50))))\n          ((>= number 40) (cons 'x (int_to_mini_roman_helper\
    \ (- number 40))))\n          ((>= number 10) (cons 'x (int_to_mini_roman_helper\
    \ (- number 10))))\n          ((>= number 9) (cons 'i (int_to_mini_roman_helper\
    \ (- number 9))))\n          ((>= number 5) (cons 'v (int_to_mini_roman_helper\
    \ (- number 5))))\n          ((>= number 4) (cons 'i (int_to_mini_roman_helper\
    \ (- number 4))))\n          ((>= number 1) (cons 'i (int_to_mini_roman_helper\
    \ (- number 1))))\n          (else '())))\n  (string-join (int_to_mini_roman_helper\
    \ number) \"\"))\n", "  (define (int_to_mini_roman-helper number)\n    (cond\n\
    \      [(= number 1000) \"m\"]\n      [(= number 900) \"cm\"]\n      [(= number\
    \ 500) \"d\"]\n      [(= number 400) \"cd\"]\n      [(= number 100) \"c\"]\n \
    \     [(= number 90) \"xc\"]\n      [(= number 50) \"l\"]\n      [(= number 40)\
    \ \"xl\"]\n      [(= number 10) \"x\"]\n      [(= number 9) \"ix\"]\n      [(=\
    \ number 5) \"v\"]\n      [(= number 4) \"iv\"]\n      [(= number 1) \"i\"]\n\
    \      [else (string-append (int_to_mini_roman-helper (quotient number 10))\n\
    \                           (int_to_mini_roman-helper (remainder number 10)))]))\n\
    \  (string-downcase (int_to_mini_roman-helper number)))\n", "  (define (int_to_mini_roman_helper\
    \ number)\n    (cond\n      [(= number 1000) 'm]\n      [(= number 900) 'cm]\n\
    \      [(= number 500) 'd]\n      [(= number 400) 'cd]\n      [(= number 100)\
    \ 'c]\n      [(= number 90) 'xc]\n      [(= number 50) 'l]\n      [(= number 40)\
    \ 'xl]\n      [(= number 10) 'x]\n      [(= number 9) 'ix]\n      [(= number 5)\
    \ 'v]\n      [(= number 4) 'iv]\n      [(= number 1) 'i]\n      [else (append\
    \ (int_to_mini_roman_helper (quotient number 10))\n                    (int_to_mini_roman_helper\
    \ (remainder number 10)))]))\n  (string-downcase (list->string (int_to_mini_roman_helper\
    \ number))))\n", "  (define (int_to_mini_roman_helper number)\n    (cond\n   \
    \   [(= number 1000) \"m\"]\n      [(= number 900) \"cm\"]\n      [(= number 500)\
    \ \"d\"]\n      [(= number 400) \"cd\"]\n      [(= number 100) \"c\"]\n      [(=\
    \ number 90) \"xc\"]\n      [(= number 50) \"l\"]\n      [(= number 40) \"xl\"\
    ]\n      [(= number 10) \"x\"]\n      [(= number 9) \"ix\"]\n      [(= number\
    \ 5) \"v\"]\n      [(= number 4) \"iv\"]\n      [(= number 1) \"i\"]\n      [else\
    \ (string-append (int_to_mini_roman_helper (quotient number 10))\n           \
    \                (int_to_mini_roman_helper (remainder number 10)))]))\n  (string-downcase\
    \ (int_to_mini_roman_helper number)))\n", "  (define (int_to_mini_roman_helper\
    \ number)\n    (cond\n      [(= number 0) '()]\n      [(= number 1) '(i)]\n  \
    \    [(= number 2) '(i i)]\n      [(= number 3) '(i i i)]\n      [(= number 4)\
    \ '(i v)]\n      [(= number 5) '(v)]\n      [(= number 6) '(v i)]\n      [(= number\
    \ 7) '(v i i)]\n      [(= number 8) '(v i i i)]\n      [(= number 9) '(i x)]\n\
    \      [(= number 10) '(x)]\n      [(= number 20) '(x x)]\n      [(= number 30)\
    \ '(x x x)]\n      [(= number 40) '(x l)]\n      [(= number 50) '(l)]\n      [(=\
    \ number 60) '(l x)]\n      [(= number 70) '(l x x)]\n      [(= number 80) '(l\
    \ x x x)]\n      [(= number 90) '(x c)]\n      [(= number 100) '(c)]\n      [(=\
    \ number 200) '(c c)]\n      [(= number 300) '(c c c)]\n      [(= number 400)\
    \ '(c d)]\n      [(= number 500) '(d)]\n      [(= number 600) '(d c)]\n      [(=\
    \ number 700) '(d c c)]\n      [(= number 800) '(d c c c)]\n      [(= number 900)\
    \ '(c m)]\n      [(= number 1000) '(m)]\n      [else (append (int_to_mini_roman_helper\
    \ (/ number 10))\n                    (int_to_mini_roman_helper (modulo number\
    \ 10)))]))\n  (string-join (int_to_mini_roman_helper number) \"\"))\n", "  (define\
    \ (int_to_mini_roman_helper number)\n    (cond ((= number 1000) \"m\")\n     \
    \     ((= number 900) \"cm\")\n          ((= number 500) \"d\")\n          ((=\
    \ number 400) \"cd\")\n          ((= number 100) \"c\")\n          ((= number\
    \ 90) \"xc\")\n          ((= number 50) \"l\")\n          ((= number 40) \"xl\"\
    )\n          ((= number 10) \"x\")\n          ((= number 9) \"ix\")\n        \
    \  ((= number 5) \"v\")\n          ((= number 4) \"iv\")\n          ((= number\
    \ 1) \"i\")))\n  (define (int_to_mini_roman_helper_2 number)\n    (cond ((= number\
    \ 1000) \"m\")\n          ((= number 900) \"cm\")\n          ((= number 500) \"\
    d\")\n          ((= number 400) \"cd\")\n          ((= number 100) \"c\")\n  \
    \        ((= number 90) \"xc\")\n          ((= number 50) \"l\")\n          ((=\
    \ number 40) \"xl\")\n          ((= number 10) \"x\")\n          ((= number 9)\
    \ \"ix\")\n          ((= number 5) \"v\")\n          ((= number 4) \"iv\")\n \
    \         ((= number 1) \"i\")))\n  (cond ((= number 0) \"\")\n        ((= number\
    \ 1) (int_to_mini_roman_helper 1))\n        ((= number 2) (string-append (int_to_mini_roman_helper\
    \ 1) (int_to_mini_roman_helper 1)))\n        ((= number 3) (string-append (int_to_mini_roman_helper\
    \ 1) (int_to_mini_roman_helper 1) (int_to_mini_roman_helper 1)))\n        ((=\
    \ number 4) (int_to_mini_roman_helper 4))\n        ((= number 5) (int_to_mini_roman_helper\
    \ 5))\n        ((= number 6) (string-append (int_to_mini_roman_helper 5) (int_to_mini_roman_helper\
    \ 1)))\n        ((= number 7) (string-append (int", "  (define (int_to_mini_roman_helper\
    \ number)\n    (cond\n      [(= number 0) '()]\n      [(= number 1) '(i)]\n  \
    \    [(= number 2) '(i i)]\n      [(= number 3) '(i i i)]\n      [(= number 4)\
    \ '(i v)]\n      [(= number 5) '(v)]\n      [(= number 6) '(v i)]\n      [(= number\
    \ 7) '(v i i)]\n      [(= number 8) '(v i i i)]\n      [(= number 9) '(i x)]\n\
    \      [(= number 10) '(x)]\n      [(= number 20) '(x x)]\n      [(= number 30)\
    \ '(x x x)]\n      [(= number 40) '(x l)]\n      [(= number 50) '(l)]\n      [(=\
    \ number 60) '(l x)]\n      [(= number 70) '(l x x)]\n      [(= number 80) '(l\
    \ x x x)]\n      [(= number 90) '(x c)]\n      [(= number 100) '(c)]\n      [(=\
    \ number 200) '(c c)]\n      [(= number 300) '(c c c)]\n      [(= number 400)\
    \ '(c d)]\n      [(= number 500) '(d)]\n      [(= number 600) '(d c)]\n      [(=\
    \ number 700) '(d c c)]\n      [(= number 800) '(d c c c)]\n      [(= number 900)\
    \ '(c m)]\n      [(= number 1000) '(m)]\n      [else (append (int_to_mini_roman_helper\
    \ (/ number 10))\n                    (int_to_mini_roman_helper (modulo number\
    \ 10)))]))\n  (string-join (int_to_mini_roman_helper number) \"\"))\n", "  (define\
    \ (int_to_mini_roman_helper number)\n    (cond\n      [(= number 1000) \"m\"]\n\
    \      [(= number 900) \"cm\"]\n      [(= number 500) \"d\"]\n      [(= number\
    \ 400) \"cd\"]\n      [(= number 100) \"c\"]\n      [(= number 90) \"xc\"]\n \
    \     [(= number 50) \"l\"]\n      [(= number 40) \"xl\"]\n      [(= number 10)\
    \ \"x\"]\n      [(= number 9) \"ix\"]\n      [(= number 5) \"v\"]\n      [(= number\
    \ 4) \"iv\"]\n      [(= number 1) \"i\"]\n      [else (string-append (int_to_mini_roman_helper\
    \ (quotient number 10))\n                           (int_to_mini_roman_helper\
    \ (remainder number 10)))]))\n  (string-downcase (int_to_mini_roman_helper number)))\n",
  "  (define (int_to_mini_roman_helper number)\n    (cond\n      [(= number 0) '()]\n\
    \      [(= number 1) '(i)]\n      [(= number 2) '(i i)]\n      [(= number 3) '(i\
    \ i i)]\n      [(= number 4) '(i v)]\n      [(= number 5) '(v)]\n      [(= number\
    \ 6) '(v i)]\n      [(= number 7) '(v i i)]\n      [(= number 8) '(v i i i)]\n\
    \      [(= number 9) '(i x)]\n      [(= number 10) '(x)]\n      [(= number 20)\
    \ '(x x)]\n      [(= number 30) '(x x x)]\n      [(= number 40) '(x l)]\n    \
    \  [(= number 50) '(l)]\n      [(= number 60) '(l x)]\n      [(= number 70) '(l\
    \ x x)]\n      [(= number 80) '(l x x x)]\n      [(= number 90) '(x c)]\n    \
    \  [(= number 100) '(c)]\n      [(= number 200) '(c c)]\n      [(= number 300)\
    \ '(c c c)]\n      [(= number 400) '(c d)]\n      [(= number 500) '(d)]\n    \
    \  [(= number 600) '(d c)]\n      [(= number 700) '(d c c)]\n      [(= number\
    \ 800) '(d c c c)]\n      [(= number 900) '(c m)]\n      [(= number 1000) '(m)]\n\
    \      [else (append (int_to_mini_roman_helper (quotient number 10))\n       \
    \             (int_to_mini_roman_helper (remainder number 10)))]))\n  (string-join\
    \ (int_to_mini_roman_helper number) \"\"))\n", "  (define (int_to_mini_roman_helper\
    \ number)\n    (cond\n      [(= number 1000) \"m\"]\n      [(= number 900) \"\
    cm\"]\n      [(= number 500) \"d\"]\n      [(= number 400) \"cd\"]\n      [(=\
    \ number 100) \"c\"]\n      [(= number 90) \"xc\"]\n      [(= number 50) \"l\"\
    ]\n      [(= number 40) \"xl\"]\n      [(= number 10) \"x\"]\n      [(= number\
    \ 9) \"ix\"]\n      [(= number 5) \"v\"]\n      [(= number 4) \"iv\"]\n      [(=\
    \ number 1) \"i\"]\n      [else (string-append (int_to_mini_roman_helper (quotient\
    \ number 10))\n                           (int_to_mini_roman_helper (remainder\
    \ number 10)))]))\n  (string-downcase (int_to_mini_roman_helper number)))\n",
  "  (define (int_to_mini_roman-helper number)\n    (cond\n      [(= number 1000)\
    \ \"m\"]\n      [(= number 900) \"cm\"]\n      [(= number 500) \"d\"]\n      [(=\
    \ number 400) \"cd\"]\n      [(= number 100) \"c\"]\n      [(= number 90) \"xc\"\
    ]\n      [(= number 50) \"l\"]\n      [(= number 40) \"xl\"]\n      [(= number\
    \ 10) \"x\"]\n      [(= number 9) \"ix\"]\n      [(= number 5) \"v\"]\n      [(=\
    \ number 4) \"iv\"]\n      [(= number 1) \"i\"]\n      [else (string-append (int_to_mini_roman-helper\
    \ (quotient number 10)) (int_to_mini_roman-helper (remainder number 10)))]))\n\
    \  (string-downcase (int_to_mini_roman-helper number)))\n", "  (define (int_to_mini_roman_helper\
    \ number)\n    (cond\n      [(= number 0) '()]\n      [(= number 1) '(i)]\n  \
    \    [(= number 2) '(i i)]\n      [(= number 3) '(i i i)]\n      [(= number 4)\
    \ '(i v)]\n      [(= number 5) '(v)]\n      [(= number 6) '(v i)]\n      [(= number\
    \ 7) '(v i i)]\n      [(= number 8) '(v i i i)]\n      [(= number 9) '(i x)]\n\
    \      [(= number 10) '(x)]\n      [(= number 20) '(x x)]\n      [(= number 30)\
    \ '(x x x)]\n      [(= number 40) '(x l)]\n      [(= number 50) '(l)]\n      [(=\
    \ number 60) '(l x)]\n      [(= number 70) '(l x x)]\n      [(= number 80) '(l\
    \ x x x)]\n      [(= number 90) '(x c)]\n      [(= number 100) '(c)]\n      [(=\
    \ number 200) '(c c)]\n      [(= number 300) '(c c c)]\n      [(= number 400)\
    \ '(c d)]\n      [(= number 500) '(d)]\n      [(= number 600) '(d c)]\n      [(=\
    \ number 700) '(d c c)]\n      [(= number 800) '(d c c c)]\n      [(= number 900)\
    \ '(c m)]\n      [(= number 1000) '(m)]\n      [else (append (int_to_mini_roman_helper\
    \ (quotient number 10))\n                    (int_to_mini_roman_helper (remainder\
    \ number 10)))]))\n  (string-join (int_to_mini_roman_helper number) \"\"))\n",
  "  (define (int_to_mini_roman-helper number)\n    (cond\n      [(= number 1000)\
    \ 'm]\n      [(= number 900) 'cm]\n      [(= number 500) 'd]\n      [(= number\
    \ 400) 'cd]\n      [(= number 100) 'c]\n      [(= number 90) 'xc]\n      [(= number\
    \ 50) 'l]\n      [(= number 40) 'xl]\n      [(= number 10) 'x]\n      [(= number\
    \ 9) 'ix]\n      [(= number 5) 'v]\n      [(= number 4) 'iv]\n      [(= number\
    \ 1) 'i]\n      [else (append (int_to_mini_roman-helper (quotient number 10))\n\
    \                    (int_to_mini_roman-helper (remainder number 10)))]))\n  (symbol->string\
    \ (int_to_mini_roman-helper number)))\n", "  (define (int_to_mini_roman-helper\
    \ number)\n    (cond\n      [(= number 1000) \"m\"]\n      [(= number 900) \"\
    cm\"]\n      [(= number 500) \"d\"]\n      [(= number 400) \"cd\"]\n      [(=\
    \ number 100) \"c\"]\n      [(= number 90) \"xc\"]\n      [(= number 50) \"l\"\
    ]\n      [(= number 40) \"xl\"]\n      [(= number 10) \"x\"]\n      [(= number\
    \ 9) \"ix\"]\n      [(= number 5) \"v\"]\n      [(= number 4) \"iv\"]\n      [(=\
    \ number 1) \"i\"]\n      [else (string-append (int_to_mini_roman-helper (quotient\
    \ number 10))\n                           (int_to_mini_roman-helper (remainder\
    \ number 10)))]))\n  (string-downcase (int_to_mini_roman-helper number)))\n",
  "  (define (int_to_mini_roman_helper number)\n    (cond\n      [(= number 1000)\
    \ \"m\"]\n      [(= number 900) \"cm\"]\n      [(= number 500) \"d\"]\n      [(=\
    \ number 400) \"cd\"]\n      [(= number 100) \"c\"]\n      [(= number 90) \"xc\"\
    ]\n      [(= number 50) \"l\"]\n      [(= number 40) \"xl\"]\n      [(= number\
    \ 10) \"x\"]\n      [(= number 9) \"ix\"]\n      [(= number 5) \"v\"]\n      [(=\
    \ number 4) \"iv\"]\n      [(= number 1) \"i\"]\n      [else (string-append (int_to_mini_roman_helper\
    \ (quotient number 10))\n                           (int_to_mini_roman_helper\
    \ (remainder number 10)))]))\n  (string-downcase (int_to_mini_roman_helper number)))\n",
  "  (define (convert-digit digit)\n    (cond ((= digit 1) \"i\")\n          ((= digit\
    \ 2) \"ii\")\n          ((= digit 3) \"iii\")\n          ((= digit 4) \"iv\")\n\
    \          ((= digit 5) \"v\")\n          ((= digit 6) \"vi\")\n          ((=\
    \ digit 7) \"vii\")\n          ((= digit 8) \"viii\")\n          ((= digit 9)\
    \ \"ix\")))\n  (define (convert-tens digit)\n    (cond ((= digit 1) \"x\")\n \
    \         ((= digit 2) \"xx\")\n          ((= digit 3) \"xxx\")\n          ((=\
    \ digit 4) \"xl\")\n          ((= digit 5) \"l\")\n          ((= digit 6) \"lx\"\
    )\n          ((= digit 7) \"lxx\")\n          ((= digit 8) \"lxxx\")\n       \
    \   ((= digit 9) \"xc\")))\n  (define (convert-hundreds digit)\n    (cond ((=\
    \ digit 1) \"c\")\n          ((= digit 2) \"cc\")\n          ((= digit 3) \"ccc\"\
    )\n          ((= digit 4) \"cd\")\n          ((= digit 5) \"d\")\n          ((=\
    \ digit 6) \"dc\")\n          ((= digit 7) \"dcc\")\n          ((= digit 8) \"\
    dccc\")\n          ((= digit 9) \"cm\")))\n  (define (convert-thousands digit)\n\
    \    (cond ((= digit 1) \"m\")\n          ((= digit 2) \"mm\")\n          ((=\
    \ digit 3) \"mmm\")))\n  (define (convert-number number)\n    (cond ((<= number\
    \ 1000) (convert-thousands (/ number 1000)))\n          ((<= number 100) (convert-hundreds\
    \ (/ number 100)))\n          ((<= number 10) (convert-tens (/ number 10)))\n\
    \          ((<= number 1) (convert-digit number))))\n  (convert-number number))\n",
  "  (define (int_to_mini_roman-helper number roman-string)\n    (cond\n      [(=\
    \ number 0) roman-string]\n      [(>= number 1000) (int_to_mini_roman-helper (-\
    \ number 1000) (string-append roman-string \"m\"))]\n      [(>= number 900) (int_to_mini_roman-helper\
    \ (- number 900) (string-append roman-string \"cm\"))]\n      [(>= number 500)\
    \ (int_to_mini_roman-helper (- number 500) (string-append roman-string \"d\"))]\n\
    \      [(>= number 400) (int_to_mini_roman-helper (- number 400) (string-append\
    \ roman-string \"cd\"))]\n      [(>= number 100) (int_to_mini_roman-helper (-\
    \ number 100) (string-append roman-string \"c\"))]\n      [(>= number 90) (int_to_mini_roman-helper\
    \ (- number 90) (string-append roman-string \"xc\"))]\n      [(>= number 50) (int_to_mini_roman-helper\
    \ (- number 50) (string-append roman-string \"l\"))]\n      [(>= number 40) (int_to_mini_roman-helper\
    \ (- number 40) (string-append roman-string \"xl\"))]\n      [(>= number 10) (int_to_mini_roman-helper\
    \ (- number 10) (string-append roman-string \"x\"))]\n      [(>= number 9) (int_to_mini_roman-helper\
    \ (- number 9) (string-append roman-string \"ix\"))]\n      [(>= number 5) (int_to_mini_roman-helper\
    \ (- number 5) (string-append roman-string \"v\"))]\n      [(>= number 4) (int_to_mini_roman-helper\
    \ (- number 4) (string-append roman-string \"iv\"))]\n      [(>= number 1) (int_to_mini_roman-helper\
    \ (- number 1) (string-append roman-string \"i\"))]))\n  (int_to_mini_roman-helper\
    \ number \"\"))\n\n", "  (define (int_to_mini_roman_helper number)\n    (cond\n\
    \      [(= number 0) '()]\n      [(= number 1) '(i)]\n      [(= number 2) '(i\
    \ i)]\n      [(= number 3) '(i i i)]\n      [(= number 4) '(i v)]\n      [(= number\
    \ 5) '(v)]\n      [(= number 6) '(v i)]\n      [(= number 7) '(v i i)]\n     \
    \ [(= number 8) '(v i i i)]\n      [(= number 9) '(i x)]\n      [(= number 10)\
    \ '(x)]\n      [(= number 20) '(x x)]\n      [(= number 30) '(x x x)]\n      [(=\
    \ number 40) '(x l)]\n      [(= number 50) '(l)]\n      [(= number 60) '(l x)]\n\
    \      [(= number 70) '(l x x)]\n      [(= number 80) '(l x x x)]\n      [(= number\
    \ 90) '(x c)]\n      [(= number 100) '(c)]\n      [(= number 200) '(c c)]\n  \
    \    [(= number 300) '(c c c)]\n      [(= number 400) '(c d)]\n      [(= number\
    \ 500) '(d)]\n      [(= number 600) '(d c)]\n      [(= number 700) '(d c c)]\n\
    \      [(= number 800) '(d c c c)]\n      [(= number 900) '(c m)]\n      [(= number\
    \ 1000) '(m)]\n      [else (append (int_to_mini_roman_helper (quotient number\
    \ 10))\n                    (int_to_mini_roman_helper (remainder number 10)))]))\n\
    \  (string-join (int_to_mini_roman_helper number) \"\"))\n", "  (define (int_to_mini_roman-helper\
    \ number)\n    (cond\n      [(= number 1000) 'm]\n      [(= number 900) 'cm]\n\
    \      [(= number 500) 'd]\n      [(= number 400) 'cd]\n      [(= number 100)\
    \ 'c]\n      [(= number 90) 'xc]\n      [(= number 50) 'l]\n      [(= number 40)\
    \ 'xl]\n      [(= number 10) 'x]\n      [(= number 9) 'ix]\n      [(= number 5)\
    \ 'v]\n      [(= number 4) 'iv]\n      [(= number 1) 'i]\n      [else (append\
    \ (int_to_mini_roman-helper (quotient number 10))\n                    (int_to_mini_roman-helper\
    \ (remainder number 10)))]))\n  (string-downcase (list->string (int_to_mini_roman-helper\
    \ number))))\n", "  (define (int_to_mini_roman_helper number roman-string)\n \
    \   (cond\n      [(= number 0) roman-string]\n      [(= number 1000) (string-append\
    \ roman-string \"m\")]\n      [(= number 900) (string-append roman-string \"cm\"\
    )]\n      [(= number 500) (string-append roman-string \"d\")]\n      [(= number\
    \ 400) (string-append roman-string \"cd\")]\n      [(= number 100) (string-append\
    \ roman-string \"c\")]\n      [(= number 90) (string-append roman-string \"xc\"\
    )]\n      [(= number 50) (string-append roman-string \"l\")]\n      [(= number\
    \ 40) (string-append roman-string \"xl\")]\n      [(= number 10) (string-append\
    \ roman-string \"x\")]\n      [(= number 9) (string-append roman-string \"ix\"\
    )]\n      [(= number 5) (string-append roman-string \"v\")]\n      [(= number\
    \ 4) (string-append roman-string \"iv\")]\n      [(= number 1) (string-append\
    \ roman-string \"i\")]\n      [else (int_to_mini_roman_helper (- number 1) (string-append\
    \ roman-string \"i\"))]))\n  (string-downcase (int_to_mini_roman_helper number\
    \ \"\")))\n", "  (define (int_to_mini_roman-helper number)\n    (cond\n      [(=\
    \ number 1000) 'm]\n      [(= number 900) 'cm]\n      [(= number 500) 'd]\n  \
    \    [(= number 400) 'cd]\n      [(= number 100) 'c]\n      [(= number 90) 'xc]\n\
    \      [(= number 50) 'l]\n      [(= number 40) 'xl]\n      [(= number 10) 'x]\n\
    \      [(= number 9) 'ix]\n      [(= number 5) 'v]\n      [(= number 4) 'iv]\n\
    \      [(= number 1) 'i]\n      [else (append (int_to_mini_roman-helper (quotient\
    \ number 10))\n                    (int_to_mini_roman-helper (remainder number\
    \ 10)))]))\n  (string-downcase (list->string (int_to_mini_roman-helper number))))\n",
  "  (define (int_to_mini_roman_helper number)\n    (cond\n      [(= number 1000)\
    \ 'm]\n      [(= number 900) 'cm]\n      [(= number 500) 'd]\n      [(= number\
    \ 400) 'cd]\n      [(= number 100) 'c]\n      [(= number 90) 'xc]\n      [(= number\
    \ 50) 'l]\n      [(= number 40) 'xl]\n      [(= number 10) 'x]\n      [(= number\
    \ 9) 'ix]\n      [(= number 5) 'v]\n      [(= number 4) 'iv]\n      [(= number\
    \ 1) 'i]\n      [else (append (int_to_mini_roman_helper (quotient number 10))\n\
    \                    (int_to_mini_roman_helper (remainder number 10)))]))\n  (string-downcase\
    \ (list->string (int_to_mini_roman_helper number))))\n", "  (define (int_to_mini_roman_helper\
    \ number)\n    (cond ((= number 1000) \"m\")\n          ((= number 900) \"cm\"\
    )\n          ((= number 500) \"d\")\n          ((= number 400) \"cd\")\n     \
    \     ((= number 100) \"c\")\n          ((= number 90) \"xc\")\n          ((=\
    \ number 50) \"l\")\n          ((= number 40) \"xl\")\n          ((= number 10)\
    \ \"x\")\n          ((= number 9) \"ix\")\n          ((= number 5) \"v\")\n  \
    \        ((= number 4) \"iv\")\n          ((= number 1) \"i\")))\n  (define (int_to_mini_roman_helper_2\
    \ number)\n    (cond ((= number 1000) (list \"m\"))\n          ((= number 900)\
    \ (list \"c\" \"m\"))\n          ((= number 500) (list \"d\"))\n          ((=\
    \ number 400) (list \"c\" \"d\"))\n          ((= number 100) (list \"c\"))\n \
    \         ((= number 90) (list \"x\" \"c\"))\n          ((= number 50) (list \"\
    l\"))\n          ((= number 40) (list \"x\" \"l\"))\n          ((= number 10)\
    \ (list \"x\"))\n          ((= number 9) (list \"i\" \"x\"))\n          ((= number\
    \ 5) (list \"v\"))\n          ((= number 4) (list \"i\" \"v\"))\n          ((=\
    \ number 1) (list \"i\"))))\n  (define (int_to_mini_roman_helper_3 number)\n \
    \   (cond ((= number 1000) (list \"m\"))\n          ((= number 900) (list \"c\"\
    \ \"m\"))\n          ((= number 500) (list \"d\"))\n          ((= number 400)\
    \ (list \"c\" \"d\"))\n          ((= number 100) (list \"c\"))\n          ((=\
    \ number 90) (list \"x\" \"c\"))\n          ((= number 50) (list \"l\"))\n   \
    \       ((= number 40) (list \"x\" \"l\"))\n          ((= number 10) (list \"\
    x\"))\n          ((= number 9) (list \"i\" \"x\"))\n          ((= number 5) (list",
  "  (define (int_to_mini_roman-helper number)\n    (cond ((= number 0) '())\n   \
    \       ((= number 1) '(i))\n          ((= number 2) '(i i))\n          ((= number\
    \ 3) '(i i i))\n          ((= number 4) '(i v))\n          ((= number 5) '(v))\n\
    \          ((= number 6) '(v i))\n          ((= number 7) '(v i i))\n        \
    \  ((= number 8) '(v i i i))\n          ((= number 9) '(i x))\n          ((= number\
    \ 10) '(x))\n          ((= number 20) '(x x))\n          ((= number 30) '(x x\
    \ x))\n          ((= number 40) '(x l))\n          ((= number 50) '(l))\n    \
    \      ((= number 60) '(l x))\n          ((= number 70) '(l x x))\n          ((=\
    \ number 80) '(l x x x))\n          ((= number 90) '(x c))\n          ((= number\
    \ 100) '(c))\n          ((= number 200) '(c c))\n          ((= number 300) '(c\
    \ c c))\n          ((= number 400) '(c d))\n          ((= number 500) '(d))\n\
    \          ((= number 600) '(d c))\n          ((= number 700) '(d c c))\n    \
    \      ((= number 800) '(d c c c))\n          ((= number 900) '(c m))\n      \
    \    ((= number 1000) '(m))\n          (else (error \"number out of range\"))))\n\
    \  (string-join (int_to_mini_roman-helper number) \"\"))\n", "  (define (int_to_mini_roman_helper\
    \ number)\n    (cond\n      [(= number 1000) \"m\"]\n      [(= number 900) \"\
    cm\"]\n      [(= number 500) \"d\"]\n      [(= number 400) \"cd\"]\n      [(=\
    \ number 100) \"c\"]\n      [(= number 90) \"xc\"]\n      [(= number 50) \"l\"\
    ]\n      [(= number 40) \"xl\"]\n      [(= number 10) \"x\"]\n      [(= number\
    \ 9) \"ix\"]\n      [(= number 5) \"v\"]\n      [(= number 4) \"iv\"]\n      [(=\
    \ number 1) \"i\"]\n      [else (string-append (int_to_mini_roman_helper (quotient\
    \ number 10))\n                           (int_to_mini_roman_helper (remainder\
    \ number 10)))]))\n  (string-downcase (int_to_mini_roman_helper number)))\n",
  "  (define (int_to_mini_roman-helper number)\n    (cond ((= number 0) \"\")\n  \
    \        ((= number 1000) \"m\")\n          ((= number 900) \"cm\")\n        \
    \  ((= number 500) \"d\")\n          ((= number 400) \"cd\")\n          ((= number\
    \ 100) \"c\")\n          ((= number 90) \"xc\")\n          ((= number 50) \"l\"\
    )\n          ((= number 40) \"xl\")\n          ((= number 10) \"x\")\n       \
    \   ((= number 9) \"ix\")\n          ((= number 5) \"v\")\n          ((= number\
    \ 4) \"iv\")\n          ((= number 1) \"i\")))\n  (string-downcase (int_to_mini_roman-helper\
    \ number)))\n", "  (define (int_to_mini_roman-helper number)\n    (cond\n    \
    \  [(= number 0) '()]\n      [(= number 1) '(i)]\n      [(= number 2) '(i i)]\n\
    \      [(= number 3) '(i i i)]\n      [(= number 4) '(i v)]\n      [(= number\
    \ 5) '(v)]\n      [(= number 6) '(v i)]\n      [(= number 7) '(v i i)]\n     \
    \ [(= number 8) '(v i i i)]\n      [(= number 9) '(i x)]\n      [(= number 10)\
    \ '(x)]\n      [(= number 20) '(x x)]\n      [(= number 30) '(x x x)]\n      [(=\
    \ number 40) '(x l)]\n      [(= number 50) '(l)]\n      [(= number 60) '(l x)]\n\
    \      [(= number 70) '(l x x)]\n      [(= number 80) '(l x x x)]\n      [(= number\
    \ 90) '(x c)]\n      [(= number 100) '(c)]\n      [(= number 200) '(c c)]\n  \
    \    [(= number 300) '(c c c)]\n      [(= number 400) '(c d)]\n      [(= number\
    \ 500) '(d)]\n      [(= number 600) '(d c)]\n      [(= number 700) '(d c c)]\n\
    \      [(= number 800) '(d c c c)]\n      [(= number 900) '(c m)]\n      [(= number\
    \ 1000) '(m)]\n      [else (append (int_to_mini_roman-helper (/ number 10))\n\
    \                    (int_to_mini_roman-helper (remainder number 10)))]))\n  (string-join\
    \ (int_to_mini_roman-helper number) \"\"))\n", "  (define (int_to_mini_roman-helper\
    \ number)\n    (cond\n      [(= number 1000) 'm]\n      [(= number 900) 'cm]\n\
    \      [(= number 500) 'd]\n      [(= number 400) 'cd]\n      [(= number 100)\
    \ 'c]\n      [(= number 90) 'xc]\n      [(= number 50) 'l]\n      [(= number 40)\
    \ 'xl]\n      [(= number 10) 'x]\n      [(= number 9) 'ix]\n      [(= number 5)\
    \ 'v]\n      [(= number 4) 'iv]\n      [(= number 1) 'i]\n      [else (append\
    \ (int_to_mini_roman-helper (quotient number 10))\n                    (int_to_mini_roman-helper\
    \ (remainder number 10)))]))\n  (string-downcase (list->string (int_to_mini_roman-helper\
    \ number))))\n", "  (define (int_to_mini_roman_helper number)\n    (cond ((= number\
    \ 1000) \"m\")\n          ((= number 900) \"cm\")\n          ((= number 500) \"\
    d\")\n          ((= number 400) \"cd\")\n          ((= number 100) \"c\")\n  \
    \        ((= number 90) \"xc\")\n          ((= number 50) \"l\")\n          ((=\
    \ number 40) \"xl\")\n          ((= number 10) \"x\")\n          ((= number 9)\
    \ \"ix\")\n          ((= number 5) \"v\")\n          ((= number 4) \"iv\")\n \
    \         ((= number 1) \"i\")))\n  (string-downcase (int_to_mini_roman_helper\
    \ number)))\n", "  (define (int_to_mini_roman_helper number)\n    (cond\n    \
    \  [(= number 0) '()]\n      [(= number 1) '(i)]\n      [(= number 2) '(i i)]\n\
    \      [(= number 3) '(i i i)]\n      [(= number 4) '(i v)]\n      [(= number\
    \ 5) '(v)]\n      [(= number 6) '(v i)]\n      [(= number 7) '(v i i)]\n     \
    \ [(= number 8) '(v i i i)]\n      [(= number 9) '(i x)]\n      [(= number 10)\
    \ '(x)]\n      [(= number 20) '(x x)]\n      [(= number 30) '(x x x)]\n      [(=\
    \ number 40) '(x l)]\n      [(= number 50) '(l)]\n      [(= number 60) '(l x)]\n\
    \      [(= number 70) '(l x x)]\n      [(= number 80) '(l x x x)]\n      [(= number\
    \ 90) '(x c)]\n      [(= number 100) '(c)]\n      [(= number 200) '(c c)]\n  \
    \    [(= number 300) '(c c c)]\n      [(= number 400) '(c d)]\n      [(= number\
    \ 500) '(d)]\n      [(= number 600) '(d c)]\n      [(= number 700) '(d c c)]\n\
    \      [(= number 800) '(d c c c)]\n      [(= number 900) '(c m)]\n      [(= number\
    \ 1000) '(m)]\n      [else (append (int_to_mini_roman_helper (quotient number\
    \ 10))\n                    (int_to_mini_roman_helper (remainder number 10)))]))\n\
    \  (string-join (int_to_mini_roman_helper number) \"\"))\n", "  (define (int_to_mini_roman-helper\
    \ number)\n    (cond\n      [(= number 1000) \"m\"]\n      [(= number 900) \"\
    cm\"]\n      [(= number 500) \"d\"]\n      [(= number 400) \"cd\"]\n      [(=\
    \ number 100) \"c\"]\n      [(= number 90) \"xc\"]\n      [(= number 50) \"l\"\
    ]\n      [(= number 40) \"xl\"]\n      [(= number 10) \"x\"]\n      [(= number\
    \ 9) \"ix\"]\n      [(= number 5) \"v\"]\n      [(= number 4) \"iv\"]\n      [(=\
    \ number 1) \"i\"]\n      [else (string-append (int_to_mini_roman-helper (quotient\
    \ number 10))\n                           (int_to_mini_roman-helper (remainder\
    \ number 10)))]))\n  (string-downcase (int_to_mini_roman-helper number)))\n",
  "  (define (int_to_mini_roman_helper number)\n    (cond\n      [(= number 1000)\
    \ \"m\"]\n      [(= number 900) \"cm\"]\n      [(= number 500) \"d\"]\n      [(=\
    \ number 400) \"cd\"]\n      [(= number 100) \"c\"]\n      [(= number 90) \"xc\"\
    ]\n      [(= number 50) \"l\"]\n      [(= number 40) \"xl\"]\n      [(= number\
    \ 10) \"x\"]\n      [(= number 9) \"ix\"]\n      [(= number 5) \"v\"]\n      [(=\
    \ number 4) \"iv\"]\n      [(= number 1) \"i\"]\n      [else (string-append (int_to_mini_roman_helper\
    \ (quotient number 10))\n                           (int_to_mini_roman_helper\
    \ (remainder number 10)))]))\n  (string-downcase (int_to_mini_roman_helper number)))\n",
  "  (define (int_to_mini_roman_helper number)\n    (cond\n      [(= number 0) '()]\n\
    \      [(= number 1) '(i)]\n      [(= number 2) '(i i)]\n      [(= number 3) '(i\
    \ i i)]\n      [(= number 4) '(i v)]\n      [(= number 5) '(v)]\n      [(= number\
    \ 6) '(v i)]\n      [(= number 7) '(v i i)]\n      [(= number 8) '(v i i i)]\n\
    \      [(= number 9) '(i x)]\n      [(= number 10) '(x)]\n      [(= number 20)\
    \ '(x x)]\n      [(= number 30) '(x x x)]\n      [(= number 40) '(x l)]\n    \
    \  [(= number 50) '(l)]\n      [(= number 60) '(l x)]\n      [(= number 70) '(l\
    \ x x)]\n      [(= number 80) '(l x x x)]\n      [(= number 90) '(x c)]\n    \
    \  [(= number 100) '(c)]\n      [(= number 200) '(c c)]\n      [(= number 300)\
    \ '(c c c)]\n      [(= number 400) '(c d)]\n      [(= number 500) '(d)]\n    \
    \  [(= number 600) '(d c)]\n      [(= number 700) '(d c c)]\n      [(= number\
    \ 800) '(d c c c)]\n      [(= number 900) '(c m)]\n      [(= number 1000) '(m)]\n\
    \      [else (append (int_to_mini_roman_helper (quotient number 10))\n       \
    \             (int_to_mini_roman_helper (remainder number 10)))]))\n  (string-join\
    \ (int_to_mini_roman_helper number) \"\"))\n", "  (define (int_to_mini_roman_helper\
    \ number)\n    (cond\n      [(= number 0) '()]\n      [(= number 1) '(i)]\n  \
    \    [(= number 2) '(i i)]\n      [(= number 3) '(i i i)]\n      [(= number 4)\
    \ '(i v)]\n      [(= number 5) '(v)]\n      [(= number 6) '(v i)]\n      [(= number\
    \ 7) '(v i i)]\n      [(= number 8) '(v i i i)]\n      [(= number 9) '(i x)]\n\
    \      [(= number 10) '(x)]\n      [(= number 20) '(x x)]\n      [(= number 30)\
    \ '(x x x)]\n      [(= number 40) '(x l)]\n      [(= number 50) '(l)]\n      [(=\
    \ number 60) '(l x)]\n      [(= number 70) '(l x x)]\n      [(= number 80) '(l\
    \ x x x)]\n      [(= number 90) '(x c)]\n      [(= number 100) '(c)]\n      [(=\
    \ number 200) '(c c)]\n      [(= number 300) '(c c c)]\n      [(= number 400)\
    \ '(c d)]\n      [(= number 500) '(d)]\n      [(= number 600) '(d c)]\n      [(=\
    \ number 700) '(d c c)]\n      [(= number 800) '(d c c c)]\n      [(= number 900)\
    \ '(c m)]\n      [(= number 1000) '(m)]\n      [else (append (int_to_mini_roman_helper\
    \ (/ number 10))\n                    (int_to_mini_roman_helper (modulo number\
    \ 10)))]))\n  (string-join (int_to_mini_roman_helper number) \"\"))\n", "  (define\
    \ (int_to_mini_roman_helper number)\n    (cond\n      [(= number 1000) \"m\"]\n\
    \      [(= number 900) \"cm\"]\n      [(= number 500) \"d\"]\n      [(= number\
    \ 400) \"cd\"]\n      [(= number 100) \"c\"]\n      [(= number 90) \"xc\"]\n \
    \     [(= number 50) \"l\"]\n      [(= number 40) \"xl\"]\n      [(= number 10)\
    \ \"x\"]\n      [(= number 9) \"ix\"]\n      [(= number 5) \"v\"]\n      [(= number\
    \ 4) \"iv\"]\n      [(= number 1) \"i\"]\n      [else (string-append (int_to_mini_roman_helper\
    \ (quotient number 10))\n                           (int_to_mini_roman_helper\
    \ (remainder number 10)))]))\n  (string-downcase (int_to_mini_roman_helper number)))\n",
  "  (define (int_to_mini_roman_helper number)\n    (cond\n      [(= number 1000)\
    \ \"m\"]\n      [(= number 900) \"cm\"]\n      [(= number 500) \"d\"]\n      [(=\
    \ number 400) \"cd\"]\n      [(= number 100) \"c\"]\n      [(= number 90) \"xc\"\
    ]\n      [(= number 50) \"l\"]\n      [(= number 40) \"xl\"]\n      [(= number\
    \ 10) \"x\"]\n      [(= number 9) \"ix\"]\n      [(= number 5) \"v\"]\n      [(=\
    \ number 4) \"iv\"]\n      [(= number 1) \"i\"]\n      [else (string-append (int_to_mini_roman_helper\
    \ (quotient number 10))\n                           (int_to_mini_roman_helper\
    \ (remainder number 10)))]))\n  (string-downcase (int_to_mini_roman_helper number)))\n",
  "  (define (int_to_mini_roman-helper number)\n    (cond ((= number 1000) \"m\")\n\
    \          ((= number 900) \"cm\")\n          ((= number 500) \"d\")\n       \
    \   ((= number 400) \"cd\")\n          ((= number 100) \"c\")\n          ((= number\
    \ 90) \"xc\")\n          ((= number 50) \"l\")\n          ((= number 40) \"xl\"\
    )\n          ((= number 10) \"x\")\n          ((= number 9) \"ix\")\n        \
    \  ((= number 5) \"v\")\n          ((= number 4) \"iv\")\n          ((= number\
    \ 1) \"i\")))\n  (cond ((= number 0) \"\")\n        ((= number 1) (int_to_mini_roman-helper\
    \ 1))\n        ((= number 2) (string-append (int_to_mini_roman-helper 1) (int_to_mini_roman-helper\
    \ 1)))\n        ((= number 3) (string-append (int_to_mini_roman-helper 1) (int_to_mini_roman-helper\
    \ 1) (int_to_mini_roman-helper 1)))\n        ((= number 4) (int_to_mini_roman-helper\
    \ 4))\n        ((= number 5) (int_to_mini_roman-helper 5))\n        ((= number\
    \ 6) (string-append (int_to_mini_roman-helper 5) (int_to_mini_roman-helper 1)))\n\
    \        ((= number 7) (string-append (int_to_mini_roman-helper 5) (int_to_mini_roman-helper\
    \ 1) (int_to_mini_roman-helper 1)))\n        ((= number 8) (string-append (int_to_mini_roman-helper\
    \ 5) (int_to_mini_roman-helper 1) (int_to_mini_roman-helper 1) (int_to_mini_roman-helper\
    \ 1)))\n        ((= number 9) (int_to_mini_roman-helper 9))\n        ((= number\
    \ 10) (int_to_mini_roman-helper 10))\n        ((= number 11) (string-append (int",
  "  (define (int_to_mini_roman_helper number)\n    (cond\n      [(= number 1000)\
    \ 'm]\n      [(= number 900) 'cm]\n      [(= number 500) 'd]\n      [(= number\
    \ 400) 'cd]\n      [(= number 100) 'c]\n      [(= number 90) 'xc]\n      [(= number\
    \ 50) 'l]\n      [(= number 40) 'xl]\n      [(= number 10) 'x]\n      [(= number\
    \ 9) 'ix]\n      [(= number 5) 'v]\n      [(= number 4) 'iv]\n      [(= number\
    \ 1) 'i]\n      [else (append (int_to_mini_roman_helper (- number (quotient number\
    \ 10) * 10))\n                    (int_to_mini_roman_helper (quotient number 10)\
    \ * 10))]))\n  (string-join (int_to_mini_roman_helper number) \"\"))\n", "  (define\
    \ (int_to_mini_roman_helper number)\n    (cond\n      [(= number 0) '()]\n   \
    \   [(= number 1) '(i)]\n      [(= number 2) '(i i)]\n      [(= number 3) '(i\
    \ i i)]\n      [(= number 4) '(i v)]\n      [(= number 5) '(v)]\n      [(= number\
    \ 6) '(v i)]\n      [(= number 7) '(v i i)]\n      [(= number 8) '(v i i i)]\n\
    \      [(= number 9) '(i x)]\n      [(= number 10) '(x)]\n      [(= number 20)\
    \ '(x x)]\n      [(= number 30) '(x x x)]\n      [(= number 40) '(x l)]\n    \
    \  [(= number 50) '(l)]\n      [(= number 60) '(l x)]\n      [(= number 70) '(l\
    \ x x)]\n      [(= number 80) '(l x x x)]\n      [(= number 90) '(x c)]\n    \
    \  [(= number 100) '(c)]\n      [(= number 200) '(c c)]\n      [(= number 300)\
    \ '(c c c)]\n      [(= number 400) '(c d)]\n      [(= number 500) '(d)]\n    \
    \  [(= number 600) '(d c)]\n      [(= number 700) '(d c c)]\n      [(= number\
    \ 800) '(d c c c)]\n      [(= number 900) '(c m)]\n      [(= number 1000) '(m)]\n\
    \      [else (append (int_to_mini_roman_helper (/ number 10))\n              \
    \      (int_to_mini_roman_helper (modulo number 10)))]))\n  (string-join (int_to_mini_roman_helper\
    \ number) \"\"))\n", "  (define (int_to_mini_roman_helper number)\n    (cond\n\
    \      [(= number 1000) \"m\"]\n      [(= number 900) \"cm\"]\n      [(= number\
    \ 500) \"d\"]\n      [(= number 400) \"cd\"]\n      [(= number 100) \"c\"]\n \
    \     [(= number 90) \"xc\"]\n      [(= number 50) \"l\"]\n      [(= number 40)\
    \ \"xl\"]\n      [(= number 10) \"x\"]\n      [(= number 9) \"ix\"]\n      [(=\
    \ number 5) \"v\"]\n      [(= number 4) \"iv\"]\n      [(= number 1) \"i\"]\n\
    \      [else (string-append (int_to_mini_roman_helper (quotient number 10))\n\
    \                           (int_to_mini_roman_helper (remainder number 10)))]))\n\
    \  (string-downcase (int_to_mini_roman_helper number)))\n", "  (define (int_to_mini_roman_helper\
    \ number)\n    (cond\n      [(= number 1000) 'm]\n      [(= number 900) 'cm]\n\
    \      [(= number 500) 'd]\n      [(= number 400) 'cd]\n      [(= number 100)\
    \ 'c]\n      [(= number 90) 'xc]\n      [(= number 50) 'l]\n      [(= number 40)\
    \ 'xl]\n      [(= number 10) 'x]\n      [(= number 9) 'ix]\n      [(= number 5)\
    \ 'v]\n      [(= number 4) 'iv]\n      [(= number 1) 'i]\n      [else (append\
    \ (int_to_mini_roman_helper (quotient number 10))\n                    (int_to_mini_roman_helper\
    \ (remainder number 10)))]))\n  (string-downcase (list->string (int_to_mini_roman_helper\
    \ number))))\n", "  (define (int_to_mini_roman_helper number)\n    (cond\n   \
    \   [(= number 1000) 'm]\n      [(= number 900) 'cm]\n      [(= number 500) 'd]\n\
    \      [(= number 400) 'cd]\n      [(= number 100) 'c]\n      [(= number 90) 'xc]\n\
    \      [(= number 50) 'l]\n      [(= number 40) 'xl]\n      [(= number 10) 'x]\n\
    \      [(= number 9) 'ix]\n      [(= number 5) 'v]\n      [(= number 4) 'iv]\n\
    \      [(= number 1) 'i]\n      [else (append (int_to_mini_roman_helper (quotient\
    \ number 10))\n                    (int_to_mini_roman_helper (remainder number\
    \ 10)))]))\n  (symbol->string (int_to_mini_roman_helper number)))\n", "  (define\
    \ (int_to_mini_roman_helper number)\n    (cond\n      [(= number 1000) \"m\"]\n\
    \      [(= number 900) \"cm\"]\n      [(= number 500) \"d\"]\n      [(= number\
    \ 400) \"cd\"]\n      [(= number 100) \"c\"]\n      [(= number 90) \"xc\"]\n \
    \     [(= number 50) \"l\"]\n      [(= number 40) \"xl\"]\n      [(= number 10)\
    \ \"x\"]\n      [(= number 9) \"ix\"]\n      [(= number 5) \"v\"]\n      [(= number\
    \ 4) \"iv\"]\n      [(= number 1) \"i\"]\n      [else (string-append (int_to_mini_roman_helper\
    \ (quotient number 10))\n                           (int_to_mini_roman_helper\
    \ (remainder number 10)))]))\n  (string-downcase (int_to_mini_roman_helper number)))\n",
  "  (define (int_to_mini_roman_helper number)\n    (cond\n      [(= number 1000)\
    \ \"m\"]\n      [(= number 900) \"cm\"]\n      [(= number 500) \"d\"]\n      [(=\
    \ number 400) \"cd\"]\n      [(= number 100) \"c\"]\n      [(= number 90) \"xc\"\
    ]\n      [(= number 50) \"l\"]\n      [(= number 40) \"xl\"]\n      [(= number\
    \ 10) \"x\"]\n      [(= number 9) \"ix\"]\n      [(= number 5) \"v\"]\n      [(=\
    \ number 4) \"iv\"]\n      [(= number 1) \"i\"]\n      [else (string-append (int_to_mini_roman_helper\
    \ (quotient number 10))\n                           (int_to_mini_roman_helper\
    \ (remainder number 10)))]))\n  (string-downcase (int_to_mini_roman_helper number)))\n",
  "  (define (int_to_mini_roman_helper number)\n    (cond\n      [(= number 1000)\
    \ \"m\"]\n      [(= number 900) \"cm\"]\n      [(= number 500) \"d\"]\n      [(=\
    \ number 400) \"cd\"]\n      [(= number 100) \"c\"]\n      [(= number 90) \"xc\"\
    ]\n      [(= number 50) \"l\"]\n      [(= number 40) \"xl\"]\n      [(= number\
    \ 10) \"x\"]\n      [(= number 9) \"ix\"]\n      [(= number 5) \"v\"]\n      [(=\
    \ number 4) \"iv\"]\n      [(= number 1) \"i\"]\n      [else (string-append (int_to_mini_roman_helper\
    \ (quotient number 10))\n                           (int_to_mini_roman_helper\
    \ (remainder number 10)))]))\n  (string-downcase (int_to_mini_roman_helper number)))\n",
  "  (cond\n    [(= number 1) \"i\"]\n    [(= number 2) \"ii\"]\n    [(= number 3)\
    \ \"iii\"]\n    [(= number 4) \"iv\"]\n    [(= number 5) \"v\"]\n    [(= number\
    \ 6) \"vi\"]\n    [(= number 7) \"vii\"]\n    [(= number 8) \"viii\"]\n    [(=\
    \ number 9) \"ix\"]\n    [(= number 10) \"x\"]\n    [(= number 11) \"xi\"]\n \
    \   [(= number 12) \"xii\"]\n    [(= number 13) \"xiii\"]\n    [(= number 14)\
    \ \"xiv\"]\n    [(= number 15) \"xv\"]\n    [(= number 16) \"xvi\"]\n    [(= number\
    \ 17) \"xvii\"]\n    [(= number 18) \"xviii\"]\n    [(= number 19) \"xix\"]\n\
    \    [(= number 20) \"xx\"]\n    [(= number 30) \"xxx\"]\n    [(= number 40) \"\
    xl\"]\n    [(= number 50) \"l\"]\n    [(= number 60) \"lx\"]\n    [(= number 70)\
    \ \"lxx\"]\n    [(= number 80) \"lxxx\"]\n    [(= number 90) \"xc\"]\n    [(=\
    \ number 100) \"c\"]\n    [(= number 200) \"cc\"]\n    [(= number 300) \"ccc\"\
    ]\n    [(= number 400) \"cd\"]\n    [(= number 500) \"d\"]\n    [(= number 600)\
    \ \"dc\"]\n    [(= number 700) \"dcc\"]\n    [(= number 800) \"dccc\"]\n    [(=\
    \ number 900) \"cm\"]\n    [(= number 1000) \"m\"]\n    [(= number 2000) \"mm\"\
    ]\n    [(= number 3000) \"mmm\"]\n    [(= number 4000) \"mv\"]\n    [(= number\
    \ 5000) \"v\"]\n    [(= number 6000) \"vm\"]\n    [(= number 7000) \"vmm\"]\n\
    \    [(= number 8000) \"vmmm\"]\n    [(= number 9000) \"mx\"]\n    [(= number\
    \ 10000) \"x\"]\n    [(= number 20000) \"xx\"]\n    [(= number 30000) \"xxx\"\
    ]\n    [(", "  (define (int_to_mini_roman_helper number)\n    (cond\n      [(=\
    \ number 1000) 'm]\n      [(= number 900) 'cm]\n      [(= number 500) 'd]\n  \
    \    [(= number 400) 'cd]\n      [(= number 100) 'c]\n      [(= number 90) 'xc]\n\
    \      [(= number 50) 'l]\n      [(= number 40) 'xl]\n      [(= number 10) 'x]\n\
    \      [(= number 9) 'ix]\n      [(= number 5) 'v]\n      [(= number 4) 'iv]\n\
    \      [(= number 1) 'i]\n      [else (append (int_to_mini_roman_helper (quotient\
    \ number 10))\n                    (int_to_mini_roman_helper (remainder number\
    \ 10)))]))\n  (string-downcase (list->string (int_to_mini_roman_helper number))))\n",
  "  (define (int_to_mini_roman_helper number)\n    (cond\n      [(= number 1000)\
    \ \"m\"]\n      [(= number 900) \"cm\"]\n      [(= number 500) \"d\"]\n      [(=\
    \ number 400) \"cd\"]\n      [(= number 100) \"c\"]\n      [(= number 90) \"xc\"\
    ]\n      [(= number 50) \"l\"]\n      [(= number 40) \"xl\"]\n      [(= number\
    \ 10) \"x\"]\n      [(= number 9) \"ix\"]\n      [(= number 5) \"v\"]\n      [(=\
    \ number 4) \"iv\"]\n      [(= number 1) \"i\"]\n      [else (string-append (int_to_mini_roman_helper\
    \ (quotient number 10))\n                           (int_to_mini_roman_helper\
    \ (remainder number 10)))]))\n  (string-downcase (int_to_mini_roman_helper number)))\n",
  "  (define (int_to_mini_roman_helper number)\n    (cond\n      [(= number 0) '()]\n\
    \      [(= number 1) '(i)]\n      [(= number 2) '(i i)]\n      [(= number 3) '(i\
    \ i i)]\n      [(= number 4) '(i v)]\n      [(= number 5) '(v)]\n      [(= number\
    \ 6) '(v i)]\n      [(= number 7) '(v i i)]\n      [(= number 8) '(v i i i)]\n\
    \      [(= number 9) '(i x)]\n      [(= number 10) '(x)]\n      [(= number 20)\
    \ '(x x)]\n      [(= number 30) '(x x x)]\n      [(= number 40) '(x l)]\n    \
    \  [(= number 50) '(l)]\n      [(= number 60) '(l x)]\n      [(= number 70) '(l\
    \ x x)]\n      [(= number 80) '(l x x x)]\n      [(= number 90) '(x c)]\n    \
    \  [(= number 100) '(c)]\n      [(= number 200) '(c c)]\n      [(= number 300)\
    \ '(c c c)]\n      [(= number 400) '(c d)]\n      [(= number 500) '(d)]\n    \
    \  [(= number 600) '(d c)]\n      [(= number 700) '(d c c)]\n      [(= number\
    \ 800) '(d c c c)]\n      [(= number 900) '(c m)]\n      [(= number 1000) '(m)]\n\
    \      [else (append (int_to_mini_roman_helper (modulo number 1000))\n       \
    \             (int_to_mini_roman_helper (/ number 1000)))]))\n  (string-join (int_to_mini_roman_helper\
    \ number) \"\"))\n", "  (define (int_to_mini_roman_helper number)\n    (cond ((=\
    \ number 0) '())\n          ((= number 1) '(i))\n          ((= number 2) '(i i))\n\
    \          ((= number 3) '(i i i))\n          ((= number 4) '(i v))\n        \
    \  ((= number 5) '(v))\n          ((= number 6) '(v i))\n          ((= number\
    \ 7) '(v i i))\n          ((= number 8) '(v i i i))\n          ((= number 9) '(i\
    \ x))\n          ((= number 10) '(x))\n          ((= number 20) '(x x))\n    \
    \      ((= number 30) '(x x x))\n          ((= number 40) '(x l))\n          ((=\
    \ number 50) '(l))\n          ((= number 60) '(l x))\n          ((= number 70)\
    \ '(l x x))\n          ((= number 80) '(l x x x))\n          ((= number 90) '(x\
    \ c))\n          ((= number 100) '(c))\n          ((= number 200) '(c c))\n  \
    \        ((= number 300) '(c c c))\n          ((= number 400) '(c d))\n      \
    \    ((= number 500) '(d))\n          ((= number 600) '(d c))\n          ((= number\
    \ 700) '(d c c))\n          ((= number 800) '(d c c c))\n          ((= number\
    \ 900) '(c m))\n          ((= number 1000) '(m))\n          ((= number 2000) '(m\
    \ m))\n          ((= number 3000) '(m m m))))\n  (string-join (int_to_mini_roman_helper\
    \ number) \"\"))\n", "  (define (int_to_mini_roman-helper number)\n    (cond\n\
    \      [(= number 0) '()]\n      [(= number 1) '(i)]\n      [(= number 2) '(i\
    \ i)]\n      [(= number 3) '(i i i)]\n      [(= number 4) '(i v)]\n      [(= number\
    \ 5) '(v)]\n      [(= number 6) '(v i)]\n      [(= number 7) '(v i i)]\n     \
    \ [(= number 8) '(v i i i)]\n      [(= number 9) '(i x)]\n      [(= number 10)\
    \ '(x)]\n      [(= number 20) '(x x)]\n      [(= number 30) '(x x x)]\n      [(=\
    \ number 40) '(x l)]\n      [(= number 50) '(l)]\n      [(= number 60) '(l x)]\n\
    \      [(= number 70) '(l x x)]\n      [(= number 80) '(l x x x)]\n      [(= number\
    \ 90) '(x c)]\n      [(= number 100) '(c)]\n      [(= number 200) '(c c)]\n  \
    \    [(= number 300) '(c c c)]\n      [(= number 400) '(c d)]\n      [(= number\
    \ 500) '(d)]\n      [(= number 600) '(d c)]\n      [(= number 700) '(d c c)]\n\
    \      [(= number 800) '(d c c c)]\n      [(= number 900) '(c m)]\n      [(= number\
    \ 1000) '(m)]\n      [else (append (int_to_mini_roman-helper (quotient number\
    \ 10))\n                    (int_to_mini_roman-helper (remainder number 10)))]))\n\
    \  (string-join (int_to_mini_roman-helper number) \"\"))\n", "  (define (int_to_mini_roman_helper\
    \ number)\n    (cond\n      [(= number 1000) 'm]\n      [(= number 900) 'cm]\n\
    \      [(= number 500) 'd]\n      [(= number 400) 'cd]\n      [(= number 100)\
    \ 'c]\n      [(= number 90) 'xc]\n      [(= number 50) 'l]\n      [(= number 40)\
    \ 'xl]\n      [(= number 10) 'x]\n      [(= number 9) 'ix]\n      [(= number 5)\
    \ 'v]\n      [(= number 4) 'iv]\n      [(= number 1) 'i]\n      [else (append\
    \ (int_to_mini_roman_helper (quotient number 10))\n                    (int_to_mini_roman_helper\
    \ (remainder number 10)))]))\n  (string-downcase (list->string (int_to_mini_roman_helper\
    \ number))))\n", "  (define (int_to_mini_roman-helper number)\n    (cond\n   \
    \   [(= number 1000) 'm]\n      [(= number 900) 'cm]\n      [(= number 500) 'd]\n\
    \      [(= number 400) 'cd]\n      [(= number 100) 'c]\n      [(= number 90) 'xc]\n\
    \      [(= number 50) 'l]\n      [(= number 40) 'xl]\n      [(= number 10) 'x]\n\
    \      [(= number 9) 'ix]\n      [(= number 5) 'v]\n      [(= number 4) 'iv]\n\
    \      [(= number 1) 'i]\n      [else (append (int_to_mini_roman-helper (quotient\
    \ number 10))\n                    (int_to_mini_roman-helper (remainder number\
    \ 10)))]))\n  (string-downcase (list->string (int_to_mini_roman-helper number))))\n",
  "  (define (int_to_mini_roman-helper number)\n    (cond\n      [(= number 1000)\
    \ 'm]\n      [(= number 900) 'cm]\n      [(= number 500) 'd]\n      [(= number\
    \ 400) 'cd]\n      [(= number 100) 'c]\n      [(= number 90) 'xc]\n      [(= number\
    \ 50) 'l]\n      [(= number 40) 'xl]\n      [(= number 10) 'x]\n      [(= number\
    \ 9) 'ix]\n      [(= number 5) 'v]\n      [(= number 4) 'iv]\n      [(= number\
    \ 1) 'i]\n      [else (cons (int_to_mini_roman-helper (quotient number (expt 10\
    \ (floor (log number 10)))) )\n                   (int_to_mini_roman-helper (remainder\
    \ number (expt 10 (floor (log number 10))))))]))\n  (string-join (int_to_mini_roman-helper\
    \ number) \"\"))\n", "  (define (int_to_mini_roman_helper number)\n    (cond\n\
    \      [(= number 1000) \"m\"]\n      [(= number 900) \"cm\"]\n      [(= number\
    \ 500) \"d\"]\n      [(= number 400) \"cd\"]\n      [(= number 100) \"c\"]\n \
    \     [(= number 90) \"xc\"]\n      [(= number 50) \"l\"]\n      [(= number 40)\
    \ \"xl\"]\n      [(= number 10) \"x\"]\n      [(= number 9) \"ix\"]\n      [(=\
    \ number 5) \"v\"]\n      [(= number 4) \"iv\"]\n      [(= number 1) \"i\"]\n\
    \      [else (string-append (int_to_mini_roman_helper (quotient number 10))\n\
    \                           (int_to_mini_roman_helper (remainder number 10)))]))\n\
    \  (string-downcase (int_to_mini_roman_helper number)))\n", "  (define (int_to_mini_roman_helper\
    \ number)\n    (cond\n      [(= number 1000) 'm]\n      [(= number 900) 'cm]\n\
    \      [(= number 500) 'd]\n      [(= number 400) 'cd]\n      [(= number 100)\
    \ 'c]\n      [(= number 90) 'xc]\n      [(= number 50) 'l]\n      [(= number 40)\
    \ 'xl]\n      [(= number 10) 'x]\n      [(= number 9) 'ix]\n      [(= number 5)\
    \ 'v]\n      [(= number 4) 'iv]\n      [(= number 1) 'i]\n      [else (append\
    \ (int_to_mini_roman_helper (quotient number 10))\n                    (int_to_mini_roman_helper\
    \ (remainder number 10)))]))\n  (string-downcase (list->string (int_to_mini_roman_helper\
    \ number))))\n", "  (define (int_to_mini_roman_helper number)\n    (cond\n   \
    \   [(= number 1000) \"m\"]\n      [(= number 900) \"cm\"]\n      [(= number 500)\
    \ \"d\"]\n      [(= number 400) \"cd\"]\n      [(= number 100) \"c\"]\n      [(=\
    \ number 90) \"xc\"]\n      [(= number 50) \"l\"]\n      [(= number 40) \"xl\"\
    ]\n      [(= number 10) \"x\"]\n      [(= number 9) \"ix\"]\n      [(= number\
    \ 5) \"v\"]\n      [(= number 4) \"iv\"]\n      [(= number 1) \"i\"]\n      [else\
    \ (string-append (int_to_mini_roman_helper (quotient number 10))\n           \
    \                (int_to_mini_roman_helper (remainder number 10)))]))\n  (string-downcase\
    \ (int_to_mini_roman_helper number)))\n", "  (define (int_to_mini_roman_helper\
    \ number)\n    (cond\n      [(= number 1000) 'm]\n      [(= number 900) 'cm]\n\
    \      [(= number 500) 'd]\n      [(= number 400) 'cd]\n      [(= number 100)\
    \ 'c]\n      [(= number 90) 'xc]\n      [(= number 50) 'l]\n      [(= number 40)\
    \ 'xl]\n      [(= number 10) 'x]\n      [(= number 9) 'ix]\n      [(= number 5)\
    \ 'v]\n      [(= number 4) 'iv]\n      [(= number 1) 'i]\n      [else (cons (int_to_mini_roman_helper\
    \ (quotient number 10))\n                  (int_to_mini_roman_helper (remainder\
    \ number 10)))]))\n  (string-join (int_to_mini_roman_helper number) \"\"))\n",
  "  (define (int_to_mini_roman_helper number)\n    (cond\n      [(= number 0) '()]\n\
    \      [(= number 1) '(i)]\n      [(= number 2) '(i i)]\n      [(= number 3) '(i\
    \ i i)]\n      [(= number 4) '(i v)]\n      [(= number 5) '(v)]\n      [(= number\
    \ 6) '(v i)]\n      [(= number 7) '(v i i)]\n      [(= number 8) '(v i i i)]\n\
    \      [(= number 9) '(i x)]\n      [(= number 10) '(x)]\n      [(= number 20)\
    \ '(x x)]\n      [(= number 30) '(x x x)]\n      [(= number 40) '(x l)]\n    \
    \  [(= number 50) '(l)]\n      [(= number 60) '(l x)]\n      [(= number 70) '(l\
    \ x x)]\n      [(= number 80) '(l x x x)]\n      [(= number 90) '(x c)]\n    \
    \  [(= number 100) '(c)]\n      [(= number 200) '(c c)]\n      [(= number 300)\
    \ '(c c c)]\n      [(= number 400) '(c d)]\n      [(= number 500) '(d)]\n    \
    \  [(= number 600) '(d c)]\n      [(= number 700) '(d c c)]\n      [(= number\
    \ 800) '(d c c c)]\n      [(= number 900) '(c m)]\n      [(= number 1000) '(m)]\n\
    \      [else (append (int_to_mini_roman_helper (/ number 10))\n              \
    \      (int_to_mini_roman_helper (modulo number 10)))]))\n  (string-join (int_to_mini_roman_helper\
    \ number) \"\"))\n", "  (define (int_to_mini_roman_helper number)\n    (cond\n\
    \      [(= number 1000) 'm]\n      [(= number 900) 'cm]\n      [(= number 500)\
    \ 'd]\n      [(= number 400) 'cd]\n      [(= number 100) 'c]\n      [(= number\
    \ 90) 'xc]\n      [(= number 50) 'l]\n      [(= number 40) 'xl]\n      [(= number\
    \ 10) 'x]\n      [(= number 9) 'ix]\n      [(= number 5) 'v]\n      [(= number\
    \ 4) 'iv]\n      [(= number 1) 'i]\n      [else (append (int_to_mini_roman_helper\
    \ (quotient number 10))\n                    (int_to_mini_roman_helper (remainder\
    \ number 10)))]))\n  (string-downcase (list->string (int_to_mini_roman_helper\
    \ number))))\n", "  (define (int_to_mini_roman-helper number)\n    (cond\n   \
    \   [(= number 1000) \"m\"]\n      [(= number 900) \"cm\"]\n      [(= number 500)\
    \ \"d\"]\n      [(= number 400) \"cd\"]\n      [(= number 100) \"c\"]\n      [(=\
    \ number 90) \"xc\"]\n      [(= number 50) \"l\"]\n      [(= number 40) \"xl\"\
    ]\n      [(= number 10) \"x\"]\n      [(= number 9) \"ix\"]\n      [(= number\
    \ 5) \"v\"]\n      [(= number 4) \"iv\"]\n      [(= number 1) \"i\"]\n      [else\
    \ (string-append (int_to_mini_roman-helper (quotient number 10))\n           \
    \                (int_to_mini_roman-helper (remainder number 10)))]))\n  (string-downcase\
    \ (int_to_mini_roman-helper number)))\n", "  (define (int_to_mini_roman-helper\
    \ number)\n    (cond\n      [(= number 1000) \"m\"]\n      [(= number 900) \"\
    cm\"]\n      [(= number 500) \"d\"]\n      [(= number 400) \"cd\"]\n      [(=\
    \ number 100) \"c\"]\n      [(= number 90) \"xc\"]\n      [(= number 50) \"l\"\
    ]\n      [(= number 40) \"xl\"]\n      [(= number 10) \"x\"]\n      [(= number\
    \ 9) \"ix\"]\n      [(= number 5) \"v\"]\n      [(= number 4) \"iv\"]\n      [(=\
    \ number 1) \"i\"]\n      [else (string-append (int_to_mini_roman-helper (quotient\
    \ number 10))\n                           (int_to_mini_roman-helper (remainder\
    \ number 10)))]))\n  (string-downcase (int_to_mini_roman-helper number)))\n",
  "  (define (int_to_mini_roman_helper number)\n    (cond\n      [(= number 0) '()]\n\
    \      [(= number 1) '(i)]\n      [(= number 2) '(i i)]\n      [(= number 3) '(i\
    \ i i)]\n      [(= number 4) '(i v)]\n      [(= number 5) '(v)]\n      [(= number\
    \ 6) '(v i)]\n      [(= number 7) '(v i i)]\n      [(= number 8) '(v i i i)]\n\
    \      [(= number 9) '(i x)]\n      [(= number 10) '(x)]\n      [(= number 20)\
    \ '(x x)]\n      [(= number 30) '(x x x)]\n      [(= number 40) '(x l)]\n    \
    \  [(= number 50) '(l)]\n      [(= number 60) '(l x)]\n      [(= number 70) '(l\
    \ x x)]\n      [(= number 80) '(l x x x)]\n      [(= number 90) '(x c)]\n    \
    \  [(= number 100) '(c)]\n      [(= number 200) '(c c)]\n      [(= number 300)\
    \ '(c c c)]\n      [(= number 400) '(c d)]\n      [(= number 500) '(d)]\n    \
    \  [(= number 600) '(d c)]\n      [(= number 700) '(d c c)]\n      [(= number\
    \ 800) '(d c c c)]\n      [(= number 900) '(c m)]\n      [(= number 1000) '(m)]\n\
    \      [else (append (int_to_mini_roman_helper (/ number 10))\n              \
    \      (int_to_mini_roman_helper (modulo number 10)))]))\n  (string-join (int_to_mini_roman_helper\
    \ number) \"\"))\n", "  (define (int_to_mini_roman_helper number)\n    (cond\n\
    \      [(= number 1000) 'm]\n      [(= number 900) 'cm]\n      [(= number 500)\
    \ 'd]\n      [(= number 400) 'cd]\n      [(= number 100) 'c]\n      [(= number\
    \ 90) 'xc]\n      [(= number 50) 'l]\n      [(= number 40) 'xl]\n      [(= number\
    \ 10) 'x]\n      [(= number 9) 'ix]\n      [(= number 5) 'v]\n      [(= number\
    \ 4) 'iv]\n      [(= number 1) 'i]\n      [else (append (int_to_mini_roman_helper\
    \ (quotient number 10))\n                    (int_to_mini_roman_helper (remainder\
    \ number 10)))]))\n  (string-downcase (list->string (int_to_mini_roman_helper\
    \ number))))\n", "  (define (int_to_mini_roman_helper number roman-string)\n \
    \   (cond\n      [(= number 0) roman-string]\n      [(>= number 1000) (int_to_mini_roman_helper\
    \ (- number 1000) (string-append roman-string \"m\"))]\n      [(>= number 900)\
    \ (int_to_mini_roman_helper (- number 900) (string-append roman-string \"cm\"\
    ))]\n      [(>= number 500) (int_to_mini_roman_helper (- number 500) (string-append\
    \ roman-string \"d\"))]\n      [(>= number 400) (int_to_mini_roman_helper (- number\
    \ 400) (string-append roman-string \"cd\"))]\n      [(>= number 100) (int_to_mini_roman_helper\
    \ (- number 100) (string-append roman-string \"c\"))]\n      [(>= number 90) (int_to_mini_roman_helper\
    \ (- number 90) (string-append roman-string \"xc\"))]\n      [(>= number 50) (int_to_mini_roman_helper\
    \ (- number 50) (string-append roman-string \"l\"))]\n      [(>= number 40) (int_to_mini_roman_helper\
    \ (- number 40) (string-append roman-string \"xl\"))]\n      [(>= number 10) (int_to_mini_roman_helper\
    \ (- number 10) (string-append roman-string \"x\"))]\n      [(>= number 9) (int_to_mini_roman_helper\
    \ (- number 9) (string-append roman-string \"ix\"))]\n      [(>= number 5) (int_to_mini_roman_helper\
    \ (- number 5) (string-append roman-string \"v\"))]\n      [(>= number 4) (int_to_mini_roman_helper\
    \ (- number 4) (string-append roman-string \"iv\"))]\n      [(>= number 1) (int_to_mini_roman_helper\
    \ (- number 1) (string-append roman-string \"i\"))]))\n  (string-downcase (int_to_mini_roman_helper",
  "  (define (int_to_mini_roman_helper number)\n    (cond\n      [(= number 1000)\
    \ 'm]\n      [(= number 900) 'cm]\n      [(= number 500) 'd]\n      [(= number\
    \ 400) 'cd]\n      [(= number 100) 'c]\n      [(= number 90) 'xc]\n      [(= number\
    \ 50) 'l]\n      [(= number 40) 'xl]\n      [(= number 10) 'x]\n      [(= number\
    \ 9) 'ix]\n      [(= number 5) 'v]\n      [(= number 4) 'iv]\n      [(= number\
    \ 1) 'i]\n      [else (append (int_to_mini_roman_helper (quotient number 10))\n\
    \                    (int_to_mini_roman_helper (remainder number 10)))]))\n  (string-downcase\
    \ (list->string (int_to_mini_roman_helper number))))\n", "  (define (int_to_mini_roman_helper\
    \ number)\n    (cond\n      [(= number 0) '()]\n      [(= number 1) '(i)]\n  \
    \    [(= number 2) '(i i)]\n      [(= number 3) '(i i i)]\n      [(= number 4)\
    \ '(i v)]\n      [(= number 5) '(v)]\n      [(= number 6) '(v i)]\n      [(= number\
    \ 7) '(v i i)]\n      [(= number 8) '(v i i i)]\n      [(= number 9) '(i x)]\n\
    \      [(= number 10) '(x)]\n      [(= number 20) '(x x)]\n      [(= number 30)\
    \ '(x x x)]\n      [(= number 40) '(x l)]\n      [(= number 50) '(l)]\n      [(=\
    \ number 60) '(l x)]\n      [(= number 70) '(l x x)]\n      [(= number 80) '(l\
    \ x x x)]\n      [(= number 90) '(x c)]\n      [(= number 100) '(c)]\n      [(=\
    \ number 200) '(c c)]\n      [(= number 300) '(c c c)]\n      [(= number 400)\
    \ '(c d)]\n      [(= number 500) '(d)]\n      [(= number 600) '(d c)]\n      [(=\
    \ number 700) '(d c c)]\n      [(= number 800) '(d c c c)]\n      [(= number 900)\
    \ '(c m)]\n      [(= number 1000) '(m)]\n      [else (append (int_to_mini_roman_helper\
    \ (/ number 10))\n                    (int_to_mini_roman_helper (modulo number\
    \ 10)))]))\n  (string-join (int_to_mini_roman_helper number) \"\"))\n", "  (define\
    \ (int_to_mini_roman_helper number)\n    (cond\n      [(= number 1000) 'm]\n \
    \     [(= number 900) 'cm]\n      [(= number 500) 'd]\n      [(= number 400) 'cd]\n\
    \      [(= number 100) 'c]\n      [(= number 90) 'xc]\n      [(= number 50) 'l]\n\
    \      [(= number 40) 'xl]\n      [(= number 10) 'x]\n      [(= number 9) 'ix]\n\
    \      [(= number 5) 'v]\n      [(= number 4) 'iv]\n      [(= number 1) 'i]\n\
    \      [else (append (int_to_mini_roman_helper (quotient number 10))\n       \
    \             (int_to_mini_roman_helper (remainder number 10)))]))\n  (string-downcase\
    \ (list->string (int_to_mini_roman_helper number))))\n", "  (define (int_to_mini_roman_helper\
    \ number)\n    (cond\n      [(= number 0) '()]\n      [(= number 1) '(i)]\n  \
    \    [(= number 2) '(i i)]\n      [(= number 3) '(i i i)]\n      [(= number 4)\
    \ '(i v)]\n      [(= number 5) '(v)]\n      [(= number 6) '(v i)]\n      [(= number\
    \ 7) '(v i i)]\n      [(= number 8) '(v i i i)]\n      [(= number 9) '(i x)]\n\
    \      [(= number 10) '(x)]\n      [(= number 20) '(x x)]\n      [(= number 30)\
    \ '(x x x)]\n      [(= number 40) '(x l)]\n      [(= number 50) '(l)]\n      [(=\
    \ number 60) '(l x)]\n      [(= number 70) '(l x x)]\n      [(= number 80) '(l\
    \ x x x)]\n      [(= number 90) '(x c)]\n      [(= number 100) '(c)]\n      [(=\
    \ number 200) '(c c)]\n      [(= number 300) '(c c c)]\n      [(= number 400)\
    \ '(c d)]\n      [(= number 500) '(d)]\n      [(= number 600) '(d c)]\n      [(=\
    \ number 700) '(d c c)]\n      [(= number 800) '(d c c c)]\n      [(= number 900)\
    \ '(c m)]\n      [(= number 1000) '(m)]\n      [else (append (int_to_mini_roman_helper\
    \ (/ number 10))\n                    (int_to_mini_roman_helper (modulo number\
    \ 10)))]))\n  (string-join (int_to_mini_roman_helper number) \"\"))\n", "  (define\
    \ (int_to_mini_roman_helper number)\n    (cond\n      [(= number 1000) 'm]\n \
    \     [(= number 900) 'cm]\n      [(= number 500) 'd]\n      [(= number 400) 'cd]\n\
    \      [(= number 100) 'c]\n      [(= number 90) 'xc]\n      [(= number 50) 'l]\n\
    \      [(= number 40) 'xl]\n      [(= number 10) 'x]\n      [(= number 9) 'ix]\n\
    \      [(= number 5) 'v]\n      [(= number 4) 'iv]\n      [(= number 1) 'i]\n\
    \      [else (append (int_to_mini_roman_helper (quotient number 10))\n       \
    \             (int_to_mini_roman_helper (remainder number 10)))]))\n  (string-downcase\
    \ (list->string (int_to_mini_roman_helper number))))\n", "  (define (int_to_mini_roman-helper\
    \ number)\n    (cond\n      [(= number 1000) 'm]\n      [(= number 900) 'cm]\n\
    \      [(= number 500) 'd]\n      [(= number 400) 'cd]\n      [(= number 100)\
    \ 'c]\n      [(= number 90) 'xc]\n      [(= number 50) 'l]\n      [(= number 40)\
    \ 'xl]\n      [(= number 10) 'x]\n      [(= number 9) 'ix]\n      [(= number 5)\
    \ 'v]\n      [(= number 4) 'iv]\n      [(= number 1) 'i]\n      [else (append\
    \ (int_to_mini_roman-helper (quotient number 10))\n                    (int_to_mini_roman-helper\
    \ (remainder number 10)))]))\n  (string-downcase (list->string (int_to_mini_roman-helper\
    \ number))))\n", "  (define (int_to_mini_roman-helper number)\n    (cond\n   \
    \   [(= number 0) '()]\n      [(= number 1) '(i)]\n      [(= number 2) '(i i)]\n\
    \      [(= number 3) '(i i i)]\n      [(= number 4) '(i v)]\n      [(= number\
    \ 5) '(v)]\n      [(= number 6) '(v i)]\n      [(= number 7) '(v i i)]\n     \
    \ [(= number 8) '(v i i i)]\n      [(= number 9) '(i x)]\n      [(= number 10)\
    \ '(x)]\n      [(= number 20) '(x x)]\n      [(= number 30) '(x x x)]\n      [(=\
    \ number 40) '(x l)]\n      [(= number 50) '(l)]\n      [(= number 60) '(l x)]\n\
    \      [(= number 70) '(l x x)]\n      [(= number 80) '(l x x x)]\n      [(= number\
    \ 90) '(x c)]\n      [(= number 100) '(c)]\n      [(= number 200) '(c c)]\n  \
    \    [(= number 300) '(c c c)]\n      [(= number 400) '(c d)]\n      [(= number\
    \ 500) '(d)]\n      [(= number 600) '(d c)]\n      [(= number 700) '(d c c)]\n\
    \      [(= number 800) '(d c c c)]\n      [(= number 900) '(c m)]\n      [(= number\
    \ 1000) '(m)]\n      [else (append (int_to_mini_roman-helper (/ number 10))\n\
    \                    (int_to_mini_roman-helper (modulo number 10)))]))\n  (string-join\
    \ (int_to_mini_roman-helper number) \"\"))\n", "  (define (int_to_mini_roman-helper\
    \ number)\n    (cond\n      [(= number 0) '()]\n      [(= number 1) '(i)]\n  \
    \    [(= number 2) '(i i)]\n      [(= number 3) '(i i i)]\n      [(= number 4)\
    \ '(i v)]\n      [(= number 5) '(v)]\n      [(= number 6) '(v i)]\n      [(= number\
    \ 7) '(v i i)]\n      [(= number 8) '(v i i i)]\n      [(= number 9) '(i x)]\n\
    \      [(= number 10) '(x)]\n      [(= number 20) '(x x)]\n      [(= number 30)\
    \ '(x x x)]\n      [(= number 40) '(x l)]\n      [(= number 50) '(l)]\n      [(=\
    \ number 60) '(l x)]\n      [(= number 70) '(l x x)]\n      [(= number 80) '(l\
    \ x x x)]\n      [(= number 90) '(x c)]\n      [(= number 100) '(c)]\n      [(=\
    \ number 200) '(c c)]\n      [(= number 300) '(c c c)]\n      [(= number 400)\
    \ '(c d)]\n      [(= number 500) '(d)]\n      [(= number 600) '(d c)]\n      [(=\
    \ number 700) '(d c c)]\n      [(= number 800) '(d c c c)]\n      [(= number 900)\
    \ '(c m)]\n      [(= number 1000) '(m)]\n      [else (append (int_to_mini_roman-helper\
    \ (/ number 10))\n                    (int_to_mini_roman-helper (modulo number\
    \ 10)))]))\n  (string-join (int_to_mini_roman-helper number) \"\"))\n", "  (define\
    \ (int_to_mini_roman_helper number)\n    (cond\n      [(= number 1000) 'm]\n \
    \     [(= number 900) 'cm]\n      [(= number 500) 'd]\n      [(= number 400) 'cd]\n\
    \      [(= number 100) 'c]\n      [(= number 90) 'xc]\n      [(= number 50) 'l]\n\
    \      [(= number 40) 'xl]\n      [(= number 10) 'x]\n      [(= number 9) 'ix]\n\
    \      [(= number 5) 'v]\n      [(= number 4) 'iv]\n      [(= number 1) 'i]\n\
    \      [else (append (int_to_mini_roman_helper (quotient number 10))\n       \
    \             (int_to_mini_roman_helper (remainder number 10)))]))\n  (string-downcase\
    \ (list->string (int_to_mini_roman_helper number))))\n", "  (define (int_to_mini_roman_helper\
    \ number)\n    (cond\n      [(= number 1000) 'm]\n      [(= number 900) 'cm]\n\
    \      [(= number 500) 'd]\n      [(= number 400) 'cd]\n      [(= number 100)\
    \ 'c]\n      [(= number 90) 'xc]\n      [(= number 50) 'l]\n      [(= number 40)\
    \ 'xl]\n      [(= number 10) 'x]\n      [(= number 9) 'ix]\n      [(= number 5)\
    \ 'v]\n      [(= number 4) 'iv]\n      [(= number 1) 'i]\n      [else (append\
    \ (int_to_mini_roman_helper (quotient number 10))\n                    (int_to_mini_roman_helper\
    \ (remainder number 10)))]))\n  (string-downcase (list->string (int_to_mini_roman_helper\
    \ number))))\n", "  (define (int_to_mini_roman-helper number)\n    (cond\n   \
    \   [(= number 1000) \"m\"]\n      [(= number 900) \"cm\"]\n      [(= number 500)\
    \ \"d\"]\n      [(= number 400) \"cd\"]\n      [(= number 100) \"c\"]\n      [(=\
    \ number 90) \"xc\"]\n      [(= number 50) \"l\"]\n      [(= number 40) \"xl\"\
    ]\n      [(= number 10) \"x\"]\n      [(= number 9) \"ix\"]\n      [(= number\
    \ 5) \"v\"]\n      [(= number 4) \"iv\"]\n      [(= number 1) \"i\"]\n      [else\
    \ (string-append (int_to_mini_roman-helper (quotient number 10))\n           \
    \                (int_to_mini_roman-helper (remainder number 10)))]))\n  (string-downcase\
    \ (int_to_mini_roman-helper number)))\n", "  (define (int_to_mini_roman-helper\
    \ number)\n    (cond\n      [(= number 0) '()]\n      [(= number 1) '(i)]\n  \
    \    [(= number 2) '(i i)]\n      [(= number 3) '(i i i)]\n      [(= number 4)\
    \ '(i v)]\n      [(= number 5) '(v)]\n      [(= number 6) '(v i)]\n      [(= number\
    \ 7) '(v i i)]\n      [(= number 8) '(v i i i)]\n      [(= number 9) '(i x)]\n\
    \      [(= number 10) '(x)]\n      [(= number 20) '(x x)]\n      [(= number 30)\
    \ '(x x x)]\n      [(= number 40) '(x l)]\n      [(= number 50) '(l)]\n      [(=\
    \ number 60) '(l x)]\n      [(= number 70) '(l x x)]\n      [(= number 80) '(l\
    \ x x x)]\n      [(= number 90) '(x c)]\n      [(= number 100) '(c)]\n      [(=\
    \ number 200) '(c c)]\n      [(= number 300) '(c c c)]\n      [(= number 400)\
    \ '(c d)]\n      [(= number 500) '(d)]\n      [(= number 600) '(d c)]\n      [(=\
    \ number 700) '(d c c)]\n      [(= number 800) '(d c c c)]\n      [(= number 900)\
    \ '(c m)]\n      [(= number 1000) '(m)]\n      [else (append (int_to_mini_roman-helper\
    \ (quotient number 10))\n                    (int_to_mini_roman-helper (remainder\
    \ number 10)))]))\n  (string-join (int_to_mini_roman-helper number) \"\"))\n",
  "  (define (int_to_mini_roman_helper number roman-number)\n    (cond\n      [(=\
    \ number 0) (string-append roman-number)]\n      [(= number 1) (string-append\
    \ roman-number \"i\")]\n      [(= number 2) (string-append roman-number \"ii\"\
    )]\n      [(= number 3) (string-append roman-number \"iii\")]\n      [(= number\
    \ 4) (string-append roman-number \"iv\")]\n      [(= number 5) (string-append\
    \ roman-number \"v\")]\n      [(= number 6) (string-append roman-number \"vi\"\
    )]\n      [(= number 7) (string-append roman-number \"vii\")]\n      [(= number\
    \ 8) (string-append roman-number \"viii\")]\n      [(= number 9) (string-append\
    \ roman-number \"ix\")]\n      [(= number 10) (string-append roman-number \"x\"\
    )]\n      [(= number 11) (string-append roman-number \"xi\")]\n      [(= number\
    \ 12) (string-append roman-number \"xii\")]\n      [(= number 13) (string-append\
    \ roman-number \"xiii\")]\n      [(= number 14) (string-append roman-number \"\
    xiv\")]\n      [(= number 15) (string-append roman-number \"xv\")]\n      [(=\
    \ number 16) (string-append roman-number \"xvi\")]\n      [(= number 17) (string-append\
    \ roman-number \"xvii\")]\n      [(= number 18) (string-append roman-number \"\
    xviii\")]\n      [(= number 19) (string-append roman-number \"xix\")]\n      [(=\
    \ number 20) (string-append roman-number \"xx\")]\n      [(= number 30) (string-append\
    \ roman-number \"xxx\")]\n      [(= number 40) (string-append roman-number \"\
    xl\")]\n      [(= number 50) (string-append roman-number \"l\")]\n      [(= number\
    \ 60) (string-append roman-number \"lx\")]\n", "  (define (int_to_mini_roman_helper\
    \ number)\n    (cond\n      [(= number 1000) \"m\"]\n      [(= number 900) \"\
    cm\"]\n      [(= number 500) \"d\"]\n      [(= number 400) \"cd\"]\n      [(=\
    \ number 100) \"c\"]\n      [(= number 90) \"xc\"]\n      [(= number 50) \"l\"\
    ]\n      [(= number 40) \"xl\"]\n      [(= number 10) \"x\"]\n      [(= number\
    \ 9) \"ix\"]\n      [(= number 5) \"v\"]\n      [(= number 4) \"iv\"]\n      [(=\
    \ number 1) \"i\"]\n      [else (string-append (int_to_mini_roman_helper (quotient\
    \ number 10))\n                           (int_to_mini_roman_helper (remainder\
    \ number 10)))]))\n  (string-downcase (int_to_mini_roman_helper number)))\n",
  "  (define (int_to_mini_roman_helper number)\n    (cond\n      [(= number 0) '()]\n\
    \      [(= number 1) '(i)]\n      [(= number 2) '(i i)]\n      [(= number 3) '(i\
    \ i i)]\n      [(= number 4) '(i v)]\n      [(= number 5) '(v)]\n      [(= number\
    \ 6) '(v i)]\n      [(= number 7) '(v i i)]\n      [(= number 8) '(v i i i)]\n\
    \      [(= number 9) '(i x)]\n      [(= number 10) '(x)]\n      [(= number 20)\
    \ '(x x)]\n      [(= number 30) '(x x x)]\n      [(= number 40) '(x l)]\n    \
    \  [(= number 50) '(l)]\n      [(= number 60) '(l x)]\n      [(= number 70) '(l\
    \ x x)]\n      [(= number 80) '(l x x x)]\n      [(= number 90) '(x c)]\n    \
    \  [(= number 100) '(c)]\n      [(= number 200) '(c c)]\n      [(= number 300)\
    \ '(c c c)]\n      [(= number 400) '(c d)]\n      [(= number 500) '(d)]\n    \
    \  [(= number 600) '(d c)]\n      [(= number 700) '(d c c)]\n      [(= number\
    \ 800) '(d c c c)]\n      [(= number 900) '(c m)]\n      [(= number 1000) '(m)]\n\
    \      [(= number 2000) '(m m)]\n      [(= number 3000) '(m m m)]\n      [else\
    \ (append (int_to_mini_roman_helper (/ number 10))\n                    (int_to_mini_roman_helper\
    \ (modulo number 10)))]))\n  (string-join (int_to_mini_roman_helper number) \"\
    \"))\n", "  (define (int_to_mini_roman_helper number)\n    (cond\n      [(= number\
    \ 1000) \"m\"]\n      [(= number 900) \"cm\"]\n      [(= number 500) \"d\"]\n\
    \      [(= number 400) \"cd\"]\n      [(= number 100) \"c\"]\n      [(= number\
    \ 90) \"xc\"]\n      [(= number 50) \"l\"]\n      [(= number 40) \"xl\"]\n   \
    \   [(= number 10) \"x\"]\n      [(= number 9) \"ix\"]\n      [(= number 5) \"\
    v\"]\n      [(= number 4) \"iv\"]\n      [(= number 1) \"i\"]\n      [else (string-append\
    \ (int_to_mini_roman_helper (quotient number 10))\n                          \
    \ (int_to_mini_roman_helper (remainder number 10)))]))\n  (string-downcase (int_to_mini_roman_helper\
    \ number)))\n", "  (define (int_to_mini_roman_helper number)\n    (cond\n    \
    \  [(= number 1000) 'm]\n      [(= number 900) 'cm]\n      [(= number 500) 'd]\n\
    \      [(= number 400) 'cd]\n      [(= number 100) 'c]\n      [(= number 90) 'xc]\n\
    \      [(= number 50) 'l]\n      [(= number 40) 'xl]\n      [(= number 10) 'x]\n\
    \      [(= number 9) 'ix]\n      [(= number 5) 'v]\n      [(= number 4) 'iv]\n\
    \      [(= number 1) 'i]\n      [else (append (int_to_mini_roman_helper (quotient\
    \ number 10))\n                    (int_to_mini_roman_helper (remainder number\
    \ 10)))]))\n  (string-downcase (list->string (int_to_mini_roman_helper number))))\n",
  "  (define (int_to_mini_roman_helper number)\n    (cond\n      [(= number 1000)\
    \ 'm]\n      [(= number 900) 'cm]\n      [(= number 500) 'd]\n      [(= number\
    \ 400) 'cd]\n      [(= number 100) 'c]\n      [(= number 90) 'xc]\n      [(= number\
    \ 50) 'l]\n      [(= number 40) 'xl]\n      [(= number 10) 'x]\n      [(= number\
    \ 9) 'ix]\n      [(= number 5) 'v]\n      [(= number 4) 'iv]\n      [(= number\
    \ 1) 'i]\n      [else (append (int_to_mini_roman_helper (quotient number 10))\n\
    \                    (int_to_mini_roman_helper (remainder number 10)))]))\n  (string-downcase\
    \ (list->string (int_to_mini_roman_helper number))))\n", "  (define (int_to_mini_roman_helper\
    \ number)\n    (cond\n      [(= number 1000) \"m\"]\n      [(= number 900) \"\
    cm\"]\n      [(= number 500) \"d\"]\n      [(= number 400) \"cd\"]\n      [(=\
    \ number 100) \"c\"]\n      [(= number 90) \"xc\"]\n      [(= number 50) \"l\"\
    ]\n      [(= number 40) \"xl\"]\n      [(= number 10) \"x\"]\n      [(= number\
    \ 9) \"ix\"]\n      [(= number 5) \"v\"]\n      [(= number 4) \"iv\"]\n      [(=\
    \ number 1) \"i\"]\n      [else (string-append (int_to_mini_roman_helper (quotient\
    \ number 10))\n                           (int_to_mini_roman_helper (remainder\
    \ number 10)))]))\n  (string-downcase (int_to_mini_roman_helper number)))\n",
  "  (define (int_to_mini_roman_helper number)\n    (cond\n      [(= number 1000)\
    \ \"m\"]\n      [(= number 900) \"cm\"]\n      [(= number 500) \"d\"]\n      [(=\
    \ number 400) \"cd\"]\n      [(= number 100) \"c\"]\n      [(= number 90) \"xc\"\
    ]\n      [(= number 50) \"l\"]\n      [(= number 40) \"xl\"]\n      [(= number\
    \ 10) \"x\"]\n      [(= number 9) \"ix\"]\n      [(= number 5) \"v\"]\n      [(=\
    \ number 4) \"iv\"]\n      [(= number 1) \"i\"]\n      [else (append (int_to_mini_roman_helper\
    \ (quotient number 10))\n                    (int_to_mini_roman_helper (remainder\
    \ number 10)))]))\n  (string-downcase (int_to_mini_roman_helper number)))\n",
  "  (define (int_to_mini_roman-helper number)\n    (cond\n      [(= number 1000)\
    \ \"m\"]\n      [(= number 900) \"cm\"]\n      [(= number 500) \"d\"]\n      [(=\
    \ number 400) \"cd\"]\n      [(= number 100) \"c\"]\n      [(= number 90) \"xc\"\
    ]\n      [(= number 50) \"l\"]\n      [(= number 40) \"xl\"]\n      [(= number\
    \ 10) \"x\"]\n      [(= number 9) \"ix\"]\n      [(= number 5) \"v\"]\n      [(=\
    \ number 4) \"iv\"]\n      [(= number 1) \"i\"]\n      [else (string-append (int_to_mini_roman-helper\
    \ (quotient number 10))\n                           (int_to_mini_roman-helper\
    \ (remainder number 10)))]))\n  (string-downcase (int_to_mini_roman-helper number)))\n",
  "  (define (int_to_mini_roman_helper number)\n    (cond\n      [(= number 0) '()]\n\
    \      [(= number 1) '(i)]\n      [(= number 2) '(i i)]\n      [(= number 3) '(i\
    \ i i)]\n      [(= number 4) '(i v)]\n      [(= number 5) '(v)]\n      [(= number\
    \ 6) '(v i)]\n      [(= number 7) '(v i i)]\n      [(= number 8) '(v i i i)]\n\
    \      [(= number 9) '(i x)]\n      [(= number 10) '(x)]\n      [(= number 20)\
    \ '(x x)]\n      [(= number 30) '(x x x)]\n      [(= number 40) '(x l)]\n    \
    \  [(= number 50) '(l)]\n      [(= number 60) '(l x)]\n      [(= number 70) '(l\
    \ x x)]\n      [(= number 80) '(l x x x)]\n      [(= number 90) '(x c)]\n    \
    \  [(= number 100) '(c)]\n      [(= number 200) '(c c)]\n      [(= number 300)\
    \ '(c c c)]\n      [(= number 400) '(c d)]\n      [(= number 500) '(d)]\n    \
    \  [(= number 600) '(d c)]\n      [(= number 700) '(d c c)]\n      [(= number\
    \ 800) '(d c c c)]\n      [(= number 900) '(c m)]\n      [(= number 1000) '(m)]\n\
    \      [else (append (int_to_mini_roman_helper (quotient number 10))\n       \
    \             (int_to_mini_roman_helper (remainder number 10)))]))\n  (string-join\
    \ (int_to_mini_roman_helper number) \"\"))\n", "  (define (int_to_mini_roman_helper\
    \ number)\n    (cond\n      [(= number 1000) 'm]\n      [(= number 900) 'cm]\n\
    \      [(= number 500) 'd]\n      [(= number 400) 'cd]\n      [(= number 100)\
    \ 'c]\n      [(= number 90) 'xc]\n      [(= number 50) 'l]\n      [(= number 40)\
    \ 'xl]\n      [(= number 10) 'x]\n      [(= number 9) 'ix]\n      [(= number 5)\
    \ 'v]\n      [(= number 4) 'iv]\n      [(= number 1) 'i]\n      [else (append\
    \ (int_to_mini_roman_helper (quotient number 10))\n                    (int_to_mini_roman_helper\
    \ (remainder number 10)))]))\n  (string-downcase (list->string (int_to_mini_roman_helper\
    \ number))))\n", "  (define (int_to_mini_roman_helper number)\n    (cond\n   \
    \   [(= number 1000) 'm]\n      [(= number 900) 'cm]\n      [(= number 500) 'd]\n\
    \      [(= number 400) 'cd]\n      [(= number 100) 'c]\n      [(= number 90) 'xc]\n\
    \      [(= number 50) 'l]\n      [(= number 40) 'xl]\n      [(= number 10) 'x]\n\
    \      [(= number 9) 'ix]\n      [(= number 5) 'v]\n      [(= number 4) 'iv]\n\
    \      [(= number 1) 'i]\n      [else (append (int_to_mini_roman_helper (quotient\
    \ number 10))\n                    (int_to_mini_roman_helper (remainder number\
    \ 10)))]))\n  (string-downcase (apply string (int_to_mini_roman_helper number))))\n",
  "  (define (int_to_mini_roman_helper number)\n    (cond [(= number 0) '()]\n   \
    \       [(= number 1) '(i)]\n          [(= number 2) '(i i)]\n          [(= number\
    \ 3) '(i i i)]\n          [(= number 4) '(i v)]\n          [(= number 5) '(v)]\n\
    \          [(= number 6) '(v i)]\n          [(= number 7) '(v i i)]\n        \
    \  [(= number 8) '(v i i i)]\n          [(= number 9) '(i x)]\n          [(= number\
    \ 10) '(x)]\n          [(= number 20) '(x x)]\n          [(= number 30) '(x x\
    \ x)]\n          [(= number 40) '(x l)]\n          [(= number 50) '(l)]\n    \
    \      [(= number 60) '(l x)]\n          [(= number 70) '(l x x)]\n          [(=\
    \ number 80) '(l x x x)]\n          [(= number 90) '(x c)]\n          [(= number\
    \ 100) '(c)]\n          [(= number 200) '(c c)]\n          [(= number 300) '(c\
    \ c c)]\n          [(= number 400) '(c d)]\n          [(= number 500) '(d)]\n\
    \          [(= number 600) '(d c)]\n          [(= number 700) '(d c c)]\n    \
    \      [(= number 800) '(d c c c)]\n          [(= number 900) '(c m)]\n      \
    \    [(= number 1000) '(m)]\n          [else (append (int_to_mini_roman_helper\
    \ (quotient number 10))\n                        (int_to_mini_roman_helper (remainder\
    \ number 10)))]))\n  (string-join (int_to_mini_roman_helper number) \"\"))\n",
  "  (cond\n    [(= number 1) \"i\"]\n    [(= number 2) \"ii\"]\n    [(= number 3)\
    \ \"iii\"]\n    [(= number 4) \"iv\"]\n    [(= number 5) \"v\"]\n    [(= number\
    \ 6) \"vi\"]\n    [(= number 7) \"vii\"]\n    [(= number 8) \"viii\"]\n    [(=\
    \ number 9) \"ix\"]\n    [(= number 10) \"x\"]\n    [(= number 11) \"xi\"]\n \
    \   [(= number 12) \"xii\"]\n    [(= number 13) \"xiii\"]\n    [(= number 14)\
    \ \"xiv\"]\n    [(= number 15) \"xv\"]\n    [(= number 16) \"xvi\"]\n    [(= number\
    \ 17) \"xvii\"]\n    [(= number 18) \"xviii\"]\n    [(= number 19) \"xix\"]\n\
    \    [(= number 20) \"xx\"]\n    [(= number 30) \"xxx\"]\n    [(= number 40) \"\
    xl\"]\n    [(= number 50) \"l\"]\n    [(= number 60) \"lx\"]\n    [(= number 70)\
    \ \"lxx\"]\n    [(= number 80) \"lxxx\"]\n    [(= number 90) \"xc\"]\n    [(=\
    \ number 100) \"c\"]\n    [(= number 200) \"cc\"]\n    [(= number 300) \"ccc\"\
    ]\n    [(= number 400) \"cd\"]\n    [(= number 500) \"d\"]\n    [(= number 600)\
    \ \"dc\"]\n    [(= number 700) \"dcc\"]\n    [(= number 800) \"dccc\"]\n    [(=\
    \ number 900) \"cm\"]\n    [(= number 1000) \"m\"]\n    [(= number 2000) \"mm\"\
    ]\n    [(= number 3000) \"mmm\"]\n    [(= number 4000) \"mv\"]\n    [(= number\
    \ 5000) \"v\"]\n    [(= number 6000) \"vm\"]\n    [(= number 7000) \"vmm\"]\n\
    \    [(= number 8000) \"vmmm\"]\n    [(= number 9000) \"mx\"]\n    [(= number\
    \ 10000) \"x\"]\n    [(= number 20000) \"xx\"]\n    [(= number 30000) \"xxx\"\
    ]\n    [(", "  (define (int_to_mini_roman-helper number)\n    (cond ((= number\
    \ 0) \"\")\n          ((= number 1) \"i\")\n          ((= number 2) \"ii\")\n\
    \          ((= number 3) \"iii\")\n          ((= number 4) \"iv\")\n         \
    \ ((= number 5) \"v\")\n          ((= number 6) \"vi\")\n          ((= number\
    \ 7) \"vii\")\n          ((= number 8) \"viii\")\n          ((= number 9) \"ix\"\
    )\n          ((= number 10) \"x\")\n          ((= number 20) \"xx\")\n       \
    \   ((= number 30) \"xxx\")\n          ((= number 40) \"xl\")\n          ((= number\
    \ 50) \"l\")\n          ((= number 60) \"lx\")\n          ((= number 70) \"lxx\"\
    )\n          ((= number 80) \"lxxx\")\n          ((= number 90) \"xc\")\n    \
    \      ((= number 100) \"c\")\n          ((= number 200) \"cc\")\n          ((=\
    \ number 300) \"ccc\")\n          ((= number 400) \"cd\")\n          ((= number\
    \ 500) \"d\")\n          ((= number 600) \"dc\")\n          ((= number 700) \"\
    dcc\")\n          ((= number 800) \"dccc\")\n          ((= number 900) \"cm\"\
    )\n          ((= number 1000) \"m\")\n          ((= number 2000) \"mm\")\n   \
    \       ((= number 3000) \"mmm\")\n          ((= number 4000) \"mv\")\n      \
    \    ((= number 5000) \"v\")\n          ((= number 6000) \"vm\")\n          ((=\
    \ number 7000) \"vmm\")\n          ((= number 8000) \"vmmm\")\n          ((= number\
    \ 9000) \"mx\")\n          ((= number 10000) \"x\")\n          ((= number 20000)\
    \ \"xx\")\n          ((= number 30000) \"xxx\")\n          ((= number 40000) \"\
    xl\")\n          ((= number 50000) \"l\")\n          ((= number 60000) \"lx\"\
    )\n          ((= number 70000) \"lxx\")\n          ((= number 80000) \"lxxx\"\
    )\n          ((= number 90000) \"xc\")\n          ((= number 100000) \"", "  (define\
    \ (int_to_mini_roman-helper number)\n    (cond\n      [(= number 1000) \"m\"]\n\
    \      [(= number 900) \"cm\"]\n      [(= number 500) \"d\"]\n      [(= number\
    \ 400) \"cd\"]\n      [(= number 100) \"c\"]\n      [(= number 90) \"xc\"]\n \
    \     [(= number 50) \"l\"]\n      [(= number 40) \"xl\"]\n      [(= number 10)\
    \ \"x\"]\n      [(= number 9) \"ix\"]\n      [(= number 5) \"v\"]\n      [(= number\
    \ 4) \"iv\"]\n      [(= number 1) \"i\"]\n      [else (string-append (int_to_mini_roman-helper\
    \ (quotient number 10))\n                           (int_to_mini_roman-helper\
    \ (remainder number 10)))]))\n  (string-downcase (int_to_mini_roman-helper number)))\n",
  "  (define (int_to_mini_roman_helper number)\n    (cond ((= number 1000) \"m\")\n\
    \          ((= number 900) \"cm\")\n          ((= number 500) \"d\")\n       \
    \   ((= number 400) \"cd\")\n          ((= number 100) \"c\")\n          ((= number\
    \ 90) \"xc\")\n          ((= number 50) \"l\")\n          ((= number 40) \"xl\"\
    )\n          ((= number 10) \"x\")\n          ((= number 9) \"ix\")\n        \
    \  ((= number 5) \"v\")\n          ((= number 4) \"iv\")\n          ((= number\
    \ 1) \"i\")))\n  (cond ((= number 0) \"\")\n        ((= number 1) (int_to_mini_roman_helper\
    \ number))\n        ((= number 2) (string-append (int_to_mini_roman_helper number)\n\
    \                                     (int_to_mini_roman_helper number)))\n  \
    \      ((= number 3) (string-append (int_to_mini_roman_helper number)\n      \
    \                               (int_to_mini_roman_helper number)\n          \
    \                           (int_to_mini_roman_helper number)))\n        ((= number\
    \ 4) (int_to_mini_roman_helper number))\n        ((= number 5) (int_to_mini_roman_helper\
    \ number))\n        ((= number 6) (string-append (int_to_mini_roman_helper 5)\n\
    \                                     (int_to_mini_roman_helper 1)))\n       \
    \ ((= number 7) (string-append (int_to_mini_roman_helper 5)\n                \
    \                     (int_to_mini_roman_helper 1)\n                         \
    \            (int_to_mini_roman_helper 1)))\n        ((= number 8) (string-append\
    \ (int_to_mini_roman_helper 5)\n                                     (int_to_mini_roman_helper\
    \ 1)\n                                     (int_to_mini_roman_helper 1)\n    \
    \                                 (int_to_mini_roman_helper 1)))\n        ((=\
    \ number 9) (int_to_mini_roman_helper number))\n        ((= number 10", "  (define\
    \ (int_to_mini_roman_helper number)\n    (cond\n      [(= number 1000) 'm]\n \
    \     [(= number 900) 'cm]\n      [(= number 500) 'd]\n      [(= number 400) 'cd]\n\
    \      [(= number 100) 'c]\n      [(= number 90) 'xc]\n      [(= number 50) 'l]\n\
    \      [(= number 40) 'xl]\n      [(= number 10) 'x]\n      [(= number 9) 'ix]\n\
    \      [(= number 5) 'v]\n      [(= number 4) 'iv]\n      [(= number 1) 'i]\n\
    \      [else (append (int_to_mini_roman_helper (quotient number 10))\n       \
    \             (int_to_mini_roman_helper (remainder number 10)))]))\n  (string-downcase\
    \ (list->string (int_to_mini_roman_helper number))))\n", "  (cond\n    [(= number\
    \ 1) \"i\"]\n    [(= number 2) \"ii\"]\n    [(= number 3) \"iii\"]\n    [(= number\
    \ 4) \"iv\"]\n    [(= number 5) \"v\"]\n    [(= number 6) \"vi\"]\n    [(= number\
    \ 7) \"vii\"]\n    [(= number 8) \"viii\"]\n    [(= number 9) \"ix\"]\n    [(=\
    \ number 10) \"x\"]\n    [(= number 11) \"xi\"]\n    [(= number 12) \"xii\"]\n\
    \    [(= number 13) \"xiii\"]\n    [(= number 14) \"xiv\"]\n    [(= number 15)\
    \ \"xv\"]\n    [(= number 16) \"xvi\"]\n    [(= number 17) \"xvii\"]\n    [(=\
    \ number 18) \"xviii\"]\n    [(= number 19) \"xix\"]\n    [(= number 20) \"xx\"\
    ]\n    [(= number 30) \"xxx\"]\n    [(= number 40) \"xl\"]\n    [(= number 50)\
    \ \"l\"]\n    [(= number 60) \"lx\"]\n    [(= number 70) \"lxx\"]\n    [(= number\
    \ 80) \"lxxx\"]\n    [(= number 90) \"xc\"]\n    [(= number 100) \"c\"]\n    [(=\
    \ number 200) \"cc\"]\n    [(= number 300) \"ccc\"]\n    [(= number 400) \"cd\"\
    ]\n    [(= number 500) \"d\"]\n    [(= number 600) \"dc\"]\n    [(= number 700)\
    \ \"dcc\"]\n    [(= number 800) \"dccc\"]\n    [(= number 900) \"cm\"]\n    [(=\
    \ number 1000) \"m\"]\n    [(= number 2000) \"mm\"]\n    [(= number 3000) \"mmm\"\
    ]\n    [(= number 4000) \"mv\"]\n    [(= number 5000) \"v\"]\n    [(= number 6000)\
    \ \"vm\"]\n    [(= number 7000) \"vmm\"]\n    [(= number 8000) \"vmmm\"]\n   \
    \ [(= number 9000) \"mx\"]\n    [(= number 10000) \"x\"]\n    [(= number 20000)\
    \ \"xx\"]\n    [(= number 30000) \"xxx\"]\n    [(", "  (define (int_to_mini_roman-helper\
    \ number)\n    (cond\n      [(= number 1000) \"m\"]\n      [(= number 900) \"\
    cm\"]\n      [(= number 500) \"d\"]\n      [(= number 400) \"cd\"]\n      [(=\
    \ number 100) \"c\"]\n      [(= number 90) \"xc\"]\n      [(= number 50) \"l\"\
    ]\n      [(= number 40) \"xl\"]\n      [(= number 10) \"x\"]\n      [(= number\
    \ 9) \"ix\"]\n      [(= number 5) \"v\"]\n      [(= number 4) \"iv\"]\n      [(=\
    \ number 1) \"i\"]\n      [else (string-append (int_to_mini_roman-helper (quotient\
    \ number 10))\n                           (int_to_mini_roman-helper (remainder\
    \ number 10)))]))\n  (string-downcase (int_to_mini_roman-helper number)))\n",
  "  (define (int_to_mini_roman-helper number)\n    (cond\n      [(= number 1000)\
    \ 'm]\n      [(= number 900) 'cm]\n      [(= number 500) 'd]\n      [(= number\
    \ 400) 'cd]\n      [(= number 100) 'c]\n      [(= number 90) 'xc]\n      [(= number\
    \ 50) 'l]\n      [(= number 40) 'xl]\n      [(= number 10) 'x]\n      [(= number\
    \ 9) 'ix]\n      [(= number 5) 'v]\n      [(= number 4) 'iv]\n      [(= number\
    \ 1) 'i]\n      [else (append (int_to_mini_roman-helper (quotient number 10))\n\
    \                    (int_to_mini_roman-helper (remainder number 10)))]))\n  (symbol->string\
    \ (int_to_mini_roman-helper number)))\n", "  (define (int_to_mini_roman-helper\
    \ number)\n    (cond\n      [(= number 1000) \"m\"]\n      [(= number 900) \"\
    cm\"]\n      [(= number 500) \"d\"]\n      [(= number 400) \"cd\"]\n      [(=\
    \ number 100) \"c\"]\n      [(= number 90) \"xc\"]\n      [(= number 50) \"l\"\
    ]\n      [(= number 40) \"xl\"]\n      [(= number 10) \"x\"]\n      [(= number\
    \ 9) \"ix\"]\n      [(= number 5) \"v\"]\n      [(= number 4) \"iv\"]\n      [(=\
    \ number 1) \"i\"]\n      [else (string-append (int_to_mini_roman-helper (quotient\
    \ number 10))\n                           (int_to_mini_roman-helper (remainder\
    \ number 10)))]))\n  (string-downcase (int_to_mini_roman-helper number)))\n",
  "  (define (int_to_mini_roman_helper number)\n    (cond\n      [(= number 0) '()]\n\
    \      [(= number 1) '(i)]\n      [(= number 2) '(i i)]\n      [(= number 3) '(i\
    \ i i)]\n      [(= number 4) '(i v)]\n      [(= number 5) '(v)]\n      [(= number\
    \ 6) '(v i)]\n      [(= number 7) '(v i i)]\n      [(= number 8) '(v i i i)]\n\
    \      [(= number 9) '(i x)]\n      [(= number 10) '(x)]\n      [(= number 20)\
    \ '(x x)]\n      [(= number 30) '(x x x)]\n      [(= number 40) '(x l)]\n    \
    \  [(= number 50) '(l)]\n      [(= number 60) '(l x)]\n      [(= number 70) '(l\
    \ x x)]\n      [(= number 80) '(l x x x)]\n      [(= number 90) '(x c)]\n    \
    \  [(= number 100) '(c)]\n      [(= number 200) '(c c)]\n      [(= number 300)\
    \ '(c c c)]\n      [(= number 400) '(c d)]\n      [(= number 500) '(d)]\n    \
    \  [(= number 600) '(d c)]\n      [(= number 700) '(d c c)]\n      [(= number\
    \ 800) '(d c c c)]\n      [(= number 900) '(c m)]\n      [(= number 1000) '(m)]\n\
    \      [else (append (int_to_mini_roman_helper (quotient number 10))\n       \
    \             (int_to_mini_roman_helper (remainder number 10)))]))\n  (string-join\
    \ (int_to_mini_roman_helper number) \"\"))\n", "  (define (int_to_mini_roman_helper\
    \ number)\n    (cond\n      [(= number 1000) 'm]\n      [(= number 900) 'cm]\n\
    \      [(= number 500) 'd]\n      [(= number 400) 'cd]\n      [(= number 100)\
    \ 'c]\n      [(= number 90) 'xc]\n      [(= number 50) 'l]\n      [(= number 40)\
    \ 'xl]\n      [(= number 10) 'x]\n      [(= number 9) 'ix]\n      [(= number 5)\
    \ 'v]\n      [(= number 4) 'iv]\n      [(= number 1) 'i]\n      [else (append\
    \ (int_to_mini_roman_helper (quotient number 10))\n                    (int_to_mini_roman_helper\
    \ (remainder number 10)))]))\n  (string-downcase (list->string (int_to_mini_roman_helper\
    \ number))))\n", "  (define (int_to_mini_roman-helper number)\n    (cond ((= number\
    \ 1000) \"m\")\n          ((= number 900) \"cm\")\n          ((= number 500) \"\
    d\")\n          ((= number 400) \"cd\")\n          ((= number 100) \"c\")\n  \
    \        ((= number 90) \"xc\")\n          ((= number 50) \"l\")\n          ((=\
    \ number 40) \"xl\")\n          ((= number 10) \"x\")\n          ((= number 9)\
    \ \"ix\")\n          ((= number 5) \"v\")\n          ((= number 4) \"iv\")\n \
    \         ((= number 1) \"i\")))\n  (define (int_to_mini_roman-helper-2 number)\n\
    \    (cond ((= number 1000) \"m\")\n          ((= number 900) \"mcm\")\n     \
    \     ((= number 500) \"d\")\n          ((= number 400) \"dcd\")\n          ((=\
    \ number 100) \"c\")\n          ((= number 90) \"cxc\")\n          ((= number\
    \ 50) \"l\")\n          ((= number 40) \"lxl\")\n          ((= number 10) \"x\"\
    )\n          ((= number 9) \"xix\")\n          ((= number 5) \"v\")\n        \
    \  ((= number 4) \"iv\")\n          ((= number 1) \"i\")))\n  (cond ((<= number\
    \ 10) (int_to_mini_roman-helper number))\n        ((<= number 100) (string-append\
    \ (int_to_mini_roman-helper (/ number 10)) (int_to_mini_roman-helper (* 10 (%\
    \ number 10)))))\n        ((<= number 1000) (string-append (int_to_mini_roman-helper\
    \ (/ number 100)) (int_to_mini_roman-helper-2 (* 100 (% number 100)))))))\n",
  "  (define (int_to_mini_roman-helper number)\n    (cond\n      [(= number 0) '()]\n\
    \      [(= number 1) '(i)]\n      [(= number 2) '(i i)]\n      [(= number 3) '(i\
    \ i i)]\n      [(= number 4) '(i v)]\n      [(= number 5) '(v)]\n      [(= number\
    \ 6) '(v i)]\n      [(= number 7) '(v i i)]\n      [(= number 8) '(v i i i)]\n\
    \      [(= number 9) '(i x)]\n      [(= number 10) '(x)]\n      [(= number 20)\
    \ '(x x)]\n      [(= number 30) '(x x x)]\n      [(= number 40) '(x l)]\n    \
    \  [(= number 50) '(l)]\n      [(= number 60) '(l x)]\n      [(= number 70) '(l\
    \ x x)]\n      [(= number 80) '(l x x x)]\n      [(= number 90) '(x c)]\n    \
    \  [(= number 100) '(c)]\n      [(= number 200) '(c c)]\n      [(= number 300)\
    \ '(c c c)]\n      [(= number 400) '(c d)]\n      [(= number 500) '(d)]\n    \
    \  [(= number 600) '(d c)]\n      [(= number 700) '(d c c)]\n      [(= number\
    \ 800) '(d c c c)]\n      [(= number 900) '(c m)]\n      [(= number 1000) '(m)]\n\
    \      [else (append (int_to_mini_roman-helper (/ number 10))\n              \
    \      (int_to_mini_roman-helper (modulo number 10)))]))\n  (string-join (int_to_mini_roman-helper\
    \ number) \"\"))\n", "  (define (int_to_mini_roman-helper number)\n    (cond\n\
    \      [(= number 1000) \"m\"]\n      [(= number 900) \"cm\"]\n      [(= number\
    \ 500) \"d\"]\n      [(= number 400) \"cd\"]\n      [(= number 100) \"c\"]\n \
    \     [(= number 90) \"xc\"]\n      [(= number 50) \"l\"]\n      [(= number 40)\
    \ \"xl\"]\n      [(= number 10) \"x\"]\n      [(= number 9) \"ix\"]\n      [(=\
    \ number 5) \"v\"]\n      [(= number 4) \"iv\"]\n      [(= number 1) \"i\"]\n\
    \      [else (string-append (int_to_mini_roman-helper (quotient number 10))\n\
    \                           (int_to_mini_roman-helper (remainder number 10)))]))\n\
    \  (string-downcase (int_to_mini_roman-helper number)))\n", "  (define (int_to_mini_roman-iter\
    \ number roman-numeral)\n    (cond ((= number 0) roman-numeral)\n          ((=\
    \ number 1) (string-append roman-numeral \"i\"))\n          ((= number 2) (string-append\
    \ roman-numeral \"ii\"))\n          ((= number 3) (string-append roman-numeral\
    \ \"iii\"))\n          ((= number 4) (string-append roman-numeral \"iv\"))\n \
    \         ((= number 5) (string-append roman-numeral \"v\"))\n          ((= number\
    \ 6) (string-append roman-numeral \"vi\"))\n          ((= number 7) (string-append\
    \ roman-numeral \"vii\"))\n          ((= number 8) (string-append roman-numeral\
    \ \"viii\"))\n          ((= number 9) (string-append roman-numeral \"ix\"))\n\
    \          ((= number 10) (string-append roman-numeral \"x\"))\n          ((=\
    \ number 20) (string-append roman-numeral \"xx\"))\n          ((= number 30) (string-append\
    \ roman-numeral \"xxx\"))\n          ((= number 40) (string-append roman-numeral\
    \ \"xl\"))\n          ((= number 50) (string-append roman-numeral \"l\"))\n  \
    \        ((= number 60) (string-append roman-numeral \"lx\"))\n          ((= number\
    \ 70) (string-append roman-numeral \"lxx\"))\n          ((= number 80) (string-append\
    \ roman-numeral \"lxxx\"))\n          ((= number 90) (string-append roman-numeral\
    \ \"xc\"))\n          ((= number 100) (string-append roman-numeral \"c\"))\n \
    \         ((= number 200) (string-append roman-numeral \"cc\"))\n          ((=\
    \ number 300) (string-append roman-numeral \"ccc\"))\n          ((= number 400)\
    \ (string-append roman-numeral \"cd\"))\n          ((= number 500) (string-append\
    \ roman-numeral \"d\"))\n          ((= number 600) (string-append roman-numeral\
    \ \"dc\"))\n          ((= number 700) (string-append roman", "  (define (int_to_mini_roman-helper\
    \ number)\n    (cond\n      [(= number 1000) \"m\"]\n      [(= number 900) \"\
    cm\"]\n      [(= number 500) \"d\"]\n      [(= number 400) \"cd\"]\n      [(=\
    \ number 100) \"c\"]\n      [(= number 90) \"xc\"]\n      [(= number 50) \"l\"\
    ]\n      [(= number 40) \"xl\"]\n      [(= number 10) \"x\"]\n      [(= number\
    \ 9) \"ix\"]\n      [(= number 5) \"v\"]\n      [(= number 4) \"iv\"]\n      [(=\
    \ number 1) \"i\"]\n      [else (string-append (int_to_mini_roman-helper (/ number\
    \ 10))\n                           (int_to_mini_roman-helper (remainder number\
    \ 10)))]))\n  (string-downcase (int_to_mini_roman-helper number)))\n", "  (define\
    \ (int_to_mini_roman-helper number)\n    (cond\n      [(= number 1000) 'm]\n \
    \     [(= number 900) 'cm]\n      [(= number 500) 'd]\n      [(= number 400) 'cd]\n\
    \      [(= number 100) 'c]\n      [(= number 90) 'xc]\n      [(= number 50) 'l]\n\
    \      [(= number 40) 'xl]\n      [(= number 10) 'x]\n      [(= number 9) 'ix]\n\
    \      [(= number 5) 'v]\n      [(= number 4) 'iv]\n      [(= number 1) 'i]\n\
    \      [else (append (int_to_mini_roman-helper (quotient number 10))\n       \
    \             (int_to_mini_roman-helper (remainder number 10)))]))\n  (string-downcase\
    \ (list->string (int_to_mini_roman-helper number))))\n", "  (define (int_to_mini_roman-helper\
    \ number)\n    (cond\n      [(= number 1000) \"m\"]\n      [(= number 900) \"\
    cm\"]\n      [(= number 500) \"d\"]\n      [(= number 400) \"cd\"]\n      [(=\
    \ number 100) \"c\"]\n      [(= number 90) \"xc\"]\n      [(= number 50) \"l\"\
    ]\n      [(= number 40) \"xl\"]\n      [(= number 10) \"x\"]\n      [(= number\
    \ 9) \"ix\"]\n      [(= number 5) \"v\"]\n      [(= number 4) \"iv\"]\n      [(=\
    \ number 1) \"i\"]\n      [else (string-append (int_to_mini_roman-helper (quotient\
    \ number 10))\n                           (int_to_mini_roman-helper (remainder\
    \ number 10)))]))\n  (string-downcase (int_to_mini_roman-helper number)))\n",
  "  (define (int_to_mini_roman_helper number)\n    (cond ((= number 1000) 'm)\n \
    \         ((>= number 900) (cons 'c (int_to_mini_roman_helper (- number 900))))\n\
    \          ((>= number 500) (cons 'd (int_to_mini_roman_helper (- number 500))))\n\
    \          ((>= number 400) (cons 'c (int_to_mini_roman_helper (- number 400))))\n\
    \          ((>= number 100) (cons 'c (int_to_mini_roman_helper (- number 100))))\n\
    \          ((>= number 90) (cons 'x (int_to_mini_roman_helper (- number 90))))\n\
    \          ((>= number 50) (cons 'l (int_to_mini_roman_helper (- number 50))))\n\
    \          ((>= number 40) (cons 'x (int_to_mini_roman_helper (- number 40))))\n\
    \          ((>= number 10) (cons 'x (int_to_mini_roman_helper (- number 10))))\n\
    \          ((>= number 9) (cons 'i (int_to_mini_roman_helper (- number 9))))\n\
    \          ((>= number 5) (cons 'v (int_to_mini_roman_helper (- number 5))))\n\
    \          ((>= number 4) (cons 'i (int_to_mini_roman_helper (- number 4))))\n\
    \          ((>= number 1) (cons 'i (int_to_mini_roman_helper (- number 1))))\n\
    \          (else '())))\n  (string-join (int_to_mini_roman_helper number) \"\"\
    ))\n", "  (define (int_to_mini_roman-helper number)\n    (cond\n      [(= number\
    \ 1000) 'm]\n      [(= number 900) 'cm]\n      [(= number 500) 'd]\n      [(=\
    \ number 400) 'cd]\n      [(= number 100) 'c]\n      [(= number 90) 'xc]\n   \
    \   [(= number 50) 'l]\n      [(= number 40) 'xl]\n      [(= number 10) 'x]\n\
    \      [(= number 9) 'ix]\n      [(= number 5) 'v]\n      [(= number 4) 'iv]\n\
    \      [(= number 1) 'i]\n      [else (append (int_to_mini_roman-helper (quotient\
    \ number 10))\n                    (int_to_mini_roman-helper (remainder number\
    \ 10)))]))\n  (string-downcase (list->string (int_to_mini_roman-helper number))))\n",
  "  (define (int_to_mini_roman_helper number roman-string)\n    (cond ((= number\
    \ 0) roman-string)\n          ((= number 1) (string-append roman-string \"i\"\
    ))\n          ((= number 2) (string-append roman-string \"ii\"))\n          ((=\
    \ number 3) (string-append roman-string \"iii\"))\n          ((= number 4) (string-append\
    \ roman-string \"iv\"))\n          ((= number 5) (string-append roman-string \"\
    v\"))\n          ((= number 6) (string-append roman-string \"vi\"))\n        \
    \  ((= number 7) (string-append roman-string \"vii\"))\n          ((= number 8)\
    \ (string-append roman-string \"viii\"))\n          ((= number 9) (string-append\
    \ roman-string \"ix\"))\n          ((= number 10) (string-append roman-string\
    \ \"x\"))\n          ((= number 40) (string-append roman-string \"xl\"))\n   \
    \       ((= number 50) (string-append roman-string \"l\"))\n          ((= number\
    \ 90) (string-append roman-string \"xc\"))\n          ((= number 100) (string-append\
    \ roman-string \"c\"))\n          ((= number 400) (string-append roman-string\
    \ \"cd\"))\n          ((= number 500) (string-append roman-string \"d\"))\n  \
    \        ((= number 900) (string-append roman-string \"cm\"))\n          ((= number\
    \ 1000) (string-append roman-string \"m\"))\n          ((< number 10) (int_to_mini_roman_helper\
    \ (- number 1) (string-append roman-string \"i\")))\n          ((< number 40)\
    \ (int_to_mini_roman_helper (- number 10) (string-append roman-string \"x\")))\n\
    \          ((< number 50) (int_to_mini_roman_helper (- number 40) (string-append\
    \ roman-string \"xl\")))\n          ((< number 90) (int_to_mini_roman_helper (-\
    \ number 50) (string-append roman-string \"l\")))\n          ((< number 100) (int_to_mini",
  "  (define (int_to_mini_roman-helper number)\n    (cond\n      [(= number 1000)\
    \ \"m\"]\n      [(= number 900) \"cm\"]\n      [(= number 500) \"d\"]\n      [(=\
    \ number 400) \"cd\"]\n      [(= number 100) \"c\"]\n      [(= number 90) \"xc\"\
    ]\n      [(= number 50) \"l\"]\n      [(= number 40) \"xl\"]\n      [(= number\
    \ 10) \"x\"]\n      [(= number 9) \"ix\"]\n      [(= number 5) \"v\"]\n      [(=\
    \ number 4) \"iv\"]\n      [(= number 1) \"i\"]\n      [else (string-append (int_to_mini_roman-helper\
    \ (quotient number 10))\n                           (int_to_mini_roman-helper\
    \ (remainder number 10)))]))\n  (string-downcase (int_to_mini_roman-helper number)))\n",
  "  (define (int_to_mini_roman_helper number)\n    (cond\n      [(= number 1000)\
    \ \"m\"]\n      [(= number 900) \"cm\"]\n      [(= number 500) \"d\"]\n      [(=\
    \ number 400) \"cd\"]\n      [(= number 100) \"c\"]\n      [(= number 90) \"xc\"\
    ]\n      [(= number 50) \"l\"]\n      [(= number 40) \"xl\"]\n      [(= number\
    \ 10) \"x\"]\n      [(= number 9) \"ix\"]\n      [(= number 5) \"v\"]\n      [(=\
    \ number 4) \"iv\"]\n      [(= number 1) \"i\"]\n      [else (string-append (int_to_mini_roman_helper\
    \ (quotient number 10))\n                           (int_to_mini_roman_helper\
    \ (remainder number 10)))]))\n  (string-downcase (int_to_mini_roman_helper number)))\n",
  "  (define (int_to_mini_roman_helper number)\n    (cond\n      [(= number 1000)\
    \ 'm]\n      [(= number 900) 'cm]\n      [(= number 500) 'd]\n      [(= number\
    \ 400) 'cd]\n      [(= number 100) 'c]\n      [(= number 90) 'xc]\n      [(= number\
    \ 50) 'l]\n      [(= number 40) 'xl]\n      [(= number 10) 'x]\n      [(= number\
    \ 9) 'ix]\n      [(= number 5) 'v]\n      [(= number 4) 'iv]\n      [(= number\
    \ 1) 'i]\n      [else (append (int_to_mini_roman_helper (quotient number 10))\n\
    \                    (int_to_mini_roman_helper (remainder number 10)))]))\n  (string-downcase\
    \ (list->string (int_to_mini_roman_helper number))))\n", "  (define (int_to_mini_roman-helper\
    \ number)\n    (cond\n      [(= number 1000) \"m\"]\n      [(= number 900) \"\
    cm\"]\n      [(= number 500) \"d\"]\n      [(= number 400) \"cd\"]\n      [(=\
    \ number 100) \"c\"]\n      [(= number 90) \"xc\"]\n      [(= number 50) \"l\"\
    ]\n      [(= number 40) \"xl\"]\n      [(= number 10) \"x\"]\n      [(= number\
    \ 9) \"ix\"]\n      [(= number 5) \"v\"]\n      [(= number 4) \"iv\"]\n      [(=\
    \ number 1) \"i\"]\n      [else (append (int_to_mini_roman-helper (quotient number\
    \ 10))\n                    (int_to_mini_roman-helper (remainder number 10)))]))\n\
    \  (string-downcase (int_to_mini_roman-helper number)))\n", "  (define (int_to_mini_roman_helper\
    \ number roman)\n    (cond\n      [(= number 0) roman]\n      [(<= number 3) (string-append\
    \ (make-string number #\\i) roman)]\n      [(<= number 4) (string-append \"iv\"\
    \ roman)]\n      [(<= number 8) (string-append (make-string (- number 5) #\\i)\
    \ \"v\" roman)]\n      [(<= number 9) (string-append \"ix\" roman)]\n      [(<=\
    \ number 39) (int_to_mini_roman_helper (- number 10) (string-append \"x\" roman))]\n\
    \      [(<= number 40) (string-append \"xl\" roman)]\n      [(<= number 89) (int_to_mini_roman_helper\
    \ (- number 50) (string-append \"l\" roman))]\n      [(<= number 90) (string-append\
    \ \"xc\" roman)]\n      [(<= number 399) (int_to_mini_roman_helper (- number 100)\
    \ (string-append \"c\" roman))]\n      [(<= number 400) (string-append \"cd\"\
    \ roman)]\n      [(<= number 899) (int_to_mini_roman_helper (- number 500) (string-append\
    \ \"d\" roman))]\n      [(<= number 900) (string-append \"cm\" roman)]\n     \
    \ [(<= number 999) (int_to_mini_roman_helper (- number 1000) (string-append \"\
    m\" roman))]\n      [(<= number 1000) (string-append \"m\" roman)]))\n  (int_to_mini_roman_helper\
    \ number \"\"))\n", "  (define (int_to_mini_roman_iter number roman)\n    (cond\n\
    \      [(= number 0) roman]\n      [(>= number 1000) (int_to_mini_roman_iter (-\
    \ number 1000) (string-append roman \"m\"))]\n      [(>= number 900) (int_to_mini_roman_iter\
    \ (- number 900) (string-append roman \"cm\"))]\n      [(>= number 500) (int_to_mini_roman_iter\
    \ (- number 500) (string-append roman \"d\"))]\n      [(>= number 400) (int_to_mini_roman_iter\
    \ (- number 400) (string-append roman \"cd\"))]\n      [(>= number 100) (int_to_mini_roman_iter\
    \ (- number 100) (string-append roman \"c\"))]\n      [(>= number 90) (int_to_mini_roman_iter\
    \ (- number 90) (string-append roman \"xc\"))]\n      [(>= number 50) (int_to_mini_roman_iter\
    \ (- number 50) (string-append roman \"l\"))]\n      [(>= number 40) (int_to_mini_roman_iter\
    \ (- number 40) (string-append roman \"xl\"))]\n      [(>= number 10) (int_to_mini_roman_iter\
    \ (- number 10) (string-append roman \"x\"))]\n      [(>= number 9) (int_to_mini_roman_iter\
    \ (- number 9) (string-append roman \"ix\"))]\n      [(>= number 5) (int_to_mini_roman_iter\
    \ (- number 5) (string-append roman \"v\"))]\n      [(>= number 4) (int_to_mini_roman_iter\
    \ (- number 4) (string-append roman \"iv\"))]\n      [(>= number 1) (int_to_mini_roman_iter\
    \ (- number 1) (string-append roman \"i\"))]))\n  (int_to_mini_roman_iter number\
    \ \"\"))\n", "  (define (int_to_mini_roman_helper number)\n    (cond\n      [(=\
    \ number 1000) 'm]\n      [(= number 900) 'cm]\n      [(= number 500) 'd]\n  \
    \    [(= number 400) 'cd]\n      [(= number 100) 'c]\n      [(= number 90) 'xc]\n\
    \      [(= number 50) 'l]\n      [(= number 40) 'xl]\n      [(= number 10) 'x]\n\
    \      [(= number 9) 'ix]\n      [(= number 5) 'v]\n      [(= number 4) 'iv]\n\
    \      [(= number 1) 'i]\n      [else (append (int_to_mini_roman_helper (quotient\
    \ number 10))\n                    (int_to_mini_roman_helper (remainder number\
    \ 10)))]))\n  (string-downcase (list->string (int_to_mini_roman_helper number))))\n",
  "  (define (int_to_mini_roman_helper number)\n    (cond\n      [(= number 1000)\
    \ 'm]\n      [(= number 900) 'cm]\n      [(= number 500) 'd]\n      [(= number\
    \ 400) 'cd]\n      [(= number 100) 'c]\n      [(= number 90) 'xc]\n      [(= number\
    \ 50) 'l]\n      [(= number 40) 'xl]\n      [(= number 10) 'x]\n      [(= number\
    \ 9) 'ix]\n      [(= number 5) 'v]\n      [(= number 4) 'iv]\n      [(= number\
    \ 1) 'i]\n      [else (append (int_to_mini_roman_helper (quotient number 10))\n\
    \                    (int_to_mini_roman_helper (remainder number 10)))]))\n  (string-downcase\
    \ (list->string (int_to_mini_roman_helper number))))\n", "  (define (int_to_mini_roman_helper\
    \ number)\n    (cond\n      [(= number 1000) \"m\"]\n      [(= number 900) \"\
    cm\"]\n      [(= number 500) \"d\"]\n      [(= number 400) \"cd\"]\n      [(=\
    \ number 100) \"c\"]\n      [(= number 90) \"xc\"]\n      [(= number 50) \"l\"\
    ]\n      [(= number 40) \"xl\"]\n      [(= number 10) \"x\"]\n      [(= number\
    \ 9) \"ix\"]\n      [(= number 5) \"v\"]\n      [(= number 4) \"iv\"]\n      [(=\
    \ number 1) \"i\"]\n      [else (string-append (int_to_mini_roman_helper (quotient\
    \ number 10))\n                           (int_to_mini_roman_helper (remainder\
    \ number 10)))]))\n  (string-downcase (int_to_mini_roman_helper number)))\n",
  "  (define (int_to_mini_roman_helper number)\n    (cond\n      [(= number 1000)\
    \ 'm]\n      [(= number 900) 'cm]\n      [(= number 500) 'd]\n      [(= number\
    \ 400) 'cd]\n      [(= number 100) 'c]\n      [(= number 90) 'xc]\n      [(= number\
    \ 50) 'l]\n      [(= number 40) 'xl]\n      [(= number 10) 'x]\n      [(= number\
    \ 9) 'ix]\n      [(= number 5) 'v]\n      [(= number 4) 'iv]\n      [(= number\
    \ 1) 'i]\n      [else (append (int_to_mini_roman_helper (quotient number 10))\n\
    \                    (int_to_mini_roman_helper (remainder number 10)))]))\n  (string-downcase\
    \ (list->string (int_to_mini_roman_helper number))))\n", "  (define (int_to_mini_roman-helper\
    \ number roman-string)\n    (cond\n      [(= number 0) (string-downcase roman-string)]\n\
    \      [(= number 1) (int_to_mini_roman-helper 0 (string-append roman-string \"\
    I\"))]\n      [(= number 2) (int_to_mini_roman-helper 0 (string-append roman-string\
    \ \"II\"))]\n      [(= number 3) (int_to_mini_roman-helper 0 (string-append roman-string\
    \ \"III\"))]\n      [(= number 4) (int_to_mini_roman-helper 0 (string-append roman-string\
    \ \"IV\"))]\n      [(= number 5) (int_to_mini_roman-helper 0 (string-append roman-string\
    \ \"V\"))]\n      [(= number 6) (int_to_mini_roman-helper 0 (string-append roman-string\
    \ \"VI\"))]\n      [(= number 7) (int_to_mini_roman-helper 0 (string-append roman-string\
    \ \"VII\"))]\n      [(= number 8) (int_to_mini_roman-helper 0 (string-append roman-string\
    \ \"VIII\"))]\n      [(= number 9) (int_to_mini_roman-helper 0 (string-append\
    \ roman-string \"IX\"))]\n      [(= number 10) (int_to_mini_roman-helper 0 (string-append\
    \ roman-string \"X\"))]\n      [(= number 11) (int_to_mini_roman-helper 0 (string-append\
    \ roman-string \"XI\"))]\n      [(= number 12) (int_to_mini_roman-helper 0 (string-append\
    \ roman-string \"XII\"))]\n      [(= number 13) (int_to_mini_roman-helper 0 (string-append\
    \ roman-string \"XIII\"))]\n      [(= number 14) (int_to_mini_roman-helper 0 (string-append\
    \ roman-string \"XIV\"))]\n      [(= number 15) (int_to_mini_roman-helper 0 (string-append\
    \ roman-string \"XV\"))", "  (define (int_to_mini_roman_helper number)\n    (cond\n\
    \      [(= number 0) '()]\n      [(= number 1000) (cons 'm (int_to_mini_roman_helper\
    \ (- number 1000)))]\n      [(= number 900) (cons 'c (cons 'm (int_to_mini_roman_helper\
    \ (- number 900))))]\n      [(= number 500) (cons 'd (int_to_mini_roman_helper\
    \ (- number 500)))]\n      [(= number 400) (cons 'c (cons 'd (int_to_mini_roman_helper\
    \ (- number 400))))]\n      [(= number 100) (cons 'c (int_to_mini_roman_helper\
    \ (- number 100)))]\n      [(= number 90) (cons 'x (cons 'c (int_to_mini_roman_helper\
    \ (- number 90))))]\n      [(= number 50) (cons 'l (int_to_mini_roman_helper (-\
    \ number 50)))]\n      [(= number 40) (cons 'x (cons 'l (int_to_mini_roman_helper\
    \ (- number 40))))]\n      [(= number 10) (cons 'x (int_to_mini_roman_helper (-\
    \ number 10)))]\n      [(= number 9) (cons 'i (cons 'x (int_to_mini_roman_helper\
    \ (- number 9))))]\n      [(= number 5) (cons 'v (int_to_mini_roman_helper (-\
    \ number 5)))]\n      [(= number 4) (cons 'i (cons 'v (int_to_mini_roman_helper\
    \ (- number 4))))]\n      [(= number 1) (cons 'i (int_to_mini_roman_helper (-\
    \ number 1)))]))\n  (string-join (int_to_mini_roman_helper number) \"\"))\n",
  "  (define (int_to_mini_roman_helper number)\n    (cond\n      [(= number 1000)\
    \ \"m\"]\n      [(= number 900) \"cm\"]\n      [(= number 500) \"d\"]\n      [(=\
    \ number 400) \"cd\"]\n      [(= number 100) \"c\"]\n      [(= number 90) \"xc\"\
    ]\n      [(= number 50) \"l\"]\n      [(= number 40) \"xl\"]\n      [(= number\
    \ 10) \"x\"]\n      [(= number 9) \"ix\"]\n      [(= number 5) \"v\"]\n      [(=\
    \ number 4) \"iv\"]\n      [(= number 1) \"i\"]\n      [else (string-append (int_to_mini_roman_helper\
    \ (quotient number 10))\n                           (int_to_mini_roman_helper\
    \ (remainder number 10)))]))\n  (string-downcase (int_to_mini_roman_helper number)))\n",
  "  (define (int_to_mini_roman_helper number)\n    (cond\n      [(= number 1000)\
    \ \"m\"]\n      [(= number 900) \"cm\"]\n      [(= number 500) \"d\"]\n      [(=\
    \ number 400) \"cd\"]\n      [(= number 100) \"c\"]\n      [(= number 90) \"xc\"\
    ]\n      [(= number 50) \"l\"]\n      [(= number 40) \"xl\"]\n      [(= number\
    \ 10) \"x\"]\n      [(= number 9) \"ix\"]\n      [(= number 5) \"v\"]\n      [(=\
    \ number 4) \"iv\"]\n      [(= number 1) \"i\"]\n      [(= number 0) \"\"]\n \
    \     [else (string-append (int_to_mini_roman_helper (quotient number 10))\n \
    \                          (int_to_mini_roman_helper (remainder number 10)))]))\n\
    \  (string-downcase (int_to_mini_roman_helper number)))\n", "  (define (int_to_mini_roman-helper\
    \ number)\n    (cond\n      [(= number 1000) 'm]\n      [(= number 900) 'cm]\n\
    \      [(= number 500) 'd]\n      [(= number 400) 'cd]\n      [(= number 100)\
    \ 'c]\n      [(= number 90) 'xc]\n      [(= number 50) 'l]\n      [(= number 40)\
    \ 'xl]\n      [(= number 10) 'x]\n      [(= number 9) 'ix]\n      [(= number 5)\
    \ 'v]\n      [(= number 4) 'iv]\n      [(= number 1) 'i]\n      [else (append\
    \ (int_to_mini_roman-helper (quotient number 10))\n                    (int_to_mini_roman-helper\
    \ (remainder number 10)))]))\n  (string-downcase (list->string (int_to_mini_roman-helper\
    \ number))))\n", "  (define (int_to_mini_roman_helper number)\n    (cond\n   \
    \   [(= number 0) '()]\n      [(= number 1) '(i)]\n      [(= number 2) '(i i)]\n\
    \      [(= number 3) '(i i i)]\n      [(= number 4) '(i v)]\n      [(= number\
    \ 5) '(v)]\n      [(= number 6) '(v i)]\n      [(= number 7) '(v i i)]\n     \
    \ [(= number 8) '(v i i i)]\n      [(= number 9) '(i x)]\n      [(= number 10)\
    \ '(x)]\n      [(= number 20) '(x x)]\n      [(= number 30) '(x x x)]\n      [(=\
    \ number 40) '(x l)]\n      [(= number 50) '(l)]\n      [(= number 60) '(l x)]\n\
    \      [(= number 70) '(l x x)]\n      [(= number 80) '(l x x x)]\n      [(= number\
    \ 90) '(x c)]\n      [(= number 100) '(c)]\n      [(= number 200) '(c c)]\n  \
    \    [(= number 300) '(c c c)]\n      [(= number 400) '(c d)]\n      [(= number\
    \ 500) '(d)]\n      [(= number 600) '(d c)]\n      [(= number 700) '(d c c)]\n\
    \      [(= number 800) '(d c c c)]\n      [(= number 900) '(c m)]\n      [(= number\
    \ 1000) '(m)]\n      [(= number 2000) '(m m)]\n      [(= number 3000) '(m m m)]\n\
    \      [else (append (int_to_mini_roman_helper (/ number 10))\n              \
    \      (int_to_mini_roman_helper (modulo number 10)))]))\n  (string-join (int_to_mini_roman_helper\
    \ number) \"\"))\n", "  (define (int_to_mini_roman-helper number)\n    (cond\n\
    \      [(= number 1000) 'm]\n      [(= number 900) 'cm]\n      [(= number 500)\
    \ 'd]\n      [(= number 400) 'cd]\n      [(= number 100) 'c]\n      [(= number\
    \ 90) 'xc]\n      [(= number 50) 'l]\n      [(= number 40) 'xl]\n      [(= number\
    \ 10) 'x]\n      [(= number 9) 'ix]\n      [(= number 5) 'v]\n      [(= number\
    \ 4) 'iv]\n      [(= number 1) 'i]\n      [else (append (int_to_mini_roman-helper\
    \ (quotient number 10))\n                    (int_to_mini_roman-helper (remainder\
    \ number 10)))]))\n  (string-downcase (list->string (int_to_mini_roman-helper\
    \ number))))\n", "  (define (int_to_mini_roman-helper number)\n    (cond [(= number\
    \ 0) '()]\n          [(= number 1) '(I)]\n          [(= number 2) '(I I)]\n  \
    \        [(= number 3) '(I I I)]\n          [(= number 4) '(I V)]\n          [(=\
    \ number 5) '(V)]\n          [(= number 6) '(V I)]\n          [(= number 7) '(V\
    \ I I)]\n          [(= number 8) '(V I I I)]\n          [(= number 9) '(I X)]\n\
    \          [(= number 10) '(X)]\n          [(= number 20) '(X X)]\n          [(=\
    \ number 30) '(X X X)]\n          [(= number 40) '(X L)]\n          [(= number\
    \ 50) '(L)]\n          [(= number 60) '(L X)]\n          [(= number 70) '(L X\
    \ X)]\n          [(= number 80) '(L X X X)]\n          [(= number 90) '(X C)]\n\
    \          [(= number 100) '(C)]\n          [(= number 200) '(C C)]\n        \
    \  [(= number 300) '(C C C)]\n          [(= number 400) '(C D)]\n          [(=\
    \ number 500) '(D)]\n          [(= number 600) '(D C)]\n          [(= number 700)\
    \ '(D C C)]\n          [(= number 800) '(D C C C)]\n          [(= number 900)\
    \ '(C M)]\n          [(= number 1000) '(M)]\n          [else (append (int_to_mini_roman-helper\
    \ (quotient number 10))\n                        (int_to_mini_roman-helper (remainder\
    \ number 10)))]))\n  (string-join (int_to_mini_roman-helper number) \"\"))\n```\n\
    \n## Problem 2\n\n```racket\n#lang racket\n", "  (define (int_to_mini_roman-helper\
    \ number)\n    (cond\n      [(= number 0) '()]\n      [(= number 1) '(i)]\n  \
    \    [(= number 2) '(i i)]\n      [(= number 3) '(i i i)]\n      [(= number 4)\
    \ '(i v)]\n      [(= number 5) '(v)]\n      [(= number 6) '(v i)]\n      [(= number\
    \ 7) '(v i i)]\n      [(= number 8) '(v i i i)]\n      [(= number 9) '(i x)]\n\
    \      [(= number 10) '(x)]\n      [(= number 20) '(x x)]\n      [(= number 30)\
    \ '(x x x)]\n      [(= number 40) '(x l)]\n      [(= number 50) '(l)]\n      [(=\
    \ number 60) '(l x)]\n      [(= number 70) '(l x x)]\n      [(= number 80) '(l\
    \ x x x)]\n      [(= number 90) '(x c)]\n      [(= number 100) '(c)]\n      [(=\
    \ number 200) '(c c)]\n      [(= number 300) '(c c c)]\n      [(= number 400)\
    \ '(c d)]\n      [(= number 500) '(d)]\n      [(= number 600) '(d c)]\n      [(=\
    \ number 700) '(d c c)]\n      [(= number 800) '(d c c c)]\n      [(= number 900)\
    \ '(c m)]\n      [(= number 1000) '(m)]\n      [else (append (int_to_mini_roman-helper\
    \ (/ number 10))\n                    (int_to_mini_roman-helper (modulo number\
    \ 10)))]))\n  (string-join (int_to_mini_roman-helper number) \"\"))\n", "  (define\
    \ (int_to_mini_roman_helper number)\n    (cond\n      [(= number 0) '()]\n   \
    \   [(= number 1) '(i)]\n      [(= number 2) '(i i)]\n      [(= number 3) '(i\
    \ i i)]\n      [(= number 4) '(i v)]\n      [(= number 5) '(v)]\n      [(= number\
    \ 6) '(v i)]\n      [(= number 7) '(v i i)]\n      [(= number 8) '(v i i i)]\n\
    \      [(= number 9) '(i x)]\n      [(= number 10) '(x)]\n      [(= number 20)\
    \ '(x x)]\n      [(= number 30) '(x x x)]\n      [(= number 40) '(x l)]\n    \
    \  [(= number 50) '(l)]\n      [(= number 60) '(l x)]\n      [(= number 70) '(l\
    \ x x)]\n      [(= number 80) '(l x x x)]\n      [(= number 90) '(x c)]\n    \
    \  [(= number 100) '(c)]\n      [(= number 200) '(c c)]\n      [(= number 300)\
    \ '(c c c)]\n      [(= number 400) '(c d)]\n      [(= number 500) '(d)]\n    \
    \  [(= number 600) '(d c)]\n      [(= number 700) '(d c c)]\n      [(= number\
    \ 800) '(d c c c)]\n      [(= number 900) '(c m)]\n      [(= number 1000) '(m)]\n\
    \      [else (append (int_to_mini_roman_helper (/ number 10))\n              \
    \      (int_to_mini_roman_helper (modulo number 10)))]))\n  (string-join (int_to_mini_roman_helper\
    \ number) \"\"))\n", "  (define (int_to_mini_roman_helper number)\n    (cond\n\
    \      [(= number 1000) 'm]\n      [(= number 900) 'cm]\n      [(= number 500)\
    \ 'd]\n      [(= number 400) 'cd]\n      [(= number 100) 'c]\n      [(= number\
    \ 90) 'xc]\n      [(= number 50) 'l]\n      [(= number 40) 'xl]\n      [(= number\
    \ 10) 'x]\n      [(= number 9) 'ix]\n      [(= number 5) 'v]\n      [(= number\
    \ 4) 'iv]\n      [(= number 1) 'i]\n      [else (append (int_to_mini_roman_helper\
    \ (quotient number 10))\n                    (int_to_mini_roman_helper (remainder\
    \ number 10)))]))\n  (string-downcase (list->string (int_to_mini_roman_helper\
    \ number))))\n", "  (define (int_to_mini_roman_helper number roman-string)\n \
    \   (cond\n      [(= number 0) roman-string]\n      [(>= number 1000) (int_to_mini_roman_helper\
    \ (- number 1000) (string-append roman-string \"m\"))]\n      [(>= number 900)\
    \ (int_to_mini_roman_helper (- number 900) (string-append roman-string \"cm\"\
    ))]\n      [(>= number 500) (int_to_mini_roman_helper (- number 500) (string-append\
    \ roman-string \"d\"))]\n      [(>= number 400) (int_to_mini_roman_helper (- number\
    \ 400) (string-append roman-string \"cd\"))]\n      [(>= number 100) (int_to_mini_roman_helper\
    \ (- number 100) (string-append roman-string \"c\"))]\n      [(>= number 90) (int_to_mini_roman_helper\
    \ (- number 90) (string-append roman-string \"xc\"))]\n      [(>= number 50) (int_to_mini_roman_helper\
    \ (- number 50) (string-append roman-string \"l\"))]\n      [(>= number 40) (int_to_mini_roman_helper\
    \ (- number 40) (string-append roman-string \"xl\"))]\n      [(>= number 10) (int_to_mini_roman_helper\
    \ (- number 10) (string-append roman-string \"x\"))]\n      [(>= number 9) (int_to_mini_roman_helper\
    \ (- number 9) (string-append roman-string \"ix\"))]\n      [(>= number 5) (int_to_mini_roman_helper\
    \ (- number 5) (string-append roman-string \"v\"))]\n      [(>= number 4) (int_to_mini_roman_helper\
    \ (- number 4) (string-append roman-string \"iv\"))]\n      [(>= number 1) (int_to_mini_roman_helper\
    \ (- number 1) (string-append roman-string \"i\"))]))\n  (string-downcase (int_to_mini_roman_helper",
  "  (define (int_to_mini_roman_helper number)\n    (cond\n      [(= number 1000)\
    \ 'm]\n      [(= number 900) 'cm]\n      [(= number 500) 'd]\n      [(= number\
    \ 400) 'cd]\n      [(= number 100) 'c]\n      [(= number 90) 'xc]\n      [(= number\
    \ 50) 'l]\n      [(= number 40) 'xl]\n      [(= number 10) 'x]\n      [(= number\
    \ 9) 'ix]\n      [(= number 5) 'v]\n      [(= number 4) 'iv]\n      [(= number\
    \ 1) 'i]\n      [else (cons (int_to_mini_roman_helper (quotient number 10))\n\
    \                   (int_to_mini_roman_helper (remainder number 10)))]))\n  (string-join\
    \ (int_to_mini_roman_helper number) \"\"))\n", "  (define (int_to_mini_roman-helper\
    \ number)\n    (cond\n      [(= number 1000) \"m\"]\n      [(= number 900) \"\
    cm\"]\n      [(= number 500) \"d\"]\n      [(= number 400) \"cd\"]\n      [(=\
    \ number 100) \"c\"]\n      [(= number 90) \"xc\"]\n      [(= number 50) \"l\"\
    ]\n      [(= number 40) \"xl\"]\n      [(= number 10) \"x\"]\n      [(= number\
    \ 9) \"ix\"]\n      [(= number 5) \"v\"]\n      [(= number 4) \"iv\"]\n      [(=\
    \ number 1) \"i\"]\n      [else (string-append (int_to_mini_roman-helper (quotient\
    \ number 10))\n                           (int_to_mini_roman-helper (remainder\
    \ number 10)))]))\n  (string-downcase (int_to_mini_roman-helper number)))\n",
  "  (define (int_to_mini_roman_helper number)\n    (cond\n      [(= number 0) '()]\n\
    \      [(= number 1) '(i)]\n      [(= number 2) '(i i)]\n      [(= number 3) '(i\
    \ i i)]\n      [(= number 4) '(i v)]\n      [(= number 5) '(v)]\n      [(= number\
    \ 6) '(v i)]\n      [(= number 7) '(v i i)]\n      [(= number 8) '(v i i i)]\n\
    \      [(= number 9) '(i x)]\n      [(= number 10) '(x)]\n      [(= number 20)\
    \ '(x x)]\n      [(= number 30) '(x x x)]\n      [(= number 40) '(x l)]\n    \
    \  [(= number 50) '(l)]\n      [(= number 60) '(l x)]\n      [(= number 70) '(l\
    \ x x)]\n      [(= number 80) '(l x x x)]\n      [(= number 90) '(x c)]\n    \
    \  [(= number 100) '(c)]\n      [(= number 200) '(c c)]\n      [(= number 300)\
    \ '(c c c)]\n      [(= number 400) '(c d)]\n      [(= number 500) '(d)]\n    \
    \  [(= number 600) '(d c)]\n      [(= number 700) '(d c c)]\n      [(= number\
    \ 800) '(d c c c)]\n      [(= number 900) '(c m)]\n      [(= number 1000) '(m)]\n\
    \      [else (append (int_to_mini_roman_helper (quotient number 10))\n       \
    \             (int_to_mini_roman_helper (remainder number 10)))]))\n  (string-join\
    \ (int_to_mini_roman_helper number) \"\"))\n", "  (define (int_to_mini_roman-aux\
    \ number)\n    (cond\n      [(= number 0) '()]\n      [(= number 1) '(i)]\n  \
    \    [(= number 2) '(i i)]\n      [(= number 3) '(i i i)]\n      [(= number 4)\
    \ '(i v)]\n      [(= number 5) '(v)]\n      [(= number 6) '(v i)]\n      [(= number\
    \ 7) '(v i i)]\n      [(= number 8) '(v i i i)]\n      [(= number 9) '(i x)]\n\
    \      [(= number 10) '(x)]\n      [(= number 20) '(x x)]\n      [(= number 30)\
    \ '(x x x)]\n      [(= number 40) '(x l)]\n      [(= number 50) '(l)]\n      [(=\
    \ number 60) '(l x)]\n      [(= number 70) '(l x x)]\n      [(= number 80) '(l\
    \ x x x)]\n      [(= number 90) '(x c)]\n      [(= number 100) '(c)]\n      [(=\
    \ number 200) '(c c)]\n      [(= number 300) '(c c c)]\n      [(= number 400)\
    \ '(c d)]\n      [(= number 500) '(d)]\n      [(= number 600) '(d c)]\n      [(=\
    \ number 700) '(d c c)]\n      [(= number 800) '(d c c c)]\n      [(= number 900)\
    \ '(c m)]\n      [(= number 1000) '(m)]\n      [else (append (int_to_mini_roman-aux\
    \ (quotient number 10))\n                    (int_to_mini_roman-aux (remainder\
    \ number 10)))]))\n  (string-join (int_to_mini_roman-aux number) \"\"))\n", " \
    \ (define (int_to_mini_roman-helper number)\n    (cond\n      [(= number 1000)\
    \ \"m\"]\n      [(= number 900) \"cm\"]\n      [(= number 500) \"d\"]\n      [(=\
    \ number 400) \"cd\"]\n      [(= number 100) \"c\"]\n      [(= number 90) \"xc\"\
    ]\n      [(= number 50) \"l\"]\n      [(= number 40) \"xl\"]\n      [(= number\
    \ 10) \"x\"]\n      [(= number 9) \"ix\"]\n      [(= number 5) \"v\"]\n      [(=\
    \ number 4) \"iv\"]\n      [(= number 1) \"i\"]\n      [else (string-append (int_to_mini_roman-helper\
    \ (quotient number 10))\n                           (int_to_mini_roman-helper\
    \ (remainder number 10)))]))\n  (string-downcase (int_to_mini_roman-helper number)))\n",
  "  (cond\n    [(= number 1000) \"m\"]\n    [(= number 900) \"cm\"]\n    [(= number\
    \ 500) \"d\"]\n    [(= number 400) \"cd\"]\n    [(= number 100) \"c\"]\n    [(=\
    \ number 90) \"xc\"]\n    [(= number 50) \"l\"]\n    [(= number 40) \"xl\"]\n\
    \    [(= number 10) \"x\"]\n    [(= number 9) \"ix\"]\n    [(= number 5) \"v\"\
    ]\n    [(= number 4) \"iv\"]\n    [(= number 1) \"i\"]\n    [else (string-append\
    \ (int_to_mini_roman (quotient number 10))\n                         (int_to_mini_roman\
    \ (remainder number 10)))]))\n", "  (define (int_to_mini_roman-helper number)\n\
    \    (cond\n      [(= number 0) '()]\n      [(= number 1) '(i)]\n      [(= number\
    \ 2) '(i i)]\n      [(= number 3) '(i i i)]\n      [(= number 4) '(i v)]\n   \
    \   [(= number 5) '(v)]\n      [(= number 6) '(v i)]\n      [(= number 7) '(v\
    \ i i)]\n      [(= number 8) '(v i i i)]\n      [(= number 9) '(i x)]\n      [(=\
    \ number 10) '(x)]\n      [(= number 11) '(x i)]\n      [(= number 12) '(x i i)]\n\
    \      [(= number 13) '(x i i i)]\n      [(= number 14) '(x i v)]\n      [(= number\
    \ 15) '(x v)]\n      [(= number 16) '(x v i)]\n      [(= number 17) '(x v i i)]\n\
    \      [(= number 18) '(x v i i i)]\n      [(= number 19) '(x i x)]\n      [(=\
    \ number 20) '(x x)]\n      [(= number 30) '(x x x)]\n      [(= number 40) '(x\
    \ x x x)]\n      [(= number 50) '(l)]\n      [(= number 60) '(l x)]\n      [(=\
    \ number 70) '(l x x)]\n      [(= number 80) '(l x x x)]\n      [(= number 90)\
    \ '(x c)]\n      [(= number 100) '(c)]\n      [(= number 200) '(c c)]\n      [(=\
    \ number 300) '(c c c)]\n      [(= number 400) '(c c c c)]\n      [(= number 500)\
    \ '(d)]\n      [(= number 600) '(d c)]\n      [(= number 700) '(d c c)]\n    \
    \  [(= number 800) '(d c c c)]\n      [(= number 900) '(c m)]\n      [(= number\
    \ 1000) '(m)]\n      [else (append (int_to_mini_roman-helper (/ number 10))\n\
    \                    (int_to_mini_roman-helper (remainder number 10)))]))\n  (list->string\
    \ (int_to_", "  (define (int_to_mini_roman-helper number)\n    (cond ((= number\
    \ 1000) 'm)\n          ((= number 900) 'cm)\n          ((= number 500) 'd)\n \
    \         ((= number 400) 'cd)\n          ((= number 100) 'c)\n          ((= number\
    \ 90) 'xc)\n          ((= number 50) 'l)\n          ((= number 40) 'xl)\n    \
    \      ((= number 10) 'x)\n          ((= number 9) 'ix)\n          ((= number\
    \ 5) 'v)\n          ((= number 4) 'iv)\n          ((= number 1) 'i)))\n  (cond\
    \ ((= number 0) \"\")\n        ((= number 1) \"i\")\n        ((= number 2) \"\
    ii\")\n        ((= number 3) \"iii\")\n        ((= number 4) \"iv\")\n       \
    \ ((= number 5) \"v\")\n        ((= number 6) \"vi\")\n        ((= number 7) \"\
    vii\")\n        ((= number 8) \"viii\")\n        ((= number 9) \"ix\")\n     \
    \   ((= number 10) \"x\")\n        ((= number 11) \"xi\")\n        ((= number\
    \ 12) \"xii\")\n        ((= number 13) \"xiii\")\n        ((= number 14) \"xiv\"\
    )\n        ((= number 15) \"xv\")\n        ((= number 16) \"xvi\")\n        ((=\
    \ number 17) \"xvii\")\n        ((= number 18) \"xviii\")\n        ((= number\
    \ 19) \"xix\")\n        ((= number 20) \"xx\")\n        ((= number 30) \"xxx\"\
    )\n        ((= number 40) \"xl\")\n        ((= number 50) \"l\")\n        ((=\
    \ number 60) \"lx\")\n        ((= number 70) \"lxx\")\n        ((= number 80)\
    \ \"lxxx\")\n        ((= number 90) \"xc\")\n        ((= number 100) \"c\")\n\
    \        ((= number 200) \"cc\")\n        ((= number 300) \"ccc\")\n        ((=\
    \ number 400) \"cd\")\n        ((= number 500) \"d\")\n        ((= number 600)\
    \ \"dc\")\n        ((=", "  (define (int_to_mini_roman_helper number roman-string)\n\
    \    (cond ((= number 0) roman-string)\n          ((> number 1000) (int_to_mini_roman_helper\
    \ (- number 1000) (string-append roman-string \"m\")))\n          ((> number 900)\
    \ (int_to_mini_roman_helper (- number 900) (string-append roman-string \"cm\"\
    )))\n          ((> number 500) (int_to_mini_roman_helper (- number 500) (string-append\
    \ roman-string \"d\")))\n          ((> number 400) (int_to_mini_roman_helper (-\
    \ number 400) (string-append roman-string \"cd\")))\n          ((> number 100)\
    \ (int_to_mini_roman_helper (- number 100) (string-append roman-string \"c\")))\n\
    \          ((> number 90) (int_to_mini_roman_helper (- number 90) (string-append\
    \ roman-string \"xc\")))\n          ((> number 50) (int_to_mini_roman_helper (-\
    \ number 50) (string-append roman-string \"l\")))\n          ((> number 40) (int_to_mini_roman_helper\
    \ (- number 40) (string-append roman-string \"xl\")))\n          ((> number 10)\
    \ (int_to_mini_roman_helper (- number 10) (string-append roman-string \"x\")))\n\
    \          ((> number 9) (int_to_mini_roman_helper (- number 9) (string-append\
    \ roman-string \"ix\")))\n          ((> number 5) (int_to_mini_roman_helper (-\
    \ number 5) (string-append roman-string \"v\")))\n          ((> number 4) (int_to_mini_roman_helper\
    \ (- number 4) (string-append roman-string \"iv\")))\n          ((> number 1)\
    \ (int_to_mini_roman_helper (- number 1) (string-append roman-string \"i\")))\n\
    \          (else (error \"Invalid number\"))))\n  (string-downcase (int_to_mini_roman_helper\
    \ number \"\")))\n\n", "  (define (int_to_mini_roman-helper number)\n    (cond\n\
    \      [(= number 1000) 'm]\n      [(= number 900) 'cm]\n      [(= number 500)\
    \ 'd]\n      [(= number 400) 'cd]\n      [(= number 100) 'c]\n      [(= number\
    \ 90) 'xc]\n      [(= number 50) 'l]\n      [(= number 40) 'xl]\n      [(= number\
    \ 10) 'x]\n      [(= number 9) 'ix]\n      [(= number 5) 'v]\n      [(= number\
    \ 4) 'iv]\n      [(= number 1) 'i]\n      [else (append (int_to_mini_roman-helper\
    \ (quotient number 10)) (int_to_mini_roman-helper (remainder number 10)))]))\n\
    \  (string-downcase (list->string (int_to_mini_roman-helper number))))\n", " \
    \ (define (int_to_mini_roman-helper number)\n    (cond ((= number 1000) \"m\"\
    )\n          ((= number 900) \"cm\")\n          ((= number 500) \"d\")\n     \
    \     ((= number 400) \"cd\")\n          ((= number 100) \"c\")\n          ((=\
    \ number 90) \"xc\")\n          ((= number 50) \"l\")\n          ((= number 40)\
    \ \"xl\")\n          ((= number 10) \"x\")\n          ((= number 9) \"ix\")\n\
    \          ((= number 5) \"v\")\n          ((= number 4) \"iv\")\n          ((=\
    \ number 1) \"i\")))\n  (cond ((= number 0) \"\")\n        ((< number 0) \"\"\
    )\n        ((< number 10) (int_to_mini_roman-helper number))\n        ((< number\
    \ 100) (string-append (int_to_mini_roman-helper (/ number 10))\n             \
    \                          (int_to_mini_roman-helper (modulo number 10))))\n \
    \       ((< number 1000) (string-append (int_to_mini_roman-helper (/ number 100))\n\
    \                                        (int_to_mini_roman-helper (modulo number\
    \ 100))))\n        ((< number 10000) (string-append (int_to_mini_roman-helper\
    \ (/ number 1000))\n                                         (int_to_mini_roman-helper\
    \ (modulo number 1000))))\n        (else \"\")))\n", "  (define (int_to_mini_roman-helper\
    \ number)\n    (cond ((= number 0) '())\n          ((= number 1) '(i))\n     \
    \     ((= number 2) '(i i))\n          ((= number 3) '(i i i))\n          ((=\
    \ number 4) '(i v))\n          ((= number 5) '(v))\n          ((= number 6) '(v\
    \ i))\n          ((= number 7) '(v i i))\n          ((= number 8) '(v i i i))\n\
    \          ((= number 9) '(i x))\n          ((= number 10) '(x))\n          ((=\
    \ number 20) '(x x))\n          ((= number 30) '(x x x))\n          ((= number\
    \ 40) '(x l))\n          ((= number 50) '(l))\n          ((= number 60) '(l x))\n\
    \          ((= number 70) '(l x x))\n          ((= number 80) '(l x x x))\n  \
    \        ((= number 90) '(x c))\n          ((= number 100) '(c))\n          ((=\
    \ number 200) '(c c))\n          ((= number 300) '(c c c))\n          ((= number\
    \ 400) '(c d))\n          ((= number 500) '(d))\n          ((= number 600) '(d\
    \ c))\n          ((= number 700) '(d c c))\n          ((= number 800) '(d c c\
    \ c))\n          ((= number 900) '(c m))\n          ((= number 1000) '(m))\n \
    \         (else (append (int_to_mini_roman-helper (modulo number 10))\n      \
    \                  (int_to_mini_roman-helper (quotient number 10))))))\n  (string-join\
    \ (int_to_mini-roman-helper number) \"\"))\n", "  (define (int_to_mini_roman_helper\
    \ number)\n    (cond\n      [(= number 0) '()]\n      [(= number 1) '(i)]\n  \
    \    [(= number 2) '(i i)]\n      [(= number 3) '(i i i)]\n      [(= number 4)\
    \ '(i v)]\n      [(= number 5) '(v)]\n      [(= number 6) '(v i)]\n      [(= number\
    \ 7) '(v i i)]\n      [(= number 8) '(v i i i)]\n      [(= number 9) '(i x)]\n\
    \      [(= number 10) '(x)]\n      [(= number 20) '(x x)]\n      [(= number 30)\
    \ '(x x x)]\n      [(= number 40) '(x l)]\n      [(= number 50) '(l)]\n      [(=\
    \ number 60) '(l x)]\n      [(= number 70) '(l x x)]\n      [(= number 80) '(l\
    \ x x x)]\n      [(= number 90) '(x c)]\n      [(= number 100) '(c)]\n      [(=\
    \ number 200) '(c c)]\n      [(= number 300) '(c c c)]\n      [(= number 400)\
    \ '(c d)]\n      [(= number 500) '(d)]\n      [(= number 600) '(d c)]\n      [(=\
    \ number 700) '(d c c)]\n      [(= number 800) '(d c c c)]\n      [(= number 900)\
    \ '(c m)]\n      [(= number 1000) '(m)]\n      [else (append (int_to_mini_roman_helper\
    \ (quotient number 10))\n                    (int_to_mini_roman_helper (remainder\
    \ number 10)))]))\n  (string-join (int_to_mini_roman_helper number) \"\"))\n",
  "  (define (int_to_mini_roman_helper number)\n    (cond\n      [(= number 0) '()]\n\
    \      [(= number 1) '(i)]\n      [(= number 2) '(i i)]\n      [(= number 3) '(i\
    \ i i)]\n      [(= number 4) '(i v)]\n      [(= number 5) '(v)]\n      [(= number\
    \ 6) '(v i)]\n      [(= number 7) '(v i i)]\n      [(= number 8) '(v i i i)]\n\
    \      [(= number 9) '(i x)]\n      [(= number 10) '(x)]\n      [(= number 20)\
    \ '(x x)]\n      [(= number 30) '(x x x)]\n      [(= number 40) '(x l)]\n    \
    \  [(= number 50) '(l)]\n      [(= number 60) '(l x)]\n      [(= number 70) '(l\
    \ x x)]\n      [(= number 80) '(l x x x)]\n      [(= number 90) '(x c)]\n    \
    \  [(= number 100) '(c)]\n      [(= number 200) '(c c)]\n      [(= number 300)\
    \ '(c c c)]\n      [(= number 400) '(c d)]\n      [(= number 500) '(d)]\n    \
    \  [(= number 600) '(d c)]\n      [(= number 700) '(d c c)]\n      [(= number\
    \ 800) '(d c c c)]\n      [(= number 900) '(c m)]\n      [(= number 1000) '(m)]\n\
    \      [else (append (int_to_mini_roman_helper (quotient number 10))\n       \
    \             (int_to_mini_roman_helper (remainder number 10)))]))\n  (string-join\
    \ (int_to_mini_roman_helper number) \"\"))\n", "  (define (int_to_mini_roman-helper\
    \ number)\n    (cond ((= number 1000) \"m\")\n          ((= number 900) \"cm\"\
    )\n          ((= number 500) \"d\")\n          ((= number 400) \"cd\")\n     \
    \     ((= number 100) \"c\")\n          ((= number 90) \"xc\")\n          ((=\
    \ number 50) \"l\")\n          ((= number 40) \"xl\")\n          ((= number 10)\
    \ \"x\")\n          ((= number 9) \"ix\")\n          ((= number 5) \"v\")\n  \
    \        ((= number 4) \"iv\")\n          ((= number 1) \"i\")))\n  (cond ((=\
    \ number 0) \"\")\n        ((< number 10) (int_to_mini_roman-helper number))\n\
    \        (else (string-append (int_to_mini_roman-helper (/ number 10))\n     \
    \                        (int_to_mini_roman-helper (modulo number 10))))))\n",
  "  (define (int_to_mini_roman_helper number)\n    (cond ((= number 1000) \"m\")\n\
    \          ((>= number 900) (string-append \"cm\" (int_to_mini_roman_helper (-\
    \ number 900))))\n          ((>= number 500) (string-append \"d\" (int_to_mini_roman_helper\
    \ (- number 500))))\n          ((>= number 400) (string-append \"cd\" (int_to_mini_roman_helper\
    \ (- number 400))))\n          ((>= number 100) (string-append \"c\" (int_to_mini_roman_helper\
    \ (- number 100))))\n          ((>= number 90) (string-append \"xc\" (int_to_mini_roman_helper\
    \ (- number 90))))\n          ((>= number 50) (string-append \"l\" (int_to_mini_roman_helper\
    \ (- number 50))))\n          ((>= number 40) (string-append \"xl\" (int_to_mini_roman_helper\
    \ (- number 40))))\n          ((>= number 10) (string-append \"x\" (int_to_mini_roman_helper\
    \ (- number 10))))\n          ((>= number 9) (string-append \"ix\" (int_to_mini_roman_helper\
    \ (- number 9))))\n          ((>= number 5) (string-append \"v\" (int_to_mini_roman_helper\
    \ (- number 5))))\n          ((>= number 4) (string-append \"iv\" (int_to_mini_roman_helper\
    \ (- number 4))))\n          ((>= number 1) (string-append \"i\" (int_to_mini_roman_helper\
    \ (- number 1))))\n          (else \"\")))\n  (string-downcase (int_to_mini_roman_helper\
    \ number)))\n", "  (define (int_to_mini_roman_helper number result)\n    (cond\n\
    \      [(= number 0) result]\n      [(= number 1) (string-append result \"i\"\
    )]\n      [(= number 2) (string-append result \"ii\")]\n      [(= number 3) (string-append\
    \ result \"iii\")]\n      [(= number 4) (string-append result \"iv\")]\n     \
    \ [(= number 5) (string-append result \"v\")]\n      [(= number 6) (string-append\
    \ result \"vi\")]\n      [(= number 7) (string-append result \"vii\")]\n     \
    \ [(= number 8) (string-append result \"viii\")]\n      [(= number 9) (string-append\
    \ result \"ix\")]\n      [(= number 10) (string-append result \"x\")]\n      [(=\
    \ number 11) (string-append result \"xi\")]\n      [(= number 12) (string-append\
    \ result \"xii\")]\n      [(= number 13) (string-append result \"xiii\")]\n  \
    \    [(= number 14) (string-append result \"xiv\")]\n      [(= number 15) (string-append\
    \ result \"xv\")]\n      [(= number 16) (string-append result \"xvi\")]\n    \
    \  [(= number 17) (string-append result \"xvii\")]\n      [(= number 18) (string-append\
    \ result \"xviii\")]\n      [(= number 19) (string-append result \"xix\")]\n \
    \     [(= number 20) (string-append result \"xx\")]\n      [(= number 30) (string-append\
    \ result \"xxx\")]\n      [(= number 40) (string-append result \"xl\")]\n    \
    \  [(= number 50) (string-append result \"l\")]\n      [(= number 60) (string-append\
    \ result \"lx\")]\n      [(= number 70) (string-append result \"lxx\")]\n    \
    \  [(= number 80) (string-append result \"lxxx\")]\n      [(= number 90) (string-append\
    \ result \"xc\")]\n      [(= number 100) (string-append result \"c\")]\n     \
    \ [(= number 200) (string-append result \"cc\")]\n", "  (define (int_to_mini_roman_helper\
    \ number)\n    (cond\n      [(= number 1000) \"m\"]\n      [(= number 900) \"\
    cm\"]\n      [(= number 500) \"d\"]\n      [(= number 400) \"cd\"]\n      [(=\
    \ number 100) \"c\"]\n      [(= number 90) \"xc\"]\n      [(= number 50) \"l\"\
    ]\n      [(= number 40) \"xl\"]\n      [(= number 10) \"x\"]\n      [(= number\
    \ 9) \"ix\"]\n      [(= number 5) \"v\"]\n      [(= number 4) \"iv\"]\n      [(=\
    \ number 1) \"i\"]\n      [else (string-append (int_to_mini_roman_helper (quotient\
    \ number 10))\n                           (int_to_mini_roman_helper (remainder\
    \ number 10)))]))\n  (string-downcase (int_to_mini_roman_helper number)))\n",
  "  (define (int_to_mini_roman_helper number)\n    (cond\n      [(= number 1000)\
    \ 'm]\n      [(= number 900) 'cm]\n      [(= number 500) 'd]\n      [(= number\
    \ 400) 'cd]\n      [(= number 100) 'c]\n      [(= number 90) 'xc]\n      [(= number\
    \ 50) 'l]\n      [(= number 40) 'xl]\n      [(= number 10) 'x]\n      [(= number\
    \ 9) 'ix]\n      [(= number 5) 'v]\n      [(= number 4) 'iv]\n      [(= number\
    \ 1) 'i]\n      [else (append (int_to_mini_roman_helper (quotient number 10))\n\
    \                    (int_to_mini_roman_helper (remainder number 10)))]))\n  (string-downcase\
    \ (list->string (int_to_mini_roman_helper number))))\n", "  (define (int_to_mini_roman_helper\
    \ number)\n    (cond\n      [(= number 1000) \"m\"]\n      [(= number 900) \"\
    cm\"]\n      [(= number 500) \"d\"]\n      [(= number 400) \"cd\"]\n      [(=\
    \ number 100) \"c\"]\n      [(= number 90) \"xc\"]\n      [(= number 50) \"l\"\
    ]\n      [(= number 40) \"xl\"]\n      [(= number 10) \"x\"]\n      [(= number\
    \ 9) \"ix\"]\n      [(= number 5) \"v\"]\n      [(= number 4) \"iv\"]\n      [(=\
    \ number 1) \"i\"]\n      [else (string-append (int_to_mini_roman_helper (quotient\
    \ number 10))\n                           (int_to_mini_roman_helper (remainder\
    \ number 10)))]))\n  (string-downcase (int_to_mini_roman_helper number)))\n",
  "  (define (int_to_mini_roman_helper number)\n    (cond\n      [(= number 1000)\
    \ \"m\"]\n      [(= number 900) \"cm\"]\n      [(= number 500) \"d\"]\n      [(=\
    \ number 400) \"cd\"]\n      [(= number 100) \"c\"]\n      [(= number 90) \"xc\"\
    ]\n      [(= number 50) \"l\"]\n      [(= number 40) \"xl\"]\n      [(= number\
    \ 10) \"x\"]\n      [(= number 9) \"ix\"]\n      [(= number 5) \"v\"]\n      [(=\
    \ number 4) \"iv\"]\n      [(= number 1) \"i\"]\n      [(= number 0) \"\"]\n \
    \     [else (string-append (int_to_mini_roman_helper (quotient number 10))\n \
    \                          (int_to_mini_roman_helper (remainder number 10)))]))\n\
    \  (string-downcase (int_to_mini_roman_helper number)))\n", "  (define (int_to_mini_roman-helper\
    \ number)\n    (cond\n      [(= number 1000) \"m\"]\n      [(= number 900) \"\
    cm\"]\n      [(= number 500) \"d\"]\n      [(= number 400) \"cd\"]\n      [(=\
    \ number 100) \"c\"]\n      [(= number 90) \"xc\"]\n      [(= number 50) \"l\"\
    ]\n      [(= number 40) \"xl\"]\n      [(= number 10) \"x\"]\n      [(= number\
    \ 9) \"ix\"]\n      [(= number 5) \"v\"]\n      [(= number 4) \"iv\"]\n      [(=\
    \ number 1) \"i\"]\n      [else (string-append (int_to_mini_roman-helper (quotient\
    \ number 10))\n                           (int_to_mini_roman-helper (remainder\
    \ number 10)))]))\n  (string-downcase (int_to_mini_roman-helper number)))\n",
  "  (define (int_to_mini_roman-helper number)\n    (cond\n      [(= number 0) '()]\n\
    \      [(= number 1) '(i)]\n      [(= number 2) '(i i)]\n      [(= number 3) '(i\
    \ i i)]\n      [(= number 4) '(i v)]\n      [(= number 5) '(v)]\n      [(= number\
    \ 6) '(v i)]\n      [(= number 7) '(v i i)]\n      [(= number 8) '(v i i i)]\n\
    \      [(= number 9) '(i x)]\n      [(= number 10) '(x)]\n      [(= number 20)\
    \ '(x x)]\n      [(= number 30) '(x x x)]\n      [(= number 40) '(x l)]\n    \
    \  [(= number 50) '(l)]\n      [(= number 60) '(l x)]\n      [(= number 70) '(l\
    \ x x)]\n      [(= number 80) '(l x x x)]\n      [(= number 90) '(x c)]\n    \
    \  [(= number 100) '(c)]\n      [(= number 200) '(c c)]\n      [(= number 300)\
    \ '(c c c)]\n      [(= number 400) '(c d)]\n      [(= number 500) '(d)]\n    \
    \  [(= number 600) '(d c)]\n      [(= number 700) '(d c c)]\n      [(= number\
    \ 800) '(d c c c)]\n      [(= number 900) '(c m)]\n      [(= number 1000) '(m)]\n\
    \      [else (append (int_to_mini_roman-helper (/ number 10))\n              \
    \      (int_to_mini_roman-helper (modulo number 10)))]))\n  (string-join (int_to_mini_roman-helper\
    \ number) \"\"))\n", "  (define (int_to_mini_roman-helper number)\n    (cond\n\
    \      [(= number 1000) 'm]\n      [(= number 900) 'cm]\n      [(= number 500)\
    \ 'd]\n      [(= number 400) 'cd]\n      [(= number 100) 'c]\n      [(= number\
    \ 90) 'xc]\n      [(= number 50) 'l]\n      [(= number 40) 'xl]\n      [(= number\
    \ 10) 'x]\n      [(= number 9) 'ix]\n      [(= number 5) 'v]\n      [(= number\
    \ 4) 'iv]\n      [(= number 1) 'i]\n      [else (append (int_to_mini_roman-helper\
    \ (quotient number 10))\n                    (int_to_mini_roman-helper (remainder\
    \ number 10)))]))\n  (string-downcase (list->string (int_to_mini_roman-helper\
    \ number))))\n", "  (define (int_to_mini_roman_helper number)\n    (cond\n   \
    \   [(= number 0) '()]\n      [(= number 1) '(i)]\n      [(= number 2) '(i i)]\n\
    \      [(= number 3) '(i i i)]\n      [(= number 4) '(i v)]\n      [(= number\
    \ 5) '(v)]\n      [(= number 6) '(v i)]\n      [(= number 7) '(v i i)]\n     \
    \ [(= number 8) '(v i i i)]\n      [(= number 9) '(i x)]\n      [(= number 10)\
    \ '(x)]\n      [(= number 20) '(x x)]\n      [(= number 30) '(x x x)]\n      [(=\
    \ number 40) '(x l)]\n      [(= number 50) '(l)]\n      [(= number 60) '(l x)]\n\
    \      [(= number 70) '(l x x)]\n      [(= number 80) '(l x x x)]\n      [(= number\
    \ 90) '(x c)]\n      [(= number 100) '(c)]\n      [(= number 200) '(c c)]\n  \
    \    [(= number 300) '(c c c)]\n      [(= number 400) '(c d)]\n      [(= number\
    \ 500) '(d)]\n      [(= number 600) '(d c)]\n      [(= number 700) '(d c c)]\n\
    \      [(= number 800) '(d c c c)]\n      [(= number 900) '(c m)]\n      [(= number\
    \ 1000) '(m)]\n      [else (append (int_to_mini_roman_helper (/ number 10))\n\
    \                    (int_to_mini_roman_helper (modulo number 10)))]))\n  (string-join\
    \ (int_to_mini_roman_helper number) \"\"))\n", "  (define (int_to_mini_roman-helper\
    \ number)\n    (cond\n      [(= number 1000) \"m\"]\n      [(= number 900) \"\
    cm\"]\n      [(= number 500) \"d\"]\n      [(= number 400) \"cd\"]\n      [(=\
    \ number 100) \"c\"]\n      [(= number 90) \"xc\"]\n      [(= number 50) \"l\"\
    ]\n      [(= number 40) \"xl\"]\n      [(= number 10) \"x\"]\n      [(= number\
    \ 9) \"ix\"]\n      [(= number 5) \"v\"]\n      [(= number 4) \"iv\"]\n      [(=\
    \ number 1) \"i\"]\n      [(= number 0) \"\"]\n      [else (string-append (int_to_mini_roman-helper\
    \ (- number (quotient number 10) * 10))\n                           (int_to_mini_roman-helper\
    \ (quotient number 10) * 10))]))\n  (string-downcase (int_to_mini_roman-helper\
    \ number)))\n", "  (define (int_to_mini_roman_helper number)\n    (cond\n    \
    \  [(= number 1000) 'm]\n      [(= number 900) 'cm]\n      [(= number 500) 'd]\n\
    \      [(= number 400) 'cd]\n      [(= number 100) 'c]\n      [(= number 90) 'xc]\n\
    \      [(= number 50) 'l]\n      [(= number 40) 'xl]\n      [(= number 10) 'x]\n\
    \      [(= number 9) 'ix]\n      [(= number 5) 'v]\n      [(= number 4) 'iv]\n\
    \      [(= number 1) 'i]\n      [else (append (int_to_mini_roman_helper (quotient\
    \ number 10))\n                    (int_to_mini_roman_helper (remainder number\
    \ 10)))]))\n  (string-downcase (list->string (int_to_mini_roman_helper number))))\n",
  "  (define (int_to_mini_roman_helper number)\n    (cond\n      [(= number 0) '()]\n\
    \      [(= number 1000) (cons 'm (int_to_mini_roman_helper (- number 1000)))]\n\
    \      [(= number 900) (cons 'c (cons 'm (int_to_mini_roman_helper (- number 900))))]\n\
    \      [(= number 500) (cons 'd (int_to_mini_roman_helper (- number 500)))]\n\
    \      [(= number 400) (cons 'c (cons 'd (int_to_mini_roman_helper (- number 400))))]\n\
    \      [(= number 100) (cons 'c (int_to_mini_roman_helper (- number 100)))]\n\
    \      [(= number 90) (cons 'x (cons 'c (int_to_mini_roman_helper (- number 90))))]\n\
    \      [(= number 50) (cons 'l (int_to_mini_roman_helper (- number 50)))]\n  \
    \    [(= number 40) (cons 'x (cons 'l (int_to_mini_roman_helper (- number 40))))]\n\
    \      [(= number 10) (cons 'x (int_to_mini_roman_helper (- number 10)))]\n  \
    \    [(= number 9) (cons 'i (cons 'x (int_to_mini_roman_helper (- number 9))))]\n\
    \      [(= number 5) (cons 'v (int_to_mini_roman_helper (- number 5)))]\n    \
    \  [(= number 4) (cons 'i (cons 'v (int_to_mini_roman_helper (- number 4))))]\n\
    \      [(= number 1) (cons 'i (int_to_mini_roman_helper (- number 1)))]))\n  (string-join\
    \ (int_to_mini_roman_helper number) \"\"))\n", "  (define (int_to_mini_roman_helper\
    \ number)\n    (cond\n      [(= number 1000) \"m\"]\n      [(= number 900) \"\
    cm\"]\n      [(= number 500) \"d\"]\n      [(= number 400) \"cd\"]\n      [(=\
    \ number 100) \"c\"]\n      [(= number 90) \"xc\"]\n      [(= number 50) \"l\"\
    ]\n      [(= number 40) \"xl\"]\n      [(= number 10) \"x\"]\n      [(= number\
    \ 9) \"ix\"]\n      [(= number 5) \"v\"]\n      [(= number 4) \"iv\"]\n      [(=\
    \ number 1) \"i\"]\n      [(= number 0) \"\"]\n      [else (string-append (int_to_mini_roman_helper\
    \ (quotient number 10))\n                           (int_to_mini_roman_helper\
    \ (remainder number 10)))]))\n  (string-downcase (int_to_mini_roman_helper number)))\n",
  "  (define (int_to_mini_roman_helper number)\n    (cond\n      [(= number 1000)\
    \ \"m\"]\n      [(= number 900) \"cm\"]\n      [(= number 500) \"d\"]\n      [(=\
    \ number 400) \"cd\"]\n      [(= number 100) \"c\"]\n      [(= number 90) \"xc\"\
    ]\n      [(= number 50) \"l\"]\n      [(= number 40) \"xl\"]\n      [(= number\
    \ 10) \"x\"]\n      [(= number 9) \"ix\"]\n      [(= number 5) \"v\"]\n      [(=\
    \ number 4) \"iv\"]\n      [(= number 1) \"i\"]\n      [else (string-append (int_to_mini_roman_helper\
    \ (quotient number 10))\n                           (int_to_mini_roman_helper\
    \ (remainder number 10)))]))\n  (string-downcase (int_to_mini_roman_helper number)))\n",
  "  (define (int_to_mini_roman_helper number)\n    (cond\n      [(= number 0) '()]\n\
    \      [(= number 1) '(i)]\n      [(= number 2) '(i i)]\n      [(= number 3) '(i\
    \ i i)]\n      [(= number 4) '(i v)]\n      [(= number 5) '(v)]\n      [(= number\
    \ 6) '(v i)]\n      [(= number 7) '(v i i)]\n      [(= number 8) '(v i i i)]\n\
    \      [(= number 9) '(i x)]\n      [(= number 10) '(x)]\n      [(= number 20)\
    \ '(x x)]\n      [(= number 30) '(x x x)]\n      [(= number 40) '(x l)]\n    \
    \  [(= number 50) '(l)]\n      [(= number 60) '(l x)]\n      [(= number 70) '(l\
    \ x x)]\n      [(= number 80) '(l x x x)]\n      [(= number 90) '(x c)]\n    \
    \  [(= number 100) '(c)]\n      [(= number 200) '(c c)]\n      [(= number 300)\
    \ '(c c c)]\n      [(= number 400) '(c d)]\n      [(= number 500) '(d)]\n    \
    \  [(= number 600) '(d c)]\n      [(= number 700) '(d c c)]\n      [(= number\
    \ 800) '(d c c c)]\n      [(= number 900) '(c m)]\n      [(= number 1000) '(m)]\n\
    \      [else (append (int_to_mini_roman_helper (/ number 10))\n              \
    \      (int_to_mini_roman_helper (modulo number 10)))]))\n  (string-join (int_to_mini_roman_helper\
    \ number) \"\"))\n", "  (define (int_to_mini_roman-helper number)\n    (cond\n\
    \      [(= number 1000) \"m\"]\n      [(= number 900) \"cm\"]\n      [(= number\
    \ 500) \"d\"]\n      [(= number 400) \"cd\"]\n      [(= number 100) \"c\"]\n \
    \     [(= number 90) \"xc\"]\n      [(= number 50) \"l\"]\n      [(= number 40)\
    \ \"xl\"]\n      [(= number 10) \"x\"]\n      [(= number 9) \"ix\"]\n      [(=\
    \ number 5) \"v\"]\n      [(= number 4) \"iv\"]\n      [(= number 1) \"i\"]\n\
    \      [else (string-append (int_to_mini_roman-helper (quotient number 10))\n\
    \                           (int_to_mini_roman-helper (remainder number 10)))]))\n\
    \  (string-downcase (int_to_mini_roman-helper number)))\n", "  (define (int_to_mini_roman_helper\
    \ number)\n    (cond\n      [(= number 1000) 'm]\n      [(= number 900) 'cm]\n\
    \      [(= number 500) 'd]\n      [(= number 400) 'cd]\n      [(= number 100)\
    \ 'c]\n      [(= number 90) 'xc]\n      [(= number 50) 'l]\n      [(= number 40)\
    \ 'xl]\n      [(= number 10) 'x]\n      [(= number 9) 'ix]\n      [(= number 5)\
    \ 'v]\n      [(= number 4) 'iv]\n      [(= number 1) 'i]\n      [else (append\
    \ (int_to_mini_roman_helper (quotient number 10))\n                    (int_to_mini_roman_helper\
    \ (remainder number 10)))]))\n  (string-join (int_to_mini_roman_helper number)\
    \ \"\"))\n", "  (define (int_to_mini_roman_helper number)\n    (cond\n      [(=\
    \ number 0) '()]\n      [(= number 1) '(i)]\n      [(= number 2) '(i i)]\n   \
    \   [(= number 3) '(i i i)]\n      [(= number 4) '(i v)]\n      [(= number 5)\
    \ '(v)]\n      [(= number 6) '(v i)]\n      [(= number 7) '(v i i)]\n      [(=\
    \ number 8) '(v i i i)]\n      [(= number 9) '(i x)]\n      [(= number 10) '(x)]\n\
    \      [(= number 11) '(x i)]\n      [(= number 12) '(x i i)]\n      [(= number\
    \ 13) '(x i i i)]\n      [(= number 14) '(x i v)]\n      [(= number 15) '(x v)]\n\
    \      [(= number 16) '(x v i)]\n      [(= number 17) '(x v i i)]\n      [(= number\
    \ 18) '(x v i i i)]\n      [(= number 19) '(x i x)]\n      [(= number 20) '(x\
    \ x)]\n      [(= number 30) '(x x x)]\n      [(= number 40) '(x x x x)]\n    \
    \  [(= number 50) '(l)]\n      [(= number 60) '(l x)]\n      [(= number 70) '(l\
    \ x x)]\n      [(= number 80) '(l x x x)]\n      [(= number 90) '(x c)]\n    \
    \  [(= number 100) '(c)]\n      [(= number 200) '(c c)]\n      [(= number 300)\
    \ '(c c c)]\n      [(= number 400) '(c c c c)]\n      [(= number 500) '(d)]\n\
    \      [(= number 600) '(d c)]\n      [(= number 700) '(d c c)]\n      [(= number\
    \ 800) '(d c c c)]\n      [(= number 900) '(c m)]\n      [(= number 1000) '(m)]\n\
    \      [else (append (int_to_mini_roman_helper (quotient number 10))\n       \
    \             (int_to_mini_roman_helper (remainder number 10)))]))\n  (string-join\
    \ (int", "  (define (int_to_mini_roman-helper number)\n    (cond\n      [(= number\
    \ 1000) 'm]\n      [(= number 900) 'cm]\n      [(= number 500) 'd]\n      [(=\
    \ number 400) 'cd]\n      [(= number 100) 'c]\n      [(= number 90) 'xc]\n   \
    \   [(= number 50) 'l]\n      [(= number 40) 'xl]\n      [(= number 10) 'x]\n\
    \      [(= number 9) 'ix]\n      [(= number 5) 'v]\n      [(= number 4) 'iv]\n\
    \      [(= number 1) 'i]\n      [else (append (int_to_mini_roman-helper (quotient\
    \ number 10))\n                    (int_to_mini_roman-helper (remainder number\
    \ 10)))]))\n  (symbol->string (int_to_mini_roman-helper number)))\n", "  (define\
    \ (int_to_mini_roman-helper number result)\n    (cond [(= number 0) result]\n\
    \          [(= number 1000) (string-append result \"m\")]\n          [(= number\
    \ 900) (string-append result \"cm\")]\n          [(= number 500) (string-append\
    \ result \"d\")]\n          [(= number 400) (string-append result \"cd\")]\n \
    \         [(= number 100) (string-append result \"c\")]\n          [(= number\
    \ 90) (string-append result \"xc\")]\n          [(= number 50) (string-append\
    \ result \"l\")]\n          [(= number 40) (string-append result \"xl\")]\n  \
    \        [(= number 10) (string-append result \"x\")]\n          [(= number 9)\
    \ (string-append result \"ix\")]\n          [(= number 5) (string-append result\
    \ \"v\")]\n          [(= number 4) (string-append result \"iv\")]\n          [(=\
    \ number 1) (string-append result \"i\")]\n          [else (int_to_mini_roman-helper\
    \ (- number (quotient number 10) * 10)\n                                     \
    \     (string-append result (int_to_mini_roman-helper (quotient number 10) \"\"\
    )))]))\n  (string-downcase (int_to_mini_roman-helper number \"\")))\n", "  (define\
    \ (int_to_mini_roman_helper number)\n    (cond\n      [(= number 1000) \"m\"]\n\
    \      [(= number 900) \"cm\"]\n      [(= number 500) \"d\"]\n      [(= number\
    \ 400) \"cd\"]\n      [(= number 100) \"c\"]\n      [(= number 90) \"xc\"]\n \
    \     [(= number 50) \"l\"]\n      [(= number 40) \"xl\"]\n      [(= number 10)\
    \ \"x\"]\n      [(= number 9) \"ix\"]\n      [(= number 5) \"v\"]\n      [(= number\
    \ 4) \"iv\"]\n      [(= number 1) \"i\"]\n      [else (string-append (int_to_mini_roman_helper\
    \ (quotient number 10))\n                           (int_to_mini_roman_helper\
    \ (remainder number 10)))]))\n  (string-downcase (int_to_mini_roman_helper number)))\n",
  "  (define (int_to_mini_roman_helper number)\n    (cond\n      [(= number 0) '()]\n\
    \      [(= number 1) '(i)]\n      [(= number 2) '(i i)]\n      [(= number 3) '(i\
    \ i i)]\n      [(= number 4) '(i v)]\n      [(= number 5) '(v)]\n      [(= number\
    \ 6) '(v i)]\n      [(= number 7) '(v i i)]\n      [(= number 8) '(v i i i)]\n\
    \      [(= number 9) '(i x)]\n      [(= number 10) '(x)]\n      [(= number 20)\
    \ '(x x)]\n      [(= number 30) '(x x x)]\n      [(= number 40) '(x l)]\n    \
    \  [(= number 50) '(l)]\n      [(= number 60) '(l x)]\n      [(= number 70) '(l\
    \ x x)]\n      [(= number 80) '(l x x x)]\n      [(= number 90) '(x c)]\n    \
    \  [(= number 100) '(c)]\n      [(= number 200) '(c c)]\n      [(= number 300)\
    \ '(c c c)]\n      [(= number 400) '(c d)]\n      [(= number 500) '(d)]\n    \
    \  [(= number 600) '(d c)]\n      [(= number 700) '(d c c)]\n      [(= number\
    \ 800) '(d c c c)]\n      [(= number 900) '(c m)]\n      [(= number 1000) '(m)]\n\
    \      [(= number 2000) '(m m)]\n      [(= number 3000) '(m m m)]\n      [else\
    \ (append (int_to_mini_roman_helper (quotient number 10))\n                  \
    \  (int_to_mini_roman_helper (remainder number 10)))]))\n  (string-join (int_to_mini_roman_helper\
    \ number) \"\"))\n", "  (define (int_to_mini_roman-helper number)\n    (cond\n\
    \      [(= number 1000) 'm]\n      [(= number 900) 'cm]\n      [(= number 500)\
    \ 'd]\n      [(= number 400) 'cd]\n      [(= number 100) 'c]\n      [(= number\
    \ 90) 'xc]\n      [(= number 50) 'l]\n      [(= number 40) 'xl]\n      [(= number\
    \ 10) 'x]\n      [(= number 9) 'ix]\n      [(= number 5) 'v]\n      [(= number\
    \ 4) 'iv]\n      [(= number 1) 'i]\n      [else (append (int_to_mini_roman-helper\
    \ (quotient number 10))\n                    (int_to_mini_roman-helper (remainder\
    \ number 10)))]))\n  (string-downcase (list->string (int_to_mini_roman-helper\
    \ number))))\n", "  (define (int_to_mini_roman_helper number)\n    (cond\n   \
    \   [(= number 0) '()]\n      [(= number 1) '(i)]\n      [(= number 2) '(i i)]\n\
    \      [(= number 3) '(i i i)]\n      [(= number 4) '(i v)]\n      [(= number\
    \ 5) '(v)]\n      [(= number 6) '(v i)]\n      [(= number 7) '(v i i)]\n     \
    \ [(= number 8) '(v i i i)]\n      [(= number 9) '(i x)]\n      [(= number 10)\
    \ '(x)]\n      [(= number 20) '(x x)]\n      [(= number 30) '(x x x)]\n      [(=\
    \ number 40) '(x l)]\n      [(= number 50) '(l)]\n      [(= number 60) '(l x)]\n\
    \      [(= number 70) '(l x x)]\n      [(= number 80) '(l x x x)]\n      [(= number\
    \ 90) '(x c)]\n      [(= number 100) '(c)]\n      [(= number 200) '(c c)]\n  \
    \    [(= number 300) '(c c c)]\n      [(= number 400) '(c d)]\n      [(= number\
    \ 500) '(d)]\n      [(= number 600) '(d c)]\n      [(= number 700) '(d c c)]\n\
    \      [(= number 800) '(d c c c)]\n      [(= number 900) '(c m)]\n      [(= number\
    \ 1000) '(m)]\n      [else (append (int_to_mini_roman_helper (/ number 10))\n\
    \                    (int_to_mini_roman_helper (modulo number 10)))]))\n  (string-join\
    \ (int_to_mini_roman_helper number) \"\"))\n", "  (define (int_to_mini_roman_helper\
    \ number)\n    (cond\n      [(= number 1000) 'm]\n      [(= number 900) 'cm]\n\
    \      [(= number 500) 'd]\n      [(= number 400) 'cd]\n      [(= number 100)\
    \ 'c]\n      [(= number 90) 'xc]\n      [(= number 50) 'l]\n      [(= number 40)\
    \ 'xl]\n      [(= number 10) 'x]\n      [(= number 9) 'ix]\n      [(= number 5)\
    \ 'v]\n      [(= number 4) 'iv]\n      [(= number 1) 'i]\n      [else (append\
    \ (int_to_mini_roman_helper (quotient number 10))\n                    (int_to_mini_roman_helper\
    \ (remainder number 10)))]))\n  (string-join (int_to_mini_roman_helper number)\
    \ \"\"))\n", "  (define (int_to_mini_roman_helper number)\n    (cond\n      [(=\
    \ number 0) '()]\n      [(= number 1) '(i)]\n      [(= number 2) '(i i)]\n   \
    \   [(= number 3) '(i i i)]\n      [(= number 4) '(i v)]\n      [(= number 5)\
    \ '(v)]\n      [(= number 6) '(v i)]\n      [(= number 7) '(v i i)]\n      [(=\
    \ number 8) '(v i i i)]\n      [(= number 9) '(i x)]\n      [(= number 10) '(x)]\n\
    \      [(= number 20) '(x x)]\n      [(= number 30) '(x x x)]\n      [(= number\
    \ 40) '(x l)]\n      [(= number 50) '(l)]\n      [(= number 60) '(l x)]\n    \
    \  [(= number 70) '(l x x)]\n      [(= number 80) '(l x x x)]\n      [(= number\
    \ 90) '(x c)]\n      [(= number 100) '(c)]\n      [(= number 200) '(c c)]\n  \
    \    [(= number 300) '(c c c)]\n      [(= number 400) '(c d)]\n      [(= number\
    \ 500) '(d)]\n      [(= number 600) '(d c)]\n      [(= number 700) '(d c c)]\n\
    \      [(= number 800) '(d c c c)]\n      [(= number 900) '(c m)]\n      [(= number\
    \ 1000) '(m)]\n      [else (append (int_to_mini_roman_helper (/ number 10))\n\
    \                    (int_to_mini_roman_helper (modulo number 10)))]))\n  (string-join\
    \ (int_to_mini_roman_helper number) \"\"))\n", "  (define (int_to_mini_roman_helper\
    \ number)\n    (cond\n      [(= number 1000) \"m\"]\n      [(= number 900) \"\
    cm\"]\n      [(= number 500) \"d\"]\n      [(= number 400) \"cd\"]\n      [(=\
    \ number 100) \"c\"]\n      [(= number 90) \"xc\"]\n      [(= number 50) \"l\"\
    ]\n      [(= number 40) \"xl\"]\n      [(= number 10) \"x\"]\n      [(= number\
    \ 9) \"ix\"]\n      [(= number 5) \"v\"]\n      [(= number 4) \"iv\"]\n      [(=\
    \ number 1) \"i\"]\n      [(= number 0) \"\"]\n      [else (string-append (int_to_mini_roman_helper\
    \ (- number (quotient number 10) * 10))\n                           (int_to_mini_roman_helper\
    \ (quotient number 10) * 10))]))\n  (string-downcase (int_to_mini_roman_helper\
    \ number)))\n", "  (define (int_to_mini_roman_helper number)\n    (cond\n    \
    \  [(= number 1000) 'm]\n      [(= number 900) 'cm]\n      [(= number 500) 'd]\n\
    \      [(= number 400) 'cd]\n      [(= number 100) 'c]\n      [(= number 90) 'xc]\n\
    \      [(= number 50) 'l]\n      [(= number 40) 'xl]\n      [(= number 10) 'x]\n\
    \      [(= number 9) 'ix]\n      [(= number 5) 'v]\n      [(= number 4) 'iv]\n\
    \      [(= number 1) 'i]\n      [else (cons (int_to_mini_roman_helper (quotient\
    \ number 10))\n                   (int_to_mini_roman_helper (remainder number\
    \ 10)))]))\n  (string-join (int_to_mini_roman_helper number) \"\"))\n", "  (define\
    \ (int_to_mini_roman-helper number)\n    (cond\n      [(= number 1000) \"m\"]\n\
    \      [(= number 900) \"cm\"]\n      [(= number 500) \"d\"]\n      [(= number\
    \ 400) \"cd\"]\n      [(= number 100) \"c\"]\n      [(= number 90) \"xc\"]\n \
    \     [(= number 50) \"l\"]\n      [(= number 40) \"xl\"]\n      [(= number 10)\
    \ \"x\"]\n      [(= number 9) \"ix\"]\n      [(= number 5) \"v\"]\n      [(= number\
    \ 4) \"iv\"]\n      [(= number 1) \"i\"]\n      [else (string-append (int_to_mini_roman-helper\
    \ (quotient number 10))\n                           (int_to_mini_roman-helper\
    \ (remainder number 10)))]))\n  (string-downcase (int_to_mini_roman-helper number)))\n",
  "  (define (int_to_mini_roman_helper number)\n    (cond\n      [(= number 0) '()]\n\
    \      [(= number 1) '(i)]\n      [(= number 2) '(i i)]\n      [(= number 3) '(i\
    \ i i)]\n      [(= number 4) '(i v)]\n      [(= number 5) '(v)]\n      [(= number\
    \ 6) '(v i)]\n      [(= number 7) '(v i i)]\n      [(= number 8) '(v i i i)]\n\
    \      [(= number 9) '(i x)]\n      [(= number 10) '(x)]\n      [(= number 20)\
    \ '(x x)]\n      [(= number 30) '(x x x)]\n      [(= number 40) '(x l)]\n    \
    \  [(= number 50) '(l)]\n      [(= number 60) '(l x)]\n      [(= number 70) '(l\
    \ x x)]\n      [(= number 80) '(l x x x)]\n      [(= number 90) '(x c)]\n    \
    \  [(= number 100) '(c)]\n      [(= number 200) '(c c)]\n      [(= number 300)\
    \ '(c c c)]\n      [(= number 400) '(c d)]\n      [(= number 500) '(d)]\n    \
    \  [(= number 600) '(d c)]\n      [(= number 700) '(d c c)]\n      [(= number\
    \ 800) '(d c c c)]\n      [(= number 900) '(c m)]\n      [(= number 1000) '(m)]\n\
    \      [else (append (int_to_mini_roman_helper (quotient number 10))\n       \
    \             (int_to_mini_roman_helper (remainder number 10)))]))\n  (string-join\
    \ (int_to_mini_roman_helper number) \"\"))\n", "  (define (int_to_mini_roman_helper\
    \ number)\n    (cond\n      [(= number 0) '()]\n      [(= number 1) '(i)]\n  \
    \    [(= number 2) '(i i)]\n      [(= number 3) '(i i i)]\n      [(= number 4)\
    \ '(i v)]\n      [(= number 5) '(v)]\n      [(= number 6) '(v i)]\n      [(= number\
    \ 7) '(v i i)]\n      [(= number 8) '(v i i i)]\n      [(= number 9) '(i x)]\n\
    \      [(= number 10) '(x)]\n      [(= number 20) '(x x)]\n      [(= number 30)\
    \ '(x x x)]\n      [(= number 40) '(x l)]\n      [(= number 50) '(l)]\n      [(=\
    \ number 60) '(l x)]\n      [(= number 70) '(l x x)]\n      [(= number 80) '(l\
    \ x x x)]\n      [(= number 90) '(x c)]\n      [(= number 100) '(c)]\n      [(=\
    \ number 200) '(c c)]\n      [(= number 300) '(c c c)]\n      [(= number 400)\
    \ '(c d)]\n      [(= number 500) '(d)]\n      [(= number 600) '(d c)]\n      [(=\
    \ number 700) '(d c c)]\n      [(= number 800) '(d c c c)]\n      [(= number 900)\
    \ '(c m)]\n      [(= number 1000) '(m)]\n      [else (append (int_to_mini_roman_helper\
    \ (modulo number 1000))\n                    (int_to_mini_roman_helper (/ number\
    \ 1000)))]))\n  (string-join (int_to_mini_roman_helper number) \"\"))\n"]
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
