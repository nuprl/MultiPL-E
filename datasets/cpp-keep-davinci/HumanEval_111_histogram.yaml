name: HumanEval_111_histogram
language: cpp
prompt: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing\
  \ a space separated lowercase letters, return a dictionary\n// of the letter with\
  \ the most repetition and containing the corresponding count.\n// If several letters\
  \ have the same occurrence, return all of them.\n// Example:\n// histogram('a b\
  \ c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a b b a') == {'a': 2, 'b': 2}\n\
  // histogram('a b c a b') == {'a': 2, 'b': 2}\n// histogram('b b b b a') == {'b':\
  \ 4}\n// histogram('') == {}\nstd::map<std::string, long> histogram(std::string\
  \ test) {\n"
tests: "}\nint main() {\n    auto candidate = histogram;\n    assert(candidate((\"\
  a b b a\")) == (std::map<std::string, long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"\
  a b c a b\")) == (std::map<std::string, long>({{\"a\", 2}, {\"b\", 2}})));\n   \
  \ assert(candidate((\"a b c d g\")) == (std::map<std::string, long>({{\"a\", 1},\
  \ {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\
  r t g\")) == (std::map<std::string, long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n\
  \    assert(candidate((\"b b b b a\")) == (std::map<std::string, long>({{\"b\",\
  \ 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string, long>({{\"\
  r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,\
  \ long>()));\n    assert(candidate((\"a\")) == (std::map<std::string, long>({{\"\
  a\", 1}})));\n}\n"
completions: ["\tstd::map<std::string, long> result;\n\tstd::stringstream ss(test);\n\
    \tstd::string word;\n\twhile (ss >> word) {\n\t\tresult[word]++;\n\t}\n\treturn\
    \ result;", "    std::map<std::string, long> result;\n    std::stringstream ss(test);\n\
    \    std::string item;\n    while (std::getline(ss, item, ' ')) {\n        result[item]++;\n\
    \    }\n    return result;", "  std::map<std::string, long> result;\n  std::stringstream\
    \ ss(test);\n  std::string word;\n  while (ss >> word) {\n    result[word]++;\n\
    \  }\n  return result;", "  std::map<std::string, long> result;\n  std::stringstream\
    \ ss(test);\n  std::string word;\n  while (ss >> word) {\n    result[word]++;\n\
    \  }\n  return result;", "    std::map<std::string, long> result;\n    std::stringstream\
    \ ss(test);\n    std::string word;\n    while (ss >> word) {\n        result[word]++;\n\
    \    }\n    return result;", "    std::map<std::string, long> result;\n    std::stringstream\
    \ ss(test);\n    std::string word;\n    while (ss >> word) {\n        result[word]++;\n\
    \    }\n    return result;", "    std::map<std::string, long> result;\n    std::stringstream\
    \ ss(test);\n    std::string word;\n    while (ss >> word) {\n        result[word]++;\n\
    \    }\n    return result;", "    std::map<std::string, long> result;\n    std::stringstream\
    \ ss(test);\n    std::string word;\n    while (ss >> word) {\n        result[word]++;\n\
    \    }\n    return result;", "    std::map<std::string, long> hist;\n    std::stringstream\
    \ ss(test);\n    std::string word;\n    while (ss >> word) {\n        hist[word]++;\n\
    \    }\n    return hist;", "    std::map<std::string, long> result;\n    std::stringstream\
    \ ss(test);\n    std::string item;\n    while (std::getline(ss, item, ' ')) {\n\
    \        if (result.find(item) == result.end()) {\n            result[item] =\
    \ 1;\n        } else {\n            result[item]++;\n        }\n    }\n    return\
    \ result;", "    std::map<std::string, long> result;\n    std::stringstream ss(test);\n\
    \    std::string word;\n    while (ss >> word) {\n        result[word]++;\n  \
    \  }\n    return result;", "    std::map<std::string, long> result;\n    std::stringstream\
    \ ss(test);\n    std::string word;\n    while (ss >> word) {\n        result[word]++;\n\
    \    }\n    return result;", "    std::map<std::string, long> result;\n    std::stringstream\
    \ ss(test);\n    std::string word;\n    while (ss >> word) {\n        result[word]++;\n\
    \    }\n    return result;", "    std::map<std::string, long> result;\n    std::stringstream\
    \ ss(test);\n    std::string word;\n    while (ss >> word) {\n        result[word]++;\n\
    \    }\n    return result;", "    std::map<std::string, long> result;\n    std::stringstream\
    \ ss(test);\n    std::string item;\n    while (std::getline(ss, item, ' ')) {\n\
    \        result[item]++;\n    }\n    return result;", "    std::map<std::string,\
    \ long> result;\n    std::stringstream ss(test);\n    std::string token;\n   \
    \ while(std::getline(ss, token, ' ')) {\n        result[token]++;\n    }\n   \
    \ return result;", "    std::map<std::string, long> result;\n    std::stringstream\
    \ ss(test);\n    std::string token;\n    while(std::getline(ss, token, ' ')) {\n\
    \        result[token]++;\n    }\n    return result;", "  std::map<std::string,\
    \ long> result;\n  std::stringstream ss(test);\n  std::string item;\n  while (std::getline(ss,\
    \ item, ' ')) {\n    if (result.find(item) == result.end()) {\n      result[item]\
    \ = 1;\n    } else {\n      result[item] += 1;\n    }\n  }\n  return result;",
  "    std::map<std::string, long> result;\n    std::stringstream ss(test);\n    std::string\
    \ temp;\n    while(ss >> temp) {\n        result[temp]++;\n    }\n    return result;",
  "    std::map<std::string, long> result;\n    std::stringstream ss(test);\n    std::string\
    \ word;\n    while (ss >> word) {\n        result[word]++;\n    }\n    return\
    \ result;", "    std::map<std::string, long> result;\n    std::stringstream ss(test);\n\
    \    std::string token;\n    while(std::getline(ss, token, ' ')) {\n        result[token]++;\n\
    \    }\n    return result;", "    std::map<std::string, long> result;\n    std::stringstream\
    \ ss(test);\n    std::string word;\n    while (ss >> word) {\n        result[word]++;\n\
    \    }\n    return result;", "    std::map<std::string, long> result;\n    std::stringstream\
    \ ss(test);\n    std::string item;\n    while (std::getline(ss, item, ' ')) {\n\
    \        result[item]++;\n    }\n    return result;", "    std::map<std::string,\
    \ long> result;\n    std::stringstream ss(test);\n    std::string word;\n    while\
    \ (ss >> word) {\n        result[word]++;\n    }\n    return result;", "    std::map<std::string,\
    \ long> result;\n    std::stringstream ss(test);\n    std::string word;\n    while\
    \ (ss >> word) {\n        result[word]++;\n    }\n    return result;", "    std::map<std::string,\
    \ long> result;\n    std::stringstream ss(test);\n    std::string item;\n    while\
    \ (std::getline(ss, item, ' ')) {\n        result[item]++;\n    }\n    return\
    \ result;", "    std::map<std::string, long> result;\n    std::stringstream ss(test);\n\
    \    std::string word;\n    while (ss >> word) {\n        result[word]++;\n  \
    \  }\n    return result;", "    std::map<std::string, long> result;\n    std::stringstream\
    \ ss(test);\n    std::string word;\n    while (ss >> word) {\n        if (result.find(word)\
    \ == result.end()) {\n            result[word] = 1;\n        } else {\n      \
    \      result[word] += 1;\n        }\n    }\n    return result;", "    std::map<std::string,\
    \ long> result;\n    std::stringstream ss(test);\n    std::string word;\n    while\
    \ (ss >> word) {\n        result[word]++;\n    }\n    return result;", "    std::map<std::string,\
    \ long> result;\n    std::stringstream ss(test);\n    std::string word;\n    while\
    \ (ss >> word) {\n        result[word]++;\n    }\n    return result;", "    std::map<std::string,\
    \ long> result;\n    std::stringstream ss(test);\n    std::string word;\n    while\
    \ (ss >> word) {\n        result[word]++;\n    }\n    return result;", "    std::map<std::string,\
    \ long> result;\n    std::stringstream ss(test);\n    std::string token;\n   \
    \ while(std::getline(ss, token, ' ')) {\n        result[token]++;\n    }\n   \
    \ return result;", "    std::map<std::string, long> result;\n    std::stringstream\
    \ ss(test);\n    std::string word;\n    while (ss >> word) {\n        result[word]++;\n\
    \    }\n    return result;", "    std::map<std::string, long> result;\n    std::stringstream\
    \ ss(test);\n    std::string item;\n    while (std::getline(ss, item, ' ')) {\n\
    \        if (result.find(item) == result.end()) {\n            result[item] =\
    \ 1;\n        } else {\n            result[item] += 1;\n        }\n    }\n   \
    \ return result;", "    std::map<std::string, long> result;\n    std::stringstream\
    \ ss(test);\n    std::string token;\n    while(std::getline(ss, token, ' ')) {\n\
    \        result[token]++;\n    }\n    return result;", "    std::map<std::string,\
    \ long> result;\n    std::stringstream ss(test);\n    std::string item;\n    while\
    \ (std::getline(ss, item, ' ')) {\n        if (result.find(item) == result.end())\
    \ {\n            result[item] = 1;\n        } else {\n            result[item]++;\n\
    \        }\n    }\n    return result;", "    std::map<std::string, long> result;\n\
    \    std::stringstream ss(test);\n    std::string item;\n    while (std::getline(ss,\
    \ item, ' ')) {\n        if (result.find(item) == result.end()) {\n          \
    \  result[item] = 1;\n        } else {\n            result[item]++;\n        }\n\
    \    }\n    return result;", "    std::map<std::string, long> dict;\n    std::stringstream\
    \ ss(test);\n    std::string item;\n    while (std::getline(ss, item, ' ')) {\n\
    \        if (dict.find(item) == dict.end()) {\n            dict[item] = 1;\n \
    \       } else {\n            dict[item] += 1;\n        }\n    }\n    return dict;",
  "  std::map<std::string, long> result;\n  std::stringstream ss(test);\n  std::string\
    \ word;\n  while (ss >> word) {\n    result[word]++;\n  }\n  return result;",
  "    std::map<std::string, long> result;\n    std::stringstream ss(test);\n    std::string\
    \ token;\n    while(std::getline(ss, token, ' ')) {\n        result[token]++;\n\
    \    }\n    return result;", "    std::map<std::string, long> result;\n    std::stringstream\
    \ ss(test);\n    std::string word;\n    while (ss >> word) {\n        result[word]++;\n\
    \    }\n    return result;", "    std::map<std::string, long> result;\n    if\
    \ (test.length() == 0) {\n        return result;\n    }\n    std::stringstream\
    \ ss(test);\n    std::string word;\n    while (ss >> word) {\n        result[word]++;\n\
    \    }\n    return result;", "    std::map<std::string, long> result;\n    std::stringstream\
    \ ss(test);\n    std::string word;\n    while (ss >> word) {\n        result[word]++;\n\
    \    }\n    return result;", "    std::map<std::string, long> result;\n    std::stringstream\
    \ ss(test);\n    std::string item;\n    while (std::getline(ss, item, ' ')) {\n\
    \        if (result.find(item) == result.end()) {\n            result[item] =\
    \ 1;\n        } else {\n            result[item]++;\n        }\n    }\n    return\
    \ result;", "    std::map<std::string, long> result;\n    std::stringstream ss(test);\n\
    \    std::string word;\n    while (ss >> word) {\n        result[word]++;\n  \
    \  }\n    return result;", "    std::map<std::string, long> result;\n    std::stringstream\
    \ ss(test);\n    std::string item;\n    while (std::getline(ss, item, ' ')) {\n\
    \        if (result.find(item) == result.end()) {\n            result[item] =\
    \ 1;\n        } else {\n            result[item] += 1;\n        }\n    }\n   \
    \ return result;", "    std::map<std::string, long> result;\n    std::stringstream\
    \ ss(test);\n    std::string word;\n    while (ss >> word) {\n        result[word]++;\n\
    \    }\n    return result;", "    std::map<std::string, long> result;\n    std::stringstream\
    \ ss(test);\n    std::string word;\n    while (ss >> word) {\n        result[word]++;\n\
    \    }\n    return result;", "    std::map<std::string, long> result;\n    std::stringstream\
    \ ss(test);\n    std::string item;\n    while (std::getline(ss, item, ' ')) {\n\
    \        if (result.find(item) == result.end()) {\n            result[item] =\
    \ 1;\n        } else {\n            result[item]++;\n        }\n    }\n    return\
    \ result;", "  std::map<std::string, long> result;\n  std::stringstream ss(test);\n\
    \  std::string word;\n  while (ss >> word) {\n    result[word]++;\n  }\n  return\
    \ result;", "    std::map<std::string, long> result;\n    std::stringstream ss(test);\n\
    \    std::string item;\n    while (std::getline(ss, item, ' ')) {\n        if\
    \ (result.find(item) == result.end()) {\n            result[item] = 1;\n     \
    \   } else {\n            result[item] += 1;\n        }\n    }\n    return result;",
  "    std::map<std::string, long> result;\n    std::stringstream ss(test);\n    std::string\
    \ token;\n    while(std::getline(ss, token, ' ')) {\n        result[token]++;\n\
    \    }\n    return result;", "    std::map<std::string, long> result;\n    std::stringstream\
    \ ss(test);\n    std::string token;\n    while(std::getline(ss, token, ' ')) {\n\
    \        result[token]++;\n    }\n    return result;", "    std::map<std::string,\
    \ long> result;\n    std::stringstream ss(test);\n    std::string word;\n    while\
    \ (ss >> word) {\n        result[word]++;\n    }\n    return result;", "    std::map<std::string,\
    \ long> result;\n    std::stringstream ss(test);\n    std::string word;\n    while\
    \ (ss >> word) {\n        result[word]++;\n    }\n    return result;", "    std::map<std::string,\
    \ long> hist;\n    std::stringstream ss(test);\n    std::string word;\n    while\
    \ (ss >> word) {\n        hist[word]++;\n    }\n    return hist;", "    std::map<std::string,\
    \ long> result;\n    std::stringstream ss(test);\n    std::string word;\n    while\
    \ (ss >> word) {\n        result[word]++;\n    }\n    return result;", "    std::map<std::string,\
    \ long> result;\n    std::stringstream ss(test);\n    std::string word;\n    while\
    \ (ss >> word) {\n        result[word]++;\n    }\n    return result;", "    std::map<std::string,\
    \ long> result;\n    std::stringstream ss(test);\n    std::string word;\n    while\
    \ (ss >> word) {\n        result[word]++;\n    }\n    return result;", "  std::map<std::string,\
    \ long> result;\n  std::stringstream ss(test);\n  std::string word;\n  while (ss\
    \ >> word) {\n    result[word]++;\n  }\n  return result;", "    std::map<std::string,\
    \ long> result;\n    std::stringstream ss(test);\n    std::string word;\n    while\
    \ (ss >> word) {\n        result[word]++;\n    }\n    return result;", "    std::map<std::string,\
    \ long> result;\n    std::stringstream ss(test);\n    std::string token;\n   \
    \ while(std::getline(ss, token, ' ')) {\n        result[token]++;\n    }\n   \
    \ return result;", "    std::map<std::string, long> hist;\n    std::stringstream\
    \ ss(test);\n    std::string word;\n    while (ss >> word) {\n        hist[word]++;\n\
    \    }\n    return hist;", "    std::map<std::string, long> result;\n    std::stringstream\
    \ ss(test);\n    std::string temp;\n    while(ss >> temp) {\n        result[temp]++;\n\
    \    }\n    return result;", "    std::map<std::string, long> result;\n    std::stringstream\
    \ ss(test);\n    std::string word;\n    while (ss >> word) {\n        result[word]++;\n\
    \    }\n    return result;", "    std::map<std::string, long> result;\n    std::stringstream\
    \ ss(test);\n    std::string word;\n    while (ss >> word) {\n        result[word]++;\n\
    \    }\n    return result;", "  std::map<std::string, long> result;\n  std::stringstream\
    \ ss(test);\n  std::string word;\n  while (ss >> word) {\n    result[word]++;\n\
    \  }\n  return result;", "    std::map<std::string, long> result;\n    std::stringstream\
    \ ss(test);\n    std::string word;\n    while (ss >> word) {\n        result[word]++;\n\
    \    }\n    return result;", "    std::map<std::string, long> result;\n    std::stringstream\
    \ ss(test);\n    std::string word;\n    while (ss >> word) {\n        result[word]++;\n\
    \    }\n    return result;", "    std::map<std::string, long> result;\n    std::stringstream\
    \ ss(test);\n    std::string word;\n    while (ss >> word) {\n        result[word]++;\n\
    \    }\n    return result;", "    std::map<std::string, long> result;\n    std::stringstream\
    \ ss(test);\n    std::string word;\n    while (ss >> word) {\n        result[word]++;\n\
    \    }\n    return result;", "    std::map<std::string, long> result;\n    std::stringstream\
    \ ss(test);\n    std::string word;\n    while (ss >> word) {\n        result[word]++;\n\
    \    }\n    return result;", "    std::map<std::string, long> result;\n    std::stringstream\
    \ ss(test);\n    std::string word;\n    while (ss >> word) {\n        result[word]++;\n\
    \    }\n    return result;", "    std::map<std::string, long> result;\n    std::stringstream\
    \ ss(test);\n    std::string word;\n    while (ss >> word) {\n        result[word]++;\n\
    \    }\n    return result;", "    std::map<std::string, long> result;\n    std::stringstream\
    \ ss(test);\n    std::string item;\n    while (std::getline(ss, item, ' ')) {\n\
    \        result[item]++;\n    }\n    return result;", "    std::map<std::string,\
    \ long> result;\n    std::stringstream ss(test);\n    std::string word;\n    while\
    \ (ss >> word) {\n        result[word]++;\n    }\n    return result;", "    std::map<std::string,\
    \ long> result;\n    std::stringstream ss(test);\n    std::string token;\n   \
    \ while(std::getline(ss, token, ' ')) {\n        result[token]++;\n    }\n   \
    \ return result;", "    std::map<std::string, long> hist;\n    std::stringstream\
    \ ss(test);\n    std::string word;\n    while (ss >> word) {\n        hist[word]++;\n\
    \    }\n    return hist;", "    std::map<std::string, long> result;\n    std::stringstream\
    \ ss(test);\n    std::string word;\n    while (ss >> word) {\n        result[word]++;\n\
    \    }\n    return result;", "    std::map<std::string, long> result;\n    std::stringstream\
    \ ss(test);\n    std::string word;\n    while (ss >> word) {\n        result[word]++;\n\
    \    }\n    return result;", "    std::map<std::string, long> result;\n    std::stringstream\
    \ ss(test);\n    std::string word;\n    while (ss >> word) {\n        result[word]++;\n\
    \    }\n    return result;", "    std::map<std::string, long> result;\n    std::stringstream\
    \ ss(test);\n    std::string item;\n    while (std::getline(ss, item, ' ')) {\n\
    \        if (result.find(item) == result.end()) {\n            result[item] =\
    \ 1;\n        } else {\n            result[item] += 1;\n        }\n    }\n   \
    \ return result;", "    std::map<std::string, long> result;\n    std::stringstream\
    \ ss(test);\n    std::string word;\n    while (ss >> word) {\n        result[word]++;\n\
    \    }\n    return result;", "    std::map<std::string, long> result;\n    std::stringstream\
    \ ss(test);\n    std::string word;\n    while (ss >> word) {\n        result[word]++;\n\
    \    }\n    return result;", "    std::map<std::string, long> result;\n    std::stringstream\
    \ ss(test);\n    std::string item;\n    while (std::getline(ss, item, ' ')) {\n\
    \        if (result.find(item) == result.end()) {\n            result[item] =\
    \ 1;\n        } else {\n            result[item]++;\n        }\n    }\n    return\
    \ result;", "    std::map<std::string, long> result;\n    std::stringstream ss(test);\n\
    \    std::string token;\n    while(std::getline(ss, token, ' ')) {\n        result[token]\
    \ += 1;\n    }\n    return result;", "    std::map<std::string, long> result;\n\
    \    std::stringstream ss(test);\n    std::string token;\n    while(std::getline(ss,\
    \ token, ' ')) {\n        if(result.find(token) == result.end()) {\n         \
    \   result[token] = 1;\n        } else {\n            result[token]++;\n     \
    \   }\n    }\n    return result;", "    std::map<std::string, long> result;\n\
    \    std::stringstream ss(test);\n    std::string word;\n    while (ss >> word)\
    \ {\n        result[word]++;\n    }\n    return result;", "    std::map<std::string,\
    \ long> hist;\n    std::stringstream ss(test);\n    std::string temp;\n    while(ss\
    \ >> temp) {\n        hist[temp]++;\n    }\n    return hist;", "    std::map<std::string,\
    \ long> result;\n    std::stringstream ss(test);\n    std::string token;\n   \
    \ while(std::getline(ss, token, ' ')) {\n        result[token]++;\n    }\n   \
    \ return result;", "    std::map<std::string, long> result;\n    std::stringstream\
    \ ss(test);\n    std::string item;\n    while (std::getline(ss, item, ' ')) {\n\
    \        result[item]++;\n    }\n    return result;", "    std::map<std::string,\
    \ long> result;\n    std::stringstream ss(test);\n    std::string word;\n    while\
    \ (ss >> word) {\n        result[word]++;\n    }\n    return result;", "    std::map<std::string,\
    \ long> result;\n    std::stringstream ss(test);\n    std::string word;\n    while\
    \ (ss >> word) {\n        result[word]++;\n    }\n    return result;", "    std::map<std::string,\
    \ long> result;\n    std::stringstream ss(test);\n    std::string word;\n    while\
    \ (ss >> word) {\n        result[word]++;\n    }\n    return result;", "    std::map<std::string,\
    \ long> result;\n    std::stringstream ss(test);\n    std::string temp;\n    while(ss\
    \ >> temp) {\n        result[temp]++;\n    }\n    return result;", "    std::map<std::string,\
    \ long> result;\n    std::stringstream ss(test);\n    std::string item;\n    while\
    \ (std::getline(ss, item, ' ')) {\n        if (result.find(item) == result.end())\
    \ {\n            result[item] = 1;\n        } else {\n            result[item]++;\n\
    \        }\n    }\n    return result;", "    std::map<std::string, long> result;\n\
    \    std::stringstream ss(test);\n    std::string word;\n    while (ss >> word)\
    \ {\n        result[word]++;\n    }\n    return result;", "  std::map<std::string,\
    \ long> result;\n  std::stringstream ss(test);\n  std::string word;\n  while (ss\
    \ >> word) {\n    result[word]++;\n  }\n  return result;", "    std::map<std::string,\
    \ long> result;\n    std::stringstream ss(test);\n    std::string item;\n    while\
    \ (std::getline(ss, item, ' ')) {\n        if (result.find(item) == result.end())\
    \ {\n            result[item] = 1;\n        } else {\n            result[item]++;\n\
    \        }\n    }\n    return result;", "    std::map<std::string, long> result;\n\
    \    std::stringstream ss(test);\n    std::string item;\n    while (std::getline(ss,\
    \ item, ' ')) {\n        if (result.find(item) == result.end()) {\n          \
    \  result[item] = 1;\n        } else {\n            result[item]++;\n        }\n\
    \    }\n    return result;", "    std::map<std::string, long> result;\n    std::stringstream\
    \ ss(test);\n    std::string token;\n    while(std::getline(ss, token, ' ')) {\n\
    \        result[token]++;\n    }\n    return result;", "    std::map<std::string,\
    \ long> result;\n    std::stringstream ss(test);\n    std::string word;\n    while\
    \ (ss >> word) {\n        result[word]++;\n    }\n    return result;", "    std::map<std::string,\
    \ long> result;\n    std::stringstream ss(test);\n    std::string word;\n    while\
    \ (ss >> word) {\n        result[word]++;\n    }\n    return result;", "    std::map<std::string,\
    \ long> result;\n    std::stringstream ss(test);\n    std::string item;\n    while\
    \ (std::getline(ss, item, ' ')) {\n        result[item]++;\n    }\n    return\
    \ result;", "    std::map<std::string, long> result;\n    std::stringstream ss(test);\n\
    \    std::string word;\n    while (ss >> word) {\n        result[word]++;\n  \
    \  }\n    return result;", "  std::map<std::string, long> result;\n  std::stringstream\
    \ ss(test);\n  std::string word;\n  while (ss >> word) {\n    result[word]++;\n\
    \  }\n  return result;", "    std::map<std::string, long> result;\n    std::stringstream\
    \ ss(test);\n    std::string word;\n    while (ss >> word) {\n        result[word]++;\n\
    \    }\n    return result;", "  std::map<std::string, long> result;\n  std::stringstream\
    \ ss(test);\n  std::string word;\n  while (ss >> word) {\n    result[word]++;\n\
    \  }\n  return result;", "  std::map<std::string, long> result;\n  std::stringstream\
    \ ss(test);\n  std::string token;\n  while(std::getline(ss, token, ' ')) {\n \
    \   result[token]++;\n  }\n  return result;", "    std::map<std::string, long>\
    \ result;\n    std::stringstream ss(test);\n    std::string word;\n    while (ss\
    \ >> word) {\n        result[word]++;\n    }\n    return result;", "    std::map<std::string,\
    \ long> result;\n    std::stringstream ss(test);\n    std::string token;\n   \
    \ while(std::getline(ss, token, ' ')) {\n        result[token]++;\n    }\n   \
    \ return result;", "  std::map<std::string, long> result;\n  std::stringstream\
    \ ss(test);\n  std::string token;\n  while(std::getline(ss, token, ' ')) {\n \
    \   if(result.find(token) == result.end()) {\n      result[token] = 1;\n    }\
    \ else {\n      result[token] += 1;\n    }\n  }\n  return result;", "    std::map<std::string,\
    \ long> result;\n    std::stringstream ss(test);\n    std::string word;\n    while\
    \ (ss >> word) {\n        result[word]++;\n    }\n    return result;", "    std::map<std::string,\
    \ long> result;\n    std::stringstream ss(test);\n    std::string item;\n    while\
    \ (std::getline(ss, item, ' ')) {\n        result[item]++;\n    }\n    return\
    \ result;", "    std::map<std::string, long> result;\n    std::stringstream ss(test);\n\
    \    std::string word;\n    while (ss >> word) {\n        result[word]++;\n  \
    \  }\n    return result;", "    std::map<std::string, long> result;\n    std::stringstream\
    \ ss(test);\n    std::string word;\n    while (ss >> word) {\n        result[word]++;\n\
    \    }\n    return result;", "    std::map<std::string, long> result;\n    std::stringstream\
    \ ss(test);\n    std::string word;\n    while (ss >> word) {\n        result[word]++;\n\
    \    }\n    return result;", "    std::map<std::string, long> result;\n    std::stringstream\
    \ ss(test);\n    std::string item;\n    while (std::getline(ss, item, ' ')) {\n\
    \        result[item]++;\n    }\n    return result;", "    std::map<std::string,\
    \ long> result;\n    std::stringstream ss(test);\n    std::string token;\n   \
    \ while(std::getline(ss, token, ' ')) {\n        result[token]++;\n    }\n   \
    \ return result;", "    std::map<std::string, long> result;\n    std::stringstream\
    \ ss(test);\n    std::string word;\n    while (ss >> word) {\n        result[word]++;\n\
    \    }\n    return result;", "  std::map<std::string, long> hist;\n  std::stringstream\
    \ ss(test);\n  std::string word;\n  while (ss >> word) {\n    hist[word]++;\n\
    \  }\n  return hist;", "    std::map<std::string, long> result;\n    std::stringstream\
    \ ss(test);\n    std::string temp;\n    while(ss >> temp) {\n        result[temp]++;\n\
    \    }\n    return result;", "  std::map<std::string, long> result;\n  std::stringstream\
    \ ss(test);\n  std::string item;\n  while (std::getline(ss, item, ' ')) {\n  \
    \  result[item]++;\n  }\n  return result;", "    std::map<std::string, long> result;\n\
    \    std::stringstream ss(test);\n    std::string word;\n    while (ss >> word)\
    \ {\n        result[word]++;\n    }\n    return result;", "    std::map<std::string,\
    \ long> result;\n    std::stringstream ss(test);\n    std::string word;\n    while\
    \ (ss >> word) {\n        result[word]++;\n    }\n    return result;", "    std::map<std::string,\
    \ long> m;\n    std::stringstream ss(test);\n    std::string word;\n    while(ss\
    \ >> word) {\n        m[word]++;\n    }\n    return m;", "    std::map<std::string,\
    \ long> result;\n    std::stringstream ss(test);\n    std::string item;\n    while\
    \ (std::getline(ss, item, ' ')) {\n        result[item]++;\n    }\n    return\
    \ result;", "    std::map<std::string, long> result;\n    std::stringstream ss(test);\n\
    \    std::string word;\n    while (ss >> word) {\n        result[word]++;\n  \
    \  }\n    return result;", "    std::map<std::string, long> result;\n    std::stringstream\
    \ ss(test);\n    std::string temp;\n    while(ss >> temp) {\n        result[temp]++;\n\
    \    }\n    return result;", "    std::map<std::string, long> result;\n    std::stringstream\
    \ ss(test);\n    std::string word;\n    while (ss >> word) {\n        result[word]++;\n\
    \    }\n    return result;", "    std::map<std::string, long> result;\n    std::stringstream\
    \ ss(test);\n    std::string temp;\n    while(ss >> temp) {\n        result[temp]++;\n\
    \    }\n    return result;", "    std::map<std::string, long> hist;\n    std::stringstream\
    \ ss(test);\n    std::string word;\n    while (ss >> word) {\n        hist[word]++;\n\
    \    }\n    return hist;", "  std::map<std::string, long> result;\n  std::stringstream\
    \ ss(test);\n  std::string word;\n  while (ss >> word) {\n    result[word]++;\n\
    \  }\n  return result;", "    std::map<std::string, long> result;\n    std::stringstream\
    \ ss(test);\n    std::string word;\n    while (ss >> word) {\n        result[word]++;\n\
    \    }\n    return result;", "    std::map<std::string, long> hist;\n    std::stringstream\
    \ ss(test);\n    std::string word;\n    while (ss >> word) {\n        hist[word]++;\n\
    \    }\n    return hist;", "    std::map<std::string, long> hist;\n    std::stringstream\
    \ ss(test);\n    std::string word;\n    while (ss >> word) {\n        hist[word]++;\n\
    \    }\n    return hist;", "    std::map<std::string, long> result;\n    std::stringstream\
    \ ss(test);\n    std::string temp;\n    while(ss >> temp) {\n        result[temp]++;\n\
    \    }\n    return result;", "    std::map<std::string, long> result;\n    std::stringstream\
    \ ss(test);\n    std::string token;\n    while(std::getline(ss, token, ' ')) {\n\
    \        result[token]++;\n    }\n    return result;", "    std::map<std::string,\
    \ long> result;\n    std::stringstream ss(test);\n    std::string word;\n    while\
    \ (ss >> word) {\n        result[word]++;\n    }\n    return result;", "    std::map<std::string,\
    \ long> result;\n    std::stringstream ss(test);\n    std::string item;\n    while\
    \ (std::getline(ss, item, ' ')) {\n        if (result.find(item) == result.end())\
    \ {\n            result[item] = 1;\n        } else {\n            result[item]\
    \ += 1;\n        }\n    }\n    return result;", "  std::map<std::string, long>\
    \ result;\n  std::stringstream ss(test);\n  std::string word;\n  while (ss >>\
    \ word) {\n    result[word]++;\n  }\n  return result;", "    std::map<std::string,\
    \ long> result;\n    std::stringstream ss(test);\n    std::string word;\n    while\
    \ (ss >> word) {\n        result[word]++;\n    }\n    return result;", "    std::map<std::string,\
    \ long> result;\n    std::stringstream ss(test);\n    std::string token;\n   \
    \ while(std::getline(ss, token, ' ')) {\n        result[token]++;\n    }\n   \
    \ return result;", "    std::map<std::string, long> result;\n    std::stringstream\
    \ ss(test);\n    std::string item;\n    while (std::getline(ss, item, ' ')) {\n\
    \        result[item]++;\n    }\n    return result;", "    std::map<std::string,\
    \ long> result;\n    std::stringstream ss(test);\n    std::string word;\n    while\
    \ (ss >> word) {\n        result[word]++;\n    }\n    return result;", "  std::map<std::string,\
    \ long> result;\n  std::stringstream ss(test);\n  std::string word;\n  while (ss\
    \ >> word) {\n    result[word]++;\n  }\n  return result;", "    std::map<std::string,\
    \ long> result;\n    std::stringstream ss(test);\n    std::string token;\n   \
    \ while(std::getline(ss, token, ' ')) {\n        result[token]++;\n    }\n   \
    \ return result;", "    std::map<std::string, long> result;\n    std::stringstream\
    \ ss(test);\n    std::string word;\n    while (ss >> word) {\n        result[word]++;\n\
    \    }\n    return result;", "    std::map<std::string, long> result;\n    std::stringstream\
    \ ss(test);\n    std::string word;\n    while (ss >> word) {\n        result[word]++;\n\
    \    }\n    return result;", "    std::map<std::string, long> result;\n    std::stringstream\
    \ ss(test);\n    std::string token;\n    while(std::getline(ss, token, ' ')) {\n\
    \        result[token]++;\n    }\n    return result;", "    std::map<std::string,\
    \ long> result;\n    std::stringstream ss(test);\n    std::string word;\n    while\
    \ (ss >> word) {\n        result[word]++;\n    }\n    return result;", "    std::map<std::string,\
    \ long> result;\n    std::stringstream ss(test);\n    std::string word;\n    while\
    \ (ss >> word) {\n        result[word]++;\n    }\n    return result;", "    std::map<std::string,\
    \ long> result;\n    std::stringstream ss(test);\n    std::string word;\n    while\
    \ (ss >> word) {\n        result[word]++;\n    }\n    return result;", "    std::map<std::string,\
    \ long> result;\n    std::stringstream ss(test);\n    std::string word;\n    while\
    \ (ss >> word) {\n        result[word]++;\n    }\n    return result;", "    std::map<std::string,\
    \ long> result;\n    std::stringstream ss(test);\n    std::string token;\n   \
    \ while(std::getline(ss, token, ' ')) {\n        result[token]++;\n    }\n   \
    \ return result;", "    std::map<std::string, long> result;\n    std::stringstream\
    \ ss(test);\n    std::string word;\n    while (ss >> word) {\n        result[word]++;\n\
    \    }\n    return result;", "  std::map<std::string, long> result;\n  std::stringstream\
    \ ss(test);\n  std::string word;\n  while (ss >> word) {\n    result[word]++;\n\
    \  }\n  return result;", "    std::map<std::string, long> result;\n    std::stringstream\
    \ ss(test);\n    std::string item;\n    while (std::getline(ss, item, ' ')) {\n\
    \        if (result.find(item) == result.end()) {\n            result[item] =\
    \ 1;\n        } else {\n            result[item]++;\n        }\n    }\n    return\
    \ result;", "  std::map<std::string, long> result;\n  std::stringstream ss(test);\n\
    \  std::string word;\n  while (ss >> word) {\n    result[word]++;\n  }\n  return\
    \ result;", "    std::map<std::string, long> result;\n    std::stringstream ss(test);\n\
    \    std::string word;\n    while (ss >> word) {\n        result[word]++;\n  \
    \  }\n    return result;", "    std::map<std::string, long> result;\n    std::stringstream\
    \ ss(test);\n    std::string word;\n    while (ss >> word) {\n        result[word]++;\n\
    \    }\n    return result;", "    std::map<std::string, long> hist;\n    std::stringstream\
    \ ss(test);\n    std::string word;\n    while (ss >> word) {\n        hist[word]++;\n\
    \    }\n    return hist;", "    std::map<std::string, long> result;\n    std::stringstream\
    \ ss(test);\n    std::string word;\n    while (ss >> word) {\n        result[word]++;\n\
    \    }\n    return result;", "    std::map<std::string, long> result;\n    std::stringstream\
    \ ss(test);\n    std::string item;\n    while (std::getline(ss, item, ' ')) {\n\
    \        result[item]++;\n    }\n    return result;", "    std::map<std::string,\
    \ long> result;\n    std::stringstream ss(test);\n    std::string word;\n    while\
    \ (ss >> word) {\n        result[word]++;\n    }\n    return result;", "    std::map<std::string,\
    \ long> result;\n    std::stringstream ss(test);\n    std::string item;\n    while\
    \ (std::getline(ss, item, ' ')) {\n        if (result.find(item) == result.end())\
    \ {\n            result[item] = 1;\n        } else {\n            result[item]++;\n\
    \        }\n    }\n    return result;", "    std::map<std::string, long> result;\n\
    \    std::stringstream ss(test);\n    std::string token;\n    while(std::getline(ss,\
    \ token, ' ')) {\n        result[token]++;\n    }\n    return result;", "    std::map<std::string,\
    \ long> result;\n    std::stringstream ss(test);\n    std::string word;\n    while\
    \ (ss >> word) {\n        result[word]++;\n    }\n    return result;", "    std::map<std::string,\
    \ long> result;\n    std::stringstream ss(test);\n    std::string word;\n    while\
    \ (ss >> word) {\n        result[word]++;\n    }\n    return result;", "    std::map<std::string,\
    \ long> result;\n    std::stringstream ss(test);\n    std::string word;\n    while\
    \ (ss >> word) {\n        result[word]++;\n    }\n    return result;", "    std::map<std::string,\
    \ long> result;\n    std::stringstream ss(test);\n    std::string word;\n    while\
    \ (ss >> word) {\n        result[word]++;\n    }\n    return result;", "    std::map<std::string,\
    \ long> result;\n    std::stringstream ss(test);\n    std::string item;\n    while\
    \ (std::getline(ss, item, ' ')) {\n        if (result.find(item) == result.end())\
    \ {\n            result[item] = 1;\n        } else {\n            result[item]++;\n\
    \        }\n    }\n    return result;", "    std::map<std::string, long> result;\n\
    \    std::stringstream ss(test);\n    std::string word;\n    while (ss >> word)\
    \ {\n        result[word]++;\n    }\n    return result;", "    std::map<std::string,\
    \ long> result;\n    std::stringstream ss(test);\n    std::string word;\n    while\
    \ (ss >> word) {\n        result[word]++;\n    }\n    return result;", "    std::map<std::string,\
    \ long> result;\n    std::stringstream ss(test);\n    std::string word;\n    while\
    \ (ss >> word) {\n        result[word]++;\n    }\n    return result;", "    std::map<std::string,\
    \ long> result;\n    std::stringstream ss(test);\n    std::string item;\n    while\
    \ (std::getline(ss, item, ' ')) {\n        if (result.find(item) == result.end())\
    \ {\n            result[item] = 1;\n        } else {\n            result[item]++;\n\
    \        }\n    }\n    return result;", "    std::map<std::string, long> result;\n\
    \    std::stringstream ss(test);\n    std::string item;\n    while (std::getline(ss,\
    \ item, ' ')) {\n        if (result.find(item) == result.end()) {\n          \
    \  result[item] = 1;\n        } else {\n            result[item]++;\n        }\n\
    \    }\n    return result;", "    std::map<std::string, long> result;\n    std::stringstream\
    \ ss(test);\n    std::string word;\n    while (ss >> word) {\n        result[word]++;\n\
    \    }\n    return result;", "    std::map<std::string, long> result;\n    std::stringstream\
    \ ss(test);\n    std::string word;\n    while (ss >> word) {\n        result[word]++;\n\
    \    }\n    return result;", "    std::map<std::string, long> result;\n    std::stringstream\
    \ ss(test);\n    std::string word;\n    while (ss >> word) {\n        result[word]++;\n\
    \    }\n    return result;", "    std::map<std::string, long> result;\n    std::stringstream\
    \ ss(test);\n    std::string token;\n    while(std::getline(ss, token, ' ')) {\n\
    \        result[token]++;\n    }\n    return result;", "  std::map<std::string,\
    \ long> result;\n  std::stringstream ss(test);\n  std::string item;\n  while (std::getline(ss,\
    \ item, ' ')) {\n    result[item]++;\n  }\n  return result;", "    std::map<std::string,\
    \ long> result;\n    std::stringstream ss(test);\n    std::string token;\n   \
    \ while(std::getline(ss, token, ' ')) {\n        result[token]++;\n    }\n   \
    \ return result;", "    std::map<std::string, long> result;\n    std::stringstream\
    \ ss(test);\n    std::string token;\n    while(std::getline(ss, token, ' ')) {\n\
    \        result[token]++;\n    }\n    return result;", "    std::map<std::string,\
    \ long> result;\n    std::stringstream ss(test);\n    std::string word;\n    while\
    \ (ss >> word) {\n        result[word]++;\n    }\n    return result;"]
stop_tokens:
- "\n}"
