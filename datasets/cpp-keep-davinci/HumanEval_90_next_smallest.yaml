name: HumanEval_90_next_smallest
language: cpp
prompt: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a list of integers.\n\
  // Write a function next_smallest() that returns the 2nd smallest element of the\
  \ list.\n// Return None if there is no such element.\n// next_smallest([1, 2, 3,\
  \ 4, 5]) == 2\n// next_smallest([5, 1, 4, 3, 2]) == 2\n// next_smallest([]) == None\n\
  // next_smallest([1, 1]) == None\nstd::optional<long> next_smallest(std::vector<long>\
  \ lst) {\n"
tests: "}\nint main() {\n    auto candidate = next_smallest;\n    assert(candidate((std::vector<long>({(long)1,\
  \ (long)2, (long)3, (long)4, (long)5}))) == (std::optional<long>(2)));\n    assert(candidate((std::vector<long>({(long)5,\
  \ (long)1, (long)4, (long)3, (long)2}))) == (std::optional<long>(2)));\n    assert(candidate((std::vector<long>()))\
  \ == (std::optional<long>({})));\n    assert(candidate((std::vector<long>({(long)1,\
  \ (long)1}))) == (std::optional<long>({})));\n    assert(candidate((std::vector<long>({(long)1,\
  \ (long)1, (long)1, (long)1, (long)0}))) == (std::optional<long>(1)));\n    assert(candidate((std::vector<long>({(long)1,\
  \ (long)1}))) == (std::optional<long>({})));\n    assert(candidate((std::vector<long>({(long)-35,\
  \ (long)34, (long)12, (long)-45}))) == (std::optional<long>(-35)));\n}\n"
completions: ["    if (lst.size() < 2) {\n        return std::nullopt;\n    }\n  \
    \  std::sort(lst.begin(), lst.end());\n    int prev = lst[0];\n    for (int i\
    \ = 1; i < lst.size(); i++) {\n        if (lst[i] != prev) {\n            return\
    \ lst[i];\n        }\n        prev = lst[i];\n    }\n    return std::nullopt;",
  "  if (lst.size() < 2) {\n    return std::nullopt;\n  }\n  std::sort(lst.begin(),\
    \ lst.end());\n  auto it = std::unique(lst.begin(), lst.end());\n  if (it == lst.end())\
    \ {\n    return std::nullopt;\n  }\n  return *(++it);", "    if (lst.size() <\
    \ 2) {\n        return std::nullopt;\n    }\n    std::sort(lst.begin(), lst.end());\n\
    \    for (size_t i = 1; i < lst.size(); i++) {\n        if (lst[i] != lst[i -\
    \ 1]) {\n            return lst[i];\n        }\n    }\n    return std::nullopt;",
  "    if (lst.size() < 2) {\n        return std::nullopt;\n    }\n    long min =\
    \ lst[0];\n    long second_min = lst[1];\n    for (int i = 1; i < lst.size();\
    \ i++) {\n        if (lst[i] < min) {\n            second_min = min;\n       \
    \     min = lst[i];\n        } else if (lst[i] < second_min) {\n            second_min\
    \ = lst[i];\n        }\n    }\n    if (min == second_min) {\n        return std::nullopt;\n\
    \    }\n    return second_min;", "    if (lst.size() < 2) {\n        return std::nullopt;\n\
    \    }\n    long min = lst[0];\n    long second_min = lst[1];\n    for (int i\
    \ = 1; i < lst.size(); i++) {\n        if (lst[i] < min) {\n            second_min\
    \ = min;\n            min = lst[i];\n        } else if (lst[i] < second_min) {\n\
    \            second_min = lst[i];\n        }\n    }\n    if (min == second_min)\
    \ {\n        return std::nullopt;\n    }\n    return second_min;", "    if (lst.size()\
    \ < 2) {\n        return std::nullopt;\n    }\n    long min = lst[0];\n    long\
    \ second_min = lst[1];\n    for (int i = 1; i < lst.size(); i++) {\n        if\
    \ (lst[i] < min) {\n            second_min = min;\n            min = lst[i];\n\
    \        } else if (lst[i] < second_min) {\n            second_min = lst[i];\n\
    \        }\n    }\n    if (min == second_min) {\n        return std::nullopt;\n\
    \    }\n    return second_min;", "    if (lst.size() < 2) {\n        return std::nullopt;\n\
    \    }\n    long min = lst[0];\n    long second_min = lst[1];\n    for (int i\
    \ = 1; i < lst.size(); i++) {\n        if (lst[i] < min) {\n            second_min\
    \ = min;\n            min = lst[i];\n        } else if (lst[i] < second_min) {\n\
    \            second_min = lst[i];\n        }\n    }\n    if (min == second_min)\
    \ {\n        return std::nullopt;\n    }\n    return second_min;", "    if (lst.size()\
    \ < 2) {\n        return std::nullopt;\n    }\n    std::sort(lst.begin(), lst.end());\n\
    \    auto it = std::unique(lst.begin(), lst.end());\n    lst.resize(std::distance(lst.begin(),\
    \ it));\n    if (lst.size() < 2) {\n        return std::nullopt;\n    }\n    return\
    \ lst[1];", "    if (lst.size() < 2) {\n        return std::nullopt;\n    }\n\
    \    std::sort(lst.begin(), lst.end());\n    for (int i = 1; i < lst.size(); i++)\
    \ {\n        if (lst[i] != lst[i - 1]) {\n            return lst[i];\n       \
    \ }\n    }\n    return std::nullopt;", "    if (lst.size() < 2) {\n        return\
    \ std::nullopt;\n    }\n    long min = lst[0];\n    long second_min = lst[1];\n\
    \    for (int i = 1; i < lst.size(); i++) {\n        if (lst[i] < min) {\n   \
    \         second_min = min;\n            min = lst[i];\n        } else if (lst[i]\
    \ < second_min) {\n            second_min = lst[i];\n        }\n    }\n    if\
    \ (min == second_min) {\n        return std::nullopt;\n    }\n    return second_min;",
  "    if (lst.size() < 2) {\n        return std::nullopt;\n    }\n    std::sort(lst.begin(),\
    \ lst.end());\n    std::vector<long>::iterator it = std::unique(lst.begin(), lst.end());\n\
    \    lst.resize(std::distance(lst.begin(), it));\n    if (lst.size() < 2) {\n\
    \        return std::nullopt;\n    }\n    return lst[1];", "    if (lst.size()\
    \ < 2) {\n        return std::nullopt;\n    }\n    long min = lst[0];\n    long\
    \ second_min = lst[1];\n    for (long i = 1; i < lst.size(); i++) {\n        if\
    \ (lst[i] < min) {\n            second_min = min;\n            min = lst[i];\n\
    \        } else if (lst[i] < second_min) {\n            second_min = lst[i];\n\
    \        }\n    }\n    if (min == second_min) {\n        return std::nullopt;\n\
    \    }\n    return second_min;", "    if (lst.size() < 2) {\n        return std::nullopt;\n\
    \    }\n    std::sort(lst.begin(), lst.end());\n    for (int i = 1; i < lst.size();\
    \ i++) {\n        if (lst[i] != lst[i - 1]) {\n            return lst[i];\n  \
    \      }\n    }\n    return std::nullopt;", "    if (lst.size() < 2) {\n     \
    \   return std::nullopt;\n    }\n    std::sort(lst.begin(), lst.end());\n    for\
    \ (int i = 1; i < lst.size(); i++) {\n        if (lst[i] != lst[i - 1]) {\n  \
    \          return lst[i];\n        }\n    }\n    return std::nullopt;", "    if\
    \ (lst.size() < 2) {\n        return std::nullopt;\n    }\n    std::sort(lst.begin(),\
    \ lst.end());\n    for (int i = 1; i < lst.size(); i++) {\n        if (lst[i]\
    \ != lst[i - 1]) {\n            return lst[i];\n        }\n    }\n    return std::nullopt;",
  "    if (lst.size() < 2) {\n        return std::nullopt;\n    }\n    std::sort(lst.begin(),\
    \ lst.end());\n    for (int i = 1; i < lst.size(); i++) {\n        if (lst[i]\
    \ != lst[i - 1]) {\n            return lst[i];\n        }\n    }\n    return std::nullopt;",
  "    if (lst.size() < 2) {\n        return std::nullopt;\n    }\n    std::sort(lst.begin(),\
    \ lst.end());\n    auto it = std::unique(lst.begin(), lst.end());\n    lst.resize(std::distance(lst.begin(),\
    \ it));\n    if (lst.size() < 2) {\n        return std::nullopt;\n    }\n    return\
    \ lst[1];", "    if (lst.size() < 2) {\n        return std::nullopt;\n    }\n\
    \    std::sort(lst.begin(), lst.end());\n    for (int i = 1; i < lst.size(); i++)\
    \ {\n        if (lst[i] != lst[i - 1]) {\n            return lst[i];\n       \
    \ }\n    }\n    return std::nullopt;", "    if (lst.size() < 2) {\n        return\
    \ std::nullopt;\n    }\n    std::sort(lst.begin(), lst.end());\n    for (int i\
    \ = 1; i < lst.size(); i++) {\n        if (lst[i] != lst[i - 1]) {\n         \
    \   return lst[i];\n        }\n    }\n    return std::nullopt;", "    if (lst.size()\
    \ < 2) {\n        return std::nullopt;\n    }\n    long min = lst[0];\n    long\
    \ second_min = lst[1];\n    for (int i = 1; i < lst.size(); i++) {\n        if\
    \ (lst[i] < min) {\n            second_min = min;\n            min = lst[i];\n\
    \        } else if (lst[i] < second_min) {\n            second_min = lst[i];\n\
    \        }\n    }\n    if (min == second_min) {\n        return std::nullopt;\n\
    \    }\n    return second_min;", "    if (lst.size() < 2) {\n        return std::nullopt;\n\
    \    }\n    std::sort(lst.begin(), lst.end());\n    for (int i = 1; i < lst.size();\
    \ i++) {\n        if (lst[i] != lst[i - 1]) {\n            return lst[i];\n  \
    \      }\n    }\n    return std::nullopt;", "    if (lst.size() < 2) {\n     \
    \   return std::nullopt;\n    }\n    std::sort(lst.begin(), lst.end());\n    auto\
    \ it = std::unique(lst.begin(), lst.end());\n    if (it == lst.end()) {\n    \
    \    return std::nullopt;\n    }\n    return *(it + 1);", "  if (lst.size() <\
    \ 2) {\n    return std::nullopt;\n  }\n  std::sort(lst.begin(), lst.end());\n\
    \  if (lst[0] == lst[1]) {\n    return std::nullopt;\n  }\n  return lst[1];",
  "    if (lst.size() == 0) {\n        return std::nullopt;\n    }\n    if (lst.size()\
    \ == 1) {\n        return std::nullopt;\n    }\n    std::sort(lst.begin(), lst.end());\n\
    \    long smallest = lst[0];\n    long second_smallest = lst[1];\n    for (long\
    \ i = 0; i < lst.size(); i++) {\n        if (lst[i] == smallest) {\n         \
    \   continue;\n        }\n        if (lst[i] < second_smallest) {\n          \
    \  second_smallest = lst[i];\n        }\n    }\n    return second_smallest;",
  "    if (lst.size() < 2) {\n        return std::nullopt;\n    }\n    std::sort(lst.begin(),\
    \ lst.end());\n    long min = lst[0];\n    long second_min = lst[1];\n    for\
    \ (long i = 1; i < lst.size(); i++) {\n        if (lst[i] > min) {\n         \
    \   second_min = lst[i];\n            break;\n        }\n    }\n    if (second_min\
    \ == min) {\n        return std::nullopt;\n    }\n    return second_min;", " \
    \   if (lst.size() < 2) {\n        return std::nullopt;\n    }\n    std::sort(lst.begin(),\
    \ lst.end());\n    long min = lst[0];\n    long second_min = lst[1];\n    for\
    \ (int i = 1; i < lst.size(); i++) {\n        if (lst[i] != min) {\n         \
    \   second_min = lst[i];\n            break;\n        }\n    }\n    if (second_min\
    \ == min) {\n        return std::nullopt;\n    }\n    return second_min;", " \
    \ if (lst.size() < 2) {\n    return std::nullopt;\n  }\n  std::sort(lst.begin(),\
    \ lst.end());\n  for (int i = 1; i < lst.size(); i++) {\n    if (lst[i] != lst[i\
    \ - 1]) {\n      return lst[i];\n    }\n  }\n  return std::nullopt;", "  if (lst.size()\
    \ < 2) {\n    return std::nullopt;\n  }\n  std::sort(lst.begin(), lst.end());\n\
    \  long min = lst[0];\n  long second_min = lst[1];\n  for (long i = 2; i < lst.size();\
    \ i++) {\n    if (lst[i] > min && lst[i] < second_min) {\n      second_min = lst[i];\n\
    \    }\n  }\n  if (second_min == min) {\n    return std::nullopt;\n  }\n  return\
    \ second_min;", "    if (lst.size() < 2) {\n        return std::nullopt;\n   \
    \ }\n    std::sort(lst.begin(), lst.end());\n    for (int i = 1; i < lst.size();\
    \ i++) {\n        if (lst[i] != lst[i - 1]) {\n            return lst[i];\n  \
    \      }\n    }\n    return std::nullopt;", "    if (lst.size() < 2) {\n     \
    \   return std::nullopt;\n    }\n    std::sort(lst.begin(), lst.end());\n    auto\
    \ it = std::unique(lst.begin(), lst.end());\n    lst.resize(std::distance(lst.begin(),\
    \ it));\n    if (lst.size() < 2) {\n        return std::nullopt;\n    }\n    return\
    \ lst[1];", "    if (lst.size() < 2) {\n        return std::nullopt;\n    }\n\
    \    std::sort(lst.begin(), lst.end());\n    long min = lst[0];\n    long second_min\
    \ = lst[1];\n    for (long i = 1; i < lst.size(); i++) {\n        if (lst[i] >\
    \ min && lst[i] < second_min) {\n            second_min = lst[i];\n        }\n\
    \    }\n    if (second_min == min) {\n        return std::nullopt;\n    }\n  \
    \  return second_min;", "    if (lst.size() < 2) {\n        return std::nullopt;\n\
    \    }\n    std::sort(lst.begin(), lst.end());\n    auto it = std::unique(lst.begin(),\
    \ lst.end());\n    lst.resize(std::distance(lst.begin(), it));\n    if (lst.size()\
    \ < 2) {\n        return std::nullopt;\n    }\n    return lst[1];", "    if (lst.size()\
    \ < 2) {\n        return std::nullopt;\n    }\n    long min = lst[0];\n    long\
    \ second_min = lst[1];\n    for (int i = 1; i < lst.size(); i++) {\n        if\
    \ (lst[i] < min) {\n            second_min = min;\n            min = lst[i];\n\
    \        } else if (lst[i] < second_min) {\n            second_min = lst[i];\n\
    \        }\n    }\n    if (min == second_min) {\n        return std::nullopt;\n\
    \    }\n    return second_min;", "    if (lst.size() < 2) {\n        return std::nullopt;\n\
    \    }\n    long min = lst[0];\n    long min2 = lst[1];\n    for (int i = 1; i\
    \ < lst.size(); i++) {\n        if (lst[i] < min) {\n            min2 = min;\n\
    \            min = lst[i];\n        } else if (lst[i] < min2) {\n            min2\
    \ = lst[i];\n        }\n    }\n    if (min2 == min) {\n        return std::nullopt;\n\
    \    }\n    return min2;", "    if (lst.size() < 2) {\n        return std::nullopt;\n\
    \    }\n    long min = lst[0];\n    long second_min = lst[1];\n    for (int i\
    \ = 0; i < lst.size(); i++) {\n        if (lst[i] < min) {\n            second_min\
    \ = min;\n            min = lst[i];\n        } else if (lst[i] < second_min) {\n\
    \            second_min = lst[i];\n        }\n    }\n    if (min == second_min)\
    \ {\n        return std::nullopt;\n    }\n    return second_min;", "    if (lst.size()\
    \ < 2) {\n        return std::nullopt;\n    }\n    std::sort(lst.begin(), lst.end());\n\
    \    for (int i = 1; i < lst.size(); i++) {\n        if (lst[i] != lst[i - 1])\
    \ {\n            return lst[i];\n        }\n    }\n    return std::nullopt;",
  "  if (lst.size() < 2) {\n    return std::nullopt;\n  }\n  std::sort(lst.begin(),\
    \ lst.end());\n  for (int i = 1; i < lst.size(); i++) {\n    if (lst[i] != lst[i\
    \ - 1]) {\n      return lst[i];\n    }\n  }\n  return std::nullopt;", "    if\
    \ (lst.size() < 2) {\n        return std::nullopt;\n    }\n    long min = lst[0];\n\
    \    long second_min = lst[1];\n    for (int i = 1; i < lst.size(); i++) {\n \
    \       if (lst[i] < min) {\n            second_min = min;\n            min =\
    \ lst[i];\n        } else if (lst[i] < second_min) {\n            second_min =\
    \ lst[i];\n        }\n    }\n    if (min == second_min) {\n        return std::nullopt;\n\
    \    }\n    return second_min;", "    if (lst.size() < 2) {\n        return std::nullopt;\n\
    \    }\n    std::sort(lst.begin(), lst.end());\n    long prev = lst[0];\n    for\
    \ (int i = 1; i < lst.size(); i++) {\n        if (lst[i] != prev) {\n        \
    \    return lst[i];\n        }\n        prev = lst[i];\n    }\n    return std::nullopt;",
  "  if (lst.size() < 2) return std::nullopt;\n  long min = lst[0];\n  long second_min\
    \ = lst[1];\n  for (int i = 1; i < lst.size(); i++) {\n    if (lst[i] < min) {\n\
    \      second_min = min;\n      min = lst[i];\n    } else if (lst[i] < second_min)\
    \ {\n      second_min = lst[i];\n    }\n  }\n  if (min == second_min) return std::nullopt;\n\
    \  return second_min;", "  if (lst.size() < 2) {\n    return std::nullopt;\n \
    \ }\n  std::sort(lst.begin(), lst.end());\n  long min = lst[0];\n  long second_min\
    \ = lst[1];\n  for (long i = 1; i < lst.size(); i++) {\n    if (lst[i] > min &&\
    \ lst[i] < second_min) {\n      second_min = lst[i];\n    }\n  }\n  if (second_min\
    \ == min) {\n    return std::nullopt;\n  }\n  return second_min;", "    if (lst.size()\
    \ < 2) {\n        return std::nullopt;\n    }\n    std::sort(lst.begin(), lst.end());\n\
    \    auto it = std::unique(lst.begin(), lst.end());\n    lst.resize(std::distance(lst.begin(),\
    \ it));\n    if (lst.size() < 2) {\n        return std::nullopt;\n    }\n    return\
    \ lst[1];", "    if (lst.size() < 2) {\n        return std::nullopt;\n    }\n\
    \    std::sort(lst.begin(), lst.end());\n    long min = lst[0];\n    long second_min\
    \ = lst[1];\n    for (long i = 1; i < lst.size(); i++) {\n        if (lst[i] >\
    \ min && lst[i] < second_min) {\n            second_min = lst[i];\n        }\n\
    \    }\n    if (second_min == min) {\n        return std::nullopt;\n    }\n  \
    \  return second_min;", "  if (lst.size() < 2) {\n    return std::nullopt;\n \
    \ }\n  std::sort(lst.begin(), lst.end());\n  for (int i = 1; i < lst.size(); i++)\
    \ {\n    if (lst[i] != lst[i - 1]) {\n      return lst[i];\n    }\n  }\n  return\
    \ std::nullopt;", "    if (lst.size() < 2) {\n        return std::nullopt;\n \
    \   }\n    std::sort(lst.begin(), lst.end());\n    long prev = lst[0];\n    for\
    \ (long i = 1; i < lst.size(); i++) {\n        if (lst[i] != prev) {\n       \
    \     return lst[i];\n        }\n        prev = lst[i];\n    }\n    return std::nullopt;",
  "    if (lst.size() <= 1) {\n        return std::nullopt;\n    }\n    std::sort(lst.begin(),\
    \ lst.end());\n    for (int i = 1; i < lst.size(); i++) {\n        if (lst[i]\
    \ != lst[i - 1]) {\n            return lst[i];\n        }\n    }\n    return std::nullopt;",
  "    if (lst.size() < 2) {\n        return std::nullopt;\n    }\n    std::sort(lst.begin(),\
    \ lst.end());\n    for (int i = 1; i < lst.size(); i++) {\n        if (lst[i]\
    \ != lst[i - 1]) {\n            return lst[i];\n        }\n    }\n    return std::nullopt;",
  "    if (lst.size() < 2) return std::nullopt;\n    std::sort(lst.begin(), lst.end());\n\
    \    return lst[1];", "    if (lst.size() < 2) {\n        return std::nullopt;\n\
    \    }\n    long min = lst[0];\n    long second_min = lst[1];\n    for (int i\
    \ = 1; i < lst.size(); i++) {\n        if (lst[i] < min) {\n            second_min\
    \ = min;\n            min = lst[i];\n        } else if (lst[i] < second_min) {\n\
    \            second_min = lst[i];\n        }\n    }\n    if (min == second_min)\
    \ {\n        return std::nullopt;\n    }\n    return second_min;", "    if (lst.size()\
    \ < 2) {\n        return std::nullopt;\n    }\n    std::sort(lst.begin(), lst.end());\n\
    \    auto it = std::unique(lst.begin(), lst.end());\n    if (it == lst.end())\
    \ {\n        return std::nullopt;\n    }\n    return *(it + 1);", "    if (lst.size()\
    \ < 2) {\n        return std::nullopt;\n    }\n    std::sort(lst.begin(), lst.end());\n\
    \    long prev = lst[0];\n    for (int i = 1; i < lst.size(); i++) {\n       \
    \ if (lst[i] != prev) {\n            return lst[i];\n        }\n        prev =\
    \ lst[i];\n    }\n    return std::nullopt;", "    if (lst.size() < 2) {\n    \
    \    return std::nullopt;\n    }\n    std::sort(lst.begin(), lst.end());\n   \
    \ for (int i = 1; i < lst.size(); i++) {\n        if (lst[i] != lst[i - 1]) {\n\
    \            return lst[i];\n        }\n    }\n    return std::nullopt;", "  \
    \  if (lst.size() < 2) return std::nullopt;\n    std::sort(lst.begin(), lst.end());\n\
    \    long min = lst[0];\n    long next_min = lst[1];\n    for (int i = 1; i <\
    \ lst.size(); i++) {\n        if (lst[i] > min && lst[i] < next_min) {\n     \
    \       next_min = lst[i];\n        }\n    }\n    if (next_min == min) return\
    \ std::nullopt;\n    return next_min;", "    if (lst.size() < 2) {\n        return\
    \ std::nullopt;\n    }\n    std::sort(lst.begin(), lst.end());\n    long min =\
    \ lst[0];\n    long second_min = lst[1];\n    for (int i = 1; i < lst.size();\
    \ i++) {\n        if (lst[i] != min) {\n            second_min = lst[i];\n   \
    \         break;\n        }\n    }\n    return second_min;", "    if (lst.size()\
    \ == 0) {\n        return std::nullopt;\n    }\n    if (lst.size() == 1) {\n \
    \       return std::nullopt;\n    }\n    if (lst.size() == 2) {\n        if (lst[0]\
    \ == lst[1]) {\n            return std::nullopt;\n        }\n    }\n    std::sort(lst.begin(),\
    \ lst.end());\n    for (int i = 1; i < lst.size(); i++) {\n        if (lst[i]\
    \ != lst[i - 1]) {\n            return lst[i];\n        }\n    }\n    return std::nullopt;",
  "    if (lst.size() < 2) {\n        return std::nullopt;\n    }\n    long min =\
    \ lst[0];\n    long second_min = lst[1];\n    for (long i = 1; i < lst.size();\
    \ i++) {\n        if (lst[i] < min) {\n            second_min = min;\n       \
    \     min = lst[i];\n        } else if (lst[i] < second_min) {\n            second_min\
    \ = lst[i];\n        }\n    }\n    if (min == second_min) {\n        return std::nullopt;\n\
    \    }\n    return second_min;", "    if (lst.size() < 2) {\n        return std::nullopt;\n\
    \    }\n    std::sort(lst.begin(), lst.end());\n    for (int i = 1; i < lst.size();\
    \ i++) {\n        if (lst[i] != lst[i - 1]) {\n            return lst[i];\n  \
    \      }\n    }\n    return std::nullopt;", "    if (lst.size() < 2) {\n     \
    \   return std::nullopt;\n    }\n    std::sort(lst.begin(), lst.end());\n    long\
    \ min = lst[0];\n    long next_min = lst[1];\n    for (int i = 2; i < lst.size();\
    \ i++) {\n        if (lst[i] != min) {\n            next_min = lst[i];\n     \
    \       break;\n        }\n    }\n    if (next_min == min) {\n        return std::nullopt;\n\
    \    }\n    return next_min;", "    if (lst.size() < 2) {\n        return std::nullopt;\n\
    \    }\n    std::sort(lst.begin(), lst.end());\n    for (int i = 1; i < lst.size();\
    \ i++) {\n        if (lst[i] != lst[i - 1]) {\n            return lst[i];\n  \
    \      }\n    }\n    return std::nullopt;", "    if (lst.size() < 2) {\n     \
    \   return std::nullopt;\n    }\n    std::sort(lst.begin(), lst.end());\n    int\
    \ i = 0;\n    while (i < lst.size() - 1) {\n        if (lst[i] != lst[i + 1])\
    \ {\n            return lst[i + 1];\n        }\n        i++;\n    }\n    return\
    \ std::nullopt;", "    if (lst.size() < 2) {\n        return std::nullopt;\n \
    \   }\n    long min = lst[0];\n    long second_min = lst[1];\n    for (int i =\
    \ 1; i < lst.size(); i++) {\n        if (lst[i] < min) {\n            second_min\
    \ = min;\n            min = lst[i];\n        } else if (lst[i] < second_min) {\n\
    \            second_min = lst[i];\n        }\n    }\n    if (min == second_min)\
    \ {\n        return std::nullopt;\n    }\n    return second_min;", "    if (lst.size()\
    \ < 2) {\n        return std::nullopt;\n    }\n    std::sort(lst.begin(), lst.end());\n\
    \    long prev = lst[0];\n    for (int i = 1; i < lst.size(); i++) {\n       \
    \ if (lst[i] != prev) {\n            return lst[i];\n        }\n        prev =\
    \ lst[i];\n    }\n    return std::nullopt;", "    if (lst.size() < 2) {\n    \
    \    return std::nullopt;\n    }\n    std::sort(lst.begin(), lst.end());\n   \
    \ auto it = std::unique(lst.begin(), lst.end());\n    lst.resize(std::distance(lst.begin(),\
    \ it));\n    if (lst.size() < 2) {\n        return std::nullopt;\n    }\n    return\
    \ lst[1];", "    if (lst.size() == 0) {\n        return std::nullopt;\n    }\n\
    \    if (lst.size() == 1) {\n        return std::nullopt;\n    }\n    if (lst.size()\
    \ == 2) {\n        if (lst[0] == lst[1]) {\n            return std::nullopt;\n\
    \        }\n    }\n    std::sort(lst.begin(), lst.end());\n    for (int i = 1;\
    \ i < lst.size(); i++) {\n        if (lst[i] != lst[i - 1]) {\n            return\
    \ lst[i];\n        }\n    }\n    return std::nullopt;", "    if (lst.size() <\
    \ 2) {\n        return std::nullopt;\n    }\n    std::sort(lst.begin(), lst.end());\n\
    \    for (int i = 1; i < lst.size(); i++) {\n        if (lst[i] != lst[i - 1])\
    \ {\n            return lst[i];\n        }\n    }\n    return std::nullopt;",
  "    if (lst.size() < 2) {\n        return std::nullopt;\n    }\n    std::sort(lst.begin(),\
    \ lst.end());\n    auto it = std::unique(lst.begin(), lst.end());\n    if (it\
    \ == lst.end()) {\n        return std::nullopt;\n    }\n    return *(it + 1);",
  "    if (lst.size() < 2) {\n        return std::nullopt;\n    }\n    std::sort(lst.begin(),\
    \ lst.end());\n    for (int i = 1; i < lst.size(); i++) {\n        if (lst[i]\
    \ != lst[i - 1]) {\n            return lst[i];\n        }\n    }\n    return std::nullopt;",
  "    if (lst.size() < 2) {\n        return std::nullopt;\n    }\n    std::sort(lst.begin(),\
    \ lst.end());\n    auto it = std::unique(lst.begin(), lst.end());\n    if (it\
    \ == lst.end()) {\n        return std::nullopt;\n    }\n    return *(it + 1);",
  "    if (lst.size() < 2) {\n        return std::nullopt;\n    }\n    std::sort(lst.begin(),\
    \ lst.end());\n    auto it = std::unique(lst.begin(), lst.end());\n    lst.resize(std::distance(lst.begin(),\
    \ it));\n    if (lst.size() < 2) {\n        return std::nullopt;\n    }\n    return\
    \ lst[1];", "  if (lst.size() < 2) {\n    return std::nullopt;\n  }\n  std::sort(lst.begin(),\
    \ lst.end());\n  long prev = lst[0];\n  for (int i = 1; i < lst.size(); i++) {\n\
    \    if (lst[i] != prev) {\n      return lst[i];\n    }\n    prev = lst[i];\n\
    \  }\n  return std::nullopt;", "    if (lst.size() < 2) {\n        return std::nullopt;\n\
    \    }\n    std::sort(lst.begin(), lst.end());\n    auto it = std::unique(lst.begin(),\
    \ lst.end());\n    if (it == lst.end()) {\n        return std::nullopt;\n    }\n\
    \    return *(++it);", "    if (lst.size() == 0) {\n        return std::nullopt;\n\
    \    }\n    if (lst.size() == 1) {\n        return std::nullopt;\n    }\n    std::sort(lst.begin(),\
    \ lst.end());\n    auto it = std::unique(lst.begin(), lst.end());\n    lst.resize(std::distance(lst.begin(),\
    \ it));\n    if (lst.size() == 1) {\n        return std::nullopt;\n    }\n   \
    \ return lst[1];", "    if (lst.size() < 2) {\n        return std::nullopt;\n\
    \    }\n    std::sort(lst.begin(), lst.end());\n    for (int i = 1; i < lst.size();\
    \ i++) {\n        if (lst[i] != lst[i - 1]) {\n            return lst[i];\n  \
    \      }\n    }\n    return std::nullopt;", "    if (lst.size() < 2) {\n     \
    \   return std::nullopt;\n    }\n    long min = lst[0];\n    long second_min =\
    \ lst[1];\n    for (int i = 1; i < lst.size(); i++) {\n        if (lst[i] < min)\
    \ {\n            second_min = min;\n            min = lst[i];\n        } else\
    \ if (lst[i] < second_min) {\n            second_min = lst[i];\n        }\n  \
    \  }\n    if (min == second_min) {\n        return std::nullopt;\n    }\n    return\
    \ second_min;", "    if (lst.size() < 2) {\n        return std::nullopt;\n   \
    \ }\n    std::sort(lst.begin(), lst.end());\n    for (int i = 1; i < lst.size();\
    \ i++) {\n        if (lst[i] != lst[i - 1]) {\n            return lst[i];\n  \
    \      }\n    }\n    return std::nullopt;", "    if (lst.size() < 2) {\n     \
    \   return std::nullopt;\n    }\n    std::sort(lst.begin(), lst.end());\n    long\
    \ prev = lst[0];\n    for (int i = 1; i < lst.size(); i++) {\n        if (lst[i]\
    \ != prev) {\n            return lst[i];\n        }\n        prev = lst[i];\n\
    \    }\n    return std::nullopt;", "  if (lst.size() < 2) {\n    return std::nullopt;\n\
    \  }\n  std::sort(lst.begin(), lst.end());\n  auto it = std::unique(lst.begin(),\
    \ lst.end());\n  if (it == lst.end()) {\n    return std::nullopt;\n  }\n  return\
    \ *(++it);", "    if (lst.size() < 2) {\n        return std::nullopt;\n    }\n\
    \    std::sort(lst.begin(), lst.end());\n    long min = lst[0];\n    long second_min\
    \ = lst[1];\n    for (long i = 1; i < lst.size(); i++) {\n        if (lst[i] >\
    \ min && lst[i] < second_min) {\n            second_min = lst[i];\n        }\n\
    \    }\n    if (second_min == min) {\n        return std::nullopt;\n    }\n  \
    \  return second_min;", "    if (lst.size() < 2) {\n        return std::nullopt;\n\
    \    }\n    long smallest = lst[0];\n    long second_smallest = lst[1];\n    for\
    \ (int i = 1; i < lst.size(); i++) {\n        if (lst[i] < smallest) {\n     \
    \       second_smallest = smallest;\n            smallest = lst[i];\n        }\
    \ else if (lst[i] < second_smallest) {\n            second_smallest = lst[i];\n\
    \        }\n    }\n    if (smallest == second_smallest) {\n        return std::nullopt;\n\
    \    }\n    return second_smallest;", "    if (lst.size() < 2) {\n        return\
    \ std::nullopt;\n    }\n    std::sort(lst.begin(), lst.end());\n    long prev\
    \ = lst[0];\n    for (int i = 1; i < lst.size(); i++) {\n        if (lst[i] !=\
    \ prev) {\n            return lst[i];\n        }\n        prev = lst[i];\n   \
    \ }\n    return std::nullopt;", "    if (lst.size() < 2) return std::nullopt;\n\
    \    long min1 = lst[0];\n    long min2 = lst[1];\n    for (int i = 1; i < lst.size();\
    \ i++) {\n        if (lst[i] < min1) {\n            min2 = min1;\n           \
    \ min1 = lst[i];\n        } else if (lst[i] < min2) {\n            min2 = lst[i];\n\
    \        }\n    }\n    if (min1 == min2) return std::nullopt;\n    return min2;",
  "    if (lst.size() < 2) {\n        return std::nullopt;\n    }\n    std::sort(lst.begin(),\
    \ lst.end());\n    for (int i = 1; i < lst.size(); i++) {\n        if (lst[i]\
    \ != lst[i - 1]) {\n            return lst[i];\n        }\n    }\n    return std::nullopt;",
  "    std::sort(lst.begin(), lst.end());\n    std::optional<long> result;\n    for\
    \ (int i = 0; i < lst.size() - 1; i++) {\n        if (lst[i] != lst[i + 1]) {\n\
    \            result = lst[i + 1];\n            break;\n        }\n    }\n    return\
    \ result;", "    if (lst.size() < 2) {\n        return std::nullopt;\n    }\n\
    \    long min = lst[0];\n    long second_min = lst[1];\n    for (int i = 1; i\
    \ < lst.size(); i++) {\n        if (lst[i] < min) {\n            second_min =\
    \ min;\n            min = lst[i];\n        } else if (lst[i] < second_min) {\n\
    \            second_min = lst[i];\n        }\n    }\n    if (min == second_min)\
    \ {\n        return std::nullopt;\n    }\n    return second_min;", "    if (lst.size()\
    \ < 2) {\n        return std::nullopt;\n    }\n    std::sort(lst.begin(), lst.end());\n\
    \    for (int i = 1; i < lst.size(); i++) {\n        if (lst[i] != lst[i - 1])\
    \ {\n            return lst[i];\n        }\n    }\n    return std::nullopt;",
  "    if (lst.size() < 2) return std::nullopt;\n    long min = lst[0];\n    long\
    \ second_min = lst[1];\n    for (int i = 1; i < lst.size(); i++) {\n        if\
    \ (lst[i] < min) {\n            second_min = min;\n            min = lst[i];\n\
    \        } else if (lst[i] < second_min) {\n            second_min = lst[i];\n\
    \        }\n    }\n    if (min == second_min) return std::nullopt;\n    return\
    \ second_min;", "    if (lst.size() < 2) {\n        return std::nullopt;\n   \
    \ }\n    long min = lst[0];\n    long second_min = lst[1];\n    for (int i = 1;\
    \ i < lst.size(); i++) {\n        if (lst[i] < min) {\n            second_min\
    \ = min;\n            min = lst[i];\n        } else if (lst[i] < second_min) {\n\
    \            second_min = lst[i];\n        }\n    }\n    if (min == second_min)\
    \ {\n        return std::nullopt;\n    }\n    return second_min;", "    if (lst.size()\
    \ < 2) {\n        return std::nullopt;\n    }\n    std::sort(lst.begin(), lst.end());\n\
    \    auto it = std::unique(lst.begin(), lst.end());\n    if (it == lst.end())\
    \ {\n        return std::nullopt;\n    }\n    return *(it + 1);", "    if (lst.size()\
    \ < 2) {\n        return std::nullopt;\n    }\n    std::sort(lst.begin(), lst.end());\n\
    \    long min = lst[0];\n    long second_min = lst[1];\n    for (int i = 1; i\
    \ < lst.size(); i++) {\n        if (lst[i] != min) {\n            second_min =\
    \ lst[i];\n            break;\n        }\n    }\n    if (second_min == min) {\n\
    \        return std::nullopt;\n    }\n    return second_min;", "    if (lst.size()\
    \ < 2) {\n        return std::nullopt;\n    }\n    std::sort(lst.begin(), lst.end());\n\
    \    for (int i = 1; i < lst.size(); i++) {\n        if (lst[i] != lst[i - 1])\
    \ {\n            return lst[i];\n        }\n    }\n    return std::nullopt;",
  "  if (lst.size() < 2) {\n    return std::nullopt;\n  }\n  std::sort(lst.begin(),\
    \ lst.end());\n  for (int i = 1; i < lst.size(); i++) {\n    if (lst[i] != lst[i\
    \ - 1]) {\n      return lst[i];\n    }\n  }\n  return std::nullopt;", "    if\
    \ (lst.size() < 2) {\n        return std::nullopt;\n    }\n    long smallest =\
    \ lst[0];\n    long second_smallest = lst[1];\n    for (long i = 1; i < lst.size();\
    \ i++) {\n        if (lst[i] < smallest) {\n            second_smallest = smallest;\n\
    \            smallest = lst[i];\n        } else if (lst[i] < second_smallest)\
    \ {\n            second_smallest = lst[i];\n        }\n    }\n    if (smallest\
    \ == second_smallest) {\n        return std::nullopt;\n    }\n    return second_smallest;",
  "    if (lst.size() < 2) {\n        return std::nullopt;\n    }\n    std::sort(lst.begin(),\
    \ lst.end());\n    auto last = std::unique(lst.begin(), lst.end());\n    lst.erase(last,\
    \ lst.end());\n    if (lst.size() < 2) {\n        return std::nullopt;\n    }\n\
    \    return lst[1];", "    if (lst.size() == 0) {\n        return std::nullopt;\n\
    \    }\n    if (lst.size() == 1) {\n        return std::nullopt;\n    }\n    std::sort(lst.begin(),\
    \ lst.end());\n    std::vector<long>::iterator it;\n    it = std::unique(lst.begin(),\
    \ lst.end());\n    lst.resize(std::distance(lst.begin(), it));\n    if (lst.size()\
    \ == 1) {\n        return std::nullopt;\n    }\n    return lst[1];", "    if (lst.size()\
    \ < 2) {\n        return std::nullopt;\n    }\n    std::sort(lst.begin(), lst.end());\n\
    \    for (int i = 1; i < lst.size(); i++) {\n        if (lst[i] != lst[i - 1])\
    \ {\n            return lst[i];\n        }\n    }\n    return std::nullopt;",
  "    if (lst.size() == 0) {\n        return std::nullopt;\n    }\n    if (lst.size()\
    \ == 1) {\n        return std::nullopt;\n    }\n    std::sort(lst.begin(), lst.end());\n\
    \    int smallest = lst[0];\n    int second_smallest = lst[1];\n    for (int i\
    \ = 1; i < lst.size(); i++) {\n        if (lst[i] != smallest) {\n           \
    \ second_smallest = lst[i];\n            break;\n        }\n    }\n    return\
    \ second_smallest;", "    if (lst.size() < 2) {\n        return std::nullopt;\n\
    \    }\n    std::sort(lst.begin(), lst.end());\n    auto it = std::unique(lst.begin(),\
    \ lst.end());\n    if (it == lst.end()) {\n        return std::nullopt;\n    }\n\
    \    return *(it + 1);", "    if (lst.size() < 2) {\n        return std::nullopt;\n\
    \    }\n    std::sort(lst.begin(), lst.end());\n    long prev = lst[0];\n    for\
    \ (long i = 1; i < lst.size(); i++) {\n        if (lst[i] != prev) {\n       \
    \     return lst[i];\n        }\n        prev = lst[i];\n    }\n    return std::nullopt;",
  "    if (lst.size() < 2) {\n        return std::nullopt;\n    }\n    long min =\
    \ lst[0];\n    long second_min = lst[1];\n    for (int i = 1; i < lst.size();\
    \ i++) {\n        if (lst[i] < min) {\n            second_min = min;\n       \
    \     min = lst[i];\n        } else if (lst[i] < second_min) {\n            second_min\
    \ = lst[i];\n        }\n    }\n    if (min == second_min) {\n        return std::nullopt;\n\
    \    }\n    return second_min;", "    if (lst.size() < 2) {\n        return std::nullopt;\n\
    \    }\n    std::sort(lst.begin(), lst.end());\n    auto it = std::unique(lst.begin(),\
    \ lst.end());\n    if (it == lst.end()) {\n        return std::nullopt;\n    }\n\
    \    return *(it + 1);", "    if (lst.size() < 2) {\n        return std::nullopt;\n\
    \    }\n    std::sort(lst.begin(), lst.end());\n    long prev = lst[0];\n    for\
    \ (int i = 1; i < lst.size(); i++) {\n        if (lst[i] != prev) {\n        \
    \    return lst[i];\n        }\n        prev = lst[i];\n    }\n    return std::nullopt;",
  "    if (lst.size() < 2) {\n        return std::nullopt;\n    }\n    std::sort(lst.begin(),\
    \ lst.end());\n    long prev = lst[0];\n    for (int i = 1; i < lst.size(); i++)\
    \ {\n        if (lst[i] != prev) {\n            return lst[i];\n        }\n  \
    \      prev = lst[i];\n    }\n    return std::nullopt;", "    if (lst.size() <\
    \ 2) {\n        return std::nullopt;\n    }\n    std::sort(lst.begin(), lst.end());\n\
    \    long prev = lst[0];\n    for (int i = 1; i < lst.size(); i++) {\n       \
    \ if (lst[i] != prev) {\n            return lst[i];\n        }\n        prev =\
    \ lst[i];\n    }\n    return std::nullopt;", "    if (lst.size() < 2) {\n    \
    \    return std::nullopt;\n    }\n    std::sort(lst.begin(), lst.end());\n   \
    \ auto it = std::unique(lst.begin(), lst.end());\n    lst.resize(std::distance(lst.begin(),\
    \ it));\n    if (lst.size() < 2) {\n        return std::nullopt;\n    }\n    return\
    \ lst[1];", "    if (lst.size() < 2) {\n        return std::nullopt;\n    }\n\
    \    long min = lst[0];\n    long min2 = lst[1];\n    for (int i = 1; i < lst.size();\
    \ i++) {\n        if (lst[i] < min) {\n            min2 = min;\n            min\
    \ = lst[i];\n        } else if (lst[i] < min2) {\n            min2 = lst[i];\n\
    \        }\n    }\n    if (min2 == min) {\n        return std::nullopt;\n    }\n\
    \    return min2;", "    if (lst.size() < 2) {\n        return std::nullopt;\n\
    \    }\n    std::sort(lst.begin(), lst.end());\n    for (int i = 1; i < lst.size();\
    \ i++) {\n        if (lst[i] != lst[i - 1]) {\n            return lst[i];\n  \
    \      }\n    }\n    return std::nullopt;", "    if (lst.size() < 2) {\n     \
    \   return std::nullopt;\n    }\n    std::sort(lst.begin(), lst.end());\n    long\
    \ prev = lst[0];\n    for (int i = 1; i < lst.size(); i++) {\n        if (lst[i]\
    \ != prev) {\n            return lst[i];\n        }\n        prev = lst[i];\n\
    \    }\n    return std::nullopt;", "  if (lst.size() < 2) {\n    return std::nullopt;\n\
    \  }\n  std::sort(lst.begin(), lst.end());\n  for (int i = 1; i < lst.size();\
    \ i++) {\n    if (lst[i] != lst[i - 1]) {\n      return lst[i];\n    }\n  }\n\
    \  return std::nullopt;", "    if (lst.size() < 2) {\n        return std::nullopt;\n\
    \    }\n    long smallest = lst[0];\n    long second_smallest = lst[1];\n    for\
    \ (long i = 0; i < lst.size(); i++) {\n        if (lst[i] < smallest) {\n    \
    \        second_smallest = smallest;\n            smallest = lst[i];\n       \
    \ } else if (lst[i] < second_smallest) {\n            second_smallest = lst[i];\n\
    \        }\n    }\n    if (smallest == second_smallest) {\n        return std::nullopt;\n\
    \    }\n    return second_smallest;", "    if (lst.size() < 2) {\n        return\
    \ std::nullopt;\n    }\n    std::sort(lst.begin(), lst.end());\n    auto it =\
    \ std::unique(lst.begin(), lst.end());\n    if (it == lst.end()) {\n        return\
    \ std::nullopt;\n    }\n    return *(++it);", "    if (lst.size() < 2) {\n   \
    \     return std::nullopt;\n    }\n    std::sort(lst.begin(), lst.end());\n  \
    \  auto it = std::unique(lst.begin(), lst.end());\n    if (it == lst.end()) {\n\
    \        return std::nullopt;\n    }\n    return *(++it);", "  if (lst.size()\
    \ < 2) {\n    return std::nullopt;\n  }\n  std::sort(lst.begin(), lst.end());\n\
    \  for (int i = 1; i < lst.size(); i++) {\n    if (lst[i] != lst[i - 1]) {\n \
    \     return lst[i];\n    }\n  }\n  return std::nullopt;", "    if (lst.size()\
    \ < 2) {\n        return std::nullopt;\n    }\n    std::sort(lst.begin(), lst.end());\n\
    \    std::vector<long>::iterator it = std::unique(lst.begin(), lst.end());\n \
    \   lst.resize(std::distance(lst.begin(), it));\n    if (lst.size() < 2) {\n \
    \       return std::nullopt;\n    }\n    return lst[1];", "  if (lst.size() <\
    \ 2) {\n    return std::nullopt;\n  }\n  std::sort(lst.begin(), lst.end());\n\
    \  auto it = std::unique(lst.begin(), lst.end());\n  lst.resize(std::distance(lst.begin(),\
    \ it));\n  if (lst.size() < 2) {\n    return std::nullopt;\n  }\n  return lst[1];",
  "    if (lst.size() < 2) {\n        return std::nullopt;\n    }\n    std::sort(lst.begin(),\
    \ lst.end());\n    auto it = std::unique(lst.begin(), lst.end());\n    lst.resize(std::distance(lst.begin(),\
    \ it));\n    if (lst.size() < 2) {\n        return std::nullopt;\n    }\n    return\
    \ lst[1];", "    if (lst.size() < 2) {\n        return std::nullopt;\n    }\n\
    \    long min = lst[0];\n    long second_min = lst[1];\n    for (int i = 1; i\
    \ < lst.size(); i++) {\n        if (lst[i] < min) {\n            second_min =\
    \ min;\n            min = lst[i];\n        } else if (lst[i] < second_min) {\n\
    \            second_min = lst[i];\n        }\n    }\n    if (min == second_min)\
    \ {\n        return std::nullopt;\n    }\n    return second_min;", "  if (lst.size()\
    \ < 2) {\n    return std::nullopt;\n  }\n  std::sort(lst.begin(), lst.end());\n\
    \  long prev = lst[0];\n  for (int i = 1; i < lst.size(); i++) {\n    if (lst[i]\
    \ != prev) {\n      return lst[i];\n    }\n    prev = lst[i];\n  }\n  return std::nullopt;",
  "    if (lst.size() < 2) {\n        return std::nullopt;\n    }\n    std::sort(lst.begin(),\
    \ lst.end());\n    long prev = lst[0];\n    for (auto i = 1; i < lst.size(); i++)\
    \ {\n        if (lst[i] != prev) {\n            return lst[i];\n        }\n  \
    \      prev = lst[i];\n    }\n    return std::nullopt;", "    if (lst.size() <\
    \ 2) {\n        return std::nullopt;\n    }\n    long min = lst[0];\n    long\
    \ second_min = lst[1];\n    for (int i = 1; i < lst.size(); i++) {\n        if\
    \ (lst[i] < min) {\n            second_min = min;\n            min = lst[i];\n\
    \        } else if (lst[i] < second_min) {\n            second_min = lst[i];\n\
    \        }\n    }\n    if (min == second_min) {\n        return std::nullopt;\n\
    \    }\n    return second_min;", "  if (lst.size() < 2) {\n    return std::nullopt;\n\
    \  }\n  std::sort(lst.begin(), lst.end());\n  for (int i = 1; i < lst.size();\
    \ i++) {\n    if (lst[i] != lst[i - 1]) {\n      return lst[i];\n    }\n  }\n\
    \  return std::nullopt;", "  if (lst.size() < 2) {\n    return std::nullopt;\n\
    \  }\n  std::sort(lst.begin(), lst.end());\n  for (int i = 1; i < lst.size();\
    \ i++) {\n    if (lst[i] != lst[i - 1]) {\n      return lst[i];\n    }\n  }\n\
    \  return std::nullopt;", "    if (lst.size() < 2) {\n        return std::nullopt;\n\
    \    }\n    std::sort(lst.begin(), lst.end());\n    for (int i = 1; i < lst.size();\
    \ i++) {\n        if (lst[i] != lst[i - 1]) {\n            return lst[i];\n  \
    \      }\n    }\n    return std::nullopt;", "    if (lst.size() < 2) {\n     \
    \   return std::nullopt;\n    }\n    long min = lst[0];\n    long second_min =\
    \ lst[1];\n    for (int i = 1; i < lst.size(); i++) {\n        if (lst[i] < min)\
    \ {\n            second_min = min;\n            min = lst[i];\n        } else\
    \ if (lst[i] < second_min) {\n            second_min = lst[i];\n        }\n  \
    \  }\n    if (min == second_min) {\n        return std::nullopt;\n    }\n    return\
    \ second_min;", "  if (lst.size() < 2) {\n    return std::nullopt;\n  }\n  long\
    \ min = lst[0];\n  long second_min = lst[1];\n  for (long i = 1; i < lst.size();\
    \ i++) {\n    if (lst[i] < min) {\n      second_min = min;\n      min = lst[i];\n\
    \    } else if (lst[i] < second_min) {\n      second_min = lst[i];\n    }\n  }\n\
    \  if (min == second_min) {\n    return std::nullopt;\n  }\n  return second_min;",
  "    if (lst.size() < 2) {\n        return std::nullopt;\n    }\n    long min =\
    \ lst[0];\n    long second_min = lst[1];\n    for (int i = 1; i < lst.size();\
    \ i++) {\n        if (lst[i] < min) {\n            second_min = min;\n       \
    \     min = lst[i];\n        } else if (lst[i] < second_min) {\n            second_min\
    \ = lst[i];\n        }\n    }\n    if (min == second_min) {\n        return std::nullopt;\n\
    \    }\n    return second_min;", "    if (lst.size() < 2) {\n        return std::nullopt;\n\
    \    }\n    std::sort(lst.begin(), lst.end());\n    long prev = lst[0];\n    long\
    \ curr = lst[1];\n    for (int i = 1; i < lst.size(); i++) {\n        if (lst[i]\
    \ != prev) {\n            return curr;\n        }\n        prev = lst[i];\n  \
    \      curr = lst[i + 1];\n    }\n    return std::nullopt;", "  if (lst.size()\
    \ < 2) {\n    return std::nullopt;\n  }\n  std::sort(lst.begin(), lst.end());\n\
    \  for (int i = 1; i < lst.size(); i++) {\n    if (lst[i] != lst[i - 1]) {\n \
    \     return lst[i];\n    }\n  }\n  return std::nullopt;", "    if (lst.size()\
    \ < 2) {\n        return std::nullopt;\n    }\n    long min = lst[0];\n    long\
    \ second_min = lst[1];\n    for (int i = 1; i < lst.size(); i++) {\n        if\
    \ (lst[i] < min) {\n            second_min = min;\n            min = lst[i];\n\
    \        } else if (lst[i] < second_min) {\n            second_min = lst[i];\n\
    \        }\n    }\n    if (min == second_min) {\n        return std::nullopt;\n\
    \    }\n    return second_min;", "    if (lst.size() < 2) {\n        return std::nullopt;\n\
    \    }\n    std::sort(lst.begin(), lst.end());\n    auto it = std::unique(lst.begin(),\
    \ lst.end());\n    if (it == lst.end()) {\n        return std::nullopt;\n    }\n\
    \    return *(it + 1);", "    if (lst.size() < 2) {\n        return std::nullopt;\n\
    \    }\n    std::sort(lst.begin(), lst.end());\n    auto it = std::unique(lst.begin(),\
    \ lst.end());\n    if (it == lst.end()) {\n        return std::nullopt;\n    }\n\
    \    return *(it + 1);", "    if (lst.size() < 2) {\n        return std::nullopt;\n\
    \    }\n    std::sort(lst.begin(), lst.end());\n    int i = 0;\n    while (i <\
    \ lst.size() - 1) {\n        if (lst[i] != lst[i + 1]) {\n            return lst[i\
    \ + 1];\n        }\n        i++;\n    }\n    return std::nullopt;", "    if (lst.size()\
    \ < 2) {\n        return std::nullopt;\n    }\n    std::sort(lst.begin(), lst.end());\n\
    \    long min = lst[0];\n    long second_min = lst[1];\n    for (int i = 1; i\
    \ < lst.size(); i++) {\n        if (lst[i] > min && lst[i] < second_min) {\n \
    \           second_min = lst[i];\n        }\n    }\n    if (second_min == min)\
    \ {\n        return std::nullopt;\n    }\n    return second_min;", "    if (lst.size()\
    \ < 2) {\n        return std::nullopt;\n    }\n    std::sort(lst.begin(), lst.end());\n\
    \    auto it = std::unique(lst.begin(), lst.end());\n    lst.resize(std::distance(lst.begin(),\
    \ it));\n    if (lst.size() < 2) {\n        return std::nullopt;\n    }\n    return\
    \ lst[1];", "    if (lst.size() == 0) {\n        return std::nullopt;\n    }\n\
    \    if (lst.size() == 1) {\n        return std::nullopt;\n    }\n    std::sort(lst.begin(),\
    \ lst.end());\n    for (int i = 0; i < lst.size() - 1; i++) {\n        if (lst[i]\
    \ != lst[i + 1]) {\n            return lst[i + 1];\n        }\n    }\n    return\
    \ std::nullopt;", "    if (lst.size() < 2) {\n        return std::nullopt;\n \
    \   }\n    long min = lst[0];\n    long second_min = lst[1];\n    for (int i =\
    \ 1; i < lst.size(); i++) {\n        if (lst[i] < min) {\n            second_min\
    \ = min;\n            min = lst[i];\n        } else if (lst[i] < second_min) {\n\
    \            second_min = lst[i];\n        }\n    }\n    if (min == second_min)\
    \ {\n        return std::nullopt;\n    }\n    return second_min;", "    if (lst.size()\
    \ < 2) {\n        return std::nullopt;\n    }\n    long min = lst[0];\n    long\
    \ second_min = lst[1];\n    for (int i = 1; i < lst.size(); i++) {\n        if\
    \ (lst[i] < min) {\n            second_min = min;\n            min = lst[i];\n\
    \        } else if (lst[i] < second_min) {\n            second_min = lst[i];\n\
    \        }\n    }\n    if (min == second_min) {\n        return std::nullopt;\n\
    \    }\n    return second_min;", "    if (lst.size() <= 1) {\n        return std::nullopt;\n\
    \    }\n    std::sort(lst.begin(), lst.end());\n    for (int i = 1; i < lst.size();\
    \ i++) {\n        if (lst[i] != lst[i - 1]) {\n            return lst[i];\n  \
    \      }\n    }\n    return std::nullopt;", "  if (lst.size() < 2) {\n    return\
    \ std::nullopt;\n  }\n  std::sort(lst.begin(), lst.end());\n  for (int i = 1;\
    \ i < lst.size(); i++) {\n    if (lst[i] != lst[i - 1]) {\n      return lst[i];\n\
    \    }\n  }\n  return std::nullopt;", "    if (lst.size() < 2) {\n        return\
    \ std::nullopt;\n    }\n    std::sort(lst.begin(), lst.end());\n    for (int i\
    \ = 1; i < lst.size(); i++) {\n        if (lst[i] != lst[i - 1]) {\n         \
    \   return lst[i];\n        }\n    }\n    return std::nullopt;", "    if (lst.size()\
    \ < 2) {\n        return std::nullopt;\n    }\n    long min = lst[0];\n    long\
    \ second_min = lst[1];\n    for (int i = 1; i < lst.size(); i++) {\n        if\
    \ (lst[i] < min) {\n            second_min = min;\n            min = lst[i];\n\
    \        } else if (lst[i] < second_min) {\n            second_min = lst[i];\n\
    \        }\n    }\n    if (min == second_min) {\n        return std::nullopt;\n\
    \    }\n    return second_min;", "    if (lst.size() < 2) {\n        return std::nullopt;\n\
    \    }\n    std::sort(lst.begin(), lst.end());\n    auto it = std::unique(lst.begin(),\
    \ lst.end());\n    lst.resize(std::distance(lst.begin(), it));\n    if (lst.size()\
    \ < 2) {\n        return std::nullopt;\n    }\n    return lst[1];", "    if (lst.size()\
    \ < 2) {\n        return std::nullopt;\n    }\n    std::sort(lst.begin(), lst.end());\n\
    \    long prev = lst[0];\n    for (size_t i = 1; i < lst.size(); i++) {\n    \
    \    if (lst[i] != prev) {\n            return lst[i];\n        }\n        prev\
    \ = lst[i];\n    }\n    return std::nullopt;", "  if (lst.size() < 2) {\n    return\
    \ std::nullopt;\n  }\n  std::sort(lst.begin(), lst.end());\n  long min = lst[0];\n\
    \  long second_min = lst[1];\n  for (long i = 1; i < lst.size(); i++) {\n    if\
    \ (lst[i] != min) {\n      second_min = lst[i];\n      break;\n    }\n  }\n  if\
    \ (second_min == min) {\n    return std::nullopt;\n  }\n  return second_min;",
  "    if (lst.size() < 2) {\n        return std::nullopt;\n    }\n    std::sort(lst.begin(),\
    \ lst.end());\n    for (int i = 1; i < lst.size(); i++) {\n        if (lst[i]\
    \ != lst[i - 1]) {\n            return lst[i];\n        }\n    }\n    return std::nullopt;",
  "    if (lst.size() < 2) {\n        return std::nullopt;\n    }\n    std::sort(lst.begin(),\
    \ lst.end());\n    long smallest = lst[0];\n    long second_smallest = lst[1];\n\
    \    for (auto it = lst.begin() + 2; it != lst.end(); ++it) {\n        if (*it\
    \ != smallest) {\n            second_smallest = *it;\n            break;\n   \
    \     }\n    }\n    if (second_smallest == smallest) {\n        return std::nullopt;\n\
    \    }\n    return second_smallest;", "    if (lst.size() < 2) {\n        return\
    \ std::nullopt;\n    }\n    std::sort(lst.begin(), lst.end());\n    long prev\
    \ = lst[0];\n    for (int i = 1; i < lst.size(); i++) {\n        if (lst[i] !=\
    \ prev) {\n            return lst[i];\n        }\n        prev = lst[i];\n   \
    \ }\n    return std::nullopt;", "    if (lst.size() < 2) {\n        return std::nullopt;\n\
    \    }\n    long min = lst[0];\n    long second_min = lst[1];\n    for (int i\
    \ = 1; i < lst.size(); i++) {\n        if (lst[i] < min) {\n            second_min\
    \ = min;\n            min = lst[i];\n        } else if (lst[i] < second_min) {\n\
    \            second_min = lst[i];\n        }\n    }\n    if (min == second_min)\
    \ {\n        return std::nullopt;\n    }\n    return second_min;", "  if (lst.size()\
    \ < 2) {\n    return std::nullopt;\n  }\n  std::sort(lst.begin(), lst.end());\n\
    \  long prev = lst[0];\n  for (auto i = 1; i < lst.size(); i++) {\n    if (lst[i]\
    \ != prev) {\n      return lst[i];\n    }\n    prev = lst[i];\n  }\n  return std::nullopt;",
  "    if (lst.size() < 2) {\n        return std::nullopt;\n    }\n    std::sort(lst.begin(),\
    \ lst.end());\n    auto it = std::unique(lst.begin(), lst.end());\n    if (it\
    \ == lst.end()) {\n        return std::nullopt;\n    }\n    return *(it + 1);",
  "    if (lst.size() < 2) {\n        return std::nullopt;\n    }\n    std::sort(lst.begin(),\
    \ lst.end());\n    for (int i = 1; i < lst.size(); i++) {\n        if (lst[i]\
    \ != lst[i - 1]) {\n            return lst[i];\n        }\n    }\n    return std::nullopt;",
  "    if (lst.size() < 2) {\n        return std::nullopt;\n    }\n    std::sort(lst.begin(),\
    \ lst.end());\n    for (int i = 1; i < lst.size(); i++) {\n        if (lst[i]\
    \ != lst[i - 1]) {\n            return lst[i];\n        }\n    }\n    return std::nullopt;",
  "    if (lst.size() == 0) {\n        return std::nullopt;\n    }\n    if (lst.size()\
    \ == 1) {\n        return std::nullopt;\n    }\n    if (lst.size() == 2) {\n \
    \       if (lst[0] == lst[1]) {\n            return std::nullopt;\n        }\n\
    \    }\n    std::sort(lst.begin(), lst.end());\n    for (int i = 1; i < lst.size();\
    \ i++) {\n        if (lst[i] != lst[i - 1]) {\n            return lst[i];\n  \
    \      }\n    }\n    return std::nullopt;", "    if (lst.size() < 2) {\n     \
    \   return std::nullopt;\n    }\n    std::sort(lst.begin(), lst.end());\n    for\
    \ (int i = 1; i < lst.size(); i++) {\n        if (lst[i] != lst[i - 1]) {\n  \
    \          return lst[i];\n        }\n    }\n    return std::nullopt;", "    if\
    \ (lst.size() < 2) {\n        return std::nullopt;\n    }\n    std::sort(lst.begin(),\
    \ lst.end());\n    for (int i = 1; i < lst.size(); i++) {\n        if (lst[i]\
    \ != lst[i - 1]) {\n            return lst[i];\n        }\n    }\n    return std::nullopt;",
  "    if (lst.size() < 2) {\n        return std::nullopt;\n    }\n    std::sort(lst.begin(),\
    \ lst.end());\n    auto it = std::unique(lst.begin(), lst.end());\n    if (it\
    \ == lst.end()) {\n        return std::nullopt;\n    }\n    return *std::next(it);",
  "    if (lst.size() <= 1) {\n        return std::nullopt;\n    }\n    std::sort(lst.begin(),\
    \ lst.end());\n    std::vector<long>::iterator it = std::unique(lst.begin(), lst.end());\n\
    \    lst.resize(std::distance(lst.begin(), it));\n    if (lst.size() <= 1) {\n\
    \        return std::nullopt;\n    }\n    return lst[1];", "    if (lst.size()\
    \ < 2) {\n        return std::nullopt;\n    }\n    long smallest = std::numeric_limits<long>::max();\n\
    \    long second_smallest = std::numeric_limits<long>::max();\n    for (auto i\
    \ : lst) {\n        if (i < smallest) {\n            second_smallest = smallest;\n\
    \            smallest = i;\n        } else if (i < second_smallest) {\n      \
    \      second_smallest = i;\n        }\n    }\n    if (second_smallest == std::numeric_limits<long>::max())\
    \ {\n        return std::nullopt;\n    }\n    return second_smallest;", "    if\
    \ (lst.size() < 2) {\n        return std::nullopt;\n    }\n    std::sort(lst.begin(),\
    \ lst.end());\n    auto it = std::unique(lst.begin(), lst.end());\n    lst.resize(std::distance(lst.begin(),\
    \ it));\n    if (lst.size() < 2) {\n        return std::nullopt;\n    }\n    return\
    \ lst[1];", "    if (lst.size() < 2) {\n        return std::nullopt;\n    }\n\
    \    std::sort(lst.begin(), lst.end());\n    auto it = std::unique(lst.begin(),\
    \ lst.end());\n    if (it == lst.end()) {\n        return std::nullopt;\n    }\n\
    \    return *(it + 1);", "    if (lst.size() < 2) {\n        return std::nullopt;\n\
    \    }\n    long min = std::numeric_limits<long>::max();\n    long second_min\
    \ = std::numeric_limits<long>::max();\n    for (long i : lst) {\n        if (i\
    \ < min) {\n            second_min = min;\n            min = i;\n        } else\
    \ if (i < second_min) {\n            second_min = i;\n        }\n    }\n    if\
    \ (second_min == std::numeric_limits<long>::max()) {\n        return std::nullopt;\n\
    \    }\n    return second_min;", "    if (lst.size() < 2) {\n        return std::nullopt;\n\
    \    }\n    std::sort(lst.begin(), lst.end());\n    auto it = std::unique(lst.begin(),\
    \ lst.end());\n    if (it == lst.end()) {\n        return std::nullopt;\n    }\n\
    \    return *(++it);", "    if (lst.size() < 2) {\n        return std::nullopt;\n\
    \    }\n    std::sort(lst.begin(), lst.end());\n    long prev = lst[0];\n    for\
    \ (int i = 1; i < lst.size(); i++) {\n        if (lst[i] != prev) {\n        \
    \    return lst[i];\n        }\n        prev = lst[i];\n    }\n    return std::nullopt;",
  "    std::sort(lst.begin(), lst.end());\n    std::optional<long> result;\n    for\
    \ (int i = 0; i < lst.size() - 1; i++) {\n        if (lst[i] != lst[i + 1]) {\n\
    \            result = lst[i + 1];\n            break;\n        }\n    }\n    return\
    \ result;", "    if (lst.size() < 2) {\n        return std::nullopt;\n    }\n\
    \    long min = lst[0];\n    long min2 = lst[1];\n    for (int i = 1; i < lst.size();\
    \ i++) {\n        if (lst[i] < min) {\n            min2 = min;\n            min\
    \ = lst[i];\n        } else if (lst[i] < min2) {\n            min2 = lst[i];\n\
    \        }\n    }\n    if (min2 == min) {\n        return std::nullopt;\n    }\n\
    \    return min2;", "    if (lst.size() < 2) {\n        return std::nullopt;\n\
    \    }\n    long min = lst[0];\n    long second_min = lst[1];\n    for (long i\
    \ = 1; i < lst.size(); i++) {\n        if (lst[i] < min) {\n            second_min\
    \ = min;\n            min = lst[i];\n        } else if (lst[i] < second_min) {\n\
    \            second_min = lst[i];\n        }\n    }\n    if (min == second_min)\
    \ {\n        return std::nullopt;\n    }\n    return second_min;", "    if (lst.size()\
    \ < 2) return std::nullopt;\n    long min = lst[0];\n    long second_min = lst[1];\n\
    \    for (int i = 1; i < lst.size(); i++) {\n        if (lst[i] < min) {\n   \
    \         second_min = min;\n            min = lst[i];\n        } else if (lst[i]\
    \ < second_min) {\n            second_min = lst[i];\n        }\n    }\n    if\
    \ (min == second_min) return std::nullopt;\n    return second_min;", "  if (lst.size()\
    \ < 2) {\n    return std::nullopt;\n  }\n  std::sort(lst.begin(), lst.end());\n\
    \  for (int i = 1; i < lst.size(); i++) {\n    if (lst[i] != lst[i - 1]) {\n \
    \     return lst[i];\n    }\n  }\n  return std::nullopt;", "    if (lst.size()\
    \ < 2) {\n        return std::nullopt;\n    }\n    std::sort(lst.begin(), lst.end());\n\
    \    for (int i = 1; i < lst.size(); i++) {\n        if (lst[i] != lst[i - 1])\
    \ {\n            return lst[i];\n        }\n    }\n    return std::nullopt;",
  "  if (lst.size() < 2) {\n    return std::nullopt;\n  }\n  std::sort(lst.begin(),\
    \ lst.end());\n  for (int i = 1; i < lst.size(); i++) {\n    if (lst[i] != lst[i\
    \ - 1]) {\n      return lst[i];\n    }\n  }\n  return std::nullopt;", "    if\
    \ (lst.size() < 2) {\n        return std::nullopt;\n    }\n    long min = lst[0];\n\
    \    long second_min = lst[1];\n    for (int i = 1; i < lst.size(); i++) {\n \
    \       if (lst[i] < min) {\n            second_min = min;\n            min =\
    \ lst[i];\n        } else if (lst[i] < second_min) {\n            second_min =\
    \ lst[i];\n        }\n    }\n    if (min == second_min) {\n        return std::nullopt;\n\
    \    }\n    return second_min;", "  if (lst.size() < 2) {\n    return std::nullopt;\n\
    \  }\n  std::sort(lst.begin(), lst.end());\n  for (int i = 1; i < lst.size();\
    \ i++) {\n    if (lst[i] != lst[i - 1]) {\n      return lst[i];\n    }\n  }\n\
    \  return std::nullopt;", "    if (lst.size() < 2) {\n        return std::nullopt;\n\
    \    }\n    std::sort(lst.begin(), lst.end());\n    for (int i = 1; i < lst.size();\
    \ i++) {\n        if (lst[i] != lst[i - 1]) {\n            return lst[i];\n  \
    \      }\n    }\n    return std::nullopt;", "    if (lst.size() < 2) {\n     \
    \   return std::nullopt;\n    }\n    std::sort(lst.begin(), lst.end());\n    for\
    \ (int i = 1; i < lst.size(); i++) {\n        if (lst[i] != lst[i - 1]) {\n  \
    \          return lst[i];\n        }\n    }\n    return std::nullopt;", "    if\
    \ (lst.size() < 2) {\n        return std::nullopt;\n    }\n    std::sort(lst.begin(),\
    \ lst.end());\n    long prev = lst[0];\n    for (long i = 1; i < lst.size(); i++)\
    \ {\n        if (lst[i] != prev) {\n            return lst[i];\n        }\n  \
    \      prev = lst[i];\n    }\n    return std::nullopt;", "    if (lst.size() <\
    \ 2) {\n        return std::nullopt;\n    }\n    std::sort(lst.begin(), lst.end());\n\
    \    for (int i = 1; i < lst.size(); i++) {\n        if (lst[i] != lst[i - 1])\
    \ {\n            return lst[i];\n        }\n    }\n    return std::nullopt;",
  "    if (lst.size() < 2) {\n        return std::nullopt;\n    }\n    std::sort(lst.begin(),\
    \ lst.end());\n    long prev = lst[0];\n    for (long i = 1; i < lst.size(); i++)\
    \ {\n        if (lst[i] != prev) {\n            return lst[i];\n        }\n  \
    \      prev = lst[i];\n    }\n    return std::nullopt;", "  if (lst.size() < 2)\
    \ {\n    return std::nullopt;\n  }\n  std::sort(lst.begin(), lst.end());\n  for\
    \ (int i = 1; i < lst.size(); i++) {\n    if (lst[i] != lst[i - 1]) {\n      return\
    \ lst[i];\n    }\n  }\n  return std::nullopt;", "    if (lst.size() < 2) {\n \
    \       return std::nullopt;\n    }\n    std::sort(lst.begin(), lst.end());\n\
    \    for (int i = 1; i < lst.size(); i++) {\n        if (lst[i] != lst[i - 1])\
    \ {\n            return lst[i];\n        }\n    }\n    return std::nullopt;",
  "    if (lst.size() < 2) {\n        return std::nullopt;\n    }\n    long min =\
    \ lst[0];\n    long min2 = lst[1];\n    for (int i = 1; i < lst.size(); i++) {\n\
    \        if (lst[i] < min) {\n            min2 = min;\n            min = lst[i];\n\
    \        } else if (lst[i] < min2) {\n            min2 = lst[i];\n        }\n\
    \    }\n    if (min2 == min) {\n        return std::nullopt;\n    }\n    return\
    \ min2;", "    if (lst.size() < 2) {\n        return std::nullopt;\n    }\n  \
    \  std::sort(lst.begin(), lst.end());\n    for (int i = 1; i < lst.size(); i++)\
    \ {\n        if (lst[i] != lst[i - 1]) {\n            return lst[i];\n       \
    \ }\n    }\n    return std::nullopt;", "    if (lst.size() <= 1) {\n        return\
    \ std::nullopt;\n    }\n    std::sort(lst.begin(), lst.end());\n    for (int i\
    \ = 1; i < lst.size(); i++) {\n        if (lst[i] != lst[i - 1]) {\n         \
    \   return lst[i];\n        }\n    }\n    return std::nullopt;", "    if (lst.size()\
    \ < 2) {\n        return std::nullopt;\n    }\n    long min = lst[0];\n    long\
    \ second_min = lst[1];\n    for (int i = 1; i < lst.size(); i++) {\n        if\
    \ (lst[i] < min) {\n            second_min = min;\n            min = lst[i];\n\
    \        } else if (lst[i] < second_min) {\n            second_min = lst[i];\n\
    \        }\n    }\n    if (min == second_min) {\n        return std::nullopt;\n\
    \    }\n    return second_min;", "    if (lst.size() < 2) {\n        return std::nullopt;\n\
    \    }\n    long min = lst[0];\n    long min2 = lst[1];\n    for (int i = 0; i\
    \ < lst.size(); i++) {\n        if (lst[i] < min) {\n            min2 = min;\n\
    \            min = lst[i];\n        } else if (lst[i] < min2) {\n            min2\
    \ = lst[i];\n        }\n    }\n    if (min2 == min) {\n        return std::nullopt;\n\
    \    }\n    return min2;", "    if (lst.size() < 2) {\n        return std::nullopt;\n\
    \    }\n    long min = lst[0];\n    long second_min = lst[1];\n    for (int i\
    \ = 1; i < lst.size(); i++) {\n        if (lst[i] < min) {\n            second_min\
    \ = min;\n            min = lst[i];\n        } else if (lst[i] < second_min) {\n\
    \            second_min = lst[i];\n        }\n    }\n    if (min == second_min)\
    \ {\n        return std::nullopt;\n    }\n    return second_min;", "    if (lst.size()\
    \ < 2) {\n        return std::nullopt;\n    }\n    std::sort(lst.begin(), lst.end());\n\
    \    auto it = std::unique(lst.begin(), lst.end());\n    if (it == lst.end())\
    \ {\n        return std::nullopt;\n    }\n    return *(++it);", "    if (lst.size()\
    \ == 0) {\n        return std::nullopt;\n    }\n    if (lst.size() == 1) {\n \
    \       return std::nullopt;\n    }\n    std::sort(lst.begin(), lst.end());\n\
    \    long min = lst[0];\n    long second_min = lst[1];\n    for (int i = 0; i\
    \ < lst.size(); i++) {\n        if (lst[i] == min) {\n            continue;\n\
    \        }\n        if (lst[i] < second_min) {\n            second_min = lst[i];\n\
    \        }\n    }\n    return second_min;", "    if (lst.size() < 2) {\n     \
    \   return std::nullopt;\n    }\n    long min = lst[0];\n    long second_min =\
    \ lst[1];\n    for (int i = 1; i < lst.size(); i++) {\n        if (lst[i] < min)\
    \ {\n            second_min = min;\n            min = lst[i];\n        } else\
    \ if (lst[i] < second_min) {\n            second_min = lst[i];\n        }\n  \
    \  }\n    if (min == second_min) {\n        return std::nullopt;\n    }\n    return\
    \ second_min;", "    if (lst.size() < 2) {\n        return std::nullopt;\n   \
    \ }\n    std::sort(lst.begin(), lst.end());\n    for (int i = 1; i < lst.size();\
    \ i++) {\n        if (lst[i] != lst[i - 1]) {\n            return lst[i];\n  \
    \      }\n    }\n    return std::nullopt;", "    if (lst.size() < 2) {\n     \
    \   return std::nullopt;\n    }\n    long min = lst[0];\n    long second_min =\
    \ lst[1];\n    for (int i = 1; i < lst.size(); i++) {\n        if (lst[i] < min)\
    \ {\n            second_min = min;\n            min = lst[i];\n        } else\
    \ if (lst[i] < second_min) {\n            second_min = lst[i];\n        }\n  \
    \  }\n    if (min == second_min) {\n        return std::nullopt;\n    }\n    return\
    \ second_min;", "    if (lst.size() < 2) {\n        return std::nullopt;\n   \
    \ }\n    std::sort(lst.begin(), lst.end());\n    auto it = std::unique(lst.begin(),\
    \ lst.end());\n    lst.resize(std::distance(lst.begin(), it));\n    if (lst.size()\
    \ < 2) {\n        return std::nullopt;\n    }\n    return lst[1];", "    if (lst.size()\
    \ < 2) {\n        return std::nullopt;\n    }\n    long min = lst[0];\n    long\
    \ next_min = lst[1];\n    for (int i = 1; i < lst.size(); i++) {\n        if (lst[i]\
    \ < min) {\n            next_min = min;\n            min = lst[i];\n        }\
    \ else if (lst[i] < next_min) {\n            next_min = lst[i];\n        }\n \
    \   }\n    if (min == next_min) {\n        return std::nullopt;\n    }\n    return\
    \ next_min;", "    if (lst.size() < 2) return std::nullopt;\n    std::sort(lst.begin(),\
    \ lst.end());\n    long prev = lst[0];\n    for (int i = 1; i < lst.size(); i++)\
    \ {\n        if (lst[i] != prev) return lst[i];\n        prev = lst[i];\n    }\n\
    \    return std::nullopt;", "    if (lst.size() < 2) {\n        return std::nullopt;\n\
    \    }\n    long min = lst[0];\n    long min2 = lst[1];\n    for (int i = 1; i\
    \ < lst.size(); i++) {\n        if (lst[i] < min) {\n            min2 = min;\n\
    \            min = lst[i];\n        } else if (lst[i] < min2) {\n            min2\
    \ = lst[i];\n        }\n    }\n    if (min2 == min) {\n        return std::nullopt;\n\
    \    }\n    return min2;", "    if (lst.size() < 2) {\n        return std::nullopt;\n\
    \    }\n    long smallest = lst[0];\n    long second_smallest = lst[1];\n    for\
    \ (int i = 1; i < lst.size(); i++) {\n        if (lst[i] < smallest) {\n     \
    \       second_smallest = smallest;\n            smallest = lst[i];\n        }\
    \ else if (lst[i] < second_smallest) {\n            second_smallest = lst[i];\n\
    \        }\n    }\n    if (smallest == second_smallest) {\n        return std::nullopt;\n\
    \    }\n    return second_smallest;", "    if (lst.size() < 2) {\n        return\
    \ std::nullopt;\n    }\n    long min = lst[0];\n    long min2 = lst[1];\n    for\
    \ (int i = 1; i < lst.size(); i++) {\n        if (lst[i] < min) {\n          \
    \  min2 = min;\n            min = lst[i];\n        } else if (lst[i] < min2) {\n\
    \            min2 = lst[i];\n        }\n    }\n    if (min2 == min) {\n      \
    \  return std::nullopt;\n    }\n    return min2;", "    if (lst.size() < 2) {\n\
    \        return std::nullopt;\n    }\n    long min = lst[0];\n    long second_min\
    \ = lst[1];\n    for (int i = 1; i < lst.size(); i++) {\n        if (lst[i] <\
    \ min) {\n            second_min = min;\n            min = lst[i];\n        }\
    \ else if (lst[i] < second_min) {\n            second_min = lst[i];\n        }\n\
    \    }\n    if (min == second_min) {\n        return std::nullopt;\n    }\n  \
    \  return second_min;", "    if (lst.size() < 2) {\n        return std::nullopt;\n\
    \    }\n    long min = lst[0];\n    long min2 = lst[1];\n    if (min2 < min) {\n\
    \        std::swap(min, min2);\n    }\n    for (int i = 2; i < lst.size(); i++)\
    \ {\n        if (lst[i] < min) {\n            min2 = min;\n            min = lst[i];\n\
    \        } else if (lst[i] < min2) {\n            min2 = lst[i];\n        }\n\
    \    }\n    if (min2 == min) {\n        return std::nullopt;\n    }\n    return\
    \ min2;", "    if (lst.size() < 2) {\n        return std::nullopt;\n    }\n  \
    \  std::sort(lst.begin(), lst.end());\n    for (int i = 1; i < lst.size(); i++)\
    \ {\n        if (lst[i] != lst[i - 1]) {\n            return lst[i];\n       \
    \ }\n    }\n    return std::nullopt;", "    std::sort(lst.begin(), lst.end());\n\
    \    if (lst.size() < 2) {\n        return std::nullopt;\n    }\n    if (lst[0]\
    \ == lst[1]) {\n        return std::nullopt;\n    }\n    return lst[1];", "  \
    \  if (lst.size() < 2) return std::nullopt;\n    std::sort(lst.begin(), lst.end());\n\
    \    for (int i = 1; i < lst.size(); i++) {\n        if (lst[i] != lst[i - 1])\
    \ return lst[i];\n    }\n    return std::nullopt;"]
stop_tokens:
- "\n}"
