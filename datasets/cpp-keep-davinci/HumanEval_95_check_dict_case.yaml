name: HumanEval_95_check_dict_case
language: cpp
prompt: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a dictionary, return\
  \ True if all keys are strings in lower \n// case or all keys are strings in upper\
  \ case, else return False.\n// The function should return False is the given dictionary\
  \ is empty.\n// Examples:\n// check_dict_case({\"a\":\"apple\", \"b\":\"banana\"\
  }) should return True.\n// check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"\
  B\":\"banana\"}) should return False.\n// check_dict_case({\"a\":\"apple\", \"8\"\
  :\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"Name\"\
  :\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n// check_dict_case({\"\
  STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\nbool check_dict_case(std::map<std::string,\
  \ std::string> dict) {\n"
tests: "}\nint main() {\n    auto candidate = check_dict_case;\n    assert(candidate((std::map<std::string,\
  \ std::string>({{\"p\", \"pineapple\"}, {\"b\", \"banana\"}}))) == (true));\n  \
  \  assert(candidate((std::map<std::string, std::string>({{\"p\", \"pineapple\"},\
  \ {\"A\", \"banana\"}, {\"B\", \"banana\"}}))) == (false));\n    assert(candidate((std::map<std::string,\
  \ std::string>({{\"p\", \"pineapple\"}, {\"5\", \"banana\"}, {\"a\", \"apple\"}})))\
  \ == (false));\n    assert(candidate((std::map<std::string, std::string>({{\"Name\"\
  , \"John\"}, {\"Age\", \"36\"}, {\"City\", \"Houston\"}}))) == (false));\n    assert(candidate((std::map<std::string,\
  \ std::string>({{\"STATE\", \"NC\"}, {\"ZIP\", \"12345\"}}))) == (true));\n    assert(candidate((std::map<std::string,\
  \ std::string>({{\"fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))) == (true));\n\
  \    assert(candidate((std::map<std::string, std::string>())) == (false));\n}\n"
completions: ["    if(dict.size() == 0) return false;\n    bool is_lower = false;\n\
    \    bool is_upper = false;\n    for(auto it = dict.begin(); it != dict.end();\
    \ it++) {\n        if(is_lower && is_upper) return false;\n        if(is_lower\
    \ && !is_upper) {\n            if(!std::all_of(it->first.begin(), it->first.end(),\
    \ ::islower)) return false;\n        }\n        if(!is_lower && is_upper) {\n\
    \            if(!std::all_of(it->first.begin(), it->first.end(), ::isupper)) return\
    \ false;\n        }\n        if(!is_lower && !is_upper) {\n            if(std::all_of(it->first.begin(),\
    \ it->first.end(), ::islower)) {\n                is_lower = true;\n         \
    \   } else if(std::all_of(it->first.begin(), it->first.end(), ::isupper)) {\n\
    \                is_upper = true;\n            } else {\n                return\
    \ false;\n            }\n        }\n    }\n    return true;", "    if(dict.size()\
    \ == 0) return false;\n    bool all_lower = true;\n    bool all_upper = true;\n\
    \    for(auto it = dict.begin(); it != dict.end(); it++) {\n        if(!isupper(it->first[0]))\
    \ all_upper = false;\n        if(!islower(it->first[0])) all_lower = false;\n\
    \    }\n    return all_lower || all_upper;", "    if(dict.size() == 0)\n     \
    \   return false;\n    bool is_lower = false;\n    bool is_upper = false;\n  \
    \  for(auto it = dict.begin(); it != dict.end(); it++) {\n        if(isupper(it->first[0]))\n\
    \            is_upper = true;\n        else\n            is_lower = true;\n  \
    \  }\n    return (is_lower && !is_upper) || (!is_lower && is_upper);", "    if(dict.size()\
    \ == 0) return false;\n    bool is_lower = false;\n    bool is_upper = false;\n\
    \    for(auto it = dict.begin(); it != dict.end(); it++) {\n        if(isupper(it->first[0]))\
    \ is_upper = true;\n        else is_lower = true;\n    }\n    return is_lower\
    \ ^ is_upper;", "    if(dict.size() == 0)\n        return false;\n    bool is_lower\
    \ = false;\n    bool is_upper = false;\n    for(auto it = dict.begin(); it !=\
    \ dict.end(); it++) {\n        if(islower(it->first[0]))\n            is_lower\
    \ = true;\n        else if(isupper(it->first[0]))\n            is_upper = true;\n\
    \        else\n            return false;\n    }\n    return is_lower ^ is_upper;",
  "    if(dict.size() == 0)\n        return false;\n    std::map<std::string, std::string>::iterator\
    \ it = dict.begin();\n    bool is_upper = false;\n    bool is_lower = false;\n\
    \    for(; it != dict.end(); it++) {\n        if(isupper(it->first[0]))\n    \
    \        is_upper = true;\n        else\n            is_lower = true;\n    }\n\
    \    return (is_upper && is_lower) ? false : true;", "    if(dict.size() == 0)\
    \ return false;\n    bool flag = false;\n    for(auto it = dict.begin(); it !=\
    \ dict.end(); it++) {\n        if(it->first[0] >= 'a' && it->first[0] <= 'z')\
    \ {\n            flag = true;\n            break;\n        }\n    }\n    for(auto\
    \ it = dict.begin(); it != dict.end(); it++) {\n        if(flag) {\n         \
    \   if(it->first[0] >= 'A' && it->first[0] <= 'Z') return false;\n        }\n\
    \        else {\n            if(it->first[0] >= 'a' && it->first[0] <= 'z') return\
    \ false;\n        }\n    }\n    return true;", "    if(dict.size() == 0)\n   \
    \     return false;\n    bool is_lower = true;\n    bool is_upper = true;\n  \
    \  for(auto it = dict.begin(); it != dict.end(); it++) {\n        if(is_lower)\
    \ {\n            is_lower = is_lower && (it->first == tolower(it->first));\n \
    \       }\n        if(is_upper) {\n            is_upper = is_upper && (it->first\
    \ == toupper(it->first));\n        }\n    }\n    return is_lower || is_upper;",
  "    if(dict.size() == 0) return false;\n    bool is_lower = false;\n    bool is_upper\
    \ = false;\n    for(auto it = dict.begin(); it != dict.end(); it++) {\n      \
    \  if(isupper(it->first[0])) {\n            is_upper = true;\n        } else {\n\
    \            is_lower = true;\n        }\n    }\n    return is_lower ^ is_upper;",
  "    if(dict.size() == 0)\n        return false;\n    std::map<std::string, std::string>::iterator\
    \ it;\n    bool is_lower = true;\n    for(it = dict.begin(); it != dict.end();\
    \ it++) {\n        if(isupper(it->first[0])) {\n            is_lower = false;\n\
    \            break;\n        }\n    }\n    for(it = dict.begin(); it != dict.end();\
    \ it++) {\n        if(is_lower && isupper(it->first[0]))\n            return false;\n\
    \        if(!is_lower && islower(it->first[0]))\n            return false;\n \
    \   }\n    return true;", "    if(dict.size() == 0) return false;\n    bool is_lower\
    \ = false;\n    bool is_upper = false;\n    for(auto it = dict.begin(); it !=\
    \ dict.end(); it++) {\n        if(islower(it->first[0])) is_lower = true;\n  \
    \      if(isupper(it->first[0])) is_upper = true;\n    }\n    return is_lower\
    \ ^ is_upper;", "    if(dict.size() == 0) return false;\n    bool is_lower = false;\n\
    \    bool is_upper = false;\n    for(auto it = dict.begin(); it != dict.end();\
    \ it++) {\n        if(isupper(it->first[0])) is_upper = true;\n        else is_lower\
    \ = true;\n    }\n    return is_lower ^ is_upper;", "    // Write your code here\n\
    \    bool is_lower = false;\n    bool is_upper = false;\n    for (auto it = dict.begin();\
    \ it != dict.end(); it++) {\n        if (isupper(it->first[0])) {\n          \
    \  is_upper = true;\n        } else {\n            is_lower = true;\n        }\n\
    \    }\n    return is_lower ^ is_upper;", "    if(dict.size() == 0) return false;\n\
    \    bool is_lower = false;\n    bool is_upper = false;\n    for(auto it = dict.begin();\
    \ it != dict.end(); it++) {\n        if(islower(it->first[0])) is_lower = true;\n\
    \        if(isupper(it->first[0])) is_upper = true;\n    }\n    return is_lower\
    \ ^ is_upper;", "\tif (dict.size() == 0)\n\t\treturn false;\n\tbool is_upper =\
    \ false;\n\tbool is_lower = false;\n\tfor (auto it = dict.begin(); it != dict.end();\
    \ it++) {\n\t\tif (isupper(it->first[0]))\n\t\t\tis_upper = true;\n\t\telse\n\t\
    \t\tis_lower = true;\n\t}\n\treturn is_upper ^ is_lower;", "    if(dict.size()\
    \ == 0)\n        return false;\n    bool is_lower = false;\n    bool is_upper\
    \ = false;\n    for(auto it = dict.begin(); it != dict.end(); it++) {\n      \
    \  if(isupper(it->first[0]))\n            is_upper = true;\n        else\n   \
    \         is_lower = true;\n    }\n    return is_lower ^ is_upper;", "    // Write\
    \ your code here\n    if(dict.size() == 0)\n        return false;\n    int upper\
    \ = 0, lower = 0;\n    for(auto it = dict.begin(); it != dict.end(); it++) {\n\
    \        if(isupper(it->first[0]))\n            upper++;\n        else if(islower(it->first[0]))\n\
    \            lower++;\n        else\n            return false;\n    }\n    if(upper\
    \ == 0 || lower == 0)\n        return true;\n    return false;", "    if(dict.size()\
    \ == 0) return false;\n    bool is_lower = false;\n    bool is_upper = false;\n\
    \    for(auto it = dict.begin(); it != dict.end(); it++) {\n        if(isupper(it->first[0]))\
    \ is_upper = true;\n        else is_lower = true;\n    }\n    return is_lower\
    \ ^ is_upper;", "    if(dict.size() == 0)\n        return false;\n    bool is_lower\
    \ = false;\n    bool is_upper = false;\n    for(auto it = dict.begin(); it !=\
    \ dict.end(); it++) {\n        if(isupper(it->first[0]))\n            is_upper\
    \ = true;\n        else\n            is_lower = true;\n    }\n    return is_lower\
    \ ^ is_upper;", "    if(dict.size() == 0) return false;\n    bool is_upper = true;\n\
    \    bool is_lower = true;\n    for(auto it = dict.begin(); it != dict.end();\
    \ it++) {\n        if(is_upper && !isupper(it->first[0])) is_upper = false;\n\
    \        if(is_lower && !islower(it->first[0])) is_lower = false;\n    }\n   \
    \ return is_upper || is_lower;", "    std::vector<std::string> keys;\n    for\
    \ (auto it = dict.begin(); it != dict.end(); it++) {\n        keys.push_back(it->first);\n\
    \    }\n    if (keys.size() == 0) {\n        return false;\n    }\n    bool is_lower\
    \ = islower(keys[0][0]);\n    for (auto key : keys) {\n        if (islower(key[0])\
    \ != is_lower) {\n            return false;\n        }\n    }\n    return true;",
  "    if(dict.size() == 0) return false;\n    bool lower = false;\n    bool upper\
    \ = false;\n    for(auto it = dict.begin(); it != dict.end(); it++) {\n      \
    \  if(islower(it->first[0])) lower = true;\n        else upper = true;\n    }\n\
    \    return lower ^ upper;", "    if(dict.size() == 0) return false;\n    bool\
    \ is_lower = false;\n    bool is_upper = false;\n    for(auto it = dict.begin();\
    \ it != dict.end(); it++) {\n        if(isupper(it->first[0])) {\n           \
    \ is_upper = true;\n        } else {\n            is_lower = true;\n        }\n\
    \    }\n    return (is_lower && !is_upper) || (!is_lower && is_upper);", "   \
    \ if(dict.size() == 0) return false;\n    bool all_lower = true;\n    bool all_upper\
    \ = true;\n    for(auto it = dict.begin(); it != dict.end(); it++) {\n       \
    \ if(it->first[0] >= 'a' && it->first[0] <= 'z') {\n            all_upper = false;\n\
    \        } else if(it->first[0] >= 'A' && it->first[0] <= 'Z') {\n           \
    \ all_lower = false;\n        } else {\n            return false;\n        }\n\
    \    }\n    return all_lower || all_upper;", "    if(dict.size() == 0)\n     \
    \   return false;\n    bool is_lower = false;\n    bool is_upper = false;\n  \
    \  for(auto it = dict.begin(); it != dict.end(); it++) {\n        if(isupper(it->first[0]))\n\
    \            is_upper = true;\n        else\n            is_lower = true;\n  \
    \  }\n    return is_lower ^ is_upper;", "    if(dict.size() == 0)\n        return\
    \ false;\n    bool isLower = true;\n    bool isUpper = true;\n    for(auto it\
    \ = dict.begin(); it != dict.end(); it++) {\n        if(islower(it->first[0]))\n\
    \            isUpper = false;\n        else if(isupper(it->first[0]))\n      \
    \      isLower = false;\n        else\n            return false;\n    }\n    return\
    \ isLower || isUpper;", "    if(dict.size() == 0)\n        return false;\n   \
    \ bool is_upper = false;\n    bool is_lower = false;\n    for(auto it = dict.begin();\
    \ it != dict.end(); it++) {\n        if(isupper(it->first[0]))\n            is_upper\
    \ = true;\n        else\n            is_lower = true;\n    }\n    return is_upper\
    \ ^ is_lower;", "    if(dict.size() == 0) return false;\n    bool is_lower = false;\n\
    \    bool is_upper = false;\n    for(auto it = dict.begin(); it != dict.end();\
    \ it++) {\n        if(islower(it->first[0])) {\n            is_lower = true;\n\
    \        } else if(isupper(it->first[0])) {\n            is_upper = true;\n  \
    \      } else {\n            return false;\n        }\n    }\n    return is_lower\
    \ ^ is_upper;", "    if(dict.size() == 0)\n        return false;\n    bool is_lower\
    \ = false;\n    bool is_upper = false;\n    for(auto it = dict.begin(); it !=\
    \ dict.end(); it++) {\n        if(islower(it->first[0]))\n            is_lower\
    \ = true;\n        else if(isupper(it->first[0]))\n            is_upper = true;\n\
    \        else\n            return false;\n    }\n    return is_lower ^ is_upper;",
  "    if(dict.size() == 0) return false;\n    bool is_lower = false;\n    bool is_upper\
    \ = false;\n    for(auto it = dict.begin(); it != dict.end(); it++) {\n      \
    \  if(isupper(it->first[0])) {\n            is_upper = true;\n        } else {\n\
    \            is_lower = true;\n        }\n    }\n    return is_lower ^ is_upper;",
  "    if(dict.size() == 0)\n        return false;\n    std::map<std::string, std::string>::iterator\
    \ it = dict.begin();\n    bool is_lower = false;\n    bool is_upper = false;\n\
    \    for(; it != dict.end(); it++) {\n        if(isupper(it->first[0]))\n    \
    \        is_upper = true;\n        else if(islower(it->first[0]))\n          \
    \  is_lower = true;\n        else\n            return false;\n    }\n    if(is_lower\
    \ && is_upper)\n        return false;\n    return true;", "    if(dict.size()\
    \ == 0)\n        return false;\n    bool is_lower = false;\n    bool is_upper\
    \ = false;\n    for(auto it = dict.begin(); it != dict.end(); it++) {\n      \
    \  if(isupper(it->first[0]))\n            is_upper = true;\n        else\n   \
    \         is_lower = true;\n    }\n    return is_lower ^ is_upper;", "  if (dict.empty())\
    \ {\n    return false;\n  }\n  bool all_lower = true;\n  bool all_upper = true;\n\
    \  for (auto it = dict.begin(); it != dict.end(); ++it) {\n    if (it->first.size()\
    \ == 0) {\n      return false;\n    }\n    for (int i = 0; i < it->first.size();\
    \ ++i) {\n      if (islower(it->first[i])) {\n        all_upper = false;\n   \
    \   } else if (isupper(it->first[i])) {\n        all_lower = false;\n      } else\
    \ {\n        return false;\n      }\n    }\n  }\n  return all_lower || all_upper;",
  "  // your code here\n  if(dict.size()==0)\n    return false;\n  bool flag=false;\n\
    \  for(auto it=dict.begin();it!=dict.end();it++)\n  {\n    if(islower(it->first[0]))\n\
    \    {\n      flag=true;\n      break;\n    }\n  }\n  for(auto it=dict.begin();it!=dict.end();it++)\n\
    \  {\n    if(flag)\n    {\n      if(!islower(it->first[0]))\n        return false;\n\
    \    }\n    else\n    {\n      if(islower(it->first[0]))\n        return false;\n\
    \    }\n  }\n  return true;", "    if(dict.size() == 0)\n        return false;\n\
    \    bool is_lower = false;\n    bool is_upper = false;\n    for(auto it = dict.begin();\
    \ it != dict.end(); it++) {\n        if(isupper(it->first[0]))\n            is_upper\
    \ = true;\n        else\n            is_lower = true;\n    }\n    return is_lower\
    \ ^ is_upper;", "    if(dict.size() == 0) return false;\n    bool is_lower = false;\n\
    \    bool is_upper = false;\n    for(auto it = dict.begin(); it != dict.end();\
    \ it++) {\n        if(isupper(it->first[0])) is_upper = true;\n        else is_lower\
    \ = true;\n    }\n    return is_lower ^ is_upper;", "    if(dict.size() == 0)\
    \ return false;\n    bool is_lower = false;\n    bool is_upper = false;\n    for(auto\
    \ it = dict.begin(); it != dict.end(); it++) {\n        if(isupper(it->first[0]))\
    \ is_upper = true;\n        else is_lower = true;\n    }\n    return is_lower\
    \ ^ is_upper;", "    if(dict.size() == 0)\n        return false;\n    bool is_lower\
    \ = false;\n    bool is_upper = false;\n    for(auto it = dict.begin(); it !=\
    \ dict.end(); it++) {\n        if(isupper(it->first[0]))\n            is_upper\
    \ = true;\n        else\n            is_lower = true;\n    }\n    return is_lower\
    \ ^ is_upper;", "    if(dict.size() == 0)\n        return false;\n    bool is_lower\
    \ = false;\n    bool is_upper = false;\n    for(auto it = dict.begin(); it !=\
    \ dict.end(); it++) {\n        if(islower(it->first[0]))\n            is_lower\
    \ = true;\n        else if(isupper(it->first[0]))\n            is_upper = true;\n\
    \        else\n            return false;\n    }\n    return is_lower ^ is_upper;",
  "    if(dict.size() == 0) return false;\n    bool is_lower = false;\n    bool is_upper\
    \ = false;\n    for(auto it = dict.begin(); it != dict.end(); it++) {\n      \
    \  if(isupper(it->first[0])) is_upper = true;\n        else is_lower = true;\n\
    \    }\n    return is_lower ^ is_upper;", "    if(dict.size() == 0) return false;\n\
    \    bool is_lower = false;\n    bool is_upper = false;\n    for(auto it = dict.begin();\
    \ it != dict.end(); it++) {\n        if(islower(it->first[0])) is_lower = true;\n\
    \        if(isupper(it->first[0])) is_upper = true;\n    }\n    return is_lower\
    \ ^ is_upper;", "    // Write your code here\n    if(dict.size()==0)\n       \
    \ return false;\n    int lower=0,upper=0;\n    for(auto it=dict.begin();it!=dict.end();it++)\n\
    \    {\n        if(isupper(it->first[0]))\n            upper++;\n        else\n\
    \            lower++;\n    }\n    if(lower==0 || upper==0)\n        return true;\n\
    \    return false;", "    if(dict.size() == 0) return false;\n    bool is_lower_case\
    \ = false;\n    bool is_upper_case = false;\n    for(auto it = dict.begin(); it\
    \ != dict.end(); it++) {\n        if(isupper(it->first[0])) {\n            is_upper_case\
    \ = true;\n        } else {\n            is_lower_case = true;\n        }\n  \
    \  }\n    return is_lower_case ^ is_upper_case;", "    if(dict.size() == 0) return\
    \ false;\n    bool is_lower = false;\n    bool is_upper = false;\n    for(auto\
    \ it = dict.begin(); it != dict.end(); it++) {\n        if(isupper(it->first[0]))\
    \ is_upper = true;\n        else is_lower = true;\n    }\n    return is_lower\
    \ ^ is_upper;", "    if(dict.size() == 0) return false;\n    bool is_lower = false;\n\
    \    bool is_upper = false;\n    for(auto it = dict.begin(); it != dict.end();\
    \ it++) {\n        if(isupper(it->first[0])) is_upper = true;\n        else is_lower\
    \ = true;\n    }\n    return is_lower ^ is_upper;", "    if(dict.size() == 0)\n\
    \        return false;\n    bool is_lower = false;\n    bool is_upper = false;\n\
    \    for(auto it = dict.begin(); it != dict.end(); it++) {\n        std::string\
    \ key = it->first;\n        if(isupper(key[0]))\n            is_upper = true;\n\
    \        else\n            is_lower = true;\n    }\n    return is_lower ^ is_upper;",
  "    if(dict.size() == 0)\n        return false;\n    bool is_lower = true;\n  \
    \  bool is_upper = true;\n    for(auto it = dict.begin(); it != dict.end(); it++)\
    \ {\n        if(!isupper(it->first[0]))\n            is_upper = false;\n     \
    \   if(!islower(it->first[0]))\n            is_lower = false;\n    }\n    return\
    \ is_lower || is_upper;", "    if(dict.size() == 0) return false;\n    bool lower\
    \ = false;\n    bool upper = false;\n    for(auto it = dict.begin(); it != dict.end();\
    \ it++) {\n        if(islower(it->first[0])) lower = true;\n        else upper\
    \ = true;\n    }\n    return lower ^ upper;", "    if(dict.size() == 0)\n    \
    \    return false;\n    bool upper = true;\n    bool lower = true;\n    for(auto\
    \ it = dict.begin(); it != dict.end(); it++) {\n        if(islower(it->first[0]))\n\
    \            upper = false;\n        else\n            lower = false;\n    }\n\
    \    return upper || lower;", "    if(dict.size() == 0)\n        return false;\n\
    \    bool is_lower = false;\n    bool is_upper = false;\n    for(auto it = dict.begin();\
    \ it != dict.end(); it++) {\n        if(islower(it->first[0]))\n            is_lower\
    \ = true;\n        else if(isupper(it->first[0]))\n            is_upper = true;\n\
    \        else\n            return false;\n    }\n    return is_lower ^ is_upper;",
  "    if(dict.size() == 0)\n        return false;\n    bool is_lower = false;\n \
    \   bool is_upper = false;\n    for(auto it = dict.begin(); it != dict.end();\
    \ it++) {\n        if(isupper(it->first[0]))\n            is_upper = true;\n \
    \       else\n            is_lower = true;\n    }\n    return is_lower ^ is_upper;",
  "    if(dict.size() == 0) return false;\n    bool is_lower = false;\n    bool is_upper\
    \ = false;\n    for(auto it = dict.begin(); it != dict.end(); it++) {\n      \
    \  if(islower(it->first[0])) is_lower = true;\n        if(isupper(it->first[0]))\
    \ is_upper = true;\n    }\n    return (is_lower && !is_upper) || (!is_lower &&\
    \ is_upper);", "    if(dict.size() == 0) return false;\n    bool all_lower = true;\n\
    \    bool all_upper = true;\n    for(auto it = dict.begin(); it != dict.end();\
    \ it++) {\n        if(!isupper(it->first[0])) all_upper = false;\n        if(!islower(it->first[0]))\
    \ all_lower = false;\n    }\n    return all_lower || all_upper;", "    if(dict.size()\
    \ == 0)\n        return false;\n    std::map<std::string, std::string>::iterator\
    \ it = dict.begin();\n    bool is_lower = islower(it->first[0]);\n    for(; it\
    \ != dict.end(); it++) {\n        if(islower(it->first[0]) != is_lower)\n    \
    \        return false;\n    }\n    return true;", "    if(dict.size()==0)\n  \
    \      return false;\n    std::map<std::string, std::string>::iterator it;\n \
    \   bool is_lower = true;\n    bool is_upper = true;\n    for(it=dict.begin();\
    \ it!=dict.end(); it++) {\n        if(is_lower) {\n            if(!islower(it->first[0]))\n\
    \                is_lower = false;\n        }\n        if(is_upper) {\n      \
    \      if(!isupper(it->first[0]))\n                is_upper = false;\n       \
    \ }\n    }\n    if(is_lower || is_upper)\n        return true;\n    return false;",
  "    if(dict.size() == 0)\n        return false;\n    bool all_lower = true;\n \
    \   bool all_upper = true;\n    for(auto it = dict.begin(); it != dict.end();\
    \ it++) {\n        if(!isupper(it->first[0]))\n            all_upper = false;\n\
    \        if(!islower(it->first[0]))\n            all_lower = false;\n    }\n \
    \   return all_lower || all_upper;", "    if(dict.size() == 0) return false;\n\
    \    bool is_lower = false;\n    bool is_upper = false;\n    for(auto it = dict.begin();\
    \ it != dict.end(); it++) {\n        if(islower(it->first[0])) is_lower = true;\n\
    \        if(isupper(it->first[0])) is_upper = true;\n    }\n    return is_lower\
    \ ^ is_upper;", "    if(dict.size() == 0) return false;\n    bool is_lower = false;\n\
    \    bool is_upper = false;\n    for(auto it = dict.begin(); it != dict.end();\
    \ it++) {\n        if(isupper(it->first[0])) is_upper = true;\n        else is_lower\
    \ = true;\n    }\n    return is_lower ^ is_upper;", "    if(dict.size() == 0)\
    \ return false;\n    bool is_lower = true;\n    bool is_upper = true;\n    for(auto\
    \ it = dict.begin(); it != dict.end(); it++) {\n        if(is_lower && !islower(it->first[0]))\
    \ is_lower = false;\n        if(is_upper && !isupper(it->first[0])) is_upper =\
    \ false;\n    }\n    return is_lower || is_upper;", "    if(dict.size() == 0)\n\
    \        return false;\n    std::map<std::string, std::string>::iterator it;\n\
    \    bool is_lower = false;\n    bool is_upper = false;\n    for(it = dict.begin();\
    \ it != dict.end(); it++) {\n        if(islower(it->first[0]))\n            is_lower\
    \ = true;\n        else if(isupper(it->first[0]))\n            is_upper = true;\n\
    \        else\n            return false;\n    }\n    if(is_lower && is_upper)\n\
    \        return false;\n    return true;", "    if(dict.size()==0)\n        return\
    \ false;\n    bool flag=true;\n    for(auto it=dict.begin();it!=dict.end();it++)\n\
    \    {\n        if(isupper(it->first[0]))\n        {\n            for(int i=0;i<it->first.length();i++)\n\
    \            {\n                if(islower(it->first[i]))\n                {\n\
    \                    flag=false;\n                    break;\n               \
    \ }\n            }\n        }\n        else\n        {\n            for(int i=0;i<it->first.length();i++)\n\
    \            {\n                if(isupper(it->first[i]))\n                {\n\
    \                    flag=false;\n                    break;\n               \
    \ }\n            }\n        }\n    }\n    return flag;", "    if(dict.size() ==\
    \ 0) return false;\n    bool all_upper = true;\n    bool all_lower = true;\n \
    \   for(auto it = dict.begin(); it != dict.end(); it++) {\n        if(!isupper(it->first[0]))\
    \ all_upper = false;\n        if(!islower(it->first[0])) all_lower = false;\n\
    \    }\n    return all_upper || all_lower;", "    if(dict.size() == 0)\n     \
    \   return false;\n    bool is_lower = false;\n    bool is_upper = false;\n  \
    \  for(auto it = dict.begin(); it != dict.end(); it++) {\n        if(islower(it->first[0]))\n\
    \            is_lower = true;\n        else if(isupper(it->first[0]))\n      \
    \      is_upper = true;\n        else\n            return false;\n    }\n    return\
    \ is_lower ^ is_upper;", "    if(dict.size() == 0)\n        return false;\n  \
    \  bool is_lower = false;\n    bool is_upper = false;\n    for(auto it = dict.begin();\
    \ it != dict.end(); it++) {\n        if(isupper(it->first[0]))\n            is_upper\
    \ = true;\n        else\n            is_lower = true;\n    }\n    return (is_lower\
    \ && !is_upper) || (!is_lower && is_upper);", "    bool upper = false;\n    bool\
    \ lower = false;\n    for (auto it = dict.begin(); it != dict.end(); it++) {\n\
    \        if (it->first[0] >= 'A' && it->first[0] <= 'Z') {\n            upper\
    \ = true;\n        }\n        if (it->first[0] >= 'a' && it->first[0] <= 'z')\
    \ {\n            lower = true;\n        }\n    }\n    if (upper && lower) {\n\
    \        return false;\n    }\n    return true;", "    if(dict.size() == 0) return\
    \ false;\n    bool is_lower = false;\n    bool is_upper = false;\n    for(auto\
    \ it = dict.begin(); it != dict.end(); it++) {\n        if(islower(it->first[0]))\
    \ is_lower = true;\n        if(isupper(it->first[0])) is_upper = true;\n    }\n\
    \    return is_lower ^ is_upper;", "    bool is_lower = false;\n    bool is_upper\
    \ = false;\n    for (auto it = dict.begin(); it != dict.end(); it++) {\n     \
    \   if (it->first.length() == 0) {\n            return false;\n        }\n   \
    \     if (isupper(it->first[0])) {\n            is_upper = true;\n        } else\
    \ if (islower(it->first[0])) {\n            is_lower = true;\n        } else {\n\
    \            return false;\n        }\n    }\n    return is_lower ^ is_upper;",
  "    if(dict.size() == 0)\n        return false;\n    bool is_lower = false;\n \
    \   bool is_upper = false;\n    for(auto it = dict.begin(); it != dict.end();\
    \ it++) {\n        if(isupper(it->first[0]))\n            is_upper = true;\n \
    \       else\n            is_lower = true;\n    }\n    return is_lower ^ is_upper;",
  "    if(dict.size() == 0)\n        return false;\n    bool is_upper = false;\n \
    \   bool is_lower = false;\n    for(auto it = dict.begin(); it != dict.end();\
    \ it++) {\n        if(isupper(it->first[0]))\n            is_upper = true;\n \
    \       else if(islower(it->first[0]))\n            is_lower = true;\n       \
    \ else\n            return false;\n    }\n    return is_upper ^ is_lower;", " \
    \   if(dict.size() == 0) return false;\n    bool is_lower = false;\n    bool is_upper\
    \ = false;\n    for(auto it = dict.begin(); it != dict.end(); it++) {\n      \
    \  if(islower(it->first[0])) is_lower = true;\n        if(isupper(it->first[0]))\
    \ is_upper = true;\n    }\n    return is_lower ^ is_upper;", "    std::map<std::string,\
    \ std::string>::iterator it;\n    bool all_lower = true;\n    bool all_upper =\
    \ true;\n    for (it = dict.begin(); it != dict.end(); it++) {\n        if (it->first[0]\
    \ >= 'a' && it->first[0] <= 'z') {\n            all_upper = false;\n        }\
    \ else if (it->first[0] >= 'A' && it->first[0] <= 'Z') {\n            all_lower\
    \ = false;\n        } else {\n            return false;\n        }\n    }\n  \
    \  return all_lower || all_upper;", "    if(dict.size() == 0)\n        return\
    \ false;\n    bool is_lower = false;\n    bool is_upper = false;\n    for(auto\
    \ it = dict.begin(); it != dict.end(); it++) {\n        if(isupper(it->first[0]))\n\
    \            is_upper = true;\n        else\n            is_lower = true;\n  \
    \  }\n    return is_lower ^ is_upper;", "    if(dict.size() == 0) return false;\n\
    \    bool is_lower = false;\n    bool is_upper = false;\n    for(auto it = dict.begin();\
    \ it != dict.end(); it++) {\n        if(isupper(it->first[0])) is_upper = true;\n\
    \        else is_lower = true;\n    }\n    return is_lower ^ is_upper;", "  if\
    \ (dict.empty()) {\n    return false;\n  }\n  bool is_lower = false;\n  bool is_upper\
    \ = false;\n  for (auto const& x : dict) {\n    if (isupper(x.first[0])) {\n \
    \     is_upper = true;\n    } else {\n      is_lower = true;\n    }\n  }\n  return\
    \ is_lower ^ is_upper;", "    if(dict.size() == 0)\n        return false;\n  \
    \  bool upper = false;\n    bool lower = false;\n    for(auto it = dict.begin();\
    \ it != dict.end(); it++) {\n        if(isupper(it->first[0]))\n            upper\
    \ = true;\n        else\n            lower = true;\n    }\n    return upper ^\
    \ lower;", "    if(dict.size() == 0) return false;\n    bool is_lower = false;\n\
    \    bool is_upper = false;\n    for(auto it = dict.begin(); it != dict.end();\
    \ it++) {\n        if(isupper(it->first[0])) is_upper = true;\n        else is_lower\
    \ = true;\n    }\n    return is_lower ^ is_upper;", "    if(dict.size() == 0)\n\
    \        return false;\n    bool is_lower = false;\n    bool is_upper = false;\n\
    \    for(auto it = dict.begin(); it != dict.end(); it++) {\n        if(islower(it->first[0]))\n\
    \            is_lower = true;\n        else if(isupper(it->first[0]))\n      \
    \      is_upper = true;\n        else\n            return false;\n    }\n    return\
    \ is_lower ^ is_upper;", "    if(dict.size() == 0) return false;\n    bool is_lower\
    \ = false;\n    bool is_upper = false;\n    for(auto it = dict.begin(); it !=\
    \ dict.end(); it++) {\n        if(isupper(it->first[0])) {\n            is_upper\
    \ = true;\n        } else {\n            is_lower = true;\n        }\n    }\n\
    \    return is_lower ^ is_upper;", "    if(dict.size() == 0) return false;\n \
    \   bool is_lower = false;\n    bool is_upper = false;\n    for(auto it = dict.begin();\
    \ it != dict.end(); it++) {\n        if(islower(it->first[0])) is_lower = true;\n\
    \        if(isupper(it->first[0])) is_upper = true;\n    }\n    return is_lower\
    \ ^ is_upper;", "    if(dict.size() == 0)\n        return false;\n    bool is_lower\
    \ = false;\n    bool is_upper = false;\n    for(auto it = dict.begin(); it !=\
    \ dict.end(); it++) {\n        if(islower(it->first[0]))\n            is_lower\
    \ = true;\n        else if(isupper(it->first[0]))\n            is_upper = true;\n\
    \        else\n            return false;\n    }\n    return is_lower ^ is_upper;",
  "    if(dict.size() == 0)\n        return false;\n    bool is_lower = false;\n \
    \   bool is_upper = false;\n    for(auto it = dict.begin(); it != dict.end();\
    \ it++) {\n        if(islower(it->first[0]))\n            is_lower = true;\n \
    \       else if(isupper(it->first[0]))\n            is_upper = true;\n       \
    \ else\n            return false;\n    }\n    return is_lower ^ is_upper;", " \
    \   if(dict.size() == 0)\n        return false;\n    bool is_lower = false;\n\
    \    bool is_upper = false;\n    for(auto it = dict.begin(); it != dict.end();\
    \ it++) {\n        if(islower(it->first[0]))\n            is_lower = true;\n \
    \       else if(isupper(it->first[0]))\n            is_upper = true;\n       \
    \ else\n            return false;\n    }\n    return is_lower ^ is_upper;", " \
    \   if(dict.size() == 0) return false;\n    bool is_lower = false;\n    bool is_upper\
    \ = false;\n    for(auto it = dict.begin(); it != dict.end(); it++) {\n      \
    \  if(islower(it->first[0])) is_lower = true;\n        if(isupper(it->first[0]))\
    \ is_upper = true;\n    }\n    return is_lower ^ is_upper;", "    if(dict.size()\
    \ == 0)\n        return false;\n    bool is_lower = false;\n    bool is_upper\
    \ = false;\n    for(auto it = dict.begin(); it != dict.end(); it++) {\n      \
    \  if(is_lower == false && is_upper == false) {\n            if(islower(it->first[0]))\n\
    \                is_lower = true;\n            else if(isupper(it->first[0]))\n\
    \                is_upper = true;\n        }\n        else if(is_lower == true\
    \ && is_upper == false) {\n            if(isupper(it->first[0]))\n           \
    \     return false;\n        }\n        else if(is_lower == false && is_upper\
    \ == true) {\n            if(islower(it->first[0]))\n                return false;\n\
    \        }\n    }\n    return true;", "    if(dict.size() == 0)\n        return\
    \ false;\n    bool is_lower = false;\n    bool is_upper = false;\n    for(auto\
    \ it = dict.begin(); it != dict.end(); it++) {\n        if(isupper(it->first[0]))\n\
    \            is_upper = true;\n        else\n            is_lower = true;\n  \
    \  }\n    return is_lower ^ is_upper;", "    // Write your code here\n    if(dict.size()==0)\n\
    \        return false;\n    bool flag=true;\n    for(auto it=dict.begin();it!=dict.end();it++)\n\
    \    {\n        if(it->first[0]>=65 && it->first[0]<=90)\n        {\n        \
    \    flag=false;\n            break;\n        }\n    }\n    if(flag)\n       \
    \ return true;\n    flag=true;\n    for(auto it=dict.begin();it!=dict.end();it++)\n\
    \    {\n        if(it->first[0]>=97 && it->first[0]<=122)\n        {\n       \
    \     flag=false;\n            break;\n        }\n    }\n    if(flag)\n      \
    \  return true;\n    return false;", "    if(dict.size() == 0) return false;\n\
    \    bool is_lower = true;\n    bool is_upper = true;\n    for(auto it = dict.begin();\
    \ it != dict.end(); it++) {\n        if(is_lower && !islower(it->first[0])) is_lower\
    \ = false;\n        if(is_upper && !isupper(it->first[0])) is_upper = false;\n\
    \    }\n    return is_lower || is_upper;", "    if(dict.size() == 0)\n       \
    \ return false;\n    bool is_lower = false;\n    bool is_upper = false;\n    for(auto\
    \ it = dict.begin(); it != dict.end(); it++) {\n        if(islower(it->first[0]))\n\
    \            is_lower = true;\n        else if(isupper(it->first[0]))\n      \
    \      is_upper = true;\n        else\n            return false;\n    }\n    return\
    \ is_lower ^ is_upper;", "    if(dict.size() == 0) return false;\n    bool is_upper\
    \ = false;\n    bool is_lower = false;\n    for(auto it = dict.begin(); it !=\
    \ dict.end(); it++) {\n        if(isupper(it->first[0])) is_upper = true;\n  \
    \      if(islower(it->first[0])) is_lower = true;\n    }\n    return is_upper\
    \ ^ is_lower;", "    if(dict.size() == 0) return false;\n    bool all_lower =\
    \ true;\n    bool all_upper = true;\n    for(auto it = dict.begin(); it != dict.end();\
    \ it++) {\n        if(!isupper(it->first[0])) all_upper = false;\n        if(!islower(it->first[0]))\
    \ all_lower = false;\n    }\n    return all_lower || all_upper;", "    if(dict.size()\
    \ == 0) return false;\n    bool is_lower = false;\n    bool is_upper = false;\n\
    \    for(auto it = dict.begin(); it != dict.end(); it++) {\n        if(isupper(it->first[0]))\
    \ is_upper = true;\n        else is_lower = true;\n    }\n    return is_lower\
    \ ^ is_upper;", "    if(dict.size() == 0) return false;\n    bool is_lower = false;\n\
    \    bool is_upper = false;\n    for(auto it = dict.begin(); it != dict.end();\
    \ it++) {\n        if(isupper(it->first[0])) is_upper = true;\n        else is_lower\
    \ = true;\n    }\n    return is_lower ^ is_upper;", "    if(dict.size() == 0)\n\
    \        return false;\n    bool is_lower = true;\n    for(auto it = dict.begin();\
    \ it != dict.end(); it++) {\n        if(isupper(it->first[0])) {\n           \
    \ is_lower = false;\n            break;\n        }\n    }\n    for(auto it = dict.begin();\
    \ it != dict.end(); it++) {\n        if(is_lower && isupper(it->first[0]))\n \
    \           return false;\n        if(!is_lower && islower(it->first[0]))\n  \
    \          return false;\n    }\n    return true;", "    bool all_lower = true;\n\
    \    bool all_upper = true;\n    for (auto it = dict.begin(); it != dict.end();\
    \ it++) {\n        all_lower = all_lower && (it->first == std::string(it->first.size(),\
    \ std::tolower(it->first[0])));\n        all_upper = all_upper && (it->first ==\
    \ std::string(it->first.size(), std::toupper(it->first[0])));\n    }\n    return\
    \ all_lower || all_upper;", "    if(dict.size() == 0)\n        return false;\n\
    \    bool is_lower = false;\n    bool is_upper = false;\n    for(auto it = dict.begin();\
    \ it != dict.end(); it++) {\n        if(isupper(it->first[0]))\n            is_upper\
    \ = true;\n        else\n            is_lower = true;\n    }\n    return is_lower\
    \ ^ is_upper;", "    if(dict.size() == 0)\n        return false;\n    bool is_lower\
    \ = false;\n    bool is_upper = false;\n    for(auto it = dict.begin(); it !=\
    \ dict.end(); it++) {\n        if(isupper(it->first[0]))\n            is_upper\
    \ = true;\n        else\n            is_lower = true;\n    }\n    return is_lower\
    \ ^ is_upper;", "    bool lower = true;\n    bool upper = true;\n    for (auto\
    \ it = dict.begin(); it != dict.end(); it++) {\n        if (islower(it->first[0]))\
    \ {\n            upper = false;\n        } else if (isupper(it->first[0])) {\n\
    \            lower = false;\n        } else {\n            return false;\n   \
    \     }\n    }\n    return lower || upper;", "    if(dict.size() == 0) return\
    \ false;\n    bool lower = false;\n    bool upper = false;\n    for(auto it =\
    \ dict.begin(); it != dict.end(); it++) {\n        if(islower(it->first[0])) lower\
    \ = true;\n        else upper = true;\n    }\n    return !(lower && upper);",
  "    // Write your code here\n    if(dict.size()==0)\n        return false;\n  \
    \  int upper=0,lower=0;\n    for(auto i:dict)\n    {\n        if(isupper(i.first[0]))\n\
    \            upper++;\n        else\n            lower++;\n    }\n    if(upper==0\
    \ || lower==0)\n        return true;\n    return false;", "    if(dict.size()\
    \ == 0) return false;\n    bool is_lower = false;\n    bool is_upper = false;\n\
    \    for(auto it = dict.begin(); it != dict.end(); it++) {\n        if(isupper(it->first[0]))\
    \ is_upper = true;\n        else is_lower = true;\n    }\n    return is_lower\
    \ ^ is_upper;", "    if(dict.size() == 0)\n        return false;\n    bool is_lower\
    \ = false;\n    bool is_upper = false;\n    for(auto it = dict.begin(); it !=\
    \ dict.end(); it++) {\n        if(islower(it->first[0]))\n            is_lower\
    \ = true;\n        else if(isupper(it->first[0]))\n            is_upper = true;\n\
    \        else\n            return false;\n    }\n    return is_lower ^ is_upper;",
  "    if(dict.size() == 0)\n        return false;\n    bool all_lower = true;\n \
    \   bool all_upper = true;\n    for(auto it = dict.begin(); it != dict.end();\
    \ it++) {\n        if(!isupper(it->first[0]))\n            all_upper = false;\n\
    \        if(!islower(it->first[0]))\n            all_lower = false;\n    }\n \
    \   return all_lower || all_upper;", "    if(dict.size() == 0)\n        return\
    \ false;\n    bool is_lower = false;\n    bool is_upper = false;\n    for(auto\
    \ it = dict.begin(); it != dict.end(); it++) {\n        if(islower(it->first[0]))\n\
    \            is_lower = true;\n        else if(isupper(it->first[0]))\n      \
    \      is_upper = true;\n        else\n            return false;\n    }\n    return\
    \ is_lower ^ is_upper;", "    std::map<std::string, std::string>::iterator it;\n\
    \    bool lower_case = true;\n    bool upper_case = true;\n    for (it = dict.begin();\
    \ it != dict.end(); it++) {\n        if (islower(it->first[0])) {\n          \
    \  upper_case = false;\n        } else if (isupper(it->first[0])) {\n        \
    \    lower_case = false;\n        } else {\n            return false;\n      \
    \  }\n    }\n    return lower_case || upper_case;", "    if(dict.size() == 0)\
    \ return false;\n    bool is_lower = false;\n    bool is_upper = false;\n    for(auto\
    \ it = dict.begin(); it != dict.end(); it++) {\n        if(isupper(it->first[0]))\
    \ is_upper = true;\n        else is_lower = true;\n    }\n    return (is_lower\
    \ && !is_upper) || (!is_lower && is_upper);", "    if(dict.size() == 0)\n    \
    \    return false;\n    bool is_lower = true;\n    bool is_upper = true;\n   \
    \ for(auto it = dict.begin(); it != dict.end(); it++) {\n        if(isupper(it->first[0]))\n\
    \            is_lower = false;\n        else\n            is_upper = false;\n\
    \    }\n    return is_lower || is_upper;", "    if(dict.size() == 0)\n       \
    \ return false;\n    bool is_lower = true;\n    bool is_upper = true;\n    for(auto\
    \ it = dict.begin(); it != dict.end(); it++) {\n        if(is_lower && !is_upper)\
    \ {\n            if(!isupper(it->first[0]))\n                return false;\n \
    \       }\n        else if(!is_lower && is_upper) {\n            if(!islower(it->first[0]))\n\
    \                return false;\n        }\n        else {\n            if(islower(it->first[0]))\n\
    \                is_upper = false;\n            else if(isupper(it->first[0]))\n\
    \                is_lower = false;\n            else\n                return false;\n\
    \        }\n    }\n    return true;", "    if(dict.size() == 0) return false;\n\
    \    bool is_lower = false;\n    bool is_upper = false;\n    for(auto it = dict.begin();\
    \ it != dict.end(); it++) {\n        if(isupper(it->first[0])) is_upper = true;\n\
    \        else is_lower = true;\n    }\n    return is_lower ^ is_upper;", "   \
    \ if(dict.size() == 0)\n        return false;\n    std::map<std::string, std::string>::iterator\
    \ it = dict.begin();\n    bool is_lower = false;\n    bool is_upper = false;\n\
    \    for(; it != dict.end(); it++) {\n        if(islower(it->first[0]))\n    \
    \        is_lower = true;\n        else if(isupper(it->first[0]))\n          \
    \  is_upper = true;\n        else\n            return false;\n    }\n    if(is_lower\
    \ && is_upper)\n        return false;\n    return true;", "    if(dict.size()\
    \ == 0) return false;\n    bool is_lower = true;\n    bool is_upper = true;\n\
    \    for(auto it = dict.begin(); it != dict.end(); it++) {\n        is_lower =\
    \ is_lower && (it->first == tolower(it->first));\n        is_upper = is_upper\
    \ && (it->first == toupper(it->first));\n    }\n    return is_lower || is_upper;",
  "    if(dict.size() == 0) return false;\n    bool is_lower = false;\n    bool is_upper\
    \ = false;\n    for(auto it = dict.begin(); it != dict.end(); it++) {\n      \
    \  if(islower(it->first[0])) is_lower = true;\n        if(isupper(it->first[0]))\
    \ is_upper = true;\n    }\n    return is_lower ^ is_upper;", "    if(dict.size()\
    \ == 0)\n        return false;\n    bool is_lower = false;\n    bool is_upper\
    \ = false;\n    for(auto it = dict.begin(); it != dict.end(); it++) {\n      \
    \  if(islower(it->first[0]))\n            is_lower = true;\n        else if(isupper(it->first[0]))\n\
    \            is_upper = true;\n        else\n            return false;\n    }\n\
    \    return is_lower ^ is_upper;", "    if(dict.size() == 0)\n        return false;\n\
    \    bool is_lower = true;\n    bool is_upper = true;\n    for(auto it = dict.begin();\
    \ it != dict.end(); it++) {\n        if(is_lower) {\n            for(int i = 0;\
    \ i < it->first.length(); i++) {\n                if(!islower(it->first[i])) {\n\
    \                    is_lower = false;\n                    break;\n         \
    \       }\n            }\n        }\n        if(is_upper) {\n            for(int\
    \ i = 0; i < it->first.length(); i++) {\n                if(!isupper(it->first[i]))\
    \ {\n                    is_upper = false;\n                    break;\n     \
    \           }\n            }\n        }\n    }\n    return is_lower || is_upper;",
  "    if(dict.size() == 0)\n        return false;\n    int lower = 0, upper = 0;\n\
    \    for(auto it = dict.begin(); it != dict.end(); it++) {\n        if(islower(it->first[0]))\n\
    \            lower++;\n        else if(isupper(it->first[0]))\n            upper++;\n\
    \        else\n            return false;\n    }\n    if(lower == dict.size() ||\
    \ upper == dict.size())\n        return true;\n    return false;", "    if(dict.size()\
    \ == 0)\n        return false;\n    bool is_lower = false;\n    bool is_upper\
    \ = false;\n    for(auto it = dict.begin(); it != dict.end(); it++) {\n      \
    \  if(islower(it->first[0]))\n            is_lower = true;\n        else if(isupper(it->first[0]))\n\
    \            is_upper = true;\n        else\n            return false;\n    }\n\
    \    return is_lower ^ is_upper;", "\tif (dict.size() == 0) {\n\t\treturn false;\n\
    \t}\n\tbool lower = false;\n\tbool upper = false;\n\tfor (auto it = dict.begin();\
    \ it != dict.end(); it++) {\n\t\tif (islower(it->first[0])) {\n\t\t\tlower = true;\n\
    \t\t}\n\t\telse if (isupper(it->first[0])) {\n\t\t\tupper = true;\n\t\t}\n\t\t\
    else {\n\t\t\treturn false;\n\t\t}\n\t}\n\tif (lower && upper) {\n\t\treturn false;\n\
    \t}\n\treturn true;", "    if(dict.size() == 0) return false;\n    bool is_upper\
    \ = false;\n    bool is_lower = false;\n    for(auto it = dict.begin(); it !=\
    \ dict.end(); it++) {\n        if(isupper(it->first[0])) {\n            is_upper\
    \ = true;\n        }\n        else {\n            is_lower = true;\n        }\n\
    \    }\n    return is_upper ^ is_lower;", "    if(dict.size() == 0)\n        return\
    \ false;\n    bool is_lower = false;\n    bool is_upper = false;\n    for(auto\
    \ it = dict.begin(); it != dict.end(); it++) {\n        if(islower(it->first[0]))\n\
    \            is_lower = true;\n        else if(isupper(it->first[0]))\n      \
    \      is_upper = true;\n        else\n            return false;\n    }\n    return\
    \ is_lower ^ is_upper;", "    if(dict.size()==0)\n        return false;\n    bool\
    \ is_lower=true;\n    bool is_upper=true;\n    for(auto it=dict.begin();it!=dict.end();it++){\n\
    \        if(islower(it->first[0]))\n            is_upper=false;\n        else\n\
    \            is_lower=false;\n    }\n    return is_lower||is_upper;", "    if(dict.size()\
    \ == 0)\n        return false;\n    bool is_lower = true;\n    for(auto it = dict.begin();\
    \ it != dict.end(); it++) {\n        if(isupper(it->first[0])) {\n           \
    \ is_lower = false;\n            break;\n        }\n    }\n    for(auto it = dict.begin();\
    \ it != dict.end(); it++) {\n        if(is_lower && isupper(it->first[0]))\n \
    \           return false;\n        if(!is_lower && islower(it->first[0]))\n  \
    \          return false;\n    }\n    return true;", "    if(dict.size() == 0)\n\
    \        return false;\n    bool is_lower = false;\n    bool is_upper = false;\n\
    \    for(auto it = dict.begin(); it != dict.end(); it++) {\n        if(islower(it->first[0]))\n\
    \            is_lower = true;\n        else if(isupper(it->first[0]))\n      \
    \      is_upper = true;\n        else\n            return false;\n    }\n    return\
    \ is_lower ^ is_upper;", "    if(dict.size() == 0) return false;\n    bool is_lower\
    \ = false;\n    bool is_upper = false;\n    for(auto it = dict.begin(); it !=\
    \ dict.end(); it++) {\n        if(isupper(it->first[0])) {\n            is_upper\
    \ = true;\n        } else {\n            is_lower = true;\n        }\n    }\n\
    \    return (is_lower && !is_upper) || (!is_lower && is_upper);", "    if(dict.size()\
    \ == 0)\n        return false;\n    bool is_lower = false;\n    bool is_upper\
    \ = false;\n    for(auto it = dict.begin(); it != dict.end(); it++) {\n      \
    \  if(isupper(it->first[0]))\n            is_upper = true;\n        else\n   \
    \         is_lower = true;\n    }\n    return (is_lower && !is_upper) || (!is_lower\
    \ && is_upper);", "    if(dict.size() == 0) return false;\n    bool is_lower =\
    \ false;\n    bool is_upper = false;\n    for(auto it = dict.begin(); it != dict.end();\
    \ it++) {\n        if(islower(it->first[0])) is_lower = true;\n        if(isupper(it->first[0]))\
    \ is_upper = true;\n    }\n    return is_lower ^ is_upper;", "\tif (dict.size()\
    \ == 0) {\n\t\treturn false;\n\t}\n\tbool is_upper = false;\n\tbool is_lower =\
    \ false;\n\tfor (auto it = dict.begin(); it != dict.end(); it++) {\n\t\tif (isupper(it->first[0]))\
    \ {\n\t\t\tis_upper = true;\n\t\t}\n\t\tif (islower(it->first[0])) {\n\t\t\tis_lower\
    \ = true;\n\t\t}\n\t}\n\treturn (is_upper && is_lower) ? false : true;", "   \
    \ if(dict.size() == 0)\n        return false;\n    bool upper = false;\n    bool\
    \ lower = false;\n    for(auto it = dict.begin(); it != dict.end(); it++) {\n\
    \        if(islower(it->first[0]))\n            lower = true;\n        else if(isupper(it->first[0]))\n\
    \            upper = true;\n        else\n            return false;\n    }\n \
    \   return (upper && lower) ? false : true;", "    if(dict.size() == 0) return\
    \ false;\n    bool is_lower = false;\n    bool is_upper = false;\n    for(auto\
    \ itr = dict.begin(); itr != dict.end(); itr++) {\n        if(islower(itr->first[0]))\
    \ {\n            is_lower = true;\n        } else if(isupper(itr->first[0])) {\n\
    \            is_upper = true;\n        } else {\n            return false;\n \
    \       }\n    }\n    return is_lower ^ is_upper;", "    if(dict.size() == 0)\
    \ return false;\n    bool upper = false;\n    bool lower = false;\n    for(auto\
    \ it = dict.begin(); it != dict.end(); it++) {\n        if(isupper(it->first[0]))\
    \ upper = true;\n        if(islower(it->first[0])) lower = true;\n    }\n    return\
    \ (upper && lower) ? false : true;", "    if(dict.size() == 0)\n        return\
    \ false;\n    bool is_lower = true;\n    bool is_upper = true;\n    for(auto it\
    \ = dict.begin(); it != dict.end(); it++) {\n        if(isupper(it->first[0]))\n\
    \            is_lower = false;\n        else\n            is_upper = false;\n\
    \    }\n    return is_lower || is_upper;", "    if(dict.size() == 0) return false;\n\
    \    bool is_lower = false;\n    bool is_upper = false;\n    for(auto it = dict.begin();\
    \ it != dict.end(); it++) {\n        if(isupper(it->first[0])) is_upper = true;\n\
    \        else is_lower = true;\n    }\n    return is_lower ^ is_upper;", "   \
    \ if(dict.size() == 0)\n        return false;\n    bool is_lower = false;\n  \
    \  bool is_upper = false;\n    for(auto it = dict.begin(); it != dict.end(); it++)\
    \ {\n        if(isupper(it->first[0]))\n            is_upper = true;\n       \
    \ else if(islower(it->first[0]))\n            is_lower = true;\n        else\n\
    \            return false;\n    }\n    return is_lower ^ is_upper;", "    if(dict.size()\
    \ == 0) return false;\n    bool is_lower = false;\n    bool is_upper = false;\n\
    \    for(auto it = dict.begin(); it != dict.end(); it++) {\n        if(islower(it->first[0]))\
    \ is_lower = true;\n        if(isupper(it->first[0])) is_upper = true;\n    }\n\
    \    return is_lower ^ is_upper;", "    if(dict.size() == 0) return false;\n \
    \   bool is_upper = false;\n    bool is_lower = false;\n    for(auto it = dict.begin();\
    \ it != dict.end(); it++) {\n        if(isupper(it->first[0])) is_upper = true;\n\
    \        if(islower(it->first[0])) is_lower = true;\n    }\n    return is_upper\
    \ ^ is_lower;", "    if(dict.size() == 0)\n        return false;\n    bool upper\
    \ = true;\n    bool lower = true;\n    for(auto it = dict.begin(); it != dict.end();\
    \ it++) {\n        if(!isupper(it->first[0]))\n            upper = false;\n  \
    \      if(!islower(it->first[0]))\n            lower = false;\n    }\n    return\
    \ upper || lower;", "    if(dict.size() == 0) return false;\n    bool is_lower\
    \ = false;\n    bool is_upper = false;\n    for(auto it = dict.begin(); it !=\
    \ dict.end(); it++) {\n        if(islower(it->first[0])) {\n            is_lower\
    \ = true;\n        } else if(isupper(it->first[0])) {\n            is_upper =\
    \ true;\n        } else {\n            return false;\n        }\n    }\n    return\
    \ is_lower ^ is_upper;", "\tif (dict.size() == 0)\n\t\treturn false;\n\tbool all_lower\
    \ = true;\n\tbool all_upper = true;\n\tfor (auto it = dict.begin(); it != dict.end();\
    \ it++) {\n\t\tif (it->first.size() == 0)\n\t\t\treturn false;\n\t\tif (islower(it->first[0]))\n\
    \t\t\tall_upper = false;\n\t\telse\n\t\t\tall_lower = false;\n\t}\n\treturn all_lower\
    \ || all_upper;", "    if(dict.size() == 0)\n        return false;\n    std::map<std::string,\
    \ std::string>::iterator it = dict.begin();\n    bool is_lower = false;\n    bool\
    \ is_upper = false;\n    for(; it != dict.end(); it++) {\n        if(isupper(it->first[0]))\n\
    \            is_upper = true;\n        else\n            is_lower = true;\n  \
    \  }\n    return is_lower ^ is_upper;", "    if(dict.size() == 0)\n        return\
    \ false;\n    bool is_upper = false;\n    bool is_lower = false;\n    for(auto\
    \ it = dict.begin(); it != dict.end(); it++) {\n        if(isupper(it->first[0]))\n\
    \            is_upper = true;\n        else\n            is_lower = true;\n  \
    \  }\n    return is_upper ^ is_lower;", "    if(dict.size() == 0) return false;\n\
    \    bool is_lower = false;\n    bool is_upper = false;\n    for(auto it = dict.begin();\
    \ it != dict.end(); it++) {\n        if(isupper(it->first[0])) is_upper = true;\n\
    \        else is_lower = true;\n    }\n    return (is_lower && !is_upper) || (!is_lower\
    \ && is_upper);", "    if(dict.size() == 0)\n        return false;\n    bool all_lower\
    \ = true;\n    bool all_upper = true;\n    for(auto it = dict.begin(); it != dict.end();\
    \ it++) {\n        if(it->first.length() == 0)\n            return false;\n  \
    \      if(!isupper(it->first[0]))\n            all_upper = false;\n        if(!islower(it->first[0]))\n\
    \            all_lower = false;\n    }\n    return all_lower || all_upper;", " \
    \   if(dict.size() == 0)\n        return false;\n    bool is_all_lower = true;\n\
    \    bool is_all_upper = true;\n    for(auto it = dict.begin(); it != dict.end();\
    \ it++) {\n        if(it->first.size() == 0)\n            return false;\n    \
    \    if(!isupper(it->first[0]))\n            is_all_upper = false;\n        if(!islower(it->first[0]))\n\
    \            is_all_lower = false;\n    }\n    return is_all_lower || is_all_upper;",
  "    if(dict.size() == 0)\n        return false;\n    bool is_lower = false;\n \
    \   bool is_upper = false;\n    for(auto it = dict.begin(); it != dict.end();\
    \ it++) {\n        if(isupper(it->first[0]))\n            is_upper = true;\n \
    \       else\n            is_lower = true;\n    }\n    return is_lower ^ is_upper;",
  "    if(dict.size() == 0)\n        return false;\n    bool is_upper = false;\n \
    \   bool is_lower = false;\n    for(auto it = dict.begin(); it != dict.end();\
    \ it++) {\n        if(isupper(it->first[0]))\n            is_upper = true;\n \
    \       else\n            is_lower = true;\n    }\n    return is_upper ^ is_lower;",
  "    if(dict.size() == 0) return false;\n    bool is_lower = false;\n    bool is_upper\
    \ = false;\n    for(auto it = dict.begin(); it != dict.end(); it++) {\n      \
    \  if(isupper(it->first[0])) is_upper = true;\n        else is_lower = true;\n\
    \    }\n    return is_lower ^ is_upper;", "    // Write your code here\n    std::map<std::string,\
    \ std::string>::iterator it;\n    int count_lower = 0;\n    int count_upper =\
    \ 0;\n    for(it = dict.begin(); it != dict.end(); it++) {\n        if(isupper(it->first[0]))\
    \ {\n            count_upper++;\n        }\n        else {\n            count_lower++;\n\
    \        }\n    }\n    if(count_lower == 0 || count_upper == 0) {\n        return\
    \ true;\n    }\n    else {\n        return false;\n    }", "    if(dict.size()\
    \ == 0)\n        return false;\n    std::map<std::string, std::string>::iterator\
    \ it = dict.begin();\n    bool is_upper = isupper(it->first[0]);\n    for(it =\
    \ dict.begin(); it != dict.end(); it++) {\n        if(is_upper) {\n          \
    \  if(!isupper(it->first[0]))\n                return false;\n        }\n    \
    \    else {\n            if(!islower(it->first[0]))\n                return false;\n\
    \        }\n    }\n    return true;", "    // Write your code here\n    bool is_lower\
    \ = true;\n    bool is_upper = true;\n    for (auto it = dict.begin(); it != dict.end();\
    \ it++) {\n        if (islower(it->first[0])) {\n            is_upper = false;\n\
    \        } else if (isupper(it->first[0])) {\n            is_lower = false;\n\
    \        } else {\n            return false;\n        }\n    }\n    return is_lower\
    \ || is_upper;", "    if(dict.size() == 0) return false;\n    bool all_lower =\
    \ true;\n    bool all_upper = true;\n    for(auto it = dict.begin(); it != dict.end();\
    \ it++) {\n        if(!std::all_of(it->first.begin(), it->first.end(), ::islower))\
    \ {\n            all_lower = false;\n        }\n        if(!std::all_of(it->first.begin(),\
    \ it->first.end(), ::isupper)) {\n            all_upper = false;\n        }\n\
    \    }\n    return all_lower || all_upper;", "    if(dict.size() == 0)\n     \
    \   return false;\n    bool is_lower = false;\n    bool is_upper = false;\n  \
    \  for(auto i : dict) {\n        if(isupper(i.first[0]))\n            is_upper\
    \ = true;\n        else\n            is_lower = true;\n    }\n    return is_lower\
    \ ^ is_upper;", "    if(dict.size() == 0)\n        return false;\n    bool is_lower\
    \ = false;\n    bool is_upper = false;\n    for(auto it = dict.begin(); it !=\
    \ dict.end(); it++) {\n        if(isupper(it->first[0]))\n            is_upper\
    \ = true;\n        else\n            is_lower = true;\n    }\n    return (is_lower\
    \ && !is_upper) || (!is_lower && is_upper);", "    // Write your code here\n \
    \   if(dict.size()==0)\n        return false;\n    bool flag=true;\n    for(auto\
    \ it=dict.begin();it!=dict.end();it++)\n    {\n        if(it->first[0]>='A' &&\
    \ it->first[0]<='Z')\n            flag=false;\n    }\n    if(flag)\n        return\
    \ true;\n    flag=true;\n    for(auto it=dict.begin();it!=dict.end();it++)\n \
    \   {\n        if(it->first[0]>='a' && it->first[0]<='z')\n            flag=false;\n\
    \    }\n    if(flag)\n        return true;\n    return false;", "    if(dict.size()==0)\n\
    \        return false;\n    std::map<std::string, std::string>::iterator itr;\n\
    \    bool is_lower = false;\n    bool is_upper = false;\n    for(itr=dict.begin();itr!=dict.end();itr++){\n\
    \        if(islower(itr->first[0]))\n            is_lower = true;\n        else\
    \ if(isupper(itr->first[0]))\n            is_upper = true;\n        else\n   \
    \         return false;\n    }\n    if(is_lower && is_upper)\n        return false;\n\
    \    return true;", "    if(dict.size() == 0) return false;\n    bool is_lower\
    \ = false;\n    bool is_upper = false;\n    for(auto it = dict.begin(); it !=\
    \ dict.end(); it++) {\n        if(isupper(it->first[0])) is_upper = true;\n  \
    \      else is_lower = true;\n    }\n    return is_lower ^ is_upper;", "    if(dict.size()\
    \ == 0) return false;\n    bool upper = false;\n    bool lower = false;\n    for(auto\
    \ it = dict.begin(); it != dict.end(); it++) {\n        if(isupper(it->first[0]))\
    \ upper = true;\n        if(islower(it->first[0])) lower = true;\n    }\n    return\
    \ upper ^ lower;", "    if(dict.size() == 0) return false;\n    bool is_lower\
    \ = false;\n    bool is_upper = false;\n    for(auto it = dict.begin(); it !=\
    \ dict.end(); it++) {\n        if(islower(it->first[0])) is_lower = true;\n  \
    \      if(isupper(it->first[0])) is_upper = true;\n    }\n    return is_lower\
    \ ^ is_upper;", "    if(dict.size() == 0)\n        return false;\n    bool all_lower\
    \ = true;\n    bool all_upper = true;\n    for(auto it = dict.begin(); it != dict.end();\
    \ it++) {\n        if(it->first[0] >= 'a' && it->first[0] <= 'z')\n          \
    \  all_upper = false;\n        else if(it->first[0] >= 'A' && it->first[0] <=\
    \ 'Z')\n            all_lower = false;\n        else\n            return false;\n\
    \    }\n    return all_lower || all_upper;", "    if(dict.size() == 0)\n     \
    \   return false;\n    bool all_lower = true;\n    bool all_upper = true;\n  \
    \  for(auto it = dict.begin(); it != dict.end(); it++) {\n        if(!isupper(it->first[0]))\n\
    \            all_upper = false;\n        if(!islower(it->first[0]))\n        \
    \    all_lower = false;\n    }\n    return all_lower || all_upper;", "    if(dict.size()\
    \ == 0)\n        return false;\n    bool upper = false;\n    bool lower = false;\n\
    \    for(auto it = dict.begin(); it != dict.end(); it++) {\n        if(islower(it->first[0]))\n\
    \            lower = true;\n        else\n            upper = true;\n    }\n \
    \   return (upper && lower) ? false : true;", "    if(dict.size() == 0) return\
    \ false;\n    bool is_lower = false;\n    bool is_upper = false;\n    for(auto\
    \ it = dict.begin(); it != dict.end(); it++) {\n        if(isupper(it->first[0]))\
    \ is_upper = true;\n        else is_lower = true;\n    }\n    return is_lower\
    \ ^ is_upper;", "    if(dict.size() == 0) return false;\n    bool upper = false;\n\
    \    bool lower = false;\n    for(auto it = dict.begin(); it != dict.end(); it++)\
    \ {\n        if(isupper(it->first[0])) upper = true;\n        if(islower(it->first[0]))\
    \ lower = true;\n    }\n    return upper ^ lower;", "    if(dict.size() == 0)\n\
    \        return false;\n    bool is_lower = false;\n    bool is_upper = false;\n\
    \    for(auto it = dict.begin(); it != dict.end(); it++) {\n        if(islower(it->first[0]))\n\
    \            is_lower = true;\n        else if(isupper(it->first[0]))\n      \
    \      is_upper = true;\n        else\n            return false;\n    }\n    return\
    \ is_lower ^ is_upper;", "    if(dict.size() == 0)\n        return false;\n  \
    \  bool upper = false;\n    bool lower = false;\n    for(auto it = dict.begin();\
    \ it != dict.end(); it++) {\n        if(it->first[0] >= 'A' && it->first[0] <=\
    \ 'Z')\n            upper = true;\n        else if(it->first[0] >= 'a' && it->first[0]\
    \ <= 'z')\n            lower = true;\n        else\n            return false;\n\
    \    }\n    return upper ^ lower;", "    if(dict.size() == 0)\n        return\
    \ false;\n    std::map<std::string, std::string>::iterator it = dict.begin();\n\
    \    bool lower = false;\n    bool upper = false;\n    for(; it != dict.end();\
    \ it++) {\n        if(islower(it->first[0]))\n            lower = true;\n    \
    \    else if(isupper(it->first[0]))\n            upper = true;\n        else\n\
    \            return false;\n    }\n    if(lower && upper)\n        return false;\n\
    \    return true;", "    if(dict.size()==0)\n        return false;\n    bool flag=true;\n\
    \    for(auto it=dict.begin();it!=dict.end();it++)\n    {\n        if(it->first[0]>='a'\
    \ && it->first[0]<='z')\n        {\n            for(int i=1;i<it->first.length();i++)\n\
    \            {\n                if(it->first[i]<'a' || it->first[i]>'z')\n   \
    \             {\n                    flag=false;\n                    break;\n\
    \                }\n            }\n        }\n        else if(it->first[0]>='A'\
    \ && it->first[0]<='Z')\n        {\n            for(int i=1;i<it->first.length();i++)\n\
    \            {\n                if(it->first[i]<'A' || it->first[i]>'Z')\n   \
    \             {\n                    flag=false;\n                    break;\n\
    \                }\n            }\n        }\n        else\n        {\n      \
    \      flag=false;\n            break;\n        }\n    }\n    return flag;", " \
    \   if(dict.size() == 0)\n        return false;\n    bool is_lower = true;\n \
    \   bool is_upper = true;\n    for(auto it = dict.begin(); it != dict.end(); it++)\
    \ {\n        if(!isupper(it->first[0]))\n            is_upper = false;\n     \
    \   if(!islower(it->first[0]))\n            is_lower = false;\n    }\n    return\
    \ is_lower || is_upper;", "    if(dict.size() == 0)\n        return false;\n \
    \   bool upper = false;\n    bool lower = false;\n    for(auto it = dict.begin();\
    \ it != dict.end(); it++) {\n        if(isupper(it->first[0]))\n            upper\
    \ = true;\n        else\n            lower = true;\n    }\n    return upper ^\
    \ lower;", "    if(dict.size() == 0) return false;\n    bool is_lower = false;\n\
    \    bool is_upper = false;\n    for(auto it = dict.begin(); it != dict.end();\
    \ it++) {\n        if(islower(it->first[0])) {\n            is_lower = true;\n\
    \        } else if(isupper(it->first[0])) {\n            is_upper = true;\n  \
    \      } else {\n            return false;\n        }\n    }\n    return is_lower\
    \ ^ is_upper;", "    if(dict.size() == 0) return false;\n    bool is_lower = false;\n\
    \    bool is_upper = false;\n    for(auto it = dict.begin(); it != dict.end();\
    \ it++) {\n        if(islower(it->first[0])) is_lower = true;\n        if(isupper(it->first[0]))\
    \ is_upper = true;\n    }\n    return (is_lower && !is_upper) || (!is_lower &&\
    \ is_upper);", "    if(dict.size() == 0) return false;\n    bool is_lower = false;\n\
    \    bool is_upper = false;\n    for(auto it = dict.begin(); it != dict.end();\
    \ it++) {\n        if(islower(it->first[0])) {\n            is_lower = true;\n\
    \        } else if(isupper(it->first[0])) {\n            is_upper = true;\n  \
    \      } else {\n            return false;\n        }\n    }\n    return is_lower\
    \ ^ is_upper;", "    if(dict.size() == 0) return false;\n    bool is_lower = true;\n\
    \    bool is_upper = true;\n    for(auto it = dict.begin(); it != dict.end();\
    \ it++) {\n        if(!islower(it->first[0])) is_lower = false;\n        if(!isupper(it->first[0]))\
    \ is_upper = false;\n    }\n    return is_lower || is_upper;", "    if(dict.size()\
    \ == 0)\n        return false;\n    bool is_lower = false;\n    bool is_upper\
    \ = false;\n    for(auto it = dict.begin(); it != dict.end(); it++) {\n      \
    \  if(it->first[0] >= 'a' && it->first[0] <= 'z') {\n            is_lower = true;\n\
    \        }\n        else if(it->first[0] >= 'A' && it->first[0] <= 'Z') {\n  \
    \          is_upper = true;\n        }\n        else {\n            return false;\n\
    \        }\n    }\n    if(is_lower && is_upper)\n        return false;\n    return\
    \ true;", "    if(dict.size() == 0) return false;\n    bool is_lower = false;\n\
    \    bool is_upper = false;\n    for(auto it = dict.begin(); it != dict.end();\
    \ it++) {\n        if(isupper(it->first[0])) is_upper = true;\n        else is_lower\
    \ = true;\n    }\n    return is_lower ^ is_upper;", "    if(dict.size() == 0)\n\
    \        return false;\n    bool is_lower = true;\n    bool is_upper = true;\n\
    \    for(auto it = dict.begin(); it != dict.end(); it++) {\n        if(isupper(it->first[0]))\n\
    \            is_lower = false;\n        else\n            is_upper = false;\n\
    \    }\n    return is_lower || is_upper;", "    if(dict.size() == 0)\n       \
    \ return false;\n    bool upper = false;\n    bool lower = false;\n    for(auto\
    \ it = dict.begin(); it != dict.end(); it++) {\n        if(isupper(it->first[0]))\n\
    \            upper = true;\n        else\n            lower = true;\n    }\n \
    \   return upper ^ lower;", "    if(dict.size()==0) return false;\n    bool is_lower\
    \ = false;\n    bool is_upper = false;\n    for(auto it = dict.begin(); it !=\
    \ dict.end(); it++) {\n        if(isupper(it->first[0])) is_upper = true;\n  \
    \      else is_lower = true;\n    }\n    return is_lower ^ is_upper;", "    if(dict.size()\
    \ == 0)\n        return false;\n    bool all_lower = true;\n    bool all_upper\
    \ = true;\n    for(auto it = dict.begin(); it != dict.end(); it++) {\n       \
    \ if(!isupper(it->first[0]))\n            all_upper = false;\n        if(!islower(it->first[0]))\n\
    \            all_lower = false;\n    }\n    return all_lower || all_upper;", " \
    \   if(dict.size() == 0) return false;\n    bool all_lower = true;\n    bool all_upper\
    \ = true;\n    for(auto it = dict.begin(); it != dict.end(); it++) {\n       \
    \ if(!std::all_of(it->first.begin(), it->first.end(), ::islower)) {\n        \
    \    all_lower = false;\n        }\n        if(!std::all_of(it->first.begin(),\
    \ it->first.end(), ::isupper)) {\n            all_upper = false;\n        }\n\
    \    }\n    return all_lower || all_upper;", "    if(dict.size() == 0) return\
    \ false;\n    bool all_lower = true;\n    bool all_upper = true;\n    for(auto\
    \ it = dict.begin(); it != dict.end(); it++) {\n        if(!std::all_of(it->first.begin(),\
    \ it->first.end(), ::islower)) {\n            all_lower = false;\n        }\n\
    \        if(!std::all_of(it->first.begin(), it->first.end(), ::isupper)) {\n \
    \           all_upper = false;\n        }\n    }\n    return all_lower || all_upper;",
  "    if(dict.size() == 0) return false;\n    bool is_lower = true;\n    bool is_upper\
    \ = true;\n    for(auto it = dict.begin(); it != dict.end(); it++) {\n       \
    \ if(!isupper(it->first[0])) is_upper = false;\n        if(!islower(it->first[0]))\
    \ is_lower = false;\n    }\n    return is_lower || is_upper;", "    if(dict.size()\
    \ == 0) return false;\n    bool is_lower = false;\n    bool is_upper = false;\n\
    \    for(auto it = dict.begin(); it != dict.end(); it++) {\n        if(islower(it->first[0]))\
    \ is_lower = true;\n        if(isupper(it->first[0])) is_upper = true;\n    }\n\
    \    return is_lower ^ is_upper;", "    if(dict.size() == 0) return false;\n \
    \   bool all_lower = true;\n    bool all_upper = true;\n    for(auto it = dict.begin();\
    \ it != dict.end(); it++) {\n        if(!std::all_of(it->first.begin(), it->first.end(),\
    \ ::islower)) {\n            all_lower = false;\n        }\n        if(!std::all_of(it->first.begin(),\
    \ it->first.end(), ::isupper)) {\n            all_upper = false;\n        }\n\
    \    }\n    return all_lower || all_upper;", "    if(dict.size() == 0)\n     \
    \   return false;\n    bool isUpper = false;\n    bool isLower = false;\n    for(auto\
    \ it = dict.begin(); it != dict.end(); it++) {\n        if(isupper(it->first[0]))\n\
    \            isUpper = true;\n        else if(islower(it->first[0]))\n       \
    \     isLower = true;\n        else\n            return false;\n    }\n    return\
    \ isUpper ^ isLower;", "    if(dict.size() == 0)\n        return false;\n    bool\
    \ is_lower = false;\n    bool is_upper = false;\n    for(auto it = dict.begin();\
    \ it != dict.end(); it++) {\n        if(islower(it->first[0])) {\n           \
    \ is_lower = true;\n        }\n        else if(isupper(it->first[0])) {\n    \
    \        is_upper = true;\n        }\n        else {\n            return false;\n\
    \        }\n    }\n    return is_lower ^ is_upper;", "    if(dict.size() == 0)\
    \ return false;\n    bool is_lower = false;\n    bool is_upper = false;\n    for(auto\
    \ it = dict.begin(); it != dict.end(); it++) {\n        if(isupper(it->first[0]))\
    \ is_upper = true;\n        else is_lower = true;\n    }\n    return (is_lower\
    \ && !is_upper) || (!is_lower && is_upper);", "    if(dict.size() == 0)\n    \
    \    return false;\n    bool lower = false;\n    bool upper = false;\n    for(auto\
    \ it = dict.begin(); it != dict.end(); it++) {\n        if(islower(it->first[0]))\n\
    \            lower = true;\n        else if(isupper(it->first[0]))\n         \
    \   upper = true;\n        else\n            return false;\n    }\n    return\
    \ lower ^ upper;", "    if(dict.size() == 0)\n        return false;\n    std::map<std::string,\
    \ std::string>::iterator it;\n    bool flag = false;\n    for(it = dict.begin();\
    \ it != dict.end(); it++) {\n        if(islower(it->first[0])) {\n           \
    \ flag = true;\n            break;\n        }\n    }\n    for(it = dict.begin();\
    \ it != dict.end(); it++) {\n        if(flag) {\n            if(!islower(it->first[0]))\n\
    \                return false;\n        }\n        else {\n            if(!isupper(it->first[0]))\n\
    \                return false;\n        }\n    }\n    return true;", "    if(dict.size()\
    \ == 0) return false;\n    bool all_lower = true;\n    bool all_upper = true;\n\
    \    for(auto it = dict.begin(); it != dict.end(); it++) {\n        std::string\
    \ key = it->first;\n        for(int i = 0; i < key.length(); i++) {\n        \
    \    if(!islower(key[i])) all_lower = false;\n            if(!isupper(key[i]))\
    \ all_upper = false;\n        }\n    }\n    return all_lower || all_upper;", " \
    \   if(dict.size() == 0) return false;\n    bool is_lower = false;\n    bool is_upper\
    \ = false;\n    for(auto it = dict.begin(); it != dict.end(); it++) {\n      \
    \  if(isupper(it->first[0])) is_upper = true;\n        else is_lower = true;\n\
    \    }\n    return is_lower ^ is_upper;", "    if(dict.size() == 0)\n        return\
    \ false;\n    bool upper = false;\n    bool lower = false;\n    for(auto it =\
    \ dict.begin(); it != dict.end(); it++) {\n        if(islower(it->first[0])) {\n\
    \            lower = true;\n        }\n        else if(isupper(it->first[0]))\
    \ {\n            upper = true;\n        }\n        else {\n            return\
    \ false;\n        }\n    }\n    return upper ^ lower;", "    if(dict.size() ==\
    \ 0) return false;\n    bool lower = false;\n    bool upper = false;\n    for(auto\
    \ it = dict.begin(); it != dict.end(); it++) {\n        if(islower(it->first[0]))\
    \ lower = true;\n        else upper = true;\n    }\n    return lower ^ upper;",
  "    if(dict.size() == 0)\n        return false;\n    bool all_lower = true;\n \
    \   bool all_upper = true;\n    for(auto it = dict.begin(); it != dict.end();\
    \ it++) {\n        if(!std::all_of(it->first.begin(), it->first.end(), ::islower))\n\
    \            all_lower = false;\n        if(!std::all_of(it->first.begin(), it->first.end(),\
    \ ::isupper))\n            all_upper = false;\n    }\n    return all_lower ||\
    \ all_upper;", "    if(dict.size() == 0) return false;\n    bool is_lower = false;\n\
    \    bool is_upper = false;\n    for(auto it = dict.begin(); it != dict.end();\
    \ it++) {\n        if(islower(it->first[0])) {\n            is_lower = true;\n\
    \        } else if(isupper(it->first[0])) {\n            is_upper = true;\n  \
    \      } else {\n            return false;\n        }\n    }\n    return is_lower\
    \ ^ is_upper;", "    if(dict.size() == 0) return false;\n    bool is_lower = true;\n\
    \    bool is_upper = true;\n    for(auto it = dict.begin(); it != dict.end();\
    \ it++) {\n        if(!isupper(it->first[0])) is_upper = false;\n        if(!islower(it->first[0]))\
    \ is_lower = false;\n    }\n    return is_lower || is_upper;", "    if(dict.size()\
    \ == 0) return false;\n    bool is_lower = false;\n    bool is_upper = false;\n\
    \    for(auto it = dict.begin(); it != dict.end(); it++) {\n        if(isupper(it->first[0]))\
    \ is_upper = true;\n        else is_lower = true;\n    }\n    return !(is_lower\
    \ && is_upper);", "    if(dict.size() == 0) return false;\n    bool is_lower =\
    \ false;\n    bool is_upper = false;\n    for(auto it = dict.begin(); it != dict.end();\
    \ it++) {\n        if(islower(it->first[0])) is_lower = true;\n        if(isupper(it->first[0]))\
    \ is_upper = true;\n    }\n    return is_lower ^ is_upper;", "    if(dict.size()\
    \ == 0) return false;\n    bool is_lower = false;\n    bool is_upper = false;\n\
    \    for(auto it = dict.begin(); it != dict.end(); it++) {\n        if(isupper(it->first[0]))\
    \ is_upper = true;\n        else is_lower = true;\n    }\n    return is_lower\
    \ ^ is_upper;", "    if(dict.size() == 0) return false;\n    bool all_lower =\
    \ true;\n    bool all_upper = true;\n    for(auto it = dict.begin(); it != dict.end();\
    \ it++) {\n        if(!isupper(it->first[0])) all_upper = false;\n        if(!islower(it->first[0]))\
    \ all_lower = false;\n    }\n    return all_lower || all_upper;", "    if(dict.size()\
    \ == 0)\n        return false;\n    bool is_lower = false;\n    bool is_upper\
    \ = false;\n    for(auto it = dict.begin(); it != dict.end(); it++) {\n      \
    \  if(isupper(it->first[0]))\n            is_upper = true;\n        else\n   \
    \         is_lower = true;\n    }\n    return is_lower ^ is_upper;", "    if(dict.size()\
    \ == 0)\n        return false;\n    bool lower = true;\n    bool upper = true;\n\
    \    for(auto it = dict.begin(); it != dict.end(); it++) {\n        if(islower(it->first[0]))\n\
    \            upper = false;\n        else\n            lower = false;\n    }\n\
    \    return lower || upper;", "    if(dict.size() == 0)\n        return false;\n\
    \    bool is_lower = false;\n    bool is_upper = false;\n    for(auto it = dict.begin();\
    \ it != dict.end(); it++) {\n        if(isupper(it->first[0]))\n            is_upper\
    \ = true;\n        else\n            is_lower = true;\n    }\n    return is_lower\
    \ ^ is_upper;"]
stop_tokens:
- "\n}"
