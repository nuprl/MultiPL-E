name: HumanEval_144_simplify
language: cpp
prompt: "#include<assert.h>\n#include<bits/stdc++.h>\n// Your task is to implement\
  \ a function that will simplify the expression\n// x * n. The function returns True\
  \ if x * n evaluates to a whole number and False\n// otherwise. Both x and n, are\
  \ string representation of a fraction, and have the following format,\n// <numerator>/<denominator>\
  \ where both numerator and denominator are positive whole numbers.\n// You can assume\
  \ that x, and n are valid fractions, and do not have zero as denominator.\n// simplify(\"\
  1/5\", \"5/1\") = True\n// simplify(\"1/6\", \"2/1\") = False\n// simplify(\"7/10\"\
  , \"10/2\") = False\nbool simplify(std::string x, std::string n) {\n"
tests: "}\nint main() {\n    auto candidate = simplify;\n    assert(candidate((\"\
  1/5\"), (\"5/1\")) == (true));\n    assert(candidate((\"1/6\"), (\"2/1\")) == (false));\n\
  \    assert(candidate((\"5/1\"), (\"3/1\")) == (true));\n    assert(candidate((\"\
  7/10\"), (\"10/2\")) == (false));\n    assert(candidate((\"2/10\"), (\"50/10\"))\
  \ == (true));\n    assert(candidate((\"7/2\"), (\"4/2\")) == (true));\n    assert(candidate((\"\
  11/6\"), (\"6/1\")) == (true));\n    assert(candidate((\"2/3\"), (\"5/2\")) == (false));\n\
  \    assert(candidate((\"5/2\"), (\"3/5\")) == (false));\n    assert(candidate((\"\
  2/4\"), (\"8/4\")) == (true));\n    assert(candidate((\"2/4\"), (\"4/2\")) == (true));\n\
  \    assert(candidate((\"1/5\"), (\"5/1\")) == (true));\n    assert(candidate((\"\
  1/5\"), (\"1/5\")) == (false));\n}\n"
completions: ["  int x_numerator = std::stoi(x.substr(0, x.find('/')));\n  int x_denominator\
    \ = std::stoi(x.substr(x.find('/') + 1));\n  int n_numerator = std::stoi(n.substr(0,\
    \ n.find('/')));\n  int n_denominator = std::stoi(n.substr(n.find('/') + 1));\n\
    \  int product_numerator = x_numerator * n_numerator;\n  int product_denominator\
    \ = x_denominator * n_denominator;\n  return product_numerator % product_denominator\
    \ == 0;", "  int x_numerator, x_denominator, n_numerator, n_denominator;\n  std::stringstream\
    \ ss;\n  ss << x;\n  ss >> x_numerator;\n  ss.clear();\n  ss << n;\n  ss >> n_numerator;\n\
    \  ss.clear();\n  ss << x;\n  ss.ignore(1, '/');\n  ss >> x_denominator;\n  ss.clear();\n\
    \  ss << n;\n  ss.ignore(1, '/');\n  ss >> n_denominator;\n  ss.clear();\n  return\
    \ (x_numerator * n_denominator) % (x_denominator * n_numerator) == 0;", "    int\
    \ x_numerator, x_denominator, n_numerator, n_denominator;\n    sscanf(x.c_str(),\
    \ \"%d/%d\", &x_numerator, &x_denominator);\n    sscanf(n.c_str(), \"%d/%d\",\
    \ &n_numerator, &n_denominator);\n    return (x_numerator * n_denominator) % (x_denominator\
    \ * n_numerator) == 0;", "    int x_num = std::stoi(x.substr(0, x.find('/')));\n\
    \    int x_den = std::stoi(x.substr(x.find('/') + 1));\n    int n_num = std::stoi(n.substr(0,\
    \ n.find('/')));\n    int n_den = std::stoi(n.substr(n.find('/') + 1));\n    int\
    \ num = x_num * n_num;\n    int den = x_den * n_den;\n    int gcd = std::__gcd(num,\
    \ den);\n    num /= gcd;\n    den /= gcd;\n    return num % den == 0;", "  //\
    \ your code here\n  int x_num = std::stoi(x.substr(0, x.find('/')));\n  int x_den\
    \ = std::stoi(x.substr(x.find('/') + 1));\n  int n_num = std::stoi(n.substr(0,\
    \ n.find('/')));\n  int n_den = std::stoi(n.substr(n.find('/') + 1));\n  int num\
    \ = x_num * n_num;\n  int den = x_den * n_den;\n  int gcd = __gcd(num, den);\n\
    \  return (num / gcd) % (den / gcd) == 0;", "    int x_num, x_den, n_num, n_den;\n\
    \    sscanf(x.c_str(), \"%d/%d\", &x_num, &x_den);\n    sscanf(n.c_str(), \"%d/%d\"\
    , &n_num, &n_den);\n    int num = x_num * n_num;\n    int den = x_den * n_den;\n\
    \    if (num % den == 0) {\n        return true;\n    }\n    return false;", " \
    \ // your code here\n  std::stringstream ss1(x);\n  std::stringstream ss2(n);\n\
    \  int a,b,c,d;\n  char ch;\n  ss1>>a>>ch>>b;\n  ss2>>c>>ch>>d;\n  int gcd = __gcd(a,b);\n\
    \  a/=gcd;\n  b/=gcd;\n  gcd = __gcd(c,d);\n  c/=gcd;\n  d/=gcd;\n  int num =\
    \ a*d;\n  int den = b*c;\n  gcd = __gcd(num,den);\n  num/=gcd;\n  den/=gcd;\n\
    \  if(num%den==0)\n    return true;\n  return false;", "  // your code here\n\
    \  int x_numerator, x_denominator, n_numerator, n_denominator;\n  std::stringstream\
    \ ss1(x);\n  std::stringstream ss2(n);\n  std::string temp;\n  std::getline(ss1,\
    \ temp, '/');\n  x_numerator = std::stoi(temp);\n  std::getline(ss1, temp, '/');\n\
    \  x_denominator = std::stoi(temp);\n  std::getline(ss2, temp, '/');\n  n_numerator\
    \ = std::stoi(temp);\n  std::getline(ss2, temp, '/');\n  n_denominator = std::stoi(temp);\n\
    \  int numerator = x_numerator * n_numerator;\n  int denominator = x_denominator\
    \ * n_denominator;\n  if (numerator % denominator == 0)\n    return true;\n  else\n\
    \    return false;", "    int x_numerator = std::stoi(x.substr(0, x.find('/')));\n\
    \    int x_denominator = std::stoi(x.substr(x.find('/') + 1));\n    int n_numerator\
    \ = std::stoi(n.substr(0, n.find('/')));\n    int n_denominator = std::stoi(n.substr(n.find('/')\
    \ + 1));\n    int product_numerator = x_numerator * n_numerator;\n    int product_denominator\
    \ = x_denominator * n_denominator;\n    return product_numerator % product_denominator\
    \ == 0;", "    int x_num = std::stoi(x.substr(0, x.find('/')));\n    int x_den\
    \ = std::stoi(x.substr(x.find('/') + 1));\n    int n_num = std::stoi(n.substr(0,\
    \ n.find('/')));\n    int n_den = std::stoi(n.substr(n.find('/') + 1));\n    int\
    \ num = x_num * n_num;\n    int den = x_den * n_den;\n    return num % den ==\
    \ 0;", "\tint x_numerator = stoi(x.substr(0, x.find('/')));\n\tint x_denominator\
    \ = stoi(x.substr(x.find('/') + 1));\n\tint n_numerator = stoi(n.substr(0, n.find('/')));\n\
    \tint n_denominator = stoi(n.substr(n.find('/') + 1));\n\tint numerator = x_numerator\
    \ * n_numerator;\n\tint denominator = x_denominator * n_denominator;\n\treturn\
    \ (numerator % denominator == 0);", "    std::stringstream ss;\n    ss << x <<\
    \ \" \" << n;\n    int a, b, c, d;\n    char slash;\n    ss >> a >> slash >> b\
    \ >> c >> slash >> d;\n    return a * d == b * c;", "    // Your code here\n \
    \   int x_num = std::stoi(x.substr(0, x.find(\"/\")));\n    int x_den = std::stoi(x.substr(x.find(\"\
    /\") + 1));\n    int n_num = std::stoi(n.substr(0, n.find(\"/\")));\n    int n_den\
    \ = std::stoi(n.substr(n.find(\"/\") + 1));\n    int num = x_num * n_num;\n  \
    \  int den = x_den * n_den;\n    int gcd = std::__gcd(num, den);\n    num /= gcd;\n\
    \    den /= gcd;\n    return num % den == 0;", "    // your code here\n    int\
    \ a = std::stoi(x.substr(0, x.find('/')));\n    int b = std::stoi(x.substr(x.find('/')\
    \ + 1));\n    int c = std::stoi(n.substr(0, n.find('/')));\n    int d = std::stoi(n.substr(n.find('/')\
    \ + 1));\n    return (a * d) % (b * c) == 0;", "    int x_num = std::stoi(x.substr(0,\
    \ x.find(\"/\")));\n    int x_den = std::stoi(x.substr(x.find(\"/\") + 1));\n\
    \    int n_num = std::stoi(n.substr(0, n.find(\"/\")));\n    int n_den = std::stoi(n.substr(n.find(\"\
    /\") + 1));\n    int num = x_num * n_num;\n    int den = x_den * n_den;\n    int\
    \ gcd = std::__gcd(num, den);\n    num /= gcd;\n    den /= gcd;\n    return num\
    \ % den == 0;", "    int x_num = std::stoi(x.substr(0, x.find('/')));\n    int\
    \ x_den = std::stoi(x.substr(x.find('/') + 1));\n    int n_num = std::stoi(n.substr(0,\
    \ n.find('/')));\n    int n_den = std::stoi(n.substr(n.find('/') + 1));\n    int\
    \ x_num_new = x_num * n_den;\n    int x_den_new = x_den * n_num;\n    return x_num_new\
    \ % x_den_new == 0;", "    int a,b,c,d;\n    sscanf(x.c_str(),\"%d/%d\",&a,&b);\n\
    \    sscanf(n.c_str(),\"%d/%d\",&c,&d);\n    return (a*d)%(b*c)==0;", "    int\
    \ x_num = std::stoi(x.substr(0, x.find('/')));\n    int x_den = std::stoi(x.substr(x.find('/')\
    \ + 1));\n    int n_num = std::stoi(n.substr(0, n.find('/')));\n    int n_den\
    \ = std::stoi(n.substr(n.find('/') + 1));\n    int num = x_num * n_num;\n    int\
    \ den = x_den * n_den;\n    return (num % den == 0);", "    int num1, den1, num2,\
    \ den2;\n    sscanf(x.c_str(), \"%d/%d\", &num1, &den1);\n    sscanf(n.c_str(),\
    \ \"%d/%d\", &num2, &den2);\n    int num = num1 * num2;\n    int den = den1 *\
    \ den2;\n    if (num % den == 0) {\n        return true;\n    }\n    return false;",
  "    std::stringstream ss1(x);\n    std::stringstream ss2(n);\n    int a, b, c,\
    \ d;\n    char ch;\n    ss1 >> a >> ch >> b;\n    ss2 >> c >> ch >> d;\n    return\
    \ (a * d) % (b * c) == 0;", "    // Your code here\n    int x_num, x_den, n_num,\
    \ n_den;\n    std::stringstream ss(x);\n    std::stringstream ss1(n);\n    std::string\
    \ temp;\n    getline(ss, temp, '/');\n    x_num = std::stoi(temp);\n    getline(ss,\
    \ temp, '/');\n    x_den = std::stoi(temp);\n    getline(ss1, temp, '/');\n  \
    \  n_num = std::stoi(temp);\n    getline(ss1, temp, '/');\n    n_den = std::stoi(temp);\n\
    \    int num = x_num * n_num;\n    int den = x_den * n_den;\n    if (num % den\
    \ == 0) {\n        return true;\n    }\n    return false;", "    // Your code\
    \ here\n    std::string num1, num2, den1, den2;\n    int i = 0;\n    while(x[i]\
    \ != '/'){\n        num1 += x[i];\n        i++;\n    }\n    i++;\n    while(i\
    \ < x.length()){\n        den1 += x[i];\n        i++;\n    }\n    i = 0;\n   \
    \ while(n[i] != '/'){\n        num2 += n[i];\n        i++;\n    }\n    i++;\n\
    \    while(i < n.length()){\n        den2 += n[i];\n        i++;\n    }\n    int\
    \ num = std::stoi(num1) * std::stoi(den2);\n    int den = std::stoi(den1) * std::stoi(num2);\n\
    \    if(num % den == 0){\n        return true;\n    }\n    return false;", " \
    \   int x_num = std::stoi(x.substr(0, x.find(\"/\")));\n    int x_den = std::stoi(x.substr(x.find(\"\
    /\") + 1));\n    int n_num = std::stoi(n.substr(0, n.find(\"/\")));\n    int n_den\
    \ = std::stoi(n.substr(n.find(\"/\") + 1));\n    int num = x_num * n_num;\n  \
    \  int den = x_den * n_den;\n    int gcd = std::__gcd(num, den);\n    return num\
    \ / gcd == den / gcd;", "    int x_num = std::stoi(x.substr(0, x.find('/')));\n\
    \    int x_den = std::stoi(x.substr(x.find('/') + 1));\n    int n_num = std::stoi(n.substr(0,\
    \ n.find('/')));\n    int n_den = std::stoi(n.substr(n.find('/') + 1));\n    int\
    \ num = x_num * n_num;\n    int den = x_den * n_den;\n    int gcd = __gcd(num,\
    \ den);\n    num /= gcd;\n    den /= gcd;\n    return (num % den == 0);", "  \
    \  int x_numerator = std::stoi(x.substr(0, x.find(\"/\")));\n    int x_denominator\
    \ = std::stoi(x.substr(x.find(\"/\") + 1));\n    int n_numerator = std::stoi(n.substr(0,\
    \ n.find(\"/\")));\n    int n_denominator = std::stoi(n.substr(n.find(\"/\") +\
    \ 1));\n    int product_numerator = x_numerator * n_numerator;\n    int product_denominator\
    \ = x_denominator * n_denominator;\n    return product_numerator % product_denominator\
    \ == 0;", "    int x_num = std::stoi(x.substr(0, x.find('/')));\n    int x_den\
    \ = std::stoi(x.substr(x.find('/') + 1));\n    int n_num = std::stoi(n.substr(0,\
    \ n.find('/')));\n    int n_den = std::stoi(n.substr(n.find('/') + 1));\n    int\
    \ num = x_num * n_num;\n    int den = x_den * n_den;\n    int gcd = __gcd(num,\
    \ den);\n    if (gcd == 1)\n        return true;\n    else\n        return false;",
  "    int x_num = std::stoi(x.substr(0, x.find('/')));\n    int x_den = std::stoi(x.substr(x.find('/')\
    \ + 1));\n    int n_num = std::stoi(n.substr(0, n.find('/')));\n    int n_den\
    \ = std::stoi(n.substr(n.find('/') + 1));\n    int num = x_num * n_num;\n    int\
    \ den = x_den * n_den;\n    int gcd = __gcd(num, den);\n    return (num / gcd)\
    \ % (den / gcd) == 0;", "    int x_numerator, x_denominator, n_numerator, n_denominator;\n\
    \    sscanf(x.c_str(), \"%d/%d\", &x_numerator, &x_denominator);\n    sscanf(n.c_str(),\
    \ \"%d/%d\", &n_numerator, &n_denominator);\n    int numerator = x_numerator *\
    \ n_numerator;\n    int denominator = x_denominator * n_denominator;\n    int\
    \ gcd = __gcd(numerator, denominator);\n    numerator /= gcd;\n    denominator\
    \ /= gcd;\n    return (numerator % denominator == 0);", "  // your code here\n\
    \  std::stringstream ss(x);\n  std::stringstream ss1(n);\n  int a,b,c,d;\n  char\
    \ ch;\n  ss>>a>>ch>>b;\n  ss1>>c>>ch>>d;\n  int num=a*d;\n  int den=b*c;\n  if(num%den==0)\n\
    \  return true;\n  else\n  return false;", "    int x_num, x_den, n_num, n_den;\n\
    \    std::stringstream ss;\n    ss << x;\n    ss >> x_num;\n    ss.clear();\n\
    \    ss << n;\n    ss >> n_num;\n    ss.clear();\n    ss << x;\n    ss.ignore(1,\
    \ '/');\n    ss >> x_den;\n    ss.clear();\n    ss << n;\n    ss.ignore(1, '/');\n\
    \    ss >> n_den;\n    ss.clear();\n    int num = x_num * n_num;\n    int den\
    \ = x_den * n_den;\n    if (num % den == 0) {\n        return true;\n    }\n \
    \   return false;", "    int a = std::stoi(x.substr(0, x.find('/')));\n    int\
    \ b = std::stoi(x.substr(x.find('/') + 1));\n    int c = std::stoi(n.substr(0,\
    \ n.find('/')));\n    int d = std::stoi(n.substr(n.find('/') + 1));\n    return\
    \ (a * d) % (b * c) == 0;", "    int x_numerator = std::stoi(x.substr(0, x.find(\"\
    /\")));\n    int x_denominator = std::stoi(x.substr(x.find(\"/\") + 1));\n   \
    \ int n_numerator = std::stoi(n.substr(0, n.find(\"/\")));\n    int n_denominator\
    \ = std::stoi(n.substr(n.find(\"/\") + 1));\n    int numerator = x_numerator *\
    \ n_numerator;\n    int denominator = x_denominator * n_denominator;\n    return\
    \ (numerator % denominator == 0);", "    int x_numerator, x_denominator, n_numerator,\
    \ n_denominator;\n    std::stringstream ss;\n    ss << x;\n    ss >> x_numerator;\n\
    \    ss.clear();\n    ss << n;\n    ss >> n_numerator;\n    ss.clear();\n    ss\
    \ << x;\n    ss.ignore(1, '/');\n    ss >> x_denominator;\n    ss.clear();\n \
    \   ss << n;\n    ss.ignore(1, '/');\n    ss >> n_denominator;\n    ss.clear();\n\
    \    int result_numerator = x_numerator * n_numerator;\n    int result_denominator\
    \ = x_denominator * n_denominator;\n    return result_numerator % result_denominator\
    \ == 0;", "    int x_num = std::stoi(x.substr(0, x.find(\"/\")));\n    int x_den\
    \ = std::stoi(x.substr(x.find(\"/\") + 1));\n    int n_num = std::stoi(n.substr(0,\
    \ n.find(\"/\")));\n    int n_den = std::stoi(n.substr(n.find(\"/\") + 1));\n\
    \    int num = x_num * n_num;\n    int den = x_den * n_den;\n    int gcd = __gcd(num,\
    \ den);\n    num /= gcd;\n    den /= gcd;\n    return num % den == 0;", "  //\
    \ your code here\n  int numerator1, numerator2, denominator1, denominator2;\n\
    \  std::stringstream ss(x);\n  std::stringstream ss1(n);\n  std::getline(ss, x,\
    \ '/');\n  std::getline(ss1, n, '/');\n  numerator1 = std::stoi(x);\n  numerator2\
    \ = std::stoi(n);\n  std::getline(ss, x, '/');\n  std::getline(ss1, n, '/');\n\
    \  denominator1 = std::stoi(x);\n  denominator2 = std::stoi(n);\n  int numerator\
    \ = numerator1 * denominator2;\n  int denominator = denominator1 * numerator2;\n\
    \  if(numerator % denominator == 0)\n    return true;\n  else\n    return false;",
  "  int x_numerator, x_denominator, n_numerator, n_denominator;\n  std::stringstream\
    \ ss(x);\n  std::stringstream ss2(n);\n  std::string temp;\n  std::getline(ss,\
    \ temp, '/');\n  x_numerator = std::stoi(temp);\n  std::getline(ss, temp, '/');\n\
    \  x_denominator = std::stoi(temp);\n  std::getline(ss2, temp, '/');\n  n_numerator\
    \ = std::stoi(temp);\n  std::getline(ss2, temp, '/');\n  n_denominator = std::stoi(temp);\n\
    \  int numerator = x_numerator * n_numerator;\n  int denominator = x_denominator\
    \ * n_denominator;\n  if (numerator % denominator == 0) {\n    return true;\n\
    \  }\n  return false;", "    // Your code here\n    int num1,num2,den1,den2;\n\
    \    std::stringstream ss1(x);\n    std::stringstream ss2(n);\n    std::string\
    \ temp;\n    std::getline(ss1,temp,'/');\n    num1 = std::stoi(temp);\n    std::getline(ss1,temp,'/');\n\
    \    den1 = std::stoi(temp);\n    std::getline(ss2,temp,'/');\n    num2 = std::stoi(temp);\n\
    \    std::getline(ss2,temp,'/');\n    den2 = std::stoi(temp);\n    int num = num1*num2;\n\
    \    int den = den1*den2;\n    if(num%den==0)\n        return true;\n    else\n\
    \        return false;", "    int x_numerator = std::stoi(x.substr(0, x.find(\"\
    /\")));\n    int x_denominator = std::stoi(x.substr(x.find(\"/\") + 1));\n   \
    \ int n_numerator = std::stoi(n.substr(0, n.find(\"/\")));\n    int n_denominator\
    \ = std::stoi(n.substr(n.find(\"/\") + 1));\n    int result_numerator = x_numerator\
    \ * n_numerator;\n    int result_denominator = x_denominator * n_denominator;\n\
    \    return result_numerator % result_denominator == 0;", "    int x_num = std::stoi(x.substr(0,\
    \ x.find(\"/\")));\n    int x_den = std::stoi(x.substr(x.find(\"/\") + 1));\n\
    \    int n_num = std::stoi(n.substr(0, n.find(\"/\")));\n    int n_den = std::stoi(n.substr(n.find(\"\
    /\") + 1));\n    int num = x_num * n_num;\n    int den = x_den * n_den;\n    return\
    \ (num % den == 0);", "    int x_numerator = std::stoi(x.substr(0, x.find(\"/\"\
    )));\n    int x_denominator = std::stoi(x.substr(x.find(\"/\") + 1));\n    int\
    \ n_numerator = std::stoi(n.substr(0, n.find(\"/\")));\n    int n_denominator\
    \ = std::stoi(n.substr(n.find(\"/\") + 1));\n    int numerator = x_numerator *\
    \ n_numerator;\n    int denominator = x_denominator * n_denominator;\n    return\
    \ numerator % denominator == 0;", "  int x_numerator = std::stoi(x.substr(0, x.find(\"\
    /\")));\n  int x_denominator = std::stoi(x.substr(x.find(\"/\") + 1));\n  int\
    \ n_numerator = std::stoi(n.substr(0, n.find(\"/\")));\n  int n_denominator =\
    \ std::stoi(n.substr(n.find(\"/\") + 1));\n  int numerator = x_numerator * n_numerator;\n\
    \  int denominator = x_denominator * n_denominator;\n  return (numerator % denominator\
    \ == 0);", "  int x_num = std::stoi(x.substr(0, x.find(\"/\")));\n  int x_den\
    \ = std::stoi(x.substr(x.find(\"/\") + 1));\n  int n_num = std::stoi(n.substr(0,\
    \ n.find(\"/\")));\n  int n_den = std::stoi(n.substr(n.find(\"/\") + 1));\n  int\
    \ num = x_num * n_num;\n  int den = x_den * n_den;\n  int gcd = __gcd(num, den);\n\
    \  num /= gcd;\n  den /= gcd;\n  return (num % den == 0);", "  int x_num = std::stoi(x.substr(0,\
    \ x.find(\"/\")));\n  int x_den = std::stoi(x.substr(x.find(\"/\") + 1));\n  int\
    \ n_num = std::stoi(n.substr(0, n.find(\"/\")));\n  int n_den = std::stoi(n.substr(n.find(\"\
    /\") + 1));\n  int num = x_num * n_num;\n  int den = x_den * n_den;\n  if (num\
    \ % den == 0) {\n    return true;\n  }\n  return false;", "    // Write your code\
    \ here\n    int x_num = std::stoi(x.substr(0, x.find(\"/\")));\n    int x_den\
    \ = std::stoi(x.substr(x.find(\"/\") + 1));\n    int n_num = std::stoi(n.substr(0,\
    \ n.find(\"/\")));\n    int n_den = std::stoi(n.substr(n.find(\"/\") + 1));\n\
    \    int num = x_num * n_num;\n    int den = x_den * n_den;\n    if (num % den\
    \ == 0) {\n        return true;\n    }\n    return false;", "    int x_numerator\
    \ = std::stoi(x.substr(0, x.find(\"/\")));\n    int x_denominator = std::stoi(x.substr(x.find(\"\
    /\") + 1));\n    int n_numerator = std::stoi(n.substr(0, n.find(\"/\")));\n  \
    \  int n_denominator = std::stoi(n.substr(n.find(\"/\") + 1));\n    int numerator\
    \ = x_numerator * n_numerator;\n    int denominator = x_denominator * n_denominator;\n\
    \    return numerator % denominator == 0;", "    int x_num = std::stoi(x.substr(0,\
    \ x.find(\"/\")));\n    int x_den = std::stoi(x.substr(x.find(\"/\") + 1));\n\
    \    int n_num = std::stoi(n.substr(0, n.find(\"/\")));\n    int n_den = std::stoi(n.substr(n.find(\"\
    /\") + 1));\n    int num = x_num * n_num;\n    int den = x_den * n_den;\n    return\
    \ (num % den == 0);", "    // Your code here\n    int num1, num2, den1, den2;\n\
    \    std::stringstream ss1(x);\n    std::stringstream ss2(n);\n    std::string\
    \ temp;\n    std::getline(ss1, temp, '/');\n    num1 = std::stoi(temp);\n    std::getline(ss1,\
    \ temp, '/');\n    den1 = std::stoi(temp);\n    std::getline(ss2, temp, '/');\n\
    \    num2 = std::stoi(temp);\n    std::getline(ss2, temp, '/');\n    den2 = std::stoi(temp);\n\
    \    if (num1 * den2 == num2 * den1) {\n        return true;\n    }\n    return\
    \ false;", "    int x_num = std::stoi(x.substr(0, x.find('/')));\n    int x_den\
    \ = std::stoi(x.substr(x.find('/') + 1));\n    int n_num = std::stoi(n.substr(0,\
    \ n.find('/')));\n    int n_den = std::stoi(n.substr(n.find('/') + 1));\n    int\
    \ num = x_num * n_num;\n    int den = x_den * n_den;\n    if (num % den == 0)\
    \ {\n        return true;\n    }\n    return false;", "    // Your code here\n\
    \    int x_numerator, x_denominator, n_numerator, n_denominator;\n    std::stringstream\
    \ ss;\n    ss << x;\n    ss >> x_numerator;\n    ss.ignore();\n    ss >> x_denominator;\n\
    \    ss.clear();\n    ss << n;\n    ss >> n_numerator;\n    ss.ignore();\n   \
    \ ss >> n_denominator;\n    int numerator = x_numerator * n_denominator;\n   \
    \ int denominator = x_denominator * n_numerator;\n    return numerator % denominator\
    \ == 0;", "    int x_numerator = std::stoi(x.substr(0, x.find('/')));\n    int\
    \ x_denominator = std::stoi(x.substr(x.find('/') + 1));\n    int n_numerator =\
    \ std::stoi(n.substr(0, n.find('/')));\n    int n_denominator = std::stoi(n.substr(n.find('/')\
    \ + 1));\n    int numerator = x_numerator * n_numerator;\n    int denominator\
    \ = x_denominator * n_denominator;\n    return numerator % denominator == 0;",
  "    int num1, den1, num2, den2;\n    std::stringstream ss1(x);\n    std::stringstream\
    \ ss2(n);\n    ss1 >> num1;\n    ss1.ignore();\n    ss1 >> den1;\n    ss2 >> num2;\n\
    \    ss2.ignore();\n    ss2 >> den2;\n    int num = num1 * num2;\n    int den\
    \ = den1 * den2;\n    if (num % den == 0) {\n        return true;\n    }\n   \
    \ return false;", "    int x_numerator = std::stoi(x.substr(0, x.find(\"/\")));\n\
    \    int x_denominator = std::stoi(x.substr(x.find(\"/\") + 1));\n    int n_numerator\
    \ = std::stoi(n.substr(0, n.find(\"/\")));\n    int n_denominator = std::stoi(n.substr(n.find(\"\
    /\") + 1));\n    int result_numerator = x_numerator * n_numerator;\n    int result_denominator\
    \ = x_denominator * n_denominator;\n    return (result_numerator % result_denominator\
    \ == 0);", "    int x_num = std::stoi(x.substr(0, x.find(\"/\")));\n    int x_den\
    \ = std::stoi(x.substr(x.find(\"/\") + 1));\n    int n_num = std::stoi(n.substr(0,\
    \ n.find(\"/\")));\n    int n_den = std::stoi(n.substr(n.find(\"/\") + 1));\n\
    \    int num = x_num * n_num;\n    int den = x_den * n_den;\n    int gcd = std::__gcd(num,\
    \ den);\n    num /= gcd;\n    den /= gcd;\n    return num % den == 0;", "    //\
    \ your code here\n    std::stringstream ss(x);\n    std::stringstream ss1(n);\n\
    \    int a,b,c,d;\n    char ch;\n    ss>>a>>ch>>b;\n    ss1>>c>>ch>>d;\n    int\
    \ num = a*d;\n    int den = b*c;\n    if(num%den==0)\n        return true;\n \
    \   else\n        return false;", "    // Your code here\n    int a,b,c,d;\n \
    \   char ch;\n    std::stringstream ss(x);\n    ss>>a>>ch>>b;\n    std::stringstream\
    \ ss1(n);\n    ss1>>c>>ch>>d;\n    if(a*d==b*c)\n        return true;\n    else\n\
    \        return false;", "    int x_numerator = std::stoi(x.substr(0, x.find(\"\
    /\")));\n    int x_denominator = std::stoi(x.substr(x.find(\"/\") + 1));\n   \
    \ int n_numerator = std::stoi(n.substr(0, n.find(\"/\")));\n    int n_denominator\
    \ = std::stoi(n.substr(n.find(\"/\") + 1));\n    int result_numerator = x_numerator\
    \ * n_numerator;\n    int result_denominator = x_denominator * n_denominator;\n\
    \    return result_numerator % result_denominator == 0;", "    int x_num = std::stoi(x.substr(0,\
    \ x.find('/')));\n    int x_den = std::stoi(x.substr(x.find('/') + 1));\n    int\
    \ n_num = std::stoi(n.substr(0, n.find('/')));\n    int n_den = std::stoi(n.substr(n.find('/')\
    \ + 1));\n    int num = x_num * n_num;\n    int den = x_den * n_den;\n    if (num\
    \ % den == 0) {\n        return true;\n    }\n    return false;", "    int x_numerator\
    \ = std::stoi(x.substr(0, x.find('/')));\n    int x_denominator = std::stoi(x.substr(x.find('/')\
    \ + 1));\n    int n_numerator = std::stoi(n.substr(0, n.find('/')));\n    int\
    \ n_denominator = std::stoi(n.substr(n.find('/') + 1));\n    int x_numerator_new\
    \ = x_numerator * n_denominator;\n    int n_numerator_new = n_numerator * x_denominator;\n\
    \    return x_numerator_new == n_numerator_new;", "    // Your code here\n   \
    \ int a,b,c,d;\n    std::stringstream ss(x);\n    std::stringstream ss1(n);\n\
    \    ss>>a;\n    ss.ignore();\n    ss>>b;\n    ss1>>c;\n    ss1.ignore();\n  \
    \  ss1>>d;\n    int res=a*d;\n    int res1=b*c;\n    if(res%res1==0)\n    return\
    \ true;\n    else\n    return false;", "  // your code here\n  int x_numerator\
    \ = std::stoi(x.substr(0, x.find(\"/\")));\n  int x_denominator = std::stoi(x.substr(x.find(\"\
    /\") + 1));\n  int n_numerator = std::stoi(n.substr(0, n.find(\"/\")));\n  int\
    \ n_denominator = std::stoi(n.substr(n.find(\"/\") + 1));\n  int numerator = x_numerator\
    \ * n_numerator;\n  int denominator = x_denominator * n_denominator;\n  if (numerator\
    \ % denominator == 0) {\n    return true;\n  }\n  return false;", "    int x_numerator\
    \ = std::stoi(x.substr(0, x.find('/')));\n    int x_denominator = std::stoi(x.substr(x.find('/')\
    \ + 1));\n    int n_numerator = std::stoi(n.substr(0, n.find('/')));\n    int\
    \ n_denominator = std::stoi(n.substr(n.find('/') + 1));\n    int result_numerator\
    \ = x_numerator * n_numerator;\n    int result_denominator = x_denominator * n_denominator;\n\
    \    return result_numerator % result_denominator == 0;", "    int x_numerator\
    \ = std::stoi(x.substr(0, x.find(\"/\")));\n    int x_denominator = std::stoi(x.substr(x.find(\"\
    /\") + 1));\n    int n_numerator = std::stoi(n.substr(0, n.find(\"/\")));\n  \
    \  int n_denominator = std::stoi(n.substr(n.find(\"/\") + 1));\n    int numerator\
    \ = x_numerator * n_numerator;\n    int denominator = x_denominator * n_denominator;\n\
    \    return numerator % denominator == 0;", "    int x_num = std::stoi(x.substr(0,\
    \ x.find(\"/\")));\n    int x_den = std::stoi(x.substr(x.find(\"/\") + 1));\n\
    \    int n_num = std::stoi(n.substr(0, n.find(\"/\")));\n    int n_den = std::stoi(n.substr(n.find(\"\
    /\") + 1));\n    int num = x_num * n_num;\n    int den = x_den * n_den;\n    return\
    \ num % den == 0;", "    std::stringstream ss;\n    ss << x << \" \" << n;\n \
    \   int a, b, c, d;\n    ss >> a >> b >> c >> d;\n    return (a * d) % (b * c)\
    \ == 0;", "    // Your code here\n    int x_numerator = stoi(x.substr(0, x.find('/')));\n\
    \    int x_denominator = stoi(x.substr(x.find('/') + 1));\n    int n_numerator\
    \ = stoi(n.substr(0, n.find('/')));\n    int n_denominator = stoi(n.substr(n.find('/')\
    \ + 1));\n    int numerator = x_numerator * n_numerator;\n    int denominator\
    \ = x_denominator * n_denominator;\n    return (numerator % denominator == 0);",
  "  int x_numerator = std::stoi(x.substr(0, x.find(\"/\")));\n  int x_denominator\
    \ = std::stoi(x.substr(x.find(\"/\") + 1));\n  int n_numerator = std::stoi(n.substr(0,\
    \ n.find(\"/\")));\n  int n_denominator = std::stoi(n.substr(n.find(\"/\") + 1));\n\
    \  int numerator = x_numerator * n_numerator;\n  int denominator = x_denominator\
    \ * n_denominator;\n  int gcd = std::__gcd(numerator, denominator);\n  numerator\
    \ /= gcd;\n  denominator /= gcd;\n  return numerator % denominator == 0;", " \
    \   // Your code here\n    int x_num, x_den, n_num, n_den;\n    std::stringstream\
    \ ss(x);\n    std::stringstream ss2(n);\n    std::string temp;\n    std::getline(ss,\
    \ temp, '/');\n    x_num = std::stoi(temp);\n    std::getline(ss, temp, '/');\n\
    \    x_den = std::stoi(temp);\n    std::getline(ss2, temp, '/');\n    n_num =\
    \ std::stoi(temp);\n    std::getline(ss2, temp, '/');\n    n_den = std::stoi(temp);\n\
    \    int num = x_num * n_num;\n    int den = x_den * n_den;\n    if (num % den\
    \ == 0)\n        return true;\n    else\n        return false;", "    int x_num\
    \ = std::stoi(x.substr(0, x.find(\"/\")));\n    int x_den = std::stoi(x.substr(x.find(\"\
    /\") + 1));\n    int n_num = std::stoi(n.substr(0, n.find(\"/\")));\n    int n_den\
    \ = std::stoi(n.substr(n.find(\"/\") + 1));\n    int num = x_num * n_num;\n  \
    \  int den = x_den * n_den;\n    int gcd = __gcd(num, den);\n    num /= gcd;\n\
    \    den /= gcd;\n    return num % den == 0;", "    int x_numerator = std::stoi(x.substr(0,\
    \ x.find(\"/\")));\n    int x_denominator = std::stoi(x.substr(x.find(\"/\") +\
    \ 1));\n    int n_numerator = std::stoi(n.substr(0, n.find(\"/\")));\n    int\
    \ n_denominator = std::stoi(n.substr(n.find(\"/\") + 1));\n    int num = x_numerator\
    \ * n_numerator;\n    int den = x_denominator * n_denominator;\n    return num\
    \ % den == 0;", "    // your code here\n    int num1, num2, den1, den2;\n    std::stringstream\
    \ ss1(x);\n    std::stringstream ss2(n);\n    ss1 >> num1;\n    ss1.ignore();\n\
    \    ss1 >> den1;\n    ss2 >> num2;\n    ss2.ignore();\n    ss2 >> den2;\n   \
    \ int num = num1 * num2;\n    int den = den1 * den2;\n    if (num % den == 0)\
    \ {\n        return true;\n    }\n    return false;", "  int num1, num2, den1,\
    \ den2;\n  std::stringstream ss1(x);\n  std::stringstream ss2(n);\n  char ch;\n\
    \  ss1 >> num1 >> ch >> den1;\n  ss2 >> num2 >> ch >> den2;\n  int num = num1\
    \ * num2;\n  int den = den1 * den2;\n  return num % den == 0;", "    int x_num\
    \ = std::stoi(x.substr(0, x.find('/')));\n    int x_den = std::stoi(x.substr(x.find('/')\
    \ + 1));\n    int n_num = std::stoi(n.substr(0, n.find('/')));\n    int n_den\
    \ = std::stoi(n.substr(n.find('/') + 1));\n    int num = x_num * n_num;\n    int\
    \ den = x_den * n_den;\n    return (num % den == 0);", "  // your code here\n\
    \  int x_numerator, x_denominator, n_numerator, n_denominator;\n  std::stringstream\
    \ ss1(x);\n  std::stringstream ss2(n);\n  std::string temp;\n  std::getline(ss1,\
    \ temp, '/');\n  x_numerator = std::stoi(temp);\n  std::getline(ss1, temp, '/');\n\
    \  x_denominator = std::stoi(temp);\n  std::getline(ss2, temp, '/');\n  n_numerator\
    \ = std::stoi(temp);\n  std::getline(ss2, temp, '/');\n  n_denominator = std::stoi(temp);\n\
    \  int numerator = x_numerator * n_numerator;\n  int denominator = x_denominator\
    \ * n_denominator;\n  if (numerator % denominator == 0) {\n    return true;\n\
    \  }\n  return false;", "    int x_num = std::stoi(x.substr(0, x.find(\"/\")));\n\
    \    int x_den = std::stoi(x.substr(x.find(\"/\") + 1));\n    int n_num = std::stoi(n.substr(0,\
    \ n.find(\"/\")));\n    int n_den = std::stoi(n.substr(n.find(\"/\") + 1));\n\
    \    int num = x_num * n_num;\n    int den = x_den * n_den;\n    if (num % den\
    \ == 0) {\n        return true;\n    }\n    return false;", "    int a = std::stoi(x.substr(0,\
    \ x.find('/')));\n    int b = std::stoi(x.substr(x.find('/') + 1));\n    int c\
    \ = std::stoi(n.substr(0, n.find('/')));\n    int d = std::stoi(n.substr(n.find('/')\
    \ + 1));\n    return (a * d) % (b * c) == 0;", "  int x_numerator = std::stoi(x.substr(0,\
    \ x.find('/')));\n  int x_denominator = std::stoi(x.substr(x.find('/') + 1));\n\
    \  int n_numerator = std::stoi(n.substr(0, n.find('/')));\n  int n_denominator\
    \ = std::stoi(n.substr(n.find('/') + 1));\n  int result_numerator = x_numerator\
    \ * n_numerator;\n  int result_denominator = x_denominator * n_denominator;\n\
    \  return result_numerator % result_denominator == 0;", "    std::stringstream\
    \ ss(x);\n    std::stringstream ss1(n);\n    std::string temp;\n    std::string\
    \ temp1;\n    std::getline(ss, temp, '/');\n    std::getline(ss1, temp1, '/');\n\
    \    int numerator = std::stoi(temp);\n    int denominator = std::stoi(temp1);\n\
    \    if (numerator % denominator == 0) {\n        return true;\n    }\n    return\
    \ false;", "    int x_numerator = std::stoi(x.substr(0, x.find(\"/\")));\n   \
    \ int x_denominator = std::stoi(x.substr(x.find(\"/\") + 1));\n    int n_numerator\
    \ = std::stoi(n.substr(0, n.find(\"/\")));\n    int n_denominator = std::stoi(n.substr(n.find(\"\
    /\") + 1));\n    int result_numerator = x_numerator * n_numerator;\n    int result_denominator\
    \ = x_denominator * n_denominator;\n    return (result_numerator % result_denominator\
    \ == 0);", "  // Your code here\n  int x_num = std::stoi(x.substr(0, x.find(\"\
    /\")));\n  int x_den = std::stoi(x.substr(x.find(\"/\") + 1));\n  int n_num =\
    \ std::stoi(n.substr(0, n.find(\"/\")));\n  int n_den = std::stoi(n.substr(n.find(\"\
    /\") + 1));\n  int num = x_num * n_num;\n  int den = x_den * n_den;\n  int gcd\
    \ = std::__gcd(num, den);\n  num /= gcd;\n  den /= gcd;\n  return num % den ==\
    \ 0;", "  int x_numerator = std::stoi(x.substr(0, x.find(\"/\")));\n  int x_denominator\
    \ = std::stoi(x.substr(x.find(\"/\") + 1));\n  int n_numerator = std::stoi(n.substr(0,\
    \ n.find(\"/\")));\n  int n_denominator = std::stoi(n.substr(n.find(\"/\") + 1));\n\
    \  int result_numerator = x_numerator * n_numerator;\n  int result_denominator\
    \ = x_denominator * n_denominator;\n  return (result_numerator % result_denominator\
    \ == 0);", "    int x_numerator, x_denominator, n_numerator, n_denominator;\n\
    \    std::stringstream ss(x);\n    ss >> x_numerator;\n    ss.ignore();\n    ss\
    \ >> x_denominator;\n    std::stringstream ss1(n);\n    ss1 >> n_numerator;\n\
    \    ss1.ignore();\n    ss1 >> n_denominator;\n    int result_numerator = x_numerator\
    \ * n_numerator;\n    int result_denominator = x_denominator * n_denominator;\n\
    \    if (result_numerator % result_denominator == 0) {\n        return true;\n\
    \    }\n    return false;", "    int x_num, x_den, n_num, n_den;\n    sscanf(x.c_str(),\
    \ \"%d/%d\", &x_num, &x_den);\n    sscanf(n.c_str(), \"%d/%d\", &n_num, &n_den);\n\
    \    int num = x_num * n_num;\n    int den = x_den * n_den;\n    return num %\
    \ den == 0;", "  int x_num = std::stoi(x.substr(0, x.find('/')));\n  int x_den\
    \ = std::stoi(x.substr(x.find('/') + 1));\n  int n_num = std::stoi(n.substr(0,\
    \ n.find('/')));\n  int n_den = std::stoi(n.substr(n.find('/') + 1));\n  int num\
    \ = x_num * n_num;\n  int den = x_den * n_den;\n  int gcd = std::__gcd(num, den);\n\
    \  return (num / gcd) % (den / gcd) == 0;", "    int x_numerator, x_denominator,\
    \ n_numerator, n_denominator;\n    std::stringstream ss;\n    ss << x;\n    ss\
    \ >> x_numerator;\n    ss.clear();\n    ss << n;\n    ss >> n_numerator;\n   \
    \ ss.clear();\n    ss << x;\n    ss.ignore(1, '/');\n    ss >> x_denominator;\n\
    \    ss.clear();\n    ss << n;\n    ss.ignore(1, '/');\n    ss >> n_denominator;\n\
    \    ss.clear();\n    return (x_numerator * n_denominator) % (x_denominator *\
    \ n_numerator) == 0;", "    int x_numerator, x_denominator, n_numerator, n_denominator;\n\
    \    std::stringstream ss_x(x);\n    std::stringstream ss_n(n);\n    std::string\
    \ x_numerator_str, x_denominator_str, n_numerator_str, n_denominator_str;\n  \
    \  std::getline(ss_x, x_numerator_str, '/');\n    std::getline(ss_x, x_denominator_str,\
    \ '/');\n    std::getline(ss_n, n_numerator_str, '/');\n    std::getline(ss_n,\
    \ n_denominator_str, '/');\n    x_numerator = std::stoi(x_numerator_str);\n  \
    \  x_denominator = std::stoi(x_denominator_str);\n    n_numerator = std::stoi(n_numerator_str);\n\
    \    n_denominator = std::stoi(n_denominator_str);\n    int x_numerator_new =\
    \ x_numerator * n_denominator;\n    int x_denominator_new = x_denominator * n_numerator;\n\
    \    if (x_numerator_new % x_denominator_new == 0) {\n        return true;\n \
    \   }\n    return false;", "  int x_num = std::stoi(x.substr(0, x.find('/')));\n\
    \  int x_den = std::stoi(x.substr(x.find('/') + 1));\n  int n_num = std::stoi(n.substr(0,\
    \ n.find('/')));\n  int n_den = std::stoi(n.substr(n.find('/') + 1));\n  int num\
    \ = x_num * n_num;\n  int den = x_den * n_den;\n  if (num % den == 0) {\n    return\
    \ true;\n  }\n  return false;", "  // Your code here\n  int numerator1, numerator2,\
    \ denominator1, denominator2;\n  char slash;\n  std::stringstream ss1(x);\n  std::stringstream\
    \ ss2(n);\n  ss1 >> numerator1 >> slash >> denominator1;\n  ss2 >> numerator2\
    \ >> slash >> denominator2;\n  int numerator = numerator1 * denominator2;\n  int\
    \ denominator = denominator1 * numerator2;\n  if (numerator % denominator == 0)\
    \ {\n    return true;\n  }\n  return false;", "  // Your code here\n  int x_num\
    \ = std::stoi(x.substr(0, x.find(\"/\")));\n  int x_den = std::stoi(x.substr(x.find(\"\
    /\") + 1));\n  int n_num = std::stoi(n.substr(0, n.find(\"/\")));\n  int n_den\
    \ = std::stoi(n.substr(n.find(\"/\") + 1));\n  int num = x_num * n_num;\n  int\
    \ den = x_den * n_den;\n  if (num % den == 0) {\n    return true;\n  }\n  return\
    \ false;", "    int x_num, x_den, n_num, n_den;\n    std::stringstream ss1(x);\n\
    \    std::stringstream ss2(n);\n    std::string temp;\n    std::getline(ss1, temp,\
    \ '/');\n    x_num = std::stoi(temp);\n    std::getline(ss1, temp, '/');\n   \
    \ x_den = std::stoi(temp);\n    std::getline(ss2, temp, '/');\n    n_num = std::stoi(temp);\n\
    \    std::getline(ss2, temp, '/');\n    n_den = std::stoi(temp);\n    int num\
    \ = x_num * n_num;\n    int den = x_den * n_den;\n    if (num % den == 0) {\n\
    \        return true;\n    }\n    return false;", "    int x_num = std::stoi(x.substr(0,\
    \ x.find('/')));\n    int x_den = std::stoi(x.substr(x.find('/') + 1));\n    int\
    \ n_num = std::stoi(n.substr(0, n.find('/')));\n    int n_den = std::stoi(n.substr(n.find('/')\
    \ + 1));\n    int num = x_num * n_num;\n    int den = x_den * n_den;\n    int\
    \ gcd = __gcd(num, den);\n    return den / gcd == 1;", "  int x_num = std::stoi(x.substr(0,\
    \ x.find('/')));\n  int x_den = std::stoi(x.substr(x.find('/') + 1));\n  int n_num\
    \ = std::stoi(n.substr(0, n.find('/')));\n  int n_den = std::stoi(n.substr(n.find('/')\
    \ + 1));\n  int num = x_num * n_num;\n  int den = x_den * n_den;\n  return num\
    \ % den == 0;", "    // Your code here\n    int num1, num2, den1, den2;\n    std::stringstream\
    \ ss1(x);\n    std::stringstream ss2(n);\n    std::string temp;\n    getline(ss1,\
    \ temp, '/');\n    num1 = std::stoi(temp);\n    getline(ss1, temp, '/');\n   \
    \ den1 = std::stoi(temp);\n    getline(ss2, temp, '/');\n    num2 = std::stoi(temp);\n\
    \    getline(ss2, temp, '/');\n    den2 = std::stoi(temp);\n    int num = num1\
    \ * num2;\n    int den = den1 * den2;\n    if (num % den == 0)\n        return\
    \ true;\n    else\n        return false;", "    int x_num = std::stoi(x.substr(0,\
    \ x.find(\"/\")));\n    int x_den = std::stoi(x.substr(x.find(\"/\") + 1));\n\
    \    int n_num = std::stoi(n.substr(0, n.find(\"/\")));\n    int n_den = std::stoi(n.substr(n.find(\"\
    /\") + 1));\n    int num = x_num * n_num;\n    int den = x_den * n_den;\n    int\
    \ gcd = std::__gcd(num, den);\n    num /= gcd;\n    den /= gcd;\n    return num\
    \ % den == 0;", "    int x_numerator = std::stoi(x.substr(0, x.find(\"/\")));\n\
    \    int x_denominator = std::stoi(x.substr(x.find(\"/\") + 1));\n    int n_numerator\
    \ = std::stoi(n.substr(0, n.find(\"/\")));\n    int n_denominator = std::stoi(n.substr(n.find(\"\
    /\") + 1));\n    int numerator = x_numerator * n_numerator;\n    int denominator\
    \ = x_denominator * n_denominator;\n    return numerator % denominator == 0;",
  "    int x_num = std::stoi(x.substr(0, x.find(\"/\")));\n    int x_den = std::stoi(x.substr(x.find(\"\
    /\") + 1));\n    int n_num = std::stoi(n.substr(0, n.find(\"/\")));\n    int n_den\
    \ = std::stoi(n.substr(n.find(\"/\") + 1));\n    int num = x_num * n_num;\n  \
    \  int den = x_den * n_den;\n    int gcd = __gcd(num, den);\n    return (den /\
    \ gcd) % (num / gcd) == 0;", "    int x_numerator = std::stoi(x.substr(0, x.find('/')));\n\
    \    int x_denominator = std::stoi(x.substr(x.find('/') + 1));\n    int n_numerator\
    \ = std::stoi(n.substr(0, n.find('/')));\n    int n_denominator = std::stoi(n.substr(n.find('/')\
    \ + 1));\n    int result_numerator = x_numerator * n_numerator;\n    int result_denominator\
    \ = x_denominator * n_denominator;\n    return (result_numerator % result_denominator\
    \ == 0);", "    int x_num, x_den, n_num, n_den;\n    std::stringstream ss1(x);\n\
    \    std::stringstream ss2(n);\n    std::string temp;\n    std::getline(ss1, temp,\
    \ '/');\n    x_num = std::stoi(temp);\n    std::getline(ss1, temp, '/');\n   \
    \ x_den = std::stoi(temp);\n    std::getline(ss2, temp, '/');\n    n_num = std::stoi(temp);\n\
    \    std::getline(ss2, temp, '/');\n    n_den = std::stoi(temp);\n    return (x_num\
    \ * n_den) % (x_den * n_num) == 0;", "    int x_num = std::stoi(x.substr(0, x.find('/')));\n\
    \    int x_den = std::stoi(x.substr(x.find('/') + 1));\n    int n_num = std::stoi(n.substr(0,\
    \ n.find('/')));\n    int n_den = std::stoi(n.substr(n.find('/') + 1));\n    return\
    \ (x_num * n_den) % (x_den * n_num) == 0;", "    std::stringstream ss;\n    ss\
    \ << x << \" \" << n;\n    int a, b, c, d;\n    char slash;\n    ss >> a >> slash\
    \ >> b >> c >> slash >> d;\n    return (a * d) % (b * c) == 0;", "  // Your code\
    \ here\n  int num1, num2, den1, den2;\n  std::stringstream ss1(x);\n  std::stringstream\
    \ ss2(n);\n  ss1 >> num1;\n  ss1.ignore();\n  ss1 >> den1;\n  ss2 >> num2;\n \
    \ ss2.ignore();\n  ss2 >> den2;\n  int num = num1 * num2;\n  int den = den1 *\
    \ den2;\n  if (num % den == 0) {\n    return true;\n  }\n  return false;", " \
    \ // your code here\n  std::stringstream ss(x);\n  std::stringstream ss1(n);\n\
    \  std::string temp;\n  std::string temp1;\n  std::getline(ss, temp, '/');\n \
    \ std::getline(ss1, temp1, '/');\n  int a = std::stoi(temp);\n  int b = std::stoi(temp1);\n\
    \  int c = a * b;\n  if (c % b == 0)\n    return true;\n  else\n    return false;",
  "    int a,b,c,d;\n    sscanf(x.c_str(),\"%d/%d\",&a,&b);\n    sscanf(n.c_str(),\"\
    %d/%d\",&c,&d);\n    return (a*d)%(b*c)==0;", "    int x_numerator = std::stoi(x.substr(0,\
    \ x.find(\"/\")));\n    int x_denominator = std::stoi(x.substr(x.find(\"/\") +\
    \ 1));\n    int n_numerator = std::stoi(n.substr(0, n.find(\"/\")));\n    int\
    \ n_denominator = std::stoi(n.substr(n.find(\"/\") + 1));\n    int numerator =\
    \ x_numerator * n_numerator;\n    int denominator = x_denominator * n_denominator;\n\
    \    return numerator % denominator == 0;", "  std::stringstream ss(x);\n  std::string\
    \ token;\n  std::vector<int> v;\n  while(std::getline(ss, token, '/')) {\n   \
    \ v.push_back(std::stoi(token));\n  }\n  int numerator = v[0];\n  int denominator\
    \ = v[1];\n  ss.clear();\n  ss.str(n);\n  v.clear();\n  while(std::getline(ss,\
    \ token, '/')) {\n    v.push_back(std::stoi(token));\n  }\n  int numerator2 =\
    \ v[0];\n  int denominator2 = v[1];\n  return (numerator * denominator2) % (denominator\
    \ * numerator2) == 0;", "    int x_num = std::stoi(x.substr(0, x.find('/')));\n\
    \    int x_den = std::stoi(x.substr(x.find('/') + 1));\n    int n_num = std::stoi(n.substr(0,\
    \ n.find('/')));\n    int n_den = std::stoi(n.substr(n.find('/') + 1));\n    int\
    \ num = x_num * n_num;\n    int den = x_den * n_den;\n    return (num % den ==\
    \ 0);", "    int x_num = std::stoi(x.substr(0, x.find('/')));\n    int x_den =\
    \ std::stoi(x.substr(x.find('/') + 1));\n    int n_num = std::stoi(n.substr(0,\
    \ n.find('/')));\n    int n_den = std::stoi(n.substr(n.find('/') + 1));\n    int\
    \ num = x_num * n_num;\n    int den = x_den * n_den;\n    if (num % den == 0)\
    \ {\n        return true;\n    }\n    return false;", "    std::stringstream ss;\n\
    \    ss << x << \" \" << n;\n    int x_num, x_den, n_num, n_den;\n    char c;\n\
    \    ss >> x_num >> c >> x_den >> n_num >> c >> n_den;\n    return x_num * n_den\
    \ == x_den * n_num;", "    // Your code here\n    std::stringstream ss(x);\n \
    \   std::string item;\n    std::vector<std::string> tokens;\n    while (std::getline(ss,\
    \ item, '/')) {\n        tokens.push_back(item);\n    }\n    int x_num = std::stoi(tokens[0]);\n\
    \    int x_den = std::stoi(tokens[1]);\n    tokens.clear();\n    ss.clear();\n\
    \    ss.str(n);\n    while (std::getline(ss, item, '/')) {\n        tokens.push_back(item);\n\
    \    }\n    int n_num = std::stoi(tokens[0]);\n    int n_den = std::stoi(tokens[1]);\n\
    \    int num = x_num * n_num;\n    int den = x_den * n_den;\n    return (num %\
    \ den == 0);", "  // your code here\n  std::stringstream ss(x);\n  std::stringstream\
    \ ss1(n);\n  std::string s;\n  std::string s1;\n  std::getline(ss, s, '/');\n\
    \  std::getline(ss1, s1, '/');\n  int num = std::stoi(s);\n  int den = std::stoi(s1);\n\
    \  int res = num * den;\n  if(res % den == 0)\n    return true;\n  else\n    return\
    \ false;", "    int x_num, x_den, n_num, n_den;\n    std::stringstream ss(x);\n\
    \    ss >> x_num;\n    ss.ignore();\n    ss >> x_den;\n    ss.str(n);\n    ss\
    \ >> n_num;\n    ss.ignore();\n    ss >> n_den;\n    int num = x_num * n_num;\n\
    \    int den = x_den * n_den;\n    return num % den == 0;", "    int x_numerator\
    \ = std::stoi(x.substr(0, x.find(\"/\")));\n    int x_denominator = std::stoi(x.substr(x.find(\"\
    /\") + 1));\n    int n_numerator = std::stoi(n.substr(0, n.find(\"/\")));\n  \
    \  int n_denominator = std::stoi(n.substr(n.find(\"/\") + 1));\n    int result_numerator\
    \ = x_numerator * n_numerator;\n    int result_denominator = x_denominator * n_denominator;\n\
    \    if (result_numerator % result_denominator == 0) {\n        return true;\n\
    \    }\n    return false;", "    int x_numerator = std::stoi(x.substr(0, x.find(\"\
    /\")));\n    int x_denominator = std::stoi(x.substr(x.find(\"/\") + 1));\n   \
    \ int n_numerator = std::stoi(n.substr(0, n.find(\"/\")));\n    int n_denominator\
    \ = std::stoi(n.substr(n.find(\"/\") + 1));\n    int numerator = x_numerator *\
    \ n_numerator;\n    int denominator = x_denominator * n_denominator;\n    return\
    \ numerator % denominator == 0;", "    int x_num = std::stoi(x.substr(0, x.find('/')));\n\
    \    int x_den = std::stoi(x.substr(x.find('/') + 1));\n    int n_num = std::stoi(n.substr(0,\
    \ n.find('/')));\n    int n_den = std::stoi(n.substr(n.find('/') + 1));\n    return\
    \ (x_num * n_den) % (x_den * n_num) == 0;", "    int x_numerator = std::stoi(x.substr(0,\
    \ x.find(\"/\")));\n    int x_denominator = std::stoi(x.substr(x.find(\"/\") +\
    \ 1));\n    int n_numerator = std::stoi(n.substr(0, n.find(\"/\")));\n    int\
    \ n_denominator = std::stoi(n.substr(n.find(\"/\") + 1));\n    int numerator =\
    \ x_numerator * n_numerator;\n    int denominator = x_denominator * n_denominator;\n\
    \    if (numerator % denominator == 0) {\n        return true;\n    }\n    return\
    \ false;", "    int x_numerator = stoi(x.substr(0, x.find('/')));\n    int x_denominator\
    \ = stoi(x.substr(x.find('/') + 1));\n    int n_numerator = stoi(n.substr(0, n.find('/')));\n\
    \    int n_denominator = stoi(n.substr(n.find('/') + 1));\n    int numerator =\
    \ x_numerator * n_numerator;\n    int denominator = x_denominator * n_denominator;\n\
    \    return (numerator % denominator == 0);", "    int x_num, x_den, n_num, n_den;\n\
    \    std::stringstream ss1(x);\n    std::stringstream ss2(n);\n    char ch;\n\
    \    ss1 >> x_num >> ch >> x_den;\n    ss2 >> n_num >> ch >> n_den;\n    int num\
    \ = x_num * n_num;\n    int den = x_den * n_den;\n    if (num % den == 0)\n  \
    \      return true;\n    return false;", "  // your code here\n  int a = std::stoi(x.substr(0,\
    \ x.find(\"/\")));\n  int b = std::stoi(x.substr(x.find(\"/\") + 1));\n  int c\
    \ = std::stoi(n.substr(0, n.find(\"/\")));\n  int d = std::stoi(n.substr(n.find(\"\
    /\") + 1));\n  return (a * d) % (b * c) == 0;", "    int x_numerator = std::stoi(x.substr(0,\
    \ x.find(\"/\")));\n    int x_denominator = std::stoi(x.substr(x.find(\"/\") +\
    \ 1));\n    int n_numerator = std::stoi(n.substr(0, n.find(\"/\")));\n    int\
    \ n_denominator = std::stoi(n.substr(n.find(\"/\") + 1));\n    int product_numerator\
    \ = x_numerator * n_numerator;\n    int product_denominator = x_denominator *\
    \ n_denominator;\n    if (product_numerator % product_denominator == 0) {\n  \
    \      return true;\n    }\n    return false;", "    std::stringstream ss1(x);\n\
    \    std::stringstream ss2(n);\n    int a, b, c, d;\n    char ch;\n    ss1 >>\
    \ a >> ch >> b;\n    ss2 >> c >> ch >> d;\n    return (a * d) % (b * c) == 0;",
  "    // Your code here\n    int a,b,c,d;\n    std::stringstream ss(x);\n    std::stringstream\
    \ ss1(n);\n    ss>>a;\n    ss.ignore();\n    ss>>b;\n    ss1>>c;\n    ss1.ignore();\n\
    \    ss1>>d;\n    if((a*d)%(b*c)==0)\n        return true;\n    else\n       \
    \ return false;", "    int x_num = std::stoi(x.substr(0, x.find(\"/\")));\n  \
    \  int x_den = std::stoi(x.substr(x.find(\"/\") + 1));\n    int n_num = std::stoi(n.substr(0,\
    \ n.find(\"/\")));\n    int n_den = std::stoi(n.substr(n.find(\"/\") + 1));\n\
    \    int num = x_num * n_num;\n    int den = x_den * n_den;\n    return (num %\
    \ den == 0);", "    int x_num = std::stoi(x.substr(0, x.find(\"/\")));\n    int\
    \ x_den = std::stoi(x.substr(x.find(\"/\") + 1));\n    int n_num = std::stoi(n.substr(0,\
    \ n.find(\"/\")));\n    int n_den = std::stoi(n.substr(n.find(\"/\") + 1));\n\
    \    int num = x_num * n_num;\n    int den = x_den * n_den;\n    return num %\
    \ den == 0;", "    int x_numerator = std::stoi(x.substr(0, x.find('/')));\n  \
    \  int x_denominator = std::stoi(x.substr(x.find('/') + 1));\n    int n_numerator\
    \ = std::stoi(n.substr(0, n.find('/')));\n    int n_denominator = std::stoi(n.substr(n.find('/')\
    \ + 1));\n    int result_numerator = x_numerator * n_numerator;\n    int result_denominator\
    \ = x_denominator * n_denominator;\n    return (result_numerator % result_denominator\
    \ == 0);", "    // Your code here\n    int x_numerator = std::stoi(x.substr(0,\
    \ x.find('/')));\n    int x_denominator = std::stoi(x.substr(x.find('/') + 1));\n\
    \    int n_numerator = std::stoi(n.substr(0, n.find('/')));\n    int n_denominator\
    \ = std::stoi(n.substr(n.find('/') + 1));\n    int result_numerator = x_numerator\
    \ * n_numerator;\n    int result_denominator = x_denominator * n_denominator;\n\
    \    int gcd = __gcd(result_numerator, result_denominator);\n    result_numerator\
    \ /= gcd;\n    result_denominator /= gcd;\n    return result_denominator == 1;",
  "    int numerator = std::stoi(x.substr(0, x.find(\"/\")));\n    int denominator\
    \ = std::stoi(x.substr(x.find(\"/\") + 1));\n    int numerator2 = std::stoi(n.substr(0,\
    \ n.find(\"/\")));\n    int denominator2 = std::stoi(n.substr(n.find(\"/\") +\
    \ 1));\n    int num = numerator * denominator2;\n    int den = denominator * numerator2;\n\
    \    if (num % den == 0) {\n        return true;\n    }\n    return false;", " \
    \   int x_numerator = std::stoi(x.substr(0, x.find(\"/\")));\n    int x_denominator\
    \ = std::stoi(x.substr(x.find(\"/\") + 1));\n    int n_numerator = std::stoi(n.substr(0,\
    \ n.find(\"/\")));\n    int n_denominator = std::stoi(n.substr(n.find(\"/\") +\
    \ 1));\n    int numerator = x_numerator * n_numerator;\n    int denominator =\
    \ x_denominator * n_denominator;\n    if (numerator % denominator == 0) {\n  \
    \      return true;\n    }\n    return false;", "  std::stringstream ss1(x);\n\
    \  std::stringstream ss2(n);\n  std::string num1, num2, den1, den2;\n  getline(ss1,\
    \ num1, '/');\n  getline(ss1, den1, '/');\n  getline(ss2, num2, '/');\n  getline(ss2,\
    \ den2, '/');\n  int a = std::stoi(num1);\n  int b = std::stoi(den1);\n  int c\
    \ = std::stoi(num2);\n  int d = std::stoi(den2);\n  int e = a * c;\n  int f =\
    \ b * d;\n  if (e % f == 0) {\n    return true;\n  }\n  return false;", "    int\
    \ x_num = std::stoi(x.substr(0, x.find('/')));\n    int x_den = std::stoi(x.substr(x.find('/')\
    \ + 1));\n    int n_num = std::stoi(n.substr(0, n.find('/')));\n    int n_den\
    \ = std::stoi(n.substr(n.find('/') + 1));\n    return (x_num * n_den) % (x_den\
    \ * n_num) == 0;", "    int x_numerator = std::stoi(x.substr(0, x.find('/')));\n\
    \    int x_denominator = std::stoi(x.substr(x.find('/') + 1));\n    int n_numerator\
    \ = std::stoi(n.substr(0, n.find('/')));\n    int n_denominator = std::stoi(n.substr(n.find('/')\
    \ + 1));\n    int x_numerator_new = x_numerator * n_denominator;\n    int n_numerator_new\
    \ = n_numerator * x_denominator;\n    return x_numerator_new == n_numerator_new;",
  "    // Your code here\n    int num1, den1, num2, den2;\n    std::stringstream ss1(x);\n\
    \    std::stringstream ss2(n);\n    std::getline(ss1, x, '/');\n    std::getline(ss1,\
    \ x, '/');\n    std::getline(ss2, n, '/');\n    std::getline(ss2, n, '/');\n \
    \   num1 = std::stoi(x);\n    den1 = std::stoi(n);\n    num2 = std::stoi(x);\n\
    \    den2 = std::stoi(n);\n    int num = num1 * den2;\n    int den = den1 * num2;\n\
    \    if (num % den == 0)\n        return true;\n    else\n        return false;",
  "  std::stringstream ss;\n  int a, b, c, d;\n  ss << x;\n  ss >> a;\n  ss.clear();\n\
    \  ss << n;\n  ss >> b;\n  ss.clear();\n  ss << x.substr(x.find(\"/\") + 1);\n\
    \  ss >> c;\n  ss.clear();\n  ss << n.substr(n.find(\"/\") + 1);\n  ss >> d;\n\
    \  ss.clear();\n  return (a * d) % (b * c) == 0;", "    // your code here\n  \
    \  int x_numerator = std::stoi(x.substr(0, x.find('/')));\n    int x_denominator\
    \ = std::stoi(x.substr(x.find('/') + 1));\n    int n_numerator = std::stoi(n.substr(0,\
    \ n.find('/')));\n    int n_denominator = std::stoi(n.substr(n.find('/') + 1));\n\
    \    int result_numerator = x_numerator * n_numerator;\n    int result_denominator\
    \ = x_denominator * n_denominator;\n    return (result_numerator % result_denominator\
    \ == 0);", "    int x_numerator = std::stoi(x.substr(0, x.find('/')));\n    int\
    \ x_denominator = std::stoi(x.substr(x.find('/') + 1));\n    int n_numerator =\
    \ std::stoi(n.substr(0, n.find('/')));\n    int n_denominator = std::stoi(n.substr(n.find('/')\
    \ + 1));\n    int numerator = x_numerator * n_numerator;\n    int denominator\
    \ = x_denominator * n_denominator;\n    return numerator % denominator == 0;",
  "\tint x_numerator = std::stoi(x.substr(0, x.find(\"/\")));\n\tint x_denominator\
    \ = std::stoi(x.substr(x.find(\"/\") + 1));\n\tint n_numerator = std::stoi(n.substr(0,\
    \ n.find(\"/\")));\n\tint n_denominator = std::stoi(n.substr(n.find(\"/\") + 1));\n\
    \tint numerator = x_numerator * n_numerator;\n\tint denominator = x_denominator\
    \ * n_denominator;\n\tint gcd = std::__gcd(numerator, denominator);\n\treturn\
    \ (numerator / gcd) % (denominator / gcd) == 0;", "  // your code here\n  int\
    \ x1,x2,n1,n2;\n  std::stringstream ss(x);\n  std::stringstream ss1(n);\n  std::getline(ss,x,'/');\n\
    \  std::getline(ss1,n,'/');\n  x1=std::stoi(x);\n  x2=std::stoi(n);\n  std::getline(ss,x,'/');\n\
    \  std::getline(ss1,n,'/');\n  n1=std::stoi(x);\n  n2=std::stoi(n);\n  if(x1*n2==x2*n1)\n\
    \  return true;\n  else\n  return false;", "    int num1, num2, den1, den2;\n\
    \    int i = 0;\n    while(x[i] != '/') {\n        num1 = num1 * 10 + (x[i] -\
    \ '0');\n        i++;\n    }\n    i++;\n    while(x[i] != '\\0') {\n        den1\
    \ = den1 * 10 + (x[i] - '0');\n        i++;\n    }\n    i = 0;\n    while(n[i]\
    \ != '/') {\n        num2 = num2 * 10 + (n[i] - '0');\n        i++;\n    }\n \
    \   i++;\n    while(n[i] != '\\0') {\n        den2 = den2 * 10 + (n[i] - '0');\n\
    \        i++;\n    }\n    int num = num1 * num2;\n    int den = den1 * den2;\n\
    \    int gcd = __gcd(num, den);\n    num = num / gcd;\n    den = den / gcd;\n\
    \    if(num % den == 0) {\n        return true;\n    }\n    return false;", " \
    \ int x_num = std::stoi(x.substr(0, x.find(\"/\")));\n  int x_den = std::stoi(x.substr(x.find(\"\
    /\") + 1));\n  int n_num = std::stoi(n.substr(0, n.find(\"/\")));\n  int n_den\
    \ = std::stoi(n.substr(n.find(\"/\") + 1));\n  int num = x_num * n_num;\n  int\
    \ den = x_den * n_den;\n  int gcd = __gcd(num, den);\n  num /= gcd;\n  den /=\
    \ gcd;\n  return num % den == 0;", "    int x_numerator = std::stoi(x.substr(0,\
    \ x.find('/')));\n    int x_denominator = std::stoi(x.substr(x.find('/') + 1));\n\
    \    int n_numerator = std::stoi(n.substr(0, n.find('/')));\n    int n_denominator\
    \ = std::stoi(n.substr(n.find('/') + 1));\n    int result_numerator = x_numerator\
    \ * n_numerator;\n    int result_denominator = x_denominator * n_denominator;\n\
    \    return result_numerator % result_denominator == 0;", "  int numerator = std::stoi(x.substr(0,\
    \ x.find(\"/\")));\n  int denominator = std::stoi(x.substr(x.find(\"/\") + 1));\n\
    \  int numerator2 = std::stoi(n.substr(0, n.find(\"/\")));\n  int denominator2\
    \ = std::stoi(n.substr(n.find(\"/\") + 1));\n  int num = numerator * denominator2;\n\
    \  int den = denominator * numerator2;\n  if (num % den == 0) {\n    return true;\n\
    \  }\n  return false;", "    // Your code here\n    int x_num = stoi(x.substr(0,\
    \ x.find(\"/\")));\n    int x_den = stoi(x.substr(x.find(\"/\") + 1));\n    int\
    \ n_num = stoi(n.substr(0, n.find(\"/\")));\n    int n_den = stoi(n.substr(n.find(\"\
    /\") + 1));\n    int num = x_num * n_num;\n    int den = x_den * n_den;\n    int\
    \ gcd = __gcd(num, den);\n    num /= gcd;\n    den /= gcd;\n    return num % den\
    \ == 0;", "    // your code here\n    int x_num, x_den, n_num, n_den;\n    std::stringstream\
    \ ss;\n    ss << x;\n    ss >> x_num;\n    ss.clear();\n    ss << n;\n    ss >>\
    \ n_num;\n    ss.clear();\n    ss << x;\n    ss.ignore(1, '/');\n    ss >> x_den;\n\
    \    ss.clear();\n    ss << n;\n    ss.ignore(1, '/');\n    ss >> n_den;\n   \
    \ ss.clear();\n    // std::cout << x_num << \" \" << x_den << \" \" << n_num <<\
    \ \" \" << n_den << std::endl;\n    int num = x_num * n_num;\n    int den = x_den\
    \ * n_den;\n    // std::cout << num << \" \" << den << std::endl;\n    if (num\
    \ % den == 0) {\n        return true;\n    }\n    return false;", "  int x_num\
    \ = std::stoi(x.substr(0, x.find('/')));\n  int x_den = std::stoi(x.substr(x.find('/')\
    \ + 1));\n  int n_num = std::stoi(n.substr(0, n.find('/')));\n  int n_den = std::stoi(n.substr(n.find('/')\
    \ + 1));\n  int num = x_num * n_num;\n  int den = x_den * n_den;\n  if (num %\
    \ den == 0) {\n    return true;\n  }\n  return false;", "    int x_num = std::stoi(x.substr(0,\
    \ x.find(\"/\")));\n    int x_den = std::stoi(x.substr(x.find(\"/\") + 1));\n\
    \    int n_num = std::stoi(n.substr(0, n.find(\"/\")));\n    int n_den = std::stoi(n.substr(n.find(\"\
    /\") + 1));\n    int result_num = x_num * n_num;\n    int result_den = x_den *\
    \ n_den;\n    int gcd = std::__gcd(result_num, result_den);\n    result_num /=\
    \ gcd;\n    result_den /= gcd;\n    return result_den == 1;", "    std::stringstream\
    \ ss(x);\n    std::stringstream ss1(n);\n    int num1, num2, den1, den2;\n   \
    \ char ch;\n    ss >> num1 >> ch >> den1;\n    ss1 >> num2 >> ch >> den2;\n  \
    \  int num = num1 * den2;\n    int den = den1 * num2;\n    if(num % den == 0)\n\
    \        return true;\n    return false;", "  // your code here\n  int x_num,\
    \ x_den, n_num, n_den;\n  std::stringstream ss_x(x);\n  std::stringstream ss_n(n);\n\
    \  char c;\n  ss_x >> x_num >> c >> x_den;\n  ss_n >> n_num >> c >> n_den;\n \
    \ int num = x_num * n_num;\n  int den = x_den * n_den;\n  int gcd = __gcd(num,\
    \ den);\n  num /= gcd;\n  den /= gcd;\n  return (num % den == 0);", "    int x_num,\
    \ x_den, n_num, n_den;\n    std::stringstream(x.substr(0, x.find('/'))) >> x_num;\n\
    \    std::stringstream(x.substr(x.find('/') + 1)) >> x_den;\n    std::stringstream(n.substr(0,\
    \ n.find('/'))) >> n_num;\n    std::stringstream(n.substr(n.find('/') + 1)) >>\
    \ n_den;\n    return (x_num * n_den) % (x_den * n_num) == 0;", "  std::stringstream\
    \ ss(x);\n  std::string item;\n  std::vector<std::string> tokens;\n  while (std::getline(ss,\
    \ item, '/')) {\n    tokens.push_back(item);\n  }\n  int x_num = std::stoi(tokens[0]);\n\
    \  int x_den = std::stoi(tokens[1]);\n  std::stringstream ss1(n);\n  std::string\
    \ item1;\n  std::vector<std::string> tokens1;\n  while (std::getline(ss1, item1,\
    \ '/')) {\n    tokens1.push_back(item1);\n  }\n  int n_num = std::stoi(tokens1[0]);\n\
    \  int n_den = std::stoi(tokens1[1]);\n  int num = x_num * n_num;\n  int den =\
    \ x_den * n_den;\n  if (num % den == 0) {\n    return true;\n  }\n  return false;",
  "    std::stringstream ss1(x);\n    std::stringstream ss2(n);\n    int a, b, c,\
    \ d;\n    char ch;\n    ss1 >> a >> ch >> b;\n    ss2 >> c >> ch >> d;\n    return\
    \ (a*d)%(b*c) == 0;", "    int x_numerator, x_denominator, n_numerator, n_denominator;\n\
    \    std::stringstream ss1(x);\n    std::stringstream ss2(n);\n    std::string\
    \ temp;\n    std::getline(ss1, temp, '/');\n    x_numerator = std::stoi(temp);\n\
    \    std::getline(ss1, temp, '/');\n    x_denominator = std::stoi(temp);\n   \
    \ std::getline(ss2, temp, '/');\n    n_numerator = std::stoi(temp);\n    std::getline(ss2,\
    \ temp, '/');\n    n_denominator = std::stoi(temp);\n    int numerator = x_numerator\
    \ * n_numerator;\n    int denominator = x_denominator * n_denominator;\n    return\
    \ numerator % denominator == 0;", "  // Your code here\n  int a = std::stoi(x.substr(0,\
    \ x.find(\"/\")));\n  int b = std::stoi(x.substr(x.find(\"/\") + 1));\n  int c\
    \ = std::stoi(n.substr(0, n.find(\"/\")));\n  int d = std::stoi(n.substr(n.find(\"\
    /\") + 1));\n  return (a * d) % (b * c) == 0;", "  int x_numerator = std::stoi(x.substr(0,\
    \ x.find('/')));\n  int x_denominator = std::stoi(x.substr(x.find('/') + 1));\n\
    \  int n_numerator = std::stoi(n.substr(0, n.find('/')));\n  int n_denominator\
    \ = std::stoi(n.substr(n.find('/') + 1));\n  int numerator = x_numerator * n_numerator;\n\
    \  int denominator = x_denominator * n_denominator;\n  return numerator % denominator\
    \ == 0;", "    int x_numerator = std::stoi(x.substr(0, x.find(\"/\")));\n    int\
    \ x_denominator = std::stoi(x.substr(x.find(\"/\") + 1));\n    int n_numerator\
    \ = std::stoi(n.substr(0, n.find(\"/\")));\n    int n_denominator = std::stoi(n.substr(n.find(\"\
    /\") + 1));\n    int result_numerator = x_numerator * n_numerator;\n    int result_denominator\
    \ = x_denominator * n_denominator;\n    return result_numerator % result_denominator\
    \ == 0;", "  int x_numerator = std::stoi(x.substr(0, x.find('/')));\n  int x_denominator\
    \ = std::stoi(x.substr(x.find('/') + 1));\n  int n_numerator = std::stoi(n.substr(0,\
    \ n.find('/')));\n  int n_denominator = std::stoi(n.substr(n.find('/') + 1));\n\
    \  int result_numerator = x_numerator * n_numerator;\n  int result_denominator\
    \ = x_denominator * n_denominator;\n  return result_numerator % result_denominator\
    \ == 0;", "    int x_num, x_den, n_num, n_den;\n    sscanf(x.c_str(), \"%d/%d\"\
    , &x_num, &x_den);\n    sscanf(n.c_str(), \"%d/%d\", &n_num, &n_den);\n    return\
    \ (x_num * n_den) % (x_den * n_num) == 0;", "    int x_num = std::stoi(x.substr(0,\
    \ x.find('/')));\n    int x_den = std::stoi(x.substr(x.find('/') + 1));\n    int\
    \ n_num = std::stoi(n.substr(0, n.find('/')));\n    int n_den = std::stoi(n.substr(n.find('/')\
    \ + 1));\n    int num = x_num * n_num;\n    int den = x_den * n_den;\n    int\
    \ gcd = __gcd(num, den);\n    num /= gcd;\n    den /= gcd;\n    return (num %\
    \ den == 0);", "    // Your code here\n    int x_num, x_den, n_num, n_den;\n \
    \   std::stringstream ss(x);\n    std::stringstream ss1(n);\n    std::string temp;\n\
    \    std::getline(ss, temp, '/');\n    x_num = std::stoi(temp);\n    std::getline(ss,\
    \ temp, '/');\n    x_den = std::stoi(temp);\n    std::getline(ss1, temp, '/');\n\
    \    n_num = std::stoi(temp);\n    std::getline(ss1, temp, '/');\n    n_den =\
    \ std::stoi(temp);\n    // std::cout << x_num << \" \" << x_den << \" \" << n_num\
    \ << \" \" << n_den << std::endl;\n    if (x_num * n_den == x_den * n_num) {\n\
    \        return true;\n    }\n    return false;", "  int x_numerator = std::stoi(x.substr(0,\
    \ x.find(\"/\")));\n  int x_denominator = std::stoi(x.substr(x.find(\"/\") + 1));\n\
    \  int n_numerator = std::stoi(n.substr(0, n.find(\"/\")));\n  int n_denominator\
    \ = std::stoi(n.substr(n.find(\"/\") + 1));\n  int result_numerator = x_numerator\
    \ * n_numerator;\n  int result_denominator = x_denominator * n_denominator;\n\
    \  if (result_numerator % result_denominator == 0) {\n    return true;\n  }\n\
    \  return false;", "  int x_num = std::stoi(x.substr(0, x.find(\"/\")));\n  int\
    \ x_den = std::stoi(x.substr(x.find(\"/\") + 1));\n  int n_num = std::stoi(n.substr(0,\
    \ n.find(\"/\")));\n  int n_den = std::stoi(n.substr(n.find(\"/\") + 1));\n  int\
    \ num = x_num * n_num;\n  int den = x_den * n_den;\n  int gcd = std::__gcd(num,\
    \ den);\n  num /= gcd;\n  den /= gcd;\n  return num % den == 0;", "    int x_num\
    \ = std::stoi(x.substr(0, x.find('/')));\n    int x_den = std::stoi(x.substr(x.find('/')\
    \ + 1));\n    int n_num = std::stoi(n.substr(0, n.find('/')));\n    int n_den\
    \ = std::stoi(n.substr(n.find('/') + 1));\n    return (x_num * n_den) % (x_den\
    \ * n_num) == 0;", "    int num1, num2, den1, den2;\n    std::stringstream ss1(x);\n\
    \    std::stringstream ss2(n);\n    ss1 >> num1;\n    ss1.ignore();\n    ss1 >>\
    \ den1;\n    ss2 >> num2;\n    ss2.ignore();\n    ss2 >> den2;\n    int num =\
    \ num1 * num2;\n    int den = den1 * den2;\n    return (num % den == 0);", " \
    \   int x_num = std::stoi(x.substr(0, x.find(\"/\")));\n    int x_den = std::stoi(x.substr(x.find(\"\
    /\") + 1));\n    int n_num = std::stoi(n.substr(0, n.find(\"/\")));\n    int n_den\
    \ = std::stoi(n.substr(n.find(\"/\") + 1));\n    int num = x_num * n_num;\n  \
    \  int den = x_den * n_den;\n    if (num % den == 0) {\n        return true;\n\
    \    }\n    return false;", "  int x_numerator, x_denominator, n_numerator, n_denominator;\n\
    \  std::stringstream ss(x);\n  std::stringstream ss2(n);\n  std::string temp;\n\
    \  std::getline(ss, temp, '/');\n  x_numerator = std::stoi(temp);\n  std::getline(ss,\
    \ temp, '/');\n  x_denominator = std::stoi(temp);\n  std::getline(ss2, temp, '/');\n\
    \  n_numerator = std::stoi(temp);\n  std::getline(ss2, temp, '/');\n  n_denominator\
    \ = std::stoi(temp);\n  if (x_numerator * n_denominator * n_numerator * x_denominator\
    \ % (x_denominator * n_denominator) == 0) {\n    return true;\n  }\n  return false;",
  "  std::stringstream ss;\n  ss << x << \"*\" << n;\n  double result;\n  ss >> result;\n\
    \  return (result == (int)result);", "    // Your code here\n    int x_num = std::stoi(x.substr(0,\
    \ x.find('/')));\n    int x_den = std::stoi(x.substr(x.find('/') + 1));\n    int\
    \ n_num = std::stoi(n.substr(0, n.find('/')));\n    int n_den = std::stoi(n.substr(n.find('/')\
    \ + 1));\n    int num = x_num * n_num;\n    int den = x_den * n_den;\n    if (num\
    \ % den == 0) {\n        return true;\n    }\n    return false;", "    int x_num\
    \ = std::stoi(x.substr(0, x.find(\"/\")));\n    int x_den = std::stoi(x.substr(x.find(\"\
    /\") + 1));\n    int n_num = std::stoi(n.substr(0, n.find(\"/\")));\n    int n_den\
    \ = std::stoi(n.substr(n.find(\"/\") + 1));\n    int num = x_num * n_num;\n  \
    \  int den = x_den * n_den;\n    if (num % den == 0) {\n        return true;\n\
    \    }\n    return false;", "    int x_num, x_den, n_num, n_den;\n    sscanf(x.c_str(),\
    \ \"%d/%d\", &x_num, &x_den);\n    sscanf(n.c_str(), \"%d/%d\", &n_num, &n_den);\n\
    \    int num = x_num * n_num;\n    int den = x_den * n_den;\n    if (num % den\
    \ == 0) {\n        return true;\n    }\n    return false;", "    int x_numerator\
    \ = std::stoi(x.substr(0, x.find('/')));\n    int x_denominator = std::stoi(x.substr(x.find('/')\
    \ + 1));\n    int n_numerator = std::stoi(n.substr(0, n.find('/')));\n    int\
    \ n_denominator = std::stoi(n.substr(n.find('/') + 1));\n    int numerator = x_numerator\
    \ * n_numerator;\n    int denominator = x_denominator * n_denominator;\n    return\
    \ numerator % denominator == 0;", "  // Your code here\n  int x_numerator = std::stoi(x.substr(0,\
    \ x.find(\"/\")));\n  int x_denominator = std::stoi(x.substr(x.find(\"/\") + 1));\n\
    \  int n_numerator = std::stoi(n.substr(0, n.find(\"/\")));\n  int n_denominator\
    \ = std::stoi(n.substr(n.find(\"/\") + 1));\n  int numerator = x_numerator * n_numerator;\n\
    \  int denominator = x_denominator * n_denominator;\n  int gcd = std::__gcd(numerator,\
    \ denominator);\n  numerator /= gcd;\n  denominator /= gcd;\n  return numerator\
    \ % denominator == 0;", "    // Your code here\n    int x_num = std::stoi(x.substr(0,\
    \ x.find(\"/\")));\n    int x_den = std::stoi(x.substr(x.find(\"/\") + 1));\n\
    \    int n_num = std::stoi(n.substr(0, n.find(\"/\")));\n    int n_den = std::stoi(n.substr(n.find(\"\
    /\") + 1));\n    int num = x_num * n_num;\n    int den = x_den * n_den;\n    int\
    \ gcd = __gcd(num, den);\n    num /= gcd;\n    den /= gcd;\n    return (num %\
    \ den == 0);", "    int x_numerator = std::stoi(x.substr(0, x.find(\"/\")));\n\
    \    int x_denominator = std::stoi(x.substr(x.find(\"/\") + 1));\n    int n_numerator\
    \ = std::stoi(n.substr(0, n.find(\"/\")));\n    int n_denominator = std::stoi(n.substr(n.find(\"\
    /\") + 1));\n    float x_value = (float)x_numerator / x_denominator;\n    float\
    \ n_value = (float)n_numerator / n_denominator;\n    float result = x_value *\
    \ n_value;\n    return (result - (int)result) == 0;", "  std::stringstream ss;\n\
    \  ss << x << \"*\" << n;\n  std::string s;\n  ss >> s;\n  std::cout << s << std::endl;\n\
    \  std::stringstream ss2;\n  ss2 << s;\n  int num, den;\n  char c;\n  ss2 >> num\
    \ >> c >> den;\n  std::cout << num << \" \" << den << std::endl;\n  return (num\
    \ % den == 0);", "    int x_num = std::stoi(x.substr(0, x.find('/')));\n    int\
    \ x_den = std::stoi(x.substr(x.find('/') + 1));\n    int n_num = std::stoi(n.substr(0,\
    \ n.find('/')));\n    int n_den = std::stoi(n.substr(n.find('/') + 1));\n    int\
    \ num = x_num * n_num;\n    int den = x_den * n_den;\n    return num % den ==\
    \ 0;", "    // your code here\n    int x_num = stoi(x.substr(0, x.find('/')));\n\
    \    int x_den = stoi(x.substr(x.find('/') + 1));\n    int n_num = stoi(n.substr(0,\
    \ n.find('/')));\n    int n_den = stoi(n.substr(n.find('/') + 1));\n    int num\
    \ = x_num * n_num;\n    int den = x_den * n_den;\n    if (num % den == 0) {\n\
    \        return true;\n    }\n    return false;", "  int x_numerator = std::stoi(x.substr(0,\
    \ x.find(\"/\")));\n  int x_denominator = std::stoi(x.substr(x.find(\"/\") + 1));\n\
    \  int n_numerator = std::stoi(n.substr(0, n.find(\"/\")));\n  int n_denominator\
    \ = std::stoi(n.substr(n.find(\"/\") + 1));\n  int numerator = x_numerator * n_numerator;\n\
    \  int denominator = x_denominator * n_denominator;\n  return numerator % denominator\
    \ == 0;", "    int x_num = std::stoi(x.substr(0, x.find('/')));\n    int x_den\
    \ = std::stoi(x.substr(x.find('/') + 1));\n    int n_num = std::stoi(n.substr(0,\
    \ n.find('/')));\n    int n_den = std::stoi(n.substr(n.find('/') + 1));\n    int\
    \ num = x_num * n_num;\n    int den = x_den * n_den;\n    if (num % den == 0)\
    \ {\n        return true;\n    }\n    return false;", "    // Your code here\n\
    \    int num1 = std::stoi(x.substr(0, x.find('/')));\n    int den1 = std::stoi(x.substr(x.find('/')\
    \ + 1));\n    int num2 = std::stoi(n.substr(0, n.find('/')));\n    int den2 =\
    \ std::stoi(n.substr(n.find('/') + 1));\n    int num = num1 * den2;\n    int den\
    \ = den1 * num2;\n    return (num % den == 0);", "    int x_numerator = std::stoi(x.substr(0,\
    \ x.find('/')));\n    int x_denominator = std::stoi(x.substr(x.find('/') + 1));\n\
    \    int n_numerator = std::stoi(n.substr(0, n.find('/')));\n    int n_denominator\
    \ = std::stoi(n.substr(n.find('/') + 1));\n    double x_value = (double)x_numerator\
    \ / x_denominator;\n    double n_value = (double)n_numerator / n_denominator;\n\
    \    double result = x_value * n_value;\n    if (result == (int)result) {\n  \
    \      return true;\n    }\n    return false;", "    int num1, num2, den1, den2;\n\
    \    std::stringstream ss1(x);\n    std::stringstream ss2(n);\n    ss1 >> num1;\n\
    \    ss1.ignore();\n    ss1 >> den1;\n    ss2 >> num2;\n    ss2.ignore();\n  \
    \  ss2 >> den2;\n    int num = num1 * num2;\n    int den = den1 * den2;\n    if\
    \ (den == 0) {\n        return false;\n    }\n    if (num % den == 0) {\n    \
    \    return true;\n    }\n    return false;", "    int x_numerator = std::stoi(x.substr(0,\
    \ x.find(\"/\")));\n    int x_denominator = std::stoi(x.substr(x.find(\"/\") +\
    \ 1));\n    int n_numerator = std::stoi(n.substr(0, n.find(\"/\")));\n    int\
    \ n_denominator = std::stoi(n.substr(n.find(\"/\") + 1));\n    int numerator =\
    \ x_numerator * n_numerator;\n    int denominator = x_denominator * n_denominator;\n\
    \    return numerator % denominator == 0;", "  int x_numerator = std::stoi(x.substr(0,\
    \ x.find(\"/\")));\n  int x_denominator = std::stoi(x.substr(x.find(\"/\") + 1));\n\
    \  int n_numerator = std::stoi(n.substr(0, n.find(\"/\")));\n  int n_denominator\
    \ = std::stoi(n.substr(n.find(\"/\") + 1));\n  return (x_numerator * n_denominator)\
    \ % (x_denominator * n_numerator) == 0;", "  int x_numerator = std::stoi(x.substr(0,\
    \ x.find('/')));\n  int x_denominator = std::stoi(x.substr(x.find('/') + 1));\n\
    \  int n_numerator = std::stoi(n.substr(0, n.find('/')));\n  int n_denominator\
    \ = std::stoi(n.substr(n.find('/') + 1));\n  int result_numerator = x_numerator\
    \ * n_numerator;\n  int result_denominator = x_denominator * n_denominator;\n\
    \  return result_numerator % result_denominator == 0;", "  // your code here\n\
    \  int num1, num2, den1, den2;\n  std::stringstream ss(x);\n  std::stringstream\
    \ ss1(n);\n  std::string temp;\n  std::getline(ss, temp, '/');\n  num1 = std::stoi(temp);\n\
    \  std::getline(ss, temp, '/');\n  den1 = std::stoi(temp);\n  std::getline(ss1,\
    \ temp, '/');\n  num2 = std::stoi(temp);\n  std::getline(ss1, temp, '/');\n  den2\
    \ = std::stoi(temp);\n  int num = num1 * den2;\n  int den = den1 * num2;\n  if\
    \ (num % den == 0)\n    return true;\n  else\n    return false;", "    // Your\
    \ code here\n    int x_numerator = std::stoi(x.substr(0, x.find(\"/\")));\n  \
    \  int x_denominator = std::stoi(x.substr(x.find(\"/\") + 1));\n    int n_numerator\
    \ = std::stoi(n.substr(0, n.find(\"/\")));\n    int n_denominator = std::stoi(n.substr(n.find(\"\
    /\") + 1));\n    int x_n = x_numerator * n_denominator;\n    int n_n = n_numerator\
    \ * x_denominator;\n    return x_n % n_n == 0;", "  int x_numerator = std::stoi(x.substr(0,\
    \ x.find(\"/\")));\n  int x_denominator = std::stoi(x.substr(x.find(\"/\") + 1));\n\
    \  int n_numerator = std::stoi(n.substr(0, n.find(\"/\")));\n  int n_denominator\
    \ = std::stoi(n.substr(n.find(\"/\") + 1));\n  int result_numerator = x_numerator\
    \ * n_numerator;\n  int result_denominator = x_denominator * n_denominator;\n\
    \  return result_numerator % result_denominator == 0;", "    int x_numerator =\
    \ std::stoi(x.substr(0, x.find(\"/\")));\n    int x_denominator = std::stoi(x.substr(x.find(\"\
    /\") + 1));\n    int n_numerator = std::stoi(n.substr(0, n.find(\"/\")));\n  \
    \  int n_denominator = std::stoi(n.substr(n.find(\"/\") + 1));\n    int numerator\
    \ = x_numerator * n_numerator;\n    int denominator = x_denominator * n_denominator;\n\
    \    return numerator % denominator == 0;", "    int x_num = std::stoi(x.substr(0,\
    \ x.find(\"/\")));\n    int x_den = std::stoi(x.substr(x.find(\"/\") + 1));\n\
    \    int n_num = std::stoi(n.substr(0, n.find(\"/\")));\n    int n_den = std::stoi(n.substr(n.find(\"\
    /\") + 1));\n    int num = x_num * n_num;\n    int den = x_den * n_den;\n    int\
    \ gcd = std::__gcd(num, den);\n    num /= gcd;\n    den /= gcd;\n    return den\
    \ == 1;", "    // Your code here\n    std::stringstream ss(x);\n    std::string\
    \ item;\n    std::vector<std::string> tokens;\n    while (std::getline(ss, item,\
    \ '/')) {\n        tokens.push_back(item);\n    }\n    int x_num = std::stoi(tokens[0]);\n\
    \    int x_den = std::stoi(tokens[1]);\n    tokens.clear();\n    ss.clear();\n\
    \    ss.str(n);\n    while (std::getline(ss, item, '/')) {\n        tokens.push_back(item);\n\
    \    }\n    int n_num = std::stoi(tokens[0]);\n    int n_den = std::stoi(tokens[1]);\n\
    \    int num = x_num * n_num;\n    int den = x_den * n_den;\n    if (num % den\
    \ == 0) {\n        return true;\n    }\n    return false;", "  // your code here\n\
    \  std::stringstream ss;\n  ss << x << \" \" << n;\n  int a, b, c, d;\n  char\
    \ slash;\n  ss >> a >> slash >> b >> c >> slash >> d;\n  return (a * d) % (b *\
    \ c) == 0;", "    int num1, num2, den1, den2;\n    sscanf(x.c_str(), \"%d/%d\"\
    , &num1, &den1);\n    sscanf(n.c_str(), \"%d/%d\", &num2, &den2);\n    int num\
    \ = num1 * num2;\n    int den = den1 * den2;\n    return (num % den == 0);", " \
    \   // Your code here\n    int x1 = std::stoi(x.substr(0, x.find('/')));\n   \
    \ int x2 = std::stoi(x.substr(x.find('/') + 1));\n    int n1 = std::stoi(n.substr(0,\
    \ n.find('/')));\n    int n2 = std::stoi(n.substr(n.find('/') + 1));\n    int\
    \ num = x1 * n1;\n    int den = x2 * n2;\n    if (num % den == 0) {\n        return\
    \ true;\n    }\n    return false;", "    // Your code here\n    int a,b,c,d;\n\
    \    sscanf(x.c_str(),\"%d/%d\",&a,&b);\n    sscanf(n.c_str(),\"%d/%d\",&c,&d);\n\
    \    int gcd = __gcd(a,b);\n    a/=gcd;\n    b/=gcd;\n    gcd = __gcd(c,d);\n\
    \    c/=gcd;\n    d/=gcd;\n    if(a*d == b*c)\n        return true;\n    return\
    \ false;", "    // your code here\n    int a,b,c,d;\n    std::stringstream ss1(x);\n\
    \    std::stringstream ss2(n);\n    ss1>>a;\n    ss1.ignore();\n    ss1>>b;\n\
    \    ss2>>c;\n    ss2.ignore();\n    ss2>>d;\n    int num = a*d;\n    int den\
    \ = b*c;\n    if(num%den==0)\n        return true;\n    else\n        return false;",
  "    int x_num, x_den, n_num, n_den;\n    std::stringstream ss1(x);\n    std::stringstream\
    \ ss2(n);\n    std::string temp;\n    std::getline(ss1, temp, '/');\n    x_num\
    \ = std::stoi(temp);\n    std::getline(ss1, temp, '/');\n    x_den = std::stoi(temp);\n\
    \    std::getline(ss2, temp, '/');\n    n_num = std::stoi(temp);\n    std::getline(ss2,\
    \ temp, '/');\n    n_den = std::stoi(temp);\n    int num = x_num * n_num;\n  \
    \  int den = x_den * n_den;\n    if (num % den == 0) {\n        return true;\n\
    \    }\n    return false;", "  // Your code here\n  int num1, num2, den1, den2;\n\
    \  std::stringstream ss1(x);\n  std::stringstream ss2(n);\n  std::string temp;\n\
    \  std::getline(ss1, temp, '/');\n  num1 = std::stoi(temp);\n  std::getline(ss1,\
    \ temp, '/');\n  den1 = std::stoi(temp);\n  std::getline(ss2, temp, '/');\n  num2\
    \ = std::stoi(temp);\n  std::getline(ss2, temp, '/');\n  den2 = std::stoi(temp);\n\
    \  int num = num1 * num2;\n  int den = den1 * den2;\n  int gcd = std::__gcd(num,\
    \ den);\n  num /= gcd;\n  den /= gcd;\n  if (den == 1) {\n    return true;\n \
    \ }\n  return false;", "    int num1, num2, den1, den2;\n    std::stringstream\
    \ ss1(x);\n    std::stringstream ss2(n);\n    ss1 >> num1;\n    ss1.ignore();\n\
    \    ss1 >> den1;\n    ss2 >> num2;\n    ss2.ignore();\n    ss2 >> den2;\n   \
    \ int num = num1 * num2;\n    int den = den1 * den2;\n    int gcd = std::__gcd(num,\
    \ den);\n    num /= gcd;\n    den /= gcd;\n    return (num % den == 0);", "  \
    \  int x_numerator, x_denominator, n_numerator, n_denominator;\n    std::stringstream\
    \ ss;\n    ss << x;\n    ss >> x_numerator;\n    ss.clear();\n    ss << n;\n \
    \   ss >> n_numerator;\n    ss.clear();\n    ss << x;\n    ss.ignore(1, '/');\n\
    \    ss >> x_denominator;\n    ss.clear();\n    ss << n;\n    ss.ignore(1, '/');\n\
    \    ss >> n_denominator;\n    ss.clear();\n    if (x_numerator * n_denominator\
    \ % x_denominator == 0) {\n        return true;\n    }\n    return false;", " \
    \ // your code here\n  int numerator1 = std::stoi(x.substr(0, x.find(\"/\")));\n\
    \  int denominator1 = std::stoi(x.substr(x.find(\"/\") + 1));\n  int numerator2\
    \ = std::stoi(n.substr(0, n.find(\"/\")));\n  int denominator2 = std::stoi(n.substr(n.find(\"\
    /\") + 1));\n  int numerator = numerator1 * denominator2;\n  int denominator =\
    \ denominator1 * numerator2;\n  if (numerator % denominator == 0) {\n    return\
    \ true;\n  }\n  return false;", "  // your code here\n  int x_numerator = std::stoi(x.substr(0,\
    \ x.find(\"/\")));\n  int x_denominator = std::stoi(x.substr(x.find(\"/\") + 1));\n\
    \  int n_numerator = std::stoi(n.substr(0, n.find(\"/\")));\n  int n_denominator\
    \ = std::stoi(n.substr(n.find(\"/\") + 1));\n  int x_mult = x_numerator * n_denominator;\n\
    \  int n_mult = n_numerator * x_denominator;\n  return x_mult % n_mult == 0;",
  "    int x_numerator = std::stoi(x.substr(0, x.find(\"/\")));\n    int x_denominator\
    \ = std::stoi(x.substr(x.find(\"/\") + 1));\n    int n_numerator = std::stoi(n.substr(0,\
    \ n.find(\"/\")));\n    int n_denominator = std::stoi(n.substr(n.find(\"/\") +\
    \ 1));\n    int result_numerator = x_numerator * n_numerator;\n    int result_denominator\
    \ = x_denominator * n_denominator;\n    int gcd = std::__gcd(result_numerator,\
    \ result_denominator);\n    result_numerator /= gcd;\n    result_denominator /=\
    \ gcd;\n    return result_denominator == 1;", "    // Your code here\n    int\
    \ x_num, x_den, n_num, n_den;\n    std::stringstream ss;\n    ss << x;\n    ss\
    \ >> x_num;\n    ss.clear();\n    ss << n;\n    ss >> n_num;\n    ss.clear();\n\
    \    ss << x;\n    ss.ignore(1, '/');\n    ss >> x_den;\n    ss.clear();\n   \
    \ ss << n;\n    ss.ignore(1, '/');\n    ss >> n_den;\n    ss.clear();\n    int\
    \ num = x_num * n_num;\n    int den = x_den * n_den;\n    if (num % den == 0)\
    \ {\n        return true;\n    }\n    return false;"]
stop_tokens:
- "\n}"
