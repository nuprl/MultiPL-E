name: HumanEval_34_unique
language: cpp
prompt: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
  \ in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\n\
  std::vector<long> unique(std::vector<long> l) {\n"
tests: "}\nint main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({(long)5,\
  \ (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123}))) ==\
  \ (std::vector<long>({(long)0, (long)2, (long)3, (long)5, (long)9, (long)123})));\n\
  }\n"
completions: ["    std::vector<long>::iterator it;\n    std::sort(l.begin(), l.end());\n\
    \    it = std::unique(l.begin(), l.end());\n    l.resize(std::distance(l.begin(),\
    \ it));\n    return l;", "  std::sort(l.begin(), l.end());\n  l.erase(std::unique(l.begin(),\
    \ l.end()), l.end());\n  return l;", "\tstd::vector<long> result;\n\tstd::sort(l.begin(),\
    \ l.end());\n\tfor (int i = 0; i < l.size(); i++) {\n\t\tif (i == 0 || l[i] !=\
    \ l[i - 1]) {\n\t\t\tresult.push_back(l[i]);\n\t\t}\n\t}\n\treturn result;", " \
    \   std::vector<long> ret;\n    std::sort(l.begin(), l.end());\n    for (int i\
    \ = 0; i < l.size(); i++) {\n        if (i == 0 || l[i] != l[i - 1]) {\n     \
    \       ret.push_back(l[i]);\n        }\n    }\n    return ret;", "    std::vector<long>\
    \ ret;\n    std::sort(l.begin(), l.end());\n    for (int i = 0; i < l.size();\
    \ i++) {\n        if (i == 0 || l[i] != l[i - 1]) {\n            ret.push_back(l[i]);\n\
    \        }\n    }\n    return ret;", "    std::vector<long> result;\n    std::sort(l.begin(),\
    \ l.end());\n    for (int i = 0; i < l.size(); i++) {\n        if (i == 0 || l[i]\
    \ != l[i - 1]) {\n            result.push_back(l[i]);\n        }\n    }\n    return\
    \ result;", "    std::vector<long> res;\n    std::sort(l.begin(), l.end());\n\
    \    for (long i = 0; i < l.size(); i++) {\n        if (i == 0 || l[i] != l[i\
    \ - 1]) {\n            res.push_back(l[i]);\n        }\n    }\n    return res;",
  "    std::vector<long>::iterator it;\n    std::sort(l.begin(), l.end());\n    it\
    \ = std::unique(l.begin(), l.end());\n    l.resize(std::distance(l.begin(), it));\n\
    \    return l;", "    std::vector<long> res;\n    std::sort(l.begin(), l.end());\n\
    \    for (int i = 0; i < l.size(); i++) {\n        if (i == 0 || l[i] != l[i -\
    \ 1]) {\n            res.push_back(l[i]);\n        }\n    }\n    return res;",
  "    std::sort(l.begin(), l.end());\n    l.erase(std::unique(l.begin(), l.end()),\
    \ l.end());\n    return l;", "    std::vector<long>::iterator it;\n    std::sort(l.begin(),\
    \ l.end());\n    it = std::unique(l.begin(), l.end());\n    l.resize(std::distance(l.begin(),\
    \ it));\n    return l;", "    std::vector<long> ret;\n    std::sort(l.begin(),\
    \ l.end());\n    for (int i = 0; i < l.size(); i++) {\n        if (i == 0 || l[i]\
    \ != l[i - 1]) {\n            ret.push_back(l[i]);\n        }\n    }\n    return\
    \ ret;", "    std::vector<long> result;\n    std::sort(l.begin(), l.end());\n\
    \    for (auto i = l.begin(); i != l.end(); i++) {\n        if (i == l.begin()\
    \ || *i != *(i - 1)) {\n            result.push_back(*i);\n        }\n    }\n\
    \    return result;", "    std::sort(l.begin(), l.end());\n    l.erase(std::unique(l.begin(),\
    \ l.end()), l.end());\n    return l;", "  std::vector<long> ret;\n  std::sort(l.begin(),\
    \ l.end());\n  for (auto i = l.begin(); i != l.end(); i++) {\n    if (i == l.begin()\
    \ || *i != *(i - 1)) {\n      ret.push_back(*i);\n    }\n  }\n  return ret;",
  "    std::sort(l.begin(), l.end());\n    l.erase(std::unique(l.begin(), l.end()),\
    \ l.end());\n    return l;", "    std::vector<long>::iterator it;\n    std::sort(l.begin(),\
    \ l.end());\n    it = std::unique(l.begin(), l.end());\n    l.resize(std::distance(l.begin(),\
    \ it));\n    return l;", "    std::vector<long> ret;\n    std::sort(l.begin(),\
    \ l.end());\n    for (auto i : l) {\n        if (ret.size() == 0 || ret.back()\
    \ != i) {\n            ret.push_back(i);\n        }\n    }\n    return ret;",
  "    std::sort(l.begin(), l.end());\n    auto last = std::unique(l.begin(), l.end());\n\
    \    l.erase(last, l.end());\n    return l;", "\tstd::vector<long> res;\n\tstd::sort(l.begin(),\
    \ l.end());\n\tfor (long i = 0; i < l.size(); i++) {\n\t\tif (i == 0 || l[i] !=\
    \ l[i - 1]) {\n\t\t\tres.push_back(l[i]);\n\t\t}\n\t}\n\treturn res;", "    std::sort(l.begin(),\
    \ l.end());\n    l.erase(std::unique(l.begin(), l.end()), l.end());\n    return\
    \ l;", "    std::vector<long> res;\n    std::sort(l.begin(), l.end());\n    for\
    \ (int i = 0; i < l.size(); i++) {\n        if (i == 0 || l[i] != l[i - 1]) {\n\
    \            res.push_back(l[i]);\n        }\n    }\n    return res;", "    std::vector<long>\
    \ res;\n    std::sort(l.begin(), l.end());\n    for (int i = 0; i < l.size();\
    \ i++) {\n        if (i == 0 || l[i] != l[i - 1]) {\n            res.push_back(l[i]);\n\
    \        }\n    }\n    return res;", "    std::sort(l.begin(), l.end());\n   \
    \ l.erase(std::unique(l.begin(), l.end()), l.end());\n    return l;", "    std::vector<long>::iterator\
    \ it;\n    std::sort(l.begin(), l.end());\n    it = std::unique(l.begin(), l.end());\n\
    \    l.resize(std::distance(l.begin(), it));\n    return l;", "    std::vector<long>\
    \ result;\n    std::sort(l.begin(), l.end());\n    for (int i = 0; i < l.size();\
    \ i++) {\n        if (i == 0 || l[i] != l[i - 1]) {\n            result.push_back(l[i]);\n\
    \        }\n    }\n    return result;", "    std::vector<long> res;\n    std::sort(l.begin(),\
    \ l.end());\n    for (int i = 0; i < l.size(); i++) {\n        if (i == 0 || l[i]\
    \ != l[i - 1]) {\n            res.push_back(l[i]);\n        }\n    }\n    return\
    \ res;", "    std::vector<long> ret;\n    std::sort(l.begin(), l.end());\n   \
    \ ret.push_back(l[0]);\n    for (int i = 1; i < l.size(); i++) {\n        if (l[i]\
    \ != l[i-1]) {\n            ret.push_back(l[i]);\n        }\n    }\n    return\
    \ ret;", "    std::sort(l.begin(), l.end());\n    l.erase(std::unique(l.begin(),\
    \ l.end()), l.end());\n    return l;", "    std::sort(l.begin(), l.end());\n \
    \   l.erase(std::unique(l.begin(), l.end()), l.end());\n    return l;", "    std::vector<long>\
    \ ret;\n    std::sort(l.begin(), l.end());\n    for (int i = 0; i < l.size();\
    \ i++) {\n        if (i == 0 || l[i] != l[i - 1]) {\n            ret.push_back(l[i]);\n\
    \        }\n    }\n    return ret;", "    std::vector<long>::iterator it;\n  \
    \  std::sort(l.begin(), l.end());\n    it = std::unique(l.begin(), l.end());\n\
    \    l.resize(std::distance(l.begin(), it));\n    return l;", "    std::vector<long>::iterator\
    \ it;\n    std::sort(l.begin(), l.end());\n    it = std::unique(l.begin(), l.end());\n\
    \    l.resize(std::distance(l.begin(), it));\n    return l;", "    std::vector<long>::iterator\
    \ it;\n    std::sort(l.begin(), l.end());\n    it = std::unique(l.begin(), l.end());\n\
    \    l.resize(std::distance(l.begin(), it));\n    return l;", "    std::vector<long>\
    \ result;\n    std::sort(l.begin(), l.end());\n    for (int i = 0; i < l.size();\
    \ i++) {\n        if (i == 0 || l[i] != l[i - 1]) {\n            result.push_back(l[i]);\n\
    \        }\n    }\n    return result;", "    std::vector<long> res;\n    std::sort(l.begin(),\
    \ l.end());\n    res.push_back(l[0]);\n    for (int i = 1; i < l.size(); i++)\
    \ {\n        if (l[i] != l[i - 1]) {\n            res.push_back(l[i]);\n     \
    \   }\n    }\n    return res;", "    std::vector<long> result;\n    std::sort(l.begin(),\
    \ l.end());\n    for (auto i = l.begin(); i != l.end(); i++) {\n        if (i\
    \ == l.begin() || *i != *(i - 1)) {\n            result.push_back(*i);\n     \
    \   }\n    }\n    return result;", "    std::vector<long>::iterator it;\n    std::sort(l.begin(),\
    \ l.end());\n    it = std::unique(l.begin(), l.end());\n    l.resize(std::distance(l.begin(),\
    \ it));\n    return l;", "    std::vector<long> ret;\n    std::sort(l.begin(),\
    \ l.end());\n    for (auto i : l) {\n        if (ret.size() == 0 || ret.back()\
    \ != i) {\n            ret.push_back(i);\n        }\n    }\n    return ret;",
  "    std::vector<long>::iterator it;\n    std::sort(l.begin(), l.end());\n    it\
    \ = std::unique(l.begin(), l.end());\n    l.resize(std::distance(l.begin(), it));\n\
    \    return l;", "    std::vector<long> ret;\n    std::sort(l.begin(), l.end());\n\
    \    for (int i = 0; i < l.size(); i++) {\n        if (i == 0 || l[i] != l[i -\
    \ 1]) {\n            ret.push_back(l[i]);\n        }\n    }\n    return ret;",
  "    std::vector<long> result;\n    std::sort(l.begin(), l.end());\n    for (int\
    \ i = 0; i < l.size(); i++) {\n        if (i == 0 || l[i] != l[i - 1]) {\n   \
    \         result.push_back(l[i]);\n        }\n    }\n    return result;", "  \
    \  std::sort(l.begin(), l.end());\n    l.erase(std::unique(l.begin(), l.end()),\
    \ l.end());\n    return l;", "    std::vector<long> ret;\n    std::sort(l.begin(),\
    \ l.end());\n    for (int i = 0; i < l.size(); i++) {\n        if (i == 0 || l[i]\
    \ != l[i - 1]) {\n            ret.push_back(l[i]);\n        }\n    }\n    return\
    \ ret;", "    std::sort(l.begin(), l.end());\n    l.erase(std::unique(l.begin(),\
    \ l.end()), l.end());\n    return l;", "    std::vector<long> res;\n    std::sort(l.begin(),\
    \ l.end());\n    for (int i = 0; i < l.size(); i++) {\n        if (i == 0 || l[i]\
    \ != l[i - 1]) {\n            res.push_back(l[i]);\n        }\n    }\n    return\
    \ res;", "    std::vector<long> res;\n    std::sort(l.begin(), l.end());\n   \
    \ for (int i = 0; i < l.size(); i++) {\n        if (i == 0 || l[i] != l[i - 1])\
    \ {\n            res.push_back(l[i]);\n        }\n    }\n    return res;", " \
    \   std::vector<long> res;\n    for (auto i : l) {\n        if (std::find(res.begin(),\
    \ res.end(), i) == res.end()) {\n            res.push_back(i);\n        }\n  \
    \  }\n    std::sort(res.begin(), res.end());\n    return res;", "    std::vector<long>\
    \ res;\n    std::sort(l.begin(), l.end());\n    for (int i = 0; i < l.size();\
    \ i++) {\n        if (i == 0 || l[i] != l[i - 1]) {\n            res.push_back(l[i]);\n\
    \        }\n    }\n    return res;", "    std::vector<long> result;\n    std::sort(l.begin(),\
    \ l.end());\n    for (int i = 0; i < l.size(); i++) {\n        if (i == 0 || l[i]\
    \ != l[i - 1]) {\n            result.push_back(l[i]);\n        }\n    }\n    return\
    \ result;", "    std::vector<long> res;\n    std::sort(l.begin(), l.end());\n\
    \    for (int i = 0; i < l.size(); i++) {\n        if (i == 0 || l[i] != l[i -\
    \ 1]) {\n            res.push_back(l[i]);\n        }\n    }\n    return res;",
  "    std::vector<long>::iterator it;\n    std::sort(l.begin(), l.end());\n    it\
    \ = std::unique(l.begin(), l.end());\n    l.resize(std::distance(l.begin(), it));\n\
    \    return l;", "    std::vector<long> result;\n    std::sort(l.begin(), l.end());\n\
    \    result.push_back(l[0]);\n    for (int i = 1; i < l.size(); i++) {\n     \
    \   if (l[i] != l[i - 1]) {\n            result.push_back(l[i]);\n        }\n\
    \    }\n    return result;", "    std::sort(l.begin(), l.end());\n    l.erase(std::unique(l.begin(),\
    \ l.end()), l.end());\n    return l;", "    std::vector<long> res;\n    std::sort(l.begin(),\
    \ l.end());\n    for (int i = 0; i < l.size(); i++) {\n        if (i == 0 || l[i]\
    \ != l[i - 1]) {\n            res.push_back(l[i]);\n        }\n    }\n    return\
    \ res;", "    std::vector<long> res;\n    std::sort(l.begin(), l.end());\n   \
    \ for (int i = 0; i < l.size(); i++) {\n        if (i == 0 || l[i] != l[i - 1])\
    \ {\n            res.push_back(l[i]);\n        }\n    }\n    return res;", " \
    \   std::vector<long>::iterator it;\n    std::sort(l.begin(), l.end());\n    it\
    \ = std::unique(l.begin(), l.end());\n    l.resize(std::distance(l.begin(), it));\n\
    \    return l;", "    std::sort(l.begin(), l.end());\n    auto last = std::unique(l.begin(),\
    \ l.end());\n    l.erase(last, l.end());\n    return l;", "    std::vector<long>\
    \ res;\n    std::sort(l.begin(), l.end());\n    for (long i = 0; i < l.size();\
    \ i++) {\n        if (i == 0 || l[i] != l[i - 1]) {\n            res.push_back(l[i]);\n\
    \        }\n    }\n    return res;", "    std::vector<long> res;\n    std::sort(l.begin(),\
    \ l.end());\n    for (int i = 0; i < l.size(); i++) {\n        if (i == 0 || l[i]\
    \ != l[i - 1]) {\n            res.push_back(l[i]);\n        }\n    }\n    return\
    \ res;", "    std::vector<long> result;\n    std::sort(l.begin(), l.end());\n\
    \    for (int i = 0; i < l.size(); i++) {\n        if (i == 0 || l[i] != l[i -\
    \ 1]) {\n            result.push_back(l[i]);\n        }\n    }\n    return result;",
  "    std::vector<long> result;\n    std::sort(l.begin(), l.end());\n    for (int\
    \ i = 0; i < l.size(); i++) {\n        if (i == 0 || l[i] != l[i - 1]) {\n   \
    \         result.push_back(l[i]);\n        }\n    }\n    return result;", "  \
    \  std::vector<long> ret;\n    std::sort(l.begin(), l.end());\n    for (long i\
    \ = 0; i < l.size(); i++) {\n        if (i == 0 || l[i] != l[i - 1]) {\n     \
    \       ret.push_back(l[i]);\n        }\n    }\n    return ret;", "    std::sort(l.begin(),\
    \ l.end());\n    l.erase(std::unique(l.begin(), l.end()), l.end());\n    return\
    \ l;", "    std::sort(l.begin(), l.end());\n    l.erase(std::unique(l.begin(),\
    \ l.end()), l.end());\n    return l;", "    std::vector<long> res;\n    std::sort(l.begin(),\
    \ l.end());\n    for (auto i : l) {\n        if (res.size() == 0 || i != res.back())\
    \ {\n            res.push_back(i);\n        }\n    }\n    return res;", "\tstd::sort(l.begin(),\
    \ l.end());\n\tl.erase(std::unique(l.begin(), l.end()), l.end());\n\treturn l;",
  "    std::sort(l.begin(), l.end());\n    l.erase(std::unique(l.begin(), l.end()),\
    \ l.end());\n    return l;", "    std::vector<long>::iterator it;\n    std::sort(l.begin(),\
    \ l.end());\n    it = std::unique(l.begin(), l.end());\n    l.resize(std::distance(l.begin(),\
    \ it));\n    return l;", "    std::vector<long> res;\n    std::sort(l.begin(),\
    \ l.end());\n    for (int i = 0; i < l.size(); i++) {\n        if (i == 0 || l[i]\
    \ != l[i - 1]) {\n            res.push_back(l[i]);\n        }\n    }\n    return\
    \ res;", "    std::vector<long> result;\n    std::sort(l.begin(), l.end());\n\
    \    for (int i = 0; i < l.size(); i++) {\n        if (i == 0 || l[i] != l[i -\
    \ 1]) {\n            result.push_back(l[i]);\n        }\n    }\n    return result;",
  "    std::vector<long>::iterator it;\n    std::sort(l.begin(), l.end());\n    it\
    \ = std::unique(l.begin(), l.end());\n    l.resize(std::distance(l.begin(), it));\n\
    \    return l;", "    std::sort(l.begin(), l.end());\n    l.erase(std::unique(l.begin(),\
    \ l.end()), l.end());\n    return l;", "    std::vector<long>::iterator it;\n\
    \    std::sort(l.begin(), l.end());\n    it = std::unique(l.begin(), l.end());\n\
    \    l.resize(std::distance(l.begin(), it));\n    return l;", "    std::vector<long>::iterator\
    \ it;\n    std::sort(l.begin(), l.end());\n    it = std::unique(l.begin(), l.end());\n\
    \    l.resize(std::distance(l.begin(), it));\n    return l;", "    std::vector<long>::iterator\
    \ it;\n    std::sort(l.begin(), l.end());\n    it = std::unique(l.begin(), l.end());\n\
    \    l.resize(std::distance(l.begin(), it));\n    return l;", "  std::vector<long>\
    \ ret;\n  std::sort(l.begin(), l.end());\n  ret.push_back(l[0]);\n  for (int i\
    \ = 1; i < l.size(); i++) {\n    if (l[i] != l[i - 1]) {\n      ret.push_back(l[i]);\n\
    \    }\n  }\n  return ret;", "    std::vector<long>::iterator it;\n    std::sort(l.begin(),\
    \ l.end());\n    it = std::unique(l.begin(), l.end());\n    l.resize(std::distance(l.begin(),\
    \ it));\n    return l;", "    std::vector<long> res;\n    std::sort(l.begin(),\
    \ l.end());\n    for (int i = 0; i < l.size(); i++) {\n        if (i == 0 || l[i]\
    \ != l[i - 1]) {\n            res.push_back(l[i]);\n        }\n    }\n    return\
    \ res;", "    std::sort(l.begin(), l.end());\n    l.erase(std::unique(l.begin(),\
    \ l.end()), l.end());\n    return l;", "    std::vector<long> res;\n    std::sort(l.begin(),\
    \ l.end());\n    for (int i = 0; i < l.size(); i++) {\n        if (i == 0 || l[i]\
    \ != l[i - 1]) {\n            res.push_back(l[i]);\n        }\n    }\n    return\
    \ res;", "    std::vector<long> res;\n    std::sort(l.begin(), l.end());\n   \
    \ for (long i = 0; i < l.size(); i++) {\n        if (i == 0 || l[i] != l[i - 1])\
    \ {\n            res.push_back(l[i]);\n        }\n    }\n    return res;", " \
    \   std::sort(l.begin(), l.end());\n    l.erase(std::unique(l.begin(), l.end()),\
    \ l.end());\n    return l;", "    std::sort(l.begin(), l.end());\n    l.erase(std::unique(l.begin(),\
    \ l.end()), l.end());\n    return l;", "    std::sort(l.begin(), l.end());\n \
    \   l.erase(std::unique(l.begin(), l.end()), l.end());\n    return l;", "    std::vector<long>::iterator\
    \ it;\n    std::sort(l.begin(), l.end());\n    it = std::unique(l.begin(), l.end());\n\
    \    l.resize(std::distance(l.begin(), it));\n    return l;", "    std::vector<long>::iterator\
    \ it;\n    std::sort(l.begin(), l.end());\n    it = std::unique(l.begin(), l.end());\n\
    \    l.resize(std::distance(l.begin(), it));\n    return l;", "    std::vector<long>\
    \ ret;\n    std::sort(l.begin(), l.end());\n    for (int i = 0; i < l.size();\
    \ i++) {\n        if (i == 0 || l[i] != l[i - 1]) {\n            ret.push_back(l[i]);\n\
    \        }\n    }\n    return ret;", "    std::vector<long>::iterator it;\n  \
    \  std::sort(l.begin(), l.end());\n    it = std::unique(l.begin(), l.end());\n\
    \    l.resize(std::distance(l.begin(), it));\n    return l;", "    std::sort(l.begin(),\
    \ l.end());\n    l.erase(std::unique(l.begin(), l.end()), l.end());\n    return\
    \ l;", "    std::vector<long>::iterator it;\n    std::sort(l.begin(), l.end());\n\
    \    it = std::unique(l.begin(), l.end());\n    l.resize(std::distance(l.begin(),\
    \ it));\n    return l;", "    std::vector<long> ret;\n    std::sort(l.begin(),\
    \ l.end());\n    for (int i = 0; i < l.size(); i++) {\n        if (i == 0 || l[i]\
    \ != l[i - 1]) {\n            ret.push_back(l[i]);\n        }\n    }\n    return\
    \ ret;", "    std::vector<long> res;\n    std::sort(l.begin(), l.end());\n   \
    \ for (int i = 0; i < l.size(); i++) {\n        if (i == 0 || l[i] != l[i - 1])\
    \ {\n            res.push_back(l[i]);\n        }\n    }\n    return res;", " \
    \   std::vector<long>::iterator it;\n    std::sort(l.begin(), l.end());\n    it\
    \ = std::unique(l.begin(), l.end());\n    l.resize(std::distance(l.begin(), it));\n\
    \    return l;", "    std::sort(l.begin(), l.end());\n    auto last = std::unique(l.begin(),\
    \ l.end());\n    l.erase(last, l.end());\n    return l;", "    std::vector<long>::iterator\
    \ it;\n    std::sort(l.begin(), l.end());\n    it = std::unique(l.begin(), l.end());\n\
    \    l.resize(std::distance(l.begin(), it));\n    return l;", "    std::vector<long>\
    \ res;\n    std::sort(l.begin(), l.end());\n    for (long i = 0; i < l.size();\
    \ i++) {\n        if (i == 0 || l[i] != l[i - 1]) {\n            res.push_back(l[i]);\n\
    \        }\n    }\n    return res;", "    std::vector<long> res;\n    std::sort(l.begin(),\
    \ l.end());\n    for (long i = 0; i < l.size(); i++) {\n        if (i == 0 ||\
    \ l[i] != l[i - 1]) {\n            res.push_back(l[i]);\n        }\n    }\n  \
    \  return res;", "    std::vector<long> res;\n    std::sort(l.begin(), l.end());\n\
    \    for (int i = 0; i < l.size(); i++) {\n        if (i == 0 || l[i] != l[i -\
    \ 1]) {\n            res.push_back(l[i]);\n        }\n    }\n    return res;",
  "    std::vector<long> ret;\n    std::sort(l.begin(), l.end());\n    for (int i\
    \ = 0; i < l.size(); i++) {\n        if (i == 0 || l[i] != l[i - 1]) {\n     \
    \       ret.push_back(l[i]);\n        }\n    }\n    return ret;", "    std::sort(l.begin(),\
    \ l.end());\n    l.erase(std::unique(l.begin(), l.end()), l.end());\n    return\
    \ l;", "    std::vector<long> result;\n    std::sort(l.begin(), l.end());\n  \
    \  for (int i = 0; i < l.size(); i++) {\n        if (i == 0 || l[i] != l[i - 1])\
    \ {\n            result.push_back(l[i]);\n        }\n    }\n    return result;",
  "    std::vector<long> res;\n    std::sort(l.begin(), l.end());\n    for (auto i\
    \ : l) {\n        if (res.size() == 0 || res.back() != i) {\n            res.push_back(i);\n\
    \        }\n    }\n    return res;", "    std::vector<long> res;\n    std::sort(l.begin(),\
    \ l.end());\n    for (auto i = l.begin(); i != l.end(); i++) {\n        if (i\
    \ == l.begin() || *i != *(i - 1)) {\n            res.push_back(*i);\n        }\n\
    \    }\n    return res;", "    std::vector<long> res;\n    std::sort(l.begin(),\
    \ l.end());\n    for (int i = 0; i < l.size(); i++) {\n        if (i == 0 || l[i]\
    \ != l[i - 1]) {\n            res.push_back(l[i]);\n        }\n    }\n    return\
    \ res;", "    std::vector<long> ret;\n    std::sort(l.begin(), l.end());\n   \
    \ ret.push_back(l[0]);\n    for (int i = 1; i < l.size(); i++) {\n        if (l[i]\
    \ != l[i-1]) {\n            ret.push_back(l[i]);\n        }\n    }\n    return\
    \ ret;", "    std::vector<long>::iterator it;\n    std::sort(l.begin(), l.end());\n\
    \    it = std::unique(l.begin(), l.end());\n    l.resize(std::distance(l.begin(),\
    \ it));\n    return l;", "    std::vector<long>::iterator it;\n    std::sort(l.begin(),\
    \ l.end());\n    it = std::unique(l.begin(), l.end());\n    l.resize(std::distance(l.begin(),\
    \ it));\n    return l;", "    std::vector<long>::iterator it;\n    std::sort(l.begin(),\
    \ l.end());\n    it = std::unique(l.begin(), l.end());\n    l.resize(std::distance(l.begin(),\
    \ it));\n    return l;", "    std::vector<long>::iterator it;\n    std::sort(l.begin(),\
    \ l.end());\n    it = std::unique(l.begin(), l.end());\n    l.resize(std::distance(l.begin(),\
    \ it));\n    return l;", "    std::vector<long> res;\n    std::sort(l.begin(),\
    \ l.end());\n    for (int i = 0; i < l.size(); i++) {\n        if (i == 0 || l[i]\
    \ != l[i - 1]) {\n            res.push_back(l[i]);\n        }\n    }\n    return\
    \ res;", "    std::vector<long>::iterator it;\n    std::sort(l.begin(), l.end());\n\
    \    it = std::unique(l.begin(), l.end());\n    l.resize(std::distance(l.begin(),\
    \ it));\n    return l;", "    std::vector<long> res;\n    for (long i = 0; i <\
    \ l.size(); i++) {\n        if (std::find(res.begin(), res.end(), l[i]) == res.end())\
    \ {\n            res.push_back(l[i]);\n        }\n    }\n    std::sort(res.begin(),\
    \ res.end());\n    return res;", "    std::sort(l.begin(), l.end());\n    l.erase(std::unique(l.begin(),\
    \ l.end()), l.end());\n    return l;", "    std::sort(l.begin(), l.end());\n \
    \   l.erase(std::unique(l.begin(), l.end()), l.end());\n    return l;", "    std::sort(l.begin(),\
    \ l.end());\n    l.erase(std::unique(l.begin(), l.end()), l.end());\n    return\
    \ l;", "    std::vector<long> ret;\n    std::sort(l.begin(), l.end());\n    for\
    \ (auto i = l.begin(); i != l.end(); i++) {\n        if (i == l.begin() || *i\
    \ != *(i - 1)) {\n            ret.push_back(*i);\n        }\n    }\n    return\
    \ ret;", "    std::vector<long>::iterator it;\n    std::sort(l.begin(), l.end());\n\
    \    it = std::unique(l.begin(), l.end());\n    l.resize(std::distance(l.begin(),\
    \ it));\n    return l;", "    std::vector<long>::iterator it;\n    std::sort(l.begin(),\
    \ l.end());\n    it = std::unique(l.begin(), l.end());\n    l.resize(std::distance(l.begin(),\
    \ it));\n    return l;", "    std::sort(l.begin(), l.end());\n    l.erase(std::unique(l.begin(),\
    \ l.end()), l.end());\n    return l;", "    std::vector<long> ret;\n    std::sort(l.begin(),\
    \ l.end());\n    for (int i = 0; i < l.size(); i++) {\n        if (i == 0 || l[i]\
    \ != l[i - 1]) {\n            ret.push_back(l[i]);\n        }\n    }\n    return\
    \ ret;", "    std::vector<long>::iterator it;\n    std::sort(l.begin(), l.end());\n\
    \    it = std::unique(l.begin(), l.end());\n    l.resize(std::distance(l.begin(),\
    \ it));\n    return l;", "    std::vector<long> res;\n    std::sort(l.begin(),\
    \ l.end());\n    for (int i = 0; i < l.size(); i++) {\n        if (i == 0 || l[i]\
    \ != l[i - 1]) {\n            res.push_back(l[i]);\n        }\n    }\n    return\
    \ res;", "    std::vector<long>::iterator it;\n    std::sort(l.begin(), l.end());\n\
    \    it = std::unique(l.begin(), l.end());\n    l.resize(std::distance(l.begin(),\
    \ it));\n    return l;", "    std::vector<long> res;\n    std::sort(l.begin(),\
    \ l.end());\n    for (int i = 0; i < l.size(); i++) {\n        if (i == 0 || l[i]\
    \ != l[i - 1]) {\n            res.push_back(l[i]);\n        }\n    }\n    return\
    \ res;", "    std::sort(l.begin(), l.end());\n    l.erase(std::unique(l.begin(),\
    \ l.end()), l.end());\n    return l;", "    std::sort(l.begin(), l.end());\n \
    \   l.erase(std::unique(l.begin(), l.end()), l.end());\n    return l;", "    std::vector<long>\
    \ ret;\n    std::sort(l.begin(), l.end());\n    for (auto i : l) {\n        if\
    \ (ret.size() == 0 || ret.back() != i) {\n            ret.push_back(i);\n    \
    \    }\n    }\n    return ret;", "    std::vector<long> result;\n    std::sort(l.begin(),\
    \ l.end());\n    for (auto i = l.begin(); i != l.end(); i++) {\n        if (i\
    \ == l.begin() || *i != *(i - 1)) {\n            result.push_back(*i);\n     \
    \   }\n    }\n    return result;", "    std::vector<long> res;\n    std::sort(l.begin(),\
    \ l.end());\n    for (int i = 0; i < l.size(); i++) {\n        if (i == 0 || l[i]\
    \ != l[i - 1]) {\n            res.push_back(l[i]);\n        }\n    }\n    return\
    \ res;", "    std::vector<long> res;\n    std::sort(l.begin(), l.end());\n   \
    \ for (long i = 0; i < l.size(); i++) {\n        if (i == 0 || l[i] != l[i - 1])\
    \ {\n            res.push_back(l[i]);\n        }\n    }\n    return res;", " \
    \   std::vector<long> res;\n    std::sort(l.begin(), l.end());\n    for (int i\
    \ = 0; i < l.size(); i++) {\n        if (i == 0 || l[i] != l[i - 1]) {\n     \
    \       res.push_back(l[i]);\n        }\n    }\n    return res;", "    std::vector<long>\
    \ result;\n    std::sort(l.begin(), l.end());\n    result.push_back(l[0]);\n \
    \   for (int i = 1; i < l.size(); i++) {\n        if (l[i] != l[i - 1]) {\n  \
    \          result.push_back(l[i]);\n        }\n    }\n    return result;", " \
    \   std::vector<long>::iterator it;\n    std::sort(l.begin(), l.end());\n    it\
    \ = std::unique(l.begin(), l.end());\n    l.resize(std::distance(l.begin(), it));\n\
    \    return l;", "    std::vector<long>::iterator it;\n    std::sort(l.begin(),\
    \ l.end());\n    it = std::unique(l.begin(), l.end());\n    l.resize(std::distance(l.begin(),\
    \ it));\n    return l;", "    std::sort(l.begin(), l.end());\n    l.erase(std::unique(l.begin(),\
    \ l.end()), l.end());\n    return l;", "    std::vector<long> res;\n    std::sort(l.begin(),\
    \ l.end());\n    for (int i = 0; i < l.size(); i++) {\n        if (i == 0 || l[i]\
    \ != l[i - 1]) {\n            res.push_back(l[i]);\n        }\n    }\n    return\
    \ res;", "    std::sort(l.begin(), l.end());\n    auto last = std::unique(l.begin(),\
    \ l.end());\n    l.erase(last, l.end());\n    return l;", "    std::vector<long>\
    \ ret;\n    std::sort(l.begin(), l.end());\n    ret.push_back(l[0]);\n    for\
    \ (int i = 1; i < l.size(); i++) {\n        if (l[i] != l[i-1]) {\n          \
    \  ret.push_back(l[i]);\n        }\n    }\n    return ret;", "    std::vector<long>::iterator\
    \ it;\n    std::sort(l.begin(), l.end());\n    it = std::unique(l.begin(), l.end());\n\
    \    l.resize(std::distance(l.begin(), it));\n    return l;", "    std::vector<long>::iterator\
    \ it;\n    std::sort(l.begin(), l.end());\n    it = std::unique(l.begin(), l.end());\n\
    \    l.resize(std::distance(l.begin(), it));\n    return l;", "    std::vector<long>::iterator\
    \ it;\n    std::sort(l.begin(), l.end());\n    it = std::unique(l.begin(), l.end());\n\
    \    l.resize(std::distance(l.begin(), it));\n    return l;", "    std::vector<long>::iterator\
    \ it;\n    std::sort(l.begin(), l.end());\n    it = std::unique(l.begin(), l.end());\n\
    \    l.resize(std::distance(l.begin(), it));\n    return l;", "    std::sort(l.begin(),\
    \ l.end());\n    l.erase(std::unique(l.begin(), l.end()), l.end());\n    return\
    \ l;", "    std::vector<long>::iterator it;\n    std::sort(l.begin(), l.end());\n\
    \    it = std::unique(l.begin(), l.end());\n    l.resize(std::distance(l.begin(),\
    \ it));\n    return l;", "    std::sort(l.begin(), l.end());\n    l.erase(std::unique(l.begin(),\
    \ l.end()), l.end());\n    return l;", "    std::vector<long> res;\n    std::sort(l.begin(),\
    \ l.end());\n    for (int i = 0; i < l.size(); i++) {\n        if (i == 0 || l[i]\
    \ != l[i - 1]) {\n            res.push_back(l[i]);\n        }\n    }\n    return\
    \ res;", "    std::sort(l.begin(), l.end());\n    l.erase(std::unique(l.begin(),\
    \ l.end()), l.end());\n    return l;", "    std::vector<long> res;\n    for (auto\
    \ i : l) {\n        if (std::find(res.begin(), res.end(), i) == res.end()) {\n\
    \            res.push_back(i);\n        }\n    }\n    std::sort(res.begin(), res.end());\n\
    \    return res;", "    std::vector<long> res;\n    std::sort(l.begin(), l.end());\n\
    \    for (long i = 0; i < l.size(); i++) {\n        if (i == 0 || l[i] != l[i\
    \ - 1]) {\n            res.push_back(l[i]);\n        }\n    }\n    return res;",
  "    std::sort(l.begin(), l.end());\n    l.erase(std::unique(l.begin(), l.end()),\
    \ l.end());\n    return l;", "  std::vector<long> res;\n  std::sort(l.begin(),\
    \ l.end());\n  for (auto i : l) {\n    if (res.size() == 0 || res.back() != i)\
    \ {\n      res.push_back(i);\n    }\n  }\n  return res;", "    std::sort(l.begin(),\
    \ l.end());\n    l.erase(std::unique(l.begin(), l.end()), l.end());\n    return\
    \ l;", "    std::vector<long> ret;\n    std::sort(l.begin(), l.end());\n    for\
    \ (int i = 0; i < l.size(); i++) {\n        if (i == 0 || l[i] != l[i - 1]) {\n\
    \            ret.push_back(l[i]);\n        }\n    }\n    return ret;", "    std::vector<long>::iterator\
    \ it;\n    std::sort(l.begin(), l.end());\n    it = std::unique(l.begin(), l.end());\n\
    \    l.resize(std::distance(l.begin(), it));\n    return l;", "    std::vector<long>::iterator\
    \ it;\n    std::sort(l.begin(), l.end());\n    it = std::unique(l.begin(), l.end());\n\
    \    l.resize(std::distance(l.begin(), it));\n    return l;", "    std::vector<long>\
    \ ret;\n    std::sort(l.begin(), l.end());\n    for (long i = 0; i < l.size();\
    \ i++) {\n        if (i == 0 || l[i] != l[i - 1]) {\n            ret.push_back(l[i]);\n\
    \        }\n    }\n    return ret;", "    std::vector<long> result;\n    std::sort(l.begin(),\
    \ l.end());\n    for (int i = 0; i < l.size(); i++) {\n        if (i == 0 || l[i]\
    \ != l[i - 1]) {\n            result.push_back(l[i]);\n        }\n    }\n    return\
    \ result;", "    std::vector<long> res;\n    std::sort(l.begin(), l.end());\n\
    \    for (long i = 0; i < l.size(); i++) {\n        if (i == 0 || l[i] != l[i\
    \ - 1]) {\n            res.push_back(l[i]);\n        }\n    }\n    return res;",
  "    std::vector<long> result;\n    std::sort(l.begin(), l.end());\n    for (int\
    \ i = 0; i < l.size(); i++) {\n        if (i == 0 || l[i] != l[i - 1]) {\n   \
    \         result.push_back(l[i]);\n        }\n    }\n    return result;", "  std::sort(l.begin(),\
    \ l.end());\n  auto last = std::unique(l.begin(), l.end());\n  l.erase(last, l.end());\n\
    \  return l;", "    std::vector<long> res;\n    std::sort(l.begin(), l.end());\n\
    \    for (int i = 0; i < l.size(); i++) {\n        if (i == 0 || l[i] != l[i -\
    \ 1]) {\n            res.push_back(l[i]);\n        }\n    }\n    return res;",
  "    std::vector<long> ret;\n    std::sort(l.begin(), l.end());\n    ret.push_back(l[0]);\n\
    \    for (int i = 1; i < l.size(); i++) {\n        if (l[i] != l[i-1]) {\n   \
    \         ret.push_back(l[i]);\n        }\n    }\n    return ret;", "    std::sort(l.begin(),\
    \ l.end());\n    l.erase(std::unique(l.begin(), l.end()), l.end());\n    return\
    \ l;", "    std::vector<long>::iterator it;\n    std::sort(l.begin(), l.end());\n\
    \    it = std::unique(l.begin(), l.end());\n    l.resize(std::distance(l.begin(),\
    \ it));\n    return l;", "    std::sort(l.begin(), l.end());\n    l.erase(std::unique(l.begin(),\
    \ l.end()), l.end());\n    return l;", "    std::vector<long>::iterator it;\n\
    \    std::sort(l.begin(), l.end());\n    it = std::unique(l.begin(), l.end());\n\
    \    l.resize(std::distance(l.begin(), it));\n    return l;", "    std::vector<long>\
    \ res;\n    std::sort(l.begin(), l.end());\n    for (int i = 0; i < l.size();\
    \ i++) {\n        if (i == 0 || l[i] != l[i - 1]) {\n            res.push_back(l[i]);\n\
    \        }\n    }\n    return res;", "    std::sort(l.begin(), l.end());\n   \
    \ l.erase(std::unique(l.begin(), l.end()), l.end());\n    return l;", "    std::sort(l.begin(),\
    \ l.end());\n    l.erase(std::unique(l.begin(), l.end()), l.end());\n    return\
    \ l;", "    std::vector<long>::iterator it;\n    std::sort(l.begin(), l.end());\n\
    \    it = std::unique(l.begin(), l.end());\n    l.resize(std::distance(l.begin(),\
    \ it));\n    return l;", "    std::vector<long> res;\n    std::sort(l.begin(),\
    \ l.end());\n    for (int i = 0; i < l.size(); i++) {\n        if (i == 0 || l[i]\
    \ != l[i - 1]) {\n            res.push_back(l[i]);\n        }\n    }\n    return\
    \ res;", "    std::vector<long> ret;\n    std::sort(l.begin(), l.end());\n   \
    \ for (int i = 0; i < l.size(); i++) {\n        if (i == 0 || l[i] != l[i - 1])\
    \ {\n            ret.push_back(l[i]);\n        }\n    }\n    return ret;", " \
    \   std::sort(l.begin(), l.end());\n    l.erase(std::unique(l.begin(), l.end()),\
    \ l.end());\n    return l;", "    std::sort(l.begin(), l.end());\n    l.erase(std::unique(l.begin(),\
    \ l.end()), l.end());\n    return l;", "    std::vector<long> res;\n    std::sort(l.begin(),\
    \ l.end());\n    for (int i = 0; i < l.size(); i++) {\n        if (i == 0 || l[i]\
    \ != l[i - 1]) {\n            res.push_back(l[i]);\n        }\n    }\n    return\
    \ res;", "    std::vector<long> ret;\n    std::sort(l.begin(), l.end());\n   \
    \ ret.push_back(l[0]);\n    for (int i = 1; i < l.size(); i++) {\n        if (l[i]\
    \ != l[i-1]) {\n            ret.push_back(l[i]);\n        }\n    }\n    return\
    \ ret;", "    std::vector<long>::iterator it;\n    std::sort(l.begin(), l.end());\n\
    \    it = std::unique(l.begin(), l.end());\n    l.resize(std::distance(l.begin(),\
    \ it));\n    return l;", "    std::sort(l.begin(), l.end());\n    l.erase(std::unique(l.begin(),\
    \ l.end()), l.end());\n    return l;", "    std::vector<long> ret;\n    std::sort(l.begin(),\
    \ l.end());\n    std::unique_copy(l.begin(), l.end(), std::back_inserter(ret));\n\
    \    return ret;", "    std::vector<long>::iterator it;\n    std::sort(l.begin(),\
    \ l.end());\n    it = std::unique(l.begin(), l.end());\n    l.resize(std::distance(l.begin(),\
    \ it));\n    return l;", "    std::vector<long>::iterator it;\n    std::sort(l.begin(),\
    \ l.end());\n    it = std::unique(l.begin(), l.end());\n    l.resize(std::distance(l.begin(),\
    \ it));\n    return l;", "    std::vector<long> result;\n    std::sort(l.begin(),\
    \ l.end());\n    for (int i = 0; i < l.size(); i++) {\n        if (i == 0 || l[i]\
    \ != l[i - 1]) {\n            result.push_back(l[i]);\n        }\n    }\n    return\
    \ result;", "    std::vector<long>::iterator it;\n    std::sort(l.begin(), l.end());\n\
    \    it = std::unique(l.begin(), l.end());\n    l.resize(std::distance(l.begin(),\
    \ it));\n    return l;", "    std::vector<long> res;\n    std::sort(l.begin(),\
    \ l.end());\n    for (int i = 0; i < l.size(); i++) {\n        if (i == 0 || l[i]\
    \ != l[i - 1]) {\n            res.push_back(l[i]);\n        }\n    }\n    return\
    \ res;", "    std::vector<long> ret;\n    std::sort(l.begin(), l.end());\n   \
    \ ret.push_back(l[0]);\n    for (int i = 1; i < l.size(); i++) {\n        if (l[i]\
    \ != l[i-1]) {\n            ret.push_back(l[i]);\n        }\n    }\n    return\
    \ ret;", "    std::sort(l.begin(), l.end());\n    auto last = std::unique(l.begin(),\
    \ l.end());\n    l.erase(last, l.end());\n    return l;", "    std::vector<long>::iterator\
    \ it;\n    std::sort(l.begin(), l.end());\n    it = std::unique(l.begin(), l.end());\n\
    \    l.resize(std::distance(l.begin(), it));\n    return l;", "    std::vector<long>\
    \ ans;\n    std::sort(l.begin(), l.end());\n    for (long i = 0; i < l.size();\
    \ i++) {\n        if (i == 0 || l[i] != l[i - 1]) {\n            ans.push_back(l[i]);\n\
    \        }\n    }\n    return ans;", "    std::vector<long>::iterator it;\n  \
    \  std::sort(l.begin(), l.end());\n    it = std::unique(l.begin(), l.end());\n\
    \    l.resize(std::distance(l.begin(), it));\n    return l;", "    std::vector<long>::iterator\
    \ it;\n    std::sort(l.begin(), l.end());\n    it = std::unique(l.begin(), l.end());\n\
    \    l.resize(std::distance(l.begin(), it));\n    return l;", "    std::sort(l.begin(),\
    \ l.end());\n    l.erase(std::unique(l.begin(), l.end()), l.end());\n    return\
    \ l;", "    std::vector<long> result;\n    std::sort(l.begin(), l.end());\n  \
    \  for (int i = 0; i < l.size(); i++) {\n        if (i == 0 || l[i] != l[i - 1])\
    \ {\n            result.push_back(l[i]);\n        }\n    }\n    return result;",
  "    std::vector<long> res;\n    std::sort(l.begin(), l.end());\n    for (int i\
    \ = 0; i < l.size(); i++) {\n        if (i == 0 || l[i] != l[i - 1]) {\n     \
    \       res.push_back(l[i]);\n        }\n    }\n    return res;", "    std::vector<long>::iterator\
    \ it;\n    std::sort(l.begin(), l.end());\n    it = std::unique(l.begin(), l.end());\n\
    \    l.resize(std::distance(l.begin(), it));\n    return l;", "    std::vector<long>\
    \ res;\n    std::sort(l.begin(), l.end());\n    for (int i = 0; i < l.size();\
    \ i++) {\n        if (i == 0 || l[i] != l[i - 1]) {\n            res.push_back(l[i]);\n\
    \        }\n    }\n    return res;", "    std::vector<long> res;\n    std::sort(l.begin(),\
    \ l.end());\n    for (int i = 0; i < l.size(); i++) {\n        if (i == 0 || l[i]\
    \ != l[i - 1]) {\n            res.push_back(l[i]);\n        }\n    }\n    return\
    \ res;", "    std::vector<long>::iterator it;\n    std::sort(l.begin(), l.end());\n\
    \    it = std::unique(l.begin(), l.end());\n    l.resize(std::distance(l.begin(),\
    \ it));\n    return l;", "    std::vector<long> result;\n    std::sort(l.begin(),\
    \ l.end());\n    for (auto i = l.begin(); i != l.end(); i++) {\n        if (i\
    \ == l.begin() || *i != *(i - 1)) {\n            result.push_back(*i);\n     \
    \   }\n    }\n    return result;", "    std::sort(l.begin(), l.end());\n    l.erase(std::unique(l.begin(),\
    \ l.end()), l.end());\n    return l;"]
stop_tokens:
- "\n}"
