name: HumanEval_156_int_to_mini_roman
language: cpp
prompt: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a positive integer,\
  \ obtain its roman numeral equivalent as a string,\n// and return it in lowercase.\n\
  // Restrictions: 1 <= num <= 1000\n// Examples:\n// >>> int_to_mini_roman(19) ==\
  \ 'xix'\n// >>> int_to_mini_roman(152) == 'clii'\n// >>> int_to_mini_roman(426)\
  \ == 'cdxxvi'\nstd::string int_to_mini_roman(long number) {\n"
tests: "}\nint main() {\n    auto candidate = int_to_mini_roman;\n    assert(candidate((19))\
  \ == (\"xix\"));\n    assert(candidate((152)) == (\"clii\"));\n    assert(candidate((251))\
  \ == (\"ccli\"));\n    assert(candidate((426)) == (\"cdxxvi\"));\n    assert(candidate((500))\
  \ == (\"d\"));\n    assert(candidate((1)) == (\"i\"));\n    assert(candidate((4))\
  \ == (\"iv\"));\n    assert(candidate((43)) == (\"xliii\"));\n    assert(candidate((90))\
  \ == (\"xc\"));\n    assert(candidate((94)) == (\"xciv\"));\n    assert(candidate((532))\
  \ == (\"dxxxii\"));\n    assert(candidate((900)) == (\"cm\"));\n    assert(candidate((994))\
  \ == (\"cmxciv\"));\n    assert(candidate((1000)) == (\"m\"));\n}\n"
completions: ["    std::string roman_numeral;\n    std::vector<std::pair<long, std::string>>\
    \ roman_numerals = {\n        {1000, \"m\"},\n        {900, \"cm\"},\n       \
    \ {500, \"d\"},\n        {400, \"cd\"},\n        {100, \"c\"},\n        {90, \"\
    xc\"},\n        {50, \"l\"},\n        {40, \"xl\"},\n        {10, \"x\"},\n  \
    \      {9, \"ix\"},\n        {5, \"v\"},\n        {4, \"iv\"},\n        {1, \"\
    i\"}\n    };\n    for (auto roman_pair : roman_numerals) {\n        while (number\
    \ >= roman_pair.first) {\n            roman_numeral += roman_pair.second;\n  \
    \          number -= roman_pair.first;\n        }\n    }\n    return roman_numeral;",
  "    std::string roman;\n    std::vector<std::pair<long, std::string>> roman_numerals\
    \ = {\n        {1000, \"m\"},\n        {900, \"cm\"},\n        {500, \"d\"},\n\
    \        {400, \"cd\"},\n        {100, \"c\"},\n        {90, \"xc\"},\n      \
    \  {50, \"l\"},\n        {40, \"xl\"},\n        {10, \"x\"},\n        {9, \"ix\"\
    },\n        {5, \"v\"},\n        {4, \"iv\"},\n        {1, \"i\"}\n    };\n  \
    \  for (auto roman_numeral : roman_numerals) {\n        while (number >= roman_numeral.first)\
    \ {\n            roman += roman_numeral.second;\n            number -= roman_numeral.first;\n\
    \        }\n    }\n    return roman;", "  std::string result;\n  std::string roman[]\
    \ = {\"m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"l\", \"xl\", \"x\", \"ix\"\
    , \"v\", \"iv\", \"i\"};\n  int value[] = {1000, 900, 500, 400, 100, 90, 50, 40,\
    \ 10, 9, 5, 4, 1};\n  for (int i = 0; number != 0; i++) {\n    while (number >=\
    \ value[i]) {\n      number -= value[i];\n      result += roman[i];\n    }\n \
    \ }\n  return result;", "    std::string roman;\n    std::vector<std::pair<int,\
    \ std::string>> roman_numerals = {\n        {1000, \"m\"}, {900, \"cm\"}, {500,\
    \ \"d\"}, {400, \"cd\"}, {100, \"c\"},\n        {90, \"xc\"}, {50, \"l\"}, {40,\
    \ \"xl\"}, {10, \"x\"}, {9, \"ix\"}, {5, \"v\"},\n        {4, \"iv\"}, {1, \"\
    i\"}\n    };\n    for (auto& numeral : roman_numerals) {\n        while (number\
    \ >= numeral.first) {\n            roman += numeral.second;\n            number\
    \ -= numeral.first;\n        }\n    }\n    return roman;", "    std::string result;\n\
    \    int num = number;\n    while(num > 0) {\n        if(num >= 1000) {\n    \
    \        result += \"m\";\n            num -= 1000;\n        } else if(num >=\
    \ 900) {\n            result += \"cm\";\n            num -= 900;\n        } else\
    \ if(num >= 500) {\n            result += \"d\";\n            num -= 500;\n  \
    \      } else if(num >= 400) {\n            result += \"cd\";\n            num\
    \ -= 400;\n        } else if(num >= 100) {\n            result += \"c\";\n   \
    \         num -= 100;\n        } else if(num >= 90) {\n            result += \"\
    xc\";\n            num -= 90;\n        } else if(num >= 50) {\n            result\
    \ += \"l\";\n            num -= 50;\n        } else if(num >= 40) {\n        \
    \    result += \"xl\";\n            num -= 40;\n        } else if(num >= 10) {\n\
    \            result += \"x\";\n            num -= 10;\n        } else if(num >=\
    \ 9) {\n            result += \"ix\";\n            num -= 9;\n        } else if(num\
    \ >= 5) {\n            result += \"v\";\n            num -= 5;\n        } else\
    \ if(num >= 4) {\n            result += \"iv\";\n            num -= 4;\n     \
    \   } else if(num >= 1) {\n            result += \"i\";\n            num -= 1;\n\
    \        }\n    }\n    return result;", "    std::string roman;\n    std::vector<std::pair<int,\
    \ std::string>> roman_numerals = {\n        {1000, \"m\"}, {900, \"cm\"}, {500,\
    \ \"d\"}, {400, \"cd\"}, {100, \"c\"},\n        {90, \"xc\"}, {50, \"l\"}, {40,\
    \ \"xl\"}, {10, \"x\"}, {9, \"ix\"}, {5, \"v\"},\n        {4, \"iv\"}, {1, \"\
    i\"}};\n    for (auto const &numeral : roman_numerals) {\n        while (number\
    \ >= numeral.first) {\n            roman += numeral.second;\n            number\
    \ -= numeral.first;\n        }\n    }\n    return roman;", "    std::string roman;\n\
    \    std::string ones[] = {\"\", \"i\", \"ii\", \"iii\", \"iv\", \"v\", \"vi\"\
    , \"vii\", \"viii\", \"ix\"};\n    std::string tens[] = {\"\", \"x\", \"xx\",\
    \ \"xxx\", \"xl\", \"l\", \"lx\", \"lxx\", \"lxxx\", \"xc\"};\n    std::string\
    \ hundreds[] = {\"\", \"c\", \"cc\", \"ccc\", \"cd\", \"d\", \"dc\", \"dcc\",\
    \ \"dccc\", \"cm\"};\n    std::string thousands[] = {\"\", \"m\", \"mm\", \"mmm\"\
    };\n    roman += thousands[number / 1000];\n    roman += hundreds[(number % 1000)\
    \ / 100];\n    roman += tens[(number % 100) / 10];\n    roman += ones[number %\
    \ 10];\n    return roman;", "    std::string roman;\n    std::string roman_numerals[]\
    \ = {\"m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"l\", \"xl\", \"x\", \"ix\"\
    , \"v\", \"iv\", \"i\"};\n    int decimal_numerals[] = {1000, 900, 500, 400, 100,\
    \ 90, 50, 40, 10, 9, 5, 4, 1};\n    for (int i = 0; i < 13; i++) {\n        while\
    \ (number >= decimal_numerals[i]) {\n            number -= decimal_numerals[i];\n\
    \            roman += roman_numerals[i];\n        }\n    }\n    return roman;",
  "    std::string roman;\n    int i = 0;\n    while (number > 0) {\n        if (number\
    \ >= 1000) {\n            roman += \"m\";\n            number -= 1000;\n     \
    \   } else if (number >= 900) {\n            roman += \"cm\";\n            number\
    \ -= 900;\n        } else if (number >= 500) {\n            roman += \"d\";\n\
    \            number -= 500;\n        } else if (number >= 400) {\n           \
    \ roman += \"cd\";\n            number -= 400;\n        } else if (number >= 100)\
    \ {\n            roman += \"c\";\n            number -= 100;\n        } else if\
    \ (number >= 90) {\n            roman += \"xc\";\n            number -= 90;\n\
    \        } else if (number >= 50) {\n            roman += \"l\";\n           \
    \ number -= 50;\n        } else if (number >= 40) {\n            roman += \"xl\"\
    ;\n            number -= 40;\n        } else if (number >= 10) {\n           \
    \ roman += \"x\";\n            number -= 10;\n        } else if (number >= 9)\
    \ {\n            roman += \"ix\";\n            number -= 9;\n        } else if\
    \ (number >= 5) {\n            roman += \"v\";\n            number -= 5;\n   \
    \     } else if (number >= 4) {\n            roman += \"iv\";\n            number\
    \ -= 4;\n        } else if (number >= 1) {\n            roman += \"i\";\n    \
    \        number -= 1;\n        }\n    }\n    return roman;", "    std::string\
    \ result;\n    std::string roman[] = {\"m\", \"cm\", \"d\", \"cd\", \"c\", \"\
    xc\", \"l\", \"xl\", \"x\", \"ix\", \"v\", \"iv\", \"i\"};\n    int value[] =\
    \ {1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1};\n    for (int i = 0;\
    \ number != 0; ++i) {\n        while (number >= value[i]) {\n            number\
    \ -= value[i];\n            result += roman[i];\n        }\n    }\n    return\
    \ result;", "    std::string result;\n    std::vector<std::pair<long, std::string>>\
    \ roman_numerals = {\n        {1000, \"m\"},\n        {900, \"cm\"},\n       \
    \ {500, \"d\"},\n        {400, \"cd\"},\n        {100, \"c\"},\n        {90, \"\
    xc\"},\n        {50, \"l\"},\n        {40, \"xl\"},\n        {10, \"x\"},\n  \
    \      {9, \"ix\"},\n        {5, \"v\"},\n        {4, \"iv\"},\n        {1, \"\
    i\"}\n    };\n    for (auto roman_numeral : roman_numerals) {\n        while (number\
    \ >= roman_numeral.first) {\n            result += roman_numeral.second;\n   \
    \         number -= roman_numeral.first;\n        }\n    }\n    return result;",
  "    std::string roman;\n    while (number >= 1000) {\n        roman += \"m\";\n\
    \        number -= 1000;\n    }\n    if (number >= 900) {\n        roman += \"\
    cm\";\n        number -= 900;\n    }\n    if (number >= 500) {\n        roman\
    \ += \"d\";\n        number -= 500;\n    }\n    if (number >= 400) {\n       \
    \ roman += \"cd\";\n        number -= 400;\n    }\n    while (number >= 100) {\n\
    \        roman += \"c\";\n        number -= 100;\n    }\n    if (number >= 90)\
    \ {\n        roman += \"xc\";\n        number -= 90;\n    }\n    if (number >=\
    \ 50) {\n        roman += \"l\";\n        number -= 50;\n    }\n    if (number\
    \ >= 40) {\n        roman += \"xl\";\n        number -= 40;\n    }\n    while\
    \ (number >= 10) {\n        roman += \"x\";\n        number -= 10;\n    }\n  \
    \  if (number >= 9) {\n        roman += \"ix\";\n        number -= 9;\n    }\n\
    \    if (number >= 5) {\n        roman += \"v\";\n        number -= 5;\n    }\n\
    \    if (number >= 4) {\n        roman += \"iv\";\n        number -= 4;\n    }\n\
    \    while (number >= 1) {\n        roman += \"i\";\n        number -= 1;\n  \
    \  }\n    return roman;", "    std::string roman_numeral;\n    std::string roman_numerals[]\
    \ = {\"m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"l\", \"xl\", \"x\", \"ix\"\
    , \"v\", \"iv\", \"i\"};\n    int values[] = {1000, 900, 500, 400, 100, 90, 50,\
    \ 40, 10, 9, 5, 4, 1};\n    for (int i = 0; i < 13; i++) {\n        while (number\
    \ >= values[i]) {\n            number -= values[i];\n            roman_numeral\
    \ += roman_numerals[i];\n        }\n    }\n    return roman_numeral;", "    std::string\
    \ result;\n    std::string roman[] = {\"m\", \"cm\", \"d\", \"cd\", \"c\", \"\
    xc\", \"l\", \"xl\", \"x\", \"ix\", \"v\", \"iv\", \"i\"};\n    int value[] =\
    \ {1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1};\n    for (int i = 0;\
    \ number != 0; i++) {\n        while (number >= value[i]) {\n            number\
    \ -= value[i];\n            result += roman[i];\n        }\n    }\n    return\
    \ result;", "    std::string result;\n    std::string roman[] = {\"m\", \"cm\"\
    , \"d\", \"cd\", \"c\", \"xc\", \"l\", \"xl\", \"x\", \"ix\", \"v\", \"iv\", \"\
    i\"};\n    int value[] = {1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1};\n\
    \    for (int i = 0; number != 0; i++) {\n        while (number >= value[i]) {\n\
    \            number -= value[i];\n            result += roman[i];\n        }\n\
    \    }\n    return result;", "    std::string result;\n    std::string roman_numerals[]\
    \ = {\"m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"l\", \"xl\", \"x\", \"ix\"\
    , \"v\", \"iv\", \"i\"};\n    int decimal_values[] = {1000, 900, 500, 400, 100,\
    \ 90, 50, 40, 10, 9, 5, 4, 1};\n    for (int i = 0; i < 13; i++) {\n        while\
    \ (number >= decimal_values[i]) {\n            number -= decimal_values[i];\n\
    \            result += roman_numerals[i];\n        }\n    }\n    return result;",
  "    std::string roman_numeral;\n    std::string roman_numerals[] = {\"m\", \"cm\"\
    , \"d\", \"cd\", \"c\", \"xc\", \"l\", \"xl\", \"x\", \"ix\", \"v\", \"iv\", \"\
    i\"};\n    int values[] = {1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4,\
    \ 1};\n    for (int i = 0; i < 13; i++) {\n        while (number >= values[i])\
    \ {\n            number -= values[i];\n            roman_numeral += roman_numerals[i];\n\
    \        }\n    }\n    return roman_numeral;", "    std::string roman;\n    std::vector<std::pair<int,\
    \ std::string>> roman_numerals = {\n        {1000, \"m\"}, {900, \"cm\"}, {500,\
    \ \"d\"}, {400, \"cd\"}, {100, \"c\"},\n        {90, \"xc\"}, {50, \"l\"}, {40,\
    \ \"xl\"}, {10, \"x\"}, {9, \"ix\"}, {5, \"v\"},\n        {4, \"iv\"}, {1, \"\
    i\"}};\n    for (auto roman_numeral : roman_numerals) {\n        while (number\
    \ >= roman_numeral.first) {\n            roman += roman_numeral.second;\n    \
    \        number -= roman_numeral.first;\n        }\n    }\n    return roman;",
  "    std::string roman;\n    int num = number;\n    while(num > 0) {\n        if(num\
    \ >= 1000) {\n            roman += \"m\";\n            num -= 1000;\n        }\n\
    \        else if(num >= 900) {\n            roman += \"cm\";\n            num\
    \ -= 900;\n        }\n        else if(num >= 500) {\n            roman += \"d\"\
    ;\n            num -= 500;\n        }\n        else if(num >= 400) {\n       \
    \     roman += \"cd\";\n            num -= 400;\n        }\n        else if(num\
    \ >= 100) {\n            roman += \"c\";\n            num -= 100;\n        }\n\
    \        else if(num >= 90) {\n            roman += \"xc\";\n            num -=\
    \ 90;\n        }\n        else if(num >= 50) {\n            roman += \"l\";\n\
    \            num -= 50;\n        }\n        else if(num >= 40) {\n           \
    \ roman += \"xl\";\n            num -= 40;\n        }\n        else if(num >=\
    \ 10) {\n            roman += \"x\";\n            num -= 10;\n        }\n    \
    \    else if(num >= 9) {\n            roman += \"ix\";\n            num -= 9;\n\
    \        }\n        else if(num >= 5) {\n            roman += \"v\";\n       \
    \     num -= 5;\n        }\n        else if(num >= 4) {\n            roman +=\
    \ \"iv\";\n            num -= 4;\n        }\n        else if(num >= 1) {\n   \
    \         roman += \"i\";\n            num -= 1;\n        }\n    }\n    return\
    \ roman;", "  std::string roman;\n  std::vector<std::pair<long, std::string>>\
    \ roman_numerals = {\n    {1000, \"m\"}, {900, \"cm\"}, {500, \"d\"}, {400, \"\
    cd\"}, {100, \"c\"},\n    {90, \"xc\"}, {50, \"l\"}, {40, \"xl\"}, {10, \"x\"\
    }, {9, \"ix\"}, {5, \"v\"},\n    {4, \"iv\"}, {1, \"i\"}\n  };\n  for (auto const&\
    \ numeral : roman_numerals) {\n    while (number >= numeral.first) {\n      roman\
    \ += numeral.second;\n      number -= numeral.first;\n    }\n  }\n  return roman;",
  "  std::string roman;\n  std::vector<std::pair<int, std::string>> roman_numerals\
    \ = {\n    {1000, \"m\"}, {900, \"cm\"}, {500, \"d\"}, {400, \"cd\"}, {100, \"\
    c\"},\n    {90, \"xc\"}, {50, \"l\"}, {40, \"xl\"}, {10, \"x\"}, {9, \"ix\"},\
    \ {5, \"v\"},\n    {4, \"iv\"}, {1, \"i\"}\n  };\n  for (auto &roman_numeral :\
    \ roman_numerals) {\n    while (number >= roman_numeral.first) {\n      roman\
    \ += roman_numeral.second;\n      number -= roman_numeral.first;\n    }\n  }\n\
    \  return roman;", "    std::string roman;\n    std::string roman_numerals[] =\
    \ {\"m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"l\", \"xl\", \"x\", \"ix\",\
    \ \"v\", \"iv\", \"i\"};\n    int arabic_numerals[] = {1000, 900, 500, 400, 100,\
    \ 90, 50, 40, 10, 9, 5, 4, 1};\n    for (int i = 0; i < 13; i++) {\n        while\
    \ (number >= arabic_numerals[i]) {\n            number -= arabic_numerals[i];\n\
    \            roman += roman_numerals[i];\n        }\n    }\n    return roman;",
  "    std::string roman;\n    std::string roman_numerals[] = {\"m\", \"cm\", \"d\"\
    , \"cd\", \"c\", \"xc\", \"l\", \"xl\", \"x\", \"ix\", \"v\", \"iv\", \"i\"};\n\
    \    int decimal_numerals[] = {1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5,\
    \ 4, 1};\n    for (int i = 0; i < 13; i++) {\n        while (number >= decimal_numerals[i])\
    \ {\n            number -= decimal_numerals[i];\n            roman += roman_numerals[i];\n\
    \        }\n    }\n    return roman;", "    std::string roman;\n    std::vector<std::pair<long,\
    \ std::string>> numerals = {\n        {1000, \"m\"},\n        {900, \"cm\"},\n\
    \        {500, \"d\"},\n        {400, \"cd\"},\n        {100, \"c\"},\n      \
    \  {90, \"xc\"},\n        {50, \"l\"},\n        {40, \"xl\"},\n        {10, \"\
    x\"},\n        {9, \"ix\"},\n        {5, \"v\"},\n        {4, \"iv\"},\n     \
    \   {1, \"i\"}\n    };\n    for (auto numeral : numerals) {\n        while (number\
    \ >= numeral.first) {\n            roman += numeral.second;\n            number\
    \ -= numeral.first;\n        }\n    }\n    return roman;", "    std::string result;\n\
    \    std::vector<std::pair<long, std::string>> roman_numerals = {\n        {1000,\
    \ \"m\"},\n        {900, \"cm\"},\n        {500, \"d\"},\n        {400, \"cd\"\
    },\n        {100, \"c\"},\n        {90, \"xc\"},\n        {50, \"l\"},\n     \
    \   {40, \"xl\"},\n        {10, \"x\"},\n        {9, \"ix\"},\n        {5, \"\
    v\"},\n        {4, \"iv\"},\n        {1, \"i\"}\n    };\n    for (auto roman :\
    \ roman_numerals) {\n        while (number >= roman.first) {\n            result\
    \ += roman.second;\n            number -= roman.first;\n        }\n    }\n   \
    \ return result;", "    std::string result;\n    std::string roman[] = {\"m\"\
    , \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"l\", \"xl\", \"x\", \"ix\", \"v\", \"\
    iv\", \"i\"};\n    int value[] = {1000, 900, 500, 400, 100, 90, 50, 40, 10, 9,\
    \ 5, 4, 1};\n    for (int i = 0; number != 0; ++i) {\n        while (number >=\
    \ value[i]) {\n            number -= value[i];\n            result += roman[i];\n\
    \        }\n    }\n    return result;", "  std::string roman;\n  std::string roman_numerals[]\
    \ = {\"m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"l\", \"xl\", \"x\", \"ix\"\
    , \"v\", \"iv\", \"i\"};\n  int values[] = {1000, 900, 500, 400, 100, 90, 50,\
    \ 40, 10, 9, 5, 4, 1};\n  for (int i = 0; i < 13; i++) {\n    while (number >=\
    \ values[i]) {\n      number -= values[i];\n      roman += roman_numerals[i];\n\
    \    }\n  }\n  return roman;", "    std::string result;\n    std::string roman[]\
    \ = {\"m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"l\", \"xl\", \"x\", \"ix\"\
    , \"v\", \"iv\", \"i\"};\n    int value[] = {1000, 900, 500, 400, 100, 90, 50,\
    \ 40, 10, 9, 5, 4, 1};\n    for (int i = 0; number != 0; i++) {\n        while\
    \ (number >= value[i]) {\n            number -= value[i];\n            result\
    \ += roman[i];\n        }\n    }\n    return result;", "    std::string result;\n\
    \    std::string roman[] = {\"m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"l\"\
    , \"xl\", \"x\", \"ix\", \"v\", \"iv\", \"i\"};\n    int decimal[] = {1000, 900,\
    \ 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1};\n    for (int i = 0; number != 0;\
    \ ++i) {\n        while (number >= decimal[i]) {\n            number -= decimal[i];\n\
    \            result += roman[i];\n        }\n    }\n    return result;", "   \
    \ std::string roman;\n    std::string roman_numerals[13] = {\"m\", \"cm\", \"\
    d\", \"cd\", \"c\", \"xc\", \"l\", \"xl\", \"x\", \"ix\", \"v\", \"iv\", \"i\"\
    };\n    int arabic_numerals[13] = {1000, 900, 500, 400, 100, 90, 50, 40, 10, 9,\
    \ 5, 4, 1};\n    for (int i = 0; i < 13; i++) {\n        while (number >= arabic_numerals[i])\
    \ {\n            number -= arabic_numerals[i];\n            roman += roman_numerals[i];\n\
    \        }\n    }\n    return roman;", "    std::string roman;\n    std::string\
    \ roman_numerals[4][10] = {\n        {\"\", \"i\", \"ii\", \"iii\", \"iv\", \"\
    v\", \"vi\", \"vii\", \"viii\", \"ix\"},\n        {\"\", \"x\", \"xx\", \"xxx\"\
    , \"xl\", \"l\", \"lx\", \"lxx\", \"lxxx\", \"xc\"},\n        {\"\", \"c\", \"\
    cc\", \"ccc\", \"cd\", \"d\", \"dc\", \"dcc\", \"dccc\", \"cm\"},\n        {\"\
    \", \"m\", \"mm\", \"mmm\", \"\", \"\", \"\", \"\", \"\", \"\"}\n    };\n    int\
    \ i = 0;\n    while (number > 0) {\n        roman = roman_numerals[i][number %\
    \ 10] + roman;\n        number /= 10;\n        i++;\n    }\n    return roman;",
  "    std::string roman;\n    std::vector<std::pair<long, std::string>> roman_numerals\
    \ = {\n        {1000, \"m\"}, {900, \"cm\"}, {500, \"d\"}, {400, \"cd\"}, {100,\
    \ \"c\"},\n        {90, \"xc\"}, {50, \"l\"}, {40, \"xl\"}, {10, \"x\"}, {9, \"\
    ix\"}, {5, \"v\"},\n        {4, \"iv\"}, {1, \"i\"}\n    };\n    for (auto rn\
    \ : roman_numerals) {\n        while (number >= rn.first) {\n            roman\
    \ += rn.second;\n            number -= rn.first;\n        }\n    }\n    return\
    \ roman;", "    std::string result;\n    std::string roman[] = {\"m\", \"cm\"\
    , \"d\", \"cd\", \"c\", \"xc\", \"l\", \"xl\", \"x\", \"ix\", \"v\", \"iv\", \"\
    i\"};\n    int value[] = {1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1};\n\
    \    for (int i = 0; number != 0; i++) {\n        while (number >= value[i]) {\n\
    \            number -= value[i];\n            result += roman[i];\n        }\n\
    \    }\n    return result;", "    std::string roman;\n    while (number > 0) {\n\
    \        if (number >= 1000) {\n            roman += \"m\";\n            number\
    \ -= 1000;\n        } else if (number >= 900) {\n            roman += \"cm\";\n\
    \            number -= 900;\n        } else if (number >= 500) {\n           \
    \ roman += \"d\";\n            number -= 500;\n        } else if (number >= 400)\
    \ {\n            roman += \"cd\";\n            number -= 400;\n        } else\
    \ if (number >= 100) {\n            roman += \"c\";\n            number -= 100;\n\
    \        } else if (number >= 90) {\n            roman += \"xc\";\n          \
    \  number -= 90;\n        } else if (number >= 50) {\n            roman += \"\
    l\";\n            number -= 50;\n        } else if (number >= 40) {\n        \
    \    roman += \"xl\";\n            number -= 40;\n        } else if (number >=\
    \ 10) {\n            roman += \"x\";\n            number -= 10;\n        } else\
    \ if (number >= 9) {\n            roman += \"ix\";\n            number -= 9;\n\
    \        } else if (number >= 5) {\n            roman += \"v\";\n            number\
    \ -= 5;\n        } else if (number >= 4) {\n            roman += \"iv\";\n   \
    \         number -= 4;\n        } else if (number >= 1) {\n            roman +=\
    \ \"i\";\n            number -= 1;\n        }\n    }\n    return roman;", "  \
    \  std::string result;\n    std::string roman_numerals[13] = {\"m\", \"cm\", \"\
    d\", \"cd\", \"c\", \"xc\", \"l\", \"xl\", \"x\", \"ix\", \"v\", \"iv\", \"i\"\
    };\n    int decimal_numerals[13] = {1000, 900, 500, 400, 100, 90, 50, 40, 10,\
    \ 9, 5, 4, 1};\n    for (int i = 0; i < 13; i++) {\n        while (number >= decimal_numerals[i])\
    \ {\n            number -= decimal_numerals[i];\n            result += roman_numerals[i];\n\
    \        }\n    }\n    return result;", "    std::string roman;\n    int num[]\
    \ = {1, 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900, 1000};\n    std::string sym[]\
    \ = {\"i\", \"iv\", \"v\", \"ix\", \"x\", \"xl\", \"l\", \"xc\", \"c\", \"cd\"\
    , \"d\", \"cm\", \"m\"};\n    int i = 12;\n    while (number > 0) {\n        int\
    \ div = number / num[i];\n        number = number % num[i];\n        while (div--)\
    \ {\n            roman += sym[i];\n        }\n        i--;\n    }\n    return\
    \ roman;", "    std::string roman;\n    while (number >= 1000) {\n        roman\
    \ += \"m\";\n        number -= 1000;\n    }\n    if (number >= 900) {\n      \
    \  roman += \"cm\";\n        number -= 900;\n    }\n    if (number >= 500) {\n\
    \        roman += \"d\";\n        number -= 500;\n    }\n    if (number >= 400)\
    \ {\n        roman += \"cd\";\n        number -= 400;\n    }\n    while (number\
    \ >= 100) {\n        roman += \"c\";\n        number -= 100;\n    }\n    if (number\
    \ >= 90) {\n        roman += \"xc\";\n        number -= 90;\n    }\n    if (number\
    \ >= 50) {\n        roman += \"l\";\n        number -= 50;\n    }\n    if (number\
    \ >= 40) {\n        roman += \"xl\";\n        number -= 40;\n    }\n    while\
    \ (number >= 10) {\n        roman += \"x\";\n        number -= 10;\n    }\n  \
    \  if (number >= 9) {\n        roman += \"ix\";\n        number -= 9;\n    }\n\
    \    if (number >= 5) {\n        roman += \"v\";\n        number -= 5;\n    }\n\
    \    if (number >= 4) {\n        roman += \"iv\";\n        number -= 4;\n    }\n\
    \    while (number >= 1) {\n        roman += \"i\";\n        number -= 1;\n  \
    \  }\n    return roman;", "  std::string roman;\n  while (number >= 1000) {\n\
    \    roman += \"m\";\n    number -= 1000;\n  }\n  if (number >= 900) {\n    roman\
    \ += \"cm\";\n    number -= 900;\n  }\n  if (number >= 500) {\n    roman += \"\
    d\";\n    number -= 500;\n  }\n  if (number >= 400) {\n    roman += \"cd\";\n\
    \    number -= 400;\n  }\n  while (number >= 100) {\n    roman += \"c\";\n   \
    \ number -= 100;\n  }\n  if (number >= 90) {\n    roman += \"xc\";\n    number\
    \ -= 90;\n  }\n  if (number >= 50) {\n    roman += \"l\";\n    number -= 50;\n\
    \  }\n  if (number >= 40) {\n    roman += \"xl\";\n    number -= 40;\n  }\n  while\
    \ (number >= 10) {\n    roman += \"x\";\n    number -= 10;\n  }\n  if (number\
    \ >= 9) {\n    roman += \"ix\";\n    number -= 9;\n  }\n  if (number >= 5) {\n\
    \    roman += \"v\";\n    number -= 5;\n  }\n  if (number >= 4) {\n    roman +=\
    \ \"iv\";\n    number -= 4;\n  }\n  while (number >= 1) {\n    roman += \"i\"\
    ;\n    number -= 1;\n  }\n  return roman;", "    std::string roman;\n    std::vector<std::pair<int,\
    \ std::string>> roman_numerals = {\n        {1000, \"m\"}, {900, \"cm\"}, {500,\
    \ \"d\"}, {400, \"cd\"}, {100, \"c\"},\n        {90, \"xc\"}, {50, \"l\"}, {40,\
    \ \"xl\"}, {10, \"x\"}, {9, \"ix\"}, {5, \"v\"},\n        {4, \"iv\"}, {1, \"\
    i\"}\n    };\n    for (auto rn : roman_numerals) {\n        while (number >= rn.first)\
    \ {\n            roman += rn.second;\n            number -= rn.first;\n      \
    \  }\n    }\n    return roman;", "    std::string roman;\n    std::vector<std::pair<long,\
    \ std::string>> roman_numerals = {\n        {1000, \"m\"}, {900, \"cm\"}, {500,\
    \ \"d\"}, {400, \"cd\"}, {100, \"c\"},\n        {90, \"xc\"}, {50, \"l\"}, {40,\
    \ \"xl\"}, {10, \"x\"}, {9, \"ix\"}, {5, \"v\"},\n        {4, \"iv\"}, {1, \"\
    i\"}};\n    for (auto& roman_numeral : roman_numerals) {\n        while (number\
    \ >= roman_numeral.first) {\n            roman += roman_numeral.second;\n    \
    \        number -= roman_numeral.first;\n        }\n    }\n    return roman;",
  "    std::string roman;\n    while (number >= 1000) {\n        roman += \"m\";\n\
    \        number -= 1000;\n    }\n    if (number >= 900) {\n        roman += \"\
    cm\";\n        number -= 900;\n    }\n    if (number >= 500) {\n        roman\
    \ += \"d\";\n        number -= 500;\n    }\n    if (number >= 400) {\n       \
    \ roman += \"cd\";\n        number -= 400;\n    }\n    while (number >= 100) {\n\
    \        roman += \"c\";\n        number -= 100;\n    }\n    if (number >= 90)\
    \ {\n        roman += \"xc\";\n        number -= 90;\n    }\n    if (number >=\
    \ 50) {\n        roman += \"l\";\n        number -= 50;\n    }\n    if (number\
    \ >= 40) {\n        roman += \"xl\";\n        number -= 40;\n    }\n    while\
    \ (number >= 10) {\n        roman += \"x\";\n        number -= 10;\n    }\n  \
    \  if (number >= 9) {\n        roman += \"ix\";\n        number -= 9;\n    }\n\
    \    if (number >= 5) {\n        roman += \"v\";\n        number -= 5;\n    }\n\
    \    if (number >= 4) {\n        roman += \"iv\";\n        number -= 4;\n    }\n\
    \    while (number >= 1) {\n        roman += \"i\";\n        number -= 1;\n  \
    \  }\n    return roman;", "    std::string roman;\n    while (number > 0) {\n\
    \        if (number >= 1000) {\n            roman += \"m\";\n            number\
    \ -= 1000;\n        } else if (number >= 900) {\n            roman += \"cm\";\n\
    \            number -= 900;\n        } else if (number >= 500) {\n           \
    \ roman += \"d\";\n            number -= 500;\n        } else if (number >= 400)\
    \ {\n            roman += \"cd\";\n            number -= 400;\n        } else\
    \ if (number >= 100) {\n            roman += \"c\";\n            number -= 100;\n\
    \        } else if (number >= 90) {\n            roman += \"xc\";\n          \
    \  number -= 90;\n        } else if (number >= 50) {\n            roman += \"\
    l\";\n            number -= 50;\n        } else if (number >= 40) {\n        \
    \    roman += \"xl\";\n            number -= 40;\n        } else if (number >=\
    \ 10) {\n            roman += \"x\";\n            number -= 10;\n        } else\
    \ if (number >= 9) {\n            roman += \"ix\";\n            number -= 9;\n\
    \        } else if (number >= 5) {\n            roman += \"v\";\n            number\
    \ -= 5;\n        } else if (number >= 4) {\n            roman += \"iv\";\n   \
    \         number -= 4;\n        } else if (number >= 1) {\n            roman +=\
    \ \"i\";\n            number -= 1;\n        }\n    }\n    return roman;", "  \
    \  std::string roman;\n    while (number >= 1000) {\n        roman += \"m\";\n\
    \        number -= 1000;\n    }\n    if (number >= 900) {\n        roman += \"\
    cm\";\n        number -= 900;\n    }\n    if (number >= 500) {\n        roman\
    \ += \"d\";\n        number -= 500;\n    }\n    if (number >= 400) {\n       \
    \ roman += \"cd\";\n        number -= 400;\n    }\n    while (number >= 100) {\n\
    \        roman += \"c\";\n        number -= 100;\n    }\n    if (number >= 90)\
    \ {\n        roman += \"xc\";\n        number -= 90;\n    }\n    if (number >=\
    \ 50) {\n        roman += \"l\";\n        number -= 50;\n    }\n    if (number\
    \ >= 40) {\n        roman += \"xl\";\n        number -= 40;\n    }\n    while\
    \ (number >= 10) {\n        roman += \"x\";\n        number -= 10;\n    }\n  \
    \  if (number >= 9) {\n        roman += \"ix\";\n        number -= 9;\n    }\n\
    \    if (number >= 5) {\n        roman += \"v\";\n        number -= 5;\n    }\n\
    \    if (number >= 4) {\n        roman += \"iv\";\n        number -= 4;\n    }\n\
    \    while (number >= 1) {\n        roman += \"i\";\n        number -= 1;\n  \
    \  }\n    return roman;", "    std::string roman = \"\";\n    std::string roman_numerals[]\
    \ = {\"m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"l\", \"xl\", \"x\", \"ix\"\
    , \"v\", \"iv\", \"i\"};\n    int decimal_numerals[] = {1000, 900, 500, 400, 100,\
    \ 90, 50, 40, 10, 9, 5, 4, 1};\n    for (int i = 0; i < 13; i++) {\n        while\
    \ (number >= decimal_numerals[i]) {\n            number -= decimal_numerals[i];\n\
    \            roman += roman_numerals[i];\n        }\n    }\n    return roman;",
  "    std::string result;\n    std::string roman[] = {\"m\", \"cm\", \"d\", \"cd\"\
    , \"c\", \"xc\", \"l\", \"xl\", \"x\", \"ix\", \"v\", \"iv\", \"i\"};\n    int\
    \ value[] = {1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1};\n    for (int\
    \ i = 0; number != 0; i++) {\n        while (number >= value[i]) {\n         \
    \   number -= value[i];\n            result += roman[i];\n        }\n    }\n \
    \   return result;", "    std::string roman;\n    std::string roman_numerals[]\
    \ = {\"m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"l\", \"xl\", \"x\", \"ix\"\
    , \"v\", \"iv\", \"i\"};\n    int decimal_numerals[] = {1000, 900, 500, 400, 100,\
    \ 90, 50, 40, 10, 9, 5, 4, 1};\n    for (int i = 0; i < 13; i++) {\n        while\
    \ (number >= decimal_numerals[i]) {\n            number -= decimal_numerals[i];\n\
    \            roman += roman_numerals[i];\n        }\n    }\n    return roman;",
  "    std::string result;\n    std::string roman[] = {\"m\", \"cm\", \"d\", \"cd\"\
    , \"c\", \"xc\", \"l\", \"xl\", \"x\", \"ix\", \"v\", \"iv\", \"i\"};\n    int\
    \ arabic[] = {1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1};\n    for\
    \ (int i = 0; i < 13; i++) {\n        while (number >= arabic[i]) {\n        \
    \    number -= arabic[i];\n            result += roman[i];\n        }\n    }\n\
    \    return result;", "    std::string roman;\n    while (number > 0) {\n    \
    \    if (number >= 1000) {\n            roman += \"m\";\n            number -=\
    \ 1000;\n        } else if (number >= 900) {\n            roman += \"cm\";\n \
    \           number -= 900;\n        } else if (number >= 500) {\n            roman\
    \ += \"d\";\n            number -= 500;\n        } else if (number >= 400) {\n\
    \            roman += \"cd\";\n            number -= 400;\n        } else if (number\
    \ >= 100) {\n            roman += \"c\";\n            number -= 100;\n       \
    \ } else if (number >= 90) {\n            roman += \"xc\";\n            number\
    \ -= 90;\n        } else if (number >= 50) {\n            roman += \"l\";\n  \
    \          number -= 50;\n        } else if (number >= 40) {\n            roman\
    \ += \"xl\";\n            number -= 40;\n        } else if (number >= 10) {\n\
    \            roman += \"x\";\n            number -= 10;\n        } else if (number\
    \ >= 9) {\n            roman += \"ix\";\n            number -= 9;\n        } else\
    \ if (number >= 5) {\n            roman += \"v\";\n            number -= 5;\n\
    \        } else if (number >= 4) {\n            roman += \"iv\";\n           \
    \ number -= 4;\n        } else if (number >= 1) {\n            roman += \"i\"\
    ;\n            number -= 1;\n        }\n    }\n    return roman;", "    std::string\
    \ result = \"\";\n    std::vector<std::pair<int, std::string>> roman_numerals\
    \ = {\n        {1000, \"m\"},\n        {900, \"cm\"},\n        {500, \"d\"},\n\
    \        {400, \"cd\"},\n        {100, \"c\"},\n        {90, \"xc\"},\n      \
    \  {50, \"l\"},\n        {40, \"xl\"},\n        {10, \"x\"},\n        {9, \"ix\"\
    },\n        {5, \"v\"},\n        {4, \"iv\"},\n        {1, \"i\"},\n    };\n \
    \   for (auto roman_numeral : roman_numerals) {\n        while (number >= roman_numeral.first)\
    \ {\n            result += roman_numeral.second;\n            number -= roman_numeral.first;\n\
    \        }\n    }\n    return result;", "  std::string roman;\n  std::string ones[]\
    \ = {\"\", \"i\", \"ii\", \"iii\", \"iv\", \"v\", \"vi\", \"vii\", \"viii\", \"\
    ix\"};\n  std::string tens[] = {\"\", \"x\", \"xx\", \"xxx\", \"xl\", \"l\", \"\
    lx\", \"lxx\", \"lxxx\", \"xc\"};\n  std::string hundreds[] = {\"\", \"c\", \"\
    cc\", \"ccc\", \"cd\", \"d\", \"dc\", \"dcc\", \"dccc\", \"cm\"};\n  std::string\
    \ thousands[] = {\"\", \"m\", \"mm\", \"mmm\"};\n  roman += thousands[number /\
    \ 1000];\n  roman += hundreds[(number % 1000) / 100];\n  roman += tens[(number\
    \ % 100) / 10];\n  roman += ones[number % 10];\n  return roman;", "    std::string\
    \ roman;\n    while (number >= 1000) {\n        roman += \"m\";\n        number\
    \ -= 1000;\n    }\n    if (number >= 900) {\n        roman += \"cm\";\n      \
    \  number -= 900;\n    }\n    if (number >= 500) {\n        roman += \"d\";\n\
    \        number -= 500;\n    }\n    if (number >= 400) {\n        roman += \"\
    cd\";\n        number -= 400;\n    }\n    while (number >= 100) {\n        roman\
    \ += \"c\";\n        number -= 100;\n    }\n    if (number >= 90) {\n        roman\
    \ += \"xc\";\n        number -= 90;\n    }\n    if (number >= 50) {\n        roman\
    \ += \"l\";\n        number -= 50;\n    }\n    if (number >= 40) {\n        roman\
    \ += \"xl\";\n        number -= 40;\n    }\n    while (number >= 10) {\n     \
    \   roman += \"x\";\n        number -= 10;\n    }\n    if (number >= 9) {\n  \
    \      roman += \"ix\";\n        number -= 9;\n    }\n    if (number >= 5) {\n\
    \        roman += \"v\";\n        number -= 5;\n    }\n    if (number >= 4) {\n\
    \        roman += \"iv\";\n        number -= 4;\n    }\n    while (number >= 1)\
    \ {\n        roman += \"i\";\n        number -= 1;\n    }\n    return roman;",
  "  std::string roman;\n  std::vector<std::pair<long, std::string>> roman_numerals\
    \ = {\n      {1000, \"m\"}, {900, \"cm\"}, {500, \"d\"}, {400, \"cd\"}, {100,\
    \ \"c\"},\n      {90, \"xc\"},  {50, \"l\"},   {40, \"xl\"}, {10, \"x\"},   {9,\
    \ \"ix\"},\n      {5, \"v\"},    {4, \"iv\"},   {1, \"i\"}};\n  for (auto const\
    \ &numeral : roman_numerals) {\n    while (number >= numeral.first) {\n      roman\
    \ += numeral.second;\n      number -= numeral.first;\n    }\n  }\n  return roman;",
  "    std::string result;\n    std::string roman_numerals[13] = {\"m\", \"cm\", \"\
    d\", \"cd\", \"c\", \"xc\", \"l\", \"xl\", \"x\", \"ix\", \"v\", \"iv\", \"i\"\
    };\n    int decimal_numerals[13] = {1000, 900, 500, 400, 100, 90, 50, 40, 10,\
    \ 9, 5, 4, 1};\n    for (int i = 0; i < 13; i++) {\n        while (number >= decimal_numerals[i])\
    \ {\n            number -= decimal_numerals[i];\n            result += roman_numerals[i];\n\
    \        }\n    }\n    return result;", "    std::string result;\n    std::string\
    \ roman[] = {\"m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"l\", \"xl\", \"x\"\
    , \"ix\", \"v\", \"iv\", \"i\"};\n    int value[] = {1000, 900, 500, 400, 100,\
    \ 90, 50, 40, 10, 9, 5, 4, 1};\n    for (int i = 0; number != 0; i++) {\n    \
    \    while (number >= value[i]) {\n            number -= value[i];\n         \
    \   result += roman[i];\n        }\n    }\n    return result;", "    std::string\
    \ result = \"\";\n    std::vector<std::pair<int, std::string>> roman_numerals\
    \ = {\n        {1000, \"m\"},\n        {900, \"cm\"},\n        {500, \"d\"},\n\
    \        {400, \"cd\"},\n        {100, \"c\"},\n        {90, \"xc\"},\n      \
    \  {50, \"l\"},\n        {40, \"xl\"},\n        {10, \"x\"},\n        {9, \"ix\"\
    },\n        {5, \"v\"},\n        {4, \"iv\"},\n        {1, \"i\"}\n    };\n  \
    \  for (auto& pair : roman_numerals) {\n        while (number >= pair.first) {\n\
    \            result += pair.second;\n            number -= pair.first;\n     \
    \   }\n    }\n    return result;", "    std::string result = \"\";\n    std::vector<std::pair<long,\
    \ std::string>> roman_numerals = {\n        {1000, \"m\"},\n        {900, \"cm\"\
    },\n        {500, \"d\"},\n        {400, \"cd\"},\n        {100, \"c\"},\n   \
    \     {90, \"xc\"},\n        {50, \"l\"},\n        {40, \"xl\"},\n        {10,\
    \ \"x\"},\n        {9, \"ix\"},\n        {5, \"v\"},\n        {4, \"iv\"},\n \
    \       {1, \"i\"}\n    };\n    for (auto const& roman_numeral : roman_numerals)\
    \ {\n        while (number >= roman_numeral.first) {\n            result += roman_numeral.second;\n\
    \            number -= roman_numeral.first;\n        }\n    }\n    return result;",
  "    std::string result;\n    std::vector<std::pair<int, std::string>> roman_numerals\
    \ = {\n        {1000, \"m\"},\n        {900, \"cm\"},\n        {500, \"d\"},\n\
    \        {400, \"cd\"},\n        {100, \"c\"},\n        {90, \"xc\"},\n      \
    \  {50, \"l\"},\n        {40, \"xl\"},\n        {10, \"x\"},\n        {9, \"ix\"\
    },\n        {5, \"v\"},\n        {4, \"iv\"},\n        {1, \"i\"}\n    };\n  \
    \  for (auto roman_numeral : roman_numerals) {\n        while (number >= roman_numeral.first)\
    \ {\n            result += roman_numeral.second;\n            number -= roman_numeral.first;\n\
    \        }\n    }\n    return result;", "    std::string roman;\n    int num[]\
    \ = {1,4,5,9,10,40,50,90,100,400,500,900,1000};\n    std::string sym[] = {\"I\"\
    ,\"IV\",\"V\",\"IX\",\"X\",\"XL\",\"L\",\"XC\",\"C\",\"CD\",\"D\",\"CM\",\"M\"\
    };\n    int i=12;\n    while(number>0)\n    {\n        int div = number/num[i];\n\
    \        number = number%num[i];\n        while(div--)\n        {\n          \
    \  roman += sym[i];\n        }\n        i--;\n    }\n    return roman;", "   \
    \ std::string result;\n    std::string roman[] = {\"m\", \"cm\", \"d\", \"cd\"\
    , \"c\", \"xc\", \"l\", \"xl\", \"x\", \"ix\", \"v\", \"iv\", \"i\"};\n    int\
    \ value[] = {1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1};\n    for (int\
    \ i = 0; number != 0; i++) {\n        while (number >= value[i]) {\n         \
    \   number -= value[i];\n            result += roman[i];\n        }\n    }\n \
    \   return result;", "    std::string roman = \"\";\n    std::vector<std::pair<int,\
    \ std::string>> roman_numerals = {\n        {1000, \"m\"}, {900, \"cm\"}, {500,\
    \ \"d\"}, {400, \"cd\"}, {100, \"c\"},\n        {90, \"xc\"}, {50, \"l\"}, {40,\
    \ \"xl\"}, {10, \"x\"}, {9, \"ix\"}, {5, \"v\"},\n        {4, \"iv\"}, {1, \"\
    i\"}\n    };\n    for (auto const& roman_numeral : roman_numerals) {\n       \
    \ while (number >= roman_numeral.first) {\n            roman += roman_numeral.second;\n\
    \            number -= roman_numeral.first;\n        }\n    }\n    return roman;",
  "    std::string result;\n    std::vector<std::pair<long, std::string>> roman_numerals\
    \ = {\n        {1000, \"m\"},\n        {900, \"cm\"},\n        {500, \"d\"},\n\
    \        {400, \"cd\"},\n        {100, \"c\"},\n        {90, \"xc\"},\n      \
    \  {50, \"l\"},\n        {40, \"xl\"},\n        {10, \"x\"},\n        {9, \"ix\"\
    },\n        {5, \"v\"},\n        {4, \"iv\"},\n        {1, \"i\"}\n    };\n  \
    \  for (auto roman_numeral : roman_numerals) {\n        while (number >= roman_numeral.first)\
    \ {\n            result += roman_numeral.second;\n            number -= roman_numeral.first;\n\
    \        }\n    }\n    return result;", "    std::string result = \"\";\n    std::string\
    \ roman_numerals[] = {\"m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"l\", \"xl\"\
    , \"x\", \"ix\", \"v\", \"iv\", \"i\"};\n    int values[] = {1000, 900, 500, 400,\
    \ 100, 90, 50, 40, 10, 9, 5, 4, 1};\n    for (int i = 0; i < 13; i++) {\n    \
    \    while (number >= values[i]) {\n            number -= values[i];\n       \
    \     result += roman_numerals[i];\n        }\n    }\n    return result;", " \
    \   std::string result;\n    std::map<int, std::string> roman_numerals = {\n \
    \       {1, \"i\"}, {4, \"iv\"}, {5, \"v\"}, {9, \"ix\"},\n        {10, \"x\"\
    }, {40, \"xl\"}, {50, \"l\"}, {90, \"xc\"},\n        {100, \"c\"}, {400, \"cd\"\
    }, {500, \"d\"}, {900, \"cm\"},\n        {1000, \"m\"}\n    };\n    while (number\
    \ > 0) {\n        auto it = roman_numerals.upper_bound(number);\n        it--;\n\
    \        result += it->second;\n        number -= it->first;\n    }\n    return\
    \ result;", "    std::string result;\n    std::string roman[] = {\"m\", \"cm\"\
    , \"d\", \"cd\", \"c\", \"xc\", \"l\", \"xl\", \"x\", \"ix\", \"v\", \"iv\", \"\
    i\"};\n    int value[] = {1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1};\n\
    \    for (int i = 0; number != 0; i++) {\n        while (number >= value[i]) {\n\
    \            number -= value[i];\n            result += roman[i];\n        }\n\
    \    }\n    return result;", "    std::string result;\n    std::string roman[]\
    \ = {\"m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"l\", \"xl\", \"x\", \"ix\"\
    , \"v\", \"iv\", \"i\"};\n    int value[] = {1000, 900, 500, 400, 100, 90, 50,\
    \ 40, 10, 9, 5, 4, 1};\n    for (int i = 0; number != 0; i++) {\n        while\
    \ (number >= value[i]) {\n            number -= value[i];\n            result\
    \ += roman[i];\n        }\n    }\n    return result;", "  std::string roman;\n\
    \  while (number >= 1000) {\n    roman += \"m\";\n    number -= 1000;\n  }\n \
    \ if (number >= 900) {\n    roman += \"cm\";\n    number -= 900;\n  }\n  if (number\
    \ >= 500) {\n    roman += \"d\";\n    number -= 500;\n  }\n  if (number >= 400)\
    \ {\n    roman += \"cd\";\n    number -= 400;\n  }\n  while (number >= 100) {\n\
    \    roman += \"c\";\n    number -= 100;\n  }\n  if (number >= 90) {\n    roman\
    \ += \"xc\";\n    number -= 90;\n  }\n  if (number >= 50) {\n    roman += \"l\"\
    ;\n    number -= 50;\n  }\n  if (number >= 40) {\n    roman += \"xl\";\n    number\
    \ -= 40;\n  }\n  while (number >= 10) {\n    roman += \"x\";\n    number -= 10;\n\
    \  }\n  if (number >= 9) {\n    roman += \"ix\";\n    number -= 9;\n  }\n  if\
    \ (number >= 5) {\n    roman += \"v\";\n    number -= 5;\n  }\n  if (number >=\
    \ 4) {\n    roman += \"iv\";\n    number -= 4;\n  }\n  while (number >= 1) {\n\
    \    roman += \"i\";\n    number -= 1;\n  }\n  return roman;", "    std::string\
    \ result;\n    std::string roman[] = {\"m\", \"cm\", \"d\", \"cd\", \"c\", \"\
    xc\", \"l\", \"xl\", \"x\", \"ix\", \"v\", \"iv\", \"i\"};\n    int value[] =\
    \ {1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1};\n    for (int i = 0;\
    \ number != 0; i++) {\n        while (number >= value[i]) {\n            number\
    \ -= value[i];\n            result += roman[i];\n        }\n    }\n    return\
    \ result;", "    std::string roman_numeral;\n    std::string roman_symbols[] =\
    \ {\"m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"l\", \"xl\", \"x\", \"ix\",\
    \ \"v\", \"iv\", \"i\"};\n    int decimal_values[] = {1000, 900, 500, 400, 100,\
    \ 90, 50, 40, 10, 9, 5, 4, 1};\n    for (int i = 0; i < 13; i++) {\n        while\
    \ (number >= decimal_values[i]) {\n            number -= decimal_values[i];\n\
    \            roman_numeral += roman_symbols[i];\n        }\n    }\n    return\
    \ roman_numeral;", "  std::string roman;\n  std::vector<std::pair<long, std::string>>\
    \ roman_numerals = {\n    {1000, \"m\"}, {900, \"cm\"}, {500, \"d\"}, {400, \"\
    cd\"}, {100, \"c\"},\n    {90, \"xc\"}, {50, \"l\"}, {40, \"xl\"}, {10, \"x\"\
    }, {9, \"ix\"}, {5, \"v\"},\n    {4, \"iv\"}, {1, \"i\"}\n  };\n  for (auto& rn\
    \ : roman_numerals) {\n    while (number >= rn.first) {\n      roman += rn.second;\n\
    \      number -= rn.first;\n    }\n  }\n  return roman;", "    std::string roman;\n\
    \    if (number >= 1000) {\n        roman += \"m\";\n        number -= 1000;\n\
    \    }\n    if (number >= 900) {\n        roman += \"cm\";\n        number -=\
    \ 900;\n    }\n    if (number >= 500) {\n        roman += \"d\";\n        number\
    \ -= 500;\n    }\n    if (number >= 400) {\n        roman += \"cd\";\n       \
    \ number -= 400;\n    }\n    if (number >= 100) {\n        roman += \"c\";\n \
    \       number -= 100;\n    }\n    if (number >= 90) {\n        roman += \"xc\"\
    ;\n        number -= 90;\n    }\n    if (number >= 50) {\n        roman += \"\
    l\";\n        number -= 50;\n    }\n    if (number >= 40) {\n        roman +=\
    \ \"xl\";\n        number -= 40;\n    }\n    if (number >= 10) {\n        roman\
    \ += \"x\";\n        number -= 10;\n    }\n    if (number >= 9) {\n        roman\
    \ += \"ix\";\n        number -= 9;\n    }\n    if (number >= 5) {\n        roman\
    \ += \"v\";\n        number -= 5;\n    }\n    if (number >= 4) {\n        roman\
    \ += \"iv\";\n        number -= 4;\n    }\n    if (number >= 1) {\n        roman\
    \ += \"i\";\n        number -= 1;\n    }\n    return roman;", "    std::string\
    \ result;\n    std::string symbols[] = {\"i\", \"v\", \"x\", \"l\", \"c\", \"\
    d\", \"m\"};\n    int values[] = {1, 5, 10, 50, 100, 500, 1000};\n    int i =\
    \ 6;\n    while (number > 0) {\n        int div = number / values[i];\n      \
    \  number %= values[i];\n        if (div < 4) {\n            result.append(div,\
    \ symbols[i][0]);\n        } else if (div == 4) {\n            result.append(1,\
    \ symbols[i][0]);\n            result.append(1, symbols[i + 1][0]);\n        }\
    \ else if (div > 4 && div < 9) {\n            result.append(1, symbols[i + 1][0]);\n\
    \            result.append(div - 5, symbols[i][0]);\n        } else if (div ==\
    \ 9) {\n            result.append(1, symbols[i][0]);\n            result.append(1,\
    \ symbols[i + 2][0]);\n        }\n        i -= 2;\n    }\n    return result;",
  "    std::string roman;\n    std::map<int, std::string> roman_numerals = {\n   \
    \     {1, \"i\"},\n        {4, \"iv\"},\n        {5, \"v\"},\n        {9, \"ix\"\
    },\n        {10, \"x\"},\n        {40, \"xl\"},\n        {50, \"l\"},\n      \
    \  {90, \"xc\"},\n        {100, \"c\"},\n        {400, \"cd\"},\n        {500,\
    \ \"d\"},\n        {900, \"cm\"},\n        {1000, \"m\"}\n    };\n    std::map<int,\
    \ std::string>::reverse_iterator it;\n    for (it = roman_numerals.rbegin(); it\
    \ != roman_numerals.rend(); ++it) {\n        while (number >= it->first) {\n \
    \           roman += it->second;\n            number -= it->first;\n        }\n\
    \    }\n    return roman;", "    std::string roman;\n    std::string roman_numerals[]\
    \ = {\"m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"l\", \"xl\", \"x\", \"ix\"\
    , \"v\", \"iv\", \"i\"};\n    int decimal_numerals[] = {1000, 900, 500, 400, 100,\
    \ 90, 50, 40, 10, 9, 5, 4, 1};\n    for (int i = 0; i < 13; i++) {\n        while\
    \ (number >= decimal_numerals[i]) {\n            number -= decimal_numerals[i];\n\
    \            roman += roman_numerals[i];\n        }\n    }\n    return roman;",
  "    std::string result = \"\";\n    std::vector<std::pair<long, std::string>> roman_numerals\
    \ = {\n        {1000, \"m\"},\n        {900, \"cm\"},\n        {500, \"d\"},\n\
    \        {400, \"cd\"},\n        {100, \"c\"},\n        {90, \"xc\"},\n      \
    \  {50, \"l\"},\n        {40, \"xl\"},\n        {10, \"x\"},\n        {9, \"ix\"\
    },\n        {5, \"v\"},\n        {4, \"iv\"},\n        {1, \"i\"}\n    };\n  \
    \  for (auto &pair : roman_numerals) {\n        while (number >= pair.first) {\n\
    \            result += pair.second;\n            number -= pair.first;\n     \
    \   }\n    }\n    return result;", "    std::string roman;\n    std::vector<std::pair<int,\
    \ std::string>> roman_numerals = {\n        {1000, \"m\"}, {900, \"cm\"}, {500,\
    \ \"d\"}, {400, \"cd\"}, {100, \"c\"},\n        {90, \"xc\"}, {50, \"l\"}, {40,\
    \ \"xl\"}, {10, \"x\"}, {9, \"ix\"}, {5, \"v\"},\n        {4, \"iv\"}, {1, \"\
    i\"}};\n    for (auto& rn : roman_numerals) {\n        while (number >= rn.first)\
    \ {\n            roman += rn.second;\n            number -= rn.first;\n      \
    \  }\n    }\n    return roman;", "    std::string result;\n    std::vector<std::pair<int,\
    \ std::string>> roman_numerals = {\n        {1000, \"m\"},\n        {900, \"cm\"\
    },\n        {500, \"d\"},\n        {400, \"cd\"},\n        {100, \"c\"},\n   \
    \     {90, \"xc\"},\n        {50, \"l\"},\n        {40, \"xl\"},\n        {10,\
    \ \"x\"},\n        {9, \"ix\"},\n        {5, \"v\"},\n        {4, \"iv\"},\n \
    \       {1, \"i\"}\n    };\n    for (auto roman_numeral : roman_numerals) {\n\
    \        while (number >= roman_numeral.first) {\n            result += roman_numeral.second;\n\
    \            number -= roman_numeral.first;\n        }\n    }\n    return result;",
  "    std::string roman;\n    std::string roman_numerals[] = {\"m\", \"cm\", \"d\"\
    , \"cd\", \"c\", \"xc\", \"l\", \"xl\", \"x\", \"ix\", \"v\", \"iv\", \"i\"};\n\
    \    int decimal_numerals[] = {1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5,\
    \ 4, 1};\n    for (int i = 0; i < 13; i++) {\n        while (number >= decimal_numerals[i])\
    \ {\n            number -= decimal_numerals[i];\n            roman += roman_numerals[i];\n\
    \        }\n    }\n    return roman;", "    std::string roman;\n    std::vector<std::pair<int,\
    \ std::string>> roman_numerals = {\n        {1000, \"m\"}, {900, \"cm\"}, {500,\
    \ \"d\"}, {400, \"cd\"}, {100, \"c\"},\n        {90, \"xc\"}, {50, \"l\"}, {40,\
    \ \"xl\"}, {10, \"x\"}, {9, \"ix\"}, {5, \"v\"},\n        {4, \"iv\"}, {1, \"\
    i\"}\n    };\n    for (auto &numeral : roman_numerals) {\n        while (number\
    \ >= numeral.first) {\n            roman += numeral.second;\n            number\
    \ -= numeral.first;\n        }\n    }\n    return roman;", "    std::string roman\
    \ = \"\";\n    int num[] = {1, 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900, 1000};\n\
    \    std::string sym[] = {\"i\", \"iv\", \"v\", \"ix\", \"x\", \"xl\", \"l\",\
    \ \"xc\", \"c\", \"cd\", \"d\", \"cm\", \"m\"};\n    int i = 12;\n    while (number\
    \ > 0) {\n        int div = number / num[i];\n        number = number % num[i];\n\
    \        while (div--) {\n            roman += sym[i];\n        }\n        i--;\n\
    \    }\n    return roman;", "    std::string roman;\n    std::string roman_numerals[]\
    \ = {\"m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"l\", \"xl\", \"x\", \"ix\"\
    , \"v\", \"iv\", \"i\"};\n    int decimal_numerals[] = {1000, 900, 500, 400, 100,\
    \ 90, 50, 40, 10, 9, 5, 4, 1};\n    for (int i = 0; i < 13; i++) {\n        while\
    \ (number >= decimal_numerals[i]) {\n            number -= decimal_numerals[i];\n\
    \            roman += roman_numerals[i];\n        }\n    }\n    return roman;",
  "    std::string roman;\n    std::vector<std::pair<long, std::string>> roman_numerals\
    \ = {\n        {1000, \"m\"}, {900, \"cm\"}, {500, \"d\"}, {400, \"cd\"}, {100,\
    \ \"c\"},\n        {90, \"xc\"}, {50, \"l\"}, {40, \"xl\"}, {10, \"x\"}, {9, \"\
    ix\"}, {5, \"v\"},\n        {4, \"iv\"}, {1, \"i\"}};\n    for (auto rn : roman_numerals)\
    \ {\n        while (number >= rn.first) {\n            roman += rn.second;\n \
    \           number -= rn.first;\n        }\n    }\n    return roman;", "    std::string\
    \ roman;\n    std::vector<std::pair<int, std::string>> v = {\n        {1000, \"\
    m\"},\n        {900, \"cm\"},\n        {500, \"d\"},\n        {400, \"cd\"},\n\
    \        {100, \"c\"},\n        {90, \"xc\"},\n        {50, \"l\"},\n        {40,\
    \ \"xl\"},\n        {10, \"x\"},\n        {9, \"ix\"},\n        {5, \"v\"},\n\
    \        {4, \"iv\"},\n        {1, \"i\"}\n    };\n    for (auto p : v) {\n  \
    \      while (number >= p.first) {\n            roman += p.second;\n         \
    \   number -= p.first;\n        }\n    }\n    return roman;", "    std::string\
    \ result;\n    std::string roman[] = {\"m\", \"cm\", \"d\", \"cd\", \"c\", \"\
    xc\", \"l\", \"xl\", \"x\", \"ix\", \"v\", \"iv\", \"i\"};\n    int value[] =\
    \ {1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1};\n    for (int i = 0;\
    \ number != 0; i++) {\n        while (number >= value[i]) {\n            number\
    \ -= value[i];\n            result += roman[i];\n        }\n    }\n    return\
    \ result;", "    std::string result;\n    std::vector<std::pair<long, std::string>>\
    \ numerals = {\n        {1000, \"m\"},\n        {900, \"cm\"},\n        {500,\
    \ \"d\"},\n        {400, \"cd\"},\n        {100, \"c\"},\n        {90, \"xc\"\
    },\n        {50, \"l\"},\n        {40, \"xl\"},\n        {10, \"x\"},\n      \
    \  {9, \"ix\"},\n        {5, \"v\"},\n        {4, \"iv\"},\n        {1, \"i\"\
    }\n    };\n    for (auto numeral : numerals) {\n        while (number >= numeral.first)\
    \ {\n            result += numeral.second;\n            number -= numeral.first;\n\
    \        }\n    }\n    return result;", "    std::string roman;\n    while (number\
    \ >= 1000) {\n        roman += \"m\";\n        number -= 1000;\n    }\n    if\
    \ (number >= 900) {\n        roman += \"cm\";\n        number -= 900;\n    }\n\
    \    if (number >= 500) {\n        roman += \"d\";\n        number -= 500;\n \
    \   }\n    if (number >= 400) {\n        roman += \"cd\";\n        number -= 400;\n\
    \    }\n    while (number >= 100) {\n        roman += \"c\";\n        number -=\
    \ 100;\n    }\n    if (number >= 90) {\n        roman += \"xc\";\n        number\
    \ -= 90;\n    }\n    if (number >= 50) {\n        roman += \"l\";\n        number\
    \ -= 50;\n    }\n    if (number >= 40) {\n        roman += \"xl\";\n        number\
    \ -= 40;\n    }\n    while (number >= 10) {\n        roman += \"x\";\n       \
    \ number -= 10;\n    }\n    if (number >= 9) {\n        roman += \"ix\";\n   \
    \     number -= 9;\n    }\n    if (number >= 5) {\n        roman += \"v\";\n \
    \       number -= 5;\n    }\n    if (number >= 4) {\n        roman += \"iv\";\n\
    \        number -= 4;\n    }\n    while (number >= 1) {\n        roman += \"i\"\
    ;\n        number -= 1;\n    }\n    return roman;", "    std::string roman;\n\
    \    std::vector<std::pair<int, std::string>> roman_numerals = {\n        {1000,\
    \ \"m\"}, {900, \"cm\"}, {500, \"d\"}, {400, \"cd\"}, {100, \"c\"},\n        {90,\
    \ \"xc\"}, {50, \"l\"}, {40, \"xl\"}, {10, \"x\"}, {9, \"ix\"}, {5, \"v\"},\n\
    \        {4, \"iv\"}, {1, \"i\"}\n    };\n    for (auto& rn : roman_numerals)\
    \ {\n        while (number >= rn.first) {\n            roman += rn.second;\n \
    \           number -= rn.first;\n        }\n    }\n    return roman;", "    std::string\
    \ result;\n    std::vector<std::pair<int, std::string>> roman_numerals = {\n \
    \       {1000, \"m\"},\n        {900, \"cm\"},\n        {500, \"d\"},\n      \
    \  {400, \"cd\"},\n        {100, \"c\"},\n        {90, \"xc\"},\n        {50,\
    \ \"l\"},\n        {40, \"xl\"},\n        {10, \"x\"},\n        {9, \"ix\"},\n\
    \        {5, \"v\"},\n        {4, \"iv\"},\n        {1, \"i\"}\n    };\n    for\
    \ (auto roman_numeral : roman_numerals) {\n        while (number >= roman_numeral.first)\
    \ {\n            result += roman_numeral.second;\n            number -= roman_numeral.first;\n\
    \        }\n    }\n    return result;", "    std::string roman;\n    std::vector<std::pair<int,\
    \ std::string>> roman_numerals = {\n        {1000, \"m\"}, {900, \"cm\"}, {500,\
    \ \"d\"}, {400, \"cd\"}, {100, \"c\"},\n        {90, \"xc\"}, {50, \"l\"}, {40,\
    \ \"xl\"}, {10, \"x\"}, {9, \"ix\"}, {5, \"v\"},\n        {4, \"iv\"}, {1, \"\
    i\"}\n    };\n    for (auto roman_numeral : roman_numerals) {\n        while (number\
    \ >= roman_numeral.first) {\n            roman += roman_numeral.second;\n    \
    \        number -= roman_numeral.first;\n        }\n    }\n    return roman;",
  "    std::string roman;\n    std::string roman_numerals[] = {\"m\", \"cm\", \"d\"\
    , \"cd\", \"c\", \"xc\", \"l\", \"xl\", \"x\", \"ix\", \"v\", \"iv\", \"i\"};\n\
    \    int decimal_numerals[] = {1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5,\
    \ 4, 1};\n    for (int i = 0; i < 13; i++) {\n        while (number >= decimal_numerals[i])\
    \ {\n            number -= decimal_numerals[i];\n            roman += roman_numerals[i];\n\
    \        }\n    }\n    return roman;", "    std::string result;\n    std::string\
    \ roman[] = {\"m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"l\", \"xl\", \"x\"\
    , \"ix\", \"v\", \"iv\", \"i\"};\n    int decimal[] = {1000, 900, 500, 400, 100,\
    \ 90, 50, 40, 10, 9, 5, 4, 1};\n    for (int i = 0; number != 0; ++i) {\n    \
    \    while (number >= decimal[i]) {\n            number -= decimal[i];\n     \
    \       result += roman[i];\n        }\n    }\n    return result;", "    std::string\
    \ roman;\n    while (number >= 1000) {\n        roman += \"m\";\n        number\
    \ -= 1000;\n    }\n    if (number >= 900) {\n        roman += \"cm\";\n      \
    \  number -= 900;\n    }\n    if (number >= 500) {\n        roman += \"d\";\n\
    \        number -= 500;\n    }\n    if (number >= 400) {\n        roman += \"\
    cd\";\n        number -= 400;\n    }\n    while (number >= 100) {\n        roman\
    \ += \"c\";\n        number -= 100;\n    }\n    if (number >= 90) {\n        roman\
    \ += \"xc\";\n        number -= 90;\n    }\n    if (number >= 50) {\n        roman\
    \ += \"l\";\n        number -= 50;\n    }\n    if (number >= 40) {\n        roman\
    \ += \"xl\";\n        number -= 40;\n    }\n    while (number >= 10) {\n     \
    \   roman += \"x\";\n        number -= 10;\n    }\n    if (number >= 9) {\n  \
    \      roman += \"ix\";\n        number -= 9;\n    }\n    if (number >= 5) {\n\
    \        roman += \"v\";\n        number -= 5;\n    }\n    if (number >= 4) {\n\
    \        roman += \"iv\";\n        number -= 4;\n    }\n    while (number >= 1)\
    \ {\n        roman += \"i\";\n        number -= 1;\n    }\n    return roman;",
  "    std::string roman;\n    std::string roman_numerals[] = {\"m\", \"cm\", \"d\"\
    , \"cd\", \"c\", \"xc\", \"l\", \"xl\", \"x\", \"ix\", \"v\", \"iv\", \"i\"};\n\
    \    int decimal_numerals[] = {1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5,\
    \ 4, 1};\n    for (int i = 0; i < 13; i++) {\n        while (number >= decimal_numerals[i])\
    \ {\n            number -= decimal_numerals[i];\n            roman += roman_numerals[i];\n\
    \        }\n    }\n    return roman;", "    std::string result;\n    std::vector<std::pair<int,\
    \ std::string>> roman_numerals = {\n        {1000, \"m\"},\n        {900, \"cm\"\
    },\n        {500, \"d\"},\n        {400, \"cd\"},\n        {100, \"c\"},\n   \
    \     {90, \"xc\"},\n        {50, \"l\"},\n        {40, \"xl\"},\n        {10,\
    \ \"x\"},\n        {9, \"ix\"},\n        {5, \"v\"},\n        {4, \"iv\"},\n \
    \       {1, \"i\"},\n    };\n    for (auto roman_numeral : roman_numerals) {\n\
    \        while (number >= roman_numeral.first) {\n            result += roman_numeral.second;\n\
    \            number -= roman_numeral.first;\n        }\n    }\n    return result;",
  "    std::string roman;\n    std::string roman_numerals[] = {\"m\", \"cm\", \"d\"\
    , \"cd\", \"c\", \"xc\", \"l\", \"xl\", \"x\", \"ix\", \"v\", \"iv\", \"i\"};\n\
    \    int decimal_numerals[] = {1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5,\
    \ 4, 1};\n    for (int i = 0; i < 13; i++) {\n        while (number >= decimal_numerals[i])\
    \ {\n            number -= decimal_numerals[i];\n            roman += roman_numerals[i];\n\
    \        }\n    }\n    return roman;", "    std::string roman;\n    std::string\
    \ roman_numerals[] = {\"m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"l\", \"xl\"\
    , \"x\", \"ix\", \"v\", \"iv\", \"i\"};\n    int decimal_numerals[] = {1000, 900,\
    \ 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1};\n    for (int i = 0; i < 13; i++)\
    \ {\n        while (number >= decimal_numerals[i]) {\n            number -= decimal_numerals[i];\n\
    \            roman += roman_numerals[i];\n        }\n    }\n    return roman;",
  "    std::string roman;\n    std::string roman_numeral[] = {\"m\", \"cm\", \"d\"\
    , \"cd\", \"c\", \"xc\", \"l\", \"xl\", \"x\", \"ix\", \"v\", \"iv\", \"i\"};\n\
    \    int decimal[] = {1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1};\n\
    \    for (int i = 0; number != 0; i++) {\n        while (number >= decimal[i])\
    \ {\n            number -= decimal[i];\n            roman += roman_numeral[i];\n\
    \        }\n    }\n    return roman;", "    std::string result;\n    std::vector<std::pair<long,\
    \ std::string>> roman_numerals = {\n        {1000, \"m\"},\n        {900, \"cm\"\
    },\n        {500, \"d\"},\n        {400, \"cd\"},\n        {100, \"c\"},\n   \
    \     {90, \"xc\"},\n        {50, \"l\"},\n        {40, \"xl\"},\n        {10,\
    \ \"x\"},\n        {9, \"ix\"},\n        {5, \"v\"},\n        {4, \"iv\"},\n \
    \       {1, \"i\"}\n    };\n    for (auto roman_numeral : roman_numerals) {\n\
    \        while (number >= roman_numeral.first) {\n            result += roman_numeral.second;\n\
    \            number -= roman_numeral.first;\n        }\n    }\n    return result;",
  "    std::string result;\n    std::string roman[] = {\"m\", \"cm\", \"d\", \"cd\"\
    , \"c\", \"xc\", \"l\", \"xl\", \"x\", \"ix\", \"v\", \"iv\", \"i\"};\n    int\
    \ value[] = {1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1};\n    for (int\
    \ i = 0; number != 0; i++) {\n        while (number >= value[i]) {\n         \
    \   number -= value[i];\n            result += roman[i];\n        }\n    }\n \
    \   return result;", "    std::string result;\n    std::map<int, std::string>\
    \ roman_numerals = {\n        {1, \"i\"}, {4, \"iv\"}, {5, \"v\"}, {9, \"ix\"\
    },\n        {10, \"x\"}, {40, \"xl\"}, {50, \"l\"}, {90, \"xc\"},\n        {100,\
    \ \"c\"}, {400, \"cd\"}, {500, \"d\"}, {900, \"cm\"},\n        {1000, \"m\"}\n\
    \    };\n    std::map<int, std::string>::reverse_iterator it;\n    for (it = roman_numerals.rbegin();\
    \ it != roman_numerals.rend(); ++it) {\n        while (number >= it->first) {\n\
    \            result += it->second;\n            number -= it->first;\n       \
    \ }\n    }\n    return result;", "    std::string roman;\n    while (number >=\
    \ 1000) {\n        roman += \"m\";\n        number -= 1000;\n    }\n    if (number\
    \ >= 900) {\n        roman += \"cm\";\n        number -= 900;\n    }\n    if (number\
    \ >= 500) {\n        roman += \"d\";\n        number -= 500;\n    }\n    if (number\
    \ >= 400) {\n        roman += \"cd\";\n        number -= 400;\n    }\n    while\
    \ (number >= 100) {\n        roman += \"c\";\n        number -= 100;\n    }\n\
    \    if (number >= 90) {\n        roman += \"xc\";\n        number -= 90;\n  \
    \  }\n    if (number >= 50) {\n        roman += \"l\";\n        number -= 50;\n\
    \    }\n    if (number >= 40) {\n        roman += \"xl\";\n        number -= 40;\n\
    \    }\n    while (number >= 10) {\n        roman += \"x\";\n        number -=\
    \ 10;\n    }\n    if (number >= 9) {\n        roman += \"ix\";\n        number\
    \ -= 9;\n    }\n    if (number >= 5) {\n        roman += \"v\";\n        number\
    \ -= 5;\n    }\n    if (number >= 4) {\n        roman += \"iv\";\n        number\
    \ -= 4;\n    }\n    while (number >= 1) {\n        roman += \"i\";\n        number\
    \ -= 1;\n    }\n    return roman;", "    std::string roman;\n    std::vector<std::pair<int,\
    \ std::string>> roman_numerals = {\n        {1000, \"m\"}, {900, \"cm\"}, {500,\
    \ \"d\"}, {400, \"cd\"}, {100, \"c\"},\n        {90, \"xc\"}, {50, \"l\"}, {40,\
    \ \"xl\"}, {10, \"x\"}, {9, \"ix\"}, {5, \"v\"},\n        {4, \"iv\"}, {1, \"\
    i\"}\n    };\n    for (auto roman_numeral : roman_numerals) {\n        while (number\
    \ >= roman_numeral.first) {\n            roman += roman_numeral.second;\n    \
    \        number -= roman_numeral.first;\n        }\n    }\n    return roman;",
  "    std::string result;\n    std::vector<std::pair<long, std::string>> roman_numerals\
    \ = {\n        {1000, \"m\"},\n        {900, \"cm\"},\n        {500, \"d\"},\n\
    \        {400, \"cd\"},\n        {100, \"c\"},\n        {90, \"xc\"},\n      \
    \  {50, \"l\"},\n        {40, \"xl\"},\n        {10, \"x\"},\n        {9, \"ix\"\
    },\n        {5, \"v\"},\n        {4, \"iv\"},\n        {1, \"i\"}\n    };\n  \
    \  for (auto const& roman_numeral : roman_numerals) {\n        while (number >=\
    \ roman_numeral.first) {\n            result += roman_numeral.second;\n      \
    \      number -= roman_numeral.first;\n        }\n    }\n    return result;",
  "    std::string roman;\n    std::string roman_numerals[] = {\"m\", \"cm\", \"d\"\
    , \"cd\", \"c\", \"xc\", \"l\", \"xl\", \"x\", \"ix\", \"v\", \"iv\", \"i\"};\n\
    \    int decimal_numerals[] = {1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5,\
    \ 4, 1};\n    for (int i = 0; i < 13; i++) {\n        while (number >= decimal_numerals[i])\
    \ {\n            number -= decimal_numerals[i];\n            roman += roman_numerals[i];\n\
    \        }\n    }\n    return roman;", "    std::string roman;\n    std::string\
    \ roman_numerals[] = {\"m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"l\", \"xl\"\
    , \"x\", \"ix\", \"v\", \"iv\", \"i\"};\n    int decimal_numerals[] = {1000, 900,\
    \ 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1};\n    for (int i = 0; i < 13; i++)\
    \ {\n        while (number >= decimal_numerals[i]) {\n            number -= decimal_numerals[i];\n\
    \            roman += roman_numerals[i];\n        }\n    }\n    return roman;",
  "  std::string result;\n  std::string roman_numerals[] = {\"m\", \"cm\", \"d\",\
    \ \"cd\", \"c\", \"xc\", \"l\", \"xl\", \"x\", \"ix\", \"v\", \"iv\", \"i\"};\n\
    \  int values[] = {1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1};\n  for\
    \ (int i = 0; i < 13; i++) {\n    while (number >= values[i]) {\n      number\
    \ -= values[i];\n      result += roman_numerals[i];\n    }\n  }\n  return result;",
  "    std::string result;\n    std::string roman[] = {\"m\", \"cm\", \"d\", \"cd\"\
    , \"c\", \"xc\", \"l\", \"xl\", \"x\", \"ix\", \"v\", \"iv\", \"i\"};\n    int\
    \ decimal[] = {1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1};\n    for\
    \ (int i = 0; number != 0; ++i) {\n        while (number >= decimal[i]) {\n  \
    \          number -= decimal[i];\n            result += roman[i];\n        }\n\
    \    }\n    return result;", "    std::string roman;\n    std::vector<std::pair<int,\
    \ std::string>> roman_numerals = {\n        {1000, \"m\"}, {900, \"cm\"}, {500,\
    \ \"d\"}, {400, \"cd\"}, {100, \"c\"},\n        {90, \"xc\"}, {50, \"l\"}, {40,\
    \ \"xl\"}, {10, \"x\"}, {9, \"ix\"}, {5, \"v\"},\n        {4, \"iv\"}, {1, \"\
    i\"}\n    };\n    for (auto& rn : roman_numerals) {\n        while (number >=\
    \ rn.first) {\n            roman += rn.second;\n            number -= rn.first;\n\
    \        }\n    }\n    return roman;", "    std::string result = \"\";\n    while\
    \ (number >= 1000) {\n        result += \"m\";\n        number -= 1000;\n    }\n\
    \    if (number >= 900) {\n        result += \"cm\";\n        number -= 900;\n\
    \    }\n    if (number >= 500) {\n        result += \"d\";\n        number -=\
    \ 500;\n    }\n    if (number >= 400) {\n        result += \"cd\";\n        number\
    \ -= 400;\n    }\n    while (number >= 100) {\n        result += \"c\";\n    \
    \    number -= 100;\n    }\n    if (number >= 90) {\n        result += \"xc\"\
    ;\n        number -= 90;\n    }\n    if (number >= 50) {\n        result += \"\
    l\";\n        number -= 50;\n    }\n    if (number >= 40) {\n        result +=\
    \ \"xl\";\n        number -= 40;\n    }\n    while (number >= 10) {\n        result\
    \ += \"x\";\n        number -= 10;\n    }\n    if (number >= 9) {\n        result\
    \ += \"ix\";\n        number -= 9;\n    }\n    if (number >= 5) {\n        result\
    \ += \"v\";\n        number -= 5;\n    }\n    if (number >= 4) {\n        result\
    \ += \"iv\";\n        number -= 4;\n    }\n    while (number >= 1) {\n       \
    \ result += \"i\";\n        number -= 1;\n    }\n    return result;", "    std::string\
    \ roman;\n    std::string roman_numerals[13] = {\"m\", \"cm\", \"d\", \"cd\",\
    \ \"c\", \"xc\", \"l\", \"xl\", \"x\", \"ix\", \"v\", \"iv\", \"i\"};\n    int\
    \ values[13] = {1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1};\n    for\
    \ (int i = 0; i < 13; i++) {\n        while (number >= values[i]) {\n        \
    \    number -= values[i];\n            roman += roman_numerals[i];\n        }\n\
    \    }\n    return roman;", "    std::string roman;\n    std::string roman_numerals[]\
    \ = {\"m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"l\", \"xl\", \"x\", \"ix\"\
    , \"v\", \"iv\", \"i\"};\n    int decimal_numerals[] = {1000, 900, 500, 400, 100,\
    \ 90, 50, 40, 10, 9, 5, 4, 1};\n    for (int i = 0; i < 13; i++) {\n        while\
    \ (number >= decimal_numerals[i]) {\n            number -= decimal_numerals[i];\n\
    \            roman += roman_numerals[i];\n        }\n    }\n    return roman;",
  "    std::string result;\n    std::string roman_numerals[] = {\"m\", \"cm\", \"\
    d\", \"cd\", \"c\", \"xc\", \"l\", \"xl\", \"x\", \"ix\", \"v\", \"iv\", \"i\"\
    };\n    int decimal_numbers[] = {1000, 900, 500, 400, 100, 90, 50, 40, 10, 9,\
    \ 5, 4, 1};\n    for (int i = 0; i < 13; i++) {\n        while (number >= decimal_numbers[i])\
    \ {\n            number -= decimal_numbers[i];\n            result += roman_numerals[i];\n\
    \        }\n    }\n    return result;", "  std::string roman;\n  std::vector<std::pair<long,\
    \ std::string>> roman_numerals = {\n    {1000, \"m\"}, {900, \"cm\"}, {500, \"\
    d\"}, {400, \"cd\"}, {100, \"c\"},\n    {90, \"xc\"}, {50, \"l\"}, {40, \"xl\"\
    }, {10, \"x\"}, {9, \"ix\"}, {5, \"v\"},\n    {4, \"iv\"}, {1, \"i\"}\n  };\n\
    \  for (auto const& roman_numeral : roman_numerals) {\n    while (number >= roman_numeral.first)\
    \ {\n      roman += roman_numeral.second;\n      number -= roman_numeral.first;\n\
    \    }\n  }\n  return roman;", "    std::string result;\n    std::vector<std::pair<long,\
    \ std::string>> roman_numerals = {\n        {1000, \"m\"},\n        {900, \"cm\"\
    },\n        {500, \"d\"},\n        {400, \"cd\"},\n        {100, \"c\"},\n   \
    \     {90, \"xc\"},\n        {50, \"l\"},\n        {40, \"xl\"},\n        {10,\
    \ \"x\"},\n        {9, \"ix\"},\n        {5, \"v\"},\n        {4, \"iv\"},\n \
    \       {1, \"i\"},\n    };\n    for (auto roman_numeral : roman_numerals) {\n\
    \        while (number >= roman_numeral.first) {\n            result += roman_numeral.second;\n\
    \            number -= roman_numeral.first;\n        }\n    }\n    return result;",
  "    std::string result;\n    std::string roman[] = {\"m\", \"cm\", \"d\", \"cd\"\
    , \"c\", \"xc\", \"l\", \"xl\", \"x\", \"ix\", \"v\", \"iv\", \"i\"};\n    int\
    \ value[] = {1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1};\n    for (int\
    \ i = 0; number != 0; i++) {\n        while (number >= value[i]) {\n         \
    \   number -= value[i];\n            result += roman[i];\n        }\n    }\n \
    \   return result;", "  std::string roman;\n  std::vector<std::pair<long, std::string>>\
    \ roman_numerals = {\n      {1000, \"m\"}, {900, \"cm\"}, {500, \"d\"}, {400,\
    \ \"cd\"}, {100, \"c\"},\n      {90, \"xc\"},  {50, \"l\"},   {40, \"xl\"}, {10,\
    \ \"x\"},   {9, \"ix\"},\n      {5, \"v\"},    {4, \"iv\"},   {1, \"i\"}};\n \
    \ for (auto const &pair : roman_numerals) {\n    while (number >= pair.first)\
    \ {\n      roman += pair.second;\n      number -= pair.first;\n    }\n  }\n  return\
    \ roman;", "    std::string roman;\n    std::string roman_numerals[] = {\"m\"\
    , \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"l\", \"xl\", \"x\", \"ix\", \"v\", \"\
    iv\", \"i\"};\n    int decimal_numerals[] = {1000, 900, 500, 400, 100, 90, 50,\
    \ 40, 10, 9, 5, 4, 1};\n    for (int i = 0; i < 13; i++) {\n        while (number\
    \ >= decimal_numerals[i]) {\n            number -= decimal_numerals[i];\n    \
    \        roman += roman_numerals[i];\n        }\n    }\n    return roman;", " \
    \   std::string roman;\n    std::vector<std::pair<int, std::string>> roman_numerals\
    \ = {\n        {1000, \"m\"}, {900, \"cm\"}, {500, \"d\"}, {400, \"cd\"}, {100,\
    \ \"c\"},\n        {90, \"xc\"}, {50, \"l\"}, {40, \"xl\"}, {10, \"x\"}, {9, \"\
    ix\"}, {5, \"v\"},\n        {4, \"iv\"}, {1, \"i\"}\n    };\n    for (auto &p\
    \ : roman_numerals) {\n        while (number >= p.first) {\n            roman\
    \ += p.second;\n            number -= p.first;\n        }\n    }\n    return roman;",
  "    std::string result;\n    std::string roman[] = {\"m\", \"cm\", \"d\", \"cd\"\
    , \"c\", \"xc\", \"l\", \"xl\", \"x\", \"ix\", \"v\", \"iv\", \"i\"};\n    int\
    \ values[] = {1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1};\n    for\
    \ (int i = 0; i < 13; i++) {\n        while (number >= values[i]) {\n        \
    \    number -= values[i];\n            result += roman[i];\n        }\n    }\n\
    \    return result;", "    std::string roman = \"\";\n    std::map<int, std::string>\
    \ m;\n    m[1] = \"i\";\n    m[5] = \"v\";\n    m[10] = \"x\";\n    m[50] = \"\
    l\";\n    m[100] = \"c\";\n    m[500] = \"d\";\n    m[1000] = \"m\";\n    int\
    \ i = 0;\n    while (number > 0) {\n        int digit = number % 10;\n       \
    \ if (digit == 4) {\n            roman = m[pow(10, i)] + m[5 * pow(10, i)] + roman;\n\
    \        } else if (digit == 9) {\n            roman = m[pow(10, i)] + m[10 *\
    \ pow(10, i)] + roman;\n        } else {\n            if (digit >= 5) {\n    \
    \            roman = m[5 * pow(10, i)] + roman;\n                digit -= 5;\n\
    \            }\n            for (int j = 0; j < digit; j++) {\n              \
    \  roman = m[pow(10, i)] + roman;\n            }\n        }\n        number /=\
    \ 10;\n        i++;\n    }\n    return roman;", "    std::string result;\n   \
    \ std::string roman_numerals[] = {\"m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\"\
    , \"l\", \"xl\", \"x\", \"ix\", \"v\", \"iv\", \"i\"};\n    int values[] = {1000,\
    \ 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1};\n    for (int i = 0; i < 13;\
    \ i++) {\n        while (number >= values[i]) {\n            number -= values[i];\n\
    \            result += roman_numerals[i];\n        }\n    }\n    return result;",
  "    std::string result;\n    std::string roman[] = {\"m\", \"cm\", \"d\", \"cd\"\
    , \"c\", \"xc\", \"l\", \"xl\", \"x\", \"ix\", \"v\", \"iv\", \"i\"};\n    int\
    \ value[] = {1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1};\n    for (int\
    \ i = 0; number != 0; i++) {\n        while (number >= value[i]) {\n         \
    \   number -= value[i];\n            result += roman[i];\n        }\n    }\n \
    \   return result;", "    std::string roman = \"\";\n    std::vector<std::pair<int,\
    \ std::string>> roman_numerals = {\n        {1000, \"m\"}, {900, \"cm\"}, {500,\
    \ \"d\"}, {400, \"cd\"}, {100, \"c\"},\n        {90, \"xc\"}, {50, \"l\"}, {40,\
    \ \"xl\"}, {10, \"x\"}, {9, \"ix\"}, {5, \"v\"},\n        {4, \"iv\"}, {1, \"\
    i\"}};\n    for (auto numeral : roman_numerals) {\n        while (number >= numeral.first)\
    \ {\n            roman += numeral.second;\n            number -= numeral.first;\n\
    \        }\n    }\n    return roman;", "    std::string roman;\n    std::vector<std::pair<long,\
    \ std::string>> roman_numerals = {\n        {1000, \"m\"}, {900, \"cm\"}, {500,\
    \ \"d\"}, {400, \"cd\"}, {100, \"c\"},\n        {90, \"xc\"}, {50, \"l\"}, {40,\
    \ \"xl\"}, {10, \"x\"}, {9, \"ix\"}, {5, \"v\"},\n        {4, \"iv\"}, {1, \"\
    i\"}\n    };\n    for (auto& roman_numeral : roman_numerals) {\n        while\
    \ (number >= roman_numeral.first) {\n            roman += roman_numeral.second;\n\
    \            number -= roman_numeral.first;\n        }\n    }\n    return roman;",
  "    std::string result = \"\";\n    std::string roman[] = {\"m\", \"cm\", \"d\"\
    , \"cd\", \"c\", \"xc\", \"l\", \"xl\", \"x\", \"ix\", \"v\", \"iv\", \"i\"};\n\
    \    int value[] = {1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1};\n \
    \   for (int i = 0; number != 0; i++) {\n        while (number >= value[i]) {\n\
    \            number -= value[i];\n            result += roman[i];\n        }\n\
    \    }\n    return result;", "    std::string result;\n    std::string roman[4][10]\
    \ = {\n        {\"\", \"i\", \"ii\", \"iii\", \"iv\", \"v\", \"vi\", \"vii\",\
    \ \"viii\", \"ix\"},\n        {\"\", \"x\", \"xx\", \"xxx\", \"xl\", \"l\", \"\
    lx\", \"lxx\", \"lxxx\", \"xc\"},\n        {\"\", \"c\", \"cc\", \"ccc\", \"cd\"\
    , \"d\", \"dc\", \"dcc\", \"dccc\", \"cm\"},\n        {\"\", \"m\", \"mm\", \"\
    mmm\", \"mv\", \"v\", \"vm\", \"vmm\", \"vmmm\", \"mx\"}\n    };\n    int i =\
    \ 0;\n    while (number > 0) {\n        int digit = number % 10;\n        result\
    \ = roman[i][digit] + result;\n        number /= 10;\n        i++;\n    }\n  \
    \  return result;", "    std::string roman;\n    while (number >= 1000) {\n  \
    \      roman += \"m\";\n        number -= 1000;\n    }\n    if (number >= 900)\
    \ {\n        roman += \"cm\";\n        number -= 900;\n    }\n    if (number >=\
    \ 500) {\n        roman += \"d\";\n        number -= 500;\n    }\n    if (number\
    \ >= 400) {\n        roman += \"cd\";\n        number -= 400;\n    }\n    while\
    \ (number >= 100) {\n        roman += \"c\";\n        number -= 100;\n    }\n\
    \    if (number >= 90) {\n        roman += \"xc\";\n        number -= 90;\n  \
    \  }\n    if (number >= 50) {\n        roman += \"l\";\n        number -= 50;\n\
    \    }\n    if (number >= 40) {\n        roman += \"xl\";\n        number -= 40;\n\
    \    }\n    while (number >= 10) {\n        roman += \"x\";\n        number -=\
    \ 10;\n    }\n    if (number >= 9) {\n        roman += \"ix\";\n        number\
    \ -= 9;\n    }\n    if (number >= 5) {\n        roman += \"v\";\n        number\
    \ -= 5;\n    }\n    if (number >= 4) {\n        roman += \"iv\";\n        number\
    \ -= 4;\n    }\n    while (number >= 1) {\n        roman += \"i\";\n        number\
    \ -= 1;\n    }\n    return roman;", "    std::string result;\n    std::vector<std::pair<int,\
    \ std::string>> roman_numerals = {\n        {1000, \"m\"},\n        {900, \"cm\"\
    },\n        {500, \"d\"},\n        {400, \"cd\"},\n        {100, \"c\"},\n   \
    \     {90, \"xc\"},\n        {50, \"l\"},\n        {40, \"xl\"},\n        {10,\
    \ \"x\"},\n        {9, \"ix\"},\n        {5, \"v\"},\n        {4, \"iv\"},\n \
    \       {1, \"i\"},\n    };\n    for (auto roman_numeral : roman_numerals) {\n\
    \        while (number >= roman_numeral.first) {\n            result += roman_numeral.second;\n\
    \            number -= roman_numeral.first;\n        }\n    }\n    return result;",
  "    std::string roman;\n    std::vector<std::pair<int, std::string>> roman_numerals\
    \ = {\n        {1000, \"m\"}, {900, \"cm\"}, {500, \"d\"}, {400, \"cd\"}, {100,\
    \ \"c\"},\n        {90, \"xc\"}, {50, \"l\"}, {40, \"xl\"}, {10, \"x\"}, {9, \"\
    ix\"}, {5, \"v\"},\n        {4, \"iv\"}, {1, \"i\"}};\n    for (auto roman_numeral\
    \ : roman_numerals) {\n        while (number >= roman_numeral.first) {\n     \
    \       roman += roman_numeral.second;\n            number -= roman_numeral.first;\n\
    \        }\n    }\n    return roman;", "    std::string roman;\n    std::string\
    \ roman_numerals[] = {\"m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"l\", \"xl\"\
    , \"x\", \"ix\", \"v\", \"iv\", \"i\"};\n    int decimal_numerals[] = {1000, 900,\
    \ 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1};\n    for (int i = 0; i < 13; i++)\
    \ {\n        while (number >= decimal_numerals[i]) {\n            number -= decimal_numerals[i];\n\
    \            roman += roman_numerals[i];\n        }\n    }\n    return roman;",
  "  std::string roman;\n  std::vector<std::pair<int, std::string>> roman_numerals\
    \ = {\n      {1000, \"m\"}, {900, \"cm\"}, {500, \"d\"}, {400, \"cd\"}, {100,\
    \ \"c\"},\n      {90, \"xc\"},  {50, \"l\"},   {40, \"xl\"}, {10, \"x\"},   {9,\
    \ \"ix\"},\n      {5, \"v\"},    {4, \"iv\"},   {1, \"i\"}};\n  for (auto it =\
    \ roman_numerals.begin(); it != roman_numerals.end(); ++it) {\n    while (number\
    \ >= it->first) {\n      roman += it->second;\n      number -= it->first;\n  \
    \  }\n  }\n  return roman;", "    std::string result;\n    std::vector<std::pair<int,\
    \ std::string>> roman_numerals = {\n        {1000, \"m\"},\n        {900, \"cm\"\
    },\n        {500, \"d\"},\n        {400, \"cd\"},\n        {100, \"c\"},\n   \
    \     {90, \"xc\"},\n        {50, \"l\"},\n        {40, \"xl\"},\n        {10,\
    \ \"x\"},\n        {9, \"ix\"},\n        {5, \"v\"},\n        {4, \"iv\"},\n \
    \       {1, \"i\"}\n    };\n    for (auto& pair : roman_numerals) {\n        while\
    \ (number >= pair.first) {\n            result += pair.second;\n            number\
    \ -= pair.first;\n        }\n    }\n    return result;", "    std::string result;\n\
    \    std::string roman_numerals[] = {\"i\", \"v\", \"x\", \"l\", \"c\", \"d\"\
    , \"m\"};\n    int i = 0;\n    while (number > 0) {\n        int digit = number\
    \ % 10;\n        if (digit < 4) {\n            result = std::string(digit, roman_numerals[i][0])\
    \ + result;\n        } else if (digit == 4) {\n            result = roman_numerals[i][0]\
    \ + roman_numerals[i + 1] + result;\n        } else if (digit == 5) {\n      \
    \      result = roman_numerals[i + 1] + result;\n        } else if (digit < 9)\
    \ {\n            result = roman_numerals[i + 1] + std::string(digit - 5, roman_numerals[i][0])\
    \ + result;\n        } else {\n            result = roman_numerals[i][0] + roman_numerals[i\
    \ + 2] + result;\n        }\n        number /= 10;\n        i += 2;\n    }\n \
    \   return result;", "  std::string roman = \"\";\n  while (number >= 1000) {\n\
    \    roman += \"m\";\n    number -= 1000;\n  }\n  if (number >= 900) {\n    roman\
    \ += \"cm\";\n    number -= 900;\n  }\n  if (number >= 500) {\n    roman += \"\
    d\";\n    number -= 500;\n  }\n  if (number >= 400) {\n    roman += \"cd\";\n\
    \    number -= 400;\n  }\n  while (number >= 100) {\n    roman += \"c\";\n   \
    \ number -= 100;\n  }\n  if (number >= 90) {\n    roman += \"xc\";\n    number\
    \ -= 90;\n  }\n  if (number >= 50) {\n    roman += \"l\";\n    number -= 50;\n\
    \  }\n  if (number >= 40) {\n    roman += \"xl\";\n    number -= 40;\n  }\n  while\
    \ (number >= 10) {\n    roman += \"x\";\n    number -= 10;\n  }\n  if (number\
    \ >= 9) {\n    roman += \"ix\";\n    number -= 9;\n  }\n  if (number >= 5) {\n\
    \    roman += \"v\";\n    number -= 5;\n  }\n  if (number >= 4) {\n    roman +=\
    \ \"iv\";\n    number -= 4;\n  }\n  while (number >= 1) {\n    roman += \"i\"\
    ;\n    number -= 1;\n  }\n  return roman;", "    std::string result;\n    std::string\
    \ roman[] = {\"m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"l\", \"xl\", \"x\"\
    , \"ix\", \"v\", \"iv\", \"i\"};\n    int value[] = {1000, 900, 500, 400, 100,\
    \ 90, 50, 40, 10, 9, 5, 4, 1};\n    for (int i = 0; number != 0; i++) {\n    \
    \    while (number >= value[i]) {\n            number -= value[i];\n         \
    \   result += roman[i];\n        }\n    }\n    return result;", "    std::string\
    \ roman;\n    std::string roman_numerals[] = {\"m\", \"cm\", \"d\", \"cd\", \"\
    c\", \"xc\", \"l\", \"xl\", \"x\", \"ix\", \"v\", \"iv\", \"i\"};\n    int decimals[]\
    \ = {1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1};\n    for (int i =\
    \ 0; number > 0; i++) {\n        while (number >= decimals[i]) {\n           \
    \ number -= decimals[i];\n            roman += roman_numerals[i];\n        }\n\
    \    }\n    return roman;", "    std::string roman;\n    int num[] = {1,4,5,9,10,40,50,90,100,400,500,900,1000};\n\
    \    std::string sym[] = {\"I\",\"IV\",\"V\",\"IX\",\"X\",\"XL\",\"L\",\"XC\"\
    ,\"C\",\"CD\",\"D\",\"CM\",\"M\"};\n    int i=12;\n    while(number>0)\n    {\n\
    \        int div = number/num[i];\n        number = number%num[i];\n        while(div--)\n\
    \        {\n            roman += sym[i];\n        }\n        i--;\n    }\n   \
    \ return roman;", "    std::string result;\n    std::string roman[] = {\"m\",\
    \ \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"l\", \"xl\", \"x\", \"ix\", \"v\", \"\
    iv\", \"i\"};\n    int value[] = {1000, 900, 500, 400, 100, 90, 50, 40, 10, 9,\
    \ 5, 4, 1};\n    for (int i = 0; number != 0; i++) {\n        while (number >=\
    \ value[i]) {\n            number -= value[i];\n            result += roman[i];\n\
    \        }\n    }\n    return result;", "    std::string result;\n    std::vector<std::pair<long,\
    \ std::string>> roman_numerals = {\n        {1000, \"m\"},\n        {900, \"cm\"\
    },\n        {500, \"d\"},\n        {400, \"cd\"},\n        {100, \"c\"},\n   \
    \     {90, \"xc\"},\n        {50, \"l\"},\n        {40, \"xl\"},\n        {10,\
    \ \"x\"},\n        {9, \"ix\"},\n        {5, \"v\"},\n        {4, \"iv\"},\n \
    \       {1, \"i\"}\n    };\n    for (auto roman_numeral : roman_numerals) {\n\
    \        while (number >= roman_numeral.first) {\n            result += roman_numeral.second;\n\
    \            number -= roman_numeral.first;\n        }\n    }\n    return result;",
  "    std::string roman;\n    std::string roman_numerals[] = {\"m\", \"cm\", \"d\"\
    , \"cd\", \"c\", \"xc\", \"l\", \"xl\", \"x\", \"ix\", \"v\", \"iv\", \"i\"};\n\
    \    int values[] = {1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1};\n\
    \    for (int i = 0; i < 13; i++) {\n        while (number >= values[i]) {\n \
    \           number -= values[i];\n            roman += roman_numerals[i];\n  \
    \      }\n    }\n    return roman;", "    std::string roman;\n    std::string\
    \ roman_numerals[] = {\"m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"l\", \"xl\"\
    , \"x\", \"ix\", \"v\", \"iv\", \"i\"};\n    int arabic_numerals[] = {1000, 900,\
    \ 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1};\n    for (int i = 0; i < 13; i++)\
    \ {\n        while (number >= arabic_numerals[i]) {\n            number -= arabic_numerals[i];\n\
    \            roman += roman_numerals[i];\n        }\n    }\n    return roman;",
  "  std::string result;\n  std::string roman[] = {\"m\", \"cm\", \"d\", \"cd\", \"\
    c\", \"xc\", \"l\", \"xl\", \"x\", \"ix\", \"v\", \"iv\", \"i\"};\n  int value[]\
    \ = {1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1};\n  for (int i = 0;\
    \ number != 0; i++) {\n    while (number >= value[i]) {\n      number -= value[i];\n\
    \      result += roman[i];\n    }\n  }\n  return result;", "    std::string roman;\n\
    \    std::vector<std::pair<int, std::string>> roman_numerals = {\n        {1000,\
    \ \"m\"}, {900, \"cm\"}, {500, \"d\"}, {400, \"cd\"}, {100, \"c\"},\n        {90,\
    \ \"xc\"}, {50, \"l\"}, {40, \"xl\"}, {10, \"x\"}, {9, \"ix\"}, {5, \"v\"},\n\
    \        {4, \"iv\"}, {1, \"i\"}\n    };\n    for (auto rn : roman_numerals) {\n\
    \        while (number >= rn.first) {\n            roman += rn.second;\n     \
    \       number -= rn.first;\n        }\n    }\n    return roman;", "    std::string\
    \ roman;\n    std::string roman_numerals[] = {\"m\", \"cm\", \"d\", \"cd\", \"\
    c\", \"xc\", \"l\", \"xl\", \"x\", \"ix\", \"v\", \"iv\", \"i\"};\n    int decimal_numerals[]\
    \ = {1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1};\n    for (int i =\
    \ 0; i < 13; i++) {\n        while (number >= decimal_numerals[i]) {\n       \
    \     number -= decimal_numerals[i];\n            roman += roman_numerals[i];\n\
    \        }\n    }\n    return roman;", "    std::string result;\n    std::string\
    \ roman[] = {\"m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"l\", \"xl\", \"x\"\
    , \"ix\", \"v\", \"iv\", \"i\"};\n    int value[] = {1000, 900, 500, 400, 100,\
    \ 90, 50, 40, 10, 9, 5, 4, 1};\n    for (int i = 0; number != 0; i++) {\n    \
    \    while (number >= value[i]) {\n            number -= value[i];\n         \
    \   result += roman[i];\n        }\n    }\n    return result;", "  std::string\
    \ result;\n  std::string roman[] = {\"m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\"\
    , \"l\", \"xl\", \"x\", \"ix\", \"v\", \"iv\", \"i\"};\n  int decimal[] = {1000,\
    \ 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1};\n  for (int i = 0; number !=\
    \ 0; i++) {\n    while (number >= decimal[i]) {\n      number -= decimal[i];\n\
    \      result += roman[i];\n    }\n  }\n  return result;", "    std::string roman\
    \ = \"\";\n    int num = number;\n    while(num > 0) {\n        if(num >= 1000)\
    \ {\n            roman += \"m\";\n            num -= 1000;\n        }\n      \
    \  else if(num >= 900) {\n            roman += \"cm\";\n            num -= 900;\n\
    \        }\n        else if(num >= 500) {\n            roman += \"d\";\n     \
    \       num -= 500;\n        }\n        else if(num >= 400) {\n            roman\
    \ += \"cd\";\n            num -= 400;\n        }\n        else if(num >= 100)\
    \ {\n            roman += \"c\";\n            num -= 100;\n        }\n       \
    \ else if(num >= 90) {\n            roman += \"xc\";\n            num -= 90;\n\
    \        }\n        else if(num >= 50) {\n            roman += \"l\";\n      \
    \      num -= 50;\n        }\n        else if(num >= 40) {\n            roman\
    \ += \"xl\";\n            num -= 40;\n        }\n        else if(num >= 10) {\n\
    \            roman += \"x\";\n            num -= 10;\n        }\n        else\
    \ if(num >= 9) {\n            roman += \"ix\";\n            num -= 9;\n      \
    \  }\n        else if(num >= 5) {\n            roman += \"v\";\n            num\
    \ -= 5;\n        }\n        else if(num >= 4) {\n            roman += \"iv\";\n\
    \            num -= 4;\n        }\n        else if(num >= 1) {\n            roman\
    \ += \"i\";\n            num -= 1;\n        }\n    }\n    return roman;", "  \
    \  std::string roman = \"\";\n    std::map<int, std::string> roman_map = {\n \
    \       {1, \"i\"},\n        {5, \"v\"},\n        {10, \"x\"},\n        {50, \"\
    l\"},\n        {100, \"c\"},\n        {500, \"d\"},\n        {1000, \"m\"}\n \
    \   };\n    std::vector<int> num_list = {1000, 500, 100, 50, 10, 5, 1};\n    int\
    \ num_index = 0;\n    while (number > 0) {\n        int num = num_list[num_index];\n\
    \        if (number >= num) {\n            roman += roman_map[num];\n        \
    \    number -= num;\n        } else {\n            if (num_index < num_list.size()\
    \ - 1) {\n                int next_num = num_list[num_index + 1];\n          \
    \      if (number >= num - next_num) {\n                    roman += roman_map[next_num]\
    \ + roman_map[num];\n                    number -= num - next_num;\n         \
    \       } else {\n                    num_index++;\n                }\n      \
    \      } else {\n                num_index++;\n            }\n        }\n    }\n\
    \    return roman;", "    std::string roman;\n    std::string roman_numerals[13]\
    \ = {\"m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"l\", \"xl\", \"x\", \"ix\"\
    , \"v\", \"iv\", \"i\"};\n    int values[13] = {1000, 900, 500, 400, 100, 90,\
    \ 50, 40, 10, 9, 5, 4, 1};\n    for (int i = 0; i < 13; i++) {\n        while\
    \ (number >= values[i]) {\n            number -= values[i];\n            roman\
    \ += roman_numerals[i];\n        }\n    }\n    return roman;", "    std::string\
    \ roman;\n    while (number >= 1000) {\n        roman += \"m\";\n        number\
    \ -= 1000;\n    }\n    if (number >= 900) {\n        roman += \"cm\";\n      \
    \  number -= 900;\n    }\n    if (number >= 500) {\n        roman += \"d\";\n\
    \        number -= 500;\n    }\n    if (number >= 400) {\n        roman += \"\
    cd\";\n        number -= 400;\n    }\n    while (number >= 100) {\n        roman\
    \ += \"c\";\n        number -= 100;\n    }\n    if (number >= 90) {\n        roman\
    \ += \"xc\";\n        number -= 90;\n    }\n    if (number >= 50) {\n        roman\
    \ += \"l\";\n        number -= 50;\n    }\n    if (number >= 40) {\n        roman\
    \ += \"xl\";\n        number -= 40;\n    }\n    while (number >= 10) {\n     \
    \   roman += \"x\";\n        number -= 10;\n    }\n    if (number >= 9) {\n  \
    \      roman += \"ix\";\n        number -= 9;\n    }\n    if (number >= 5) {\n\
    \        roman += \"v\";\n        number -= 5;\n    }\n    if (number >= 4) {\n\
    \        roman += \"iv\";\n        number -= 4;\n    }\n    while (number >= 1)\
    \ {\n        roman += \"i\";\n        number -= 1;\n    }\n    return roman;",
  "    std::string roman;\n    std::string roman_numerals[] = {\"m\", \"cm\", \"d\"\
    , \"cd\", \"c\", \"xc\", \"l\", \"xl\", \"x\", \"ix\", \"v\", \"iv\", \"i\"};\n\
    \    int decimal_numerals[] = {1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5,\
    \ 4, 1};\n    for (int i = 0; i < 13; i++) {\n        while (number >= decimal_numerals[i])\
    \ {\n            number -= decimal_numerals[i];\n            roman += roman_numerals[i];\n\
    \        }\n    }\n    return roman;", "    std::string result;\n    std::string\
    \ roman[] = {\"m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"l\", \"xl\", \"x\"\
    , \"ix\", \"v\", \"iv\", \"i\"};\n    int value[] = {1000, 900, 500, 400, 100,\
    \ 90, 50, 40, 10, 9, 5, 4, 1};\n    for (int i = 0; number != 0; i++) {\n    \
    \    while (number >= value[i]) {\n            number -= value[i];\n         \
    \   result += roman[i];\n        }\n    }\n    return result;", "    std::string\
    \ roman;\n    int num[] = {1,4,5,9,10,40,50,90,100,400,500,900,1000};\n    std::string\
    \ sym[] = {\"I\",\"IV\",\"V\",\"IX\",\"X\",\"XL\",\"L\",\"XC\",\"C\",\"CD\",\"\
    D\",\"CM\",\"M\"};\n    int i=12;\n    while(number>0)\n    {\n        int div\
    \ = number/num[i];\n        number = number%num[i];\n        while(div--)\n  \
    \      {\n            roman += sym[i];\n        }\n        i--;\n    }\n    return\
    \ roman;", "    std::string result;\n    std::map<int, std::string> roman_numerals\
    \ = {\n        {1, \"i\"},\n        {4, \"iv\"},\n        {5, \"v\"},\n      \
    \  {9, \"ix\"},\n        {10, \"x\"},\n        {40, \"xl\"},\n        {50, \"\
    l\"},\n        {90, \"xc\"},\n        {100, \"c\"},\n        {400, \"cd\"},\n\
    \        {500, \"d\"},\n        {900, \"cm\"},\n        {1000, \"m\"}\n    };\n\
    \    std::map<int, std::string>::reverse_iterator it;\n    for (it = roman_numerals.rbegin();\
    \ it != roman_numerals.rend(); ++it) {\n        while (number >= it->first) {\n\
    \            result += it->second;\n            number -= it->first;\n       \
    \ }\n    }\n    return result;", "    std::string roman;\n    int num[] = {1,\
    \ 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900, 1000};\n    std::string sym[] =\
    \ {\"i\", \"iv\", \"v\", \"ix\", \"x\", \"xl\", \"l\", \"xc\", \"c\", \"cd\",\
    \ \"d\", \"cm\", \"m\"};\n    int i = 12;\n    while (number > 0) {\n        int\
    \ div = number / num[i];\n        number = number % num[i];\n        while (div--)\
    \ {\n            roman += sym[i];\n        }\n        i--;\n    }\n    return\
    \ roman;", "    std::string roman;\n    std::vector<std::pair<long, std::string>>\
    \ roman_numerals = {\n        {1000, \"m\"}, {900, \"cm\"}, {500, \"d\"}, {400,\
    \ \"cd\"}, {100, \"c\"},\n        {90, \"xc\"}, {50, \"l\"}, {40, \"xl\"}, {10,\
    \ \"x\"}, {9, \"ix\"}, {5, \"v\"},\n        {4, \"iv\"}, {1, \"i\"}\n    };\n\
    \    for (auto const& rn : roman_numerals) {\n        while (number >= rn.first)\
    \ {\n            roman += rn.second;\n            number -= rn.first;\n      \
    \  }\n    }\n    return roman;", "    std::string result;\n    std::string roman_numerals[]\
    \ = {\"m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"l\", \"xl\", \"x\", \"ix\"\
    , \"v\", \"iv\", \"i\"};\n    int values[] = {1000, 900, 500, 400, 100, 90, 50,\
    \ 40, 10, 9, 5, 4, 1};\n    for (int i = 0; i < 13; i++) {\n        while (number\
    \ >= values[i]) {\n            number -= values[i];\n            result += roman_numerals[i];\n\
    \        }\n    }\n    return result;", "    std::string result;\n    std::string\
    \ roman[] = {\"m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"l\", \"xl\", \"x\"\
    , \"ix\", \"v\", \"iv\", \"i\"};\n    int value[] = {1000, 900, 500, 400, 100,\
    \ 90, 50, 40, 10, 9, 5, 4, 1};\n    for (int i = 0; number != 0; i++) {\n    \
    \    while (number >= value[i]) {\n            number -= value[i];\n         \
    \   result += roman[i];\n        }\n    }\n    return result;", "    std::string\
    \ roman;\n    while (number > 0) {\n        if (number >= 1000) {\n          \
    \  roman += \"m\";\n            number -= 1000;\n        } else if (number >=\
    \ 900) {\n            roman += \"cm\";\n            number -= 900;\n        }\
    \ else if (number >= 500) {\n            roman += \"d\";\n            number -=\
    \ 500;\n        } else if (number >= 400) {\n            roman += \"cd\";\n  \
    \          number -= 400;\n        } else if (number >= 100) {\n            roman\
    \ += \"c\";\n            number -= 100;\n        } else if (number >= 90) {\n\
    \            roman += \"xc\";\n            number -= 90;\n        } else if (number\
    \ >= 50) {\n            roman += \"l\";\n            number -= 50;\n        }\
    \ else if (number >= 40) {\n            roman += \"xl\";\n            number -=\
    \ 40;\n        } else if (number >= 10) {\n            roman += \"x\";\n     \
    \       number -= 10;\n        } else if (number >= 9) {\n            roman +=\
    \ \"ix\";\n            number -= 9;\n        } else if (number >= 5) {\n     \
    \       roman += \"v\";\n            number -= 5;\n        } else if (number >=\
    \ 4) {\n            roman += \"iv\";\n            number -= 4;\n        } else\
    \ if (number >= 1) {\n            roman += \"i\";\n            number -= 1;\n\
    \        }\n    }\n    return roman;", "    std::string result;\n    std::string\
    \ roman_numerals[] = {\"m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"l\", \"xl\"\
    , \"x\", \"ix\", \"v\", \"iv\", \"i\"};\n    int decimal_numbers[] = {1000, 900,\
    \ 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1};\n    for (int i = 0; i < 13; i++)\
    \ {\n        while (number >= decimal_numbers[i]) {\n            number -= decimal_numbers[i];\n\
    \            result += roman_numerals[i];\n        }\n    }\n    return result;",
  "    std::string roman;\n    std::string roman_numerals[13] = {\"m\", \"cm\", \"\
    d\", \"cd\", \"c\", \"xc\", \"l\", \"xl\", \"x\", \"ix\", \"v\", \"iv\", \"i\"\
    };\n    int decimal_numerals[13] = {1000, 900, 500, 400, 100, 90, 50, 40, 10,\
    \ 9, 5, 4, 1};\n    for (int i = 0; i < 13; i++) {\n        while (number >= decimal_numerals[i])\
    \ {\n            number -= decimal_numerals[i];\n            roman += roman_numerals[i];\n\
    \        }\n    }\n    return roman;", "    std::string roman;\n    std::vector<std::pair<int,\
    \ std::string>> roman_numerals = {\n        {1000, \"m\"}, {900, \"cm\"}, {500,\
    \ \"d\"}, {400, \"cd\"}, {100, \"c\"},\n        {90, \"xc\"}, {50, \"l\"}, {40,\
    \ \"xl\"}, {10, \"x\"}, {9, \"ix\"}, {5, \"v\"},\n        {4, \"iv\"}, {1, \"\
    i\"}\n    };\n    for (auto& roman_numeral : roman_numerals) {\n        while\
    \ (number >= roman_numeral.first) {\n            roman += roman_numeral.second;\n\
    \            number -= roman_numeral.first;\n        }\n    }\n    return roman;",
  "    std::string result;\n    std::map<int, std::string> roman_numerals = {\n  \
    \      {1, \"i\"},\n        {4, \"iv\"},\n        {5, \"v\"},\n        {9, \"\
    ix\"},\n        {10, \"x\"},\n        {40, \"xl\"},\n        {50, \"l\"},\n  \
    \      {90, \"xc\"},\n        {100, \"c\"},\n        {400, \"cd\"},\n        {500,\
    \ \"d\"},\n        {900, \"cm\"},\n        {1000, \"m\"}\n    };\n    std::vector<int>\
    \ keys = {1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1};\n    for (auto\
    \ key : keys) {\n        while (number >= key) {\n            result += roman_numerals[key];\n\
    \            number -= key;\n        }\n    }\n    return result;", "    std::string\
    \ roman;\n    std::string ones[] = {\"\", \"i\", \"ii\", \"iii\", \"iv\", \"v\"\
    , \"vi\", \"vii\", \"viii\", \"ix\"};\n    std::string tens[] = {\"\", \"x\",\
    \ \"xx\", \"xxx\", \"xl\", \"l\", \"lx\", \"lxx\", \"lxxx\", \"xc\"};\n    std::string\
    \ hundreds[] = {\"\", \"c\", \"cc\", \"ccc\", \"cd\", \"d\", \"dc\", \"dcc\",\
    \ \"dccc\", \"cm\"};\n    std::string thousands[] = {\"\", \"m\", \"mm\", \"mmm\"\
    };\n    roman = thousands[number / 1000] + hundreds[(number % 1000) / 100] + tens[(number\
    \ % 100) / 10] + ones[number % 10];\n    return roman;", "    std::string result\
    \ = \"\";\n    std::string roman_numerals[13] = {\"m\", \"cm\", \"d\", \"cd\"\
    , \"c\", \"xc\", \"l\", \"xl\", \"x\", \"ix\", \"v\", \"iv\", \"i\"};\n    int\
    \ values[13] = {1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1};\n    for\
    \ (int i = 0; i < 13; i++) {\n        while (number >= values[i]) {\n        \
    \    number -= values[i];\n            result += roman_numerals[i];\n        }\n\
    \    }\n    return result;", "    std::string result;\n    std::string roman[]\
    \ = {\"m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"l\", \"xl\", \"x\", \"ix\"\
    , \"v\", \"iv\", \"i\"};\n    int value[] = {1000, 900, 500, 400, 100, 90, 50,\
    \ 40, 10, 9, 5, 4, 1};\n    for (int i = 0; number != 0; i++) {\n        while\
    \ (number >= value[i]) {\n            number -= value[i];\n            result\
    \ += roman[i];\n        }\n    }\n    return result;", "    std::string roman;\n\
    \    while (number > 0) {\n        if (number >= 1000) {\n            roman +=\
    \ \"m\";\n            number -= 1000;\n        } else if (number >= 900) {\n \
    \           roman += \"cm\";\n            number -= 900;\n        } else if (number\
    \ >= 500) {\n            roman += \"d\";\n            number -= 500;\n       \
    \ } else if (number >= 400) {\n            roman += \"cd\";\n            number\
    \ -= 400;\n        } else if (number >= 100) {\n            roman += \"c\";\n\
    \            number -= 100;\n        } else if (number >= 90) {\n            roman\
    \ += \"xc\";\n            number -= 90;\n        } else if (number >= 50) {\n\
    \            roman += \"l\";\n            number -= 50;\n        } else if (number\
    \ >= 40) {\n            roman += \"xl\";\n            number -= 40;\n        }\
    \ else if (number >= 10) {\n            roman += \"x\";\n            number -=\
    \ 10;\n        } else if (number >= 9) {\n            roman += \"ix\";\n     \
    \       number -= 9;\n        } else if (number >= 5) {\n            roman +=\
    \ \"v\";\n            number -= 5;\n        } else if (number >= 4) {\n      \
    \      roman += \"iv\";\n            number -= 4;\n        } else if (number >=\
    \ 1) {\n            roman += \"i\";\n            number -= 1;\n        }\n   \
    \ }\n    return roman;", "    std::string result;\n    std::string roman[] = {\"\
    m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"l\", \"xl\", \"x\", \"ix\", \"v\"\
    , \"iv\", \"i\"};\n    int value[] = {1000, 900, 500, 400, 100, 90, 50, 40, 10,\
    \ 9, 5, 4, 1};\n    for (int i = 0; number != 0; i++) {\n        while (number\
    \ >= value[i]) {\n            number -= value[i];\n            result += roman[i];\n\
    \        }\n    }\n    return result;", "  std::string roman;\n  std::string roman_numerals[]\
    \ = {\"m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"l\", \"xl\", \"x\", \"ix\"\
    , \"v\", \"iv\", \"i\"};\n  int values[] = {1000, 900, 500, 400, 100, 90, 50,\
    \ 40, 10, 9, 5, 4, 1};\n  for (int i = 0; i < 13; i++) {\n    while (number >=\
    \ values[i]) {\n      number -= values[i];\n      roman += roman_numerals[i];\n\
    \    }\n  }\n  return roman;", "    std::string roman;\n    std::string roman_symbols[]\
    \ = {\"i\", \"v\", \"x\", \"l\", \"c\", \"d\", \"m\"};\n    int roman_values[]\
    \ = {1, 5, 10, 50, 100, 500, 1000};\n    int i = 6;\n    while (number > 0) {\n\
    \        int div = number / roman_values[i];\n        number %= roman_values[i];\n\
    \        if (div < 4) {\n            roman.append(div, roman_symbols[i][0]);\n\
    \        } else if (div == 4) {\n            roman.append(1, roman_symbols[i][0]);\n\
    \            roman.append(1, roman_symbols[i + 1][0]);\n        } else if (div\
    \ > 4 && div < 9) {\n            roman.append(1, roman_symbols[i + 1][0]);\n \
    \           roman.append(div - 5, roman_symbols[i][0]);\n        } else if (div\
    \ == 9) {\n            roman.append(1, roman_symbols[i][0]);\n            roman.append(1,\
    \ roman_symbols[i + 2][0]);\n        }\n        i -= 2;\n    }\n    return roman;",
  "    std::string result;\n    std::string roman[] = {\"m\", \"cm\", \"d\", \"cd\"\
    , \"c\", \"xc\", \"l\", \"xl\", \"x\", \"ix\", \"v\", \"iv\", \"i\"};\n    int\
    \ value[] = {1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1};\n    for (int\
    \ i = 0; number != 0; i++) {\n        while (number >= value[i]) {\n         \
    \   number -= value[i];\n            result += roman[i];\n        }\n    }\n \
    \   return result;", "    std::string result;\n    std::string roman[] = {\"m\"\
    , \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"l\", \"xl\", \"x\", \"ix\", \"v\", \"\
    iv\", \"i\"};\n    int value[] = {1000, 900, 500, 400, 100, 90, 50, 40, 10, 9,\
    \ 5, 4, 1};\n    for (int i = 0; number != 0; i++) {\n        while (number >=\
    \ value[i]) {\n            number -= value[i];\n            result += roman[i];\n\
    \        }\n    }\n    return result;", "    std::string roman;\n    std::string\
    \ roman_numerals[13] = {\"m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"l\", \"\
    xl\", \"x\", \"ix\", \"v\", \"iv\", \"i\"};\n    int arabic_numerals[13] = {1000,\
    \ 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1};\n    for (int i = 0; i < 13;\
    \ i++) {\n        while (number >= arabic_numerals[i]) {\n            number -=\
    \ arabic_numerals[i];\n            roman += roman_numerals[i];\n        }\n  \
    \  }\n    return roman;", "    std::string roman;\n    std::string roman_numerals[]\
    \ = {\"m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"l\", \"xl\", \"x\", \"ix\"\
    , \"v\", \"iv\", \"i\"};\n    int decimal_numerals[] = {1000, 900, 500, 400, 100,\
    \ 90, 50, 40, 10, 9, 5, 4, 1};\n    for (int i = 0; i < 13; i++) {\n        while\
    \ (number >= decimal_numerals[i]) {\n            number -= decimal_numerals[i];\n\
    \            roman += roman_numerals[i];\n        }\n    }\n    return roman;",
  "  std::string roman;\n  while (number >= 1000) {\n    roman += \"m\";\n    number\
    \ -= 1000;\n  }\n  if (number >= 900) {\n    roman += \"cm\";\n    number -= 900;\n\
    \  }\n  if (number >= 500) {\n    roman += \"d\";\n    number -= 500;\n  }\n \
    \ if (number >= 400) {\n    roman += \"cd\";\n    number -= 400;\n  }\n  while\
    \ (number >= 100) {\n    roman += \"c\";\n    number -= 100;\n  }\n  if (number\
    \ >= 90) {\n    roman += \"xc\";\n    number -= 90;\n  }\n  if (number >= 50)\
    \ {\n    roman += \"l\";\n    number -= 50;\n  }\n  if (number >= 40) {\n    roman\
    \ += \"xl\";\n    number -= 40;\n  }\n  while (number >= 10) {\n    roman += \"\
    x\";\n    number -= 10;\n  }\n  if (number >= 9) {\n    roman += \"ix\";\n   \
    \ number -= 9;\n  }\n  if (number >= 5) {\n    roman += \"v\";\n    number -=\
    \ 5;\n  }\n  if (number >= 4) {\n    roman += \"iv\";\n    number -= 4;\n  }\n\
    \  while (number >= 1) {\n    roman += \"i\";\n    number -= 1;\n  }\n  return\
    \ roman;", "    std::string result;\n    std::string roman[] = {\"m\", \"cm\"\
    , \"d\", \"cd\", \"c\", \"xc\", \"l\", \"xl\", \"x\", \"ix\", \"v\", \"iv\", \"\
    i\"};\n    int value[] = {1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1};\n\
    \    for (int i = 0; number != 0; i++) {\n        while (number >= value[i]) {\n\
    \            number -= value[i];\n            result += roman[i];\n        }\n\
    \    }\n    return result;", "    std::string result;\n    std::string roman_numerals[]\
    \ = {\"m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"l\", \"xl\", \"x\", \"ix\"\
    , \"v\", \"iv\", \"i\"};\n    int decimal_values[] = {1000, 900, 500, 400, 100,\
    \ 90, 50, 40, 10, 9, 5, 4, 1};\n    for (int i = 0; i < 13; i++) {\n        while\
    \ (number >= decimal_values[i]) {\n            number -= decimal_values[i];\n\
    \            result += roman_numerals[i];\n        }\n    }\n    return result;",
  "    std::string roman;\n    std::vector<std::pair<long, std::string>> roman_numerals\
    \ = {\n        {1000, \"m\"}, {900, \"cm\"}, {500, \"d\"}, {400, \"cd\"}, {100,\
    \ \"c\"},\n        {90, \"xc\"}, {50, \"l\"}, {40, \"xl\"}, {10, \"x\"}, {9, \"\
    ix\"}, {5, \"v\"},\n        {4, \"iv\"}, {1, \"i\"}\n    };\n    for (auto const&\
    \ roman_numeral : roman_numerals) {\n        while (number >= roman_numeral.first)\
    \ {\n            roman += roman_numeral.second;\n            number -= roman_numeral.first;\n\
    \        }\n    }\n    return roman;", "    std::string result;\n    std::string\
    \ roman[] = {\"m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"l\", \"xl\", \"x\"\
    , \"ix\", \"v\", \"iv\", \"i\"};\n    int value[] = {1000, 900, 500, 400, 100,\
    \ 90, 50, 40, 10, 9, 5, 4, 1};\n    for (int i = 0; number != 0; i++) {\n    \
    \    while (number >= value[i]) {\n            number -= value[i];\n         \
    \   result += roman[i];\n        }\n    }\n    return result;", "    std::string\
    \ roman;\n    std::map<int, std::string> roman_map = {{1, \"i\"}, {5, \"v\"},\
    \ {10, \"x\"}, {50, \"l\"}, {100, \"c\"}, {500, \"d\"}, {1000, \"m\"}};\n    std::vector<int>\
    \ roman_keys = {1000, 500, 100, 50, 10, 5, 1};\n    int i = 0;\n    while (number\
    \ > 0) {\n        int div = number / roman_keys[i];\n        if (div == 4) {\n\
    \            roman += roman_map[roman_keys[i]];\n            roman += roman_map[roman_keys[i\
    \ - 1]];\n        } else if (div == 9) {\n            roman += roman_map[roman_keys[i]];\n\
    \            roman += roman_map[roman_keys[i - 2]];\n        } else {\n      \
    \      if (div >= 5) {\n                roman += roman_map[roman_keys[i - 1]];\n\
    \                div -= 5;\n            }\n            for (int j = 0; j < div;\
    \ j++) {\n                roman += roman_map[roman_keys[i]];\n            }\n\
    \        }\n        number %= roman_keys[i];\n        i++;\n    }\n    return\
    \ roman;", "    std::string roman;\n    while (number >= 1000) {\n        roman\
    \ += \"m\";\n        number -= 1000;\n    }\n    if (number >= 900) {\n      \
    \  roman += \"cm\";\n        number -= 900;\n    }\n    if (number >= 500) {\n\
    \        roman += \"d\";\n        number -= 500;\n    }\n    if (number >= 400)\
    \ {\n        roman += \"cd\";\n        number -= 400;\n    }\n    while (number\
    \ >= 100) {\n        roman += \"c\";\n        number -= 100;\n    }\n    if (number\
    \ >= 90) {\n        roman += \"xc\";\n        number -= 90;\n    }\n    if (number\
    \ >= 50) {\n        roman += \"l\";\n        number -= 50;\n    }\n    if (number\
    \ >= 40) {\n        roman += \"xl\";\n        number -= 40;\n    }\n    while\
    \ (number >= 10) {\n        roman += \"x\";\n        number -= 10;\n    }\n  \
    \  if (number >= 9) {\n        roman += \"ix\";\n        number -= 9;\n    }\n\
    \    if (number >= 5) {\n        roman += \"v\";\n        number -= 5;\n    }\n\
    \    if (number >= 4) {\n        roman += \"iv\";\n        number -= 4;\n    }\n\
    \    while (number >= 1) {\n        roman += \"i\";\n        number -= 1;\n  \
    \  }\n    return roman;", "    std::string result;\n    std::vector<std::pair<int,\
    \ std::string>> roman_numerals = {\n        {1000, \"m\"},\n        {900, \"cm\"\
    },\n        {500, \"d\"},\n        {400, \"cd\"},\n        {100, \"c\"},\n   \
    \     {90, \"xc\"},\n        {50, \"l\"},\n        {40, \"xl\"},\n        {10,\
    \ \"x\"},\n        {9, \"ix\"},\n        {5, \"v\"},\n        {4, \"iv\"},\n \
    \       {1, \"i\"}\n    };\n    for (auto roman_numeral : roman_numerals) {\n\
    \        while (number >= roman_numeral.first) {\n            result += roman_numeral.second;\n\
    \            number -= roman_numeral.first;\n        }\n    }\n    return result;",
  "    std::string result = \"\";\n    while (number >= 1000) {\n        result +=\
    \ \"m\";\n        number -= 1000;\n    }\n    if (number >= 900) {\n        result\
    \ += \"cm\";\n        number -= 900;\n    }\n    if (number >= 500) {\n      \
    \  result += \"d\";\n        number -= 500;\n    }\n    if (number >= 400) {\n\
    \        result += \"cd\";\n        number -= 400;\n    }\n    while (number >=\
    \ 100) {\n        result += \"c\";\n        number -= 100;\n    }\n    if (number\
    \ >= 90) {\n        result += \"xc\";\n        number -= 90;\n    }\n    if (number\
    \ >= 50) {\n        result += \"l\";\n        number -= 50;\n    }\n    if (number\
    \ >= 40) {\n        result += \"xl\";\n        number -= 40;\n    }\n    while\
    \ (number >= 10) {\n        result += \"x\";\n        number -= 10;\n    }\n \
    \   if (number >= 9) {\n        result += \"ix\";\n        number -= 9;\n    }\n\
    \    if (number >= 5) {\n        result += \"v\";\n        number -= 5;\n    }\n\
    \    if (number >= 4) {\n        result += \"iv\";\n        number -= 4;\n   \
    \ }\n    while (number >= 1) {\n        result += \"i\";\n        number -= 1;\n\
    \    }\n    return result;", "    std::string result;\n    std::string roman[]\
    \ = {\"m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"l\", \"xl\", \"x\", \"ix\"\
    , \"v\", \"iv\", \"i\"};\n    int value[] = {1000, 900, 500, 400, 100, 90, 50,\
    \ 40, 10, 9, 5, 4, 1};\n    for (int i = 0; number != 0; i++) {\n        while\
    \ (number >= value[i]) {\n            number -= value[i];\n            result\
    \ += roman[i];\n        }\n    }\n    return result;", "    std::string roman;\n\
    \    std::vector<std::pair<int, std::string>> roman_numerals = {\n        {1000,\
    \ \"m\"}, {900, \"cm\"}, {500, \"d\"}, {400, \"cd\"}, {100, \"c\"},\n        {90,\
    \ \"xc\"}, {50, \"l\"}, {40, \"xl\"}, {10, \"x\"}, {9, \"ix\"}, {5, \"v\"},\n\
    \        {4, \"iv\"}, {1, \"i\"}\n    };\n    for (auto numeral : roman_numerals)\
    \ {\n        while (number >= numeral.first) {\n            roman += numeral.second;\n\
    \            number -= numeral.first;\n        }\n    }\n    return roman;", " \
    \   assert(number > 0 && number <= 1000);\n    std::string roman;\n    while (number\
    \ >= 1000) {\n        roman += \"m\";\n        number -= 1000;\n    }\n    if\
    \ (number >= 900) {\n        roman += \"cm\";\n        number -= 900;\n    }\n\
    \    if (number >= 500) {\n        roman += \"d\";\n        number -= 500;\n \
    \   }\n    if (number >= 400) {\n        roman += \"cd\";\n        number -= 400;\n\
    \    }\n    while (number >= 100) {\n        roman += \"c\";\n        number -=\
    \ 100;\n    }\n    if (number >= 90) {\n        roman += \"xc\";\n        number\
    \ -= 90;\n    }\n    if (number >= 50) {\n        roman += \"l\";\n        number\
    \ -= 50;\n    }\n    if (number >= 40) {\n        roman += \"xl\";\n        number\
    \ -= 40;\n    }\n    while (number >= 10) {\n        roman += \"x\";\n       \
    \ number -= 10;\n    }\n    if (number >= 9) {\n        roman += \"ix\";\n   \
    \     number -= 9;\n    }\n    if (number >= 5) {\n        roman += \"v\";\n \
    \       number -= 5;\n    }\n    if (number >= 4) {\n        roman += \"iv\";\n\
    \        number -= 4;\n    }\n    while (number >= 1) {\n        roman += \"i\"\
    ;\n        number -= 1;\n    }\n    return roman;", "    std::string roman;\n\
    \    std::string roman_numerals[] = {\"m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\"\
    , \"l\", \"xl\", \"x\", \"ix\", \"v\", \"iv\", \"i\"};\n    int decimal_numerals[]\
    \ = {1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1};\n    for (int i =\
    \ 0; i < 13; i++) {\n        while (number >= decimal_numerals[i]) {\n       \
    \     number -= decimal_numerals[i];\n            roman += roman_numerals[i];\n\
    \        }\n    }\n    return roman;", "    std::string result;\n    std::vector<std::pair<int,\
    \ std::string>> roman_numerals = {\n        {1000, \"m\"},\n        {900, \"cm\"\
    },\n        {500, \"d\"},\n        {400, \"cd\"},\n        {100, \"c\"},\n   \
    \     {90, \"xc\"},\n        {50, \"l\"},\n        {40, \"xl\"},\n        {10,\
    \ \"x\"},\n        {9, \"ix\"},\n        {5, \"v\"},\n        {4, \"iv\"},\n \
    \       {1, \"i\"}\n    };\n    for (auto roman_numeral : roman_numerals) {\n\
    \        while (number >= roman_numeral.first) {\n            result += roman_numeral.second;\n\
    \            number -= roman_numeral.first;\n        }\n    }\n    return result;",
  "    std::string roman;\n    while (number >= 1000) {\n        roman += \"m\";\n\
    \        number -= 1000;\n    }\n    if (number >= 900) {\n        roman += \"\
    cm\";\n        number -= 900;\n    }\n    if (number >= 500) {\n        roman\
    \ += \"d\";\n        number -= 500;\n    }\n    if (number >= 400) {\n       \
    \ roman += \"cd\";\n        number -= 400;\n    }\n    while (number >= 100) {\n\
    \        roman += \"c\";\n        number -= 100;\n    }\n    if (number >= 90)\
    \ {\n        roman += \"xc\";\n        number -= 90;\n    }\n    if (number >=\
    \ 50) {\n        roman += \"l\";\n        number -= 50;\n    }\n    if (number\
    \ >= 40) {\n        roman += \"xl\";\n        number -= 40;\n    }\n    while\
    \ (number >= 10) {\n        roman += \"x\";\n        number -= 10;\n    }\n  \
    \  if (number >= 9) {\n        roman += \"ix\";\n        number -= 9;\n    }\n\
    \    if (number >= 5) {\n        roman += \"v\";\n        number -= 5;\n    }\n\
    \    if (number >= 4) {\n        roman += \"iv\";\n        number -= 4;\n    }\n\
    \    while (number >= 1) {\n        roman += \"i\";\n        number -= 1;\n  \
    \  }\n    return roman;", "    std::string result;\n    std::vector<std::pair<long,\
    \ std::string>> roman_numerals = {\n        {1000, \"m\"},\n        {900, \"cm\"\
    },\n        {500, \"d\"},\n        {400, \"cd\"},\n        {100, \"c\"},\n   \
    \     {90, \"xc\"},\n        {50, \"l\"},\n        {40, \"xl\"},\n        {10,\
    \ \"x\"},\n        {9, \"ix\"},\n        {5, \"v\"},\n        {4, \"iv\"},\n \
    \       {1, \"i\"}\n    };\n    for (auto& roman_numeral : roman_numerals) {\n\
    \        while (number >= roman_numeral.first) {\n            result += roman_numeral.second;\n\
    \            number -= roman_numeral.first;\n        }\n    }\n    return result;",
  "    std::string result;\n    while (number >= 1000) {\n        result += \"m\"\
    ;\n        number -= 1000;\n    }\n    if (number >= 900) {\n        result +=\
    \ \"cm\";\n        number -= 900;\n    }\n    if (number >= 500) {\n        result\
    \ += \"d\";\n        number -= 500;\n    }\n    if (number >= 400) {\n       \
    \ result += \"cd\";\n        number -= 400;\n    }\n    while (number >= 100)\
    \ {\n        result += \"c\";\n        number -= 100;\n    }\n    if (number >=\
    \ 90) {\n        result += \"xc\";\n        number -= 90;\n    }\n    if (number\
    \ >= 50) {\n        result += \"l\";\n        number -= 50;\n    }\n    if (number\
    \ >= 40) {\n        result += \"xl\";\n        number -= 40;\n    }\n    while\
    \ (number >= 10) {\n        result += \"x\";\n        number -= 10;\n    }\n \
    \   if (number >= 9) {\n        result += \"ix\";\n        number -= 9;\n    }\n\
    \    if (number >= 5) {\n        result += \"v\";\n        number -= 5;\n    }\n\
    \    if (number >= 4) {\n        result += \"iv\";\n        number -= 4;\n   \
    \ }\n    while (number >= 1) {\n        result += \"i\";\n        number -= 1;\n\
    \    }\n    return result;", "    std::string roman;\n    std::string roman_numerals[13]\
    \ = {\"m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"l\", \"xl\", \"x\", \"ix\"\
    , \"v\", \"iv\", \"i\"};\n    int arabic_numerals[13] = {1000, 900, 500, 400,\
    \ 100, 90, 50, 40, 10, 9, 5, 4, 1};\n    for (int i = 0; i < 13; i++) {\n    \
    \    while (number >= arabic_numerals[i]) {\n            number -= arabic_numerals[i];\n\
    \            roman += roman_numerals[i];\n        }\n    }\n    return roman;",
  "    std::string roman;\n    std::string roman_numerals[] = {\"m\", \"cm\", \"d\"\
    , \"cd\", \"c\", \"xc\", \"l\", \"xl\", \"x\", \"ix\", \"v\", \"iv\", \"i\"};\n\
    \    int decimal_numerals[] = {1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5,\
    \ 4, 1};\n    for (int i = 0; i < 13; i++) {\n        while (number >= decimal_numerals[i])\
    \ {\n            number -= decimal_numerals[i];\n            roman += roman_numerals[i];\n\
    \        }\n    }\n    return roman;", "    std::string roman;\n    int num[]\
    \ = {1,4,5,9,10,40,50,90,100,400,500,900,1000};\n    std::string sym[] = {\"I\"\
    ,\"IV\",\"V\",\"IX\",\"X\",\"XL\",\"L\",\"XC\",\"C\",\"CD\",\"D\",\"CM\",\"M\"\
    };\n    int i=12;\n    while(number>0)\n    {\n        int div = number/num[i];\n\
    \        number = number%num[i];\n        while(div--)\n        {\n          \
    \  roman += sym[i];\n        }\n        i--;\n    }\n    return roman;", "   \
    \ std::string roman;\n    while (number >= 1000) {\n        roman += \"m\";\n\
    \        number -= 1000;\n    }\n    if (number >= 900) {\n        roman += \"\
    cm\";\n        number -= 900;\n    }\n    if (number >= 500) {\n        roman\
    \ += \"d\";\n        number -= 500;\n    }\n    if (number >= 400) {\n       \
    \ roman += \"cd\";\n        number -= 400;\n    }\n    while (number >= 100) {\n\
    \        roman += \"c\";\n        number -= 100;\n    }\n    if (number >= 90)\
    \ {\n        roman += \"xc\";\n        number -= 90;\n    }\n    if (number >=\
    \ 50) {\n        roman += \"l\";\n        number -= 50;\n    }\n    if (number\
    \ >= 40) {\n        roman += \"xl\";\n        number -= 40;\n    }\n    while\
    \ (number >= 10) {\n        roman += \"x\";\n        number -= 10;\n    }\n  \
    \  if (number >= 9) {\n        roman += \"ix\";\n        number -= 9;\n    }\n\
    \    if (number >= 5) {\n        roman += \"v\";\n        number -= 5;\n    }\n\
    \    if (number >= 4) {\n        roman += \"iv\";\n        number -= 4;\n    }\n\
    \    while (number >= 1) {\n        roman += \"i\";\n        number -= 1;\n  \
    \  }\n    return roman;", "    std::string result;\n    std::vector<std::pair<long,\
    \ std::string>> roman_numerals = {\n        {1000, \"m\"},\n        {900, \"cm\"\
    },\n        {500, \"d\"},\n        {400, \"cd\"},\n        {100, \"c\"},\n   \
    \     {90, \"xc\"},\n        {50, \"l\"},\n        {40, \"xl\"},\n        {10,\
    \ \"x\"},\n        {9, \"ix\"},\n        {5, \"v\"},\n        {4, \"iv\"},\n \
    \       {1, \"i\"}\n    };\n    for (auto roman_numeral : roman_numerals) {\n\
    \        while (number >= roman_numeral.first) {\n            result += roman_numeral.second;\n\
    \            number -= roman_numeral.first;\n        }\n    }\n    return result;",
  "  std::string result;\n  std::vector<std::pair<long, std::string>> roman_numerals\
    \ = {\n      {1000, \"m\"}, {900, \"cm\"}, {500, \"d\"}, {400, \"cd\"}, {100,\
    \ \"c\"},\n      {90, \"xc\"},   {50, \"l\"},   {40, \"xl\"}, {10, \"x\"},   {9,\
    \ \"ix\"},\n      {5, \"v\"},     {4, \"iv\"},   {1, \"i\"}};\n  for (auto roman_numeral\
    \ : roman_numerals) {\n    while (number >= roman_numeral.first) {\n      result\
    \ += roman_numeral.second;\n      number -= roman_numeral.first;\n    }\n  }\n\
    \  return result;", "    std::string result = \"\";\n    std::string roman = \"\
    ivxlcdm\";\n    int i = 0;\n    while (number > 0) {\n        int digit = number\
    \ % 10;\n        if (digit == 9) {\n            result = roman[i] + roman[i +\
    \ 2] + result;\n        } else if (digit == 4) {\n            result = roman[i]\
    \ + roman[i + 1] + result;\n        } else {\n            if (digit >= 5) {\n\
    \                result = roman[i + 1] + result;\n                digit -= 5;\n\
    \            }\n            for (int j = 0; j < digit; j++) {\n              \
    \  result = roman[i] + result;\n            }\n        }\n        number /= 10;\n\
    \        i += 2;\n    }\n    return result;", "    std::string roman;\n    std::string\
    \ roman_numerals[] = {\"m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"l\", \"xl\"\
    , \"x\", \"ix\", \"v\", \"iv\", \"i\"};\n    int decimal_numerals[] = {1000, 900,\
    \ 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1};\n    for (int i = 0; i < 13; i++)\
    \ {\n        while (number >= decimal_numerals[i]) {\n            number -= decimal_numerals[i];\n\
    \            roman += roman_numerals[i];\n        }\n    }\n    return roman;",
  "    std::string result;\n    while (number >= 1000) {\n        result += \"m\"\
    ;\n        number -= 1000;\n    }\n    if (number >= 900) {\n        result +=\
    \ \"cm\";\n        number -= 900;\n    }\n    if (number >= 500) {\n        result\
    \ += \"d\";\n        number -= 500;\n    }\n    if (number >= 400) {\n       \
    \ result += \"cd\";\n        number -= 400;\n    }\n    while (number >= 100)\
    \ {\n        result += \"c\";\n        number -= 100;\n    }\n    if (number >=\
    \ 90) {\n        result += \"xc\";\n        number -= 90;\n    }\n    if (number\
    \ >= 50) {\n        result += \"l\";\n        number -= 50;\n    }\n    if (number\
    \ >= 40) {\n        result += \"xl\";\n        number -= 40;\n    }\n    while\
    \ (number >= 10) {\n        result += \"x\";\n        number -= 10;\n    }\n \
    \   if (number >= 9) {\n        result += \"ix\";\n        number -= 9;\n    }\n\
    \    if (number >= 5) {\n        result += \"v\";\n        number -= 5;\n    }\n\
    \    if (number >= 4) {\n        result += \"iv\";\n        number -= 4;\n   \
    \ }\n    while (number >= 1) {\n        result += \"i\";\n        number -= 1;\n\
    \    }\n    return result;", "    std::string result;\n    std::string roman_numerals[]\
    \ = {\"m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"l\", \"xl\", \"x\", \"ix\"\
    , \"v\", \"iv\", \"i\"};\n    int decimal_numbers[] = {1000, 900, 500, 400, 100,\
    \ 90, 50, 40, 10, 9, 5, 4, 1};\n    for (int i = 0; i < 13; i++) {\n        while\
    \ (number >= decimal_numbers[i]) {\n            number -= decimal_numbers[i];\n\
    \            result += roman_numerals[i];\n        }\n    }\n    return result;"]
stop_tokens:
- "\n}"
