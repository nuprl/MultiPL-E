name: HumanEval_49_modp
language: cpp
prompt: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return 2^n modulo p (be aware\
  \ of numerics).\n// >>> modp(3, 5)\n// 3\n// >>> modp(1101, 101)\n// 2\n// >>> modp(0,\
  \ 101)\n// 1\n// >>> modp(3, 11)\n// 8\n// >>> modp(100, 101)\n// 1\nlong modp(long\
  \ n, long p) {\n"
tests: "}\nint main() {\n    auto candidate = modp;\n    assert(candidate((3), (5))\
  \ == (3));\n    assert(candidate((1101), (101)) == (2));\n    assert(candidate((0),\
  \ (101)) == (1));\n    assert(candidate((3), (11)) == (8));\n    assert(candidate((100),\
  \ (101)) == (1));\n    assert(candidate((30), (5)) == (4));\n    assert(candidate((31),\
  \ (5)) == (3));\n}\n"
completions: ["    if (n == 0) return 1;\n    if (n == 1) return n;\n    long res\
    \ = 1;\n    while (n > 0) {\n        if (n & 1) res = (res * n) % p;\n       \
    \ n = n >> 1;\n        n = (n * n) % p;\n    }\n    return res;", "    assert(p\
    \ > 0);\n    if (n == 0) return 1;\n    if (n % 2 == 0) {\n        long t = modp(n\
    \ / 2, p);\n        return (t * t) % p;\n    }\n    return (modp(n - 1, p) * n)\
    \ % p;", "    if (n == 0) return 1;\n    if (n == 1) return n;\n    long res =\
    \ 1;\n    while (n > 0) {\n        if (n & 1) res = (res * n) % p;\n        n\
    \ = n >> 1;\n        n = (n * n) % p;\n    }\n    return res;", "    if (n ==\
    \ 0) return 1;\n    if (n == 1) return n;\n    long res = 1;\n    while (n > 0)\
    \ {\n        if (n % 2 == 1) {\n            res = (res * n) % p;\n        }\n\
    \        n = n / 2;\n        n = (n * n) % p;\n    }\n    return res;", "    long\
    \ r = 1;\n    while (n > 0) {\n        if (n % 2 == 1) {\n            r = (r *\
    \ 2) % p;\n        }\n        n = n / 2;\n        if (n > 0) {\n            r\
    \ = (r * r) % p;\n        }\n    }\n    return r;", "    if (n == 0) {\n     \
    \   return 1;\n    }\n    if (n % 2 == 0) {\n        long tmp = modp(n / 2, p);\n\
    \        return (tmp * tmp) % p;\n    }\n    return (modp(n - 1, p) * n) % p;",
  "    assert(p > 0);\n    if (n == 0) return 1;\n    if (n == 1) return n % p;\n\
    \    long res = 1;\n    while (n > 0) {\n        if (n & 1) {\n            res\
    \ = (res * n) % p;\n        }\n        n = n >> 1;\n        n = (n * n) % p;\n\
    \    }\n    return res;", "    assert(p > 0);\n    if (n == 0) return 1;\n   \
    \ if (n % 2 == 0) {\n        long t = modp(n / 2, p);\n        return (t * t)\
    \ % p;\n    }\n    return (modp(n - 1, p) * n) % p;", "    if (n == 0) return\
    \ 1;\n    if (n % 2 == 0) {\n        long t = modp(n/2, p);\n        return (t*t)\
    \ % p;\n    }\n    else {\n        return (modp(n-1, p) * n) % p;\n    }", "\t\
    if (n == 0) return 1;\n\tif (n % 2 == 0) {\n\t\tlong t = modp(n / 2, p);\n\t\t\
    return (t * t) % p;\n\t}\n\telse return (modp(n - 1, p) * 2) % p;", "    if (n\
    \ == 0) {\n        return 1;\n    }\n    if (n % 2 == 0) {\n        long half\
    \ = modp(n / 2, p);\n        return (half * half) % p;\n    }\n    return (modp(n\
    \ - 1, p) * n) % p;", "    assert(p > 0);\n    if (n == 0) return 1;\n    if (n\
    \ % 2 == 0) {\n        long t = modp(n / 2, p);\n        return (t * t) % p;\n\
    \    }\n    return (modp(n - 1, p) * n) % p;", "    if (n == 0) return 1;\n  \
    \  if (n == 1) return n;\n    long res = 1;\n    while (n > 0) {\n        if (n\
    \ & 1) {\n            res = (res * n) % p;\n        }\n        n = n >> 1;\n \
    \       n = (n * n) % p;\n    }\n    return res;", "    if (n == 0) return 1;\n\
    \    if (n % 2 == 0) {\n        long t = modp(n/2, p);\n        return (t*t) %\
    \ p;\n    }\n    return (modp(n-1, p) * n) % p;", "    assert(p > 0);\n    if\
    \ (n == 0) return 1;\n    if (n % 2 == 0) {\n        long y = modp(n/2, p);\n\
    \        return (y*y) % p;\n    } else {\n        return (n * modp(n-1, p)) %\
    \ p;\n    }", "    if (n == 0) return 1;\n    if (n % 2 == 0) {\n        long\
    \ res = modp(n/2, p);\n        return (res * res) % p;\n    }\n    return (modp(n-1,\
    \ p) * n) % p;", "    if (n == 0) return 1;\n    long res = modp(n/2, p);\n  \
    \  res = (res * res) % p;\n    if (n % 2 == 1) {\n        res = (res * 2) % p;\n\
    \    }\n    return res;", "    if (n == 0) return 1;\n    if (n % 2 == 0) {\n\
    \        long r = modp(n / 2, p);\n        return (r * r) % p;\n    } else {\n\
    \        return (modp(n - 1, p) * n) % p;\n    }", "    if (n == 0) return 1;\n\
    \    if (n % 2 == 0) {\n        long t = modp(n/2, p);\n        return (t*t) %\
    \ p;\n    }\n    return (modp(n-1, p) * n) % p;", "    if (n == 0) return 1;\n\
    \    long res = modp(n/2, p);\n    res = (res * res) % p;\n    if (n % 2 == 1)\
    \ res = (res * 2) % p;\n    return res;", "    if (n == 0) return 1;\n    if (n\
    \ % 2 == 0) {\n        long t = modp(n/2, p);\n        return (t*t) % p;\n   \
    \ }\n    return (modp(n-1, p) * n) % p;", "    if (n == 0) return 1;\n    if (n\
    \ % 2 == 0) {\n        long t = modp(n/2, p);\n        return (t*t) % p;\n   \
    \ }\n    return (modp(n-1, p) * n) % p;", "    if (n == 0) return 1;\n    if (n\
    \ % 2 == 0) {\n        long r = modp(n / 2, p);\n        return (r * r) % p;\n\
    \    }\n    return (modp(n - 1, p) * n) % p;", "    if (n == 0) return 1;\n  \
    \  if (n % 2 == 0) {\n        long r = modp(n / 2, p);\n        return (r * r)\
    \ % p;\n    }\n    return (modp(n - 1, p) * n) % p;", "    if (n == 0) return\
    \ 1;\n    if (n % 2 == 0) {\n        long t = modp(n/2, p);\n        return (t*t)\
    \ % p;\n    }\n    return (modp(n-1, p) * n) % p;", "    if (n == 0) return 1;\n\
    \    if (n % 2 == 0) {\n        long x = modp(n/2, p);\n        return (x * x)\
    \ % p;\n    } else {\n        return (n * modp(n-1, p)) % p;\n    }", "    if\
    \ (n == 0) return 1;\n    long res = modp(n/2, p);\n    res = (res * res) % p;\n\
    \    if (n % 2 == 1) res = (res * 2) % p;\n    return res;", "    if (n == 0)\
    \ {\n        return 1;\n    }\n    long res = modp(n / 2, p);\n    res = (res\
    \ * res) % p;\n    if (n % 2 == 1) {\n        res = (res * 2) % p;\n    }\n  \
    \  return res;", "  long res = 1;\n  while (n > 0) {\n    if (n & 1) {\n     \
    \ res = (res * n) % p;\n    }\n    n = n >> 1;\n    n = (n * n) % p;\n  }\n  return\
    \ res;", "    if (n == 0) return 1;\n    if (n % 2 == 0) {\n        long t = modp(n/2,\
    \ p);\n        return (t*t) % p;\n    }\n    return (modp(n-1, p) * n) % p;",
  "    if (n == 0) return 1;\n    if (n == 1) return n;\n    if (n % 2 == 0) {\n \
    \       long r = modp(n/2, p);\n        return (r*r) % p;\n    }\n    else {\n\
    \        long r = modp(n/2, p);\n        return (r*r*n) % p;\n    }", "    if\
    \ (n == 0) return 1;\n    if (n % 2 == 0) {\n        long t = modp(n/2, p);\n\
    \        return (t*t) % p;\n    }\n    return (modp(n-1, p) * n) % p;", "    if\
    \ (n == 0) return 1;\n    if (n % 2 == 0) {\n        long t = modp(n/2, p);\n\
    \        return (t*t) % p;\n    }\n    return (modp(n-1, p) * n) % p;", "    if\
    \ (n == 0) {\n        return 1;\n    }\n    if (n % 2 == 0) {\n        long t\
    \ = modp(n / 2, p);\n        return (t * t) % p;\n    }\n    return (modp(n -\
    \ 1, p) * n) % p;", "    if (n == 0) return 1;\n    if (n % 2 == 0) {\n      \
    \  long t = modp(n/2, p);\n        return (t*t) % p;\n    }\n    return (modp(n-1,\
    \ p) * n) % p;", "  assert(p > 0);\n  if (n == 0) return 1;\n  if (n % 2 == 0)\
    \ {\n    long t = modp(n / 2, p);\n    return (t * t) % p;\n  } else {\n    return\
    \ (modp(n - 1, p) * n) % p;\n  }", "    if (n == 0) return 1;\n    if (n % 2 ==\
    \ 0) {\n        long t = modp(n/2, p);\n        return (t*t) % p;\n    }\n   \
    \ return (modp(n-1, p) * n) % p;", "    if (n == 0) return 1;\n    if (n == 1)\
    \ return n % p;\n    long res = modp(n/2, p);\n    res = (res * res) % p;\n  \
    \  if (n % 2 == 1) {\n        res = (res * n) % p;\n    }\n    return res;", " \
    \   if (n == 0) return 1;\n    if (n % 2 == 0) {\n        long t = modp(n/2, p);\n\
    \        return (t*t) % p;\n    }\n    return (modp(n-1, p) * n) % p;", "    if\
    \ (n == 0) return 1;\n    if (n == 1) return n % p;\n    long res = 1;\n    while\
    \ (n > 0) {\n        if (n & 1) res = (res * n) % p;\n        n = n >> 1;\n  \
    \      n = (n * n) % p;\n    }\n    return res;", "    if (n == 0) return 1;\n\
    \    if (n % 2 == 0) {\n        long t = modp(n/2, p);\n        return (t*t) %\
    \ p;\n    }\n    return (modp(n-1, p) * n) % p;", "    if (n == 0) return 1;\n\
    \    long res = modp(n/2, p);\n    res = (res * res) % p;\n    if (n % 2 == 1)\
    \ res = (res * 2) % p;\n    return res;", "    if (n == 0) {\n        return 1;\n\
    \    }\n    if (n % 2 == 0) {\n        long r = modp(n / 2, p);\n        return\
    \ (r * r) % p;\n    }\n    return (modp(n - 1, p) * n) % p;", "    if (n == 0)\
    \ return 1;\n    if (n % 2 == 0) {\n        long t = modp(n/2, p);\n        return\
    \ (t*t) % p;\n    }\n    return (modp(n-1, p) * n) % p;", "    if (n == 0) return\
    \ 1;\n    if (n % 2 == 0) {\n        long x = modp(n/2, p);\n        return (x\
    \ * x) % p;\n    } else {\n        return (modp(n-1, p) * n) % p;\n    }", " \
    \   long res = 1;\n    for (int i = 0; i < n; i++) {\n        res = (res * 2)\
    \ % p;\n    }\n    return res;", "  assert(p > 0);\n  if (n < 0)\n    n = (n %\
    \ p) + p;\n  if (n == 0)\n    return 1;\n  long res = 1;\n  while (n > 0) {\n\
    \    if (n & 1)\n      res = (res * 2) % p;\n    n >>= 1;\n  }\n  return res;",
  "    if (n == 0) return 1;\n    if (n % 2 == 0) {\n        long t = modp(n/2, p);\n\
    \        return (t*t) % p;\n    }\n    return (modp(n-1, p) * n) % p;", "    if\
    \ (n == 0) return 1;\n    if (n % 2 == 0) {\n        long t = modp(n/2, p);\n\
    \        return (t*t) % p;\n    }\n    return (modp(n-1, p) * n) % p;", "    assert(p\
    \ > 0);\n    if (n == 0) return 1;\n    if (n % 2 == 0) {\n        long t = modp(n\
    \ / 2, p);\n        return (t * t) % p;\n    }\n    return (modp(n - 1, p) * n)\
    \ % p;", "    assert(p > 0);\n    if (n == 0) return 1;\n    if (n % 2 == 0) {\n\
    \        long t = modp(n / 2, p);\n        return (t * t) % p;\n    }\n    return\
    \ (modp(n - 1, p) * n) % p;", "    if (n == 0) return 1;\n    if (n == 1) return\
    \ n % p;\n    long half = modp(n / 2, p);\n    long half_sq = (half * half) %\
    \ p;\n    if (n % 2 == 0) {\n        return half_sq;\n    } else {\n        return\
    \ (half_sq * n) % p;\n    }", "    if (n == 0) return 1;\n    if (n == 1) return\
    \ n;\n    long res = 1;\n    while (n > 0) {\n        if (n % 2 == 1) {\n    \
    \        res = (res * n) % p;\n        }\n        n = n / 2;\n        n = (n *\
    \ n) % p;\n    }\n    return res;", "    if (n == 0) return 1;\n    if (n % 2\
    \ == 0) {\n        long t = modp(n/2, p);\n        return (t*t) % p;\n    }\n\
    \    return (modp(n-1, p) * n) % p;", "    assert(p > 0);\n    if (n == 0) return\
    \ 1;\n    long res = modp(n/2, p);\n    res = (res * res) % p;\n    if (n % 2\
    \ == 1) res = (res * 2) % p;\n    return res;", "    if (n == 0) return 1;\n \
    \   if (n % 2 == 0) {\n        long res = modp(n/2, p);\n        return (res *\
    \ res) % p;\n    }\n    return (modp(n-1, p) * n) % p;", "    assert(p > 0);\n\
    \    if (n == 0) return 1;\n    if (n == 1) return n % p;\n    if (n % 2 == 0)\
    \ {\n        long t = modp(n / 2, p);\n        return (t * t) % p;\n    }\n  \
    \  return (n * modp(n - 1, p)) % p;", "    if (n == 0) return 1;\n    if (n ==\
    \ 1) return n % p;\n    long res = modp(n / 2, p);\n    res = (res * res) % p;\n\
    \    if (n % 2) res = (res * n) % p;\n    return res;", "    if (n == 0) return\
    \ 1;\n    if (n == 1) return n % p;\n    long res = 1;\n    while (n > 0) {\n\
    \        if (n & 1) res = (res * n) % p;\n        n = n >> 1;\n        n = (n\
    \ * n) % p;\n    }\n    return res;", "    long res = 1;\n    while (n > 0) {\n\
    \        if (n & 1)\n            res = (res * 2) % p;\n        n >>= 1;\n    }\n\
    \    return res;", "    if (n == 0) return 1;\n    if (n % 2 == 0) {\n       \
    \ long t = modp(n/2, p);\n        return (t*t) % p;\n    }\n    return (modp(n-1,\
    \ p) * n) % p;", "    if (n == 0) return 1;\n    if (n == 1) return n % p;\n \
    \   long long res = modp(n/2, p);\n    res = (res * res) % p;\n    if (n % 2 ==\
    \ 1) res = (res * n) % p;\n    return res;", "    if (n == 0) return 1;\n    if\
    \ (n == 1) return n;\n    long res = 1;\n    while (n > 0) {\n        if (n &\
    \ 1) res = (res * n) % p;\n        n = n >> 1;\n        n = (n * n) % p;\n   \
    \ }\n    return res;", "    if (n == 0) return 1;\n    if (n % 2 == 0) {\n   \
    \     long t = modp(n/2, p);\n        return (t*t) % p;\n    }\n    return (modp(n-1,\
    \ p) * n) % p;", "    if (n == 0) return 1;\n    long res = modp(n/2, p);\n  \
    \  res = (res * res) % p;\n    if (n % 2 == 1) res = (res * 2) % p;\n    return\
    \ res;", "    if (n == 0) return 1;\n    long res = modp(n/2, p);\n    res = (res\
    \ * res) % p;\n    if (n % 2 == 1) res = (res * 2) % p;\n    return res;", " \
    \   assert(p > 0);\n    if (n == 0) return 1;\n    if (n % 2 == 0) {\n       \
    \ long t = modp(n / 2, p);\n        return (t * t) % p;\n    }\n    return (modp(n\
    \ - 1, p) * n) % p;", "    if (n == 0) return 1;\n    if (n % 2 == 0) {\n    \
    \    long t = modp(n/2, p);\n        return (t*t) % p;\n    }\n    return (modp(n-1,\
    \ p) * n) % p;", "    if (n == 0) return 1;\n    if (n % 2 == 0) {\n        long\
    \ x = modp(n/2, p);\n        return (x * x) % p;\n    } else {\n        return\
    \ (modp(n-1, p) * n) % p;\n    }", "    assert(n >= 0);\n    assert(p > 0);\n\
    \    if (n == 0) return 1;\n    if (n == 1) return n % p;\n    long half = modp(n\
    \ / 2, p);\n    long result = (half * half) % p;\n    if (n % 2 == 1) result =\
    \ (result * n) % p;\n    return result;", "    if (n == 0) return 1;\n    if (n\
    \ == 1) return n;\n    long res = 1;\n    while (n > 0) {\n        if (n % 2 ==\
    \ 1) {\n            res = (res * n) % p;\n        }\n        n = n / 2;\n    \
    \    n = (n * n) % p;\n    }\n    return res;", "  if (n == 0) return 1;\n  long\
    \ r = modp(n/2, p);\n  r = (r*r) % p;\n  if (n % 2 == 1) r = (r*2) % p;\n  return\
    \ r;", "    if (n == 0) return 1;\n    if (n % 2 == 0) {\n        long t = modp(n/2,\
    \ p);\n        return (t*t) % p;\n    }\n    return (modp(n-1, p) * n) % p;",
  "    long r = 1;\n    while (n) {\n        if (n & 1) {\n            r = (r * 2)\
    \ % p;\n        }\n        n >>= 1;\n    }\n    return r;", "    if (n == 0) return\
    \ 1;\n    if (n % 2 == 0) {\n        long t = modp(n/2, p);\n        return (t*t)\
    \ % p;\n    }\n    return (modp(n-1, p) * n) % p;", "    if (n == 0) return 1;\n\
    \    long res = modp(n/2, p);\n    res = (res * res) % p;\n    if (n % 2 == 1)\
    \ res = (res * 2) % p;\n    return res;", "    assert(p > 0);\n    if (n == 0)\
    \ return 1;\n    if (n % 2 == 0) {\n        long t = modp(n / 2, p);\n       \
    \ return (t * t) % p;\n    }\n    return (modp(n - 1, p) * n) % p;", "    if (n\
    \ == 0) return 1;\n    if (n % 2 == 0) {\n        long t = modp(n/2, p);\n   \
    \     return (t*t) % p;\n    }\n    return (modp(n-1, p) * n) % p;", "    if (n\
    \ == 0) return 1;\n    long res = modp(n / 2, p);\n    res = (res * res) % p;\n\
    \    if (n % 2 == 1) res = (res * 2) % p;\n    return res;", "    if (n == 0)\
    \ return 1;\n    if (n % 2 == 0) {\n        long t = modp(n/2, p);\n        return\
    \ (t*t) % p;\n    }\n    return (modp(n-1, p) * n) % p;", "    if (n == 0) return\
    \ 1;\n    if (n == 1) return n % p;\n    long r = modp(n/2, p);\n    r = (r *\
    \ r) % p;\n    if (n % 2 == 1) r = (r * n) % p;\n    return r;", "    assert(p\
    \ > 0);\n    if (n == 0) return 1;\n    long res = modp(n/2, p);\n    res = (res\
    \ * res) % p;\n    if (n % 2 == 1) res = (res * 2) % p;\n    return res;", " \
    \   assert(p > 0);\n    if (n == 0) return 1;\n    if (n % 2 == 0) {\n       \
    \ long m = modp(n / 2, p);\n        return (m * m) % p;\n    } else {\n      \
    \  return (modp(n - 1, p) * n) % p;\n    }", "    assert(p > 0);\n    if (n ==\
    \ 0) return 1;\n    if (n % 2 == 0) {\n        long t = modp(n / 2, p);\n    \
    \    return (t * t) % p;\n    }\n    return (modp(n - 1, p) * n) % p;", "    if\
    \ (n == 0) return 1;\n    if (n % 2 == 0) {\n        long t = modp(n/2, p);\n\
    \        return (t*t) % p;\n    }\n    return (modp(n-1, p) * n) % p;", "    long\
    \ res = 1;\n    while (n > 0) {\n        if (n % 2 == 1) {\n            res =\
    \ (res * n) % p;\n        }\n        n = n >> 1;\n        n = (n * n) % p;\n \
    \   }\n    return res;", "    if (n == 0) return 1;\n    long res = modp(n/2,\
    \ p);\n    res = (res * res) % p;\n    if (n % 2 == 1) res = (res * 2) % p;\n\
    \    return res;", "    assert(p > 0);\n    if (n == 0) return 1;\n    if (n %\
    \ 2 == 0) {\n        long y = modp(n/2, p);\n        return (y*y) % p;\n    }\
    \ else {\n        return (n % p) * modp(n-1, p) % p;\n    }", "    if (n == 0)\
    \ return 1;\n    if (n % 2 == 0) {\n        long t = modp(n/2, p);\n        return\
    \ (t*t) % p;\n    }\n    return (modp(n-1, p) * n) % p;", "    if (n == 0) return\
    \ 1;\n    if (n % 2 == 0) {\n        long t = modp(n/2, p);\n        return (t*t)\
    \ % p;\n    }\n    return (modp(n-1, p) * n) % p;", "    if (n == 0) return 1;\n\
    \    if (n % 2 == 0) {\n        long t = modp(n/2, p);\n        return (t*t) %\
    \ p;\n    }\n    return (modp(n-1, p) * n) % p;", "    if (n == 0) return 1;\n\
    \    long res = modp(n/2, p);\n    if (n % 2 == 0) {\n        return (res * res)\
    \ % p;\n    } else {\n        return (res * res * 2) % p;\n    }", "    if (n\
    \ == 0) return 1;\n    if (n % 2 == 0) {\n        long t = modp(n/2, p);\n   \
    \     return (t*t) % p;\n    }\n    return (modp(n-1, p) * n) % p;", "    assert(p\
    \ > 0);\n    if (n == 0) return 1;\n    if (n % 2 == 0) {\n        long t = modp(n\
    \ / 2, p);\n        return (t * t) % p;\n    }\n    else {\n        return (modp(n\
    \ - 1, p) * n) % p;\n    }", "    if (n == 0) return 1;\n    if (n == 1) return\
    \ n % p;\n    long x = modp(n/2, p);\n    x = (x * x) % p;\n    if (n % 2 == 1)\
    \ x = (x * n) % p;\n    return x;", "    if (n == 0) return 1;\n    if (n == 1)\
    \ return n;\n    long tmp = modp(n/2, p);\n    if (n % 2 == 0) return (tmp * tmp)\
    \ % p;\n    else return (tmp * tmp * n) % p;", "    long res = 1;\n    while (n\
    \ > 0) {\n        if (n & 1) {\n            res = (res * n) % p;\n        }\n\
    \        n = n >> 1;\n        n = (n * n) % p;\n    }\n    return res;", "   \
    \ if (n == 0) return 1;\n    if (n % 2 == 0) {\n        long t = modp(n/2, p);\n\
    \        return (t*t) % p;\n    }\n    return (modp(n-1, p) * n) % p;", "    if\
    \ (n == 0) {\n        return 1;\n    }\n    long res = modp(n / 2, p);\n    res\
    \ = (res * res) % p;\n    if (n % 2 == 1) {\n        res = (res * 2) % p;\n  \
    \  }\n    return res;", "    assert(p > 0);\n    assert(n >= 0);\n    if (n ==\
    \ 0) return 1;\n    if (n % 2 == 0) {\n        long t = modp(n / 2, p);\n    \
    \    return (t * t) % p;\n    } else {\n        return (modp(n - 1, p) * 2) %\
    \ p;\n    }", "    if (n == 0) return 1;\n    long res = modp(n/2, p);\n    res\
    \ = (res * res) % p;\n    if (n % 2 == 1) res = (res * 2) % p;\n    return res;",
  "    if (n == 0) return 1;\n    if (n % 2 == 0) {\n        long t = modp(n/2, p);\n\
    \        return (t*t) % p;\n    }\n    return (modp(n-1, p) * n) % p;", "    if\
    \ (n == 0) return 1;\n    if (n % 2 == 0) {\n        long t = modp(n/2, p);\n\
    \        return (t*t) % p;\n    }\n    return (modp(n-1, p) * n) % p;", "    if\
    \ (n == 0) {\n        return 1;\n    }\n    long res = modp(n / 2, p);\n    res\
    \ = (res * res) % p;\n    if (n % 2 == 1) {\n        res = (res * 2) % p;\n  \
    \  }\n    return res;", "    if (n == 0) return 1;\n    if (n % 2 == 0) {\n  \
    \      long r = modp(n / 2, p);\n        return (r * r) % p;\n    } else {\n \
    \       return (modp(n - 1, p) * n) % p;\n    }", "    if (n == 0) return 1;\n\
    \    if (n == 1) return n;\n    long half = modp(n/2, p);\n    long result = (half\
    \ * half) % p;\n    if (n % 2 == 1) result = (result * n) % p;\n    return result;",
  "  assert(p > 0);\n  if (n < 0) {\n    n = (n % p) + p;\n  }\n  return n % p;",
  "    if (n == 0) {\n        return 1;\n    }\n    if (n % 2 == 0) {\n        long\
    \ tmp = modp(n / 2, p);\n        return (tmp * tmp) % p;\n    }\n    return (modp(n\
    \ - 1, p) * n) % p;", "    long res = 1;\n    while (n > 0) {\n        if (n &\
    \ 1)\n            res = (res * 2) % p;\n        n >>= 1;\n    }\n    return res;",
  "    if (n == 0) return 1;\n    if (n % 2 == 0) {\n        long tmp = modp(n/2,\
    \ p);\n        return (tmp * tmp) % p;\n    } else {\n        return (modp(n-1,\
    \ p) * n) % p;\n    }", "    assert(p > 0);\n    if (n == 0) return 1;\n    if\
    \ (n % 2 == 0) {\n        long t = modp(n / 2, p);\n        return (t * t) % p;\n\
    \    }\n    return (modp(n - 1, p) * n) % p;", "    if (n == 0) return 1;\n  \
    \  if (n == 1) return n;\n    long res = modp(n/2, p);\n    res = (res * res)\
    \ % p;\n    if (n % 2 == 1) res = (res * n) % p;\n    return res;", "    if (n\
    \ == 0) return 1;\n    if (n == 1) return n;\n    long res = modp(n/2, p);\n \
    \   res = (res * res) % p;\n    if (n % 2 == 1) res = (res * n) % p;\n    return\
    \ res;", "    if (n == 0) {\n        return 1;\n    }\n    if (n % 2 == 0) {\n\
    \        long t = modp(n / 2, p);\n        return (t * t) % p;\n    }\n    return\
    \ (modp(n - 1, p) * n) % p;", "    if (n == 0) return 1;\n    if (n == 1) return\
    \ n;\n    long res = 1;\n    while (n > 0) {\n        if (n % 2 == 1) {\n    \
    \        res = (res * n) % p;\n        }\n        n = n / 2;\n        n = (n *\
    \ n) % p;\n    }\n    return res;", "    if (n == 0) return 1;\n    if (n % 2\
    \ == 0) {\n        long t = modp(n/2, p);\n        return (t*t) % p;\n    }\n\
    \    return (modp(n-1, p) * n) % p;", "    if (n == 0) return 1;\n    if (n %\
    \ 2 == 0) {\n        long t = modp(n/2, p);\n        return (t*t) % p;\n    }\n\
    \    return (modp(n-1, p) * n) % p;", "    assert(p > 0);\n    if (n == 0) return\
    \ 1;\n    if (n == 1) return n;\n    if (n % 2 == 0) {\n        long x = modp(n/2,\
    \ p);\n        return (x * x) % p;\n    } else {\n        return (n * modp(n-1,\
    \ p)) % p;\n    }", "    if (n == 0) return 1;\n    long res = modp(n / 2, p);\n\
    \    res = (res * res) % p;\n    if (n % 2 == 1) res = (res * 2) % p;\n    return\
    \ res;", "    if (n == 0) return 1;\n    if (n % 2 == 0) {\n        long res =\
    \ modp(n/2, p);\n        return (res * res) % p;\n    }\n    return (modp(n-1,\
    \ p) * n) % p;", "    long res = 1;\n    while (n) {\n        if (n & 1) {\n \
    \           res = (res * 2) % p;\n        }\n        n >>= 1;\n        if (n)\
    \ {\n            res = (res * res) % p;\n        }\n    }\n    return res;", " \
    \   if (n == 0) return 1;\n    if (n == 1) return n;\n    long res = 1;\n    while\
    \ (n > 0) {\n        if (n % 2 == 1) {\n            res = (res * n) % p;\n   \
    \     }\n        n = n / 2;\n        n = (n * n) % p;\n    }\n    return res;",
  "    long res = 1;\n    while (n > 0) {\n        if (n & 1) {\n            res =\
    \ (res * 2) % p;\n        }\n        n >>= 1;\n    }\n    return res;", "    if\
    \ (n == 0) return 1;\n    if (n % 2 == 0) {\n        long t = modp(n/2, p);\n\
    \        return (t*t) % p;\n    }\n    return (modp(n-1, p) * n) % p;", "    long\
    \ res = 1;\n    while (n > 0) {\n        if (n & 1) {\n            res = (res\
    \ * n) % p;\n        }\n        n = n >> 1;\n        n = (n * n) % p;\n    }\n\
    \    return res;", "    if (n == 0) return 1;\n    if (n % 2 == 0) {\n       \
    \ long t = modp(n/2, p);\n        return (t*t) % p;\n    }\n    return (modp(n-1,\
    \ p) * n) % p;", "    long res = 1;\n    for (int i = 0; i < n; i++) {\n     \
    \   res = (res * 2) % p;\n    }\n    return res;", "    if (n == 0) return 1;\n\
    \    if (n % 2 == 0) {\n        long t = modp(n/2, p);\n        return (t*t) %\
    \ p;\n    }\n    return (modp(n-1, p) * n) % p;", "    if (n == 0) return 1;\n\
    \    if (n % 2 == 0) {\n        long t = modp(n/2, p);\n        return (t*t) %\
    \ p;\n    }\n    return (modp(n-1, p) * n) % p;", "    if (n == 0) return 1;\n\
    \    long res = modp(n / 2, p);\n    res = (res * res) % p;\n    if (n % 2 ==\
    \ 1) res = (res * 2) % p;\n    return res;", "    if (n == 0) return 1;\n    if\
    \ (n == 1) return n % p;\n    long res = modp(n/2, p);\n    res = (res * res)\
    \ % p;\n    if (n % 2 == 1) res = (res * 2) % p;\n    return res;", "    assert(p\
    \ > 0);\n    if (n == 0) return 1;\n    if (n % 2 == 0) {\n        long t = modp(n\
    \ / 2, p);\n        return (t * t) % p;\n    }\n    return (modp(n - 1, p) * n)\
    \ % p;", "    if (n == 0) return 1;\n    if (n == 1) return n;\n    long res =\
    \ 1;\n    while (n > 0) {\n        if (n % 2 == 1) {\n            res = (res *\
    \ 2) % p;\n        }\n        n /= 2;\n        if (n > 0) {\n            res =\
    \ (res * res) % p;\n        }\n    }\n    return res;", "    if (n == 0) return\
    \ 1;\n    if (n % 2 == 0) {\n        long t = modp(n/2, p);\n        return (t*t)\
    \ % p;\n    }\n    return (modp(n-1, p) * n) % p;", "    if (n == 0) return 1;\n\
    \    long res = modp(n / 2, p);\n    res = (res * res) % p;\n    if (n % 2 ==\
    \ 1) res = (res * 2) % p;\n    return res;", "    if (n == 0) return 1;\n    if\
    \ (n == 1) return n % p;\n    long res = modp(n / 2, p);\n    res = (res * res)\
    \ % p;\n    if (n % 2 == 1) res = (res * n) % p;\n    return res;", "    long\
    \ r = 1;\n    while (n > 0) {\n        if (n % 2 == 1) {\n            r = (r *\
    \ 2) % p;\n        }\n        n = n / 2;\n        if (n > 0) {\n            r\
    \ = (r * r) % p;\n        }\n    }\n    return r;", "    if (n == 0) return 1;\n\
    \    if (n % 2 == 0) {\n        long t = modp(n/2, p);\n        return (t*t) %\
    \ p;\n    }\n    return (modp(n-1, p) * n) % p;", "    if (n == 0) return 1;\n\
    \    if (n == 1) return n % p;\n    long res = 1;\n    while (n > 0) {\n     \
    \   if (n & 1) res = (res * n) % p;\n        n = n >> 1;\n        n = (n * n)\
    \ % p;\n    }\n    return res;", "    assert(p > 0);\n    if (n == 0) return 1;\n\
    \    if (n % 2 == 0) {\n        long t = modp(n / 2, p);\n        return (t *\
    \ t) % p;\n    }\n    return (modp(n - 1, p) * n) % p;", "    if (n == 0) return\
    \ 1;\n    if (n % 2 == 0) {\n        long t = modp(n/2, p);\n        return (t*t)\
    \ % p;\n    }\n    return (modp(n-1, p) * n) % p;", "    assert(p > 0);\n    if\
    \ (n == 0) return 1;\n    if (n % 2 == 0) {\n        long y = modp(n/2, p);\n\
    \        return (y*y) % p;\n    } else {\n        return (n*modp(n-1, p)) % p;\n\
    \    }", "    if (n == 0) return 1;\n    if (n % 2 == 0) {\n        long t = modp(n/2,\
    \ p);\n        return (t*t) % p;\n    }\n    return (modp(n-1, p) * n) % p;",
  "    if (n == 0) return 1;\n    if (n % 2 == 0) {\n        long t = modp(n/2, p);\n\
    \        return (t*t) % p;\n    }\n    return (modp(n-1, p) * n) % p;", "    if\
    \ (n == 0) return 1;\n    if (n % 2 == 0) {\n        long t = modp(n/2, p);\n\
    \        return (t*t) % p;\n    }\n    return (modp(n-1, p) * n) % p;", "    if\
    \ (n == 0) return 1;\n    long res = modp(n / 2, p);\n    res = (res * res) %\
    \ p;\n    if (n % 2 == 1) res = (res * 2) % p;\n    return res;", "    assert(p\
    \ > 0);\n    if (n == 0) return 1;\n    if (n % 2 == 0) {\n        long t = modp(n\
    \ / 2, p);\n        return (t * t) % p;\n    }\n    return (modp(n - 1, p) * n)\
    \ % p;", "    assert(n >= 0);\n    assert(p > 0);\n    if (n == 0) {\n       \
    \ return 1;\n    }\n    long half = modp(n / 2, p);\n    long result = half *\
    \ half % p;\n    if (n % 2 == 1) {\n        result = result * 2 % p;\n    }\n\
    \    return result;", "    if (n == 0) return 1;\n    if (n % 2 == 0) {\n    \
    \    long r = modp(n / 2, p);\n        return (r * r) % p;\n    }\n    return\
    \ (modp(n - 1, p) * n) % p;", "    assert(p > 0);\n    if (n == 0) return 1;\n\
    \    if (n % 2 == 0) {\n        long t = modp(n / 2, p);\n        return (t *\
    \ t) % p;\n    }\n    return (modp(n - 1, p) * n) % p;", "    if (n == 0) return\
    \ 1;\n    long res = modp(n / 2, p);\n    res = (res * res) % p;\n    if (n %\
    \ 2 == 1) res = (res * 2) % p;\n    return res;", "    if (n == 0) return 1;\n\
    \    if (n % 2 == 0) {\n        long t = modp(n/2, p);\n        return (t*t) %\
    \ p;\n    }\n    return (modp(n-1, p) * n) % p;", "  assert(p > 0);\n  if (n ==\
    \ 0) return 1;\n  if (n % 2 == 0) {\n    long t = modp(n / 2, p);\n    return\
    \ (t * t) % p;\n  } else {\n    return (modp(n - 1, p) * n) % p;\n  }", "    if\
    \ (n == 0) return 1;\n    if (n % 2 == 0) {\n        long t = modp(n/2, p);\n\
    \        return (t*t) % p;\n    }\n    return (modp(n-1, p) * n) % p;", "    if\
    \ (n == 0) return 1;\n    if (n % 2 == 0) {\n        long t = modp(n/2, p);\n\
    \        return (t*t) % p;\n    }\n    return (modp(n-1, p) * n) % p;", "    if\
    \ (n == 0) return 1;\n    if (n == 1) return n % p;\n    long res = 1;\n    while\
    \ (n > 0) {\n        if (n & 1) res = (res * n) % p;\n        n = n >> 1;\n  \
    \      n = (n * n) % p;\n    }\n    return res;", "    if (n == 0) return 1;\n\
    \    if (n % 2 == 0) {\n        long t = modp(n/2, p);\n        return (t*t) %\
    \ p;\n    }\n    return (modp(n-1, p) * n) % p;", "    if (n == 0) return 1;\n\
    \    long ans = modp(n/2, p);\n    ans = (ans * ans) % p;\n    if (n % 2 == 1)\
    \ ans = (ans * 2) % p;\n    return ans;", "    if (n == 0) return 1;\n    if (n\
    \ % 2 == 0) {\n        long r = modp(n / 2, p);\n        return (r * r) % p;\n\
    \    }\n    return (modp(n - 1, p) * n) % p;", "    if (n == 0) return 1;\n  \
    \  long r = modp(n >> 1, p);\n    r = (r * r) % p;\n    if (n & 1) r = (r * 2)\
    \ % p;\n    return r;", "    assert(p > 0);\n    assert(n >= 0);\n    if (n ==\
    \ 0) return 1;\n    long res = modp(n/2, p);\n    res = (res * res) % p;\n   \
    \ if (n % 2 == 1) res = (res * 2) % p;\n    return res;", "    if (n == 0) return\
    \ 1;\n    if (n == 1) return n;\n    long res = 1;\n    while (n > 0) {\n    \
    \    if (n & 1) res = (res * n) % p;\n        n = n >> 1;\n        n = (n * n)\
    \ % p;\n    }\n    return res;", "    if (n == 0) return 1;\n    if (n % 2 ==\
    \ 0) {\n        long t = modp(n/2, p);\n        return (t*t) % p;\n    }\n   \
    \ return (modp(n-1, p) * n) % p;", "    assert(p > 0);\n    if (n == 0) return\
    \ 1;\n    if (n % 2 == 0) {\n        long t = modp(n / 2, p);\n        return\
    \ (t * t) % p;\n    }\n    else {\n        return (modp(n - 1, p) * n) % p;\n\
    \    }", "    assert(p > 0);\n    if (n == 0) return 1;\n    if (n % 2 == 0) {\n\
    \        long t = modp(n / 2, p);\n        return (t * t) % p;\n    }\n    return\
    \ (modp(n - 1, p) * n) % p;", "\tif (n == 0) return 1;\n\tif (n == 1) return n;\n\
    \tlong res = modp(n / 2, p);\n\tres = (res * res) % p;\n\tif (n % 2 == 1) res\
    \ = (res * n) % p;\n\treturn res;", "    assert(p > 0);\n    if (n == 0) return\
    \ 1;\n    if (n % 2 == 0) {\n        long t = modp(n / 2, p);\n        return\
    \ (t * t) % p;\n    }\n    return (modp(n - 1, p) * n) % p;", "    if (n == 0)\
    \ return 1;\n    if (n % 2 == 0) {\n        long t = modp(n/2, p);\n        return\
    \ (t*t) % p;\n    }\n    return (modp(n-1, p) * n) % p;", "    if (n == 0) return\
    \ 1;\n    if (n % 2 == 0) {\n        long t = modp(n/2, p);\n        return (t*t)\
    \ % p;\n    }\n    return (modp(n-1, p) * n) % p;", "    if (n == 0) return 1;\n\
    \    if (n % 2 == 0) {\n        long t = modp(n/2, p);\n        return (t*t) %\
    \ p;\n    }\n    return (modp(n-1, p) * n) % p;", "    if (n == 0) return 1;\n\
    \    long res = modp(n / 2, p);\n    res = (res * res) % p;\n    if (n % 2 ==\
    \ 1) res = (res * 2) % p;\n    return res;", "    assert(p > 0);\n    if (n ==\
    \ 0) return 1;\n    if (n % 2 == 0) {\n        long t = modp(n / 2, p);\n    \
    \    return (t * t) % p;\n    }\n    return (modp(n - 1, p) * n) % p;", "    if\
    \ (n == 0) return 1;\n    long r = modp(n/2, p);\n    r = (r*r) % p;\n    if (n\
    \ % 2 == 1) r = (r*2) % p;\n    return r;", "    if (n == 0) return 1;\n    if\
    \ (n == 1) return n;\n    if (n % 2 == 0) {\n        long x = modp(n/2, p);\n\
    \        return (x*x) % p;\n    }\n    return (n*modp(n-1, p)) % p;", "    assert(p\
    \ > 0);\n    long res = 1;\n    for (long i = 0; i < n; i++) {\n        res =\
    \ (res * 2) % p;\n    }\n    return res;", "  if (n == 0) return 1;\n  if (n %\
    \ 2 == 0) {\n    long t = modp(n / 2, p);\n    return (t * t) % p;\n  }\n  return\
    \ (modp(n - 1, p) * n) % p;", "    if (n == 0) return 1;\n    long res = modp(n\
    \ / 2, p);\n    res = (res * res) % p;\n    if (n % 2 == 1) res = (res * 2) %\
    \ p;\n    return res;", "    if (n == 0) return 1;\n    if (n == 1) return n;\n\
    \    long res = 1;\n    while (n > 0) {\n        if (n & 1) {\n            res\
    \ = (res * n) % p;\n        }\n        n = n >> 1;\n        n = (n * n) % p;\n\
    \    }\n    return res;", "    if (n == 0) return 1;\n    if (n % 2 == 0) {\n\
    \        long t = modp(n/2, p);\n        return (t*t) % p;\n    }\n    else {\n\
    \        return (modp(n-1, p) * n) % p;\n    }", "    if (n == 0) return 1;\n\
    \    long res = modp(n / 2, p);\n    res = (res * res) % p;\n    if (n % 2 ==\
    \ 1) res = (res * 2) % p;\n    return res;", "    assert(p > 0);\n    if (n ==\
    \ 0) return 1;\n    if (n % 2 == 0) {\n        long t = modp(n / 2, p);\n    \
    \    return (t * t) % p;\n    }\n    return (modp(n - 1, p) * n) % p;", "  assert(p\
    \ > 0);\n  if (n == 0) return 1;\n  if (n % 2 == 0) {\n    long x = modp(n/2,\
    \ p);\n    return (x * x) % p;\n  } else {\n    return (modp(n-1, p) * n) % p;\n\
    \  }", "    assert(p > 0);\n    if (n == 0) return 1;\n    if (n == 1) return\
    \ n % p;\n    if (n % 2 == 0) {\n        long t = modp(n / 2, p);\n        return\
    \ (t * t) % p;\n    }\n    return (n * modp(n - 1, p)) % p;", "    if (n == 0)\
    \ return 1;\n    if (n == 1) return n % p;\n    long res = 1;\n    while (n >\
    \ 0) {\n        if (n & 1) res = (res * n) % p;\n        n = n >> 1;\n       \
    \ n = (n * n) % p;\n    }\n    return res;", "    if (n == 0) return 1;\n    if\
    \ (n % 2 == 0) {\n        long t = modp(n/2, p);\n        return (t*t) % p;\n\
    \    }\n    return (modp(n-1, p) * n) % p;", "    if (n == 0) return 1;\n    if\
    \ (n % 2 == 0) {\n        long t = modp(n/2, p);\n        return (t*t) % p;\n\
    \    }\n    return (modp(n-1, p) * n) % p;", "    if (n == 0) return 1;\n    if\
    \ (n % 2 == 0) {\n        long t = modp(n/2, p);\n        return (t*t) % p;\n\
    \    }\n    return (modp(n-1, p) * n) % p;", "    if (n == 0) return 1;\n    long\
    \ res = modp(n/2, p);\n    res = (res * res) % p;\n    if (n % 2 == 1) res = (res\
    \ * 2) % p;\n    return res;", "    if (n == 0) return 1;\n    long res = modp(n/2,\
    \ p);\n    res = (res * res) % p;\n    if (n % 2 == 1) res = (res * 2) % p;\n\
    \    return res;", "    if (n == 0) return 1;\n    if (n % 2 == 0) {\n       \
    \ long t = modp(n/2, p);\n        return (t*t) % p;\n    }\n    return (modp(n-1,\
    \ p) * n) % p;", "\tif (n == 0) return 1;\n\tif (n % 2 == 0) {\n\t\tlong t = modp(n\
    \ / 2, p);\n\t\treturn (t * t) % p;\n\t}\n\telse {\n\t\treturn (2 * modp(n - 1,\
    \ p)) % p;\n\t}", "    assert(p > 0);\n    if (n == 0) return 1;\n    long res\
    \ = modp(n/2, p);\n    res = (res * res) % p;\n    if (n % 2 == 1) res = (res\
    \ * 2) % p;\n    return res;", "    assert(p > 0);\n    assert(n >= 0);\n    if\
    \ (n == 0) return 1;\n    if (n % 2 == 0) {\n        long t = modp(n / 2, p);\n\
    \        return (t * t) % p;\n    } else {\n        return (modp(n - 1, p) * n)\
    \ % p;\n    }", "    if (n == 0) return 1;\n    if (n == 1) return n;\n    if\
    \ (n % 2 == 0) {\n        long r = modp(n/2, p);\n        return (r*r) % p;\n\
    \    }\n    else {\n        long r = modp(n/2, p);\n        return (r*r*n) % p;\n\
    \    }", "    if (n == 0) return 1;\n    long res = modp(n/2, p);\n    res = (res\
    \ * res) % p;\n    if (n % 2 == 1) res = (res * 2) % p;\n    return res;", " \
    \   if (n == 0) return 1;\n    if (n % 2 == 0) {\n        long t = modp(n/2, p);\n\
    \        return (t*t) % p;\n    }\n    return (modp(n-1, p) * n) % p;", "    if\
    \ (n == 0) return 1;\n    long ans = modp(n / 2, p);\n    ans = (ans * ans) %\
    \ p;\n    if (n % 2 == 1) ans = (ans * 2) % p;\n    return ans;", "    if (n ==\
    \ 0) return 1;\n    if (n % 2 == 0) {\n        long t = modp(n/2, p);\n      \
    \  return (t*t) % p;\n    }\n    return (modp(n-1, p) * n) % p;", "    if (n ==\
    \ 0) return 1;\n    if (n % 2 == 0) {\n        long t = modp(n/2, p);\n      \
    \  return (t*t) % p;\n    }\n    return (modp(n-1, p) * n) % p;", "    if (n ==\
    \ 0) return 1;\n    if (n % 2 == 0) {\n        long x = modp(n/2, p);\n      \
    \  return (x*x) % p;\n    } else {\n        return (modp(n-1, p) * n) % p;\n \
    \   }"]
stop_tokens:
- "\n}"
