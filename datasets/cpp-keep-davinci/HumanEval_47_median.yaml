name: HumanEval_47_median
language: cpp
prompt: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return median of elements\
  \ in the list l.\n// >>> median([3, 1, 2, 4, 5])\n// 3\n// >>> median([-10, 4, 6,\
  \ 1000, 10, 20])\n// 15.0\nfloat median(std::vector<long> l) {\n"
tests: "}\nint main() {\n    auto candidate = median;\n    assert(candidate((std::vector<long>({(long)3,\
  \ (long)1, (long)2, (long)4, (long)5}))) == (float(3)));\n    assert(candidate((std::vector<long>({(long)-10,\
  \ (long)4, (long)6, (long)1000, (long)10, (long)20}))) == (8.0));\n    assert(candidate((std::vector<long>({(long)5})))\
  \ == (float(5)));\n    assert(candidate((std::vector<long>({(long)6, (long)5})))\
  \ == (5.5));\n    assert(candidate((std::vector<long>({(long)8, (long)1, (long)3,\
  \ (long)9, (long)9, (long)2, (long)7}))) == (float(7)));\n}\n"
completions: ["    float med;\n    int n = l.size();\n    if(n%2 == 0)\n    {\n  \
    \      med = (l[n/2] + l[(n/2)-1])/2.0;\n    }\n    else\n    {\n        med =\
    \ l[n/2];\n    }\n    return med;", "    // Write your code here\n    int n =\
    \ l.size();\n    if(n%2 == 0)\n    {\n        return (l[n/2]+l[n/2-1])/2.0;\n\
    \    }\n    else\n    {\n        return l[n/2];\n    }", "    std::sort(l.begin(),\
    \ l.end());\n    int n = l.size();\n    if (n % 2 == 0) {\n        return (l[n\
    \ / 2] + l[n / 2 - 1]) / 2.0;\n    } else {\n        return l[n / 2];\n    }",
  "    // Write your code here\n    int n = l.size();\n    if(n%2==0)\n    {\n   \
    \     return (l[n/2]+l[n/2-1])/2.0;\n    }\n    else\n    {\n        return l[n/2];\n\
    \    }", "    int n = l.size();\n    if(n%2 == 0)\n        return (l[n/2] + l[n/2-1])/2.0;\n\
    \    else\n        return l[n/2];", "    // TODO: Implement this function.\n \
    \   int n = l.size();\n    if(n%2==0)\n    {\n        return (l[n/2]+l[n/2-1])/2.0;\n\
    \    }\n    else\n    {\n        return l[n/2];\n    }", "    assert(l.size()\
    \ > 0);\n    std::sort(l.begin(), l.end());\n    if (l.size() % 2 == 0) {\n  \
    \      return (l[l.size() / 2] + l[l.size() / 2 - 1]) / 2.0;\n    } else {\n \
    \       return l[l.size() / 2];\n    }", "    std::sort(l.begin(), l.end());\n\
    \    int n = l.size();\n    if (n % 2 == 0) {\n        return (l[n / 2] + l[n\
    \ / 2 - 1]) / 2.0;\n    } else {\n        return l[n / 2];\n    }", "    // Write\
    \ your code here\n    int n = l.size();\n    if(n%2 == 0)\n    {\n        return\
    \ (l[n/2] + l[n/2 - 1])/2.0;\n    }\n    else\n    {\n        return l[n/2];\n\
    \    }", "    std::sort(l.begin(), l.end());\n    int n = l.size();\n    if (n\
    \ % 2 == 0) {\n        return (l[n / 2] + l[n / 2 - 1]) / 2.0;\n    } else {\n\
    \        return l[n / 2];\n    }", "  assert(l.size() > 0);\n  std::sort(l.begin(),\
    \ l.end());\n  if (l.size() % 2 == 0) {\n    return (l[l.size() / 2] + l[l.size()\
    \ / 2 - 1]) / 2.0;\n  } else {\n    return l[l.size() / 2];\n  }", "    // Write\
    \ your code here\n    int n = l.size();\n    if(n%2 == 0)\n    {\n        return\
    \ (l[n/2] + l[n/2 - 1])/2.0;\n    }\n    else\n    {\n        return l[n/2];\n\
    \    }", "    float median;\n    int n = l.size();\n    if (n % 2 == 0) {\n  \
    \      median = (l[n / 2] + l[n / 2 - 1]) / 2.0;\n    } else {\n        median\
    \ = l[n / 2];\n    }\n    return median;", "    assert(l.size() > 0);\n    std::sort(l.begin(),\
    \ l.end());\n    if (l.size() % 2 == 0) {\n        return (l[l.size() / 2] + l[l.size()\
    \ / 2 - 1]) / 2.0;\n    } else {\n        return l[l.size() / 2];\n    }", " \
    \ // TODO: Implement me!\n  return 0.0;", "    assert(l.size() > 0);\n    std::sort(l.begin(),\
    \ l.end());\n    int size = l.size();\n    if (size % 2 == 0) {\n        return\
    \ (l[size / 2] + l[size / 2 - 1]) / 2.0;\n    } else {\n        return l[size\
    \ / 2];\n    }", "    assert(l.size() > 0);\n    std::sort(l.begin(), l.end());\n\
    \    if (l.size() % 2 == 0) {\n        return (l[l.size() / 2] + l[l.size() /\
    \ 2 - 1]) / 2.0;\n    } else {\n        return l[l.size() / 2];\n    }", "   \
    \ // Write your code here\n    float median;\n    int n = l.size();\n    if(n%2==0)\n\
    \    {\n        median = (l[n/2] + l[(n/2)-1])/2.0;\n    }\n    else\n    {\n\
    \        median = l[n/2];\n    }\n    return median;", "    int n = l.size();\n\
    \    std::sort(l.begin(), l.end());\n    if (n % 2 == 0) {\n        return (l[n\
    \ / 2] + l[n / 2 - 1]) / 2.0;\n    } else {\n        return l[n / 2];\n    }",
  "    std::sort(l.begin(), l.end());\n    int size = l.size();\n    if (size % 2\
    \ == 0)\n        return (l[size / 2 - 1] + l[size / 2]) / 2.0;\n    else\n   \
    \     return l[size / 2];", "    // Write your code here\n    int n = l.size();\n\
    \    if(n%2 == 0)\n    {\n        return (l[n/2] + l[n/2 - 1])/2.0;\n    }\n \
    \   else\n    {\n        return l[n/2];\n    }", "    int n = l.size();\n    if(n%2\
    \ == 0)\n        return (l[n/2] + l[n/2 - 1])/2.0;\n    else\n        return l[n/2];",
  "\tint n = l.size();\n\tif (n == 0) {\n\t\treturn 0;\n\t}\n\tif (n % 2 == 0) {\n\
    \t\treturn (l[n / 2] + l[n / 2 - 1]) / 2.0;\n\t}\n\telse {\n\t\treturn l[n / 2];\n\
    \t}", "    int n = l.size();\n    if(n%2==0)\n        return (l[n/2]+l[n/2-1])/2.0;\n\
    \    else\n        return l[n/2];", "\tint n = l.size();\n\tif (n == 0) {\n\t\t\
    return 0;\n\t}\n\tif (n % 2 == 0) {\n\t\treturn (l[n / 2] + l[n / 2 - 1]) / 2.0;\n\
    \t}\n\telse {\n\t\treturn l[n / 2];\n\t}", "    int n = l.size();\n    if(n%2==0)\n\
    \        return (l[n/2]+l[n/2-1])/2.0;\n    else\n        return l[n/2];", " \
    \   int n = l.size();\n    if(n%2 == 0)\n        return (l[n/2] + l[n/2 - 1])/2.0;\n\
    \    else\n        return l[n/2];", "    assert(l.size() > 0);\n    std::sort(l.begin(),\
    \ l.end());\n    if (l.size() % 2 == 0) {\n        return (l[l.size() / 2] + l[l.size()\
    \ / 2 - 1]) / 2.0;\n    } else {\n        return l[l.size() / 2];\n    }", " \
    \   assert(l.size() > 0);\n    std::sort(l.begin(), l.end());\n    int n = l.size();\n\
    \    if (n % 2 == 0) {\n        return (l[n / 2] + l[n / 2 - 1]) / 2.0;\n    }\
    \ else {\n        return l[n / 2];\n    }", "    // TODO: Implement me!\n    int\
    \ n = l.size();\n    if(n%2==0){\n        return (l[n/2]+l[n/2-1])/2.0;\n    }\n\
    \    else{\n        return l[n/2];\n    }", "    int n = l.size();\n    if(n%2\
    \ == 0)\n        return (float)(l[n/2-1] + l[n/2])/2;\n    else\n        return\
    \ (float)l[n/2];", "\t// TODO: Implement this function.\n\t// You may need to\
    \ sort the vector l first.\n\t// Please use std::sort(l.begin(), l.end());\n\t\
    std::sort(l.begin(), l.end());\n\tint size = l.size();\n\tif (size % 2 == 0) {\n\
    \t\treturn (l[size / 2] + l[size / 2 - 1]) / 2.0;\n\t}\n\telse {\n\t\treturn l[size\
    \ / 2];\n\t}", "    // Write your code here\n    std::sort(l.begin(),l.end());\n\
    \    int n=l.size();\n    if(n%2==0)\n    {\n        return (l[n/2]+l[n/2-1])/2.0;\n\
    \    }\n    else\n    {\n        return l[n/2];\n    }", "    // Write your code\
    \ here\n    int n = l.size();\n    if(n%2==0)\n    {\n        return (l[n/2]+l[n/2-1])/2.0;\n\
    \    }\n    else\n    {\n        return l[n/2];\n    }", "\tint n = l.size();\n\
    \tif (n == 0)\n\t\treturn 0;\n\tif (n % 2 == 0)\n\t\treturn (l[n / 2] + l[n /\
    \ 2 - 1]) / 2.0;\n\telse\n\t\treturn l[n / 2];", "    int n = l.size();\n    if(n%2==0)\n\
    \        return (l[n/2]+l[n/2-1])/2.0;\n    else\n        return l[n/2];", " \
    \   assert(l.size() != 0);\n    int n = l.size();\n    if(n%2 == 0)\n        return\
    \ (l[n/2] + l[n/2-1])/2.0;\n    else\n        return l[n/2];", "    // write your\
    \ code here\n    int n = l.size();\n    if(n%2==0)\n    {\n        return (l[n/2]+l[n/2-1])/2.0;\n\
    \    }\n    else\n    {\n        return l[n/2];\n    }", "    std::sort(l.begin(),\
    \ l.end());\n    int n = l.size();\n    if (n % 2 == 0) {\n        return (l[n\
    \ / 2] + l[n / 2 - 1]) / 2.0;\n    } else {\n        return l[n / 2];\n    }",
  "    int n = l.size();\n    if(n%2==0)\n        return (l[n/2-1]+l[n/2])/2.0;\n\
    \    else\n        return l[n/2];", "    std::sort(l.begin(), l.end());\n    int\
    \ size = l.size();\n    if (size % 2 == 0) {\n        return (l[size / 2 - 1]\
    \ + l[size / 2]) / 2.0;\n    } else {\n        return l[size / 2];\n    }", " \
    \   std::sort(l.begin(), l.end());\n    int n = l.size();\n    if (n % 2 == 0)\
    \ {\n        return (l[n / 2] + l[n / 2 - 1]) / 2.0;\n    } else {\n        return\
    \ l[n / 2];\n    }", "    // Write your code here\n    int n = l.size();\n   \
    \ if(n%2 == 0)\n    {\n        return (l[n/2] + l[n/2 - 1])/2.0;\n    }\n    else\n\
    \    {\n        return l[n/2];\n    }", "    // TODO\n    std::sort(l.begin(),\
    \ l.end());\n    int n = l.size();\n    if(n%2 == 0)\n        return (l[n/2] +\
    \ l[n/2-1])/2.0;\n    else\n        return l[n/2];", "    int n = l.size();\n\
    \    sort(l.begin(), l.end());\n    if (n % 2 == 0) {\n        return (l[n / 2]\
    \ + l[n / 2 - 1]) / 2.0;\n    } else {\n        return l[n / 2];\n    }", "  \
    \  // Write your code here\n    int n = l.size();\n    if(n%2==0)\n    {\n   \
    \     return (l[n/2]+l[n/2-1])/2.0;\n    }\n    else\n    {\n        return l[n/2];\n\
    \    }", "    assert(l.size() > 0);\n    std::sort(l.begin(), l.end());\n    int\
    \ n = l.size();\n    if (n % 2 == 0) {\n        return (l[n / 2] + l[n / 2 - 1])\
    \ / 2.0;\n    } else {\n        return l[n / 2];\n    }", "    std::sort(l.begin(),\
    \ l.end());\n    int size = l.size();\n    if (size % 2 == 0) {\n        return\
    \ (l[size / 2 - 1] + l[size / 2]) / 2.0;\n    } else {\n        return l[size\
    \ / 2];\n    }", "    int n = l.size();\n    if(n%2==0)\n        return (l[n/2-1]+l[n/2])/2.0;\n\
    \    else\n        return l[n/2];", "    // Write your code here.\n    int n =\
    \ l.size();\n    if(n%2==0){\n        return (float)(l[n/2]+l[n/2-1])/2;\n   \
    \ }\n    else{\n        return (float)l[n/2];\n    }", "    int n = l.size();\n\
    \    if(n%2 == 0)\n        return (l[n/2-1] + l[n/2])/2.0;\n    else\n       \
    \ return l[n/2];", "    // Write your code here\n    sort(l.begin(),l.end());\n\
    \    int n=l.size();\n    if(n%2==0)\n    {\n        return (l[n/2]+l[n/2-1])/2.0;\n\
    \    }\n    else\n    {\n        return l[n/2];\n    }", "    std::sort(l.begin(),\
    \ l.end());\n    int n = l.size();\n    if (n % 2 == 0) {\n        return (l[n\
    \ / 2] + l[n / 2 - 1]) / 2.0;\n    } else {\n        return l[n / 2];\n    }",
  "    // TODO: Implement me!\n    std::sort(l.begin(), l.end());\n    int n = l.size();\n\
    \    if (n % 2 == 0) {\n        return (l[n / 2] + l[n / 2 - 1]) / 2.0;\n    }\n\
    \    return l[n / 2];", "    // TODO: Implement this function.\n    std::sort(l.begin(),\
    \ l.end());\n    int n = l.size();\n    if(n%2 == 0)\n        return (l[n/2] +\
    \ l[n/2 - 1])/2.0;\n    else\n        return l[n/2];", "    // TODO: Implement\
    \ me!\n    std::sort(l.begin(), l.end());\n    int size = l.size();\n    if (size\
    \ % 2 == 0) {\n        return (l[size / 2] + l[size / 2 - 1]) / 2.0;\n    }\n\
    \    else {\n        return l[size / 2];\n    }", "    std::sort(l.begin(), l.end());\n\
    \    int size = l.size();\n    if (size % 2 == 0) {\n        return (l[size /\
    \ 2] + l[size / 2 - 1]) / 2.0;\n    } else {\n        return l[size / 2];\n  \
    \  }", "    std::sort(l.begin(), l.end());\n    int n = l.size();\n    if (n %\
    \ 2 == 0) {\n        return (l[n / 2] + l[n / 2 - 1]) / 2.0;\n    } else {\n \
    \       return l[n / 2];\n    }", "    std::sort(l.begin(), l.end());\n    int\
    \ n = l.size();\n    if (n % 2 == 0) {\n        return (l[n / 2] + l[n / 2 - 1])\
    \ / 2.0;\n    } else {\n        return l[n / 2];\n    }", "\tint n = l.size();\n\
    \tif (n % 2 == 0)\n\t\treturn (l[n / 2] + l[n / 2 - 1]) / 2.0;\n\telse\n\t\treturn\
    \ l[n / 2];", "    int n = l.size();\n    if(n%2 == 0)\n        return (l[n/2]\
    \ + l[n/2 - 1])/2.0;\n    else\n        return l[n/2];", "    assert(l.size()\
    \ > 0);\n    std::sort(l.begin(), l.end());\n    if (l.size() % 2 == 0) {\n  \
    \      return (l[l.size() / 2] + l[l.size() / 2 - 1]) / 2.0;\n    } else {\n \
    \       return l[l.size() / 2];\n    }", "    std::sort(l.begin(), l.end());\n\
    \    int n = l.size();\n    if (n % 2 == 0) {\n        return (l[n / 2] + l[n\
    \ / 2 - 1]) / 2.0;\n    } else {\n        return l[n / 2];\n    }", "\tint n =\
    \ l.size();\n\tif (n % 2 == 0) {\n\t\treturn (l[n / 2] + l[n / 2 - 1]) / 2.0;\n\
    \t}\n\telse {\n\t\treturn l[n / 2];\n\t}", "\t// Write your code here\n\t// To\
    \ print results to the standard output you can use Printf\n\t// Example: Printf(\"\
    %s\\n\", \"Hello world!\");\n\tint n = l.size();\n\tif (n % 2 == 0) {\n\t\treturn\
    \ (l[n / 2] + l[n / 2 - 1]) / 2.0;\n\t}\n\telse {\n\t\treturn l[n / 2];\n\t}",
  "    int n = l.size();\n    if(n%2 == 0)\n        return (l[n/2] + l[n/2 - 1])/2.0;\n\
    \    else\n        return l[n/2];", "    float med;\n    int n = l.size();\n \
    \   if(n%2==0)\n        med = (l[n/2] + l[n/2 - 1])/2.0;\n    else\n        med\
    \ = l[n/2];\n    return med;", "    int n = l.size();\n    if(n%2 == 0)\n    \
    \    return (l[n/2] + l[n/2-1])/2.0;\n    else\n        return l[n/2];", "   \
    \ std::sort(l.begin(), l.end());\n    int n = l.size();\n    if (n % 2 == 0) {\n\
    \        return (l[n / 2] + l[n / 2 - 1]) / 2.0;\n    } else {\n        return\
    \ l[n / 2];\n    }", "    int n = l.size();\n    if(n%2 == 0)\n        return\
    \ (float)(l[n/2] + l[n/2 - 1])/2;\n    else\n        return l[n/2];", "    //\
    \ Write your code here\n    int n = l.size();\n    if(n%2==0)\n    {\n       \
    \ return (l[n/2]+l[n/2-1])/2.0;\n    }\n    else\n    {\n        return l[n/2];\n\
    \    }", "    // Write your code here\n    int n = l.size();\n    if(n%2==0)\n\
    \    {\n        return (l[n/2]+l[n/2-1])/2.0;\n    }\n    else\n    {\n      \
    \  return l[n/2];\n    }", "    // TODO: implement this function.\n    // You\
    \ may need to sort the vector l first.\n    // Please use std::sort(l.begin(),\
    \ l.end()); to sort the vector l.\n    std::sort(l.begin(), l.end());\n    int\
    \ size = l.size();\n    if (size % 2 == 0) {\n        return (l[size / 2] + l[size\
    \ / 2 - 1]) / 2.0;\n    } else {\n        return l[size / 2];\n    }", "    int\
    \ n = l.size();\n    if(n%2 == 0)\n        return (l[n/2] + l[n/2 - 1])/2.0;\n\
    \    else\n        return l[n/2];", "    int n = l.size();\n    if(n%2==0)\n \
    \       return (l[n/2-1]+l[n/2])/2.0;\n    else\n        return l[n/2];", "\t\
    int n = l.size();\n\tif (n % 2 == 0)\n\t\treturn (l[n / 2] + l[n / 2 - 1]) / 2.0;\n\
    \telse\n\t\treturn l[n / 2];", "    int n = l.size();\n    if(n%2 == 0)\n    \
    \    return (l[n/2] + l[n/2 - 1])/2.0;\n    else\n        return l[n/2];", " \
    \   // Write your code here\n    int n = l.size();\n    if(n%2==0)\n    {\n  \
    \      return (l[n/2]+l[n/2-1])/2.0;\n    }\n    else\n    {\n        return l[n/2];\n\
    \    }", "    int n = l.size();\n    if(n%2 == 0) {\n        return (l[n/2] +\
    \ l[n/2 - 1])/2.0;\n    }\n    else {\n        return l[n/2];\n    }", "\t// Write\
    \ your code here\n\t// To print results to the standard output you can use Printf\n\
    \t// Example: Printf(\"%s\\n\", \"Hello world!\");\n\tstd::sort(l.begin(), l.end());\n\
    \tint n = l.size();\n\tif (n % 2 == 0) {\n\t\treturn (l[n / 2] + l[n / 2 - 1])\
    \ / 2.0;\n\t}\n\telse {\n\t\treturn l[n / 2];\n\t}", "    // Write your code here\n\
    \    int n = l.size();\n    if(n%2==0)\n    {\n        return (l[n/2]+l[n/2-1])/2.0;\n\
    \    }\n    else\n    {\n        return l[n/2];\n    }", "    assert(l.size()>0);\n\
    \    std::sort(l.begin(),l.end());\n    if(l.size()%2==0)\n        return (l[l.size()/2]+l[l.size()/2-1])/2.0;\n\
    \    else\n        return l[l.size()/2];", "\t// Write your code here\n\tstd::sort(l.begin(),\
    \ l.end());\n\tint n = l.size();\n\tif (n % 2 == 0)\n\t\treturn (l[n / 2] + l[n\
    \ / 2 - 1]) / 2.0;\n\telse\n\t\treturn l[n / 2];", "    std::sort(l.begin(), l.end());\n\
    \    int n = l.size();\n    if (n % 2 == 0) {\n        return (l[n / 2] + l[n\
    \ / 2 - 1]) / 2.0;\n    } else {\n        return l[n / 2];\n    }", "    // Write\
    \ your code here\n    int n = l.size();\n    if(n%2==0)\n    {\n        return\
    \ (l[n/2]+l[n/2-1])/2.0;\n    }\n    else\n    {\n        return l[n/2];\n   \
    \ }", "    // Write your code here\n    int n = l.size();\n    if(n%2 == 0)\n\
    \    {\n        return (l[n/2] + l[n/2 - 1])/2.0;\n    }\n    else\n    {\n  \
    \      return l[n/2];\n    }", "    // Write your code here\n    int n = l.size();\n\
    \    if(n%2==0)\n    {\n        return (l[n/2]+l[n/2-1])/2.0;\n    }\n    else\n\
    \    {\n        return l[n/2];\n    }", "    // TODO: Implement me!\n    int n\
    \ = l.size();\n    if(n%2==0){\n        return (l[n/2]+l[n/2-1])/2.0;\n    }\n\
    \    else{\n        return l[n/2];\n    }", "\t// Write your code here\n\tint\
    \ n = l.size();\n\tif (n % 2 == 0) {\n\t\treturn (l[n / 2] + l[n / 2 - 1]) / 2.0;\n\
    \t}\n\telse {\n\t\treturn l[n / 2];\n\t}", "    int n = l.size();\n    if(n%2==0)\n\
    \        return (l[n/2]+l[n/2-1])/2.0;\n    else\n        return l[n/2];", " \
    \   // Write your code here\n    std::sort(l.begin(),l.end());\n    int n=l.size();\n\
    \    if(n%2==0)\n    {\n        return (l[n/2]+l[n/2-1])/2.0;\n    }\n    else\n\
    \    {\n        return l[n/2];\n    }", "    int n = l.size();\n    if(n%2 ==\
    \ 0)\n        return (l[n/2] + l[n/2 - 1])/2.0;\n    else\n        return l[n/2];",
  "    // Write your code here\n    int n = l.size();\n    if(n%2 == 0)\n    {\n \
    \       return (l[n/2-1]+l[n/2])/2.0;\n    }\n    else\n    {\n        return\
    \ l[n/2];\n    }", "    // Your code here\n    int n = l.size();\n    if(n%2==0)\n\
    \    {\n        return (l[n/2]+l[n/2-1])/2.0;\n    }\n    else\n    {\n      \
    \  return l[n/2];\n    }", "    assert(l.size() > 0);\n    int n = l.size();\n\
    \    if (n % 2 == 0) {\n        return (l[n / 2] + l[n / 2 - 1]) / 2.0;\n    }\
    \ else {\n        return l[n / 2];\n    }", "    // TODO: Implement this function.\n\
    \    std::sort(l.begin(), l.end());\n    int n = l.size();\n    if(n%2==0)\n \
    \   {\n        return (l[n/2]+l[n/2-1])/2.0;\n    }\n    else\n    {\n       \
    \ return l[n/2];\n    }", "    // Write your code here\n    std::sort(l.begin(),l.end());\n\
    \    int n=l.size();\n    if(n%2==0)\n    {\n        return (l[n/2]+l[n/2-1])/2.0;\n\
    \    }\n    else\n    {\n        return l[n/2];\n    }", "    int n = l.size();\n\
    \    if(n%2 == 0)\n        return (l[n/2] + l[n/2-1])/2.0;\n    else\n       \
    \ return l[n/2];", "    int n = l.size();\n    if(n%2 == 0)\n        return (l[n/2]\
    \ + l[n/2-1])/2.0;\n    else\n        return l[n/2];", "    assert(l.size() >\
    \ 0);\n    std::sort(l.begin(), l.end());\n    if (l.size() % 2 == 0) {\n    \
    \    return (l[l.size() / 2] + l[l.size() / 2 - 1]) / 2.0;\n    } else {\n   \
    \     return l[l.size() / 2];\n    }", "    // Write your code here\n    int n\
    \ = l.size();\n    if(n%2==0)\n    {\n        return (l[n/2]+l[n/2-1])/2.0;\n\
    \    }\n    else\n    {\n        return l[n/2];\n    }", "    assert(l.size()\
    \ > 0);\n    std::sort(l.begin(), l.end());\n    if (l.size() % 2 == 0) {\n  \
    \      return (l[l.size() / 2] + l[l.size() / 2 - 1]) / 2.0;\n    } else {\n \
    \       return l[l.size() / 2];\n    }", "    std::sort(l.begin(), l.end());\n\
    \    int n = l.size();\n    if (n % 2 == 0) {\n        return (l[n / 2] + l[n\
    \ / 2 - 1]) / 2.0;\n    } else {\n        return l[n / 2];\n    }", "    int n\
    \ = l.size();\n    if(n%2==0)\n        return (l[n/2]+l[n/2-1])/2.0;\n    else\n\
    \        return l[n/2];", "    // Write your code here\n    int n = l.size();\n\
    \    if(n%2==0)\n    {\n        return (l[n/2]+l[n/2-1])/2.0;\n    }\n    else\n\
    \    {\n        return l[n/2];\n    }", "    assert(l.size() > 0);\n    std::sort(l.begin(),\
    \ l.end());\n    if (l.size() % 2 == 0) {\n        return (l[l.size() / 2] + l[l.size()\
    \ / 2 - 1]) / 2.0;\n    } else {\n        return l[l.size() / 2];\n    }", " \
    \   assert(l.size() > 0);\n    sort(l.begin(), l.end());\n    if (l.size() % 2\
    \ == 0) {\n        return (l[l.size() / 2] + l[l.size() / 2 - 1]) / 2.0;\n   \
    \ } else {\n        return l[l.size() / 2];\n    }", "    assert(l.size() > 0);\n\
    \    std::sort(l.begin(), l.end());\n    int n = l.size();\n    if (n % 2 == 0)\
    \ {\n        return (l[n / 2] + l[n / 2 - 1]) / 2.0;\n    } else {\n        return\
    \ l[n / 2];\n    }", "    std::sort(l.begin(), l.end());\n    int n = l.size();\n\
    \    if (n % 2 == 0) {\n        return (l[n / 2] + l[n / 2 - 1]) / 2.0;\n    }\
    \ else {\n        return l[n / 2];\n    }", "    int n = l.size();\n    if(n%2==0)\n\
    \        return (l[n/2-1]+l[n/2])/2.0;\n    else\n        return l[n/2];", " \
    \   int n = l.size();\n    if(n%2 == 0)\n        return (l[n/2] + l[n/2 - 1])/2.0;\n\
    \    else\n        return l[n/2];", "    std::sort(l.begin(), l.end());\n    int\
    \ n = l.size();\n    if (n % 2 == 0)\n        return (l[n / 2 - 1] + l[n / 2])\
    \ / 2.0;\n    else\n        return l[n / 2];", "    // Write your code here\n\
    \    int n = l.size();\n    if(n%2 == 0)\n    {\n        return (l[n/2]+l[n/2-1])/2.0;\n\
    \    }\n    else\n    {\n        return l[n/2];\n    }", "    assert(l.size()\
    \ > 0);\n    sort(l.begin(), l.end());\n    if (l.size() % 2 == 0) {\n       \
    \ return (l[l.size() / 2] + l[l.size() / 2 - 1]) / 2.0;\n    } else {\n      \
    \  return l[l.size() / 2];\n    }", "    // TODO: Implement me!\n    std::sort(l.begin(),\
    \ l.end());\n    int n = l.size();\n    if (n % 2 == 0)\n        return (l[n /\
    \ 2 - 1] + l[n / 2]) / 2.0;\n    else\n        return l[n / 2];", "    // TODO:\
    \ Implement this function.\n    std::sort(l.begin(), l.end());\n    int n = l.size();\n\
    \    if(n % 2 == 0)\n        return (l[n/2] + l[n/2 - 1])/2.0;\n    else\n   \
    \     return l[n/2];", "    std::sort(l.begin(), l.end());\n    int n = l.size();\n\
    \    if (n % 2 == 0) {\n        return (l[n / 2] + l[n / 2 - 1]) / 2.0;\n    }\
    \ else {\n        return l[n / 2];\n    }", "    int n = l.size();\n    if(n%2==0)\n\
    \        return (l[n/2]+l[n/2-1])/2.0;\n    else\n        return l[n/2];", " \
    \   std::sort(l.begin(), l.end());\n    if (l.size() % 2 == 0) {\n        return\
    \ (l[l.size() / 2] + l[l.size() / 2 - 1]) / 2.0;\n    } else {\n        return\
    \ l[l.size() / 2];\n    }", "    // Write your code here\n    int n = l.size();\n\
    \    if(n%2==0)\n    {\n        return (l[n/2]+l[n/2-1])/2.0;\n    }\n    else\n\
    \    {\n        return l[n/2];\n    }", "    std::sort(l.begin(), l.end());\n\
    \    int n = l.size();\n    if (n % 2 == 0) {\n        return (l[n / 2] + l[n\
    \ / 2 - 1]) / 2.0;\n    } else {\n        return l[n / 2];\n    }", "    // Write\
    \ your code here\n    int n = l.size();\n    if(n%2==0)\n    {\n        return\
    \ (l[n/2]+l[n/2-1])/2.0;\n    }\n    else\n    {\n        return l[n/2];\n   \
    \ }", "    // Write your code here\n    std::sort(l.begin(),l.end());\n    int\
    \ n=l.size();\n    if(n%2==0)\n    {\n        return (l[n/2]+l[n/2-1])/2.0;\n\
    \    }\n    else\n    {\n        return l[n/2];\n    }", "    // Write your code\
    \ here\n    int n = l.size();\n    if(n%2==0)\n    {\n        return (l[n/2]+l[n/2-1])/2.0;\n\
    \    }\n    else\n    {\n        return l[n/2];\n    }", "    assert(l.size()\
    \ > 0);\n    sort(l.begin(), l.end());\n    if (l.size() % 2 == 0) {\n       \
    \ return (l[l.size() / 2] + l[l.size() / 2 - 1]) / 2.0;\n    } else {\n      \
    \  return l[l.size() / 2];\n    }", "    // write your code here\n    int n =\
    \ l.size();\n    if(n%2 == 0)\n    {\n        return (l[n/2] + l[n/2 - 1])/2.0;\n\
    \    }\n    else\n    {\n        return l[n/2];\n    }", "    assert(l.size()\
    \ > 0);\n    std::sort(l.begin(), l.end());\n    if (l.size() % 2 == 0) {\n  \
    \      return (l[l.size() / 2] + l[l.size() / 2 - 1]) / 2.0;\n    } else {\n \
    \       return l[l.size() / 2];\n    }", "    // Write your code here\n    int\
    \ n = l.size();\n    if(n%2==0)\n    {\n        return (l[n/2]+l[n/2-1])/2.0;\n\
    \    }\n    else\n    {\n        return l[n/2];\n    }", "    // Write your code\
    \ here\n    std::sort(l.begin(),l.end());\n    int n=l.size();\n    if(n%2==0)\n\
    \    {\n        return (l[n/2]+l[n/2-1])/2.0;\n    }\n    else\n    {\n      \
    \  return l[n/2];\n    }", "    // Write your code here\n    int n = l.size();\n\
    \    if(n%2==0)\n    {\n        return (l[n/2]+l[n/2-1])/2.0;\n    }\n    else\n\
    \    {\n        return l[n/2];\n    }", "    int n = l.size();\n    if(n%2)\n\
    \        return l[n/2];\n    else\n        return (l[n/2] + l[n/2-1])/2.0;", " \
    \   // Write your code here\n    int n = l.size();\n    if(n%2==0)\n    {\n  \
    \      return (l[n/2]+l[n/2-1])/2.0;\n    }\n    else\n    {\n        return l[n/2];\n\
    \    }", "    assert(l.size() > 0);\n    std::sort(l.begin(), l.end());\n    if\
    \ (l.size() % 2 == 0) {\n        return (l[l.size() / 2] + l[l.size() / 2 - 1])\
    \ / 2.0;\n    } else {\n        return l[l.size() / 2];\n    }", "    int n =\
    \ l.size();\n    if(n%2 == 0)\n        return (l[n/2-1] + l[n/2])/2.0;\n    else\n\
    \        return l[n/2];", "    int size = l.size();\n    if(size%2==0){\n    \
    \    return (l[size/2]+l[size/2-1])/2.0;\n    }\n    else{\n        return l[size/2];\n\
    \    }", "    // Write your code here\n    std::sort(l.begin(),l.end());\n   \
    \ int n=l.size();\n    if(n%2==0)\n    {\n        return (l[n/2]+l[n/2-1])/2.0;\n\
    \    }\n    else\n    {\n        return l[n/2];\n    }", "    std::sort(l.begin(),\
    \ l.end());\n    int n = l.size();\n    if (n % 2 == 0) {\n        return (l[n\
    \ / 2] + l[n / 2 - 1]) / 2.0;\n    } else {\n        return l[n / 2];\n    }",
  "    assert(l.size() > 0);\n    std::sort(l.begin(), l.end());\n    if (l.size()\
    \ % 2 == 0) {\n        return (l[l.size() / 2] + l[l.size() / 2 - 1]) / 2.0;\n\
    \    } else {\n        return l[l.size() / 2];\n    }", "    // Write your code\
    \ here\n    int n = l.size();\n    if(n%2==0)\n    {\n        return (l[n/2]+l[n/2-1])/2.0;\n\
    \    }\n    else\n    {\n        return l[n/2];\n    }", "    // write your code\
    \ here\n    int n = l.size();\n    if(n%2==0)\n    {\n        return (l[n/2]+l[n/2-1])/2.0;\n\
    \    }\n    else\n    {\n        return l[n/2];\n    }", "    std::sort(l.begin(),\
    \ l.end());\n    int n = l.size();\n    if (n % 2 == 0) {\n        return (l[n\
    \ / 2] + l[n / 2 - 1]) / 2.0;\n    } else {\n        return l[n / 2];\n    }",
  "    // Write your code here\n    int n = l.size();\n    if(n%2 == 0)\n    {\n \
    \       return (l[n/2] + l[n/2 - 1])/2.0;\n    }\n    else\n    {\n        return\
    \ l[n/2];\n    }", "    // Write your code here\n    std::sort(l.begin(),l.end());\n\
    \    int n=l.size();\n    if(n%2==0)\n    {\n        return (l[n/2]+l[n/2-1])/2.0;\n\
    \    }\n    else\n    {\n        return l[n/2];\n    }", "    // Write your code\
    \ here\n    std::sort(l.begin(),l.end());\n    int n=l.size();\n    if(n%2==0)\n\
    \    {\n        return (l[n/2]+l[n/2-1])/2.0;\n    }\n    else\n    {\n      \
    \  return l[n/2];\n    }", "    assert(l.size() > 0);\n    std::sort(l.begin(),\
    \ l.end());\n    if (l.size() % 2 == 0) {\n        return (l[l.size() / 2] + l[l.size()\
    \ / 2 - 1]) / 2.0;\n    } else {\n        return l[l.size() / 2];\n    }", " \
    \   assert(l.size() > 0);\n    std::sort(l.begin(), l.end());\n    int n = l.size();\n\
    \    if (n % 2 == 0) {\n        return (l[n / 2] + l[n / 2 - 1]) / 2.0;\n    }\
    \ else {\n        return l[n / 2];\n    }", "    int n = l.size();\n    std::sort(l.begin(),\
    \ l.end());\n    if (n % 2 == 0) {\n        return (l[n / 2] + l[n / 2 - 1]) /\
    \ 2.0;\n    } else {\n        return l[n / 2];\n    }", "    // TODO: Implement\
    \ me!\n    float median;\n    int size = l.size();\n    if(size % 2 == 0){\n \
    \       median = (l[size/2] + l[size/2 - 1])/2.0;\n    }else{\n        median\
    \ = l[size/2];\n    }\n    return median;", "    int n = l.size();\n    if(n ==\
    \ 0)\n        return 0;\n    if(n % 2 == 0)\n        return (l[n/2] + l[n/2 -\
    \ 1]) / 2.0;\n    else\n        return l[n/2];", "    int n = l.size();\n    if(n%2==0)\n\
    \        return (l[n/2]+l[n/2-1])/2.0;\n    else\n        return l[n/2];", " \
    \   assert(l.size() > 0);\n    std::sort(l.begin(), l.end());\n    if (l.size()\
    \ % 2 == 0) {\n        return (l[l.size() / 2] + l[l.size() / 2 - 1]) / 2.0;\n\
    \    } else {\n        return l[l.size() / 2];\n    }", "    int n = l.size();\n\
    \    if(n%2 == 0)\n        return (l[n/2] + l[n/2 - 1])/2.0;\n    else\n     \
    \   return l[n/2];", "    assert(l.size() > 0);\n    std::sort(l.begin(), l.end());\n\
    \    int mid = l.size() / 2;\n    if (l.size() % 2 == 0) {\n        return (l[mid]\
    \ + l[mid - 1]) / 2.0;\n    } else {\n        return l[mid];\n    }", "  // TODO:\
    \ Implement me!\n  int n = l.size();\n  if(n%2==0)\n  {\n    return (l[n/2]+l[n/2-1])/2.0;\n\
    \  }\n  else\n  {\n    return l[n/2];\n  }", "\t// TODO: Implement median.\n\t\
    int n = l.size();\n\tsort(l.begin(), l.end());\n\tif (n % 2 == 0)\n\t\treturn\
    \ (l[n / 2] + l[n / 2 - 1]) / 2.0;\n\telse\n\t\treturn l[n / 2];", "    int n\
    \ = l.size();\n    if(n == 0)\n        return 0;\n    if(n == 1)\n        return\
    \ l[0];\n    if(n == 2)\n        return (l[0] + l[1])/2.0;\n    if(n % 2 == 0)\n\
    \        return (l[n/2] + l[n/2 - 1])/2.0;\n    else\n        return l[n/2];",
  "    int n = l.size();\n    if(n%2==0)\n        return (l[n/2]+l[n/2-1])/2.0;\n\
    \    else\n        return l[n/2];", "    // Write your code here\n    int n =\
    \ l.size();\n    if(n%2 == 0)\n    {\n        return (l[n/2] + l[n/2 - 1])/2.0;\n\
    \    }\n    else\n    {\n        return l[n/2];\n    }", "    std::sort(l.begin(),\
    \ l.end());\n    if (l.size() % 2 == 0) {\n        return (l[l.size() / 2] + l[l.size()\
    \ / 2 - 1]) / 2.0;\n    } else {\n        return l[l.size() / 2];\n    }", " \
    \   int n = l.size();\n    if(n%2 == 0)\n        return (l[n/2-1] + l[n/2])/2.0;\n\
    \    else\n        return l[n/2];", "    // Write your code here\n    int n =\
    \ l.size();\n    if(n%2==0)\n    {\n        return (l[n/2]+l[n/2-1])/2.0;\n  \
    \  }\n    else\n    {\n        return l[n/2];\n    }", "\t// Write your code here\n\
    \tstd::sort(l.begin(), l.end());\n\tint n = l.size();\n\tif (n % 2 == 0) {\n\t\
    \treturn (l[n / 2] + l[n / 2 - 1]) / 2.0;\n\t}\n\telse {\n\t\treturn l[n / 2];\n\
    \t}", "    assert(l.size() > 0);\n    std::sort(l.begin(), l.end());\n    int\
    \ n = l.size();\n    if (n % 2 == 0) {\n        return (l[n / 2] + l[n / 2 - 1])\
    \ / 2.0;\n    } else {\n        return l[n / 2];\n    }", "    // Write your code\
    \ here\n    int n = l.size();\n    if(n%2 == 0)\n    {\n        return (l[n/2]\
    \ + l[n/2 - 1])/2.0;\n    }\n    else\n    {\n        return l[n/2];\n    }",
  "    std::sort(l.begin(), l.end());\n    int n = l.size();\n    if (n % 2 == 0)\
    \ {\n        return (l[n / 2] + l[n / 2 - 1]) / 2.0;\n    } else {\n        return\
    \ l[n / 2];\n    }", "    // Write your code here\n    int n = l.size();\n   \
    \ if(n%2==0)\n    {\n        return (l[n/2-1]+l[n/2])/2.0;\n    }\n    else\n\
    \    {\n        return l[n/2];\n    }", "    std::sort(l.begin(), l.end());\n\
    \    int n = l.size();\n    if (n % 2 == 0) {\n        return (l[n / 2] + l[n\
    \ / 2 - 1]) / 2.0;\n    } else {\n        return l[n / 2];\n    }", "    assert(l.size()\
    \ > 0);\n    int n = l.size();\n    std::sort(l.begin(), l.end());\n    if (n\
    \ % 2 == 0) {\n        return (l[n / 2] + l[n / 2 - 1]) / 2.0;\n    } else {\n\
    \        return l[n / 2];\n    }", "    // Write your code here\n    int n = l.size();\n\
    \    if(n%2==0)\n    {\n        return (float)(l[n/2]+l[n/2-1])/2;\n    }\n  \
    \  else\n    {\n        return (float)l[n/2];\n    }", "    int n = l.size();\n\
    \    if(n%2==0)\n        return (l[n/2]+l[n/2-1])/2.0;\n    else\n        return\
    \ l[n/2];", "    int n = l.size();\n    if(n%2==0)\n        return (l[n/2]+l[n/2-1])/2.0;\n\
    \    else\n        return l[n/2];", "\tstd::sort(l.begin(), l.end());\n\tint n\
    \ = l.size();\n\tif (n % 2 == 0) {\n\t\treturn (l[n / 2] + l[n / 2 - 1]) / 2.0;\n\
    \t}\n\telse {\n\t\treturn l[n / 2];\n\t}", "    // Write your code here\n    int\
    \ n = l.size();\n    if(n%2==0)\n    {\n        return (l[n/2]+l[n/2-1])/2.0;\n\
    \    }\n    else\n    {\n        return l[n/2];\n    }", "    // Write your code\
    \ here\n    int n = l.size();\n    if(n%2==0)\n    {\n        return (l[n/2]+l[n/2-1])/2.0;\n\
    \    }\n    else\n    {\n        return l[n/2];\n    }", "    // Write your code\
    \ here\n    int n = l.size();\n    if(n%2==0)\n    {\n        return (l[n/2]+l[n/2-1])/2.0;\n\
    \    }\n    else\n    {\n        return l[n/2];\n    }", "    int n = l.size();\n\
    \    if(n%2==0)\n        return (l[n/2]+l[n/2-1])/2.0;\n    else\n        return\
    \ l[n/2];", "    int n = l.size();\n    if(n%2==0)\n        return (l[n/2-1]+l[n/2])/2.0;\n\
    \    else\n        return l[n/2];", "\t// Write your code here\n\t// To print\
    \ results to the standard output you can use Printf\n\t// Example: Printf(\"%s\\\
    n\", \"Hello world!\");\n\tint n = l.size();\n\tif (n == 0)\n\t\treturn 0;\n\t\
    if (n % 2 == 0)\n\t\treturn (l[n / 2] + l[n / 2 - 1]) / 2.0;\n\telse\n\t\treturn\
    \ l[n / 2];", "    // TODO: Implement median function.\n    // You can use std::sort(l.begin(),\
    \ l.end()) to sort the list.\n    // You can use std::size(l) to get the size\
    \ of the list.\n    // You can use std::nth_element(l.begin(), l.begin() + i,\
    \ l.end()) to get the i-th smallest element.\n    // You can use std::accumulate(l.begin(),\
    \ l.end(), 0) to get the sum of all elements.\n    // You can use std::distance(l.begin(),\
    \ it) to get the index of an iterator.\n    // You can use std::vector<long>::iterator\
    \ to iterate the list.\n    // You can use std::vector<long>::const_iterator to\
    \ iterate the list in a const function.\n    // You can use std::vector<long>::reverse_iterator\
    \ to iterate the list in reverse order.\n    // You can use std::vector<long>::const_reverse_iterator\
    \ to iterate the list in reverse order in a const function.\n    // You can use\
    \ std::vector<long>::insert(it, val) to insert val before the iterator it.\n \
    \   // You can use std::vector<long>::erase(it) to erase the element at the iterator\
    \ it.\n    // You can use std::vector<long>::push_back(val) to append val to the\
    \ end of the list.\n    // You can use std::vector<long>::pop_back() to remove\
    \ the last element of the list.\n    // You can use std::vector<long>::clear()\
    \ to remove all elements of the list.\n    // You can use std::vector<long>::empty()\
    \ to check if the list is empty.\n    // You can use std::vector<long>::size()\
    \ to get the size of the list.\n    // You can use std::vector<long>::front()\
    \ to get the first element of the list.\n    // You can use std::vector<long>::back()\
    \ to get the last element of the list.\n    // You can use std::vector<long>::begin()\
    \ to get the iterator to the first element of the list.\n    // You can use std::vector<long>::",
  "    std::sort(l.begin(), l.end());\n    int n = l.size();\n    if (n % 2 == 0)\
    \ {\n        return (l[n / 2] + l[n / 2 - 1]) / 2.0;\n    } else {\n        return\
    \ l[n / 2];\n    }", "    // Write your code here\n    int n = l.size();\n   \
    \ if(n%2==0)\n    {\n        return (l[n/2]+l[n/2-1])/2.0;\n    }\n    else\n\
    \    {\n        return l[n/2];\n    }", "    int n = l.size();\n    sort(l.begin(),\
    \ l.end());\n    if (n % 2 == 0) {\n        return (l[n / 2] + l[n / 2 - 1]) /\
    \ 2.0;\n    } else {\n        return l[n / 2];\n    }", "    std::sort(l.begin(),\
    \ l.end());\n    int n = l.size();\n    if (n % 2 == 0) {\n        return (l[n\
    \ / 2] + l[n / 2 - 1]) / 2.0;\n    } else {\n        return l[n / 2];\n    }",
  "  // TODO: Implement me!\n  std::sort(l.begin(), l.end());\n  int n = l.size();\n\
    \  if(n%2 == 0)\n  {\n    return (l[n/2] + l[n/2 - 1])/2.0;\n  }\n  else\n  {\n\
    \    return l[n/2];\n  }", "    // Write your code here\n    int n = l.size();\n\
    \    if(n%2 == 0)\n    {\n        return (l[n/2]+l[n/2-1])/2.0;\n    }\n    else\n\
    \    {\n        return l[n/2];\n    }", "    // Write your code here\n    int\
    \ n = l.size();\n    sort(l.begin(), l.end());\n    if(n%2 == 0)\n        return\
    \ (l[n/2] + l[n/2 - 1])/2.0;\n    else\n        return l[n/2];", "\t// Write your\
    \ code here\n\t// To print results to the standard output you can use Printf\n\
    \t// Example: Printf(\"%s\\n\", \"Hello world!\");\n\tint n = l.size();\n\tsort(l.begin(),\
    \ l.end());\n\tif (n % 2 == 0)\n\t\treturn (l[n / 2] + l[n / 2 - 1]) / 2.0;\n\t\
    else\n\t\treturn l[n / 2];", "    // Write your code here\n    int n = l.size();\n\
    \    if(n%2 == 0)\n    {\n        return (l[n/2] + l[n/2 - 1])/2.0;\n    }\n \
    \   else\n    {\n        return l[n/2];\n    }", "    // TODO: Implement me!\n\
    \    int n = l.size();\n    if(n%2 == 0)\n    {\n        return (l[n/2]+l[n/2-1])/2.0;\n\
    \    }\n    else\n    {\n        return l[n/2];\n    }", "    int n = l.size();\n\
    \    sort(l.begin(), l.end());\n    if (n % 2 == 0) {\n        return (l[n / 2]\
    \ + l[n / 2 - 1]) / 2.0;\n    } else {\n        return l[n / 2];\n    }", "  \
    \  assert(l.size() > 0);\n    std::sort(l.begin(), l.end());\n    if (l.size()\
    \ % 2 == 0) {\n        return (l[l.size() / 2] + l[l.size() / 2 - 1]) / 2.0;\n\
    \    } else {\n        return l[l.size() / 2];\n    }", "    int n = l.size();\n\
    \    if(n%2 == 0)\n        return (l[n/2] + l[n/2 - 1])/2.0;\n    else\n     \
    \   return l[n/2];", "    // TODO: Implement median function.\n    std::sort(l.begin(),\
    \ l.end());\n    int n = l.size();\n    if(n%2==0)\n    {\n        return (l[n/2]+l[n/2-1])/2.0;\n\
    \    }\n    else\n    {\n        return l[n/2];\n    }", "    // Write your code\
    \ here\n    std::sort(l.begin(),l.end());\n    int n=l.size();\n    if(n%2==0)\n\
    \    {\n        return (l[n/2]+l[n/2-1])/2.0;\n    }\n    else\n    {\n      \
    \  return l[n/2];\n    }", "\tint n = l.size();\n\tif (n % 2 == 0) {\n\t\treturn\
    \ (l[n / 2] + l[n / 2 - 1]) / 2.0;\n\t}\n\telse {\n\t\treturn l[n / 2];\n\t}",
  "    int n = l.size();\n    if(n==0)return 0;\n    if(n==1)return l[0];\n    if(n==2)return\
    \ (l[0]+l[1])/2.0;\n    if(n%2==0){\n        return (l[n/2]+l[n/2-1])/2.0;\n \
    \   }\n    else{\n        return l[n/2];\n    }", "\tint n = l.size();\n\tif (n\
    \ % 2 == 0) {\n\t\treturn (l[n / 2] + l[n / 2 - 1]) / 2.0;\n\t}\n\telse {\n\t\t\
    return l[n / 2];\n\t}", "    // Write your code here\n    std::sort(l.begin(),l.end());\n\
    \    int n=l.size();\n    if(n%2==0)\n    {\n        return (l[n/2]+l[n/2-1])/2.0;\n\
    \    }\n    else\n    {\n        return l[n/2];\n    }", "    // Write your code\
    \ here\n    int n = l.size();\n    if(n%2==0)\n    {\n        return (l[n/2]+l[n/2-1])/2.0;\n\
    \    }\n    else\n    {\n        return l[n/2];\n    }", "    assert(l.size()\
    \ > 0);\n    std::sort(l.begin(), l.end());\n    if (l.size() % 2 == 0) {\n  \
    \      return (l[l.size() / 2] + l[l.size() / 2 - 1]) / 2.0;\n    } else {\n \
    \       return l[l.size() / 2];\n    }"]
stop_tokens:
- "\n}"
